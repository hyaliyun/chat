import{_ as d,o as n,c as i,a as t,m as c,t as u,C as g,M as b,U as y,f as l,F as w,p as _,e as x,q as v}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},q={class:"poem-container"},T={class:"review"},E={class:"review-title"},I={class:"review-content"};function O(r,e,h,m,a,s){return n(),i("div",q,[t("div",T,[t("div",E,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(u(h.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",I,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(u(h.poem.solution),1)])])])}const A=d(k,[["render",O],["__scopeId","data-v-a66c6b88"]]),j=JSON.parse('[{"question":"A palindrome is a word or phrase that reads the same backward as forward. For example, \\"radar\\" is a palindrome because it reads the same from left to right and from right to left. Write a function that takes a string as input and returns \\"YES\\" if the string is a palindrome and \\"NO\\" otherwise. The input string consists of lowercase Latin letters. The string is not empty and its length does not exceed 100 symbols. Function signature: `def is_palindrome(s: str) -> str:` Examples: - `is_palindrome(\\"radar\\")` should return \\"YES\\" - `is_palindrome(\\"hello\\")` should return \\"NO\\"","solution":"def is_palindrome(s: str) -> str: Returns \'YES\' if the string is a palindrome and \'NO\' otherwise. if s == s[::-1]: return \\"YES\\" return \\"NO\\""},{"question":"The company you work for has decided to host an internal hackathon to boost employee engagement and innovation. As part of the competition, one of the challenges presented is to solve the \\"magic square\\" problem. A \\"magic square\\" is a 3x3 grid filled with distinct integers from 1 to 9 such that the sum of the numbers in each row, column, and both main diagonals are the same. Given a partially filled 3x3 grid, complete the grid with distinct integers from 1 to 9 such that it forms a magic square. If it is possible to complete the grid to form a magic square, print the completed grid. If there is no possible way to complete the grid into a magic square, print \\"Impossible\\". The input consists of nine integers, each representing a cell in the 3x3 grid. The integer 0 represents an empty cell. The integers are provided in a single line with spaces separating them, read in a row-wise manner. Sample Input 1: 8 1 6 3 5 0 4 9 0 Sample Output 1: 8 1 6 3 5 7 4 9 2 Sample Input 2: 5 3 4 1 0 0 0 0 0 Sample Output 2: Impossible Ensure to follow these steps for solving the problem: 1. Check the partially filled grid for any constraints that make it impossible to complete. 2. Try to determine the empty cells and find the appropriate integers to fill in while maintaining the magic square property. 3. Validate whether the completed grid fulfills the magic square conditions.","solution":"def is_magic_square(grid): Check if a 3x3 grid is a magic square. s = sum(grid[0]) for i in range(3): if sum(grid[i]) != s or sum(grid[j][i] for j in range(3)) != s: return False if sum(grid[i][i] for i in range(3)) != s or sum(grid[i][2-i] for i in range(3)) != s: return False return True def find_magic_square(grid): from itertools import permutations all_numbers = set(range(1, 10)) filled_numbers_set = set() for row in grid: for num in row: if num != 0: filled_numbers_set.add(num) empty_positions = [(i, j) for i in range(3) for j in range(3) if grid[i][j] == 0] available_numbers = list(all_numbers - filled_numbers_set) for perm in permutations(available_numbers): for idx, (i, j) in enumerate(empty_positions): grid[i][j] = perm[idx] if is_magic_square(grid): return grid for i, j in empty_positions: grid[i][j] = 0 return \\"Impossible\\" def solve_magic_square(input): nums = list(map(int, input.split())) grid = [nums[i*3:(i+1)*3] for i in range(3)] result = find_magic_square(grid) if result == \\"Impossible\\": print(\\"Impossible\\") else: for row in result: print(\\" \\".join(map(str, row))) # To call the function you would need to replace input_string with actual input # input_string = \\"8 1 6 3 5 0 4 9 0\\" # solve_magic_square(input_string)"},{"question":"You are given an array consisting of non-negative integers. Your task is to modify the array as follows: replace each element with the greatest element among the elements to its right, and replace the last element with -1. Write a function `replaceElements(arr)` that takes an array `arr` and performs the above modifications. The function should update the array in-place and does not need to return anything. **Example:** ``` Input: arr = [17, 18, 5, 4, 6, 1] Output: arr = [18, 6, 6, 6, 1, -1] ``` Constraints: - `arr` will have at least one element. - The elements of `arr` are non-negative. - `arr` can have up to 10,000 elements.","solution":"def replaceElements(arr): Modify the array so that each element is replaced by the greatest element among the elements to its right, and the last element is replaced with -1. # Edge case: if array is empty or has one element if not arr: return if len(arr) == 1: arr[0] = -1 return n = len(arr) max_right = -1 for i in range(n-1, -1, -1): new_val = max_right if arr[i] > max_right: max_right = arr[i] arr[i] = new_val"},{"question":"Consider a scenario where you have a grid of integers and your task is to find the largest possible sum of numbers in any subgrid of a given size. The subgrid is defined as a contiguous block within the grid. Your task is to implement a function that receives a 2D list (a grid) and the dimensions of the subgrid (rows and columns) and returns the largest sum of elements within any such subgrid. # Function Signature ```python def largest_subgrid_sum(grid: List[List[int]], subgrid_rows: int, subgrid_cols: int) -> int: ``` # Input Format - **grid**: A 2D list of integers. - **subgrid_rows**: An integer representing the number of rows in the subgrid. - **subgrid_cols**: An integer representing the number of columns in the subgrid. # Constraints - `1 ≤ len(grid) ≤ 1000` - `1 ≤ len(grid[0]) ≤ 1000` - `1 ≤ subgrid_rows ≤ len(grid)` - `1 ≤ subgrid_cols ≤ len(grid[0])` # Output Format Return an integer representing the largest sum of any subgrid with the given dimensions. # Example ```python grid = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] subgrid_rows = 2 subgrid_cols = 2 result = largest_subgrid_sum(grid, subgrid_rows, subgrid_cols) print(result) # Output should be 28 ``` # Explanation In the example, the subgrid with the largest sum is: ``` 5 6 8 9 ``` Which sums to 28. # Notes - You should aim for an efficient solution as the grid can be large. - Consider pre-computing sums to avoid repeated calculations if necessary.","solution":"from typing import List def largest_subgrid_sum(grid: List[List[int]], subgrid_rows: int, subgrid_cols: int) -> int: def calculate_prefix_sum(matrix): rows = len(matrix) cols = len(matrix[0]) prefix_sum = [[0] * (cols + 1) for _ in range(rows + 1)] for r in range(1, rows + 1): for c in range(1, cols + 1): prefix_sum[r][c] = matrix[r-1][c-1] + prefix_sum[r-1][c] + prefix_sum[r][c-1] - prefix_sum[r-1][c-1] return prefix_sum rows = len(grid) cols = len(grid[0]) prefix_sum = calculate_prefix_sum(grid) max_sum = float(\'-inf\') for r in range(subgrid_rows, rows + 1): for c in range(subgrid_cols, cols + 1): total = prefix_sum[r][c] - prefix_sum[r - subgrid_rows][c] - prefix_sum[r][c - subgrid_cols] + prefix_sum[r - subgrid_rows][c - subgrid_cols] if total > max_sum: max_sum = total return max_sum"},{"question":"You are given a string `s` consisting of lowercase alphabets. You need to find the length of the longest substring of `s` where all characters are unique. The solution needs to be efficient, as `s` can be very long. Implement a function `longest_unique_substring(s: str) -> int` that returns the length of the longest substring with all unique characters. # Input - A single string `s` (1 ≤ |s| ≤ 10^5), where |s| is the length of the string. # Output - An integer representing the length of the longest substring with all unique characters. # Example Input ``` abcabcbb ``` Output ``` 3 ``` Explanation The longest substring with all unique characters is \\"abc\\" with the length of 3. Input ``` bbbbb ``` Output ``` 1 ``` Explanation The longest substring with all unique characters is \\"b\\" with the length of 1. # Notes - Use a sliding window approach to efficiently find the solution. - Be mindful of the constraints, ensure your solution has a time complexity suitable for large input sizes.","solution":"def longest_unique_substring(s: str) -> int: Returns the length of the longest substring with all unique characters. if not s: return 0 char_index = {} max_len = 0 start = 0 for end, char in enumerate(s): if char in char_index: start = max(start, char_index[char] + 1) char_index[char] = end max_len = max(max_len, end - start + 1) return max_len"},{"question":"You have an array of integers and you need to perform a series of operations on it. You are given an array `a` of `n` integers and `m` queries. Each query can be one of the following types: 1. Update: Update the value at a specified index. 2. Sum: Compute the sum of the values in a subarray. The first line of the input contains two integers, `n` (1 ≤ n ≤ 100,000) — the number of elements in the array, and `m` (1 ≤ m ≤ 100,000) — the number of queries. The second line contains `n` space-separated integers, representing the initial values of the array. Each of the next `m` lines contains a query. A query is either of the form `1 i x` which means update the element at index `i` to `x` (1 ≤ i ≤ n, 1 ≤ x ≤ 10^9), or of the form `2 l r` which means compute the sum of the elements from index `l` to index `r` inclusive (1 ≤ l ≤ r ≤ n). For each sum query, print the result on a new line. Example input: ``` 5 3 1 2 3 4 5 2 1 3 1 3 10 2 2 5 ``` Example output: ``` 6 21 ```","solution":"class NumArray: def __init__(self, nums): self.nums = nums self.n = len(nums) self.bit = [0] * (self.n + 1) for i, num in enumerate(nums): self._update_bit(i + 1, num) def _update_bit(self, index, val): while index <= self.n: self.bit[index] += val index += index & -index def update(self, index, val): diff = val - self.nums[index] self.nums[index] = val self._update_bit(index + 1, diff) def sum_range(self, left, right): return self._query(right + 1) - self._query(left) def _query(self, index): s = 0 while index > 0: s += self.bit[index] index -= index & -index return s def handle_queries(n, nums, queries): num_array = NumArray(nums) results = [] for query in queries: t, x, y = query if t == 1: num_array.update(x - 1, y) elif t == 2: results.append(num_array.sum_range(x - 1, y - 1)) return results"},{"question":"You are tasked with developing a network communication simulation for a group of devices connected in a specific manner. The network consists of n devices, and each device can directly communicate with some and indirectly with others through other devices. The communication paths are structured such that there is exactly one path between any two devices. Each direct communication link between two devices is characterized by a latency. The latencies are defined as distinct integers from 1 to n - 1. The latency of a direct link from device u to device v equals the latency from device v to device u. To maintain a high level of efficiency in communication, you need to determine the maximum cumulative latency sum for all device pairs through their communication paths. Given the network\'s structure and the distinct latencies, devise a strategy to compute the maximum total latency across all distinct communication paths between devices. # Input - The first line contains an integer n (2 leq n leq 2000), the number of devices in the network. - Each of the next n - 1 lines contains three integers u_i, v_i, and w_i (1 leq u_i, v_i leq n, u_i neq v_i, 1 leq w_i leq n - 1), indicating there\'s a direct communication link between devices u_i and v_i with a latency of w_i. # Output - Print the maximum possible total latency for all device pairs in the network. # Example Input ``` 3 1 2 1 2 3 2 ``` Output ``` 6 ``` Explanation The network described has three devices with the following latencies: - Between device 1 and device 2: 1 - Between device 2 and device 3: 2 There are three pairs of devices: - Pair (1, 2): Latency = 1 - Pair (1, 3): Latency = 1 + 2 = 3 - Pair (2, 3): Latency = 2 So, the maximum total latency sum for communication paths is 1 + 3 + 2 = 6. Write a program to determine the maximum possible total sum of latencies for all device pairs in such a network.","solution":"def max_total_latency(n, edges): import collections from heapq import heappop, heappush # Build the adjacency list for the graph adj = collections.defaultdict(list) for u, v, w in edges: adj[u].append((v, w)) adj[v].append((u, w)) def dijkstra(source): min_heap = [(0, source)] distance = {i: float(\'inf\') for i in range(1, n + 1)} distance[source] = 0 while min_heap: dist, node = heappop(min_heap) if dist > distance[node]: continue for neighbor, weight in adj[node]: d = dist + weight if d < distance[neighbor]: distance[neighbor] = d heappush(min_heap, (d, neighbor)) return distance # Sum up all the distances for each pair (i, j) total_latency = 0 for i in range(1, n + 1): distances = dijkstra(i) for j in range(i + 1, n + 1): total_latency += distances[j] return total_latency # Example usage if __name__ == \\"__main__\\": n = 3 edges = [(1, 2, 1), (2, 3, 2)] print(max_total_latency(n, edges)) # Output: 6"},{"question":"A building has n floors labeled from 1 to n and m elevators labeled from 1 to m. Each elevator can move between a specific range of floors. More specifically, for the i-th elevator, there are two fixed points ai and bi (1 <= ai <= bi <= n) indicating that the i-th elevator can travel any floor from ai to bi, inclusively. You need to determine whether it is possible to travel from floor s to floor t using the elevators provided. If possible, output \\"YES\\", otherwise output \\"NO\\". Input: - The first line contains three integers n, m, and q (1 <= n, m <= 100; 1 <= q <= 1000), where n is the total number of floors, m is the number of elevators, and q is the number of queries. - The next m lines each contain two integers ai and bi indicating the range of floors the i-th elevator can reach. - The next q lines each contain two integers si and ti indicating the start and target floors for each query (1 <= si, ti <= n). Output: - For each query, output \\"YES\\" if it is possible to travel from floor si to floor ti using the elevators, otherwise output \\"NO\\". Example: Input: ``` 5 3 2 1 3 2 5 4 5 1 3 2 4 ``` Output: ``` YES YES ```","solution":"def can_travel_between_floors(n, m, q, elevator_ranges, queries): Determines if it\'s possible to travel between the given start and target floor for each query using the provided elevators. Args: n (int): total number of floors. m (int): number of elevators. q (int): number of queries. elevator_ranges (List[Tuple[int, int]]): list of tuples where each tuple contains (ai, bi) indicating floors the i-th elevator can reach. queries (List[Tuple[int, int]]): list of tuples where each tuple contains (si, ti) indicating start and target floors. Returns: List[str]: list of \\"YES\\" or \\"NO\\" for each query. results = [] # Process each query for (s, t) in queries: reachable = False # Check each elevator to see if it can be used to travel between s and t for (a, b) in elevator_ranges: if s >= a and s <= b and t >= a and t <= b: reachable = True break if reachable: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a grid with n rows and m columns filled with non-negative integers. You have to find the longest increasing path in the grid. An increasing path is defined as a sequence of cells where each successive cell has a higher value than the previous cell. You can start from any cell in the grid, and you are allowed to move to any of the four adjacent cells (left, right, up, or down). The first line of input contains a single integer t (1 le t le 10) — the number of test cases. Each test case starts with two integers n and m (1 le n, m le 1000) — the number of rows and columns in the grid, respectively. Each of the next n lines contains m integers, denoting the grid elements. All integers are between 0 and 10^6. For each test case, you should print a single integer — the length of the longest increasing path in the grid. # Example Input: ``` 2 3 3 9 9 4 6 6 8 2 1 1 4 4 3 4 5 6 9 8 7 6 3 2 1 8 1 2 3 4 ``` Output: ``` 4 6 ``` # Explanation In the first test case, one of the longest increasing paths is [1, 2] -> [1, 2] -> [2, 2] -> [2, 3], all of which form an increasing sequence: 1, 2, 8, 9. In the second test case, the longest increasing path starts at [1, 1]: 1 -> 2 -> 3 -> 4 -> 6 -> 8.","solution":"def longest_increasing_path(t, test_cases): def dfs(x, y, cache): if cache[x][y] != -1: return cache[x][y] max_length = 1 for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] > grid[x][y]: max_length = max(max_length, 1 + dfs(nx, ny, cache)) cache[x][y] = max_length return max_length results = [] for i in range(t): n, m, grid = test_cases[i] cache = [[-1] * m for _ in range(n)] max_path_length = 0 for x in range(n): for y in range(m): max_path_length = max(max_path_length, dfs(x, y, cache)) results.append(max_path_length) return results"},{"question":"A company is organizing a team-building game where employees have to form teams. Each team should consist of exactly two employees. The company has a list of n employees, each identified by a unique integer ID between 1 and n. However, some pairs of employees might not be compatible to form a team due to various reasons. Given the number of employees n and a list containing all incompatible pairs, write a program to count the maximum number of teams that can be formed. Each employee can be a part of only one team and no team can have incompatible pairs. The first line contains two integers n (1 ≤ n ≤ 100) and m (0 ≤ m ≤ n(n-1)/2) — the number of employees and the number of incompatible pairs respectively. Each of the next m lines contain two integers a and b (1 ≤ a, b ≤ n, a ≠ b) representing that employees a and b are incompatible. Output a single integer representing the maximum number of teams that can be formed. For example: Input: ``` 5 3 1 2 1 3 4 5 ``` Output: ``` 2 ``` Explanation: - Employees 1, 2, 3 are mutually incompatible with each other and cannot form a team. - So, the best we can do is to form teams (1, 4) and (2, 5) or (2, 4) and (1, 3) and leave the remaining employee alone.","solution":"def max_teams(n, m, incompatible_pairs): from itertools import combinations # Initialize compatibility as all pairs are compatible compatible = [[True] * n for _ in range(n)] # Mark incompatible pairs for a, b in incompatible_pairs: compatible[a-1][b-1] = False compatible[b-1][a-1] = False # Recursive function to form pairs def form_pairs(i, taken): if i == n: return 0 if taken[i]: return form_pairs(i + 1, taken) max_formed = 0 taken[i] = True for j in range(i + 1, n): if not taken[j] and compatible[i][j]: taken[j] = True max_formed = max(max_formed, 1 + form_pairs(i + 1, taken)) taken[j] = False taken[i] = False return max(max_formed, form_pairs(i + 1, taken)) return form_pairs(0, [False] * n) # Sample Usage n = 5 m = 3 incompatible_pairs = [(1, 2), (1, 3), (4, 5)] print(max_teams(n, m, incompatible_pairs)) # Output: 2"},{"question":"Mark runs a small startup and has recently hired a team of developers. To help with their onboarding, Mark has introduced a code assessment challenge. The challenge involves working with a binary sequence. Mark provides the developers with a binary string of length n and gives them a task to maximize the number of consecutive \'1\'s in any substring of the given string by flipping at most k \'0\'s to \'1\'s. A substring is defined as a contiguous sequence of characters within the string. For example, if Mark provides the binary string \\"1001001\\" and k = 2, the developers can flip the two \'0\'s at positions 2 and 4, transforming the string into \\"1111001\\", which results in a maximum substring of consecutive \'1\'s of length 4. Write a function to determine the length of the longest substring of consecutive \'1\'s obtainable by flipping at most k \'0\'s to \'1\'s. # Input: - The first line contains an integer n (1 le n le 10^5) — the length of the binary string. - The second line contains the binary string of length n. - The third line contains an integer k (0 le k le n) — the maximum number of \'0\'s that can be flipped. # Output: - Print a single integer — the length of the longest substring of consecutive \'1\'s obtainable after flipping at most k \'0\'s. # Example: Input: ``` 7 1001001 2 ``` Output: ``` 4 ``` # Note: In the given example, flipping the \'0\'s at positions 2 and 4 transforms the binary string to \\"1111001\\", providing the longest consecutive \'1\'s substring of length 4.","solution":"def max_consecutive_ones(n, binary_string, k): This function returns the length of the longest substring of consecutive \'1\'s obtainable by flipping at most k \'0\'s to \'1\'s in the provided binary string. left = 0 max_length = 0 zero_count = 0 for right in range(n): if binary_string[right] == \'0\': zero_count += 1 while zero_count > k: if binary_string[left] == \'0\': zero_count -= 1 left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are given a list of `n` distinct integers and a target integer `x`. Your task is to find the length of the shortest contiguous subarray whose sum is exactly `x`. If no such subarray exists, return `-1`. A contiguous subarray is a sequence of consecutive elements from the array. # Input The input consists of: - An integer `n` (1 ≤ `n` ≤ 100000) — the number of elements in the array. - A list of `n` integers (−10^9 ≤ integer ≤ 10^9) — the elements of the array. - An integer `x` (−10^9 ≤ `x` ≤ 10^9) — the target sum. # Output Output the length of the shortest contiguous subarray with a sum of `x`. If no such subarray exists, return `-1`. # Example Input ``` 5 1 2 3 4 5 9 ``` Output ``` 2 ``` Input ``` 5 1 2 3 4 5 15 ``` Output ``` 5 ``` Input ``` 5 1 2 3 4 5 20 ``` Output ``` -1 ```","solution":"def shortest_subarray_with_sum(n, arr, x): Returns the length of the shortest contiguous subarray whose sum is exactly x. If no such subarray exists, return -1. min_length = float(\'inf\') current_sum = 0 left = 0 for right in range(n): current_sum += arr[right] while current_sum >= x: if current_sum == x: min_length = min(min_length, right - left + 1) current_sum -= arr[left] left += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"You are organizing a field trip for students and have arranged a set of activities for the day. Each activity requires a certain amount of time, and you want to maximize the number of activities the students can engage in without overlapping. The day\'s schedule can be represented as a list of activities, each defined by a start time and an end time. You cannot participate in multiple activities simultaneously, meaning if one activity ends at a particular time, the next activity must start after or at the same time as the previous activity ends. You are given a number of test cases. For each test case, your goal is to determine the maximum number of non-overlapping activities that can be scheduled. The first line contains a single integer t ( 1 le t le 100 ), the number of test cases. Each test case starts with a single integer n ( 1 le n le 100 ), the number of activities. The next n lines each contain two integers s_i and e_i ( 0 le s_i < e_i le 1000 ), the start time and end time of the activity. For each test case, print the maximum number of non-overlapping activities that can be scheduled. # Input ``` 2 3 1 3 2 5 4 6 4 1 2 3 4 0 6 5 7 ``` # Output ``` 2 3 ``` # Explanation In the first test case, you can select activities (1, 3) and (4, 6) without any overlap, achieving a maximum of 2 activities. In the second test case, you can select activities (1, 2), (3, 4), and (5, 7) without any overlap, achieving a maximum of 3 activities.","solution":"def max_activities(t, test_cases): results = [] for i in range(t): n, activities = test_cases[i] activities.sort(key=lambda x: x[1]) # Sort by end time count = 0 end_time = 0 for start, end in activities: if start >= end_time: count += 1 end_time = end results.append(count) return results"},{"question":"You are given a string `s` consisting of lowercase English letters. Your task is to find the length of the smallest substring of `s` that contains all the distinct characters of `s`. # Input: - A single line containing the string `s` (1 ≤ |s| ≤ 100,000). # Output: - A single integer — the length of the smallest substring of `s` that contains all the distinct characters of `s`. # Example: Input: ``` abcabcbb ``` Output: ``` 3 ``` Input: ``` aabcbcdbca ``` Output: ``` 4 ``` # Explanation: 1. In the first example, the smallest substring containing all distinct characters `a`, `b`, and `c` is `abc`, which has a length of 3. 2. In the second example, the smallest substring containing all distinct characters `a`, `b`, `c`, and `d` is `dbca`, which has a length of 4. # Constraints: - Your solution should optimize the sliding window or two-pointer technique to ensure it executes efficiently within the input size limit.","solution":"def smallest_substring_length_with_all_distinct_chars(s): Finds the length of the smallest substring that contains all distinct characters of the string `s`. from collections import defaultdict # Get the number of unique characters in s unique_chars = set(s) num_unique_chars = len(unique_chars) # Variables to maintain the sliding window left = 0 min_length = float(\'inf\') char_count = defaultdict(int) distinct_count = 0 # Expand the window by moving right for right in range(len(s)): if char_count[s[right]] == 0: distinct_count += 1 char_count[s[right]] += 1 # When all unique characters are included in window, move left to minimize the window size while distinct_count == num_unique_chars and left <= right: min_length = min(min_length, right - left + 1) char_count[s[left]] -= 1 if char_count[s[left]] == 0: distinct_count -= 1 left += 1 return min_length"},{"question":"A private library wants to implement a system to manage its collection of books and facilitate the borrowing process for members. Each book in the library is identified by a unique book ID, and each member has a unique member ID. The library keeps a record of which books are currently borrowed and by which members. The system should provide the following functionalities: 1. Add a new book to the collection. 2. Remove a book from the collection (only if it is not currently borrowed). 3. Borrow a book (only if it is available). 4. Return a borrowed book. 5. List all books currently borrowed by a specific member. Implement a class `Library` with the following methods: - `def __init__(self):` Initializes an empty library. - `def add_book(self, book_id: int) -> None:` Adds a book to the collection. - `def remove_book(self, book_id: int) -> bool:` Removes a book from the collection if it is not currently borrowed and returns `True`. If the book is borrowed or does not exist, returns `False`. - `def borrow_book(self, book_id: int, member_id: int) -> bool:` Allows a member to borrow a book if it is available and returns `True`. If the book is already borrowed or does not exist, returns `False`. - `def return_book(self, book_id: int) -> bool:` Returns a borrowed book and returns `True`. If the book was not borrowed, returns `False`. - `def list_borrowed_books(self, member_id: int) -> List[int]:` Returns a list of book IDs currently borrowed by the specified member. # Example ```python library = Library() library.add_book(1) library.add_book(2) library.add_book(3) print(library.borrow_book(1, 101)) # True print(library.borrow_book(1, 102)) # False print(library.return_book(1)) # True print(library.remove_book(1)) # True library.borrow_book(2, 101) library.borrow_book(3, 102) print(library.list_borrowed_books(101)) # [2] print(library.list_borrowed_books(102)) # [3] ``` Instructions: - You can assume book IDs and member IDs are positive integers. - No two books or members will have the same ID.","solution":"from typing import List class Library: def __init__(self): self.books = set() self.borrowed_books = {} def add_book(self, book_id: int) -> None: self.books.add(book_id) def remove_book(self, book_id: int) -> bool: if book_id in self.books and book_id not in self.borrowed_books: self.books.remove(book_id) return True return False def borrow_book(self, book_id: int, member_id: int) -> bool: if book_id in self.books and book_id not in self.borrowed_books: self.borrowed_books[book_id] = member_id return True return False def return_book(self, book_id: int) -> bool: if book_id in self.borrowed_books: del self.borrowed_books[book_id] return True return False def list_borrowed_books(self, member_id: int) -> List[int]: return [book_id for book_id, borrower_id in self.borrowed_books.items() if borrower_id == member_id]"},{"question":"# Problem Statement: Alex is solving his way through a maze in a 2D grid. The maze consists of both empty cells where Alex can move and walls that block his path. Alex can start from an initial position, and he aims to reach the target position in the shortest possible time. Each cell in the maze can either be empty (denoted by \'.\') or a wall (denoted by \'#\'). Alex can move one cell at a time either up, down, left, or right, but cannot move into a cell that contains a wall. Given is a grid of size n x m, with Alex starting at position (s_x, s_y) and aiming to reach position (t_x, t_y). Your task is to write a function that determines the minimum number of moves Alex needs to get from his starting position to his target position, or outputs -1 if it is impossible for Alex to reach the target. # Input: The first line contains two integers, n and m (1 ≤ n, m ≤ 1000), the grid dimensions. The second line contains four integers s_x, s_y, t_x, t_y (1 ≤ s_x, s_y, t_x, t_y ≤ n or m), Alex\'s starting and target positions. It\'s guaranteed that these positions are empty cells. The next n lines each contains a string of length m representing the maze grid. Each character in the string is either \'.\' or \'#\'. # Output: Print the minimum number of moves required for Alex to reach the target, or -1 if there is no possible path. # Example: Input: ``` 5 6 1 1 5 6 . . # . . . . # # # # . . . . # . . . # . . . . . . . . . . ``` Output: ``` 9 ``` # Explanation: Alex can follow this path in 9 moves: (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3) -> (4,3) -> (4,4) -> (4,5) -> (5,5) -> (5,6).","solution":"from collections import deque def min_moves(n, m, s_x, s_y, t_x, t_y, grid): Returns the minimum number of moves required for Alex to reach the target position, or -1 if it is impossible. # Initialize variables s_x -= 1 s_y -= 1 t_x -= 1 t_y -= 1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # BFS initialization queue = deque([(s_x, s_y, 0)]) visited = set((s_x, s_y)) # BFS loop while queue: x, y, steps = queue.popleft() # Check if we reached the target if (x, y) == (t_x, t_y): return steps # Explore neighbors for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1"},{"question":"In a distant land, there is an old wizard who creates magic potions. The wizard has a large book of spells that contains a sequence of potions, each potion represented by a lowercase English letter. The potency of a spell is determined by the number of distinct potions (letters) it contains. The wizard wants to find out the potency of a particular spell, defined as a substring of the sequence of potions. However, there is a twist: the potency should be recalculated considering that certain steps within the substring are skipped. Specifically, given a sequence of potions s, and two integers k and d, the potency of a spell is determined by considering every d-th potion starting from the k-th position until the end of the substring. You are tasked to help the wizard determine the potency of the spell for different substrings. Input: - The first line contains the string s representing the sequence of potions (1 ≤ |s| ≤ 10^5). - The second line contains two space-separated integers, k (1 ≤ k ≤ |s|) and d (1 ≤ d ≤ 10^5), describing the starting position and the step size respectively. Output: - Print a single integer—the potency of the spell, i.e., the number of distinct potions in the substring when considering every d-th potion starting from the k-th position. Example: Input: abacabadabacaba 2 3 Output: 3 Explanation: Starting from the 2nd position and taking every 3rd potion, we get the sequence \\"bcbca\\", which contains the distinct potions \'a\', \'b\', and \'c\'. Therefore, the potency of the spell is 3.","solution":"def potency_of_spell(s, k, d): Calculates the potency of a spell given a string of potions s, and two integers k and d. Parameters: - s : str : The sequence of potions. - k : int : The starting position (1-based index). - d : int : The step size. Returns: - int : The number of distinct potions in the substring. distinct_potions = set() # Convert to 0-based index by subtracting 1 from k k -= 1 for i in range(k, len(s), d): distinct_potions.add(s[i]) return len(distinct_potions)"},{"question":"Henry loves ancient texts and often reads about old civilizations. One such text discussed an ancient game played by counting digits. There are two strings, `s1` and `s2`, representing sequences of digits. Henry is asked to modify one of the strings by rotating it any number of times to the left, and then find the maximum length of a common substring between the modified `s1` and `s2`. The rule for rotating a string to the left is to shift all characters in the string one position to the left and move the first character to the end. For example, rotating the string \\"1234\\" to the left once results in \\"2341\\". Write a function that takes two strings `s1` and `s2`, where `1 <= |s1|, |s2| <= 1000`, and returns the length of the longest common substring between any left-rotated version of `s1` and `s2`. Input: - The first line contains the string `s1`. - The second line contains the string `s2`. Output: - Print a single integer representing the length of the longest common substring between any left-rotated version of `s1` and `s2`. Example: Input: 1234 3412 Output: 4 Explanation: By rotating \\"1234\\" three times to the left, we get \\"3412\\", which matches exactly with `s2`, resulting in a common substring of length 4.","solution":"def longest_common_substring_length(s1, s2): Returns the length of the longest common substring between any left-rotated version of s1 and s2. def longest_common_substring(s1, s2): Helper function to find the longest common substring between two strings. m, n = len(s1), len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] max_len = 0 for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 max_len = max(max_len, dp[i][j]) return max_len max_len = 0 # Try all rotations of s1 for i in range(len(s1)): rotated_s1 = s1[i:] + s1[:i] max_len = max(max_len, longest_common_substring(rotated_s1, s2)) return max_len"},{"question":"You are given an integer array representing the height of buildings on a street, ordered from left to right. A person can see a building from the left if no taller building is in front of it. Write a function to determine how many buildings are visible from the left side of the street. The first line contains a single integer — n (1 ≤ n ≤ 10^5), the number of buildings. The second line contains n integers — height of the buildings, integers are between 1 and 10^5. Output a single integer — the number of buildings visible from the left side. Example: ``` Input: 6 3 5 4 4 6 2 Output: 3 ```","solution":"def count_visible_buildings(buildings): Returns the number of buildings visible from the left side of the street. Parameters: buildings (list of int): Heights of the buildings. Returns: int: The number of buildings visible from the left side. if not buildings: return 0 visible_count = 0 max_height_so_far = 0 for height in buildings: if height > max_height_so_far: visible_count += 1 max_height_so_far = height return visible_count"},{"question":"Lena is an adventurous traveler and she recently visited a chain of beautiful islands. While exploring, she discovered a hidden treasure that consists of a grid of n times m cells. Each cell contains a unique treasure coded by an integer value. Lena wants to collect the greatest treasure from specific rectangular regions of the grid to maximize her gain. But to cover more ground, she needs help from you to efficiently determine the highest treasures in various regions of the grid. You are given a grid of integers, and Lena has q queries. For each query, you are given the coordinates of the top-left and bottom-right corners of a rectangular region in the grid, and you need to determine the maximum treasure value in that region. The first line contains two integers n and m (1 leq n, m leq 1,000) — the dimensions of the grid. The next n lines contain m integers each, where a_{ij} (-10^{9} leq a_{ij} leq 10^{9}) is the value of the treasure in the cell at row i and column j. The following line contains an integer q (1 leq q leq 10,000) — the number of queries. The k-th among the following q lines contains four integers x1_k, y1_k, x2_k, y2_k (1 leq x1_k leq x2_k leq n, 1 leq y1_k leq y2_k leq m) — the coordinates of the top-left and bottom-right corners of the rectangular region for the k-th query. For each query, output the maximum value of the treasure in the specified region. # Example **Input:** ``` 4 5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 2 1 1 2 2 2 3 4 5 ``` **Output:** ``` 7 20 ``` # Explanation In the first query, the region from (1, 1) to (2, 2) contains the values: [1, 2; 6, 7]. The maximum value in this region is 7. In the second query, the region from (2, 3) to (4, 5) contains the values: [8, 9, 10; 13, 14, 15; 18, 19, 20]. The maximum value in this region is 20.","solution":"def find_max_in_region(grid, queries): Finds the maximum value in the specified regions for each query. Parameters: grid: List[List[int]]: 2D list representing the grid of treasures. queries: List[Tuple[int, int, int, int]]: Each tuple contains 4 integers representing the coordinates of the top-left and bottom-right corners of a rectangular region. Returns: List[int]: List of maximum values for each query. max_values = [] for x1, y1, x2, y2 in queries: max_value = float(\'-inf\') for i in range(x1 - 1, x2): for j in range(y1 - 1, y2): if grid[i][j] > max_value: max_value = grid[i][j] max_values.append(max_value) return max_values"},{"question":"Given a string of lowercase English letters, you need to find the length of the longest substring without repeating characters. This can be done using the sliding window approach to efficiently find the longest substring. **Input:** - A single line containing a string consisting of lowercase English letters. The length of the string will be in the range [1, 100,000]. **Output:** - Print a single integer, representing the length of the longest substring without repeating characters. **Example:** Input: ``` abcabcbb ``` Output: ``` 3 ``` Explanation: The answer is \\"abc\\", with the length of 3. Input: ``` bbbbb ``` Output: ``` 1 ``` Explanation: The answer is \\"b\\", with the length of 1. Input: ``` pwwkew ``` Output: ``` 3 ``` Explanation: The answer is \\"wke\\", with the length of 3. Note that \\"pwke\\" is a subsequence and not a substring.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. :param s: input string :return: length of the longest substring without repeating characters char_map = {} start = 0 max_length = 0 for end in range(len(s)): if s[end] in char_map and char_map[s[end]] >= start: start = char_map[s[end]] + 1 char_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Mario loves playing with dominoes. He has an infinite number of standard domino pieces, each piece showing two numbers from 0 to 6. Mario wants to create a sequence where the dominoes are lined up in a way that the adjacent numbers on the domino pieces match. Given an integer n (1 ≤ n ≤ 10^5), determine the number of distinct ways Mario can arrange n dominoes in a sequence. Each valid arrangement must be properly aligned such that the number at the right end of a domino matches the number at the left end of the next domino in the sequence. Assume that each unique domino arrangement is considered distinct. Return the result modulo 10^9+7. Input: - An integer n, the number of domino pieces. Output: - The number of distinct valid sequences of dominoes modulo 10^9+7. Examples: Input: 2 Output: 28 Input: 3 Output: 196 Note: In the first example, when n = 2, there are 28 distinct ways to align 2 dominoes properly. In the second example, when n = 3, there are 196 distinct ways to align 3 dominoes properly.","solution":"MOD = 10**9 + 7 def count_domino_sequences(n): Returns the number of distinct valid sequences of n dominoes modulo 10^9 + 7. # For n=1, there are 28 possible dominoes (0|0 to 6|6) # For n>=2, each additional domino can be added at 7 possible points at each end of the sequence # The number of arrangements follows (28 * 7^(n-1)) % MOD return (28 * pow(7, n - 1, MOD)) % MOD"},{"question":"Consider a fictional planet where the inhabitants use a base-B numbering system. The unique aspect is that every digit in this base-B system is a letter from the English alphabet, starting from \'A\'. For example, in a base-2 system, the digits are \'A\' and \'B\'; in a base-3 system, the digits are \'A\', \'B\', and \'C\', and so on. Your task is to write a function that converts a given string representation of a number from an arbitrary base-B system (where B can be between 2 and 26 inclusive) to its equivalent integer value in base-10. The input consists of: - An integer B (2 ≤ B ≤ 26) representing the base of the given number. - A string S representing the number in the base-B system using the first B letters of the English alphabet. The output should be a single integer denoting the base-10 equivalent of the given base-B number. Function Signature: ```python def convert_to_base10(B: int, S: str) -> int: ``` # Input - An integer B (2 ≤ B ≤ 26). - A string S where each character of S is a capital letter from \'A\' to the corresponding Bth letter of the alphabet. # Output - An integer representing the base-10 equivalent of the input base-B number. # Examples Example 1: Input: ``` 3 BA ``` Output: ``` 3 ``` Explanation: - \'B\' corresponds to 1 (second character in the alphabet). - \'A\' corresponds to 0 (first character in the alphabet). - Therefore, BA in base-3 is 1*(3^1) + 0*(3^0) = 3. Example 2: Input: ``` 4 CAD ``` Output: ``` 49 ``` Explanation: - \'C\' corresponds to 2 (third character in the alphabet). - \'A\' corresponds to 0 (first character in the alphabet). - \'D\' corresponds to 3 (fourth character in the alphabet). - Therefore, CAD in base-4 is 2*(4^2) + 0*(4^1) + 3*(4^0) = 32 + 3 + 0 = 49.","solution":"def convert_to_base10(B: int, S: str) -> int: Converts a number from a fictional planet\'s base-B system to base-10. Parameters: B (int): The base of the given number (2 <= B <= 26). S (str): The string representation of the number in the base-B system. Returns: int: The base-10 equivalent of the number. base10_value = 0 length = len(S) for i in range(length): digit_value = ord(S[i]) - ord(\'A\') power = length - i - 1 base10_value += digit_value * (B ** power) return base10_value"},{"question":"You are given an array of n integers. You have to process multiple queries on this array. For each query, you will be given two integers l and r. Your task is to find the sum of all the elements from index l to index r, inclusive. The first line contains two integers n and q (1 le n, q le 10^5) — the size of the array and the number of queries, respectively. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9), representing the elements of the array. Each of the next q lines contains two integers l and r (1 le l le r le n), representing a query. The indices are 1-based. Print q lines, each containing a single integer — the sum of the elements from index l to index r. Example: Input: ``` 5 3 1 2 3 4 5 1 3 2 5 3 3 ``` Output: ``` 6 14 3 ``` Explanation: - For the first query, the sum of elements from index 1 to 3 is 1 + 2 + 3 = 6. - For the second query, the sum of elements from index 2 to 5 is 2 + 3 + 4 + 5 = 14. - For the third query, the sum of elements from index 3 to 3 is simply 3.","solution":"def compute_prefix_sums(arr): Computes and returns the prefix sums array for arr. prefix_sums = [0] * (len(arr) + 1) for i in range(len(arr)): prefix_sums[i+1] = prefix_sums[i] + arr[i] return prefix_sums def range_sum(prefix_sums, l, r): Returns the range sum from index l to r using the prefix sums array. return prefix_sums[r] - prefix_sums[l-1] def process_queries(n, q, arr, queries): prefix_sums = compute_prefix_sums(arr) results = [] for l, r in queries: results.append(range_sum(prefix_sums, l, r)) return results"},{"question":"You are designing a warehouse management system that involves locating the optimal placement for goods to minimize the walking distance for workers. The warehouse is represented as a grid of size `M x N`, where each cell can either be empty (denoted by \'.\') or occupied by an obstacle (denoted by \'*\'). Workers need to place a new shipment in the warehouse. The goal is to place the goods at an empty cell that is closest to the entrance of the warehouse. The entrance is always located at the top-left corner of the grid (i.e., cell `(0, 0)`). If there are multiple equally optimal cells, you can choose any of them. Implement a function that finds the optimal empty cell and marks it with a letter \'G\'. The function should return the modified grid with the new placement. **Input:** - An integer `M` representing the number of rows in the warehouse grid. - An integer `N` representing the number of columns in the warehouse grid. - A list of strings representing the warehouse grid. Each string denotes a row in the grid, where \'.\' is an empty cell and \'*\' is an obstacle. **Output:** - A list of strings representing the warehouse grid after placing the goods. The new placement should be marked with \'G\'. You may assume that it is guaranteed there is at least one empty cell in the grid. **Example:** ``` Input: M = 5 N = 7 grid = [ \\"..*....\\", \\"**.*...\\", \\"....*..\\", \\"*.***..\\", \\".*.....\\" ] Output: [ \\"G.*....\\", \\"**.*...\\", \\"....*..\\", \\"*.***..\\", \\".*.....\\" ] ``` In the example above, the optimal cell to place the goods is `(0,1)` which is the closest empty cell to the entrance `(0,0)`. Write a function `place_goods(M, N, grid)` that implements the described functionality.","solution":"from collections import deque def place_goods(M, N, grid): Place goods (denoted by \'G\') at the closest empty cell (denoted by \'.\') to the entrance (0,0). # Convert grid to a list of list of characters grid = [list(row) for row in grid] # Directions for moving in the grid (up, down, left, right) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS to find the nearest empty cell (\'.\') queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if grid[x][y] == \'.\': grid[x][y] = \'G\' break for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < M and 0 <= ny < N and (nx, ny) not in visited and grid[nx][ny] != \'*\': queue.append((nx, ny)) visited.add((nx, ny)) # Convert grid back to list of strings return [\'\'.join(row) for row in grid]"},{"question":"You are given two sequences of integers, A and B, both of the same length n. You need to perform a series of operations to make sequence A identical to sequence B. In each operation, you can choose any element in A and increment or decrement it by 1. Your task is to determine the minimum number of operations required to transform sequence A into sequence B. **Input:** - The first line of input contains an integer t (1 ≤ t ≤ 100), the number of test cases. - Each test case consists of: - A single integer n (1 ≤ n ≤ 1000), the length of the sequences. - Two lines, each containing n integers, the sequences A and B respectively. The sum of the lengths of the sequences over all test cases will not exceed 10^5. **Output:** - For each test case, output a single integer, the minimum number of operations required to make sequence A identical to sequence B. **Example:** Input: ``` 2 3 1 2 3 4 5 6 4 1 2 3 4 4 3 2 1 ``` Output: ``` 9 8 ``` **Explanation:** - In the first test case, we need to increase each element of A by 3, so the total number of operations is 3 + 3 + 3 = 9. - In the second test case, we need to increase the 1st element by 3, leave the 2nd element, decrease the 3rd element by 1, and decrease the 4th element by 3, so the total number of operations is 3 + 0 + 1 + 3 = 7.","solution":"def min_operations(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] A = test_cases[i][1] B = test_cases[i][2] operations = sum(abs(a - b) for a, b in zip(A, B)) results.append(operations) return results"},{"question":"You are given a list of integers that represent the positions of soldiers standing in a single row. Each soldier has a unique position represented by a positive integer. You are also given a list of commands that specify positions of soldiers that should either move forward by one position, backward by one position, or leave their position entirely. Your task is to determine the final positions of all the soldiers after executing all the commands in the given order. If a command causes two soldiers to occupy the same position, they should both remain in their original positions for that command. # Input: - The first line contains an integer `n` (1 ≤ n ≤ 100000) — the number of soldiers. - The second line contains `n` integers `p1, p2, ... , pn` (1 ≤ pi ≤ 100000) — the initial positions of the soldiers. - The third line contains an integer `m` (1 ≤ m ≤ 100000) — the number of commands. - The `m` following lines each contain a command in one of the following formats: - `F x` (1 ≤ x ≤ 100000) — the soldier at position `x` moves forward by one position. - `B x` (1 ≤ x ≤ 100000) — the soldier at position `x` moves backward by one position. - `L x` (1 ≤ x ≤ 100000) — the soldier at position `x` leaves their position. # Output: - Output the final positions of all remaining soldiers in increasing order. Each position should be printed on a new line. # Example: Input: ``` 5 2 4 6 8 10 4 F 4 B 6 L 8 F 2 ``` Output: ``` 1 3 7 10 ``` # Explanation: - Initially, soldiers are at positions `2, 4, 6, 8, 10`. - After `F 4` command, the soldier at position `4` moves to position `5` -> positions are `2, 5, 6, 8, 10`. - After `B 6` command, the soldier at position `6` moves to position `5` but since it\'s already occupied by another soldier, both stay in the same position -> positions are `2, 5, 6, 8, 10`. - After `L 8` command, the soldier at position `8` leaves -> positions are `2, 5, 6, 10`. - After `F 2` command, the soldier at position `2` moves to position `3` -> final positions are `3, 5, 6, 10`.","solution":"def final_positions(n, positions, m, commands): current_positions = set(positions) leaving_positions = set() for command in commands: cmd, x = command[0], int(command[1:]) if cmd == \\"F\\": if (x in current_positions) and ((x + 1) not in current_positions): current_positions.remove(x) current_positions.add(x + 1) elif cmd == \\"B\\": if (x in current_positions) and ((x - 1) > 0) and ((x - 1) not in current_positions): current_positions.remove(x) current_positions.add(x - 1) elif cmd == \\"L\\": if x in current_positions: current_positions.remove(x) return sorted(current_positions)"},{"question":"You are given a list of integers, representing the weights of various items. Your goal is to pack these items into the minimum number of boxes such that the weight of each box does not exceed a given limit. Each box can contain one or more items, and you cannot split an item between different boxes. Determine the minimum number of boxes required and provide an example packing configuration that achieves this. **Input** - The first line contains two integers n and W (1 ≤ n ≤ 10^3, 1 ≤ W ≤ 10^4), where n is the number of items and W is the maximum weight a box can hold. - The second line contains n integers w_1, w_2, ..., w_n (1 ≤ w_i ≤ W), denoting the weight of each item. **Output** - The first line must contain a single integer, the minimum number of boxes required. - The second line must contain the packing configuration, where each box is represented by a list of item weights it contains. **Example** ``` Input: 5 10 2 3 5 7 1 Output: 2 [2, 5, 3] [7, 1] ``` **Explanation** In the example provided, two boxes are used. The first box contains items with weights 2, 5, and 3, summing exactly to 10. The second box contains items with weights 7 and 1, summing to 8. This configuration satisfies the condition that the sum of the weights in each box does not exceed 10, and uses the minimum number of boxes.","solution":"from itertools import combinations def pack_items(n, W, weights): Returns the minimum number of boxes required and the packing configuration. weights.sort(reverse=True) # Sort weights in descending order boxes = [] while weights: current_box = [] current_weight = 0 used_indexes = [] for i, weight in enumerate(weights): if current_weight + weight <= W: current_box.append(weight) current_weight += weight used_indexes.append(i) # Remove used items from the list for i in sorted(used_indexes, reverse=True): weights.pop(i) boxes.append(current_box) return len(boxes), boxes"},{"question":"You are working on a project that involves a mapping application. As part of the functionality, you need to calculate the shortest path between two nodes in a weighted graph where each node represents a location and the weights on the edges represent distances between these locations. Write a function `shortest_path(n, edges, start, end)` that takes the following parameters: - `n`: an integer representing the number of nodes in the graph (1 ≤ n ≤ 1000). - `edges`: a list of tuples (u, v, w) representing the edges of the graph where `u` and `v` are integers (node identifiers) and `w` is a positive integer representing the weight (distance) of the edge (1 ≤ w ≤ 10000). The graph may have parallel edges and self-loops. - `start`: an integer representing the starting node. - `end`: an integer representing the ending node. Your function should return an integer representing the shortest distance from the `start` node to the `end` node. If there is no path from `start` to `end`, return `-1`. # Example ```python n = 4 edges = [(1, 2, 1), (2, 3, 4), (3, 4, 4), (1, 3, 2)] start = 1 end = 4 print(shortest_path(n, edges, start, end)) # Output: 6 ``` # Note - In the given example, the shortest path from node 1 to node 4 is 1 -> 2 -> 3 -> 4 with a total distance of 1 + 4 + 4 = 9. - If there\'s another edge (1 -> 3) with a weight of 2, it won\'t be considered the shortest path because 2 + 4 = 6, which is less than 9. Hence, the output will be 6.","solution":"import heapq def shortest_path(n, edges, start, end): Calculates the shortest path between two nodes in a weighted graph. Parameters: n (int): Number of nodes in the graph. edges (list of tuples): List of edges where each edge is represented as (u, v, w). start (int): Starting node. end (int): Ending node. Returns: int: The shortest distance from start to end. Returns -1 if there is no path. # Create adjacency list for the graph graph = {i: [] for i in range(1, n+1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Distance dictionary to keep track of the shortest path to each node distances = {i: float(\'inf\') for i in range(1, n+1)} distances[start] = 0 # Priority queue to process nodes with the smallest distance first priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances[end] if distances[end] != float(\'inf\') else -1"},{"question":"A famous diorama artist is creating a miniature city landscape. His latest project involves designing a special grid of buildings and empty spaces in such a way that the tallest building in each row and in each column maximizes the overall scenic view of the city. The city grid can be represented as a matrix of integers where each cell either has a building (represented by a positive integer indicating the building\'s height) or is an empty space (represented by 0). The artist needs your help to accomplish the following: 1. Given the dimensions of the city grid, place buildings in such a way that the height of the tallest building in each row and each column is maximized, while the overall sum of all building heights in the grid is minimized. 2. Ensure that each row and each column contains at least one building. You need to write a program that accomplishes the task mentioned above. The program should take the following input: - An integer `n` (1 ≤ n ≤ 1000), representing the dimensions of the city grid (the grid is square, i.e., n x n). Output the city grid in matrix form where each row is printed on a new line. Example: Input: ``` 3 ``` Output: ``` 1 2 3 3 3 3 3 3 3 ``` Explanation: In this example, the matrix is a 3x3 grid. The row and column maximums are maximized while ensuring minimal building heights. The first row increases progressively while the subsequent rows ensure that the column heights are maximized with minimal values.","solution":"def create_city_grid(n): Create a city grid with dimensions n x n where the tallest building in each row and column maximizes the overall scenic view of the city with the overall sum of building heights minimized. :param n: Dimension of the city grid :type n: int :return: A 2D list representing the city grid :rtype: list[list[int]] grid = [[0] * n for _ in range(n)] # Fill the first row with incremental values starting from 1 to n for i in range(n): grid[0][i] = i + 1 # For next rows, ensure the max of columns is maintained with minimal values. for i in range(1, n): for j in range(n): grid[i][j] = n return grid # Example execution n = 3 result = create_city_grid(n) for row in result: print(\\" \\".join(map(str, row)))"},{"question":"In a distant future civilization, planetary logistics are handled by an automated fleet of supply drones operating from a circular base station located at the center of a large, unobstructed plain. The base station has a radius of R, and the drones can only operate outside this circle. The coordinates of the base station are (0, 0). The drones are able to freely move around the plain outside the base station but cannot enter the area within its radius due to restricted access protocols. Periodically, new delivery locations that need to be reached by the drones are added to the system, and old ones may be removed. For each new delivery location, you need to determine if it is reachable by any drone from any of the current delivery locations without entering the restricted zone, through straight-line paths only. Write a program to process the following queries: 1. Add a new delivery location (x, y) 2. Remove an existing delivery location (x, y) 3. Check if a valid straight-line path exists between two delivery locations (i, j) Input Format: - The first line contains integers R and M — the radius of the base station and the number of queries (1 ≤ R ≤ 109, 1 ≤ M ≤ 5·105). - Each of the following M lines describes a query in one of the following formats: - 1 x y — Add a delivery location at coordinates (x, y) outside the base station (x^2 + y^2 > R^2). - 2 x y — Remove a delivery location at coordinates (x, y). - 3 i j — Check if it\'s possible to draw a straight line from delivery location i to delivery location j without intersecting the base station. Output Format: - For each query of type 3, print \\"YES\\" if it’s possible to draw a straight line path from location i to location j avoiding the restricted zone, or \\"NO\\" otherwise. Example Input: ``` 5 5 1 10 10 1 -12 9 1 15 -15 3 1 2 3 2 3 ``` Example Output: ``` YES YES ``` Note: - Assume that delivery locations are one-indexed, i.e., the first added delivery location is referred to as location 1, the second as location 2, and so on. - All coordinates and distances will be within valid ranges such that any straight-line path not intersecting the base station will be valid.","solution":"class DeliverySystem: def __init__(self, radius): self.radius = radius self.locations = [] def add_location(self, x, y): if x**2 + y**2 > self.radius**2: self.locations.append((x, y)) def remove_location(self, x, y): try: self.locations.remove((x, y)) except ValueError: pass def check_path(self, i, j): if (i <= 0 or i > len(self.locations) or j <= 0 or j > len(self.locations)): return \\"NO\\" x1, y1 = self.locations[i - 1] x2, y2 = self.locations[j - 1] if (x2 - x1)**2 + (y2 - y1)**2 > self.radius**2: return \\"YES\\" return \\"NO\\""},{"question":"**Problem Statement:** # Domino Sequence A domino is a rectangular tile divided into two squares, each with a number (pip) between 0 and 6 (inclusive). A sequence of dominoes can be created by chaining them together, end to end, as long as adjacent squares have the same pip number. Given a sequence of dominoes, Mateusz wants to check if the sequence is valid. A valid sequence means that it starts and ends with the same pip number and all adjacent dominoes can be connected according to the rules mentioned. The dominoes are described by an array of tuples, where each tuple represents a domino\'s two pips. For example, `(2, 5)` represents a domino with one square having 2 pips and the other square having 5 pips. Write a function `isValidDominoSequence(dominoes)` that takes in a list of tuples representing dominoes and returns `True` if the sequence is valid, or `False` if it is not. **Input:** - An array of tuples `dominoes` of length `n` (1 ≤ n ≤ 10^5) where each tuple consists of two integers between 0 and 6 (inclusive). **Output:** - A boolean value `True` or `False`. **Examples:** 1. Input: `[(2, 5), (5, 2), (2, 1), (1, 3), (3, 2)]` - Output: `True` - Explanation: The sequence starts with 2 and ends with 2, and each adjacent pair can be connected. 2. Input: `[(1, 3), (3, 4), (4, 6)]` - Output: `False` - Explanation: The sequence starts with 1 and ends with 6, violating the rule that it must start and end with the same pip number. 3. Input: `[(4, 4), (4, 4), (4, 4)]` - Output: `True` - Explanation: All dominos can connect and start and end with the same number. **Constraints:** - Consider edge cases such as a single domino (which is always valid). - Each pair of adjacent dominoes must connect properly. You may assume that the sequence contains only valid dominoes (i.e., each domino contains exactly two numbers and all numbers are between 0 and 6). --- **Function Signature:** ```python def isValidDominoSequence(dominoes: List[Tuple[int, int]]) -> bool: pass ``` Write your function to solve the problem considering the constraints and examples provided.","solution":"from typing import List, Tuple def isValidDominoSequence(dominoes: List[Tuple[int, int]]) -> bool: Check if the given sequence of dominoes is valid. A valid sequence means it starts and ends with the same pip number and each adjacent pair can connect properly. if not dominoes: return False # If only one domino, it\'s always valid if len(dominoes) == 1: return dominoes[0][0] == dominoes[0][1] # First and last pip should be the same if dominoes[0][0] != dominoes[-1][1]: return False # Check the connectivity of adjacent dominoes for i in range(len(dominoes) - 1): first_domino = dominoes[i] second_domino = dominoes[i + 1] if first_domino[1] != second_domino[0]: return False return True"},{"question":"Alice and Bob love playing games. They came up with a new game involving integer sequences. The rules are simple but the game requires some strategy. The game is played as follows: 1. Alice and Bob take turns, with Alice starting first. 2. In each turn, the current player must select a strictly increasing subsequence of length at least 2 from the given sequence of integers. 3. The player then removes this selected subsequence from the sequence, and the game continues with the remaining numbers. 4. The game ends when no valid subsequence can be formed. The player who cannot make a move loses the game. Given the initial sequence of integers, you need to determine the winner of the game assuming both players play optimally. Input: - The first line contains an integer `n` (1 ≤ n ≤ 1000), denoting the number of elements in the sequence. - The second line contains `n` integers `a_1, a_2, ..., a_n` (1 ≤ a_i ≤ 10000), representing the sequence. Output: - Print \\"Alice\\" if Alice wins the game, or \\"Bob\\" if Bob wins the game, assuming both players play optimally. Example: - Input 1: ``` 5 3 1 2 5 4 ``` Output 1: ``` Alice ``` - Input 2: ``` 6 10 1 2 3 5 4 ``` Output 2: ``` Bob ``` Explanation: - In the first example, Alice can pick the subsequence `[1, 2, 5]` leaving sequence `[3, 4]` and win the game by preventing Bob from making a valid move. - In the second example, Bob can always respond to Alice\'s move in a way that leaves her with no valid subsequence to pick, thus ensuring Bob\'s win.","solution":"def determine_winner(n, sequence): Determines the winner of the game given the length of the sequence and the sequence itself. :param n: int - The number of elements in the sequence. :param sequence: list of int - The sequence of integers. :return: str - \\"Alice\\" if Alice wins, \\"Bob\\" if Bob wins. if n % 2 == 1: return \\"Alice\\" else: return \\"Bob\\""},{"question":"You are given a series of projects in a company. Each project has a fixed start time and end time, and can only be worked on by one employee at a time. Your task is to determine the maximum number of non-overlapping projects that can be scheduled within a given day. A project is represented by its start and end times, inclusively. The working hours for any project are between 0 and 24 (i.e., a full day). # Constraints: - The number of projects, `p`, varies per test case, and it holds that `1 ≤ p ≤ 10^5`. - The start time `s_i` and end time `e_i` of each project are integers where `0 ≤ s_i < e_i ≤ 24`. - You will have multiple test cases, up to a maximum of `t = 100`. # Input: - The first line contains a single integer `t`, denoting the number of test cases. - For each test case: - The first line contains a single integer `p`, denoting the number of projects. - Each of the next `p` lines contains two integers `s_i` and `e_i` separated by a space, which represent the start and end times of the ith project. # Output: - For each test case, output a single integer denoting the maximum number of non-overlapping projects that can be scheduled for the given test case. # Example: Input: ``` 2 3 1 5 6 10 11 15 4 3 8 2 4 6 7 5 9 ``` Output: ``` 3 2 ``` Explanation: In the first test case, all projects can be scheduled as they do not overlap. In the second test case, you can schedule projects (2,4) and (6,7) without overlapping, resulting in a maximum of 2 projects. Your task is to implement an efficient algorithm to determine the maximum number of non-overlapping projects for each test case, considering the given constraints.","solution":"def max_non_overlapping_projects(test_cases): results = [] for projects in test_cases: # Sort projects based on end times projects.sort(key=lambda x: x[1]) max_projects = 0 last_end_time = -1 for start, end in projects: if start > last_end_time: max_projects += 1 last_end_time = end results.append(max_projects) return results def parse_input(input_string): input_lines = input_string.strip().split(\'n\') t = int(input_lines[0]) test_cases = [] i = 1 for _ in range(t): p = int(input_lines[i]) i += 1 projects = [] for _ in range(p): s, e = map(int, input_lines[i].split()) projects.append((s, e)) i += 1 test_cases.append(projects) return test_cases def process_input(input_string): test_cases = parse_input(input_string) results = max_non_overlapping_projects(test_cases) return \\"n\\".join(map(str, results))"},{"question":"Alice works as a warehouse manager and needs to optimize the storage of boxes. She has a row of shelves, each with a maximum height capacity. Each box also has a height. Alice wants to place all the boxes on the shelves such that the height of the boxes on each shelf does not exceed the shelf\'s capacity. Each shelf can only hold boxes placed directly on it in a sequence from left to right, and each box can only be placed without any rotations. Given an array h of length n representing the height capacity of each shelf and another array b of length m representing the height of each box, determine if it is possible to place all the boxes on the shelves, utilizing the least number of shelves and following the given order of the shelves and boxes. Print \\"YES\\" if it is possible to place all the boxes in the given sequence on the shelves according to the capacity restrictions, otherwise print \\"NO\\". The first line contains two integers n and m (1 le n, m le 100,000). The second line contains n integers h_1, h_2, dots, h_n (1 le h_i le 10^9) — the height capacity of each shelf. The third line contains m integers b_1, b_2, dots, b_m (1 le b_i le 10^9) — the height of each box. **Example:** Input: ``` 4 5 3 8 5 7 2 5 3 4 6 ``` Output: ``` YES ``` Input: ``` 3 6 5 4 6 7 3 2 4 1 5 ``` Output: ``` NO ```","solution":"def can_place_boxes_on_shelves(shelf_heights, box_heights): Determines if it is possible to place all boxes on the shelves given their capacities. :param shelf_heights: List[int] - List of shelf height capacities :param box_heights: List[int] - List of box heights :return: str - \\"YES\\" if possible, otherwise \\"NO\\" current_shelf_index = 0 current_shelf_capacity = shelf_heights[current_shelf_index] for box_height in box_heights: while box_height > current_shelf_capacity: current_shelf_index += 1 if current_shelf_index >= len(shelf_heights): return \\"NO\\" current_shelf_capacity = shelf_heights[current_shelf_index] current_shelf_capacity -= box_height return \\"YES\\""},{"question":"You are tasked with developing a small utility that extracts specific details from an email address. An email address is of the form `<local-part>@<domain>`. Write a function called `parse_email` that takes a single string argument, the email address, and returns a tuple of two elements: 1. The local-part of the email address. 2. The domain of the email address. For example, given the email address \\"john.doe@example.com\\", your function should return (`\\"john.doe\\"`, `\\"example.com\\"`). You can assume that the input will always be a valid email address with exactly one \\"@\\" character.","solution":"def parse_email(email): Parses the email address into its local-part and domain. Args: email (str): The email address to parse. Returns: tuple: A tuple containing the local-part and domain of the email address. local_part, domain = email.split(\'@\') return local_part, domain"},{"question":"Alice is organizing a cooking competition and wants to ensure each participant prepares food strictly from unique categories. Each participant must submit a dish from one of the k predefined categories. Given the number of dishes available in each category, compute the number of ways Alice can select dishes for two participants such that each participant gets a dish from a different category. The categories are numbered from 1 to k. The first line contains a single integer k (2 ≤ k ≤ 10) — the number of categories. The second line contains k positive integers d1, d2, ..., dk (1 ≤ di ≤ 100), where di indicates the number of dishes available in the i-th category. Print a single integer — the number of ways Alice can select two dishes from different categories for the participants. For example, if there are 3 categories with the number of dishes as follows: 4 2 3 The output should be: 26 Because Alice can select one dish from category 1 and one from category 2 in 4 * 2 = 8 ways, one dish from category 1 and one from category 3 in 4 * 3 = 12 ways, and one dish from category 2 and one from category 3 in 2 * 3 = 6 ways. Summing these, we get 8 + 12 + 6 = 26.","solution":"def count_ways(k, dishes): Returns the number of ways two participants can receive dishes from different categories. Parameters: k (int): Number of categories. dishes (list of int): List of the number of dishes in each category. Returns: int: Number of ways to select two dishes from different categories. total_ways = 0 for i in range(k): for j in range(i + 1, k): total_ways += dishes[i] * dishes[j] return total_ways"},{"question":"You are given a list of strings and a string pattern. Your task is to find all strings in the list that contain all characters of the pattern in any order. For instance, the string \\"abc\\" contains the characters \'a\', \'b\', and \'c\', so a string \\"cbade\\" would be a valid match, while \\"bcdc\\" would not since it is missing the character \'a\'. The first line of input contains an integer N (1 ≤ N ≤ 100) — the number of strings in the list. The following N lines each contain one string from the list. The final line contains the string pattern whose characters need to be matched. Strings are composed of lowercase English letters only, and the length of each string and the pattern is between 1 and 100. Output all matching strings in the order they appeared in the input list, one per line. Example: Input: 4 abcdef bcda catd bat abc Output: abcdef bcda","solution":"def find_matching_strings(strings, pattern): from collections import Counter pattern_counter = Counter(pattern) def contains_all_pattern_chars(s): s_counter = Counter(s) for char, count in pattern_counter.items(): if s_counter[char] < count: return False return True return [s for s in strings if contains_all_pattern_chars(s)]"},{"question":"You are given an array of integers and a series of operations to apply to elements of the array. Your task is to determine the resulting array after applying the operations. An operation is described by two integers (i, x) where i represents the position (0-indexed) of the element in the array, and x represents the value to be added to the element at position i. If multiple operations affect the same position, they should be applied in the order they are given. # Input - The first line contains two integers n and m (1 leq n leq 10^5, 1 leq m leq 10^5) — the number of elements in the array and the number of operations, respectively. - The second line contains n space-separated integers a_1, a_2, ..., a_n (1 leq a_i leq 10^9) — the elements of the array. - The following m lines each contain two integers i and x (0 leq i < n, -10^9 leq x leq 10^9) — the operations to be applied. # Output - Output the resulting array after applying all the operations. # Example Input: ``` 5 3 1 2 3 4 5 1 10 3 -2 0 5 ``` Output: ``` 6 12 3 2 5 ``` # Explanation - Initially, the array is `[1, 2, 3, 4, 5]`. - After the first operation `(1, 10)`, the array becomes `[1, 12, 3, 4, 5]`. - After the second operation `(3, -2)`, the array becomes `[1, 12, 3, 2, 5]`. - After the third operation `(0, 5)`, the array becomes `[6, 12, 3, 2, 5]`.","solution":"def apply_operations(n, m, array, operations): Applies a series of operations to an array. Parameters: n (int): Number of elements in the array. m (int): Number of operations. array (list): Initial array of integers. operations (list): List of tuples (i, x) where i is the index and x is the value to be added. Returns: list: The resulting array after applying all the operations. for i, x in operations: array[i] += x return array"},{"question":"You are given a sequence of integers. You need to determine the length of the longest contiguous subarray that consists of unique elements, i.e., no element is repeated within the subarray. The input consists of two lines. The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the sequence. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 10^9), the elements of the sequence. Output a single integer, the length of the longest contiguous subarray with all unique elements.","solution":"def length_of_longest_unique_subarray(n, arr): Returns the length of the longest contiguous subarray with all unique elements. Parameters: n (int): Length of the array arr (List[int]): List of integers Returns: int: Length of the longest contiguous subarray with unique elements if not arr: return 0 max_length = 0 start = 0 seen = {} for end in range(n): if arr[end] in seen: start = max(start, seen[arr[end]] + 1) seen[arr[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Alice likes to decorate her house with flowers. She wants to arrange the flowers in a single row but keep the unique character of each flower type intact. She knows that each type of flower appears exactly once. Given a string `s` of lowercase letters where each letter represents a type of flower, you need to determine if the string can be rearranged in such a way that no two adjacent flowers have the same type. If it is possible to do so, return any possible rearrangement. Otherwise, return \\"NOT POSSIBLE\\". # Input - A single string `s` where 1 <= |s| <= 10^5. # Output - A rearranged string where no two adjacent characters are the same, or \\"NOT POSSIBLE\\" if such an arrangement cannot be achieved. # Example ``` Input: \\"aabb\\" Output: \\"abab\\" Input: \\"aaab\\" Output: \\"NOT POSSIBLE\\" ```","solution":"from collections import Counter import heapq def rearrange_flowers(s): Rearrange the string `s` so that no two adjacent characters are the same, if possible. Returns a rearranged string or \\"NOT POSSIBLE\\" if it cannot be done. # Counter for the frequency of each character char_count = Counter(s) # Max-heap of (-count, char) max_heap = [(-count, char) for char, count in char_count.items()] heapq.heapify(max_heap) prev_count, prev_char = 0, \'\' result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) prev_count, prev_char = count + 1, char # we used one character, so increment the count back towards 0 result_string = \\"\\".join(result) if len(result_string) != len(s): return \\"NOT POSSIBLE\\" return result_string"},{"question":"You are given an array of n integers. Perform at most one operation such that the array becomes sorted in non-decreasing order. The operation consists of selecting two adjacent elements and swapping them. The first line contains an integer n (2 le n le 2 cdot 10^5) — the size of the array. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the elements of the array. Output \\"YES\\" if the array can be sorted in non-decreasing order with at most one adjacent swap. Otherwise, output \\"NO\\". In the first test case, the array is already sorted in non-decreasing order. In the second test case, we can swap 5 and 3 to make the array sorted. In the third test case, no single adjacent swap can sort the array.","solution":"def can_be_sorted_with_one_swap(n, arr): Returns \\"YES\\" if the array can be sorted in non-decreasing order with at most one adjacent swap, otherwise \\"NO\\". sorted_arr = sorted(arr) diff_count = 0 for i in range(n): if arr[i] != sorted_arr[i]: diff_count += 1 return \\"YES\\" if diff_count <= 2 else \\"NO\\""},{"question":"Berland\'s government is back with another challenge. This time they need your help with an irrigation system for their cities. Berland has `n` cities and there are `n-1` bidirectional roads connecting them such that there is a unique simple path between any two cities. Some cities have fountains that provide water. Water from a city\'s fountain can reach any other city as long as there\'s a path of connected roads. The government wants to ensure that no city is too far from a fountain. A city\'s distance from a fountain is defined as the length of the shortest path (in terms of number of roads) to any city with a fountain. Your task is to determine the distance of each city from the nearest fountain. The input is formatted as follows: - The first line contains an integer, `n` (2 ≤ n ≤ 105), the number of cities. - Each of the next `n-1` lines contains two space-separated integers, `ui` and `vi` (1 ≤ ui, vi ≤ n, ui ≠ vi), describing a road between cities `ui` and `vi`. - The next line contains an integer `m` (1 ≤ m ≤ n), the number of cities with a fountain. - The next line contains `m` space-separated integers, representing the indices of the cities that have fountains. Output `n` space-separated integers. The `i-th` integer should represent the distance of the `i-th` city from the nearest fountain. **Example** Input: ``` 5 1 2 1 3 2 4 2 5 2 2 3 ``` Output: ``` 1 0 0 1 1 ``` Explanation: - City 1 is connected to city 2 (which has a fountain) and city 3 (which has a fountain), so its distance to the nearest fountain is 1. - City 2 has a fountain, so its distance is 0. - City 3 has a fountain, so its distance is 0. - City 4 is connected to city 2 (which has a fountain), so its distance is 1. - City 5 is connected to city 2 (which has a fountain), so its distance is 1.","solution":"from collections import deque, defaultdict def distance_from_fountain(n, roads, m, fountains): # Create adjacency list for the graph graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) # Initiate distances with -1 (unvisited) distances = [-1] * n queue = deque() # Start BFS from all fountains for fountain in fountains: queue.append(fountain) distances[fountain - 1] = 0 while queue: city = queue.popleft() current_distance = distances[city - 1] for neighbor in graph[city]: if distances[neighbor - 1] == -1: # If not visited yet distances[neighbor - 1] = current_distance + 1 queue.append(neighbor) return distances"},{"question":"Given an array of integers, perform cyclic right rotation on the array `k` times. The right rotation shifts each element of the array to its immediate right. If it is the last element, it moves to the front of the array. The first line of input contains two integers `n` and `k` where `n` is the number of elements in the array (1 ≤ n ≤ 10^5) and `k` is the number of times the array should be rotated (0 ≤ k ≤ 10^5). The second line contains `n` space-separated integers which represent the elements of the array. Print the resulting array after `k` right rotations. Example: Input: 5 2 1 2 3 4 5 Output: 4 5 1 2 3 In this example, the array [1, 2, 3, 4, 5] is rotated right two times. The resulting array is [4, 5, 1, 2, 3].","solution":"def cyclic_right_rotation(n, k, arr): Returns the array after performing k cyclic right rotations. Parameters: n (int): Number of elements in array k (int): Number of rotations arr (list of ints): The array of integers Returns: list of ints: The array after k right rotations k = k % n # To handle cases where k >= n return arr[-k:] + arr[:-k]"},{"question":"Write a function that processes a log of transactions to find the item with the highest sale value for each day. You are given a list of transactions, where each transaction is represented by a tuple containing the datetime of the transaction, the name of the item, and the sale value of the item. The datetime is in the format \\"YYYY-MM-DD HH:MM:SS\\". Your task is to parse this list and determine the item with the highest sale value for each day. Write a function `highest_sale_per_day(transactions)` that takes a list of such transactions and returns a dictionary where keys are dates in \\"YYYY-MM-DD\\" format and values are tuples containing the item name and its sale value. **Input:** - A list of tuples, each containing: - datetime string in the format \\"YYYY-MM-DD HH:MM:SS\\" - item name (string) - sale value (float, can be positive or negative) **Output:** - A dictionary where each key is a date (string in format \\"YYYY-MM-DD\\") and the value is a tuple (item name, sale value) representing the item with the highest sale value for that day. **Example:** ```python transactions = [ (\\"2023-01-01 14:23:45\\", \\"ItemA\\", 100.5), (\\"2023-01-01 05:12:20\\", \\"ItemB\\", 150.75), (\\"2023-01-02 09:15:00\\", \\"ItemA\\", 200.0), (\\"2023-01-02 10:45:35\\", \\"ItemC\\", 199.99), ] print(highest_sale_per_day(transactions)) # Output: { # \\"2023-01-01\\": (\\"ItemB\\", 150.75), # \\"2023-01-02\\": (\\"ItemA\\", 200.0) # } ``` Note: - If there are multiple transactions with the same highest sale value on the same day, any one of them can be returned. - The input list will have at least one transaction.","solution":"def highest_sale_per_day(transactions): Returns a dictionary where each key is a date and the value is a tuple containing the item with the highest sale value for that day. from collections import defaultdict daily_sales = defaultdict(lambda: (None, float(\'-inf\'))) for datetime_str, item, sale_value in transactions: date = datetime_str.split()[0] if sale_value > daily_sales[date][1]: daily_sales[date] = (item, sale_value) return dict(daily_sales)"},{"question":"Write a function that finds the shortest path in an unweighted grid maze. The maze is represented by a 2D array of 1s and 0s, where 0 represents a free path and 1 represents a wall. The function should return the number of steps in the shortest path from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1) of the grid. If no path exists, the function should return -1. The input consists of an integer n (1 ≤ n ≤ 100) and an integer m (1 ≤ m ≤ 100) representing the number of rows and columns in the grid, respectively, followed by n lines each containing m integers (either 0 or 1), representing the grid itself. You may move either up, down, left, or right at each step. # Input: - An integer n, an integer m — dimensions of the grid. - An n by m grid with values either 0 (free path) or 1 (wall). # Output: - The minimum number of steps in the shortest path from the top-left corner to the bottom-right corner of the grid, or -1 if no path exists. # Examples: Example 1: Input: ``` 3 3 0 1 0 0 0 0 0 0 0 ``` Output: ``` 4 ``` Explanation: The shortest path is right -> down -> down -> right. Example 2: Input: ``` 2 2 0 1 1 0 ``` Output: ``` -1 ``` Explanation: There is no path from the top-left to the bottom-right of the grid. # Note: The function should be implemented using Breadth-First Search (BFS) to ensure that the shortest path is found.","solution":"from collections import deque def shortest_path_maze(n, m, grid): Finds the shortest path in an unweighted grid maze from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1). Returns -1 if no path exists. # Directions for moving: right, down, left, up directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Check for edge cases if not grid or grid[0][0] == 1 or grid[n-1][m-1] == 1: return -1 # BFS setup queue = deque([(0, 0, 0)]) # (row, col, steps) visited = set((0, 0)) while queue: row, col, steps = queue.popleft() # Return the number of steps if the bottom-right corner is reached if row == n - 1 and col == m - 1: return steps # Explore the neighbors for dx, dy in directions: new_row, new_col = row + dx, col + dy if 0 <= new_row < n and 0 <= new_col < m and grid[new_row][new_col] == 0 and (new_row, new_col) not in visited: visited.add((new_row, new_col)) queue.append((new_row, new_col, steps + 1)) # Return -1 if no path exists return -1"},{"question":"Alexis is working on a project to optimize warehouse storage. The warehouse is organized in a rectangular grid with n rows and m columns where each cell can either be empty or occupied by a box. Alexis wants to maximize the number of boxes in the warehouse while ensuring there are never two adjacent cells (sharing a side) that both contain boxes. Given the number of rows n and columns m, help Alexis determine the maximum number of boxes that can be placed in the warehouse under the given constraints. The first line of the input contains two integers n (1 ≤ n ≤ 109) and m (1 ≤ m ≤ 109) which represent the dimensions of the warehouse grid. Output the maximum number of boxes that can be placed in the grid without any two boxes being in adjacent cells. For example: Input 2 3 Output 3 In the input example (2 rows and 3 columns), one of the possible valid configurations is: B . B . B . Here, \'B\' represents a box and \'.\' represents an empty cell. The maximum number of boxes that can be placed without having any two boxes in adjacent cells is 3. Note that the placement of boxes might not be unique.","solution":"def max_boxes(n, m): Calculate the maximum number of boxes that can be placed in a warehouse grid of dimensions n x m without having any two boxes in adjacent cells. Args: n (int): Number of rows in the grid. m (int): Number of columns in the grid. Returns: int: Maximum number of boxes. # Each second cell in a checkerboard pattern can contain a box return (n * m + 1) // 2"},{"question":"Given a sequence of integers, you need to find the length of the longest subsequence where the difference between consecutive elements is constant. This subsequence does not have to be contiguous. You are provided with an array of integers `arr` of size `n`. Your task is to write a function `longestArithmeticSubsequence(arr)` that returns the length of the longest arithmetic subsequence in the array. **Example:** **Input:** ``` n = 6 arr = [3, 6, 9, 12, 15, 18] ``` **Output:** ``` 6 ``` **Explanation:** The entire array is an arithmetic sequence with a difference of `3`. **Example:** **Input:** ``` n = 5 arr = [9, 7, 5, 3, 2] ``` **Output:** ``` 4 ``` **Explanation:** One of the longest arithmetic subsequences is [9, 7, 5, 3], which has a common difference of `-2`. **Constraints:** - 1 ≤ n ≤ 10^5 - -10^9 ≤ arr[i] ≤ 10^9 Your function should efficiently handle large arrays and should follow the optimal time complexity close to O(n log n) if possible.","solution":"def longestArithmeticSubsequence(arr): Returns the length of the longest arithmetic subsequence in the array. from collections import defaultdict n = len(arr) if n <= 1: return n # dp: list of dictionaries dp = [defaultdict(int) for _ in range(n)] longest_length = 1 for i in range(1, n): for j in range(i): diff = arr[i] - arr[j] dp[i][diff] = dp[j][diff] + 1 longest_length = max(longest_length, dp[i][diff]) return longest_length + 1"},{"question":"Amy is a software developer at a tech company. Her team is building a data processing system that processes data in batches. Each batch consists of a sequence of data packets. Each packet has a unique identifier and a timestamp when it was created. The packets in a batch are not necessarily sorted by their timestamps. Amy needs to implement a function that will sort each batch of data packets by their timestamps. After sorting, the function should return the sorted list of packet identifiers. The function should have the following signature: ```python def sort_packets(packets: List[Tuple[int, int]]) -> List[int]: ``` - `packets`: A list of tuples, where each tuple contains two elements: - An integer `id` representing the packet identifier. - An integer `timestamp` representing the creation timestamp of the packet. The function should return a list of integers representing the packet identifiers sorted in ascending order by their timestamps. If two packets have the same timestamp, the function should preserve their original order. # Example ```python packets = [(3, 1001), (2, 1000), (1, 1002)] print(sort_packets(packets)) ``` Output: ``` [2, 3, 1] ``` # Constraints - The length of the `packets` list will be between 1 and 10^5. - The packet identifiers and timestamps will be between 1 and 10^9. - The packet identifiers in a single batch are unique.","solution":"from typing import List, Tuple def sort_packets(packets: List[Tuple[int, int]]) -> List[int]: Sorts the packets by their timestamps and returns the list of packet identifiers. Parameters: packets (List[Tuple[int, int]]): A list of tuples, each containing an id and a timestamp. Returns: List[int]: A list of packet identifiers sorted by their timestamps. sorted_packets = sorted(packets, key=lambda packet: packet[1]) return [packet[0] for packet in sorted_packets]"},{"question":"Kuroni likes puzzles. He has a grid of size n times m with integers written in its cells. Kuroni considers a subgrid to be any grid (i_1, j_1, i_2, j_2) formed by selecting two rows (i_1, i_2) and two columns (j_1, j_2) such that its elements are (i_1 le i_2) and (j_1 le j_2). Kuroni wants to find a subgrid such that the sum of all integers in the subgrid is maximized. For example, consider a grid of 4 times 4 begin{matrix} 1 & 2 & 3 & 4 5 & 6 & 7 & 8 9 & 10 & 11 & 12 13 & 14 & 15 & 16 end{matrix} The subgrid (1,1,4,4) with elements: begin{matrix} 1 & 2 & 3 & 4 5 & 6 & 7 & 8 9 & 10 & 11 & 12 13 & 14 & 15 & 16 end{matrix} has the maximum possible sum of 136 which is the sum of all elements. The input consists of multiple test cases. The first line contains an integer t (1 le t le 100) — the number of test cases. The description of the test cases follows. Each test case starts with two integers n and m (1 le n, m le 100) — the dimensions of the grid. The next n lines contain m integers each, representing the elements of the grid. For each test case, print the maximum sum of any subgrid. # Example **Input:** ``` 2 4 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 3 3 -1 -2 -3 -4 -5 -6 -7 -8 -9 ``` **Output:** ``` 136 -1 ``` In the first test case, the sum of all elements is the maximum which is 136. In the second test case, selecting any single cell will give the highest value (-1).","solution":"def max_subgrid_sum(n, m, grid): Returns the maximum sum of any subgrid in the given n x m grid. max_sum = float(\'-inf\') # Calculate prefix sums prefix = [[0] * (m + 1) for _ in range(n + 1)] for i in range(n): for j in range(m): prefix[i + 1][j + 1] = grid[i][j] + prefix[i + 1][j] + prefix[i][j + 1] - prefix[i][j] # Find the maximum subgrid sum for i1 in range(1, n + 1): for j1 in range(1, m + 1): for i2 in range(i1, n + 1): for j2 in range(j1, m + 1): subgrid_sum = (prefix[i2][j2] - prefix[i1 - 1][j2] - prefix[i2][j1 - 1] + prefix[i1 - 1][j1 - 1]) max_sum = max(max_sum, subgrid_sum) return max_sum def solve(t, cases): results = [] for case in cases: n, m, grid = case results.append(max_subgrid_sum(n, m, grid)) return results"},{"question":"You are tasked with developing a software to manage a dynamic student records database for a university. The database stores information about students\' grades in courses they have taken. You need to implement two main features: 1. **Add/Update Student Grade**: - Input: Student ID, Course ID, Grade. - Action: If the student has already taken the course, update the grade. If not, add a new record. 2. **Calculate GPA**: - Input: Student ID. - Action: Calculate the GPA for the student based on their current grades. Assume the GPA is based on a 4.0 scale and each course has equal weight. Your task is to write functions to handle these operations. You will be given a number of operations to perform, and for each operation, you will either add/update a student\'s grade or calculate a student\'s GPA. # Input The first line contains an integer `q` (1 ≤ q ≤ 10^5) - the number of operations. Each of the next `q` lines is in one of the following formats: - `1 student_id course_id grade` - This operation adds or updates the grade of `student_id` in `course_id` to `grade` (0.0 <= grade <= 4.0). - `2 student_id` - This operation calculates and outputs the GPA of `student_id`. # Output For each `2 student_id` operation, output a single line with the GPA of the student rounded to two decimal places. If the student has not enrolled in any course yet, output \\"n/a\\". # Example Input ``` 6 1 1 CS101 3.5 1 1 MATH202 4.0 2 1 1 2 CS101 2.0 2 2 2 3 ``` Output ``` 3.75 2.00 n/a ``` Your implementation should be efficient in handling a large number of operations and students.","solution":"class StudentRecords: def __init__(self): self.records = {} def add_or_update_grade(self, student_id, course_id, grade): if student_id not in self.records: self.records[student_id] = {} self.records[student_id][course_id] = grade def calculate_gpa(self, student_id): if student_id not in self.records or not self.records[student_id]: return \\"n/a\\" grades = self.records[student_id].values() gpa = sum(grades) / len(grades) return f\\"{gpa:.2f}\\" # Function to process the operations def process_operations(operations): sr = StudentRecords() results = [] for operation in operations: parts = operation.split() op_type = int(parts[0]) if op_type == 1: student_id = int(parts[1]) course_id = parts[2] grade = float(parts[3]) sr.add_or_update_grade(student_id, course_id, grade) elif op_type == 2: student_id = int(parts[1]) result = sr.calculate_gpa(student_id) results.append(result) return results"},{"question":"# Inventory Management System A local hardware store is looking to manage its stock automatically using a new software system. The store\'s inventory consists of n different items, each with a specific initial stock count. The system needs to periodically check and update the stock of these items through incoming and outgoing transactions. Each transaction either increases or decreases the stock of a specific item. The system is given a sequence of these transactions and needs to determine the final stock count for each item. The transactions are provided in the form of a list of strings where each string specifies an item and the change in stock. For example, a transaction \\"item1 +3\\" indicates an addition of 3 units to the stock of \\"item1\\", and a transaction \\"item2 -2\\" indicates a reduction of 2 units from the stock of \\"item2\\". Write a function to compute the final stock count for each item after processing all the transactions. The function should return a dictionary where the keys are item names and the values are the final stock counts. Function Signature: ```python def update_inventory(n: int, initial_stock: List[Tuple[str, int]], transactions: List[str]) -> Dict[str, int]: ``` # Input - `n` (1 ≤ n ≤ 1000) – the number of different items in the inventory. - `initial_stock` – a list of tuples where each tuple contains an item name (a string of at most 50 characters) and an initial stock count (an integer between 0 and 10^6). - `transactions` – a list of up to 10000 strings, each representing a transaction in the format \\"item_name ±change\\", where `change` is an integer between -100 and 100. # Output - A dictionary where the keys are item names and the values are the final stock counts after processing all transactions. # Example Input: ```python n = 3 initial_stock = [(\\"item1\\", 50), (\\"item2\\", 20), (\\"item3\\", 0)] transactions = [\\"item1 +10\\", \\"item2 -5\\", \\"item3 +7\\", \\"item1 -20\\"] ``` Output: ```python { \\"item1\\": 40, \\"item2\\": 15, \\"item3\\": 7 } ``` In this example: - The initial stock of \\"item1\\" is 50. After the transactions, it becomes 50 + 10 - 20 = 40. - The initial stock of \\"item2\\" is 20. After the transaction, it becomes 20 - 5 = 15. - The initial stock of \\"item3\\" is 0. After the transaction, it becomes 0 + 7 = 7. Write the function `update_inventory` to solve the problem.","solution":"from typing import List, Tuple, Dict def update_inventory(n: int, initial_stock: List[Tuple[str, int]], transactions: List[str]) -> Dict[str, int]: # Initialize inventory with initial stock counts inventory = {item: stock for item, stock in initial_stock} # Process each transaction for transaction in transactions: item, change = transaction.split() change_value = int(change) if item in inventory: inventory[item] += change_value else: inventory[item] = change_value return inventory"},{"question":"You have been tasked with developing a new version control system to help manage files in large repositories. Your system needs to handle two primary operations: `update` and `commit`. - An `update` operation will update a file to a specific version. - A `commit` operation will record the current state of files in the repository as a new version. The operations will be structured as follows: 1. `C` version: A commit operation with a specified version number. This records the current state of all files as version `version`. 2. `U` file_name version: An update operation that updates a given `file_name` to a specified `version`. Each file can only have one state tied to a specific commit version. If a file is updated multiple times and committed at different versions, the latest state before the next commit operation is recorded as the final state for that version. You should process a number of operations to track the multiple updates and commits, and finally, the system should report the state of a file at requested versions. Input: - The first line contains two integers, `n` and `m`, the number of operations and the number of version state queries, respectively. - The next `n` lines describe the `n` operations. Each operation is either an update (`U`) or a commit (`C`). - The final `m` lines each contain a query, asking for the state of a specific file at a particular version. Output: - For each query, output the state of the specified file at the specified version. If the file was not updated before the commit of the queried version, output \\"Not Found\\". Example Input: ``` 7 3 U file1 1 U file2 2 C 1 U file1 3 C 2 U file2 4 C 3 file1 2 file2 1 file2 3 ``` Example Output: ``` file1: 3 file2: 2 file2: 4 ``` Create a data structure that efficiently handles the operations and queries as described.","solution":"def version_control_system(n, m, operations, queries): Simulates the version control system operations and queries. files = {} commits = {} current_version = 0 for operation in operations: parts = operation.split() if parts[0] == \'U\': _, file_name, version = parts files[file_name] = int(version) elif parts[0] == \'C\': _, version = parts current_version = int(version) for file_name, file_version in files.items(): if current_version not in commits: commits[current_version] = {} commits[current_version][file_name] = file_version result = [] for query in queries: file_name, version = query.split() version = int(version) found = False for v in range(version, 0, -1): if v in commits and file_name in commits[v]: result.append(f\\"{file_name}: {commits[v][file_name]}\\") found = True break if not found: result.append(f\\"{file_name}: Not Found\\") return result"},{"question":"You are given a binary tree where each node contains an integer value. Your task is to find the length of the longest path in the tree where all the nodes in the path have the same value. This path can be either from parent to child, or from child to child through any other nodes. A path is defined as a sequence of nodes where each consecutive pair of nodes in the sequence has an edge connecting them within the tree. Write a function that takes the root node of the binary tree as input and returns the length of the longest path of nodes with the same value. # Input - A single input tree node `root` of class `TreeNode` where: - `val` is an integer value. - `left` is a pointer to the left child TreeNode. - `right` is a pointer to the right child TreeNode. # Output - An integer representing the length of the longest path where all the nodes in the path have the same value. # Constraints - The number of nodes in the tree is in the range `[0, 10^4]`. - `-10^5 <= TreeNode.val <= 10^5` # Example ```python # Definition for a binary tree node. class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def longestUnivaluePath(root: Optional[TreeNode]) -> int: # Your code goes here # Example root = TreeNode(5) root.left = TreeNode(4) root.right = TreeNode(5) root.left.left = TreeNode(1) root.left.right = TreeNode(1) root.right.right = TreeNode(5) print(longestUnivaluePath(root)) # Output: 2 ``` In this example: - The longest path with the same value is \\"5 -> 5 -> 5\\". - Thus, the function should return 2, as there are 2 edges in this path. You may assume that the edge cases such as an empty tree or a tree with only one node are handled within the constraints.","solution":"# Definition for a binary tree node. class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def longestUnivaluePath(root: TreeNode) -> int: def helper(node): nonlocal max_length if not node: return 0 left_length = helper(node.left) right_length = helper(node.right) left_arrow = right_arrow = 0 if node.left and node.left.val == node.val: left_arrow = left_length + 1 if node.right and node.right.val == node.val: right_arrow = right_length + 1 max_length = max(max_length, left_arrow + right_arrow) return max(left_arrow, right_arrow) max_length = 0 helper(root) return max_length"},{"question":"In a kingdom far away, there are n cities connected by several bidirectional roads. The king has decided to celebrate the kingdom\'s prosperity by organizing a series of grand parades. Each city must host exactly one parade, and the parade must start in some city and travel through one or more cities before ending at the starting city, forming a closed loop. However, there are some rules for the parades: 1. The closed loop (parade path) must not have any city visited more than once, except for the starting city. 2. The path should contain at least two cities. Your task is to help the king find the number of unique parade paths that are possible. The first line of the input contains an integer n (2 ≤ n ≤ 500) — the number of cities. The second line contains an integer m (1 ≤ m ≤ 1000) — the number of roads connecting the cities. Then m lines follow, each containing two integers u and v (1 ≤ u, v ≤ n) — representing a bidirectional road between city u and city v. There will be no repeated roads. In the first line of output, print the number of unique parade paths. **Examples**: **Input:** ``` 4 5 1 2 2 3 3 4 4 1 1 3 ``` **Output:** ``` 3 ``` **Explanation:** The possible parade paths are: - 1 -> 2 -> 3 -> 1 - 2 -> 3 -> 4 -> 2 - 3 -> 4 -> 1 -> 3 A path like 1 -> 2 -> 3 -> 4 -> 1 would not be valid as it includes more than 2 cities and repeats cities in the loop, thus is considered a single unique parade path from [1 -> 2 -> 3 -> 1].","solution":"from collections import defaultdict # Function to find all cycles in an undirected graph def find_cycles(n, roads): adj_list = defaultdict(list) for u, v in roads: adj_list[u].append(v) adj_list[v].append(u) def dfs(v, parent, visited, path): nonlocal cycle_count visited[v] = True path.append(v) for neighbor in adj_list[v]: if not visited[neighbor]: dfs(neighbor, v, visited, path) elif neighbor != parent and neighbor in path: cycle_start_index = path.index(neighbor) cycle = path[cycle_start_index:] # Ensure we only count each cycle once by checking the starting point and sorting sorted_cycle = tuple(sorted(cycle)) if sorted_cycle not in unique_cycles: unique_cycles.add(sorted_cycle) cycle_count += 1 path.pop() visited[v] = False visited = [False] * (n + 1) unique_cycles = set() cycle_count = 0 for i in range(1, n+1): if not visited[i]: dfs(i, -1, visited, []) return cycle_count # Main function for the solution def count_unique_parade_paths(n, m, roads): return find_cycles(n, roads)"},{"question":"Given two arrays of integers representing the wait times for customers at two different customer service counters, you need to determine the maximum number of customers that can be served within a given time limit. You are given a time limit `T` and two arrays of wait times. The first array `A` represents the wait times at the first counter, and the second array `B` represents the wait times at the second counter. - You are allowed to choose customers from both counters such that their total wait time does not exceed `T`. - You can serve a customer from either counter, but once you start serving from a counter, you must serve all subsequent customers from the same counter. Determine the maximum number of customers that can be served without exceeding the given time limit `T`. # Input - The first line contains an integer `n` — the number of customers at the first counter (1 leq n leq 100,000). - The second line contains an integer `m` — the number of customers at the second counter (1 leq m leq 100,000). - The third line contains an integer `T` — the maximum allowed wait time (1 leq T leq 10^8). - The fourth line contains `n` integers representing the wait times at the first counter, separated by spaces. - The fifth line contains `m` integers representing the wait times at the second counter, separated by spaces. # Output Print a single integer — the maximum number of customers that can be served without exceeding the given time limit. # Example Input ``` 5 4 10 2 3 5 7 11 1 2 3 4 ``` Output ``` 4 ``` Explanation - The optimal way to serve the maximum number of customers is to serve from the second counter and the wait times of the first three customers are `1 + 2 + 3 = 6`, which is less than 10. If we try to add the fourth customer from the second counter it would exceed the limit `6 + 4 = 10`, so we consider all customers from the second counter making a total of `4` customers. - Another possible approach is to serve from the first counter whose cumulative wait times are: `2 + 3 + 5 = 10`, which also makes a count of `3` customers. - Thus, the optimal number of customers that can be served is `4`.","solution":"def max_customers_served(n, m, T, A, B): def cumulative_sum(arr): cum_sum = [0] for num in arr: cum_sum.append(cum_sum[-1] + num) return cum_sum A_cumsum = cumulative_sum(A) B_cumsum = cumulative_sum(B) # Max customers that can be served starting from only the first counter max_customers = 0 for i in range(n + 1): if A_cumsum[i] > T: break # binary search in B_cumsum for the largest index j so that A_cumsum[i] + B_cumsum[j] <= T remaining_time = T - A_cumsum[i] low, high = 0, m while low <= high: mid = (low + high) // 2 if B_cumsum[mid] <= remaining_time: low = mid + 1 else: high = mid - 1 max_customers = max(max_customers, i + high) for j in range(m + 1): if B_cumsum[j] > T: break # binary search in A_cumsum for the largest index i so that B_cumsum[j] + A_cumsum[i] <= T remaining_time = T - B_cumsum[j] low, high = 0, n while low <= high: mid = (low + high) // 2 if A_cumsum[mid] <= remaining_time: low = mid + 1 else: high = mid - 1 max_customers = max(max_customers, j + high) return max_customers"},{"question":"Achilles loves playing strategy games! In his favorite game, he commands a troop of soldiers and needs to arrange them for an expedition that spans k days. Achilles has n soldiers, each with a different level of stamina. To ensure victory, the sum of stamina levels of soldiers selected for each day must be at least m. Achilles is cautious and wants to minimize the number of soldiers used each day to maintain their availability for future battles. Help him determine the minimum number of soldiers required each day to achieve at least m stamina while preserving the most soldiers for the entire expedition. The first line of input contains three integers n, k, and m (1 ≤ n, k ≤ 100, 1 ≤ m ≤ 1000), the number of soldiers, the number of days, and the required stamina level per day. The second line of input contains n integers s1, s2, ..., sn (1 ≤ si ≤ 100), representing the stamina levels of the soldiers. Print k lines, each containing the minimum number of soldiers required to achieve at least m stamina for each day. In the first sample case: On the first day, an optimal selection might be soldiers with stamina levels 4 and 6, resulting in exactly 10 stamina. On the second day, an optimal selection might be the soldiers with stamina levels 7 and 3. In the second sample case: For each day, since all soldiers have exactly 10 stamina, and the required stamina is 10, only one soldier will be needed for each day. Example: Input: 5 2 10 8 4 3 5 6 Output: 2 2 Input: 4 3 10 10 10 10 10 Output: 1 1 1","solution":"def minimum_soldiers_each_day(n, k, m, stamina_levels): # Sort stamina levels in descending order to minimize the number of soldiers required stamina_levels.sort(reverse=True) result = [] # Iterate through each day to find the minimum number of soldiers required for day in range(k): current_stamina = 0 soldiers_count = 0 # Accumulate stamina until it meets or exceeds the required stamina for the day for stamina in stamina_levels: current_stamina += stamina soldiers_count += 1 if current_stamina >= m: result.append(soldiers_count) break return result"},{"question":"You are given an integer array arr consisting of n positive integers and a positive integer k. You are also provided with a function g that maps every integer from 1 to 10^6 to some (possibly the same) integer from 1 to 10^6. The function g is used to transform the elements of arr. Your task is to find the maximum possible sum of any subarray of length exactly k after transforming the elements of arr using the function g. The first line contains two integers n and k (1 le k le n le 2 cdot 10^5) — the length of the array and the length of the subarray. The second line contains n integers arr[1], arr[2], ldots, arr[n] (1 le arr[i] le 10^6). The third line contains 10^6 integers g(1), g(2), ldots, g(10^6) (1 le g(i) le 10^6). Print the maximum possible sum of any subarray of length exactly k after applying the function g on the elements of arr.","solution":"def max_sum_of_transformed_subarray(arr, g, k): Returns the maximum possible sum of any subarray of length exactly k after transforming the elements of arr using the function g. # Transform the array using function g transformed_arr = [g[val] for val in arr] # Find the maximum sum of any subarray of length k max_sum = current_sum = sum(transformed_arr[:k]) for i in range(k, len(transformed_arr)): current_sum += transformed_arr[i] - transformed_arr[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Nikolai and the Magic Hexagrid! Nikolai was recently introduced to a magical world of hexagonal grids. He learned that hexagonal grids can be interpreted in several coordinate systems, but the one he is interested in is the cube coordinate system due to its symmetry and simplicity for certain operations. A cube coordinate system on a hexagonal grid consists of three coordinates (x, y, z) such that the sum of x, y, and z is always zero: x + y + z = 0. Nikolai is given a hexagonal grid and needs to find the shortest path from a given start hexagon to a target hexagon. Help Nikolai find the shortest path between two hexagons on the hexagonal grid using cube coordinates. You should provide the length of the path and the list of coordinates that form the path. The first line contains two integers n, m (1 ≤ n, m ≤ 300), specifying the number of hexagons in the grid and the number of edges connecting the hexagons respectively. Each of the next m lines contains six integers x1, y1, z1, x2, y2, z2 (-150 ≤ x1, y1, z1, x2, y2, z2 ≤ 150) representing an edge between two hexagons. It is guaranteed that both the hexagons (x1, y1, z1) and (x2, y2, z2) exist in the grid, and the sum of their coordinates is zero. Finally, the last line contains three integers sx, sy, sz and three other integers tx, ty, tz (-150 ≤ sx, sy, sz, tx, ty, tz ≤ 150), specifying the starting hexagon and the target hexagon. In the first line print an integer l, the length of the shortest path from the starting hexagon to the target hexagon. In the next l lines, print three integers x, y, z each, representing the hexagons that form the shortest path from the start hexagon to the target hexagon inclusive. If there are multiple shortest paths, print any one of them. The hexagonal grid and edges may form complex shapes, but there is always at least one path from the start hexagon to the target hexagon.","solution":"from collections import deque, defaultdict def shortest_path_on_hexagrid(n, m, edges, start, target): # Build adjacency list graph = defaultdict(list) for x1, y1, z1, x2, y2, z2 in edges: graph[(x1, y1, z1)].append((x2, y2, z2)) graph[(x2, y2, z2)].append((x1, y1, z1)) # Perform BFS queue = deque([start]) came_from = {start: None} while queue: current = queue.popleft() if current == target: break for neighbor in graph[current]: if neighbor not in came_from: queue.append(neighbor) came_from[neighbor] = current # Reconstruct path path = [] at = target while at is not None: path.append(at) at = came_from[at] path.reverse() return len(path) - 1, path # Sample Input Reading Function (Additional Utility for Reading Inputs) def read_input(data): lines = data.strip().split(\'n\') n, m = map(int, lines[0].split()) edges = [tuple(map(int, line.split())) for line in lines[1:m+1]] start = tuple(map(int, lines[m+1].split()[:3])) target = tuple(map(int, lines[m+1].split()[3:])) return n, m, edges, start, target"},{"question":"You are given a string S of length n that contains only lowercase English letters and m queries. Each query is described by two integers, l and r. Let\'s define the function g(x, y) which counts the number of distinct characters in the substring starting at position x and ending at position y (both inclusive). For each query, print the value of the function g(l, r). The first line contains two integers n, m (1 ≤ n ≤ 5×10^4, 1 ≤ m ≤ 5×10^3) — the length of the string and the number of queries, respectively. The second line contains the string S. Each of the next m lines contains two integers l, r (1 ≤ l ≤ r ≤ n) – the parameters of the j-th query. For each query, print the value g(l, r) on a separate line — the number of distinct characters in the substring from l to r inclusive.","solution":"def count_distinct_chars(S, l, r): Returns the number of distinct characters in the substring S[l-1:r] substring = S[l-1:r] return len(set(substring)) def process_queries(S, queries): Processes a list of queries and returns the result for each using the count_distinct_chars function. Parameters: S (str): The input string. queries (list of tuples): A list of queries where each query is a tuple (l, r). Returns: list of int: A list of results, one for each query. results = [] for l, r in queries: results.append(count_distinct_chars(S, l, r)) return results"},{"question":"Given a grid of size `m x n`, write a function `uniquePaths(m: int, n: int) -> int` that returns the number of unique paths to travel from the top-left corner to the bottom-right corner of the grid. You can only move either down or right at any point in time. # Function Signature ```python def uniquePaths(m: int, n: int) -> int: ``` # Input - `m` (1 ≤ m ≤ 100): the number of rows in the grid. - `n` (1 ≤ n ≤ 100): the number of columns in the grid. # Output - Return the number of unique paths to travel from the top-left to the bottom-right corner of the grid. # Example ```python print(uniquePaths(3, 7)) # Output: 28 print(uniquePaths(3, 2)) # Output: 3 ``` # Explanation In the first example, there are 28 unique ways to move from the top-left to the bottom-right corner in a 3x7 grid. You can verify this using the formula for combinations or by dynamic programming. # Constraints - Assume the input will always be valid integers. - The function should have an efficient time complexity, ideally O(m * n).","solution":"def uniquePaths(m: int, n: int) -> int: Returns the number of unique paths to travel from the top-left corner to the bottom-right corner of a grid of size m x n. # Create a 2D array `dp` with dimensions (m x n) and initialize all elements to 1 dp = [[1] * n for _ in range(m)] # Iterate through each cell starting from (1, 1) for i in range(1, m): for j in range(1, n): # The number of ways to reach (i, j) is the sum of the number of ways to reach (i-1, j) # and the number of ways to reach (i, j-1) dp[i][j] = dp[i - 1][j] + dp[i][j - 1] # The bottom-right corner will have the number of unique paths return dp[m - 1][n - 1]"},{"question":"You are given a grid with RobotAdvisor operating on it. The grid is a rectangular matrix with m rows and n columns. Each cell in the grid represents a block in a city, and RobotAdvisor starts at the top-left corner of the grid (i.e., cell (1,1)). It aims to reach the bottom-right corner of the grid (i.e., cell (m,n)). RobotAdvisor can only move right or down at each step. Each cell in the grid contains a positive integer representing the cost of stepping onto that cell. Your task is to find the minimum cost to travel from the top-left corner to the bottom-right corner of the grid. The first line contains two integers m and n (1 leq m, n leq 1000) representing the number of rows and columns of the grid. Each of the next m lines contains n integers c_{ij} (1 leq c_{ij} leq 100), representing the cost of each cell. Determine the minimum cost to travel from the top-left corner to the bottom-right corner of the grid. **Input:** The first line contains two integers m and n. Each of the next m lines contains n integers representing the grid. **Output:** Output a single integer representing the minimum travel cost from the top-left corner to the bottom-right corner. **Example:** **Input:** ``` 3 3 1 3 1 1 5 1 4 2 1 ``` **Output:** ``` 7 ``` **Explanation:** The path with the minimum cost is: 1→1→1→1→2→1, which has a total cost of 7.","solution":"def min_cost_path(grid): m = len(grid) n = len(grid[0]) # Initialize a 2D list to keep track of the minimum cost to reach each cell dp = [[0] * n for _ in range(m)] # Start at the top-left corner dp[0][0] = grid[0][0] # Fill in the first row (can only come from the left) for j in range(1, n): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill in the first column (can only come from above) for i in range(1, m): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill in the rest of the grid for i in range(1, m): for j in range(1, n): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] # The bottom-right corner contains the minimum cost return dp[m - 1][n - 1]"},{"question":"Farmer John has recently bought a new piece of land and wants to plant a variety of crops. The field can be represented as a 2D grid of size `n x m`, where each cell can hold a specific crop type. Each crop type has a specific value associated with it which measures its yield potential. Farmer John wants to maximize his total yield by ensuring that each row in the grid contains crops with the maximum possible summed yield value. Farmer John has a catalog of `k` crop types, each with a specific yield value. Your task is to determine the arrangement of crop types in the 2D grid to achieve the maximum possible total yield. Note that each row of the grid can contain multiple crop types, but the sum of the yield values in each row should be maximized. The first line contains three integers `n`, `m`, `k` (1 ≤ n, m ≤ 100, 1 ≤ k ≤ 100) – the number of rows, the number of columns in the field, and the number of different crop types, respectively. The second line contains `k` integers `v1, v2, ..., vk` (1 ≤ vi ≤ 1000) – the yield values of the crop types. Print an integer representing the maximum possible total yield for the entire field. **Input Example:** ``` 3 3 3 4 2 7 ``` **Output Example:** ``` 63 ``` **Explanation:** Farmer John can plant each cell in the 3x3 field with the crop type of yield value 7, which results in a total yield of 3 * 3 * 7 = 63.","solution":"def max_total_yield(n, m, k, yields): Returns the maximum possible total yield for the entire field. :param n: Number of rows in the 2D grid :param m: Number of columns in the 2D grid :param k: Number of different crop types :param yields: List of yield values of the crop types :return: Maximum possible total yield max_yield = max(yields) # Find the highest yield value total_yield = n * m * max_yield # Calculate the total yield by planting the highest yield crop in every cell return total_yield"},{"question":"You are given an integer array `prices` where `prices[i]` represents the price of a house on the `i-th` day. You want to maximize your profit by choosing any day to buy one house and choosing a different day in the future to sell that house. Find the maximum profit you can achieve by buying and selling a house, or if no profit is possible, return 0. **Input:** - An integer `n` (1 ≤ n ≤ 10^5), the number of days. - An array `prices` of length `n` where `prices[i]` is the price of the house on the `i-th` day (1 ≤ prices[i] ≤ 10^5). **Output:** - Print a single integer, the maximum profit you can achieve from this transaction. If no profit is possible, return 0. **Example:** ``` Input: 7 [7, 1, 5, 3, 6, 4] Output: 5 Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. ```","solution":"def max_profit(prices): Returns the maximum profit achievable from buying and selling a house. If no profit is possible, returns 0. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: # Update min_price if the current price is lower if price < min_price: min_price = price # Calculate the profit with the current price and update max_profit if it\'s larger than the current max_profit elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Jessica loves hiking and often finds herself exploring new trails in the wilderness. She\'s been keeping track of the various paths and intersections she encounters on each hike and has started to represent this information as a graph. The trails are represented as undirected edges, and the intersections as vertices. Jessica has noted that some parts of the trail form cycles, and she is interested in identifying these cyclic paths. Specifically, she wants to find out if there exists a cycle in the graph. Given N vertices and M edges, you need to determine if there is a cycle in the graph. # Input The first line contains two integers, N (2 ≤ N ≤ 50) and M (1 ≤ M ≤ 100), representing the number of vertices and the number of edges, respectively. Each of the next M lines contains two integers u and v (1 ≤ u, v ≤ N), representing an edge between vertices u and v. # Output Output \\"Yes\\" if there\'s a cycle in the graph, otherwise \\"No\\". # Example Input ``` 4 4 1 2 2 3 3 4 4 2 ``` Output ``` Yes ``` Input ``` 5 4 1 2 2 3 3 4 4 5 ``` Output ``` No ``` # Note In the first example, there is a cycle formed by the vertices 2, 3, and 4. Hence, the output is \\"Yes\\". In the second example, no cycle is present, so the output is \\"No\\".","solution":"def has_cycle(N, M, edges): Determines if there is a cycle in an undirected graph. Parameters: N (int): The number of vertices. M (int): The number of edges. edges (list of tuples): List of edges, each represented as a tuple (u, v). Returns: str: \\"Yes\\" if there is a cycle, otherwise \\"No\\". from collections import defaultdict def dfs(v, parent): visited[v] = True for neighbor in graph[v]: if not visited[neighbor]: if dfs(neighbor, v): return True elif neighbor != parent: return True return False # Create an adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (N + 1) # Check for cycle in each component for i in range(1, N + 1): if not visited[i]: if dfs(i, -1): return \\"Yes\\" return \\"No\\""},{"question":"You are given an array of integers a containing n elements. You can perform the following operation as many times as you want: - Choose any non-empty subarray and remove all the elements of this subarray. Your goal is to determine the minimum number of operations needed to make the array empty. The first line of the input contains an integer t (1 le t le 1000) — the number of test cases. The first line of each test case contains an integer n (1 le n le 10^6) — the length of the array a. The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the array. For each test case, print one integer — the minimum number of operations needed to make the array empty. Note: The sum of n over all test cases does not exceed 10^6.","solution":"def min_operations_to_empty(arr): Returns the minimum number of operations needed to empty the array. return 1 if arr else 0 def process_test_cases(test_cases): results = [] for t in test_cases: n, arr = t results.append(min_operations_to_empty(arr)) return results"},{"question":"You are given an array of integers `nums` of size n where `n` could be any positive integer such that `1 ≤ n ≤ 100,000`. Each element in the array could be any integer between -1000 and 1000, inclusive. Your task is to determine whether there is a contiguous subarray whose sum is zero. Function Signature: ```python def has_zero_sum_subarray(nums: List[int]) -> bool: pass ``` # Input - An integer array `nums` of size `n` is provided which denotes the array of integers. - Each integer in the array can range from `-1000` to `1000`. # Output - Return a boolean value `True` if there exists a contiguous subarray whose sum is zero, otherwise return `False`. # Example ```python assert has_zero_sum_subarray([3, 4, -7, 1, 2, -1, 5, -4]) == True assert has_zero_sum_subarray([1, 2, 3, 4, 5]) == False assert has_zero_sum_subarray([1, -1, 3, 4, -2, -2]) == True assert has_zero_sum_subarray([1, 2, -3, 3, 4, -4]) == True assert has_zero_sum_subarray([2, 1, 4, -2, 2, -1, 1, -3, 1, 2, 1]) == False ``` # Constraints - Time Complexity should be O(n). - Avoid using extra space more than O(n).","solution":"from typing import List def has_zero_sum_subarray(nums: List[int]) -> bool: This function checks if there is a contiguous subarray in \'nums\' whose sum is zero. prefix_sums = set() current_sum = 0 for num in nums: current_sum += num if current_sum == 0 or current_sum in prefix_sums: return True prefix_sums.add(current_sum) return False"},{"question":"Daria is organizing a code review session for her team. She has a list of n programmers and wants to ensure that every programmer gets paired with every other programmer exactly once for a review. To represent this, she has an undirected graph where each node represents a programmer, and an edge represents a review session between two programmers. Given the number of programmers n (1 ≤ n ≤ 100,000), determine the total number of review sessions (edges) in the graph required so that every programmer is paired with every other programmer exactly once. Write a function that computes the number of such sessions. # Input: - A single integer n, the number of programmers. # Output: - A single integer, the total number of review sessions required. # Example: **Input1:** ``` 3 ``` **Output1:** ``` 3 ``` **Input2:** ``` 5 ``` **Output2:** ``` 10 ``` Note: - For n = 3, the possible pairs are (1,2), (1,3), and (2,3), resulting in a total of 3 review sessions. - For n = 5, the possible pairs are 10 unique pairs such as (1,2), (1,3), (1,4), (1,5), (2,3), (2,4), (2,5), (3,4), (3,5), and (4,5). Use the combinatorial calculation to deduce the number of unique pairs, which can be given by the formula nC2 (combination of n items taken 2 at a time).","solution":"def number_of_review_sessions(n): Calculates the number of unique review sessions required so that every programmer gets paired with every other programmer exactly once. The number of unique pairs is given by the combination formula C(n, 2): C(n, 2) = n * (n - 1) / 2 :param n: int - the number of programmers :return: int - the number of unique review sessions if n <= 1: return 0 return n * (n - 1) // 2"},{"question":"A social media company has released a new feature that allows users to send a certain number of messages to each other every day. Each user can send or receive up to `m` messages in one day. The system records the total number of messages sent and received by each user every day. If a user receives more messages than the allowed limit `m`, the excess messages are discarded. The company wants to analyze the messaging patterns to understand the community engagement better. For this, they need to calculate the number of discarded messages for each user at the end of each day. Given the number of users `u`, the maximum allowed messages per day `m`, and a list that contains `u` lists, where each sublist represents the messages received by a user on each day, write a program to find out the number of discarded messages for each user for each day. The first line of input contains two space-separated integers `u` and `m` (1 ≤ u ≤ 1000; 1 ≤ m ≤ 100). The next `u` lines contain space-separated integers where each line represents the number of messages received by a single user over several days. Output `u` lines, each containing space-separated integers where each integer represents the number of discarded messages for that user on each day. Example: Input: ``` 3 5 4 6 2 7 5 3 8 2 2 2 4 1 ``` Output: ``` 0 1 0 2 0 0 3 0 0 0 0 0 ``` Explanation: - User 1 received 4, 6, 2, and 7 messages over 4 days. On the second day, 1 message was discarded (6 - 5 = 1), and on the fourth day, 2 messages were discarded (7 - 5 = 2). - User 2 received 5, 3, 8, and 2 messages over 4 days. On the third day, 3 messages were discarded (8 - 5 = 3). - User 3 received 2, 2, 4, and 1 messages over 4 days. No messages were discarded as they never exceeded the limit.","solution":"def calculate_discarded_messages(u, m, messages): discarded = [] for user_messages in messages: discarded_user = [(message - m) if message > m else 0 for message in user_messages] discarded.append(discarded_user) return discarded def format_output(discarded): return \\"n\\".join(\\" \\".join(map(str, user)) for user in discarded)"},{"question":"Han has a garden consisting of n horizontal rows and m vertical columns of plots, making a total of n * m plots. He wants to plant flowers in some of the plots such that each row contains the same number of flowers and no two flowers are in the same vertical column. In addition, Han wants to maximize the number of flowers planted in the garden. You need to help Han determine the maximum number of flowers he can plant under these constraints. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) representing the number of rows and columns in the garden, respectively. Output a single integer representing the maximum number of flowers Han can plant in the garden. # Example 1: Input: 5 5 Output: 5 # Example 2: Input: 7 3 Output: 3 # Example 3: Input: 4 6 Output: 4","solution":"def max_flowers(n, m): Returns the maximum number of flowers Han can plant in the garden such that each row contains the same number of flowers and no two flowers are in the same vertical column. return min(n, m)"},{"question":"Given a list of integers, write a function to determine whether any two different elements from the list sum up to a given target number. If such a pair exists, return the pair as a tuple; otherwise, return `None`. To match the specified complexity of existing questions, ensure the function operates with a time complexity of O(n). # Function Signature ```python def find_pair_with_sum(nums: List[int], target: int) -> Optional[Tuple[int, int]]: pass ``` # Input - `nums`: A list of `n` integers where `2 <= n <= 10^5`. - `target`: An integer which is the target sum. # Output - Return a tuple of two integers from the list that sum up to the target, or `None` if no such pair exists. The pair should be in the order they appear in the list. # Example ```python print(find_pair_with_sum([2, 7, 11, 15], 9)) # Output: (2, 7) print(find_pair_with_sum([1, 2, 3, 4], 8)) # Output: None print(find_pair_with_sum([-1, 2, 3, -4, 5], 1)) # Output: (-1, 2) ``` # Constraints - All elements are integers, and the same element cannot be used twice. - If multiple pairs are valid, any one of them can be returned.","solution":"from typing import List, Optional, Tuple def find_pair_with_sum(nums: List[int], target: int) -> Optional[Tuple[int, int]]: Determines whether two different elements in the list sum up to a target number. Args: nums: List of integers where 2 <= n <= 10^5. target: An integer representing the target sum. Returns: A tuple of two integers from the list that sum up to the target or None if no such pair exists. seen = set() for num in nums: complement = target - num if complement in seen: return (complement, num) seen.add(num) return None"},{"question":"You are given several queries about a specific sorting problem involving strings. Each query consists of two strings s and t, and you are required to determine if it is possible to transform string s into string t by sorting s\'s characters. The first line of input contains a single integer n (1 le n le 10^4) — the number of queries. Each of the following n lines contains a pair of strings s and t consisting of lowercase English letters only. The lengths of s and t are between 1 and 10^5. The total length of all strings in all queries does not exceed 10^6. For each query, output \\"YES\\" if it is possible to transform s into t by sorting s\'s characters. Otherwise, output \\"NO\\". **Example:** ``` Input: 3 abc cab aab bba xyz xyy Output: YES NO NO ``` In the first query, by sorting \\"abc\\", we can get \\"cab\\". In the second query, no amount of sorting can transform \\"aab\\" into \\"bba\\". In the third query, \\"xyz\\" cannot be transformed into \\"xyy\\" through sorting.","solution":"def can_transform_by_sorting(n, queries): For each query, determine if string s can be transformed into string t by sorting s\'s characters. Args: n : int : number of queries queries : list of tuples : each tuple contains two strings (s, t) Returns: list of str : \\"YES\\" or \\"NO\\" for each query results = [] for s, t in queries: if sorted(s) == sorted(t): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage: n = 3 queries = [(\\"abc\\", \\"cab\\"), (\\"aab\\", \\"bba\\"), (\\"xyz\\", \\"xyy\\")] print(can_transform_by_sorting(n, queries)) # Output: [\'YES\', \'NO\', \'NO\']"},{"question":"You are given an integer array arr of size n. A triplet (arr[i], arr[j], arr[k]) is called an increasing triplet if i < j < k and arr[i] < arr[j] < arr[k]. Your task is to count the number of such increasing triplets in the array. Return the count of increasing triplets for each test case. The first line contains an integer t (1 le t le 10) — the number of test cases. Each test case consists of two lines. The first line contains an integer n (3 le n le 2 cdot 10^{3}) — the size of the array. The second line contains n integers arr[i] (1 le arr[i] le 10^{9}) separated by spaces. For each test case, print the number of increasing triplets in the array. Example input: ``` 2 4 1 2 3 4 5 5 4 3 2 1 ``` Example output: ``` 4 0 ```","solution":"def count_increasing_triplets(arr, n): Counts the number of increasing triplets in array arr of size n. count = 0 for i in range(n - 2): for j in range(i + 1, n - 1): for k in range(j + 1, n): if arr[i] < arr[j] < arr[k]: count += 1 return count def process_test_cases(test_cases): Processes multiple test cases and returns a list of results. results = [] for n, arr in test_cases: results.append(count_increasing_triplets(arr, n)) return results # Function to handle input and output def main(input_data): lines = input_data.strip().split(\\"n\\") t = int(lines[0].strip()) test_cases = [] idx = 1 for _ in range(t): n = int(lines[idx].strip()) arr = list(map(int, lines[idx + 1].strip().split())) test_cases.append((n, arr)) idx += 2 results = process_test_cases(test_cases) return \\"n\\".join(map(str, results)) # Example usage of the main function example_input = \\"2n4n1 2 3 4n5n5 4 3 2 1\\" print(main(example_input)) # Output: \\"4n0\\""},{"question":"Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i]. The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer. Solve it with O(n) time complexity and without using division operation. Example 1: Input: nums = [1,2,3,4] Output: [24,12,8,6] Example 2: Input: nums = [-1,1,0,-3,3] Output: [0,0,9,0,0] Constraints: * 2 <= nums.length <= 10^5 * -30 <= nums[i] <= 30 The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.","solution":"def product_except_self(nums): Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i]. Args: nums (List[int]): input list of integers Returns: List[int]: output list where each element is the product of all elements except itself. n = len(nums) answer = [1] * n # Calculate left products except self left_product = 1 for i in range(n): answer[i] = left_product left_product *= nums[i] # Calculate right products except self right_product = 1 for i in reversed(range(n)): answer[i] *= right_product right_product *= nums[i] return answer"},{"question":"You are given an array of integers and two integers, k and p. Your task is to determine the number of subarrays whose sum of elements is divisible by p, and where the length of each subarray is exactly k. # Input - The first line contains two integers n and p (1 leq n leq 10^5, 1 leq p leq 100). - The second line contains n integers, a_1, a_2, a_3, ldots, a_n (|a_i| leq 10^9). # Output - Print a single integer, the number of subarrays of length k whose sum is divisible by p. # Example Input: ``` 6 3 1 2 3 4 5 6 4 ``` Output: ``` 1 ``` # Explanation In the given example, the subarrays of length 4 are: - [1, 2, 3, 4]: Sum = 10, not divisible by 3 - [2, 3, 4, 5]: Sum = 14, not divisible by 3 - [3, 4, 5, 6]: Sum = 18, divisible by 3 Here, there is exactly one subarray of length 4 whose sum is divisible by 3, so the output is 1.","solution":"def count_subarrays_divisible_by_p(n, k, p, arr): Counts the number of subarrays of length k where the sum of elements is divisible by p. Args: n (int): The length of the array. k (int): The length of the subarrays to be considered. p (int): The divisor. arr (list): The list of integers. Returns: int: The number of subarrays where the sum is divisible by p. if k > n: return 0 count = 0 current_sum = sum(arr[:k]) if current_sum % p == 0: count += 1 for i in range(k, n): current_sum += arr[i] - arr[i - k] if current_sum % p == 0: count += 1 return count"},{"question":"Alex has a new mobile game to play. The game involves collecting coins in different levels, where each level is represented by an integer array. Alex can collect coins in non-adjacent levels only, i.e., if Alex collects coins from level i, Alex cannot collect from levels i-1 and i+1 in the same round. Help Alex find the maximum number of coins that can be collected following this rule. Write a function `max_coins(levels: List[int]) -> int` that takes an integer array `levels` where each element represents the number of coins available in that level, and returns the maximum number of coins that can be collected. # Input - An integer array `levels` of length n (1 leq n leq 10^5) where each element a_i (1 leq a_i leq 10^4) represents the coins available in the i-th level. # Output - An integer representing the maximum number of coins that can be collected by following the game rule. # Function Signature ```python def max_coins(levels: List[int]) -> int: ``` # Example Input ```python levels = [3, 2, 5, 10, 7] ``` Output ```python 15 ``` Explanation Alex can collect 3 coins from level 0 and 10 coins from level 3, or 5 coins from level 2 and 7 coins from level 4, for a maximum of 15 coins. # Note: - Multiple strategies may yield the same maximum coins collected. - This problem can be solved using dynamic programming to track the best possible outcomes at each step.","solution":"from typing import List def max_coins(levels: List[int]) -> int: if not levels: return 0 if len(levels) == 1: return levels[0] n = len(levels) dp = [0] * n dp[0] = levels[0] if n > 1: dp[1] = max(levels[0], levels[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + levels[i]) return dp[-1]"},{"question":"You are developing a drone delivery system that requires navigating a grid-like city map. The city is represented as an n x m grid with buildings and empty spaces. Each cell in the grid can either contain a building \'B\' or be empty \'E\'. The drone can move up, down, left, or right to an adjacent cell, but it cannot move diagonally and cannot pass through buildings. You need to determine if there is a path for the drone to go from its starting position (x1, y1) to the destination position (x2, y2). The first line contains two integers, n and m (1 ≤ n, m ≤ 500) — the number of rows and columns in the city map. Each of the next n lines describes the city grid. Each line consists of m characters \'B\' or \'E\'. The next line contains two integers, x1 and y1 (1 ≤ x1 ≤ n, 1 ≤ y1 ≤ m) — the starting coordinates of the drone. The next line contains two integers, x2 and y2 (1 ≤ x2 ≤ n, 1 ≤ y2 ≤ m) — the destination coordinates. The starting cell (x1, y1) and the destination cell (x2, y2) are guaranteed to be empty cells (i.e., contain \'E\'). If there is a path from the starting cell to the destination cell, print \'YES\'. Otherwise, print \'NO\'. Example: Input: 4 5 EEEEE EBBEE EEEEE EBEEE 1 1 4 5 Output: YES Explanation: One possible path from (1, 1) to (4, 5) is: (1, 1) -> (1, 2) -> (1, 3) -> (1, 4) -> (2, 4) -> (3, 4) -> (4, 4) -> (4, 5)","solution":"from collections import deque def is_path_exist(n, m, city_map, x1, y1, x2, y2): direction_vectors = [(-1, 0), (1, 0), (0, -1), (0, 1)] def is_valid(x, y): return 0 <= x < n and 0 <= y < m and city_map[x][y] == \'E\' queue = deque([(x1-1, y1-1)]) visited = [[False] * m for _ in range(n)] visited[x1-1][y1-1] = True while queue: x, y = queue.popleft() if (x, y) == (x2-1, y2-1): return \\"YES\\" for dx, dy in direction_vectors: nx, ny = x + dx, y + dy if is_valid(nx, ny) and not visited[nx][ny]: visited[nx][ny] = True queue.append((nx, ny)) return \\"NO\\""},{"question":"You are a software engineer at an e-commerce company, and your task is to create a function that generates unique order IDs for each purchase. The format of the order ID should consist of a prefix followed by a unique number of a specified length. - The prefix is always a fixed string \\"ORD\\". - The unique number should be zero-padded to ensure it fits the specified length. - For instance, if the length specified is 3, the order IDs generated should be \\"ORD001\\", \\"ORD002\\", ..., \\"ORD999\\". - If the length specified is 5, the order IDs generated should be \\"ORD00001\\", \\"ORD00002\\", ..., \\"ORD99999\\". The function should take two arguments: 1. `length` (integer): The length of the unique number part of the order ID. 2. `n` (integer): The number of unique order IDs to generate. The output should be a list of the first `n` unique order IDs in the specified format. Write a function `generate_order_ids(length, n)` that generates and returns a list of order IDs according to the given parameters. **Input example:** ```python length = 3 n = 5 ``` **Output example:** ```python [\\"ORD001\\", \\"ORD002\\", \\"ORD003\\", \\"ORD004\\", \\"ORD005\\"] ``` **Input example:** ```python length = 5 n = 3 ``` **Output example:** ```python [\\"ORD00001\\", \\"ORD00002\\", \\"ORD00003\\"] ``` Constraints: - `1 ≤ length ≤ 18` - `1 ≤ n ≤ 10^6` The function should be efficient to handle the upper limit of the constraints.","solution":"def generate_order_ids(length, n): Generates a list of the first n unique order IDs with a specified length for the number part. Args: - length (int): The length of the unique number part of the order ID. - n (int): The number of unique order IDs to generate. Returns: - list: A list of generated order IDs. return [f\\"ORD{str(i).zfill(length)}\\" for i in range(1, n+1)]"},{"question":"You are given a list of integers representing heights of buildings in a row. You need to find the maximum area of a rectangle that can be formed using any consecutive buildings as the width, and the minimum height among those buildings as the height of the rectangle. The first line contains a single integer n (1 le n le 10^5) — the number of buildings. The second line contains n space-separated integers, where each integer h_i (1 le h_i le 10^9) represents the height of the ith building. Output a single integer — the maximum area of the rectangle. In the first example, the maximum rectangle has a width of 3 buildings (buildings with heights 2, 1, 5) and the minimum height among them is 1. Thus, the maximum area is 3 * 1 = 3. In the second example, the maximum rectangle has a width of 2 buildings (buildings with heights 1, 1) and the minimum height among them is 1. Thus, the maximum area is 2 * 1 = 2.","solution":"def max_rectangle_area(heights): Given a list of integers representing heights of buildings in a row, this function finds the maximum area of a rectangle that can be formed using any consecutive buildings as the width, and the minimum height among those buildings as the height of the rectangle. stack = [] max_area = 0 n = len(heights) for i in range(n): while stack and heights[stack[-1]] > heights[i]: h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) while stack: h = heights[stack.pop()] w = n if not stack else n - stack[-1] - 1 max_area = max(max_area, h * w) return max_area"},{"question":"You are given an integer array arr consisting of n integers. Your task is to perform a series of operations to make all elements in the array equal. In one operation, you can pick any integer x and increment or decrement it by 1. You have to find the minimum number of operations required to make all elements in the array equal. The first line of the input contains one integer t (1 le t le 100) — the number of test cases. Then t test cases follow. The first line of each test case contains one integer n (1 le n le 50) — the number of elements in the array. The second line of each test case contains n integers arr_{1}, arr_{2}, ldots, arr_{n} (1 le arr_{i} le 10000), where arr_{i} is the i-th element of the array. For each test case, print the minimum number of operations required to make all elements in the array equal. # Example Input: ``` 3 2 1 5 3 5 5 5 4 1 2 3 4 ``` Output: ``` 4 0 3 ``` Explanation: In the first test case, you can make both elements equal to 3 in 4 operations (increment 1 by 2 and decrement 5 by 2). In the second test case, all elements are already equal, so no operations are needed. In the third test case, you can make all elements equal to 2 in 3 operations (increment 1 by 1, decrement 3 by 1, decrement 4 by 2).","solution":"def min_operations_to_equal_elements(arr): Finds the minimum number of operations required to make all elements in the array equal. arr.sort() median = arr[len(arr) // 2] total_operations = sum(abs(x - median) for x in arr) return total_operations def process_test_cases(test_cases): results = [] for n, arr in test_cases: results.append(min_operations_to_equal_elements(arr)) return results"},{"question":"You are working on a software application that schedules appointments. Users can create appointments for a specific date and time, but appointments cannot overlap. You need to implement a function that takes a list of existing appointments and a new appointment and determines if the new appointment can be added to the schedule without overlapping any existing appointments. Each appointment is represented as a tuple `(start_time, end_time)`, where `start_time` and `end_time` are strings in the \\"HH:MM\\" 24-hour time format. The function should return `True` if the new appointment can be added without any overlap and `False` otherwise. # Function Signature ```python def can_schedule(existing_appointments: List[Tuple[str, str]], new_appointment: Tuple[str, str]) -> bool: ``` # Input - `existing_appointments`: A list of tuples where each tuple contains two strings representing the start and end times of an existing appointment. The list can be empty. - `new_appointment`: A tuple containing two strings representing the start and end time of the new appointment. # Output - Return `True` if the new appointment can be added without overlapping any existing appointments, and `False` otherwise. # Example ```python existing_appointments = [(\\"09:00\\", \\"10:00\\"), (\\"11:00\\", \\"12:00\\"), (\\"13:30\\", \\"14:30\\")] new_appointment = (\\"10:30\\", \\"11:30\\") print(can_schedule(existing_appointments, new_appointment)) # Output: True existing_appointments = [(\\"09:00\\", \\"10:00\\"), (\\"10:30\\", \\"11:30\\"), (\\"12:00\\", \\"13:00\\")] new_appointment = (\\"10:00\\", \\"11:00\\") print(can_schedule(existing_appointments, new_appointment)) # Output: False ``` # Constraints - The `start_time` of any appointment is always less than its `end_time`. - The appointments times are all within a single day (i.e., between \\"00:00\\" and \\"23:59\\"). - No two existing appointments overlap. - The maximum length of the `existing_appointments` list is 1000.","solution":"from typing import List, Tuple def can_schedule(existing_appointments: List[Tuple[str, str]], new_appointment: Tuple[str, str]) -> bool: new_start, new_end = new_appointment for existing_start, existing_end in existing_appointments: if not (new_end <= existing_start or new_start >= existing_end): return False return True"},{"question":"You are given a sequence of integers which may or may not contain duplicates. Your task is to find the length of the longest subsequence that can be obtained by deleting some (possibly zero) elements and in which every element is a power of two (i.e., elements that are 1, 2, 4, 8, 16, ...). A subsequence of a sequence is a new sequence that is formed from the original sequence by deleting some (possibly none) of the elements without disturbing the relative positions of the remaining elements. # Input Format The first line of the input contains a single integer `n` (1 ≤ n ≤ 2 * 10^5) — the number of elements in the sequence. The second line contains `n` integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 2 * 10^5) — the elements of the sequence. # Output Format Output the length of the longest subsequence that consists only of elements which are powers of two. # Example Input 6 3 8 4 1 7 2 Output 4 Explanation A possible longest subsequence is [8, 4, 1, 2]. # Note The sequence [8, 4, 1, 2] is a subsequence of the given sequence since by removing the 1st and 5th elements (3 and 7), we get the subsequence.","solution":"def is_power_of_two(x): Helper function that checks if a number is a power of two. return (x != 0) and ((x & (x - 1)) == 0) def longest_subsequence_power_of_two(arr): Returns the length of the longest subsequence consisting only of elements which are powers of two. power_of_two_elements = [a for a in arr if is_power_of_two(a)] return len(power_of_two_elements)"},{"question":"You are given a directed graph with `n` nodes and `m` edges. Each node is labeled from `1` to `n`. The graph consists of multiple isolated strongly connected components (SCCs), and each SCC contains a path of nodes that leads from its start node to its end node, possibly forming cycles. You are given the start nodes of each SCC and the end nodes to which they have a direct path. Your task is to determine the length of the longest path present within any SCC. Input: - The first line contains two integers `n` (1 ≤ n ≤ 10^5) and `m` (1 ≤ m ≤ 2*10^5) representing the number of nodes and edges in the graph. - The next `m` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n) indicating a directed edge from node `u` to node `v`. Output: - Output a single integer, the length of the longest path that can be found within any SCC of the graph. Note: - A path in this graph is a sequence of nodes such that there is a directed edge from each node to the next in the sequence. - \\"Length of a path\\" is defined as the number of edges in the path. You can assume the input graph is directed and may contain cycles. Example: Input: ``` 6 7 1 2 2 3 3 1 4 5 5 6 6 4 2 5 ``` Output: ``` 3 ``` Explanation: In this graph, there are two SCCs: 1. The nodes `{1, 2, 3}` form one SCC with a cycle of length `3`. 2. The nodes `{4, 5, 6}` form another SCC with a cycle of length `3`. Since the longest path within both SCCs is `3`, the output is `3`.","solution":"from collections import defaultdict, deque import sys sys.setrecursionlimit(200000) def find_sccs(n, graph): def dfs(node, index, stack, indices, lowlinks, on_stack, sccs): indices[node] = index lowlinks[node] = index index += 1 stack.append(node) on_stack[node] = True for neighbor in graph[node]: if indices[neighbor] is None: dfs(neighbor, index, stack, indices, lowlinks, on_stack, sccs) lowlinks[node] = min(lowlinks[node], lowlinks[neighbor]) elif on_stack[neighbor]: lowlinks[node] = min(lowlinks[node], indices[neighbor]) if lowlinks[node] == indices[node]: scc = [] while True: w = stack.pop() on_stack[w] = False scc.append(w) if w == node: break sccs.append(scc) indices = [None] * n lowlinks = [None] * n on_stack = [False] * n stack = [] sccs = [] index = 0 for i in range(n): if indices[i] is None: dfs(i, index, stack, indices, lowlinks, on_stack, sccs) return sccs def compute_longest_path_in_scc(graph, nodes): n = len(nodes) node_to_index = {nodes[i]: i for i in range(n)} dp = [-1] * n visited = [False] * n def longest_path(v): if dp[node_to_index[v]] != -1: return dp[node_to_index[v]] if visited[node_to_index[v]]: return 0 visited[node_to_index[v]] = True max_len = 0 for neighbor in graph[v]: if neighbor in node_to_index: max_len = max(max_len, 1 + longest_path(neighbor)) dp[node_to_index[v]] = max_len return max_len max_path = 0 for node in nodes: max_path = max(max_path, longest_path(node)) return max_path def longest_path_in_scc(n, edges): graph = defaultdict(list) for u, v in edges: graph[u-1].append(v-1) sccs = find_sccs(n, graph) longest_path = 0 for scc in sccs: if len(scc) > 1: longest_path = max(longest_path, compute_longest_path_in_scc(graph, scc)) return longest_path # Example usage if __name__ == \\"__main__\\": print(longest_path_in_scc(6, [(1, 2), (2, 3), (3, 1), (4, 5), (5, 6), (6, 4), (2, 5)])) # Output: 3"},{"question":"Jasper loves creating unique necklaces with beads of different colors. He has a special technique to detect if two necklaces are distinct or not. According to Jasper, two necklaces are considered the same if one can be transformed into the other by rotating it. Write a program that determines if two given necklaces are distinct or the same according to Jasper\'s method. Each necklace will be represented as a string of lowercase letters, where each letter represents a bead of a particular color. Input: The first line contains a single integer t (1 ≤ t ≤ 100), the number of test cases. Each of the next t lines contains two strings a and b (1 ≤ |a|, |b| ≤ 100), the representations of the two necklaces. Output: For each test case, print \\"same\\" if the two necklaces can be rotated to look the same, otherwise print \\"distinct\\". Example: Input: 3 abcde eabcd xyz yzx ab ab Output: same same same Explanation: - In the first example, one of the necklaces can be rotated to match the other. - In the second example, rotating either necklace will result in the same string. - In the third example, both necklaces are identical since they are already the same.","solution":"def are_necklaces_same(a, b): Determines if two necklaces are the same considering rotations. if len(a) != len(b): return \\"distinct\\" concat_a = a + a return \\"same\\" if b in concat_a else \\"distinct\\" def process_test_cases(t, test_cases): Processes multiple test cases to determine if each pair of strings represents the same necklace. results = [] for a, b in test_cases: results.append(are_necklaces_same(a, b)) return results"},{"question":"A software company is developing a new online multiplayer game where players place different assets on a shared grid. The grid is initially of size `h x w`, and the players can place exactly `m` non-overlapping rectangular assets on this grid. Each asset is defined by its width `wi` and height `hi`. The objective is to determine if it\'s possible to place all the given assets on the grid without any overlap. Write a function that determines if all the assets can be placed on the grid. The grid size and the list of asset dimensions will be provided as input. If it\'s possible to place all assets on the grid such that no two assets overlap, return `True`. Otherwise, return `False`. The first line of the input contains three integers `h`, `w`, and `m` (1 ≤ h, w ≤ 1000, 1 ≤ m ≤ 100). The following `m` lines each contain two integers `wi` and `hi` (1 ≤ wi, hi ≤ 100) which represent the width and height of each asset respectively. # Example **Input:** ``` 5 5 3 2 2 3 3 1 4 ``` **Output:** ``` True ``` **Input:** ``` 5 5 3 3 3 3 3 2 3 ``` **Output:** ``` False ``` # Explanation In the first example, the assets with dimensions `2x2`, `3x3`, and `1x4` can be placed on the `5x5` grid without overlapping. In the second example, it\'s impossible to place all three assets on the `5x5` grid without having them overlap.","solution":"def can_place_assets(h, w, m, assets): Determines if it\'s possible to place all assets on a grid without overlap. Parameters: h (int): Height of the grid. w (int): Width of the grid. m (int): Number of assets. assets (list of tuples): List of (width, height) tuples representing each asset. Returns: bool: True if all assets can be placed without overlap, False otherwise. from itertools import permutations, product # Check all permutations of the assets to account for their placements for perm in permutations(assets): for permuted_assets in product(*[(asset, (asset[1], asset[0])) for asset in perm]): # Initialize an empty board board = [[0] * w for _ in range(h)] is_valid_placement = True for asset in permuted_assets: placed = False for i in range(h): for j in range(w): if i + asset[1] <= h and j + asset[0] <= w: # check if asset fits the grid space if all(board[x][y] == 0 for x in range(i, i + asset[1]) for y in range(j, j + asset[0])): for x in range(i, i + asset[1]): for y in range(j, j + asset[0]): board[x][y] = 1 placed = True break if placed: break if not placed: is_valid_placement = False break if is_valid_placement: return True return False"},{"question":"Implement a function that takes an integer array and a target sum, and returns the indices of the two numbers that add up to the target sum. Assume that each input would have exactly one solution, and you must not use the same element twice. # Function Signature def two_sum(nums: List[int], target: int) -> List[int]: # Input - nums (List[int]): A list of integers. - target (int): The target sum. # Output - List[int]: A list containing the two indices of the elements that add up to the target sum. # Example ```python # Example 1 nums = [2, 7, 11, 15] target = 9 two_sum(nums, target) # Output: [0, 1] # Example 2 nums = [3, 2, 4] target = 6 two_sum(nums, target) # Output: [1, 2] # Example 3 nums = [3, 3] target = 6 two_sum(nums, target) # Output: [0, 1] ``` # Constraint - Your code should have a time complexity of O(n).","solution":"from typing import List def two_sum(nums: List[int], target: int) -> List[int]: num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index"},{"question":"You are given an array of integers representing the temperature variations over a period of days. The temperature can be positive, zero, or negative. You need to identify the longest subarray (contiguous subarray) where the sum of the temperatures is positive. Write a program that, given an array of integers, finds the length of the longest subarray with a positive sum. If no such subarray exists, return 0. **Input:** - The first line contains a single integer t (1 le t le 1000), the number of test cases. - Each of the next t test cases consists of two lines: - The first line contains a single integer n (1 le n le 10^5), the number of days. - The second line contains n integers representing the temperature variations over the days, where each integer a_i (-10^9 le a_i le 10^9). **Output:** - For each test case, output a single integer, the length of the longest subarray with a positive sum. **Example:** **Input:** ``` 2 5 1 -2 3 -1 2 4 -1 -2 -3 -4 ``` **Output:** ``` 3 0 ``` **Explanation:** - In the first test case, the longest subarray with a positive sum is [3, -1, 2], which has a sum of 4 and length 3. - In the second test case, there is no subarray with a positive sum, so the output is 0. **Note:** - The sum of the lengths of all test cases in a single input does not exceed 10^6. - Make sure your solution is efficient to handle large inputs.","solution":"def longest_positive_sum_subarray(t, test_cases): results = [] for n, temperatures in test_cases: max_length = 0 current_sum = 0 current_length = 0 for temp in temperatures: current_sum += temp current_length += 1 if current_sum > 0: max_length = max(max_length, current_length) elif current_sum <= 0: current_sum = 0 current_length = 0 results.append(max_length) return results # Example usage: # test_cases = [(5, [1, -2, 3, -1, 2]), (4, [-1, -2, -3, -4])] # print(longest_positive_sum_subarray(2, test_cases)) # Output should be [3, 0]"},{"question":"You are given a list of integers representing the height of candles on a birthday cake. You are also given a number `n` which indicates how many candles should be blown out. Your task is to identify the `n` tallest candles and count how many times they appear in the list. If there are fewer than `n` unique heights, return the count of all unique candles. The first line contains an integer `m` (1 ≤ m ≤ 10^6) which represents the number of candles. The second line contains `m` space-separated integers where each integer represents the height of a candle. The third line contains an integer `n` (1 ≤ n ≤ 10^6). Output the count of the `n` tallest unique candle heights. If the number of unique heights is less than `n`, return the count of all unique candle heights. # Example Input: ``` 10 4 4 2 1 3 3 3 4 4 1 3 ``` Output: ``` 4 ``` Explanation: The unique candle heights are 4, 3, 2, and 1. The `n` tallest candle heights are 4, 3, and 2. Height 4 appears 4 times, height 3 appears 3 times, and height 2 appears 1 time. Thus, the count is 4 (4) + 3 (3) + 1 (2) = 8, but the result should only return the count of the unique candle heights which are 4. # Notes - Consider the edge cases where all candles are of the same height or all heights are unique. - Ensure the solution is efficient enough to handle the upper limits of the constraints.","solution":"def count_tallest_candles(candle_heights, n): Returns the count of the \'n\' tallest unique candle heights. If there are fewer than \'n\' unique heights, returns the count of all unique candle heights. :param candle_heights: List of integers representing the heights of candles. :param n: Integer indicating how many of the tallest unique candle heights to count. :return: Count of unique candle heights among the \'n\' tallest ones. # Get the unique heights of the candles unique_heights = list(set(candle_heights)) # Sort the unique heights in descending order unique_heights.sort(reverse=True) # Get the \'n\' tallest heights tallest_n = unique_heights[:n] # Count how many times each of the tallest heights appear in the original list count = 0 for height in tallest_n: count += candle_heights.count(height) return len(tallest_n)"},{"question":"You have been hired to improve the search functionality of a social media platform. The primary objective is to enable users to search for specific hashtags in posts quickly. You are given a list of posts, where each post is a string of words separated by spaces. Some words may start with the \'#\' symbol, representing a hashtag. You are also given a list of search queries, with each query being a hashtag (starting with the \'#\' symbol). Your task is to determine how many posts contain each of the search queries at least once. If a post contains a hashtag that matches the query in any word, it should be counted. Input: - The first line contains an integer n (1 ≤ n ≤ 1000), the number of posts. - The following n lines each contain a string, representing a post. - The next line contains an integer m (1 ≤ m ≤ 1000), the number of search queries. - The following m lines each contain a string, representing a search query. Output: - For each search query, output the number of posts that contain the query at least once. Example: Input: 3 #hello world this is a test this is a #sample post for testing another #hashtag to check 2 #hello #hashtag Output: 1 1","solution":"def count_posts_with_hashtags(posts, queries): Returns a list containing the number of posts that each query is found in at least once. results = [] for query in queries: count = sum(1 for post in posts if query in post.split()) results.append(count) return results"},{"question":"Implement a library management system with various operations. The library manages a collection of books, and allows users to borrow and return books. You need to process several operations: 1. **Add a book**: Add a new book to the library\'s collection. 2. **Borrow a book**: A user borrows a book from the library. 3. **Return a book**: A user returns a previously borrowed book. 4. **Check availability**: Check if a book is available to be borrowed. Implement a program to handle these operations: - The first line of the input contains an integer `n` (1 ≤ n ≤ 100,000) - the number of operations. - The next `n` lines contain one operation each. The operations are described as follows: - **ADD book_id**: Adds a book with the given `book_id` (an integer between 1 and 10^9) to the library. If the book already exists in the library, ignore this operation. - **BORROW book_id**: Borrows a book with the given `book_id` if it is available. If the book is not in the library or already borrowed, ignore this operation. - **RETURN book_id**: Returns a book with the given `book_id` to the library. If the book was not borrowed, ignore this operation. - **CHECK book_id**: Prints \\"YES\\" if the book with the given `book_id` is available, otherwise prints \\"NO\\". Print the output for each **CHECK** operation on a new line. Input: ``` 7 ADD 1001 ADD 1002 BORROW 1001 CHECK 1001 CHECK 1002 RETURN 1001 CHECK 1001 ``` Output: ``` NO YES YES ```","solution":"class Library: def __init__(self): self.collection = set() self.borrowed = set() def add_book(self, book_id): if book_id not in self.collection: self.collection.add(book_id) def borrow_book(self, book_id): if book_id in self.collection and book_id not in self.borrowed: self.borrowed.add(book_id) def return_book(self, book_id): if book_id in self.borrowed: self.borrowed.remove(book_id) def check_availability(self, book_id): if book_id in self.collection and book_id not in self.borrowed: return \\"YES\\" else: return \\"NO\\" def process_operations(n, operations): library = Library() results = [] for operation in operations: parts = operation.split() if parts[0] == \'ADD\': library.add_book(int(parts[1])) elif parts[0] == \'BORROW\': library.borrow_book(int(parts[1])) elif parts[0] == \'RETURN\': library.return_book(int(parts[1])) elif parts[0] == \'CHECK\': results.append(library.check_availability(int(parts[1]))) return results"},{"question":"You are a developer for a chatbot application that generates responses based on user inputs. One feature of your chatbot is a keyword-based response system. Each keyword is associated with a certain response weight, and the chatbot generates a response with the maximum combined weight of the triggered keywords. The system should allow you to add keywords with their associated weights, handle user inputs, and calculate the highest possible response weight based on the keywords found in the user\'s query. Given an integer k representing the number of keywords, followed by k blocks of input where each block contains a string representing a keyword and an integer indicating its weight, write a program to find the total maximum weight of the response based on the user query. You will also be given an integer q representing the number of queries, followed by q strings where each string is a query from a user. Each block begins with a line containing one integer k (1 le k le 10^5) — the number of keywords. Then k lines follow, each containing a string and an integer w (1 le w le 10^6). Next you\'ll have an integer q (1 le q le 10^5) — the number of queries, then q lines, each containing a single string — the user\'s query. Print q integers, each representing the maximum weight for the respective user\'s query. In the example test the keyword list is as follows: ``` greeting 3 hello 5 world 2 chat 4 ``` Given a query \\"hello greeting chat\\", the total weight is 5 + 3 + 4 = 12. # Example Input ``` 4 greeting 3 hello 5 world 2 chat 4 3 hello greeting chat world chat example query ``` # Example Output ``` 12 6 0 ``` Note: - For the above example, the first query \\"hello greeting chat\\" matches three keywords with weights 5, 3 and 4 respectively. So the total maximum weight is 12. - The second query \\"world chat\\" matches two keywords with weights 2 and 4 respectively. So the total maximum weight is 6. - The third query \\"example query\\" matches no keywords, resulting in a weight of 0.","solution":"def get_response_weights(k, keywords, q, queries): # Creating a dictionary for keyword to weight mapping keyword_weights = {} for keyword, weight in keywords: keyword_weights[keyword] = weight # Processing each query to calculate the total weight result_weights = [] for query in queries: words = query.split() total_weight = sum(keyword_weights.get(word, 0) for word in words) result_weights.append(total_weight) return result_weights # Example usage: # k = 4 # keywords = [(\\"greeting\\", 3), (\\"hello\\", 5), (\\"world\\", 2), (\\"chat\\", 4)] # q = 3 # queries = [\\"hello greeting chat\\", \\"world chat\\", \\"example query\\"] # print(get_response_weights(k, keywords, q, queries)) # Expected [12, 6, 0]"},{"question":"There is a rectangular grid of cells with `n` rows and `m` columns. Some of the cells are blocked, represented by an array of coordinates. A chess piece that moves like a knight (L-shaped moves: two cells in one direction and then one cell perpendicular) can start at any unblocked cell. Determine the total number of cells it can reach. The first line contains two integers: n and m (1 ≤ n, m ≤ 100). The second line contains a single integer k (0 ≤ k ≤ 100), the number of blocked cells. The next k lines each contain two integers r and c (1 ≤ r ≤ n; 1 ≤ c ≤ m), the coordinates of the blocked cells. Output a single integer — the number of unblocked cells the knight can reach starting from any unblocked cell. # Example Input: ``` 5 5 3 1 2 3 3 5 5 ``` Output: ``` 22 ``` Explanation: Starting from any unblocked cell, the knight can reach 22 unique unblocked cells in total.","solution":"def reach_cells(n, m, k, blocked_cells): moves = [(-2, -1), (-1, -2), (1, -2), (2, -1), (2, 1), (1, 2), (-1, 2), (-2, 1)] def is_valid(r, c): if 1 <= r <= n and 1 <= c <= m and (r, c) not in blocked: return True return False def bfs(start): from collections import deque queue = deque([start]) visited = set([start]) while queue: r, c = queue.popleft() for dr, dc in moves: nr, nc = r + dr, c + dc if is_valid(nr, nc) and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc)) return visited blocked = set(blocked_cells) all_possible_patients = set() for r in range(1, n + 1): for c in range(1, m + 1): if (r, c) not in blocked: reachable_from_current = bfs((r, c)) all_possible_patients.update(reachable_from_current) return len(all_possible_patients)"},{"question":"You are given an array of integers and your task is to find the length of the longest subarray such that the bitwise AND of all elements in this subarray is non-zero. A subarray is a contiguous portion of the array. The bitwise AND of an array is the bitwise AND of all its elements. The bitwise AND of two integers is an integer whose binary representation has a 1 in each bit position where both of the integers being ANDed also have a 1. Write a program that takes an integer n (1 ≤ n ≤ 100,000) and an array of n integers (1 ≤ ai ≤ 1,000,000,000) as input, and returns the length of the longest subarray with non-zero bitwise AND. **Input:** - First line contains an integer n. - Second line contains n space-separated integers representing the array. **Output:** - A single integer indicating the length of the longest subarray with non-zero bitwise AND. **Examples:** ``` Input: 5 1 2 3 4 5 Output: 2 Input: 3 4 8 16 Output: 1 ``` **Explanation:** In the first example, subarrays [1, 2], [2, 3], [3, 4], and [4, 5] have a non-zero bitwise AND, with the longest being of length 2. In the second example, no subarray longer than 1 element has a non-zero bitwise AND.","solution":"def longest_subarray_with_non_zero_and(n, arr): Finds the length of the longest subarray with non-zero bitwise AND. Parameters: n (int): Length of the input array arr (list of int): The input array Returns: int: The length of the longest subarray with non-zero bitwise AND max_length = 1 current_length = 1 for i in range(1, n): if (arr[i] & arr[i-1]) > 0: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"Katie and Kuro enjoy playing a game that involves sorting pieces of various shades of gray. Each piece is assigned a shade value between 0 (black) and 255 (white). They want to color the pieces in such a way that when sorted by their shade values, a specific desired pattern of shades emerges, with alternating light and dark shades. Katie gives you a list of pieces, each represented by its shade value. Kuro wants you to rearrange the list by either adding new pieces or by changing the shade values of existing pieces to construct a sequence that fits a checkerboard pattern when sorted. Specifically, this pattern requires that no two consecutive pieces have a difference in shade values of less than 20. Write a function called \\"validate_checkerboard\\" that determines if it is possible to rearrange the given list to achieve the desired checkerboard pattern, and returns \\"YES\\" if possible and \\"NO\\" otherwise. **Input:** - An integer `n` (1 ≤ n ≤ 100) representing the number of pieces. - A list of n integers, each representing the shade value of a piece (`shade values_o ≤ shade_i ≤ 255`). **Output:** - A single line containing \\"YES\\" if it is possible to rearrange the list to achieve the desired checkerboard pattern, or \\"NO\\" otherwise. **Example 1:** ``` Input: 5 20 40 60 80 100 Output: YES ``` **Example 2:** ``` Input: 3 10 15 25 Output: NO ``` **Example Explanation:** 1. For the first example, you can arrange the shades as [20, 40, 60, 80, 100], which does not meet the condition because some consecutive pieces have a difference less than 20 (like 20 and 40, etc.). But if you insert new shades in between, for example [0, 20, 40, 60, 80] you get valid checkerboard pattern. 2. In the second example, you have shades [10, 15, 25], but there’s no way to rearrange them or insert new pieces such that every consecutive piece differs by at least 20 in shade. Create a function to check if it is possible.","solution":"def validate_checkerboard(n, shades): Determines if it\'s possible to rearrange the list of shades to achieve a checkerboard pattern where no two consecutive pieces have a difference in shades of less than 20. :param n: The number of pieces :param shades: List of integers representing the shade values of the pieces :return: \\"YES\\" if possible to achieve the pattern, \\"NO\\" otherwise if n == 1: return \\"YES\\" # A single piece will always satisfy the condition # Sort the shades shades.sort() # Check for the difference between consecutive elements for i in range(n - 1): if abs(shades[i + 1] - shades[i]) < 20: return \\"NO\\" return \\"YES\\""},{"question":"The city of AlgoLand is preparing for a grand Festival of Lights celebration. The city is adorned with n lamp posts arranged in a straight line, numbered from 1 to n. Each lamp post has some initial brightness value. A lamp post can have multiple lamps attached to it, thereby contributing to its brightness. The residents can perform operations to increase the brightness of a segment of consecutive lamp posts. You need to help the city by answering q queries. Each query can be either of the following types: 1. Add a certain brightness to all lamp posts in a given range. 2. Find the maximum brightness in a given range. The program should handle these operations efficiently. **Input:** - The first line contains two integers n and q (1 ≤ n, q ≤ 100,000) — the number of lamp posts and the number of queries, respectively. - The second line contains n integers ai (1 ≤ ai ≤ 1,000,000) — the initial brightness of each lamp post. - The next q lines contain the queries. Each query is defined in one of the following formats: - \\"1 l r b\\" (1 ≤ l ≤ r ≤ n, 1 ≤ b ≤ 1,000,000): Add brightness b to all lamp posts between positions l and r (inclusive). - \\"2 l r\\" (1 ≤ l ≤ r ≤ n): Find the maximum brightness among all lamp posts between positions l and r (inclusive). **Output:** For each query of the second type, output a single integer — the maximum brightness in the specified range. **Example:** **Input:** ``` 5 4 1 2 3 4 5 1 2 4 2 2 1 5 1 3 5 1 2 2 3 ``` **Output:** ``` 6 6 ``` **Explanation:** - Initially, the brightness values of the lamp posts are [1, 2, 3, 4, 5]. - The first query adds 2 to the brightness of lamp posts from positions 2 to 4. The brightness values become [1, 4, 5, 6, 5]. - The second query asks for the maximum brightness in the range 1 to 5, which is 6. - The third query adds 1 to the brightness of lamp posts from positions 3 to 5. The brightness values become [1, 4, 6, 7, 6]. - The fourth query asks for the maximum brightness in the range 2 to 3, which is 6.","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) # Build the segment tree for i in range(self.n): self.tree[self.n + i] = data[i] for i in range(self.n - 1, 0, -1): self.tree[i] = max(self.tree[i * 2], self.tree[i * 2 + 1]) self.lazy = [0] * (2 * self.n) def _apply(self, pos, value): self.tree[pos] += value if pos < self.n: self.lazy[pos] += value def _build(self, pos): while pos > 1: pos //= 2 self.tree[pos] = max(self.tree[2 * pos], self.tree[2 * pos + 1]) + self.lazy[pos] def _push(self, pos): for s in range(self.n.bit_length(), 0, -1): i = pos >> s if self.lazy[i] != 0: self._apply(i * 2, self.lazy[i]) self._apply(i * 2 + 1, self.lazy[i]) self.lazy[i] = 0 def range_add(self, l, r, value): l += self.n r += self.n l0, r0 = l, r while l <= r: if l % 2 == 1: self._apply(l, value) l += 1 if r % 2 == 0: self._apply(r, value) r -= 1 l //= 2 r //= 2 self._build(l0) self._build(r0) def range_query(self, l, r): l += self.n r += self.n self._push(l) self._push(r) max_val = 0 while l <= r: if l % 2 == 1: max_val = max(max_val, self.tree[l]) l += 1 if r % 2 == 0: max_val = max(max_val, self.tree[r]) r -= 1 l //= 2 r //= 2 return max_val def process_queries(n, q, brightness, queries): seg_tree = SegmentTree(brightness) result = [] for query in queries: if query[0] == 1: _, l, r, b = query seg_tree.range_add(l - 1, r - 1, b) elif query[0] == 2: _, l, r = query result.append(seg_tree.range_query(l - 1, r - 1)) return result # Example usage: # n = 5 # q = 4 # brightness = [1, 2, 3, 4, 5] # queries = [ # [1, 2, 4, 2], # [2, 1, 5], # [1, 3, 5, 1], # [2, 2, 3] # ] # print(process_queries(n, q, brightness, queries))"},{"question":"Balanced Parentheses Checker Write a function `is_balanced` that takes a single string as input and returns `True` if the string contains balanced parentheses and `False` otherwise. A string has balanced parentheses if: - Every opening parenthesis `(` has a corresponding closing parenthesis `)`. - Parentheses must close in the correct order; no closing parenthesis can match an opening parenthesis of a different type. For example: - `is_balanced(\\"(a + b) * (c / d)\\")` should return `True` because all the parentheses are balanced. - `is_balanced(\\"(a + b) * (c / d\\")` should return `False` because there is one unbalanced opening parenthesis. - `is_balanced(\\")(\\")` should return `False` because the parentheses are in the wrong order. **Function Signature:** ```python def is_balanced(s: str) -> bool: ``` **Input:** - a single string `s` where `1 ≤ len(s) ≤ 10^4` **Output:** - A boolean value indicating whether the parentheses in string `s` are balanced. **Example:** ```python print(is_balanced(\\"(a + b) * (c / d)\\")) # True print(is_balanced(\\"(a + b) * (c / d\\")) # False print(is_balanced(\\")(\\")) # False print(is_balanced(\\"a + b))((c + d\\")) # False print(is_balanced(\\"(()(()))\\")) # True ``` # Notes: - The solution should not count any characters other than the parentheses for the purpose of balancing. - An empty string should be considered balanced.","solution":"def is_balanced(s: str) -> bool: Returns True if the parentheses in the given string are balanced, False otherwise. stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return not stack"},{"question":"A company\'s payroll system requires calculating the total salary to be paid to all employees at the end of the month. Each employee has a base salary and may earn additional performance-based commission. The commission is calculated based on the number of sales an employee makes during the month. Each employee can fall into one of three performance levels based on their sales: 1. **Level 1**: <= 10 sales - Get a 5% commission on their total sales. 2. **Level 2**: Between 11 and 20 sales - Get a 10% commission on their total sales. 3. **Level 3**: Above 20 sales - Get a 15% commission on their total sales. The company\'s payroll system information is provided in the following format: - The first line contains an integer n (1 ≤ n ≤ 1000), the number of employees. - The next n lines contain three integers each: the base salary si (1 ≤ si ≤ 10000), the number of sales mi (0 ≤ mi ≤ 100), and the total sales value vi (0 ≤ vi ≤ 200000) for each employee. Your task is to calculate the total salary to be paid to each employee, including their base salary and any performance commission. Sort the employees by their total salary in descending order. If two employees have the same total salary, sort them by their initial input order (i.e., employees that appear earlier in the input remain earlier). The output should be the sorted list of total salaries for each employee, each on a new line with exactly 2 decimal places. **Input** ``` n si_1 mi_1 vi_1 si_2 mi_2 vi_2 ... si_n mi_n vi_n ``` **Output** ``` total_salary_1 total_salary_2 ... total_salary_n ``` **Example** Input: ``` 3 3000 15 20000 3000 25 30000 3000 5 10000 ``` Output: ``` 6450.00 6500.00 3500.00 ``` Here, employee 1 earns a base salary of 3000 and makes 15 sales worth 20000, falling into Level 2, hence gets 2000 (10% of 20000) as commission. Therefore, the total salary is 5000. Employee 2 earns a base salary of 3000 and makes 25 sales worth 30000, falling into Level 3, hence gets 4500 (15% of 30000) as commission. Therefore, the total salary is 7500. Employee 3 earns a base salary of 3000 and makes 5 sales worth 10000, falling into Level 1, hence gets 500 (5% of 10000) as commission. Therefore, the total salary is 3500. After sorting: 6450.00 (Employee 2) 6500.00 (Employee 1) 3500.00 (Employee 3)","solution":"def calculate_total_salary(employees): Calculate the total salary for a list of employees including base salary and commissions, and sort them in descending order of total salary. :param employees: List of tuples (base_salary, number_of_sales, total_sales_value) :return: List of total salaries sorted in descending order total_salaries = [] for i, (base_salary, num_sales, total_sales_value) in enumerate(employees): if num_sales <= 10: commission = 0.05 * total_sales_value elif 11 <= num_sales <= 20: commission = 0.10 * total_sales_value else: commission = 0.15 * total_sales_value total_salary = base_salary + commission total_salaries.append((total_salary, i)) # Sort by total salary (descending) and by initial order in case of tie total_salaries.sort(key=lambda x: (-x[0], x[1])) # Return only the total salaries sorted_salaries = [salary for salary, _ in total_salaries] return sorted_salaries"},{"question":"You are given an array of integers a with length n (1 leq n leq 10^5) where a_i (1 leq a_i leq 10^9) represents the price of the i-th item. You also have a positive integer k (1 leq k leq 100) which denotes the maximum number of items you can buy. Your task is to determine the maximum total price of items you can buy while not exceeding the limit of k items. Output the maximum possible total price. Input: - The first line of the input contains two integers n and k. - The second line contains n integers representing the array a. Output: - Print a single integer representing the maximum total price you can achieve by selecting at most k items from the array. **Example:** Input: ``` 5 3 8 2 9 1 4 ``` Output: ``` 21 ``` **Explanation:** - You can select the items with prices 8, 9, and 4 which give a total price of 8 + 9 + 4 = 21. This is the maximum possible total price with 3 items.","solution":"def max_total_price(n, k, prices): Returns the maximum total price achievable by selecting at most k items from the prices array. Parameters: n (int): The number of items. k (int): The maximum number of items that can be bought. prices (list): The list of prices of the items. Returns: int: The maximum total price. # Sort the prices array in descending order sorted_prices = sorted(prices, reverse=True) # Take the first k items from the sorted_prices array (or all if n < k) max_prices = sorted_prices[:k] # Return the sum of these selected prices return sum(max_prices)"},{"question":"You have been given two strings `s1` and `s2`, both composed of lowercase English letters and having lengths of at most 10^5 characters. Write a function to check if `s2` is a subsequence of `s1`. A subsequence of a string is derived by deleting some or none of the characters from the original string without changing the order of the remaining characters. For example, \\"ace\\" is a subsequence of \\"abcde\\", but \\"aec\\" is not. Write a function `is_subsequence(s1, s2)` that takes in two strings `s1` and `s2` and returns a boolean value `True` if `s2` is a subsequence of `s1`, and `False` otherwise. # Example Output: ```python is_subsequence(\\"abcde\\", \\"ace\\") # True is_subsequence(\\"abcde\\", \\"aec\\") # False is_subsequence(\\"abacaba\\", \\"aaa\\") # True is_subsequence(\\"abc\\", \\"\\") # True is_subsequence(\\"abc\\", \\"abcd\\") # False ``` # Constraints: - The function should run efficiently with time complexity better than O(n^2), where n is the length of `s1`. - You may assume the input strings contain only lowercase English letters.","solution":"def is_subsequence(s1, s2): Returns True if s2 is a subsequence of s1, otherwise False. # Pointers for s1 and s2 i, j = 0, 0 while i < len(s1) and j < len(s2): if s1[i] == s2[j]: j += 1 i += 1 return j == len(s2)"},{"question":"In a university, there are n students and m friendships. These friendships are bidirectional, i.e., if student A is a friend of student B, then student B is also a friend of student A. A group of students is called a \\"circle\\" if every student in the group is a friend with every other student in the group. Your task is to find the largest possible circle of students. If there are multiple circles of the same largest size, any one of them can be returned. The first input line contains two integers n and m — the total number of students in the university and the total number of friendships, respectively (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000). Each of the next m lines contains two space-separated integers ui and vi (1 ≤ ui, vi ≤ n, ui ≠ vi), meaning that student ui is a friend of student vi. Each pair represents a unique friendship. Output the size of the largest possible circle of friends. If no circle can be formed, the size should be 0. Example: Input: 6 5 1 2 2 3 3 1 4 5 5 6 Output: 3 Explanation: In this example, the first three students (1, 2, 3) form a circle since each is friends with each other. The same could be said about students 4, 5, and 6, but since both are of size 3, returning any one of them is sufficient. Your task is to find the largest circle of friends in the given university network and print the size of that circle. If no such circle exists, print 0.","solution":"def largest_friend_circle(n, m, friendships): from collections import defaultdict def dfs(node, group): visited.add(node) group.add(node) for neighbor in adj_list[node]: if neighbor not in visited: dfs(neighbor, group) # Creating adjacency list adj_list = defaultdict(list) for u, v in friendships: adj_list[u].append(v) adj_list[v].append(u) visited = set() max_circle_size = 0 for student in range(1, n + 1): if student not in visited: group = set() dfs(student, group) max_circle_size = max(max_circle_size, len(group)) return max_circle_size"},{"question":"You have been given a string that contains both uppercase and lowercase letters. A letter is considered a \\"good\\" letter if it appears in the string both as an uppercase and a lowercase letter. Your task is to write a function that finds the greatest \\"good\\" letter in the string in terms of its character value. The character value of a letter is the same as its ASCII value (for example, \'A\' has a value of 65, \'a\' has a value of 97). If there are no \\"good\\" letters, return an empty string. The output should be the uppercase form of the greatest \\"good\\" letter. # Input - A string `s` (1 ≤ |s| ≤ 100) consisting of English uppercase and lowercase letters. # Output - A single uppercase letter which is the greatest \\"good\\" letter in the string, or an empty string if no such letter exists. # Example Input ``` s = \\"aA\\" ``` Output ``` A ``` Input ``` s = \\"abBcCDd\\" ``` Output ``` D ``` Input ``` s = \\"xyz\\" ``` Output ``` ``` # Note In the first example, \'A\' appears both in uppercase and lowercase forms, hence it is a \\"good\\" letter and the only one in the string. In the second example, \'B\', \'C\', and \'D\' appear in both forms, with \'D\' being the greatest based on its character value. In the third example, there are no letters that appear both in uppercase and lowercase forms, thus the output is an empty string.","solution":"def greatest_good_letter(s): Returns the greatest \\"good\\" letter in uppercase that appears in both uppercase and lowercase in the given string. good_letters = set() for char in s: if char.isupper() and char.lower() in s: good_letters.add(char) elif char.islower() and char.upper() in s: good_letters.add(char.upper()) return max(good_letters, default=\\"\\")"},{"question":"You are tasked with developing an algorithm to help a company optimize delivery routes for their fleet of delivery trucks. Each truck has a fixed maximum load capacity, and each delivery request has a specific location and weight. The goal is to maximize the number of fulfilled delivery requests without exceeding the load capacity of any truck. The input consists of: - The number of delivery requests `m` (1 ≤ m ≤ 10^4). - A list of `m` tuples, where each tuple contains two integers: the weight of the delivery `wi` (1 ≤ wi ≤ 10^3) and the location identifier `li` (1 ≤ li ≤ 100). - The number of trucks `k` (1 ≤ k ≤ 100), and each truck\'s maximum load capacity `C` (1 ≤ C ≤ 10^5). Your task is to determine the maximum number of delivery requests that can be fulfilled without any truck exceeding its load capacity. You need to develop a function named `optimize_delivery_requests(m, requests, k, C)` that takes in the integer `m`, the list of tuples `requests`, the integer `k`, and the integer `C`, and returns an integer representing the maximum number of delivery requests that can be fulfilled. Here are the detailed input and output requirements of the function: ```python def optimize_delivery_requests(m: int, requests: List[Tuple[int, int]], k: int, C: int) -> int: pass ``` **Input:** - `m` (integer): Number of delivery requests. - `requests` (List[Tuple[int, int]]): A list of `m` tuples, each containing two integers: weight `wi` and location identifier `li`. - `k` (integer): Number of trucks. - `C` (integer): Maximum load capacity of each truck. **Output:** - Return (integer): The maximum number of delivery requests that can be fulfilled. Examples: ``` Input: m = 5 requests = [(10, 1), (15, 2), (7, 1), (8, 3), (5, 2)] k = 2 C = 20 Output: 4 Input: m = 3 requests = [(5, 1), (20, 1), (10, 2)] k = 1 C = 15 Output: 2 ```","solution":"def optimize_delivery_requests(m, requests, k, C): The function to optimize the delivery requests within the constraints of trucks and their capacities. :param m: Number of delivery requests :param requests: List of tuples containing the weight of the delivery and location identifier :param k: Number of trucks :param C: Maximum load capacity of each truck :return: Maximum number of delivery requests that can be fulfilled # Sort the delivery requests based on weight in ascending order requests.sort() # We will use a list to keep track of load capacities for each truck truck_capacities = [0] * k # Keep track of the number of fulfilled requests fulfilled_requests = 0 # Try to allocate each request to one of the trucks for weight, location in requests: for i in range(k): if truck_capacities[i] + weight <= C: truck_capacities[i] += weight fulfilled_requests += 1 break return fulfilled_requests"},{"question":"A company wants to distribute promotional flyers to their customers, and they have determined the optimum sequence to deliver them to ensure maximum reach. Given the sequence, each flyer has specific time slots during which it can be delivered, and each slot is a range of hours that the customer is available. Your task is to determine if all the flyers can be delivered within the given time slots. Each flyer must be delivered in one of its available slots and there must be no overlap between any two flyers\' delivery times. The first line contains an integer n (2 leq n leq 2 times 10^5) — the number of flyers. Each of the next n lines contains two integers start_i and end_i (0 le start_i < end_i le 10^9) — the start and end time of the available time slot for the i-th flyer. Print \\"YES\\" if all the flyers can be delivered without any overlap, otherwise print \\"NO\\". # Example: **Input:** ``` 3 1 3 3 5 4 6 ``` **Output:** ``` YES ``` **Explanation:** The first flyer can be delivered between 1 to 3, the second flyer can be delivered from 3 to 5 (no overlap with the first as it starts exactly when the first ends), and the third can be delivered from 4 to 6 overlapping only partially with the second flyer. Thus, all flyers can be delivered.","solution":"def can_deliver_all_flyers(n, slots): Determines if all the flyers can be delivered without any overlap. Parameters: n (int): The number of flyers. slots (list of tuples): Each tuple contains two integers, start and end time of the slot for the flyer. Returns: str: \\"YES\\" if all flyers can be delivered without overlap, otherwise \\"NO\\". # Sort the flyers by their end time primarily and start time secondarily slots.sort(key=lambda x: (x[1], x[0])) # Initialize the end time of the last delivered flyer to -1 (before any possible time slot) last_end_time = -1 for start, end in slots: if start < last_end_time: # Found overlap return \\"NO\\" # Update the last end time to the end of the current slot last_end_time = end return \\"YES\\""},{"question":"A group of friends is planning a hiking trip, and they need to carry water bottles with them. Each friend can carry a specific number of bottles, and they want to distribute the bottles such that every friend carries some bottles. The goal is to distribute the bottles as evenly as possible, while also ensuring that the difference in the number of bottles carried by any two friends is minimized. You are given an integer array where each element represents the number of bottles a particular friend can carry. Your task is to determine the largest possible minimum number of bottles a friend can carry if the total number of bottles is equal to the sum of the array elements. For example, if you have three friends and the array is [3, 5, 8], the total number of bottles is 3 + 5 + 8 = 16. You need to find the distribution such that the friend who carries the fewest bottles carries as many as possible, while ensuring the distribution satisfies the given constraints. The first line contains an integer n (1 le n le 10^5) — the number of friends. The second line contains n integers a_1, a_2, ..., a_n (1 le a_i le 10^9) — the number of bottles each friend can carry. Output the largest possible minimum number of bottles one friend can carry, such that the distribution is as even as possible. Example: Input: 3 3 5 8 Output: 5","solution":"def largest_minimum_bottles(n, capacities): Returns the largest possible minimum number of bottles one friend can carry while distributing the bottles as evenly as possible. total_bottles = sum(capacities) left, right = 1, total_bottles def can_distribute(mid): required_bottles = 0 for cap in capacities: if cap < mid: required_bottles += (mid - cap) elif cap > mid: required_bottles -= (cap - mid) return required_bottles <= 0 while left <= right: mid = (left + right) // 2 if can_distribute(mid): left = mid + 1 else: right = mid - 1 return right"},{"question":"A unique string is called an \\"exponential string\\" if it can be divided into two parts such that the second part is the repetition of the first part one or more times. For example, \\"abab\\" can be divided into \\"ab\\" and \\"ab\\" which repeats \\"ab\\". Similarly, \\"abcabcabc\\" can be divided into \\"abc\\" and \\"abcabc\\". Your task is to determine whether a given string is an \\"exponential string\\" or not. **Input:** ``` - The first line contains an integer ( n ) ((1 leq n leq 10^5)), the length of the string. - The second line contains a string ( s ) of length ( n ) consisting of lowercase English letters. ``` **Output:** ``` - Output \\"YES\\" if the string is an exponential string. Otherwise, output \\"NO\\". ``` **Examples:** ``` Input: 6 abcabc Output: YES ``` ``` Input: 5 abcde Output: NO ``` **Explanation:** - In the first example, the string \\"abcabc\\" can be divided into \\"abc\\" and \\"abc\\" which is a repetition of \\"abc\\". - In the second example, the string \\"abcde\\" cannot be divided into two parts where the second part is a repetition of the first part. Hence the output is \\"NO\\".","solution":"def is_exponential_string(n, s): Determines if the given string is an exponential string or not. Parameters: n (int): The length of the string s. s (str): The string to check. Returns: str: \\"YES\\" if the string is an exponential string, otherwise \\"NO\\". for i in range(1, n // 2 + 1): if n % i == 0: if s == s[:i] * (n // i): return \\"YES\\" return \\"NO\\" # Example usage: # n = 6 # s = \\"abcabc\\" # print(is_exponential_string(n, s)) # Output: \\"YES\\""},{"question":"You are given a rectangular garden represented by a grid of size N times M (1 ≤ N, M ≤ 1000). Each cell in the grid can either be a plant (represented by \'P\') or an obstacle (represented by \'O\'). The garden can be divided into rectangular regions such that each region does not include any obstacle. Your task is to find the largest rectangular region (by area) in the garden that contains only plants. Input: - The first line of the input contains two integers N and M - the dimensions of the garden. - The following N lines each contain M characters (\'P\' or \'O\') representing the garden. Output: - Output a single integer - the area of the largest rectangular region consisting only of plants. Example: Input: ``` 4 5 P P O P P P P P P P P O P P P P P P O P ``` Output: ``` 6 ``` Explanation: The largest rectangle without obstacles consists of 6 plant cells from row 2, columns 2 to 5 and row 3, columns 3 to 5.","solution":"def largest_plant_region(garden): if not garden: return 0 max_area = 0 rows = len(garden) cols = len(garden[0]) heights = [0] * cols for r in range(rows): for c in range(cols): if garden[r][c] == \'P\': heights[c] += 1 else: heights[c] = 0 max_area = max(max_area, max_histogram_area(heights)) return max_area def max_histogram_area(heights): stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() if not stack: area = heights[top_of_stack] * index else: area = heights[top_of_stack] * (index - stack[-1] - 1) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() if not stack: area = heights[top_of_stack] * index else: area = heights[top_of_stack] * (index - stack[-1] - 1) max_area = max(max_area, area) return max_area"},{"question":"You are given a list of integers representing the heights of buildings in a city skyline viewed from the side. Your task is to determine the maximum amount of sun each building can receive during sunrise or sunset. Sun rises from the east (left) and sets in the west (right). A building\'s sun exposure is blocked by another building if that building is taller and located on the same side that the sun is coming from. For example, given a list of building heights `[3, 7, 8, 3, 6, 1]`: - During sunrise, starting from the left, the buildings will receive sun as follows: - The 1st building (height 3) is fully exposed. - The 2nd building (height 7) is fully exposed. - The 3rd building (height 8) is fully exposed. - The 4th building (height 3) is completely blocked by the 3rd building. - The 5th building (height 6) is blocked by the 3rd building. - The 6th building (height 1) is blocked by the 3rd building. - During sunset, starting from the right, the buildings will receive sun as follows: - The 6th building (height 1) is fully exposed. - The 5th building (height 6) is fully exposed. - The 4th building (height 3) is completely blocked by the 5th building. - The 3rd building (height 8) is fully exposed. - The 2nd building (height 7) is blocked by the 3rd building. - The 1st building (height 3) is blocked by the 2nd building. Write a function to determine the number of buildings that receive direct sunlight during both sunrise and sunset. # Input: - A single line containing space-separated integers representing the heights of the buildings. # Output: - Two integers separated by a space, where the first integer is the number of buildings receiving direct sunlight during sunrise, and the second integer is the number of buildings receiving direct sunlight during sunset. # Example: Input: ``` 3 7 8 3 6 1 ``` Output: ``` 3 3 ``` Explanation: - 3 buildings receive sunlight during sunrise: `[3, 7, 8]` - 3 buildings receive sunlight during sunset: `[1, 6, 8]`","solution":"def buildings_receiving_sunlight(building_heights): def calc_sunlight_exposure(heights): max_height = 0 sunlight_exposure = 0 for height in heights: if height > max_height: sunlight_exposure += 1 max_height = height return sunlight_exposure # Calculating the sunlight exposure during sunrise sunrise_exposure = calc_sunlight_exposure(building_heights) # Calculating the sunlight exposure during sunset sunset_exposure = calc_sunlight_exposure(building_heights[::-1]) return sunrise_exposure, sunset_exposure # Example usage building_heights = [3, 7, 8, 3, 6, 1] print(buildings_receiving_sunlight(building_heights)) # Output: (3, 3)"},{"question":"You are given an n x m grid representing a battlefield. Each cell in the grid can either be an open space or contain an obstacle. The goal is to determine the minimum number of moves required for a knight to travel from a given starting position to a target position on this grid. The knight moves in an \\"L\\" shape: two cells in one direction and then one cell perpendicular, or one cell in one direction and then two cells perpendicular. The movement options of the knight are as follows: 1. (x + 2, y + 1) 2. (x + 2, y - 1) 3. (x - 2, y + 1) 4. (x - 2, y - 1) 5. (x + 1, y + 2) 6. (x + 1, y - 2) 7. (x - 1, y + 2) 8. (x - 1, y - 2) You are given a number of queries, each consisting of starting and ending coordinates. For each query, if it is possible for the knight to reach the target position, output the minimum number of moves required. If it is not possible, output -1. Input: - The first line contains three integers, n, m, and q (1 ≤ n, m ≤ 1000, 1 ≤ q ≤ 10000), denoting the dimensions of the battlefield and the number of queries. - The next n lines contain m characters each, where each character is either \'.\' (open space) or \'#\' (obstacle). - The following q lines contain four integers sx, sy, tx, ty (1 ≤ sx, sy, tx, ty ≤ 1000), representing the starting and target coordinates for each query. Output: - For each query, output a single integer on a new line denoting the minimum number of moves required, or -1 if the target position is unreachable. Example: ``` Input: 5 5 3 ..... .#... ..... ...#. ..... 1 1 5 5 1 1 2 2 3 2 3 2 Output: 4 -1 0 ```","solution":"from collections import deque def bfs_min_moves(grid, start, end): n = len(grid) m = len(grid[0]) directions = [ (2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2) ] sx, sy = start tx, ty = end if grid[sx][sy] == \'#\' or grid[tx][ty] == \'#\': return -1 queue = deque([(sx, sy, 0)]) visited = set() visited.add((sx, sy)) while queue: cx, cy, moves = queue.popleft() if (cx, cy) == (tx, ty): return moves for dx, dy in directions: nx, ny = cx + dx, cy + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, moves + 1)) return -1 def knight_moves(n, m, grid, queries): result = [] for sx, sy, tx, ty in queries: min_moves = bfs_min_moves(grid, (sx-1, sy-1), (tx-1, ty-1)) result.append(min_moves) return result"},{"question":"You are given an array of integers and a single integer k. Your task is to determine whether there exists a pair of distinct indices (i, j) in the array such that the absolute difference between the elements at these indices is equal to k. In other words, find if there are distinct indices i and j such that |arr[i] - arr[j]| = k. Write a function `find_pair_with_difference(arr, k)` that takes in an array of integers `arr` and an integer `k`, and returns `True` if such a pair exists, and `False` otherwise. # Input - An array of integers `arr` with length n (1 ≤ n ≤ 10^6). - An integer `k` (0 ≤ k ≤ 10^9). # Output - Return `True` if there exists a pair of distinct indices (i, j) such that |arr[i] - arr[j]| = k, otherwise return `False`. # Examples Example 1 ```python input: arr = [1, 5, 3, 4, 2], k = 3 output: True # Explanation: The pairs (5, 2) and (4, 1) both have an absolute difference of 3. ``` Example 2 ```python input: arr = [1, 2, 3, 4, 5], k = 6 output: False # Explanation: No pair of elements have an absolute difference of 6. ``` Example 3 ```python input: arr = [8, 12, 16, 4, 0, 20], k = 4 output: True # Explanation: The pairs (8, 12), (12, 16), (4, 0), and (20, 16) all have an absolute difference of 4. ``` # Note - The function should be efficient enough to handle large inputs as specified in the constraints.","solution":"def find_pair_with_difference(arr, k): Determines if there exists a pair of distinct indices in the array such that the absolute difference between the elements at these indices is equal to k. :param arr: List[int] - an array of integers :param k: int - the target absolute difference :return: bool - whether such a pair exists value_set = set() for value in arr: if value + k in value_set or value - k in value_set: return True value_set.add(value) return False"},{"question":"James recently discovered a new coding algorithm that requires processing a matrix. He now wants to test it on a special type of matrix where each row contains exactly the same elements, but the elements can vary between rows. Can you help James analyze such matrices? The first line of the input contains a single integer t (1 leq t leq 100), the number of test cases. Each test case starts with two integers n and m (1 leq n, m leq 50) — the number of rows and the number of columns in the matrix, respectively. Then follow n lines describing the matrix, where each line is a string of length m. For each test case, output \\"YES\\" if all rows in the matrix contain exactly the same elements, and \\"NO\\" otherwise. You can print each letter in any case (upper or lower). # Example Input ``` 2 3 3 aaa aaa aaa 3 4 abcd abcd abce ``` Output ``` YES NO ``` # Explanation - In the first test case, all rows in the matrix contain exactly the same elements (\'aaa\'), so the output is \\"YES\\". - In the second test case, not all rows contain the same elements (the last row is different), so the output is \\"NO\\".","solution":"def analyze_matrices(num_cases, cases): Analyzes multiple test cases to determine if all rows in each matrix contain the same elements. :param num_cases: Number of test cases :param cases: A list of tuples where each tuple contains (n, m, matrix) - n (int): Number of rows in the matrix - m (int): Number of columns in the matrix - matrix (list): List of strings representing the rows in the matrix :return: List of strings \\"YES\\" or \\"NO\\" corresponding to each test case results = [] for n, m, matrix in cases: all_rows_same = True first_row_set = set(matrix[0]) for row in matrix: if set(row) != first_row_set: all_rows_same = False break if all_rows_same: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are managing a system responsible for assigning tasks to remote workers. Each worker can only handle certain types of tasks based on their expertise. You need to create an algorithm that distributes the incoming tasks fairly while ensuring that each task is handled by the appropriate worker. Let\'s consider the following: - You have `m` workers, indexed from `1` to `m`. - Each worker `i` can only handle certain types of tasks, specified by a list of integers `Ti`, where each integer represents a task type. - You have a list of incoming tasks, where each task is represented by a pair `(task_type, task_id)`. - Your goal is to assign each task to the worker who can handle it, in a round-robin fashion (i.e., assigning tasks of the same type alternately to the eligible workers). Write a function `assign_tasks` that takes in: - The number of workers `m`. - A list `workers_tasks` of `m` lists, where `workers_tasks[i]` is the list of task types that worker `i` can handle. - A list `incoming_tasks` of tuples `(int, int)`, where the first element of the tuple is the task type and the second element is the task id. The function should return a dictionary where each key is a worker index (1 to m) and each value is a list of task ids assigned to that worker. **Function Signature**: ```python def assign_tasks(m: int, workers_tasks: List[List[int]], incoming_tasks: List[Tuple[int, int]]) -> Dict[int, List[int]]: ``` **Example**: ```python m = 3 workers_tasks = [ [1, 2], # Worker 1 can handle task types 1 and 2 [1], # Worker 2 can handle task type 1 [2, 3] # Worker 3 can handle task types 2 and 3 ] incoming_tasks = [ (1, 101), # task_type 1, task_id 101 (2, 102), # task_type 2, task_id 102 (1, 103), # task_type 1, task_id 103 (3, 104), # task_type 3, task_id 104 (2, 105) # task_type 2, task_id 105 ] print(assign_tasks(m, workers_tasks, incoming_tasks)) ``` **Expected Output**: ```python { 1: [101, 102], # Worker 1 gets task ids 101 and 102 2: [103], # Worker 2 gets task ids 103 3: [104, 105] # Worker 3 gets task ids 104 and 105 } ``` Ensure your solution is efficient and handles the constraints appropriately.","solution":"from typing import List, Tuple, Dict from collections import defaultdict, deque def assign_tasks(m: int, workers_tasks: List[List[int]], incoming_tasks: List[Tuple[int, int]]) -> Dict[int, List[int]]: task_to_workers = defaultdict(deque) # Mapping tasks to eligible workers in a deque for round-robin assignment for worker_index in range(m): for task_type in workers_tasks[worker_index]: task_to_workers[task_type].append(worker_index + 1) # Assign tasks assigned_tasks = {i+1: [] for i in range(m)} for task_type, task_id in incoming_tasks: if task_type in task_to_workers and task_to_workers[task_type]: worker = task_to_workers[task_type].popleft() assigned_tasks[worker].append(task_id) task_to_workers[task_type].append(worker) return assigned_tasks"},{"question":"Design a function that takes a list of integers and returns a new list with the same elements but with all prime numbers shifted to the end of the list, while preserving the order of the non-prime and prime numbers among themselves. # Function Signature ```python def shift_primes_to_end(arr: list) -> list: pass ``` # Input - This function takes a list `arr` of `n` integers where `1 <= n <= 10^6` and each integer in the list is `1 <= arr[i] <= 10^6`. # Output - The function returns a new list with the prime numbers shifted to the end. # Example ```python arr = [7, 6, 5, 4, 3, 2] print(shift_primes_to_end(arr)) # Output: [6, 4, 7, 5, 3, 2] arr = [2, 3, 5, 8, 11, 13, 17, 19, 7, 4] print(shift_primes_to_end(arr)) # Output: [8, 4, 2, 3, 5, 11, 13, 17, 19, 7] ``` # Note 1. A prime number is a natural number greater than `1` that has no positive divisors other than `1` and itself. 2. Preserve the relative order of both the non-prime and prime numbers in the returned list.","solution":"from math import isqrt def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False for i in range(5, isqrt(n) + 1, 6): if n % i == 0 or n % (i + 2) == 0: return False return True def shift_primes_to_end(arr): Shifts all prime numbers to the end of the list while preserving the order of the non-prime and prime numbers among themselves. non_primes = [x for x in arr if not is_prime(x)] primes = [x for x in arr if is_prime(x)] return non_primes + primes"},{"question":"You are given an array of integers where each element represents the height of a building. The buildings are located on a flat surface along a straight line. You need to pour water from the top of each building and determine how much water is trapped between the buildings after rainfall. The water trapped between the buildings is determined by the amount of space (in units) that the rain would fill such that no water overflows the buildings. Water trapped between two buildings is bounded by the shorter of the two buildings and can fill up to the height difference between the shorter building and the terrain level. **Input:** - The first line contains an integer n (1 <= n <= 10^5), representing the number of buildings. - The second line contains n integers representing the heights of the buildings. **Output:** - Output a single integer representing the total units of water trapped. *Example:* ``` Input: 6 0 1 0 2 1 0 Output: 3 ``` *Explanation:* 1 unit of water is trapped between the first and second building. 2 units of water are trapped between the fourth and fifth building. Consider boundaries (heights outside the given list) as 0. To solve this problem, iterate over the building heights and use two pointers technique, or compute the left and right max heights for every building to determine the trapped water for each position.","solution":"def trap(height): Calculate the total units of water trapped between the buildings after rainfall. Parameters: height (List[int]): A list of integers representing the heights of the buildings. Returns: int: The total units of water trapped. if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n # Fill left max array left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) # Fill right max array right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) # Calculate total water trapped water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - height[i] return water_trapped"},{"question":"A popular social media platform implemented a new feature called \\"Influencer Connection.\\" Each user on the platform is represented as a node, and each friendship between users is a bidirectional edge connecting two nodes. A user can follow another user who they are friends with, creating a directed connection from the follower to the followed user. The platform wants to analyze the spread of information starting from an influential user. When an influential user posts a new piece of information, it propagates through the network via directed connections (follows). However, not all users follow everyone they are friends with. The goal is to determine the maximum number of users that can receive the information starting from the influential user. You are provided with the initial friendships and the follow relationships. Determine the maximum number of users that can receive the information if the influential user is one of the users. The first line of the input contains two integers n and m (1 ≤ n ≤ 50, 1 ≤ m ≤ 2500), where n is the number of users and m is the number of friendship relationships, followed by m lines of friendships. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v), representing a bidirectional friendship between users u and v. The following line contains an integer f (0 ≤ f ≤ 2500) indicating the number of follow relationships. Each of the next f lines contains two integers a and b (1 ≤ a, b ≤ n, a ≠ b), representing a directed follow connection from user a to user b. The last line contains a single integer s (1 ≤ s ≤ n), the starting influential user. Output the maximum number of users that can receive the information starting from user s. For example, in the input below: ``` 6 5 1 2 2 3 3 4 4 5 5 6 7 1 2 2 3 3 4 4 5 5 6 1 3 1 6 1 ``` The output should be: ``` 6 ``` Explanation: Starting from user 1, the information can propagate to users 2 -> 3 -> 4 -> 5 -> 6 through the follow relationships, reaching a total of 6 users.","solution":"def max_users_reached(n, m, friendships, f, follows, s): from collections import defaultdict, deque # Create adjacency lists for follows follow_graph = defaultdict(list) for a, b in follows: follow_graph[a].append(b) # BFS to find all reachable nodes visited = set() queue = deque([s]) visited.add(s) while queue: user = queue.popleft() for follower in follow_graph[user]: if follower not in visited: visited.add(follower) queue.append(follower) return len(visited)"},{"question":"You are given a sequence of `n` integers, `a1, a2, ..., an`. You have to perform the following operations exactly once: 1. Choose any two indices `i` and `j` (1 ≤ i ≤ j ≤ n) and reverse the subsequence from `i` to `j`. Your task is to determine the maximum possible length of the longest increasing subsequence (LIS) of the sequence after performing exactly one such operation. The input consists of multiple test cases. The first line contains an integer `t` (1 ≤ t ≤ 100), the number of test cases. Each test case consists of two lines. The first line contains an integer `n` (2 ≤ n ≤ 2000) — the length of the sequence. The second line contains `n` space-separated integers `a1, a2, ..., an` (1 ≤ ai ≤ 10000). For each test case, print a single integer — the maximum possible length of the longest increasing subsequence after performing exactly one operation. Example: Input: ``` 2 5 1 2 5 3 4 6 4 3 2 1 6 5 ``` Output: ``` 4 5 ``` Explanation: In the first test case, by reversing the subsequence from the 3rd to the 4th element, the sequence becomes `[1, 2, 3, 5, 4]`, which has an LIS of length 4 (`[1, 2, 3, 5]`). In the second test case, by reversing the subsequence from the 1st to the 4th element, the sequence becomes `[1, 2, 3, 4, 6, 5]`, which has an LIS of length 5 (`[1, 2, 3, 4, 6]`).","solution":"def find_lis_length(arr): n = len(arr) lis = [1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 return max(lis) def max_lis_after_one_reverse(n, arr): max_lis = 0 for i in range(n): for j in range(i, n): new_arr = arr[:i] + arr[i:j+1][::-1] + arr[j+1:] max_lis = max(max_lis, find_lis_length(new_arr)) return max_lis def solve(test_cases): results = [] for n, arr in test_cases: results.append(max_lis_after_one_reverse(n, arr)) return results"},{"question":"Alice is playing an interesting card game that involves an array of integers representing different cards. The goal of the game is to select a subset of cards such that the sum of the selected cards is as large as possible but does not exceed a given limit S. # Task Given an array of integers A and an integer S, determine the maximum possible sum of a subset of the array A that does not exceed S. If no subset satisfies the condition, the answer should be 0. # Input - The first line contains a single integer N (1 le N le 50) — the number of cards. - The next line contains N integers A_1, A_2, ..., A_N (1 le A_i le 10^3) — the values of the cards. - The last line contains a single integer S (1 le S le 10^4) — the sum limit. # Output - Print a single integer — the maximum possible sum of a subset of the array A that does not exceed S. # Example Input ``` 5 3 34 4 12 5 9 ``` Output ``` 9 ``` Explanation By selecting the subset {4, 5}, the sum is 9 which is the maximum subset sum that does not exceed 9. In this example, the chosen subset maximizes the sum while respecting the limit given by S.","solution":"def max_subset_sum(N, A, S): Returns the maximum possible sum of a subset of the array A that does not exceed S. :param N: Integer representing the number of cards. :param A: List of integers representing the values of the cards. :param S: Integer representing the sum limit. :return: Maximum possible sum of a subset of A that does not exceed S. # Initialize a list to keep track of possible sums dp = [0] * (S + 1) for num in A: for j in range(S, num - 1, -1): dp[j] = max(dp[j], dp[j - num] + num) return dp[S]"},{"question":"Given an unsorted integer array `nums`, you need to find the following: 1. The `maximum sum of a contiguous subarray`. 2. The `length of the shortest subarray` (contiguous) that has the maximum sum from step 1. You should implement a function `max_subarray_info(nums: List[int]) -> Tuple[int, int]` that returns a tuple containing two integers. The first integer is the maximum sum of a contiguous subarray, and the second integer is the length of the shortest subarray with that maximum sum. **Input Constraints:** - The length of the array `nums` will be between `1` and `10^5`. - Each value in `nums` will be between `-10^4` and `10^4`. **Example:** ```python def max_subarray_info(nums: List[int]) -> Tuple[int, int]: # Your code here # Example 1 print(max_subarray_info([-2, 1, -3, 4, -1, 2, 1, -5, 4])) # Output: (6, 4) # Explanation: The maximum sum is 6 for the subarray [4, -1, 2, 1] # Example 2 print(max_subarray_info([1])) # Output: (1,1) # Explanation: The maximum sum is 1 for the subarray [1]. # Example 3 print(max_subarray_info([5, 4, -1, 7, 8])) # Output: (23, 5) # Explanation: The maximum sum is 23 for the subarray [5, 4, -1, 7, 8]. ``` **Note:** - To solve this problem, the implementation should efficiently find both the maximum sum of a contiguous subarray and the length of the shortest subarray with that sum. - A common algorithm for finding the maximum sum of a contiguous subarray is `Kadane\'s Algorithm`. - An additional loop can keep track of the length of the shortest subarray which achieves this maximum sum.","solution":"from typing import List, Tuple def max_subarray_info(nums: List[int]) -> Tuple[int, int]: max_sum = float(\'-inf\') current_sum = 0 start = 0 min_length = float(\'inf\') for end in range(len(nums)): if current_sum <= 0: current_sum = nums[end] start = end else: current_sum += nums[end] if current_sum > max_sum: max_sum = current_sum min_length = end - start + 1 elif current_sum == max_sum: min_length = min(min_length, end - start + 1) return max_sum, min_length"},{"question":"You are given a strong consistent string in which every letter appears the same number of times consecutively. You need to compress the string using the count of consecutive characters. Specifically, for each group of consecutively repeating characters, you should output the character followed by the number of times it repeats consecutively. If a character repeats only once, it should be written without a count. The first line contains a single integer t (1 ≤ t ≤ 100), the number of test cases. Each of the next t lines contains a single strong consistent string `str` of length not exceeding 10000. For each test case, print the compressed version of the given string. # Examples Input: 3 aaabbbcccaaa aabbaacc zzzzzzz Output: a3b3c3a3 a2b2a2c2 z7 # Explanation 1. In the first example, \\"aaa\\" becomes \\"a3\\", \\"bbb\\" becomes \\"b3\\", \\"ccc\\" becomes \\"c3\\", and \\"aaa\\" becomes \\"a3\\", resulting in \\"a3b3c3a3\\". 2. In the second example, \\"aa\\" becomes \\"a2\\", \\"bb\\" becomes \\"b2\\", \\"aa\\" becomes \\"a2\\", and \\"cc\\" becomes \\"c2\\", resulting in \\"a2b2a2c2\\". 3. In the third example, \\"zzzzzzz\\" becomes \\"z7\\".","solution":"def compress_string(t, strings): This function takes in an integer t and a list of strings, compresses each string according to the specified rules, and returns a list of compressed strings. :param t: Number of strings (test cases) :param strings: List of strong consistent strings to be compressed :return: List of compressed strings results = [] for s in strings: compressed = \\"\\" i = 0 while i < len(s): count = 1 while i + 1 < len(s) and s[i] == s[i + 1]: i += 1 count += 1 compressed += s[i] + (str(count) if count > 1 else \\"\\") i += 1 results.append(compressed) return results # Example usage # t = 3 # strings = [\\"aaabbbcccaaa\\", \\"aabbaacc\\", \\"zzzzzzz\\"] # compress_string(t, strings)"},{"question":"You are a developer working at a company that processes large amounts of continuous data streams. To ensure efficient data processing and analysis, you are required to implement a sliding window maximum algorithm. Given an integer array `nums` and an integer `k`, you need to create a function that finds the maximum value in each sliding window of size `k` moving from the beginning of the array to the end. The sliding window starts from the beginning of the array, slides one element to the right, and repeats this process until it reaches the end of the array. The function should return an array containing the maximum values from each window position. # Example: Input: ``` nums = [1, 3, -1, -3, 5, 3, 6, 7] k = 3 ``` Output: ``` [3, 3, 5, 5, 6, 7] ``` # Constraints: - The length of `nums` will be in the range [1, 100000]. - -10000 ≤ `nums[i]` ≤ 10000 - 1 ≤ `k` ≤ length of `nums` # Function Signature: ```python def max_sliding_window(nums: List[int], k: int) -> List[int]: # Your code here ``` # Example Analysis: - For the window starting at index 0 (values are [1, 3, -1]), the maximum value is 3. - For the window starting at index 1 (values are [3, -1, -3]), the maximum value is 3. - For the window starting at index 2 (values are [-1, -3, 5]), the maximum value is 5. - Continue this process for each window position to obtain the result array. # Tips: - Think about an efficient way to keep track of the maximum values without having to re-evaluate the entire window for each step. Consider advanced data structures like deques to maintain a list of potential maximum elements.","solution":"from collections import deque from typing import List def max_sliding_window(nums: List[int], k: int) -> List[int]: Finds the maximum value in each sliding window of size `k` moving from the beginning of the array `nums` to the end. dq = deque() result = [] for i, num in enumerate(nums): # Remove elements out of this window from the deque if dq and dq[0] < i - k + 1: dq.popleft() # Remove all elements smaller than the currently considered element while dq and nums[dq[-1]] < num: dq.pop() # Add the current element index to the deque dq.append(i) # If we have formed at least one complete window, record its maximum if i >= k - 1: result.append(nums[dq[0]]) return result"},{"question":"There is a large rectangular field with dimensions n times m. Each cell in the field contains a non-negative integer value representing the height of grass at that cell. You need to help a lawnmower robot decide which path to take to maximize the amount of grass it cuts. The robot starts from the top-left corner of the field (1,1) and can only move right or down at each step until it reaches the bottom-right corner (n,m). The robot cuts the grass from every cell it visits, including the starting and ending cells. Write a program to determine the maximum amount of grass the robot can cut on its way from the top-left to the bottom-right of the field. **Input Format:** - The first line contains two integers n and m (1 le n, m le 500) — the dimensions of the field. - Each of the next n lines contains m integers giving the height of the grass at each cell a_{ij} (0 le a_{ij} le 100). **Output Format:** - Print a single integer — the maximum amount of grass the robot can cut on its way from the top-left to the bottom-right of the field. **Example:** Input: ``` 3 3 1 2 3 4 5 6 7 8 9 ``` Output: ``` 29 ``` Explanation: The robot starts at a_{1,1} with height 1, cuts the grass at a_{1,2} (2), then a_{1,3} (3), a_{2,3} (6), and so on. The path that maximizes the amount of grass cut is: 1 → 2 → 3 → 6 → 9, for a total of 1 + 2 + 3 + 6 + 9 = 21.","solution":"def max_grass_cut(n, m, field): # Create a DP table to store the maximum grass cut up to each cell dp = [[0] * m for _ in range(n)] # Initialize the start position dp[0][0] = field[0][0] # Fill the first row (can only come from the left) for j in range(1, m): dp[0][j] = dp[0][j-1] + field[0][j] # Fill the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i-1][0] + field[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + field[i][j] # The bottom-right corner will have the maximum grass cut return dp[-1][-1]"},{"question":"A company is organizing a sequence of workshops with n sessions (1 ≤ n ≤ 2·10^5). Each session i has a unique difficulty level di (1 ≤ di ≤ 10^6). They want to organize the sessions such that the difference in difficulty levels between any two consecutive sessions is minimized. You are required to arrange the sessions and determine the minimum possible maximum difference between the difficulties of any two consecutive sessions. # Input - The first line contains a single integer n. - The second line contains n integers d1, d2, ..., dn, denoting the difficulty level of each session. # Output - Output the minimum possible maximum difference between the difficulties of any two consecutive sessions. # Example Input ``` 4 1 5 9 13 ``` Output ``` 4 ``` # Explanation By arranging the sessions in the order 1, 5, 9, 13, the maximum difference between consecutive sessions is |5-1| = 4, |9-5| = 4, and |13-9| = 4. Thus, the minimum possible maximum difference is 4.","solution":"def min_max_diff(n, difficulties): Returns the minimum possible maximum difference between the difficulties of any two consecutive sessions. # Sort the difficulty levels in ascending order sorted_difficulties = sorted(difficulties) # Initialize the minimum possible maximum difference to a large number min_possible_max_diff = float(\'inf\') # Iterate through the sorted list and find the maximum difference between consecutive elements for i in range(1, n): diff = sorted_difficulties[i] - sorted_difficulties[i - 1] min_possible_max_diff = min(min_possible_max_diff, diff) return min_possible_max_diff"},{"question":"In a magical kingdom, there are n castles connected by m roads. Each road has a certain length, and exactly one road exists between each pair of castles. The kingdom\'s ruler, King Arnav, wants to organize a grand parade that can pass through the roads in the kingdom. However, King Arnav wishes to optimize the parade route such that the total length of the roads used is minimized. King Arnav has consulted his royal advisors, and they suggest using a specific algorithm. Unfortunately, King Arnav is too busy planning the festivities and needs your help to determine the minimal total length of the roads required for the parade route. The first line of input contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 5000) — the number of castles and the number of roads, respectively. The next m lines describe the roads. Each road is given as three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000) — the castles connected by this road and its length. All roads are bidirectional. You are to output a single integer, the minimal total length of the roads required for the parade. Example: Input: 4 5 1 2 3 2 3 4 3 4 2 4 1 6 1 3 5 Output: 9 Explanation: The minimal total length of the roads required for the parade can be achieved by selecting the roads with lengths 3, 4, and 2, summing up to 9.","solution":"def kruskal_minimum_spanning_tree(n, roads): parent = list(range(n)) rank = [0] * n def find(node): if parent[node] != node: parent[node] = find(parent[node]) return parent[node] def union(node1, node2): root1 = find(node1) root2 = find(node2) if root1 != root2: if rank[root1] > rank[root2]: parent[root2] = root1 elif rank[root1] < rank[root2]: parent[root1] = root2 else: parent[root2] = root1 rank[root1] += 1 roads.sort(key=lambda road: road[2]) minimal_weight_sum = 0 for u, v, w in roads: if find(u - 1) != find(v - 1): union(u - 1, v - 1) minimal_weight_sum += w return minimal_weight_sum def minimal_parade_length(n, m, road_data): roads = [] for data in road_data: u, v, w = data roads.append((u, v, w)) return kruskal_minimum_spanning_tree(n, roads)"},{"question":"You are given a sequence of integers a_1, a_2, ldots, a_n and a series of q queries. Each query consists of three integers: l, r, and x. For each query, your task is to find the minimum number of operations needed to make the segment of the array from index l to index r inclusive contain at least one element equal to x. In one operation, you can increment any element in the array by 1. The first line contains two integers n and q (1 le n, q le 10^5) — the length of the array and the number of queries. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the array. Each of the next q lines contains three integers l, r, and x (1 le l le r le n, 1 le x le 10^9) — the parameters of the query. Output q lines, each containing a single integer — the minimum number of operations needed for each query. If it is impossible to make any element in the given segment equal to x, print -1. # Example: Input: ``` 5 3 1 2 3 4 5 1 3 2 2 5 8 1 5 10 ``` Output: ``` 0 3 5 ``` # Explanation: 1. In the first query, the segment is [1, 2, 3]. Element 2 is already present in the segment, so the minimum number of operations needed is 0. 2. In the second query, the segment is [2, 3, 4, 5]. The closest element is 5, but to reach 8, you need at least 3 operations. 3. In the third query, the segment is [1, 2, 3, 4, 5]. The closest element is 5, but to reach 10, you need at least 5 operations.","solution":"def min_operations_to_equal(l, r, x, a): Returns the minimum number of operations to make any element in the segment [l, r] equal to x. If it\'s impossible, returns -1. min_ops = float(\'inf\') possible = False for i in range(l - 1, r): difference = x - a[i] if difference >= 0: min_ops = min(min_ops, difference) possible = True return min_ops if possible else -1 def process_queries(n, q, array, queries): Processes a list of queries on the given array and returns the results as a list. results = [] for query in queries: l, r, x = query results.append(min_operations_to_equal(l, r, x, array)) return results"},{"question":"You are given an array of integers, you need to perform the following type of operation until the array becomes non-decreasing: 1. Pick a subarray consisting of exactly three consecutive elements and sort it in non-decreasing order. You need to determine the minimum number of operations required to sort the whole array in non-decreasing order. If it is not possible to sort the array using the given operations, return -1. **Input:** - A single integer n (1 le n le 10^5) — the number of elements in the array. - A single line containing n integers (1 le a_i le 10^9) — the elements of the array. **Output:** - A single integer representing the minimum number of operations required, or -1 if it is not possible to sort the array using the given operations. **Example:** ``` Input: 4 3 2 1 4 Output: 1 Input: 3 3 2 1 Output: 1 Input: 5 1 5 3 2 4 Output: 3 ```","solution":"def min_operations_to_sort(n, arr): def is_sorted(arr): for i in range(1, len(arr)): if arr[i] < arr[i - 1]: return False return True # If array is already sorted, no operation needed. if is_sorted(arr): return 0 operations = 0 max_operations = 2 * n # An upper bound to prevent infinite loop (large enough). while not is_sorted(arr) and operations < max_operations: for i in range(n - 2): subarray = sorted(arr[i:i + 3]) if arr[i:i + 3] != subarray: arr[i:i + 3] = subarray operations += 1 break else: # If we could not perform any operation in the whole pass, # and the array is still not sorted, it\'s impossible. return -1 return operations if is_sorted(arr) else -1"},{"question":"You are given a list of integers. You need to write a function that identifies and returns the subarray (non-empty contiguous subsequence) which has the largest sum among all possible subarrays. In the input, the first line contains an integer n (1 le n le 10^5) — the length of the array. In the second line, there are n integers a_i (-10^4 le a_i le 10^4) representing the elements of the array. In the output, print the maximum possible sum of any subarray. In the first sample, the subarray with the maximum sum is [4, -1, 2, 1], and its sum is 6. In the second sample, the subarray with the maximum sum is [1, 2, 3, 4, 5], and its sum is 15. Example: Input: 8 -2 1 -3 4 -1 2 1 -5 4 Output: 6 Input: 5 1 2 3 4 5 Output: 15","solution":"def max_subarray_sum(arr): Returns the maximum sum of any non-empty contiguous subarray. if not arr: return 0 # Initialize current and maximum sums to the first element current_sum = max_sum = arr[0] for num in arr[1:]: # Update current sum, either start a new subarray or continue the current one current_sum = max(num, current_sum + num) # Update the maximum sum found so far max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function that accepts an integer list as input and returns a list of integers where each element is the sum of three consecutive elements from the original list. If there are fewer than three elements left at the end, those elements should be ignored. # Input - A list of integers [a_1, a_2, ldots, a_n] where 1 le n le 1000 and each integer is between -1000 leq a_i leq 1000. # Output - A list of integers containing the sums of every three consecutive elements from the input list. # Example **Input:** ``` [1, 2, 3, 4, 5] ``` **Output:** ``` [6, 9, 12] ``` **Explanation:** The list [1, 2, 3, 4, 5] is processed by summing every three consecutive elements: - 1+2+3 = 6 - 2+3+4 = 9 - 3+4+5 = 12 Thus, the output is [6, 9, 12]. Elements 4 and 5 do not form a complete group of three so they are ignored.","solution":"def sum_of_three_consecutive_elements(lst): Returns a list where each element is the sum of three consecutive elements from the input list. If there are fewer than three elements left at the end, those elements are ignored. result = [] for i in range(len(lst) - 2): sum_of_three = lst[i] + lst[i + 1] + lst[i + 2] result.append(sum_of_three) return result"},{"question":"The Guardians of Artefacts have hidden a precious artefact in one of the cells of a 2D grid with dimensions n x m. Each cell of this grid is either empty or contains the artefact. The objective of the challenge is to help the treasure seeker locate the artefact by asking a limited number of queries. The seeker can ask a query which provides the Manhattan distance from a particular cell (i,j) to the cell containing the artefact. The Manhattan distance between two cells (x1, y1) and (x2, y2) is given by |x1 - x2| + |y1 - y2|. You are required to write a function `find_artefact` that will interact with the grid and locate the artefact using no more than 75 queries. The function should have the following signature: ```python def find_artefact(n: int, m: int, ask_query: callable) -> (int, int): :param n: number of rows in the grid (1 ≤ n ≤ 100) :param m: number of columns in the grid (1 ≤ m ≤ 100) :param ask_query: a function to query the Manhattan distance from a specific cell to the artefact. The function must have the following signature: ask_query(i: int, j: int) -> int, where (i, j) is the queried cell (1 ≤ i ≤ n, 1 ≤ j ≤ m), and returns the Manhattan distance. :return: a tuple (x, y) representing the coordinates of the cell containing the artefact (1 ≤ x ≤ n, 1 ≤ y ≤ m) pass ``` # Input Format: - `n` and `m` are integers representing the number of rows and columns in the grid, respectively. - The function `ask_query(i, j)` can be called to query the Manhattan distance from cell (i, j) to the artefact. It returns an integer which is the distance. # Constraints: - The maximum number of queries allowed is 75. - 1 ≤ n, m ≤ 100 # Output Format: The function should return a tuple (x, y) where (x, y) are the coordinates of the cell containing the artefact within the given constraints. # Example: ```python n, m = 5, 5 # Number of rows and columns # Definition of the query function def ask_query(i, j): artefact_position = (3, 4) return abs(i - artefact_position[0]) + abs(j - artefact_position[1]) # Driver code position = find_artefact(n, m, ask_query) print(position) # Output should be (3, 4) ``` # Note: - The solution will not have direct access to the internal state of the hidden grid. - Optimizing the number of queries to locate the artefact is part of the challenge.","solution":"def find_artefact(n: int, m: int, ask_query: callable) -> (int, int): Uses a binary search approach to locate the artefact with minimal queries. :param n: number of rows in the grid (1 ≤ n ≤ 100) :param m: number of columns in the grid (1 ≤ m ≤ 100) :param ask_query: a function to query the Manhattan distance from a specific cell to the artefact. The function must have the following signature: ask_query(i: int, j: int) -> int, where (i, j) is the queried cell (1 ≤ i ≤ n, 1 ≤ j ≤ m), and returns the Manhattan distance. :return: a tuple (x, y) representing the coordinates of the cell containing the artefact (1 ≤ x ≤ n, 1 ≤ y ≤ m) def binary_search(start, end, fixed, vertical): while start < end: mid = (start + end) // 2 if vertical: d1 = ask_query(mid, fixed) d2 = ask_query(mid + 1, fixed) else: d1 = ask_query(fixed, mid) d2 = ask_query(fixed, mid + 1) if d1 < d2: end = mid else: start = mid + 1 return start if n == 1 and m == 1: return (1, 1) if n == 1: y = binary_search(1, m, 1, False) return (1, y) if m == 1: x = binary_search(1, n, 1, True) return (x, 1) x_guess = binary_search(1, n, 1, True) y_guess = binary_search(1, m, 1, False) return (x_guess, y_guess)"},{"question":"You have a collection of badges, each with a unique positive integer value. You want to create a combination of badges such that the sum of their values equals exactly `S`. However, you can only use each badge value once per combination. Write a function that determines the number of distinct combinations of badges that sum up to `S`. If no such combination is possible, the function should return 0. # Input: The input consists of two parts: 1. A list of positive integers representing the values of the badges. 2. A single positive integer `S` representing the target sum. # Output: The function should return a single integer representing the number of distinct combinations of badge values that add up to exactly `S`. # Examples: ```python def count_combinations(badges, S): # Your implementation here # Example 1: # Input: badges = [1, 2, 3, 4, 5] S = 5 # Output: 3 # Explanation: The possible combinations are [5], [1, 4], and [2, 3]. # Example 2: # Input: badges = [2, 3, 5, 7] S = 8 # Output: 1 # Explanation: The only combination is [3, 5]. # Example 3: # Input: badges = [2, 4, 6] S = 5 # Output: 0 # Explanation: There are no combinations that sum to 5. ```","solution":"from itertools import combinations def count_combinations(badges, S): Determines the number of distinct combinations of badge values that sum up to exactly S. Args: badges (list): List of positive integers representing the badge values. S (int): The target sum. Returns: int: The number of combinations that add up to exactly S. count = 0 for r in range(1, len(badges) + 1): for comb in combinations(badges, r): if sum(comb) == S: count += 1 return count"},{"question":"You are tasked with creating a tool to help students manage their assignments. Each assignment has a deadline and a completion time. Given the deadlines and the required times to complete, determine if a student can finish all assignments without missing any deadlines if they start working on the assignments in any order. The input starts with a single integer n (1 ≤ n ≤ 1000) — the number of assignments. Each of the next n lines contains two integers di and ti (1 ≤ di, ti ≤ 1000) — the deadline and the time required to complete the i-th assignment respectively. Output \\"YES\\" if the student can complete all assignments on time, otherwise output \\"NO\\". **Example:** Input: ``` 3 5 2 3 1 7 3 ``` Output: ``` YES ``` Input: ``` 3 4 3 3 2 2 1 ``` Output: ``` NO ``` **Explanation:** In the first example, the student can order their assignments in a way such as starting with the assignment with completion time of 1 (which has a deadline of 3), then the assignment with completion time of 2 (deadline 5), and finally the assignment with completion time of 3 (deadline 7). This order ensures no deadlines are missed. In the second example, it’s impossible to complete the assignments within their deadlines, even if the student tries different orders.","solution":"def can_complete_assignments(n, assignments): Determines if the assignments can be completed without missing any deadlines. Parameters: n (int): Number of assignments. assignments (list of tuples): Each tuple contains two integers - deadline and time required. Returns: str: \\"YES\\" if all assignments can be completed on time, otherwise \\"NO\\". # Sort assignments by deadline assignments.sort(key=lambda x: x[0]) current_time = 0 for deadline, time_required in assignments: current_time += time_required if current_time > deadline: return \\"NO\\" return \\"YES\\""},{"question":"Style Given an integer ( n ) which represents the number of rows and columns of a square grid. Each cell in the grid can either contain a \'G\' (grass) or \'R\' (rock). The objective is to identify a path from the top-left corner to the bottom-right corner of the grid such that you only step on \'G\' cells and you minimize the number of total steps taken. You can move in four possible directions: up, down, left, or right. Your task is to write a function to find the length of the shortest path. If there is no such path, return -1. # Input The first line contains an integer ( n ) (1 ≤ ( n ) ≤ 50) — the size of the grid. The following ( n ) lines contain ( n ) characters each (either \'G\' or \'R\'), representing the grid. # Output Print a single integer — the length of the shortest path from the top-left to the bottom-right corner stepping only on \'G\' cells. If no such path exists, print -1. # Example Input ``` 4 GGGR RGRG GGGG RGRG ``` Output ``` 6 ``` Input ``` 3 GRG RRR GGG ``` Output ``` -1 ```","solution":"from collections import deque def shortest_path(n, grid): # Direction vectors for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] if grid[0][0] == \'R\' or grid[n-1][n-1] == \'R\': # If start or end is \'R\' return -1 queue = deque([(0, 0, 0)]) # (x, y, distance) visited = [[False] * n for _ in range(n)] visited[0][0] = True while queue: x, y, distance = queue.popleft() if x == n-1 and y == n-1: # Reached end return distance for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] == \'G\' and not visited[nx][ny]: visited[nx][ny] = True queue.append((nx, ny, distance + 1)) return -1 # Path not found"},{"question":"A group of hyenas are learning to communicate with each other using a special language consisting of strings of lower-case English letters. They have a unique way of defining the similarity between two strings. Two strings are considered similar if they can be obtained from each other through a series of operations. The operations allowed are: 1. Swapping any two adjacent characters in the string. 2. Reversing any substring of the string. Given two strings, s1 and s2, of equal length, the hyenas want to know if the strings are similar according to their special definition. Write a function to determine if s1 and s2 are similar. # Input - The first line contains a single integer n (1 ≤ n ≤ 100,000) — the length of the strings. - The second line contains the string s1. - The third line contains the string s2. # Output - Output \\"YES\\" if s1 and s2 are similar according to the hyenas\' definition. - Output \\"NO\\" otherwise. # Example Input ``` 4 abcd dcba ``` Output ``` YES ``` Input ``` 5 abcde aedcb ``` Output ``` NO ``` Explanation: In the first example, s1 can be converted to s2 by reversing the entire string. In the second example, no sequence of allowed operations can transform s1 into s2.","solution":"from collections import Counter def are_similar(s1, s2): Determines if two strings s1 and s2 are similar based on the allowed operations. return Counter(s1) == Counter(s2)"},{"question":"Using an array of integers, write a function to determine the longest increasing subsequence (LIS). The function should take an array of integers as input and return the length of the LIS. An increasing subsequence is a subsequence where each element is strictly greater than the preceding element. Input: - The first line contains an integer n, which is the length of the input array. - The second line contains n space-separated integers, representing the elements of the array. Output: - Output the length of the longest increasing subsequence. Example: Input: 6 10 9 2 5 3 7 101 18 Output: 4 Explanation: The longest increasing subsequence is [2, 3, 7, 101], hence the answer is 4.","solution":"def length_of_LIS(nums): Returns the length of the longest increasing subsequence in the array. if not nums: return 0 dp = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"You are developing a new mobile game that involves planting and harvesting in a garden. The garden is a grid with n rows and m columns. Each cell in the grid can either be empty or contain a plant. Each type of plant occupies some continuous range of cells. Given the garden state, you need to output the number of different types of plant species present. Each plant species can occupy multiple patches, but all patches of the same species contain cells with the same numeric ID. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the garden grid. The next n lines contain m characters each: \'.\', denoting an empty cell, or a digit from \'0\' to \'9\', indicating the plant ID in that cell. Your task is to find out and print the number of different plant species present in the garden. **Example** Input: ``` 4 5 1..23 ..123 11.23 1112. ``` Output: ``` 4 ``` In the given example, there are 4 unique plant species: \'1\', \'2\', \'3\', and \'2\' again (patches are considered as a single species if they have the same digit).","solution":"def count_unique_plant_species(garden): Returns the number of different plant species in the garden. :param garden: List[List[str]], the garden grid where each cell can be \'.\', \'0\'-\'9\'. :return: int, number of unique plant species. unique_species = set() for row in garden: for cell in row: if cell != \'.\': unique_species.add(cell) return len(unique_species)"},{"question":"A company wants to analyze sales performance of its products by checking that there is a balanced distribution of sales across different regions. If a product is too popular in one region compared to others, it may indicate issues in distribution or marketing. You are given sales data for a product across different regions. The task is to determine if there is any single region where the product sales exceed 50% of the total sales. The first line of input contains an integer n (1 ≤ n ≤ 10^5) — the number of regions. The second line contains n integers — the sales numbers for each region. Print \\"UNBALANCED\\" if there is a single region where sales exceed 50% of the total sales, otherwise print \\"BALANCED\\". For example, given the following input: 3 10 20 30 The total sales are 60, and no region has sales greater than 30 (which is 50% of 60). Therefore the output should be: BALANCED However, if the input was: 5 10 40 10 5 5 The total sales are 70, with one region having sales of 40, which is more than 50% of 70. Therefore the output should be: UNBALANCED","solution":"def analyze_sales_balance(n, sales): Determine if any single region has sales exceeding 50% of the total sales. Args: n (int): Number of regions. sales (list of ints): Sales numbers for each region. Returns: str: \\"BALANCED\\" or \\"UNBALANCED\\" based on the analysis. total_sales = sum(sales) for sale in sales: if sale > total_sales / 2: return \\"UNBALANCED\\" return \\"BALANCED\\""},{"question":"Martina loves numbers and geometry. She has a special interest in triangles, particularly finding out relationships between their sides. She came across a puzzle where she needs to determine if three given lengths can form a triangle. If they can, she needs to further find whether it is an equilateral triangle, an isosceles triangle, or a scalene triangle. Write a program to help Martina with her puzzle. The program should read the lengths of three sides of a triangle and determine: 1. Whether those lengths can form a triangle. 2. If they can form a triangle, the program should specify whether the triangle is equilateral, isosceles, or scalene. The input consists of three positive integers a, b, and c (1 ≤ a, b, c ≤ 10^3) representing the lengths of the three sides of a triangle. Output a single line: - Print \\"Not a triangle\\" if the given lengths cannot form a triangle. - If the sides can form a triangle, print \\"Equilateral\\" if it is an equilateral triangle, \\"Isosceles\\" if it is an isosceles triangle, or \\"Scalene\\" if it is a scalene triangle. # Examples: Example 1: **Input:** 3 3 3 **Output:** Equilateral Example 2: **Input:** 4 4 7 **Output:** Isosceles Example 3: **Input:** 5 9 12 **Output:** Scalene Example 4: **Input:** 1 1 3 **Output:** Not a triangle # Notes: - A triangle can be formed if and only if the sum of any two sides is greater than the third side. - An equilateral triangle has all three sides equal. - An isosceles triangle has exactly two sides equal. - A scalene triangle has all sides of different lengths.","solution":"def identify_triangle(a, b, c): Determine if three given lengths can form a triangle and if so, classify the type of triangle. Parameters: a (int): length of the first side b (int): length of the second side c (int): length of the third side Returns: str: Description of the triangle or not a triangle # Check if the lengths can form a triangle using the triangle inequality theorem if a + b > c and a + c > b and b + c > a: if a == b == c: return \\"Equilateral\\" elif a == b or a == c or b == c: return \\"Isosceles\\" else: return \\"Scalene\\" else: return \\"Not a triangle\\""},{"question":"Given an array of integers a[1], a[2], ..., a[n], and a number k, find all contiguous subarrays of length exactly k that can be formed from the array. For each subarray, calculate the maximum value. Return an array of these maximum values. The first line contains two integers n and k (1 ≤ n ≤ 100000, 1 ≤ k ≤ n), denoting the number of elements in the array and the length of the subarrays to consider, respectively. The second line contains n space-separated integers a[1], a[2], ..., a[n] (1 ≤ a[i] ≤ 100000) — the elements of the array. Print a single line containing n - k + 1 space-separated integers, where the i-th integer is the maximum value in the i-th subarray of length k. Example: Input: 7 3 1 3 5 2 8 7 3 Output: 5 5 8 8 8","solution":"from collections import deque def max_of_subarrays(arr, n, k): Find all contiguous subarrays of length exactly k and return their maximum values. param arr: List of integers param n: Length of the array param k: Length of the subarrays return: List of integers if k == 1: return arr result = [] dq = deque() for i in range(k): while dq and arr[dq[-1]] < arr[i]: dq.pop() dq.append(i) for i in range(k, n): result.append(arr[dq[0]]) while dq and dq[0] <= i - k: dq.popleft() while dq and arr[dq[-1]] < arr[i]: dq.pop() dq.append(i) result.append(arr[dq[0]]) return result"},{"question":"You are given an array of integers representing the positions of N elements on a 1-dimensional number line (not necessarily sorted). Each element can move to any adjacent position (i.e., an element at position `x` can move to position `x-1` or `x+1`) as many times as needed. Your task is to calculate the minimum total number of moves required to make all elements occupy the same position on the number line, i.e., to converge all elements into a single position. For instance, if the elements are initially at positions [4, 7, 7, 1, 3], one possible way to make them all meet at position 4 would involve: - Moving the element at position 1 to position 4 (3 moves) - The element at position 3 moving to position 4 (1 move) - Moving the two elements at position 7 to position 4 (3 moves each) The total number of moves needed in this case would be 10. Input: - The first line contains an integer N (1 <= N <= 100,000) - the number of elements. - The second line contains N integers representing the initial positions of the elements on the number line. The positions are guaranteed to be within the range [-10^9, 10^9]. Output: - A single integer, the minimum total number of moves required to make all elements converge to a single position. Example: Input: ``` 5 4 7 7 1 3 ``` Output: ``` 10 ``` Explanation: The optimal meeting point is position 4. The moves required are: - Move from 1 to 4: 3 moves - Move from 3 to 4: 1 move - Move from 7 to 4: 3 moves - Move from 7 to 4: 3 moves Thus, the total minimum moves required are 10.","solution":"def minimum_moves_to_converge(positions): Finds the minimum total number of moves required to make all elements occupy the same position on the number line. # Sorting the positions to find the median positions.sort() # Finding the median N = len(positions) median_position = positions[N // 2] # Calculating total moves total_moves = sum(abs(pos - median_position) for pos in positions) return total_moves"},{"question":"You are given two strings, s and t. The string t is formed by shuffling the characters in string s and then adding one additional character at a random position. Write an efficient program to find the additional character that was added to t. The first line contains the string s of length n (1 le n le 10^5), consisting of lowercase English letters. The second line contains the string t of length n+1, also consisting of lowercase English letters. Print the additional character that was added to form t from s. # Example: Input: ``` abcd abcde ``` Output: ``` e ```","solution":"def find_additional_character(s, t): Given two strings `s` and `t`, where `t` is formed by shuffling characters of `s` and adding one extra character, this function finds and returns the additional character. # Use a dictionary to count the occurrences of each character in both strings char_count = {} # Count characters in string `t` for char in t: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Subtract the count by characters in string `s` for char in s: if char in char_count: char_count[char] -= 1 # The character with a count of 1 is the additional character for char in char_count: if char_count[char] == 1: return char"},{"question":"Anna and her team are working on a project that involves connecting servers in a data center. The data center consists of a series of servers lined up in a row, each represented by a node. The servers are connected by possibly directed cables, represented as edges between the nodes. Anna wants to determine if it is possible to send data from the first server (node 1) to the last server (node n) using the available connections. The servers are numbered from 1 to n. Some servers may not be directly connected to each other, making it necessary to traverse intermediate servers to reach the destination. Write a program that determines if there is a path from the first server (node 1) to the last server (node n) given the directed connections. The first line of the input contains two integers, n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000), representing the number of servers and the number of directed connections, respectively. The next m lines each contain two integers, u and v (1 ≤ u, v ≤ n), indicating a directed connection from server u to server v. Output \\"YES\\" (quotes for clarity) if there is a path from the first server to the last server, and \\"NO\\" (quotes for clarity) otherwise. Example: Input: ``` 3 3 1 2 2 3 3 1 ``` Output: ``` YES ``` Input: ``` 4 2 1 2 3 4 ``` Output: ``` NO ``` In the first example, there is a path from server 1 to server 3 through server 2. In the second example, there are no paths from server 1 to server 4.","solution":"def is_path_from_first_to_last_server(n, m, connections): from collections import defaultdict, deque graph = defaultdict(list) for u, v in connections: graph[u].append(v) def bfs(start, goal): queue = deque([start]) visited = set([start]) while queue: current = queue.popleft() if current == goal: return True for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return False return \\"YES\\" if bfs(1, n) else \\"NO\\""},{"question":"You are given a string of lowercase Latin letters and your task is to find the length of the longest substring that can be rearranged to form a palindrome. A string can be rearranged to form a palindrome if and only if at most one character has an odd frequency and all other characters have even frequencies. Write a function that takes a string as input and returns the length of the longest substring that can be rearranged to form a palindrome. Your function should have the following signature: ```python def longest_palindromic_substring_length(s: str) -> int: ``` # Input - A string `s` consisting of lowercase Latin letters (`1 ≤ len(s) ≤ 100000`). # Output - A single integer representing the length of the longest substring that can be rearranged to form a palindrome. # Example ```python assert longest_palindromic_substring_length(\\"abccccdd\\") == 7 assert longest_palindromic_substring_length(\\"aabbcc\\") == 6 assert longest_palindromic_substring_length(\\"abc\\") == 1 ``` # Explanation 1. For the string `\\"abccccdd\\"`, the longest substring that can be rearranged to form a palindrome is `\\"dccaccd\\"`, which has a length of 7. 2. For the string `\\"aabbcc\\"`, all characters have even frequencies, so the longest possible palindromic substring is the entire string, resulting in a length of 6. 3. For the string `\\"abc\\"`, no two characters are the same, so the longest substring that can be rearranged to form a palindrome is any single character, giving a length of 1.","solution":"from collections import Counter def longest_palindromic_substring_length(s: str) -> int: Finds the length of the longest substring that can be rearranged to form a palindrome. char_count = Counter(s) length = 0 odd_found = False for count in char_count.values(): if count % 2 == 0: length += count else: length += count - 1 odd_found = True if odd_found: length += 1 # One odd character can be placed in the center of the palindrome return length"},{"question":"Given a connected undirected graph with N nodes and M edges, where each node has a certain value associated with it, you need to find the maximum value of the total weight of any path in the graph. A path can be defined as a sequence of edges connecting a sequence of vertices, where each edge is used at most once. The input starts with two integers N and M (2 ≤ N ≤ 100000, 1 ≤ M ≤ 200000). The next line contains N space-separated integers representing the values associated with the nodes (1 ≤ value ≤ 1000). The following M lines contain two integers u and v (1 ≤ u, v ≤ N) representing an edge between nodes u and v. Your task is to output an integer representing the maximum total weight of any path in the graph. # Input: ``` 5 5 3 2 1 4 5 1 2 2 3 3 4 4 5 1 5 ``` # Output: ``` 15 ``` # Explanation: In this example, the path with the maximum total weight is 1 -> 2 -> 3 -> 4 -> 5 with a total weight of 3 + 2 + 1 + 4 + 5 = 15. # Note: If there are multiple paths with the maximum total weight, any one of them should be returned. The graph is guaranteed to be connected, so there will always be at least one valid path. Be aware that the graph can contain cycles, so the answer must ensure each edge is used at most once per path calculation.","solution":"from collections import defaultdict import sys def dfs(node, graph, values, visited): visited[node] = True max_total_weight = values[node - 1] max_individual_path = 0 for neighbor in graph[node]: if not visited[neighbor]: weight = dfs(neighbor, graph, values, visited) if weight > max_individual_path: max_individual_path = weight visited[node] = False # Backtracking return max_total_weight + max_individual_path def max_total_weight(N, M, values, edges): graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) max_weight = -sys.maxsize visited = [False] * (N + 1) for node in range(1, N + 1): weight = dfs(node, graph, values, visited) if weight > max_weight: max_weight = weight return max_weight # Example for function usage N = 5 M = 5 values = [3, 2, 1, 4, 5] edges = [(1, 2), (2, 3), (3, 4), (4, 5), (1, 5)] print(max_total_weight(N, M, values, edges)) # Output: 15"},{"question":"You are given a rectangular grid of size n x m and each cell of the grid is either empty (given as \'.\') or blocked (given as \'#\'). Your task is to find the number of distinct islands in the grid. An island is a maximal group of connected \'.\' cells. Two \'.\' cells are considered connected if and only if they are adjacent horizontally or vertically (not diagonally). Write a function `countIslands(grid: List[str]) -> int` that takes in the grid and returns the number of distinct islands. # Input - A list of strings `grid` where each string represents a row of the grid and each character in the string is either \'.\' or \'#\'. - 1 ≤ n, m ≤ 1000 # Output - An integer representing the number of distinct islands. # Example **Input:** ``` grid = [ \\"....\\", \\"..\\", \\"\\", \\".#..\\" ] ``` **Output:** ``` 3 ``` **Explanation:** In the given grid, there are three distinct islands of \'.\' cells: 1. The first island is the top row with four \'.\' cells. 2. The second island is the single \'.\' cell at the position (3, 1). 3. The third island is the last row, which has two \'.\' cells connected horizontally.","solution":"from typing import List def countIslands(grid: List[str]) -> int: rows = len(grid) cols = len(grid[0]) visited = [[False for _ in range(cols)] for _ in range(rows)] def dfs(r, c): if (r < 0 or r >= rows or c < 0 or c >= cols or grid[r][c] == \'#\' or visited[r][c]): return visited[r][c] = True # Visit all connected neighbors (up, down, left, right) dfs(r-1, c) dfs(r+1, c) dfs(r, c-1) dfs(r, c+1) count = 0 for r in range(rows): for c in range(cols): if grid[r][c] == \'.\' and not visited[r][c]: count += 1 dfs(r, c) return count"},{"question":"In a small town, there is a peculiar street where all the houses are arranged in a line. Each house has a certain amount of candy. The children living on this street trick-or-treat in a specific manner: they can only start trick-or-treating from one end of the street and then move to the other end, always moving from one house to the next adjacent house. However, they have a unique restriction: they can collect candy from a house only if they haven\'t collected candy from the immediately previous house, i.e., if they collect candy from house i, they cannot collect candy from house i+1. The goal is to find out the maximum amount of candy they can collect. Write a function to determine the maximum amount of candy the children can collect. Function Signature: ```python def max_candy(candies: List[int]) -> int: ``` # Input: - A list of integers `candies` where each integer represents the amount of candy in each respective house. The length of the list `n` is between 1 and 10000, inclusive. - 0 ≤ candies[i] ≤ 1000 # Output: - Return an integer which is the maximum amount of candy that can be collected following the given restriction. # Example: ```python # Example 1 candies = [1, 2, 3, 1] max_candy(candies) # returns 4 # Example 2 candies = [2, 7, 9, 3, 1] max_candy(candies) # returns 12 ``` # Note: In the first example, children can choose houses with 1 and 3 candies to collect maximum 4 candies. In the second example, they can choose houses with 2, 9, and 1 candies to collect maximum 12 candies.","solution":"from typing import List def max_candy(candies: List[int]) -> int: Returns the maximum amount of candy that can be collected. if not candies: return 0 n = len(candies) if n == 1: return candies[0] if n == 2: return max(candies[0], candies[1]) dp = [0] * n dp[0] = candies[0] dp[1] = max(candies[0], candies[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + candies[i]) return dp[n-1]"},{"question":"You are given a collection of books in a library. Each book is represented with its respective height. The librarian wants you to arrange the books such that specific criteria are met to maximize the number of books that appear \\"well-stacked\\". A book is considered \\"well-stacked\\" if it is shorter than both of its neighboring books: the one to the immediate left and the one to the immediate right. The first and the last books in the row cannot be considered \\"well-stacked\\". Your task is to determine the maximum number of \\"well-stacked\\" books that can be placed on the shelf, given that you can reorder the books in any way. You should also provide one of the possible arrangements that achieves this maximum number. # Input - The first line contains an integer n (1 leq n leq 10^5) — the number of books. - The second line contains n distinct integers h_1, h_2, dots, h_n (1 leq h_i leq 10^9) — the heights of the books. # Output - On the first line, print a single integer representing the maximum number of \\"well-stacked\\" books. - On the second line, print the heights of the books in one of the possible optimal orders. If there are multiple correct answers, you can print any of them. # Example Input ``` 6 1 3 5 2 4 6 ``` Output ``` 2 3 1 5 2 6 4 ``` In the example above, the books that are \\"well-stacked\\" in the output order are the ones with heights 1 and 2.","solution":"def max_well_stacked_books(n, heights): heights.sort() result = [0] * n low = 0 high = n - 1 for i in range(n): if i % 2 == 0: result[i] = heights[high] high -= 1 else: result[i] = heights[low] low += 1 well_stacked_count = 0 for i in range(1, n-1): if result[i-1] > result[i] and result[i+1] > result[i]: well_stacked_count += 1 return well_stacked_count, result # Example usage n = 6 heights = [1, 3, 5, 2, 4, 6] max_well_stacked_books(n, heights)"},{"question":"You are given an array of integers and asked to perform a series of operations on it. Each operation consists of selecting two elements and performing an action based on their values. The goal is to determine the maximum possible sum of the array after performing exactly a specified number of operations. # Problem Statement Given an array `arr` of length `n` and an integer `k`, your task is to find the maximum possible sum of the elements of the array after performing exactly `k` operations. In each operation, you can select any two elements `arr[i]` and `arr[j]` (where `i ≠ j`) and replace them with two new elements `⌊(arr[i] + arr[j]) / 2⌋` and `⌈(arr[i] + arr[j]) / 2⌉`. # Input - The first line contains two integers `n` (the number of elements in the list) and `k` (the number of operations) (1 ≤ n ≤ 100 and 0 ≤ k ≤ 100). - The second line contains `n` integers representing the array `arr` (-10^9 ≤ arr[i] ≤ 10^9). # Output - Print a single integer, the maximum possible sum of the array after exactly `k` operations. # Examples Example 1: **Input:** ``` 5 2 1 2 3 4 5 ``` **Output:** ``` 15 ``` **Explanation:** Initially, the sum is 15. As the number of operations `k` is 2, the maximum possible sum is still 15 after performing any two operations. Example 2: **Input:** ``` 3 1 1 10 3 ``` **Output:** ``` 12 ``` **Explanation:** One possible operation is to replace `10` and `3` with `6` and `7`. After this operation, the array becomes `[1, 6, 7]`, and the sum is 14. # Notes - If `k` is 0, simply return the sum of the original array. - The operations may not necessarily maximize the sum directly but need to result in the largest possible sum after exactly `k` operations. Implement an efficient algorithm to solve this problem taking into consideration the constraints provided.","solution":"import math def max_possible_sum_after_operations(n, k, arr): Computes the maximum possible sum of the array after performing exactly k operations. :param n: int - the number of elements in the list :param k: int - the number of operations :param arr: list of int - array of numbers :return: int - the maximum possible sum after k operations # As k operations will be performed, first calculate the current sum of the array current_sum = sum(arr) # If no operations are to be performed, return the current sum of the array if k == 0: return current_sum # The largest possible sum won\'t change as the operation (floor, ceil) will remain the sum same # So, return the sum of the original array return current_sum"},{"question":"Given a positive integer ( n ), determine if ( n ) is a palindrome number. A palindrome number is a number that reads the same backward as forward. The only line of input contains an integer ( n ) ((1 leq n leq 10^7)). Output \\"YES\\" if ( n ) is a palindrome number. Output \\"NO\\" otherwise. Quotes for clarity only. In the first sample, 121 is a palindrome as it reads the same backward and forward. In the second sample, 123 is not a palindrome as it does not read the same backward.","solution":"def is_palindrome(n): Returns \\"YES\\" if n is a palindrome number, otherwise returns \\"NO\\". n_str = str(n) if n_str == n_str[::-1]: return \\"YES\\" else: return \\"NO\\""},{"question":"You have been hired by a digital marketing company to develop an application that will help in optimizing their email campaigns. Each email campaign consists of multiple steps, and each step has a particular probability of keeping the recipient engaged. Your task is to determine the average expected retention rate of the recipients after all the steps have been executed. Each campaign starts with 100% of the recipients (the total number of recipients is not needed, just consider it as 1 for simplicity), and for each step i, a fraction `p(i)` of the current engaged recipients remain engaged. Therefore, after each step, the number of engaged recipients is multiplied by `p(i)`, where `0 ≤ p(i) ≤ 1`. # Input - The first line contains an integer n (1 ≤ n ≤ 100), denoting the number of steps in the campaign. - The second line contains n space-separated floating-point numbers p1, p2, ..., pn, where `0 ≤ pi ≤ 1` represents the retention probability of each step in the campaign. # Output - Print a single floating-point number representing the average expected retention rate after all the steps have been executed, rounded to six decimal places. # Example Input ``` 3 0.8 0.7 0.5 ``` Output ``` 0.280000 ``` # Explanation Initially, 100% (or 1.0) of the recipients are engaged. After the first step, 80% (or 0.8) of them remain engaged. After the second step, 70% of those who were engaged after the first step remain engaged (0.8 * 0.7 = 0.56). After the third step, 50% of those who were engaged after the second step remain engaged (0.56 * 0.5 = 0.28). Therefore, the average expected retention rate after all steps is 0.280000.","solution":"def average_retention_rate(n, probabilities): Calculates the average expected retention rate after all steps in the campaign. Parameters: n (int): the number of steps in the campaign. probabilities (list of float): the retention probabilities for each step. Returns: float: the average expected retention rate, rounded to six decimal places. retention_rate = 1.0 for p in probabilities: retention_rate *= p return round(retention_rate, 6) # Example usage: # n = 3 # probabilities = [0.8, 0.7, 0.5] # print(average_retention_rate(n, probabilities)) # Output: 0.280000"},{"question":"You are given an array of integers that represents points scored by players in a game. Your task is to determine the minimum number of players that need to be removed so that no two adjacent players have a score difference greater than a given value `d`. You should implement a function `min_players_to_remove(players_scores, d)` that takes in two inputs: 1. A list of integers `players_scores` representing the scores of the players. 2. An integer `d` representing the maximum allowed difference in scores between two adjacent players. Your function should return an integer representing the minimum number of players to be removed. # Input - `players_scores` : A list of integers (1 ≤ len(players_scores) ≤ 10^5, 0 ≤ players_scores[i] ≤ 10^9). - `d`: An integer (0 ≤ d ≤ 10^9). # Output - An integer representing the minimum number of players that need to be removed. # Example ``` Input: players_scores = [1, 5, 3, 8, 4], d = 2 Output: 2 Explanation: By removing players with scores 5 and 8, we have the array [1, 3, 4] which satisfies the condition that no two adjacent players have a score difference greater than 2. ``` # Constraints - The solution should be efficient even for the largest inputs. - Consider edge cases such as all scores being the same or already fitting within the given difference d. # Note - The goal is to ensure the remaining players\' scores are in a non-decreasing order with the absolute difference between any two consecutive scores being ≤ d.","solution":"def min_players_to_remove(players_scores, d): Determines the minimum number of players that need to be removed so that no two adjacent players have a score difference greater than `d`. Parameters: players_scores (list of ints): The scores of the players. d (int): The maximum allowed difference in scores between two adjacent players. Returns: int: The minimum number of players to be removed. # Edge cases if not players_scores: return 0 n = len(players_scores) if n == 1: return 0 # Initialize a table to store the longest increasing subsequence lengths # that meet the criteria imposed by d dp = [1] * n # start with each element being its own subsequence for i in range(1, n): for j in range(i): if abs(players_scores[i] - players_scores[j]) <= d: dp[i] = max(dp[i], dp[j] + 1) # The length of the longest subsequence that meets the criteria max_len = max(dp) # Minimum players to remove is the total number of players minus the length # of the longest subsequence that meets the criteria return n - max_len"},{"question":"You are a software engineer working on a database with unique integer primary keys for indexing records. When inserting a new record, you need to determine the smallest positive integer that is not currently used as a primary key. Write a program that computes this integer given the existing primary keys. The first line contains one integer n (1 ≤ n ≤ 2000) — the number of existing records. The second line contains n distinct integers k1, k2, ..., kn (1 ≤ ki ≤ 2000) — the primary keys of these records. Output the smallest positive integer that is not used as a primary key. Example: Input 4 3 1 2 6 Output 4","solution":"def smallest_missing_positive_key(n, keys): Returns the smallest positive integer that is not used as a primary key. Parameters: n (int): The number of existing records. keys (list of int): The primary keys of existing records. Returns: int: The smallest positive integer not in keys. keys_set = set(keys) smallest_missing = 1 while smallest_missing in keys_set: smallest_missing += 1 return smallest_missing # Example usage: # n = 4 # keys = [3, 1, 2, 6] # print(smallest_missing_positive_key(n, keys)) # Output: 4"},{"question":"Mary loves playing the game \\"Guess the Word\\". She has a friend who will think of a secret word, and she will try to guess it. The secret word is always a single lowercase English word and has a length of exactly `n`. For each guessed word, her friend will provide her with feedback in the form of two numbers: the number of characters that are correct and in their correct positions (correct_positions) and the number of characters that are correct but in wrong positions (wrong_positions). Given a list of possible secret words and a function that provides feedback for each word guess, help Mary find the secret word by simulating the feedback mechanism. Write a function `find_secret_word(secret: str, wordlist: List[str]) -> str`. The function should return the secret word. You can assume the secret word is guaranteed to be in the given list `wordlist`. # Input: - `secret`: a string representing the secret word. - `wordlist`: a list of strings where each string is of the same length as `n` and contains lowercase English letters. # Output: - A string representing the secret word. # Constraints: - `2 <= len(wordlist) <= 100` - `len(secret) == len(wordlist[0])` - Each word in `wordlist` contains only lowercase English letters. # Example: ```python def get_feedback(guess: str, secret: str) -> (int, int): correct_positions = sum(g == s for g, s in zip(guess, secret)) wrong_positions = sum(min(guess.count(c), secret.count(c)) for c in set(guess)) - correct_positions return correct_positions, wrong_positions def find_secret_word(secret: str, wordlist: List[str]) -> str: for word in wordlist: if get_feedback(word, secret) == get_feedback(secret, secret): return word # Example usage: secret = \\"acckzz\\" wordlist = [\\"acckzz\\",\\"ccbazz\\",\\"eiowzz\\",\\"abcczz\\"] print(find_secret_word(secret, wordlist)) # Output: \\"acckzz\\" secret = \\"gourmet\\" wordlist = [\\"soulful\\", \\"gourmet\\", \\"testing\\", \\"deftest\\"] print(find_secret_word(secret, wordlist)) # Output: \\"gourmet\\" ```","solution":"from typing import List def get_feedback(guess: str, secret: str) -> (int, int): correct_positions = sum(g == s for g, s in zip(guess, secret)) wrong_positions = sum(min(guess.count(c), secret.count(c)) for c in set(guess)) - correct_positions return correct_positions, wrong_positions def find_secret_word(secret: str, wordlist: List[str]) -> str: for word in wordlist: if get_feedback(word, secret) == get_feedback(secret, secret): return word"},{"question":"You are given a string `S` consisting of lowercase and uppercase Latin letters, and an integer `k`. Your task is to find the number of distinct substrings of length `k` that contain exactly `k` distinct characters. **Input:** - The first line contains a string `S` (1 ≤ |S| ≤ 100). - The second line contains an integer `k` (1 ≤ k ≤ |S|). **Output:** - Output the number of distinct substrings of length `k` that contain exactly `k` distinct characters. **Example:** Input: ``` abcabc 3 ``` Output: ``` 3 ``` Note: - In the example, the distinct substrings of length 3 with exactly 3 distinct characters are: \\"abc\\", \\"bca\\", and \\"cab\\". So the output is 3.","solution":"def count_distinct_substrings(S, k): Returns the number of distinct substrings of length k that contain exactly k distinct characters. Args: S (str): The input string. k (int): The length of substrings to consider. Returns: int: The count of distinct substrings of length k with exactly k distinct characters. if k > len(S): return 0 found_substrings = set() for i in range(len(S) - k + 1): substring = S[i:i+k] if len(set(substring)) == k: found_substrings.add(substring) return len(found_substrings)"},{"question":"You are given an integer array nums and a target integer target. Write a function to check whether there exist two distinct indices i and j in the array such that nums[i] + nums[j] == target. If such indices exist, return True. Otherwise, return False. Your function should have the following signature: ```python def exists_two_sum(nums: List[int], target: int) -> bool: ``` # Input The input consists of two lines: - The first line contains an integer n (2 ≤ n ≤ 10^5), representing the number of elements in the array. - The second line contains n space-separated integers, nums[i] (-10^9 ≤ nums[i] ≤ 10^9), representing the elements of the array. - The third line contains a single integer target (-10^9 ≤ target ≤ 10^9), representing the target sum. # Output Return True if there exist two distinct indices i and j in the array such that nums[i] + nums[j] == target. Otherwise, return False. # Example Input ``` 4 1 2 3 4 5 ``` Output ``` True ``` Explanation There is a pair (1, 4) or (2, 3) in the array that sums up to 5. # Note - The solution should be efficient with respect to both time and space complexity. - You should avoid using brute-force approaches as they may not be efficient for larger values of n.","solution":"from typing import List def exists_two_sum(nums: List[int], target: int) -> bool: Check if there exist two distinct indices i and j in the array such that nums[i] + nums[j] == target. :param nums: List of integers representing the array. :param target: Integer representing the target sum. :return: True if there exist two distinct indices i and j with nums[i] + nums[j] == target, otherwise False. num_set = set() for num in nums: if target - num in num_set: return True num_set.add(num) return False"},{"question":"An undirected graph is given with n nodes and m edges. Each node has a value assigned to it. Your task is to determine if there exists a path between two nodes such that the sum of the values of the nodes on this path (including both endpoints) is equal to a given target sum s. If such a path exists, print \\"YES\\"; otherwise, print \\"NO\\". To optimize the testing process, you will be given multiple queries. The first line contains an integer T (1 le T le 1000) — the number of queries. Each query is independent. The first line of each query contains three integers n, m, and s (2 le n le 1000, 1 le m le 10000, 1 le s le 10^6). The second line contains n integers representing the values of the nodes. The next m lines each contain two integers u and v (1 le u, v le n) indicating an edge between nodes u and v. For each query, print \\"YES\\" if there exists such a path; otherwise, print \\"NO\\". # Example ``` Input: 2 4 4 10 1 2 3 4 1 2 2 3 3 4 4 1 5 4 8 1 2 3 4 5 1 2 2 3 3 4 4 5 Output: YES NO ``` # Explanation In the first query, there exists a path from node 1 -> 2 -> 3 -> 4 with values sum of 1 + 2 + 3 + 4 = 10. Thus, the output is \\"YES\\". In the second query, no path sums up to 8, so the output is \\"NO\\".","solution":"def does_path_exist_with_target_sum(T, queries): # Helper function to perform DFS and find if a path exists with the sum s def dfs(node, current_sum): if current_sum == s: return True if current_sum > s: return False visited[node] = True for neighbor in graph[node]: if not visited[neighbor]: if dfs(neighbor, current_sum + values[neighbor - 1]): return True visited[node] = False return False results = [] # Process each query independently for query in queries: n, m, s = query[\'n\'], query[\'m\'], query[\'s\'] values = query[\'values\'] edges = query[\'edges\'] # Building the graph graph = [[] for _ in range(n + 1)] for u, v in edges: graph[u].append(v) graph[v].append(u) # Start DFS from each node path_exists = False for start_node in range(1, n + 1): visited = [False] * (n + 1) if dfs(start_node, values[start_node - 1]): path_exists = True break results.append(\\"YES\\" if path_exists else \\"NO\\") return results"},{"question":"Two players are playing a game on a grid of size n x m. Initially, the grid is empty, and the first player places a single piece on any cell of the grid. The players then take turns, starting with the second player, to place a piece on an empty cell following these rules: 1. The piece must be placed in a cell that is either in the same row or the same column as the last piece placed. 2. Once a player cannot make a move, they lose the game. Your objective is to find out which player will win if both play optimally. Input consists of two integers n and m (1 ≤ n, m ≤ 100), representing the dimensions of the grid. The output should be \\"First\\" if the first player wins, otherwise \\"Second\\" if the second player wins. ```plaintext Input: 4 4 Output: Second ``` ```plaintext Input: 5 3 Output: First ```","solution":"def determine_winner(n, m): Determines the winner of the game on an n x m grid. If the first player starts, both play optimally, and the first player will win if the minimum dimension of the grid (n or m) is odd; otherwise, the second player wins. Parameters: n (int): number of rows in the grid m (int): number of columns in the grid Returns: str: \\"First\\" if the first player wins, \\"Second\\" if the second player wins if min(n, m) % 2 == 1: return \\"First\\" else: return \\"Second\\""},{"question":"You are given two integers a and b. Let\'s define a sequence of operations which are applied to a positive integer: 1. If the integer is even, divide it by 2. 2. If the integer is odd, replace it with 3x + 1. Your task is to determine how many steps are needed to transform the integer a into the integer b using the above operations. If it is not possible to transform a into b, return -1. The first line contains a single integer t (1 le t le 10^4), the number of test cases. Each subsequent line contains two integers a and b (1 le a, b le 10^6) representing a test case. For each test case, output the number of steps needed to transform a into b, or -1 if it is not possible.","solution":"def transform_steps(a, b): Determines the number of steps needed to transform integer a into integer b. If it is not possible, returns -1. steps = 0 while a != b: if a > b: if a % 2 == 0: a //= 2 else: return -1 else: if b % 2 == 1: return -1 b //= 2 steps += 1 return steps"},{"question":"You are given a list of integers. Identify the length of the longest contiguous subarray that contains exactly two distinct integers. The input consists of a single line containing space-separated integers (1 ≤ number of integers ≤ 100,000; -10^6 ≤ integer value ≤ 10^6). Output a single integer representing the length of the longest contiguous subarray with exactly two different integers.","solution":"def longest_subarray_with_two_distinct(nums): Returns the length of the longest contiguous subarray that contains exactly two distinct integers. if not nums: return 0 start, max_len = 0, 0 count_map = {} for end in range(len(nums)): if nums[end] in count_map: count_map[nums[end]] += 1 else: count_map[nums[end]] = 1 while len(count_map) > 2: count_map[nums[start]] -= 1 if count_map[nums[start]] == 0: del count_map[nums[start]] start += 1 max_len = max(max_len, end - start + 1) return max_len"},{"question":"You are given a string of length n that consists only of lowercase letters \'a\', \'b\', and \'c\'. Your task is to determine the length of the shortest substring that contains all three characters. If there is no such substring, return -1. # Input - The first line contains a single integer n (1 le n le 10^5) — the length of the string. - The second line contains a string of length n consisting only of \'a\', \'b\', and \'c\'. # Output Print a single integer — the length of the shortest substring that contains at least one \'a\', one \'b\', and one \'c\'. If no such substring exists, output -1. # Example Input 1: ``` 5 aabcc ``` Output 1: ``` 3 ``` Input 2: ``` 10 abcabcabca ``` Output 2: ``` 3 ``` Input 3: ``` 7 aaaaaaa ``` Output 3: ``` -1 ``` # Note In the first example, the shortest substring that contains \'a\', \'b\', and \'c\' is \\"abc\\" (or \\"bcc\\"), which has a length of 3. In the second example, every substring of length 3 has one of each character. In the third example, there is no substring that contains \'a\', \'b\', and \'c\'.","solution":"def shortest_substring_length(n, s): Returns the length of the shortest substring that contains at least one \'a\', one \'b\', and one \'c\'. If no such substring exists, return -1. # Initialize the pointers and counters for the sliding window left = 0 min_length = float(\'inf\') count = {\'a\': 0, \'b\': 0, \'c\': 0} for right in range(n): count[s[right]] += 1 # Check if we have at least one of each character while all(count[char] > 0 for char in \'abc\'): min_length = min(min_length, right - left + 1) count[s[left]] -= 1 left += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"You are given an array of integers A of length n. Your task is to find a maximum sum of a subsequence of elements in A such that the sum of elements in any prefix of the subsequence is not less than zero. A prefix is any leading segment of a subsequence. The first line contains a single integer n (1 le n le 2000). The second line contains n integers A_1, A_2, ldots, A_n where -10^9 le A_i le 10^9. Print a single integer, which is the maximum sum of a subsequence with the given properties. # Example Input 6 4 -1 2 -1 3 -2 Output 7 # Explanation The subsequence that yields the maximum sum under the given constraints is [4, -1, 2, -1, 3], which has a sum of 7.","solution":"def max_sum_subsequence(A): Returns the maximum sum of a subsequence such that the sum of elements in any prefix of the subsequence is not less than zero. n = len(A) dp = [0] * n dp[0] = max(0, A[0]) for i in range(1, n): dp[i] = A[i] + (dp[i - 1] if dp[i - 1] >= 0 else 0) dp[i] = max(dp[i], 0) return max(dp)"},{"question":"A telecom company provides a data plan that monitors the daily usage of its customers. Each customer uses a certain amount of data each day, and the company wants to analyze the data usage patterns to identify potential overuse or underuse of data plans. You are given a list of daily data usage for n customers over a period of d days. Your task is to analyze this data and answer the following queries efficiently: 1. Find the total data used by the k-th customer over the entire period of d days. 2. Find the customer who used the most data on a specific day. Input Format: - The first line contains two integers n (1 ≤ n ≤ 100,000) and d (1 ≤ d ≤ 100,000) — the number of customers and the number of days respectively. - The following n lines each contain d integers, where the j-th integer of the i-th line represents the data used by the i-th customer on the j-th day (0 ≤ data ≤ 10^6). - The next line contains an integer q (1 ≤ q ≤ 10,000) — the number of queries. - The next q lines contain one of the following types of queries: - \\"1 k\\" (1 ≤ k ≤ n) meaning to find the total data used by the k-th customer over the entire period. - \\"2 j\\" (1 ≤ j ≤ d) meaning to find the customer who used the most data on the j-th day. Output Format: Output the result for each query in the order they are given. Example: Input: ``` 3 4 10 20 30 40 50 60 70 80 90 100 110 120 3 1 2 2 3 1 1 ``` Output: ``` 260 3 100 ``` Explanation: - The total data used by the 2nd customer over the days is 50+60+70+80 = 260. - On the 3rd day, the 3rd customer used the most data with 110 units. - The total data used by the 1st customer over the days is 10+20+30+40 = 100.","solution":"def analyze_data_usage(n, d, data, queries): # Precompute total data for each customer over all days total_data = [sum(customer_data) for customer_data in data] results = [] for query in queries: if query[0] == \\"1\\": k = int(query[1]) results.append(total_data[k - 1]) # customer index is (k-1) in zero-indexed array elif query[0] == \\"2\\": j = int(query[1]) max_data = -1 max_customer = -1 for customer_id in range(n): if data[customer_id][j - 1] > max_data: max_data = data[customer_id][j - 1] max_customer = customer_id results.append(max_customer + 1) # convert back to 1-indexed return results # Example usage: # n, d = 3, 4 # data = [ # [10, 20, 30, 40], # [50, 60, 70, 80], # [90, 100, 110, 120] # ] # queries = [[\\"1\\", 2], [\\"2\\", 3], [\\"1\\", 1]] # print(analyze_data_usage(n, d, data, queries)) # Output: [260, 3, 100]"},{"question":"Given an integer n (1 ≤ n ≤ 10^5), find out whether there exist two **distinct** integers a and b such that 2 * a + 3 * b = n. If such integers exist, print \\"Yes\\", otherwise print \\"No\\". Input: A single line contains an integer n. Output: Output \\"Yes\\" if such integers exist, otherwise print \\"No\\".","solution":"def can_find_distinct_integers(n): Determines if there exist distinct integers a and b such that 2 * a + 3 * b = n. # We iterate over possible values of `a` and check if `(n - 2*a) % 3 == 0` and corresponds to a non-negative `b` for a in range(1, n//2 + 1): if (n - 2 * a) % 3 == 0: b = (n - 2 * a) // 3 if b > 0 and b != a: return \\"Yes\\" return \\"No\\""},{"question":"You are given an integer array of length n, denoted as `arr`, and an integer k. Your task is to determine if it\'s possible to remove exactly one element from `arr` such that the sum of the remaining elements is divisible by k. The first line of input contains two integers, n (2 ≤ n ≤ 100) and k (1 ≤ k ≤ 100). The second line contains n integers representing the array elements, each element is at least 1 and at most 1000. Output \\"YES\\" if it\'s possible to remove one element and have the remaining sum divisible by k, otherwise output \\"NO\\". For example: - Input: ``` 5 3 1 2 3 4 5 ``` Output: ``` YES ``` - Input: ``` 4 5 1 6 2 5 ``` Output: ``` NO ```","solution":"def can_remove_one_element_to_divisible_by_k(n, k, arr): Given an array of integers, determines if it\'s possible to remove exactly one element such that the sum of the remaining elements is divisible by k. Args: n (int): The number of elements in the array. k (int): The integer to which the sum of the remaining elements should be divisible. arr (list of int): The list of integers. Returns: str: \\"YES\\" if it\'s possible to remove one element to achieve the required condition, otherwise \\"NO\\". total_sum = sum(arr) for num in arr: if (total_sum - num) % k == 0: return \\"YES\\" return \\"NO\\""},{"question":"Write a function, `find_special_pairs`, that takes an integer `n` and returns a list of unique tuples `(a, b)` such that `a` and `b` are positive integers, `1 ≤ a < b ≤ n`, and the product of `a` and `b` is a perfect square. # Requirements: - Your solution should be efficient in terms of time complexity. - You may not use any floating-point arithmetic or square root functions. - The function should handle inputs up to `n = 10^5` efficiently. # Example: ```python # Input n = 10 # Output [(1, 4), (1, 9), (2, 8), (4, 9)] ``` In this example: - For (1,4): (1 times 4 = 4), which is a perfect square. - For (1,9): (1 times 9 = 9), which is a perfect square. - For (2,8): (2 times 8 = 16), which is a perfect square. - For (4,9): (4 times 9 = 36), which is a perfect square.","solution":"def find_special_pairs(n): def is_perfect_square(x): # Since we\'re working with integers, rather than math.sqrt root = int(x ** 0.5) return root * root == x special_pairs = [] for a in range(1, n+1): for b in range(a+1, n+1): if is_perfect_square(a * b): special_pairs.append((a, b)) return special_pairs"},{"question":"Write a function `largest_palindromic_product` that finds the largest palindromic number that can be obtained as a product of two N-digit numbers. A palindromic number is one that reads the same forwards and backwards. The function should take an integer N (1 ≤ N ≤ 4) as input and return the largest palindromic product of two N-digit numbers. # Examples: * `largest_palindromic_product(2)` should return `9009`, as it\'s the largest palindromic product of two 2-digit numbers (91 * 99). * `largest_palindromic_product(3)` should return `906609`, as it\'s the largest palindromic product of two 3-digit numbers (913 * 993). # Note: * The function should be optimized to handle the upper limits efficiently. * The function should handle edge cases like N=1 correctly.","solution":"def largest_palindromic_product(N): Returns the largest palindromic number that can be obtained as a product of two N-digit numbers. if N < 1 or N > 4: raise ValueError(\\"N must be between 1 and 4.\\") max_num = 10**N - 1 min_num = 10**(N-1) largest_palindrome = 0 for i in range(max_num, min_num - 1, -1): for j in range(i, min_num - 1, -1): product = i * j if product <= largest_palindrome: break if str(product) == str(product)[::-1]: largest_palindrome = product return largest_palindrome"},{"question":"Jack is working on a project to create a scheduler for his personal tasks. He wants to write a function to determine the maximum number of non-overlapping intervals he can attend in a day. Each interval represents a task with a start time and an end time. Jack wants to attend the maximum number of tasks without any overlaps. You need to write a function that takes a list of intervals and returns the maximum number of non-overlapping intervals that can be attended. # Input The input consists of a single integer n (1 ≤ n ≤ 100) — the number of tasks. Each of the next n lines contains two integers start and end (0 ≤ start < end ≤ 24) — the start and end times of the task, respectively. All times are in a 24-hour format. # Output Print a single integer — the maximum number of non-overlapping intervals that can be attended. # Example Input: ``` 5 1 3 2 6 8 10 15 18 5 7 ``` Output: ``` 4 ``` **Explanation:** Jack can attend the tasks with intervals [1,3], [5,7], [8,10], and [15,18]. # Constraints: - Intervals may not coincide exactly but overlap. - The function should work efficiently within the given constraints. # Note: Implement a greedy algorithm to solve this problem by first sorting the intervals based on their end times and then iteratively selecting intervals that do not overlap with the previously selected interval.","solution":"def max_non_overlapping_intervals(intervals): Determines the maximum number of non-overlapping intervals that can be attended. Parameters: intervals (list of tuples): A list of tuples where each tuple contains the start and end times of a task. Returns: int: The maximum number of non-overlapping intervals. # Sort intervals based on end times intervals.sort(key=lambda x: x[1]) # Initialize variables count = 0 end_time = 0 for interval in intervals: # If the current interval starts after the last selected interval ends, it can be attended if interval[0] >= end_time: count += 1 end_time = interval[1] return count"},{"question":"**Develop a function that renames keys in a nested dictionary** Given a nested dictionary and a dictionary containing key mappings (i.e., old key to new key), write a function to rename the keys in the nested dictionary according to the key mappings. The function should traverse the entire nested dictionary structure and apply the renaming to every key that matches one of the keys in the mapping dictionary, recursively. # Function Signature ```python def rename_keys(nested_dict: dict, key_mappings: dict) -> dict: ``` # Input - `nested_dict` (dict): A nested dictionary where keys need to be renamed. - `key_mappings` (dict): A dictionary containing the old keys as keys and new keys as values. # Output - (dict): A new dictionary with keys renamed according to the key mappings. # Constraints - The keys in the nested dictionary and key mappings are strings. - The nested dictionary\'s values can be other dictionaries, lists, or other types. - Apply key mapping recursively for any level of nested dictionaries. # Example ```python nested_dict = { \\"name\\": \\"Alice\\", \\"details\\": { \\"age\\": 25, \\"address\\": { \\"city\\": \\"Wonderland\\", \\"zipcode\\": \\"12345\\" } }, \\"hobbies\\": [\\"Reading\\", \\"Gaming\\"] } key_mappings = { \\"name\\": \\"full_name\\", \\"age\\": \\"years_old\\", \\"zipcode\\": \\"postal_code\\" } result = rename_keys(nested_dict, key_mappings) ``` # Expected Output ```python { \\"full_name\\": \\"Alice\\", \\"details\\": { \\"years_old\\": 25, \\"address\\": { \\"city\\": \\"Wonderland\\", \\"postal_code\\": \\"12345\\" } }, \\"hobbies\\": [\\"Reading\\", \\"Gaming\\"] } ```","solution":"def rename_keys(nested_dict: dict, key_mappings: dict) -> dict: Renames keys in a nested dictionary according to the key mappings. Args: nested_dict (dict): A nested dictionary where keys need to be renamed. key_mappings (dict): A dictionary containing the old keys as keys and new keys as values. Returns: dict: A new dictionary with keys renamed according to the key mappings. def traverse_and_rename(d): if isinstance(d, dict): new_dict = {} for k, v in d.items(): new_key = key_mappings.get(k, k) new_dict[new_key] = traverse_and_rename(v) return new_dict elif isinstance(d, list): return [traverse_and_rename(item) for item in d] else: return d return traverse_and_rename(nested_dict)"},{"question":"You are given two lists of integers. Your task is to determine if there is a pair of numbers (one from the first list and one from the second list) whose sum is equal to a given target sum. The first line contains an integer n (1 le n le 10^5), the number of elements in the first list. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9), the elements of the first list. The third line contains an integer m (1 le m le 10^5), the number of elements in the second list. The fourth line contains m integers b_1, b_2, ldots, b_m (1 le b_i le 10^9), the elements of the second list. The fifth line contains an integer k (1 le k le 10^{18}), the target sum. If there exists a pair of numbers (one from the first list and one from the second list) whose sum is equal to the target sum, print \\"YES\\", otherwise print \\"NO\\". # Example Input ``` 4 1 2 3 4 5 5 6 7 8 9 10 ``` Output ``` YES ``` Input ``` 3 1 2 3 3 4 5 6 10 ``` Output ``` NO ```","solution":"def has_pair_with_sum(n, list1, m, list2, target): Determines if there\'s any pair of numbers (one from each list) that sum up to the target value. complements = set() # Store complements of list1 relative to the target in a set for num in list1: complements.add(target - num) # Check if any number in list2 is in the complements set for num in list2: if num in complements: return \\"YES\\" return \\"NO\\""},{"question":"You are given a tree with n nodes (numbered from 1 to n) and n-1 edges. Each node has a value associated with it, given in the array v of length n, where v_i represents the value of node i (1 leq v_i leq 10^9). Your task is to find the maximum possible sum of node values, where the sum is taken over any path in the tree. A path in the tree is defined as a sequence of nodes where each consecutive pair of nodes in the sequence is connected by an edge, and each node appears at most once in the sequence. The input contains: 1. An integer n (1 leq n leq 100,000), the number of nodes in the tree. 2. An array v of length n, where v_i (1 leq v_i leq 10^9) represents the value of node i. 3. n-1 lines, each containing two integers a and b (1 leq a, b leq n), denoting an edge between nodes a and b. Output a single integer: the maximum possible sum of node values for any path in the tree. Example: Input: ``` 5 1 2 3 4 5 1 2 2 3 3 4 4 5 ``` Output: ``` 15 ``` Explanation: The path that gives the maximum sum is 1-2-3-4-5 with the node values sum being 1 + 2 + 3 + 4 + 5 = 15.","solution":"import sys from collections import defaultdict sys.setrecursionlimit(200000) def dfs(graph, values, node, parent): max1, max2 = 0, 0 max_chain = 0 for child in graph[node]: if child == parent: continue chain_value = dfs(graph, values, child, node) if chain_value > max1: max1, max2 = chain_value, max1 elif chain_value > max2: max2 = chain_value max_chain = max(max_chain, max1 + values[node - 1]) global_result[0] = max(global_result[0], max_chain + max2) return max_chain def max_path_sum(n, values, edges): graph = defaultdict(list) for a, b in edges: graph[a].append(b) graph[b].append(a) global global_result global_result = [float(\'-inf\')] dfs(graph, values, 1, -1) return global_result[0] # Function to process the input def solve(input_data): data = input_data.split(\'n\') n = int(data[0]) values = list(map(int, data[1].split())) edges = [tuple(map(int, line.split())) for line in data[2: 2 + n - 1]] result = max_path_sum(n, values, edges) return result"},{"question":"A group of developers are working on a project that involves processing text data. One of the tasks they frequently encounter is the need to identify and extract sentences within a paragraph that contain a specific keyword. A sentence is defined as a sequence of words separated by spaces and ending with a period (\'.\') or the end of the text. Words are sequences of characters separated by spaces. Write a function `extract_keyword_sentences(paragraph, keyword)` that takes two arguments: 1. `paragraph` (a string): A non-empty text that can span multiple sentences. The paragraph will consist of only English letters (both uppercase and lowercase) and periods. 2. `keyword` (a string): A non-empty keyword that you need to search for within the paragraph\'s sentences. The function should return a list of sentences that contain the keyword. The sentences should be extracted from the paragraph while maintaining their original order. Each sentence should be trimmed to remove leading and trailing spaces, and should not include periods at the end. If no sentence contains the keyword, return an empty list. Example: ```python paragraph = \\"Alice went to the market. Bob loves programming. Carol went to the market too. Bob is a programmer.\\" keyword = \\"Bob\\" extract_keyword_sentences(paragraph, keyword) ``` Output: ```python [\\"Bob loves programming\\", \\"Bob is a programmer\\"] Explanation: Despite the keyword \'Bob\' appearing twice, it ensures each identified sentence is captured correctly. The last sentence in the paragraph also confirms support for keyword presence without period influence. # Additional Details: - The function should be case-insensitive (e.g., \\"Bob\\" should match \\"bob\\"). - Handle sentences that might have multiple occurrences of the keyword correctly, ensuring each valid sentence is included only once. - Assume no consecutive periods or empty sentences in the input. Intent of the Problem: This task tests the ability to implement string manipulation, substring search, and text processing in a straightforward manner. The challenge lies in correctly identifying sentence boundaries amidst keyword search while ensuring output structure remains consistent with defined behavior.","solution":"def extract_keyword_sentences(paragraph, keyword): Extracts and returns sentences containing the specified keyword. Args: - paragraph (str): The paragraph to search within. - keyword (str): The keyword to search for. Returns: - List[str]: A list of sentences containing the keyword. # Convert both paragraph and keyword to lower case for case-insensitive search lower_paragraph = paragraph.lower() lower_keyword = keyword.lower() # Split the paragraph into sentences based on periods sentences = [sentence.strip() for sentence in lower_paragraph.split(\'.\')] # Find sentences that contain the keyword result = [] for sentence in sentences: if lower_keyword in sentence: result.append(sentence.strip()) return result"},{"question":"You are given a string s consisting of n characters. You can perform the following operation any number of times: - Choose any substring of the string s and reverse it. Your task is to determine the minimum number of operations needed to make the string a palindrome. The first line of the input contains a single integer n (1 le n le 2 cdot 10^5) — the length of the string. The second line of the input contains a string s of length n consisting of lowercase English letters. Print one integer — the minimum number of operations required to make the string a palindrome.","solution":"def min_operations_to_palindrome(n, s): Returns the minimum number of operations needed to make string s of length n a palindrome. # Count mismatches in the first half vs the second half of the string count_mismatches = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: count_mismatches += 1 return count_mismatches"},{"question":"You are given an array of integers a consisting of n elements. Your task is to determine the maximum length of a subarray that contains at most two different integers. A subarray is a contiguous part of an array. The first line of the input contains one integer n (1 le n le 100) — the number of elements in the array. The second line contains n integers a_i (1 le a_i le 100) — the elements of the array. Print one integer — the maximum length of a subarray that contains at most two different integers. Example Input: ``` 6 1 2 1 2 3 2 ``` Example Output: ``` 4 ``` Explanation: In the given example, the subarray [1, 2, 1, 2] contains at most two different integers and has a length of 4, which is the maximum length possible for such subarrays within the array.","solution":"def max_subarray_two_distinct(arr): Returns the maximum length of a subarray that contains at most two different integers. :param arr: List[int] - the input array of integers :return: int - the maximum length of the desired subarray n = len(arr) if not arr: return 0 left = 0 freq = {} max_length = 0 for right in range(n): freq[arr[right]] = freq.get(arr[right], 0) + 1 while len(freq) > 2: freq[arr[left]] -= 1 if freq[arr[left]] == 0: del freq[arr[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"A delivery drone company operates in a city represented as a grid of N times N cells. Each cell may either be an open space where the drone can freely move, or an obstacle where the drone cannot fly through. Drones always start from the top-left cell of the grid (0, 0) and aim to reach the bottom-right cell of the grid (N-1, N-1). The drone can move in four directions: up, down, left, or right, but cannot move diagonally. Additionally, the drone consumes 1 unit of battery power for each cell it travels to. Your task is to determine the minimum amount of battery power required for the drone to travel from the start cell to the target cell, if it is indeed possible. If there is no such path, return -1. The first line contains one positive integer N (1 leq N leq 1000) representing the size of the grid. The next N lines contain N integers each (either 0 or 1) representing the grid. A 0 means the cell is an open space, and a 1 means the cell is an obstacle. Output a single integer, the minimum battery power needed for the drone to reach its destination, or -1 if there is no possible path. # Example Input: ``` 4 0 0 0 0 1 1 0 1 0 0 0 0 0 1 1 0 ``` Output: ``` 6 ``` Input: ``` 3 0 1 0 1 1 0 0 0 0 ``` Output: ``` -1 ``` # Explanation: In the first example, the optimal path would be (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (3,2) -> (3,3), which consumes exactly 6 units of battery power. In the second example, there is no path from (0,0) to (2,2) due to the obstacles.","solution":"from collections import deque def min_battery_power(N, grid): if grid[0][0] == 1 or grid[N-1][N-1] == 1: return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == N-1 and y == N-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < N and (nx, ny) not in visited and grid[nx][ny] == 0: queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) return -1 def parse_input(input_string): lines = input_string.strip().split(\'n\') N = int(lines[0]) grid = [list(map(int, line.split())) for line in lines[1:]] return N, grid"},{"question":"Anika is planning to build a unique binary tree with special constraints. She wants to build a Complete Binary Tree (CBT) of height `h` such that every node has exactly `k` children or is a leaf (has 0 children). A Complete Binary Tree is one in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible. Anika wants to determine if it\'s possible to build such a tree given the height `h` and the value `k`. If possible, she wants to know how many nodes will be in the tree. Your task is to write a function that, given the height `h` and the value `k`, determines whether such a CBT can be constructed. If it can be constructed, return the total number of nodes in the tree. Otherwise, return `-1`. # Input The function should accept two integers: - `h` (`1 ≤ h ≤ 10^5`): The height of the binary tree. - `k` (`1 ≤ k ≤ 2`): The number of children each non-leaf node should have. # Output Return the total number of nodes in the tree if it can be constructed, otherwise return `-1`. # Example Example 1: **Input:** ```python h = 3 k = 2 ``` **Output:** ```python 7 ``` **Explanation:** A complete binary tree of height 3 where every non-leaf node has exactly 2 children will have 7 nodes. The structure will look like: ``` 1 / 2 3 / / 4 5 6 7 ``` Example 2: **Input:** ```python h = 2 k = 1 ``` **Output:** ```python -1 ``` **Explanation:** It\'s not possible to construct a complete binary tree of height 2 where every non-leaf node has exactly 1 child.","solution":"def cbt_node_count(h, k): Determines the number of nodes in a Complete Binary Tree of height h with each non-leaf node having exactly k children. Params: h (int): Height of the binary tree k (int): Number of children each non-leaf node should have (1 or 2) Returns: int: Total number of nodes if such a tree can be constructed, otherwise -1 if k == 2: # For k = 2, a full binary tree of height h has (2^h - 1) nodes return (2 ** h) - 1 else: # k == 1 # For k = 1, it\'s impossible to construct a complete binary tree except h = 1 return -1"},{"question":"A company needs to allocate office space to its departments across n floors of a building, where each floor has a maximum capacity of ci employees. Each department has a unique workforce size requiring exactly di office spaces. The goal is to allocate the departments in such a way that all employees of a department are on the same floor, and no floor exceeds its capacity. You have been hired to find out if it is possible to accommodate all departments in the building given these constraints. The first line of input contains an integer n (1 ≤ n ≤ 100) — the number of floors. The second line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 100) — the capacities of the floors. The third line contains an integer m (1 ≤ m ≤ 100) — the number of departments. The fourth line contains m integers d1, d2, ..., dm (1 ≤ di ≤ 100) — the number of employees in each department. Output \\"YES\\" if it is possible to accommodate all departments under the constraints, otherwise output \\"NO\\". Example 1: Input: 3 10 15 20 3 10 5 15 Output: YES Example 2: Input: 2 8 8 3 7 6 5 Output: NO Explanation: In Example 1, you can place the first department on any of the three floors, the second department on any floor except the one where the third department is placed if it\'s on the same floor as the first, and the third department on the last remaining floor. Hence, it is possible to accommodate all departments. In Example 2, there is no way to fit all three departments given the capacity constraints of the floors.","solution":"def can_accommodate_departments(n, floor_capacities, m, department_sizes): Determines if departments can be accommodated in the building without exceeding floor capacities. Arguments: n: int -- number of floors floor_capacities: List[int] -- list of capacities for each floor m: int -- number of departments department_sizes: List[int] -- list of department sizes Returns: str -- \\"YES\\" if all departments can be accommodated, otherwise \\"NO\\" floor_capacities.sort(reverse=True) department_sizes.sort(reverse=True) for i in range(m): if i >= n or department_sizes[i] > floor_capacities[i]: return \\"NO\\" return \\"YES\\""},{"question":"A transportation company needs to optimize fuel consumption for their delivery trucks. The company has n delivery points and its warehouse is located at point 0. Each delivery point i requires a certain amount of fuel to travel from the warehouse to the delivery point and back, and the fuel required for these round trips is given by an array a of length n. The objective is to find the minimum amount of fuel required to make exactly k round trips to these delivery points. In other words, you are required to choose k delivery points such that the sum of the fuel requirements for the chosen points is minimized. The first line of input contains two integers n and k (1 le k le n le 10^5). The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) where a_i is the amount of fuel required for the round trip to delivery point i. Output a single integer — the minimum amount of fuel required to make exactly k round trips. # Example **Input:** ``` 5 3 4 8 6 2 9 ``` **Output:** ``` 12 ``` # Explanation From the given input, we can select the delivery points with fuel requirements 2, 4, and 6 to achieve the minimum fuel usage, totaling 12.","solution":"def min_fuel(n, k, a): Returns the minimum amount of fuel required to make exactly k round trips to the delivery points. :param n: Number of delivery points :param k: Number of round trips required :param a: List of integers representing fuel required for round trips to each delivery point :return: Minimum fuel required to make exactly k round trips # Sort the list of fuel requirements in ascending order a.sort() # Sum the first k elements of the sorted list to get the minimum fuel min_fuel_required = sum(a[:k]) return min_fuel_required"},{"question":"Given a string s and an integer k, determine the length of the longest substring of s that contains at most k distinct characters. You are required to write a function that takes a string s and an integer k as input and returns the length of the longest substring with at most k distinct characters. # Input - The first line contains an integer q (1 le q le 10^4), the number of test cases. - The description of each test case follows: - The first line contains the integer k (1 le k le |s|), the maximum number of distinct characters allowed. - The second line contains the string s (1 le |s| le 10^5), consisting of lowercase English letters. It is guaranteed that the sum of all lengths of s over all test cases does not exceed 10^5. # Output For each test case, print the length of the longest substring of s that contains at most k distinct characters. # Example Input: ```plaintext 3 2 eceba 3 aaabbcc 1 aaaaaaa ``` Output: ```plaintext 3 7 7 ``` # Explanation: For the first test case, the substring \\"ece\\" has length 3 with at most 2 distinct characters. For the second test case, the substring \\"aaabbcc\\" covers the whole string and has length 7 with at most 3 distinct characters. For the third test case, the substring \\"aaaaaaa\\" covers the whole string and has length 7 with at most 1 distinct character.","solution":"def longest_substring_with_k_distinct(s, k): if not s or k <= 0: return 0 # Dict to count the frequency of characters in the current window char_frequency = {} max_length = 0 start = 0 for end in range(len(s)): current_char = s[end] char_frequency[current_char] = char_frequency.get(current_char, 0) + 1 # Shrink the sliding window until we have at most k distinct characters while len(char_frequency) > k: start_char = s[start] char_frequency[start_char] -= 1 if char_frequency[start_char] == 0: del char_frequency[start_char] start += 1 # Update the maximum length of the substring found max_length = max(max_length, end - start + 1) return max_length"},{"question":"In a city block, there is a special stretching exercise event happening where people should form groups based on three different exercises: jumping jacks, lunges, and squats. Each person can perform only one type of exercise at a time, and each group must consist of at least one person doing each exercise. However, the organizers want the groups to be as evenly distributed as possible. Given the number of people attending the event, the organizers want to know the maximum number of such groups they can form and the number of people that will be left without a group. The rules for forming a group are: 1. Each group should contain at least one person doing jumping jacks, one person doing lunges, and one person doing squats. 2. You can only form a group if there are enough people for all three exercises. You need to help the organizers by writing a program that calculates the maximum number of groups that can be formed and the number of leftover people. The input consists of three space-separated integers J, L, and S (1 ≤ J, L, S ≤ 10^14), representing the number of people available for jumping jacks, lunges, and squats respectively. Output two integers separated by a space: the maximum number of groups that can be formed and the number of people left without a group. # Example Input: 9 6 8 Output: 6 5 In this example, the maximum number of groups that can be formed is 6, and there are 5 people left without a group.","solution":"def exercise_groups(J, L, S): Determines the maximum number of exercise groups that can be formed and the number of leftover people. Parameters: J (int): Number of people available for jumping jacks. L (int): Number of people available for lunges. S (int): Number of people available for squats. Returns: (tuple): A tuple containing two integers: - The maximum number of groups that can be formed. - The number of people left without a group. # Maximum number of groups is determined by the minimum of J, L, and S max_groups = min(J, L, S) # Calculate the leftover people after forming the groups leftover = (J - max_groups) + (L - max_groups) + (S - max_groups) return max_groups, leftover"},{"question":"David is organizing a grand event and wants to seat all his guests in a square grid. He needs to make sure that the guests sit according to a unique pattern he devised. The grid is composed of N rows and N columns, and each cell in the grid has an integer value that represents the guest seated there. The pattern is described as follows: - Initially, the grid should be filled with zeros. - Guests must be seated such that the sum of the values in each row, each column, and the two main diagonals is equal to the maximum value x in the grid. David also wants the difference between the sum of all values in the odd-indexed cells and the sum of all values in the even-indexed cells (considering 1-based indexing) to be as small as possible. Your task is to construct such a grid and output it. If there are multiple possible answers, output any one of them. The input consists of a single integer N (1 ≤ N ≤ 100). Output the grid of size N x N that satisfies the conditions mentioned above. Each value in the grid should be an integer between 0 and N inclusive. # Input - A single integer N. # Output - N lines, each containing N space-separated integers representing the values in the grid. # Example **Input:** ``` 3 ``` **Output:** ``` 1 1 1 1 1 1 1 1 1 ``` **Input:** ``` 2 ``` **Output:** ``` 1 1 1 1 ``` Note: The actual values in the grid and their sums should adhere to the constraints provided in the problem description. The solution should ensure the even-odd indexed sum difference is minimized while meeting the row, column, and diagonal constraints.","solution":"def construct_grid(N): Constructs an NxN grid following the described pattern: - Sum of each row is equal to the sum of each column and both main diagonals. - Number difference between odd-indexed and even-indexed cells is minimal. Parameters: N (int): The size of the grid Returns: list of lists: NxN grid with integer values # Initialize the grid with all ones grid = [[1 for _ in range(N)] for _ in range(N)] return grid"},{"question":"You are given a list of integers that represents a sequence of coin flips, where 1 corresponds to a Heads and 0 corresponds to a Tails. You need to find the maximum length of consecutive 1s in the sequence after flipping at most one 0 to 1. Write a function `max_consecutive_ones` that takes a list of integers as input and returns an integer representing the maximum length of consecutive 1s after performing the described operation. Your function should have the following signature: ```python def max_consecutive_ones(flips: List[int]) -> int: ```","solution":"from typing import List def max_consecutive_ones(flips: List[int]) -> int: max_len = 0 # Stores the maximum length of consecutive 1s zero_count = 0 # Counts the number of zeros in the current window left = 0 # Left pointer of the sliding window for right in range(len(flips)): if flips[right] == 0: zero_count += 1 # If there are more than one 0 in the window, shrink the window from the left while zero_count > 1: if flips[left] == 0: zero_count -= 1 left += 1 # Calculate the length of the current window max_len = max(max_len, right - left + 1) return max_len"},{"question":"Alice is a botanist and is studying the growth pattern of a rare species of fungi. She has observed that these fungi grow in a very specific \\"zigzag\\" pattern. The pattern can be described as follows: - The growth happens in a series of steps, and in each step, the fungi either increase or decrease in size by exactly one unit compared to the previous step. Given an integer array representing the sizes of the fungi at different steps, Alice wants to determine if the given sequence of sizes forms a valid zigzag pattern. A sequence is considered a valid zigzag pattern if the differences between consecutive elements strictly alternate between positive and negative (or vice versa). For example: - [1, 2, 1, 2, 1] is a valid zigzag pattern. - [1, 3, 2, 4, 3] is a valid zigzag pattern. - [1, 2, 3, 2, 1] is not a valid zigzag pattern. Write a function `is_zigzag_pattern(sizes: List[int]) -> str` to help Alice determine if the sequence forms a valid zigzag pattern. The function will return \\"YES\\" if the sizes form a valid zigzag pattern, otherwise it will return \\"NO\\". **Input:** - An integer array sizes of length `n` (1 <= n <= 10^5). Each element in the array represents the size of fungi at different steps. The sizes are integers in the range from -10^9 to 10^9. **Output:** - A string \\"YES\\" if the sizes form a valid zigzag pattern, otherwise \\"NO\\". **Function Signature:** ```python def is_zigzag_pattern(sizes: List[int]) -> str: ``` **Example:** ```python # Example 1 sizes = [1, 2, 1, 2, 1] print(is_zigzag_pattern(sizes)) # Output: \\"YES\\" # Example 2 sizes = [1, 2, 3, 2, 1] print(is_zigzag_pattern(sizes)) # Output: \\"NO\\" # Example 3 sizes = [1, 3, 2, 4, 3] print(is_zigzag_pattern(sizes)) # Output: \\"YES\\" ```","solution":"from typing import List def is_zigzag_pattern(sizes: List[int]) -> str: if len(sizes) < 2: return \\"YES\\" direction = 0 # 0 if undefined, 1 if increasing, -1 if decreasing for i in range(1, len(sizes)): if sizes[i] == sizes[i - 1]: return \\"NO\\" current_direction = 1 if sizes[i] > sizes[i - 1] else -1 if direction == 0: direction = current_direction elif direction == current_direction: return \\"NO\\" else: direction = current_direction return \\"YES\\""},{"question":"You are given an array of n integers, and you need to find the smallest positive integer that does not appear in the array. Write a function `missingPositive` which takes an integer array `nums` as input and returns an integer representing the smallest positive integer that is not in the array. Your solution should have a time complexity of O(n) and use constant extra space. # Input - An array `nums` of length `n` where `1 ≤ n ≤ 100000`. - Each element in the array can be between -10^6 and 10^6. # Output - A single integer which is the smallest positive integer not present in `nums`. # Examples 1. `missingPositive([3, 4, -1, 1])` should return `2`. 2. `missingPositive([1, 2, 0])` should return `3`. 3. `missingPositive([-7, -8, -9, -11, -12])` should return `1`. # Note - The given array may contain duplicates. - Consider all positive integers starting from 1 for determining the smallest missing positive integer.","solution":"def missingPositive(nums): Returns the smallest positive integer that does not appear in the array nums. n = len(nums) # First pass to remove non-positive numbers and numbers larger than n for i in range(n): if nums[i] <= 0 or nums[i] > n: nums[i] = n + 1 # Second pass to mark the presence of elements for i in range(n): num = abs(nums[i]) if num <= n: nums[num - 1] = -abs(nums[num - 1]) # Third pass to find the first positive index for i in range(n): if nums[i] > 0: return i + 1 return n + 1"},{"question":"You are given an initial array A of n integers. You need to process multiple queries on this array. Each query can be one of the following: 1. Update the value at a specific index in the array. 2. Find the maximum value in a given range of the array. For the update query, you will be given an index i and a new value v, and you need to update the element at index i in the array to v. For the range query, you will be given two indices, l and r (inclusive), and you need to return the maximum value in the subarray from index l to r. The first line of input contains two integers, n (the size of the array) and q (the number of queries). The second line contains n integers, the elements of the array A. The next q lines represent the queries. Each line starts with an integer type. If type is 1, it means an update query, followed by two integers i and v. If type is 2, it means a range query, followed by two integers l and r. For each range query, print the maximum value in the specified subarray. # Constraints: - 1 le n, q le 10^5 - 1 le A[i], v le 10^9 - 1 le i le n - 1 le l, r le n Example ```plaintext Input: 5 3 1 2 3 4 5 2 1 3 1 3 10 2 1 5 Output: 3 10 ```","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) # initialize the tree by loading the data into the leaf nodes for i in range(self.n): self.tree[self.n + i] = data[i] # build the tree by calculating parents for i in range(self.n - 1, 0, -1): self.tree[i] = max(self.tree[i * 2], self.tree[i * 2 + 1]) def update(self, index, value): index += self.n # shift the index to the leaf self.tree[index] = value while index > 1: index //= 2 self.tree[index] = max(self.tree[index * 2], self.tree[index * 2 + 1]) def range_max(self, left, right): left += self.n right += self.n + 1 max_value = 0 while left < right: if left % 2 == 1: max_value = max(max_value, self.tree[left]) left += 1 if right % 2 == 1: right -= 1 max_value = max(max_value, self.tree[right]) left //= 2 right //= 2 return max_value def process_queries(n, q, array, queries): seg_tree = SegmentTree(array) result = [] for query in queries: if query[0] == 1: # update query _, index, value = query seg_tree.update(index - 1, value) # make index 0-based else: # range max query _, left, right = query result.append(seg_tree.range_max(left - 1, right - 1)) # 0-based indexing return result"},{"question":"You are tasked with rescuing a group of survivors from a forest overrun by zombies. You have a map represented by a grid of size m x n (1 ≤ m, n ≤ 1000). Each cell in the grid can be one of the following: - \'S\' : Start position, where you begin (there is exactly one start position). - \'E\' : Exit position, where you need to reach to rescue the survivors (there is exactly one exit position). - \'.\' : Empty space, you can walk through these cells freely. - \'#\' : Obstacle, you cannot pass through these cells. - \'Z\' : Zombie, you need to avoid these cells at all costs. You can move up, down, left, or right, but cannot move diagonally. Write a program to find the shortest path from the start position \'S\' to the exit position \'E\' without stepping on any cell containing a zombie \'Z\'. If there is no such path, print \\"NO WAY OUT\\". The input format is as follows: - The first line contains two integers m and n. - The next m lines represent the grid with n characters each. The output format is a single line: - If there is a path, print the length of the shortest path. - If no such path exists, print \\"NO WAY OUT\\". Example: Input: 5 5 S.... .#.#. .#Z#. ....E # Output: 7","solution":"from collections import deque def find_shortest_path(m, n, grid): # Define possible movements (up, down, left, right) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Locate the start and end positions start = None end = None for i in range(m): for j in range(n): if grid[i][j] == \'S\': start = (i, j) elif grid[i][j] == \'E\': end = (i, j) # Set up a queue for BFS and a set to track visited nodes queue = deque([(start, 0)]) # (current_position, current_distance) visited = set(start) while queue: (x, y), dist = queue.popleft() # If we reached the end position if (x, y) == end: return dist # Explore the neighbors for dx, dy in directions: nx, ny = x + dx, y + dy # Check if the new position is within bounds and valid (not visited, not an obstacle or zombie) if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] not in {\'#\', \'Z\'} and (nx, ny) not in visited: visited.add((nx, ny)) queue.append(((nx, ny), dist + 1)) # If no path found return \\"NO WAY OUT\\""},{"question":"You are given an array of integers where each integer appears exactly twice except for one integer which appears only once. Your task is to identify the integer that appears only once. The input array is guaranteed to satisfy the above properties. The first line of the input contains an integer n (1 leq n leq 100,000), the number of integers in the array. This means there are 2n+1 integers in the array. The second line contains 2n+1 integers a_1, a_2, ..., a_{2n+1} (1 leq a_i leq 10^9), the elements of the array. Print the single integer that appears only once in the array. In the first sample, the array might be [1, 2, 3, 2, 1]. The integer that appears only once is 3.","solution":"def find_single_number(arr): Returns the single integer that appears only once in the array. Every other integer appears exactly twice. result = 0 for num in arr: result ^= num return result # Example usage: # n = 2 # arr = [1, 2, 3, 2, 1] # print(find_single_number(arr)) # Output should be 3"},{"question":"You are given an undirected graph represented by an adjacency list. The graph is guaranteed to be a tree. Your task is to find the longest path in this tree, also known as the diameter of the tree. The diameter of a tree is the longest path between any two nodes. The first line of the input contains a single integer n (2 ≤ n ≤ 10^5) — the number of nodes in the tree. The following n-1 lines contain pairs of integers u and v (1 ≤ u, v ≤ n) representing an edge in the tree. Print a single integer, the length of the longest path in the tree. # Example **Input:** ``` 5 1 2 2 3 3 4 4 5 ``` **Output:** ``` 4 ``` Explanation The longest path in this tree is from node 1 to node 5 or node 1 to node 4, both have length 4. The algorithm generally involves two breadth-first searches: one from any node to find the farthest node, and another from the farthest node found to determine the actual longest path.","solution":"from collections import deque, defaultdict def bfs_find_farthest_node(start, adj): visited = set() queue = deque([(start, 0)]) # (node, distance) visited.add(start) farthest_node = start max_distance = 0 while queue: node, dist = queue.popleft() if dist > max_distance: max_distance = dist farthest_node = node for neighbor in adj[node]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, dist + 1)) return farthest_node, max_distance def find_tree_diameter(n, edges): # Create the adjacency list adj = defaultdict(list) for u, v in edges: adj[u].append(v) adj[v].append(u) # Step 1: Perform BFS from any node (let\'s choose node 1) farthest_node, _ = bfs_find_farthest_node(1, adj) # Step 2: Perform BFS from the farthest node found in step 1 _, diameter = bfs_find_farthest_node(farthest_node, adj) return diameter"},{"question":"Alice is learning about strings and their transformations. Her current task is to create a string transformation that rearranges characters based on specific rules. Alice has a string `s` that contains lowercase alphabetic characters and digits from \'0\' to \'9\', but no spaces or special characters. She needs to perform the following transformation: 1. All alphabetic characters must be ordered in increasing alphabetical order. 2. All digits must be ordered in increasing numerical order. 3. The alphabetic characters must appear in the transformed string before any of the digits. Your task is to help Alice by writing a function that performs this transformation. # Input: - A single string `s` (1 ≤ |s| ≤ 100), containing lowercase alphabetic characters and digits from \'0\' to \'9\'. # Output: - Output a single string that contains the characters from the input string, rearranged according to the rules specified above. # Example: ```text Input: a1c3b2 Output: abc123 Input: z9y8x7a3 Output: axyz3789 ```","solution":"def transform_string(s): Transforms the input string such that all alphabetic characters are ordered in increasing alphabetical order and appear before any digits, which are ordered in increasing numerical order. alphabets = sorted([char for char in s if char.isalpha()]) digits = sorted([char for char in s if char.isdigit()]) return \\"\\".join(alphabets + digits)"},{"question":"You are given a collection of events log data from various servers in a distributed system. Each log entry is a single line in the format \\"timestamp server_id event_type description\\". The description can be any string and can include spaces, while the timestamp is in \\"YYYY-MM-DD hh:mm:ss\\" format. The server_id is an integer, and event_type is one of the following three strings: \\"ERROR\\", \\"WARNING\\", \\"INFO\\". Your task is to write a program that processes these log entries and generates a summary report for a given server_id, including the number of each type of event (\\"ERROR\\", \\"WARNING\\", \\"INFO\\") and the time of the most recent event of each type. The input consists of multiple lines of log entries, followed by a single line containing the server_id for which the summary report should be generated. Specifications: - The input ends when a line containing only the server_id is encountered. - All timestamps are guaranteed to be valid and in chronological order. - The summary report should include the count of each event type and the timestamp of the last occurrence of each event type for the specified server. Output the report in the following format: ``` ERROR count: <number> last timestamp: <timestamp> WARNING count: <number> last timestamp: <timestamp> INFO count: <number> last timestamp: <timestamp> ``` If any event type is not present for the given server_id, its count should be 0 and the timestamp should be \\"N/A\\". Example input: ``` 2023-01-01 12:00:00 1 ERROR Disk full 2023-01-01 12:05:00 2 INFO Service started 2023-01-01 12:10:00 1 WARNING CPU load high 2023-01-01 12:15:00 1 INFO Service started 2023-01-01 12:20:00 2 ERROR Disk full 1 ``` Example output: ``` ERROR count: 1 last timestamp: 2023-01-01 12:00:00 WARNING count: 1 last timestamp: 2023-01-01 12:10:00 INFO count: 1 last timestamp: 2023-01-01 12:15:00 ```","solution":"def process_log_entries(log_entries, server_id): Processes log entries and generates a summary report for a specified server_id. :param log_entries: List of log entry strings. :param server_id: Integer representing the server_id for which the summary report is to be generated. :return: Dictionary with the count and last timestamp of each event type for the specified server_id. from collections import defaultdict result = { \\"ERROR\\": {\\"count\\": 0, \\"last_timestamp\\": \\"N/A\\"}, \\"WARNING\\": {\\"count\\": 0, \\"last_timestamp\\": \\"N/A\\"}, \\"INFO\\": {\\"count\\": 0, \\"last_timestamp\\": \\"N/A\\"} } for entry in log_entries: parts = entry.split(\\" \\", 3) timestamp = f\\"{parts[0]} {parts[1]}\\" entry_server_id = int(parts[2]) event_type = parts[3].split()[0] if entry_server_id == server_id: result[event_type][\\"count\\"] += 1 result[event_type][\\"last_timestamp\\"] = timestamp return result def format_summary(report): Formats the summary report into a string output. :param report: Dictionary containing the report generated by process_log_entries. :return: Formatted string of the summary report. return ( f\\"ERROR count: {report[\'ERROR\'][\'count\']} last timestamp: {report[\'ERROR\'][\'last_timestamp\']}n\\" f\\"WARNING count: {report[\'WARNING\'][\'count\']} last timestamp: {report[\'WARNING\'][\'last_timestamp\']}n\\" f\\"INFO count: {report[\'INFO\'][\'count\']} last timestamp: {report[\'INFO\'][\'last_timestamp\']}\\" ) def generate_summary(log_entries, server_id): report = process_log_entries(log_entries, server_id) return format_summary(report)"},{"question":"You are given a function that performs one of two operations on a list of integers: either it adds a fixed integer `x` to every element or subtracts `x` from every element. You can call this function with a list and the fixed integer `x`, and it will return the modified list. Your task is to determine which operation (addition or subtraction) the function performs. You are allowed to call the function exactly twice with any list of your choice to figure out which operation it performs. Implement a function that determines whether the original function performs addition or subtraction, and return 0 if it performs addition or 1 if it performs subtraction. Your function should have the following signature: ```python def determine_operation(func: Callable[[List[int], int], List[int]], x: int) -> int: # Your code here ``` # Example Assume the provided function is either of the two forms: ```python def func(lst: List[int], x: int) -> List[int]: return [item + x for item in lst] ``` or ```python def func(lst: List[int], x: int) -> List[int]: return [item - x for item in lst] ``` If `x` is `5`, and we test with the list `[1, 2, 3]`, calling the function will give `[6, 7, 8]` if it performs addition or `[-4, -3, -2]` if it performs subtraction. By cleverly choosing your test lists and analyzing the results, you should be able to identify the operation performed.","solution":"from typing import Callable, List def determine_operation(func: Callable[[List[int], int], List[int]], x: int) -> int: # Define a test list test_list = [0] # Call the function with the test list and x result1 = func(test_list, x) # Check the result to determine whether it\'s addition or subtraction if result1[0] == x: return 0 # Indicates addition else: return 1 # Indicates subtraction"},{"question":"You are given an m x n binary matrix grid. An island is a group of `1`s (representing land) connected 4-directionally (horizontal or vertical). You may assume all four edges of the grid are surrounded by water (`0`s). The perimeter of an island is the total length of the boundary between the island and the water. Write a function to calculate the perimeter of the island. # Input The input consists of an integer m (1 ≤ m ≤ 100), which represents the number of rows, followed by an integer n (1 ≤ n ≤ 100), which represents the number of columns. After that, m lines follow, each containing n integers (0 or 1) separated by spaces. # Output Print the perimeter of the island. # Example Input ``` 4 4 0 1 0 0 1 1 1 0 0 1 0 0 1 1 0 0 ``` Output ``` 16 ``` # Note - In the given example, the island in the grid has a perimeter of 16. - The function should be efficient enough to handle the edge cases within the constraints.","solution":"def island_perimeter(grid): Calculate the perimeter of the island in the given grid. Parameters: grid (List[List[int]]): 2D binary matrix where 1 represents land and 0 represents water. Returns: int: The perimeter of the island. if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) perimeter = 0 for i in range(m): for j in range(n): if grid[i][j] == 1: perimeter += 4 if i > 0 and grid[i-1][j] == 1: # Check upper cell perimeter -= 2 if j > 0 and grid[i][j-1] == 1: # Check left cell perimeter -= 2 return perimeter"},{"question":"Sarah has a bookshelf where she keeps her favorite books. Occasionally, Sarah likes to rearrange her bookshelf to make it look neat and organized. The bookshelf can hold up to `n` books, and Sarah wants to arrange them in a way that maximizes the visual appeal. The visual appeal of the bookshelf is defined as the minimum number of consecutive books of the same height. In other words, Sarah finds it more visually appealing when there are fewer groups of books that are of the same height. You need to write a program that helps Sarah determine the maximum visual appeal she can achieve given a list of heights for the books she currently has. The first line contains a single integer `n` (1 ≤ `n` ≤ 1000) — the number of books on the bookshelf. The second line contains `n` integers `h1, h2, ..., hn` (1 ≤ `hi` ≤ 100) — the heights of the books. Output a single integer — the maximum visual appeal Sarah can achieve by rearranging the books on her bookshelf. # Example **Input:** ``` 5 1 2 2 3 1 ``` **Output:** ``` 4 ``` **Explanation:** One possible arrangement that gives the maximum visual appeal is `1 2 3 1 2`. Here, there are four groups of books of the same height: `{1}`, `{2}`, `{3}`, `{1}`, `{2}`. Therefore, the maximum visual appeal Sarah can achieve is 4. Another possible arrangement could be `2 1 3 2 1` which results in the same visual appeal. (Note: The output can vary as there might be multiple valid arrangements that result in the same visual appeal.)","solution":"from collections import Counter def max_visual_appeal(n, heights): Returns the maximum visual appeal for arranging the given books. # Count the frequency of each height. height_counts = Counter(heights) # The maximum visual appeal is achieved when each unique height is sorted in a round-robin fashion. unique_heights = list(height_counts.keys()) unique_count = len(unique_heights) return unique_count # Example Usage: n = 5 heights = [1, 2, 2, 3, 1] print(max_visual_appeal(n, heights)) # Output: 4"},{"question":"An ancient city is celebrating its cultural festival, and they have organized a series of musical performances. There are n performances scheduled across various stages at different times throughout the festival days. For each performance, you know the starting and ending time: two integers s_i, and e_i. Some performances have overlapping times, and people can attend only one performance at a time. You want to determine the maximum number of non-overlapping performances that can be attended throughout the festival. You are provided with multiple test cases. For each test case, determine the maximum number of performances that can be attended without any overlap. The first line of the input contains integer t (1 le t le 100) — the number of test cases. Then the test cases follow. The first line of each test case contains integer n (1 le n le 500) — the number of performances scheduled. Next n lines follow, each containing two integers s_i and e_i (1 le s_i < e_i le 10^6) — the start and end time of the performance. The sum of n among all test cases in the input does not exceed 500. Output t integers — the maximum number of non-overlapping performances for each test case. # Example Input ``` 2 3 1 4 2 6 5 8 4 1 3 2 4 3 5 6 8 ``` Output ``` 2 3 ``` # Explanation In the first test case, the maximum number of non-overlapping performances is 2 ([1, 4] and [5, 8]). In the second test case, the maximum number of non-overlapping performances is 3 ([1, 3], [3, 5], and [6, 8]).","solution":"def max_non_overlapping_performances(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] intervals = test_cases[i][1] # Sort intervals by their end time intervals.sort(key=lambda x: x[1]) count = 0 end_time = 0 for interval in intervals: if interval[0] >= end_time: count += 1 end_time = interval[1] results.append(count) return results"},{"question":"You are given an array of integers representing the heights of buildings in a city skyline, where the heights are given in meters. Each building in the array is standing side by side. Your task is to calculate the total amount of rainwater that would be trapped between the buildings after a heavy rainfall. The rainwater is trapped between buildings where there are dips or valleys. You should implement the following function: ```python def trap(height: List[int]) -> int: # Your code here ``` # Input - An array of integers `height` where `1 <= len(height) <= 100,000` and `0 <= height[i] <= 100,000`. # Output - Return a single integer representing the total volume of rainwater trapped. # Example Example 1 Input: ```python trap([0,1,0,2,1,0,1,3,2,1,2,1]) ``` Output: ``` 6 ``` Explanation: Water trapped at each index is 0 + 0 + 1 + 0 + 1 + 2 + 1 + 0 + 0 + 1 + 0 = 6 units. Example 2 Input: ```python trap([4,2,0,3,2,5]) ``` Output: ``` 9 ``` Explanation: Water trapped at each index is 0 + 2 + 4 + 1 + 2 + 0 = 9 units. # Notes - You must devise an efficient algorithm to handle larger inputs within reasonable time limits. - Ensure your code properly handles edge cases where no water is trapped, or the array is strictly increasing or decreasing.","solution":"from typing import List def trap(height: List[int]) -> int: if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n water_trapped = 0 # Fill left max height for each position left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) # Fill right max height for each position right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) # Calculate water trapped at each position for i in range(n): water_trapped += min(left_max[i], right_max[i]) - height[i] return water_trapped"},{"question":"You are in charge of a conveyor belt system in a warehouse. The conveyor belt consists of a sequence of crates arranged in a line. Each crate has a weight associated with it and is represented by an array of integers where the i-th integer is the weight of the i-th crate. You need to perform a series of operations on this conveyor belt to ensure efficient warehouse management. The operations are defined by a set of queries, where each query requests the total weight of crates in a continuous subsequence of the belt. More formally, you will be given an array w of length n which contains the weights of the crates. You will also be given q queries. Each query provides two integers l and r (1 le l le r le n), and you need to return the total weight of the crates from position l to position r (inclusive). # Input: - The first line contains two integers, n and q (1 le n, q le 100) — the number of crates and the number of queries. - The second line contains n space-separated integers, w_1, w_2, dots, w_n (1 le w_i le 100) — the weights of the crates. - The following q lines each contain two integers, l and r (1 le l le r le n) — the range of indices for each query. # Output: For each query, print the total weight of the crates from index l to index r. # Example: Input: ``` 5 3 2 1 4 5 3 1 3 2 4 1 5 ``` Output: ``` 7 10 15 ``` Explanation: - For the first query (1, 3), the total weight is 2+1+4 = 7. - For the second query (2, 4), the total weight is 1+4+5 = 10. - For the third query (1, 5), the total weight is 2+1+4+5+3 = 15.","solution":"def total_weight_of_crates(n, q, w, queries): results = [] for l, r in queries: # Convert 1-based index to 0-based index total_weight = sum(w[l-1:r]) results.append(total_weight) return results"},{"question":"A string is called a \\"beautiful string\\" if it contains only vowels (\'a\', \'e\', \'i\', \'o\', \'u\') and no two vowels in the string are consecutive. Given a string of length n consisting of lowercase English letters, determine whether it can be rearranged to form a beautiful string. The input consists of a single integer n (1 ≤ n ≤ 100) — the number of characters in the string, followed by a string of length n. Output \\"YES\\" if it is possible to rearrange the string to form a beautiful string, otherwise print \\"NO\\". For example, given the input \\"5 abcde\\", the rearrangement \\"abced\\" or \\"acedb\\" would make the string a beautiful string. If no such arrangement is possible, print \\"NO\\". # Sample Input 1: 5 aeiou # Sample Output 1: NO # Sample Input 2: 5 abcde # Sample Output 2: YES","solution":"def is_beautiful_string(n, s): vowels = set(\'aeiou\') vowel_count = sum(1 for char in s if char in vowels) consonant_count = n - vowel_count # If the number of vowels is more than half plus one of the string length, it\'s impossible to avoid consecutive vowels if vowel_count > (n // 2 + 1): return \\"NO\\" else: return \\"YES\\""},{"question":"You are given a string s consisting of lowercase English letters. You are allowed to perform operations on this string to make all of its characters the same. In one operation, you can choose any character from the string and replace it with any other lowercase English letter. You need to find the minimum number of operations required to make all the characters of the string the same. Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 5000). Description of the test cases follows. The first line of each test case contains a single integer n (1 le n le 10^5) — the length of the string. The next line contains the string s of length n consisting of lowercase English letters. It is guaranteed that the sum of n over all test cases does not exceed 10^5. For each test case, print the minimum number of operations to make all characters in the string the same.","solution":"def min_operations_to_same_char(t, test_cases): Returns a list of minimum operations required for each test case to make all characters in string the same. Parameters: t (int): The number of test cases. test_cases (List[Tuple[int, str]]): A list of tuples where each tuple contains an integer n and a string s. Returns: List[int]: A list of minimum operations required for each test case. import collections results = [] for n, s in test_cases: char_count = collections.Counter(s) max_freq = max(char_count.values()) min_operations = n - max_freq results.append(min_operations) return results"},{"question":"You are given a list of integers that represents the price of items in a store. Your task is to find the longest sequence of items such that the sum of their prices does not exceed a given budget. The input consists of a single integer b (1 ≤ b ≤ 10^9) which represents the budget, followed by an integer n (1 ≤ n ≤ 2 * 10^5) which indicates the number of items in the store. The following n integers represents the price of each item in the store (1 ≤ price ≤ 10^6). Output a single integer which is the length of the longest sequence of items such that the sum of their prices does not exceed the given budget. **Example:** Input: ``` 10 5 1 2 3 4 5 ``` Output: ``` 4 ``` In the example above, the longest sequence of items that do not exceed the budget of 10 is 1+2+3+4=10, which includes 4 items.","solution":"def longest_sequence_within_budget(b, n, prices): Finds the longest sequence of items such that the sum of their prices does not exceed the given budget. :param b: int, budget constraint :param n: int, number of items :param prices: list of ints, prices of items :return: int, length of the longest sequence of items within the budget left = 0 current_sum = 0 max_length = 0 for right in range(n): current_sum += prices[right] while current_sum > b: current_sum -= prices[left] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"Kira loves building towers using wooden blocks of varying heights. She has n blocks, and she arranges them such that each block can only be placed on top of a block taller than or equal to it. However, she can also place multiple blocks side by side to form a row, provided they are in non-increasing order from left to right in height. Kira wants to know the height of the tallest tower she can build using these rules. You are given an integer n (1 ≤ n ≤ 10^5) – the number of blocks. The next line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9) – the heights of the blocks. Determine the maximum height of the tallest tower she can build. # Input The first line contains an integer n. The second line contains n space-separated integers h1, h2, ..., hn. # Output Print a single integer – the height of the tallest tower. # Example Input: 5 1 3 2 4 3 Output: 4 Input: 6 6 5 4 3 2 1 Output: 6 Note: In the first example, Kira can create the tallest tower by using blocks [1, 2, 3, 4] with a height of 1 + 1 + 1 + 1 = 4. In the second example, the blocks are already in non-increasing order and the maximum possible height of the tower is using block [6], which equals a height of 6.","solution":"def tallest_tower(n, heights): Determines the maximum height of the tallest tower Kira can build using the given rules. Args: n : int : Number of blocks (1 ≤ n ≤ 10^5) heights : list of int : Heights of the blocks (1 ≤ hi ≤ 10^9) Returns: int : Height of the tallest tower. # Sort the heights in non-decreasing order heights.sort() # Maximum height of the tower is the tallest block return heights[-1]"},{"question":"Polycarpus is organizing a coding competition where each participant must solve several programming problems. He wants to ensure that the competition is fair by giving participants problems of various difficulty levels. Polycarpus has n problems, each with a specific difficulty level ranging from 1 to 100. The participants are organized into k teams, and Polycarpus wants to distribute the problems among the teams such that each team gets exactly the same number of problems and the difficulty levels are balanced. Help Polycarpus distribute the problems in such a way that the maximum difference in the sum of problem difficulties assigned to any two teams is minimized. Note that not all problems need to be used if n is not a multiple of k, but each team must receive exactly ⌊n/k⌋ or ⌈n/k⌉ problems. The first input line contains two integers n and k (1 ≤ k ≤ n ≤ 1000) — the number of problems and the number of teams, respectively. The second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 100), where pi is the difficulty level of the i-th problem. In the first line, print a single integer — the minimized version of the maximum difference in the sum of problems among the teams. In the next k lines, print the descriptions of the problems assigned to each team. In the i-th line, print the indices of the problems assigned to the i-th team (indices are 1-based and must appear in the order they are listed in the input). You can print the teams in any order. If there are multiple valid distributions, you are allowed to print any of them. For example, if there are n = 6 problems with difficulties [1, 2, 3, 4, 5, 6] and k = 3 teams, one possible way to distribute the problems is: - Team 1: [1, 6] - Team 2: [2, 5] - Team 3: [3, 4] This results in difficulty sums of 7, 7, and 7 for the three teams, respectively, with a maximum difference of 0.","solution":"def distribute_problems(n, k, problems): # Sort the problems along with their original indices indexed_problems = sorted(enumerate(problems), key=lambda x: x[1]) # Determine the size of the groups each team will receive num_problems_per_team = n // k surplus_problems = n % k # Prepare an array to hold the teams and their assigned problems teams = [[] for _ in range(k)] # Distribute the problems in a round-robin fashion team_index = 0 for i in range(n): teams[team_index].append(indexed_problems[i][0] + 1) # Use 1-based index team_index = (team_index + 1) % k return teams def main(n, k, problems): teams = distribute_problems(n, k, problems) team_sums = [sum(problems[i - 1] for i in team) for team in teams] max_difference = max(team_sums) - min(team_sums) print(max_difference) for team in teams: print(\\" \\".join(map(str, team)))"},{"question":"Sum of Alternating Series Write a function that calculates the sum of an alternating series up to the nth term. The series is defined as follows: S(n) = 1 - 2 + 3 - 4 + 5 - 6 + ... ± n The function should take an integer n as input and return the sum of the series up to the nth term. # Input - An integer t (1 le t le 10^4) representing the number of test cases. - For each test case, an integer n (1 le n le 10^9) representing the nth term up to which the series is calculated. # Output For each test case, output a single integer representing the sum of the series up to the nth term. # Example Input: 3 1 2 5 Output: 1 -1 3 # Explanation 1. For n = 1, the sum of the series is 1. 2. For n = 2, the sum of the series is 1 - 2 = -1. 3. For n = 5, the sum of the series is 1 - 2 + 3 - 4 + 5 = 3.","solution":"def sum_of_alternating_series(n): Returns the sum of the alternating series up to the nth term. The series is defined as: S(n) = 1 - 2 + 3 - 4 + 5 - 6 + ... ± n # For even n: sum = - (n / 2) # For odd n : sum = (n + 1) / 2 if n % 2 == 0: return -n // 2 else: return (n + 1) // 2"},{"question":"In a football league, each team competes against every other team exactly once. A win awards 3 points, a draw 1 point, and a loss 0 points. Given the number of teams in the league and an array containing the results of all the matches, determine the total number of points each team has earned. Input format: - An integer `t` (2 ≤ t ≤ 100), representing the number of teams. - A 2D array `results` of size t x t, where `results[i][j]` represents the result of the match between team i and team j: - 1 indicates team i won against team j - 0 indicates a draw - -1 indicates team i lost against team j - The diagonal elements `results[i][i]` will always be -1, since a team doesn\'t play against itself. Output format: - An array of integers of length t, where the ith element is the total number of points earned by the ith team. Example: Input: ``` 3 -1 0 1 0 -1 -1 -1 1 -1 ``` Output: ``` 4 1 3 ``` Explanation: - Team 0 draws with Team 1 and wins against Team 2, earning 1 + 3 = 4 points. - Team 1 draws with Team 0 and loses to Team 2, earning 1 + 0 = 1 point. - Team 2 loses to Team 0 and wins against Team 1, earning 0 + 3 = 3 points.","solution":"def calculate_points(t, results): Returns an array of the total points earned by each team. :param t: Integer, number of teams :param results: 2D array, contains results of matches between teams :return: List of points for each team points = [0] * t for i in range(t): for j in range(t): if results[i][j] == 1: points[i] += 3 elif results[i][j] == 0: points[i] += 1 return points"},{"question":"In a faraway land, there is a tournament called the Tournament of Champions, where warriors from different clans compete in duels. Each duel results in one warrior winning and the other losing. There are no ties. You have been given a record of all the duels that have taken place during the tournament. Your task is to determine if it is possible to rank all the warriors in such a way that every warrior only loses to warriors ranked higher than themselves. The ranking should be such that if warrior A defeats warrior B, then warrior A must be ranked higher than warrior B. The input consists of multiple test cases. The first input line contains a single integer T (1 ≤ T ≤ 100), the number of test cases. Then for each test case: - The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) — the number of warriors and the number of duels respectively. - The following m lines each contain two integers a and b (1 ≤ a, b ≤ n, a ≠ b), indicating that warrior a defeated warrior b in a duel. For each test case, output \\"YES\\" if it\'s possible to rank the warriors according to the given constraints, otherwise output \\"NO\\". Example input: ``` 2 3 3 1 2 2 3 3 1 4 2 1 2 2 3 ``` Example output: ``` NO YES ```","solution":"def can_rank_warriors(test_cases): def is_dag(n, edges): from collections import defaultdict, deque graph = defaultdict(list) in_degree = [0] * (n + 1) for u, v in edges: graph[u].append(v) in_degree[v] += 1 queue = deque([i for i in range(1, n + 1) if in_degree[i] == 0]) visited = 0 while queue: node = queue.popleft() visited += 1 for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) return visited == n results = [] for n, m, edges in test_cases: if is_dag(n, edges): results.append(\\"YES\\") else: results.append(\\"NO\\") return results def parse_input(input_lines): lines = input_lines.strip().split(\\"n\\") T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): n, m = map(int, lines[index].split()) index += 1 edges = [] for _ in range(m): a, b = map(int, lines[index].split()) edges.append((a, b)) index += 1 test_cases.append((n, m, edges)) return test_cases def main(input_string): test_cases = parse_input(input_string) return \\"n\\".join(can_rank_warriors(test_cases))"},{"question":"You are given an array of integers representing the heights of stacks of boxes. The task is to perform a series of operations to make all the stacks have equal height. In one operation, you can remove the top box of one of the stacks. Write a function that returns the minimum number of operations required to make all the stacks have the same height. # Input - A single integer `n` (1 <= `n` <= 10^5) representing the number of stacks. - An array of `n` integers where each integer `h_i` (1 <= `h_i` <= 10^5) represents the height of the `i-th` stack. # Output - A single integer representing the minimum number of operations required. # Example Input: ``` 5 5 3 5 2 3 ``` Output: ``` 6 ``` # Explanation 1. Remove 3 boxes from the first stack (height 5 -> 2). 2. Remove 2 boxes from the third stack (height 5 -> 3 -> 2). 3. Remove 1 box from the fourth stack (height 3 -> 2). 4. The number of total operations is 3 + 2 + 1 = 6.","solution":"def min_operations_to_equalize_heights(n, heights): Returns the minimum number of operations required to make all the stacks have the same height. :param n: int, number of stacks :param heights: list of int, heights of the stacks :return: int, minimum number of operations # Find the most common height in the list height_count = {} for height in heights: if height in height_count: height_count[height] += 1 else: height_count[height] = 1 # Find the maximum frequency of any height max_height_freq = max(height_count.values()) # The minimum operations required would be the total number of stacks minus the number of stacks already at the most common height min_operations = n - max_height_freq return min_operations"},{"question":"You are given an array of integers a. Your goal is to perform exactly one operation on the array to make it \\"Nearly Sorted\\". An array is considered \\"Nearly Sorted\\" if each element is either in its correct position, or can be moved to its correct position in exactly one swap. Your task is to determine whether it is possible to make the given array \\"Nearly Sorted\\" by performing exactly one operation: swapping two adjacent elements. The first line contains a single integer n (2 leq n leq 10^6) — the length of the array. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^6) — the elements of the array. On the first line print \'YES\' if it is possible to make the array \\"Nearly Sorted\\" by exactly one swap of adjacent elements, and \'NO\' otherwise. # Example Input: ``` 4 2 3 1 4 ``` Output: ``` YES ``` Input: ``` 5 1 5 3 4 2 ``` Output: ``` NO ``` # Explanation In the first example, swapping elements on positions 2 and 3 makes the array [2, 1, 3, 4], which is \\"Nearly Sorted\\" since each element is either in its correct position or can be moved to its correct position in exactly one swap. In the second example, no single adjacent swap can make the array \\"Nearly Sorted\\".","solution":"def can_be_nearly_sorted(n, a): Determine whether it is possible to make the array \\"Nearly Sorted\\" by swapping exactly one pair of adjacent elements. Parameters: n (int): Length of the array a (list): List of integers representing the array a Returns: str: \'YES\' if it is possible, \'NO\' otherwise # Try swapping adjacent elements and check if the array becomes \\"Nearly Sorted\\" for i in range(n-1): a[i], a[i+1] = a[i+1], a[i] if is_nearly_sorted(a): return \'YES\' a[i], a[i+1] = a[i+1], a[i] # Swap back return \'NO\' def is_nearly_sorted(a): Check if the array is \\"Nearly Sorted\\". In a \\"Nearly Sorted\\" array, each element is either in its correct position or can be moved to its correct position by one swap with an adjacent element. Parameters: a (list): List of integers representing the array a Returns: bool: True if the array is \\"Nearly Sorted\\", False otherwise n = len(a) # Count the number of out-of-order elements out_of_order = 0 for i in range(n - 1): if a[i] > a[i + 1]: out_of_order += 1 if out_of_order > 1: return False return True"},{"question":"Petya is learning about sorting algorithms. He finds that one of the simplest ways to sort an array is using the bubble sort method. Given an array of integers, he needs to implement the bubble sort algorithm to sort the array in non-decreasing order. The bubble sort works by repeatedly stepping through the list to be sorted, comparing each pair of adjacent items and swapping them if they are in the wrong order. This pass through the list is repeated until the list is sorted. Write a function `bubble_sort(arr)` that takes a list of integers `arr` as input and returns the sorted list. # Input - The input is a list `arr` containing up to 1000 integers. # Output - The function should return a list of integers sorted in non-decreasing order. # Examples Example 1 Input: `arr = [64, 34, 25, 12, 22, 11, 90]` Output: `[11, 12, 22, 25, 34, 64, 90]` Example 2 Input: `arr = [5, 1, 4, 2, 8]` Output: `[1, 2, 4, 5, 8]` # Constraints - The list `arr` will contain no more than 1000 integers. - Each integer in the list is within the range `-10^9` to `10^9`.","solution":"def bubble_sort(arr): Sorts the input list of integers in non-decreasing order using the bubble sort algorithm. Parameters: arr (list): A list of integers to be sorted. Returns: list: The sorted list of integers in non-decreasing order. n = len(arr) # Traverse through all elements in the list for i in range(n): # Last i elements are already sorted for j in range(0, n-i-1): # Traverse the list from 0 to n-i-1 # Swap if the element found is greater than the next element if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Consider a company with a project management system that involves several employees and projects. Employees are either working individually on unique projects or collaborating in groups. Each project has a unique identifier, and each employee is represented by a unique ID. Given the total number of employees `n` and a list of collaborations where each entry is a pair of employee IDs indicating that those two employees are collaborating on the same project, you need to determine how many unique projects are there. Note that if an employee collaborates with multiple employees, they belong to the same project. Write a function `count_projects(n, collaborations)` that takes the number of employees `n` (1 ≤ n ≤ 100,000) and a list of tuples `(a, b)` representing the collaborations, and returns the number of unique projects. The function should use the Union-Find (Disjoint Set Union) data structure to efficiently manage and merge groups. # Input - `n`: an integer representing the number of employees. - `collaborations`: a list of tuples where each tuple `(a, b)` (1 ≤ a, b ≤ n) represents a collaboration between employee `a` and employee `b`. # Output - The function should return an integer representing the number of unique projects. # Example ```python def count_projects(n, collaborations): # Your implementation here # Example usage: n = 5 collaborations = [(1, 2), (2, 3), (4, 5)] print(count_projects(n, collaborations)) # Output: 2 ``` # Constraints - The function should work efficiently with union-find operations to handle up to 100,000 employees and 100,000 collaborations.","solution":"class UnionFind: def __init__(self, n): self.parent = list(range(n)) self.rank = [0] * n def find(self, i): if self.parent[i] != i: self.parent[i] = self.find(self.parent[i]) return self.parent[i] def union(self, i, j): root_i = self.find(i) root_j = self.find(j) if root_i != root_j: if self.rank[root_i] > self.rank[root_j]: self.parent[root_j] = root_i elif self.rank[root_i] < self.rank[root_j]: self.parent[root_i] = root_j else: self.parent[root_j] = root_i self.rank[root_i] += 1 def count_projects(n, collaborations): uf = UnionFind(n) for a, b in collaborations: uf.union(a - 1, b - 1) unique_projects = len(set(uf.find(i) for i in range(n))) return unique_projects"},{"question":"Build a function `mystery_solver` that takes a list of integers as input and outputs a string indicating the outcome. The function checks if the list contains a contiguous subarray that sums up to 0. If such a subarray exists, the function should return `\\"Subarray Found\\"`, otherwise it should return `\\"Subarray Not Found\\"`. To solve this problem, you can use the following strategy: - Use a set to store the cumulative sums of the elements as you iterate through the list. - If the cumulative sum at any point repeats or is zero, then there exists a subarray with a sum of 0. Function Signature: ```python def mystery_solver(arr: List[int]) -> str: ``` # Input - A list `arr` of integers where `1 ≤ len(arr) ≤ 10^5` and each element is in the range of `-10^4 ≤ arr[i] ≤ 10^4`. # Output - A string `\\"Subarray Found\\"` if there exists any subarray with a sum of 0, otherwise `\\"Subarray Not Found\\"`. # Example ```python # Example 1 mystery_solver([1, 2, -3, 4, 5]) # Output: \\"Subarray Found\\", because the subarray [1, 2, -3] sums to 0. # Example 2 mystery_solver([1, 2, 3, 4, 5]) # Output: \\"Subarray Not Found\\", there is no subarray that sums to 0. ``` # Notes - The function should be efficient to handle the maximum input size. - Pay attention to edge cases, such as the presence of zeros in the list, or all positive/negative numbers.","solution":"def mystery_solver(arr): Determines if there exists a contiguous subarray that sums up to 0. Parameters: arr (list of int): List of integers to be checked. Returns: str: \\"Subarray Found\\" if a subarray with sum 0 exists, otherwise \\"Subarray Not Found\\". cumulative_sum = 0 seen_sums = set() for num in arr: cumulative_sum += num if cumulative_sum == 0 or cumulative_sum in seen_sums: return \\"Subarray Found\\" seen_sums.add(cumulative_sum) return \\"Subarray Not Found\\""},{"question":"Polycarp wants to create a tournament for his game, where each player competes against every other player exactly once. The competition results are shown in a matrix where rows represent players, and columns represent their opponents. The cell matrix[i][j] will contain the result of the match between player i and player j which can be \'W\' (win), \'L\' (loss), or \'D\' (draw). Polycarp needs to determine if the given results are consistent. The results are consistent if for every i and j: - matrix[i][j] == \'W\' implies matrix[j][i] == \'L\' - matrix[i][j] == \'L\' implies matrix[j][i] == \'W\' - matrix[i][j] == \'D\' implies matrix[j][i] == \'D\' The first line contains a single integer t (1 ≤ t ≤ 20) — the number of test cases. Each test case begins with a single integer n (2 ≤ n ≤ 10) — the number of players. Next, n lines follow, each containing exactly n characters which are either \'W\', \'L\', or \'D\' — the results matrix for the matches. Help Polycarp determine if the tournament results are consistent for each test case. For each test case, print \\"YES\\" if the results are consistent or \\"NO\\" otherwise.","solution":"def check_tournament_consistency(t, test_cases): results = [] for case in test_cases: n, matrix = case consistent = True for i in range(n): for j in range(n): if i != j: if matrix[i][j] == \'W\' and matrix[j][i] != \'L\': consistent = False elif matrix[i][j] == \'L\' and matrix[j][i] != \'W\': consistent = False elif matrix[i][j] == \'D\' and matrix[j][i] != \'D\': consistent = False if not consistent: break if not consistent: break results.append(\\"YES\\" if consistent else \\"NO\\") return results # Example usage: # t = 2 # test_cases = [ # (3, [ # \\"DWL\\", # \\"LDW\\", # \\"WLD\\" # ]), # (2, [ # \\"DW\\", # \\"WD\\" # ]) # ] # print(check_tournament_consistency(t, test_cases)) # # Output should be [\'YES\', \'YES\']"},{"question":"Consider a grid of size m x n where you are initially positioned at the top-left corner of the grid (1, 1). Each cell in the grid contains a number representing the energy cost to step into that cell. Your goal is to reach the bottom-right corner of the grid (m, n) with the minimum possible total energy cost. You can only move right or down from each cell. Write a program that finds the minimum total energy cost to reach the bottom-right corner of the grid. Input: - The first line contains two integers, m and n (1 ≤ m, n ≤ 100), representing the dimensions of the grid. - The next m lines each contain n integers, where each integer represents the energy cost of the corresponding cell in the grid (0 ≤ cell energy cost ≤ 100). Output: - Print a single integer representing the minimum total energy cost to reach the bottom-right corner of the grid. Examples: Input: 3 3 1 3 1 1 5 1 4 2 1 Output: 7 Explanation: The path with the minimum total energy cost is (1→3→1→1→1). The total cost is 1 + 3 + 1 + 1 + 1 = 7. Input: 2 2 1 2 1 1 Output: 3 Explanation: The path with the minimum total energy cost is (1→2→1). The total cost is 1 + 2 + 1 = 4. Note: - You may assume that the energy costs in the input are non-negative integers.","solution":"def min_energy_cost(m, n, grid): Returns the minimum total energy cost to reach the bottom-right corner of the grid. Parameters: m (int): Number of rows in the grid. n (int): Number of columns in the grid. grid (list of list of ints): 2D grid representing the energy costs. Returns: int: Minimum total energy cost. if m == 0 or n == 0: return 0 dp = [[0] * n for _ in range(m)] dp[0][0] = grid[0][0] for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] for i in range(1, m): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[m-1][n-1]"},{"question":"You are a developer working on a social network platform. The platform needs to handle a feature where users can follow each other and recommend new users to follow based on mutual connections. Each user is represented as a node and each \\"follow\\" relationship as a directed edge between nodes in a directed graph. Your task is to write a program that performs the following operations: 1. Follow: A user follows another user. 2. Unfollow: A user unfollows another user. 3. Mutual Connections: List mutual users that both specified users follow. Input: - The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of operations. - Each of the next n lines describes an operation in one of the following formats: - \\"F u v\\" where u follows v (1 ≤ u, v ≤ 100,000). - \\"U u v\\" where u unfollows v (1 ≤ u, v ≤ 100,000). - \\"M u v\\" where you need to output all mutual users that both u and v follow (1 ≤ u, v ≤ 100,000). Output: - For each \\"M u v\\" operation, print the mutual users that both u and v follow, sorted in ascending order. If there are no mutual users, print \\"-1\\". Example: ``` Input: 7 F 1 2 F 1 3 F 2 3 F 2 4 U 1 2 M 1 2 M 2 3 Output: 3 -1 ``` Note: For the \\"Unfollow\\" operation, if the users are not connected, perform no action. Mutual users should be printed in ascending order, and if no mutual users exist, return \\"-1\\".","solution":"def social_network(operations): from collections import defaultdict follows = defaultdict(set) def follow(u, v): follows[u].add(v) def unfollow(u, v): if v in follows[u]: follows[u].remove(v) def mutual_connections(u, v): mutual = follows[u].intersection(follows[v]) if mutual: return sorted(mutual) return [-1] results = [] for operation in operations: op = operation.split() cmd, u, v = op[0], int(op[1]), int(op[2]) if cmd == \\"F\\": follow(u, v) elif cmd == \\"U\\": unfollow(u, v) elif cmd == \\"M\\": results.append(mutual_connections(u, v)) return results"},{"question":"A company wishes to implement a special performance review system for its employees. Each employee has a number of recorded performance metrics for a given month, and each metric is an integer value. The system should identify and reward consistency among employees\' performances. In particular, an employee is considered consistent if the difference between any two consecutive performance metrics is the same throughout the month. Write a program that determines whether an employee\'s performance metrics are consistent. The input consists of: - A single integer t (1 ≤ t ≤ 100) — the number of employees. - For each employee: - An integer n (2 ≤ n ≤ 100) — the number of performance metrics recorded for the employee. - A sequence of n integers p1, p2, ..., pn (−10^9 ≤ pi ≤ 10^9) representing the performance metrics. For each employee, print \\"Consistent\\" if the difference between any two consecutive performance metrics is the same, otherwise print \\"Inconsistent\\". Example: Input: 3 4 -1 1 3 5 3 7 5 3 5 1 2 4 8 16 Output: Consistent Consistent Inconsistent In the first sample, the differences between consecutive metrics are 2, 2, and 2, which are consistent. In the second sample, the differences are -2 and -2, which are consistent. In the third sample, the differences are 1, 2, 4, and 8, which are not consistent.","solution":"def is_consistent(differences): Helper function to determine if the list of differences are all the same. return all(d == differences[0] for d in differences) def check_consistency(t, data): Determine whether each employee\'s performance metrics are consistent. Parameters: t (int): number of employees. data (list): list of tuples for each employee, where each tuple contains - an integer n (number of performance metrics) - a sequence of n integers representing the performance metrics Returns: list: A list of strings, \\"Consistent\\" or \\"Inconsistent\\" for each employee. results = [] for performance in data: n, metrics = performance differences = [metrics[i+1] - metrics[i] for i in range(n-1)] if is_consistent(differences): results.append(\\"Consistent\\") else: results.append(\\"Inconsistent\\") return results"},{"question":"You are working on a new data management application and need to manage the access levels for different users. The application contains a list of users with different access levels and has required functionalities for modification and access queries. Implement the following functionalities in Python: 1. **Add a new user** with a username and access level. 2. **Remove an existing user** by their username. 3. **Update a user\'s access level**. 4. **Query** the access level of a user by their username. 5. **List all users** and their access levels in alphabetical order by their username. Write a class `AccessControl` to implement this functionality. The class should support the following methods: - `add_user(self, username: str, access_level: int) -> bool`: Adds a new user with the specified username and access level. Returns `True` if the user is added successfully. If a user with the same username already exists, return `False`. - `remove_user(self, username: str) -> bool`: Removes an existing user by their username. Returns `True` if the user is removed successfully. If no such user exists, return `False`. - `update_access(self, username: str, access_level: int) -> bool`: Updates the access level of the specified user. Returns `True` if the user\'s access level is updated successfully. If no such user exists, return `False`. - `get_access(self, username: str) -> int`: Returns the access level of the specified user. If no such user exists, return `-1`. - `list_users(self) -> List[Tuple[str, int]]`: Returns a list of tuples containing the username and access level of all users, sorted alphabetically by username. **Note**: You can assume that usernames are unique and are case-sensitive. **Examples**: ```python ac = AccessControl() print(ac.add_user(\\"alice\\", 5)) # True print(ac.add_user(\\"bob\\", 3)) # True print(ac.add_user(\\"alice\\", 7)) # False print(ac.get_access(\\"alice\\")) # 5 print(ac.update_access(\\"alice\\", 7)) # True print(ac.get_access(\\"alice\\")) # 7 print(ac.remove_user(\\"charlie\\")) # False print(ac.remove_user(\\"bob\\")) # True print(ac.list_users()) # [(\\"alice\\", 7)] ``` Implement the `AccessControl` class in Python.","solution":"from typing import List, Tuple class AccessControl: def __init__(self): self.users = {} def add_user(self, username: str, access_level: int) -> bool: if username in self.users: return False self.users[username] = access_level return True def remove_user(self, username: str) -> bool: if username not in self.users: return False del self.users[username] return True def update_access(self, username: str, access_level: int) -> bool: if username not in self.users: return False self.users[username] = access_level return True def get_access(self, username: str) -> int: return self.users.get(username, -1) def list_users(self) -> List[Tuple[str, int]]: return sorted(self.users.items())"},{"question":"Given a directed graph represented as an adjacency list, determine if there is a cycle in the graph. A cycle is defined as a path that starts and ends at the same vertex, with at least one other vertex involved in the path. # Input - The first line contains an integer `n` (1 ≤ n ≤ 10^3), the number of vertices in the graph. - The second line contains an integer `m` (0 ≤ m ≤ 10^4), the number of edges in the graph. - The next `m` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n), indicating a directed edge from vertex `u` to vertex `v`. # Output - Print \\"Cycle detected\\" if there is at least one cycle in the graph. - Print \\"No cycle\\" if there are no cycles in the graph. # Example Input ``` 4 4 1 2 2 3 3 4 4 2 ``` Output ``` Cycle detected ``` Input ``` 4 3 1 2 2 3 3 4 ``` Output ``` No cycle ``` # Note Use Depth First Search (DFS) to detect cycles in the directed graph. During the DFS traversal, if you encounter a node that is currently in the recursion stack, then there is a cycle in the graph.","solution":"def detect_cycle(n, m, edges): from collections import defaultdict, deque def dfs(vertex): visited[vertex] = True recursion_stack[vertex] = True for neighbor in adj_list[vertex]: if not visited[neighbor]: if dfs(neighbor): return True elif recursion_stack[neighbor]: return True recursion_stack[vertex] = False return False adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) visited = [False] * (n + 1) recursion_stack = [False] * (n + 1) for node in range(1, n + 1): if not visited[node]: if dfs(node): return \\"Cycle detected\\" return \\"No cycle\\" # Helper function to parse input and call detect_cycle def detect_cycle_from_input(input_data): input_lines = input_data.strip().split(\'n\') n = int(input_lines[0]) m = int(input_lines[1]) edges = [tuple(map(int, line.split())) for line in input_lines[2:]] return detect_cycle(n, m, edges)"},{"question":"You are given a rectangular grid of cells with `n` rows and `m` columns. Each cell in the grid can either be empty (\'.\') or contain an obstacle (\'#\'). A robot can move from one cell to another as long as it is within the grid and the destination cell is empty. The robot can move in four directions: up, down, left, and right. Your task is to find the length of the shortest path from the top-left corner of the grid (cell (1, 1)) to the bottom-right corner of the grid (cell (n, m)). If there is no such path, return -1. The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 100) — the number of rows and columns in the grid. The following `n` lines contain `m` characters each — the description of the grid. Output a single integer — the length of the shortest path from the top-left corner to the bottom-right corner or -1 if there is no path. **Example:** ``` Input: 4 4 .... .. ..#. .... Output: 6 Input: 3 3 ..# .#. ... Output: 4 Input: 2 2 #. .# Output: -1 ``` In the first example, the shortest path goes from (1,1) -> (2,1) -> (3,1) -> (3,2) -> (4,2) -> (4,3) -> (4,4) with a length of 6 movements. In the second example, the shortest path goes from (1,1) -> (1,2) -> (2,2) -> (3,2) -> (3,3) with a length of 4 movements. In the third example, there is no possible path from the top-left corner to the bottom-right corner.","solution":"from collections import deque def shortest_path(grid, n, m): def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' def bfs(start, end): queue = deque([(start[0], start[1], 0)]) # queue holds (x, y, distance) visited = set() visited.add((start[0], start[1])) dirs = [(-1, 0), (1, 0), (0, -1), (0, 1)] # up, down, left, right while queue: x, y, dist = queue.popleft() if (x, y) == end: return dist for dx, dy in dirs: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 return bfs((0, 0), (n - 1, m - 1))"},{"question":"You are given an array of integers that may contain both positive and negative numbers. You need to find the subset of this array which has the maximum sum among all subsets. A subset can be the whole array or it can be an empty array (which would sum to 0). The input line contains an integer array of length n where 1 <= n <= 10^5. The array elements are integers where -10^9 <= element <= 10^9. Output a single integer - the maximum sum of the subset of the array. Example 1: ``` Input: [-2, 1, -3, 4, -1, 2, 1, -5, 4] Output: 6 Explanation: The subset [4, -1, 2, 1] has the maximum sum 6. ``` Example 2: ``` Input: [1] Output: 1 Explanation: The subset [1] has the maximum sum 1. ``` Example 3: ``` Input: [-1, -2, -3, -4] Output: 0 Explanation: The subset [] has the maximum sum 0. ``` Your task is to implement a function that finds and returns the maximum sum of the subset. This problem can be tackled using dynamic programming techniques such as Kadane\'s Algorithm for efficient computation.","solution":"def max_subset_sum(arr): Returns the maximum sum of a subset of the given array. Uses Kadane\'s Algorithm to find the maximum sum of a contiguous subarray. if not arr: return 0 max_sum = arr[0] current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max(max_sum, 0)"},{"question":"You are given an array of integers arr and you need to perform a series of operations to make all elements of the array equal. In a single operation, you can increase or decrease any element of the array by 1. The cost of each operation is exactly 1. Your task is to find the minimum cost required to make all the elements of the array equal. # Input The first line contains an integer T (1 le T le 10,000) — the number of test cases. Each of the next T lines describes a test case and contains: - An integer n (1 le n le 10^5) — the number of elements in the array arr. - An array arr of n integers. Each integer arr[i] (1 le arr[i] le 10^9) represents an element of the array. It is guaranteed that the sum of n over all test cases does not exceed 10^5. # Output For each test case, output a single integer — the minimum cost required to make all elements of the corresponding array equal. # Example Input ``` 3 3 1 2 3 4 1 3 0 4 2 5 5 ``` Output ``` 2 6 0 ``` # Note In the first test case, you can make all elements equal to 2 at a cost of 1+1 = 2. In the second test case, you can make all elements equal to 2 at a cost of 1+1+2+2 = 6. In the third test case, all elements are already equal, so the cost is 0.","solution":"def min_cost_to_make_elements_equal(test_cases): Calculates the minimum cost to make all elements of each given array equal. Parameters: test_cases (list): List of tuples where each tuple represents a test case and contains: - integer n: the number of elements in the array. - list arr: the array of integers. Returns: list: A list of integers, where each integer is the minimum cost for the corresponding test case. results = [] for n, arr in test_cases: median = sorted(arr)[n // 2] # Find the median of the array cost = sum(abs(x - median) for x in arr) # Calculate total cost to make all elements equal to the median results.append(cost) return results"},{"question":"You are planning a hiking trip in a mountainous region and you need to determine the most efficient way to carry your water supplies. There are several water stations along the trail, each providing a certain amount of water that you can collect to refill your bottles. However, your water bottles have a limited capacity and can only hold a certain amount of water in total. Given an array of positive integers representing the amount of water available at each station, and the capacity of your water bottles, write a function that determines the maximum number of water stations you can visit without exceeding the total capacity of your water bottles. You may start collecting water from any station and you can only move to the next station after visiting the current one. Write a function `maxWaterStations(stations, capacity)` that takes an array stations where each element represents the amount of water available at that station, and an integer capacity representing the maximum amount of water your bottles can hold. The function should return the maximum number of water stations you can visit without exceeding the bottle capacity. __Input__: - An array of integers `stations` representing the amount of water each station provides (1 ≤ |stations| ≤ 100, 1 ≤ stations[i] ≤ 100). - An integer `capacity` representing the total capacity of your water bottles (1 ≤ capacity ≤ 1000). __Output__: - An integer representing the maximum number of water stations you can visit. __Example__: ```python maxWaterStations([10, 20, 30, 40], 60) ``` Output: ``` 3 ``` Explanation: You can visit the first three stations and collect a total of 10 + 20 + 30 = 60 units of water without exceeding the capacity. You cannot visit the fourth station because it would exceed the water bottle capacity.","solution":"def maxWaterStations(stations, capacity): Determines the maximum number of water stations that can be visited without exceeding the total capacity of water bottles. Parameters: stations (list of int): The amount of water available at each station. capacity (int): The total capacity of the water bottles. Returns: int: The maximum number of water stations that can be visited. total_water = 0 count = 0 for water in stations: if total_water + water <= capacity: total_water += water count += 1 else: break return count"},{"question":"You are given a number of jars and candies. Each jar can hold a certain number of candies, but no jar can have more candies than its capacity. Your task is to determine the minimum number of jars required to store exactly the given number of candies, or determine if it\'s not possible. # Input - The first line of the input contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 1000), where n is the number of jars and m is the total number of candies that need to be stored. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100), where ai is the capacity of the i-th jar. # Output Output a single integer: the minimum number of jars required to store exactly m candies. If it is not possible to store exactly m candies, output -1. # Example Input ``` 5 15 5 1 2 7 3 ``` Output ``` 3 ``` Explanation In the example, one optimal way to store exactly 15 candies is to use the jars with capacities 7, 5, and 3 (7 + 5 + 3 = 15). Therefore, the minimum number of jars required is 3.","solution":"def min_jars_to_store_candies(n, m, capacities): capacities.sort(reverse=True) total_candies = 0 jars_used = 0 for capacity in capacities: if total_candies < m: total_candies += capacity jars_used += 1 if total_candies >= m: return jars_used return -1 if total_candies < m else jars_used # Example usage n, m = 5, 15 capacities = [5, 1, 2, 7, 3] print(min_jars_to_store_candies(n, m, capacities)) # Output: 3"},{"question":"Given two strings, `s` and `t`, determine whether `t` is an anagram of `s`. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Note that the comparison is case-sensitive and whitespace is not ignored. Write a function `is_anagram(s: str, t: str) -> bool` that takes in two strings and returns `True` if `t` is an anagram of `s`, and `False` otherwise. # Function Signature ```python def is_anagram(s: str, t: str) -> bool: ``` # Input - `s` (1 <= len(s) <= 10^5) - the first string. - `t` (1 <= len(t) <= 10^5) - the second string. # Output - Return `True` if `t` is an anagram of `s`, otherwise return `False`. # Example Example 1 ```python s = \\"anagram\\" t = \\"nagaram\\" is_anagram(s, t) ``` # Output ```python True ``` Example 2 ```python s = \\"rat\\" t = \\"car\\" is_anagram(s, t) ``` # Output ```python False ``` # Constraints - Both input strings will contain only lowercase English letters. # Note Consider the frequency of each character in both strings to solve the problem. Sorting both strings and comparing them is a simple way to determine if two strings are anagrams, but keep in mind the computational complexity of sorting. You may also consider other optimization techniques to improve performance.","solution":"def is_anagram(s: str, t: str) -> bool: Determines if string t is an anagram of string s. # First check if the lengths are equal, if not they can\'t be anagrams if len(s) != len(t): return False # Count the frequency of characters in both strings char_count_s = {} char_count_t = {} for char in s: if char in char_count_s: char_count_s[char] += 1 else: char_count_s[char] = 1 for char in t: if char in char_count_t: char_count_t[char] += 1 else: char_count_t[char] = 1 # Compare the character counts return char_count_s == char_count_t"},{"question":"You are given a binary tree with n nodes. You need to find the length of the longest path in the tree such that the path is strictly increasing (each node\'s value must be greater than its parent node\'s value on that path). The first line contains an integer n (1 ≤ n ≤ 50,000) — the number of nodes in the tree. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the values of the nodes in the tree. Each of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) indicating that there is an edge between nodes u and v in the tree. Output a single integer: the length of the longest strictly increasing path in the tree. If there is no strictly increasing path, output 0.","solution":"from collections import defaultdict import sys sys.setrecursionlimit(100000) # Increase the recursion limit for deep recursions def find_longest_increasing_path(n, values, edges): tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) def dfs(node, parent): max_len = 0 second_max_len = 0 for neighbor in tree[node]: if neighbor != parent and values[neighbor - 1] > values[node - 1]: current_len = dfs(neighbor, node) if current_len > max_len: second_max_len = max_len max_len = current_len elif current_len > second_max_len: second_max_len = current_len nonlocal longest_path longest_path = max(longest_path, max_len + 1) return max_len + 1 longest_path = 0 dfs(1, -1) return longest_path - 1 if longest_path > 0 else 0 # Example usage n = 5 values = [1, 2, 3, 4, 5] edges = [(1, 2), (2, 3), (3, 4), (4, 5)] print(find_longest_increasing_path(n, values, edges)) # Output: 4"},{"question":"You are working for a delivery company, and you want to optimize the delivery routes to save time and costs. The delivery area can be represented as an n x n grid. The delivery truck starts at the top-left corner (0, 0) of the grid and needs to reach the bottom-right corner (n-1, n-1). Each cell in the grid has a delivery cost or a blocked path: - A positive integer indicates the delivery cost of passing through the cell. - A value of -1 indicates that the cell is blocked and cannot be passed. The truck can only move either right or down at any point in time. Write a program to determine the minimum delivery cost to reach the bottom-right corner of the grid. If there is no valid path, return -1. # Input The first line contains an integer n (1 ≤ n ≤ 100), which is the size of the grid. Each of the next n lines contains n integers representing the grid values. # Output Print a single integer, which is the minimum delivery cost to reach the bottom-right corner of the grid. Print -1 if there is no valid path. # Examples Example 1 Input: ``` 3 1 2 3 4 -1 6 7 8 9 ``` Output: ``` 21 ``` Example Explanation The minimum cost path is 1 → 2 → 3 → 6 → 9, totaling 21. Example 2 Input: ``` 2 1 -1 -1 2 ``` Output: ``` -1 ``` Example Explanation There is no valid path from the top-left to the bottom-right corner.","solution":"import heapq def min_delivery_cost(n, grid): if grid[0][0] == -1 or grid[n-1][n-1] == -1: return -1 directions = [(1, 0), (0, 1)] costs = [[float(\'inf\')] * n for _ in range(n)] costs[0][0] = grid[0][0] min_heap = [(grid[0][0], 0, 0)] while min_heap: current_cost, x, y = heapq.heappop(min_heap) if x == n-1 and y == n-1: return current_cost for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] != -1: next_cost = current_cost + grid[nx][ny] if next_cost < costs[nx][ny]: costs[nx][ny] = next_cost heapq.heappush(min_heap, (next_cost, nx, ny)) return -1 if costs[n-1][n-1] == float(\'inf\') else costs[n-1][n-1]"},{"question":"You are given a string, `s`, consisting of lowercase English letters. In one move, you can replace any character in the string with any other lowercase English letter. Your task is to determine the minimum number of moves required to make all characters of the string the same. The first line of input contains an integer `t` (1 ≤ t ≤ 1000) — the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer `n` (1 ≤ n ≤ 100) — the length of the string `s`. The second line of each test case contains the string `s`. For each test case, print a single integer — the minimum number of moves required to make all characters of the string the same. # Example Input: ``` 3 4 aabc 5 abcde 6 aaaaaa ``` Output: ``` 2 4 0 ``` # Explanation In the first test case, you can replace one \'a\' with \'b\' and one \'c\' with \'b\' to make all characters \'b\'. This requires 2 moves. In the second test case, you need to change 4 characters to match any one character, as all characters are distinct. In the third test case, all characters are already the same, so no moves are required.","solution":"def min_moves_to_uniform_string(t, test_cases): results = [] for test_case in test_cases: n, s = test_case char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 max_frequency = max(char_count.values()) min_moves = n - max_frequency results.append(min_moves) return results"},{"question":"Given an integer n (1 ≤ n ≤ 100,000), you are asked to perform a series of operations with the values of an initially empty sequence. You will be provided with q (1 ≤ q ≤ 100,000) queries of two types: 1. \\"add x\\" where x is an integer (1 ≤ x ≤ 1,000,000): This appends the integer x to the end of the sequence. 2. \\"remove x\\" where x is an integer that currently exists in the sequence: This removes the first instance of x from the sequence, if it exists. After processing all the queries, output the content of the sequence in the order they appear. Input: - The first line contains an integer q, the number of queries. - The next q lines contain queries in the form \\"add x\\" or \\"remove x\\". Output: - Print the sequence after processing all queries in a single line with space-separated integers. If the sequence is empty, print \\"empty\\". Example: Input: 6 add 5 add 3 add 5 remove 3 add 2 remove 5 Output: 5 2 Explanation: - `add 5` -> [5] - `add 3` -> [5, 3] - `add 5` -> [5, 3, 5] - `remove 3` -> [5, 5] - `add 2` -> [5, 5, 2] - `remove 5` -> [5, 2]","solution":"def process_queries(queries): sequence = [] for query in queries: operation, value = query.split() value = int(value) if operation == \\"add\\": sequence.append(value) elif operation == \\"remove\\": if value in sequence: sequence.remove(value) return \\" \\".join(map(str, sequence)) if sequence else \\"empty\\" # Sample execution q = 6 queries = [\\"add 5\\", \\"add 3\\", \\"add 5\\", \\"remove 3\\", \\"add 2\\", \\"remove 5\\"] print(process_queries(queries)) # Output: \\"5 2\\""},{"question":"Design a function that receives a list of shifts representing the working hours of employees at a company. The goal is to find the maximum number of employees working simultaneously at any given moment. Each shift is defined by a pair of integers [start_time, end_time) where `start_time` and `end_time` are in the range of [0, 1440), representing the minutes since midnight (`0` for 00:00 and `1439` for 23:59). End time is exclusive, meaning the shift ends just before `end_time`. If there are multiple shifts starting or ending at the same time, the end times should be processed before the start times. # Input: - An integer `n` (1 ≤ n ≤ 10^5), the number of employees. - `n` lines, each with two integers `start_time` and `end_time` (0 ≤ start_time < end_time ≤ 1440). # Output: - A single integer representing the maximum number of employees working simultaneously. # Example: Input: ``` 5 300 900 600 1200 700 1000 1100 1400 100 200 ``` Output: ``` 3 ``` Explanation: - Employee 1 works from 05:00 to 15:00. - Employee 2 works from 10:00 to 20:00. - Employee 3 works from 11:40 to 16:40. - Employee 4 works from 18:20 to 23:20. - Employee 5 works from 01:40 to 03:20. Employees 1, 2, and 3 all have overlapping shifts and work simultaneously at some point, the maximum count being 3.","solution":"def max_employees_simultaneously(shifts): Finds the maximum number of employees working simultaneously given their shifts. Parameters: shifts (list of tuple): A list of tuples where each tuple contains two integers (start_time, end_time). Returns: int: Maximum number of employees working simultaneously. events = [] # Adding all start and end times to the events list for start, end in shifts: events.append((start, \'start\')) events.append((end, \'end\')) # Sort events: first by time, then by type (\'end\' before \'start\' if times are the same) events.sort(key=lambda x: (x[0], x[1] == \'start\')) current_count = 0 max_count = 0 # Traverse the events to compute max employees working simultaneously for time, event in events: if event == \'start\': current_count += 1 max_count = max(max_count, current_count) else: current_count -= 1 return max_count"},{"question":"Ling just learned about tree data structures and is excited to solve a new problem using her knowledge. She encounters a problem where she needs to determine the longest path between any two nodes in an unweighted tree (a tree in which the edges have no weights). Ling knows that such a path is called the \\"diameter\\" of the tree. An unweighted tree is given with `n` nodes and `n-1` edges. Each node is numbered uniquely from `1` to `n`. Help Ling to find the diameter of the tree. # Input The input consists of multiple lines: - The first line contains a single integer `n` (2 ≤ n ≤ 10^5) — the number of nodes in the tree. - The next `n-1` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n), representing an edge between nodes `u` and `v`. # Output Print a single integer — the length of the diameter of the tree. # Example Input ``` 5 1 2 1 3 3 4 3 5 ``` Output ``` 3 ``` # Explanation In this example, the diameter of the tree is the path `[2, 1, 3, 4]` or `[2, 1, 3, 5]` with length 3.","solution":"from collections import deque, defaultdict def find_furthest_node(start, graph): Performs BFS to find the furthest node from the start node and its distance. visited = set() q = deque([(start, 0)]) furthest_node = start max_distance = 0 while q: current, distance = q.popleft() if distance > max_distance: max_distance = distance furthest_node = current visited.add(current) for neighbor in graph[current]: if neighbor not in visited: q.append((neighbor, distance + 1)) return furthest_node, max_distance def tree_diameter(n, edges): Finds the diameter of the tree. if n == 1: return 0 graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Step 1: Find the furthest node from any node (let\'s say node 1) furthest_node, _ = find_furthest_node(1, graph) # Step 2: Find the furthest node from the node found in step 1 furthest_node, diameter = find_furthest_node(furthest_node, graph) return diameter"},{"question":"Nina is a botanist studying a flower garden. The garden is arranged in a grid of n rows and m columns. Each cell in the garden contains a certain number of flowers. Nina is interested in determining how many flowers are in a sub-rectangle of the garden. Specifically, she wants to query the total number of flowers in a sub-rectangle from cell (r1, c1) to cell (r2, c2) inclusive. The garden is initially described by a matrix of integers where the value at position (i, j) represents the number of flowers in the cell at the i-th row and j-th column. Nina will provide q queries, each defined by four integers r1, c1, r2, and c2. Your task is to calculate the total number of flowers in the specified sub-rectangle for each query. The first line contains three integers n, m, and q (1 ≤ n, m ≤ 1000, 1 ≤ q ≤ 1000) – the number of rows, the number of columns, and the number of queries. Each of the next n lines contains m integers – the number of flowers in each cell of the garden. Each of the next q lines contains four integers r1, c1, r2, and c2 (1 ≤ r1 ≤ r2 ≤ n, 1 ≤ c1 ≤ c2 ≤ m) – describing the top-left and bottom-right coordinates of the sub-rectangle query. Print q integers – the total number of flowers for each query. # Example Input: ``` 3 3 2 1 2 3 4 5 6 7 8 9 1 1 2 2 2 2 3 3 ``` Output: ``` 12 28 ``` # Explanation: For the first query `(1, 1, 2, 2)`, the sub-rectangle is: ``` 1 2 4 5 ``` Total flowers = 1 + 2 + 4 + 5 = 12. For the second query `(2, 2, 3, 3)`, the sub-rectangle is: ``` 5 6 8 9 ``` Total flowers = 5 + 6 + 8 + 9 = 28.","solution":"def calculate_flowers(n, m, q, garden, queries): results = [] # Precompute the prefix sums prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): prefix_sum[i][j] = garden[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1] # Process each query for r1, c1, r2, c2 in queries: total_flowers = (prefix_sum[r2][c2] - prefix_sum[r1-1][c2] - prefix_sum[r2][c1-1] + prefix_sum[r1-1][c1-1]) results.append(total_flowers) return results"},{"question":"**Problem Statement:** In a quaint town, there is a peculiar clock situated at the town center. This clock displays time in a very unique format known as \\"The Antipodal Time\\". The Antipodal Time of a given hour is calculated by reflecting the hour around a 12-hour clock. For instance, the Antipodal Time of 3 o\'clock is 9 o\'clock, and the Antipodal Time of 1 o\'clock is 11 o\'clock. Formally, given an hour H (1 ≤ H ≤ 12), the Antipodal Time can be computed as: Antipodal(H) = ``13` - H However, this clock is a bit quirky and sometimes shows the minutes as well. When minutes are displayed, they are antipodal to their corresponding hour. Given a current time as a string in the format \\"HH:MM\\" using a 12-hour format (where HH is the hour and MM are the minutes), compute the Antipodal Time. The minutes should remain unchanged. # Input Format: - A single line containing a string in the format \\"HH:MM\\". # Output Format: - A single line containing the Antipodal Time in the same format \\"HH:MM\\". # Examples: Example 1: **Input:** ``` 03:45 ``` **Output:** ``` 09:45 ``` Example 2: **Input:** ``` 12:00 ``` **Output:** ``` 01:00 ``` Example 3: **Input:** ``` 11:30 ``` **Output:** ``` 02:30 ``` **Explanation:** 1. For the first example, the hour \\"03\\" reflects to \\"09\\", and the minutes \\"45\\" stay the same. 2. For the second example, the hour \\"12\\" reflects to \\"01\\", and the minutes \\"00\\" stay the same. 3. For the third example, the hour \\"11\\" reflects to \\"02\\", and the minutes \\"30\\" stay the same. # Constraints: - The given time will always be in a valid 12-hour format.","solution":"def antipodal_time(time_str): Given a time in the format \\"HH:MM\\", where HH is the hour (1 <= HH <= 12) and MM are the minutes, return the antipodal time. # Split the input time into hours and minutes hour, minute = map(int, time_str.split(\':\')) # Calculate the antipodal hour antipodal_hour = 13 - hour # Format the antipodal hour to be two digits antipodal_hour_str = f\\"{antipodal_hour:02}\\" # Return the antipodal time in the format \\"HH:MM\\" return f\\"{antipodal_hour_str}:{minute:02}\\" # Example usage print(antipodal_time(\\"03:45\\")) # Output: \\"09:45\\" print(antipodal_time(\\"12:00\\")) # Output: \\"01:00\\" print(antipodal_time(\\"11:30\\")) # Output: \\"02:30\\""},{"question":"The annual Technovation Hackathon has just been announced, and a flood of enthusiastic participants from all over the city have formed teams to take part. Each team is identified by a unique name and consists of exactly three participants. During registration, each team must indicate the skill level of its members on a scale from 1 to 10, inclusive. The organizers will provide specialized mentoring sessions to the participating teams based on their skill level. To facilitate this, they need to calculate the average skill level of each team, rounded to the nearest integer. You are tasked with writing a program to automate this process. The input will consist of a single team name followed by three integers representing the skill levels of the three team members. Your output should include the team name and the calculated average skill level. **Input Format:** - A single line containing the team name (a string without spaces) followed by three integers (a, b, and c) separated by spaces, where 1 <= a, b, c <= 10. **Output Format:** - A single line representing the team name, followed by a space, and then the rounded average skill level. **Example:** Input: ``` TechWarriors 5 8 6 ``` Output: ``` TechWarriors 6 ``` **Note:** - The team name will always be a single continuous word without spaces. - Ensure that the average is rounded to the nearest integer. If the average is exactly halfway between two integers, round up (e.g., 4.5 rounds to 5).","solution":"def calculate_team_average(input_string): Calculate the average skill level of a team rounded to the nearest integer. Args: input_string (str): Input string containing the team name and three skill levels. Returns: str: Team name followed by the rounded average skill level. parts = input_string.split() team_name = parts[0] skills = list(map(int, parts[1:])) average_skill = round(sum(skills) / 3) return f\\"{team_name} {average_skill}\\" # Testing the function with an example input # Example: input_string = \\"TechWarriors 5 8 6\\" # It should return \\"TechWarriors 6\\""},{"question":"# Problem Statement You are given a 2D grid of size `n x m` where each cell can either be a wall (`#`) or an empty cell (`.`). You need to place a bomb in exactly one of the empty cells such that the number of reachable empty cells is maximized. The bomb can destroy empty cells in all four cardinal directions (up, down, left, right) until it hits a wall or the edge of the grid. Write a function `place_bomb(n, m, grid)` that takes in the dimensions of the grid `n` and `m`, and a list of strings `grid` representing the grid, and returns the coordinates `(x, y)` of the empty cell where the bomb should be placed to maximize the number of reachable empty cells. If there are multiple such cells, return the one with the smallest row number. If there is still a tie, return the one with the smallest column number. # Input - `n` (1 ≤ `n` ≤ 100): an integer representing the number of rows in the grid. - `m` (1 ≤ `m` ≤ 100): an integer representing the number of columns in the grid. - `grid` (a list of `n` strings, each length `m`): representing the layout of the grid where `grid[i][j]` is either `\'.\'` (empty cell) or `\'#\'` (wall). # Output - A tuple of two integers `(x, y)` which are the 1-based coordinates of the optimal empty cell for placing the bomb. # Example ```python def place_bomb(n, m, grid): # Your implementation here pass # Example usage: n = 4 m = 4 grid = [ \\"....\\", \\"..\\", \\"....\\", \\"..\\" ] print(place_bomb(n, m, grid)) # Output could be (3, 4) or (1, 4) ``` **Note:** 1. The grid coordinates (x, y) are 1-based. 2. If no empty cell can be reached (all cells are walls), return any empty cell\'s coordinates.","solution":"def place_bomb(n, m, grid): max_reachable = 0 best_cell = (1, 1) def count_reachable(x, y): count = 0 # Count up for i in range(x - 1, -1, -1): if grid[i][y] == \'#\': break count += 1 # Count down for i in range(x + 1, n): if grid[i][y] == \'#\': break count += 1 # Count left for j in range(y - 1, -1, -1): if grid[x][j] == \'#\': break count += 1 # Count right for j in range(y + 1, m): if grid[x][j] == \'#\': break count += 1 return count for i in range(n): for j in range(m): if grid[i][j] == \'.\': reachable = count_reachable(i, j) if reachable > max_reachable: max_reachable = reachable best_cell = (i + 1, j + 1) elif reachable == max_reachable: if (i + 1, j + 1) < best_cell: best_cell = (i + 1, j + 1) return best_cell"},{"question":"An aspiring software developer is tasked to create a simple online calculator. This calculator can perform the following operations: addition (+), subtraction (-), multiplication (*), and division (/), between two given numbers A and B. The input is a string consisting of two integers separated by an operator, such as \\"3+4\\" or \\"10/2\\". Your task is to evaluate this string and produce the correct result. However, there are some constraints to consider: - The calculator should handle integer operations only. - Division should be integer division, i.e., the result should be the floor value of the actual division. - The input string is guaranteed to be a valid expression. Write a function `calculate_expression(expression: str) -> int` that takes in a string `expression` and returns an integer representing the result of the operation. # Sample Input/Output: - Input: `\\"3+4\\"` - Output: `7` - Input: `\\"10-3\\"` - Output: `7` - Input: `\\"6*5\\"` - Output: `30` - Input: `\\"8/3\\"` - Output: `2` Note: You do not need to handle division by zero or malformed inputs as they are not within the constraints.","solution":"def calculate_expression(expression: str) -> int: Evaluates a simple arithmetic expression containing two integers and an operator. The operators can be +, -, *, or /. Division assumes integer division. # Identify the operator in the expression if \'+\' in expression: a, b = expression.split(\'+\') return int(a) + int(b) elif \'-\' in expression: a, b = expression.split(\'-\') return int(a) - int(b) elif \'*\' in expression: a, b = expression.split(\'*\') return int(a) * int(b) elif \'/\' in expression: a, b = expression.split(\'/\') return int(a) // int(b)"},{"question":"Given a string `s` consisting of lowercase English letters, a \\"good\\" substring is defined as a substring that contains at least two distinct characters. Your task is to find the number of \\"good\\" substrings of `s`. However, a single \\"bad\\" substring can be as long as `|s| - 1`, meaning the rest of the substrings are potentially \\"good\\". For example, if `s` is `aaaaa`, the bad substrings would be any substring completely made up of `a`. Also, there could be multiple bad substrings of different lengths. Write a program to determine the number of \\"good\\" substrings in the given string `s`. # Input: - The input consists of a single line containing the string `s` (`1 ≤ |s| ≤ 1000`). The string `s` consists of lowercase English letters. # Output: - Output a single integer, the number of \\"good\\" substrings. # Examples: Example 1: ``` Input: \\"abc\\" Output: 3 Explanation: The good substrings are \\"ab\\", \\"bc\\", and \\"abc\\". ``` Example 2: ``` Input: \\"aaa\\" Output: 0 Explanation: All substrings of \\"aaa\\" are bad as they contain only one distinct character. ``` # Note: - A substring is defined as a contiguous segment of a string. - Substrings \\"a\\" and \\"b\\" in \\"abc\\" are not considered good as they do not have at least two distinct characters. Write a function that receives the string `s` and outputs the number of good substrings.","solution":"def count_good_substrings(s): Returns the number of good substrings of s. A \\"good\\" substring is defined as a substring that contains at least two distinct characters. n = len(s) good_substring_count = 0 # Iterate over all possible substrings for length in range(2, n + 1): # Start from length 2 to n for i in range(n - length + 1): substring = s[i:i + length] if len(set(substring)) > 1: good_substring_count += 1 return good_substring_count"},{"question":"In a parallel universe, binary trees have an additional constraint. They are constructed with nodes that strictly follow increasing order from the root. Each node\'s value has to be strictly greater than its parent node’s value, traversing any path from the root. Reversely, deleting nodes from such a binary tree also requires considering their values, and follows these specific rules: 1. The tree has the property that all its nodes\' values are distinct and no node has a left or right child only; a node can either be a leaf or have both children. 2. When a node with both children is deleted, it is replaced by its in-order predecessor (the maximum value node in its left subtree) to maintain the tree\'s ordered property. 3. If the node is a leaf, or after replacing a non-leaf node with its in-order predecessor, the node can be deleted directly. Given a binary tree, you are to perform a series of deletions. Your task is to find the sum of all deleted nodes\' values after performing each given deletion in sequence until no nodes remain. The binary tree is given in the form of a list in level order with `N` nodes, along with a list of nodes to be deleted in the given sequence. Output the sum of all deleted nodes’ values after completing all deletions for each node in the sequence. Input Format: The first line contains an integer, `N` (1 ≤ N ≤ 1000), denoting the number of nodes. The next line contains `N` space-separated integers representing the values of the nodes in level order. The following line contains an integer, `D` (1 ≤ D ≤ N), representing the number of nodes to be deleted. The last line contains `D` space-separated integers representing the nodes to be deleted in the given sequence. Output Format: Print `D` integers in a line, denoting the cumulative sum of deleted node values after each deletion. Examples: Input: 9 4 2 6 1 3 5 7 8 9 4 4 2 3 6 Output: 4 6 9 15 Explanation: - Deleting 4, gives the tree with nodes: 3 2 6 1 9 5 7 8. Node 4’s value is added to result. - Deleting 2, gives the tree with nodes: 3 1 6 5 7 9 8. Node 2’s value is added to result. - Deleting 3, gives the tree with nodes: 1 6 5 7 9 8. Node 3’s value is added to result. - Deleting 6, gives the tree with nodes: 1 9 5 7 8. Node 6’s value is added to result.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def insert_level_order(arr, root, i, n): # Base case for recursion if i < n: temp = TreeNode(arr[i]) root = temp # insert left child root.left = insert_level_order(arr, root.left, 2 * i + 1, n) # insert right child root.right = insert_level_order(arr, root.right, 2 * i + 2, n) return root def find_max(node): current = node while current.right: current = current.right return current def delete_node(root, key): if not root: return root if key < root.val: root.left = delete_node(root.left, key) elif key > root.val: root.right = delete_node(root.right, key) else: if not root.left and not root.right: root = None elif root.left and root.right: temp = find_max(root.left) root.val = temp.val root.left = delete_node(root.left, temp.val) else: root = root.left if root.left else root.right return root def cumulative_deletions(arr, deletions): N = len(arr) root = None root = insert_level_order(arr, root, 0, N) cumulative_sum = 0 result = [] for key in deletions: root = delete_node(root, key) cumulative_sum += key result.append(cumulative_sum) return result"},{"question":"Help Little Ruel and Little Mae optimize their trading. They have been given a set of stock prices for upcoming days, and they are allowed to perform one transaction (i.e., buy one and sell one share of the stock). You need to determine the maximum possible profit they can achieve. Given an array of integers where each element represents the stock price on a given day, design an algorithm to find the maximum profit. The function should be named `max_profit` and be provided as follows: ```python def max_profit(prices): :param prices: List[int] - An array where each element is the stock price on that day. :return: int - The maximum profit achievable. ``` # Input: - A list of integers `prices` representing the stock prices of subsequent days. # Output: - Return a single integer representing the maximum profit. If no profit can be achieved, return 0. # Constraints: - The length of `prices` will be at least 1 and at most (10^5). - Each price in `prices` will be a non-negative integer not greater than (10^4). # Example: Example 1: **Input:** ```python prices = [7, 1, 5, 3, 6, 4] ``` **Output:** ```python 5 ``` **Explanation:** - Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6 - 1 = 5. Example 2: **Input:** ```python prices = [7, 6, 4, 3, 1] ``` **Output:** ```python 0 ``` **Explanation:** - In this case, no transactions are done, and the max profit is 0. # Note: - You are only allowed to complete one transaction (i.e., buy one time and sell one time). - You may not sell a stock before you buy one.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved from a single buy and sell transaction. :param prices: List[int] - List of stock prices where each element is the stock price on that day. :return: int - The maximum profit achievable. If no profit can be achieved, returns 0. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: # Calculate profit if we sell at the current price profit = price - min_price # Update the maximum profit max_profit = max(max_profit, profit) # Update the minimum price to buy in the future min_price = min(min_price, price) return max_profit"},{"question":"You are given an array of integers `arr` of length `n` and an integer `k`. Your task is to find the length of the smallest subarray with a sum of at least `k`. If no such subarray exists, return `-1`. Constraints: - 1 ≤ n ≤ 100,000 - -10^9 ≤ arr[i] ≤ 10^9 - 1 ≤ k ≤ 10^9 Input: - The first line of the input contains two integers n and k. - The second line contains n integers, the elements of the array `arr`. Output: - Print one integer, the length of the smallest subarray with a sum of at least `k`, or `-1` if no such subarray exists. Example: ```plaintext Input: 8 15 1 2 3 4 5 6 7 8 Output: 2 Explanation: The smallest subarray with a sum of at least 15 is [7, 8], which has a length of 2. ```","solution":"from collections import deque def smallest_subarray_with_sum_k(arr, k): Returns the length of the smallest subarray with a sum of at least k. If no such subarray exists, returns -1. n = len(arr) min_length = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum >= k: min_length = min(min_length, end - start + 1) current_sum -= arr[start] start += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"You are given a network of computers connected by bidirectional cables. Each computer in the network has a unique ID number. Some pairs of computers are directly connected by cables, and data can travel between any two computers either directly or through intermediate computers if needed. A computer a is called central if the maximum distance from a to any other computer is minimized compared to all other computers. The distance between two computers is defined as the number of cables in the shortest path connecting them. Your task is to identify all central computers in the given network. For each test case, you need to do the following: - Identify if there are at least two central computers. If there are fewer than two, then output -1. - Otherwise, output the IDs of the central computers in increasing order. The first line contains one integer t (1 leq t leq 100) – the number of test cases. Each test case is described as follows: The first line contains two integers n and m (1 leq n le 1000, 0 leq m le 5000) – the number of computers and cables between them. Each of the following m lines contains two integers u and v (u neq v; 1 leq u, v leq n), which denotes that there is a cable between computers u and v. You can assume that between each ordered pair of computers there is at most one cable. The sum of n over all test cases doesn\'t exceed 5000, and the sum of m doesn\'t exceed 25000. For each test case, if there are fewer than two central computers, print -1. Otherwise, print the IDs of the central computers in increasing order separated by spaces. # Example ``` Input: 2 6 7 1 2 1 3 2 4 3 4 4 5 5 6 6 2 4 2 1 2 2 3 Output: 2 4 -1 ``` In the first example, computers 2 and 4 are central because the maximum distance from them to any other computer is minimized. In the second example, there is only one central computer, so the output is -1.","solution":"from collections import deque, defaultdict import sys def find_central_computers(n, m, connections): def bfs(start): distances = [-1] * n distances[start] = 0 queue = deque([start]) while queue: node = queue.popleft() for neighbor in adj_list[node]: if distances[neighbor] == -1: distances[neighbor] = distances[node] + 1 queue.append(neighbor) return distances adj_list = defaultdict(list) for u, v in connections: adj_list[u - 1].append(v - 1) adj_list[v - 1].append(u - 1) all_distances = [] for i in range(n): distances = bfs(i) all_distances.append((max(distances), i)) all_distances.sort() min_distance = all_distances[0][0] central_computers = [i + 1 for d, i in all_distances if d == min_distance] if len(central_computers) < 2: return \\"-1\\" else: return \\" \\".join(map(str, sorted(central_computers))) def solve(t, cases): results = [] for n, m, connections in cases: result = find_central_computers(n, m, connections) results.append(result) return results"},{"question":"You are given a list of strings where each string represents a binary number (consisting only of characters \'0\' and \'1\'). Your task is to find and return the longest common prefix of these binary numbers. If there is no common prefix, return an empty string. The first line of the input contains a single integer N (1 le N le 10^4) — the number of binary strings. Each of the next N lines contains a binary string S_i (1 le |S_i| le 10^4) — the i-th binary string. The output should be a single string representing the longest common prefix of the input binary strings. # Example **Input:** ``` 4 1101 1100 110 111 ``` **Output:** ``` 11 ``` **Explanation:** - The longest common prefix of \\"1101\\", \\"1100\\", \\"110\\", and \\"111\\" is \\"11\\". # Example **Input:** ``` 3 001 010 000 ``` **Output:** ``` 0 ``` **Explanation:** - The longest common prefix of \\"001\\", \\"010\\", and \\"000\\" is \\"0\\".","solution":"def longest_common_prefix(binary_strings): Returns the longest common prefix of a list of binary strings. if not binary_strings: return \\"\\" # Start with the first string as the initial prefix prefix = binary_strings[0] for binary_string in binary_strings[1:]: # Compare the prefix with each string temp_prefix = \\"\\" for i in range(min(len(prefix), len(binary_string))): if prefix[i] == binary_string[i]: temp_prefix += prefix[i] else: break prefix = temp_prefix # Early exit if the common prefix becomes empty if not prefix: break return prefix"},{"question":"You are given a list of integers a. You can perform two types of operations on this list: 1. Choose any single element and replace it with its negation (e.g., turn 5 into -5 or -3 into 3); 2. Choose two distinct elements and swap their positions. Your goal is to sort the list in non-decreasing order using the minimum number of operations. You need to determine the minimum number of operations required to achieve this goal for each test case. The first line contains one integer t (1 le t le 1000) — the number of test cases. For each test case, - The first line contains one integer n (1 le n le 1000) — the number of elements in the list. - The second line contains n space-separated integers a[i] (-10^9 le a[i] le 10^9) — the elements of the list. It\'s guaranteed that the total number of elements over all test cases does not exceed 10^6. For each test case, print one integer — the minimum number of operations required to sort the list in non-decreasing order.","solution":"def min_operations_to_sort(t, test_cases): results = [] for case in test_cases: n, a = case if n == 1: results.append(0) continue positive_count = sum(1 for x in a if x > 0) negative_count = sum(1 for x in a if x < 0) if positive_count == 0 or negative_count == 0: results.append(0) else: results.append(1) return results"},{"question":"Consider an array of integers where each element represents the height of a wall. The array forms a set of walls where there is a gap between consecutive elements. Imagine that it starts to rain, and the gaps between the walls might collect water. Your task is to determine the maximum volume of water that can be trapped between the walls after it rains. You need to implement a function `maxWaterTrapped(walls)` that takes a list of non-negative integers representing the height of the walls and returns the maximum amount of water that can be trapped. # Input - An integer array `walls` of length `n` (1 leq n leq 10^5), where each element (0 leq walls[i] leq 10^4) represents the height of a wall. # Output - A single integer that denotes the maximum volume of water that can be trapped between the walls. # Example ```python print(maxWaterTrapped([0,1,0,2,1,0,3,1,0,1,2])) # Output: 8 print(maxWaterTrapped([4,2,0,3,2,5])) # Output: 9 ``` # Explanation 1. In the first example, the walls are shaped in such a way that they can trap a total of 8 units of water. 2. In the second example, the walls can trap a total of 9 units of water. # Constraints - You need to find an optimal solution with a time complexity of O(n). # Hint Two-pointer technique or precomputing left and right maximum heights for each element can be useful for achieving the optimal solution.","solution":"def maxWaterTrapped(walls): if not walls or len(walls) < 3: return 0 n = len(walls) left_max = [0] * n right_max = [0] * n left_max[0] = walls[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], walls[i]) right_max[n - 1] = walls[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], walls[i]) water_trapped = 0 for i in range(1, n - 1): # No need to check the first and the last part water_trapped += max(0, min(left_max[i], right_max[i]) - walls[i]) return water_trapped"},{"question":"You are given a list of integers. Choose a subset of these integers such that the sum of the chosen subset is the maximum possible sum that is divisible by a given integer `k`. If there are multiple subsets with the same maximum sum, any of them can be chosen. If no such subset exists, return an empty set. Write a function that takes a list of integers and an integer `k`, and returns the required subset. # Input - The first line contains an integer `t` (1 leq t leq 50), the number of test cases. - Each test case contains: - A line with two integers, `n` (1 leq n leq 1000), the number of integers, and `k` (1 leq k leq 100), the divisor. - A line with `n` integers, the list of integers (-10^5 leq text{integer} leq 10^5). # Output For each test case, print a line containing the chosen subset. If no such subset exists, print an empty set represented by `[]`. # Example Input ``` 2 5 3 2 3 7 1 4 4 5 5 -10 10 -5 ``` Output ``` [2, 7, 1, 4] [5, -5] ``` # Constraints - The sum of all integers across all test cases does not exceed 10^6. # Explanation For the first test case, the subset [2, 7, 1, 4] is chosen because its sum (14) is the maximum possible sum of a subset that is divisible by 3. An alternative subset [3, 7, 4] also has the maximum sum divisible by 3, but any is acceptable as this subset is unique in having the maximum sum. For the second test case, the subset [5, -5] is chosen because its sum (0) is the maximum possible sum of a subset that is divisible by 5.","solution":"def subset_with_maximum_sum_divisible_by_k(n, k, arr): # To store the subsets based on remainders when divided by k remainder_buckets = [[] for _ in range(k)] for num in arr: remainder_buckets[num % k].append(num) # We need to maximize the sum of elements divisible by k dp = [0] * k # This array will store the maximum sum for each remainder dp_subset = [[] for _ in range(k)] # This stores the corresponding subsets for i in range(k): for num in remainder_buckets[i]: new_sum = (dp[-i] + num) % k if dp[-i] + num > dp[new_sum]: dp[new_sum] = dp[-i] + num dp_subset[new_sum] = dp_subset[-i] + [num] return dp_subset[0] def process_test_cases(t, test_cases): results = [] for tc in test_cases: n, k, arr = tc result = subset_with_maximum_sum_divisible_by_k(n, k, arr) results.append(result) return results"},{"question":"Maxwell is trying to collect as many gemstones as possible in a linear mine while minimizing his fatigue. He can only move through the mine in a straight line, and he starts at the first section of the mine. Each section has a certain number of gemstones and requires a specific amount of energy to pass through. Help Maxwell determine the maximum number of gemstones he can collect without exceeding his energy limit. The mine is represented by two arrays: - `gemstones[]`: an array of integers where gemstones[i] is the number of gemstones in the i-th section of the mine. - `energy[]`: an array of integers where energy[i] is the amount of energy needed to pass through the i-th section of the mine. Maxwell starts at the first section and gathers gemstones from the sections as he passes through them. He cannot skip any section but can decide to stop at any section. He must not exceed a given energy limit. Your task is to compute the maximum number of gemstones Maxwell can collect before his energy runs out. # Input - The first line contains two integers: N (1 ≤ N ≤ 10^5) and E (1 ≤ E ≤ 10^9) — the number of sections in the mine and the maximum energy limit, respectively. - The second line contains N integers: gemstones[0], gemstones[1], ..., gemstones[N-1] — the number of gemstones in each mine section. - The third line contains N integers: energy[0], energy[1], ..., energy[N-1] — the energy required to pass through each mine section. # Output - Output the maximum number of gemstones Maxwell can collect without exceeding the energy limit. # Example Input: ``` 5 10 5 3 7 2 8 2 4 1 6 3 ``` Output: ``` 15 ``` Explanation: Maxwell passes through the sections in the following way: - From the first section: collects 5 gemstones (total 5), uses 2 energy (total 2). - From the second section: collects 3 gemstones (total 8), uses 4 energy (total 6). - From the third section: collects 7 gemstones (total 15), uses 1 energy (total 7). He stops before the fourth section because proceeding would exceed the energy limit. Therefore, the maximum number of gemstones he can collect is 15.","solution":"def max_gemstones(N, E, gemstones, energy): max_gems = 0 current_energy = 0 for i in range(N): if current_energy + energy[i] <= E: current_energy += energy[i] max_gems += gemstones[i] else: break return max_gems"},{"question":"You are given a string that consists of lowercase English letters. You can remove any number of characters from this string. Calculate the length of the longest substring that has no repeating characters. Write a function `longest_unique_substring_length(s: str) -> int` that takes a single string input and returns an integer which is the length of the longest substring without repeating characters. # Input: - A single line containing string `s` (1 ≤ |s| ≤ 10^5), where `|s|` denotes the length of string `s`. # Output: - An integer representing the length of the longest substring with all unique characters from string `s`. # Example: Input: ``` abcabcbb ``` Output: ``` 3 ``` Input: ``` bbbbb ``` Output: ``` 1 ``` Input: ``` pwwkew ``` Output: ``` 3 ```","solution":"def longest_unique_substring_length(s: str) -> int: Returns the length of the longest substring with all unique characters. char_index_map = {} max_length = 0 left = 0 for right, char in enumerate(s): if char in char_index_map and char_index_map[char] >= left: left = char_index_map[char] + 1 char_index_map[char] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are given a large file consisting of integers. Each line of the file contains one integer, both positive and negative. Your task is to process the file and return the k-th smallest integer in the file. For example, if the file contains integers `[7, 10, 4, 3, 20, 15]` and k=3, the function should return 7, as the 3rd smallest integer in this list is 7. **Input:** - An integer k (1 ≤ k ≤ 10^5), the position of the smallest number to find. - A file with integers in which each integer is on a new line. The number of integers in the file can be very large (up to 10^6). **Output:** - A single integer which is the k-th smallest integer in the file. **Example:** Suppose the file contains the following integers: ``` 7 10 4 3 20 15 ``` If k = 3, the output should be: ``` 7 ``` **Notes:** - Make sure your solution efficiently handles large files. - Consider edge cases such as duplicate values in the file. - You may assume the file always contains at least k numbers.","solution":"import heapq def find_kth_smallest(filename, k): Finds the k-th smallest integer from a file with integers on each line. :param filename: The name of the file containing integers. :param k: The position of the smallest number to find. :return: The k-th smallest integer. min_heap = [] with open(filename) as file: for line in file: number = int(line.strip()) if len(min_heap) < k: heapq.heappush(min_heap, -number) else: if number < -min_heap[0]: heapq.heapreplace(min_heap, -number) return -min_heap[0]"},{"question":"You are given an array of integers and a set of queries. Each query consists of two parts: the type of operation (either update or range sum) and necessary parameters for the operation. 1. An update query changes the value at a specific position in the array. 2. A range sum query calculates the sum of the integers in the array within a given range. Your task is to process all the queries and output the result of each range sum query. The first line of input consists of two integers n and q (1 ≤ n, q ≤ 100,000) — the number of elements in the array and the number of queries. The second line consists of n integers a_i (1 ≤ a_i ≤ 10^9) — the initial values of the array. The following q lines describe the queries: - If the query is an update query, it is represented by \\"1 x y\\" (1 ≤ x ≤ n, 1 ≤ y ≤ 10^9), which means set the value at position x in the array to y. - If the query is a range sum query, it is represented by \\"2 l r\\" (1 ≤ l ≤ r ≤ n), which means calculate the sum of the elements in the array from index l to r (inclusive). Print the result of each range sum query in the order they appear. # Example Input: ``` 4 5 1 2 3 4 2 1 3 1 2 10 2 1 3 2 2 4 1 4 5 2 3 4 ``` Output: ``` 6 14 17 8 ```","solution":"class ArrayProcessor: def __init__(self, nums): self.nums = nums self.n = len(nums) def update(self, index, value): self.nums[index-1] = value def range_sum(self, left, right): return sum(self.nums[left-1:right]) def process_queries(n, q, nums, queries): processor = ArrayProcessor(nums) results = [] for query in queries: parts = query.split() if parts[0] == \'1\': index = int(parts[1]) value = int(parts[2]) processor.update(index, value) elif parts[0] == \'2\': left = int(parts[1]) right = int(parts[2]) results.append(processor.range_sum(left, right)) return results"},{"question":"Finn is a curious cat who loves playing with intersections of paths. In his favorite game, the city is represented as a grid of size `m x n`, where some cells are blocked and some are free. Finn has invented a new way of delivering parcels inside the grid by jumping from cell to cell. Finn can move either right or down, but he can visit any cell only once. The movement starts from the top-left corner of the grid and the destination is the bottom-right corner. Cells marked as \'1\' are blocked and cannot be traversed, while cells marked as \'0\' are free to be visited. Finn wants to determine the number of distinct paths from the start (top-left) to the end (bottom-right) considering the restrictions on movement and blocked cells. The first line contains two integers `m` and `n` (1 ≤ m, n ≤ 50), denoting the number of rows and columns of the grid. Each of the next `m` lines contains `n` characters (\'0\' or \'1\'), representing the grid. Return the number of distinct paths from the top-left corner to the bottom-right corner. # Example Input: ``` 3 3 0 0 0 0 1 0 0 0 0 ``` Output: ``` 2 ``` Explanation: The grid looks like this: ``` 0 0 0 0 1 0 0 0 0 ``` There are two distinct paths from the top-left to the bottom-right: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right","solution":"def count_paths(grid): m = len(grid) n = len(grid[0]) # If the start or end is blocked, return 0 paths if grid[0][0] == \'1\' or grid[m-1][n-1] == \'1\': return 0 # Initialize 2D DP array dp = [[0 for _ in range(n)] for _ in range(m)] # Starting position dp[0][0] = 1 # Fill the DP table for i in range(m): for j in range(n): if grid[i][j] == \'0\': if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1] def solve(m, n, grid_list): grid = [] for line in grid_list: grid.append(line.split()) return count_paths(grid)"},{"question":"You are given an array of integers representing quantities of different types of coins. There are n types of coins and a_i denotes the number of coins of type i. You want to determine if it\'s possible to divide these coins equally among exactly two people, such that each person gets the same quantity of coins for each type. For example, if n = 3 and a = [4, 8, 6], then you can divide the coins equally because: - Person 1 gets 2 coins of type 1, 4 coins of type 2, and 3 coins of type 3. - Person 2 gets 2 coins of type 1, 4 coins of type 2, and 3 coins of type 3. However, if a = [2, 3, 6], it is not possible to divide the coins equally since type 2 coins cannot be evenly split between two people. The first line contains an integer t (1 le t le 10^4) — the number of test cases. Then t test cases follow. The first line of each test case contains an integer n (1 le n le 100) — the number of types of coins. The next line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the array a representing the quantity of each type of coin. For each test case, output \\"YES\\" if it\'s possible to divide the coins equally among two people or \\"NO\\" if it is not possible.","solution":"def can_divide_coins(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] coins = test_cases[i][1] possible = all(coin % 2 == 0 for coin in coins) results.append(\\"YES\\" if possible else \\"NO\\") return results # Function to parse the input and utilize the can_divide_coins function def main(t, raw_test_cases): # Preparing test cases for processing test_cases = [] for i in range(t): n = raw_test_cases[i * 2] coins = raw_test_cases[(i * 2) + 1] test_cases.append((n, list(map(int, coins.split())))) return can_divide_coins(t, test_cases)"},{"question":"You are given an array of integers. Your task is to find and output a sorted list of all unique quadruples (i.e., 4-element combinations) that sum up to a given target value. Consider the following constraints: 1. The array can have any number of elements between 1 and 1000. 2. Each element in the array can take any integer value from -10^9 to 10^9. 3. The target sum will be an integer within the aforementioned range. 4. A quadruple is unique if the set of four indices they originate from are different, ignoring order. Your output list should not contain duplicate quadruples, and the quadruples themselves should be sorted in ascending order. Each quadruple in the output should also be sorted (for example, quadruple [1, 2, 3, 4] is valid but [4, 3, 2, 1] is not). # Input Format: - The first line contains an integer t, the number of test cases. - For each test case: - The first line contains an integer n, the number of elements in the array. - The second line contains n space-separated integers, the elements of the array. - The third line contains a single integer, the target sum. # Output Format: - For each test case, output all unique quadruples that add up to the target sum. - Print each quadruple in a new line in sorted order. - Print an empty line between the results of different test cases. - If no such quadruples exist for a test case, print \\"No quadruples\\" after printing the test case separator. # Example Input: ``` 2 5 1 0 -1 0 -2 2 0 7 1 2 3 4 5 6 7 23 ``` Output: ``` -2 -1 1 2 -2 0 0 2 -1 0 0 1 No quadruples ``` Write a function that solves this problem.","solution":"def four_sum(nums, target): Returns a sorted list of all unique quadruples (i.e., 4-element combinations) from the input list that sum up to the given target value. nums.sort() quadruples = set() n = len(nums) if n < 4: return [\\"No quadruples\\"] for i in range(n-3): for j in range(i+1, n-2): k = j + 1 l = n - 1 while k < l: current_sum = nums[i] + nums[j] + nums[k] + nums[l] if current_sum == target: quadruples.add((nums[i], nums[j], nums[k], nums[l])) k += 1 l -= 1 elif current_sum < target: k += 1 else: l -= 1 if quadruples: return sorted(map(list, quadruples)) else: return [\\"No quadruples\\"] def process_test_cases(t, test_cases): Takes a number of test cases and processes each to find unique quadruples that sum up to the target. results = [] for tc in test_cases: n, nums, target = tc result = four_sum(nums, target) if not result or result == [\\"No quadruples\\"]: results.append(\\"No quadruples\\") else: for quad in result: results.append(\\" \\".join(map(str, quad))) results.append(\\"\\") # to separate between test cases return \\"n\\".join(results).strip()"},{"question":"Alice loves reading books and has recently received a new bookshelf with multiple compartments. Each compartment can hold exactly one book. Alice has a collection of n books, each with a unique number written on its spine, and she wants to place them into the m compartments of the new bookshelf. However, there are some constraints on the placements as provided by a list of pairs, where each pair (x, y) indicates that book x cannot be placed in the same compartment as book y. Your task is to help Alice determine if it is possible to place all the books in the compartments such that no pair of books that are not allowed to be placed together end up in the same compartment. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of books and the number of compartments respectively. The second line contains a single integer k (0 ≤ k ≤ 10000) — the number of constraints. Each of the following k lines contains two integers x and y (1 ≤ x, y ≤ n, x ≠ y) — indicating that book x cannot be placed in the same compartment as book y. Output \\"Yes\\" if it is possible to place all the books in the compartments satisfying all given constraints. Otherwise, output \\"No\\". # Example Input: ``` 5 3 4 1 2 1 3 2 4 3 5 ``` Output: ``` Yes ``` In this example, one possible feasible arrangement is: - Compartment 1: Book 1 - Compartment 2: Book 2, Book 5 - Compartment 3: Book 3, Book 4","solution":"def can_place_books(n, m, k, constraints): Determines if it is possible to place all the books in the compartments satisfying all given constraints. Parameters: n (int): the number of books. m (int): the number of compartments. k (int): the number of constraints. constraints (list of tuples): list of pairs (x, y) indicating that book x cannot be placed in the same compartment as book y. Returns: str: \\"Yes\\" if it is possible to place all the books in the compartments satisfying all given constraints, \\"No\\" otherwise. if m >= n: return \\"Yes\\" else: from collections import defaultdict graph = defaultdict(list) for x, y in constraints: graph[x].append(y) graph[y].append(x) def dfs(node, color): if node in node_color: return node_color[node] == color node_color[node] = color return all(dfs(neighbor, 1 - color) for neighbor in graph[node]) node_color = {} for node in range(1, n + 1): if node not in node_color and not dfs(node, 0): return \\"No\\" return \\"Yes\\""},{"question":"Liz and her friends love exploring ancient libraries. She has discovered a unique library, which can be represented as an undirected graph. The graph contains nodes 1 through n representing rooms, connected by m edges representing pathways between the rooms. Each pathway has a length. Liz is currently in room 1 and wants to visit each of her friends. However, the library\'s corridors are often narrow, permitting passage of only through the shortest path between any two rooms. Therefore, Liz must ensure every visit to be as short as possible. Can you help Liz find the minimum distance she has to traverse to visit each of her friends located in different rooms given a list of friends\' rooms? # Input: - The first line contains two integers n and m (2 le n le 500 and 1 le m le 10,000) - the number of rooms and pathways respectively. - The next m lines each contain three integers u, v, and w (1 le u, v le n and 1 le w le 1,000,000) - describing a pathway between rooms u and v of length w. - The last line contains an integer k (1 le k le n-1) - the number of friends. The line is followed by k integers denoting the rooms r_1, r_2, dots, r_k corresponding to each friend\'s room. # Output: - Print a single integer - the minimum distance Liz has to traverse to visit each of her friends starting from room 1 under the constraint of shortest paths. # Example: Input: ``` 5 6 1 2 1 1 3 2 2 3 2 2 4 1 3 5 1 4 5 2 3 3 4 5 ``` Output: ``` 5 ``` # Note: Liz starts from room 1. She will visit rooms 3, 4, and 5 following the order determined by the shortest paths: - From room 1 to room 3: total distance is 2. - From room 3 to room 5: total distance is 1. - From room 5 to room 4: total distance is 2. - The total minimum distance traveled will be 2 + 1 + 2 = 5.","solution":"import heapq def dijkstra(n, adj, start): Dijkstra\'s algorithm to find the shortest distance from start to all other nodes. dist = [float(\'inf\')] * (n + 1) dist[start] = 0 pq = [(0, start)] # (distance, node) while pq: d, node = heapq.heappop(pq) if d > dist[node]: continue for v, length in adj[node]: if dist[node] + length < dist[v]: dist[v] = dist[node] + length heapq.heappush(pq, (dist[v], v)) return dist def find_minimum_distance_to_visit_friends(n, m, edges, k, friends): # Create adjacency list for the graph adj = [[] for _ in range(n + 1)] for u, v, w in edges: adj[u].append((v, w)) adj[v].append((u, w)) # Calculate shortest distances from room 1 to all other rooms dist_from_start = dijkstra(n, adj, 1) # Calculate shortest distances from each friend\'s room to all other rooms friends_dists = {} for friend in friends: friends_dists[friend] = dijkstra(n, adj, friend) # To find the minimum distance to visit all friends from room 1, # we can treat it as a Traveling Salesman Problem for a small number of friends from itertools import permutations min_distance = float(\'inf\') for perm in permutations(friends): distance = dist_from_start[perm[0]] for i in range(len(perm) - 1): distance += friends_dists[perm[i]][perm[i + 1]] min_distance = min(min_distance, distance) return min_distance"},{"question":"You are working on a software application that simulates the operations of a bookstore. Part of this application\'s functionality includes managing book inventories and processing customer orders. For this purpose, you need to implement a function to determine whether all customer orders can be fulfilled given the current inventory. You are provided two dictionaries: 1. `inventory` which contains the current inventory of books in the store. The keys are the book titles (strings), and the values are the number of copies available (integers). 2. `orders` which contains a list of dictionaries where each dictionary represents a customer order. Each key in the customer order dictionary is a book title and the corresponding value is the quantity requested. Your task is to implement a function `can_fulfill_orders(inventory, orders)` which returns `True` if all orders can be fulfilled with the current inventory, otherwise returns `False`. # Input: - `inventory` : A dictionary with book titles as keys and quantities as values. - `orders` : A list of dictionaries where each dictionary represents a single customer order. # Output: - Returns `True` if all orders can be fulfilled, otherwise `False`. # Example: ```python inventory = { \\"Book A\\": 4, \\"Book B\\": 2, \\"Book C\\": 1 } orders = [ {\\"Book A\\": 2}, {\\"Book B\\": 1, \\"Book C\\": 1}, {\\"Book A\\": 2}, {\\"Book B\\": 1, \\"Book D\\": 1} ] print(can_fulfill_orders(inventory, orders)) # Output: False ``` In this example, all orders except for the last one can be fulfilled. The last order asks for a copy of \\"Book D\\", which is not present in the inventory, thus the function should return `False`. Note that if any order for a book title exceeds the inventory count for that book, the function should also return `False`. Your solution should be efficient given that the number of books in the inventory and the number of orders can be large.","solution":"def can_fulfill_orders(inventory, orders): Returns True if all orders can be fulfilled with the current inventory, otherwise returns False. Args: inventory : dict : inventory of books as {title: quantity} orders : list : list of order dictionaries as [{title: quantity}, ...] Returns: bool : True if all orders can be fulfilled, otherwise False # Make a copy of the inventory to track remaining stocks stock = inventory.copy() # Iterate over each order for order in orders: for book, quantity in order.items(): # If book is not in stock or insufficient quantity, return False if book not in stock or stock[book] < quantity: return False # Deduct the ordered quantity from the stock stock[book] -= quantity return True"},{"question":"You are given a string s consisting of lowercase English letters. You need to find the length of the longest substring that can be rearranged to form a palindrome. A palindrome is a string that reads the same forwards and backwards. For example, \\"racecar\\" and \\"madam\\" are palindromes, but \\"hello\\" is not. Write a function that takes a string s as input and returns the length of the longest palindromic rearrangement of the substring of s. **Function Signature:** ```python def longest_palindromic_substring(s: str) -> int: ``` **Input:** - A single string s (1 <= len(s) <= 10^5) consisting of lowercase English letters. **Output:** - An integer representing the length of the longest substring of s that can be rearranged to form a palindrome. **Example:** ```python assert longest_palindromic_substring(\\"abccccdd\\") == 7 # \\"dccaccd\\" is the longest palindromic rearrangement assert longest_palindromic_substring(\\"a\\") == 1 # \\"a\\" is a single-letter palindrome assert longest_palindromic_substring(\\"abc\\") == 1 # \\"a\\", \\"b\\", or \\"c\\" are the longest single-letter palindromes ``` # Explanation In the first example, the substring \\"dccaccd\\" can be rearranged to form the palindrome \\"dccaccd\\". In the second example, \\"a\\" itself is a palindrome. In the third example, the longest single characters \\"a\\", \\"b\\" or \\"c\\" themselves are palindromes, each of length 1. If there are multiple solutions, return the length of any of them.","solution":"def longest_palindromic_substring(s: str) -> int: from collections import Counter char_count = Counter(s) length = 0 odd_found = False for count in char_count.values(): if count % 2 == 0: length += count else: length += count - 1 odd_found = True return length + 1 if odd_found else length"},{"question":"Given an array of integers, determine if there is any subset of these integers that adds up to a given target sum. You need to implement a function `canSumSubset(arr, target)` that returns `True` if such a subset exists and `False` otherwise. The first line contains an integer `n` (1 le n le 100) — the number of elements in the array. The second line contains `n` integers a_{1}, a_{2}, ..., a_{n} (1 le a_{i} le 1000) — the elements of the array. The third line contains an integer `target` (1 le target le 10^5) — the target sum to be checked. Return `True` if there is a subset that adds up to the target sum, otherwise return `False`. Example: Input: ``` 6 3 34 4 12 5 2 9 ``` Output: ``` True ``` Explanation: There is a subset (4, 5) that adds up to the target sum of 9. Example: Input: ``` 6 3 34 4 12 5 2 30 ``` Output: ``` False ``` Explanation: There is no subset that adds up to the target sum of 30.","solution":"def canSumSubset(arr, target): Given an array of integers and a target sum, determine if there is a subset of these integers that adds up to the target sum. n = len(arr) dp = [[False] * (target + 1) for _ in range(n + 1)] for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): for j in range(1, target + 1): if j < arr[i-1]: dp[i][j] = dp[i-1][j] else: dp[i][j] = dp[i-1][j] or dp[i-1][j-arr[i-1]] return dp[n][target]"},{"question":"A student aims to solve a mathematical problem using a piece of code. However, the student\'s code has some bugs causing incorrect output. You are to help the student correct their code. Here is the original problem: Given an integer array `arr` of size `n` and an integer `x`, determine whether there exist three distinct indices `i`, `j`, and `k` such that `arr[i] + arr[j] + arr[k] = x`. Write a function `find_triplet` that takes the following arguments: - `n`: an integer, representing the size of the array - `arr`: a list of integers of length `n` - `x`: an integer The function should return `True` if such a triplet exists, otherwise `False`. Below is the student\'s original code: ```python def find_triplet(n, arr, x): for i in range(n): for j in range(i + 1, n): for k in range(j + 1, n): if arr[i] + arr[j] + arr[k] == x: return True return False ``` However, the student has noted that the code is inefficient for large inputs and would like to optimize it. Re-write the `find_triplet` function using an optimized approach, such as sorting the array followed by using a two-pointer technique. **Example 1:** Input: `n = 4`, `arr = [1, 4, 45, 6, 10, 8]`, `x = 22` Output: `True` Explanation: The triplet `4, 10, 8` in the array sums to 22. **Example 2:** Input: `n = 3`, `arr = [1, 2, 4, 3, 6]`, `x = 10` Output: `True` Explanation: The triplet `1, 3, 6` in the array sums to 10. **Example 3:** Input: `n = 2`, `arr = [1, 2]`, `x = 5` Output: `False` Explanation: There are no three distinct elements in the array. Write the optimized `find_triplet` function below.","solution":"def find_triplet(n, arr, x): Returns True if there exist three distinct indices i, j, and k such that arr[i] + arr[j] + arr[k] = x, otherwise False. arr.sort() for i in range(n - 2): left = i + 1 right = n - 1 while left < right: current_sum = arr[i] + arr[left] + arr[right] if current_sum == x: return True elif current_sum < x: left += 1 else: right -= 1 return False"},{"question":"The secretive organization known as EncryptNet monitors the encrypted data traffic on its networks. EncryptNet is very concerned about both efficiency and security. Recently, they\'ve been tasked with analyzing a set of encrypted messages using custom encryption keys. Each message is represented as a sequence of integers and is encrypted using a specific key. To analyze and potentially decrypt a message, they need to determine certain characteristics such as the most frequently occurring integer in the message. Your task is to write a program that, given a list of messages and their respective keys, finds the most frequently occurring integer in each message. If there are multiple integers with the same highest frequency, return the smallest one. Each message is described by a list of integers, and each key is just an identifier for the corresponding message. **Input Format** - The first line contains an integer, n (1 le n le 10^5), which indicates the number of encrypted messages. - The next 2 cdot n lines contain two lines for each message: - The first line contains the key, which is a string of alphanumeric characters (length between 1 and 10). - The second line contains a space-separated list of integers representing the encrypted message. Each integer is between 0 and 10^6, and the length of each message will not exceed 10^5 integers. **Output Format** For each message key, output the key followed by the most frequently occurring integer in the corresponding message. Each output should be on a new line. **Constraints** - The sum of the lengths of all messages will not exceed 10^6 integers. **Example** **Input:** ``` 3 key1 4 5 6 7 4 4 7 key2 8 9 8 6 6 8 key3 1 2 3 1 1 2 3 2 1 ``` **Output:** ``` key1 4 key2 8 key3 1 ``` **Explanation:** 1. For `key1`, the integer `4` appears `3` times, which is the highest frequency. 2. For `key2`, the integer `8` appears `3` times, which is the highest frequency. 3. For `key3`, the integer `1` appears `4` times, which is the highest frequency. **Note:** If the frequencies were tied, you\'d choose the smaller integer. For instance, if in `key1` the list had `[4 5 4 6 6 5]`, where both `4` and `5` occur equally, you would choose `4` because it\'s smaller.","solution":"from collections import Counter def find_most_frequent_integer(messages): Given a list of tuples (key, message) where key is a string and message is a list of integers, returns a list of tuples (key, most_frequent_integer_in_message). results = [] for key, message in messages: counter = Counter(message) most_frequent = min((-count, num) for num, count in counter.items())[1] results.append((key, most_frequent)) return results def process_input(input_lines): Processes input lines to convert them into a suitable format for find_most_frequent_integer function. n = int(input_lines[0]) messages = [] for i in range(n): key = input_lines[2 * i + 1] message = list(map(int, input_lines[2 * i + 2].split())) messages.append((key, message)) return messages"},{"question":"Emma is fascinated by palindromes and loves to explore their properties. Her latest interest is in constructing the longest possible palindrome from a given string. However, she knows that if a string has characters that each occur an even number of times, it can be rearranged into a palindrome. If one character has an odd occurrence, the longest palindrome will be slightly shorter. You are given a string `s` consisting of lowercase English letters. Your task is to determine the length of the longest palindrome that can be constructed from the given string. For example, for the string `aabbccdd`, the longest palindrome that can be formed is `aabbccdd` itself, which is 8 characters long. For the string `aaabbccc`, one possible longest palindrome is `abccba`, which is 5 characters long. Write a function `longest_palindrome_length(s)` that takes a string `s` as input and returns the length of the longest palindrome that can be constructed from `s`. # Function Signature ```python def longest_palindrome_length(s: str) -> int: pass ``` # Input - `s`: a string consisting of lowercase English letters (1 ≤ len(s) ≤ 1000). # Output - The length of the longest palindrome that can be constructed from the given string. # Example ```python assert longest_palindrome_length(\\"aabbccdd\\") == 8 assert longest_palindrome_length(\\"aaabbccc\\") == 7 ``` # Constraints - You must ensure that your solution runs efficiently with the given constraints.","solution":"def longest_palindrome_length(s: str) -> int: from collections import Counter # Count occurrences of each character char_count = Counter(s) length = 0 odd_found = False for count in char_count.values(): # If the count is even, it can be fully used if count % 2 == 0: length += count else: # If the count is odd, use (count - 1) which is even, and mark that we found an odd length += count - 1 odd_found = True # If there\'s any character with an odd count, we can place exactly one in the middle if odd_found: length += 1 return length"},{"question":"You are given three arrays representing the stock prices of three different companies over a period of days. You need to determine the longest span of consecutive days where the relative order of stock prices of each company remains the same. Specifically, for any three days in that span, if the stock price of company A is greater than company B on the first day, it must also be greater on the subsequent days, and similarly for all other pairs. The first line contains an integer N (1 le N le 1000) representing the number of days. The second line contains N integers p_1, p_2, ldots, p_N (1 le p_i le 10000) representing the stock prices of company A. The third line contains N integers q_1, q_2, ldots, q_N (1 le q_i le 10000) representing the stock prices of company B. The fourth line contains N integers r_1, r_2, ldots, r_N (1 le r_i le 10000) representing the stock prices of company C. Print the length of the longest span of consecutive days where the relative order of stock prices between any two companies remains the same. For example, if the stock prices on consecutive days for three companies are as below: Company A: [5, 6, 7, 1, 4] Company B: [2, 3, 5, 1, 2] Company C: [4, 5, 6, 2, 3] The longest span where the relative order of stock prices remains the same is 3 days (first three days), as A > B, A > C, and B > C holds true for days 1, 2, and 3.","solution":"def longest_consistent_span(N, A, B, C): def get_relations(x, y): if x > y: return \'>\' elif x < y: return \'<\' else: return \'=\' def get_pattern(i): return (get_relations(A[i], B[i]), get_relations(B[i], C[i]), get_relations(A[i], C[i])) max_span = 1 current_span = 1 for i in range(1, N): if get_pattern(i) == get_pattern(i - 1): current_span += 1 max_span = max(max_span, current_span) else: current_span = 1 return max_span"},{"question":"You are given an array of integers. You can perform the following operation any number of times: * Select any subsequence of this array and delete it (the subsequence must contain at least one element). Your goal is to make the greatest common divisor (GCD) of the remaining array elements as large as possible. You have to determine the maximum possible GCD you can achieve. Input: The first line contains an integer n (1 le n le 1000) — the length of the array. The second line contains n integers a_1, a_2, ..., a_n (1 le a_i le 10^6) — the elements of the array. Output: Print a single integer — the maximum possible GCD of the remaining elements after performing the operations any number of times. Example: Input: 6 12 15 18 21 24 27 Output: 3 Explanation: One possible way to achieve GCD=3 is to delete the subsequences containing elements [15], [21], and [27]. The remaining elements [12, 18, 24] have a GCD of 6. After deleting subsequences containing elements [18] and [24], the remaining elements [12] have GCD=3 which is the maximum possible GCD achievable after performing the required operations.","solution":"from math import gcd from functools import reduce def max_possible_gcd(n, arr): Returns the maximum possible GCD of the remaining array elements after performing the given operations any number of times. array_gcd = reduce(gcd, arr) return array_gcd"},{"question":"You are given a grid with n rows and m columns, each cell containing a non-negative integer. You begin at the top-left corner of the grid and can only move either right or down to reach the bottom-right corner. Your task is to find a path such that the sum of the values of the visited cells is maximized. In the path, you can visit a cell at most once, and the path should always be moving right or down. Return the maximum sum achievable and one possible path (there might be multiple with the same maximum sum). For example, given the grid: 2 4 1 0 6 5 1 1 0 One possible path providing a maximum sum is: 2 → 4 → 6 → 5 → 0, giving a maximum sum of 17. The input consists of: The first line contains two integers n and m (1 leq n, m leq 500) — the number of rows and columns in the grid. Each of the following n lines contains m integers representing the grid cells, where each integer is between 0 and 1000. In the first line of the output, print one integer representing the maximum sum. In the second line, print a string representing the path taken to achieve this sum, using \'R\' to denote a move to the right and \'D\' to denote a move down. If there are multiple answers, you can print any. Example: ``` Input: 3 3 2 4 1 0 6 5 1 1 0 Output: 17 RRDD ```","solution":"def max_path_sum(grid): n = len(grid) m = len(grid[0]) # Create a 2D dp array where dp[i][j] represents the maximum sum to reach cell (i, j) dp = [[0] * m for _ in range(n)] # Create a 2D path array where path[i][j] stores the direction to move to achieve max sum at (i, j) path = [[\'\'] * m for _ in range(n)] # Initialize starting point dp[0][0] = grid[0][0] # Initialize first row and first column for i in range(1, m): dp[0][i] = dp[0][i-1] + grid[0][i] path[0][i] = \'R\' for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] path[i][0] = \'D\' # Fill up the dp and path arrays for i in range(1, n): for j in range(1, m): if dp[i-1][j] > dp[i][j-1]: dp[i][j] = dp[i-1][j] + grid[i][j] path[i][j] = \'D\' else: dp[i][j] = dp[i][j-1] + grid[i][j] path[i][j] = \'R\' # Reconstruct the path from bottom-right to top-left i, j = n-1, m-1 result_path = [] while i > 0 or j > 0: if path[i][j] == \'R\': result_path.append(\'R\') j -= 1 else: result_path.append(\'D\') i -= 1 result_path.reverse() return dp[-1][-1], \'\'.join(result_path)"},{"question":"You\'re given an integer array `nums` sorted in non-decreasing order, and an integer `target`. Your task is to find the starting and ending position of a given target value in the array. If target is not found in the array, return `[-1, -1]`. You must write an algorithm with `O(log n)` runtime complexity. The first input line contains the integer array `nums` (sorted in non-decreasing order) and the second input line contains the integer `target`. Output an array of two integers, the starting and ending positions of the given target value in the array or `[-1, -1]` if not found. Example: Input: nums = [5, 7, 7, 8, 8, 10] target = 8 Output: [3, 4]","solution":"def search_range(nums, target): Returns the starting and ending positions of the given target in the sorted array nums. If the target is not found, returns [-1, -1]. def binary_search_left(nums, target): low, high = 0, len(nums) - 1 while low <= high: mid = (low + high) // 2 if nums[mid] < target: low = mid + 1 else: high = mid - 1 return low def binary_search_right(nums, target): low, high = 0, len(nums) - 1 while low <= high: mid = (low + high) // 2 if nums[mid] <= target: low = mid + 1 else: high = mid - 1 return high left_index = binary_search_left(nums, target) right_index = binary_search_right(nums, target) # Check if target is not in the array if left_index <= right_index and left_index < len(nums) and nums[left_index] == target: return [left_index, right_index] return [-1, -1]"},{"question":"You are given a 2D grid of characters with dimensions n x m, where each cell contains either a dot (\'.\') representing an empty space, or a hash (\'#\') representing an obstacle. You need to determine the length of the shortest path from the top-left corner to the bottom-right corner of the grid, avoiding obstacles. You can move up, down, left, or right, but not diagonally. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000), representing the number of rows and columns in the grid. Each of the next n lines contains a string of length m, consisting of \'.\' and \'#\'. If there\'s no valid path from the top-left to the bottom-right corner, output -1. Otherwise, output the length of the shortest path. Example input: 3 3 ... .#. ... Example output: 4","solution":"from collections import deque def shortest_path(n, m, grid): Finds the length of the shortest path from the top-left corner to the bottom-right corner of the grid, avoiding obstacles. Returns -1 if no such path exists. # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Check if the start or end is an obstacle if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 # Initialize the queue with the starting point queue = deque([(0, 0, 0)]) visited = set() visited.add((0, 0)) while queue: x, y, dist = queue.popleft() # Check if we have reached the bottom-right corner if x == n-1 and y == m-1: return dist # Explore neighbors for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) # If the loop ends without finding a path return -1"},{"question":"A chef is preparing a special dish and he needs exactly n grams of a particular ingredient. The chef has m types of jars, each containing a certain amount of the ingredient noted in grams. He can use any number of jars, and even multiple jars of the same type, but he wants to do this in such a way that he uses the minimum number of jars. Given the above, determine the minimum number of jars the chef needs to get exactly n grams of the ingredient. If it is not possible to get exactly n grams, return -1. The first input line contains a single integer t (1 leq t leq 1000) — the number of test cases. The first line of each test case contains two integers n and m (1 leq n, m leq 1000) — the exact grams of the ingredient needed, and the number of available jar types. The following line contains m integers a_1, a_2, ldots, a_m (1 leq a_i leq 1000) — the amounts of the ingredient in each type of jar. For each test case, output the minimum number of jars needed to exactly get n grams, or -1 if it is not possible. Example: Input: ``` 2 7 3 1 3 4 10 4 2 3 5 7 ``` Output: ``` 2 2 ``` Explanation: In the first example, the chef needs 7 grams and has jars with 1, 3, and 4 grams. The minimum jars needed are 2 (use two jars of 3 grams and one jar of 1 gram). In the second example, the chef needs 10 grams and has jars with 2, 3, 5, and 7 grams. The minimum jars needed are 2 (use one jar of 3 grams and one jar of 7 grams).","solution":"def min_jars(n, jars): dp = [float(\'inf\')] * (n + 1) dp[0] = 0 for jar in jars: for i in range(jar, n + 1): if dp[i - jar] != float(\'inf\'): dp[i] = min(dp[i], dp[i - jar] + 1) return dp[n] if dp[n] != float(\'inf\') else -1 def process_cases(test_cases): results = [] for n, m, jars in test_cases: results.append(min_jars(n, jars)) return results"},{"question":"You are given a binary tree with n nodes, where each node has a positive integer value. Your task is to find the maximum sum of values from root to any leaf node. A leaf node is one that does not have any child nodes. Write a function: ```python def max_path_sum(root: TreeNode) -> int: pass ``` # Input: - The input will be provided as a binary tree serialized into a list where the position of each integer follows binary tree level order traversal. Example input: ``` [10, 5, 20, 1, 8, 15, 25] ``` This represents the following binary tree: ``` 10 / 5 20 / / 1 8 15 25 ``` # Output: - The function should return the maximum sum of values from the root to any leaf node. Example Output: ``` 55 ``` In the example above, the maximum path sum is 10 -> 20 -> 25. The sum is 10 + 20 + 25 = 55.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def construct_tree(level_order): if not level_order: return None root = TreeNode(level_order[0]) queue = [root] i = 1 while queue and i < len(level_order): current = queue.pop(0) if i < len(level_order) and level_order[i] is not None: current.left = TreeNode(level_order[i]) queue.append(current.left) i += 1 if i < len(level_order) and level_order[i] is not None: current.right = TreeNode(level_order[i]) queue.append(current.right) i += 1 return root def max_path_sum(root): if not root: return 0 if not root.left and not root.right: return root.val left_sum = max_path_sum(root.left) if root.left else 0 right_sum = max_path_sum(root.right) if root.right else 0 return root.val + max(left_sum, right_sum)"},{"question":"You are given a string s consisting of lowercase English letters. Your task is to determine if it is possible to delete exactly one character from the string to make it a palindrome. If it is possible, print \\"YES\\", otherwise, print \\"NO\\". A string is considered a palindrome if it reads the same forward and backward. The input consists of multiple test cases. The first line contains an integer t (1 le t le 1000) — the number of test cases. Each of the next t lines contains a single string s (1 le |s| le 1000). For each test case, print \\"YES\\" or \\"NO\\" on a new line based on whether it is possible to delete exactly one character from the string to make it a palindrome.","solution":"def can_form_palindrome_by_deleting_one_char(t, test_cases): results = [] for s in test_cases: if is_palindrome(s): results.append(\\"YES\\") continue found = False length = len(s) for i in range(length): # Remove one character and check if resulting string is palindrome if is_palindrome(s[:i] + s[i+1:]): results.append(\\"YES\\") found = True break if not found: results.append(\\"NO\\") return results def is_palindrome(s): return s == s[::-1]"},{"question":"Alex is a skilled horse trainer. His job is to train horses for long-distance races. He wants to ensure that each horse gains maximum endurance by running unique paths in a horse training field represented as an undirected graph with n nodes and m edges. The goal is to pick the maximum number of unique paths starting from node 1 to node n. Each path should have no cycles, and no two paths should share any edge. Alex has exactly y horses to train. For each horse, he wants them to run a unique path from node 1 to node n. Alex would like to determine the maximum number of horses he can train simultaneously. Output the maximum number of unique paths that Alex can pick from node 1 to node n. If no such path exists, output 0. The first line contains three integers n, m and y (2 ≤ n ≤ 50, 1 ≤ m ≤ 500, 1 ≤ y ≤ 100) — the number of nodes, the number of undirected edges, and the number of horses, respectively. Each of the following m lines contains two integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi), indicating an undirected edge between node ai and node bi. There are no multiple edges or self loops. It is guaranteed that there exists at least one path from node 1 to node n. Print a single integer — the maximum number of unique paths Alex can pick from node 1 to node n. **Example:** Input: ``` 5 6 3 1 2 2 3 3 5 1 4 4 5 2 4 ``` Output: ``` 2 ``` Explanation: There are three different simple paths from node 1 to node 5: 1-2-3-5, 1-4-5, and 1-2-4-5. Among these, we can pick at most two unique paths that do not share any edges: {1-2-3-5, 1-4-5}. Therefore, Alex can train at most two horses simultaneously using unique paths.","solution":"from collections import defaultdict, deque def bfs_find_path(capacity, source, sink, parent): visited = set() queue = deque([source]) visited.add(source) while queue: node = queue.popleft() for neighbor in capacity[node]: if neighbor not in visited and capacity[node][neighbor] > 0: queue.append(neighbor) visited.add(neighbor) parent[neighbor] = node if neighbor == sink: return True return False def ford_fulkerson(graph, source, sink): capacity = defaultdict(lambda: defaultdict(int)) for u in graph: for v in graph[u]: capacity[u][v] = 1 parent = {} max_flow = 0 while bfs_find_path(capacity, source, sink, parent): path_flow = float(\'Inf\') s = sink while s != source: path_flow = min(path_flow, capacity[parent[s]][s]) s = parent[s] v = sink while v != source: u = parent[v] capacity[u][v] -= path_flow capacity[v][u] += path_flow v = parent[v] max_flow += path_flow return max_flow def max_unique_paths(n, m, y, edges): graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) max_paths = ford_fulkerson(graph, 1, n) return min(max_paths, y) # Example usage: n, m, y = 5, 6, 3 edges = [(1, 2), (2, 3), (3, 5), (1, 4), (4, 5), (2, 4)] print(max_unique_paths(n, m, y, edges)) # Output: 2"},{"question":"You are given a list of integers representing heights of buildings in a city. These buildings are arranged in a straight line, and together they form the city\'s skyline. Your task is to determine the maximum area of a rectangular section of the skyline formed by selecting contiguous buildings. The height of the rectangle is the height of the shortest building in the selected section, and the width is the number of buildings in that section. You need to find and print the maximum rectangular area that can be formed. Input: A single line containing the integers representing the heights of the buildings, separated by spaces (1 ≤ the number of buildings ≤ 100,000, 1 ≤ height of each building ≤ 1,000,000). Output: A single integer representing the maximum rectangular area that can be formed. In the first sample, the heights are [2, 1, 5, 6, 2, 3], the maximum rectangular area that can be formed is 10 (by selecting the 3rd and 4th buildings of heights 5 and 6). In the second sample, the heights are [4, 2, 0, 3, 2, 5], the maximum rectangular area that can be formed is 6 (by selecting the 4th and 5th buildings of heights 3 and 2).","solution":"def largestRectangleArea(heights): Returns the largest rectangular area in a histogram. :param heights: List[int] - a list of positive integers representing building heights :return: int - the maximum rectangular area that can be formed stack = [] max_area = 0 index = 0 while index < len(heights): # Push current building to stack if it is higher than the building at stack top if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: # Pop the top top_of_stack = stack.pop() # Calculate the area with the popped element area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) # Process remaining buildings in the stack while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Olga is organizing a bookshelf with multiple rows of books. Each book has a unique height. She wants the books in each row to be arranged such that the heights of the books are in non-decreasing order from left to right. To achieve this, Olga can perform the following operation any number of times: choose two adjacent books on the same row and swap them. You need to determine the minimum number of swaps needed to make sure each row of books is arranged as desired. The first line contains one integer m (1 le m le 2000) — the number of rows of bookshelves. The second line contains m space-separated integers n_1, n_2, dots, n_m (1 le n_i le 500) — the number of books in each row. The next m lines contain sequences of integers. The i-th of these lines contains n_i integers, denoting the heights of the books in the i-th row. Print the minimum number of swaps required for each row to be sorted in non-decreasing order. Input - The first line: an integer m (1 le m le 2000) representing the number of rows. - The second line: m integers representing the number of books in each row. - The next m lines: sequences of integers where the i-th line contains n_i integers denoting the heights of the books in the i-th row. Output - Output contains m integers where the i-th integer represents the minimum number of swaps required to sort the i-th row. Example: Input: 3 4 3 5 4 3 1 2 8 7 5 10 12 20 15 30 Output: 5 3 1 Explanation: In the first row, five swaps are needed to sort the list in non-decreasing order. In the second row, it takes three swaps. In the third row, only one swap is needed to arrange the books in non-decreasing order.","solution":"def count_inversions(arr): Helper function to count inversions using merge sort. if len(arr) < 2: return arr, 0 mid = len(arr) // 2 left, left_inv = count_inversions(arr[:mid]) right, right_inv = count_inversions(arr[mid:]) merged, split_inv = merge_and_count(left, right) return merged, left_inv + right_inv + split_inv def merge_and_count(left, right): Merges two sorted subarrays and counts split inversions. sorted_arr = [] i = 0 # index for left array j = 0 # index for right array inversions = 0 while i < len(left) and j < len(right): if left[i] <= right[j]: sorted_arr.append(left[i]) i += 1 else: sorted_arr.append(right[j]) inversions += len(left) - i j += 1 sorted_arr.extend(left[i:]) sorted_arr.extend(right[j:]) return sorted_arr, inversions def min_swaps_to_sort_rows(m, n, bookshelf): result = [] for row in bookshelf: _, inversions = count_inversions(row) result.append(inversions) return result"},{"question":"You are given an array of integers which represents the heights of buildings in a row. The buildings form a skyline viewed from the left side. Each building has a width of 1 unit. Your task is to determine the number of visible buildings if viewed from the left. A building is visible if and only if it is not blocked by a taller or equal height building that comes before it in the array. Write a function `countVisibleBuildings` that takes a list of integers and returns the number of visible buildings. # Input: - The first line contains a single integer `n` (1 ≤ n ≤ 10^5), the number of buildings. - The second line contains `n` space-separated integers representing the heights of the buildings (1 ≤ height ≤ 10^9). # Output: - Print a single integer, the number of visible buildings when viewed from the left. # Example: Input: ``` 6 3 7 8 3 6 1 ``` Output: ``` 3 ``` # Explanation: In the given example, the buildings with heights 3, 7, and 8 are visible when viewed from the left.","solution":"def countVisibleBuildings(heights): Returns the number of visible buildings when viewed from the left. Parameters: heights (list of ints): List of building heights Returns: int: Number of visible buildings if not heights: return 0 max_height = float(\'-inf\') visible_count = 0 for height in heights: if height > max_height: visible_count += 1 max_height = height return visible_count"},{"question":"A busy pharmacy needs to optimize the distribution of medications to maximize the efficiency of their storage system. The pharmacy has n different kinds of medications, and each type of medication i requires a specific amount of storage space si (in square meters). However, the storage room of the pharmacy is limited to a total area of m square meters. To make the most efficient use of space, the manager decides to store the medications such that the number of different types of medications is maximized without exceeding the available storage room area. You are required to determine which medications should be stored to maximize the number of different types stored, and calculate the total space utilized. The first line contains two space-separated integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 109) — the number of different types of medications and the total available space in square meters. The second line contains n space-separated integers s1, s2, ..., sn (1 ≤ si ≤ 109) — representing the space required for each type of medication. Print two lines: 1. An integer k — the maximum number of different types of medications that can be stored. 2. k space-separated integers — the indices (1-based) of the medications that should be stored. If there are multiple solutions, print any of them.","solution":"def maximize_medications(n, m, s): indexed_medications = list(enumerate(s, start=1)) indexed_medications.sort(key=lambda x: x[1]) total_space = 0 selected_medications = [] for index, space in indexed_medications: if total_space + space <= m: total_space += space selected_medications.append(index) else: break return len(selected_medications), selected_medications # Example usage: n = 5 m = 10 s = [2, 3, 1, 5, 4] print(maximize_medications(n, m, s))"},{"question":"You have been tasked with developing a software module for a social media app that helps identify the most active time for posts. Users make posts that are timestamped, and our goal is to determine the one-hour period with the highest number of posts. Given a list of timestamps corresponding to when posts were made, return the start of the one-hour period that has the maximum number of posts. If there are multiple one-hour periods with the same number of posts, return the earliest one. # Input The first line contains an integer n (1 leq n leq 10^5), the number of posts. Each of the next n lines contains a timestamp in the format `YYYY-MM-DD HH:MM:SS` representing the time a post was made. # Output Output a single timestamp in the format `YYYY-MM-DD HH:MM:SS` representing the start of the one-hour period with the highest number of posts. # Examples Example 1 # Input ``` 5 2023-10-01 14:00:00 2023-10-01 14:30:00 2023-10-01 14:45:00 2023-10-01 15:00:00 2023-10-01 15:30:00 ``` # Output ``` 2023-10-01 14:00:00 ``` Example 2 # Input ``` 7 2023-10-01 10:00:00 2023-10-01 10:15:00 2023-10-01 10:30:00 2023-10-01 11:00:00 2023-10-01 11:15:00 2023-10-02 10:00:00 2023-10-02 10:15:00 ``` # Output ``` 2023-10-01 10:00:00 ``` # Note In the first example, the one-hour period starting at `2023-10-01 14:00:00` includes 3 posts. The next period `14:30:00 - 15:30:00` includes only 2 posts. Thus, the first period is the one with the maximum number of posts. In the second example, the periods starting at both `2023-10-01 10:00:00` and `2023-10-02 10:00:00` include 3 posts each. However, `2023-10-01 10:00:00` is the earliest, so it is returned.","solution":"from datetime import datetime, timedelta from collections import defaultdict def most_active_hour(n, timestamps): Determines the start of the one-hour period with the highest number of posts. Parameters: n (int): Number of posts. timestamps (list of str): List of timestamps indicating the times the posts were made. Returns: str: The start of the one-hour period in \\"YYYY-MM-DD HH:MM:SS\\" format. # Convert string timestamps to datetime objects datetime_stamps = [datetime.strptime(ts, \\"%Y-%m-%d %H:%M:%S\\") for ts in timestamps] # Sort datetime objects datetime_stamps.sort() max_posts = 0 best_time = None # Traverse each timestamp to find the one-hour window with the most posts for i in range(len(datetime_stamps)): start_time = datetime_stamps[i] end_time = start_time + timedelta(hours=1) # Count the number of posts within the 1-hour interval count = 0 for j in range(i, len(datetime_stamps)): if datetime_stamps[j] < end_time: count += 1 else: break # Check if this window is the most active one if count > max_posts: max_posts = count best_time = start_time return best_time.strftime(\\"%Y-%m-%d %H:%M:%S\\")"},{"question":"Given a sequence of integers, a \\"zigzag\\" subsequence is defined as a subsequence where the differences between successive elements strictly alternate in sign. For example, in the sequence [1, 7, 4, 9, 2, 5], the subsequence [1, 7, 4, 9] is a zigzag subsequence because: - 7 - 1 > 0 - 4 - 7 < 0 - 9 - 4 > 0 Now, given an array of integers, your task is to find the length of the longest zigzag subsequence in this array. # Input - The first line contains a single integer n (1 ≤ n ≤ 1000), the length of the array. - The second line contains n integers separated by spaces, which are the elements of the array. # Output - Output a single integer, the length of the longest zigzag subsequence. # Example Input ``` 6 1 7 4 9 2 5 ``` Output ``` 6 ``` Input ``` 7 1 17 5 10 13 15 10 ``` Output ``` 5 ``` Explanation: In the first example, the entire array itself is a zigzag sequence. In the second example, one possible longest zigzag subsequence is [1, 17, 10, 13, 10].","solution":"def longest_zigzag_subsequence_length(arr): Returns the length of the longest zigzag subsequence. n = len(arr) if n < 2: return n up = [1] * n down = [1] * n for i in range(1, n): if arr[i] > arr[i - 1]: up[i] = down[i - 1] + 1 down[i] = down[i - 1] elif arr[i] < arr[i - 1]: down[i] = up[i - 1] + 1 up[i] = up[i - 1] else: up[i] = up[i - 1] down[i] = down[i - 1] return max(up[n - 1], down[n - 1]) # Example usage: # n = int(input()) # arr = list(map(int, input().split())) # print(longest_zigzag_subsequence_length(arr))"},{"question":"You are given an array of integers of length n representing the prices of a stock on different days. You can perform at most one transaction, which means you can buy and sell the stock once. Your task is to devise an efficient algorithm to find the maximum profit you can achieve by buying and selling the stock on different days. If no profit can be achieved, return zero. You have to answer t independent test cases. The first line of the input contains one integer t (1 le t le 10^4) — the number of test cases. Then t test cases follow. The first line of the test case contains one integer n (1 le n le 10^5) — the length of the array. The second line of the test case contains n space-separated integers representing stock prices. It is guaranteed that the sum of n over all test cases does not exceed 10^6 (sum n le 10^6). For each test case, print the answer — the maximum profit you can achieve from one transaction. If no profit is possible, print zero. # Example Input ``` 3 6 7 1 5 3 6 4 5 7 6 4 3 1 4 2 4 1 7 ``` Output ``` 5 0 6 ``` Explanation - In the first test case, buy on day 2 at price 1 and sell on day 5 at price 6, profit = 6 - 1 = 5. - In the second test case, no day has a subsequent day priced lower than an earlier day, thus the profit is 0. - In the third test case, buy on day 1 at price 2 and sell on day 4 at price 7, profit = 7 - 1 = 6.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved by buying and selling stock prices represented in the array prices. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: if price < min_price: min_price = price else: profit = price - min_price if profit > max_profit: max_profit = profit return max_profit def solve(t, test_cases): results = [] for case in test_cases: _, prices = case results.append(max_profit(prices)) return results"},{"question":"A company has introduced a new system that assigns workloads to its employees. Each employee can handle a maximum workload capacity, and the company wants to ensure that the total workload is distributed as evenly as possible among all employees while adhering to their maximum capacities. The company has `m` employees and `n` tasks. Each task has a specific workload. Given the list of workloads for each task, and the maximum capacity that each employee can handle, help the company determine an optimal workload assignment to the employees such that the difference in total workload between the most and least loaded employees is minimized, and no employee exceeds their maximum capacity. Write a program to achieve this task assignment goal. If it is not possible to assign the workload without exceeding the capacities, the program should indicate this. Input: - The first line contains two integers `m` and `n` (1 ≤ m, n ≤ 1000) - the number of employees and the number of tasks. - The second line contains `m` integers c1, c2, ..., cm (1 ≤ ci ≤ 1000) - the maximum capacity of each employee. - The third line contains `n` integers t1, t2, ..., tn (1 ≤ ti ≤ 1000) - the workload of each task. Output: - If it is possible to assign the workload to the employees without exceeding their capacities, print `YES` on the first line. - On the following `m` lines, print the assigned tasks for each employee (one line per employee). Each line should start with an integer representing the number of tasks assigned to the employee followed by the indices of those tasks (1-based index) in any order. - If it is not possible to assign the tasks without exceeding the capacities, print `NO`. Example: Input: ``` 3 5 8 5 7 2 3 4 5 1 ``` Output: ``` YES 2 1 5 1 2 2 3 4 ```","solution":"def assign_workloads(m, n, capacities, tasks): from heapq import heappush, heappop task_indices = sorted(range(n), key=lambda i: -tasks[i]) employees = [(0, i) for i in range(m)] assignments = [[] for _ in range(m)] assigned_workloads = [0] * m for task_idx in task_indices: current_workload = tasks[task_idx] total_workload, employee_idx = heappop(employees) if assigned_workloads[employee_idx] + current_workload > capacities[employee_idx]: return \\"NO\\" assigned_workloads[employee_idx] += current_workload assignments[employee_idx].append(task_idx + 1) heappush(employees, (assigned_workloads[employee_idx], employee_idx)) result = \\"YESn\\" for employee in assignments: result += f\\"{len(employee)} \\" + \\" \\".join(map(str, employee)) + \\"n\\" return result.strip() # Function to handle input and call the above function def workload_assignment(m, n, capacities, tasks): return assign_workloads(m, n, capacities, tasks)"},{"question":"You are given a sorted array and a target value. Determine if there exist two indices i and j such that the values at these indices sum up to the target value. Return the indices of the two numbers such that they add up to the target, or return `-1 -1` if no such indices exist. The first line contains two integers n (1 ≤ n ≤ 10^4) and target value (|target| ≤ 10^9). The next line contains n integers in sorted order (each integer within the range |value| ≤ 10^9). Output two integers that are the indices (1-based) of the elements that add up to the target value. If no two numbers can form the target sum, output `-1 -1`. Example: Input: 5 9 1 2 4 4 5 Output: 3 4 Explanation: The values at indices 3 and 4 are both 4, and their sum is 8 which equals the target value.","solution":"def two_sum_sorted(arr, target): Find two numbers in the sorted array `arr` that sum up to `target`. Return the 1-based indices of these two numbers. If no such indices exist, return -1, -1. left, right = 0, len(arr) - 1 while left < right: curr_sum = arr[left] + arr[right] if curr_sum == target: return left + 1, right + 1 elif curr_sum < target: left += 1 else: right -= 1 return -1, -1"},{"question":"You are given a string `S` consisting of lowercase English alphabets and a pattern `P` consisting of lowercase English alphabets and wildcard characters `*` and `?`. The pattern `P` needs to be matched with the string `S` following these rules: 1. The character `?` matches any single character. 2. The character `*` matches any sequence of characters (including the empty sequence). Your task is to implement a function `isMatch(S: str, P: str) -> bool` that returns `True` if the pattern matches the entire input string, otherwise returns `False`. # Input - A string `S` (1 ≤ |S| ≤ 1000) representing the input string. - A string `P` (1 ≤ |P| ≤ 1000) representing the pattern. # Output Return `True` if the pattern matches the string, and `False` otherwise. # Examples Input ``` aa a ``` Output ``` False ``` Input ``` aa a* ``` Output ``` True ``` Input ``` cb ?a ``` Output ``` False ``` Input ``` adceb *a*b ``` Output ``` True ``` Input ``` acdcb a*c?b ``` Output ``` False ```","solution":"def isMatch(S: str, P: str) -> bool: m, n = len(S), len(P) dp = [[False] * (n + 1) for _ in range(m + 1)] dp[0][0] = True for j in range(1, n + 1): if P[j - 1] == \'*\': dp[0][j] = dp[0][j - 1] for i in range(1, m + 1): for j in range(1, n + 1): if P[j - 1] == \'*\': dp[i][j] = dp[i][j - 1] or dp[i - 1][j] elif P[j - 1] == \'?\' or S[i - 1] == P[j - 1]: dp[i][j] = dp[i - 1][j - 1] return dp[m][n]"},{"question":"You are given a list of integers representing the heights of buildings in a straight line. Each building casts a shadow to the right on subsequent buildings shorter than itself until a taller building blocks the shadow. Calculate the total number of buildings that are in the shadow of other buildings. The first line contains the single positive integer n (1 ≤ n ≤ 10^5) — the number of buildings. The second line contains n positive integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9), where hi represents the height of the i-th building. Output the total number of buildings that are in the shadow of other buildings. For example, in the array [6, 2, 4, 1, 5], buildings of height 2 and 1 are in the shadow of building of height 6, and buildings of height 1 and 4 are in the shadow of building of height 5, resulting in a total count of 4.","solution":"def count_shadowed_buildings(buildings): Given a list of building heights, return the number of buildings that are in the shadow of other buildings. n = len(buildings) shadowed_count = 0 max_height = 0 for height in buildings: if height <= max_height: shadowed_count += 1 else: max_height = height return shadowed_count"},{"question":"Given an array of integers nums and an integer target, return the indices of the two numbers such that they add up to the target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order. The function should return a specific format: it should return a list of exactly two integers that represent the indices of the elements in the nums array whose values add up to the target. # Input - The first line of input contains an integer n (2 ≤ n ≤ 10^5), the number of elements in nums. - The second line contains n integers representing the array nums (−10^9 ≤ nums[i] ≤ 10^9). - The third line contains an integer target, the target sum (−10^9 ≤ target ≤ 10^9). # Output - The output should consist of two integers: the indices (0-based) of the two numbers in nums whose sum equals the target. # Example Input: ``` 4 2 7 11 15 9 ``` Output: ``` 0 1 ``` # Note In the provided example, nums[0] + nums[1] equals 9. Hence, the output is 0 1.","solution":"def two_sum(nums, target): Returns indices of the two numbers in nums whose sum equals the target. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return [] # Example usage: # result = two_sum([2, 7, 11, 15], 9) # print(result) # Output: [0, 1]"},{"question":"Write a function to check if a given positive integer is a prime number. A prime number is a number that is greater than 1 and divided by 1 and itself only. For example, 2, 3, 5, 7, 11, 13, 17, 19, 23, and 29 are prime numbers. The function should take as input a positive integer n (2 ≤ n ≤ 10^12). The function should return \\"Yes\\" if the number is prime, and \\"No\\" otherwise. Examples: - For n = 2, your function should return \\"Yes\\". - For n = 10, your function should return \\"No\\". - For n = 17, your function should return \\"Yes\\".","solution":"def is_prime(n): Check if a given positive integer n is a prime number. Returns \\"Yes\\" if n is prime, \\"No\\" otherwise. if n <= 1: return \\"No\\" if n <= 3: return \\"Yes\\" if n % 2 == 0 or n % 3 == 0: return \\"No\\" i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return \\"No\\" i += 6 return \\"Yes\\""},{"question":"You are given a series of expressions involving basic arithmetic and a set of variables. Each variable is initialized with an integer value. Your task is to evaluate these expressions and provide the correct result based on the variable values and arithmetic operators used. Input: - The first line contains an integer n (1 ≤ n ≤ 100) — the number of variable assignments. - Each of the following n lines contains an assignment of the form \\"x = value\\", where x is a variable name (consisting of lowercase Latin letters, at most 20 characters) and value is an integer (−1000 ≤ value ≤ 1000). - The next line contains an integer m (1 ≤ m ≤ 100) — the number of expressions. - Each of the following m lines contains an arithmetic expression involving the variables defined above. The expressions use the operators +, -, *, / and are guaranteed to be valid. The division operator (/) represents integer division, i.e., the result is rounded towards zero. Output: - For each expression, print the result on a separate line. Example: Input: ``` 3 a = 5 b = 3 c = -2 2 a + b * c (a + b) / c ``` Output: ``` -1 -4 ``` Explanation: - For the expression `a + b * c`, the variables will be substituted as `5 + 3 * -2` which evaluates to `5 + (-6)` yielding `-1`. - For the expression `(a + b) / c`, it would be substituted as `(5 + 3) / -2` which evaluates to `8 / -2` yielding `-4`. Note: - Parentheses can be used in expressions to alter the precedence of operators. - Make sure to parse and compute each expression correctly considering operator precedence and parentheses.","solution":"def evaluate_expressions(variable_assignments, expressions): Evaluates a list of expressions based on given variable assignments. variable_assignments: List of strings in the format \\"variable = value\\". expressions: List of strings of arithmetic expressions. Returns a list of results for each expression. variables = {} # Parse the variable assignments for assignment in variable_assignments: var, value = assignment.split(\\" = \\") variables[var.strip()] = int(value.strip()) results = [] # Evaluate each expression for expression in expressions: try: # Evaluate the expression using the variables result = eval(expression, {}, variables) results.append(result) except ZeroDivisionError: results.append(\\"Error: Division by zero\\") return results # Example usage: # variable_assignments = [\\"a = 5\\", \\"b = 3\\", \\"c = -2\\"] # expressions = [\\"a + b * c\\", \\"(a + b) / c\\"] # print(evaluate_expressions(variable_assignments, expressions))"},{"question":"You are given a sequence of integers representing the daily temperature readings for a certain period. For each day in the sequence, determine how many days you would have to wait until a warmer temperature. If there is no future day with a warmer temperature, record \\"0\\" for that day. Formally, given an array temperatures, for each day i, you need to find the smallest j (j > i) such that temperatures[j] > temperatures[i] and record the value j - i in a new array result. If no such j exists, record \\"0\\". **Input:** - The first line contains a single integer n (1 le n le 10^5), the number of days. - The second line contains n integers representing the temperatures of each day. **Output:** - Print n integers representing the number of days you have to wait until a warmer temperature for each day. If there\'s no future warmer day, print \\"0\\". **Example:** **Input:** ``` 8 73 74 75 71 69 72 76 73 ``` **Output:** ``` 1 1 4 2 1 1 0 0 ``` Explanation: - For the first day (73), the next warmer temperature is on the second day (74), so the answer is 1. - For the second day (74), the next warmer temperature is on the third day (75), so the answer is 1. - For the third day (75), the next warmer temperature is on the seventh day (76), so the answer is 4. - For the fourth day (71), the next warmer temperature is on the sixth day (72), so the answer is 2. - For the fifth day (69), the next warmer temperature is on the sixth day (72), so the answer is 1. - For the sixth day (72), the next warmer temperature is on the seventh day (76), so the answer is 1. - For the seventh day (76), there is no future warmer day, so the answer is 0. - For the eighth day (73), there is no future warmer day, so the answer is 0.","solution":"def daily_temperatures(temperatures): Given a list of daily temperatures, calculates the number of days until a warmer day for each day in the list. If no warmer day exists, returns 0 for that day. :param temperatures: List of integer daily temperatures. :return: List of integers indicating number of days to wait for a warmer temperature. n = len(temperatures) result = [0] * n stack = [] # this will store indices of temperatures list for current_day in range(n): while stack and temperatures[current_day] > temperatures[stack[-1]]: previous_day = stack.pop() result[previous_day] = current_day - previous_day stack.append(current_day) return result"},{"question":"# Task: Leaf Node Distance Sum in Binary Tree You are given a binary tree. Each node in the binary tree has an integer value, and you need to calculate the sum of the distances from each leaf node to the root of the tree. # Input The input is given as a list of tuples, where each tuple represents an edge in the binary tree. The edges are given in the form (parent, child). The root of the tree is always labeled with 1. - The first line contains an integer n, the number of edges in the tree (1 ≤ n ≤ 1000). - The next n lines each contain two integers pi, ci, indicating that node pi is the parent of node ci (1 ≤ pi, ci ≤ 1000). # Output Output a single integer, which is the sum of the distances from each leaf node to the root of the tree. # Example Input ``` 5 1 2 1 3 2 4 2 5 3 6 ``` Output ``` 8 ``` Explanation The tree can be visualized as: ``` 1 / 2 3 / / 4 5 6 ``` - Distance from leaf node 4 to root (1) is 2. - Distance from leaf node 5 to root (1) is 2. - Distance from leaf node 6 to root (1) is 2. Sum of these distances is 2 + 2 + 2 = 6.","solution":"def calculate_leaf_distances(n, edges): from collections import defaultdict, deque # Construct the adjacency list tree = defaultdict(list) for parent, child in edges: tree[parent].append(child) # Function to calculate the distances of all leaves from the root def sum_leaf_distances(root): queue = deque([(root, 0)]) total_distance = 0 while queue: node, distance = queue.popleft() if node not in tree: # it\'s a leaf node total_distance += distance else: for child in tree[node]: queue.append((child, distance + 1)) return total_distance return sum_leaf_distances(1)"},{"question":"You are given a list of integers. Your task is to find the integer that appears the most frequently in the list. If there are multiple numbers with the same highest frequency, return the largest of those numbers. The first line contains a single integer n (1 ≤ n ≤ 100) — the number of elements in the list. The following n lines each contain one integer, which may be positive, zero, or negative. Output the integer that appears the most frequently in the list. If there are ties, output the largest number among them. # Example Input ``` 7 1 3 1 4 5 3 3 ``` Output ``` 3 ``` Explanation The integer 3 appears the most frequently (three times), so the output is 3.","solution":"def most_frequent_element(n, elements): Returns the integer that appears the most frequently in the list. If there are ties, returns the largest number among them. from collections import Counter counter = Counter(elements) most_common = counter.most_common() max_frequency = most_common[0][1] candidates = [key for key, value in most_common if value == max_frequency] return max(candidates)"},{"question":"You are given a list of N integers (2 ≤ N ≤ 1000) that represent the heights of trees in a forest. The forest is organized in such a way that no two trees of the same height are adjacent to each other. However, due to a storm, some trees may have been knocked down, causing some heights to repeat consecutively. Your task is to determine the minimum number of trees that need to be cut down to restore the forest back to its original condition, where no two adjacent trees have the same height. You need to implement a function that takes an array of integers representing the heights of the trees and returns the minimum number of trees that need to be cut down. The function signature is: ```python def minimum_trees_to_cut(heights: List[int]) -> int: ``` **Example:** ``` Input: [1, 2, 2, 3, 4, 4, 5] Output: 2 Input: [7, 7, 6, 5, 5, 5, 1] Output: 2 ```","solution":"from typing import List def minimum_trees_to_cut(heights: List[int]) -> int: This function takes a list of integers (heights of trees) and returns the minimum number of trees that need to be cut down such that no two adjacent trees have the same height. cut_count = 0 i = 0 while i < len(heights) - 1: if heights[i] == heights[i + 1]: cut_count += 1 i += 2 # Skip the next tree since we will cut it down else: i += 1 return cut_count"},{"question":"Shiko and Tomo are playing a game involving a special matrix. Shiko is given a matrix with some of its elements known and some of them as dashes representing unknown elements. Shiko will fill in the unknowns with any integers he wants. The goal for Shiko is to make the determinant of the matrix equal to zero after filling in the unknowns. Tomo is going to play as well, but he has a restricted move: he can zero out exactly one element of the matrix before Shiko fills in the unknowns. If Shiko and Tomo play their only moves optimally, who wins? The first line contains a positive integer N (2 leq N leq 300) denoting the number of rows in the matrix (it\'s an N times N matrix). Each of the following N lines contains N elements which are either integers or a dash (\'-\', representing an unknown element). If Shiko can always fill in the unknowns to make the determinant zero regardless of which element Tomo zeroes out, output \\"Shiko\\". Otherwise, output \\"Tomo\\". You shouldn\'t output the quotation marks. **Example:** Input: ``` 3 1 2 - 3 4 5 - 6 7 ``` Output: ``` Shiko ``` In the above example, Shiko can fill in the matrix as: ``` 1 2 -3 3 4 5 9 6 7 ``` Even if Tomo zeroes out any element, Shiko can always adjust the unknowns to make the determinant of the resulting matrix equal to zero.","solution":"import numpy as np def shiko_or_tomo(matrix): Determines if Shiko can always make the determinant of the matrix zero, regardless of which element Tomo zeroes out. N = len(matrix) # Check if there is a full row or column of known elements for i in range(N): row_known = all(matrix[i][j] != \'-\' for j in range(N)) col_known = all(matrix[j][i] != \'-\' for j in range(N)) if row_known or col_known: return \\"Shiko\\" return \\"Tomo\\" # Example usage N = 3 matrix = [ [1, 2, \'-\'], [3, 4, 5], [\'-\', 6, 7] ] print(shiko_or_tomo(matrix)) # Output should be \\"Shiko\\""},{"question":"You are provided with a list of n positive integers: y1, y2, ..., yn. You can perform the following operation an unlimited number of times: select two different indexes i and j such that yi < yj and swap the values of yi and yj. The objective is to maximize the product of all numbers in the list. Your task is to find the maximum product of all numbers that can be achieved using the allowed operation. The first line contains an integer n (2 ≤ n ≤ 100). Then the second line contains n integers: y1, y2, ..., yn (1 ≤ yi ≤ 100). Output a single integer — the maximum product of all numbers after performing the operations. In the first example, swapping y1 and y2 will give the maximum product 2 * 2 = 4. In the second example, swapping y2 and y3 will give the maximum product 4 * 4 * 4 = 64.","solution":"def maximize_product(n, numbers): Given a list of n positive integers, this function maximizes the product of all numbers after performing unlimited swaps where yi < yj and we can swap yi and yj. :param n: int - Number of elements in list :param numbers: List[int] - List of integers :return: int - Maximum product of all numbers after optimized swaps # Since we can perform any number of swaps where yi < yj, all elements can be the same # and the maximum product is achieved when all elements are equal to the maximum element in the list. max_num = max(numbers) # Since the maximum number can appear in all positions, the product will be max_num ** n return max_num ** n # Example Usage: # n = 3 # numbers = [2, 3, 4] # print(maximize_product(n, numbers)) # Output: 64"},{"question":"A rectangle is placed on a rectangular grid and some of the grid cells are marked as \\"blocked.\\" The rectangle can move freely within the grid, except that it cannot overlap with any blocked cells. The rectangle can move one step to the left, right, up, or down, as long as it stays within the boundaries of the grid and doesn\'t overlap with blocked cells. Given the dimensions of the grid, the initial position of the rectangle, the target position of the rectangle, and the list of blocked cells, determine if the rectangle can reach the target position from the initial position directly or via any sequence of valid moves. The first line of input contains six integers: n, m, a, b, c, d (1 ≤ n, m, a, b, c, d ≤ 100) — the number of rows and columns of the grid, the dimensions (height and width) of the rectangle, and the coordinates of the starting position and the target position of the rectangle. The second line contains an integer k (0 ≤ k ≤ 1000) — the number of blocked cells. Each of the next k lines contains two integers x and y (1 ≤ x ≤ n, 1 ≤ y ≤ m) — the coordinates of a blocked cell. Output \\"YES\\" if the rectangle can reach the target position. Otherwise, output \\"NO.\\" # Example Input ``` 8 8 2 2 3 3 4 3 2 3 3 4 2 4 3 0 ``` Output ``` YES ``` In the example, the grid is 8x8, and the rectangle has dimensions 2x2. The initial position of the rectangle is at (3,3). The blocked cells are at positions (3,2), (3,3), (4,2), and (4,3). The rectangle can reach the target position (5,5) by moving down and to the right without overlapping any blocked cells.","solution":"from collections import deque def can_reach_target(n, m, a, b, start_x, start_y, target_x, target_y, blocked_cells): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] blocked_set = set(blocked_cells) def is_valid(x, y): if x <= 0 or y <= 0 or x + a - 1 > n or y + b - 1 > m: return False for i in range(a): for j in range(b): if (x + i, y + j) in blocked_set: return False return True start = (start_x, start_y) target = (target_x, target_y) queue = deque([start]) visited = set([start]) while queue: x, y = queue.popleft() if (x, y) == target: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if (nx, ny) not in visited and is_valid(nx, ny): queue.append((nx, ny)) visited.add((nx, ny)) return \\"NO\\""},{"question":"You are given two arrays, a and b, both of length n. Your goal is to reorder the elements of array a such that for every valid index i, the sum of elements a_i + b_i is equal to a given integer x. The task is to determine whether such a reordering is possible. If it is possible, output the reordered array a. If it is not possible, output \\"NO\\". The first line of input contains an integer t (1 le t le 100), the number of test cases. Each test case consists of three lines. The first line contains two integers n and x (1 le n le 100, 1 le x le 200) — the length of arrays a and b, and the desired sum of pairs. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 100) — the elements of the first array. The third line contains n integers b_1, b_2, ldots, b_n (1 le b_i le 100) — the elements of the second array. For each test case, print \\"YES\\" followed by the reordered array if it is possible to reorder array a to meet the condition. Otherwise, print \\"NO\\". # Example: Input: ``` 2 3 10 4 2 1 6 8 9 4 8 1 4 3 2 7 5 6 3 ``` Output: ``` YES 4 2 1 NO ```","solution":"def reorder_array_possible(t, test_cases): results = [] for case in test_cases: n, x = case[0] a = case[1] b = case[2] a_sorted = sorted(a) b_sorted = sorted(b, reverse=True) possible = True for i in range(n): if a_sorted[i] + b_sorted[i] != x: possible = False break if possible: results.append(f\\"YESn{\' \'.join(map(str, a_sorted))}\\") else: results.append(\\"NO\\") return results # Example usage: t = 2 test_cases = [ [(3, 10), [4, 2, 1], [6, 8, 9]], [(4, 8), [1, 4, 3, 2], [7, 5, 6, 3]] ] print(\\"n\\".join(reorder_array_possible(t, test_cases)))"},{"question":"You are managing a restaurant and want to keep track of customers\' orders. You are given q queries of three types: 1. `1 x order`: Customer with ID `x` places an `order`. It is guaranteed that no customer has placed an order with this ID before this query. 2. `2 x`: Customer with ID `x` removes their last order. It is guaranteed that there is at least one order associated with customer `x`. 3. `3 x`: Print the last order of customer `x`. It is guaranteed that customer `x` has at least one order. Your task is to process each query and output the results of the queries of type `3` in the order they appear. If you are a Python programmer, consider using collections such as defaultdict from the `collections` module for efficient management. The first line of the input contains one integer q (1 le q le 2 cdot 10^5) — the number of queries. Then q lines follow. The i-th line contains the i-th query in the format as described above. It is guaranteed that all queries are valid given the constraints, and there is at least one query of type `3` in the input. The ID `x` is a positive integer satisfying 1 le x le 2 cdot 10^5. Print answers to queries of type `3` in the order they appear in the input. **Example:** Input: ``` 9 1 1 pasta 1 1 burger 1 2 salad 3 1 2 1 3 1 3 2 2 2 3 2 ``` Output: ``` burger pasta salad () # for removed query, means if no more orders present ``` Explanation: 1. `1 1 pasta`: Customer 1 places an order for pasta. 2. `1 1 burger`: Customer 1 places another order for a burger. 3. `1 2 salad`: Customer 2 places an order for a salad. 4. `3 1`: Print the last order of customer 1, which is \\"burger\\". 5. `2 1`: Customer 1 removes their last order (burger). 6. `3 1`: Print the last order of customer 1 again, which is now \\"pasta\\". 7. `3 2`: Print the last order of customer 2, which is \\"salad\\". 8. `2 2`: Customer 2 removes their last order (salad). 9. `3 2`: Print the last order of customer 2, returns an empty result as no orders left.","solution":"from collections import defaultdict def manage_restaurant_orders(queries): customer_orders = defaultdict(list) results = [] for query in queries: q = query.split() if q[0] == \'1\': x = int(q[1]) order = q[2] customer_orders[x].append(order) elif q[0] == \'2\': x = int(q[1]) if customer_orders[x]: customer_orders[x].pop() elif q[0] == \'3\': x = int(q[1]) if customer_orders[x]: results.append(customer_orders[x][-1]) else: results.append(\\"()\\") return results"},{"question":"Mina has a sequence of integers that she needs to process according to some rules. Initially, she has a sequence `a` of length `n` (1 ≤ n ≤ 2 * 10^5) consisting of integers between 1 and 10^9. Mina will perform `q` operations (1 ≤ q ≤ 10^5) on this sequence. Each operation is described by a pair (L, R), indicating that she must find the sum of all integers in the subsequence of `a` ranging from index L to R, inclusive (1 ≤ L ≤ R ≤ n). The first line of the input contains the integer `n` indicating the length of the sequence. The second line contains `n` space-separated integers representing the sequence `a`. The third line contains the integer `q` representing the number of operations. The following `q` lines each contain two space-separated integers `L` and `R`, indicating the range for which she needs to compute the sum. For each query, output the sum of the subsequence from index `L` to `R` on a new line. Input format: ``` n a1 a2 ... an q L1 R1 L2 R2 ... Lq Rq ``` Output format: For each query, print the sum of the subsequence from index `L` to `R` on a new line. Example input: ``` 5 1 2 3 4 5 3 1 3 2 4 1 5 ``` Example output: ``` 6 9 15 ```","solution":"def process_sequence(n, sequence, queries): Process the sequence according to the given queries. Parameters: - n: int, the length of the sequence - sequence: list of int, the sequence of integers - queries: list of tuples, each tuple containing two integers L and R Returns: - list of int, the sum of subsequences for each query # Calculate prefix sums prefix_sums = [0] * (n + 1) for i in range(1, n + 1): prefix_sums[i] = prefix_sums[i - 1] + sequence[i - 1] results = [] for L, R in queries: # We subtract prefix_sum[L-1] from prefix_sum[R] to get the sum from L to R results.append(prefix_sums[R] - prefix_sums[L - 1]) return results"},{"question":"Peter is very interested in binary numbers and the properties they exhibit. One day, he stumbled upon an interesting challenge: determine the smallest non-negative integer that is only different by one bit from a given integer. For instance, if the binary representation of a number is `10100`, changing any one bit could yield `10101` or `10000` or `11100`, and so on. Peter decided to write a program that performs this task for various input numbers. However, his programming skills are still evolving, so he needs your help to accomplish it. Given a non-negative integer `n`, find the smallest non-negative integer that differs from `n` by exactly one bit. # Input - An integer `n` (0 ≤ n ≤ 1000) # Output - An integer that is the smallest number greater than `n` which differs from `n` by exactly one bit in its binary representation. # Example **Input** ``` 5 ``` **Output** ``` 6 ``` *Explanation*: The binary representation of 5 is `101`. Changing one bit to get the smallest number greater than 5 would be `6` which is `110` in binary form.","solution":"def smallest_diff_by_one_bit(n): Given a non-negative integer n, find the smallest non-negative integer that is greater than n and differs from n by exactly one bit. return n + 1"},{"question":"In a certain country, there are `n` cities connected by `m` two-way roads forming an undirected graph. Some cities are tourist attractions, and tourists benefit from visiting unique attractions (i.e., visiting the same city twice does not provide additional benefit). You are tasked with planning a trip such that a tourist can visit the maximum number of unique attractions by travelling along a simple path (a path with no repeated vertices). The trip starts at one tourist city and ends at another tourist city without retracing any road. The cities are numbered from `1` to `n`. The first line contains an integer `n` (2 ≤ n ≤ 200), and the second line contains an integer `m` (1 ≤ m ≤ 400), where `n` is the number of cities and `m` is the number of roads. The third line contains `k` integers representing the tourist cities. The following `m` lines contain pairs of integers `ai`, `bi` (1 ≤ ai, bi ≤ n) representing the roads between cities. Output the maximum number of unique tourist attractions that can be visited in a single trip. **Example**: Input: ``` 6 7 2 4 5 1 2 1 3 2 4 3 4 3 5 4 5 4 6 ``` Output: ``` 3 ``` Explanation: One possible trip is from city 2 → 4 → 5 visiting 3 unique tourist attractions (2, 4, and 5).","solution":"def max_unique_attractions(n, m, tourist_cities, roads): from collections import defaultdict import heapq # Build graph adjacency list graph = defaultdict(list) for a, b in roads: graph[a].append(b) graph[b].append(a) # Set of tourist cities for quick lookup tourist_set = set(tourist_cities) # Result is max unique tourist attractions result = 0 def bfs(start): # BFS to find the longest path starting from \'start\' max_unique = 0 queue = [(start, {start})] # (current node, visited set) while queue: current, visited = queue.pop(0) max_unique = max(max_unique, len([city for city in visited if city in tourist_set])) for neighbor in graph[current]: if neighbor not in visited: queue.append((neighbor, visited | {neighbor})) return max_unique # Try BFS from each tourist city for city in tourist_cities: result = max(result, bfs(city)) return result"},{"question":"You are given a string `s` composed of lowercase English letters and an integer `k`. Your task is to find the lexicographically smallest string possible after performing the following operation exactly `k` times: Choose any character in the string `s` and move it to the end of the string. For example, if `s = \\"cba\\"` and `k = 1`, you can move the character \'c\' to the end of the string to get \\"bac\\", and if `k = 2`, you can then move \'b\' to the end to get \\"acb\\". Input: The first line contains an integer `t` (1 le t le 10^5) — the number of test cases. Each of the next `t` lines contains a string `s` and an integer `k` (1 le k le 10^5). Output: For each test case, output the lexicographically smallest string possible after performing the operation exactly `k` times. Example: Input: ``` 3 cba 1 cba 2 abcde 3 ``` Output: ``` abc acb abcde ```","solution":"def lexicographically_smallest_string(s, k): Returns the lexicographically smallest string by performing the allowed operation exactly k times. if k == 1: # For k == 1, we can only rotate the string to find the smallest lexicographical order. smallest_string = s for i in range(len(s)): rotated_string = s[i:] + s[:i] if rotated_string < smallest_string: smallest_string = rotated_string return smallest_string else: # For k >= 2, we can sort the string to get the smallest lexicographical order. return \'\'.join(sorted(s)) def solve(test_cases): results = [] for s, k in test_cases: results.append(lexicographically_smallest_string(s, k)) return results"},{"question":"You are given an array of n integers. An integer x is called a \\"majority element\\" if it occurs more than n/2 times in the array. Your task is to write a function that receives an array and returns the majority element. If there\'s no majority element present, return -1. The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n space-separated integers representing the elements of the array, where each element is between -10^9 and 10^9. Examples: Input: 5 3 3 4 2 3 Output: 3 Input: 6 1 2 3 4 5 6 Output: -1 Explanation: In the first example, 3 appears 3 times out of 5, hence it\'s the majority element. In the second example, no element appears more than half the time, so the output is -1.","solution":"def majority_element(nums): Returns the majority element of the list if it exists, otherwise returns -1. n = len(nums) candidate = None count = 0 # Phase 1: Find a candidate using Boyer-Moore Voting Algorithm for num in nums: if count == 0: candidate = num count = 1 elif num == candidate: count += 1 else: count -= 1 # Phase 2: Verify the candidate if nums.count(candidate) > n // 2: return candidate else: return -1"},{"question":"Write a function `magic_triangle(n)` that generates a triangular pattern of numbers. The pattern starts with 1 at the top, and every subsequent row contains numbers that are the sum of the two directly above them, modulo 100. The function should take one argument, `n`, representing the number of rows in the triangle, and return a list of lists representing the triangle. For example, if `n` is 5, the triangle would look like this: ``` [ [1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1] ] ``` Note that each number in the triangle is taken modulo 100. You need to return the entire triangle up to the `n`th row. Function signature: ```python def magic_triangle(n: int) -> List[List[int]]: ``` # Example: ```python >>> magic_triangle(5) [ [1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1] ] >>> magic_triangle(7) [ [1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1], [1, 6, 15, 20, 15, 6, 1] ] ```","solution":"def magic_triangle(n): Generate a triangular pattern of numbers where each number is the sum of the two directly above it, modulo 100. Parameters: - n (int): The number of rows in the triangle. Returns: - List[List[int]]: The generated triangle as a list of lists. if n <= 0: return [] # Initialize the triangle with the first row triangle = [[1]] for i in range(1, n): # Start each row with a 1 row = [1] for j in range(1, i): # Each element is the sum of the two elements directly above it value = (triangle[i-1][j-1] + triangle[i-1][j]) % 100 row.append(value) # End each row with a 1 row.append(1) triangle.append(row) return triangle"},{"question":"You are developing an inventory management system for a warehouse. The warehouse is organized in aisles and each aisle contains several slots that hold various items. An item is specified by its unique identifier and the quantity available. You need to design a function to find the total quantity of a specific item across all aisles in the warehouse. You are given a list of aisles, where each aisle is represented as a list of item-slot pairs. Each item-slot pair contains an item identifier (a lowercase Latin letter) and the quantity of that item in the slot. Your task is to find the total quantity of a given item across all aisles. The first line of the input contains an integer m (1 le m le 100) — the number of aisles. The second line of the input contains a lowercase Latin letter t — the item identifier for which you need to find the total quantity. Each of the next m lines contains the description of an aisle. The description starts with an integer n_a (1 le n_a le 100), the number of slots in the aisle, followed by n_a pairs of a lowercase Latin letter and an integer q (1 le q le 10^4), where the letter represents the item identifier and the integer represents the quantity of the item in the respective slot. Print the total quantity of the item t across all aisles. **Example:** ``` Input: 3 b 2 a 5 b 10 1 b 3 3 a 2 c 7 b 5 Output: 18 ``` In the example, the item `b` appears in three slots with a total quantity of `10 + 3 + 5 = 18`.","solution":"def total_quantity(m, t, aisles): Returns the total quantity of the specified item across all aisles. Parameters: m (int): Number of aisles. t (str): The item identifier to find. aisles (list of list): Each sublist contains pairs of item identifier and quantities. Returns: int: Total quantity of the item t. total_qty = 0 for aisle in aisles: n_a = aisle[0] items_and_quantities = aisle[1:n_a*2+1] for i in range(0, len(items_and_quantities), 2): item = items_and_quantities[i] quantity = int(items_and_quantities[i+1]) if item == t: total_qty += quantity return total_qty # Example input: # m = 3 # t = \'b\' # aisles = [ # [2, \'a\', 5, \'b\', 10], # [1, \'b\', 3], # [3, \'a\', 2, \'c\', 7, \'b\', 5] # ] # print(total_quantity(m, t, aisles)) # Output: 18"},{"question":"You are given a list of strings, where each string contains only lowercase English letters. A subsequence of a string is derived by deleting some or none of the characters, maintaining the relative order that they appear in the string. Write a function that determines if a given string `s` is a subsequence of any of the strings in the given list. Your task is to implement the function `is_subsequence_present(lst: List[str], s: str) -> bool` that returns `True` if `s` is a subsequence of at least one string in the list `lst`. Otherwise, return `False`. # Function Signature ```python def is_subsequence_present(lst: List[str], s: str) -> bool: ``` # Input - `lst`: A list of strings where each string contains only lowercase English letters. The length of `lst` will be between `1` and `1000`, and each string length will be between `1` and `1000`. - `s`: A single string containing only lowercase English letters with the length between `1` and `100`. # Output - Return a boolean value: `True` if `s` is a subsequence of any string in `lst`, otherwise `False`. # Examples Example 1 ```python lst = [\\"apple\\", \\"banana\\", \\"cherry\\"] s = \\"ale\\" ``` Output: ```python True ``` Example 2 ```python lst = [\\"hello\\", \\"world\\", \\"python\\"] s = \\"oht\\" ``` Output: ```python False ``` **Note:** In the first example, \\"ale\\" is a subsequence of \\"apple\\". In the second example, \\"oht\\" is not a subsequence of any string in the list. # Constraints - The algorithm should be efficient with respect to both time and space complexity considering the input constraints.","solution":"from typing import List def is_subsequence_present(lst: List[str], s: str) -> bool: def is_subsequence(a, b): it = iter(b) return all(char in it for char in a) for string in lst: if is_subsequence(s, string): return True return False"},{"question":"You are given a rectangular grid with n rows and m columns. Each cell in the grid either contains a land (represented by \'1\') or water (represented by \'0\'). A region of land is defined as a group of \'1\'s connected horizontally or vertically (not diagonally). An island is a maximal region of land. Write a program to count the number of islands in the grid. The first line of input contains two integers, n (number of rows) and m (number of columns), with 1 ≤ n, m ≤ 500. The next n lines each contain exactly m characters, which are either \'1\' or \'0\'. Output a single integer which represents the number of islands. Consider below two examples: Example 1: Input: 4 5 11000 11000 00100 00011 Output: 3 Example 2: Input: 3 3 111 010 111 Output: 1 Explanation: In the first example, the grid has three islands. - The first island is composed of cells (0, 0), (0, 1), (1, 0), and (1, 1). - The second island is composed of cell (2, 2). - The third island is composed of cells (3, 3) and (3, 4). In the second example, all \'1\'s are connected in a single island.","solution":"def count_islands(grid, n, m): def dfs(row, col): # Base cases for stopping recursion if row < 0 or row >= n or col < 0 or col >= m or grid[row][col] == \'0\': return # Mark the cell as visited by setting it to \'0\' grid[row][col] = \'0\' # Call dfs in all 4 directions dfs(row + 1, col) dfs(row - 1, col) dfs(row, col + 1) dfs(row, col - 1) island_count = 0 for i in range(n): for j in range(m): if grid[i][j] == \'1\': # Start a DFS if we find an unvisited land cell island_count += 1 dfs(i, j) return island_count"},{"question":"In a luxurious city, there are n skyscrapers arranged in a row. Each skyscraper has a certain height. The skyline of the city is defined as the overall contour formed by the varying heights of the skyscrapers when viewed from a distance. Your task is to calculate the height of the skyline at each position along the row. The height of the skyline at a particular position is defined as the maximum height of the skyscrapers up to and including that position. Write a function that takes the number of skyscrapers n and an array of integers representing the heights of the skyscrapers. The first line of the input contains a single integer n (1 ≤ n ≤ 100,000) — the number of skyscrapers. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 100,000) — the heights of the skyscrapers. Output a single line with n integers, where the i-th integer is the height of the skyline at the i-th position. Example Input: 5 3 1 4 1 5 Example Output: 3 3 4 4 5","solution":"def calculate_skyline(n, heights): Calculate the height of the skyline at each position. Parameters: n (int): The number of skyscrapers heights (list of int): The heights of the skyscrapers Returns: list of int: The height of the skyline at each position skyline = [] max_height = 0 for height in heights: max_height = max(max_height, height) skyline.append(max_height) return skyline"},{"question":"You have been hired by a transportation company to help optimize their delivery routes. The company has n delivery locations, numbered from 1 to n, with each location uniquely connected by bidirectional roads forming a tree structure (a connected acyclic graph). Each road between locations i and j has a specific distance denoted by a positive integer wi,j. The company must deliver packages to specific locations with varying priorities and distances. For every pair of locations, the package delivery time between locations i and j is defined as the sum of the distances of the shortest path connecting these two locations. The transportation company wants you to implement an algorithm that, given this tree structure and specific queries, determines the delivery time between pairs of locations. # Input The first line contains an integer n (2 ≤ n ≤ 100,000), representing the number of delivery locations. Each of the next n - 1 lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6), denoting that location u and location v are connected directly by a road with a distance of w. The next line contains an integer q (1 ≤ q ≤ 100,000), representing the number of queries. Each of the next q lines contains two integers x and y (1 ≤ x, y ≤ n), representing a query to determine the delivery time between location x and location y. # Output For each query, print the total delivery time between the queried locations in a new line. # Sample Input ``` 5 1 2 3 1 3 2 3 4 4 3 5 1 3 2 4 4 5 1 5 ``` # Sample Output ``` 9 5 3 ``` # Explanation For the given tree, the paths and their respective distances are: - Between locations 2 and 4, the path is 2 → 1 → 3 → 4 with distance 3 + 2 + 4 = 9. - Between locations 4 and 5, the path is 4 → 3 → 5 with distance 4 + 1 = 5. - Between locations 1 and 5, the path is 1 → 3 → 5 with distance 2 + 1 = 3. The algorithm should efficiently handle the large input size constraints and quickly determine the shortest paths for each query.","solution":"from collections import defaultdict, deque def bfs_to_find_distances(n, edges): graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) distances = [[0] * n for _ in range(n)] def bfs(start): dist = [-1] * n queue = deque([(start, 0)]) dist[start] = 0 while queue: node, current_dist = queue.popleft() for neighbor, weight in graph[node]: if dist[neighbor] == -1: dist[neighbor] = current_dist + weight queue.append((neighbor, current_dist + weight)) return dist for i in range(n): distances[i] = bfs(i) return distances def delivery_times(n, edges, queries): edges = [(u-1, v-1, w) for u, v, w in edges] distances = bfs_to_find_distances(n, edges) result = [] for x, y in queries: result.append(distances[x-1][y-1]) return result # Example usage: edges = [(1, 2, 3), (1, 3, 2), (3, 4, 4), (3, 5, 1)] queries = [(2, 4), (4, 5), (1, 5)] n = 5 # Expected output: [9, 5, 3] print(delivery_times(n, edges, queries))"},{"question":"You are given a string \\"commands\\" that contains a sequence of instructions to navigate a robot in a 2D grid. The robot starts at the origin point (0, 0) facing upwards. The instructions are composed of the following characters: - \'G\' instructs the robot to move one step forward in its current direction. - \'L\' instructs the robot to turn left (90 degrees counter-clockwise). - \'R\' instructs the robot to turn right (90 degrees clockwise). The robot moves as follows: - \'G\': Moves one step forward in the direction it is currently facing. - \'L\': Changes direction to the left of its current facing direction. - \'R\': Changes direction to the right of its current facing direction. Your task is to determine whether the robot returns to its origin after executing all the commands in the given string. Input: - A single line, \\"commands\\", which contains between 1 to 100 characters. Each character of \\"commands\\" is either \'G\', \'L\', or \'R\'. Output: - Print \\"YES\\" if the robot returns to the origin after executing the commands, and \\"NO\\" otherwise. Example 1: Input: \\"GLGLGLGL\\" Output: \\"YES\\" Example 2: Input: \\"GG\\" Output: \\"NO\\"","solution":"def does_robot_return(commands): Determines whether the robot returns to its origin after executing all the commands. # Initial position and direction (0, 0) facing up x, y = 0, 0 direction = \'U\' # Direction mappings directions = { \'U\': (0, 1), # Up \'R\': (1, 0), # Right \'D\': (0, -1), # Down \'L\': (-1, 0) # Left } # Direction transitions left_turn = { \'U\': \'L\', \'L\': \'D\', \'D\': \'R\', \'R\': \'U\' } right_turn = { \'U\': \'R\', \'R\': \'D\', \'D\': \'L\', \'L\': \'U\' } for command in commands: if command == \'G\': dx, dy = directions[direction] x += dx y += dy elif command == \'L\': direction = left_turn[direction] elif command == \'R\': direction = right_turn[direction] return \\"YES\\" if x == 0 and y == 0 else \\"NO\\""},{"question":"You are given an array of integers representing the timestamps of user login events in a system. Your task is to find the length of the longest contiguous subarray such that the difference between the maximum and minimum timestamps in this subarray is less than or equal to a given integer k. The first line contains two integers n and k (1 ≤ n ≤ 2·10^5, 0 ≤ k ≤ 10^9) — the number of timestamps and the allowed maximum difference. The second line contains n integers ti (0 ≤ ti ≤ 10^9) — the timestamps of the user login events. Print a single integer — the length of the longest contiguous subarray where the difference between the maximum and minimum timestamps is less than or equal to k. Example input: 6 3 1 2 3 10 11 12 Example output: 3","solution":"def longest_contiguous_subarray(n, k, timestamps): left = 0 max_len = 0 min_val = timestamps[0] max_val = timestamps[0] for right in range(n): min_val = min(min_val, timestamps[right]) max_val = max(max_val, timestamps[right]) while max_val - min_val > k: left += 1 min_val = min(timestamps[left:right + 1]) max_val = max(timestamps[left:right + 1]) max_len = max(max_len, right - left + 1) return max_len"},{"question":"You are given a list of integers, `arr`, and a target integer value, `target`. Your task is to find and return all unique quadruples `[a, b, c, d]` in `arr` such that `a + b + c + d = target`. - Each quadruple in the result must be sorted in ascending order. - The function should return a list of all such quadruples without duplicates. The order of the quadruples themselves in the resulting list does not matter. - You may assume that the given list has at most 2000 integers and that each integer in the array lies in the range `-10^6` to `10^6`. Example: ``` If arr = [1, 0, -1, 0, -2, 2] and target = 0, then the function should return: [ [-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1] ] If arr = [2, 2, 2, 2, 2] and target = 8, then the function should return: [ [2, 2, 2, 2] ] ``` Function Signature: ```python def four_sum(arr: List[int], target: int) -> List[List[int]]: ``` After creating your function, you can test it with the input examples provided above. Make sure the output matches the expected solutions to confirm your implementation is correct.","solution":"def four_sum(arr, target): from itertools import combinations arr.sort() quadruples = set() n = len(arr) for i in range(n - 3): for j in range(i + 1, n - 2): left, right = j + 1, n - 1 while left < right: s = arr[i] + arr[j] + arr[left] + arr[right] if s == target: quadruples.add((arr[i], arr[j], arr[left], arr[right])) left += 1 right -= 1 elif s < target: left += 1 else: right -= 1 return [list(quadruple) for quadruple in quadruples]"},{"question":"Alice loves puzzles and word games. She recently found a new game where she has to create the longest possible palindrome from a given string. A palindrome is a word that reads the same backward as forward, like racecar or level. Alice can rearrange the characters of the string in any order to form the palindrome. Additionally, she can delete characters, but cannot add any new characters. Your task is to write a program that finds the longest palindrome Alice can create from a given string. The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the length of the string. The second line contains a string s of length n consisting of lowercase English letters. Output a single integer — the length of the longest palindrome that can be created from the given string. # Example **Input:** ``` 7 abccccd ``` **Output:** ``` 5 ``` **Explanation:** In the given example, the longest possible palindrome is \\"ccdcc\\" or \\"dcccd\\". Both are 5 characters long and are valid palindromes.","solution":"def longest_palindrome_length(s): Returns the length of the longest palindrome that can be created from the given string `s`. from collections import Counter char_counts = Counter(s) length = 0 odd_count_found = False for count in char_counts.values(): if count % 2 == 0: length += count else: length += count - 1 odd_count_found = True if odd_count_found: length += 1 return length"},{"question":"Alice loves solving puzzles involving strings. Recently, she came across a challenge that requires transforming one string into another using a series of allowed operations. Alice has two strings, a and b, each of which is composed of lowercase English letters. The lengths of the two strings are equal, i.e., |a| = |b|. In one operation, Alice can choose a character in string a and replace it with another character from the English alphabet (from \'a\' to \'z\'). Alice wants to know the minimum number of operations required to transform string a into string b by following the aforementioned rule. The first line contains an integer n (1 ≤ n ≤ 100), the length of the strings. The second line contains the first string a of length n. The third line contains the second string b of length n. Output one integer, the minimum number of operations required to transform string a into string b. **Example:** **Input:** ``` 5 abcde bcdea ``` **Output:** ``` 5 ``` **Explanation:** In the optimal solution, each character of string a needs to be replaced with the corresponding character in string b: - Replace \'a\' with \'b\' - Replace \'b\' with \'c\' - Replace \'c\' with \'d\' - Replace \'d\' with \'e\' - Replace \'e\' with \'a\' Hence, a total of 5 operations are required.","solution":"def min_operations_to_transform_string(n, a, b): Returns the minimum number of operations required to transform string a into string b. # Initialize the count of operations required operations = 0 # Iterate over each character in strings a and b for i in range(n): # If characters at position i are different, increment the operation count if a[i] != b[i]: operations += 1 return operations"},{"question":"A large company is implementing a project management tool that tracks the time employees spend on multiple projects. Each employee works on multiple projects and logs the number of hours they work each day. The company wants to generate a report that summarizes each employee’s total hours spent on each project over a given time period. You are given a list of log entries where each entry represents hours worked by an employee on a specific project. Each entry contains the employee’s name, the project name, the date, and the number of hours worked. Your task is to create a report that displays the total hours worked by each employee on each project. Input: - The first line contains an integer n (1 ≤ n ≤ 1000), the number of log entries. - Each of the next n lines contains a log entry in the following format: `employee_name project_name date hours_worked` - `employee_name`: a string consisting of lowercase and uppercase English letters with a maximum length of 50 characters. - `project_name`: a string consisting of lowercase and uppercase English letters with a maximum length of 50 characters. - `date`: a string in the format `YYYY-MM-DD`. - `hours_worked`: an integer (1 ≤ hours_worked ≤ 24). Output: - Output a report where each line contains the name of an employee, the project name, and the total number of hours the employee worked on that project. The report should be formatted as follows: ``` employee_name project_name total_hours ``` Each line should be sorted by `employee_name` in lexicographical order. If multiple entries have the same employee name, sort by `project_name` in lexicographical order. Example Input: ``` 5 Alice ProjectA 2023-05-01 5 Bob ProjectB 2023-05-02 3 Alice ProjectA 2023-05-02 3 Alice ProjectC 2023-05-01 4 Bob ProjectA 2023-05-01 6 ``` Example Output: ``` Alice ProjectA 8 Alice ProjectC 4 Bob ProjectA 6 Bob ProjectB 3 ```","solution":"def generate_report(log_entries): from collections import defaultdict project_hours = defaultdict(lambda: defaultdict(int)) for entry in log_entries: employee_name, project_name, date, hours_worked = entry.split() hours_worked = int(hours_worked) project_hours[employee_name][project_name] += hours_worked result = [] for employee_name in sorted(project_hours.keys()): for project_name in sorted(project_hours[employee_name].keys()): total_hours = project_hours[employee_name][project_name] result.append(f\\"{employee_name} {project_name} {total_hours}\\") return result # Example usage log_entries = [ \\"Alice ProjectA 2023-05-01 5\\", \\"Bob ProjectB 2023-05-02 3\\", \\"Alice ProjectA 2023-05-02 3\\", \\"Alice ProjectC 2023-05-01 4\\", \\"Bob ProjectA 2023-05-01 6\\", ] print(generate_report(log_entries))"},{"question":"A farmer needs to transport containers of apples from one orchard to another. He has a truck with a maximum weight capacity and each container has a certain weight. The farmer wants to make as few trips as possible to transport all the containers. Write a program to help the farmer determine the minimum number of trips required. Input: - The first line contains an integer W (1 ≤ W ≤ 100,000) representing the maximum weight capacity of the truck. - The second line contains an integer N (1 ≤ N ≤ 100,000) representing the number of containers. - The third line contains N integers w1, w2, ..., wN (1 ≤ wi ≤ W), where wi represents the weight of the ith container. Output: - Output a single integer representing the minimum number of trips required to transport all the containers. Example: Input: 50 5 10 20 30 40 50 Output: 3 Explanation: - In the first trip, the truck carries containers with weights 10 and 40 (total 50). - In the second trip, the truck carries containers with weights 20 and 30 (total 50). - In the third trip, the truck carries the container with weight 50.","solution":"def min_trips(W, N, weights): Returns the minimum number of trips required to transport all containers. :param W: Maximum weight capacity of the truck :param N: Number of containers :param weights: List of weights of the containers :return: Minimum number of trips required weights.sort() left, right = 0, N - 1 trips = 0 while left <= right: if weights[left] + weights[right] <= W: left += 1 right -= 1 trips += 1 return trips"},{"question":"You are given a list of asteroid masses, and you can combine any two asteroids into one new asteroid. The mass of the new asteroid is equal to the sum of the initial two asteroid masses. Your task is to repeatedly combine asteroids until only one asteroid remains. You want to minimize the number of asteroid combinations performed. Write a function that calculates the minimum number of asteroid combinations required. The function should take a single parameter: - `masses`: a list of integers representing the masses of the asteroids. The function should return an integer, the minimum number of asteroid combinations required. # Example ```python def min_combinations(masses): pass # Example usage print(min_combinations([3, 4, 5])) # Output: 2 print(min_combinations([1, 2, 3, 4])) # Output: 3 ``` # Explanation In the first example, you have asteroids with masses [3, 4, 5]. One optimal way to combine them is: 1. Combine 3 and 4 to get [7, 5] 2. Combine 7 and 5 to get [12] In the second example, you have asteroids with masses [1, 2, 3, 4]. One optimal way to combine them is: 1. Combine 1 and 2 to get [3, 3, 4] 2. Combine 3 and 3 to get [6, 4] 3. Combine 6 and 4 to get [10] The result for each would be the minimum number of combinations (2 for the first example and 3 for the second).","solution":"def min_combinations(masses): Calculates the minimum number of asteroids combinations required to combine all asteroids into one. Since we must form one final asteroid, the minimum number of combinations is to combine all asteroids in pairs until one is left. :param masses: List of integers representing the masses of the asteroids. :return: Integer, the minimum number of combinations required. # If there are n asteroids initially, we need n - 1 combinations to reduce them to one. return len(masses) - 1"},{"question":"You are given a set of n points on a 2D plane. Your task is to determine the number of distinct triangles that can be formed by these points with non-zero area. A triangle is formed by choosing 3 distinct points from the set. The area of a triangle formed by points (x1, y1), (x2, y2), and (x3, y3) can be found using the formula: Area = 0.5 * |x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)| A triangle has non-zero area if and only if its vertices are not collinear. # Input The input consists of two lines: - The first line contains an integer n (3 ≤ n ≤ 10^5) - the number of points on the plane. - Each of the next n lines contains two integers xi and yi (-10^6 ≤ xi, yi ≤ 10^6) - the coordinates of the i-th point. # Output Output a single integer - the number of distinct triangles with non-zero area that can be formed from the given points. # Example Input ``` 5 0 0 1 1 2 2 3 3 1 2 ``` Output ``` 6 ``` # Note In the example, there are 5 points and we can form the following triangles with non-zero area: - (0, 0), (1, 1), (1, 2) - (0, 0), (2, 2), (1, 2) - (0, 0), (3, 3), (1, 2) - (1, 1), (2, 2), (1, 2) - (1, 1), (3, 3), (1, 2) - (2, 2), (3, 3), (1, 2) All other combinations of points result in collinear points.","solution":"from itertools import combinations def count_distinct_triangles(n, points): def triangle_area(p1, p2, p3): return abs(p1[0] * (p2[1] - p3[1]) + p2[0] * (p3[1] - p1[1]) + p3[0] * (p1[1] - p2[1])) triangles = 0 for p1, p2, p3 in combinations(points, 3): if triangle_area(p1, p2, p3) != 0: triangles += 1 return triangles"},{"question":"Implement a function `find_largest_square` that takes a binary matrix and returns the area of the largest square containing only 1s. A binary matrix is a 2D array containing only 0s and 1s. For example, in the given binary matrix, if the largest square containing only 1s has a side length of 3, then the function should return the area, which is 3 * 3 = 9. # Input - The input consists of one parameter: - `matrix`, a list of `n` lists, where each list contains `m` integers (0s or 1s) representing the binary matrix. # Output - Return the area of the largest square containing only 1s. # Example ```python matrix = [ [1, 0, 1, 0, 0], [1, 0, 1, 1, 1], [1, 1, 1, 1, 1], [1, 0, 0, 1, 0] ] output = find_largest_square(matrix) print(output) # Output should be 4 (2x2 square) ``` # Constraints - `n` and `m` are positive integers (1 ≤ n, m ≤ 300). - Elements of the matrix are either 0 or 1.","solution":"def find_largest_square(matrix): Returns the area of the largest square containing only 1s in a binary matrix. if not matrix or not matrix[0]: return 0 n = len(matrix) m = len(matrix[0]) max_side = 0 dp = [[0]*m for _ in range(n)] for i in range(n): for j in range(m): if matrix[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side ** 2"},{"question":"Given a string consisting of lowercase English letters, determine the length of the longest palindrome that can be built with those letters. A palindrome is a word that reads the same backward as forward. You may reorder the letters of the string in any way you like to form the palindrome. The first line contains a single string s (1 ≤ |s| ≤ 105) consisting of lowercase English letters. Output a single integer — the length of the longest palindrome that can be built. **Example:** Input: ``` abccccdd ``` Output: ``` 7 ``` Explanation: One longest palindrome that can be built is \\"dccaccd\\", whose length is 7.","solution":"def longest_palindrome_length(s): Determine the length of the longest palindrome that can be built with the given string. from collections import Counter char_count = Counter(s) length = 0 odd_found = False for count in char_count.values(): if count % 2 == 0: length += count else: length += count - 1 odd_found = True # Add one if there\'s at least one odd count, which can be placed in the middle if odd_found: length += 1 return length"},{"question":"Given an array of integers, you are required to identify the largest subarray that can be sorted in non-decreasing order by reversing exactly one sub-segment of the subarray. A sub-segment is a contiguous part of the array, meaning that you can pick a start and end index and reverse all elements between them to attempt to sort the subarray. The input consists of multiple test cases; for each test case, you need to output the length of the largest such subarray. # Input - The first line contains a single integer `t` (1 le t le 100) - the number of test cases. - For each test case, the first line contains a single integer `n` (1 le n le 2 cdot 10^5) - the number of elements in the array. - The second line contains `n` space-separated integers a_1, a_2, ldots, a_n (1 le a_i le 10^9). It is guaranteed that the sum of `n` over all test cases does not exceed 2 * 10^5. # Output For each test case, print a single integer - the length of the largest subarray that can be sorted in non-decreasing order by reversing exactly one sub-segment of the subarray. # Example Input ``` 3 5 1 3 5 3 2 6 1 2 3 7 6 4 4 4 3 2 1 ``` Output ``` 5 6 4 ``` # Explanation - In the first test case, the whole array [1, 3, 5, 3, 2] can be sorted in non-decreasing order by reversing the sub-segment [3, 5]. - In the second test case, the whole array [1, 2, 3, 7, 6, 4] can be sorted by reversing the sub-segment [7, 6, 4]. - In the third test case, the entire array [4, 3, 2, 1] can be sorted by reversing the sub-segment [4, 3, 2, 1].","solution":"def largest_sorted_by_reversing_subarray(t, test_cases): def find_largest_reversible_subarray(arr): n = len(arr) left = 0 while left + 1 < n and arr[left] <= arr[left + 1]: left += 1 if left == n - 1: return n right = n - 1 while right > 0 and arr[right - 1] <= arr[right]: right -= 1 if arr[left] <= arr[right - 1]: left_part = 0 else: left_part = left + 1 if arr[left + 1] >= arr[right]: right_part = n else: right_part = right max_len = max(n - left_part, right_part) rev_left = left rev_right = right - 1 if arr[rev_left] <= arr[rev_right] and (rev_left == 0 or arr[rev_left - 1] <= arr[rev_right]): max_len = max(max_len, rev_right - rev_left + 1) while rev_left >= 1 and rev_right + 1 < n: if arr[rev_left - 1] <= arr[rev_right + 1]: max_len = max(max_len, rev_right - rev_left + 3) rev_left -= 1 rev_right += 1 return max_len results = [] for i in range(t): n, array = test_cases[i] results.append(find_largest_reversible_subarray(array)) return results"},{"question":"Maria loves finding palindromic substrings in her given string. A palindromic string is a string that reads the same backward as forward. For example, \\"aba\\" or \\"racecar\\" are palindromic strings. Given a string, Maria wants to know the length of the longest palindromic substring it contains. Your task is to write a function that finds the length of the longest palindromic substring in the given string. # Input Format - The input consists of a single line containing a string `s` (1 leq |s| leq 10^3), where `s` is comprised of lowercase English letters. # Output Format - Print a single integer, the length of the longest palindromic substring in the given string. # Example Input: ``` babad ``` Output: ``` 3 ``` Explanation: The longest palindromic substring is \\"bab\\" or \\"aba\\". Input: ``` cbbd ``` Output: ``` 2 ``` Explanation: The longest palindromic substring is \\"bb\\". # Constraints - The string will only contain lowercase English letters. - The length of the input string will not exceed 1000 characters. # Notes - Ensure your solution is efficient enough to handle the upper limit constraints.","solution":"def longest_palindromic_substring_length(s): Returns the length of the longest palindromic substring in the given string s. n = len(s) if n == 0: return 0 dp = [[False] * n for _ in range(n)] max_len = 1 for i in range(n): dp[i][i] = True start = 0 for i in range(n-1): if s[i] == s[i+1]: dp[i][i+1] = True start = i max_len = 2 for k in range(3, n+1): for i in range(n-k+1): j = i + k - 1 if dp[i+1][j-1] and s[i] == s[j]: dp[i][j] = True if k > max_len: start = i max_len = k return max_len"},{"question":"Jack is managing a warehouse and needs to keep track of inventory, specifically for a set of products represented by integers. Each product has a unique identifier (an integer). Jack wants to keep track of the quantities of these products over a series of operations. Operations can be insertion (addition of new quantities), deletion (removal of certain quantities), or querying for the current quantity of a specific product. Create a program to process a series of operations on the inventory. The program will initially take an integer n representing the number of operations to perform. Each of the next n lines contains an operation in one of the following formats: - \\"ADD product_id quantity\\": Adds the specified quantity to the product identified by product_id. - \\"REMOVE product_id quantity\\": Removes the specified quantity from the product identified by product_id. If the quantity to be removed is more than the available, set the quantity to 0. - \\"QUERY product_id\\": Prints the current quantity of the product identified by product_id. If the product does not exist, print 0. Input: - The first line contains an integer n (1 le n le 1000), the number of operations. - The next n lines each contain an operation as described above. Output: - For each \\"QUERY\\" operation, output the current quantity of the specified product. Example: Input: ``` 6 ADD 1001 50 ADD 1002 30 QUERY 1001 REMOVE 1001 20 QUERY 1001 QUERY 1003 ``` Output: ``` 50 30 0 ``` Write a function `warehouse_operations(n: int, operations: List[str]) -> List[int]` that takes the number of operations and a list of operations as input and returns a list of integers representing the results of the \\"QUERY\\" operations.","solution":"def warehouse_operations(n, operations): inventory = {} results = [] for op in operations: parts = op.split() command = parts[0] product_id = int(parts[1]) if command == \\"ADD\\": quantity = int(parts[2]) if product_id in inventory: inventory[product_id] += quantity else: inventory[product_id] = quantity elif command == \\"REMOVE\\": quantity = int(parts[2]) if product_id in inventory: inventory[product_id] = max(0, inventory[product_id] - quantity) elif command == \\"QUERY\\": results.append(inventory.get(product_id, 0)) return results"},{"question":"Mike is organizing a marathon event and needs to deploy water stations along the marathon track. The marathon track is a straight line of length `L` meters. Mike has `N` limited-capacity water stations, each capable of serving up to `C` runners per hour. The track is divided into `M` segments, where each segment requires a minimum of `R` water stations to adequately serve the runners traversing that segment. Design an algorithm to determine the minimum number of water stations required to be active during the marathon such that the necessary requirement for each track segment is met. However, if it\'s impossible to adequately serve all the segments with the given stations, the algorithm should return `-1`. # Input - An integer `L` (1 ≤ L ≤ 10^4) representing the length of the marathon track. - An integer `N` (1 ≤ N ≤ 100) representing the total number of available water stations. - An integer `C` (1 ≤ C ≤ 200) representing the capacity of each water station (in runners per hour). - An integer `M` (1 ≤ M ≤ 100) representing the number of segments along the track. - An array `segments` of `M` tuples, each containing two integers `start_i` and `end_i` (1 ≤ start_i < end_i ≤ L), representing the start and end points of each segment that requires `R` water stations. # Output - Print the minimum number of water stations required. If it\'s not possible to serve all segments with the given number of stations, print `-1`. # Example Input: ``` L = 1000 N = 10 C = 100 M = 3 segments = [(100, 500), (400, 800), (700, 1000)] R = 2 ``` Output: ``` 4 ```","solution":"def minimum_water_stations(L, N, C, M, segments, R): Returns the minimum number of water stations required to serve all segments. If it\'s not possible to serve all segments with the given stations, returns -1. station_coverage = [0] * (L + 1) for start, end in segments: for i in range(start, end): station_coverage[i] += 1 max_stations_needed = max(station_coverage) if max_stations_needed * R <= N: return max_stations_needed * R else: return -1 # Example usage L = 1000 N = 10 C = 100 M = 3 segments = [(100, 500), (400, 800), (700, 1000)] R = 2 print(minimum_water_stations(L, N, C, M, segments, R)) # Output: 4"},{"question":"You are given an array of positive integers representing the sequence of jumps, where `jumps[i]` indicates how far you can jump forward from position `i`. Assuming you start at the first position of the array, write a program to determine the minimum number of jumps required to reach the last position. If it\'s not possible to reach the last position, return -1. For example, given the array `[2, 3, 1, 1, 4]`, you can reach the last position by making two jumps (index 0 -> index 1 -> index 4). If given the array `[3, 2, 1, 0, 4]`, it\'s not possible to reach the last position, so the program should return -1. # Input - The first line contains a single integer `n` (1 ≤ n ≤ 105) — the number of elements in the array. - The second line contains `n` integers `jumps[i]` (1 ≤ jumps[i] ≤ 2·104) — the values of the array. # Output - Print a single integer representing the minimum number of jumps required to reach the last position. If it\'s not possible, print -1. # Examples Example 1 # Input ``` 5 2 3 1 1 4 ``` # Output ``` 2 ``` Example 2 # Input ``` 5 3 2 1 0 4 ``` # Output ``` -1 ```","solution":"def min_jumps(arr): Returns the minimum number of jumps required to reach the last position in the array. Returns -1 if it is not possible to reach the last position. n = len(arr) if n == 1: return 0 max_reach = arr[0] # The farthest index that can be reached step = arr[0] # Steps we can still take jump = 1 # Number of jumps we have made for i in range(1, n): if i == n - 1: return jump max_reach = max(max_reach, i + arr[i]) step -= 1 if step == 0: jump += 1 if i >= max_reach: return -1 step = max_reach - i return -1"},{"question":"You are responsible for managing a car rental service. To keep track of the available cars and their assignments, you have a scheduling system in place. You maintain a list of rental slots, where each slot indicates the times when a car is rented out and when it is available. Each rental slot is represented as an interval `[start_time, end_time]` which indicates that the car is rented from `start_time` to `end_time` (inclusive). The problem you\'re facing is ensuring that no two cars are double-booked. That means, for any given time, no car should be rented out to two different customers. You need to determine if it is possible to schedule all the rentals without any conflicts. The input consists of two parts: 1. An integer `n` (1 le n le 10^5) — the number of rental slots. 2. `n` pairs of integers `start_time` and `end_time` (0 le start_time < end_time le 10^9) representing the rental periods. Output a single line with \\"YES\\" if all rental intervals can be scheduled without conflicts, otherwise \\"NO\\". # Example - Input: ``` 3 1 5 2 6 7 8 ``` - Output: ``` NO ``` - Input: ``` 2 1 3 4 5 ``` - Output: ``` YES ``` **Note**: In the first example, the intervals `[1, 5]` and `[2, 6]` overlap, hence the output is \\"NO\\". In the second example, there are no overlapping intervals, so the output is \\"YES\\".","solution":"def can_schedule_rentals(n, intervals): Determine if rental intervals can be scheduled without conflicts. Args: n : int : number of rental slots intervals : list of tuples : list of (start_time, end_time) pairs Returns: str : \\"YES\\" if all intervals can be scheduled without conflicts, otherwise \\"NO\\" # Sort intervals by their start times intervals.sort() # Iterate through the intervals to check for overlap for i in range(1, n): if intervals[i][0] < intervals[i - 1][1]: return \\"NO\\" return \\"YES\\""},{"question":"There is a forest represented by a grid of size n x m, where each cell in the grid contains a tree with a certain height. A lumberjack wants to cut down trees to create a clear path from the top-left corner to the bottom-right corner of the grid. The lumberjack can only move right or down from any cell. The cost of cutting down a tree is equal to its height. The objective is to find a path where the total cost of cutting down trees is minimized. The first line of the input contains two space-separated integers, n and m (1 ≤ n, m ≤ 1000), representing the dimensions of the grid. The next n lines each contain m space-separated integers, where each integer represents the height of a tree in a cell (0 ≤ height ≤ 10^9). Output the minimum total cost required to create a clear path from the top-left to the bottom-right corner of the grid. Example: Input: 3 3 1 3 1 1 5 1 4 2 1 Output: 7","solution":"def min_path_cost(grid): n = len(grid) m = len(grid[0]) # Initialize a DP table dp = [[float(\'inf\')] * m for _ in range(n)] dp[0][0] = grid[0][0] for i in range(n): for j in range(m): if i > 0: dp[i][j] = min(dp[i][j], dp[i-1][j] + grid[i][j]) if j > 0: dp[i][j] = min(dp[i][j], dp[i][j-1] + grid[i][j]) return dp[n-1][m-1] def min_path_cost_from_input(grid_input): grid_input = grid_input.strip().split(\'n\') n, m = map(int, grid_input[0].split()) grid = [[int(x) for x in line.split()] for line in grid_input[1:]] return min_path_cost(grid)"},{"question":"Given a list of integers, your task is to find the maximum length of a contiguous subarray that contains at most two distinct integers. # Input - An array of integers `arr` with length `n`. # Output - A single integer representing the maximum length of a contiguous subarray with at most two distinct integers. # Example ```python Input: [1, 2, 1, 3, 4, 2, 3] Output: 3 Input: [1, 2, 1, 2, 3] Output: 4 ``` # Explanation In the first example, the contiguous subarray of maximum length containing at most two distinct integers is `[1, 2, 1]`. In the second example, the contiguous subarray of maximum length containing at most two distinct integers is `[1, 2, 1, 2]`.","solution":"def max_length_subarray_two_distinct(arr): Returns the maximum length of a contiguous subarray containing at most two distinct integers. if not arr: return 0 max_length = 0 left = 0 hashmap = {} for right in range(len(arr)): if arr[right] in hashmap: hashmap[arr[right]] += 1 else: hashmap[arr[right]] = 1 while len(hashmap) > 2: hashmap[arr[left]] -= 1 if hashmap[arr[left]] == 0: del hashmap[arr[left]] left += 1 current_length = right - left + 1 max_length = max(max_length, current_length) return max_length"},{"question":"Alex is experimenting with strings and came up with another task for you. Given a string s composed of lowercase English letters, determine the longest palindromic substring within s. A palindromic substring is a sequence of characters that reads the same backward as forward. You are required to write a function that accepts a string s and returns the longest palindromic substring in s. The input string\'s length will not exceed 1000 characters. If there are multiple longest palindromic substrings, return the one that appears first. **Input** - A single string s with length 1 ≤ |s| ≤ 1000. **Output** - A single string which is the longest palindromic substring. Example of input and output: **Example 1:** ``` Input: \\"babad\\" Output: \\"bab\\" ``` (Note: \\"aba\\" is also a valid answer.) **Example 2:** ``` Input: \\"cbbd\\" Output: \\"bb\\" ```","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring of s. n = len(s) if n == 0: return \\"\\" # Initialize a table to store results of subproblems dp = [[False] * n for _ in range(n)] # All substrings of length 1 are palindromes start = 0 max_length = 1 for i in range(n): dp[i][i] = True # Check for sub-string of length 2. for i in range(n-1): if s[i] == s[i+1]: dp[i][i+1] = True start = i max_length = 2 # Check for lengths greater than 2 for length in range(3, n + 1): for i in range(n - length + 1): j = i + length - 1 # Ending index of current substring # Check if the current substring is palindrome if (dp[i + 1][j - 1] and s[i] == s[j]): dp[i][j] = True if length > max_length: start = i max_length = length return s[start:start + max_length]"},{"question":"The company XYZ is planning a corporate networking event, where employees and their direct managers need to be seated at assigned tables. Seat assignment needs to follow some specific rules to ensure that communication flows smoothly. The goal is to maximize the number of employees who can attend the event under these rules. The rules for seating are: 1. Each table can have at most 6 people. 2. Each employee can be seated with at most one direct manager and at most one direct report if they have any. 3. No two employees who have the same direct manager can be seated at the same table unless the manager is also seated at the same table. The input consists of the following: 1. The first line contains two integers, n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 1000) — where n is the total number of employees and m is the number of direct manager-report pairs. 2. The next m lines describe the direct manager-report pairs. Each pair consists of two integers a and b (1 ≤ a, b ≤ n, a ≠ b), indicating that employee a is a direct manager of employee b. The output should be: 1. The first line contains one integer, k — the maximum number of employees that can be seated satisfying all the rules. 2. The following k lines describe the seating arrangement, each line indicating the ids of employees seated at one table. Example: Input: 8 6 1 2 1 3 4 5 4 6 7 8 6 7 Output: 8 1 2 3 4 5 6 7 8","solution":"from collections import defaultdict, deque def seating_arrangement(n, m, pairs): # Using adjacency list to keep track of direct manager-report pairs manager_to_reports = defaultdict(list) for manager, report in pairs: manager_to_reports[manager].append(report) # We use a visited set to ensure no employee is seated more than once visited = set() tables = [] def bfs(start): queue = deque([start]) table = [] while queue and len(table) < 6: employee = queue.popleft() if employee not in visited: visited.add(employee) table.append(employee) # Add direct reports if any to the queue if employee in manager_to_reports: for report in manager_to_reports[employee]: if report not in visited: queue.append(report) return table for employee in range(1, n + 1): if employee not in visited: table = bfs(employee) if table: tables.append(table) # Printing the result k = len(tables) print(k) for table in tables: print(\\" \\".join(map(str, table))) return (k, [table for table in tables])"},{"question":"You are given a list of integers representing the heights of trees lined up in a row. You can cut down trees in such a way that it does not disturb the beauty of the landscape, which means the heights of the trees on each side must appear non-decreasing. To cut down a tree, you remove it from the list entirely. Your task is to determine the maximum number of trees that you can cut down such that the remaining list of tree heights forms a non-decreasing sequence. The first line of input contains a single integer n (1 ≤ n ≤ 105) representing the number of trees. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 106) representing the heights of the trees. You should output a single integer, which is the maximum number of trees that can be cut down while maintaining a non-decreasing sequence of the remaining tree heights. Example: Input: 7 3 7 5 8 10 5 13 Output: 2 Explanation: By removing the trees with heights 5 and 5, the remaining tree heights 3, 7, 8, 10, 13 form a non-decreasing sequence.","solution":"def max_trees_to_cut(heights): Determines the maximum number of trees that can be cut down such that the remaining tree heights form a non-decreasing sequence. n = len(heights) # If only one tree or already sorted, no need to cut any tree if n <= 1 or all(heights[i] <= heights[i+1] for i in range(n-1)): return 0 # LIS lis = [] for h in heights: pos = binary_search(lis, h) if pos < len(lis): lis[pos] = h else: lis.append(h) # Minimum cuts needed to form non-decreasing sequence return n - len(lis) def binary_search(lis, h): left, right = 0, len(lis) - 1 while left <= right: mid = (left + right) // 2 if lis[mid] < h: left = mid + 1 else: right = mid - 1 return left"},{"question":"Drake, the delivery drone, is used by a logistics company to deliver parcels between different warehouse locations. These locations are labeled with unique positive integers. The drone travels along predefined paths, and each path takes a certain amount of time to traverse. Given a starting warehouse and an ending warehouse, the goal is to determine if Drake can deliver a parcel within a given amount of time and if so, identify the shortest possible time needed to travel from the starting location to the ending location. The input consists of an integer n (2 ≤ n ≤ 1000), representing the number of warehouses, and an integer m (1 ≤ m ≤ 2000), representing the number of paths connecting the warehouses. The next m lines each contain three integers u, v, and t (1 ≤ u, v ≤ n and 1 ≤ t ≤ 10000), indicating that there is a direct path from warehouse u to warehouse v that takes t units of time. Note that the paths are bidirectional, meaning Drake can travel in both directions along them. The last line contains three integers s, e, and T (1 ≤ s, e ≤ n and 1 ≤ T ≤ 1000000), representing the starting warehouse, the ending warehouse, and the maximum allowed time T for delivery. Output \\"No\\" if it is impossible for Drake to deliver the parcel within T units of time from warehouse s to warehouse e. Otherwise, output \\"Yes\\" on the first line followed by the shortest amount of time required for Drake to travel from s to e. # Sample Input: ``` 5 7 1 2 10 2 3 10 1 3 15 3 4 10 4 5 5 2 5 50 3 5 30 1 5 30 ``` # Sample Output: ``` Yes 25 ``` # Explanation: In the example, the shortest path from warehouse 1 to warehouse 5 is through warehouses 1 -> 2 -> 3 -> 4 -> 5, which takes 10 + 10 + 10 + 5 = 35 units of time. This exceeds the allowed time of 30, so the correct path is 1 -> 3 -> 4 -> 5 which takes 15 + 10 + 5 = 30 units of time.","solution":"import heapq def dijkstra(n, edges, start, end, max_time): graph = [[] for _ in range(n + 1)] for u, v, t in edges: graph[u].append((v, t)) graph[v].append((u, t)) min_heap = [(0, start)] distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[start] = 0 while min_heap: current_time, node = heapq.heappop(min_heap) if current_time > distances[node]: continue for neighbor, time in graph[node]: new_time = current_time + time if new_time < distances[neighbor]: distances[neighbor] = new_time heapq.heappush(min_heap, (new_time, neighbor)) if distances[end] <= max_time: return \\"Yes\\", distances[end] else: return \\"No\\" def delivery_possible(n, m, edges, start, end, max_time): result = dijkstra(n, edges, start, end, max_time) return result"},{"question":"You are given a forest represented as an undirected graph with n nodes and m edges. Each node represents a tree, and each edge represents a path connecting two trees. The forest may not be connected, meaning there could be multiple separate groups of connected trees. Your task is to determine the number of distinct forests that can be formed by removing exactly one edge from the given forest. A forest is defined as a graph without cycles, and each tree in the forest is an acyclic connected component. Input: - The first line contains two integers n and m (2 ≤ n ≤ 100, 1 ≤ m ≤ n - 1) representing the number of nodes and edges, respectively. - The following m lines each contain two integers u and v (1 ≤ u, v ≤ n; u ≠ v), representing an edge between node u and node v. Output: - Print the number of distinct forests that can be formed by removing exactly one edge from the given forest. Example: Input: ``` 5 4 1 2 1 3 2 4 4 5 ``` Output: ``` 4 ``` Explanation: Given forest: ``` 1 / 2 3 | 4 | 5 ``` By removing any one of the four edges, the forest will break into two connected components. Therefore, there are 4 possible distinct forests.","solution":"def number_of_forests(n, edges): Determines the number of distinct forests that can be formed by removing exactly one edge. Parameters: n (int): Number of nodes. edges (list of tuples): List of edges where each tuple (u, v) represents an edge between nodes u and v. Returns: int: Number of distinct forests that can be formed by removing exactly one edge. # Since any edge in a tree with n nodes and n-1 edges is a bridge, # removing any edge will increase the number of connected components by 1. return len(edges)"},{"question":"Imagine you are attending a programming contest and you encounter the following problem: You are given a non-empty string `text` consisting of lowercase Latin letters. Your task is to find the lexicographically smallest string that can be obtained by removing exactly one character from the original string `text`. The lexicographical order of strings is the order we are all used to, the \\"dictionary\\" order. Formally, for two strings `p` and `q` of length `n` and `m` respectively, string `p` is considered lexicographically less than string `q` if either: - `p` is a prefix of `q` and `n < m`, or - There exists an index `i` such that for all `j < i`, `p[j] = q[j]` and `p[i] < q[i]`. Write a program to solve the task. The input consists of the string `text` and the length of this string is between 2 and 200,000 (inclusive). Your output should be the lexicographically smallest string obtainable by removing one character from `text`. **Input format:** - A single line containing the string `text`. **Output format:** - A single line containing the lexicographically smallest string obtainable by removing one character from `text`. **Examples:** 1. Input: ``` abc ``` Output: ``` ab ``` 2. Input: ``` acb ``` Output: ``` ab ``` 3. Input: ``` bbbbbb ``` Output: ``` bbbbb ``` 4. Input: ``` abcdxyz ``` Output: ``` abcdxy ``` **Guidelines:** - Maintain the original order of the characters except for the removed one. - The output must be precisely one character shorter than the original string.","solution":"def lexicographically_smallest_string(text): Finds the lexicographically smallest string that can be obtained by removing exactly one character from the original string. for i in range(len(text) - 1): if text[i] > text[i + 1]: return text[:i] + text[i + 1:] return text[:-1]"},{"question":"The kingdom of Algosville is famous for its precisely timed citizen scheduling system. There are n citizens, each with a unique integer identifier from 1 to n. Every citizen has a particular time pi at which they are scheduled to perform a specific task. The times pi are given in a list, and each pi is an integer (1 ≤ pi ≤ 10^9). Citizens can only perform their tasks during their scheduled time, not before or after. However, due to a recent glitch in the timing system, some citizens ended up scheduled at the same times, causing conflicts. The Mayor of Algosville wants to resolve these conflicts by ensuring that every citizen gets a unique time slot. The adjustment policy allows the Mayor to add positive integers to the given times (pi) to make all times unique. The goal is to achieve this with the minimum sum of all time additions. Write a function `minimize_additions(n, times)` to help the Mayor. The function takes an integer n and a list of integers times as input. The function should return the minimum sum of additions required to resolve the conflicts and make all times unique. # Input - The function receives the following parameters: - `n`: an integer representing the number of citizens (1 ≤ n ≤ 100000). - `times`: a list of n integers representing the scheduled times (1 ≤ pi ≤ 10^9). # Output - The function should return the minimum sum of additions required to make all times unique. # Example ```python def minimize_additions(n, times): # Your code here # Example usage: n = 5 times = [1, 2, 2, 2, 5] print(minimize_additions(n, times)) # Output: 3 ``` # Explanation In the example, the initial times are [1, 2, 2, 2, 5]. To make all times unique: - The first 2 can stay as is (no addition required). - The second 2 can be increased to 3 (+1 addition). - The third 2 can be increased to 4 (+2 additions). - Therefore, the minimum sum of additions required is 0 + 0 + 1 + 2 + 0 = 3.","solution":"def minimize_additions(n, times): Returns the minimum sum of additions required to make all times unique. times.sort() additions = 0 for i in range(1, n): if times[i] <= times[i-1]: additions += times[i-1] - times[i] + 1 times[i] = times[i-1] + 1 return additions"},{"question":"Marta has recently taken up a new hobby of constructing intricate patterns using colored beads. Each bead is represented by a lowercase English letter, and each unique letter corresponds to a specific color. Marta has a set of n beads organized in a string s. Marta noticed that some sections of her bead patterns repeat, and she wants to identify the longest repeated substring within her string s. A substring is considered repeated if it appears at least twice in the string and the occurrences do not overlap. Write a function that takes a single string s (1 ≤ length of s ≤ 1000) as input and returns the longest repeated substring. If there is more than one substring with the maximum length, return the lexicographically smallest one. If there is no repeated substring, return an empty string. # Input - A single string s consisting of lowercase English letters. # Output - A single string representing the longest repeated substring in s, or an empty string if no such substring exists. # Example Example 1 Input: ``` banana ``` Output: ``` ana ``` Example 2 Input: ``` abcd ``` Output: ``` ``` Example 3 Input: ``` abcabcabc ``` Output: ``` abcabc ``` # Note - In the first example, the substring \\"ana\\" appears twice in \\"banana\\". - In the second example, there are no repeated substrings. - In the third example, the substring \\"abcabc\\" is the longest and repeated within \\"abcabcabc\\".","solution":"def longest_repeated_substring(s: str) -> str: def get_suffix_array(s: str): return sorted(range(len(s)), key=lambda i: s[i:]) def lcp(s: str, suffix_array: list): n = len(s) rank = [0] * n lcp_array = [0] * (n - 1) for i, suffix in enumerate(suffix_array): rank[suffix] = i h = 0 for i in range(n): if rank[i] > 0: j = suffix_array[rank[i] - 1] while i + h < n and j + h < n and s[i + h] == s[j + h]: h += 1 lcp_array[rank[i] - 1] = h if h > 0: h -= 1 return lcp_array suffix_array = get_suffix_array(s) lcp_array = lcp(s, suffix_array) max_len = 0 idx = 0 for i in range(len(lcp_array)): if lcp_array[i] > max_len: max_len = lcp_array[i] idx = i if max_len == 0: return \\"\\" else: return s[suffix_array[idx]:suffix_array[idx] + max_len]"},{"question":"In the world of game development, it\'s common to create environments with obstacles that characters must navigate through. Imagine you are creating a game where a character moves through a 2D grid filled with obstacles. The character can move up, down, left, or right but cannot move diagonally or pass through obstacles. Your task is to determine the shortest path from the character\'s starting position to a destination in the grid. You are given a grid of size n x m where each cell is either free (\'.\') or an obstacle (\'#\'). The character starts at position (sx, sy) and needs to reach the position (dx, dy). If it\'s impossible to reach the destination, output -1. The input is structured as follows: - The first line contains two integers n and m (1 ≤ n, m ≤ 100), representing the number of rows and columns of the grid. - The second line contains two integers sx and sy (0 ≤ sx < n, 0 ≤ sy < m), representing the starting position of the character. - The third line contains two integers dx and dy (0 ≤ dx < n, 0 ≤ dy < m), representing the destination position. - The next n lines each contain m characters, either \'.\' or \'#\', representing the grid. Output a single integer representing the minimum number of steps required to reach the destination. If it\'s impossible to reach the destination, print -1. # Example Input: ``` 5 5 0 0 4 4 . . . # . # . # . . . . . . # . # . # . . . . . . ``` Output: ``` 8 ``` Explanation: The grid is as follows: ``` . . . # . # . # . . . . . . # . # . # . . . . . . ``` The shortest path from (0, 0) to (4, 4) avoiding obstacles is 8 steps.","solution":"from collections import deque def shortest_path_in_grid(n, m, sx, sy, dx, dy, grid): Determines the shortest path in a 2D grid from starting position (sx, sy) to destination (dx, dy). Args: n: Number of rows in the grid. m: Number of columns in the grid. sx: Starting x-coordinate. sy: Starting y-coordinate. dx: Destination x-coordinate. dy: Destination y-coordinate. grid: List of strings representing the grid, where \'.\' is free and \'#\' is an obstacle. Returns: Integer representing the minimum number of steps needed to reach the destination, or -1 if unreachable. if grid[sx][sy] == \'#\' or grid[dx][dy] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = [[False] * m for _ in range(n)] queue = deque([(sx, sy, 0)]) # (current x, current y, steps) visited[sx][sy] = True while queue: x, y, steps = queue.popleft() if x == dx and y == dy: return steps for direction in directions: nx, ny = x + direction[0], y + direction[1] if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny, steps + 1)) return -1"},{"question":"You are given an undirected graph with n nodes and m edges. Each node has a unique identifier from 1 to n. The graph does not contain any self-loops or multiple edges. Your task is to determine if the graph contains a cycle, and if it does, print out any one of the cycles you find. The first line of input contains two integers n and m (1 ≤ n ≤ 100000, 0 ≤ m ≤ 200000) — the number of nodes and edges respectively. Each of the next m lines describes an edge by two integers u and v (1 ≤ u, v ≤ n) — the nodes that the edge connects. If the graph contains a cycle, output \\"Cycle found\\" followed by the nodes in the cycle in the order they appear. If there are multiple cycles, output any one of them. If the graph does not contain a cycle, output \\"No cycle found\\". # Sample Input 1 ``` 4 4 1 2 2 3 3 4 4 1 ``` # Sample Output 1 ``` Cycle found 1 2 3 4 ``` # Sample Input 2 ``` 5 4 1 2 2 3 3 4 4 5 ``` # Sample Output 2 ``` No cycle found ```","solution":"from collections import defaultdict def find_cycle(n, m, edges): def dfs(v, parent): visited[v] = True stack.append(v) for to in graph[v]: if not visited[to]: if dfs(to, v): return True elif to != parent: cycle_start = to cycle_end = v while stack[-1] != cycle_start: cycle.append(stack.pop()) cycle.append(cycle_start) cycle.reverse() return True stack.pop() return False graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) stack = [] cycle = [] for i in range(1, n + 1): if not visited[i]: if dfs(i, -1): print(\\"Cycle found\\") print(\\" \\".join(map(str, cycle))) return print(\\"No cycle found\\") def process_input(data): lines = data.strip().split(\\"n\\") n, m = map(int, lines[0].split()) edges = [tuple(map(int, line.split())) for line in lines[1:]] return n, m, edges # Example of usage: data = 4 4 1 2 2 3 3 4 4 1 n, m, edges = process_input(data) find_cycle(n, m, edges)"},{"question":"You are given a list of integers representing the prices of different items in a store. Your goal is to buy as many items as possible without exceeding a given budget. You can choose to buy only one item of each type. Write a function `maxItems` that takes two arguments: a list of integers `prices` and an integer `budget`. This function should return the maximum number of items you can buy without exceeding the `budget`. **Input:** - The first line contains an integer n (1 ≤ n ≤ 100,000), the number of items in the store. - The second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 100,000), the prices of the items. - The third line contains an integer b (1 ≤ b ≤ 1,000,000), the budget. **Output:** - Print an integer representing the maximum number of items you can buy without exceeding the given budget. **Example:** ``` Input: 5 1 12 5 111 200 10 Output: 2 Input: 6 20 50 70 30 10 40 100 Output: 4 ``` In the first example, you can buy the items with prices 1 and 5 for a total of 2 items, which does not exceed the budget. In the second example, you can buy the items with prices 20, 10, 30, and 40 for a total of 4 items, which fits within the budget.","solution":"def maxItems(prices, budget): Returns the maximum number of items that can be bought without exceeding the budget. Parameters: prices (list of int): List of item prices. budget (int): The total budget available. Returns: int: Maximum number of items that can be bought. prices.sort() total_cost = 0 count = 0 for price in prices: if total_cost + price <= budget: total_cost += price count += 1 else: break return count"},{"question":"Jackson loves collecting stamps and wants to organize his collection in a specific way. He has `n` stamp albums, each having a unique identifier from 1 to `n`. Each album can hold a certain number of stamps, determined by an integer array `capacity`, where `capacity[i]` represents the maximum number of stamps album `i+1` can hold. Jackson also has a list of `m` stamps, each with a specific weight, determined by another integer array `stamps`, where `stamps[j]` represents the weight of the `j+1`-th stamp. Jackson wants to place the stamps in the albums such that the total weight of the stamps in each album does not exceed the album\'s capacity. Additionally, a stamp can\'t be split among multiple albums. Help Jackson determine if it is possible to distribute all the stamps among the albums according to the given rules. # Input - The first line contains two integers `n` (1 ≤ n ≤ 100,000) and `m` (1 ≤ m ≤ 100,000) — the number of albums and the number of stamps. - The second line contains `n` integers — the capacities of the albums. - The third line contains `m` integers — the weights of the stamps. # Output - Print \\"YES\\" if Jackson can distribute all the stamps according to the rules, otherwise print \\"NO\\". # Example Input ``` 3 4 5 10 5 3 4 6 2 ``` Output ``` YES ``` Explanation Jackson can distribute the stamps as follows: - The first stamp with weight 3 and the second stamp with weight 4 in the second album (total weight 7, which is less than or equal to 10). - The third stamp with weight 6 in the third album (total weight 6, which is less than or equal to 5 + 1). - The fourth stamp with weight 2 in the first album (total weight 2, which is less than or equal to 5). If the distribution is not possible given the constraints, the output should be \\"NO\\".","solution":"def can_distribute_stamps(n, m, capacity, stamps): Determine if the stamps can be distributed according to the given rules. Parameters: n (int): Number of albums. m (int): Number of stamps. capacity (List[int]): Capacities of the albums. stamps (List[int]): Weights of the stamps. Returns: str: \\"YES\\" if all stamps can be distributed, otherwise \\"NO\\". # Sort capacities and stamps in descending order capacity.sort(reverse=True) stamps.sort(reverse=True) # Check if every stamp can be placed in an album for weight in stamps: placed = False for i in range(n): if capacity[i] >= weight: capacity[i] -= weight placed = True break if not placed: return \\"NO\\" return \\"YES\\""},{"question":"You are given an array of n integers. You are allowed to perform at most one operation: choose any two elements in the array and swap them. You need to determine whether it is possible to make the array non-decreasing by performing at most one such swap operation. The input consists of one line containing an integer n (1 ≤ n ≤ 30), the size of the array, followed by a line containing n integers, the elements of the array. If there is a way to make the array non-decreasing by performing at most one swap, print \\"YES\\" (without quotes) in the only line of the output. Otherwise, print \\"NO\\" (without quotes). For example, consider the array [3, 1, 2]. By swapping the first and second elements, we get the array [1, 3, 2], which is not non-decreasing. However, by swapping the first and third element, we get the array [2, 1, 3], which is also not sorted. Therefore, the output should be \\"NO\\". In another example, consider the array [3, 5, 1, 4, 2]. By swapping the first element (3) and the last element (2), we get the array [2, 5, 1, 4, 3], which is not sorted. However, by swapping the second element (5) and the fourth element (4), we get the array [3, 4, 1, 5, 2], which is also not sorted. Therefore, the output should be \\"NO\\". In the third example, consider the array [1, 3, 5, 3]. By swapping the third element (5) and the fourth element (3), we get the array [1, 3, 3, 5], which is sorted. Therefore, the output should be \\"YES\\".","solution":"def can_be_non_decreasing_by_one_swap(n, arr): if n == 1: return \\"YES\\" def is_sorted(arr): return all(arr[i] <= arr[i + 1] for i in range(n - 1)) if is_sorted(arr): return \\"YES\\" for i in range(n): for j in range(i + 1, n): arr[i], arr[j] = arr[j], arr[i] if is_sorted(arr): return \\"YES\\" arr[i], arr[j] = arr[j], arr[i] return \\"NO\\""},{"question":"Alice is working on a secret project involving alphanumeric passwords. She has noticed that the strength of the password increases with the number of unique characters it contains. To simplify her project, Alice wants to determine the total number of unique characters in a given string. Assume that the string contains only lowercase alphabetical characters (\'a\'-\'z\') and digits (\'0\'-\'9\'). You are given a string `s` (1 ≤ |s| ≤ 10^5), and you need to write a program to find and print the total number of unique characters present in the string. For example, if the input string is \\"abc123\\" then the number of unique characters is 6. **Input:** A single line containing a string `s`. **Output:** Print an integer denoting the total number of unique characters in the string. **Example:** ``` Input: abc123 Output: 6 ```","solution":"def count_unique_characters(s): Returns the total number of unique characters in the given string. unique_characters = set(s) return len(unique_characters) # Example usage # s = \\"abc123\\" # print(count_unique_characters(s)) # Output: 6"},{"question":"Tom is managing a warehouse with a stack-based robotic arm that can perform a variety of operations on a stack of boxes. The robotic arm supports three main operations: 1. PUSH x - Push box x onto the stack. 2. POP - Remove the top box from the stack. 3. MAX - Output the maximum value in the stack. Tom needs to run a series of these operations and report the results of the MAX operations. Your task is to help Tom simulate these operations on the stack and provide the correct output for each MAX operation. The first line of the input contains an integer n (1 ≤ n ≤ 200,000), the number of operations to be performed. Each of the next n lines contains one of the three commands described above. It is guaranteed that there will be at least one box in the stack whenever a POP or MAX operation is performed. Print the results of each MAX operation in the order they were performed. Example: ``` Input: 10 PUSH 5 PUSH 3 MAX PUSH 7 MAX POP MAX PUSH 8 MAX POP Output: 5 7 5 8 ``` Explanation: 1. PUSH 5: The stack is [5]. 2. PUSH 3: The stack is now [5, 3]. 3. MAX: The current maximum value in the stack is 5. 4. PUSH 7: The stack is now [5, 3, 7]. 5. MAX: The current maximum value in the stack is 7. 6. POP: The top box (7) is removed, the stack is now [5, 3]. 7. MAX: The current maximum value in the stack is 5. 8. PUSH 8: The stack is now [5, 3, 8]. 9. MAX: The current maximum value in the stack is 8. 10. POP: The top box (8) is removed, the stack is now [5, 3].","solution":"def warehouse_operations(operations): stack = [] max_stack = [] results = [] for op in operations: if op.startswith(\\"PUSH\\"): _, x = op.split() x = int(x) stack.append(x) if not max_stack or x >= max_stack[-1]: max_stack.append(x) elif op == \\"POP\\": if stack.pop() == max_stack[-1]: max_stack.pop() elif op == \\"MAX\\": results.append(max_stack[-1]) return results"},{"question":"You are given a string s consisting of lowercase English letters. In one operation, you can choose a substring of s in which all the characters are the same and remove it from the string. For example, for the string \\"aaabb\\", you can choose the substring \\"aaa\\" (this reduces the string to \\"bb\\"), or you can choose the substring \\"bb\\" (this reduces the string to \\"aaa\\"). Your task is to determine whether it is possible to make the string empty using the above operation any number of times. If it\'s possible, output \\"YES\\", otherwise output \\"NO\\". The first line of the input contains a single integer t (1 leq t leq 10^4) — the number of test cases. The description of the test cases follows. The first line of each test case contains a string s (1 leq |s| leq 10^5) — the string to be reduced. It is guaranteed that the sum of lengths of all strings over all test cases does not exceed 10^6. For each test case, output on a single line the word \\"YES\\" if it is possible to reduce the string to an empty string using the aforementioned operation, or \\"NO\\" if it is impossible to do so. # Example: **Input:** 3 aaabb aaaaa abab **Output:** YES YES YES","solution":"def can_reduce_to_empty(t, strings): This function determines if it\'s possible to make the given strings empty by repeatedly removing substrings of consecutive same characters. Parameters: t (int): number of test cases strings (list of str): list of strings to check Returns: list of str: list containing \\"YES\\" or \\"NO\\" for each test case results = [] for s in strings: results.append(\\"YES\\") return results"},{"question":"A factory produces n different types of widgets, and the i-th type of widget requires ai units of material to produce. The factory has a limited amount of total material m to use for widget production. The factory manager wants to maximize the number of different types of widgets produced, provided that the total amount of material used does not exceed m. Each type of widget can be produced at most once. Determine the maximum number of different types of widgets the factory can produce without exceeding the total material limit. The first line contains two positive integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 1000) — the number of different types of widgets and the total amount of material available. The second line contains a sequence of integers a1, a2, ..., an (1 ≤ ai ≤ 100) — the amount of material required for each type of widget. Print the maximum number of different types of widgets the factory can produce without exceeding the total material limit. In the first example, the factory can produce 3 different types of widgets. For example, it can produce widgets requiring 1, 2, and 3 units of material, using a total of 6 units of material. In the second example, the factory can produce only 1 type of widget, as producing any two types would exceed the material limit.","solution":"def max_widgets(n, m, materials): Determines the maximum number of different types of widgets the factory can produce without exceeding the total material limit. Parameters: n (int): Number of different types of widgets. m (int): Total amount of material available. materials (list of int): Amount of material required for each type of widget. Returns: int: The maximum number of different types of widgets the factory can produce. materials.sort() total_material_used = 0 widget_count = 0 for material in materials: if total_material_used + material <= m: total_material_used += material widget_count += 1 else: break return widget_count"},{"question":"A number sequence is defined by the following recurrence relation: f(x) = - f(x - 1) + 2 * f(x - 2) With the initial terms given as: f(1) = A f(2) = B You are provided the values of A, B and an integer n. Your task is to compute the value of f(n) modulo 998244353. **Input:** The input consists of three integers A, B (1 ≤ A, B ≤ 10^9) and n (1 ≤ n ≤ 10^9), in a single line. **Output:** Output a single integer representing the value of f(n) modulo 998244353. **Example:** **Input:** 3 5 4 **Output:** 9 **Explanation:** From initial terms: - f(1) = 3 - f(2) = 5 Using the recurrence relation: - f(3) = -f(2) + 2 * f(1) = -5 + 2 * 3 = 1 - f(4) = -f(3) + 2 * f(2) = -1 + 2 * 5 = 9 So, f(4) = 9.","solution":"MOD = 998244353 def sequence(A, B, n): Returns the nth term of the sequence defined by the recurrence relation f(x) = -f(x - 1) + 2 * f(x - 2) with given initial terms A and B. The result is returned modulo 998244353. if n == 1: return A % MOD if n == 2: return B % MOD f1, f2 = A % MOD, B % MOD for i in range(3, n + 1): fn = (-f2 + 2 * f1) % MOD f1, f2 = f2, fn return f2"},{"question":"You are given two strings, s and t. Both strings contain only lowercase English letters. You need to determine if string t can be obtained by rearranging the characters of string s and possibly inserting exactly one additional character. The first line contains the string s (1 ≤ |s| ≤ 100). The second line contains the string t (2 ≤ |t| ≤ 101). Print \\"YES\\" if t can be obtained by rearranging the characters of s and adding exactly one additional character. Otherwise, print \\"NO.\\" Examples: ``` Input: aab baac Output: YES Input: abc aabcd Output: NO Input: xyz xyzq Output: YES ```","solution":"from collections import Counter def can_obtain_by_rearranging_and_adding_one(s, t): Determine if t can be obtained by rearranging s and adding exactly one character. # Count characters in both strings count_s = Counter(s) count_t = Counter(t) # Check if t has exactly one more character than s diff = sum((count_t - count_s).values()) if diff == 1: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given an array `a` consisting of `n` integers. Your task is to determine if there exists a pair of indices `i` and `j` (1 ≤ i < j ≤ n) such that the sum of `a[i]` and `a[j]` is a prime number. If such a pair exists, print \\"YES\\"; otherwise, print \\"NO\\". For example, if the array `a` is `[1, 4, 6, 3]`, the pairs `(1, 4)`, `(1, 6)`, `(4, 3)`, etc., can be checked. Here `(1, 6)` and `(4, 3)` both sum to a prime number (7), so the answer for this test case is \\"YES\\". The first line of the input contains one integer `n` (2 ≤ n ≤ 10^5) — the number of elements in `a`. The second line of the input contains `n` integers `a_1, a_2, ..., a_n` (1 ≤ a_i ≤ 10^6), where `a_i` is the i-th element of `a`. Print \\"YES\\" if there exists a pair of indices `i` and `j` such that the sum of `a[i]` and `a[j]` is a prime number. Otherwise, print \\"NO\\".","solution":"def is_prime(num): Checks if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def has_prime_sum_pair(a): Determines if there exists a pair of indices (i, j) such that the sum of a[i] and a[j] is a prime number. n = len(a) for i in range(n): for j in range(i + 1, n): if is_prime(a[i] + a[j]): return \\"YES\\" return \\"NO\\""},{"question":"In a distant kingdom, there is a famous dinner club called the Round Table. The club\'s members sit at a circular table and each of them has a unique seating preference. These preferences are described by pairs of members who want to sit next to each other. Given the seating preferences, you need to determine if it is possible to arrange all the members around the table such that each member sits next to all the members they prefer to sit next to. You are provided with the number of members n and a list of m seating preferences. A seating preference is given as a pair of distinct integers (a, b) indicating that member a wants to sit next to member b and vice versa. The first line of the input contains two integers n (3 ≤ n ≤ 100) — the number of members, and m (1 ≤ m ≤ n*(n-1)/2) — the number of seating preferences. Each of the following m lines contains two integers a_i and b_i (1 ≤ a_i, b_i ≤ n; a_i ≠ b_i) — indicating that member a_i wants to sit next to member b_i. Print \\"YES\\" (without quotes) if it is possible to arrange the members at the table to satisfy all the seating preferences, otherwise print \\"NO\\". Example Input: ``` 5 4 1 2 2 3 3 4 4 5 ``` Example Output: ``` YES ```","solution":"def can_arrange_members(n, m, preferences): from collections import defaultdict def dfs(v, color): colors[v] = color for neighbor in graph[v]: if colors[neighbor] == -1: if not dfs(neighbor, 1 - color): return False elif colors[neighbor] == color: return False return True if m < n - 1: return \\"NO\\" graph = defaultdict(list) for a, b in preferences: graph[a].append(b) graph[b].append(a) colors = [-1] * (n + 1) for member in range(1, n + 1): if colors[member] == -1: if not dfs(member, 0): return \\"NO\\" return \\"YES\\""},{"question":"You are given an array of integers which may have duplicates. Your task is to return all unique triplets in the array that sum up to zero. Note that the solution set must not contain duplicate triplets. For example, given the array `nums = [-1, 0, 1, 2, -1, -4]`, a solution set is: ``` [ [-1, 0, 1], [-1, -1, 2] ] ``` # Function Signature ```python def three_sum(nums: List[int]) -> List[List[int]]: This function takes a list of integers and returns a list of lists containing all unique triplets that sum up to zero. :param nums: List[int] - a list of integers which can contain both positive and negative numbers :return: List[List[int]] - a list of lists of integers, each inner list containing three integers that sum up to zero ``` # Input - `nums` (List[int]): A list of integers, where -10^5 ≤ nums[i] ≤ 10^5 and 0 ≤ len(nums) ≤ 3000. # Output - Returns a list of lists where each inner list contains three integers that sum up to zero. # Constraints - The elements within each triplet must be in non-descending order. - The solution may not contain duplicate triplets. # Example ```python assert three_sum([-1, 0, 1, 2, -1, -4]) == [[-1, -1, 2], [-1, 0, 1]] assert three_sum([]) == [] assert three_sum([0]) == [] ``` # Note - Optimize the solution to run in O(N^2) time complexity where possible. - Think about how you can avoid duplicate triplets in the resulting list efficiently.","solution":"from typing import List def three_sum(nums: List[int]) -> List[List[int]]: nums.sort() result = [] n = len(nums) for i in range(n): if i > 0 and nums[i] == nums[i - 1]: continue # Skip duplicate elements left, right = i + 1, n - 1 while left < right: three_sum = nums[i] + nums[left] + nums[right] if three_sum < 0: left += 1 elif three_sum > 0: right -= 1 else: result.append([nums[i], nums[left], nums[right]]) # Skip duplicate elements while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 return result"},{"question":"Write a function in Python that takes in a list of integers and returns a new list where each element is the sum of all other elements except the one at that index. **Example:** ```python input_list = [1, 2, 3, 4] output_list = [9, 8, 7, 6] # Explanation: # output_list[0] = 2 + 3 + 4 = 9 # output_list[1] = 1 + 3 + 4 = 8 # output_list[2] = 1 + 2 + 4 = 7 # output_list[3] = 1 + 2 + 3 = 6 ``` **Constraints:** - The length of the input list will be between 1 and 10^4. - Each element in the input list will be between -10^6 and 10^6. **Function Signature:** ```python def sum_except_self(nums: List[int]) -> List[int]: # Your code here ```","solution":"from typing import List def sum_except_self(nums: List[int]) -> List[int]: Returns a new list where each element is the sum of all other elements except the one at that index. total_sum = sum(nums) result = [total_sum - num for num in nums] return result"},{"question":"Anna loves reading books and she has carefully picked a specific list of books to read this year. Each book has a certain number of pages and Anna plans to read exactly one book from this list on each day until she finishes all of them. However, Anna is quite enthusiastic and she wants to minimize the total number of days she spends reading, but she can only start reading a new book on a new day. Her friend Bob wants to organize a reading challenge and decides to ask Anna the following question: \\"Given that you can read a certain number of pages each day, what\'s the minimum number of days you need to read all the books?\\" Formally, Anna can read up to p pages per day. You are given an array of integers where the i-th integer represents the number of pages in the i-th book. Your task is to find out the minimum number of days Anna needs to complete reading all the books if she reads optimally respecting the constraint that she can only finish reading one book per day. The first line of the input contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case starts with an integer p (1 ≤ p ≤ 10,000) — the maximum number of pages Anna can read per day, followed by an integer n (1 ≤ n ≤ 100,000) — the number of books. The next line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10,000) — the number of pages in each book. Output t lines where each line corresponds to the minimum number of days required for each test case. # Example **Input** ``` 2 10 4 5 8 3 2 10 6 6 2 8 4 4 10 ``` **Output** ``` 4 6 ``` # Explanation In the first test case, Anna can read the books in this order: 5, 8, 3, 2, taking 4 days in total as no combination of two books can be read in a single day without exceeding the daily limit. In the second test case, Anna will read one book per day for a total of 6 days. Note that Anna always reads one book per day and cannot split the reading of any single book across multiple days.","solution":"def min_days_to_read(p, books): Determine the minimum number of days required to read all the books given the maximum pages she can read per day. days = 0 for book in books: days += 1 # Each book requires at least one day return days def read_books(test_cases): results = [] for p, n, books in test_cases: results.append(min_days_to_read(p, books)) return results"},{"question":"Given an array of integers `arr` and an integer `k`, rearrange the array in such a way that subarrays of size `k` and their reverse counterparts are present adjacent to each other. More formally, you need to split the array into as many subarrays of size `k` as possible and for each subarray, place it next to its reverse. If the size of the array is not a multiple of `k`, then the leftover elements should be placed as they are at the end of the array. Write a function `rearrangeWithReverses(arr, k)` which takes an array `arr` and an integer `k`, and returns the rearranged array as described above. # Example: ```python def rearrangeWithReverses(arr, k): # Your implementation here # Test case 1 arr = [1, 2, 3, 4, 5, 6, 7, 8] k = 3 print(rearrangeWithReverses(arr, k)) # Output: [1, 2, 3, 3, 2, 1, 4, 5, 6, 6, 5, 4, 7, 8] # Test case 2 arr = [1, 2, 3, 4] k = 2 print(rearrangeWithReverses(arr, k)) # Output: [1, 2, 2, 1, 3, 4, 4, 3] ``` # Constraints: - The given array `arr` will have length between 1 and 1000 inclusive. - Each element in the array is an integer. - `1 <= k <= len(arr)`","solution":"def rearrangeWithReverses(arr, k): Rearranges the array such that subarrays of size `k` and their reverse counterparts are present adjacent to each other. Parameters: arr : list[int] : The input array to be rearranged. k : int : The size of the subarray. Returns: list[int] : The rearranged array. result = [] n = len(arr) for i in range(0, n // k): subarray = arr[i * k : (i + 1) * k] result.extend(subarray) result.extend(subarray[::-1]) if n % k != 0: result.extend(arr[(n // k) * k:]) return result"},{"question":"Given a string of lowercase English letters and a positive integer k, your task is to determine whether it is possible to rearrange the string such that no two adjacent characters are the same, and if possible, return any valid rearrangement. Input: - The first line contains a string s consisting of lowercase English letters (1 ≤ |s| ≤ 10^5). - The second line contains an integer k (1 ≤ k ≤ |s|). Output: - If it is possible to rearrange the string in such a way that no two adjacent characters are the same, print the rearranged string. - Otherwise, print \\"Not possible\\". Example 1: Input: aabb 2 Output: abab Example 2: Input: aaabb 2 Output: ababa Example 3: Input: aaabb 3 Output: Not possible In the first example, a possible rearrangement is \'abab\'. In the second example, a possible rearrangement is \'ababa\'. In the third example, it is not possible to rearrange the string such that no two adjacent characters are the same considering k elements distance.","solution":"import heapq from collections import Counter def rearrange_string(s, k): if k == 1: # If k is 1, any arrangement is fine return s counter = Counter(s) max_heap = [(-count, char) for char, count in counter.items()] heapq.heapify(max_heap) queue = [] result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) queue.append((count + 1, char)) # Decrement the count if len(queue) >= k: count, char = queue.pop(0) if count < 0: heapq.heappush(max_heap, (count, char)) if len(result) == len(s): return \'\'.join(result) else: return \\"Not possible\\""},{"question":"Consider a university conducting an annual team robotics competition. Each team is formed with the same number of students from different specialties: Mechanical Engineering, Electrical Engineering, and Computer Science. Due to the competition’s rules, no team should have more than one student from the same specialty. The university wants to ensure that they can form the maximum number of complete teams where each team consists of exactly three students, one from each specialty. You are given the number of students from each specialty: mechanical (m), electrical (e), and computer science (c). Your task is to compute the maximum number of teams that can be formed under these constraints. The first line contains one integer t (1 le t le 10) — the number of test cases. Each of the next t lines contains three integers m, e, and c (1 le m, e, c le 1000) — the number of students from mechanical, electrical, and computer science specialties, respectively. For each test case, print one integer — the maximum number of teams that can be formed. Example: ``` Input: 3 3 3 3 5 1 2 2 2 4 Output: 3 1 2 ``` Explanation: 1. For the first test case, there are 3 students from each specialty, so all 3 complete teams can be formed. 2. For the second test case, despite having 5 mechanical students, there is only 1 electrical student, so only 1 complete team can be formed. 3. For the third test case, there can be 2 complete teams formed because there is an abundance of students from the Computer Science specialty, but only 2 students each from Mechanical and Electrical specialties to pair with them.","solution":"def max_teams(t, student_data): results = [] for i in range(t): m, e, c = student_data[i] results.append(min(m, e, c)) return results"},{"question":"Given an array of integers that represents the prices of houses on a street, you are to determine the maximum profit possible from buying and selling a house on that street. The rule for buying and selling is that you can only sell a house if you have bought one before it. Your task is to write a function `maxProfit(prices)` that returns the maximum profit you can achieve. If no profit can be made, return 0. **Input:** - An array `prices` of n integers where `prices[i]` is the price of a house on day i. (1 ≤ n ≤ 10^5, 0 ≤ prices[i] ≤ 10^9) **Output:** - An integer representing the maximum profit. **Examples:** 1. **Input:** `[7, 1, 5, 3, 6, 4]` **Output:** `5` Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. 2. **Input:** `[7, 6, 4, 3, 1]` **Output:** `0` Explanation: In this case, no transaction is done, i.e. max profit = 0. 3. **Input:** `[3, 2, 6, 5, 0, 3]` **Output:** `4` Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. **Notes:** - You are only allowed to complete one transaction (i.e., buy one and sell one house). - You cannot sell a house before you buy one.","solution":"def maxProfit(prices): if not prices or len(prices) <= 1: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"You are given an array of integers, and you need to find out if there are any three distinct elements in the array that form an arithmetic progression. An arithmetic progression is a sequence of numbers in which the difference of two consecutive terms is constant. Specifically, for three elements a, b, and c to form an arithmetic progression, it must hold that b - a = c - b (or equivalently 2b = a + c). Write a function `find_arithmetic_triplet(arr)` that takes in an array of integers arr (1 le |arr| le 10^5, -10^9 le arr[i] le 10^9) and returns `True` if there are three distinct elements in the array that form an arithmetic progression, and `False` otherwise. # Input - An array of integers `arr`. # Output - A boolean value `True` or `False`. # Example ```python # Example 1 arr = [1, 3, 5, 7] print(find_arithmetic_triplet(arr)) # Output: True # Explanation: 1, 3, and 5 form an arithmetic progression (3-1 = 5-3 = 2). # Example 2 arr = [10, 2, 7, 6, 4] print(find_arithmetic_triplet(arr)) # Output: True # Explanation: 2, 6, and 10 form an arithmetic progression (6-2 = 10-6 = 4). # Example 3 arr = [1, 2, 4, 5] print(find_arithmetic_triplet(arr)) # Output: False # Explanation: No three distinct elements form an arithmetic progression. ```","solution":"def find_arithmetic_triplet(arr): Returns True if there are three distinct elements in the array that form an arithmetic progression, False otherwise. n = len(arr) if n < 3: return False arr = sorted(arr) for i in range(n-2): for j in range(i+1, n-1): for k in range(j+1, n): if arr[j] - arr[i] == arr[k] - arr[j]: return True return False"},{"question":"Alex, John, and Maria are planning a board game marathon together. Each of them bought some games. Alex bought g1 games, John bought g2 games, and Maria bought g3 games. They decided to merge all their games into a single massive collection. After doing so, Alex realized they had forgotten to count the duplicates. He found out that after counting all unique games, the total number of games was S. Subsequently, Alex discovered that a few games were not counted during the merge. These forgotten games counted into an additional F total games. Now Alex wants to know the minimum number of unique games each of them could have initially brought to the collection, assuming no duplicated games are between their initial sets. Given the total unique games S, additional forgotten games F, and the total games collected by each of the three friends (g1, g2, g3), help Alex find one of the possible minimum configurations of initial unique games for each friend (u1, u2, u3) respectively or determine if it is not possible. The single line of the input contains four integers S, F, g1, g2, g3 (1 ≤ S, F, g1, g2, g3 ≤ 10^18). The output is three integers denoting the minimum initial number of unique games each brought initially or -1 if such a configuration does not exist. In the case of multiple solutions, you may provide any. **Example:** Input: 12 3 5 3 7 Output: 5 3 4","solution":"def find_initial_unique_games(S, F, g1, g2, g3): total_games = S + F if total_games > g1 + g2 + g3: return -1 # If the total unique games plus forgotten games is equal # to the sum of all games collected initially, return the # total games collected by each initially. return g1, g2, g3 # Example input S = 12 F = 3 g1 = 5 g2 = 3 g3 = 7 print(find_initial_unique_games(S, F, g1, g2, g3))"},{"question":"You are given an array of integers a consisting of n elements. You need to perform a series of operations on the array. In each operation, you can pick any two adjacent elements and replace them with their sum. Your goal is to reduce the array to a single element in such a way that the final element is as large as possible. The input consists of multiple test cases. The first line of the input contains a single integer t (1 leq t leq 10^4) - the number of test cases. The descriptions of the test cases follow. The first line of each test case contains a single integer n (2 leq n leq 10^5) - the number of elements in the array a. The next line contains n integers a_1, a_2, ldots, a_n (-10^4 leq a_i leq 10^4) - the elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 10^6. For each test case, print the maximum possible value of the array after performing the specified operations. # Example Input ``` 2 3 1 2 3 4 4 -1 2 1 ``` Output ``` 6 6 ``` # Explanation In the first test case, the optimal way is to first combine 1 and 2 to form 3, resulting in the array [3, 3]. Then, combine the two 3\'s to form 6. In the second test case, one possible way is to first combine 4 and -1 to form 3, resulting in [3, 2, 1]. Then, combine 3 and 2 to form 5, resulting in [5, 1]. Finally, combine 5 and 1 to form 6.","solution":"def max_element_after_operations(test_cases): results = [] for n, a in test_cases: results.append(sum(a)) return results # Function to parse input (helpful for testing) def parse_input(input_text): lines = input_text.strip().split(\'n\') t = int(lines[0]) test_cases = [] idx = 1 for _ in range(t): n = int(lines[idx]) a = list(map(int, lines[idx + 1].split())) test_cases.append((n, a)) idx += 2 return test_cases"},{"question":"You are given a string consisting of lowercase English letters and a list of queries. Each query is one of two types: 1. (1, l, r): Reverse the substring from index l to r (both inclusive). 2. (2, k): Output the k-th smallest character in the string after all the previous operations. Indices in the queries are 1-based, meaning the first character of the string is at index 1. Write a program to process these queries. Input: - The first line contains the initial string s (1 ≤ |s| ≤ 105). - The second line contains an integer q (1 ≤ q ≤ 105) — the number of queries. - Each of the next q lines contain a query as described above. Output: - For each query of type 2, output the k-th smallest character. Example: Input: ``` acbd 4 1 2 4 1 1 2 2 3 1 1 4 ``` Output: ``` c ``` Explanation: - The first query reverses the substring \\"cbd\\" to \\"dbc\\", transforming the string to \\"adbc\\". - The second query reverses the substring \\"ad\\" to \\"da\\", transforming the string to \\"dabc\\". - The third query requests the 3rd smallest character in \\"dabc\\", which is \'c\'. - The fourth query reverses the entire string \\"dabc\\" to \\"cbad\\".","solution":"def process_queries(s, queries): Processes the given string s and list of queries, then returns the results for type-2 queries. Parameters: s (str): The initial string. queries (list of tuples): A list of queries, where each query is a tuple. Returns: list: A list of results for type-2 queries. s = list(s) # Convert the string into a list of characters for easier manipulation results = [] for query in queries: if query[0] == 1: l = query[1] - 1 r = query[2] - 1 # Reverse the substring from l to r, both inclusive s[l:r+1] = s[l:r+1][::-1] elif query[0] == 2: k = query[1] # Find the k-th smallest character in the string sorted_s = sorted(s) results.append(sorted_s[k-1]) return results"},{"question":"You are given an array of integers arr of length n and a sliding window of size k. Your task is to find the maximum value in each sliding window of size k that moves from the left to the right end of the array. The sliding window will move one position to the right after computing the maximum for the current window. The input consists of two lines: - The first line contains two integers n and k (1 leq k leq n leq 10^5), where n is the length of the array and k is the size of the sliding window. - The second line contains n space-separated integers representing the array arr (-10^9 leq arr[i] leq 10^9). Output a single line with (n - k + 1) space-separated integers, where the i-th integer is the maximum value of the i-th window. For example, for input: ``` 8 3 1 3 -1 -3 5 3 6 7 ``` The output should be: ``` 3 3 5 5 6 7 ```","solution":"from collections import deque def sliding_window_maximum(n, k, arr): Returns the maximum value in each sliding window of size k that moves from the left to the right end of the array. Parameters: n (int): length of the array k (int): size of the sliding window arr (list): list of integers Returns: list: list of the maximum values in each sliding window deq = deque() max_values = [] for i in range(n): # Remove elements not within the window if deq and deq[0] == i - k: deq.popleft() # Remove smaller elements in k range as they are not useful while deq and arr[i] > arr[deq[-1]]: deq.pop() deq.append(i) # Add to results from the first window onwards if i >= k - 1: max_values.append(arr[deq[0]]) return max_values"},{"question":"You are a pirate and have just discovered a treasure map leading to an island with hidden treasures across a grid. The grid, a 2-dimensional array, represents the island, where each cell contains a certain amount of gold coins. You will start from the top-left corner of the grid and move only to the right or down to reach the bottom-right corner of the grid to collect as much gold coins as possible. Given the grid as a list of lists containing integers where each integer represents the number of gold coins in the respective cell, your task is to calculate the maximum number of coins you can collect. Write a function `maxGold(grid)` that takes in a 2-dimensional list and returns an integer, the maximum gold coins you can collect. **Function Signature:** ```python def maxGold(grid: List[List[int]]) -> int: ``` **Input:** - `grid`: A list of lists where each sub-list represents a row of the grid, and each integer represents the amount of gold coins in that cell. The dimensions of the grid are `m x n` where `1 <= m, n <= 100`. **Output:** - An integer representing the maximum gold coins you can collect by moving right or down from the top-left corner to the bottom-right corner of the grid. **Example:** ```python grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] maxGold(grid) # Returns 12 ``` In this example, the maximum gold coins can be collected by the path 1 → 3 → 5 → 2 → 1.","solution":"from typing import List def maxGold(grid: List[List[int]]) -> int: m, n = len(grid), len(grid[0]) # Create a 2D dp array initialized to 0 dp = [[0] * n for _ in range(m)] # Initialize the first cell dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, m): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # Maximum coins will be in the bottom-right corner return dp[m-1][n-1]"},{"question":"You are given a directed acyclic graph (DAG) with `n` vertices and `m` edges. The vertices are numbered from `1` to `n`. A vertex `u` is considered an ancestor of vertex `v` if there is a directed path from `u` to `v` in the graph. Your task is to find the number of distinct ancestors for each vertex in the graph. # Input - The first line contains two integers `n` and `m` (2 le n le 1000, 1 le m le 2000) — the number of vertices and the number of edges, respectively. - The next `m` lines each contain two integers `u` and `v` (1 le u, v le n), denoting a directed edge from vertex `u` to vertex `v`. # Output - Output `n` lines, each line should contain one integer — the number of distinct ancestors of vertex `i` (for `i` from `1` to `n`). # Example Input ``` 6 6 1 2 2 3 3 4 4 5 5 6 1 3 ``` Output ``` 0 1 2 3 4 5 ``` # Notes In the example, the ancestors for each vertex are: - Vertex 1: none - Vertex 2: {1} - Vertex 3: {1, 2} - Vertex 4: {1, 2, 3} - Vertex 5: {1, 2, 3, 4} - Vertex 6: {1, 2, 3, 4, 5}","solution":"from collections import defaultdict, deque def find_ancestors(n, m, edges): Based on the given number of vertices, edges and their directed connections, calculates the number of distinct ancestors for each vertex in the graph. graph = defaultdict(list) for u, v in edges: graph[u].append(v) def bfs(start): visited = set() queue = deque([start]) while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return visited ancestors_count = [0] * n for vertex in range(1, n + 1): visited_vertices = set() for possible_ancestor in range(1, n + 1): if possible_ancestor != vertex: reachable_from_ancestor = bfs(possible_ancestor) if vertex in reachable_from_ancestor: visited_vertices.add(possible_ancestor) ancestors_count[vertex - 1] = len(visited_vertices) return ancestors_count"},{"question":"Given an undirected graph with n nodes and m edges, your task is to determine if there exists a way to place the nodes on a straight line such that for every edge (u, v), node u appears before node v. If this is possible, then it\'s guaranteed that there will be a unique way to place the nodes satisfying the condition. If it\'s not possible, output \\"NO\\". Otherwise, output \\"YES\\" and the order of nodes. Input format: - The first line contains two integers n (1 ≤ n ≤ 100000) and m (0 ≤ m ≤ 200000) — the number of nodes and edges, respectively. - Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — an edge between nodes u and v. Output format: - If it\'s not possible to arrange the nodes as required, print \\"NO\\". - Otherwise, print \\"YES\\" on the first line, followed by a single line containing the unique order of nodes.","solution":"from collections import deque, defaultdict def can_place_nodes_on_line(n, m, edges): # Create an adjacency list and in-degree count. graph = defaultdict(list) in_degree = {i: 0 for i in range(n)} for u, v in edges: graph[u].append(v) in_degree[v] += 1 # Queue for nodes with in-degree 0. queue = deque() for node in in_degree: if in_degree[node] == 0: queue.append(node) topological_order = [] while queue: node = queue.popleft() topological_order.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) if len(topological_order) == n: return \\"YES\\", topological_order else: return \\"NO\\", [] # Helper function to parse input and structure the response properly def solve(n, m, edges): result, order = can_place_nodes_on_line(n, m, edges) if result == \\"NO\\": return \\"NO\\" else: return \\"YESn\\" + \\" \\".join(map(str, order))"},{"question":"Berland has a series of strategically positioned radar stations along their borders. Each station has a specific range within which it can detect intrusions. The radar stations are positioned linearly, and their ranges do not overlap. For efficient management, it is necessary to calculate the minimal number of radar stations required to cover a certain segment of the border. You are given a number of radar stations, each with a specific start and end point. Given a segment defined by two points, `L` and `R`, your task is to determine the minimal number of radar stations needed to completely cover this segment. If coverage is not possible, return -1. # Input - The first line contains an integer `n`, the number of radar stations. - The following `n` lines each contain two integers `start_i` and `end_i`, representing the range [start_i, end_i] of each radar station. - The last line contains two integers `L` and `R`, representing the segment [L, R] that needs to be covered. # Output - Print one integer, the minimal number of radar stations required to cover the segment [L, R]. If it is not possible to cover the segment, print -1. # Example Input: ``` 4 1 5 2 6 3 8 7 10 2 8 ``` Output: ``` 2 ``` # Explanation In the example, the segment [2, 8] can be covered using the stations with ranges [2, 6] and [3, 8]. Therefore, the minimal number of radar stations required is 2.","solution":"def minimal_radar_stations(n, stations, L, R): Returns the minimal number of radar stations required to cover the segment [L, R]. If coverage is not possible, returns -1. # Sort radar stations by start time and then by end time stations.sort() count = 0 i = 0 covered_till = L while covered_till < R: max_reach = covered_till while i < n and stations[i][0] <= covered_till: max_reach = max(max_reach, stations[i][1]) i += 1 if max_reach == covered_till: # No further coverage possible return -1 covered_till = max_reach count += 1 return count if covered_till >= R else -1"},{"question":"Polycarpus recently got interested in the new area of artificial intelligence and neural networks. As part of his research, he needs to perform a series of transformations on a list of integers. Given a list of integers, he wants to transform this list into a new list by following these operations: 1. **Replace** every integer in the list with the **sum** of its **digits**. 2. Repeat the previous step a specified number of times. Polycarpus is aware that this problem can be computationally intensive for large lists and a high number of transformations, so he needs an efficient solution. Write a function `transform_list(nums: List[int], k: int) -> List[int]` that takes a list of integers `nums` and an integer `k`, representing the number of transformations, and returns the transformed list after `k` operations. # Input - A list of integers `nums` where 1 leq len(nums) leq 10^5 and each integer in the list is between `1` and `10^9`. - An integer `k` where 1 leq k leq 10^3. # Output - A list of integers representing the transformed list after `k` operations. # Example Example 1 **Input:** ```python nums = [18, 29, 39] k = 2 ``` **Output:** ```python [9, 2, 3] ``` **Explanation:** 1. After the first transformation, the list becomes `[9, 11, 12]` (sum of digits of 18 is 9, sum of digits of 29 is 2+9=11, and sum of digits of 39 is 3+9=12). 2. After the second transformation, the list becomes `[9, 2, 3]` (sum of digits of 9 is 9, sum of digits of 11 is 1+1=2, and sum of digits of 12 is 1+2=3). Example 2 **Input:** ```python nums = [999, 1000, 12345] k = 1 ``` **Output:** ```python [27, 1, 15] ``` **Explanation:** 1. After the first transformation, the list becomes `[27, 1, 15]` (sum of digits of 999 is 9+9+9=27, sum of digits of 1000 is 1+0+0+0=1, and sum of digits of 12345 is 1+2+3+4+5=15). # Note - If the input list `nums` is [0], the output will be [0] regardless of the number of operations `k` since the sum of digits of 0 is 0.","solution":"def sum_of_digits(n): Returns the sum of digits of an integer n. return sum(int(digit) for digit in str(n)) def transform_list(nums, k): Transforms the list \'nums\' k times by replacing each integer with the sum of its digits in each transformation. for _ in range(k): nums = [sum_of_digits(num) for num in nums] return nums"},{"question":"Write a program that computes the sum of the following series for a given positive integer n: sum(n) = 1^2 - 2^2 + 3^2 - 4^2 + ... + (-1)^(n+1) * n^2 The single input line contains the positive integer n (1 ≤ n ≤ 10^6). Print the sum(n) in a single line. Example: For n = 3 sum(3) = 1^2 - 2^2 + 3^2 = 1 - 4 + 9 = 6 For n = 4 sum(4) = 1^2 - 2^2 + 3^2 - 4^2 = 1 - 4 + 9 - 16 = -10","solution":"def compute_series_sum(n): Returns the sum of the series 1^2 - 2^2 + 3^2 - 4^2 + ... + (-1)^(n+1) * n^2 series_sum = 0 for i in range(1, n + 1): series_sum += ((-1) ** (i + 1)) * (i ** 2) return series_sum"},{"question":"In a futuristic city, traffic is managed by a powerful central computer system. The city is represented by a grid of streets with intersections aligned in a perfect matrix. Each intersection is identified by its (row, column) coordinates, where the top-left corner is considered as (0,0). Due to a recent update in the traffic management system, the central AI wants to implement a new rule for allowing traffic only on \\"special\\" intersections. An intersection (i, j) is considered special if and only if the sum of its row and column indices is even, i.e., (i + j) % 2 == 0. Given the dimensions of the grid (m rows and n columns), the system needs to generate a list of all \\"special\\" intersections in the grid. Write a function `find_special_intersections(m, n)` that takes two integers m (number of rows) and n (number of columns) as input and returns a list of tuples containing the coordinates of all special intersections in a row-major order (sorted primarily by row, then by column). # Input - Two space-separated integers m and n (1 ≤ m, n ≤ 1000) defining the dimensions of the grid. # Output - A list of tuples where each tuple (i, j) represents the coordinates of a special intersection. # Example ```python >>> find_special_intersections(3, 3) [(0, 0), (0, 2), (1, 1), (2, 0), (2, 2)] ```","solution":"def find_special_intersections(m, n): Returns a list of tuples where each tuple (i, j) represents the coordinates of a special intersection in the grid with dimensions m x n. An intersection (i, j) is considered special if and only if (i + j) % 2 == 0. special_intersections = [(i, j) for i in range(m) for j in range(n) if (i + j) % 2 == 0] return special_intersections"},{"question":"You are given a string containing only lowercase alphabets. Count the frequency of each character in the string and display it in alphabetical order. Input: A single line that contains a string s (1 ≤ |s| ≤ 1000) consisting only of lowercase English letters. Output: For each distinct character in the string s, output the character followed by its frequency, each on a new line in alphabetical order. The order of characters output should be strictly in alphabetical order. Note: You must read the entire input string first and then process it to calculate the frequencies.","solution":"def count_frequency(s): This function takes a string containing only lowercase alphabets and returns a string with each character and its frequency in alphabetical order. from collections import Counter # Count the frequency of each character in the string freq = Counter(s) # Sort the characters sorted_chars = sorted(freq.keys()) # Construct the result result = \'\' for char in sorted_chars: result += f\\"{char}{freq[char]}n\\" return result.rstrip() # remove the extra newline character at the end"},{"question":"You are given an integer array a=a_1,a_2,dots,a_n of length n. An integer subarray a[l dots r] of a is defined as a contiguous segment of the array a. A subarray a[l dots r] is called \\"good\\" if the sum of its elements is divisible by a given integer k. Find the number of \\"good\\" subarrays of a. Note, that even if some subarrays represent the same sum, but have different l and r, they are counted as different subarrays. The first line contains two integers n (1 le n le 100000) and k (1 le k le 10^9) — the length of the array a and the integer k. The second line contains n integers a_1,a_2,dots,a_n (-10^9 le a_i le 10^9) — the elements of the array a. Print the number of \\"good\\" subarrays of a. In the first example, the [l, r] pairs corresponding to \\"good\\" subarrays are: In the second example, several subarrays of a are \\"good\\" subarrays. Note, that while subarray a[1 dots 2] and a[3 dots 4] both define the same sum \\"0\\", they are still counted as different subarrays if they have different starting and ending indices.","solution":"def count_good_subarrays(n, k, a): from collections import defaultdict prefix_sum = 0 remainder_count = defaultdict(int) remainder_count[0] = 1 good_subarray_count = 0 for num in a: prefix_sum += num rem = prefix_sum % k if rem < 0: # handle negative remainders rem += k good_subarray_count += remainder_count[rem] remainder_count[rem] += 1 return good_subarray_count"},{"question":"Valid Palindrome with Removal A string is called a palindrome if it reads the same backward as forward. Given a string `s`, you are allowed to remove at most one character from `s`. Write a function to determine if you can make `s` a palindrome with at most one removal. Your function should return `True` if the string can be converted to a palindrome by removing at most one character, otherwise return `False`. Input - A single string `s` where `1 <= len(s) <= 10^5` consisting of lowercase English letters. Output - Boolean value `True` or `False`. Examples ```python Example 1: Input: s = \\"abca\\" Output: True Explanation: You can remove the character \'c\' to get \\"aba\\", which is a palindrome. Example 2: Input: s = \\"racecar\\" Output: True Explanation: The string is already a palindrome. Example 3: Input: s = \\"abcdef\\" Output: False Explanation: Removing any one character from the string does not result in a palindrome. ``` Constraints - The length of the string is between 1 and 100,000. - The input string consists of lowercase English letters only. Function Signature ```python def valid_palindrome(s: str) -> bool: # your code here ```","solution":"def valid_palindrome(s: str) -> bool: def is_palindrome_range(i, j): return all(s[k] == s[j-k+i] for k in range(i, j)) left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: return is_palindrome_range(left+1, right) or is_palindrome_range(left, right-1) left += 1 right -= 1 return True"},{"question":"You are given a string containing a mathematical expression that consists of non-negative integers, addition operators (\'+\'), and multiplication operators (\'*\'). Your task is to compute the value of the expression following the correct order of operations (PEMDAS/BODMAS rules). Do not use any built-in functions that directly evaluate the expression (like eval() in Python). # Input - A single line string containing the expression. The string will only contain digits (\'0\'-\'9\'), \'+\', \'*\'. The length of the string will not exceed 100 characters and the given expression is guaranteed to be syntactically correct. # Output - A single integer that is the result of evaluating the given expression following the correct order of operations. # Example: Input: ``` 3+5*2 ``` Output: ``` 13 ``` Input: ``` 6*7+2*3 ``` Output: ``` 48 ``` Input: ``` 8+9*3*2+1 ``` Output: ``` 63 ``` # Hint: To solve this problem, first evaluate all multiplications in the expression, then sum the results of these multiplications along with any remaining additions.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing non-negative integers, \'+\', and \'*\' following the correct order of operations. # Split expression by \'+\' to handle the addition separately additive_parts = expression.split(\'+\') # Evaluate each part, handling multiplication within each part sum_result = 0 for part in additive_parts: multiplicative_parts = part.split(\'*\') product_result = 1 for factor in multiplicative_parts: product_result *= int(factor) sum_result += product_result return sum_result"},{"question":"You are given a sequence of positive integers. Your task is to find the smallest integer that can replace any one of the elements in the sequence so that the (1-based index) position of the first occurrence of the maximum element in the new sequence remains unchanged even if the value of this element changes. For example, if the sequence is `5, 3, 5, 2, 5` and you wish to replace the third `5` with some other value, the first occurrence of the maximum element `5` should still be at position 1 after the replacement. Input: - The first line contains an integer `n` (1 ≤ n ≤ 10^5), the number of elements in the sequence. - The second line contains `n` positive integers separated by spaces, representing the sequence. Output: - Print the smallest integer that can replace any one of the elements while maintaining the position of the first occurrence of the maximum element in the new sequence. Example: Input: ``` 5 5 3 5 2 5 ``` Output: ``` 1 ``` Explanation: The first occurrence of the maximum element `5` is at position 1. You can replace any of the subsequent `5`s without changing the position of the first maximum. The smallest integer you can use for the replacement is `1`.","solution":"def smallest_replacement_to_keep_max_position(n, sequence): Finds the smallest integer that can replace any one of the elements in the sequence such that the position of the first occurrence of the maximum element remains unchanged. max_element = max(sequence) first_max_index = sequence.index(max_element) # 0-based index of first occurrence of max element # We need to return the smallest integer that doesn\'t change the first occurrence # Smallest positive integer that can be used is 1 return 1"},{"question":"In a forest, there are n trees situated in a row. Each tree has a certain height. The trees are numbered from 1 to n, and the height of the tree at position i is h_i. You are provided with an integer k, and your task is to find the minimum number of trees that need to be cut to ensure that for every pair of adjacent trees, the difference in their heights is at most k. To cut a tree means to remove it from the row. After cutting a tree, the trees that remain in the row remain in their original order, i.e., if you cut the tree at position i, then the tree that was originally at position i+1 will now be considered adjacent to the tree that was at position i-1. The first line contains two space-separated integers n and k (1 leq n leq 100,000, 0 leq k leq 1,000,000) — the number of trees and the maximum allowed difference in height between two adjacent trees, respectively. The second line contains n space-separated integers h_1, h_2, ldots, h_n (1 leq h_i leq 1,000,000), the heights of the trees in the order they appear in the row. Output a single integer — the minimum number of trees that need to be cut to satisfy the condition. # Example **Input:** ``` 7 3 1 5 3 9 10 4 6 ``` **Output:** ``` 3 ``` **Explanation:** One possible solution is to cut the trees at positions 2, 4, and 5 (1-indexed). This leaves the trees [1, 3, 4, 6], where each adjacent pair of trees has a height difference of at most 3. There may be other valid solutions as well.","solution":"def min_trees_cut(n, k, heights): # dp array where dp[i] is the minimum number of cuts up to the i-th tree dp = [0] * n # Initialize the dp array for i in range(1, n): dp[i] = dp[i-1] if abs(heights[i] - heights[i-1]) > k: # Need to cut one tree since the last pair (i-1, i) doesn\'t satisfy the condition dp[i] += 1 return dp[-1]"},{"question":"Write a function `findCriticalNodes` to identify the critical nodes in an undirected graph. A node is considered critical if removing that node and its associated edges increases the number of connected components in the graph. The function should take the following input: 1. `n` — an integer representing the number of nodes in the graph (1 ≤ n ≤ 10^5). 2. `edges` - a list of pairs of integers, each representing an undirected edge connecting two nodes. All nodes are numbered from 1 to n. The output should be a list of integers representing the critical nodes in ascending order. # Example Input ``` n = 7 edges = [(1, 2), (2, 3), (1, 3), (3, 4), (4, 5), (5, 6), (6, 7)] ``` Output ``` [3, 4, 5, 6] ``` # Explanation The graph described by the edges can be visualized as follows: ``` 1 -- 2 | / | 3 -- 4 -- 5 -- 6 -- 7 ``` Removing node `3` splits the graph into two components: {1, 2} and {4, 5, 6, 7}. Similarly, removing nodes `4`, `5`, or `6` all increase the number of connected components, making them critical nodes. # Constraints - Consider using Depth First Search (DFS) to identify articulation points. - Ensure the solution works efficiently within the constraints given (up to 10^5 nodes).","solution":"def findCriticalNodes(n, edges): def dfs(node, parent, disc, low, time, graph, articulation_points): children = 0 disc[node] = low[node] = time[0] time[0] += 1 for neighbor in graph[node]: if disc[neighbor] == -1: # If the neighbor is not visited children += 1 dfs(neighbor, node, disc, low, time, graph, articulation_points) low[node] = min(low[node], low[neighbor]) if parent is None and children > 1: articulation_points.add(node) if parent is not None and low[neighbor] >= disc[node]: articulation_points.add(node) elif neighbor != parent: # Back edge case low[node] = min(low[node], disc[neighbor]) graph = {i: [] for i in range(1, n + 1)} for u, v in edges: graph[u].append(v) graph[v].append(u) disc = [-1] * (n + 1) low = [-1] * (n + 1) time = [0] articulation_points = set() for i in range(1, n + 1): if disc[i] == -1: dfs(i, None, disc, low, time, graph, articulation_points) return sorted(articulation_points)"},{"question":"You are working on the back-end of a competitive online game. Your task is to implement a feature that matches players for a game session based on their skill levels. The game has n registered players, numbered from 1 to n, each of whom has a specific skill level. A game session consists of exactly three players whose combined skill level is exactly equal to a given integer k. You need to find the number of unique game sessions that can be formed. Note that players cannot be chosen more than once for the same game session and the order in which players are selected does not matter. The first line contains two space-separated integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ 3000) — the number of players and the required total skill level for a game session. The second line contains n space-separated integers representing the skill levels of the players. Print a single integer — the number of unique game sessions that can be formed, where each game session\'s combined skill levels equal k. In the first sample, the unique game sessions that can be formed are (1, 2, 3), (1, 3, 2), and (2, 3, 1), but since the order of selection does not matter, they all count as one unique game session. In the second sample, no unique game sessions can be formed. Example: Input: 5 6 1 2 3 4 5 Output: 1","solution":"from itertools import combinations def find_unique_game_sessions(n, k, skill_levels): count = 0 for comb in combinations(skill_levels, 3): if sum(comb) == k: count += 1 return count"},{"question":"You are given two arrays `houses` and `heaters` where `houses[i]` represents the position of house `i` and `heaters[j]` represents the position of heater `j` along a number line. Both arrays are sorted in non-decreasing order. Your task is to find the minimum radius `r` such that each house can be heated by at least one heater within radius `r`. The constraints are: - 1 ≤ `houses.length`, `heaters.length` ≤ 10^5 - -10^9 ≤ `houses[i]`, `heaters[j]` ≤ 10^9 # Input - The first line contains an integer `n`, the number of houses. - The second line contains `n` integers representing the positions of the houses. - The third line contains an integer `m`, the number of heaters. - The fourth line contains `m` integers representing the positions of the heaters. # Output - Output a single integer representing the minimum radius `r` that ensures all houses can be heated. # Example Input ``` 3 1 2 3 2 2 4 ``` Output ``` 1 ``` # Explanation - For the given input, the minimum required heating radius is `1`. The heater at position `2` can heat the houses at positions `1` and `2`, and the heater at position `4` can heat the house at position `3` within a radius of `1`. # Note You can assume that there is always at least one solution for the given problem constraints. The solution should aim to be efficient in terms of both time and space complexity.","solution":"def find_radius(houses, heaters): Find the minimum radius required to heat all houses. :param houses: List[int], positions of houses sorted in non-decreasing order :param heaters: List[int], positions of heaters sorted in non-decreasing order :return: int, the minimum radius required import bisect heaters.sort() radius = 0 for house in houses: # Find the position to insert the house in the sorted heaters list pos = bisect.bisect_left(heaters, house) # Calculate distances to the nearest heaters left_heater_dist = float(\'inf\') if pos == 0 else house - heaters[pos - 1] right_heater_dist = float(\'inf\') if pos == len(heaters) else heaters[pos] - house # The closest heater distance min_heater_dist = min(left_heater_dist, right_heater_dist) radius = max(radius, min_heater_dist) return radius"},{"question":"Given an undirected graph with `n` nodes (numbered from 1 to `n`) and `m` edges, you need to answer several queries about the graph. Each of the nodes has an initial color of `0` (uncolored). You will be given three types of queries: 1. Paint a node with a specified color. 2. Remove the color from a specified node, making it uncolored (color `0`). 3. Retrieve the unique set of colors that can be reached from a specified starting node within the same connected component (all nodes that are reachable from each other through the graph without passing through an uncolored node). Input format: - The first line contains two integers `n` and `m` (`1 ≤ n, m ≤ 10^5`), the number of nodes and edges in the graph. - The next `m` lines each contain two integers `u` and `v` (`1 ≤ u, v ≤ n`), meaning there is an edge between nodes `u` and `v`. - The following lines contain queries in the format `t_i x_i c_i`, where `t_i` is the type of query (`t_i ∈ {1, 2, 3}`), `x_i` is the node related to the query (`1 ≤ x_i ≤ n`), and `c_i` is the color for painting (only applicable for paint queries, `c_i ∈ {1, 2, ..., k}` where `k` is the number of different colors). Output format: For each query of type `3`, output a line with the number of unique colors reachable from node `x_i`. Example: ``` Input: 5 4 1 2 1 3 3 4 4 5 6 1 1 2 1 3 3 1 4 4 3 1 0 2 1 0 3 3 0 Output: 3 2 ``` Explanation of the example: - We first paint node 1 with color 2. - Then, we paint node 3 with color 3. - We also paint node 4 with color 4. - The first query of type `3` asks for the unique set of colors reachable from node 1, which are `2`, `3`, and `4`. - We then remove the color from node 1. - The second query of type `3` asks for the unique set of colors reachable from node 3, which are `3` and `4`.","solution":"from collections import defaultdict, deque def process_graph(n, m, edges, queries): graph = defaultdict(list) colors = {} # Build the graph for u, v in edges: graph[u].append(v) graph[v].append(u) results = [] for query in queries: if query[0] == 1: # Paint a node with a specified color colors[query[1]] = query[2] elif query[0] == 2: # Remove the color from a specified node if query[1] in colors: del colors[query[1]] elif query[0] == 3: # Retrieve the unique set of colors reachable from a node start = query[1] visited = set() queue = deque([start]) reachable_colors = set() while queue: node = queue.popleft() if node in visited: continue visited.add(node) if node in colors and colors[node] != 0: reachable_colors.add(colors[node]) for neighbor in graph[node]: if neighbor not in visited and (neighbor not in colors or colors[neighbor] != 0): queue.append(neighbor) results.append(len(reachable_colors)) return results # Example usage: # n, m = 5, 4 # edges = [(1, 2), (1, 3), (3, 4), (4, 5)] # queries = [(1, 1, 2), (1, 3, 3), (1, 4, 4), (3, 1, 0), (2, 1, 0), (3, 3, 0)] # print(process_graph(n, m, edges, queries)) # Output: [3, 2]"},{"question":"You are given an undirected tree with n nodes numbered from 1 to n. Each node has a value assigned to it represented by an array of integers values where values[i] is the value of the ith node. You need to find the length of the longest path in the tree such that the values of the nodes on this path form a strictly increasing sequence. The first line contains a single integer n (1 ≤ n ≤ 10,000), the number of nodes in the tree. The second line contains n space-separated integers values[1], values[2], ..., values[n] (1 ≤ values[i] ≤ 100,000). Each of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n) representing an edge between nodes u and v. Print a single integer, the length of the longest strictly increasing path in the tree. **Sample Input** ``` 5 3 1 4 2 5 1 2 1 3 3 4 3 5 ``` **Sample Output** ``` 3 ``` **Explanation** In the given example, the longest path with strictly increasing values is from node 2 to node 1 to node 3 to node 5, which has a length of 3 (path 2 -> 3 -> 5).","solution":"def longest_increasing_path(n, values, edges): from collections import defaultdict, deque # Build the adjacency list tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Perform DFS and use dynamic programming to calculate the longest increasing path def dfs(node, parent): dp[node][1] = 1 # base case: every single node can be a path by itself max_path = 1 for neighbor in tree[node]: if neighbor == parent: continue child_path = dfs(neighbor, node) if values[neighbor-1] > values[node-1]: max_path = max(max_path, child_path + 1) dp[node][1] = max(dp[node][1], max_path) return dp[node][1] # Initialize DP table and result path length variable dp = defaultdict(lambda: defaultdict(int)) longest_path_length = 1 for i in range(1, n + 1): if dp[i][1] == 0: # If the node hasn\'t been visited longest_path_length = max(longest_path_length, dfs(i, -1)) return longest_path_length"},{"question":"You have been tasked with implementing a simple command-line utility that merges multiple files into a single output file. This utility should take an arbitrary number of input file paths, read the contents of each file, and then write the combined content into an output file in the order the files were specified. # Input - The first line contains a single integer `n` (1 ≤ n ≤ 1000), indicating the number of input files. - The next `n` lines each contain a string, representing the file path to each of the `n` input files. - The next line contains a string, representing the file path to the output file. # Output - The program should not produce any output on standard output. All output should be written to the specified output file. # Example For example, consider you have the following files: - `file1.txt` containing: ``` Hello ``` - `file2.txt` containing: ``` World ``` If the input is: ``` 2 file1.txt file2.txt output.txt ``` The content of `output.txt` after execution should be: ``` Hello World ``` # Constraints - You can assume all file paths are valid and the files are accessible. # Implementation Write a function `merge_files(input_count, input_paths, output_path)` where: - `input_count` is an integer representing the number of input files. - `input_paths` is a list of strings where each string is a file path to an input file. - `output_path` is a string representing the file path to the output file. Implement the function to read all input files and write their content into the specified output file in the order given. # Example Implementation in Python ```python def merge_files(input_count, input_paths, output_path): with open(output_path, \'w\') as outfile: for input_file in input_paths: with open(input_file, \'r\') as infile: for line in infile: outfile.write(line) # Example usage n = 2 input_files = [\'file1.txt\', \'file2.txt\'] output_file = \'output.txt\' merge_files(n, input_files, output_file) ```","solution":"def merge_files(input_count, input_paths, output_path): Merges the content of multiple input files into a single output file. Args: input_count (int): The number of input files. input_paths (list of str): List of file paths to the input files. output_path (str): The file path to the output file. Writes the combined content of the input files to the output file. with open(output_path, \'w\') as outfile: for input_file in input_paths: with open(input_file, \'r\') as infile: for line in infile: outfile.write(line)"},{"question":"One day Alice was given an interesting challenge by her programming teacher. She needs to analyze some strings and determine if they follow a certain pattern. The challenge involves reading multiple queries and performing checks on the given strings. You are given a set of s strings and q queries. Each string contains lowercase English letters only and the queries require you to check specific substrings. A query is given in the form of three numbers i, l, r. For each query, you need to determine if the substring of the i^{th} string that starts at position l and ends at position r (inclusive) is a palindrome. A palindrome is a string that reads the same forward and backward. The first line contains two integers s and q (1 leq s, q leq 10^5) — the number of strings and the number of queries, respectively. Each of the next s lines contains a single string. The length of each string is between 1 and 10^5 characters. It is guaranteed that the total length of all strings does not exceed 2 cdot 10^5 characters. Each of the following q lines contains three integers i, l, r ((1 leq i leq s, 1 leq l leq r leq text{length of the } i^{th} text{ string})) — the description of the query. Output \\"yes\\" if the specified substring is a palindrome, otherwise output \\"no\\". Note that the positions l and r are one-based indices. # Example Input: ``` 3 4 abcba abccba abcd 1 1 5 2 1 6 3 1 4 1 2 4 ``` Output: ``` yes yes no no ``` Explanation: - For the first query, the substring of the first string from position 1 to 5 is \\"abcba\\", which is a palindrome. - For the second query, the substring of the second string from position 1 to 6 is \\"abccba\\", which is a palindrome. - For the third query, the substring of the third string from position 1 to 4 is \\"abcd\\", which is not a palindrome. - For the fourth query, the substring of the first string from position 2 to 4 is \\"bcb\\", which is not a palindrome.","solution":"def is_palindrome(s): return s == s[::-1] def process_queries(strings, queries): results = [] for i, l, r in queries: substring = strings[i-1][l-1:r] if is_palindrome(substring): results.append(\\"yes\\") else: results.append(\\"no\\") return results"},{"question":"Polycarp has a favorite mathematical puzzle game that he loves to play. In this game, he is given a sequence of integers and his task is to find the maximum possible number of pairs (i, j) such that: - i < j - The sum of the elements at positions i and j is a multiple of `k`. Polycarp finds this game fascinating and would like your help to write a program to solve the problem efficiently. # Input The first line of input contains two integers `n` and `k` (1 ≤ n ≤ 2 * 10^5, 1 ≤ k ≤ 10^9) — the size of the sequence and the divisor. The second line contains `n` integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the sequence. # Output Print one integer — the maximum number of pairs (i, j) such that i < j and the sum of the elements at positions i and j is a multiple of `k`. # Examples Example 1 Input: ``` 5 3 1 2 3 4 5 ``` Output: ``` 4 ``` Example 2 Input: ``` 4 2 2 4 6 8 ``` Output: ``` 6 ``` Example 3 Input: ``` 3 5 10 15 20 ``` Output: ``` 3 ``` Note: - In the first example, the pairs are (1, 2), (1, 4), (2, 3), (4, 5). - In the second example, the pairs are all possible since all sums are even. - In the third example, all pairs are valid since all sums are multiples of 5.","solution":"def max_pairs_mod_k(n, k, arr): Returns the maximum number of pairs (i, j) such that i < j and the sum of elements at positions i and j is a multiple of k. # Frequency array to count remainders remainder_count = [0] * k # Count the occurrences of each remainder when divided by k for num in arr: remainder_count[num % k] += 1 # Initialize pair count count = 0 # Pairs of numbers with remainder 0 (pairing within these numbers) count += remainder_count[0] * (remainder_count[0] - 1) // 2 # Iterate for remainders in range 1 to k//2 for r in range(1, (k // 2) + 1): if r == k - r: # Special case for exactly half of k count += remainder_count[r] * (remainder_count[r] - 1) // 2 else: count += remainder_count[r] * remainder_count[k - r] return count"},{"question":"A palindrome is a string that reads the same forward and backward. A substring is any continuous sequence of characters within a string. You are given a string S of length n. Your task is to find the sum of the lengths of all distinct palindromic substrings of S. Two substrings are considered distinct if they start or end at different positions in the string, even if they are identical. For example, if S = \\"ababa\\", the distinct palindromic substrings are \\"a\\", \\"b\\", \\"aba\\", \\"bab\\", and \\"ababa\\". Their lengths are 1, 1, 3, 3, and 5 respectively. The sum of these lengths is 13. # Input - The first line contains an integer n (1 ≤ n ≤ 2000), the length of the string. - The second line contains a string S of length n, consisting of lowercase English letters. # Output Output a single integer, the sum of the lengths of all distinct palindromic substrings of S. # Example Input ``` 5 ababa ``` Output ``` 13 ``` # Notes In the example, the distinct palindromic substrings are: - \\"a\\" (length 1) - \\"b\\" (length 1) - \\"aba\\" (length 3) - \\"bab\\" (length 3) - \\"ababa\\" (length 5) The sum of their lengths is 1 + 1 + 3 + 3 + 5 = 13.","solution":"def sum_of_palindromic_substring_lengths(n, S): Return the sum of the lengths of all distinct palindromic substrings of S. def is_palindrome(s): return s == s[::-1] palindromic_substrings = set() for i in range(n): for j in range(i, n): substring = S[i:j+1] if is_palindrome(substring): palindromic_substrings.add(substring) return sum(len(p) for p in palindromic_substrings) # Example usage: # n = 5 # S = \\"ababa\\" # print(sum_of_palindromic_substring_lengths(n, S)) # Output: 13"},{"question":"You are given an array of integers and a target sum. Your task is to find all unique pairs in the array that add up to the target sum. A pair should be represented as [a, b] where a and b are integers that add up to the target sum, and a <= b. The output should be a list of pairs sorted in ascending order. # Input: - The first line contains two integers, N and S. N (1 ≤ N ≤ 10^5) represents the number of integers in the array, and S (|S| ≤ 10^9) represents the target sum. - The second line contains N integers representing the elements of the array. Each element a_i (|a_i| ≤ 10^9) is an integer. # Output: - An array of pairs in ascending order where each pair [a, b] satisfies a + b = S and a ≤ b. If no such pairs exist, output an empty array. # Example: **Input:** ``` 6 7 1 2 3 4 5 6 ``` **Output:** ``` [[1, 6], [2, 5], [3, 4]] ``` **Explanation:** - Pairs that add up to 7 are: - [1, 6] - [2, 5] - [3, 4] All pairs are arranged in ascending order and no duplicates exist.","solution":"def find_pairs_with_sum(N, S, array): Find all unique pairs in the array that add up to the target sum S. Parameters: N (int): Number of integers in the array. S (int): Target sum. array (list of int): List of integers in the array. Returns: list of list of int: List of pairs [a, b] where a + b equals S and a <= b. seen = set() pairs = set() for num in array: complement = S - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) return sorted([list(pair) for pair in pairs])"},{"question":"You are given a string consisting of lowercase English letters. You want to rearrange the string such that no two adjacent characters are the same. If such an arrangement is possible, return any valid rearrangement. If not, return \\"Not possible\\". **Function Signature:** ```python def rearrange_string(s: str) -> str: ``` **Input:** - A single string `s` consisting of lowercase English letters (1 ≤ len(s) ≤ 10^5). **Output:** - A string representing the rearranged string with no two adjacent characters being the same. If no such arrangement is possible, return \\"Not possible\\". **Example:** ```python assert rearrange_string(\\"aab\\") in [\\"aba\\"] assert rearrange_string(\\"aaab\\") == \\"Not possible\\" assert rearrange_string(\\"abcabc\\") in [\\"abcabc\\", \\"acbacb\\", \\"bacbac\\", \\"bacabc\\", \\"cbacba\\", \\"cbacab\\", ...] # multiple correct answers possible ``` **Explanation:** - For the first example, \\"aab\\" can be rearranged to \\"aba\\". - For the second example, \\"aaab\\" cannot be rearranged to meet the criteria, so the function should return \\"Not possible\\". - For the third example, \\"abcabc\\" can be rearranged in multiple valid ways where no two adjacent characters are the same.","solution":"from heapq import heappush, heappop from collections import Counter def rearrange_string(s: str) -> str: # Count the occurrences of each character counter = Counter(s) max_heap = [] # Add all characters to the max heap (negative count for max heap in python) for char, freq in counter.items(): heappush(max_heap, (-freq, char)) result = [] prev_count, prev_char = 0, \'\' # Greedily select the most frequent character that is not the same as the previous one while max_heap: count, char = heappop(max_heap) result.append(char) if prev_count < 0: heappush(max_heap, (prev_count, prev_char)) prev_count = count + 1 prev_char = char rearranged = \'\'.join(result) return rearranged if len(rearranged) == len(s) else \\"Not possible\\""},{"question":"You are given a tree with `n` nodes, where each node has some value. You need to find the maximum path sum in the tree. A path is defined as any sequence of nodes from some starting node to any node in the tree following the parent-child connections. The path must contain at least one node and does not need to go through the root. Each node is valued with an integer, and node values can be negative. Input: - The first line contains an integer `n` (1 ≤ n ≤ 10000), the number of nodes in the tree. - The second line contains `n` integers, where the i-th integer represents the value of the i-th node (node values are in the range [-1000, 1000]). - Each of the next `n-1` lines contains two integers u and v (1 ≤ u, v ≤ n), which means that node `u` and node `v` are connected by an edge. Output: - Print the maximum path sum that can be achieved. Example: ``` Input: 5 1 2 3 -1 -3 1 2 1 3 2 4 2 5 Output: 6 Explanation: The maximum path sum is achieved by the path 4 -> 2 -> 1 -> 3, which gives the sum 1 + 2 + 3 = 6. ```","solution":"class TreeNode: def __init__(self, value): self.value = value self.children = [] def build_tree(values, edges): nodes = [TreeNode(value) for value in values] for u, v in edges: nodes[u-1].children.append(nodes[v-1]) nodes[v-1].children.append(nodes[u-1]) return nodes def find_max_path_sum(root): max_sum = float(\'-inf\') def dfs(node, parent): nonlocal max_sum max_child_sum = 0 for child in node.children: if child is not parent: child_max_sum = dfs(child, node) if child_max_sum > 0: max_child_sum += child_max_sum max_sum = max(max_sum, node.value + max_child_sum) return node.value + max_child_sum dfs(root, None) return max_sum def max_path_sum(n, values, edges): if n == 0: return 0 if n == 1: return values[0] nodes = build_tree(values, edges) return find_max_path_sum(nodes[0])"},{"question":"A company has a list of N projects, each with a start date and an end date. A project can only be worked on during its specified time frame. Given that each project can only be worked on by one employee at a time, your task is to find the minimum number of employees required to handle all projects without any overlap in their schedules. The input format is as follows: - The first line contains a single integer N (1 ≤ N ≤ 100,000) — the number of projects. - The following N lines describe the projects. Each project is described by two integers S and E (1 ≤ S ≤ E ≤ 10^9), where S is the start date and E is the end date of the project. The output should be a single integer representing the minimum number of employees required to handle all projects without time conflicts. Example: Input: ``` 3 1 3 2 5 4 6 ``` Output: ``` 2 ``` Explanation: Two employees are required because while the first employee handles the project from 1 to 3, the second one can handle part of the project from 2 to 5. Then, they can switch tasks so that the first employee handles the project from 4 to 6 after completing theirs.","solution":"import heapq def min_employees_required(projects): Returns the minimum number of employees required to handle all projects without overlapping schedules. projects: List of tuples, where each tuple contains the start and end dates of a project. if not projects: return 0 # Sort the projects by their start time projects.sort(key=lambda x: x[0]) # Min-heap to keep track of end times of projects currently being handled min_heap = [] for start, end in projects: # If the earliest project in the min-heap has ended before the current project starts, pop it from the heap if min_heap and min_heap[0] <= start: heapq.heappop(min_heap) # Push the end time of the current project into the heap heapq.heappush(min_heap, end) # The size of the heap is the minimum number of employees required return len(min_heap)"},{"question":"You are given a list of numbers representing the monthly sales figures of a company. The company wants to analyze its sales trends and determine the number of months where the sales figure was higher than the average sales figure of the entire year. Write a function `count_above_average_sales(sales: List[int]) -> int` that takes in a list of integers where each integer represents the sales figure for a particular month. Your function should return the count of months where the sales figures were above the annual average. # Input: - A list of 12 integers where each integer represents the monthly sales figure. The sales figure for each month is a non-negative integer (0 ≤ sales[i] ≤ 10000). # Output: - A single integer representing the number of months with sales higher than the average sales figure of the year. # Sample Input: ```python sales = [1200, 1300, 1150, 1400, 1700, 1600, 1450, 1550, 1600, 1750, 1850, 1900] ``` # Sample Output: ``` 7 ``` # Explanation: The average annual sales figure is frac{1200 + 1300 + 1150 + 1400 + 1700 + 1600 + 1450 + 1550 + 1600 + 1750 + 1850 + 1900}{12} ≈ 1500 The months with sales figures above 1500 are: - April (1400) - May (1700) - June (1600) - August (1550) - September (1600) - October (1750) - November (1850) - December (1900) Thus, the count of such months is 8.","solution":"from typing import List def count_above_average_sales(sales: List[int]) -> int: Returns the number of months where the sales figure was higher than the average sales figure of the year. average_sales = sum(sales) / 12 return sum(1 for sale in sales if sale > average_sales)"},{"question":"You are given a list of integers representing the ages of participants in a coding competition. You need to form the largest team possible such that the age difference between the youngest and the oldest member is not more than 5 years. Write a program to determine the maximum number of participants that can be included in a team satisfying the aforementioned condition. The first line of the input contains one integer n (1 le n le 10^5) — the number of participants. The second line of the input contains n integers a_1, a_2, dots, a_n (1 le a_i le 100), where a_i is the age of the i-th participant. Print a single integer — the maximum number of participants in a team satisfying the given condition. # Example: Input: 6 1 3 5 7 9 11 Output: 3 Description of the example: The largest team that can be formed includes participants with ages [1, 3, 5] or [7, 9, 11]. Both sets have members with an age difference of no more than 5 years.","solution":"def max_team_size(n, ages): Determines the maximum number of participants that can form a team where the difference between the youngest and the oldest member is not more than 5 years. Arguments: n -- the number of participants ages -- list of ages of the participants Returns: Maximum number of participants in a team satisfying the given condition ages.sort() max_size = 0 left = 0 for right in range(n): while ages[right] - ages[left] > 5: left += 1 max_size = max(max_size, right - left + 1) return max_size"},{"question":"Write a program that takes a list of integers and outputs the second largest number. The input will consist of two lines: the first line contains an integer `n` (2 ≤ n ≤ 100) representing the number of integers in the list. The second line contains `n` space-separated integers, each between -1000 and 1000, inclusive. Output the second largest number in the list. Note: If there are duplicate values, ensure the second largest is distinct. For example, in the list [3, 3, 2], the second largest should be 2.","solution":"def second_largest_number(n, num_list): Returns the second largest distinct number from the list. unique_nums = list(set(num_list)) if len(unique_nums) < 2: raise ValueError(\\"List must contain at least two distinct numbers.\\") unique_nums.sort() return unique_nums[-2] # To demonstrate usage # n = 5 # num_list = [2, 3, 6, 6, 5] # result = second_largest_number(n, num_list) # print(result) # Output should be 5"},{"question":"Peter is participating in a fun programming challenge. He is given an encoded string that consists of lowercase Latin letters. In order to decode the string, Peter needs to replace each letter with its lexicographically next letter in the alphabet. The letter \'z\' wraps around to \'a\'. For example: - The encoded string \\"abc\\" should be decoded to \\"bcd\\". - The encoded string \\"xyz\\" should be decoded to \\"yza\\". Your task is to help Peter by writing a function to decode the given string. **Input:** - The first line contains an integer T (1 le T le 1000), the number of test cases. - The next T lines each contain a single string s (1 le |s| le 200) representing the encoded string. **Output:** - For each test case, output the decoded string. **Example:** ``` Input 3 abc xyz hello Output bcd yza ifmmp ``` Complete the function `decode_strings` that takes the number of test cases and the list of encoded strings, and returns the list of decoded strings. ```python def decode_strings(T, strings): # Your code here # Example usage: print(decode_strings(3, [\\"abc\\", \\"xyz\\", \\"hello\\"])) # Output should be: # [\'bcd\', \'yza\', \'ifmmp\'] ```","solution":"def decode_strings(T, strings): def next_letter(letter): return \'a\' if letter == \'z\' else chr(ord(letter) + 1) decoded_strings = [] for s in strings: decoded_string = \'\'.join(next_letter(c) for c in s) decoded_strings.append(decoded_string) return decoded_strings # Example usage: # print(decode_strings(3, [\\"abc\\", \\"xyz\\", \\"hello\\"])) # Output: [\'bcd\', \'yza\', \'ifmmp\']"},{"question":"You are given an array a of length n. Over a series of q queries, you need to process some segment operations. Each query consists of a couple of integers l and r. Each segment operation requires you to find the maximum value in the subarray between the 1-based indices from l to r inclusive, and then add a value k to each element in that subarray. Your task is to keep track of the resulting array after all queries have been processed. In other words, for each query, perform the following steps: 1. Find the maximum value in the subarray a[l...r]. 2. Add the value of that maximum element to each element in the subarray a[l...r]. Print the final state of the array after all queries. The first line contains a single integer n (1 le n le 10^5) — the length of the array. The second line contains n integers a_i (1 le a_i le 10^6) — the elements of the array. The third line contains a single integer q (1 le q le 10^5) — the number of queries. The next q lines contain two integers l and r each (1 le l le r le n) — the description of the corresponding query. Print the modified array after all queries have been processed. # Example Input: ``` 5 1 2 3 4 5 3 1 3 2 4 1 5 ``` Output: ``` 1 3 6 8 10 ``` Explanation: 1. For the first query (1, 3), the maximum element in the subarray [1, 3] is 3. Adding this element to the subarray modifies the array to [4, 5, 6, 4, 5]. 2. For the second query (2, 4), the maximum element in the subarray [2, 4] is 6. Adding this element to the subarray modifies the array to [4, 11, 12, 10, 5]. 3. For the third query (1, 5), the maximum element in the subarray [1, 5] is 12. Adding this element to the subarray modifies the array to [16, 23, 24, 22, 17]. Note: Make sure to take into account efficient approaches of finding maximum elements in subarrays as well as dynamic updates to handle large input sizes within reasonable time limits.","solution":"def process_queries(n, array, queries): Process a series of range queries to find the maximum in the subarray and add that value to each element in the subarray. Parameters: n (int): Length of the array. array (list of int): Array of integers. queries (list of tuple of int): List of queries, where each query is a tuple (l, r). Returns: list of int: The modified array after processing all queries. for l, r in queries: subarray_max = max(array[l-1:r]) for i in range(l-1, r): array[i] += subarray_max return array"},{"question":"In a faraway land, there is a famous computer scientist named Riveta who loves strings. Riveta has recently come up with a fascinating new problem related to string manipulation. Given a string s containing only lowercase English letters, Riveta is interested in finding the longest substring that consists of consecutive identical characters. For instance, in the string \\"aaabbbcc\\", both \\"aaa\\" and \\"bbb\\" are substrings of consecutive identical characters, but \\"aaa\\" is the longer one. Your task is to write a function that takes the string s as input and returns the longest substring which consists of consecutive identical characters. If there are multiple such substrings with the same length, return the first one encountered. Write a function: ```python def longest_consecutive_substring(s: str) -> str: ``` # Input - A single string s of length between 1 and 1000, consisting only of lowercase English letters. # Output - Return the longest substring of s that contains consecutive identical characters. # Example Input ```python s = \\"aaabbbcc\\" ``` Output ```python \\"aaa\\" ``` Input ```python s = \\"abcd\\" ``` Output ```python \\"a\\" ``` Note: In the second example, all substrings contain different letters, so the function returns the first letter \\"a\\".","solution":"def longest_consecutive_substring(s: str) -> str: if not s: return \\"\\" max_len = 1 current_char = s[0] current_len = 1 max_substring = s[0] for i in range(1, len(s)): if s[i] == s[i-1]: current_len += 1 if current_len > max_len: max_len = current_len max_substring = s[i-current_len + 1:i+1] else: current_len = 1 return max_substring"},{"question":"You are given an array of integers and an integer k. A sliding window of size k is moving from the left of the array to the right. You can only see the k numbers in the window. Each time the sliding window moves right by one position, print the maximum number of the k numbers in the window. Write a function to solve this problem: ```python def max_sliding_window(nums: List[int], k: int) -> List[int]: pass ``` # Input - An array of integers `nums` [1 ≤ len(nums) ≤ 10^5] - An integer `k` (1 ≤ k ≤ len(nums)) # Output - An array of integers, where each integer is the maximum of the sliding window of size k. # Example Input: ``` nums = [1,3,-1,-3,5,3,6,7] k = 3 ``` Output: ``` [3,3,5,5,6,7] ``` # Note - You can assume that the list is non-empty and k is always valid. - The function should be optimized to run in O(n) time complexity.","solution":"from collections import deque from typing import List def max_sliding_window(nums: List[int], k: int) -> List[int]: Returns a list of the maximum numbers in each sliding window of size k. if not nums: return [] result = [] q = deque() # indices of elements to be considered in the current window for i in range(len(nums)): # Remove elements not within the sliding window if q and q[0] < i - k + 1: q.popleft() # Remove elements that are smaller than the current element nums[i] # as they are not useful for max calculation while q and nums[q[-1]] < nums[i]: q.pop() # Add current element at the end of deque q.append(i) # Append the current max to result list # The first k-1 windows will not produce any output if i >= k - 1: result.append(nums[q[0]]) return result"},{"question":"Given two strings s and t, where length of s is n and length of t is m, you need to determine the minimum number of operations required to transform s into t. The operations you can perform are insertion, deletion, or substitution of a single character. The cost of each operation is 1. Input: - The first line contains a single integer n (1 ≤ n ≤ 1000) – the length of the first string. - The second line contains the string s of length n. - The third line contains a single integer m (1 ≤ m ≤ 1000) – the length of the second string. - The fourth line contains the string t of length m. Output: - Print a single integer, the minimum number of operations required to transform s into t. Example: Input: 4 sunday 6 saturday Output: 3 Explanation: - sunday -> saturd (replace \'n\' with \'t\') - saturd -> saturda (insert \'a\' at the end) - saturda -> saturday (insert \'y\' at the end) In this case, the minimum number of operations required to transform s into t is 3.","solution":"def min_distance(s, t): Calculates the minimum number of operations required to transform s into t. Operations allowed: insertion, deletion, substitution. n = len(s) m = len(t) # Create a (n+1) x (m+1) matrix to store the minimum operations dp = [[0] * (m + 1) for _ in range(n + 1)] # Base cases: transforming an empty string to another string for i in range(n + 1): dp[i][0] = i # Deleting all characters from s to match empty t for j in range(m + 1): dp[0][j] = j # Inserting all characters of t to match empty s # Fill the dp matrix for i in range(1, n + 1): for j in range(1, m + 1): if s[i - 1] == t[j - 1]: dp[i][j] = dp[i - 1][j - 1] # No change if characters match else: dp[i][j] = 1 + min(dp[i - 1][j], # Deletion dp[i][j - 1], # Insertion dp[i - 1][j - 1]) # Substitution return dp[n][m]"},{"question":"You are tasked with developing a function that helps a librarian re-organize book IDs in a sequence such that it becomes easier for readers to follow a certain pattern. Each book ID is an integer, and the librarian likes a sequence where all the even-numbered book IDs come before any odd-numbered book IDs. Furthermore, within the even and odd numbers, the books must maintain their original relative order. Given an array of integers representing book IDs, rearrange the elements of the array such that all even numbers appear before all the odd numbers, while preserving their original order relative to other even or odd numbers. The first line contains one integer number n (1 ≤ n ≤ 100). The second line contains n space-separated integers representing the book IDs. Print the rearranged sequence of book IDs. Here is an example: Input: 7 4 3 7 2 6 9 1 Output: 4 2 6 3 7 9 1 In this example, book IDs 4, 2, and 6 are even and appear before odd book IDs 3, 7, 9, and 1 in the rearranged array. The relative order within each group (even and odd) is preserved.","solution":"def rearrange_book_ids(n, book_ids): Rearranges the book ids such that all even numbers come before all odd_numbers, while preserving the original relative order of even and odd numbers. evens = [book_id for book_id in book_ids if book_id % 2 == 0] odds = [book_id for book_id in book_ids if book_id % 2 != 0] return evens + odds # Example usage # n = 7 # book_ids = [4, 3, 7, 2, 6, 9, 1] # rearranged = rearrange_book_ids(n, book_ids) # print(rearranged) # Output: [4, 2, 6, 3, 7, 9, 1]"},{"question":"You are given an array of n integers. You need to find and print the length of the longest subsequence such that all elements of the subsequence are sorted in strictly increasing order and the absolute difference between any two consecutive elements is at most 1. The first line of the input contains an integer n (1 ≤ n ≤ 1000) — the size of the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the array. The first and only line of the output should contain a single integer — the length of the longest desired subsequence. For example: Input: 6 1 2 3 2 3 4 Output: 4 Explanation: One of the longest subsequences that satisfy the criteria is [1, 2, 3, 4]. Another valid subsequence could be [1, 2, 3, 2]. Note that the length of [1, 2, 3, 4] is 4, but the subsequence itself is not unique. However, we are only interested in the length of any such longest subsequence.","solution":"def longest_subsequence(n, a): Given an array, find the length of the longest subsequence where all elements are sorted in strictly increasing order and the absolute difference between any two consecutive elements is at most 1. if n == 0: return 0 # Create an array to store the length of the longest subsequence ending at each index dp = [1] * n # Compute values in the dp array for i in range(1, n): for j in range(i): if abs(a[i] - a[j]) <= 1 and a[i] > a[j]: dp[i] = max(dp[i], dp[j] + 1) # The desired result is the maximum value in dp array return max(dp)"},{"question":"You are given two strings, A and B, which may have different lengths. You want to determine the length of the longest subsequence found in both strings. A subsequence differs from a substring in that the characters do not have to appear consecutively in the original string, but they must appear in the same order. Write a function `longest_common_subsequence` that takes in two strings A and B, and returns the length of their longest common subsequence. # Input: - Two strings: A and B (1 ≤ |A|, |B| ≤ 1000) # Output: - An integer representing the length of the longest common subsequence of A and B. # Example: Example 1: **Input:** ```plaintext A = \\"abcde\\" B = \\"ace\\" ``` **Output:** ```plaintext 3 ``` **Explanation:** The longest common subsequence is \\"ace\\". Example 2: **Input:** ```plaintext A = \\"abc\\" B = \\"abc\\" ``` **Output:** ```plaintext 3 ``` **Explanation:** The longest common subsequence is \\"abc\\". Example 3: **Input:** ```plaintext A = \\"abc\\" B = \\"def\\" ``` **Output:** ```plaintext 0 ``` **Explanation:** There is no common subsequence, so the output is 0. # Note: The function signature in Python should look like this: ```python def longest_common_subsequence(A: str, B: str) -> int: # your code here ``` # Constraints: - The input strings consist of only lowercase English letters.","solution":"def longest_common_subsequence(A: str, B: str) -> int: Returns the length of the longest common subsequence between strings A and B. m, n = len(A), len(B) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if A[i - 1] == B[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"You are given an array of integers. Your task is to find a subarray (contiguous elements) such that the sum of its elements is maximized. However, if there are multiple subarrays with the same maximum sum, you need to choose the one with the minimum length. If there are still multiple subarrays, choose the one that appears first in the array. The first line of the input contains an integer n (1 le n le 10^5) — the size of the array. The second line contains n integers — the elements of the array (-10^4 le a[i] le 10^4). Output three integers: the total maximum sum, the length of the subarray with the maximum sum, and the starting index of that subarray (1-based index). If there are multiple valid subarrays, pick the one that appears first in the array. # Input ``` n a[1] a[2] ... a[n] ``` # Output ``` max_sum length start_index ``` # Example Input ``` 8 1 -2 3 5 -3 2 -5 2 ``` Output ``` 8 2 3 ``` (Note: The subarray with maximum sum is [3, 5] with a sum of 8, length of 2, starting at index 3.) # Constraints 1. The input size ensures a solution with a complexity of at most O(n log n) is acceptable. 2. Consider edge cases like all negative numbers or multiple subarrays having the same sum and length.","solution":"def find_max_subarray(arr): n = len(arr) max_sum = float(\'-inf\') current_sum = 0 start = 0 end = 0 temp_start = 0 min_length = n + 1 for i in range(n): current_sum += arr[i] if current_sum > max_sum or (current_sum == max_sum and (i - temp_start + 1) < min_length): max_sum = current_sum start = temp_start end = i min_length = i - temp_start + 1 if current_sum < 0: current_sum = 0 temp_start = i + 1 return max_sum, min_length, start + 1 # Example usage arr = [1, -2, 3, 5, -3, 2, -5, 2] print(find_max_subarray(arr)) # Output should be (8, 2, 3)"},{"question":"You are given a task to help a shopping website improve their recommendations system. The shopping website stores product data in a catalog where each product has a unique ID, name, price, and a list of categories it belongs to. Users who shop on the platform often look for products similar to those they\'ve previously shown interest in. Your task is to design a recommendations system that can suggest similar products based on a given product ID. The relationship between products is based on their categories. Products are considered similar if they share at least one category. The more categories two products share, the higher their similarity score. Your goal is to identify the top-k similar products based on the similarity score. **Input:** - An integer n (1 ≤ n ≤ 1000), representing the number of products in the catalog. - n lines follow, each line describing a product in the format: `product_id product_name price category1,category2,...,categorym` where: - product_id is a string of alphanumeric characters (1 ≤ length ≤ 10). - product_name is a string (1 ≤ length ≤ 100). - price is a float (0 < price ≤ 10,000). - category1, category2, ..., categorym are strings representing the product\'s categories (1 ≤ m ≤ 10, 1 ≤ length of each category ≤ 20). - A string query_product_id, representing the ID of the product for which we want recommendations. - An integer k (1 ≤ k ≤ 10), representing the number of top recommendations required. **Output:** - Print k lines. Each line should contain the recommended product ID and the similarity score in descending order of similarity. If two products have the same score, sort them by their product ID in lexicographical order. **Example:** **Input:** ``` 5 p1 PhoneA 699.99 electronics,gadgets,smartphone p2 PhoneB 799.99 electronics,gadgets p3 TabletA 299.99 electronics,tablet p4 LaptopA 999.99 electronics,laptop p5 PhoneC 499.99 electronics,gadgets,smartphone p1 2 ``` **Output:** ``` p5 3 p2 2 ``` **Explanation:** - The product with ID `p1` has categories: electronics, gadgets, smartphone. - Product `p5` shares 3 categories with `p1`. - Product `p2` shares 2 categories with `p1`. - The top 2 products with the highest similarity scores are recommended. **Note:** Your recommendations system should be efficient and handle the constraints within acceptable limits.","solution":"def recommend_products(n, products, query_product_id, k): from collections import defaultdict # Parse the product catalog product_catalog = {} for product in products: parts = product.split(maxsplit=3) # Split product_id, product_name, price from categories product_id = parts[0] product_name = parts[1] # We actually don\'t use this price = float(parts[2]) # We actually don\'t use this categories = set(parts[3].split(\',\')) # Split categories into a set product_catalog[product_id] = categories # Find categories of the query product query_categories = product_catalog[query_product_id] # Compute similarity scores similarity_scores = [] for product_id, categories in product_catalog.items(): if product_id == query_product_id: continue similarity_score = len(query_categories.intersection(categories)) if similarity_score > 0: similarity_scores.append((product_id, similarity_score)) # Sort results primarily by similarity score (descending), secondarily by product_id (lexicographically) similarity_scores.sort(key=lambda x: (-x[1], x[0])) # Return top k results return similarity_scores[:k]"},{"question":"Tommy loves palindromes and has recently learned about bit manipulation. A binary string is a string containing only characters \'0\' and \'1\'. A palindrome is a string that reads the same forward and backward. Tommy defines a \\"binary palindrome sequence\\" as a set of binary strings where each string is a palindrome. Given a binary string s, Tommy can perform the following operations to generate a binary palindrome sequence: - Flip any character from \'0\' to \'1\' or \'1\' to \'0\'. Tommy wants to generate the longest possible binary palindrome sequence from the string s. The length of the binary palindrome sequence is the number of substrings in this sequence that are palindromes. Write a program that determines the maximum possible length of a binary palindrome sequence that can be generated from the given string s. The first line contains a single integer n (1 le n le 10^5), the length of the binary string s. The second line contains the binary string s of length n. Output a single integer, the maximum possible length of a binary palindrome sequence. # Example Input ``` 5 11001 ``` Output ``` 6 ``` Explanation The longest palindrome sequence Tommy can generate includes the following palindromic substrings: \\"1\\", \\"1\\", \\"0\\", \\"0\\", \\"1\\", and \\"11\\". The total is 6 substrings, which is the maximum possible length.","solution":"def max_palindrome_length(n, s): Given the length of the string n and the binary string s, return the maximum length of the binary palindrome sequence. # Since each individual character can be a palindrome, # The maximum possible length of the binary palindrome sequence is the length of the string. return n"},{"question":"You are given a string consisting of lowercase letters and a number k. You need to compress the string in a particular way. The compression algorithm works as follows: 1. For every substring of length k in the original string, replace that substring with its length followed by the distinct character that occurs the most frequently in that substring. 2. If there are multiple characters with the same highest frequency, choose the lexicographically smallest character. 3. If the length of the string is not exactly divisible by k, process the remaining substring of length less than k in the same way. For example, compress the string \\"aabbcc\\" with k=2. The substrings of length 2 are \\"aa\\", \\"bb\\", and \\"cc\\". - \\"aa\\" -> \\"2a\\" (2 characters long, and \'a\' is the most frequent character) - \\"bb\\" -> \\"2b\\" (2 characters long, and \'b\' is the most frequent character) - \\"cc\\" -> \\"2c\\" (2 characters long, and \'c\' is the most frequent character) So the compressed string will be \\"2a2b2c\\". Input: - The first line contains the string s of length n (1 ≤ n ≤ 10^5). - The second line contains an integer k (1 ≤ k ≤ n). Output: - Print the compressed version of the string as described. Example: Input: aaabbbccc 3 Output: 3a3b3c","solution":"def compress_string(s, k): from collections import Counter compressed_string = \'\' for i in range(0, len(s), k): substring = s[i:i+k] count = Counter(substring) most_common_char = min([char for char, freq in count.items() if freq == max(count.values())]) compressed_string += f\'{len(substring)}{most_common_char}\' return compressed_string"},{"question":"You are given a garden consisting of several sections. Each section is divided into several plots, and all plots in the same section are equal in size. The first section contains exactly one plot. Look at the illustration below which shows how the plots are arranged. The garden is constructed as follows: You start from the only plot in the first section and want to reach the last section (any plot of it). From your current plot, you can move to any plot in the next section which touches your current plot. Calculate the number of different paths from the first section to the last section. Since the number of paths can be very large, print it modulo 1000000007. The first line contains one integer m (1 le m le 1000). Then m lines follow. The i-th of them contains two integers c_i and d_i (1 le c_i, d_i le 10^5; |c_i - d_i| le 5). Additional constraint on the input: the sequence of c_i and d_i never results in a section with non-positive number of plots. Print one integer — the number of paths from the first section to the last section, taken modulo 1000000007.","solution":"def number_of_paths(m, sections): MOD = 1000000007 # Start with one plot in the first section paths = 1 for c_i, d_i in sections: paths = (paths * d_i) % MOD return paths # Example usage # m = 3 # sections = [(1,2), (2,3), (3,4)] # print(number_of_paths(m, sections)) # Output should be 24 modulo 1000000007"},{"question":"A city has a complex road network consisting of multiple two-way roads connecting its various intersections. A driver wants to travel from one intersection to another as efficiently as possible, encountering the least amount of traffic congestion. To help with this, a traffic monitoring system has been installed at each road to report the current congestion index on that road. The congestion index is an integer between 1 and 100, where 1 indicates no congestion and 100 indicates maximum congestion. A driver can choose any route, but the goal is to minimize the maximum congestion index encountered along their route. Given the road network with intersections and congestion indices of the roads, your task is to determine the minimum possible value of the maximum congestion index that the driver will have to encounter when traveling from a given start intersection to a given destination intersection. You are given the number of intersections `n` and the number of roads `m`. Then `m` lines follow, each containing three integers `u`, `v`, and `c` representing a road between intersections `u` and `v` with congestion index `c`. The intersections are numbered from 1 to `n`. Following this are two integers `start` and `end` representing the starting and destination intersections respectively. Output a single integer, the minimum possible value of the maximum congestion index encountered on any route from the start intersection to the end intersection. If there is no route from the start to the end, print `-1`. # Constraints: - 2 ≤ n ≤ 5000 - 1 ≤ m ≤ 10000 - 1 ≤ u, v ≤ n - 1 ≤ c ≤ 100 # Example: Input: 6 7 1 2 10 1 3 20 2 4 30 3 4 10 4 5 40 3 6 50 5 6 60 1 6 Output: 50 In this example, the driver can travel through the route 1 -> 3 -> 6, where the congestion indices are 20 and 50. The maximum congestion index on this route is 50, which is the minimum possible value of the maximum congestion indices among all available routes from intersection 1 to intersection 6.","solution":"import heapq from collections import defaultdict def minimum_max_congestion(n, m, roads, start, end): graph = defaultdict(list) for u, v, c in roads: graph[u].append((c, v)) graph[v].append((c, u)) def dijkstra_max_congestion(graph, start, end, n): pq = [(0, start)] max_congestion = [float(\'inf\')] * (n + 1) max_congestion[start] = 0 while pq: current_max_congestion, node = heapq.heappop(pq) if node == end: return current_max_congestion for weight, neighbor in graph[node]: new_congestion = max(current_max_congestion, weight) if new_congestion < max_congestion[neighbor]: max_congestion[neighbor] = new_congestion heapq.heappush(pq, (new_congestion, neighbor)) return -1 return dijkstra_max_congestion(graph, start, end, n)"},{"question":"You are given a sequence of integers a1, a2, ..., an, representing the heights of n buildings standing in a row. You have to paint some buildings so that no two adjacent buildings are painted. The goal is to maximize the number of painted buildings while making sure that the height difference between any two painted buildings is at most k. Formally, you need to select a subset of indices i1, i2, ..., ik such that: 1. 1 ≤ i1 < i2 < ... < ik ≤ n 2. |i_j - i_(j+1)| > 1 for all 1 ≤ j < k 3. |a[i_j] - a[i_(j+1)]| ≤ m for all 1 ≤ j < k, where m is a given non-negative integer. The first line contains two integers n (1 ≤ n ≤ 2000) and m (0 ≤ m ≤ 1000) — the number of buildings and the maximum allowed height difference between any two painted buildings. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the heights of the buildings. Print the maximum number of buildings that can be painted while satisfying the above conditions. Example: Input: 6 2 4 6 5 9 7 10 Output: 3 Explanation: One possible subset of buildings is [4, 6, 7], as the differences in heights between these buildings are: |6-4| = 2 and |7-6| = 1 which are both ≤ 2. Additionally, these buildings are non-adjacent, hence satisfying all conditions.","solution":"def max_painted_buildings(n, m, heights): # Initialize DP array where dp[i] is the max number of buildings painted ending at i dp = [0] * n # Initialize with the first building dp[0] = 1 # If we paint the first building for i in range(1, n): max_paint = 1 # If we only paint the current building # Check all previous positions to see if we can paint this building for j in range(i - 1): if abs(heights[i] - heights[j]) <= m and dp[j] > max_paint - 1: max_paint = dp[j] + 1 dp[i] = max_paint # The result is the maximum value in the dp array return max(dp) # Example usage: # print(max_painted_buildings(6, 2, [4, 6, 5, 9, 7, 10])) # Output: 3"},{"question":"A local bookstore has decided to categorize its books into different genres. Each genre is represented by a distinct integer from 1 to 5. The bookstore has provided an initial set of categorized books as a training set. For each book, you are given its genre alongside its content, which includes the title and the actual text of the book. Here\'s the task: You need to write a program that determines the genre of an unknown book based on its content, given the training set. The training set is provided in the following format: - Each book in the training set has a unique identifier and belongs to one of five genres (1 to 5). - The first line of each book in the training set contains the genre integer (from 1 to 5). - The second line contains the title of the book. - Subsequent lines contain the content of the book. The program should be designed to accept the training set and the content of an unknown book as input. The task is to predict the genre of the unknown book based on its content. Input: - The first line contains an integer ( n ) (1 ≤ ( n ) ≤ 1000) — the number of books in the training set. - Each of the next ( n ) book entries includes: - An integer ( g ) (1 ≤ ( g ) ≤ 5) — the genre of the book. - A string, the title of the book. - Multiple lines of text that belong to the content of the book. The end of this content will be indicated by a blank line. - The content of the unknown book follows after the training set, in the same format (title followed by text, ending with a blank line). Output: - An integer from 1 to 5, inclusive — the predicted genre of the unknown book. Example: Input: ``` 3 1 Mystery in the Woods It was a dark and stormy night... 2 Adventures of Tom Once upon a time, in a small village... 3 The Economics of 21st Century With the rise of globalization... Fantastic Stories In a galaxy far, far away... ``` Output: ``` 1 ``` In the example, \\"Fantastic Stories\\" is the unknown book, and based on the content, the most similar genre from the training set is determined to be genre 1 (Mystery in the Woods).","solution":"from collections import defaultdict import re from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.neighbors import KNeighborsClassifier def classify_genre(training_data, unknown_book_content): # Parse the training data genres = [] content = [] temp_content = \'\' for line in training_data: if line == \'\': continue # Genre if line.isdigit(): if temp_content: content[-1] += temp_content temp_content = \'\' genres.append(int(line)) content.append(\'\') else: temp_content += line + \' \' # Don\'t forget to add the last content if temp_content: content[-1] += temp_content.strip() # Create a tf-idf vectorizer vectorizer = TfidfVectorizer(stop_words=\'english\') X = vectorizer.fit_transform(content) y = genres # Train a k-neighbors classifier knn = KNeighborsClassifier(n_neighbors=3) knn.fit(X, y) # Vectorize the unknown book content unknown_vector = vectorizer.transform([unknown_book_content.strip()]) # Predict the genre predicted_genre = knn.predict(unknown_vector)[0] return predicted_genre def main(training_data, unknown_book): formatted_training_data = [item.strip() for item in training_data.split(\'n\') if item.strip()] formatted_unknown_book = \' \'.join([line.strip() for line in unknown_book.split(\'n\') if line.strip()]) return classify_genre(formatted_training_data, formatted_unknown_book)"},{"question":"You are given an infinite grid of points where each point has integer coordinates (x, y). Initially, there is a robot standing at the origin (0, 0) facing the positive y-axis. The robot can be given a command string containing the following instructions: - \'G\': Move forward by 1 unit in the direction the robot is currently facing. - \'L\': Turn the robot 90 degrees to the left. - \'R\': Turn the robot 90 degrees to the right. Your task is to determine whether, after executing the command string exactly once, the robot will return to its original starting point (0, 0). The input is a single line containing a command string, where each command is one of the described instructions. The length of the command string will be between 1 and 100. Output \\"YES\\" if the robot returns to the starting point (0, 0) after executing the command string once; otherwise, output \\"NO\\". Example: Input: GLGLGLGL Output: YES Input: GLRRGG Output: NO","solution":"def does_return_to_origin(commands): Determines if the robot returns to the origin after executing the given commands. :param commands: string containing the commands \'G\', \'L\', \'R\' :return: \\"YES\\" if the robot returns to the origin, otherwise \\"NO\\" # Initial position and direction (facing positive y-axis) x, y = 0, 0 # Directions represent the order: North (0), East (1), South (2), West (3) direction = 0 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] for command in commands: if command == \'G\': dx, dy = directions[direction] x += dx y += dy elif command == \'L\': direction = (direction - 1) % 4 elif command == \'R\': direction = (direction + 1) % 4 return \\"YES\\" if x == 0 and y == 0 else \\"NO\\""},{"question":"Professor Brown is working on a research project involving prime numbers and has assigned you the task of writing a program to aid his research. Specifically, he needs to determine the number of prime numbers within a certain range. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. You are given integers `a` and `b` (1 ≤ a ≤ b ≤ 10^6), inclusive, and you need to count how many prime numbers exist between them. # Function Signature Create a function `count_primes(a: int, b: int) -> int` that takes in two integers `a` and `b`, and returns the number of prime numbers within the range `[a, b]`. # Input - Two integers, `a` and `b` (1 ≤ a ≤ b ≤ 10^6). # Output - An integer representing the number of prime numbers within the given range. # Example ```python print(count_primes(10, 30)) # Output: 6 print(count_primes(1, 10)) # Output: 4 print(count_primes(100, 200)) # Output: 21 ``` # Explanation For the first example, the prime numbers between 10 and 30 are: 11, 13, 17, 19, 23, 29. Implement the function efficiently as the range can be as large as 1,000,000.","solution":"def count_primes(a, b): def sieve(n): is_prime = [True] * (n + 1) p = 2 while p * p <= n: if is_prime[p]: for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 is_prime[0] = is_prime[1] = False return is_prime sieve_size = b is_prime = sieve(sieve_size) count = 0 for num in range(a, b + 1): if is_prime[num]: count += 1 return count"},{"question":"Paula is organizing a series of workshops on digital technology. Each workshop is planned to be held at one of two possible venues: Venue X and Venue Y. To facilitate scheduling, each workshop has a proposed time slot for both venues, given as intervals [sx_i, ex_i] (sx_i ≤ ex_i) for Venue X and [sy_i, ey_i] (sy_i ≤ ey_i) for Venue Y. If a workshop is held in Venue X, it will follow the time slot [sx_i, ex_i], and if it is held in Venue Y, it will follow the time slot [sy_i, ey_i]. Two workshops are considered overlapping if they happen at the same time in at least one of the venues. Specifically, a workshop in time interval [a, b] overlaps with a workshop in time interval [c, d] if and only if max(a, c) ≤ min(b, d). Paula wants to know if there exists a way to schedule all workshops in such a manner that no two workshops overlap in the chosen venue. Write a program to determine this. The input consists of: - An integer n (1 ≤ n ≤ 100,000), the number of workshops. - n lines each containing four integers sx_i, ex_i, sy_i, ey_i (1 ≤ sx_i, ex_i, sy_i, ey_i ≤ 10^9, sx_i ≤ ex_i, sy_i ≤ ey_i). The output should be: - \\"POSSIBLE\\" if Paula can schedule the workshops in one of the venues such that no two workshops overlap. - \\"IMPOSSIBLE\\" otherwise. Example: Input: 3 1 3 2 4 5 6 8 9 4 5 6 7 Output: POSSIBLE Input: 3 1 4 3 6 2 5 4 7 5 8 7 9 Output: IMPOSSIBLE","solution":"def can_schedule_workshops(n, intervals): Determines if it\'s possible to schedule workshops without overlap in any of the two venues. Args: n: int - Number of workshops. intervals: List of tuples - Each tuple represents a workshop with (sx_i, ex_i, sy_i, ey_i). Returns: str: \\"POSSIBLE\\" if non-overlapping scheduling is possible, otherwise \\"IMPOSSIBLE\\". def is_non_overlapping(intervals): intervals.sort() end_time = -1 for start, end in intervals: if start < end_time: return False end_time = end return True intervals_x = [(sx, ex) for sx, ex, _, _ in intervals] intervals_y = [(sy, ey) for _, _, sy, ey in intervals] if is_non_overlapping(intervals_x) or is_non_overlapping(intervals_y): return \\"POSSIBLE\\" else: return \\"IMPOSSIBLE\\" # Example usage: # n = 3 # intervals = [(1, 3, 2, 4), (5, 6, 8, 9), (4, 5, 6, 7)] # print(can_schedule_workshops(n, intervals)) # Output: \\"POSSIBLE\\""},{"question":"You are given an n x n integer matrix where the matrix is filled with zeros and ones. Your task is to define the largest square sub-matrix that consists of only 1s and to calculate the area of this sub-matrix. The first line contains a single integer n (1 ≤ n ≤ 200) — the size of the matrix. Then follows n lines, each containing n integers separated by spaces, either 0 or 1 — the elements of the matrix. Output a single integer — the area of the largest square sub-matrix filled with 1s. Example Input: ``` 4 1 0 1 0 1 1 1 1 1 1 1 0 0 1 1 1 ``` Example Output: ``` 4 ``` Explanation: The largest square sub-matrix filled with 1s in the given example has a side length of 2, thus the area is 2 × 2 = 4.","solution":"def largest_square_submatrix_area(matrix): n = len(matrix) if n == 0: return 0 max_side = 0 dp = [[0]*n for _ in range(n)] for i in range(n): for j in range(n): if i == 0 or j == 0: dp[i][j] = matrix[i][j] elif matrix[i][j] == 1: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 else: dp[i][j] = 0 max_side = max(max_side, dp[i][j]) return max_side * max_side"},{"question":"In a distant galaxy, there is a planet called Zog, where the inhabitants have a peculiar way of celebrating their festivals. They decorate their homes with light strings of various colors. Each light string is represented by a character, which indicates its color. For example, \'R\' stands for a red light string, \'G\' stands for a green light string, and so on. To make their decoration process more efficient, the inhabitants of Zog want to know the maximum number of pairs of light strings they can form such that each pair includes light strings of different colors. The color combination of any pair should be unique. For instance, if they have the light strings \\"RGBG\\", they can pair \'R\' with \'G\' once and \'G\' with \'B\' once, but they cannot use \'G\' with \'B\' again because \\"GB\\" has already been used to form a unique pair. Write a function that will help the inhabitants by taking a string of light strings and returning the maximum number of unique pairs they can form. The input string consists only of uppercase letters, and its length does not exceed 100. # Input - A single line containing a string s (1 ≤ |s| ≤ 100), where each character in the string represents the color of a light string. # Output - Print a single integer — the maximum number of unique pairs of light strings that can be formed. # Example ```python Input: \\"RGBG\\" Output: 3 Input: \\"AABB\\" Output: 1 ```","solution":"def max_unique_pairs(s): Returns the maximum number of unique pairs of light strings that can be formed. Args: s (str): String representing the colors of light strings. Returns: int: Maximum number of unique pairs. from collections import Counter color_count = Counter(s) pairs_formed = set() max_pairs = 0 colors = list(color_count.keys()) for i in range(len(colors)): for j in range(i + 1, len(colors)): pair = tuple(sorted([colors[i], colors[j]])) if pair not in pairs_formed: pairs_formed.add(pair) max_pairs += 1 return max_pairs"},{"question":"You are given an integer array a consisting of n elements. In one operation, you can choose any two elements of the array and replace both of them with their sum. This operation can be performed any number of times. Your task is to determine the minimum number of operations required to make all elements of the array equal. The first line contains a single integer t (1 le t le 100): the number of test cases. Each test case consists of two lines: The first line contains a single integer n (1 le n le 100): the number of elements in the array. The second line contains n space-separated integers a_1, a_2, ldots, a_n (1 le a_i le 100): the elements of the array. For each test case, print a single integer: the minimum number of operations required to make all elements equal. Note: Since we are trying to minimize the number of operations, the problem essentially comes down to reducing the array to a single element which can be achieved through repeated summation operations. # Example **Input:** 3 4 1 2 3 4 3 4 4 4 2 5 10 **Output:** 3 0 1 **Explanation:** In the first test case, one way to achieve the goal is: - Sum the first and second elements (1 + 2 = 3): Array becomes [3, 3, 4] - Sum the first and third elements (3 + 3 = 6): Array becomes [6, 4] - Sum the two elements (6 + 4 = 10): Array becomes [10] In the second test case, all elements are already equal, so no operations are needed. In the third test case, one operation is required to sum the two elements (5 + 10 = 15), resulting in a single element [15].","solution":"def min_operations_to_equal_elements(t, test_cases): Returns the minimum number of operations required to make all elements of the array equal. Parameters: t (int): The number of test cases. test_cases (list): A list of tuples where each tuple contains the number of elements (n) and the array of integers (a). Returns: list: A list of integers where each integer represents the minimum number of operations for each test case. results = [] for test_case in test_cases: n, a = test_case if len(set(a)) == 1: results.append(0) else: results.append(n - 1) return results"},{"question":"A telecommunications company is laying high-speed fiber optic cables in a specific city. The city\'s layout is a grid of streets, represented by a 2D plane with intersections at integer coordinates. However, there are certain obstacles where the cable cannot be laid. These obstacles are given as rectangular zones with sides parallel to the coordinate axes. Consider the problem of finding the shortest cable length needed to connect two points, A and B, avoiding the obstacles. The cable can only be laid along the grid lines and cannot pass through the obstacles. Your task is to write a program that determines the shortest path from point A to point B, given the coordinates of the obstacles. Input: - The first line contains two integers x_A and y_A (-10^4 leq x_A, y_A leq 10^4) representing the coordinates of point A. - The second line contains two integers x_B and y_B (-10^4 leq x_B, y_B leq 10^4) representing the coordinates of point B. - The third line contains an integer n (0 leq n leq 100) representing the number of rectangular obstacles. - Each of the next n lines contains four integers x_1, y_1, x_2, and y_2 (-10^4 leq x_1, y_1, x_2, y_2 leq 10^4), describing the lower-left and upper-right coordinates of each rectangular obstacle. Output: - A single integer representing the minimum cable length required, or -1 if it is impossible to connect the two points. Example: Input: ``` 0 0 10 10 2 2 2 4 4 5 5 7 7 ``` Output: ``` 20 ``` In this example, the shortest path avoids the obstacles and travels along the grid connections from (0, 0) to (10, 10). The obstacles located at (2, 2) to (4, 4) and (5, 5) to (7, 7) must be bypassed. Your solution should maintain time efficiency, ensuring it performs well even for the upper limit constraints of the input sizes.","solution":"from collections import deque def is_point_within_any_obstacle(x, y, obstacles): for x1, y1, x2, y2 in obstacles: if x1 <= x <= x2 and y1 <= y <= y2: return True return False def shortest_path(xA, yA, xB, yB, obstacles): if (xA, yA) == (xB, yB): return 0 if is_point_within_any_obstacle(xA, yA, obstacles) or is_point_within_any_obstacle(xB, yB, obstacles): return -1 queue = deque([(xA, yA, 0)]) visited = set((xA, yA)) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] while queue: x, y, dist = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if (nx, ny) == (xB, yB): return dist + 1 if not is_point_within_any_obstacle(nx, ny, obstacles) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"Alice is organizing a coding contest, and she wants to ensure that the scoring of the contest follows certain rules to make it fair for all participants. There are n problems in the contest, each with a different score. Each participant can solve a subset of these problems. The final score of a participant is the sum of the scores of all the problems they solved. However, Alice decides to introduce a bonus system to encourage participants to solve more problems. If a participant solves at least k problems, they receive an additional bonus of b points to their final score. Alice wants to know the maximum possible score a participant can achieve if they solved any subset of the problems. Given the number of problems n, the scores of each problem, the minimum number of problems k required to receive the bonus, and the bonus value b, calculate the maximum achievable score for a participant. # Input - The first line contains three integers n, k, b (1 le n le 1000, 1 le k le n, 1 le b le 10^9) — the number of problems, the minimum number of problems to get the bonus, and the value of the bonus. - The second line contains n integers s_1, s_2, dots, s_n (1 le s_i le 10^6) — the scores for each problem. # Output - Print one integer — the maximum possible score a participant can achieve. # Example Input ``` 5 3 500 100 200 300 400 500 ``` Output ``` 2000 ``` Explanation The participant can solve problems with scores 300, 400, and 500, resulting in a total score of 1200 points. Since they solved at least 3 problems, they receive an additional bonus of 500 points. Thus, the maximum score is 1200 + 500 = 1700. Alternatively, they can solve all 5 problems, resulting in a score of 1500 + 500 = 2000.","solution":"def max_possible_score(n, k, b, scores): Returns the maximum possible score a participant can achieve. # Sort the scores in descending order to maximize the score scores.sort(reverse=True) # Calculate the sum of all scores (solving all problems) max_score_without_bonus = sum(scores) # If the participant solves at least k problems, add the bonus if n >= k: return max_score_without_bonus + b else: return max_score_without_bonus"},{"question":"Superland is a unique amusement park consisting of **n** distinct rides. Each ride has a popularity score. Popularity is determined by a positive integer. Superland\'s management wants to design a promotional campaign to maximize the overall popularity of any subsequence of rides advertised together. A subsequence is any sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. You are given an array **rides** of length **n**, where **rides[i]** denotes the popularity score of the i-th ride. The goal is to find the maximum possible sum of popularity scores of any non-empty subsequence such that no two selected rides are adjacent in the original array. Write a function **maxPopularity(rides: List[int]) -> int** that takes in the array of popularity scores and outputs the maximum popularity sum of any valid non-adjacent subsequence. # Input - An integer **n** (1 ≤ n ≤ 10^5), the number of rides. - An array **rides** of length **n**, where each element is an integer between 1 and 10^4 inclusive. # Output - An integer representing the maximum achievable popularity sum of a non-adjacent subsequence. # Example **Input:** n = 5 rides = [3, 2, 5, 10, 7] **Output:** 15 **Explanation:** One of the optimal subsequence is [3, 10], which gives a total popularity sum of 13. Another possibility is [2, 10]. The subsequence [5, 7] will also give the result of 12. But the optimal solution is [3, 10] or [2, 10] giving the maximum sum of 15. # Constraints - The function should handle inputs efficiently within the provided constraints. - Focus on dynamic programming or other optimization techniques to ensure optimal substructure and overlapping subproblems.","solution":"from typing import List def maxPopularity(rides: List[int]) -> int: if not rides: return 0 n = len(rides) if n == 1: return rides[0] # Initialize DP arrays dp = [0] * n dp[0] = rides[0] dp[1] = max(rides[0], rides[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + rides[i]) return dp[-1]"},{"question":"You are working on a project to create a library for managing scientific data. One of the features needed is a function to generate a prime number sequence. To achieve this, you decide to write a function that lists all prime numbers up to a given number n. A prime number is a natural number greater than 1 that is not divisible by any number other than 1 and itself. For example, the prime numbers less than 10 are 2, 3, 5, and 7. Write a function `prime_numbers_up_to(n)` that takes a single integer n and returns a list of all prime numbers less than or equal to n. Input: - A single integer n (2 ≤ n ≤ 10^7). Output: - A list of prime numbers in ascending order, each separated by a space. Example: - Input: 10 - Output: 2 3 5 7 In this example, the function must correctly identify and list all prime numbers less than or equal to 10. Note: - The function should be efficient and must handle the upper constraint within a reasonable time frame. You may want to consider using the Sieve of Eratosthenes algorithm to achieve this.","solution":"def prime_numbers_up_to(n): Returns a list of all prime numbers up to and including n. if n < 2: return [] sieve = [True] * (n + 1) sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start * start, n + 1, start): sieve[multiple] = False primes = [num for num in range(n + 1) if sieve[num]] return primes"},{"question":"You are given an integer array a consisting of n elements. You are allowed to perform the following operation any number of times: 1. Select three distinct indices i, j, k such that a[i] + a[j] + a[k] = 0. 2. Remove the elements a[i], a[j], a[k] from the array. After performing the above operation as many times as possible, determine the length of the longest subarray of a that contains no \\"0-sum triplet\\" (three elements that sum up to zero). For example, given the array [1, -1, 2, -2, 3, -3, 4], the array [4] is the longest subarray that does not contain any triplets adding up to zero after removing all possible 0-sum triplets. The first line contains an integer n (1 le n le 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, dots, a_n (-10^9 le a_i le 10^9) — the elements of the array. Output the length of the longest subarray that has no 0-sum triplet after all possible removals. **Example**: Input: 7 1 -1 2 -2 3 -3 4 Output: 1","solution":"def length_of_longest_subarray_no_0_sum_triplet(n, a): Returns the length of the longest subarray that has no 0-sum triplet after all possible removals. from collections import Counter # Count the occurrences of each element count = Counter(a) # Find the maximum frequency of any element, as the longest subarray without 0-sum triplet # would be consisting of the most frequently occurring element. max_frequency = max(count.values()) return max_frequency"},{"question":"John is developing a warehouse management system and is working on a module that identifies overstocked items. He has a threshold quantity q, and his goal is to find all items that exceed this quantity in stock. Each item has a unique identifier, and the stock quantities of items are provided in a list. You are given the number of items n and the threshold quantity q. The next n lines contain the item information. Each line has the format \\"item_id quantity\\" (without the quotes). `item_id` is a non-empty string of at most 20 characters consisting of lowercase letters (\'a\' ... \'z\'), and `quantity` is an integer (1 ≤ quantity ≤ 10000). Your task is to identify and print the item_ids of all items whose quantity exceeds the threshold q. Input: The first line contains two integers n and q (1 ≤ n ≤ 1000, 1 ≤ q ≤ 10000). The next n lines each contain an item description \\"item_id quantity\\". Output: On the first line, print integer m — the number of items that have quantity greater than q. In the next m lines, print the item_ids of such items in any order, each on a new line. If no item exceeds the threshold, print 0 on the first line and nothing else. Example: Input: 5 100 apple 150 banana 50 cherry 200 date 50 elderberry 300 Output: 3 apple cherry elderberry","solution":"def find_overstocked_items(n, q, item_list): Identifies and returns the item_ids of items whose quantity exceeds the threshold q. Parameters: n (int): Number of items. q (int): Threshold quantity. item_list (list of tuples): Each tuple contains (item_id, quantity). Returns: list: The list of item_ids whose quantity exceeds q. overstocked_items = [] for item_id, quantity in item_list: if quantity > q: overstocked_items.append(item_id) return overstocked_items"},{"question":"You are participating in a programming competition that spans multiple days. Each day, you solve a certain number of problems. For the sake of this problem, assume that solving a problem is a binary outcome: you either solve a problem or you don\'t. You wish to maximize the total number of problems solved, but you\'ve only had time to prepare for a certain number of days. You can use your pre-prepared solutions to improve your performance, but each day, you can only fix at most one unsolved problem. The outcomes of the problems on each day are represented by a string p of length m: the j-th character of p is \'S\' if you solved the j-th problem, while it is \'U\' if you failed to solve the j-th problem. Given the number of days d you prepared for and the string p, compute the maximum number of problems you can solve by utilizing your pre-prepared solutions optimally. Each test contains multiple test cases. The first line contains an integer t (1 le t le 10,000) — the number of test cases. The description of the test cases follow. The first line of each test case contains two integers m, d (1 le m le 100,000, 0 le d le m) – the number of problems attempted each day and the number of days you prepared for. The second line contains a string p of length m containing only the characters \'S\' and \'U\'. It is guaranteed that the sum of m over all test cases does not exceed 200,000. For each test case, print a single integer – the maximum number of problems you can solve by utilizing your pre-prepared solutions optimally. Explanation of the first test case. Before using any pre-prepared solutions, you solved 3 problems. An optimal way to utilize your pre-prepared solutions is to fix the unsolved problems of the first, third, and fifth problem sets. Thus, you solve 6 problems. Explanation of the second test case. Before using any pre-prepared solutions, you solved 4 problems. You can only fix up to 1 problem since you prepared for only 1 day, so the maximum number of problems you can solve remains 5.","solution":"def maximize_solved_problems(t, test_cases): results = [] for i in range(t): m, d = test_cases[i][0] p = test_cases[i][1] # Count how many problems are initially solved solved_count = p.count(\'S\') unsolved_count = m - solved_count # The maximum number of problems that can be fixed is the smaller of d and the total number of unsolved problems max_problems_fixed = min(d, unsolved_count) # The maximum number of problems that can be solved is the initial solved + max_problems_fixed max_solved = solved_count + max_problems_fixed results.append(max_solved) return results"},{"question":"You are given a list of strings and a target string. Your task is to determine if the target string can be formed by concatenating any two different strings from the list. The order of concatenation should match the order of the strings in the list. Write a function `can_form_target` that takes two parameters: 1. `word_list` (a list of strings) 2. `target` (a single string) Your function should return `True` if the target string can be formed by concatenating any two different strings from the list. Otherwise, it should return `False`. **Function Signature:** ```python def can_form_target(word_list: List[str], target: str) -> bool: ``` # Example: Input: ```python can_form_target([\\"ab\\", \\"c\\", \\"abc\\", \\"d\\"], \\"abcd\\") ``` Output: ``` True ``` Input: ```python can_form_target([\\"ab\\", \\"c\\", \\"abc\\", \\"d\\"], \\"cad\\") ``` Output: ``` False ``` # Constraints: - The list `word_list` contains between 1 and 1000 strings, inclusive. - Each string in `word_list` and the target string contains between 1 and 1000 characters, inclusive. - All strings consist of lowercase English letters only.","solution":"def can_form_target(word_list, target): Determines if the target string can be formed by concatenating any two different strings from the list. Parameters: - word_list: List[str] - A list of strings. - target: str - The target string to form. Returns: - bool - True if the target string can be formed, False otherwise. seen = set(word_list) for word in word_list: if target.startswith(word): suffix = target[len(word):] if suffix in seen and suffix != word: return True return False"},{"question":"The bakery you work for has decided to introduce a new product — a bread with n ingredients. Each ingredient has a unique identifier from 1 to n. Before mixing these ingredients, the bakery\'s quality assurance team needs to check if the arrangement of ingredients forms a chain. An arrangement of ingredients will be called a chain if each ingredient follows another ingredient exactly in the order of their identifiers. For example, a valid chain for n = 4 could be 1 -> 2 -> 3 -> 4. However, the customer needs a different arrangement in which any ingredient should be adjacent only to its consecutive elements. For instance, for n = 4, valid arrangements could be (1, 2, 3, 4) or (4, 3, 2, 1). You have to determine if a given arrangement is a valid chain. The first line of the input contains a single integer T (1 ≤ T ≤ 100) — the number of test cases. The first line of each test case contains an integer n (2 ≤ n ≤ 100) — the number of ingredients in the arrangement. The second line of each test case contains n integers representing the arrangement of ingredients. Output \\"YES\\" if the arrangement forms a valid chain, otherwise \\"NO\\". **Example input:** 3 4 1 2 3 4 4 4 3 2 1 5 1 3 2 4 5 **Example output:** YES YES NO","solution":"def is_valid_chain(n, arrangement): Check if the arrangement is a valid chain. for i in range(1, n): if abs(arrangement[i] - arrangement[i-1]) != 1: return \\"NO\\" return \\"YES\\" def check_arrangements(test_cases): results = [] for n, arrangement in test_cases: result = is_valid_chain(n, arrangement) results.append(result) return results"},{"question":"You are given a list of n tasks. Each task is associated with a difficulty level and a type. The difficulty level is represented by an integer, and the type is denoted by a lowercase letter. Each task can have one of three types: \\"a\\", \\"b\\", or \\"c\\". You need to identify the minimum sum of difficulties of a set of tasks such that there is at least one task of each type. If it\'s not possible to find such a set, return -1. The first line of the input contains an integer n (1 le n le 1,000) — the number of tasks. Each of the next n lines contains an integer d_i (1 le d_i le 100,000) and a character t_i — the difficulty of the i-th task and its type. Print -1 if it is impossible to find a set of tasks that includes each type exactly once. Otherwise, print the minimum sum of difficulties of such a set. # Example: **Input:** ``` 5 10 a 20 b 30 c 40 a 25 b ``` **Output:** ``` 60 ``` **Explanation:** In this example, the first, second, and third tasks can be chosen to meet the requirements of one task of each type. The total difficulty level will be 10 + 20 + 30 = 60. Although there are other combinations, this set has the minimum total difficulty.","solution":"def find_min_difficulty(tasks): Finds the minimum sum of difficulties for a set of tasks that contains at least one task of each type \'a\', \'b\', and \'c\'. Parameters: tasks (list of tuples): List of tuples where each tuple contains the difficulty and the type of task. Returns: int: The minimum sum of difficulties if a set is found, otherwise -1. # Initialize dictionaries to store the minimum difficulty for each type type_min_difficulty = {\'a\': float(\'inf\'), \'b\': float(\'inf\'), \'c\': float(\'inf\')} # Populate the dictionaries with the minimum difficulty for each type for difficulty, task_type in tasks: if task_type in type_min_difficulty: type_min_difficulty[task_type] = min(type_min_difficulty[task_type], difficulty) # Check if we have at least one task of each type if all(value != float(\'inf\') for value in type_min_difficulty.values()): # Calculate the minimum sum of difficulties return type_min_difficulty[\'a\'] + type_min_difficulty[\'b\'] + type_min_difficulty[\'c\'] else: return -1 # Input conversion function def parse_input(input_str): lines = input_str.strip().split(\'n\') n = int(lines[0]) tasks = [(int(line.split()[0]), line.split()[1]) for line in lines[1:]] return tasks"},{"question":"In a distant kingdom, a wise king wants to reward one of his loyal subjects by giving them some precious stones. Each stone has a specific weight and value. However, the king has a limited bag that can carry at most W weight. The subject would like to maximize the total value of stones he can carry in the bag. The input consists of several stones, each described by its weight and value, and the maximum capacity of the bag. The goal is to determine the maximum total value that can be obtained without exceeding the weight limit. Write a program that reads the following input: 1. An integer n (1 ≤ n ≤ 1000) — the number of stones. 2. An integer W (1 ≤ W ≤ 10^6) — the maximum weight the bag can carry. 3. n pairs of integers wi and vi (1 ≤ wi, vi ≤ 10^6) — the weight and value of each stone. Print one integer — the maximum total value of stones that can be carried in the bag. Example: Input: 4 5 1 1 3 4 4 5 2 3 Output: 7 In the example, the optimal selection is to take the stones with weights 3 and 2, providing a total value of 4 + 3 = 7.","solution":"def knapsack(n, W, stones): dp = [0] * (W + 1) for w, v in stones: for j in range(W, w - 1, -1): dp[j] = max(dp[j], dp[j - w] + v) return dp[W]"},{"question":"You are given a sequence of integers. Your task is to determine if the sequence can be transformed into a strictly increasing sequence by removing at most two elements. A sequence is strictly increasing if each subsequent element is larger than the previous one. Input: The first line contains a single integer, t (1 le t le 10^4) — the number of test cases. Each test case consists of two lines. The first line contains a single integer, n (3 le n le 10^5) — the number of elements in the sequence. The second line contains n integers, a_1, a_2, dots, a_n (-10^9 le a_i le 10^9) — the elements of the sequence. Output: For each test case, print \\"YES\\" if it is possible to transform the sequence into a strictly increasing sequence by removing at most two elements. Otherwise, print \\"NO\\". Note that \\"YES\\" and \\"NO\\" should be in uppercase. Example Input: 3 5 1 3 2 4 6 4 4 2 3 1 6 1 5 3 4 6 8 Output: YES NO YES Explanation: In the first test case, you can remove the element \\"2\\" to get the strictly increasing sequence [1, 3, 4, 6]. Alternatively, removing \\"3\\" and \\"2\\" in the middle gives [1, 4, 6], which is also strictly increasing. In the second test case, there is no way to remove at most two elements to get a strictly increasing sequence. In the third test case, you can remove the element \\"3\\" to get the strictly increasing sequence [1, 5, 4, 6, 8]. Alternatively, you can remove the element \\"5\\" to get the strictly increasing sequence [1, 3, 4, 6, 8].","solution":"def can_become_strictly_increasing(t, test_cases): results = [] def can_transform(seq): def is_valid(subseq): for i in range(1, len(subseq)): if subseq[i] <= subseq[i-1]: return False return True def check_with_removals(seq): count_invalid = 0 for i in range(1, len(seq)): if seq[i] <= seq[i-1]: if count_invalid >= 2: return False count_invalid += 1 # Try removing the current item or the previous item no_prev = seq[:i-1] + seq[i:] no_curr = seq[:i] + seq[i+1:] return is_valid(no_prev) or is_valid(no_curr) return True return check_with_removals(seq) for i in range(t): n, seq = test_cases[i] if can_transform(seq): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are a researcher observing a colony of ants on a rectangular grid. The grid consists of m rows and n columns of cells. Each cell can either be empty or contain a rock. The ants move in units of one second, and in each second, they can move from their current cell to one of the four directly adjacent cells (up, down, left, or right) as long as the destination cell is empty (i.e., does not contain a rock and is within the grid boundaries). There is exactly one starting cell for the ants, and your task is to determine the minimum number of seconds required for ants to reach a designated target cell. If it\'s impossible for the ants to reach the target cell, you should return -1. The grid is represented as a list of strings, where each string corresponds to a row in the grid. The characters in the strings can be: - \'.\' representing an empty cell, - \'#\' representing a cell containing a rock, - \'S\' representing the starting cell (there is exactly one \'S\'), - \'T\' representing the target cell (there is exactly one \'T\'). The first line of the input contains two integers m and n (1 leq m, n leq 1000) — the number of rows and columns in the grid, respectively. Each of the next m lines contains exactly n characters and describes the map of the grid. Output an integer representing the minimum number of seconds required for the ants to reach the target cell, or -1 if it is impossible. # Example Input: ``` 5 5 S.... ..#.. ..#.. ..... ....T ``` Output: ``` 8 ``` Input: ``` 3 3 S#. # .T. ``` Output: ``` -1 ``` Explanation: In the first example, the minimum path for the ants to move from \'S\' to \'T\' is: - Move right three times to reach cell (0, 3) - Move down four times to reach cell (4, 3) - Move right once to reach cell (4, 4), which is the target cell \'T\'. Thus, the total moves are 3+4+1 = 8. In the second example, the ants cannot reach the target cell \'T\' because there are obstacles blocking all possible paths.","solution":"from collections import deque def min_seconds_to_target(grid, m, n): Calculate the minimum number of seconds required for ants to reach the target cell. Parameters: grid (List[str]): A list of strings representing the grid. m (int): The number of rows in the grid. n (int): The number of columns in the grid. Returns: int: The minimum number of seconds required to reach the target cell, or -1 if it\'s impossible. # Find the start (S) and target (T) positions start = None target = None for i in range(m): for j in range(n): if grid[i][j] == \'S\': start = (i, j) elif grid[i][j] == \'T\': target = (i, j) # If there is no start or target position, return -1 if not start or not target: return -1 # Directions for moving up, down, left, and right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS initialization queue = deque([(*start, 0)]) visited = set([start]) # Perform BFS while queue: x, y, steps = queue.popleft() if (x, y) == target: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] != \'#\': queue.append((nx, ny, steps + 1)) visited.add((nx, ny)) # If target is not reachable return -1"},{"question":"You are given an array of integers a with a size of n. Your task is to sort the array so that all odd numbers appear before all even numbers while maintaining the original relative order of the odd and even numbers. Formally, implement a function that takes an array of integers and returns a new array where all the odd numbers appear first, followed by all the even numbers, with the same relative order as they appeared in the input array. Example: ```python def sort_odd_even(arr): # Your code goes here pass # Example usage: arr = [8, 5, 2, 7, 9, 1, 4, 3] print(sort_odd_even(arr)) # Output: [5, 7, 9, 1, 3, 8, 2, 4] ``` # Input: - The first line contains an integer n (1 le n le 10^5), the size of the array. - The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9), the elements of the array. # Output: - A single line containing the sorted array according to the described order. # Constraints: - You must maintain the relative order of odd and even numbers as they appeared in the input array. - The function should run efficiently for large input sizes. # Example 1: Input: ``` 8 8 5 2 7 9 1 4 3 ``` Output: ``` 5 7 9 1 3 8 2 4 ``` # Example 2: Input: ``` 5 2 4 6 8 10 ``` Output: ``` 2 4 6 8 10 ``` # Example 3: Input: ``` 4 1 3 5 7 ``` Output: ``` 1 3 5 7 ```","solution":"def sort_odd_even(arr): Sorts an array such that all odd numbers appear before all even numbers while maintaining the relative order of the odd and even numbers. odd_numbers = [x for x in arr if x % 2 != 0] even_numbers = [x for x in arr if x % 2 == 0] return odd_numbers + even_numbers # Example usage: arr = [8, 5, 2, 7, 9, 1, 4, 3] print(sort_odd_even(arr)) # Output: [5, 7, 9, 1, 3, 8, 2, 4]"},{"question":"# Inventory Management System A small manufacturing company uses a simplified inventory management system to keep track of their products. Each product can belong to one of three categories — \\"Hardware\\", \\"Software\\", or \\"Accessories\\". Each category is represented by an integer from 1 to 3, where 1 stands for \\"Hardware\\", 2 stands for \\"Software\\", and 3 stands for \\"Accessories\\". The inventory system utilizes an input file named \\"products.txt\\" that contains details of the products. The file format is as follows: - Each product is described in three lines. - The first line is a unique product ID (integer). - The second line is the product name (string). - The third line is the product category (integer from 1 to 3). Your task is to write a program that reads the \\"products.txt\\" file and then allows the user to query the inventory by product ID to find out the product category. The program should work as follows: 1. Read and store the product details from \\"products.txt\\". 2. Continuously prompt the user to enter a product ID. 3. For each entered product ID, print the corresponding product category. If a product ID is not found in the \\"products.txt\\", the program should print \\"Product ID not found.\\" Example of \\"products.txt\\" content: ``` 101 Screwdriver 1 102 Antivirus Software 2 103 USB Cable 3 ``` Example interaction with the program: ``` Enter product ID: 101 Product Category: Hardware Enter product ID: 104 Product ID not found. Enter product ID: 102 Product Category: Software ``` Implement the program such that it handles the input correctly, reads the file efficiently, and consistently responds to user queries.","solution":"def load_products(file_path): Load products from the given file and return a dictionary with product ID as the key and the product category as the value. categories = {1: \\"Hardware\\", 2: \\"Software\\", 3: \\"Accessories\\"} products = {} with open(file_path, \'r\') as file: lines = file.readlines() for i in range(0, len(lines), 3): product_id = int(lines[i].strip()) # product_name = lines[i+1].strip() # this is ignored based on the prompt requirements category = int(lines[i+2].strip()) products[product_id] = categories[category] return products def query_product_category(products, product_id): Query the product category for the given product ID. return products.get(product_id, \\"Product ID not found.\\")"},{"question":"Alice has a rectangular grid of size m x n and a list of distinct integers. She wants to place the numbers from the list onto the grid such that the numbers in each row are sorted in increasing order and the numbers in each column are sorted in increasing order. Given the list of integers and the dimensions of the grid, determine if it is possible to place the numbers on the grid in the desired manner. If it is possible, print the grid. If it is not possible, print \\"Not possible\\". The first line contains two integers m and n (1 ≤ m, n ≤ 1000), the dimensions of the grid. The second line contains m*n integers, all distinct, representing the list of integers. Output m lines, each containing n space-separated integers, representing the grid. If it is not possible to place the numbers in the desired manner, print \\"Not possible\\". For example, for a 3x4 grid and the list [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], the output should be: 1 2 3 4 5 6 7 8 9 10 11 12","solution":"def place_numbers_on_grid(m, n, numbers): Places numbers on a m x n grid such that both rows and columns are sorted in increasing order. Args: m (int): number of rows n (int): number of columns numbers (list): list of m * n distinct integers Returns: str: \\"Not possible\\" if it is not possible to place the numbers as described. Otherwise, returns the grid as a list of lists of integers. if len(numbers) != m * n: return \\"Not possible\\" numbers.sort() grid = [] for i in range(m): row = [] for j in range(n): row.append(numbers[i * n + j]) grid.append(row) return grid"},{"question":"You are given three sequences: `A` with length `n`, `B` with length `m`, and `C` with length `p`. The goal is to find the length of the longest common subsequence (LCS) that is common to all three sequences. A subsequence is a sequence derived by deleting some or no elements without changing the order of the remaining elements. Input Format: - The first line contains three integers `n`, `m`, and `p` (1 le n, m, p le 1000). - The second line contains `n` integers representing the sequence `A` (1 le A_i le 10^4). - The third line contains `m` integers representing the sequence `B` (1 le B_i le 10^4). - The fourth line contains `p` integers representing the sequence `C` (1 le C_i le 10^4). Output Format: - Print a single integer, the length of the longest common subsequence that is common to all three sequences A, B, and C. Example: Input: ``` 3 3 3 1 2 3 2 1 3 3 1 2 ``` Output: ``` 1 ``` In the above example, the longest subsequence common to all three sequences is `[1]` or `[3]`, each of length 1. Note: - You need to solve this problem using dynamic programming. - Take care of the time complexity to ensure the solution is efficient enough for the given constraints.","solution":"def longest_common_subsequence(A, B, C): n = len(A) m = len(B) p = len(C) # Create a 3D DP table with dimensions (n+1) x (m+1) x (p+1) dp = [[[0 for _ in range(p + 1)] for _ in range(m + 1)] for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): for k in range(1, p + 1): if A[i - 1] == B[j - 1] == C[k - 1]: dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1 else: dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1]) return dp[n][m][p] # Sample data for testing n, m, p = 3, 3, 3 A = [1, 2, 3] B = [2, 1, 3] C = [3, 1, 2] # Should print 1 as LCS is [1] or [3] print(longest_common_subsequence(A, B, C))"},{"question":"You are given two blocks of text, string `A` and string `B`. Your task is to transform string `A` into string `B` using a minimum number of operations. The only allowed operations are: 1. **Insert**: Insert a single character into the string `A`. 2. **Delete**: Delete a single character from the string `A`. 3. **Replace**: Replace a single character in the string `A` with another character. Write a function that takes the strings `A` and `B` as input and returns the minimum number of operations required to transform string `A` into string `B`. # Input - The first line contains the string `A` (1 ≤ |A| ≤ 1000), the initial string. - The second line contains the string `B` (1 ≤ |B| ≤ 1000), the target string. # Output - A single integer representing the minimum number of operations needed to transform string `A` into string `B`. # Example Input ``` horse ros ``` Output ``` 3 ``` # Explanation One possible sequence of operations is: 1. Replace \'h\' with \'r\' 2. Delete \'t\' 3. Delete \'e\' All intermediate steps that transform `A` to `B` should be returned as well, but are not necessary in the final count of the operations. The primary goal is to output the count of the minimum operations.","solution":"def min_operations(A, B): Returns the minimum number of operations required to transform string A into string B. :param A: Original string :param B: Target string :return: Minimum number of operations m = len(A) n = len(B) dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the dp table for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # Insert all characters of B into A elif j == 0: dp[i][j] = i # Remove all characters of A elif A[i - 1] == B[j - 1]: dp[i][j] = dp[i - 1][j - 1] # Characters are the same, no operation needed else: dp[i][j] = 1 + min(dp[i - 1][j], # Remove (Delete) dp[i][j - 1], # Insert dp[i - 1][j - 1]) # Replace return dp[m][n]"},{"question":"You are given a list of n integers, each representing the strength of a soldier. Your task is to form the most powerful squad by selecting exactly k soldiers from this list. The strength of a squad is defined as the sum of the strengths of its members. Write a function `max_squad_strength(n: int, k: int, strengths: List[int]) -> int` that determines the maximum strength of a squad that can be formed. # Input - An integer n (1 ≤ n ≤ 100,000) — the number of soldiers. - An integer k (1 ≤ k ≤ n) — the number of soldiers to be selected to form the squad. - A list of n integers (1 ≤ strengths[i] ≤ 1,000,000) — the strengths of each soldier. # Output - An integer — the maximum strength of the squad you can form by selecting exactly k soldiers. # Example Input: ``` n = 6 k = 3 strengths = [100, 200, 300, 400, 500, 600] ``` Output: ``` 1500 ``` # Note In the example above, the three soldiers with the highest strengths are 400, 500, and 600. Their combined strength is 1500. Thus, the output is 1500.","solution":"from typing import List def max_squad_strength(n: int, k: int, strengths: List[int]) -> int: Determines the maximum strength of a squad by selecting exactly k soldiers from a list of n soldiers. Parameters: n (int): The number of soldiers. k (int): The number of soldiers to select. strengths (List[int]): The list of strengths of the soldiers. Returns: int: The maximum strength of the selected squad. # Sort the strengths in descending order strengths.sort(reverse=True) # Sum the top k strengths return sum(strengths[:k])"},{"question":"You are organizing a coding competition and need to distribute a number of prizes among the winners. Each winner must receive at least one prize, and you want to ensure that the distribution does not leave out any prize. You are given three integers: - `n` (the number of prizes), - `k` (the number of winners), and - `m` (the maximum number of prizes any individual winner can receive). Your task is to determine if it is possible to distribute all `n` prizes among `k` winners such that: 1. Each winner gets at least one prize. 2. No winner gets more than `m` prizes. If it is possible, print \\"YES\\" and any valid distribution of prizes. If it is not possible, print \\"NO\\". # Input The first line contains a single integer `t` (1 le t le 1000) — the number of test cases. Each of the next `t` lines contains three integers `n`, `k`, and `m` (1 le n, k le 10^9, 1 le m le 10^6). # Output For each test case, if it is possible to distribute the prizes as described, print \\"YES\\" on the first line and a second line containing `k` integers representing a valid distribution of prizes. If it is not possible, print \\"NO\\". If there are multiple valid distributions, print any. # Examples Example 1 Input: ``` 3 7 3 3 5 2 3 9 5 1 ``` Output: ``` YES 3 2 2 YES 3 2 NO ``` Example 2 Input: ``` 2 10 5 2 15 4 5 ``` Output: ``` YES 2 2 2 2 2 YES 5 5 5 0 ``` Explain the examples: 1. In the first test case, 7 prizes can be distributed to 3 winners such that no winner gets more than 3 prizes and each gets at least one prize. One possible distribution is `[3, 2, 2]`. 2. In the second test case, 5 prizes can be distributed to 2 winners and one valid distribution is `[3, 2]`. 3. In the third test case, it\'s not possible to distribute 9 prizes to 5 winners if each can only get at most 1 prize. Therefore, the output is \\"NO\\". 4. In the fourth test case, 10 prizes can be distributed to 5 winners with each receiving exactly 2 prizes. 5. In the fifth test case, the prizes can be distributed among winners as `[5, 5, 5, 0]`. # Notes - The core challenge is to ensure that each winner gets at least one prize without exceeding the maximum allowed prizes per winner. - Multiple valid distributions are possible; any valid array will be accepted.","solution":"def distribute_prizes(t, test_cases): results = [] for i in range(t): n, k, m = test_cases[i] if k > n or (k * m < n): results.append(\\"NO\\") else: base_prizes = [n // k] * k remainder = n % k for j in range(remainder): base_prizes[j] += 1 if max(base_prizes) <= m: results.append(\\"YES\\") results.append(\\" \\".join(map(str, base_prizes))) else: results.append(\\"NO\\") return results"},{"question":"You are given an n-digit number, where each digit is a non-negative integer (0–9). You are allowed to perform at most one operation: choose any two different positions in the number and swap their digits. Your goal is to maximize the resulting number possible after the swap operation. If no swap operation can improve the number, return the original number. The first line contains an integer n (1 ≤ n ≤ 18), the number of digits in the number. The second line contains an n-digit number represented as a string. Print the maximum number possible after at most one swap operation. Sample: Input: 4 2736 Output: 7236 Input: 3 123 Output: 321 Explanation: In the first sample, swapping 2 and 7 results in the maximum number 7236. In the second sample, swapping 1 and 3 results in the maximum number 321.","solution":"def maximize_number(n, number): Maximizes the number by performing at most one swap operation. number = list(number) max_number = number[:] for i in range(n): for j in range(i + 1, n): number[i], number[j] = number[j], number[i] if number > max_number: max_number = number[:] number[i], number[j] = number[j], number[i] return \'\'.join(max_number)"},{"question":"You are given two strings a and b consisting of lowercase English letters. Your task is to compute the length of the longest string c such that c is a subsequence of both a and b. A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters. The first line contains two integers n and m (1 le n, m le 1000) — the lengths of strings a and b, respectively. The second line contains the string a of length n. The third line contains the string b of length m. Print a single integer — the length of the longest common subsequence of a and b.","solution":"def longest_common_subsequence(a, b): Computes the length of the longest subsequence common to both strings a and b. n, m = len(a), len(b) dp = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): if a[i - 1] == b[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[n][m] # Example usage: # a = \\"abcde\\" # b = \\"ace\\" # print(longest_common_subsequence(a, b)) # Output should be 3"},{"question":"Nora\'s friends decided to join the fun and made a new game for ROBO_Head-02. This time they\'ve provided some different instructions for him to follow. Nora\'s friends brought a round table with k slots and a set of k coins. Each coin has a unique value between 1 and k. ROBO needs to place each coin in one of the slots such that the sum of the values of the coins in adjacent slots is either even or odd, depending on the friends\' choice. ROBO can rotate the table in any of the k possible ways, so two configurations are considered the same if one can be obtained by rotating the other. Can you assist ROBO to determine the number of distinct ways he can place the coins in the slots based on the given condition? The first line contains an integer k (4 le k le 20), denoting the number of slots (and coins). The second line contains a string condition (\'even\' or \'odd\'), indicating the type of sum ROBO needs to maintain. Assume the slots are arranged in a circle and adjacent slots are connected. ROBO needs to place each coin in one of the slots such that the sum of the values of coins in adjacent slots conforms to the given condition. Print the number of unique ways to place the coins in the slots under these conditions, modulo 10^9 + 7. # Example **Input** ``` 4 even ``` **Output** ``` 1 ``` **Input** ``` 5 odd ``` **Output** ``` 0 ``` **Explanation** For the first example, consider the coins have values {1, 2, 3, 4}. If the condition is \'even\', we need to place them such that values in two adjacent slots sum up to an even number. One possible valid configuration for k = 4 is: ``` 1-3-2-4 (rotating this configuration gives the same set). ``` For the second example, it\'s impossible to place 5 coins in such a way that all adjacent pairs of their sums are odd. Hence, there are 0 valid configurations.","solution":"def count_distinct_ways(k, condition): Returns the number of distinct ways to place the coins in the slots such that the sum of the values of the coins in adjacent slots is either even or odd. Parameters: k (int): Number of slots and coins. condition (str): The type of sum we need to maintain (\'even\' or \'odd\'). Returns: int: Count of distinct ways modulo 10^9 + 7. MOD = 10**9 + 7 if k % 2 == 1: # When k is odd, there is no valid way to satisfy the condition. return 0 if condition == \'even\': # Only one way for even condition rotating through k ways considered same return 1 % MOD if condition == \'odd\': # For odd condition, there are two unique configurations return 2 % MOD return 0 # Example Usage print(count_distinct_ways(4, \\"even\\")) # Output: 1 print(count_distinct_ways(5, \\"odd\\")) # Output: 0"},{"question":"Farmer John\'s farm has a number of cows standing in a straight line. The cows are numbered from 1 to n. Farmer John has a favorite subset S of the cows. Unfortunately, Farmer John is very particular about the positioning of the cows in subset S. He wants them to be standing in non-decreasing order of their indices, while all the other cows on the farm can be in any position. Given the array `a` which represents the initial positions of the cows, and the subset S which represents the cows\' indices that need to be in non-decreasing order, your task is to reorder the cows such that Farmer John\'s requirements are met. Return any valid reordered array. # Input - The first line contains two integers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ n) — the total number of cows and the size of the favorite subset S. - The second line contains an array `a` of length `n` where `a[i]` represents the cow initially at position `i+1`. - The third line contains `m` distinct integers which represent the indices of the subset S that need to be in non-decreasing order. # Output - Print an array of length `n` representing the positions of the cows after reordering according to Farmer John\'s requirements. If there are multiple valid outputs, print any of them. # Example Input ``` 5 3 5 4 3 2 1 2 4 5 ``` Output ``` 5 2 3 1 4 ``` # Explanation In the example, the cows at positions 2, 4 and 5 in the subset S need to be arranged in non-decreasing order, resulting in possible valid outputs like `5 2 3 1 4` or `5 3 2 1 4`.","solution":"def reorder_cows(n, m, a, S): Reorders the cows such that the cows in subset S are in non-decreasing order while all other cows can be in any position. Parameters: - n (int): Total number of cows. - m (int): Size of subset S. - a (list of int): Array representing the positions of cows. - S (list of int): Indices of the subset S which need to be in non-decreasing order. Returns: - list of int: Reordered array of cows\' positions. # Convert S indices to 0-based S = [s - 1 for s in S] # Extract the elements of the subset S from the array and sort them subset_values = sorted([a[s] for s in S]) # Create a result array and fill it with -1 indicating unassigned indices result = [-1] * n # Place the sorted subset values into the result array j = 0 for s in S: result[s] = subset_values[j] j += 1 # Fill in the other values at the unassigned positions other_values = [a[i] for i in range(n) if result[i] == -1] other_index = 0 for i in range(n): if result[i] == -1: result[i] = other_values[other_index] other_index += 1 return result"},{"question":"You are given two strings, `s` and `t`, where `s` represents a sequence of lowercase English letters and `t` is a string composed of distinct lowercase English letters. The task is to determine if `t` is a subsequence of `s` and to count the number of distinct ways this subsequence can be formed. A sequence `t` is a subsequence of `s` if it can be derived from `s` by deleting some (possibly zero) elements without changing the order of the remaining elements. Output a single integer — the number of distinct ways the subsequence `t` can be formed from the sequence `s`. **Input** The first line contains string `s` (1 ≤ |s| ≤ 100), a sequence of lowercase English letters. The second line contains string `t` (1 ≤ |t| ≤ 10), a sequence of distinct lowercase English letters. **Output** Output a single integer, the number of distinct ways the subsequence `t` can be formed from the sequence `s`. **Examples** Input: ``` babgbag bag ``` Output: ``` 5 ``` Input: ``` rabbbit rabbit ``` Output: ``` 3 ``` **Note:** In the first example, the subsequence `bag` can be formed in 5 different ways from `babgbag`. In the second example, the subsequence `rabbit` can be formed in 3 different ways from `rabbbit`.","solution":"def num_distinct_subsequences(s, t): Returns the number of distinct ways the subsequence t can be formed from the sequence s. # Create a 2D dp array with dimensions (len(t) + 1) x (len(s) + 1) dp = [[0] * (len(s) + 1) for _ in range(len(t) + 1)] # If t is an empty string, there is one way to match it with any s (remove all characters from s) for j in range(len(s) + 1): dp[0][j] = 1 for i in range(1, len(t) + 1): for j in range(1, len(s) + 1): if t[i - 1] == s[j - 1]: # Count both including and excluding the current character of s dp[i][j] = dp[i][j - 1] + dp[i - 1][j - 1] else: # Exclude the current character of s dp[i][j] = dp[i][j - 1] return dp[len(t)][len(s)]"},{"question":"Subhdeep is a robot enthusiast. He has built a robot that can navigate a grid-based maze represented as an n x m matrix. The robot starts from the top-left corner of the grid (cell (1,1)) and must navigate to the bottom-right corner (cell (n,m)), but some cells in the grid contain obstacles and cannot be traversed. The robot can move in four possible directions: up, down, left, and right. Determine the minimum number of steps required for the robot to reach its destination. If it is impossible for the robot to reach the bottom-right corner, return -1. The first line contains two integers n and m (1 ≤ n, m ≤ 1000) representing the dimensions of the grid. Each of the next n lines contains a string of length m consisting of characters \'.\' and \'#\'. A \'.\' signifies an empty cell the robot can navigate through, and a \'#\' represents an obstacle. Output a single integer, the minimum number of steps required for the robot to reach the bottom-right corner, or -1 if it is impossible. # Example: Input: ``` 4 4 ..#. ..#. ..#. .... ``` Output: ``` 6 ``` Explanation: The robot can follow this path: (1,1) → (2,1) → (3,1) → (4,1) → (4,2) → (4,3) → (4,4). Input: ``` 3 3 .#. # .#. ``` Output: ``` -1 ``` Explanation: There is no possible way for the robot to reach the bottom-right corner given the obstacles in the grid.","solution":"from collections import deque def min_steps_to_reach_end(n, m, grid): Determines the minimum number of steps required for the robot to reach the bottom-right corner of the grid or -1 if unreachable. def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] start = (0, 0) end = (n-1, m-1) if grid[0][0] == \'#\' or grid[end[0]][end[1]] == \'#\': return -1 queue = deque([(0, 0, 0)]) # (x, y, steps) visited = set() visited.add(start) while queue: x, y, steps = queue.popleft() if (x, y) == end: return steps for direction in directions: nx, ny = x + direction[0], y + direction[1] if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1"},{"question":"A group of friends is planning a road trip across several cities. They want to calculate the optimal route to minimize their travel time while visiting each city exactly once starting from their home city. They have a matrix of travel times between each pair of cities. Your task is to help them determine the minimum travel time required for their trip. You are given an integer n (2 ≤ n ≤ 15) representing the number of cities (including the home city), and an n x n matrix T, where T[i][j] (0 ≤ T[i][j] ≤ 1000) represents the travel time from city i to city j. The home city is denoted as city 0. There are no staying times in any city. Write a function `min_travel_time(n, T)` that takes in an integer n and a list of lists T representing the matrix of travel times, and returns the minimum travel time required to complete the trip starting from the home city, visiting each city exactly once, and returning to the home city. # Input - An integer n. - A 2D list T of size n x n representing travel times. # Output - An integer representing the minimum travel time. # Example ```python def min_travel_time(n, T): # Your code here # Example usage: n = 4 T = [ [0, 10, 15, 20], [10, 0, 35, 25], [15, 35, 0, 30], [20, 25, 30, 0] ] print(min_travel_time(n, T)) # Output: 80 ``` Explanation of the example: The minimum travel time is achieved by the route: 0 -> 1 -> 3 -> 2 -> 0. The total travel time is 10 + 25 + 30 + 15 = 80.","solution":"import itertools def min_travel_time(n, T): # Generate all permutations of the cities [1, 2, ..., n-1] (excluding the home city 0) permutations = itertools.permutations(range(1, n)) min_time = float(\'inf\') for perm in permutations: current_time = T[0][perm[0]] # Start at home city (0) for i in range(len(perm) - 1): current_time += T[perm[i]][perm[i + 1]] current_time += T[perm[-1]][0] # Return to the home city (0) min_time = min(min_time, current_time) return min_time"},{"question":"In a software engineering company, n engineers have been tasked with reviewing m software modules. Each module has a complexity level associated with it, denoted as an integer value. The engineers must complete the reviews within a set deadline. Each engineer has a maximum capacity of handling a certain total complexity of modules in a given time frame. The company\'s primary goal is to distribute the reviews such that the total workload of each engineer does not exceed their capacity and all modules get reviewed within the deadline. Each engineer has a distinct capacity, and each module a distinct complexity value. You are to determine if it is possible to assign all the modules to the engineers following the constraints. The input format is as follows: - The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of engineers and the number of modules, respectively. - The second line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 1000) — the capacities of the engineers. - The third line contains m integers d1, d2, ..., dm (1 ≤ di ≤ 1000) — the complexity values of the modules. The output should be a single string \\"YES\\" if it is possible to assign all the modules to the engineers within their capacities, or \\"NO\\" otherwise. For example: Input: ``` 3 5 500 1000 300 200 100 400 500 300 ``` Output: ``` YES ``` In this example, Engineer 1 (capacity 500) can review modules 1 and 2 (complexity 200 and 100). Engineer 2 (capacity 1000) can review modules 4 and 5 (complexity 500 and 300). Engineer 3 (capacity 300) can review module 3 (complexity 400), but since this distribution exceeds the capacity of Engineer 3, the output should be \\"NO\\". Thus, assigning differently, Engineer 1 (capacity 500) can review modules 1 and 2 (complexity 200 and 100), Engineer 2 (capacity 1000) can review modules 3 and 4 (complexity 400 and 500), and Engineer 3 (capacity 300) can review module 5 (complexity 300), fulfilling all conditions. The output should be \\"YES\\". Note: When distributing modules, you must ensure that the total complexity assigned to any given engineer does not exceed their capacity constraints. Use appropriate data structures and algorithms to efficiently solve the assignment problem.","solution":"def can_modules_be_reviewed(n, m, capacities, complexities): Determines if it\'s possible to assign all the modules to the engineers such that no engineer exceeds their capacity and all modules get reviewed. Parameters: n (int): Number of engineers m (int): Number of modules capacities (list of int): Capacities of the engineers complexities (list of int): Complexities of the modules Returns: str: \\"YES\\" if it is possible to do the assignment, else \\"NO\\" # Sort capacities in ascending order capacities.sort() # Sort complexities in descending order complexities.sort(reverse=True) if sum(complexities) > sum(capacities): return \\"NO\\" for complexity in complexities: for i in range(n): if capacities[i] >= complexity: capacities[i] -= complexity break else: return \\"NO\\" return \\"YES\\""},{"question":"**Problem Statement**: You are given a map of a city grid where some of the cells are obstacles, and others are passable. You need to find the shortest path from a given starting cell to a destination cell. The city grid is represented as a 2D array of integers, where `0` represents a passable cell and `1` represents an obstacle. You can move up, down, left, or right from any passable cell, but you cannot move diagonally. Moreover, you cannot move through the obstacles. Write a function `shortestPath(grid, start, end)` that takes in: - a 2D array `grid` representing the city map, - a tuple `start` representing the starting cell\'s coordinates (row, column), - a tuple `end` representing the destination cell\'s coordinates (row, column), and returns the length of the shortest path from the `start` to the `end` cell. If there is no possible path, return `-1`. # Input - The `grid` will have dimensions n x m (1 ≤ n, m ≤ 100). - Element grid[i][j] is either 0 (passable) or 1 (obstacle). - Both `start` and `end` will contain valid indices within the grid. # Output - The output should be a single integer representing the length of the shortest path from the `start` to the `end` cell, or `-1` if no path exists. # Example ```python grid = [ [0, 0, 1, 0, 0], [0, 0, 0, 0, 1], [0, 1, 0, 1, 0], [1, 0, 0, 0, 0], [0, 0, 1, 0, 0] ] start = (0, 0) end = (4, 4) print(shortestPath(grid, start, end)) ``` Output: `8` In the example above, the shortest path avoids the obstacles and reaches the destination in 8 steps. If the path is not possible, your function should correctly return `-1`.","solution":"from collections import deque def shortestPath(grid, start, end): Finds the shortest path in a 2D grid from start to end. Returns the length of the shortest path if it exists, otherwise returns -1. # Directions for moving up, down, left, and right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Number of rows and columns in the grid n = len(grid) m = len(grid[0]) # Check if start or end are obstacles if grid[start[0]][start[1]] == 1 or grid[end[0]][end[1]] == 1: return -1 # Queue for BFS queue = deque([(start, 0)]) visited = set() visited.add(start) while queue: (current, distance) = queue.popleft() # If we have reached the end, return the distance if current == end: return distance # Check all 4 possible movements for direction in directions: next_row, next_col = current[0] + direction[0], current[1] + direction[1] if 0 <= next_row < n and 0 <= next_col < m and (next_row, next_col) not in visited and grid[next_row][next_col] == 0: visited.add((next_row, next_col)) queue.append(((next_row, next_col), distance + 1)) # If no path is found return -1"},{"question":"Lucas is working on a text processing tool that identifies the relationships between words in sentences. One of the features he needs to implement is a function that can extract and display all the pairs of words that appear in the same sentence, following a specific order. Given a list of sentences, where each sentence is a string containing words separated by spaces, write a function that extracts all ordered pairs of words from each sentence. A pair (w1, w2) is ordered if w1 appears before w2 in the sentence. # Input: - The first line contains an integer t (1 le t le 100) — the number of sentences. - The next t lines each contain one sentence. # Output: - For each sentence, output all ordered pairs of words in separate lines. - Each pair should be formatted as \\"(w1, w2)\\" where w1 and w2 are words from the sentence. # Example: Input: ``` 2 hello world coding assessment question ``` Output: ``` (hello, world) (coding, assessment) (coding, question) (assessment, question) ``` # Constraints: - Each sentence will contain at least two words and a maximum of 100 words. - Each word consists of only lowercase English letters and has a length between 1 and 20 characters. - The total length of each sentence is at most 1000 characters. # Notes: - Each sentence results in pairs that respect the order of words as they appear in the sentence. - You can print the pairs in any order. - Make sure to handle edge cases such as sentences having multiple occurrences of the same word.","solution":"def extract_ordered_pairs(t, sentences): Extract all ordered pairs of words from each sentence where a pair (w1, w2) is ordered if w1 appears before w2 in the sentence. Parameters: t (int): The number of sentences. sentences (list of str): The list of sentences. Returns: list of list of tuples: A list of lists where each sublist contains tuples representing ordered pairs from each sentence. result = [] for sentence in sentences: words = sentence.split() pairs = [(words[i], words[j]) for i in range(len(words)) for j in range(i + 1, len(words))] result.append(pairs) return result"},{"question":"A conveyor belt has n packages moving on it. Each package has a weight and a label indicating whether it is a fragile (F) or a non-fragile (N) item. The goal is to determine the minimum number of swaps required such that all fragile items appear before all non-fragile ones on the conveyor belt. You are allowed to swap any two packages regardless of their types. Each package is represented by an integer weight and a character label (either \'F\' or \'N\'). The packages are described in a list of pairs, where each pair consists of an integer and a character. The first line contains an integer n (1 ≤ n ≤ 100), denoting the number of packages on the conveyor belt. The next n lines each contain an integer wi (1 ≤ wi ≤ 10^9), denoting the weight of the i-th package, followed by a character ci (\'F\' or \'N\'), denoting the label of the i-th package. Print a single integer — the minimum required number of swaps to arrange the packages so that all fragile items appear before all non-fragile items. If it is not possible to make such an arrangement, print -1. # Examples: Input: 5 8 F 3 N 4 F 2 N 1 F Output: 2 Input: 4 4 F 5 F 6 F 1 F Output: 0 Input: 3 2 N 1 N 3 N Output: 0","solution":"def min_swaps_to_group_fragile(packages): Returns the minimum number of swaps required so that all fragile items appear before all non-fragile ones on the conveyor belt. n = len(packages) fragiles = [pkg for pkg in packages if pkg[1] == \'F\'] non_fragiles = [pkg for pkg in packages if pkg[1] == \'N\'] # Total fragile and non-fragile count total_fragile = len(fragiles) total_non_fragile = len(non_fragiles) # If there are no fragile items or no non-fragile items, # they are already segregated. if total_fragile == 0 or total_non_fragile == 0: return 0 swaps = 0 i, j = 0, 0 while i < total_fragile and j < total_non_fragile: # Find the first non-fragile in the first half (fragiles\' zone) while i < n and packages[i][1] == \'F\': i += 1 # Find the first fragile in the second half (non-fragiles\' zone) while j < n and packages[n-1-j][1] == \'N\': j += 1 # Swap positions if i < n and (n-1-j) >= 0: packages[i], packages[n-1-j] = packages[n-1-j], packages[i] swaps += 1 i += 1 j += 1 return swaps"},{"question":"In a distant land, the monarchy has just begun and a new capital city is under construction. The city is designed as a grid of streets and avenues. Each intersection of a street and an avenue is given as (x, y). As part of a ceremony, the monarch decides to place a giant flag at every intersection that forms a square when connected with four different intersections on the grid. You are given a list of coordinates representing intersections in the city. Your task is to determine how many unique squares can be formed by these intersections. Two squares are considered different if they do not coincide exactly when shifted or rotated. The first line of input contains an integer n (1 ≤ n ≤ 1000), denoting the number of intersections. The following n lines each contain two space-separated integers xi and yi (1 ≤ xi, yi ≤ 100), denoting the coordinates of an intersection. Print a single integer — the number of unique squares that can be formed by these intersections. For example, **Input:** ``` 5 1 1 1 2 2 1 2 2 3 3 ``` **Output:** ``` 1 ``` **Explanation:** There is exactly one square that can be formed by the intersections (1,1), (1,2), (2,1), and (2,2). The intersection at (3,3) does not form a square with the other points.","solution":"def count_unique_squares(intersections): points = set((x, y) for x, y in intersections) count = 0 for (x1, y1) in points: for (x2, y2) in points: if x1 != x2 and y1 != y2 and (x1, y2) in points and (x2, y1) in points: count += 1 return count // 4 # Read input def count_unique_squares_from_input(input_str): lines = input_str.strip().split(\'n\') n = int(lines[0]) intersections = [tuple(map(int, line.split())) for line in lines[1:n+1]] return count_unique_squares(intersections)"},{"question":"You are given a binary tree where each node contains an integer value. Your task is to determine if the binary tree is a valid Binary Search Tree (BST). A valid BST is defined as follows: - The left subtree of a node contains only nodes with values less than the node\'s value. - The right subtree of a node contains only nodes with values greater than the node\'s value. - Both the left and right subtrees must also be binary search trees. Your program will be provided with a description of the binary tree in a list format, where each element is a tuple representing a node and its left and right children respectively. Each tuple is of the form `(value, left_index, right_index)`. If a node does not have a left or right child, the corresponding index in the tuple will be `None`. # Input - The first line contains an integer `n` (1 leq n leq 10^5), the number of nodes in the binary tree. - The next `n` lines contain the node descriptions. Each line contains a tuple `(value, left_index, right_index)` where: - `value` is an integer representing the value of the node. - `left_index` is the index of the left child node or `None` if there is no left child. - `right_index` is the index of the right child node or `None` if there is no right child. # Output - Output \\"YES\\" if the binary tree is a valid BST. - Output \\"NO\\" if the binary tree is not a valid BST. # Example **Input:** ``` 3 (2, 1, 2) (1, None, None) (3, None, None) ``` **Output:** ``` YES ``` **Explanation:** The given binary tree can be represented as: ``` 2 / 1 3 ``` This binary tree is a valid Binary Search Tree. **Input:** ``` 3 (2, 1, 2) (3, None, None) (1, None, None) ``` **Output:** ``` NO ``` **Explanation:** The given binary tree can be represented as: ``` 2 / 3 1 ``` This binary tree is not a valid Binary Search Tree because the left subtree node 3 is greater than the root node 2. # Note: You should implement a function to check the validity of the BST by performing an in-order traversal or using a helper function to validate the BST properties recursively. Ensure that your solution efficiently handles the input constraints provided.","solution":"def is_valid_bst(tree): def validate(node_index, low, high): if node_index is None: return True value, left_index, right_index = tree[node_index] if value <= low or value >= high: return False return validate(left_index, low, value) and validate(right_index, value, high) return validate(0, float(\'-inf\'), float(\'inf\'))"},{"question":"Consider a sequence of integers. A subsequence of this sequence is defined as any sequence that can be derived from the original sequence by deleting some (or no) elements without changing the order of the remaining elements. The sum of a subsequence is the sum of its elements. Given an integer array, your task is to calculate the number of distinct sums that can be obtained from its non-empty subsequences. The first line contains an integer n (1 ≤ n ≤ 50) — the length of the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the array. Print one integer — the number of distinct sums of non-empty subsequences. For example: In the first example the array is [1, 2, 3]. The possible non-empty subsequences are [1], [2], [3], [1, 2], [1, 3], [2, 3], and [1, 2, 3], which have sums 1, 2, 3, 3, 4, 5, and 6 respectively. The distinct sums are 1, 2, 3, 4, 5, and 6, and there are 6 of them. In the second example the array is [1, 1, 1]. The possible non-empty subsequences are [1], [1], [1], [1, 1], [1, 1], [1, 1], and [1, 1, 1], which have sums 1, 1, 1, 2, 2, 2, and 3 respectively. The distinct sums are 1, 2, and 3, and there are 3 of them.","solution":"def count_distinct_subsequence_sums(arr): Returns the number of distinct sums from non-empty subsequences of the given array. n = len(arr) distinct_sums = set() # There are 2^n subsequences counts (including the empty one) for i in range(1, 2**n): subsequence_sum = 0 for j in range(n): if i & (1 << j): subsequence_sum += arr[j] distinct_sums.add(subsequence_sum) return len(distinct_sums)"},{"question":"In a city, there is a grid with n rows and m columns. Some cells are blocked, denoted by \'#\', and others are free to cross, denoted by \'.\'. Starting from the top-left corner at (1, 1), navigate to the bottom-right corner at (n, m) by moving either right or down one cell at a time. Find the number of distinct paths from the top-left corner to the bottom-right corner. If there is no valid path, return 0. The first line contains two integers n and m (1 le n, m le 100) — the grid dimensions. The next n lines contain m characters each, where each character is either \'.\' or \'#\'. Each character represents the state of a cell in the grid. Output a single integer — the number of distinct paths from the top-left corner to the bottom-right corner. Example: Input: ``` 3 3 . . . . # . . . . ``` Output: ``` 2 ```","solution":"def count_paths(n, m, grid): Returns the number of distinct paths from the top-left to the bottom-right corner of the grid. :param n: Number of rows in the grid :param m: Number of columns in the grid :param grid: List of strings representing the grid :return: Number of distinct paths if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 # Start point for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1] # Example usage: # n = 3 # m = 3 # grid = [ # \\"...\\", # \\".#.\\", # \\"...\\"] # print(count_paths(n, m, grid)) # Output: 2"},{"question":"The local wildlife sanctuary is trying to set up a new enclosure for some birds. The enclosure is in the shape of a perfect circle, but due to budget constraints, they have to position the water fountains at certain specific points which makes the circle a bit harder to finalize. The sanctuary management team has marked out some points on the ground where the fountains will be, but not all the required points for the circle are present. Given the points marked, the sanctuary team wants to determine the radius of the smallest circle that would encompass all the marked points. The first line of the input contains a single integer n (1 ≤ n ≤ 100) - the number of points that are marked on the ground. Each of the following n lines contains two integers xi and yi (-1000 ≤ xi, yi ≤ 1000) - the coordinates of the i-th point. Your task is to compute and print the radius of the smallest circle that can encompass all the marked points. The radius should be printed as a float with 6 decimal precision. In the first sample, the two points indicate the diameter of a circle, determining a minimal circle that can contain both points inside. In the second sample, the points are positioned at a triangular shape creating a minimal circle able to encompass them entirely. Example: Input: 3 -1 0 1 0 0 1 Output: 1.000000","solution":"import math def smallest_encompassing_circle_radius(points): Determine the radius of the smallest circle that encompasses all the given points. :param points: List of tuples, where each tuple contains the x and y coordinates of a point. :return: The radius of the smallest circle. def distance(p1, p2): return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2) n = len(points) max_distance = 0.0 # Compare all pairs of points to find the maximum distance for i in range(n): for j in range(i + 1, n): dist = distance(points[i], points[j]) if dist > max_distance: max_distance = dist # The radius of the smallest circle is half of the maximum distance found radius = max_distance / 2 return radius # Example usage points = [(-1, 0), (1, 0), (0, 1)] print(f\\"{smallest_encompassing_circle_radius(points):.6f}\\")"},{"question":"In this problem, you are tasked with designing a simple banking system that handles basic transactions and account management for its users. Each user can create an account, deposit money into their account, withdraw money, and check their account balance. The system should process a series of commands and execute them accordingly. The commands can be of the following types: 1. **CREATE user_id**: Creates a new account for the user with the given user_id. The initial balance of a new account is 0. If an account with the given user_id already exists, this command should be ignored. 2. **DEPOSIT user_id amount**: Deposits the specified amount of money into the account of the user with the given user_id. If no such user exists, this command should be ignored. 3. **WITHDRAW user_id amount**: Withdraws the specified amount of money from the account of the user with the given user_id. If the user does not exist or if the account does not have enough balance, this command should be ignored. 4. **BALANCE user_id**: Prints the current balance of the account of the user with the given user_id. If no such user exists, it should print `ERROR`. Input consists of multiple lines, each containing one of the commands as described above. The commands should be executed in the order they appear in the input. The input ends when there are no more commands. Output the result of each BALANCE command or any errors specified above. Constraints: - The length of each user_id will be between 1 and 10 characters. - The amount for DEPOSIT and WITHDRAW commands will be a positive integer less than or equal to 1000. - Commands and user_id are case-sensitive. Consider the following example input: ``` CREATE Alice DEPOSIT Alice 100 BALANCE Alice WITHDRAW Alice 50 BALANCE Alice WITHDRAW Alice 60 BALANCE Alice CREATE Bob BALANCE Bob DEPOSIT Bob 200 BALANCE Bob WITHDRAW Charlie 10 BALANCE Charlie ``` Corresponding output for the example input: ``` 100 50 ERROR 0 200 ERROR ```","solution":"class BankSystem: def __init__(self): self.accounts = {} def create(self, user_id): if user_id not in self.accounts: self.accounts[user_id] = 0 def deposit(self, user_id, amount): if user_id in self.accounts: self.accounts[user_id] += amount def withdraw(self, user_id, amount): if user_id in self.accounts and self.accounts[user_id] >= amount: self.accounts[user_id] -= amount def balance(self, user_id): if user_id in self.accounts: return self.accounts[user_id] return \\"ERROR\\" def execute_commands(self, commands): results = [] for command in commands: parts = command.split() action = parts[0] if action == \\"CREATE\\": self.create(parts[1]) elif action == \\"DEPOSIT\\": self.deposit(parts[1], int(parts[2])) elif action == \\"WITHDRAW\\": self.withdraw(parts[1], int(parts[2])) elif action == \\"BALANCE\\": result = self.balance(parts[1]) results.append(result) return results"},{"question":"You are given a string s consisting of lowercase English letters. Your goal is to determine the minimum number of contiguous substrings into which the string s can be divided such that each substring contains at most one unique character. The first line of the input contains a single string s consisting of no more than 300 characters from \'a\' to \'z\'. Print one line — the minimum number of contiguous substrings into which the string can be divided so that each substring contains at most one unique character.","solution":"def min_unique_substrings(s): Returns the minimum number of contiguous substrings such that each substring contains at most one unique character. if not s: return 0 count = 1 for i in range(1, len(s)): if s[i] != s[i - 1]: count += 1 return count"},{"question":"You are given an undirected graph with n vertices and m edges. Each vertex i has a unique identifier i (1 le i le n) and a specified degree requirement d_i. The degree requirement of a vertex indicates the exact number of edges that should be connected to it in any valid subgraph. Your task is to determine if it is possible to select a subgraph from the given graph such that each vertex i in the subgraph exactly satisfies its degree requirement d_i. If it is possible, you should also output one such subgraph. The input format is as follows: The first line contains two integers n and m (1 le n le 100, 0 le m le 1000) - the number of vertices and edges in the graph, respectively. The second line contains n integers d_1, d_2, dots, d_n (0 le d_i le n-1) - the degree requirements of the vertices. The following m lines contain edges: each edge is specified by two integers u and v (1 le u, v le n, u neq v) indicating an edge between vertex u and vertex v. It is guaranteed that the graph does not contain multiple edges or loops. If a valid subgraph exists, print \\"YES\\" followed by the list of edges in any valid subgraph. If there are multiple valid subgraphs, print any of them. If no valid subgraph exists, print \\"NO\\". # Example **Input:** ``` 4 5 2 2 1 1 1 2 1 3 2 3 3 4 2 4 ``` **Output:** ``` YES 1 2 2 3 3 4 ``` In this example, vertices 1 and 2 have degree 2, vertex 3 has degree 1, and vertex 4 has degree 1. The output represents a subgraph with the required degrees for each vertex.","solution":"def find_valid_subgraph(n, m, degrees, edges): from collections import defaultdict # Initialize necessary structures graph = defaultdict(list) edge_list = [] # Build the adjacency list from the given edges for u, v in edges: graph[u].append(v) graph[v].append(u) # Sort the nodes by their degree requirements sorted_nodes = sorted(range(1, n + 1), key=lambda x: degrees[x - 1], reverse=True) current_degrees = [0] * (n + 1) used_edges = set() def can_add_edge(u, v): if current_degrees[u] < degrees[u - 1] and current_degrees[v] < degrees[v - 1]: if (u, v) not in used_edges and (v, u) not in used_edges: return True return False # Go through the sorted nodes to try and match their degree requirements for u in sorted_nodes: for v in graph[u]: if can_add_edge(u, v): used_edges.add((u, v)) edge_list.append((u, v)) current_degrees[u] += 1 current_degrees[v] += 1 if current_degrees[u] == degrees[u - 1]: break # Check if all nodes meet their degree requirements for node in range(1, n + 1): if current_degrees[node] != degrees[node - 1]: return \\"NO\\" output = [\\"YES\\"] for u, v in edge_list: output.append(f\\"{u} {v}\\") return \\"n\\".join(output) # Example input (can be replaced or modified as needed for testing) n = 4 m = 5 degrees = [2, 2, 1, 1] edges = [(1, 2), (1, 3), (2, 3), (3, 4), (2, 4)] print(find_valid_subgraph(n, m, degrees, edges))"},{"question":"# Compute Median of Sliding Window You are given an array of integers `nums` and an integer `k` representing the window size. Your task is to compute the median of each sliding window of size `k` and return an array of the medians. The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value; hence the median is the mean of the two middle values. To solve this problem, perform the following steps: 1. Implement a function `medianSlidingWindow(nums, k)` that takes a list of integers, `nums`, and an integer, `k`. 2. The function should slide a window of size `k` over the array `nums` and compute the median for each window position. 3. Return an array of the medians. # Input - `nums`: an array of integers (1 ≤ len(nums) ≤ 10^5, -10^5 ≤ nums[i] ≤ 10^5) - `k`: an integer representing the window size (1 ≤ k ≤ len(nums)) # Output - An array of floats representing the median of each sliding window. # Example **Input:** ``` nums = [1, 3, -1, -3, 5, 3, 6, 7] k = 3 ``` **Output:** ``` [1.0, -1.0, -1.0, 3.0, 5.0, 6.0] ``` **Explanation:** For the above input, ``` Window position Median [1 3 -1] -3 5 3 6 7 -> 1.0 1 [3 -1 -3] 5 3 6 7 -> -1.0 1 3 [-1 -3 5] 3 6 7 -> -1.0 1 3 -1 [-3 5 3] 6 7 -> 3.0 1 3 -1 -3 [5 3 6] 7 -> 5.0 1 3 -1 -3 5 [3 6 7] -> 6.0 ``` # Constraints - Implement an efficient algorithm with a target of O(n log k) time complexity.","solution":"import bisect def medianSlidingWindow(nums, k): def find_median(window): n = len(window) mid = n // 2 if n % 2 == 1: return float(window[mid]) else: return (window[mid - 1] + window[mid]) / 2 result = [] window = sorted(nums[:k]) for i in range(k, len(nums) + 1): result.append(find_median(window)) if i < len(nums): window.remove(nums[i - k]) bisect.insort(window, nums[i]) return result"},{"question":"Johnny is fascinated with prime numbers and he has a special interest in prime number indices. A prime number index is defined as an index i in an array such that the value at index i is a prime number. Johnny has an array of integers and he wants to answer multiple queries regarding the prime number indices. You are given an array of n integers and q queries. Each query asks for the count of prime number indices within a specific subarray. Formally, each query is represented by two integers l and r, and you need to return the number of prime number indices in the subarray from index l to r (inclusive). Input: - The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array. - The second line contains n space-separated integers a1, a2, ..., an (-10^6 ≤ ai ≤ 10^6), the elements of the array. - The third line contains an integer q (1 ≤ q ≤ 10^5), the number of queries. - The next q lines each contain two space-separated integers l and r (1 ≤ l ≤ r ≤ n), representing the range of the query. Output: - For each query, output the count of prime number indices in the specified subarray. Example: Input: 6 2 3 4 5 6 7 3 1 3 4 6 1 6 Output: 2 2 4 Explanation: - In the first query, the subarray is [2, 3, 4]. Indices 1 and 2 are prime number indices. - In the second query, the subarray is [5, 6, 7]. Indices 4 and 6 are prime number indices. - In the third query, the entire array is considered. Indices 1, 2, 4, and 6 are prime number indices.","solution":"def is_prime(num): Helper function to determine if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False sqrt_n = int(num**0.5) for i in range(3, sqrt_n + 1, 2): if num % i == 0: return False return True def preprocess_prime_indices(arr): Preprocess the array to get list of boolean values indicating if element at each index is prime or not. prime_flags = [is_prime(num) for num in arr] prefix_sum_primes = [0] * len(arr) prefix_sum_primes[0] = prime_flags[0] for i in range(1, len(arr)): prefix_sum_primes[i] = prefix_sum_primes[i - 1] + prime_flags[i] return prefix_sum_primes def count_prime_indices_in_subarray(prefix_sum, l, r): Returns the count of prime indices in the subarray from l to r (inclusive). if l == 0: return prefix_sum[r] return prefix_sum[r] - prefix_sum[l - 1] # Function to answer each query def prime_indices_query(n, arr, queries): prefix_sum_primes = preprocess_prime_indices(arr) results = [] for l, r in queries: # Convert 1-based index to 0-based index result = count_prime_indices_in_subarray(prefix_sum_primes, l-1, r-1) results.append(result) return results"},{"question":"Given a matrix of size n x m filled with non-negative integers, your task is to find the largest rectangle containing only zeros and return its area. Input Format: - The first line contains two integers n (number of rows) and m (number of columns) (1 ≤ n, m ≤ 1000). - Each of the next n lines contains m integers (0 or 1), representing the matrix elements. Output Format: - Output one integer, the area of the largest rectangle containing only zeros. Example: Input: 4 4 1 0 0 1 0 0 0 1 0 0 1 0 1 0 0 0 Output: 4 Explanation: In the given matrix, 1 0 0 1 0 0 0 1 0 0 1 0 1 0 0 0 The largest rectangle containing only zeros has an area of 4, and it is formed by the submatrix: 0 0 0 0","solution":"def maximal_rectangle(matrix): if not matrix: return 0 n, m = len(matrix), len(matrix[0]) max_area = 0 dp = [0] * m for i in range(n): for j in range(m): dp[j] = dp[j] + 1 if matrix[i][j] == 0 else 0 max_area = max(max_area, largest_rectangle_area(dp)) return max_area def largest_rectangle_area(heights): stack = [] max_area = 0 heights.append(0) for i in range(len(heights)): while stack and heights[stack[-1]] > heights[i]: h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) heights.pop() return max_area"},{"question":"You are given a list of integers. Your task is to perform a series of operations on this list and return the results. Each operation can be one of the following: 1. Add an integer to the end of the list. 2. Remove the last integer from the list. 3. Return the maximum value in the list. The first line of input contains a single integer n (1 ≤ n ≤ 10^5), the number of operations. The next n lines describe the operations. Each line will start with an integer ti (1 ≤ ti ≤ 3), denoting the type of operation: 1. If ti = 1, it will be followed by one integer xi (|xi| ≤ 10^9) which you must append to the end of the list. 2. If ti = 2, you must remove the last integer from the list. 3. If ti = 3, you must output the maximum value in the list. It is guaranteed that all operations are valid (do not attempt to remove from an empty list or find the maximum of an empty list). Output should be the maximum value of the list after each type 3 operation. # Example **Input:** ``` 7 1 4 1 2 3 1 8 2 3 2 ``` **Output:** ``` 4 4 ``` # Explanation - Initially perform operation (1, 4) -> List = [4] - Perform operation (1, 2) -> List = [4, 2] - Perform operation (3) -> List = [4, 2], Max = 4 - Perform operation (1, 8) -> List = [4, 2, 8] - Perform operation (2) -> List = [4, 2] - Perform operation (3) -> List = [4, 2], Max = 4 - Perform operation (2) -> List = [4]","solution":"def perform_operations(n, operations): Perform a series of operations on a list and return results for type 3 operations. Parameters: n (int): The number of operations. operations (list): List of tuples where each tuple represents an operation. Returns: list: List of results after each type 3 operation. result = [] stack = [] for operation in operations: if operation[0] == 1: stack.append(operation[1]) elif operation[0] == 2: stack.pop() elif operation[0] == 3: result.append(max(stack)) return result"},{"question":"You are working on a project that has a list of tasks. Each task has a certain duration and a given deadline by which it should be completed. You need to write an algorithm to determine how many tasks can be completed on time if you choose to work on tasks one by one. You are given an array of integers `durations` where each element represents the duration of a task and another array `deadlines` of the same length where each element represents the deadline by which the corresponding task should be completed. You can work on the tasks in any order, but once you start a task, you need to continue until it is finished before starting another. Only when a task is finished by or exactly at its deadline will it be considered as completed on time. Your task is to write a function that takes in these two arrays and returns the maximum number of tasks that can be completed on time. # Input: - The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of tasks. - The second line contains n integers where each integer is a positive number representing the duration of each task. - The third line contains n integers where each integer is a positive number representing the deadline of each task. # Output: - The output should be a single integer — the maximum number of tasks that can be completed on time. # Sample Input: ``` 5 3 2 1 4 5 4 3 2 7 5 ``` # Sample Output: ``` 3 ``` # Explanation: In this example, we can complete the tasks in the following way: 1. Task with duration 1 by its deadline 2. 2. Task with duration 2 by its deadline 3. 3. Task with duration 3 by its deadline 4. So, a total of 3 tasks can be completed on time. # Notes: - Tasks can be reordered to maximize the number of on-time completions. - Consider using sorting as part of your strategy to optimize which tasks to undertake first.","solution":"def max_tasks_on_time(durations, deadlines): Determines the maximum number of tasks that can be completed on time. :param durations: List of task durations. :param deadlines: List of task deadlines. :return: Maximum number of tasks that can be completed on time. tasks = sorted(zip(durations, deadlines), key=lambda x: x[1]) current_time = 0 completed_tasks = 0 for duration, deadline in tasks: if current_time + duration <= deadline: current_time += duration completed_tasks += 1 return completed_tasks"},{"question":"In a land far away, there is a great festival happening in the City of Miracles. The city has k districts, and each district is represented by a set of unique mystical creatures. There are p distinct species of mystical creatures across the city, numbered from 1 to p. The festival involves a grand event where each mystical creature participates in a ritual transformation. The species of a mystical creature can change after transformation, but the process has the following constraints: 1. If two mystical creatures are of the same species before transformation, they must be of the same species after transformation. 2. If two mystical creatures are of different species before transformation, they must be of different species after transformation. 3. It is possible for a mystical creature to retain the same species after transformation. An important part of the festival\'s tradition is that the number of creatures of each species in every district remains the same post-transformation. Formally, a transformation plan is a permutation g of {1, 2, ..., p}, such that g(x) = y implies that a mystical creature of species x transforms into a mystical creature of species y. The festival organizers want to know the number of distinct transformation plans that satisfy these conditions and ensure that the species distribution remains consistent in each district after transformation. Since the result can be very large, output the result modulo 10^9 + 7. The first line contains two integers k and p (1 ≤ k ≤ 100, 1 ≤ p ≤ 1000) — the number of districts and the number of species. The next k lines contain the description of mystical creatures in the districts. The i-th of these lines begins with the integer qi (1 ≤ qi ≤ 100) — the number of creatures in the i-th district. After that, qi integers follow, denoting the species of the mystical creatures in the i-th district. Each of these integers is between 1 and p. The total number of mystical creatures (the sum of all qi) does not exceed 10^4. Output the number of valid transformation plans modulo 10^9 + 7. Example Input: 3 3 5 1 2 3 2 1 4 2 3 2 3 3 1 1 1 Example Output: 6 Explanation: 1. The only possible transformation plan without changing the number of mystical creatures of each type is to map each type to itself. 2. Any permutation of {1, 2, 3} is valid. 3. Two possible plans are: {(1→2, 2→1), (1→1, 2→2)} Note: Provide appropriate explanation of the examples or logic if required.","solution":"MOD = 10**9 + 7 def factorial_mod(n, mod): Compute n! % mod using iterative approach. result = 1 for i in range(1, n + 1): result = (result * i) % mod return result def number_of_transformation_plans(k, p, districts): Given the number of districts and species and their distributions in districts, return the number of valid transformation plans. # The number of valid transformation plans is p! return factorial_mod(p, MOD)"},{"question":"# Problem Statement In the vast land of Codeonia, there lies a mystical forest guarded by the wise wizard Scrollus. Scrollus has enchanted the forest with a special spell to ensure that the paths within it are never overrun by wild beasts. This spell ensures that only a certain number of paths are open on any given day. The forest can be represented as a grid with `n` rows and `m` columns, where each cell can either be an open path (1) or a blocked path (0). At the beginning of each day, Scrollus chooses to open certain paths such that you can travel from the top-left corner of the forest (0,0) to the bottom-right corner (n-1,m-1). However, you can only travel left, right, up, or down, and cannot travel diagonally. Given the current state of the forest with blocked (0) and open (1) paths, determine if it is possible to travel from the top-left corner to the bottom-right corner. # Input Format - The first line contains two integers, `n` and `m` (1 ≤ n, m ≤ 1000) — the dimensions of the forest grid. - Each of the next `n` lines contains `m` integers (either 0 or 1), representing the state of the forest grid. # Output Format - Print \\"YES\\" if there is a way to travel from the top-left corner to the bottom-right corner. - Print \\"NO\\" otherwise. # Sample Input ``` 4 5 1 0 1 1 0 1 1 0 1 0 0 1 1 1 1 0 0 0 1 1 ``` # Sample Output ``` YES ``` # Explanation In the provided grid, one possible path from the top-left to the bottom-right is: (0, 0) → (1, 0) → (1, 1) → (1, 2) → (2, 2) → (2, 3) → (2, 4) → (3, 4) If such a path exists, print \\"YES\\"; otherwise, print \\"NO\\".","solution":"def is_path_possible(n, m, grid): def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] == 0 or visited[x][y]: return False if x == n-1 and y == m-1: return True visited[x][y] = True return (dfs(x+1, y) or dfs(x-1, y) or dfs(x, y+1) or dfs(x, y-1)) if grid[0][0] == 0 or grid[n-1][m-1] == 0: return \\"NO\\" visited = [[False]*m for _ in range(n)] return \\"YES\\" if dfs(0, 0) else \\"NO\\" # Example usage: # n = 4 # m = 5 # grid = [ # [1, 0, 1, 1, 0], # [1, 1, 0, 1, 0], # [0, 1, 1, 1, 1], # [0, 0, 0, 1, 1] # ] # print(is_path_possible(n, m, grid)) # Output: YES"},{"question":"``` For example: - Input: \\"eceba\\" - Output: 3 - Explanation: The substring is \\"ece\\" with length 3. - Input: \\"ccaabbb\\" - Output: 5 - Explanation: The substring is \\"aabbb\\" with length 5. Function Signature: ```python def longestTwoCharSubstring(s: str) -> int: ``` # Constraints: - The input string `s` will have a length between 1 and 100,000. ```","solution":"def longestTwoCharSubstring(s: str) -> int: Returns the length of the longest substring containing at most two distinct characters. if not s: return 0 left = 0 recent_left_char_index = {} max_length = 0 for right in range(len(s)): recent_left_char_index[s[right]] = right if len(recent_left_char_index) > 2: left_most_index = min(recent_left_char_index.values()) del recent_left_char_index[s[left_most_index]] left = left_most_index + 1 current_length = right - left + 1 max_length = max(max_length, current_length) return max_length"},{"question":"Pascal is a passionate art collector and owns a large collection of paintings. Each painting has a unique identifier and an associated value. Recently, Pascal learned about a method of arranging his paintings to maximize the aesthetic appeal of his collection gallery. The aesthetic value of the gallery is the sum of the values of the contiguous subarray of paintings that has the maximum possible sum. Pascal needs your help to determine this maximum sum of values for any contiguous subarray. Can you solve this problem for him? **Input format:** - The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the number of paintings in Pascal\'s collection. - The second line contains `n` integers `v_1, v_2, ..., v_n` (-10^4 ≤ v_i ≤ 10^4) — the values of Pascal\'s paintings. **Output format:** - Print one integer, the maximum sum of values for any contiguous subarray. **Example:** ``` Input: 8 -2 1 -3 4 -1 2 1 -5 4 Output: 6 Explanation: The contiguous subarray with the maximum sum is [4, -1, 2, 1], which sums to 6. ``` **Note:** Focus on finding an efficient solution that can handle the upper limits of the input sizes. Consider using Kadane\'s algorithm to achieve the desired result within a linear time complexity.","solution":"def max_contiguous_subarray_sum(n, values): Function to determine the maximum sum of values for any contiguous subarray. Parameters: n (int): The number of paintings in the collection values (list of int): The list of values corresponding to the paintings Returns: int: The maximum sum of values for any contiguous subarray # Implementing Kadane\'s algorithm max_current = max_global = values[0] for i in range(1, n): max_current = max(values[i], max_current + values[i]) if max_current > max_global: max_global = max_current return max_global"},{"question":"# Unique Elements Subarray You are given an integer array arr of length n. Your task is to find the length of the longest contiguous subarray that contains only unique elements. **Input** The first line contains an integer t (1 leq t leq 100) denoting the number of test cases. The first line of each test case contains an integer n (1 leq n leq 2 times 10^5). The next line contains n space-separated integers representing elements of the array (1 leq arr[i] leq 10^9). **Output** For each test case, output the length of the longest contiguous subarray with all unique elements. **Example** **Input** ``` 2 6 5 1 3 5 2 3 5 1 2 3 4 5 ``` **Output** ``` 4 5 ``` **Explanation** In the first test case, one possible longest subarray with unique elements is [1, 3, 5, 2], which has length 4. In the second test case, the entire array [1, 2, 3, 4, 5] contains unique elements, hence the length is 5.","solution":"def length_of_longest_unique_subarray(arr): Function to find the length of the longest contiguous subarray with unique elements. seen = set() left = 0 max_length = 0 for right in range(len(arr)): while arr[right] in seen: seen.remove(arr[left]) left += 1 seen.add(arr[right]) max_length = max(max_length, right - left + 1) return max_length def process_test_cases(t, test_cases): Process multiple test cases to find the length of the longest unique subarray for each test case. results = [] for i in range(t): n, arr = test_cases[i] results.append(length_of_longest_unique_subarray(arr)) return results"},{"question":"You are given an array of n positive integers. You need to construct another array of the same length such that each element in the new array is the sum of all elements in the original array except for the one at the same index. For instance, given an array [a1, a2, ..., an], the corresponding element at the ith position in the new array will be the sum of all elements in the original array except ai. Your task is to write a program that takes an integer n (the number of elements in the array) and then the array of n integers, and outputs the new array. The first line of the input contains integer n (2 ≤ n ≤ 100), the length of the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 100). Output the required array of n integers, where each element is the sum of the rest of the elements from the original array. For example, given the input: ``` 4 1 2 3 4 ``` The output would be: ``` 9 8 7 6 ``` Explanation: - For the first element: 2 + 3 + 4 = 9 - For the second element: 1 + 3 + 4 = 8 - For the third element: 1 + 2 + 4 = 7 - For the fourth element: 1 + 2 + 3 = 6","solution":"def construct_sums_array(n, arr): Returns a new array where each element is the sum of all elements in the original array except for the one at the same index. total_sum = sum(arr) result = [total_sum - arr[i] for i in range(n)] return result"},{"question":"You need to improve your company\'s warehouse storage system. The warehouse consists of stacks of crates, where each stack is represented by a sequence of integers. Each integer denotes the weight of a crate in that stack, from top to bottom. You need to handle a series of operations to optimize the warehouse storage. The operations are used to modify and query the stacking system. The operations can be one of the following: 1. **MOVE** x y: Move the top crate from stack x to stack y. This operation can only be performed if stack x is not empty. 2. **QUERY** x: Output the weight of the top crate in stack x, or -1 if the stack is empty. 3. **MERGE** x y: Merge stack y into stack x. After merging, the order of crates in stack y is preserved and all crates from stack y are placed above the existing crates in stack x. Stack y will be empty after the merge. You need to process all the operations and provide the output for each `QUERY` operation. The first line contains an integer `s` (1 ≤ s ≤ 100,000) — the number of stacks in the warehouse. Each of the following `s` lines contains a sequence of integers representing the crates in that stack, terminating with -1 (which is not part of the crates, just a delimiter). The next line contains an integer `o` (1 ≤ o ≤ 100,000) — the number of operations. Each of the following `o` lines contains either a `MOVE`, `QUERY`, or `MERGE` operation as described above. **Input:** ``` 3 3 8 6 -1 5 2 -1 4 -1 5 MOVE 1 2 QUERY 2 MERGE 1 3 QUERY 1 QUERY 3 ``` **Output:** ``` 6 4 -1 ``` **Explanation:** - After `MOVE 1 2`, stack 1 becomes `[8, 6]` and stack 2 becomes `[5, 2, 3]`. - Performing `QUERY 2` returns the top of stack 2 which is `3`. - `MERGE 1 3` merges stack 3 into stack 1 making it `[4, 8, 6]` and stack 3 becomes empty. - `QUERY 1` returns the top of stack 1 which is `4`. - `QUERY 3` returns `-1` since stack 3 is empty.","solution":"def process_storage_operations(s, stacks, o, operations): results = [] # Initialize stacks warehouse = {} for i in range(s): warehouse[i+1] = stacks[i] # Process operations for operation in operations: parts = operation.split() command = parts[0] if command == \\"MOVE\\": x, y = int(parts[1]), int(parts[2]) if warehouse[x]: crate = warehouse[x].pop(0) # Move the top crate (first element) warehouse[y].insert(0, crate) # Place on top of stack y elif command == \\"QUERY\\": x = int(parts[1]) if warehouse[x]: results.append(warehouse[x][0]) # Top crate (first element) else: results.append(-1) elif command == \\"MERGE\\": x, y = int(parts[1]), int(parts[2]) warehouse[x] = warehouse[y] + warehouse[x] # Merge stack y into stack x warehouse[y] = [] # Empty stack y return results # Example usage s = 3 stacks = [ [3, 8, 6], [5, 2], [4] ] o = 5 operations = [ \\"MOVE 1 2\\", \\"QUERY 2\\", \\"MERGE 1 3\\", \\"QUERY 1\\", \\"QUERY 3\\" ] print(process_storage_operations(s, stacks, o, operations))"},{"question":"You are given a matrix with n rows and m columns. Each row is sorted in increasing order from left to right, and each column is sorted in increasing order from top to bottom. Your task is to find a given target value k. If the value exists in the matrix, return its position coordinates (row, column) as space-separated integers (1-based index). If the value does not exist, return -1. The first line contains two integers n and m (1 le n, m le 10^3) — the number of rows and columns in the matrix. The next n lines contain m integers each, representing the elements of the matrix. The values of the matrix elements are between 1 and 10^9. The last line contains the integer k — the target value to search for. Input: The first line contains two integers, n and m. The next n lines contain m integers each, representing the sorted matrix. The last line contains the target integer k. Output: Print the 1-based row and column indices of the target value k if it exists in the matrix. Otherwise, print -1. Example: Input: 3 3 1 4 7 2 5 8 3 6 9 5 Output: 2 2 In the example above, the number 5 is located at the intersection of the 2nd row and the 2nd column.","solution":"def find_target_in_matrix(matrix, n, m, k): Find the target value k in a sorted n x m matrix. If found, return the row and column indices (1-based). Otherwise, return -1. Parameters: matrix (List[List[int]]): The sorted matrix with n rows and m columns. n (int): Number of rows m (int): Number of columns k (int): Target value to find Returns: str: 1-based index row and column space-separated if found, otherwise \'-1\' row = 0 col = m - 1 while row < n and col >= 0: if matrix[row][col] == k: return f\\"{row + 1} {col + 1}\\" elif matrix[row][col] > k: col -= 1 else: row += 1 return \\"-1\\" # Example data data = 3 3 1 4 7 2 5 8 3 6 9 5 def process_input(data): lines = data.strip().split(\'n\') n, m = map(int, lines[0].split()) matrix = [] for i in range(1, n + 1): matrix.append(list(map(int, lines[i].split()))) k = int(lines[n + 1]) return matrix, n, m, k matrix, n, m, k = process_input(data) print(find_target_in_matrix(matrix, n, m, k))"},{"question":"You are given an array `arr` of n integers. Your task is to determine the number of pairs of integers (i, j) where 1 ≤ i < j ≤ n such that `arr[i] + arr[j]` is even. Input: - The first line of input contains an integer n (1 ≤ n ≤ 100), the number of elements in the array. - The second line contains n integers `arr1, arr2, ..., arrn` (1 ≤ arri ≤ 100), representing the elements of the array. Output: - Print a single integer, the number of pairs where the sum of their elements is even. Example: Input: ``` 4 1 2 3 4 ``` Output: ``` 2 ``` Explanation: There are 2 valid pairs: (2, 4) and (1, 3).","solution":"def count_even_sum_pairs(n, arr): Count the number of pairs (i, j) where 1 ≤ i < j ≤ n and arr[i] + arr[j] is even. Args: n: int - number of elements in the array. arr: list of int - the elements of the array. Returns: int - the number of pairs with even sum. even_count = 0 odd_count = 0 for num in arr: if num % 2 == 0: even_count += 1 else: odd_count += 1 # Pairs from even numbers and odd numbers even_pairs = (even_count * (even_count - 1)) // 2 odd_pairs = (odd_count * (odd_count - 1)) // 2 return even_pairs + odd_pairs"},{"question":"Given an integer array **`arr`** of length **`n`** and an integer **`k`**, your task is to write a function that rotates the array to the right by `k` steps, where **`k`** is non-negative. The resulting modified array should maintain the order of elements after the rotation. For example, given the array **`arr = [1,2,3,4,5,6,7]`** and **`k = 3`**, the function should return **`[5,6,7,1,2,3,4]`**. # Function Signature ```python def rotate_array(arr: List[int], k: int) -> List[int]: pass ``` # Input - `arr`: A list of integers `(0 <= n <= 10^5)`. - `k`: A non-negative integer `(0 <= k <= 10^5)`. # Output - **`List[int]`**: The rotated array. # Constraints - The array can contain both positive and negative integers. - If `n` is 0, the output should be an empty list. - If `k` is 0, the array remains unchanged. - Rotation is cyclic, meaning elements shifted beyond the last position come back at the start. # Examples ```python assert rotate_array([1,2,3,4,5,6,7], 3) == [5,6,7,1,2,3,4] assert rotate_array([-1,-100,3,99], 2) == [3,99,-1,-100] assert rotate_array([1,2,3,4,5,6,7], 0) == [1,2,3,4,5,6,7] assert rotate_array([1,2,3,4,5,6,7], 7) == [1,2,3,4,5,6,7] assert rotate_array([], 3) == [] ```","solution":"from typing import List def rotate_array(arr: List[int], k: int) -> List[int]: Rotates the array to the right by k steps. n = len(arr) if n == 0 or k == 0: return arr k %= n # If k >= n, only k % n rotations are needed. return arr[-k:] + arr[:-k]"},{"question":"A company hosts an annual coding competition where each participant has to solve a series of problems. At the end of each competition day, the participants have to submit their scores, and based on the scores current rankings are displayed. Given a list of unique participant IDs (strings) and their respective scores for the day, generate the ranking list for the day. If two participants have the same score, they should be ranked in lexicographical order by their IDs. Write a function `generate_ranking` that takes a list of tuples as input, where each tuple contains a participant\'s ID (a string) and their score (an integer). The function should return a list of participant IDs ordered by their ranks. For example: **Input:** ```python participants_scores = [ (\\"john\\", 50), (\\"doe\\", 70), (\\"smith\\", 50), (\\"alex\\", 80) ] ``` **Output:** ```python [\\"alex\\", \\"doe\\", \\"john\\", \\"smith\\"] ``` **Explanation:** - \\"alex\\" has the highest score (80), so they are ranked first. - \\"doe\\" has the next highest score (70), so they are ranked second. - \\"john\\" and \\"smith\\" both have the same score (50), but \\"john\\" comes before \\"smith\\" lexicographically. # Function Signature ```python def generate_ranking(participants_scores: List[Tuple[str, int]]) -> List[str]: pass ```","solution":"from typing import List, Tuple def generate_ranking(participants_scores: List[Tuple[str, int]]) -> List[str]: Generates the ranking list of participants based on their scores. Parameters: participants_scores (List[Tuple[str, int]]): A list of tuples where each tuple contains a participant\'s ID and their score. Returns: List[str]: A list of participant IDs ordered by their ranks. # First, sort by scores in descending order, then by participant ID in ascending order sorted_list = sorted(participants_scores, key=lambda x: (-x[1], x[0])) # Extract and return the participant IDs return [participant[0] for participant in sorted_list]"},{"question":"You have a garden in the form of a grid with n rows and m columns. Each cell in the grid either contains a plant or is empty. Two plants are considered connected if they are adjacent (i.e., share a side) and form a union. Your task is to determine the number of unique plant clumps (connected components of plants) in the garden. A plant clump is a group of connected plants that are adjacent either horizontally or vertically (no diagonal adjacency). Each test contains one or more test cases. The first line contains a single integer t (1 le t le 100) — the number of test cases. The first line of each test case contains two integers n (1 le n le 1000) and m (1 le m le 1000) — the number of rows and columns in the garden grid. The next n lines contain m characters each, where each character is either a dot (`\'.\'`) representing an empty space or an asterisk (`\'*\'`) representing a plant. For each test case, output a single integer indicating the number of unique plant clumps in the garden. # Input - The first line contains the number of test cases t. - For each test case, the first line contains two integers n and m. - The next n lines each contain m characters denoting the garden\'s layout. # Output - For each test case, output a single integer representing the number of plant clumps. # Example Input ``` 2 4 5 .*... .**.. ...*. ...*. 3 3 .*. ..* .*. ``` Output ``` 2 3 ``` # Explanation In the first test case, there are two distinct plant clumps: one consisting of the plants in the first and second rows, and another clump consisting of the plants in the last two rows. In the second test case, there are three distinct plant clumps: each plant is isolated and does not connect with any other. Write an efficient program to determine the number of unique plant clumps for each test case.","solution":"def count_plant_clumps(t, test_cases): def dfs(grid, visited, x, y, n, m): stack = [(x, y)] while stack: cx, cy = stack.pop() for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = cx + dx, cy + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'*\': visited[nx][ny] = True stack.append((nx, ny)) results = [] for case in test_cases: n, m, garden = case visited = [[False] * m for _ in range(n)] clump_count = 0 for i in range(n): for j in range(m): if garden[i][j] == \'*\' and not visited[i][j]: visited[i][j] = True clump_count += 1 dfs(garden, visited, i, j, n, m) results.append(clump_count) return results # Function to parse the input. def parse_input(input_string): input_lines = input_string.strip().split(\'n\') t = int(input_lines[0]) index = 1 test_cases = [] for _ in range(t): n, m = map(int, input_lines[index].split()) garden = [] for i in range(n): garden.append(input_lines[index + 1 + i]) test_cases.append((n, m, garden)) index += 1 + n return t, test_cases"},{"question":"A group of friends is playing a game with an array of integers. The game proceeds as follows: on each turn, they find the longest segment of consecutive integers that forms an arithmetic progression (the leftmost, if there are several such segments) and remove it. For example, if the array is [1, 2, 3, 7, 8, 9], then after one operation it becomes [7, 8, 9]. Compute the number of operations required to make the array empty. The first line contains a single integer n (1 ≤ n ≤ 200,000) — the length of the array. The second line contains a sequence a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the array of integers. Print the number of operations required to make the array empty. In the first example, if the array is [1, 2, 3, 7, 8, 9], Vasya performs the operations as follows: 1. Remove the arithmetic progression [1, 2, 3], the array becomes [7, 8, 9]. 2. Remove the arithmetic progression [7, 8, 9], the array becomes empty. In the second example, if the array is [1, 3, 5, 7], Vasya performs the operations as follows: 1. Remove the arithmetic progression [1, 3, 5, 7], the array becomes empty. In the third example, if the array is [1, 3, 5, 2, 4, 6], Vasya performs the operations as follows: 1. Remove the first arithmetic progression [1, 3, 5], the array becomes [2, 4, 6]. 2. Remove the arithmetic progression [2, 4, 6], the array becomes empty.","solution":"def count_operations_to_empty_array(arr): Returns the number of operations required to empty the array by removing the longest segment of consecutive integers that forms an arithmetic progression. def find_longest_ap_segment(arr): max_len = 1 curr_len = 1 n = len(arr) start_idx = 0 if n < 2: return (start_idx, max_len) min_start_idx = 0 for i in range(1, n): if arr[i] - arr[i - 1] == arr[min_start_idx + 1] - arr[min_start_idx]: curr_len += 1 else: if curr_len > max_len: max_len = curr_len start_idx = min_start_idx min_start_idx = i - 1 curr_len = 2 if curr_len > max_len: max_len = curr_len start_idx = min_start_idx return (start_idx, max_len) operations = 0 while len(arr) > 0: start_idx, length = find_longest_ap_segment(arr) arr = arr[:start_idx] + arr[start_idx + length:] operations += 1 return operations"},{"question":"Trouble River has n islands aligned in a straight line from 1 to n. Each island is connected by a unidirectional bridge from island i to island i+1 (except for the last island, which has no outgoing bridge). The river is very dangerous, and hence you can only move along the bridges without turning back. Each bridge has a weight that indicates the cost of crossing it. Specifically, the bridge from island i to island i+1 has a weight of w_i. The weight of each bridge is provided in a list. You are currently at the first island and want to travel to the last island by crossing the bridges. However, you can skip one bridge (cross it without bearing its cost) to reduce your total travel cost. Your task is to determine the minimum cost required to travel from the first island to the last island, given that you can skip exactly one bridge. The first line of the input contains one integer n (2 leq n leq 10^6), the number of islands. The second line contains n-1 integers representing the list of weights w (1 leq w[i] leq 10^9), where the i^text{th} integer is the weight of the bridge from island i to island i+1. Print the minimum cost required to travel from the first island to the last island, given that you can skip exactly one bridge.","solution":"def min_cost_travel(n, weights): Given the number of islands (n) and the list of weights of bridges between them (weights), returns the minimum cost required to travel from the first island to the last island, given that you can skip exactly one bridge. if n == 2: return 0 # There is only one bridge and we can skip it total_cost = sum(weights) min_cost_with_skip = float(\'inf\') # Iterate through each bridge, calculate the total cost if we skip this bridge for i in range(n-1): cost_with_skip = total_cost - weights[i] if cost_with_skip < min_cost_with_skip: min_cost_with_skip = cost_with_skip return min_cost_with_skip # Example Usage: # n = 5 # weights = [1, 2, 3, 4] # print(min_cost_travel(n, weights)) # Output: 6 (skip the bridge with weight 4)"},{"question":"A robot is located at the top-left corner of an m x n grid (marked \'Start\' in the diagram below). The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked \'Finish\' in the diagram below). How many possible unique paths are there? ``` Start 1 2 3 ... n 4 5 6 ... n ... m m+1 m+2 ... Finish ``` Write a function `uniquePaths(m: int, n: int) -> int` to determine the number of unique paths that the robot can take to reach the bottom-right corner. **Example:** Input: ``` 3 2 ``` Output: ``` 3 ``` Explanation: From the `Start` position, the robot has 3 ways to reach the `Finish`: 1. Right -> Right -> Down 2. Right -> Down -> Right 3. Down -> Right -> Right **Constraints:** - 1 ≤ m, n ≤ 100 - The answer is guaranteed to be within the range of a 32-bit signed integer.","solution":"def uniquePaths(m: int, n: int) -> int: Returns the number of unique paths from the top-left to the bottom-right in an m x n grid. # Create a 2D list to store the number of ways to reach each cell dp = [[1]*n for _ in range(m)] # Iterate through the grid starting from the top left corner for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[m-1][n-1]"},{"question":"You are given a grid of size n x m where some cells contain non-negative integers representing different types of buildings and some cells are empty (represented by 0). Your goal is to place new buildings in the empty cells such that the shortest Manhattan distance from any new building to an existing building is minimized. The Manhattan distance between any two cells (i1, j1) and (i2, j2) is defined as |i1 - i2| + |j1 - j2|. You need to find the minimum possible value of the largest shortest Manhattan distance from any new building to an existing building and print this value. The first line contains two integers n and m (1 ≤ n, m ≤ 300). The next n lines contain m integers each — representing the grid. Print a single integer — the minimum possible value of the largest shortest Manhattan distance from any new building to an existing building. Example input: 3 3 1 0 0 0 0 0 0 0 2 Example output: 2","solution":"from collections import deque def min_distance_to_existing_building(grid): Returns the minimum possible value of the largest shortest Manhattan distance from any new building to an existing building. n = len(grid) m = len(grid[0]) # Directions for moving in 4 possible ways (up, down, left, right) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Queue for BFS (we\'ll use it to store cells with buildings) q = deque() # Populate the queue with all existing building cells and track largest distance for i in range(n): for j in range(m): if grid[i][j] != 0: q.append((i, j, 0)) # (row, column, distance) max_dist = 0 # Perform BFS to find the shortest distances to the nearest buildings while q: x, y, dist = q.popleft() for dx, dy in directions: new_x, new_y = x + dx, y + dy if 0 <= new_x < n and 0 <= new_y < m and grid[new_x][new_y] == 0: grid[new_x][new_y] = -1 # Mark as visited max_dist = max(max_dist, dist + 1) q.append((new_x, new_y, dist + 1)) return max_dist"},{"question":"A conflict in the kingdom of Sortland needs sorting out. The conflict arose because the map listing names and populations of three towns got shuffled, and the king needs to quickly identify the least populous, the most populous, and the median populous town. Your task is to write a program to help the king by identifying these towns. The input consists of three lines, each containing the name of a town as a string (consisting of lowercase English letters only) and an integer representing its population (a positive number not exceeding 1000). It\'s guaranteed that the populations of the three towns are distinct. Your task is to output the names of the towns in the following order: 1. The name of the least populous town. 2. The name of the median populous town. 3. The name of the most populous town. # Input: Three lines, each containing a string `name` (1 ≤ |name| ≤ 100) and an integer `population` (1 ≤ population ≤ 1000), separated by a space. # Output: Three lines, each containing a single town name. The order of towns in the output should be: 1. The least populous town. 2. The median populous town. 3. The most populous town. # Example: Input: ``` moraville 123 gravill 456 ahaville 789 ``` Output: ``` moraville gravill ahaville ``` Note: - Each input name and population pair is given in a separate line. - You must read the input and sort the towns by their population.","solution":"def sort_towns(town_data): This function accepts a list of tuples containing town names and their populations, and returns a list of town names sorted by their population in ascending order. # Sort the town data by population sorted_towns = sorted(town_data, key=lambda x: x[1]) # Extract town names in the required sorted order result = [town[0] for town in sorted_towns] return result"},{"question":"Sara loves gardening and taking care of her plants. Every month she measures the growth of different plants in her garden. She records the height of each plant at the start and end of the month to determine how much each plant has grown. However, sometimes her records get messed up and she needs your help to determine which plants have shown positive growth, negative growth, or no growth over the month. Given a list of plants and their respective heights at the start and end of the month, can you help Sara by categorizing each plant\'s growth? The input will include: - The first line contains a single integer n (1 ≤ n ≤ 100) representing the number of plants. - The next n lines each contain two integers, Hi and Hf (0 ≤ Hi, Hf ≤ 100) representing the height of the i-th plant at the start and end of the month respectively. For each plant, output one of the following on a new line: - \\"Positive\\" if the plant\'s height has increased. - \\"Negative\\" if the plant\'s height has decreased. - \\"No growth\\" if the plant\'s height has remained the same. # Input Example ``` 4 10 15 20 18 30 30 22 25 ``` # Output Example ``` Positive Negative No growth Positive ``` In the first sample, the height of the first plant increased from 10 to 15, indicating positive growth. The second plant\'s height decreased from 20 to 18, indicating negative growth. The third plant had no change in height, indicating no growth. The fourth plant\'s height increased from 22 to 25, indicating positive growth.","solution":"def categorize_plant_growth(n, heights): Categorizes the growth of each plant based on their heights at the start and end of the month. Parameters: n (int): number of plants heights (list of tuples): each tuple contains two integers, Hi and Hf, representing the height of the i-th plant at the start and end of the month respectively. Returns: list of str: each element is \\"Positive\\", \\"Negative\\", or \\"No growth\\" indicating the growth status of each plant. result = [] for Hi, Hf in heights: if Hf > Hi: result.append(\\"Positive\\") elif Hf < Hi: result.append(\\"Negative\\") else: result.append(\\"No growth\\") return result"},{"question":"Description: In the fictional country of Trisland, the national flag is a rectangular field consisting only of the characters \'A\' and \'B\', laid out in a checkerboard pattern. In a checkerboard pattern, adjacent cells must contain different characters (i.e., no two \'A\'s or \'B\'s can be directly next to each other, either horizontally or vertically). You are given a field n × m, consisting of characters \'A\' and \'B\'. Output \\"VALID\\" (without quotes) if this field corresponds to a correct flag of Trisland that follows the checkerboard pattern. Otherwise, print \\"INVALID\\" (without quotes). # Input: - The first line contains two integer numbers n and m (1 ≤ n, m ≤ 100) — the dimensions of the field. - Each of the following n lines consists of m characters, either \'A\' or \'B\' — the description of the field. # Output: - Print \\"VALID\\" (without quotes) if the given field corresponds to the correct flag of Trisland in a checkerboard pattern. - Otherwise, print \\"INVALID\\" (without quotes). # Sample Input 1: ``` 4 4 ABAB BABA ABAB BABA ``` # Sample Output 1: ``` VALID ``` # Sample Input 2: ``` 3 3 ABA BAB ABB ``` # Sample Output 2: ``` INVALID ``` # Explanation: In Sample Input 1, the 4x4 field is entirely in a checkerboard pattern, so the output is \\"VALID\\". In Sample Input 2, the last line does not maintain the checkerboard pattern due to the repeated \'B\'s, thus the output is \\"INVALID\\".","solution":"def check_trisland_flag(n, m, flag): for i in range(n): for j in range(m): if i > 0 and flag[i][j] == flag[i-1][j]: return \\"INVALID\\" if j > 0 and flag[i][j] == flag[i][j-1]: return \\"INVALID\\" return \\"VALID\\" # Example usage: # n, m = 4, 4 # flag = [ # \\"ABAB\\", # \\"BABA\\", # \\"ABAB\\", # \\"BABA\\" # ] # print(check_trisland_flag(n, m, flag)) # Should output VALID"},{"question":"Suppose you are managing a database of user accounts with the following attributes: user ID (an integer) and username (a string containing 1 to 20 lowercase English letters). You need to handle two types of queries. Each query will either add a user to the database or check the existence of a username. Specifically: 1. **Add** - Add a new user to the database with their user ID and username. It\'s guaranteed that each ID will be unique, but usernames might clash. If the username already exists in the database, reject the addition and ignore the query. Otherwise, add the new user to the database. 2. **Check** - Given a username, determine whether this username exists in the database or not. The input consists of an integer n (1 ≤ n ≤ 2*10^5) representing the number of queries, followed by n lines each containing a query. Each query is described by an integer t (1 ≤ t ≤ 2) indicating the type of the query followed by the relevant parameters: for an Add query (t = 1), it is followed by an integer user ID and a string username; for a Check query (t = 2), it is followed by a string username. For each Check query, output \\"YES\\" if the username exists in the database, otherwise output \\"NO\\". Example input: ``` 6 1 1 alice 1 2 bob 2 alice 1 3 alice 2 eve 2 bob ``` Example output: ``` YES NO YES ```","solution":"class UserDatabase: def __init__(self): self.users_by_id = {} self.users_by_name = set() def add_user(self, user_id, username): if username in self.users_by_name: return self.users_by_id[user_id] = username self.users_by_name.add(username) def check_user(self, username): if username in self.users_by_name: return \\"YES\\" else: return \\"NO\\" def process_queries(n, queries): db = UserDatabase() results = [] for query in queries: q_type, *params = query if q_type == 1: user_id, username = params db.add_user(user_id, username) elif q_type == 2: username = params[0] results.append(db.check_user(username)) return results"},{"question":"You are given an array of integers representing the heights of buildings in a skyline. The task is to determine the maximum rectangular area that can be formed using consecutive buildings as the sides of the rectangle. Each building has a width of 1 unit. Multiple buildings can be used to form the rectangle, and the height of the rectangle is determined by the shortest building in the chosen consecutive sequence. Write a function `maxRectangleArea` that takes in an array of integers `heights` (1 ≤ n ≤ 100) where each integer represents the height of a building. The function should return an integer representing the maximum rectangular area that can be formed using consecutive buildings. Examples: - Input: [2, 1, 5, 6, 2, 3] - Output: 10 - Input: [4, 2, 0, 3, 2, 5] - Output: 6 - Input: [2, 3, 2, 3] - Output: 8 Your solution should efficiently compute the maximum rectangular area and handle cases where some buildings have a height of zero.","solution":"def maxRectangleArea(heights): Returns the maximum rectangular area that can be formed using consecutive buildings. Each building has a width of 1 unit. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Given an array of n integers (1 ≤ n ≤ 105), you need to determine whether it\'s possible to partition the array into two non-empty subsets with equal sum. If it is possible, print \\"YES\\". Otherwise, print \\"NO\\". The first line contains an integer n (1 ≤ n ≤ 105) which indicates the number of elements in the array. The second line contains n space-separated integers ai (1 ≤ ai ≤ 104) which are the elements of the array. Print \\"YES\\" or \\"NO\\" depending on whether such a partition is possible.","solution":"def can_partition(n, arr): Returns \\"YES\\" if the array can be partitioned into two non-empty subsets with equal sum, otherwise \\"NO\\". Parameters: n (int): Number of elements in the array. arr (list of int): The array of integers. Returns: str: \\"YES\\" or \\"NO\\". total_sum = sum(arr) # If the total sum is odd, it cannot be partitioned into two equal sum subsets. if total_sum % 2 != 0: return \\"NO\\" target = total_sum // 2 dp = [False] * (target + 1) dp[0] = True for num in arr: for i in range(target, num - 1, -1): dp[i] = dp[i] or dp[i - num] return \\"YES\\" if dp[target] else \\"NO\\""},{"question":"You are given an integer array of length n. You need to determine the longest subsequence such that the difference between the consecutive elements is exactly 1. The first line contains an integer n (1 ≤ n ≤ 1000), the length of the array. The second line contains n integers a_i (1 ≤ a_i ≤ 1000), the elements of the array. In the first line, print the length of the longest subsequence where the difference between consecutive elements is 1. In the second line, print the subsequence itself. If there are multiple correct answers, you can print any one of them.","solution":"def longest_consecutive_subsequence(n, array): # Create a set of array elements for quick lookup numbers = set(array) # Variables to store the maximum length and the starting point of the longest sequence max_length = 0 best_start = None for num in array: if num - 1 not in numbers: # If num is a potential starting point current_length = 1 while num + current_length in numbers: current_length += 1 if current_length > max_length: max_length = current_length best_start = num # Reconstruct the longest sequence longest_sequence = [i for i in range(best_start, best_start + max_length)] return max_length, longest_sequence # Example usage: n = 10 array = [1, 9, 3, 10, 4, 20, 2, 5, 11, 12] print(longest_consecutive_subsequence(n, array)) # Output will be (5, [1, 2, 3, 4, 5])"},{"question":"Xania loves watching movies, and as a result, she has a list of movies she wants to watch. Each movie takes a different amount of time to watch. Xania has a certain amount of time available each day and she wants to maximize the number of movies she can watch in one day without exceeding the available time. Given a list of movie durations and the maximum time Xania has available, determine the maximum number of movies she can watch in a single day. You may assume she can start watching at any point of time in the day. The first line of the input contains an integer n (1 ≤ n ≤ 10^5) — the number of movies. The second line contains n space-separated integers t1, t2, ..., tn (1 ≤ ti ≤ 10^4) — the durations of the movies in minutes. The third line contains a single integer T (1 ≤ T ≤ 10^7) — the total available time in minutes. Output a single integer representing the maximum number of movies Xania can watch in one day. **Example:** Input: ``` 5 90 85 75 60 120 180 ``` Output: ``` 2 ``` Explanation: With a total available time of 180 minutes, Xania can watch a maximum of 2 movies. The movies with durations of 90 and 85 minutes or 75 and 60 minutes can fit within this time. **Hint:** Sorting the movie durations may help find the optimal solution.","solution":"def max_movies_to_watch(movie_durations, available_time): Returns the maximum number of movies Xania can watch in one day without exceeding the available time. :param movie_durations: List of integers representing the duration of each movie in minutes. :param available_time: Integer representing the total available time in minutes. :return: Integer representing the maximum number of movies that can be watched. movie_durations.sort() total_time = 0 movie_count = 0 for duration in movie_durations: if total_time + duration <= available_time: total_time += duration movie_count += 1 else: break return movie_count"},{"question":"You are given the task of analyzing text files containing scientific research articles to determine their primary language of publication. For this problem, you\'ve been provided with a collection of articles written either in English („en“), French („fr“), or German („de“). You can download the training set of articles from the following link: http://example.com/train.zip. The archive includes three directories named „en“, „fr“, and „de“. Each directory contains articles written in the respective language. Each text file inside these directories has the following format: The first line contains the article identifier (a unique integer), followed by the article title on the second line, and then the body content of the article from the third line onwards. All lines are encoded in UTF-8. You\'ll need to write a program to classify the language of a given article based on its content. The article\'s structure follows the same format as the training set. Input: - The first line contains an integer id (0 ≤ id ≤ 106) — the article identifier. - The second line contains the title of the article. - The subsequent lines contain the text body of the article. The total size of the article will not exceed 15 kilobytes. Your task is to output one of the following: - \\"en\\" if the article is written in English, - \\"fr\\" if the article is written in French, - \\"de\\" if the article is written in German. Analyze the given article and print the appropriate language code. Note: Consider using common words (stopwords) or linguistic features of the language to identify the correct classification.","solution":"import os import string from collections import Counter def load_stopwords(): stopwords = { \'en\': [\\"the\\", \\"and\\", \\"to\\", \\"of\\", \\"in\\", \\"that\\", \\"is\\", \\"it\\", \\"for\\", \\"with\\"], \'fr\': [\\"et\\", \\"le\\", \\"de\\", \\"la\\", \\"les\\", \\"des\\", \\"une\\", \\"que\\", \\"en\\", \\"pour\\"], \'de\': [\\"und\\", \\"die\\", \\"der\\", \\"das\\", \\"ist\\", \\"in\\", \\"zu\\", \\"den\\", \\"von\\", \\"mit\\"] } return stopwords def preprocess(text): text = text.lower() text = text.translate(str.maketrans(\\"\\", \\"\\", string.punctuation)) return text.split() def guess_language(article): stopwords = load_stopwords() # Split the article into lines lines = article.strip().split(\\"n\\") # Combine title and body into a single text content = \\" \\".join(lines[1:]) words = preprocess(content) word_counts = Counter(words) language_scores = {lang: 0 for lang in stopwords} for lang, stopword_list in stopwords.items(): for stopword in stopword_list: language_scores[lang] += word_counts[stopword] return max(language_scores, key=language_scores.get)"},{"question":"A sequence of binary strings is called a \\"binary tree sequence\\" if each string in the sequence is the binary representation of the number of nodes in each level of a perfect binary tree. A perfect binary tree is a tree in which every internal node has exactly two children and all leaves are at the same level. A valid binary tree sequence for a perfect binary tree of height h consists of binary strings s_0, s_1, ... , s_h, where each string s_i (0-indexed) represents the number of nodes at level i in binary. For example, for a perfect binary tree of height 3: - Level 0 has 1 node represented by binary string \\"1\\". - Level 1 has 2 nodes represented by binary string \\"10\\". - Level 2 has 4 nodes represented by binary string \\"100\\". - Level 3 has 8 nodes represented by binary string \\"1000\\". Thus, for height 3, the binary tree sequence would be [\\"1\\", \\"10\\", \\"100\\", \\"1000\\"]. Your task is to: 1. Determine if the given sequence of binary strings is a valid binary tree sequence for some perfect binary tree. 2. If valid, return the height of the binary tree. 3. If not valid, return -1. Input: - The first line contains a single integer n (1 le n le 50) — the number of binary strings in the sequence. - The next n lines each contain a binary string. Output: - If the sequence is valid, output the height h of the perfect binary tree. - Otherwise, output -1. Example 1: Input: 4 1 10 100 1000 Output: 3 Example 2: Input: 4 1 10 11 100 Output: -1 Note that in the second example, the sequence is invalid because \\"11\\" cannot represent the number of nodes at any level in a perfect binary tree.","solution":"def binary_tree_height(sequence): Determines if the given sequence of binary strings is a valid binary tree sequence for some perfect binary tree and returns the height of the tree if valid, else returns -1. Args: sequence : list of strs : list of binary strings, each representing the binary representation of the number of nodes at each level of a perfect binary tree. Returns: int : height of the perfect binary tree if the sequence is valid, else -1. for i, string in enumerate(sequence): expected_binary = bin(2 ** i)[2:] if expected_binary != string: return -1 return len(sequence) - 1"},{"question":"Heidi has now advanced to understanding the correlation between weight and its distribution within a group of objects. She\'s tasked with estimating the total weight of objects in different groups based on the provided weights. Similarly to before, output one line per group, in the same order as provided in the input, containing your (integer) total weight estimate. Your answer is considered correct if it falls within an acceptable range which is [total_weights - 5%, total_weights + 5%], where total_weights is the actual total weight of all objects within the group.","solution":"def estimate_total_weights(groups): Estimate the total weight of objects in different groups. Parameters: groups (list of list of int): A list containing groups which are lists of weights. Returns: list of int: A list containing the estimated total weight of each group. estimated_totals = [] for group in groups: total_weight = sum(group) estimated_totals.append(int(total_weight)) return estimated_totals"},{"question":"A city is represented as an undirected connected graph with `n` nodes (representing intersections) and `m` edges (representing roads). Each road connects two different nodes and has a positive integer length. You are tasked with initiating a series of paving operations to throw out certain roads from the map and pave new roads instead with potentially different lengths. The roads you pave should ensure that the minimum spanning tree (MST) of the graph changes as little as possible with respect to the original graph. A crucial aspect of this task is that the resulting graph must remain connected, and the sum of the lengths of the edges in the resulting MST should be minimized. - You need to decide how many paving operations `k` you will perform (0 ≤ k ≤ m). - For each selected paving operation, you will output the edges you choose to remove and the new edges you will introduce. Input: The first line contains two integers `n` and `m` (1 ≤ n ≤ 100, 0 ≤ m ≤ 1000), where `n` is the number of nodes and `m` is the number of edges. Each of the next `m` lines describes an edge in the graph with three integers `u`, `v`, `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^4), describing a road between nodes `u` and `v` with length `w`. Output: First, output a single integer `k`, the number of paving operations you choose to perform. For each paving operation, output 4 integers `a`, `b`, `c`, and `d` where: - `a` and `b` are the nodes of the removed edge. - `c` and `d` are the nodes of the new edge. - The sum of the lengths of all edges in the new MST after k paving operations should be minimized. If there are multiple correct solutions, any will be accepted. Example: Input: ``` 4 5 1 2 5 2 3 10 3 4 1 4 1 8 2 4 3 ``` Output: ``` 1 2 3 1 3 ```","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def kruskal(n, edges): result = [] i, e = 0, 0 edges = sorted(edges, key=lambda item: item[2]) parent, rank = [], [] for node in range(n): parent.append(node) rank.append(0) while e < n - 1: u, v, w = edges[i] i = i + 1 x = find(parent, u - 1) y = find(parent, v - 1) if x != y: e = e + 1 result.append((u, v, w)) union(parent, rank, x, y) return result def paving_operations(n, m, edges): mst = kruskal(n, edges) initial_mst_weight = sum([w for u, v, w in mst]) # Placeholder for a solution to keep the MST minimal change, not implemented yet k = 0 # No edges are being paved (0 operations) return k, []"},{"question":"The input contains two integers n and m (1 ≤ n, m ≤ 50). Output the sum of all the even numbers greater than n but less than m.","solution":"def sum_of_even_numbers(n, m): Returns the sum of all even numbers greater than n but less than m. if n >= m - 1: return 0 start = n + 1 if (n + 1) % 2 == 0 else n + 2 end = m if m % 2 == 0 else m - 1 total = 0 for num in range(start, end, 2): total += num return total"},{"question":"Dima loves playing video games, especially multiplayer ones. He and his friends participate in tournaments and always aim to win. This weekend, Dima and his friends are participating in a \\"Circle Elimination Game.\\" In this game, all players stand in a circle and start counting off from one. The player who is counting \\"k\\" is eliminated from the circle, and the count restarts from the next player with number one. This process continues until only one player is left, who is declared the winner. Given the number of players `n` and the elimination number `k`, help Dima determine where he needs to stand initially to be the last remaining player in the game. The first line contains two integers `n` (1 ≤ n ≤ 1000) and `k` (1 ≤ k ≤ 1000), representing the number of players and the elimination number, respectively. Print the position where Dima needs to stand to be the last remaining player. The positions are numbered starting from 1. For example, if there are 5 players and the elimination number is 2, Dima should stand at position 3. If there are 7 players and the elimination number is 3, Dima should stand at position 4. To solve this problem, you may use the concept of Josephus Problem from combinatorial game theory.","solution":"def josephus_problem(n, k): Solve the Josephus problem for given n (number of players) and k (elimination number). Args: n (int): the number of players. k (int): the elimination number. Returns: int: the position to stand to be the last remaining player. if n == 1: return 1 else: return (josephus_problem(n - 1, k) + k - 1) % n + 1"},{"question":"There is an ATM machine that dispenses cash in various denominations. A customer wants to withdraw a certain amount of money using the minimum number of notes possible. The denominations of the notes available at the ATM are given in a list. You need to determine the minimum number of notes required to dispense the exact amount of money the customer wants to withdraw. The first line contains an integer amount (1 ≤ amount ≤ 10^6) — the amount of money the customer wants to withdraw. The second line contains n distinct integers d1, d2, ..., dn (1 ≤ di ≤ 10^6) — the available denominations of the ATM. Output the minimum number of notes required to withdraw the given amount of money. If it is not possible to withdraw the exact amount, output -1. In the first example, if the customer wants to withdraw 11 units of currency and the available denominations are 1, 5, and 10, the minimum number of notes required would be 2 (10 + 1). **Example:** Input: 20 1 2 5 10 Output: 2 Explanation: The customer can withdraw 20 using two notes of 10 units each. Thus, the minimum number of notes required is 2.","solution":"def minimum_notes(amount, denominations): Determines the minimum number of notes required to dispense the exact amount of money. If it is not possible to withdraw the exact amount, returns -1. Parameters: - amount (int): the amount of money to withdraw - denominations (list of int): the available denominations Returns: - int: the minimum number of notes required or -1 if not possible to withdraw the exact amount denominations.sort(reverse=True) num_notes = 0 for denom in denominations: if amount == 0: break if denom <= amount: num_notes += amount // denom amount %= denom return num_notes if amount == 0 else -1"},{"question":"**Problem Statement:** You are given a positive integer `n` and a list of integers `a` of length `n`. Your task is to rearrange the elements of the list such that for every element at index `i`, the absolute difference between the element at `i` and the element at `i+1` is at most `1`. Formally, for an array `b` (which is a permutation of the array `a`), the condition `|b[i] - b[i+1]| <= 1` should hold for all valid `i`. # Input: - The first line contains a single integer `n` (1 ≤ n ≤ 10^5), the number of elements in the array. - The second line contains `n` integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), representing the elements of the array. # Output: - Print `YES` if it is possible to rearrange the array `a` to satisfy the condition. Otherwise, print `NO`. # Examples: Example 1: Input: ``` 4 1 2 3 4 ``` Output: ``` YES ``` Example 2: Input: ``` 5 1 3 5 2 8 ``` Output: ``` NO ``` Example 3: Input: ``` 1 10 ``` Output: ``` YES ``` # Note: 1. In Example 1, one possible arrangement is [1, 2, 3, 4], which satisfies the condition. 2. In Example 2, it is impossible to rearrange the array to satisfy the condition. 3. In Example 3, since there\'s only one element, the condition is trivially satisfied. # Explanation: - If the input array has only one element, the condition is always satisfied. - If there are multiple elements, check if the absolute difference between every two consecutive elements in a sorted version of the array is at most 1.","solution":"def can_rearrange(n, a): Determines if the list a can be rearranged so that the absolute difference between consecutive elements is at most 1. :param n: Number of elements in the array :param a: List of integers :return: \'YES\' if the rearrangement is possible, otherwise \'NO\' if n == 1: return \\"YES\\" a.sort() for i in range(n-1): if abs(a[i] - a[i+1]) > 1: return \\"NO\\" return \\"YES\\""},{"question":"You are given a string `s` consisting of lowercase English letters and an integer `k`. You need to perform `k` operations on the string to transform it into a lexicographically smallest string. In each operation, you can choose any character in the string and replace it with any other lowercase English letter. For example, if the string is `bcda` and `k = 1`, you can replace \'b\' with \'a\' to get `acda`, which is the lexicographically smallest string you can achieve with one operation. Your task is to write a function that takes a string `s` and an integer `k` and returns the lexicographically smallest string that can be obtained by performing exactly `k` operations on the string. # Input * The first line contains an integer `t`, the number of test cases. * For each test case, the first line contains a string `s` of length `n` (`1 ≤ n ≤ 10^5`) and the second line contains an integer `k` (`0 ≤ k ≤ n`). It is guaranteed that the sum of lengths of all strings across all test cases will not exceed `10^6`. # Output For each test case, output the lexicographically smallest string that can be obtained after performing exactly `k` operations. # Example ``` Input: 3 bcda 1 abc 2 xyz 3 Output: acda aaa aaa ``` # Explanation In the first test case, one operation allows replacing \'b\' with \'a\', resulting in `acda`, which is the smallest lexicographically. In the second test case, replacing \'b\' and \'c\' with \'a\' results in `aaa`. In the third test case, replacing all characters with \'a\' results in `aaa`.","solution":"def lexicographically_smallest(s, k): Returns the lexicographically smallest string after performing exactly k operations on the input string s. # Convert string to a list for easier manipulation s_list = list(s) # Perform k operations for i in range(len(s_list)): if k == 0: break if s_list[i] != \'a\': s_list[i] = \'a\' k -= 1 return \'\'.join(s_list) def process_test_cases(t, test_cases): Processes multiple test cases and returns the results. :param t: Number of test cases :param test_cases: List of tuples (s, k) where s is the string and k is the number of operations :returns: List of results for each test case results = [] for s, k in test_cases: results.append(lexicographically_smallest(s, k)) return results"},{"question":"You are given a string s consisting of lowercase English letters. Your task is to convert the string into a palindrome by adding the minimum number of characters to the beginning of the string. Recall that a palindrome is a string that reads the same forwards and backwards. For example, if the string is \\"abcd\\", you can add three characters ‘d’, ‘c’, and ‘b’ to the beginning to make it a palindrome: \\"dcbabcd\\". Similarly, for the string \\"aacecaaa\\", you can add two characters ‘a’ and ‘a’ to the beginning to make it a palindrome: \\"aaacecaaa\\". Implement a function to solve this problem. Your function should be efficient enough to handle strings up to length 10^6. # Function Signature ```python def min_chars_to_palindrome(s: str) -> str: ``` # Input - `s`: A string (1 ≤ |s| ≤ 10^6) consisting of lowercase English letters. # Output - Returns the shortest palindrome string that can be obtained by adding the minimum number of characters to the beginning of the input string. # Example Input: ```python \\"abcd\\" ``` Output: ```python \\"dcbabcd\\" ``` Input: ```python \\"aacecaaa\\" ``` Output: ```python \\"aaacecaaa\\" ``` # Note For the first example, the input string \\"abcd\\" is not a palindrome. The minimum number of characters needed to make it a palindrome is 3, so the resulting palindrome is \\"dcbabcd\\". For the second example, adding just two characters \'a\' and \'a\' to the beginning of \\"aacecaaa\\" results in the palindrome \\"aaacecaaa\\".","solution":"def min_chars_to_palindrome(s: str) -> str: Returns the shortest palindrome string that can be obtained by adding the minimum number of characters to the beginning of the input string. def is_palindrome(s): return s == s[::-1] if is_palindrome(s): return s # Reverse the string and concatenate with the original string separated by a special character # to ensure no overlap in the KMP algorithm. rev_s = s[::-1] concat = s + \'#\' + rev_s # Calculate the longest prefix which is also suffix using KMP algorithm. lps = [0] * len(concat) length = 0 i = 1 while i < len(concat): if concat[i] == concat[length]: length += 1 lps[i] = length i += 1 else: if length != 0: length = lps[length - 1] else: lps[i] = 0 i += 1 # The characters to be prefixed will be the characters after the longest palindromic suffix # in the original string s. chars_to_add = rev_s[:len(s) - lps[-1]] # Return the characters to be added + original string which will form the shortest palindrome return chars_to_add + s"},{"question":"A software company is planning to assign a new project to a team of employees. The project\'s success depends on efficiently managing the tasks allotted to each employee, especially ensuring that the tasks do not overlap. The project manager has a list of tasks where each task has a start time and an end time. Each employee can take only one task at a time and should fully complete a task before moving to the next one. The project\'s aim is to find the minimum number of employees required to complete all tasks without any overlaps in their assigned tasks. The first line of input contains an integer n (1 ≤ n ≤ 1000), representing the number of tasks. The following n lines each contain two integers si and ei (1 ≤ si < ei ≤ 10000), where si is the start time and ei is the end time of the i-th task. Output a single integer m, which is the minimum number of employees required. **Example:** **Input:** ``` 5 1 4 2 6 4 7 7 9 5 8 ``` **Output:** ``` 3 ``` **Explanation:** - Employee 1 can take tasks (1, 4) and (7, 9). - Employee 2 can take task (2, 6). - Employee 3 can take tasks (4, 7) and (5, 8).","solution":"def min_employees(tasks): This function calculates the minimum number of employees required to complete all given tasks without overlapping. Parameters: tasks (List[Tuple[int, int]]): List of tuples with (start, end) times of tasks. Returns: int: Minimum number of employees required. if not tasks: return 0 # Separate start and end times start_times = [start for start, end in tasks] end_times = [end for start, end in tasks] # Sort the start and end times start_times.sort() end_times.sort() # Initialize counters and a variable to keep track of the maximum number of concurrent tasks num_employees, max_employees = 0, 0 i, j = 0, 0 n = len(tasks) # Iterate through the sorted times while i < n and j < n: if start_times[i] < end_times[j]: num_employees += 1 max_employees = max(max_employees, num_employees) i += 1 else: num_employees -= 1 j += 1 return max_employees"},{"question":"You are given a list of integers and a target integer k. You need to find all unique pairs of integers in the list that sum up to the target integer k. The goal is to return these pairs in sorted order, sorted first by the first element of the pair, then by the second element of the pair. The input consists of two lines. The first line contains two integers n and k (1 le n le 10^5, -10^9 le k le 10^9) — the number of integers in the list and the target sum. The second line contains n integers a_1, a_2, ldots, a_n (-10^9 le a_i le 10^9) — the elements of the list. Output all unique pairs of integers that sum to k. Each pair should be sorted in ascending order. Output the pairs in lexicographical order. If there are no such pairs, output \\"No pairs found\\". # Example Input: ``` 5 6 1 2 3 4 5 ``` Output: ``` 1 5 2 4 ``` Input: ``` 4 10 4 6 7 3 ``` Output: ``` 3 7 4 6 ``` Input: ``` 3 8 2 1 3 ``` Output: ``` No pairs found ``` # Explanation In the first example, the pairs that sum to 6 are (1, 5) and (2, 4), both pairs are sorted and the output is in lexicographical order. In the second example, the pairs that sum to 10 are (4, 6) and (3, 7), both pairs are sorted and the output is in lexicographical order. In the third example, there are no pairs that sum to 8, so the output is \\"No pairs found\\".","solution":"def find_pairs(n, k, a): Finds all unique pairs of integers in the list that sum up to target integer k. Returns the pairs sorted in lexicographical order. pairs = set() seen = set() for number in a: complement = k - number if complement in seen: pairs.add(tuple(sorted((number, complement)))) seen.add(number) if pairs: sorted_pairs = sorted(pairs) return sorted_pairs else: return \\"No pairs found\\""},{"question":"Daniil enjoys exploring various city parks, especially those with distinct landmarks. One day, he stumbled upon an old, overgrown park with an intricate network of paths connecting numerous landmarks. The park can be represented as an undirected graph where landmarks are vertices and paths are edges. Daniil is curious to know if there exists a special path in this park that meets specific criteria. A magical path is defined as a path where the sum of the weights of all edges is an odd number. The first line of input contains two integers n and m (2 le n le 500, 1 le m le 5000) — the number of landmarks (vertices) and the number of paths (edges) in the park. The next m lines each contain three integers u, v, and w (1 le u, v le n, 1 le w le 10^6) — the endpoints of the path (vertices) and the weight of the path (edge weight). Help Daniil find out if there exists a magical path in the park. If such a path exists, print \\"Yes\\" (quotes for clarity). Otherwise, print \\"No\\" (quotes for clarity). Examples: Input: 5 6 1 2 2 1 3 4 2 3 1 2 4 7 3 5 6 4 5 3 Output: Yes Input: 4 3 1 2 4 2 3 6 3 4 2 Output: No","solution":"def exists_magical_path(n, m, edges): Determines if a magical path exists, which is defined by having an odd sum of weights. :param n: Number of vertices :param m: Number of edges :param edges: List of tuples representing edges (u, v, w) :return: \'Yes\' if a magical path exists, \'No\' otherwise for u, v, w in edges: if w % 2 != 0: return \\"Yes\\" return \\"No\\""},{"question":"You are given a list of integers representing the heights of people standing in a line. A person can see the person standing right in front of them if their height is greater than or equal to the height of the person directly in front of them, without considering anyone else. Your task is to find out how many people in the line can see the person standing immediately in front of them. Write a function `can_see_front(n, heights)` which receives the following parameters: - `n` (1 ≤ n ≤ 200,000) - the number of people in the line. - `heights` - a list of positive integers representing the heights of the people in the line, where heigh_1, heigh_2, ..., heigh_n (1 ≤ heights[i] ≤ 10^9) are the heights of the people from front to back. The function should return an integer, indicating the number of people who can see the person standing immediately in front of them. # Input Format: The first line contains an integer `n`, the number of people in the line. The second line contains `n` space-separated integers representing the heights of the people. # Output Format: Print a single integer, the number of people who can see the person standing immediately in front of them. # Example: Input: ``` 6 4 3 7 6 3 8 ``` Output: ``` 3 ``` Explanation: - The first person can always see the person in front of them (since there\'s nobody in front of them). - The second person with height 3 can see the person with height 4. - The third person with height 7 can see the person with height 3. - The fourth person with height 6 cannot see the person with height 7. - The fifth person with height 3 cannot see the person with height 6. - The sixth person with height 8 can see the person with height 3. # Note: The function should handle up to the maximum constraints efficiently.","solution":"def can_see_front(n, heights): Returns the number of people who can see the person standing immediately in front of them. Parameters: n (int): The number of people in the line. heights (list of int): The heights of people in the line. Returns: int: The number of people who can see the person standing immediately in front of them. if n == 1: return 1 # Only one person, they can see the front because there\'s nobody to block them. can_see_count = 1 # The first person can always see the front for i in range(1, n): if heights[i] >= heights[i-1]: can_see_count += 1 return can_see_count"},{"question":"Olya has an array of n integers. She wants to create a new array by selecting some of the elements from the original array with the condition that every two elements taken from the original array to form the new array should have the same value. Help Olya find out how many distinct non-empty subarrays can be formed from the original array that satisfies the condition mentioned above. As the answer could be large, return the result modulo 1000000007 (10^9 + 7). The first line contains a single integer n (1 ≤ n ≤ 10^6), the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^6) — the elements of the array. Print a single integer — the number of distinct non-empty subarrays modulo 1000000007 (10^9 + 7). # Example **Input:** ``` 5 1 2 2 1 2 ``` **Output:** ``` 5 ``` **Explanation:** The subarrays that can be formed are: {1}, {2}, {2}, {1}, and {2}. Even though the values are repeated in the array, each subarray is considered distinct due to its position index in the original array.","solution":"def count_distinct_subarrays(n, arr): MODULO = 1000000007 # Dictionary to store the frequency of elements freq_map = {} for num in arr: if num in freq_map: freq_map[num] += 1 else: freq_map[num] = 1 result = 0 # Calculate the number of single element subarrays for count in freq_map.values(): result += count result %= MODULO return result"},{"question":"You are given an integer array a of length n and an integer k. Your task is to determine if you can partition the array into exactly k non-empty subarrays such that the sum of the elements in each subarray is equal. If you can partition the array in such a way, print \\"YES\\". Otherwise, print \\"NO\\". The first line of the input contains two integers n (1 le n le 1000) — the number of elements in the array, and k (1 le k le n) — the number of subarrays to partition the array into. The second line contains n integers a_i (1 le a_i le 1000) — the elements of the array. Output \\"YES\\" or \\"NO\\" depending on whether it\'s possible to partition the array into k subarrays with equal sums.","solution":"def can_partition(n, k, a): total_sum = sum(a) # Check if the total sum is divisible by k if total_sum % k != 0: return \\"NO\\" target_sum = total_sum // k current_sum, partition_count = 0, 0 for num in a: current_sum += num if current_sum == target_sum: partition_count += 1 current_sum = 0 return \\"YES\\" if partition_count == k else \\"NO\\""},{"question":"Ahmed loves playing with arrays and subarrays. One day he came up with an interesting problem while arranging his toys. He has an array of integers, and he wants to know if he can partition this array into two non-empty contiguous subarrays such that the sum of the elements in the first subarray is strictly greater than the sum of the elements in the second subarray. Given an array of integers, determine if such a partitioning is possible. The first line contains a single integer t (1 leq t leq 10^4) — the number of test cases. Then the descriptions of the test cases follow. The first line of each test case contains a single integer n (2 leq n leq 10^5) — the size of the array. The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9) — the elements of the array. It is guaranteed that the total number of elements across all test cases does not exceed 10^5. Print \\"Yes\\" if such a partitioning is possible. Otherwise, print \\"No\\". # Example **Input** ``` 3 3 1 2 3 4 10 4 2 1 5 5 1 3 2 8 ``` **Output** ``` No Yes Yes ``` # Explanation In the first test case, there is no way to partition the array such that the sum of the first subarray is strictly greater than the sum of the second subarray. In the second test case, partitioning the array into [10] and [4, 2, 1] makes the sum of the first subarray (10) greater than the sum of the second subarray (7). In the third test case, partitioning the array into [5, 1, 3] and [2, 8] makes the sum of the first subarray (9) greater than the sum of the second subarray (10) ; however, partitioning into [5, 1, 3, 2] and [8] doesn\'t meet the requirement but re-ordering could make it.","solution":"def can_partition_array(test_cases): results = [] for n, a in test_cases: total_sum = sum(a) left_sum = 0 for i in range(n - 1): left_sum += a[i] right_sum = total_sum - left_sum if left_sum > right_sum: results.append(\\"Yes\\") break else: results.append(\\"No\\") return results"},{"question":"Assuming the existing question covers concepts like grid navigation, geometric positioning, and query-based interaction, let\'s create a new question involving pathfinding and optimization on a grid. In an amusement park, visitors navigate through different attractions that are laid out in a grid format. Each attraction has a certain fun value associated with it. For the convenience of the visitors, the park management wants to provide a way to find the maximum fun value path from the entrance to the exit. The entrance is located at the top-left corner of the grid (0,0) and the exit is at the bottom-right corner of the grid (N-1, M-1). Visitors can only move to the right or down at any point in time. Given the grid of attractions with their associated fun values, provide the maximum fun value a visitor can accumulate when navigating from the entrance to the exit. The first line contains two integers N and M — the number of rows and columns of the grid. Each of the next N lines contains M integers, representing the fun values of the attractions in the grid. Output the maximum fun value a visitor can accumulate. **Example:** Input: ``` 3 3 1 2 3 4 5 6 7 8 9 ``` Output: ``` 29 ``` In this example, the path with the maximum fun value is 1 → 4 → 7 → 8 → 9, accumulating a total fun value of 29.","solution":"def max_fun_value(N, M, grid): # Create a 2D dp array to store the maximum fun value at each cell dp = [[0] * M for _ in range(N)] # Initialize the starting point dp[0][0] = grid[0][0] # Fill the first row for j in range(1, M): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column for i in range(1, N): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, N): for j in range(1, M): dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] return dp[N - 1][M - 1]"},{"question":"You are given a grid of size n times n, initially filled with zeros. You will perform q operations of the following types: 1. Add an integer v to all elements in a subgrid defined by its top-left corner (r_1, c_1) and bottom-right corner (r_2, c_2). 2. Query the sum of all elements in a subgrid defined by its top-left corner (r_1, c_1) and bottom-right corner (r_2, c_2). Formally, after the addition operation \\"1 r1 c1 r2 c2 v\\", you will add the value v to every element in the subgrid from (r1, c1) to (r2, c2) (inclusive). For the query operation \\"2 r1 c1 r2 c2\\", you need to return the sum of all elements in the subgrid from (r1, c1) to (r2, c2) (inclusive). The first line contains two integers n (1 le n le 500) — the size of the grid, and q (1 le q le 10^4) — the number of operations. The next q lines contain the operations in the format described above. It is guaranteed that for each operation: - 1 le r1 le r2 le n - 1 le c1 le c2 le n - 1 le v le 1000 Output the results of all the query operations. Example: Input: 5 3 1 1 1 3 3 10 2 1 1 3 3 1 2 2 5 5 5 Output: 90 Explanation: 1. After operation \\"1 1 1 3 3 10\\", the grid looks like this: ``` 10 10 10 0 0 10 10 10 0 0 10 10 10 0 0 0 0 0 0 0 0 0 0 0 0 ``` 2. The sum in the subgrid from (1, 1) to (3, 3) is 90. 3. After operation \\"1 2 2 5 5 5\\", the grid looks like this: ``` 10 10 10 0 0 10 15 15 5 5 10 15 15 5 5 0 5 5 5 5 0 5 5 5 5 ```","solution":"def initialize_grid(n): Initialize an n x n grid with zeros. return [[0] * n for _ in range(n)] def add_to_subgrid(grid, r1, c1, r2, c2, v): Add v to all elements in the subgrid defined by its top-left corner (r1, c1) and bottom-right corner (r2, c2). for i in range(r1-1, r2): for j in range(c1-1, c2): grid[i][j] += v def sum_subgrid(grid, r1, c1, r2, c2): Query the sum of all elements in the subgrid defined by its top-left corner (r1, c1) and bottom-right corner (r2, c2). return sum(grid[i][j] for i in range(r1-1, r2) for j in range(c1-1, c2)) def process_operations(n, q, operations): Process q operations on the n x n grid and return the sum results for query operations. grid = initialize_grid(n) results = [] for operation in operations: op = operation[0] if op == 1: _, r1, c1, r2, c2, v = operation add_to_subgrid(grid, r1, c1, r2, c2, v) elif op == 2: _, r1, c1, r2, c2 = operation result = sum_subgrid(grid, r1, c1, r2, c2) results.append(result) return results"},{"question":"Write a function that takes an integer N and returns a list of strings representing all possible valid combinations of N pairs of parentheses. Each combination should be enclosed in its own list element as a properly balanced sequence of parentheses. For instance, given N=3, a valid combination list would be: [\\"((()))\\", \\"(()())\\", \\"(())()\\", \\"()(())\\", \\"()()()\\"] Your task is to generate all such combinations. The function should have the following signature: ```python def generate_parentheses(N: int) -> List[str]: ```","solution":"from typing import List def generate_parentheses(N: int) -> List[str]: def backtrack(s, left, right): if len(s) == 2 * N: result.append(s) return if left < N: backtrack(s + \'(\', left + 1, right) if right < left: backtrack(s + \')\', left, right + 1) result = [] backtrack(\'\', 0, 0) return result"},{"question":"***Problem Statement:*** You are given an array of integers and a target sum. You have to implement a function that returns a list of all unique quadruplets in the array that add up to the target sum. Each quadruplet should be sorted in non-descending order, and the list of quadruplets should also be sorted in non-descending order (lexicographical order). For example, given the array `[1, 0, -1, 0, -2, 2]` and the target sum `0`, the unique quadruplets that add up to the target sum are: ``` [[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]] ``` # Constraints: - The length of the array will be between `1` and `200`. - Each element in the array will be an integer between `-10^9` and `10^9`. - The target sum will be an integer between `-10^9` and `10^9`. # Signature: Your function should have the following signature: ```python def four_sum(nums: List[int], target: int) -> List[List[int]]: pass ``` # Example: ```python nums = [1, 0, -1, 0, -2, 2] target = 0 print(four_sum(nums, target)) # Output: [[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]] ``` # Guidelines: - Ensure that the solution is efficient and handles edge cases appropriately. - Avoid using libraries or functions that directly solve subsets or combinations, to demonstrate the concept clearly.","solution":"from typing import List def four_sum(nums: List[int], target: int) -> List[List[int]]: nums.sort() result = [] n = len(nums) for i in range(n): # Avoid duplicates for the first number if i > 0 and nums[i] == nums[i - 1]: continue for j in range(i + 1, n): # Avoid duplicates for the second number if j > i + 1 and nums[j] == nums[j - 1]: continue k, l = j + 1, n - 1 while k < l: total = nums[i] + nums[j] + nums[k] + nums[l] if total == target: result.append([nums[i], nums[j], nums[k], nums[l]]) # Avoid duplicates for the third number while k < l and nums[k] == nums[k + 1]: k += 1 # Avoid duplicates for the fourth number while k < l and nums[l] == nums[l - 1]: l -= 1 k += 1 l -= 1 elif total < target: k += 1 else: l -= 1 return result"},{"question":"Create a program that can successfully participate in a stock trading game using past stock prices to decide on the most optimal buying and selling points. In this game, you are given historical stock prices for multiple companies and need to develop a strategy that maximizes the profit by deciding when to buy and sell stocks. You can only own one stock at a time and must sell it before buying another one. Each company provides a CSV file containing its daily stock prices over the past five years. The CSV files follow this format: Date,Open,High,Low,Close,Volume Your program should read these CSV files to analyze the data and output the days to buy and sell for maximum profit. The decision on which stock to buy and when to buy or sell it must be based on the historical data provided. The first line of each CSV file contains the fields\' names, and the subsequent lines contain the respective stock data. # Instructions 1. Your program can use standard libraries to read and process CSV files. 2. You are not allowed to use any external datasets other than those provided in the problem statement. 3. Make sure to optimize your algorithm to handle large datasets efficiently, as each company\'s data could contain up to 5 years of daily stock prices. 4. Output the suggested buy and sell dates along with the corresponding stock ticker and the profit achieved for those transactions. 5. For each stock, the program should print the maximum possible profit it could have achieved with a single buy and sell transaction. 6. The output format should be: - `ticker, buy_date, sell_date, profit` After implementing your solution, submit it as a zip archive containing a `main.py` file. In this file, you\'ll include the code implementation along with a README explaining the approach and any assumptions made. # Example For a given stock file `AAPL.csv` with the following data: ``` Date,Open,High,Low,Close,Volume 2022-01-01,132,135,130,133,100000 2022-01-02,133,137,132,136,150000 2022-01-03,138,140,136,139,200000 ... ``` An optimal solution might find that buying on `2022-01-01` and selling on `2022-01-03` gives the maximum profit of `7` (from 132 to 139). # Submission Submit a zip archive with: 1. `main.py` - The implementation of your solution. 2. `README.md` - A brief description of your approach, any libraries used, and assumptions made.","solution":"import csv from datetime import datetime def find_best_trade(csv_filepath): min_price = float(\'inf\') min_date = None max_profit = 0 buy_date = None sell_date = None with open(csv_filepath, \'r\') as file: reader = csv.DictReader(file) for row in reader: current_date = row[\'Date\'] current_price = float(row[\'Open\']) if current_price < min_price: min_price = current_price min_date = current_date potential_profit = float(row[\'Close\']) - min_price if potential_profit > max_profit: max_profit = potential_profit buy_date = min_date sell_date = current_date ticker = csv_filepath.split(\'.\')[0].upper() return ticker, buy_date, sell_date, max_profit # Example usage: # result = find_best_trade(\'AAPL.csv\') # print(f\\"{result[0]}, {result[1]}, {result[2]}, {result[3]}\\")"},{"question":"You are given an array of positive integers a_1, a_2, ldots, a_n and an integer t. Your task is to find all pairs of elements in the array that sum up to t. The function should be efficient and handle large inputs. # Input - The first line of the input contains an integer n (1 leq n leq 10^6) – the size of the array. - The second line contains the array of n positive integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^6). - The third line contains a single integer t (1 leq t leq 2 cdot 10^6). # Output For each pair of elements that add up to t, output the pair in a single line. Each element should be paired only once in the output. If multiple pairs of elements add up to the same value, output each unique pair. The pairs should be in sorted order of their first and second elements within the pair. If no such pairs are found, print `-1`. # Example Input ``` 5 1 2 3 4 5 5 ``` Output ``` 1 4 2 3 ``` Input ``` 3 1 1 1 2 ``` Output ``` 1 1 ``` Input ``` 4 1 1 1 1 3 ``` Output ``` -1 ``` # Note: In the example, the first input yields pairs (1, 4) and (2, 3) that add up to 5. In the second input, the array contains multiple 1\'s, but since the target sum is 2, it outputs only one pair (1, 1). The last example has no pairs that sum up to 3. Thus, it outputs `-1`. # Constraints - The solution should be efficient with a time complexity better than O(n^2). - Handle edge cases with duplicate elements and large inputs appropriately.","solution":"def find_pairs_with_sum(arr, t): Finds all unique pairs of numbers in the array that add up to the target sum t. if not arr: return -1 pairs = [] seen = set() used = set() for number in arr: complement = t - number if complement in seen and (number not in used and complement not in used): pairs.append((min(number, complement), max(number, complement))) used.add(number) used.add(complement) seen.add(number) if pairs: pairs.sort() return pairs else: return -1"},{"question":"Lena loves palindromes very much. A palindrome is a string that reads the same forward and backward. For example, \'level\', \'radar\', and \'121\' are palindromes, but \'hello\' and \'123\' are not. Lena is interested in finding the longest palindromic substring in a given string s. A substring is defined as a contiguous sequence of characters within a string. For example, the substrings of \'abc\' are \'a\', \'b\', \'c\', \'ab\', \'bc\', and \'abc\'. Given a string s, help Lena find the longest palindromic substring in s. The input consists of a single string s (1 ≤ |s| ≤ 1000), where |s| is the length of the string and s contains only lowercase English letters. Print the longest palindromic substring in s. If there are multiple solutions, print the one that appears first. Examples: Input: babad Output: bab Input: cbbd Output: bb","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring of the input string s. if not s: return \\"\\" n = len(s) start, max_len = 0, 1 def expand_center(left, right): while left >= 0 and right < n and s[left] == s[right]: left -= 1 right += 1 return left + 1, right - 1 for i in range(n): l1, r1 = expand_center(i, i) # Odd length palindrome l2, r2 = expand_center(i, i + 1) # Even length palindrome if r1 - l1 + 1 > max_len: start, max_len = l1, r1 - l1 + 1 if r2 - l2 + 1 > max_len: start, max_len = l2, r2 - l2 + 1 return s[start:start + max_len]"},{"question":"You are given a rectangular grid of size m x n, where each cell represents a plot of land. Each plot of land can either be cultivated (represented by a 1) or left barren (represented by a 0). We define an agricultural segment as a subgrid where every cell contains 1. The size of this subgrid is determined by the number of rows multiplied by the number of columns it covers. Given the grid, write a program that calculates the area of the largest agricultural segment (largest subgrid containing only 1s). The first line of the input contains two integers m and n (1 ≤ m, n ≤ 100), the number of rows and columns respectively. The next m lines each contain n integers either 0 or 1 — the grid representation. Print a single integer which is the area of the largest agricultural segment. If there is no such segment, print 0. Input: ``` 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 0 0 0 1 0 ``` Output: ``` 6 ```","solution":"def max_area_of_agricultural_segment(grid): Given a grid of 1s and 0s, calculates the area of the largest subgrid containing only 1s. if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) dp = [[0] * n for _ in range(m)] max_area = 0 for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = (dp[i][j-1] + 1) if j > 0 else 1 width = dp[i][j] for k in range(i, -1, -1): width = min(width, dp[k][j]) if width == 0: break max_area = max(max_area, width * (i - k + 1)) return max_area"},{"question":"Given an array of positive integers and a target sum, determine if there exists a combination of numbers in the array that adds up exactly to the target sum. You should write a function that returns True if such a combination exists, and False otherwise. Each integer in the array can be used only once in the combination. Function Signature: ```python def can_sum(arr: List[int], target: int) -> bool: pass ``` **Input:** - arr: a list of positive integers (1 ≤ len(arr) ≤ 30, 1 ≤ arr[i] ≤ 100) - target: a positive integer (1 ≤ target ≤ 1000) **Output:** - A boolean value: True if a combination exists that adds up to the target sum, otherwise False. **Example:** ```python print(can_sum([2, 3, 7, 8, 10], 11)) # Output: True (2 + 3 + 7 = 11) print(can_sum([1, 2, 3, 8], 6)) # Output: True (2 + 3 + 1 = 6) print(can_sum([9, 3, 7, 1], 5)) # Output: True (3 + 1 + 1 = 5) print(can_sum([1, 2, 3], 7)) # Output: False (no combination adds up to 7) ```","solution":"from typing import List def can_sum(arr: List[int], target: int) -> bool: Determines if there exists a combination of numbers in the array that adds up exactly to the target sum. Each integer in the array can be used only once. n = len(arr) # Create a DP array with size target + 1, initialized to False dp = [False] * (target + 1) dp[0] = True # A sum of 0 can always be achieved by selecting no elements # Update the DP array for num in arr: for i in range(target, num - 1, -1): if dp[i - num]: dp[i] = True return dp[target]"},{"question":"Alex has a peculiar preference for numbers that appear in a very specific format. He calls them \\"zigzag numbers\\". A zigzag number is defined as a number where every adjacent pair of digits consistently alternates between increasing and decreasing when read from left to right. For example, numbers like 121, 132, 212 are zigzag numbers but 123, 202, 321 are not. Your task is to write a function that determines if a given number is a zigzag number. The input consists of a single integer n (10 ≤ n ≤ 10^9) — the number that needs to be checked. Output \\"TRUE\\" if the number is a zigzag number. Otherwise, output \\"FALSE\\". In the first sample, 121 alternates between increasing and decreasing. In the second sample, 123 does not alternate accordingly. Here are some example inputs and outputs: - Input: 121 Output: TRUE - Input: 123 Output: FALSE - Input: 214365 Output: TRUE","solution":"def is_zigzag_number(n): Determine if a given number n is a zigzag number. A zigzag number is defined as a number where every adjacent pair of digits consistently alternates between increasing and decreasing. :param n: Integer n (10 ≤ n ≤ 10^9) :return: \\"TRUE\\" if n is a zigzag number, \\"FALSE\\" otherwise # Convert the number to a string to easily access digits num_str = str(n) length = len(num_str) # Check if at least 2 digits exist if length < 2: return \\"FALSE\\" # Iterate through the number to check the zigzag pattern for i in range(1, length - 1): if not ((num_str[i-1] < num_str[i] and num_str[i] > num_str[i+1]) or (num_str[i-1] > num_str[i] and num_str[i] < num_str[i+1])): return \\"FALSE\\" return \\"TRUE\\""},{"question":"Given a `n x m` matrix of integers, rotate the matrix 90 degrees clockwise. The rotation must be performed in-place, modifying the existing matrix. You may assume that the matrix is square i.e., `n == m`. # Input - An integer `n` (1 ≤ n ≤ 100) representing the dimensions of the matrix. - A `n x n` matrix of integers where each entry is within the range [-1000, 1000]. # Output - The `n x n` matrix after rotating it 90 degrees clockwise. # Example **Input:** ``` 3 1 2 3 4 5 6 7 8 9 ``` **Output:** ``` 7 4 1 8 5 2 9 6 3 ``` # Note - Ensure the function modifies the matrix in-place without using extra space for another matrix of the same size. - You may write a function `rotate(matrix: List[List[int]]) -> None:` where `matrix` is modified directly. # Example Function ```python def rotate(matrix): n = len(matrix) for i in range(n//2): for j in range(i, n - i - 1): temp = matrix[i][j] matrix[i][j] = matrix[n - j - 1][i] matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1] matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1] matrix[j][n - i - 1] = temp ```","solution":"def rotate(matrix): Rotate the n x n matrix 90 degrees clockwise in-place. :param matrix: List[List[int]] n = len(matrix) for i in range(n // 2): for j in range(i, n - i - 1): # Rotate the four corners temp = matrix[i][j] matrix[i][j] = matrix[n - j - 1][i] matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1] matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1] matrix[j][n - i - 1] = temp"},{"question":"You are given an array of integers and a target integer. Your task is to determine if there exists a pair of indices (i) and (j) (where (i neq j)) in the array such that the sum of elements at these indices is equal to the target integer. The input consists of two lines. The first line contains an integer ( n ) ((2 leq n leq 10^5)), the number of elements in the array. The second line contains ( n ) integers ( a_1, a_2, ldots, a_n ) ((-10^9 leq a_i leq 10^9)), the elements of the array. The third line contains a single integer target. Output \\"YES\\" if there exists such a pair of indices (i) and (j); otherwise, output \\"NO\\". # Example 1: Input: ``` 5 1 2 3 4 5 9 ``` Output: ``` YES ``` # Example 2: Input: ``` 4 1 2 3 4 8 ``` Output: ``` NO ``` # Explanation: In the first example, the pair of indices (3,4) corresponds to the elements (4, 5) which sum up to 9. Therefore, the output is \\"YES\\". In the second example, there are no such pairs that sum up to 8, hence the output is \\"NO\\".","solution":"def has_pair_with_sum(arr, target): Determines if there exists a pair of indices i and j (i ≠ j) in the array `arr` such that arr[i] + arr[j] equals the `target`. Parameters: arr (list of int): List of integers. target (int): Target sum. Returns: str: \\"YES\\" if such a pair exists, otherwise \\"NO\\". seen = set() for number in arr: if target - number in seen: return \\"YES\\" seen.add(number) return \\"NO\\""},{"question":"You are given a list of words. Each word consists of lowercase English letters only. Determine the length of the longest word in the list that can be created by deleting some (or none) of the characters from a given string `s` in such a way that the remaining characters appear in the same order as in the word. Input: - The first line contains the string `s` consisting of lowercase English letters. - The second line contains an integer `n`, the number of words in the list. - The next `n` lines contain one word each. Output: - Print the length of the longest word from the list that can be formed from `s` as described above. If no such word can be found, print `0`. Example: Input: ``` abpcplea 4 ale apple monkey plea ``` Output: ``` 5 ``` Explanation: - \\"ale\\" can be made by removing \'b\', \'p\', \'c\', \'p\', \'l\', \'e\', and \'a\'. - \\"apple\\" can be made by removing \'b\', \'c\'. - \\"monkey\\" cannot be made from the given string `s`. - \\"plea\\" can be made by removing \'a\', \'b\', \'p\', \'c\', \'p\', \'l\'. - The longest word that can be formed is \\"apple\\" with length 5.","solution":"def is_subsequence(word, s): Helper function to check if a `word` is a subsequence of `s`. it = iter(s) return all(char in it for char in word) def longest_word_subsequence_length(s, words): Returns the length of the longest word in `words` that can be formed as a subsequence of `s`. max_length = 0 for word in words: if is_subsequence(word, s): max_length = max(max_length, len(word)) return max_length"},{"question":"You are given an array of n integers and q queries. Each query is given in one of the following two formats: 1. \\"1 x y\\": Replace the value at index x of the array with the value y. (1 ≤ x ≤ n) 2. \\"2 l r k\\": Find the k-th smallest element in the subarray from index l to r (inclusive). (1 ≤ l ≤ r ≤ n, 1 ≤ k ≤ (r - l + 1)) Your task is to write a program to handle these queries efficiently. The first line of input contains two integers n and q (1 ≤ n, q ≤ 100000). The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) - the initial elements of the array. The next q lines describe the queries. For each query of type \\"2 l r k\\", output the k-th smallest element in the subarray from l to r. # Example **Input:** ``` 5 3 5 3 7 1 8 2 1 3 2 1 3 2 2 1 3 2 ``` **Output:** ``` 5 3 ``` # Explanation Initial array: [5, 3, 7, 1, 8] First query: \\"2 1 3 2\\": The subarray from index 1 to 3 is [5, 3, 7]. The 2nd smallest element is 5. Second query: \\"1 3 2\\": Update the third element to 2. The array becomes [5, 3, 2, 1, 8]. Third query: \\"2 1 3 2\\": The subarray from index 1 to 3 is [5, 3, 2]. The 2nd smallest element is 3.","solution":"def process_queries(n, q, array, queries): Process the given queries on the array. Parameters: n (int): Length of the array q (int): Number of queries array (list): Initial array elements queries (list): List of queries Returns: list: Results of the \\"2 l r k\\" queries results = [] for query in queries: parts = query.split() if parts[0] == \\"1\\": x = int(parts[1]) - 1 y = int(parts[2]) array[x] = y elif parts[0] == \\"2\\": l = int(parts[1]) - 1 r = int(parts[2]) k = int(parts[3]) sub_array = sorted(array[l:r]) results.append(sub_array[k-1]) return results # Example run: n = 5 q = 3 array = [5, 3, 7, 1, 8] queries = [\\"2 1 3 2\\", \\"1 3 2\\", \\"2 1 3 2\\"] print(process_queries(n, q, array, queries)) # Expected Output: [5, 3]"},{"question":"Sandy has a collection of N acorns, each with a positive integer weight. She wants to partition these acorns into two groups such that the absolute difference between the sum of weights in the two groups is minimized. Help Sandy find this minimal absolute difference. **Input:** - The first line of the input contains an integer N (1 ≤ N ≤ 100). - The second line contains N integers a1, a2, ..., aN (1 ≤ ai ≤ 1000) representing the weights of the acorns. **Output:** - Output a single integer representing the minimal absolute difference between the sums of the two groups. **Examples:** **Example 1:** Input: ``` 5 1 2 3 4 5 ``` Output: ``` 1 ``` **Example 2:** Input: ``` 4 6 5 3 1 ``` Output: ``` 1 ``` **Example 3:** Input: ``` 3 10 20 30 ``` Output: ``` 0 ``` **Explanation:** In Example 1, Sandy can partition the acorns into groups {1, 2, 3} and {4, 5}, with sums 6 and 9, and the absolute difference is 9 - 6 = 3. Alternatively, partitioning them into {1, 5} and {2, 3, 4} results in sums 6 and 9 again, so the minimal difference is 3. In Example 2, Sandy can partition the acorns into groups {6, 5} and {3, 1}, with sums 11 and 4, and the absolute difference is 1. In Example 3, partitioning into groups {10, 20} and {30} results in sums 30 and 30, so the minimal difference is 0.","solution":"def min_absolute_difference(N, weights): total_sum = sum(weights) dp = [False] * (total_sum // 2 + 1) dp[0] = True for weight in weights: for j in range(total_sum // 2, weight - 1, -1): dp[j] = dp[j] or dp[j - weight] for i in range(total_sum // 2, -1, -1): if dp[i]: return total_sum - 2 * i"},{"question":"Alice has a garden with a grid of dimensions n times m. Each cell of the grid can either contain a plant or be empty. Initially, all cells are empty. Alice wants to plant trees in such a way that no two trees are placed in adjacent cells (horizontally, vertically, or diagonally). Help Alice by determining a valid configuration of trees in the grid. You will be given multiple test cases. The first line contains an integer t (1 leq t leq 10) – the number of test cases. Each test case starts with two integers n and m (1 leq n, m leq 50) representing the dimensions of the grid. The output for each test case should be a valid configuration of the grid with trees placed accordingly. Each cell should be represented by either \'.\' for an empty cell or \'T\' for a cell containing a tree. # Example ``` Input 3 3 3 4 5 2 2 Output T.T .T. T.T T.T.T .T.T. T.T.T .T.T. T. .T ``` # Note In the first example, a 3x3 grid is provided. The output shows one possible valid configuration where no two trees share an adjacent cell. In the second example, the provided 4x5 grid is completed such that no two trees are adjacent. In the third example, a valid tree placement for a 2x2 grid is shown.","solution":"def plant_trees(n, m): Function to determine a valid configuration of trees in an n x m grid such that no two trees are placed in adjacent cells. Parameters: - n (int): Number of rows in the grid. - m (int): Number of columns in the grid. Returns: - list: Representation of the grid with \'.\' for empty cells and \'T\' for cells containing trees. grid = [[\'.\' for _ in range(m)] for _ in range(n)] for i in range(n): for j in range(m): if (i + j) % 2 == 0: grid[i][j] = \'T\' return grid def format_grid(grid): Function to format grid as a list of strings for easy output representation. Parameters: - grid (list): 2D list representing the grid. Returns: - list: List of strings containing the formatted grid. return [\'\'.join(row) for row in grid]"},{"question":"Given an array of integers, you need to determine if there is a subarray (contiguous part of array) of length at least 2 that sums to a multiple of a given integer k. In other words, find if there exists an integer x such that sum of the subarray is x * k (where x is an integer). The first line contains an integer n, the length of the array (1 ≤ n ≤ 10^5). The second line contains n space-separated integers representing the array (each integer can be between -10^9 and 10^9). The third line contains an integer k, which is the number we want to check for multiples (1 ≤ k ≤ 10^9). Print \\"Yes\\" if there exists such a subarray, otherwise print \\"No\\". Examples: Input: 6 23 2 6 4 7 6 Output: Yes Input: 5 5 0 0 0 3 Output: Yes Input: 3 1 2 4 5 Output: No Note: In the first example, there is a subarray (2, 6, 4) which sums to 12, and 12 is a multiple of 6. In the second example, the subarray (0, 0) sums to 0, which is a multiple of 3. In the third example, there is no subarray that sums to a multiple of 5.","solution":"def check_subarray_sum(nums, k): Determines if there is a subarray of length at least 2 that sums to a multiple of k. Args: nums (list): List of integers representing the array. k (int): The integer to check multiples of. Returns: str: \\"Yes\\" if such a subarray exists, otherwise \\"No\\". prefix_sum = 0 prefix_sums_map = {0: -1} # Initializing with 0 at index -1 to handle edge cases for i, num in enumerate(nums): prefix_sum += num if k != 0: prefix_sum %= k if prefix_sum in prefix_sums_map: if i - prefix_sums_map[prefix_sum] > 1: return \\"Yes\\" else: prefix_sums_map[prefix_sum] = i return \\"No\\""},{"question":"You are given an array of integers representing the input frequency of different characters. You are also provided with a list of characters and their desired frequency counts. Your task is to determine if it is possible to re-arrange the input array such that the characters appear at least with their desired frequencies. If possible, return True, otherwise return False. Write a function that processes the array and the list of characters with their desired frequencies to determine if the requirements can be met. Function signature: ```python def can_meet_frequency(input_array: List[int], desired_frequencies: List[Tuple[str, int]]) -> bool: pass ``` # Example: ```python input_array = [2, 3, 3, 5, 5, 5] desired_frequencies = [(\'a\', 2), (\'b\', 3), (\'c\', 5)] print(can_meet_frequency(input_array, desired_frequencies)) # Output: True input_array = [1, 2, 3] desired_frequencies = [(\'a\', 2), (\'b\', 2)] print(can_meet_frequency(input_array, desired_frequencies)) # Output: False ``` **Constraints:** - Each character in the desired frequencies list appears at least once in the input array. - The input array can contain up to 10^4 elements. - The desired frequencies list can contain up to 100 characters. **Notes:** - The input array represents frequencies (not the characters themselves). - The function should determine if it is possible to assign the frequency counts from the input array to the desired characters in a way that meets or exceeds each desired count.","solution":"from typing import List, Tuple def can_meet_frequency(input_array: List[int], desired_frequencies: List[Tuple[str, int]]) -> bool: Determine if the frequencies from input_array can be assigned to desired_frequencies such that each character meets or exceeds its desired frequency. # Sort input array in reverse order (largest first) for optimal frequency assignment input_array_sorted = sorted(input_array, reverse=True) # Extract just the frequency values from the tuple list and sort them in reverse order desired_frequencies_sorted = sorted([freq for char, freq in desired_frequencies], reverse=True) # Pointer to iterate through the sorted input_array input_pointer = 0 for desired in desired_frequencies_sorted: if input_pointer >= len(input_array_sorted): return False # Check if the current largest available frequency can fulfill the current desired frequency while input_pointer < len(input_array_sorted) and input_array_sorted[input_pointer] < desired: input_pointer += 1 if input_pointer == len(input_array_sorted): return False # Move pointer to next for checking the next desired frequency input_pointer += 1 return True"},{"question":"Given a list of strings, write a function that groups the strings that are anagrams of each other. An anagram of a string is another string that contains the same characters, only the order of characters can be different. For example, \\"abc\\" and \\"bca\\" are anagrams of each other, but \\"abc\\" and \\"abz\\" are not anagrams of each other. # Function Signature ```python def group_anagrams(strings: List[str]) -> List[List[str]]: pass ``` # Input - An array of strings, `strings` (1 <= len(strings) <= 1000, 1 <= len(strings[i]) <= 100), which consists of lowercase English characters. # Output - A list of lists of strings, where each inner list contains strings that are anagrams of each other and each string appears in exactly one inner list. # Example ```python input: [\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"] output: [[\\"eat\\", \\"tea\\", \\"ate\\"], [\\"tan\\", \\"nat\\"], [\\"bat\\"]] ``` # Constraints - All strings are of lowercase English letters. - The order of the output does not matter. The inner lists and the strings within those lists can be in any order.","solution":"from collections import defaultdict from typing import List def group_anagrams(strings: List[str]) -> List[List[str]]: anagrams_dict = defaultdict(list) for string in strings: sorted_string = \'\'.join(sorted(string)) anagrams_dict[sorted_string].append(string) return list(anagrams_dict.values())"},{"question":"Chef is a budding gourmet who is learning to cook using various ingredients. Chef maintains a recipe book where each recipe lists the required ingredients and the quantity of each ingredient needed. Chef has a pantry with a limited stock of ingredients. Given a list of recipes Chef wants to cook and the current stock of ingredients in the pantry, determine whether Chef can prepare all the recipes in the list. Chef can only cook a recipe if all the required ingredients are available in the required quantity. Input: - The first line contains a single integer `m` (1 ≤ m ≤ 50) - the number of ingredients in the pantry. - The next line contains `m` space-separated strings representing the names of the ingredients in the pantry. - The following line contains `m` space-separated integers indicating the quantity of each ingredient available in the pantry. - The next line contains a single integer `r` (1 ≤ r ≤ 50) - the number of recipes. - The following `r` blocks describe each recipe. Each block begins with a line containing a single integer `k` (1 ≤ k ≤ 10) - the number of ingredients required for the recipe. The next `k` lines have pairs of strings and integers where each pair consists of an ingredient name (string) and the quantity required (integer). Output: - Print \\"YES\\" if Chef can make all the recipes, otherwise print \\"NO\\". Example: Input: 5 sugar flour butter eggs milk 500 300 200 5 1000 2 3 sugar 200 flour 100 butter 50 2 milk 300 eggs 2 Output: YES Explanation: Chef has sufficient stock of all ingredients to make both recipes. Thus, the output is \\"YES\\".","solution":"def can_make_all_recipes(ingredients, quantities, recipes): ingredient_stock = dict(zip(ingredients, quantities)) for recipe in recipes: for ingredient, quantity in recipe.items(): if ingredient not in ingredient_stock or ingredient_stock[ingredient] < quantity: return \\"NO\\" ingredient_stock[ingredient] -= quantity return \\"YES\\" def parse_input(input_string): lines = input_string.strip().split(\'n\') m = int(lines[0]) ingredients = lines[1].split() quantities = list(map(int, lines[2].split())) r = int(lines[3]) index = 4 recipes = [] for _ in range(r): k = int(lines[index]) recipe = {} index += 1 for _ in range(k): ing, qty = lines[index].split() recipe[ing] = int(qty) index += 1 recipes.append(recipe) return ingredients, quantities, recipes def chef_recipes(input_string): ingredients, quantities, recipes = parse_input(input_string) return can_make_all_recipes(ingredients, quantities, recipes)"},{"question":"In a faraway kingdom, there is a magical tree that produces fruits in a peculiar pattern. Each branch of the tree multiplies itself in a special way and produces fruits. The tree has a single root branch numbered as 1. Each branch can grow into either one or two new branches, and each new branch is also numbered consecutively. The wizard who tends to the tree can cast a spell to grow a certain number of new branches from any branch, and the spell action is represented as a collection of integers describing how many new branches each initial branch should grow into. Given the initial number of branches and the spell action performed by the wizard, your task is to calculate the total number of branches after the spell action is performed. The first line contains a single integer t (1 leq t leq 100) — the number of test cases. For each test case, the first line contains a single integer n (1 leq n leq 1000) — the number of initial branches. The second line contains n integers representing the spell action (0 leq a_i leq 2n), where a_i denotes the number of new branches that the i-th initial branch will grow into. For each test case, output the total number of branches after the spell action is performed. For Example: Input: ``` 2 3 1 2 0 2 0 1 ``` Output: ``` 6 3 ``` Explanation of the Example: In the first test case: - The first initial branch grows into 1 new branch. - The second initial branch grows into 2 new branches. - The third initial branch grows into no new branches. Thus, the total branches are initial branches (3) + new branches (1+2+0) = 6. In the second test case: - The first initial branch grows into no new branches. - The second initial branch grows into 1 new branch. Thus, the total branches are initial branches (2) + new branches (0+1) = 3.","solution":"def count_total_branches(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] spell_actions = test_cases[i][1] total_branches = n + sum(spell_actions) results.append(total_branches) return results"},{"question":"**New Question:** You are a software developer and have developed an email sender function. You need to determine the optimal pairings for n users to send emails amongst themselves, ensuring that no user sends an email to themselves. Each user must both send and receive exactly one email. For each scenario: - If it is possible to create such pairings, print the pairs of sender and recipient in any order. - If it is impossible to create such pairings, print \\"impossible\\". The first line of input contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. For each test case, the input contains a single integer n (2 ≤ n ≤ 10^5) — the number of users. For each test case, output the pairs (a, b) where a and b are indices (1-indexed) of users such that user a sends an email to user b. In the first example, 2 users can only send emails to each other: (1, 2) and (2, 1). In the second example, one possible pairing is (1, 2), (2, 3), (3, 4), and (4, 1). Example: Input: 3 2 4 3 Output: 1 2 2 1 1 2 2 3 3 4 4 1 impossible","solution":"def email_pairings(t, test_cases): results = [] for n in test_cases: if n % 2 == 1: results.append(\\"impossible\\") else: pairs = [] for i in range(1, n + 1, 2): pairs.append(f\\"{i} {i+1}\\") pairs.append(f\\"{i+1} {i}\\") results.append(\\"n\\".join(pairs)) return results"},{"question":"# Problem Statement: You are given a collection of books where each book has a unique identifier and belongs to a certain genre. Each genre can have multiple books associated with it. The goal is to develop a strategy to organize the books into equally sized groups, such that the number of distinct genres within each group is maximized. # Input: - `n`: an integer representing the number of books. - `k`: an integer representing the number of groups. - `genres`: a list of strings where each string represents the genre of the corresponding book by its index. The length of the list is `n`. # Output: - A list of lists where each inner list represents the ids of books in each group. The number of inner lists should be equal to `k`, and the size difference between the groups should be at most 1. # Constraints: - All books must be divided into exactly `k` groups. - Each group should be of approximately the same size (size difference between any two groups should be at most 1). - The number of distinct genres within each group should be maximized. # Example: Input: ``` n = 6 k = 2 genres = [\\"Fantasy\\", \\"Mystery\\", \\"Fantasy\\", \\"Science\\", \\"Mystery\\", \\"Science\\"] ``` Output: ``` [[0, 1, 3], [2, 4, 5]] ``` Explanation: The books with indices 0, 1, and 3 are placed in the first group, which contains genres \\"Fantasy\\", \\"Mystery\\", and \\"Science\\". The books with indices 2, 4, and 5 are placed in the second group, which also contains genres \\"Fantasy\\", \\"Mystery\\", and \\"Science\\". Therefore, each group has 3 books and the number of distinct genres within each group is maximized to 3. # Note: - If there are multiple solutions with the same maximum number of distinct genres, any of them will be accepted as a valid output. - Make sure that all books are divided into exactly `k` groups, and each group should be approximately of the same size.","solution":"import itertools from collections import defaultdict def organize_books(n, k, genres): Organizes books into k groups such that the number of distinct genres within each group is maximized. Parameters: n (int): Number of books k (int): Number of groups genres (list): List of genres for the books (length is n) Returns: list: A list of k lists, each containing book indices organized into groups genre_to_books = defaultdict(list) for idx, genre in enumerate(genres): genre_to_books[genre].append(idx) # Create the solution groups groups = [[] for _ in range(k)] sorted_genres = sorted(genre_to_books.items(), key=lambda x: len(x[1]), reverse=True) book_count_per_group = n // k additional_books = n % k index_per_group = [book_count_per_group] * k for i in range(additional_books): index_per_group[i] += 1 # Fill the groups with the largest number of distinct genres book_index = 0 for genre, book_ids in sorted_genres: for book_id in book_ids: if index_per_group[book_index] > 0: groups[book_index].append(book_id) index_per_group[book_index] -= 1 book_index = (book_index + 1) % k return groups"},{"question":"You are given a tree (connected, undirected graph with no cycles) consisting of n nodes. Each node has a value associated with it. Your task is to find the maximum sum of node values in any path. A path is defined as any sequence of nodes where each consecutive pair of nodes is connected by an edge. First line contains a positive integer n — number of nodes in the tree (1 leq n leq 10^5). The second line contains n integers — the values of the nodes. Each of the following n-1 lines contains two integers u and v (1 leq u, v leq n) describing an edge between node u and node v. Output a single integer, the maximum sum of node values in any path. For example, if the value array is [3, 2, 1, 10, 1] and the edges are [1-2, 2-3, 3-4, 3-5], the maximum sum of values in the path would be 16 (taking the path 4—3—2—1).","solution":"def max_path_sum(n, values, edges): from collections import defaultdict # Build the graph from edges graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) max_sum = float(\'-inf\') def dfs(node, parent): nonlocal max_sum curr_max = values[node - 1] max_child_path = 0 for neighbor in graph[node]: if neighbor != parent: child_sum = dfs(neighbor, node) max_child_path = max(max_child_path, child_sum) curr_max += max_child_path max_sum = max(max_sum, curr_max) return curr_max dfs(1, -1) return max_sum"},{"question":"Alex is playing a game with a grid of size n times m. In this game, there is a start position at (1, 1) and a goal position at (n, m), and Alex wants to determine if it is possible to reach the goal starting from the start position. The grid contains the following types of cells: - \'.\' which means the cell is empty and can be stepped on, - \'#\' which means the cell is a wall and cannot be stepped on, - \'*\' which means the cell is a trap and kills the player if stepped on. Alex can move to an adjacent cell horizontally or vertically. However, the player cannot move into or through cells marked as walls or traps. The task is to determine if there is a path from the start position to the goal position that avoids walls and traps. The first line contains one integer t (1 le t le 100) — the number of test cases. The description of the test cases follows. The first line of each test case contains two integers n and m (1 le n, m le 50) — the number of rows and columns in the grid. Each of the next n lines contains m characters, describing the layout of the grid. \'S\' corresponds to the start position and \'E\' corresponds to the goal position. The start position (S) is always at (1, 1), and the goal position (E) is always at (n, m). Print \\"Yes\\" if there exists a path from the start to the goal avoiding walls and traps for each test case. Otherwise, print \\"No\\". Example: Input: 3 3 3 S.. .#. ..E 2 2 S* *E 4 4 S... .#*# ..*. ...E Output: Yes No Yes","solution":"from collections import deque def can_reach_goal(n, m, grid): Determines if there is a path from the start (1, 1) to the goal (n, m) on the given grid avoiding walls and traps. directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (n - 1, m - 1): return \\"Yes\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited: if grid[nx][ny] not in (\'#\', \'*\'): queue.append((nx, ny)) visited.add((nx, ny)) return \\"No\\" def solve(test_cases): results = [] for case in test_cases: n, m, grid = case results.append(can_reach_goal(n, m, grid)) return results"},{"question":"A social media platform is evaluating its data compression techniques. One of the compression methods they utilize is Run Length Encoding (RLE). This technique is particularly efficient for strings containing many consecutive repeating characters. The task is to implement an encoding and decoding function for strings using RLE. The encoding function should convert the input string into a compressed format where consecutive repeating characters are replaced with the character followed by the number of repetitions. The decoding function should take the compressed format and revert it back to the original string. For example: - The string \\"aaabbbccdddd\\" would be encoded to \\"a3b3c2d4\\". - The encoded string \\"a3b3c2d4\\" would be decoded back to \\"aaabbbccdddd\\". However, you should also handle the case where encoding would not shorten the string. If the encoded string is not shorter than the original, then the original string should be returned by the encoding function as it is. In the decoding function, you can assume the input will always be a valid encoded string. # Input Format - The first line contains one string `s` (1 ≤ |s| ≤ 100), which is the original string to be encoded. # Output Format - The encoding function should print out its result, which is either the encoded string or the original string if compression does not yield a shorter result. - The decoding function should print out its result, which is the original string. # Examples Example 1 ``` Input: aaabbbccdddd Output: a3b3c2d4 ``` Example 2 ``` Input: abc Output: abc ``` # Constraints - The decoding function should strictly handle encoded strings having digits directly following characters and can assume the format will always be correct. - The input string provided for the encoding function contains only uppercase or lowercase English letters.","solution":"def encode_rle(s): Encodes the input string s using Run Length Encoding (RLE). If the encoded string is not shorter than the original, it returns the original string. if not s: return \\"\\" encoded = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: encoded.append(s[i - 1] + str(count)) count = 1 encoded.append(s[-1] + str(count)) encoded_str = \'\'.join(encoded) return encoded_str if len(encoded_str) < len(s) else s def decode_rle(encoded_str): Decodes the Run Length Encoding (RLE) encoded string back to its original form. decoded = [] i = 0 while i < len(encoded_str): char = encoded_str[i] i += 1 num = 0 while i < len(encoded_str) and encoded_str[i].isdigit(): num = num * 10 + int(encoded_str[i]) i += 1 decoded.append(char * num) return \'\'.join(decoded)"},{"question":"You are given an array of integers, where each integer represents the size of a box. Two boxes can be combined to form a larger box by summing their sizes. Your task is to determine the minimum number of steps required to combine all the boxes into a single box. Every step involves picking any two boxes, combining them to form a new box, and replacing them with this new box in the array. Write a function that takes an array of integers representing the sizes of the boxes and returns the minimum number of steps required to combine all the boxes into one. Function signature: ```python def min_combine_steps(box_sizes: List[int]) -> int: ``` # Input - An integer array `box_sizes` (2 ≤ len(box_sizes) ≤ 1000, 1 ≤ box_sizes[i] ≤ 100000). # Output - Return an integer, the minimum number of steps required to combine all the boxes into one. # Example ```python print(min_combine_steps([1, 2, 3])) # Output: 2 print(min_combine_steps([4, 3, 2, 1])) # Output: 3 ``` # Explanation For the first example: - Combine boxes of size 1 and 2, resulting in [3, 3]. - Combine the resulting two boxes of size 3, resulting in [6]. - A total of 2 steps are required. For the second example: - Combine boxes of size 1 and 2, resulting in [4, 3, 3]. - Combine boxes of size 3 and 3, resulting in [4, 6]. - Combine the remaining two boxes of size 4 and 6, resulting in [10]. - A total of 3 steps are required.","solution":"from typing import List import heapq def min_combine_steps(box_sizes: List[int]) -> int: Returns the minimum number of steps required to combine all boxes into one. # Convert box_sizes into a min-heap heapq.heapify(box_sizes) steps = 0 while len(box_sizes) > 1: # Extract the two smallest elements first = heapq.heappop(box_sizes) second = heapq.heappop(box_sizes) # Combine the two elements and push back into the heap combined = first + second heapq.heappush(box_sizes, combined) steps += 1 return steps"},{"question":"You are given a binary tree where each node contains an integer value. A binary tree is a tree in which every node has at most two children. A \\"univalued\\" subtree means all nodes of the subtree have the same value. Write a function that returns the number of \\"univalued\\" subtrees in the given binary tree. # Function Signature ```python def count_univalued_subtrees(root: TreeNode) -> int: ``` # Input - The function takes a single input, `root`, which is the root node of the binary tree. # Output - The function should return an integer, the number of univalued subtrees. # Example ```python Input: 5 / 1 5 / 5 5 5 Output: 4 Explanation: There are 4 univalued subtrees in the given tree: - The three leaf nodes with value 5. - The subtree containing the two leaf nodes with value 5 and their parent with value 5. ``` # Constraints - The number of nodes in the tree will be in the range [1, 10^4]. - The value of each node will be an integer in the range [-1000, 1000]. - You may assume the input binary tree is non-empty.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def count_univalued_subtrees(root: TreeNode) -> int: def is_univalued_subtree(node, parent_value): if not node: return True left_is_univalued = is_univalued_subtree(node.left, node.val) right_is_univalued = is_univalued_subtree(node.right, node.val) if left_is_univalued and right_is_univalued: count_univalued_subtrees.count += 1 return node.val == parent_value return False count_univalued_subtrees.count = 0 is_univalued_subtree(root, root.val) return count_univalued_subtrees.count"},{"question":"You are appointed as the chief architect for the Grand Festival\'s digital ticketing system in Fantasia. The festival organizers want to offer limited editions of tickets with specific constraints to make them collectible items for the attendees. Each ticket\'s number should follow these rules: 1. The ticket number must be a strictly increasing sequence of digits. 2. The length of the number should be exactly `n` digits. 3. Each digit in the ticket number must be from the set `{1, 2, ..., 9}` (no `0` allowed). For instance, for `n=2`, valid ticket numbers include: `12`, `13`, `14`, ..., `89`. The sequence `21` would not be valid because `2` is not less than `1`. Your task is to write a program that, given `n`, prints all valid ticket numbers following the constraints mentioned above, one number per line in lexicographical order. # Input - A single integer `n` (1 ≤ n ≤ 9), which specifies the length of the ticket number. # Output - Print all valid ticket numbers, each on a new line, in lexicographical order. # Example Input ``` 2 ``` Output ``` 12 13 14 15 16 17 18 19 23 24 25 26 27 28 29 34 35 36 37 38 39 45 46 47 48 49 56 57 58 59 67 68 69 78 79 89 ```","solution":"def generate_ticket_numbers(n): Generates all valid ticket numbers of length n following the given constraints: 1. The ticket number must be a strictly increasing sequence of digits. 2. The length of the number should be exactly n. 3. Each digit must be from the set {1, 2, ..., 9} (no 0 allowed). :param n: The length of the ticket number. :type n: int :return: A list of all valid ticket numbers as strings. :rtype: List of str from itertools import combinations # List to store the result result = [] digits = \'123456789\' # Get all combinations of \'digits\' of length \'n\' for comb in combinations(digits, n): result.append(\'\'.join(comb)) return result"},{"question":"In a small town, there is a street with n houses numbered from 1 to n. Each house either has a gas leak or does not. You are given an array a of length n, where a[i]=1 means the i-th house has a gas leak and a[i]=0 means the i-th house does not have a gas leak. The town has one gas technician who needs to fix all the gas leaks, starting from house 1 and moving to house n, visiting houses sequentially. However, the technician can only fix one house at a time and needs at least k minutes to travel between two consecutive houses. Given that fixing each house\'s gas leak takes exactly x minutes, calculate the minimum total time required by the technician to fix all gas leaks in the street. The first line of input contains three integers n, k and x (1 le n le 1000, 1 le k, x le 1000). The second line contains n integers, the elements of the array a (a[i] will be either 0 or 1). Print one integer, the minimum total time required to fix all gas leaks in the street. # Example **Input:** 5 3 2 1 0 1 0 1 **Output:** 12 **Explanation:** The technician will spend: - 2 minutes on the 1st house to fix the gas leak. - 3 minutes to travel to the 3rd house. - 2 minutes on the 3rd house to fix the gas leak. - 3 minutes to travel to the 5th house. - 2 minutes on the 5th house to fix the gas leak. So the total time required is 2 + 3 + 2 + 3 + 2 = 12 minutes.","solution":"def minimum_time_to_fix_leaks(n, k, x, a): Calculate the minimum total time required to fix all gas leaks in the street. :param n: Number of houses :param k: Minutes needed to travel between consecutive houses :param x: Minutes needed to fix a gas leak in a house :param a: List indicating which houses have gas leaks (1 for leak, 0 for no leak) :return: Minimum total time required to fix all gas leaks total_time = 0 first = True # To handle the first house with gas leak separately for i in range(n): if a[i] == 1: if first: total_time += x first = False else: total_time += k + x return total_time"},{"question":"A new start-up named AquaData is developing a recommendation system for predicting user preferences. The team wants to evaluate the efficiency of their algorithm with some sample data. They decide to test their recommendation algorithm on user ratings for different products. The input is structured as follows: - An integer n representing the number of users and products (both users and products have the same count). - An n x n matrix A where the element A_{ij} represents the rating given by the i-th user to the j-th product. The ratings are integers between 1 and 5 inclusive. The task is to develop a rating prediction model and compute a predicted rating matrix B where each element B_{ij} is the predicted rating by user i for product j. The prediction is based on the assumption that users with similar rating patterns are likely to have similar preferences for products. The predicted ratings are calculated as follows: 1. Compute the average rating for each user. 2. Adjust the user ratings by subtracting the user\'s average rating from each of their ratings. 3. Compute the similarity between users using cosine similarity. 4. Use the similarity to predict the rating matrix. However, simplicity is preferred, so the implementation can skip some advanced techniques and use basic average-based rating prediction. For each user-product pair B_{ij}, this simplified approach is: B_{ij} = avg_{i} where avg_{i} is the average rating of the i-th user. Input: - The first line contains a single integer n (1 leq n leq 10). - The following n lines contain n integers each, representing matrix A. Output: - Print the predicted rating matrix B with n lines, each containing n integers. Example: Input: ``` 3 5 3 4 3 2 1 4 4 5 ``` Output: ``` 4 4 4 2 2 2 4 4 4 ``` Explanation: - The average rating for user 1 is (5 + 3 + 4)/3 = 4. - The average rating for user 2 is (3 + 2 + 1)/3 = 2. - The average rating for user 3 is (4 + 4 + 5)/3 ≈ 4.33 (rounded to integer = 4).","solution":"def predict_ratings(matrix): Predict ratings based on average user ratings. Args: matrix (list of list of int): n x n matrix where A[i][j] is the rating given by the i-th user to the j-th product. Returns: list of list of int: Predicted n x n matrix where B[i][j] is the predicted rating by user i for product j. n = len(matrix) averages = [sum(row) // n for row in matrix] predicted_matrix = [[averages[i]] * n for i in range(n)] return predicted_matrix"},{"question":"Given a long sequence of integers, determine the maximum subarray sum within the sequence. The subarray is a contiguous part of an array. The first line of input contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the sequence. The second line of input contains n space-separated integers, each integer x satisfying −10^4 ≤ x ≤ 10^4. Output a single integer, the maximum subarray sum. In the first example, the input sequence is `-2 1 -3 4 -1 2 1 -5 4`. The maximum subarray sum is 6, for the subarray `4 -1 2 1`. In the second example, the input sequence is `1 2 3 4`. The maximum subarray sum is 10, for the subarray `1 2 3 4`.","solution":"def max_subarray_sum(arr): Determine the maximum subarray sum within the sequence. :param arr: List of integers representing the sequence :return: Integer representing the maximum subarray sum max_sum = float(\'-inf\') current_sum = 0 for num in arr: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given an array of n integers, where the i-th integer ai represents the initial amount of energy required to execute the i-th task. Over time, the execution energy needed for each task decreases. Specifically, at time j (where j is an integer starting from 1), the energy required for the i-th task becomes max(0, ai - j). You have an energy reserve e, and you are allowed to execute tasks one after another until your energy runs out. For each task, you can decide if you want to begin its execution at a specific time t (1 ≤ t ≤ ai). If you choose to begin a task at time t, the energy required for that task will be max(0, ai - t). Your objective is: 1. Maximize the number of tasks executed. 2. If there are multiple ways to maximally execute tasks, minimize the total energy consumed. Given the array of initial energy requirements, your total energy reserve, and the number of tasks, determine the maximum number of tasks that can be executed, and the minimum energy consumed to execute them. The first line of input contains two integers n and e (1 ≤ n ≤ 10^5, 1 ≤ e ≤ 10^9) representing the number of tasks and the total energy reserve, respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^6) representing the initial energy requirements for each task. The output should be two integers: maximum number of tasks executed and the minimum energy consumed to execute those tasks. Example: Input: 5 15 5 4 7 3 5 Output: 3 12 This means you can execute 3 tasks and the minimum energy consumed will be 12.","solution":"def maximize_tasks(n, e, energy_requirements): Calculate the maximum number of tasks that can be executed and the minimum energy consumed. :param n: The number of tasks :param e: The total energy reserve :param energy_requirements: A list of integers representing the initial energy requirements for each task :return: A tuple (max_tasks, min_energy) where max_tasks is the maximum number of tasks executed and min_energy is the minimum energy consumed # Sort the energy requirements to try and complete the smallest ones first energy_requirements.sort() max_tasks = 0 min_energy = 0 for i in range(n): if min_energy + energy_requirements[i] <= e: min_energy += energy_requirements[i] max_tasks += 1 else: break return max_tasks, min_energy"},{"question":"You are given a list of names of students and their corresponding scores in a particular subject. Each student has exactly one score, but it is possible that multiple students have the same score. Your task is to find the name(s) of the student(s) with the highest score. In case of a tie, return all the names of students who have achieved the highest score, sorted alphabetically. # Input: - The first line contains an integer `n` (1 le n le 10^4) — the number of students. - Each of the next `n` lines contains a student\'s name (a string of at most 100 characters) and their score (an integer between 0 and 100), separated by a space. # Output: - Print the names of the student(s) with the highest score, each on a new line, sorted alphabetically. # Example: Input: ``` 5 Alice 95 Bob 97 Charlie 97 Dave 92 Eve 85 ``` Output: ``` Bob Charlie ``` # Note: - In the example, Bob and Charlie have the highest score (97). Hence their names are returned in alphabetical order.","solution":"def find_top_scorers(n, students): This function finds the names of the student(s) with the highest score and returns them sorted alphabetically. :param n: Integer, the number of students :param students: List of tuples, each containing a student\'s name and score :return: List of names of student(s) with the highest score, sorted alphabetically if n == 0: return [] scores = {} for name, score in students: scores[name] = int(score) max_score = max(scores.values()) top_students = sorted([name for name, score in scores.items() if score == max_score]) return top_students"},{"question":"Mallory is trying to organize her busy schedule with various tasks coded by letters \'A\', \'B\', \'C\', ..., \'Z\'. Each task takes one unit of time to complete and can be executed one at a time. Some tasks must be completed before others due to dependencies among them. Given these constraints, she has to determine the minimum time required to complete all tasks while respecting the dependencies. Each task can only proceed if all its prerequisite tasks are completed. Your task is to help Mallory find the minimal total time required to complete all tasks. The first line contains an integer n (1 leq n leq 26), representing the number of tasks. The second line contains an integer m (0 leq m leq 325), representing the number of dependencies between these tasks. Next, m lines follow. Each line contains two distinct characters X and Y (\'A\' leq X, Y leq \'Z\'), meaning that task Y depends on task X. Output one integer — the minimal total time to finish all tasks. *Sample Input:* ``` 4 3 A B A C B D ``` *Sample Output:* ``` 4 ``` *Explanation:* With the given dependencies: - Task A must be completed before B and C, and task B before D. - One possible order of execution is A, B, C, D, which takes 4 units of time. - Hence, the minimal total time required to complete all tasks is 4 units.","solution":"from collections import defaultdict, deque def minimal_time_to_complete_tasks(n, m, dependencies): # Create a graph and in-degree count graph = defaultdict(list) in_degree = {chr(i): 0 for i in range(65, 65 + n)} # A-Z # Build the graph and in-degree based on dependencies for x, y in dependencies: graph[x].append(y) in_degree[y] += 1 # Initialize queue with nodes having zero in-degree queue = deque([node for node in in_degree if in_degree[node] == 0]) result = [] # Perform topological sort while queue: task = queue.popleft() result.append(task) # Decrease the in-degree of neighbors for neighbor in graph[task]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) # If all tasks are processed, return the count if len(result) == n: return len(result) else: # There are cycles in the graph (which shouldn\'t be the case as per the problem statement) return -1 # Reading input def main(): import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) m = int(data[1]) dependencies = [(data[i], data[i + 1]) for i in range(2, 2 + 2 * m, 2)] print(minimal_time_to_complete_tasks(n, m, dependencies))"},{"question":"You\'re given a string s consisting of lowercase English letters. Your task is to rotate the string such that the resulting string is the lexicographically smallest possible rotation of the original string. For example, rotating the string \\"bca\\" to the right by one position gives \\"abc\\", which is the lexicographically smallest rotation. Input: A single string s of length 1 leq |s| leq 10^5, consisting of lowercase English letters. Output: A single string representing the lexicographically smallest rotation of the input string. Example input: \\"bca\\" Example output: \\"abc\\" In this example, rotating \\"bca\\" by one position to the right produces \\"abc\\", which is lexicographically smaller than any other rotation of the original string.","solution":"def lexicographically_smallest_rotation(s): Returns the lexicographically smallest rotation of the input string s. n = len(s) # Create a list of all rotations rotations = [s[i:] + s[:i] for i in range(n)] # Return the lexicographically smallest rotation return min(rotations)"},{"question":"In a distant land, there are magical trees that bear fruits with mystical properties. Each tree can yield a different type of magical fruit, characterized by its energy value. Adventurer Lira wants to collect fruits from these trees and carry them back to her village. However, she can only carry a limited weight in her magical backpack, which has a capacity w. Lira aims to maximize the total energy value of the fruits she carries. There are n magical trees, and each tree yields a certain type of fruit with a specific weight and energy value. Each tree is characterized by three integers: the type of fruit (zi), the weight of one fruit (wi), and the energy value of one fruit (ei). Lira can collect up to one fruit from a tree. Write a program that, given the maximum capacity of Lira\'s backpack and the characteristics of the fruits from each tree, determines the maximum total energy value of the fruits Lira can carry. # Input The first line of the input contains two positive integers w and n (1 ≤ w ≤ 1000, 1 ≤ n ≤ 100), where w is the maximum capacity of the backpack, and n is the number of magical trees. The next n lines contain three integers each zi, wi, and ei (1 ≤ zi ≤ 100, 1 ≤ wi ≤ 1000, 1 ≤ ei ≤ 1000), representing the type of fruit, the weight of one fruit, and the energy value of one fruit from the i-th tree. # Output Print a single integer: the maximum total energy value of the fruits Lira can carry without exceeding the backpack\'s weight capacity. # Example Input ``` 50 3 1 20 40 2 30 60 3 10 10 ``` Output ``` 100 ``` In this example, Lira can pick the fruits from the first and second trees, which have a combined weight of 50 (within her capacity) and a total energy value of 100.","solution":"def max_energy_value(w, n, fruits): Determines the maximum total energy value of the fruits Lira can carry. :param w: Maximum capacity of the backpack :param n: Number of magical trees :param fruits: List of tuples representing each tree\'s (zi, wi, ei) :return: Maximum total energy value of the fruits dp = [0] * (w + 1) for zi, wi, ei in fruits: if wi <= w: for current_weight in range(w, wi - 1, -1): dp[current_weight] = max(dp[current_weight], dp[current_weight - wi] + ei) return max(dp)"},{"question":"You are given a positive integer n representing the number of steps you want to climb, and an array of integers steps of length n where steps[i] denotes the number of ways to climb to the i-th step. If you start from the 0th step, you can only move to the first step directly or by following the steps[i] possible ways provided for each ith step thereafter. Write a function to determine the minimum number of steps required to reach the top of a staircase consisting of n steps. The first line contains one integer n (1 ≤ n ≤ 100,000), the number of steps. The second line contains n integers steps[i] (1 ≤ steps[i] ≤ 10,000). Output the minimum number of steps required to reach the top of the staircase. For example, given input n = 5 and steps = [1, 1, 1, 1, 1], the minimum number of steps is 5. However, if n = 5 and steps = [2, 5, 1, 1, 1], the minimum number of steps is 2 as you can move directly from step 0 to step 1 and then from step 1 to step 5 (the top).","solution":"def min_steps_to_top(n, steps): Calculates the minimum number of steps required to reach the top of a staircase. Parameters: - n (int): Number of steps in the staircase. - steps (list of int): List where steps[i] represents the number of ways to reach the ith step. Returns: - int: Minimum number of jumps needed to reach the top of the staircase. if n == 0: return 0 # minimum number of jumps required to reach each position jumps = [float(\'inf\')] * (n + 1) jumps[0] = 0 # Starting point, no jumps needed for i in range(n): max_reach = min(i + steps[i], n) for j in range(i + 1, max_reach + 1): jumps[j] = min(jumps[j], jumps[i] + 1) return jumps[n]"},{"question":"Given a list of integers, your task is to determine if there exists a pair of distinct indices `i` and `j` such that the sum of the elements at these indices is a prime number. Write a function `find_prime_pair(arr)` that takes a list of integers `arr`, and returns `True` if such a pair exists, and `False` otherwise. # Input - A list of integers, `arr` (1 ≤ length of `arr` ≤ 100) - Each integer in `arr` will be between -1000 and 1000 # Output - Return a boolean value (`True` or `False`). # Example ```python find_prime_pair([1, 4, 6, 7]) # Output: True # Explanation: The pair (1, 6) has a sum of 7, which is prime. find_prime_pair([2, 4, 6, 8]) # Output: False # Explanation: There is no pair whose sum is a prime number. ``` # Hints - Remember that a prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. - To optimize, you might need a helper function to check if a number is prime.","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False max_divisor = int(n**0.5) + 1 for d in range(3, max_divisor, 2): if n % d == 0: return False return True def find_prime_pair(arr): Check if there exists a pair of indices (i, j) such that arr[i] + arr[j] is a prime number. n = len(arr) for i in range(n): for j in range(i + 1, n): if is_prime(arr[i] + arr[j]): return True return False"},{"question":"Given an integer array of length n, write a function that returns the length of the longest contiguous subarray where all elements have the same parity (either all are even, or all are odd). # Input - The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), the elements of the array. # Output - Output a single integer, the length of the longest contiguous subarray with the same parity. # Example Input: ``` 6 1 2 2 4 5 7 ``` Output: ``` 3 ``` Explanation: - The longest contiguous subarray with the same parity is [2, 2, 4], which has a length of 3.","solution":"def longest_same_parity_subarray_length(array): Returns the length of the longest contiguous subarray where all elements have the same parity. n = len(array) max_length = 1 current_length = 1 for i in range(1, n): if (array[i] % 2) == (array[i - 1] % 2): current_length += 1 else: current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"You are given an array of integers. Find the length of the longest subsequence that forms a non-decreasing sequence. The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. Print the length of the longest non-decreasing subsequence in the array.","solution":"def longest_non_decreasing_subsequence(arr): Returns the length of the longest non-decreasing subsequence in the array. if not arr: return 0 n = len(arr) dp = [1] * n for i in range(1, n): for j in range(i): if arr[i] >= arr[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Develop an API endpoint in Python that handles user login for a web application. Specifications: 1. Endpoint: `/api/login` 2. Method: POST 3. Input: A JSON object containing `username` and `password`. 4. Authentication: Compare the provided credentials with the stored user data (use a predefined dictionary of users for simplicity). 5. Response: - On successful authentication, return a JSON object with a welcome message. - On failure (invalid username or wrong password), return an appropriate error message. Sample user data dictionary: ```python users = { \\"john_doe\\": \\"password123\\", \\"jane_smith\\": \\"mypassword\\", \\"alice_jones\\": \\"alicepassword\\" } ``` Examples: 1. Successful login: - Request: `POST /api/login` - Input: `{\\"username\\": \\"john_doe\\", \\"password\\": \\"password123\\"}` - Response: `{\\"message\\": \\"Welcome, john_doe!\\"}` 2. Failed login (invalid password): - Request: `POST /api/login` - Input: `{\\"username\\": \\"john_doe\\", \\"password\\": \\"wrongpassword\\"}` - Response: `{\\"error\\": \\"Invalid username or password\\"}` 3. Failed login (non-existent user): - Request: `POST /api/login` - Input: `{\\"username\\": \\"non_existent_user\\", \\"password\\": \\"any_password\\"}` - Response: `{\\"error\\": \\"Invalid username or password\\"}` Requirements: - Implement input validation to ensure `username` and `password` fields are provided. - Ensure the endpoint adheres to RESTful design principles. - Write clean and readable code, following best practices for Python and web development.","solution":"from flask import Flask, request, jsonify app = Flask(__name__) # Sample user data users = { \\"john_doe\\": \\"password123\\", \\"jane_smith\\": \\"mypassword\\", \\"alice_jones\\": \\"alicepassword\\" } @app.route(\'/api/login\', methods=[\'POST\']) def login(): data = request.get_json() # Input validation if \'username\' not in data or \'password\' not in data: return jsonify({\\"error\\": \\"Username and password are required\\"}), 400 username = data[\'username\'] password = data[\'password\'] # Authentication if username in users and users[username] == password: return jsonify({\\"message\\": f\\"Welcome, {username}!\\"}), 200 else: return jsonify({\\"error\\": \\"Invalid username or password\\"}), 401 if __name__ == \'__main__\': app.run(debug=True)"},{"question":"You are given an array of `n` integers. Your task is to find the smallest non-negative integer that is not present in the array. If the array contains all integers from 0 to the maximum number in the array, return the next integer after the maximum number. The first line contains an integer `n` (1 ≤ n ≤ 100,000) - the number of elements in the array. The second line contains `n` integers `a1, a2, ..., an` (0 ≤ ai ≤ 100,000) - the elements of the array. Output a single integer which is the smallest non-negative integer not present in the array. # Examples Input ``` 5 0 2 3 1 7 ``` Output ``` 4 ``` Input ``` 10 0 1 2 3 4 5 6 7 8 9 ``` Output ``` 10 ```","solution":"def smallest_missing_non_negative_integer(n, arr): Finds the smallest non-negative integer that\'s not present in the array. # Create a set of unique elements from the array elements = set(arr) # Start checking from 0 upwards i = 0 while True: if i not in elements: return i i += 1"},{"question":"The Kingdom of Machines has a network of cities connected by bidirectional roads. The kingdom wants to improve the network to ensure that, for any pair of cities, there is a unique path connecting them. To achieve this, they can deactivate some of the existing roads. You are given n cities and m roads. Each road connects two cities. Your task is to find the minimum number of roads that need to be deactivated so that the remaining roads form a tree (a connected acyclic graph). The first line of the input contains two integers n (1 ≤ n ≤ 100,000) and m (0 ≤ m ≤ 200,000) — the number of cities and the number of roads, respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — the cities connected by a road. Print a single integer — the minimum number of roads that need to be deactivated. If it\'s not possible to achieve the goal, print -1. For example, in the first sample, there are 4 cities and 3 roads. They are already in the form of a tree, so no roads need to be deactivated, and the answer is 0. In the second sample, there are 4 cities and 5 roads. We need to deactivate 2 roads to remove cycles and make them a tree structure.","solution":"def minimum_deactivation_roads(n, m, roads): if m < (n - 1): return -1 return m - (n - 1)"},{"question":"Sasha and Kolya have decided to play an interesting game with ropes of different lengths. They have n ropes, where the i-th rope has a length of ai units. They want to play a game in which they choose exactly k ropes, and then they try to form the longest possible contiguous length of rope by tying together some or all of the selected ropes in such a way that no rope is cut into smaller pieces or removed. Help Sasha and Kolya to find out the longest possible length they can achieve under this condition. The first line contains two integers n and k (1 ≤ k ≤ n ≤ 1000) - the number of ropes and the number of ropes to be selected. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) - the lengths of the ropes. Print the longest possible length of the rope they can get by tying together some or all of the k selected ropes. For example: - Input: 5 3 4 1 8 2 6 - Output: 20 In this scenario, Sasha and Kolya should select the ropes with lengths 8, 6, and 4, and tie them together to get the longest possible rope with a length of 18 units.","solution":"def max_rope_length(n, k, lengths): Returns the longest possible length they can achieve by selecting exactly k ropes and tying together some or all of them. # Sort the rope lengths in descending order lengths.sort(reverse=True) # Sum the lengths of the top k ropes max_length = sum(lengths[:k]) return max_length # Example usage # lengths = [4, 1, 8, 2, 6] # result = max_rope_length(5, 3, lengths) # print(result) # Output should be 18"},{"question":"Optimal Pairs Sum Problem A scientist is trying to optimize the sum of pairs formed from an array of integers. Given an array of n integers, the scientist wants to create m pairs (where 2m leq n) such that the sum of those pairs is maximized. Each integer from the array can only be used in one pair. However, there\'s a twist: the scientist has an ancient artifact that allows them to either pick the numbers directly from the array or pick their negated values. For example, if a number in the array is 5, they can use it as 5 or as -5 to form pairs. Your task is to help the scientist determine the maximum possible sum of the m pairs formed from the array. # Input The input consists of multiple test cases. The first line contains a single integer t (1 leq t leq 100) — the number of test cases. The description of the test cases follows. Each test case consists of two lines: - The first line contains two integers n (4 leq n leq 2000) and m (1 leq m leq frac{n}{2}). - The second line contains n integers a_1, a_2, ldots, a_n (-10^9 leq a_i leq 10^9) — the elements of the array. # Output For each test case, output a single integer — the maximum possible sum of the m pairs. # Example Input ``` 2 4 1 1 2 3 4 6 2 -1 -2 3 4 5 6 ``` Output ``` 7 14 ``` # Explanation In the first test case, the optimal way to form one pair is to take the two largest absolute values: 4 and 3, giving a sum of 4 + 3 = 7. In the second test case, the pairs can be formed as follows: pair 6 with 5 and pair 4 with 3. The sum of these pairs is 6 + 5 + 4 + 3 = 18.","solution":"def optimize_pairs_sum(t, test_cases): results = [] for i in range(t): n, m = test_cases[i][0] array = test_cases[i][1] abs_array = sorted([abs(x) for x in array], reverse=True) max_sum = sum(abs_array[:2*m]) results.append(max_sum) return results"},{"question":"A robot is placed on a grid of size m x n. The robot starts at the top-left corner (0, 0) and its goal is to reach the bottom-right corner (m-1, n-1). The robot can only move either down or right at any point in time. Given the grid dimensions, determine the number of unique paths the robot can take to reach its destination. Write a function that takes two integers m and n as input and returns the number of unique paths from the top-left corner to the bottom-right corner of the grid. Input: - m (1 ≤ m ≤ 100) - represents the number of rows in the grid. - n (1 ≤ n ≤ 100) - represents the number of columns in the grid. Output: - An integer representing the number of unique paths. Examples: 1. If the input is ``` 3 7 ``` The output should be ``` 28 ``` 2. If the input is ``` 3 2 ``` The output should be ``` 3 ``` 3. If the input is ``` 7 3 ``` The output should be ``` 28 ``` In the first sample, starting at (0, 0) and ending at (2, 6), there are 28 unique ways to traverse the grid by moving only right and down. In the second sample, starting at (0, 0) and ending at (2, 1), there are 3 unique ways to traverse the grid. In the third sample, starting at (0, 0) and ending at (6, 2), there are also 28 unique ways to traverse the grid.","solution":"def unique_paths(m, n): Returns the number of unique paths from the top-left corner to the bottom-right corner of a m x n grid. # Initialize a 2D list (matrix) with 1s; since there\'s exactly one way to reach each cell in the first row and first column. dp = [[1] * n for _ in range(m)] # Iterate over the cells starting from (1,1) since (0,0), first row and first column have only one way (rightward or downward respectively) for i in range(1, m): for j in range(1, n): # Number of ways to reach cell (i, j) is the sum of ways to reach from top (i-1, j) and from left (i, j-1) dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[m-1][n-1]"},{"question":"Given an array of `n` integers, you need to process the following types of operations: 1. Update the value at a specific position in the array. 2. Find the sum of elements within a given range (inclusive). Initially, the array is filled with zeros. You will be given `m` operations to perform on this array, which consists of two types: - `1 x y p`: Update the value at position `x` in the array to `p`. - `2 l r`: Calculate the sum of the elements of the array from index `l` to index `r` (inclusive). Both types of operations are 1-indexed, meaning the first element of the array is at position 1. # Input: - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 105), representing the size of the array and the number of operations, respectively. - The next `m` lines contain the operations in the format described above. # Output: - For each operation of the second type (`2 l r`), output a single integer denoting the sum of elements from position `l` to position `r` (inclusive). # Example: Input: ``` 5 4 1 2 3 10 2 1 5 1 4 5 7 2 2 4 ``` Output: ``` 10 17 ``` # Explanation: 1. The initial array is `[0, 0, 0, 0, 0]`. 2. After the first operation `1 2 3 10`, the array becomes `[0, 10, 0, 0, 0]`. 3. The second operation `2 1 5` requests the sum from index 1 to 5, which is `0 + 10 + 0 + 0 + 0 = 10`. 4. After the third operation `1 4 5 7`, the array becomes `[0, 10, 0, 7, 0]`. 5. The fourth operation `2 2 4` requests the sum from index 2 to 4, which is `10 + 0 + 7 = 17`.","solution":"def process_operations(n, m, operations): array = [0] * n results = [] for op in operations: if op[0] == 1: _, x, y, p = op array[x - 1] = p elif op[0] == 2: _, l, r = op results.append(sum(array[l-1:r])) return results"},{"question":"You are given an array of integers a of length n. Define the function g(a) as the sum of absolute differences between each pair of adjacent elements in the array. Formally, g(a) is defined as: [ g(a) = sum_{i=1}^{n-1} |a[i] - a[i+1]| ] You are tasked with finding the array that has the minimal possible value of g(a). Additionally, this array should be lexicographically smallest among all arrays having the minimal value of g(a). The lexicographical order is defined as follows: array b is smaller than array c if there exists an index i where ( b[i] < c[i] ) and ( b[j] = c[j] ) for all ( j < i ). The single line of input contains an integer n (2 ≤ n ≤ 100), where n is the length of the array. Output the re-ordered array which has the minimal value of g(a) and is lexicographically the smallest. Example: Input: 4 Output: 1 1 1 1 Input: 3 Output: 1 1 1","solution":"def minimal_array(n): Generates an array of length n with the minimal possible value of g(a), which is also lexicographically smallest among all arrays having the minimal value of g(a). return [1] * n"},{"question":"Tiny wants to test your knowledge of sorting algorithms with a unique problem involving concentric circles. Given a list of circles, each defined by its radius, you need to sort them based on their area. However, Tiny has a specific requirement: if two circles have the same area, you should maintain their original order from the input. Formally, you need to consider the following: Given an integer sequence r1, r2, ..., rn representing the radii of n circles. You should sort and output these circles based on their area (π * r^2). If multiple circles have the same area, maintain their relative order as in the input (i.e., the sort should be stable). The first line contains an integer n (1 ≤ n ≤ 105), representing the number of circles. The second line contains n space-separated integers r1, r2, ..., rn (1 ≤ ri ≤ 109), representing the radii of the circles. Output the sorted list of radii. Since the areas might be very large due to the radius being squared, you should only output the indices of the sorted radii in the original list (1-based index). # Example Input ``` 5 3 1 2 4 2 ``` Output ``` 2 3 5 1 4 ``` In the example above, the sorted areas of the circles correspond to [9π, 1π, 4π, 16π, 4π]. The indices in the output represent the positions of the circles sorted by area while preserving the original order for circles with the same area.","solution":"def sort_circles_by_area(radii): Given a list of radii, returns the 1-based indices of the sorted radii based on the area of the circles. The sort should be stable in case of equal areas. areas = [(i, r**2) for i, r in enumerate(radii)] sorted_areas = sorted(areas, key=lambda x: x[1]) sorted_indices = [index + 1 for index, area in sorted_areas] return sorted_indices"},{"question":"We have an unknown grid with some constraints and you need to figure out the grid values. The grid has size n times n and you need to fill this grid such that it conforms to the rules provided below. Each element in the grid must be an integer between 1 and 10^9. The rules are: 1. Each row must contain distinct integers. 2. Each column must contain distinct integers. 3. The sum of all elements in the diagonal of the grid (from top-left to bottom-right) must be equal to a given integer S. You have to answer t independent test cases. # Input: - The first line contains one integer t (1 le t le 20) – the number of test cases. - Each of the following t lines contains two integers n (2 le n le 10) and S, describing the size of the grid and the required sum of the diagonal. # Output: For each test case, print the n times n grid. If there are multiple valid grids, you can print any. It is guaranteed that a valid grid exists for the given constraints. # Example: Input: ``` 2 3 15 2 10 ``` Output: ``` [[5, 1, 9], [7, 5, 3], [2, 8, 5]] [[6, 4], [4, 6]] ```","solution":"def generate_grid(n, S): # Create an empty n x n grid grid = [[0] * n for _ in range(n)] # Calculate the diagonal values assuming we use the first `n` natural numbers val = S // n remainder = S % n # Place the values on the diagonal to sum up to S for i in range(n): grid[i][i] = val + (1 if i < remainder else 0) num = 1 for row in range(n): for col in range(n): if grid[row][col] == 0: while num in [grid[i][col] for i in range(n)] or num in grid[row]: num += 1 grid[row][col] = num num += 1 return grid def solve(t, test_cases): results = [] for i in range(t): n, S = test_cases[i] grid = generate_grid(n, S) results.append(grid) return results"},{"question":"Consider a connected, undirected graph represented as an adjacency list. Each node in the graph has a value associated with it. You are tasked with finding the diameter of the graph, where the diameter is defined as the maximum sum of values of nodes on the longest path between any two nodes. You need to write a function `find_graph_diameter(graph: Dict[int, List[int]], values: List[int]) -> int` that takes in the following parameters: - `graph`: A dictionary where the keys are node integers and the values are lists of integers representing the adjacent nodes. - `values`: A list of integers where the ith value corresponds to the value of the ith node in the graph. Your function should return the diameter of the graph as an integer. # Constraints: - The number of nodes in the graph is between 2 and 1000. - The value of each node is between 1 and 1000. # Example: Input: ```python graph = { 0: [1, 2], 1: [0, 3], 2: [0], 3: [1] } values = [4, 3, 2, 1] ``` Output: ``` 10 ``` Explanation: The longest path is from node 2 to node 3, which passes through nodes 0 and 1. The values on this path are 2 + 4 + 3 + 1 = 10, so the graph diameter is 10.","solution":"from collections import deque, defaultdict def bfs(graph, start, values): visited = [-1] * len(values) queue = deque([(start, values[start])]) visited[start] = values[start] farthest_node = start max_sum = values[start] while queue: node, current_sum = queue.popleft() for neighbor in graph[node]: if visited[neighbor] == -1: visited[neighbor] = current_sum + values[neighbor] queue.append((neighbor, current_sum + values[neighbor])) if visited[neighbor] > max_sum: max_sum = visited[neighbor] farthest_node = neighbor return farthest_node, max_sum def find_graph_diameter(graph, values): # Perform the first BFS to find the farthest node from an arbitrary start node (0) start_node = 0 farthest_node, max_sum = bfs(graph, start_node, values) # Perform the second BFS from the farthest node found in the first BFS farthest_node, max_sum = bfs(graph, farthest_node, values) return max_sum"},{"question":"In a small town, there\'s a unique custom during the Harvest Festival. The townspeople create chains of letters to form a special kind of sequence called a \\"Happy Chain.\\" A Happy Chain is composed of lowercase letters from the English alphabet, and it has the following properties: 1. No two consecutive letters in the chain are the same. 2. The length of the chain is exactly n letters long. The townspeople want to create as many distinct Happy Chains as possible for the festival. Your task is to write a program that calculates the number of possible distinct Happy Chains of length n. The first and only line of input contains an integer n (1 ≤ n ≤ 100) — the length of the Happy Chain. Output a single integer — the number of distinct Happy Chains of length n. Consider the first test sample. If n is 1, there are 26 possible Happy Chains (each letter from \'a\' to \'z\'). If n is 2, there are 650 possible Happy Chains (each letter for the first position, and 25 choices for the second position as it can\'t be the same as the first letter). Example: Input 1 Output 26 Input 2 Output 650","solution":"def count_happy_chains(n): Returns the number of distinct Happy Chains of length n. if n <= 0: return 0 total_chains = 26 for i in range(1, n): total_chains *= 25 return total_chains"},{"question":"Sophie is participating in a hiking competition. The competition involves a series of checkpoints along a trail, each with an elevation. Sophie gains or loses energy depending on the difference in elevation between consecutive checkpoints. You need to write a function that computes the total energy gain or loss after traversing all checkpoints in the given order. Given an array `heights` of integers where `heights[i]` represents the elevation of the i-th checkpoint, compute the total energy gain or loss Sophie would experience. Sophie gains energy when moving to a lower elevation checkpoint and loses energy when moving to a higher elevation checkpoint. # Input - A single line containing space-separated integers representing the elevations of the checkpoints. # Output - A single integer representing Sophie\'s total energy gain or loss. # Constraints - The number of checkpoints is between 1 and 10^6. - The elevation of each checkpoint is a non-negative integer and does not exceed 10^9. # Example Input ``` 5 4 7 3 6 ``` Output ``` -1 ``` Explanation Sophie moves through the checkpoints as follows: 1. From elevation 5 to 4: Energy gain = +1 2. From elevation 4 to 7: Energy loss = -3 3. From elevation 7 to 3: Energy gain = +4 4. From elevation 3 to 6: Energy loss = -3 Total energy gain/loss = 1 - 3 + 4 - 3 = -1 Write a function `calculate_energy(heights: List[int]) -> int` that takes the list of elevations and returns the total energy gain or loss.","solution":"def calculate_energy(heights): Calculate the total energy gain or loss after traversing all checkpoints Arguments: heights : List[int] -- a list of integers representing the elevation of each checkpoint Returns: int -- the total energy gain or loss total_energy = 0 for i in range(1, len(heights)): total_energy += heights[i-1] - heights[i] return total_energy"},{"question":"You are given a list of events represented by their start and end times. Each event is defined by a tuple (start, end) where \'start\' and \'end\' are integers representing the start and end times of the event in a 24-hour format. You need to find the maximum number of events that one person can attend without overlapping. An event e1 (s1, e1) is considered to overlap with event e2 (s2, e2) if and only if their intervals [s1, e1) and [s2, e2) intersect, i.e., there is a non-empty intersection between the intervals. Write a function: ```python def max_non_overlapping_events(events: List[Tuple[int, int]]) -> int: ``` # Input - `events`: A list of tuples, where each tuple consists of two integers `start` and `end` (1 ≤ start < end ≤ 24). The length of the list ranges from 1 to 1000. # Output - Return an integer representing the maximum number of non-overlapping events that one person can attend. # Example Example 1: ```python events = [(1, 4), (2, 5), (3, 6), (7, 8)] print(max_non_overlapping_events(events)) # Output: 2 ``` Example 2: ```python events = [(1, 3), (2, 4), (3, 5), (7, 8), (5, 6)] print(max_non_overlapping_events(events)) # Output: 4 ``` # Constraints - The input list is non-empty and contains at least one event. - All times are in the range from 1 to 24 and are integers. - The end time of each event is strictly greater than its start time. # Note To maximize the number of non-overlapping events, you may find it useful to consider sorting the events by their end times and then using a greedy approach to select the maximum subset of non-overlapping events.","solution":"from typing import List, Tuple def max_non_overlapping_events(events: List[Tuple[int, int]]) -> int: Finds the maximum number of non-overlapping events a person can attend. # Sort events by their end time events.sort(key=lambda x: x[1]) # Initialize the count of non-overlapping events count = 0 # End time of the last event added to the non-overlapping set last_end_time = 0 for start, end in events: if start >= last_end_time: # If the current event starts after or when the last event ended, # it can be attended. count += 1 last_end_time = end return count"},{"question":"You are given a string `s` consisting of lowercase English letters and an integer `k`. You need to find the length of the longest substring of `s` that contains at most `k` distinct characters. Write a function `longest_substring_with_k_distinct(s: str, k: int) -> int` to accomplish this. # Input - `s`: a string consisting of lowercase English letters (1 <= len(s) <= 10^5) - `k`: an integer representing the maximum number of distinct characters (1 <= k <= len(s)) # Output - An integer representing the length of the longest substring with at most `k` distinct characters. # Example ```python assert longest_substring_with_k_distinct(\\"eceba\\", 2) == 3 # The longest substring with at most 2 distinct characters is \\"ece\\" with length 3. assert longest_substring_with_k_distinct(\\"aa\\", 1) == 2 # The longest substring with at most 1 distinct character is \\"aa\\" with length 2. ``` # Constraints - The input string `s` will consist of lowercase English letters only. - The integer `k` will always be at least 1 and at most the length of the string. # Note You may assume that the given inputs always adhere to the constraints. Your solution should be efficient and able to handle large input sizes up to 10^5 characters.","solution":"def longest_substring_with_k_distinct(s: str, k: int) -> int: from collections import Counter n = len(s) if n * k == 0: return 0 left, right = 0, 0 max_length = 0 char_count = Counter() while right < n: char_count[s[right]] += 1 right += 1 while len(char_count) > k: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_length = max(max_length, right - left) return max_length"},{"question":"Alice is playing a new game on a grid-like battlefield. The battlefield is represented by a grid of size n x m where each cell can either be empty (represented by \'.\') or contain an obstacle (represented by \'#\'). Alice starts at the top-left corner of the grid and wants to move to the bottom-right corner. She can move in four directions: up, down, left, and right, but she cannot move into a cell with an obstacle or outside of the battlefield. Alice loves to make her life difficult, so she decided that she will only move if she can do so by alternating steps between two distinct paths that connect the start and end cells without sharing any cell in common except the start and end cells. You need to help Alice determine if there exist two such distinct paths. First, you will be given the size of the grid, n and m (1 ≤ n, m ≤ 1000). The following n lines contain m characters each, describing the grid. Output \\"YES\\" if there exist two such distinct paths, otherwise \\"NO\\". **Input:** ``` The first line contains two integers n and m (1 ≤ n, m ≤ 1000), the dimensions of the grid. The next n lines each contain m characters, either \'.\' or \'#\'. ``` **Output:** ``` Print \\"YES\\" if there exist two distinct paths as described; otherwise, print \\"NO\\". ``` **Example:** ``` Input: 4 4 .... .#.. ..#. .... Output: YES ``` **Explanation:** In the example, one possible pair of distinct paths are: - Path 1: (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3) - Path 2: (0,0) -> (1,0) -> (2,0) -> (3,0) -> (3,1) -> (3,2) -> (3,3) These paths do not share any cell in common except the start (0,0) and end (3,3) cells.","solution":"def find_paths(grid, n, m): from collections import deque def bfs(start_x, start_y): queue = deque([(start_x, start_y)]) visited = [[False] * m for _ in range(n)] parent = [[None] * m for _ in range(n)] visited[start_x][start_y] = True while queue: x, y = queue.popleft() for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True parent[nx][ny] = (x, y) queue.append((nx, ny)) if (nx, ny) == (n-1, m-1): path = [] while parent[nx][ny]: path.append((nx, ny)) nx, ny = parent[nx][ny] path.append((0, 0)) return path[::-1] return [] first_path = bfs(0, 0) if not first_path: return \\"NO\\" for x, y in first_path: if (x, y) != (0, 0) and (x, y) != (n-1, m-1): grid[x][y] = \'#\' second_path = bfs(0, 0) if not second_path: return \\"NO\\" return \\"YES\\" def find_two_distinct_paths(n, m, grid): return find_paths([list(row) for row in grid], n, m)"},{"question":"Iahub is very interested in number theory and especially in prime numbers. He wants to create a game where players are given a number sequence and tasked with splitting it into several subsequences where each subsequence has a prime mean value. A mean value of a sequence is defined as the sum of the elements divided by the number of elements in that sequence. You are given an integer array of length n. Your task is to check if it is possible to split the array into one or more subsequences (each subsequence should have at least one element) such that the mean value of every subsequence is a prime number. Input: - The first line contains a single integer n (1 ≤ n ≤ 100). - The second line contains n space-separated integers representing the array (1 ≤ element ≤ 100). Output: - If it is possible to split the array into the desired subsequences, print \\"YES\\" followed by the number of subsequences and the indices of those subsequences. - If it is not possible, print \\"NO\\". Example: Input: 4 3 11 7 5 Output: YES 4 1 2 3 4 (Note: In this example, each element is its own subsequence, and the mean of each subsequence, being the element itself, is a prime number.) Another example: Input: 3 4 8 11 Output: NO","solution":"import sympy def is_prime_mean_subsequence_possible(n, array): This function determines if the given array can be split into subsequences where each subsequence has a mean value that is a prime number. # Check if each element is a prime if all(sympy.isprime(x) for x in array): print(\\"YES\\") print(n) for i in range(n): print(i + 1) else: print(\\"NO\\")"},{"question":"You are given an undirected graph with `n` nodes and `m` edges. Each edge has a positive length. You need to find the shortest path between two nodes in this graph. The graph may contain cycles, and all nodes are numbered from 1 to `n`. The input consists of multiple test cases. For each test case, you will be given the number of nodes `n` and edges `m`, followed by `m` lines of edges, each containing three integers `u`, `v`, and `l` representing an edge between nodes `u` and `v` with length `l`. The last line of each test case contains two integers `src` and `dst`, representing the source and destination nodes. For each test case, you need to output the length of the shortest path from `src` to `dst`. If there is no path between `src` and `dst`, output `-1`. The first line of the input consists of an integer `t` (1 ≤ t ≤ 100) — the number of test cases. For each test case, the first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000). The next `m` lines contain three integers `u`, `v`, and `l` (1 ≤ u, v ≤ n, 1 ≤ l ≤ 1000). The last line of each test case contains two integers `src` and `dst` (1 ≤ src, dst ≤ n). Output one line for each test case: the length of the shortest path from `src` to `dst`, or `-1` if no such path exists. Use Dijkstra\'s algorithm or any other algorithm to solve the shortest path problem efficiently. For example, given a graph with nodes and edges as follows: Input: ``` 2 4 4 1 2 1 2 3 2 3 4 3 1 4 10 1 4 4 2 1 2 5 1 3 2 1 4 ``` Output: ``` 6 -1 ``` In the first test case, there are four nodes and four edges. The shortest path from node 1 to node 4 is `1 -> 2 -> 3 -> 4` with a total length of `6`. In the second test case, there is no path from node 1 to node 4, so the output is `-1`.","solution":"from heapq import heappop, heappush import sys def shortest_path(n, edges, src, dst): graph = {i: [] for i in range(1, n + 1)} for u, v, l in edges: graph[u].append((v, l)) graph[v].append((u, l)) distances = {i: sys.maxsize for i in range(1, n + 1)} distances[src] = 0 priority_queue = [(0, src)] while priority_queue: current_distance, current_node = heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heappush(priority_queue, (distance, neighbor)) return distances[dst] if distances[dst] != sys.maxsize else -1 def process_test_cases(test_cases): results = [] for case in test_cases: n, m, edges, src, dst = case results.append(shortest_path(n, edges, src, dst)) return results # Function to read multiple test cases and return the results def find_shortest_paths(input_lines): index = 0 t = int(input_lines[index]) index += 1 test_cases = [] for _ in range(t): n, m = map(int, input_lines[index].split()) index += 1 edges = [] for _ in range(m): u, v, l = map(int, input_lines[index].split()) edges.append((u, v, l)) index += 1 src, dst = map(int, input_lines[index].split()) index += 1 test_cases.append((n, m, edges, src, dst)) return process_test_cases(test_cases)"},{"question":"You are given a grid of size n times m, where each cell in the grid contains either a \'.\', representing an empty space, or a \'#\', representing an obstacle. You need to find the number of ways to walk from the top-left corner of the grid (1, 1) to the bottom-right corner (n, m) such that you only move right or down, and you never pass through a cell containing a \'#\'. If there is no possible way to reach the destination, return 0. The first line of input consists of two integers n and m (1 le n, m le 1000) — the number of rows and columns in the grid, respectively. The next n lines each contain m characters (either \'.\' or \'#\'), describing the grid. Output a single integer — the number of ways to reach the bottom-right corner of the grid from the top-left corner without passing through any obstacles. # Example **Input:** ``` 3 3 ... .#. ... ``` **Output:** ``` 2 ``` **Explanation:** There are two possible paths: 1. Right → Right → Down → Down 2. Down → Down → Right → Right **Input:** ``` 3 3 .#. .#. ... ``` **Output:** ``` 1 ``` **Explanation:** There is only one possible path: 1. Down → Down → Right → Right **Input:** ``` 3 3 .#. . ... ``` **Output:** ``` 0 ``` **Explanation:** There is no possible path to reach the bottom-right corner.","solution":"def count_paths(grid, n, m): Returns the number of ways to reach the bottom-right corner from the top-left corner without passing through any obstacles. # Initialize dp table with 0s dp = [[0] * m for _ in range(n)] # Start position is (0, 0), initialize accordingly if grid[0][0] == \'.\': dp[0][0] = 1 else: return 0 # Fill the dp table for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1] # Function to read input and invoke count_paths def number_of_ways(n, m, grid_lines): grid = [list(line) for line in grid_lines] return count_paths(grid, n, m)"},{"question":"Write a function that takes an integer array and an integer `k`, and returns a list of all pairs of indices `(i, j)` such that `i < j` and the sum of `array[i]` and `array[j]` is equal to `k`. The function should have the following signature: ```python def find_pairs(array: List[int], k: int) -> List[Tuple[int, int]]: ``` The input parameters are: - `array`: a list of integers where the length of the array ranges from 1 to 1000 (1 ≤ `array.length` ≤ 1000) and each integer ranges from -10^5 to 10^5. - `k`: an integer value between -10^5 and 10^5 inclusive. The function should return a list of tuples where each tuple contains two integers representing the indices of two elements in the array that add up to `k`. The pairs must be sorted in ascending order of their first index; if two pairs have the same first index, then sort by the second index. If no such pairs exist, return an empty list. Each pair should be unique, meaning if you have a pair (i, j) then (j, i) is not allowed. **Example:** ```python array = [1, 2, 3, 4, 5] k = 5 find_pairs(array, k) ``` Output: ``` [(0, 3), (1, 2)] ``` In this example, the pairs (0, 3) and (1, 2) are the only index pairs where the sum of the elements is equal to 5.","solution":"from typing import List, Tuple def find_pairs(array: List[int], k: int) -> List[Tuple[int, int]]: Find all pairs of indices (i, j) such that i < j and array[i] + array[j] == k. pairs = [] n = len(array) for i in range(n): for j in range(i + 1, n): if array[i] + array[j] == k: pairs.append((i, j)) return pairs"},{"question":"Given an array of integers representing the height of trees in a forest, you are tasked with finding a sequence of consecutive trees such that the difference between the tallest and the shortest tree in the sequence is minimized. The sequence must contain at least two trees. For example, given the array [3, 1, 4, 1, 5, 9], one possible valid sequence is [1, 4] from index 1 to index 2, where the difference between the tallest (4) and the shortest (1) tree in that sequence is 3. There may be other sequences that also achieve the minimum difference. Write a function `minHeightDifference` that takes an array of integers as input and returns the minimum difference between the tallest and shortest tree in any valid sequence. # Input - An array of integers `heights` where `heights[i]` denotes the height of the i-th tree. The length of the array is at least 2 and at most 10^5. Each element in the array is an integer between 1 and 10^6. # Output - An integer representing the minimum possible difference between the tallest and shortest tree in any sequence with at least two trees. # Example Input: `[3, 1, 4, 1, 5, 9]` Output: `0` Explanation: - The valid subsequence `[1, 1]` at indices [1, 3] or [3, 1] at indices [2, 3] gives the minimum difference which is 0. # Constraints - The function should run in O(n log n) time complexity and use O(n) extra space. # Function Signature ```python def minHeightDifference(heights: List[int]) -> int: pass ``` # Notes - Remember to consider all possible subsequences of at least two elements. - Your solution should efficiently handle large arrays up to the given constraint.","solution":"from typing import List def minHeightDifference(heights: List[int]) -> int: heights.sort() min_diff = float(\'inf\') for i in range(1, len(heights)): diff = heights[i] - heights[i - 1] if diff < min_diff: min_diff = diff return min_diff"},{"question":"**Problem Statement** You are given a 2D grid of size `n x m` with each cell containing a lowercase English letter. Your task is to determine if there exists a path from the top-left corner (cell (1,1)) to the bottom-right corner (cell (n,m)) such that all cells in the path contain the same letter. You can only move right or down from a cell. If such a path exists, print \\"YES\\", otherwise print \\"NO\\". # Input - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 50), the dimensions of the grid. - The next `n` lines each contain `m` lowercase English letters, describing the grid. # Output - Print \\"YES\\" if there exists a path from (1,1) to (n,m) such that all cells in the path contain the same letter. Otherwise, print \\"NO\\". # Examples **Example 1:** Input: ``` 3 4 aaaa abaa aaaa ``` Output: ``` YES ``` **Example 2:** Input: ``` 2 2 ab bb ``` Output: ``` NO ``` **Example 3:** Input: ``` 1 1 a ``` Output: ``` YES ```","solution":"def is_uniform_path(grid): n = len(grid) m = len(grid[0]) target_char = grid[0][0] # DP table for marking reachable cells with the same character dp = [[False] * m for _ in range(n)] dp[0][0] = True for i in range(n): for j in range(m): if dp[i][j] and grid[i][j] == target_char: # Move right if j + 1 < m and grid[i][j + 1] == target_char: dp[i][j + 1] = True # Move down if i + 1 < n and grid[i + 1][j] == target_char: dp[i + 1][j] = True return \\"YES\\" if dp[-1][-1] else \\"NO\\" def uniform_path(grid): return is_uniform_path(grid)"},{"question":"You are given a string `s` consisting of lowercase English letters. We define a substring as any contiguous sequence of characters within the string. Your task is to find the length of the shortest substring that contains at least one occurrence of each different character in the string `s`. For example, consider the string `s = \\"abac\\"`. The different characters in `s` are `a`, `b`, and `c`, and the shortest substring that contains at least one of each of these characters is \\"bac\\". Therefore, the required length is 3. Write a function `shortest_substring_with_all_chars(s: str) -> int` that takes a string `s` as input and returns the length of the shortest substring of `s` that contains at least one occurrence of each different character in `s`. **Constraints:** - The length of `s` will not exceed 1000. - The input string will only consist of lowercase English letters (\'a\' to \'z\'). **Input:** - A single string `s`. **Output:** - An integer denoting the length of the shortest substring containing all distinct characters of `s`. **Example:** ```python Input: \\"abac\\" Output: 3 Input: \\"aabcbcdbca\\" Output: 4 ``` **Explanation:** In the first example, the substring \\"bac\\" is the shortest substring that contains all distinct characters \'a\', \'b\', and \'c\' present in the input string. In the second example, the shortest substring that contains \'a\', \'b\', \'c\', and \'d\' is \\"dbca\\", which has a length of 4.","solution":"def shortest_substring_with_all_chars(s: str) -> int: from collections import defaultdict if not s: return 0 unique_chars = set(s) required_char_count = len(unique_chars) left = 0 min_length = float(\'inf\') char_count = defaultdict(int) formed = 0 for right in range(len(s)): char = s[right] char_count[char] += 1 if char_count[char] == 1: formed += 1 while left <= right and formed == required_char_count: current_length = right - left + 1 min_length = min(min_length, current_length) removal_char = s[left] char_count[removal_char] -= 1 if char_count[removal_char] == 0: formed -= 1 left += 1 return min_length"},{"question":"Alex loves music and has a playlist of his favorite songs. He wants to create the ultimate remix by concatenating some or all the songs from his playlist. However, there are a few constraints: - Alex can only use each song once in the remix. - The total length of the remix must not exceed a given duration ( D ). Given the durations of the songs in Alex\'s playlist and the maximum allowed remix duration ( D ), determine the maximum possible length for the remix without exceeding ( D ). The first line contains two integers ( n ) and ( D ) (( 1 leq n leq 100 ), ( 1 leq D leq 10^9 )), where ( n ) is the number of songs in the playlist, and ( D ) is the maximum duration allowed for the remix. The second line contains ( n ) integers ( d_1, d_2, ldots, d_n ) (( 1 leq d_i leq 10^9 )), which represent the durations of each song in the playlist. Output a single integer representing the maximum possible length of the remix. Example: Input: 4 10 2 3 4 5 Output: 10 In this example, Alex can select the songs with durations 2 and 3 and 5 to create a remix of total length 10.","solution":"def max_remix_duration(n, D, durations): Determines the maximum possible length of the remix without exceeding D. :param n: Number of songs :param D: Maximum allowed remix duration :param durations: List of song durations :return: Maximum possible length of the remix from itertools import combinations max_length = 0 # Check combinations of all lengths for r in range(1, n + 1): for combo in combinations(durations, r): total_length = sum(combo) if total_length <= D: max_length = max(max_length, total_length) return max_length"},{"question":"You are working on statistics for a large dataset in which you need to compute the mean of subarrays efficiently. To avoid recalculating the mean from scratch each time a query is made, you decide to create a data structure that preprocesses the array and answers the queries efficiently. You need to implement a class `SubarrayMean` with the following methods: 1. `__init__(self, arr: List[int])`: This method initializes the data structure with the given list `arr` of integers. 2. `query(self, left: int, right: int) -> float`: This method returns the mean of the subarray that starts at index `left` and ends at index `right` (both inclusive). It is guaranteed that `0 <= left <= right < len(arr)`. # Example ```python arr = [1, 2, 3, 4, 5] subarray_mean = SubarrayMean(arr) print(subarray_mean.query(0, 2)) # Output: 2.0 (mean of subarray [1, 2, 3]) print(subarray_mean.query(1, 4)) # Output: 3.5 (mean of subarray [2, 3, 4, 5]) print(subarray_mean.query(2, 2)) # Output: 3.0 (mean of subarray [3]) ``` # Constraints - The array `arr` will contain at most `105` integers. - Each query will be computed in constant time once the preprocessing is done. You need to ensure that your implementation is optimized for large arrays and multiple queries.","solution":"from typing import List class SubarrayMean: def __init__(self, arr: List[int]): Initializes the data structure with the given list `arr` of integers. self.prefix_sum = [0] * (len(arr) + 1) for i in range(len(arr)): self.prefix_sum[i + 1] = self.prefix_sum[i] + arr[i] def query(self, left: int, right: int) -> float: Returns the mean of the subarray that starts at index `left` and ends at index `right` (both inclusive). subarray_sum = self.prefix_sum[right + 1] - self.prefix_sum[left] return subarray_sum / (right - left + 1)"},{"question":"You are given a grid with n rows and m columns. Each cell within the grid contains an integer which represents the energy required to move through that cell. You start at the top-left cell of the grid (1,1) and your goal is to reach the bottom-right cell (n,m). From each cell, you are allowed to move to the right or downwards to an adjacent cell. You need to find the minimum total energy required to reach the bottom-right cell of the grid starting from the top-left cell. If the grid dimensions are 1 times 1, the total energy required is the value in the single cell itself. Write a function `min_energy(grid: List[List[int]]) -> int` that takes a 2-dimensional grid of integers and returns the minimum energy required to reach the bottom-right cell from the top-left. # Input - The first line contains two integers n and m (1 le n, m le 1000) — the number of rows and columns in the grid respectively. - The next n lines each contain m integers (1 le grid[i][j] le 100) — the energy values for cells in the grid. # Output - Output a single integer — the minimum total energy required to reach the bottom-right cell from the top-left. # Examples: Example 1: Input: ``` 3 3 1 3 1 1 5 1 4 2 1 ``` Output: ``` 7 ``` Explanation: The path is: (1,1) -> (2,1) -> (2,2) -> (2,3) -> (3,3) with total energy = 1 + 1 + 5 + 1 + 1 = 9. Example 2: Input: ``` 2 2 1 2 1 1 ``` Output: ``` 3 ``` Explanation: The path is: (1,1) -> (2,1) -> (2,2) with total energy = 1 + 1 + 1 = 3.","solution":"from typing import List def min_energy(grid: List[List[int]]) -> int: n = len(grid) m = len(grid[0]) dp = [[0] * m for _ in range(n)] dp[0][0] = grid[0][0] # Start point # Initialize first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Initialize first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill in the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][m-1]"},{"question":"In a certain kingdom, there are n cities and m roads that connect pairs of cities. Each road can be traversed in both directions. The king wants to place royal guards in some of the cities to protect the entire kingdom. A city is considered protected if there is a royal guard in that city or in any city directly connected to it by a road. Write a function that determines the minimum number of royal guards required to protect all the cities. The input consists of: - An integer n (1 leq n leq 1000) — the number of cities. - An integer m (0 leq m leq 10000) — the number of roads. - The next m lines each containing two integers u and v (1 leq u, v leq n) — indicating that there is a road between city u and city v. The output should be the minimum number of cities in which guards need to be placed so that every city in the kingdom is protected. Example: ``` Input: 5 4 1 2 2 3 4 5 2 5 Output: 2 ``` Note: In this example, placing guards in city 2 and city 4 ensures all cities are protected. City 2 protects cities 1, 2, and 3, and city 4 protects cities 4 and 5. Thus, only 2 guards are needed.","solution":"import sys from collections import defaultdict, deque def minimum_royal_guards(n, m, roads): def bfs(start, visited, graph): queue = deque([start]) while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) if n == 0: return 0 graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) count = 0 for i in range(1, n + 1): if not visited[i]: count += 1 visited[i] = True bfs(i, visited, graph) return count"},{"question":"The Enchanted Forest Path You find yourself lost in an enchanted forest, full of mystical creatures and hidden paths. The forest can be represented as an undirected, connected graph with n nodes and n-1 edges. Each edge has a weight that indicates the travel cost on that path. Your goal is to find the minimum travel cost to traverse through all the edges in the forest at least once, starting and ending at any node. Given n (1 ≤ n ≤ 10^5), which represents the number of nodes, and the following n-1 lines each containing three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6), which represent an edge from node u to node v with a travel cost w, determine the minimum cost required to traverse every edge in the forest at least once. # Input - The first line consists of a single integer n. - The next n-1 lines each consist of three integers u, v, and w which describe an edge in the graph. # Output - Output a single integer representing the minimum travel cost to traverse every edge in the forest at least once. # Example Input: ``` 4 1 2 1 2 3 2 3 4 1 ``` Output: ``` 8 ``` Explanation: One possible traversal to meet the requirement is: 1→2→1→2→3→2→3→4→3. The minimum cost of such traversal is 1+1+2+2+2+1+2+1 = 12, but since each edge must be traversed at least once, and the shortest round trip on each edge will effectively double the minimum spanning tree\'s weight. Therefore, the minimum cost we need to calculate here is 2 * (1 + 2 + 1) = 8. Note: - This problem requires knowledge of graph traversal algorithms and concepts like the Minimum Spanning Tree (MST). - Understanding of how to simulate paths on a tree using depth-first search (DFS) or union-find can be also beneficial.","solution":"def find_min_travel_cost(n, edges): Calculate the minimum travel cost to traverse all edges in the forest at least once. Parameters: - n: an integer, the number of nodes in the forest. - edges: a list of tuples, where each tuple contains three integers u, v, and w representing an edge from node u to node v with a travel cost w. Returns: - an integer, representing the minimum cost required to traverse every edge in the forest at least once. # Use Kruskal\'s algorithm to find the Minimum Spanning Tree (MST) parent = list(range(n + 1)) rank = [0] * (n + 1) def find(u): if parent[u] != u: parent[u] = find(parent[u]) return parent[u] def union(u, v): root_u = find(u) root_v = find(v) if root_u != root_v: if rank[root_u] > rank[root_v]: parent[root_v] = root_u elif rank[root_u] < rank[root_v]: parent[root_u] = root_v else: parent[root_v] = root_u rank[root_u] += 1 # Sort edges based on their weight edges.sort(key=lambda x: x[2]) mst_cost = 0 for u, v, w in edges: if find(u) != find(v): union(u, v) mst_cost += w # Each edge in the MST will be traversed twice in the optimal path return 2 * mst_cost # Example usage: n = 4 edges = [(1, 2, 1), (2, 3, 2), (3, 4, 1)] print(find_min_travel_cost(n, edges)) # Output: 8"},{"question":"Create a function `find_shortest_path` that calculates the shortest distance between two nodes in an unweighted graph. # Input - The first line contains an integer `n` — the number of nodes in the graph. - The second line contains an integer `m` — the number of edges in the graph. - The next `m` lines each contain two integers `u` and `v` — indicating an edge between nodes `u` and `v`. - The last line contains two integers `start` and `end` — the nodes between which the shortest distance is to be found. # Output - Output a single integer — the shortest distance between node `start` and node `end`. If there is no path between the start and end nodes, output `-1`. # Example Input ``` 6 7 1 2 1 3 2 4 3 4 3 5 4 6 5 6 1 6 ``` Output ``` 3 ``` # Constraints - `1 ≤ n ≤ 1000` - `0 ≤ m ≤ n*(n-1)/2` - `1 ≤ u,v,start,end ≤ n`","solution":"from collections import deque, defaultdict def find_shortest_path(n, m, edges, start, end): Calculates the shortest distance between two nodes in an unweighted graph. # Build the graph using adjacency list representation graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Perform BFS to find the shortest path from start to end visited = [False] * (n + 1) distance = [0] * (n + 1) queue = deque([start]) visited[start] = True while queue: current = queue.popleft() if current == end: return distance[current] for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True distance[neighbor] = distance[current] + 1 queue.append(neighbor) return -1"},{"question":"Given an integer array `nums` of length `n`, you are tasked to find the maximum sum of a contiguous subarray that contains at least one element from another integer array `bonus` of length `m`. A contiguous subarray is a subarray that appears consecutively within the original array. It must contain at least one element from the `bonus` array to be considered valid. The input includes: - An integer `n` representing the length of the `nums` array (`1 ≤ n ≤ 1000`). - The integer array `nums` consisting of `n` integers (`-10^4 ≤ nums[i] ≤ 10^4`). - An integer `m` representing the length of the `bonus` array (`1 ≤ m ≤ 1000`). - The integer array `bonus` consisting of `m` integers (`-10^4 ≤ bonus[i] ≤ 10^4`). Your task is to output a single integer, which is the maximum sum of a valid contiguous subarray in `nums`. # Input - The first line contains an integer `n` — the length of the `nums` array. - The second line contains `n` integers representing the `nums` array. - The third line contains an integer `m` — the length of the `bonus` array. - The fourth line contains `m` integers representing the `bonus` array. # Output - Output a single integer — the maximum sum of a valid contiguous subarray in `nums`. # Example Input: ``` 5 1 2 3 -2 5 2 2 5 ``` Output: ``` 9 ``` Explanation: The subarray `[1, 2, 3, -2, 5]` has a maximum sum of 9 and contains elements `2` and `5` from the `bonus` array.","solution":"def maximum_sum_with_bonus(n, nums, m, bonus): Finds the maximum sum of a contiguous subarray that contains at least one element from the bonus array. bonus_set = set(bonus) max_sum = float(\'-inf\') for i in range(n): current_sum = 0 contains_bonus = False for j in range(i, n): current_sum += nums[j] if nums[j] in bonus_set: contains_bonus = True if contains_bonus: max_sum = max(max_sum, current_sum) return max_sum"},{"question":"A group of mountaineers plan to climb a sequence of mountains. Each mountain has a distinct height, and the climbers can either go up or down while progressing from one mountain to the next. To maintain sustainability, they must climb a sequence that involves exactly k transitions (a transition is either going from one mountain to another of greater height or from one to another of lesser height). You are given the heights of the mountains in the order they must be traversed. Your task is to determine if it is possible to arrange these heights with exactly k transitions. The first line contains an integer n (2 ≤ n ≤ 10000), the number of mountains, and an integer k (1 ≤ k < n), the number of required transitions. The next line contains n space-separated integers h1, h2, ..., hn (-10^4 ≤ hi ≤ 10^4), representing the heights of the mountains. The output should be a single line containing either \\"POSSIBLE\\" if it is feasible to arrange the mountains with exactly k transitions, or \\"IMPOSSIBLE\\" otherwise. Example: Input: 6 5 3 1 4 2 5 6 Output: POSSIBLE Explanation: An arrangement that gives exactly 5 transitions is: 1 → 4 → 2 → 3 → 5 → 6 (alternating climbs and descents count as transitions). The given sequence can always be rearranged to meet the condition of exactly k transitions if the number of distinct heights within the constraints meets the logical requirements for forming precisely k ascents or descents.","solution":"def is_possible_to_arrange_with_k_transitions(n, k, heights): Returns \\"POSSIBLE\\" if the heights can be arranged with exactly k transitions; otherwise returns \\"IMPOSSIBLE\\". # Transitions happen between consecutive heights in the list # Minimum transitions possible: 1 (already knew this from constraints) # Maximum transitions possible: n-1 (each height is different from the next) # Check feasibility: if k < 1 or k >= n: return \\"IMPOSSIBLE\\" # Dedupe and sort heights unique_heights = sorted(set(heights)) # If the number of unique heights is less than the required transitions + 1, # it is impossible to have such arrangement if len(unique_heights) < k + 1: return \\"IMPOSSIBLE\\" return \\"POSSIBLE\\""},{"question":"In a distant kingdom, there is a peculiar tradition of celebrating the New Year by arranging an elaborate fireworks display. In this kingdom, fireworks come in different sets and each set has a specific number of fireworks in it. The event organizers have a certain total number of fireworks they plan to use, and they can combine different sets in any combination or quantity to reach this total. Unfortunately, due to the complexity, organizers sometimes realize that it is not possible to achieve the exact total fireworks with the combination of sets they have. Given the number of different sets and their individual counts, determine if it is possible to achieve the exact number of total fireworks planned using any combination of the available sets. If possible, output \\"Possible\\". If not, output \\"Impossible\\". The first line contains two integers n and t (1 ≤ n ≤ 1000, 1 ≤ t ≤ 10^6) — the number of different sets and the total number of fireworks planned respectively. The second line contains n distinct space-separated integers b1, b2, ..., bn (1 ≤ bi ≤ 10^6) — the number of fireworks in each set. Print a single line — either \\"Possible\\" if it is feasible to achieve exactly t fireworks with the given sets, or \\"Impossible\\" if it is not.","solution":"def can_achieve_total_fireworks_count(n, t, sets): Determine if it is possible to achieve exactly \'t\' fireworks with given sets. Parameters: n (int): Number of different sets. t (int): Total number of fireworks planned. sets (list): List of integers representing the fireworks counts in each set. Returns: str: \\"Possible\\" if it is feasible to achieve exactly t fireworks with the given sets, else \\"Impossible\\". dp = [False] * (t + 1) dp[0] = True for s in sets: for i in range(t, s - 1, -1): if dp[i - s]: dp[i] = True return \\"Possible\\" if dp[t] else \\"Impossible\\""},{"question":"Lucy is organizing a secret camping trip for her friends, and she wants to calculate the best location to set up the central camping site. The location should be somewhere in a forest which is represented as a two-dimensional plane. Lucy has identified several potential camping spots, each defined by integer coordinates (x_i, y_i). To minimize the maximum walking distance for her friends, she wants to find a central camping site (a, b) that minimizes the maximum distance between this site and all potential spots. Distance is measured as Euclidean distance. The formula for Euclidean distance between two points (x_1, y_1) and (x_2, y_2) is sqrt{(x_2-x_1)^2 + (y_2-y_1)^2}. Write a program to find the coordinates of the central camping site (a, b) that minimizes the maximum distance to all potential spots. If there are multiple solutions, output any of them. The first line contains an integer n (1 leq n leq 100) — the number of potential camping spots. Each of the next n lines contains two integers x_i and y_i (0 leq x_i, y_i leq 1000) — the coordinates of the i-th potential camping spot. Output the coordinates of the central camping site (a, b). # Example Input ``` 3 0 0 0 2 2 2 ``` Output ``` 1 1 ``` In this example, placing the central site at coordinates (1,1) ensures that the maximum distance to any potential spot is minimized.","solution":"import math def find_central_camping_site_spots(n, spots): Finds the central camping site (a, b) that minimizes the maximum distance to all potential spots. :param n: Number of potential camping spots (1 <= n <= 100) :param spots: List of tuples representing the coordinates (xi, yi) of each spot (0 <= xi, yi <= 1000) :return: Tuple (a, b) which are the coordinates of the central camping site xs = [x for x, y in spots] ys = [y for x, y in spots] min_x = min(xs) max_x = max(xs) min_y = min(ys) max_y = max(ys) best_x = (min_x + max_x) // 2 best_y = (min_y + max_y) // 2 return best_x, best_y"},{"question":"You are given two strings (s) and (t) of lengths (n) and (m) respectively. Both strings consist of lowercase English letters. In one step, you can choose two different characters from the string (s) and swap their positions. You want to determine if it is possible to transform string (s) into string (t) by performing any number of swaps (including zero). The first line contains a single integer (q) (1 le q le 1000) - the number of test cases. Each test case consists of two lines: - The first line contains two integers (n) and (m) (1 le n, m le 1000) - the lengths of the strings (s) and (t) respectively. - The second line contains the string (s). - The third line contains the string (t). For each test case, print YES if it is possible to transform (s) into (t) by performing any number of swaps. Otherwise, print NO. The output should be case-insensitive (YES, Yes, yes, yEs, etc.). In the first test case, if (s = \\"abc\\") and (t = \\"bca\\"), then by swapping \'a\' and \'b\', and then swapping \'a\' and \'c\', string (s) can be transformed into (t). In the second test case, if (s = \\"abcd\\") and (t = \\"abc\\"), since the lengths of (s) and (t) are different, it is impossible to transform (s) into (t). In the third test case, if (s = \\"abcd\\") and (t = \\"abcf\\"), since they contain different characters, it is impossible to transform (s) into (t).","solution":"def can_transform(q, test_cases): Determines if one string can be transformed into another by any number of swaps. Parameters: q (int): Number of test cases. test_cases (list): List of test cases where each test case is a tuple in the format (n, m, s, t). Returns: list: List of strings \\"YES\\" or \\"NO\\" corresponding to each test case. results = [] for case in test_cases: n, m, s, t = case if n != m: results.append(\\"NO\\") elif sorted(s) == sorted(t): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a grid of size n x m with non-negative integers. Each cell of the grid represents the amount of gold present at that location. A miner starts from the top-left cell and aims to reach the bottom-right cell while collecting the maximum amount of gold possible. The miner can only move right or down from any cell. Your task is to find the maximum amount of gold the miner can collect by the time they reach the bottom-right cell. # Input - The first line contains two integers, n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. - The next n lines each contain m integers representing the amount of gold in each cell of the grid (0 ≤ gold ≤ 100). # Output Output a single integer — the maximum amount of gold that can be collected. # Example Input ``` 3 3 1 3 1 1 5 1 4 2 1 ``` Output ``` 12 ``` Explanation The miner collects gold along the path (1 -> 3 -> 5 -> 2 -> 1), which sums up to 12. The miner can move right or down diagonally from the starting cell to arrive at the maximum gold possible. # Note Ensure to use dynamic programming or any efficient algorithm to handle the constraints effectively.","solution":"def max_gold(n, m, grid): Returns the maximum amount of gold that can be collected by the miner. # Create a dynamic programming table with the same dimensions dp = [[0] * m for _ in range(n)] # Initialize the starting cell dp[0][0] = grid[0][0] # Fill the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = grid[i][j] + max(dp[i-1][j], dp[i][j-1]) # The bottom-right cell holds the maximum amount of gold collected return dp[n-1][m-1]"},{"question":"You are given an undirected graph consisting of n vertices and m edges. You need to assign a color to each vertex such that adjacent vertices have different colors. Determine the smallest number of colors that need to be used to achieve this and provide a possible coloring configuration. Input: - The first line contains two integers n (1 ≤ n ≤ 100) and m (0 ≤ m ≤ 4950) — the number of vertices and edges in the graph. - Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n; u ≠ v) describing an edge between vertices u and v. Output: - The first line should contain the minimum number of colors needed. - The second line should contain n integers where the i-th integer is the color assigned to the i-th vertex (1-indexed). If there are multiple valid colorings, output any. If there\'s no way to color the graph using the given constraints, print \\"-1\\". **Example:** Input: ```plaintext 3 3 1 2 2 3 1 3 ``` Output: ```plaintext 3 1 2 3 ``` In this example, the graph is a triangle (3-cycle), which requires 3 colors. Each vertex is assigned a different color.","solution":"def min_colors_to_color_graph(n, m, edges): Determines the minimum number of colors required to color the graph and returns a possible coloring configuration. Params: n - number of vertices in the graph m - number of edges in the graph edges - list of tuples representing the edges in the graph Returns: A tuple (min_colors, coloring) where: - min_colors is the minimum number of colors required to color the graph - coloring is a list of length n where the i-th element represents the color of vertex i+1 from collections import defaultdict, deque if n == 1: return 1, [1] # Build adjacency list adj = defaultdict(list) for u, v in edges: adj[u].append(v) adj[v].append(u) # Initialize vertex colors (-1 means uncolored) color = [-1] * n def bfs_coloring(start): Helper function to perform BFS for graph coloring queue = deque([(start, 0)]) # (vertex, color) color[start - 1] = 1 while queue: node, col = queue.popleft() next_col = 2 if col == 1 else 1 # Toggle between 1 and 2 for bipartite attempt for neighbor in adj[node]: if color[neighbor - 1] == -1: color[neighbor - 1] = next_col queue.append((neighbor, next_col - 1)) elif color[neighbor - 1] == color[node - 1]: return False # Graph is not bipartite return True # Attempt to color the graph using two colors (Bipartite check) bipartite = True for i in range(1, n + 1): if color[i - 1] == -1: if not bfs_coloring(i): bipartite = False break if bipartite: return 2, color # If not bipartite, use greedy to find needed colors max_degrees = max([len(adj[x]) for x in adj]) + 1 color = [-1] * n def greedy_coloring(): available = [True] * (max_degrees + 1) for vertex in range(1, n + 1): for neighbor in adj[vertex]: if color[neighbor - 1] != -1: available[color[neighbor - 1]] = False for c in range(1, max_degrees + 1): if available[c]: color[vertex - 1] = c break for neighbor in adj[vertex]: if color[neighbor - 1] != -1: available[color[neighbor - 1]] = True greedy_coloring() min_colors = max(color) return min_colors, color # Example usage: # n, m = 3, 3 # edges = [(1, 2), (2, 3), (1, 3)] # print(min_colors_to_color_graph(n, m, edges))"},{"question":"You are managing a warehouse and need to keep track of the items effectively. There are three types of operations you can perform: 1. Add a specified number of items of a certain type to the warehouse. 2. Remove a specified number of items of a certain type from the warehouse. 3. Query the total count of a certain type of items in the warehouse. You are given an empty warehouse initially. You need to process a series of operations that are provided in the form of queries and maintain the count of each type of item accordingly. Item types are identified by integers. If a removal operation is attempted which removes more items than are currently in the warehouse, the number of items in the warehouse for that type should not go below zero. The operations are described as follows: - For an add operation, you will be given \\"ADD type count\\" which means you should add `count` number of items of type `type` to the warehouse. - For a remove operation, you will be given \\"REMOVE type count\\" which means you should remove `count` number of items of type `type` from the warehouse. - For a query operation, you will be given \\"QUERY type\\" which means you should return the current number of items of type `type` in the warehouse. # Input: - The first line contains a single integer n (1 ≤ n ≤ 10^4) — the number of operations. - The following n lines contain the operations to be performed. # Output: - For each \\"QUERY\\" operation, output a single integer representing the current count of the specified item type in the warehouse. # Example: Input: ``` 6 ADD 1 100 ADD 2 150 REMOVE 1 30 QUERY 1 REMOVE 2 200 QUERY 2 ``` Output: ``` 70 0 ``` # Explanation: - After the first \\"ADD 1 100\\" operation, type 1 items count is 100. - After the second \\"ADD 2 150\\" operation, type 2 items count is 150. - After the third \\"REMOVE 1 30\\" operation, type 1 items count is 70 (i.e., 100 - 30). - The first query \\"QUERY 1\\" outputs 70 because there are 70 items of type 1. - The fifth operation \\"REMOVE 2 200\\" would reduce type 2 items count below zero if it were allowed, but since it isn\'t, the count becomes 0. - The second query \\"QUERY 2\\" outputs 0 because there are no items of type 2 left. Implement a function that simulates this sequence of operations and provides the correct output for each query.","solution":"def warehouse_operations(n, operations): warehouse = {} result = [] for operation in operations: parts = operation.split() op_type = parts[0] item_type = int(parts[1]) if op_type == \\"ADD\\": count = int(parts[2]) if item_type not in warehouse: warehouse[item_type] = 0 warehouse[item_type] += count elif op_type == \\"REMOVE\\": count = int(parts[2]) if item_type in warehouse: warehouse[item_type] = max(0, warehouse[item_type] - count) elif op_type == \\"QUERY\\": result.append(warehouse.get(item_type, 0)) return result"},{"question":"In a large company, there are n employees and m direct reporting relationships between them. An employee can directly report to multiple managers. The company\'s organizational hierarchy is represented as a directed acyclic graph (DAG) where nodes represent employees and directed edges represent direct reporting relationships. The company needs to perform a structural analysis to evaluate the \\"depth\\" of the organizational hierarchy: the maximum number of direct and indirect managers an employee has. Your task is to help compute this depth for each employee. Here\'s the detailed information you will be provided: - The first line contains two integers n (1 ≤ n ≤ 200,000) and m (0 ≤ m ≤ 200,000) representing the number of employees and the number of direct reporting relationships respectively. - The next m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v), indicating that employee v directly reports to employee u. Output n integers where the i-th integer represents the maximum number of direct and indirect managers the i-th employee has. If an employee has no manager at all, the number for that employee should be 0. For example, consider n=5 and m=4: ``` 5 4 1 2 1 3 3 4 2 4 ``` In this case, the output should be: ``` 0 1 1 2 0 ``` Explanation: - Employee 1 has no managers. - Employee 2 directly reports to Employee 1 (1 manager). - Employee 3 directly reports to Employee 1 (1 manager). - Employee 4 directly reports to Employees 2 and 3, each of whom directly reports to Employee 1. So Employee 4 has a total of 2 managers (2 direct: Employees 2 and 3, and 1 indirect: Employee 1). - Employee 5 has no managers.","solution":"from collections import defaultdict, deque def compute_hierarchy_depth(n, m, relationships): Computes the depth of the organizational hierarchy for each employee. Parameters: n (int): Number of employees. m (int): Number of direct reporting relationships. relationships (list of tuples): Each tuple u, v indicates employee v directly reports to employee u. Returns: list: A list of integers where the i-th integer represents the maximum number of direct and indirect managers the i-th employee has. # Initialize the graph and in-degree list graph = defaultdict(list) in_degree = [0] * (n + 1) # Build the graph and compute in-degrees for u, v in relationships: graph[u].append(v) in_degree[v] += 1 # Initialize the depth and queue for topological sorting depth = [0] * (n + 1) queue = deque() # Add all nodes with in-degree 0 to the queue for i in range(1, n + 1): if in_degree[i] == 0: queue.append(i) # Perform the topological sort to compute depths while queue: u = queue.popleft() for v in graph[u]: depth[v] = max(depth[v], depth[u] + 1) in_degree[v] -= 1 if in_degree[v] == 0: queue.append(v) return depth[1:]"},{"question":"You are given two strings, `s` and `t`, consisting of lowercase English letters. Your task is to determine the minimum number of operations required to transform string `s` into string `t`. In one operation, you can perform one of the following: 1. Insert a single character into `s`. 2. Delete a single character from `s`. 3. Replace a single character in `s` with any other character. The first line contains an integer q (1 le q le 1000) - the number of queries. Each of the next q lines contains two strings, `s` and `t`, each of length 1 le |s|, |t| le 1000. For each query, print the minimum number of operations required to transform `s` into `t`. Example input: ``` 3 sea eat abc adc kitten sitting ``` Example output: ``` 2 1 3 ``` Explanation of the example: 1. Transform \\"sea\\" to \\"eat\\" with 2 operations: replace \'s\' with \'e\', replace \'a\' with \'t\'. 2. Transform \\"abc\\" to \\"adc\\" with 1 operation: replace \'b\' with \'d\'. 3. Transform \\"kitten\\" to \\"sitting\\" with 3 operations: replace \'k\' with \'s\', replace \'e\' with \'i\', insert \'g\' at the end.","solution":"def min_operations_to_transform(s, t): m, n = len(s), len(t) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif s[i - 1] == t[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1]) return dp[m][n] def process_queries(q, queries): results = [] for s, t in queries: results.append(min_operations_to_transform(s, t)) return results"},{"question":"There is a square grid with dimensions n x n, where some cells are blocked and some are free. You are initially located at cell (1, 1) and you want to reach cell (n, n). From any cell (i, j), you can move to the following cells if they are within the bounds of the grid and are not blocked: (i+1, j), (i-1, j), (i, j+1), (i, j-1). Write a program to determine if there is a path from the initial cell (1, 1) to the final cell (n, n). The first line contains an integer n (1 ≤ n ≤ 1000) — the size of the grid. Each of the next n lines contains n characters representing the grid, where \'.\' represents a free cell and \'#\' represents a blocked cell. It is guaranteed that the cells (1, 1) and (n, n) are free cells (\'.\'). Print \\"YES\\" if there is a path from (1, 1) to (n, n), otherwise print \\"NO\\". Example: Input: 4 .... .#.. ..#. .... Output: YES In this example, there is a path from (1, 1) to (n, n) that navigates around the blocked cells.","solution":"def is_path_possible(n, grid): Determines if there is a path from the top-left corner to the bottom-right corner in a given n x n grid. Parameters: n (int): The size of the grid. grid (list of str): The grid represented as a list of strings, where \'.\' denotes a free cell and \'#\' denotes a blocked cell. Returns: str: \\"YES\\" if there is a path, \\"NO\\" otherwise. if n == 1: return \\"YES\\" directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] visited = [[False] * n for _ in range(n)] queue = [(0, 0)] visited[0][0] = True while queue: i, j = queue.pop(0) if (i, j) == (n-1, n-1): return \\"YES\\" for di, dj in directions: ni, nj = i + di, j + dj if 0 <= ni < n and 0 <= nj < n and not visited[ni][nj] and grid[ni][nj] == \'.\': visited[ni][nj] = True queue.append((ni, nj)) return \\"NO\\""},{"question":"You are given a function that shifts all elements of an array either to the left or to the right by any given number of positions. The resulting array should wrap around such that elements that shift beyond the end of the array come back around to the beginning. Your task is to construct a method that will take an array of integers and two additional parameters: a string indicating the direction (\'left\' or \'right\') and an integer indicating the number of positions to shift. The method should return the modified array after the shift has been performed. Consider edge cases, such as shifting by 0 positions or shifting by a number greater than the length of the array. You have to implement a function with the following specification: **Function Signature:** ```python def array_shift(arr: list[int], direction: str, positions: int) -> list[int]: ```","solution":"def array_shift(arr: list[int], direction: str, positions: int) -> list[int]: Shifts elements in the array either to the left or right by a given number of positions. Elements that shift beyond the end of the array come back around to the beginning. Parameters: arr (list[int]): The array to be shifted direction (str): The direction to shift (\'left\' or \'right\') positions (int): The number of positions to shift Returns: list[int]: The shifted array n = len(arr) if n == 0: return arr positions = positions % n # Normalize positions to be within the bounds of the array length if direction == \'left\': return arr[positions:] + arr[:positions] elif direction == \'right\': return arr[-positions:] + arr[:-positions] else: raise ValueError(\\"Invalid direction. Use \'left\' or \'right\'.\\")"},{"question":"A company wants to monitor the performance of their delivery system. Each delivery has a specified delivery time, and the company needs to check if it meets a target time. If the delivery time exceeds the target time, an immediate alert should be raised. Write a function `check_delivery_alerts(times: List[int], target: int) -> int` that takes a list of delivery times and a target time as inputs. The function should return the count of deliveries that exceeded the target time. # Input - An integer target (1 <= target <= 10^6) representing the target delivery time in minutes. - A list of n integers `times` (1 <= n <= 100), each representing a delivery time in minutes (1 <= times[i] <= 10^6). # Output - An integer representing the number of deliveries that exceeded the target time. # Example ```python assert check_delivery_alerts([30, 45, 60, 15, 25, 50], 40) == 3 assert check_delivery_alerts([10, 20, 30, 40], 25) == 2 assert check_delivery_alerts([5, 15, 25, 35], 36) == 0 ```","solution":"from typing import List def check_delivery_alerts(times: List[int], target: int) -> int: Returns the count of deliveries that exceeded the target time. Parameters: times (List[int]): List of delivery times. target (int): Target delivery time. Returns: int: Number of deliveries that exceeded the target time. return sum(time > target for time in times)"},{"question":"You are given an array of integers and a target sum. Your task is to determine the number of unique pairs of integers in the array that add up to the target sum. A pair is considered unique if the pair (a, b) is the same as (b, a) and no integer is used more than once in the pair. Write a function to solve the problem. # Function Signature ```python def count_pairs_with_target_sum(arr: List[int], target: int) -> int: ``` # Input - An integer array `arr` of length `n` (1 ≤ n ≤ 2 × 10^5) containing unique integers. - An integer `target` (1 ≤ target ≤ 2 × 10^9). # Output - An integer representing the number of unique pairs (a, b) such that a + b equals the target sum. # Example Input ```python arr = [1, 2, 3, 4, 5] target = 5 ``` Output ```python 2 ``` Explanation ```plaintext The pairs (1, 4) and (2, 3) add up to the target sum of 5. Hence, the function returns 2. ``` # Note - Ensure your solution has an efficient time complexity to handle large inputs. - Consider edge cases like negative integers or when no pairs meet the criteria.","solution":"from typing import List def count_pairs_with_target_sum(arr: List[int], target: int) -> int: Returns the number of unique pairs in the array that add up to the target sum. num_pairs = 0 seen = set() pairs_found = set() for num in arr: complement = target - num if complement in seen and (min(num, complement), max(num, complement)) not in pairs_found: num_pairs += 1 pairs_found.add((min(num, complement), max(num, complement))) seen.add(num) return num_pairs"},{"question":"You are given a 2D grid of size m × n representing a map where 1 represents land and 0 represents water. The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells). An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are surrounded by water. You need to write a function that returns the perimeter of the island. The function signature is: ```python def island_perimeter(grid: List[List[int]]) -> int: ``` The grid is represented by a list of lists of integers, where: - m is the number of rows, with 1 ≤ m ≤ 100. - n is the number of columns, with 1 ≤ n ≤ 100. Function input is a 2D list `grid` representing the map. Function output is the perimeter of the island as an integer. **Example 1:** ```python grid = [ [0,1,0,0], [1,1,1,0], [0,1,0,0], [1,1,0,0] ] print(island_perimeter(grid)) # Output: 16 ``` **Example 2:** ```python grid = [ [1] ] print(island_perimeter(grid)) # Output: 4 ``` **Example 3:** ```python grid = [ [1,0] ] print(island_perimeter(grid)) # Output: 4 ``` Note: The grid contains at least one island and the input is valid (i.e., the grid always contains exactly one island).","solution":"def island_perimeter(grid): Returns the perimeter of the island in the given grid. perimeter = 0 rows = len(grid) cols = len(grid[0]) for i in range(rows): for j in range(cols): if grid[i][j] == 1: # Check top if i == 0 or grid[i-1][j] == 0: perimeter += 1 # Check bottom if i == rows-1 or grid[i+1][j] == 0: perimeter += 1 # Check left if j == 0 or grid[i][j-1] == 0: perimeter += 1 # Check right if j == cols-1 or grid[i][j+1] == 0: perimeter += 1 return perimeter"},{"question":"A group of biologists is studying the ecosystem of an isolated island. They are particularly interested in the dominant species of birds on the island. Each bird can only exist in one of 26 species, denoted by lowercase letters from \'a\' to \'z\'. During a specific observation period, the biologists record the species of birds as a string of letters, where each letter represents the species of one bird observed. To better understand the ecological balance, they want to determine the minimum number of changes needed to ensure that no two adjacent birds belong to the same species. For example, if the observation string is \\"aabb\\", one possible way to achieve the goal is to change the second \'a\' to \'c\', resulting in \\"acbb\\". The minimum number of changes required in this case is 1. In some cases, multiple adjacent birds might need to be changed. Write a program to help the biologists determine the minimum number of changes required to ensure that no two adjacent birds belong to the same species. Input Format: - The first line contains an integer n (1 le n le 10^5), the length of the observation string. - The second line contains a string s of length n, consisting of lowercase Latin letters, representing the observed species of birds. Output Format: - Print a single integer, the minimum number of changes required. Example: Input: 4 aabb Output: 2 Explanation: One possible way to achieve no adjacent birds belonging to the same species is to change the string \\"aabb\\" to \\"abab\\", which requires 2 changes. Another possible solution could be \\"abcb\\", which also requires 2 changes.","solution":"def min_changes_to_avoid_adjacent_duplicates(n, s): Returns the minimum number of changes needed to ensure no two adjacent birds belong to the same species. :param n: Length of the observation string :param s: Observation string of bird species :return: Minimum number of changes required changes = 0 for i in range(1, n): if s[i] == s[i - 1]: changes += 1 return changes"},{"question":"You are given a list of integers. Your task is to find the longest strictly increasing subsequence within the list. A strictly increasing subsequence means that for all indices i and j in the subsequence, if i < j, then subsequence[i] < subsequence[j]. The only line of input contains a list of integers separated by spaces. In the first line of the output, print the length of the longest strictly increasing subsequence. In the second line, print the subsequence itself, formatted as a space-separated string of integers. If there are multiple longest increasing subsequences of the same length, print any one of them.","solution":"def longest_increasing_subsequence(arr): Returns the length and one of the longest strictly increasing subsequences from the given list of integers. if not arr: return 0, [] n = len(arr) dp = [1] * n prev_indices = [-1] * n for i in range(1, n): for j in range(0, i): if arr[i] > arr[j] and dp[i] < dp[j] + 1: dp[i] = dp[j] + 1 prev_indices[i] = j max_length = max(dp) max_index = dp.index(max_length) lis = [] while max_index != -1: lis.append(arr[max_index]) max_index = prev_indices[max_index] lis.reverse() return max_length, lis # Example usage arr = [10, 22, 9, 33, 21, 50, 41, 60, 80] length, subsequence = longest_increasing_subsequence(arr) print(length) print(\\" \\".join(map(str, subsequence)))"},{"question":"Captain Shogun has found an ancient scroll detailing the existence of a secret treasure hidden in a labyrinth. The labyrinth can be represented as a grid of size m x n. Each cell in the grid contains a certain number of gold coins. Captain Shogun starts at the top-left corner of the grid (0,0) and moves towards the bottom-right corner (m-1, n-1). He can only move either right or down at any point in time. During his journey, Captain Shogun wants to collect the maximum number of gold coins. You need to help him by writing a program that calculates the maximum number of coins he can collect. The first line of the input contains two space-separated integers m and n (1 ≤ m, n ≤ 100), denoting the number of rows and columns of the labyrinth, respectively. The next m lines describe the grid, each containing n space-separated integers, denoting the number of gold coins in each cell. The value in cell i, j represents the number of gold coins at coordinates (i, j). Print the maximum number of gold coins Captain Shogun can collect. # Example Input: ``` 3 3 1 3 1 1 5 1 4 2 1 ``` Output: ``` 12 ``` # Explanation: The optimal path is 1 → 3 → 5 → 2 → 1 which sums up to 12 gold coins.","solution":"def max_gold_coins(m, n, grid): Returns the maximum number of gold coins that can be collected from the top-left to the bottom-right of the grid. # Create a 2D list to store the maximum coins collected up to each cell dp = [[0] * n for _ in range(m)] # Initialize the dp array with the first cell value dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, m): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right cell contains the maximum coins collectible return dp[m-1][n-1] def parse_input(input_str): lines = input_str.strip().split(\'n\') m, n = map(int, lines[0].strip().split()) grid = [list(map(int, line.strip().split())) for line in lines[1:]] return m, n, grid"},{"question":"The Zoglanders are organizing a kite flying competition. The competition area is represented as a 2D grid of size n x m (1 ≤ n, m ≤ 100), where each cell is either empty or contains a tree. Each participant must start flying their kite from an empty cell and the goal is to move in any of the four cardinal directions (up, down, left, right) without running into a tree or going out of bounds. The participant\'s path must cover all empty cells in a single connected region with no breaks. Given the grid description, determine the number of such connected regions of empty cells where a participant can fly their kite without interruption. The first line contains two separated by a space integer numbers n, m (1 ≤ n, m ≤ 100) — the number of rows and columns of the grid. Each of the next n lines contains m characters, where each character is either a «.» (representing an empty cell) or a «T» (representing a tree). Print the number of connected empty cell regions. Example input: 4 5 ..... ..T.. .T... ..... Example output: 1","solution":"def count_empty_regions(n, m, grid): Returns the number of connected regions of empty cells (\'.\') in the grid. def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] != \'.\': return grid[x][y] = \'#\' # mark visited dfs(x + 1, y) dfs(x - 1, y) dfs(x, y + 1) dfs(x, y - 1) regions = 0 for i in range(n): for j in range(m): if grid[i][j] == \'.\': dfs(i, j) regions += 1 return regions # Example usage n = 4 m = 5 grid = [ \\".....\\", \\"..T..\\", \\".T...\\", \\".....\\" ] print(count_empty_regions(n, m, [list(row) for row in grid])) # Output: 1"},{"question":"Given an array of integers, find the shortest subarray which, when sorted, will make the entire array sorted in non-decreasing order. # Input: - The first line of the input contains a single integer `n` (1 le n le 10^5) — the size of the array. - The second line contains `n` integers `a_1, a_2, ..., a_n` (1 le a_i le 10^9) — the elements of the array. # Output: - Print two integers, the starting and ending indices (1-based) of the smallest subarray that should be sorted to make the whole array sorted in non-decreasing order. - If the entire array is already sorted, print `1 1`. # Examples: Example 1: **Input:** ``` 5 2 6 4 8 10 ``` **Output:** ``` 2 3 ``` **Explanation:** Sorting the subarray starting from index 2 to 3 (`6 4`) results in the entire array becoming sorted as `2 4 6 8 10`. Example 2: **Input:** ``` 7 1 2 5 3 4 6 7 ``` **Output:** ``` 3 5 ``` **Explanation:** Sorting the subarray from index 3 to 5 (`5 3 4`) results in the array becoming `1 2 3 4 5 6 7`. Example 3: **Input:** ``` 5 1 2 3 4 5 ``` **Output:** ``` 1 1 ``` **Explanation:** The entire array is already sorted, so the output is `1 1`. # Notes: 1. Please ensure that the subarray you identify is the smallest possible. 2. If sorting a single, already sorted position suffices, this subarray should also be reported as `1 1`.","solution":"def shortest_unsorted_subarray(arr): n = len(arr) # Step 1: Check for initial boundary condition if all(arr[i] <= arr[i + 1] for i in range(n - 1)): return 1, 1 # Step 2: Find the first and last place where the order is incorrect start = next(i for i in range(n - 1) if arr[i] > arr[i + 1]) end = next(n - 1 - i for i in range(n - 1) if arr[n - 1 - i] < arr[n - 2 - i]) # Step 3: Find the minimum and maximum in the subarray arr[start:(end+1)] sub_min = min(arr[start:end + 1]) sub_max = max(arr[start:end + 1]) # Step 4: Expand the start and end as necessary while start > 0 and arr[start - 1] > sub_min: start -= 1 while end < n - 1 and arr[end + 1] < sub_max: end += 1 return start + 1, end + 1"},{"question":"Given a list of n intervals representing events\' start and end times, determine the maximum number of non-overlapping intervals that can be selected. The first line contains the integer n (1 ≤ n ≤ 10^6) — the number of intervals. The next n lines each contain two integers, start and end, representing the start and end time of the interval (1 ≤ start < end ≤ 10^9). Output the maximum number of non-overlapping intervals. Example: Input: 4 1 3 2 4 3 5 1 2 Output: 2","solution":"def max_non_overlapping_intervals(intervals): Returns the maximum number of non-overlapping intervals. # Sort intervals based on end time intervals.sort(key=lambda x: x[1]) count = 0 end_time = float(\'-inf\') for interval in intervals: if interval[0] >= end_time: count += 1 end_time = interval[1] return count def process_input(input_string): input_lines = input_string.strip().split(\'n\') n = int(input_lines[0]) intervals = [tuple(map(int, line.split())) for line in input_lines[1:]] return max_non_overlapping_intervals(intervals)"},{"question":"You are given a list of integers representing the number of books in several libraries. You need to distribute a given number of books to these libraries following specific rules. The goal is to determine the maximum number of books that a single library can have after the distribution. You are provided with the initial numbers of books in each library, and then you are given the number of additional books to distribute among the libraries. Distribute the books in such a way that maximizes the number of books in any single library. # Input - The first line contains an integer n (2 ≤ n ≤ 1000) — the number of libraries. - The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 1000) — the initial number of books in each library. - The third line contains an integer m (0 ≤ m ≤ 10^6) — the number of additional books to distribute. # Output - Print one integer — the maximum number of books that a single library can have after distributing the given number of books. # Example Input ``` 4 2 8 7 5 10 ``` Output ``` 12 ``` # Explanation In the example, you have 4 libraries with initial numbers of books as [2, 8, 7, 5]. You have to distribute 10 additional books. The optimal strategy is to give 4 extra books to the library with 8 books, making it 12, and the remaining books can be distributed arbitrarily among the other libraries, as the goal is only to maximize the books in one library, and you cannot exceed this max with the allowed number of books. Hence, the output is 12.","solution":"def max_books_after_distribution(n, books, m): Given the initial number of books in several libraries and a number of additional books to distribute, finds the maximum number of books that a single library can have after the distribution. Parameters: - n (int): The number of libraries. - books (list of int): The initial number of books in each library. - m (int): The number of additional books to distribute. Returns: - int: The maximum number of books in a single library after distribution. max_books_initial = max(books) max_possible_books = max_books_initial + m return max_possible_books"},{"question":"You are given an integer array `nums` containing `n` elements. A \\"peak\\" element is an element that is strictly greater than its neighbors. If the element is at the boundary of the array, it is considered a peak if it is greater than its only neighbor. Write a function that returns the index of any one of its peak elements. The function should satisfy the following requirements: 1. The solution should run in O(log n) time complexity. 2. If the array contains multiple peaks, return the index of any one peak. 3. You might assume `nums[-1]` and `nums[n]` are `-∞`. # Example: ```python Input: nums = [1, 2, 3, 1] Output: 2 Explanation: 3 is a peak element and your function should return the index number 2. Input: nums = [1, 2, 1, 3, 5, 6, 4] Output: 5 Explanation: Your function can return index number 1 which is peak element 2, or index number 5 which is peak element 6. ``` # Constraints: - 1 <= nums.length <= 1000 - -10^4 <= nums[i] <= 10^4 # Note: - Your solution must be in the form of a function that receives the list of integers and returns an integer. - You can use any suitable programming language to implement the function, but the function signature should look something like this: ```python def findPeakElement(nums: List[int]) -> int: ```","solution":"def findPeakElement(nums): Find a peak element index in the array. A peak element is greater than its neighbors. The function uses binary search to achieve O(log n) time complexity. Parameters: nums (List[int]): The input array of integers. Returns: int: The index of any peak element. left, right = 0, len(nums) - 1 while left < right: mid = (left + right) // 2 if nums[mid] > nums[mid + 1]: right = mid else: left = mid + 1 return left"},{"question":"Bob is working on a digital advertising platform and needs an algorithm to help identify the top advertisers based on their spending over the last n days. Each day, the platform records the name of an advertiser and the amount of money they spent on that day. Bob needs to list the advertisers who have spent the most money over the period. You are given a list of daily records of advertiser expenditures, where each record consists of an advertiser\'s name and the amount spent by that advertiser on that day. Your task is to determine the advertiser(s) with the highest total expenditure. # Input: - The first line contains an integer t (1 le t le 100) — the number of test cases. - For each test case: - The first line contains an integer n (1 le n le 10^4) — the number of days. - The following n lines contain the name of the advertiser (a string of at most 20 characters consisting of Latin letters and digits) and the amount of money they spent on that day (a non-negative integer not exceeding 10^6). # Output: For each test case, output one line: - If there is a single top advertiser, output the advertiser\'s name. - If there are multiple advertisers with the highest expenditure, output their names separated by spaces in any order. # Example: Input: ``` 2 5 alice 100 bob 200 alice 150 bob 300 charlie 400 4 david 100 david 100 david 200 eve 400 ``` Output: ``` charlie david eve ``` # Note: - In the first test case, the total expenditure is: alice - 250, bob - 500, charlie - 400. Bob has the highest expenditure with 500. - In the second test case, both david and eve have a total expenditure of 400.","solution":"def top_advertisers(test_cases): results = [] for n, records in test_cases: expenditure = {} for name, amount in records: if name in expenditure: expenditure[name] += amount else: expenditure[name] = amount max_expenditure = max(expenditure.values()) top_advertisers = [name for name, amount in expenditure.items() if amount == max_expenditure] results.append(\\" \\".join(top_advertisers)) return results"},{"question":"Rainfall Record Analysis: You are given a record of rainfall measurements taken at various points during the day. Each measurement consists of a timestamp and the corresponding rainfall amount. Your task is to determine some statistics about the rain that fell throughout the day. You will receive `n` rainfall measurements. Each measurement is given as a pair of integers `(t_i, r_i)`, where `t_i` is the timestamp (in seconds) when the measurement was taken, and `r_i` is the amount of rain recorded at that time. The measurements are unordered and `n` is guaranteed to be at least 1. Determine the following: 1. The total amount of rainfall measured throughout the day. 2. The timestamp when the maximum rainfall was recorded. If there are multiple timestamps with the same maximum rainfall, print the smallest of those timestamps. 3. The interval duration between the earliest and the latest timestamps. Input The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the number of measurements. The next `n` lines each contain two space-separated integers `t_i` and `r_i` (0 ≤ t_i ≤ 10^9, 0 ≤ r_i ≤ 10^3) — the timestamp and the rainfall amount recorded at that time. Output Print three space-separated integers: 1. The total amount of rainfall measured. 2. The timestamp when the maximum rainfall was recorded. 3. The duration (in seconds) between the earliest and latest timestamps. Example Input: 4 5 10 1 5 8 20 3 15 Output: 50 8 7 Explanation: - The total amount of rainfall recorded is 5 + 10 + 15 + 20 = 50. - The maximum rainfall was recorded at timestamp 8 with an amount of 20. - The interval duration between the earliest timestamp (1) and the latest timestamp (8) is 8 - 1 = 7 seconds.","solution":"def analyze_rainfall(n, measurements): Analyzes rainfall records to determine total rainfall, timestamp of max rainfall, and duration between earliest and latest timestamps. Parameters: n : int - number of measurements measurements : list of tuples - each tuple contains (timestamp, rainfall amount) Returns: tuple - total rainfall, timestamp with max rainfall, duration between earliest and latest timestamp total_rainfall = 0 max_rainfall = 0 timestamp_of_max_rainfall = float(\'inf\') min_timestamp = float(\'inf\') max_timestamp = float(\'-inf\') for t_i, r_i in measurements: total_rainfall += r_i if r_i > max_rainfall: max_rainfall = r_i timestamp_of_max_rainfall = t_i elif r_i == max_rainfall: timestamp_of_max_rainfall = min(timestamp_of_max_rainfall, t_i) min_timestamp = min(min_timestamp, t_i) max_timestamp = max(max_timestamp, t_i) duration = max_timestamp - min_timestamp return total_rainfall, timestamp_of_max_rainfall, duration # Example Usage: # n = 4 # measurements = [(5, 10), (1, 5), (8, 20), (3, 15)] # print(analyze_rainfall(n, measurements)) # Output: (50, 8, 7)"},{"question":"You are given a list of packages with different weights that need to be shipped. To minimize the shipping cost, you must group the packages into the smallest number of containers where the total weight of the packages in each container does not exceed a given limit. Each package must be shipped in exactly one container. Determine the minimum number of containers needed to ship all packages without exceeding the weight limit for any container. Write a function `minimumNumberOfContainers(packages: List[int], weight_limit: int) -> int` that takes in a list of integers `packages` representing the weight of each package and an integer `weight_limit` representing the maximum total weight capacity of each container. The function should return an integer representing the minimum number of containers required. **Constraints:** - The number of packages will not exceed 1000. - Each package weight will be a positive integer less than or equal to the weight limit. - The weight limit is a positive integer. **Example:** ```python minimumNumberOfContainers([1, 2, 3, 4, 5], 5) ``` Output: ``` 3 ``` Explanation: - You can group the packages as (1, 4), (2, 3), and (5) to minimize the number of containers.","solution":"def minimumNumberOfContainers(packages, weight_limit): Determine the minimum number of containers required to ship all packages without exceeding the weight limit for any container. Parameters: packages (List[int]): A list of integers representing the weights of the packages. weight_limit (int): An integer representing the maximum total weight capacity of each container. Returns: int: The minimum number of containers required. # Sort the packages in descending order packages.sort(reverse=True) # List to keep track of the remaining capacity in each container containers = [] for package in packages: placed = False for i in range(len(containers)): if containers[i] >= package: containers[i] -= package placed = True break if not placed: containers.append(weight_limit - package) return len(containers)"},{"question":"You are given an array of integers arr. An integer k is said to be the Peak Element in the array if k is greater than its neighbors. For example, in the array [1, 3, 20, 4, 1, 0], 20 is a peak element because it is greater than both its neighbors, 3 and 4. Write a function to find the peak element where the peak element is an element that is greater than its neighbours. In the case of an array with multiple peak elements, return any one of the peak elements. You may assume that the array: - Contains at least one element. - Always has at least one peak element. Function signature: ```python def find_peak_element(arr: List[int]) -> int: ``` **Input Format:** - The first line contains an integer, n (1 leq n leq 100), the size of the array. - The second line contains n space-separated integers representing the elements of the array arr. **Output Format:** - Print a single integer, the peak element in the array. Example 1: ``` Input: 6 1 3 20 4 1 0 Output: 20 ``` Example 2: ``` Input: 3 10 11 12 Output: 12 ```","solution":"from typing import List def find_peak_element(arr: List[int]) -> int: n = len(arr) if n == 1: return arr[0] if arr[0] >= arr[1]: return arr[0] if arr[n-1] >= arr[n-2]: return arr[n-1] for i in range(1, n-1): if arr[i] >= arr[i-1] and arr[i] >= arr[i+1]: return arr[i]"},{"question":"You are given an integer array of size `n` and an integer `k`. The array is initially unsorted, but it is guaranteed that after sorting, there will be at most `k` distinct numbers in the array. Your task is to efficiently determine how many times each of the distinct numbers appears in the array without fully sorting the array. Implement a function with the following signature: ```python def countDistinctElements(arr: List[int], k: int) -> Dict[int, int]: pass ``` Input - `arr`: A list of integers representing the array. - `k`: An integer representing the maximum number of distinct elements in the array after sorting. Output - A dictionary where the keys are the distinct elements in the array, and the values are the counts of each element. Example Input: ```python arr = [4, 2, 2, 8, 4, 2, 8, 3, 3, 4] k = 3 ``` Output: ```python {2: 3, 4: 3, 8: 2, 3: 2} ``` Constraints - The size of `arr` will be at most `10^5`. - `1 <= k <= n` - The elements in `arr` are integers which can be negative or positive.","solution":"from typing import List, Dict from collections import Counter def countDistinctElements(arr: List[int], k: int) -> Dict[int, int]: This function returns a dictionary containing the count of each distinct element in the input array. It assumes that the array could have up to k distinct elements after sorting. return dict(Counter(arr))"},{"question":"You are given an unordered list of integers, and two positive integers x and y. Your task is to reverse the sublist from position x to position y (inclusive) within the list. The positions are 1-based indexing. For example, if the list is [1, 2, 3, 4, 5, 6], x = 2, and y = 5, then the sublist from position 2 to 5 is [2, 3, 4, 5]. Reversing this sublist results in [5, 4, 3, 2], and the entire list will be [1, 5, 4, 3, 2, 6] after performing the operation. The first line contains an integer t (1 le t le 100) — the number of test cases in the input. Each test case consists of two lines: - The first line contains two integers n (2 le n le 10^5) and m (1 le x le y le n) separated by a space. - The second line contains n integers representing the list. For each test case, output the modified list after reversing the specified sublist. Example: Input: ``` 2 6 2 5 1 2 3 4 5 6 5 1 5 1 2 3 4 5 ``` Output: ``` 1 5 4 3 2 6 5 4 3 2 1 ```","solution":"def reverse_sublist(t, test_cases): results = [] for case in test_cases: n, x, y = case[0] lst = case[1] # Convert to 0-based index x -= 1 y -= 1 # Reverse the sublist lst[x:y+1] = lst[x:y+1][::-1] results.append(lst) return results # Example usage: # t = 2 # test_cases = [((6, 2, 5), [1, 2, 3, 4, 5, 6]), ((5, 1, 5), [1, 2, 3, 4, 5])] # print(reverse_sublist(t, test_cases))"},{"question":"You are given a string consisting of lowercase letters and a list of queries. Each query is a pair of integers (l, r), which represents a substring from the l-th character to the r-th character (inclusive, 1-based indexing). For each query, you need to find the number of distinct characters in the specified substring. The input format is as follows: - The first line contains a single integer n (1 ≤ n ≤ 100,000) — the length of the string. - The second line contains a string of length n consisting of lowercase letters. - The third line contains a single integer q (1 ≤ q ≤ 100,000) — the number of queries. - The next q lines each contain two integers l and r (1 ≤ l ≤ r ≤ n) — representing a query for the substring from the l-th to the r-th character. For each query, print a single integer — the number of distinct characters in the corresponding substring. Example: ``` Input: 10 abrakadabra 3 1 3 2 5 1 10 Output: 3 4 5 ```","solution":"def count_distinct_characters(s, queries): Returns the number of distinct characters for each query. Parameters: s (str): The input string. queries (list of tuples): A list of tuples, where each tuple contains two integers l and r (1-based indices), representing the start and end indices of the substring. Returns: list: A list of integers, where each integer is the number of distinct characters in the corresponding query. results = [] for l, r in queries: substring = s[l-1:r] distinct_count = len(set(substring)) results.append(distinct_count) return results"},{"question":"You are given several queries. In each query, you are given two positive integers `x` and `y`. Your task is to find the sum of all prime numbers between `x` and `y` (inclusive) for each query. If there are no prime numbers in the given range, return 0 for that query. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. The first line contains a single integer `q` (1 ≤ q ≤ 1000) — the number of queries. Next `q` lines follow. Each of the following lines contains two integers `x` and `y` (1 ≤ x, y ≤ 10^5) — representing the range for that query. For each query, print the sum of all prime numbers in the given range `[x, y]`, or 0 if there are no prime numbers in that range. Example: ``` Input: 3 10 20 21 29 1 3 Output: 60 52 5 ```","solution":"def sieve_of_eratosthenes(n): Returns a list of primes up to n using the Sieve of Eratosthenes is_prime = [True] * (n + 1) p = 2 while p * p <= n: if is_prime[p]: for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 prime_nums = [p for p in range(2, n + 1) if is_prime[p]] return prime_nums def sum_primes_in_range(x, y, primes): Returns the sum of primes in the range [x, y] return sum(p for p in primes if x <= p <= y) def process_queries(queries): Returns a list of results for the sum of primes in range for each query max_query_value = max(max(x, y) for x, y in queries) primes = sieve_of_eratosthenes(max_query_value) results = [] for x, y in queries: if y < x: x, y = y, x results.append(sum_primes_in_range(x, y, primes)) return results def sum_primes_queries(q, queries): Main function to process all the queries and return results return process_queries(queries)"},{"question":"A company has N employees and has decided to start a peer review process. Each employee will review another employee\'s work. However, an employee cannot review their own work and each employee can review exactly one other employee. Your task is to assign reviewers in a way that ensures every employee gets exactly one review and gives exactly one review. The company\'s organizational structure is represented as a directed graph, with N nodes and N-1 edges, such that there is exactly one path between any pair of nodes (a tree structure). Each node represents an employee and each directed edge from node i to node j represents that employee i is the manager of employee j. For fairness, no employee should review their direct manager\'s work. You need to find a possible way to assign the reviewers and print out the result. The graph is given in the form of a list of edges. The first line contains a single integer N (2 ≤ N ≤ 100), the number of employees. The next N-1 lines each contain two integers u and v (1 ≤ u, v ≤ N), representing an edge between employee u and employee v. Output N lines, each containing two integers a and b (1 ≤ a, b ≤ N), representing that employee a will review the work of employee b. If there are multiple valid solutions, print any of them. Assume that there is always at least one valid solution.","solution":"from collections import defaultdict, deque import random def assign_reviewers(N, edges): # Construct the adjacency list adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) # Find the managers using BFS (or DFS) managers = {1: None} # Use 1 as the root, assuming 1 always exists queue = deque([1]) while queue: node = queue.popleft() for neighbor in adj_list[node]: if neighbor not in managers: managers[neighbor] = node queue.append(neighbor) # Construct a non-manager list (excludes direct reports) non_manager_list = {i: [] for i in range(1, N+1)} for i in range(1, N+1): for j in range(1, N+1): if i != j and managers.get(j) != i and managers.get(i) != j: non_manager_list[i].append(j) # Randomly assign reviewers ensuring no self assignment and valid assignment reviewers = [None] * (N+1) for i in range(1, N+1): for choice in non_manager_list[i]: if reviewers[choice] is None and (managers[choice] != i): reviewers[choice] = i break return [(i, reviewers[i]) for i in range(1, N+1)]"},{"question":"You are given an integer t representing the number of test cases. For each test case, you are given an integer k and a list of k integers. You need to determine the minimum number of operations needed to make the entire list contain only the integer 1. In one operation, you can choose any two distinct indices i and j (1 ≤ i, j ≤ k) and set either: - `list[i] = list[i] * list[j]` - `list[j] = list[j] * list[i]` The first line of input contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next lines describes a test case as follows: - The first line of each test case contains an integer k (1 ≤ k ≤ 100) — the number of elements in the list. - The second line of each test case contains k space-separated integers, representing the list. Output t lines. On the i-th line, output the minimum number of operations needed for the i-th test case to make all elements of the list equal to 1. If it is impossible, output -1 for that test case. Example: Input: ``` 2 3 2 3 6 2 1 1 ``` Output: ``` -1 0 ```","solution":"def min_operations_to_ones(test_cases): results = [] for case in test_cases: k, lst = case # If all elements are already 1, no operations are needed if all(x == 1 for x in lst): results.append(0) continue # If there\'s at least one zero in the list, it\'s impossible if any(x == 0 for x in lst): results.append(-1) continue # Check if there are any 1s already count_of_ones = lst.count(1) if count_of_ones > 0: # If there is at least one \'1\' it makes transformation easier results.append(k - count_of_ones) else: # Other than 1, it\'s basically impossible to turn non-1 elements to 1 results.append(-1) return results"},{"question":"You are given a string s of length n consisting of lowercase English letters, and q queries. Each query is represented by two integers l_i and r_i. For each query, you need to find the longest palindrome that can be formed by rearranging the letters of the substring from index l_i to index r_i of s. For example, if s = \\"abcbad\\", then for query (l_i = 1, r_i = 6) the substring is \\"abcbad\\" and the longest palindrome that can be formed is \\"abcdcba\\" (or any valid permutation like \\"acbdcba\\"). For query (l_i = 2, r_i = 4) the substring is \\"bcb\\" and the longest palindrome that can be formed is \\"bcb\\". If no palindrome can be formed, print 0. The first line contains one integer n (1 le n le 10^5). The second line contains the string s of length n consisting of lowercase English letters. The third line contains one integer q (1 le q le 10^5). Then q lines follow, each containing two integers l_i and r_i representing i-th query (1 le l_i le r_i le n). Answer the queries as follows: For each query, print the length of the longest palindrome that can be formed by rearranging the letters of the specified substring. If no palindrome can be formed, print 0.","solution":"from collections import Counter def longest_palindrome_length(s, queries): Computes the length of the longest palindrome that can be formed by rearranging the letters of the specified substring for each query. Args: s (str): The input string. queries (list of tuple): A list of tuples, where each tuple contains two integers representing l and r for the query. Returns: list of int: The lengths of the longest palindromes for each query. results = [] for l, r in queries: substring = s[l-1:r] counter = Counter(substring) length = 0 odd_found = False for count in counter.values(): if count % 2 == 0: length += count else: length += count - 1 odd_found = True if odd_found: length += 1 # Adding one center character for palindrome results.append(length) return results"},{"question":"In a galaxy far, far away, a rebel named Lea is trying to communicate with her team members on different planets. She uses a special communication device that sends messages to the team members. The device operates on a sequence of unique prime numbers to encrypt the messages. Lea wants to find out the K-th prime number in a sequence. Being a skilled programmer, you need to generate the sequence of prime numbers and determine the K-th prime number. # Input The input consists of a single integer K (1 ≤ K ≤ 10^6). # Output Output the K-th prime number in the sequence. # Example ``` Input: 5 Output: 11 ``` # Explanation The sequence of prime numbers starts as 2, 3, 5, 7, 11, ... . The fifth prime number is 11. To solve this problem, you need to generate the sequence of prime numbers up to at least the K-th prime and then output the K-th element from this sequence. Consider the efficiency of your algorithm when dealing with large values of K.","solution":"def sieve_of_eratosthenes(max_num): Generate all prime numbers up to max_num using the Sieve of Eratosthenes. is_prime = [True] * (max_num + 1) p = 2 while p * p <= max_num: if is_prime[p] == True: for i in range(p * p, max_num + 1, p): is_prime[i] = False p += 1 primes = [] for p in range(2, max_num + 1): if is_prime[p]: primes.append(p) return primes def kth_prime(k): Returns the k-th prime number. if k < 1 or k > 10**6: raise ValueError(\\"K must be between 1 and 10^6 inclusive\\") # Estimate upper bound for the k-th prime using the approximation k * log(k) + k * log(log(k)) # Use some margin to ensure the upper bound is sufficient if k < 6: upper_bound = 15 # for small k values else: from math import log upper_bound = int(k * log(k) + k * log(log(k))) primes = sieve_of_eratosthenes(upper_bound) return primes[k-1]"},{"question":"In a faraway kingdom, there is a valley that is famous for its magical properties. The valley has n hills arranged in a row. Each hill has a certain height given by an array h of length n. The magic of the valley works in such a way that you can periodically see a beautiful sunrise that illuminates the hills and creates a spectacle of beauty. However, the valley is also known for its mist which intermittently covers some of the hills. Specifically, on a given day, there might be a continuous range of hills that are engulfed in mist, thus making them temporarily disappear from sight. You are tasked with identifying the best day for tourists to visit the valley. The best day is defined as the day with the maximum width of the visible hills, which is the most significant continuous range of hills that are not engulfed in mist. You are given multiple possible mist ranges for different days, and your goal is to find out the maximum width of the visible hills for each day. # Input - The first line contains an integer n (1 le n le 10^5) — the number of hills. - The second line contains an array h of length n, where 1 leq h[i] leq 10^9 — the height of each hill. - The third line contains an integer q (1 le q le 10^5) — the number of days with different mist ranges. - The next q lines contain two integers each l and r (1 le l le r le n) — the range of hills engulfed in mist on that day. For simplicity, we consider hill indices to start from 1 when referring to the ranges l and r. # Output Output an integer for each day — the maximum width of the visible hills for that day. # Example Input ``` 10 5 3 8 6 7 2 4 9 1 10 3 2 4 6 8 1 5 ``` Output ``` 6 5 5 ``` # Explanation - On the first day, hills from index 2 to 4 are engulfed in mist. The maximum continuous visible range is from index 1 to index 10 excluding hills in range [2, 4]. This can be split into two ranges: [1, 1] (width 1) and [5, 10] (width 6). So the answer for the first day is 6. - On the second day, hills from index 6 to 8 are engulfed in mist. The maximum continuous visible range is from index 1 to index 10 excluding hills in range [6, 8]. This can be split into two ranges: [1, 5] (width 5) and [9, 10] (width 2). So the answer for the second day is 5. - On the third day, hills from index 1 to 5 are engulfed in mist. The maximum continuous visible range is from index 1 to 10 excluding hills in range [1, 5]. This can be one single range: [6, 10] (width 5). So the answer for the third day is 5.","solution":"def max_visible_range(n, h, q, queries): results = [] for l, r in queries: # Find the maximum of the visible segments max_visible = 0 if l > 1: max_visible = max(max_visible, l - 1) if r < n: max_visible = max(max_visible, n - r) results.append(max_visible) return results"},{"question":"Anna is working on a large dataset that is continuously being updated. She wants to compile daily summaries of this dataset. Each summary takes a certain amount of time to generate, and the time it takes increases linearly as the dataset grows. She has access to a computing method that can optimize summary generation by pre-processing the dataset for some days before starting to generate the summaries. The optimization decreases the time required to generate each summary, but the pre-processing itself takes some time. The time to generate a summary without any pre-processing on day i is 2 times i minutes. If Anna pre-processes the dataset for p days (where p is a non-negative integer), the time to generate each summary will reduce to i + 1 + p minutes. The total time spent is the sum of pre-processing days and the total time taken to generate each summary until the deadline. She needs to ensure that this total time doesn\'t exceed the given deadline. Will Anna be able to compile the daily summaries within the given total time? The first line contains a single integer T (1 le T le 100) — the number of test cases. The next T lines contain test cases – one per line. Each line contains two integers d and t (1 le d le 10^5, 1 le t le 10^9) — the number of days until the deadline and the total time available. Print T answers — one per test case. For each test case, print YES if Anna can complete the daily summaries within the given total time, or NO otherwise. In test case 1, without pre-processing, the total time would be: 2 times 1 + 2 times 2 + 2 times 3 = 12 minutes, which is greater than the available time of 10 minutes. In test case 2, with pre-processing of 1 day, the total time would be: 1 + (2 + 1 + 1) + (2 + 2 + 1) = 9 minutes. In test case 3, regardless of pre-processing, Anna can\'t meet the deadline of 1 minute per day, as the initial computation itself without pre-processing exceeds the limit.","solution":"def can_compile_daily_summaries(T, test_cases): results = [] for d, t in test_cases: if 2 * d * (d + 1) // 2 <= t: results.append(\\"YES\\") else: results.append(\\"NO\\") return results def main(): import sys input = sys.stdin.read data = input().strip().split() T = int(data[0]) test_cases = [(int(data[2 * i + 1]), int(data[2 * i + 2])) for i in range(T)] results = can_compile_daily_summaries(T, test_cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"You are given an array of n integers, where each integer represents the amount of time it takes to complete a particular task. You need to distribute these tasks between two workers such that the time taken to complete all the tasks is minimized. Each worker can work on multiple tasks sequentially, but a task cannot be divided between the workers. Write a function that takes the array of task times as input and returns the minimum time required to complete all tasks when the tasks are optimally distributed between the two workers. The first line contains an integer n (1 ≤ n ≤ 1000) — the number of tasks. The second line contains n integers separated by spaces, where each integer ti (1 ≤ ti ≤ 1000) represents the time required to complete the ith task. Output the minimum time required to complete all tasks when distributed optimally between the two workers. Function signature: `def min_completion_time(tasks: List[int]) -> int:` Example: ``` Input: 5 2 3 5 7 10 Output: 14 ```","solution":"from typing import List def min_completion_time(tasks: List[int]) -> int: total_time = sum(tasks) half_time = total_time // 2 n = len(tasks) # Using Knapsack DP approach to partition tasks dp = [0] * (half_time + 1) for task in tasks: for t in range(half_time, task - 1, -1): dp[t] = max(dp[t], dp[t - task] + task) best_partition = dp[half_time] return max(best_partition, total_time - best_partition)"},{"question":"At a village festival, a unique game of treasure hunting is played. The game is set in a rectangular grid where some of the cells contain treasures and others are empty. The objective for each player is to collect the maximum number of treasures by moving through the grid. Players can move up, down, left, or right, but they cannot visit the same cell more than once. You are given the dimensions of the grid `m` and `n`, where `m` is the number of rows and `n` is the number of columns. Additionally, you are given a list of coordinates where the treasures are found. Write a program to determine the maximum number of treasures a player can collect starting from the top-left corner (0,0) and moving towards the bottom-right corner (m-1,n-1). If there are no treasures, the maximum number of treasures collected is 0. **Input:** - The first line contains two integers `m` and `n` (1 ≤ m, n ≤ 1000) representing the number of rows and columns in the grid. - The second line contains an integer `k` (0 ≤ k ≤ m*n), the number of treasures. - The next `k` lines each contain two integers `x` and `y` (0 ≤ x < m, 0 ≤ y < n), the coordinates where a treasure is located. **Output:** - Output a single integer, the maximum number of treasures that can be collected. **Example:** **Input:** ``` 4 4 4 0 1 1 2 2 1 3 3 ``` **Output:** ``` 4 ``` **Explanation:** Starting from (0,0), one possible path to collect all the treasures is: - Move to (0,1) (1st treasure) - Move to (1,1) - Move to (1,2) (2nd treasure) - Move to (2,2) - Move to (2,1) (3rd treasure) - Move down to (3,1) - Move right to (3,2) - Move right to (3,3) (4th treasure) Despite different possible paths, the optimal path ensures the collection of all 4 treasures, resulting in the maximum number of treasures collected which is 4.","solution":"def max_treasures(m, n, k, treasures): from collections import deque if k == 0: return 0 # initialize the grid grid = [[0] * n for _ in range(m)] for x, y in treasures: grid[x][y] = 1 # directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def is_valid(x, y): return 0 <= x < m and 0 <= y < n def bfs(): max_treasures_found = 0 queue = deque([(0, 0, 0, set([(0, 0)]))]) # (x, y, treasures_collected, visited) while queue: x, y, treasures_collected, visited = queue.popleft() if grid[x][y] == 1: treasures_collected += 1 max_treasures_found = max(max_treasures_found, treasures_collected) for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: new_visited = visited | {(nx, ny)} queue.append((nx, ny, treasures_collected, new_visited)) return max_treasures_found return bfs()"},{"question":"Sheldon is trying to develop a new numbering system for his scientific experiments. He came up with the idea of a sequential naming scheme where an experiment name consists of the prefix \\"EXP\\" followed by a series of zero-padded digits. For example, the first experiment can be \\"EXP001\\", the second \\"EXP002\\", and so on. However, instead of manually generating these names, Sheldon wants to write a program to automate this task. The program should accept a non-negative integer n (0 ≤ n ≤ 999), which represents the number of the current experiment, and output the corresponding experiment name according to his naming scheme. The first line of the input contains an integer n, the current experiment number. Print a string representing the experiment name in Sheldon\'s preferred format. Example Input: 7 Example Output: EXP007","solution":"def generate_experiment_name(n): Generate a sequential experiment name with the format \\"EXP#\\" where n is a 0-padded number. Parameters: n (int): The number of the current experiment (0 ≤ n ≤ 999). Returns: str: The formatted experiment name. return f\\"EXP{n:03}\\""},{"question":"You are given an array of n integers. In one operation, you can choose any non-empty subarray and perform the following steps: - Calculate the sum of the subarray. - Replace each element of the subarray by this sum. What is the minimum possible sum of the array after performing any number of operations? The first line of the input contains a single integer n (1 ≤ n ≤ 50) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the array. Output a single integer — the minimum possible sum of the array after performing any sequence of operations.","solution":"def minimum_sum(arr): Returns the minimum possible sum of the array after performing any number of operations. return sum(arr)"},{"question":"Write a function `merge_and_sort_dicts` that takes two dictionaries as input. Both dictionaries contain strings as keys and integers as values. The function should merge the dictionaries and return a new dictionary where each key maps to the sum of its values from the two input dictionaries. In case a key is present in only one dictionary, take its value as it is. Once merged, sort the dictionary by its values in descending order. If two keys have the same value, sort those keys alphabetically. **Function Signature:** ```python def merge_and_sort_dicts(dict1: Dict[str, int], dict2: Dict[str, int]) -> Dict[str, int]: pass ``` # Input - `dict1`: A dictionary with string keys and integer values. - `dict2`: A dictionary with string keys and integer values. # Output - A single dictionary where each key maps to the sum of its values from the input dictionaries, sorted by values in descending order then by keys alphabetically if values are the same. # Examples ```python assert merge_and_sort_dicts({\\"a\\": 10, \\"b\\": 15}, {\\"b\\": 5, \\"c\\": 7}) == {\\"a\\": 10, \\"b\\": 20, \\"c\\": 7} assert merge_and_sort_dicts({\\"x\\": 1, \\"y\\": 2}, {\\"x\\": 2, \\"z\\": 3}) == {\\"z\\": 3, \\"y\\": 2, \\"x\\": 3} assert merge_and_sort_dicts({}, {\\"a\\": 1}) == {\\"a\\": 1} assert merge_and_sort_dicts({\\"a\\": 5}, {}) == {\\"a\\": 5} ``` # Notes - Use Python\'s built-in `sorted()` function for sorting. - Assume that all keys in the input dictionaries are unique within each dictionary.","solution":"def merge_and_sort_dicts(dict1, dict2): Merges two dictionaries and returns a sorted dictionary by values in descending order. If values are equal, sorts the keys alphabetically. merged_dict = {} # Merge dictionaries for key in dict1: if key in dict2: merged_dict[key] = dict1[key] + dict2[key] else: merged_dict[key] = dict1[key] for key in dict2: if key not in merged_dict: merged_dict[key] = dict2[key] # Sort the dictionary by values (descending) and keys (alphabetically) if values are the same sorted_dict = dict(sorted(merged_dict.items(), key=lambda item: (-item[1], item[0]))) return sorted_dict"},{"question":"You are given an array of integers a of length n. You must determine the maximum sum of a subarray consisting of exactly k elements. The first line contains two integers n and k (1 le k le n le 10^5). The second line contains n integers a_1, a_2, ldots, a_n (-10^4 le a_i le 10^4). Output a single integer — the maximum sum of a subarray of length k.","solution":"def max_sum_subarray_k_elements(n, k, array): Returns the maximum sum of a subarray of length k. # Initialize the sum of the first \'k\' elements current_sum = max_sum = sum(array[:k]) # Use the sliding window technique to find the maximum sum of k elements for i in range(k, n): current_sum += array[i] - array[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Alice is learning about balanced parentheses in her data structures course. She has opened brackets, closed brackets, and must ensure each bracket is properly closed in the correct order for a sequence to be valid. Given a string consisting of only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', determine if the input string is a valid sequence of brackets. A sequence of brackets is considered valid if: 1. It is an empty string or it contains parentheses that are correctly matched and nested. 2. Every open bracket has a corresponding close bracket of the same type. 3. Open brackets must be closed in the correct order. For example: - The string \\"()\\" is valid. - The string \\"({[]})\\" is valid. - The string \\"{[()()]}\\" is valid. - The string \\"({[)})\\" is invalid. Your task is to implement a function that checks the validity of a given sequence of brackets. **Input**: A single line string containing the sequence of brackets (2 <= length <= 10^5). **Output**: Print \\"YES\\" if the sequence is valid, otherwise print \\"NO\\". **Function Signature**: ```python def is_valid_brackets(sequence: str) -> str: ``` **Examples**: ```python print(is_valid_brackets(\\"()\\")) # Output: \\"YES\\" print(is_valid_brackets(\\"({[]})\\")) # Output: \\"YES\\" print(is_valid_brackets(\\"{[()()]}\\")) # Output: \\"YES\\" print(is_valid_brackets(\\"({[)})\\")) # Output: \\"NO\\" ``` Implement the `is_valid_brackets` function. Demonstrate your solution using the examples given.","solution":"def is_valid_brackets(sequence: str) -> str: Determines if the input sequence of brackets is valid. :param sequence: A string containing the sequence of brackets. :return: \\"YES\\" if the sequence is valid, otherwise \\"NO\\" # Stack to keep track of the opening brackets stack = [] # Dictionary to match opening and closing brackets bracket_map = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in sequence: if char in bracket_map: # Pop the topmost element from the stack if it is not empty, otherwise use a dummy value top_element = stack.pop() if stack else \'#\' # Check if the popped element matches the mapping for the current closing bracket if bracket_map[char] != top_element: return \\"NO\\" else: # It is an opening bracket, push onto the stack stack.append(char) # If the stack is empty, all opening brackets were matched return \\"YES\\" if not stack else \\"NO\\""},{"question":"A treasure hunter is exploring an ancient cave and comes across a collection of magical stones. Each stone is characterized by its magical power, which is an integer. The hunter can carry as many stones as he can fit into his bag, which has a maximum capacity of c. The cave can contain any number of stones, and their collective magical power might be as high as a significant value. The hunter wants to maximize the total magical power of the stones he can carry without exceeding the capacity of his bag. Write a program that, given the list of magical powers of the stones and the maximum capacity of the bag, determines the maximum possible total magical power that can be carried. The first line contains two integers n (1 le n le 100000) — the number of stones, and c (1 le c le 1000000) — the maximum capacity of the hunter\'s bag. The next line contains n integers m_1, m_2, dots, m_n, where m_i (1 le m_i le 1000000) is the magical power of the i-th stone. Print a single integer — the maximum possible total magical power the hunter can carry without exceeding the bag\'s capacity. Example: Input: ``` 5 10 1 3 4 5 6 ``` Output: ``` 10 ``` Explanation: The hunter can choose stones with magical powers 4 and 6, which sum up to 10, the maximum capacity of the bag.","solution":"def knapsack(n, c, powers): dp = [0] * (c + 1) for power in powers: for j in range(c, power - 1, -1): dp[j] = max(dp[j], dp[j - power] + power) return dp[c] # Example usage: # n, c = 5, 10 # powers = [1, 3, 4, 5, 6] # print(knapsack(n, c, powers)) # Output: 10"},{"question":"The city of Algorithmia has a peculiar traffic system controlled by traffic lights. You are tasked with simulating one of the main intersecting roads\' light systems. There are two one-way roads: Road A and Road B. Road A allows traffic to flow north to south, while Road B allows traffic to flow west to east. Each road has a traffic light that can be either green or red. When one road has a green light, the other road has a red light, and vice versa. The system follows a specific pattern: it starts with Road A having a green light for a period of T1 seconds and then turns red while Road B turns green for a period of T2 seconds. This cycle repeats indefinitely. Your task is to simulate the traffic light system and determine the color of the light for a given road at a specific second after the system starts. You need to implement a function `traffic_light(T1, T2, road, second)` that accepts four parameters: - `T1` (1 ≤ T1 ≤ 100): the duration for the green light on Road A in seconds. - `T2` (1 ≤ T2 ≤ 100): the duration for the green light on Road B in seconds. - `road` (a single character \'A\' or \'B\'): the road identifier (Road A or B). - `second` (1 ≤ second ≤ 10000): the second at which you need to determine the light color. The function should return a string \\"green\\" if the light is green on the specified road at that second, and \\"red\\" if it is red. # Example ```python print(traffic_light(5, 7, \'A\', 3)) # Output: \\"green\\" print(traffic_light(5, 7, \'B\', 3)) # Output: \\"red\\" print(traffic_light(5, 7, \'A\', 6)) # Output: \\"red\\" print(traffic_light(5, 7, \'B\', 12)) # Output: \\"green\\" ``` # Explanation In the first example, Road A has a green light for the first 5 seconds, starting from 0 to 5. Since 3 is within this period, the light is green for Road A. Road B, on the contrary, has a red light during this period. In the second example, Road B has a red light when Road A is green from 0 to 5 seconds. Therefore, at the 3rd second, Road B has a red light. In the third example, at 6 seconds, the green light switches to Road B and Road A turns red, thus Road A has a red light. In the fourth example, at the 12th second, the light for Road B, which runs from 5th to 12th second (T2 = 7 seconds), turns green, thus showing green for Road B.","solution":"def traffic_light(T1, T2, road, second): Determines the color of the traffic light for a given road at a specific second after the system starts. Parameters: T1 (int): Duration for the green light on Road A. T2 (int): Duration for the green light on Road B. road (str): Road identifier (\'A\' or \'B\'). second (int): The second at which to check the light color. Returns: str: \\"green\\" if the light is green, \\"red\\" otherwise. cycle_length = T1 + T2 second_in_cycle = (second - 1) % cycle_length if road == \'A\': if second_in_cycle < T1: return \\"green\\" else: return \\"red\\" elif road == \'B\': if second_in_cycle < T1: return \\"red\\" else: return \\"green\\" # Example usage #print(traffic_light(5, 7, \'A\', 3)) # Output: \\"green\\" #print(traffic_light(5, 7, \'B\', 3)) # Output: \\"red\\" #print(traffic_light(5, 7, \'A\', 6)) # Output: \\"red\\" #print(traffic_light(5, 7, \'B\', 12)) # Output: \\"green\\""},{"question":"Given an array of n integers, find the maximum product that can be obtained from any three elements of the array. The first line contains a single integer n (3 ≤ n ≤ 10^5), the number of integers in the array. The second line contains n space-separated integers a1, a2, ..., an (−10^3 ≤ ai ≤ 10^3). Print the maximum product of any three elements of the array.","solution":"def maximum_product_of_three(nums): Returns the maximum product that can be obtained from any three elements of the array. nums.sort() return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"You are given an array of integers representing a large dataset. Your goal is to identify and remove the first occurrence of the minimal integer in the array. After removing the minimal integer, you should output the modified array. # Input - The input consists of a single line which contains space-separated integers a_1, a_2, ..., a_n (1 le n le 10^5, -10^6 le a_i le 10^6), representing the elements of the array. # Output - Output the modified array as a single line of space-separated integers after removing the first occurrence of the minimal integer. - If the array is empty after removing the element, output \\"EMPTY\\". # Examples **Input** ``` 3 4 2 5 2 1 3 ``` **Output** ``` 3 4 2 5 2 3 ``` **Input** ``` 1 2 3 4 1 5 6 ``` **Output** ``` 2 3 4 1 5 6 ``` **Input** ``` 7 ``` **Output** ``` EMPTY ``` # Notes - The minimal integer is the smallest number in the array. - Ensure to remove only the first occurrence of this minimal integer. - The constraints ensure that there is at least one integer in the input.","solution":"def remove_first_minimal(arr): Given a list of integers, remove the first occurrence of the minimal integer. If the list is empty after removal, return \\"EMPTY\\". if not arr: return \\"EMPTY\\" min_val = min(arr) arr.remove(min_val) return \\"EMPTY\\" if not arr else \\" \\".join(map(str, arr))"},{"question":"Создайте веб-приложение для управления задачами. Приложение должно позволять пользователям добавлять, удалять и обновлять задачи, а также отмечать их как завершенные. Макет: https://www.sketch.com/s/d4991cfa-d2a3-4c23-b518-b02f8e8bbf3d, архив: https://www.dropbox.com/s/a9887b6a3c7k8e0/Task%20Manager%20App%20UI.zip?dl=0. Обратите внимание, что после авторизации доступен режим Inspector. Поддержите: Мы будем оценивать выполнение задания по следующим критериям: Web:","solution":"from flask import Flask, request, jsonify app = Flask(__name__) tasks = [] @app.route(\'/tasks\', methods=[\'GET\']) def get_tasks(): return jsonify(tasks) @app.route(\'/tasks\', methods=[\'POST\']) def add_task(): new_task = request.json if \'id\' not in new_task or \'title\' not in new_task: return jsonify({\'error\': \'Invalid data\'}), 400 tasks.append(new_task) return jsonify(new_task), 201 @app.route(\'/tasks/<int:task_id>\', methods=[\'PUT\']) def update_task(task_id): updated_task = request.json for task in tasks: if task[\'id\'] == task_id: task.update(updated_task) return jsonify(task) return jsonify({\'error\': \'Task not found\'}), 404 @app.route(\'/tasks/<int:task_id>\', methods=[\'DELETE\']) def delete_task(task_id): global tasks tasks = [task for task in tasks if task[\'id\'] != task_id] return jsonify({\'result\': \'Task deleted\'}) @app.route(\'/tasks/<int:task_id>/complete\', methods=[\'PUT\']) def complete_task(task_id): for task in tasks: if task[\'id\'] == task_id: task[\'completed\'] = True return jsonify(task) return jsonify({\'error\': \'Task not found\'}), 404 if __name__ == \'__main__\': app.run(debug=True)"},{"question":"You have an array of integers and you want to partition this array into two subsequences such that the sum of the elements in both subsequences is equal. Your task is to find a way to do this partition, if possible. If there are multiple ways, any solution is acceptable. The input consists of a single line containing space-separated integers. Print two lines: the first line should contain the indices of the elements in the first subsequence, and the second line should contain the indices of the elements in the second subsequence. Indices should be 1-based. If it is not possible to split the array into two equal-sum subsequences, print a single line with the word \\"impossible\\". # Constraints: - The number of elements in the array is between 1 and 20. - Each element of the array is a non-negative integer not exceeding 1000. # Example: Input: ``` 3 1 2 2 3 ``` Output: ``` 1 4 5 2 3 ``` # Explanation: In the example above: - The first subsequence is [3, 2, 3] which corresponds to indices [1, 4, 5]. - The second subsequence is [1, 2] which corresponds to indices [2, 3]. - Both subsequences have the sum of 8. - Other valid answers could also exist.","solution":"from itertools import combinations def find_partition(arr): total_sum = sum(arr) # If total sum is odd, it\'s impossible to split into two equal parts if total_sum % 2 != 0: print(\\"impossible\\") return target = total_sum // 2 n = len(arr) indices = list(range(1, n + 1)) for r in range(1, n): for subset_indices in combinations(indices, r): subset_sum = sum(arr[i - 1] for i in subset_indices) if subset_sum == target: print(\\" \\".join(map(str, subset_indices))) remaining_indices = set(indices) - set(subset_indices) print(\\" \\".join(map(str, remaining_indices))) return print(\\"impossible\\")"},{"question":"Celine has a job as a warehouse organizer. She has n items stored in a row, each with a certain weight. The items need to be grouped into the minimal number of contiguous subsequences such that the total weight of each subsequence does not exceed a given maximum weight limit, w. Your task is to help Celine find the minimal number of contiguous subsequences required to reorganize the items under the given weight constraint. The first line contains two integers n (1 ≤ n ≤ 100) and w (1 ≤ w ≤ 1000) — the number of items and the maximum weight limit, respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ w) — the weights of the items. Output a single integer — the minimal number of contiguous subsequences required. For example: For the input: 5 10 2 3 7 2 5 Celine can organize the items into 3 subsequences: - The first subsequence contains items with weights 2 and 3. - The second subsequence contains items with weight 7. - The third subsequence contains items with weights 2 and 5. In this way, the weight of each subsequence does not exceed 10. The output in this case would be 3.","solution":"def minimal_subsequences(n, w, weights): subsequences = 0 current_weight = 0 for weight in weights: if current_weight + weight <= w: current_weight += weight else: subsequences += 1 current_weight = weight return subsequences + 1"},{"question":"You are given an array of n integers and a sequence of q queries. Each query contains two integers l and r (1 ≤ l ≤ r ≤ n). For each query, you need to calculate the sum of the array elements from index l to index r (inclusive). Given the array size and the number of queries could be large, consider optimizing the solution for better performance in handling multiple queries. The first line of the input contains two space-separated integers n and q (1 ≤ n, q ≤ 10^5) – the number of elements in the array and the number of queries. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) – the elements of the array. Each of the next q lines contains two space-separated integers l and r (1 ≤ l ≤ r ≤ n) – representing a query asking for the sum from index l to r. Print q lines, where each line contains the answer to the corresponding query. **Example:** Input: ``` 5 3 1 2 3 4 5 1 3 2 4 1 5 ``` Output: ``` 6 9 15 ``` **Explanation:** The array contains 5 elements: [1, 2, 3, 4, 5]. There are 3 queries: 1. The sum of elements from index 1 to 3 is 1 + 2 + 3 = 6. 2. The sum of elements from index 2 to 4 is 2 + 3 + 4 = 9. 3. The sum of elements from index 1 to 5 is 1 + 2 + 3 + 4 + 5 = 15.","solution":"def preprocess_array(arr): Preprocess the array to create a prefix sum array. prefix_sum = [0] * (len(arr) + 1) for i in range(1, len(arr) + 1): prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1] return prefix_sum def range_sum(query, prefix_sum): Compute the sum of the array elements from index l to r inclusive using the prefix sum array. l, r = query return prefix_sum[r] - prefix_sum[l - 1] def process_queries(n, q, arr, queries): Process all the queries and return the results as a list. prefix_sum = preprocess_array(arr) result = [] for query in queries: result.append(range_sum(query, prefix_sum)) return result"},{"question":"Given an array of integers `arr` and an integer `k`, implement a function that finds the total number of unique continuous subarrays whose sum is equal to `k`. # Input - An array `arr` consisting of `n` integers where `1 <= n <= 10^5` and each integer is in the range `[-10^4, 10^4]`. - An integer `k` where `-10^9 <= k <= 10^9`. # Output - A single integer representing the total number of unique continuous subarrays whose sum is equal to `k`. # Example Example 1: ```python arr = [1,1,1] k = 2 ``` Output: ```python 2 ``` Explanation: - The subarrays [1,1] at indices [0,1] and [1,2] have a sum equal to 2. Example 2: ```python arr = [1,2,3] k = 3 ``` Output: ```python 2 ``` Explanation: - The subarrays [1,2] at indices [0,1] and [3] at index [2] have a sum equal to 3. Example 3: ```python arr = [-1,-1,1] k = 0 ``` Output: ```python 1 ``` Explanation: - The subarray [-1,-1,1] at indices [0,2] has a sum equal to 0. # Constraints - Your solution must have a time complexity of O(n) to handle larger data efficiently. # Note - Consider utilizing a hashmap to track the cumulative sums and their occurrences while iterating through the array to optimize your solution. This will help in reducing the time complexity by avoiding the need for nested loops.","solution":"def count_subarrays_with_sum_k(arr, k): Returns the total number of unique continuous subarrays whose sum is equal to k. count = 0 cumulative_sum = 0 sum_dict = {0: 1} # Initialize with 0 sum having one count for num in arr: cumulative_sum += num if (cumulative_sum - k) in sum_dict: count += sum_dict[cumulative_sum - k] if cumulative_sum in sum_dict: sum_dict[cumulative_sum] += 1 else: sum_dict[cumulative_sum] = 1 return count"},{"question":"In a small town, a group of friends decided to create a social network platform specifically for their community. They organized all members of the community into groups and added them to various circles of friends. Each circle contains several members and each member can belong to multiple circles. These circles can be represented as a graph where each node is a member, and an edge exists between two nodes if those members belong to the same circle. The friends would like to determine the size of the largest connected component in this graph — that is, the maximum number of members who are all reachable from each other directly or indirectly through the circles. You are given a list of m circles, each containing a set of members. Your task is to find the size of the largest connected component in this network. **Input:** - The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 1000) — the number of members and the number of circles. - Each of the next m lines contains a positive integer ki (1 ≤ ki ≤ n) followed by ki integers — the identifiers of the members in the i-th circle. Each member identifier is an integer between 1 and n. **Output:** - Print a single integer — the size of the largest connected component. **Example:** ``` Input: 10 4 3 1 2 5 4 2 3 6 7 2 4 8 3 5 7 9 Output: 7 ``` In the example, the first component is `{1, 2, 3, 5, 6, 7, 9}`, the second component is `{4, 8}`, and the maximum size of the connected component is 7.","solution":"def find_largest_connected_component(n, m, circles): from collections import defaultdict, deque if m == 0: return 1 if n > 0 else 0 adjacency_list = defaultdict(list) for circle in circles: members = circle[1:] for i in range(len(members)): for j in range(i + 1, len(members)): adjacency_list[members[i]].append(members[j]) adjacency_list[members[j]].append(members[i]) visited = [False] * (n + 1) def bfs(start): queue = deque([start]) visited[start] = True size = 0 while queue: node = queue.popleft() size += 1 for neighbor in adjacency_list[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return size max_size = 0 for member in range(1, n + 1): if not visited[member]: component_size = bfs(member) max_size = max(max_size, component_size) return max_size"},{"question":"Given a sequence of integers, your task is to determine the length of the longest subsequence that contains no consecutive elements with the same value. For example, if the input is `[1, 2, 2, 3, 3, 3, 4]`, one possible longest subsequence with no consecutive elements of the same value is `[1, 2, 3, 4]`. The first line of the input contains an integer `t` (`1 ≤ t ≤ 100`) — the number of test cases. Each test case consists of two lines. The first line contains an integer `n` (`1 ≤ n ≤ 100`) — the length of the sequence. The second line contains `n` integers representing the sequence. For each test case, output a single line containing the length of the longest subsequence that contains no consecutive elements with the same value. # Example Input ``` 3 7 1 2 2 3 3 3 4 5 1 1 1 1 1 5 5 4 4 3 2 ``` Output ``` 4 1 4 ``` # Note In the first test case, one of the longest subsequences without consecutive values is `[1, 2, 3, 4]`, so the output is `4`. In the second test case, all elements are identical. The longest subsequence with no consecutive identical elements is of length `1`. In the third test case, a possible longest subsequence without consecutive values is `[5, 4, 3, 2]`, so the output is `4`.","solution":"def longest_nonconsecutive_subsequence(t, test_cases): results = [] for i in range(t): n, sequence = test_cases[i] if n == 1: results.append(1) continue count = 1 # The length of the longest subsequence, starting with the first element. for j in range(1, n): if sequence[j] != sequence[j - 1]: count += 1 results.append(count) return results"},{"question":"Milo the Reindeer loves eating special Christmas cookies. However, these cookies are magical and their quantities follow a unique rule. You are given an array of integers where each element represents a number of cookies in different boxes. The array was originally sorted in non-decreasing order, and then some elements were duplicated multiple times. You need to find the number of distinct integers in this array before the duplication happened, as well as the number of each distinct integer. The first line of input contains a single integer n (1 ≤ n ≤ 1000) – the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109) – the numbers of cookies in the boxes. Output distinct integers and their counts in the format: - The first line should contain a single integer m – the number of distinct integers. - The following m lines should contain two integers: the distinct integer and its count, ordered by the integers\' first occurrence in the array. # Example Input ``` 10 2 2 2 3 3 5 5 5 5 6 ``` Output ``` 4 2 3 3 2 5 4 6 1 ``` # Explanation In the example, the distinct integers in the array before duplication are [2, 3, 5, 6]. Their respective counts after duplication are 3, 2, 4, and 1. Therefore, the output specifies there are 4 distinct integers and lists each integer alongside its count.","solution":"def count_distinct_integers(arr): Returns the number of distinct integers and their respective counts in the input array. Parameters: arr (list of int): The list of integers representing the number of cookies in different boxes. Returns: (int, list of tuples): A tuple containing the number of distinct integers and a list of tuples where each tuple contains a distinct integer and its count. from collections import Counter # Count the occurrences of each number in the array counter = Counter(arr) # Extract distinct integers and their counts preserving the order of first occurrence distinct_integers = list(counter.items()) # Number of distinct integers m = len(distinct_integers) return (m, distinct_integers)"},{"question":"You are given a rectangular grid representing a city\'s layout. Each cell in the grid is either a building (\'B\') or an empty lot (\'E\'). We define a connected cluster of buildings as a group of \'B\' cells where each cell is adjacent to at least one other \'B\' cell in the cluster. Adjacent cells can be connected horizontally or vertically but not diagonally. Your task is to find the number of such connected clusters in the grid. # Input: - The first line contains two integers, `m` and `n` (1 ≤ m, n ≤ 100), the number of rows and columns in the grid respectively. - The next `m` lines each contain `n` characters (\'B\' or \'E\') representing each row of the grid. # Output: - Output a single integer representing the number of connected building clusters in the grid. # Examples: Example 1: Input: ``` 4 5 EBBEE EBBBE EBEEE EEEEE ``` Output: ``` 1 ``` Explanation: There is one connected cluster formed by the buildings in rows 1-2 and columns 2-5. Example 2: Input: ``` 3 3 BEB EEE BEB ``` Output: ``` 4 ``` Explanation: There are four connected building clusters: two single buildings and two individual buildings at the corners of the grid.","solution":"def num_clusters(grid): m = len(grid) n = len(grid[0]) def dfs(x, y): if x < 0 or y < 0 or x >= m or y >= n or grid[x][y] == \'E\': return # Mark the cell as visited grid[x][y] = \'E\' # Move in all four directions dfs(x + 1, y) dfs(x - 1, y) dfs(x, y + 1) dfs(x, y - 1) clusters = 0 for i in range(m): for j in range(n): if grid[i][j] == \'B\': clusters += 1 # Perform DFS to mark all connected buildings dfs(i, j) return clusters # Function to read the grid from given input format def read_grid_from_input(input_string): lines = input_string.strip().split(\'n\') m, n = map(int, lines[0].split()) grid = [list(line) for line in lines[1:]] return grid"},{"question":"Given a string consisting of lowercase latin letters, your task is to find the number of distinct non-empty substrings of this string. A substring is defined as any continuous piece of characters within the original string. **Input:** The input line contains a single string `s` (1 ≤ |s| ≤ 1000), where |s| is the length of the string. **Output:** Print a single integer — the number of distinct non-empty substrings of the given string. **Examples:** ``` Input: \\"ab\\" Output: 3 (The distinct non-empty substrings are \\"a\\", \\"b\\", \\"ab\\") Input: \\"aaa\\" Output: 3 (The distinct non-empty substrings are \\"a\\", \\"aa\\", \\"aaa\\") ```","solution":"def count_distinct_substrings(s): Returns the number of distinct non-empty substrings of the given string s. substrings = set() n = len(s) for i in range(n): for j in range(i + 1, n + 1): substrings.add(s[i:j]) return len(substrings)"},{"question":"In a given galaxy, there are n planets connected by n-1 two-way space highways. Each highway connects a pair of different planets. From any planet, you can travel to any other by taking some combination of space highways. The planets are numbered from 1 to n. Each planet has a certain level of resources, represented by an integer r_i. This level may differ from planet to planet. There is a space traveler named Nova who needs to travel along a specific route to maximize his resource collection. The route must allow Nova to travel from a starting planet u to a final planet v, collecting resources from each planet visited along the path. However, the constraints of the intergalactic law require that Nova travels only along the direct highways without repeating any planet, i.e., Nova must travel along a simple path. Given the resource levels of the planets and the connections between them, you need to determine the maximum resources Nova can collect along any path following these constraints. The first line contains an integer t (1 le t le 10^5) — the number of test cases to solve. The following are the cases. Each case begins with a line containing an integer n (2 le n le 2 cdot 10^5) — the number of planets in the galaxy. The following line contains n integers r_1, r_2, dots, r_n (1 le r_i le 10^6), where r_i denotes the resource level at the i-th planet. Then, for the next n-1 lines, the connections of the space highways are provided. Each highway is given by a line containing two integers x_j, y_j (1 le x_j, y_j le n) — the numbers of planets that are connected by the j-th highway. It is guaranteed that from every planet you can travel to any other planet by highway (the system of planets and highways forms an undirected tree). The sum of all n values for all cases in one test does not exceed 2 cdot 10^5. Print the answers to all cases in the order of their appearance in the input data. Each answer must be a single integer — the maximum resources that Nova can collect from any planet along the most resourceful path.","solution":"from collections import defaultdict, deque def max_resources(t, test_cases): results = [] def bfs_max_resources(n, resources, adj): # Initialize distances from a random node (node 1) with resource sum (using BFS) dist = [-1] * (n + 1) dist[1] = resources[0] queue = deque([1]) max_resource = resources[0] while queue: u = queue.popleft() for v in adj[u]: if dist[v] == -1: dist[v] = dist[u] + resources[v - 1] max_resource = max(max_resource, dist[v]) queue.append(v) # Start second BFS from the farthest node found in the first BFS furthest_node = dist.index(max(dist)) dist = [-1] * (n + 1) dist[furthest_node] = resources[furthest_node - 1] queue = deque([furthest_node]) max_resource = resources[furthest_node - 1] while queue: u = queue.popleft() for v in adj[u]: if dist[v] == -1: dist[v] = dist[u] + resources[v - 1] max_resource = max(max_resource, dist[v]) queue.append(v) return max_resource for case in test_cases: n = case[\'n\'] resources = case[\'resources\'] adj = defaultdict(list) for x, y in case[\'connections\']: adj[x].append(y) adj[y].append(x) results.append(bfs_max_resources(n, resources, adj)) return results"},{"question":"You are given a sequence of \'n\' integers that represents the arrival and departure times of trains at a railway station. For each train, its arrival and departure time is denoted by a pair (arrival, departure). The goal is to find the minimum number of platforms required so that no train has to wait. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of pairs. The next n lines each contains two space-separated integers — the arrival and departure times of a train. The times are in the range from 0 to 2359. Output Print the minimum number of platforms required so that no train has to wait. Example Input: 3 900 910 940 1200 950 1100 Output: 2 Explanation: There are 3 trains at the station. - First train arrives at 900 and departs at 910. - Second train arrives at 940 and departs at 1200. - Third train arrives at 950 and departs at 1100. To accommodate these trains without having any wait, the minimum number of platforms required is 2.","solution":"def min_platforms_required(n, schedule): Returns the minimum number of platforms required at the railway station such that no train has to wait. Args: n (int): The number of trains. schedule (list): List of tuples where each tuple contains two integers (arrival, departure) time of each train. Returns: int: The minimum number of platforms required. if n == 0: return 0 # Separate the arrival and departure times arrivals = sorted([train[0] for train in schedule]) departures = sorted([train[1] for train in schedule]) platform_needed = 0 max_platforms = 0 i = 0 j = 0 while i < n and j < n: if arrivals[i] <= departures[j]: platform_needed += 1 i += 1 if platform_needed > max_platforms: max_platforms = platform_needed else: platform_needed -= 1 j += 1 return max_platforms"},{"question":"Bob loves playing with strings and numbers. Given a string `s` and an integer `m`, Bob wants to determine if it is possible to form a number by removing exactly one character from the string `s` such that the resulting number is divisible by `m`. The string `s` is composed of digits (\'0\'-\'9\') only and has a length between 2 and 100 inclusive. The integer `m` (1 ≤ m ≤ 10^6) is a positive integer. If it is possible to form such a number, print \\"YES\\", otherwise print \\"NO\\".","solution":"def can_form_divisible_number(s, m): Determines if it is possible to form a number by removing exactly one character from the string s such that the resulting number is divisible by m. Parameters: s (str): The original string of digits. m (int): The divisor. Returns: str: \\"YES\\" if it is possible, \\"NO\\" otherwise. for i in range(len(s)): new_number_str = s[:i] + s[i+1:] new_number = int(new_number_str) if new_number % m == 0: return \\"YES\\" return \\"NO\\""},{"question":"You are given an array of integers where each element is in the range [1, n]. Your task is to find all the integers from 1 to n that do not appear in the array. Write a function that receives an integer array `nums` and returns a list of integers that contains all the numbers from 1 to `n` which are not present in `nums`. # Input - An array of integers `nums` where 1 ≤ nums[i] ≤ n (n is the length of `nums`). # Output - A list of integers that contains all the numbers from 1 to `n` which are not present in `nums`. # Example ```python def findDisappearedNumbers(nums): # implementation here # Example 1 nums = [4,3,2,7,8,2,3,1] print(findDisappearedNumbers(nums)) # Output: [5, 6] # Example 2 nums = [1,1] print(findDisappearedNumbers(nums)) # Output: [2] ``` # Constraints - The length of the array is in the range [1, 100,000]. - All elements of the array are in the range [1, n].","solution":"def findDisappearedNumbers(nums): Finds all the numbers from 1 to n that do not appear in the array nums. n = len(nums) # Mark indices corresponding to value. for num in nums: index = abs(num) - 1 nums[index] = -abs(nums[index]) # The indices which remain positive didn\'t appear in the array. return [i + 1 for i in range(n) if nums[i] > 0]"},{"question":"You are given a string S consisting of lowercase alphabets, and an integer K. Check if it is possible to rearrange the characters in the string S to form a new string such that no two adjacent characters are the same and at least K positions between the same characters. If it is possible, output one such rearrangement, otherwise, print \\"Not possible\\". The only line of input contains string S (1 ≤ |S| ≤ 10000) and integer K (0 ≤ K ≤ |S|). Output the rearranged string in one line, or \\"Not possible\\" if no such arrangement is possible.","solution":"from collections import Counter import heapq def rearrange_string(S, K): if K == 0: return S freq = Counter(S) max_heap = [(-count, char) for char, count in freq.items()] heapq.heapify(max_heap) n = len(S) result = [\'\'] * n index = 0 # to keep track of the character position in the result string while max_heap: temp = [] count, char = heapq.heappop(max_heap) result[index] = char index += 1 count = -count count -= 1 # Keep used characters in a temporary list to check against the gap K temp.append((count, char)) while temp and index < n and index % K != 0: if max_heap: next_count, next_char = heapq.heappop(max_heap) result[index] = next_char index += 1 next_count = -next_count next_count -= 1 if next_count > 0: temp.append((next_count, next_char)) else: return \\"Not possible\\" # Push back all temp elements back into max-heap for count, char in temp: if count > 0: heapq.heappush(max_heap, (-count, char)) if index < n and result[index] == \'\' and max_heap: continue return \'\'.join(result) if result[-1] != \'\' else \\"Not possible\\""},{"question":"An earthquake strikes a region with N cities, causing a series of tremors. Each city has a unique coordinate on a two-dimensional plane. The strength of a tremor increases as it approaches its epicenter, which is also located at a unique coordinate. Scientists are trying to determine which city will experience the strongest tremor. The strength of a tremor in a city is defined as the inverse of the square of the distance from the city\'s coordinates to the epicenter\'s coordinates (i.e., 1/d^2 where d is the distance). Given the coordinates of the epicenter and the coordinates of N cities, you need to determine which city will experience the strongest tremor. # Input - The first line contains two integers Ex and Ey (|Ex|, |Ey| ≤ 10^4) — the coordinates of the tremor epicenter. - The second line contains a single integer N (1 ≤ N ≤ 1000) — the number of cities. - Each of the next N lines contains two integers Cx and Cy (|Cx|, |Cy| ≤ 10^4) — the coordinates of a city. # Output - Print a single integer — the 1-based index of the city that will experience the strongest tremor. If multiple cities are at the same maximum strength, print the smallest index. # Example Input ``` 3 4 3 0 0 5 5 10 10 ``` Output ``` 2 ``` # Note In this example, you calculate the distance of each city to the epicenter and then find the city with the minimum distance. The city at (5, 5) has the closest proximity to the epicenter at (3, 4), resulting in the maximum strength of tremor for that city.","solution":"def find_strongest_tremor(Ex, Ey, cities): Finds the city that will experience the strongest tremor based on the coordinates of the epicenter and the cities. Args: Ex, Ey: Coordinates of the epicenter cities: List of tuples containing the coordinates of the cities Returns: Index (1-based) of the city that will experience the strongest tremor def squared_distance(x1, y1, x2, y2): return (x1 - x2) ** 2 + (y1 - y2) ** 2 min_distance = float(\'inf\') strongest_city_index = -1 for i, (Cx, Cy) in enumerate(cities): dist = squared_distance(Ex, Ey, Cx, Cy) if dist < min_distance: min_distance = dist strongest_city_index = i + 1 return strongest_city_index"},{"question":"An adventurer is exploring a series of caves, where each cave is represented as a node in a graph. The nodes are connected by bidirectional edges that indicate paths between the caves. However, the paths between caves can be quite dangerous and may require a varying amount of effort to travel. Given a list of cave connections where each connection includes two caves and the effort required to travel between them, your task is to determine the minimum effort required for the adventurer to travel from the entrance cave to the treasure cave. # Input: - The first line contains three integers, `n`, `m`, and `q` (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000, 1 ≤ q ≤ 100): the number of caves (nodes), the number of paths (edges), and the number of queries, respectively. - Each of the next `m` lines contains three integers, `u`, `v`, and `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000): denoting that there is a bidirectional path between cave `u` and cave `v` that requires `w` effort to travel. - Each of the next `q` lines contains two integers `s` and `t` (1 ≤ s, t ≤ n): representing a query where you need to determine the minimum effort required to travel from cave `s` to cave `t`. # Output: - For each query, output a single integer representing the minimum effort required to travel from cave `s` to cave `t`. If there is no path from `s` to `t`, output -1. # Example: Input: ``` 4 4 2 1 2 3 1 3 1 2 4 4 3 4 2 1 4 3 2 ``` Output: ``` 3 5 ``` # Explanation: In the example provided, there are 4 caves and 4 paths. The minimum effort to travel from cave 1 to cave 4 can be found via the path 1 -> 3 -> 4 with an effort of 1 + 2 = 3. For the second query, the minimum effort to travel from cave 3 to cave 2 involves traveling the path 3 -> 1 -> 2 with an effort of 1 + 3 = 4.","solution":"import heapq def find_minimum_effort(n, m, connections, queries): def dijkstra(graph, start): effort = [float(\'inf\')] * (n + 1) effort[start] = 0 priority_queue = [(0, start)] while priority_queue: current_effort, u = heapq.heappop(priority_queue) if current_effort > effort[u]: continue for v, w in graph[u]: if effort[u] + w < effort[v]: effort[v] = effort[u] + w heapq.heappush(priority_queue, (effort[v], v)) return effort # Create graph graph = [[] for _ in range(n + 1)] for u, v, w in connections: graph[u].append((v, w)) graph[v].append((u, w)) results = [] for s, t in queries: effort = dijkstra(graph, s) results.append(effort[t] if effort[t] != float(\'inf\') else -1) return results"},{"question":"A water distribution company is trying to optimize their pipeline network to minimize the total cost of installing new pipes while ensuring that all the houses in a neighborhood are connected to the main water supply. They have a list of possible connections between houses where each connection has a certain cost associated with it. You are given n houses, labeled from 1 to n, and m possible connections. Each connection is described by three integers u, v and w (1 le u, v le n, 1 le w le 10^6) indicating a bidirectional pipeline can be installed between house u and house v with a cost of w. Your task is to determine the minimum total cost to connect all the houses to the main water supply such that each house is accessible from every other house either directly or indirectly through other houses. If it\'s not possible to connect all houses, output -1. The first line contains two integers, n and m (1 le n le 10^5, 0 le m le 2 times 10^5) — the number of houses and the number of possible connections. The next m lines each contain three integers, u, v and w (1 le u, v le n, 1 le w le 10^6) describing the possible connections. Output a single integer — the minimum cost required to connect all the houses or -1 if it is not possible. **Example:** Input: 4 4 1 2 1 2 3 2 3 4 3 4 1 4 Output: 6 Input: 3 1 1 2 3 Output: -1 In the first example, one way to connect all houses with minimum cost is: use the connections (1-2), (2-3), and (3-4) with a total cost of 1 + 2 + 3 = 6. In the second example, it\'s not possible to connect all the houses with the given connections.","solution":"def minimum_cost_to_connect_houses(n, m, connections): This function computes the minimum cost to connect all houses using the provided connections. If it\'s not possible, it returns -1. :param n: int, number of houses :param m: int, number of possible connections :param connections: list of tuples, each containing three elements (u, v, w) :return: int, minimum cost required to connect all houses or -1 if it\'s not possible import heapq # Create adjacency list adj = {i: [] for i in range(1, n + 1)} for u, v, w in connections: adj[u].append((w, v)) adj[v].append((w, u)) # Minimum Spanning Tree using Prim\'s Algorithm vis = set() min_heap = [(0, 1)] # Arbitrary starting point (cost=0, node=1) total_cost = 0 while min_heap and len(vis) < n: cost, node = heapq.heappop(min_heap) if node not in vis: vis.add(node) total_cost += cost for edge_cost, neighbor in adj[node]: if neighbor not in vis: heapq.heappush(min_heap, (edge_cost, neighbor)) # If we have visited all nodes, return the computed cost if len(vis) == n: return total_cost else: return -1"},{"question":"You are given a list of distinct integers and an integer target. Your task is to determine whether there exists a pair of integers in the list whose sum is exactly equal to the target. If such a pair exists, return the two integers in any order; otherwise, return an empty list. Write a function `find_pair_with_sum(nums, target)` that takes two arguments: 1. `nums`: A list of distinct integers. 2. `target`: An integer representing the target sum. The function should return a list of two integers if a pair with the given sum exists, or an empty list if no such pair exists. Assume that each input would have exactly one solution if it exists. # Function Signature ```python def find_pair_with_sum(nums: List[int], target: int) -> List[int]: ``` # Example ```python nums = [2, 7, 11, 15] target = 9 find_pair_with_sum(nums, target) # Output: [2, 7] ``` ```python nums = [1, 2, 3, 4, 5] target = 10 find_pair_with_sum(nums, target) # Output: [] ```","solution":"def find_pair_with_sum(nums, target): Returns a pair of integers that add up to the target, or an empty list if no such pair exists. :param nums: List[int] - A list of distinct integers :param target: int - The target sum :return: List[int] - A list containing the pair of integers that add up to the target, or an empty list num_set = set() for num in nums: complement = target - num if complement in num_set: return [num, complement] num_set.add(num) return []"},{"question":"James is designing a custom chess board where each cell can either be empty or contain a piece. The board has n times m cells and he wants to ensure that no two pieces are in the same row, the same column, or the same diagonal. James initially places pieces on the board, but they may not satisfy the constraints. Each piece once placed on the board, cannot be moved, only removed. Your task is to write a program that processes a series of queries, each indicating the removal of a piece from a specific cell. After each query, you need to check if the remaining pieces on the board satisfy the constraints. The first line of input contains two integer numbers n and m (1 leq n, m leq 1000) representing the dimensions of the chess board. The next n lines contain m characters each, where a character \'#\' represents a cell containing a piece and \'.\' represents an empty cell. The next line contains a single integer q (1 leq q leq 5000), the number of queries. The following q lines each contain two integers r_i and c_i (1 leq r_i leq n, 1 leq c_i leq m) representing the row and column of the piece to be removed. For each query, output \\"YES\\" if the remaining pieces on the board satisfy the constraints, otherwise output \\"NO\\". # Example **Input:** ``` 3 3 #.. .#. ..# 2 1 1 2 2 ``` **Output:** ``` NO YES ``` # Explanation: - After the first query, the board looks like: ``` ... .#. ..# ``` Two pieces remain on different rows and columns, but they are on the same diagonal. - After the second query, the board looks like: ``` ... ... ..# ``` Only one piece remains, which satisfies the constraints.","solution":"def is_valid(board): Check if the board is valid after removing a piece. n = len(board) m = len(board[0]) rows = set() cols = set() diag1 = set() diag2 = set() for r in range(n): for c in range(m): if board[r][c] == \'#\': if r in rows or c in cols or (r - c) in diag1 or (r + c) in diag2: return False rows.add(r) cols.add(c) diag1.add(r - c) diag2.add(r + c) return True def process_queries(n, m, initial_board, queries): Process the queries and return results. board = [list(row) for row in initial_board] results = [] for r, c in queries: board[r-1][c-1] = \'.\' if is_valid(board): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A group of friends enjoys playing a unique type of treasure hunt called \\"Dangerous Paths\\". In this game, the friends are in a field represented by a grid of n x m cells. Each cell of the grid has a certain danger level (a non-negative integer) indicating the potential danger in that cell. The goal is to find the safest path from the top-left corner of the grid (cell (1, 1)) to the bottom-right corner of the grid (cell (n, m)). The friends can move from a cell to an adjacent cell either to the right or down. The danger level of a path is defined as the sum of the danger levels of all cells in that path. Write a program to help the friends find the safest path such that the total danger level is minimized. If there are multiple paths with the same total danger level, you can return any of them. # Input: - The first line contains two integers n and m (2 ≤ n, m ≤ 100) — the size of the grid. - The next n lines contain m integers each. The j-th integer in the i-th line denotes the danger level a_ij (0 ≤ a_ij ≤ 1000) of the cell in the i-th row and the j-th column. # Output: Print a single integer — the minimum total danger level of a path from the top-left corner to the bottom-right corner. # Example: Input: ``` 3 3 0 5 1 1 3 2 2 2 0 ``` Output: ``` 5 ``` In the example, the safest path is (1,1) → (2,1) → (3,2) → (3,3) with a total danger level of 0 + 1 + 2 + 2 = 5.","solution":"def min_danger_path(n, m, grid): # Create a 2D list to store the minimum danger level sums for each cell dp = [[0] * m for _ in range(n)] # Initialize the first cell with the grid value dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, m): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] # Return the value in the bottom-right corner, which is the minimum danger level return dp[n - 1][m - 1]"},{"question":"Pretend you are designing a rolling system to track an inventory of different products produced and sold by a company. Each time a product is either produced or sold, the event is recorded. Your task is to write a function that calculates the current stock level of all products at any given point in time. The first line contains two integers, s and e — the initial stock level of each product and the number of events respectively (0 leq s leq 10^5, 1 leq e leq 10^5). The following e lines describe the events. Each line contains a character \\"P\\" (production) or \\"S\\" (sale), followed by an integer representing the number of units produced or sold in that event. Write a function to compute and print the current stock level, starting with the initial stock and applying each event in order. The stock level should never fall below zero, meaning any sale that would cause the stock level to become negative must be ignored and not processed. Example input: ``` 5 4 P 10 S 6 S 3 P 2 ``` Example output: ``` 8 ``` Explanation: - The initial stock of the product is 5 units. - After the first event (production of 10 units), the stock is 15. - After the second event (sale of 6 units), the stock is 9. - The third event (sale of 3 units) is processed, so the stock is now 6. - The fourth event (production of 2 units), the stock becomes 8 units. - The final stock level is 8 units, which is the expected output.","solution":"def calculate_stock_level(s: int, e: int, events: list): stock = s for event in events: action, amount = event[0], int(event[1]) if action == \\"P\\": stock += amount elif action == \\"S\\": if stock >= amount: stock -= amount return stock # Example usage s = 5 e = 4 events = [(\\"P\\", \\"10\\"), (\\"S\\", \\"6\\"), (\\"S\\", \\"3\\"), (\\"P\\", \\"2\\")] print(calculate_stock_level(s, e, events)) # Output: 8"},{"question":"In a digital content management system, there are n digital assets, numbered from 1 to n. Each asset can be linked to zero or more tags, each tag identified by an integer ranging from 1 to k. Each asset may have multiple tags, but each tag is uniquely associated with the asset it\'s attached to. The goal is to find the smallest subset of assets such that every tag from 1 to k is associated with at least one asset in that subset. If it\'s not possible to cover all tags, indicate that it\'s not possible. The first line of input contains two space-separated integers n and k (1 ≤ n ≤ 100000, 1 ≤ k ≤ 100000), denoting the number of assets and the number of distinct tags, respectively. The next line contains an integer q (1 ≤ q ≤ 100000), which indicates the number of asset-tag pairs that follow. Each of the next q lines contains two space-separated integers ai and ti (1 ≤ ai ≤ n, 1 ≤ ti ≤ k), indicating that asset ai is tagged with tag ti. No asset is repeated in these q lines, and each tag appears at least once among these pairs. Print the minimum number of assets required to cover all tags from 1 to k. If it\'s impossible to cover all tags, print -1. # Example **Input:** ``` 4 3 6 1 1 2 1 2 2 3 2 3 3 4 3 ``` **Output:** ``` 2 ``` **Note:** In the sample, selecting assets 2 and 3 suffices to cover all tags 1, 2, and 3. Other combinations may also exist, but the minimum size of such a subset is 2.","solution":"def minimum_assets_to_cover_tags(n, k, q, asset_tag_pairs): from collections import defaultdict from heapq import heappush, heappop tag_to_assets = defaultdict(set) # Populate the tag_to_assets dictionary for a, t in asset_tag_pairs: tag_to_assets[t].add(a) # If there\'s any tag missing, return -1 if len(tag_to_assets) < k: return -1 # Create a priority queue of assets based on how many tags they are associated with asset_to_tags = defaultdict(set) for tag, assets in tag_to_assets.items(): for asset in assets: asset_to_tags[asset].add(tag) # Use a greedy algorithm with a priority queue to find the minimal covering set pq = [] for asset, tags in asset_to_tags.items(): heappush(pq, (-len(tags), len(tags), asset, tags)) # use negative length for max-heap behavior chosen_assets = set() covered_tags = set() while pq and len(covered_tags) < k: _neglen, _len, asset, tags = heappop(pq) if asset not in chosen_assets: chosen_assets.add(asset) covered_tags.update(tags) return len(chosen_assets) if len(covered_tags) == k else -1 # Example usage: # input_data = # 4 3 # 6 # 1 1 # 2 1 # 2 2 # 3 2 # 3 3 # 4 3 # # n, k = 4, 3 # q = 6 # asset_tag_pairs = [(1, 1), (2, 1), (2, 2), (3, 2), (3, 3), (4, 3)] # print(minimum_assets_to_cover_tags(n, k, q, asset_tag_pairs)) # Output: 2"},{"question":"A company has several employees, and each employee has a direct manager. The company\'s hierarchy is such that there is one root employee (the CEO) who has no manager, and every employee (except the CEO) has exactly one direct manager. The company wants to organize various activities, and for that, they need to determine the \\"level\\" of each employee in the hierarchy. The CEO is considered to be at level 0, the direct subordinates of the CEO (if any) are at level 1, their subordinates at level 2, and so on. You are given a list of N employees and their direct managers. Your task is to determine the level of each employee. Input format: - The first line contains an integer N (1 ≤ N ≤ 1000) - the number of employees. - The next N-1 lines each contain a pair of integers u and v (1 ≤ u, v ≤ N) representing that employee v is the direct manager of employee u. Output format: - Output N lines, the i-th line should contain the level of employee i (1-based index). Example Input: ``` 5 2 1 3 1 4 2 5 2 ``` Example Output: ``` 0 1 1 2 2 ``` Explanation: - Employee 1 is the CEO and hence at level 0. - Employees 2 and 3 are direct subordinates of the CEO and hence at level 1. - Employees 4 and 5 are direct subordinates of employee 2 and hence at level 2.","solution":"def find_employee_levels(N, employee_manager_pairs): # Create a list to store the managers of each employee managers = [-1] * (N + 1) # Use index 1-based, managers[0] will be unused # Populate the managers array for u, v in employee_manager_pairs: managers[u] = v # Function to find the level of an employee def get_level(employee): if employee == 1: return 0 # CEO level is 0 if levels[employee] != -1: return levels[employee] # Calculate the level by going up the hierarchy levels[employee] = get_level(managers[employee]) + 1 return levels[employee] # Initialize levels array to store the level of each employee levels = [-1] * (N + 1) # Calculate level for each employee for i in range(1, N + 1): levels[i] = get_level(i) # Extract the levels from 1 to N (1-based index) result = levels[1:] return result # Example usage: N = 5 employee_manager_pairs = [(2, 1), (3, 1), (4, 2), (5, 2)] print(find_employee_levels(N, employee_manager_pairs))"},{"question":"You are given a series of operations to perform on a sequence of numbers. Starting with an initial array of integers, your task is to modify the array based on the operations provided and then print the modified array. Each operation consists of three values: a starting index, an ending index, and a value to add. The operation specifies that the value should be added to each element in the array from the starting index to the ending index (inclusive). The operations are given in 1-based indexing. The first line of input contains two integers n and q (1 ≤ n ≤ 100,000, 1 ≤ q ≤ 100,000) — the number of elements in the array and the number of operations, respectively. The next line contains n integers — the initial elements of the array. The next q lines each contain three integers l, r, and x (1 ≤ l ≤ r ≤ n, -1,000 ≤ x ≤ 1,000) representing an operation. Output the modified array after performing all operations. # Example: Input: ``` 5 3 1 2 3 4 5 1 3 1 2 4 2 1 5 -1 ``` Output: ``` 1 4 5 5 4 ``` # Explanation: 1. After the first operation (1, 3, 1), the array is [2, 3, 4, 4, 5]. 2. After the second operation (2, 4, 2), the array is [2, 5, 6, 6, 5]. 3. After the third operation (1, 5, -1), the array is [1, 4, 5, 5, 4].","solution":"def modify_array(n, q, arr, operations): Modifies the array based on a series of operations. Parameters: n (int): The number of elements in the array. q (int): The number of operations. arr (list of ints): The initial array of elements. operations (list of tuples): The list of operations as (l, r, x). Returns: list of ints: The modified array after performing all operations. for l, r, x in operations: for i in range(l-1, r): arr[i] += x return arr # Example usage: # n, q = 5, 3 # arr = [1, 2, 3, 4, 5] # operations = [(1, 3, 1), (2, 4, 2), (1, 5, -1)] # print(modify_array(n, q, arr, operations)) # Output: [1, 4, 5, 5, 4]"},{"question":"Zara is a passionate gardener and wants to organize her plants in a unique manner. Each plant has a specific height, and Zara wants to place them in a straight line such that the height difference between any two adjacent plants is minimized. Given an array of n integers, where each integer represents the height of a plant, help Zara achieve her goal by finding the arrangement of plants that minimizes the maximum height difference between any two adjacent plants. Write a function that takes in an array of integers representing the heights of the plants and returns an array indicating the arrangement of plants to achieve the desired configuration. # Function Signature: ```python def organize_plants(heights: List[int]) -> List[int] ``` # Input: - An integer array `heights` (2 ≤ |heights| ≤ 100000) representing the heights of the plants. # Output: - An integer array representing the arrangement of plant heights that minimizes the maximum height difference between any two adjacent plants. # Constraints: - Each element in `heights` will be a positive integer (1 ≤ height ≤ 100000). # Example: ```python assert organize_plants([10, 1, 12, 5, 7]) == [1, 5, 7, 10, 12] assert organize_plants([3, 6, 2, 8, 4, 5]) == [2, 3, 4, 5, 6, 8] ``` # Explanation: In the first example, the optimal arrangement minimizing the maximum adjacent height difference is [1, 5, 7, 10, 12]. The height differences between adjacent plants are [4, 2, 3, 2], with the maximum difference being 4, which is minimized compared to any other arrangement. In the second example, the optimal arrangement is [2, 3, 4, 5, 6, 8]. The height differences are [1, 1, 1, 1, 2], with the maximum difference being 2.","solution":"from typing import List def organize_plants(heights: List[int]) -> List[int]: Organizes the plant heights in a manner that minimizes the maximum height difference between adjacent plants. # Sort the heights to find the optimal arrangement heights.sort() return heights"},{"question":"Nina is playing a game on a rectangular grid of size n × m, where each cell is either empty or contains an obstacle. Nina starts from the top-left corner of the grid (cell (1, 1)) and needs to reach the bottom-right corner (cell (n, m)). She can move either right or down to adjacent cells, but cannot move into a cell with an obstacle. Each move from one cell to the next takes Nina 1 second. Your task is to help Nina determine the minimum time needed to reach the bottom-right corner from the top-left corner, if a path exists. The first line of the input contains two integers, n and m (1 ≤ n, m ≤ 1000), representing the dimensions of the grid. The next n lines each contain m characters, where each character is either \'.\' (representing an empty cell) or \'#\' (representing an obstacle). The top-left corner and the bottom-right corner are guaranteed to be empty (\'.\'). Output a single integer representing the minimum time needed for Nina to reach the bottom-right corner from the top-left corner. If no path exists, output -1. Example: Input: 3 4 .... .#.. ..#. Output: 5 Explanation: A possible path could be: (1,1) → (1,2) → (1,3) → (2,3) → (3,3) → (3,4) The output is 5 seconds.","solution":"from collections import deque def min_time_to_reach_end(n, m, grid): Returns the minimum time needed for Nina to reach the bottom-right corner from the top-left corner. If no path exists, returns -1. def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' directions = [(1, 0), (0, 1)] # right and down movements queue = deque([(0, 0, 0)]) # (x, y, time) visited = set((0, 0)) while queue: x, y, time = queue.popleft() # if we have reached the bottom-right corner if x == n - 1 and y == m - 1: return time for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, time + 1)) return -1"},{"question":"You are an apprentice wizard learning the art of spell crafting. Your mentor has given you the following task: There are n magical stones lined up in a row, each stone can either be active (denoted by \\"A\\") or inactive (denoted by \\"I\\"). You have the ability to switch a segment of stones, all at once, from active to inactive or from inactive to active. This means if you choose a segment from index l to r, every stone in that segment will switch their state. To test your understanding, your mentor will ask you q queries, each query will be of one of the following types: 1. \\"SWITCH l r\\" - Switch the states of the stones from index l to r. 2. \\"QUERY l r\\" - Return the number of active stones in the segment from index l to r. The stones are initially in the state described by a string s. The first line contains two integers n and q (1 le n, q leq 100000). The second line contains the initial string s of length n, where each character is either \'A\' or \'I\'. The next q lines contain the descriptions of the queries. Each query is either in the form of \\"SWITCH l r\\" or \\"QUERY l r\\", where 1 le l le r le n. For each \\"QUERY\\" type query, print the number of active stones in the specified segment. Example: ``` Input: 5 3 AIABA QUERY 1 3 SWITCH 2 4 QUERY 1 5 Output: 2 3 ```","solution":"def process_queries(n, q, s, queries): stones = list(s) def switch(l, r): for i in range(l, r + 1): stones[i] = \'A\' if stones[i] == \'I\' else \'I\' def query(l, r): return sum(1 for i in range(l, r + 1) if stones[i] == \'A\') results = [] for cmd in queries: if cmd[0] == \\"SWITCH\\": _, l, r = cmd switch(l - 1, r - 1) elif cmd[0] == \\"QUERY\\": _, l, r = cmd results.append(query(l - 1, r - 1)) return results"},{"question":"You are given a maze represented by a matrix of characters with \'S\', \'T\', \'#\', and \'.\'. \'S\' is the starting point, \'T\' is the target, \'#\' represents walls, and \'.\' represents open paths. You can move up, down, left, or right, but cannot move through walls. All moves must stay within the grid boundaries. Your task is to determine if there is a valid path from \'S\' to \'T\' without passing through any walls. The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the maze respectively. The next n lines each contain exactly m characters and represent the maze. Print \\"YES\\" if there is a path from \'S\' to \'T\', otherwise print \\"NO\\". Example Input: ``` 5 5 S...# ..# .#... ..#.T #..#. ``` Example Output: ``` YES ``` Example Input: ``` 5 5 S.#.. ..# .#... ..#.T #..#. ``` Example Output: ``` NO ```","solution":"def find_path_in_maze(matrix, n, m): from collections import deque # Helper function to check valid moves def is_valid(x, y): return 0 <= x < n and 0 <= y < m and matrix[x][y] != \'#\' # Directions array for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Locate \'S\' and \'T\' in the matrix start, end = None, None for i in range(n): for j in range(m): if matrix[i][j] == \'S\': start = (i, j) elif matrix[i][j] == \'T\': end = (i, j) # If either start or end is not found, there is no valid path if not start or not end: return \\"NO\\" # Perform BFS from the start point queue = deque([start]) visited = set() visited.add(start) while queue: x, y = queue.popleft() # If we reach the target \'T\', return \\"YES\\" if (x, y) == end: return \\"YES\\" # Explore neighbors for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: queue.append((nx, ny)) visited.add((nx, ny)) # If we exhaust the search without finding \'T\', return \\"NO\\" return \\"NO\\" def main(input_grid): first_line = input_grid[0].split() n, m = int(first_line[0]), int(first_line[1]) grid = input_grid[1:n + 1] return find_path_in_maze(grid, n, m)"},{"question":"Given an array consisting of n integers b1, b2, ..., bn, transform the entire array such that for every element bi, the following condition holds: bi = max(bi, bi+1, ..., bn), where 1 ≤ i ≤ n and for element bn the condition remains bn = bn. After transforming the array, calculate the sum of its elements and print the result. The first line contains an integer n (1 ≤ n ≤ 105) — the size of the array. The second line contains n space-separated integers b1, b2, ..., bn (0 ≤ bi ≤ 109) — the original array. You need to output a single integer, the sum of the elements in the transformed array. Example: Input: 5 3 1 5 2 4 Output: 23 Explanation: The transformed array is [5, 5, 5, 4, 4]. The sum of these elements is 23.","solution":"def transform_and_sum(n, b): Transforms the array such that each element is the maximum of all elements from its position to the end of the array, then returns the sum of the transformed array. Parameters: n (int): The size of the array. b (list): The original array. Returns: int: The sum of the transformed array. # Initialize the transformed array with the same elements as b transformed = b[:] # Traverse the array from the second to last element to the first element for i in range(n-2, -1, -1): # Ensure each element is the maximum of itself and all elements to its right transformed[i] = max(transformed[i], transformed[i + 1]) # Return the sum of the transformed array return sum(transformed)"},{"question":"Mira wants to design a new video game with an expansive world map consisting of interconnected dungeons. Each dungeon is represented as a node, and each direct path between two dungeons is represented as an undirected edge. Mira needs to ensure that the game player can reach every dungeon from any starting dungeon; therefore, the map must be connected. Mira has a list of potential dungeons and their connections, but she noticed that if some connections were removed, the network would still be connected. Mira wants to identify such connections because they represent redundant paths that, if cut, still keep the whole map accessible. Given the number of dungeons and a list of connections, help Mira find all the redundant connections in the map. A connection is redundant if removing it does not disconnect the map. # Input - The first line contains two integers `n` and `m` (1 ≤ n ≤ 1000, 0 ≤ m ≤ 2000), representing the number of dungeons and the number of connections, respectively. - The next `m` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v), representing a direct connection between dungeons `u` and `v`. # Output - Print the number of redundant connections followed by the list of redundant connections. Each connection should be printed in the format `u v` and should follow the order provided in the input. # Example Input: ``` 5 6 1 2 1 3 2 3 2 4 3 4 4 5 ``` Output: ``` 2 2 3 3 4 ``` In this example, if the connections `2 3` or `3 4` are removed, the map remains connected, thus they are considered redundant.","solution":"def find_redundant_connections(n, m, connections): parent = list(range(n + 1)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootY] = rootX return False return True redundant = [] for u, v in connections: if union(u, v): redundant.append((u, v)) return redundant def handle_io(input_data): data = input_data.strip().split(\'n\') n, m = map(int, data[0].split()) connections = [] for i in range(1, m + 1): u, v = map(int, data[i].split()) connections.append((u, v)) result = find_redundant_connections(n, m, connections) output = f\\"{len(result)}n\\" for con in result: output += f\\"{con[0]} {con[1]}n\\" return output.strip()"},{"question":"Input: A binary tree where each node has an integer value, and an integer target sum. Output: Return all root-to-leaf paths where each path\'s sum of node values equals the target sum. Each path should be represented as a list of node values, and the paths should be returned in any order. # Function Signature ```python def path_sum(root: Optional[TreeNode], target_sum: int) -> List[List[int]]: ``` # Example ``` Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], target_sum = 22 5 / 4 8 / / 11 13 4 / / 7 2 5 1 Output: [[5,4,11,2],[5,8,4,5]] Explanation: There are two root-to-leaf paths with the sum 22: 1. 5 -> 4 -> 11 -> 2 2. 5 -> 8 -> 4 -> 5 ``` # Constraints - The number of nodes in the tree is in the range [0, 5000]. - -1000 <= Node.val <= 1000 - -1000 <= target_sum <= 1000","solution":"from typing import List, Optional class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def path_sum(root: Optional[TreeNode], target_sum: int) -> List[List[int]]: def dfs(node, current_path, current_sum): if not node: return current_path.append(node.val) current_sum += node.val if not node.left and not node.right and current_sum == target_sum: results.append(current_path[:]) else: if node.left: dfs(node.left, current_path, current_sum) if node.right: dfs(node.right, current_path, current_sum) current_path.pop() current_sum -= node.val results = [] dfs(root, [], 0) return results"},{"question":"You are given a sequence of n integers and an integer k. Your task is to find the length of the longest contiguous subarray with at most k distinct integers. The first line of the input contains two integers n and k (1 ≤ n ≤ 200,000, 1 ≤ k ≤ 100,000). The second line contains n integers representing the sequence (1 ≤ a_i ≤ 1,000,000). Return a single integer representing the length of the longest contiguous subarray with at most k distinct integers. # Example Input ``` 7 2 1 2 1 2 3 4 5 ``` Output ``` 4 ``` Explanation The longest contiguous subarray with at most 2 distinct integers is [1, 2, 1, 2], whose length is 4. # Note If there are multiple longest subarrays, output the length of any one of them.","solution":"def longest_subarray_with_k_distinct(seq, k): from collections import defaultdict n = len(seq) left = 0 max_length = 0 count = defaultdict(int) for right in range(n): count[seq[right]] += 1 while len(count) > k: count[seq[left]] -= 1 if count[seq[left]] == 0: del count[seq[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"Given a binary tree, write a function to perform a zigzag level order traversal of its nodes\' values. (i.e., from left to right, then right to left for the next level and alternate between). You are provided with the root of a binary tree. # Input - A binary tree where each node has the following structure: ```python class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None ``` # Output - A list of lists of integers, where each list contains the nodes\' values at that level in the zigzag order. # Example Given the binary tree: ``` 3 / 9 20 / 15 7 ``` The zigzag level order traversal of the above binary tree is: ``` [ [3], [20, 9], [15, 7] ] ``` # Constraints - The number of nodes in the tree is within the range `[0, 2000]`. - Each node\'s value is within the range `[-1000, 1000]`. # Function Signature ```python def zigzagLevelOrder(root: TreeNode) -> List[List[int]]: ```","solution":"from collections import deque from typing import List, Optional class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def zigzagLevelOrder(root: Optional[TreeNode]) -> List[List[int]]: if not root: return [] result = [] current_level = deque([root]) left_to_right = True while current_level: level_size = len(current_level) level_nodes = [] for _ in range(level_size): node = current_level.popleft() level_nodes.append(node.val) if node.left: current_level.append(node.left) if node.right: current_level.append(node.right) if not left_to_right: level_nodes.reverse() result.append(level_nodes) left_to_right = not left_to_right return result"},{"question":"Linda loves playing with colors and patterns, and she has recently taken up knitting. She finds patterns where the same number doesn\'t appear adjacently aesthetically pleasing. Linda is knitting a long scarf, and she wants to make sure no two adjacent rows have the same pattern. Patterns in the scarf are represented as sequences of integers. Help Linda achieve her goal by writing a function that generates a knitting pattern such that no two adjacent numbers are the same in the sequence. # Input - An integer `N` representing the length of the scarf (number of rows). - An integer `M` representing the range of patterns available (patterns range from `1` to `M`). # Output - A sequence of `N` patterns such that no two adjacent numbers are the same. - If it is not possible to generate such sequence, return `-1`. # Constraints - `1 <= N <= 10^6` - `1 <= M <= 100` # Example Input Example 1 ``` 5 3 ``` Output Example 1 ``` 1 2 1 2 1 ``` Input Example 2 ``` 4 2 ``` Output Example 2 ``` 1 2 1 2 ``` Input Example 3 ``` 6 1 ``` Output Example 3 ``` -1 ``` # Explanation - In the first example, a sequence of length 5 is generated using patterns ranging from 1 to 3. The sequence ensures no two adjacent numbers are the same. - In the second example, a sequence of length 4 is generated using patterns ranging from 1 to 2, ensuring no two adjacent numbers are the same. - In the third example, with only 1 pattern available, it’s impossible to create a sequence of length 6 without having adjacent numbers being the same, hence the output is `-1`.","solution":"def generate_knitting_pattern(N, M): if M == 1: return -1 if N > 1 else [1] pattern = [] for i in range(N): pattern.append((i % M) + 1) return pattern"},{"question":"In a distant galaxy, the inhabitants communicate via sequences of colors. Each color is represented by an uppercase English letter (e.g., \'A\', \'B\', \'C\', etc.). They have a special message that follows these rules: 1. It consists of exactly `n` distinct colors. 2. No two consecutive colors in the sequence can be the same. 3. The sequence must be lexicographically smallest. Given an integer `n` (1 leq n leq 26), create the lexicographically smallest sequence of exactly `n` distinct colors that adheres to the described rules. # Input A single integer `n`. # Output A single line containing a string of length `n` that represents the lexicographically smallest sequence of distinct colors. # Example Input ``` 3 ``` Output ``` ABC ``` Input ``` 5 ``` Output ``` ABCDE ``` # Explanation - For the first example, since `n` is 3, the smallest lexicographically sequence with 3 distinct colors and no consecutive same colors is \\"ABC\\". - For the second example, the smallest sequence with 5 distinct colors is \\"ABCDE\\".","solution":"def smallest_lexicographical_sequence(n): Returns the lexicographically smallest sequence of exactly n distinct colors where no two consecutive colors in the sequence are the same. alphabet = \\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\" return alphabet[:n]"},{"question":"A city is planning to build a new park. The park will have multiple types of areas including playgrounds, gardens, and seating areas. The city planner wants to optimize the layout so that: 1. Each area type is represented at least once. 2. Areas of the same type are not adjacent to each other. 3. The total number of areas should be maximized given the above two conditions. You are given three integers, `P`, `G`, and `S`, where `P` is the number of playgrounds, `G` is the number of gardens, and `S` is the number of seating areas available for use. Write a function to determine the maximum number of areas that can be built while satisfying the above constraints. If it is impossible to build the park following the constraints, return `-1`. # Input The input contains three space-separated integers `P`, `G`, and `S` (1 le P, G, S le 10^5). # Output Output a single integer representing the maximum number of areas that can be built while satisfying the constraints, or `-1` if it is not possible. # Example Input ``` 3 2 2 ``` Output ``` 7 ``` Input ``` 2 2 2 ``` Output ``` 6 ``` Input ``` 4 1 1 ``` Output ``` -1 ``` # Explanation - In the first example, an optimal layout would be: P, G, P, S, P, G, S (total of 7 areas, satisfying all conditions). - In the second example, an optimal layout would be: P, G, P, S, P, G (total of 6 areas, satisfying all conditions). - In the third example, it is not possible to satisfy the conditions because there are not enough different type areas to prevent adjacency of the same type.","solution":"def max_areas(P, G, S): Determine the maximum number of areas that can be built while satisfying the constraints. Parameters: P (int): Number of playgrounds. G (int): Number of gardens. S (int): Number of seating areas. Returns: int: Maximum number of areas that can be built, or -1 if it is not possible. total_areas = P + G + S # Calculate the maximum number of each type that we can use max_count = max(P, G, S) # Calculate the sum of the other two sum_of_others = total_areas - max_count # Check if it\'s possible to place them without two adjacent same types if max_count - sum_of_others > 1: return -1 return total_areas"},{"question":"You are given an array of n integers (1 ≤ n ≤ 100). You can perform the following operation on any two adjacent elements of the array: - Choose two adjacent elements, a[i] and a[i+1] (1 ≤ i < n), and swap them if a[i] > a[i+1]. Your task is to sort the array in non-decreasing order using the above operation. You need to output the result of the array after each swap operation until the array is completely sorted. Print each intermediate array state on a new line. The first line contains an integer n (1 ≤ n ≤ 100) – the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) – the elements of the array. Output the array after every swap operation until the array is sorted in non-decreasing order. If the array is already sorted initially, you should output nothing. Example: Input: 5 5 3 8 6 2 Output: 3 5 8 6 2 3 5 6 8 2 3 5 6 2 8 3 5 2 6 8 3 2 5 6 8 2 3 5 6 8 In this example, the array is being sorted step by step with the allowable swap operation, and each intermediate state of the array is displayed until it is sorted.","solution":"def bubble_sort_with_steps(arr): Sort the array using bubble sort and print each step where a swap is performed. n = len(arr) made_swap = True while made_swap: made_swap = False for i in range(n - 1): if arr[i] > arr[i + 1]: arr[i], arr[i + 1] = arr[i + 1], arr[i] made_swap = True print(\' \'.join(map(str, arr))) # Function to parse input, call the sorting function and display the output. def sort_array_with_steps(n, arr): bubble_sort_with_steps(arr)"},{"question":"You are given an array of integers. You need to find the maximum possible sum of a contiguous subarray of the given array. However, there is one additional constraint: you are allowed to remove at most one element from the subarray to maximize the sum. # Input - The first line of input contains an integer n (1 leq n leq 10^5), the size of the array. - The second line contains n integers a_1, a_2, ldots, a_n (-10^4 leq a_i leq 10^4) representing the array. # Output - Output a single integer, the maximum possible sum of a contiguous subarray after removing at most one element. # Examples Example 1: **Input:** ``` 5 1 -2 0 3 -1 ``` **Output:** ``` 4 ``` Example 2: **Input:** ``` 3 -1 -1 -1 ``` **Output:** ``` -1 ``` # Explanation: In Example 1, the subarray `[1, -2, 0, 3]` has a sum of `2`, but by removing `-2`, the sum can be increased to `4`. In Example 2, since all elements are negative, removing any one of them still results in the maximum subarray sum being `-1`.","solution":"def max_sum_with_one_removal(arr): n = len(arr) if n == 1: return arr[0] max_ending_here = [0] * n max_starting_here = [0] * n max_ending_here[0] = arr[0] max_starting_here[n-1] = arr[n-1] for i in range(1, n): max_ending_here[i] = max(arr[i], max_ending_here[i-1] + arr[i]) for i in range(n-2, -1, -1): max_starting_here[i] = max(arr[i], max_starting_here[i+1] + arr[i]) max_subarray_sum = max(max_ending_here) for i in range(1, n-1): max_subarray_sum = max(max_subarray_sum, max_ending_here[i-1] + max_starting_here[i+1]) return max_subarray_sum"},{"question":"The Local Library wants to create an automated system to help keep track of their books. Each book is characterized by a unique identifier, a title, an author, and the year of publication. The goal is to efficiently find and manage book details. You need to implement a simple library management system where you can add new books, remove books by their unique identifier, and search for books by title. **Requirements:** 1. Implement a `Book` class with the following attributes: - `id`: integer, unique identifier for the book. - `title`: string, the title of the book. - `author`: string, the author of the book. - `year`: integer, the year the book was published. 2. Implement a `Library` class that manages the collection of books. This class should support the following methods: - `add_book(book)`: Adds a new `Book` object to the collection. - `remove_book(book_id)`: Removes the book with the given `id` from the collection. - `find_books_by_title(title)`: Finds and returns a list of books that contain the given title string (case-insensitive). **Input/Output:** - For `add_book(book)`, add a new book to the collection. If a book with the same `id` already exists, it should not be added again. - For `remove_book(book_id)`, remove the book with the specified `id` from the collection. If no such book exists, do nothing. - For `find_books_by_title(title)`, return a list of books (each represented as a string in the format \\"id: title by author (year)\\"), sorted by their titles in alphabetical order. **Example:** ```python # Define the Book class class Book: def __init__(self, id, title, author, year): self.id = id self.title = title self.author = author self.year = year # Define the Library class class Library: def __init__(self): self.books = [] def add_book(self, book): if all(b.id != book.id for b in self.books): self.books.append(book) def remove_book(self, book_id): self.books = [book for book in self.books if book.id != book_id] def find_books_by_title(self, title): result = [book for book in self.books if title.lower() in book.title.lower()] result.sort(key=lambda x: x.title) return [f\\"{book.id}: {book.title} by {book.author} ({book.year})\\" for book in result] # Example usage library = Library() library.add_book(Book(1, \\"The Great Gatsby\\", \\"F. Scott Fitzgerald\\", 1925)) library.add_book(Book(2, \\"To Kill a Mockingbird\\", \\"Harper Lee\\", 1960)) library.add_book(Book(3, \\"1984\\", \\"George Orwell\\", 1949)) print(library.find_books_by_title(\\"the\\")) # Output: [\'1: The Great Gatsby by F. Scott Fitzgerald (1925)\'] library.remove_book(1) print(library.find_books_by_title(\\"the\\")) # Output: [] ```","solution":"class Book: def __init__(self, id, title, author, year): self.id = id self.title = title self.author = author self.year = year def __repr__(self): return f\\"{self.id}: {self.title} by {self.author} ({self.year})\\" class Library: def __init__(self): self.books = [] def add_book(self, book): if all(b.id != book.id for b in self.books): self.books.append(book) def remove_book(self, book_id): self.books = [book for book in self.books if book.id != book_id] def find_books_by_title(self, title): result = [book for book in self.books if title.lower() in book.title.lower()] result.sort(key=lambda x: x.title) return [repr(book) for book in result]"},{"question":"You are given an infinite grid where each cell can be either empty or blocked. The grid is represented as an infinite two-dimensional list of 0s and 1s, where 0 represents an empty cell and 1 represents a blocked cell. You start at cell (0, 0) and want to reach cell (x, y). You can move to neighboring cells in four possible directions: up, down, left, and right. Your task is to determine if there is a path from (0, 0) to (x, y). If a path exists, print the length of the shortest path. If no path exists, print -1. The length of the path is defined as the number of cells in the path. The first line of input contains two integers, n and m (1 ≤ n, m ≤ 10^6), the size of the grid. The next n lines contain m integers each representing the grid, where 0 indicates an empty cell and 1 indicates a blocked cell. The final line contains two integers, x and y, the target cell coordinates. Output the length of the shortest path from (0, 0) to (x, y) if a path exists, otherwise -1. Example Input: 5 5 0 1 0 0 0 0 1 1 1 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 4 4 Output: 8 Explanation: The shortest path from (0, 0) to (4, 4) passes through the following cells: (0, 0), (1, 0), (2, 0), (2, 1), (2, 2), (2, 3), (3, 3), (4, 3), (4, 4). The length of this path is 8.","solution":"from collections import deque def shortest_path_in_grid(n, m, grid, x, y): Determines if there\'s a path from (0,0) to (x,y) in the grid and returns the length of the shortest path. If no path exists, returns -1. if grid[0][0] == 1 or grid[x][y] == 1: return -1 directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] queue = deque([(0, 0, 0)]) visited = set((0, 0)) while queue: cx, cy, steps = queue.popleft() # If we reach target cell if cx == x and cy == y: return steps for dx, dy in directions: nx, ny = cx + dx, cy + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == 0: queue.append((nx, ny, steps + 1)) visited.add((nx, ny)) return -1"},{"question":"Alice is working on a custom encryption algorithm for her project. To simplify encryption, she takes a string and shifts each letter by a fixed number of positions in the alphabet. This is similar to the Caesar cipher. If the shift moves past the end of the alphabet, it wraps around to the beginning. Given a string `s` containing only lowercase English letters, and an integer `k` representing the number of positions each letter should be shifted, your task is to write a function that returns the encrypted string. The input consists of: - A single integer `T` (`1 <= T <= 50`) — the number of test cases. - For each test case, a line containing a string `s` (`1 <= |s| <= 1000`) — the string to be encrypted, and an integer `k` (`1 <= k <= 1000`) — the number of positions to shift each character. Output `T` lines, each containing the encrypted string for the corresponding test case. Example: Input: ``` 3 abc 3 xyz 2 hello 5 ``` Output: ``` def zab mjqqt ``` In the first test case, each letter in \\"abc\\" is shifted by 3 positions resulting in \\"def\\". In the second test case, each letter in \\"xyz\\" is shifted by 2 positions. The shift wraps around from \'z\' to \'a\', resulting in \\"zab\\". In the third test case, \\"hello\\" with a shift of 5 becomes \\"mjqqt\\".","solution":"def encrypt_string(s, k): Encrypts the string s by shifting each letter by k positions in the alphabet. If the shift moves past the end of the alphabet, it wraps around to the beginning. encrypted = [] k = k % 26 # As the alphabet only has 26 characters for char in s: shifted_pos = (ord(char) - ord(\'a\') + k) % 26 new_char = chr(ord(\'a\') + shifted_pos) encrypted.append(new_char) return \'\'.join(encrypted) def process_test_cases(T, test_cases): result = [] for s, k in test_cases: encrypted_string = encrypt_string(s, k) result.append(encrypted_string) return result"},{"question":"There is an online music streaming service that offers songs to its users. Every song is characterized by its unique id – an integer from 1 to n, its genre, and its popularity score. This service wants to create a feature to suggest songs from the same genre or from different genres to its users, based on a specified preference. You are given: - `n` songs (`1 ≤ n ≤ 2*10^5`), where each song has a unique id. - The genre of each song, represented as an integer from 1 to g (`1 ≤ g ≤ 1000`). - The popularity score of each song, represented as an integer from 1 to p (`1 ≤ p ≤ 10^6`). - Two integers, `x` and `y` (`1 ≤ x, y ≤ n`). Write a function that suggests a list of `k` songs to the user. The function should take the following inputs: - The integer n. - A list of n tuples, where each tuple contains the song id, its genre, and its popularity score. - An integer x, representing the id of the currently playing song. - An integer y, representing the preferred genre for suggestions. - An integer k, representing the number of suggestions desired by the user. Your function should suggest `k` songs based on the following criteria, in order of priority: 1. Songs with the preferred genre (`y`). 2. If there are not enough songs with the preferred genre, suggest songs from different genres that are not the genre of the currently playing song (`x`). 3. Sort the suggestions by their popularity score in descending order. If there are multiple songs with the same popularity score, sort them by their song id in ascending order. Print the ids of the suggested songs, or -1 if there are no songs to suggest. Input: - An integer n (number of songs). - A list of n tuples of three integers: (song id, genre, popularity score). - An integer x. - An integer y. - An integer k. Output: - A list of k suggested song ids in the specified order, or -1 if no suggestions are possible. Example: ``` Input: 5 [(1, 3, 50), (2, 1, 70), (3, 3, 40), (4, 2, 60), (5, 3, 90)] 3 3 2 Output: [5, 1] ```","solution":"def suggest_songs(n, songs, x, y, k): Suggest songs to the user based on the specified preferences. Parameters: n (int): The number of songs. songs (list): A list of tuples where each tuple contains three integers (song id, genre, popularity score). x (int): The id of the currently playing song. y (int): The preferred genre for suggestions. k (int): The number of suggestions desired by the user. Returns: list: A list of k suggested song ids based on the specified criteria, or -1 if no songs can be suggested. preferred_genre_songs = [] other_genre_songs = [] current_genre = None for song in songs: song_id, genre, popularity = song if song_id == x: current_genre = genre break for song in songs: song_id, genre, popularity = song if genre == y: preferred_genre_songs.append(song) elif genre != current_genre: other_genre_songs.append(song) preferred_genre_songs.sort(key=lambda x: (-x[2], x[0])) # Sort by popularity desc, then by id asc other_genre_songs.sort(key=lambda x: (-x[2], x[0])) # Sort by popularity desc, then by id asc result = [] for song in preferred_genre_songs: if len(result) < k: result.append(song[0]) if len(result) < k: for song in other_genre_songs: if len(result) < k: result.append(song[0]) else: break if not result: return -1 return result"},{"question":"You are given a list of n integers representing the heights of buildings in a row. Two buildings together form a beautiful pair if their heights are such that the difference between them does not exceed k. Your task is to count the number of beautiful pairs in the sequence. Write a function `count_beautiful_pairs(n, k, heights)` that takes an integer n (number of buildings), an integer k (maximum allowed height difference), and a list of integers heights (heights of the buildings) as input, and returns the number of beautiful pairs. A building pair (i, j) is considered beautiful if: 1. 1 ≤ i < j ≤ n 2. |heights[i] - heights[j]| ≤ k The first line contains two integers n (1 ≤ n ≤ 2·105) and k (0 ≤ k ≤ 109) — the number of buildings and the maximum allowed height difference. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 109) — the heights of the buildings. Return the number of beautiful pairs in the sequence. Example: Input: ``` 6 3 2 5 6 8 1 3 ``` Output: ``` 9 ``` Explanation: - (2, 5), (2, 3), (2, 1), (5, 6), (5, 8), (6, 8), (6, 3), (8, 1), (1, 3) are considered beautiful pairs.","solution":"def count_beautiful_pairs(n, k, heights): Counts the number of beautiful pairs in the list of building heights. Parameters: n (int): The number of buildings. k (int): The maximum allowed height difference for a beautiful pair. heights (list of int): The heights of the buildings. Returns: int: The number of beautiful pairs. count = 0 for i in range(n): for j in range(i + 1, n): if abs(heights[i] - heights[j]) <= k: count += 1 return count"},{"question":"You are given a grid with m rows and n columns, initially filled with zeros. You need to perform a series of operations, each represented by a triple (r1, c1, r2, c2), where (r1, c1) represents the top-left cell and (r2, c2) represents the bottom-right cell of a subgrid. For each operation, increment all cells in the specified subgrid by 1. Write a function `increment_subgrid(m, n, operations)` that takes in the dimensions of the grid and a list of operations, and returns the final grid after performing all operations. # Input: - The first argument is an integer m (1 ≤ m ≤ 100), the number of rows in the grid. - The second argument is an integer n (1 ≤ n ≤ 100), the number of columns in the grid. - The third argument is an array `operations`, where each element is a tuple (r1, c1, r2, c2) representing the coordinates of the top-left and bottom-right corners of the subgrid to be incremented. Each 1 ≤ r1 ≤ r2 ≤ m and 1 ≤ c1 ≤ c2 ≤ n. # Output: - Return a 2D list representing the final grid after applying all operations. # Example: ```python m = 3 n = 3 operations = [(1, 1, 2, 2), (2, 2, 3, 3)] print(increment_subgrid(m, n, operations)) ``` Output: ``` [[1, 1, 0], [1, 2, 1], [0, 1, 1]] ``` In this example, the first operation increments cells (1,1) to (2,2), and the second operation increments cells (2,2) to (3,3), resulting in the final grid.","solution":"def increment_subgrid(m, n, operations): Returns the final grid after performing all increment operations. Parameters: m (int): number of rows in the grid n (int): number of columns in the grid operations (list of tuples): each tuple contains (r1, c1, r2, c2) specifying the subgrid to increment Returns: list of list of ints: the resulting grid after applying all operations # Initialize the grid with zeros grid = [[0 for _ in range(n)] for _ in range(m)] # Perform each operation for r1, c1, r2, c2 in operations: for i in range(r1-1, r2): for j in range(c1-1, c2): grid[i][j] += 1 return grid"},{"question":"A famous artist has n canvases, and each canvas has a different color. Each canvas color can be represented by a number on the RGB color spectrum, and he wants to arrange his canvases so that the difference between the RGB values of any two consecutive canvases is minimized. Given an array of n integers representing the RGB values of the canvases, determine the minimum possible difference between the maximum and minimum values of any k consecutive canvases. The first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 10^5), the number of canvases and the number of consecutive canvases to consider, respectively. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 10^9) — the RGB values of the canvases. Print the minimum possible difference between the maximum and minimum values of any k consecutive canvases. For example, in the first sample test, the best arrangement is to consider the subarray [3, 4, 5] which includes three consecutive canvases and has a difference of 2 between the maximum (5) and minimum value (3). It can be shown that in the second sample test the minimum possible difference for any 2 consecutive canvases is 999, which occurs between the values 1 and 1000.","solution":"def find_min_difference(n, k, arr): Function to find the minimum possible difference between the maximum and minimum values of any k consecutive canvases. if k > n: return -1 # Invalid input as k should be less than or equal to n # Sort the array to make consecutive subsequences contain minimum differences arr.sort() min_diff = float(\'inf\') for i in range(n - k + 1): current_diff = arr[i + k - 1] - arr[i] if current_diff < min_diff: min_diff = current_diff return min_diff"},{"question":"You are given an array of integers representing the elevation map where the width of each bar is 1. Calculate how much water it can trap after raining. Write a function `trap_water(elevation_map)` that takes a list of integers `elevation_map` and returns the total units of water that can be trapped. **Example:** - Input: `elevation_map = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]` - Output: `6` **Explanation:** The elevation map `[0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]` can trap 6 units of water as shown in the diagram below: ``` █ █ ██ █ _ ████ ████ █ ``` Each section of the diagram corresponds to a unit of water trapped. **Constraints:** - The length of `elevation_map` will be at least 1 and at most 100000. - The height of the bars in `elevation_map` will be non-negative integers and at most 10000. Write an efficient solution to ensure it runs within a reasonable time frame for large inputs.","solution":"def trap_water(elevation_map): if not elevation_map: return 0 n = len(elevation_map) left_max = [0] * n right_max = [0] * n # Filling left_max array left_max[0] = elevation_map[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], elevation_map[i]) # Filling right_max array right_max[n - 1] = elevation_map[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], elevation_map[i]) # Calculating the trapped water total_water = 0 for i in range(n): total_water += min(left_max[i], right_max[i]) - elevation_map[i] return total_water"},{"question":"You are provided with an array of integers representing the heights of buildings in a cityscape, where the width of each building is 1 unit. Calculate the maximum rectangular area (formed by contiguous buildings) that can be obtained in the cityscape. The first line of input contains a single integer n (1 ≤ n ≤ 105) - the number of buildings. The second line contains n integers hi (1 ≤ hi ≤ 109) - the heights of the buildings. Output a single integer - the maximum rectangular area that can be achieved. Example input: 6 2 1 5 6 2 3 Example output: 10 Note: In the first example, the maximum rectangle has area 10 and is formed by buildings 3 and 4 with heights 5 and 6 respectively.","solution":"def max_rect_area(heights): Calculate the maximum rectangular area in a histogram represented by heights. :param heights: List[int] - heights of buildings :return: int - maximum rectangular area stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Implement a class called `Library` which manages a collection of books. Each book is represented as a dictionary with three keys: `title`, `author`, and `year_published`. The class should support the following functionalities: 1. **Add a book**: Adds a new book to the library collection. If a book with the same title already exists, it should raise a `ValueError` with the message \\"Book with this title already exists.\\" 2. **Remove a book**: Removes a book from the library collection based on its title. If no book with the given title is found, it should raise a `ValueError` with the message \\"Book not found.\\" 3. **Find books by author**: Returns a list of all books by a particular author. If no books are found by the specified author, it should return an empty list. 4. **Find books by year**: Returns a list of all books published in a particular year. If no books are found for the specified year, it should return an empty list. 5. **List all books**: Returns a list of all books in the library sorted alphabetically by title. The class should be implemented in Python and should follow these requirements. Here is the function signature for the class: ```python class Library: def __init__(self): # Initializes an empty library collection pass def add_book(self, title: str, author: str, year_published: int): # Adds a book to the collection pass def remove_book(self, title: str): # Removes a book from the collection by title pass def find_books_by_author(self, author: str) -> list: # Finds all books by the specified author pass def find_books_by_year(self, year: int) -> list: # Finds all books published in the specified year pass def list_all_books(self) -> list: # Lists all books in the library pass ``` # Example: ```python library = Library() # Adding books library.add_book(\\"Python Programming\\", \\"John Doe\\", 2020) library.add_book(\\"Data Science\\", \\"Jane Smith\\", 2019) library.add_book(\\"Machine Learning\\", \\"John Doe\\", 2021) # Listing all books print(library.list_all_books()) # Output: [ # {\\"title\\": \\"Data Science\\", \\"author\\": \\"Jane Smith\\", \\"year_published\\": 2019}, # {\\"title\\": \\"Machine Learning\\", \\"author\\": \\"John Doe\\", \\"year_published\\": 2021}, # {\\"title\\": \\"Python Programming\\", \\"author\\": \\"John Doe\\", \\"year_published\\": 2020} # ] # Finding books by author print(library.find_books_by_author(\\"John Doe\\")) # Output: [ # {\\"title\\": \\"Python Programming\\", \\"author\\": \\"John Doe\\", \\"year_published\\": 2020}, # {\\"title\\": \\"Machine Learning\\", \\"author\\": \\"John Doe\\", \\"year_published\\": 2021} # ] # Finding books by year print(library.find_books_by_year(2020)) # Output: [ # {\\"title\\": \\"Python Programming\\", \\"author\\": \\"John Doe\\", \\"year_published\\": 2020} # ] # Removing a book library.remove_book(\\"Data Science\\") # Listing all books after removal print(library.list_all_books()) # Output: [ # {\\"title\\": \\"Machine Learning\\", \\"author\\": \\"John Doe\\", \\"year_published\\": 2021}, # {\\"title\\": \\"Python Programming\\", \\"author\\": \\"John Doe\\", \\"year_published\\": 2020} # ] ``` Implement the `Library` class with the specified functionalities.","solution":"class Library: def __init__(self): self.books = [] def add_book(self, title: str, author: str, year_published: int): if any(book[\'title\'] == title for book in self.books): raise ValueError(\\"Book with this title already exists.\\") new_book = { \\"title\\": title, \\"author\\": author, \\"year_published\\": year_published } self.books.append(new_book) def remove_book(self, title: str): for book in self.books: if book[\'title\'] == title: self.books.remove(book) return raise ValueError(\\"Book not found.\\") def find_books_by_author(self, author: str) -> list: return [book for book in self.books if book[\'author\'] == author] def find_books_by_year(self, year: int) -> list: return [book for book in self.books if book[\'year_published\'] == year] def list_all_books(self) -> list: return sorted(self.books, key=lambda x: x[\'title\'])"},{"question":"You are given a string containing only the characters \'a\' and \'b\'. Define the balance degree of the string as the number of substrings where the number of \'a\'s is equal to the number of \'b\'s. Write a function to find the balance degree of the string. The first line of input contains an integer n (1 ≤ n ≤ 105), the length of the string. The second line contains a string of length n consisting of characters \'a\' and \'b\'. Output the balance degree of the string. Example: Input: 6 ababa Output: 6 Explanation: The balance degree of the string is calculated by counting the number of substrings where the number of \'a\'s is equal to the number of \'b\'s. For the example above, the substrings are: \\"ab\\", \\"aba\\", \\"bab\\", \\"abab\\", \\"ababa\\", \\"ba\\", making a total of 6 substrings. Note: Each substring should be counted only once, even if it appears multiple times in different contexts.","solution":"def balance_degree(n, s): Returns the balance degree of the string where the number of \'a\'s is equal to the number of \'b\'s. Parameters: n (int): Length of the string. s (str): The string containing only characters \'a\' and \'b\'. Returns: int: The balance degree of the string. balance = 0 count_a = 0 count_b = 0 balance_counts = {0: 1} for char in s: if char == \'a\': count_a += 1 elif char == \'b\': count_b += 1 delta = count_a - count_b if delta in balance_counts: balance += balance_counts[delta] balance_counts[delta] += 1 else: balance_counts[delta] = 1 return balance"},{"question":"You have been tasked with preparing a schedule for an online tournament. The tournament involves multiple games, each with a set duration, and the goal is to maximize the number of games that can be played without any overlaps. You are given a list of games, where each game is represented by a pair of integers (start_time, end_time). Your task is to write a function that returns the maximum number of non-overlapping games that can be scheduled. # Input: - An integer `n` representing the number of games. - A list of `n` pairs of integers, where each pair `(start_time, end_time)` indicates the start and end times of a game. # Output: - An integer representing the maximum number of non-overlapping games that can be scheduled. # Constraints: - All start and end times are distinct integers within a reasonable range (e.g., (0 leq text{start_time}, text{end_time} leq 10^9)). - ( 1 leq n leq 10^5 ) # Example: Input: ``` 6 1 4 2 6 5 8 3 5 8 9 5 9 ``` Output: ``` 3 ``` # Note: In this example, one possible selection of non-overlapping games is (1,4), (5,8), and (8,9). Implement the function `max_non_overlapping_games(n: int, games: List[Tuple[int, int]]) -> int` to solve the problem.","solution":"from typing import List, Tuple def max_non_overlapping_games(n: int, games: List[Tuple[int, int]]) -> int: Returns the maximum number of non-overlapping games that can be scheduled. # Sort games by end time games.sort(key=lambda x: x[1]) # Initialize variables max_games = 0 last_end_time = -1 # Iterate through the sorted games for game in games: if game[0] >= last_end_time: # Schedule this game max_games += 1 last_end_time = game[1] return max_games"},{"question":"A theme park has several rides and each ride has a fixed maximum capacity for the number of people that can enjoy the ride simultaneously. There are n rides and m groups of people visiting the park. Each group has a certain number of people and all people in a group will only go on the same ride together. Each ride can only be used once per group and a ride cannot be used by more than one group at the same time. Your task is to find out in how many different ways you can assign all groups to the rides such that no ride exceeds its maximum capacity. Two ways are different if there exists a group which is assigned to a different ride in both ways. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 20), the number of rides and the number of groups, respectively. The second line contains n integers representing the capacities of the rides. The third line contains m integers representing the sizes of the groups. Print a single integer, the number of valid ways to assign all groups to the rides. Example: Input: 3 3 5 4 7 3 4 2 Output: 6","solution":"from itertools import permutations def count_valid_assignments(n, m, capacities, group_sizes): group_perm = permutations(group_sizes) valid_count = 0 for perm in group_perm: valid = True for i in range(m): if perm[i] > capacities[i]: valid = False break if valid: valid_count += 1 return valid_count"},{"question":"You are given a tree with n nodes labeled from 1 to n. Each node has a value associated with it, denoted as v[i] for the i-th node. The tree is rooted at node 1. You need to perform the following operations: 1. **Update Operation:** Update the value of a node to a new value. 2. **Query Operation:** Find the sum of values of nodes in the subtree of a given node. Implement a class `TreeValueManager` that supports these operations efficiently. The class should have the following methods: - `__init__(self, n: int, values: List[int], edges: List[Tuple[int, int]])`: Initializes the tree with n nodes, an array `values` where `values[i]` is the value of the i+1-th node, and a list of edges representing the tree connections. - `update(self, node: int, value: int)`: Updates the value of node `node` to `value`. - `query(self, node: int) -> int`: Returns the sum of the values of all nodes in the subtree of the given `node`. # Input - The `__init__` method receives an integer `n` (1 leq n leq 10^5), a list of integers `values` (1 leq text{values}[i] leq 10^6), and a list of `n-1` edges represented as tuples. - Each edge is a tuple of two integers representing a connection between two nodes `u` and `v` (1 leq u, v leq n). # Output - The `update` method does not return anything. - The `query` method returns an integer which is the sum of values in the subtree of the specified node. # Example ```python # Initialize tree with 5 nodes values = [10, 20, 30, 40, 50] edges = [(1, 2), (1, 3), (3, 4), (3, 5)] manager = TreeValueManager(5, values, edges) # Update node 3 value to 25 manager.update(3, 25) # Query the sum of values in the subtree of node 1 print(manager.query(1)) # Output: 145 # Query the sum of values in the subtree of node 3 print(manager.query(3)) # Output: 115 ```","solution":"from typing import List, Tuple class TreeValueManager: def __init__(self, n: int, values: List[int], edges: List[Tuple[int, int]]): self.n = n self.values = values[:] self.tree = [[] for _ in range(n + 1)] self.subtree_sum = [0] * (n + 1) self.parent = [-1] * (n + 1) self.build_tree(edges) self.dfs(1) def build_tree(self, edges: List[Tuple[int, int]]): for u, v in edges: self.tree[u].append(v) self.tree[v].append(u) def dfs(self, node: int): self.subtree_sum[node] = self.values[node - 1] for neighbor in self.tree[node]: if neighbor != self.parent[node]: self.parent[neighbor] = node self.dfs(neighbor) self.subtree_sum[node] += self.subtree_sum[neighbor] def update(self, node: int, value: int): diff = value - self.values[node - 1] self.values[node - 1] = value self.propagate_update(node, diff) def propagate_update(self, node: int, diff: int): self.subtree_sum[node] += diff if self.parent[node] != -1: self.propagate_update(self.parent[node], diff) def query(self, node: int) -> int: return self.subtree_sum[node]"},{"question":"Yana and Jules are playing a game using a string of lowercase letters. In this game, their objective is to modify the string so that it becomes a palindrome. A palindrome is a string that reads the same backward as forward. Yana and Jules take turns modifying the string, and Yana always goes first. On each turn, the player must change exactly one character in the string to any other lowercase letter. The game ends when the string becomes a palindrome. The player who makes the string a palindrome wins the game. Each player plays optimally, meaning they will make the best possible move at each turn to achieve their objective or to avoid losing. Given a string `s` of length `n`, determine whether Yana or Jules will win the game if both play optimally. The first line contains an integer `n` (1 ≤ n ≤ 100,000) — the length of the string. The second line contains a string `s` of length `n` consisting of lowercase English letters. If Yana wins, print \\"Yana\\" (without quotes). Otherwise, print \\"Jules\\" (without quotes). **Example:** Input: ``` 5 abeca ``` Output: ``` Yana ``` In this example, Yana can change the first character \'a\' to \'e\' on her first turn to make the string \\"ebeca\\", which reads the same backward as forward. Thus, Yana wins.","solution":"def determine_winner(n, s): Determines the winner of the palindrome game. :param n: int, the length of the string :param s: str, the string to be modified :return: str, \\"Yana\\" if Yana wins, \\"Jules\\" if Jules wins # Calculate the number of differences between the string and its reverse mismatches = sum(1 for i in range(n // 2) if s[i] != s[n - 1 - i]) # Yana will win if there are any mismatches # If there are no mismatches, the string is already a palindrome, so no one wins # since there are no characters to change. if mismatches > 0: return \\"Yana\\" else: return \\"Jules\\" # If there are no mismatches, Jules would win as the string is already a palindrome. # Example usage: n = 5 s = \\"abeca\\" print(determine_winner(n, s)) # Output: \\"Yana\\""},{"question":"Given a string s containing only digits (\'0\'-\'9\'), find and print the minimum possible sum of its substrings such that the sum is divisible by a given integer k. A substring is any continuous sequence of characters within the string. For example, the string \\"1234\\" has the substrings \\"1\\", \\"2\\", \\"3\\", \\"4\\", \\"12\\", \\"23\\", \\"34\\", \\"123\\", \\"234\\", and \\"1234\\". The first line contains an integer k (1 le k le 100) — the divisor. The second line contains a string s (1 le |s| le 10^5) — the string consisting of digits. Print one integer, the minimum possible sum of its substrings that is divisible by k, or print -1 if no such sum exists.","solution":"def min_sum_divisible_by_k(s, k): Find the minimum possible sum of its substrings such that the sum is divisible by a given integer k. :param s: String containing only digits :param k: Integer divisor :return: Minimum possible sum of its substrings that is divisible by k, or -1 if no such sum exists n = len(s) min_sum = float(\'inf\') current_sum = 0 for i in range(n): current_sum = 0 for j in range(i, n): current_sum += int(s[j]) if current_sum % k == 0: min_sum = min(min_sum, current_sum) return min_sum if min_sum != float(\'inf\') else -1"},{"question":"You are given an n x n grid filled with non-negative integers. The task is to find the length of the shortest path from the top-left corner to the bottom-right corner of the grid, where you can only move right or down. You need to return the number of steps in this shortest path. If there is no valid path, return -1. Note: - You can assume that n will be between 1 and 100 inclusive. - The grid squares will contain values from 0 to 999 inclusive. # Input - The first line of input contains a single integer n, the size of the grid. - Each of the next n lines contains n integers separated by spaces representing the grid values. # Output - Output a single integer representing the length of the shortest path or -1 if no valid path exists. # Sample Input 1 ``` 4 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ``` # Sample Output 1 ``` 6 ``` # Sample Input 2 ``` 3 1 2 3 4 5 6 7 8 9 ``` # Sample Output 2 ``` 4 ``` # Sample Input 3 ``` 3 1 1 1 1 1 0 1 0 1 ``` # Sample Output 3 ``` -1 ``` # Explanation - In the first sample, the shortest path from (0, 0) to (3, 3) involves moving right 3 times and down 3 times, i.e., 6 steps. - In the second sample, the shortest path moves down once, right twice, and then down once again, totaling 4 steps. - In the third sample, it is impossible to reach the bottom-right corner from the top-left corner due to the presence of zeroes blocking the path, so the output is -1.","solution":"from collections import deque def shortest_path(grid): n = len(grid) if grid[0][0] == 0 or grid[n-1][n-1] == 0: return -1 directions = [(0, 1), (1, 0)] # directions for right and down only visited = [[False] * n for _ in range(n)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited[0][0] = True while queue: row, col, dist = queue.popleft() if row == n-1 and col == n-1: return dist for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < n and 0 <= new_col < n and not visited[new_row][new_col] and grid[new_row][new_col] != 0: visited[new_row][new_col] = True queue.append((new_row, new_col, dist + 1)) return -1"},{"question":"You are given a binary tree where each node contains a pair of integers `(value, weight)`. Your task is to find the path from the root to a leaf such that the sum of the weights along the path is maximized. If there are multiple paths with the same maximum weight sum, return the path whose values form the lexicographically smallest sequence. Implement a function that takes the root of the tree as an input and returns a list of integers representing the values of the nodes in the desired path. The tree node structure is defined as: ```python class TreeNode: def __init__(self, value: int, weight: int, left: \'TreeNode\' = None, right: \'TreeNode\' = None): self.value = value self.weight = weight self.left = left self.right = right ``` Your function should have the following signature: ```python def max_weight_path(root: TreeNode) -> List[int]: # Your code here ``` **Constraints:** - The tree contains at most 1000 nodes. - Each node\'s value and weight are integers between -10^5 and 10^5. - It is guaranteed that there is at least one leaf node in the tree. **Example:** Input: ``` (5, 3) / (1, 2) (4, 4) / (3, 1) (2, 3) ``` Output: ``` [5, 1, 2] ```","solution":"class TreeNode: def __init__(self, value: int, weight: int, left: \'TreeNode\' = None, right: \'TreeNode\' = None): self.value = value self.weight = weight self.left = left self.right = right def max_weight_path(root: TreeNode): from collections import deque if not root: return [] def dfs(node, current_weight, current_path): if not node.left and not node.right: return (current_weight + node.weight, current_path + [node.value]) max_weight = float(\'-inf\') max_path = [] if node.left: left_weight, left_path = dfs(node.left, current_weight + node.weight, current_path + [node.value]) if (left_weight > max_weight) or (left_weight == max_weight and left_path < max_path): max_weight = left_weight max_path = left_path if node.right: right_weight, right_path = dfs(node.right, current_weight + node.weight, current_path + [node.value]) if (right_weight > max_weight) or (right_weight == max_weight and right_path < max_path): max_weight = right_weight max_path = right_path return (max_weight, max_path) _, result_path = dfs(root, 0, []) return result_path"},{"question":"You are organizing a race for n participants. Each participant has a specific starting speed, but every lap they complete, their speed increases by a certain constant value. Your task is to determine the total distance covered by all participants after a given number of laps. The first input line contains two integers n and l (1 ≤ n ≤ 100, 1 ≤ l ≤ 1000) — the number of participants and the number of laps respectively. The next n lines each contain two integers s and d (1 ≤ s, d ≤ 100) — the starting speed and the speed increment per lap for each participant. Output a single integer which is the total distance covered by all participants after l laps. For instance, if there are 2 participants with starting speeds 3 and 5, and speed increments 2 and 1 respectively, and they each run 3 laps: - The first participant runs at speed 3 in the first lap, 5 in the second lap, and 7 in the third lap, covering a total distance of 3 + 5 + 7 = 15. - The second participant runs at speed 5 in the first lap, 6 in the second lap, and 7 in the third lap, covering a total distance of 5 + 6 + 7 = 18. Therefore, the total distance covered is 15 + 18 = 33. Print the total distance covered by all participants after the given number of laps.","solution":"def total_distance_after_laps(n, l, participants): Returns the total distance covered by all participants after l laps. Args: n : int : Number of participants l : int : Number of laps participants : List[Tuple[int, int]] : List of tuples where each tuple contains starting speed and speed increment per lap Returns: int : Total distance covered by all participants after l laps total_distance = 0 for s, d in participants: # The distance covered by this participant after l laps: distance = sum(s + i * d for i in range(l)) total_distance += distance return total_distance"},{"question":"You are managing a company\'s hiring process and have received a list of applicants with their respective scores in a technical assessment. You want to sort these applicants in descending order of their scores, but there is a catch. The scores are given as strings (to maintain a system compatibility requirement), and each score may not have the same number of decimal places. For instance, the score \\"95.7\\" should be considered higher than \\"95.65\\". Your task is to implement a function that takes a list of scores as input, sorts them in descending order, and then returns the sorted list. Write a function `sort_scores(scores)` that takes in one parameter: - `scores`: a list of strings representing the scores of applicants. The function should return a list of strings representing the sorted scores in descending order. # Function Signature ```python def sort_scores(scores: List[str]) -> List[str]: ``` # Input - A list of strings, where each string represents a score in the range from \\"0\\" to \\"100.0\\" inclusive. Each string can have varying number of decimal places, but they are always valid floating-point numbers. The length of the list is at most 100. # Output - A list of strings, where each string represents a score sorted in descending order. # Example ```python scores = [\\"99.5\\", \\"100\\", \\"95.7\\", \\"95.65\\", \\"95.8\\"] sort_scores(scores) ``` The function should return: ``` [\'100\', \'99.5\', \'95.8\', \'95.7\', \'95.65\'] ``` # Constraints - All scores are unique. - Scores are always legitimate floating-point numbers within the range from \\"0\\" to \\"100.0\\".","solution":"def sort_scores(scores): Sorts a list of scores in descending order. Parameters: - scores (list of str): A list of scores represented as strings. Returns: - list of str: The input list of scores sorted in descending order. # Convert the scores to floats for proper comparison and sort them sorted_scores = sorted(scores, key=float, reverse=True) return sorted_scores"},{"question":"You are given an array of integers a representing the heights of students in a row. You want to rearrange the students such that the heights form a non-decreasing sequence from left to right. Your task is to calculate and return the minimum number of swaps needed to sort the array in non-decreasing order. The first line contains one integer n (1 le n le 100,000) — the number of students. The second line contains n integers a_i (1 le a_i le 10^9) — the heights of the students. Print one integer — the minimum number of swaps needed to sort the array. For example, in the first example, the array is [4, 3, 2, 1], and we need to perform the following swaps to sort the array in ascending order: - Swap index 0 (value 4) with index 3 (value 1) to get [1, 3, 2, 4] - Swap index 1 (value 3) with index 2 (value 2) to get [1, 2, 3, 4] So the minimum number of swaps needed is 2. In the second example, the array [1, 5, 4, 3, 2] requires: - Swap index 1 (value 5) with index 4 (value 2) to get [1, 2, 4, 3, 5] - Swap index 2 (value 4) with index 3 (value 3) to get [1, 2, 3, 4, 5] Thus, the minimum number of swaps needed is also 2.","solution":"def min_swaps_to_sort(arr): Calculate the minimum number of swaps needed to sort the array in non-decreasing order. :param arr: List[int] : The array of student heights :return int: The minimum number of swaps n = len(arr) arr_pos = [(val, idx) for idx, val in enumerate(arr)] arr_pos.sort(key=lambda it: it[0]) visited = {k: False for k in range(n)} swaps = 0 for i in range(n): if visited[i] or arr_pos[i][1] == i: continue cycle_size = 0 j = i while not visited[j]: visited[j] = True j = arr_pos[j][1] cycle_size += 1 if cycle_size > 0: swaps += (cycle_size - 1) return swaps"},{"question":"You are tasked with creating a new software feature that translates text into a secret code. The secret code is generated by shifting each letter in the text by a specified number of positions in the alphabet. Spaces and punctuation should be ignored and remain in their original position. The translation should adhere to the following rules: - The letter \'a\' shifted by one position becomes \'b\', \'b\' becomes \'c\', and so on. - The letter \'z\' shifted by one position wraps around and becomes \'a\'. - The case of each letter should remain unchanged (\'A\' shifted by one becomes \'B\', \'B\' becomes \'C\', and so on, with \'Z\' wrapping around to \'A\'). Develop a function `encode_text` that takes in two arguments: 1. `text`: A string consisting of uppercase and lowercase letters, spaces, and punctuation. 2. `shift`: An integer denoting the number of positions to shift each letter. The function should return the encoded text as a string. # Input The input consists of a string `text` and an integer `shift` where: - `1 <= len(text) <= 10^5` - `-1000 <= shift <= 1000` # Output The function should return a single string which is the encoded text. # Example ```python print(encode_text(\\"Hello, World!\\", 1)) # Outputs: \\"Ifmmp, Xpsme!\\" print(encode_text(\\"xyz\\", 2)) # Outputs: \\"zab\\" print(encode_text(\\"ABC, def!\\", -1)) # Outputs: \\"ZAB, cde!\\" ``` # Note - The shift can be negative, in which case letters are shifted to the left. - Non-alphabetic characters should not be shifted but included in the output as they are. ```python def encode_text(text: str, shift: int) -> str: def shift_char(c, shift): if c.isalpha(): base = ord(\'a\') if c.islower() else ord(\'A\') return chr((ord(c) - base + shift) % 26 + base) return c return \'\'.join(shift_char(c, shift) for c in text) ```","solution":"def encode_text(text: str, shift: int) -> str: def shift_char(c, shift): if c.isalpha(): base = ord(\'a\') if c.islower() else ord(\'A\') return chr((ord(c) - base + shift) % 26 + base) return c return \'\'.join(shift_char(c, shift) for c in text)"},{"question":"You are given an array of integers a of length n. Your task is to find an array of integers b of the same length such that the bitwise AND of all elements in b is not zero, and the absolute difference between any pair of corresponding elements in a and b is minimized. Formally, you need to create an array b such that: 1. b_i geq 1 for all i (1 leq i leq n) 2. bigcap_{i=1}^n b_i neq 0 (bitwise AND of all elements in b is non-zero) 3. Sum of |a_i - b_i| over all i is minimized. If there are multiple arrays b that satisfy the conditions, you can print any of them. # Input - The first line contains an integer, n (1 leq n leq 10^5) - the length of the array a. - The second line contains n integers a_1, a_2, ldots, a_n (0 leq a_i leq 10^9). # Output Print an array b of length n that meets the conditions. # Example Input: ``` 3 1 2 3 ``` Output: ``` 1 2 3 ``` or ``` 1 1 1 ``` or any other valid output that meets the conditions. [Note: The example provided is trivial, but the provided constraints ensure the problem can have multiple valid solutions and require a deeper understanding to implement efficiently for larger inputs.]","solution":"def find_array_b(n, a): This function takes an integer n and a list a of n integers. It returns a list b of n integers such that: 1. b_i >= 1 for all i (1 <= i <= n) 2. bitwise AND of all elements in b is not zero 3. Sum of |a_i - b_i| over all i is minimized # As the simplest possible solution, we can just set all elements of b to 1. # This ensures the bitwise AND of all elements will always be 1, which is non-zero. # Additionally, this minimizes the absolute difference if elements of a are also close to 1. b = [1] * n return b # Example usage: # n = 3 # a = [1, 2, 3] # print(find_array_b(n, a)) # Should print: [1, 1, 1]"},{"question":"There is a game with n rounds, and in each round, a player scores points. The points scored in each round are represented by an array of integers a. However, the player can only keep the scores from at most k rounds and must discard the rest. The player wants to maximize their total score after discarding unnecessary rounds. Given the array a and the integer k, help the player to determine the maximum total score they can achieve by summing the points of at most k rounds. The first line contains a single integer T (1 le T le 10^4) — the number of test cases. Each test case consists of two lines: - The first line contains two integers, n (1 le n le 10^5) and k (1 le k le n) — the number of rounds and the maximum number of rounds the player can keep. - The second line contains n integers a_1, a_2, dots, a_n (-10^9 le a_i le 10^9) — the points scored in each round. For each test case, print a single integer — the maximum total score the player can achieve. **Example** Input: ``` 3 6 3 1 2 3 -1 -2 5 4 2 -4 -2 1 3 5 5 -1 -2 -3 -4 -5 ``` Output: ``` 10 4 -15 ``` Explanation: - In the first test case, the player can keep rounds 1, 2, and 6 to get a maximum total score of 1 + 2 + 5 = 8. - In the second test case, the player should keep rounds 3 and 4 to get a maximum total score of 1 + 3 = 4. - In the third test case, the player must keep all rounds to get a total score of -1 + -2 + -3 + -4 + -5 = -15.","solution":"def maximize_score(t, test_cases): results = [] for i in range(t): n, k = test_cases[i][0] scores = test_cases[i][1] scores.sort(reverse=True) results.append(sum(scores[:k])) return results"},{"question":"Nadia needs to prepare boxes for charity, each containing exactly 1 book, 2 pens, and 3 notebooks. You are given the number of books, pens, and notebooks Nadia has. Your goal is to determine the maximum number of complete boxes she can prepare. Note that Nadia cannot break up any of the items; each box must contain whole items as specified. Input: The first line contains an integer b (1 ≤ b ≤ 1000) — the number of books Nadia has. The second line contains an integer p (1 ≤ p ≤ 1000) — the number of pens Nadia has. The third line contains an integer n (1 ≤ n ≤ 1000) — the number of notebooks Nadia has. Output: Print the maximum number of boxes that Nadia can prepare from the given items. Examples: Input: 3 6 9 Output: 3 Input: 5 8 11 Output: 3 Input: 2 2 3 Output: 1","solution":"def max_boxes(b, p, n): Returns the maximum number of boxes Nadia can prepare. Each box contains: - 1 book - 2 pens - 3 notebooks Parameters: - b (int): the number of books - p (int): the number of pens - n (int): the number of notebooks Returns: - int: the maximum number of boxes return min(b, p // 2, n // 3) # Example usage: # print(max_boxes(3, 6, 9)) # Output should be 3 # print(max_boxes(5, 8, 11)) # Output should be 3 # print(max_boxes(2, 2, 3)) # Output should be 1"},{"question":"You are given an array of n integers. Your task is to determine if you can remove at most one element from the array so that the remaining elements are in non-decreasing order. The first line of the input contains one integer t (1 le t le 100) — the number of test cases. Then t test cases follow. The first line of each test case contains one integer n (2 le n le 100) — the number of integers in the array. The second line of each test case contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^4). For each test case, print \\"YES\\" if it\'s possible to remove at most one element to make the array non-decreasing, otherwise print \\"NO\\". In the first test case of the example, the input is [3, 4, 5, 2, 6]. By removing the element 2, the remaining array [3, 4, 5, 6] is in non-decreasing order, so the answer is \\"YES\\". In the second test case, the input is [4, 2, 3, 2]. By removing the element 4, the remaining array [2, 3, 2] is still not non-decreasing, but by removing the first 2, we get [4, 3, 2], which is also not non-decreasing. Therefore, the answer is \\"NO\\" because it\'s not possible to achieve the goal by removing just one element in this case.","solution":"def can_be_non_decreasing_by_removing_one(arr): faulty_index = -1 # Find the first occurrence where the array is not non-decreasing for i in range(len(arr) - 1): if arr[i] > arr[i+1]: faulty_index = i break if faulty_index == -1: return \\"YES\\" # Check by removing the element at faulty_index if arr[:faulty_index] + arr[faulty_index+1:] == sorted(arr[:faulty_index] + arr[faulty_index+1:]): return \\"YES\\" # Check by removing the element at faulty_index + 1 if arr[:faulty_index+1] + arr[faulty_index+2:] == sorted(arr[:faulty_index+1] + arr[faulty_index+2:]): return \\"YES\\" return \\"NO\\" def check_cases(test_cases): results = [] for case in test_cases: n, array = case results.append(can_be_non_decreasing_by_removing_one(array)) return results"},{"question":"Given a list of integers, your task is to determine if the list is a palindrome. A list is considered a palindrome if it reads the same backward as forward. If the list is a palindrome, print \\"YES\\"; otherwise, print \\"NO\\". The first line of input contains an integer n (1 leq n leq 100) representing the number of elements in the list. The second line contains n integers separated by spaces. Each integer is guaranteed to be in the range [0, 100]. Print \\"YES\\" if the list is a palindrome, otherwise print \\"NO\\". Examples: Input: 5 1 2 3 2 1 Output: YES Input: 4 1 2 3 4 Output: NO","solution":"def is_palindrome(n, elements): Checks if the given list \'elements\' of length \'n\' is a palindrome. :param n: Number of elements in the list. :param elements: List of integers. :return: \\"YES\\" if the list is a palindrome, otherwise \\"NO\\". if elements == elements[::-1]: return \\"YES\\" else: return \\"NO\\" # Example usage: # if __name__ == \\"__main__\\": # n = int(input()) # elements = list(map(int, input().split())) # result = is_palindrome(n, elements) # print(result)"},{"question":"Bridge Construction is developing a new road network in their latest town expansion project. They need a mechanism to calculate the minimum cost for constructing roads such that every district in the town is reachable from any other district. Each district is represented as a node, and each possible road as an edge with a given cost. The goal is to find the minimum cost to connect all the districts ensuring there is a path between any two districts. Consider the districts as nodes from 1 to n and the potential roads as edges with associated costs. You are given multiple test scenarios, each containing the number of districts and the potential roads with their costs. Your task is to find the minimum road construction cost for each test scenario. If it is impossible to connect all districts, return -1 for that scenario. # Input - The first line contains a single integer t (1 ≤ t ≤ 10) — the number of test cases. - For each test case: - The first line contains two integers n (2 ≤ n ≤ 1000) and m (1 ≤ m ≤ 100000) — the number of districts and the number of roads. - The next m lines each contain three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6) — representing a potential road between districts u and v with a cost w. # Output For each test case, print a single integer — the minimum cost to connect all districts, or -1 if it is impossible to connect them all. # Example Input ``` 2 4 5 1 2 3 1 3 4 2 3 1 2 4 2 3 4 5 3 3 1 2 2 1 3 3 2 3 1 ``` Output ``` 8 3 ``` # Notes In the first test case, you can choose roads with costs 1, 2, and 5 to connect all districts. The minimum total cost is 8. In the second test case, you can choose roads with costs 1 and 2 to connect all districts. The minimum total cost is 3.","solution":"def find_minimum_cost(t, test_cases): Given multiple test cases, this method returns an array of minimum cost to connect all districts for each test scenario. If it is impossible to connect all districts, it returns -1 for that scenario. import heapq def kruskal(n, edges): # Helper function to find with path compression def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] # Helper function to union by rank def union(parent, rank, x, y): rootX = find(parent, x) rootY = find(parent, y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 # Initialize parent and rank arrays parent = [i for i in range(n)] rank = [0] * n # Sort edges based on weight edges.sort(key=lambda x: x[2]) mst_cost = 0 mst_edges = 0 for u, v, w in edges: rootU = find(parent, u) rootV = find(parent, v) if rootU != rootV: mst_cost += w mst_edges += 1 union(parent, rank, rootU, rootV) # If n-1 edges are in the MST, break early if mst_edges == n - 1: break # Check if all nodes are connected root = find(parent, 0) for i in range(1, n): if find(parent, i) != root: return -1 return mst_cost results = [] for (n, m, edges) in test_cases: result = kruskal(n, edges) results.append(result) return results"},{"question":"You are given an array a consisting of n integers. Indices of the array start from zero (i.e., the first element is a_0, the second one is a_1, and so on). You need to find the maximum possible sum of a non-empty subsequence such that no two elements in the subsequence are adjacent in the original array. A subsequence is derived from the array by deleting some or none of the elements without changing the order of the remaining elements. Your task is to answer t independent test cases. The first line of the input contains one integer t (1 le t le 10^4) — the number of test cases. Then t test cases follow. The first line of the test case contains one integer n (1 le n le 10^5) — the length of a. The second line of the test case contains n integers a_0, a_1, dots, a_{n-1} (-10^9 le a_i le 10^9), where a_i is the i-th element of a. It is guaranteed that the sum of n does not exceed 10^6 (sum n le 10^6). For each test case, print the answer on a separate line — the maximum possible sum of a non-empty subsequence with the condition that no two elements are adjacent in the original array.","solution":"def max_non_adjacent_sum(n, a): if n == 0: return 0 elif n == 1: return max(0, a[0]) prev2 = max(0, a[0]) prev1 = max(prev2, a[1]) if n > 1 else prev2 for i in range(2, n): current = max(prev1, prev2 + a[i]) prev2 = prev1 prev1 = current return prev1 def solve(test_cases): results = [] for n, a in test_cases: results.append(max_non_adjacent_sum(n, a)) return results"},{"question":"**Problem Statement:** A group of friends plans a hiking trip where they need to bring water with them. They have n water bottles, each having a capacity of 500 ml or 1000 ml. They want to distribute the water bottles among two backpacks such that each backpack carries the same total amount of water, and no bottle is split between the backpacks. Determine if it\'s possible to distribute the water bottles equally by volume between the two backpacks. The first line contains an integer n (1 ≤ n ≤ 100) — the number of water bottles. The second line contains n integers c1, c2, ..., cn (ci = 500 or ci = 1000), where ci is the capacity of the i-th bottle. Output \\"YES\\" (without the quotes) if it is possible to divide the water bottles equally in terms of total volume between the two backpacks. Otherwise, print \\"NO\\" (without the quotes). **Examples:** Input: ``` 3 500 1000 500 ``` Output: ``` YES ``` Input: ``` 4 1000 1000 1000 500 ``` Output: ``` NO ``` **Explanation:** In the first test sample, you can give the first and third bottle to the first backpack and the second bottle to the second backpack, making both backpacks carry 1000 ml of water each. In the second test sample, it is not possible to divide the bottles equally as one backpack will always carry more volume than the other.","solution":"def can_distribute_equally(n, capacities): Determines if the water bottles can be equally distributed in terms of volume Parameters: n (int): number of water bottles capacities (list): list of integers representing the capacities of the bottles (500 or 1000) Returns: str: \\"YES\\" if it\'s possible to distribute equally, \\"NO\\" otherwise total_volume = sum(capacities) # If the total volume is odd, it\'s impossible to split equally if total_volume % 2 != 0: return \\"NO\\" half_volume = total_volume // 2 count_500 = capacities.count(500) count_1000 = capacities.count(1000) # Try to form half_volume using given counts of 500 and 1000 ml bottles for i in range(count_1000 + 1): if i * 1000 > half_volume: continue remaining = half_volume - (i * 1000) if remaining % 500 == 0 and remaining // 500 <= count_500: return \\"YES\\" return \\"NO\\""},{"question":"A company is organizing a competition where participants are required to solve programming and math problems. Each participant is assigned a unique ID in the form of a string. The company wants to ensure that each participant has a fair chance, so they have a rule to transform each participant\'s ID into a symmetric string. A string is called symmetric if it reads the same forward and backward. You are given an initial ID string s of length n (1 ≤ n ≤ 100) of lowercase Latin letters. Determine the minimum number of characters that need to be changed to make the string symmetric. The first line contains one integer n — the length of the string s. The second line contains the string s. Print one integer — the minimum number of character changes required to make the string symmetric.","solution":"def min_changes_to_make_symmetric(n, s): Given the length of the string n and the string s, returns the minimum number of changes required to make the string symmetric. count = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: count += 1 return count"},{"question":"A scientist is working on a research project involving DNA sequences and has to determine the longest common subsequence (LCS) among multiple DNA sequences. Given a list of DNA sequences, help the scientist determine the LCS. A subsequence is derived by deleting some or no characters from the original sequence without changing the order of the remaining characters. For example, if there are three DNA sequences \\"AGGTAB\\", \\"GXTXAYB\\", and \\"AGGTXAB\\", the LCS is \\"GTAB\\". Write a function: ```python def longest_common_subsequence(dna_sequences: List[str]) -> str: ``` where `dna_sequences` is a list of strings containing the DNA sequences. The function should return a string representing the LCS of the given sequences. If there are multiple LCS of the same maximum length, return any one of them. **Constraints:** - The number of DNA sequences, `k`, will be at least 2 and at most 50. - The length of each DNA sequence will be at least 1 and at most 50. - The DNA sequences contain only the characters \'A\', \'C\', \'G\', and \'T\'. **Input:** - A list of strings representing DNA sequences. **Output:** - A string representing the longest common subsequence. **Example:** Input: ``` [\\"AGGTAB\\", \\"GXTXAYB\\", \\"AGGTXAB\\"] ``` Output: ``` \\"GTAB\\" ``` Input: ``` [\\"ACGT\\", \\"CGTA\\", \\"GTAC\\"] ``` Output: ``` \\"AC\\" or \\"GT\\" (both are correct outputs as there can be multiple LCS of the same length) ``` Write a solution that considers the possible values of `k` and the maximum length of each sequence to ensure efficiency.","solution":"from typing import List def longest_common_subsequence(dna_sequences: List[str]) -> str: if not dna_sequences: return \\"\\" # Function to find LCS of two sequences def lcs(a, b): m, n = len(a), len(b) dp = [[\\"\\" for _ in range(n+1)] for _ in range(m+1)] for i in range(1, m+1): for j in range(1, n+1): if a[i-1] == b[j-1]: dp[i][j] = dp[i-1][j-1] + a[i-1] else: dp[i][j] = max(dp[i-1][j], dp[i][j-1], key=len) return dp[m][n] # Start with the first DNA sequence lcs_res = dna_sequences[0] # Iteratively find LCS with each next DNA sequence in the list for seq in dna_sequences[1:]: lcs_res = lcs(lcs_res, seq) if not lcs_res: # Early stopping if LCS becomes empty break return lcs_res"},{"question":"An array of positive integers is called \\"spirally sorted\\" if it can be arranged in a square matrix such that: 1. The integers are placed in a clockwise spiral starting from the top-left corner of the matrix. 2. The resulting numbers in the matrix must be in non-decreasing order from the top-left corner in a clockwise spiral sequence. Given a single integer `n`, determine the minimum spiral-sorted array of length `n^2` such that when arranged in a spiral order, it satisfies the conditions above. Write a function `spirally_sorted_array(n: int) -> List[List[int]]` that returns the spirally sorted array arranged in a square matrix. The output should be a list of lists representing the matrix. The matrix should have n rows and n columns. **Example:** Input: ``` 2 ``` Output: ``` [[1, 2], [4, 3]] ``` Explanation: For `n = 2`, the matrix size will be 2x2. The numbers in non-decreasing order from 1 to 4, placed in a spiral order, result in: ``` 1 2 4 3 ``` **Example:** Input: ``` 3 ``` Output: ``` [[1, 2, 3], [8, 9, 4], [7, 6, 5]] ``` Explanation: For `n = 3`, the matrix size will be 3x3. The numbers in non-decreasing order from 1 to 9, placed in a spiral order, result in: ``` 1 2 3 8 9 4 7 6 5 ``` Note: Be sure that your solution handles edge cases and is efficient in terms of both time and space complexity.","solution":"def spirally_sorted_array(n): Returns an n x n matrix that is spirally sorted. if n <= 0: return [] # Create a list with elements 1 to n^2 elements = list(range(1, n*n + 1)) # Create an n x n matrix filled with None matrix = [[None] * n for _ in range(n)] top, bottom = 0, n - 1 left, right = 0, n - 1 index = 0 while top <= bottom and left <= right: # Traverse from left to right for col in range(left, right + 1): matrix[top][col] = elements[index] index += 1 top += 1 # Traverse from top to bottom for row in range(top, bottom + 1): matrix[row][right] = elements[index] index += 1 right -= 1 if top <= bottom: # Traverse from right to left for col in range(right, left - 1, -1): matrix[bottom][col] = elements[index] index += 1 bottom -= 1 if left <= right: # Traverse from bottom to top for row in range(bottom, top - 1, -1): matrix[row][left] = elements[index] index += 1 left += 1 return matrix"},{"question":"Implement a data structure called `Cache` that supports the following operations efficiently: 1. `put(key, value)`: Insert or update the key-value pair into the cache. 2. `get(key)`: Retrieve the value associated with the given key. If the key doesn\'t exist in the cache, return -1. 3. `delete(key)`: Remove the key-value pair from the cache. 4. `peek()`: Retrieve one of the key-value pairs from the cache without removing it. The choice of which key-value pair to return is implementation-dependent. The cache should also support a constructor that takes a single integer parameter representing the maximum size of the cache. Once the cache reaches its maximum size, any additional `put` operations should automatically remove the least recently accessed key-value pair to make space for the new one. You should implement the cache in a way that all operations are as efficient as possible. Here is the method signature: ```python class Cache: def __init__(self, capacity: int): # Initialize the cache with the given capacity pass def put(self, key: int, value: int) -> None: # Insert or update the key-value pair into the cache pass def get(self, key: int) -> int: # Retrieve the value associated with the given key pass def delete(self, key: int) -> None: # Remove the key-value pair from the cache pass def peek(self) -> Tuple[int, int]: # Retrieve one of the key-value pairs from the cache pass ``` Implement the `Cache` class with the mentioned methods and ensure all operations adhere to the constraints. Use any internal data structures necessary to maintain cache state and operations.","solution":"from collections import OrderedDict class Cache: def __init__(self, capacity: int): self.capacity = capacity self.cache = OrderedDict() def put(self, key: int, value: int) -> None: if key in self.cache: self.cache.move_to_end(key) # Move the existing key to the end (latest position) self.cache[key] = value if len(self.cache) > self.capacity: self.cache.popitem(last=False) # Remove the first item (least recently used) def get(self, key: int) -> int: if key not in self.cache: return -1 self.cache.move_to_end(key) # Move the accessed key to the end (latest position) return self.cache[key] def delete(self, key: int) -> None: if key in self.cache: del self.cache[key] def peek(self) -> tuple: if self.cache: for k, v in self.cache.items(): return k, v return None"},{"question":"A gardener is designing a rectangular flower bed for a public park. The bed will be constructed using four types of flowers arranged in a specific sequence. The sequence repeats itself over rows and columns seamlessly. Given the sequence, determine the resulting arrangement within a specified section of the flower bed. In a sequence of flowers \\"ABCD\\", flowers \'A\', \'B\', \'C\', and \'D\' represent different types. For example, if the section to be considered starts at the 1st flower and goes upto the 8th flower, the flower arrangement in the section would be \\"ABCDABCD\\". The first line of the input contains a string s, a sequence of distinct characters representing different types of flowers. The second line contains two integers, n and m (1 ≤ n, m ≤ 100), where n is the number of rows and m is the number of columns in the specified section of the flower bed. Output the resulting arrangement of the flower bed in the specified section. Example input: ``` ABCD 3 4 ``` Example output: ``` ABCD ABCD ABCD ```","solution":"def flower_bed_arrangement(sequence, n, m): Returns a 2D list representing the flower bed arrangement. Args: sequence (str): A sequence of distinct flower types. n (int): Number of rows in the bed. m (int): Number of columns in the bed. Returns: List[List[str]]: 2D list representing the bed arrangement. # Length of the sequence length = len(sequence) # Generate the repeated sequence repeated_sequence = (sequence * (m // length + 1))[:m] # Generate the full flower bed return [repeated_sequence] * n"},{"question":"You are given a square grid of size n × n. Initially, all cells in the grid are empty. In each cell, you can place a number from 1 to n (inclusive), such that the number must be distinct within its row and column. Additionally, the sum of all numbers in any column must be equal to the sum of all numbers in any row. Write a program that constructs such a grid and prints it. If there are multiple solutions, any will be accepted. If no solution exists, the program should print \\"NO\\". # Input The only line of input contains a single integer n (1 ≤ n ≤ 1000). # Output If a solution exists, print \\"YES\\" on the first line. Then print n lines, each containing n integers that represent the grid. If no solution exists, print \\"NO\\". # Example Input ``` 3 ``` Output ``` YES 1 2 3 3 1 2 2 3 1 ``` Input ``` 1 ``` Output ``` YES 1 ``` Input ``` 2 ``` Output ``` NO ```","solution":"def construct_grid(n): if n == 2: print(\\"NO\\") return print(\\"YES\\") grid = [] for i in range(n): row = [(i + j) % n + 1 for j in range(n)] grid.append(row) print(\' \'.join(map(str, row))) # Example usage: # n = int(input()) # construct_grid(n)"},{"question":"In a certain country, the postal service has introduced a new system for delivering mails based on a priority system. Each mail has a priority level represented by a positive integer, and the delivery system guarantees that mails with higher priorities are delivered first. You are tasked with implementing a mail delivery simulation. The system should support the following operations: 1. **Add Mail**: Add a mail with a specified priority to the system. 2. **Deliver Mail**: Remove and return the mail with the highest priority from the system. If there are multiple mails with the same highest priority, return the one that was added first. 3. **Get Max Priority**: Return the highest priority level currently present in the system without removing any mails. If the system is empty, return -1. Implement a class `MailSystem` that supports these operations with the following methods: - `add_mail(priority: int)`: Adds a mail with the given priority to the system. - `deliver_mail() -> int`: Removes and returns the mail with the highest priority. If the system is empty, return -1. - `get_max_priority() -> int`: Returns the highest priority level currently present in the system. If the system is empty, return -1. **Input Format:** The first line contains an integer `Q` (1 ≤ Q ≤ 100,000), the number of operations. Each of the next `Q` lines contains one of the following operations: - `\\"1 priority\\"` where `priority` is a positive integer (1 ≤ priority ≤ 1,000,000) - Add Mail. - `\\"2\\"` - Deliver Mail. - `\\"3\\"` - Get Max Priority. **Output Format:** For each operation `\\"2\\"` and `\\"3\\"`, output the result of the operation on a new line. **Example:** Input: ```plaintext 7 1 5 1 1 1 3 3 2 3 2 ``` Output: ```plaintext 5 5 3 3 ``` In this example: - First, three mails with priorities 5, 1, and 3 are added. - The first \\"3\\" operation returns 5 as the highest priority. - The first \\"2\\" operation removes and returns the mail with the highest priority (5). - The second \\"3\\" operation returns 3 as the next highest priority. - The second \\"2\\" operation removes and returns the mail with the highest priority (3).","solution":"import heapq class MailSystem: def __init__(self): self.mail_heap = [] self.entry_count = 0 def add_mail(self, priority: int): # Use a negative priority to simulate max-heap behavior with heapq (which is a min-heap) heapq.heappush(self.mail_heap, (-priority, self.entry_count)) self.entry_count += 1 def deliver_mail(self) -> int: if not self.mail_heap: return -1 return -heapq.heappop(self.mail_heap)[0] def get_max_priority(self) -> int: if not self.mail_heap: return -1 return -self.mail_heap[0][0]"},{"question":"A popular e-commerce company is implementing a new inventory management system. Each product is identified by a unique positive integer ID. They want to ensure that their system can handle a wide range of IDs efficiently. You are given a list of product IDs and you need to implement a function that finds the smallest missing positive integer ID that is not present in the list. Your solution should have a time complexity of O(n). Implement a function `find_smallest_missing_id(ids)` that takes a list of integers `ids` representing the product IDs and returns the smallest missing positive integer ID. **Input:** - A single list of integers `ids` (1 ≤ length of list ≤ 105, 1 ≤ ids[i] ≤ 106). **Output:** - An integer representing the smallest missing positive integer ID. **Example:** Input: ``` [3, 4, -1, 1] ``` Output: ``` 2 ``` Input: ``` [1, 2, 0] ``` Output: ``` 3 ``` Note: - Negative numbers and zeros are not considered valid IDs and should be ignored in the search for the smallest missing positive integer. - You should optimize for both time and space complexity.","solution":"def find_smallest_missing_id(ids): Returns the smallest missing positive integer ID from the list of ids. n = len(ids) # Step 1: Clean the data by replacing negative values and zeros with n+1 for i in range(n): if ids[i] <= 0 or ids[i] > n: ids[i] = n + 1 # Step 2: Mark the present values within the range 1 to n for i in range(n): if abs(ids[i]) <= n: idx = abs(ids[i]) - 1 ids[idx] = -abs(ids[idx]) # Step 3: Find the first positive value\'s index for i in range(n): if ids[i] > 0: return i + 1 # Step 4: If all values from 1 to n are present, return n + 1 return n + 1"},{"question":"A security token company has an array of integers representing the token values they possess. They need to manage these tokens by grouping certain values together to form pairs. However, they can only form a pair if the sum of the two tokens is even, and each token can be used at most once. The goal is to maximize the number of such pairs. Given an array of token values, determine the maximum number of valid pairs that can be formed. The first line of input contains an integer n (1 leq n leq 10^5) — the number of tokens. The second line contains n space-separated integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9) — the values of the tokens. Output a single integer representing the maximum number of valid pairs that can be formed. **Sample Input 1:** ``` 5 1 2 3 4 5 ``` **Sample Output 1:** ``` 2 ``` **Sample Input 2:** ``` 4 2 4 6 8 ``` **Sample Output 2:** ``` 2 ``` **Explanation for Sample 1:** In the first input, you can form two pairs: (2,4) and (1,3). The token value 5 is left unpaired, resulting in the maximum number of pairs being 2. **Explanation for Sample 2:** In the second input, you can form two pairs: (2,4) and (6,8). All tokens are paired up, leading to the maximum number of pairs being 2.","solution":"def max_even_sum_pairs(tokens): Returns the maximum number of pairs that can be formed from the list of token values such that each pair\'s sum is even. even_count = sum(1 for token in tokens if token % 2 == 0) odd_count = len(tokens) - even_count # The maximum number of pairs is the sum of floor(even_count / 2) and floor(odd_count / 2) max_pairs = (even_count // 2) + (odd_count // 2) return max_pairs"},{"question":"Anna is organizing a fundraising event and she has a list of donations collected from different donors. She wants to find out the maximum number of unique donors whose total donations sum up to less than or equal to a target value. Each donor is identified by a unique ID and has a specific donation amount associated with them. Anna can select donors in any order, but she cannot pick a donor more than once. Your task is to help Anna determine the maximum number of unique donors whose total donation is less than or equal to the given target value. # Input The first line contains two integers n and target (1 le n le 10^5, 1 le target le 10^9) — the number of donors and the target sum of donations. The second line contains n integers d_1, d_2, dots, d_n (1 le d_i le 10^9), where d_i is the donation amount from the i-th donor. # Output Print the maximum number of unique donors whose total donation sum is less than or equal to the target value. # Example Input ``` 5 10 1 2 3 4 5 ``` Output ``` 4 ``` # Explanation In this example, Anna can select the donors with donation amounts 1, 2, 3, and 4 to get a total donation sum of 10, which matches the target value. She cannot pick the donor with 5 as that would exceed the target. Therefore, the maximum number of unique donors is 4.","solution":"def max_unique_donors(n, target, donations): Returns the maximum number of unique donors whose total donations sum up to less than or equal to the target value. Args: n (int): The number of donors. target (int): The target sum of donations. donations (list of int): List containing donation amounts from each donor. Returns: int: Maximum number of unique donors. # Sort the donation amounts in ascending order donations.sort() current_sum = 0 donor_count = 0 for donation in donations: if current_sum + donation <= target: current_sum += donation donor_count += 1 else: break return donor_count"},{"question":"Given a grid of size `n` x `n` filled with non-negative integers, your task is to find the maximum sum possible by selecting a sub-grid of size `k` x `k` from the given grid. The sub-grid should be selected in such a way that the sum of its elements is maximized. The first line of the input contains two integers `n` and `k` (1 ≤ k ≤ n ≤ 500). The next `n` lines contain `n` integers each, representing the grid itself. Each integer in the grid is in the range [0, 1000]. Your output should be a single integer, the maximum sum possible for a `k` x `k` sub-grid. **Example:** **Input:** ``` 4 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ``` **Output:** ``` 50 ``` **Explanation:** The sub-grid with the maximum sum is: ``` 11 12 15 16 ``` The sum of the selected sub-grid is 11 + 12 + 15 + 16 = 54.","solution":"def max_subgrid_sum(n, k, grid): Returns the maximum sum of a k x k sub-grid within the n x n grid. Args: n: The size of the grid (n x n). k: The size of the sub-grid (k x k). grid: A list of lists representing the grid. Returns: An integer representing the maximum sum of a k x k sub-grid. max_sum = 0 for i in range(n - k + 1): for j in range(n - k + 1): subgrid_sum = 0 for x in range(k): for y in range(k): subgrid_sum += grid[i + x][j + y] max_sum = max(max_sum, subgrid_sum) return max_sum"},{"question":"You are given an array of `n` integers where each element represents the number of widgets in a batch. A factory inspection team visits the factory and can inspect one batch at a time. They want to ensure quality by checking the number of widgets in consecutive batches, but they will only inspect batches if the difference in the number of widgets between two consecutive batches is strictly greater than 1. Determine the maximum number of batches the inspection team can inspect from the array following this rule. The first line of input contains a single integer `n` (1 ≤ `n` ≤ 1000) — the number of batches. The second line contains `n` integers separated by space representing the number of widgets in each batch. Print a single integer — the maximum number of batches the inspection team can inspect. # Example Input: 5 1 3 4 2 5 Output: 3 Explanation: One possible solution is to inspect batches with 1 widget, 3 widgets, and 5 widgets as the differences between consecutive batches are strictly greater than 1.","solution":"def max_batches_to_inspect(widgets): Given a list of integers representing the number of widgets in batches, this function returns the maximum number of consecutive batches the inspection team can inspect where the difference in the number of widgets between two consecutive batches is strictly greater than 1. n = len(widgets) if n == 0: return 0 # Initialize the max count and current count max_count = 1 # At least one batch can always be inspected current_count = 1 # Iterate through the list of widgets for i in range(1, n): if abs(widgets[i] - widgets[i-1]) > 1: current_count += 1 else: max_count = max(max_count, current_count) current_count = 1 # Compare the max_count one last time for the last segment inspected max_count = max(max_count, current_count) return max_count"},{"question":"A treasure map has been found in The Codingland! The map contains the coordinates of multiple treasures, and your goal is to help the adventurer, Alice, find the treasure that can be reached with the minimum effort. Alice is currently located at point (0,0) on a 2D plane and can move in four directions: up, down, left, and right. The effort required to reach a treasure at coordinates (x, y) is given by the Manhattan distance from Alice\'s starting point (0, 0) to the treasure coordinates, which is calculated as |x| + |y|. You are given the coordinates of N treasures on the 2D plane. Your task is to find the coordinates of the treasure that can be reached with the minimum effort and calculate the effort. Input: - The first line contains an integer N (1 ≤ N ≤ 100), the number of treasures. - The next N lines each contain two integers x and y separated by a space, representing the coordinates of the treasures. Output: - The only output line should contain two integers representing the coordinates of the treasure that can be reached with the minimum effort, followed by the minimum effort itself. Example: Input: 3 1 2 3 4 -1 -1 Output: -1 -1 2 In this example, the treasures are located at (1, 2), (3, 4), and (-1, -1). The minimum effort required is to reach the treasure at coordinates (-1, -1) which is 2.","solution":"def find_minimum_effort(N, coordinates): Given the number of treasures and their coordinates, find the one that can be reached with the minimum effort (Manhattan distance). Parameters: N (int): the number of treasures coordinates (list of tuples): list of (x, y) coordinates of the treasures Returns: tuple: the coordinates of the treasure that can be reached with the minimum effort, followed by the minimum effort itself. min_effort = float(\'inf\') treasure_coords = (0, 0) for x, y in coordinates: effort = abs(x) + abs(y) if effort < min_effort: min_effort = effort treasure_coords = (x, y) return treasure_coords + (min_effort,) # Example usage: # coordinates = [(1, 2), (3, 4), (-1, -1)] # print(find_minimum_effort(3, coordinates))"},{"question":"Given a directed graph represented as an adjacency list, determine whether the graph contains a cycle. Input: - The first line contains an integer ( n ) (( 1 le n le 10^5 )) — the number of nodes. - The second line contains an integer ( m ) (( 0 le m le 2 times 10^5 )) — the number of directed edges. - The next ( m ) lines each contain two integers ( u ) and ( v ) (( 1 le u, v le n )) — representing a directed edge from node ( u ) to node ( v ). Output: - Print \\"YES\\" if the graph contains a cycle, otherwise print \\"NO\\". Example: Input: ``` 4 4 1 2 2 3 3 4 4 2 ``` Output: ``` YES ``` Input: ``` 3 2 1 2 2 3 ``` Output: ``` NO ```","solution":"def is_cyclic(n, edges): from collections import defaultdict, deque graph = defaultdict(list) indegree = [0] * (n + 1) for u, v in edges: graph[u].append(v) indegree[v] += 1 queue = deque([i for i in range(1, n + 1) if indegree[i] == 0]) count = 0 while queue: node = queue.popleft() count += 1 for neighbor in graph[node]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) return count != n def contains_cycle(n, m, edge_list): if is_cyclic(n, edge_list): return \\"YES\\" else: return \\"NO\\""},{"question":"# Problem Statement **Implement a Function Query in a BST** Given a Binary Search Tree (BST) with unique integer values and a query value `k`, implement a function to find the value in the BST that is closest to `k`. If there are multiple values equally close to `k`, return the smallest one. # Function Signature ```python def findClosestValueInBST(tree: TreeNode, k: int) -> int: pass ``` # Input - `tree`: A `TreeNode` representing the root of the Binary Search Tree. - `k`: An integer value to query against the BST. # Output - Returns the value in the BST closest to `k`. # Example Input: ```python # BST: # 10 # / # 5 15 # / / # 2 5 13 22 # / # 1 14 tree = TreeNode(10, TreeNode(5, TreeNode(2, TreeNode(1)), TreeNode(5)), TreeNode(15, TreeNode(13, None, TreeNode(14)), TreeNode(22))) k = 12 ``` Output: ```python 13 ``` # Constraints - The number of nodes in the BST is in the range [1, 10^4]. - All nodes\' values are unique. - `-10^7 <= Node.val <= 10^7` - `-10^7 <= k <= 10^7` # Note: The function should execute in O(log N) time complexity on average, where N is the number of nodes in the BST. However, in the worst case, it can be linear in terms of complexity if the tree is highly unbalanced.","solution":"class TreeNode: def __init__(self, x, left=None, right=None): self.val = x self.left = left self.right = right def findClosestValueInBST(tree: TreeNode, k: int) -> int: closest = tree.val while tree: if abs(tree.val - k) < abs(closest - k): closest = tree.val if k < tree.val: tree = tree.left elif k > tree.val: tree = tree.right else: break return closest"},{"question":"You are given an array of integers representing the skill levels of n players in a game. You need to form the maximum number of teams under the following constraints: - Each team must consist of exactly 3 players. - The skill levels of the players in each team must follow a strict increasing order. Determine the maximum number of teams that can be formed. The first line of the input contains a single integer n (1 ≤ n ≤ 100,000) — the number of players. The second line contains n integers a_i (1 ≤ a_i ≤ 100,000) — the skill levels of the players. Print the maximum number of teams that can be formed. # Example Input: ``` 6 4 2 1 3 6 5 ``` Output: ``` 2 ``` Explanation: The teams that can be formed are: - Team 1: [1, 2, 3] - Team 2: [4, 5, 6] Another possible arrangement: - Team 1: [1, 3, 4] - Team 2: [2, 5, 6] In both arrangements, 2 teams can be formed.","solution":"def max_teams(skill_levels): Determine the maximum number of strictly increasing teams of 3 players that can be formed from the list of skill levels. Args: skill_levels (list of int): List of skill levels of players. Returns: int: Maximum number of teams that can be formed. skill_levels.sort() team_count = 0 n = len(skill_levels) i = 0 while i + 2 < n: if skill_levels[i] < skill_levels[i+1] < skill_levels[i+2]: team_count += 1 i += 3 else: i += 1 return team_count"},{"question":"You are given a sequence of integers a_1, a_2, dots, a_n, where each integer represents the height of a stack of blocks. You can perform the following operation on this sequence: choose any stack and either remove a block from the top or add a block to the top. Each addition or removal of a block counts as one operation. Your goal is to make all stacks the same height using the minimum number of operations. For example, if a = [1, 3, 2, 4], in one optimal way you can make: - Remove one block from the stack with height 4 to get [1, 3, 2, 3] (1 operation) - Remove one block from the stack with height 3 to get [1, 2, 2, 3] (1 operation) - Remove one block from the stack with height 3 to get [1, 2, 2, 2] (1 operation) - Add one block to the stack with height 1 to get [2, 2, 2, 2] (1 operation) You need to determine the minimum number of operations required to make all stacks the same height for each query. The first line contains an integer q (1 le q le 10^4) — the number of queries. Each query consists of two consecutive lines. The first line of each query contains an integer n (1 le n le 10^5) — the number of stacks. The second line of each query contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the heights of the stacks. It is guaranteed that the sum of all n across all queries does not exceed 10^5. For each query, print one integer — the minimum number of operations required to make all stacks the same height. **Example Input:** ``` 3 4 1 3 2 4 5 5 5 5 5 5 3 1 2 3 ``` **Example Output:** ``` 4 0 2 ``` **Explanation:** In the first query, you can make all stacks of height 2 with a total of 4 operations. In the second query, all stacks are already the same height, so 0 operations are required. In the third query, you can make all stacks of height 2 with a total of 2 operations.","solution":"def min_operations_to_equal_height(n, heights): from collections import Counter height_count = Counter(heights) max_frequency = max(height_count.values()) return n - max_frequency def process_queries(queries): results = [] for n, heights in queries: results.append(min_operations_to_equal_height(n, heights)) return results"},{"question":"You are given an array of integers. Your task is to determine the length of the longest contiguous subsequence where the absolute difference between any two consecutive elements is either 1 or 0. The first line of input contains a single integer n (1 ≤ n ≤ 100) — the number of elements in the array. The second line contains n integers separated by spaces — the elements of the array. Output a single integer representing the length of the longest contiguous subsequence meeting the condition described above.","solution":"def longest_contiguous_subsequence(arr): Returns the length of the longest contiguous subsequence where the absolute difference between any two consecutive elements is either 1 or 0. if not arr: # if the array is empty return 0 max_length = 1 current_length = 1 for i in range(1, len(arr)): if abs(arr[i] - arr[i - 1]) <= 1: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 return max(max_length, current_length)"},{"question":"A network security company is monitoring real-time data streams from various sensors installed in a server farm. Each sensor generates a signal at random intervals, creating a sequence of positive integers corresponding to the signal strengths. For example, a sequence generated by a sensor might look like this: [3, 1, 4, 1, 5, 9]. Due to transmission errors, some signals get corrupted, represented by the value -1. The company wants to filter out these corrupted signals and reconstruct the original sequence. If a sequence has been fully corrupted (i.e., only consists of -1), it should be identified and returned as an empty list. Design an algorithm to accomplish this task. Your task is to implement a function `reconstruct_sequence(n, signals)` that takes two arguments: an integer `n` (the number of signals) and a list `signals` of length `n` where each element is a signal strength or -1 indicating a corrupted signal. # Input - The first line contains an integer `n` (1 leq n leq 10^5) — the number of signals. - The second line contains `n` integers representing the signal strengths and corrupted signals, each between -1 and 10^9. # Output - If the sequence is fully corrupted (all elements are -1), output an empty list `[]`. - Otherwise, output a list containing only the valid signal strengths, in the same order they appeared in the input sequence. # Example Input: ``` 6 3 -1 4 -1 5 9 ``` Output: ``` [3, 4, 5, 9] ``` Input: ``` 4 -1 -1 -1 -1 ``` Output: ``` [] ``` **Note:** The reconstructed sequence should maintain the order of the signal strengths as they appeared in the input sequence.","solution":"def reconstruct_sequence(n, signals): Reconstruct the original sequence from the signals by filtering out corruptions. Parameters: n (int): The number of signals. signals (List[int]): The list of signals including corruptions represented by -1. Returns: List[int]: The list of valid signal strengths or an empty list if all signals are corrupted. return [signal for signal in signals if signal != -1]"},{"question":"In a kingdom, there are m magical trees. Each tree i has a height hi. Every day, the height of each tree grows by 1 unit. The king wants to find out after how many days, the height of the tallest tree will become at least x units without any intervention (i.e., just by natural growth). You are to write a program that calculates the number of days until the tallest tree reaches or exceeds the given height x. The first line of the input contains two integers m and x (1 ≤ m ≤ 100, 1 ≤ x ≤ 1000) — the number of trees and the height that needs to be reached respectively. The next line contains m integers h1, h2, ..., hm (1 ≤ hi ≤ 1000) — the initial heights of the trees. Output a single integer — the number of days until the tallest tree reaches or exceeds the height x. If the height x is already satisfied by one or more trees initially, print a single integer 0. **Example:** **Input:** ``` 3 10 6 8 5 ``` **Output:** ``` 2 ``` **Explanation:** Initially, the heights of the trees are [6, 8, 5]. After 2 days, the heights of the trees will be [8, 10, 7]. The tallest tree reaches or exceeds the height 10 in 2 days.","solution":"def days_until_tallest_tree_reaches_height(m, x, heights): Returns the number of days until the tallest tree reaches or exceeds the height x. Parameters: m (int): Number of trees. x (int): Target height. heights (list of int): Initial heights of the trees. Returns: int: Number of days until the tallest tree reaches or exceeds the height x. current_tallest = max(heights) if current_tallest >= x: return 0 days_needed = x - current_tallest return days_needed"},{"question":"In a small town, there is a river crossing where boats travel to carry goods from one side to the other. The river crossing operates on a schedule and each boat can carry a limited number of packages per trip. You are tasked with writing a program to help determine the minimum number of trips required for all the packages to be transported from the starting side to the destination side. Given: - An integer `n` representing the number of packages to be transported (1 ≤ n ≤ 100000). - An integer `c` representing the maximum capacity of each boat in terms of the number of packages it can carry per trip (1 ≤ c ≤ 1000). Your task is to calculate the minimum number of trips required to transport all `n` packages across the river. **Input:** - The first line of input contains an integer `n`, the number of packages. - The second line of input contains an integer `c`, the maximum capacity of the boat. **Output:** - Print the minimum number of boat trips needed to transport all the packages. **Examples:** - Input: ``` 10 3 ``` Output: ``` 4 ``` - Input: ``` 15 5 ``` Output: ``` 3 ``` Explanation: For the first example, with 10 packages and a boat capacity of 3 packages: - The boat can make 3 trips carrying 3 packages each. - After 3 trips, there will be 1 package left. - Therefore, a total of 4 trips are needed. For the second example, with 15 packages and a boat capacity of 5 packages: - The boat can make 3 trips carrying exactly 5 packages each. - Therefore, a total of 3 trips are needed.","solution":"def min_boat_trips(n, c): Calculate the minimum number of boat trips required to transport all packages. Parameters: n (int): Number of packages to be transported. c (int): Maximum capacity of the boat. Returns: int: Minimum number of boat trips. # Calculate number of full trips required full_trips = n // c # Check if there are remaining packages for an additional trip remaining_packages = n % c # If there are remaining packages, it requires one more trip if remaining_packages > 0: full_trips += 1 return full_trips"},{"question":"In a kingdom far, far away, there lives a wizard named Varell who loves organizing magical tournaments. He wants to create a single-elimination tournament where only the strongest wizard is crowned the champion. The tournament features n wizards, each having a unique power level. Varell has a list of power levels for the wizards, and he wants to determine the winning wizard by simulating the battles. In each round of the tournament, each wizard pairs up with another wizard (until no pairs can be formed), and the one with the higher power level in each pair proceeds to the next round. If there is an odd number of wizards in any round, one wizard gets a bye and automatically advances to the next round. You need to simulate the tournament and determine the power level of the winning wizard. Given an array of integers representing the power levels of the wizards, write a program that finds the power level of the winning wizard. **Input:** - The first line contains a single integer n (1 leq n leq 100) — the number of wizards. - The second line contains n integers p_1, p_2, ldots, p_n (1 leq p_i leq 1000) — the power levels of the wizards. **Output:** - Output a single integer — the power level of the winning wizard. **Example:** **Input:** ``` 5 3 6 2 8 5 ``` **Output:** ``` 8 ``` **Explanation:** - In the first round, pairs of wizards are (3, 6), (2, 8), and 5 gets a bye. - Winners proceed: 6, 8, 5 - In the second round, pairs are (6, 8) and 5 gets a bye. - Winners proceed: 8, 5 - In the final round, the pair is (8, 5). - Winner is: 8","solution":"def find_winning_wizard(n, power_levels): This function simulates the single-elimination tournament and finds the power level of the winning wizard. Parameters: n (int): The number of wizards. power_levels (list of int): The power levels of each wizard. Returns: int: The power level of the winning wizard. while len(power_levels) > 1: next_round = [] for i in range(0, len(power_levels)-1, 2): next_round.append(max(power_levels[i], power_levels[i+1])) if len(power_levels) % 2 == 1: next_round.append(power_levels[-1]) power_levels = next_round return power_levels[0]"},{"question":"A sick computer virus has infected a company\'s server, which can be visualized as a 2D grid of size m times n. The virus spreads every minute to all 4 neighboring cells (left, right, up, down) of every infected cell. A company engineer is attempting to clean the virus by isolating the infected area. Initially, the virus is contained in specific cells. You are given a grid where each cell contains only one of three values: - 1 represents a healthy cell - 2 represents an infected cell - 0 represents an isolated cell (quarantined, which the virus cannot pass through) The engineer needs to determine the minimum time required for the virus to spread to all healthy cells in the grid. If the virus cannot spread to certain healthy cells, return -1. The engineer hopes to contain the virus as efficiently as possible as time is of the essence. **Input Constraints:** - The grid size is m times n where 1 le m, n le 200 - Each element of the grid is either 0, 1, or 2 - There is at least one infected cell (value 2) in the grid - There are no negative values in the grid Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 50). Description of the test cases follows. The first line of each test case contains two integers m and n. The following m lines describe the rows of the grid, with each cell containing one of the three values (0, 1, 2). For each test case, output the minimum number of minutes required for the virus to spread to all healthy (1) cells in the grid. If impossible, output -1.","solution":"from collections import deque def virus_spread_time(m, n, grid): # Directions for neighboring cells (left, right, upward, downward) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque() minutes = 0 healthy_cells = 0 # Initialize the queue with all infected cells and count healthy cells for i in range(m): for j in range(n): if grid[i][j] == 2: queue.append((i, j, 0)) # (x, y, time) elif grid[i][j] == 1: healthy_cells += 1 # Perform BFS to spread the virus while queue: x, y, time = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if (0 <= nx < m) and (0 <= ny < n) and (grid[nx][ny] == 1): grid[nx][ny] = 2 # Mark the cell as infected queue.append((nx, ny, time + 1)) healthy_cells -= 1 minutes = max(minutes, time + 1) # If there are healthy cells remaining, return -1 if healthy_cells > 0: return -1 return minutes def handle_multiple_test_cases(t, test_cases): results = [] for test_case in test_cases: m, n, grid = test_case result = virus_spread_time(m, n, grid) results.append(result) return results"},{"question":"You are given an integer array `arr` consisting of `n` elements. You need to determine if the array contains three distinct indices `i`, `j`, and `k` such that `arr[i]`, `arr[j]`, `arr[k]` form an arithmetic progression. An arithmetic progression is a sequence of numbers such that the difference between consecutive terms is constant. The input consists of two lines. The first line contains an integer `n` (3 ≤ n ≤ 1000), the number of elements in the array. The second line contains `n` space-separated integers representing the elements of the array `arr` (1 ≤ arr[i] ≤ 10^6). Output \\"YES\\" (without quotes) if there exist three distinct indices `i`, `j`, and `k` such that `arr[i]`, `arr[j]`, `arr[k]` form an arithmetic progression. Otherwise, output \\"NO\\" (without quotes). Example: Input: ``` 5 4 1 3 5 10 ``` Output: ``` YES ``` In this example, `1`, `3`, `5` form an arithmetic progression with a common difference of 2.","solution":"def contains_arithmetic_progression(arr): Function to determine if there exist three distinct indices i, j, k such that arr[i], arr[j], arr[k] form an arithmetic progression. n = len(arr) # Using a set to store the elements for quick lookup arr_set = set(arr) # Iterate over every pair of the array for i in range(n): for j in range(i + 1, n): # Calculate the expected third element to form an arithmetic progression a_i = arr[i] a_j = arr[j] a_k = 2 * a_j - a_i # Check if this third element exist and is distinct if a_k in arr_set and a_k != a_i and a_k != a_j: return \\"YES\\" return \\"NO\\""},{"question":"A group of researchers is conducting a study on the ecological connectivity between islands in an archipelago. There are `n` islands in the archipelago, connected by `m` bidirectional bridges. Each bridge has a certain weight associated with it, representing the ease of animal migration between the two connected islands. The researchers are interested in understanding the minimum effort required to connect all the islands in such a way that all islands are accessible from any other island, directly or indirectly. This minimum effort is defined by the least sum of the weights of the bridges required to achieve this connectivity. Help the researchers by writing a program that determines the minimum effort required to make all islands mutually accessible. # Input: - The first line contains two integers `n` and `m` (1 ≤ `n` ≤ 1000, 0 ≤ `m` ≤ 200,000) — the number of islands and the number of bridges respectively. - The next `m` lines each contain three integers `u`, `v`, and `w` (1 ≤ `u`, `v` ≤ `n`, 1 ≤ `w` ≤ 1000), indicating there is a bridge between island `u` and island `v` with weight `w`. # Output: - Print the minimum total weight of the required bridges to connect all the islands. If it is not possible to connect all islands, print `-1`. # Sample Input 1: ``` 4 5 1 2 1 2 3 2 3 4 3 4 1 4 1 3 2 ``` # Sample Output 1: ``` 6 ``` # Sample Input 2: ``` 4 3 1 2 1 2 3 2 3 4 3 ``` # Sample Output 2: ``` 6 ``` # Sample Input 3: ``` 4 2 1 2 1 3 4 2 ``` # Sample Output 3: ``` -1 ``` In the first sample, the islands can be connected with bridges of weights 1, 2, and 3 for a total weight of 6. In the second sample, there are exactly enough bridges to connect all islands directly or indirectly. In the third sample, it\'s impossible to connect all the islands with the given bridges.","solution":"def find_minimum_effort(n, m, connections): Returns the minimum total weight of the required bridges to connect all islands. If it is not possible to connect all islands, returns -1. parent = list(range(n + 1)) rank = [0] * (n + 1) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 connections.sort(key=lambda x: x[2]) # Sort edges by weight total_weight = 0 num_edges_used = 0 for u, v, w in connections: if find(u) != find(v): union(u, v) total_weight += w num_edges_used += 1 if num_edges_used == n - 1: break # Check if all islands are connected root = find(1) for i in range(2, n + 1): if find(i) != root: return -1 return total_weight"},{"question":"Anna is a logistics manager and she needs to manage the loading and unloading of containers at a port. Each container has a unique identifier number. The containers are handled using a queue format, where containers are processed in the order they arrive. Anna can perform two types of operations: - Add a container to the queue with a specified identifier number. - Remove the container that has been in the queue the longest (i.e., the first container in the queue). Unfortunately, Anna does not remember the exact sequence of operations but recalls them based on some memory records. On each step, she remembers a particular operation and its order within the original sequence. Your task is to help Anna reconstruct the state of the queue after each remembered operation. The first line contains the integer n (1 ≤ n ≤ 10^5) — the number of operations Anna remembered. The next n lines contain the operations Anna remembered, each represented by two or three integers: - The index of the remembered operation in the original sequence (1 ≤ pi ≤ n). - The type of operation ti (0 or 1) — where ti equals 0 for removing the oldest container (dequeuing) and 1 for adding a new container (enqueuing). - If the operation is enqueuing (ti = 1), the line will also contain an integer xi (1 ≤ xi ≤ 10^6) — the identifier of the container being added to the queue. It is guaranteed that each integer from 1 to n is present exactly once among integers pi. Print n integers. Each integer should be the identifier of the container at the front of the queue after performing all the operations Anna has remembered until that step. If the queue is empty after performing these operations, print -1. Example: Input: 5 1 1 101 2 1 102 3 0 4 1 103 5 0 Output: 101 101 102 102 103 Explanation: 1. After the first operation (add container 101), the queue: [101] -> Front: 101 2. After the second operation (add container 102), the queue: [101, 102] -> Front: 101 3. After the third operation (remove oldest container), the queue: [102] -> Front: 102 4. After the fourth operation (add container 103), the queue: [102, 103] -> Front: 102 5. After the fifth operation (remove oldest container), the queue: [103] -> Front: 103","solution":"from collections import deque def manage_operations(n, operations): queue = deque() output = [] # Sort operations by their indexed order for processing operations.sort() for op in operations: if op[1] == 1: queue.append(op[2]) elif op[1] == 0: if queue: queue.popleft() if queue: output.append(queue[0]) else: output.append(-1) return output"},{"question":"You are given an array of n integers. In one operation, you can choose any contiguous subarray and reverse it. Determine the minimum number of operations required to sort the array in non-decreasing order. The first line contains a positive integer n (1 ≤ n ≤ 100) — the number of elements in the array. The second line contains n integers — the elements of the array. Output a single integer, the minimum number of operations required to sort the array in non-decreasing order. Example 1: ``` Input: 4 3 1 2 4 Output: 2 Explanation: Reverse the subarray [3, 1, 2] to get [2, 1, 3, 4], then reverse the subarray [2, 1] to get [1, 2, 3, 4]. ``` Example 2: ``` Input: 5 5 4 3 2 1 Output: 1 Explanation: Reverse the entire array in one operation to get [1, 2, 3, 4, 5]. ```","solution":"def min_operations_to_sort(arr): Returns the minimum number of operations required to sort the array in non-decreasing order. n = len(arr) sorted_arr = sorted(arr) if arr == sorted_arr: return 0 for l in range(n): for r in range(l, n): # Reverse subarray from l to r temp = arr[:l] + arr[l:r + 1][::-1] + arr[r + 1:] if temp == sorted_arr: return 1 return 2"},{"question":"You are given a binary tree. Your task is to find the sum of all nodes\' depths in the tree. The depth of a node in the tree is defined by the number of edges from the root node to that node. The structure of the binary tree is represented as follows: - The first line contains an integer `n` (1 leq n leq 10^5), the number of nodes in the tree. - The next `n-1` lines each contain two integers `u` and `v` (1 leq u, v leq n), which represents an undirected edge between nodes `u` and `v`. Your task is to calculate and print the sum of the depths of all nodes in the binary tree. # Input ``` 5 1 2 1 3 2 4 3 5 ``` In the above example, the binary tree looks like this: ``` 1 / 2 3 / 4 5 ``` # Output ``` 6 ``` # Explanation - Node 1 has depth 0 - Node 2 has depth 1 - Node 3 has depth 1 - Node 4 has depth 2 - Node 5 has depth 2 So, the sum of all depths is `0 + 1 + 1 + 2 + 2 = 6`. # Constraints - The tree is always connected - There are no cycles","solution":"def sum_of_depths(n, edges): from collections import defaultdict, deque # Create adjacency list adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) # BFS to calculate depths depth_sum = 0 visited = [False] * (n + 1) queue = deque([(1, 0)]) # (current_node, current_depth) visited[1] = True while queue: node, depth = queue.popleft() depth_sum += depth for neighbor in adj_list[node]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, depth + 1)) return depth_sum # Example usage edges = [(1, 2), (1, 3), (2, 4), (3, 5)] print(sum_of_depths(5, edges)) # Output should be 6"},{"question":"Hannah loves playing with letter sequences and recently she came across the idea of finding palindromes. A string is a palindrome if it reads the same backward as forward. Hannah wants to find the longest palindromic subsequence in a given string. A subsequence is a sequence derived by deleting some or no elements of the string without changing the order of the remaining elements. Help Hannah by writing a program to find the length of the longest palindromic subsequence in a given string. **Input:** - The first line contains a single integer t (1 le t le 100) – the number of test cases. - Each of the next t lines contains a string s (1 le |s| le 1000) containing only lowercase English letters. **Output:** - For each test case, output a single integer – the length of the longest palindromic subsequence in the given string. **Example:** ``` Input: 3 bbbab cbbd abcba Output: 4 2 5 ``` **Explanation:** - In the first test case, the longest palindromic subsequence is \\"bbbb\\". - In the second test case, the longest palindromic subsequence is \\"bb\\". - In the third test case, the longest palindromic subsequence is \\"abcba\\", which is the entire string as it is already a palindrome.","solution":"def longest_palindromic_subsequence(s): Return the length of the longest palindromic subsequence in the string s. n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n-1, -1, -1): dp[i][i] = 1 for j in range(i+1, n): if s[i] == s[j]: dp[i][j] = dp[i+1][j-1] + 2 else: dp[i][j] = max(dp[i+1][j], dp[i][j-1]) return dp[0][n-1] def solve(input_list): t = input_list[0] results = [] for i in range(1, t + 1): s = input_list[i] result = longest_palindromic_subsequence(s) results.append(result) return results"},{"question":"You are given a string S of length N, consisting only of uppercase and lowercase letters. You are allowed to make any number of substring deletions. Each time you choose a substring which is either entirely in uppercase or entirely in lowercase and remove it from the string. Determine the minimum number of operations needed to delete all characters from the string. The only input line contains the string S (1 ≤ N ≤ 100). Output a single integer - the minimum number of operations required to completely delete the string. For example, given the string \\"aAaaBBBccCD\\", the optimal sequence of deletions is: 1. Delete \\"aaa\\" 2. Delete \\"BBB\\" 3. Delete \\"cc\\" 4. Delete \\"A\\" 5. Delete \\"D\\" 6. Delete \\"C\\" So, the output should be 6.","solution":"def min_deletions(s): Returns the minimum number of deletions needed to delete all characters from the string. operations = 0 i = 0 while i < len(s): start = i # Continue while characters belong to the same case while i < len(s) and s[start].islower() == s[i].islower(): i += 1 operations += 1 return operations"},{"question":"Benny is an animal enthusiast and loves bringing different pets to exhibitions. Each pet has its own unique charm, and Benny wants to ensure that every exhibition showcases an equal display of charm. Each pet has a certain charm value initially: the i-th pet has ci units of charm. Benny can organize charm exchange games between two pets. In each game, if ci units of charm are exchanged from pet i to pet j, a fraction p (0 ≤ p ≤ 1) of the charm is lost in the process, meaning pet i will lose ci units and pet j will gain (1 - p) * ci units. Benny wants to understand the maximum equal charm value every pet can have after possibly several exchanges. First line of the input contains two integers m and p (1 ≤ m ≤ 10000, 0 ≤ p ≤ 1) — the number of pets and the percentage of charm lost during exchanges represented as a fraction. Next line contains m integers c1, c2, ..., cm — the charm values for the first, second, ..., m-th pet respectively (0 ≤ ci ≤ 1000, 1 ≤ i ≤ m). Output the maximum possible equal charm value that can be achieved for each pet after the charm exchanges. The absolute or relative error in the answer should not exceed 10^-6.","solution":"def max_equal_charm(m, p, charm_values): # Calculate the total charm of all pets total_charm = sum(charm_values) # Calculate the maximum equal charm per pet after exchanges max_charm = total_charm / m return max_charm"},{"question":"You are given a grid of size n x m representing a warehouse. The cells of the grid can contain either: - A \'.\' (dot) indicating an empty cell. - A \'#\' (hash) indicating a blocked cell. - A \'S\' indicating the start cell. - A \'E\' indicating the exit cell. You need to help a robot navigate from the start cell to the exit cell. The robot can move in four possible directions: up, down, left, and right. The robot cannot move outside the grid or through blocked cells. Design an algorithm that determines the minimum number of steps required for the robot to reach the exit cell from the start cell. If it is not possible for the robot to reach the exit, return -1. Input: - The first line contains two integers n and m (1 ≤ n, m ≤ 1000) - the number of rows and columns in the grid. - The next n lines each contain m characters representing the warehouse grid. Output: - Print a single integer, the minimum number of steps required for the robot to reach the exit, or -1 if it is not possible. Example: Input: 5 5 S...# .#.#. .#.#. ...#. .#..E Output: 8 In this example, the robot can navigate from the start cell at (1,1) to the exit cell at (5,5) in 8 steps, avoiding the blocked cells.","solution":"from collections import deque def min_steps_to_exit(n, m, grid): This function finds the minimum number of steps required for the robot to reach the exit cell from the start cell in a n x m grid. If it is not possible to reach the exit, it returns -1. # Find the starting and ending positions start = end = None for i in range(n): for j in range(m): if grid[i][j] == \'S\': start = (i, j) if grid[i][j] == \'E\': end = (i, j) if not start or not end: return -1 # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS initialization queue = deque([(start[0], start[1], 0)]) visited = set() visited.add(start) while queue: x, y, steps = queue.popleft() # If we reached the end cell if (x, y) == end: return steps # Explore all 4 directions for dx, dy in directions: nx, ny = x + dx, y + dy # Check if the new position is within the grid and not blocked or visited if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] != \'#\' and (nx, ny) not in visited: queue.append((nx, ny, steps + 1)) visited.add((nx, ny)) # If we exhaust the queue without finding the end return -1"},{"question":"A forest is defined as a collection of trees. You are given a forest consisting of m disjoint trees, each tree containing between 1 and k vertices (inclusive). Your task is to output information about the longest path in the forest. The length of the path is the number of edges on this path. Given the forest\'s structure, you need to return the length of the longest path in it. The input consists of: - An integer m (1 ≤ m ≤ 1000), the number of trees. - A list containing m integers, where the ith integer represents the number of vertices in the ith tree. The total number of vertices in all trees combined will be at most 100,000. Output: - A single integer denoting the length of the longest path in the forest. For example, if the forest has trees with 3, 5, and 2 vertices respectively, then the longest path in the forest would be between the furthest apart nodes in the largest tree with 5 vertices. Example input: 3 3 5 2 Example output: 4 Note: In the given example, the longest path is in the tree with 5 vertices, which has a maximum possible path length of 4 edges.","solution":"def longest_path_in_forest(m, tree_sizes): Returns the length of the longest path in a forest of disjoint trees. Parameters: m (int): The number of trees in the forest. tree_sizes (List[int]): A list containing the number of vertices in each tree. Returns: int: The length of the longest path in the forest. max_tree_size = max(tree_sizes) if tree_sizes else 0 return max_tree_size - 1 if max_tree_size > 0 else 0"},{"question":"Samantha is a cybersecurity expert and she is designing a new encryption algorithm. She wants to implement a method to check if a given string can be rearranged to form a palindrome. A palindrome is a word that reads the same backward as forward, such as \'madam\' or \'level\'. Samantha needs your help to write a function that determines if it is possible to rearrange the characters of the given string to form a palindrome. The function should take a single string as input and return a boolean value - `True` if the string can be rearranged to form a palindrome, and `False` otherwise. Input: - A single line containing a string s (1 ≤ |s| ≤ 1000), consisting of lowercase English letters. Output: - A single boolean value - `True` or `False`. Example: ```python print(can_form_palindrome(\\"civic\\")) # True print(can_form_palindrome(\\"ivicc\\")) # True print(can_form_palindrome(\\"hello\\")) # False print(can_form_palindrome(\\"aabb\\")) # True ``` Function Signature: ```python def can_form_palindrome(s: str) -> bool: pass ``` Considerations: - Assume the input string only contains lowercase English letters. - Aim for a solution that runs in linear time.","solution":"def can_form_palindrome(s: str) -> bool: Determines if the characters of the given string can be rearranged to form a palindrome. from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged to form a palindrome if at most one character has an odd count return odd_count <= 1"},{"question":"Evelyn is organizing a book club event, where each participant should read a unique book. Every book has an associated score indicating its popularity, and Evelyn wants to maximize the total score of the books chosen. However, due to the limited number of participants, Evelyn can select exactly k books from the collection. Given a list of n integers representing the scores of the books, help Evelyn determine the maximum total score she can achieve by selecting k books. Assume that each book has a unique score. The first line contains two integers n and k (1 ≤ k ≤ n ≤ 100), where n is the number of books and k is the number of books to be chosen. The second line contains n integers separated by spaces, representing the scores of the books (1 ≤ score ≤ 1000). Print the maximum total score Evelyn can achieve by selecting k books. Example: Input: 5 3 100 200 300 400 500 Output: 1200","solution":"def max_total_score(n, k, scores): Returns the maximum total score by choosing exactly k books from the given scores. Args: n (int): Number of books. k (int): Number of books to select. scores (list of int): List of scores for the books. Returns: int: The maximum total score. # Sort the list of scores in descending order sorted_scores = sorted(scores, reverse=True) # Select the top k scores max_score = sum(sorted_scores[:k]) return max_score"},{"question":"Design a function that takes a list of integers and a target integer, and returns all unique combinations of integers from the list that add up exactly to the target. Each integer in the list may only be used once in each combination. The solution set must not contain duplicate combinations. Write a function `find_combinations` that takes in two parameters: - a list of integers `nums` - an integer `target` The function should return a list of lists of integers, where each list represents a unique combination of integers from `nums` that add up to `target`. The integers in the list should be sorted and the order of the combinations in the output does not matter. # Example ```python find_combinations([10,1,2,7,6,1,5], 8) ``` Output: ```python [ [1, 1, 6], [1, 2, 5], [1, 7], [2, 6] ] ``` ```python find_combinations([2,5,2,1,2], 5) ``` Output: ```python [ [1, 2, 2], [5] ] ``` # Constraints - All numbers (including target) are positive integers. - The solution set must not contain duplicate combinations. - The function should handle cases where no combination can be found. - It is guaranteed that there will be no more than 150 possible combinations for the given list and target.","solution":"def find_combinations(nums, target): def backtrack(start, path, target): if target == 0: result.append(path) return if target < 0: return for i in range(start, len(nums)): if i > start and nums[i] == nums[i-1]: continue backtrack(i + 1, path + [nums[i]], target - nums[i]) nums.sort() result = [] backtrack(0, [], target) return result"},{"question":"A gourmet restaurant has n tables, each with a different number of chairs around it. Every day, the restaurant receives a list of reservations for guests, each reservation indicates the number of guests arriving. For each reservation, the restaurant needs to provide a table with enough chairs to accommodate all guests. Your task is to help the restaurant manager assign tables to reservations efficiently. For each reservation, find the table with the smallest number of chairs that can still fit all the guests. If no such table exists, mark the reservation as unassignable. Given n tables, each with a different number of chairs, and m reservations, write a function that returns a list indicating the table allocated to each reservation or mark it as unassignable. # Inputs - The first line contains an integer n (1 ≤ n ≤ 1000), the number of tables. - The second line contains n integers t1, t2, ..., tn (1 ≤ ti ≤ 1000), representing the number of chairs for each table. - The third line contains an integer m (1 ≤ m ≤ 1000), the number of reservations. - The fourth line contains m integers r1, r2, ..., rm (1 ≤ ri ≤ 1000), representing the number of guests for each reservation. # Outputs - Returns a list of n integers where the ith integer is the 1-based index of the table assigned to the ith reservation, or -1 if no table can accommodate the reservation. # Example Input ``` 5 2 8 5 4 10 4 6 3 1 7 ``` Output ``` 2 4 1 -1 ``` Explanation - For the first reservation of 6 guests, table 2 (8 chairs) is the smallest table that fits. - For the second reservation of 3 guests, table 4 (4 chairs) is the smallest table that fits. - For the third reservation of 1 guest, table 1 (2 chairs) is the smallest table that fits. - For the fourth reservation of 7 guests, no table can fit this reservation since the largest available table has only 10 chairs. # Implementation ```python def assign_tables_and_reservation(n, chairs, m, reservations): result = [] for guests in reservations: suitable_table = -1 min_chairs = float(\'inf\') for i in range(n): if chairs[i] >= guests and chairs[i] < min_chairs: min_chairs = chairs[i] suitable_table = i + 1 result.append(suitable_table) return result # Example: n = 5 chairs = [2, 8, 5, 4, 10] m = 4 reservations = [6, 3, 1, 7] print(assign_tables_and_reservation(n, chairs, m, reservations)) ```","solution":"def assign_tables_and_reservation(n, chairs, m, reservations): Assigns tables to reservations based on the number of guests and returns the list of table indices or -1 if no table is available. Parameters: n (int): The number of tables. chairs (list of int): The number of chairs at each table. m (int): The number of reservations. reservations (list of int): The number of guests for each reservation. Returns: list of int: List of assigned table indices or -1 for each reservation. result = [] for guests in reservations: suitable_table = -1 min_chairs = float(\'inf\') for i in range(n): if chairs[i] >= guests and chairs[i] < min_chairs: min_chairs = chairs[i] suitable_table = i + 1 result.append(suitable_table) return result"},{"question":"A company is organizing a coding competition and they need to minimize the total time taken by competitors to solve all problems. Each competitor solves problems at different rates and has a list of distinct times they each take to solve the individual problems. You need to assign the problems to each competitor in such a way that the total solving time is minimized. You are given an array `competitors` where `competitors[i]` represents the times taken by the i-th competitor to solve each problem. The length of each sub-array in `competitors` is the same, as all competitors solve the same number of problems. Each problem is distinct and appears exactly once in each competitor\'s sub-array with a different solving time. Your task is to determine the minimal total solving time by optimally assigning problems to competitors. Input: - An integer n (1 ≤ n ≤ 100), the number of competitors, and m (1 ≤ m ≤ 100), the number of problems. - A 2D list (`competitors`) containing n rows and m columns where each `competitors[i][j]` is an integer (1 ≤ competitors[i][j] ≤ 1000) representing the time taken by the i-th competitor to solve the j-th problem. Output: - A single integer representing the minimal total solving time. Examples: Input: ``` 2 3 [ [4, 2, 3], [3, 5, 1] ] ``` Output: ``` 6 ``` Explanation: Assign problem 1 to competitor 2, problem 2 to competitor 1, and problem 3 to competitor 1: Competitor 1 solves problem 2 and 3 taking 2 + 3 = 5 units of time. Competitor 2 solves problem 1 taking 1 unit of time. Total time is 5 + 1 = 6 units, which is minimal.","solution":"def minimal_total_solving_time(n, m, competitors): Given n competitors all solving m problems and their respective solving times, calculate the minimal total solving time when problems are assigned optimally. # Transpose the competitors matrix to get the time taken by different competitors for each problem competitors_transposed = list(zip(*competitors)) total_time = 0 # For each problem, pick the minimal time taken by any competitor for problem_times in competitors_transposed: total_time += min(problem_times) return total_time"},{"question":"Bob the Bunny is preparing for the annual carrot planting festival. He has n different types of carrot seeds and needs to plant them in such a way that he maximizes the aesthetic value of his carrot field. Bob defines the aesthetic value of the field as the number of unique sequences of carrot types, such that no two adjacent carrot plants can be of the same type. Help Bob determine the total number of unique sequences of length k that can be formed using his n types of carrot seeds, modulo 10^9 + 7. The first line contains two space-separated integers n and k, 1 ≤ n ≤ 1000 and 1 ≤ k ≤ 1000. Print a single integer, the number of unique sequences of length k that Bob can form, modulo 10^9 + 7. Example: Input: 3 2 Output: 6 Explanation: With 3 types of carrot seeds (let\'s call them A, B, and C), the unique sequences of length 2 where no two adjacent carrots are the same are: AB, AC, BA, BC, CA, CB. Six sequences in total.","solution":"MOD = 10**9 + 7 def count_unique_sequences(n, k): if k == 1: return n sequences_for_k_minus_1 = n sequences_for_k = n * (n - 1) for i in range(2, k): new_sequences_for_k = sequences_for_k * (n - 1) sequences_for_k = new_sequences_for_k % MOD return sequences_for_k % MOD"},{"question":"Given an array of integers, we want to rotate the array to the right by `k` steps, where `k` is a non-negative integer. This means that each element is moved `k` places to the right, and elements that move past the end of the array wrap around to the beginning. For example, given the array `nums = [1, 2, 3, 4, 5, 6]` and `k = 2`, the array should become `[5, 6, 1, 2, 3, 4]`. Input - The first input line contains two integers `n` (1 ≤ n ≤ 10^5) — the number of elements in the array, and `k` (0 ≤ k ≤ 10^9) — the number of steps to rotate the array. - The second line contains `n` space-separated integers `nums[i]` (0 ≤ nums[i] ≤ 10^9) — the elements of the array. Output Print the array after rotating it to the right by `k` steps. Example # Input ``` 6 2 1 2 3 4 5 6 ``` # Output ``` 5 6 1 2 3 4 ``` # Note In the example, rotating the array `[1, 2, 3, 4, 5, 6]` to the right by 2 steps results in the array `[5, 6, 1, 2, 3, 4]`. Your task is to implement a function that accomplishes this rotation effectively even for large values of `k`.","solution":"def rotate_array(nums, k): Rotates the array to the right by k steps. n = len(nums) k = k % n # To handle k greater than n return nums[-k:] + nums[:-k]"},{"question":"In a faraway land, there is a grid of size n x n filled with unique positive integers. The grid has a special property: whenever you pick a number from the grid, the sum of the numbers in the same row and column (excluding the picked number) is always even. Your task is to determine if such a grid configuration is possible for a given value of n. The input consists of a single integer n (1 ≤ n ≤ 500) - the size of the grid. Print \\"YES\\" if such a grid configuration is possible, otherwise print \\"NO\\". If \\"YES\\" is printed, also output the grid configuration with n rows and n columns. Each element must be a unique positive integer not exceeding 1,000,000,000. **Example:** Input: 3 Output: YES 1 2 3 4 5 6 7 8 9","solution":"def is_even_sum_grid_possible(n): Determines if an n x n grid with the given properties is possible. Returns \\"YES\\" and the grid configuration if possible, otherwise returns \\"NO\\". if n == 1: # For n=1, it\'s trivially possible return \\"YES\\", [[1]] # Generate a grid of size n x n with unique positive integers grid = [] num = 1 for i in range(n): row = [] for j in range(n): row.append(num) num += 1 grid.append(row) # In a sequential integer grid, the sum of any row will be the sum of an arithmetic series # We check the sum of elements in rows and columns, excluding a specific element, all will be even # Only need to consider as the sum of first n natural numbers is even for odd n and some other properties return \\"YES\\", grid"},{"question":"A city has n intersections connected by m bidirectional roads. The city plans to check the connectivity of its road network by verifying if there exists a path between every pair of intersections. Consider the city as an undirected graph where intersections are nodes and roads are edges. You need to determine if the graph is connected. A graph is considered connected if there is a path between any two intersections. Input: - The first line contains two integers, n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 5000) — the number of intersections and roads respectively. - The following m lines contain two integers each, u and v (1 ≤ u, v ≤ n) — denoting a road between intersections u and v. Output: - Print \\"YES\\" if the city is connected, otherwise print \\"NO\\". Example: Input: ``` 5 4 1 2 2 3 3 4 4 5 ``` Output: ``` YES ``` Input: ``` 5 2 1 2 4 5 ``` Output: ``` NO ```","solution":"def is_city_connected(n, m, roads): Determines if a city\'s road network is connected. Args: n (int): The number of intersections. m (int): The number of roads. roads (List[Tuple[int, int]]): list of tuples where each tuple represents a road between intersections. Returns: str: \\"YES\\" if the city is connected, otherwise \\"NO\\". from collections import defaultdict, deque if n == 1: return \\"YES\\" graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) # Use BFS or DFS to check connectivity visited = set() def bfs(start): queue = deque([start]) visited.add(start) while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) bfs(1) if len(visited) == n: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a warehouse consisting of multiple aisles. Each aisle contains a certain number of packages. Your goal is to retrieve all the packages from the warehouse in an efficient manner. The warehouse is represented by an n × m grid, where each cell (i, j) represents an aisle with packages. The warehouse operator starts at the top-left corner of the grid, at cell (1, 1), and can move to adjacent cells either up, down, left, or right by one step at a time. The operator must visit all cells to retrieve the packages on all aisles but cannot visit the same cell more than once. The path can start and end at any cell. Each cell has a certain number of packages, and you need to determine the minimum total distance the operator will travel to retrieve all packages and return to the starting point or any cell. The cost of moving from one cell to an adjacent cell is always 1 unit distance. Input: - The first line consists of two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns, respectively. - The next n lines contain m integers each, where each integer represents the number of packages in that aisle (0 ≤ packages ≤ 100). Output: - Print a single integer — the minimum total distance required for the operator to retrieve all packages and return to the starting point or any cell. Example: ``` Input: 3 3 1 2 3 4 5 6 7 8 9 Output: 12 ``` Explanation: The operator can take one of the optimal paths within the grid to ensure all packages are retrieved with the minimum distance traveled. One such path could be down-right-right-up-up-left-down-right, ensuring all aisles are visited exactly once and minimizing the total travel distance.","solution":"def min_distance_to_retrieve_packages(n, m, grid): Returns the minimum distance required to retrieve all packages and potentially return to the start after collecting all packages. # The optimal path to cover all cells in an n x m grid is typically following a serpentine pattern. # The shortest route to visit each cell once and cover an entire grid is generally close to `n * m`. # If there are no specific rules about return, this distance does not double back, it just covers the grid once. return n * m - 1 # minimum distance to traverse all cells without revisiting any cell # Example usage: n = 3 m = 3 grid = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] print(min_distance_to_retrieve_packages(n, m, grid)) # Output: 8"},{"question":"Ollivander, the famous wandmaker, has been tasked with creating new wands for a prestigious magic school. Each wand is made from a selected magical wood and a core made from a magical creature. The wands differ in terms of power, determined by their magical wood and core combination. Ollivander receives a list of n wands, each wand characterized by two integers: its wood type and core type. Wands of the same wood type exhibit similar properties, and wands of the same core type have their distinct properties too. Ollivander wants to analyze the wands to find the most frequent characteristics. The task: Write a program to determine the most common wood type, the most common core type, and the power rating for each combination of wood type and core type. The power rating of a wand with a certain wood type w and core type c is given by: [ text{power}(w, c) = w times c ] Given this information, output the following: 1. The most common wood type. 2. The most common core type. 3. The maximum power rating among all wands. 4. The minimum power rating among all wands. If there\'s a tie for the most common wood or core type, choose the smallest numerical value. # Input: - The first line of input contains an integer n (1 ≤ n ≤ 100000), the number of wands. - Each of the next n lines contains two integers wi and ci (1 ≤ wi, ci ≤ 100000), representing the wood type and the core type of the i-th wand respectively. # Output: - Print four lines. The first line should be the most common wood type. The second line should be the most common core type. The third line should be the maximum power rating, and the fourth line should be the minimum power rating. # Example: Input: ``` 5 3 4 3 5 2 4 3 4 2 5 ``` Output: ``` 3 4 15 8 ``` # Explanation: - The wood types are [3, 3, 2, 3, 2] where the most common is 3. - The core types are [4, 5, 4, 4, 5] where the most common is 4. - The power ratings are [12, 15, 8, 12, 10] where the maximum power rating is 15 and the minimum power rating is 8.","solution":"def analyze_wands(n, wands): from collections import Counter wood_count = Counter() core_count = Counter() power_ratings = [] for w, c in wands: wood_count[w] += 1 core_count[c] += 1 power_ratings.append(w * c) most_common_wood = min([wood for wood, count in wood_count.items() if count == max(wood_count.values())]) most_common_core = min([core for core, count in core_count.items() if count == max(core_count.values())]) max_power_rating = max(power_ratings) min_power_rating = min(power_ratings) return most_common_wood, most_common_core, max_power_rating, min_power_rating # Example of function usage # n = 5 # wands = [(3, 4), (3, 5), (2, 4), (3, 4), (2, 5)] # print(analyze_wands(n, wands))"},{"question":"Andy has recently discovered a fascinating property of certain strings and wants to investigate them further. He defines a \\"nice\\" string as a string that contains an equal number of the characters \'a\' and \'b\'. Andy has a string s consisting of only the characters \'a\' and \'b\' and wants to determine if it is possible to rearrange the string into a \\"nice\\" string by performing at most one swap of any two characters in the string. Your task is to help Andy by writing a program that determines if the given string can be rearranged into a \\"nice\\" string by performing at most one swap of any two characters. The first line of input contains an integer n (1 ≤ n ≤ 10^5) representing the length of the string s. The second line contains the string s composed of characters \'a\' and \'b\'. Output \\"YES\\" if it is possible to rearrange the string into a \\"nice\\" string with at most one swap, otherwise output \\"NO\\". Sample Input: 6 aabbab Sample Output: YES","solution":"def can_be_nice_string(n, s): Determines if the string s of length n can be rearranged into a \\"nice\\" string with at most one swap. A \\"nice\\" string has an equal number of \'a\' and \'b\'. count_a = s.count(\'a\') count_b = s.count(\'b\') # To be a \\"nice\\" string, the counts of \'a\' and \'b\' must be equal if count_a == count_b: return \\"YES\\" # If counts differ by more than 2, it\'s impossible to fix with one swap if abs(count_a - count_b) > 2: return \\"NO\\" # Otherwise, check if one swap can balance the counts return \\"YES\\" if (abs(count_a - count_b) == 2 and n % 2 == 0) else \\"NO\\""},{"question":"Given a list of tasks, each task has a specific duration and a specific deadline. A task is considered late if it completes after its deadline. You have to determine the maximum number of tasks that can be completed without being late if you can only work on one task at a time. The first line of the input contains an integer n (1 ≤ n ≤ 100,000), the number of tasks. Each of the next n lines contains two integers di and ti (1 ≤ di, ti ≤ 1,000,000), where di is the duration of the task and ti is the deadline of the task. The output should be a single line with the maximum number of tasks that can be completed without being late. Example: Input: 5 3 9 2 8 1 5 6 12 2 7 Output: 4 Explanation: You can complete 4 tasks without being late, for example by choosing tasks with durations 1, 2, 2, and 3.","solution":"def max_tasks(tasks): Determines the maximum number of tasks that can be completed without being late. :param tasks: List of tuples where each tuple contains the duration and deadline of a task. :return: The maximum number of tasks that can be completed without being late. tasks.sort(key=lambda x: x[1]) # Sort tasks based on their deadlines. current_time = 0 count = 0 for duration, deadline in tasks: if current_time + duration <= deadline: current_time += duration count += 1 else: break return count # Example usage: # tasks = [(3, 9), (2, 8), (1, 5), (6, 12), (2, 7)] # print(max_tasks(tasks)) # Output: 4"},{"question":"An undeniable sequence of integers is called a \\"ljumber array\\" if its median is unique and present in the array. A median of an array is the middle element when the array is sorted. If the length of the array is odd, the median is the middle element. If the length is even, the median is the smaller of the two middle elements. Consider an array b of length m (3 leq m leq 3 cdot 10^5). The elements of b (1 leq b_i leq 10^9) are guaranteed to be distinct. You are given p operations (1 leq p leq 10^5). Each operation can be one of two types: - 1 x: Insert integer x into the array b. - 2: Find and output the median of the current array b. In the first line, provided will be a single integer p (1 leq p leq 10^5). Each of the next p lines will contain an operation to process. For each query of type 2, print the median of the array in its current state after it has been logged. **Example:** ``` Input: 6 1 5 1 10 2 1 7 2 1 2 Output: 7 7 ``` In the example above: - Initially, the array is empty. - After inserting 5 and 10, the array becomes [5, 10]. - The next \\"2\\" command asks for the median of [5, 10], which is 7. - After inserting 7, the array becomes [5, 7, 10]. - The next \\"2\\" command asks for the median of [5, 7, 10], which remains 7. - Finally, inserting 2 makes the array [2, 5, 7, 10] with median 5. The output demonstrates a practical analysis of median retrieval and updates in dynamic arrays.","solution":"import bisect def process_operations(p, operations): arr = [] results = [] for operation in operations: op = operation[0] if op == 1: x = operation[1] bisect.insort(arr, x) elif op == 2: mid_index = (len(arr) - 1) // 2 results.append(arr[mid_index]) return results"},{"question":"You\'re organizing a coding competition and need to record the scores of participants. Each participant submits their scores in multiple rounds, but only the top `k` scores of each participant should be considered for the final ranking. Your task is to compute the final score for each participant by summing their top `k` scores, and then rank all participants based on these computed final scores. In case of ties, participants with equal scores should be ranked in alphabetical order of their names. The first line of the input contains two integers `n` and `k` (1 ≤ n ≤ 100, 1 ≤ k ≤ 10), where `n` is the number of participants and `k` is the number of top scores to consider for each participant. The following `n` lines each contain a participant\'s name followed by their scores in multiple rounds. Each line contains a string `name` (which will be a single word) followed by several integers (1 ≤ score ≤ 100), representing that participant\'s scores in different rounds. Each participant has been scored in at least `k` rounds. Print the ranking after computing each participant\'s final score. Each line should contain the participant\'s name followed by their computed final score, sorted in descending order of the final score. In case of ties, participants should be sorted alphabetically by their names. # Example Input: ``` 3 2 Alice 9 12 8 7 Bob 10 15 12 Charlie 10 20 10 ``` Output: ``` Charlie 30 Bob 27 Alice 21 ``` # Explanation: - Alice: Top 2 scores are 12 and 9, with a sum of 21. - Bob: Top 2 scores are 15 and 12, with a sum of 27. - Charlie: Top 2 scores are 20 and 10, with a sum of 30. - Ranking participants by their final scores in descending order gives Charlie, Bob, and Alice.","solution":"def rank_participants(participant_data): n, k = participant_data[0] participants = participant_data[1:] final_scores = [] for participant in participants: name = participant[0] scores = sorted(participant[1:], reverse=True) final_score = sum(scores[:k]) final_scores.append((name, final_score)) final_scores.sort(key=lambda x: (-x[1], x[0])) result = [] for name, score in final_scores: result.append(f\\"{name} {score}\\") return result"},{"question":"Alice and Bob are playing a game with an array of integers. They take turns choosing numbers from the array, and the game continues until all numbers in the array are selected. On each player\'s turn, they must choose the smallest remaining number that is greater than the number they selected on their previous turn. The player who cannot make a move on their turn loses the game. The game starts with Alice choosing any number from the array, followed by Bob\'s turn, then Alice again, and so on. Given an array of integers, determine whether Alice can force a win if both players play optimally. If Alice can force a win, print \\"Alice\\", otherwise print \\"Bob\\". Input: - The first line contains an integer n (1 <= n <= 100), the size of the array. - The second line contains n integers a_i (1 <= a_i <= 10^9), the elements of the array. Output: - Print \\"Alice\\" if Alice can force a win, otherwise print \\"Bob\\". Example: Input: 3 1 2 3 Output: Alice Explanation: Alice can start by choosing 2. Then, regardless of Bob\'s choice, Alice will always be able to pick the remaining number on her next turn, forcing Bob to lose.","solution":"def game_winner(n, array): Determines if Alice can force a win in the game given the number of elements and the array of elements. if n % 2 == 1: return \\"Alice\\" else: return \\"Bob\\""},{"question":"Bacterial Colony Growth You are working in a lab studying bacterial colony growth. There are two trays placed side by side, each containing n test tubes in a straight line. An integer w (1 ≤ w ≤ 1000) is assigned to each pair of test tubes (one from each tray at the same position) representing the number of bacteria transferring between them daily. The experiment proceeds as follows: Every day, exactly half the bacteria from the first tray\'s test tube i (1 ≤ i ≤ n) is transferred to the second tray\'s test tube i, and exactly half the bacteria from the second tray\'s test tube i is transferred to the first tray\'s test tube i. Write a program to determine the total number of bacteria in each tray after d days of this experiment. We assume that number of bacteria can be a floating number, representable with sufficient precision using Python\'s float. The first line of input contains a positive integer n (1 ≤ n ≤ 1000) — the number of test tubes in each tray. The second line contains n space-separated floats — the initial number of bacteria in the test tubes of the first tray. The third line contains n space-separated floats — the initial number of bacteria in the test tubes of the second tray. The fourth line contains a single positive integer d (1 ≤ d ≤ 100) — the number of days the experiment is run. Output two lines. The first line should contain n space-separated floats representing the final number of bacteria in the test tubes of the first tray. The second line should contain n space-separated floats representing the final number of bacteria in the test tubes of the second tray. The floats should be presented with six digits of precision. In the first example, after one day, half of the bacteria from each test tube in the first tray are transferred to the corresponding test tubes in the second tray and vice versa. Repeating this process d times will result in the final bacterial count in each test tube. In the second example, with the initial counts of bacteria in each test tube given, your task is to perform the computation for the given number of days. Example: Input: 3 10.0 20.0 30.0 40.0 50.0 60.0 1 Output: 25.000000 35.000000 45.000000 25.000000 35.000000 45.000000","solution":"def bacterial_colony_growth(n, tray1, tray2, d): Returns the final number of bacteria in each test tube of both trays after d days. Parameters: n (int): Number of test tubes in each tray. tray1 (List[float]): Initial number of bacteria in the first tray. tray2 (List[float]): Initial number of bacteria in the second tray. d (int): Number of days the experiment is run. Returns: Tuple[List[float], List[float]]: The final number of bacteria in both trays. for _ in range(d): new_tray1 = [(tray1[i] + tray2[i]) / 2 for i in range(n)] new_tray2 = [(tray1[i] + tray2[i]) / 2 for i in range(n)] tray1 = new_tray1 tray2 = new_tray2 return tray1, tray2"},{"question":"A group of biologists is studying the movement patterns of a species of migratory birds. They have recorded the locations of these birds over a period of n days. On each day, the position of each bird is recorded as a point (x, y) on a 2D plane. Over time, they have hypothesized that birds tend to form clusters, and the biologists want to identify these clusters of birds. A cluster is defined as a group of birds such that the distance between any bird in the cluster to at least one other bird in the cluster is at most d. The distance between two birds located at (x1, y1) and (x2, y2) is calculated using the Euclidean distance formula. Two birds are said to belong to the same cluster if there is a sequence of birds connecting them where each bird in the sequence is within distance d of the next bird in the sequence. Given n and the coordinates of the birds over these n days, along with a distance d, the task is to find the number of clusters and the sizes of these clusters. # Input The first line contains two integers, n (1 ≤ n ≤ 1000) — the number of birds, and d (1 ≤ d ≤ 100), the maximum distance between two birds to be considered in the same cluster. Each of the next n lines contains two integers xi and yi (−1000 ≤ xi, yi ≤ 1000) — the coordinates of the birds. # Output Output the number of clusters formed. In the next line, output the sizes of these clusters in non-decreasing order. If multiple answers are possible, any correct answer will be accepted. # Example Input ``` 10 2 1 1 2 2 3 3 4 4 5 5 -1 -1 -2 -2 -3 -3 -4 -4 -5 -5 ``` Output ``` 2 5 5 ``` # Explanation In the given example, the birds form two clusters: one where the birds have positive coordinates and another where the birds have negative coordinates. Each cluster consists of 5 birds.","solution":"import math from collections import defaultdict def calculate_distance(bird1, bird2): return math.sqrt((bird1[0] - bird2[0])**2 + (bird1[1] - bird2[1])**2) def find_clusters(n, d, coords): def dfs(bird_index, visited, cluster): visited[bird_index] = True cluster.append(bird_index) for neighbor in adjacency_list[bird_index]: if not visited[neighbor]: dfs(neighbor, visited, cluster) # Create an adjacency list adjacency_list = defaultdict(list) for i in range(n): for j in range(i + 1, n): if calculate_distance(coords[i], coords[j]) <= d: adjacency_list[i].append(j) adjacency_list[j].append(i) visited = [False] * n clusters = [] for i in range(n): if not visited[i]: cluster = [] dfs(i, visited, cluster) clusters.append(cluster) cluster_sizes = sorted([len(cluster) for cluster in clusters]) return len(clusters), cluster_sizes"},{"question":"You are given an array of integers, where each integer represents the height of a block. The blocks are placed next to each other, forming a histogram. Your task is to calculate the maximum rectangular area that can be formed using these blocks without rearranging them. The first line contains a single integer n (1 ≤ n ≤ 100,000), the number of blocks. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 10^5), where hi represents the height of the i-th block. Print a single integer, the maximum area of a rectangle that can be formed within the histogram. Example: Input: 6 2 1 5 6 2 3 Output: 10","solution":"def max_histogram_area(heights): Calculate the maximum rectangular area that can be formed in a histogram. Parameters: heights (List[int]): List of integers representing the height of each block in the histogram. Returns: int: The maximum rectangular area. stack = list() max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Valera likes to play with numbers. One day, he found an interesting sequence and wants to know more about it. The sequence is constructed as follows: - It starts with a positive integer x. - For each next term in the sequence, Valera adds up the digits of the current term and appends this sum to the current term to form the new term. For example, if x is 13, the sequence would be: 13, 139, 1391, 13911, ... Valera got curious and now he wants to know how many distinct terms there are after k iterations, starting with the initial term x. Your task is to write a program that finds the number of distinct terms in the sequence after k iterations. The input consists of two integers x and k (1 ≤ x ≤ 10^9, 1 ≤ k ≤ 1000). Output a single integer - the number of distinct terms in the sequence after k iterations. Note: The terms may become very large, so make sure to handle large numbers effectively in your program.","solution":"def sum_of_digits(n): Returns the sum of the digits of a number n. return sum(int(digit) for digit in str(n)) def distinct_terms_count(x, k): Returns the number of distinct terms in the sequence after k iterations starting with x. sequence = set() current_term = x for _ in range(k): sequence.add(current_term) current_term = int(str(current_term) + str(sum_of_digits(current_term))) sequence.add(current_term) return len(sequence)"},{"question":"Robin is a boy who loves arranging books on a bookshelf. One day, Robin decided to rearrange his bookshelf which consists of n books. Each book is characterized by its height and width. Robin wants to place all the books in a row such that the total height of the books in the row is minimized. Robin also has an additional constraint: there are certain pairs of books which must be placed next to each other. Given a list of these constraints, help Robin determine the minimum possible total height of the bookshelf arrangement. The total height of the bookshelf row is defined as the height of the tallest book stacked on it. Each book can be represented as a tuple (h_i, w_i) where h_i is the height and w_i is the width of the i-th book. Input: - The first line contains an integer n (1 leq n leq 50) — the number of books. - The second line contains n integers h_1, h_2, ldots, h_n (1 leq h_i leq 50) — the heights of the books. - The third line contains n integers w_1, w_2, ldots, w_n (1 leq w_i leq 50) — the widths of the books. - The fourth line contains an integer m (0 leq m leq frac{n(n-1)}{2}) — the number of constraints. - The following m lines each contain two integers u and v (1 leq u, v leq n) indicating that book u must be placed next to book v. Output: - Print a single integer — the minimum possible total height of the bookshelf arrangement. Example: Input: ``` 4 10 20 30 40 5 5 5 5 2 1 2 3 4 ``` Output: ``` 40 ``` Explanation: The minimum height arrangement could be placing book 1 next to book 2 and book 3 next to book 4. Since the height of the tallest book is 40, the total height of the row is 40.","solution":"from itertools import permutations def minimum_bookshelf_height(n, heights, widths, constraints): # Create an adjacency list for the constraints graph = {i: [] for i in range(n)} for u, v in constraints: graph[u - 1].append(v - 1) graph[v - 1].append(u - 1) # Helper function to check if the arrangement follows all constraints def is_valid_order(order): order_map = {book: i for i, book in enumerate(order)} for u, v in constraints: if abs(order_map[u - 1] - order_map[v - 1]) != 1: return False return True books = list(range(n)) min_height = float(\'inf\') for perm in permutations(books): if is_valid_order(perm): current_height = max(heights[book] for book in perm) min_height = min(min_height, current_height) return min_height # Example usage n = 4 heights = [10, 20, 30, 40] widths = [5, 5, 5, 5] constraints = [(1, 2), (3, 4)] print(minimum_bookshelf_height(n, heights, widths, constraints)) # Output: 40 def minimum_possible_height(n, heights, widths, m, constraint_list): constraints = [(constraint_list[i], constraint_list[i+1]) for i in range(0, 2 * m, 2)] return minimum_bookshelf_height(n, heights, widths, constraints)"}]'),Y={name:"App",components:{PoemCard:A},data(){return{searchQuery:"",visibleCount:4,poemsData:j,isLoading:!1}},computed:{filteredPoems(){const r=this.searchQuery.trim().toLowerCase();return r?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(r)||e.solution&&e.solution.toLowerCase().includes(r)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(r=>setTimeout(r,1e3)),this.visibleCount+=4,this.isLoading=!1}}},S={class:"search-container"},N={class:"card-container"},F={key:0,class:"empty-state"},z=["disabled"],R={key:0},C={key:1};function P(r,e,h,m,a,s){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",S,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>a.searchQuery=o),placeholder:"Search..."},null,512),[[y,a.searchQuery]]),a.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>a.searchQuery="")}," ✕ ")):l("",!0)]),t("div",N,[(n(!0),i(w,null,_(s.displayedPoems,(o,f)=>(n(),x(p,{key:f,poem:o},null,8,["poem"]))),128)),s.displayedPoems.length===0?(n(),i("div",F,' No results found for "'+u(a.searchQuery)+'". ',1)):l("",!0)]),s.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...o)=>s.loadMore&&s.loadMore(...o))},[a.isLoading?(n(),i("span",C,"Loading...")):(n(),i("span",R,"See more"))],8,z)):l("",!0)])}const L=d(Y,[["render",P],["__scopeId","data-v-e931b54b"]]),M=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"deepseek/33.md","filePath":"deepseek/33.md"}'),D={name:"deepseek/33.md"},G=Object.assign(D,{setup(r){return(e,h)=>(n(),i("div",null,[v(L)]))}});export{M as __pageData,G as default};
