import{_ as c,o as n,c as r,a as t,m as h,t as d,C as g,M as _,U as y,f as u,F as b,p as v,e as w,q as x}from"./chunks/framework.B1z0IdBH.js";const q={name:"PoemCard",props:{poem:{type:Object,required:!0}}},k={class:"poem-container"},T={class:"review"},P={class:"review-title"},R={class:"review-content"};function A(i,e,l,m,s,a){return n(),r("div",k,[t("div",T,[t("div",P,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),h(d(l.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",R,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),h(d(l.poem.solution),1)])])])}const C=c(q,[["render",A],["__scopeId","data-v-8af20031"]]),I=JSON.parse(`[{"question":"Given the following code, create a function to find the length of the longest substring that does not have any repeating characters.","solution":"def longest_unique_substring(s): Returns the length of the longest substring that does not have any repeating characters. start = 0 max_length = 0 char_index_map = {} for end in range(len(s)): if s[end] in char_index_map and char_index_map[s[end]] >= start: start = char_index_map[s[end]] + 1 char_index_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Create a number guessing game in Python where the player has three attempts and the computer generates a random number between 0 and 100.","solution":"import random def number_guessing_game(): Runs a number guessing game. The computer generates a random number between 0 and 100. The player has three attempts to guess the correct number. number_to_guess = random.randint(0, 100) attempts = 3 while attempts > 0: try: player_guess = int(input(\\"Enter your guess (between 0 and 100): \\")) if player_guess < 0 or player_guess > 100: print(\\"Your guess is out of bounds. Please try again.\\") continue if player_guess == number_to_guess: print(\\"Congratulations! You guessed the correct number.\\") return True if player_guess < number_to_guess: print(\\"Your guess is too low.\\") else: print(\\"Your guess is too high.\\") attempts -= 1 print(f\\"You have {attempts} attempts left.\\") except ValueError: print(\\"Invalid input. Please enter an integer.\\") print(f\\"Sorry, you've used all your attempts. The correct number was {number_to_guess}.\\") return False"},{"question":"Task: To create a Python program that acts as a calculator. The program should accept two numbers and an arithmetic operation (addition, subtraction, multiplication, or division) as input and return the result of the operation.","solution":"def calculator(a, b, operation): Performs the given arithmetic operation on two numbers a and b. Valid operations are: 'add', 'subtract', 'multiply', 'divide'. if operation == 'add': return a + b elif operation == 'subtract': return a - b elif operation == 'multiply': return a * b elif operation == 'divide': if b == 0: raise ValueError(\\"Cannot divide by zero\\") return a / b else: raise ValueError(\\"Invalid operation. Valid operations are: 'add', 'subtract', 'multiply', 'divide'.\\")"},{"question":"Write a Python function to replace certain elements in a list. The function should iterate over the input list, and for each element that is a negative number, replace it with 0. However, to make the process more challenging, utilize a functional programming approach rather than the traditional for-loop structure. Handling multiple data types in the list is also required - in case of a non-integer or non-float type, replace it with None.","solution":"from typing import List, Union def replace_elements(input_list: List[Union[int, float, any]]) -> List[Union[int, float, None]]: Replace negative numbers with 0 and non-integer/float types with None. return list(map(lambda x: 0 if isinstance(x, (int, float)) and x < 0 else None if not isinstance(x, (int, float)) else x, input_list))"},{"question":"Write python code to find the kth smallest element in an unsorted list using quickselect algorithm.","solution":"import random def quickselect(arr, k): Returns the kth smallest element in an unsorted list using the Quickselect algorithm. if arr is None or len(arr) < k: return None def partition(left, right, pivot_index): pivot_value = arr[pivot_index] # move pivot to end arr[pivot_index], arr[right] = arr[right], arr[pivot_index] store_index = left # move all smaller elements to the left for i in range(left, right): if arr[i] < pivot_value: arr[store_index], arr[i] = arr[i], arr[store_index] store_index += 1 # move pivot to its final place arr[right], arr[store_index] = arr[store_index], arr[right] return store_index def select(left, right, k): Returns the k-th smallest element of list within left..right. if left == right: # If the list contains only one element return arr[left] pivot_index = random.randint(left, right) pivot_index = partition(left, right, pivot_index) if k == pivot_index: return arr[k] elif k < pivot_index: return select(left, pivot_index - 1, k) else: return select(pivot_index + 1, right, k) return select(0, len(arr) - 1, k - 1) # k-th smallest is the (k-1)th in zero indexing"},{"question":"Given the following numerical sequence: 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144... write a Python function that calculates the n-th Fibonacci number in this series using recursion.","solution":"def fibonacci(n): Returns the n-th Fibonacci number using recursion. if n <= 0: raise ValueError(\\"Input must be a positive integer.\\") elif n == 1 or n == 2: return 1 else: return fibonacci(n - 1) + fibonacci(n - 2)"},{"question":"Given a list of stock prices for 'n' days, where the stock price on the ith day is given by an array elements prices[i], write a program to find the maximum profit that can be achieved by making a single transaction after at most two transactions. Note that a transaction consists of buying and selling a stock on two different days, and you can't hold more than one stock at a time.","solution":"def maxProfit(prices): Returns the maximum profit achievable with at most two transactions. n = len(prices) if n == 0: return 0 # Forward pass to track maximum profit until each day with one transaction profit_one = [0] * n min_price = prices[0] for i in range(1, n): min_price = min(min_price, prices[i]) profit_one[i] = max(profit_one[i - 1], prices[i] - min_price) # Backward pass to track maximum profit from each day with one transaction profit_two = [0] * n max_price = prices[n - 1] for i in range(n - 2, -1, -1): max_price = max(max_price, prices[i]) profit_two[i] = max(profit_two[i + 1], max_price - prices[i]) # Combine the results of both passes max_profit = 0 for i in range(n): max_profit = max(max_profit, profit_one[i] + profit_two[i]) return max_profit"},{"question":"Devise a 17 character alphanumeric string with a custom base-32 algorithm in Python.","solution":"import random def generate_base32_string(length=17): Generates a 17 character alphanumeric string using a custom base-32 alphabet. Custom base-32 alphabet includes: A-Z, 0-5 base32_alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ012345' return ''.join(random.choices(base32_alphabet, k=length))"},{"question":"Suggest a Python program to execute a given block of code a specified number of times. However, you should now implement a custom function instead of using built-in functions.","solution":"def repeat_code(times, func, *args, **kwargs): Repeats the execution of a given function a specified number of times. Parameters: times (int): Number of times to execute the function. func (callable): The function to be executed. *args: Variable length argument list for the function. **kwargs: Arbitrary keyword arguments for the function. for _ in range(times): func(*args, **kwargs)"},{"question":"Develop a Python program that will build a random forest classifier for an input dataset. The path to the dataset is in CSV format. Additionally, the program should handle missing values and outliers in the dataset.","solution":"import pandas as pd from sklearn.ensemble import RandomForestClassifier from sklearn.model_selection import train_test_split from sklearn.impute import SimpleImputer from sklearn.preprocessing import StandardScaler def build_random_forest_classifier(csv_path): # Load the dataset data = pd.read_csv(csv_path) # Handle missing values using SimpleImputer imputer = SimpleImputer(strategy='mean') imputed_data = imputer.fit_transform(data) # Convert to DataFrame data = pd.DataFrame(imputed_data, columns=data.columns) # Detect and remove outliers - here we use the 1.5*IQR rule to filter outliers Q1 = data.quantile(0.25) Q3 = data.quantile(0.75) IQR = Q3 - Q1 data = data[~((data < (Q1 - 1.5 * IQR)) | (data > (Q3 + 1.5 * IQR))).any(axis=1)] # Split the data into features and target; assuming the last column is the target X = data.iloc[:, :-1] y = data.iloc[:, -1] # Split the dataset into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # Standardize the features scaler = StandardScaler() X_train = scaler.fit_transform(X_train) X_test = scaler.transform(X_test) # Build the Random Forest model model = RandomForestClassifier(n_estimators=100, random_state=42) model.fit(X_train, y_train) # Evaluate the model accuracy = model.score(X_test, y_test) return model, accuracy"},{"question":"Design a Python function capable of identifying identical elements present within two separate, sequentially ordered arrays. Additionally, the function should return these common elements in the form of a list, sorted in ascending order without any duplicates.","solution":"def find_common_elements(arr1, arr2): Returns a sorted list of unique elements that are common to both arr1 and arr2. # Convert arrays to sets to find common elements and remove duplicates set1 = set(arr1) set2 = set(arr2) # Find the intersection of both sets common_elements = set1 & set2 # Return a sorted list of common elements return sorted(list(common_elements))"},{"question":"What parameters does python multiprocessing's Pipe() take?","solution":"from multiprocessing import Pipe def create_pipe(duplex=True): Creates a pair of connection objects returned by Pipe() using the given parameters. Parameters: duplex (bool): If duplex is True (the default), then the pipe is bidirectional. If duplex is False then the pipe is unidirectional: conn1 can only be used for receiving messages and conn2 can only be used for sending messages. Returns: A tuple of (conn1, conn2) where conn1 and conn2 are connection objects. return Pipe(duplex)"},{"question":"Write a function that, given a string, returns the length of the string. However, you are not allowed to use any built-in functions or methods that directly give the length of a string, such as \`len()\` in Python. You must implement your own logic to count the characters in the string.","solution":"def string_length(s): Returns the length of the string \`s\` without using any built-in functions that directly give the length of the string. length = 0 for char in s: length += 1 return length"},{"question":"Given a list of integers, implement a Python function to find the smallest missing positive integer that is not present in the list. Make sure your function is efficient and works for large lists as well. You may assume that the list can contain duplicates, negative numbers, and zeros, but your answer should not consider these in finding the smallest missing positive integer.","solution":"def first_missing_positive(nums): Returns the smallest missing positive integer from the unsorted list nums. # Use a set to store all positive numbers in the list nums_set = set(nums) # Start checking from 1 upwards to find the missing positive integer missing_positive = 1 while missing_positive in nums_set: missing_positive += 1 return missing_positive"},{"question":"How can I create a Flask application with a custom authentication system in Python? Can you provide me with the necessary code and instructions?","solution":"from flask import Flask, request, session, jsonify, make_response from werkzeug.security import generate_password_hash, check_password_hash app = Flask(__name__) app.secret_key = 'supersecretkey' users = {} @app.route('/register', methods=['POST']) def register(): username = request.json.get('username') password = request.json.get('password') if username in users: return jsonify({'message': 'User already exists'}), 409 users[username] = generate_password_hash(password) return jsonify({'message': 'User registered successfully'}), 201 @app.route('/login', methods=['POST']) def login(): username = request.json.get('username') password = request.json.get('password') if username not in users or not check_password_hash(users[username], password): return jsonify({'message': 'Invalid credentials'}), 401 session['username'] = username return jsonify({'message': 'Logged in successfully'}), 200 @app.route('/protected', methods=['GET']) def protected(): if 'username' not in session: return jsonify({'message': 'Unauthorized'}), 401 return jsonify({'message': f'Hello {session[\\"username\\"]}, this is a protected route'}), 200 @app.route('/logout', methods=['POST']) def logout(): session.pop('username', None) return jsonify({'message': 'Logged out successfully'}), 200 if __name__ == '__main__': app.run(debug=True)"},{"question":"Given an integer input 'x', write a function that outputs a dictionary where the keys are integers from 1 to 'x' (both inclusive) and the values are 'Fizz' if the integer is divisible by 3, 'Buzz' if it is divisible by 5, 'FizzBuzz' if it is divisible by both 3 and 5, and the integer itself if it is not divisible by either 3 or 5.","solution":"def fizz_buzz_dict(x): Returns a dictionary where the keys are integers from 1 to 'x' (both inclusive) and the values are 'Fizz' if the integer is divisible by 3, 'Buzz' if it is divisible by 5, 'FizzBuzz' if it is divisible by both 3 and 5, and the integer itself if it is not divisible by either 3 or 5. result = {} for i in range(1, x + 1): if i % 3 == 0 and i % 5 == 0: result[i] = 'FizzBuzz' elif i % 3 == 0: result[i] = 'Fizz' elif i % 5 == 0: result[i] = 'Buzz' else: result[i] = i return result"},{"question":"Define a python function 'removeDupesAndReordering' that will not only remove any duplicate entries from a tuple, but should also change the order of entries in ascending order. Take into account the time complexity and optimize your function to run as efficient as possible.","solution":"def removeDupesAndReordering(t): Returns a tuple with unique entries sorted in ascending order. Parameters: t (tuple) : Input tuple containing elements Returns: tuple: Tuple containing unique elements in ascending order # Convert the tuple to a set to remove duplicates, then sort the set and convert back to tuple return tuple(sorted(set(t)))"},{"question":"Write a function in Python that takes a list of strings as input and returns a new list with the strings sorted by their length.","solution":"def sort_by_length(input_list): Returns a new list with the strings sorted by their length in ascending order. return sorted(input_list, key=len)"},{"question":"Suppose you are working on a 2D video game and you need to implement collision detection between two objects, say a player's character and an enemy. To do this, you decide to use an algorithm that involves calculating the distance between the two objects and comparing it against the sum of their radii. If the distance is less than or equal to the sum of the radii, then a collision is detected. If not, the two objects are considered to be not colliding.","solution":"import math def is_collision(x1, y1, r1, x2, y2, r2): Determine if there is a collision between two circles. Parameters: x1, y1: Coordinates of the center of the first circle. r1: Radius of the first circle. x2, y2: Coordinates of the center of the second circle. r2: Radius of the second circle. Returns: bool: True if there is a collision, False otherwise. distance = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) return distance <= (r1 + r2)"},{"question":"I'm looking for a programming challenge. Can you give me a problem to solve that involves a doubly linked list? The problem should require me to implement a method that detects if the list has a loop. If there is a loop, it should return the node where the loop starts or some indication of the loop, if there is no loop, it should return null or an appropriate message. Can you also provide a way to verify the correctness of the solution?","solution":"class Node: def __init__(self, data=None): self.data = data self.next = None self.prev = None class DoublyLinkedList: def __init__(self): self.head = None def append(self, data): new_node = Node(data) if self.head is None: self.head = new_node return last = self.head while last.next: last = last.next last.next = new_node new_node.prev = last def detect_loop(self): slow = self.head fast = self.head # Detect loop using Floyd's Cycle-Finding Algorithm while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: return self.find_loop_start(slow) return None def find_loop_start(self, loop_node): slow = self.head fast = loop_node while slow != fast: slow = slow.next fast = fast.next return slow"},{"question":"Create a dictionary of colors containing the values red, blue, green, and yellow. Additionally, add a nested dictionary for each color, with properties such as shade, intensity, and hex code. Write a function that takes the dictionary as input and returns the hex codes of the colors. The function should also handle the case where a color is not present in the dictionary, and return a default hex code of \\"#000000\\" in such cases.","solution":"def get_hex_codes(colors_dict): Returns a dictionary of colors and their hex codes. Defaults to \\"#000000\\" if a color is not present. Args: colors_dict (dict): A dictionary of colors with nested properties including 'shade', 'intensity', and 'hex'. Returns: dict: A dictionary mapping colors to their hex codes. color_hex_codes = {} default_hex = \\"#000000\\" for color in ['red', 'blue', 'green', 'yellow']: color_hex_codes[color] = colors_dict.get(color, {}).get('hex', default_hex) return color_hex_codes # Example dictionary of colors colors = { 'red': { 'shade': 'dark', 'intensity': 'high', 'hex': '#FF0000', }, 'blue': { 'shade': 'light', 'intensity': 'medium', 'hex': '#0000FF', }, 'green': { 'shade': 'medium', 'intensity': 'low', 'hex': '#00FF00', }, 'yellow': { 'shade': 'bright', 'intensity': 'high', 'hex': '#FFFF00', }, }"},{"question":"Write a Python program to convert a given temperature in Fahrenheit to Celsius. The program should also handle invalid input by displaying an error message and prompting the user to enter a valid temperature. The program should continue to prompt the user until a valid temperature is entered.","solution":"def fahrenheit_to_celsius(fahrenheit): Converts a given temperature in Fahrenheit to Celsius. Formula: (Fahrenheit - 32) * 5/9 return (fahrenheit - 32) * (5/9)"},{"question":"Create a python program to input an integer and find the next number which is a palindrome and also a prime number.","solution":"import math def is_palindrome(num): Checks if a number is a palindrome. return str(num) == str(num)[::-1] def is_prime(num): Checks if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(math.sqrt(num))+1, 2): if num % i == 0: return False return True def next_palindrome_prime(n): Finds the next number that is both a palindrome and a prime number. candidate = n + 1 while True: if is_palindrome(candidate) and is_prime(candidate): return candidate candidate += 1"},{"question":"Create the function \\"multiply_three_numbers\\" using the provided code, which accepts three integers (a, b, c) as parameters and returns their product. Consider adding input validation to ensure that the arguments passed are integers. In the instance that non-integer arguments are given, make the function throw a TypeError.","solution":"def multiply_three_numbers(a, b, c): Returns the product of a, b, and c. Parameters: a (int): The first integer. b (int): The second integer. c (int): The third integer. Returns: int: The product of a, b, and c. Raises: TypeError: If any of the arguments are not integers. if not all(isinstance(i, int) for i in (a, b, c)): raise TypeError(\\"All arguments must be integers.\\") return a * b * c"},{"question":"Write a function in Python to move the last element of a given list to the beginning of the list.","solution":"def move_last_to_first(lst): Moves the last element of the list to the beginning. Parameters: lst (list): The input list Returns: list: A new list with the last element moved to the beginning if not lst: return lst return [lst[-1]] + lst[:-1]"},{"question":"Write a function in Python that finds the maximum number in a list without using the built-in max function, any other sorting functions or looping constructs (like for or while). The function should handle negative numbers and return an error message if the list is empty. It should also do this in a single pass and without creating any additional lists or data structures.","solution":"def find_maximum(lst): Finds the maximum number in a list without using the built-in max function, sorting functions, or looping constructs, and returns an error message if the list is empty. Args: lst: list of integers or floats Returns: The maximum number in the list or an error message if the list is empty. if not lst: return \\"Error: The list is empty\\" def find_max_recursive(index, current_max): if index == len(lst): return current_max current_max = lst[index] if lst[index] > current_max else current_max return find_max_recursive(index + 1, current_max) return find_max_recursive(1, lst[0])"},{"question":"Create a neural network in PyTorch to predict the total number of sales of a retail store given the item details and past sales data.","solution":"import torch import torch.nn as nn import torch.optim as optim class SalesPredictionNN(nn.Module): def __init__(self, input_size, hidden_size, output_size): super(SalesPredictionNN, self).__init__() self.fc1 = nn.Linear(input_size, hidden_size) self.relu = nn.ReLU() self.fc2 = nn.Linear(hidden_size, hidden_size) self.fc3 = nn.Linear(hidden_size, output_size) def forward(self, x): out = self.fc1(x) out = self.relu(out) out = self.fc2(out) out = self.relu(out) out = self.fc3(out) return out def train(model, train_loader, criterion, optimizer, num_epochs): for epoch in range(num_epochs): for features, labels in train_loader: outputs = model(features) loss = criterion(outputs, labels) optimizer.zero_grad() loss.backward() optimizer.step() def predict(model, test_loader): model.eval() predictions = [] with torch.no_grad(): for features in test_loader: outputs = model(features) predictions.append(outputs) return torch.cat(predictions, dim=0)"},{"question":"Assemble a Python program that accepts an input in the form of a string and reverses the order of its characters without utilizing any Python built-in functions for reverse operations. The program should also handle null and error inputs gracefully.","solution":"def reverse_string(s): Returns the reversed version of the input string s. If input is None or not a string, return an appropriate error message. if s is None: return \\"Input is None\\" if not isinstance(s, str): return \\"Input is not a string\\" reversed_s = \\"\\" for char in s: reversed_s = char + reversed_s return reversed_s"},{"question":"Create a program that simulates a basic ATM machine. The program should allow users to check their balance, deposit money, withdraw money, and exit the program. Implement proper error handling for invalid inputs, such as non-numeric values for deposit and withdrawal amounts, withdrawal amounts greater than the available balance, and entering invalid options.","solution":"class ATM: def __init__(self, initial_balance=0): self.balance = initial_balance def check_balance(self): return self.balance def deposit(self, amount): if not isinstance(amount, (int, float)) or amount <= 0: raise ValueError(\\"Deposit amount must be a positive number.\\") self.balance += amount return self.balance def withdraw(self, amount): if not isinstance(amount, (int, float)) or amount <= 0: raise ValueError(\\"Withdrawal amount must be a positive number.\\") if amount > self.balance: raise ValueError(\\"Insufficient funds.\\") self.balance -= amount return self.balance def exit(self): return \\"Exiting the ATM. Have a nice day!\\""},{"question":"Create a function to check whether a number is a prime number using the Miller-Rabin primality test algorithm. Implement the function with a time complexity of O(log^3(n)) and space complexity of O(log(n)).","solution":"import random def is_prime(n, k=5): Miller-Rabin primality test to check if n is a prime number. k is the number of accuracy rounds. Returns True if n is prime, else False. if n <= 1: return False if n <= 3: return True if n % 2 == 0: return False # Write (n - 1) as 2^r * d r, d = 0, n - 1 while d % 2 == 0: r += 1 d //= 2 def miller_rabin_test(a, d, n, r): x = pow(a, d, n) if x == 1 or x == n - 1: return True for _ in range(r - 1): x = pow(x, 2, n) if x == n - 1: return True return False for _ in range(k): a = random.randint(2, n - 2) if not miller_rabin_test(a, d, n, r): return False return True"},{"question":"Construct an algorithm in Python to determine whether a given array A[1...N] can be partitioned such that the sum of elements in both partitions is equal.","solution":"def can_partition_equal_sum(arr): Returns True if the array can be partitioned into two subsets with equal sum, otherwise False. total_sum = sum(arr) # If total sum is odd, it cannot be partitioned into two equal sums if total_sum % 2 != 0: return False target = total_sum // 2 n = len(arr) # Dynamic programming approach dp = [False] * (target + 1) dp[0] = True for num in arr: for i in range(target, num - 1, -1): dp[i] = dp[i] or dp[i - num] return dp[target]"},{"question":"Given two sorted lists of numbers, write a Python function to merge the lists into a single list that remains sorted. Enhance your function to accept lists of varying lengths and values, and include checks for edge cases such as empty lists. Optimize your function for performance considering extensive input sizes.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into a single sorted list. Args: list1 (List[int]): The first sorted list. list2 (List[int]): The second sorted list. Returns: List[int]: A merged sorted list. merged_list = [] i = 0 j = 0 # Merge the lists while there are elements in both lists while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Append remaining elements, if any, from list1 while i < len(list1): merged_list.append(list1[i]) i += 1 # Append remaining elements, if any, from list2 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Write a program that accepts an array of integers and returns a boolean indicating whether every element is greater than 10.","solution":"def all_elements_greater_than_ten(arr): Returns True if all elements in the array are greater than 10, otherwise returns False. return all(x > 10 for x in arr)"},{"question":"i want to make a 2 layer neural network with RMSprop optimizer and relu activation in pytorch","solution":"import torch import torch.nn as nn import torch.optim as optim import torch.nn.functional as F class TwoLayerNN(nn.Module): def __init__(self, input_size, hidden_size, output_size): super(TwoLayerNN, self).__init__() self.fc1 = nn.Linear(input_size, hidden_size) self.fc2 = nn.Linear(hidden_size, output_size) def forward(self, x): x = F.relu(self.fc1(x)) x = self.fc2(x) return x # Instantiate the model, loss function, and optimizer def create_model(input_size, hidden_size, output_size, learning_rate): model = TwoLayerNN(input_size, hidden_size, output_size) criterion = nn.MSELoss() optimizer = optim.RMSprop(model.parameters(), lr=learning_rate) return model, criterion, optimizer"},{"question":"What is the best way to implement a multi-threaded program to print even numbers in Python?","solution":"import threading def print_even_numbers(n): Function to print even numbers up to n. for num in range(2, n+1, 2): print(num) def run_multithreaded_print(n, num_threads): Runs the print_even_numbers function in a multi-threaded manner. threads = [] for _ in range(num_threads): thread = threading.Thread(target=print_even_numbers, args=(n,)) threads.append(thread) thread.start() for thread in threads: thread.join()"},{"question":"Write a python script to calculate the running median of an input array of integers. The array will be input by the user, and the script should handle cases where the array is empty or contains non-integer values. The running median should be calculated after each new element is added to the array. Your script should also handle cases where the new element is repeated.","solution":"import heapq class RunningMedian: def __init__(self): self.min_heap = [] # For the larger half self.max_heap = [] # For the smaller half def add_number(self, num): # Add the new number to the correct heap if len(self.max_heap) == 0 or num <= -self.max_heap[0]: heapq.heappush(self.max_heap, -num) else: heapq.heappush(self.min_heap, num) # Balance the heaps if necessary if len(self.max_heap) > len(self.min_heap) + 1: heapq.heappush(self.min_heap, -heapq.heappop(self.max_heap)) elif len(self.min_heap) > len(self.max_heap): heapq.heappush(self.max_heap, -heapq.heappop(self.min_heap)) def get_median(self): if len(self.max_heap) > len(self.min_heap): return -self.max_heap[0] else: return (-self.max_heap[0] + self.min_heap[0]) / 2 def running_median(arr): if not all(isinstance(x, int) for x in arr): raise ValueError('Input array must contain integer values only.') med_calc = RunningMedian() medians = [] for num in arr: med_calc.add_number(num) medians.append(med_calc.get_median()) return medians"},{"question":"code for a function in python that compares two numbers a and b, and returns 1 if a is greater than b, 0 if a is less than b, and -1 if they are equal.","solution":"def compare(a, b): Compares two numbers a and b and returns: - 1 if a is greater than b - 0 if a is less than b - -1 if they are equal if a > b: return 1 elif a < b: return 0 else: return -1"},{"question":"Alter the provided code to not only display an asterisk-based pyramid structure but also invert the structure beneath the pyramid after the pyramid has been constructed. Make sure to adhere to the output's specifications and the base of the pyramid and inverted pyramid aligns perfectly with the apex, forming a hourglass shape.","solution":"def pyramid_and_inverted(n): Generates a pyramid and its inverted structure aligned to form an hourglass shape. lines = [] # Generate the pyramid for i in range(1, n+1): line = ' ' * (n - i) + '*' * (2 * i - 1) lines.append(line) print(line) # Generate the inverted pyramid for i in range(n-1, 0, -1): line = ' ' * (n - i) + '*' * (2 * i - 1) lines.append(line) print(line) return lines"},{"question":"I need to create a program that validates a 5-digit zip code. How can I accomplish this in Python?","solution":"import re def is_valid_zip_code(zip_code): Validates whether the provided zip_code is a valid 5-digit zip code. Parameters: zip_code (str): The zip code to validate. Returns: bool: True if zip_code is valid, False otherwise. return bool(re.fullmatch(r'd{5}', zip_code))"},{"question":"Write a Python function to identify the length of the longest word in a sentence. Additionally, your function should also return the longest word if there's a tie for the longest word, it should return the one that came first in the sentence. Make sure your function is efficient and handles edge cases well, such as when the input sentence is empty or contains only special characters.","solution":"def longest_word(sentence): Returns the length of the longest word in the sentence and the word itself. If there's a tie for the longest word, it returns the one that came first. Handles edge cases such as an empty sentence or sentences with only special characters or spaces. if not sentence: return 0, \\"\\" words = sentence.split() if not words: return 0, \\"\\" longest = \\"\\" for word in words: if len(word) > len(longest): longest = word return len(longest), longest"},{"question":"How can I build a program that determines if a given string is an anagram of another string?","solution":"def are_anagrams(s1, s2): Returns True if s1 and s2 are anagrams, False otherwise. return sorted(s1) == sorted(s2)"},{"question":"Complete the following code to shuffle an array of elements. The shuffled array should not be the same as the original or the reversed original. If the shuffled array is the same as the original or the reversed original, reshuffle until it is different.","solution":"import random def shuffle_array(arr): Shuffles the array such that it is not identical to the original or the reversed original. if not arr or len(arr) == 1: return arr original = arr[:] reversed_original = arr[::-1] while True: random.shuffle(arr) if arr != original and arr != reversed_original: break return arr"},{"question":"Create a Python program that generates the following output pattern based on the given number of rows. In addition to this, add validation to ensure that the input is a positive integer. If input is not valid, prompt the user to input a new number until a valid number is given.","solution":"def generate_pattern(rows): Generates a pattern based on the given number of rows. if not isinstance(rows, int) or rows <= 0: raise ValueError(\\"Input must be a positive integer\\") pattern = [] for i in range(1, rows + 1): pattern.append(' '.join('*' for _ in range(i))) return 'n'.join(pattern) def validate_input(user_input): Validates that the input string represents a positive integer. try: value = int(user_input) if value <= 0: raise ValueError() return value except ValueError: raise ValueError(\\"Input must be a positive integer\\")"},{"question":"Develop a recursive function that performs an operation on each integer within a nested list of unknown depth, such as [[1,2,[3]],4]. The operation should apply the Bitwise Exclusive OR operator (^) with 2 on each number, and additionally, count how many times a specific number appears in the list. The function should return the modified list and the count of the specified number's occurrences.","solution":"def xor_and_count(lst, num_to_count): Applies the Bitwise Exclusive OR operator (^) with 2 on each number within a nested list and counts how many times num_to_count appears in the list. Args: lst: A nested list of integers. num_to_count: The specific number to count occurrences of. Returns: A tuple containing the modified list and the count of num_to_count in the original list. updated_list = [] count = 0 def helper(sublist): nonlocal count result = [] for item in sublist: if isinstance(item, list): result.append(helper(item)) else: if item == num_to_count: count += 1 result.append(item ^ 2) return result updated_list = helper(lst) return updated_list, count"},{"question":"Suggest a method for creating a digital signature of an image that is robust to geometric transformations and can be quickly computed using Python. Additionally, provide a Python script to compare the similarity of two such signatures.","solution":"import numpy as np import cv2 def compute_image_signature(image_path): Computes a digital signature of an image that's robust to geometric transformations. Parameters: - image_path (str): The file path to the image. Returns: - signature (np.ndarray): A 64x64 numpy array containing the image signature. # Read image img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE) # Resize image to 64x64 img_resized = cv2.resize(img, (64, 64)) # Compute 2D Fourier Transform f_transform = np.fft.fft2(img_resized) # Shift zero frequency component to the center fshift = np.fft.fftshift(f_transform) # Compute magnitude spectrum magnitude_spectrum = np.log(np.abs(fshift) + 1) return magnitude_spectrum def compare_signatures(signature1, signature2): Compares two image signatures by calculating the mean squared error (MSE). Parameters: - signature1 (np.ndarray): The first image signature. - signature2 (np.ndarray): The second image signature. Returns: - mse (float): The mean squared error between the two signatures. if signature1.shape != signature2.shape: raise ValueError(\\"Signatures must have the same shape.\\") mse = np.mean((signature1 - signature2) ** 2) return mse"},{"question":"Given a list of n numbers and a number k, can you write a python program to find out the numbers in the list which are divisible by k?","solution":"def find_divisible_numbers(numbers, k): Returns a list of numbers in the input list that are divisible by k. :param list numbers: List of integers to check. :param int k: The divisor. :return: List of integers from the input list that are divisible by k. :rtype: list if k == 0: return \\"Division by zero is not allowed.\\" return [num for num in numbers if num % k == 0]"},{"question":"Take the array [3, 2, 1, 4, 5] as an example. Please write a function using QuickSort algorithm to sort the array, and in the process, illustrate the step-by-step operations on this array.","solution":"def quicksort(arr): Function to sort an array using the QuickSort algorithm. def _quicksort_helper(arr, low, high): if low < high: pivot_index = _partition(arr, low, high) _quicksort_helper(arr, low, pivot_index - 1) _quicksort_helper(arr, pivot_index + 1, high) def _partition(arr, low, high): pivot = arr[high] i = low - 1 for j in range(low, high): if arr[j] < pivot: i += 1 arr[i], arr[j] = arr[j], arr[i] arr[i + 1], arr[high] = arr[high], arr[i + 1] return i + 1 _quicksort_helper(arr, 0, len(arr) - 1) return arr"},{"question":"Create a code to calculate the most frequent character in a given string","solution":"def most_frequent_character(s): Returns the most frequent character in the given string \`s\`. If there are multiple characters with the same highest frequency, the first one encountered in the input string is returned. if not s: return None char_count = {} for char in s: char_count[char] = char_count.get(char, 0) + 1 most_frequent = max(char_count, key=char_count.get) return most_frequent"},{"question":"Implement a parallel (thread-based) version of the sequential algorithm to generate the first n prime numbers in Python.","solution":"import threading def is_prime(num): Returns True if the number is prime, else False. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while (i * i) <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def generate_primes(n): Generates the first n prime numbers using a parallel approach. primes = [] num = 2 lock = threading.Lock() def find_primes(): nonlocal num, primes while len(primes) < n: with lock: if len(primes) < n: if is_prime(num): primes.append(num) num += 1 threads = [] for _ in range(4): # Using 4 threads for parallel processing thread = threading.Thread(target=find_primes) thread.start() threads.append(thread) for thread in threads: thread.join() return primes[:n]"},{"question":"Create a Python program to calculate the median of a given list of numbers. The list may contain an odd or even number of elements. Ensure your program can handle lists with duplicate numbers and floating-point numbers. Implement the solution without using any built-in functions or libraries for sorting or calculating the length of the list, and without using any additional data structures.","solution":"def median(numbers): Returns the median of a list of numbers. Approach: 1. Sort the list using direct comparisons and swaps. 2. Compute the median based on sorted list properties. def sort_list(numbers): n = len(numbers) for i in range(n-1): for j in range(0, n-i-1): if numbers[j] > numbers[j+1]: numbers[j], numbers[j+1] = numbers[j+1], numbers[j] return numbers def list_length(lst): length = 0 for _ in lst: length += 1 return length sorted_numbers = sort_list(numbers[:]) n = list_length(sorted_numbers) if n % 2 == 0: middle1 = sorted_numbers[n // 2 - 1] middle2 = sorted_numbers[n // 2] return (middle1 + middle2) / 2.0 else: return sorted_numbers[n // 2]"},{"question":"Write a Python 2 function to calculate the dot product of two vectors represented as lists. Your function should also validate the inputs to ensure both vectors are of equal length. If they are not, raise a ValueError with a suitable error message.","solution":"def dot_product(vector1, vector2): Returns the dot product of two vectors represented as lists. Parameters: vector1 (list): The first vector. vector2 (list): The second vector. Raises: ValueError: If the vectors are not of equal length. if len(vector1) != len(vector2): raise ValueError(\\"Vectors must be of equal length\\") return sum(a * b for a, b in zip(vector1, vector2))"},{"question":"Create a Python function that parses a given string for a specific pattern defined by a regular expression and returns all occurrences of this pattern in a list. If there is no match, the function should return an empty list.","solution":"import re def find_pattern(s, pattern): Parses a given string for a specific pattern defined by a regular expression and returns all occurrences of this pattern in a list. :param s: The string to search within. :param pattern: The regular expression pattern to search for. :return: A list of all occurrences of the pattern in the string. return re.findall(pattern, s)"},{"question":"Generate code to find the maximum of two numbers a and b.","solution":"def max_of_two(a, b): Returns the maximum of two numbers a and b. return a if a > b else b"},{"question":"Create a method to sort the data by the public_id in descending order. However, you are not allowed to use any built-in sorting functions or libraries. You must implement the sorting algorithm yourself.","solution":"def sort_by_public_id_desc(data): Sorts a list of dictionaries by the 'public_id' key in descending order using bubble sort. n = len(data) for i in range(n): for j in range(0, n-i-1): if data[j]['public_id'] < data[j+1]['public_id']: data[j], data[j+1] = data[j+1], data[j] return data"},{"question":"Devise a Python function that determines if the number of divisors for a given number is odd, compiles a list of these divisors, calculates the product of these divisors, and identifies the lowest composite number among the divisors. The function should handle edge cases, such as when the number is 0 or 1, and manage substantial numbers without triggering a memory overflow.","solution":"import math from functools import reduce def is_odd_count_divisors(n): Determines if the number of divisors is odd, compiles a list of these divisors, calculates the product of these divisors, and identifies the lowest composite number among the divisors. Returns a tuple (is_odd_divisors, divisors_list, product_of_divisors, lowest_composite_divisor). if n == 0: return (False, [], 0, None) # Edge case for 0 if n == 1: return (True, [1], 1, None) # Edge case for 1 # Finding all divisors divisors = set() sqrt_n = int(math.sqrt(n)) + 1 for i in range(1, sqrt_n): if n % i == 0: divisors.add(i) divisors.add(n // i) divisors = sorted(divisors) is_odd_divisors = len(divisors) % 2 != 0 product_of_divisors = reduce(lambda x, y: x * y, divisors, 1) # Finding the lowest composite number among divisors lowest_composite = next((d for d in divisors if d > 1 and not is_prime(d)), None) return (is_odd_divisors, divisors, product_of_divisors, lowest_composite) def is_prime(num): Helper function to determine if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True"},{"question":"Suggest an efficient way to delete an item from a python list without using any built-in functions or methods like \`remove()\` or \`pop()\`. Your solution should have a time complexity of O(n).","solution":"def delete_item(arr, x): Deletes the first occurrence of x from the list arr without using built-in functions or methods. Parameters: arr (list): The list from which the item needs to be deleted. x : The item that needs to be deleted. Returns: list: The modified list after deleting the item. # Initialize a new list to store the result result = [] item_deleted = False # Iterate through the original list for item in arr: # Add item to the result only if it's not the element to be deleted if item != x or item_deleted: result.append(item) else: item_deleted = True return result"},{"question":"Write a Python program to sort a list in ascending order using the bubble sort algorithm.","solution":"def bubble_sort(arr): Sorts a list in ascending order using the bubble sort algorithm. n = len(arr) for i in range(n): # Last i elements are already in place for j in range(0, n-i-1): # Traverse the array from 0 to n-i-1 # Swap if the element found is greater # than the next element if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Currently I working on a snippet which returns me upcoming dates for holidays for a given country. However, the issue that I recognise is that we have public holidays on regular interval/frequency, for e.g. Onam is always on 22nd of August. So while my code doens't consider these public holidays. How do I detect such events?","solution":"from datetime import date import calendar def detect_recurring_holidays(holiday_dict): Returns the upcoming dates for the fixed-date holidays in the current year. Parameters: holiday_dict (dict): A dictionary where the key is the holiday name and the value is a tuple (month, day). Returns: dict: A dictionary where the key is the holiday name and the value is the date. current_year = date.today().year upcoming_holidays = {} for holiday, (month, day) in holiday_dict.items(): upcoming_holidays[holiday] = date(current_year, month, day) return upcoming_holidays"},{"question":"Could you provide an explanation of how to register a custom loss function in PyTorch? Additionally, could you discuss how this function can be used in the training loop, highlighting its interaction with gradients and backpropagation? I'm curious about the specifics of implementation and any potential pitfalls that one might encounter during this process.","solution":"import torch import torch.nn as nn class CustomLossFunction(nn.Module): def __init__(self): super(CustomLossFunction, self).__init__() def forward(self, output, target): # Example custom loss: Mean Squared Error with an additional penalty term mse_loss = nn.MSELoss()(output, target) penalty = torch.sum(torch.abs(output)) # L1 penalty return mse_loss + 0.1 * penalty # Function to simulate a training loop def train_model(model, data_loader, optimizer, loss_function, num_epochs=1): model.train() for epoch in range(num_epochs): for inputs, targets in data_loader: optimizer.zero_grad() outputs = model(inputs) loss = loss_function(outputs, targets) loss.backward() optimizer.step()"},{"question":"Create a recursive function that iterates through a deeply nested dictionary and prints all the keys and values. Test it using the provided data structure. Ensure it can handle any nested dictionaries or lists within the dictionary.","solution":"def print_nested_dict(d, indent=0): Recursively prints all keys and values in a nested dictionary. for key, value in d.items(): print(' ' * indent + str(key) + ':', end=' ') if isinstance(value, dict): print() print_nested_dict(value, indent + 4) elif isinstance(value, list): print() for item in value: if isinstance(item, dict): print_nested_dict(item, indent + 4) else: print(' ' * (indent + 4) + str(item)) else: print(value)"},{"question":"Generate a data-structure that can efficiently store an array of words, where each word is stored in a Trie data structure. Additionally, implement a method to search for a word in the data-structure, returning the number of occurrences of that word. The time complexity of both the insertion and search methods should be less than O(n), where n is the length of the word being inserted or searched. The space complexity should be less than O(m), where m is the total number of characters in all the words in the data-structure. You should also implement a method to delete a word from the data-structure, with a time complexity less than O(n).","solution":"class TrieNode: def __init__(self): self.children = {} self.end_of_word = False self.count = 0 class Trie: def __init__(self): self.root = TrieNode() def insert(self, word): node = self.root for char in word: if char not in node.children: node.children[char] = TrieNode() node = node.children[char] node.end_of_word = True node.count += 1 def search(self, word): node = self.root for char in word: if char not in node.children: return 0 node = node.children[char] if node.end_of_word: return node.count return 0 def delete(self, word): def _delete(node, word, depth): if not node: return False if depth == len(word): if node.end_of_word: node.end_of_word = False node.count = 0 return not bool(node.children) char = word[depth] if _delete(node.children.get(char), word, depth + 1): del node.children[char] return not bool(node.children) and not node.end_of_word return False _delete(self.root, word, 0)"},{"question":"Create a simple chatbot in Python using regular expressions. The chatbot should be able to recognize greetings, respond to basic inquiries, and handle farewells. Please explain your code so that it is understandable for beginners.","solution":"import re def chatbot_response(user_input): Generates a response to a user input string using regular expressions. Parameters: user_input (str): The input string from the user. Returns: str: The chatbot's response. # Convert input to lowercase for case insensitive matching user_input = user_input.lower() # Greeting responses if re.search(r'bhib|bhellob|bheyb', user_input): return \\"Hello! How can I help you today?\\" # Inquiries about the chatbot itself elif re.search(r'how are you', user_input): return \\"I'm just a bot, but I'm doing great! How about you?\\" # Farewell responses elif re.search(r'bbyeb|bgoodbyeb|bsee youb', user_input): return \\"Goodbye! Have a great day!\\" # Default response for unrecognized input else: return \\"I'm sorry, I don't understand. Can you please rephrase?\\" # Example usage: # print(chatbot_response(\\"Hi there!\\"))"},{"question":"Create a function in Python that solves the Fibonacci sequence with an input parameter of \\"n\\" to specify the length of the sequence.","solution":"def fibonacci_sequence(n): Returns a list containing the Fibonacci sequence of length n. Parameters: n (int): The length of the sequence. Returns: list: A list containing the Fibonacci sequence of length n. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] sequence = [0, 1] for i in range(2, n): sequence.append(sequence[-1] + sequence[-2]) return sequence"},{"question":"Given a string in Python, generate a new string with the same set of characters but in the reverse order. Your task is to create a function that accomplishes this, and to add a check function with provided data points to verify the correctness of your solution.","solution":"def reverse_string(s): Returns the given string in reverse order. return s[::-1]"},{"question":"Please write a Python function that determines if the number of divisors of a given integer is odd or even. Additionally, the function should identify if the integer is a perfect square. The function should return a tuple where the first element is a string stating \\"Odd Number of Divisors\\" or \\"Even Number of Divisors\\" and the second element is a boolean value that is True if the integer is a perfect square and False otherwise.","solution":"import math def divisor_properties(n): Returns a tuple where the first element is a string stating \\"Odd Number of Divisors\\" or \\"Even Number of Divisors\\" and the second element is a boolean value that is True if the integer is a perfect square and False otherwise. is_perfect_square = (math.isqrt(n) ** 2 == n) num_divisors = 0 for i in range(1, math.isqrt(n) + 1): if n % i == 0: if i * i == n: # Square root divisor counts as one num_divisors += 1 else: # Pair of divisors num_divisors += 2 if num_divisors % 2 == 0: divisor_type = \\"Even Number of Divisors\\" else: divisor_type = \\"Odd Number of Divisors\\" return (divisor_type, is_perfect_square)"},{"question":"Build a python function that scrapes data from a provided URL using BeautifulSoup and requests libraries, but also implements a functionality to filter and sort the scraped data. Filter the data based on specific keyword parameters provided to the function and sort them based on relevance and other keyword parameters. Consider edge cases such as handling non-responsive servers, timeouts, and invalid URLs. Remember to incorporate comment documentation on the code for clarity.","solution":"import requests from bs4 import BeautifulSoup def scrape_and_filter(url, filters, sort_key): Scrape data from a provided URL, filter based on specific keywords, and sort the results based on relevance and another specified key. Args: - url (str): The URL to scrape data from. - filters (list of str): List of keywords to filter the data. - sort_key (str): The key to sort the filtered data with. Returns: - List of dictionaries containing the filtered and sorted data. try: # Sending a HTTP request to the provided URL response = requests.get(url, timeout=5) response.raise_for_status() # Raise error for bad responses except (requests.exceptions.HTTPError, requests.exceptions.ConnectionError, requests.exceptions.Timeout, requests.exceptions.RequestException) as e: print(f\\"An error occurred while requesting data: {e}\\") return [] # Parsing the content of the page with BeautifulSoup soup = BeautifulSoup(response.content, 'html.parser') # Placeholder: This should be customized per the structure of the site being scraped data_elements = soup.find_all('desired_tag') # Create a list of dictionaries to store filtered data data = [] for element in data_elements: item = { 'title': element.find('desired_title').get_text(strip=True), 'description': element.find('desired_description').get_text(strip=True), 'other_key': element.find('desired_other_key').get_text(strip=True) } if any(filter_ in item['description'] or filter_ in item['title'] for filter_ in filters): item['relevance'] = sum(filter_ in item['description'] or filter_ in item['title'] for filter_ in filters) data.append(item) # Sorting the data based on relevance and the specified sort_key sorted_data = sorted(data, key=lambda x: (x['relevance'], x.get(sort_key, '')), reverse=True) return sorted_data"},{"question":"Given an array of integers, implement insertion sort to sort the array in descending order. However, you are not allowed to use any comparison-based sorting algorithm. You must find an alternative approach to solve this problem.","solution":"def counting_sort_desc(arr): Sorts an array of integers in descending order using counting sort. Parameters: arr (list of int): The array to be sorted. Returns: list of int: The sorted array in descending order. if not arr: return [] # Find the range of the numbers in the array, minimum and maximum min_val = min(arr) max_val = max(arr) # Create a count array to store the count of each unique object count = [0] * (max_val - min_val + 1) # Store the count of each number in the count array for num in arr: count[num - min_val] += 1 # Create the sorted array in descending order sorted_arr = [] for i in range(len(count) - 1, -1, -1): sorted_arr.extend([i + min_val] * count[i]) return sorted_arr"},{"question":"Generate 5 random strings of length 10 in Python. Each string should include at least one uppercase letter, one lowercase letter, and one digit.","solution":"import random import string def generate_random_string(): Generates a random string of length 10 containing at least one uppercase letter, one lowercase letter, and one digit. upper = random.choice(string.ascii_uppercase) lower = random.choice(string.ascii_lowercase) digit = random.choice(string.digits) # the rest of the string will be made from ascii_letters and digits other_chars = [random.choice(string.ascii_letters + string.digits) for _ in range(7)] # combine all characters result = list(upper + lower + digit + ''.join(other_chars)) # shuffle the characters to ensure randomness random.shuffle(result) return ''.join(result) def generate_random_strings(n=5): Generates n random strings each of length 10. return [generate_random_string() for _ in range(n)]"},{"question":"Create a Python function to compute the Fibonacci series up to a given number using recursion. Also, modify the function to handle large number inputs efficiently using memoization. Then, extend the function to calculate the nth Fibonacci number modulo m, where m is a large prime number. This function should be able to handle large numbers efficiently, even when computing modulo m.","solution":"def fibonacci(n, memo=None): Recursively computes the nth Fibonacci number using memoization for efficiency. :param n: The nth number in the Fibonacci series to compute. :param memo: Dictionary used to store previously computed Fibonacci numbers. :return: The nth Fibonacci number. if memo is None: memo = {} if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n] def fibonacci_mod(n, m): Computes the nth Fibonacci number modulo m. :param n: The nth number in the Fibonacci series to compute. :param m: The large prime number to take modulo with. :return: The nth Fibonacci number modulo m. # We use memoization and extend it to handle the modulo operation def fibonacci_mod_memo(n, m, memo): if n in memo: return memo[n] if n <= 1: return n memo[n] = (fibonacci_mod_memo(n-1, m, memo) + fibonacci_mod_memo(n-2, m, memo)) % m return memo[n] memo = {} return fibonacci_mod_memo(n, m, memo)"},{"question":"Design a Python function snippet to Display High Education: Exam Results for Engineer for Professionals. Implement if/else or switch/case statements to handle different conditions related to the Bias. Provide detailed comments explaining your control flow and the reasoning behind each decision. Here is a python function which displays high education exam results based upon user input regarding their field of interest as engineering professionals. The function uses \`if\` / \`elif\` conditional blocks alongside some basic string manipulation methods to determine how best to display information about available courses. Note that this is just one possible implementation approach - there may be other ways to achieve similar outcomes depending on specific requirements and data structures at hand.","solution":"def display_exam_results(person_role, exam_score): Function to display High Education Exam Results for Engineers and Professionals based on their role and exam score. Args: person_role (str): The role of the person (e.g., 'Engineer', 'Professional'). exam_score (int): The score achieved in the exam. Returns: str: Result message based on the role and score. if person_role == 'Engineer': if exam_score >= 90: return \\"Excellent! You have achieved a high distinction in your engineering exams.\\" elif exam_score >= 75: return \\"Great job! You have achieved a distinction in your engineering exams.\\" elif exam_score >= 50: return \\"Good effort! You have passed your engineering exams.\\" else: return \\"Unfortunately, you did not pass your engineering exams. Please try again.\\" elif person_role == 'Professional': if exam_score >= 85: return \\"Congratulations! You have achieved a high distinction in your professional exams.\\" elif exam_score >= 70: return \\"Well done! You have achieved a distinction in your professional exams.\\" elif exam_score >= 50: return \\"You have passed your professional exams.\\" else: return \\"Unfortunately, you did not pass your professional exams. Better luck next time.\\" else: return \\"Invalid role specified. Please enter either 'Engineer' or 'Professional'.\\""},{"question":"Generate a method in Python to sort a given list of dictionaries based on the 'age' key in descending order. The method should only consider dictionaries that have a 'name' key. If there are dictionaries without a 'name' key, they should be ignored during sorting. Additionally, the method should handle the case where two dictionaries have the same 'age' value by sorting them based on the 'name' key in ascending order. The method should return the sorted list of dictionaries.","solution":"def sort_by_age(data): Sorts a list of dictionaries based on 'age' in descending order and then by 'name' in ascending order for dictionaries that have a 'name' key. # Filter out dictionaries that do not have the 'name' key filtered_data = [d for d in data if 'name' in d] # Sort by 'age' in descending order and then by 'name' in ascending order sorted_data = sorted(filtered_data, key=lambda x: (-x['age'], x['name'])) return sorted_data"},{"question":"Create a Python program that simulates a guessing game. The program should generate a random number between 1 and 100, and ask the user to guess the number. If the user's guess is too high or too low, the program should give a hint (\\"Too high!\\" or \\"Too low!\\"). If the user guesses the correct number, the program should congratulate them and tell them how many attempts it took to guess correctly.","solution":"import random def guessing_game(): Simulates a guessing game where the user guesses a randomly generated number between 1 and 100. Provides hints if the guess is too high or too low and informs the user when they have guessed correctly along with the number of attempts. target = random.randint(1, 100) attempts = 0 guess = None while guess != target: guess = int(input(\\"Guess a number between 1 and 100: \\")) attempts += 1 if guess < target: print(\\"Too low!\\") elif guess > target: print(\\"Too high!\\") else: print(f\\"Congratulations! You've guessed the correct number in {attempts} attempts.\\") return attempts"},{"question":"Devise a code structure that carries out a binary search within a sorted, one-dimensional array of integers. Additionally, the function should include functionality to find either the first or last occurrence of a duplicate number if the array contains duplicates, based on an input flag. Discuss time and space complexity analysis of your solution.","solution":"def binary_search(arr, target, find_first=True): Performs binary search to find an element in a sorted array. If find_first is True, find the first occurrence of the target. If find_first is False, find the last occurrence of the target. Args: arr (list of int): A sorted list of integers. target (int): The integer value to search for. find_first (bool): Flag to indicate whether to find the first or last occurrence. Returns: int: The index of the target element, or -1 if not found. left, right, result = 0, len(arr) - 1, -1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: result = mid if find_first: right = mid - 1 # Look for first occurrence else: left = mid + 1 # Look for last occurrence elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return result # Time Complexity: O(log n) since we divide the search interval in half each time. # Space Complexity: O(1) since we are not using any additional space besides variables"},{"question":"Implement a function that takes a list as an argument and returns a new list with the even numbers from the original list. If the input is None, the function should return None.","solution":"def filter_even_numbers(lst): Returns a new list containing only the even numbers from the input list. If the input is None, returns None. if lst is None: return None return [num for num in lst if num % 2 == 0]"},{"question":"How do I create a Python program that removes punctuation marks from a given string?","solution":"import string def remove_punctuation(input_string): Removes punctuation marks from a given string. :param input_string: The string from which punctuation marks are to be removed. :return: String without punctuation marks. return input_string.translate(str.maketrans('', '', string.punctuation))"},{"question":"I have a list of integers and I want to find the two elements that have the largest sum. Can you help me write a code to achieve this? I want the code to be efficient and handle large lists as well.","solution":"def find_largest_sum_pair(arr): Returns a tuple of two elements from the list that have the largest sum. Assumes the list has at least two elements. # If array has fewer than 2 elements, return None if len(arr) < 2: return None # Initialize the first and second largest elements first, second = float('-inf'), float('-inf') for num in arr: if num > first: second = first first = num elif num > second: second = num return (first, second)"},{"question":"Write code in python to generate the first 10000 rows of Pascal's triangle.","solution":"def generate_pascals_triangle(n_rows): Generates the first n_rows of Pascal's Triangle. Args: n_rows : int : Number of rows to generate Returns: List of Lists : Representation of Pascal's Triangle if n_rows <= 0: return [] triangle = [[1]] for n in range(1, n_rows): row = [1] * (n + 1) for k in range(1, n): row[k] = triangle[n-1][k-1] + triangle[n-1][k] triangle.append(row) return triangle"},{"question":"Implement a function to compare two lists of numbers, and return a new list with the elements that are common to both lists. However, the function should also be able to take an optional third argument which is a function itself (like \`lambda\`, or any other function) that manipulates the comparison criterion. This means that instead of using the equality operator, it should use this third function to compare the elements. For example, this can be used to find the elements that are similar based on some property, such as being within a certain range of each other, or having the same digit sum, etc.","solution":"def compare_lists(list1, list2, comparator=lambda x, y: x == y): Returns a list of elements that are common to both lists based on the provided comparator function. Parameters: - list1: First list of numbers. - list2: Second list of numbers. - comparator: A function that takes two arguments and returns True if they meet the comparison criterion. Returns: - A list containing the elements that are common to both lists based on the comparator function. common_elements = [] for el1 in list1: for el2 in list2: if comparator(el1, el2): common_elements.append(el1) break # Ensure elements are added only once return common_elements"},{"question":"Write a python code to check if a given number is divisible by 7 or not. Additionally, the code should also check if the number is a perfect square and return the square root of the number if it is. The code should handle both positive and negative numbers.","solution":"import math def check_number_properties(number): Check if the number is divisible by 7 and if it is a perfect square. If it is a perfect square, return its square root. is_divisible_by_7 = number % 7 == 0 is_perfect_square = False square_root = None if number >= 0: sqrt = math.isqrt(number) is_perfect_square = sqrt * sqrt == number if is_perfect_square: square_root = sqrt return is_divisible_by_7, is_perfect_square, square_root"},{"question":"Design a Python function that extracts all the unique words from a given string, with consideration for word frequency and word length. Additionally, ensure the function ignores case sensitivity and punctuation.","solution":"import re from collections import defaultdict def extract_unique_words(text): Extracts unique words from the given text, ignoring case sensitivity and punctuation, and considers word frequency and length. Parameters: text (str): The input string from which to extract words. Returns: List[Tuple[str, int, int]]: A list of tuples where each tuple contains a word, its frequency, and its length. # Remove punctuation and convert to lowercase cleaned_text = re.sub(r'[^ws]', '', text).lower() words = cleaned_text.split() # Count frequency of each unique word word_freq = defaultdict(int) for word in words: word_freq[word] += 1 # Generate the list of unique words with their frequency and length unique_words_info = [(word, freq, len(word)) for word, freq in word_freq.items()] return unique_words_info"},{"question":"Please write a Python script that converts all JPG/JPEG images in a specific folder to PNG format while maintaining the same aspect ratio. Moreover, the script should append \\"_converted\\" to the original file name before the file extension. Additionally, the images must be resized to have a width of 800 pixels while keeping the same aspect ratio. Besides, the script should create a table that contains the original and the converted image file names, the date and time of the conversion, and the image dimensions. The script should also prompt the user to specify the folder that contains the images to be converted. If the user does not provide a valid folder path, the script should display an error message. Please make sure the script can handle images with different resolutions and orientations.","solution":"import os from PIL import Image import pandas as pd from datetime import datetime def convert_images_to_png(folder_path): Converts all JPG/JPEG images in the specified folder to PNG format, resized to 800px width while maintaining aspect ratio. Appends \\"_converted\\" to the original file name before the file extension. Parameters: folder_path (str): The path of the folder containing the images. Returns: DataFrame: A pandas DataFrame containing the original and converted file names, date and time of conversion, and image dimensions. if not os.path.isdir(folder_path): raise ValueError(\\"Provided path is not a valid folder\\") data = [] for filename in os.listdir(folder_path): if filename.lower().endswith(('.jpg', '.jpeg')): original_file_path = os.path.join(folder_path, filename) with Image.open(original_file_path) as img: # Resizing image while maintaining aspect ratio aspect_ratio = img.height / img.width new_width = 800 new_height = int(new_width * aspect_ratio) img = img.resize((new_width, new_height)) # Generating new file name base_name = os.path.splitext(filename)[0] new_filename = f\\"{base_name}_converted.png\\" new_file_path = os.path.join(folder_path, new_filename) # Saving the converted image img.save(new_file_path, \\"PNG\\") # Gathering data for the table conversion_info = { \\"Original Filename\\": filename, \\"Converted Filename\\": new_filename, \\"Conversion Date & Time\\": datetime.now().strftime(\\"%Y-%m-%d %H:%M:%S\\"), \\"Original Dimensions\\": f\\"{img.width}x{img.height}\\", } data.append(conversion_info) df = pd.DataFrame(data) return df if __name__ == \\"__main__\\": user_folder = input(\\"Please specify the folder path containing the images:\\") try: conversion_table = convert_images_to_png(user_folder) print(\\"Conversion completed successfully.\\") print(conversion_table) except ValueError as e: print(e)"},{"question":"Imagine you're teaching a student about Python programming. Now, you want to explain how to return multiple values from a function. To make the concept more interesting, consider a scenario where a student is managing a small library. They need to keep track of books, their authors, and the genres they belong to.","solution":"def get_book_info(): Returns a tuple of three lists: books, authors, and genres. books = [\\"Book1\\", \\"Book2\\", \\"Book3\\"] authors = [\\"Author1\\", \\"Author2\\", \\"Author3\\"] genres = [\\"Genre1\\", \\"Genre2\\", \\"Genre3\\"] return books, authors, genres"},{"question":"Generate a python code for implementing Bubble Sort on a numerical array.","solution":"def bubble_sort(arr): Sorts a numerical array using the bubble sort algorithm. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: # Swap if elements are in the wrong order arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Write a Python program to find the longest substring in a given string which has no repeating characters.","solution":"def longest_substring_without_repeating_characters(s): Returns the length of the longest substring without repeating characters. char_index_map = {} start = 0 max_length = 0 for end in range(len(s)): if s[end] in char_index_map and char_index_map[s[end]] >= start: start = char_index_map[s[end]] + 1 char_index_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Create a Python program that takes two lists as arguments, and returns a list that contains the elements present in both lists.","solution":"def list_intersection(list1, list2): Returns a list of elements that are present in both input lists. return [item for item in list1 if item in list2]"},{"question":"Create a python function which takes a list and a number and returns the list with the last n digits of each number.","solution":"def last_n_digits(lst, n): Returns a list where each element is the last n digits of the corresponding number in the input list. Args: lst: List of numbers (ints). n: Integer, number of digits to retain from the end of each number. Returns: List of numbers with the last n digits. if n <= 0: return [0 for _ in lst] return [abs(num) % (10 ** n) for num in lst]"},{"question":"Update the following code to add a method to retrieve elements from the list in reverse order. Additionally, modify the method to return a new MyList object containing the elements in reverse order. The reverse method should have a time complexity of O(n) and should not use any built-in functions or methods that directly reverse the list.","solution":"class MyList: def __init__(self, elements=None): if elements is None: self.elements = [] else: self.elements = elements def add_element(self, element): self.elements.append(element) def retrieve_elements_in_reverse(self): reversed_elements = [] for i in range(len(self.elements) - 1, -1, -1): reversed_elements.append(self.elements[i]) return MyList(reversed_elements)"},{"question":"Create a Python script snippet that Transforms Extreme Sneezing and coughing etiquette: Hand Hygiene After Sneezing or Coughing for Analysis for Professionals. Use if/else or switch/case statements to conditionally perform different actions based on the Safety. Dry-run, then include comments that outline the control flow and how you handle different scenarios.","solution":"def hand_hygiene(sneezed, coughed, washed_hands_after): Determines the next action based on sneezing/coughing etiquette and hand hygiene. :param sneezed: Boolean indicating whether the person sneezed. :param coughed: Boolean indicating whether the person coughed. :param washed_hands_after: Boolean indicating whether the person washed hands after sneezing/coughing. :return: A string message indicating the appropriate action. if sneezed or coughed: if washed_hands_after: return \\"Good job! You followed proper etiquette.\\" else: return \\"Please wash your hands to maintain proper hygiene.\\" else: return \\"No action needed, keep safe!\\" # Example usage result = hand_hygiene(True, False, False) print(result) # Output: Please wash your hands to maintain proper hygiene."},{"question":"Can you help me write Python code to create a 10x10 bi-diagonal matrix with ones on the diagonal and a continuous string of decreasing integers from 10 to 1 on the subdiagonal? Also, I need a method to check if the matrix has been constructed correctly.","solution":"import numpy as np def create_bidiagonal_matrix(): Creates a 10x10 bi-diagonal matrix with ones on the diagonal and decreasing integers from 10 to 1 on the subdiagonal. # Creating a 10x10 zero matrix matrix = np.zeros((10, 10), dtype=int) # Setting ones on the diagonal np.fill_diagonal(matrix, 1) # Setting decreasing integers from 10 to 1 on the subdiagonal for i in range(1, 10): matrix[i, i-1] = 10 - (i-1) return matrix def check_matrix(matrix): Checks if the given matrix is a 10x10 bi-diagonal matrix with ones on the diagonal and decreasing integers from 10 to 1 on the subdiagonal. # Check that the matrix is 10x10 if matrix.shape != (10, 10): return False # Check ones on the diagonal if not np.all(np.diag(matrix) == 1): return False # Check decreasing integers on the subdiagonal expected_subdiagonal = np.array([10 - i for i in range(9)]) actual_subdiagonal = np.diag(matrix, k=-1) if not np.array_equal(actual_subdiagonal, expected_subdiagonal): return False # Check that all other elements are zero for i in range(10): for j in range(10): if i != j and j != i-1 and matrix[i, j] != 0: return False return True"},{"question":"Create a function that calculates the length of a doubly linked list and also returns the sum of all the elements in the linked list, but with an added requirement. The function should ignore any negative values present in the linked list while calculating the sum.","solution":"class Node: def __init__(self, data): self.data = data self.next = None self.prev = None class DoublyLinkedList: def __init__(self): self.head = None def append(self, data): new_node = Node(data) if self.head is None: self.head = new_node return last = self.head while last.next: last = last.next last.next = new_node new_node.prev = last def doubly_linked_list_properties(dll): length = 0 sum_of_elements = 0 current = dll.head while current: length += 1 if current.data >= 0: sum_of_elements += current.data current = current.next return length, sum_of_elements"},{"question":"Write a python program to input n number of names and display the names who starts with vowel.","solution":"def names_starting_with_vowel(names): Returns a list of names that start with a vowel. :param names: List of names :return: List of names starting with a vowel vowels = 'aeiouAEIOU' return [name for name in names if name[0] in vowels] # Example usage: # names = [\\"Alice\\", \\"Eve\\", \\"Oscar\\", \\"Bob\\", \\"Uma\\", \\"Ian\\"] # print(names_starting_with_vowel(names)) # Output: ['Alice', 'Eve', 'Oscar', 'Uma', 'Ian']"},{"question":"The task is to write a 'flatfile' function that takes an input 'a' of dictionaries in nested lists and returns a list of all dictionaries. But there's a catch - some of the dictionaries may contain identical keys, and when that happens, the values corresponding to those keys need to be combined into a list. Each dictionary in your output list should also include a '_id' field that reflects its original position in the input list. Here are a few examples to clarify what I'm asking for. I've included an initial piece of code to get you started but there may be errors in it.","solution":"def flatfile(a): Flattens the nested lists of dictionaries, merging values with the same keys into lists. Each dictionary will have an '_id' representing its original position in the nested structure. Parameters: a (list): A nested list of dictionaries. Returns: list: A list of dictionaries with merged values for identical keys and added '_id' field. result = [] def process_dict(d, idx, path=[]): if not isinstance(d, dict): return flat_dict = {'_id': idx} for k, v in d.items(): if k in flat_dict: if isinstance(flat_dict[k], list): flat_dict[k].append(v) else: flat_dict[k] = [flat_dict[k], v] else: flat_dict[k] = v result.append(flat_dict) idx = 0 for sublist in a: for d in sublist: process_dict(d, idx) idx += 1 return result"},{"question":"Create a function that removes all duplicate strings within an input array of strings, ensuring each element within the array is unique and not repeated.","solution":"def remove_duplicates(strings): Removes all duplicate strings from the input list, ensuring uniqueness. :param strings: List of strings which may contain duplicates. :return: List of strings with duplicates removed. seen = set() unique_strings = [] for string in strings: if string not in seen: unique_strings.append(string) seen.add(string) return unique_strings"},{"question":"Create a Python function that generates a password based on the user's birthdate and a meaningful quote. The function should take in two arguments: the user's birthdate in the format YYYY-MM-DD and a string representing the meaningful quote.","solution":"import hashlib def generate_password(birthdate, quote): Generates a password based on the user's birthdate and a meaningful quote. Parameters: - birthdate (str): The user's birthdate in the format YYYY-MM-DD. - quote (str): A meaningful quote. Returns: - str: A generated password. # Combine birthdate and quote combined = birthdate + quote # Create a hash of the combined string hash_object = hashlib.sha256(combined.encode()) # Take the first 12 characters of the hash in hexadecimal format password = hash_object.hexdigest()[:12] return password"},{"question":"Develop a Python script to sum up all the individual digits of a given number, while also counting how many times each digit appears in the number. You should also validate that the input is a positive integer.","solution":"def sum_and_count_digits(number): Returns the sum of all individual digits of the given number and a dictionary counting the occurrences of each digit. if not isinstance(number, int) or number <= 0: raise ValueError(\\"Input must be a positive integer\\") # Initialize sum and digit count dictionary digit_sum = 0 digit_count = {} # Process each digit in the number for digit in str(number): digit_sum += int(digit) if digit in digit_count: digit_count[digit] += 1 else: digit_count[digit] = 1 return digit_sum, digit_count"},{"question":"Create a python simple HTTP server that listens on 8080 port and serves any request with \\"Hello World\\"","solution":"from http.server import BaseHTTPRequestHandler, HTTPServer class SimpleHTTPRequestHandler(BaseHTTPRequestHandler): def do_GET(self): self.send_response(200) self.send_header(\\"Content-type\\", \\"text/plain\\") self.end_headers() self.wfile.write(b\\"Hello World\\") def run(server_class=HTTPServer, handler_class=SimpleHTTPRequestHandler): server_address = ('', 8080) httpd = server_class(server_address, handler_class) print('Starting httpd server on port 8080...') httpd.serve_forever() if __name__ == '__main__': run()"},{"question":"Given a list of integers, code a Python function to return the sum of all the even numbers in the list. You are encouraged to use list comprehension for this task. Also, identify any potential bugs in the following code snippet.","solution":"def sum_of_even_numbers(numbers): Returns the sum of all the even numbers in the list. return sum([num for num in numbers if num % 2 == 0]) # Potential bug in a code snippet: # previous_code = [num*2 for num in some_list if num // 2 == 0] # Issues: # 1. \`num // 2 == 0\` checks if the integer division result is zero, which is incorrect for checking even numbers. # 2. If \`some_list\` is not defined, it will raise a NameError."},{"question":"How can I write a Python function that converts a list of financial transactions into a string format for a SQL insert statement? The transactions are in the form of a list of dictionaries, where each dictionary represents a single transaction with keys for 'account', 'amount', and 'timestamp' in Unix time. The output should be a string that is ready to be inserted into a SQL table with columns for id (auto-increment), account (VARCHAR(128)), amount (decimal(10,2)), and timestamp (datetime). Can you provide a code example to accomplish this?","solution":"from datetime import datetime def convert_transactions_to_sql(transactions): Converts a list of financial transactions into a string format for a SQL insert statement. Args: transactions: List[Dict] - A list of dictionaries containing 'account', 'amount', and 'timestamp'. Returns: str - A SQL insert statement string. values = [] for transaction in transactions: account = transaction['account'] amount = f\\"{transaction['amount']:.2f}\\" timestamp = datetime.utcfromtimestamp(transaction['timestamp']).strftime('%Y-%m-%d %H:%M:%S') values.append(f\\"('{account}', {amount}, '{timestamp}')\\") values_str = \\", \\".join(values) sql_statement = f\\"INSERT INTO transactions (account, amount, timestamp) VALUES {values_str};\\" return sql_statement"},{"question":"Create a program that takes a list of words as input and outputs a dictionary where each key is a unique word from the list and its value is the number of times it appears in the list. Ensure that the solution uses a dictionary data structure and offers a time complexity better than O(n^2).","solution":"def count_word_frequencies(words): Returns a dictionary where each key is a unique word from the list and its value is the number of times it appears in the list. word_count = {} for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 return word_count"},{"question":"Use Python to filter out all the prime numbers from a given list of integers. Additionally, handle any errors that may occur during the filtering process and provide appropriate error messages to the user. However, you are not allowed to use any built-in functions or libraries to check if a number is prime. You must implement your own algorithm to determine if a number is prime or not.","solution":"def is_prime(n): Determines if a number is prime. if n <= 1: return False for i in range(2, n): if n % i == 0: return False return True def filter_primes(numbers): Filters out the prime numbers from a list of integers. Parameters: numbers (list): List of integers to filter. Returns: list: List of prime numbers. if not isinstance(numbers, list): raise ValueError(\\"Input should be a list\\") primes = [] for num in numbers: if not isinstance(num, int): raise ValueError(f\\"'{num}' is not an integer\\") if is_prime(num): primes.append(num) return primes"},{"question":"Write a Python program that takes a string as an argument and returns a dictionary containing the frequency of each character in the string. The program should ignore spaces and be case-insensitive.","solution":"def char_frequency(s): Takes a string and returns a dictionary containing the frequency of each character in the string. Spaces are ignored and the function is case-insensitive. s = s.replace(\\" \\", \\"\\").lower() frequency = {} for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"How many ways can you write a program to reverse a string?","solution":"def reverse_string_slicing(s): Reverses a string using slicing. return s[::-1] def reverse_string_for_loop(s): Reverses a string using a for loop. reversed_str = \\"\\" for char in s: reversed_str = char + reversed_str return reversed_str def reverse_string_reversed_function(s): Reverses a string using the reversed() function. return ''.join(reversed(s)) def reverse_string_recursion(s): Reverses a string using recursion. if len(s) == 0: return s else: return s[-1] + reverse_string_recursion(s[:-1])"},{"question":"Generate a Python program that validates an entered password. The password is considered valid if it is at least 8 characters long, contains at least one uppercase letter, one lowercase letter, one digit, and one special character from the set: !@#%^&*()-_=+[]{};:'\\"<>?,./\`~.","solution":"import re def is_valid_password(password): Validates the entered password. A valid password must: - Be at least 8 characters long - Contain at least one uppercase letter - Contain at least one lowercase letter - Contain at least one digit - Contain at least one special character from the set: !@#%^&*()-_=+[]{};:'\\"<>?,./\`~ :param password: The password string to validate :return: True if the password is valid, False otherwise if len(password) < 8: return False if not re.search(r'[A-Z]', password): return False if not re.search(r'[a-z]', password): return False if not re.search(r'[0-9]', password): return False if not re.search(r'[!@#%^&*()-_=+[]{};:'\\"<>?,./\`~]', password): return False return True"},{"question":"Given an array of integers 'arr', where every element appears twice except for two elements which appear only once, write a Python function to find the two non-repeated elements. Your solution should have linear runtime complexity and use only constant extra space. You cannot modify the input array.","solution":"def find_two_non_repeated_elements(arr): Finds the two non-repeated elements in an array where every element appears twice except for two elements. This solution has linear runtime complexity and operates in constant extra space. # Step 1: Find XOR of all elements xor_all_elements = 0 for num in arr: xor_all_elements ^= num # Step 2: Find rightmost set bit in xor_all_elements set_bit = xor_all_elements & -xor_all_elements # Step 3: Divide elements into two groups and find XOR of each group num1, num2 = 0, 0 for num in arr: if num & set_bit: num1 ^= num else: num2 ^= num return num1, num2"},{"question":"Write a python constructor that initializes a private dictionary with given key-value pairs. Additionally, implement a method to update the dictionary safely, i.e., if the key already exists, the value should not be updated unless the new value is not equal to the old value plus one. Also include methods to retrieve items by key, return all keys and delete items by key.","solution":"class SafeDict: def __init__(self, **kwargs): Initializes the dictionary with key-value pairs provided as named arguments. self._dict = kwargs def update_value(self, key, value): Updates the value of the key in the dictionary if the key exists and the new value is not equal to the existing value + 1. If the key does not exist, it adds the key-value pair. if key in self._dict: if value != self._dict[key] + 1: self._dict[key] = value else: self._dict[key] = value def get_value(self, key): Retrieves the value associated with the key from the dictionary. Returns None if key does not exist. return self._dict.get(key) def get_all_keys(self): Returns a list of all keys in the dictionary. return list(self._dict.keys()) def delete_value(self, key): Deletes the key-value pair from the dictionary if the key exists. if key in self._dict: del self._dict[key]"},{"question":"Given the python dictionary below, create a function that returns the key(s) with the highest frequency in the dictionary. The function should also handle cases where multiple keys have the same highest frequency. If there is a tie for the most common frequency, return a list of all the tied frequencies in ascending order. The keys in the dictionary will be integers between 1 and 1000, and the dictionary will contain at least 50 key-value pairs.","solution":"def most_frequent_keys(data): Returns the key(s) with the highest frequency in the dictionary. If multiple keys have the same highest frequency, returns a list of all the keys with the highest frequency sorted in ascending order. Parameters: data (dict): A dictionary with integer keys and integer values. Returns: int/list: The key(s) with the highest frequency. # Finding the maximum frequency max_freq = max(data.values()) # Finding keys with the maximum frequency max_keys = [key for key, freq in data.items() if freq == max_freq] if len(max_keys) == 1: return max_keys[0] else: return sorted(max_keys)"},{"question":"Write a Python code snippet that converts a specified string to uppercase and reverses its order. Additionally, consider the case where the string could include special characters or numbers.","solution":"def convert_and_reverse(s): Converts the specified string to uppercase and reverses its order. Args: s (str): The original string to be processed. Returns: str: The transformed string that is uppercased and reversed. return s.upper()[::-1]"},{"question":"Create a code that returns a list of the top k greatest numbers from a given list of integers, also ensuring no duplicates. For instance, given lst = [9, 4, 2, 6, 9, 3, 7] and k = 4, the output should be [9, 6, 4, 3].","solution":"def top_k_greatest_numbers(lst, k): Returns a list of the top k greatest numbers from a given list of integers, ensuring no duplicates. # Remove duplicates unique_numbers = list(set(lst)) # Sort the unique numbers in descending order sorted_numbers = sorted(unique_numbers, reverse=True) # Return the first k elements return sorted_numbers[:k]"},{"question":"Develop a function that accepts two lists and a key as arguments. The first list consists of keys, the second list consists of values. Your function needs to create a dictionary by matching elements at the same index from the first list to elements at the same index in the second list. However, the dictionary should only include pairs where the value from the second list is a positive integer. Further, the function should handle cases when the lengths of the two list are not equal.","solution":"def create_filtered_dict(keys, values): Creates a dictionary from keys and values, only including pairs where the value is a positive integer. Args: keys (List[Any]): The list of keys. values (List[int]): The list of values. Returns: dict: A dictionary with keys mapped to positive integer values. # Ensure the lists are of the same length by trimming the longer one min_length = min(len(keys), len(values)) filtered_dict = { keys[i]: values[i] for i in range(min_length) if isinstance(values[i], int) and values[i] > 0 } return filtered_dict"},{"question":"Write a Python script that can perform the task of finding the length of the longest strictly increasing subsequence in an array. But, here's the catch: you cannot import or use any pre-written functions except for the basic ones (like len() and print()).","solution":"def length_of_LIS(nums): Returns the length of the longest strictly increasing subsequence in an array. if not nums: return 0 n = len(nums) dp = [1] * n for i in range(1, n): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Write a Python program that implements a simple text-based calculator supporting addition, subtraction, multiplication, and division. The program should continuously prompt the user for input until they decide to exit.","solution":"def calculator(): A simple text-based calculator supporting addition, subtraction, multiplication, and division. while True: # Display the menu print(\\"Enter 'exit' to terminate the program.\\") print(\\"Select operation:\\") print(\\"1. Add\\") print(\\"2. Subtract\\") print(\\"3. Multiply\\") print(\\"4. Divide\\") # Take input from the user choice = input(\\"Enter choice(1/2/3/4): \\") # Exit condition if choice.lower() == 'exit': print(\\"Exiting the program. Goodbye!\\") break # Check if the choice is valid if choice in ['1', '2', '3', '4']: try: num1 = float(input(\\"Enter first number: \\")) num2 = float(input(\\"Enter second number: \\")) except ValueError: print(\\"Invalid input. Please enter numeric values.\\") continue if choice == '1': print(f\\"The result of addition: {num1} + {num2} = {num1 + num2}\\") elif choice == '2': print(f\\"The result of subtraction: {num1} - {num2} = {num1 - num2}\\") elif choice == '3': print(f\\"The result of multiplication: {num1} * {num2} = {num1 * num2}\\") elif choice == '4': try: result = num1 / num2 except ZeroDivisionError: print(\\"Error! Division by zero is not allowed.\\") else: print(f\\"The result of division: {num1} / {num2} = {result}\\") else: print(\\"Invalid choice. Please select a valid operation.\\") # Uncomment the line below to run the calculator function # calculator()"},{"question":"Craft a Python script using Regular Expression that not only verifies an email address but also checks the validity of the domain and whether it corresponds to a list of allowed domains defined in a database or file. The script should also validate if the username (part of the email before '@') conforms to specific guidelines like length restrictions, disallowed character sets, etc.","solution":"import re def is_valid_email(email, allowed_domains, min_length=1, max_length=64, allowed_chars='^[a-zA-Z0-9._+-]+'): Validates if an email address is properly formatted and checks against allowed domains and username length/character guidelines. Args: email (str): The email address to validate. allowed_domains (list): List of allowed domain names. min_length (int): Minimum length for the username. max_length (int): Maximum length for the username. allowed_chars (str): Regular expression pattern for allowed characters in the username. Returns: bool: True if the email is valid, False otherwise. pattern = re.compile(r'^[^@]+@[^@]+.[^@]+') if not pattern.match(email): return False username, domain = email.split('@') # Check username length if not (min_length <= len(username) <= max_length): return False # Check username character set if not re.match(allowed_chars, username): return False # Check domain validity if domain not in allowed_domains: return False return True"},{"question":"Generate a 3x4 matrix of random numbers between -5 and 15 in Python using NumPy. Hereafter, calculate the row-wise sum for this matrix. Then, normalize these sums so that they range between 0 and 1. Verify that your normalization function works correctly, by checking that the maximum and minimum of the transformed sums are indeed 1 and 0 respectively, and that all transformed values are within this range.","solution":"import numpy as np def generate_matrix(): Generates a 3x4 matrix of random numbers between -5 and 15. return np.random.randint(-5, 15, (3, 4)) def row_wise_sum(matrix): Calculates the row-wise sum for the matrix. return np.sum(matrix, axis=1) def normalize_sums(sums): Normalizes the sums so that they range between 0 and 1. min_sum = np.min(sums) max_sum = np.max(sums) # Avoid division by zero in case all sums are the same if min_sum == max_sum: return np.ones_like(sums) if max_sum != 0 else np.zeros_like(sums) normalized = (sums - min_sum) / (max_sum - min_sum) return normalized # Example usage: # matrix = generate_matrix() # sums = row_wise_sum(matrix) # normalized_sums = normalize_sums(sums)"},{"question":"Is there a way to generate a random list of numbers in Python without any duplicates?","solution":"import random def generate_unique_random_list(length, start=0, end=100): Generates a list of unique random numbers within a specified range. :param length: Length of the list to be generated :param start: Start of the range (inclusive) :param end: End of the range (inclusive) :return: List of unique random numbers if length > (end - start + 1): raise ValueError(\\"Length exceeds the number of available unique numbers in the specified range.\\") return random.sample(range(start, end + 1), length)"},{"question":"Write a Python program to find the most frequently occurring element in a list. You should assume that the list can contain any type of elements including integers, strings, and other data types. Your program should be able to handle large lists with millions of elements efficiently.","solution":"from collections import Counter def most_frequent_element(lst): Returns the most frequently occurring element in a list. if not lst: return None # Return None if the list is empty counter = Counter(lst) most_common_element, _ = counter.most_common(1)[0] return most_common_element"},{"question":"Given an array of integers \`nums\` and an integer \`pivot\`, rearrange \`nums\` in-place such that all elements less than or equal to \`pivot\` come before all elements greater than \`pivot\`. Note that the relative order of the elements less than or equal to \`pivot\` and the elements greater than \`pivot\` does not matter.","solution":"def pivot_array(nums, pivot): Rearranges nums in-place such that all elements <= pivot come before all elements > pivot. Parameters: nums (List[int]): List of integers to be rearranged. pivot (int): The pivot integer. Returns: List[int]: The rearranged list. less_than_or_equal = [] greater = [] for num in nums: if num <= pivot: less_than_or_equal.append(num) else: greater.append(num) return less_than_or_equal + greater"},{"question":"Write a class in Python that can find the median of an unsorted list of numbers.","solution":"import heapq class MedianFinder: def __init__(self): self.min_heap = [] self.max_heap = [] def add_num(self, num): heapq.heappush(self.max_heap, -num) if len(self.max_heap) > 0 and len(self.min_heap) > 0 and (-self.max_heap[0] > self.min_heap[0]): move_val = -heapq.heappop(self.max_heap) heapq.heappush(self.min_heap, move_val) if len(self.max_heap) > len(self.min_heap) + 1: move_val = -heapq.heappop(self.max_heap) heapq.heappush(self.min_heap, move_val) if len(self.min_heap) > len(self.max_heap): move_val = heapq.heappop(self.min_heap) heapq.heappush(self.max_heap, -move_val) def find_median(self): if len(self.max_heap) > len(self.min_heap): return -self.max_heap[0] return (-self.max_heap[0] + self.min_heap[0]) / 2.0"},{"question":"We have a piece of code that attempts to initialize a list from given data, however, it contains some errors. Your job is to identify and fix any errors present in the code provided. You also need to write a function that will handle the initialization of list in a more generalized way. The function should accept a list of integers as input and return a new list which groups every three consecutive integers to form a new integer. If the length of the input list does not divide evenly by three, the remaining digits should be grouped together at the end even if it means they won't form a three digit number. As an example, if the input list is [1,2,3,4,5,6,7], the output should be [123,456,7].","solution":"def group_into_triplets(lst): Accepts a list of integers and returns a new list which groups every three consecutive integers to form a new integer. If the length of the input list does not divide evenly by three, the remaining digits are grouped together at the end. result = [] i = 0 while i < len(lst): # Join the current triplet into an integer triplet = int(''.join(map(str, lst[i:i+3]))) result.append(triplet) i += 3 # Move to the next triplet return result"},{"question":"Given a binary tree, write a function to determine whether it is a valid binary search tree (BST). The function should also return the minimum and maximum values found in the tree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_valid_bst(root, lower=float('-inf'), upper=float('inf')): if not root: return True, None, None val = root.val if val <= lower or val >= upper: return False, None, None is_valid_left, min_left, max_left = is_valid_bst(root.left, lower, val) if not is_valid_left: return False, None, None is_valid_right, min_right, max_right = is_valid_bst(root.right, val, upper) if not is_valid_right: return False, None, None min_val = min_left if min_left is not None else val max_val = max_right if max_right is not None else val return True, min_val, max_val"},{"question":"Write a power set of the set [1, 2, 3, 4, 5] in python using a recursive approach.","solution":"def power_set(s): Returns the power set of the input set \`s\` using a recursive approach. if len(s) == 0: return [[]] element = s[0] subset_without_element = power_set(s[1:]) subset_with_element = [ [element] + subset for subset in subset_without_element ] return subset_without_element + subset_with_element # Example usage: input_set = [1, 2, 3, 4, 5] result = power_set(input_set) print(result)"},{"question":"Create a Python program that identifies the lowest even number in a given list of integers. If there are no even numbers, return None.","solution":"def lowest_even_number(nums): Returns the lowest even number in the list. If there are no even numbers, returns None. even_numbers = [num for num in nums if num % 2 == 0] if not even_numbers: return None return min(even_numbers)"},{"question":"Create a Python program to convert a given temperature in Celsius to Kelvin, ensuring that the input temperature is within the range of -273.15 to 1000 Celsius. The program should also display an error message and prompt the user to enter a valid temperature if the input is outside the valid range.","solution":"def celsius_to_kelvin(celsius): Converts temperature from Celsius to Kelvin. Ensures the input temperature is within the range of -273.15 to 1000 Celsius. if not (-273.15 <= celsius <= 1000): raise ValueError(\\"Temperature must be within the range of -273.15 to 1000 Celsius.\\") kelvin = celsius + 273.15 return kelvin"},{"question":"Generate an HTML table with a given list of dictionaries, where each dictionary represents a person with the keys 'name' and 'age'. The table should have a border, a caption that says \\"Person Details\\", and each row should have alternating background colors. Additionally, the table should only include people whose age is greater than or equal to 18. However, the table should be paginated with 10 rows per page, and each page should have a navigation bar to switch between pages.","solution":"def generate_html_table(people): Generates an HTML table with proper filters and pagination for a list of person dictionaries. Each dictionary must have 'name' and 'age' keys. Only includes people with 'age' >= 18. # Filter people with age >= 18 adults = [person for person in people if person['age'] >= 18] # Split the adults list into chunks of 10 (pagination) chunked_adults = [adults[i:i + 10] for i in range(0, len(adults), 10)] tables = [] for page_num, chunk in enumerate(chunked_adults): table = '<table border=\\"1\\" style=\\"border-collapse: collapse;\\">' table += '<caption>Person Details</caption>' table += '<thead><tr><th>Name</th><th>Age</th></tr></thead><tbody>' for i, person in enumerate(chunk): background = '#f2f2f2' if i % 2 == 0 else '#ffffff' row = f'<tr style=\\"background-color: {background};\\"><td>{person[\\"name\\"]}</td><td>{person[\\"age\\"]}</td></tr>' table += row table += '</tbody></table>' # Add navigation bar if there are multiple pages if len(chunked_adults) > 1: nav_bar = '<div class=\\"pagination\\">' for p_num in range(len(chunked_adults)): nav_class = ' class=\\"active\\"' if p_num == page_num else '' nav_bar += f'<a href=\\"#page{p_num + 1}\\"{nav_class}>Page {p_num + 1}</a>' nav_bar += '</div>' table += nav_bar tables.append(f'<div id=\\"page{page_num + 1}\\">{table}</div>') return 'n'.join(tables)"},{"question":"Write a Python program that receives a string as input from the user. The program should check if the string is a palindrome or not, ignoring space and punctuation characters. Return result as True or False.","solution":"def is_palindrome(s): Check if a given string is a palindrome, ignoring spaces and punctuation. import string # Remove spaces and punctuation and convert string to lowercase translator = str.maketrans('', '', string.punctuation + ' ') clean_s = s.translate(translator).lower() # Check if the cleaned string is equal to its reverse return clean_s == clean_s[::-1]"},{"question":"Is there a way to round all the numbers in a given list to the nearest integer using Python?","solution":"def round_numbers_in_list(numbers): Rounds all the numbers in the given list to the nearest integer. Args: numbers (list of float): List of numbers. Returns: list of int: List of rounded numbers. return [round(number) for number in numbers]"},{"question":"How can you efficiently sort a list of dictionaries by values of the dictionary in Python? The goal is to create a reusable function that can sort a given list of dictionaries by either the primary or secondary values, based on a given key. For instance, sort a list of dictionaries containing information about students by their last name and first name. Your solution should involve multiple steps to accomplish this task.","solution":"from typing import List, Dict def sort_dicts_by_keys(dict_list: List[Dict], primary_key: str, secondary_key: str = None) -> List[Dict]: Sorts a list of dictionaries by a primary key and optionally a secondary key. :param dict_list: List of dictionaries to sort. :param primary_key: Primary key to sort the dictionaries by. :param secondary_key: Secondary key to sort the dictionaries by (optional). :return: Sorted list of dictionaries. if secondary_key: return sorted(dict_list, key=lambda x: (x[primary_key], x[secondary_key])) else: return sorted(dict_list, key=lambda x: x[primary_key])"},{"question":"Given an integer n, write a Python program to print a pattern consisting of n rows, where each row i (1 ≤ i ≤ n) contains the numbers from 1 to i, separated by a space. Your program should be efficient and handle large values of n.","solution":"def generate_pattern(n): Generates a pattern consisting of n rows, where each row i (1 ≤ i ≤ n) contains the numbers from 1 to i, separated by a space. Args: n (int): Number of rows in the pattern. Returns: list of str: A list where each element is a string representing a row of the pattern. pattern = [] for i in range(1, n + 1): row = ' '.join(map(str, range(1, i + 1))) pattern.append(row) return pattern"},{"question":"Given the following erroneous Python code for sorting a list of words in ascending alphabetic sequence, identify and correct the error. Then improve the function to not only sort the given list of strings in ascending alphabetic order, but also to filter and exclude any strings that contain numbers or special characters. For testing purposes, use the predefined list of strings provided: ['banana', 'apple', '34kiwi', 'grape', 'cherry', 'date', '123orange@'].","solution":"import re def sort_and_filter_strings(strings): Sorts a list of strings in ascending alphabetic order and excludes any strings that contain numbers or special characters. Parameters: strings (list): A list of strings to be sorted and filtered. Returns: list: A list of sorted and filtered strings. def is_valid_string(s): # Returns True if string s contains only alphabetic characters; otherwise, False. return bool(re.match(\\"^[a-zA-Z]+\\", s)) valid_strings = filter(is_valid_string, strings) sorted_strings = sorted(valid_strings) return sorted_strings"},{"question":"Let's say we have a list \`lst = [1, 2, 1, 5, 3, 1]\`. Write a Python function \`move_ones_to_front(lst)\` that rearranges this list in such a way that all ones are moved to the front of the list, while maintaining the relative order of all other elements. The function should not return anything but should modify the input list in-place.","solution":"def move_ones_to_front(lst): Moves all ones in the list to the front while maintaining the order of other elements. This function modifies the input list in-place. ones_count = lst.count(1) lst[:] = [1] * ones_count + [x for x in lst if x != 1]"},{"question":"Generate a function that adds two multi-digit integers represented as strings. Additionally, the solution should handle potential overflow, work for both positive and negative numbers, and ignore any leading or trailing whitespace in the inputs.","solution":"def add_strings(num1, num2): Returns the sum of two integers represented as strings. Args: num1: str - A string representing the first integer. Can include leading or trailing whitespaces. num2: str - A string representing the second integer. Can include leading or trailing whitespaces. Returns: str - The sum of the two integers represented as a string. # Strip leading and trailing whitespaces num1 = num1.strip() num2 = num2.strip() # Convert the strings to integers, sum them and convert back to string result = int(num1) + int(num2) return str(result)"},{"question":"Write a function that takes a list of integers as input and returns a new list with only even elements from the original list, in the same order. If the original list is empty or has no even numbers, return an empty list.","solution":"def filter_even_numbers(numbers): Returns a list containing only the even numbers from the input list. Args: numbers (list): A list of integers. Returns: list: A new list containing only the even numbers from the original list. return [num for num in numbers if num % 2 == 0]"},{"question":"Write a Python program to take a list of n integers (where n <= 10^3) and print the maximum subarray sum using the Kadane's algorithm. Additionally, print the start and end index of the subarray. Example: Input array: [-2, 1, -3, 4, -1, 2, 1, -5, 4], Output: Maximum sum: 6, Subarray: [4, -1, 2, 1], Start index: 3, End index: 6","solution":"def max_subarray_sum(nums): Returns the maximum subarray sum, the subarray and the start and end indices of that subarray. :param nums: List of integers :return: Tuple containing maximum sum, subarray, start index and end index if not nums: return 0, [], None, None max_sum = current_sum = nums[0] start_index = end_index = 0 temp_start_index = 0 for i in range(1, len(nums)): if nums[i] > current_sum + nums[i]: current_sum = nums[i] temp_start_index = i else: current_sum += nums[i] if current_sum > max_sum: max_sum = current_sum start_index = temp_start_index end_index = i return max_sum, nums[start_index:end_index + 1], start_index, end_index"},{"question":"Design a program that can convert a string of hexadecimal numbers into its corresponding binary representation. The program should not use any inbuilt or third-party libraries for hex to binary conversion. It should accept the hexadecimal string as input and return the binary representation. Additionally, the program should be able to handle errors such as input validation, ensuring only valid hexadecimal characters are processed.","solution":"def hex_to_binary(hex_str): Converts a hexadecimal string to its binary representation. Parameters: hex_str (str): Input string containing hexadecimal characters. Returns: str: Binary representation of the hexadecimal string. hex_char_to_bin = { '0': '0000', '1': '0001', '2': '0010', '3': '0011', '4': '0100', '5': '0101', '6': '0110', '7': '0111', '8': '1000', '9': '1001', 'A': '1010', 'B': '1011', 'C': '1100', 'D': '1101', 'E': '1110', 'F': '1111', 'a': '1010', 'b': '1011', 'c': '1100', 'd': '1101', 'e': '1110', 'f': '1111' } if not all(char in hex_char_to_bin for char in hex_str): raise ValueError(\\"Input contains invalid hexadecimal characters\\") binary_str = ''.join(hex_char_to_bin[char] for char in hex_str) return binary_str"},{"question":"Create a method to print the top 3 numbers of an array in descending order.","solution":"def top_three_numbers(arr): Returns the top 3 numbers in the array in descending order. If there are less than three numbers, returns all of them in descending order. Args: arr (list of int): A list of integers. Returns: list of int: A list containing the top 3 numbers in descending order. arr_sorted = sorted(arr, reverse=True) return arr_sorted[:3]"},{"question":"Given an array of integers, write a function to sort the array in descending order using the bubble sort algorithm.","solution":"def bubble_sort_descending(arr): Sorts an array in descending order using the bubble sort algorithm. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] < arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Write a Python snippet to print the first 10 prime numbers using a while loop.","solution":"def first_10_primes(): Returns a list of the first 10 prime numbers. primes = [] num = 2 while len(primes) < 10: for i in range(2, int(num**0.5) + 1): if num % i == 0: break else: primes.append(num) num += 1 return primes # Example usage: # print(first_10_primes())"},{"question":"Write a python program that reads a file consisting of pairs of space-separated integers and calculates their sum for each line. The program should be able to effectively handle large files with many records. Also, include error handling for cases where the file doesn't exist or contains non-integer values.","solution":"def calculate_sums(filename): Reads a file of space-separated integer pairs and calculates their sum for each line. Args: filename (str): The name of the file to read from. Returns: list: A list of sums for each line. Raises: FileNotFoundError: If the file does not exist. ValueError: If there are non-integer values in the file. sums = [] try: with open(filename, 'r') as file: for line in file: try: numbers = line.split() if len(numbers) != 2: raise ValueError(\\"Line does not contain exactly two space-separated values.\\") num1, num2 = map(int, numbers) sums.append(num1 + num2) except ValueError: raise ValueError(f\\"Non-integer values found in line: {line.strip()}\\") return sums except FileNotFoundError: raise FileNotFoundError(f\\"The file {filename} does not exist.\\")"},{"question":"How do you find the length of the longest increasing subsequence in an array using Python? Your solution should use dynamic programming and should have a time complexity of O(n^2) and a space complexity of O(n).","solution":"def length_of_lis(nums): Finds the length of the longest increasing subsequence in the given array. :param nums: List of integers :return: Length of the longest increasing subsequence if not nums: return 0 n = len(nums) dp = [1] * n # dp[i] represents the length of the longest increasing subsequence that ends with nums[i] for i in range(1, n): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Given two strings s and t, write a function to check if they are anagrams of each other.","solution":"def are_anagrams(s, t): Returns True if s and t are anagrams of each other, False otherwise. return sorted(s) == sorted(t)"},{"question":"I want to write a software program to read a given file of 256x256 pixel grayscale images and apply a bilateral filter to each image with varying filter sizes. I also want the time taken for each filtering to be measured and recorded so that I can compare the performance at different filter sizes. Can you help me with this task using Python?","solution":"import cv2 import numpy as np import time def apply_bilateral_filter(image_path, filter_size): # Read the image in grayscale image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE) if image is None: raise ValueError(f\\"Image at {image_path} could not be loaded.\\") if image.shape != (256, 256): raise ValueError(f\\"Image must be of size 256x256 pixels, but got {image.shape}.\\") # Apply bilateral filter and measure time start_time = time.time() filtered_image = cv2.bilateralFilter(image, d=filter_size, sigmaColor=75, sigmaSpace=75) end_time = time.time() # Calculate the time taken time_taken = end_time - start_time return filtered_image, time_taken"},{"question":"Implement a function in Python that takes two integers as input and returns the sum of their digits. However, you are not allowed to use any built-in functions or methods that directly manipulate or convert the integers to strings or lists.","solution":"def sum_of_digits(a, b): Returns the sum of the digits of the two input integers a and b. def sum_digits(n): total = 0 n = abs(n) while n > 0: total += n % 10 n = n // 10 return total return sum_digits(a) + sum_digits(b)"},{"question":"Given an array of n integers and a positive integer k. You are required to write a program to find the maximum average value from any subarray of the given length. Implement an efficient algorithm that can handle large inputs effectively.","solution":"def find_max_average(nums, k): Finds the maximum average value from any subarray of the given length k. :param nums: List[int] - The array of integers. :param k: int - The length of the subarray. :return: float - Maximum average value. n = len(nums) if n < k: raise ValueError(\\"The array length must be greater than or equal to k.\\") # Calculate the sum of the first subarray of length k current_sum = sum(nums[:k]) max_sum = current_sum # Use sliding window approach to find the maximum sum of subarrays of length k for i in range(k, n): current_sum = current_sum - nums[i - k] + nums[i] if current_sum > max_sum: max_sum = current_sum # The maximum average is the maximum sum divided by k return max_sum / k"},{"question":"Given an array of integers and a target sum, write a program to find two numbers in the array that add up to the target sum. If such a pair is found, return their indices.","solution":"def find_two_sum_indices(nums, target): Finds two indices in the list such that the numbers at those indices add up to the target. :param nums: List of integers. :param target: Target sum. :return: A tuple of indices if a pair is found, None otherwise. num_to_index = {} # Dictionary to store numbers and their indices for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], index) num_to_index[num] = index return None"},{"question":"Write a Python program that prints the numbers from 1 to n (input), but for multiples of three print \\"Fizz\\" instead of the number, for multiples of five print \\"Buzz\\", and for numbers which are multiples of both three and five print \\"FizzBuzz\\".","solution":"def fizz_buzz(n): Prints numbers from 1 to n with the following rules: - For multiples of three, print \\"Fizz\\". - For multiples of five, print \\"Buzz\\". - For multiples of both three and five, print \\"FizzBuzz\\". result = [] for i in range(1, n+1): if i % 3 == 0 and i % 5 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return result"},{"question":"Generate a code to identify duplicate elements in a list and count the number of occurrences for each duplicate element. Your code should have a time complexity of O(n), where n is the size of the input list. Additionally, you are not allowed to use any built-in functions or data structures for this task.","solution":"def count_duplicates(input_list): Identify duplicate elements in a list and count the number of occurrences for each duplicate element. The function returns a dictionary with elements as keys and their counts as values. Time complexity: O(n), where n is the size of the input list. element_count = {} for element in input_list: if element in element_count: element_count[element] += 1 else: element_count[element] = 1 duplicates_count = {} for element, count in element_count.items(): if count > 1: duplicates_count[element] = count return duplicates_count"},{"question":"Write a Python program that accepts a positive integer 'n' from the user and returns the nth Fibonacci number. Ensure the solution is optimized for time complexity.","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"F(x) is a function in which when x is less than 1400, (x-1000)^3 is returned and when it's equal to or greater than 1400, the value of x+100 is returned. Write this function in python.","solution":"def F(x): Applies the function F based on the value of x. If x < 1400, returns (x - 1000)^3. If x >= 1400, returns x + 100. if x < 1400: return (x - 1000) ** 3 else: return x + 100"},{"question":"Write a python function to convert a YYYYMMDD formatted date string to a YYYY-MM-DD formatted date string.","solution":"def convert_date_format(date_str): Converts a date string from YYYYMMDD format to YYYY-MM-DD format. if len(date_str) != 8 or not date_str.isdigit(): raise ValueError(\\"Input date string must be in YYYYMMDD format and contain exactly 8 digits.\\") year = date_str[:4] month = date_str[4:6] day = date_str[6:8] return f\\"{year}-{month}-{day}\\""},{"question":"Heres a square. Write a program to take a number of rotations and output the square after rotation. The bottom left of the square is the pivot. The input is an integer n followed by a series of integer pairs like (x, y) which represent the integer map of the square. The output is the rotated integer map of the square by x degrees.","solution":"def rotate_square(n, points): Rotates a square represented by a list of points around bottom-left origin (0,0) by 90 degrees n times. Args: n (int): Number of 90-degree rotations. points (list of tuples): List of points in (x, y) format representing the vertices of a square. Returns: list of tuples: List of points after rotations. # Calculate total degrees to rotate total_degrees = (n % 4) * 90 # Since every 4 rotations is equivalent to 0 rotation if total_degrees == 0: return points elif total_degrees == 90: return [(-y, x) for x, y in points] elif total_degrees == 180: return [(-x, -y) for x, y in points] elif total_degrees == 270: return [(y, -x) for x, y in points]"},{"question":"Using a doubly linked list, write a function to find the nth element from the end of the list. Your function should handle the case where the list is empty or n is larger than the length of the list. You should also handle the case where n is negative, in which case your function should return an appropriate error message. Additionally, your function should not modify the original linked list.","solution":"class Node: def __init__(self, data=None): self.data = data self.next = None self.prev = None class DoublyLinkedList: def __init__(self): self.head = None self.tail = None def append(self, data): new_node = Node(data) if self.head is None: self.head = new_node self.tail = new_node else: self.tail.next = new_node new_node.prev = self.tail self.tail = new_node def find_nth_from_end(self, n): if n < 0: return \\"n cannot be negative\\" temp = self.tail count = 0 while temp: count += 1 if count == n: return temp.data temp = temp.prev return \\"n is larger than the length of the list\\""},{"question":"Create a program that takes a sequence of bytes as input and performs a circular bitwise rotation on them. The program should prompt the user to specify the direction of the rotation ('left' or 'right') and the number of bits to rotate. The program should output the rotated byte sequence as hexadecimal values.","solution":"def rotate_byte_sequence(byte_seq, direction, num_bits): Performs a circular bitwise rotation on a sequence of bytes. Parameters: byte_seq (bytes): The sequence of bytes to rotate. direction (str): The direction of rotation ('left' or 'right'). num_bits (int): The number of bits to rotate. Returns: bytes: The rotated byte sequence. def rotate_left(byte, bits): return ((byte << bits) & 0xFF) | (byte >> (8 - bits)) def rotate_right(byte, bits): return (byte >> bits) | ((byte << (8 - bits)) & 0xFF) rotated_seq = bytearray() for byte in byte_seq: if direction == 'left': rotated_seq.append(rotate_left(byte, num_bits)) elif direction == 'right': rotated_seq.append(rotate_right(byte, num_bits)) else: raise ValueError(\\"Invalid direction; must be 'left' or 'right'\\") return bytes(rotated_seq)"},{"question":"Write a function in Python to merge two sorted lists and return the new sorted list.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into a single sorted list. :param list1: List[int] - First sorted list :param list2: List[int] - Second sorted list :return: List[int] - New merged sorted list merged_list = [] i, j = 0, 0 # Traverse through both lists while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # If there are remaining elements in list1 while i < len(list1): merged_list.append(list1[i]) i += 1 # If there are remaining elements in list2 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Write a function that takes in a list of strings and counts the number of vowels in each string. Return the result as a list of integers in the same order as the input strings.","solution":"def count_vowels_in_strings(strings): Takes in a list of strings and counts the number of vowels in each string. Returns the result as a list of integers in the same order as the input strings. vowels = 'aeiouAEIOU' return [sum(1 for char in string if char in vowels) for string in strings]"},{"question":"Write a function that takes a list as parameter and returns a new list with the elements in reversed order, but only for odd-indexed elements. The even-indexed elements should remain in their original positions.","solution":"def reverse_odd_index_elements(lst): Returns a new list where only the elements at odd indexes are reversed in order. The elements at even indexes remain in their original positions. Parameters: lst (list): Input list Returns: list: New list with elements at odd indexes reversed odd_index_elements = [lst[i] for i in range(1, len(lst), 2)] odd_index_elements.reverse() new_lst = lst[:] # copy of the original list for idx, val in enumerate(odd_index_elements): new_lst[2 * idx + 1] = val return new_lst"},{"question":"Given a linked list, reverse the nodes of a linked list in groups of k nodes and return its modified list. Each group of k nodes must be reversed together. The overall time complexity should be O(n) and the space complexity should be O(1).","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverseKGroup(head, k): Reverse the nodes of a linked list in groups of k and return its modified list. def reverse_linked_list(head, k): new_head = None ptr = head while k: next_node = ptr.next ptr.next = new_head new_head = ptr ptr = next_node k -= 1 return new_head count = 0 ptr = head # Count the number of nodes in the linked list while ptr: ptr = ptr.next count += 1 dummy = ListNode(0) dummy.next = head prev_end = dummy while count >= k: start = prev_end.next end = prev_end # Move the end pointer k nodes ahead for i in range(k): end = end.next next_start = end.next # Reverse k nodes end.next = None prev_end.next = reverse_linked_list(start, k) start.next = next_start prev_end = start count -= k return dummy.next"},{"question":"Given the task of selecting minimal subsets (sub-lists) from a list, such that each subset contains at least one element not present in any other subset, create a function in Python. This task involves determining combinations of non-overlapping elements. Additionally, incorporate functionality which allows for the choosing of a specific number of these unique subsets, prioritizing subsets with the most elements. If the selection quantity surpasses the number of possible unique subsets, return all possible unique subsets.","solution":"from itertools import combinations def minimal_unique_subsets(lst, k): Returns the k largest subsets with unique elements from list lst. If k exceeds the number of unique subsets, return all unique subsets. Parameters: lst (list): The input list from which subsets are formed. k (int): The number of unique subsets to be returned. Returns: list of lists: The list containing k unique subsets (or all unique subsets if k exceeds total number of such subsets). n = len(lst) all_subsets = [list(combo) for i in range(1, n+1) for combo in combinations(lst, i)] unique_subsets = [] # Check for unique elements between subsets for subset in all_subsets: subset_unique = True subset_set = set(subset) for other_subset in unique_subsets: if subset_set & set(other_subset): subset_unique = False break if subset_unique: unique_subsets.append(subset) unique_subsets.sort(key=lambda x: -len(x)) return unique_subsets[:k]"},{"question":"Devise an algorithm to validate whether a specific array of integers represents a palindromic sequence. Additionally, implement a function checks if it's a perfect square palindrome sequence. Provide proper documentation and testing for your code.","solution":"def is_palindrome(arr): Returns True if the given array of integers is a palindrome, otherwise False. A palindrome array reads the same backward as forward. :param arr: List[int], the array to check :return: bool, True if the array is a palindrome, otherwise False return arr == arr[::-1] def is_perfect_square(n): Returns True if the given number is a perfect square, otherwise False. :param n: int, the number to check :return: bool, True if n is a perfect square, otherwise False root = int(n ** 0.5) return n == root * root def is_perfect_square_palindrome(arr): Returns True if every element in the array is a perfect square and the array is a palindrome. :param arr: List[int], the array to check :return: bool, True if the array is a perfect square palindrome sequence, otherwise False return is_palindrome(arr) and all(is_perfect_square(x) for x in arr)"},{"question":"Create 2 regex patterns. The first one should match a complete URL that includes a protocol (like http, https), a domain name, and it should validate if the domain name has at least one subdomain. The second regex should match social security numbers that conform to the USA format. Also include test functions in Python to check the validity of these patterns with given input strings.","solution":"import re def match_url_with_subdomain(url): Returns True if the given URL includes a protocol, a domain name, and at least one subdomain. pattern = r'^(https?://)?([a-zA-Z0-9-]+.)+[a-zA-Z0-9-]{2,}(.[a-zA-Z]{2,})+(/.*)?' return re.match(pattern, url) is not None def match_ssn(ssn): Returns True if the given string matches the format of a US social security number. pattern = r'^d{3}-d{2}-d{4}' return re.match(pattern, ssn) is not None"},{"question":"Write a function in Python that takes an array of integer as an input and returns the largest sum of non-adjacent numbers. The function should return 0 if the array is empty or if all elements are negative. Also, provide a piece of erroneous code that you must debug and correct as part of the task.","solution":"def largest_sum_non_adjacent(nums): Returns the largest sum of non-adjacent numbers from an array. Returns 0 if the array is empty or if all elements are negative. if not nums or all(x < 0 for x in nums): return 0 include = 0 exclude = 0 for num in nums: new_exclude = max(include, exclude) include = exclude + num exclude = new_exclude return max(include, exclude) # Erroneous code: The error is in logic when we update \`include\` and \`exclude\` variables. def erroneous_code_example(nums): if not nums: # Correct check for empty list return 0 # Initializing sums include, exclude = float('-inf'), 0 for num in nums: # Error: new_exclude should update first before include variable include = exclude + num exclude = max(include, exclude) return max(include, exclude)"},{"question":"Build a Python function that is capable of calculating the cumulative sum of all elements present in a given list of numbers, including floating point values. The list can include both positive and negative numbers.","solution":"def cumulative_sum(numbers): Returns a list containing the cumulative sum of the input numbers. :param numbers: List of numbers (integers or floats) :return: List of numbers representing the cumulative sum. if not numbers: return [] cumulative = [] current_sum = 0 for num in numbers: current_sum += num cumulative.append(current_sum) return cumulative"},{"question":"Formulate a solution to print out each letter of a string individually in reverse order, but without using any built-in string manipulation functions or loops. The solution should have a time complexity of O(n) and a space complexity of O(1).","solution":"def print_reverse_string(s): Prints each letter of the string \`s\` in reverse order, one by one, without using any built-in string manipulation functions or loops. def helper(index): if index < 0: return print(s[index]) helper(index - 1) helper(len(s) - 1)"},{"question":"Create an array of 5 integers and populate it with the first 5 prime numbers. Additionally, provide a piece of erroneous code as a reference to identify common mistakes in array handling.","solution":"def get_first_five_primes(): Returns an array containing the first 5 prime numbers. primes = [2, 3, 5, 7, 11] return primes # Erroneous Code Example # The following code tries to assign non-prime values and demonstrates a common mistake # of not verifying if a number is prime before adding it to the list. def erroneous_prime_array(): Returns an erroneously constructed array where non-prime numbers are mixed in. primes = [2, 4, 5, 6, 7] # 4 and 6 are not prime numbers return primes"},{"question":"Create a python function that takes a sentence as input and returns whether it is a palindrome or not. A palindrome sentence reads the same backwards as forwards, ignoring spaces, punctuation, and capitalization.","solution":"def is_palindrome_sentence(sentence): Takes a sentence as input and returns whether it is a palindrome or not. A palindrome sentence reads the same backwards as forwards, ignoring spaces, punctuation, and capitalization. import re # Remove non-alphanumeric characters and convert to lower case cleaned_sentence = re.sub(r'[^A-Za-z0-9]', '', sentence).lower() # Check if the cleaned sentence is equal to its reverse return cleaned_sentence == cleaned_sentence[::-1]"},{"question":"Write the code for a function that takes an integer representing a decimal value and returns a concatenated version of that integer using a string concatenation operator. The input integer is guaranteed to be non-negative and less than 10^9.","solution":"def concatenate_int_as_string(n): Takes an integer and returns a concatenated version of that integer as a string. Parameters: n (int): A non-negative integer less than 10^9. Returns: str: The integer converted to a string. if not (0 <= n < 10**9): raise ValueError(\\"The input integer should be non-negative and less than 10^9.\\") return str(n)"},{"question":"Given the Python Dictionary provided, your task is to construct a function that can perform both direct and inverse lookups. Direct lookup retrieves the information from the dictionary with the given key whereas Inverse lookup retrieves the key(s) given the information. The keys of this dictionary are a mix of strings and integers, while the values are strictly strings. In the event of inverse lookup, if the information does not exist within the dictionary, the function should return an empty list. Also, take into account that the values might not be unique, and the inverse lookup should return all possible keys.","solution":"def lookup(dictionary, key_or_value, reverse=False): Perform direct or inverse lookup on the dictionary. Parameters: dictionary (dict): The dictionary to perform lookups on. key_or_value (int/str): Key for direct lookup or value for inverse lookup. reverse (bool): Whether to perform inverse lookup. Returns: result (str/list): Value for direct lookup or list of keys for inverse lookup. if reverse: result = [key for key, value in dictionary.items() if value == key_or_value] return result else: return dictionary.get(key_or_value) # Example usage: # dictionary = {1: \\"apple\\", 2: \\"banana\\", \\"three\\": \\"apple\\", 4: \\"cherry\\"} # print(lookup(dictionary, 1)) # Output: \\"apple\\" # print(lookup(dictionary, \\"apple\\", True)) # Output: [1, \\"three\\"]"},{"question":"Technical Interview: Explain merge sort algorithm and provide a piece of erroneous code that could potentially break the algorithm.","solution":"def merge_sort(arr): if len(arr) <= 1: return arr mid = len(arr) // 2 left = merge_sort(arr[:mid]) right = merge_sort(arr[mid:]) return merge(left, right) def merge(left, right): result = [] while left and right: if left[0] <= right[0]: result.append(left[0]) left = left[1:] else: result.append(right[0]) right = right[1:] while left: result.append(left[0]) left = left[1:] while right: result.append(right[0]) right = right[1:] return result"},{"question":"How can I identify the least frequent non-zero value in an array using Python?","solution":"from collections import Counter def least_frequent_non_zero_value(arr): Identify the least frequent non-zero value in an array. Arguments: arr -- list of integers Returns: The least frequent non-zero value or None if there is no non-zero value. # Filter out zero values non_zero_arr = [x for x in arr if x != 0] if not non_zero_arr: return None # Count the frequency of each non-zero value freq_count = Counter(non_zero_arr) # Find the least frequent non-zero value least_frequent_value = min(freq_count, key=freq_count.get) return least_frequent_value"},{"question":"How can I accurately identify the byte order (endianness) of the system I'm currently running on using Python, irrespective of whether it's big-endian or little-endian? I'm trying to create a function that can determine this without relying on any assumptions or specific system details.","solution":"import sys def get_system_endianness(): Returns the system endianness as a string. It will be either 'big-endian' or 'little-endian'. if sys.byteorder == \\"little\\": return \\"little-endian\\" else: return \\"big-endian\\""},{"question":"Write a Python program that can convert a complex nested dictionary with mixed data types into a JSON string. Also, this program must be able to handle and report errors if there are any unfriendly data types as per JSON standards.","solution":"import json def convert_to_json_string(data): Converts a complex nested dictionary with mixed data types to a JSON string. Handles errors if there are any non-serializable types. try: json_string = json.dumps(data) return json_string except (TypeError, ValueError) as e: return str(e)"},{"question":"Develop a Python program that not only calculates the factorial of the each element present in a provided list, but also handles potential exceptions in case the list contains elements that are not integers or elements that are negative. Start your list as integers=[3,5,2,'a',-3,10].","solution":"def calculate_factorial(n): Returns the factorial of a non-negative integer n. if not isinstance(n, int) or n < 0: raise ValueError(\\"n must be a non-negative integer\\") if n == 0 or n == 1: return 1 factorial = 1 for i in range(2, n + 1): factorial *= i return factorial def factorial_list(integers): Takes a list of integers and returns a list of factorials of these integers. Handles exceptions for non-integers or negative integers. results = [] for item in integers: try: result = calculate_factorial(item) results.append(result) except ValueError as e: results.append(str(e)) return results # Initial list integers = [3, 5, 2, 'a', -3, 10] # Calculate factorials result = factorial_list(integers) print(result)"},{"question":"You are given a string S containing only alphanumeric characters. Your task is to write a function that will determine if the string can be re-arranged to form a palindrome. Note that alphanumeric characters consist of lowercase English letters and digits.","solution":"def can_form_palindrome(S): Determines if the string can be re-arranged to form a palindrome. :param S: str: Input string containing only alphanumeric characters. :return: bool: True if the string can be re-arranged to form a palindrome, False otherwise. from collections import Counter # Count the occurrences of each character char_count = Counter(S) # Count the number of characters with an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be re-arranged to form a palindrome if it has at most one character with an odd frequency return odd_count <= 1"},{"question":"Define a recursive function to print out the elements in a nested list without using a loop. The function should also include a counter to keep track of the number of elements printed and should stop printing after a specified number of elements. Additionally, you should modify the function to handle both nested lists and nested tuples.","solution":"def print_nested_elements(nested, counter, max_elements, index=0): Recursively prints out the elements in a nested list or tuple without using loops. Stops printing once max_elements have been printed. Parameters: nested - A nested list or tuple containing the elements to print. counter - The current count of printed elements. max_elements - The maximum number of elements to print. index - The index of the current element in the nested list or tuple (default is 0). Returns: The updated counter after the elements are printed. if counter >= max_elements: return counter if index >= len(nested): return counter if isinstance(nested[index], (list, tuple)): # Recurse into the nested list or tuple counter = print_nested_elements(nested[index], counter, max_elements) else: print(nested[index]) counter += 1 # Move to the next element in the current list or tuple counter = print_nested_elements(nested, counter, max_elements, index + 1) return counter"},{"question":"Write a program for Bubble Sort that sorts an array of integers in descending order. The program should have a time complexity of O(n^2) and should not use any built-in sorting functions or libraries.","solution":"def bubble_sort_descending(arr): Sorts an array of integers in descending order using Bubble Sort. Args: arr (list): List of integers to be sorted. Returns: List: Sorted list of integers in descending order. n = len(arr) for i in range(n): for j in range(0, n - i - 1): if arr[j] < arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] return arr"},{"question":"Develop a Python script to generate 10 distinct random alphanumeric strings each of length 15. Furthermore, you should ensure that every generated string contains at least two digits and three uppercase letters. Validate each string to confirm the compliance before adding it to the final list.","solution":"import random import string def generate_random_string(): while True: # Generates a random string of length 15 str_random = ''.join(random.choices(string.ascii_uppercase + string.ascii_lowercase + string.digits, k=15)) # Checks if it has at least 2 digits and 3 uppercase letters if (sum(c.isdigit() for c in str_random) >= 2 and sum(c.isupper() for c in str_random) >= 3): return str_random def generate_list_of_random_strings(n): random_strings = set() while len(random_strings) < n: new_str = generate_random_string() random_strings.add(new_str) return list(random_strings) random_strings_list = generate_list_of_random_strings(10) for s in random_strings_list: print(s)"},{"question":"Given the following constraints, generate a program in Python that displays integers from 1 to 50 in a table format with the following columns: \\"Number\\", \\"Square\\", and \\"Cube\\". The program should also include error handling to handle any input errors and should be able to accept a user input for the range of integers to be displayed. The program should also output the results in Latex format and be able to save the output as a CSV file.","solution":"import csv def generate_table(start=1, end=50): Generates a table of numbers, their squares, and cubes from start to end inclusive. Returns the table in LaTeX format. if not (1 <= start <= end <= 50): raise ValueError(\\"Start and end must be between 1 and 50, and start must not be greater than end.\\") rows = [] # Prepare the rows of the table for number in range(start, end + 1): square = number ** 2 cube = number ** 3 rows.append((number, square, cube)) # Save as CSV with open('output.csv', 'w', newline='') as csvfile: writer = csv.writer(csvfile) writer.writerow([\\"Number\\", \\"Square\\", \\"Cube\\"]) writer.writerows(rows) # Convert to LaTeX format latex_table = \\"begin{tabular}{|c|c|c|}nhlinen\\" latex_table += \\"Number & Square & Cube nhlinen\\" for row in rows: latex_table += f\\"{row[0]} & {row[1]} & {row[2]} nhlinen\\" latex_table += \\"end{tabular}n\\" return latex_table"},{"question":"Implement a decorator that logs the execution time of a function to a remote server.","solution":"import time import requests def log_execution_time(func): A decorator that logs the execution time of a function to a remote server. def wrapper(*args, **kwargs): start_time = time.time() result = func(*args, **kwargs) end_time = time.time() execution_time = end_time - start_time # Log execution time to remote server try: requests.post('http://example.com/log', json={'execution_time': execution_time, 'func_name': func.__name__}) except requests.exceptions.RequestException: pass # Handle in case of a failure to reach the server return result return wrapper # Example usage @log_execution_time def slow_function(): time.sleep(2) # Simulate a slow function slow_function()"},{"question":"Write a function to flatten a nested dictionary, where the keys of the inner dictionaries can be a combination of strings and integers. The function should also handle lists of dictionaries within the dictionary. The keys of the flattened dictionary should be in the format \\"parentkey_childkey\\" for nested dictionaries and \\"parentkey_index\\" for lists, where index is the position of the dictionary in the list.","solution":"def flatten_dict(d, parent_key='', sep='_'): Flattens a nested dictionary, including lists of dictionaries within the dictionary. Args: - d (dict): The dictionary to flatten. - parent_key (str): The base key string for recursion, used internally. - sep (str): Separator between the keys. Returns: - dict: A flattened dictionary. items = [] for k, v in d.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else str(k) if isinstance(v, dict): items.extend(flatten_dict(v, new_key, sep=sep).items()) elif isinstance(v, list): for i, item in enumerate(v): if isinstance(item, dict): items.extend(flatten_dict(item, f\\"{new_key}{sep}{i}\\", sep=sep).items()) else: items.append((f\\"{new_key}{sep}{i}\\", item)) else: items.append((new_key, v)) return dict(items)"},{"question":"Given a list of numbers, write a Python function to return the indices of the two elements that sum to a given target value. If no two elements sum to the target, return an empty list. Note that there will only be one solution, and the same element cannot be used twice.","solution":"def two_sum(nums, target): Returns the indices of the two numbers that add up to the given target. Args: nums: List[int] - List of integers. target: int - Target sum value. Returns: List[int] - Indices of the two elements whose values sum up to target. indices_map = {} for i, num in enumerate(nums): complement = target - num if complement in indices_map: return [indices_map[complement], i] indices_map[num] = i return []"},{"question":"You will be given a list of words in random order. Your task is to sort them in alphabetical order using Python. However, you can't use the built-in sort function, you have to implement your own sorting algorithm. Additionally, write a function to check the correctness of your implementation using a few test cases.","solution":"def custom_sort(words): Returns a list of words sorted in alphabetical order without using the built-in sort function. for i in range(len(words) - 1): for j in range(0, len(words) - i - 1): if words[j] > words[j + 1]: words[j], words[j + 1] = words[j + 1], words[j] return words"},{"question":"Write a program in Python that does the following: takes a list of numbers as input, finds the two largest numbers in the list, adds them together, and then prints the result. Make sure to handle cases where the list has less than two elements or contains non-numeric values.","solution":"def sum_of_two_largest(numbers): Takes a list of numbers and returns the sum of the two largest numbers in the list. If the list contains less than two numbers or non-numeric values, returns None. # Ensure all elements in the list are numeric values if not all(isinstance(number, (int, float)) for number in numbers): return None # Ensure the list has at least two elements if len(numbers) < 2: return None # Find the two largest numbers largest = second_largest = float('-inf') for number in numbers: if number > largest: second_largest = largest largest = number elif number > second_largest: second_largest = number return largest + second_largest"},{"question":"Write a Python function that finds the length of the longest strictly increasing subsequence in a given list of integers using dynamic programming.","solution":"def length_of_lis(nums): Returns the length of the longest strictly increasing subsequence in the given list of integers. if not nums: return 0 n = len(nums) dp = [1] * n for i in range(1, n): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Craft a Python subroutine aiming to identify and return distinctive movable assets from a given list; these assets should include 'car', 'boat', 'airplane'. Here is an input example: [\\"car\\", \\"book\\", \\"boat\\", \\"painting\\", \\"airplane\\"].","solution":"def identify_movable_assets(asset_list): Returns a list of distinctive movable assets from the given list. Distinctive movable assets include: 'car', 'boat', 'airplane'. movable_assets = {'car', 'boat', 'airplane'} return list(set(asset_list) & movable_assets)"},{"question":"Given a paragraph of text, and an array of phrases, create a Python code that will identify all instances of each phrase in the paragraph considering word boundaries and case-insensitivity. Additionally, return the context in which these phrases are used i.e. the sentence containing the results.","solution":"import re from typing import List, Dict def find_phrases_in_paragraph(paragraph: str, phrases: List[str]) -> Dict[str, List[str]]: Identifies all instances of each phrase in the paragraph considering word boundaries and case-insensitivity, and returns the context (sentence) in which the phrases are used. sentences = re.split(r'(?<=.)s', paragraph) results = {phrase: [] for phrase in phrases} for phrase in phrases: phrase_pattern = re.compile(r'b' + re.escape(phrase) + r'b', re.IGNORECASE) for sentence in sentences: if phrase_pattern.search(sentence): results[phrase].append(sentence) return results"},{"question":"Create a Python function that takes a number as input and returns \`True\` if it is a strong number, and \`False\` otherwise. A strong number is a number that is equal to the sum of the factorial of its digits.","solution":"import math def is_strong_number(num): Returns True if the given number is a strong number, else False. A strong number is a number that is equal to the sum of the factorial of its digits. total = 0 for digit in str(num): total += math.factorial(int(digit)) return total == num"},{"question":"Input a list of strings, and write a program to output a list of all the strings with the same length.","solution":"def group_strings_by_length(strings): Groups strings by their lengths. :param strings: List of strings :return: List of lists, where each sublist contains strings of the same length from collections import defaultdict length_map = defaultdict(list) for string in strings: length_map[len(string)].append(string) return list(length_map.values())"},{"question":"Immutable data types are frequently used in functional programming and can contribute to more predictable and reliable code. In the context of a programming language that supports both mutable and immutable data types, what specific advantages do immutable data types offer? Provide examples to illustrate your points. Additionally, demonstrate how to create a custom immutable data type in a language of your choice, and explain why it is immutable and how it can be used in practice. Finally, compare the performance implications of using mutable vs. immutable data types in scenarios of frequent data modifications.","solution":"# Advantages of Immutable Data Types # 1. Predictability: Since immutable data cannot be changed after its creation, functions that use immutable data are more predictable and have no side effects. # Example: Python strings are immutable. string = \\"hello\\" new_string = string.replace('h', 'y') print(string) # Output: \\"hello\\" print(new_string) # Output: \\"yello\\" # 2. Thread-Safety: Immutable objects can be shared between threads without worrying about synchronization. # Example: Python tuples are immutable. from threading import Thread tuple_data = (1, 2, 3) # No need to worry about race conditions when accessing tuple_data in multiple threads. # Creating a Custom Immutable Data Type in Python from dataclasses import dataclass from typing import Tuple @dataclass(frozen=True) class ImmutablePoint: x: int y: int def move(self, dx: int, dy: int) -> 'ImmutablePoint': Returns a new ImmutablePoint shifted by (dx, dy) return ImmutablePoint(self.x + dx, self.y + dy) # Usage point1 = ImmutablePoint(1, 2) point2 = point1.move(3, 4) print(point1) # Output: ImmutablePoint(x=1, y=2) print(point2) # Output: ImmutablePoint(x=4, y=6) # Performance Implications # Mutable vs Immutable in Frequent Modifications # Immutable objects require creating new copies upon each modification, which can impact performance in scenarios with frequent updates. import timeit # Mutable list performance test def test_mutable(): mutable_list = [] for i in range(1000): mutable_list.append(i) return mutable_list # Immutable tuple performance test def test_immutable(): immutable_tuple = () for i in range(1000): immutable_tuple = immutable_tuple + (i,) return immutable_tuple mutable_time = timeit.timeit(test_mutable, number=100) immutable_time = timeit.timeit(test_immutable, number=100) print(f\\"Mutable time: {mutable_time}\\") # Typically faster for frequent modifications print(f\\"Immutable time: {immutable_time}\\") # Typically slower for frequent modifications"},{"question":"Write a Python function that takes in a string as input and returns the first non-repeating character in the string. If there are no non-repeating characters, return None. Your solution should have a time complexity of O(n) and only use a constant amount of additional space.","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the string s. If there are no non-repeating characters, return None. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 for char in s: if char_count[char] == 1: return char return None"},{"question":"Develop an implementation of a function that accepts two string objects as parameters. The task involves generating and returning distinct alphabetic characters that appear in both provided strings, emphasizing only on the unique elements disregarding their frequency. Moreover, the function should be case-insensitive, treating upper- and lowercase variant of a letter as identical. In addition, ensure that the returned characters are arranged in alphabetical order.","solution":"def common_unique_characters(s1, s2): Returns unique alphabetic characters that appear in both strings, case-insensitively, in alphabetical order. # Convert both strings to lowercase and convert to sets to get unique alphabetic characters set1 = set(filter(str.isalpha, s1.lower())) set2 = set(filter(str.isalpha, s2.lower())) # Find intersection of both sets to get common unique characters common_characters = sorted(set1.intersection(set2)) return ''.join(common_characters)"},{"question":"Given a binary search tree (BST), write a method that finds the element that appears most frequently in the tree. You cannot use additional data structures and your solution should have optimal space complexity.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def find_mode(root): Finds the mode(s) in a binary search tree (BST). def inorder(node): if not node: return inorder(node.left) handle_value(node.val) inorder(node.right) def handle_value(val): nonlocal current, current_count, max_count, modes if val != current: current = val current_count = 0 current_count += 1 if current_count > max_count: max_count = current_count modes = [val] elif current_count == max_count: modes.append(val) current = None current_count = 0 max_count = 0 modes = [] inorder(root) return modes"},{"question":"Given a unsorted array of numbers, how do you sort it using a Python program?","solution":"def sort_array(arr): Sorts an unsorted array of numbers. Parameters: arr (list of int/float): A list of unsorted numbers. Returns: list of int/float: A list of sorted numbers. return sorted(arr)"},{"question":"Please design and demonstrate a Python algorithm that can extract and isolate the content within quotation marks from a given text. Furthermore, this algorithm must be able to categorize and differentiate between single('') and double(\\"\\") quotation marks, as well as handling nested quotations. In your response, please consider a variety of quotations usage, including those in the middle of sentences, to ensure the algorithm's effectiveness. Also, ensure the algorithm takes into account any particular context that might affect the precision of the quotation extraction process. Below is a Python solution using a \`re\` (Regular expressions) library to extract and handle quoted strings. The solution involves writing regular expressions to match different patterns of quotations and using the \`re.findall\` method to return a list of all matched patterns.","solution":"import re def extract_quoted_content(text): Extracts and categorizes contents from single and double quotes in the provided text. Arguments: text -- the input text from which to extract quoted content Returns: A dictionary with two keys: 'single_quotes' and 'double_quotes', each containing a list of contents found within the respective quotation marks. single_quotes_pattern = r\\"'([^']*)'\\" double_quotes_pattern = r'\\"([^\\"]*)\\"' single_quotes = re.findall(single_quotes_pattern, text) double_quotes = re.findall(double_quotes_pattern, text) return { 'single_quotes': single_quotes, 'double_quotes': double_quotes }"},{"question":"How would you add elements from one list to another list in Python, but ensuring that the elements are added in reverse order, while also maintaining a time complexity of O(1)? Additionally, ensure that the solution does not use any built-in functions or methods that directly reverse the list, such as \`reverse()\` or \`[::-1]\`.","solution":"def add_elements_in_reverse(source, destination): Adds elements from source list to destination list in reverse order. The elements from the source list are appended one by one to the destination list. for i in range(len(source) - 1, -1, -1): destination.append(source[i]) return destination"},{"question":"Write (Fahrenheit) temperature converter to Celsius, with some input error checking for non-numerical values, in Python.","solution":"def fahrenheit_to_celsius(fahrenheit): Converts Fahrenheit to Celsius. If the input is not a number, raises a ValueError. if not isinstance(fahrenheit, (int, float)): raise ValueError(\\"Input must be a number.\\") return (fahrenheit - 32) * 5.0/9.0"},{"question":"Given a list of words, write a program to generate a word ladder from the first word to the last word. Each step of the ladder should change one letter at a time, and each intermediate word must be a valid word in the list. The goal is to find the shortest word ladder that connects the two words. Use breadth-first search (BFS) to find the shortest path.","solution":"from collections import deque def word_ladder(start_word, end_word, word_list): Generates the shortest word ladder from start_word to end_word using words from word_list. Each step of the ladder changes one letter, and each intermediate must be a valid word in word_list. Uses breadth-first searching for the shortest path. Returns the sequence of words representing the shortest word ladder or an empty list if no ladder exists. if end_word not in word_list or not start_word or not end_word or not word_list: return [] word_list = set(word_list) queue = deque([(start_word, [start_word])]) visited = set(start_word) while queue: current_word, path = queue.popleft() if current_word == end_word: return path for i in range(len(current_word)): for char in \\"abcdefghijklmnopqrstuvwxyz\\": next_word = current_word[:i] + char + current_word[i+1:] if next_word in word_list and next_word not in visited: visited.add(next_word) queue.append((next_word, path + [next_word])) return [] # Example usage: # print(word_ladder(\\"hit\\", \\"cog\\", [\\"hot\\", \\"dot\\", \\"dog\\", \\"lot\\", \\"log\\", \\"cog\\"])) # Output: ['hit', 'hot', 'dot', 'dog', 'cog']"},{"question":"Suppose I'm presented with two distinct arrays of whole numbers, could you devise a Python script that identifies every number from both lists that fall under the Fibonacci sequence?","solution":"def is_fibonacci(n): Helper function to check if a given number n is a Fibonacci number. A number is a Fibonacci number if and only if one of (5*n^2 + 4) or (5*n^2 - 4) is a perfect square. if n < 0: return False x1 = 5 * (n ** 2) + 4 x2 = 5 * (n ** 2) - 4 def is_perfect_square(x): s = int(x ** 0.5) return s * s == x return is_perfect_square(x1) or is_perfect_square(x2) def find_fibonacci_numbers(arr1, arr2): Identifies every number from both arr1 and arr2 that fall under the Fibonacci sequence. fib_numbers = [x for x in set(arr1 + arr2) if is_fibonacci(x)] return fib_numbers"},{"question":"Create a Python program that generates a random number in the range from 0 to 10 and asks the user to guess it. If the user's number is too low or too high, the program should give a respective hint. The user wins when they guess the number correctly. Limit the number of guesses to 5.","solution":"import random def guess_number_game(): number_to_guess = random.randint(0, 10) attempts = 5 print(\\"Guess the number (between 0 and 10)! You have 5 attempts.\\") for attempt in range(1, attempts + 1): user_guess = int(input(f\\"Attempt {attempt}: Your guess: \\")) if user_guess < number_to_guess: print(\\"Too low!\\") elif user_guess > number_to_guess: print(\\"Too high!\\") else: print(\\"Congratulations! You guessed it right.\\") return True print(f\\"Sorry! You've run out of attempts. The number was {number_to_guess}.\\") return False"},{"question":"Write a code to find the maximum of four numbers using only ternary operators.","solution":"def max_of_four(a, b, c, d): Returns the maximum of four numbers using only ternary operators. max_ab = a if a > b else b max_cd = c if c > d else d return max_ab if max_ab > max_cd else max_cd"},{"question":"Please provide me with a Python code snippet that converts an image to JPG format using the Pillow library. The code must have an additional requirement where the image variable has to be greater than 1MB in size, and it must also include a function that checks the image's size before conversion. I expect the code to handle the scenario where the image variable is not greater than 1MB in size by raising an exception with a custom error message \\"Image size is less than 1MB\\". Also, the code should save the converted image with a custom filename provided as a function argument. If no filename is provided, the code should save the image as 'image.jpg' by default.","solution":"from PIL import Image import os def check_image_size(image_path): Checks if the image size is greater than 1MB. image_size = os.path.getsize(image_path) if image_size <= (1 * 1024 * 1024): raise ValueError(\\"Image size is less than 1MB\\") return image_size def convert_to_jpg(image_path, output_filename='image.jpg'): Converts the given image to JPG format if its size is greater than 1MB. :param image_path: Path to the input image :param output_filename: Filename for the output JPG image if check_image_size(image_path): with Image.open(image_path) as img: img.convert(\\"RGB\\").save(output_filename, \\"JPEG\\")"},{"question":"Given the URL http://www.linkedin.com/home/profile? whose segments are separated by the forward slash ('/'), create a Python function that not only condenses the URL to its shortest possible length, but also returns a dictionary showing all the hierarchy of the URL segments with their corresponding positions along with the option to return the top-n segments in order from the root.","solution":"def condense_url(url): Condenses the URL to its shortest possible length and returns a dictionary showing all the hierarchy of the URL segments with their corresponding positions. Args: url (str): The URL to condense. Returns: tuple: A condensed string of the URL and dictionary of URL segments. segments = url.split('/') condensed_segments = [seg for seg in segments if seg] hierarchy_dict = {index: segment for index, segment in enumerate(condensed_segments, start=1)} condensed_url = \\"/\\".join(condensed_segments) return condensed_url, hierarchy_dict def top_n_segments(url, n): Return the top-n segments in order from the root. Args: url (str): The URL to extract segments from. n (int): Number of top segments to return. Returns: list: List of top-n segments. _, hierarchy_dict = condense_url(url) return list(hierarchy_dict.values())[:n]"},{"question":"I need to train a deep neural network to be able to predict a 1D vector of size 10 given a 2D matrix of size 10x10 as input. Is it possible to do this with PyTorch? Please provide a step-by-step guide on how to construct the model, including how to define the layers, how to shape the input data, and how to set the parameters for the model training.","solution":"import torch import torch.nn as nn import torch.optim as optim class SimpleDNN(nn.Module): def __init__(self): super(SimpleDNN, self).__init__() # Define a simple fully connected neural network self.fc1 = nn.Linear(10 * 10, 128) self.fc2 = nn.Linear(128, 64) self.fc3 = nn.Linear(64, 10) def forward(self, x): # Flatten the 2D input to 1D x = x.view(x.size(0), -1) x = torch.relu(self.fc1(x)) x = torch.relu(self.fc2(x)) x = self.fc3(x) return x def train_model(model, criterion, optimizer, train_loader, num_epochs): for epoch in range(num_epochs): for inputs, targets in train_loader: # Zero the parameter gradients optimizer.zero_grad() # Forward pass outputs = model(inputs) # Compute loss loss = criterion(outputs, targets) # Backward pass and optimize loss.backward() optimizer.step() # Example data to demonstrate the input and data loader # Normally, you should load your dataset using torchvision or custom data loader # Here we create dummy data for demonstration def create_dummy_data(num_samples=100): X = torch.randn(num_samples, 10, 10) y = torch.randn(num_samples, 10) return X, y X, y = create_dummy_data() train_loader = torch.utils.data.DataLoader(torch.utils.data.TensorDataset(X, y), batch_size=8, shuffle=True) # Instantiate the model, define the loss function and the optimizer model = SimpleDNN() criterion = nn.MSELoss() optimizer = optim.Adam(model.parameters(), lr=0.001) # Train the model train_model(model, criterion, optimizer, train_loader, num_epochs=10)"},{"question":"Remove duplicate characters in a string while preserving the order of the first occurrence of each character. However, you are not allowed to use any additional data structures, built-in functions, or algorithms with a time complexity higher than O(n log n). The solution should only use basic operations and control structures, such as loops and conditionals.","solution":"def remove_duplicates(s): Remove duplicate characters in a string while preserving the order of the first occurrence of each character. result = \\"\\" seen = set() for ch in s: if ch not in seen: result += ch seen.add(ch) return result"},{"question":"Write a Python program to find the concatenation of two sorted linked lists.","solution":"class Node: Node class for storing data and the next node reference. def __init__(self, data): self.data = data self.next = None def merge_sorted_lists(head1, head2): Merges two sorted linked lists into a single sorted linked list. # Create a dummy node to form the start of the merged linked list dummy = Node(0) current = dummy # Traverse both lists and append the smallest node to the current while head1 and head2: if head1.data <= head2.data: current.next = head1 head1 = head1.next else: current.next = head2 head2 = head2.next current = current.next # At this point, at least one of the heads is None, append the remainder of the other list if head1: current.next = head1 else: current.next = head2 return dummy.next"},{"question":"Given a number n and a value k, write a code snippet to print out all the subsets of k elements from a set of n elements, where the set consists of numbers from 1 to n (inclusive).","solution":"from itertools import combinations def subsets_of_k_elements(n, k): Returns all subsets of k elements from a set of n elements. The set consists of numbers from 1 to n (inclusive). :param n: The size of the set (n elements). :param k: The size of each subset. :return: A list of tuples, each containing a subset of k elements. elements = list(range(1, n + 1)) return list(combinations(elements, k))"},{"question":"Create a program that takes two strings as input and outputs a boolean value indicating whether the strings are anagrams of each other.","solution":"def are_anagrams(s1, s2): Returns True if s1 and s2 are anagrams, False otherwise. return sorted(s1) == sorted(s2)"},{"question":"Build a pseudo random number generator that generates numbers between 0-100, but avoids common pitfalls such as predictable sequence or low cycle length, by using a secure cryptographic algorithm. Ensure that the program is implemented in Python and includes a seed function that can be initialized with a user-defined value or a system-provided one. Additionally, the program should have an output function that displays the generated number along with its position in the sequence. The generator should not repeat a number until all other numbers in the range have been generated. Finally, the program should include a function to test the randomness of the generated sequence using statistical analysis.","solution":"import secrets from itertools import permutations import random import numpy as np from scipy.stats import chisquare class SecureRNG: def __init__(self, seed=None): Initializes the SecureRNG with a seed value. If no seed is provided, it uses a cryptographic random seed. self.seed = seed or secrets.token_bytes(16) self.permutation = self._generate_unique_permutation() self.index = 0 def _generate_unique_permutation(self): Generates a unique permutation of numbers from 0 to 100. random.seed(self.seed) sequence = list(range(101)) random.shuffle(sequence) return sequence def next_number(self): Generates the next number in the sequence and its position. if self.index >= len(self.permutation): raise ValueError(\\"All numbers have been generated.\\") number = self.permutation[self.index] idx = self.index self.index += 1 return number, idx def reset(self): Resets the generator to the initial state. self.permutation = self._generate_unique_permutation() self.index = 0 def test_randomness(self, num_samples=10000): Performs a chi-square test to evaluate the randomness of the generated numbers. samples = [self.permutation[i % len(self.permutation)] for i in range(num_samples)] frequencies = {n: samples.count(n) for n in range(101)} expected = [num_samples / 101] * 101 observed = [frequencies[n] for n in range(101)] chi2, p_value = chisquare(observed, expected) return chi2, p_value"},{"question":"Compose a Python program that can establish a new directory within an existing operational directory, taking into account checks for pre-existing name clashes, and dynamically creating a timestamped subfolder if a directory with the intended name already exists.","solution":"import os from datetime import datetime def create_directory(base_dir, new_dir_name): Creates a new directory within base_dir. If a directory with the same name already exists, a timestamp is added to the name to avoid clashes. Parameters: base_dir (str): The base directory where the new directory will be created. new_dir_name (str): The name of the new directory. Returns: str: The path of the created directory. new_dir_path = os.path.join(base_dir, new_dir_name) if os.path.exists(new_dir_path): timestamp = datetime.now().strftime('%Y%m%d%H%M%S') new_dir_path = os.path.join(base_dir, f\\"{new_dir_name}_{timestamp}\\") os.makedirs(new_dir_path) return new_dir_path"},{"question":"change the below python code such a way that, when the program is run from the command line can accept a number as argument and print the nth fibonacci number for that input number.","solution":"import sys def fibonacci(n): Returns the nth Fibonacci number. if n <= 0: return \\"Input should be a positive integer\\" elif n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 for _ in range(n - 2): a, b = b, a + b return b if __name__ == \\"__main__\\": if len(sys.argv) != 2: print(\\"Usage: python script.py <number>\\") else: try: n = int(sys.argv[1]) print(fibonacci(n)) except ValueError: print(\\"Input should be an integer\\")"},{"question":"Given two sorted lists, merge the two lists into a new sorted list without using any built-in sort functions. Moreover, provide functionality to compare the performance of your function against the in-built sort function of python using time module.","solution":"import time def merge_sorted_lists(list1, list2): Merge two sorted lists into a new sorted list. merged_list = [] i = 0 j = 0 # Traverse both lists and append the smallest elements to the merged list while i < len(list1) and j < len(list2): if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # If there are remaining elements in list1, append them to merged_list while i < len(list1): merged_list.append(list1[i]) i += 1 # If there are remaining elements in list2, append them to merged_list while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list def compare_performance(list1, list2): Compare the performance of the custom merge_sorted_lists function against in-built sort function. # Timing custom merge_sorted_lists function start_time = time.time() merged_list_custom = merge_sorted_lists(list1, list2) custom_duration = time.time() - start_time # Timing in-built sort function start_time = time.time() merged_list_builtin = sorted(list1 + list2) builtin_duration = time.time() - start_time return {'custom_duration': custom_duration, 'builtin_duration': builtin_duration}"},{"question":"Can you write a Python function that takes a string as input and returns a dictionary where the keys are the characters from the string, and the values are the counts of those characters' occurrences in the string?","solution":"def count_characters(s): Takes a string as input and returns a dictionary with characters as keys and their count of occurrences as values. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count"},{"question":"You are given two strings - A and B. Write a function in Python to find out if B is a substring of A, considering the case sensitivity as well. Additionally, implement the function without using the in-built 'in' keyword or any other in-built substring search function. Also, consider edge cases such as if the strings are empty or if B is longer than A.","solution":"def is_substring(A, B): Returns True if B is a substring of A considering case sensitivity. if B == \\"\\": return True if A == \\"\\" or len(B) > len(A): return False len_A = len(A) len_B = len(B) for i in range(len_A - len_B + 1): if A[i:i + len_B] == B: return True return False"},{"question":"Write a function in Python that takes as input an integer number n (n >= 0) and returns the n'th number in the Fibonacci sequence. Additionally, the function should implement memoization for optimizing the computation time for large n.","solution":"def fibonacci(n, memo={}): Returns the n-th number in the Fibonacci sequence, optimized with memoization. if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo) return memo[n]"},{"question":"Write a simple python function that given a list of integers, returns a list where every number is replaced with the number of smaller elements to the right of that element.","solution":"def count_smaller_elements(nums): Given a list of integers, returns a list where each number is replaced with the number of smaller elements to the right of that element. result = [] for i in range(len(nums)): count = 0 for j in range(i + 1, len(nums)): if nums[j] < nums[i]: count += 1 result.append(count) return result"},{"question":"Convert the following textual instruction into a Python function with a suitable name and documentation. The function should accept a list of positive integers as input and return the highest common factor. If the list is empty or contains non-integer or non-positive values, the function should raise ValueError.","solution":"from math import gcd from functools import reduce def highest_common_factor(nums): Returns the highest common factor (HCF) of a list of positive integers. Args: nums (list): A list of positive integers. Returns: int: The highest common factor of the list. Raises: ValueError: If the list is empty, contains non-integer, or non-positive values. if not nums: raise ValueError(\\"The list cannot be empty.\\") for num in nums: if not isinstance(num, int) or num <= 0: raise ValueError(\\"All elements must be positive integers.\\") return reduce(gcd, nums)"},{"question":"Write a function in Python that takes a base and an exponent as arguments and calculates the power of the base raised to the exponent. Also, include exception handling for cases where the base or the exponent is not a numeric value or where the exponent is negative. In case of a negative exponent, instead of returning a result, the function should return a string saying \\"Exponent cannot be negative\\". Here is a piece of erroneous code for reference, try to correct this code in your solution.","solution":"def power(base, exponent): Returns base raised to the power of exponent. Handles edge cases where the base or exponent is not numeric or when the exponent is negative. try: base = float(base) exponent = float(exponent) except ValueError: return \\"Base and exponent must be numeric\\" if exponent < 0: return \\"Exponent cannot be negative\\" return base ** exponent"},{"question":"Create a Python script that will analyze a website and return a list of all images on the site that are not optimized for web use. The script should check each image for size, resolution, and file type, and flag any images that are over 100 KB in size, have a resolution over 1000x1000 pixels, or are not in JPEG or PNG format. The output should include the URL of the website and the names and locations of the flagged images.","solution":"import requests from bs4 import BeautifulSoup from PIL import Image from io import BytesIO def analyze_website_images(url): Analyzes images on a website to flag those not optimized for web use. An image is flagged if it is over 100 KB, has a resolution over 1000x1000 pixels, or is not in JPEG or PNG format. Args: url (str): The URL of the website to analyze. Returns: dict: A dictionary with the website URL and a list of flagged images with their locations. flagged_images = [] try: response = requests.get(url) response.raise_for_status() soup = BeautifulSoup(response.content, 'html.parser') images = soup.find_all('img') for img in images: src = img.get('src') if not src: continue if not src.startswith('http'): src = url + '/' + src img_response = requests.get(src) img_response.raise_for_status() img_bytes = BytesIO(img_response.content) img_size = img_bytes.tell() / 1024 # Convert bytes to KB image = Image.open(img_bytes) width, height = image.size img_format = image.format if img_size > 100 or width > 1000 or height > 1000 or img_format not in ['JPEG', 'PNG']: flagged_images.append({ 'src': src, 'size_kb': img_size, 'resolution': f'{width}x{height}', 'format': img_format }) except requests.RequestException as e: print(f\\"Error accessing the website or image: {e}\\") return { 'url': url, 'flagged_images': flagged_images }"},{"question":"Develop a Python function that extracts every other element from a given array, starting with the first element. However, instead of using the typical array type, use a linked list. Keep the original structure of the linked list for the result - do not convert it to an array for the output.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def extract_every_other(head): if not head: return None dummy = ListNode() current_result = dummy current = head skip = False while current: if not skip: current_result.next = ListNode(current.val) current_result = current_result.next skip = not skip current = current.next return dummy.next"},{"question":"How do I create a function that finds the maximum integer in a list? And suppose there is a constraint where the list can contain up to 10^6 elements?","solution":"def find_maximum(lst): Returns the maximum integer in the list. Assumes the list contains at least one integer and up to 10^6 elements. if not lst: raise ValueError(\\"The list is empty.\\") maximum = lst[0] for num in lst: if num > maximum: maximum = num return maximum"},{"question":"I'm trying to solve a problem and I think recursion might help. I need a function that finds the minimum value in a nested list of integers. Can you write a Python program that does this using recursion?","solution":"def find_min_in_nested_list(nested_list): Recursively finds the minimum value in a nested list of integers. :param nested_list: List containing integers or other nested lists of integers :return: Minimum integer value in the nested list min_value = float('inf') for element in nested_list: if isinstance(element, list): min_value = min(min_value, find_min_in_nested_list(element)) else: min_value = min(min_value, element) return min_value"},{"question":"Write a Python program to merge two CSV files into a third file, ensuring that common records (based on specific columns) are not duplicated.","solution":"import pandas as pd def merge_csv_files(file1, file2, key_columns, output_file): Merges two CSV files into a third file, ensuring no duplicate records based on key_columns. :param file1: Path to the first CSV file. :param file2: Path to the second CSV file. :param key_columns: List of column names to check for duplicates. :param output_file: Path to the output merged CSV file. # Read the CSV files df1 = pd.read_csv(file1) df2 = pd.read_csv(file2) # Merge the dataframes on key columns, keeping all data from both dfs without creating duplicates merged_df = pd.concat([df1, df2]).drop_duplicates(subset=key_columns).reset_index(drop=True) # Save the merged dataframe to the output file merged_df.to_csv(output_file, index=False)"},{"question":"Key a recursive function in Python that prints the Fibonacci series up to an nth number given as parameter.","solution":"def fibonacci(n, a=0, b=1): Prints the Fibonacci series up to the nth number. # Base condition if n <= 0: return print(a, end=' ') # Recursive call fibonacci(n-1, b, a + b)"},{"question":"I want to convert a number to an integer without rounding. How can I achieve this using a Python script?","solution":"def convert_to_integer(number): Converts a number to an integer without rounding. Parameters: number (float): The number to convert. Returns: int: The truncated integer part of the number. return int(number)"},{"question":"Reverse a given list and return the result. The input list will contain at most 100 elements. You are not allowed to use any built-in functions or methods for reversing the list. You must implement your own algorithm to reverse the list. Additionally, you need to ensure that the time complexity of your solution is O(n), where n is the number of elements in the list.","solution":"def reverse_list(lst): Reverses the given list. Parameters: lst (list): A list of elements to be reversed. Returns: list: The reversed list. n = len(lst) reversed_lst = [None] * n for i in range(n): reversed_lst[i] = lst[n-1-i] return reversed_lst"},{"question":"Create a python function that takes a string as input and returns a boolean indicating if the string is a palindrome.","solution":"def is_palindrome(s: str) -> bool: Returns whether the input string is a palindrome. Args: s: str - The input string. Returns: bool - True if the string is a palindrome, False otherwise. # Convert to lowercase and remove non-alphanumeric characters for normalization s = ''.join(filter(str.isalnum, s)).lower() # Check if the string is the same forward and backward return s == s[::-1]"},{"question":"Write your own version of bubble sort for an array of integers. Additionally, detect if the array is already sorted to avoid unnecessary passes.","solution":"def bubble_sort(arr): Sorts an array of integers using bubble sort algorithm. If the array is already sorted, it stops early. n = len(arr) for i in range(n): # Set a flag to detect if any swapping is done swapped = False for j in range(0, n-i-1): if arr[j] > arr[j+1]: # Swap if the element found is greater # than the next element arr[j], arr[j+1] = arr[j+1], arr[j] swapped = True # If no swapping done in the inner loop, array is sorted if not swapped: break return arr"},{"question":"Generate a matrix of size n by m filled with zero's where n and m are inputs provided by the user. Then, write a function that checks if a given matrix is symmetrical. Note that a matrix is symmetrical if it is square (n = m) and equal to its transpose. Once this function is confirmed working properly, introduce an error in the code that needs to be debugged. Make sure to document your code properly and test it with various inputs.","solution":"def generate_zero_matrix(n, m): Generates a matrix of size n by m filled with zero's. return [[0 for _ in range(m)] for _ in range(n)] def is_symmetric(matrix): Checks if a given matrix is symmetrical. A matrix is symmetrical if it is square (n = m) and equal to its transpose. n = len(matrix) m = len(matrix[0]) # Matrix should be square if n != m: return False # Check if matrix is equal to its transpose for i in range(n): for j in range(m): if matrix[i][j] != matrix[j][i]: return False return True"},{"question":"Given two lists of strings, write a program to combine them into a dictionary whose keys are the strings in one list and values are the strings in the other list. The lengths of the two lists will always be the same.","solution":"def combine_lists_to_dict(keys, values): Combines two lists into a dictionary with keys from the first list and values from the second list. Args: keys (list): The list of keys. values (list): The list of values. Returns: dict: The dictionary formed by combining keys and values. return dict(zip(keys, values))"},{"question":"Develop a program that returns the 9th and 10th characters from a given string. However, you are not allowed to use any built-in string manipulation functions, methods, or libraries. Your program should only use basic string operations and logical steps to achieve the desired result. Additionally, you should also ensure that your program handles cases where the input string is shorter than 10 characters by notifying the user that the string is too short.","solution":"def get_9th_and_10th_chars(s): Returns the 9th and 10th characters from the given string \`s\`. If the string is shorter than 10 characters, it notifies the user. # Check if the string is too short length = 0 for char in s: length += 1 if length < 10: return \\"The string is too short\\" # Initialize counters ninth_char = None tenth_char = None counter = 0 # Iterate through the string to get the 9th and 10th characters for char in s: counter += 1 if counter == 9: ninth_char = char elif counter == 10: tenth_char = char break return ninth_char + tenth_char"},{"question":"I have a list of email addresses stored in a Python list. Unfortunately, some of the email addresses are malformed or invalid. How can I filter this list and remove all the invalid email addresses? Also, please ensure that the function you provide is capable of handling very large lists efficiently.","solution":"import re def filter_valid_emails(email_list): Filters out invalid email addresses from a given list. Parameters: email_list (list of str): List containing email addresses. Returns: list of str: List containing only valid email addresses. # Regular expression pattern for validating an email email_pattern = re.compile(r\\"^[w.-]+@[w.-]+.w+\\") # Filter and return only those emails that match the pattern return [email for email in email_list if email_pattern.match(email)]"},{"question":"Write a function that takes in a list of numbers and returns a new list with only the even numbers from the original list, in the same order. The function should have a time complexity of O(n) and a space complexity of O(1), where n is the length of the input list.","solution":"def filter_even_numbers(nums): Returns a new list containing only the even numbers from the input list, in the same order. Args: nums (List[int]): The list of numbers to filter. Returns: List[int]: A list of even numbers from the input list. return [num for num in nums if num % 2 == 0]"},{"question":"Reverse the given array in-place and return it, but do not use any built-in array reversing functions or methods. The original array should be modified. Additionally, you should solve this problem with a time complexity of O(n) and space complexity of O(1).","solution":"def reverse_array(arr): Reverses the given array in place. Args: arr (list): List of elements to be reversed. Returns: list: The same list object with elements reversed. left, right = 0, len(arr) - 1 while left < right: arr[left], arr[right] = arr[right], arr[left] left += 1 right -= 1 return arr"},{"question":"Write a Python program that takes a list of positive integers and returns the index of the last unique mode (the most occurring element) in the list. If there are multiple modes with the same highest frequency, return the index of the last one in the list. If there is no mode, return -1.","solution":"def last_unique_mode_index(numbers): Takes a list of positive integers and returns the index of the last unique mode (the most occurring element) in the list. If there are multiple modes with the same highest frequency, return the index of the last one in the list. If there is no mode, return -1. from collections import Counter if not numbers: return -1 # Count occurrences of each number counts = Counter(numbers) max_frequency = max(counts.values()) if max_frequency == 1: return -1 # Collect indices of all elements that have max_frequency modes = [num for num, freq in counts.items() if freq == max_frequency] last_index = -1 # Traverse the list from right to left to find the last unique mode for i in range(len(numbers)-1, -1, -1): if numbers[i] in modes: last_index = i break return last_index"},{"question":"Create a python program that takes a keyword as an input and prints the top 10 relevant Wikipedia articles for that keyword. However, you are not allowed to use any external libraries or modules, including the Wikipedia API. You must parse the Wikipedia page HTML directly to extract the relevant information. Additionally, your program should implement a caching mechanism to store the parsed data and minimize the number of HTTP requests made to the Wikipedia server.","solution":"import requests from bs4 import BeautifulSoup search_results_cache = {} def search_wikipedia(keyword): global search_results_cache # Return cached results if they exist if keyword in search_results_cache: return search_results_cache[keyword] # Prepare the URL to search on Wikipedia search_url = f\\"https://en.wikipedia.org/wiki/Special:Search?search={keyword}\\" try: response = requests.get(search_url) response.raise_for_status() soup = BeautifulSoup(response.text, 'html.parser') # Find the search results search_results = [] for link in soup.find_all('a', href=True): title = link.get('title') href = link.get('href') if title and href.startswith(\\"/wiki/\\") and not href.startswith(\\"/wiki/Special:\\"): search_results.append((title, f\\"https://en.wikipedia.org{href}\\")) if len(search_results) >= 10: break # Cache the results search_results_cache[keyword] = search_results return search_results except requests.exceptions.RequestException as e: print(f\\"Error fetching search results: {e}\\") return [] # Example usage: # articles = search_wikipedia(\\"Python programming\\") # for title, link in articles: # print(f\\"{title}: {link}\\")"},{"question":"Develop a more complex function to translate a binary input (in string form) to its octal equivalent (as a string), without utilising built-in or imported functions. Ensure the function includes error-handling capabilities to manage instances where the binary string begins with multiple zeros. Further, enhance the function to handle extra edge cases. Additionally, provide an erroneous code for reference to increase misdirection.","solution":"def binary_to_octal(binary_str): Converts a binary string to its octal equivalent string. Args: binary_str (str): A string representing a binary number. Returns: str: A string representing the octal equivalent of the binary number. Raises: ValueError: If the input string is not a valid binary number. # Error handling for invalid inputs (non-binary strings) if not binary_str or any(c not in '01' for c in binary_str): raise ValueError(\\"Input must be a binary string containing only '0' and '1'\\") # Remove leading zeros binary_str = binary_str.lstrip('0') # Handle the edge case for an empty string after stripping leading zeros if not binary_str: return '0' # Padding the binary string to make its length a multiple of 3 while len(binary_str) % 3 != 0: binary_str = '0' + binary_str octal_str = '' # Iterate over the binary string in chunks of 3 bits for i in range(0, len(binary_str), 3): chunk = binary_str[i:i+3] octal_digit = 0 if chunk[0] == '1': octal_digit += 4 if chunk[1] == '1': octal_digit += 2 if chunk[2] == '1': octal_digit += 1 octal_str += str(octal_digit) return octal_str"},{"question":"Given two lists, list A and list B, which may contain duplicates, write a Python function to find the unique elements that appear in both lists. However, the output should be in the form of a list of tuples where each tuple represents an element and the number of times it occurs in both lists combined. Also, write the function in such a way that it does not use any inbuilt library functions for set operations or counting elements, instead uses basic Python programming constructs.","solution":"def unique_elements_with_counts(list_a, list_b): Returns unique elements that appear in both lists A and B along with their combined counts. combined_counts = {} # Count elements in list_a for elem in list_a: if elem in combined_counts: combined_counts[elem] += 1 else: combined_counts[elem] = 1 # Count elements in list_b for elem in list_b: if elem in combined_counts: combined_counts[elem] += 1 else: combined_counts[elem] = 1 # Find unique elements appearing in both lists result = [] for elem in combined_counts: if elem in list_a and elem in list_b: result.append((elem, combined_counts[elem])) return result"},{"question":"Write a Python function to remove a specific element from a list. Also, if the element occurs more than once, remove all its occurrences and return the count of how many times it has been removed.","solution":"def remove_element(lst, element): Removes all occurrences of an element from the list and returns the count of removals. Parameters: lst (list): The list from which to remove the element. element: The element to be removed from the list. Returns: int: The count of removed elements. count = 0 while element in lst: lst.remove(element) count += 1 return count"},{"question":"Can you write a Python function that replaces all vowels in a given string with their corresponding numbers as per the following rule: a->1, e->2, i->3, o->4, u->5, and also count the number of vowel replacements made, but do not use any built-in Python string functions for vowel checking.","solution":"def replace_vowels(input_string): Replaces all vowels in the string with: a->1, e->2, i->3, o->4, u->5 and counts the number of replacements. Args: input_string (string): The input string to be modified. Returns: (tuple): A tuple containing the modified string and the number of replacements. # Define vowel to number mappings vowel_mapping = { 'a': '1', 'A': '1', 'e': '2', 'E': '2', 'i': '3', 'I': '3', 'o': '4', 'O': '4', 'u': '5', 'U': '5' } # Initialize modified string and replacement count modified_string = \\"\\" replacement_count = 0 # Loop through characters of the input string for char in input_string: if char in vowel_mapping: modified_string += vowel_mapping[char] replacement_count += 1 else: modified_string += char return modified_string, replacement_count"},{"question":"Let's say I have a string list in Python, and I want to join it using an arbitrary separator only when the list contains more than two elements. How can this be achieved?","solution":"def join_with_separator(strings, separator): Joins the elements of the list \`strings\` using the \`separator\` if there are more than two elements, otherwise returns the list as is without joining. Parameters: strings (list of str): The list of strings to join. separator (str): The string used to separate the elements. Returns: str: The joined string if the list has more than two elements, otherwise returns the original list. if len(strings) > 2: return separator.join(strings) return strings"},{"question":"I want to replace all elements in an array with the nearest non-None element from the left side. If there are no non-None elements on the left side, then the element should be replaced with 0. Can you write a function to accomplish this task?","solution":"def replace_with_nearest_left(arr): Replaces None elements in the array with the nearest non-None element from the left side. If there are no non-None elements on the left side, replaces with 0. :param arr: List of elements which may include None. :return: List with None elements replaced. result = [] last_non_none = 0 for element in arr: if element is None: result.append(last_non_none) else: last_non_none = element result.append(element) return result"},{"question":"Given an undirected graph, write a function to check if the graph is connected using Breadth-First Search. Also modify the function to accommodate a weighted graph.","solution":"from collections import deque, defaultdict def is_connected_bfs(graph): Check if an undirected graph is connected using BFS. Parameters: graph (dict): The adjacency list representing the graph. Returns: bool: True if the graph is connected, False otherwise. if not graph: return True # Starting the BFS traversal from the first vertex start_node = next(iter(graph)) visited = set() queue = deque([start_node]) while queue: node = queue.popleft() if node not in visited: visited.add(node) queue.extend(neighbor for neighbor, _ in graph[node] if neighbor not in visited) return len(visited) == len(graph) def is_connected_weighted_bfs(graph): Check if an undirected weighted graph is connected using BFS. Parameters: graph (dict): The adjacency list representing the graph (with weights). Returns: bool: True if the graph is connected, False otherwise. return is_connected_bfs(graph)"},{"question":"Write a piece of code that turns any integer input into its binary representation. Then, modify your code to include error checking to ensure that non-integer input is rejected with an appropriate error message. Also, enhance the code to allow users to choose to receive the binary result as a string or an integer (implied by a list of digits). Furthermore, implement a method to reverse the operation and convert a binary number back to its decimal representation.","solution":"def int_to_binary(n, as_string=True): Converts an integer to its binary representation. If as_string is True, returns binary as a string. If as_string is False, returns binary as a list of digits (integers). if not isinstance(n, int): raise ValueError(\\"Input must be an integer.\\") binary_str = bin(n)[2:] # Get binary representation without '0b' prefix if as_string: return binary_str return [int(digit) for digit in binary_str] def binary_to_int(binary): Converts a binary representation back to a decimal integer. If the input is a string, it will handle it directly. If the input is a list of digits, it will convert the list to a string. if isinstance(binary, list): binary = ''.join(map(str, binary)) if not all(digit in '01' for digit in binary): raise ValueError(\\"Binary input must consist of only '0' and '1'.\\") return int(binary, 2)"},{"question":"Write a Python program that adds two numbers and multiplies them. The program should also check if the product of the two numbers is a perfect square.","solution":"import math def add_and_multiply(a, b): Returns the sum and product of a and b and checks if the product is a perfect square. Args: a (int): First number. b (int): Second number. Returns: tuple: Contains sum of a and b, product of a and b, and Boolean indicating whether the product is a perfect square. sum_ab = a + b product_ab = a * b is_perfect_square = (math.isqrt(product_ab) ** 2 == product_ab) if product_ab >= 0 else False return (sum_ab, product_ab, is_perfect_square)"},{"question":"Develop a Python function that not only inverts an array up to a specified position, but also arranges the remaining segment of the array in ascending order. The function must be capable of managing edge scenarios such as an array devoid of elements, an array with a single element, or a position that exceeds the array's boundaries.","solution":"def invert_and_sort(arr, pos): Inverts the array up to the specified position and sorts the remaining segment of the array. Parameters: arr (list): The list of elements to be inverted and partially sorted. pos (int): The position up to which the array is inverted. Returns: list: The resulting array after inversion and sorting. if not arr: return arr if pos < 0: pos = 0 if pos >= len(arr): pos = len(arr) - 1 # Invert the array up to the given position inverted_part = arr[:pos+1][::-1] # Sort the remaining part of the array remaining_part = sorted(arr[pos+1:]) # Combine both parts return inverted_part + remaining_part"},{"question":"Create a function in Python that takes a list of integers as input and returns a list where each element is replaced with its square if it is positive, or its absolute value if it is negative.","solution":"def transform_list(nums): Given a list of integers, return a list where each element is replaced with its square if it is positive, or its absolute value if it is negative. Args: nums (list): List of integers. Returns: list: Transformed list of integers. return [num ** 2 if num > 0 else abs(num) for num in nums]"},{"question":"Develop a Python program which accepts an array of whole numbers as input and calculates the median. For an even-numbered list, rather than selecting the average of the two middle numbers, design the program to choose the lower value.","solution":"def median(arr): Returns the median of the array of whole numbers. For an even-numbered array, the median is the lower middle number. if not arr: raise ValueError(\\"The array is empty\\") sorted_arr = sorted(arr) n = len(sorted_arr) mid_index = n // 2 if n % 2 == 0: return sorted_arr[mid_index - 1] else: return sorted_arr[mid_index]"},{"question":"You have a canvas split into a 6x6 grid. Each square is 10x10 in size. You are given a list of coordinates corresponding to the top left corner of each square you need to color. Write a python function to output the grid as a 2D list where 0 represents white and 1 represents colored square. Ensure you validate the input coordinates.","solution":"def create_colored_grid(coordinates): Creates a 6x6 grid where certain squares are colored based on provided coordinates. :param coordinates: List of tuples, where each tuple contains the (x, y) top-left coordinate of a square to be colored. Valid x and y values are 0, 10, 20, 30, 40, 50. :return: A 2D list representing the grid, with 0 for white squares and 1 for colored squares. # Initialize a 6x6 grid with all elements set to 0 grid = [[0 for _ in range(6)] for _ in range(6)] valid_coords = {0, 10, 20, 30, 40, 50} for x, y in coordinates: if x in valid_coords and y in valid_coords: grid[y // 10][x // 10] = 1 # Convert (x, y) to grid indices and set to 1 return grid"},{"question":"Create a code which takes in a list of strings, and returns a string with all the characters of the strings sequentially. The input list can contain duplicate strings. The output string should only contain unique characters, and should be sorted in lexicographic order.","solution":"def unique_sorted_characters(strings): Given a list of strings, returns a string with all unique characters of the strings sorted in lexicographic order. Parameters: strings (list): A list of strings which can contain duplicate strings. Returns: str: A string with unique characters sorted in lexicographic order. # Create a set to store unique characters unique_chars = set() # Iterate over each string in the list for string in strings: # Add characters of the string to the set unique_chars.update(string) # Join the sorted set of characters into a final string return ''.join(sorted(unique_chars))"},{"question":"Consider the contents of a file named 'data.txt'. This file contains a series of integers, each on a new line. Your task is to read these integers, sort them in ascending order, remove duplicates, and write the result to a new file called 'processed_data.txt'. Implement a function that accomplishes this task efficiently.","solution":"def process_data(input_file, output_file): Reads integers from the input file, sorts them in ascending order, removes duplicates, and writes the result to the output file. with open(input_file, 'r') as file: # Read all lines from the file and convert them to integers numbers = list(map(int, file.readlines())) # Remove duplicates and sort the numbers processed_numbers = sorted(set(numbers)) # Write the processed numbers to the output file with open(output_file, 'w') as file: for number in processed_numbers: file.write(f\\"{number}n\\")"},{"question":"How can I map a string to multiple distinct integers based on a specific conditionals in the code, where the integers are derived from bitwise operations and the ASCII values of the characters in the string?","solution":"def map_string_to_integers(s): Maps a string to three distinct integers based on bitwise operations on the ASCII values of its characters. Returns a tuple (bitwise_and, bitwise_or, bitwise_xor). if not s: return (0, 0, 0) bitwise_and = ord(s[0]) bitwise_or = ord(s[0]) bitwise_xor = ord(s[0]) for char in s[1:]: ascii_val = ord(char) bitwise_and &= ascii_val bitwise_or |= ascii_val bitwise_xor ^= ascii_val return (bitwise_and, bitwise_or, bitwise_xor)"},{"question":"Create a program to merge two sorted arrays into one sorted array.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into one sorted array. Parameters: arr1 (list of int): first sorted array arr2 (list of int): second sorted array Returns: list of int: merged sorted array merged_array = [] i, j = 0, 0 # Traverse both arrays and append the smaller element to the merged array while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # Append the remaining elements of arr1, if any while i < len(arr1): merged_array.append(arr1[i]) i += 1 # Append the remaining elements of arr2, if any while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"Given a string input, create a Python program to determine if the string is a valid UTF-8 encoded sequence. If it's valid, return True; if not, return False.","solution":"def is_valid_utf8(data): Given a list of integers, checks if the sequence of integers is a valid UTF-8 encoding. Each integer represents a byte. # Number of bytes in the current UTF-8 character num_bytes = 0 # Mask to check for most significant bits in a byte mask1 = 1 << 7 mask2 = 1 << 6 for byte in data: # Get the binary representation of the byte bin_rep = format(byte, '#010b')[-8:] if num_bytes == 0: # Determine the number of bytes in the UTF-8 character for bit in bin_rep: if bit == '0': break num_bytes += 1 # 1-byte character if num_bytes == 0: continue # If the number of bytes is greater than 4 or less than 2, it's invalid if num_bytes == 1 or num_bytes > 4: return False else: # Check if the current byte is a valid continuation byte if not (byte & mask1 and not (byte & mask2)): return False # Decrement the number of bytes remaining in the current UTF-8 character num_bytes -= 1 return num_bytes == 0"},{"question":"Develop a Python script that accepts an array of whole numbers as an input parameter and outputs the number that is the least frequent within the array. Consider the array: \`[4, 7, 1, 7, 4, 1, 1, 7, 7, 7]\` for instance.","solution":"from collections import Counter def least_frequent_number(arr): Returns the number that is the least frequent in the array. If there are multiple numbers with the same frequency, returns the first one encountered. if not arr: return None count = Counter(arr) least_frequent = min(count.values()) for number in arr: if count[number] == least_frequent: return number"},{"question":"Write a Python program to sort a given array in descending order using a heap.","solution":"import heapq def heap_sort_descending(arr): Returns a list sorted in descending order using a heap. # create a min-heap using the negative values of the elements min_heap = [-elem for elem in arr] heapq.heapify(min_heap) # extract elements in ascending order from the heap sorted_arr = [-heapq.heappop(min_heap) for _ in range(len(min_heap))] return sorted_arr"},{"question":"Write a Python function to sort an array of integers in an ascending order. You should not use any built-in function for sorting in Python. Implement your own sorting algorithm and briefly explain your algorithm in the comments. Here is an example array that you can use for testing: [5, 11, 2, 18, 1, 8, 9, 10].","solution":"def bubble_sort(arr): Implements bubble sort to sort an array in ascending order. The bubble sort algorithm works by repeatedly stepping through the list, comparing adjacent elements and swapping them if they are in the wrong order. This process is repeated until the list is sorted. Args: arr (list): A list of integers to sort. Returns: list: Sorted list of integers in ascending order. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Implement a function in Python that takes a list of integers and returns a list where each element is the sum of all elements in the original list except for the element at its own index.","solution":"def sum_except_self(nums): Returns a list where each element is the sum of all elements in the original list except for the element at its own index. :param nums: List of integers. :return: List of integers where each element is the sum of all elements in the input list except for the element at its own index. total_sum = sum(nums) return [total_sum - num for num in nums]"},{"question":"Given two flat, space-delimited files, file1.txt and file2.txt, your task is to write a function that prints the symmetric difference of the two files' contents. Each file contains a collection of numbers, with each number on a separate line. The function should read the numbers from both files, compute the symmetric difference, and print the result in ascending order. The symmetric difference is the set of elements that are in either one of the sets but not in their intersection. If a number appears multiple times in either file, it should still appear in the output as many times as the maximum frequency of its occurrences in either file.","solution":"def read_numbers_from_file(file_path): with open(file_path, 'r') as f: numbers = map(int, f.readlines()) return list(numbers) def symmetric_difference(file1, file2): from collections import Counter numbers1 = read_numbers_from_file(file1) numbers2 = read_numbers_from_file(file2) count1 = Counter(numbers1) count2 = Counter(numbers2) result_counter = (count1 - count2) + (count2 - count1) result = sorted(result_counter.elements()) for number in result: print(number) # Use the function like this, assuming 'file1.txt' and 'file2.txt' are the input files: # symmetric_difference('file1.txt', 'file2.txt')"},{"question":"Write a function to flatten a dictionary by concatenating keys for nested dictionaries, with a limit on the maximum depth of nesting.","solution":"def flatten_dict(d, parent_key='', sep='.', max_depth=None): Flatten a nested dictionary up to a specified maximum depth. Params: d (dict): The dictionary to flatten. parent_key (str): The base key string (used for recursion). sep (str): The separator to use between keys. max_depth (int): The maximum depth to flatten to. If None, flatten all the way. Returns: dict: The flattened dictionary with keys concatenated. items = [] for k, v in d.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict) and (max_depth is None or max_depth > 1): deeper_depth = None if max_depth is None else max_depth - 1 items.extend(flatten_dict(v, new_key, sep, deeper_depth).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"Write a program that subtracts one integer from another and returns the result. However, you are not allowed to use any arithmetic operators (+, -, *, /) or built-in functions (such as abs() or divmod()) to perform the subtraction. Additionally, you are not allowed to use any bitwise operators (such as &, |, ~, ^) or any looping constructs (such as for or while loops). You can only use logical operators (such as and, or, not) and string manipulation functions.","solution":"def subtract_strings(a, b): Subtracts integer b from integer a using string manipulation. Assumes a >= b and both are non-negative integers represented as strings. def subtract_digits(d1, d2, borrow): d1 = int(d1) d2 = int(d2) if borrow: if d1 > 0: d1 -= 1 borrow = False else: d1 = 9 borrow = True if d1 >= d2: return str(d1 - d2), borrow else: return str((10 + d1) - d2), True str_a = str(a) str_b = str(b) # Pad the shorter string with leading zeros max_length = max(len(str_a), len(str_b)) str_a = str_a.zfill(max_length) str_b = str_b.zfill(max_length) result = [] borrow = False # Perform subtraction from the last digit to the first for i in range(max_length-1, -1, -1): res_digit, borrow = subtract_digits(str_a[i], str_b[i], borrow) result.append(res_digit) # Reverse the result and remove leading zeros result = ''.join(result[::-1]).lstrip('0') return result if result else '0' def subtract(a, b): Subtracts integer b from integer a using string manipulation. Assumes a and b are non-negative integers and a >= b. result = subtract_strings(str(a), str(b)) return int(result)"},{"question":"Compose a Python function that outputs a string consisting of the first fifteen letters of the English alphabet in reverse order. However, you must use a loop and not use any built-in reverse or slicing methods to generate your string.","solution":"def reverse_first_fifteen_letters(): Returns a string consisting of the first fifteen letters of the English alphabet in reverse order. result = \\"\\" for i in range(14, -1, -1): result += chr(65 + i) return result"},{"question":"Edit the following code to perform arithmetic operation and display the result of addition, subtraction, multiplication, and division of variables a and b. Additionally, round the quotient to the nearest integer. The code should also handle potential errors such as division by zero and overflow.","solution":"def perform_operations(a, b): This function takes two numbers a and b, performs addition, subtraction, multiplication, and division (rounded to the nearest integer) on them. It returns a dictionary with the results. It also handles division by zero. results = {} try: results['addition'] = a + b results['subtraction'] = a - b results['multiplication'] = a * b results['division'] = round(a / b) except ZeroDivisionError: results['division'] = 'Error: Division by zero' except OverflowError: results['addition'] = 'Error: Overflow' results['subtraction'] = 'Error: Overflow' results['multiplication'] = 'Error: Overflow' results['division'] = 'Error: Overflow' return results"},{"question":"Create a dictionary where the keys are names and the values are their associated ages. However, the names should be stored as lowercase strings and the ages should be stored as strings as well. Implement a function that takes in two lists, name_list and age_list, and returns the created dictionary. The function should have a time complexity of O(n) and a space complexity of O(1).","solution":"def create_dictionary(name_list, age_list): Takes in two lists, name_list and age_list, and returns a dictionary where the keys are lowercase names from name_list and the values are strings of ages from age_list. result_dict = {} for name, age in zip(name_list, age_list): result_dict[name.lower()] = str(age) return result_dict"},{"question":"Generate a random string of length 10 with alphanumeric characters, including at least one uppercase and one lowercase letter and one digit.","solution":"import random import string def generate_random_string(length=10): Generates a random string of the specified length containing at least one uppercase letter, one lowercase letter, and one digit. if length < 3: raise ValueError(\\"Length must be at least 3 to include an uppercase letter, a lowercase letter, and a digit.\\") choices = [random.choice(string.ascii_uppercase), random.choice(string.ascii_lowercase), random.choice(string.digits)] # Fill the remaining slots with random alphanumeric characters choices.extend(random.choices(string.ascii_letters + string.digits, k=length-3)) # Shuffle the chosen characters to ensure randomness random.shuffle(choices) return ''.join(choices)"},{"question":"Write a Python function to calculate the transpose of a given matrix. The function should also verify if the matrix is a square matrix and return an appropriate message if it is not. For the purpose of this question, a matrix is considered square if it has the same number of rows and columns.","solution":"def transpose(matrix): Returns the transpose of the given matrix. If the matrix is not square, returns an appropriate message. if not matrix: return \\"Empty matrix\\" rows = len(matrix) cols = len(matrix[0]) if rows != cols: return \\"Not a square matrix\\" return [[matrix[j][i] for j in range(rows)] for i in range(cols)]"},{"question":"Create a program in python to find the longest common contiguous subarray between two integer arrays. The program should have a time complexity of O(n) and space complexity of O(1).","solution":"def find_longest_common_subarray(arr1, arr2): Finds the longest common contiguous subarray between two integer arrays. Returns the starting index and length of the longest common subarray. m, n = len(arr1), len(arr2) max_len, end_index = 0, 0 current_end = [0] * (n + 1) for i in range(m): prev = 0 for j in range(n): temp = current_end[j + 1] if arr1[i] == arr2[j]: current_end[j + 1] = prev + 1 if current_end[j + 1] > max_len: max_len = current_end[j + 1] end_index = i else: current_end[j + 1] = 0 prev = temp start_index = end_index - max_len + 1 if max_len > 0 else -1 return (start_index, max_len)"},{"question":"Given the two lists of integers, write a function that returns a new list containing the element-wise product of the two lists. Also, provide a piece of erroneous code for candidates to identify and correct the mistakes.","solution":"def elementwise_product(list1, list2): Returns a new list containing the element-wise product of list1 and list2. Assumes both lists are of the same length. return [a * b for a, b in zip(list1, list2)]"},{"question":"Write a python regex that matches the substring \\"cat\\" only if it is not part of the word \\"category\\" and is surrounded by non-alphabetic characters. Additionally, ensure the regex finds \\"cat\\" even when it is in mixed case, and it can be preceded or followed by any number of non-alphabetic characters. Return the number of occurrences found.","solution":"import re def count_cat_exclusive(string): Counts the number of occurrences of the substring \\"cat\\" that are not part of the word \\"category\\" and are surrounded by non-alphabetic characters. Also, it considers \\"cat\\" in mixed case. pattern = r'(?<![a-zA-Z])cat(?!egory)(?![a-zA-Z])' return len(re.findall(pattern, string, re.IGNORECASE))"},{"question":"Create programming code in the context of a function that receives a single argument in the form of a string. The aim of this function would be to systematically replace each character unit within the given string that signifies a vowel at its specific position, substituting it instead with the symbolic representation ''. It's important though, to keep the non-vowel based character components of the input string untouched, essentially acting as delimiters among the transformed vowel elements.","solution":"def replace_vowels(input_string): Replaces vowels in the input_string with the symbol ''. Parameters: input_string (str): The string in which vowels are to be replaced. Returns: str: The resulting string with vowels replaced by ''. vowels = \\"AEIOUaeiou\\" result = ''.join('' if char in vowels else char for char in input_string) return result"},{"question":"Write a Python function that takes a string as input and returns True if all the characters in the string are letters and False otherwise.","solution":"def all_letters(s): Returns True if all characters in the string s are letters. Returns False otherwise. return s.isalpha()"},{"question":"Modify the following Python program to contain an input and a function. The program should ask the user to enter their name and then print a personalized greeting using their name. Additionally, the program should validate the user input and ask for a重新input if the user enters an empty string or if the string contains any digits or special characters.","solution":"import re def greet_user(name): Returns a personalized greeting. return f\\"Hello, {name}!\\" def is_valid_name(name): Validates the user's name. The name should not be empty, contain digits or special characters. if not name: return False return re.match(\\"^[A-Za-zs]+\\", name) is not None def main(): while True: name = input(\\"Enter your name: \\") if is_valid_name(name): print(greet_user(name)) break else: print(\\"Invalid input. Please enter a valid name without digits or special characters.\\") if __name__ == \\"__main__\\": main()"},{"question":"Write a code snippet in Python to generate a random float with up to 20 decimal places, but the decimal places should not include trailing zeros. Additionally, ensure that the generated float is always rounded up to the nearest value, regardless of the digit that follows.","solution":"import random import decimal def generate_random_float(): Generates a random float with up to 20 decimal places with no trailing zeros. The float is also rounded up to the nearest value regardless of the digit that follows. # Generate a random float in the range of 0 to 1 with up to 20 decimal places random_number = decimal.Decimal(random.random()).quantize(decimal.Decimal('1.00000000000000000001'), rounding=decimal.ROUND_UP) # Trim trailing zeros random_number_no_trailing_zeros = random_number.normalize() return float(random_number_no_trailing_zeros)"},{"question":"Create a Python function which takes an array and returns true if the array contains all unique values. The function should have a time complexity of O(n), where n is the length of the array, and should not use any additional data structures.","solution":"def are_all_unique(arr): Checks if all elements in the array are unique. if len(arr) <= 1: return True arr.sort() for i in range(1, len(arr)): if arr[i] == arr[i-1]: return False return True"},{"question":"Implement the Bubble Sort algorithm to sort an array of integers in non-decreasing order. Your solution should have a time complexity of O(n^2), and should not use any built-in sorting functions or libraries. Additionally, you should handle cases where the input array is empty or contains duplicate elements. The input array can have a maximum length of 10^6 elements.","solution":"def bubble_sort(arr): Sorts an array of integers in non-decreasing order using the Bubble Sort algorithm. Args: arr (list of int): The array of integers to be sorted. Returns: list of int: The sorted array. n = len(arr) for i in range(n): # Track if any swapping happens; if not, the array is already sorted swapped = False # Last i elements are already sorted for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] swapped = True # If no elements were swapped, the array is sorted if not swapped: break return arr"},{"question":"Refine the following python function such that it outputs an array of those indices, counting from right-to-left beginning at zero, in which the binary expression of a designated integer has isolated ones; indicating, in other words, no recurring ones. The test number, for this exercise, is defined as num = 12.","solution":"def isolated_ones_indices(num): Returns a list of indices from right-to-left beginning at zero where the binary expression of the given integer has isolated ones. binary_str = bin(num)[2:] # Convert number to binary string without '0b' prefix length = len(binary_str) isolated_indices = [] for i in range(length): # Check if the current bit is 1 and it is isolated if binary_str[i] == '1': left_is_zero = (i == 0 or binary_str[i-1] == '0') right_is_zero = (i == length - 1 or binary_str[i+1] == '0') if left_is_zero and right_is_zero: isolated_indices.append(length - 1 - i) # Convert to right-to-left index return isolated_indices"},{"question":"Given a list of n elements, where n is between 1 and 10,000, design a divide-and-conquer algorithm to find the maximum and minimum elements in the list. The algorithm should have a time complexity of O(n) and should use only a constant amount of extra space. Additionally, the algorithm should be able to handle lists that may contain duplicate elements.","solution":"def find_max_min(arr): Find the maximum and minimum elements in a list using a divide-and-conquer approach. Parameters: arr (list): List of numbers. Returns: tuple: A tuple containing the minimum and maximum element from the list. if len(arr) == 1: return arr[0], arr[0] if len(arr) == 2: if arr[0] < arr[1]: return arr[0], arr[1] else: return arr[1], arr[0] mid = len(arr) // 2 left_min, left_max = find_max_min(arr[:mid]) right_min, right_max = find_max_min(arr[mid:]) return min(left_min, right_min), max(left_max, right_max)"},{"question":"Create a Python function which takes in a list of integers, and returns a list containing only the odd numbers from the original.","solution":"def filter_odd_numbers(numbers): Takes a list of integers and returns a list containing only the odd numbers. return [num for num in numbers if num % 2 != 0]"},{"question":"Develop a program that subtracts a number from a given list of numbers and returns their differences. However, you need to implement this without using basic arithmetic operations like subtraction or addition and built-in functions for math operations.","solution":"def subtract_from_list(nums, sub_value): Returns a new list with the difference of sub_value subtracted from each number in nums. The subtraction is implemented using bitwise operations only. def subtract(a, b): while b != 0: borrow = (~a) & b a = a ^ b b = borrow << 1 return a differences = [subtract(num, sub_value) for num in nums] return differences"},{"question":"Write a Python function that takes a list of integers as input and returns the largest and smallest numbers in the list without using any built-in Python functions for determining the minimum and maximum values. Additionally, the function should handle the case of duplicate numbers, where the largest number should be the first occurrence and the smallest number should be the last occurrence of the repeated value. Your solution should also include error handling for situations where the input list is empty.","solution":"def find_largest_and_smallest(nums): Returns the largest and smallest numbers in the list, where the largest number is the first occurrence and the smallest number is the last occurrence among duplicates. Args: nums: List of integers Returns: A tuple containing the largest and smallest number. Raises: ValueError: If the list is empty. if not nums: raise ValueError(\\"The list is empty\\") largest = smallest = nums[0] smallest_index = 0 for i, num in enumerate(nums): if num > largest: largest = num if num <= smallest: smallest = num smallest_index = i # Ensure the smallest is the last occurrence among duplicates smallest = nums[smallest_index] return largest, smallest"},{"question":"Write a code snippet in Python that not only imports the 'math' module but also demonstrates its functionality by performing a series of operations such as square root, exponential, and logarithm on a given set of numbers. Additionally, the code should include error handling for invalid input, such as taking the square root of a negative number or computing the logarithm of a non-positive number.","solution":"import math def math_operations(number): Perform square root, exponential, and logarithm operations on the given number. Arguments: number -- The number on which to perform the calculations. Returns: A dictionary containing the results of the operations or error messages if input is invalid. results = {} # Attempt to calculate the square root, handle invalid inputs try: if number < 0: raise ValueError(\\"Square root of negative number is not defined.\\") results['sqrt'] = math.sqrt(number) except ValueError as e: results['sqrt'] = str(e) # Calculate the exponential (e^number) results['exp'] = math.exp(number) # Attempt to calculate the natural logarithm, handle invalid inputs try: if number <= 0: raise ValueError(\\"Logarithm of non-positive number is not defined.\\") results['log'] = math.log(number) except ValueError as e: results['log'] = str(e) return results"},{"question":"Assume you are given two integer variables, b and c, write a program to multiply these two numbers without using the asterisk (*) operator","solution":"def multiply(b, c): Returns the product of b and c without using the asterisk (*) operator. Uses addition and subtraction to achieve the multiplication. if b == 0 or c == 0: return 0 positive_result = True if (b < 0 and c > 0) or (b > 0 and c < 0): positive_result = False b, c = abs(b), abs(c) result = 0 for _ in range(c): result += b return result if positive_result else -result"},{"question":"Create a Python function that takes in a string and an integer and returns the string repeated the number of times specified by the integer.","solution":"def repeat_string(s, n): Returns the string s repeated n times. return s * n"},{"question":"Write an algorithm to search for the first occurrence of a specific element in a linked list and return its index. If the element is not found, return -1. Additionally, implement a function that checks whether the linked list is circular or not before performing the search. The time complexity of both functions should be O(n), where n is the number of nodes in the linked list.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def is_circular_linked_list(head): Check if the linked list is circular. :param head: The head of the linked list. :return: True if the linked list is circular, False otherwise. if head is None: return False slow = head fast = head.next while fast is not None and fast.next is not None: if slow == fast: return True slow = slow.next fast = fast.next.next return False def search_element_in_linked_list(head, target): Search for the first occurrence of a specific element in a linked list and return its index. If the element is not found, return -1. :param head: The head of the linked list. :param target: The element value to search for. :return: The index of the first occurrence of the element, or -1 if not found. if is_circular_linked_list(head): return -1 index = 0 current = head while current is not None: if current.value == target: return index current = current.next index += 1 return -1"},{"question":"Write a Python program where the initial list \\"list_a\\" is defined as [5, 4, 3, 2, 1]. Create a function that reverses the elements of \\"list_a\\" recursively without using Python's built-in functions for reversing lists. The reversed list should then be printed.","solution":"def reverse_list_recursively(lst): Reverses a list recursively. if len(lst) == 0: return [] else: return [lst[-1]] + reverse_list_recursively(lst[:-1]) # Initial list list_a = [5, 4, 3, 2, 1] # Reverse the list reversed_list_a = reverse_list_recursively(list_a) # Print the reversed list print(reversed_list_a)"},{"question":"Iterate over the given array and print the prime numbers in ascending order. Implement the isPrime() function to check if a number is prime or not.","solution":"def isPrime(n): Check if a given number n is prime. Args: n (int): The number to check. Returns: bool: True if n is prime, False otherwise. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n ** 0.5) + 1, 2): if n % i == 0: return False return True def getPrimes(arr): Get a list of prime numbers from the given array in ascending order. Args: arr (list): The array to iterate over. Returns: list: Sorted list of prime numbers in ascending order. primes = [num for num in arr if isPrime(num)] return sorted(primes)"},{"question":"Write a Python function that takes in a string and outputs a dictionary where the keys are the characters in the string and the values are the number of occurrences of each character. The function should ignore spaces and be case-sensitive.","solution":"def character_count(s): Returns a dictionary with the count of each character in the string \`s\`. Spaces are ignored and the function is case-sensitive. count_dict = {} for char in s: if char != ' ': if char in count_dict: count_dict[char] += 1 else: count_dict[char] = 1 return count_dict"},{"question":"Write a Python program to calculate the number of bits needed to represent the maximum possible integer in binary form, but without using any built-in functions or libraries related to binary conversion or bit manipulation.","solution":"def bits_needed(n): Returns the number of bits needed to represent the integer n in binary form. if n == 0: return 1 bits = 0 while n > 0: bits += 1 n //= 2 return bits"},{"question":"Create a function in Python that finds the sum of all prime numbers between two given numbers. Additionally, ensure that the function checks if the given numbers are positive integers and returns an error message if they are not. The function should also validate if the first number is smaller than the second number, and return an error message if it is not.","solution":"def is_prime(n): Checks whether the given number n is prime. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def sum_of_primes(num1, num2): Returns the sum of all prime numbers between num1 and num2. Ensures that: - num1 and num2 are positive integers - num1 is smaller than num2 if not isinstance(num1, int) or not isinstance(num2, int): return \\"Error: Both numbers must be integers.\\" if num1 <= 0 or num2 <= 0: return \\"Error: Both numbers must be positive.\\" if num1 >= num2: return \\"Error: The first number must be smaller than the second number.\\" sum_primes = sum(n for n in range(num1, num2 + 1) if is_prime(n)) return sum_primes"},{"question":"I have a list of stock tickers as [\\"AAPL\\", \\"AMZN\\", \\"MSFT\\", \\"TSLA\\", \\"NFLX\\"]. I want to implement a function to find the ticker with the highest price. For this, assume that there is a function get_quote(ticker) which returns a dictionary with the keys \\"ticker\\" and \\"price\\" for the given ticker. For example, get_quote(\\"AAPL\\") would return {\\"ticker\\": \\"AAPL\\", \\"price\\": 165.62}. What would be an optimized approach to find the maximum stock price and its respective ticker from the list?","solution":"def get_quote(ticker): Mock function to simulate getting a stock quote. Returns a dictionary with ticker and price. In a real application, this should fetch real stock data. # Mock data for demonstration quotes = { \\"AAPL\\": {\\"ticker\\": \\"AAPL\\", \\"price\\": 165.62}, \\"AMZN\\": {\\"ticker\\": \\"AMZN\\", \\"price\\": 329.38}, \\"MSFT\\": {\\"ticker\\": \\"MSFT\\", \\"price\\": 145.65}, \\"TSLA\\": {\\"ticker\\": \\"TSLA\\", \\"price\\": 751.88}, \\"NFLX\\": {\\"ticker\\": \\"NFLX\\", \\"price\\": 487.24}, } return quotes[ticker] def find_max_price_ticker(tickers): Returns the ticker with the highest stock price from a list of tickers. max_price = float('-inf') max_ticker = None for ticker in tickers: quote = get_quote(ticker) if quote[\\"price\\"] > max_price: max_price = quote[\\"price\\"] max_ticker = quote[\\"ticker\\"] return max_ticker"},{"question":"Given a total file size in bytes and a current offset in bytes, write a function in Python to calculate the percentage of the file that has been processed. Additionally, write a function to determine the remaining bytes to be processed. There is a piece of erroneous code provided as a reference, identify the errors and provide the correct solution.","solution":"def calculate_percentage(total_bytes, offset_bytes): Calculates the percentage of the file that has been processed. Args: total_bytes (int): Total size of the file in bytes. offset_bytes (int): Current offset in bytes. Returns: float: Percentage of the file that has been processed. if total_bytes == 0: return 0.0 return (offset_bytes / total_bytes) * 100 def remaining_bytes(total_bytes, offset_bytes): Calculates the remaining bytes to be processed. Args: total_bytes (int): Total size of the file in bytes. offset_bytes (int): Current offset in bytes. Returns: int: Remaining bytes to be processed. return total_bytes - offset_bytes"},{"question":"Design a Python program that uses the function \\"collect_dob\\" to request the date of birth from the user and following this, utilizing the Python \\"datetime\\" library, calculates their astrological sign and presents it back to them.","solution":"from datetime import datetime def collect_dob(): Requests the date of birth from the user in 'YYYY-MM-DD' format and returns it as a datetime object. dob_str = input(\\"Enter your date of birth (YYYY-MM-DD): \\") dob = datetime.strptime(dob_str, '%Y-%m-%d') return dob def get_astrological_sign(dob): Takes a datetime object (dob) and returns the astrological sign. day = dob.day month = dob.month if (month == 1 and day >= 20) or (month == 2 and day <= 18): return \\"Aquarius\\" elif (month == 2 and day >= 19) or (month == 3 and day <= 20): return \\"Pisces\\" elif (month == 3 and day >= 21) or (month == 4 and day <= 19): return \\"Aries\\" elif (month == 4 and day >= 20) or (month == 5 and day <= 20): return \\"Taurus\\" elif (month == 5 and day >= 21) or (month == 6 and day <= 20): return \\"Gemini\\" elif (month == 6 and day >= 21) or (month == 7 and day <= 22): return \\"Cancer\\" elif (month == 7 and day >= 23) or (month == 8 and day <= 22): return \\"Leo\\" elif (month == 8 and day >= 23) or (month == 9 and day <= 22): return \\"Virgo\\" elif (month == 9 and day >= 23) or (month == 10 and day <= 22): return \\"Libra\\" elif (month == 10 and day >= 23) or (month == 11 and day <= 21): return \\"Scorpio\\" elif (month == 11 and day >= 22) or (month == 12 and day <= 21): return \\"Sagittarius\\" elif (month == 12 and day >= 22) or (month == 1 and day <= 19): return \\"Capricorn\\" def main(): dob = collect_dob() sign = get_astrological_sign(dob) print(f\\"Your astrological sign is: {sign}\\") if __name__ == \\"__main__\\": main()"},{"question":"Write a python program to simulate a biased coin using the numpy random choice method. Coin should land on heads 60% of the time and tails 40% of the time.","solution":"import numpy as np def biased_coin(): Simulates a biased coin flip where heads have a 60% chance and tails have a 40% chance. Returns 'heads' or 'tails' based on the simulation. return np.random.choice(['heads', 'tails'], p=[0.6, 0.4])"},{"question":"Generate a python program to perform matrix multiplication of two matrices of arbitrary size. Also, include error handling for cases where the matrix dimensions do not allow multiplication.","solution":"def matrix_multiply(matrix1, matrix2): Multiplies two matrices and returns the resulting matrix. Args: matrix1: A 2D list representing the first matrix. matrix2: A 2D list representing the second matrix. Returns: A 2D list representing the resulting matrix from multiplication. Raises: ValueError: If the columns of the first matrix do not match the rows of the second matrix. # Number of rows and columns in the matrices rows_matrix1 = len(matrix1) cols_matrix1 = len(matrix1[0]) rows_matrix2 = len(matrix2) cols_matrix2 = len(matrix2[0]) # Ensure the matrices can be multiplied if cols_matrix1 != rows_matrix2: raise ValueError(\\"The number of columns in the first matrix must equal the number of rows in the second matrix.\\") # Initialize the resulting matrix with zeros result = [[0 for _ in range(cols_matrix2)] for _ in range(rows_matrix1)] # Perform matrix multiplication for i in range(rows_matrix1): for j in range(cols_matrix2): for k in range(cols_matrix1): result[i][j] += matrix1[i][k] * matrix2[k][j] return result"},{"question":"Finish the code snippet below to compute and output a vector's magnitude. The vector will be presented as a list of floating-point numbers, and could be variable in length, i.e., it might not just be a 3-dimensional vector. Ensure your code can handle vectors with varying lengths.","solution":"import math def vector_magnitude(vector): Compute and return the magnitude of the given vector. :param vector: List of floats representing a vector :return: Magnitude of the vector return math.sqrt(sum(component ** 2 for component in vector))"},{"question":"Create an array with the elements 1, 2, 3, 4, 5, 6, 7, 8, and 9, and make sure the array length is exactly 9, with no repeated elements. Additionally, you are not allowed to use any built-in array functions or methods to create or manipulate the array. You must write a program that initializes the array and assigns each element individually. However, you are now required to implement a function that reverses the array in-place, without using any additional memory.","solution":"def initialize_array(): Initializes an array with elements from 1 to 9. arr = [0] * 9 # Create an array of length 9 for i in range(9): arr[i] = i + 1 return arr def reverse_array(arr): Reverses the array in place. start = 0 end = len(arr) - 1 while start < end: # Swap elements arr[start], arr[end] = arr[end], arr[start] start += 1 end -= 1 return arr"},{"question":"Explain what a linked list data structure is and provide an implementation in Python using classes and methods in one sentence, ensuring that the implementation includes a delete method that removes a node from the list based on its value.","solution":"class Node: def __init__(self, data): self.data = data self.next = None class LinkedList: def __init__(self): self.head = None def append(self, data): new_node = Node(data) if not self.head: self.head = new_node return last = self.head while last.next: last = last.next last.next = new_node def delete(self, key): temp = self.head if temp is not None: if temp.data == key: self.head = temp.next temp = None return while temp is not None: if temp.data == key: break prev = temp temp = temp.next if temp == None: return prev.next = temp.next temp = None def to_list(self): result = [] current = self.head while current: result.append(current.data) current = current.next return result"},{"question":"Write a function in Python that takes two lists and returns a set containing the common elements between the lists.","solution":"def common_elements(list1, list2): Returns a set containing the common elements between the two lists. return set(list1).intersection(set(list2))"},{"question":"Modify the given code to calculate the sum of all negative numbers in the array instead of the sum of positive numbers. In addition, add a requirement that the solution must use recursion rather than a loop to iterate over the array. Finally, include a message that displays the result of the sum of negative numbers.","solution":"def sum_negative_recursive(arr): Returns the sum of all negative numbers in the array using recursion. if not arr: return 0 head, tail = arr[0], arr[1:] if head < 0: return head + sum_negative_recursive(tail) else: return sum_negative_recursive(tail) def display_sum_of_negatives(arr): Displays the sum of all negative numbers in the array. sum_negatives = sum_negative_recursive(arr) print(f\\"The sum of all negative numbers is: {sum_negatives}\\") return sum_negatives"},{"question":"How would you write a Python program that takes in an integer and prints out the equivalent Roman numeral? Assume that the input integer is between 1 and 3999.","solution":"def int_to_roman(num): Converts an integer to a Roman numeral. Parameters: num (int): The integer to convert. Should be between 1 and 3999. Returns: str: The Roman numeral representation of the integer. val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = '' i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syb[i] num -= val[i] i += 1 return roman_num"},{"question":"Create a function that, given a string, returns the string reversed in Python.","solution":"def reverse_string(s): Given a string s, returns the string reversed. return s[::-1]"},{"question":"Enhance a function to parse and return the details from a given string. The string will be in a specific format, including name, age, and a list of hobbies separated by commas. Additionally, the function needs to validate the data: the age must be a positive integer and the name must only contain alphabetic characters. If the data is not valid, the function should throw an error.","solution":"def parse_details(detail_string): Parses the detail string and returns a dictionary with name, age, and hobbies. Validates that the age is a positive integer and the name contains only alphabetic characters. Arguments: detail_string: str -- A string in the format \\"name,age,hobby1,hobby2,...,hobbyN\\" Returns: dict -- A dictionary with keys 'name', 'age', and 'hobbies' Raises: ValueError -- If the age is not a positive integer or the name contains non-alphabetic characters parts = detail_string.split(',') if len(parts) < 3: raise ValueError(\\"Detail string must include name, age, and at least one hobby\\") name = parts[0] if not name.isalpha(): raise ValueError(\\"Name must contain alphabetic characters only\\") try: age = int(parts[1]) except ValueError: raise ValueError(\\"Age must be an integer\\") if age <= 0: raise ValueError(\\"Age must be a positive integer\\") hobbies = parts[2:] return { \\"name\\": name, \\"age\\": age, \\"hobbies\\": hobbies }"},{"question":"Create a Python program to convert a given string to uppercase. Additionally, the program should also reverse the string, remove any numerical digits present in it, and handle any special characters or punctuation marks correctly.","solution":"def process_string(s): Converts a given string to uppercase, then reverses it, and removes any numerical digits. :param s: The input string. :return: The processed string. # Convert to uppercase uppercased = s.upper() # Reverse the string reversed_str = uppercased[::-1] # Remove numerical digits result = ''.join([char for char in reversed_str if not char.isdigit()]) return result"},{"question":"Write a function in Python to shuffle an array, ensuring that no two adjacent elements in the shuffled array have a difference greater than a specified threshold 'k'. Additionally, the shuffled array should have the smallest possible difference between its minimum and maximum values. The time complexity of the solution should not exceed O(n log n), where n is the length of the array.","solution":"def shuffle_array(arr, k): Shuffles an array such that no two adjacent elements have a difference greater than k. The shuffled array should have the smallest possible difference between its minimum and maximum values. # Sort the array to facilitate an easier arrangement arr.sort() # Create two lists to interleave the elements n = len(arr) first_half = arr[:n//2] second_half = arr[n//2:] # Combine the two halves in an interleaving fashion result = [] while first_half or second_half: if first_half: result.append(first_half.pop(0)) if second_half: result.append(second_half.pop(0)) # Check if the arrangement meets the condition for i in range(1, len(result)): if abs(result[i] - result[i - 1]) > k: return \\"Can't shuffle to meet the condition\\" return result"},{"question":"What is the syntax for defining a recursive function in Python that calculates the factorial of a positive integer? Additionally, the function should handle cases where the input is not a positive integer and return an appropriate error message. Write a piece of code that attempts to calculate the factorial of a negative number, and show how the function should handle this situation.","solution":"def factorial(n): Returns the factorial of a positive integer n using recursion. If n is not a positive integer, returns an appropriate error message. if not isinstance(n, int): return \\"Error: Input is not an integer. Please enter a positive integer.\\" if n < 0: return \\"Error: Input is a negative integer. Please enter a positive integer.\\" if n == 0: return 1 return n * factorial(n - 1)"},{"question":"Write a code to print out an array of prime numbers from 0 to 100, but the code should not use any built-in functions or libraries to check for prime numbers. You should implement your own function to determine whether a number is prime or not.","solution":"def is_prime(n): Checks if a number is prime. if n <= 1: return False if n == 2: return True for i in range(2, n): if n % i == 0: return False return True def prime_numbers_up_to_100(): Returns a list of prime numbers from 0 to 100. primes = [] for num in range(101): if is_prime(num): primes.append(num) return primes # A test print statement to verify the code works print(prime_numbers_up_to_100())"},{"question":"Develop a Python program that removes punctuation and digits from a string, then converts it to upper-case. This program should also count the occurrence of each letter in the modified string. Use a dictionary to store and return these counts.","solution":"import string def process_string(input_string: str): Removes punctuation and digits from the input string, converts it to upper-case, and counts the occurrence of each letter. Args: input_string (str): The string to process. Returns: dict: A dictionary with the count of each letter. # Remove punctuation and digits translator = str.maketrans('', '', string.punctuation + string.digits) cleaned_string = input_string.translate(translator) # Convert to upper-case cleaned_string = cleaned_string.upper() # Count the occurrence of each letter letter_count = {} for char in cleaned_string: if char.isalpha(): # Ensure we count only letters if char in letter_count: letter_count[char] += 1 else: letter_count[char] = 1 return letter_count"},{"question":"Write a Python function that takes the title and content of a news article as input and uses natural language processing to determine whether the article contains any instances of propaganda. The function should return a boolean value indicating whether propaganda was detected or not.","solution":"import re def contains_propaganda(title, content): Determine whether the article contains instances of propaganda. Parameters: title (str): The title of the news article. content (str): The content of the news article. Returns: bool: True if propaganda is detected, False otherwise. # Simplified list of keywords associated with propaganda propaganda_keywords = [ \\"fake news\\", \\"hoax\\", \\"agenda\\", \\"biased\\", \\"manipulate\\", \\"deceive\\", \\"disinformation\\", \\"misinformation\\", \\"brainwash\\", \\"propaganda\\", \\"indoctrinate\\" ] # Combine title and content for analysis text = title + \\" \\" + content # Check if any of these keywords are present in the text for keyword in propaganda_keywords: if re.search(r'b' + re.escape(keyword) + r'b', text, re.IGNORECASE): return True return False"},{"question":"Create a Python code that takes two strings and combine them into a single string. However, you should not use any built-in string concatenation functions or operators (such as +) to achieve this. Instead, you need to implement your own function or algorithm to combine the strings.","solution":"def combine_strings(str1, str2): Combines two strings without using built-in concatenation functions or operators. result = [] for char in str1: result.append(char) for char in str2: result.append(char) return ''.join(result)"},{"question":"Write a Python program to remove duplicates from a list without using the built-in functions or data structures like set, list comprehension, or dictionary. The program should maintain the original order of the first occurrence of each element.","solution":"def remove_duplicates(input_list): Remove duplicates from a list without using built-in functions or data structures like set, list comprehension, or dictionary. Maintain the original order of the first occurrence of each element. result = [] for item in input_list: if item not in result: result.append(item) return result"},{"question":"Implement a Python function, using Object Oriented Programming style, designed to compute the difference between two matrices consisting of integers. Differences should be calculated pairwise between the two corresponding elements of the matrices. The matrices will not necessarily be square matrices but their dimensions will match. Also, add error handling for cases when the dimensions of the two matrices do not match.","solution":"class Matrix: def __init__(self, data): self.data = data self.rows = len(data) self.cols = len(data[0]) if data else 0 def subtract(self, other): if self.rows != other.rows or self.cols != other.cols: raise ValueError(\\"Matrices dimensions do not match\\") result = [] for i in range(self.rows): row = [] for j in range(self.cols): row.append(self.data[i][j] - other.data[i][j]) result.append(row) return result"},{"question":"Define a method in Python which takes an integer and returns the largest digit in that integer.","solution":"def largest_digit(n): Returns the largest digit in the integer n. # Handle negative numbers by taking the absolute value n = abs(n) # Convert the number to a string to iterate through its digits digits = str(n) # Find the maximum digit by converting each character back to an integer largest = max(int(digit) for digit in digits) return largest"},{"question":"Write a Python program that takes input as a list of strings, where each string represents a person's name, followed by their age (e.g., 'John 15'). Your task is to create a dictionary where each person's name is a key, and their age is the corresponding value. Finally, print the dictionary on the console.","solution":"def create_person_age_dict(input_list): Takes a list of strings where each string contains a name and an age, and returns a dictionary with names as keys and ages as values. person_age_dict = {} for item in input_list: parts = item.split() name = ' '.join(parts[:-1]) age = int(parts[-1]) person_age_dict[name] = age return person_age_dict"},{"question":"Assume I have a list named 'x' that has the following data: [9, 5, 2, 6, 3]. I want to sort this list and print all the numbers in ascending order. Can you write a simple python script to solve this problem? Additionally, can you encapsulate this functionality in a function that accepts any list of integers and returns a sorted version of that list?","solution":"def sort_list(x): Sorts a list of integers in ascending order. Parameters: x (list): A list of integers to be sorted. Returns: list: A sorted list of integers in ascending order. return sorted(x)"},{"question":"I have a list of numbers in Python. How can I write a function that finds and removes the smallest element from the list?","solution":"def remove_smallest(numbers): Finds and removes the smallest element from the list. Args: numbers (list of int): The list of numbers. Returns: list of int: The list with the smallest element removed. If the list is empty, return an empty list. if not numbers: return [] min_value = min(numbers) numbers.remove(min_value) return numbers"},{"question":"Given an integer array, write a function that returns a new array where every second element from the original array starting from index 1 (the second position) has been removed.","solution":"def remove_every_second_element(arr): Returns a new array where every second element from the original array starting from index 1. Parameters: arr (list): The original list of integers. Returns: list: A new list with every second element removed. return [arr[i] for i in range(len(arr)) if i % 2 == 0]"},{"question":"Create a program that takes a 2D list of integers as an input and returns a new 2D list with each row in the original list sorted in ascending order, but with even numbers appearing before odd numbers. The returned list must maintain the same column structure as the input list.","solution":"def sort_by_even_then_odd(matrix): Sorts each row of the 2D list such that even numbers appear before odd numbers, and each subset (evens and odds) is sorted in ascending order. Args: matrix (list of list of int): 2D list of integers Returns: list of list of int: New 2D list with sorted rows sorted_matrix = [] for row in matrix: evens = sorted([x for x in row if x % 2 == 0]) odds = sorted([x for x in row if x % 2 != 0]) sorted_matrix.append(evens + odds) return sorted_matrix"},{"question":"Write a function that takes an array of integers as an argument and reverses the elements of the array in place. The function should not return anything, but modify the original array.","solution":"def reverse_array(arr): Reverses the elements of the array in place. Parameters: arr (list): A list of integers. Returns: None left = 0 right = len(arr) - 1 while left < right: arr[left], arr[right] = arr[right], arr[left] left += 1 right -= 1"},{"question":"Develop a Python script that writes 'Hello World' to a new text file in a chosen directory. Additionally, the script should append the current date and time next to 'Hello World'. Ensure that the file can be overwritten every time the script runs. Use exception handling to handle any potential errors during file operations.","solution":"import os from datetime import datetime def write_hello_world_to_file(directory, filename='hello_world.txt'): Writes 'Hello World' and the current date and time to a new text file in the chosen directory. The file can be overwritten every time the script runs. try: if not os.path.exists(directory): os.makedirs(directory) current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S') text_to_write = f\\"Hello World {current_time}\\" file_path = os.path.join(directory, filename) with open(file_path, 'w') as file: file.write(text_to_write) return text_to_write # Return the text for verification purpose except Exception as e: print(f\\"An error occurred: {e}\\") return None"},{"question":"Write the following Python code by defining a function \`average_numbers\` that receives a list of integers and returns their average, rounded to two decimal places. Add docstrings and comments to your code.","solution":"def average_numbers(numbers): Returns the average of the given list of integers, rounded to two decimal places. Parameters: numbers (list): A list of integers Returns: float: The average of the numbers rounded to two decimal places if not numbers: return 0.0 # Return 0.0 if the list is empty to avoid division by zero total = sum(numbers) count = len(numbers) average = total / count return round(average, 2)"},{"question":"What is the method in Python that can convert a string to a number, specifically an integer or a float? I need a function that can process input from the user and decide whether it would be appropriate to convert it into a floating point number or an integer. If it can only be converted to an integer, I want to disregard any trailing decimal zeros. However, if the string is \\"0\\", it should still be classified as an integer. For instance, the string \\"12345.0\\" should be treated as an integer and the decimal point should be ignored, but \\"12345.67890\\" should be treated as a float.","solution":"def convert_to_number(s): Converts a string to a number, either an integer or a float. If the number can be converted to an integer (e.g., \\"123.0\\"), it returns an integer. Otherwise, it returns a float. try: value = float(s) if value.is_integer(): return int(value) return value except ValueError: raise ValueError(f\\"The input '{s}' is not a valid number.\\")"},{"question":"Develop a Python function with the core aim to decode a predefined numeric string adhering to a precisely designed decryption key. The function should analyze each digit individually, translating it into the corresponding character as per the decryption map provided.","solution":"def decode_string(numeric_string): Decodes a numeric string using the predefined decryption key. Decryption Key: '1' -> 'A' '2' -> 'B' '3' -> 'C' '4' -> 'D' '5' -> 'E' '6' -> 'F' '7' -> 'G' '8' -> 'H' '9' -> 'I' '0' -> 'J' Args: numeric_string (str): The numeric string to decode. Returns: str: The decoded string. decryption_key = { '1': 'A', '2': 'B', '3': 'C', '4': 'D', '5': 'E', '6': 'F', '7': 'G', '8': 'H', '9': 'I', '0': 'J' } return ''.join(decryption_key[digit] for digit in numeric_string)"},{"question":"Suppose we have a list of random numbers generated in Python. Your task is to create a function that can find the 3 smallest even numbers and the 3 largest odd numbers in the list. If there are not enough even or odd numbers for the required count, your function should handle it by providing corresponding values as None. Also, the function needs to ensure that, if available, it does not ignore any number that could satisfy the requirement just because it has been identified as either even or odd earlier in the process.","solution":"def find_smallest_largest_numbers(nums): Returns a tuple containing the 3 smallest even numbers and the 3 largest odd numbers from the list 'nums'. If there aren't enough even or odd numbers, Nones are used to fill. evens = sorted([num for num in nums if num % 2 == 0]) odds = sorted([num for num in nums if num % 2 != 0], reverse=True) smallest_evens = evens[:3] + [None] * (3 - len(evens)) largest_odds = odds[:3] + [None] * (3 - len(odds)) return smallest_evens, largest_odds"},{"question":"Write a function in Python to convert a JSON object to a string.","solution":"import json def json_to_string(json_obj): Converts a JSON object to a string. Parameters: json_obj (dict): The JSON object to convert. Returns: str: The string representation of the JSON object. return json.dumps(json_obj)"},{"question":"Formulate two unique methods for implementing logic gates using any programming language of your choice. Include code examples for the two methods.","solution":"def and_gate(a, b): Returns the AND logic gate result for inputs a and b return a and b def or_gate(a, b): Returns the OR logic gate result for inputs a and b return a or b def not_gate(a): Returns the NOT logic gate result for input a return not a def nand_gate(a, b): Returns the NAND logic gate result for inputs a and b return not (a and b) def xor_gate(a, b): Returns the XOR logic gate result for inputs a and b return (a and not b) or (not a and b)"},{"question":"Write a function in Python that takes a list of positive integers and returns the index of the first occurrence of the smallest prime number in the list. If there are no prime numbers in the list, the function should return -1.","solution":"def is_prime(num): Checks if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False i = 3 while i * i <= num: if num % i == 0: return False i += 2 return True def find_smallest_prime_index(lst): Returns the index of the first occurrence of the smallest prime number in the list. If there are no prime numbers in the list, returns -1. smallest_prime = None smallest_prime_index = -1 for index, num in enumerate(lst): if is_prime(num): if smallest_prime is None or num < smallest_prime: smallest_prime = num smallest_prime_index = index return smallest_prime_index"},{"question":"Write a python function that takes a list as input. This list contains tuples, each of which consists of two different strings. The function should reverse the elements of each tuple and return the reversed list.","solution":"def reverse_tuples(input_list): Takes a list of tuples and reverses the elements of each tuple. Args: input_list: List of tuples, where each tuple consists of two different strings. Returns: List of tuples with the elements of each tuple reversed. return [(b, a) for a, b in input_list]"},{"question":"Write a Python function that can convert a list of strings into a dictionary. Each string in the list is a key-value pair separated by a colon. The keys and values are separated by a colon ':'. Assume that each string in the list is a unique key-value pair.","solution":"def convert_list_to_dict(lst): Converts a list of strings into a dictionary where each string is a key-value pair separated by a colon. Parameters: - lst: List of strings, each string is a unique key-value pair separated by a colon. Returns: - dict: Dictionary with key-value pairs from the list. result = {} for item in lst: key, value = item.split(':') result[key.strip()] = value.strip() return result"},{"question":"Create a function that prints the string passed to it as an argument, but the string must be reversed before printing. Additionally, the function should count the number of vowels in the reversed string and print the count. The function should also return the number of consonants in the reversed string.","solution":"def reverse_and_analyze_string(s): Reverses the input string, prints the reversed string, counts the number of vowels in the reversed string, prints the count, and returns the number of consonants. vowels = \\"aeiouAEIOU\\" reversed_s = s[::-1] vowel_count = sum(1 for char in reversed_s if char in vowels) consonant_count = sum(1 for char in reversed_s if char.isalpha() and char not in vowels) print(\\"Reversed String:\\", reversed_s) print(\\"Number of Vowels:\\", vowel_count) return consonant_count"},{"question":"What if we want to add extra features to the below python code for a simple banking system? Specifically, we want to add a feature that alerts the user if their balance falls below a certain threshold, as well as a feature that allows for account-to-account transfers.","solution":"class BankAccount: def __init__(self, owner, balance=0, alert_threshold=0): self.owner = owner self.balance = balance self.alert_threshold = alert_threshold def deposit(self, amount): if amount > 0: self.balance += amount def withdraw(self, amount): if amount > 0 and amount <= self.balance: self.balance -= amount self.check_alert() def check_alert(self): if self.balance < self.alert_threshold: return f\\"Alert: Your balance is below {self.alert_threshold}.\\" return \\"No alert.\\" def transfer(self, amount, target_account): if amount > 0 and amount <= self.balance: self.withdraw(amount) target_account.deposit(amount) return True return False"},{"question":"Given a binary search tree, write a program to convert it into an array. The program should handle duplicate values in the tree and maintain the sorted order of elements in the resulting array. Additionally, the program should use only a constant amount of extra space (excluding the input tree and the output array) and have a time complexity of O(n), where n is the number of nodes in the tree. You are not allowed to use any built-in sorting functions or data structures.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def bst_to_array(root): Convert a binary search tree into an array in sorted order. :param root: TreeNode :return: list of integers in sorted order result = [] def inorder_traversal(node): if node: inorder_traversal(node.left) result.append(node.val) inorder_traversal(node.right) inorder_traversal(root) return result"},{"question":"Write a function that takes a matrix (a list of lists) and returns the transposed matrix.","solution":"from typing import List def transpose_matrix(matrix: List[List[int]]) -> List[List[int]]: Returns the transpose of the given matrix. Parameters: matrix (List[List[int]]): A 2D list representing the matrix to be transposed. Returns: List[List[int]]: The transposed matrix. # Using list comprehension to transpose the matrix return [list(row) for row in zip(*matrix)]"},{"question":"Can you write a AWS Lambda function in Python that sends a simple email using Amazon SES when an event triggers it, such as a new file upload in an S3 bucket?","solution":"import boto3 import os def lambda_handler(event, context): # Initialize the SES client ses_client = boto3.client('ses') # Get the object details from the event bucket_name = event['Records'][0]['s3']['bucket']['name'] file_name = event['Records'][0]['s3']['object']['key'] # Construct the email subject = \\"New File Uploaded\\" body = f\\"A new file named {file_name} was uploaded to the S3 bucket {bucket_name}.\\" sender = os.environ['SENDER_EMAIL'] recipient = os.environ['RECIPIENT_EMAIL'] # Send email response = ses_client.send_email( Source=sender, Destination={ 'ToAddresses': [recipient] }, Message={ 'Subject': {'Data': subject}, 'Body': {'Text': {'Data': body}} } ) return response"},{"question":"Import the numpy library into the program and ensure that the program is written in a functional programming paradigm. Additionally, implement a recursive function to solve the problem instead of using iterative loops. Add a new constraint that the recursive function must have a maximum depth of 5 levels.","solution":"import numpy as np def factorial(n, depth=0, max_depth=5): Return the factorial of a non-negative integer n using recursion, with maximum recursion depth of 5 levels. Parameters: n (int): non-negative integer to compute the factorial of. depth (int): current recursion depth. max_depth (int): maximum recursion depth allowed. Returns: int: factorial of n if depth > max_depth: raise RecursionError(\\"Maximum recursion depth exceeded\\") if n < 0: raise ValueError(\\"Negative values are not allowed\\") if n <= 1: return 1 return n * factorial(n-1, depth+1, max_depth)"},{"question":"Given a list with multiple duplicated elements, write a Python function to eliminate all instances of any number that appears more than once in the list. The function should also return the number of unique elements that remained in the list after the removal.","solution":"def eliminate_duplicates(lst): Removes all instances of any number that appears more than once in the list. Returns the modified list and the count of unique elements remained. Parameters: lst (list): The input list with possible duplicates Returns: tuple: containing the modified list and the count of unique elements remained. from collections import Counter count = Counter(lst) unique_list = [x for x in lst if count[x] == 1] return unique_list, len(unique_list)"},{"question":"Write an example of a function in Python that returns the index of an item in a list. If the item does not exist in the list, return -1.","solution":"def find_index(lst, item): Returns the index of the item in the list. If the item does not exist, returns -1. try: return lst.index(item) except ValueError: return -1"},{"question":"How can I create a Python function that takes an array and double-stores every element, modifying the input array in place? For instance, if I have an input array of [1, 2, 3, 4], the function should change it to [1, 1, 2, 2, 3, 3, 4, 4] without creating any additional arrays or using libraries like numpy.","solution":"def double_store(arr): Function to double-store every element in an array, modifying the input array in place. Parameters: arr (list): List of elements to be double-stored. Returns: None original_length = len(arr) for i in range(original_length): arr.insert(2 * i, arr[2 * i])"},{"question":"Please write a code to delete all items from a list with a value of 3 and calculate the sum of the remaining items. Additionally, you should handle cases where the list is empty or contains only items with a value of 3. If the list is empty or contains only items with a value of 3, return 0.","solution":"def delete_and_sum(nums): Deletes all items with a value of 3 from the list and returns the sum of the remaining items. If the list is empty or contains only items with a value of 3, return 0. # Filter out all 3s from the list filtered_nums = [num for num in nums if num != 3] # Calculate the sum of the remaining numbers total_sum = sum(filtered_nums) return total_sum"},{"question":"Develop a program that can solve a Rubik's cube. The program should be able to solve it in the minimum possible number of moves. Additionally, the program should also be able to handle cubes of different sizes, not just the standard 3x3x3. The program should also provide a step-by-step solution for the user to follow along.","solution":"def solve_3x3x3_rubiks_cube(): Provides a step-by-step solution for a 3x3x3 Rubik's cube using a simplified method. Steps will include orienting the faces as if following a beginner's method. steps = [ \\"1. Make a white cross on the top face.\\", \\"2. Solve the white corners to complete the first layer.\\", \\"3. Solve the middle layer edges.\\", \\"4. Make a yellow cross on the top layer.\\", \\"5. Position the yellow corners correctly.\\", \\"6. Orient the yellow corners to complete the cube.\\" ] return steps def solve_rubiks_cube(size): Solves the Rubik's cube based on size. For simplicity, only implementation for 3x3x3 is provided. if size == 3: return solve_3x3x3_rubiks_cube() else: raise NotImplementedError(\\"Solver for this size cube is not implemented.\\")"},{"question":"Write two Python functions, \`how_many_times\` and \`count_non_overlapping_subsequences\`. The first function, \`how_many_times\`, should find how many times a specific character appears in a string. The second function, \`count_non_overlapping_subsequences\`, should determine how many times a sub-string appears in a larger string as a non-overlapping sub-sequence, without using any built-in string or list methods. Ensure both functions are designed to handle erroneous input by providing a detailed error handling mechanism.","solution":"def how_many_times(string, char): Returns the number of times a specific character appears in a string. Parameters: string (str): The string to search. char (str): The character to count in the string. Returns: int: The count of the character in the string. if not isinstance(string, str) or not isinstance(char, str) or len(char) != 1: raise ValueError(\\"Please provide valid input: string and a single character.\\") count = 0 for c in string: if c == char: count += 1 return count def count_non_overlapping_subsequences(main_string, sub_string): Returns the number of times a sub-string appears in a larger string as a non-overlapping sub-sequence. Parameters: main_string (str): The string to search within. sub_string (str): The sub-string to count as a non-overlapping sub-sequence. Returns: int: The count of the non-overlapping sub-string in the main string. if not isinstance(main_string, str) or not isinstance(sub_string, str): raise ValueError(\\"Please provide valid input: both main_string and sub_string should be strings.\\") if not main_string or not sub_string: return 0 main_len = len(main_string) sub_len = len(sub_string) count = i = 0 while i <= main_len - sub_len: match = True for j in range(sub_len): if main_string[i + j] != sub_string[j]: match = False break if match: count += 1 i += sub_len else: i += 1 return count"},{"question":"Write a function that takes in an array of integers and returns a new array containing only the positive numbers from the original array. The function should have a time complexity of O(n) and a space complexity of O(1). Additionally, the function should handle floating-point numbers and include them in the new array if they are positive.","solution":"def filter_positive_numbers(arr): Returns a new array containing only the positive numbers from the original array. Parameters: arr (list): The input list containing integers and/or floating-point numbers. Returns: list: A new list with only the positive numbers. return [x for x in arr if x > 0]"},{"question":"Write code to delete all occurrences of the given key 'k' from the given list 'lst' without using any built-in functions or libraries. The solution should have a time complexity of O(n) and a space complexity of O(1). Additionally, you are not allowed to use any additional data structures or variables apart from the ones provided in the initial setup.","solution":"def delete_all_occurrences(lst, k): Deletes all occurrences of the given key 'k' in the list 'lst'. # Index to place the next non-k element insert_pos = 0 # Iterate over each element in the list for i in range(len(lst)): # If the current element is not 'k', place it at the insert_pos if lst[i] != k: lst[insert_pos] = lst[i] insert_pos += 1 # Remove the remaining elements from the list while len(lst) > insert_pos: lst.pop()"},{"question":"Construct a function that divides a given list into two equal halves and returns them as tuples. However, the function should also handle cases where the list has an odd number of elements or is empty. In cases where the list has an odd number of elements, the extra element should be placed in the first half. If the list is empty, the function should return two empty tuples.","solution":"def split_list(lst): Divides a given list into two equal halves and returns them as tuples. If the list has an odd number of elements, the extra element goes to the first half. If the list is empty, returns two empty tuples. length = len(lst) split_index = (length + 1) // 2 # This ensures the extra element (if any) is in the first half first_half = tuple(lst[:split_index]) second_half = tuple(lst[split_index:]) return (first_half, second_half)"},{"question":"Write a Python program to find all the prime numbers in the range between 1 to 1000 and print the sum of all the prime numbers found.","solution":"def is_prime(n): Returns True if n is a prime number, else False. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def sum_of_primes(limit): Returns the sum of all prime numbers up to the given limit. primes = [n for n in range(2, limit + 1) if is_prime(n)] return sum(primes) # Calculate the sum of all prime numbers between 1 and 1000 sum_primes_1_to_1000 = sum_of_primes(1000) print(sum_primes_1_to_1000)"},{"question":"Write a Python function that accepts a string and returns a dictionary in which the keys are characters from the string, and the values are the numbers representing the number of occurrences of each character. Also include a functionality to exclude certain characters (like whitespaces or punctuation) from being included in the dictionary.","solution":"import string def char_count(s, exclude=None): Returns a dictionary with the character counts of a given string. Allows exclusion of certain characters. Parameters: s (str): The input string. exclude (set): A set of characters to be excluded from the count, optional. Returns: dict: A dictionary with characters as keys and their counts as values. if exclude is None: exclude = set() count_dict = {} for char in s: if char not in exclude: count_dict[char] = count_dict.get(char, 0) + 1 return count_dict"},{"question":"In Python, write a code snippet to calculate the average of numbers in a list. The list should not contain any non-numeric elements. If the list is empty, return 0.","solution":"def average(numbers): Returns the average of numbers in the given list. If the list is empty, return 0. if not numbers: return 0 return sum(numbers) / len(numbers)"},{"question":"Generate a Python script using the Flask micro web framework to greet a customer online. The script should use a personalized message for the customer based on their name, location, and browsing history. Additionally, the script should include a table of recommended products based on the customer's previous purchases and an option for the customer to provide feedback through a form submission. The greeting message should also be accompanied by an image carousel displaying the latest promotions and deals.","solution":"from flask import Flask, request, render_template_string app = Flask(__name__) @app.route('/') def greet_customer(): customer_name = request.args.get('name', 'Customer') location = request.args.get('location', 'your location') browsing_history = request.args.getlist('browsing_history') recommendations = get_recommendations(browsing_history) promotions = [ {\\"image_url\\": \\"promotion1.jpg\\", \\"description\\": \\"Promotion 1\\"}, {\\"image_url\\": \\"promotion2.jpg\\", \\"description\\": \\"Promotion 2\\"}, {\\"image_url\\": \\"promotion3.jpg\\", \\"description\\": \\"Promotion 3\\"} ] html = render_template_string(''' <html> <head> <title>Greeting Page</title> <style> .carousel { display: flex; overflow-x: auto; } .carousel img { margin-right: 20px; } </style> </head> <body> <h1>Hello, {{ customer_name }} from {{ location }}!</h1> <p>We see that you're interested in:</p> <ul> {% for item in browsing_history %} <li>{{ item }}</li> {% endfor %} </ul> <h2>Recommended Products for You</h2> <table border=\\"1\\"> <tr><th>Product</th><th>Description</th></tr> {% for recommendation in recommendations %} <tr><td>{{ recommendation.product }}</td><td>{{ recommendation.description }}</td></tr> {% endfor %} </table> <h2>Latest Promotions</h2> <div class=\\"carousel\\"> {% for promotion in promotions %} <div> <img src=\\"{{ promotion.image_url }}\\" alt=\\"{{ promotion.description }}\\"> <p>{{ promotion.description }}</p> </div> {% endfor %} </div> <h2>Feedback</h2> <form action=\\"/feedback\\" method=\\"POST\\"> <label for=\\"feedback\\">Your feedback:</label><br> <textarea id=\\"feedback\\" name=\\"feedback\\" rows=\\"4\\" cols=\\"50\\"></textarea><br> <input type=\\"submit\\" value=\\"Submit\\"> </form> </body> </html> ''', customer_name=customer_name, location=location, browsing_history=browsing_history, recommendations=recommendations, promotions=promotions) return html @app.route('/feedback', methods=['POST']) def handle_feedback(): feedback = request.form.get('feedback') # Process the feedback here return \\"Thank you for your feedback!\\" def get_recommendations(browsing_history): # Dummy recommendations based on browsing history dummy_data = [ {\\"product\\": \\"Product A\\", \\"description\\": \\"Description of Product A\\"}, {\\"product\\": \\"Product B\\", \\"description\\": \\"Description of Product B\\"}, {\\"product\\": \\"Product C\\", \\"description\\": \\"Description of Product C\\"} ] return dummy_data if __name__ == '__main__': app.run(debug=True)"},{"question":"Write a Python function that takes a list of integers as input and returns the largest and smallest numbers in the list. If the list is empty, the function should return None for both the largest and smallest numbers.","solution":"def find_largest_and_smallest(numbers): Returns a tuple containing the largest and smallest numbers in the list. If the list is empty, return (None, None). :param numbers: List of integers :return: Tuple (largest, smallest) if not numbers: return (None, None) largest = max(numbers) smallest = min(numbers) return (largest, smallest)"},{"question":"Create an algorithm to reverse an array without using any built-in reverse methods. The solution should have a time complexity of O(n) and a space complexity of O(1). The array will contain integers ranging from -1000 to 1000, and its length will be between 1 and 1000. Additionally, the algorithm should handle arrays with duplicate elements correctly.","solution":"def reverse_array(arr): Reverses an array in place without using any built-in reverse methods. Parameters: arr (list): The input list of integers. Returns: list: The reversed list of integers. left = 0 right = len(arr) - 1 while left < right: # Swap the elements at the left and right indices arr[left], arr[right] = arr[right], arr[left] # Move towards the center left += 1 right -= 1 return arr"},{"question":"Write a function named string_mult that accepts two arguments. The first will always be a string (word or name) and the second will be a number (positive or negative integer or zero). The function should return a string comprised of the initial string argument repeated a number of times equal to the value of the second argument. If the second argument is negative, it should reverse the string repetitions. If the second argument is 0, it should return an empty string.","solution":"def string_mult(s, n): Repeats the string \`s\` a number of times equal to \`n\`. If \`n\` is negative, it returns the reversed string repeated \`n\` times. If \`n\` is zero, it returns an empty string. if n == 0: return \\"\\" if n > 0: return s * n else: return s[::-1] * abs(n)"},{"question":"Write a code to replace all occurrences of a given substring inside a string with another substring, ensuring case-insensitive replacement.","solution":"def replace_substring_case_insensitive(original_string, to_replace, replacement): Replaces all occurrences of 'to_replace' in 'original_string' with 'replacement' in a case-insensitive manner. Parameters: original_string (str): The string in which to perform the replacements. to_replace (str): The substring to look for in a case-insensitive manner. replacement (str): The substring to replace with. Returns: str: A new string with all occurrences of 'to_replace' replaced by 'replacement'. import re pattern = re.compile(re.escape(to_replace), re.IGNORECASE) return pattern.sub(replacement, original_string)"},{"question":"Write a Python script to determine how many lowercase letters are in a given string, while ignoring any duplicate letters. The script should be able to handle very large input strings efficiently.","solution":"def count_unique_lowercase(s): Returns the number of unique lowercase letters in the string s. unique_lowercase = set() for char in s: if char.islower(): unique_lowercase.add(char) return len(unique_lowercase)"},{"question":"Write a Python function to find the minimum element in a sublist of an array using recursion. However, there is a twist: you need to implement the function without using any for or while loops for the traversal of the array.","solution":"def find_min_recursive(arr, start_index=0, min_element=None): Recursively finds the minimum element in a sublist of an array. :param arr: List of elements :param start_index: Current index being inspected :param min_element: Current minimum element found :return: Minimum element in the list if start_index >= len(arr): return min_element if min_element is None or arr[start_index] < min_element: min_element = arr[start_index] return find_min_recursive(arr, start_index + 1, min_element)"},{"question":"Create a function in Python to calculate the factorial of a number. Additionally, handle the case when the input is negative or not an integer and raise an exception with a custom error message.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. Raises an exception if n is negative or not an integer. if not isinstance(n, int): raise TypeError(\\"Input must be an integer.\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"I would like to create a function in Python that counts the number of each character in a given string. How can I achieve this?","solution":"def count_characters(s): Returns a dictionary with the count of each character in the string s. count_dict = {} for char in s: if char in count_dict: count_dict[char] += 1 else: count_dict[char] = 1 return count_dict"},{"question":"Write a function to sort a list of numbers using merge sort, but you are not allowed to use any built-in sorting functions or libraries. Additionally, you are required to implement the merge sort algorithm iteratively instead of recursively. The input list may contain duplicate numbers. The function should return the sorted list.","solution":"def merge_sort_iterative(arr): Sorts a list of numbers using an iterative merge sort algorithm. :param arr: List of numbers to sort. :return: Sorted list of numbers. width = 1 n = len(arr) while width < n: for i in range(0, n, 2 * width): left = arr[i:i + width] right = arr[i + width:i + 2 * width] arr[i:i + 2 * width] = merge(left, right) width *= 2 return arr def merge(left, right): Merges two sorted lists into one sorted list. :param left: First sorted list. :param right: Second sorted list. :return: Merged and sorted list. result = [] i = j = 0 while i < len(left) and j < len(right): if left[i] <= right[j]: result.append(left[i]) i += 1 else: result.append(right[j]) j += 1 result.extend(left[i:]) result.extend(right[j:]) return result"},{"question":"Given the following array of characters: ['a', 'b', 'c', 'd', 'a', 'e', 'a']. Write a python function that removes all duplicates in the array.","solution":"def remove_duplicates(char_list): Removes all duplicates from the list of characters while maintaining original order. seen = set() result = [] for char in char_list: if char not in seen: seen.add(char) result.append(char) return result"},{"question":"Create a Python program to find the n'th Fibonacci number, considering that n can be up to 10,000. The program should also handle potential memory overflow errors.","solution":"def fibonacci(n): Returns the nth Fibonacci number. Uses an iterative approach with constant space O(1). if n < 0: raise ValueError(\\"n must be a non-negative integer\\") elif n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a program in Python to calculate the factorial of a given number, but you are not allowed to use the built-in factorial function or any external libraries.","solution":"def factorial(n): Calculate the factorial of a given number n. If n is 0, the factorial is 1 as 0! is 1. If n is a positive integer, calculate the factorial iteratively. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Develop a recursive function in Python that accepts a list of integers of any length and returns the product of those integers. Additionally, ensure that your function handles potential exceptions like the list being empty or having non-integer elements.","solution":"def product_of_list(lst): Returns the product of integers in the list using recursion. Args: lst (list): List of integers. Returns: int: Product of all integers in the list. if not isinstance(lst, list): raise TypeError(\\"Input must be a list\\") if not lst: return 1 # Base case: Return 1 for an empty list for item in lst: if not isinstance(item, int): raise ValueError(\\"All elements in the list must be integers\\") # Recursive case return lst[0] * product_of_list(lst[1:])"},{"question":"Create a Python function that calculates the dot product of two given lists of numbers. The function should also handle errors for mismatched list lengths.","solution":"def dot_product(list1, list2): Computes the dot product of two lists of numbers. Raises ValueError if the lists have different lengths. Parameters: list1 (list): First list of numbers. list2 (list): Second list of numbers. Returns: float: The dot product of the two lists. if len(list1) != len(list2): raise ValueError(\\"Lists must have the same length\\") return sum(x * y for x, y in zip(list1, list2))"},{"question":"Develop a Python function that accepts two lists containing string elements as input parameters and determines the longest common subsequence present in both lists, considering the order of the elements.","solution":"def longest_common_subsequence(list1, list2): Returns the longest common subsequence in the same order from both input lists. len1, len2 = len(list1), len(list2) dp = [[None] * (len2 + 1) for _ in range(len1 + 1)] for i in range(len1 + 1): for j in range(len2 + 1): if i == 0 or j == 0: dp[i][j] = [] elif list1[i-1] == list2[j-1]: dp[i][j] = dp[i-1][j-1] + [list1[i-1]] else: dp[i][j] = max(dp[i-1][j], dp[i][j-1], key=len) return dp[len1][len2]"},{"question":"Develop a Python function that, when provided with a specific ordinal number as an argument, calculates and outputs the corresponding Catalan number from the mathematical series known as the Catalan sequence. Additionally, implement another function that generates an array of the first 'n' Catalan numbers. Both functions should include error handling to ensure the input is a positive integer. You will also need to create unit tests to verify the correctness of your functions. Remember to optimize the functions for large inputs.","solution":"def catalan_number(n): Calculates the nth Catalan number. :param n: Non-negative integer indicating the position in the Catalan sequence. :return: The nth Catalan number. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0: return 1 catalan = [0] * (n + 1) catalan[0] = 1 for i in range(1, n + 1): for j in range(i): catalan[i] += catalan[j] * catalan[i - 1 - j] return catalan[n] def first_n_catalan_numbers(n): Generates the first n Catalan numbers. :param n: Positive integer indicating how many Catalan numbers to generate. :return: Array containing the first n Catalan numbers. if not isinstance(n, int) or n <= 0: raise ValueError(\\"Input must be a positive integer\\") catalan = [0] * n catalan[0] = 1 for i in range(1, n): for j in range(i): catalan[i] += catalan[j] * catalan[i - 1 - j] return catalan"},{"question":"Write a Bash script that conditionally runs specific routines using 'case' statement based on the input variable. The script should be able to handle at least five different cases, including error handling for wrong input. Also, implement the switch-case equivalent in Python for the same task and compare the two methods in terms of functionality and performance. The code must be well-commented in both scripts.","solution":"# Python equivalent of the bash 'case' statement script def run_case(option): Run a specific routine based on the input option. Handles at least five different cases. Provides an error message for wrong input. case_dict = { 'case1': \\"Running routine 1...\\", 'case2': \\"Running routine 2...\\", 'case3': \\"Running routine 3...\\", 'case4': \\"Running routine 4...\\", 'case5': \\"Running routine 5...\\", } # Get the routine message based on the provided option return case_dict.get(option, \\"Error: Invalid option\\")"},{"question":"Write a Python code snippet to print the face of a clock with the hours, minutes, and seconds hands. The position of the hours, minutes, and seconds hands should be accurate according to the given time. Assume the time will be given in 24-hour format.","solution":"import matplotlib.pyplot as plt import numpy as np def draw_clock(hour, minute, second): Draws a clock with the given hour, minute, and second hands. Parameters: - hour: int, the hour (0-23) - minute: int, the minute (0-59) - second: int, the second (0-59) # Making sure the hour is in 12-hour format hour = hour % 12 # Calculate the angles in radians from 12:00 second_angle = np.deg2rad(360 * (second / 60)) minute_angle = np.deg2rad(360 * (minute / 60) + 6 * (second / 60)) hour_angle = np.deg2rad(360 * (hour / 12) + 30 * (minute / 60)) fig, ax = plt.subplots() ax.set_facecolor('white') plt.axis('off') # Plot clock circle clock_circle = plt.Circle((0, 0), 1, color='black', fill=False, linewidth=2) ax.add_artist(clock_circle) # Plot hour ticks for i in range(12): angle = np.deg2rad(360 * (i / 12)) x_outer, y_outer = np.cos(angle), np.sin(angle) x_inner, y_inner = 0.8 * np.cos(angle), 0.8 * np.sin(angle) plt.plot([x_inner, x_outer], [y_inner, y_outer], color='black', linewidth=2) # Hands length = {'hour': 0.5, 'minute': 0.8, 'second': 0.9} sec_x, sec_y = length['second'] * np.sin(second_angle), length['second'] * np.cos(second_angle) min_x, min_y = length['minute'] * np.sin(minute_angle), length['minute'] * np.cos(minute_angle) hour_x, hour_y = length['hour'] * np.sin(hour_angle), length['hour'] * np.cos(hour_angle) plt.plot([0, sec_x], [0, sec_y], color='red', linewidth=1, label='Second Hand') plt.plot([0, min_x], [0, min_y], color='black', linewidth=2, label='Minute Hand') plt.plot([0, hour_x], [0, hour_y], color='black', linewidth=4, label='Hour Hand') plt.xlim(-1.1, 1.1) plt.ylim(-1.1, 1.1) plt.gca().set_aspect('equal', adjustable='box') plt.show()"},{"question":"Design a modified Bubble Sort algorithm for a list of numbers. Additionally, implement a feature that allows the user to specify whether the sorting should be in ascending or descending order. The algorithm should have a time complexity of O(n^2) and should use a recursive approach instead of an iterative one.","solution":"def bubble_sort_recursive(arr, order='ascending'): def bubble_recursive(n): if n <= 1: return for i in range(n-1): if (order == 'ascending' and arr[i] > arr[i+1]) or (order == 'descending' and arr[i] < arr[i+1]): arr[i], arr[i+1] = arr[i+1], arr[i] bubble_recursive(n-1) bubble_recursive(len(arr)) return arr"},{"question":"Write a Python function that implements a simple calculator. The calculator should take a mathematical expression as input, where the expression would be a string containing numbers and operators. The operators supported are addition (+), subtraction (-), multiplication (*), division (/) and exponentiation (^). The function should handle these operations following the correct precedence of mathematical operators.","solution":"import re def simple_calculator(expression): Evaluates a mathematical expression string for +, -, *, /, and ^. def eval_expr(tokens): def parse_atom(): token = tokens.pop(0) if token == '(': result = parse_expr() tokens.pop(0) # Remove ')' return result else: return float(token) def parse_factor(): result = parse_atom() while tokens and tokens[0] == '^': tokens.pop(0) result **= parse_atom() return result def parse_term(): result = parse_factor() while tokens and tokens[0] in ('*', '/'): op = tokens.pop(0) if op == '*': result *= parse_factor() elif op == '/': result /= parse_factor() return result def parse_expr(): result = parse_term() while tokens and tokens[0] in ('+', '-'): op = tokens.pop(0) if op == '+': result += parse_term() elif op == '-': result -= parse_term() return result return parse_expr() expression = re.sub(r's+', '', expression) # Remove spaces tokens = re.findall(r'd+.?d*|[()+/*^-]', expression) return eval_expr(tokens)"},{"question":"Draft a Python code snippet to construct a function that calculates the aggregate of all prime numerals contained within an array.","solution":"def is_prime(n): if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def sum_of_primes(arr): Calculates the sum of all prime numbers in the array. return sum(num for num in arr if is_prime(num))"},{"question":"Create a python program to simulate a simple dice game between two players. Each player rolls a six-sided dice and the player with the highest number wins. If both players roll the same number, it's a tie. The program should display the result of each roll and announce the winner.","solution":"import random def roll_dice(): Simulates rolling a six-sided dice. return random.randint(1, 6) def dice_game(): Simulates a simple dice game between two players. Each player rolls a six-sided dice and the player with the highest number wins. If both players roll the same number, it's a tie. Returns a tuple containing player1's roll, player2's roll, and the result of the game. player1_roll = roll_dice() player2_roll = roll_dice() if player1_roll > player2_roll: result = \\"Player 1 wins\\" elif player2_roll > player1_roll: result = \\"Player 2 wins\\" else: result = \\"It's a tie\\" return player1_roll, player2_roll, result"},{"question":"Given a list of two numbers \`a\` and \`b\`, how do you write a Python function that swaps their values without using a temporary variable?","solution":"def swap_values(a, b): Swaps the values of a and b without using a temporary variable. Returns a tuple (b, a). a, b = b, a return a, b"},{"question":"I need you to create a python function that given a 2D array, it will return the maximum sum of all the cells inside it. You can assume that the array can only have positive integers and it will always have at least one row and one column.","solution":"def max_sum_2d_array(arr): Returns the sum of all the cells in the 2D array. :param arr: List[List[int]] :return: int total_sum = 0 for row in arr: total_sum += sum(row) return total_sum"},{"question":"Write a Python function that merges two dictionaries into a new one, giving priority to the second dictionary's values in case of key collisions.","solution":"def merge_dicts(dict1, dict2): Merges two dictionaries into a new one, giving priority to the second dictionary's values in case of key collisions. Parameters: dict1 (dict): The first dictionary. dict2 (dict): The second dictionary. Returns: dict: A new dictionary containing all keys from dictionary 1 and dictionary 2, with values from dictionary 2 overwriting those from dictionary 1 in case of key collisions. merged_dict = dict1.copy() # start with all keys and values from dict1 merged_dict.update(dict2) # update/add keys and values from dict2 return merged_dict"},{"question":"Suppose we have k sorted lists of integers. Design a Python function that merges these lists into a single sorted list. For an additional challenge, the function should also eliminate duplicate values, even if they exist in different lists. There's a piece of erroneous code below. Take it as a reference, identify the mistakes, and write a correct version of the function.","solution":"import heapq def merge_k_sorted_lists(lists): Merge k sorted lists into a single sorted list and eliminate duplicates. Args: lists (List[List[int]]): List of k sorted lists of integers. Returns: List[int]: A single sorted list with duplicates eliminated. merged_list = [] min_heap = [] # Create a heap with first elements from each list for i, lst in enumerate(lists): if lst: heapq.heappush(min_heap, (lst[0], i, 0)) # Extract the smallest element from heap, push the next element from the same list to heap while min_heap: val, list_index, element_index = heapq.heappop(min_heap) if not merged_list or merged_list[-1] != val: merged_list.append(val) next_element_index = element_index + 1 if next_element_index < len(lists[list_index]): next_val = lists[list_index][next_element_index] heapq.heappush(min_heap, (next_val, list_index, next_element_index)) return merged_list"},{"question":"Write a web scraping program to extract and count the frequency of unique words from a given webpage, while filtering out common stop words and ensuring proper handling of special characters.","solution":"import requests from bs4 import BeautifulSoup import re from collections import Counter def extract_text_from_webpage(url): response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') text = soup.get_text() return text def clean_and_tokenize_text(text): text = re.sub(r'[^ws]', '', text) words = text.lower().split() return words def remove_stop_words(words): stop_words = set([ 'i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', 'she', 'her', 'hers', 'herself', 'it', 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', 'these', 'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further', 'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more', 'most', 'other', 'some', 'such', 'no', 'nor', 'not', 'only', 'own', 'same', 'so', 'than', 'too', 'very', 's', 't', 'can', 'will', 'just', 'don', 'should', 'now' ]) filtered_words = [word for word in words if word not in stop_words] return filtered_words def count_word_frequencies(words): word_counts = Counter(words) return word_counts def get_word_frequency_from_webpage(url): text = extract_text_from_webpage(url) cleaned_words = clean_and_tokenize_text(text) words_without_stop_words = remove_stop_words(cleaned_words) word_frequencies = count_word_frequencies(words_without_stop_words) return word_frequencies"},{"question":"Is it possible to use a sum model in Python for addition of multiple numbers? Can you provide a code example?","solution":"def sum_numbers(*numbers): Returns the sum of all provided numbers. return sum(numbers)"},{"question":"Can you write a Python script that lists all the files in the current directory with a .txt extension?","solution":"import os def list_txt_files(): Returns a list of all .txt files in the current directory. txt_files = [filename for filename in os.listdir('.') if filename.endswith('.txt')] return txt_files"},{"question":"Create a program that takes in a list of decimal numbers as input. The program should convert each decimal number into its binary equivalent and then concatenate the resulting binary strings into a single string.","solution":"def concatenate_binary(decimal_list): Takes in a list of decimal numbers and returns a concatenated binary string. binary_string = ''.join(format(num, 'b') for num in decimal_list) return binary_string"},{"question":"How would you modify the function \`calculate_fibonacci\` to calculate the Fibonacci sequence using iteration instead of recursion? Additionally, can you modify the function to accept a list of starting values for the Fibonacci sequence instead of always starting at 0 and 1?","solution":"def calculate_fibonacci(n, starting_values=[0, 1]): Calculates the nth Fibonacci number using iteration. Allows for custom starting values of the Fibonacci sequence. :param n: The position in the Fibonacci sequence. :param starting_values: A list of two integers to start the Fibonacci sequence. :return: The nth Fibonacci number. if n < 0: raise ValueError(\\"n must be a non-negative integer\\") if len(starting_values) != 2: raise ValueError(\\"starting_values must contain exactly two elements\\") a, b = starting_values if n == 0: return a elif n == 1: return b for _ in range(2, n+1): a, b = b, a + b return b"},{"question":"How do I define a function in Python that generates a list of all the Pythagorean triples (a, b, c) up to a given limit where a < b < c?","solution":"def generate_pythagorean_triples(limit): Generates a list of all the Pythagorean triples (a, b, c) up to a given limit where a < b < c. Parameters: limit (int): The upper limit for the values of a, b, and c. Returns: list: A list of tuples containing the Pythagorean triples (a, b, c). triples = [] for a in range(1, limit+1): for b in range(a+1, limit+1): for c in range(b+1, limit+1): if a*a + b*b == c*c: triples.append((a, b, c)) return triples"},{"question":"Create a python program that reads a list of names from a text file where each name is a separate line and randomly selects three names with a message informing the selected names.","solution":"import random def read_names_from_file(file_path): Reads a list of names from the specified text file where each name is on a separate line. Args: file_path (str): The path to the text file containing the names. Returns: list: A list of names read from the file. with open(file_path, 'r') as file: names = file.read().splitlines() return names def select_three_names(names): Randomly selects three names from the provided list. Args: names (list): The list of names. Returns: list: A list containing three randomly selected names. if len(names) < 3: raise ValueError(\\"The list must contain at least three names to select from.\\") return random.sample(names, 3) def main(file_path): Reads names from a text file, randomly selects three names, and prints them. Args: file_path (str): The path to the text file containing the names. names = read_names_from_file(file_path) selected_names = select_three_names(names) print(f\\"The selected names are: {', '.join(selected_names)}\\")"},{"question":"Given a list of words, write a program to determine if they form a circular chain of palindromes, where each word's first letter is the same as the previous word's last letter. Output \\"true\\" if the condition is met, and \\"false\\" otherwise.","solution":"def is_circular_chain_of_palindromes(words): Determines if the words form a circular chain of palindromes. A circular chain of palindromes means each word's first letter is the same as the previous word's last letter, and the first word's first letter is the same as the last word's last letter. :param words: List of words. :return: True if they form a circular chain of palindromes, False otherwise. # Check each word is a palindrome for word in words: if word != word[::-1]: return False # Check the chain condition for i in range(len(words)): if words[i][-1] != words[(i + 1) % len(words)][0]: return False return True"},{"question":"Below is a Python function that is used to calculate the sum of all numbers in a given list. Please modify the function in such a way that it calculates the sum of only the numbers that are even, bigger than 10, and divisible by 3 in the given list.","solution":"def sum_even_and_special(numbers): Calculates the sum of numbers in the list that are even, bigger than 10, and divisible by 3. return sum(num for num in numbers if num > 10 and num % 2 == 0 and num % 3 == 0)"},{"question":"Create a python function that takes as input a list of dictionaries with the keys 'id' and 'status'. Return a list of all 'id's where the 'status' is set to 'inactive'.","solution":"def get_inactive_ids(data): Returns a list of 'id's where the 'status' is 'inactive'. Parameters: data (list of dict): A list of dictionaries with the keys 'id' and 'status'. Returns: list: A list of 'id's with 'inactive' status. inactive_ids = [item['id'] for item in data if item['status'] == 'inactive'] return inactive_ids"},{"question":"Define a custom Exception for an invalid data type and implement a function that takes a list of integers and returns the sum of all prime numbers in the list. The function should have a time complexity of O(n^2), where n is the length of the input list, and should not use any built-in libraries or functions for determining prime numbers.","solution":"class InvalidDataTypeError(Exception): Custom exception for invalid data types being passed to the function. pass def is_prime(num): Helper function to determine if a number is prime. if num <= 1: return False for i in range(2, num): if num % i == 0: return False return True def sum_of_primes(numbers): Takes a list of integers and returns the sum of all prime numbers in the list. Raises InvalidDataTypeError if the input is not a list of integers. if not isinstance(numbers, list) or not all(isinstance(n, int) for n in numbers): raise InvalidDataTypeError(\\"Input must be a list of integers.\\") prime_sum = 0 for num in numbers: if is_prime(num): prime_sum += num return prime_sum"},{"question":"Can you write a python program that takes a string as input and checks if the string is a valid IP Address?","solution":"def is_valid_ip(ip): Checks whether the provided string is a valid IPv4 address. An IPv4 address consists of four numbers (each between 0 and 255) separated by periods. :param ip: String to check :return: Boolean indicating if the ip is a valid IPv4 address parts = ip.split(\\".\\") if len(parts) != 4: return False for part in parts: if not part.isdigit(): return False num = int(part) if num < 0 or num > 255: return False return True"},{"question":"Create a data structure to store all of the prime numbers up to 1 billion. Additionally, provide a piece of erroneous code that attempts to check for primality using a flawed algorithm.","solution":"class PrimeNumberStore: def __init__(self, upper_limit): self.upper_limit = upper_limit self.primes = self._sieve_of_eratosthenes(upper_limit) def _sieve_of_eratosthenes(self, limit): Generate primes up to \`limit\` using the Sieve of Eratosthenes is_prime = [True] * (limit + 1) is_prime[0], is_prime[1] = False, False for num in range(2, int(limit**0.5) + 1): if is_prime[num]: for multiple in range(num * num, limit + 1, num): is_prime[multiple] = False return [num for num, prime in enumerate(is_prime) if prime] def get_primes(self): Returns the list of primes up to the upper limit return self.primes def is_prime(self, num): Return True if num is prime, False otherwise if num <= self.upper_limit: return num in self.primes return False def flawed_is_prime(num): Flawed algorithm to check if number is prime if num < 2: return False for i in range(2, num): if num % i == 0: return False return True"},{"question":"Given two strings a and b; write a function to find and return the first index at which the two strings differ. If the strings are identical, return -1.","solution":"def first_difference_index(a, b): Finds the first index at which the two strings differ. Returns -1 if the strings are identical. min_length = min(len(a), len(b)) for i in range(min_length): if a[i] != b[i]: return i if len(a) != len(b): return min_length return -1"},{"question":"Develop a Python function to swap the initial and terminal elements of a given list, while also reversing the order of the remaining elements in the list.","solution":"def swap_and_reverse(lst): Swaps the first and last elements of the list and reverses the order of the elements in between. Args: lst (list): The input list. Returns: list: The modified list with first and last elements swapped and the rest reversed. if len(lst) < 2: return lst # nothing to swap for lists with fewer than 2 elements # Swapping the first and last elements lst[0], lst[-1] = lst[-1], lst[0] # Reversing the elements in between lst[1:-1] = lst[1:-1][::-1] return lst"},{"question":"Write a function in Python that takes two strings as input and checks if the characters in the second string are present in the first string. The function should return a list of boolean values corresponding to the presence of each character.","solution":"def check_characters_in_string(base_string, check_string): Returns a list of boolean values indicating whether each character in check_string is present in base_string. return [char in base_string for char in check_string]"},{"question":"Create a sequence that displays the first 10 numbers of the Fibonacci series, commencing from 0 and 1, by utilizing recursive function methodology in Python programming language. Additionally, your function should handle input checking for invalid cases like negative numbers and non-integer types.","solution":"def fibonacci(n): Returns the nth Fibonacci number, where n is the position in the Fibonacci sequence. Handles invalid inputs like negative numbers and non-integer types. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0: return 0 elif n == 1: return 1 else: return fibonacci(n - 1) + fibonacci(n - 2) def first_n_fibonacci(n): Returns a list of the first n Fibonacci numbers. if not isinstance(n, int) or n <= 0: raise ValueError(\\"Input must be a positive integer.\\") return [fibonacci(i) for i in range(n)] # Get the first 10 numbers of the Fibonacci series first_10_fibonacci = first_n_fibonacci(10)"},{"question":"Write a Python function that accepts a list of words and returns the word with the highest number of vowels. In case of a tie, return the word that comes first lexicographically. Consider 'y' as a vowel only if it is at the end of the word and no other vowels are present in the word.","solution":"def count_vowels(word): vowels = \\"aeiou\\" count = sum(1 for char in word if char in vowels) if count == 0 and word.endswith('y'): count = 1 return count def word_with_most_vowels(words): if not words: return None max_vowels = 0 result_word = \\"\\" for word in words: current_vowel_count = count_vowels(word) if (current_vowel_count > max_vowels or (current_vowel_count == max_vowels and word < result_word)): max_vowels = current_vowel_count result_word = word return result_word"},{"question":"What is the procedure to reverse the lines of a text file using Python? Additionally, implement the solution to handle large files efficiently, without loading the entire file into memory at once.","solution":"def reverse_lines(input_file_path, output_file_path): Reverses the lines in the input file and writes them to the output file. input_file_path: str, path to the input text file. output_file_path: str, path to the output text file. with open(input_file_path, 'r') as input_file: lines = reversed(list(iter(input_file))) with open(output_file_path, 'w') as output_file: for line in lines: output_file.write(line)"},{"question":"Create a simple python Flask application which has one endpoint \`/\` which returns \`<h1>Hello World</h1>\`","solution":"from flask import Flask app = Flask(__name__) @app.route('/') def hello_world(): return '<h1>Hello World</h1>' if __name__ == '__main__': app.run()"},{"question":"Create a function that takes in two strings and determines the longest common substring. The function should handle cases where the strings contain special characters and numeric digits. Additionally, the function should return the starting index of the longest common substring in both strings. The function should have a time complexity of O(n), where n is the length of the longest string.","solution":"def longest_common_substring(s1, s2): Returns the longest common substring and its starting index in both strings. If there are multiple substrings with the same length, return any one of them. m, n = len(s1), len(s2) if m == 0 or n == 0: return \\"\\", -1, -1 # Create a table to store lengths of longest common suffixes of substrings lc_substr = [[0] * (n + 1) for _ in range(m + 1)] length = 0 # Length of longest common substring row, col = 0, 0 # Ending indexes of the longest common substring in s1 and s2 # Building the table in bottom-up fashion for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: lc_substr[i][j] = lc_substr[i - 1][j - 1] + 1 if lc_substr[i][j] > length: length = lc_substr[i][j] row, col = i, j else: lc_substr[i][j] = 0 # If no common substring is found if length == 0: return \\"\\", -1, -1 # Longest common substring longest_common_substr = s1[row - length: row] return longest_common_substr, row - length, col - length"},{"question":"For a given array of integers, sort the array using the Quick Sort algorithm.","solution":"def quick_sort(arr): Sorts an array using the Quick Sort algorithm. if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quick_sort(left) + middle + quick_sort(right)"},{"question":"Write a Python function to calculate the number of zeroes in a list of integers using map() function.","solution":"def count_zeroes(numbers): Returns the number of zeroes in the list of integers. return sum(map(lambda x: x == 0, numbers))"},{"question":"Reverse a given string of characters using only a single loop and without using any built-in string manipulation functions or data structures. Additionally, ensure that the solution has a time complexity of O(n), where n is the length of the string.","solution":"def reverse_string(s): Reverses the given string using a single loop. Args: s (str): The string to reverse. Returns: str: The reversed string. reversed_s = '' for char in s: reversed_s = char + reversed_s return reversed_s"},{"question":"Please write a code to delete all items from a list with a value of 3 and calculate the sum of the remaining items. Additionally, you should handle cases where the list is empty or contains only items with a value of 3. The time complexity of your solution should be O(n), where n is the length of the list. You are not allowed to use any built-in functions or methods that directly solve this problem (e.g. using filter(), list comprehension, etc.).","solution":"def delete_items_and_sum(input_list): Deletes all items from the input list that have a value of 3 and calculates the sum of the remaining items. Parameters: input_list (list): The list from which items will be removed and whose remaining items will be summed. Returns: int: The sum of the remaining items in the list. total_sum = 0 for item in input_list: if item != 3: total_sum += item return total_sum"},{"question":"Develop a comprehensive system, using Python, that can not only count the number of consonants in a given string but also provide the distinct consonants present in the string. The system should be robust enough to handle any language that uses the Latin alphabet. Additionally, it should discount any special characters, digits, or whitespace that might be present in the input string.","solution":"def count_consonants(input_string): Returns the number of consonants and a set of distinct consonants in the input string. consonants = \\"bcdfghjklmnpqrstvwxyz\\" input_string = input_string.lower() count = 0 distinct_consonants = set() for char in input_string: if char in consonants: count += 1 distinct_consonants.add(char) return count, distinct_consonants"},{"question":"Rewrite the following python program to convert UTC time to local time and display it in a specific format. Additionally, include error handling for incorrect input and add a feature to allow the user to input their desired time zone.","solution":"from datetime import datetime import pytz def convert_utc_to_local(utc_time_str, timezone_str): Converts a UTC time string to the specified local time zone. Args: - utc_time_str: A string representing the UTC time in \\"YYYY-MM-DD HH:MM:SS\\" format. - timezone_str: A string representing the desired time zone. Returns: - A string representing the local time in \\"YYYY-MM-DD HH:MM:SS\\" format, or an error message if input is invalid. try: # Parse the UTC time string to a datetime object utc_time = datetime.strptime(utc_time_str, \\"%Y-%m-%d %H:%M:%S\\") utc_time = pytz.utc.localize(utc_time) # Get the desired timezone local_tz = pytz.timezone(timezone_str) # Convert UTC time to the desired timezone local_time = utc_time.astimezone(local_tz) # Return the local time formatted as a string return local_time.strftime(\\"%Y-%m-%d %H:%M:%S\\") except ValueError as ve: return f\\"Error: Invalid time format or timezone. {ve}\\" except pytz.UnknownTimeZoneError: return \\"Error: Unknown timezone.\\" # Example usage: # print(convert_utc_to_local(\\"2023-10-05 14:30:00\\", \\"America/New_York\\"))"},{"question":"Write a code in Python that returns an inversion of a given string, but you are not allowed to use any built-in string manipulation functions or methods. Additionally, you are not allowed to use any built-in data structures such as lists or arrays. The time complexity of your solution should be O(n) and the space complexity should be O(1).","solution":"def invert_string(s): Returns the inversion of a given string without using built-in string manipulation functions or data structures. n = len(s) s = list(s) # Temporarily convert string to list # Two-pointer technique left = 0 right = n - 1 while left < right: # Swap characters s[left], s[right] = s[right], s[left] left += 1 right -= 1 return ''.join(s)"},{"question":"Write a lambda expression that multiplies its two arguments, but also add exception handling to account for instances where the arguments might not be integers. Additionally, include code to verify the functionality of your lambda expression with a simple test.","solution":"multiply = lambda a, b: a * b if isinstance(a, int) and isinstance(b, int) else 'Error: Both arguments must be integers'"},{"question":"Write me a python script that uses boto3 to create an AWS S3 bucket if it doesn't already exist and upload a local file to the bucket.","solution":"import boto3 import botocore def create_s3_bucket_and_upload_file(bucket_name, file_path, object_name=None): Create an S3 bucket and upload a local file to the bucket. Parameters: - bucket_name: The name of the S3 bucket. - file_path: The local file path to upload. - object_name: The S3 object name. If not specified, file_path is used. Returns: - True if file was uploaded, else False s3 = boto3.client('s3') if object_name is None: object_name = file_path try: # Check if bucket already exists s3.head_bucket(Bucket=bucket_name) except botocore.exceptions.ClientError as e: # If a 404 error is raised, the bucket does not exist, so create it error_code = e.response['Error']['Code'] if error_code == '404': try: s3.create_bucket(Bucket=bucket_name) except botocore.exceptions.ClientError as e: print(f\\"Error creating bucket: {e}\\") return False else: print(f\\"Error checking bucket: {e}\\") return False # Upload the file try: s3.upload_file(file_path, bucket_name, object_name) except botocore.exceptions.ClientError as e: print(f\\"Error uploading file: {e}\\") return False return True"},{"question":"Show me a python code example of a Factory design pattern and explain it.","solution":"class Dog: A Dog class that returns the sound of a dog. def speak(self): return \\"Woof!\\" class Cat: A Cat class that returns the sound of a cat. def speak(self): return \\"Meow!\\" class AnimalFactory: A factory class to create objects of Dog and Cat based on the input type. @staticmethod def get_animal(animal_type): if animal_type == 'dog': return Dog() elif animal_type == 'cat': return Cat() else: return None # Usage Example: # Create a dog and make it speak dog = AnimalFactory.get_animal('dog') print(dog.speak()) # Output: Woof! # Create a cat and make it speak cat = AnimalFactory.get_animal('cat') print(cat.speak()) # Output: Meow!"},{"question":"Write a function to calculate the factorial of a given number using Python. Additionally, modify the function to handle large numbers efficiently by implementing a memoization technique.","solution":"def factorial(n, memo = {}): Returns the factorial of n. Uses memoization to handle large numbers efficiently. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0: return 1 if n in memo: return memo[n] memo[n] = n * factorial(n - 1, memo) return memo[n]"},{"question":"Write a Python function called 'remove_duplicates' that takes a list as an argument and returns a new list where all duplicate elements are removed, keeping only the first occurrence of each element. Additionally, the function should maintain the order of the elements. After completing this, write another function called 'reverse_unique' that will first reverse the list, then remove all duplicates, again keeping the order. Test both of these functions using the list \`[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\`.","solution":"def remove_duplicates(lst): Remove duplicates from the list while maintaining the order of first occurrences. seen = set() unique_list = [] for item in lst: if item not in seen: unique_list.append(item) seen.add(item) return unique_list def reverse_unique(lst): Reverse the list, then remove duplicates while maintaining the order of first occurrences. reversed_lst = lst[::-1] return remove_duplicates(reversed_lst)"},{"question":"Write a Python program that determines how long different lists take to sort using the built-in sort() method. Compare sorting times for lists that grow from 100 to 10,000 items in increments of 1,000, and produce a plot showing the relationship between list length and sorting time.","solution":"import time import random import matplotlib.pyplot as plt def measure_sort_times(): lengths = range(100, 10001, 1000) times = [] for length in lengths: lst = random.sample(range(length), length) start = time.perf_counter() lst.sort() end = time.perf_counter() times.append(end - start) plt.plot(lengths, times, marker='o') plt.xlabel('List Length') plt.ylabel('Sorting Time (seconds)') plt.title('Sorting Time vs. List Length') plt.grid(True) plt.show() measure_sort_times()"},{"question":"Write a Python program that can simulate two teams playing a game. In this game, the teams will have to capture flags from each other's bases and return them to their own base to score a point. The game will have 10 flags on each side and the team who captures more flags at the end of the game wins. However, if one team manages to capture all 10 flags on the other team's side, they win the game immediately. Write a program that simulates this game between two teams, with each team's capture rate being randomized.","solution":"import random class Game: def __init__(self): self.team1_flags = 10 self.team2_flags = 10 def play_turn(self): team1_capture = random.randint(0, min(3, self.team2_flags)) team2_capture = random.randint(0, min(3, self.team1_flags)) self.team1_flags -= team2_capture self.team2_flags -= team1_capture return team1_capture, team2_capture def check_for_winner(self): if self.team1_flags == 0: return \\"Team 2 wins by capturing all flags!\\" elif self.team2_flags == 0: return \\"Team 1 wins by capturing all flags!\\" elif self.team1_flags > self.team2_flags: return \\"Team 1 wins by capturing more flags at the end!\\" elif self.team2_flags > self.team1_flags: return \\"Team 2 wins by capturing more flags at the end!\\" else: return \\"It's a draw!\\" def simulate_game(self): turns = 0 while self.team1_flags > 0 and self.team2_flags > 0: team1_capture, team2_capture = self.play_turn() turns += 1 if self.team1_flags == 0 or self.team2_flags == 0: winner = self.check_for_winner() else: winner = self.check_for_winner() return winner, turns"},{"question":"Reverse the following array in-place using Python, without using any built-in functions or libraries that directly reverse the array. Your solution should have a time complexity of O(n) and a space complexity of O(1). The input array will always contain at least one element.","solution":"def reverse_array(arr): Reverses the given array in-place. Parameters: arr (list): The list to reverse Returns: None: This function modifies the list in place. left = 0 right = len(arr) - 1 while left < right: arr[left], arr[right] = arr[right], arr[left] left += 1 right -= 1"},{"question":"Write a function to implement the sequential search algorithm to find the maximum element in a list of integers. However, you are not allowed to use any built-in functions or methods that directly manipulate or access the list. Additionally, you are not allowed to use any loops, recursion, or additional data structures in your implementation. You must only use functional programming techniques and pure functions to solve the problem.","solution":"from functools import reduce def find_max(arr): Returns the maximum element in a list of integers using functional programming techniques. def max_func(x, y): return x if x > y else y return reduce(max_func, arr)"},{"question":"Create a Python implementation of a singly linked list with methods for adding elements at the beginning, end, and deleting elements by value.","solution":"class Node: def __init__(self, value): self.value = value self.next = None class SinglyLinkedList: def __init__(self): self.head = None def add_at_beginning(self, value): new_node = Node(value) new_node.next = self.head self.head = new_node def add_at_end(self, value): new_node = Node(value) if not self.head: self.head = new_node return current_node = self.head while current_node.next: current_node = current_node.next current_node.next = new_node def delete_by_value(self, value): if not self.head: return if self.head.value == value: self.head = self.head.next return current_node = self.head while current_node.next and current_node.next.value != value: current_node = current_node.next if current_node.next: current_node.next = current_node.next.next def to_list(self): elements = [] current_node = self.head while current_node: elements.append(current_node.value) current_node = current_node.next return elements"},{"question":"Using any programming language, write a function that takes an integer input and returns its binary equivalent as a string. The function should also verify if the input is within the range of -2^31 to 2^31-1 before processing. Additionally, the function must check if the input is an integer and not a floating-point number. If the input is outside the valid range or not an integer, the function should return an error message. Lastly, include a sample code in Python that uses your function to convert a given decimal number to binary and prints the result.","solution":"def decimal_to_binary(n): Convert an integer to its binary equivalent as a string. The input must be an integer within the range of -2^31 to 2^31-1. :param n: The integer to be converted to binary. :return: Binary equivalent as a string or an error message. if not isinstance(n, int): return \\"Error: Input is not an integer\\" if n < -2**31 or n > 2**31 - 1: return \\"Error: Input is out of range\\" return bin(n)[2:] if n >= 0 else '-' + bin(n)[3:] # Sample usage number = 10 binary_representation = decimal_to_binary(number) print(f\\"The binary representation of {number} is {binary_representation}\\")"},{"question":"Design a Python function that not only calculates the day of the week for any given date in the Gregorian calendar but also accounts for various exceptions, including leap years and invalid inputs. Additionally, the function should avoid using any built-in or external date/time libraries and must consider the different start days of the week in different regions (e.g., Monday in Europe and Sunday in the US). First, understand and use Zeller's Congruence formula for solving the problem.","solution":"def day_of_the_week(day, month, year, start_of_week=\\"Sunday\\"): Calculates the day of the week for any given date in the Gregorian calendar. Zeller's Congruence is used to calculate the day of the week. Parameters: day (int): Day of the month month (int): Month of the year (1-12) year (int): Year (e.g., 2023) start_of_week (str): Specifies the starting day of the week. Default is \\"Sunday\\". Returns: str: Day of the week # Zeller's Congruence algorithm requires adjustments for January and February if month < 3: month += 12 year -= 1 q = day m = month K = year % 100 J = year // 100 # Zeller's Congruence formula f = q + ((13 * (m + 1)) // 5) + K + (K // 4) + (J // 4) + (5 * J) day_of_week = f % 7 # Adjust the start day of the week according to the region week_days_starting_sunday = [\\"Saturday\\", \\"Sunday\\", \\"Monday\\", \\"Tuesday\\", \\"Wednesday\\", \\"Thursday\\", \\"Friday\\"] week_days_starting_monday = [\\"Friday\\", \\"Saturday\\", \\"Sunday\\", \\"Monday\\", \\"Tuesday\\", \\"Wednesday\\", \\"Thursday\\"] if start_of_week == \\"Sunday\\": return week_days_starting_sunday[day_of_week] elif start_of_week == \\"Monday\\": return week_days_starting_monday[day_of_week] else: raise ValueError(\\"Invalid start_of_week parameter. Use 'Sunday' or 'Monday'.\\")"},{"question":"Write a program to generate a random string of 5 characters, including uppercase letters, lowercase letters, digits, and special characters.","solution":"import random import string def generate_random_string(length=5): Generate a random string of specified length including uppercase letters, lowercase letters, digits, and special characters. :param length: Length of the random string to generate. :type length: int :return: Random string of specified length. :rtype: str characters = string.ascii_letters + string.digits + string.punctuation return ''.join(random.choice(characters) for _ in range(length))"},{"question":"Create a Python script that generates random mazes using a depth-first search algorithm. The maze should be represented as a 2D grid, with each cell being either a wall or a passage. The output should be a maze displayed as ASCII art in the console. Additionally, provide a function to check if the maze has a unique solution using a breadth-first search algorithm.","solution":"import random def generate_maze(width, height): def carve_passages_from(x, y, grid): directions = [(0, 2), (0, -2), (2, 0), (-2, 0)] random.shuffle(directions) for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < width and 0 <= ny < height and grid[ny][nx] == '#': grid[y+dy//2][x+dx//2] = '.' grid[ny][nx] = '.' carve_passages_from(nx, ny, grid) # Ensure width and height are odd numbers width, height = (width if width % 2 == 1 else width + 1, height if height % 2 == 1 else height + 1) grid = [['#'] * width for _ in range(height)] grid[1][1] = '.' carve_passages_from(1, 1, grid) return grid def print_maze(maze): for row in maze: print(''.join(row)) def has_unique_solution(maze): from collections import deque width, height = len(maze[0]), len(maze) start = (1, 1) end = (width - 2, height - 2) def bfs(start, end): queue = deque([start]) visited = {start} while queue: x, y = queue.popleft() if (x, y) == end: return True for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]: nx, ny = x + dx, y + dy if 0 <= nx < width and 0 <= ny < height and maze[ny][nx] == '.' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return False return bfs(start, end) # Example usage if __name__ == \\"__main__\\": maze = generate_maze(21, 21) print_maze(maze) print(\\"Unique Solution:\\", has_unique_solution(maze))"},{"question":"Given a list of numbers as an input, develop a function that identifies the number that appears the most frequently. However, in case multiple numbers share the maximum frequency, your function should return them all in the order of their first appearance, not just the smallest one. Also, instead of using built-in functions for counting frequency or sorting, code your own.","solution":"def most_frequent(numbers): Identify the number(s) that appear the most frequently in the list, returning them in the order of their first appearance. frequency_dict = {} first_appearance = {} for idx, number in enumerate(numbers): if number in frequency_dict: frequency_dict[number] += 1 else: frequency_dict[number] = 1 first_appearance[number] = idx max_frequency = 0 most_frequent_numbers = [] for number, freq in frequency_dict.items(): if freq > max_frequency: most_frequent_numbers = [number] max_frequency = freq elif freq == max_frequency: most_frequent_numbers.append(number) # Sort most_frequent_numbers by their first appearance in the original list most_frequent_numbers.sort(key=lambda x: first_appearance[x]) return most_frequent_numbers"},{"question":"Create a python program to return a new list with each item multiplied by 2 in an existing list, but the program should also exclude any negative numbers and strings from the final list.","solution":"def multiply_and_filter(lst): Returns a new list with each number multiplied by 2, excluding negative numbers and strings. return [x * 2 for x in lst if isinstance(x, (int, float)) and x >= 0]"},{"question":"Construct a Python function to enumerate the occurrences of each unique word in a provided sentence.","solution":"def count_word_occurrences(sentence): Returns a dictionary with each unique word in the sentence as keys and their occurrences as values. words = sentence.split() word_count = {} for word in words: word = word.lower().strip(\\",.?!;:\\") word_count[word] = word_count.get(word, 0) + 1 return word_count"},{"question":"Create a Python function using the Boto3 library to manage Amazon S3 service. The function should be capable of uploading objects, downloading objects, listing all objects in a bucket, and deleting objects.","solution":"import boto3 from botocore.exceptions import NoCredentialsError, PartialCredentialsError def s3_operations(action, bucket_name, object_name=None, file_path=None): s3 = boto3.client('s3') if action == 'upload': try: s3.upload_file(file_path, bucket_name, object_name) return f\\"{object_name} has been uploaded to {bucket_name}.\\" except FileNotFoundError: return \\"The file was not found.\\" except NoCredentialsError: return \\"Credentials not available.\\" except PartialCredentialsError: return \\"Incomplete credentials provided.\\" elif action == 'download': try: s3.download_file(bucket_name, object_name, file_path) return f\\"{object_name} has been downloaded from {bucket_name} to {file_path}.\\" except FileNotFoundError: return \\"The file was not found.\\" except NoCredentialsError: return \\"Credentials not available.\\" except PartialCredentialsError: return \\"Incomplete credentials provided.\\" elif action == 'list': try: response = s3.list_objects_v2(Bucket=bucket_name) if 'Contents' in response: return [obj['Key'] for obj in response['Contents']] else: return \\"No objects found in the bucket.\\" except NoCredentialsError: return \\"Credentials not available.\\" except PartialCredentialsError: return \\"Incomplete credentials provided.\\" elif action == 'delete': try: s3.delete_object(Bucket=bucket_name, Key=object_name) return f\\"{object_name} has been deleted from {bucket_name}.\\" except NoCredentialsError: return \\"Credentials not available.\\" except PartialCredentialsError: return \\"Incomplete credentials provided.\\" else: return \\"Unsupported action type. Please use 'upload', 'download', 'list', or 'delete'.\\""},{"question":"Please write a Python function that takes a list as an argument and returns an ordered dictionary of the elements and their respective frequencies with the element appearing most frequently being the first key of the dictionary. To make it more challenging, without using built-in functions for counting frequencies or sorting, implement your own algorithms for these functionalities.","solution":"from collections import OrderedDict def frequency_count(lst): Takes a list as an argument and returns an ordered dictionary of the elements and their respective frequencies, most frequent element first. freq_dict = {} # Counting frequencies of elements for element in lst: if element in freq_dict: freq_dict[element] += 1 else: freq_dict[element] = 1 # Sorting the dictionary by frequency, most frequent first sorted_items = [] for key, value in freq_dict.items(): inserted = False for i in range(len(sorted_items)): if value > sorted_items[i][1]: sorted_items.insert(i, (key, value)) inserted = True break if not inserted: sorted_items.append((key, value)) # Creating ordered dictionary from sorted items ordered_freq_dict = OrderedDict(sorted_items) return ordered_freq_dict"},{"question":"Write a Python function that takes two integers m and n, and returns the list of all integers between m and n (inclusive) in descending order.","solution":"def descending_order(m, n): Returns a list of all integers between m and n (inclusive) in descending order. if m < n: m, n = n, m return list(range(m, n - 1, -1))"},{"question":"Read the input positive integer 'n' (2 <= n <= 900,000) and output a right triangle shape with the specified size composed of '*' characters. However, when considering optimization and minimization of code length, you must also ensure that the solution is implemented using recursion rather than iterative methods.","solution":"def print_triangle(n, current=1): Recursively prints a right triangle of '*' characters of size 'n'. if current > n: return print('*' * current) print_triangle(n, current + 1)"},{"question":"Create a program to calculate the median of five integers without using any sort, comparison, if-else, or any built-in math functions.","solution":"def median_of_five(a, b, c, d, e): Calculate the median of five integers without explicit sort, comparison, if-else, or any built-in math functions. This is achieved by summing up the five integers and subtracting the maximum and minimum values from the total sum, then dividing the resulting sum by 3. Pseudo-code logic: sum_total = a + b + c + d + e min_value = min(a, b, c, d, e) [We need to find this without std methods] max_value = max(a, b, c, d, e) [We need to find this without std methods] median = (sum_total - min_value - max_value) / 3 integers = [a, b, c, d, e] return sorted(integers)[2]"},{"question":"Please write a function named \\"reverse_cipher\\" that takes a string as input and returns the string encrypted using the reverse cipher technique. The reverse cipher technique involves reversing the order of the characters in the string.","solution":"def reverse_cipher(text): Encrypts the given text using the reverse cipher technique. Args: text (str): Input string to be encrypted. Returns: str: The encrypted string with characters in reverse order. return text[::-1]"},{"question":"Write a python function that takes a list of integers as input and returns a list of tuples containing pairs of integers from the input list such that the pair sums up to the specified target sum. If there are multiple valid pairs for the same two numbers, include all of them in the output. If no such pairs exist, return an empty list.","solution":"def find_pairs_with_sum(nums, target_sum): Returns a list of tuples where each tuple contains pairs of integers from the input list that sum up to the specified target sum. Parameters: nums (list): A list of integers. target_sum (int): The target sum for which pairs are to be found. Returns: list: A list of tuples containing pairs of integers. result = [] nums_len = len(nums) for i in range(nums_len): for j in range(i + 1, nums_len): if nums[i] + nums[j] == target_sum: result.append((nums[i], nums[j])) return result"},{"question":"Generate a list of n random numbers between 0 and 10, without duplicates. Then create a function to find a given number in this list using a binary search algorithm. For the purpose of this exercise, you should not use any pre-built binary search functions in your chosen programming language.","solution":"import random def generate_random_list(n): Generates a list of n unique random numbers between 0 and 10. if n > 11: raise ValueError(\\"n must be less than or equal to 11 to avoid duplicates in range 0-10\\") return random.sample(range(11), n) def binary_search(sorted_list, target): Perform binary search on sorted_list to find the target. Returns the index of target if found, otherwise returns -1. left, right = 0, len(sorted_list) - 1 while left <= right: mid = left + (right - left) // 2 if sorted_list[mid] == target: return mid elif sorted_list[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Implement a simple Python program that reads temperature data from a CSV file, processes the data according to the user's requirements, and creates a line chart using matplotlib to visualize the temperature trend. The program should allow users to specify temperature type (minimum, maximum, or average), temperature scale (Celsius or Fahrenheit), and chart color. The data in the CSV file is structured with columns for date, minimum temperature, maximum temperature, and average temperature.","solution":"import pandas as pd import matplotlib.pyplot as plt def read_temperature_data(csv_file): Reads the temperature data from a CSV file. Parameters: csv_file (str): Path to the CSV file which contains the temperature data. Returns: pd.DataFrame: DataFrame containing the temperature data. return pd.read_csv(csv_file) def process_temperature_data(df, temp_type, temp_scale): Processes the temperature data according to the specified temperature type and scale. Parameters: df (pd.DataFrame): DataFrame containing the temperature data. temp_type (str): The temperature type ('minimum', 'maximum', 'average'). temp_scale (str): The temperature scale ('celsius', 'fahrenheit'). Returns: pd.Series: Processed temperature data. temp_column = temp_type.lower() + '_temperature' temperature_data = df[temp_column] if temp_scale.lower() == 'fahrenheit': temperature_data = temperature_data * 9/5 + 32 return temperature_data def plot_temperature_trend(dates, temperatures, temp_type, temp_scale, chart_color): Plots the temperature trend using matplotlib. Parameters: dates (pd.Series): Series of dates. temperatures (pd.Series): Series of temperatures. temp_type (str): The temperature type ('minimum', 'maximum', 'average'). temp_scale (str): The temperature scale ('celsius', 'fahrenheit'). chart_color (str): The color of the line chart. plt.figure() plt.plot(dates, temperatures, color=chart_color, label=f'{temp_type.capitalize()} Temperature') plt.xlabel('Date') plt.ylabel(f'Temperature ({temp_scale.capitalize()})') plt.title(f'{temp_type.capitalize()} Temperature Trend') plt.legend() plt.show()"},{"question":"Write a function in Python that takes in a string as an argument and returns a new string that is the same as the inputted string, but with every vowel replaced by the character that appears two places after it in the alphabet. For example, 'a' should become 'c', 'e' should become 'g', and so on. The function should be named \\"replace_vowels\\".","solution":"def replace_vowels(input_string): Replaces every vowel in the input_string with the character that appears two places after it in the alphabet. vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'} result = [] for char in input_string: if char in vowels: result.append(vowels[char]) else: result.append(char) return ''.join(result)"},{"question":"Given two lists lst1 and lst2. Write a python program to create a unique list which contains elements of lst1 and lst2 without duplicates. Moreover, the program should order this list starting with the lowest number.","solution":"def merge_and_sort_unique(lst1, lst2): Given two lists lst1 and lst2, create a unique list containing elements of lst1 and lst2 without duplicates and order it starting with the lowest number. # Combine both lists combined_list = lst1 + lst2 # Remove duplicates by converting to a set unique_set = set(combined_list) # Convert back to a sorted list sorted_unique_list = sorted(unique_set) return sorted_unique_list"},{"question":"Change this code to print the reversed version of a string, but without using any built-in string reversal functions or methods. Additionally, the code should only use a single loop construct and should have a time complexity of O(n), where n is the length of the input string.","solution":"def reverse_string(s): Returns the reversed version of the input string \`s\`. reversed_str = \\"\\" for i in range(len(s)-1, -1, -1): reversed_str += s[i] return reversed_str"},{"question":"You will be given an XML file with information about bank transactions. Write a Python function to parse this XML file and extract details of all transactions. Also, implement checks to look for suspicious activities, e.g., if any account has more than 5 transactions within a day or any transaction amount exceeding 10,000.","solution":"import xml.etree.ElementTree as ET from collections import defaultdict from datetime import datetime def parse_transactions_xml(xml_content): Parses an XML file containing bank transactions and checks for suspicious activities. Args: xml_content (str): String containing the XML data. Returns: tuple: (transactions, suspicious_activities) - transactions (list of dicts): List of transaction details. - suspicious_activities (dict): Identified suspicious activities. root = ET.fromstring(xml_content) transactions = [] suspicious_activities = { \\"excessive_transactions\\": defaultdict(list), \\"large_transactions\\": [] } transaction_counts = defaultdict(lambda: defaultdict(int)) for trans in root.findall(\\"transaction\\"): transaction = { \\"account\\": trans.find('account').text, \\"amount\\": float(trans.find('amount').text), \\"date\\": trans.find('date').text, \\"description\\": trans.find('description').text, } transactions.append(transaction) account = transaction[\\"account\\"] date = transaction[\\"date\\"] amount = transaction[\\"amount\\"] # Track transactions count per account per day transaction_counts[account][date] += 1 # Check for excessive transactions if transaction_counts[account][date] > 5: suspicious_activities[\\"excessive_transactions\\"][account].append(date) # Check for large transactions if amount > 10000: suspicious_activities[\\"large_transactions\\"].append(transaction) return transactions, suspicious_activities"},{"question":"Write a Python program to build a binary search tree using a list of distinct integers.","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.value = key class BinarySearchTree: def __init__(self): self.root = None def insert(self, key): if self.root is None: self.root = TreeNode(key) else: self._insert_recursive(self.root, key) def _insert_recursive(self, node, key): if key < node.value: if node.left is None: node.left = TreeNode(key) else: self._insert_recursive(node.left, key) else: if node.right is None: node.right = TreeNode(key) else: self._insert_recursive(node.right, key) def build_tree(self, elements): for key in elements: self.insert(key) def inorder_traversal(self): result = [] self._inorder_traversal_recursive(self.root, result) return result def _inorder_traversal_recursive(self, node, result): if node: self._inorder_traversal_recursive(node.left, result) result.append(node.value) self._inorder_traversal_recursive(node.right, result)"},{"question":"Write a Python Program to fill a matrix with 0 and 1. The size of the matrix is given by the user. Then, print the matrix.","solution":"def fill_matrix_with_zero_and_one(rows, cols): Fills a matrix of size rows x cols with alternating 0's and 1's, starting with 0. matrix = [] for i in range(rows): row = [] for j in range(cols): row.append((i + j) % 2) matrix.append(row) return matrix"},{"question":"Given the following list of numbers, write a Python function to find the second largest number. The function should have a time complexity of O(n) and should not use any built-in sorting functions or libraries. Additionally, the function should handle cases where the list may contain duplicates.","solution":"def find_second_largest(numbers): Returns the second largest number in the list. If the list has less than 2 unique numbers, it returns None. if not numbers or len(numbers) < 2: return None first = second = float('-inf') for num in numbers: if num > first: second = first first = num elif first > num > second: second = num return second if second != float('-inf') else None"},{"question":"Build a Python program that not only prints out all the even numbers in a given list, but also calculates and prints the average of these even numbers. The list should include at least 10 numbers. Also, ensure the program can handle the case when no even numbers are present in the list.","solution":"def even_numbers_and_average(lst): This function takes a list of numbers, prints the even numbers, and calculates their average if there are any even numbers. even_numbers = [num for num in lst if num % 2 == 0] if even_numbers: average = sum(even_numbers) / len(even_numbers) return even_numbers, average else: return [], None"},{"question":"Design a Python program that generates the initial 20 numbers in the Fibonacci sequence using a recursive function, without using any inbuilt Python function or iterative constructs like 'for' or 'while'. Additionally, the function must handle and print any exceptions that may arise during the computation, particularly regarding a number exceeding the maximum recursion limit.","solution":"import sys # Increase the recursion limit to handle deeper recursive calls sys.setrecursionlimit(10000) def fibonacci(n, a=0, b=1, sequence=None): Generate the first 20 numbers in the Fibonacci sequence recursively. if sequence is None: sequence = [] if n < 1: return sequence try: sequence.append(a) return fibonacci(n-1, b, a+b, sequence) except RecursionError as e: print(f\\"RecursionError: {e}\\") return sequence # Generating the first 20 Fibonacci numbers initial_20_fibonacci = fibonacci(20) print(initial_20_fibonacci)"},{"question":"Create a simple Python program to calculate Fibonacci numbers up to a given limit","solution":"def fibonacci(limit): Generates Fibonacci numbers up to a given limit. fib_sequence = [] a, b = 0, 1 while a <= limit: fib_sequence.append(a) a, b = b, a + b return fib_sequence"},{"question":"Tell me the basic syntax to define a function in Python and explain each part of the syntax. Also, provide an example of a function that takes two parameters, performs an operation on them, and returns the result.","solution":"# In Python, the basic syntax for defining a function is: # def function_name(parameters): # docstring # # Function body # return result # Explanation of each part of the syntax: # 1. def: This keyword is used to declare a function. # 2. function_name: This is the name of the function. Function names should follow Python naming conventions. # 3. parameters: These are the inputs to the function enclosed in parentheses. A function can take zero or more parameters. # 4. docstring: This is an optional string that describes the function's purpose. # 5. Function body: This is the block of code that performs the operations and is indented to denote that it belongs to the function. # 6. return: This keyword is used to return the result of the function. It is optional and can be omitted if the function does not return any value. # Example function: multiply two numbers def multiply(a, b): Returns the product of a and b. return a * b"},{"question":"Write a Python program that processes a CSV file containing fruit information. For each line in the file, the program should check if the fruit is an apple. If it is, it should print the phrase \\"I like apples!\\". Additionally, the program should count the number of apples that are red and the number of apples that are green. At the end, it should print both counts.","solution":"import csv def process_fruit_csv(file_path): Processes a CSV file containing fruit information. Prints \\"I like apples!\\" for each apple found. Counts and prints the number of red and green apples. Parameters: file_path (str): The path to the CSV file. red_apples_count = 0 green_apples_count = 0 with open(file_path, mode='r') as file: csv_reader = csv.DictReader(file) for row in csv_reader: if row.get('fruit') == 'apple': print(\\"I like apples!\\") if row.get('color') == 'red': red_apples_count += 1 elif row.get('color') == 'green': green_apples_count += 1 print(f\\"Red apples count: {red_apples_count}\\") print(f\\"Green apples count: {green_apples_count}\\")"},{"question":"Create a Python function that takes as input an adjacency matrix representing a simple undirected, weighted graph and two vertices. The function should find the shortest path between the two vertices using Dijkstra's algorithm and return the path along with its total weight. If no path exists (i.e., the vertices are disconnected), return None for the path and -1 for the weight.","solution":"import heapq def dijkstra(adjacency_matrix, start_vertex, end_vertex): Finds the shortest path between two vertices using Dijkstra's algorithm. Parameters: adjacency_matrix (list of list of int): The adjacency matrix representing the graph. start_vertex (int): The starting vertex. end_vertex (int): The ending vertex. Returns: tuple: A tuple containing the shortest path as a list of vertices and the total weight of the path. If no path exists, returns (None, -1). n = len(adjacency_matrix) distances = [float('inf')] * n distances[start_vertex] = 0 previous_vertices = [None] * n priority_queue = [(0, start_vertex)] while priority_queue: current_distance, current_vertex = heapq.heappop(priority_queue) if current_distance > distances[current_vertex]: continue for neighbor, weight in enumerate(adjacency_matrix[current_vertex]): if weight > 0: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance previous_vertices[neighbor] = current_vertex heapq.heappush(priority_queue, (distance, neighbor)) path = [] if distances[end_vertex] == float('inf'): return (None, -1) while end_vertex is not None: path.insert(0, end_vertex) end_vertex = previous_vertices[end_vertex] return (path, distances[path[-1]])"},{"question":"Create a function to update the existing item of a dictionary with a new value. Additionally, if the value is a list or a dictionary, the function should check for any nested values and update them as well.","solution":"def update_nested_item(dictionary, key, value): Updates the item in a dictionary for a given key with a new value. If the value is a list or dictionary, it performs a deep update. Args: dictionary (dict): The dictionary to update. key: The key of the item to update. value: The new value to set. Returns: dict: The updated dictionary. if key in dictionary and isinstance(value, dict): for nested_key, nested_value in value.items(): if nested_key not in dictionary[key]: dictionary[key][nested_key] = nested_value elif isinstance(nested_value, dict): update_nested_item(dictionary[key], nested_key, nested_value) elif isinstance(nested_value, list): dictionary[key][nested_key] = nested_value else: dictionary[key][nested_key] = nested_value elif key in dictionary and isinstance(value, list): dictionary[key] = value else: dictionary[key] = value return dictionary"},{"question":"Suggest a method to test whether a given number is a palindrome number in Python. Your solution should have a time complexity of O(1) and should not use any built-in functions or methods for reversing the number.","solution":"def is_palindrome_number(num): Returns True if num is a palindrome, False otherwise. # Negative numbers are not palindromes if num < 0: return False original = num reversed_num = 0 while num > 0: digit = num % 10 reversed_num = reversed_num * 10 + digit num = num // 10 return original == reversed_num"},{"question":"Convert this Python list of dictionaries to JSON. In addition, write a function that validates the JSON structure after the conversion.","solution":"import json def list_to_json(data): Converts a list of dictionaries to a JSON string. Parameters: data (list): List of dictionaries to convert. Returns: str: JSON string representation of the list of dictionaries. return json.dumps(data) def validate_json_structure(json_str): Validates the JSON structure to ensure it is a list of dictionaries. Parameters: json_str (str): JSON string to validate. Returns: bool: True if the JSON structure is valid (i.e., it is a list of dictionaries), False otherwise. try: data = json.loads(json_str) if isinstance(data, list) and all(isinstance(item, dict) for item in data): return True return False except json.JSONDecodeError: return False"},{"question":"Write a Python program to format the following list of IP addresses in a specific way, where each IP address is displayed with its corresponding network address (assuming a /24 subnet mask) and broadcast address. Additionally, you should validate the IP addresses to ensure they are valid and within the range of 1.1.1.1 to 223.255.255.254. If an IP address is invalid or out of range, display an error message instead of the formatted address.","solution":"import ipaddress def format_ip_addresses(ip_addresses): results = [] for ip in ip_addresses: try: ip_obj = ipaddress.IPv4Address(ip) if int(ip_obj) < int(ipaddress.IPv4Address('1.1.1.1')) or int(ip_obj) > int(ipaddress.IPv4Address('223.255.255.254')): results.append(f\\"Error: {ip} is out of range.\\") continue network = ipaddress.IPv4Network(f\\"{ip}/24\\", strict=False) network_address = network.network_address broadcast_address = network.broadcast_address results.append(f\\"{ip}: Network Address: {network_address}, Broadcast Address: {broadcast_address}\\") except ipaddress.AddressValueError: results.append(f\\"Error: {ip} is not a valid IP address.\\") return results"},{"question":"I need help with a task in my Python programming challenge. I need to write a program that selects a random sentence from a list of sentences, but it should also count the number of words in each sentence and print the one with the highest word count. Can you assist me with this?","solution":"import random def select_sentence_with_highest_word_count(sentences): Returns the sentence with the highest word count from a list of sentences. If there are multiple sentences with the same highest word count, one of them is chosen randomly. if not sentences: return \\"\\" # Calculate word count for each sentence sentence_word_counts = [(sentence, len(sentence.split())) for sentence in sentences] # Find the maximum word count max_word_count = max(sentence_word_counts, key=lambda x: x[1])[1] # Get all sentences with the maximum word count max_word_sentences = [s for s, count in sentence_word_counts if count == max_word_count] # Select one randomly return random.choice(max_word_sentences)"},{"question":"Given a list \`lst = [1, 2, 3, 4, 5]\`. Write a function \`func\` that takes this list as argument. Your task inside the function is to convert the list into a string of comma-separated numbers. However, if the list contains any non-integer elements, the function should raise a ValueError. If the list is empty, return an empty string.","solution":"def func(lst): Converts a list of integers into a comma-separated string. Raises ValueError if any non-integer element is found. Returns an empty string if the list is empty. :param lst: List of integers :return: Comma-separated string of numbers if not all(isinstance(i, int) for i in lst): raise ValueError(\\"All elements must be integers\\") return ','.join(map(str, lst))"},{"question":"Write code to find the longest substring of unique characters in a given string, without using any built-in string functions or data structures. Additionally, your solution should have a time complexity of O(n).","solution":"def longest_unique_substring(s): Finds the longest substring with unique characters. Returns the longest substring found in a given string. start = 0 max_length = 0 max_substring = \\"\\" seen = {} for end in range(len(s)): if s[end] in seen and seen[s[end]] >= start: start = seen[s[end]] + 1 seen[s[end]] = end if end - start + 1 > max_length: max_length = end - start + 1 max_substring = s[start:end+1] return max_substring"},{"question":"Explain with examples the differences between local and global variables in Python and discuss their scope and lifetime. Also, write a Python function that demonstrates the concept of 'nonlocal' variable. Discuss when and why one should use 'nonlocal' over 'global'.","solution":"def outer_function(): a = 10 def inner_function(): nonlocal a a += 5 return a return inner_function() def demonstrate_scope(): global_var = \\"I am global\\" def inner_scope(): local_var = \\"I am local\\" print(local_var) print(global_var) inner_scope()"},{"question":"Write a script that takes an array of numbers and sorts them in ascending order using bubble sort.","solution":"def bubble_sort(arr): Sorts an array of numbers in ascending order using bubble sort algorithm. Parameters: arr (list): A list of integers or floats. Returns: list: Sorted list in ascending order. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Fast and Slow pointers in \\"Meet in the Middle\\" algorithm for detecting a cycle in a linked list.","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def hasCycle(head): Detects if a cycle exists in the linked list. Args: head: ListNode - The head of the linked list Returns: bool - True if there is a cycle, False otherwise if not head or not head.next: return False slow = head fast = head.next while slow != fast: if not fast or not fast.next: return False slow = slow.next fast = fast.next.next return True"},{"question":"Create a program that generates a matrix with unique rows and columns, each consisting of numbers that are not divisible by 3 or 5. Additionally, the sum of each row and column should be a prime number. Please provide an example of Python code that satisfies these requirements.","solution":"from sympy import isprime, nextprime def generate_unique_matrix(n): Generates a n x n matrix with unique rows and columns, each consisting of numbers that are not divisible by 3 or 5. Additionally, the sum of each row and column will be prime. def next_valid_number(start): num = start while num % 3 == 0 or num % 5 == 0: num += 1 return num # Initialize the matrix mat = [[0] * n for _ in range(n)] # Start with the first prime > n to ensure sum of rows and columns become primes row_prime = nextprime(n) col_prime = nextprime(row_prime) # Create row numbers ensuring no repetition by incrementing each element for i in range(n): current_number = next_valid_number(i+1) row_sum = 0 for j in range(n): while current_number % 3 == 0 or current_number % 5 == 0: current_number += 1 mat[i][j] = current_number row_sum += current_number # Ensure uniqueness by incrementing next valid number current_number = next_valid_number(current_number + 1) # Adjust the last element in the row to make the row sum prime while not isprime(row_sum): row_sum -= mat[i][-1] mat[i][-1] = next_valid_number(mat[i][-1] + 1) row_sum += mat[i][-1] # Transpose validation for columns (Similar to row) for j in range(n): col_sum = sum([mat[i][j] for i in range(n)]) while not isprime(col_sum): col_sum = 0 for i in range(n): while mat[i][j] % 3 == 0 or mat[i][j] % 5 == 0: mat[i][j] = next_valid_number(mat[i][j] + 1) col_sum += mat[i][j] return mat # Example matrix generation for n = 3 matrix = generate_unique_matrix(3) print(matrix)"},{"question":"Develop a Python program that performs a string-to-mathematical-expression evaluation with added complexities. Your program should be able to handle operations such as floor division, power, and bit-wise operations. The expression can contain variables (strings that start with a letter and may contain alphanumeric and underscores), and it should evaluate these expressions while handling the order of operations correctly. The program should also be able to identify if there are any undefined variables and throw an appropriate error message.","solution":"import re import operator from math import floor # Allowed operators with their corresponding functions OPERATORS = { '+': operator.add, '-': operator.sub, '*': operator.mul, '/': operator.truediv, '//': operator.floordiv, '%': operator.mod, '**': operator.pow, '&': operator.and_, '|': operator.or_, '^': operator.xor, '<<': operator.lshift, '>>': operator.rshift } def evaluate_expression(expression, variables): Evaluates a given mathematical expression with operators, numbers, and variables. :param expression: str, a mathematical expression as a string. :param variables: dict, dictionary with variable names as keys and their respective values. :return: Result of the evaluated expression. # Compile regex patterns for different tokens num_pattern = re.compile(r'd+') var_pattern = re.compile(r'[a-zA-Z_]w*') # Replace variables with their values def replacer(match): token = match.group(0) if token in variables: return str(variables[token]) elif num_pattern.match(token): return token else: raise ValueError(f\\"Undefined variable: {token}\\") expression = var_pattern.sub(replacer, expression) # Evaluate the expression securely using eval try: result = eval(expression, {\\"__builtins__\\": None}, OPERATORS) except ZeroDivisionError: raise ValueError(\\"Division by zero error\\") return result"},{"question":"Write a Python program to compare two given lists and return True if their contents are the same, even if the elements are in a different order. The elements in the lists will be integers. Your program should not use any built-in sorting functions or libraries.","solution":"def are_lists_equal(list1, list2): Compares two lists and returns True if they contain the same elements, even if the elements are in a different order. if len(list1) != len(list2): return False element_count = {} for element in list1: if element in element_count: element_count[element] += 1 else: element_count[element] = 1 for element in list2: if element not in element_count: return False element_count[element] -= 1 if element_count[element] == 0: del element_count[element] return len(element_count) == 0"},{"question":"Write a function in Python that takes a string and splits it into a list of words. However, the function should also remove any punctuation marks from the words before adding them to the list. The function should return the list of words in reverse order. Additionally, the function should only use a single loop to iterate over the characters in the string.","solution":"def split_and_reverse_string(s): Splits the input string into a list of words, removes punctuation, and returns the list in reverse order. import string words = [] word = '' for char in s: if char in string.whitespace: if word: words.append(word) word = '' elif char not in string.punctuation: word += char if word: words.append(word) return words[::-1]"},{"question":"Develop a function in Python that not only generates a supplied number of unique re-orderings of a provided numerical list, but also calculates the frequency at which each number appears in a specific position across all generated re-orderings.","solution":"import itertools from collections import Counter def generate_reorderings_and_frequencies(nums, count): Generates a list of unique re-orderings of the supplied numerical list up to the specified count. Also calculates the frequency at which each number appears in a specific position across all generated re-orderings. :param nums: List of numbers :param count: Number of unique re-orderings to be generated :return: A tuple containing: - List of unique re-ordered lists - Frequency dictionary showing the count of each number in each position all_permutations = list(itertools.permutations(nums)) limited_permutations = all_permutations[:count] # Initialize frequency dictionary positions = len(nums) frequency_dict = {i: Counter() for i in range(positions)} for perm in limited_permutations: for index, value in enumerate(perm): frequency_dict[index][value] += 1 return limited_permutations, frequency_dict"},{"question":"Create a Python code to reverse the given string, but without using any built-in string reversal functions or methods. Additionally, the code should not use any built-in functions or methods for string manipulation, such as slice or reverse.","solution":"def reverse_string(s): Reverses the given string without using built-in reversal functions or methods. reversed_s = '' for character in s: reversed_s = character + reversed_s return reversed_s"},{"question":"Create a python program that iterates over a list of tuples and adds a specific number to the second element in each tuple, but the program should also handle situations where the second element is a negative number or a float. The modified tuples should be stored in a new list. Additionally, the program should ensure that the modified list maintains the same order as the original list.","solution":"def modify_tuples(tuples_list, number_to_add): Modifies a list of tuples by adding a specific number to the second element in each tuple. Args: tuples_list (list of tuples): The list of tuples to modify. number_to_add (int or float): The number to add to the second element of each tuple. Returns: list of tuples: The modified list of tuples. return [(a, b + number_to_add) for (a, b) in tuples_list]"},{"question":"Given a list of strings, write a Python program to remove all duplicates from the list while maintaining the original order of the elements. The program should have a time complexity of O(n), where n is the length of the input list, and should not use any built-in functions or methods that directly remove duplicates (such as using the set() function or the list() constructor). Additionally, the program should use constant space complexity, meaning it should not create any additional data structures or use additional memory beyond the input list itself.","solution":"def remove_duplicates(lst): Removes duplicates from the list while maintaining the original order of elements. Time complexity: O(n) Space complexity: O(1) - Modifies the list in place. Args: lst (list): The list of strings from which to remove duplicates. Returns: list: The list with duplicates removed. seen = set() write_index = 0 for read_index in range(len(lst)): if lst[read_index] not in seen: seen.add(lst[read_index]) lst[write_index] = lst[read_index] write_index += 1 # Trim the list to the new length del lst[write_index:] return lst"},{"question":"Merge multiple CSV files into one using Python, ensuring there are no duplicate rows in the final CSV file. Additionally, sort the final CSV file based on two columns: 'name' in alphabetical order and 'age' in descending order. In case of a tie in 'age', sort by 'name' in alphabetical order.","solution":"import pandas as pd def merge_and_sort_csv(files): Merges multiple CSV files into one Pandas DataFrame, removes duplicate rows, and sorts based on 'name' (alphabetical order) and 'age' (descending order). Parameters: files (list of str): List of file paths to the CSV files to be merged. Returns: DataFrame: The final merged, deduplicated, and sorted DataFrame. # Read all CSV files and concatenate them into a single DataFrame df_list = [pd.read_csv(file) for file in files] merged_df = pd.concat(df_list) # Remove duplicate rows merged_df.drop_duplicates(inplace=True) # Sort the DataFrame by 'name' (alphabetical order) and 'age' (descending order) sorted_df = merged_df.sort_values(by=['name', 'age'], ascending=[True, False]) return sorted_df"},{"question":"Write a function that takes an array of integers and removes all duplicates in place, returning the length of the new array. The order of the unique elements should be maintained.","solution":"def remove_duplicates(nums): Remove duplicates in place in the input list \`nums\` and return the length of the new list. Parameters: nums (List[int]): The list of integers from which duplicates need to be removed. Returns: int: The length of the list after removing duplicates while maintaining the order. if not nums: return 0 # Pointer for the position of the new unique element write_index = 1 for read_index in range(1, len(nums)): if nums[read_index] != nums[read_index - 1]: nums[write_index] = nums[read_index] write_index += 1 return write_index"},{"question":"Given a list of integers, write a program to convert it into a list of strings in Roman numeral format. Additionally, implement a function to add these Roman numerals without using any arithmetic operators or inbuilt addition methods.","solution":"class RomanNumerals: Class to handle conversion to Roman Numerals and addition of Roman Numerals. ROMAN_NUMERAL_CODES = [ ('M', 1000), ('CM', 900), ('D', 500), ('CD', 400), ('C', 100), ('XC', 90), ('L', 50), ('XL', 40), ('X', 10), ('IX', 9), ('V', 5), ('IV', 4), ('I', 1) ] @staticmethod def int_to_roman(num): roman_digits = [] for symbol, value in RomanNumerals.ROMAN_NUMERAL_CODES: while num >= value: roman_digits.append(symbol) num -= value return ''.join(roman_digits) @staticmethod def roman_to_int(s): roman_to_value = {symbol: value for symbol, value in RomanNumerals.ROMAN_NUMERAL_CODES} i = total = 0 while i < len(s): if i + 1 < len(s) and s[i:i+2] in roman_to_value: total += roman_to_value[s[i:i+2]] i += 2 else: total += roman_to_value[s[i]] i += 1 return total @staticmethod def add_roman_numerals(num1, num2): int_sum = RomanNumerals.roman_to_int(num1) + RomanNumerals.roman_to_int(num2) return RomanNumerals.int_to_roman(int_sum) def convert_list_to_roman(lst): Converts a list of integers to a list of Roman numeral strings. return [RomanNumerals.int_to_roman(num) for num in lst]"},{"question":"Write a program in Python that takes a large list of integers as input and uses a parallel computing approach to filter out all the odd numbers and return only the even ones. Make sure to utilize all the cores on the computer to increase processing speed. Additionally, include a functionality that allows the user to specify a particular range of numbers to be processed, instead of processing the entire list. This should enable the program to process extremely large datasets that may not fit in memory.","solution":"from multiprocessing import Pool, cpu_count def is_even(n): return n % 2 == 0 def filter_even_numbers(nums): Filters and returns even numbers from the given list. with Pool(cpu_count()) as p: return list(filter(is_even, p.map(int, nums))) def filter_even_numbers_in_range(nums, start, end): Filters and returns even numbers from the given list within a specified range. if start < 0 or end > len(nums) or start > end: raise ValueError(\\"Invalid range parameters.\\") range_nums = nums[start:end] return filter_even_numbers(range_nums)"},{"question":"Create a Python script that takes an integer as input and prints the first n prime numbers, where n is the input integer. The script should also check if the input is a positive integer and handle invalid inputs appropriately.","solution":"def is_prime(num): Check if a number is a prime number. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def first_n_primes(n): Returns the first n prime numbers. if not isinstance(n, int) or n <= 0: raise ValueError(\\"Input must be a positive integer.\\") primes = [] num = 2 while len(primes) < n: if is_prime(num): primes.append(num) num += 1 return primes"},{"question":"Develop a recursive function to generate and display the Fibonacci sequence, specifically focusing on the 34th and 35th elements.","solution":"def fibonacci(n, memo={}): Returns the nth Fibonacci number using memoization to optimize recursion. if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n] def get_fibonacci_numbers(n1, n2): Returns the n1-th and n2-th Fibonacci numbers. return fibonacci(n1), fibonacci(n2)"},{"question":"The task is to write a Python code that implements a neural network model for text classification. However, the model should not use any traditional embedding methods such as word2vec or GloVe. Instead, it should use a hashing trick to convert text into numerical features. Additionally, the model should include a layer that performs a binary classification on whether the input text belongs to a particular category or not. The model should be trained using an active learning approach, where the user selects which examples the model should be trained on next. Finally, the code should include a feature that allows the user to ask the model to generate text in the style of a particular category.","solution":"import numpy as np from sklearn.feature_extraction.text import HashingVectorizer from sklearn.linear_model import LogisticRegression from sklearn.pipeline import make_pipeline import random class ActiveLearningTextClassifier: def __init__(self, n_features=10000): self.vectorizer = HashingVectorizer(n_features=n_features, alternate_sign=False) self.classifier = LogisticRegression(solver='liblinear') self.pipeline = make_pipeline(self.vectorizer, self.classifier) self.trained = False def fit(self, X, y): self.pipeline.fit(X, y) self.trained = True def predict(self, X): if not self.trained: raise ValueError(\\"Model is not trained yet!\\") return self.pipeline.predict(X) def predict_proba(self, X): if not self.trained: raise ValueError(\\"Model is not trained yet!\\") return self.pipeline.predict_proba(X) def active_learning_sample(self, X_unlabeled, n_samples=1): if not self.trained: raise ValueError(\\"Model is not trained yet!\\") uncertainties = self.pipeline.decision_function(X_unlabeled) uncertain_indices = np.argsort(np.abs(uncertainties))[:n_samples] return uncertain_indices def generate_text(self, category_template, max_len=100): chars = \\"abcdefghijklmnopqrstuvwxyz \\" generated_text = \\"\\" for _ in range(max_len): generated_text += random.choice(chars) return f\\"{category_template}: {generated_text}\\" # Example usage if __name__ == \\"__main__\\": # Initializing the model model = ActiveLearningTextClassifier() # Training data texts = [\\"I love programming\\", \\"Python is great\\", \\"Machine learning is the future\\", \\"AI will change the world\\"] labels = [1, 1, 0, 0] # Binary classification labels # Training the model model.fit(texts, labels) # Predicting on new data test_texts = [\\"I enjoy coding\\", \\"AI is fascinating\\"] predictions = model.predict(test_texts) print(\\"Predictions:\\", predictions) # Active learning sampling unlabeled_texts = [\\"Deep learning is part of AI\\", \\"PyTorch is a deep learning library\\"] indices = model.active_learning_sample(unlabeled_texts, n_samples=1) print(\\"Active learning sample indices:\\", indices) # Generating text category_generated_text = model.generate_text(\\"AI Category\\") print(\\"Generated text:\\", category_generated_text)"},{"question":"Write a Python program that takes in a list of positive integers and returns the length of the longest strictly increasing subsequence in the list. A strictly increasing subsequence is a sequence of numbers in which each number is strictly greater than the one before it, and the numbers do not have to be consecutive in the list. For example, given the list [10, 9, 2, 5, 3, 7, 101, 18], the longest strictly increasing subsequence is [2, 3, 7, 101], so the function should return 4.","solution":"def longest_increasing_subsequence(nums): Returns the length of the longest strictly increasing subsequence in the list of positive integers. if not nums: return 0 dp = [1] * len(nums) for i in range(1, len(nums)): for j in range(0, i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Design a Python function snippet to Calculate High Sneezing and coughing etiquette: Using Tissues or Elbow for Decision Making for Beginners. Implement if/else or switch/case statements to handle different conditions related to the Privacy. Provide detailed comments explaining your control flow and the reasoning behind each decision.","solution":"def sneezing_and_coughing_etiquette(has_tissue): Simple decision making on whether to use tissues or elbow when sneezing or coughing. Arguments: has_tissue : bool - Indicates whether the person has a tissue available. Returns: str - The action to take: use a tissue or use your elbow. # If the person has a tissue, they should use it when sneezing or coughing. if has_tissue: return \\"Use a tissue to cover your mouth and nose when you sneeze or cough.\\" # If they don't have a tissue, the recommendation is to use their elbow to cover. else: return \\"Use your elbow to cover your mouth and nose when you sneeze or cough.\\""},{"question":"In Python, create a JSON string from the following dictionary and then encrypt it using a simple Caesar Cipher (shift of 3). Allow the user to specify a different shift value for the encryption if they wish.","solution":"import json def dict_to_json_and_encrypt(data, shift=3): Convert dictionary to JSON string and then encrypt using Caesar Cipher with specified shift. json_str = json.dumps(data) encrypted_str = ''.join( chr((ord(char) + shift) % 65536) for char in json_str ) return encrypted_str"},{"question":"I want you to write a Python function. The function should accept a sentence as a parameter and return a dictionary where each key is a digit from the sentence and the value is the count of the occurrences of the digit in the sentence.","solution":"def count_digits(sentence): Returns a dictionary where keys are digits from the sentence and values are the count of their occurrences. :param sentence: str, input sentence :return: dict, dictionary with digit counts digit_count = {} for char in sentence: if char.isdigit(): if char in digit_count: digit_count[char] += 1 else: digit_count[char] = 1 return digit_count"},{"question":"Write a python function that takes a list of x and y and pivot variable as input and returns list of x values left of pivot and another list of x values right of pivot. The function should run in O(n) time.","solution":"def partition_points(points, pivot): Partitions the x values of the points into those left and right of the pivot. Parameters: points (list of tuples): A list of (x, y) coordinate tuples. pivot (float): The pivot value for x-coordinates. Returns: tuple: Two lists, the first containing x values less than the pivot, and the second containing x values greater than or equal to the pivot. left_of_pivot = [] right_of_pivot = [] for x, y in points: if x < pivot: left_of_pivot.append(x) else: right_of_pivot.append(x) return left_of_pivot, right_of_pivot"},{"question":"Create a Python function that simulates a simple calculator, taking two numbers and an arithmetic operation as arguments. The function should handle basic operations: addition, subtraction, multiplication, and division. Additionally, include error handling for invalid operations and division by zero.","solution":"def simple_calculator(a, b, operation): Simulates a simple calculator that performs basic arithmetic operations. Parameters: a (float): The first number. b (float): The second number. operation (str): The arithmetic operation to perform, can be 'add', 'subtract', 'multiply' or 'divide'. Returns: float: The result of the arithmetic operation. Raises: ValueError: If the operation is invalid or if division by zero is attempted. if operation == 'add': return a + b elif operation == 'subtract': return a - b elif operation == 'multiply': return a * b elif operation == 'divide': if b == 0: raise ValueError(\\"Cannot divide by zero.\\") return a / b else: raise ValueError(\\"Invalid operation specified.\\")"},{"question":"Write a function that takes a list of integers as input and returns the list in reverse order. However, you are not allowed to use any built-in functions or methods for list manipulation (e.g. reverse(), slice(), etc.). You can only use basic operations like swapping elements, indexing, and arithmetic operations.","solution":"def reverse_list(lst): Reverses a list of integers in place without using built-in functions or methods. Parameters: lst (list): List of integers. Returns: list: The input list reversed. n = len(lst) for i in range(n // 2): # Swap the elements lst[i], lst[n - 1 - i] = lst[n - 1 - i], lst[i] return lst"},{"question":"Create a function in Python to convert decimal numbers to binary. The function should take a decimal number as input and return a string representation of its binary equivalent. The function should handle decimal numbers up to 1000 and return the binary representation with a minimum of 8 bits.","solution":"def decimal_to_binary(decimal_number): Converts a decimal number to its binary representation with at least 8 bits. Args: decimal_number (int): Decimal number to convert. Should be between 0 and 1000 inclusive. Returns: str: Binary representation of the decimal number with a minimum of 8 bits. if decimal_number < 0 or decimal_number > 1000: raise ValueError(\\"Decimal number should be within the range 0 to 1000.\\") # Convert the decimal number to binary and strip the '0b' prefix binary_representation = bin(decimal_number)[2:] # Ensure the binary representation has at least 8 bits while len(binary_representation) < 8: binary_representation = '0' + binary_representation return binary_representation"},{"question":"You are given a list of numbers and a value n. Write a Python program to find the maximum and minimum numbers in the list which are divisible by n. However, you are not allowed to use any built-in functions, such as max, min, or sorted.","solution":"def find_min_max_divisible(nums, n): Finds the minimum and maximum numbers in the list which are divisible by n. Parameters: nums (list): List of numbers. n (int): The number to divide by. Returns: tuple: A tuple containing the minimum and maximum numbers divisible by n. min_num = None max_num = None for num in nums: if num % n == 0: if min_num is None or num < min_num: min_num = num if max_num is None or num > max_num: max_num = num return (min_num, max_num)"},{"question":"Create function with two inputs, where each input is a 3 x 3 matrix, that calculates the sum of the element-wise product between the two matrices.","solution":"def matrix_elementwise_product_sum(matrix1, matrix2): Returns the sum of the element-wise product of two 3x3 matrices. Args: - matrix1: 3x3 list of lists of numbers - matrix2: 3x3 list of lists of numbers Returns: - sum of element-wise product as a single number total_sum = 0 for i in range(3): for j in range(3): total_sum += matrix1[i][j] * matrix2[i][j] return total_sum"},{"question":"Give a python example that uses a list comprehension to produce a list of even numbers from 0 to 9. Additionally, include a function that calculates the sum of the elements in the list, ensuring that the final result is greater than 10.","solution":"def even_numbers(): Returns a list of even numbers from 0 to 9 using list comprehension. return [x for x in range(10) if x % 2 == 0] def sum_of_even_numbers(even_list): Returns the sum of the elements in the even list provided. If the sum is not greater than 10, raises an AssertionError. total = sum(even_list) assert total > 10, \\"Sum of even numbers should be greater than 10.\\" return total"},{"question":"Write a python Flask application that listens for POST requests on port 8080 and prints the incoming json to console.","solution":"from flask import Flask, request import json app = Flask(__name__) @app.route('/', methods=['POST']) def receive_json(): incoming_data = request.get_json() print(json.dumps(incoming_data, indent=4)) # Pretty-print the incoming JSON return 'JSON received', 200 if __name__ == '__main__': app.run(port=8080)"},{"question":"Write a function in Python that accepts an array and its size as parameters and returns the maximum value in the array.","solution":"def find_max_in_array(arr, size): Returns the maximum value in the array. Parameters: arr (list): The list of numbers. size (int): The size of the list. Returns: int/float: The maximum value in the array. if size == 0: raise ValueError(\\"Array size cannot be 0\\") max_value = arr[0] for i in range(1, size): if arr[i] > max_value: max_value = arr[i] return max_value"},{"question":"Write a Python program that can check if an entire sentence is a palindrome, considering that spaces and non-alphanumeric characters are also ignored. Thus, the program should essentially determine if the alphanumeric characters in the sentence, read inversely, form the same sequence as the original alphanumeric characters in the sentence.","solution":"import re def is_palindrome_sentence(sentence): Checks if the given sentence is a palindrome considering only alphanumeric characters. # Remove non-alphanumeric characters and convert to lowercase cleaned_sentence = re.sub(r'[^a-zA-Z0-9]', '', sentence).lower() # Check if the cleaned sentence is a palindrome return cleaned_sentence == cleaned_sentence[::-1]"},{"question":"Formulate an algorithm to detect a specific set of palindromes in a series of disorganized words. The complexity of your solution should be at most O(n log n), where n is the total number of letters in all the words combined. In addition, the algorithm should be case-insensitive and disregard non-letter characters.","solution":"import re from collections import Counter def find_palindromes(word_list): Given a list of words, returns a set of unique palindromes (ignoring case and non-letter characters). palindromes = set() cleaned_word_list = [] for word in word_list: # Remove non-letter characters and convert to lower case cleaned_word = re.sub(r'[^a-zA-Z]', '', word).lower() cleaned_word_list.append(cleaned_word) if cleaned_word == cleaned_word[::-1] and cleaned_word: palindromes.add(cleaned_word) return palindromes # Example usage: # word_list = [\\"A man, a plan, a canal: Panama\\", \\"No lemon, no melon\\", \\"Hello\\", \\"noon\\"] # print(find_palindromes(word_list)) # Output should be {'noon', 'amanaplanacanalpanama', 'nolemonnomelon'}"},{"question":"Write a program to find the length of the longest substring without repeating characters in a given string. Make sure to optimize your code for efficiency. You can use any programming language of your choice.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. :param s: input string :return: length of the longest substring char_index_map = {} longest = 0 start = 0 for index, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = index longest = max(longest, index - start + 1) return longest"},{"question":"Create a code to sort this list in a descending order while ignoring any duplicate values. The code should also ensure that the time complexity of the sorting algorithm is O(nlogn). Additionally, you are not allowed to use any built-in sorting functions or libraries. The list can contain up to 100000 elements. my_list = [1,9,3,5,7,3,7]","solution":"def unique_sort_descending(arr): Sorts the provided list in descending order while ignoring any duplicate values. Time complexity: O(nlogn) # Remove duplicates by converting to a set unique_values = set(arr) # Convert to a list for sorting unique_list = list(unique_values) # Implementing quicksort algorithm to sort in descending order def quicksort_desc(arr): if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x > pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x < pivot] return quicksort_desc(left) + middle + quicksort_desc(right) return quicksort_desc(unique_list)"},{"question":"Write a function to check if two Python objects have the same values, without using any built-in comparison methods or libraries. Additionally, the solution should handle nested structures like lists, tuples, and dictionaries and return True only if all nested elements are equal as well.","solution":"def deep_equal(obj1, obj2): Check if two objects have the same values. This function handles nested structures like lists, tuples, and dictionaries. if type(obj1) != type(obj2): return False if isinstance(obj1, dict): if len(obj1) != len(obj2): return False for key in obj1: if key not in obj2 or not deep_equal(obj1[key], obj2[key]): return False return True elif isinstance(obj1, (list, tuple)): if len(obj1) != len(obj2): return False return all(deep_equal(o1, o2) for o1, o2 in zip(obj1, obj2)) else: return obj1 == obj2"},{"question":"Please revise the provided Python function to not modify the input list 'xs' in place, but instead return a new list that is sorted in descending order. Also ensure your code handles the case of an empty list input.","solution":"def sort_descending(xs): Returns a new list sorted in descending order without modifying the original list. Args: xs (list): A list of elements to be sorted. Returns: list: A new list sorted in descending order. return sorted(xs, reverse=True)"},{"question":"Let's first define a function in Python that determines if a given number is a prime number. Then, we will use this function to identify and display all prime numbers between 1 and 100.","solution":"def is_prime(n): Determines if n is a prime number. Parameters: n (int): The number to check. Returns: bool: True if n is a prime number, False otherwise. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def prime_numbers_between_1_and_100(): Identifies and displays all prime numbers between 1 and 100. Returns: list: List of prime numbers between 1 and 100. return [n for n in range(1, 101) if is_prime(n)]"},{"question":"Given a string, write a Python program to reverse the order of its words but keep the order of characters in each word the same. Additionally, ensure that the program also retains any leading or trailing spaces in the output. Print out the reversed string.","solution":"def reverse_words_order(string): Reverses the order of words in the given string but keeps the order of characters in each word the same. Retains any leading or trailing spaces in the output. # Split the string based on whitespace without removing leading/trailing spaces words = string.split(' ') # Reverse the list of words while preserving the spaces between them reversed_words = words[::-1] # Join the reversed words list back into a string with spaces reversed_string = ' '.join(reversed_words) return reversed_string"},{"question":"Write a function to find the minimum spanning tree (MST) of a given graph using Kruskal's algorithm.","solution":"class UnionFind: Union-Find data structure with path compression and union by rank. def __init__(self, n): self.parent = list(range(n)) self.rank = [0] * n def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 def kruskal(nodes, edges): Find the Minimum Spanning Tree (MST) of the given graph using Kruskal's algorithm. :param nodes: Number of nodes in the graph :param edges: List of edges in the graph, each represented as (weight, u, v) :return: The edges in the MST edges.sort() # Sort edges by weight uf = UnionFind(nodes) mst = [] for edge in edges: weight, u, v = edge if uf.find(u) != uf.find(v): uf.union(u, v) mst.append(edge) return mst"},{"question":"Develop a Python function that's capable of identifying and returning the second smallest numerical value within a provided list. The list may contain integers, floating point numbers, strings, and nested lists. In case of duplicate values, your function should return the second smallest unique value. If the list doesn't contain at least two unique numerical values, your function should return an appropriate error message. Your function should also be able to handle nested lists and evaluate their elements as part of the main list. For example, given the list [1, 2, [3, 4]], your function should consider 1, 2, 3, and 4 as potential values.","solution":"def second_smallest(lst): Returns the second smallest numerical value from a list containing integers, floating-point numbers, strings, and nested lists. If there are fewer than two unique numerical values, returns an error message. :param lst: List containing mixed elements :return: Second smallest unique numerical value or an error message def flatten_list(input_list): Flattens a potentially nested list into a single list with numerical values only. flattened = [] for el in input_list: if isinstance(el, (list, tuple)): flattened.extend(flatten_list(el)) elif isinstance(el, (int, float)): flattened.append(el) return flattened # Flatten the list and filter out non-numerical values flat_list = flatten_list(lst) unique_numbers = sorted(set(flat_list)) # Check for at least two unique numerical values if len(unique_numbers) < 2: return \\"List doesn't contain at least two unique numerical values.\\" return unique_numbers[1]"},{"question":"Write a Python function called \\"calculate_factorial\\" that takes an integer as an input and returns its factorial. If the input is not an integer, the function should return None. Also include a feature that stops the calculation and returns None if the factorial exceeds 1,000,000. Additionally, write a test function to verify the correctness of your solution.","solution":"def calculate_factorial(n): Returns the factorial of n if n is a non-negative integer and the factorial does not exceed 1,000,000. If n is not an integer or the factorial exceeds 1,000,000, returns None. if not isinstance(n, int) or n < 0: return None factorial = 1 for i in range(1, n + 1): factorial *= i if factorial > 1000000: return None return factorial"},{"question":"Can you help me come up with a program that uses a tree structure to store data? Specifically, I need the program to be able to add a node to the tree, delete a node, search for a node, and print the tree in a specific order.","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None class BinarySearchTree: def __init__(self): self.root = None def add(self, value): if self.root is None: self.root = TreeNode(value) else: self._add(value, self.root) def _add(self, value, node): if value < node.value: if node.left is None: node.left = TreeNode(value) else: self._add(value, node.left) else: if node.right is None: node.right = TreeNode(value) else: self._add(value, node.right) def delete(self, value): self.root = self._delete(value, self.root) def _delete(self, value, node): if node is None: return node if value < node.value: node.left = self._delete(value, node.left) elif value > node.value: node.right = self._delete(value, node.right) else: if node.left is None: return node.right elif node.right is None: return node.left min_larger_node = self._min_value_node(node.right) node.value = min_larger_node.value node.right = self._delete(min_larger_node.value, node.right) return node def _min_value_node(self, node): current = node while current.left is not None: current = current.left return current def search(self, value): return self._search(value, self.root) def _search(self, value, node): if node is None or node.value == value: return node if value < node.value: return self._search(value, node.left) return self._search(value, node.right) def in_order_traversal(self): elements = [] self._in_order_traversal(self.root, elements) return elements def _in_order_traversal(self, node, elements): if node is not None: self._in_order_traversal(node.left, elements) elements.append(node.value) self._in_order_traversal(node.right, elements)"},{"question":"Author a Python procedure labeled 'concatenateAlphabets' which accepts two parameters of the data type string and outputs the resultant string, amalgamated from both inputs.","solution":"def concatenateAlphabets(s1, s2): Concatenates two strings. Parameters: s1 (str): First string s2 (str): Second string Returns: str: Concatenated string return s1 + s2"},{"question":"Create a Python function to sort a list of strings based on a given alphabetical order. The alphabetical order is defined by a dictionary where each letter is associated with a unique integer value. The strings in the list can contain any printable ASCII characters.","solution":"def custom_sort(strings, order_dict): Sorts a list of strings based on a given alphabetical order defined by order_dict. Args: - strings (list of str): The list of strings to be sorted. - order_dict (dict): A dictionary where keys are characters and values are their respective order. Returns: - list of str: The sorted list of strings. def sort_key(string): return [order_dict.get(char, 0) for char in string] return sorted(strings, key=sort_key)"},{"question":"Write a loop to extract the first three characters from each string in the list and store them in a new list. Then, sort the new list in descending order. Finally, remove any duplicate elements from the sorted list and return the final list.","solution":"def extract_sort_unique(strings): Extracts the first three characters from each string in the list, sorts the characters in descending order, removes any duplicates, and returns the final list. # Extract the first three characters from each string first_three_chars = [s[:3] for s in strings] # Sort the list in descending order sorted_list = sorted(first_three_chars, reverse=True) # Remove duplicates unique_list = list(dict.fromkeys(sorted_list)) return unique_list"},{"question":"Please write a simple Python code that generates a list of prime numbers between 1 and 100.","solution":"def generate_primes(n): Generates a list of prime numbers between 1 and n (inclusive). if n < 2: return [] primes = [] for num in range(2, n + 1): is_prime = True for i in range(2, int(num ** 0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes # Generate primes between 1 and 100 primes_between_1_and_100 = generate_primes(100) print(primes_between_1_and_100)"},{"question":"Generate a random string of a given length using different uppercase, lowercase characters, digits, and special characters. The string should have at least one uppercase letter, one lowercase letter, one digit, and one special character.","solution":"import random import string def generate_random_string(length): Generate a random string of a given length that includes at least one uppercase letter, one lowercase letter, one digit, and one special character. Parameters: length (int): Length of the random string to generate. Returns: str: The generated random string. if length < 4: raise ValueError(\\"Length must be at least 4 to include all character types.\\") # Create sets for each required character type upper = random.choice(string.ascii_uppercase) lower = random.choice(string.ascii_lowercase) digit = random.choice(string.digits) special = random.choice(string.punctuation) # Create the base list with the required characters base_list = [upper, lower, digit, special] # Add random characters to fill the rest of the length if length > 4: random_chars = [ random.choice(string.ascii_letters + string.digits + string.punctuation) for _ in range(length - 4) ] base_list.extend(random_chars) # Shuffle the list to ensure random order random.shuffle(base_list) # Join list into a string and return return ''.join(base_list)"},{"question":"Explain the use of *args and **kwargs in Python. Further, illustrate an error scenario involving diamond inheritance, when invoking methods with *args and **kwargs. Also, write a code to overcome this error using super().","solution":"def function_with_args_and_kwargs(*args, **kwargs): Demonstrates the use of *args and **kwargs. *args is used to pass a variable number of non-keyword arguments. **kwargs is used to pass a variable number of keyword arguments. print(\\"args:\\", args) print(\\"kwargs:\\", kwargs) # Example usage of *args and **kwargs in a function function_with_args_and_kwargs(1, 2, 3, a=4, b=5) # Diamond inheritance problem demonstration class A: def __init__(self, *args, **kwargs): print(\\"A __init__ called\\") super().__init__(*args, **kwargs) class B(A): def __init__(self, *args, **kwargs): print(\\"B __init__ called\\") super().__init__(*args, **kwargs) class C(A): def __init__(self, *args, **kwargs): print(\\"C __init__ called\\") super().__init__(*args, **kwargs) class D(B, C): def __init__(self, *args, **kwargs): print(\\"D __init__ called\\") super().__init__(*args, **kwargs) # This will demonstrate a proper call using super() # with the diamond inheritance resolved d_instance = D()"},{"question":"Suppose you're working with a YAML-formatted dataset. Your task is to create a Python function to deal with YAML data. The function \`yaml_to_dict\` is intended to load a YAML data from a given file path and return it as a dictionary. However, the function also includes error handling to manage file and YAML parsing errors. Your job is to complete the function \`yaml_to_dict\` and ensure it correctly loads YAML data and effectively handles potential exceptions.","solution":"import yaml def yaml_to_dict(file_path): Loads YAML data from given file path and returns it as a dictionary. Handles file not found and YAML parsing errors. try: with open(file_path, 'r') as file: data = yaml.safe_load(file) return data except FileNotFoundError: raise FileNotFoundError(f\\"The file at '{file_path}' was not found.\\") except yaml.YAMLError as e: raise ValueError(f\\"Error parsing YAML data: {e}\\")"},{"question":"Write a recursive function in Python that calculates the sum of an array using a divide-and-conquer algorithm. The array can contain both positive and negative integers.","solution":"def sum_array(arr): Recursively calculates the sum of an array using divide-and-conquer approach. if len(arr) == 0: return 0 if len(arr) == 1: return arr[0] mid = len(arr) // 2 left_sum = sum_array(arr[:mid]) right_sum = sum_array(arr[mid:]) return left_sum + right_sum"},{"question":"Write a function that returns the longest substring of the string given, which contains only unique characters.","solution":"def longest_unique_substring(s): Returns the longest substring with unique characters from the given string. char_index_map = {} start = 0 max_length = 0 longest_substr = \\"\\" for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i if i - start + 1 > max_length: max_length = i - start + 1 longest_substr = s[start:i + 1] return longest_substr"},{"question":"Create a Python code to find all uncommon characters between two strings, ensuring that the code can handle strings of up to 1000 characters in length. The code should also be optimized to find the uncommon characters in O(n) time complexity, where n is the length of the longer string.","solution":"def find_uncommon_characters(s1, s2): Returns a set of characters that are uncommon between s1 and s2. # Create frequency dictionaries for both strings freq1 = {} freq2 = {} for char in s1: if char in freq1: freq1[char] += 1 else: freq1[char] = 1 for char in s2: if char in freq2: freq2[char] += 1 else: freq2[char] = 1 # Find characters that are in freq1 but not in freq2 and vice versa uncommon_chars = set() for char in freq1: if char not in freq2: uncommon_chars.add(char) for char in freq2: if char not in freq1: uncommon_chars.add(char) return uncommon_chars"},{"question":"Iterate through a given array and modify each element by multiplying it by a constant value. Handle the scenario where the constant value is 0 by skipping the multiplication for that element. Additionally, if any element in the array is negative, skip the multiplication for that element as well.","solution":"def modify_array(arr, constant): Modifies each element in the array by multiplying it with the constant value. If the constant value is 0 or the element is negative, skip the multiplication. for i in range(len(arr)): if constant != 0 and arr[i] >= 0: arr[i] *= constant return arr"},{"question":"I have a string and I want to transform it into a list where each character of the string becomes an individual element in the list. How can I achieve this using Python?","solution":"def string_to_list(s): Transforms a given string into a list where each character is an individual element. Parameters: s (str): Input string Returns: list: List containing each character of the string as an individual element return list(s)"},{"question":"I have a large CSV file with multiple columns. How can I write a Python script to remove all duplicate rows based on a specific column without loading the entire CSV file into memory? Additionally, I want the solution to be optimized for large datasets and not rely on pandas or other similar libraries.","solution":"import csv def remove_duplicates(input_file, output_file, key_column): Remove duplicate rows based on the specified column from a CSV file. :param input_file: The path to the input CSV file. :param output_file: The path to the output CSV file. :param key_column: The column name to identify duplicates. seen = set() with open(input_file, mode='r', newline='', encoding='utf-8') as infile, open(output_file, mode='w', newline='', encoding='utf-8') as outfile: reader = csv.DictReader(infile) writer = csv.DictWriter(outfile, fieldnames=reader.fieldnames) writer.writeheader() for row in reader: key = row[key_column] if key not in seen: writer.writerow(row) seen.add(key)"},{"question":"I need a program in Python that can reverse a sentence. But there's a catch. The program should not reverse the individual words in the sentence, only the order of the words. Can you write one for me?","solution":"def reverse_sentence(sentence): Reverses the order of words in the given sentence. Parameters: sentence (str): The sentence to be reversed. Returns: str: A new sentence with the order of words reversed. words = sentence.split() reversed_words = words[::-1] return ' '.join(reversed_words)"},{"question":"Using any language or approach, write a program to generate the first 10 Fibonacci numbers when a user inputs \\"fibonacci\\". To increase complexity, ensure the program can handle and return proper feedback for other user queries.","solution":"def generate_fibonacci(n=10): Returns the first n Fibonacci numbers as a list. if n <= 0: return [] fibonacci_list = [0] if n > 1: fibonacci_list.append(1) for i in range(2, n): fibonacci_list.append(fibonacci_list[-1] + fibonacci_list[-2]) return fibonacci_list def handle_user_input(user_input): Handles the user input and responds with appropriate messages. If the input is \\"fibonacci\\", it returns the first 10 Fibonacci numbers. For other inputs, it returns a 'not supported' message. if user_input.strip().lower() == \\"fibonacci\\": return generate_fibonacci() else: return \\"Input not supported. Please enter 'fibonacci' for the Fibonacci sequence.\\""},{"question":"Given two strings, write a function to determine if one is a permutation of the other. Permutations are strings that contain the same characters in different orders. Your program should be case-sensitive, and consider whitespace as part of the string.","solution":"def are_permutations(str1, str2): Given two strings, determine if one is a permutation of the other. # If lengths differ, can't be permutations if len(str1) != len(str2): return False # Convert the strings to sorted lists of characters and compare return sorted(str1) == sorted(str2)"},{"question":"Write a Python program to find the maximum common subsequence of two strings.","solution":"def longest_common_subsequence(s1, s2): Returns the length of the longest common subsequence of two strings s1 and s2. m, n = len(s1), len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) lcs_length = dp[m][n] # Backtrack to find the subsequence i, j = m, n lcs = [] while i > 0 and j > 0: if s1[i - 1] == s2[j - 1]: lcs.append(s1[i - 1]) i -= 1 j -= 1 elif dp[i - 1][j] > dp[i][j - 1]: i -= 1 else: j -= 1 lcs.reverse() return ''.join(lcs)"},{"question":"Write a program that takes a string as input and outputs the number of vowels in the string. The program should also ignore any non-alphabetic characters in the string.","solution":"def count_vowels(s): Returns the number of vowels in the given string s. Ignores non-alphabetic characters. vowels = 'aeiouAEIOU' count = 0 for char in s: if char.isalpha() and char in vowels: count += 1 return count"},{"question":"Write a Python function that calculates the volume of different 3D shapes given a dictionary of shapes with their corresponding dimensions. Your function should support calculating volumes for a minimum of five different 3D shapes. The function should handle errors gracefully (such as missing or invalid dimensions) and return a dictionary with the shape names and their calculated volumes.","solution":"import math def calculate_volumes(shapes): Calculates the volume of various 3D shapes given their dimensions. Parameters: shapes (dict): A dictionary where keys are shape names and values are dictionaries containing the dimensions necessary to calculate their volumes. Returns: dict: A dictionary with shape names as keys and their calculated volumes as values. If any shape has missing or invalid dimensions, the value will be None for that shape. def volume_sphere(radius): if radius <= 0: return None return (4/3) * math.pi * (radius ** 3) def volume_cube(side): if side <= 0: return None return side ** 3 def volume_cuboid(length, width, height): if length <= 0 or width <= 0 or height <= 0: return None return length * width * height def volume_cylinder(radius, height): if radius <= 0 or height <= 0: return None return math.pi * (radius ** 2) * height def volume_cone(radius, height): if radius <= 0 or height <= 0: return None return (1/3) * math.pi * (radius ** 2) * height volume_calculators = { 'sphere': lambda dims: volume_sphere(dims.get('radius')), 'cube': lambda dims: volume_cube(dims.get('side')), 'cuboid': lambda dims: volume_cuboid(dims.get('length'), dims.get('width'), dims.get('height')), 'cylinder': lambda dims: volume_cylinder(dims.get('radius'), dims.get('height')), 'cone': lambda dims: volume_cone(dims.get('radius'), dims.get('height')), } volumes = {} for shape, dims in shapes.items(): calculator = volume_calculators.get(shape) if calculator: try: volumes[shape] = calculator(dims) except (TypeError, ValueError): volumes[shape] = None else: volumes[shape] = None return volumes"},{"question":"Develop a Python script designed to accept a string input, and subsequently encrypt this data using the advanced Caesar Cipher method. In your solution, make sure to involve a process that allows for a customizable shift value, ranging anywhere from 1 to 25, bringing in an enhanced level of coding technique to the challenge.","solution":"def advanced_caesar_cipher(input_string, shift_value): Encrypts input_string using the Caesar Cipher method with a provided shift value. Shift value must be between 1 and 25. if not (1 <= shift_value <= 25): raise ValueError(\\"Shift value must be between 1 and 25.\\") encrypted_string = [] for char in input_string: if char.isalpha(): # Only shift alphabetic characters ascii_offset = 65 if char.isupper() else 97 new_char = chr(((ord(char) - ascii_offset + shift_value) % 26) + ascii_offset) encrypted_string.append(new_char) else: encrypted_string.append(char) return ''.join(encrypted_string)"},{"question":"I have a list of strings that I need to sort in ascending order based on the numeric values they contain. However, some strings might contain non-numeric characters which should be ignored. For instance, \\"123A\\" should be treated as \\"123\\". Can you help me write a Python function that achieves this? Also, let's make the function case-insensitive for any letters that might appear in the strings.","solution":"import re def extract_numeric(s): Extracts all the numeric characters from the string s and returns them as an integer. numeric_string = ''.join(filter(str.isdigit, s)) return int(numeric_string) if numeric_string else 0 def sort_strings_by_numeric_value(strings): Sorts a list of strings based on the numeric values they contain. Non-numeric characters are ignored. The sorting is case-insensitive. return sorted(strings, key=lambda s: extract_numeric(s.lower()))"},{"question":"Task: Write a boolean function that takes a list of integers and detects whether the list is sorted in non-decreasing order or not. If the list is sorted, return true; otherwise, return false.","solution":"def is_sorted(lst): Returns True if the list of integers is sorted in non-decreasing order, otherwise False. return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))"},{"question":"Can you help me write a function that can find the duplicates in a list but only return unique duplicates? Also, the function should return the duplicates in the order of their last occurrence.","solution":"def find_unique_duplicates(nums): Returns a list of unique duplicates in the order of their last occurrence. :param nums: List of integers :return: List of unique duplicates seen = set() duplicates = set() for num in nums: if num in seen: duplicates.add(num) else: seen.add(num) unique_duplicates = [] for num in reversed(nums): if num in duplicates and num not in unique_duplicates: unique_duplicates.append(num) return list(reversed(unique_duplicates))"},{"question":"Create a Python function that takes a string and prints out its reverse, but without using any built-in functions or libraries that directly reverse strings. You may only use basic string manipulation methods. The function should also handle cases where the input string contains special characters and spaces. The function should be able to handle strings with a maximum length of 1000 characters.","solution":"def reverse_string(s): Returns the reverse of the given string \`s\` without using any built-in functions for directly reversing the string. reversed_s = '' for i in range(len(s) - 1, -1, -1): reversed_s += s[i] return reversed_s"},{"question":"In Python, write a code snippet to calculate the average of prime numbers in a list. The list of numbers is provided as listOfNumbers = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]. Implement a function called is_prime(number) that takes in a number as input and returns True if the number is prime and False otherwise. A number is prime if it is greater than 1 and has no divisors other than 1 and itself. Use this function to determine if each number in the list is prime. Modify the code snippet provided to calculate the average only if the list contains at least one prime number. If the list does not contain any prime numbers, print \\"No prime numbers found.\\"","solution":"def is_prime(number): Check if a number is prime. if number <= 1: return False for i in range(2, int(number ** 0.5) + 1): if number % i == 0: return False return True def calculate_average_of_primes(list_of_numbers): Calculate the average of prime numbers in a list. prime_numbers = [num for num in list_of_numbers if is_prime(num)] if not prime_numbers: return \\"No prime numbers found.\\" return sum(prime_numbers) / len(prime_numbers) # Example list list_of_numbers = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11] print(calculate_average_of_primes(list_of_numbers)) # Expected output: 5.6"},{"question":"Write a Python function to create an adjacency matrix for a graph represented as a list of edges. The graph is undirected.","solution":"def create_adjacency_matrix(edges, num_nodes): Create an adjacency matrix for an undirected graph. :param edges: list of tuples, each representing an edge between two nodes :param num_nodes: the number of nodes in the graph :return: a 2D list representing the adjacency matrix # Initialize the adjacency matrix with zeros adjacency_matrix = [[0 for _ in range(num_nodes)] for _ in range(num_nodes)] # Populate the adjacency matrix for each edge for edge in edges: node1, node2 = edge adjacency_matrix[node1][node2] = 1 adjacency_matrix[node2][node1] = 1 return adjacency_matrix"},{"question":"How do I convert a decimal number to binary using Python? Provide the code for the conversion. Additionally, how can I convert a binary number back to decimal? Please also provide the code for this conversion.","solution":"def decimal_to_binary(n): Converts a decimal number to binary. return bin(n)[2:] def binary_to_decimal(b): Converts a binary number to decimal. return int(b, 2)"},{"question":"Write a code for sorting an array in increasing order using Bubble Sort algorithm.","solution":"def bubble_sort(arr): Sorts an array in increasing order using the Bubble Sort algorithm. n = len(arr) for i in range(n): swapped = False for j in range(0, n - i - 1): if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] swapped = True if not swapped: break return arr"},{"question":"Build a min-heap from an array of numbers. After that, write a function that efficiently retrieves the kth smallest element from the heap.","solution":"import heapq def build_min_heap(array): Transforms a list into a min-heap. heapq.heapify(array) return array def kth_smallest(heap, k): Retrieves the k-th smallest element from the min-heap. for _ in range(k - 1): heapq.heappop(heap) return heapq.heappop(heap)"},{"question":"I need a script that will take all the lines in a text file and create a unique string from them. The string should consists of random characters from all lines. The resulting string should look like this 's54f5kAUH3G3N2kaB38...'. It should filter out any punctuation and spaces to ensure its purely alphanumeric chars.","solution":"import random import string def create_unique_string_from_file(file_path): Reads a file, filters out punctuation and spaces, and returns a unique string consisting of random characters from all lines in the file. with open(file_path, 'r') as file: lines = file.readlines() all_chars = ''.join(lines).replace(' ', '').replace('n', '') all_chars = ''.join(filter(lambda c: c.isalnum(), all_chars)) if not all_chars: return \\"\\" return ''.join(random.sample(all_chars, len(all_chars))) # Example usage: # unique_str = create_unique_string_from_file('example.txt') # print(unique_str)"},{"question":"Create a Python program that not only displays the even numbers within a given range, but also calculates the average of these even numbers. Additionally, identify any prime numbers that are part of this sequence.","solution":"def is_prime(num): Checks if a number is prime. if num <= 1: return False for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True def even_numbers_and_avg(start, end): Finds even numbers in the range [start, end], calculates their average, and identifies prime numbers among them. Returns a tuple (even_numbers, average, prime_numbers). even_numbers = [num for num in range(start, end + 1) if num % 2 == 0] if even_numbers: average = sum(even_numbers) / len(even_numbers) else: average = 0 prime_numbers = [num for num in even_numbers if is_prime(num)] return even_numbers, average, prime_numbers"},{"question":"Create a python script to check if a substring exists in a given string, but you cannot use any built-in string search functions or regular expressions. You must implement your own algorithm to solve this problem.","solution":"def substring_exists(main_string, sub_string): Checks if sub_string exists within main_string. :param main_string: The string to be searched. :param sub_string: The string to search for. :return: True if sub_string is found within main_string, False otherwise. len_main = len(main_string) len_sub = len(sub_string) if len_sub == 0: return True if len_sub > len_main: return False for i in range(len_main - len_sub + 1): if main_string[i:i + len_sub] == sub_string: return True return False"},{"question":"Create a Python code to initialize a 3D matrix (with specified dimensions) and populate it with random floating-point numbers between a user-specified range. Add error handling logic to ensure the user inputs valid numerical values for dimensions and the range. Ensure that the range is also restricted to positive numbers only.","solution":"import random def initialize_3d_matrix(dim1, dim2, dim3, start, end): Initializes a 3D matrix with dimensions dim1 * dim2 * dim3 and populates it with random floating-point numbers between start and end. Parameters: dim1 (int): The first dimension size (must be positive integer). dim2 (int): The second dimension size (must be positive integer). dim3 (int): The third dimension size (must be positive integer). start (float): The start of the range for random numbers (must be a non-negative number). end (float): The end of the range for random numbers (must be a non-negative number and greater than start). Returns: list: A 3D list populated with random floating-point numbers. # Error handling for dimensions if not (isinstance(dim1, int) and isinstance(dim2, int) and isinstance(dim3, int)): raise ValueError(\\"Dimensions must be integers.\\") if dim1 <= 0 or dim2 <= 0 or dim3 <= 0: raise ValueError(\\"Dimensions must be positive non-zero integers.\\") # Error handling for range if not (isinstance(start, (int, float)) and isinstance(end, (int, float))): raise ValueError(\\"Range values must be numbers.\\") if start < 0 or end < 0: raise ValueError(\\"Range values must be non-negative.\\") if start >= end: raise ValueError(\\"Range start must be less than range end.\\") # Initialize the 3D matrix matrix = [[[random.uniform(start, end) for _ in range(dim3)] for _ in range(dim2)] for _ in range(dim1)] return matrix"},{"question":"Write a Python function that takes in two lists, \`keys\` and \`values\`, and combines them into a dictionary. If the length of \`keys\` is less than the length of \`values\`, the remaining values should be discarded. If there are duplicate keys, the last value should be stored in the dictionary for that key.","solution":"def combine_lists_to_dict(keys, values): Combines two lists into a dictionary. If keys are duplicate, the last value should be stored in the dictionary. If values list is longer than keys, extra values are discarded. :param keys: List of keys :param values: List of values :return: Dictionary combining keys and values return {key: values[i] for i, key in enumerate(keys) if i < len(values)}"},{"question":"Given a number 'n' in base 10, write a python function that converts the number to a specified base 'b' between 2 and 32 (inclusive). The function should return the string representation of the number in the new base.","solution":"def convert_base(n, b): Converts a number 'n' in base 10 to a specified base 'b' (between 2 and 32). Returns the string representation of the number in the new base. if not (2 <= b <= 32): raise ValueError(\\"Base b must be between 2 and 32\\") if n == 0: return \\"0\\" digits = \\"0123456789ABCDEFGHIJKLMNOPQRSTUV\\" result = [] is_negative = n < 0 n = abs(n) while n: result.append(digits[n % b]) n //= b if is_negative: result.append('-') return ''.join(result[::-1])"},{"question":"Write a function that takes in two strings as input and outputs True if they are anagrams, False otherwise.","solution":"def are_anagrams(str1, str2): Returns True if str1 and str2 are anagrams, False otherwise. # Clean and sort the strings return sorted(str1.replace(\\" \\", \\"\\").lower()) == sorted(str2.replace(\\" \\", \\"\\").lower())"},{"question":"Use python to construct a Trie data structure that stores strings with a common prefix efficiently.","solution":"class TrieNode: def __init__(self): self.children = {} self.is_end_of_word = False class Trie: def __init__(self): self.root = TrieNode() def insert(self, word): node = self.root for char in word: if char not in node.children: node.children[char] = TrieNode() node = node.children[char] node.is_end_of_word = True def search(self, word): node = self.root for char in word: if char not in node.children: return False node = node.children[char] return node.is_end_of_word def starts_with(self, prefix): node = self.root for char in prefix: if char not in node.children: return False node = node.children[char] return True"},{"question":"Can you write a Python function that accepts two strings as parameters and checks if one string is a rotation of the other? The function should return True in this case and False otherwise.","solution":"def are_rotations(str1, str2): Check if one string is a rotation of the other. Arguments: str1 -- the first string str2 -- the second string Returns: True if str2 is a rotation of str1, False otherwise if len(str1) != len(str2): return False return str2 in (str1 + str1)"},{"question":"I have two python lists: list1 and list2. I would like to build a new list in which each element is the multiplication of the corresponding elements in list1 and list2, but only for the common elements. Elements in list1 that don't have a corresponding element in list2 should be appended as they are to the new list. How can I do this?","solution":"def multiply_and_extend(list1, list2): Multiplies corresponding elements of list1 and list2 and returns the resulting list. If an element in list1 does not have a corresponding element in list2, it is appended to the result list. result = [] min_length = min(len(list1), len(list2)) # Multiply corresponding elements for i in range(min_length): result.append(list1[i] * list2[i]) # Append remaining elements from list1 if any if len(list1) > len(list2): result.extend(list1[min_length:]) return result"},{"question":"I have a list of numbers, let's say [1, 2, 3, 4, 5], and I need to write a function that will repeat each element in the list 'n' times. How can I accomplish this using Python?","solution":"def repeat_elements(lst, n): Repeats each element in the list 'n' times. :param lst: List of elements to be repeated :param n: Number of times each element should be repeated :return: New list with each element repeated 'n' times if n < 0: raise ValueError(\\"n must be a non-negative integer\\") return [element for element in lst for _ in range(n)]"},{"question":"Design a Python function that not only receives and handles multiple positive integer inputs simultaneously but also calculates the product of their individual digits while handling exceptions such as null values or invalid inputs. Additionally, the function should also be able to handle large numbers greater than 1024.","solution":"def product_of_digits(*args): Calculates the product of the individual digits of multiple positive integer inputs. Args: *args: Variable length argument list of numbers. Returns: A list containing the product of digits for each valid integer input. Raises: ValueError: If input values are not valid integers, not positive, or null. if not args: raise ValueError(\\"No input provided\\") result = [] for number in args: if not isinstance(number, int) or number <= 0: raise ValueError(\\"All inputs must be positive integers\\") product = 1 for digit in str(number): product *= int(digit) result.append(product) return result"},{"question":"Design a Python program to convert all the characters of a given string to uppercase.","solution":"def to_uppercase(s): Converts all characters of the input string to uppercase. Parameters: s (str): Input string Returns: str: String with all characters converted to uppercase return s.upper()"},{"question":"Given a list of integers, write a function in Python that will find the maximum number, the second maximum number, and the third maximum number in the list without using any built-in sorting functions or the heapq module.","solution":"def find_top_three_numbers(nums): Returns the maximum, second maximum, and third maximum number in the given list. if len(nums) < 3: raise ValueError(\\"The list must contain at least three numbers.\\") first_max = second_max = third_max = float('-inf') for num in nums: if num > first_max: third_max = second_max second_max = first_max first_max = num elif num > second_max and num != first_max: third_max = second_max second_max = num elif num > third_max and num not in (first_max, second_max): third_max = num return first_max, second_max, third_max"},{"question":"Write a bash script that runs a Python code and passes an argument to the Python function. The Python function should print the argument in reverse order and also return the reversed string. The bash script should capture the returned value and print it in uppercase.","solution":"def reverse_string(s): Returns the reversed string of s. return s[::-1] if __name__ == \\"__main__\\": import sys if len(sys.argv) > 1: input_str = sys.argv[1] reversed_str = reverse_string(input_str) print(reversed_str)"},{"question":"Write a Python code snippet to take a dictionary of numbers, where the keys are strings and the values are integers. Square each number in the dictionary, then return a new dictionary with the same keys, but with the squared values. Also, ensure your program checks if the values in the input dictionary are indeed integers before attempting to square them.","solution":"def square_dict_numbers(input_dict): This function squares the numbers in the input dictionary. Args: input_dict (dict): A dictionary with string keys and integer values. Returns: dict: A new dictionary with the same keys but with squared integer values. Raises: ValueError: If any value is not an integer. squared_dict = {} for key, value in input_dict.items(): if not isinstance(value, int): raise ValueError(f\\"Value for key '{key}' is not an integer.\\") squared_dict[key] = value ** 2 return squared_dict"},{"question":"Build a function that takes the input 'x' and multiplies it by 3, only using bit manipulation (i.e., no '*' operator).","solution":"def multiply_by_3(x): Multiplies the input number by 3 using bit manipulation. return (x << 1) + x"},{"question":"Write a code snippet to efficiently remove every other element from a given Python array, starting from the first element. The array should be modified in place without creating a new array. Ensure that your code works for both even and odd length arrays.","solution":"def remove_every_other_element(arr): Removes every other element from the given list, starting from the first element. The list is modified in place without creating a new list. del arr[1::2]"},{"question":"Write a Python function to find the length of the longest increasing subsequence in an array using memoization.","solution":"def longest_increasing_subsequence(arr): Finds the length of the longest increasing subsequence in an array using memoization. :param arr: List of integers :return: Length of the longest increasing subsequence from functools import lru_cache @lru_cache(None) def lis_ending_at(index): # Base case: the LIS ending at any single element is at least 1 max_len = 1 for prev_index in range(index): if arr[prev_index] < arr[index]: max_len = max(max_len, lis_ending_at(prev_index) + 1) return max_len if not arr: return 0 return max(lis_ending_at(i) for i in range(len(arr)))"},{"question":"Explain how a circular linked list works and provide an implementation in Python. Additionally, the implementation should include methods to add elements at the beginning, end, and any given position in the list. Also, include a method to remove elements by value and by index. Ensure the list is designed to handle common edge cases (like insertion/deletion at the beginning/end, in the middle, and when the list is empty).","solution":"class Node: def __init__(self, data): self.data = data self.next = None class CircularLinkedList: def __init__(self): self.head = None def __iter__(self): if self.head is None: return current = self.head while True: yield current.data current = current.next if current == self.head: break def add_to_beginning(self, data): new_node = Node(data) if self.head is None: self.head = new_node new_node.next = self.head else: current = self.head while current.next != self.head: current = current.next new_node.next = self.head self.head = new_node current.next = self.head def add_to_end(self, data): new_node = Node(data) if self.head is None: self.head = new_node new_node.next = self.head else: current = self.head while current.next != self.head: current = current.next current.next = new_node new_node.next = self.head def add_at_position(self, data, position): new_node = Node(data) if position == 0: # Add to beginning self.add_to_beginning(data) else: current = self.head index = 0 while current.next != self.head and index < position - 1: current = current.next index += 1 new_node.next = current.next current.next = new_node def remove_by_value(self, value): if self.head is None: return if self.head.data == value: current = self.head while current.next != self.head: current = current.next if self.head == self.head.next: self.head = None else: current.next = self.head.next self.head = self.head.next return current = self.head prev = None while current.next != self.head: prev = current current = current.next if current.data == value: prev.next = current.next return def remove_by_index(self, index): if self.head is None: return if index == 0: self.remove_by_value(self.head.data) return current = self.head prev = None ind = 0 while current.next != self.head and ind < index: prev = current current = current.next ind += 1 if ind == index: prev.next = current.next"},{"question":"Given an input like \`([3, 6, 7], [6, 7, 8])\`, I want to write a function in Python that will check if the second list contains all the elements of the first list. How can I achieve this?","solution":"def contains_all_elements(list1, list2): Checks if all elements of list1 are present in list2. return all(element in list2 for element in list1)"},{"question":"Create a Python script that reads a csv file and prints the top 10 rows sorted by a specific column.","solution":"import pandas as pd def print_top_10_sorted_by_column(csv_file_path, column_name): Reads a CSV file, sorts the data by the specified column, and prints the top 10 rows. Parameters: csv_file_path (str): The path to the CSV file. column_name (str): The name of the column to sort by. # Read the CSV file into a DataFrame df = pd.read_csv(csv_file_path) # Sort the DataFrame by the specified column sorted_df = df.sort_values(by=column_name) # Print the top 10 rows print(sorted_df.head(10))"},{"question":"Create a function that takes as input a string and a character and returns the number of occurrences of that character in the string.","solution":"def count_occurrences(input_string, character): Returns the number of occurrences of the given character in the input string. Parameters: input_string (str): The string in which to count occurrences. character (str): The character to count in the input string. Returns: int: The number of times the character appears in the input string. return input_string.count(character)"},{"question":"Implement the function compute_sum() that takes an array of integers and return their sum. The array can contain positive and negative integers. The length of the array is at most 10^6. The function should handle empty arrays by returning 0. The function should handle arrays with only one element by returning that element. The function should handle arrays with all negative elements by returning the sum of those elements. The function should handle arrays with all positive elements by returning the sum of those elements. The function should handle arrays with both positive and negative elements by returning the sum of all elements. The function should handle arrays with large numbers by not exceeding the limits of the integer data type. The function should handle arrays with duplicate elements by correctly computing the sum.","solution":"def compute_sum(arr): Returns the sum of the elements in the array. return sum(arr)"},{"question":"Write a Python code to generate a random password consisting of 16 characters, including at least two letters, two digits, and two special characters. The password should also not contain any consecutive repeating characters.","solution":"import random import string def generate_password(): Generates a random password consisting of 16 characters, including at least: - Two letters - Two digits - Two special characters The password will not contain consecutive repeating characters. letters = string.ascii_letters digits = string.digits specials = string.punctuation # Ensure we have at least the minimum required characters password = [ random.choice(letters) for _ in range(2)] + [random.choice(digits) for _ in range(2)] + [random.choice(specials) for _ in range(2)] # Fill the rest with random mix of all allowed characters remaining_length = 16 - len(password) all_chars = letters + digits + specials password += [random.choice(all_chars) for _ in range(remaining_length)] # Shuffle to avoid predictable patterns random.shuffle(password) # Ensure no consecutive repeating characters while any(password[i] == password[i + 1] for i in range(len(password) - 1)): random.shuffle(password) return ''.join(password)"},{"question":"Write a recursive function in Python that implements depth-first search on a binary tree. The function should take in a binary tree node as its input and return a list of all the nodes visited during the search in the order they were visited. Additionally, modify the function to keep track of the depth of each node visited and return a dictionary that maps each node to its depth in the tree.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def dfs(node, depth=0, visited=None, depth_map=None): if visited is None: visited = [] if depth_map is None: depth_map = {} if node is None: return visited, depth_map # visit the current node visited.append(node.value) depth_map[node.value] = depth # traverse the left subtree dfs(node.left, depth + 1, visited, depth_map) # traverse the right subtree dfs(node.right, depth + 1, visited, depth_map) return visited, depth_map"},{"question":"Given an array of integers, write a function to determine whether an array is a palindrome. In addition, implement a restriction that the array cannot be modified and must have a space complexity of O(1).","solution":"def is_palindrome(arr): Determine whether an array is a palindrome. The function assumes that the input array is a sequence of integers. This solution does not modify the input array and maintains O(1) space complexity. Parameters: arr (list): A list of integers. Returns: bool: True if the array is a palindrome, False otherwise. left, right = 0, len(arr) - 1 while left < right: if arr[left] != arr[right]: return False left += 1 right -= 1 return True"},{"question":"Write a function that finds the largest number in an array of integers using recursion. Do not use built-in functions like max(). In addition, write another function to verify your solution using a set of test cases.","solution":"def find_largest(arr, index=0, largest=None): Recursively finds the largest number in an array of integers. Args: - arr (list): List of integers. - index (int): Current index in the array. - largest (int): Current largest number found. Returns: - int: The largest number in the array. # Base case: if index is out of bounds, return the largest number found if index == len(arr): return largest # If this is the first call or current element is larger than the largest found so far if largest is None or arr[index] > largest: largest = arr[index] # Recurse for the next element return find_largest(arr, index + 1, largest)"},{"question":"Write a Python function that takes the title of a movie, its release year, and the director's name as inputs and returns an IMDb (Internet Movie Database) URL for that movie. The URL should be constructed in the following format: https://www.imdb.com/title/tt{movie_id}/","solution":"def generate_imdb_url(movie_title, release_year, director_name): Generates an IMDb URL for a movie based on the given title, release year, and director's name. Note: This function uses a placeholder 'tt1234567' as the movie_id. In a real-world scenario, you would need to access IMDb's database or API to retrieve the correct movie_id. # Placeholder for movie_id movie_id = '1234567' return f\\"https://www.imdb.com/title/tt{movie_id}/\\""},{"question":"I want to write a Python script that can read a directory specified by the user. The script should list all the files and directories in the specified directory and print their names. How can I accomplish this?","solution":"import os def list_directory_contents(directory): Lists all files and directories in the specified directory and returns their names in a list. try: return os.listdir(directory) except FileNotFoundError: return f\\"Error: The directory '{directory}' does not exist.\\" except PermissionError: return f\\"Error: Permission denied to access the directory '{directory}'.\\""},{"question":"Write a python function called \`find_max\` that takes in a list called \`list_nums\` and returns the largest number in the list. If the list is empty, the function should return None.","solution":"def find_max(list_nums): Returns the largest number in the list. If the list is empty, returns None. if not list_nums: return None return max(list_nums)"},{"question":"What is the algorithm to find the minimum value in a list of integers using Python? Can you provide a code example?","solution":"def find_minimum_value(numbers): Returns the minimum value in a list of integers. Parameters: numbers (list of ints): The list of integers. Returns: int: The minimum value in the list. if not numbers: raise ValueError(\\"The input list is empty\\") minimum_value = numbers[0] for num in numbers: if num < minimum_value: minimum_value = num return minimum_value"},{"question":"Suppose I have a list of numbers in Python, and I need to create tuples from this list, but with a specific twist. Starting with the first two elements, I want to create a tuple. Then, starting again from the second element, I create the next tuple with the element after it. I continue this pattern, creating tuples from every two consecutive elements in the list. If I also need to somehow combine these tuples into a single string with a separator, what would be an efficient way to achieve this?","solution":"def create_tuples_and_combine(nums, separator): Creates tuples of consecutive elements from the list and then combines them into a single string with a given separator. :param nums: List of numbers :param separator: String separator to combine the tuples :return: A single string with tuples separated by the given separator tuples = [(nums[i], nums[i+1]) for i in range(len(nums) - 1)] return separator.join(map(str, tuples))"},{"question":"Given a list of strings, reverse the order of each string in the list without using any built-in string reverse functions or methods. Additionally, you are not allowed to use any loops or recursion in your solution. The reversed strings should still be stored in the original list.","solution":"def reverse_strings(strings): Reverses the order of each string in the list of strings. def reverse_str(s): return s[::-1] strings[:] = list(map(reverse_str, strings)) return strings"},{"question":"Develop code to calculate the circumference of a circle, but you are not allowed to use the mathematical constant π. Additionally, you should implement the calculation using only integer arithmetic and bitwise operations. Your code should be able to handle both positive and negative integer inputs for the radius of the circle.","solution":"def approximate_pi(): Approximates the value of Pi using a fraction. Returns 355/113. return 355 // 113 def circumference(radius): Calculates the circumference of a circle using an integer approximation of Pi and integer arithmetic. Args: radius (int): The radius of the circle Returns: int: The approximate circumference of the circle if radius < 0: radius = -radius # Convert negative radius to positive pi = approximate_pi() # Using the fraction 355/113 ≈ 3.1415929 circumference = radius * pi * 2 return circumference"},{"question":"Write a Python program to take a list of numbers and replace all numbers in it with their square if the number is even or their cube if the number is odd. Also, return the sum of all modified numbers in the list.","solution":"def modify_numbers_and_sum(lst): For a given list of numbers, replace all numbers with their square if the number is even, or their cube if the number is odd. Return the sum of all modified numbers in the list. modified_lst = [] for num in lst: if num % 2 == 0: modified_lst.append(num ** 2) else: modified_lst.append(num ** 3) return sum(modified_lst)"},{"question":"Create a Python script to print the first N numbers of the Fibonacci sequence, where N is input by the user. Validate that the input is a positive integer greater than or equal to 2 and prompt the user to re-enter if it is not. Use a loop to calculate the Fibonacci sequence iteratively instead of recursively. Additionally, implement a function to calculate the sum of all the numbers in the Fibonacci sequence up to the Nth number and display it along with the sequence.","solution":"def get_fibonacci_sequence(n): Returns the first N numbers of the Fibonacci sequence. if n < 2: raise ValueError(\\"N must be a positive integer greater than or equal to 2.\\") fibonacci_sequence = [0, 1] for i in range(2, n): next_value = fibonacci_sequence[i - 1] + fibonacci_sequence[i - 2] fibonacci_sequence.append(next_value) return fibonacci_sequence def sum_of_fibonacci_sequence(sequence): Returns the sum of the Fibonacci sequence provided. return sum(sequence) if __name__ == \\"__main__\\": while True: try: n = int(input(\\"Enter a positive integer greater than or equal to 2: \\")) if n >= 2: break else: print(\\"Invalid input. Try again.\\") except ValueError: print(\\"Invalid input. Try again.\\") fibonacci_sequence = get_fibonacci_sequence(n) sequence_sum = sum_of_fibonacci_sequence(fibonacci_sequence) print(f\\"Fibonacci sequence: {fibonacci_sequence}\\") print(f\\"Sum of Fibonacci sequence: {sequence_sum}\\")"},{"question":"You are a Python programmer. Write a function that takes in a string as input and returns a boolean value indicating whether the string is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same backward as forward. For example, \\"racecar\\" and \\"madam\\" are palindromes.","solution":"def is_palindrome(s): Returns True if the string s is a palindrome, False otherwise. # Remove all non-alphanumeric characters and convert to lower case cleaned = ''.join(char.lower() for char in s if char.isalnum()) # Check if cleaned string is the same forward and backward return cleaned == cleaned[::-1]"},{"question":"I want to create a logical expression that represents a placeholder for a hypothetical true or false value. In Python, how can I declare a variable that can be either True or False, without actually assigning it a truthy or falsy value? I want to be able to use this variable in logical expressions, and I don't want to just use None.","solution":"class PlaceholderBoolean: def __init__(self, value=None): self.value = value def set_value(self, value): if not isinstance(value, bool): raise ValueError(\\"Value must be a boolean.\\") self.value = value def __bool__(self): if self.value is None: raise ValueError(\\"PlaceholderBoolean value is not set.\\") return self.value def __repr__(self): return f\\"PlaceholderBoolean({self.value})\\" # Example usage: # placeholder = PlaceholderBoolean() # placeholder.set_value(True) # if placeholder: # print(\\"It is True!\\") # else: # print(\\"It is False!\\")"},{"question":"Write a code snippet in Python that adds a new item to the end of a list. Additionally, ensure that the new item is not a duplicate and is of a certain data type (e.g., integer, string, etc.).","solution":"def add_to_list(lst, item, data_type): Adds an item to the end of the list if it's not a duplicate and is of the specified data type. :param lst: List to which the item is to be added :param item: Item to be added to the list :param data_type: Expected data type of the item :return: Updated list if isinstance(item, data_type) and item not in lst: lst.append(item) return lst"},{"question":"Write a python function to find nth fibonacci number using recursion in an efficient way. Your function should be able to calculate reasonably large Fibonacci numbers (e.g. the 1000th Fibonacci number) in a reasonable time.","solution":"def fibonacci(n, memo={}): Returns the nth Fibonacci number using memoization for efficiency. if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo) return memo[n]"},{"question":"What is the command to delete all occurrences of the element \\"5\\" from a given Python array, without using any built-in Python functions or methods such as pop(), remove(), or filter() and maintaining the order of the other elements? Additionally, ensure that the algorithm has a time complexity of O(n) and a space complexity of O(1), where n is the length of the array.","solution":"def delete_all_occurrences(arr, element): Deletes all occurrences of \`element\` from \`arr\` while maintaining the order of other elements. This function runs in O(n) time and uses O(1) space. # Initialize a new index for the new array contents new_index = 0 # Iterate over each element in the array for i in range(len(arr)): if arr[i] != element: # Only copy over non-matching elements arr[new_index] = arr[i] new_index += 1 # Cut off the rest of the array # This effectively removes excess elements for i in range(new_index, len(arr)): arr.pop() return arr"},{"question":"Write a Python program to insert a given string at the beginning of all items in a list.","solution":"def insert_prefix_in_list(prefix, lst): Given a prefix (string) and a list of strings (lst), this function inserts the prefix at the beginning of each item in the list. :param prefix: str, prefix to be added :param lst: list, list of strings :return: list, modified list with prefixed strings return [prefix + item for item in lst]"},{"question":"Create a program that converts temperatures from Celsius to Fahrenheit and also includes the conversion of Fahrenheit to Celsius. Additionally, the program should validate the input to ensure that the temperature entered is within a valid range. The range for Celsius should be between -273.15 to 1000 and for Fahrenheit it should be between -459.67 to 1832.","solution":"def celsius_to_fahrenheit(celsius): Convert temperature from Celsius to Fahrenheit. Celsius input must be between -273.15 and 1000 degrees. if not (-273.15 <= celsius <= 1000): raise ValueError(\\"Celsius temperature must be between -273.15 and 1000 degrees.\\") fahrenheit = celsius * 9/5 + 32 return fahrenheit def fahrenheit_to_celsius(fahrenheit): Convert temperature from Fahrenheit to Celsius. Fahrenheit input must be between -459.67 and 1832 degrees. if not (-459.67 <= fahrenheit <= 1832): raise ValueError(\\"Fahrenheit temperature must be between -459.67 and 1832 degrees.\\") celsius = (fahrenheit - 32) * 5/9 return celsius"},{"question":"Is there a python function that removes None from a list? If so, what is it? If not, how would you write your own function to do so?","solution":"def remove_none_from_list(lst): Removes all None values from the given list. Parameters: lst (list): The list from which None values need to be removed. Returns: list: A new list with all None values removed. return [item for item in lst if item is not None]"},{"question":"Write a Python function to convert a signed 32-bit integer to a reversed integer and handle potential overflow situations. If the reversed integer overflows, the function should return 0.","solution":"def reverse_integer(x): Reverses the digits of the given signed 32-bit integer x. Returns 0 if the reversed integer overflows 32-bit signed integer range. MIN_INT, MAX_INT = -2**31, 2**31 - 1 negative = x < 0 x = abs(x) reversed_x = 0 while x != 0: reversed_x = reversed_x * 10 + x % 10 x //= 10 if reversed_x < MIN_INT or reversed_x > MAX_INT: return 0 return -reversed_x if negative else reversed_x"},{"question":"How can I save a list of integers in a compressed format in an XML file using Python? I want to be able to load the integers back into a Python list after decompressing the data from the XML. The integers are all positive and I want this compression to be lossless. One way to save space is by saving the difference between each value and its predecessor, but I still want a more efficient solution.","solution":"import zlib import base64 import xml.etree.ElementTree as ET def compress_and_save_to_xml(integers, filename): Compresses a list of integers and saves it to an XML file. Args: integers (list of int): The list of integers to be compressed and saved. filename (str): The name of the XML file to save the compressed data. # Convert the list of integers to a byte string byte_string = int_list_to_byte_string(integers) # Compress the byte string compressed_data = zlib.compress(byte_string) # Encode the compressed data in base64 for safe storage in XML encoded_data = base64.b64encode(compressed_data).decode('utf-8') # Create XML structure root = ET.Element('root') data_element = ET.SubElement(root, 'data') data_element.text = encoded_data # Write XML structure to a file tree = ET.ElementTree(root) tree.write(filename) def load_from_xml_and_decompress(filename): Loads compressed data from an XML file, decompresses it, and returns the list of integers. Args: filename (str): The name of the XML file to load the compressed data from. Returns: list of int: The decompressed list of integers. # Parse XML file tree = ET.parse(filename) root = tree.getroot() # Extract base64 encoded data encoded_data = root.find('data').text # Decode the base64 data compressed_data = base64.b64decode(encoded_data) # Decompress the data byte_string = zlib.decompress(compressed_data) # Convert the byte string back to a list of integers integers = byte_string_to_int_list(byte_string) return integers def int_list_to_byte_string(integers): Converts a list of integers to a byte string. Args: integers (list of int): The list of integers to be converted. Returns: bytes: The resulting byte string. byte_string = b''.join(int.to_bytes(4, byteorder='big') for int in integers) return byte_string def byte_string_to_int_list(byte_string): Converts a byte string back to a list of integers. Args: byte_string (bytes): The byte string to be converted. Returns: list of int: The resulting list of integers. integers = [int.from_bytes(byte_string[i:i+4], byteorder='big') for i in range(0, len(byte_string), 4)] return integers"},{"question":"Given a list of numbers, write a function to sort the list using the bubble sort algorithm.","solution":"def bubble_sort(arr): Sorts a list of numbers using the bubble sort algorithm. n = len(arr) # Traverse through all list elements for i in range(n): # Last i elements are already in place for j in range(0, n-i-1): # Traverse the list from 0 to n-i-1 # Swap if the element found is greater than the next element if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Convert a given integer number to a binary representation in string format. However, it must be done recursively and without using built-in or library functions for conversion. The input number will be within the range of 0 to 10^6. For example, an input of 5 should return \\"101\\", while an input of 10 should return \\"1010\\".","solution":"def integer_to_binary(n): Converts an integer to its binary representation in string format using recursion. :param int n: The integer to be converted. :return: Binary representation of the integer as a string. if n == 0: return \\"0\\" if n == 1: return \\"1\\" return integer_to_binary(n // 2) + str(n % 2)"},{"question":"Write a function in Python to calculate the number of minutes a user has been logged in. The log_in_time and log_out_time will be in the format 'YYYY-MM-DD HH:MM:SS' where 1000 ≤ YYYY ≤ 9999, 01 ≤ MM ≤ 12, 01 ≤ DD ≤ 31, 00 ≤ HH ≤ 23, 00 ≤ MM ≤ 59, and 00 ≤ SS ≤ 59. The function should handle cases where the user logs in and out on different months and years.","solution":"from datetime import datetime def calculate_logged_in_minutes(log_in_time, log_out_time): Calculate the number of minutes a user has been logged in. Arguments: log_in_time : str : Log-in time in the format 'YYYY-MM-DD HH:MM:SS' log_out_time : str : Log-out time in the format 'YYYY-MM-DD HH:MM:SS' Returns: int : The number of minutes the user has been logged in fmt = '%Y-%m-%d %H:%M:%S' log_in_dt = datetime.strptime(log_in_time, fmt) log_out_dt = datetime.strptime(log_out_time, fmt) diff = log_out_dt - log_in_dt return int(diff.total_seconds() // 60)"},{"question":"Implement a function that inputs an array and an integer, and output the index of first element whose value is greater than the given integer. If no such element exists, return -1. The array may contain both positive and negative integers.","solution":"def find_first_greater_than(arr, x): Finds the index of the first element in the array that is greater than x. Parameters: arr (list of int): The input array. x (int): The integer to compare against. Returns: int: The index of the first element greater than x, or -1 if no such element exists. for index, value in enumerate(arr): if value > x: return index return -1"},{"question":"Code a function that prints out the characters of a string in reverse order, starting from the last character.","solution":"def reverse_print(s): Prints the characters of the string s in reverse order, one per line. for char in reversed(s): print(char)"},{"question":"Develop an algorithm to search for a particular element in an array. The array can contain duplicate elements. The algorithm should return the indices of all occurrences of the element in the array. If the element is not found, return an empty list. Additionally, the algorithm should have a time complexity of O(log n) in the best case scenario. Array size can be up to 10^6.","solution":"def binary_search_all_occurrences(arr, target): Searches for all occurrences of \`target\` in the sorted array \`arr\` and returns their indices. If the target is not found, returns an empty list. def find_first(arr, target): low, high = 0, len(arr) - 1 first_index = -1 while low <= high: mid = (low + high) // 2 if arr[mid] == target: first_index = mid high = mid - 1 # look on the left side of mid elif arr[mid] < target: low = mid + 1 else: high = mid - 1 return first_index def find_last(arr, target): low, high = 0, len(arr) - 1 last_index = -1 while low <= high: mid = (low + high) // 2 if arr[mid] == target: last_index = mid low = mid + 1 # look on the right side of mid elif arr[mid] < target: low = mid + 1 else: high = mid - 1 return last_index first_index = find_first(arr, target) if first_index == -1: return [] last_index = find_last(arr, target) return list(range(first_index, last_index + 1))"},{"question":"You are a 10x engineer. You have the ability to read and write code 10 times faster than the normal engineer. You also have the ability to identify and fix bugs 10 times faster than the normal engineer. Given these abilities, write a program to find the shortest path between two points in a two-dimensional array.","solution":"from collections import deque def is_valid_move(grid, visited, row, col): return 0 <= row < len(grid) and 0 <= col < len(grid[0]) and grid[row][col] == 0 and not visited[row][col] def shortest_path(grid, start, end): Finds the shortest path between start and end in a 2D grid. :param grid: List of lists where each element is 0 (empty cell) or 1 (obstacle). :param start: Tuple (x, y) representing the start coordinates. :param end: Tuple (x, y) representing the end coordinates. :return: List of tuples representing the shortest path from start to end. Returns [] if no path is found. if not grid or not grid[0]: return [] if start == end: return [start] rows, cols = len(grid), len(grid[0]) visited = [[False for _ in range(cols)] for _ in range(rows)] # Directions: right, down, left, up directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(start, [start])]) visited[start[0]][start[1]] = True while queue: (current, path) = queue.popleft() for direction in directions: new_row, new_col = current[0] + direction[0], current[1] + direction[1] new_cell = (new_row, new_col) if new_cell == end: return path + [new_cell] if is_valid_move(grid, visited, new_row, new_col): visited[new_row][new_col] = True queue.append((new_cell, path + [new_cell])) return [] # Return empty list if no path is found"},{"question":"Given a list of integers \`lst\` and an integer \`n\`, write a function \`add_n\` that adds \`n\` to each element in \`lst\`. If \`lst\` contains another list, the function should recursively add \`n\` to each element in the nested list as well.","solution":"def add_n(lst, n): Recursively adds n to each element in lst. If lst contains nested lists, the function applies the addition recursively. result = [] for item in lst: if isinstance(item, list): result.append(add_n(item, n)) else: result.append(item + n) return result"},{"question":"Using NumPy and SciPy, create a 5D array of size 3*3*3*3*3 and populate it with random complex numbers. After that, implement a function to perform Fast Fourier Transform on the array and then normalize it so that the sum of all the elements equals to 1. Remember to handle any exceptions and errors that could arise. Ensure that the implemented function is efficient and optimized for large arrays as well.","solution":"import numpy as np from scipy.fftpack import fftn def create_complex_array(shape=(3, 3, 3, 3, 3)): Creates a 5D array populated with random complex numbers. Parameters: shape (tuple): Shape of the array to create. Returns: np.ndarray: 5D array with random complex numbers. np.random.seed(0) # For reproducibility in tests real_part = np.random.random(shape) imaginary_part = np.random.random(shape) complex_array = real_part + 1j * imaginary_part return complex_array def fft_and_normalize(array): Performs Fast Fourier Transform on a 5D array and normalizes it. Parameters: array (np.ndarray): Input 5D array. Returns: np.ndarray: Normalized array after FFT, with sum of elements equal to 1. try: fft_result = fftn(array) normalized_fft_result = fft_result / np.sum(fft_result) return normalized_fft_result except Exception as e: print(f\\"An error occurred: {e}\\") return None"},{"question":"Implement an \\"insertion sort\\" algorithm on the given array of non-negative integers. In addition, modify the algorithm such that it also accepts negative integers and even floating point numbers. Then, expand the functionality of the code to include number validation: it should raise an error if any non-numeric elements are present in the array. For a step up in difficulty, instead of utilizing temporary variables for swap operations, use arithmetic operations instead.","solution":"def insertion_sort(arr): Performs an insertion sort on the given array. This function allows sorting of positive integers, negative integers, and floats. It raises a ValueError if any non-numeric elements are present in the array. # Validate the array to contain only numbers for element in arr: if not isinstance(element, (int, float)): raise ValueError('Array contains non-numeric elements') # Perform insertion sort for i in range(1, len(arr)): key = arr[i] j = i - 1 while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"In Python, write a script that uses an iterator to iterate through each character in a given string. However, instead of merely printing each character, implement logic to count the occurrence of each vowel in the string. Also, consider case sensitivity. For instance, uppercase 'A' and lowercase 'a' should be counted as separate occurrences. Afterwards, your script should be able to print out the total count for each vowel present in the string.","solution":"def count_vowels(s): Counts the occurrences of each vowel in the given string while considering case sensitivity. Parameters: s (str): Input string. Returns: dict: A dictionary with vowels as keys and their counts as values. vowels = 'aeiouAEIOU' vowel_count = {vowel: 0 for vowel in vowels} iterator = iter(s) for char in iterator: if char in vowels: vowel_count[char] += 1 return vowel_count"},{"question":"Using the comment as a guide, complete the code to reverse an array in-place. The array will contain only positive integers. You are not allowed to use any built-in functions or create a new array to store the reversed elements. Additionally, you must minimize the number of assignments and avoid using extra variables.","solution":"def reverse_array_in_place(arr): Reverses the array in place without using any built-in functions or extra space for storing the reversed elements. Parameters: arr (list): An array of positive integers. Returns: None n = len(arr) for i in range(n // 2): arr[i], arr[n - i - 1] = arr[n - i - 1], arr[i]"},{"question":"Write a code to generate a random 5 characters string, where each character can be either an uppercase letter, a lowercase letter, or a digit.","solution":"import random import string def generate_random_string(): Returns a random 5 characters string, where each character can be either an uppercase letter, a lowercase letter, or a digit. characters = string.ascii_letters + string.digits return ''.join(random.choice(characters) for _ in range(5))"},{"question":"Write a code snippet to implement a function that performs a circular shift to the left or right on a given list of integers, depending on the direction specified. The function should take three parameters: a list of integers, a positive integer n representing the number of positions to shift, and a boolean value indicating the direction of the shift (left or right). The function should return the modified list after the shift.","solution":"def circular_shift(lst, n, direction): Perform a circular shift on the list lst by n positions. Parameters: lst (list of int): The list of integers to be shifted. n (int): The number of positions to shift. direction (bool): The direction of the shift. True for left shift, False for right shift. Returns: list: The modified list after the circular shift. if not lst: return lst n = n % len(lst) # Normalize n to avoid unnecessary shifts if direction: # Left shift return lst[n:] + lst[:n] else: # Right shift return lst[-n:] + lst[:-n]"},{"question":"Write a function in Python that takes an integer and returns an array with the frequency of each digit from 0 to 9. The function should handle negative numbers by ignoring the sign, meaning that -123 should have the same frequency array as 123. The returned array should have a length of 10 (for each digit from 0 to 9), and any digits not present in the number should have a frequency of 0.","solution":"def digit_frequency(n): Returns an array with the frequency of each digit from 0 to 9 in the given integer n. # Convert the number to a string and ignore the sign n_str = str(abs(n)) # Initialize the frequency array for digits 0-9 freq_array = [0] * 10 # Count the frequency of each digit for char in n_str: freq_array[int(char)] += 1 return freq_array"},{"question":"Write a Python function to return an odd number from a given list of integers. If there is no odd number in the list, the function should raise a custom exception named \`NoOddNumberError\`. Additionally, if the list is empty, the function should raise a \`EmptyListError\`. The function should only check for odd numbers and not perform any other type of validation on the input list.","solution":"class NoOddNumberError(Exception): Custom exception raised when no odd number is found in the list. pass class EmptyListError(Exception): Custom exception raised when the input list is empty. pass def find_odd_number(numbers): Returns the first odd number from the given list of integers. Raises NoOddNumberError if no odd number is found. Raises EmptyListError if the input list is empty. if not numbers: raise EmptyListError(\\"The list is empty.\\") for number in numbers: if number % 2 != 0: return number raise NoOddNumberError(\\"No odd number found in the list.\\")"},{"question":"Given a list of n integers, implement a function in Python that finds all unique triplets in the list that sum up to zero. Also, write a test case for your function to ensure its correctness.","solution":"def three_sum(nums): Finds all unique triplets in the list which sum up to zero. Parameters: nums (List[int]): List of integers. Returns: List[List[int]]: List of unique triplets that sum up to zero. nums.sort() res = [] for i in range(len(nums) - 2): if i == 0 or (i > 0 and nums[i] != nums[i-1]): lo, hi, sum = i+1, len(nums)-1, -nums[i] while lo < hi: if nums[lo] + nums[hi] == sum: res.append([nums[i], nums[lo], nums[hi]]) while lo < hi and nums[lo] == nums[lo+1]: lo += 1 while lo < hi and nums[hi] == nums[hi-1]: hi -= 1 lo += 1 hi -= 1 elif nums[lo] + nums[hi] < sum: lo += 1 else: hi -= 1 return res"},{"question":"I have a function implemented in Python that reads input from a text file and I want to convert it to read from standard input instead. How can I modify my function to achieve this?","solution":"import sys def read_lines_from_stdin(): Reads lines from standard input. lines = sys.stdin.readlines() return lines"},{"question":"Write an outline for a Python program to check if a string is a palindrome.","solution":"def is_palindrome(s): Checks if the given string \`s\` is a palindrome. :param s: String to check :return: True if \`s\` is a palindrome, False otherwise # Removing any non-alphanumeric characters and converting to lowercase filtered_string = ''.join(char.lower() for char in s if char.isalnum()) # Checking if the filtered string is equal to its reverse return filtered_string == filtered_string[::-1]"},{"question":"Build a function to convert an adjacency matrix into an adjacency list while also considering weighted edges. The function should take an additional matrix as input, representing the weights of each edge. The weights matrix should have the same dimensions as the adjacency matrix.","solution":"def adjacency_matrix_to_list(adj_matrix, weights_matrix): Converts an adjacency matrix into an adjacency list considering weighted edges. Parameters: adj_matrix (list): A 2D list representing the adjacency matrix (0 or 1 values). weights_matrix (list): A 2D list representing the weights of the edges. Returns: dict: A dictionary where the keys are nodes and the values are lists of tuples (neighbor, weight). adj_list = {} for i in range(len(adj_matrix)): adj_list[i] = [] for j in range(len(adj_matrix)): if adj_matrix[i][j] > 0: adj_list[i].append((j, weights_matrix[i][j])) return adj_list"},{"question":"Create a function in Python that takes a string and prints the frequency table of all its alphanumeric characters, excluding any special characters or whitespaces. The output should be sorted in descending order of frequency. The function should also ignore the case of the characters. The input string can have a maximum length of 1000 characters. The function should return the frequency table as a dictionary. Additionally, the function should handle Unicode characters properly.","solution":"def character_frequency(s): Returns the frequency table of all alphanumeric characters in the string s, excluding special characters or whitespaces, case insensitive. :param s: input string :return: dictionary with characters as keys and their frequencies as values, sorted by frequency from collections import Counter import re # Filter only alphanumeric characters filtered_chars = re.findall(r'w', s.lower()) # Calculate frequencies frequency = Counter(filtered_chars) # Sort by frequency in descending order sorted_frequency = dict(sorted(frequency.items(), key=lambda item: item[1], reverse=True)) return sorted_frequency"},{"question":"Write a function in Python that takes a list of integers as an input and returns a new list where each element is the factorial of the corresponding element in the input list. The function should handle any potential errors, such as non-integer inputs, in a graceful manner.","solution":"import math def factorial_list(int_list): Takes a list of integers and returns a new list where each element is the factorial of the corresponding element in the input list. Non-integer inputs are handled gracefully. :param int_list: List of integers :return: List of factorials of the input integers result = [] for i in int_list: if isinstance(i, int) and i >= 0: result.append(math.factorial(i)) else: result.append(None) return result"},{"question":"Implement the quick sort algorithm to sort a given list of integers in ascending order. The input list may contain duplicate elements. The algorithm should have a time complexity of O(n log n) and should not use any additional data structures or recursion. Additionally, you are not allowed to use any built-in sorting functions or libraries.","solution":"def quick_sort(arr): Sorts the given list of integers using the Quick Sort algorithm. This function uses an iterative approach. Parameters: arr (list): A list of integers to be sorted. Returns: list: A sorted list of integers in ascending order. stack = [(0, len(arr) - 1)] while stack: low, high = stack.pop() if low < high: p = partition(arr, low, high) stack.append((low, p - 1)) stack.append((p + 1, high)) return arr def partition(arr, low, high): pivot = arr[high] i = low - 1 for j in range(low, high): if arr[j] <= pivot: i += 1 arr[i], arr[j] = arr[j], arr[i] arr[i + 1], arr[high] = arr[high], arr[i + 1] return i + 1"},{"question":"Can you write an AWS Lambda function in Python that takes in an event, and if the 'name' key exists in the event, it returns a custom message with the name included? If the 'name' key is not present, the function should default to returning a general greeting?","solution":"def lambda_handler(event, context): AWS Lambda function that takes in an event. If a 'name' key exists in the event, returns a custom message with the name included. If the 'name' key is not present, returns a general greeting. name = event.get('name', 'World') return f\\"Hello, {name}!\\""},{"question":"Modify the given binary search algorithm to find the index of the first occurrence of the given element in a sorted array. If the element does not exist, return -1.","solution":"def binary_search_first_occurrence(arr, x): Returns the index of the first occurrence of x in a sorted array arr. If x is not found, returns -1. low, high = 0, len(arr) - 1 result = -1 while low <= high: mid = (low + high) // 2 if arr[mid] == x: result = mid high = mid - 1 # Look on the left side for the first occurrence elif arr[mid] < x: low = mid + 1 else: high = mid - 1 return result"},{"question":"Let S = {1,2,3,..., 10} be a set. The set S has 1024 different subsets. Write a Python program to generate all possible subsets of the set S using recursion.","solution":"def generate_subsets(s): Generates all possible subsets of the set s using recursion. :param s: list of elements in the set :return: list of all possible subsets def subsets_helper(subset, index): if index == len(s): all_subsets.append(subset) return subsets_helper(subset, index + 1) # Exclude the current element subsets_helper(subset + [s[index]], index + 1) # Include the current element all_subsets = [] subsets_helper([], 0) return all_subsets # Generating subsets of set S S = list(range(1, 11)) subsets = generate_subsets(S)"},{"question":"Create a Python program that takes two strings as input and prints out the longer string. If the lengths of the strings are equal, print both strings. Additionally, identify and resolve the issue in the following incorrect code snippet.","solution":"def longer_string(str1, str2): Takes two strings as input and returns the longer string. If the lengths are equal, returns both strings. if len(str1) > len(str2): return str1 elif len(str2) > len(str1): return str2 else: return f\\"{str1} {str2}\\" # Example usage # print longer_string(\\"hello\\", \\"world!\\") should return \\"world!\\" # print longer_string(\\"hello\\", \\"hello\\") should return \\"hello hello\\""},{"question":"Create 3 code challenges in Python, each with a different level of difficulty. Challenge 1 should be suitable for a beginner programmer, Challenge 2 for an intermediate programmer, and Challenge 3 for an advanced programmer. For each challenge, provide a piece of erroneous code as a reference to increase misdirection.","solution":"def reverse_string(s): Returns the input string reversed. return s[::-1]"},{"question":"Write a Python function that takes in two strings as parameters and returns the concatenation of the two strings, with a space inserted between them. The function should also check if either of the input strings is empty or contains only whitespace characters, and if so, it should raise a ValueError with the message \\"Input strings must not be empty or contain only whitespace characters.\\"","solution":"def concatenate_strings(str1, str2): Concatenates two strings with a space between them. Raises ValueError if either string is empty or contains only whitespace characters. if not str1.strip() or not str2.strip(): raise ValueError(\\"Input strings must not be empty or contain only whitespace characters.\\") return str1 + \\" \\" + str2"},{"question":"Given a 2-D array with R rows and C columns, write a function to transpose it. The input array represents a matrix where grid[i][j] denotes the element at the i-th row and j-th column.","solution":"def transpose(matrix): Returns the transpose of the given 2D matrix. :param matrix: List[List[int]] - The input 2D list representing the matrix :return: List[List[int]] - The transposed matrix if not matrix or not matrix[0]: return [] rows, cols = len(matrix), len(matrix[0]) transposed_matrix = [[None] * rows for _ in range(cols)] for r in range(rows): for c in range(cols): transposed_matrix[c][r] = matrix[r][c] return transposed_matrix"},{"question":"Is there a way to create a program that can generate random numbers within a specific range using Python?","solution":"import random def generate_random_number(start, end): Generates a random integer between start and end (inclusive). Parameters: start (int): The lower bound of the range. end (int): The upper bound of the range. Returns: int: A random integer between start and end. return random.randint(start, end)"},{"question":"Modify this code to correctly add a new element at the end of a singly linked list in Python, but without using the built-in append method. Additionally, you should not use the built-in insert method or any other built-in list methods.","solution":"class Node: def __init__(self, data): self.data = data self.next = None class SinglyLinkedList: def __init__(self): self.head = None def add_at_end(self, data): new_node = Node(data) if self.head is None: self.head = new_node else: current = self.head while current.next is not None: current = current.next current.next = new_node"},{"question":"Create a function that takes in a list as an argument and returns a reversed copy of the list.","solution":"def reverse_list(lst): Returns a reversed copy of the input list. return lst[::-1]"},{"question":"I have a list of numbers in Python and I want to find the number that appears the most. Can you help me write a Python function to achieve this? Also, I want the function to return -1 if there are no duplicate numbers in the list. For example, if the list is [1,2,3,2,3,3], the function should return 3.","solution":"from collections import Counter def find_most_frequent_number(numbers): Returns the number that appears the most in the list. If there are no duplicates, returns -1. if not numbers: return -1 count = Counter(numbers) most_common = count.most_common(1) if len(most_common) == 0 or most_common[0][1] == 1: return -1 return most_common[0][0]"},{"question":"I'm currently learning Python, and one lesson I've been stuck on is the use of global and nonlocal keywords. Can you provide an overview and simplified explanation of their use and significance?","solution":"# Example for global keyword counter = 0 # global variable def increment(): global counter counter += 1 return counter # Example for nonlocal keyword def outer_function(): count = 0 # Enclosing scope variable def inner_function(): nonlocal count count += 1 return count inner_function() # count becomes 1 return count"},{"question":"Write a recursive program to calculate the factorial of a number. Also, include error handling for negative numbers and non-integer inputs. Compare the efficiency of your recursive solution to an iterative solution using time complexity analysis.","solution":"def factorial(n): Returns the factorial of a non-negative integer n using recursion. Raises a ValueError for negative integers and TypeError for non-integer inputs. if not isinstance(n, int): raise TypeError(\\"Input must be an integer\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Design a program to find the intersecting elements of two lists. However, you are not allowed to use the built-in set() function or any other built-in function that directly solves the problem. Instead, you should implement your own algorithm to find the intersecting elements.","solution":"def intersect_lists(list1, list2): Returns a list of intersecting elements between list1 and list2. intersecting_elements = [] for elem in list1: if elem in list2 and elem not in intersecting_elements: intersecting_elements.append(elem) return intersecting_elements"},{"question":"Write a python program that returns the sum of the first n numbers using recursion.","solution":"def sum_first_n_numbers(n): Returns the sum of the first n numbers using recursion. if n <= 0: return 0 return n + sum_first_n_numbers(n - 1)"},{"question":"Please write a function that takes in a string as input and returns the number of unique characters in the string. The function should have a time complexity of O(n), where n is the length of the string. Additionally, the function should use only constant space, meaning it should not use additional data structures such as sets or dictionaries to store the unique characters.","solution":"def count_unique_characters(s: str) -> int: Returns the number of unique characters in the string s. ascii_chars = [False] * 128 # Assuming ASCII characters unique_count = 0 for char in s: ascii_val = ord(char) if not ascii_chars[ascii_val]: ascii_chars[ascii_val] = True unique_count += 1 return unique_count"},{"question":"Given a string, write code to remove all duplicates from the string and return the modified string. The string may contain any characters from ASCII range 32 to 126 (inclusive). The order of the characters in the modified string should be the same as the original string.","solution":"def remove_duplicates(s): Removes all duplicates from the string and returns the modified string. Parameters: s (str): The input string. Returns: str: The modified string with duplicates removed. seen = set() result = [] for char in s: if char not in seen: result.append(char) seen.add(char) return ''.join(result)"},{"question":"Write the function dayOfWeek (day: int) that takes an integer representing a day of the week and returns its corresponding name as a string. The function should handle values from 1 to 7, where 1 corresponds to Monday and 7 to Sunday. For any other input, the function should return \\"Invalid day\\". Do not use if statements in your solution.","solution":"def dayOfWeek(day): Returns the name of the day of the week corresponding to the given integer. days = { 1: \\"Monday\\", 2: \\"Tuesday\\", 3: \\"Wednesday\\", 4: \\"Thursday\\", 5: \\"Friday\\", 6: \\"Saturday\\", 7: \\"Sunday\\" } return days.get(day, \\"Invalid day\\")"},{"question":"Write a Python code that uses an array data structure to implement a queue class. The queue should have methods for enqueue (add an element to the end of the queue), dequeue (remove and return the element at the front of the queue), and is_empty (return True if the queue is empty). Additionally, the queue should have a method to return the size of the queue and a method that returns the front element without removing it. Include comments in your code to explain the functionality.","solution":"class Queue: def __init__(self): Initializes an empty queue. self.items = [] def enqueue(self, item): Adds an item to the end of the queue. self.items.append(item) def dequeue(self): Removes and returns the item at the front of the queue. If the queue is empty, raises an IndexError. if not self.is_empty(): return self.items.pop(0) else: raise IndexError(\\"dequeue from empty queue\\") def is_empty(self): Returns True if the queue is empty, else False. return len(self.items) == 0 def size(self): Returns the number of items in the queue. return len(self.items) def front(self): Returns the item at the front of the queue without removing it. If the queue is empty, raises an IndexError. if not self.is_empty(): return self.items[0] else: raise IndexError(\\"front from empty queue\\")"},{"question":"I have a string that consists of numbers, spaces, and punctuation marks. How can I write an algorithm in Python that removes all the whitespaces and punctuation from the string, and returns only the numbers in it?","solution":"import string def extract_numbers(s): Removes all whitespaces and punctuation from the input string, and returns a string containing only the numbers. return ''.join(char for char in s if char.isdigit())"},{"question":"Here you are given a programming task that involves dealing with a particular Binary Search Tree (BST), which is a 236 - Unique Binary Search Trees II. In this problem, you have to generate all possible unique BSTs for a specific sequence of numbers, which range from 1 to n. These generated BSTs should then be returned as a list of tree node objects.","solution":"from typing import List, Optional class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def generateTrees(n: int) -> List[Optional[TreeNode]]: if n == 0: return [] def generate(start, end): if start > end: return [None] all_trees = [] for i in range(start, end + 1): left_trees = generate(start, i - 1) right_trees = generate(i + 1, end) for l in left_trees: for r in right_trees: current_tree = TreeNode(i) current_tree.left = l current_tree.right = r all_trees.append(current_tree) return all_trees return generate(1, n)"},{"question":"Write a python program that implements a fast Fourier transform on a signal data set using the numpy library, and visualizes the results using the matplotlib library. The program should allow the user to input the signal data as a list or array and specify the time interval between samples. The program should then output the frequency domain representation of the signal as a list or array, and display the frequency domain representation and the original signal on separate plots. Comment the code thoroughly and use meaningful variable names.","solution":"import numpy as np import matplotlib.pyplot as plt def fast_fourier_transform(signal_data, sample_interval): Computes the Fast Fourier Transform (FFT) of a given signal. Parameters: signal_data (list or array): Input signal data. sample_interval (float): Time interval between samples. Returns: tuple: Two elements tuple containing: - frequencies (array): Array of frequency components. - fft_magnitude (array): Magnitude of the FFT of the signal. # Number of samples n = len(signal_data) # Perform FFT using numpy's fft function fft_result = np.fft.fft(signal_data) # Compute frequency bins frequencies = np.fft.fftfreq(n, d=sample_interval) # Compute magnitude of the FFT fft_magnitude = np.abs(fft_result) return frequencies, fft_magnitude def plot_signal_and_fft(signal_data, sample_interval): Plots the original signal and its FFT magnitude. Parameters: signal_data (list or array): Input signal data. sample_interval (float): Time interval between samples. # Compute FFT and frequencies frequencies, fft_magnitude = fast_fourier_transform(signal_data, sample_interval) # Generate time vector for signal time_vector = np.arange(0, len(signal_data) * sample_interval, sample_interval) # Plot original signal plt.figure(figsize=(14, 6)) plt.subplot(1, 2, 1) plt.plot(time_vector, signal_data) plt.title('Original Signal') plt.xlabel('Time [s]') plt.ylabel('Amplitude') # Plot frequency domain representation plt.subplot(1, 2, 2) plt.plot(frequencies, fft_magnitude) plt.title('Frequency Domain Representation') plt.xlabel('Frequency [Hz]') plt.ylabel('Magnitude') plt.xlim(0, np.max(frequencies) / 2) # Show only positive frequencies plt.tight_layout() plt.show()"},{"question":"Write a Python program to print the multiplication table of a number up to a given range, but only for odd numbers.","solution":"def print_odd_multiplication_table(number, range_limit): Prints the multiplication table of a given number up to the range limit, but only for odd numbers. :param number: The number for which the multiplication table should be printed. :param range_limit: The upper limit of the range. for i in range(1, range_limit + 1, 2): print(f\\"{number} * {i} = {number * i}\\")"},{"question":"Write a function that takes a list of integers and returns a new list with all duplicate numbers removed, while maintaining the original order of the remaining elements. Additionally, ensure your function can handle not only positive integers, but also negative integers and zero.","solution":"def remove_duplicates(lst): Returns a new list with duplicates removed while maintaining the order of the remaining elements. seen = set() result = [] for number in lst: if number not in seen: seen.add(number) result.append(number) return result"},{"question":"Create a python function which removes duplicate elements from a given list.","solution":"def remove_duplicates(input_list): Removes duplicate elements from the given list and returns the new list. return list(set(input_list))"},{"question":"Given a string, write a Python function that prints the frequency of each character in the string. You are not allowed to use any built-in functions or libraries for counting the frequency of characters.","solution":"def char_frequency(s): Returns a dictionary with the frequency of each character in the given string s. frequency = {} for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"Implement a Python function that accepts two lists of unequal lengths as input. The first list contains numerals, and the second list contains alphabets. The function should output a single list in which each element is a dictionary containing the numeric value and corresponding alphabetic character from the two lists. If the lists are of unequal length, append the remaining elements of the longer list to the output as standalone dictionaries.","solution":"def merge_lists(numerals, alphabets): Merges two lists into a single list containing dictionaries. :param numerals: List of numerals :param alphabets: List of alphabets :return: List of dictionaries where each dictionary contains key 'number' and key 'alphabet'. merged_list = [] len_numerals = len(numerals) len_alphabets = len(alphabets) min_len = min(len_numerals, len_alphabets) # Combine pairs from both lists for i in range(min_len): merged_list.append({'number': numerals[i], 'alphabet': alphabets[i]}) # Add remaining items from numerals if any for i in range(min_len, len_numerals): merged_list.append({'number': numerals[i]}) # Add remaining items from alphabets if any for i in range(min_len, len_alphabets): merged_list.append({'alphabet': alphabets[i]}) return merged_list"},{"question":"Write me a Python script that can randomly split a given list into n sublists of approximately equal size. The length of each sublist can vary by at most one element from the others due to the remainder issue when the original list's length is not perfectly divisible by n. But, try to maintain an equal distribution as much as possible. Note that the input list may not contain unique elements. Also, make sure the elements in the original list maintain their order in the newly created sublists. Lastly, try to make the script as efficient as possible.","solution":"def split_list(input_list, n): Splits the given list into n sublists of approximately equal size. Parameters: input_list (list): The list to be split. n (int): The number of sublists to create. Returns: list: A list containing n sublists. length = len(input_list) if n <= 0: return [] sublists = [] base_size = length // n remainder = length % n start = 0 for i in range(n): end = start + base_size + (1 if i < remainder else 0) sublists.append(input_list[start:end]) start = end return sublists"},{"question":"Propose a new Pythonic solution to the problem of removing every nth element from a list, without altering the original list or using excessive memory. Your solution should be efficient for large lists, and should handle edge cases, such as when the list is empty or when n is greater than the length of the list. Additionally, write a function to test your solution with various inputs to ensure it works as expected. Avoid using any in-built Python libraries for your implementation.","solution":"def remove_every_nth(lst, n): Returns a new list with every nth element removed. if n <= 0: return lst[:] # If n is 0 or negative, return the list as it is. return [lst[i] for i in range(len(lst)) if (i + 1) % n != 0]"},{"question":"Write a Python function to generate the prime factors of a given number. The function should return a list of prime factors, with each factor appearing as many times as it divides the number.","solution":"def prime_factors(n): Returns a list of prime factors of the given number n. Each prime factor appears as many times as it divides n. factors = [] divisor = 2 while n > 1: while n % divisor == 0: factors.append(divisor) n //= divisor divisor += 1 return factors"},{"question":"Create a python-based web-app using Flask which accepts a user's age, and returns a boolean value representing whether the person is a senior citizen (60+) or not.","solution":"from flask import Flask, request, jsonify app = Flask(__name__) @app.route('/is_senior_citizen', methods=['POST']) def is_senior_citizen(): data = request.json age = data.get('age') if age is None: return jsonify({'error': 'Age is required'}), 400 if not isinstance(age, int): return jsonify({'error': 'Age must be an integer'}), 400 return jsonify({'is_senior_citizen': age >= 60}) if __name__ == '__main__': app.run(debug=True)"},{"question":"Which of the following are three ways to change the return type of a function in Python?","solution":"def return_type_cast(x): Returns the type of x cast as a string. return str(x) def return_conditional(x): Returns 'Int' if x is an integer and 'Not Int' otherwise. if isinstance(x, int): return 'Int' else: return 'Not Int' def return_decorator(func): Decorator that modifies a function to return 'Decorated: ' + original return value. def wrapper(*args, **kwargs): return 'Decorated: ' + str(func(*args, **kwargs)) return wrapper @return_decorator def sample_function(x): return x"},{"question":"Create a Python function that takes two arguments: a list of integers and an integer. The function should add the given integer to each element of the list and return the new list. For example, if the list is [1, 2, 3] and the integer is 10, the function should return [11, 12, 13].","solution":"def add_to_each_element(lst, num): Adds the given integer to each element of the list and returns the new list. Parameters: lst (list): A list of integers. num (int): An integer to add to each element of the list. Returns: list: A new list with the given integer added to each element. return [x + num for x in lst]"},{"question":"What is the maximum recursion depth limit of Python for functions and how can it be modified? Also, explain the concept of recursion and when it is appropriate to use recursive functions in programming.","solution":"import sys def get_recursion_limit(): Returns the current recursion limit. return sys.getrecursionlimit() def set_recursion_limit(limit): Sets a new recursion limit. Parameters: limit (int): The new recursion limit to set. Returns: None sys.setrecursionlimit(limit)"},{"question":"Write a function to check if all the items in a list are of the same data type. The list can contain any valid Python data type, including nested lists and dictionaries. Your function should return True if all the items in the list are of the same data type, and False otherwise. You should aim for an optimal time complexity solution.","solution":"def all_same_type(lst): Checks if all the items in the list are of the same data type. Args: lst (list): The list to check. Returns: bool: True if all items in the list are of the same data type, False otherwise. if not lst: return True # An empty list is considered to have 'all same type' first_type = type(lst[0]) for element in lst: if type(element) != first_type: return False return True"},{"question":"Write a function in Python that takes a list of numbers as input and returns the sum of all even numbers in the list. The function should have a time complexity of O(n) and should not use any built-in functions or libraries.","solution":"def sum_of_even_numbers(numbers): Returns the sum of all even numbers in the list. Parameters: numbers (list): A list of integers. Returns: int: The sum of all even numbers in the list. total = 0 for number in numbers: if number % 2 == 0: total += number return total"},{"question":"Given the following erroneous code, identify and rectify the issue, and then modify the function such that it accepts three parameters - start, end, and step. The function should return the maximum value within the range [start, end] that is divisible by the step. In the event that no such number exists, the function should yield a suitable message.","solution":"def find_max_divisible(start, end, step): Returns the maximum value within the range [start, end] that is divisible by step. If no such number exists, returns a suitable message. # Checking if the range is valid if start > end or step <= 0: return \\"Invalid input: start must be less than or equal to end and step must be positive.\\" # Loop over the range from end to start to find the maximum divisible number for num in range(end, start - 1, -1): if num % step == 0: return num return \\"No number in the range is divisible by the specified step.\\""},{"question":"Write code to find the longest substring of unique characters in a given string, without using any built-in string functions or data structures.","solution":"def longest_unique_substring(s): Returns the longest substring of unique characters in a given string s. n = len(s) if n == 0: return \\"\\" max_len = 1 max_substring = s[0] current_start = 0 char_index = {} for current_end in range(n): end_char = s[current_end] if end_char in char_index and char_index[end_char] >= current_start: current_start = char_index[end_char] + 1 char_index[end_char] = current_end current_length = current_end - current_start + 1 if current_length > max_len: max_len = current_length max_substring = s[current_start:current_end + 1] return max_substring"},{"question":"Write a Python code to convert time from 12-hour format to 24-hour format, but also include the functionality to convert time zone from EST (Eastern Standard Time) to IST (Indian Standard Time). The input time will be in the format \\"hh:mm:ss AM/PM EST\\" and the output should be in the format \\"hh:mm:ss IST\\".","solution":"from datetime import datetime, timedelta def convert_to_24hr_and_ist(time_str): Converts time from \\"hh:mm:ss AM/PM EST\\" to \\"hh:mm:ss IST\\" (24-hour format). # Parse the input time string in 12-hour format with EST est_time = datetime.strptime(time_str, \\"%I:%M:%S %p EST\\") # Convert EST to IST by adding 10 hours and 30 minutes ist_time = est_time + timedelta(hours=10, minutes=30) # Format the IST time in 24-hour format return ist_time.strftime(\\"%H:%M:%S IST\\")"},{"question":"Generate code for an advanced calculator that can perform basic math operations like addition, subtraction, multiplication and division. Additionally, the calculator should be able to handle operations like square roots, exponents, and factorials. The calculator should also have the ability to store and recall values in multiple memory slots.","solution":"import math class AdvancedCalculator: def __init__(self): self.memories = {} def add(self, a, b): return a + b def subtract(self, a, b): return a - b def multiply(self, a, b): return a * b def divide(self, a, b): if b == 0: raise ValueError(\\"Cannot divide by zero.\\") return a / b def sqrt(self, a): if a < 0: raise ValueError(\\"Cannot take square root of a negative number.\\") return math.sqrt(a) def exponent(self, a, b): return a ** b def factorial(self, a): if a < 0: raise ValueError(\\"Cannot take factorial of a negative number.\\") return math.factorial(a) def store_value(self, slot, value): self.memories[slot] = value def recall_value(self, slot): if slot not in self.memories: raise ValueError(f\\"No value stored in slot {slot}.\\") return self.memories[slot] def clear_memory(self, slot): if slot in self.memories: del self.memories[slot]"},{"question":"Create a Python function that calculates the sum of the first n terms of a geometric sequence with a randomly determined common ratio between 2 and 5, and first term between 1 and 10. Additionally, implement a check in the function that throws a ValueError if the ratio or the number of terms are not integers, or if n is less than 1. Allow the user to specify the nth term to compute the sum of the sequence up to that point. Use recursion for the solution instead of the geometric sum formula.","solution":"import random def geometric_sum(n): Calculate the sum of the first n terms of a geometric sequence. Parameters: n (int): The number of terms to sum. Must be a positive integer. Returns: float: The sum of the first n terms of the geometric sequence. Throws: ValueError: If n is not an integer or less than 1. if not isinstance(n, int) or n < 1: raise ValueError(\\"n must be a positive integer\\") first_term = random.randint(1, 10) ratio = random.randint(2, 5) def recursive_sum(term, current_n, current_sum): if current_n == 0: return current_sum new_sum = current_sum + term return recursive_sum(term * ratio, current_n - 1, new_sum) return recursive_sum(first_term, n, 0)"},{"question":"I have a list of numbers in Python and I want to find the smallest and the largest values in the list. How can I accomplish this using a function?","solution":"def find_min_max(numbers): Returns the smallest and largest values in the list of numbers. Parameters: numbers (list): A list of numeric values. Returns: tuple: A tuple containing the smallest and largest values (min, max). if not numbers: raise ValueError(\\"The list is empty\\") min_val = min(numbers) max_val = max(numbers) return min_val, max_val"},{"question":"Create a function to detect if a given string contains all lowercase English alphabet letters. The function should have a time complexity of O(n) and a space complexity of O(1), where n is the length of the string. The function should also handle strings with non-alphabetic characters and ignore any uppercase letters. Additionally, the function should return the count of unique lowercase letters present in the string. If the string contains all lowercase letters of the English alphabet, it should return a count of 26.","solution":"def detect_all_lowercase_letters(s): Detect if a given string contains all lowercase English alphabet letters and return the count of unique lowercase letters present in the string. unique_letters = set() for char in s: if 'a' <= char <= 'z': unique_letters.add(char) return len(unique_letters)"},{"question":"Write a recursive function that traverses a tree structure and applies a callback function to each node. The tree structure is represented as nested dictionaries where the key is the node name and the value is a list of child nodes. The function takes two arguments: the root of the tree (a dictionary) and a callback function (a function that takes a node name as an argument and returns void). The function should return nothing.","solution":"def traverse_tree(tree, callback): Traverses the tree structure and applies the callback function to each node. Parameters: tree (dict): The root of the tree represented as nested dictionaries. callback (function): The callback function to apply to each node. def _traverse(node): # Apply the callback function to the current node for key, children in node.items(): callback(key) # Recursive call for each child node for child in children: _traverse(child) _traverse(tree)"},{"question":"Write a python code to implement Huffman Encoding and Decoding. Consider that the input is a string of lowercase alphabet characters, and implement the encoding using a binary tree structure. You should return the encoded string from the encoding function and reconstruct the original string from the encoded string in the decoding function. You also need to write a function to verify that the decoded string is the same as your input, and return a boolean value.","solution":"import heapq from collections import defaultdict, Counter class HuffmanNode: def __init__(self, char=None, freq=None): self.char = char self.freq = freq self.left = None self.right = None def __lt__(self, other): return self.freq < other.freq def build_huffman_tree(text): freq = Counter(text) heap = [HuffmanNode(char, freq) for char, freq in freq.items()] heapq.heapify(heap) while len(heap) > 1: left = heapq.heappop(heap) right = heapq.heappop(heap) new_node = HuffmanNode(freq=left.freq + right.freq) new_node.left = left new_node.right = right heapq.heappush(heap, new_node) return heap[0] def build_codes(node, prefix=\\"\\", codebook=None): if codebook is None: codebook = {} if node.char is not None: codebook[node.char] = prefix else: build_codes(node.left, prefix + \\"0\\", codebook) build_codes(node.right, prefix + \\"1\\", codebook) return codebook def huffman_encoding(text): root = build_huffman_tree(text) codebook = build_codes(root) encoded_text = ''.join(codebook[char] for char in text) return encoded_text, root def huffman_decoding(encoded_text, root): decoded_text = [] node = root for bit in encoded_text: if bit == \\"0\\": node = node.left else: node = node.right if node.char is not None: decoded_text.append(node.char) node = root return ''.join(decoded_text) def is_same_string(original, encoded_text, root): decoded_text = huffman_decoding(encoded_text, root) return original == decoded_text"},{"question":"I need help with Python programming. I have a list of tuples where each tuple has a key (string with two characters) and a value (float). I would like to iterate over the list and update the value for a given key. This would be simple if it were a dictionary but I'm reluctant to convert the list to a dictionary as that significantly increases memory usage (the list is about 500MB and the dictionary is about 3GB with ~4 million keys). Can you suggest an efficient way to iterate over the tuple list and update the value for a given key?","solution":"def update_tuple_list(tuple_list, target_key, new_value): Updates the value for the given target_key in the tuple_list. This function modifies the list in place. :param tuple_list: List of tuples where each tuple contains (key, value) :param target_key: Key for which the value needs to be updated :param new_value: New value to set for the given key for i, (key, value) in enumerate(tuple_list): if key == target_key: tuple_list[i] = (key, new_value) break"},{"question":"Write a Python function that takes a list of strings as argument. Each string represents a range of years, for example \\"2010-2020\\". Years can be from 0001 to 9999 (both included). The function should return the string \\"YES\\" if there is no gap between any two consecutive year ranges, otherwise return \\"NO\\".","solution":"def no_gap_between_year_ranges(year_ranges): Determines if there are no gaps between any two consecutive year ranges. Args: year_ranges (list): List of year ranges as strings, e.g., [\\"2010-2020\\", \\"2021-2030\\"] Returns: str: \\"YES\\" if there is no gap, otherwise \\"NO\\" # Convert year ranges into a list of tuples (start year, end year) ranges = [(int(range_str.split('-')[0]), int(range_str.split('-')[1])) for range_str in year_ranges] # Sort ranges by start year ranges.sort() # Check for gaps between consecutive ranges for i in range(1, len(ranges)): if ranges[i][0] != ranges[i-1][1] + 1: return \\"NO\\" return \\"YES\\""},{"question":"Develop a function that accepts three arguments: a database name, a table name, and a JSON file. The function should verify if the specified database and table exist. If not, the function should create the database and table based on given specifications. The specifications should include how to convert JSON data into columns in the table.","solution":"import sqlite3 import json def manage_database(db_name, table_name, json_file): Checks if a database and table exist, creates them if they do not, and handles JSON data insertion based on specifications. # Connect to the specified database, creating it if it does not exist conn = sqlite3.connect(db_name) cursor = conn.cursor() # Load the JSON data from the file with open(json_file, 'r') as file: data = json.load(file) # Generate the table creation SQL statement based on JSON data if data: columns = data[0].keys() column_definitions = ', '.join([f'{col} TEXT' for col in columns]) create_table_sql = f CREATE TABLE IF NOT EXISTS {table_name} ( id INTEGER PRIMARY KEY, {column_definitions} ); cursor.execute(create_table_sql) # Insert data from JSON into the table for entry in data: columns = ', '.join(entry.keys()) placeholders = ', '.join(['?' for _ in entry]) values = tuple(entry.values()) insert_sql = f\\"INSERT INTO {table_name} ({columns}) VALUES ({placeholders})\\" cursor.execute(insert_sql, values) conn.commit() conn.close()"},{"question":"Write a python function to return the list of numbers that occur only once in a list of integers. The function should not use any inbuilt python library functions for removing duplicates.","solution":"def unique_numbers(nums): Returns a list of numbers that occur only once in the input list nums. Arguments: nums : list : input list of integers Returns: list : a list of integers that occur only once in nums count_dict = {} for num in nums: if num in count_dict: count_dict[num] += 1 else: count_dict[num] = 1 result = [] for num in nums: if count_dict[num] == 1: result.append(num) return result"},{"question":"Create a simple Python function that takes a list of integers as input and returns the sum of all even numbers in the list.","solution":"def sum_of_even_numbers(int_list): Returns the sum of all even numbers in a list of integers. Parameters: int_list (list): List of integers Returns: int: Sum of even numbers return sum(x for x in int_list if x % 2 == 0)"},{"question":"Given two sets of strings, find the set of all possible strings formed by concatenating one string from each set in any order. The solution should be implemented using recursion and must have a time complexity of O(n^2 * m), where n is the number of strings in each set and m is the average length of a string. Additionally, the solution should handle cases where the strings can contain any printable ASCII characters, not just parentheses, and the sets can contain duplicate strings. The solution should also ensure that the output set does not contain any duplicate strings.","solution":"def concatenate_sets(set1, set2): Returns a set of all possible strings formed by concatenating one string from each set. def concatenate_recursive(s1, s2, idx1, idx2): if idx1 >= len(s1) or idx2 >= len(s2): return set() combinations = set([s1[idx1] + s2[idx2]]) combinations.update(concatenate_recursive(s1, s2, idx1 + 1, idx2)) combinations.update(concatenate_recursive(s1, s2, idx1, idx2 + 1)) return combinations return concatenate_recursive(list(set1), list(set2), 0, 0)"},{"question":"In the context of a programming language, create a function that takes two parameters, 'x' and 'y', both of type integer. The function should perform a series of arithmetic operations on 'x' and 'y', including adding them together, multiplying them, and finding the modulus of 'x' with 'y'. The function should only return the result of the addition. However, the function should also print out the result of all three operations in a formatted string. Additionally, the function should only perform the operations if 'x' and 'y' are both positive integers and 'x' is greater than 'y'. If either of these conditions are not met, the function should raise an exception with an appropriate error message. Finally, write a test case to verify the correctness of your function using a given set of inputs.","solution":"def arithmetic_operations(x, y): Perform a series of arithmetic operations on x and y, including adding them together, multiplying them, and finding the modulus of x with y. Only return the result of the addition. The function prints out the results of all three operations in a formatted string. The function only performs the operations if 'x' and 'y' are both positive integers and 'x' is greater than 'y'. If either of these conditions is not met, the function raises an exception with an appropriate error message. if not (isinstance(x, int) and isinstance(y, int)): raise TypeError(\\"Both x and y must be integers.\\") if x <= 0 or y <= 0: raise ValueError(\\"Both x and y must be positive integers.\\") if x <= y: raise ValueError(\\"x must be greater than y.\\") addition = x + y multiplication = x * y modulus = x % y print(f\\"Addition: {addition}, Multiplication: {multiplication}, Modulus: {modulus}\\") return addition"},{"question":"Write a Python program to create a simple HTTP server that responds to GET and POST requests. The server should return a predefined message for GET requests and log the request data for POST requests.","solution":"from http.server import BaseHTTPRequestHandler, HTTPServer import logging class SimpleHTTPRequestHandler(BaseHTTPRequestHandler): def _set_response(self, code=200): self.send_response(code) self.send_header('Content-type', 'text/html') self.end_headers() def do_GET(self): self._set_response() self.wfile.write(b\\"Hello, this is a GET response!\\") def do_POST(self): content_length = int(self.headers['Content-Length']) # <--- Gets the size of data post_data = self.rfile.read(content_length) # <--- Gets the data itself logging.info(f\\"POST request, Body:n{post_data.decode('utf-8')}\\") self._set_response() self.wfile.write(b\\"POST data received.\\") def run(server_class=HTTPServer, handler_class=SimpleHTTPRequestHandler, port=8080): logging.basicConfig(level=logging.INFO) server_address = ('', port) httpd = server_class(server_address, handler_class) logging.info('Starting httpd...n') try: httpd.serve_forever() except KeyboardInterrupt: pass httpd.server_close() logging.info('Stopping httpd...n') if __name__ == '__main__': run()"},{"question":"Using lambda expressions, write a function to convert a given temperature value in celsius to fahrenheit. However, the input temperature may be a list of values. In this case, the function should return a list of converted temperatures in Fahrenheit.","solution":"def celsius_to_fahrenheit(celsius): Converts a given temperature or list of temperatures from Celsius to Fahrenheit. If the input is a single value, returns a single converted value. If the input is a list of values, returns a list of converted values. convert = lambda c: c * 9/5 + 32 if isinstance(celsius, list): return list(map(convert, celsius)) return convert(celsius)"},{"question":"Write a program that generates the Fibonacci sequence up to a given number of terms. The user should input the number of terms they want to generate. Additionally, the program should only use recursion to generate the Fibonacci sequence, without using any loops or iterative methods.","solution":"def fibonacci(n, a=0, b=1): Generates the first n Fibonacci numbers using recursion. if n <= 0: return [] if n == 1: return [a] return [a] + fibonacci(n-1, b, a+b)"},{"question":"Create a Python program integrating regular expressions that can accurately identify and extract phone numbers from a text input. Your program should be able to detect various formats and styles of phone numbers, including those with parentheses, hyphens, spaces, and international country codes. Additionally, your program should be able to handle text that includes multiple phone numbers and return a list of matches.","solution":"import re def extract_phone_numbers(text): Returns a list of phone numbers found in the given text. A phone number can be in various formats: - (123) 456-7890 - 123-456-7890 - 123.456.7890 - 123 456 7890 - +1 123 456 7890 - +91 (123) 456-7890 phone_pattern = re.compile(r''' (?<!w) # Negative lookbehind to ensure the match doesn't start within a word ( (+?d{1,3}[s.-]?)? # Country code, optional ((?d{3})?[s.-]?)? # Area code, optional d{3}[s.-]? # First 3 digits d{4} # Last 4 digits ) (?!w) # Negative lookahead to ensure the match doesn't end within a word ''', re.VERBOSE) matches = phone_pattern.findall(text) return [match[0] for match in matches]"},{"question":"Can you find the average of a list of numbers using Python without using the sum function or any in-built libraries? Additionally, write a function to validate if the input is a list of integer numbers.","solution":"def average(numbers): Returns the average of a list of numbers. if not numbers: return None total = 0 count = 0 for num in numbers: total += num count += 1 return total / count def is_valid_list_of_integers(numbers): Validates if the input is a list of integers. if not isinstance(numbers, list): return False for item in numbers: if not isinstance(item, int): return False return True"},{"question":"Develop a function in Python that generates and returns a list of the first N Fibonacci numbers, where N is a given non-negative integer. The function should also be capable of handling large values for N (up to 10^5).","solution":"def fibonacci_n_numbers(N): Generate a list of the first N Fibonacci numbers. :param N: A non-negative integer representing the number of Fibonacci numbers to generate. :return: A list of the first N Fibonacci numbers. if N == 0: return [] elif N == 1: return [0] fibs = [0, 1] for _ in range(2, N): fibs.append(fibs[-1] + fibs[-2]) return fibs"},{"question":"coding - write a code that takes a list of integers and returns the first pair of integers that add up to a given sum.","solution":"def find_pair_with_sum(nums, target): Returns the first pair of integers that add up to the target sum. If no such pair exists, returns None. Parameters: nums (list of int): List of integers to find the pair from. target (int): The target sum to find the pair for. Returns: tuple or None: A tuple containing the first pair of integers that add up to the target, or None if no such pair exists. seen = set() for num in nums: complement = target - num if complement in seen: return (complement, num) seen.add(num) return None"},{"question":"Develop a Python program to calculate the area of different types of triangles based on given inputs. The program should be flexible enough to compute the area for an equilateral, isosceles, and scalene triangle. Also, include error checking for invalid dimensions. Below is a piece of code that has some errors. You are required to fix those errors and add the missing features mentioned in the requirements.","solution":"import math def calculate_area(triangle_type, *args): Calculates the area of different types of triangles based on the given inputs. :param triangle_type: The type of triangle - \\"equilateral\\", \\"isosceles\\", or \\"scalene\\". :param args: Dimensions of the triangle. For equilateral, provide one side. For isosceles, provide two sides (the equal sides and the base). For scalene, provide three sides. :return: The area of the triangle. if triangle_type == \\"equilateral\\": if len(args) != 1 or args[0] <= 0: raise ValueError(\\"For equilateral triangle, provide one positive side length.\\") side = args[0] # Area calculation for an equilateral triangle return (math.sqrt(3) / 4) * side * side elif triangle_type == \\"isosceles\\": if len(args) != 2 or args[0] <= 0 or args[1] <= 0: raise ValueError(\\"For isosceles triangle, provide two positive side lengths (the equal side and the base).\\") equal_side, base = args[0], args[1] # Area calculation for an isosceles triangle height = math.sqrt(equal_side**2 - (base**2 / 4)) return (base * height) / 2 elif triangle_type == \\"scalene\\": if len(args) != 3 or any(side <= 0 for side in args): raise ValueError(\\"For scalene triangle, provide three positive side lengths.\\") a, b, c = args # Use Heron's formula to calculate area of scalene triangle s = (a + b + c) / 2 return math.sqrt(s * (s - a) * (s - b) * (s - c)) else: raise ValueError(\\"Invalid triangle type. Valid values are 'equilateral', 'isosceles', or 'scalene'.\\")"},{"question":"Write a python code to decipher the mode of a given set of values. In addition, handle cases for an empty list and where there are multiple modes. Your code should be able to identify and return all modes in case of a tie. For example, if your list is [2, 2, 3, 3, 4], your function should return [2, 3], as both have the highest frequency in the list.","solution":"def find_modes(values): Returns the mode(s) of the given list of values. If there are multiple modes, all of them are returned in a list. If the input list is empty, an empty list is returned. :param values: List of values to find the mode(s) for :type values: list :return: List of mode(s) :rtype: list if not values: return [] from collections import Counter counter = Counter(values) max_freq = max(counter.values()) modes = [key for key, freq in counter.items() if freq == max_freq] return modes"},{"question":"Is there a way to create a Python program that generates a sequence of DNA bases following specific rules? Specifically, I need the sequence to start with 'A', and each subsequent base should be one position ahead of the previous base in the order 'A', 'C', 'G', 'T'. Can you provide a solution for this? Here's an example of the required output: ['A', 'C', 'G', 'T', 'A', 'C', ...]","solution":"def generate_dna_sequence(length): Generates a sequence of DNA bases following the specific rules. bases = ['A', 'C', 'G', 'T'] sequence = [] for i in range(length): sequence.append(bases[i % len(bases)]) return sequence"},{"question":"Write a function in Python that takes two lists of integers, list1 and list2, and performs an operation specified by a string 'operation'. The operation could be 'add', 'subtract', 'multiply', or 'divide'. The function should perform the operation on corresponding elements of the two lists and return the result as a new list. Make sure to handle exceptions for division by zero.","solution":"def list_operation(list1, list2, operation): Perform element-wise operation on two lists of integers. Parameters: list1 (list of int): The first list of integers. list2 (list of int): The second list of integers. operation (str): The operation to perform ('add', 'subtract', 'multiply', 'divide'). Returns: list of int: The result of performing the operation on corresponding elements of the two lists. if len(list1) != len(list2): raise ValueError(\\"Both lists must have the same length\\") result = [] for a, b in zip(list1, list2): if operation == 'add': result.append(a + b) elif operation == 'subtract': result.append(a - b) elif operation == 'multiply': result.append(a * b) elif operation == 'divide': if b == 0: result.append(None) # or raise an error depending on the requirement else: result.append(a / b) else: raise ValueError(\\"Unsupported operation\\") return result"},{"question":"Given an array \`nums\` composed mostly of zeros with a few non-zero integers scattered throughout, devise an in-place algorithm to shift these non-zero elements to the start of the array, while maintaining their original order. This algorithm should group all the zero elements and move them to the end of the array. It is crucial to achieve this without allocating additional space or using extra data structures. In this context, the term 'in-place' implies that the manipulation of the array must occur within the array itself, without the use of another array to temporarily hold values during the process. The key focus is to prioritize space efficiency over time efficiency.","solution":"def move_non_zeros(nums): Move all non-zero elements to the beginning of the array while maintaining their order and move zeros to the end of the array, in-place. last_non_zero_found_at = 0 for i in range(len(nums)): if nums[i] != 0: nums[last_non_zero_found_at], nums[i] = nums[i], nums[last_non_zero_found_at] last_non_zero_found_at += 1"},{"question":"Write a Python function that converts an input number to its string representation using recursion, without using any built-in string conversion methods such as str() or format(). Specifically, develop a function named integerToString that accepts an integer parameter and returns a string that represents it. The function should be tailored to manage both positive and negative integers. Furthermore, you are required to implement a unit test utilizing the PyTest framework to corroborate the function's accuracy. You must ensure that the function passes the provided test case.","solution":"def integerToString(n): Converts an integer to its string representation using recursion. # Recursive helper function def helper(num): if num == 0: return '' else: return helper(num // 10) + chr(num % 10 + ord('0')) if n == 0: return '0' if n < 0: return '-' + helper(-n) else: return helper(n)"},{"question":"Create a function that takes in a list of strings, where each string represents a date and time in the format of \\"YYYY-MM-DD HH:MM:SS\\", and returns a new list of strings with the current local time in the same format for each input date and time. However, the input date and time should be treated as UTC time and converted to the local time of the user's system before adding to the output list.","solution":"from datetime import datetime import pytz def convert_utc_to_local(dates, timezone='UTC'): Takes a list of date strings in \\"YYYY-MM-DD HH:MM:SS\\" format, converts each from UTC to local time, and returns a list of converted date strings. converted_dates = [] local_tz = pytz.timezone(timezone) for date_str in dates: # Parsing the UTC datetime string utc_date = datetime.strptime(date_str, \\"%Y-%m-%d %H:%M:%S\\") # Setting the timezone to UTC utc_date = pytz.utc.localize(utc_date) # Converting to the local time local_date = utc_date.astimezone(local_tz) # Formatting back to string in the same format local_date_str = local_date.strftime(\\"%Y-%m-%d %H:%M:%S\\") converted_dates.append(local_date_str) return converted_dates"},{"question":"Write a function to find the closest pair of points in a given array of points. The function should have a time complexity of O(n log n) and should not use any additional data structures.","solution":"import math def closest_pair_of_points(points): This function finds the closest pair of points in a given list of points. The time complexity of the function is O(n log n). Parameters: points (list): A list of tuples, where each tuple represents the coordinates of a point (x, y). Returns: tuple: A tuple containing the closest pair of points and their distance. def distance(point1, point2): return math.sqrt((point1[0] - point2[0])**2 + (point1[1] - point2[1])**2) def closest_pair_rec(points_sorted_x, points_sorted_y): num_points = len(points_sorted_x) if num_points <= 3: return brute_force_closest_pair(points_sorted_x) mid = num_points // 2 left_sorted_x = points_sorted_x[:mid] right_sorted_x = points_sorted_x[mid:] midpoint = points_sorted_x[mid][0] left_sorted_y = list(filter(lambda point: point[0] <= midpoint, points_sorted_y)) right_sorted_y = list(filter(lambda point: point[0] > midpoint, points_sorted_y)) (left_pair, left_dist) = closest_pair_rec(left_sorted_x, left_sorted_y) (right_pair, right_dist) = closest_pair_rec(right_sorted_x, right_sorted_y) if left_dist <= right_dist: min_pair = left_pair min_dist = left_dist else: min_pair = right_pair min_dist = right_dist return closest_split_pair(points_sorted_x, points_sorted_y, min_dist, min_pair) def closest_split_pair(points_sorted_x, points_sorted_y, delta, best_pair): num_points = len(points_sorted_x) mid_x = points_sorted_x[num_points // 2][0] strip_points = [point for point in points_sorted_y if abs(point[0] - mid_x) < delta] best_dist = delta len_strip = len(strip_points) for i in range(len_strip): for j in range(i+1, min(i+7, len_strip)): p, q = strip_points[i], strip_points[j] dist = distance(p, q) if dist < best_dist: best_dist = dist best_pair = (p, q) return (best_pair, best_dist) def brute_force_closest_pair(points): min_dist = float('inf') pair = None for i in range(len(points)): for j in range(i + 1, len(points)): if i != j: dist = distance(points[i], points[j]) if dist < min_dist: min_dist = dist pair = (points[i], points[j]) return (pair, min_dist) points_sorted_x = sorted(points, key=lambda point: point[0]) points_sorted_y = sorted(points, key=lambda point: point[1]) result = closest_pair_rec(points_sorted_x, points_sorted_y) return result[0]"},{"question":"What is the function to format a given price value as a dollar amount in a Python program?","solution":"def format_price_as_dollar(amount): Formats the given price value as a dollar amount. Args: amount (float): The amount to be formatted. Returns: str: The formatted dollar amount as a string. return \\"{:,.2f}\\".format(amount)"},{"question":"You are given a sorted list of intervals, where each interval is represented as a pair of integers. Write a function that merges overlapping intervals and returns the resulting list of merged intervals.","solution":"def merge_intervals(intervals): Merges overlapping intervals and returns the resulting list of merged intervals. :param intervals: List of intervals where each interval is represented as a pair of integers [start, end] :return: List of merged intervals if not intervals: return [] # Sort intervals based on the start time intervals.sort(key=lambda x: x[0]) merged = [intervals[0]] for current in intervals[1:]: last = merged[-1] if current[0] <= last[1]: # There is an overlap last[1] = max(last[1], current[1]) # Merge the intervals else: merged.append(current) # No overlap, add to result return merged"},{"question":"Write a Python program that can determine the elements in a given list that are not present in another list. Also, as an added constraint, the program should not use any built-in Python functions such as \`set()\`. This task is similar to performing a set difference operation.","solution":"def list_difference(list1, list2): Returns a list of elements that are in list1 but not in list2. result = [] for item in list1: if item not in list2: result.append(item) return result"},{"question":"Given a list of integers, how can I create a generator in Python that generates tuples in the format (min, max, sum) for each window of 3 consecutive integers from the list?","solution":"def window_statistics(lst): A generator that yields a tuple (min, max, sum) for each window of 3 consecutive integers in the list. Args: lst (list): A list of integers. Yields: tuple: A tuple containing (min, max, sum) for each window of 3 consecutive integers. for i in range(len(lst) - 2): window = lst[i:i+3] yield (min(window), max(window), sum(window))"},{"question":"Define a Python function that takes two string parameters as input and provides an output of type boolean indicating whether the two string perimeters are identical. Consider the case sensitivity during comparisons.","solution":"def compare_strings(string1, string2): Compares two strings for equality, considering case sensitivity. Parameters: string1 (str): The first string to be compared. string2 (str): The second string to be compared. Returns: bool: True if strings are identical, False otherwise. return string1 == string2"},{"question":"Develop a Python function that calculates the n-th power of each element in a given array.","solution":"def power_array(elements, n): Returns a new array with each element raised to the n-th power. :param elements: List of numbers :param n: The power to raise each element to :return: List of numbers with each element raised to the n-th power return [x ** n for x in elements]"},{"question":"Given a list of integers, write a recursive function in Python to sort the list in descending order. However, your function should only make use of recursion and should not use any of the built-in sort functions or data structures (like lists or tuples). As a starting point, consider how you can implement a recursive function to sort the list in ascending order using the selection sort algorithm, and then modify it to sort in descending order.","solution":"def recursive_sort_descending(lst): Recursively sorts a list of integers in descending order. if len(lst) <= 1: return lst max_index = 0 for i in range(1, len(lst)): if lst[i] > lst[max_index]: max_index = i # Swap the found maximum element with the first element lst[0], lst[max_index] = lst[max_index], lst[0] # Recursively sort the remaining list return [lst[0]] + recursive_sort_descending(lst[1:])"},{"question":"Develop a tensor contraction program that can handle arbitrary rank tensors and user-defined contraction operations. The implemented algorithm must efficiently manage memory, avoid redundancy, and handle tensors with size of up to 1 million elements.","solution":"import numpy as np def tensor_contraction(tensor1, tensor2, axes): Performs tensor contraction on two tensors along specified axes. Parameters: tensor1 (ndarray): The first input tensor. tensor2 (ndarray): The second input tensor. axes (tuple): A tuple of two lists. The first list specifies the axes of the first tensor, and the second list specifies the axes of the second tensor to contract along. Returns: ndarray: Resulting tensor after contraction. return np.tensordot(tensor1, tensor2, axes=axes)"},{"question":"Create a python program that takes a sentence as input and returns the total number of words that contain at least one vowel and start with a consonant. The program should ignore any vowels that occur within a word that starts with a vowel.","solution":"def count_words_with_vowels_starting_with_consonant(sentence): Returns the total number of words that contain at least one vowel and start with a consonant. The function ignores any vowels in words that start with a vowel. vowels = 'aeiouAEIOU' words = sentence.split() count = 0 for word in words: if word and word[0] not in vowels: # word starts with a consonant if any(char in vowels for char in word): # word contains at least one vowel count += 1 return count"},{"question":"Write a Python function that takes in a number n and prints the first n fibonacci number sequences.","solution":"def fibonacci_sequence(n): Returns the first n Fibonacci numbers. Parameters: n (int): The number of Fibonacci numbers to return Returns: list: A list containing the first n Fibonacci numbers if n <= 0: return [] elif n == 1: return [0] fib_sequence = [0, 1] while len(fib_sequence) < n: fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"Write a Python program that eliminates all repeating elements from a provided list, maintaining the original sequence of the remaining elements. Unlike the simplified version, you should not use built-in Python functions, libraries, or modules for set operations or element removal. You are expected to apply fundamental programming constructs and algorithms to achieve the solution. Moreover, your solution must handle complex data types as list elements as well, such as nested lists, tuples, or dictionaries.","solution":"def eliminate_repeating_elements(lst): Eliminate all repeating elements from the provided list, maintaining the original sequence. This solution does not use any built-in functions for set operations or removal. result_list = [] for item in lst: if item not in result_list: result_list.append(item) return result_list"},{"question":"How would you implement a Python function that fetches the first non-repeating character from a given string? Additionally, consider strings that may include punctuation marks, digits, or white spaces, and your function needs to handle these inputs correctly.","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the given string. Considers all characters including punctuation, digits, and white spaces. :param s: Input string :return: The first non-repeating character or None if all characters repeat char_count = {} # Count occurrence of each character for char in s: char_count[char] = char_count.get(char, 0) + 1 # Find the first character with a count of 1 for char in s: if char_count[char] == 1: return char return None"},{"question":"Develop a Python function, utilizing a well-known library such as \`requests\`, to orchestrate an HTTP request towards a web page of your discretion. The function is expected to yield the response \\"Retrieved successfully\\" whenever the request proceeds as anticipated, and \\"Request Failed\\" if it does not. Additionally, the function should relay the HTTP status codes (for instance - 404, 503 etc.) together with the failure message. An inclusion of retry mechanism, which attempts the request a second time if it fails initially, is also required. The robustness of the function should be verifiable through the provided test cases.","solution":"import requests def fetch_webpage(url): Attempts to retrieve the given webpage, retrying once on failure. Args: url (str): The web address to request. Returns: tuple: A tuple containing a status message and an HTTP status code. try: response = requests.get(url) if response.status_code == 200: return (\\"Retrieved successfully\\", 200) else: return (f\\"Request Failed with status code {response.status_code}\\", response.status_code) except requests.exceptions.RequestException: # Retry once on failure try: response = requests.get(url) if response.status_code == 200: return (\\"Retrieved successfully\\", 200) else: return (f\\"Request Failed with status code {response.status_code}\\", response.status_code) except requests.exceptions.RequestException as e: return (\\"Request Failed\\", None)"},{"question":"Develop a function that creates a dictionary from two lists, one of keys and the other of values. If the keys list is longer than the values list, assign a default value to the remaining keys. If the values list is longer than the keys list, ignore the excess values.","solution":"def create_dict(keys, values, default_value=None): Creates a dictionary from two lists, one of keys and the other of values. If the keys list is longer than the values list, assign the default_value to the remaining keys. If the values list is longer than the keys list, ignore the excess values. if len(keys) > len(values): values.extend([default_value] * (len(keys) - len(values))) return dict(zip(keys, values))"},{"question":"Write a Python program for a rock paper scissors game. This game should allow two players to input their moves (rock, paper, or scissors) and determine the winner based on the rules of the game.","solution":"def determine_winner(player1, player2): Determines the winner of a rock-paper-scissors game. Parameters: player1 (str): The move of player 1 - either \\"rock\\", \\"paper\\", or \\"scissors\\". player2 (str): The move of player 2 - either \\"rock\\", \\"paper\\", or \\"scissors\\". Returns: str: The result of the game - either \\"Player 1 wins\\", \\"Player 2 wins\\", or \\"It's a draw\\". valid_moves = [\\"rock\\", \\"paper\\", \\"scissors\\"] if player1 not in valid_moves or player2 not in valid_moves: raise ValueError(\\"Both players must choose either 'rock', 'paper', or 'scissors'\\") if player1 == player2: return \\"It's a draw\\" if (player1 == \\"rock\\" and player2 == \\"scissors\\") or (player1 == \\"scissors\\" and player2 == \\"paper\\") or (player1 == \\"paper\\" and player2 == \\"rock\\"): return \\"Player 1 wins\\" return \\"Player 2 wins\\""},{"question":"Develop a Python script that requires an input string, then examines if the string comprises solely of numerical digits. This examination includes verifying against Unicode numeral characters beyond the ASCII range, ensuring accurate verification even for a global context.","solution":"def is_digit_string(input_string): Checks if the input string comprises solely of numerical digits including Unicode numeral characters. Args: input_string (str): The string to be checked. Returns: bool: True if the string consists solely of numerical digits, False otherwise. return input_string.isdigit()"},{"question":"Develop a Python algorithm to transform a nested list, specifically a 2D matrix, into a single linear list. Additionally, implement your solution recursively and then compare its performance with a non-recursive approach. Also, consider and handle possible exceptions in your solution.","solution":"def flatten_matrix_recursive(mat): Flattens a 2D matrix into a 1D list recursively. if not mat: return [] if isinstance(mat[0], list): return flatten_matrix_recursive(mat[0]) + flatten_matrix_recursive(mat[1:]) return mat[:1] + flatten_matrix_recursive(mat[1:]) def flatten_matrix_iterative(mat): Flattens a 2D matrix into a 1D list iteratively. flattened = [] for row in mat: if not isinstance(row, list): raise ValueError(\\"Input must be a 2D matrix\\") flattened.extend(row) return flattened"},{"question":"Given a binary tree, write a function to serialize and deserialize the tree. Additionally, implement an order of serialization such that when you deserialize it, the tree should be reconstructed in level order (Breadth-First Search order) rather than the regular preorder traversal. Ensure your implementation can handle a large number of nodes efficiently, considering time and space complexity.","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def serialize(root): Encodes a tree to a single string. if not root: return \\"\\" result = [] queue = deque([root]) while queue: node = queue.popleft() if node: result.append(str(node.val)) queue.append(node.left) queue.append(node.right) else: result.append(\\"null\\") return ','.join(result) def deserialize(data): Decodes your encoded data to tree. if not data: return None node_values = data.split(',') root = TreeNode(int(node_values[0])) queue = deque([root]) i = 1 while queue and i < len(node_values): current = queue.popleft() if node_values[i] != \\"null\\": current.left = TreeNode(int(node_values[i])) queue.append(current.left) i += 1 if i < len(node_values) and node_values[i] != \\"null\\": current.right = TreeNode(int(node_values[i])) queue.append(current.right) i += 1 return root"},{"question":"Devise an arbitrary alphanumeric string utilizing individual characters ranging from the alphabets A-Z and numerical digits 0-9. The string should not exceed 10 characters but must contain at least one lowercase alphabet from a-z and at least one special character from the list @, #, . Write a function to validate if a given string satisfies these conditions.","solution":"import re def is_valid_string(s): Returns True if the given string: - Contains at least one lowercase letter from a-z. - Contains at least one special character from @, #, . - Is 10 characters or less. Returns False otherwise. if len(s) > 10: return False if not re.search(\\"[a-z]\\", s): return False if not re.search(\\"[@#]\\", s): return False return True"},{"question":"Given two strings s1 and s2, write a Python program to find whether s1 is an anagram of s2, considering case sensitivity and whitespace.","solution":"def is_anagram(s1, s2): Returns True if s1 is an anagram of s2, considering case sensitivity and whitespace. return sorted(s1) == sorted(s2)"},{"question":"Is there a way to determine if a given array has any duplicate elements using programming?","solution":"def has_duplicates(arr): Returns True if the array has duplicates, False otherwise. seen = set() for element in arr: if element in seen: return True seen.add(element) return False"},{"question":"Create a Python function to insert a new element in a list at the given index, without using built-in methods like insert() or append().","solution":"def insert_at_index(lst, index, element): Inserts an element into the list at the specified index. if index < 0 or index > len(lst): raise IndexError(\\"Index out of range\\") # Generate a new list with the element inserted at the correct position new_lst = lst[:index] + [element] + lst[index:] return new_lst"},{"question":"Divide a list into n sub-lists with balanced sizes using Python. The list elements should be distributed as evenly as possible among the sub-lists. The order of the elements in the original list should be preserved in the sub-lists.","solution":"def divide_list(lst, n): Divides a list into n sub-lists with balanced sizes, distributing elements as evenly as possible among the sub-lists. The order of elements in the original list is preserved. Parameters: lst (list): The list to be divided. n (int): The number of sub-lists. Returns: list of lists: A list containing n sub-lists with balanced sizes. if n <= 0: raise ValueError(\\"Number of sub-lists must be a positive integer\\") result = [[] for _ in range(n)] for i, elem in enumerate(lst): result[i % n].append(elem) return result"},{"question":"Given the sorted list [1, 2, 3, 4, 5], write a Python function to insert a given value (x) into the correct position in the list to maintain the sorted order. Additionally, implement the function in a way that minimizes the use of built-in functions, except for the list indexing.","solution":"def insert_into_sorted_list(sorted_list, x): Inserts the value x into the sorted list such that the list remains sorted. # Edge case: if the list is empty, return a list with the single element x if not sorted_list: return [x] # Traverse the list to find the correct insertion point for i in range(len(sorted_list)): if sorted_list[i] >= x: return sorted_list[:i] + [x] + sorted_list[i:] # If x is greater than all elements in the list, append x at the end return sorted_list + [x]"},{"question":"Create a text adventure game in Python that allows the player to interact with objects, solve puzzles, and fight enemies using a combination of text input and menu-based commands. The game should have a minimum of three different locations for the player to explore, each with their own unique objects, puzzles, and enemies. The game should also have a non-linear storyline, where the player's choices can affect the outcome of the game. Additionally, the game should include a character creation system, allowing the player to customize their character's appearance, skills, and abilities.","solution":"class Character: def __init__(self, name, appearance, skills, abilities): self.name = name self.appearance = appearance self.skills = skills self.abilities = abilities self.health = 100 self.inventory = [] def __str__(self): return f\\"Character: {self.name}, Appearance: {self.appearance}, Skills: {self.skills}, Abilities: {self.abilities}, Health: {self.health}, Inventory: {self.inventory}\\" class Game: def __init__(self): self.locations = { \\"Forest\\": {\\"objects\\": [\\"Stick\\", \\"Stone\\"], \\"puzzles\\": [\\"Bridge\\"], \\"enemies\\": [\\"Goblin\\"]}, \\"Castle\\": {\\"objects\\": [\\"Sword\\", \\"Shield\\"], \\"puzzles\\": [\\"Locked Door\\"], \\"enemies\\": [\\"Guard\\"]}, \\"Cave\\": {\\"objects\\": [\\"Torch\\", \\"Map\\"], \\"puzzles\\": [\\"Labyrinth\\"], \\"enemies\\": [\\"Dragon\\"]} } self.current_location = \\"Forest\\" self.character = None def create_character(self, name, appearance, skills, abilities): self.character = Character(name, appearance, skills, abilities) def explore_location(self): location_info = self.locations[self.current_location] return f\\"Exploring {self.current_location}: Objects: {location_info['objects']}, Puzzles: {location_info['puzzles']}, Enemies: {location_info['enemies']}\\" def solve_puzzle(self, puzzle): if puzzle in self.locations[self.current_location]['puzzles']: return f\\"Solving {puzzle} puzzle.\\" return \\"Puzzle not found!\\" def fight_enemy(self, enemy): if enemy in self.locations[self.current_location]['enemies']: self.character.health -= 10 # Simulate a fight return f\\"Fighting {enemy}. Health remaining: {self.character.health}\\" return \\"Enemy not found!\\" def move_to_location(self, new_location): if new_location in self.locations and new_location != self.current_location: self.current_location = new_location return f\\"Moved to {new_location}\\" return \\"Invalid location or already at location\\" # Example instantiation to demonstrate functionality game = Game() game.create_character(name=\\"Hero\\", appearance=\\"Tall, with a scar\\", skills=\\"Swordsmanship\\", abilities=\\"Magic\\") print(game.character) print(game.explore_location()) print(game.solve_puzzle(\\"Bridge\\")) print(game.fight_enemy(\\"Goblin\\")) print(game.move_to_location(\\"Castle\\")) print(game.explore_location())"},{"question":"Given a string, write a function in Python to check if the string is a palindrome.","solution":"def is_palindrome(s): Checks if the given string s is a palindrome. Parameters: s (str): The string to check. Returns: bool: True if s is a palindrome, False otherwise. # Clean up the string: remove spaces and convert to lowercase clean_s = ''.join(char.lower() for char in s if char.isalnum()) return clean_s == clean_s[::-1]"},{"question":"Compose a Python program that not only converts temperatures from Fahrenheit to Celsius but also vice versa and Kelvin. The program should cater for the user input both in terms of quantity (multiple temperatures) and quality (Validity of input). Ensure to include exception handling to deal with inappropriate or invalid inputs.","solution":"def fahrenheit_to_celsius(fahrenheit): Converts Fahrenheit to Celsius. try: f = float(fahrenheit) return (f - 32) * 5.0/9.0 except ValueError: raise ValueError(\\"Invalid input: temperature must be a numerical value.\\") def celsius_to_fahrenheit(celsius): Converts Celsius to Fahrenheit. try: c = float(celsius) return (c * 9.0/5.0) + 32 except ValueError: raise ValueError(\\"Invalid input: temperature must be a numerical value.\\") def celsius_to_kelvin(celsius): Converts Celsius to Kelvin. try: c = float(celsius) return c + 273.15 except ValueError: raise ValueError(\\"Invalid input: temperature must be a numerical value.\\") def kelvin_to_celsius(kelvin): Converts Kelvin to Celsius. try: k = float(kelvin) return k - 273.15 except ValueError: raise ValueError(\\"Invalid input: temperature must be a numerical value.\\")"},{"question":"Is there a Python method to extract all items from a dictionary whose corresponding values exceed a certain threshold?","solution":"def filter_dict_by_value(d, threshold): Returns a dictionary containing only the items where the value exceeds the threshold. Parameters: d (dict): Dictionary to filter. threshold (number): Threshold to compare values against. Returns: dict: A dictionary with items satisfying the value condition. return {key: value for key, value in d.items() if value > threshold}"},{"question":"Create a function to calculate the Fibonacci series from 0 to n. However, this time, you are not allowed to use recursion or any built-in functions or libraries to solve the problem. You should also optimize your solution to have a time complexity of O(n) and a space complexity of O(1).","solution":"def fibonacci_series(n): Generates the Fibonacci series up to the nth element (inclusive). Returns a list containing the Fibonacci series. if n < 0: raise ValueError(\\"n must be a non-negative integer.\\") if n == 0: return [0] fib_series = [0, 1] a, b = fib_series[-2], fib_series[-1] for _ in range(2, n + 1): next_element = a + b fib_series.append(next_element) a, b = b, next_element return fib_series"},{"question":"Write a function 'divideList' which takes a list of integers and an integer 'n', and divides the list into 'n' parts of roughly equal size. The elements should remain in their original order in the sublists.","solution":"def divideList(lst, n): Divides the list into 'n' parts of roughly equal size. if not lst: return [[] for _ in range(n)] len_lst = len(lst) k, m = divmod(len_lst, n) return [lst[i * k + min(i, m):(i + 1) * k + min(i + 1, m)] for i in range(n)]"},{"question":"I'm new to programming and I want to create a simple web application using Python. Can you show me an example of how to create a basic web application using the Flask framework?","solution":"from flask import Flask app = Flask(__name__) @app.route('/') def home(): Home page of the web application. return 'Hello, World!' if __name__ == '__main__': app.run(debug=True)"},{"question":"Create a Python function that takes a list of dates as input in the format YYYY-MM-DD and returns the date that is the most recent.","solution":"from datetime import datetime def most_recent_date(dates): Returns the most recent date from the list of dates. date_format = \\"%Y-%m-%d\\" dates = [datetime.strptime(date, date_format) for date in dates] recent_date = max(dates) return recent_date.strftime(date_format)"},{"question":"Create a function that takes two strings as parameters and returns true if the strings are anagrams of each other, false otherwise. An anagram is a word or phrase formed by rearranging the letters of another word or phrase. The function should also be case-insensitive.","solution":"def are_anagrams(str1, str2): Returns True if str1 and str2 are anagrams of each other, False otherwise. This function is case-insensitive. # Normalize the strings by converting them to lower case and sorting them return sorted(str1.lower()) == sorted(str2.lower())"},{"question":"What is the computational complexity of the bubble sort algorithm in terms of time and space? Furthermore, implement a version of bubble sort that sorts an array of strings based on their lexicographical order, ensuring you analyze its computational complexity as well.","solution":"def bubble_sort(arr): Sort an array of strings in lexicographical order using bubble sort algorithm. Parameters: arr (list): The list of strings to sort. Returns: list: The sorted list. n = len(arr) for i in range(n): swapped = False for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] swapped = True if not swapped: break return arr # Computational Complexity: # Time Complexity: O(n^2) in the worst and average case, O(n) in the best case (when the array is already sorted) # Space Complexity: O(1) as it is an in-place sorting algorithm."},{"question":"Write a python program that processes email addresses based on different conditions. The program needs to take a list of email addresses as input and separate them into three different lists based on the domain of emails. Domains to be considered are 'gmail.com', 'yahoo.com' and 'hotmail.com'. If any of these domains are not present in the email address, then such emails should be discarded.","solution":"def categorize_emails(email_list): Categorizes email addresses based on their domain. Parameters: email_list (list): List of email addresses. Returns: tuple: Three lists containing emails with domains 'gmail.com', 'yahoo.com', and 'hotmail.com' respectively. gmail_emails = [] yahoo_emails = [] hotmail_emails = [] for email in email_list: if email.endswith('@gmail.com'): gmail_emails.append(email) elif email.endswith('@yahoo.com'): yahoo_emails.append(email) elif email.endswith('@hotmail.com'): hotmail_emails.append(email) return gmail_emails, yahoo_emails, hotmail_emails"},{"question":"Given a list of numbers, use the Python slice operator to return the last five elements of the list in reverse order. Additionally, you are not allowed to use the built-in reversed() function or the slicing syntax with negative indices.","solution":"def reverse_last_five(lst): Return the last five elements of the list in reverse order. if len(lst) < 5: last_five = lst else: last_five = lst[-5:] return last_five[::-1]"},{"question":"Design a Python function snippet to Display Low Hygiene in shared spaces: Maintaining Personal Hygiene in Shared Spaces for Analysis for Professionals. Implement if/else or switch/case statements to handle different conditions related to the Reliability. Provide detailed comments explaining your control flow and the reasoning behind each decision.","solution":"def check_hygiene_level(hygiene_score): Returns a statement indicating the level of hygiene in shared spaces based on the provided score. Scores range from 0 to 100: - 0-39 : Poor Hygiene - 40-69: Moderate Hygiene - 70-89: Good Hygiene - 90-100: Excellent Hygiene # Condition to check for poor hygiene if hygiene_score >= 0 and hygiene_score <= 39: return \\"Poor Hygiene\\" # Condition to check for moderate hygiene elif hygiene_score >= 40 and hygiene_score <= 69: return \\"Moderate Hygiene\\" # Condition to check for good hygiene elif hygiene_score >= 70 and hygiene_score <= 89: return \\"Good Hygiene\\" # Condition to check for excellent hygiene elif hygiene_score >= 90 and hygiene_score <= 100: return \\"Excellent Hygiene\\" # Condition to handle invalid scores else: return \\"Invalid Score\\""},{"question":"Assuming you have a list of numbers, explain how you would sort them in ascending order using the bubble sort algorithm. Additionally, include the time complexity of the algorithm and explain how it can be optimized using a flag variable to indicate if the list is already sorted. Also, modify the code to sort the list in descending order instead of ascending order.","solution":"def bubble_sort_ascending(arr): Sorts a list of numbers in ascending order using the bubble sort algorithm. n = len(arr) for i in range(n): # Initially, we assume the list is already sorted already_sorted = True # The last i elements are already in place for j in range(n - i - 1): if arr[j] > arr[j + 1]: # Swap if the current element is greater than the next arr[j], arr[j + 1] = arr[j + 1], arr[j] # Since we had to swap, the list is not sorted already_sorted = False # If there were no swaps during the last pass, the list is sorted if already_sorted: break return arr def bubble_sort_descending(arr): Sorts a list of numbers in descending order using a modified bubble sort algorithm. n = len(arr) for i in range(n): already_sorted = True for j in range(n - i - 1): if arr[j] < arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] already_sorted = False if already_sorted: break return arr # Time Complexity: # The time complexity of the bubble sort algorithm is O(n^2) in the worst and average cases. # The best case time complexity, when the list is already sorted, is O(n) if we use the optimized version with the flag variable."},{"question":"Develop a Python function that accepts two lists as input and returns a new list containing the element-wise product of the input lists. Then, write tests for this function to verify its correctness across various scenarios.","solution":"def elementwise_product(list1, list2): Returns a new list containing the element-wise product of the input lists. if len(list1) != len(list2): raise ValueError(\\"Input lists must be of the same length\\") return [a * b for a, b in zip(list1, list2)]"},{"question":"Given a list of integers, write a program to convert it into a list of strings in Roman numeral format. Additionally, implement a function to add these Roman numerals without converting them back to integers. Your solution should not use any built-in functions for the conversion between integers and Roman numerals.","solution":"def int_to_roman(num): Convert an integer to a Roman numeral. val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = '' i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syb[i] num -= val[i] i += 1 return roman_num def roman_to_int(s): Convert a Roman numeral string to an integer. roman = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000} total = 0 prev_value = 0 for ch in reversed(s): if roman[ch] >= prev_value: total += roman[ch] else: total -= roman[ch] prev_value = roman[ch] return total def add_roman_numerals(roman_numerals): Add Roman numerals without converting them back to integers. total = sum(map(roman_to_int, roman_numerals)) return int_to_roman(total) def convert_list_to_roman(int_list): Convert a list of integers to a list of Roman numeral strings. return [int_to_roman(num) for num in int_list]"},{"question":"Below is an algorithm for sorting an array of numbers. Your task is to implement this algorithm in a programming language of your choice and then use it to sort an array of 1 million random numbers between 1 and 100. After sorting the array, you need to find the median of the sorted array and return it.","solution":"def quicksort(arr): This function implements the quicksort algorithm. if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right) def find_median(arr): This function returns the median of a sorted array. n = len(arr) if n % 2 == 0: return (arr[n//2 - 1] + arr[n//2]) / 2 else: return arr[n//2] def sort_and_find_median(arr): This function sorts the array and finds the median. sorted_arr = quicksort(arr) return find_median(sorted_arr)"},{"question":"Given the erroneous code below, correct, analyze, and optimize it to find the **three** largest unique numbers in a large array using a heap data structure instead of an array. Your solution should work efficiently even when the array is extremely large, containing up to 1M elements, and you should explain the time complexity of your solution.","solution":"import heapq def find_three_largest_unique_numbers(arr): Returns the three largest unique numbers from the given array using a heap data structure. # Use a set for unique values unique_numbers = set(arr) if len(unique_numbers) < 3: raise ValueError(\\"Array must contain at least three unique numbers\\") # Use nlargest from heapq to find the three largest unique numbers three_largest = heapq.nlargest(3, unique_numbers) return three_largest"},{"question":"Create a function that takes in two numbers, N and M, where N is the number of times \\"Hello World\\" should be printed and M is the number of times the entire loop should run. The function should print \\"Hello World\\" N times for each loop iteration. However, for each iteration that is a multiple of 3, the function should print \\"Hello Universe\\" instead. If the iteration number is a multiple of 5, the function should print \\"Welcome to the Universe\\". If the iteration number is a multiple of both 3 and 5, the function should print \\"Welcome to the Multiverse\\".","solution":"def print_messages(N, M): Prints \\"Hello World\\" N times for each of M iterations, with special messages for multiples of 3, 5, and both. For i in range(1, M+1): - if i is multiple of 3 and 5, print \\"Welcome to the Multiverse\\" N times. - if i is multiple of 5, print \\"Welcome to the Universe\\" N times. - if i is multiple of 3, print \\"Hello Universe\\" N times. - otherwise, print \\"Hello World\\" N times. Parameters: N (int): Number of times \\"Hello World\\" should be printed for each iteration. M (int): Total number of iterations. for i in range(1, M + 1): if i % 3 == 0 and i % 5 == 0: message = \\"Welcome to the Multiverse\\" elif i % 5 == 0: message = \\"Welcome to the Universe\\" elif i % 3 == 0: message = \\"Hello Universe\\" else: message = \\"Hello World\\" for _ in range(N): print(message)"},{"question":"Write a Python function that takes a sentence as input and returns the count of each unique vowel in the sentence. The function should be case-insensitive and ignore non-alphabetic characters.","solution":"def count_vowels(sentence): Takes a sentence as input and returns the count of each unique vowel in the sentence. The function is case-insensitive and ignores non-alphabetic characters. vowels = 'aeiou' sentence = sentence.lower() vowel_count = {vowel: 0 for vowel in vowels} for char in sentence: if char in vowels: vowel_count[char] += 1 return vowel_count"},{"question":"In this task, you will be given a list and you need to perform bubble sort on that list. Bubble Sort is the simplest sorting algorithm that works by repeatedly swapping the adjacent elements if they are in the wrong order. You need to write a function, that takes a list as an input and returns the sorted list.","solution":"def bubble_sort(arr): Sorts a list using the bubble sort algorithm and returns the sorted list. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"How can I randomly shuffle the characters in a string using Python without relying on built-in shuffle functions? I want to write my own code for this purpose.","solution":"import random def shuffle_string(s): Returns a new string with the characters of the input string shuffled. # Convert the string to a list of characters char_list = list(s) # Get the length of the list n = len(char_list) # Use Fisher-Yates shuffle algorithm for i in range(n-1, 0, -1): # Pick a random index from 0 to i j = random.randint(0, i) # Swap characters at indices i and j char_list[i], char_list[j] = char_list[j], char_list[i] # Convert the list back to a string return ''.join(char_list)"},{"question":"Create a Python function that adds a given number to every element in a given list.","solution":"def add_to_each_element(lst, num): Adds a given number to every element in the given list. Parameters: lst (list): The list of numbers. num (int/float): The number to add to each element of the list. Returns: list: A new list where the given number has been added to each element of the input list. return [x + num for x in lst]"},{"question":"Write me a Flask python program that has two endpoints. The first one is taking the input in form of json that has three fields, \\"base\\", \\"exponent\\", and \\"action\\". The second endpoint will return the result of the operation.","solution":"from flask import Flask, request, jsonify app = Flask(__name__) operations = {} @app.route('/store_operation', methods=['POST']) def store_operation(): data = request.get_json() base = data.get('base') exponent = data.get('exponent') action = data.get('action') if base is None or exponent is None or action is None: return jsonify({\\"error\\": \\"Missing fields\\"}), 400 operation_id = len(operations) + 1 operations[operation_id] = {'base': base, 'exponent': exponent, 'action': action} return jsonify({\\"operation_id\\": operation_id}), 200 @app.route('/get_result', methods=['GET']) def get_result(): operation_id = int(request.args.get('operation_id')) operation = operations.get(operation_id) if not operation: return jsonify({\\"error\\": \\"Operation not found\\"}), 404 base = operation['base'] exponent = operation['exponent'] action = operation['action'] if action == 'power': result = base ** exponent else: return jsonify({\\"error\\": \\"Unknown action\\"}), 400 return jsonify({\\"result\\": result}), 200 if __name__ == '__main__': app.run(debug=True)"},{"question":"Write a function to remove all occurrences of specified elements from a list, but only if their current count in the list is more than a given threshold. The elements and threshold should be passed as parameters. Also, if the element to be removed is not present in the list, the function should print a message saying 'Element not found'.","solution":"def remove_elements_by_threshold(lst, elements, threshold): Removes all occurrences of specified elements from the list if their current count is more than a given threshold. If the element to be removed is not found, it prints 'Element not found'. :param lst: List of elements :param elements: List of elements to be removed :param threshold: Threshold count for removal :return: List with specified elements removed if their count is more than the threshold for element in elements: count = lst.count(element) if count: if count > threshold: lst = [x for x in lst if x != element] else: print(f'Element not found: {element}') return lst"},{"question":"Create a function which takes a string and invokes all the print statements within the string. The string may contain multiple print statements separated by new lines. Each print statement should be invoked individually and the output should be captured and returned as a list of strings. The function should also handle cases where there are no print statements in the string.","solution":"def invoke_print_statements(string): Takes a string containing multiple print statements separated by new lines, invokes each print statement and captures the output, returning them as a list of strings. import io import sys # Save the original stdout for later original_stdout = sys.stdout # Create a string buffer to capture the outputs output_buffer = io.StringIO() sys.stdout = output_buffer # Split the input string into individual lines lines = string.split('n') try: # Execute each line for line in lines: if line.strip().startswith('print'): exec(line) # Get the entire content of the buffer output_buffer.seek(0) output = output_buffer.read().splitlines() finally: # Reset stdout back to the original value sys.stdout = original_stdout return output"},{"question":"I'd like to write a python module that will take the input from google calendar event format and convert it into another calendar format. In particular, I need to parse the Google Calendar event format and produce the output in a dict format, which later can be converted into other formats, like iso or ical. Can you help me with that?","solution":"def parse_google_calendar_event(google_event): Parses a Google Calendar event format and returns a dictionary. Arguments: google_event -- dictionary representing a Google Calendar event Returns: A dictionary containing relevant information extracted from the Google Calendar event. parsed_event = { \\"title\\": google_event.get(\\"summary\\", \\"\\"), \\"start_time\\": google_event.get(\\"start\\", {}).get(\\"dateTime\\", \\"\\"), \\"end_time\\": google_event.get(\\"end\\", {}).get(\\"dateTime\\", \\"\\"), \\"location\\": google_event.get(\\"location\\", \\"\\"), \\"description\\": google_event.get(\\"description\\", \\"\\"), \\"attendees\\": [ attendee.get(\\"email\\", \\"\\") for attendee in google_event.get(\\"attendees\\", []) ], } return parsed_event"},{"question":"Develop a program that not only converts the given text to uppercase and replaces all spaces with underscores, but also reverses the sequence of the characters. Moreover, add the functionality to count the occurrences of each letter and return the letter with the highest repeatability. If there are multiple letters with the same high frequency, return them all in a list in alphabetical order.","solution":"def transform_text(text): Transforms the given text by converting it to uppercase, replacing spaces with underscores, and reversing the sequence of the characters. Additionally, returns the letter(s) with the highest repeatability in a list in alphabetical order. transformed_text = text.upper().replace(' ', '_')[::-1] letter_counts = {} for char in transformed_text: if char.isalpha(): # consider only alphabets if char in letter_counts: letter_counts[char] += 1 else: letter_counts[char] = 1 max_count = max(letter_counts.values(), default=0) most_frequent_letters = [letter for letter, count in letter_counts.items() if count == max_count] most_frequent_letters.sort() return transformed_text, most_frequent_letters"},{"question":"Write a Python code to create a list of prime numbers from 1 to 100.","solution":"def is_prime(n): Returns True if n is a prime number, else False. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def primes_up_to_100(): Returns a list of prime numbers from 1 to 100. return [n for n in range(1, 101) if is_prime(n)]"},{"question":"In Python, how could you print a list from the last element to the first element, without using any inbuilt functions like reverse()? Please devise an algorithm yourself for this task.","solution":"def reverse_list(lst): Returns a new list which is the reverse of the input list. reversed_lst = [] for i in range(len(lst) - 1, -1, -1): reversed_lst.append(lst[i]) return reversed_lst"},{"question":"How can I create a Python script to compute the sum of all integers from 0 to a given number 'n' using an iterative approach? Also, please guide me on how to determine the time complexity of this solution. Additionally, can you illustrate how to modify the program to use recursion instead and discuss its time complexity? Lastly, could you provide an example of how to use list comprehension for this task?","solution":"def sum_iterative(n): Computes the sum of all integers from 0 to n using an iterative approach. total = 0 for i in range(n + 1): total += i return total def sum_recursive(n): Computes the sum of all integers from 0 to n using recursion. if n == 0: return 0 else: return n + sum_recursive(n - 1) def sum_list_comprehension(n): Computes the sum of all integers from 0 to n using list comprehension and the sum() function. return sum([i for i in range(n + 1)])"},{"question":"Develop a function to print an integer with its digits in reverse order, but the function should not use any built-in string or array functions to reverse the integer. The function should have a time complexity of O(log n), where n is the magnitude of the integer. Additionally, the function should handle negative integers correctly and reverse the sign as well.","solution":"def reverse_integer(n): Returns the integer with its digits reversed. Handles negative integers by reversing the absolute value and restoring the negative sign. reversed_num = 0 is_negative = n < 0 n = abs(n) while n != 0: reversed_num = reversed_num * 10 + n % 10 n //= 10 return -reversed_num if is_negative else reversed_num"},{"question":"For a given directed graph with N nodes, labeled 1 to N, and M directed edges, you have to find out whether there is a directed cycle in the graph. A directed cycle is a set of nodes that you can start at, follow the directed edges, and return to where you started without backtracking. Write a program to determine if such a cycle exists in a given graph.","solution":"from collections import defaultdict def has_cycle(num_nodes, edges): Determines if the given directed graph has a cycle. Parameters: num_nodes (int): Number of nodes in the graph (nodes are labeled from 1 to num_nodes). edges (List[Tuple[int, int]]): List of directed edges in the graph. Returns: bool: True if there is a cycle in the graph, False otherwise. def dfs(node): if visited[node] == 2: return False if visited[node] == 1: return True visited[node] = 1 # mark as being visited for neighbor in graph[node]: if dfs(neighbor): return True visited[node] = 2 # mark as fully explored return False graph = defaultdict(list) for u, v in edges: graph[u].append(v) visited = [0] * (num_nodes + 1) for node in range(1, num_nodes + 1): if visited[node] == 0: if dfs(node): return True return False"},{"question":"Create a program that calculates the factorial of a given number using a recursive function and ensure that the function is implemented in a separate module.","solution":"# solution.py def factorial(n): Returns the factorial of a non-negative integer n. The factorial of n is the product of all positive integers less than or equal to n. For n = 0, factorial is 1 by definition. :param n: int, non-negative integer whose factorial is to be computed :return: int, factorial of n :raises: ValueError if n is a negative integer if n < 0: raise ValueError(\\"Factorial is not defined for negative integers\\") elif n == 0: return 1 else: return n * factorial(n - 1)"},{"question":"Write a python code to detect anagrams in a given list of words. Your solution should be case-insensitive and consider the order of characters in the words. Additionally, you should optimize your code to have a time complexity of O(n * k log k), where n is the number of words and k is the maximum length of a word. You should not use any built-in functions or libraries for sorting or comparing strings.","solution":"def detect_anagrams(word_list): Detects anagrams in a given list of words. This function is case-insensitive. :param word_list: List of words. :return: A dictionary where the key is the sorted word and the value is a list of anagrams. def sort_string(s): Sorts a string in alphabetical order without using built-in functions. char_list = list(s) for i in range(len(char_list)): for j in range(i + 1, len(char_list)): if char_list[i] > char_list[j]: char_list[i], char_list[j] = char_list[j], char_list[i] return ''.join(char_list) anagrams = {} for word in word_list: clean_word = word.lower() sorted_word = sort_string(clean_word) if sorted_word in anagrams: anagrams[sorted_word].append(word) else: anagrams[sorted_word] = [word] return anagrams"},{"question":"Given a function that takes two parameters \\"a\\" and \\"b\\", write a code to add the two parameters together and return the result.","solution":"def add(a, b): Returns the sum of a and b. return a + b"},{"question":"Create a Python decorator that restricts the execution of a function to a specific user who has a unique membership level in a database. In this case, the user \\"John\\" has a membership level of 5 or above and has a unique attribute \\"vip\\" set to True. Ensure the decorator can extract the user's information from an external database and verify their membership level and vip status before allowing the function to run. Additionally, the decorator should log the time taken for the function to execute and the output of the function, and send this information to a logging database.","solution":"import time import functools # Assume this is the database database = { 'John': { 'membership_level': 5, 'vip': True }, 'Doe': { 'membership_level': 3, 'vip': False } } # Simplified logging \\"database\\" log_database = [] def user_restriction_decorator(func): @functools.wraps(func) def wrapper(*args, **kwargs): user = kwargs.get('user', None) if user and user in database: user_info = database[user] if user_info['membership_level'] >= 5 and user_info['vip']: start_time = time.time() result = func(*args, **kwargs) end_time = time.time() log_entry = { 'user': user, 'execution_time': end_time - start_time, 'result': result } log_database.append(log_entry) return result else: raise PermissionError(\\"User does not have the required membership level or VIP status.\\") else: raise ValueError(\\"User not found in the database.\\") return wrapper @user_restriction_decorator def restricted_function(data, user=None): # Example function that performs some data processing return data * 2"},{"question":"In Python, write a function to print out the first 50 numbers in the Fibonacci sequence, but without using recursion. Additionally, implement a mechanism to handle possible large number overflow. Also, consider the efficiency of your code in terms of time and space complexity.","solution":"def fibonacci_sequence(n=50): Print out the first n numbers in the Fibonacci sequence without using recursion. This implementation handles large numbers by utilizing Python's native support for arbitrary-precision integers. if n <= 0: return [] sequence = [] a, b = 0, 1 for _ in range(n): sequence.append(a) a, b = b, a + b return sequence"},{"question":"Write a code snippet that multiplies two matrices. The matrices are represented as two-dimensional arrays, where each inner array represents a row. The number of columns in the first matrix is equal to the number of rows in the second matrix.","solution":"def matrix_multiply(A, B): Multiplies two matrices A and B. The number of columns in A must be equal to the number of rows in B. :param A: List of lists where each inner list represents a row in matrix A. :param B: List of lists where each inner list represents a row in matrix B. :returns: The result of matrix multiplication, also as a list of lists. # Number of rows in A num_rows_A = len(A) # Number of columns in A (and also the number of rows in B) num_cols_A = len(A[0]) # Number of columns in B num_cols_B = len(B[0]) # Initialize the result matrix with 0s result = [[0 for _ in range(num_cols_B)] for _ in range(num_rows_A)] # Perform matrix multiplication for i in range(num_rows_A): for j in range(num_cols_B): for k in range(num_cols_A): result[i][j] += A[i][k] * B[k][j] return result"},{"question":"Given a set of words, generate a python program that can determine if there exists a pair of distinct indices (i, j) in the array such that the words at those indices are anagrams of each other.","solution":"def are_anagrams(word1, word2): Check if two words are anagrams of each other. return sorted(word1) == sorted(word2) def find_anagram_pair(words): Determine if there exists a pair of distinct indices (i, j) in the array such that the words at those indices are anagrams of each other. Returns True if such a pair exists, otherwise False. for i in range(len(words)): for j in range(i + 1, len(words)): if are_anagrams(words[i], words[j]): return True return False"},{"question":"Write a function in Python that accepts a list of numbers and returns a list of the squares of the numbers. Additionally, the function must handle potential exceptions intelligently like non-numeric inputs, and return an appropriate error message.","solution":"def square_numbers(numbers): Returns a list of the squares of the given list of numbers. If the input contains non-numeric values, an error message is returned. :param numbers: List of numbers to be squared :return: List of squares of the numbers or error message try: squared_numbers = [n ** 2 for n in numbers] return squared_numbers except TypeError: return \\"Error: All elements in the list must be numbers\\""},{"question":"You are an AI program specialized in developing search algorithms for finding a specific number in an unsorted integer list. You have been asked to implement a linear search to find a given number in the list.","solution":"def linear_search(arr, target): Implements a linear search to find a target number in an unsorted list. Parameters: arr (list of int): The list in which to search for the target. target (int): The number to search for in the list. Returns: int: The index of the target number in the list if found, otherwise -1. for i, num in enumerate(arr): if num == target: return i return -1"},{"question":"Write an algorithm in Python that counts from 0 to 100, but only prints the prime numbers.","solution":"def is_prime(n): Determines if a number is prime. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def print_primes_to_100(): Prints prime numbers from 0 to 100. primes = [] for number in range(101): if is_prime(number): primes.append(number) return primes"},{"question":"Write a Python function that sorts the given books according to their ratings in descending order and in case of a draw in ratings, books are sorted alphabetically.","solution":"def sort_books(books): Sorts a list of books by rating in descending order. If two books have the same rating, they are sorted alphabetically. Parameters: books (list of tuple): A list where each tuple contains the (name, rating) of a book. Returns: list of tuple: Sorted list of books based on the criteria. return sorted(books, key=lambda x: (-x[1], x[0]))"},{"question":"Write a Python program to check if two given strings are anagrams of each other.","solution":"def are_anagrams(str1, str2): Checks if two given strings are anagrams of each other. Args: str1 (str): First string. str2 (str): Second string. Returns: bool: True if the strings are anagrams, False otherwise. # Sort the characters of both strings and compare return sorted(str1) == sorted(str2)"},{"question":"Create a function that takes a string and a number n, then return the n characters from the end of the string in reverse order. Additionally, ensure the function handles n being larger than the length of the string by returning the entire string in reverse order.","solution":"def reverse_end_characters(s, n): Returns the last n characters from string s in reverse order. If n is larger than the length of the string, return the entire string in reverse order. if n > len(s): return s[::-1] else: return s[:-n-1:-1]"},{"question":"Write a computational routine that executes matrix multiplication by employing the principles of Strassen's Algorithm, an efficient technique for multiplying square matrices. The algorithm should employ recursion to break down the multiplication process into smaller submatrices, achieving lower complexity than the standard matrix multiplication algorithm.","solution":"def strassen_multiply(A, B): Multiplies two matrices, A and B, using Strassen's Algorithm. This function assumes that A and B are square matrices of size 2^n x 2^n. n = len(A) if n == 1: return [[A[0][0] * B[0][0]]] # Splitting the matrices into quarters new_size = n // 2 A11, A12, A21, A22 = split_matrix(A) B11, B12, B21, B22 = split_matrix(B) # M1 = (A11 + A22) * (B11 + B22) M1 = strassen_multiply(matrix_add(A11, A22), matrix_add(B11, B22)) # M2 = (A21 + A22) * B11 M2 = strassen_multiply(matrix_add(A21, A22), B11) # M3 = A11 * (B12 - B22) M3 = strassen_multiply(A11, matrix_subtract(B12, B22)) # M4 = A22 * (B21 - B11) M4 = strassen_multiply(A22, matrix_subtract(B21, B11)) # M5 = (A11 + A12) * B22 M5 = strassen_multiply(matrix_add(A11, A12), B22) # M6 = (A21 - A11) * (B11 + B12) M6 = strassen_multiply(matrix_subtract(A21, A11), matrix_add(B11, B12)) # M7 = (A12 - A22) * (B21 + B22) M7 = strassen_multiply(matrix_subtract(A12, A22), matrix_add(B21, B22)) # Calculating the resulting quarters C11 = matrix_add(matrix_subtract(matrix_add(M1, M4), M5), M7) C12 = matrix_add(M3, M5) C21 = matrix_add(M2, M4) C22 = matrix_add(matrix_subtract(matrix_add(M1, M3), M2), M6) # Combining quarters into a single matrix return combine_matrix(C11, C12, C21, C22) def split_matrix(M): Splits a given matrix into quarters. n = len(M) mid = n // 2 A11 = [[M[i][j] for j in range(mid)] for i in range(mid)] A12 = [[M[i][j] for j in range(mid, n)] for i in range(mid)] A21 = [[M[i][j] for j in range(mid)] for i in range(mid, n)] A22 = [[M[i][j] for j in range(mid, n)] for i in range(mid, n)] return A11, A12, A21, A22 def matrix_add(A, B): Adds two matrices A and B. n = len(A) return [[A[i][j] + B[i][j] for j in range(n)] for i in range(n)] def matrix_subtract(A, B): Subtracts matrix B from matrix A. n = len(A) return [[A[i][j] - B[i][j] for j in range(n)] for i in range(n)] def combine_matrix(A11, A12, A21, A22): Combines four quarters of a matrix into a single matrix. n = len(A11) new_matrix = [[0 for _ in range(2 * n)] for _ in range(2 * n)] for i in range(n): for j in range(n): new_matrix[i][j] = A11[i][j] new_matrix[i][j + n] = A12[i][j] new_matrix[i + n][j] = A21[i][j] new_matrix[i + n][j + n] = A22[i][j] return new_matrix"},{"question":"Create a python function that takes in a list of integers and returns a new list with all the prime numbers from the original list.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def filter_primes(numbers): Returns a list of prime numbers from the given list of integers. return [num for num in numbers if is_prime(num)]"},{"question":"Implement two functions in Python. The first one should find the factorial of a given number using recursion and the second one should optimize the first function by incorporating memoization to store previously calculated results for efficiency. Furthermore, ensure that the factorial function handles edge cases such as negative numbers and zero. Finally, write a set of unit tests to verify the correctness of both functions. Make sure to discuss the time and space complexity of both your solutions.","solution":"def factorial_recursive(n): Returns the factorial of a given number using recursion. Handles edge cases for negative numbers and zero. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") elif n == 0: return 1 else: return n * factorial_recursive(n - 1) def factorial_memoized(n, memo={}): Returns the factorial of a given number using recursion with memoization. Handles edge cases for negative numbers and zero. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") elif n == 0: return 1 if n in memo: return memo[n] else: memo[n] = n * factorial_memoized(n - 1, memo) return memo[n]"},{"question":"Given an array of integers and a target integer, find all pairs of numbers in the array that sum up to the target. The program should not only return the pairs, but also the indices of those pairs in the original array. Additionally, if the same number appears multiple times in the array and is used in multiple pairs, your program should reflect this (for example, if the number 4 appears twice, you should return both indices where 4 appears).","solution":"def find_pairs_with_indices(arr, target): Finds all pairs in the array that sum up to the target and returns those pairs along with their indices. :param arr: List of integers :param target: Target integer :return: List of tuples, each containing two tuples, one with the pair of numbers and another with their indices pairs = [] index_map = {} for i, num in enumerate(arr): if num in index_map: index_map[num].append(i) else: index_map[num] = [i] for i, num in enumerate(arr): complement = target - num if complement in index_map: for j in index_map[complement]: if j > i: pairs.append(((num, complement), (i, j))) return pairs"},{"question":"Create a Python script that prints out all prime numbers from 1 to 1000, but do so in a way that introduces delay of 1 second between each prime number output. Apart from this, ensure that your code is well-documented and utilizes functions for code reusability.","solution":"import time def is_prime(n): Check if a number is prime. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def print_primes_with_delay(start, end, delay): Print all prime numbers between start and end inclusive with a delay in seconds. for num in range(start, end + 1): if is_prime(num): print(num) time.sleep(delay) if __name__ == \\"__main__\\": print_primes_with_delay(1, 1000, 1)"},{"question":"Create a Python dictionary that stores square roots of prime numbers from 1 to 15. Also, implement functionality to update the dictionary dynamically whenever a new prime number's square root is requested that isn't already in the dictionary. The square root values should be rounded to three decimal places.","solution":"import math def is_prime(num): Check if a number is prime. if num <= 1: return False for i in range(2, int(math.sqrt(num)) + 1): if num % i == 0: return False return True def compute_square_root(num): Compute the square root rounded to three decimal places. return round(math.sqrt(num), 3) def get_prime_square_roots(): Create a dictionary of square roots of prime numbers from 1 to 15. prime_square_roots = {} for num in range(1, 16): if is_prime(num): prime_square_roots[num] = compute_square_root(num) return prime_square_roots def update_prime_square_roots(num, prime_square_roots): Dynamically update dictionary with the square root of a new prime number. if num not in prime_square_roots and is_prime(num): prime_square_roots[num] = compute_square_root(num) return prime_square_roots # Initialize the dictionary with primes from 1 to 15 prime_square_roots = get_prime_square_roots()"},{"question":"Given a string \\"Hello\\" pointer, reverse the string without using any in-built string functions. Also, implement your code using a constant space complexity i.e. O(1). Make sure your solution also handles the potential cases where the string contains special or non-english unicode characters.","solution":"def reverse_string(s): Reverses the given string without using any in-built string functions. # Convert the string into a list of characters s = list(s) # Initialize pointers left = 0 right = len(s) - 1 # Swap characters until the pointers meet in the middle while left < right: s[left], s[right] = s[right], s[left] left += 1 right -= 1 # Convert the list of characters back into a string return ''.join(s)"},{"question":"Create a Python program that takes two integers as input from the user, representing a range of numbers. The program should print out all the prime numbers within that range. The input integers will be positive and the first integer will always be smaller than the second integer.","solution":"def is_prime(n): Returns True if n is a prime number, else False. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def prime_numbers_in_range(start, end): Returns a list of prime numbers in the range [start, end]. primes = [] for num in range(start, end + 1): if is_prime(num): primes.append(num) return primes"},{"question":"Write a python function that takes in a list of variables and returns the sum of the absolute value of the variables. The function should also handle cases where the input list is empty or contains non-numeric values by returning an error message. The function should only consider integer and floating-point numbers for the calculation. The function should ignore any variable that has a negative value. The function should return the sum as a floating-point number rounded to 2 decimal places.","solution":"def sum_of_absolute_values(lst): This function takes a list of variables and returns the sum of the positive values' absolute values, rounded to 2 decimal places. It handles cases where the input list is empty or contains non-numeric values by returning an error message. if not isinstance(lst, list): return \\"Error: Input must be a list\\" total_sum = 0.0 for item in lst: if isinstance(item, (int, float)): if item >= 0: total_sum += abs(item) else: return \\"Error: List must only contain numeric values\\" return round(total_sum, 2)"},{"question":"Given a binary tree, write a code to find the maximum depth of the tree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def max_depth(root): Returns the maximum depth of the binary tree. if root is None: return 0 else: left_depth = max_depth(root.left) right_depth = max_depth(root.right) return max(left_depth, right_depth) + 1"},{"question":"Given a Wikipedia dump file named 'wiki_data.xml', write a Python program that reads the dump file, extracts all the individual pages, and saves each page as a separate text file. Additionally, ensure that any internal wiki links within the page content are converted to their corresponding filenames.","solution":"import re import os from xml.etree.ElementTree import iterparse, Element def extract_pages_from_wiki_dump(dump_file, output_dir): Extracts individual pages from a Wikipedia dump file and saves each page as a separate text file. Converts internal wiki links to their filenames. :param dump_file: Path to the Wikipedia dump file (XML format) :param output_dir: Directory to save the extracted pages as text files if not os.path.exists(output_dir): os.makedirs(output_dir) context = iterparse(dump_file, events=(\\"start\\", \\"end\\")) context = iter(context) _, root = next(context) page_title = None page_data = [] for event, elem in context: if event == \\"end\\" and elem.tag == \\"{http://www.mediawiki.org/xml/export-0.10/}title\\": page_title = elem.text elif event == \\"end\\" and elem.tag == \\"{http://www.mediawiki.org/xml/export-0.10/}text\\" and page_title: page_data = elem.text or \\"\\" page_data = convert_internal_links(page_data) save_page(output_dir, page_title, page_data) page_title = None elem.clear() root.clear() def convert_internal_links(text): Converts internal wiki links to filenames. return re.sub(r'[[([^|]]+)(?:|[^]]+)?]]', lambda m: m.group(1).replace(' ', '_') + '.txt', text) def save_page(output_dir, title, content): Saves page content to a text file named after the page title. filename = os.path.join(output_dir, title.replace(' ', '_') + '.txt') with open(filename, 'w', encoding='utf-8') as f: f.write(content)"},{"question":"Develop a function to invert the sequence of elements within a provided tuple and also convert the data type of each element into its hexadecimal representation. Your function should handle integers, float numbers, and string types. For numerical types, use Python's built-in hex function, but for strings, concatenate each character's hexadecimal value (prepend '0x' to each character).","solution":"def invert_and_convert_to_hex(t): Inverts the sequence of elements within a provided tuple and converts each element to its hexadecimal representation. Handles integers, floats and strings. def to_hex(value): if isinstance(value, int): return hex(value) elif isinstance(value, float): return hex(int(value)) elif isinstance(value, str): return ''.join(['0x' + hex(ord(c))[2:] for c in value]) else: raise TypeError(f\\"Unsupported data type: {type(value)}\\") return tuple(to_hex(item) for item in reversed(t))"},{"question":"Write a function to create a new nested list with twice the length of the original, while also reversing the order of the elements in each sublist. Additionally, the function should remove any duplicates within each sublist. The function should also check that all elements in each sublist are integers, and if not, raise a ValueError with a descriptive message. Finally, the function should ensure that the sublists are sorted in non-decreasing order after performing the operations.","solution":"def process_nested_list(original_list): if not all(isinstance(sublist, list) for sublist in original_list): raise ValueError(\\"All elements of the input must be lists.\\") for sublist in original_list: if not all(isinstance(item, int) for item in sublist): raise ValueError(\\"All elements in each sublist must be integers.\\") new_list = [] for sublist in original_list: sublist = list(dict.fromkeys(sublist)) # Remove duplicates sublist.reverse() # Reverse order new_list.extend([sublist] * 2) # Extend the new list with the doubled sublists for sublist in new_list: sublist.sort() # Sort the sublists in non-decreasing order return new_list"},{"question":"What is the best way to validate credit card numbers and expiry dates in Python? Consider checking for the correct format, using regular expressions, and the Luhn algorithm for the credit card number validation.","solution":"import re def validate_credit_card(number): Validate a credit card number using the Luhn algorithm. number = str(number).replace(\\" \\", \\"\\") # Remove any spaces in the card number if not re.match(r\\"^d{13,19}\\", number): return False total = 0 num_digits = len(number) oddeven = num_digits & 1 for count in range(num_digits): digit = int(number[count]) if not ((count & 1) ^ oddeven): digit = digit * 2 if digit > 9: digit = digit - 9 total += digit return (total % 10) == 0 def validate_expiry_date(expiry_date): Validate a credit card expiry date in the format MM/YY. if not re.match(r\\"^(0[1-9]|1[0-2])/([0-9]{2})\\", expiry_date): return False return True"},{"question":"Given a list of strings, create a Python function that sorts them in alphabetical order. Additionally, the function should ignore the case of the letters while sorting. The function should return the sorted list as output. The input list may contain duplicate strings, and the function should handle and preserve the duplicates in the sorted list. You are not allowed to use any built-in Python sorting functions or methods.","solution":"def sort_strings_case_insensitive(strings): Sorts a list of strings in alphabetical order, ignoring case. Args: strings (list of str): List of strings to be sorted. Returns: list of str: Sorted list of strings. def compare(str1, str2): Helper function to compare two strings ignoring case. str1_lower = str1.lower() str2_lower = str2.lower() if str1_lower < str2_lower: return -1 elif str1_lower > str2_lower: return 1 else: return 0 def insertion_sort(array): Helper function to perform insertion sort. for i in range(1, len(array)): key = array[i] j = i - 1 while j >= 0 and compare(array[j], key) > 0: array[j + 1] = array[j] j -= 1 array[j + 1] = key return array return insertion_sort(strings)"},{"question":"Write a python code that implements quicksort or mergesort algorithm on a linked list. The code should also handle edge cases such as an empty linked list or a linked list with only one node. Discuss the runtime complexity of your solution.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def merge_sorted_lists(l1, l2): if not l1: return l2 if not l2: return l1 if l1.value < l2.value: new_head = l1 new_head.next = merge_sorted_lists(l1.next, l2) else: new_head = l2 new_head.next = merge_sorted_lists(l1, l2.next) return new_head def split_list(head): slow = head fast = head prev = None while fast and fast.next: prev = slow slow = slow.next fast = fast.next.next if prev: prev.next = None return head, slow def merge_sort(head): if not head or not head.next: return head left, right = split_list(head) left = merge_sort(left) right = merge_sort(right) return merge_sorted_lists(left, right)"},{"question":"How do I rotate an array in the counter-clockwise direction by a given number of steps in Python?","solution":"def rotate_array(arr, steps): Rotates an array in the counter-clockwise direction by a given number of steps. Parameters: arr (list): List of elements to be rotated. steps (int): Number of steps to rotate the array counter-clockwise. Returns: list: Rotated array. if not arr or steps <= 0: return arr n = len(arr) steps = steps % n # In case steps are greater than the length of the array return arr[steps:] + arr[:steps]"},{"question":"Create a function in Python that takes in a list of strings as input and returns a dictionary where the keys are the strings from the input list and the values are the number of times each string appears in the list. The function should not use any built-in Python functions or libraries.","solution":"def count_strings(input_list): Takes a list of strings and returns a dictionary with the count of occurrences for each string. string_count = {} for string in input_list: if string in string_count: string_count[string] += 1 else: string_count[string] = 1 return string_count"},{"question":"Create a function in Python for generating a Fibonacci sequence up to a given number N, where N is a positive integer less than or equal to 10^6.","solution":"def generate_fibonacci(n): Generate a Fibonacci sequence up to the given number N. Args: n (int): The upper limit of the Fibonacci sequence (inclusive). Returns: list: A list containing the Fibonacci sequence up to N. if n < 0: raise ValueError(\\"The input must be a non-negative integer.\\") fibonacci_sequence = [] a, b = 0, 1 while a <= n: fibonacci_sequence.append(a) a, b = b, a + b return fibonacci_sequence"},{"question":"Create a Python program to generate a random password based on given conditions. The password must contain at least 8 characters including lowercase and uppercase letters, numbers and special characters. As well, implement a function to check the strength of this password.","solution":"import random import string def generate_password(length=8): Generates a random password with at least one lowercase letter, one uppercase letter, one digit, and one special character. The default length is set to 8. if length < 8: raise ValueError(\\"Password length must be at least 8 characters.\\") characters = string.ascii_letters + string.digits + string.punctuation password = [] password.append(random.choice(string.ascii_lowercase)) password.append(random.choice(string.ascii_uppercase)) password.append(random.choice(string.digits)) password.append(random.choice(string.punctuation)) while len(password) < length: password.append(random.choice(characters)) random.shuffle(password) return ''.join(password) def check_password_strength(password): Checks the strength of a given password. Returns True if the password is strong, False otherwise. A strong password is at least 8 characters long and contains lowercase and uppercase letters, digits, and special characters. if len(password) < 8: return False has_lower = any(c.islower() for c in password) has_upper = any(c.isupper() for c in password) has_digit = any(c.isdigit() for c in password) has_special = any(c in string.punctuation for c in password) return all([has_lower, has_upper, has_digit, has_special])"},{"question":"Write a Python script to find the common elements between two lists. The common elements should be returned in a new list. The input lists can contain duplicate elements, but the output list should not have any duplicates.","solution":"def find_common_elements(list1, list2): Returns a list of common elements between two lists, without duplicates. return list(set(list1) & set(list2))"},{"question":"Given a document of text, write a Python function to find the most frequent word in the text. Consider that the text can be very large (up to 10^6 words) and the words are case-insensitive.","solution":"from collections import Counter import re def most_frequent_word(text): Returns the most frequent word in the text. Words are case-insensitive. # Normalize case and remove non-alphabetic characters text = re.sub(r'[^a-zA-Zs]', '', text).lower() # Split the text into words words = text.split() # Count the frequencies of each word word_counts = Counter(words) # Find the most common word most_common_word, _ = word_counts.most_common(1)[0] return most_common_word"},{"question":"Create a Python program that takes a user input representing an order placement timestamp and determines if it falls within trading hours (9:30 AM to 4:00 PM) in the New York time zone.","solution":"from datetime import datetime, time import pytz def is_within_trading_hours(order_timestamp: str) -> bool: Returns True if the order timestamp is within trading hours (9:30 AM to 4:00 PM) in the New York time zone, otherwise returns False. Parameters: order_timestamp (str): The timestamp of the order in ISO 8601 format. Returns: bool: True if within trading hours, False otherwise. ny_tz = pytz.timezone('America/New_York') order_time = datetime.fromisoformat(order_timestamp).astimezone(ny_tz) trading_start = ny_tz.localize(datetime.combine(order_time.date(), time(9, 30))) trading_end = ny_tz.localize(datetime.combine(order_time.date(), time(16, 0))) return trading_start <= order_time <= trading_end"},{"question":"Given the following piece of Python code, identify the errors and correct them to create a function that extracts the year, month, and day from a datetime object. Also, add exception handling to manage potential errors that may arise from wrong input formats.","solution":"from datetime import datetime def extract_date_components(date_string): Extracts year, month, and day from a given date string. Args: date_string (str): A string representing a date in the format 'YYYY-MM-DD'. Returns: tuple: A tuple containing year, month, and day as integers. Raises: ValueError: If the date_string is not in the correct format. try: date = datetime.strptime(date_string, \\"%Y-%m-%d\\") return date.year, date.month, date.day except ValueError: raise ValueError(\\"Incorrect date format. Expected 'YYYY-MM-DD'.\\")"},{"question":"Create a list where each element is the maximum of each row from a given 2D array. However, you are not allowed to use any built-in functions or libraries that directly solve the problem, such as numpy or the max() function. You must implement your own solution to find the maximum value in each row.","solution":"def row_maximums(matrix): Returns a list where each element is the maximum of each row from a given 2D array. def find_max_in_row(row): max_val = row[0] for num in row: if num > max_val: max_val = num return max_val max_values = [] for row in matrix: max_values.append(find_max_in_row(row)) return max_values"},{"question":"Given a dataset of various items with their colors, can you provide a Python code that can categorize them into edible and non-edible groups based on the specific color features of each item? The code should consider the RGB values of each color and analyze their corresponding color composition to make a accurate categorization. Please include comments in the code to explain your approach.","solution":"from typing import Dict, List, Tuple # Define a function to categorize items into edible and non-edible based on RGB color features def categorize_items(items: Dict[str, Tuple[int, int, int]]) -> Dict[str, List[str]]: Categorize items into 'edible' and 'non-edible' based on their RGB color values. Args: items (Dict[str, Tuple[int, int, int]]): A dictionary where key is item name and value is RGB tuple of the item. Returns: Dict[str, List[str]]: A dictionary with keys 'edible' and 'non-edible', each containing a list of item names. # Define thresholds for categorizing the items # This is a hypothetical color-to-edibility mapping for demonstration purposes edible_colors = [ (0, 128, 0), # green (represented by RGB tuple) (255, 165, 0), # orange (255, 255, 0), # yellow (255, 0, 0), # red (139, 69, 19) # brown ] categorized_items = {'edible': [], 'non-edible': []} for item, color in items.items(): if color in edible_colors: categorized_items['edible'].append(item) else: categorized_items['non-edible'].append(item) return categorized_items"},{"question":"How can I write a program that calculates the sum of digits of every number in a given list?","solution":"def sum_of_digits(numbers): Returns a list that contains the sum of the digits of each number in the input list. :param numbers: List of integer numbers. :return: List of integer sums of digits. def sum_digits(n): return sum(int(digit) for digit in str(abs(n))) return [sum_digits(number) for number in numbers]"},{"question":"Construct a programming algorithm capable of verifying if a pair of provided textual string inputs are indeed anagrams of one another, considering letter cases as irrelevant. In this context, take the strings s1 = \\"Listen\\" and s2 = \\"Silent\\" as your initial data sets to test and validate your solution.","solution":"def are_anagrams(s1, s2): Checks if two strings are anagrams of each other, ignoring case. :param s1: The first string :param s2: The second string :return: True if s1 and s2 are anagrams, False otherwise # Clean strings by converting to lowercase and removing spaces cleaned_s1 = ''.join(s1.lower().split()) cleaned_s2 = ''.join(s2.lower().split()) # Sort the characters of both strings and compare return sorted(cleaned_s1) == sorted(cleaned_s2)"},{"question":"Write a function that takes a list of integers and returns a new list with all duplicate numbers removed, while maintaining the original order of the remaining elements. Additionally, the function should ignore any negative numbers in the input list.","solution":"def remove_duplicates_and_negatives(numbers): Returns a new list with all duplicate numbers removed, while maintaining the original order of the remaining elements. Negative numbers are ignored. :param numbers: A list of integers :return: A list of integers without duplicates and negatives seen = set() result = [] for num in numbers: if num >= 0 and num not in seen: seen.add(num) result.append(num) return result"},{"question":"How can I write a function in Python that takes a list of sentences, checks if they start with a capital letter and end with a punctuation mark, and then prints each sentence on a separate line in a newly created file?","solution":"def process_sentences(sentences, filename): Takes a list of sentences, checks if they start with a capital letter and end with a punctuation mark, and then prints each valid sentence on a separate line in a newly created file. :param sentences: List of sentences to be processed. :type sentences: list of str :param filename: Name of the file where valid sentences will be written. :type filename: str import string with open(filename, 'w') as file: for sentence in sentences: if sentence and sentence[0].isupper() and sentence[-1] in string.punctuation: file.write(sentence + 'n')"},{"question":"What can I use in Python to simulate a coin toss game? I want a random choice between values 'H' and 'T' just like a coin toss.","solution":"import random def coin_toss(): Simulates a coin toss and returns 'H' for heads or 'T' for tails. return random.choice(['H', 'T'])"},{"question":"Given a binary tree, write a function to print out the elements in level order.","solution":"import collections class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def level_order_traversal(root): Return the elements of the given binary tree in level order. if not root: return [] result = [] queue = collections.deque([root]) while queue: node = queue.popleft() result.append(node.value) if node.left: queue.append(node.left) if node.right: queue.append(node.right) return result"},{"question":"Write a recursive code to walk through a binary search tree (BST) and print out all the elements in reverse order. The time complexity should be O(n) and the space complexity should be O(h), where n is the number of nodes in the BST and h is the height of the tree. Additionally, the solution should not use any additional data structures such as arrays or stacks to store the elements before printing them out.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def print_in_reverse_order(root): Prints all the elements in the BST in reverse order. if root is None: return print_in_reverse_order(root.right) print(root.value) print_in_reverse_order(root.left)"},{"question":"Write a Python function that takes a string and returns the count of vowels in the string","solution":"def count_vowels(input_string): Returns the number of vowels in the input string. Args: input_string (str): The string to check for vowels. Returns: int: The count of vowels in the input string. vowels = \\"aeiouAEIOU\\" return sum(1 for char in input_string if char in vowels)"},{"question":"I have a Kinesis stream being written to from an application. How can I write a lambda function that reads the Kinesis stream, and writes to a separate output Kinesis stream?","solution":"import json import boto3 def lambda_handler(event, context): Lambda function to read records from an input Kinesis stream and write them to an output Kinesis stream. kinesis_client = boto3.client('kinesis') output_stream_name = 'your-output-stream-name' for record in event['Records']: # Kinesis data is base64 encoded so decode here payload = json.loads(record['kinesis']['data']) output_payload = json.dumps(payload) # Put the record into the output stream kinesis_client.put_record( StreamName=output_stream_name, Data=output_payload, PartitionKey=record['eventID'] ) return 'Processed {} records.'.format(len(event['Records']))"},{"question":"I'm looking for an efficient way to group strings by a common prefix using Python. Can you provide a code snippet as an example? Specifically, I'm interested in a solution that can handle large datasets.","solution":"from collections import defaultdict def group_by_prefix(strings, prefix_length): Groups strings by their common prefix of a given length. Parameters: strings (list of str): The list of strings to group. prefix_length (int): The length of the prefix to group the strings by. Returns: dict: A dictionary where the keys are the prefixes and the values are lists of strings with that prefix. grouped = defaultdict(list) for string in strings: prefix = string[:prefix_length] grouped[prefix].append(string) return dict(grouped)"},{"question":"Create a Python program that converts temperatures from Fahrenheit to Celsius and also includes the option to round the result to the nearest integer.","solution":"def fahrenheit_to_celsius(fahrenheit, round_result=False): Converts a temperature from Fahrenheit to Celsius. Parameters: fahrenheit (float): The temperature in Fahrenheit. round_result (bool): Whether to round the result to the nearest integer. Returns: float or int: The temperature in Celsius, optionally rounded to the nearest integer. celsius = (fahrenheit - 32) * 5.0/9.0 if round_result: return round(celsius) return celsius"},{"question":"Create a Python function that takes an integer as input and returns the nth prime number. The function should include error handling for cases where the input is not an integer or is less than 1.","solution":"def is_prime(n): Helper function to determine if a number is prime. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def nth_prime(n): Returns the nth prime number. Parameters: n (int): The position of the prime number to return. Returns: int: The nth prime number. Raises: ValueError: If the input is not an integer or is less than 1. if not isinstance(n, int) or n < 1: raise ValueError(\\"Input must be a positive integer greater than 0.\\") prime_count = 0 num = 1 while prime_count < n: num += 1 if is_prime(num): prime_count += 1 return num"},{"question":"You're given a string of ASCII characters. Design an efficient algorithm to detect if the string has matching pairs of parentheses. In addition to round brackets \\"()\\", your program should also consider square brackets \\"[]\\" and curly brackets \\"{}\\" as matching pairs, unlike the original. The string can contain any printable ASCII characters and you should ignore all characters that are not parentheses. You can assume the input string is non-empty and contains no more than 100,000 characters.","solution":"def has_matching_pairs(s): Checks if the string has matching pairs of parentheses: (), [], {}. stack = [] matching_parens = { ')': '(', ']': '[', '}': '{' } for char in s: if char in '([{': stack.append(char) elif char in ')]}': if not stack or stack[-1] != matching_parens[char]: return False stack.pop() return len(stack) == 0"},{"question":"Write a Python program that merges two lists into a dictionary, using one list as the keys and the other list as the values. If the lists are of unequal length, fill the remaining keys or values with a specified default value.","solution":"def merge_lists_to_dict(keys, values, default=None): Merges two lists into a dictionary using one list as keys and the other list as values. If the lists are of unequal length, fills the remaining keys or values with a default value. :param keys: List of keys :param values: List of values :param default: Default value to assign if lists are of unequal length :return: A dictionary constructed from the keys and values lists merged_dict = {} max_len = max(len(keys), len(values)) for i in range(max_len): key = keys[i] if i < len(keys) else default value = values[i] if i < len(values) else default merged_dict[key] = value return merged_dict"},{"question":"In Python, you have a set called \`my_set\` containing the elements \`{10, 20, 30, 40}\`. Write a function that takes in a set and an element as arguments and checks if the element is present in the set. If the element is found, print \\"Element exists in the set\\" and return \`True\`; otherwise, print \\"Element does not exist in the set\\" and return \`False\`.","solution":"def check_element_in_set(s, element): Checks if the element is present in the set s. If the element is found, it prints \\"Element exists in the set\\" and returns True; otherwise, prints \\"Element does not exist in the set\\" and returns False. :param s: set, the set to check within :param element: any, the element to check for :return: bool, True if the element is found, False otherwise if element in s: print(\\"Element exists in the set\\") return True else: print(\\"Element does not exist in the set\\") return False"},{"question":"Modify the above program to sort the array in descending order, using only the bubble sort algorithm. Additionally, implement the sorting algorithm in such a way that it requires the array to be sorted in-place, without creating a new array or using any built-in sorting functions or methods.","solution":"def bubble_sort_desc(arr): Sorts an array in-place in descending order using the bubble sort algorithm. n = len(arr) # Traverse through all array elements for i in range(n): # Last i elements are already in place for j in range(0, n-i-1): # Traverse the array from 0 to n-i-1 # Swap if the element found is less than the next element if arr[j] < arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Construct a Python function that outputs a randomly chosen integer from a specified array of numerical elements ranging from one and hundred. Additionally, the function should reject the first element of the array each time before making a selection from the remaining elements. The function should also log how many times each number was picked throughout multiple runs.","solution":"import random from collections import defaultdict class RandomPicker: def __init__(self): self.pick_count = defaultdict(int) def pick_random(self, arr): Picks a random number from the array excluding the first element and logs how many times each number was picked. if not arr or len(arr) < 2: raise ValueError(\\"Array must have at least two elements\\") remaining_elements = arr[1:] chosen_number = random.choice(remaining_elements) self.pick_count[chosen_number] += 1 return chosen_number def get_pick_counts(self): Returns the dictionary with the number of times each number was picked. return dict(self.pick_count)"},{"question":"Please implement a binary search algorithm that takes in a list of numbers and a target number to search for in the list. The algorithm should return the index of the target number if it is found in the list and -1 otherwise. Additionally, the algorithm should be able to handle duplicate values in the list and return the index of the first occurrence of the target number. Note that you cannot use any built-in search functions or libraries for this task.","solution":"def binary_search(arr, target): Perform binary search to find the index of the first occurrence of the target in the list. :param arr: List of numbers (sorted in ascending order) :param target: The number to search for :return: Index of the first occurrence of the target, or -1 if not found left, right = 0, len(arr) - 1 result = -1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: result = mid right = mid - 1 # Continue searching in the left half for the first occurrence elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return result"},{"question":"Can you write a Python program that can simulate a restaurant reservation system? The system should be able to create new reservations, handle reservation modification, and hold a waitlist in case the restaurant is fully booked. Additionally, the system should be able to alert the user if their reservation is within 24 hours, and also send a reminder to the user about their upcoming reservation. How would you approach designing this system?","solution":"from datetime import datetime, timedelta class Reservation: def __init__(self, name, time, contact): self.name = name self.time = time self.contact = contact class ReservationSystem: def __init__(self, capacity): self.capacity = capacity self.reservations = [] self.waitlist = [] def add_reservation(self, name, time, contact): reservation_time = datetime.strptime(time, \\"%Y-%m-%d %H:%M\\") new_reservation = Reservation(name, reservation_time, contact) if len(self.reservations) < self.capacity: self.reservations.append(new_reservation) return \\"Reservation confirmed.\\" else: self.waitlist.append(new_reservation) return \\"Restaurant is fully booked. Added to waitlist.\\" def modify_reservation(self, name, new_time): reservation_time = datetime.strptime(new_time, \\"%Y-%m-%d %H:%M\\") for reservation in self.reservations: if reservation.name == name: reservation.time = reservation_time return \\"Reservation updated.\\" return \\"Reservation not found.\\" def alert_within_24_hours(self): alerts = [] now = datetime.now() for reservation in self.reservations: if 0 <= (reservation.time - now).total_seconds() <= 24 * 3600: alerts.append(f\\"Alert: Reservation for {reservation.name} is within 24 hours.\\") return alerts def reservation_reminder(self): reminders = [] for reservation in self.reservations: reminders.append(f\\"Reminder: Your reservation for {reservation.name} is scheduled at {reservation.time}.\\") return reminders"},{"question":"Build a recursive algorithm in Python to find the nth number in the Fibonacci sequence, but without using any built-in Python functions or loops. Additionally, you are not allowed to use any external variables or data structures.","solution":"def fibonacci(n): Returns the nth number in the Fibonacci sequence. The function uses recursion without loops or external variables/data structures. if n <= 0: return 0 elif n == 1: return 1 else: return fibonacci(n - 1) + fibonacci(n - 2)"},{"question":"Implement a program that computes the aggregate of the squared values of solely the even integers present within a specified array. Your function must not only exclude odd numbers but also manage potential anomalies, such as negative values and zero. Here's a flawed Python code snippet for your reference. Rectify and enhance it to fulfill the requirements.","solution":"def aggregate_even_squares(arr): Computes the aggregate of the squared values of the even integers present within the array \`arr\`. Args: arr (list): A list of integers. Returns: int: The sum of the squares of the even integers in the list. return sum(x**2 for x in arr if x % 2 == 0)"},{"question":"Write a Python program which prints all perfect numbers between 1 and a given number N (both inclusive).","solution":"def is_perfect_number(num): Check if a given number is perfect. if num < 2: return False divisors = [1] # 1 is always a divisor for i in range(2, int(num ** 0.5) + 1): if num % i == 0: divisors.append(i) if i != (num // i): # Avoid adding square root twice divisors.append(num // i) return sum(divisors) == num def find_perfect_numbers(N): Find and return all perfect numbers between 1 and N (inclusive). perfect_numbers = [] for num in range(1, N + 1): if is_perfect_number(num): perfect_numbers.append(num) return perfect_numbers"},{"question":"I have a list of triples of numbers. I want to run a function that uses each triple one at a time. How can I do that? For instance, if I have \`triples = [(1,2,3), (4,5,6), (7,8,9)]\` and I have a function \`my_function(triple)\`. How do I call \`my_function\` with each triple?","solution":"def apply_function_to_triples(triples, my_function): Applies the given function to each triple in the list of triples. Parameters: triples (list of tuples): A list of triples (tuples with three numbers). my_function (function): A function to apply to each triple. Returns: list: A list of results after applying the function to each triple. results = [] for triple in triples: result = my_function(triple) results.append(result) return results"},{"question":"Write a function in Python which accepts an array of integers as input. The function should filter the given array so that it only contains numbers divisible by 3 or 5. However, if a number is divisible by both 3 and 5, it should not be included in the filtered array.","solution":"def filter_numbers(arr): Filters the given array so that it only contains numbers divisible by 3 or 5. However, if a number is divisible by both 3 and 5, it should not be included in the filtered array. Parameters: arr (list of int): The input array of integers. Returns: list of int: The filtered array containing numbers divisible by 3 or 5, but not both. return [x for x in arr if (x % 3 == 0 or x % 5 == 0) and not (x % 3 == 0 and x % 5 == 0)]"},{"question":"Create a program that generates an array of prime numbers from 0 to 100 in descending order. Implement the solution using a recursive function and ensure that the prime numbers are sorted within the array. Additionally, optimize the program to have a time complexity of O(n√n) by using the Sieve of Eratosthenes algorithm.","solution":"def sieve_of_eratosthenes(n): Generates a list of prime numbers up to n using the Sieve of Eratosthenes algorithm. primes = [True] * (n + 1) p = 2 while p * p <= n: if primes[p]: for i in range(p * p, n + 1, p): primes[i] = False p += 1 prime_numbers = [p for p in range(2, n + 1) if primes[p]] return prime_numbers def generate_primes_descending(n): Returns a list of prime numbers from 0 to n in descending order. primes = sieve_of_eratosthenes(n) return primes[::-1] # Generate prime numbers from 0 to 100 in descending order primes_desc = generate_primes_descending(100) print(primes_desc)"},{"question":"Write a recursive function in Python to calculate the factorial of a given positive integer. Also, implement error checking to handle cases where an invalid input (like negative numbers or non-integer types) is provided.","solution":"def factorial(n): Returns the factorial of a given positive integer n. Parameters: n (int): a positive integer whose factorial is to be calculated Returns: int: factorial of the given number Raises: ValueError: if n is a negative number or not an integer if not isinstance(n, int): raise ValueError(\\"Input must be an integer\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Create a Python function that identifies the number of weekdays left in the current month. This function should take into account different time zones, and it should be able to handle daylight saving time changes if they occur in the current month. Additionally, provide a piece of erroneous code that might mislead someone trying to solve this problem and explain why it's wrong.","solution":"from datetime import datetime, timedelta import pytz from calendar import monthrange def weekdays_left_in_month(time_zone='UTC'): Returns the number of weekdays left in the current month for the given time zone. :param time_zone: Time zone string (default is 'UTC') tz = pytz.timezone(time_zone) current_date = datetime.now(tz) current_day_of_month = current_date.day last_day_of_month = monthrange(current_date.year, current_date.month)[1] weekdays_left = 0 for day in range(current_day_of_month, last_day_of_month + 1): date = tz.localize(datetime(current_date.year, current_date.month, day)) if date.weekday() < 5: # Monday to Friday are 0-4 weekdays_left += 1 return weekdays_left"},{"question":"Suggest a code segment to generate random numbers between 1 and 6 simulating a dice throw using python.","solution":"import random def roll_dice(): Simulates a dice throw and returns a random integer between 1 and 6. return random.randint(1, 6)"},{"question":"Please write a Python function that finds the largest number in an array of integers using a binary heap data structure.","solution":"import heapq def find_largest_number(arr): Returns the largest number in an array using a binary heap. # Handle edge case where the array is empty. if not arr: return None # Create a max heap by inverting values max_heap = [-num for num in arr] heapq.heapify(max_heap) # The largest value in the max heap is the root element, but inverted back return -heapq.heappop(max_heap)"},{"question":"Hi, I have a list of characters and I want to replicate each character in a given list N times. Can you show me how to do this using a Pythonic approach?","solution":"def replicate_characters(char_list, n): Replicate each character in the given list N times. Args: char_list (list): A list of characters. n (int): Number of times to replicate each character. Returns: list: A new list with each character replicated N times. return [char for char in char_list for _ in range(n)]"},{"question":"in Python, if I want to write a function that checks if the sum of elements in one set can be achieved by the combination of elements of another set, how do I do that?","solution":"from itertools import combinations def can_achieve_sum(set1, set2): Returns True if any combination of sums from elements of set2 can achieve the sum of elements in set1, otherwise returns False. sum_set1 = sum(set1) set2_list = list(set2) # convert set2 to list for combinations # Iterate over all possible lengths of combinations for i in range(1, len(set2_list) + 1): for combo in combinations(set2_list, i): if sum(combo) == sum_set1: return True return False"},{"question":"I'm trying to write a Python program that takes two strings and checks if they are either permutations or rearrangements of each other. How can I accomplish this?","solution":"def are_permutations(str1, str2): Checks if two strings are permutations of each other. # If lengths are not the same, they cannot be permutations if len(str1) != len(str2): return False # Sort both strings and compare return sorted(str1) == sorted(str2)"},{"question":"Write a Python function that accepts a string and calculates the frequency of each character in the string. The program should return a dictionary where the keys are the unique characters in the string and the values are the frequencies of these characters. Additionally, the function should sort the dictionary based on the frequency of the characters in descending order. If two characters have the same frequency, they should be sorted alphabetically.","solution":"def calculate_frequency(s): Returns a dictionary with characters as keys and their frequencies as values. The dictionary is sorted by frequency in descending order, and alphabetically for characters with the same frequency. from collections import Counter # Calculate the frequency of each character frequency = Counter(s) # Sort by frequency in descending order, then alphabetically sorted_frequency = dict(sorted(frequency.items(), key=lambda x: (-x[1], x[0]))) return sorted_frequency"},{"question":"Write a Python function that takes two strings as input and returns the longest common subsequence (LCS) between them. The LCS is the longest sequence of characters that appear left-to-right (but not necessarily in a contiguous block) in both strings.","solution":"def longest_common_subsequence(str1, str2): Returns the longest common subsequence between two strings. m, n = len(str1), len(str2) # Create a DP table to store lengths of LCS dp = [[0] * (n + 1) for _ in range(m + 1)] # Build the dp table in bottom-up fashion for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # Building and returning the LCS from the dp table lcs = [] while m > 0 and n > 0: if str1[m - 1] == str2[n - 1]: lcs.append(str1[m - 1]) m -= 1 n -= 1 elif dp[m - 1][n] > dp[m][n - 1]: m -= 1 else: n -= 1 return ''.join(reversed(lcs))"},{"question":"Create a function in Python that checks whether the given string is a palindrome or not using the Recursion method. The function should take in a string as an argument and return a Boolean value. You can assume that the string only contains alphabetic characters and spaces.","solution":"def is_palindrome_recursive(s): Returns True if the given string is a palindrome using recursion method, otherwise False. # Remove spaces and convert to lowercase for the palindrome check to be case-insensitive. s = s.replace(\\" \\", \\"\\").lower() # Base Case: If the string is empty or has one character, it's a palindrome. if len(s) <= 1: return True # Recursive Case: Check if the first and last characters are the same if s[0] == s[-1]: return is_palindrome_recursive(s[1:-1]) return False"},{"question":"Write a python program that takes input two lists of integers and checks if the second list is a subset of the first list. The program should output True if every integer in the second list is also found in the first list, and False if any integer in the second list is not found in the first list.","solution":"def is_subset(list1, list2): Checks if list2 is a subset of list1. Args: list1: List[int] - The main list. list2: List[int] - The list to check if it is a subset of list1. Returns: bool - True if list2 is a subset of list1, otherwise False. set1 = set(list1) set2 = set(list2) return set2.issubset(set1)"},{"question":"Write a program in Python that computes the factorial of a positive integer input from the user. If the user enters a negative number or zero, the program should display an error message and ask for a positive integer as input again. The program should also validate if the input is of integer type. If not, it should prompt the user to enter a valid integer input. In addition, your program should use a function to calculate the factorial and another function to handle all the input validations. Factorial calculation should be done using recursion instead of loop for educational purpose.","solution":"def factorial(n): Recursively calculates the factorial of a given number. if n == 0: return 1 else: return n * factorial(n - 1) def input_validation(): Validates and returns a positive integer input from the user. while True: try: user_input = int(input(\\"Enter a positive integer: \\")) if user_input <= 0: print(\\"Error: The number should be a positive integer greater than zero.\\") else: return user_input except ValueError: print(\\"Error: Please enter a valid integer.\\") if __name__ == \\"__main__\\": n = input_validation() print(f\\"Factorial of {n} is {factorial(n)}\\")"},{"question":"It is necessary to write a piece of code for a quality check of a product in a manufacturing line. This code should determine if a product is acceptable or not based on certain quality control parameters. Define a function, \\"product_quality_check\\", which takes a list of product attributes as input along with their respective threshold values. This function should return \\"True, product is acceptable\\" if the product meets all the quality control parameters, else it should return \\"False, product is unacceptable\\". If the list of product attributes is empty, the function should automatically return \\"True, product is acceptable\\".","solution":"def product_quality_check(attributes, thresholds): Determines if a product meets all quality control parameters based on given attributes and thresholds. Parameters: - attributes (list): A list of product attribute values. - thresholds (list): A list of threshold values for the corresponding attributes. Returns: Tuple (Boolean, String): - (True, \\"product is acceptable\\") if all attributes are within the thresholds or if the list is empty. - (False, \\"product is unacceptable\\") if any attribute does not meet the corresponding threshold. if not attributes: # If attributes list is empty return True, \\"product is acceptable\\" for attr, threshold in zip(attributes, thresholds): if attr > threshold: return False, \\"product is unacceptable\\" return True, \\"product is acceptable\\""},{"question":"Given two strings, s1 and s2, write a program to return the longest common subsequence.","solution":"def longest_common_subsequence(s1, s2): Returns the longest common subsequence of s1 and s2. m, n = len(s1), len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # Reconstruct longest common subsequence lcs = [] i, j = m, n while i > 0 and j > 0: if s1[i - 1] == s2[j - 1]: lcs.append(s1[i - 1]) i -= 1 j -= 1 elif dp[i - 1][j] > dp[i][j - 1]: i -= 1 else: j -= 1 return ''.join(reversed(lcs))"},{"question":"Create a Python list with the following numbers: 27, 44, 28, and 34. Sort the list in ascending order. Then, write a Python function that takes in a list as input and returns the sum of all the even numbers in the list that are divisible by 3. Make sure to include error handling in your function to handle cases where the input is not a list or the list does not contain only integers.","solution":"def sum_even_divisible_by_3(lst): Returns the sum of all even numbers in the list that are divisible by 3. Raises a ValueError if the input is not a list or if the list contains non-integer elements. Parameters: lst (list): A list of integers Returns: int: Sum of all even numbers in the list that are divisible by 3 if not isinstance(lst, list): raise ValueError(\\"Input must be a list\\") for item in lst: if not isinstance(item, int): raise ValueError(\\"All elements in the list must be integers\\") return sum(item for item in lst if item % 2 == 0 and item % 3 == 0) # Creating and sorting the list numbers = [27, 44, 28, 34] numbers.sort()"},{"question":"Write a program that generates a random password containing uppercase letters, lowercase letters, digits, and special characters. The password should be at least 8 characters long and should not contain any repeated characters.","solution":"import random import string def generate_password(length=8): Generates a random password containing uppercase letters, lowercase letters, digits, and special characters. The password is at least \`length\` characters long and contains no repeated characters. Parameters: length (int): The length of the password to be generated. Must be at least 8. Returns: str: The generated password. if length < 8: raise ValueError(\\"Password length must be at least 8 characters\\") all_characters = string.ascii_letters + string.digits + string.punctuation if length > len(all_characters): raise ValueError(\\"Password length exceeds the number of unique characters available\\") # Generate a random password while ensuring uniqueness password = ''.join(random.sample(all_characters, length)) return password"},{"question":"I want to create a basic web application using Flask, where a GET request at the path \\"/factorial/\\" should return the factorial of a given number. If the input is not a number or if it's a negative number, the application should return an error message. Can you provide a code example on how to achieve this?","solution":"from flask import Flask, request, jsonify app = Flask(__name__) def factorial(n): if n < 0: return None if n == 0: return 1 result = 1 for i in range(1, n+1): result *= i return result @app.route('/factorial/', methods=['GET']) def get_factorial(): num = request.args.get('number') if not num: return jsonify({\\"error\\": \\"No number provided\\"}), 400 try: num = int(num) if num < 0: return jsonify({\\"error\\": \\"Number must be non-negative\\"}), 400 result = factorial(num) return jsonify({\\"number\\": num, \\"factorial\\": result}) except ValueError: return jsonify({\\"error\\": \\"Invalid number\\"}), 400 if __name__ == '__main__': app.run(debug=True)"},{"question":"Use Python to create a program that takes an array of integers and returns the median while ignoring any negative numbers within the array.","solution":"def median_ignore_negatives(nums): Returns the median of an array of integers, ignoring any negative numbers. # Filter out negative numbers filtered_nums = [num for num in nums if num >= 0] # Check if the filtered list is empty if not filtered_nums: return None # Sort the filtered list filtered_nums.sort() # Find the median n = len(filtered_nums) mid_index = n // 2 if n % 2 == 1: # Odd number of elements, return the middle one return filtered_nums[mid_index] else: # Even number of elements, return the average of the middle two return (filtered_nums[mid_index - 1] + filtered_nums[mid_index]) / 2"},{"question":"Write a script in Python that takes the first 1000 prime numbers and creates a list. Also, include functionality to search these prime numbers. The search should return the index of a prime number if it is in the list of the first 1000 prime numbers. If the number is not prime or does not exist in the list, return 'Not Found'. Remember to design your script with optimal performance in mind.","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def generate_primes(limit): Generate the first \`limit\` prime numbers. primes = [] num = 2 while len(primes) < limit: if is_prime(num): primes.append(num) num += 1 return primes def search_prime(primes, number): Search for a prime number in the list of primes. Returns the index if found, 'Not Found' otherwise. try: index = primes.index(number) return index except ValueError: return 'Not Found' # Generate the first 1000 prime numbers first_1000_primes = generate_primes(1000)"},{"question":"Can you create a code that accepts three unique strings as input and generates a new string by combining them, while simultaneously eliminating any repeated characters? However, the catch here is that the new string cannot contain any duplicates of letters, so you will need to implement a mechanism to ensure that only unique characters are included in the final output. Can you solve this challenge while keeping the code as efficient as possible?","solution":"def combine_unique_strings(s1, s2, s3): Combines three strings and returns a new string with unique characters only. :param s1: First input string :param s2: Second input string :param s3: Third input string :return: Combined string with unique characters combined = s1 + s2 + s3 unique_chars = set(combined) return ''.join(sorted(unique_chars))"},{"question":"Write a function to sort a Python dictionary by its values, decreasing order. Also, handle cases for dictionaries that contain different data types as values. What's the best way to sort such dictionaries - should we convert all values to a specific type for comparison or should we restrict value types from the very beginning?","solution":"def sort_dict_by_values(data): Sorts a dictionary by its values in decreasing order. If the dictionary contains different data types as values, it raises a TypeError. try: return {k: v for k, v in sorted(data.items(), key=lambda item: item[1], reverse=True)} except TypeError: raise TypeError(\\"Cannot sort dictionary with different data types as values\\") # Note: The best approach is to ensure that the dictionary has consistent value types # This function raises an error for mixed type values to maintain consistency."},{"question":"Design a Python function snippet to Check High Social Media: Trending Topics for Decision Making for Experts. Implement if/else or switch/case statements to handle different conditions related to the Ethics. Provide detailed comments explaining your control flow and the reasoning behind each decision. Here is a python function which implements a check for high social media trends based on expert opinion regarding ethical considerations of those trends. The function uses either an \`if\` statement or a \`switch case\` depending upon whether there are multiple possible responses (in which case we use a \`switch\`) or just one correct answer (we use an \`if\`). In either scenario, we provide detailed explanations as to why certain decisions were made at each step.","solution":"def check_trending_topics(topic, impact_score, user_opinion): Function to evaluate whether a trending social media topic is ethically acceptable for experts to adopt based on the topic and impact score. Parameters: topic (str): The trending topic on social media. impact_score (int): The impact score, an integer from 0 to 100, representing the potential effect of the topic. user_opinion (str): Opinion from users, such as \\"positive\\", \\"negative\\", or \\"controversial\\". Returns: str: Decision for the experts based on the evaluation. # High impact score range is considered above 70 HIGH_IMPACT_THRESHOLD = 70 # Check if the topic has a high impact if impact_score > HIGH_IMPACT_THRESHOLD: # High impact topics need further evaluation based on user opinion if user_opinion == \\"positive\\": return \\"Adopt the topic.\\" elif user_opinion == \\"negative\\": return \\"Avoid the topic.\\" elif user_opinion == \\"controversial\\": return \\"Require more research before making a decision.\\" else: return \\"Invalid user opinion provided.\\" else: # Low impact topics do not require immediate expert intervention return \\"No need for immediate decision.\\" # Detailed explanation: # 1. We use an if statement to check if the impact score is above the high impact threshold. # 2. For high impact topics, we use another if/elif structure to decide based on user opinions. # 3. Different actions are taken based on whether the user opinion is positive, negative, or controversial. # 4. Default action is taken if the impact score is low, indicating no immediate decision is required."},{"question":"Implement a function that takes in an array of integers and returns the maximum sum that can be obtained by subarray of that array. A subarray is defined as a contiguous portion of the array. The function should have O(n) time complexity.","solution":"def max_subarray_sum(nums): Returns the maximum sum that can be obtained by a subarray of the input array. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function named \\"isUniqueChars\\" that takes a string as an argument and returns true if the string has all unique characters, false otherwise. Do not use additional data structures. Consider the space complexity of your solution.","solution":"def isUniqueChars(s): Returns true if the string has all unique characters, false otherwise. if len(s) > 128: # Assuming ASCII character set return False checker = 0 for char in s: val = ord(char) if (checker & (1 << val)) > 0: return False checker |= (1 << val) return True"},{"question":"You are given the following Python code snippet which is intended to convert a given number to its corresponding Excel column header letter(s). Excel column headers follow a base-26 numbering system, where 1 corresponds to 'A', 2 to 'B', ..., 26 to 'Z', 27 to 'AA', 28 to 'AB', and so on. However, the code snippet provided is incomplete and contains errors. Your task is to complete the function and fix the errors so that it correctly converts the given number to its Excel column header format.","solution":"def number_to_excel_column(n): Converts a given integer to its corresponding Excel column header. result = [] while n > 0: n -= 1 # Adjusting the index to be 0-based result.append(chr(n % 26 + ord('A'))) n //= 26 result.reverse() return ''.join(result)"},{"question":"Write a python program to remove duplicate elements from a given list while preserving the order of original list. Also, write a function to test your solution.","solution":"def remove_duplicates(input_list): Removes duplicate elements from the list while preserving the order. Parameters: input_list (list): The list from which duplicates need to be removed Returns: list: A new list without duplicate elements, preserving the order seen = set() result = [] for item in input_list: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"What is the name of the module that provides access to system services like process management, file access, and other system-related operations in Python, and can also be used to check if a specific module exists in the current Python environment?","solution":"import os import importlib.util def module_exists(module_name): Checks if a specific module exists in the current Python environment. :param module_name: Name of the module to check :type module_name: str :return: True if module exists, False otherwise :rtype: bool return importlib.util.find_spec(module_name) is not None"},{"question":"Create a guessing game program in Python that allows the user to guess a number between 1 and 100. The program should give hints to the user whether the number is higher or lower than the guess. Additionally, the program should keep track of the number of attempts made by the user and display it at the end.","solution":"import random def guessing_game(): A simple guessing game where the user has to guess a number between 1 and 100. Provides hints if the guess is too high or too low, and tracks the number of attempts. number_to_guess = random.randint(1, 100) attempts = 0 guess = None while guess != number_to_guess: guess = int(input(\\"Guess a number between 1 and 100: \\")) attempts += 1 if guess < number_to_guess: print(\\"Higher\\") elif guess > number_to_guess: print(\\"Lower\\") print(f\\"Congratulations! You guessed the number in {attempts} attempts.\\") if __name__ == \\"__main__\\": guessing_game()"},{"question":"Write a function that takes in a string and returns an array of all the possible permutations of that string, sorted in lexicographic order.","solution":"from itertools import permutations def sorted_permutations(s): Returns all the possible permutations of string s, sorted in lexicographic order. # Generate all permutations using itertools perms = permutations(s) # Convert each permutation to a string and store in a set to avoid duplicates unique_perms = sorted(set([''.join(p) for p in perms])) return unique_perms"},{"question":"Develop a function 'detectDupesWithIndex' that not only identifies if a tuple has more than one of the same entries, but also returns a dictionary with the duplicates and their first and last index positions. If there are no duplicates, return an empty dictionary.","solution":"def detectDupesWithIndex(t): Detect duplicates in a tuple and return a dictionary with duplicates and their first and last index positions. :param t: A tuple of elements. :return: A dictionary where keys are the duplicate elements and values are lists containing the first and last index positions of the duplicates. index_dict = {} duplicates = {} for idx, item in enumerate(t): if item in index_dict: duplicates[item] = [index_dict[item], idx] else: index_dict[item] = idx return duplicates"},{"question":"Given an input list, you are required to implement a function \`counter\` that returns a dictionary where the keys are the unique elements in the input list and the values are lists containing the indices at which these elements appear in the input list. Your solution should not rely on any external libraries or modules.","solution":"def counter(input_list): Returns a dictionary where the keys are the unique elements in the input list and the values are lists containing the indices at which these elements appear in the input list. result = {} for index, element in enumerate(input_list): if element not in result: result[element] = [] result[element].append(index) return result"},{"question":"Write a Python program to find the sum of Fibonacci numbers till the number n, where n is a positive integer input by the user. The program should also check if the input is a valid positive integer and display an error message if it is not. Additionally, the program should use recursion to calculate the Fibonacci sequence.","solution":"def fibonacci(n): Recursive function to calculate the nth Fibonacci number. if n <= 0: raise ValueError(\\"The input must be a positive integer.\\") elif n == 1: return 0 elif n == 2: return 1 else: return fibonacci(n-1) + fibonacci(n-2) def sum_of_fibonacci_numbers(n): Function to calculate the sum of Fibonacci numbers till the number n. if not isinstance(n, int) or n <= 0: raise ValueError(\\"The input must be a positive integer.\\") sum_fib = 0 for i in range(1, n + 1): sum_fib += fibonacci(i) return sum_fib"},{"question":"Given a 2D array where each sub-array is a list of integers that represents an image, write a function that rotates the image 90 degrees clockwise. The function should accept any rectangular image, not just square ones.","solution":"def rotate_image_90_degrees_clockwise(image): Rotates a rectangular image (2D list) 90 degrees clockwise. Args: image (list of list of int): The 2D list representing the image. Returns: list of list of int: The 2D list representing the rotated image. if not image or not image[0]: return [] rows, cols = len(image), len(image[0]) rotated_image = [[0] * rows for _ in range(cols)] for i in range(rows): for j in range(cols): rotated_image[j][rows - 1 - i] = image[i][j] return rotated_image"},{"question":"You are a Python programmer and you are given a task to create a json from a list. However, there is a specific pattern that must be followed. The json should follow the key and value pattern, but the keys should be in uppercase and the values should be in lowercase. Your task is to write a code that will create this specific json from a given list.","solution":"import json def create_json_from_list(lst): Creates a json from a list where keys are in uppercase and values are in lowercase. Parameters: lst (list of str): The input list of strings. Returns: str: The resulting json string. result_dict = {item.upper(): item.lower() for item in lst} return json.dumps(result_dict)"},{"question":"Given Fresnels cosine integral function C(x) is defined as int_0^x cos(frac{pi}{2} t^2) dt, in the context of the task of implementing a numerical algorithm, can you write a python function which computes this integral using the trapezium rule? Please also include a test case where you compare your function output for C(2) to a known approximation.","solution":"import math def fresnel_cosine_integral(x, n_steps=1000): Computes the Fresnel cosine integral C(x) using the trapezium rule. Parameters: - x: Upper limit of the integral. - n_steps: Number of steps for the trapezium rule. Returns: - Approximation of the Fresnel cosine integral C(x). step_size = x / n_steps integral = 0.5 * math.cos(0) # start with the first term cos(0) / 2 for i in range(1, n_steps): t = i * step_size integral += math.cos((math.pi / 2) * t**2) integral += 0.5 * math.cos((math.pi / 2) * x**2) # add the last term cos(x) / 2 integral *= step_size return integral"},{"question":"Write a function that takes an integer n and prints the n x n grid with stars. Each row of the grid should contain exactly n/2 stars, rounded up. The function should also check if n is a positive even number, and if not, return an error message.","solution":"def print_star_grid(n): Prints the n x n grid with stars. Each row of the grid contains exactly n/2 stars, rounded up. If n is not a positive even number, returns an error message. if n <= 0 or n % 2 != 0: return \\"Error: n must be a positive even number\\" num_stars_per_row = (n + 1) // 2 # Equivalent to math.ceil(n/2) grid = [] for _ in range(n): row = '*' * num_stars_per_row grid.append(row) return grid"},{"question":"Create a python decorator that will use the result of the decorated function as an input to an ml model for further processing. Additionally, ensure that the decorator only processes the input if the output of the decorated function exceeds a certain threshold value. The threshold value should be configurable and can be set while initializing the decorator.","solution":"import functools class MLModelDecorator: def __init__(self, model, threshold): Create an instance of MLModelDecorator. :param model: The machine learning model to process the output. :param threshold: The threshold value to determine if processing is necessary. self.model = model self.threshold = threshold def __call__(self, func): @functools.wraps(func) def wrapper(*args, **kwargs): result = func(*args, **kwargs) if result > self.threshold: return self.model.process(result) return result return wrapper # Example usage class DummyModel: def process(self, value): # A dummy model processing example return value * 2 @MLModelDecorator(DummyModel(), threshold=10) def example_function(x): return x"},{"question":"Create a 5x5 identity matrix using a Python list, without using any built-in functions or libraries that directly generate identity matrices. Then, create a function to validate if the generated matrix is an identity matrix or not.","solution":"def create_identity_matrix(n): Creates an n x n identity matrix. identity_matrix = [[0]*n for _ in range(n)] for i in range(n): identity_matrix[i][i] = 1 return identity_matrix def is_identity_matrix(matrix): Checks if the given matrix is an identity matrix. n = len(matrix) for i in range(n): for j in range(n): if i == j: if matrix[i][j] != 1: return False else: if matrix[i][j] != 0: return False return True"},{"question":"Increase the difficulty of the given programming test question by considering multiple lists of words and numbers as input, and creating a program that removes consecutive duplicate elements from each list, while also keeping track of the duplicates. The program should then output the modified lists along with a count of the duplicate elements for each list.","solution":"def remove_consecutive_duplicates(lists): Removes consecutive duplicates from each list and returns the modified list along with the count of the duplicate elements for each list. :param lists: A list of lists, where each inner list contains words or numbers. :return: A tuple containing modified lists and the count of duplicate elements for each list. modified_lists = [] duplicate_counts = [] for lst in lists: if not lst: modified_lists.append(lst) duplicate_counts.append(0) continue new_lst = [lst[0]] duplicate_count = 0 for i in range(1, len(lst)): if lst[i] != lst[i-1]: new_lst.append(lst[i]) else: duplicate_count += 1 modified_lists.append(new_lst) duplicate_counts.append(duplicate_count) return modified_lists, duplicate_counts"},{"question":"Write a Python code to generate the Lucas sequence up to 'n' numbers. Additionally, modify your code to allow generating any generic GCD (Greatest Common Divisor) sequence given two starting points 'a' and 'b', instead of just the Lucas sequence (which starts at 2 and 1). Your function should be able to validate that 'a' and 'b' are both integers. The implementation has to be efficient enough to handle large 'n' (up to 10^6).","solution":"def lucas_sequence(n): Generate the Lucas sequence up to 'n' terms. if n <= 0: return [] if n == 1: return [2] if n == 2: return [2, 1] lucas_seq = [2, 1] for i in range(2, n): next_value = lucas_seq[-1] + lucas_seq[-2] lucas_seq.append(next_value) return lucas_seq def gcd_sequence(a, b, n): Generate a sequence up to 'n' terms starting with 'a' and 'b'. if not isinstance(a, int) or not isinstance(b, int): raise ValueError(\\"Both 'a' and 'b' must be integers.\\") if n <= 0: return [] if n == 1: return [a] if n == 2: return [a, b] seq = [a, b] for i in range(2, n): next_value = seq[-1] + seq[-2] seq.append(next_value) return seq"},{"question":"Merge two sorted arrays in ascending order for a data set that could be as large as 10^6 such that space complexity must be O(1) and operation should be done in-place. Will the same function work for merging arrays in descending order? Implement a solution that caters to this scenario too.","solution":"def merge_sorted_arrays_in_place(arr1, n, arr2, m, ascending=True): Merges two sorted arrays (arr1 and arr2) into arr1 in-place. Parameters: arr1: List[int] - The first sorted array with enough space at the end to fit arr2. n: int - Number of valid elements in arr1. arr2: List[int] - The second sorted array. m: int - Number of elements in arr2. ascending: bool - If True, arrays are merged in ascending order, otherwise in descending order. total_length = n + m - 1 n -= 1 m -= 1 # Determine the comparison operation based on the desire for ascending or descending order if ascending: comp = lambda x, y: x > y else: comp = lambda x, y: x < y # Merge the arrays starting from the last element while n >= 0 and m >= 0: if comp(arr1[n], arr2[m]): arr1[total_length] = arr1[n] n -= 1 else: arr1[total_length] = arr2[m] m -= 1 total_length -= 1 # Copy remaining elements from arr2 while m >= 0: arr1[total_length] = arr2[m] m -= 1 total_length -= 1 # No need to copy the remaining elements from arr1 since they are already in place."},{"question":"Create a Python program that checks for duplicates in a list of strings and removes them. Additionally, the program should also keep track of the count of each unique string in the list and print the top 3 most occurring strings in descending order. If there are multiple strings with the same count, print them in lexicographical order.","solution":"from collections import Counter def remove_duplicates_and_get_top_strings(strings): Returns a list with duplicates removed and the top 3 most occurring strings. If multiple strings have the same count, they are sorted lexicographically. Parameters: strings (list): A list of strings Returns: tuple: A list of strings with duplicates removed and a list of top 3 strings by occurrence # Remove duplicates unique_strings = list(set(strings)) # Count occurrences count = Counter(strings) # Get the top 3 most occurring strings in descending order top_3 = sorted(count.items(), key=lambda item: (-item[1], item[0]))[:3] # Extract only the strings from the top 3 items top_3_strings = [item[0] for item in top_3] return unique_strings, top_3_strings"},{"question":"Please write a Python program that arranges a list of words in alphabetical order. The list contains the words \\"railway\\", \\"carriage\\", \\"sleeping\\", \\" luggage\\", \\"/mail\\", and \\"transportation\\". Make sure to account for case sensitivity and leading/trailing whitespaces in the input.","solution":"def arrange_words(words): Arrange a list of words in alphabetical order, ignoring case sensitivity and leading/trailing whitespaces. Args: words (list): A list of words. Returns: list: The list of words sorted in alphabetical order. # Strip leading and trailing whitespaces and convert to lowercase for sorting cleaned_words = [word.strip().lower() for word in words] # Sort words alphabetically sorted_words = sorted(cleaned_words) return sorted_words"},{"question":"Write a Python program for the knapsack problem using dynamic programming. The knapsack problem is a problem in combinatorial optimization: Given a set of items, each with a weight and a value, determine the count of each item to include in a collection so that the total weight is less than or equal to a given limit and the total value is as large as possible. It derives its name from the problem faced by someone who is constrained by a fixed-size knapsack and must fill it with the most valuable items.","solution":"def knapsack(values, weights, max_weight): Solves the 0/1 knapsack problem using dynamic programming. Args: values (list of int): The values of the items. weights (list of int): The weights of the items. max_weight (int): The maximum weight capacity of the knapsack. Returns: int: The maximum value that can be taken in the knapsack. num_items = len(values) dp = [[0] * (max_weight + 1) for _ in range(num_items + 1)] for i in range(1, num_items + 1): for w in range(max_weight + 1): if weights[i - 1] <= w: dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + values[i - 1]) else: dp[i][w] = dp[i - 1][w] return dp[num_items][max_weight]"},{"question":"Given a list of integers, write a Python function to find the largest three unique numbers using the Heap data structure. The solution should have a time complexity of O(n log 3), where n is the size of the input list, and the space complexity should be O(1).","solution":"import heapq def largest_three_unique_numbers(nums): Returns the largest three unique numbers from the list using heap. if not nums: return [] min_heap = [] unique_nums = set() for num in nums: if num not in unique_nums: heapq.heappush(min_heap, num) unique_nums.add(num) if len(min_heap) > 3: unique_nums.remove(heapq.heappop(min_heap)) return sorted(min_heap, reverse=True)"},{"question":"Create a function that takes a string as an argument and returns a tuple with the words sorted by their length in descending order.","solution":"def sort_words_by_length_desc(s): Takes a string as an argument and returns a tuple with the words sorted by their length in descending order. words = s.split() words_sorted = sorted(words, key=len, reverse=True) return tuple(words_sorted)"},{"question":"Create a function that takes in a list of strings and sorts them by the reverse order of their length. The function should return a new list of strings that is sorted. Additionally, if two strings have the same length, they should be sorted in lexicographical order (alphabetical order). If there are multiple strings with the same length and lexicographical order, maintain their relative order from the original list.","solution":"def sort_by_reverse_length(strings): Sorts a list of strings in reverse order by their length. If two strings have the same length, they should be sorted in lexicographical order. :param strings: List of strings to be sorted :return: New list of sorted strings return sorted(strings, key=lambda s: (-len(s), s))"},{"question":"I have a JSON file with data for multiple employees and I need to create a Python function to parse it. The function should read the JSON file, validate the data, and return dictionaries with the employee details. Each employee dictionary should contain their name, age, position, department, and hire date. I want to ensure that the function can handle any number of employees and validate that all required fields are present for each employee.","solution":"import json def parse_employee_json(json_file_path): Parses an employee JSON file and returns a list of dictionaries with employee details. :param json_file_path: Path to the JSON file containing employee data. :return: A list of dictionaries with each employee’s details. :raises ValueError: If any required field is missing in the data. with open(json_file_path, \\"r\\") as file: data = json.load(file) required_fields = [\\"name\\", \\"age\\", \\"position\\", \\"department\\", \\"hire_date\\"] employees = [] for employee in data[\\"employees\\"]: if not all(field in employee for field in required_fields): raise ValueError(\\"Missing required fields in employee data.\\") employee_details = { \\"name\\": employee[\\"name\\"], \\"age\\": employee[\\"age\\"], \\"position\\": employee[\\"position\\"], \\"department\\": employee[\\"department\\"], \\"hire_date\\": employee[\\"hire_date\\"] } employees.append(employee_details) return employees"},{"question":"Write a Python program to generate a list that contains only the non-unique elements from a given mixed type list. The list can contain integers, strings and nested lists. Handle these different data types in your function. Also, ensure that for nested lists, elements in them are considered in the main list for uniqueness.","solution":"from collections import Counter def extract_elements(mixed_list): flat_list = flatten(mixed_list) count = Counter(flat_list) non_unique_elements = [element for element, freq in count.items() if freq > 1] return non_unique_elements def flatten(nested_list): for item in nested_list: if isinstance(item, list): yield from flatten(item) else: yield item"},{"question":"Design an algorithm to search for a particular node in a binary tree using breadth-first search. Additionally, the algorithm should return the minimum number of steps required to reach the target node from the root of the tree. The time complexity of the algorithm should be O(n), where n is the number of nodes in the tree. The algorithm should also keep track of the maximum value in the binary tree and return it along with the target node and the minimum number of steps.","solution":"from collections import deque class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def bfs_search_and_find(root, target): Perform BFS to search for the target node and find the minimum number of steps to the target node. Also, track and return the maximum value in the tree. :param root: Root node of the binary tree :param target: Value of the target node to search for :return: Tuple containing target node, minimum number of steps and the maximum value in the tree if not root: return None, 0, float('-inf') queue = deque([(root, 0)]) # Queue contains tuples of (node, depth) max_value = float('-inf') target_node = None min_steps = -1 while queue: node, depth = queue.popleft() max_value = max(max_value, node.value) if node.value == target: target_node = node min_steps = depth if node.left: queue.append((node.left, depth + 1)) if node.right: queue.append((node.right, depth + 1)) return target_node, min_steps, max_value"},{"question":"How can I write a program to calculate the combination of n items taken k at a time? Can you provide a code example in Python?","solution":"from math import factorial def combination(n, k): Returns the combination of n items taken k at a time. if k > n: return 0 return factorial(n) // (factorial(k) * factorial(n - k))"},{"question":"Create a Python function that reverses the words in a sentence string, but also count how many times each word appears in the sentence. Your function should ignore punctuation and case sensitivity when counting word frequency. For example, in the sentence \\"Hello world, world hello.\\", the word 'world' should be counted twice. Test your function with several sentences to ensure its accuracy.","solution":"import re from collections import Counter def reverse_words_and_count(sentence): Reverse the words in a sentence and count the frequency of each word. Parameters: sentence (str): The input sentence to process. Returns: tuple: A tuple containing the reversed sentence and a dictionary of word counts. # Normalize sentence to lower case and remove punctuation words = re.findall(r'bw+b', sentence.lower()) word_count = Counter(words) reversed_sentence = ' '.join(reversed(words)) return reversed_sentence, dict(word_count)"},{"question":"From a given list of words, write a Python program to find the word that comes lexicographically closest to the end of the alphabet. If there are multiple words that are the lexicographically largest, print all of them in lexicographical order.","solution":"def lexicographically_largest_words(words): Finds the word(s) that come lexicographically closest to the end of the alphabet. Parameters: words (list of str): List of words to evaluate. Returns: list of str: List of the lexicographically largest word(s) in alphabetical order if there are multiple. if not words: return [] max_word = max(words) largest_words = [word for word in words if word == max_word] return sorted(largest_words)"},{"question":"Write a code to fetch the last 4 commits of a git repository, but only include the commits made by a specific user. The user's username is 'rnyagah' and the repository name is 'GPT-Evaluation'. Additionally, you must implement a feature that calculates and displays the total number of lines added and deleted by the user in each commit.","solution":"import requests def fetch_user_commits(repo, username, user): Fetches the last 4 commits from a specific user in a GitHub repository and calculates the total number of lines added and deleted in each commit. Parameters: repo (str): The repository in the format 'owner/repo'. username (str): The username of the person who has made the commits. user (str): The GitHub user's personal access token. Returns: List of dictionaries containing commit details with number of lines added and deleted. url = f\\"https://api.github.com/repos/{repo}/commits\\" headers = {'Authorization': f'token {user}'} response = requests.get(url, headers=headers) data = response.json() user_commits = [] for commit in data: if commit['commit']['author']['name'] == username: sha = commit['sha'] commit_url = f\\"https://api.github.com/repos/{repo}/commits/{sha}\\" commit_response = requests.get(commit_url, headers=headers) commit_data = commit_response.json() lines_added = 0 lines_deleted = 0 for file in commit_data['files']: lines_added += file['additions'] lines_deleted += file['deletions'] user_commits.append({ 'sha': sha, 'message': commit['commit']['message'], 'date': commit['commit']['author']['date'], 'lines_added': lines_added, 'lines_deleted': lines_deleted }) if len(user_commits) == 4: break return user_commits"},{"question":"Write a Python program to print a floyd's triangle of n rows.","solution":"def floyds_triangle(n): Prints Floyd's Triangle with n rows. count = 1 triangle = [] for i in range(1, n+1): row = [] for j in range(i): row.append(count) count += 1 triangle.append(row) return triangle"},{"question":"Develop a Python function that implements and decrypts the XOR cipher methodology to encrypt a textual message. The function should be able to handle multibyte characters properly and the key used for encryption should be a variable length string. In addition, add a function to detect if the decrypted message is valid English text using natural language processing.","solution":"import string def xor_encrypt_decrypt(text, key): Encrypt or decrypt a text using XOR cipher with a given key. :param text: The input text to be encrypted or decrypted. :param key: The encryption/decryption key. :return: The resulting encrypted or decrypted text. key_length = len(key) return ''.join(chr(ord(text[i]) ^ ord(key[i % key_length])) for i in range(len(text))) def is_valid_english(text): Detect if the given text is valid English text. :param text: The input text to be checked. :return: Boolean indicating if the text is valid English. words = text.split() valid_words = [word for word in words if all(char in string.ascii_letters + string.punctuation + ' ' for char in word)] return len(valid_words) > len(words) / 2"},{"question":"Can you write a program in Python that checks if a square matrix is symmetric or not? A square matrix is symmetric if it is equal to its transpose.","solution":"def is_symmetric(matrix): Checks if a square matrix is symmetric. Args: matrix (list of lists): A 2D list representing the matrix. Returns: bool: True if the matrix is symmetric, False otherwise. n = len(matrix) for i in range(n): for j in range(n): if matrix[i][j] != matrix[j][i]: return False return True"},{"question":"Code a program that takes a list of strings and prints each unique string in the list.","solution":"def print_unique_strings(strings): Prints each unique string from the list of strings. unique_strings = set(strings) for string in unique_strings: print(string)"},{"question":"Create a data structure to manage a stack with operations: push, pop, minElement, and maxElement.","solution":"class Stack: def __init__(self): self.stack = [] self.min_stack = [] self.max_stack = [] def push(self, value): self.stack.append(value) if not self.min_stack or value <= self.min_stack[-1]: self.min_stack.append(value) if not self.max_stack or value >= self.max_stack[-1]: self.max_stack.append(value) def pop(self): if not self.stack: raise IndexError(\\"pop from an empty stack\\") value = self.stack.pop() if value == self.min_stack[-1]: self.min_stack.pop() if value == self.max_stack[-1]: self.max_stack.pop() return value def minElement(self): if not self.min_stack: raise IndexError(\\"minElement from an empty stack\\") return self.min_stack[-1] def maxElement(self): if not self.max_stack: raise IndexError(\\"maxElement from an empty stack\\") return self.max_stack[-1]"},{"question":"Develop a function in Python programming language that accepts an input of a positive integer, then performs a process where it calculates the squared values of each numerical integer less than the provided value, subsequently yielding an aggregate total of all these calculated squares.","solution":"def sum_of_squares(n): Takes a positive integer n and returns the sum of squares of all positive integers less than n. Parameters: n (int): A positive integer Returns: int: The sum of squares of all positive integers less than n return sum(i**2 for i in range(n))"},{"question":"Write a Python function that takes a list of integers as input and uses the built-in function filter() to return a new list containing only the odd numbers from the original list.","solution":"def filter_odd_numbers(numbers): Returns a list containing only the odd numbers from the input list. return list(filter(lambda x: x % 2 != 0, numbers))"},{"question":"Write a python program to take in a list of sentences, and return a dictionary showing the frequency of each unique word, regardless of case sensitivity. The program should ignore any punctuation in the sentences. For instance, given the sentences [\\"I love programming in Python.\\", \\"Python is a great language.\\"], the word \\"Python\\" should be counted twice, and the word \\"language\\" should be counted once.","solution":"import string def word_frequency(sentences): Takes a list of sentences and returns a dictionary showing the frequency of each unique word, regardless of case sensitivity and ignoring punctuation. word_count = {} translator = str.maketrans(\\"\\", \\"\\", string.punctuation) for sentence in sentences: words = sentence.translate(translator).lower().split() for word in words: if word not in word_count: word_count[word] = 0 word_count[word] += 1 return word_count"},{"question":"Write a Python code snippet that generates a multiplication table for a given number along with the associated prime factors of each multiple in the table. The output should display the number, its multiple, and the prime factorization of the multiple.","solution":"def prime_factors(n): Returns the list of prime factors of a given number n. i = 2 factors = [] while i * i <= n: if n % i: i += 1 else: n //= i factors.append(i) if n > 1: factors.append(n) return factors def multiplication_table_with_prime_factors(number, limit=10): Generates a multiplication table for a given number and includes the prime factors of each multiple. table_with_factors = [] for i in range(1, limit + 1): multiple = number * i factors = prime_factors(multiple) table_with_factors.append((i, multiple, factors)) return table_with_factors"},{"question":"Using the datetime module in Python, write a function named \\"display_current_date_time\\" that displays the current date and time in the format \\"YYYY-MM-DD HH:MM:SS\\". Make sure to include the time function from the datetime module to get the exact current date and time.","solution":"from datetime import datetime def display_current_date_time(): Returns the current date and time in the format \\"YYYY-MM-DD HH:MM:SS\\". # Get the current date and time current_time = datetime.now() # Format the date and time formatted_time = current_time.strftime(\\"%Y-%m-%d %H:%M:%S\\") return formatted_time"},{"question":"Using Python, write a function that takes in a string of text and returns a list of all possible anagrams formed from the letters of the input string. The function should also be able to handle special characters and spaces in the input string. As an example, if the input string is \\"dog\\", the function should return a list of all possible anagrams formed from the letters \\"d\\", \\"o\\", and \\"g\\", including \\"god\\", \\"dgo\\", \\"gdo\\", \\"ogd\\", \\"odg\\", and \\"gdo\\". Additionally, if the input string contains multiple occurrences of the same letter, the function should account for this in generating the anagrams.","solution":"from itertools import permutations def generate_anagrams(text): Returns a list of all possible anagrams from the input string. :param text: Input string from which the anagrams are generated. :return: List of all possible anagrams. # Create a list of all possible permutations of the text. perm = permutations(text) # Set to store unique anagrams anagrams_set = {\\"\\".join(p) for p in perm} # Convert set to a list anagrams = list(anagrams_set) return anagrams"},{"question":"You are a natural language processing AI model. Your task is to write a Python function that takes a string as input and returns a list of all the sub-sequences of the string. A sub-sequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.","solution":"from itertools import combinations def subsequences(s): Returns a list of all sub-sequences of the input string s. subseqs = [] length = len(s) # Generate all possible sub-sequences for i in range(length + 1): for comb in combinations(s, i): subseqs.append(\\"\\".join(comb)) return subseqs"},{"question":"Write a Python program to convert a string in camel case to snake case.","solution":"import re def camel_to_snake(camel_str): Converts a camel case string to snake case. # Use regular expression to find all occurrences of uppercase letters # Prepend them with an underscore and convert to lowercase snake_str = re.sub(r'(?<!^)(?=[A-Z])', '_', camel_str).lower() return snake_str"},{"question":"Given a function \\"f\\" and its inverse \\"f_inverse\\" implemented in Python as shown below, write a program to check if they are indeed inverses of each other.","solution":"def f(x): Example function that performs a transformation on x. return 2 * x + 3 def f_inverse(y): Example inverse function that reverts the transformation done by f. return (y - 3) / 2 def is_inverse(f, f_inverse, x_values): Checks if f_inverse is indeed the inverse function of f. Parameters: - f: The original function. - f_inverse: The supposed inverse function. - x_values: A list of values to test. Returns: - True if f_inverse is indeed the inverse of f for all x in x_values, otherwise False. for x in x_values: if f_inverse(f(x)) != x or f(f_inverse(x)) != x: return False return True"},{"question":"Create a Python program to generate an HTML document with a table displaying the given list of names. The table should have alternate row colors, with one row having a background color of light gray (#D3D3D3) and the next row having a background color of white (#FFFFFF). Each name in the list should be displayed in a separate row of the table.","solution":"def generate_html_table(names): Generate an HTML document containing a table with alternating row colors to display the provided list of names. :param names: A list of names to be displayed in the table. :return: A string containing the HTML document. html_doc = \\"<!DOCTYPE html>n<html>n<head>n<title>Names Table</title>n</head>n<body>n\\" html_doc += \\"<table border='1'>n\\" # Add table headers html_doc += \\"<tr><th>Name</th></tr>n\\" # Add table rows with alternating colors for index, name in enumerate(names): row_color = \\"#D3D3D3\\" if index % 2 == 0 else \\"#FFFFFF\\" html_doc += f\\"<tr style='background-color:{row_color};'><td>{name}</td></tr>n\\" html_doc += \\"</table>n</body>n</html>\\" return html_doc"},{"question":"Generate a random string in Python of length 10 consisting of letters (both uppercase and lowercase), numbers, and special characters. Additionally, the generated string should contain at least one uppercase letter, one lowercase letter, one number, and one special character.","solution":"import random import string def generate_random_string(length=10): Generate a random string of a given length consisting of letters (both uppercase and lowercase), numbers, and special characters. The string will have at least one uppercase letter, one lowercase letter, one number, and one special character. if length < 4: raise ValueError(\\"Length should be at least 4 to meet all character requirements\\") uppercase = random.choice(string.ascii_uppercase) lowercase = random.choice(string.ascii_lowercase) digit = random.choice(string.digits) special = random.choice(string.punctuation) remaining_length = length - 4 all_characters = string.ascii_letters + string.digits + string.punctuation remaining_chars = random.choices(all_characters, k=remaining_length) random_string = list(uppercase + lowercase + digit + special + ''.join(remaining_chars)) random.shuffle(random_string) return ''.join(random_string)"},{"question":"Write a function that takes two strings and returns a boolean value indicating whether the two strings are anagrams of each other. An anagram is a word or phrase that is made by rearranging the letters of another word or phrase. The function should ignore spaces, punctuation, and capitalization.","solution":"import re def are_anagrams(str1, str2): Checks if str1 and str2 are anagrams of each other, ignoring spaces, punctuation, and capitalization. # Clean the strings by removing non-alphabetic characters and converting to lower case. cleaned_str1 = re.sub(r'[^a-zA-Z]', '', str1).lower() cleaned_str2 = re.sub(r'[^a-zA-Z]', '', str2).lower() # Return True if sorted characters of cleaned strings are equal, else False. return sorted(cleaned_str1) == sorted(cleaned_str2)"},{"question":"Write a code that prompts the user to enter a string and checks if the string is a palindrome or not. A palindrome is a word, phrase, number, or other sequence of characters that reads the same backward as forward. The program should handle cases where the input string contains special characters, whitespace, and punctuation. Additionally, the program should ignore any characters that are not letters or numbers when determining if the string is a palindrome.","solution":"import re def is_palindrome(s): Checks if the given string is a palindrome after removing non-alphanumeric characters and ignoring case. Args: s: str. The input string to check. Returns: bool. True if the string is a palindrome, False otherwise. # Remove non-alphanumeric characters and convert to lowercase cleaned_str = re.sub(r'[^A-Za-z0-9]', '', s).lower() return cleaned_str == cleaned_str[::-1]"},{"question":"What is a short python script that will return a list of all the entries for a given key in a nested dictionary? Specifically, where the nested dictionary is the structure returned by a running container's /proc/[pid]/task/[pid]/status file.","solution":"def get_all_entries_for_key(nested_dict, key): Returns a list of all the entries for a given key in a nested dictionary. :param nested_dict: The nested dictionary to search. :param key: The key to search for. :return: A list of all entries for the given key. results = [] def search_dict(d): for k, v in d.items(): if k == key: results.append(v) if isinstance(v, dict): search_dict(v) elif isinstance(v, list): for item in v: if isinstance(item, dict): search_dict(item) search_dict(nested_dict) return results"},{"question":"Given an integer array, classify all the elements as even and odd. However, you are not allowed to use the modulus operator (%) or any other arithmetic operation to determine the parity of a number. You need to come up with a bitwise solution to solve this problem. The time complexity of your solution should be O(n), where n is the length of the input array. Additionally, your solution should use only constant space, i.e., it should not use any extra data structures.","solution":"def classify_even_odd(arr): Classifies elements of the array as even or odd. classified = [] for num in arr: if num & 1 == 0: # Using bitwise AND to determine if the number is even classified.append('even') else: classified.append('odd') return classified"},{"question":"Develop a Python program that doesn't just print a triangle of stars, but also allows for user input to determine the size of the triangle. Additionally, include error handling for invalid inputs.","solution":"def print_star_triangle(size): Prints a triangle of stars of given size. If size is invalid, raises a ValueError. if not isinstance(size, int) or size <= 0: raise ValueError(\\"Size must be a positive integer\\") for i in range(1, size + 1): print('*' * i) def get_triangle_size_from_input(user_input): Takes user input, converts it to an integer, and validates it. Returns the integer if valid, else raises a ValueError. try: size = int(user_input) if size <= 0: raise ValueError except ValueError: raise ValueError(\\"Invalid input: Please enter a positive integer\\") return size"},{"question":"Using Python programming language, build a function that can identify whether the given integer is a Mersenne prime number, considering that a Mersenne prime is a prime number that is one less than a power of two. The function should include a verification mechanism to ensure that the submitted integer is a Mersenne prime number and not simply a prime number. The solution should be optimized for performance, and the code should be thoroughly documented with comments to ensure readability and ease of maintenance.","solution":"import math def is_prime(n): Check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def is_mersenne_prime(n): Check if a given number is a Mersenne prime. A Mersenne prime is a prime number that is one less than a power of two. if n < 1: return False # Check if n + 1 is a power of two p = math.log2(n + 1) # Check if p is an integer and the number is prime return p.is_integer() and is_prime(n)"},{"question":"Create a program in Python to generate a random 8-character alphanumeric string. The string should contain at least one lowercase letter, one uppercase letter, one digit, one special character, and must also satisfy the additional constraint of having exactly two lowercase letters, two uppercase letters, two digits, and two special characters.","solution":"import random import string def generate_random_string(): Generates a random 8-character alphanumeric string containing exactly: - 2 lowercase letters - 2 uppercase letters - 2 digits - 2 special characters # Define the character pools lowers = string.ascii_lowercase uppers = string.ascii_uppercase digits = string.digits specials = string.punctuation # Select exactly 2 characters from each pool lower_chars = random.sample(lowers, 2) upper_chars = random.sample(uppers, 2) digits_chars = random.sample(digits, 2) special_chars = random.sample(specials, 2) # Combine all selected characters all_chars = lower_chars + upper_chars + digits_chars + special_chars # Shuffle to ensure randomness random.shuffle(all_chars) # Join to form the final string random_string = ''.join(all_chars) return random_string"},{"question":"Write a python program that takes a list of positive integers and sorts them in increasing order. However, when two integers have the same value, the one that appears earlier in the original list should come first in the sorted list.","solution":"def sort_preserving_order(nums): Sorts the list of positive integers in increasing order while preserving the original order of duplicate elements. Parameters: nums (list): A list of positive integers. Returns: list: A sorted list with the original order of duplicates preserved. return sorted(nums, key=lambda x: (x, nums.index(x)))"},{"question":"Write a program to be able to set or get the brightness of each individual LED in an Adafruit 16x8 LED matrix.","solution":"class LEDMatrix: def __init__(self, rows=16, cols=8): Initialize a 16x8 LED matrix with all LEDs turned off (brightness=0). self.rows = rows self.cols = cols self.matrix = [[0 for _ in range(cols)] for _ in range(rows)] def set_brightness(self, row, col, brightness): Set the brightness of the LED at the specified row and column. Brightness should be an integer between 0 and 255. if 0 <= row < self.rows and 0 <= col < self.cols and 0 <= brightness <= 255: self.matrix[row][col] = brightness else: raise ValueError(\\"Row, column or brightness out of valid range\\") def get_brightness(self, row, col): Get the brightness of the LED at the specified row and column. if 0 <= row < self.rows and 0 <= col < self.cols: return self.matrix[row][col] else: raise ValueError(\\"Row or column out of valid range\\")"},{"question":"Write the following line of code that calculates the square root of an integer using the Babylonian method, also known as Heron's method.","solution":"def babylonian_sqrt(n, tolerance=1e-10): Returns the square root of the integer n using the Babylonian method. if n < 0: raise ValueError(\\"Cannot compute square root of a negative number\\") if n == 0: return 0 x = n y = 1 while abs(x - y) > tolerance: x = (x + y) / 2 y = n / x return x"},{"question":"Create a Python program that combines two lists into a dictionary. If the lists are of unequal length, fill the remaining keys or values with a specified default value.","solution":"def combine_lists_to_dict(keys, values, default_value=None): Combines two lists into a dictionary. If the lists are of unequal length, fill the remaining keys or values with a specified default value. Parameters: keys (list): List of keys. values (list): List of values. default_value: Default value for missing keys or values. Returns: dict: Combined dictionary. max_length = max(len(keys), len(values)) # Extend keys and values lists to the same length with the default_value extended_keys = keys + [default_value] * (max_length - len(keys)) extended_values = values + [default_value] * (max_length - len(values)) return dict(zip(extended_keys, extended_values))"},{"question":"Write a code to compare two numbers in python and return the larger number. If both numbers are equal, return the number. However, you are not allowed to use any comparison operators (e.g., >, <, ==) or built-in functions (e.g., max, min) to solve this problem.","solution":"def larger_number(a, b): Return the larger number. If both are equal, return the number. No comparison operators or built-in functions used. # Use subtraction and bitwise operations to determine larger number diff = a - b sign_diff = (diff >> 31) & 1 return a * (1 - sign_diff) + b * sign_diff"},{"question":"Given a list of words, create a Python program that groups them based on their anagram similarities. Your program must be able to identify words that remain the same letters even when they are rearranged. You should also optimize your solution to handle larger lists of words and consider edge cases such as the inclusion of numbers and special characters.","solution":"from collections import defaultdict def group_anagrams(words): Groups a list of words based on anagram similarities. Parameters: - words: A list of words (strings). Returns: - A list of lists, where each sublist contains words that are anagrams of each other. anagram_dict = defaultdict(list) for word in words: # Sorting the word and using it as a key sorted_word = ''.join(sorted(word)) anagram_dict[sorted_word].append(word) return list(anagram_dict.values())"},{"question":"Write a Python program that generates the sine and cosine values for angles of 0, 30, 45, 60, 90 degrees as well as their radians. Additionally, the program should provide a curve plot for the sine and cosine values for angles in the range of 0 to 360 degrees using matplotlib.","solution":"import numpy as np import matplotlib.pyplot as plt def get_trigonometric_values(): angles_degrees = [0, 30, 45, 60, 90] angles_radians = np.radians(angles_degrees) sine_values_degrees = np.sin(np.radians(angles_degrees)) cosine_values_degrees = np.cos(np.radians(angles_degrees)) sine_values_radians = np.sin(angles_radians) cosine_values_radians = np.cos(angles_radians) results = { 'angles_degrees': angles_degrees, 'angles_radians': angles_radians.tolist(), 'sine_values_degrees': sine_values_degrees.tolist(), 'cosine_values_degrees': cosine_values_degrees.tolist(), 'sine_values_radians': sine_values_radians.tolist(), 'cosine_values_radians': cosine_values_radians.tolist() } return results def plot_sine_cosine(): angles = np.linspace(0, 360, 361) radians = np.radians(angles) sine_values = np.sin(radians) cosine_values = np.cos(radians) plt.figure(figsize=(10, 5)) plt.plot(angles, sine_values, label='Sine', color='blue') plt.plot(angles, cosine_values, label='Cosine', color='orange') plt.title(\\"Sine and Cosine Curves\\") plt.xlabel(\\"Angle (degrees)\\") plt.ylabel(\\"Value\\") plt.legend() plt.grid(True) plt.show()"},{"question":"Using the programming language Python, write a function that takes in the sentence \\"The girl with the red dress reacts quickly\\" as input and outputs a new sentence that is identical in meaning, but with three randomly selected words removed. The function should also include a feature that ensures that the removed words do not include any proper nouns or words that are essential to the meaning of the sentence. Additionally, the function should be able to handle sentences of varying lengths and structures. Provide examples of the function's output for at least three different variations of the original sentence.","solution":"import random def remove_random_words(sentence): Removes three random words from the input sentence while keeping essential words like proper nouns intact. Args: sentence (str): The input sentence. Returns: str: The sentence with three random words removed. essential_words = {\\"The\\", \\"reacts\\", \\"dress\\", \\"girl\\"} # you can expand this list as needed words = sentence.split() words_to_keep = [word for word in words if word in essential_words] removable_words = [word for word in words if word not in essential_words] if len(removable_words) < 3: return sentence # Not enough removable words to remove words_to_remove = random.sample(removable_words, 3) new_sentence = \\" \\".join(word for word in words if word not in words_to_remove) return new_sentence # Example outputs print(remove_random_words(\\"The girl with the red dress reacts quickly\\")) print(remove_random_words(\\"The girl with the red dress reacts quickly\\")) print(remove_random_words(\\"The girl with the red dress reacts quickly\\"))"},{"question":"Given a list of integers representing an array, write a Python function to insert a given integer value at the specified index position. Additionally, implement error handling for invalid indices and duplicate values. Ensure the array remains sorted after the insertion.","solution":"def insert_into_sorted_array(arr, value, index): Inserts a given integer value at the specified index position in the array. Handles invalid indices and duplicate values, and ensures the array remains sorted. # Error Handling: Check if index is within bounds if index < 0 or index > len(arr): raise IndexError(\\"Index out of bounds.\\") # Error Handling: Check for duplicate value if value in arr: raise ValueError(\\"Duplicate value.\\") # Insert the value at the specified index arr.insert(index, value) # Ensure the array remains sorted arr.sort() return arr"},{"question":"You are given a function \`check_lengths\` that takes a list of integers and two integer parameters \`min_length\` and \`max_length\`. The function is supposed to return \`True\` if the list's length is within the range specified by \`min_length\` and \`max_length\` (inclusive), and \`False\` otherwise. However, the given code snippet is incomplete and contains some syntax errors. Your task is to complete the function and fix any errors so that it operates as intended. Additionally, write a test case function \`test_check_lengths\` that verifies the functionality of \`check_lengths\` using various input scenarios.","solution":"def check_lengths(lst, min_length, max_length): Returns True if the length of the list is within the range [min_length, max_length] inclusive, otherwise returns False. return min_length <= len(lst) <= max_length"},{"question":"Can you write a Python function that takes a list of names and returns a dictionary with the names as keys and their corresponding lengths as values?","solution":"def names_to_lengths(names_list): Takes a list of names and returns a dictionary with the names as keys and their corresponding lengths as values. return {name: len(name) for name in names_list}"},{"question":"How can I create a program that sorts an array of integers in ascending order using Python?","solution":"def sort_array(arr): Returns the array sorted in ascending order. return sorted(arr)"},{"question":"Write a Python function that takes in a list of integers and separates them into even and odd numbers. The function should return two lists: one containing the even numbers and the other containing the odd numbers. Additionally, the function should raise a ValueError if the input list contains any non-integer values.","solution":"def separate_even_odd(numbers): Given a list of integers, separates them into even and odd numbers. Parameters: numbers (list): List of integers. Returns: tuple: Two lists, one containing the even numbers and the other containing the odd numbers. Raises: ValueError: If the input list contains non-integer values. if not all(isinstance(n, int) for n in numbers): raise ValueError(\\"All elements in the input list must be integers.\\") evens = [n for n in numbers if n % 2 == 0] odds = [n for n in numbers if n % 2 != 0] return evens, odds"},{"question":"# The following is a single chunk of code, please break it into 2 methods called \`add_dogs\` and \`add_cats\`. Each method should append the arguments to their respective \`dogs\` and \`cats\` lists. Also, the output of the \`add_dogs\` and \`add_cats\` methods should be printed.","solution":"dogs = [] cats = [] def add_dogs(dog_name): Appends the given dog name to the dogs list and returns the dogs list. dogs.append(dog_name) print(dogs) return dogs def add_cats(cat_name): Appends the given cat name to the cats list and returns the cats list. cats.append(cat_name) print(cats) return cats"},{"question":"Write a portfolio optimization program using the Modern Portfolio Theory in Python. The program should include the calculation of the Efficient Frontier, portfolio weights for minimum variance and maximum Sharpe ratio.","solution":"import numpy as np import pandas as pd import scipy.optimize as sco def portfolio_optimization(returns): n_assets = returns.shape[1] mean_returns = returns.mean() cov_matrix = returns.cov() def portfolio_performance(weights, mean_returns, cov_matrix, risk_free_rate=0): returns = np.sum(mean_returns * weights) * 252 std = np.sqrt(np.dot(weights.T, np.dot(cov_matrix * 252, weights))) sharpe_ratio = (returns - risk_free_rate) / std return returns, std, sharpe_ratio def min_variance(mean_returns, cov_matrix): num_assets = len(mean_returns) args = (mean_returns, cov_matrix) constraints = ({'type': 'eq', 'fun': lambda x: np.sum(x) - 1}) bounds = tuple((0, 1) for asset in range(num_assets)) result = sco.minimize(portfolio_variance, num_assets*[1./num_assets], args=args, method='SLSQP', bounds=bounds, constraints=constraints) return result def portfolio_variance(weights, mean_returns, cov_matrix): return portfolio_performance(weights, mean_returns, cov_matrix)[1] ** 2 def neg_sharpe_ratio(weights, mean_returns, cov_matrix, risk_free_rate=0): return -portfolio_performance(weights, mean_returns, cov_matrix, risk_free_rate)[2] def max_sharpe_ratio(mean_returns, cov_matrix, risk_free_rate=0): num_assets = len(mean_returns) args = (mean_returns, cov_matrix, risk_free_rate) constraints = ({'type': 'eq', 'fun': lambda x: np.sum(x) - 1}) bounds = tuple((0, 1) for asset in range(num_assets)) result = sco.minimize(neg_sharpe_ratio, num_assets*[1./num_assets], args=args, method='SLSQP', bounds=bounds, constraints=constraints) return result min_var = min_variance(mean_returns, cov_matrix) max_sharpe = max_sharpe_ratio(mean_returns, cov_matrix) results = { \\"min_var_weights\\": min_var['x'], \\"min_var_return\\": portfolio_performance(min_var['x'], mean_returns, cov_matrix)[0], \\"min_var_std\\": np.sqrt(min_var['fun']), \\"max_sharpe_weights\\": max_sharpe['x'], \\"max_sharpe_return\\": portfolio_performance(max_sharpe['x'], mean_returns, cov_matrix)[0], \\"max_sharpe_std\\": portfolio_performance(max_sharpe['x'], mean_returns, cov_matrix)[1], \\"max_sharpe_ratio\\": -max_sharpe['fun'] } return results"},{"question":"Generate a Python script which finds the frequency of each character in a given string.","solution":"def char_frequency(s): Returns a dictionary with the frequency of each character in the string s. frequency = {} for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"Given a string, write a code to find the length of the longest substring that contains exactly k unique characters and print its length.","solution":"def longest_substring_with_k_unique_chars(s, k): Find the length of the longest substring that contains exactly k unique characters. :param s: Input string :param k: Number of unique characters allowed :return: Length of the longest substring with exactly k unique characters if len(s) == 0 or k == 0: return 0 char_count = {} max_len = 0 left = 0 for right in range(len(s)): char = s[right] char_count[char] = char_count.get(char, 0) + 1 # Reduce the window size until we have exactly \`k\` unique characters while len(char_count) > k: left_char = s[left] char_count[left_char] -= 1 if char_count[left_char] == 0: del char_count[left_char] left += 1 if len(char_count) == k: max_len = max(max_len, right - left + 1) return max_len"},{"question":"Print all elements in the given array in reverse order without using any additional data structures or built-in functions. The solution should have a time complexity of O(n) and a space complexity of O(1). The array will contain integers ranging from -1000 to 1000, and its length will be between 1 and 1000.","solution":"def print_reverse_order(arr): Prints all elements in the given array in reverse order. for i in range(len(arr)-1, -1, -1): print(arr[i])"},{"question":"How would you create a function that takes a list of strings as an argument and returns the total number of characters in all the strings together?","solution":"def total_characters(strings_list): Returns the total number of characters in all strings in the input list. Parameters: strings_list (list of str): A list of strings. Returns: int: Total number of characters in the input strings. return sum(len(s) for s in strings_list)"},{"question":"How can I create a Python program that generates a random password with specific requirements? I need the password to have at least 8 characters, and it should contain at least one lowercase letter, one uppercase letter, and one digit. Can you provide a code solution for this?","solution":"import random import string def generate_password(length=8): Generates a random password with at least one lowercase letter, one uppercase letter, and one digit. Parameters: length (int): The length of the password to be generated. Minimum length is 8. Returns: str: A randomly generated password. if length < 8: raise ValueError(\\"Password length must be at least 8 characters.\\") lower = random.choice(string.ascii_lowercase) upper = random.choice(string.ascii_uppercase) digit = random.choice(string.digits) # Fill the remaining length with random characters from all types all_characters = string.ascii_letters + string.digits remaining_length = length - 3 remaining_characters = [random.choice(all_characters) for _ in range(remaining_length)] # Combine all characters and shuffle them to ensure randomness password_characters = [lower, upper, digit] + remaining_characters random.shuffle(password_characters) # Convert the list of characters to a string password = ''.join(password_characters) return password"},{"question":"Create a Python program for a number guessing game. The program should allow the user to guess a number between 1 and 10 and should provide appropriate feedback such as 'too high', 'too low', or 'correct'.","solution":"import random def number_guessing_game(guess, actual): Simulates a number guessing game. Parameters: guess (int): The user's guessed number. actual (int): The actual number to guess. Returns: str: A message indicating whether the guess is too high, too low, or correct. if guess < 1 or guess > 10: return \\"Guess must be between 1 and 10.\\" if guess < actual: return \\"too low\\" elif guess > actual: return \\"too high\\" else: return \\"correct\\""},{"question":"Considering the new, convenient function below that performs a merge sort on an input array, your job is to accomplish several tasks. Initially, you are required to examine this function and identify any potential flaws, inaccuracies, or inefficiencies. Moving forward, you should construct a detailed pseudo code that perfectly illustrates all steps involved in the merge sort algorithm, to the finest details, ensuring absolute lucidity. Lastly, you should intellectualize and present two complex and less common applications of the merge sort algorithm in fields distant from mainstream computer science, such as but not limited to, bioinformatics, economics, and algorithmic game theory.","solution":"def merge_sort(arr): Performs a merge sort on the provided array. :param arr: List[int] - the array to be sorted :return: List[int] - the sorted array if len(arr) <= 1: return arr mid = len(arr) // 2 left_half = merge_sort(arr[:mid]) right_half = merge_sort(arr[mid:]) return merge(left_half, right_half) def merge(left, right): Merges two sorted arrays into one sorted array. :param left: List[int] - the left sorted array :param right: List[int] - the right sorted array :return: List[int] - the merged sorted array sorted_array = [] left_index = 0 right_index = 0 while left_index < len(left) and right_index < len(right): if left[left_index] < right[right_index]: sorted_array.append(left[left_index]) left_index += 1 else: sorted_array.append(right[right_index]) right_index += 1 while left_index < len(left): sorted_array.append(left[left_index]) left_index += 1 while right_index < len(right): sorted_array.append(right[right_index]) right_index += 1 return sorted_array"},{"question":"Create a web app using Flask that displays \\"Hello World!\\" when the URL '/' is accessed. The app should also have a route '/about' that displays \\"This is the about page!\\". Make sure to include necessary imports and configurations.","solution":"from flask import Flask app = Flask(__name__) @app.route('/') def hello_world(): return 'Hello World!' @app.route('/about') def about(): return 'This is the about page!' if __name__ == '__main__': app.run(debug=True)"},{"question":"Create a Python program that takes in a list of names as input and categorizes them into different groups. Each group should have at most 6 names. The program should then randomly reorder the names within each group and print out the resulting groups of names. As an added challenge, the program should also be able to handle cases where there are duplicate names in the input list, and should ask the user how to handle such situations (either by merging the duplicates or keeping them separate).","solution":"import random def categorize_names(names, handle_duplicates='merge'): Categorizes names into groups of at most 6 names each and randomly reorders names within each group. Args: names (list): List of names to categorize. handle_duplicates (str): How to handle duplicates ('merge' or 'keep'). Returns: list: List of lists, where each sublist is a group of at most 6 names. # Handle duplicates if handle_duplicates == 'merge': names = list(set(names)) # Shuffle names randomly random.shuffle(names) # Create groups of at most 6 names groups = [names[i:i + 6] for i in range(0, len(names), 6)] return groups"},{"question":"Write a Python program to represent the given mathematical expression in the form of an Expression Tree, and then evaluate the expression using the expression tree. You also need to design your own parser to convert the infix expression to a postfix expression before constructing the expression tree. The parser should take into consideration operator precedence and associativity.","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def infix_to_postfix(expression): precedence = {'+': 1, '-': 1, '*': 2, '/': 2} output = [] stack = [] for char in expression: if char.isnumeric(): output.append(char) elif char in precedence: while stack and precedence.get(stack[-1], 0) >= precedence[char]: output.append(stack.pop()) stack.append(char) elif char == '(': stack.append(char) elif char == ')': while stack and stack[-1] != '(': output.append(stack.pop()) stack.pop() # pop '(' while stack: output.append(stack.pop()) return ''.join(output) def construct_expression_tree(postfix): stack = [] for char in postfix: node = TreeNode(char) if char.isnumeric(): stack.append(node) else: node.right = stack.pop() node.left = stack.pop() stack.append(node) return stack[-1] def evaluate_expression_tree(node): if node.value.isnumeric(): return int(node.value) left_val = evaluate_expression_tree(node.left) right_val = evaluate_expression_tree(node.right) if node.value == '+': return left_val + right_val elif node.value == '-': return left_val - right_val elif node.value == '*': return left_val * right_val elif node.value == '/': return left_val / right_val def evaluate_expression(expression): postfix = infix_to_postfix(expression) tree_root = construct_expression_tree(postfix) return evaluate_expression_tree(tree_root)"},{"question":"Create a Python script to merge two dictionaries. However, if there are matching key-value pairs in both dictionaries, you should add the values together instead of overwriting them. The script should also handle cases where the dictionaries have nested dictionaries as values. Additionally, the script should handle cases where the dictionaries have lists as values. If there are matching keys with lists as values, the script should concatenate the lists together instead of overwriting them.","solution":"def merge_dicts(dict1, dict2): result = dict1.copy() for key, value in dict2.items(): if key in result: if isinstance(result[key], dict) and isinstance(value, dict): result[key] = merge_dicts(result[key], value) elif isinstance(result[key], list) and isinstance(value, list): result[key].extend(value) elif isinstance(result[key], (int, float)) and isinstance(value, (int, float)): result[key] += value else: result[key] = value else: result[key] = value return result"},{"question":"Design a Python program for generating random passwords of length 8, containing at least one number and one special character.","solution":"import random import string def generate_password(length=8): Generates a random password of a given length containing at least one number and one special character. if length < 2: raise ValueError(\\"Password length should be at least 2 to include a number and a special character.\\") # Generate one random number and one special character num = random.choice(string.digits) special_char = random.choice(string.punctuation) # Generate the rest of the password with letters and digits remaining_length = length - 2 all_characters = string.ascii_letters + string.digits + string.punctuation remaining_chars = ''.join(random.choices(all_characters, k=remaining_length)) # Combine all characters password = num + special_char + remaining_chars # Shuffle the password to ensure randomness password = ''.join(random.sample(password, len(password))) return password"},{"question":"Write a detailed algorithm for finding the longest common prefix string amongst a set of strings. If there is no common prefix, the algorithm should return an empty string \\"\\".","solution":"def longest_common_prefix(strs): Returns the longest common prefix string amongst a set of strings. If there is no common prefix, return an empty string. if not strs: return \\"\\" # Start with the first word as the prefix prefix = strs[0] # Iterate over the remaining words for s in strs[1:]: while s[:len(prefix)] != prefix and prefix: # Reduce the length of the prefix by removing the last character prefix = prefix[:-1] if not prefix: break return prefix"},{"question":"Write a python program to calculate the factorial of a non-negative integer n, but ensure that the program can handle very large numbers efficiently. The program should also check the correctness of the input and raise an error if the input is invalid. Additionally, the program should implement the factorial calculation using recursion instead of iteration.","solution":"def factorial(n): Returns the factorial of a non-negative integer n using recursion. Raises ValueError for invalid inputs. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"What is an example of a Python function that can be used to print a message to the console?","solution":"def print_message(message): Prints the given message to the console. print(message)"},{"question":"Implement a pseudo-random number generator in Python that returns a random number in the range of 1-100.","solution":"import random def generate_random_number(): Generates and returns a pseudo-random number in the range of 1-100. return random.randint(1, 100)"},{"question":"Write a recursive algorithm that calculates the sum of all elements in a nested list of integers where each inner list can also contain other nested lists to any depth. For example, the function should be able to handle an input like this: [1, 2, [3, 4, [5, 6], 7], 8].","solution":"def sum_nested_list(nested_list): Recursively calculates the sum of all elements in a nested list of integers. Parameters: nested_list (list): The nested list of integers. Returns: int: The sum of all integers in the nested list. total = 0 for element in nested_list: if isinstance(element, list): total += sum_nested_list(element) else: total += element return total"},{"question":"Write a Python program that given a positive integer, n, prints the nth Fibonacci number. For example, if n is 10, then the program should print the 10th Fibonacci number.","solution":"def fibonacci(n): Returns the nth Fibonacci number. The Fibonacci sequence is defined as: F(0) = 0, F(1) = 1 F(n) = F(n-1) + F(n-2) for n > 1 if n <= 0: raise ValueError(\\"n must be a positive integer.\\") if n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 for _ in range(2, n): a, b = b, a + b return b"},{"question":"Merge two sorted lists into one sorted list using Python. The two input lists are list1 and list2. You are not allowed to use any built-in sorting functions or the extend() method.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into one sorted list. Args: list1 : list First sorted list. list2 : list Second sorted list. Returns: list Merged sorted list. merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 while i < len(list1): merged_list.append(list1[i]) i += 1 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Write a Python program to find the sum of all numbers in a nested list using recursion. The nested list can contain integers or other nested lists of integers. The program should also handle cases where the nested list contains non-integer values and ignore them while calculating the sum.","solution":"def sum_nested_list(nested_list): This function takes a nested list and returns the sum of all integers in the list, ignoring any non-integer values. total_sum = 0 for element in nested_list: if isinstance(element, int): total_sum += element elif isinstance(element, list): total_sum += sum_nested_list(element) # ignoring other types return total_sum"},{"question":"Write a Python code to convert time from 12-hour format to 24-hour format, but also include the functionality to manage seconds and milliseconds. Your code should also validate the input to ensure it's in correct 12-hour clock format, including checking for AM or PM. You'll be given a string input that could be in any of these formats: \\"hh:mm:ss\\", \\"hh:mm:ss:ms\\", \\"hh:mm\\", \\"hh:mm:ss.ms\\".","solution":"import re def convert_to_24_hour_format(time_str): Convert a 12-hour format time string to 24-hour format. The input includes hours, minutes, seconds and milliseconds, where each can be optional: - \\"hh:mm:ss\\" - \\"hh:mm:ss:ms\\" - \\"hh:mm\\" - \\"hh:mm:ss.ms\\" The input must include AM or PM part to valid the format. :param time_str: Time string in 12-hour format. :return: Time string in 24-hour format. # Regex to match valid 12-hour clock times time_pattern = re.compile(r'^(1[0-2]|0?[1-9]):([0-5][0-9])(?::([0-5][0-9]))?(?::(d{1,3}))?(?:.(d{1,3}))?s?(AM|PM)', re.IGNORECASE) match = time_pattern.match(time_str) if not match: raise ValueError(\\"Invalid 12-hour time format\\") hours, minutes, seconds, ms_part1, ms_part2, period = match.groups() hours, minutes = int(hours), int(minutes) seconds = int(seconds) if seconds else 0 milliseconds = int(ms_part1 + ms_part2) if ms_part1 and ms_part2 else int(ms_part1) if ms_part1 else int(ms_part2) if ms_part2 else 0 if period.upper() == 'PM' and hours != 12: hours += 12 elif period.upper() == 'AM' and hours == 12: hours = 0 return f\\"{hours:02}:{minutes:02}:{seconds:02}\\" + (f\\".{milliseconds:03}\\" if milliseconds else \\"\\")"},{"question":"Given an array of integers, your task is to write a function to reverse the elements of the array in a specific pattern. Unlike a simple reverse, you will reverse the array in a block-wise manner. The function should take two inputs: the array itself and a block size (an integer). This block size will specify the length of intervals for the block-wise reverse. For instance, if the block size is 3, the first 3 elements should be reversed, then the following 3, and so on. Note that if the total length of the array cannot be evenly divided by the block size, the remaining numbers should be placed as they are in the original array.","solution":"def reverse_in_blocks(arr, block_size): Reverses the elements of the array in a block-wise manner. :param arr: List of integers :param block_size: Integer, size of each block to be reversed :return: List of integers reversed in blocks result = [] for i in range(0, len(arr), block_size): block = arr[i:i+block_size] result.extend(block[::-1]) return result"},{"question":"Write a Python program to check if a given number is a Tejas number or not. A Tejas number is a number that remains the same when its digits are reversed, and it is also a prime number.","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def is_tejas_number(n): Check if a given number is a Tejas number. A Tejas number is a number that is prime and remains the same when its digits are reversed. if n < 0: return False reversed_n = int(str(n)[::-1]) return n == reversed_n and is_prime(n)"},{"question":"Write a Python program to create a mirror copy of a given list, where each element in the mirrored list is the reverse of the corresponding element in the original list. The input list will only contain positive integers with no leading zeros. Include error handling for cases where the input is not a list or contains non-integer elements.","solution":"def mirror_list(input_list): Returns a mirror copy of the given list, where each element is reversed. Handles errors if the input is not a list or contains non-integer elements. if not isinstance(input_list, list): raise ValueError(\\"Input should be a list.\\") mirrored_list = [] for element in input_list: if not isinstance(element, int): raise ValueError(\\"All elements in the list should be integers.\\") reversed_element = int(str(element)[::-1]) mirrored_list.append(reversed_element) return mirrored_list"},{"question":"Write a python function to find the index of the smallest element in a list. Additionally, handle the case where the list is empty by raising a ValueError.","solution":"def find_index_of_smallest(arr): Returns the index of the smallest element in a list. Raises a ValueError if the list is empty. if len(arr) == 0: raise ValueError(\\"List is empty\\") smallest_index = 0 for i in range(1, len(arr)): if arr[i] < arr[smallest_index]: smallest_index = i return smallest_index"},{"question":"Given a list of strings and an integer k, write a program to find the k most frequent elements in the list. If two or more elements have the same frequency, return them in lexicographical order.","solution":"from collections import Counter def k_most_frequent_elements(lst, k): Returns the k most frequent elements in the list. If two or more elements have the same frequency, they are returned in lexicographical order. count = Counter(lst) # Sort first by frequency (descending), then by lexicographical order (ascending) sorted_elements = sorted(count, key=lambda x: (-count[x], x)) return sorted_elements[:k]"},{"question":"Construct a Python program efficiently to identify and output not only the largest, but also the second largest numeric value from a provided list of integers, without modifying the original list. The solution should also handle edge cases, such as when the list contains duplicate values or when the list length is small.","solution":"def find_largest_and_second_largest(nums): Returns a tuple containing the largest and the second largest distinct numeric values from the provided list. If the list does not have at least two distinct values, returns a tuple with None for the missing value(s). if len(nums) < 2: return (nums[0], None) if nums else (None, None) first, second = float('-inf'), float('-inf') for num in nums: if num > first: second = first first = num elif first > num > second: second = num if second == float('-inf'): second = None return (first, second)"},{"question":"Create a Python program that generates a list of twin primes between 1 and N, where N is a positive integer provided by the user. Twin primes are pairs of prime numbers that differ by two (e.g., (3, 5), (5, 7), (11, 13)). The program should also compute the total number of twin prime pairs and display the largest twin prime pair found within the range.","solution":"def is_prime(num): Returns True if the number is prime, otherwise False. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def twin_primes(N): Generates a list of twin primes (pairs of prime numbers that differ by two) between 1 and N. Returns the list of twin primes, the total number of twin prime pairs, and the largest twin prime pair. twin_prime_list = [] for num in range(2, N-1): if is_prime(num) and is_prime(num + 2): twin_prime_list.append((num, num + 2)) total_twin_primes = len(twin_prime_list) largest_twin_prime = twin_prime_list[-1] if twin_prime_list else None return twin_prime_list, total_twin_primes, largest_twin_prime"},{"question":"Write a Python program that prompts the user to enter a message and a key to encrypt the message using a Caesar cipher. Then, write another program that prompts the user to enter an encrypted message and a key to decrypt the message using the same cipher. Make sure to validate user inputs and handle edge cases. Additionally, ensure that your code is properly commented and formatted.","solution":"def caesar_cipher_encrypt(message, key): Encrypts the message using Caesar cipher with the given key. if not isinstance(message, str) or not isinstance(key, int): raise ValueError(\\"Invalid inputs. 'message' should be a string and 'key' should be an integer.\\") encrypted_message = \\"\\" for char in message: if char.isalpha(): shift = 65 if char.isupper() else 97 encrypted_message += chr((ord(char) - shift + key) % 26 + shift) else: encrypted_message += char return encrypted_message def caesar_cipher_decrypt(encrypted_message, key): Decrypts the message using Caesar cipher with the given key. if not isinstance(encrypted_message, str) or not isinstance(key, int): raise ValueError(\\"Invalid inputs. 'encrypted_message' should be a string and 'key' should be an integer.\\") decrypted_message = \\"\\" for char in encrypted_message: if char.isalpha(): shift = 65 if char.isupper() else 97 decrypted_message += chr((ord(char) - shift - key) % 26 + shift) else: decrypted_message += char return decrypted_message"},{"question":"Create a function that takes in an array of strings and returns a new array without any duplicate strings. The function should have a time complexity of O(n), where n is the length of the input array. Additionally, the function should not use any built-in methods or libraries to solve the problem, and it should also ensure that the order of the strings in the returned array is the same as in the input array. The function should also handle cases where the input array contains strings with special characters, numeric strings, and strings in different languages.","solution":"def remove_duplicates(strings): Removes duplicate strings and preserves order. Args: strings (list of str): The input list of strings. Returns: list of str: A new list without duplicate strings. seen = set() result = [] for string in strings: if string not in seen: seen.add(string) result.append(string) return result"},{"question":"Write a function in Python that accepts a list of positive integers and returns a list of the cubes of the numbers. The function should also remove any duplicates in the input list before processing.","solution":"def cube_unique_numbers(numbers): Accepts a list of positive integers and returns a list of cubes of the numbers, removing any duplicates before processing. unique_numbers = set(numbers) cubes = [num**3 for num in unique_numbers] return cubes"},{"question":"Given an array that may contain various types of elements, such as strings, integers, floating point numbers and possibly others. Your task is to identify which elements are strings. However, the catch is that strings can also contain numbers, like \\"123\\". Your code should not mistake these for integers.","solution":"def identify_strings(arr): Returns a list of elements that are strings from the input array. Parameters: arr (list): Input list containing various types of elements. Returns: list: List containing only the string elements from the input list. return [x for x in arr if isinstance(x, str)]"},{"question":"I'd like you to implement a programming code which calculates the exponential value of a certain numeral x, powered by another numeral y. This function should be able to handle any two integers, x and y, as inputs. As an instance, let's compute the exponential for x equals to 3, and y equals to 4.","solution":"def exponentiate(x, y): Returns the result of raising x to the power of y. return x ** y"},{"question":"Create a code to generate a list of all prime numbers between a given start and end number, also displaying their binary representation. The code should handle erroneous inputs gracefully.","solution":"def is_prime(n): Checks if a number n is prime. if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True def prime_numbers_with_binary(start, end): Returns a list of prime numbers along with their binary representations between the start and end numbers (inclusive). if not isinstance(start, int) or not isinstance(end, int): raise ValueError(\\"Start and end must be integers\\") result = [] for num in range(start, end + 1): if is_prime(num): result.append((num, bin(num)[2:])) return result"},{"question":"You have been granted access to an assortment of integers inside a list and a specific digit. Your task is to synthetise a Python script with efficiency to determine and reveal the positions where the stated digit can be found within this list. This should include both the starting and ending indices of all reoccurrences of the digit, especially those that appear in sequential order.","solution":"def find_digit_positions(lst, digit): Returns the start and end indices of all consecutive reoccurrences of the given digit in the list. Parameters: lst (list): The list of integers. digit (int): The digit to find in the list. Returns: list of tuples: List of (start_index, end_index) tuples for each consecutive reoccurrence. positions = [] start = -1 for i, num in enumerate(lst): if num == digit: if start == -1: start = i else: if start != -1: positions.append((start, i - 1)) start = -1 if start != -1: positions.append((start, len(lst) - 1)) return positions"},{"question":"Write a Python function that checks if a given number is a perfect cube. The function should be efficient for a large range of integers, including negative numbers and zero. Additionally, your function should also return the cube root (as an integer) of the number if it is a perfect cube.","solution":"def is_perfect_cube(n): Check if a given number is a perfect cube. Returns a tuple (bool, int) where the bool indicates whether the number is a perfect cube, and the int is the cube root if it is a perfect cube, otherwise 0. Args: n: int - the number to be checked Returns: tuple: (is_cube: bool, cube_root: int) if n == 0: return (True, 0) abs_n = abs(n) cube_root = round(abs_n ** (1 / 3)) if cube_root ** 3 == abs_n: return (True, cube_root if n > 0 else -cube_root) else: return (False, 0)"},{"question":"Initialize an empty list in Python and then add n items to it. The items should be integers ranging from 1 to n. Additionally, you should implement a function that checks if the list contains duplicate items and raise an exception if it does.","solution":"def initialize_and_add_items(n): Initializes an empty list and adds integers from 1 to n inclusive. Parameters: n (int): The number of items to add to the list. Returns: list of int: A list containing integers from 1 to n. items_list = [] for i in range(1, n+1): items_list.append(i) return items_list def check_for_duplicates(lst): Checks if a given list contains duplicate items. Parameters: lst (list): The list to check for duplicates. Raises: ValueError: If duplicates are found in the list. if len(lst) != len(set(lst)): raise ValueError(\\"The list contains duplicate items.\\")"},{"question":"Change the following code to a yield statement so that it can be used as a generator. Additionally, add error handling to the code to handle cases where the input is not a positive integer and return an error message instead of yielding anything. The generator should only yield even numbers. The code should also check for prime numbers and skip them. Ensure that the code runs efficiently and uses a time complexity of O(n) or less.","solution":"def is_prime(n): if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def even_numbers_generator(n): if not isinstance(n, int) or n <= 0: yield \\"Error: Input must be a positive integer\\" return for num in range(2, n+1): if num % 2 == 0 and not is_prime(num): yield num"},{"question":"Create a function that takes four arguments: a number, a string, a boolean value, and an array. The function should return an array containing the string repeated the specified number of times, but only if the boolean value is true. If the boolean value is false, the function should return an empty array. Additionally, the function should also append the length of each repeated string to the given array. The time complexity should not exceed O(n), where n is the number of repetitions of the string.","solution":"def repeat_string(number, string, boolean, array): Returns an array containing the string repeated 'number' times appended with their lengths, but only if boolean is true. Otherwise, it returns an empty array. :param number: int - Number of times to repeat the string :param string: str - The string to repeat :param boolean: bool - Condition to determine if the string should be repeated or not :param array: list - List to append the lengths of repeated strings :return: list - Concatenated list of repeated strings and their lengths if not boolean: return [] result = [string for _ in range(number)] array.extend([len(string)] * number) return result"},{"question":"Create a Python program to generate a random password with at least 8 characters including both uppercase and lowercase letters, and numbers.","solution":"import random import string def generate_random_password(length=8): Generates a random password of at least 8 characters including both uppercase and lowercase letters, and numbers. if length < 8: raise ValueError(\\"Password length must be at least 8 characters.\\") # Define the character sets lower = string.ascii_lowercase upper = string.ascii_uppercase digits = string.digits # Ensure at least one character from each set is included password = [ random.choice(lower), random.choice(upper), random.choice(digits) ] # Fill the rest of the password length all_characters = lower + upper + digits password += random.choices(all_characters, k=length-3) # Shuffle the resultant list to ensure randomness random.shuffle(password) return ''.join(password)"},{"question":"Given a set of words, write a program that groups them based on anagrams. \\"An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\\"","solution":"from collections import defaultdict def group_anagrams(words): Groups words based on anagrams. Args: words (list of str): List of words to be grouped. Returns: list of list of str: Grouped anagrams. anagram_groups = defaultdict(list) for word in words: sorted_word = ''.join(sorted(word)) anagram_groups[sorted_word].append(word) return list(anagram_groups.values())"},{"question":"Write a code to create a 5x5 matrix with all elements as integers, where each row and column must have unique values and the sum of the elements in each row and column must be prime numbers.","solution":"import sympy def is_prime(num): Check if a given number is a prime. return sympy.isprime(num) def get_valid_prime_sums(): Generate a list of prime numbers that could be possible row/column sums for the matrix. These must be primes that can be generated using sums of unique values in the range 1 to 25. primes = [] for num in range(10, 126): # The minimum sum of row/column with unique 5 values is 1+2+3+4+5 = 15, and max is 21+22+23+24+25 = 115. if is_prime(num): primes.append(num) return primes def generate_5x5_matrix_with_prime_sums(): Generate a 5x5 matrix that satisfies the given conditions. Here, we use a backtracking method to fill the matrix while checking constraints. def is_valid(matrix, row, col, num): # Check if num is already present in the current row or column for k in range(5): if matrix[row][k] == num or matrix[k][col] == num: return False return True def sum_is_prime(matrix, index, axis): # Calculate sum of the row or column and check if it's prime summation = 0 if axis == 'row': summation = sum(matrix[index]) if axis == 'column': summation = sum(matrix[k][index] for k in range(5)) return is_prime(summation) matrix = [[0] * 5 for _ in range(5)] valid_primes = get_valid_prime_sums() def backtrack(row, col): if row == 5: return True if col == 5: return sum_is_prime(matrix, row, 'row') and backtrack(row + 1, 0) for num in range(1, 26): if is_valid(matrix, row, col, num): matrix[row][col] = num if col == 4 and not sum_is_prime(matrix, row, 'row'): matrix[row][col] = 0 continue if row == 4 and not sum_is_prime(matrix, col, 'column'): matrix[row][col] = 0 continue if backtrack(row, col + 1): return True matrix[row][col] = 0 return False if backtrack(0, 0): return matrix raise ValueError(\\"Solution not found\\") matrix = generate_5x5_matrix_with_prime_sums()"},{"question":"Write a Python function that takes in two parameters: \`n\`, an integer representing the size of a square matrix, and \`x\`, an integer representing the target sum. The function should generate a magic square of size \`n\` and return \`True\` if the magic square contains a diagonal (either main or secondary) with a sum equal to \`x\`. Return \`False\` otherwise.","solution":"def generate_magic_square(n): Generate a magic square of size n. if n % 2 == 0: raise ValueError(\\"Magic squares are not possible for even sizes\\") magic_square = [[0] * n for _ in range(n)] num = 1 i, j = 0, n // 2 while num <= n**2: magic_square[i][j] = num num += 1 newi, newj = (i - 1) % n, (j + 1) % n if magic_square[newi][newj]: i += 1 else: i, j = newi, newj return magic_square def has_diagonal_with_sum(magic_square, n, x): Check if either the main diagonal or the secondary diagonal of the magic square has a sum equal to x. main_diagonal_sum = sum(magic_square[i][i] for i in range(n)) if main_diagonal_sum == x: return True secondary_diagonal_sum = sum(magic_square[i][n - 1 - i] for i in range(n)) if secondary_diagonal_sum == x: return True return False def magic_square_contains_diagonal_with_sum(n, x): Generate a magic square of size n and check if it contains a diagonal (main or secondary) with a sum equal to x. # Magic squares are not possible for even sizes, return False if n % 2 == 0: return False magic_square = generate_magic_square(n) return has_diagonal_with_sum(magic_square, n, x)"},{"question":"Given a linked list, print its elements in reverse order without using any additional data structures and with a space complexity of O(1). However, you are not allowed to change the pointers or the structure of the linked list. You can only modify the values of the nodes.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def print_reverse(head): Prints the values of the linked list in reverse order without modifying the structure. # Helper function to carry out the reverse print recursively def _print_reverse_recursive(node): if not node: return _print_reverse_recursive(node.next) print(node.val) _print_reverse_recursive(head)"},{"question":"Create a Python function that finds the first recurring character in a given string. If no character repeats, return 'None'.","solution":"def first_recurring_character(s): Returns the first recurring character in the given string. If no character repeats, returns 'None'. seen = set() for char in s: if char in seen: return char seen.add(char) return 'None'"},{"question":"Write a Python function that takes a list of integers as a parameter and returns the sum of all elements that are greater than 10 and less than 100. If there are no elements in the list that satisfy the condition, the function should raise a custom exception named 'NoElementsException'.","solution":"class NoElementsException(Exception): pass def sum_elements_in_range(lst): Returns the sum of all elements in the list that are greater than 10 and less than 100. Raises NoElementsException if no elements in the list satisfy the condition. filtered_elements = [x for x in lst if 10 < x < 100] if not filtered_elements: raise NoElementsException(\\"No elements greater than 10 and less than 100 in the list\\") return sum(filtered_elements)"},{"question":"Write me a method signing in python that starts at the first element in an integer list and then continues to the next if the next element is adjacent (value + or - 1) to the current element or go to the next element if it is the start value + 1. For example, [5,6,7,8] successfully iterates, but [5,6,8] does not because 8 is not adjacent to 7. Additionally, [5,4,3] successfully iterates, but [5,3,4] does not because 3 is not adjacent to 5 or 4. Return true if the list can be iterated and false otherwise.","solution":"def can_iterate_adjacent(lst): Returns True if the list can be iterated following the rules provided. Otherwise, returns False. if not lst: return False # empty list can't be iterated for i in range(len(lst) - 1): if abs(lst[i] - lst[i + 1]) != 1: return False return True"},{"question":"You are authorized to organize data in a tabular format where the rows represent individuals with their name, place of residence, and the vehicles they own. Write a Python function that achieves this. However, the challenge level is raised by requiring the inclusion of error handling and assertions to ensure the data is as expected. This is to prevent situations where the list of people is shorter than the list of places or vehicles. In such cases, your function should raise an exception.","solution":"def organize_data(names, places, vehicles): Organizes the given names, places, and vehicles into a tabular format. Args: names (list of str): List of names. places (list of str): List of places of residence. vehicles (list of str): List of vehicles. Returns: list of dict: Each dictionary contains 'name', 'place', and 'vehicle' keys. Raises: ValueError: If the length of names is not equal to the length of places or vehicles. # Ensure all lists have the same length if not (len(names) == len(places) == len(vehicles)): raise ValueError(\\"All lists must have the same length\\") # Organize the data into a list of dictionaries organized_data = [] for name, place, vehicle in zip(names, places, vehicles): organized_data.append({ 'name': name, 'place': place, 'vehicle': vehicle }) return organized_data"},{"question":"Write a function that takes two strings and determines whether one string is an anagram of the other. The function should also handle cases where the input strings contain special characters or numbers.","solution":"def is_anagram(s1, s2): Determine if two strings are anagrams, considering special characters and numbers. # Remove any non-alphanumeric characters and make lower case clean_s1 = ''.join(filter(str.isalnum, s1)).lower() clean_s2 = ''.join(filter(str.isalnum, s2)).lower() # Check if sorted characters of both cleaned strings are same return sorted(clean_s1) == sorted(clean_s2)"},{"question":"How can I find the length of the longest word in a given string using programming?","solution":"def longest_word_length(s): Returns the length of the longest word in the given string s. words = s.split() if not words: return 0 return max(len(word) for word in words)"},{"question":"Develop a Python function that calculates the greatest common divisor (GCD) of a list of non-negative integers. The function should handle edge cases, such as empty lists or lists containing zero, and should return an appropriate error message in such cases. The function should also be optimized to handle large lists efficiently.","solution":"from math import gcd from functools import reduce def calculate_gcd(numbers): Returns the greatest common divisor (GCD) of a list of non-negative integers. Handles edge cases such as empty lists or lists containing zero. if not numbers: return \\"Error: The input list is empty.\\" if any(n < 0 for n in numbers): return \\"Error: The list should contain non-negative integers only.\\" if any(n == 0 for n in numbers): # GCD of any set of numbers containing 0 is the GCD of the nonzero elements only numbers = [n for n in numbers if n != 0] if not numbers: return 0 def gcd_list(numbers): return reduce(gcd, numbers) return gcd_list(numbers)"},{"question":"Create a function that takes in a list of integers and returns a new list containing only the even numbers from the original list. The function should also sort the resulting list in ascending order.","solution":"def filter_and_sort_even_numbers(numbers): Returns a sorted list of even numbers from the given list of integers. even_numbers = [num for num in numbers if num % 2 == 0] return sorted(even_numbers)"},{"question":"I want to encode a string using run-length encoding. How can I do this in Python?","solution":"def run_length_encode(s): Encodes the given string using run-length encoding. Parameters: s (str): The input string to be encoded. Returns: str: The run-length encoded string. if not s: return \\"\\" encoded_string = \\"\\" count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: encoded_string += f\\"{s[i - 1]}{count}\\" count = 1 # Adding the last sequence encoded_string += f\\"{s[-1]}{count}\\" return encoded_string"},{"question":"Write a Python code snipplet that plots the function f(x) = 3x^2 - 5x + 2 using matplotlib and numpy libraries.","solution":"import matplotlib.pyplot as plt import numpy as np def plot_function(): Plots the function f(x) = 3x^2 - 5x + 2. # Generate a range of x values x = np.linspace(-10, 10, 400) # Compute the corresponding y values for the function f(x) = 3x^2 - 5x + 2 y = 3 * x**2 - 5 * x + 2 # Create the plot plt.figure(figsize=(10, 6)) plt.plot(x, y, label='f(x) = 3x^2 - 5x + 2') plt.title('Plot of f(x) = 3x^2 - 5x + 2') plt.xlabel('x') plt.ylabel('f(x)') plt.legend() plt.grid(True) plt.show() # For manual testing, you can call the function here # plot_function()"},{"question":"Write a code to convert a list of comma or semicolon separated strings into a single string, ensuring that the resulting string does not exceed 100 characters in length. The order of the strings should be reversed in the resulting string. The input list can contain a maximum of 50 strings and each string can have a maximum length of 100 characters. If the resulting string exceeds 100 characters, it should be truncated to the first 100 characters. If the input list is empty, the resulting string should be empty as well.","solution":"def convert_and_truncate(strings): Convert a list of comma or semicolon separated strings into a single string. Ensure that the resulting string does not exceed 100 characters in length. The order of the strings should be reversed in the resulting string. Parameters: strings (list): List of comma or semicolon separated strings. Returns: str: Resulting string limited to 100 characters. if not strings: return \\"\\" # Join the strings with a comma and reverse the list. reversed_string = \\",\\".join(strings[::-1]) # Truncate the string to the first 100 characters if it is longer. result = reversed_string[:100] return result"},{"question":"Write a code that replaces the first occurrence of a substring with another substring in a given string. The code should be case-sensitive and should not use any built-in functions or libraries for string manipulation. The length of the input string and the substrings will not exceed 100 characters.","solution":"def replace_first_occurrence(s, old_sub, new_sub): Replaces the first occurrence of a substring (old_sub) with another substring (new_sub) in a given string (s). if len(old_sub) == 0 or len(old_sub) > len(s): return s # Find the position of the first occurrence of the old_sub index = -1 for i in range(len(s) - len(old_sub) + 1): match = True for j in range(len(old_sub)): if s[i + j] != old_sub[j]: match = False break if match: index = i break # If the old substring is found if index != -1: # Create the new string with the old substring replaced by the new substring result = \\"\\" result += s[:index] result += new_sub result += s[index + len(old_sub):] return result # If the old substring is not found, return the original string return s"},{"question":"Given a list, write a program that produces a new list containing every third element of the original list, preserving the order.","solution":"def every_third_element(lst): Returns a new list containing every third element of the original list, preserving the order. Parameters: lst (list): The original list Returns: list: A new list containing every third element of the original list return lst[2::3]"},{"question":"Develop a Python function that pinpoints the least frequently occurring component within a provided list data structure.","solution":"from collections import Counter def least_frequent_element(data): Returns the least frequently occurring component within the provided list. If multiple elements have the same frequency, return the first one found. if not data: return None frequency_count = Counter(data) least_frequent = min(frequency_count, key=frequency_count.get) return least_frequent"},{"question":"Write a Python function to split a list into sublists of specific sizes. The function should accept a list and a sequence of sizes as input, and return a list of sublists, where each sublist corresponds to the original list elements in order, and has a size equal to the corresponding size in the sizes sequence. If the sizes sequence sum is not equal to the length of the original list, the function should raise a ValueError. Additionally, the function should be implemented using recursion rather than iteration to further increase its complexity.","solution":"def split_list(lst, sizes): Splits a list into sublists of specific sizes using recursion. If the sum of sizes does not equal the length of the original list, it raises a ValueError. Params: - lst (list): The list to be split. - sizes (list): A sequence of sizes for the sublists. Returns: - List of sublists based on the sizes sequence. if sum(sizes) != len(lst): raise ValueError(\\"Sum of sizes must be equal to the length of the list.\\") if not sizes: return [] current_size = sizes[0] sublist = lst[:current_size] remaining_list = lst[current_size:] return [sublist] + split_list(remaining_list, sizes[1:])"},{"question":"Given a message consisting of an arbitrary number of alphabetic characters, design an efficient algorithm to compress the message using_run-length encoding. In run-length encoding, sequences of the same character are replaced by a single character followed by the number of times it appears.","solution":"def run_length_encode(message): Encodes the given message using run-length encoding. Parameters: message (str): The message to be encoded. Returns: str: The run-length encoded message. if not message: return \\"\\" encoded_message = [] count = 1 previous_char = message[0] for char in message[1:]: if char == previous_char: count += 1 else: encoded_message.append(previous_char + str(count)) previous_char = char count = 1 encoded_message.append(previous_char + str(count)) return ''.join(encoded_message)"},{"question":"How can I generate code to find the longest palindromic substring in a given string?","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in the given string s. if not s: return \\"\\" def expand_around_center(left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return left + 1, right - 1 start, end = 0, 0 for i in range(len(s)): l1, r1 = expand_around_center(i, i) # Odd length palindromes l2, r2 = expand_around_center(i, i+1) # Even length palindromes if r1 - l1 > end - start: start, end = l1, r1 if r2 - l2 > end - start: start, end = l2, r2 return s[start:end+1]"},{"question":"Consider the situation in which a heuristic evaluation is performed to determine the similarity between two strings using the Levenshtein algorithm. Furthermore, assume there's an additional condition in that the similarity score will only be computed for strings whose lengths differ by at most two characters. Given the erroneous code snippet below, write a function that correctly follows these specifications.","solution":"def levenshtein_distance(s1, s2): Compute the Levenshtein distance between two strings. if len(s1) > len(s2): s1, s2 = s2, s1 distances = range(len(s1) + 1) for i2, c2 in enumerate(s2): distances_ = [i2+1] for i1, c1 in enumerate(s1): if c1 == c2: distances_.append(distances[i1]) else: distances_.append(1 + min((distances[i1], distances[i1 + 1], distances_[-1]))) distances = distances_ return distances[-1] def compare_strings(s1, s2): Compare two strings using Levenshtein distance if their lengths differ by at most 2 characters. Returns: int: Levenshtein distance if lengths differ by at most 2 characters, otherwise None. if abs(len(s1) - len(s2)) > 2: return None return levenshtein_distance(s1, s2)"},{"question":"Write a Python function to sort a list of integers in ascending order.","solution":"def sort_numbers(lst): Sorts a list of integers in ascending order and returns the sorted list. Args: lst (list): A list of integers. Returns: list: A new list with integers sorted in ascending order. return sorted(lst)"},{"question":"How can you replace a single word from a string in Python without using predefined methods like replace()?","solution":"def replace_word(input_string, target_word, replacement_word): Replace a single word in a string with another word without using predefined methods like replace(). Args: input_string (str): The original string. target_word (str): The word to be replaced. replacement_word (str): The word to replace with. Returns: str: The modified string with the target word replaced by the replacement word. words = input_string.split() result_words = [] for word in words: if word == target_word: result_words.append(replacement_word) else: result_words.append(word) return ' '.join(result_words)"},{"question":"Given an array of integers called \`nums\` along with a target integer \`target\`, write a function that returns the first three numbers that sum up to the target. You can assume that there will always be at least one valid triplet in the array.","solution":"def three_sum(nums, target): Given an array of integers nums and a target integer target, returns the first three numbers that sum up to the target. Assumes there will always be at least one valid triplet. nums.sort() for i in range(len(nums) - 2): l, r = i + 1, len(nums) - 1 while l < r: total = nums[i] + nums[l] + nums[r] if total == target: return [nums[i], nums[l], nums[r]] elif total < target: l += 1 else: r -= 1 return [] # Examples: # nums = [1, 2, 3, 4, 5, 6] # target = 10 # three_sum(nums, target) should return [1, 3, 6] or any other valid triplet summing up to 10"},{"question":"Create a function that takes two arguments, a number and a string, and returns the string repeated the specified number of times. However, if the number is negative or the string is empty, the function should raise an error.","solution":"def repeat_string(n, s): Repeats the string s, n times. Raises a ValueError if n is negative or s is empty. :param n: Number of times to repeat the string :param s: The string to be repeated :return: The repeated string if n < 0: raise ValueError(\\"The number of repetitions cannot be negative.\\") if s == \\"\\": raise ValueError(\\"The string cannot be empty.\\") return s * n"},{"question":"Write a function in your preferred programming language to implement the Odd-Even Sort Algorithm on a given array of integers. Additionally, optimize the algorithm to terminate early if no more swaps are needed, and modify it to work with arrays of any comparable data types, not just integers.","solution":"def odd_even_sort(arr): Performs the Odd-Even Sort on the given array, applicable to any comparable data types. The sort is made optimal by terminating early if no swaps are needed. n = len(arr) is_sorted = False while not is_sorted: is_sorted = True # Perform odd indexed passes for i in range(1, n-1, 2): if arr[i] > arr[i+1]: arr[i], arr[i+1] = arr[i+1], arr[i] is_sorted = False # Perform even indexed passes for i in range(0, n-1, 2): if arr[i] > arr[i+1]: arr[i], arr[i+1] = arr[i+1], arr[i] is_sorted = False return arr"},{"question":"Create a function in Python that takes a list of strings as input and returns a dictionary. The dictionary should have keys corresponding to unique individual words from the list of strings, and the associated values should be the frequency of each word in the list. Make sure your solution is case-insensitive. That is, \\"String\\" and \\"string\\" should be considered the same word.","solution":"def word_frequency(strings): Returns a dictionary with word frequency from a given list of strings, case-insensitive. frequency = {} for string in strings: words = string.lower().split() for word in words: if word in frequency: frequency[word] += 1 else: frequency[word] = 1 return frequency"},{"question":"author a code in python that receives an http request and returns the request method, uri, http version, headers, and body in the response","solution":"from flask import Flask, request, jsonify app = Flask(__name__) @app.route('/', methods=['GET', 'POST', 'PUT', 'DELETE']) def handle_request(): response = { 'method': request.method, 'uri': request.url, 'http_version': request.environ.get('SERVER_PROTOCOL'), 'headers': dict(request.headers), 'body': request.get_data(as_text=True) } return jsonify(response) # To run the application # if __name__ == '__main__': # app.run(debug=True)"},{"question":"Write a python program that simulates a calculator that can add, subtract, multiply and divide two numbers. Your program should prompt the user to enter two numbers and then prompt for an operator (+, -, *, /). The program should then perform the operation and print the result. Also, include error handling for invalid operators and division by zero.","solution":"def calculator(a, b, operator): Simulates a calculator that performs addition, subtraction, multiplication, or division on two numbers. Parameters: a (float): The first number. b (float): The second number. operator (str): The operator (+, -, *, /). Returns: float: The result of the operation. Raises: ValueError: If the operator is invalid. ZeroDivisionError: If division by zero is attempted. if operator == '+': return a + b elif operator == '-': return a - b elif operator == '*': return a * b elif operator == '/': if b == 0: raise ZeroDivisionError(\\"Division by zero is not allowed.\\") return a / b else: raise ValueError(\\"Invalid operator. Please use +, -, *, or /.\\")"},{"question":"Write a recursive algorithm to generate all permutations of an array. Additionally, devise a method within the algorithm to eliminate duplicate permutations resulting from arrays that might contain duplicate elements.","solution":"def permute_unique(nums): Generates all unique permutations of the input list nums. def backtrack(start=0): if start == len(nums): result.add(tuple(nums[:])) # Add the current permutation as a tuple to the result set return seen = set() for i in range(start, len(nums)): if nums[i] in seen: # Skip duplicates continue seen.add(nums[i]) nums[start], nums[i] = nums[i], nums[start] backtrack(start + 1) nums[start], nums[i] = nums[i], nums[start] result = set() nums.sort() # Sort the numbers to handle duplicates backtrack() return [list(perm) for perm in result]"},{"question":"Imagine you're working with a hierarchical data structure represented in a JSON format, where each element could either be a dictionary or a list. The task is to implement a Python function that recursively traverses this structure, collecting and returning a list of all the integer values found within. However, there's a catch: you must ignore any integer values that are negative. This requires a deep understanding of recursion and handling complex data structures.","solution":"def collect_positive_integers(data): Recursively traverses a hierarchical structure to collect all positive integers. :param data: hierarchical structure (list or dictionary) :return: list of positive integers found positive_integers = [] if isinstance(data, dict): for key, value in data.items(): positive_integers.extend(collect_positive_integers(value)) elif isinstance(data, list): for item in data: positive_integers.extend(collect_positive_integers(item)) elif isinstance(data, int): if data >= 0: positive_integers.append(data) return positive_integers"},{"question":"Write a Python program that simulates a simple dictionary application. The application should allow users to add, update, and remove entries (a word with its definition) from the dictionary. Furthermore, it should include a search feature that allows users to look up a word and see its definition. If the word doesn't exist in the dictionary, the application should notify the user. Additionally, implement a feature to display all the entries in the dictionary.","solution":"class SimpleDictionary: def __init__(self): self.dictionary = {} def add_entry(self, word, definition): self.dictionary[word] = definition def update_entry(self, word, new_definition): if word in self.dictionary: self.dictionary[word] = new_definition else: return f\\"Word '{word}' not found in dictionary.\\" def remove_entry(self, word): if word in self.dictionary: del self.dictionary[word] else: return f\\"Word '{word}' not found in dictionary.\\" def search_entry(self, word): if word in self.dictionary: return self.dictionary[word] else: return f\\"Word '{word}' not found in dictionary.\\" def display_entries(self): return self.dictionary"},{"question":"Given a list of numbers in increasing order, insert a new number such that the new list is still in increasing order. Additionally, the program should remove any duplicates in the final list. Implement this in an efficient way.","solution":"def insert_and_remove_duplicates(sorted_list, new_number): Inserts new_number into sorted_list while maintaining the order and removes any duplicates. :param sorted_list: List of numbers in increasing order :param new_number: New number to be inserted :return: New list with the number inserted and duplicates removed # Insert the new number into the list sorted_list.append(new_number) # Sort the list (it will maintain order as we inserted one more element in an already sorted list) sorted_list.sort() # Use a set to eliminate duplicates and convert back to a list return sorted(set(sorted_list))"},{"question":"Given an array of numbers, write a Python program to find the two numbers that sum up to the given target value.","solution":"def two_sum(nums, target): Finds two numbers in the list that add up to the target value and returns their indices. :param nums: List of integers :param target: Target integer value :return: Tuple containing indices of the two numbers that add up to the target, or None if no such pair exists num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], index) num_to_index[num] = index return None"},{"question":"create algorithm for it: Given an array of length N and an integer x, you need to find and return the last index of integer x present in the array. Return -1 if it is not present in the array. Last index means - if x is present multiple times in the array, return the index at which x comes last in that array.","solution":"def last_index(arr, x): Returns the last index of integer x in the array arr. If x is not present, returns -1. for i in range(len(arr) - 1, -1, -1): if arr[i] == x: return i return -1"},{"question":"Develop a Python program that accepts two large numbers as input from the user. The numbers will have up to 1000 digits and will be provided as string inputs. Your program should perform multiplication of these large numbers without converting them to integers, and then display the product as a string output. Additionally, your program should include error handling for non-numeric and invalid input characters.","solution":"def multiply_large_numbers(num1, num2): Multiplies two large numbers represented as strings and returns the result as a string. if not num1.isdigit() or not num2.isdigit(): raise ValueError(\\"Both inputs must be numeric strings.\\") len1, len2 = len(num1), len(num2) result = [0] * (len1 + len2) for i in reversed(range(len1)): for j in reversed(range(len2)): product = int(num1[i]) * int(num2[j]) sum_ = product + result[i + j + 1] result[i + j + 1] = sum_ % 10 result[i + j] += sum_ // 10 result_str = ''.join(map(str, result)).lstrip('0') return result_str if result_str else '0'"},{"question":"Write a Python program to remove all instances of a given value from a given list, but without using any built-in Python methods or libraries. The program should only use basic programming constructs and logic to achieve the desired result.","solution":"def remove_instances(lst, value): Removes all instances of the given value from the list. Parameters: lst (list): List from which to remove the value. value: Value to be removed from the list. Returns: list: A new list with all instances of the value removed. result = [] for item in lst: if item != value: result.append(item) return result"},{"question":"Develop a Python program that generates a horizontal histogram using ASCII characters representing the frequencies of each number in a given list. Furthermore, the program should compactly display the frequencies of numbers that occur more than once by condensing the histogram for these numbers into a single line with the number and its frequency in parentheses, followed by an asterisk symbol equivalent to the occurrences. Below is a flawed code snippet that attempts to achieve this but contains errors. Your task is to debug and improve this code.","solution":"def generate_histogram(numbers): Generates a horizontal histogram for the given list of numbers. Frequencies of numbers are compactly displayed with the counts in parentheses. from collections import Counter frequencies = Counter(numbers) histogram_lines = [] for number, count in sorted(frequencies.items()): if count > 1: histogram_lines.append(f\\"{number} ({count}) {'*' * count}\\") else: histogram_lines.append(f\\"{number} {'*' * count}\\") return \\"n\\".join(histogram_lines)"},{"question":"Given a singly linked list, write a function to find the nth to last node. As an added challenge, implement this in a way that only traverses the list once and does not modify the list. Also, analyze the space and time complexity of your solution.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def nth_to_last(head, n): Returns the nth to last node of the singly linked list. Parameters: head (ListNode): The head of the singly linked list. n (int): The position from the last node to find. Returns: ListNode: The nth to last node or None if n is out of range. # Initialize two pointers - both will start at the head first = second = head # Move the first pointer n steps ahead for _ in range(n): if first is None: return None # n is greater than the length of the list first = first.next # Move both pointers until the first pointer reaches the end while first: first = first.next second = second.next return second # Time Complexity: O(L), where L is the length of the linked list # Space Complexity: O(1), no extra space used"},{"question":"Develop a Python function to decode the length of a string encoded within a dictionary. The twist: The dictionary has a key named 'encoded_length', the value of which is an unknown string's length in encrypted form. The encryption method is such that the length is not given in direct numerical form but encoded using ASCII values. Your task is to decode this value to return the actual length of the string.","solution":"def decode_length(encoded_dict): Decodes the 'encoded_length' in the dictionary to return the actual length of the string. The 'encoded_length' is a string of ASCII values where each character's ordinal value denotes the part of the length. encoded_string = encoded_dict['encoded_length'] length = 0 for char in encoded_string: length = length * 10 + (ord(char) - ord('0')) return length"},{"question":"Generate a multi-threaded algorithmic instruction set in an object-oriented syntax, utilizing a specialized data structure such as a concurrent queue or thread-safe stack. Your task is to ensure the manipulation and traversal of a dynamically sized group of numerical data. The operations on this group should include insertion, deletion, and median value finding. Efficiency and thread-safety should be taken into account while writing the code. Due to the platform's limitation, I can only provide a rough design in python using the threading and queue modules.","solution":"from queue import PriorityQueue from threading import Lock, Thread from statistics import median class ThreadSafePriorityQueue: def __init__(self): self.pq = PriorityQueue() self.lock = Lock() self.data = [] def insert(self, value): with self.lock: self.pq.put(value) self.data.append(value) def delete(self, value): with self.lock: if value in self.data: self.data.remove(value) temp_pq = PriorityQueue() while not self.pq.empty(): item = self.pq.get() if item != value: temp_pq.put(item) self.pq = temp_pq else: raise ValueError(\\"Value not found in queue\\") def find_median(self): with self.lock: if len(self.data) == 0: raise ValueError(\\"No data in the queue\\") return median(self.data) def traverse(self): with self.lock: return list(self.data) def process_insertion(self, values): threads = [] for value in values: thread = Thread(target=self.insert, args=(value,)) threads.append(thread) thread.start() for thread in threads: thread.join() def process_deletion(self, values): threads = [] for value in values: thread = Thread(target=self.delete, args=(value,)) threads.append(thread) thread.start() for thread in threads: thread.join()"},{"question":"Create a program that generates an array of 100,000 random integers between -1,000,000 and 1,000,000. The program should then sort the array in ascending order using a quicksort algorithm implemented recursively. The program should output the sorted array.","solution":"import random def quicksort(arr): Recursively sorts an array using the quicksort algorithm. if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right) def generate_and_sort_array(): Generates an array of 100,000 random integers between -1,000,000 and 1,000,000, and sorts it using the quicksort algorithm. array = [random.randint(-1000000, 1000000) for _ in range(100000)] sorted_array = quicksort(array) return sorted_array"},{"question":"Write a Python program that simulates flipping a coin. The program should take input from the user for the number of trials and then simulate that many coin flips. It should then print out how many times each side of the coin came up.","solution":"import random def flip_coin(trials): Simulates flipping a coin for a specified number of trials and counts the outcomes. Parameters: trials (int): The number of coin flips to simulate. Returns: dict: A dictionary with counts of heads and tails. outcomes = {\\"heads\\": 0, \\"tails\\": 0} for _ in range(trials): if random.choice([\\"heads\\", \\"tails\\"]) == \\"heads\\": outcomes[\\"heads\\"] += 1 else: outcomes[\\"tails\\"] += 1 return outcomes"},{"question":"I want to develop an efficient algorithm to find all the 'k' nearest neighbors for a given point in a 2D plane. Can you provide me with a code example using Python?","solution":"import heapq import math def k_nearest_neighbors(points, target, k): Finds the k nearest neighbors to the target point. Args: points (list of tuples): List of points in the 2D plane, each point is a tuple (x, y). target (tuple): The target point (x, y). k (int): The number of nearest neighbors to find. Returns: list of tuples: The k nearest neighbors to the target point. def distance(p1, p2): return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) # Create a max heap of size k max_heap = [] for point in points: dist = distance(point, target) heapq.heappush(max_heap, (-dist, point)) if len(max_heap) > k: heapq.heappop(max_heap) return [point for _, point in max_heap]"},{"question":"Given a list of words, write a Python function to print the frequency of occurrence of each word in the list, sorted in descending order by frequency. If two words have the same frequency, they should be sorted alphabetically. The function should have a time complexity of O(n log n), where n is the number of words in the list.","solution":"from collections import Counter def word_frequencies(words): Returns a list of tuples containing words and their frequencies, sorted by frequency in descending order and alphabetically for same frequency words. words : List[str] # Count the frequency of each word word_count = Counter(words) # Sort by frequency first (descending), then alphabetically sorted_word_count = sorted(word_count.items(), key=lambda item: (-item[1], item[0])) return sorted_word_count"},{"question":"Convert the equation y = 2x^2 - 4x + 3 into a Python function that can be used to generate a table of values for x ranging from -5 to 5 in increments of 0.5. Also, plot the curve for the same range of x using any suitable Python plotting library.","solution":"import numpy as np import matplotlib.pyplot as plt def equation(x): Given the equation y = 2x^2 - 4x + 3, calculate the value of y for a given x. return 2 * x**2 - 4 * x + 3 def generate_table(start, end, step): Generate a table of values for the equation y = 2x^2 - 4x + 3 from start to end with the given step size. x_values = np.arange(start, end + step, step) table = [(x, equation(x)) for x in x_values] return table def plot_curve(start, end, step): Plot the curve for the equation y = 2x^2 - 4x + 3 from start to end with the given step size. x_values = np.arange(start, end + step, step) y_values = equation(x_values) plt.figure(figsize=(10, 6)) plt.plot(x_values, y_values, label='y = 2x^2 - 4x + 3') plt.title('Plot of y = 2x^2 - 4x + 3') plt.xlabel('x') plt.ylabel('y') plt.legend() plt.grid(True) plt.show() # For testing and demonstration only (not part of the solution functionally) table = generate_table(-5, 5, 0.5) for x, y in table: print(f\\"x = {x}, y = {y}\\") plot_curve(-5, 5, 0.5)"},{"question":"Craft a Python function utilizing recursive methodology to calculate the factorial of a non-negative integer. A factorial is the product of a particular integer and all the integers beneath it. Hence, factorial of, say, four would be calculated as '4x3x2x1=24'. Ponder on the code's structure, embodying multiple steps for the recursive process.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. Uses recursion to compute the factorial. if n == 0: return 1 else: return n * factorial(n - 1)"},{"question":"Write a function that takes in a list of strings and checks whether any of the strings contain any uppercase letters. If any uppercase letters are found, the function should return the index of the first string that contains an uppercase letter. If no uppercase letters are found, the function should return -1.","solution":"def find_first_uppercase(strings): Returns the index of the first string containing any uppercase letter. Returns -1 if no strings contain uppercase letters. for index, string in enumerate(strings): if any(char.isupper() for char in string): return index return -1"},{"question":"Given two undirected graphs G1 and G2, write a Python program to check if G1 is isomorphic to G2.","solution":"import networkx as nx def are_graphs_isomorphic(G1, G2): Returns True if the graphs G1 and G2 are isomorphic, False otherwise. return nx.is_isomorphic(G1, G2)"},{"question":"Given two strings s1 and s2, write a function in Python to return a new string containing the characters present only in s1, not in s2, and also ignore case sensitivity. Also, optimize the solution such that it considers only ASCII characters, making the function more time and space efficient.","solution":"def only_in_s1_not_in_s2(s1, s2): Returns a new string containing the characters present only in s1 and not in s2, ignoring case sensitivity. Considers only ASCII characters. s2_set = set(s2.lower()) return ''.join([char for char in s1 if char.lower() not in s2_set])"},{"question":"Create a Python program to generate a random 8-character alphanumeric string. The string should contain at least one lowercase letter, one uppercase letter, one digit and one special character.","solution":"import random import string def generate_random_string(): Generates an 8-character alphanumeric string containing at least one lowercase letter, one uppercase letter, one digit, and one special character. if not generate_random_string._characters: generate_random_string._characters = list(string.ascii_lowercase + string.ascii_uppercase + string.digits + string.punctuation) while True: result = [ random.choice(string.ascii_lowercase), random.choice(string.ascii_uppercase), random.choice(string.digits), random.choice(string.punctuation), ] + random.sample(generate_random_string._characters, 4) random.shuffle(result) result_str = ''.join(result) if (any(c.islower() for c in result_str) and any(c.isupper() for c in result_str) and any(c.isdigit() for c in result_str) and any(c in string.punctuation for c in result_str)): return result_str generate_random_string._characters = None"},{"question":"Write a Python function \`find_missing_number\` that takes a list of unique integers from 1 to n (inclusive) with one number missing and returns the missing number. Additionally, implement a function \`verify_solution\` to test the \`find_missing_number\` function with provided data points.","solution":"def find_missing_number(nums): Finds the missing number from 1 to n in a list of unique integers with one missing. n = len(nums) + 1 expected_sum = n * (n + 1) // 2 actual_sum = sum(nums) return expected_sum - actual_sum"},{"question":"Define a python function called matrix_adder that can take in a list of matrices, where a matrix is represented as a list of lists with the same number of rows and columns and add them together element-wise and return the result as a new matrix. The function should check that all matrices have the same dimensions and should be able to handle negative numbers and decimal numbers. It should also be able to handle addition of matrices of any size. However, the function should not use any built-in python functions or libraries to perform the addition or any other matrix operations.","solution":"def matrix_adder(matrices): Adds a list of matrices together element-wise and returns the result as a new matrix. Parameters: matrices (list of lists of lists of numbers): A list containing matrices to be added. Returns: list of lists of numbers: The resulting matrix after element-wise addition. Raises: ValueError: If the matrices do not have the same dimensions. if not matrices: raise ValueError(\\"The list of matrices is empty.\\") num_rows = len(matrices[0]) num_cols = len(matrices[0][0]) # Check if all matrices have the same dimensions for matrix in matrices: if len(matrix) != num_rows or any(len(row) != num_cols for row in matrix): raise ValueError(\\"All matrices must have the same dimensions.\\") # Initialize result matrix with zeros result_matrix = [[0] * num_cols for _ in range(num_rows)] # Add the matrices element-wise for matrix in matrices: for i in range(num_rows): for j in range(num_cols): result_matrix[i][j] += matrix[i][j] return result_matrix"},{"question":"//Create a program that will reverse the order of characters in a string and replace every occurrence of a specific character with another character, using only a single loop and without using any predefined functions or methods for string reversal or replacement.","solution":"def reverse_and_replace(string, old_char, new_char): Reverses the order of characters in the string and replaces every occurrence of old_char with new_char. Parameters: - string (str): The string to be modified. - old_char (str): The character to be replaced. - new_char (str): The character to replace with. Returns: - str: The reversed and modified string. result = \\"\\" for i in range(len(string) - 1, -1, -1): if string[i] == old_char: result += new_char else: result += string[i] return result"},{"question":"Create a dictionary with the keys of the students' IDs and their corresponding grades as the values. The student IDs are unique and will always be positive integers. The grades are represented as floating-point numbers between 0 and 100, inclusive. The dictionary should only include student IDs that have a corresponding grade. The function should have a time complexity of O(n), where n is the number of elements in the grades list. The space complexity should be O(m), where m is the number of unique student IDs in the grades list.","solution":"def create_student_grades(ids, grades): Creates a dictionary with student IDs as keys and corresponding grades as values. Args: ids (list): List of student IDs (positive integers). grades (list): List of corresponding grades (floating-point numbers between 0 and 100 inclusive). Returns: dict: Dictionary with student IDs as keys and grades as values. if not isinstance(ids, list) or not isinstance(grades, list): raise ValueError(\\"Both ids and grades should be lists.\\") if len(ids) != len(grades): raise ValueError(\\"The length of ids and grades should be the same.\\") result = {} for i in range(len(ids)): student_id = ids[i] grade = grades[i] if isinstance(student_id, int) and student_id > 0 and isinstance(grade, (int, float)) and 0 <= grade <= 100: result[student_id] = grade else: raise ValueError(\\"Invalid student ID or grade in the input.\\") return result"},{"question":"Write a Python function that takes two lists as input and returns a new list with the unique elements from both lists.","solution":"def unique_elements(list1, list2): Returns a list containing unique elements from both input lists. return list(set(list1) | set(list2))"},{"question":"Develop a Python script that reads a CSV file containing names, email addresses, and ages, and outputs the information sorted by age in descending order. The script should use the 'csv' module for handling the CSV file.","solution":"import csv def read_and_sort_csv_by_age(file_path): Reads a CSV file containing names, email addresses, and ages, and outputs the information sorted by age in descending order. :param file_path: Path to the CSV file :return: List of dictionaries with keys 'name', 'email', 'age' sorted by 'age' in descending order data = [] with open(file_path, mode='r') as file: csv_reader = csv.DictReader(file) for row in csv_reader: row['age'] = int(row['age']) data.append(row) sorted_data = sorted(data, key=lambda x: x['age'], reverse=True) return sorted_data"},{"question":"Write a Python program that takes a list of integers as input and returns a new list with each element multiplied by 2. However, you cannot use the multiplication operator (*) or the standard library function \`map()\`. Your solution should have a time complexity of O(n), where n is the length of the input list.","solution":"def multiply_by_two(lst): Returns a new list with each element of the input list multiplied by 2. Cannot use the '*' operator or map() function. def double(x): return x + x result = [] for i in lst: result.append(double(i)) return result"},{"question":"Implement a function in Python that sets all the elements of a two-dimensional list to a default value. The dimensions of the list will be provided as parameters to the function. The function should have a time complexity of O(n * m), where n is the number of rows and m is the number of columns.","solution":"def set_default_value(rows, cols, default_value): Sets all elements of a two-dimensional list to a default value. :param rows: Number of rows in the list. :param cols: Number of columns in the list. :param default_value: The value to set all elements of the list. :return: A two-dimensional list with all elements set to default_value. return [[default_value for _ in range(cols)] for _ in range(rows)]"},{"question":"Write a Python program to find the longest subsequence of equal elements in a list.","solution":"def longest_subsequence(lst): Finds the longest subsequence of equal elements in the list. Args: lst (List): A list of elements. Returns: List: The longest subsequence of equal elements. if not lst: return [] max_count = 1 current_count = 1 max_element = lst[0] current_element = lst[0] for i in range(1, len(lst)): if lst[i] == current_element: current_count += 1 else: if current_count > max_count: max_count = current_count max_element = current_element current_element = lst[i] current_count = 1 if current_count > max_count: return [current_element] * current_count else: return [max_element] * max_count"},{"question":"Write a piece of code that not only generates a list of numbers between 1 and 50 which are divisible by 7, but also finds the sum and average of those numbers. Additionally, implement a function that finds the factorial of each number in this list, and returns a new list with these factorials. Calculate and print the sum and average of this factorial list as well.","solution":"def generate_divisible_by_seven(): Generates a list of numbers between 1 and 50 which are divisible by 7. return [i for i in range(1, 51) if i % 7 == 0] def sum_and_average(numbers): Returns the sum and average of the given list of numbers. total_sum = sum(numbers) average = total_sum / len(numbers) if numbers else 0 return total_sum, average def factorial(n): Returns the factorial of n. if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result def factorials(numbers): Returns a list of factorials for the given list of numbers. return [factorial(n) for n in numbers] # Generate the list of numbers divisible by 7 numbers_divisible_by_seven = generate_divisible_by_seven() # Calculate sum and average of these numbers sum_divisible_by_seven, avg_divisible_by_seven = sum_and_average(numbers_divisible_by_seven) # Calculate factorials of these numbers factorial_list = factorials(numbers_divisible_by_seven) # Calculate sum and average of the factorial list sum_factorials, avg_factorials = sum_and_average(factorial_list) # Output the results print(f\\"Numbers divisible by 7: {numbers_divisible_by_seven}\\") print(f\\"Sum of numbers divisible by 7: {sum_divisible_by_seven}\\") print(f\\"Average of numbers divisible by 7: {avg_divisible_by_seven}\\") print(f\\"Factorial list: {factorial_list}\\") print(f\\"Sum of factorials: {sum_factorials}\\") print(f\\"Average of factorials: {avg_factorials}\\")"},{"question":"How can I create a Python function that locates the index of a number in a sorted array that is closest to a given target number?","solution":"def find_closest_index(sorted_array, target): Returns the index of the element in the sorted_array that is closest to the target number. if not sorted_array: return None left, right = 0, len(sorted_array) - 1 while left < right: mid = (left + right) // 2 if sorted_array[mid] < target: left = mid + 1 else: right = mid # Check the closest index between left and (left - 1) if left > 0 if left == 0: return left if abs(sorted_array[left] - target) < abs(sorted_array[left - 1] - target): return left return left - 1"},{"question":"Using the Python programming language, write a function that takes an integer as input and returns a string indicating whether the integer is odd or even. The function should also include error handling to ensure that the input is indeed an integer. Then, apply this function to the number 7 to determine its parity. Additionally, investigate the mathematical properties of the number 7 and its relationship to parity, including any relevant theorems or conjectures. Finally, consider the broader implications of parity in number theory and its applications in cryptography and computer science. endinput","solution":"def check_parity(n): Returns 'Odd' if the input integer n is odd, and 'Even' if it is even. Raises a ValueError if the input is not an integer. if not isinstance(n, int): raise ValueError('Input must be an integer') return 'Odd' if n % 2 else 'Even' # Applying the function to number 7 parity_of_7 = check_parity(7) # Mathematical properties of the number 7: # 1. 7 is a prime number, which means it has no positive divisors other than 1 and itself. # 2. 7 is an odd number because it is not divisible by 2. # Relationship to parity: # Parity indicates whether a number is odd or even. The number 7 is odd because it is not divisible by 2. # Relevant theorem: # - All primes greater than 2 are odd (since 2 is the only even prime). # Broader implications of parity: # 1. In number theory, parity helps with classification of integers and analysis in modular arithmetic. # 2. In cryptography, parity bits are used in error detection schemes. # 3. In computer science, parity is used in algorithms and data structures, especially for data integrity and error checking."},{"question":"Write a simple algorithm in Python to multiply two input numbers a and b.","solution":"def multiply(a, b): Returns the product of a and b. return a * b"},{"question":"Write a simple Python function to count the number of vowels in a given string.","solution":"def count_vowels(s): Returns the number of vowels in the given string. Args: s (str): The string to count vowels in. Returns: int: The number of vowels in the string. vowels = \\"aeiouAEIOU\\" return sum(1 for char in s if char in vowels)"},{"question":"Write a function that takes in a list of strings and returns a new list containing only the string elements that are palindromes.","solution":"def find_palindromes(strings): Returns a list of palindromes from the input list of strings. A palindrome is a word that reads the same backward as forward. return [s for s in strings if s == s[::-1]]"},{"question":"Knapsack problem in Python: Suppose you have a list of objects with both weight and value, and a maximum weight capacity for your knapsack. Write a function to determine the maximum value that can be obtained without exceeding the weight capacity.","solution":"def knapsack(max_weight, weights, values): Returns the maximum value that can be obtained without exceeding the weight capacity. Parameters: max_weight (int): Maximum weight capacity of the knapsack. weights (list of int): List of weights for each item. values (list of int): List of values for each item. Returns: int: The maximum value that can be obtained. n = len(weights) dp = [[0 for x in range(max_weight + 1)] for x in range(n + 1)] for i in range(n + 1): for w in range(max_weight + 1): if i == 0 or w == 0: dp[i][w] = 0 elif weights[i - 1] <= w: dp[i][w] = max(values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w]) else: dp[i][w] = dp[i - 1][w] return dp[n][max_weight]"},{"question":"You are a software engineer tasked with creating a new AI program. Write a function in Python that takes in a list of integers and returns the maximum product that can be obtained by multiplying any three integers in the list. If the list contains less than three integers, the function should return 0.","solution":"def maximum_product_of_three(nums): Returns the maximum product that can be obtained by multiplying any three integers in the list. If the list contains less than three integers, returns 0. if len(nums) < 3: return 0 nums.sort() # Maximum product can either be the product of the three largest numbers, # or the product of the two smallest numbers (most negative) and the largest number. max_product = max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1]) return max_product"},{"question":"What is the command to delete all occurrences of the element \\"5\\" from a given Python array, but also remove any duplicates from the remaining elements, preserve the order of the elements, and optimize the solution to have a time complexity of O(n)?","solution":"def delete_and_deduplicate(arr, element): Deletes all occurrences of the given element from the array and removes any duplicates from the remaining elements while preserving their order. Time Complexity: O(n) seen = set() result = [] for item in arr: if item != element and item not in seen: seen.add(item) result.append(item) return result"},{"question":"Create a script in Python that takes a string and converts it to a list of characters. Then, modify the list by removing any vowels from it. Finally, join the remaining characters back into a string and print the result.","solution":"def remove_vowels_from_string(s): Takes a string and removes vowels from it. vowels = 'aeiouAEIOU' char_list = [char for char in s if char not in vowels] result_string = ''.join(char_list) return result_string"},{"question":"Write a Python program to reverse every word of a sentence given as input, preserving the order of words. Also, if a word contains any special characters (e.g., punctuation), those special characters should be left in their original positions within the reversed word.","solution":"def reverse_word(word): Helper function to reverse a word while preserving the positions of special characters. special_chars = {i: c for i, c in enumerate(word) if not c.isalnum()} reversed_word = [c for c in word if c.isalnum()][::-1] for i, c in special_chars.items(): reversed_word.insert(i, c) return ''.join(reversed_word) def reverse_sentence(sentence): Reverses every word in the sentence, preserving the order of words and keeping special characters in their original positions within each word. words = sentence.split() reversed_words = [reverse_word(word) for word in words] return ' '.join(reversed_words)"},{"question":"Write the backpropagation algorithm formula for a 3-layer neural network with a sigmoid activation function. Additionally, implement the algorithm in Python using only NumPy library, without using any deep learning frameworks.","solution":"import numpy as np def sigmoid(x): Sigmoid activation function. return 1 / (1 + np.exp(-x)) def sigmoid_derivative(x): Derivative of the sigmoid function. return x * (1 - x) def initialize_parameters(input_size, hidden_size, output_size): Initializes weights and biases. np.random.seed(1) W1 = np.random.randn(hidden_size, input_size) * 0.01 b1 = np.zeros((hidden_size, 1)) W2 = np.random.randn(output_size, hidden_size) * 0.01 b2 = np.zeros((output_size, 1)) return W1, b1, W2, b2 def forward_propagation(X, W1, b1, W2, b2): Forward propagation Z1 = np.dot(W1, X) + b1 A1 = sigmoid(Z1) Z2 = np.dot(W2, A1) + b2 A2 = sigmoid(Z2) return Z1, A1, Z2, A2 def compute_cost(A2, Y): Compute the cost function. m = Y.shape[1] cost = (-1 / m) * np.sum(Y * np.log(A2) + (1 - Y) * np.log(1 - A2)) return cost def backward_propagation(X, Y, Z1, A1, Z2, A2, W1, W2): Backward propagation m = X.shape[1] dZ2 = A2 - Y dW2 = (1 / m) * np.dot(dZ2, A1.T) db2 = (1 / m) * np.sum(dZ2, axis=1, keepdims=True) dA1 = np.dot(W2.T, dZ2) dZ1 = dA1 * sigmoid_derivative(A1) dW1 = (1 / m) * np.dot(dZ1, X.T) db1 = (1 / m) * np.sum(dZ1, axis=1, keepdims=True) return dW1, db1, dW2, db2 def update_parameters(W1, b1, W2, b2, dW1, db1, dW2, db2, learning_rate): Update the parameters using gradient descent. W1 -= learning_rate * dW1 b1 -= learning_rate * db1 W2 -= learning_rate * dW2 b2 -= learning_rate * db2 return W1, b1, W2, b2 def neural_network(X, Y, input_size, hidden_size, output_size, learning_rate, num_iterations): Train the neural network W1, b1, W2, b2 = initialize_parameters(input_size, hidden_size, output_size) for i in range(num_iterations): Z1, A1, Z2, A2 = forward_propagation(X, W1, b1, W2, b2) cost = compute_cost(A2, Y) dW1, db1, dW2, db2 = backward_propagation(X, Y, Z1, A1, Z2, A2, W1, W2) W1, b1, W2, b2 = update_parameters(W1, b1, W2, b2, dW1, db1, dW2, db2, learning_rate) if i % 100 == 0: print(f\\"Cost after iteration {i}: {cost}\\") return W1, b1, W2, b2"},{"question":"Write a Python function to check if a given bigram (pair of words) occurs in a list of texts. The function should take a list of strings (texts) and a tuple of two strings (bigram) as arguments. It should return a Boolean value indicating if the bigram exists as a consecutive sequence of words in any of the texts in the list. The function should ignore case sensitivity and should also handle punctuation correctly, considering it as a word separator.","solution":"import re def bigram_exists(texts, bigram): Check if a given bigram occurs in a list of texts. Args: texts (list): A list of strings containing the texts. bigram (tuple): A tuple of two strings representing the bigram. Returns: bool: True if the bigram exists in any of the texts, False otherwise. pattern = re.compile(r'b' + re.escape(bigram[0]) + r's+' + re.escape(bigram[1]) + r'b', re.IGNORECASE) for text in texts: if pattern.search(text): return True return False"},{"question":"Write a Python code that reads a text file containing a list of words (one word per line) and counts the number of unique words. Ensure the code is efficient, and consider the case sensitivity of the words.","solution":"def count_unique_words(file_path): Reads a text file and counts the number of unique words. Args: file_path (str): The path to the text file. Returns: int: The number of unique words. unique_words = set() with open(file_path, 'r') as file: for line in file: word = line.strip() if word: unique_words.add(word) return len(unique_words)"},{"question":"Write a function that takes two strings as arguments and checks whether the first string contains the second string as a substring. The function should return True if the second string is a substring of the first, and False otherwise. Additionally, implement a mechanism to ignore case sensitivity and check for overlapping occurrences.","solution":"def contains_substring(s1, s2): Checks whether the first string contains the second string as a substring, ignoring case sensitivity. Args: s1 (str): The string to be searched within. s2 (str): The string to search for. Returns: bool: True if s2 is a substring of s1, False otherwise. # Convert both strings to lower case to ignore case sensitivity s1_lower = s1.lower() s2_lower = s2.lower() # Check if s2_lower is in s1_lower return s2_lower in s1_lower"},{"question":"Write a program that simulates a basic calculator. The calculator should be able to perform addition, subtraction, multiplication, and division on two numbers. It should also handle division by zero and invalid input.","solution":"def add(a, b): Returns the sum of a and b. return a + b def subtract(a, b): Returns the difference when b is subtracted from a. return a - b def multiply(a, b): Returns the product of a and b. return a * b def divide(a, b): Returns the quotient when a is divided by b. If b is zero, returns 'Undefined'. if b == 0: return 'Undefined' return a / b def calculator(a, b, operation): Simulates a basic calculator that can perform addition, subtraction, multiplication, and division based on the operation provided. Valid operations are 'add', 'subtract', 'multiply', 'divide'. if operation == 'add': return add(a, b) elif operation == 'subtract': return subtract(a, b) elif operation == 'multiply': return multiply(a, b) elif operation == 'divide': return divide(a, b) else: return 'Invalid operation'"},{"question":"Write a Python program that takes a given list of numbers and splits it into sublists of a specified size. However, if the specified size does not evenly divide the length of the given list, the remaining elements should form a sublist of their own, regardless of their number being less than the specified size.","solution":"def split_list(lst, size): Splits the given list into sublists of the specified size. If the specified size does not evenly divide the list, the last sublist will contain the remaining elements. Parameters: lst (list): The list to be split. size (int): The size of each sublist. Returns: list of lists: A list where each element is a sublist of the given size. return [lst[i:i+size] for i in range(0, len(lst), size)]"},{"question":"Write a Python generator function that yields only the prime numbers in the range from 1 to n. Also, write a separate function to test if a given number is prime, and use this function within your generator. Test your generator by printing out the prime numbers between 1 and 100. The solution should handle large numbers optimally, employing methods to reduce the computational complexity.","solution":"def is_prime(num): Returns True if num is a prime number, False otherwise. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def prime_generator(n): Generator that yields prime numbers from 1 to n. for number in range(1, n + 1): if is_prime(number): yield number # Print prime numbers from 1 to 100 for prime in prime_generator(100): print(prime)"},{"question":"Write a function in Python that takes two lists of integers as input and returns a list containing only the unique elements that appear in both input lists. The function should have a time complexity of O(n), where n is the total number of elements in both input lists.","solution":"def unique_common_elements(list1, list2): Returns a list containing the unique elements that appear in both input lists. set1 = set(list1) set2 = set(list2) return list(set1 & set2)"},{"question":"Create a regex to identify valid IPV4 addresses, and then create a function that uses this regex to parse through a provided list of IP addresses, removing any that aren't valid. Additionally, justify any design decisions you make in your code.","solution":"import re def is_valid_ipv4_address(ip): Checks if the given IP address is a valid IPv4 address. pattern = re.compile(r'^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)') return bool(pattern.match(ip)) def filter_valid_ipv4_addresses(ip_list): Filters out invalid IPv4 addresses from the provided list. return [ip for ip in ip_list if is_valid_ipv4_address(ip)]"},{"question":"Create a code to generate a unique 7-character string of random numbers and letters, ensuring that no two generated strings are the same. Additionally, implement a function to check if a given string is already present in a list of generated strings, and if so, generate a new unique string. Here's a Python code that generates unique 7-character strings of random numbers and letters using the \`random\` module. It also includes a function to check if a given string is already present in a list of generated strings and generates a new unique string if necessary.","solution":"import random import string generated_strings = set() def generate_unique_string(): Generates a unique 7-character string of random numbers and letters. while True: new_string = ''.join(random.choices(string.ascii_letters + string.digits, k=7)) if new_string not in generated_strings: generated_strings.add(new_string) return new_string def is_present_and_generate_unique(exist_list): Checks if a given string is present in the existing list. If yes, generate a new unique string; otherwise returns the original string. while True: new_string = generate_unique_string() if new_string not in exist_list: return new_string"},{"question":"Write a code to create a 3 x 3 matrix containing all 0s, but the matrix must be initialized using a recursive algorithm instead of a simple loop.","solution":"def create_zero_matrix(n, m): Create an n x m matrix initialized with zeros using a recursive algorithm. if n == 0: return [] else: return [create_zero_matrix_row(m)] + create_zero_matrix(n - 1, m) def create_zero_matrix_row(m): Create a row with m zeros. if m == 0: return [] else: return [0] + create_zero_matrix_row(m - 1) # Function to create a 3x3 matrix of zeros def create_3x3_zero_matrix(): return create_zero_matrix(3, 3)"},{"question":"Given a string \\"I am a programmer\\", write a program to reverse the string.","solution":"def reverse_string(s): Returns the reversed string of the input string s. return s[::-1]"},{"question":"I want to create a function in Python that checks if a given year is a leap year. How can I do this?","solution":"def is_leap_year(year): Returns True if the given year is a leap year, otherwise False. A year is a leap year if: - it is divisible by 4, and - if it is divisible by 100, it must also be divisible by 400 return (year % 4 == 0) and (year % 100 != 0 or year % 400 == 0)"},{"question":"Write a Python program for finding the maximum number in a list that contains both numeric and string values. The program should only consider numeric values when determining the maximum number and ignore any string values that can potentially be interpreted as numbers. The list can contain elements of different types.","solution":"def find_max_numeric(lst): Returns the maximum numeric value in the list, ignoring non-numeric values. numerics = [x for x in lst if isinstance(x, (int, float))] if numerics: return max(numerics) else: return None"},{"question":"Write code to create a Pandas data frame from a given dictionary of lists, where the keys of the dictionary represent the column names and the values represent the column values. Each list within the dictionary should have the same length. Additionally, the function should check for any missing values in the data and handle them appropriately by either skipping the row or filling it with a default value.","solution":"import pandas as pd def create_dataframe(data_dict, fill_missing=None): Creates a Pandas DataFrame from a dictionary of lists. Args: - data_dict (dict): Dictionary where keys are column names and values are lists of column values. - fill_missing: Default value to fill missing values. If None, rows with missing values will be dropped. Returns: - pd.DataFrame: DataFrame created from the dictionary. df = pd.DataFrame(data_dict) if fill_missing is not None: df = df.fillna(fill_missing) else: df = df.dropna() return df"},{"question":"Given a list of numbers, create a function that finds the two elements that sum to a given target number. Your function should also handle edge cases, such as if the target number cannot be achieved by any two numbers in the list, or if there are multiple pairs with the same sum. Additionally, provide a piece of erroneous code as a reference to increase misdirection.","solution":"def find_two_sum(nums, target): Return the first pair of numbers in the list that add up to the target. If no such pair exists, return None. Args: nums (list): A list of integers. target (int): The target sum to find. Returns: tuple: A tuple containing the first pair of numbers that add up to the target, or None if no such pair exists. seen = {} for num in nums: complement = target - num if complement in seen: return (complement, num) seen[num] = True return None"},{"question":"Given an erroneous piece of code that is supposed to check if a number is a palindrome, find and correct the mistake(s) in the code. Additionally, extend the function to not only check if a number is a palindrome but also return the smallest palindrome larger than the given number.","solution":"def is_palindrome(n): Checks if a given number n is a palindrome. str_n = str(n) return str_n == str_n[::-1] def next_palindrome(n): Finds the smallest palindrome number larger than the given number n. n += 1 while not is_palindrome(n): n += 1 return n"},{"question":"Write a Python program that simulates a game of chance. The game works as follows: the player rolls two dice. If the sum of the two dice is equal to 7 or 11, the player wins. If the sum is 2, 3, or 12, the player loses. For any other result, the player rolls the dice again. On subsequent rolls, if the sum is equal to the first sum, the player wins. If the sum is 7, the player loses. The game continues until the player either wins or loses.","solution":"import random def roll_dice(): Simulates rolling two dice. Returns a tuple with the result of each dice. return random.randint(1, 6), random.randint(1, 6) def dice_sum(dice_roll): Calculate the sum of the two dice. return sum(dice_roll) def game_of_chance(): Simulates the game of chance. Returns 'win' if the player wins and 'lose' if the player loses. initial_roll = roll_dice() initial_sum = dice_sum(initial_roll) if initial_sum in {7, 11}: return 'win' elif initial_sum in {2, 3, 12}: return 'lose' point = initial_sum while True: new_roll = roll_dice() new_sum = dice_sum(new_roll) if new_sum == point: return 'win' elif new_sum == 7: return 'lose'"},{"question":"Using Python programming language, create a function that generates a newspaper headline summarizing the emotional journey of Alex during his math test. The function should take as inputs: the length of time Alex had been studying, the number of practice tests he had taken, his average score on those practice tests, his level of confidence before the test, the number of questions on the test, the percentage of questions he answered correctly, and his emotional state at different time intervals during the test (measured on a scale from 1-10). The headline should also include a comparison of Alex's emotional state before and after the test, as well as a prediction of his future academic performance based on his performance on the math test. The function should output the headline in LaTeX format, with bolded keywords and proper capitalization.","solution":"def generate_newspaper_headline(study_time, practice_tests, avg_score, confidence, num_questions, correct_percentage, emotions): Generates a newspaper headline summarizing the emotional journey of Alex during his math test. Parameters: study_time (int): Length of time Alex had been studying (in hours). practice_tests (int): Number of practice tests taken by Alex. avg_score (float): Average score on the practice tests. confidence (float): Alex's confidence level before the test (on a scale of 1-10). num_questions (int): Number of questions on the test. correct_percentage (float): Percentage of questions answered correctly. emotions (list of floats): Alex's emotional state at different time intervals during the test (on a scale of 1-10). Returns: str: The newspaper headline in LaTeX format. # Calculate average emotional state during the test avg_emotion = sum(emotions) / len(emotions) # Emotional state before and after the test pre_test_emotion = emotions[0] post_test_emotion = emotions[-1] # Determine academic prediction based on performance performance_prediction = \\"promising\\" if correct_percentage >= 70 else \\"concerning\\" # Generating the headline headline = ( f\\"textbf{{Alex's Emotional Journey During Math Test}}: Studied for {study_time} hours, took {practice_tests} \\" f\\"practice tests, and scored an average of {avg_score}. Pre-test confidence was textbf{{{confidence}}}.\\" f\\" Started with an emotion of textbf{{{pre_test_emotion}}} and ended with an emotion of textbf{{{post_test_emotion}}}.\\" f\\" Successfully answered textbf{{{correct_percentage}%}} of {num_questions} questions. Future performance looks textbf{{{performance_prediction}}}.\\" ) return headline"},{"question":"Develop a Python script that accepts a pair of text inputs and ascertains whether they are anagrammatic variations of one another. The script should ignore case, spaces, and punctuation. The strings may contain Unicode characters.","solution":"import re def are_anagrams(text1, text2): Checks if text1 and text2 are anagrams of each other, ignoring case, spaces, and punctuation. # Remove any non-word character and convert to lowercase cleaned_text1 = re.sub(r'W+', '', text1).lower() cleaned_text2 = re.sub(r'W+', '', text2).lower() # Sort and compare return sorted(cleaned_text1) == sorted(cleaned_text2)"},{"question":"Write a function in Python to convert a 2D array into a single column array, but also ensure that the function handles the case when the input array contains nested arrays with varying lengths. The function should flatten the 2D array while maintaining the order of the elements and handling the varying lengths of the nested arrays. For instance, if the input is arr = [[0, 1, 2], [3, 4], [5, 6, 7, 8]], the output should be [0, 1, 2, 3, 4, 5, 6, 7, 8]. Then, use this function to convert the arr into a single column array. Also, provide a test case to verify the correctness of your function.","solution":"def flatten_2d_array(arr): Flattens a 2D array into a 1D column array, maintaining the order of elements. Param: arr (list of lists): The 2D array with varying lengths to be flattened. Returns: list: The flattened 1D array. flattened_list = [] for sublist in arr: for item in sublist: flattened_list.append(item) return flattened_list # Example to convert the arr into a single column array arr = [[0, 1, 2], [3, 4], [5, 6, 7, 8]] column_array = flatten_2d_array(arr) print(column_array) # Output: [0, 1, 2, 3, 4, 5, 6, 7, 8]"},{"question":"Could you write a Python program for a game called 'Create Hero'? In this game, you are tasked with adding a new hero to your collection. Each hero is uniquely defined by their name, health points, attack damage, and type. The existing hero collection is stored as a list of hero dictionaries. Your task is to create a new hero, validate their attributes, and add them to the list only if the hero is not already present based on their name. If a hero with the same name is found, throw an error. Additionally, implement a function to display all heroes. The hero must have a positive health point value, attack damage value, and their name should not be empty.","solution":"class HeroAlreadyExistsError(Exception): Exception raised when trying to add a hero that already exists. pass class InvalidHeroAttributesError(Exception): Exception raised when hero attributes are invalid. pass def validate_hero(name, health_points, attack_damage, type_): Validates the provided hero attributes. Raises InvalidHeroAttributesError if the attributes are invalid. if not name: raise InvalidHeroAttributesError(\\"Hero name cannot be empty.\\") if health_points <= 0: raise InvalidHeroAttributesError(\\"Health points must be positive.\\") if attack_damage <= 0: raise InvalidHeroAttributesError(\\"Attack damage must be positive.\\") # Additional validation for type can be added here if needed def create_hero(name, health_points, attack_damage, type_, hero_collection): Creates a new hero with given attributes and adds it to the hero collection. Raises HeroAlreadyExistsError if a hero with the same name already exists. # Validate the hero attributes first validate_hero(name, health_points, attack_damage, type_) # Check if a hero with the same name already exists for hero in hero_collection: if hero['name'] == name: raise HeroAlreadyExistsError(f\\"Hero with name '{name}' already exists.\\") # Create the hero dictionary and add it to the hero collection new_hero = { 'name': name, 'health_points': health_points, 'attack_damage': attack_damage, 'type': type_ } hero_collection.append(new_hero) return new_hero def display_heroes(hero_collection): Returns a list of heroes from the hero_collection with their attributes. return hero_collection"},{"question":"Write a function in Python to return the first n digits of the Fibonacci sequence, where n is a positive integer input from the user. The function should also handle cases when n is less than or equal to 0. Here is a piece of erroneous code for reference. Find and correct the errors to get the desired output.","solution":"def fibonacci_sequence(n): Returns the first n digits of the Fibonacci sequence. Parameters: n (int): The number of digits to return. Returns: list: A list containing the first n digits of the Fibonacci sequence. if n <= 0: return [] sequence = [0, 1] while len(sequence) < n: sequence.append(sequence[-1] + sequence[-2]) return sequence[:n]"},{"question":"Write 10 lines of code that prints out the Fibonacci sequence, but with a twist. Instead of starting with 0 and 1, start with two numbers that are inputted by the user. Also, include error handling that prevents improper inputs (e.g. strings, negative numbers, etc.)","solution":"def fibonacci_twist(a, b, n): Prints out the first n numbers of the Fibonacci sequence starting with a and b. :param a: First number in the sequence :param b: Second number in the sequence :param n: Number of terms to print if not (isinstance(a, int) and isinstance(b, int) and isinstance(n, int)): raise ValueError(\\"All inputs must be integers\\") if a < 0 or b < 0 or n <= 0: raise ValueError(\\"Inputs must be non-negative and n must be a positive integer\\") sequence = [a, b] while len(sequence) < n: sequence.append(sequence[-1] + sequence[-2]) print(sequence[:n]) # Only print the first n elements # Example usage: # fibonacci_twist(1, 1, 10) should print out the sequence [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]"},{"question":"Write a Python generator function that yields the first n square numbers. Additionally, implement a function that uses this generator to calculate the sum of these square numbers. Test your functions with multiple values of n to ensure they work as expected.","solution":"def square_numbers(n): Generator function that yields the first n square numbers. for i in range(1, n+1): yield i * i def sum_of_squares(n): Uses the square_numbers generator to calculate the sum of the first n square numbers. return sum(square_numbers(n))"},{"question":"Write a Python function that takes two strings and determines if the first string is a prefix of the second string.","solution":"def is_prefix(prefix, string): Returns True if 'prefix' is a prefix of 'string', otherwise False. return string.startswith(prefix)"},{"question":"Reverse the order of elements in a given array, using a recursive algorithm. The array may contain duplicate elements. The solution should have a time complexity of O(n), where n is the length of the array, and should not use any additional data structures or libraries.","solution":"def reverse_array(arr, start=0, end=None): Recursively reverses the elements of the array in-place. if end is None: end = len(arr) - 1 if start >= end: return arr # Swap the elements at start and end arr[start], arr[end] = arr[end], arr[start] # Recursively reverse the remaining array return reverse_array(arr, start + 1, end - 1)"},{"question":"Create a function named \\"is_substring_at\\" that takes three strings as input: the main string, the substring, and a position. The function should return True if the substring is found at the specified position in the main string, and False otherwise.","solution":"def is_substring_at(main_string, substring, position): Checks if the substring is found at the specified position in the main string. :param main_string: The main string. :param substring: The substring to look for. :param position: The position at which to check for the substring. :return: True if the substring is found at the specified position, False otherwise. if position < 0 or position > len(main_string) - len(substring): return False return main_string[position:position + len(substring)] == substring"},{"question":"Write a function that takes in a list of strings and returns the longest palindrome within the list. If there are multiple palindromes with the same maximum length, return the one that occurs first in the list. If there are no palindromes in the list, return an empty string. Note: The list can contain lower-case English letters, digits, and special characters. The length of the input list will not exceed 1000, and the length of each string in the list will not exceed 1000.","solution":"def is_palindrome(s): Helper function to check if a given string is a palindrome. return s == s[::-1] def longest_palindrome(strings): Returns the longest palindrome in the list of strings. If multiple palindromes have the same length, returns the one that occurs first. If no palindromes are found, returns an empty string. longest = \\"\\" for s in strings: if is_palindrome(s) and len(s) > len(longest): longest = s return longest"},{"question":"Fabricate a compact Python script, which while consuming a string expression as input, functions to accurately determine and yield the quantity of vowel characters encapsulated within the given string. The string for testing and input provision, to demonstrate the required functionality, shall be designated as \\"Hello World\\".","solution":"def count_vowels(s): Count the number of vowels in the given string. Parameters: s (str): The string in which to count vowels. Returns: int: The number of vowels in the string. vowels = \\"aeiouAEIOU\\" count = 0 for char in s: if char in vowels: count += 1 return count # Example usage # count_vowels(\\"Hello World\\") # Output should be 3"},{"question":"Write a code, which computes the total number of ways to reach from top-left to the bottom-right of an M x N grid if you can only travel down or right at any point in time. Care should be taken to handle large inputs.","solution":"def number_of_ways(m, n): Compute the total number of ways to reach from top-left to the bottom-right of an m x n grid. :param m: Number of rows :param n: Number of columns :return: Total number of ways to travel from top-left to bottom-right. from math import comb return comb(m + n - 2, m - 1)"},{"question":"Develop a program that multiplies two given matrices. Your program should handle matrices of different sizes, as long as they are compatible for multiplication (i.e., the number of columns in the first matrix equals the number of rows in the second matrix).","solution":"def multiply_matrices(matrix1, matrix2): Multiplies two matrices and returns the result as a new matrix. The number of columns in matrix1 must equal the number of rows in matrix2. :param matrix1: List of lists where each sublist is a row in the first matrix. :param matrix2: List of lists where each sublist is a row in the second matrix. :return: The resulting matrix after multiplication. if not matrix1 or not matrix2: raise ValueError(\\"Both matrices must be non-empty\\") # Number of columns in the first matrix must equal number of rows in the second matrix if len(matrix1[0]) != len(matrix2): raise ValueError(\\"Matrices have incompatible dimensions for multiplication\\") # Resultant matrix dimensions will be (rows of matrix1) x (columns of matrix2) result_rows = len(matrix1) result_cols = len(matrix2[0]) result = [[0 for _ in range(result_cols)] for _ in range(result_rows)] # Perform matrix multiplication for i in range(result_rows): for j in range(result_cols): for k in range(len(matrix2)): result[i][j] += matrix1[i][k] * matrix2[k][j] return result"},{"question":"Given a sorted list of integers and a target value, write a function in Python to search for the target value within the list. However, you are not allowed to use the built-in search functions like \`index()\` or slicing. You should implement your search algorithm and return the index of the target value if it exists in the list, or -1 if it doesn't exist. Additionally, your function should handle the scenario where the target value appears multiple times in the list, and it should return the index of any occurrence of the target value.","solution":"def search(sorted_list, target): Function to search for a target value in a sorted list. Returns the index of the target value if it exists, otherwise returns -1. left, right = 0, len(sorted_list) - 1 while left <= right: middle = (left + right) // 2 if sorted_list[middle] == target: return middle elif sorted_list[middle] < target: left = middle + 1 else: right = middle - 1 return -1"},{"question":"Design a Convolutional Neural Network (CNN) architecture using the PyTorch library for the purpose of classification tasks specifically on image data, while detailing the step-by-step reasoning involved in each component selection and configuration.","solution":"import torch.nn as nn import torch.nn.functional as F class SimpleCNN(nn.Module): def __init__(self, num_classes=10): super(SimpleCNN, self).__init__() # First convolutional layer (input channels: 3, output channels: 32, kernel size: 3x3) self.conv1 = nn.Conv2d(in_channels=3, out_channels=32, kernel_size=3, stride=1, padding=1) # Second convolutional layer (input channels: 32, output channels: 64, kernel size: 3x3) self.conv2 = nn.Conv2d(in_channels=32, out_channels=64, kernel_size=3, stride=1, padding=1) # Max pooling layer (kernel size: 2x2, stride: 2) self.pool = nn.MaxPool2d(kernel_size=2, stride=2, padding=0) # Fully connected layer (after flattening the pooled features) self.fc1 = nn.Linear(64 * 8 * 8, 512) # Fully connected layer to the number of classes self.fc2 = nn.Linear(512, num_classes) def forward(self, x): # Applying the first convolution, followed by ReLU activation and pooling x = self.pool(F.relu(self.conv1(x))) # Applying the second convolution, followed by ReLU activation and pooling x = self.pool(F.relu(self.conv2(x))) # Flatten the tensor into a vector x = x.view(-1, 64 * 8 * 8) # Applying the first fully connected layer followed by ReLU activation x = F.relu(self.fc1(x)) # Applying the second fully connected layer to obtain outputs x = self.fc2(x) return x"},{"question":"Engineer code to simulate a simplified version of the classic game, Battleship, where the board sizes, fleet composition and shots are predefined. Enhance the experience by implementing a feedback system that provides hints, like \\"hit\\" or \\"miss\\", or game status. To make it more challenging, add a computer AI's automatic shot strategy which should not just be random but also somewhat predictive.","solution":"import random class BattleshipGame: def __init__(self, board_size, fleet): self.board_size = board_size self.fleet = fleet self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)] self.shots_board = [[' ' for _ in range(board_size)] for _ in range(board_size)] self.hits_to_sink = sum(length for _, length in fleet) self.place_fleet() self.remaining_hits = self.hits_to_sink self.ai_strategy = [] self.previous_shot_hit = False self.last_shot = None def place_fleet(self): for ship, length in self.fleet: while True: orientation = random.choice(['H', 'V']) if orientation == 'H': row = random.randint(0, self.board_size - 1) col = random.randint(0, self.board_size - length) else: # 'V' row = random.randint(0, self.board_size - length - 1) col = random.randint(0, self.board_size - 1) if self.check_space(row, col, length, orientation): self.set_ship(row, col, length, orientation) break def check_space(self, row, col, length, orientation): if orientation == 'H': return all(self.board[row][col + i] == ' ' for i in range(length)) else: # 'V' return all(self.board[row + i][col] == ' ' for i in range(length)) def set_ship(self, row, col, length, orientation): if orientation == 'H': for i in range(length): self.board[row][col + i] = 'S' else: # 'V' for i in range(length): self.board[row + i][col] = 'S' def take_shot(self, row, col): if self.shots_board[row][col] in ['H', 'M']: return \\"Already Shot Here\\" if self.board[row][col] == 'S': self.shots_board[row][col] = 'H' self.remaining_hits -= 1 return \\"Hit\\" else: self.shots_board[row][col] = 'M' return \\"Miss\\" def game_over(self): return self.remaining_hits == 0 def ai_shot(self): if self.previous_shot_hit and self.last_shot: row, col = self.last_shot else: row, col = random.randint(0, self.board_size - 1), random.randint(0, self.board_size - 1) while self.shots_board[row][col] in ['H', 'M']: row, col = random.randint(0, self.board_size - 1), random.randint(0, self.board_size - 1) self.last_shot = (row, col) result = self.take_shot(row, col) if result == \\"Hit\\": self.previous_shot_hit = True else: self.previous_shot_hit = False return result, row, col def get_board(self): return self.board def get_shots_board(self): return self.shots_board"},{"question":"Create an in-memory list of strings in Python with 1 million strings, where each string is a combination of random alphanumeric characters of length between 10 and 20 characters. Additionally, all strings in the list must be unique and must not contain any repeating characters. The strings should also not contain any vowels or numbers that are divisible by 3. Importantly, ensure that the list is sorted in alphabetical order before finalizing the program.","solution":"import random import string def generate_unique_string(existing_strings, length): Generates a unique string of a given length. The string will be composed of random alphanumeric characters excluding vowels and numbers divisible by 3. chars = string.ascii_letters + ''.join(str(i) for i in range(10) if i % 3 != 0) chars = ''.join([c for c in chars if c.lower() not in ['a', 'e', 'i', 'o', 'u']]) while True: new_string = ''.join(random.sample(chars, length)) if new_string not in existing_strings: existing_strings.add(new_string) return new_string def generate_unique_strings_list(num_strings, min_length, max_length): Generates a sorted list of unique strings where each string contains random alphanumeric characters of length between min_length and max_length, excluding vowels and numbers divisible by 3. unique_strings = set() while len(unique_strings) < num_strings: length = random.randint(min_length, max_length) new_string = generate_unique_string(unique_strings, length) unique_strings.add(new_string) sorted_unique_strings = sorted(unique_strings) return sorted_unique_strings"},{"question":"Write a function that takes a string and an integer k as input and returns all possible k-length permutations of the characters in the string. Additionally, ensure that the function handles cases where the string contains duplicate characters by returning only unique permutations.","solution":"from itertools import permutations def unique_k_length_permutations(s, k): Returns all unique k-length permutations of the characters in the string s. Parameters: s (str): The input string. k (int): The length of permutations. Returns: list: A list of unique k-length permutations. if k > len(s): return [] perm_set = set(permutations(s, k)) return [''.join(perm) for perm in perm_set]"},{"question":"Implement an algorithmic solution to reverse a string using iteration and recursion and compare the performances of both approaches in Python. Also, evaluate the space and time complexity of your solutions. The input string will be alphanumeric and could include special characters.","solution":"def reverse_string_iterative(s): Reverses a string using an iterative approach. return ''.join(reversed(s)) def reverse_string_recursive(s): Reverses a string using a recursive approach. if len(s) == 0: return s else: return s[-1] + reverse_string_recursive(s[:-1]) # Evaluating the space and time complexity def complexity_analysis(): Analysis: For the iterative approach: - Time Complexity: O(n) - We iterate through the string once. - Space Complexity: O(n) - Storing the reversed string. For the recursive approach: - Time Complexity: O(n) - We make n recursive calls. - Space Complexity: O(n) - Stack space due to recursion. return \\"Iterative: Time O(n), Space O(n), Recursive: Time O(n), Space O(n)\\""},{"question":"Write a function in Python to find a given word in a list of strings, account for case sensitivity and return the index of the first occurrence.","solution":"def find_word_in_list(word, string_list): Returns the index of the first occurrence of word in string_list. Account for case sensitivity. If the word does not exist in the list, return -1. for i, string in enumerate(string_list): if string == word: return i return -1"},{"question":"I have a list of values L , I want to split it into nearly equal K sublists. I want an exact division (exact number of items in each sublist) if L is divisible by K. If not, distribute the remainder across lists as evenly as possible. Help me write a python code to that.","solution":"def split_list(L, K): Splits the list L into K nearly equal sublists. Args: L (list): The list to split. K (int): The number of sublists. Returns: list of lists: A list containing K sublists. if K == 0: return [] # Calculate the size of each sublist and the remainder n = len(L) sublist_size = n // K remainder = n % K result = [] start = 0 for i in range(K): size = sublist_size + (1 if i < remainder else 0) end = start + size result.append(L[start:end]) start = end return result"},{"question":"Consider the following Python function that computes the highest shared divisor of two numbers. Your task is to make modifications to this function to not only handle the case of finding the greatest common divisor (GCD) of two positive integers, but also extend its functionality to calculate the least common multiple (LCM) of two or more positive integers. Additionally, the function should be able to handle the input of an array of integers, not just two.","solution":"from math import gcd from functools import reduce def find_gcd(a, b): Returns the Greatest Common Divisor (GCD) of a and b. return gcd(a, b) def find_lcm(a, b): Returns the Least Common Multiple (LCM) of a and b. return (a * b) // find_gcd(a, b) def lcm_multiple(numbers): Returns the Least Common Multiple (LCM) of a list of numbers. return reduce(find_lcm, numbers)"},{"question":"Create a program that calculates the roots of a quadratic equation given the coefficients a, b and c. Additionally, the program should handle cases where the equation has complex roots and provide the answers in the form of complex numbers. Moreover, the program should only utilize built-in functions of the programming language being used, without relying on any external libraries. The program should also validate the input, ensuring that the coefficients entered are numerical values and that the coefficient of the quadratic term is not zero.","solution":"def quadratic_roots(a, b, c): Calculate the roots of a quadratic equation given coefficients a, b, and c. Handles real and complex roots. if not (isinstance(a, (int, float)) and isinstance(b, (int, float)) and isinstance(c, (int, float))): raise ValueError(\\"Coefficients must be numerical values.\\") if a == 0: raise ValueError(\\"The coefficient 'a' must not be zero.\\") # Calculate the discriminant discriminant = b**2 - 4*a*c # Calculate the roots if discriminant >= 0: root1 = (-b + discriminant**0.5) / (2*a) root2 = (-b - discriminant**0.5) / (2*a) else: real_part = -b / (2*a) imaginary_part = (-discriminant)**0.5 / (2*a) root1 = complex(real_part, imaginary_part) root2 = complex(real_part, -imaginary_part) return root1, root2"},{"question":"Write a code to check if an element is present in an array and return its index. If the element is not found, return -1.","solution":"def find_element_index(arr, element): Returns the index of the element in the array if present, otherwise returns -1. Parameters: arr (list): The list of elements. element : The element to search for in the list. Returns: int: The index of the element if found, otherwise -1. if element in arr: return arr.index(element) else: return -1"},{"question":"Develop a function to determine the kth smallest element in an provided array of unique values. In addition, implement a binary search algorithm for the function. The binary search algorithm should adapt to the form of an unsorted array. Remember, you can't use inbuild Python functions or libraries to sort the array or find the smallest element.","solution":"def kth_smallest(arr, k): Finds the k-th smallest element in the provided array using a variation of the binary search algorithm. The provided array should have unique values. def binary_search_left(arr, left, right, k): if left == right: return arr[left] pivot_index = partition(arr, left, right) if pivot_index == k: return arr[pivot_index] elif pivot_index < k: return binary_search_left(arr, pivot_index + 1, right, k) else: return binary_search_left(arr, left, pivot_index - 1, k) def partition(arr, left, right): pivot = arr[right] i = left for j in range(left, right): if arr[j] <= pivot: arr[i], arr[j] = arr[j], arr[i] i += 1 arr[i], arr[right] = arr[right], arr[i] return i return binary_search_left(arr, 0, len(arr) - 1, k - 1) # k - 1 for zero-based index"},{"question":"Create a Python program that logs the current date and time when a file is executed.","solution":"import datetime def log_current_datetime(): Logs the current date and time in the format YYYY-MM-DD HH:MM:SS. current_datetime = datetime.datetime.now().strftime(\\"%Y-%m-%d %H:%M:%S\\") with open(\\"log.txt\\", \\"a\\") as log_file: log_file.write(current_datetime + \\"n\\") return current_datetime"},{"question":"Create a Python program that checks whether a given string is a palindrome or not. Additionally, include the functionality of ignoring case sensitivity and non-alphanumeric characters.","solution":"import re def is_palindrome(s): Checks if the given string is a palindrome, ignoring case and non-alphanumeric characters. # Remove non-alphanumeric characters and convert to lowercase cleaned_str = re.sub(r'[^a-zA-Z0-9]', '', s).lower() # Compare the cleaned string with its reverse return cleaned_str == cleaned_str[::-1]"},{"question":"You're a programmer, you've just been asked to code a solution to the following problem: Write a function 'countUniqueChars' that takes a string and returns the number of unique characters in the string.","solution":"def count_unique_chars(s): Returns the number of unique characters in the string s. return len(set(s))"},{"question":"Write a code snippet that, given a list of n integers, finds the minimum element in the list. However, you are not allowed to use any built-in functions or methods for finding the minimum. Additionally, the solution must have a time complexity of O(n log n), where n is the length of the input list.","solution":"def find_min(lst): Finds the minimum element in a list of integers with O(n log n) time complexity. def merge_sort(arr): if len(arr) <= 1: return arr mid = len(arr) // 2 left = merge_sort(arr[:mid]) right = merge_sort(arr[mid:]) return merge(left, right) def merge(left, right): result = [] while left and right: if left[0] < right[0]: result.append(left.pop(0)) else: result.append(right.pop(0)) result.extend(left or right) return result sorted_lst = merge_sort(lst) return sorted_lst[0]"},{"question":"Create a Python program that reads a specific CSV file and provides a variety of operations such as printing the entire file, printing a specific row, printing a specific column, and finding a specific value in the file. The program should have a user-friendly interface with menu options for the user to select from, implemented using Python's built-in function and libraries. Additionally, the program should include error handling to prevent crashes in case of errors in the input or file.","solution":"import csv def read_csv(file_path): Reads the CSV file and returns its content as a list of lists. try: with open(file_path, mode='r') as file: reader = csv.reader(file) return list(reader) except FileNotFoundError: print(\\"The specified file does not exist.\\") return [] def print_entire_file(csv_content): Prints the entire CSV content. for row in csv_content: print(', '.join(row)) def print_specific_row(csv_content, row_number): Prints a specific row from the CSV content. if row_number < 0 or row_number >= len(csv_content): print(\\"Invalid row number.\\") else: print(', '.join(csv_content[row_number])) def print_specific_column(csv_content, column_number): Prints a specific column from the CSV content. try: for row in csv_content: print(row[column_number]) except IndexError: print(\\"Invalid column number.\\") def find_value(csv_content, value): Searches for a value in the CSV content and prints its location(s). found = False for i, row in enumerate(csv_content): for j, cell in enumerate(row): if cell == value: print(f'Value \\"{value}\\" found at row {i+1}, column {j+1}.') found = True if not found: print(f'Value \\"{value}\\" not found in the file.') def user_interface(file_path): Provides a menu-based interface for the user to interact with the CSV file. csv_content = read_csv(file_path) if not csv_content: return while True: print(\\"nMenu:\\") print(\\"1. Print entire file\\") print(\\"2. Print specific row\\") print(\\"3. Print specific column\\") print(\\"4. Find a specific value\\") print(\\"5. Exit\\") try: choice = int(input(\\"Enter your choice: \\")) except ValueError: print(\\"Invalid input. Please enter a number between 1 and 5.\\") continue if choice == 1: print_entire_file(csv_content) elif choice == 2: try: row_number = int(input(\\"Enter the row number: \\")) print_specific_row(csv_content, row_number - 1) except ValueError: print(\\"Invalid input. Please enter a valid row number.\\") elif choice == 3: try: column_number = int(input(\\"Enter the column number: \\")) print_specific_column(csv_content, column_number - 1) except ValueError: print(\\"Invalid input. Please enter a valid column number.\\") elif choice == 4: value = input(\\"Enter the value to search: \\") find_value(csv_content, value) elif choice == 5: break else: print(\\"Invalid choice. Please enter a number between 1 and 5.\\")"},{"question":"Given a list of integers in Python, compute the maximum value in the list. The list may contain duplicate elements. The time complexity of your solution should be O(n), where n is the number of elements in the list.","solution":"def max_in_list(int_list): Returns the maximum value in the list of integers. :param int_list: List[int] :return: int if not int_list: return None max_value = int_list[0] for num in int_list: if num > max_value: max_value = num return max_value"},{"question":"How can I generate a function that returns the second largest number in a given list? And how can I make sure it doesn't return the same number if there are duplicates?","solution":"def second_largest(numbers): Returns the second largest unique number in the given list. If there is no second largest number, returns None. if len(numbers) < 2: return None unique_numbers = list(set(numbers)) unique_numbers.sort(reverse=True) return unique_numbers[1] if len(unique_numbers) > 1 else None"},{"question":"Develop an algorithm in Python to reverse a given string without using any built-in functions or slicing. You can only use basic data structures like strings, lists, and loops.","solution":"def reverse_string(s): Reverses the given string s without using any built-in functions or slicing. reversed_str = '' for char in s: reversed_str = char + reversed_str return reversed_str"},{"question":"Create a Python function that takes a list of numbers and returns a dictionary containing the frequency of each number in the list.","solution":"def frequency_count(numbers): Takes a list of numbers and returns a dictionary containing the frequency of each number in the list. :param numbers: List of numbers :return: Dictionary with the frequency count of each number freq_dict = {} for num in numbers: if num in freq_dict: freq_dict[num] += 1 else: freq_dict[num] = 1 return freq_dict"},{"question":"Revise the provided Python function to both determine and provide the row and column indices at which the integer 1 is found within a 2D list. Remember, lists start with a 0 index. Additionally, the function should account for an array having variable dimensions, not restricted to being a 3x3 grid. Your solution should be optimised for dense matrices.","solution":"def find_indices_of_one(matrix): Returns a list of tuples with the row and column indices where the integer 1 is found in the 2D list matrix. indices = [] for i, row in enumerate(matrix): for j, value in enumerate(row): if value == 1: indices.append((i, j)) return indices"},{"question":"Write a Python function that takes two strings as input and returns True if the first string is a subsequence of the second string, and False otherwise.","solution":"def is_subsequence(s1, s2): Returns True if s1 is a subsequence of s2, else returns False. it = iter(s2) return all(char in it for char in s1)"},{"question":"Write a code to convert all the letters of a string to lowercase, ensuring that all spaces, punctuation marks, and special characters in the string are also converted to underscores. Additionally, remove any consecutive duplicate characters from the string. If a character is duplicated and separated by a space or punctuation mark, it should not be considered a duplicate.","solution":"def convert_and_simplify(input_string): Converts all letters of the string to lowercase, replaces spaces, punctuation, and special characters with underscores, and removes consecutive duplicate characters. Args: input_string (str): The input string to process. Returns: str: The processed string. import re # Convert all letters to lowercase input_string = input_string.lower() # Replace spaces, punctuation, and special characters with underscores input_string = re.sub(r'W', '_', input_string) # Remove consecutive duplicate characters result = [] previous_char = None for char in input_string: if char != previous_char: result.append(char) previous_char = char return ''.join(result)"},{"question":"Write a Python code to convert a binary tree to its mirror tree without using recursion. The code should have a time complexity of O(n) and a space complexity of O(1).","solution":"class TreeNode: A TreeNode class to represent nodes in a binary tree. def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def mirror_tree(root): Convert a binary tree to its mirror tree. Time complexity: O(n) Space complexity: O(1) without considering the space required for the stack. if root is None: return root stack = [root] while stack: current = stack.pop() # Swap the left and right children current.left, current.right = current.right, current.left # Push the children to the stack, if they exist if current.left: stack.append(current.left) if current.right: stack.append(current.right) return root"},{"question":"Write a Python program that generates an HTML table with the multiplication table for numbers from 1 to 10.","solution":"def generate_multiplication_table(): Generates an HTML table with the multiplication table for numbers from 1 to 10. html = '<table border=\\"1\\">n' # Create header row html += ' <tr>n' html += ' <th></th>n' for i in range(1, 11): html += f' <th>{i}</th>n' html += ' </tr>n' # Create multiplication table rows for i in range(1, 11): html += f' <tr>n' html += f' <th>{i}</th>n' for j in range(1, 11): html += f' <td>{i * j}</td>n' html += ' </tr>n' html += '</table>' return html"},{"question":"You are the codename for \\"Can You Learn Without Looking\\". Your main task is to generate code without access to external resources or libraries. As an AI, you must rely on your internal algorithms and programming knowledge to create code from scratch. Today's request is to generate a random 6 character string using lowercase letters.","solution":"import random import string def generate_random_string(): Generates a random 6 character string using lowercase letters. return ''.join(random.choice(string.ascii_lowercase) for i in range(6))"},{"question":"Write a code that takes in a list of alphabetical characters and returns the number of vowels in the list.","solution":"def count_vowels(char_list): Returns the number of vowels in the given list of alphabetical characters. vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'} return sum(1 for char in char_list if char in vowels)"},{"question":"Write the definition of a function to calculate the perimeter of a triangle, which takes as input the lengths of all three sides of the triangle as parameters. The function should also include a validation check to ensure that the given side lengths can form a valid triangle according to the triangle inequality theorem. If the side lengths do not satisfy the theorem, the function should raise a custom exception with an appropriate error message. Additionally, the function should also check if the triangle is equilateral, isosceles, or scalene, and return a string indicating the type of triangle along with the calculated perimeter.","solution":"class InvalidTriangleError(Exception): Custom exception to be raised when the sides cannot form a valid triangle. pass def calculate_triangle_perimeter(a, b, c): Calculates the perimeter of a triangle and returns the type of triangle. Parameters: a (float): Length of the first side of the triangle. b (float): Length of the second side of the triangle. c (float): Length of the third side of the triangle. Returns: str: A string indicating the type of triangle and its perimeter. Raises: InvalidTriangleError: If the side lengths do not satisfy the triangle inequality theorem. # Check if the given sides form a valid triangle if a + b <= c or a + c <= b or b + c <= a: raise InvalidTriangleError(\\"The given side lengths do not form a valid triangle.\\") # Calculate the perimeter perimeter = a + b + c # Determine the type of triangle if a == b == c: triangle_type = \\"Equilateral\\" elif a == b or b == c or a == c: triangle_type = \\"Isosceles\\" else: triangle_type = \\"Scalene\\" return f\\"{triangle_type} triangle with perimeter {perimeter}\\""},{"question":"Write a python code to multiply two matrices A and B, where each matrix is represented as a list of lists. Make sure to handle errors that may occur during the multiplication process.","solution":"def multiply_matrices(A, B): Multiplies two matrices A and B. Args: A - List of lists representing matrix A. B - List of lists representing matrix B. Returns: Resultant matrix after multiplication of A and B. Raises: ValueError if matrix dimensions are not compatible for multiplication. # Verify matrices are non-empty and have valid dimensions for multiplication if not A or not B or not A[0] or not B[0]: raise ValueError(\\"Matrices must be non-empty.\\") # Number of columns in A must be equal to the number of rows in B if len(A[0]) != len(B): raise ValueError(\\"Number of columns in A must be equal to the number of rows in B for multiplication.\\") # Number of rows in A and number of columns in B will determine the shape of the resultant matrix result_rows = len(A) result_cols = len(B[0]) # Initialize result matrix with zeroes result = [[0] * result_cols for _ in range(result_rows)] # Matrix multiplication for i in range(result_rows): for j in range(result_cols): for k in range(len(B)): result[i][j] += A[i][k] * B[k][j] return result"},{"question":"Create an Python function that takes a string and returns the longest palindrome subsequence present in the string.","solution":"def longest_palindromic_subsequence(s: str) -> int: Returns the length of the longest palindromic subsequence in the given string. n = len(s) if n == 0: return 0 # Create a table to store results of subproblems L = [[0 for x in range(n)]for y in range(n)] # Strings of length 1 are palindromes of length 1 for i in range(n): L[i][i] = 1 # Build the table. Note that the lower diagonal values of table are # useless and not filled in the process. The table is filled in # a manner similar to matrix chain multiplication DP solution for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: L[i][j] = 2 elif s[i] == s[j]: L[i][j] = L[i + 1][j - 1] + 2 else: L[i][j] = max(L[i][j - 1], L[i + 1][j]) # L[0][n-1] contains the length of longest palindromic subsequence return L[0][n - 1]"},{"question":"Define a function in Python that doubles the input integer, but restrict the function to use only bitwise operations.","solution":"def double_using_bitwise(n): Doubles the input integer using only bitwise operations. return n << 1"},{"question":"Can you create a Python program that reads multiple CSV files from a directory, concatenates them into a single Pandas DataFrame, performs some data transformations, and then writes the result to a new CSV file?","solution":"import pandas as pd import os def read_and_concatenate_csv(directory): Reads multiple CSV files from a directory, concatenates them into a single DataFrame, performs some data transformations, and writes the result to a new CSV file. Parameters: directory (str): The path of the directory containing the CSV files. Returns: DataFrame: The final transformed DataFrame. all_files = [os.path.join(directory, f) for f in os.listdir(directory) if f.endswith('.csv')] df_list = [pd.read_csv(file) for file in all_files] # Concatenate all DataFrames df = pd.concat(df_list, ignore_index=True) # Perform some data transformations, such as removing duplicates and filling NaNs df.drop_duplicates(inplace=True) df.fillna(method='ffill', inplace=True) # Write the transformed DataFrame to a new CSV file output_file = os.path.join(directory, 'concatenated_output.csv') df.to_csv(output_file, index=False) return df"},{"question":"Given the below erroneous Python code, correct and modify it to create a function that checks if a given key exists in a dictionary or not. Additionally, if the key exists, the function should return the associated value. If the key does not exist, the function should return a custom error message.","solution":"def check_key_in_dict(dictionary, key): Checks if the given key exists in the dictionary. Parameters: dictionary (dict): The dictionary to check the key in. key: The key to check for in the dictionary. Returns: value: The value associated with the key if it exists. str: A custom error message if the key does not exist. if key in dictionary: return dictionary[key] else: return \\"Key does not exist in the dictionary.\\""},{"question":"Write me a Python code to generate a random string of 10 characters that consists of only lowercase letters and digits.","solution":"import random import string def generate_random_string(length=10): Generates a random string of specified length consisting of lowercase letters and digits. Defaults to length of 10 if not specified. characters = string.ascii_lowercase + string.digits random_string = ''.join(random.choice(characters) for _ in range(length)) return random_string"},{"question":"Write a function in Python that not only verifies whether a dictionary is empty or not, but also throws an appropriate exception if the argument passed is not a dictionary. Moreover, the function should also check if there are any duplicate values in the dictionary and return the count of duplicates. Ensure to manage case sensitivity and consider the possibility of different data types being used as values in the dictionary.","solution":"def check_dict(dic): Verifies whether a dictionary is empty or not, raises TypeError if the argument is not a dictionary, and returns the count of duplicate values. :param dic: The dictionary to check :return: A tuple (is_empty, duplicates_count) :raises: TypeError if the argument passed is not a dictionary if not isinstance(dic, dict): raise TypeError(\\"Argument is not a dictionary\\") is_empty = len(dic) == 0 # Checking for duplicate values values = list(dic.values()) duplicates_count = len(values) - len(set(values)) return is_empty, duplicates_count"},{"question":"Update the code to handle cases when the two numbers in the array are the same, and also implement a method to handle negative numbers. Additionally, ensure the output is in the format of \\"The result of subtracting x from y is z, with absolute difference d.\\" where x is the smaller number and y is the larger number. You should also implement error handling if the array does not contain exactly two elements.","solution":"def subtract_and_format(arr): Subtracts the two numbers in the array and formats the result. If array does not contain exactly two elements, an error is raised. Parameters: arr (list): A list containing exactly two elements, which are integers. Returns: str: A formatted string with the subtraction results. if len(arr) != 2: raise ValueError(\\"Array must contain exactly two elements.\\") x, y = arr if x > y: x, y = y, x result = y - x abs_diff = abs(x - y) return f\\"The result of subtracting {x} from {y} is {result}, with absolute difference {abs_diff}.\\""},{"question":"Create a python game where the user has to guess a random number between 0 and 100. The user should be given a limited number of attempts and hints like \\"too high\\" or \\"too low\\" after each wrong guess. Make the game as challenging as possible by adjusting the number of attempts based on the difficulty level chosen by the user.","solution":"import random def guess_the_number(difficulty): Starts a number guessing game based on the given difficulty level. difficulty: str ('easy', 'medium', 'hard') if difficulty == 'easy': max_attempts = 10 elif difficulty == 'medium': max_attempts = 7 elif difficulty == 'hard': max_attempts = 5 else: raise ValueError(\\"Invalid difficulty level. Choose 'easy', 'medium', or 'hard'.\\") secret_number = random.randint(0, 100) attempts = 0 print(f\\"Guess the number between 0 and 100. You have {max_attempts} attempts. Good luck!\\") while attempts < max_attempts: guess = int(input(f\\"Attempt {attempts + 1}: \\")) attempts += 1 if guess == secret_number: print(\\"Congratulations! You've guessed the number.\\") return True elif guess < secret_number: print(\\"Too low!\\") else: print(\\"Too high!\\") print(f\\"Sorry, you've used all your attempts. The number was {secret_number}.\\") return False # To play the game, call the function with desired difficulty # Example: guess_the_number('medium')"},{"question":"Complete the code below for a function that accepts a non-negative integer, and returns a list consisting of prime numbers less than the given input. Expound given examples.","solution":"def primes_less_than(n): Returns a list of all prime numbers less than a given non-negative integer n. if n <= 2: return [] primes = [] for num in range(2, n): is_prime = True for i in range(2, int(num**0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Write a recursive function in Python to print numbers from 1 to 10 in reverse order.","solution":"def print_reverse(n=10): Prints numbers from 1 to 10 in reverse order starting from n. Args: n (int): The starting number (default is 10). if n < 1: return print(n) print_reverse(n - 1)"},{"question":"How can I create a Python application for an online store that allows customers to add products to a shopping cart, view their order details, and checkout?","solution":"class Product: def __init__(self, name, price): self.name = name self.price = price class ShoppingCart: def __init__(self): self.cart = [] def add_product(self, product): self.cart.append(product) def view_cart(self): return [(product.name, product.price) for product in self.cart] def total_price(self): return sum(product.price for product in self.cart) def checkout(self): total = self.total_price() self.cart = [] return total"},{"question":"Explain the concept of a Bloom Filter and its implications in data querying. Additionally, implement a Bloom Filter in Python and showcase its operations such as insert and search. Also, discuss the trade-offs and possible errors that might occur during these operations.","solution":"import hashlib class BloomFilter: def __init__(self, size, hash_count): self.size = size self.hash_count = hash_count self.bit_array = [0] * size def _hashes(self, item): hash_results = [] for i in range(self.hash_count): hash_result = int(hashlib.sha256((item + str(i)).encode()).hexdigest(), 16) hash_results.append(hash_result % self.size) return hash_results def insert(self, item): for hash_result in self._hashes(item): self.bit_array[hash_result] = 1 def search(self, item): for hash_result in self._hashes(item): if self.bit_array[hash_result] == 0: return False return True"},{"question":"Write a code to generate a random string of length 10 with only lowercase alphabets.","solution":"import string import random def generate_random_string(length=10): Generates a random string of specified length with only lowercase alphabets. return ''.join(random.choice(string.ascii_lowercase) for _ in range(length))"},{"question":"Given a link list, reverse the nodes of a link list k at a time and return its modified link list. k is a positive integer and is less than or equal to the length of the link list. If the number of nodes is not a multiple of k, then left-out nodes, in the end, should remain as it is.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverseKGroup(head, k): # Function to reverse a section of the linked list def reverse_linked_list(start, end): prev, curr = None, start while curr != end: temp = curr.next curr.next = prev prev = curr curr = temp return prev # Check the length first ptr = head count = 0 while ptr and count < k: ptr = ptr.next count += 1 # If we have enough nodes to reverse if count == k: reversed_head = reverse_linked_list(head, ptr) # next part after reversed section would point to recursively processed further parts head.next = reverseKGroup(ptr, k) return reversed_head return head"},{"question":"Write a Python function that takes two arguments: a number and a power. The function should return the number raised to the given power. Additionally, the function should check that both arguments are positive integers, and if they are not, raise a TypeError with a specific error message: \\"Both number and power must be positive integers.\\" Implement the function and test it with several data points to ensure it works correctly.","solution":"def power(number, power): Returns the number raised to the given power. Arguments must be positive integers. if not (isinstance(number, int) and isinstance(power, int) and number > 0 and power > 0): raise TypeError(\\"Both number and power must be positive integers.\\") return number ** power"},{"question":"Formulate a piece of programming script that will create a three-dimensional data structure, specifically a cube with dimensions amounting to 'n'. Your instruction also needs the implementation to fill this structure with numerical values. These values should range in a sequence from 0 to 'n^3-1' in a linear fashion. Each of the dimensions in this cube should have the capability to be individually accessed, allowing you to retrieve any number from the cube, based on the coordinates given. Also, include in your solution the ability to rotate the cube either clockwise or anti-clockwise along any of the axes.","solution":"import numpy as np class Cube: def __init__(self, n): self.n = n self.data = np.arange(n ** 3).reshape(n, n, n) def get_value(self, x, y, z): return self.data[x, y, z] def rotate_clockwise_x(self): self.data = np.rot90(self.data, -1, (1, 2)) def rotate_counterclockwise_x(self): self.data = np.rot90(self.data, 1, (1, 2)) def rotate_clockwise_y(self): self.data = np.rot90(self.data, -1, (0, 2)) def rotate_counterclockwise_y(self): self.data = np.rot90(self.data, 1, (0, 2)) def rotate_clockwise_z(self): self.data = np.rot90(self.data, -1, (0, 1)) def rotate_counterclockwise_z(self): self.data = np.rot90(self.data, 1, (0, 1))"},{"question":"Given a string and an integer, write a function to determine if the string has all unique characters within the given integer length. If the integer is greater than the length of the string, consider the entire string.","solution":"def has_unique_characters_within_length(s, n): Determines if the string s has all unique characters within the given length n. If n is greater than the length of the string s, consider the entire string. Args: s (str): The input string. n (int): The length to check for uniqueness of characters. Returns: bool: True if all characters within the length n are unique, False otherwise. length_to_check = min(len(s), n) chars_seen = set() for i in range(length_to_check): if s[i] in chars_seen: return False chars_seen.add(s[i]) return True"},{"question":"Write a script to rotate the elements of a given list to the left by one position.","solution":"def rotate_left_by_one(lst): Rotates the elements of the given list to the left by one position. Parameters: lst (list): The list to rotate. Returns: list: The rotated list. if not lst: return lst return lst[1:] + [lst[0]]"},{"question":"Create a Python function to compute the Fibonacci sequence up to a given number n using recursion. Make sure to handle edge cases such as when n is less than or equal to 0. Additionally, provide a piece of erroneous code that attempts to compute the Fibonacci sequence using a loop instead of recursion, but contains logical errors. The erroneous code should include an off-by-one error and a variable misdeclaration.","solution":"def fibonacci_recursive(n): Returns the nth Fibonacci number using recursion. if n <= 0: return 0 elif n == 1: return 1 else: return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2) # Erroneous code with off-by-one error and variable misdeclaration def fibonacci_iterative(n): Erroneous function: Attempts to compute the nth Fibonacci number using a loop. Contains an off-by-one error and a variable misdeclaration. if n <= 0: return 0 elif n == 1: return 1 prev, current = 0, 1 for _ in range(n - 1): # Off-by-one error should be 'range(n - 2)' prev = current current = prev + current # Logical error, 'prev' should be set to 'current' after updating 'current' return current"},{"question":"Build a Python code snippet to determine the intersection of two provided lists, considering only unique elements without duplicates.","solution":"def intersection(list1, list2): Returns the intersection of two lists considering only unique elements without duplicates. # Convert lists to sets for unique elements and intersection set1 = set(list1) set2 = set(list2) # Return the intersection as a list return list(set1 & set2)"},{"question":"Given a list of tuples, write a Python function \`extract_third_unique\` that extracts the third element from each tuple if it is unique among the third elements of all tuples in the list. The function should return a new list containing these unique third elements in the same order they appear in the original list.","solution":"def extract_third_unique(tuples_list): Extracts unique third elements from the list of tuples. Parameters: tuples_list (list of tuples): The list of tuples from which to extract third elements. Returns: list: A list of unique third elements in the order they appear in the original list. third_elements = [t[2] for t in tuples_list] unique_third_elements = [t[2] for t in tuples_list if third_elements.count(t[2]) == 1] return unique_third_elements"},{"question":"Write a Python program to convert a string into an all lower-case string, removing all punctuation marks, digits, and whitespace characters. Additionally, reverse the order of the characters in the resulting string.","solution":"import string def transform_string(s): Converts the input string into an all lower-case string, removing all punctuation marks, digits, and whitespace characters, and reverses the order of the characters in the resulting string. # Remove all punctuation, digits, and whitespace characters filtered_str = ''.join(filter(lambda x: x.isalpha(), s)) # Convert to lowercase lower_case_str = filtered_str.lower() # Reverse the string reversed_str = lower_case_str[::-1] return reversed_str"},{"question":"Write a code to reverse the order of a data structure such as array, list, or stack without using any built-in functions or methods that directly reverse the data structure. The code should modify the data structure in-place and have a time complexity of O(n), where n is the size of the data structure.","solution":"def reverse_data_structure(arr): Reverses the order of an array, list, or stack in-place without using built-in reverse methods. left, right = 0, len(arr) - 1 while left < right: arr[left], arr[right] = arr[right], arr[left] left += 1 right -= 1 return arr"},{"question":"I have a list of numbers and I want to create an algorithm that can sort this list in ascending order. How can I achieve this using Python?","solution":"def sort_list(nums): Sorts a list of numbers in ascending order. return sorted(nums)"},{"question":"Create a stack-oriented calculator. It should support the following operations: push a number onto the stack, pop a number from the stack, and add or subtract the top two numbers on the stack and replace them with the result.","solution":"class StackCalculator: def __init__(self): self.stack = [] def push(self, number): Push a number onto the stack. self.stack.append(number) def pop(self): Pop a number from the stack. if len(self.stack) == 0: raise IndexError(\\"pop from an empty stack\\") return self.stack.pop() def add(self): Add the top two numbers on the stack and replace them with the result. if len(self.stack) < 2: raise IndexError(\\"not enough elements to perform addition\\") num1 = self.pop() num2 = self.pop() self.push(num1 + num2) def subtract(self): Subtract the top two numbers on the stack and replace them with the result. if len(self.stack) < 2: raise IndexError(\\"not enough elements to perform subtraction\\") num1 = self.pop() num2 = self.pop() self.push(num2 - num1)"},{"question":"Create a Python function to generate all prime numbers less than a given number, while also ensuring that the function can handle inputs up to 10^6 efficiently.","solution":"def generate_primes(n): Generate all prime numbers less than the given number n. Parameters: n (int): The upper limit to generate prime numbers, exclusive. Returns: list: A list of prime numbers less than n. if n <= 2: return [] sieve = [True] * n sieve[0] = sieve[1] = False for start in range(2, int(n ** 0.5) + 1): if sieve[start]: for multiple in range(start*start, n, start): sieve[multiple] = False return [num for num in range(n) if sieve[num]]"},{"question":"Reverse the order of the elements in a given array without using built-in functions.","solution":"def reverse_array(arr): Reverses the order of the elements in the given array without using built-in functions. Parameters: arr (list): The array to be reversed. Returns: list: The reversed array. start, end = 0, len(arr) - 1 while start < end: arr[start], arr[end] = arr[end], arr[start] start += 1 end -= 1 return arr"},{"question":"Write a code to print out all the prime numbers between 2 and 1000, but the code should not use any built-in functions or libraries to check for prime numbers. Additionally, the code should have a time complexity of O(n) and a space complexity of O(1).","solution":"def print_primes(): Prints all the prime numbers between 2 and 1000. for num in range(2, 1001): is_prime = True for i in range(2, num): if num % i == 0: is_prime = False break if is_prime: print(num) # Calling the function to print prime numbers between 2 and 1000. print_primes()"},{"question":"Compare a binary heap and an AVL tree, highlighting their differences in data structure, time complexity for various operations, and use cases, and write code to implement both a binary heap and an AVL tree in Python. Make sure your code includes performing operations like insertion, deletion, and searching in each structure and clearly explain your code.","solution":"class BinaryHeap: def __init__(self): self.heap = [] def insert(self, val): self.heap.append(val) self._heapify_up(len(self.heap) - 1) def delete(self): if not self.heap: return None self._swap(0, len(self.heap) - 1) removed_val = self.heap.pop() self._heapify_down(0) return removed_val def search(self, val): return val in self.heap def _heapify_up(self, index): parent = (index - 1) // 2 if parent >= 0 and self.heap[index] < self.heap[parent]: self._swap(index, parent) self._heapify_up(parent) def _heapify_down(self, index): smallest = index left = 2*index + 1 right = 2*index + 2 if left < len(self.heap) and self.heap[left] < self.heap[smallest]: smallest = left if right < len(self.heap) and self.heap[right] < self.heap[smallest]: smallest = right if smallest != index: self._swap(index, smallest) self._heapify_down(smallest) def _swap(self, i, j): self.heap[i], self.heap[j] = self.heap[j], self.heap[i] class AVLTreeNode: def __init__(self, key): self.key = key self.left = None self.right = None self.height = 1 class AVLTree: def insert(self, root, key): if not root: return AVLTreeNode(key) if key < root.key: root.left = self.insert(root.left, key) else: root.right = self.insert(root.right, key) root.height = 1 + max(self._get_height(root.left), self._get_height(root.right)) balance = self._get_balance(root) # Left Left Case if balance > 1 and key < root.left.key: return self._right_rotate(root) # Right Right Case if balance < -1 and key > root.right.key: return self._left_rotate(root) # Left Right Case if balance > 1 and key > root.left.key: root.left = self._left_rotate(root.left) return self._right_rotate(root) # Right Left Case if balance < -1 and key < root.right.key: root.right = self._right_rotate(root.right) return self._left_rotate(root) return root def delete(self, root, key): if not root: return root if key < root.key: root.left = self.delete(root.left, key) elif key > root.key: root.right = self.delete(root.right, key) else: if root.left is None: temp = root.right root = None return temp elif root.right is None: temp = root.left root = None return temp temp = self._get_min_value_node(root.right) root.key = temp.key root.right = self.delete(root.right, temp.key) if root is None: return root root.height = 1 + max(self._get_height(root.left), self._get_height(root.right)) balance = self._get_balance(root) # Left Left Case if balance > 1 and self._get_balance(root.left) >= 0: return self._right_rotate(root) # Left Right Case if balance > 1 and self._get_balance(root.left) < 0: root.left = self._left_rotate(root.left) return self._right_rotate(root) # Right Right Case if balance < -1 and self._get_balance(root.right) <= 0: return self._left_rotate(root) # Right Left Case if balance < -1 and self._get_balance(root.right) > 0: root.right = self._right_rotate(root.right) return self._left_rotate(root) return root def search(self, root, key): if not root or root.key == key: return root if key < root.key: return self.search(root.left, key) return self.search(root.right, key) def _left_rotate(self, z): y = z.right T2 = y.left y.left = z z.right = T2 z.height = 1 + max(self._get_height(z.left), self._get_height(z.right)) y.height = 1 + max(self._get_height(y.left), self._get_height(y.right)) return y def _right_rotate(self, z): y = z.left T3 = y.right y.right = z z.left = T3 z.height = 1 + max(self._get_height(z.left), self._get_height(z.right)) y.height = 1 + max(self._get_height(y.left), self._get_height(y.right)) return y def _get_height(self, root): if not root: return 0 return root.height def _get_balance(self, root): if not root: return 0 return self._get_height(root.left) - self._get_height(root.right) def _get_min_value_node(self, root): if root is None or root.left is None: return root return self._get_min_value_node(root.left)"},{"question":"Write code for finding the maximum element in a given list in O(n) complexity.","solution":"def find_max_element(lst): Returns the maximum element in the given list. :param lst: List of numerical values :return: Maximum value in the list if not lst: # If the list is empty, raise an error raise ValueError(\\"The list is empty\\") max_element = lst[0] for elem in lst: if elem > max_element: max_element = elem return max_element"},{"question":"Create a Python function that takes a list as input and returns a new list with elements in the reverse order. Additionally, provide a bonus challenge where the function should reverse the elements of the list in-place without using built-in Python functions or methods for reversing or creating a new list as part of Dataquest's Advanced Python course.","solution":"def reverse_list(input_list): Returns a new list with elements in the reverse order. return input_list[::-1] def reverse_list_in_place(input_list): Reverses the elements of the input list in-place without using built-in Python functions or methods for reversing or creating a new list. left = 0 right = len(input_list) - 1 while left < right: # Swap the elements input_list[left], input_list[right] = input_list[right], input_list[left] # Move pointers left += 1 right -= 1"},{"question":"Write a function in Python that takes a list of strings and checks if they are all the same length and also checks if they contain only lowercase alphabets.","solution":"def check_strings(strings): Checks if all strings in a list are the same length and contain only lowercase alphabets. Parameters: strings (list): List of strings to check. Returns: bool: True if all strings meet the criteria, False otherwise. if not strings: return False # Return False for empty list as there would be no strings to compare length = len(strings[0]) for string in strings: if len(string) != length or not string.islower() or not string.isalpha(): return False return True"},{"question":"In the following list, there are multiple names mentioned. Your task is to write a Python script that extracts all the names starting with a vowel, concatenates them into a single string while ensuring that the names are in the same order as they appear in the list, and then prints the resulting string. As an added challenge, the script should also count the number of times each vowel appears as the first letter of a name, and print this count next to each respective name. Note that the names are separated by a comma and space.","solution":"def extract_and_count_names(names_list): Extracts names starting with a vowel, concatenates them into a single string, and counts the number of times each vowel appears as the first letter. Parameters: names_list (list of str): The list of names. Returns: tuple: A tuple containing the concatenated string and a dictionary with vowel counts. vowels = 'AEIOUaeiou' vowel_count = {vowel: 0 for vowel in vowels} filtered_names = [] for name in names_list: if name[0] in vowels: filtered_names.append(name) vowel_count[name[0].lower()] += 1 concatenated_names = ' '.join(filtered_names) result_vowel_count = {k: v for k, v in vowel_count.items() if v > 0} return concatenated_names, result_vowel_count names = [\\"Alex\\", \\"Olivia\\", \\"Emma\\", \\"Ian\\", \\"Uma\\", \\"Oscar\\", \\"John\\", \\"Eve\\", \\"Brian\\", \\"Andrew\\"] concatenated_names, vowel_count = extract_and_count_names(names) print(concatenated_names) print(vowel_count)"},{"question":"Write a Python function that takes a string argument and returns the reversed version of the string.","solution":"def reverse_string(s): Returns the reversed version of the input string s. return s[::-1]"},{"question":"Write a function in Python to print a greeting with the text \\"Hello, World!\\" five times. The function should take an integer parameter n and print the greeting n times. Additionally, the function should only execute if the code is being run as the main program and not when imported as a module.","solution":"def print_greeting(n): Prints \\"Hello, World!\\" n times. Parameters: n (int): The number of times to print the greeting. for _ in range(n): print(\\"Hello, World!\\") if __name__ == \\"__main__\\": print_greeting(5)"},{"question":"Given a string \\"Hello world\\" create a program that returns the index of the first occurrence of a specific letter in the string. However, the program should also handle cases where the input string contains non-alphabetic characters and is case-sensitive. Additionally, if the specific letter appears multiple times in the string, the program should return the index of the last occurrence of the letter.","solution":"def find_last_occurrence(s, letter): Returns the index of the last occurrence of a specific letter in the string. Handles non-alphabetic characters and is case-sensitive. :param s: str - The input string :param letter: str - The letter to find :return: int - The index of the last occurrence of the letter # Iterate over the string from end to start for idx in range(len(s) - 1, -1, -1): if s[idx] == letter: return idx return -1 # Return -1 if the letter is not found"},{"question":"Increase the complexity of the code snippet below, which includes correcting the error in the existing function and designing a unique, non-repetitive helper function. Your task is to create an error-free main function that checks if the list of integers has at least two elements that are both palindromes and primes.","solution":"def is_palindrome(n): Check if a number is a palindrome. s = str(n) return s == s[::-1] def is_prime(n): Check if a number is a prime. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def has_two_palindromic_primes(lst): Check if the list of integers has at least two elements that are both palindromes and primes. count = 0 for num in lst: if is_palindrome(num) and is_prime(num): count += 1 if count >= 2: return True return False"},{"question":"Create a code to generate a unique 7-character string of random numbers and letters, ensuring that no two generated strings are the same. The generated string should start with a letter and end with a number. Additionally, implement a function to check if a given string is already present in a list of generated strings, and if so, generate a new unique string. Each generated string should also have at least one uppercase letter and one special character from the set {!, @, #, , %, ^, &, *} included in it.","solution":"import random import string # Set of special characters to be included special_chars = \\"!@#%^&*\\" # Set to store generated unique strings generated_strings = set() def generate_unique_string(): while True: # Generate a random string random_string = ( random.choice(string.ascii_letters) + ''.join(random.choices(string.ascii_letters + string.digits + special_chars, k=5)) + random.choice(string.digits) ) # Check if the generated string satisfies the requirements if ( any(c.isupper() for c in random_string) and any(c in special_chars for c in random_string) and random_string not in generated_strings ): generated_strings.add(random_string) return random_string def has_string_in_list(check_string): return check_string in generated_strings"},{"question":"Create a doubly linked list node with the data of type integer. The node should have a reference to the next node and a reference to the previous node.","solution":"class DoublyLinkedListNode: def __init__(self, data: int): self.data = data self.next = None self.prev = None"},{"question":"Write a Python program to subtract two matrices. In addition, implement a function to check if the matrices can be subtracted, i.e., they have the same dimensions.","solution":"def can_subtract_matrices(mat1, mat2): Check if two matrices can be subtracted. return len(mat1) == len(mat2) and all(len(row1) == len(row2) for row1, row2 in zip(mat1, mat2)) def subtract_matrices(mat1, mat2): Subtract two matrices if they have the same dimensions. if not can_subtract_matrices(mat1, mat2): raise ValueError(\\"Matrices must be of the same dimensions to be subtracted.\\") return [[elem1 - elem2 for elem1, elem2 in zip(row1, row2)] for row1, row2 in zip(mat1, mat2)]"},{"question":"Create a function that takes a string as input and returns the longest substring without repeating characters.","solution":"def longest_unique_substring(s): Returns the longest substring without repeating characters. n = len(s) i = 0 j = 0 max_length = 0 char_set = set() start = 0 while i < n and j < n: if s[j] not in char_set: char_set.add(s[j]) j += 1 if (j - i) > max_length: max_length = j - i start = i else: char_set.remove(s[i]) i += 1 return s[start:start + max_length]"},{"question":"Develop a Python function that is adept at identifying prime numbers from an assortment of 2D arrays. This function should be designed to handle and rectify the errors arising from mixed data types (integers, floats, and strings) within these arrays, as well as disregard any list that includes non-integer types. Moreover, the function should be equipped to manage large 2D arrays efficiently without overwhelming system resources.","solution":"import math def is_prime(n): Returns True if n is a prime number, else False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def extract_primes(matrix): Given a 2D array (matrix), return all prime numbers in the matrix. Only consider arrays (sub-arrays) that contain only integers. primes = [] for sublist in matrix: if all(isinstance(x, int) for x in sublist): primes.extend([x for x in sublist if is_prime(x)]) return primes"},{"question":"Design a system that can take an integer list as its input and return a sorted list. However, you are now required to implement the sorting algorithm yourself, rather than using a built-in sorting function or library. Additionally, the time complexity of your sorting algorithm should be O(n log n), and the space complexity should be O(1).","solution":"def heap_sort(arr): Perform heap sort on the input list. Time complexity: O(n log n) Space complexity: O(1) def heapify(arr, n, i): largest = i left = 2 * i + 1 right = 2 * i + 2 if left < n and arr[largest] < arr[left]: largest = left if right < n and arr[largest] < arr[right]: largest = right if largest != i: arr[i], arr[largest] = arr[largest], arr[i] heapify(arr, n, largest) n = len(arr) # Build a maxheap for i in range(n//2 - 1, -1, -1): heapify(arr, n, i) # Extract elements one by one for i in range(n-1, 0, -1): arr[i], arr[0] = arr[0], arr[i] heapify(arr, i, 0) return arr"},{"question":"Compose a fragment of a python program designed to evaluate whether a provided number is prime. In addition, the program should be able to find and return the closest prime number less than the provided number if it is not a prime number itself.","solution":"def is_prime(n): Check if the number is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def closest_prime_less_than(n): Find the closest prime number less than the provided number. if n <= 2: return None # No prime number less than 2 candidate = n - 1 while candidate >= 2: if is_prime(candidate): return candidate candidate -= 1 return None"},{"question":"Write a function in Python that takes a number and an array of numbers and returns a new array of numbers that are the product of the number and each number in the array. The function should have a time complexity of O(n) and a space complexity of O(n). The array should not contain any negative numbers, and the function should handle this by throwing an exception if a negative number is found in the array. Additionally, the function should check if the input number is a positive integer, and throw an exception if it is not. The function should also ensure that the output array does not contain any duplicate values.","solution":"def multiply_and_remove_duplicates(multiplier, numbers): Returns a new array of numbers that are the product of the multiplier and each number in the input array. Args: - multiplier (int): A positive integer to multiply each element by - numbers (list): A list of non-negative integers Returns: - list: A new list of multiplied numbers without duplicates Raises: - ValueError: If the multiplier is not a positive integer or if numbers array contains negative numbers if not isinstance(multiplier, int) or multiplier <= 0: raise ValueError(\\"Multiplier must be a positive integer.\\") result = set() for number in numbers: if number < 0: raise ValueError(\\"Array should not contain negative numbers.\\") result.add(multiplier * number) return list(result)"},{"question":"I'm working on a project that requires a unique implementation of matrix multiplication. I need to design an algorithm that takes two 2D matrices as input and performs matrix multiplication. However, this implementation should only use basic arithmetic operations like addition, subtraction, multiplication, and division, avoiding any built-in functions for matrix operations. Can you guide me on how to approach this problem?","solution":"def matrix_multiply(A, B): Multiplies two 2D matrices A and B and returns the result. Assumes that the number of columns in A is equal to the number of rows in B. # Number of rows in A rows_A = len(A) # Number of columns in A / rows in B cols_A = len(A[0]) # Number of columns in B cols_B = len(B[0]) # Resultant matrix C (rows_A x cols_B) initialized with zeros C = [[0 for _ in range(cols_B)] for _ in range(rows_A)] # Perform matrix multiplication for i in range(rows_A): for j in range(cols_B): sum = 0 for k in range(cols_A): sum += A[i][k] * B[k][j] C[i][j] = sum return C"},{"question":"Using a list comprehension in Python, create a function that takes in a list of integers and filters out all numbers that are divisible by either 3 or 5, and only include numbers greater than 10. The filtered list should be sorted in descending order. Additionally, if there are duplicate numbers in the input list, only include one instance of the number in the filtered list.","solution":"def filter_and_sort(numbers): Filters out numbers that are divisible by 3 or 5, and only include numbers greater than 10. Only one instance of each number is included in the filtered list, and the list is sorted in descending order. :param numbers: List of integers to be filtered and sorted :return: Filtered and sorted list based on the criteria return sorted({num for num in numbers if num > 10 and num % 3 != 0 and num % 5 != 0}, reverse=True)"},{"question":"Create a Python function that takes two arguments, a positive integer and a boolean. The integer should be between 1 and 1000 (inclusive) and the boolean should be true. Additionally, the function should also accept a list of integers as a third argument, which should contain at least 10 elements.","solution":"def check_parameters(num, bool_val, int_list): Checks the provided parameters based on the specified conditions: - num: an integer between 1 and 1000 (inclusive) - bool_val: a boolean which should be True - int_list: a list of integers containing at least 10 elements Returns True if all conditions are met, else returns False. if isinstance(num, int) and 1 <= num <= 1000 and isinstance(bool_val, bool) and bool_val and isinstance(int_list, list) and len(int_list) >= 10: return True return False"},{"question":"Given two strings, write a Python function to find the smallest string that contains both input strings as subsequences.","solution":"def shortest_common_supersequence(X, Y): Returns the shortest common supersequence of strings X and Y. m = len(X) u = len(Y) # Table to store lengths of shortest common supersequences dp = [[0] * (u + 1) for i in range(m + 1)] # Build the table for i in range(m + 1): for j in range(u + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif X[i - 1] == Y[j - 1]: dp[i][j] = 1 + dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1]) # Find and return the SCS from the dp table i, j = m, u scs = [] while i > 0 and j > 0: if X[i - 1] == Y[j - 1]: scs.append(X[i - 1]) i -= 1 j -= 1 elif dp[i - 1][j] < dp[i][j - 1]: scs.append(X[i - 1]) i -= 1 else: scs.append(Y[j - 1]) j -= 1 while i > 0: scs.append(X[i - 1]) i -= 1 while j > 0: scs.append(Y[j - 1]) j -= 1 return ''.join(reversed(scs))"},{"question":"Write a piece of code that takes a sentence and checks if it's a palindrome, considering only alphanumeric characters and ignoring cases.","solution":"import re def is_palindrome(sentence): Checks if the given sentence is a palindrome, considering only alphanumeric characters and ignoring cases. # Filter alphanumeric characters and convert to lowercase cleaned_sentence = re.sub(r'[^A-Za-z0-9]', '', sentence).lower() # Check if cleaned sentence is equal to its reverse return cleaned_sentence == cleaned_sentence[::-1]"},{"question":"Given two strings, write a Python function that will find the lexicographically smallest string formed by concatenating the two strings in some order.","solution":"def smallest_lexicographic_concat(str1, str2): Given two strings, return the lexicographically smallest string formed by concatenating the two strings in some order. # Concatenate in both possible orders and compare return min(str1 + str2, str2 + str1)"},{"question":"Develop a Python function to find the product of all prime numbers less than or equal to n. Also, modify the function to enable error handling for inputs that are non-integer or less than 2. Furthermore, implement a mechanism to track and return the total time taken to calculate the product. Here is a sample code with flaws; you need to correct and enhance it.","solution":"import time def is_prime(num): Check if the number is a prime. if num < 2: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def product_of_primes(n): Returns the product of all prime numbers less than or equal to n. If n is less than 2 or not an integer, raises ValueError. Also returns the time taken to calculate the product. if not isinstance(n, int): raise ValueError(\\"Input must be an integer\\") if n < 2: raise ValueError(\\"There are no prime numbers less than 2\\") start_time = time.time() product = 1 for num in range(2, n+1): if is_prime(num): product *= num end_time = time.time() time_taken = end_time - start_time return product, time_taken"},{"question":"Design a program that can convert a list of hexadecimal values into their corresponding ASCII characters.","solution":"def hex_to_ascii(hex_list): Converts a list of hexadecimal values (as strings) into their corresponding ASCII characters. :param hex_list: List of hexadecimal values (e.g., ['41', '42', '43']) :return: Resulting string of ASCII characters (e.g., 'ABC') return ''.join(chr(int(h, 16)) for h in hex_list)"},{"question":"Given a list of numbers, write code using Python to find the sum of all elements that are divisible by 3. Additionally, you are required to implement a function to calculate the average of the numbers in the list that are divisible by 3 and greater than 10.","solution":"def sum_of_elements_divisible_by_3(numbers): Returns the sum of all elements in the list that are divisible by 3. return sum(num for num in numbers if num % 3 == 0) def average_of_elements_divisible_by_3_and_greater_than_10(numbers): Returns the average of the elements in the list that are divisible by 3 and greater than 10. If there are no such elements, returns 0. filtered_nums = [num for num in numbers if num % 3 == 0 and num > 10] if not filtered_nums: return 0.0 return sum(filtered_nums) / len(filtered_nums)"},{"question":"Write a function in Python that can take a 2D list of integers and return a list of their sums for each row. For instance, if the list is [[12,3,1],[4,5,6]], the function should return [16, 15]. However, it should also be able to handle and return an empty list if it receives a list like [[]].","solution":"def row_sums(matrix): Takes a 2D list of integers and returns a list of the sums for each row. :param matrix: List[List[int]] - A 2D list of integers :return: List[int] - A list containing sums of each row return [sum(row) for row in matrix if row]"},{"question":"How can you run a piece of code 100 times consecutively using a Python script? Can this script be executed in both Jupyter notebook and Python2.7 environment? In order to test the execution time of a function, write a function that runs the given function with provided arguments 100 times and returns the minimum, maximum and average execution time. Also, write a function that takes a number and returns the square of that number. Use this function in your code and test its execution time by running it 100 times with the number 5 as an argument.","solution":"import time def run_function_100_times(func, *args): Runs the provided function with given arguments 100 times and returns the minimum, maximum, and average execution time. min_time = float('inf') max_time = 0 total_time = 0 for _ in range(100): start_time = time.time() func(*args) elapsed_time = time.time() - start_time min_time = min(min_time, elapsed_time) max_time = max(max_time, elapsed_time) total_time += elapsed_time avg_time = total_time / 100 return min_time, max_time, avg_time def square(num): Takes a number and returns the square of that number. return num * num"},{"question":"Programming problem: Given a string s and an integer k, find the kth largest character in the string.","solution":"def kth_largest_character(s, k): Returns the kth largest character in the string s. unique_chars = sorted(set(s), reverse=True) if k <= 0 or k > len(unique_chars): raise ValueError(\\"k is out of bounds\\") return unique_chars[k - 1]"},{"question":"Write a program using Python to create a web server on http://localhost:8080 that can display \\"Hello, World!\\" on accessing the root URL. Additionally, create an API endpoint to accept GET request with a query parameter \\"name\\" and return a customized greeting. Also, include error handling for client and server side errors.","solution":"from http.server import BaseHTTPRequestHandler, HTTPServer import urllib class SimpleHTTPRequestHandler(BaseHTTPRequestHandler): def do_GET(self): parsed_path = urllib.parse.urlparse(self.path) query_params = urllib.parse.parse_qs(parsed_path.query) if parsed_path.path == \\"/\\": self.send_response(200) self.send_header(\\"Content-type\\", \\"text/html\\") self.end_headers() self.wfile.write(b\\"Hello, World!\\") elif parsed_path.path == \\"/greet\\": name = query_params.get(\\"name\\", [\\"World\\"])[0] self.send_response(200) self.send_header(\\"Content-type\\", \\"text/html\\") self.end_headers() greeting = f\\"Hello, {name}!\\" self.wfile.write(greeting.encode()) else: self.send_error(404, \\"Not Found\\") def do_POST(self): self.send_error(405, \\"Method Not Allowed\\") def log_message(self, format, *args): # Disable logging to keep the output clean in tests return def run(server_class=HTTPServer, handler_class=SimpleHTTPRequestHandler): server_address = ('', 8080) httpd = server_class(server_address, handler_class) print('Starting server on port 8080...') httpd.serve_forever() if __name__ == \\"__main__\\": run()"},{"question":"Formulate a binary validation algorithm to verify the authenticity of a specific access code. Here, we will write a simple Python function to implement this. The function will take an access code as the argument and will return True if the code is authentic and False otherwise.","solution":"import re def validate_access_code(code): Verifies the authenticity of a given access code. An authentic access code must: - Be exactly 10 characters long. - Contain only alphanumeric characters. - Have at least one uppercase letter. - Have at least one lowercase letter. - Have at least one digit. if len(code) != 10: return False if not re.match(\\"^[a-zA-Z0-9]*\\", code): return False if not re.search(\\"[A-Z]\\", code): return False if not re.search(\\"[a-z]\\", code): return False if not re.search(\\"[0-9]\\", code): return False return True"},{"question":"I have a Python list, and I want to access elements in reverse order. How can I write a program that prints the elements in reverse order?","solution":"def reverse_list(input_list): This function takes a list and returns a new list with elements in reverse order. return input_list[::-1]"},{"question":"Generate a function in Python which takes a list of strings as input and returns a dictionary holding the frequency of each string.","solution":"def string_frequencies(strings): Takes a list of strings as input and returns a dictionary with each string's frequency. frequency_dict = {} for string in strings: if string in frequency_dict: frequency_dict[string] += 1 else: frequency_dict[string] = 1 return frequency_dict"},{"question":"Implement a function to print the Fibonacci series up to the nth term, but also print the sum of the prime numbers in the series. Additionally, ensure that the function is optimized to have a time complexity of O(n) and a space complexity of O(1).","solution":"def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def fibonacci_and_prime_sum(n): Prints the Fibonacci series up to the nth term and the sum of the prime numbers in the series. if n <= 0: return fib1, fib2 = 0, 1 prime_sum = 0 for i in range(n): if i == 0: curr = fib1 elif i == 1: curr = fib2 else: curr = fib1 + fib2 fib1 = fib2 fib2 = curr if is_prime(curr): prime_sum += curr print(curr, end=' ') print(\\"nSum of primes in the series:\\", prime_sum)"},{"question":"Write a Python code that not only extracts the domain portion from an email address, but also validates the syntax of the email address based on the standard email format, and verify the existence of the extracted domain using a DNS lookup.","solution":"import re import socket def validate_and_extract_domain(email): Validates the email and extracts the domain portion. Parameters: email (str): The email address to be validated and to extract the domain from. Returns: str: The domain portion if the email is valid and the domain exists, otherwise None. # Regular expression to validate email address email_regex = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+' if not re.match(email_regex, email): return None domain = email.split('@')[1] try: socket.gethostbyname(domain) return domain except socket.gaierror: return None"},{"question":"Create a regex to extract all the names (first name and last name) from a string \\"John Doe is a programmer and Jane Smith is a doctor\\". Additionally, implement a function that uses this regex to then filter and display the names in alphabetical order.","solution":"import re def extract_and_sort_names(text): Extracts all first and last names using regex from the given text and returns them sorted in alphabetical order. # Define regex pattern to match first and last names pattern = r'b[A-Z][a-z]* [A-Z][a-z]*b' # Find all matches in the given text names = re.findall(pattern, text) # Sort names alphabetically names.sort() return names # Example usage text = \\"John Doe is a programmer and Jane Smith is a doctor\\" print(extract_and_sort_names(text)) # Output: ['Jane Smith', 'John Doe']"},{"question":"Given two strings s1 and s2, write a Python program to check if s1 is a subsequence of s2. A subsequence of a string is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.","solution":"def is_subsequence(s1, s2): Checks if s1 is a subsequence of s2. Args: s1 (str): The potential subsequence string. s2 (str): The string to check against. Returns: bool: True if s1 is a subsequence of s2, False otherwise. it = iter(s2) return all(char in it for char in s1)"},{"question":"Please write a generic code in Python for sorting an array using the quick sort algorithm. The code should handle arrays with duplicate elements and negative numbers. Additionally, you should implement the quick sort algorithm using an iterative approach instead of a recursive one. Your code should also ensure that the array is sorted in descending order instead of ascending order.","solution":"def quick_sort(array): Sorts the array in descending order using the quick sort algorithm (iterative approach). if len(array) < 2: return array stack = [(0, len(array) - 1)] while stack: low, high = stack.pop() if low < high: pivot_index = partition(array, low, high) stack.append((low, pivot_index - 1)) stack.append((pivot_index + 1, high)) return array def partition(array, low, high): pivot = array[high] i = low - 1 for j in range(low, high): if array[j] > pivot: i += 1 array[i], array[j] = array[j], array[i] array[i + 1], array[high] = array[high], array[i + 1] return i + 1"},{"question":"Given an array that could contain an unknown amount of subarrays as its elements, write a function that flattens this structure into a single array. Additionally, ensure that your function can handle elements of different data types (e.g., integers, strings, arrays).","solution":"def flatten_array(nested_array): Flattens a nested array into a single array. :param nested_array: List that may contain sublists or elements of various data types :return: A single flattened list flat_list = [] def _flatten(sub_list): for element in sub_list: if isinstance(element, list): _flatten(element) else: flat_list.append(element) _flatten(nested_array) return flat_list"},{"question":"Determine a Python code that enables the deletion of the key \\"city\\" from a provided dictionary, considering the dict might contain other dicts as values, with potentially other dicts as values and so on, nested to any level. Ensure your function deletes the \\"city\\" key wherever it is found.","solution":"def delete_city_key(d): Recursively delete the key 'city' from the dictionary, including nested dictionaries. if isinstance(d, dict): if 'city' in d: del d['city'] for key in d: delete_city_key(d[key]) elif isinstance(d, list): for item in d: delete_city_key(item) return d"},{"question":"Write a Python script to find the prime factors of a number. The script should also print the exponent of each prime factor. Additionally, you are required to implement the Sieve of Eratosthenes algorithm to generate a list of prime numbers up to the given number before finding the prime factors.","solution":"def sieve_of_eratosthenes(n): Generate a list of prime numbers up to n using the Sieve of Eratosthenes algorithm. is_prime = [True] * (n + 1) p = 2 while p * p <= n: if is_prime[p]: for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 primes = [p for p in range(2, n + 1) if is_prime[p]] return primes def prime_factors(n): Find the prime factors of a given number n along with their exponents. primes = sieve_of_eratosthenes(n) factors = {} for prime in primes: count = 0 while n % prime == 0: n //= prime count += 1 if count > 0: factors[prime] = count if n == 1: break return factors"},{"question":"Develop a Python function that accepts a nested list, each inner list containing a pair of elements, and outputs a nested list composed of two lists: the first one containing the initial elements from each pair, and the second one encompassing the latter elements from each pair.","solution":"def split_pairs(nested_list): Splits a nested list of pairs into two separate lists. Parameters: nested_list (list): A nested list where each inner list contains exactly 2 elements. Returns: list: A nested list where the first list contains the first elements of each pair, and the second list contains the second elements of each pair. first_elements = [] second_elements = [] for pair in nested_list: first_elements.append(pair[0]) second_elements.append(pair[1]) return [first_elements, second_elements]"},{"question":"Create a program in Python to randomly select k elements from a list without using any inbuilt function or library to generate random numbers or directly sample elements from the list. The program should also ensure that the same element is not selected more than once.","solution":"def custom_random_select(lst, k): Selects k unique random elements from the given list without using any inbuilt random function or library. Parameters: lst (list): The list from which elements are to be selected. k (int): The number of elements to select. Returns: list: A list of k randomly selected unique elements. n = len(lst) if k > n: raise ValueError(\\"k cannot be greater than the length of the list\\") def custom_random_index(): seed = time() % 1 return int(seed * n) selected_indices = set() result = [] for _ in range(k): while True: index = custom_random_index() if index not in selected_indices: selected_indices.add(index) result.append(lst[index]) break return result from time import time"},{"question":"Create a Python script that will download an image from a URL and save it to a specified directory.","solution":"import requests import os def download_image(url, save_directory, filename): Downloads an image from a given URL and saves it to the specified directory with the given filename. :param url: The URL of the image to download. :param save_directory: The path to the directory where the image should be saved. :param filename: The name to save the file as. :returns: The full path to the saved file. if not os.path.exists(save_directory): os.makedirs(save_directory) response = requests.get(url) if response.status_code == 200: file_path = os.path.join(save_directory, filename) with open(file_path, 'wb') as file: file.write(response.content) return file_path else: raise Exception(f\\"Failed to download image. Status code: {response.status_code}\\")"},{"question":"Write a recursive function in Python that implements depth-first search on a binary tree. The nodes of the tree have integer values, and the tree is represented using a node class with left and right child pointers. Your function should take the root node of the tree as an argument and return the values of all nodes visited during the search in the order they were visited. Note that the search should explore the left subtree before the right subtree. Avoid using global variables and mutable default arguments.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def depth_first_search(root): Performs depth-first search (DFS) on a binary tree. Args: - root (TreeNode): The root node of the binary tree. Returns: - List[int]: A list containing the values of nodes visited in DFS order. def dfs(node, visited): if node is not None: visited.append(node.value) # Visit node dfs(node.left, visited) # Traverse left subtree dfs(node.right, visited) # Traverse right subtree visited_nodes = [] dfs(root, visited_nodes) return visited_nodes"},{"question":"You are given a file named \`data.txt\` containing a list of integers separated by spaces. Each line of the file represents a separate list of integers. Your task is to write a Python program to read the file, process the data, and calculate the sum of integers in each line. Additionally, you need to append the sums to a new file named \`sums.txt\`.","solution":"def calculate_sums(input_file, output_file): with open(input_file, 'r') as infile: lines = infile.readlines() sums = [] for line in lines: numbers = map(int, line.split()) line_sum = sum(numbers) sums.append(line_sum) with open(output_file, 'w') as outfile: for line_sum in sums: outfile.write(f\\"{line_sum}n\\")"},{"question":"Design a Python function snippet to Display Extreme Bathing routine: Caring for Hair and Skin for Engineer for Beginners. Implement if/else or switch/case statements to handle different conditions related to the Responsibility. Provide detailed comments explaining your control flow and the reasoning behind each decision.","solution":"def extreme_bathing_routine(role): Returns the specific extreme bathing routine for an engineer for beginners based on their role. Parameters: role (str): The role or responsibility of the engineer (e.g., 'chemical', 'civil', 'software'). Returns: str: The bathing routine specific to the role. if role == 'chemical': return (\\"Chemical Engineer Routine:n\\" \\"1. Use pH-balanced shampoo to avoid damage caused by chemical exposure.n\\" \\"2. Moisturize skin with products suitable for chemically exposed skin.n\\" \\"3. Keep hydrated to maintain skin and hair health against harsh chemicals.\\") elif role == 'civil': return (\\"Civil Engineer Routine:n\\" \\"1. Clean hair thoroughly to remove dust and debris from construction sites.n\\" \\"2. Use a gentle exfoliating scrub to remove dirt from skin.n\\" \\"3. Apply sunscreen to protect skin from prolonged sun exposure at the sites.\\") elif role == 'software': return (\\"Software Engineer Routine:n\\" \\"1. Use a refreshing shampoo to stay awake and energized during coding sessions.n\\" \\"2. Cleanse skin with products designed to alleviate the stress of sedentary work.n\\" \\"3. Moisturize to combat dry skin caused by long hours in air-conditioned environments.\\") else: return (\\"General Engineer Routine:n\\" \\"1. Use a mild shampoo suitable for daily use.n\\" \\"2. Keep skin clean and hydrated with a basic skincare regimen.n\\" \\"3. Maintain a balanced diet to ensure overall hair and skin health.\\")"},{"question":"Write a function in Python that rearranges a given string so that the characters appear in the order of their frequency of occurrence.","solution":"from collections import Counter def rearrange_string(freq_str): Rearranges the given string so that the characters appear in the order of their frequency of occurrence. # Count the frequency of each character freq_dict = Counter(freq_str) # Sort characters by frequency (and alphabetically within the same frequency) sorted_chars = sorted(freq_dict.items(), key=lambda x: (-x[1], x[0])) # Reconstruct the string based on sorted characters rearranged_str = ''.join(char * freq for char, freq in sorted_chars) return rearranged_str"},{"question":"You are given a string, \\"2+3*5\\", and your task is to write a Python program that evaluates this arithmetic expression and prints the result. To accomplish this, you need to parse the string, perform the arithmetic operations in the correct order, and return the final result.","solution":"def evaluate_expression(expression): Evaluates a given arithmetic expression. Parameters: expression (str): The arithmetic expression to be evaluated. Returns: int/float: The result of the evaluated expression. # Using eval() is not recommended in production for untrusted input due to security reasons. return eval(expression)"},{"question":"Take as input a number \`k\` and an array \`arr\` of length \`n\`. Write a function \`sum_subarrays\` that returns the sum of all subarrays of length \`k\`.","solution":"def sum_subarrays(arr, k): Returns the sum of all subarrays of length k from the given array arr. Parameters: arr (list): List of integers. k (int): Length of the subarrays. Returns: int: Sum of all subarrays of length k. n = len(arr) if k > n: return 0 current_sum = sum(arr[:k]) total_sum = current_sum for i in range(1, n - k + 1): current_sum = current_sum - arr[i - 1] + arr[i + k - 1] total_sum += current_sum return total_sum"},{"question":"Write a Python program that reads a directory, and outputs the file sizes and creation dates of all image files (extensions .jpg, .png, .bmp), sorted by file size. The output should include the file name, file size in kilobytes, and creation date in human-readable format. The program should filter out all non-image files.","solution":"import os from datetime import datetime def get_image_file_info(directory): Reads a directory and returns information about image files (.jpg, .png, .bmp). Args: - directory (str): The path to the directory. Returns: - list of tuples: Each tuple contains (file name, file size in KB, creation date). The list is sorted by file size. image_extensions = {'.jpg', '.png', '.bmp'} image_files_info = [] for filename in os.listdir(directory): file_path = os.path.join(directory, filename) if os.path.isfile(file_path) and os.path.splitext(filename)[1].lower() in image_extensions: file_stats = os.stat(file_path) file_size_kb = file_stats.st_size / 1024 # size in kilobytes creation_date = datetime.fromtimestamp(file_stats.st_ctime).strftime('%Y-%m-%d %H:%M:%S') image_files_info.append((filename, file_size_kb, creation_date)) # Sort the list of image files by file size image_files_info.sort(key=lambda x: x[1]) return image_files_info"},{"question":"Given a regular expression pattern and a text, write a function to check if the pattern matches the text.","solution":"import re def regex_match(pattern, text): Check if the given pattern matches the text. Args: pattern (str): The regular expression pattern. text (str): The text to be checked against the pattern. Returns: bool: True if the pattern matches the text, False otherwise. match = re.fullmatch(pattern, text) return match is not None"},{"question":"Given a transform in three-dimensional space that multiplies the x-coordinate by two, leaves the y-coordinate the same, and subtracts one from the z-coordinate, write a function in Python to apply this transformation to a point. Your function should also be able to handle and apply this transformation to an array of n points. Points in three-dimensional space are represented as a tuple of three coordinates (x, y, z).","solution":"def transform_point(point): Transforms a single point (x, y, z) in three-dimensional space. Multiplies the x-coordinate by 2, leaves the y-coordinate the same, and subtracts 1 from the z-coordinate. Params: point (tuple): A tuple representing the point (x, y, z). Returns: tuple: A transformed point (2*x, y, z-1). x, y, z = point return (2*x, y, z-1) def transform_points(points): Transforms a list of points in three-dimensional space. Params: points (list): A list of tuples where each tuple represents a point (x, y, z). Returns: list: A list of transformed points. return [transform_point(point) for point in points]"},{"question":"Write a function in Python that accepts two string inputs. The primary string will be a combination of alphabets and special characters, while the secondary string will be a sequence of alphabets (e.g., 'aeiou', 'bcdf').","solution":"def remove_chars(primary_string, secondary_string): Removes all characters from the primary_string that are present in the secondary_string. Parameters: primary_string (str): The string from which characters need to be removed. secondary_string (str): The string containing characters that need to be removed from primary_string. Returns: str: A new string with characters from secondary_string removed from primary_string. return ''.join([c for c in primary_string if c not in secondary_string])"},{"question":"How do I unzip a zip file in Python without using the \`zipfile\` module? While writing code to unzip a zipfile, I've encountered an issue and I'm seeking a solution that ideally doesn't involve the use of any external libraries or modules.","solution":"import os import shutil def unzip_file(source_path, destination_path): Unzips the contents of a specified zip file into a specified directory without using the \`zipfile\` module. :param source_path: Path of the zip file to be unpacked. :param destination_path: Path of the directory where files will be extracted. :return: None shutil.unpack_archive(source_path, destination_path, 'zip')"},{"question":"Given two strings, write a Python program to find the number of common characters. However, you are not allowed to use any built-in string methods or data structures such as lists, dictionaries, or sets. You can only use basic string manipulation operations such as indexing and concatenation.","solution":"def count_common_characters(str1, str2): Returns the number of common characters between two strings. common_count = 0 used_indices_str2 = \\"\\" for char1 in str1: for index_char2 in range(len(str2)): # Check if character str1 in str2 and has not been counted before if char1 == str2[index_char2] and str(index_char2) not in used_indices_str2: common_count += 1 used_indices_str2 += str(index_char2) break return common_count"},{"question":"Write a Python code that takes a string as input and returns the string with all non-alphabetic characters removed.","solution":"def remove_non_alpha_chars(input_str): Remove all non-alphabetic characters from the input string. Parameters: input_str (str): The string to be processed. Returns: str: The input string with all non-alphabetic characters removed. return ''.join(char for char in input_str if char.isalpha())"},{"question":"Create a Python program that simulates a basic calculator. It should continuously prompt the user for mathematical operations (addition, subtraction, multiplication, division) and two numbers, perform the operation, and display the result. The program should handle invalid operations and division by zero gracefully.","solution":"def calculator(operation, num1, num2): Simulates a basic calculator. It performs the specified operation on two numbers. :param operation: The operation to perform. One of 'add', 'subtract', 'multiply', 'divide'. :param num1: The first number. :param num2: The second number. :return: The result of the operation, or a specific error message for invalid operations or division by zero. if operation == 'add': return num1 + num2 elif operation == 'subtract': return num1 - num2 elif operation == 'multiply': return num1 * num2 elif operation == 'divide': if num2 == 0: return \\"Error: Division by zero.\\" return num1 / num2 else: return \\"Error: Invalid operation.\\""},{"question":"Suppose you have a Python list. Write a function that performs in-place swapping of elements residing at two specified positions within that list.","solution":"def swap_elements(lst, index1, index2): Swaps elements at index1 and index2 in the list lst in-place. Parameters: lst (list): The list in which elements need to be swapped. index1 (int): The index of the first element to swap. index2 (int): The index of the second element to swap. Returns: None if index1 < 0 or index1 >= len(lst) or index2 < 0 or index2 >= len(lst): raise IndexError(\\"Index out of range\\") lst[index1], lst[index2] = lst[index2], lst[index1]"},{"question":"Write a code in Python that can support the conversion of a large number of hexadecimal numbers into their respective binary forms. Also, the code should be able to handle any possible errors or exceptions during the conversion process. Below is a piece of erroneous code. Identify its issues and provide the correct code.","solution":"def hex_to_binary(hex_num): Converts a hexadecimal number to its binary representation. Parameters: hex_num (str): A string representing the hexadecimal number. Returns: str: A string representing the binary representation of the given hexadecimal number. try: # Convert hexadecimal to integer dec_num = int(hex_num, 16) # Convert integer to binary and remove '0b' prefix bin_num = bin(dec_num)[2:] return bin_num except ValueError as e: return f\\"Error: {str(e)}\\" def convert_hex_list_to_binary(hex_list): Converts a list of hexadecimal numbers to their binary representations. Parameters: hex_list (list): A list of strings where each string is a hexadecimal number. Returns: list: A list of strings where each string is the binary representation of the respective hexadecimal number. return [hex_to_binary(hex_num) for hex_num in hex_list]"},{"question":"When implementing a Python code to find the minimum element in a nested dictionary, you also have to account for possible empty dictionaries, non-numeric values and the presence of another dictionary as a value in the nested dictionary. How can you handle such complexities and what would be your strategy to design an effective and efficient code?","solution":"def find_min_in_nested_dict(nested_dict): Recursively find the minimum numeric value in a nested dictionary. If the dictionary is empty or contains no numeric values, return None. Args: nested_dict (dict): The nested dictionary to search. Returns: min_value (int/float/None): The minimum numeric value or None if no numeric value is found. min_value = None for key, value in nested_dict.items(): if isinstance(value, dict): nested_min = find_min_in_nested_dict(value) if nested_min is not None: if min_value is None or nested_min < min_value: min_value = nested_min elif isinstance(value, (int, float)): if min_value is None or value < min_value: min_value = value return min_value"},{"question":"Write a function in Python that can convert a hexadecimal value \\"0xFA\\" to its equivalent binary and decimal values. Also, the function should handle errors gracefully when an invalid hexadecimal value is given as input.","solution":"def hex_to_bin_dec(hex_value): Converts a hexadecimal value to its equivalent binary and decimal values. Parameters: hex_value (str): A string representing a hexadecimal value, for example, \\"0xFA\\" Returns: tuple: A tuple containing the binary and decimal values if conversion is successful, otherwise (None, None). try: if not isinstance(hex_value, str) or not hex_value.startswith(\\"0x\\"): raise ValueError(\\"Invalid hexadecimal input\\") dec_value = int(hex_value, 16) bin_value = bin(dec_value) return bin_value, dec_value except ValueError: return None, None"},{"question":"Is it possible to create a Python function that takes a single argument and calculates the power of 3 of that argument?","solution":"def power_of_3(n): Returns the power of 3 of the argument n. return n ** 3"},{"question":"Using a while loop, write a program to print the Fibonacci sequence up to the nth term, where n is a user input greater than 2 and less than 100. The program should also check if the input is within the valid range and prompt the user to re-enter if it is not. Additionally, the program should calculate and display the sum of all the Fibonacci numbers generated.","solution":"def fibonacci_sequence(n): Generates the Fibonacci sequence up to the nth term and returns the sequence along with the sum of the sequence. # Check if the input is within a valid range if n <= 2 or n >= 100: raise ValueError(\\"Input must be greater than 2 and less than 100.\\") seq = [0, 1] while len(seq) < n: seq.append(seq[-1] + seq[-2]) fib_sum = sum(seq) return seq, fib_sum"},{"question":"Create a Flask application that serves a simple HTML page with a form to enter a name and submit. Upon submission, the app should display a personalized greeting.","solution":"from flask import Flask, request, render_template_string app = Flask(__name__) # HTML template with a form to enter a name and submit HTML_TEMPLATE = <!doctype html> <html lang=\\"en\\"> <head> <meta charset=\\"utf-8\\"> <title>Greeting App</title> </head> <body> <h1>Greeting App</h1> <form method=\\"post\\" action=\\"/\\"> <label for=\\"name\\">Enter your name:</label> <input type=\\"text\\" id=\\"name\\" name=\\"name\\" required> <button type=\\"submit\\">Submit</button> </form> {% if name %} <h2>Hello, {{ name }}!</h2> {% endif %} </body> </html> @app.route('/', methods=['GET', 'POST']) def home(): if request.method == 'POST': name = request.form.get('name') return render_template_string(HTML_TEMPLATE, name=name) return render_template_string(HTML_TEMPLATE) if __name__ == '__main__': app.run(debug=True)"},{"question":"I have a function that checks if a number is prime or not. But I want to modify it to return the smallest divisor of the given number if it's not prime. Could you help me with that?","solution":"def smallest_divisor_or_prime(n): Returns the smallest divisor of the given number if it's not prime. If the number is prime, returns the number itself. if n <= 1: return n # Not a prime number for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return i return n # Number is prime"},{"question":"Design a Python program that is capable of calculating and displaying the number of weekdays (Monday through Friday) between two dates provided. This program should be able to handle any dates from the year 1900 onwards. Additionally, the program needs to account for leap years and should include the functionality to determine whether a given year is a leap year or not. For extra complexity, ensure your function also handles invalid dates appropriately, and outputs meaningful error messages.","solution":"from datetime import datetime, timedelta def is_leap_year(year): Determines if a given year is a leap year. Returns True if it is a leap year, otherwise False. if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): return True return False def count_weekdays(start_date, end_date): Returns the number of weekdays (Monday through Friday) between two dates inclusive. Both start_date and end_date should be in the format 'YYYY-MM-DD'. Raises ValueError for invalid dates. try: start = datetime.strptime(start_date, '%Y-%m-%d') end = datetime.strptime(end_date, '%Y-%m-%d') except ValueError: raise ValueError(\\"Invalid date format. Please use 'YYYY-MM-DD'.\\") if start > end: raise ValueError(\\"Start date must not be after the end date.\\") if start.year < 1900 or end.year < 1900: raise ValueError(\\"Dates must be from the year 1900 onwards.\\") delta = timedelta(days=1) weekday_count = 0 while start <= end: if start.weekday() < 5: # Monday=0, Sunday=6 weekday_count += 1 start += delta return weekday_count"},{"question":"I have a programming problem. I need to implement a function 'getMiddleCharacter' in Python. This function should return the middle character(s) of a given string. If the string length is odd, return the single middle character. If the string length is even, return the two middle characters. Can you help me write this function?","solution":"def getMiddleCharacter(s): Returns the middle character(s) of the given string. If the string length is odd, return the single middle character. If the string length is even, return the two middle characters. length = len(s) if length % 2 == 0: # Even length: return middle two characters middle_index = length // 2 return s[middle_index - 1: middle_index + 1] else: # Odd length: return the single middle character middle_index = length // 2 return s[middle_index]"},{"question":"Write a Python script to find the common elements in two lists, ensuring that the script can handle lists of any length. Additionally, include error handling to account for any potential issues, such as non-iterable or non-list inputs.","solution":"def find_common_elements(list1, list2): Returns a list of common elements in list1 and list2. Handles the case where inputs are not iterable or not lists. Parameters: list1: The first list list2: The second list Returns: A list of common elements. if not isinstance(list1, list) or not isinstance(list2, list): raise ValueError(\\"Both inputs must be lists.\\") return list(set(list1) & set(list2))"},{"question":"Write a code to sort the following array in increasing order. The array may contain duplicate elements.","solution":"def sort_array(arr): Sorts an array in increasing order and returns the sorted array. Parameters: arr (list): List of elements to be sorted. Returns: list: Sorted list of elements. return sorted(arr)"},{"question":"Write a Python program to check if a given string has balanced parentheses.","solution":"def is_balanced(s): Checks if the given string has balanced parentheses. Args: s (str): The input string. Returns: bool: True if the string has balanced parentheses, False otherwise. stack = [] matching_parenthesis = {')': '(', ']': '[', '}': '{'} for char in s: if char in matching_parenthesis.values(): stack.append(char) elif char in matching_parenthesis.keys(): if not stack or stack.pop() != matching_parenthesis[char]: return False return not stack"},{"question":"Write a Python program that accepts a list of strings and returns the strings that have the highest number of unique characters. If multiple strings have the same highest number of unique characters, return all of them. Note: Case sensitivity must be considered.","solution":"def find_strings_with_most_unique_chars(strings): Given a list of strings, returns a list of strings that have the highest number of unique characters. If multiple strings have the same highest number of unique characters, all of them are returned. :param strings: List of strings :return: List of strings with the highest number of unique characters if not strings: return [] # Calculate unique character counts for each string unique_char_counts = {string: len(set(string)) for string in strings} # Find the maximum unique character count max_unique_count = max(unique_char_counts.values()) # Return all strings that have the maximum unique character count return [string for string, count in unique_char_counts.items() if count == max_unique_count]"},{"question":"Create a function in Python to create a TCP server that can handle multiple concurrent connections using the \`socketserver\` module.","solution":"import socketserver class MyTCPHandler(socketserver.BaseRequestHandler): def handle(self): self.data = self.request.recv(1024).strip() print(f\\"{self.client_address[0]} wrote: {self.data.decode()}\\") self.request.sendall(self.data.upper()) class ThreadedTCPServer(socketserver.ThreadingMixIn, socketserver.TCPServer): pass def start_server(host='localhost', port=9999): server = ThreadedTCPServer((host, port), MyTCPHandler) with server: server.serve_forever()"},{"question":"Write a simple python program to replace all the 'a' characters in a string with '%'","solution":"def replace_a_with_percent(input_str): Replaces all occurrences of the character 'a' in the input string with '%'. Parameters: input_str (str): The input string. Returns: str: The modified string with 'a' replaced by '%'. return input_str.replace('a', '%')"},{"question":"Write a python function which takes in an argument 'x' and prints \\"x is positive\\" if x is a positive integer, \\"x is negative\\" if x is a negative integer, and \\"x is zero\\" if x equals to zero. This function should also handle cases where the input is not an integer by raising a TypeError.","solution":"def check_number(x): Takes an argument \`x\` and prints: - \\"x is positive\\" if x is a positive integer, - \\"x is negative\\" if x is a negative integer, - \\"x is zero\\" if x equals to zero. Raises a TypeError if x is not an integer. if not isinstance(x, int): raise TypeError(\\"Input must be an integer\\") if x > 0: print(\\"x is positive\\") elif x < 0: print(\\"x is negative\\") else: print(\\"x is zero\\")"},{"question":"Create a program that not only outputs all prime numbers between 0 and 100, but also presents the result in a 10x10 grid. Moreover, your program should highlight those prime numbers that are part of the Fibonacci sequence in a different color. Your program should also have an option to output the results in reverse order when inputted with a specific command line flag.","solution":"import math def is_prime(n): Function to check if n is a prime number. if n <= 1: return False for i in range(2, int(math.sqrt(n)) + 1): if n % i == 0: return False return True def fibonacci(n): Function to generate Fibonacci sequence up to the n-th element. fib_series = [0, 1] while len(fib_series) < n: fib_series.append(fib_series[-1] + fib_series[-2]) return fib_series def get_primes_in_range(start, end): Function to get all prime numbers between start and end. primes = [num for num in range(start, end + 1) if is_prime(num)] return primes def create_grid(primes, highlight_fib): Function to create a 10x10 grid of prime numbers and highlight Fibonacci primes. grid = [] for i in range(100): if i < len(primes): number = primes[i] if number in highlight_fib: grid.append(f\\"033[91m{number}033[0m\\") # Use red color for Fibonacci primes else: grid.append(str(number)) else: grid.append(\\"\\") grid_10x10 = [grid[i:i+10] for i in range(0, 100, 10)] return grid_10x10 def display_grid(grid): Function to display the grid. for row in grid: print(\\"t\\".join(map(str, row))) def main(reverse=False): primes = get_primes_in_range(0, 100) if reverse: primes = list(reversed(primes)) fibonacci_sequence = set(fibonacci(100)) grid = create_grid(primes, fibonacci_sequence) display_grid(grid) # Example usage: # main() # main(reverse=True)"},{"question":"Design a Python function leveraging the boto3 library for managing Amazon S3 service operations. This function should posses the capability to upload files, download files, enumerate all files within a specified bucket, and remove files. Ensure inclusion of detailed error handling mechanisms for each operation. Below is a Python function using \`boto3\` library to manage Amazon S3 service operations. You need to install the \`boto3\` library and have AWS credentials properly set up in your environment.","solution":"import boto3 from botocore.exceptions import NoCredentialsError, PartialCredentialsError, ClientError def s3_operations(bucket_name, operation, file_name=None, object_name=None): s3_client = boto3.client('s3') try: if operation == 'upload': s3_client.upload_file(file_name, bucket_name, object_name or file_name) return f'File {file_name} uploaded to {bucket_name}/{object_name or file_name}' elif operation == 'download': s3_client.download_file(bucket_name, object_name, file_name or object_name) return f'File {object_name} downloaded from {bucket_name} to {file_name or object_name}' elif operation == 'list': response = s3_client.list_objects_v2(Bucket=bucket_name) if 'Contents' in response: files = [item['Key'] for item in response['Contents']] return files else: return [] elif operation == 'delete': s3_client.delete_object(Bucket=bucket_name, Key=file_name) return f'File {file_name} deleted from {bucket_name}' else: return 'Unsupported operation. Choose from \\"upload\\", \\"download\\", \\"list\\", \\"delete\\".' except FileNotFoundError: return 'The specified file was not found.' except NoCredentialsError: return 'Credentials not available.' except PartialCredentialsError: return 'Incomplete credentials provided.' except ClientError as e: return f'Client error: {e}' except Exception as e: return f'Unexpected error: {e}'"},{"question":"Write a function in Python that takes two lists of equal length, and returns a dictionary mapping each element from the first list to the corresponding element in the second list. The function should also handle cases where the lists are not of equal length by returning an error message.","solution":"def map_lists_to_dict(list1, list2): Returns a dictionary mapping each element of list1 to the corresponding element of list2. If the lists are not of equal length, returns an error message. if len(list1) != len(list2): return \\"Error: Lists are not of equal length.\\" return dict(zip(list1, list2))"},{"question":"Write a function that takes a directory path as an argument and recursively prints the absolute path of all files and subdirectories in the directory. Make sure to handle any errors gracefully.","solution":"import os def print_directory_contents(dir_path): Recursively prints the absolute path of all files and subdirectories in the directory specified by dir_path. try: with os.scandir(dir_path) as entries: for entry in entries: abs_path = os.path.abspath(entry.path) print(abs_path) if entry.is_dir(follow_symlinks=False): # Recursively print contents of the subdirectory print_directory_contents(abs_path) except FileNotFoundError as fnf_error: print(f\\"Error: {fnf_error}\\") except PermissionError as perm_error: print(f\\"Error: {perm_error}\\") except Exception as e: print(f\\"An error occurred: {e}\\")"},{"question":"Write a Python program that accepts a string as input and checks if it's a palindrome. A palindrome is a string that reads the same backward as forward. The program should return True if the string is a palindrome and False otherwise. The program should be case-insensitive and should ignore non-alphanumeric characters when checking for palindrome.","solution":"import re def is_palindrome(s): Checks if the given string s is a palindrome. A string is considered a palindrome if it reads the same backward as forward (ignoring cases and non-alphanumeric characters). s = re.sub(r'[^a-zA-Z0-9]', '', s).lower() # Remove non-alphanumeric characters and convert to lower case return s == s[::-1]"},{"question":"Write a code snippet that returns the root of a given binary tree, but with the additional requirement that the code should also calculate and return the sum of all the nodes in the tree.","solution":"class TreeNode: Definition for a binary tree node. def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def get_tree_root_and_sum(root): Given the root of a binary tree, returns a tuple containing the root of the tree and the sum of all nodes in the tree. def helper(node): if node is None: return 0 return node.val + helper(node.left) + helper(node.right) total_sum = helper(root) return root, total_sum"},{"question":"I need help with a function in Python that can create copies of each item in a list of strings. Could you assist me with that?","solution":"def duplicate_items(input_list): For each item in the input_list, return a new list with each item duplicated. Parameters: input_list (list): A list of strings. Returns: list: A new list where each item in the input_list appears twice consecutively. result = [] for item in input_list: result.append(item) result.append(item) return result"},{"question":"Write a Python function to swap the characters at even and odd index positions of a given string.","solution":"def swap_even_odd_characters(s): Swap characters at even and odd index positions of the given string. If the length of the string is odd, the last character remains in the same position. char_list = list(s) for i in range(0, len(char_list) - 1, 2): char_list[i], char_list[i + 1] = char_list[i + 1], char_list[i] return ''.join(char_list)"},{"question":"I'm trying to serve static files under the path '/documents' using Flask. I currently have a 'public' directory at the root of my project directory tree. However, it seems any resource under that 'public' directory is accessible. I want to restrict access to only files under a 'documents' directory within 'public'. For instance, if I have a resource at 'public/documents/test.txt', I'd like to access it at mysite.com/documents/test.txt instead of mysite.com/public/documents/test.txt How can I achieve this in Flask?","solution":"from flask import Flask, send_from_directory app = Flask(__name__) @app.route('/documents/<path:filename>') def serve_document(filename): Serves static files under 'public/documents' directory. return send_from_directory('public/documents', filename) if __name__ == '__main__': app.run()"},{"question":"Given a random list of numbers, write a function in Python that splits the given list into two even-sized sublists.","solution":"def split_list(input_list): Splits the input list into two even-sized sublists. If the input list has an odd number of elements, the extra element will go into the first sublist. mid_index = (len(input_list) + 1) // 2 # +1 to allocate the extra element to the first sublist if the length is odd return input_list[:mid_index], input_list[mid_index:]"},{"question":"I'm writing a Python code that will later become a module (importable module) in my project. I want to give the user access to certain functions when he imports my module and also give him the ability to run some code directly when running the python file using the python command.","solution":"def greet(name): Returns a greeting message for the given name. return f\\"Hello, {name}!\\" def add(a, b): Returns the sum of a and b. return a + b if __name__ == \\"__main__\\": # This code block will execute only when the file is run directly, # not when it is imported as a module. import sys if len(sys.argv) > 2: name = sys.argv[1] a = int(sys.argv[2]) b = int(sys.argv[3]) print(greet(name)) print(f\\"The sum of {a} and {b} is {add(a, b)}\\") else: print(\\"Usage: python <filename>.py <name> <num1> <num2>\\")"},{"question":"Write a Python code to calculate the area of a triangle given the length of its base and height. Then, extend your code to handle a list of triangles, returning a list of their areas and validating the inputs to ensure that both base and height are non-negative numbers. If the input is invalid, do not include the triangle in the final list of areas.","solution":"def triangle_area(base, height): Calculate the area of a triangle given its base and height. Parameters: base (float): The base length of the triangle. height (float): The height of the triangle. Returns: float: The area of the triangle. if base < 0 or height < 0: return None return 0.5 * base * height def areas_of_triangles(triangles): Calculate the areas of a list of triangles given their base and height. Parameters: triangles (list of tuples): A list of tuples where each tuple contains the base and height of a triangle. Returns: list of floats: A list of areas of the valid triangles. areas = [] for base, height in triangles: area = triangle_area(base, height) if area is not None: areas.append(area) return areas"},{"question":"Develop a code for a function to determine if a given 3D point lies inside or outside of a triangular pyramid. The input will be a list of four coordinate points [x, y, z] for the vertices of the triangular pyramid and a fifth point to check. The function should return \\"inside\\", \\"outside\\", or \\"on the surface\\". Consider the accuracy of your computations since you will be dealing with floating point numbers.","solution":"import numpy as np def is_point_in_pyramid(vertices, point): Determines whether a given 3D point is inside, outside, or on the surface of a tetrahedron (triangular pyramid). Args: vertices (list of list of floats): A list of four vertices of the tetrahedron, each vertex being a list [x, y, z]. point (list of floats): A list of one point [x, y, z] to check. Returns: str: \\"inside\\", \\"outside\\", or \\"on the surface\\" indicating the position of the point relative to the tetrahedron. def signed_tetrahedron_volume(v0, v1, v2, v3): v0, v1, v2, v3 = map(np.array, (v0, v1, v2, v3)) return np.dot(np.cross(v1 - v0, v2 - v0), v3 - v0) / 6.0 A, B, C, D = vertices P = point V_ABC = abs(signed_tetrahedron_volume(A, B, C, D)) V_PBC = abs(signed_tetrahedron_volume(P, B, C, D)) V_APC = abs(signed_tetrahedron_volume(A, P, C, D)) V_ABP = abs(signed_tetrahedron_volume(A, B, P, D)) V_ABC_P = abs(signed_tetrahedron_volume(A, B, C, P)) sum_volumes = V_PBC + V_APC + V_ABP + V_ABC_P if np.isclose(V_ABC, sum_volumes, atol=1e-7): if any(np.isclose(V, 0, atol=1e-7) for V in [V_PBC, V_APC, V_ABP, V_ABC_P]): return \\"on the surface\\" else: return \\"inside\\" else: return \\"outside\\""},{"question":"Create a Python function \`modify_list\` that takes a list of integers \`lst\` as an argument. The function should modify the list in place by removing all elements that are even numbers and replacing them with their absolute value plus 1. However, if the even number is a multiple of 3, it should be replaced with its absolute value plus 2.","solution":"def modify_list(lst): Modify the list in place by removing all elements that are even numbers and replacing them: - If the even number is not a multiple of 3, replace it with its absolute value plus 1. - If the even number is a multiple of 3, replace it with its absolute value plus 2. for i in range(len(lst)): if lst[i] % 2 == 0: if lst[i] % 3 == 0: lst[i] = abs(lst[i]) + 2 else: lst[i] = abs(lst[i]) + 1"},{"question":"Create a Python function named \\"calculate_factorial_quadratic_time\\" that takes a positive integer as input and returns the factorial of the number using a quadratic time complexity algorithm.","solution":"def calculate_factorial_quadratic_time(n): Returns the factorial of a number n, calculated in a quadratic time complexity manner. if n == 0 or n == 1: return 1 # Initialize factorial array factorial = [1] * (n + 1) # Fill factorial array with values for i in range(2, n + 1): for j in range(1, i + 1): factorial[i] *= j return factorial[n] # Note: The above approach simulates a quadratic time complexity by using nested loops."},{"question":"Given a list of numbers, write a Python program to find the maximum and minimum number. However, you are not allowed to use any built-in functions or methods such as max(), min(), or sorting algorithms. Additionally, the program should have a time complexity of O(n), where n is the length of the list.","solution":"def find_max_and_min(numbers): Given a list of numbers, returns a tuple with the maximum and minimum number. The solution has a time complexity of O(n). Parameters: numbers (list): A list of numbers. Returns: tuple: A tuple where the first element is the maximum number and the second element is the minimum number. if not numbers: raise ValueError(\\"The list is empty\\") max_num = numbers[0] min_num = numbers[0] for num in numbers[1:]: if num > max_num: max_num = num if num < min_num: min_num = num return (max_num, min_num)"},{"question":"Write a program in Python that generates a list of all prime numbers within a given range. The program should take two integers as input, representing the start and end of the range, and should output a list of all prime numbers within that range. Make sure to handle edge cases, such as negative numbers or non-integer inputs, and optimize the algorithm for efficiency.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def generate_primes(start, end): Returns a list of all prime numbers within the given range [start, end]. if not isinstance(start, int) or not isinstance(end, int): raise ValueError(\\"Both start and end must be integers\\") if start > end: return [] return [num for num in range(start, end + 1) if is_prime(num)]"},{"question":"Create a Python function to compute the factorial of a given number using both iterative and recursive methods. Additionally, implement a variant of the function that calculates the factorial using a dynamic programming approach. Compare the performance of all three methods for a large input number.","solution":"import time def factorial_iterative(n): Returns the factorial of n computed iteratively. result = 1 for i in range(2, n + 1): result *= i return result def factorial_recursive(n): Returns the factorial of n computed recursively. if n <= 1: return 1 return n * factorial_recursive(n - 1) def factorial_dynamic_programming(n): Returns the factorial of n computed using dynamic programming. fact = [1] * (n + 1) for i in range(2, n + 1): fact[i] = fact[i - 1] * i return fact[n] def compare_performance(n): start_time = time.time() factorial_iterative(n) iterative_time = time.time() - start_time start_time = time.time() factorial_recursive(n) recursive_time = time.time() - start_time start_time = time.time() factorial_dynamic_programming(n) dp_time = time.time() - start_time return iterative_time, recursive_time, dp_time"},{"question":"Explain the use of 'args' and 'kwargs' in Python function definitions and how they differ. Provide examples to show correct usage.","solution":"def example_args(*args): This function demonstrates the use of *args by accepting multiple positional arguments and printing them. for arg in args: print(arg) def example_kwargs(**kwargs): This function demonstrates the use of **kwargs by accepting multiple keyword arguments and printing them. for key, value in kwargs.items(): print(f\\"{key}: {value}\\") def example_args_kwargs(*args, **kwargs): This function demonstrates the use of both *args and **kwargs by accepting multiple positional and keyword arguments and printing them. print(\\"Positional args:\\") for arg in args: print(arg) print(\\"Keyword args:\\") for key, value in kwargs.items(): print(f\\"{key}: {value}\\")"},{"question":"Write a Python script to calculate and display the gap between a list of pairs of date and time values in years, months, days, hours, minutes and seconds. Each pair in the list represents a start and end datetime values. Also, include a feature to specify whether you want the total difference in just the mentioned units or broken down into separate units.","solution":"from datetime import datetime from dateutil.relativedelta import relativedelta def calculate_time_difference(start_dt, end_dt, breakdown=False): start = datetime.strptime(start_dt, \\"%Y-%m-%d %H:%M:%S\\") end = datetime.strptime(end_dt, \\"%Y-%m-%d %H:%M:%S\\") diff = relativedelta(end, start) if breakdown: return { 'years': diff.years, 'months': diff.months, 'days': diff.days, 'hours': diff.hours, 'minutes': diff.minutes, 'seconds': diff.seconds } else: total_difference = { 'years': 0, 'months': 0, 'days': (end - start).days, 'hours': diff.hours, 'minutes': diff.minutes, 'seconds': diff.seconds } return total_difference def calculate_gap_between_dates(pairs, breakdown=False): result = [] for start_dt, end_dt in pairs: result.append( calculate_time_difference(start_dt, end_dt, breakdown) ) return result"},{"question":"Create a Python program that finds the maximum and minimum number in a list of numbers. The program should also display the index positions of the maximum and minimum numbers in the list. Additionally, calculate the average of all the numbers in the list.","solution":"def find_max_min_avg(numbers): Returns a dictionary containing the maximum and minimum numbers along with their index positions, and the average of all the numbers in a list. The dictionary format is: { 'max_value': max_value, 'max_index': max_index, 'min_value': min_value, 'min_index': min_index, 'average': average } if not numbers: return None # Return None for an empty list max_value = max(numbers) min_value = min(numbers) max_index = numbers.index(max_value) min_index = numbers.index(min_value) average = sum(numbers) / len(numbers) return { 'max_value': max_value, 'max_index': max_index, 'min_value': min_value, 'min_index': min_index, 'average': average }"},{"question":"Develop a Python function to shuffle a list of numbers without using the random module. The function should also include error handling for non-numeric inputs and maintain the original order of the list when the function is run multiple times without calling the random module.","solution":"def shuffle_numbers(nums): Shuffles a list of numbers without using the random module. :param nums: List of numbers to be shuffled. :return: Shuffled list of numbers. :raises: ValueError if any element in the list is not a number. # Check for non-numeric inputs if not all(isinstance(x, (int, float)) for x in nums): raise ValueError(\\"All elements must be numeric\\") # Since we cannot use random module, we will use a custom shuffle algorithm. shuffled = list(nums) # Create a copy of the original list to shuffle if len(shuffled) > 1: for i in range(len(shuffled) - 1, 0, -1): j = i // 2 # Deterministic \\"random\\" index for demonstration shuffled[i], shuffled[j] = shuffled[j], shuffled[i] return shuffled"},{"question":"Given a 2D list, write a Python program to find the largest number in each row and return them as a list.","solution":"def largest_in_each_row(matrix): Returns a list containing the largest number in each row of the given 2D list (matrix). return [max(row) for row in matrix]"},{"question":"Given a list of numbers, write a function to check for odd numbers and return a new list containing only the odd numbers found. Additionally, implement this function using recursion. Also, provide a piece of erroneous code as a reference to increase misdirection.","solution":"def find_odd_numbers_recursive(numbers): Returns a list of odd numbers from the given list using recursion. if not numbers: return [] if numbers[0] % 2 != 0: return [numbers[0]] + find_odd_numbers_recursive(numbers[1:]) else: return find_odd_numbers_recursive(numbers[1:]) # Erroneous code example # def find_odd_numbers_recursive(numbers): # result = [] # for number in numbers: # if number % 2 == 0: # result.append(number) # return result"},{"question":"How can I create a web application using Flask that allows users to search for books by title or author?","solution":"from flask import Flask, request, jsonify app = Flask(__name__) # Sample data: list of books with title and author books = [ {\\"title\\": \\"To Kill a Mockingbird\\", \\"author\\": \\"Harper Lee\\"}, {\\"title\\": \\"1984\\", \\"author\\": \\"George Orwell\\"}, {\\"title\\": \\"The Great Gatsby\\", \\"author\\": \\"F. Scott Fitzgerald\\"}, {\\"title\\": \\"The Catcher in the Rye\\", \\"author\\": \\"J.D. Salinger\\"} ] @app.route('/search', methods=['GET']) def search_books(): query = request.args.get('query', '').lower() if query: results = [ book for book in books if query in book[\\"title\\"].lower() or query in book[\\"author\\"].lower() ] else: results = [] return jsonify(results) if __name__ == '__main__': app.run(debug=True)"},{"question":"Can you write a Python script to generate the first 100 numbers in the Fibonacci sequence and save them to a text file with each number on a new line?","solution":"def generate_fibonacci(n): Generate the first \`n\` Fibonacci numbers. fib_sequence = [0, 1] while len(fib_sequence) < n: fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence[:n] def save_to_file(filename, data): Save the data to a text file with each item on a new line. with open(filename, 'w') as file: for item in data: file.write(f\\"{item}n\\") # Generate the first 100 Fibonacci numbers fibonacci_numbers = generate_fibonacci(100) # Save the Fibonacci numbers to a text file save_to_file('fibonacci.txt', fibonacci_numbers)"},{"question":"In the realm of string manipulations, various operations can be performed including slicing, concatenation, and searching, among others. In today's programming problem, we will focus on a specific operation: reversing the order of words in a given string. However, the challenge here would be to accomplish this task without employing any built-in string reversal or manipulation functions. For instance, imagine we have the string \\"hello world beautiful\\" and we want to reverse the order of its words to get \\"beautiful world hello\\". The difficulty is escalated by the fact that we can't use Python's built-in functions like \`split()\`, \`reverse()\`, or \`join()\`. To further challenge our programming prowess, the method we devise should be efficient enough to be executed in an environment with limited resources, such as a microcontroller.","solution":"def reverse_words_manual(s): Reverses the order of words in the given string s without using built-in string reversal or manipulation functions. words = [] length = len(s) word_start = None # Traverse the string and extract words manually for i in range(length): if s[i] != ' ': if word_start is None: word_start = i else: if word_start is not None: words.append(s[word_start:i]) word_start = None # Add the last word if any if word_start is not None: words.append(s[word_start:length]) # Rebuild the string with words in reverse order # Initialize an empty result variable result = \\"\\" for i in range(len(words) - 1, -1, -1): result += words[i] if i != 0: result += \\" \\" return result"},{"question":"Write a code to generate the first n terms of the Fibonacci sequence, where n is a prime number. Additionally, the code should use dynamic programming to optimize the computation of the sequence. The code should also output the sum of the first n terms of the Fibonacci sequence.","solution":"def is_prime(n): Checks if a number n is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def generate_fibonacci(n): Generates the first n terms of the Fibonacci sequence using dynamic programming, where n is a prime number. Returns both the sequence and the sum of its terms. if not is_prime(n): raise ValueError(\\"n must be a prime number\\") if n == 1: return [0], 0 elif n == 2: return [0, 1], 1 fib = [0] * n fib[0] = 0 fib[1] = 1 for i in range(2, n): fib[i] = fib[i - 1] + fib[i - 2] return fib, sum(fib)"},{"question":"Write a Bash script that runs a Python code and passes an argument to the Python function. The Python function should only accept lowercase alphabets as the name argument and should also check if the name is a palindrome (the same when read forwards and backwards). The Bash script should handle the case when the argument is not a lowercase alphabet or is not a palindrome by printing an error message.","solution":"def is_palindrome(s): Returns True if s is a palindrome, False otherwise. return s == s[::-1] def validate_name(name): Validates if the name consists only of lowercase alphabets and is a palindrome. Returns an error message otherwise. if not name.isalpha() or not name.islower(): return \\"Error: Name must contain only lowercase alphabets.\\" if not is_palindrome(name): return \\"Error: Name is not a palindrome.\\" return \\"Valid name.\\""},{"question":"Is there a way to replace all empty strings in an array with 'NULL' using a Python script?","solution":"def replace_empty_strings_with_null(arr): Replaces all empty strings in the input array with 'NULL'. Parameters: arr (list): A list of strings. Returns: list: A new list with all empty strings replaced by 'NULL'. return ['NULL' if x == '' else x for x in arr]"},{"question":"Create a Python function named \\"binary_search\\" that takes a list of integers and an element as input, and returns the index of the element in the list using binary search algorithm. Assume the list is sorted in ascending order.","solution":"def binary_search(arr, elem): Performs binary search on a sorted list to find the element. Parameters: arr (list of int): A list of sorted integers. elem (int): The element to search for in the list. Returns: int: The index of the element if found, otherwise -1. low = 0 high = len(arr) - 1 while low <= high: mid = (low + high) // 2 if arr[mid] == elem: return mid elif arr[mid] < elem: low = mid + 1 else: high = mid - 1 return -1"},{"question":"Create a program that not only extracts words from the sentence \\"The quick brown fox jumped over the fence\\", but additionally filters out any stop words (like \\"the\\", \\"a\\", \\"an\\", \\"in\\") and returns the remaining words in reverse order. Also, implement a feature that ensures all words in the output are in lowercase. Use any programming language of your choice.","solution":"def extract_and_filter_and_reverse(sentence): Extracts words from the input sentence, filters out stop words, converts the remaining words to lowercase, and returns them in reverse order. Args: sentence (str): The input sentence from which to extract words. Returns: list: Filtered words in reverse order and in lowercase. stop_words = {\\"the\\", \\"a\\", \\"an\\", \\"in\\"} words = sentence.split() filtered_words = [word.lower() for word in words if word.lower() not in stop_words] return filtered_words[::-1] # Example usage # sentence = \\"The quick brown fox jumped over the fence\\" # result = extract_and_filter_and_reverse(sentence) # print(result)"},{"question":"Devise a data structure to store an inventory of items in a store. Additionally, implement a method that allows the user to add an item to the inventory, considering that each item has a unique identifier. The method should handle the scenario where the user tries to add an item with an identifier that already exists in the inventory, displaying an error message.","solution":"class Inventory: def __init__(self): self.items = {} def add_item(self, item_id, item_name, quantity): Adds an item to the inventory if the item_id does not already exist. :param item_id: Unique identifier for the item (str). :param item_name: Name of the item (str). :param quantity: Quantity of the item (int). :return: Success message or error message (str). if item_id in self.items: return f\\"Error: Item with ID {item_id} already exists.\\" self.items[item_id] = {'name': item_name, 'quantity': quantity} return f\\"Item {item_name} with ID {item_id} added successfully.\\" def get_inventory(self): Returns the current inventory. return self.items"},{"question":"Rewrite the following piece of code to handle an input which is a negative number, and also modify it to return the factorial value instead of printing it. If the input is a negative number or a non-integer, the function should return None.","solution":"def factorial(n): Returns the factorial of a given positive integer n. Returns None if n is a negative number or a non-integer. if not isinstance(n, int) or n < 0: return None if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Build a program to convert a single dimensional list to a dictionary where each item acts as the key, and its position in the list as the value. Ensure the program handles the edge case of duplicate items in the list [4, 7, 9, 11, 7].","solution":"def list_to_dict(lst): Converts a list to a dictionary where each item acts as the key, and its position in the list as the value. In case of duplicate items, the last occurrence will be considered. Args: lst (list): The input list. Returns: dict: The converted dictionary. return {item: index for index, item in enumerate(lst)}"},{"question":"Create a Python function that returns the intersection of two lists, i.e., elements that are common to both lists.","solution":"def intersection(list1, list2): Returns a list of elements that are common to both input lists. Args: list1, list2: Lists of elements Returns: A list containing the intersection of list1 and list2 set1 = set(list1) set2 = set(list2) return list(set1 & set2)"},{"question":"Create a Python code to generate a list with the first 20 prime numbers greater than 100.","solution":"def is_prime(n): Check if a number is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def first_20_primes_greater_than_100(): Generate a list with the first 20 prime numbers greater than 100. primes = [] num = 101 while len(primes) < 20: if is_prime(num): primes.append(num) num += 1 return primes"},{"question":"Print all the elements in the following array in descending order, without using any built-in sorting functions or methods. Additionally, the solution should have a time complexity of O(n log n). The array may contain duplicate elements and the solution should remove any duplicate elements before printing the result.","solution":"def merge_sort(arr): if len(arr) > 1: mid = len(arr) // 2 # Finding the mid of the array L = arr[:mid] # Dividing the elements into 2 halves R = arr[mid:] merge_sort(L) # Sorting the first half merge_sort(R) # Sorting the second half i = j = k = 0 # Copy data to temp arrays L[] and R[] while i < len(L) and j < len(R): if L[i] < R[j]: arr[k] = L[i] i += 1 else: arr[k] = R[j] j += 1 k += 1 # Checking if any element was left while i < len(L): arr[k] = L[i] i += 1 k += 1 while j < len(R): arr[k] = R[j] j += 1 k += 1 def sort_and_remove_duplicates(arr): unique_arr = list(set(arr)) # Remove duplicates merge_sort(unique_arr) # Perform merge sort return unique_arr[::-1] # Return in descending order def print_sorted_descending(arr): sorted_arr = sort_and_remove_duplicates(arr) for element in sorted_arr: print(element)"},{"question":"Please write a Python function that finds the number of unique words in a given sentence, while ignoring case sensitivity and punctuation marks. Additionally, implement a limitation where the function must have a time complexity of O(n) and must not use any built-in functions for removing punctuation marks or splitting the sentence into words.","solution":"def count_unique_words(sentence): Returns the number of unique words in the given sentence. Ignores case sensitivity and punctuation marks. # Helper function to check if a character is a letter def is_letter(char): return 'a' <= char <= 'z' or 'A' <= char <= 'Z' # Normalize the case of the sentence to lowercase sentence = sentence.lower() word_set = set() word = \\"\\" for char in sentence: if is_letter(char): word += char else: if word: word_set.add(word) word = \\"\\" if word: word_set.add(word) return len(word_set)"},{"question":"I'm currently taking a Python class, and I need to create a program that reads numbers from a file and calculates their square roots. Can you help me write a function to achieve this?","solution":"import math def calculate_square_roots(file_path): Reads numbers from a file and calculates their square roots. :param file_path: path to the file containing numbers :return: a list of square roots of the numbers in the file with open(file_path, 'r') as file: numbers = file.readlines() square_roots = [] for number in numbers: number = float(number.strip()) if number >= 0: square_roots.append(math.sqrt(number)) else: square_roots.append(float('nan')) # Return NaN for negative numbers since their square root is not defined in the real number system. return square_roots"},{"question":"Using the \\"for\\" loop, print out all prime numbers from 1 to 100, excluding the number 2 and ensuring that the code runs within a time complexity of O(n log n). Additionally, implement the Sieve of Eratosthenes algorithm for finding prime numbers.","solution":"def sieve_of_eratosthenes(n): Implement the Sieve of Eratosthenes to find all prime numbers up to n # Initially assume all integers are prime is_prime = [True] * (n+1) p = 2 while p * p <= n: # If prime[p] is not changed, then it is a prime if is_prime[p]: # Updating all multiples of p to False indicating not prime for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 # Collecting all prime numbers from the sieve excluding 2 primes = [p for p in range(3, n+1) if is_prime[p]] return primes def prime_numbers_excluding_two(limit=100): Returns a list of prime numbers from 1 to the specified limit, excluding 2 return sieve_of_eratosthenes(limit)"},{"question":"if the input is a list of numbers, for example, [1,2,3], how do I use the map function in python to return a list of its square? and please explain how the map function works in this context.","solution":"def square_number(n): Returns the square of the given number n. return n * n def square_list(numbers): Returns a list of squares of the given list of numbers. return list(map(square_number, numbers))"},{"question":"Build a python function to return a new list containing the square of every integer present in a given list.","solution":"def square_elements(input_list): Returns a new list with the square of every integer present in the input list. Parameters: input_list (list): A list of integers Returns: list: A new list with the squares of the integers return [x**2 for x in input_list]"},{"question":"Write a high-level code implementation of a WeightedQuickUnion with path compression algorithm for solving a connectivity problem that requires connectivity between n objects. Besides outlining the steps to determine if two objects are connected and to unify the groups they represent, your implementation should include optimizations for handling large inputs and minimizing the height of the tree. Additionally, provide a detailed analysis of the time complexity of the algorithm and any potential drawbacks or limitations in terms of space and time.","solution":"class WeightedQuickUnionPathCompression: def __init__(self, n): Initialize the components. self.parent = [i for i in range(n)] self.size = [1] * n def root(self, i): Find the root of the element i with path compression. while i != self.parent[i]: self.parent[i] = self.parent[self.parent[i]] # Path compression i = self.parent[i] return i def connected(self, p, q): Check if elements p and q are connected. return self.root(p) == self.root(q) def union(self, p, q): Connect elements p and q. rootP = self.root(p) rootQ = self.root(q) if rootP != rootQ: # Make smaller root point to the larger one if self.size[rootP] < self.size[rootQ]: self.parent[rootP] = rootQ self.size[rootQ] += self.size[rootP] else: self.parent[rootQ] = rootP self.size[rootP] += self.size[rootQ] # Time Complexity Analysis: # - The \`root\` operation, with path compression, has an amortized time complexity of nearly O(1). # - The \`connected\` operation involves two \`root\` operations, giving it nearly O(1) time complexity. # - The \`union\` operation involves two \`root\` operations and a union by size, leading to nearly O(1) time complexity. # Potential Drawbacks: # - Space Complexity: O(n), where n is the number of elements, due to the storage of \`parent\` and \`size\` arrays. # - The algorithm performs well for connectivity queries, but operations become costly if there are frequent element additions requiring reinitialization."},{"question":"Write a generic program to order an array with elements of different data types (strings, integers, and floats). For strings, order by the alphabetical sequence; for integers, order by the value from lowest to highest; for float values, order from the highest to the lowest. Your program must properly handle any array input that may contain a mix of these data types.","solution":"def order_mixed_array(arr): Orders an array with elements of different data types. Strings are ordered alphabetically. Integers are ordered from lowest to highest. Floats are ordered from highest to lowest. str_list = sorted([x for x in arr if isinstance(x, str)]) int_list = sorted([x for x in arr if isinstance(x, int)]) float_list = sorted([x for x in arr if isinstance(x, float)], reverse=True) return str_list + int_list + float_list"},{"question":"Can you implement the quicksort algorithm in any programming language of your choice, further explain the time and space complexity of your implementation, and describe how the algorithm can be optimized for best performance? Also, perform a comparative analysis of quicksort with other commonly used sorting algorithms under different data conditions.","solution":"def quicksort(arr): Quicksort algorithm to sort an array in ascending order. :param arr: List of elements to sort. :return: Sorted list of elements. if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right) # Explanation of time and space complexity # Time Complexity: # - Best case: O(n log n) when the pivot divides the array into two nearly equal halves. # - Average case: O(n log n) as recursion unfolds in the same way as the best case. # - Worst case: O(n^2) occurs when the pivot is the smallest or largest element repeatedly, # causing one side of the partition to be empty. # Space Complexity: # - Space complexity in the worst case is O(log n) due to the recursion stack depth. # Optimization Tip: # - One common optimization is choosing a better pivot. For example, using the median-of-three approach # where the pivot is chosen as the median of the first, middle, and last elements of the array. # - Also, using tail call elimination can help in reducing the stack depth for recursive calls. # Comparative Analysis: # - Merge Sort: O(n log n) time complexity for best, average, and worst cases but requires O(n) additional space. # - Heap Sort: O(n log n) for all cases, but its performance in practice may be worse than quicksort due to non-optimal memory access patterns. # - Insertion Sort: O(n^2) worst and average case, best case O(n) but is efficient for small or nearly sorted arrays. # - Bubble Sort: O(n^2) for worst, average, and best cases, and is generally not practical for large datasets."},{"question":"Write a Python function that removes all occurrences of a specified character from a given string and returns the modified string. Additionally, the function should count the number of words in the resulting string and return that count as part of the output. If the specified character is not found in the string, the function should return the original string and indicate that no words were removed.","solution":"def remove_char_and_count_words(s, char_to_remove): Removes all occurrences of the specified character from the given string and returns the modified string along with the word count of the resulting string. Parameters: s (str): The input string. char_to_remove (str): The character to remove from the string. Returns: tuple: A tuple containing the modified string without the specified character and the word count of the resulting string. if char_to_remove not in s: return (s, \\"No characters removed\\") # Remove all occurrences of the specified character modified_string = s.replace(char_to_remove, \\"\\") # Count the number of words in the modified string word_count = len(modified_string.split()) return (modified_string, word_count)"},{"question":"Create a 2 dimensional array with 5x5 size, each row sorted in ascending order with random numbers between 1 to 100. Also, write a function to transpose this 2D array. Here's a piece of erroneous code for reference. Identify the errors and modify as necessary.","solution":"import random def create_sorted_2d_array(rows, cols, min_val=1, max_val=100): Creates a 2D array with the specified number of rows and columns. Each row is filled with random numbers between min_val and max_val and then sorted in ascending order. array = [] for _ in range(rows): row = [random.randint(min_val, max_val) for _ in range(cols)] row.sort() array.append(row) return array def transpose_2d_array(array): Transposes the given 2D array. return list(map(list, zip(*array))) # Example creation of a 5x5 sorted 2D array sorted_2d_array = create_sorted_2d_array(5, 5)"},{"question":"Write a Python program that inputs a list of integers and finds the maximum subarray using Kadane's algorithm. Can you explain how Kadane's algorithm works and how it finds the maximum subarray? Also, modify the program to return the starting and ending indices of the maximum subarray.","solution":"def kadanes_algorithm(arr): Using Kadane's algorithm to find the maximum subarray sum along with the starting and ending indices of the maximum subarray. Parameters: arr (list): List of integers Returns: tuple: (max_sum, start_index, end_index) if not arr: return 0, -1, -1 max_sum = current_sum = arr[0] start = end = temp_start = 0 for i in range(1, len(arr)): if current_sum < 0: current_sum = arr[i] temp_start = i else: current_sum += arr[i] if current_sum > max_sum: max_sum = current_sum start = temp_start end = i return max_sum, start, end"},{"question":"Create a Python program that generates an array of 10 profiles. Each profile should be a dictionary containing the person's name, age, occupation, and a list of their hobbies. Ensure the names and occupations are unique strings, and that the age ranges between 20 and 60. The hobbies should be a list containing at least 3 hobbies selected from a predefined list of 10.","solution":"import random def generate_profiles(): names = ['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank', 'Grace', 'Heidi', 'Ivy', 'Justin'] occupations = ['Engineer', 'Doctor', 'Artist', 'Musician', 'Chef', 'Teacher', 'Lawyer', 'Carpenter', 'Plumber', 'Scientist'] hobbies_list = ['reading', 'swimming', 'painting', 'cycling', 'hiking', 'gaming', 'cooking', 'dancing', 'singing', 'writing'] profiles = [] for i in range(10): name = names[i] age = random.randint(20, 60) occupation = occupations[i] hobbies = random.sample(hobbies_list, 3) # Select 3 unique hobbies profile = { 'name': name, 'age': age, 'occupation': occupation, 'hobbies': hobbies } profiles.append(profile) return profiles"},{"question":"Write a code to find the factorial of the first 10 numbers. Instead of using a loop, try to implement it using recursion, taking care to manage the stack overflow possibility for the larger numbers.","solution":"def factorial(n): Returns the factorial of a given number n using recursion. if n == 0 or n == 1: return 1 return n * factorial(n - 1) def factorial_first_10_numbers(): Returns a list of factorials of the first 10 natural numbers. return [factorial(i) for i in range(1, 11)]"},{"question":"Generate code for printing a given 2D matrix in a clockwise spiral order","solution":"def spiral_order(matrix): Returns the elements of the given 2D matrix in clockwise spiral order. if not matrix or not matrix[0]: return [] result = [] top, bottom = 0, len(matrix) - 1 left, right = 0, len(matrix[0]) - 1 while top <= bottom and left <= right: # Traverse from left to right for j in range(left, right + 1): result.append(matrix[top][j]) top += 1 # Traverse downwards for i in range(top, bottom + 1): result.append(matrix[i][right]) right -= 1 if top <= bottom: # Traverse from right to left for j in range(right, left - 1, -1): result.append(matrix[bottom][j]) bottom -= 1 if left <= right: # Traverse upwards for i in range(bottom, top - 1, -1): result.append(matrix[i][left]) left += 1 return result"},{"question":"For a given 3D array, implement a function that takes an index and returns the corresponding element. However to make it more complex, your function should also validate the input index to check whether it is within the dimension of the array. If the index is out of range, your function should return an appropriate error message. Also, add functionality to handle exceptions in case any input is non-integer value.","solution":"def get_element(array, index): Returns the element of the 3D array at the given index if valid, else returns an appropriate error message. :param array: 3D list :param index: tuple of three integers :return: element at the specified index or error message if not isinstance(index, tuple) or len(index) != 3: return \\"Error: Index must be a tuple of three integers.\\" if not all(isinstance(i, int) for i in index): return \\"Error: All elements of the index must be integers.\\" try: element = array[index[0]][index[1]][index[2]] except IndexError: return \\"Error: Index out of range.\\" return element"},{"question":"Please write a function check_sudoku() that takes a 9x9 matrix as input and returns True if the matrix satisfies all the constraints of a Sudoku puzzle, i.e, every row, column and 3x3 subgrid contains all the digits from 1 to 9 with no repetitions. Also return the number of steps taken by your algorithm to verify the solution.","solution":"def check_sudoku(matrix): steps = 0 def is_valid_group(group): nonlocal steps digits = set() for num in group: steps += 1 if num in digits: return False if num != 0: # Ignore 0s as they represent empty cells digits.add(num) return True def is_valid_sudoku(matrix): # Check rows for row in matrix: if not is_valid_group(row): return False, steps # Check columns for col in range(9): column = [matrix[row][col] for row in range(9)] if not is_valid_group(column): return False, steps # Check 3x3 subgrids for box_row in range(0, 9, 3): for box_col in range(0, 9, 3): subgrid = [ matrix[row][col] for row in range(box_row, box_row + 3) for col in range(box_col, box_col + 3) ] if not is_valid_group(subgrid): return False, steps return True, steps is_valid, steps = is_valid_sudoku(matrix) return is_valid, steps"},{"question":"Develop a Python function that consumes a generic object and generates a corresponding output, consisting of both its attribute designations and their associated values. As an example, consider an input object {\\"name\\": \\"John\\", \\"age\\": 25, \\"cities\\": [\\"New York\\", \\"Boston\\"]}.","solution":"def get_attributes(obj): Returns a dictionary with the attribute names and their corresponding values of the given object. if not hasattr(obj, '__dict__'): raise ValueError(\\"The input is not an object with attributes\\") return obj.__dict__"},{"question":"Please write a Python fuction that takes in a list of strings as a parameter and returns the list in reverse order. However, you are not allowed to use the built-in reverse() method, the slicing technique, or any other built-in function that directly reverses a list. You should implement your own logic to reverse the list.","solution":"def reverse_list(strings): Returns a new list that is the reverse of the input list 'strings'. The function does not use any built-in methods for reversing. reversed_list = [] # Iterate over the list from the end to the beginning for i in range(len(strings) - 1, -1, -1): reversed_list.append(strings[i]) return reversed_list"},{"question":"Write a Python function that takes in a string representing a JSON response from an API and returns a list of all the keys in the JSON data. You are not allowed to use any libraries or built-in functions for JSON parsing. You must implement your own parser.","solution":"def parse_json_keys(json_string): Parses a JSON string and returns a list of all keys in the JSON data. index = 0 keys = [] def parse_object(): nonlocal index index += 1 # skip '{' while index < len(json_string): if json_string[index] == '}': index += 1 # skip '}' return elif json_string[index] in ' ntr': index += 1 else: parse_pair() if index < len(json_string) and json_string[index] == ',': index += 1 def parse_pair(): nonlocal index key = parse_string() keys.append(key) while index < len(json_string) and json_string[index] in ' ntr:': index += 1 parse_value() def parse_string(): nonlocal index if json_string[index] != '\\"': raise ValueError(\\"Expected string\\") index += 1 # skip '\\"' start = index while index < len(json_string) and json_string[index] != '\\"': index += 1 if index == len(json_string): raise ValueError(\\"Unterminated string\\") key = json_string[start:index] index += 1 # skip closing '\\"' return key def parse_value(): nonlocal index while index < len(json_string) and json_string[index] in ' ntr': index += 1 if json_string[index] == '{': parse_object() elif json_string[index] == '[': parse_array() elif json_string[index] == '\\"': parse_string() elif json_string[index] in '0123456789-': parse_number() elif json_string[index:index+4] == 'true': index += 4 elif json_string[index:index+5] == 'false': index += 5 elif json_string[index:index+4] == 'null': index += 4 else: raise ValueError(\\"Unexpected character\\") def parse_array(): nonlocal index index += 1 # skip '[' while index < len(json_string): if json_string[index] == ']': index += 1 # skip ']' return elif json_string[index] in ' ntr': index += 1 else: parse_value() if index < len(json_string) and json_string[index] == ',': index += 1 def parse_number(): nonlocal index start = index if json_string[index] == '-': index += 1 while index < len(json_string) and json_string[index] in '0123456789': index += 1 if index < len(json_string) and json_string[index] == '.': index += 1 while index < len(json_string) and json_string[index] in '0123456789': index += 1 return json_string[start:index] parse_object() return keys"},{"question":"You need to write a program for a basic calculator that takes two numbers and an operator as inputs, and outputs the result of the operation.","solution":"def calculator(a, b, operator): Performs basic arithmetic operations. Parameters: a (float): The first number. b (float): The second number. operator (str): The operator, which can be '+', '-', '*', '/'. Returns: float: The result of the operation. Raises: ValueError: If an invalid operator is provided. ZeroDivisionError: If division by zero is attempted. if operator == '+': return a + b elif operator == '-': return a - b elif operator == '*': return a * b elif operator == '/': if b == 0: raise ZeroDivisionError(\\"Division by zero is not allowed.\\") return a / b else: raise ValueError(\\"Invalid operator.\\")"},{"question":"I have a Python dictionary and I want to rearrange it in ascending order based on the values. How can I write a function that achieves this?","solution":"def sort_dict_by_value(input_dict): Returns a dictionary sorted by its values in ascending order. return dict(sorted(input_dict.items(), key=lambda item: item[1]))"},{"question":"Revise the existing Python program for calculating the roots of a quadratic equation to handle complex roots. The program should prompt the user for the values of a, b, and c, and then call a function that solves the equation using the quadratic formula. If the roots are complex, the program should print a message indicating that and display the complex roots in the form a + bi. The revised program should also include error handling for cases where the user inputs non-numeric values for a, b, or c.","solution":"import cmath def solve_quadratic(a, b, c): Solves the quadratic equation ax^2 + bx + c = 0. Args: a (float): Coefficient of x^2 b (float): Coefficient of x c (float): Constant term Returns: tuple: A tuple containing both roots (could be real or complex) discriminant = b**2 - 4*a*c root1 = (-b + cmath.sqrt(discriminant)) / (2*a) root2 = (-b - cmath.sqrt(discriminant)) / (2*a) return (root1, root2) def parse_input(value): Parses the input value to float. If parsing fails, raises a ValueError. Args: value (str): The input value to parse Returns: float: The parsed float value try: return float(value) except ValueError: raise ValueError(f\\"Invalid input '{value}': Please enter a numeric value.\\") def quadratic_solver_interface(a_input, b_input, c_input): Accepts input values as strings, parses them, solves the quadratic equation and returns the roots. Args: a_input (str): Input string for coefficient a b_input (str): Input string for coefficient b c_input (str): Input string for coefficient c Returns: tuple: A tuple containing both roots (could be real or complex) a = parse_input(a_input) b = parse_input(b_input) c = parse_input(c_input) return solve_quadratic(a, b, c)"},{"question":"Create a Python script to reverse the order of words in a sentence.","solution":"def reverse_words(sentence): Reverses the order of words in a sentence. Parameters: sentence (str): The sentence to be reversed. Returns: str: The sentence with the order of words reversed. words = sentence.split() reversed_words = words[::-1] return ' '.join(reversed_words)"},{"question":"Write a Python script to convert a list of positive integers into a dictionary where the keys represent the original numbers converted to binary strings with an 'f' prefix and suffix, and the values represent the original numbers in hexadecimal format. Implement this solution without using the built-in bin() and hex() functions.","solution":"def to_binary_string(n): Returns binary string of a positive integer n without using bin(). binary_num = \\"\\" while n > 0: binary_num = str(n % 2) + binary_num n = n // 2 return \\"f\\" + binary_num + \\"f\\" def to_hexadecimal_string(n): Returns hexadecimal string of a positive integer n without using hex(). hex_chars = \\"0123456789abcdef\\" hex_num = \\"\\" while n > 0: hex_num = hex_chars[n % 16] + hex_num n = n // 16 return hex_num if hex_num else \\"0\\" def list_to_dict(int_list): Converts a list of positive integers to a dictionary with custom binary strings as keys and hexadecimal strings as values. result_dict = {} for num in int_list: bin_key = to_binary_string(num) hex_value = to_hexadecimal_string(num) result_dict[bin_key] = hex_value return result_dict"},{"question":"Write a Python program to separate odd and even numbers in a list.","solution":"def separate_odd_even(numbers): Separates odd and even numbers from a given list. Parameters: numbers (list of int): The list of integers to separate. Returns: tuple: A tuple containing two lists - first with all odd numbers, second with all even numbers. odd_numbers = [num for num in numbers if num % 2 != 0] even_numbers = [num for num in numbers if num % 2 == 0] return odd_numbers, even_numbers"},{"question":"Can you write a Python program to check if a string can form a palindrome after rearranging its characters?","solution":"from collections import Counter def can_form_palindrome(s): Checks if the given string can be rearranged to form a palindrome. Parameters: s (str): The input string Returns: bool: True if the string can be rearranged to form a palindrome, False otherwise # Count the occurrences of each character char_count = Counter(s) # Count the number of characters that appear an odd number of times odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can form a palindrome if it has at most one character with an odd count return odd_count <= 1"},{"question":"Write a function that takes a list of tuples as input, finds the maximum element in each tuple, and returns a new list with these maximum elements, but arranged in decreasing order. To make the task more challenging, you should complete this task without using any built-in sorting functions or any external libraries.","solution":"def find_max_elements_and_sort(tuples_list): Takes a list of tuples as input, finds the maximum element in each tuple, and returns a new list with these maximum elements, arranged in decreasing order. max_elements = [max(tup) for tup in tuples_list] # Implementing a simple bubble sort to sort in descending order n = len(max_elements) for i in range(n): for j in range(0, n-i-1): if max_elements[j] < max_elements[j+1]: max_elements[j], max_elements[j+1] = max_elements[j+1], max_elements[j] return max_elements"},{"question":"Design two Python functions. The first function should accept a list of dictionaries and returns a list of dictionaries with distinct values based on a provided key. The second function should accept a list of dictionaries, a specific key, and a value. It should return a new list of dictionaries from the original list that does not contain the specified key-value pair.","solution":"def remove_duplicates(dicts, key): Removes duplicates from a list of dictionaries based on a provided key. :param dicts: List of dictionaries :param key: The key to check for duplicates :return: List of dictionaries with distinct values based on the provided key. seen = set() result = [] for d in dicts: value = d.get(key) if value not in seen: seen.add(value) result.append(d) return result def filter_dicts_by_key_value(dicts, key, value): Returns a new list of dictionaries from the original list that does not contain the specified key-value pair. :param dicts: List of dictionaries :param key: Key to check for the value :param value: Value to exclude dictionaries with this key-value pair :return: New list of dictionaries excluding specified key-value pair. return [d for d in dicts if d.get(key) != value]"},{"question":"Create a python function that accepts a dictionary and returns a string that contains the keys and values of that dictionary.","solution":"def dict_to_string(d): Returns a string that contains the keys and values of the dictionary \`d\`. return \\", \\".join(f\\"{key}: {value}\\" for key, value in d.items())"},{"question":"How can I create an algorithm to reverse the characters of a string in Python without using built-in functions? And how can I measure its time complexity?","solution":"def reverse_string(s): Reverses the characters of the input string s without using built-in functions. reversed_s = \\"\\" for char in s: reversed_s = char + reversed_s return reversed_s def measure_time_complexity(): Returns the time complexity of the reverse_string algorithm. # The algorithm uses a loop that iterates over each character of the string once. # For each iteration, the current character is prepended to the new string, which is an O(n) operation in itself # since strings in Python are immutable and require copying for each prepend operation. # Hence the overall time complexity is O(n^2). return \\"O(n^2)\\""},{"question":"Write a code to clone a list along with its nested elements. Consider a list that might contain nested lists as well.","solution":"import copy def clone_list(lst): Returns a deep copy of the given list, ensuring that nested lists are also copied. Parameters: lst (list): The list to be cloned, it may contain nested lists. Returns: list: A deep copy of the input list. return copy.deepcopy(lst)"},{"question":"In the following code, modify the function to take a list of integers as an argument. The function should convert each integer to its corresponding binary representation and return a list of strings containing the binary representations. Additionally, the function should now only accept lists with a maximum length of 100 integers, and each integer should be between 0 and 1000 (inclusive).","solution":"def convert_to_binary(int_list): Converts a list of integers to their binary representations. Parameters: int_list (list): A list of integers between 0 and 1000, inclusive, and the length of the list must be at most 100. Returns: list: A list of binary string representations of the input integers. Raises: ValueError: If any integer is not between 0 and 1000, or if the length of the input list exceeds 100. if len(int_list) > 100: raise ValueError(\\"List length exceeds the maximum allowed length of 100.\\") for i in int_list: if not (0 <= i <= 1000): raise ValueError(f\\"Integer value {i} is out of allowed range [0, 1000].\\") return [bin(i)[2:] for i in int_list]"},{"question":"Write a code for the Diffie–Hellman key exchange with a large prime number and a primitive root, ensuring that the private keys are securely generated and that the public keys are properly calculated. Additionally, implement a secure method for exchanging the public keys between the two parties without allowing a man-in-the-middle attack. The code should also include a mechanism to prevent brute-force attacks by imposing a time delay after a certain number of failed attempts to retrieve the shared secret key.","solution":"import random import hashlib import time import secrets # Function to perform modular exponentiation def mod_exp(base, exponent, modulus): return pow(base, exponent, modulus) # Generate a large prime number and its primitive root def generate_large_prime_and_root(): # For simplicity, using well-known 2048-bit prime and a generator prime = 0xprimitive_root = 2 return prime, primitive_root # Generate private key def generate_private_key(modulus_len=256): return secrets.randbelow(2**modulus_len) # Calculate public key def calculate_public_key(private_key, primitive_root, prime): return mod_exp(primitive_root, private_key, prime) # Calculate shared secret def calculate_shared_secret(private_key, recipient_public_key, prime): return mod_exp(recipient_public_key, private_key, prime) # Hash function for key derivation def derive_key(shared_secret): return hashlib.sha256(str(shared_secret).encode()).hexdigest() # Simulating secure public key exchange def secure_key_exchange(public_key): # This is a mock representation. In real scenarios, use secure channels like TLS return public_key # Mechanism to prevent brute-force attacks def rate_limit(attempts, delay=1): if attempts > 5: time.sleep(delay) # Main function to simulate Diffie-Hellman exchange def diffie_hellman_exchange(): prime, primitive_root = generate_large_prime_and_root() alice_private_key = generate_private_key() alice_public_key = calculate_public_key(alice_private_key, primitive_root, prime) bob_private_key = generate_private_key() bob_public_key = calculate_public_key(bob_private_key, primitive_root, prime) # Simulate exchange received_by_bob = secure_key_exchange(alice_public_key) received_by_alice = secure_key_exchange(bob_public_key) alice_shared_secret = calculate_shared_secret(alice_private_key, received_by_alice, prime) bob_shared_secret = calculate_shared_secret(bob_private_key, received_by_bob, prime) assert alice_shared_secret == bob_shared_secret, \\"Shared secrets do not match!\\" shared_key = derive_key(alice_shared_secret) return shared_key # Run Diffie-Hellman key exchange shared_key = diffie_hellman_exchange() print(f\\"Shared key: {shared_key}\\")"},{"question":"Create a function that receives three input parameters, a string, a list of characters, and a number. The function should return true only if each character in the list appears in the string exactly the specified number of times. Additionally, implement error handling for situations where a character in the list does not exist in the string.","solution":"def check_character_count(s, char_list, n): Check if each character in char_list appears in string s exactly n times. Parameters: s (str): The string in which to check the characters. char_list (list): The list of characters to check in the string. n (int): The number of times each character should appear in the string. Returns: bool: True if each character in char_list appears n times in the string, otherwise False. for char in char_list: if char not in s: raise ValueError(f\\"The character '{char}' does not exist in the string.\\") if s.count(char) != n: return False return True"},{"question":"Given a set of strings, find all possible anagrams of those strings. The anagrams should contain all the letters of the given strings. Each letter should be used exactly once. The output should not contain any duplicates. Implement an algorithm that efficiently solves this problem.","solution":"from itertools import permutations def find_all_anagrams(strings): Given a set of strings, find all possible anagrams of those strings. Each letter should be used exactly once. :param strings: A list of strings :return: A list of anagrams anagrams = set() for s in strings: # Generate all permutations of the string s perms = permutations(s) for p in perms: # Add the joined permutation to the set to avoid duplicates anagrams.add(''.join(p)) return list(anagrams)"},{"question":"Create a function which takes a string and returns all the unique words in it, removing any duplicates. The function should ignore case sensitivity. Additionally, the function should return the unique words in lexicographically sorted order. You are not allowed to use any built-in sorting functions. The function should have a time complexity of O(n log n) and a space complexity of O(n).","solution":"def unique_words_sorted(text): Returns a list of unique words from the input text, sorted in lexicographical order. The function ignores case sensitivity. def merge_sort(arr): if len(arr) > 1: mid = len(arr) // 2 left_half = arr[:mid] right_half = arr[mid:] merge_sort(left_half) merge_sort(right_half) i = j = k = 0 while i < len(left_half) and j < len(right_half): if left_half[i] < right_half[j]: arr[k] = left_half[i] i += 1 else: arr[k] = right_half[j] j += 1 k += 1 while i < len(left_half): arr[k] = left_half[i] i += 1 k += 1 while j < len(right_half): arr[k] = right_half[j] j += 1 k += 1 # Convert all words to lower case and remove duplicates using a set words = set(text.lower().split()) words_list = list(words) # Sort the list using merge sort merge_sort(words_list) return words_list"},{"question":"Update the program to calculate the average of a list of numbers inputted by the user. Additionally, implement a feature to find the minimum and maximum numbers in the list. Modify the code to handle the case when the user inputs an empty list.","solution":"def calculate_statistics(numbers): Calculate the average, minimum, and maximum of a list of numbers. :param numbers: List of numbers. :return: A tuple containing the average, minimum, and maximum. :raises ValueError: If the list is empty. if not numbers: raise ValueError(\\"The list is empty\\") average = sum(numbers) / len(numbers) minimum = min(numbers) maximum = max(numbers) return average, minimum, maximum"},{"question":"Given a set of numbers, create a list in Python that contains only the even numbers from the given set. However, you are not allowed to use any built-in Python functions or libraries such as filter(), list comprehension, or any form of iteration (for loop, while loop, etc.). You can only use basic programming constructs like if statements and functions. Additionally, you are not allowed to use the modulo operator (%) or any other arithmetic operation to check if a number is even. You must come up with a logical solution that uses bitwise operations or any other non-standard method to determine if a number is even.","solution":"def is_even(number): Determines if a number is even using bitwise operations. # Check the least significant bit using bitwise AND with 1. return (number & 1) == 0 def filter_even_numbers(numbers): Filters even numbers from the input list using only logical constructs. def recursive_filter(index, even_nums): if index == len(numbers): return even_nums if is_even(numbers[index]): even_nums.append(numbers[index]) return recursive_filter(index + 1, even_nums) return recursive_filter(0, [])"},{"question":"Write a program that asks the user to input a positive integer, then counts and prints the number of digits in the number using a for loop. Make sure to include appropriate error handling for non-integer and non-positive inputs.","solution":"def count_digits(): This function prompts the user to input a positive integer, then counts and prints the number of digits in the number using a for loop. The function includes error handling for non-integer and non-positive inputs. try: user_input = input(\\"Please enter a positive integer: \\") number = int(user_input) if number <= 0: raise ValueError(\\"The number is not positive\\") except ValueError as e: print(f\\"Invalid input: {e}\\") return digit_count = 0 for _ in str(number): digit_count += 1 print(f\\"The number of digits in {number} is {digit_count}\\")"},{"question":"Given a student's grade, write a function in Python to determine whether the student has passed or failed. The passing grade is 50. Additionally, if the student's grade is above 80, the function should return \\"Distinction\\".","solution":"def determine_grade_status(grade): Determines the grade status of a student. Parameters: grade (int): The student's grade. Returns: str: \\"Pass\\" if the grade is 50 or more, \\"Fail\\" if less than 50, \\"Distinction\\" if more than 80. if grade > 80: return \\"Distinction\\" elif grade >= 50: return \\"Pass\\" else: return \\"Fail\\""},{"question":"Given are three programming functions, \`f1\`, \`f2\`, and \`f3\`. \`f1\` accepts four parameters \`x\`, \`y\`, \`z\` and \`w\`. \`f2\` and \`f3\`, on the other hand, accept only two parameters each, specifically \`x\` and \`y\` for \`f2\` and \`z\` and \`w\` for \`f3\`. The task is to write a function that calculates the average of the outputs of \`f1\`, \`f2\` and \`f3\` given the same parameters.","solution":"def f1(x, y, z, w): # Sample implementation return x + y + z + w def f2(x, y): # Sample implementation return x * y def f3(z, w): # Sample implementation return z - w def average_functions(x, y, z, w): Returns the average of f1, f2, and f3 given the same parameters. output_f1 = f1(x, y, z, w) output_f2 = f2(x, y) output_f3 = f3(z, w) average = (output_f1 + output_f2 + output_f3) / 3 return average"},{"question":"Given an array arr of integers and an integer windowSize, write a function to find the maximum sum of any contiguous subarray of size windowSize.","solution":"def max_sum_subarray(arr, windowSize): Returns the maximum sum of any contiguous subarray of size \`windowSize\`. :param arr: List of integers :param windowSize: Size of the subarray :return: Maximum sum of any contiguous subarray of size \`windowSize\` if not arr or windowSize <= 0 or windowSize > len(arr): return 0 # Calculate the sum of the first window max_sum = current_sum = sum(arr[:windowSize]) # Iterate over the array to find the maximum sum of the windowSize for i in range(windowSize, len(arr)): current_sum = current_sum - arr[i - windowSize] + arr[i] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Create a function called \\"copy_and_reverse\\" that takes in a list as a parameter. The function should create a copy of the list, reverse the order of the elements in the copy, and return the reversed copy.","solution":"def copy_and_reverse(lst): Takes a list and returns a reversed copy of the list. Parameters: lst (list): The list to be copied and reversed. Returns: list: A reversed copy of the input list. return lst[::-1]"},{"question":"Write a python function, named \\"find_decreasing_numbers\\", to generate a list of all decreasing sequences of n-length from a given list of integers. The given list does not have duplicates. When called with [9, 8, 8, 7, 6, 5, 4] as input and a given n, every element in the output list should be a decreasing n-length sequence. Additionally, the function should not use any built-in itertools combinations or any other library functions, and the test will run multiple cases to ensure the correctness of the implementation. The implementation will be tested for both valid and erroneous cases, including empty lists and lists with lengths greater than 50.","solution":"def find_decreasing_numbers(lst, n): Generate a list of all decreasing sequences of n-length from a given list of integers. Parameters: lst (list of int): List of integers to generate sequences from. n (int): The length of the decreasing sequences to generate. Returns: list of list of int: A list of all decreasing sequences of length n. if n == 0: return [[]] if len(lst) < n: return [] result = [] for i in range(len(lst)): current = lst[i] for subsequence in find_decreasing_numbers(lst[i + 1:], n - 1): result.append([current] + subsequence) return result"},{"question":"Given the following tree, write a Python function to calculate the sum of values of all descendants for each node. For the root node, return the sum of values for the entire tree.","solution":"class TreeNode: def __init__(self, value=0, children=None): self.value = value self.children = children if children is not None else [] def sum_of_descendants(node): Returns a dictionary where the keys are the node references and the values are the sum of their respective descendants' values. if node is None: return {} result = {} def helper(n): if not n.children: result[n] = 0 return n.value total = 0 for child in n.children: total += helper(child) result[n] = total return total + n.value helper(node) return result # Example usage: # root = TreeNode(10, [TreeNode(2), TreeNode(3, [TreeNode(1), TreeNode(2)]), TreeNode(4)]) # result = sum_of_descendants(root) # for node, sum_val in result.items(): # print(f\\"Node with value {node.value} has descendants sum: {sum_val}\\")"},{"question":"Devise a computational function for the purpose of generating the Fibonacci sequence up to the 'n'th term where 'n' is within the constraints of positive integers including 0. Additionally, implement a memoization technique to optimize the function for larger values of 'n'. Finally, create a wrapper function that accepts an input in decimal format and rounds it to the nearest 'n' before feeding it into your Fibonacci function. As a part of your solution, debug the following erroneous piece of Python code,","solution":"def fibonacci(n, memo={}): Returns the 'n'th term in the Fibonacci sequence using memoization. if n in memo: return memo[n] if n == 0: return 0 if n == 1: return 1 memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n] def get_fibonacci_number(n_float): Rounds the input float to the nearest integer and returns the 'n'th term in the Fibonacci sequence. n = round(n_float) return fibonacci(n)"},{"question":"Develop a Python function that returns the first two characters of a string, but with the constraint that the function should have a time complexity of O(n) and must not use any built-in string manipulation functions or methods. Additionally, the function should be able to handle strings of any length, including very large strings.","solution":"def first_two_chars(s): Returns the first two characters of the input string. Args: s (str): The input string Returns: str: The first two characters of the input string or the entire string if its length is less than 2. result = \\"\\" count = 0 for char in s: if count >= 2: break result += char count += 1 return result"},{"question":"Write a code snippet that computes the sum of prime numbers from 1 to the given number 'n'. Additionally, provide the functionality to check if this sum is a palindrome. Here's a piece of erroneous code for reference. Identify the errors and correct them in your solution.","solution":"def is_prime(num): Returns True if num is a prime number, False otherwise. if num <= 1: return False for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True def sum_primes(n): Returns the sum of all prime numbers from 1 to n. total_sum = 0 for i in range(2, n + 1): if is_prime(i): total_sum += i return total_sum def is_palindrome(num): Returns True if num is a palindrome, False otherwise. return str(num) == str(num)[::-1] def sum_primes_and_check_palindrome(n): Returns a tuple with the sum of prime numbers up to n and a boolean indicating whether this sum is a palindrome. sum_prime = sum_primes(n) return sum_prime, is_palindrome(sum_prime)"},{"question":"Plot the function y = 2x^3 - 5x^2 + 3x - 1 in Python using matplotlib. Add labels for the x and y axes, and a title for the graph. Make sure the graph includes a grid and set the x-axis to have a range from -2 to 3. Moreover, add markers to the points where the function intersects the x-axis, y-axis, and the point (1, -1).","solution":"import matplotlib.pyplot as plt import numpy as np def plot_function(): x = np.linspace(-2, 3, 400) y = 2 * x**3 - 5 * x**2 + 3 * x - 1 # Intersect points intersects = [(0, -1), (1, -1)] # Create the plot plt.figure(figsize=(8, 6)) plt.plot(x, y, label='y = 2x^3 - 5x^2 + 3x - 1') # Adding intersect points to the plot for (ix, iy) in intersects: plt.plot(ix, iy, 'ro') # red circle markers # Other plot properties plt.axhline(0, color='black',linewidth=0.5) plt.axvline(0, color='black',linewidth=0.5) plt.grid(color = 'gray', linestyle = '--', linewidth = 0.5) # Adding labels and title plt.xlabel('x-axis') plt.ylabel('y-axis') plt.title('Plot of the function y = 2x^3 - 5x^2 + 3x - 1') plt.legend() # Show the plot with set x-range plt.xlim([-2, 3]) plt.show()"},{"question":"Write a Python function to compute the maximum possible sum of non-empty subarrays with at most k elements.","solution":"def max_sum_subarray_k_elements(arr, k): This function computes the maximum possible sum of non-empty subarrays with at most k elements. Parameters: arr (list): The input array of integers. k (int): The maximum number of elements allowed in subarrays. Returns: int: The maximum possible sum of subarrays with at most k elements. if not arr or k <= 0: return 0 n = len(arr) max_sum = float('-inf') for i in range(n): current_sum = 0 for j in range(i, min(i + k, n)): current_sum += arr[j] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"In the Python programming language, what is the method to determine the length of a list, specifically when dealing with multi-dimensional lists?","solution":"def length_of_list(lst): Returns the length of a list. For a multi-dimensional list, it returns the length of the outermost list. Args: lst (list): List whose length needs to be determined. Returns: int: Length of the list. return len(lst)"},{"question":"Edit the given Python program to print the product of two given numbers. However, you are not allowed to use the multiplication operator (*) or any built-in Python functions for multiplication.","solution":"def multiply(a, b): Returns the product of a and b without using the multiplication operator (*) or any built-in Python functions for multiplication. result = 0 positive = b > 0 # check the sign of b b = abs(b) for _ in range(b): result += a return result if positive else -result"},{"question":"Please write a Python function utilizing the requests and Beautiful Soup libraries, that extracts data from a given URL, checks the status and structure of the webpage, then retrieves and returns the top 5 hyperlinks found on the page in an organized list format.","solution":"import requests from bs4 import BeautifulSoup def get_top_hyperlinks(url): Fetches the given URL, parses the page and returns the top 5 hyperlinks found on the page. Args: url (str): The URL of the webpage to extract hyperlinks from. Returns: list of str: A list containing the top 5 hyperlinks. response = requests.get(url) # Check if the request was successful if response.status_code != 200: return [] # Parse the content of the response soup = BeautifulSoup(response.content, 'html.parser') # Find all anchor tags anchors = soup.find_all('a', href=True) # Extract the href attributes and return the first 5 hyperlinks = [a['href'] for a in anchors[:5]] return hyperlinks"},{"question":"Write a program that takes in a comma-separated list of strings and outputs a dictionary with each unique string as a key and the number of occurrences of that string as the value. The program should ignore case sensitivity. The strings can contain spaces, punctuation, and special characters. The output dictionary should be sorted in descending order based on the number of occurrences of each string. If two or more strings have the same number of occurrences, they should be sorted alphabetically.","solution":"def count_occurrences(input_string): Takes a comma-separated list of strings and returns a dictionary with each unique string as a key and the number of occurrences of that string as the value. The comparison is case insensitive. The dictionary is sorted in descending order based on the number of occurrences. If two strings have the same number of occurrences, they are sorted alphabetically. from collections import Counter # Split the input string into a list of strings and strip whitespace strings = [s.strip().lower() for s in input_string.split(',')] # Use Counter to count the occurrences of each string counts = Counter(strings) # Sort the dictionary sorted_counts = dict(sorted(counts.items(), key=lambda item: (-item[1], item[0]))) return sorted_counts"},{"question":"Reverse the order of the values in the input list using Python. The list may contain duplicate elements. The solution should have a time complexity of O(n), where n is the length of the list. The solution should not use any built-in functions or methods that directly reverse the list, and should also not use any additional data structures or recursion. The input list may be modified in-place.","solution":"def reverse_list_in_place(lst): Reverses the order of the values in the input list in-place. left, right = 0, len(lst) - 1 while left < right: lst[left], lst[right] = lst[right], lst[left] left += 1 right -= 1 return lst"},{"question":"Given a dictionary, write a Python function to print all the key-value pairs in the dictionary in alphabetical order of the keys. Additionally, the function should ignore any key-value pair where the key is a string that starts with a vowel.","solution":"def print_sorted_dict(dictionary): Prints all the key-value pairs in the dictionary in alphabetical order of the keys. Ignores any key-value pair where the key is a string that starts with a vowel. vowels = \\"AEIOUaeiou\\" sorted_keys = sorted(key for key in dictionary if not key[0] in vowels) for key in sorted_keys: print(f\\"{key}: {dictionary[key]}\\")"},{"question":"Write a code that takes a list of integers, and returns a list of all elements sorted in descending order.","solution":"def sort_descending(lst): Returns a list of elements sorted in descending order. Parameters: lst (list): A list of integers. Returns: list: A list sorted in descending order. return sorted(lst, reverse=True)"},{"question":"Create a function that takes a list as an input and returns a reversed list. However, you are not allowed to use any built-in functions or methods that directly reverse a list (e.g., reverse(), slicing with negative steps, etc.). You can only use basic operations and control flow statements.","solution":"def reverse_list(lst): Returns the reversed list without using built-in list reversing methods. reversed_lst = [] length = len(lst) for i in range(length - 1, -1, -1): reversed_lst.append(lst[i]) return reversed_lst"},{"question":"Python expression of XNOR gate using 'and' 'or' and 'not' only","solution":"def xnor(a, b): Returns the XNOR of a and b using 'and', 'or', and 'not' only. return (a and b) or (not a and not b)"},{"question":"Write a function in Python that creates a deep copy of a given list. Also, ensure your function can handle lists that contain nested lists, dictionaries, and other complex data structures.","solution":"import copy def deep_copy_list(original_list): Creates a deep copy of the given list, ensuring nested lists and dictionaries are also copied. return copy.deepcopy(original_list)"},{"question":"Keep the existing code but add a requirement that the program must now also check for prime numbers between 0 and 1000. The program should output a list of all prime numbers found in this range.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def find_primes_up_to(limit): Returns a list of all prime numbers up to the given limit. return [n for n in range(limit + 1) if is_prime(n)] def primes_between_0_and_1000(): Returns a list of all prime numbers between 0 and 1000. return find_primes_up_to(1000)"},{"question":"Read the XML string below and create a Python dictionary that contains the data in the XML. Additionally, implement a function that validates the dictionary to ensure that all keys are unique, all values are of the correct data type (i.e., name and salary should be string and integer respectively), and that the dictionary is not empty. Raise an exception with a meaningful error message if any of these conditions are not met.","solution":"import xml.etree.ElementTree as ET def xml_to_dict(xml_string): Parse the XML string to a dictionary. root = ET.fromstring(xml_string) data_dict = {} for child in root: if child.tag in data_dict: raise ValueError(f\\"Duplicate key found: {child.tag}\\") if child.tag == 'salary': try: data_dict[child.tag] = int(child.text) except ValueError: raise ValueError(f\\"Invalid type for {child.tag}: expected integer.\\") else: data_dict[child.tag] = child.text return data_dict def validate_dictionary(data_dict): Validate the dictionary to ensure all keys are unique, all values are of the correct data types, and the dictionary is not empty. if not data_dict: raise ValueError(\\"Dictionary is empty.\\") expected_types = { \\"name\\": str, \\"salary\\": int } for key, value in data_dict.items(): if key not in expected_types: raise ValueError(f\\"Unexpected key found: {key}\\") if not isinstance(value, expected_types[key]): raise ValueError(f\\"Invalid type for {key}: expected {expected_types[key].__name__}, got {type(value).__name__}\\") return True"},{"question":"Please write a Python program that takes a list of integers as input and returns a new list that contains the product of each pair of adjacent elements from the original list.","solution":"def product_of_adjacent_pairs(lst): Takes a list of integers and returns a new list containing the product of each pair of adjacent elements from the original list. if len(lst) < 2: return [] # If the list has fewer than two elements, return an empty list. return [lst[i] * lst[i + 1] for i in range(len(lst) - 1)]"},{"question":"How can I write a Python program that takes an input of numbers and outputs a new list where each element is the product of all numbers except for the number at the same position in the input list? Also, is there a way to ensure that this operation can be performed on very large lists efficiently? For instance, if the input list is [1, 2, 3, 4], the desired output is [24, 12, 8, 6]. Can you provide a code snippet to achieve this?","solution":"def product_except_self(nums): Returns a list of products where each element is the product of all elements in the original list except for the one at the same position. :param nums: List of integers :return: List of integers n = len(nums) if n == 0: return [] # Create two lists to hold the prefix and suffix products prefix = [1] * n suffix = [1] * n result = [0] * n # Calculate prefix products for i in range(1, n): prefix[i] = prefix[i - 1] * nums[i - 1] # Calculate suffix products for i in range(n - 2, -1, -1): suffix[i] = suffix[i + 1] * nums[i + 1] # Calculate result by multiplying prefix and suffix products for i in range(n): result[i] = prefix[i] * suffix[i] return result"},{"question":"Create a regex pattern to validate whether a given string is an acceptable email address according to standard email specifications. Additionally, build a function that checks if the given email address's domain exists and is reachable. You should include scenarios where the domain server may not respond quickly and manage these scenarios appropriately without crashing or hanging the application. Remember to consider performance and resource management while creating your solution.","solution":"import re import socket def is_valid_email(email): Validates the email address using regex pattern. pattern = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+' return re.match(pattern, email) is not None def is_domain_reachable(domain): Checks if the given domain is reachable. try: socket.setdefaulttimeout(5) socket.gethostbyname(domain) return True except socket.gaierror: return False def check_email(email): Validates the email address and checks if the domain is reachable. if not is_valid_email(email): return False domain = email.split('@')[1] return is_domain_reachable(domain)"},{"question":"Please write a Python code to check if a given 2D array has any prime numbers. If a prime number is found, print its value along with its row and column indices. You are given the number of rows and columns in the 2D array as inputs. You should implement this logic as a function.","solution":"def is_prime(num): Helper function to check if the given number is prime. if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def find_primes_in_2d_array(rows, cols, array): Finds and prints the prime numbers along with their positions in the given 2D array. Parameters: - rows: int, number of rows in the 2D array. - cols: int, number of columns in the 2D array. - array: list of lists, the 2D array in which to find prime numbers. for i in range(rows): for j in range(cols): if is_prime(array[i][j]): print(f\\"Prime number {array[i][j]} found at ({i},{j})\\")"},{"question":"Create a program that searches a given string for a word and prints out its position. However, you are not allowed to use any built-in string search or matching functions. Instead, you need to implement your own algorithm to find the word.","solution":"def find_word_position(text, word): Searches for word in text and returns the starting position of the word. If the word is not found, returns -1. if not text or not word: return -1 text_len = len(text) word_len = len(word) # Implementing a custom search algorithm for i in range(text_len - word_len + 1): # Check if word matches using a custom comparison match_found = True for j in range(word_len): if text[i + j] != word[j]: match_found = False break if match_found: return i # Return the starting position return -1 # Word not found"},{"question":"Given a list of strings, write Python code to remove all duplicates from the list while maintaining the original order of the elements.","solution":"def remove_duplicates(original_list): Removes duplicates from the original_list while maintaining the original order seen = set() result = [] for item in original_list: if item not in seen: result.append(item) seen.add(item) return result"},{"question":"Develop a script using the Python programming language that not only detects a particular sequence of characters within a designated string, but also finds the starting and ending positions of the sequence. Furthermore, make your script robust enough to find all occurrences of the sequence if it appears more than once in the string.","solution":"def find_occurrences(string, sequence): Find all occurrences of a sequence within a string. Args: string (str): The string to search in. sequence (str): The sequence to search for. Returns: list of tuple: A list of tuples where each tuple contains the starting and ending positions (inclusive) of an occurrence of the sequence. occurrences = [] start = 0 while True: start = string.find(sequence, start) if start == -1: break end = start + len(sequence) - 1 occurrences.append((start, end)) start += 1 # Move past the last found sequence to find overlapping sequences return occurrences"},{"question":"Design an algorithm for sorting data in ascending order using selection sort.","solution":"def selection_sort(arr): Sorts an array in ascending order using selection sort algorithm. n = len(arr) for i in range(n): # Assume the minimum is the first element min_idx = i # Iterate over the unsorted subarray for j in range(i + 1, n): if arr[j] < arr[min_idx]: min_idx = j # Swap the found minimum element with the first element in the subarray arr[i], arr[min_idx] = arr[min_idx], arr[i] return arr"},{"question":"How do you create a function in Python to add a suffix to a given word and return the new word? You should also ensure that the input word starts with a vowel, contains at least 3 characters and does not already end with the given suffix. Additionally, include a check function to validate the implementation with different words and suffixes.","solution":"def add_suffix(word, suffix): Adds the given suffix to the word if it meets the following criteria: - The word must start with a vowel. - The word must contain at least 3 characters. - The word must not already end with the given suffix. Parameters: word (str): The input word. suffix (str): The suffix to be added. Returns: str: The new word with the suffix added if criteria are met, otherwise return the original word. vowels = \\"aeiouAEIOU\\" if len(word) >= 3 and word[0] in vowels and not word.endswith(suffix): return word + suffix return word def validate(word, suffix): Validates the implementation of \`add_suffix\` with different words and suffixes. Parameters: word (str): The input word. suffix (str): The suffix to be added. Returns: str: The result of \`add_suffix\` function. return add_suffix(word, suffix)"},{"question":"Given a list of numbers, write a function in Python to arrange the list in ascending order. You can't use any built-in sorting methods or libraries.","solution":"def bubble_sort(arr): Sorts a list of numbers in ascending order using the bubble sort algorithm. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Write a Python code that checks if a given string is a palindrome ignoring case and non-alphabetic characters.","solution":"def is_palindrome(s): Checks if a given string is a palindrome ignoring case and non-alphabetic characters. :param s: Input string :return: True if the string is a palindrome, False otherwise # Filter out non-alphabetic characters and convert to lowercase filtered_chars = [char.lower() for char in s if char.isalpha()] # Check if the filtered string is the same forwards and backwards return filtered_chars == filtered_chars[::-1]"},{"question":"Design a Python program using a 'while' loop to compute the product of the first 10 prime numbers. Additionally, include logic to identify if a number is prime within this program.","solution":"def is_prime(n): Check if a given number n is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while (i * i) <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def product_of_first_10_primes(): Compute the product of the first 10 prime numbers. product = 1 count = 0 num = 2 # the first prime number while count < 10: if is_prime(num): product *= num count += 1 num += 1 return product"},{"question":"Write a python function that takes in a string and returns a list of all its substrings (including individual characters)","solution":"def all_substrings(s): Returns a list of all possible substrings of the given string s, including individual characters. substrings = [] length = len(s) for i in range(length): for j in range(i + 1, length + 1): substrings.append(s[i:j]) return substrings"},{"question":"Formulate a Python software script that generates a hierarchical dictionary structure, given three arrays each of varying length. The first array elements should form the primary keys, the second array elements should act as corresponding secondary keys, and the third array elements should serve as the respective values. Your script should handle potential errors gracefully such as, when these lists do not align in length.","solution":"def generate_hierarchical_dict(prim_keys, sec_keys, values): Generate a hierarchical dictionary structure given three arrays: prim_keys: List of primary keys. sec_keys: List of secondary keys. values: List of values corresponding to each (primary key, secondary key) pair. Returns: A dictionary with format {primary_key: {secondary_key: value}} if len(prim_keys) != len(sec_keys) or len(sec_keys) != len(values): raise ValueError(\\"All input lists must have the same length\\") hierarchical_dict = {} for p_key, s_key, val in zip(prim_keys, sec_keys, values): if p_key not in hierarchical_dict: hierarchical_dict[p_key] = {} hierarchical_dict[p_key][s_key] = val return hierarchical_dict"},{"question":"Please write a Python function that not only finds out the number of weekdays left from today until a given date but also takes into account any given public holidays that fall on weekdays, excluding them from the weekday count. The function includes three parameters: the target date, today's date, and a list representing public holidays in YYYY-MM-DD format.","solution":"from datetime import datetime, timedelta def count_weekdays_until(target_date, today_date, public_holidays): Count the number of weekdays (Mon-Fri) between today and the target date, excluding public holidays. :param target_date: Target date as a string in YYYY-MM-DD format. :param today_date: Today's date as a string in YYYY-MM-DD format. :param public_holidays: List of public holidays as strings in YYYY-MM-DD format. :return: Number of weekdays between today and the target date, not counting holidays. target_date = datetime.strptime(target_date, \\"%Y-%m-%d\\") today_date = datetime.strptime(today_date, \\"%Y-%m-%d\\") public_holidays = [datetime.strptime(date, \\"%Y-%m-%d\\") for date in public_holidays] if today_date > target_date: return 0 total_days = (target_date - today_date).days + 1 weekdays_count = 0 for i in range(total_days): current_date = today_date + timedelta(days=i) if current_date.weekday() < 5 and current_date not in public_holidays: weekdays_count += 1 return weekdays_count"},{"question":"How can I modify the code to sort a list of strings based on their lengths in descending order?","solution":"def sort_strings_by_length_desc(strings): Sorts a list of strings based on their lengths in descending order. return sorted(strings, key=len, reverse=True)"},{"question":"Write a code to generate a list of prime numbers from 10 to 20 (inclusive), where the code should be implemented using a recursive function and must not use any built-in library functions to check for prime numbers.","solution":"def is_prime_recursive(n, divisor=None): Recursively checks if a number is prime. if divisor is None: divisor = n - 1 if divisor <= 1: return True if n % divisor == 0: return False return is_prime_recursive(n, divisor - 1) def list_primes_recursive(start, end): Generates a list of prime numbers in a given range [start, end]. def primes_in_range(s, e): if s > e: return [] if is_prime_recursive(s): return [s] + primes_in_range(s + 1, e) return primes_in_range(s + 1, e) return primes_in_range(start, end) # Example usage primes_10_to_20 = list_primes_recursive(10, 20) primes_10_to_20"},{"question":"Using the given code, extract the year of the given dateTime object and display it in the desired format. Additionally, write a function to convert the year to Roman numerals and display it alongside the original year. However, the year must be displayed in Roman numerals using capital letters only if the month is in the first half of the year (i.e., January to June). If the month is in the second half of the year (i.e., July to December), the year should be displayed in Roman numerals using lowercase letters. Import the datetime module to use the datetime object.","solution":"from datetime import datetime def year_to_roman(year): Converts a given year to Roman numerals. val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = '' i = 0 while year > 0: for _ in range(year // val[i]): roman_num += syb[i] year -= val[i] i += 1 return roman_num def display_year(dateTime): Extracts the year and month from the datetime object. If month is in the first half of the year (Jan-Jun), year is displayed in uppercase Roman numerals. If month is in the second half of the year (Jul-Dec), year is displayed in lowercase Roman numerals. year = dateTime.year month = dateTime.month roman_year = year_to_roman(year) if month >= 1 and month <= 6: return year, roman_year.upper() else: return year, roman_year.lower()"},{"question":"Build a Python function that takes a string and an integer as input and prints the string the number of times specified by the integer.","solution":"def repeat_string(s, n): Prints the string \`s\` repeated \`n\` times. for _ in range(n): print(s)"},{"question":"Create a program that prints the first n Fibonacci numbers in reverse order, where n is a positive integer provided as input by the user. The program should also check if each Fibonacci number is a prime number and, if so, print \\"This number is prime\\" next to it.","solution":"def is_prime(num): Checks if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def fibonacci_reverse(n): Prints the first n Fibonacci numbers in reverse order with a check for prime numbers. if n <= 0: raise ValueError(\\"n should be a positive integer\\") fib_sequence = [] a, b = 0, 1 for _ in range(n): fib_sequence.append(a) a, b = b, a + b # Reverse the list fib_sequence.reverse() # Print the numbers with prime check for num in fib_sequence: prime_status = \\"This number is prime\\" if is_prime(num) else \\"\\" print(f\\"{num} {prime_status}\\".strip())"},{"question":"Write a program that predicts the popularity of a product, where the popularity is defined as the number of positive reviews (rating above 3) the product has received over time. The input is a stream of reviews, where each review is a tuple (rating, timestamp). The output is a stream of predictions, where each prediction is a tuple (timestamp, popularity) that reflects the popularity of the product up to that timestamp. The challenge is to design an algorithm that can handle a large volume of incoming reviews and make predictions in real-time. Also, the predictions should be updated every time a new review arrives, and the program should have the ability to adjust the sensitivity of the predictions (i.e., how much weight to give to recent reviews).","solution":"from collections import deque class ReviewPredictor: def __init__(self, sensitivity=1.0): self.reviews = deque() self.sensitivity = sensitivity self.popularity = 0 def add_review(self, rating, timestamp): self.reviews.append((rating, timestamp)) if rating > 3: self.popularity += 1 def get_popularity(self, current_timestamp): weighted_popularity = 0 for rating, timestamp in self.reviews: # Apply exponential decay based on how old the review is weight = self.sensitivity ** (current_timestamp - timestamp) if rating > 3: weighted_popularity += weight return weighted_popularity def update_sensitivity(self, new_sensitivity): self.sensitivity = new_sensitivity def predict(self, timestamp): return (timestamp, self.get_popularity(timestamp))"},{"question":"Can you write a Python program to check if a given string has all unique characters?","solution":"def has_unique_characters(s): Returns True if the string s has all unique characters, False otherwise. return len(s) == len(set(s))"},{"question":"Create a python program that takes a list of temperatures as input and converts every temperature from Celsius to Fahrenheit.","solution":"def celsius_to_fahrenheit(celsius_temps): Converts a list of temperatures from Celsius to Fahrenheit. :param celsius_temps: List of temperatures in Celsius :return: List of temperatures in Fahrenheit return [((temp * 9/5) + 32) for temp in celsius_temps]"},{"question":"Compose a Python script that, for an undetermined amount of times, requests a user to input a sequence of characters. The program should then evaluate if the entered sequence is a palindrome (reads the same backward as forward). For enhancing the complexity, do not use any predefined functions or methods in Python, except for the most essential ones (like \\"len\\" for determining the length of a string). Your own implementations for reversing strings or comparing characters are required.","solution":"def is_palindrome(sequence): Check if the given sequence is a palindrome. length = len(sequence) for i in range(length // 2): if sequence[i] != sequence[length - 1 - i]: return False return True"},{"question":"Write a code to insert a new item into a given list at the specified index. However, you are not allowed to use any built-in methods or functions that directly solve the problem, such as insert() or append(). You must implement the insertion logic manually.","solution":"def insert_at_index(lst, index, item): Inserts an item into the list at the specified index without using built-in insert or append methods. Args: lst: list - The list into which we want to insert the new item. index: int - The index at which to insert the new item. item: any - The item to insert. Returns: list - The list with the new item inserted. if index < 0: index = 0 elif index > len(lst): index = len(lst) new_list = [None] * (len(lst) + 1) for i in range(index): new_list[i] = lst[i] new_list[index] = item for i in range(index, len(lst)): new_list[i + 1] = lst[i] return new_list"},{"question":"Sort an array of integers using the bubble sort technique in descending order. The array can contain up to 10^6 elements. The integers in the array range from -10^9 to 10^9.","solution":"def bubble_sort_desc(arr): Sorts an array of integers in descending order using the Bubble Sort algorithm. Parameters: arr (list): A list of integers to be sorted. Returns: list: The sorted list in descending order. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] < arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Given a list of n integers where n<=10^5, design an algorithm that can efficiently find the median of the array. The integers in the list can range from -10^9 to 10^9. Your algorithm should be able to handle both odd and even length lists. Additionally, you are required to implement the algorithm using Python. Your solution should have a time complexity of O(nlogn).","solution":"def find_median(arr): Returns the median of an array of integers. arr.sort() n = len(arr) if n % 2 == 1: return arr[n // 2] else: return (arr[n // 2 - 1] + arr[n // 2]) / 2"},{"question":"Develop a Python native function that operates to identify and retrieve the second smallest numerical value within a provided list. The list may contain integers, floating-point numbers, strings, and nested lists. Your function should be able to ignore non-integer and non-floating point values, as well as handle nested lists by finding the second smallest numerical value within them too. Also, your function should be able to handle cases when the list or nested lists contain less than two numerical values, returning an appropriate error message in such cases.","solution":"def extract_numbers(lst): Extracts and flattens numerical values from a list, including nested lists. numbers = [] for item in lst: if isinstance(item, (int, float)): numbers.append(item) elif isinstance(item, list): numbers.extend(extract_numbers(item)) return numbers def second_smallest(lst): Identifies and retrieves the second smallest numerical value from the provided list, including any nested lists. Ignores non-integer and non-floating point values. Returns an error message if there are less than two numerical values. numbers = extract_numbers(lst) unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return \\"Error: Less than two numerical values available.\\" unique_numbers.sort() return unique_numbers[1]"},{"question":"Write an iterator in Python to iterate through the given list and output each element. Additionally, the iterator should only output elements that are palindromes.","solution":"class PalindromeIterator: def __init__(self, data): self.data = data self.index = 0 def __iter__(self): return self def __next__(self): while self.index < len(self.data): current = self.data[self.index] self.index += 1 if current == current[::-1]: # check if the element is a palindrome return current raise StopIteration"},{"question":"Suppose you have a function 'my_func(lst1, lst2)' that takes in two lists as arguments. The first list contains strings, and the second list contains integers. Write a test case to check if 'my_func' correctly returns a new list where each string from the first list is repeated according to the corresponding integer in the second list. Also, provide an example of incorrect code to identify potential misunderstandings.","solution":"def my_func(lst1, lst2): Returns a new list where each string from lst1 is repeated according to the corresponding integer in lst2. if len(lst1) != len(lst2): raise ValueError(\\"Both lists should have the same length\\") result = [] for s, n in zip(lst1, lst2): result.append(s * n) return result # Example of incorrect code: # This might be a common mistake where someone may try to concatenate strings instead of repeating them # def my_func(lst1, lst2): # if len(lst1) != len(lst2): # raise ValueError(\\"Both lists should have the same length\\") # # result = [] # for s, n in zip(lst1, lst2): # result.append(s + str(n)) # return result"},{"question":"Write a Python program to automate the process of creating a directory, writing data to a file inside that directory, and then compressing that file using zip.","solution":"import os import zipfile def create_directory(directory_path): Creates a directory if it doesn't exist. os.makedirs(directory_path, exist_ok=True) def write_to_file(file_path, data): Writes data to a file. with open(file_path, 'w') as file: file.write(data) def compress_file(file_path, zip_file_path): Compresses a file into a zip archive. with zipfile.ZipFile(zip_file_path, 'w') as zipf: zipf.write(file_path, os.path.basename(file_path)) def automate_process(directory_path, file_name, data, zip_file_name): Automates the process of creating a directory, writing data to a file, and compressing the file. create_directory(directory_path) file_path = os.path.join(directory_path, file_name) write_to_file(file_path, data) zip_file_path = os.path.join(directory_path, zip_file_name) compress_file(file_path, zip_file_path)"},{"question":"Write a function to parse a string and return a dictionary where each character in the string is mapped to its frequency. The function should also exclude any characters that are vowels from the dictionary. The string will only contain lowercase letters.","solution":"def parse_string(s): Returns a dictionary where each consonant in the string is mapped to its frequency. Excludes vowels from the dictionary. vowels = set('aeiou') frequency_dict = {} for char in s: if char not in vowels: if char in frequency_dict: frequency_dict[char] += 1 else: frequency_dict[char] = 1 return frequency_dict"},{"question":"You have a list of numerical strings. Your task is to write a Python function that finds and returns the smallest number from the list, treating the strings as integers during comparison. Additionally, the function should include error handling for potential non-integer strings and ensure that the smallest number is found even in the presence of such invalid entries.","solution":"def find_smallest_number(str_list): Returns the smallest number from a list of numerical strings, disregarding any non-integer values. :param str_list: List of numerical strings. :return: Smallest number as an integer or None if no valid numbers. smallest = None for num_str in str_list: try: num = int(num_str) if smallest is None or num < smallest: smallest = num except ValueError: # Ignore the non-integer string continue return smallest"},{"question":"Generate a Python code to verify a given list of ISBN-10 numbers. The function should check each ISBN to ensure it has 10 characters consisting of digits and possibly a hyphen or the letter 'X' as the last character. Each valid ISBN will be printed while the invalid ones will report an error message.","solution":"def verify_isbn_10(isbn_list): Verifies a list of ISBN-10 numbers. Parameters: isbn_list (list): List of ISBN-10 numbers as strings. Returns: None for isbn in isbn_list: if len(isbn) == 10 and (isbn[:-1].isdigit() and (isbn[-1].isdigit() or isbn[-1] == 'X')): print(f\\"Valid ISBN: {isbn}\\") else: print(f\\"Invalid ISBN: {isbn}\\")"},{"question":"Write a function in Python that takes two strings as input and returns a sorted version of the first string with all occurrences of the letters in the second string removed.","solution":"def remove_and_sort(s1, s2): Returns a sorted version of s1 with all occurrences of the characters in s2 removed. # Create a set of characters to be removed for faster lookup s2_set = set(s2) # Filter out characters in s1 that are not in s2 and sort the remaining characters result = ''.join(sorted([char for char in s1 if char not in s2_set])) return result"},{"question":"Write a Python function that implements the game of rock paper scissors. The function should take two arguments representing the choices of two players, and should return the result of the game. Each player's choice will be one of \\"rock\\", \\"paper\\", or \\"scissors\\". The function should also handle the case where a player makes an invalid choice, and should return an error message if that happens.","solution":"def rock_paper_scissors(player1, player2): Determines the result of a rock-paper-scissors game based on players' choices. Parameters: player1 (str): Choice of the first player (\\"rock\\", \\"paper\\", or \\"scissors\\") player2 (str): Choice of the second player (\\"rock\\", \\"paper\\", or \\"scissors\\") Returns: str: The result of the game: \\"Player 1 wins\\", \\"Player 2 wins\\", \\"Tie\\", or \\"Invalid choice\\" choices = [\\"rock\\", \\"paper\\", \\"scissors\\"] if player1 not in choices or player2 not in choices: return \\"Invalid choice\\" if player1 == player2: return \\"Tie\\" elif (player1 == \\"rock\\" and player2 == \\"scissors\\") or (player1 == \\"scissors\\" and player2 == \\"paper\\") or (player1 == \\"paper\\" and player2 == \\"rock\\"): return \\"Player 1 wins\\" else: return \\"Player 2 wins\\""},{"question":"Write a Python program that generates and prints the elements of the Fibonacci sequence up to a specified limit. The limit should be an argument that can be provided to the program. In addition, the program should also identify and print whether each Fibonacci number is prime or not.","solution":"def fibonacci_with_limit(limit): Generates and returns a list of Fibonacci numbers up to the specified limit. def is_prime(n): Return True if n is a prime number, else False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True if limit < 0: return [] fib_sequence = [] a, b = 0, 1 while a <= limit: fib_sequence.append(a) a, b = b, a + b fib_with_prime_status = [(num, is_prime(num)) for num in fib_sequence] return fib_with_prime_status"},{"question":"What are lambda expressions in Python and how are they used? Also, write a piece of code that uses a lambda expression to add two given numbers, but instead of directly adding the numbers, the code should raise an exception if the input is not an integer.","solution":"def add_numbers(a, b): Adds two numbers using a lambda expression and raises an exception if inputs are not integers. Parameters: a (int): The first integer. b (int): The second integer. Returns: int: The sum of the two numbers. Raises: ValueError: If either of the inputs is not an integer. if not isinstance(a, int) or not isinstance(b, int): raise ValueError(\\"Both inputs must be integers\\") add = lambda x, y: x + y return add(a, b)"},{"question":"Create a program script, using any preferred programming language, which takes an input number and generates the less widespread numerical sequence known as the tribonacci sequence up to the nth number. The Tribonacci sequence is a generalization of the Fibonacci sequence where each term is the sum of the three preceding ones. Be aware, the script should handle andValidate [correct any potential errors] for negative or non-integer input.","solution":"def tribonacci(n): Returns the tribonacci sequence up to the nth number. The tribonacci sequence is a generalization of the Fibonacci sequence where each term is the sum of the three preceding ones. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] elif n == 3: return [0, 1, 1] sequence = [0, 1, 1] for i in range(3, n): sequence.append(sequence[-1] + sequence[-2] + sequence[-3]) return sequence"},{"question":"Write a short snippet of python code that takes a string as input and prints the characters in reverse order, but without using any built-in string manipulation functions or libraries.","solution":"def reverse_string(s): Returns the characters of the input string in reverse order. reversed_s = '' for char in s: reversed_s = char + reversed_s return reversed_s"},{"question":"Develop a program in Python that generates a 3D maze using the Recursive Division algorithm. The maze should have at least 10 levels and a maximum of 20, with each level containing no less than 50 rooms and a maximum of 100 rooms. The program should allow the player to navigate the maze and collect treasures, which should be randomly placed throughout the maze. The player should also be able to keep track of their score and the number of treasures remaining. Finally, the program should have a timer that limits the time the player has to complete the maze, with a penalty for exceeding the time limit.","solution":"import random import time class Maze: def __init__(self, levels=10, rooms_per_level=50, treasures=10): assert 10 <= levels <= 20, \\"Levels must be between 10 and 20\\" assert 50 <= rooms_per_level <= 100, \\"Rooms per level must be between 50 and 100\\" self.levels = levels self.rooms_per_level = rooms_per_level self.treasures = treasures self.treasures_remaining = treasures self.player_score = 0 self.player_position = (0, 0, 0) # (level, row, column) self.grid = self.generate_maze() self.place_treasures() def generate_maze(self): grid = [[[0 for _ in range(self.rooms_per_level)] for _ in range(self.rooms_per_level)] for _ in range(self.levels)] return grid def place_treasures(self): for _ in range(self.treasures): lvl = random.randint(0, self.levels - 1) row = random.randint(0, self.rooms_per_level - 1) col = random.randint(0, self.rooms_per_level - 1) self.grid[lvl][row][col] = 1 # 1 represents a treasure def move_player(self, direction): lvl, row, col = self.player_position if direction == 'up' and row > 0: row -= 1 elif direction == 'down' and row < self.rooms_per_level - 1: row += 1 elif direction == 'left' and col > 0: col -= 1 elif direction == 'right' and col < self.rooms_per_level - 1: col += 1 elif direction == 'ascend' and lvl < self.levels - 1: lvl += 1 elif direction == 'descend' and lvl > 0: lvl -= 1 self.player_position = (lvl, row, col) # Check for treasure if self.grid[lvl][row][col] == 1: self.grid[lvl][row][col] = 0 # Remove treasure from grid self.player_score += 10 self.treasures_remaining -= 1 def start_timer(duration): return time.time() + duration def check_timer(timer): return time.time() > timer"},{"question":"Develop a piece of code in Python language that is capable of performing a reversal operation on a string considered as an argument. This reversal should yield a new string that is the mirror image of the input string.","solution":"def reverse_string(s): Returns the reverse of the string s. return s[::-1]"},{"question":"Consider a scenario where you have two lists, \`l1\` and \`l2\`. Your goal is to create a set from \`l2\`, which we'll call \`s1\`. Then, you need to create a new list \`l3\` that consists of elements from \`l1\` that are not present in \`s1\`. After that, merge \`l3\` and \`l2\` into a final list. Implement a Python program to achieve this.","solution":"def merge_lists_excluding_elements_from_second_list(l1, l2): Given two lists l1 and l2, create a set from l2 (s1) and then create a new list l3 consisting of elements from l1 that are not in s1. Finally, merge l3 and l2 into a final list. Parameters: l1 (list): First input list. l2 (list): Second input list. Returns: list: The merged list containing elements from l3 and l2. s1 = set(l2) l3 = [item for item in l1 if item not in s1] final_list = l3 + l2 return final_list"},{"question":"Given a directed graph and two vertices, write a program to find the shortest path between them using Dijkstra's algorithm. Make sure to handle cases where there is no path between the two vertices.","solution":"import heapq def dijkstra(graph, start_vertex, end_vertex): Returns the shortest path between start_vertex and end_vertex using Dijkstra's algorithm. If no path exists, returns 'No path'. graph: dict, each key is a vertex, and the value is a dict of neighboring vertices with edge weights. start_vertex: the starting vertex. end_vertex: the target vertex. # Priority queue to hold the vertices to be processed queue = [(0, start_vertex, [])] # Dictionary to store the shortest path to each vertex visited = set() while queue: (cost, current_vertex, path) = heapq.heappop(queue) if current_vertex in visited: continue visited.add(current_vertex) path = path + [current_vertex] # Return the path if we've reached the end vertex if current_vertex == end_vertex: return path, cost for neighbor, weight in graph.get(current_vertex, {}).items(): if neighbor not in visited: heapq.heappush(queue, (cost + weight, neighbor, path)) return 'No path'"},{"question":"Given the following erroneous code as a reference, write a function that fixes the error and modifies the Linux command-line output to display the present working directory along with user name and current date-time.","solution":"import os import getpass from datetime import datetime def get_user_info(): Returns the present working directory, user name, and current date-time. current_directory = os.getcwd() user_name = getpass.getuser() current_datetime = datetime.now().strftime('%Y-%m-%d %H:%M:%S') return f\\"Directory: {current_directory}, User: {user_name}, Date-Time: {current_datetime}\\""},{"question":"Please write a Python function that takes a list of integers and returns the maximum length of a subset of consecutive integers within the original list.","solution":"def max_length_of_consecutive_subset(nums): Returns the maximum length of a subset of consecutive integers within the original list. if not nums: return 0 nums = sorted(set(nums)) longest_streak = 1 current_streak = 1 for i in range(1, len(nums)): if nums[i] == nums[i - 1] + 1: current_streak += 1 else: longest_streak = max(longest_streak, current_streak) current_streak = 1 return max(longest_streak, current_streak)"},{"question":"Write a Lambda function in Python that calculates the standard deviation of a given list of numbers. Make sure the function checks if the list has at least two distinct elements, if not, the function should raise a ValueError with a descriptive message.","solution":"import math calculate_std_dev = lambda data: (lambda n=len(data), mean=sum(data)/len(data), diff_sum=sum((x - sum(data)/len(data)) ** 2 for x in data): (lambda std_dev=math.sqrt(diff_sum / (n - 1)): std_dev)(std_dev=math.sqrt(diff_sum / (n - 1))) )() if len(set(data)) > 1 else (_ for _ in ()).throw(ValueError(\\"List must contain at least two distinct elements\\"))"},{"question":"Create a Python function to compute a similarity score between two strings using Jaccard similarity.","solution":"def jaccard_similarity(str1, str2): Computes the Jaccard similarity score between two strings. The Jaccard similarity score is defined as the size of the intersection divided by the size of the union of the sample sets. set1 = set(str1.split()) set2 = set(str2.split()) intersection = set1.intersection(set2) union = set1.union(set2) if not union: return 0.0 return len(intersection) / len(union)"},{"question":"Can you provide an example of how to design a stack using a singly linked list in Python? It should have methods for push, pop, peek, and checking if the stack is empty. Please include a check function with provided data points to verify the correctness of the implementation.","solution":"class Node: Node class to represent each element in the stack. def __init__(self, value): self.value = value self.next = None class Stack: Stack class implemented using a singly linked list. def __init__(self): self.head = None def push(self, value): Pushes a value onto the stack. new_node = Node(value) new_node.next = self.head self.head = new_node def pop(self): Pops a value from the stack and returns it. if self.is_empty(): raise IndexError(\\"pop from empty stack\\") value = self.head.value self.head = self.head.next return value def peek(self): Returns the value at the top of the stack without removing it. if self.is_empty(): raise IndexError(\\"peek from empty stack\\") return self.head.value def is_empty(self): Checks if the stack is empty. return self.head is None"},{"question":"Design a Python program that generates the first twenty factorial values of a given integer, but also add error handling for scenarios where the input is not valid, for instance, if it's a negative number or not an integer. Also, incorporate a feature that allows the user to input a range for the numbers they wish to calculate the factorial for, and display the results in a neat, tabular format.","solution":"import math from typing import List, Union def is_valid_integer(num: Union[int, str]) -> bool: Check if the given input is a valid integer. if isinstance(num, int): return True if isinstance(num, str): if num.strip('-+').isdigit(): return True return False def calculate_factorials(range_start: int, range_end: int) -> List[int]: Calculate the factorial for a given range of integers from range_start to range_end inclusive. if not is_valid_integer(range_start) or not is_valid_integer(range_end): raise ValueError(\\"Invalid input: Both range start and end must be valid integers.\\") if int(range_start) < 0 or int(range_end) < 0: raise ValueError(\\"Invalid input: Negative numbers are not allowed.\\") range_start = int(range_start) range_end = int(range_end) factorials = [math.factorial(i) for i in range(range_start, range_end + 1)] return factorials def display_factorials(factorials: List[int], range_start: int) -> None: Display the factorials in a tabular format. print(\\"Number | Factorial\\") print(\\"------------------\\") for idx, factorial in enumerate(factorials, range_start): print(f\\"{idx:<6} | {factorial}\\")"},{"question":"Write a Python function that implements the Quick Sort algorithm on an array. Provide a detailed explanation of the function with examples.","solution":"def quick_sort(arr): Implements the Quick Sort algorithm on the given array. Parameters: arr (list): The list of elements to be sorted. Returns: list: A new list containing the sorted elements. Example: >>> quick_sort([3, 6, 8, 10, 1, 2, 1]) [1, 1, 2, 3, 6, 8, 10] # Base case: array is empty or has one element if len(arr) <= 1: return arr # Choose a pivot (here we choose the first element) pivot = arr[0] # Partition the array into three parts less_than_pivot = [x for x in arr[1:] if x <= pivot] greater_than_pivot = [x for x in arr[1:] if x > pivot] # Recursively apply quick_sort to the partitions and combine the result return quick_sort(less_than_pivot) + [pivot] + quick_sort(greater_than_pivot)"},{"question":"Hello！Can you write for me a function to compute the element-wise multiplication of two tensors in PyTorch ?","solution":"import torch def element_wise_multiplication(tensor1, tensor2): Returns the element-wise multiplication of two tensors. return tensor1 * tensor2"},{"question":"Write a function in Python that takes an unsorted array as input and returns the largest unique element. The array may contain positive and negative integers, as well as floating point numbers. If there are no unique elements in the array, the function should return None.","solution":"def largest_unique_element(arr): Returns the largest unique element from an unsorted array. If there are no unique elements, returns None. # Create a dictionary to count the occurrences of each element element_counts = {} for element in arr: if element in element_counts: element_counts[element] += 1 else: element_counts[element] = 1 # Filter out elements that are not unique unique_elements = [element for element, count in element_counts.items() if count == 1] if not unique_elements: return None # Return the largest unique element return max(unique_elements)"},{"question":"Create a simple Python script that prints the first 100 prime numbers and calculates the sum of those numbers.","solution":"def is_prime(n): Determines if n is a prime number. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def first_n_primes(n): Returns a list of the first n prime numbers. primes = [] candidate = 2 while len(primes) < n: if is_prime(candidate): primes.append(candidate) candidate += 1 return primes def sum_of_primes(primes): Returns the sum of a list of prime numbers. return sum(primes) # Calculating and printing the first 100 prime numbers and their sum first_100_primes = first_n_primes(100) print(\\"First 100 prime numbers: \\", first_100_primes) print(\\"Sum of the first 100 prime numbers: \\", sum_of_primes(first_100_primes))"},{"question":"Write a script to sort an array of numbers from largest to smallest using quicksort. Additionally, implement a check to ensure the array doesn't have duplicate numbers.","solution":"def quicksort_descending(arr): Sorts an array of numbers in descending order using quicksort algorithm. Ensures the array does not contain duplicate numbers. Parameters: arr (list): List of numbers to be sorted Returns: list: Sorted list in descending order without duplicates if len(arr) < 2: return arr # Check and remove duplicates arr = list(set(arr)) pivot = arr[0] greater = [x for x in arr[1:] if x > pivot] lesser = [x for x in arr[1:] if x <= pivot] return quicksort_descending(greater) + [pivot] + quicksort_descending(lesser)"},{"question":"Create a code to swap the element at index 0 with the element at index 3 in a given array.","solution":"def swap_elements(arr): Swaps the element at index 0 with the element at index 3 in the given array. Parameters: arr (list): The list from which elements are to be swapped. Returns: list: The list after swapping the elements. if len(arr) < 4: raise ValueError(\\"Array must have at least 4 elements\\") arr[0], arr[3] = arr[3], arr[0] return arr"},{"question":"Develop a Python function capable of distinguishing prime numbers from a collection of integers, including negative integers and zero. This function should be designed to handle exceptions for inputs that are non-numerical, floating point numbers, or even large numbers that exceed the maximum integer limit in Python. The output should be structured as a tuple: the first element being the array of prime numbers in ascending order and the second element being the multiplication of all prime numbers. If there are no prime numbers in the collection, the function should return an appropriate message.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def find_primes_and_multiply(numbers): Function to find all prime numbers from the collection and multiply them. Args: - numbers: a collection of integers Returns: - tuple (sorted list of primes, multiplication of primes) - or a message if there are no primes. if not isinstance(numbers, (list, tuple)): raise ValueError(\\"Input should be a list or a tuple.\\") primes = [] for num in numbers: try: if not isinstance(num, int): raise ValueError(f\\"{num} is not an integer.\\") if num > 0 and is_prime(num): primes.append(num) except (ValueError, TypeError): continue if not primes: return \\"No prime numbers found.\\" primes.sort() product = 1 for prime in primes: product *= prime return (primes, product)"},{"question":"Write a multi-threaded program that prints out the Fibonacci numbers from 1 to n. The program should use a minimum of two threads to generate the numbers and should ensure that there is no race condition or deadlock. Additionally, make sure to implement error-handling for any potential input errors, such as non-integer inputs or negative numbers.","solution":"import threading def fibonacci_sequence(n): Generates a Fibonacci sequence up to n terms. if not isinstance(n, int) or n <= 0: raise ValueError(\\"Input must be a positive integer\\") sequence = [0] * n if n > 0: sequence[0] = 0 if n > 1: sequence[1] = 1 def generate_fib_part(sequence, start, end): for i in range(start, end): sequence[i] = sequence[i - 1] + sequence[i - 2] t1_end = n // 2 + 1 thread1 = threading.Thread(target=generate_fib_part, args=(sequence, 2, t1_end)) thread2 = threading.Thread(target=generate_fib_part, args=(sequence, t1_end, n)) thread1.start() thread2.start() thread1.join() thread2.join() return sequence"},{"question":"Write me an ultra basic 4-bit ALU adder and subtracter, using Python's bitwise operators.","solution":"def four_bit_alu_adder(a, b): Returns the result of adding two 4-bit binary numbers using bitwise operations. If the result exceeds 4 bits, the higher bits are discarded. max_bits = 0b1111 # Max value for 4 bits (15 in decimal) result = (a + b) & max_bits return result def four_bit_alu_subtracter(a, b): Returns the result of subtracting the second 4-bit binary number from the first using bitwise operations. The result is limited to 4 bits with the understanding that Python's int type handles negatives for us, but we simulate a 4-bit subtraction. max_bits = 0b1111 # Max value for 4 bits (15 in decimal) result = (a - b) & max_bits return result"},{"question":"Develop a function to convert temperature from Fahrenheit to Celsius in Python.","solution":"def fahrenheit_to_celsius(fahrenheit): Converts temperature from Fahrenheit to Celsius. Parameters: fahrenheit (float): Temperature in Fahrenheit Returns: float: Temperature in Celsius return (fahrenheit - 32) * 5.0/9.0"},{"question":"Write a Python function called \\"find_min\\" that takes a list of numbers as an argument and returns the minimum value from that list. If the list is empty, the function should return None. Make sure to include error handling for cases where the input is not a list or the list contains non-numeric values.","solution":"def find_min(numbers): Returns the minimum value from a list of numbers. If the list is empty, returns None. Handles cases where the input is not a list or the list contains non-numeric values. if not isinstance(numbers, list): raise ValueError(\\"Input should be a list.\\") if not numbers: return None min_value = float('inf') for number in numbers: if not isinstance(number, (int, float)): raise ValueError(\\"List should contain only numeric values.\\") if number < min_value: min_value = number return min_value if min_value != float('inf') else None"},{"question":"Given two arrays of integers, write a Python function to interleave their elements alternatingly. If the arrays differ in length, add the remaining elements of the longer array at the end of the new array. Consider an erroneous function definition provided below as a reference which doesn't work correctly.","solution":"def interleave_arrays(arr1, arr2): Interleaves two arrays of integers, arr1 and arr2, alternatingly. If arrays differ in length, appends remaining elements of the longer array to the end. Parameters: arr1 (list): First list of integers. arr2 (list): Second list of integers. Returns: list: The interleaved array. interleaved = [] # Get the minimum length of the two arrays min_length = min(len(arr1), len(arr2)) # Interleave the elements from both arrays for i in range(min_length): interleaved.append(arr1[i]) interleaved.append(arr2[i]) # Append the remaining elements from the longer array if len(arr1) > len(arr2): interleaved.extend(arr1[min_length:]) else: interleaved.extend(arr2[min_length:]) return interleaved"},{"question":"Fabricate a programming function, employing the Python language, that accepts an iterable list as an argument and outputs the list, sorted in a reverse descending sequence. You can use the example list [4, 2, 6, 8, 5, 9, 1] for testing this function.","solution":"def sort_descending(iterable): Returns the iterable sorted in descending (reverse) order. return sorted(iterable, reverse=True)"},{"question":"Write a code to reverse the order of characters in a string, but without using any built-in string reversal functions or libraries. Additionally, your code should be able to handle strings with special characters and whitespace, and should preserve the original case of each character.","solution":"def reverse_string(s): Reverses the order of characters in a string s, preserving the original case and special characters. reversed_chars = [] for i in range(len(s) - 1, -1, -1): reversed_chars.append(s[i]) return ''.join(reversed_chars)"},{"question":"Produce a code that takes in a date and returns the day of the week in Eastern Standard Time (EST).","solution":"from datetime import datetime import pytz def day_of_week_in_EST(date_str): Given a date string in the format YYYY-MM-DD, return the day of the week in EST. :param date_str: a string representing a date in the format YYYY-MM-DD :return: a string that is the name of the day of the week in EST # Parse the date string to a datetime object naive_date = datetime.strptime(date_str, \\"%Y-%m-%d\\") # Define the EST timezone est = pytz.timezone('US/Eastern') # Localize the naive datetime object to EST timezone est_date = est.localize(naive_date) # Format the datetime object to get the day of the week day_of_week = est_date.strftime('%A') return day_of_week"},{"question":"Create a repeatable random number generator in Python that generates numbers within a specific range. The generator should have a time complexity of O(1) for generating each random number. Additionally, ensure that the generated numbers are unique within a certain range and cannot be repeated until all numbers in the range have been generated at least once. The space complexity should be O(n), where n is the size of the range.","solution":"import random class RepeatableRandomGenerator: def __init__(self, start, end, seed=None): Initializes the generator to provide unique random numbers within the specified range [start, end]. :param start: The start of the range (inclusive). :param end: The end of the range (inclusive). :param seed: Optional seed for random number generation to ensure repeatability. self.start = start self.end = end self.seed = seed self._reset() def _reset(self): Resets the generator, shuffling the range and resetting pointers. self.numbers = list(range(self.start, self.end + 1)) if self.seed is not None: random.seed(self.seed) random.shuffle(self.numbers) self.index = 0 def next(self): Generates the next unique random number in the range. :return: The next unique random number. if self.index >= len(self.numbers): self._reset() number = self.numbers[self.index] self.index += 1 return number"},{"question":"Please write a python script to compare two dictionaries, and output the keys that are not in both dictionaries. Additionally, ensure that the script can handle dictionaries with nested dictionaries as values. The script should display the keys that are not in both dictionaries at any level of nesting.","solution":"def compare_dicts(dict1, dict2): Compares two dictionaries and returns the keys that are not in both dictionaries. The function handles nested dictionaries as well. Parameters: dict1 (dict): First dictionary for comparison dict2 (dict): Second dictionary for comparison Returns: set: A set of keys that are not in both dictionaries keys_not_in_both = set() def _compare_keys(d1, d2, parent_key=''): # Traverse through all keys in both dictionaries all_keys = set(d1.keys()).union(set(d2.keys())) for key in all_keys: full_key = f'{parent_key}.{key}' if parent_key else key if key not in d1 or key not in d2: keys_not_in_both.add(full_key) elif isinstance(d1[key], dict) and isinstance(d2[key], dict): _compare_keys(d1[key], d2[key], full_key) elif d1[key] != d2[key]: keys_not_in_both.add(full_key) _compare_keys(dict1, dict2) return keys_not_in_both"},{"question":"Write a function in Python that takes in a list of integer values and sorts it in descending order. Additionally, the function should remove any duplicates from the list.","solution":"def sort_and_remove_duplicates(input_list): Returns a new list that is sorted in descending order with duplicates removed. # Remove duplicates by converting the list to a set unique_values = set(input_list) # Convert the set back to a list and sort in descending order sorted_list = sorted(unique_values, reverse=True) return sorted_list"},{"question":"Write a Python program to sort an array of 0s, 1s, and 2s using a single scan without using any sorting algorithm.","solution":"def sort_012(arr): Sort an array of 0s, 1s, and 2s using a single scan. low = 0 # For 0s high = len(arr) - 1 # For 2s mid = 0 # For 1s while mid <= high: if arr[mid] == 0: arr[low], arr[mid] = arr[mid], arr[low] low += 1 mid += 1 elif arr[mid] == 1: mid += 1 else: arr[mid], arr[high] = arr[high], arr[mid] high -= 1 return arr"},{"question":"What is the most efficient way in Python to generate batches of random numbers of a specific size, where each number is unique within the batch? For instance, I want to generate a batch of 100 unique random numbers, ranging from 1 to 10000. Each individual number should be unique, and the ranges from batch to batch should not overlap. Can you provide a classic example in Python that accomplishes this?","solution":"import random def generate_unique_random_numbers(batch_size, range_start, range_end): Generates a batch of unique random numbers within a specified range. Args: - batch_size (int): The number of unique random numbers to generate. - range_start (int): The start of the range (inclusive). - range_end (int): The end of the range (inclusive). Returns: - List[int]: A list containing the unique random numbers. if batch_size > (range_end - range_start + 1): raise ValueError(\\"Batch size is larger than the available range of unique numbers.\\") return random.sample(range(range_start, range_end + 1), batch_size)"},{"question":"Create a programming function that generates a two-dimensional sparse matrix from a supplied list of numerical data values. The matrix should respect the specified rows and columns size which will be provided as parameters. If the list size is smaller than the required matrix size, fill the remaining entries with zero (0). If possible, make your solution optimised for large input data.","solution":"def generate_sparse_matrix(data, rows, columns): Generates a 2D sparse matrix from a list of numerical data values. Parameters: data (list): List of numerical values to fill into the matrix. rows (int): Number of rows in the matrix. columns (int): Number of columns in the matrix. Returns: list: 2D list representing the sparse matrix. data_iter = iter(data) matrix = [[next(data_iter, 0) for _ in range(columns)] for _ in range(rows)] return matrix"},{"question":"Write a Python program that simulates a simple text-based game where a player explores a series of rooms in a castle, having to solve riddles to unlock the door to the next room. Each room has a different theme and a unique riddle. If the player solves the riddle correctly, they move to the next room. If they fail, they must try again. The game ends when the player reaches the final room and opens the treasure chest.","solution":"class Room: def __init__(self, theme, riddle, solution): self.theme = theme self.riddle = riddle self.solution = solution def check_solution(self, answer): return answer.strip().lower() == self.solution.strip().lower() class Game: def __init__(self): self.rooms = [ Room(\\"Library\\", \\"What has keys but can't open locks?\\", \\"A piano\\"), Room(\\"Garden\\", \\"Feed me and I live, yet give me a drink and I die. What am I?\\", \\"Fire\\"), Room(\\"Kitchen\\", \\"What comes once in a minute, twice in a moment, but never in a thousand years?\\", \\"The letter M\\") ] self.current_room_index = 0 def get_current_room(self): if self.current_room_index < len(self.rooms): return self.rooms[self.current_room_index] return None def answer_riddle(self, answer): current_room = self.get_current_room() if current_room and current_room.check_solution(answer): self.current_room_index += 1 return True return False def has_won(self): return self.current_room_index >= len(self.rooms)"},{"question":"integrate the function f(x) = x^n in Python using scipy.integrate.quad feature, where n is a user inputted value.","solution":"import scipy.integrate as spi def integrate_function(n): Integrate the function f(x) = x^n from 0 to 1 using scipy's quad method. Args: n (int or float): The exponent in the function f(x) = x^n. Returns: float: The result of the integral. float: The estimated error of the integral. def f(x): return x**n integral, error = spi.quad(f, 0, 1) return integral, error"},{"question":"Can you provide a Python function that sorts an array while keeping the first element (the pivot) in place?","solution":"def sort_with_pivot(arr): Sorts an array while keeping the first element (the pivot) in place. if len(arr) <= 1: return arr pivot = arr[0] sorted_part = sorted(arr[1:]) return [pivot] + sorted_part"},{"question":"Revise this Python code segment to define a function that takes a list of integers as an argument. The function should return a list where each element is the result of the original element, multiplied by two, finding the closest integer to the square root of that product. If the product is a perfect square, the square root should be returned as is without rounding.","solution":"import math def process_numbers(numbers): Takes a list of integers and returns a list where each element is the result of the original element multiplied by two, finding the closest integer to the square root of that product. If the product is a perfect square, the square root should be returned as is without rounding. result = [] for num in numbers: product = num * 2 sqrt_value = math.isqrt(product) if sqrt_value * sqrt_value == product: result.append(sqrt_value) else: result.append(round(math.sqrt(product))) return result"},{"question":"Write a function in Python that takes a list of strings as input and returns a list of all strings that have the maximum length in the list.","solution":"def longest_strings(strings): Returns a list of all strings that have the maximum length in the input list. :param strings: List of strings :return: List of strings with maximum length if not strings: return [] max_length = max(len(string) for string in strings) return [string for string in strings if len(string) == max_length]"},{"question":"Write a Python code to check if a given string is an isogram (a word or phrase without a repeating letter), ignoring case sensitivity and non-alphabetical characters.","solution":"def is_isogram(string): Returns True if the given string is an isogram, False otherwise. An isogram is a word or phrase without a repeating letter, ignoring case sensitivity and non-alphabetical characters. cleaned_string = ''.join(char.lower() for char in string if char.isalpha()) return len(set(cleaned_string)) == len(cleaned_string)"},{"question":"Given the python method below, begin by modifying it to identify whether the individual score at each index of the two input arrays is a prime number or not. Then compare the prime numbers at corresponding indices in the arrays. Return \\"YES\\" if the prime numbers match at those indices and \\"NO\\" if they do not match or if any of the numbers is not a prime.","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while (i * i) <= n: if (n % i == 0) or (n % (i + 2) == 0): return False i += 6 return True def compare_prime_indices(array1, array2): Compare if the prime numbers at corresponding indices in two arrays match. if len(array1) != len(array2): return \\"NO\\" for index in range(len(array1)): if is_prime(array1[index]) and is_prime(array2[index]): if array1[index] != array2[index]: return \\"NO\\" elif is_prime(array1[index]) or is_prime(array2[index]): return \\"NO\\" return \\"YES\\""},{"question":"Write a Python program to swap the first and last element of a given list of integers. If the list has only one element, leave it unchanged.","solution":"def swap_first_last(lst): Swaps the first and last element of a given list of integers. If the list has only one element, it is returned unchanged. Args: lst: List of integers. Returns: List of integers with first and last elements swapped. if len(lst) <= 1: return lst # Swap first and last elements lst[0], lst[-1] = lst[-1], lst[0] return lst"},{"question":"How would you modify the given \\"mesh_device\\" code to include a function that calculates the total number of devices in the mesh network? Additionally, add a parameter to the \\"add_device\\" method that allows for specifying the number of devices to add at once. Make sure to update the \\"status\\" method to display the total number of devices in the mesh network, and modify the \\"main\\" function to utilize these changes.","solution":"class MeshNetwork: def __init__(self): self.devices = [] def add_device(self, device_name, count=1): for _ in range(count): self.devices.append(device_name) def total_devices(self): return len(self.devices) def status(self): return f\\"Total number of devices: {self.total_devices()}\\" def main(): network = MeshNetwork() network.add_device(\\"Device1\\", 3) network.add_device(\\"Device2\\", 2) print(network.status()) if __name__ == \\"__main__\\": main()"},{"question":"Write a loop in Python that prints the Fibonacci sequence up to the nth term, where n is given as an input.","solution":"def fibonacci_sequence(n): Returns the Fibonacci sequence up to the nth term. Parameters: n (int): The number of terms to generate Returns: list: A list containing the Fibonacci sequence up to the nth term if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] sequence = [0, 1] for i in range(2, n): sequence.append(sequence[-1] + sequence[-2]) return sequence"},{"question":"What coding implementation strategy would you use to tackle the obstacle presented in the problem at https://open.kattis.com/problems/runlengthencoding? The challenge here is to compress a string using run-length encoding, where sequential data is stored as a single data value and count. Your response should encompass the entirety of the solution, from parsing the input string, implementation of the run-length encoding algorithm, to the formatting of the final output string.","solution":"def run_length_encoding(s): Applies Run-Length Encoding to the input string \`s\`. if not s: return \\"\\" encoded_string = [] count = 1 previous_char = s[0] for char in s[1:]: if char == previous_char: count += 1 else: encoded_string.append(f\\"{count}{previous_char}\\") count = 1 previous_char = char encoded_string.append(f\\"{count}{previous_char}\\") return ''.join(encoded_string)"},{"question":"Write a python a function called \`get_upper\` that takes in a string and returns a new string with all the characters in upper case. However, the function should not use the built-in \`upper()\` method.","solution":"def get_upper(s): Takes a string and returns a new string with all the characters in upper case. This function does not use the built-in upper() method. upper_string = '' for char in s: # Check if the character is a lower case letter if 'a' <= char <= 'z': # Convert to upper case by adjusting ASCII values char = chr(ord(char) - ord('a') + ord('A')) upper_string += char return upper_string"},{"question":"Write a recursive function in Python that calculates the factorial of a given positive integer. Additionally, implement error handling to raise a custom exception if a non-positive integer is passed to the function. The function should also have a memoization feature to optimize performance for repeated calls with the same input.","solution":"class NonPositiveIntegerError(Exception): Custom exception for non-positive integers. pass class Factorial: def __init__(self): self.memo = {} def factorial(self, n): Returns the factorial of a given positive integer n using recursion and memoization. Raises a custom exception for non-positive integers. if not isinstance(n, int) or n < 1: raise NonPositiveIntegerError(\\"Input must be a positive integer\\") if n in self.memo: return self.memo[n] if n == 1: self.memo[n] = 1 else: self.memo[n] = n * self.factorial(n - 1) return self.memo[n]"},{"question":"How do I make my own custom lottery ticket in Python?","solution":"import random def generate_lottery_ticket(number_count=6, number_range=(1, 49)): Generates a custom lottery ticket with a specified number of random numbers within a given range. Parameters: number_count (int): Number of unique random numbers to generate (default is 6). number_range (tuple): Range of numbers to pick from, inclusive (default is (1, 49)). Returns: list: Sorted list of unique random numbers. return sorted(random.sample(range(number_range[0], number_range[1] + 1), number_count))"},{"question":"Write a recursive function in Python to calculate the sum of the squares of the numbers in a list.","solution":"def sum_of_squares(lst): Returns the sum of the squares of the numbers in the list. if not lst: return 0 return lst[0]**2 + sum_of_squares(lst[1:])"},{"question":"Design a Python function snippet to Update Extreme Hair care: Dealing with Hair Problems for Engineer for Professionals. Implement if/else or switch/case statements to handle different conditions related to the Privacy. Provide detailed comments explaining your control flow and the reasoning behind each decision.","solution":"def handle_hair_problems_for_professionals(hair_type, problem): Handles hair care solutions for professional engineers based on their hair type and specific hair problems. Parameters: - hair_type (str): The type of hair, e.g., 'curly', 'straight', 'wavy'. - problem (str): The specific hair problem, e.g., 'dryness', 'dandruff', 'hairloss'. Returns: - str: Recommended solution for the given hair type and problem. if hair_type == 'curly': if problem == 'dryness': return \\"Use a deep conditioning treatment once a week and a leave-in conditioner on a daily basis.\\" elif problem == 'dandruff': return \\"Use an anti-dandruff shampoo once a week and a moisturizing shampoo the other days.\\" elif problem == 'hairloss': return \\"Limit the use of heated styling tools and ensure a diet rich in vitamins and minerals.\\" else: return \\"Consult a professional stylist for other curly hair problems.\\" elif hair_type == 'straight': if problem == 'dryness': return \\"Use hydrating shampoos and conditioners, and avoid over-washing your hair.\\" elif problem == 'dandruff': return \\"Opt for a gentle, sulfate-free anti-dandruff shampoo and avoid products that can cause buildup.\\" elif problem == 'hairloss': return \\"Incorporate scalp massages into your routine and use products that strengthen hair from the root.\\" else: return \\"Consult a professional stylist for other straight hair problems.\\" elif hair_type == 'wavy': if problem == 'dryness': return \\"Choose a sulfate-free, moisturizing shampoo and use a lightweight conditioner.\\" elif problem == 'dandruff': return \\"Use a mild anti-dandruff shampoo and exfoliate your scalp gently.\\" elif problem == 'hairloss': return \\"Use volumizing products to give the appearance of fuller hair and avoid tight hairstyles.\\" else: return \\"Consult a professional stylist for other wavy hair problems.\\" else: return \\"Invalid hair type. Please choose from 'curly', 'straight', or 'wavy'.\\""},{"question":"Create a Python program that sorts an array of strings based on their length. The program should also include a feature that allows the user to specify whether the sorting should be in ascending or descending order. Moreover, the program should exclude any string that has a length less than or equal to a specified integer input by the user. The program should also provide an option for the user to sort the array based on alphabetical order, while ignoring the case of the letters.","solution":"def sort_strings(strings, order='asc', min_length=0, by_length=True): Sorts an array of strings based on their length or alphabetically. Parameters: strings (list of str): The array of strings to be sorted. order (str): 'asc' for ascending or 'desc' for descending order. Defaults to 'asc'. min_length (int): Minimum length of strings to be included in sorting. Defaults to 0. by_length (bool): Sort by length if True, alphabetically if False. Defaults to True. Returns: list of str: Sorted array of strings based on specified criteria. # Filter out strings shorter than min_length filtered_strings = [s for s in strings if len(s) > min_length] # Determine the key for sorting if by_length: # Sort by length key_func = len else: # Sort alphabetically, ignoring case key_func = lambda s: s.lower() # Sort the strings sorted_strings = sorted(filtered_strings, key=key_func, reverse=(order == 'desc')) return sorted_strings"},{"question":"Write a code snippet in Python which takes an array of integers and returns the maximum product of any three integers in the array.","solution":"def maximum_product_of_three(arr): Returns the maximum product of any three integers in the given array. if len(arr) < 3: raise ValueError(\\"Input array must have at least three integers.\\") # Sort array to find candidates for the maximum product arr.sort() # The maximum product of three numbers could be: # 1. product of the three largest positive numbers, or # 2. product of the two smallest negative numbers and the largest positive number. return max(arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1])"},{"question":"What would be the detailed steps in creating a function to calculate the factorial of a given number in Python, including error handling for negative values and non-integer types?","solution":"def factorial(n): Returns the factorial of a given number n. Args: n: an integer for which to calculate the factorial Returns: The factorial of n, or raises ValueError for negative values or non-integer types. Examples: >>> factorial(5) 120 >>> factorial(0) 1 if not isinstance(n, int): raise ValueError(\\"Input must be an integer\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"How can I print out the top 5 most frequent elements from an input list using a programming language?","solution":"from collections import Counter def top_n_frequent_elements(input_list, n=5): Returns the top n most frequent elements from the input list. Default value of n is 5. If there are multiple elements with the same frequency, it will return the first encountered based on the list order. counter = Counter(input_list) most_common = counter.most_common(n) return [element for element, count in most_common]"},{"question":"Write a function to get the length of a given string without using any built-in function. The string can contain ASCII characters only. Additionally, you are not allowed to use any loops or recursion in your solution.","solution":"def string_length(s): Returns the length of the string s without using any built-in functions, loops, or recursion. # Creating a list comprehension to force evaluation of the whole string length = sum(1 for _ in s) return length"},{"question":"Write a python program to shuffle a list using a given random seed.","solution":"import random def shuffle_list(input_list, seed): Shuffles the list using the given seed. Parameters: input_list (list): The list to be shuffled. seed (int): The random seed for shuffling. Returns: list: The shuffled list. random.seed(seed) shuffled_list = input_list[:] random.shuffle(shuffled_list) return shuffled_list"},{"question":"The following dictionary contains information about some popular movies. Add a function 'get_movie_by_title' that takes the title of a movie as input and returns all information about that movie. Also, write a function 'get_movie_by_director' that takes the name of a director as input and returns all movies directed by that person. Lastly, implement a function 'get_movie_by_genre' that takes the genre of a movie as input and returns all movies of that genre.","solution":"movies = { \\"The Shawshank Redemption\\": { \\"Director\\": \\"Frank Darabont\\", \\"Year\\": 1994, \\"Genre\\": \\"Drama\\", \\"Rating\\": 9.3 }, \\"The Godfather\\": { \\"Director\\": \\"Francis Ford Coppola\\", \\"Year\\": 1972, \\"Genre\\": \\"Crime\\", \\"Rating\\": 9.2 }, \\"The Dark Knight\\": { \\"Director\\": \\"Christopher Nolan\\", \\"Year\\": 2008, \\"Genre\\": \\"Action\\", \\"Rating\\": 9.0 }, \\"Pulp Fiction\\": { \\"Director\\": \\"Quentin Tarantino\\", \\"Year\\": 1994, \\"Genre\\": \\"Crime\\", \\"Rating\\": 8.9 }, \\"Forrest Gump\\": { \\"Director\\": \\"Robert Zemeckis\\", \\"Year\\": 1994, \\"Genre\\": \\"Drama\\", \\"Rating\\": 8.8 } } def get_movie_by_title(title): Returns all information about the movie with the given title. return movies.get(title) def get_movie_by_director(director): Returns all movies directed by the given director. return {title: info for title, info in movies.items() if info['Director'] == director} def get_movie_by_genre(genre): Returns all movies of the given genre. return {title: info for title, info in movies.items() if info['Genre'] == genre}"},{"question":"Write a Python program to create a new list which contains all even numbers from the given list, and sort them in descending order. If there are no even numbers in the list, return an empty list.","solution":"def get_sorted_even_numbers(lst): Returns a new list containing all even numbers from the given list. The returned list is sorted in descending order. # Filter out the even numbers even_numbers = [num for num in lst if num % 2 == 0] # Sort the list in descending order even_numbers.sort(reverse=True) return even_numbers"},{"question":"Suppose that we have a binary tree named 't'. Write a recursive function in Python to check whether this binary tree is a binary search tree (BST). Furthermore, your function should also return the smallest and largest value contained within the tree if the tree is a valid BST. Make sure to handle edge cases, such as an empty tree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_bst_and_min_max(node): Function to check whether the binary tree is a binary search tree (BST) and return the smallest and largest values in the tree if it's a BST. if not node: return True, None, None # Empty tree is a BST with no min and max values is_left_bst, left_min, left_max = is_bst_and_min_max(node.left) is_right_bst, right_min, right_max = is_bst_and_min_max(node.right) # Left subtree values should be less than current node, and right subtree values should be greater if is_left_bst and is_right_bst and (left_max is None or left_max < node.val) and (right_min is None or right_min > node.val): min_val = node.val if left_min is None else left_min max_val = node.val if right_max is None else right_max return True, min_val, max_val else: return False, None, None"},{"question":"Ensure that the list is reversed in place without using any built-in functions or methods. The solution should have a time complexity of O(n) and a space complexity of O(1). The list elements are guaranteed to be integers.","solution":"def reverse_list_in_place(lst): Reverses the list in place without using any built-in functions or methods. Parameters: lst (list): The list to be reversed, containing integers. left = 0 right = len(lst) - 1 while left < right: # Swap the elements at the left and right indices lst[left], lst[right] = lst[right], lst[left] # Move the pointers left += 1 right -= 1"},{"question":"How can I generate a list of all possible subsets of size exactly k from a given list of integers in Python, without using any built-in libraries? For example, if the initial list is lst = [1, 2, 3, 4] and k = 2, produce a result like [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]].","solution":"def generate_subsets(lst, k): Generates all possible subsets of size exactly k from the given list of integers. Parameters: lst (list): A list of integers k (int): The size of each subset Returns: list: A list of all possible subsets of size k def backtrack(start, current_subset): if len(current_subset) == k: result.append(current_subset[:]) return for i in range(start, len(lst)): current_subset.append(lst[i]) backtrack(i + 1, current_subset) current_subset.pop() result = [] backtrack(0, []) return result"},{"question":"Create a Python code snippet to calculate and display the compound interest for a given principal, rate, time, and the number of times interest is compounded per year. Your code should include error handling for invalid user inputs (e.g., non-numeric input, negative numbers). Moreover, provide a piece of erroneous code that does NOT properly calculate the compound interest, and explain why it is incorrect.","solution":"def calculate_compound_interest(principal, rate, time, n): Calculate compound interest. :param principal: Initial amount of money (P) :param rate: Annual interest rate (r) in decimal, e.g., 5% as 0.05 :param time: Time the money is invested for in years (t) :param n: Number of times interest is compounded per year :return: The amount of money after interest if not (isinstance(principal, (int, float)) and isinstance(rate, (int, float)) and isinstance(time, (int, float)) and isinstance(n, int)): raise ValueError(\\"All inputs must be numeric; 'n' must be an integer.\\") if principal < 0 or rate < 0 or time < 0 or n <= 0: raise ValueError(\\"Principal, rate, and time must be non-negative, and n must be greater than zero.\\") amount = principal * (1 + rate / n) ** (n * time) return amount def display_compound_interest(principal, rate, time, n): try: amount = calculate_compound_interest(principal, rate, time, n) print(f\\"The amount after {time} years is: {amount:.2f}\\") except ValueError as e: print(e) # Incorrect code snippet that does NOT properly calculate the compound interest def incorrect_calculate_compound_interest(principal, rate, time, n): # The incorrect formula used here does not divide rate by number of times compounded amount = principal * (1 + rate) ** (n * time) return amount # Explanation: # The incorrect formula used in \`incorrect_calculate_compound_interest\` does not divide the rate by n. # The correct formula for compound interest is Principal * (1 + Rate / n) ** (n * Time), # where n is the number of times the interest is compounded per year."},{"question":"Can you show me an example of implementing a simple JSON parser in Python? I want to understand how to manually parse a JSON string without using external libraries like \`json\`.","solution":"def parse_simple_json(json_string): Manually parses a simple JSON string into corresponding Python objects. This function can handle basic JSON structures with objects (dictionaries), arrays (lists), strings, numbers, booleans, and nulls. import re # Patterns for the different types of JSON values. whitespace = re.compile(r's*') null_pattern = re.compile(r'null') true_pattern = re.compile(r'true') false_pattern = re.compile(r'false') number_pattern = re.compile(r'-?d+(.d+)?([eE][+-]?d+)?') string_pattern = re.compile(r'\\"(.*?)\\"') array_pattern = re.compile(r'[') object_pattern = re.compile(r'{') def parse_value(text): match = whitespace.match(text) text = text[match.end():] if text.startswith('null'): return None, text[4:] elif text.startswith('true'): return True, text[4:] elif text.startswith('false'): return False, text[5:] elif text.startswith('\\"'): return parse_string(text) elif text.startswith('['): return parse_array(text) elif text.startswith('{'): return parse_object(text) else: return parse_number(text) def parse_string(text): match = string_pattern.match(text) if not match: raise ValueError('Invalid JSON string') return match.group(1), text[match.end():] def parse_number(text): match = number_pattern.match(text) if not match: raise ValueError('Invalid JSON number') num = match.group(0) if '.' in num or 'e' in num or 'E' in num: return float(num), text[match.end():] else: return int(num), text[match.end():] def parse_array(text): elements = [] text = text[1:] # Remove leading '[' while True: match = whitespace.match(text) text = text[match.end():] if text.startswith(']'): return elements, text[1:] # Remove trailing ']' element, text = parse_value(text) elements.append(element) match = whitespace.match(text) text = text[match.end():] if text.startswith(','): text = text[1:] elif text.startswith(']'): return elements, text[1:] else: raise ValueError('Invalid JSON array') def parse_object(text): obj = {} text = text[1:] # Remove leading '{' while True: match = whitespace.match(text) text = text[match.end():] if text.startswith('}'): return obj, text[1:] # Remove trailing '}' key, text = parse_string(text) match = whitespace.match(text) text = text[match.end():] if not text.startswith(':'): raise ValueError('Invalid JSON object') text = text[1:] # Remove ':' value, text = parse_value(text) obj[key] = value match = whitespace.match(text) text = text[match.end():] if text.startswith(','): text = text[1:] elif text.startswith('}'): return obj, text[1:] else: raise ValueError('Invalid JSON object') result, remaining_text = parse_value(json_string) remaining_text = remaining_text.lstrip() if remaining_text: raise ValueError('Extra data after JSON value') return result"},{"question":"Given the input, write a recursive function to generate all possible permutations of the characters in a string.","solution":"def generate_permutations(s): Generates all possible permutations of the characters in a string. Args: s (str): The input string. Returns: List[str]: A list containing all permutations of the input string. if len(s) == 0: return [''] permutations = [] for i, char in enumerate(s): # Get all permutations of the remaining characters remaining_permutations = generate_permutations(s[:i] + s[i+1:]) for perm in remaining_permutations: permutations.append(char + perm) return permutations"},{"question":"Write a Python function that not only reverses an array up to a given position k, but also sorts the remaining part of the array (from k to the end) in ascending order. The function should handle edge cases as well, such as an empty array, a single element array, or a k value greater than the length of the array.","solution":"def reverse_and_sort(arr, k): Reverses the array up to position k and sorts the remaining part of the array. :param arr: List of elements to be processed :param k: Position up to which to reverse the array :return: Processed array with first k elements reversed and the rest sorted if k > len(arr): k = len(arr) reversed_part = arr[:k][::-1] sorted_part = sorted(arr[k:]) return reversed_part + sorted_part"},{"question":"Write a Python program to print the calendar of a given month and year, where the month must be between 1 and 12 and the year must be a positive integer. The program should also display the current date at the top of the calendar, and the dates should be color-coded based on whether they fall on a weekend or a weekday. Additionally, modify the program to highlight the current date by displaying it in bold and centered in the calendar. The program should also provide an option for the user to input their preferred date format (e.g. dd/mm/yyyy, mm/dd/yyyy, yyyy-mm-dd) and display the calendar dates in the chosen format.","solution":"import calendar from datetime import datetime def generate_calendar(month, year, date_format): Generates a calendar for a given month and year. Colors weekends and weekdays differently and highlights the current date. Parameters: - month (int): Month value (1-12) - year (int): Year value (positive integer) - date_format (str): The preferred date format (e.g., 'dd/mm/yyyy') # Validate month and year if month < 1 or month > 12 or year <= 0: raise ValueError(\\"Month must be between 1 and 12 and year must be a positive integer\\") # Display current date current_date = datetime.now().strftime(date_format) print(\\"Today's date:\\", current_date) # Create calendar for the given month and year cal = calendar.TextCalendar(calendar.SUNDAY) month_calendar = cal.monthdayscalendar(year, month) # Get current day to highlight now = datetime.now() highlight_day = now.day if now.year == year and now.month == month else None date_format_ext = { 'dd/mm/yyyy': lambda day: f\\"{day:02d}/{month:02d}/{year}\\", 'mm/dd/yyyy': lambda day: f\\"{month:02d}/{day:02d}/{year}\\", 'yyyy-mm-dd': lambda day: f\\"{year}-{month:02d}-{day:02d}\\" } format_date = date_format_ext.get(date_format) if not format_date: raise ValueError(\\"Unsupported date format\\") # Print calendar print(\\"n\\", calendar.month_name[month], year, \\"n\\") for week in month_calendar: week_str = \\"\\" for day in week: if day == 0: day_str = \\" \\" else: day_str = format_date(day) if day == highlight_day: # Highlight current date day_str = f\\"**{day_str}**\\" # color coding if week.index(day) >= 5: # weekends (Saturday and Sunday) day_str = f\\"033[31m{day_str}033[0m\\" # red for weekends else: day_str = f\\"033[34m{day_str}033[0m\\" # blue for weekdays week_str += day_str + \\" \\" print(week_str.center(70)) # Example usage generate_calendar(10, 2023, 'dd/mm/yyyy')"},{"question":"Write a Python code to print \\"Hello World\\" on the console, but instead of directly using the print statement, create a function that takes a string as an argument and then prints the string reversed. Ensure the function is robust enough to handle different string inputs including special characters.","solution":"def print_reversed_string(s): Takes a string argument and prints the string reversed. reversed_string = s[::-1] print(reversed_string)"},{"question":"Create a correct Python program to classify the elements of a given list of integers into even or odd.","solution":"def classify_even_odd(numbers): Classifies the elements of a given list of integers into even or odd. Parameters: numbers (list): A list of integers. Returns: dict: A dictionary with two keys 'even' and 'odd' where the values are lists of even and odd numbers from the input list respectively. classified = {'even': [], 'odd': []} for number in numbers: if number % 2 == 0: classified['even'].append(number) else: classified['odd'].append(number) return classified"},{"question":"Create a Python script that merges and sorts two lists of equal length. It should take two lists as input and return a new list where every element is a tuple: the first element from the first list and the corresponding element from the second list, sorted by the first list's elements.","solution":"def merge_and_sort(lst1, lst2): Merges two lists of equal length into a list of tuples, each containing corresponding elements from the two lists. The resulting list is sorted by the elements of the first list. Parameters: lst1 (list): The first list. lst2 (list): The second list. Returns: list: A merged list of tuples sorted by the first list's elements. if len(lst1) != len(lst2): raise ValueError(\\"Both lists must have the same length.\\") merged_list = list(zip(lst1, lst2)) sorted_list = sorted(merged_list, key=lambda x: x[0]) return sorted_list"},{"question":"Implement a function in Python that takes a string as an argument and returns the first non-space character of the string in uppercase. If the string does not contain any non-space characters, return an empty string.","solution":"def first_non_space_uppercase(s): Returns the first non-space character in uppercase. If the string does not contain any non-space characters, returns an empty string. for char in s: if char != ' ': return char.upper() return ''"},{"question":"I am trying to implement a function to compute the pairwise distance between a set of points in a 3D space. Can you help me with a Python code snippet to achieve this using lists?","solution":"import math def pairwise_distance(points): Computes the pairwise distance between a set of points in a 3D space. Args: points: List of tuples, where each tuple contains 3 numbers representing a point in 3D space. Returns: A list of lists, where the element at ith row and jth column represents the distance between i-th and j-th points. n = len(points) distances = [[0.0] * n for _ in range(n)] for i in range(n): for j in range(i + 1, n): p1 = points[i] p2 = points[j] dist = math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2 + (p1[2] - p2[2])**2) distances[i][j] = dist distances[j][i] = dist return distances"},{"question":"I want you to write a Python script that reads a newline-separated JSON file that contains strings. In the JSON file, each newline has a separate json object. The key of each object is a unique id and its value is a string. The script should count the number of words in the strings, sum them up, and print the sum as a plain integer to stdout.","solution":"import json def count_words_in_json_file(file_path): Reads a newline-separated JSON file, counts the words in the strings, and returns the total word count. total_word_count = 0 with open(file_path, 'r') as file: for line in file: obj = json.loads(line) for key, value in obj.items(): total_word_count += len(value.split()) return total_word_count"},{"question":"Given the URL http://www.linkedin.com/home/profile? whose segments are separated by the forward slash ('/'), create a Python function that not only condenses the URL to its smallest form, but also returns a dictionary indicating the hierarchy of the URL. Take into account the variability of URL structures (protocol, subdomains, query strings etc.). Make sure to handle potential exceptions, such as a URL that doesn't start with http:// or https://.","solution":"from urllib.parse import urlparse, parse_qs def condense_url(url): Takes a URL as input, condense it to its smallest form, and returns a dictionary indicating the URL hierarchy. Arguments: url -- a string representing the URL to be processed Returns: A tuple containing: - a string representing the condensed URL - a dictionary representation of the URL hierarchy parsed = urlparse(url) if not (parsed.scheme in ['http', 'https']): raise ValueError(\\"URL must start with 'http://' or 'https://'\\") hierarchy = { 'scheme': parsed.scheme, 'netloc': parsed.netloc, 'path': parsed.path.split('/')[1:] if parsed.path else [], 'params': parsed.params, 'query': parsed.query } # Condense URL condensed_url = f\\"{parsed.scheme}://{parsed.netloc}\\" if parsed.path: condensed_url += f\\"{parsed.path}\\" if parsed.query: condensed_url += f\\"?{parsed.query}\\" return (condensed_url, hierarchy)"},{"question":"Write a Python function that takes a string as input and returns a new string with the characters reversed.","solution":"def reverse_string(s): Returns the reversed version of the input string s. return s[::-1]"},{"question":"Develop a 3D tensor using the PyTorch library, then initialize it with a custom sequence of numbers you create rather than a random function. The tensor should have dimensions 4x3x3. After creating the tensor, implement a function that calculates the sum of each 3x3 slice along the first dimension and returns these sums in a list.","solution":"import torch def create_tensor_and_compute_sums(): # Define custom sequence of numbers sequence = [i for i in range(1, 37)] # Create a 4x3x3 tensor tensor = torch.tensor(sequence, dtype=torch.float).view(4, 3, 3) # Calculate sum of each 3x3 slice along the first dimension sums = [tensor[i].sum().item() for i in range(tensor.size(0))] return sums"},{"question":"Create a Python program to import multiple entities from a JSON file and store them in a dictionary. The program should validate the data in the JSON file to ensure it's in the correct format.","solution":"import json def load_entities_from_json(file_path): Loads entities from a JSON file and stores them in a dictionary. Args: file_path (str): Path to the JSON file. Returns: dict: Dictionary of entities if the JSON format is correct. Raises: ValueError: If the JSON format is incorrect. try: with open(file_path, 'r') as file: data = json.load(file) if not isinstance(data, dict): raise ValueError(\\"Invalid JSON format: Root element must be a dictionary\\") for key, value in data.items(): if not isinstance(key, str) or not isinstance(value, dict): raise ValueError(\\"Invalid JSON format: Each entity must be a key-value pair with the value being a dictionary\\") return data except json.JSONDecodeError: raise ValueError(\\"Invalid JSON format: Unable to parse JSON\\") # Example use (commented out since file access is not possible here) # entities = load_entities_from_json('path_to_file.json') # print(entities)"},{"question":"Generate a Python function to compute the factorial of a positive integer.","solution":"def factorial(n): Returns the factorial of a positive integer n. if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n+1): result *= i return result"},{"question":"Write a Python function that encrypts a given text using a simple Caesar cipher with a variable shift. The function should only encrypt lowercase letters and wrap around the alphabet. The function should have two parameters: the text to be encrypted and an integer shift value. If the shift value is negative or greater than 26, it should be normalized to a value between 0 and 25. Spaces between words should be preserved.","solution":"def caesar_cipher_encrypt(text, shift): Encrypts the given text using a Caesar cipher with the specified shift. Parameters: text (str): The text to be encrypted. shift (int): The integer shift value for the Caesar cipher. Returns: str: The encrypted text. shift = shift % 26 # Normalize shift to be within the range of 0-25 encrypted_text = [] for char in text: if char.islower(): new_char = chr((ord(char) - ord('a') + shift) % 26 + ord('a')) encrypted_text.append(new_char) else: encrypted_text.append(char) # Preserve spaces and non-lowercase characters return ''.join(encrypted_text)"},{"question":"Create a list in Python that contains the first 10 multiples of 7. Next, write a function that checks if a given number is contained within this list. Ensure the function is efficient and returns a boolean value.","solution":"def is_multiple_of_seven(num): Checks if the given number is a multiple of 7 within the first 10 multiples of 7. multiples_of_seven = [7 * i for i in range(1, 11)] return num in multiples_of_seven"},{"question":"Create a Python program that asks the user to input a string and a character, and then counts the number of occurrences of that character in the string.","solution":"def count_character_occurrences(input_string, character): Count the number of occurrences of a character in a given string. Parameters: input_string (str): The string in which to count the occurrences. character (str): The character to count. Returns: int: The number of occurrences of the character in the string. return input_string.count(character)"},{"question":"How do I find the number of times a specific substring appears in a given string using Python? Additionally, how can I make the search case-insensitive?","solution":"def count_substring_occurrences(main_string, substring, case_sensitive=True): Returns the number of times a specific substring appears in the main string. Optionally, the search can be made case-insensitive. Parameters: main_string (str): The string to search within. substring (str): The string to search for. case_sensitive (bool): If True, the search is case-sensitive. If False, it is case-insensitive. Returns: int: The number of occurrences of the substring in the main string. if not case_sensitive: main_string = main_string.lower() substring = substring.lower() return main_string.count(substring)"},{"question":"Given the following erroneous code, correct and modify it to determine the shortest string in a non-empty array of strings. However, the condition is that the shortest string should not include any repeated characters.","solution":"def shortest_unique_string(strings): Returns the shortest string from the array that doesn't include any repeated characters. If there are multiple, return the first one found. def has_unique_chars(s): return len(s) == len(set(s)) shortest_string = None for s in strings: if has_unique_chars(s): if shortest_string is None or len(s) < len(shortest_string): shortest_string = s return shortest_string"},{"question":"Given a singly linked list, write a function to reverse it in-place without using any additional data structures or recursion. However, you are allowed to modify the nodes' values.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverses a singly linked list in-place. :param head: ListNode - Head of the singly linked list :return: ListNode - New head of the reversed singly linked list prev = None current = head while current is not None: next_node = current.next # store next node current.next = prev # reverse the current node's pointer prev = current # move one step forward in the list current = next_node # move to the next node return prev # prev will be the new head of the reversed list"},{"question":"In Python, write a program that generates a list of n random integers between a given minimum and maximum value. The program should also include a function to check if the generated list contains any duplicate integers.","solution":"import random def generate_random_list(n, min_value, max_value): Generates a list of n random integers between min_value and max_value. return [random.randint(min_value, max_value) for _ in range(n)] def contains_duplicates(numbers): Checks if the given list contains any duplicate integers. return len(numbers) != len(set(numbers))"},{"question":"Write a program to check if a binary tree is balanced. A binary tree is considered balanced if the left and right subtree's height differ by no more than one for all nodes in the tree.","solution":"# Definition for a binary tree node. class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_balanced(root): Determine if a binary tree is balanced. :type root: TreeNode :rtype: bool def check_balance(node): if not node: return 0, True left_height, left_balanced = check_balance(node.left) right_height, right_balanced = check_balance(node.right) current_height = 1 + max(left_height, right_height) current_balanced = left_balanced and right_balanced and abs(left_height - right_height) <= 1 return current_height, current_balanced _, balanced = check_balance(root) return balanced"},{"question":"Given an array of strings and two indices, write a program that outputs the string at the first index and the string at the second index of the given array.","solution":"def get_strings_at_indices(strings, index1, index2): Returns the strings at the given indices in the array. Parameters: strings (list): A list of strings. index1 (int): The first index. index2 (int): The second index. Returns: tuple: A tuple containing the strings at the provided indices. if not (0 <= index1 < len(strings) and 0 <= index2 < len(strings)): raise IndexError(\\"Indices are out of the range of the list\\") return strings[index1], strings[index2]"},{"question":"Please write a function in Python that takes a list of book titles and their cover images as URLs, and returns a list of titles sorted based on the color of the dominant pixel in their cover images.","solution":"import requests from PIL import Image from io import BytesIO import numpy as np def dominant_color(image): Returns the dominant color in the given image. image = image.resize((1, 1)) # Resize image to 1x1 pixel return image.getpixel((0, 0)) # Get RGB value of the pixel def sort_books_by_dominant_color(book_data): Sorts books by the dominant color of their cover images. Parameters: book_data (list of tuples): A list of tuples where each tuple contains a book title and a URL to the cover image. Returns: sorted_titles (list): A list of book titles sorted by the dominant color of their cover images. dominant_colors = [] for title, url in book_data: response = requests.get(url) image = Image.open(BytesIO(response.content)) color = dominant_color(image) dominant_colors.append((title, color)) # Sort by RGB values sorted_books = sorted(dominant_colors, key=lambda x: x[1]) # Extract sorted titles sorted_titles = [title for title, color in sorted_books] return sorted_titles"},{"question":"How can I write a Python function that generates all possible strings of a given length using a provided set of characters?","solution":"from itertools import product def generate_all_strings(characters, length): Generates all possible strings of a given length using the provided set of characters. Args: characters (list of str): A list of characters to use in generating strings. length (int): The length of each generated string. Returns: list of str: A list of all possible strings of the given length. return [''.join(p) for p in product(characters, repeat=length)]"},{"question":"Write a function in Python that takes in two lists of integers, \`list1\` and \`list2\`, and returns the count of elements that are common in both lists. The function should consider the multiplicity of elements, meaning if an element appears multiple times in both lists, it should be counted as many times as it appears in both lists. Also, provide a piece of erroneous code as a reference to highlight the complexity involved.","solution":"from collections import Counter def count_common_elements(list1, list2): Returns the count of elements that are common in both lists, considering the multiplicity of elements. counter1 = Counter(list1) counter2 = Counter(list2) common_count = 0 for element in counter1: if element in counter2: common_count += min(counter1[element], counter2[element]) return common_count"},{"question":"Write an efficient algorithm for sorting a large array of integers in ascending order, using only constant space complexity and without using any built-in sorting functions or data structures.","solution":"def heap_sort(arr): Performs heap sort on the input array with constant space complexity. # Helper function to heapify a subtree rooted at index i def heapify(arr, n, i): largest = i # Initialize largest as root left = 2 * i + 1 # left = 2*i + 1 right = 2 * i + 2 # right = 2*i + 2 # See if left child of root exists and is greater than root if left < n and arr[largest] < arr[left]: largest = left # See if right child of root exists and is greater than root if right < n and arr[largest] < arr[right]: largest = right # Change root, if needed if largest != i: arr[i], arr[largest] = arr[largest], arr[i] # swap # Heapify the root heapify(arr, n, largest) n = len(arr) # Build a maxheap. for i in range(n // 2 - 1, -1, -1): heapify(arr, n, i) # Extract elements one by one for i in range(n-1, 0, -1): arr[i], arr[0] = arr[0], arr[i] # swap heapify(arr, i, 0) return arr"},{"question":"Write a Python function that takes an input string and returns the string reversed. However, you must write your own logic for reversing the string and cannot use any built-in functions or methods that directly reverse a string, such as the slicing syntax or using reversed(). Additionally, your function should handle Unicode characters correctly and should not break when given a string containing special characters or emojis.","solution":"def reverse_string(s): Returns the reversed string of the input string s. This function creates its own logic to reverse the string. reversed_str = \\"\\" for char in s: reversed_str = char + reversed_str return reversed_str"},{"question":"I need to write an HTTP echo server in markdown. It should listen and respond to GET requests on any ip address and port 7070, and respond with the uri and request headers. Here is a simple example","solution":"from http.server import BaseHTTPRequestHandler, HTTPServer class EchoHandler(BaseHTTPRequestHandler): def do_GET(self): # Set the response status code to 200 (OK) self.send_response(200) # Define the response headers self.send_header('Content-type', 'text/plain') self.end_headers() # Prepare the response body with the request URI and headers response = f\\"URI: {self.path}n\\" response += \\"Headers:n\\" for header, value in self.headers.items(): response += f\\"{header}: {value}n\\" # Write the response body self.wfile.write(response.encode('utf-8')) def run(server_class=HTTPServer, handler_class=EchoHandler, port=7070): server_address = ('', port) httpd = server_class(server_address, handler_class) print(f'Starting HTTP server on port {port}') httpd.serve_forever() if __name__ == '__main__': run()"},{"question":"Given a list of integers, write a function to calculate the maximum subarray sum using Kadane's algorithm. However, there is a twist. You need to modify the original algorithm to also return the starting and ending indices of the subarray that gives the maximum sum. Additionally, your function should return an empty list if the input list is empty or if all the integers in the input list are negative.","solution":"def max_subarray_sum(nums): Returns the maximum subarray sum along with the starting and ending indices using a modified Kadane's algorithm. Returns an empty list if the input list is empty or all elements are negative. if not nums or all(n < 0 for n in nums): return [] max_sum = curr_sum = nums[0] start = end = temp_start = 0 for i in range(1, len(nums)): if curr_sum < 0: curr_sum = nums[i] temp_start = i else: curr_sum += nums[i] if curr_sum > max_sum: max_sum = curr_sum start = temp_start end = i return [max_sum, start, end]"},{"question":"Create a function in Python that takes a list of individuals and their ages, and sorts them in a descending order (oldest first).","solution":"def sort_by_age_desc(people): Sorts a list of tuples in descending order by the age. Parameters: people (list): A list of tuples where each tuple contains a name and an age. Returns: list: The sorted list in descending order by the age. return sorted(people, key=lambda x: x[1], reverse=True)"},{"question":"Write a Python code to create two empty lists. Then, write functions to add elements to these lists, remove elements from them, and find their intersection. Ensure the intersection function returns a list with unique elements only. Also, include error handling for cases where an element is not found in the list during removal.","solution":"list1 = [] list2 = [] def add_element(lst, element): Adds an element to the given list. lst.append(element) def remove_element(lst, element): Removes the specified element from the given list. If the element is not found, raises a ValueError. if element in lst: lst.remove(element) else: raise ValueError(\\"Element not found in the list\\") def find_intersection(lst1, lst2): Finds the intersection of two lists and returns a list with unique elements. intersection = list(set(lst1) & set(lst2)) return intersection"},{"question":"I'm working on a simple text game where the player navigates through a cave system. How can I implement a pathfinding system that allows the player to find the shortest route from their current location to a specified destination within the cave? I plan to represent the cave as a grid, where each cell can either be a wall or open space.","solution":"import heapq def dijkstra(cave, start, end): Finds the shortest route in a cave grid from start to end. :param cave: List of lists representing the cave grid where 1 is a wall and 0 is an open space. :param start: Tuple (x, y) representing the player's starting coordinates. :param end: Tuple (x, y) representing the destination coordinates. :return: The length of the shortest path if reachable, else -1. rows, cols = len(cave), len(cave[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, down, left, right visited = set() min_heap = [(0, start)] while min_heap: dist, (x, y) = heapq.heappop(min_heap) if (x, y) == end: return dist if (x, y) in visited: continue visited.add((x, y)) for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and (nx, ny) not in visited and cave[nx][ny] == 0: heapq.heappush(min_heap, (dist + 1, (nx, ny))) return -1 # If end is not reachable"},{"question":"Write a Python function that takes as input an array of integers and returns the maximum value. The function should not use any built-in functions or methods to find the maximum value, such as \`max()\`, \`sort()\`, or any library functions. Additionally, the function should have a time complexity of O(n), where n is the length of the input array. The function should also handle the case where the input array is empty and return None in this case. Moreover, the function should handle negative integers and correctly return the maximum negative integer if it exists.","solution":"def find_maximum(arr): Returns the maximum value in the array. If the array is empty, returns None. if not arr: return None max_value = arr[0] for num in arr: if num > max_value: max_value = num return max_value"},{"question":"Create a Python program that defines a dictionary named \\"flowers\\" which stores the names of flowers as keys and their meanings as values. For instance, \\"Daisy\\" as a key with \\"innocence\\" as a value, or \\"Rose\\" with \\"love\\". The code should also include a function that accepts the name of a flower as argument and returns the corresponding meaning from the \\"flowers\\" dictionary. If the entered name isn't found in the dictionary, the function should return \\"Not found\\".","solution":"flowers = { \\"Daisy\\": \\"innocence\\", \\"Rose\\": \\"love\\", \\"Lily\\": \\"purity\\", \\"Sunflower\\": \\"adoration\\", \\"Tulip\\": \\"perfect love\\" } def get_flower_meaning(flower_name): Returns the meaning of the given flower name from the flowers dictionary. If the flower name is not found, returns \\"Not found\\". return flowers.get(flower_name, \\"Not found\\")"},{"question":"Write a python function to convert the given list of strings into a dictionary where the key is a string from the list and the value is the number of vowels in the string.","solution":"def count_vowels(s): Returns the number of vowels in string s. vowels = 'aeiouAEIOU' return sum(1 for char in s if char in vowels) def strings_to_vowel_dict(strings): Converts a list of strings into a dictionary. The keys are the strings and the values are the number of vowels in each string. return {string: count_vowels(string) for string in strings}"},{"question":"Code a Python script that converts temperatures in celsius to fahrenheit. The script should also include error handling to ensure that the user enters a valid temperature. Additionally, the script should provide an option for the user to convert the temperature in reverse, from fahrenheit to celsius. The script should also include a function to calculate the average of a list of temperatures, and display the result in both celsius and fahrenheit.","solution":"def celsius_to_fahrenheit(celsius): Converts Celsius to Fahrenheit. return (celsius * 9/5) + 32 def fahrenheit_to_celsius(fahrenheit): Converts Fahrenheit to Celsius. return (fahrenheit - 32) * 5/9 def calculate_average_temperatures(temperatures, scale='celsius'): Calculate the average of a list of temperatures and return both in Celsius and Fahrenheit. if not temperatures: raise ValueError(\\"The temperature list is empty\\") avg = sum(temperatures) / len(temperatures) if scale == 'celsius': avg_celsius = avg avg_fahrenheit = celsius_to_fahrenheit(avg_celsius) elif scale == 'fahrenheit': avg_fahrenheit = avg avg_celsius = fahrenheit_to_celsius(avg_fahrenheit) else: raise ValueError(\\"Invalid scale. Expected 'celsius' or 'fahrenheit'.\\") return avg_celsius, avg_fahrenheit def is_valid_temperature(value): Checks if the provided value is a valid temperature (i.e. it can be converted to a float). try: float(value) return True except ValueError: return False"},{"question":"Write me an Python Flask application that will serve as a RESTful API for a to-do list. It should support adding tasks, completing tasks, deleting tasks and listing all tasks.","solution":"from flask import Flask, request, jsonify app = Flask(__name__) tasks = [] task_id_counter = 1 @app.route('/tasks', methods=['POST']) def add_task(): global task_id_counter task = request.json.get('task') if not task: return jsonify({\\"error\\": \\"Task description is required\\"}), 400 new_task = { 'id': task_id_counter, 'task': task, 'completed': False } tasks.append(new_task) task_id_counter += 1 return jsonify(new_task), 201 @app.route('/tasks', methods=['GET']) def list_tasks(): return jsonify(tasks), 200 @app.route('/tasks/<int:task_id>', methods=['PUT']) def complete_task(task_id): for task in tasks: if task['id'] == task_id: task['completed'] = True return jsonify(task), 200 return jsonify({\\"error\\": \\"Task not found\\"}), 404 @app.route('/tasks/<int:task_id>', methods=['DELETE']) def delete_task(task_id): global tasks for task in tasks: if task['id'] == task_id: tasks = [t for t in tasks if t['id'] != task_id] return '', 204 return jsonify({\\"error\\": \\"Task not found\\"}), 404 if __name__ == \\"__main__\\": app.run(debug=True)"},{"question":"Continuing with the theme of abstraction, write a function that takes multiple steps in a procedural manner to abstractly represent a concept. In this case, that concept will be the human experience of walking through a maze. Write a Python function that takes in a list of walls and a starting position, and returns the number of steps it takes to reach the end of the maze, or -1 if it is impossible to do so. Each wall in the list is represented by a tuple containing two integers representing the start and end positions of the wall on an infinitely long line. The starting position is an integer representing the position of the person on the line. Assume that there will be no intersecting or overlapping walls, and that the person cannot pass through the walls.","solution":"def steps_to_exit_maze(start, walls): Calculate the number of steps to reach the goal at position 0 from a starting point considering the walls on an infinitely long line. The goal is reached when position 0 is achieved. Args: start (int): The starting position on the line. walls (List[Tuple[int, int]]): A list of tuples representing walls, where each tuple has two integers representing the start and end position of the wall. Returns: int: The number of steps to reach the end of the maze or -1 if it is impossible. goal = 0 walls = sorted(walls, key=lambda x: x[0]) def is_blocked(position): for wall in walls: if wall[0] <= position <= wall[1]: return True return False steps = 0 current = start while current != goal: if current > goal: next_step = current - 1 else: next_step = current + 1 if is_blocked(next_step): return -1 current = next_step steps += 1 return steps"},{"question":"Complete the code for a function which takes a string and returns a boolean value based on whether it is an anagram of a palindrome or not. Also, refactor the existing code to handle multiple string inputs in the form of an array, retaining the overall functionality.","solution":"from collections import Counter def is_anagram_of_palindrome(s): Returns True if the string s is an anagram of a palindrome, False otherwise. count = Counter(s) odd_count = sum(1 for count in count.values() if count % 2 != 0) # For a string to be an anagram of a palindrome, # it can have at most one character with an odd frequency. return odd_count <= 1 def are_anagrams_of_palindromes(strings): Takes a list of strings and returns a list of booleans indicating whether each string is an anagram of a palindrome. return [is_anagram_of_palindrome(s) for s in strings]"},{"question":"Create a program to generate a sequence of integers that starts at k and ends at n in the following format: [k, k+1, ..., n-1, n] where the sequence must contain an even number of elements. Implement the program in Python with a time complexity of O(1) for generating the sequence.","solution":"def generate_even_sequence(k, n): Generate a sequence of integers that starts at k and ends at n with an even number of elements. If the length of the sequence including both k and n is not even, increment n by 1. if (n - k + 1) % 2 != 0: n += 1 return list(range(k, n + 1))"},{"question":"Suggest a implementation in Python that takes a list of strings and returns a list that only contains strings of length less than 4.","solution":"def filter_short_strings(strings): Filters out strings from the list that have a length of 4 or more. Parameters: strings (list): A list of strings. Returns: list: A list containing strings with length less than 4. return [s for s in strings if len(s) < 4]"},{"question":"How do I deploy a machine learning model using Flask for a web application? I want to create a simple text classification model that can predict whether a piece of text is positive or negative. Can you provide an example of how to do this, including training the model, saving it, and using it in a Flask application?","solution":"from flask import Flask, request, jsonify import pickle from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.linear_model import LogisticRegression # 1. Train a simple text classification model # Sample training data X_train = ['I love this product', 'This is a great movie', 'I hate this item', 'This is a bad movie'] # Labels (1 for positive, 0 for negative) y_train = [1, 1, 0, 0] # Vectorize the text data vectorizer = TfidfVectorizer() X_train_tfidf = vectorizer.fit_transform(X_train) # Train a simple Logistic Regression model model = LogisticRegression() model.fit(X_train_tfidf, y_train) # Save the trained model and vectorizer with open('model.pkl', 'wb') as f: pickle.dump(model, f) with open('vectorizer.pkl', 'wb') as f: pickle.dump(vectorizer, f) # 2. Create a Flask application for model inference app = Flask(__name__) # Load the model and vectorizer with open('model.pkl', 'rb') as f: model = pickle.load(f) with open('vectorizer.pkl', 'rb') as f: vectorizer = pickle.load(f) @app.route('/predict', methods=['POST']) def predict(): data = request.json text = data['text'] text_tfidf = vectorizer.transform([text]) prediction = model.predict(text_tfidf)[0] # Convert prediction to human-readable form result = 'Positive' if prediction == 1 else 'Negative' return jsonify({'prediction': result}) # Run the app if __name__ == '__main__': app.run(debug=True)"},{"question":"Sort this array of numbers from low to high using a modified version of the bubble sort algorithm with a time complexity of O(n^2) and space complexity of O(1). The array may contain duplicate numbers and have a maximum length of 1000. If two numbers have the same value, their order in the sorted array should be the same as their original order.","solution":"def bubble_sort(arr): Sorts the array from low to high using a modified version of the bubble sort algorithm. This version maintains the stability of the sort. Time Complexity: O(n^2) Space Complexity: O(1) n = len(arr) for i in range(n): swap_occurred = False for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] swap_occurred = True if not swap_occurred: break return arr"},{"question":"Write a python program to print the fibonacci series up to n-th term using list comprehension.","solution":"def fibonacci_series(n): Returns the Fibonacci series up to the n-th term using list comprehension. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fib_series = [0, 1] + [0] * (n - 2) [fib_series.__setitem__(i, fib_series[i-1] + fib_series[i-2]) for i in range(2, n)] return fib_series"},{"question":"Formulate a for loop using Python that iterates 25 times, and at each iteration, checks a condition. If the condition is true, increment a counter, otherwise, continue to the next iteration. Condition: Check if the current iteration index (starting from 0) is a prime number. Remember, a prime number is a number that is divisible by only two distinct positive integers: 1 and itself. Additionally, include a method to check the validity of prime condition, making sure it is implemented efficiently to avoid unnecessary computational complexity.","solution":"def is_prime(n): Check if a number is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def count_primes_in_range(limit): Count how many numbers in the range from 0 to \`limit\` (exclusive) are prime. prime_count = 0 for i in range(limit): if is_prime(i): prime_count += 1 return prime_count"},{"question":"Is there a way to create a program that takes two string variables and merges them in a specific way? I want to merge them by taking one character from each string alternately. Can you provide a solution for this?","solution":"def merge_strings_alternately(str1, str2): Merges two strings alternately. Takes one character from each string alternately and merges them into a new string. If the lengths of the strings are different, the remainder of the longer string is appended at the end. Args: str1 (str): The first string. str2 (str): The second string. Returns: str: A new string with characters from str1 and str2 alternated. merged_string = [] length1, length2 = len(str1), len(str2) max_length = max(length1, length2) for i in range(max_length): if i < length1: merged_string.append(str1[i]) if i < length2: merged_string.append(str2[i]) return ''.join(merged_string)"},{"question":"Given a list of strings in Python, which could include duplicates, write a function that removes all duplicated strings, keeping just the unique strings. Your function should operate efficiently even with large lists. For bonus points, write your function such that the computational complexity does not exceed O(n log n).","solution":"def remove_duplicates(strings): Removes duplicated strings from a list, keeping just the unique strings. return list(set(strings))"},{"question":"Sam tried to phone Randy several times but was unsuccessful. After a week of not being able to reach him, Sam decided to send Randy a message through someone. Sam was worried about Randy's cat because he had not heard from Randy for a long time. Write a recursive function in Python, starting from the day Sam first attempted to call Randy, that calculates how many days have passed since then, assuming the function is called once a day.","solution":"def days_passed(day=0): Returns the number of days passed since the first day Sam tried to call Randy. This recursive function should be called once a day. return day + 1 # Example usage for clarity (this can be removed while testing): # days_passed() # Day 1 # days_passed(1) # Day 2 # days_passed(2) # Day 3"},{"question":"Create a function in Python to generate random numbers within a given range. However, the function should only use bitwise operations and not rely on any built-in random number generator functions. Additionally, the function should also use only a constant amount of memory and have a time complexity of O(log(n)), where n is the range of numbers.","solution":"def rand_in_range_bitwise(start, end): Generates a random number within the range [start, end] using bitwise operations only. Parameters: start (int): The lower bound of the range. end (int): The upper bound of the range. Returns: int: A random number within the [start, end] range. assert start <= end, 'Start of range must be less than or equal to end of range' import time seed = int((time.time() * 1000) % 1e6) range_size = end - start + 1 bits_needed = range_size.bit_length() def next_bit(): nonlocal seed # Using linear congruential generator (LCG) parameters for pseudo-randomness # These constants are fairly standard for a LCG seed = (seed * 1103515245 + 12345) & 0x7fffffff return (seed >> 16) & 1 while True: rand_number = 0 for _ in range(bits_needed): rand_number = (rand_number << 1) | next_bit() if rand_number < range_size: return start + rand_number"},{"question":"Given a string s and a character c, create a new string with all the occurrences of c in s removed. However, you are not allowed to use any built-in functions or methods that directly remove characters from a string. You can only use basic string manipulation operations such as concatenation, indexing, and iteration. The input string s can contain any printable ASCII characters. The character c can also be any printable ASCII character. Your solution should have a time complexity of O(n), where n is the length of the input string s.","solution":"def remove_character(s, c): Creates a new string with all occurrences of character \`c\` removed from the string \`s\`. result = \\"\\" for char in s: if char != c: result += char return result"},{"question":"Write a Python function that takes in a list of integers as a parameter and returns the length of the longest increasing subsequence in the list. The longest increasing subsequence is defined as the longest sequence of elements in the list that are in strictly increasing order.","solution":"def longest_increasing_subsequence(nums): Returns the length of the longest strictly increasing subsequence in the list. if not nums: return 0 dp = [1] * len(nums) # Create dp array with all elements as 1 for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Create a program that prints a pyramid of numbers with a user-defined height, where the height must be a positive integer between 1 and 10. The program should also ask for the starting number, which must be an integer between 0 and 9. The pyramid should be constructed using the starting number and incrementing by 1 for each row until the top of the pyramid is reached, then decrementing by 1 for each row until the bottom is reached. The program should validate the user inputs and display appropriate error messages if the inputs are invalid.","solution":"def print_pyramid(height, start_num): Prints a pyramid of numbers with the given height and starting number. The height must be a positive integer between 1 and 10. The start_num must be an integer between 0 and 9. Parameters: height (int): Height of the pyramid. start_num (int): Starting number for the pyramid. if not (1 <= height <= 10): print(\\"Error: The height must be a positive integer between 1 and 10.\\") return if not (0 <= start_num <= 9): print(\\"Error: The starting number must be an integer between 0 and 9.\\") return # Top part of the pyramid (ascending) for i in range(height): for _ in range(height - i - 1): print(\\" \\", end=\\"\\") for j in range(start_num, start_num + i + 1): print(j % 10, end=\\"\\") print() # Bottom part of the pyramid (descending) for i in range(height - 2, -1, -1): for _ in range(height - i - 1): print(\\" \\", end=\\"\\") for j in range(start_num, start_num + i + 1): print(j % 10, end=\\"\\") print()"},{"question":"Construct a program to find the longest substring without repeating characters in a given string.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. start = max_length = 0 used_chars = {} for index, char in enumerate(s): if char in used_chars and start <= used_chars[char]: start = used_chars[char] + 1 else: max_length = max(max_length, index - start + 1) used_chars[char] = index return max_length"},{"question":"Given this erroneous piece of code, identify and modify the issues for the correct output. Implement a function that takes 2 strings as parameters and returns the concatenation of the two strings, with a space inserted between them. For an added challenge, ensure that the function checks the input types and handles any potential exceptions gracefully.","solution":"def concatenate_strings(str1, str2): Returns the concatenation of the two input strings with a space inserted between them. Parameters: str1 (str): First input string. str2 (str): Second input string. Returns: str: Concatenated string with a space in between. Raises: ValueError: If either input is not a string. if not isinstance(str1, str): raise ValueError(\\"First argument must be a string\\") if not isinstance(str2, str): raise ValueError(\\"Second argument must be a string\\") return f\\"{str1} {str2}\\""},{"question":"Write a Python function that sets the first element of a given list to the maximum value from that list. If the list is empty, the function should raise a ValueError with the message \\"The list is empty.\\"","solution":"def set_first_element_to_max(lst): Sets the first element of lst to the maximum value from the list. Raises a ValueError if the list is empty. if not lst: raise ValueError(\\"The list is empty.\\") max_value = max(lst) lst[0] = max_value return lst"},{"question":"Write a code snippet that outputs the elements of two four-dimensional arrays of integers in alternating order. Note that you have to manage the cases where the arrays could potentially have different shapes.","solution":"import numpy as np def alternate_elements(arr1, arr2): Alternates the elements of two four-dimensional arrays and returns the result as a list. If arrays have different shapes, elements from the smaller array are exhausted first. arr1_flat = arr1.flatten() arr2_flat = arr2.flatten() max_length = max(len(arr1_flat), len(arr2_flat)) result = [] for i in range(max_length): if i < len(arr1_flat): result.append(arr1_flat[i]) if i < len(arr2_flat): result.append(arr2_flat[i]) return result # Example usage arr1 = np.array([[[[1, 2], [3, 4]], [[5, 6], [7, 8]]]]) arr2 = np.array([[[[9, 10], [11, 12]], [[13, 14], [15, 16]]]]) print(alternate_elements(arr1, arr2))"},{"question":"Given a non-square 2D matrix, transpose the array efficiently without using extra space and provide an analysis on the time and space complexities of your solution.","solution":"def transpose_matrix(matrix): Transposes a non-square 2D matrix in-place and returns the transposed matrix. if not matrix: return matrix row, col = len(matrix), len(matrix[0]) # If matrix is not square, let's create a new transposed matrix transposed = [[None]*row for _ in range(col)] for r in range(row): for c in range(col): transposed[c][r] = matrix[r][c] return transposed"},{"question":"Write a Python script that generates random prime numbers within a given range. Additionally, implement the Miller-Rabin primality test to verify the primality of the generated numbers. You must also incorporate error handling for the input parameters and optimize the code for runtime efficiency.","solution":"import random def is_prime(n, k=5): Use Miller-Rabin primality test to check if n is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0: return False r, s = 0, n - 1 while s % 2 == 0: r += 1 s //= 2 for _ in range(k): a = random.randrange(2, n - 1) x = pow(a, s, n) if x == 1 or x == n - 1: continue for _ in range(r - 1): x = pow(x, 2, n) if x == n - 1: break else: return False return True def generate_random_prime(start, end): Generate a random prime number within the given range [start, end]. if start > end: raise ValueError(\\"Start of range must be less than end of range.\\") if start < 0 or end < 0: raise ValueError(\\"Range values must be non-negative.\\") while True: candidate = random.randint(start, end) if is_prime(candidate): return candidate"},{"question":"Given a list of integers, write a Python function that prints the highest and the lowest numbers from the list, without using any built-in Python functions for determining minimum and maximum values. Also, your function should return the indices of the highest and lowest numbers in the list. If there is more than one occurrence of the highest or lowest number, return the index of the first occurrence. Assume the list will always contain at least two integers.","solution":"def find_highest_and_lowest(numbers): Prints the highest and the lowest numbers from the list and returns their indices. if len(numbers) < 2: raise ValueError(\\"List must contain at least two integers.\\") highest = lowest = numbers[0] highest_index = lowest_index = 0 for i in range(1, len(numbers)): if numbers[i] > highest: highest = numbers[i] highest_index = i if numbers[i] < lowest: lowest = numbers[i] lowest_index = i print(f\\"Highest: {highest}, Lowest: {lowest}\\") return (highest_index, lowest_index)"},{"question":"Given a series of characters, write a program in Python to find the first unique character of the given string in its order of appearance.","solution":"def first_unique_character(s): Returns the first unique character in the given string. char_count = {} # Count occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find first character that occurs only once for char in s: if char_count[char] == 1: return char return None # Example usage: # print(first_unique_character(\\"swiss\\")) # Output should be 'w'"},{"question":"Given a list of timestamps recorded in Unix time, write a function that converts these timestamps into human-readable format, specifically in Coordinated Universal Time (UTC). Additionally, the function should be able to handle time zone conversions to display the time in any of the world's time zones. For the time zone conversions, use the IANA time zone database (tz database) for city-level accuracy.","solution":"from datetime import datetime import pytz def convert_timestamps(timestamps, timezone_str='UTC'): Convert a list of Unix timestamps to human-readable format in the specified timezone. Parameters: timestamps (list of int): List of Unix timestamps. timezone_str (str): Time zone string from the IANA time zone database. Default is 'UTC'. Returns: list of str: List of human-readable timestamps in the specified timezone. tz = pytz.timezone(timezone_str) readable_timestamps = [] for ts in timestamps: utc_time = datetime.utcfromtimestamp(ts).replace(tzinfo=pytz.utc) local_time = utc_time.astimezone(tz) readable_timestamps.append(local_time.strftime(\\"%Y-%m-%d %H:%M:%S %Z%z\\")) return readable_timestamps"},{"question":"Write a Python function that takes two arguments, a list of HTML elements and a dictionary of attributes and their values. The function should return elements only with attributes that match the given key-value pairs in the dictionary. In case an element has multiple attributes, it should match all the key-value pairs in the dictionary to be included in the result. Your function should also ignore case for attribute names.","solution":"def filter_elements(elements, attrs): def match_dict(element_attrs, filter_attrs): element_attrs = {k.lower(): v for k, v in element_attrs.items()} filter_attrs = {k.lower(): v for k, v in filter_attrs.items()} for k, v in filter_attrs.items(): if element_attrs.get(k) != v: return False return True result = [] for element in elements: if match_dict(element.get(\\"attributes\\", {}), attrs): result.append(element) return result"},{"question":"Remove all duplicates in a list. The list can contain integers, strings, or a combination of both. The list can have up to 10^6 elements. The solution should have a time complexity of O(n) and a space complexity of O(1). Additionally, the solution should be implemented using only a single loop and without using any built-in functions or data structures to store intermediate results.","solution":"def remove_duplicates(lst): i = 0 while i < len(lst): j = i + 1 while j < len(lst): if lst[i] == lst[j]: lst.pop(j) else: j += 1 i += 1 return lst"},{"question":"Program a function to remove all even numbers from an array of integers. The function should also return the product of the remaining numbers in the array after the even numbers have been removed.","solution":"def remove_evens_and_product(arr): Removes all even numbers from the array and returns the product of the remaining numbers. Parameters: arr (list of int): The input array of integers. Returns: tuple: A tuple containing the new array with only odd numbers, and the product of these odd numbers. odds = [num for num in arr if num % 2 != 0] product = 1 for num in odds: product *= num return (odds, product)"},{"question":"Formulate a coding mechanism for identifying the nearest whole number as well as the two closest neighbours on either side, given a precise decimal number. Additionally, implement a feature to handle tie-breaking scenarios in case the decimal number is equidistant from two whole numbers like 4.5 or -3.5. Return the results in the form of an ordered tuple. Given decimal number: 4.7.","solution":"def nearest_numbers(decimal_number): Given a decimal number, identify the nearest whole number and its two closest neighbours on either side. Handle tie-breaking scenarios by choosing the integer that is greater in case of a tie. Args: decimal_number (float): The input decimal number. Returns: tuple: Ordered tuple containing (nearest whole number, smaller neighbour, larger neighbour). import math # Find nearest integer to the decimal number nearest = round(decimal_number) # Check if it is a tie case like 4.5 or -3.5 if decimal_number - math.floor(decimal_number) == 0.5: nearest = math.ceil(decimal_number) smaller_neighbour = nearest - 1 larger_neighbour = nearest + 1 return (nearest, smaller_neighbour, larger_neighbour)"},{"question":"Write a code that checks if a given number is in the range of 0 to 100, and further verifies if the number is a prime number or not. If the number is not in the range, the program should print an error message. If the number is in the range, the program should state if the number is a prime number or not.","solution":"def is_prime(n): Returns True if n is a prime number, False otherwise. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def check_number(n): Checks if n is in the range 0 to 100 and if so, checks whether it is a prime number or not. Returns a message based on the checks. if n < 0 or n > 100: return \\"Error: Number not in range 0 to 100.\\" elif is_prime(n): return f\\"The number {n} is a prime number.\\" else: return f\\"The number {n} is not a prime number.\\""},{"question":"Tutorials on PDEs in Python with FEniCS","solution":"def get_pde_tutorials_with_fenics(): Returns a list of recommended tutorials and resources for learning PDEs in Python using FEniCS. return [ \\"1. FEniCS Tutorial - https://fenicsproject.org/tutorial/\\", \\"2. Solving PDEs with the FEniCS Project (Books and eBooks) - https://link.springer.com/book/10.1007%2F978-3-642-23099-8\\", \\"3. Jupyter Notebooks on FEniCS - https://github.com/hplgit/fenics-tutorial\\", \\"4. FEniCS Documentation - https://fenicsproject.org/documentation/\\", \\"5. FEniCSx Tutorial (the next generation of FEniCS) - https://jorgensd.github.io/dolfinx-tutorial/\\" ]"},{"question":"Given two strings, write a Python function to check if they are rotations of each other. Additionally, the function should also determine the minimum number of rotations required to transform one string into the other. If the strings are not rotations of each other, return -1.","solution":"def is_rotation(s1, s2): Checks if s2 is a rotation of s1 and finds the minimum number of rotations required. Parameters: s1 (str): The original string. s2 (str): The string to check as a rotation. Returns: int: The minimum number of rotations required to transform s1 into s2, or -1 if s2 is not a rotation of s1. if len(s1) != len(s2): return -1 # Create a concatenated version of s1 concatenated_s1 = s1 + s1 # Check if s2 is a substring of concatenated_s1 if s2 in concatenated_s1: # Find the index of s2 in concatenated_s1 index = concatenated_s1.index(s2) return index else: return -1"},{"question":"Can you design a function in Python that selects a random verb from a list of actions and movements? The list includes: ['run', 'jump', 'swim', 'fly', 'drive', 'climb', 'crawl', 'roll', 'sprint']. The selected verb should be used to generate a sentence that describes a fictional character's physical action.","solution":"import random def select_random_verb(): Selects a random verb from a predefined list and generates a sentence describing a fictional character's physical action. verbs = ['run', 'jump', 'swim', 'fly', 'drive', 'climb', 'crawl', 'roll', 'sprint'] selected_verb = random.choice(verbs) return f\\"The character decided to {selected_verb} through the adventure.\\""},{"question":"Use Python to generate a random string of length N (where N is given as input) using lowercase alphabetic characters, uppercase alphabetic characters, and numeric digits. Additionally, the string should contain at least one uppercase alphabetic character, at least one lowercase alphabetic character, and at least one numeric digit. The generated string should be unique and not contain any repeating characters.","solution":"import random import string def generate_random_string(length): if length < 3: raise ValueError(\\"Length must be at least 3 to include all required character types\\") # Create sets of all types of required characters lower_case = set(string.ascii_lowercase) upper_case = set(string.ascii_uppercase) digits = set(string.digits) # Ensure at least one of each required type random_string = [ random.choice(string.ascii_uppercase), random.choice(string.ascii_lowercase), random.choice(string.digits) ] # The remaining characters all_characters = list(lower_case | upper_case | digits) # Union of all sets remaining_length = length - 3 # Continue picking characters ensuring no repeats while remaining_length > 0: random_char = random.choice(all_characters) if random_char not in random_string: random_string.append(random_char) remaining_length -= 1 # Shuffle the result to avoid predictable placement and return as a string random.shuffle(random_string) return ''.join(random_string)"},{"question":"Given a string \\"hello\\" and a list of single character strings ['a','e','i','o','u'. Define a function that returns a new array that contains strings of same lengths as that of the original string but only consist of vowels.","solution":"def extract_vowels(string, char_list): Returns a list containing the vowels in the input string. Parameters: string (str): The input string char_list (list): List of characters to check against Returns: list: A list containing the vowels from the input string return [char for char in string if char in char_list]"},{"question":"Write a function in Python that takes two parameters, a list of integers and a target integer. The function should return the number of times the target integer appears in the list. The list will always have at least 100 elements and will not exceed 1000 elements. The target integer will always be within the range of -1000 to 1000. The function should also handle cases where the list contains duplicate elements and return the correct count for the target integer.","solution":"def count_target_occurrences(lst, target): Returns the number of times the target integer appears in the list. Parameters: lst (list): A list of integers. target (int): The target integer to count in the list. Returns: int: The number of occurrences of the target integer in the list. return lst.count(target)"},{"question":"How would you implement a function to determine if a given number is a prime number in Python, without using the modulo operator (%)?","solution":"def is_prime(n): Determines if a given number n is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if (n // i) * i == n or (n // (i + 2)) * (i + 2) == n: return False i += 6 return True"},{"question":"Implement a function in Python that takes in two sets, A and B, as arguments. The function should return a new set containing the symmetric difference of set A and set B. The symmetric difference of two sets is defined as the set of elements that are in either of the sets, but not in their intersection.","solution":"def symmetric_difference(A, B): Returns the symmetric difference of sets A and B. The symmetric difference of two sets is defined as the set of elements that are in either of the sets, but not in their intersection. return A.symmetric_difference(B)"},{"question":"Write a Python program to check whether a given string is a palindrome or not. The program should also consider spaces and punctuation marks while determining if the string is a palindrome, which adds a layer of complexity.","solution":"import string def is_palindrome(s): Check whether the given string is a palindrome, considering spaces and punctuation. # Converting to lowercase for case insensitive comparison s = s.lower() # Keeping only alphanumeric characters (to consider spaces and punctuation in palindrome check) s = ''.join(filter(lambda x: x in string.ascii_lowercase + string.digits, s)) # Check if the cleaned string is equal to its reverse return s == s[::-1]"},{"question":"Given two strings, write a program to determine if the second string is an anagram of the first one. An anagram is a word, phrase, or name formed by rearranging the letters of another, such as cinema, formed from iceman.","solution":"def is_anagram(first, second): Determine if the \`second\` string is an anagram of the \`first\` string. Args: first (str): The source string. second (str): The string to check. Returns: bool: True if \`second\` is an anagram of \`first\`, otherwise False. # Normalize the strings by removing spaces and converting to lowercase normalized_first = ''.join(first.lower().split()) normalized_second = ''.join(second.lower().split()) # Check if their sorted characters are the same return sorted(normalized_first) == sorted(normalized_second)"},{"question":"Generate an algorithm for compressing a string by removing consecutive duplicate characters and counting them.","solution":"def compress_string(s): Compresses a string by removing consecutive duplicate characters and counting them. Parameters: s (str): The input string. Returns: str: The compressed string. if not s: return \\"\\" compressed_str = \\"\\" current_char = s[0] count = 1 for char in s[1:]: if char == current_char: count += 1 else: compressed_str += current_char + str(count) if count > 1 else current_char current_char = char count = 1 compressed_str += current_char + str(count) if count > 1 else current_char return compressed_str"},{"question":"Write a Python code that can perform an operation of inversion on a dictionary, resulting in the original values becoming keys and the original keys becoming values. This operation should be carried out in a way that ensures the newly formed dictionary remains mutable, allowing for further manipulations. Here is a simple Python script that does exactly that. Note that it will create conflicts if your original dictionary has duplicate values (as they will all map to the same key in the inverted dictionary and only the last one will be stored due to the nature of dictionaries).","solution":"def invert_dict(d): Inverts a dictionary by swapping its keys and values. return {v: k for k, v in d.items()}"},{"question":"Write a function in Python that takes a list of integers as input and returns a new list containing only the prime numbers from the input list. The function should be implemented using list comprehension.","solution":"def is_prime(n): Checks if a number n is prime. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def filter_primes(lst): Returns a list containing only the prime numbers from the input list. return [x for x in lst if is_prime(x)]"},{"question":"Given a list of strings and a set of characters, write a Python program to find the shortest string in the list which contains all the characters in the set.","solution":"def shortest_string_with_chars(strings, chars_set): def contains_all_chars(s, char_set): return all(c in s for c in char_set) shortest_string = None for s in strings: if contains_all_chars(s, chars_set): if shortest_string is None or len(s) < len(shortest_string): shortest_string = s return shortest_string"},{"question":"Develop an algorithm to perform a ternary search on a single-dimensional, pre-arranged numeric dataset. The function should be able to return the location of the sought value if present. In addition, you should implement an efficient way to handle situations where the array is not sorted in ascending order, where it would sort the array first without using built-in sort functions.","solution":"def ternary_search(arr, l, r, x): while r >= l: mid1 = l + (r - l) // 3 mid2 = r - (r - l) // 3 if arr[mid1] == x: return mid1 if arr[mid2] == x: return mid2 if x < arr[mid1]: r = mid1 - 1 elif x > arr[mid2]: l = mid2 + 1 else: l = mid1 + 1 r = mid2 - 1 return -1 def merge(arr, l, m, r): n1 = m - l + 1 n2 = r - m L = [0] * n1 R = [0] * n2 for i in range(0, n1): L[i] = arr[l + i] for j in range(0, n2): R[j] = arr[m + 1 + j] i = 0 j = 0 k = l while i < n1 and j < n2: if L[i] <= R[j]: arr[k] = L[i] i += 1 else: arr[k] = R[j] j += 1 k += 1 while i < n1: arr[k] = L[i] i += 1 k += 1 while j < n2: arr[k] = R[j] j += 1 k += 1 def merge_sort(arr, l, r): if l < r: m = l + (r - l) // 2 merge_sort(arr, l, m) merge_sort(arr, m + 1, r) merge(arr, l, m, r) def ternary_search_with_sort(arr, x): # First, sort the array without using built-in functions merge_sort(arr, 0, len(arr) - 1) # Perform ternary search on the sorted array return ternary_search(arr, 0, len(arr) - 1, x)"},{"question":"Create a function to find the number of elements in the list which have a value larger than the given number 'k' and are divisible by 3. Additionally, the function should return a list of the indices of these elements in the original list. The input list will not exceed 10^5 elements.","solution":"def count_and_find_indices(lst, k): Finds the number of elements in lst that are greater than k and divisible by 3. Returns a tuple containing the count of such elements and a list of their indices. indices = [i for i, x in enumerate(lst) if x > k and x % 3 == 0] count = len(indices) return count, indices"},{"question":"Write a Python function that takes a list of integers as input and returns the two largest numbers in the list. Ensure that your code is efficient and does not use built-in sorting functions.","solution":"def two_largest_numbers(numbers): Returns the two largest numbers in the list. If the list has less than 2 numbers, it raises a ValueError. if len(numbers) < 2: raise ValueError(\\"List must contain at least two numbers\\") first, second = float('-inf'), float('-inf') for number in numbers: if number > first: first, second = number, first elif number > second: second = number return first, second"},{"question":"Please implement a function that takes in two strings as parameters and returns true if the first string can be rotated to match the second string, and false otherwise. A string can be rotated by moving characters from the beginning of the string to the end.","solution":"def can_rotate_to_match(s1, s2): Check if string s1 can be rotated to match string s2. :param s1: The original string :param s2: The target string to match by rotating s1 :return: True if s1 can be rotated to match s2, otherwise False if len(s1) != len(s2): return False return s2 in (s1 + s1)"},{"question":"print out all the prime numbers under 1000 in python","solution":"def get_primes_under_1000(): Returns a list of all prime numbers under 1000. primes = [] for num in range(2, 1000): is_prime = True for i in range(2, int(num ** 0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Create a list of strings from a given string, splitting the string by a given delimiter. However, instead of using the typical split() function, implement your own splitting logic. Also, account for potential issues like consecutive delimiters and delimiters at the start or end of the input string.","solution":"def custom_split(input_string, delimiter): Splits the input_string into a list of strings using the given delimiter. Args: input_string (str): The string to be split. delimiter (str): The character used as the delimiter. Returns: list: A list of substrings from the input_string, split by the delimiter. result = [] current_segment = '' delimiter_length = len(delimiter) i = 0 while i < len(input_string): if input_string[i:i + delimiter_length] == delimiter: result.append(current_segment) current_segment = '' i += delimiter_length else: current_segment += input_string[i] i += 1 result.append(current_segment) return result"},{"question":"What is the method to write a script that can identify the index of the smallest number in a given array?","solution":"def index_of_smallest(array): Returns the index of the smallest number in the given array. if not array: raise ValueError(\\"The array cannot be empty\\") smallest_index = 0 for i in range(1, len(array)): if array[i] < array[smallest_index]: smallest_index = i return smallest_index"},{"question":"Develop an algorithm in Python to sort an array of integers using the quicksort algorithm","solution":"def quicksort(arr): Sorts an array of integers using the quicksort algorithm. if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right) # Example usage: # sorted_array = quicksort([3, 6, 8, 10, 1, 2, 1]) # print(sorted_array) # Output: [1, 1, 2, 3, 6, 8, 10]"},{"question":"Implement the algorithm QuickSort to sort a given array in ascending order. Additionally, incorporate a functionality to check for and handle duplicate values within the array. For testing, use the array [10, 2, 7, 4, 1, 7, 2, 10, 3].","solution":"def quicksort(arr): Sorts an array in ascending order using the QuickSort algorithm. This function also ensures duplicates are maintained in the sorted order. if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"Develop a for loop that traverses through the dictionary and returns the duplicate values with their associated keys, not just the values with \\"a\\" in them. In addition, incorporate error handling for non-iterable inputs.","solution":"def find_duplicate_values_with_keys(input_dict): Function to find and return duplicate values with their associated keys. :param input_dict: dict :return: dict containing duplicate values with their associated keys if not isinstance(input_dict, dict): raise TypeError(\\"Input must be a dictionary\\") value_to_keys = {} duplicates = {} for key, value in input_dict.items(): if value in value_to_keys: if value not in duplicates: duplicates[value] = [value_to_keys[value]] duplicates[value].append(key) else: value_to_keys[value] = key return duplicates"},{"question":"I have an input array and I want to transform it using an operation that repeats each element \`k\` times. How can I achieve this using Python?","solution":"def repeat_elements(arr, k): Returns a new array where each element in the input array is repeated k times. :param list arr: Input array to be transformed. :param int k: Number of times each element in the array should be repeated. :return: Transformed array with each element repeated k times. :rtype: list result = [] for elem in arr: result.extend([elem] * k) return result"},{"question":"Given a nested list, write code to convert the list into a nested dictionary. Each element in the nested list will contain a string as the key and either an integer or another nested list as the value. The nested list can have multiple levels of nesting. Your code should handle all possible scenarios and convert the list into a dictionary accordingly.","solution":"def list_to_dict(nested_list): Recursively converts a nested list into a nested dictionary. :param nested_list: list :return: dict result_dict = {} for key, value in nested_list: if isinstance(value, list): result_dict[key] = list_to_dict(value) else: result_dict[key] = value return result_dict"},{"question":"Write a simple Python script to display the prime numbers from 1 to 100.","solution":"def is_prime(n): Checks if a number n is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def prime_numbers_up_to_100(): Returns a list of prime numbers from 1 to 100. return [n for n in range(1, 101) if is_prime(n)]"},{"question":"Can you write a simple Python code to count the number of words in a given sentence?","solution":"def count_words(sentence): Returns the number of words in the given sentence. A word is defined as a sequence of non-space characters separated by spaces. Parameters: sentence (str): The sentence to count words in. Returns: int: The number of words in the sentence. words = sentence.split() return len(words)"},{"question":"Write a Bash script to display a given number's multiplication table up to 10. Additionally, also write a Python program for the same operation and compare the time taken by both scripts to generate the multiplication table for a given number.","solution":"import time def multiplication_table(number): Prints the multiplication table of a given number up to 10. for i in range(1, 11): print(f\\"{number} x {i} = {number * i}\\") def measure_time(number): Measures the time taken by the Python program to generate the multiplication table. start_time = time.time() multiplication_table(number) end_time = time.time() return end_time - start_time # Bash script text bash_script = #!/bin/bash number=1 for i in {1..10}; do echo \\"number x i = ((number * i))\\" done # Save the Bash script to a file with open('multiplication_table.sh', 'w') as file: file.write(bash_script)"},{"question":"Implement a function to implement Bubble Sort with a twist. Rather than sorting an array of integers, you will be sorting an array of strings based on their lexicographical order. Additionally, incorporate a parameter for reverse sorting.","solution":"def bubble_sort_strings(arr, reverse=False): Implements bubble sort to sort an array of strings lexicographically. If reverse is True, sorts in reverse lexicographical order. n = len(arr) for i in range(n-1): for j in range(n-1-i): if reverse: if arr[j] < arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] else: if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Give a code to generate a random string of length 10 that includes lowercase letters, uppercase letters, digits, and special characters.","solution":"import random import string def generate_random_string(length=10): Generate a random string of a specific length that includes lowercase letters, uppercase letters, digits, and special characters. characters = string.ascii_letters + string.digits + string.punctuation return ''.join(random.choice(characters) for _ in range(length))"},{"question":"Given a linked list that potentially contains a cycle, design an algorithm to not just detect the cycle but also find the length of the cycle. Your function should return the length of the cycle if present, or return -1 if there's no cycle.","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def cycle_length(head): This function detects a cycle in a linked list and returns the length of the cycle if present. If no cycle is present, it returns -1. :param head: ListNode :return: int slow = head fast = head # Detection phase while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: # Cycle detected return calculate_cycle_length(slow) # No cycle return -1 def calculate_cycle_length(slow): This function calculates the length of the cycle in the linked list. :param slow: ListNode :return: int current = slow length = 0 while True: current = current.next length += 1 if current == slow: break return length"},{"question":"Build a Python program that takes two lists as inputs and returns a new list with the common elements between the two lists. The program should only use set operations and not any built-in Python functions such as intersection. The returned list should be in sorted order. For example, if the input lists are [1, 2, 3, 4, 5] and [3, 4, 5, 6, 7], the program should return [3, 4, 5]. Additionally, the program should be able to handle large lists efficiently, with a time complexity of O(n), where n is the length of the longer list.","solution":"def common_elements_sorted(list1, list2): Returns a sorted list of common elements between list1 and list2 using set operations. # Convert lists to sets to find common elements set1 = set(list1) set2 = set(list2) # Find intersection of both sets common_elements = set1 & set2 # Convert the set of common elements to a sorted list and return it return sorted(list(common_elements))"},{"question":"Create a function that takes a dictionary as an argument and returns a list of all the values that have more than one corresponding key in the dictionary. Additionally, ensure that the function handles cases where the dictionary contains lists as values.","solution":"def values_with_multiple_keys(input_dict): Returns a list of all values that have more than one corresponding key in the dictionary. value_count = {} for key, value in input_dict.items(): if isinstance(value, list): value_tuple = tuple(value) else: value_tuple = value if value_tuple in value_count: value_count[value_tuple] += 1 else: value_count[value_tuple] = 1 return [list(value) if isinstance(value, tuple) else value for value, count in value_count.items() if count > 1]"},{"question":"Create a program that can perform basic arithmetic operations (addition, subtraction, multiplication, and division) using a lambda expression in Python. The program should also handle complex numbers and have the ability to take input from the user for the numbers and the operation to be performed. Additionally, the program should have a user-friendly interface with error handling for invalid inputs and operations involving zero division.","solution":"def perform_operation(a, b, operation): Perform a basic arithmetic operation on two numbers. Parameters: a, b: The numbers on which the operation is to be performed. Can be int, float or complex. operation: The arithmetic operation to perform (should be one of '+', '-', '*', '/') Returns: The result of the operation. operations = { '+': lambda x, y: x + y, '-': lambda x, y: x - y, '*': lambda x, y: x * y, '/': lambda x, y: x / y if y != 0 else float('inf') # handles division by zero } try: if operation not in operations: raise ValueError(\\"Invalid operation. Supported operations are: '+', '-', '*', '/'\\") result = operations[operation](a, b) return result except Exception as e: return str(e) # Input handling from the user def main(): print(\\"Welcome to the basic arithmetic operations program!\\") try: a = complex(input(\\"Enter the first number (supports complex numbers): \\").strip()) b = complex(input(\\"Enter the second number (supports complex numbers): \\").strip()) operation = input(\\"Enter an operation (+, -, *, /): \\").strip() result = perform_operation(a, b, operation) print(f\\"The result of {a} {operation} {b} is: {result}\\") except ValueError: print(\\"Invalid input. Please enter valid numbers and operations.\\") except ZeroDivisionError: print(\\"Error: Division by zero is undefined.\\") except Exception as e: print(f\\"An unexpected error occurred: {str(e)}\\") if __name__ == \\"__main__\\": main()"},{"question":"Write a recursive function that, given a list of integers, returns a new list of integers which contains only the even numbers from the original list.","solution":"def filter_even_numbers(numbers): Returns a new list containing only the even numbers from the original list. :param numbers: list of integers :return: list of even integers if not numbers: return [] else: head = numbers[0] tail = filter_even_numbers(numbers[1:]) if head % 2 == 0: return [head] + tail else: return tail"},{"question":"Write a Python program that creates three lists - one representing keys, one representing values, and one representing the corresponding data types for each key-value pair. The program will then construct a dictionary using these lists, where each key is associated with a value, and the data type for that value is explicitly defined and stored separately. The program should have a function that checks if the types of the values in the dictionary match the specified data types in the data types list.","solution":"def create_dictionary(keys, values, types): Creates a dictionary using the given keys, values, and types. Arguments: keys -- list of keys values -- list of values types -- list of types corresponding to each key-value pair Returns: dictionary -- a dictionary constructed from the keys and values dictionary = {} for key, value, data_type in zip(keys, values, types): dictionary[key] = value return dictionary def check_value_types(dictionary, types): Checks if the types of the values in the dictionary match the specified types. Arguments: dictionary -- the dictionary to check types -- list of expected types for each value in the dictionary Returns: bool -- True if all values match the specified types, False otherwise for key, data_type in zip(dictionary.keys(), types): if not isinstance(dictionary[key], data_type): return False return True"},{"question":"Write a Python code using a for-loop that implements binary search for a target value, y, within a sorted list, x. Make sure to also handle the case where y does not exist in the list.","solution":"def binary_search(x, y): Implements binary search for a target value y within a sorted list x. Parameters: x (list): A sorted list of elements. y: The target value to search for in the list x. Returns: int: The index of y in list x if it exists, otherwise -1. left, right = 0, len(x) - 1 while left <= right: mid = (left + right) // 2 if x[mid] == y: return mid elif x[mid] < y: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Given several matrices, write a program to rotate each of them by a given angle (90, 180, 270 or 360 degrees) in the clockwise direction. The rotation should be in place without using extra space.","solution":"def rotate_matrix(matrix, angle): Rotate the given matrix by the specified angle (90, 180, 270, or 360 degrees) in the clockwise direction in place. Parameters: matrix (list of list of int): The matrix to rotate. angle (int): The angle to rotate the matrix (should be one of 90, 180, 270, 360). Returns: None: The matrix is rotated in place. if angle not in [90, 180, 270, 360]: raise ValueError(\\"Angle must be 90, 180, 270, or 360\\") n = len(matrix) def rotate_90(matrix): Rotate the matrix by 90 degrees clockwise. Parameters: matrix (list of list of int): The matrix to rotate. Returns: None: The matrix is rotated in place. for i in range(n // 2): for j in range(i, n - i - 1): temp = matrix[i][j] matrix[i][j] = matrix[n - j - 1][i] matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1] matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1] matrix[j][n - i - 1] = temp if angle == 90: rotate_90(matrix) elif angle == 180: rotate_90(matrix) rotate_90(matrix) elif angle == 270: rotate_90(matrix) rotate_90(matrix) rotate_90(matrix) elif angle == 360: pass # Rotation by 360 degrees results in the same matrix."},{"question":"Write a Python program that generates a random password of a user-specified length. The program should ask the user for the desired password length and then print out the generated password. The password should consist of random combinations of uppercase letters, lowercase letters, and digits.","solution":"import random import string def generate_password(length): Generates a random password of specified length. Parameters: length (int): The desired length of the password. Returns: str: A random password consisting of uppercase letters, lowercase letters, and digits. if length <= 0: raise ValueError(\\"Password length must be greater than zero.\\") all_characters = string.ascii_letters + string.digits password = ''.join(random.choice(all_characters) for _ in range(length)) return password"},{"question":"Write a lambda function that checks if a number is a perfect square. Then use it in a list comprehension to generate a list of perfect squares from 1 to 1000 (inclusive). Also, write a unit test using the pytest module in Python to validate the correctness of your function.","solution":"import math # Lambda function to check if a number is a perfect square is_perfect_square = lambda x: x == math.isqrt(x) ** 2 # List comprehension to generate perfect squares from 1 to 1000 (inclusive) perfect_squares = [x for x in range(1, 1001) if is_perfect_square(x)]"},{"question":"Generate a Python program that takes a message as a string argument, then prints out the characters in the string in reverse order.","solution":"def reverse_string(message): Returns the characters in the string in reverse order. return message[::-1]"},{"question":"Write a function that not only prints the length of the strings in a given list but also sorts them in decreasing order based on their length. If two strings have the same length, sort them alphabetically. Then, return the sorted list of strings along with a new list which is comprised of the cumulative sum of the lengths of all strings up to each index. You must implement this without using any built-in Python sorting function, and your own sorting algorithm must be more efficient than bubble sort.","solution":"def get_length_and_sort_cumulative(strings): Takes a list of strings and returns a tuple where the first element is the list of strings sorted by decreasing length (and alphabetically for same length) and the second element is the cumulative sum of their lengths up to each index. def quicksort(arr): if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if len(x) > len(pivot) or (len(x) == len(pivot) and x < pivot)] middle = [x for x in arr if x == pivot] right = [x for x in arr if len(x) < len(pivot) or (len(x) == len(pivot) and x > pivot)] return quicksort(left) + middle + quicksort(right) sorted_strings = quicksort(strings) cumulative_lengths = [] current_sum = 0 for s in sorted_strings: current_sum += len(s) cumulative_lengths.append(current_sum) return sorted_strings, cumulative_lengths"},{"question":"Given two JSON strings, you need to merge them into one. If they have the same key, then you should overwrite the value from the second JSON string to the first one. Furthermore, add a piece of erroneous code as a reference, which has to be fixed before the actual implementation. Remember, the corrected piece of code should not be the final solution, only the fixed erroneous part.","solution":"import json def merge_json(json_str1, json_str2): Merges two JSON strings. If the same key is present in both JSONs, the value from the second JSON will overwrite the value from the first one. dict1 = json.loads(json_str1) dict2 = json.loads(json_str2) dict1.update(dict2) return json.dumps(dict1)"},{"question":"How do I create a web service that accepts a JSON payload and returns a response with a simple message using Python?","solution":"from flask import Flask, request, jsonify app = Flask(__name__) @app.route('/message', methods=['POST']) def message(): Accepts a JSON payload and returns a response with a simple message. if not request.is_json: return jsonify({\\"error\\": \\"Invalid JSON\\"}), 400 data = request.get_json() name = data.get(\\"name\\", \\"World\\") return jsonify({\\"message\\": f\\"Hello, {name}!\\"}), 200 if __name__ == '__main__': app.run(debug=True)"},{"question":"Construct a programming function that undertakes the task of discerning and returning the least frequently occurring element within a submitted list, where this element is considered the 'rarest'.","solution":"from collections import Counter def rarest_element(lst): Returns the least frequently occurring element in the list. If there are multiple elements with the same rarest frequency, it returns one of them. if not lst: return None # Return None if the list is empty count = Counter(lst) rarest_count = min(count.values()) for elem in count: if count[elem] == rarest_count: return elem"},{"question":"Create a Python script that prints out a block of text in a reverse pyramid format. The script needs to read the text from a file input, rather than hardcoding the text. Each line of the text should be reversed and indented by two spaces more than the previous line. The file input will be in plain text format and could contain any printable ASCII characters.","solution":"def reverse_pyramid(file_path): Reads text from a file and prints it in a reverse pyramid format. Each line of the text is reversed and indented by two spaces more than the previous line. try: with open(file_path, 'r') as file: lines = file.readlines() indent = 0 for line in lines: print(' ' * indent + line.strip()[::-1]) indent += 2 except FileNotFoundError: print(f\\"File '{file_path}' not found.\\") except Exception as e: print(f\\"An error occurred: {e}\\")"},{"question":"Create a program in Python that will find the smallest number in a list of numbers. Additionally, your program should handle the scenario where the list may contain duplicate numbers and ensure that it correctly identifies the smallest number even in such cases.","solution":"def find_smallest_number(nums): Returns the smallest number in a list of numbers. :param nums: List of numbers :return: Smallest number in the list if not nums: raise ValueError(\\"The list is empty.\\") return min(nums)"},{"question":"Write a python function to print out the first 10 fibonacci numbers in reverse order.","solution":"def reverse_fibonacci(): Prints the first 10 Fibonacci numbers in reverse order. # Generate the first 10 Fibonacci numbers fib_sequence = [0, 1] for i in range(2, 10): next_fib = fib_sequence[-1] + fib_sequence[-2] fib_sequence.append(next_fib) # Print the sequence in reverse order for num in reversed(fib_sequence): print(num) # For testing purposes, we usually avoid printing in unit tests, so this function's console output # would be what we check in a typical main execution environment. reverse_fibonacci()"},{"question":"Write a function \`merge_sorted_lists\` that takes two sorted lists (ascending order) and merges them into a single sorted list. The function should merge the lists in a way that the resulting list is also sorted in ascending order. Do not use any built-in sort functions.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into a single sorted list in ascending order. i, j = 0, 0 merged_list = [] while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 while i < len(list1): merged_list.append(list1[i]) i += 1 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Create a function in Python which takes a list and finds the second highest number in it. The input list can contain both positive and negative integers. You need to handle the case when the list has less than two elements by returning None.","solution":"def second_highest(numbers): Returns the second highest number in the list. If the list has fewer than two elements, returns None. if len(numbers) < 2: return None unique_numbers = list(set(numbers)) # Remove duplicates if len(unique_numbers) < 2: return None unique_numbers.sort(reverse=True) return unique_numbers[1]"},{"question":"Create a python script which can generate random passwords of length 8 to 16 characters consisting of upper case, lower case, digits, and special characters.","solution":"import random import string def generate_random_password(length): Generates a random password with the given length. The password contains upper case, lower case, digits, and special characters. Args: length (int): Length of the password to generate. Should be between 8 and 16. Returns: str: The generated password. if length < 8 or length > 16: raise ValueError(\\"Password length should be between 8 and 16 characters.\\") all_characters = string.ascii_letters + string.digits + string.punctuation password = ''.join(random.choice(all_characters) for _ in range(length)) return password"},{"question":"Write a Python function that accepts a list of tuples, each containing two integers. The function should return the sum of the second elements of all tuples that have the largest first element.","solution":"def sum_of_largest_first_elements(lst): Returns the sum of the second elements of all tuples that have the largest first element. Args: lst (list of tuple): A list where each element is a tuple containing two integers. Returns: int: Sum of the second elements of tuples with the largest first element. if not lst: return 0 # Find the largest first element in the list of tuples max_first = max(t[0] for t in lst) # Sum the second elements of all tuples that have the largest first element sum_second = sum(t[1] for t in lst if t[0] == max_first) return sum_second"},{"question":"Given two strings, write a Python program to find the total number of common characters present in both strings. Ignore case sensitivity and consider only alphabetic characters.","solution":"def common_characters_count(str1, str2): Returns the count of common characters present in both strings, ignoring case sensitivity and considering only alphabetic characters. set1 = set(ch.lower() for ch in str1 if ch.isalpha()) set2 = set(ch.lower() for ch in str2 if ch.isalpha()) return len(set1.intersection(set2))"},{"question":"Generate a code to take in a list of sentences, totaling no more than 100 words and output the longest sentence. The code should also exclude any sentences that contain numbers or special characters.","solution":"import re def longest_valid_sentence(sentences): Returns the longest sentence from the list of sentences that does not contain any numbers or special characters. def is_valid_sentence(sentence): # Check if the sentence contains only alphabetic characters and spaces return re.match(\\"^[A-Za-zs]+\\", sentence) # Filter out invalid sentences valid_sentences = [sentence for sentence in sentences if is_valid_sentence(sentence)] # Find the longest valid sentence by length if not valid_sentences: return \\"\\" return max(valid_sentences, key=len)"},{"question":"Write a python function to count the number of pairs in a given list whose XOR value is odd. Additionally, the function should be optimized to handle large lists efficiently.","solution":"def count_odd_xor_pairs(arr): Returns the count of pairs in the list 'arr' whose XOR value is odd. count_even = count_odd = 0 for number in arr: if number % 2 == 0: count_even += 1 else: count_odd += 1 # Every even-odd pair will have an odd XOR return count_even * count_odd"},{"question":"Given the following code snippet that attempts to calculate the area of a triangle given its base and height, find and correct the errors in the code. Also, improve the function to include validations for negative inputs and non-numeric inputs for base and height, considering a triangle's base and height should be positive numbers. Additionally, provide a set of test cases to check the correctness of your function.","solution":"def triangle_area(base, height): Calculate the area of a triangle given its base and height. The base and height must be positive numbers. # Validation for non-numeric input if not isinstance(base, (int, float)) or not isinstance(height, (int, float)): raise ValueError(\\"Base and height must be numeric values.\\") # Validation for negative or zero values if base <= 0 or height <= 0: raise ValueError(\\"Base and height must be positive numbers.\\") return 0.5 * base * height"},{"question":"Create a python code to generate a dictionary containing the frequencies of all English alphabets in a given sentence.","solution":"def alphabet_frequency(sentence): Returns a dictionary with the frequency of each English alphabet in the given sentence. frequency_dict = {} for char in sentence.lower(): if char.isalpha(): if char in frequency_dict: frequency_dict[char] += 1 else: frequency_dict[char] = 1 return frequency_dict"},{"question":"I need a Python function that can take a string as input and sort the characters in it alphabetically in descending order. Can you help me with that?","solution":"def sort_string_descending(s): Returns a string with the characters sorted in descending alphabetical order. return ''.join(sorted(s, reverse=True))"},{"question":"Given a list in Python, write a program that not only shuffles the list but also generates a plot showing the distribution of the shuffled elements. For this task, you will need to use the random module for shuffling the list, and matplotlib for plotting.","solution":"import random import matplotlib.pyplot as plt def shuffle_and_plot(data): Shuffles the given list and generates a plot showing the distribution of the shuffled elements. Parameters: data (list): The list to be shuffled. Returns: list: The shuffled list. random.shuffle(data) plt.hist(data, bins=10, edgecolor='black') plt.title('Distribution of Shuffled Elements') plt.xlabel('Value') plt.ylabel('Frequency') plt.show() return data"},{"question":"Given the following snippet of code in Python, identify the errors, fix them and then modify the function to calculate the sum of squares of elements in a list. If you get a list that contains non-integer or non-float values, your function should return None.","solution":"def sum_of_squares(lst): Returns the sum of squares of elements in a list if all elements are integers or floats. If the list contains non-integer or non-float values, it returns None. if not all(isinstance(x, (int, float)) for x in lst): return None return sum(x**2 for x in lst)"},{"question":"Using any programming language of your choice, write a function that takes in a string 'str' and an integer 'n'. The function should return a new string made up of the first 'n' characters of 'str', but with the constraint that the characters must be in reverse order. The function should also have a time complexity of O(n) and a space complexity of O(n). Additionally, the function should only use constant extra space and should not use any built-in string manipulation functions. For example, if the input is str = \\"Hello, world!\\" and n = 5, the output should be \\"olleH\\".","solution":"def reverse_first_n_characters(s, n): Returns a new string made up of the first 'n' characters of 's' reversed. :param s: Input string :param n: Number of characters to reverse from the start :return: New string with the first 'n' characters reversed if n > len(s): n = len(s) result = [] for i in range(n-1, -1, -1): result.append(s[i]) return ''.join(result)"},{"question":"Create a function that takes a dictionary as input and returns a list of all the keys in the dictionary, but only for keys that have a value that is a string and contains at least 5 characters.","solution":"def keys_with_long_string_values(d): This function takes a dictionary and returns a list of keys that have string values with at least 5 characters. return [key for key, value in d.items() if isinstance(value, str) and len(value) >= 5]"},{"question":"Write a python function that takes a string as an argument and prints it in reverse order. However, the function should also handle cases where the input is not a string and should raise a TypeError with a custom error message if the input is invalid. Additionally, the function should only reverse the string if it contains at least one special character (e.g. !@#%^&*). If the string does not contain any special characters, it should raise a ValueError with a custom error message. The function should also ignore leading and trailing whitespace in the string before checking for special characters.","solution":"def reverse_string_with_special_characters(s): Reverses the input string if it contains at least one special character. Raises a TypeError if the input is not a string. Raises a ValueError if the string does not contain any special characters. if not isinstance(s, str): raise TypeError(\\"Input must be a string\\") special_characters = set(\\"!@#%^&*\\") trimmed_string = s.strip() if any(char in special_characters for char in trimmed_string): return trimmed_string[::-1] else: raise ValueError(\\"Input string must contain at least one special character\\")"},{"question":"Generate a code to form a Pascal Triangle with the given input. The input will be a positive integer, n, where n represents the number of rows in the Pascal Triangle.","solution":"def generate_pascals_triangle(n): Generate Pascal's Triangle with n rows. :param n: Number of rows in Pascal's Triangle :return: A list of lists, representing the rows of Pascal's Triangle if n <= 0: return [] triangle = [[1]] for i in range(1, n): row = [1] for j in range(1, i): row.append(triangle[i-1][j-1] + triangle[i-1][j]) row.append(1) triangle.append(row) return triangle"},{"question":"Generate a unique 16-character password using lowercase and uppercase alphabets, numbers, and special characters. Ensure the password contains at least one of each type of character. Validate the password to ensure it meets these criteria.","solution":"import random import string def generate_password(): Generate a unique 16-character password using lowercase and uppercase alphabets, numbers, and special characters. Ensure it contains at least one of each type of character. length = 16 lower = [random.choice(string.ascii_lowercase)] upper = [random.choice(string.ascii_uppercase)] digit = [random.choice(string.digits)] special = [random.choice(string.punctuation)] all_characters = string.ascii_letters + string.digits + string.punctuation other_chars = random.choices(all_characters, k=length - 4) password_list = lower + upper + digit + special + other_chars random.shuffle(password_list) password = ''.join(password_list) return password def validate_password(password): Validate the password to ensure it meets the criteria of containing at least one lowercase letter, one uppercase letter, one digit, and one special character. if len(password) != 16: return False if not any(c in string.ascii_lowercase for c in password): return False if not any(c in string.ascii_uppercase for c in password): return False if not any(c in string.digits for c in password): return False if not any(c in string.punctuation for c in password): return False return True"},{"question":"Please write a Python program that converts a given weight in kilograms to pounds and vice versa. Also, define the formulas for this conversion in your code. To make it more interesting, implement a function that allows the user to input the weight and choose the unit of measurement they want to convert from and to. Here's a piece of code to get you started.","solution":"def kg_to_lb(kg): Convert weight from kilograms to pounds. 1 kilogram is approximately 2.20462 pounds. return kg * 2.20462 def lb_to_kg(lb): Convert weight from pounds to kilograms. 1 pound is approximately 0.453592 kilograms. return lb * 0.453592 def convert_weight(weight, from_unit, to_unit): Convert weight between kilograms and pounds. Parameters: - weight: The numerical value of the weight to convert. - from_unit: The unit of the provided weight ('kg' or 'lb'). - to_unit: The unit to convert the provided weight to ('kg' or 'lb'). Returns: - The converted weight. if from_unit == 'kg' and to_unit == 'lb': return kg_to_lb(weight) elif from_unit == 'lb' and to_unit == 'kg': return lb_to_kg(weight) else: raise ValueError(\\"Invalid unit conversion. Use 'kg' and 'lb'.\\")"},{"question":"Write a for loop in Python to calculate the factorial of the given number \\"n\\".","solution":"def factorial(n): Returns the factorial of a given number n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Using Python, create a function that takes a parameter year and returns True if the year is a leap year and False otherwise. Additionally, the function should handle erroneous inputs gracefully.","solution":"def is_leap_year(year): Return True if the given year is a leap year, False otherwise. Handles erroneous inputs gracefully by returning False. if not isinstance(year, int) or year < 0: return False if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0: return True return False"},{"question":"Write a Python program that takes a directory path as input and lists all the files in that directory in reverse alphabetical order, excluding any directories.","solution":"import os def list_files_in_reverse_alphabetical_order(directory_path): Returns a list of file names in reverse alphabetical order from the given directory path, excluding directories. if not os.path.isdir(directory_path): raise ValueError(f\\"The provided path '{directory_path}' is not a valid directory.\\") files = [f for f in os.listdir(directory_path) if os.path.isfile(os.path.join(directory_path, f))] return sorted(files, reverse=True)"},{"question":"Develop a function in Python that calculates the mean of every three consecutive numbers in a provided array. If the array doesn't have a multiple of three, the remaining numbers should be ignored.","solution":"def mean_of_triplets(arr): Returns a list of means of every three consecutive numbers in the provided array. If the array length isn't a multiple of three, the remaining numbers are ignored. means = [] for i in range(0, len(arr) - len(arr) % 3, 3): triplet = arr[i:i+3] means.append(sum(triplet) / 3) return means"},{"question":"Given a list of numbers, write a Python program to find the mode. If there are multiple modes, return a sorted list of all the modes. The program should also handle cases where the list contains duplicate values and cases where the list is empty. Additionally, the program should only use O(1) extra space, not including the input and output lists.","solution":"def find_mode(numbers): Returns the mode(s) of the list of numbers. If there are multiple modes, returns a sorted list of all modes. If the list is empty, returns an empty list. if not numbers: return [] from collections import defaultdict # Frequency dictionary to count occurrences of each number count_dict = defaultdict(int) for num in numbers: count_dict[num] += 1 max_frequency = max(count_dict.values()) # List of all numbers that have the max frequency modes = [num for num, count in count_dict.items() if count == max_frequency] return sorted(modes)"},{"question":"Create a program that inputs a list of numbers and checks if the list is sorted in ascending order.","solution":"def is_sorted_ascending(lst): Checks if the list is sorted in ascending order. Args: lst (list): List of numbers to check. Returns: bool: True if the list is sorted in ascending order, False otherwise. return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))"},{"question":"Write the code to count the number of times a specific word appears in a string. Additionally, make the search case-insensitive and check for word boundaries to avoid partial word matches.","solution":"import re def count_word_occurrences(text, word): Counts the number of times a specific word appears in a string. The search is case-insensitive and checks for word boundaries to avoid partial word matches. Parameters: text (str): The input text. word (str): The word to count occurrences of. Returns: int: The number of occurrences of the word. # Use re.IGNORECASE for case-insensitive matching and b for word boundaries pattern = r\\"b\\" + re.escape(word) + r\\"b\\" return len(re.findall(pattern, text, re.IGNORECASE))"},{"question":"Write a python function that prints out a pyramid of asterisks, with a user-specified height.","solution":"def print_pyramid(height): Prints a pyramid of asterisks with the specified height. if height < 1: return for i in range(height): # Calculate the number of spaces and asterisks spaces = ' ' * (height - i - 1) stars = '*' * (2 * i + 1) # Print each row of the pyramid print(spaces + stars)"},{"question":"Suggest a code snippet in Python to concatenate two lists, but you are not allowed to use any built-in Python functions or methods for list concatenation.","solution":"def concatenate_lists(list1, list2): Concatenates two lists without using any built-in Python functions or methods for list concatenation. result = [] for item in list1: result.append(item) for item in list2: result.append(item) return result"},{"question":"Given a 2D array of non-negative integers, replace each element in the array with the greatest element found on its row. Implement this in an efficient manner, keeping time and space complexity in mind.","solution":"def replace_with_row_max(matrix): Replace each element in the 2D list (matrix) with the greatest element found in its row. Parameters: matrix (list of list of int): 2D list of non-negative integers Returns: list of list of int: The modified matrix with each element replaced by the greatest element in its row for row in matrix: max_element = max(row) for i in range(len(row)): row[i] = max_element return matrix"},{"question":"Write a function in Python that not only converts time from 24-hour format to 12-hour format with AM/PM indicators but also validates if the input time is in correct 24-hour format. The function should throw an exception with appropriate error message in case of invalid input. The function should also consider leap year scenario for 23:59:60 time format.","solution":"from datetime import datetime def convert_time_24_to_12(time_24): Converts a given time from 24-hour format to 12-hour format with AM/PM indicators. Validates if the input time is in correct 24-hour format. :param time_24: A string representing time in 24-hour format (HH:MM:SS). :return: A string representing time in 12-hour format with AM/PM indicators. :raises ValueError: If the input time is not in valid 24-hour format. try: # Validation for leap second scenario if time_24 == \\"23:59:60\\": return \\"11:59:60 PM\\" # Parse the input time time_obj = datetime.strptime(time_24, \\"%H:%M:%S\\") # Convert to 12-hour format time_12 = time_obj.strftime(\\"%I:%M:%S %p\\") # Remove leading zeros for hours return time_12.lstrip(\\"0\\").replace(\\" 0\\", \\" \\") except ValueError: raise ValueError(\\"Invalid time input, please provide time in HH:MM:SS 24-hour format\\")"},{"question":"Write a Python program that implements a singly linked list, including methods for insertion at any given position, deletion of an element at any given position, and the ability to reverse the list.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next class SinglyLinkedList: def __init__(self): self.head = None def insert_at(self, val, pos): new_node = ListNode(val) if pos == 0: new_node.next = self.head self.head = new_node return current = self.head count = 0 while current is not None and count < pos - 1: current = current.next count += 1 if current is None: raise IndexError(\\"Position out of bounds\\") new_node.next = current.next current.next = new_node def delete_at(self, pos): if self.head is None: raise IndexError(\\"Position out of bounds\\") if pos == 0: self.head = self.head.next return current = self.head count = 0 while current.next is not None and count < pos - 1: current = current.next count += 1 if current.next is None: raise IndexError(\\"Position out of bounds\\") current.next = current.next.next def reverse(self): prev = None current = self.head while current is not None: next_node = current.next current.next = prev prev = current current = next_node self.head = prev def to_list(self): result = [] current = self.head while current is not None: result.append(current.val) current = current.next return result"},{"question":"I have a list of dictionaries in Python. How do I sort this list based on a specific key in the dictionaries? Can I do this in descending order?","solution":"def sort_list_of_dicts(lst, key, descending=False): Sort a list of dictionaries based on a specific key. Parameters: lst (list): A list of dictionaries to be sorted. key (str): The key in the dictionaries to sort by. descending (bool): Whether to sort in descending order. Defaults to False (ascending order). Returns: list: The sorted list of dictionaries. return sorted(lst, key=lambda x: x[key], reverse=descending)"},{"question":"Create a function that takes two arguments, an array and a number, and returns an array of all the indexes where the number appears in the array.","solution":"def find_indexes(arr, num): Returns a list of all indexes where the number appears in the array. Parameters: arr (list): The array to search in. num (int or float): The number to search for. Returns: list: A list of indexes where the number appears in the array. return [i for i, x in enumerate(arr) if x == num]"},{"question":"In the context of managing an ice cream stall, you have an array representing the inventory of flavors available, and another array representing the costs associated with each flavor. Your objective is to implement a function that enables a customer to specify their budget and preferred flavors, and in response, the function should return the indices of the flavors that the customer can afford. The catch is that the solution must be achieved with a time complexity that is less than O(n^2), to demonstrate the application of more advanced data structures and algorithms.","solution":"def affordable_flavors(budget, preferred_flavors, costs): Returns the indices of the preferred flavors that the customer can afford based on their budget. Parameters: budget (int): The budget the customer has. preferred_flavors (list): List of indices of the preferred flavors. costs (list): List of costs corresponding to each flavor. Returns: list: List of indices of the flavors that the customer can afford. result = [] for flavor in preferred_flavors: if costs[flavor] <= budget: result.append(flavor) return result"},{"question":"Write a program in Python that generates a list of all prime numbers within a given range. The program should take two integers as input, representing the start and end of the range, and should output a list of all prime numbers within that range, inclusive. The program should have a time complexity of O(n * sqrt(m)), where n is the size of the range and m is the maximum value in the range.","solution":"import math def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False for i in range(5, int(math.sqrt(n)) + 1, 6): if n % i == 0 or n % (i + 2) == 0: return False return True def generate_primes(start, end): primes = [] for num in range(start, end + 1): if is_prime(num): primes.append(num) return primes"},{"question":"Create a function that takes in an integer 'n' and returns a list of all prime numbers smaller than or equal to 'n'. The function should use the Sieve of Eratosthenes algorithm to generate the list of prime numbers. Additionally, the function should implement multithreading to optimize the performance of the algorithm.","solution":"import threading def sieve_of_eratosthenes(n): Returns a list of all prime numbers smaller than or equal to n using the Sieve of Eratosthenes algorithm with multithreading optimization. if n < 2: return [] primes = [True] * (n + 1) primes[0] = primes[1] = False def mark_non_primes(start, step): for i in range(start * start, n + 1, step): primes[i] = False threads = [] for p in range(2, int(n**0.5) + 1): if primes[p]: thread = threading.Thread(target=mark_non_primes, args=(p, p)) thread.start() threads.append(thread) for thread in threads: thread.join() return [num for num, is_prime in enumerate(primes) if is_prime]"},{"question":"I need to generate an array of random integers using Python. How can I write a function to accomplish this? I would like the function to take two parameters: the number of integers to generate and the maximum value each integer can have.","solution":"import random def generate_random_integers(n, max_value): Generates an array of \`n\` random integers, each between 0 and \`max_value\` inclusive. Parameters: n (int): Number of integers to generate. max_value (int): Maximum value each integer can have. Returns: list: A list containing \`n\` random integers. return [random.randint(0, max_value) for _ in range(n)]"},{"question":"Write a method to calculate the fibonacci sequence up to N numbers while utilizing memoization for optimization.","solution":"def fibonacci(n, memo=None): Returns the first n numbers of the Fibonacci sequence using memoization. if memo is None: memo = {} if n in memo: return memo[n] if n <= 0: return [] if n == 1: return [0] if n == 2: return [0, 1] # Calculate the sequence up to n-1 if not already in memo if n-1 not in memo: memo[n-1] = fibonacci(n-1, memo) # Calculate the n-th value nth_value = memo[n-1][-1] + memo[n-1][-2] # Extend the memoized list with the new value memo[n] = memo[n-1] + [nth_value] return memo[n]"},{"question":"Create a Python function that accepts a string input and returns a boolean value indicating if the given string is a pangram or not. A pangram is a sentence containing every letter of the alphabet.","solution":"def is_pangram(s): Checks if the given string is a pangram. Parameters: s (str): The input string to check. Returns: bool: True if the string is a pangram, False otherwise. alphabet = set('abcdefghijklmnopqrstuvwxyz') return alphabet <= set(s.lower())"},{"question":"I'm working with Python and I need to develop a script that allows me to rotate a bidirectional doubly linked list of integers to the left by an input number of positions. How can I achieve this?","solution":"class Node: def __init__(self, data): self.data = data self.next = None self.prev = None class DoublyLinkedList: def __init__(self): self.head = None self.tail = None def append(self, data): new_node = Node(data) if not self.head: self.head = self.tail = new_node else: self.tail.next = new_node new_node.prev = self.tail self.tail = new_node def rotate_left(self, positions): if not self.head or positions == 0: return # determine the size of the list current = self.head size = 1 while current.next: current = current.next size += 1 # if positions are greater than the size of the list, reduce it. positions = positions % size if positions == 0: return # find the node which will be the new head current = self.head for _ in range(positions - 1): current = current.next new_head = current.next new_head.prev = None current.next = None self.tail.next = self.head self.head.prev = self.tail self.head = new_head def to_list(self): result = [] current = self.head while current: result.append(current.data) current = current.next return result"},{"question":"Write a code to add two numbers given as input, where each number is a positive integer. The sum should be calculated using only bitwise operators (i.e., bit manipulation) and without using the addition operator (+). Additionally, the code should not use any loops or recursive functions.","solution":"def bitwise_add(a, b): Returns the sum of a and b using bitwise operators only. while b != 0: carry = a & b a = a ^ b b = carry << 1 return a"},{"question":"Write a function that takes a list of strings as input and returns a list of all strings that have the maximum length in the list. If there are multiple strings of the same maximum length, return all of them.","solution":"def longest_strings(strings): Returns a list of all strings that have the maximum length in the provided list. If there are multiple strings with the same maximum length, all are returned. Parameters: - strings: List of strings Returns: - List of strings with the maximum length if not strings: return [] max_length = max(len(s) for s in strings) result = [s for s in strings if len(s) == max_length] return result"},{"question":"Write a Python function to sort a list of tuples based on the sum of the absolute values of the elements in each tuple.","solution":"def sort_by_sum_abs(tuples): Sorts a list of tuples based on the sum of the absolute values of the elements in each tuple. Parameters: tuples (list of tuples): List of tuples to sort. Returns: list of tuples: Sorted list of tuples. return sorted(tuples, key=lambda t: sum(abs(x) for x in t))"},{"question":"I'm working on a project and I need to create a Python program that generates a histogram for an array of integers. How can I achieve this?","solution":"def generate_histogram(arr): Generates and returns a histogram for an array of integers. Args: arr (list): A list of integers. Returns: str: A string representation of the histogram. histogram = \\"\\" for number in arr: histogram += f\\"{number}: {'*' * number}n\\" return histogram.strip()"},{"question":"Devise a coding segment in a programming language of your choice which fundamentally functions by generating and subsequently displaying the Fibonacci sequence. However, the sequence should not just terminate at an arbitrary number, but it should conclusively end at the 10th term of the sequence, thereby necessitating the implementation of iterative or recursive logical processes to achieve this mathematical series generation. Here is a simple python solution for the problem -","solution":"def fibonacci_sequence(n): Generates the first n terms of the Fibonacci sequence. Args: n (int): the number of terms to generate. Returns: list: a list containing the first n terms of the Fibonacci sequence. sequence = [] for i in range(n): if i == 0 or i == 1: sequence.append(1) else: sequence.append(sequence[-1] + sequence[-2]) return sequence # Generate and display the first 10 terms of the Fibonacci sequence. print(fibonacci_sequence(10))"},{"question":"Write a python program that will take an input string of numbers and convert the string into a list of integers.","solution":"def string_to_list_of_integers(input_string): Converts a string of numbers separated by spaces into a list of integers. Parameters: input_string (str): A string of numbers separated by spaces. Returns: List[int]: A list of integers. return [int(x) for x in input_string.split()]"},{"question":"Please write a Python function to check if a given string is a palindrome or not. A palindrome is a word, phrase, or sequence that reads the same backward as forward, e.g., madam, kayak, or race car. Your function should ignore spaces, punctuation, and capitalization.","solution":"import re def is_palindrome(s): Checks if the given string is a palindrome, ignoring spaces, punctuation, and capitalization. Parameters: s (str): The string to check. Returns: bool: True if the string is a palindrome, False otherwise. # Remove spaces, punctuation, and convert to lower case cleaned = re.sub(r'[^A-Za-z0-9]', '', s).lower() return cleaned == cleaned[::-1]"},{"question":"Develop a Python function capable of calculating the area of overlap between two rectangles. These rectangles will be represented by tuples, each containing four elements that correspond to their respective minimum and maximum x and y coordinates. Your function should not only determine if these rectangles intersect, but also return the area of this intersection.","solution":"def overlap_area(rect1, rect2): Calculate the area of overlap between two rectangles. The rectangles are represented as tuples with (min_x, min_y, max_x, max_y). Parameters: rect1, rect2 (tuple): Tuples representing the two rectangles. Returns: int: The area of the overlap. Returns 0 if there's no overlap. # Unpack rectangle coordinates min_x1, min_y1, max_x1, max_y1 = rect1 min_x2, min_y2, max_x2, max_y2 = rect2 # Calculate overlap in the x-axis overlap_min_x = max(min_x1, min_x2) overlap_max_x = min(max_x1, max_x2) # Calculate overlap in the y-axis overlap_min_y = max(min_y1, min_y2) overlap_max_y = min(max_y1, max_y2) # Calculate the width and height of the overlapping area overlap_width = max(0, overlap_max_x - overlap_min_x) overlap_height = max(0, overlap_max_y - overlap_min_y) # Calculate and return the area of the overlap return overlap_width * overlap_height"},{"question":"Write a code to add two matrices of any size, but the matrices must have the same number of rows and columns. Additionally, you must implement the matrix addition using recursion instead of iteration.","solution":"def add_matrices_recursive(matrix1, matrix2): Adds two matrices of the same size using recursion. :param matrix1: First matrix (list of lists of integers). :param matrix2: Second matrix (list of lists of integers). :return: Sum of the two matrices (list of lists of integers). if not matrix1 or not matrix2: return [] def add_rows(row1, row2): if not row1 or not row2: return [] return [row1[0] + row2[0]] + add_rows(row1[1:], row2[1:]) return [add_rows(matrix1[0], matrix2[0])] + add_matrices_recursive(matrix1[1:], matrix2[1:])"},{"question":"Write a function in Python that takes a list of strings and checks whether the list is empty or not. If the list is not empty, check whether every string in the list is a palindrome or not. A palindrome is a word, phrase, number, or other sequence of characters that reads the same backward or forward.","solution":"def check_palindromes(lst): Checks whether the list is empty or not. If the list is not empty, checks whether every string in the list is a palindrome. Returns True if the list is empty, or if all strings in the list are palindromes. Returns False if any string in the list is not a palindrome. if not lst: return True for s in lst: if s != s[::-1]: return False return True"},{"question":"Create an algorithm to traverse a tree in level order.","solution":"from collections import deque class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def level_order_traversal(root): Perform a level order traversal on a binary tree. :param root: TreeNode, the root of the binary tree. :return: List of values in level order. if not root: return [] result = [] queue = deque([root]) while queue: node = queue.popleft() result.append(node.value) if node.left: queue.append(node.left) if node.right: queue.append(node.right) return result"},{"question":"Code an algorithm to reverse an array of positive integers and return a new array without modifying the original array.","solution":"def reverse_array(arr): Returns a new array which is the reverse of the provided array arr. :param arr: List of positive integers :return: List of positive integers return arr[::-1]"},{"question":"Generate a function that performs an element-wise multiplication of every two matrices stored within a given list of matrices. Then, the function should return the resulting matrices as a new list. Consider handling edge cases, such as if the list contains only one or no matrices, and make sure your function can deal with matrices of different sizes. The input can be a list of numpy arrays.","solution":"import numpy as np def elementwise_multiply_matrices(matrices): This function takes a list of numpy matrices, performs element-wise multiplication of every two matrices starting from the beginning of the list, and returns the resulting matrices as a list. Args: matrices (list): a list of numpy arrays (matrices). Returns: result (list): a list of numpy arrays resulted from element-wise multiplication of matrices. if not matrices or len(matrices) < 2: return matrices result = [] for i in range(1, len(matrices), 2): if matrices[i-1].shape == matrices[i].shape: result.append(np.multiply(matrices[i-1], matrices[i])) else: raise ValueError(f\\"Matrix shapes {matrices[i-1].shape} and {matrices[i].shape} do not match.\\") if len(matrices) % 2 != 0: # for the odd number of matrices, add the last unpaired matrix result.append(matrices[-1]) return result"},{"question":"Given a list of positive integers and a target number, write a Python program to find if there exists a sublist whose sum is equal to the target. You may assume that the list does not contain any zeroes.","solution":"def has_sublist_with_sum(nums, target): Determines if there exists a sublist in nums that sums up to the target. Args: nums (List[int]): List of positive integers. target (int): The target sum to find in the sublist. Returns: bool: True if there exists a sublist with sum equal to target, False otherwise. n = len(nums) # Use a set to store sums of all sublists ending at different points sublists_sum = {0} current_sum = 0 for num in nums: current_sum += num if (current_sum - target) in sublists_sum: return True sublists_sum.add(current_sum) return False"},{"question":"Given a sequence of alphanumeric characters, referred to as a string, and a set of string items, referred to as a list, your task is to code an algorithm that determines whether the initial string is included in the list. Additionally, evaluate cases where the string might appear as a substring within another string in the list. The solution should be case-insensitive.","solution":"def is_string_in_list(main_str, str_list): Determines whether the initial string is included in the list. Also evaluates cases where the string might appear as a substring within another string in the list. The comparison is case-insensitive. Parameters: main_str (str): The main string to search for. str_list (list): The list of string items to search within. Returns: bool: True if the main string is in the list or as a substring in any item in the list. False otherwise. main_str = main_str.lower() for item in str_list: if main_str in item.lower(): return True return False"},{"question":"Create a function that multiplies two large numbers (greater than 100 digits), represented as strings. This function should utilize the Karatsuba algorithm for multiplication, which is more efficient than the traditional grade-school multiplication approach for large numbers. The function should return the product as a string. Ensure the implementation correctly handles leading zeros, negative numbers, and decimal points. For testing, use the numbers: 12345678901234567890123456789012345678901234567890123456789012345678901234567890 and 987654321098765432109876543210987654321098765432109876543210987654321098765432109876543210.","solution":"def karatsuba(x, y): Multiplies two numbers using the Karatsuba algorithm. Parameters: x (str): The first number as a string. y (str): The second number as a string. Returns: str: The product of x and y as a string. # Remove leading zeros x = x.lstrip('0') y = y.lstrip('0') if not x or not y: return '0' if len(x) == 1 or len(y) == 1: return str(int(x) * int(y)) # Make the length of the numbers equal by adding leading zeros if necessary max_len = max(len(x), len(y)) x = x.zfill(max_len) y = y.zfill(max_len) n = max_len m = n // 2 x1, x0 = x[:m], x[m:] y1, y0 = y[:m], y[m:] z2 = karatsuba(x1, y1) z0 = karatsuba(x0, y0) z1 = karatsuba(str(int(x1) + int(x0)), str(int(y1) + int(y0))) result = int(z2) * 10 ** (2 * (n - m)) + (int(z1) - int(z2) - int(z0)) * 10 ** (n - m) + int(z0) return str(result) # Wrapper function to handle negative numbers and decimal points def multiply_large_numbers(x, y): Multiplies two large numbers represented as strings, handling leading zeros, negative numbers, and decimal points. Parameters: x (str): The first number as a string. y (str): The second number as a string. Returns: str: The product of x and y as a string. x = x.strip() y = y.strip() if '.' in x or '.' in y: raise ValueError(\\"This implementation does not support decimal points.\\") sign = '-' if (x[0] == '-' or y[0] == '-') and not (x[0] == '-' and y[0] == '-') else '' x = x.lstrip('-') y = y.lstrip('-') product = karatsuba(x, y) return sign + product"},{"question":"Given a list of strings, compute the length of each string and return a new list with the lengths. Additionally, identify and provide a fix any issues present in the given erroneous code snippet.","solution":"def string_lengths(strings): Returns a list of the lengths of the given strings. :param strings: List of strings :return: List of integers representing the lengths of the strings return [len(string) for string in strings]"},{"question":"Develop a Python program that reads a list of URLs from a text file and retrieves the titles of the web pages using Beautiful Soup library. Save the titles along with their corresponding URLs in a JSON file.","solution":"import requests from bs4 import BeautifulSoup import json def fetch_titles_from_urls(file_path): with open(file_path, 'r') as file: urls = file.readlines() url_titles = {} for url in urls: url = url.strip() response = requests.get(url) soup = BeautifulSoup(response.content, 'html.parser') title = soup.title.string if soup.title else 'No Title' url_titles[url] = title return url_titles def save_titles_to_json(url_titles, output_file_path): with open(output_file_path, 'w') as file: json.dump(url_titles, file, indent=4) def process_urls(file_path, output_file_path): Reads URLs from a file, fetches titles, and saves them to a JSON file. url_titles = fetch_titles_from_urls(file_path) save_titles_to_json(url_titles, output_file_path)"},{"question":"Write a code to print a human-readable description of a given HTTP status code.","solution":"def http_status_description(status_code): Returns a human-readable description of a given HTTP status code. descriptions = { 100: \\"Continue\\", 101: \\"Switching Protocols\\", 200: \\"OK\\", 201: \\"Created\\", 202: \\"Accepted\\", 203: \\"Non-Authoritative Information\\", 204: \\"No Content\\", 205: \\"Reset Content\\", 206: \\"Partial Content\\", 300: \\"Multiple Choices\\", 301: \\"Moved Permanently\\", 302: \\"Found\\", 303: \\"See Other\\", 304: \\"Not Modified\\", 305: \\"Use Proxy\\", 307: \\"Temporary Redirect\\", 400: \\"Bad Request\\", 401: \\"Unauthorized\\", 402: \\"Payment Required\\", 403: \\"Forbidden\\", 404: \\"Not Found\\", 405: \\"Method Not Allowed\\", 406: \\"Not Acceptable\\", 407: \\"Proxy Authentication Required\\", 408: \\"Request Timeout\\", 409: \\"Conflict\\", 410: \\"Gone\\", 411: \\"Length Required\\", 412: \\"Precondition Failed\\", 413: \\"Payload Too Large\\", 414: \\"URI Too Long\\", 415: \\"Unsupported Media Type\\", 416: \\"Range Not Satisfiable\\", 417: \\"Expectation Failed\\", 500: \\"Internal Server Error\\", 501: \\"Not Implemented\\", 502: \\"Bad Gateway\\", 503: \\"Service Unavailable\\", 504: \\"Gateway Timeout\\", 505: \\"HTTP Version Not Supported\\" } return descriptions.get(status_code, \\"Unknown Status Code\\")"},{"question":"Define a Python function named 'replace_case' that is equipped to accept a string input. This function should yield a version of the input string where all instances of lowercase alphabets are transmuted to their uppercase equivalents, and conversely, all the uppercase alphabets are converted to lowercase. A provided line of code has been stated below which seemingly attempts to accomplish this task but is flawed and does not work as expected. Your assignment is not only to identify and rectify these errors but also to enhance its efficiency, if possible.","solution":"def replace_case(s): Returns the input string s with lowercase letters converted to uppercase and uppercase letters converted to lowercase. return s.swapcase()"},{"question":"Write a code to create a 10 x 10 matrix containing all prime numbers. The code should only use the Sieve of Eratosthenes method for generating prime numbers and should not use any built-in functions or libraries for checking if a number is prime. Additionally, the code should be optimized to minimize the time complexity of generating the prime numbers.","solution":"def sieve_of_eratosthenes(limit): Generate a list of prime numbers up to 'limit' using the Sieve of Eratosthenes. sieve = [True] * (limit + 1) sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers for start in range(2, int(limit**0.5) + 1): if sieve[start]: for multiple in range(start*start, limit + 1, start): sieve[multiple] = False return [num for num, is_prime in enumerate(sieve) if is_prime] def generate_10x10_prime_matrix(): Generate a 10x10 matrix filled with the first 100 prime numbers using the sieve of Eratosthenes. # Approximate the range we need to sieve to get at least 100 primes limit = 550 # From prime number theorems, 550 should give us enough primes (>100) primes = sieve_of_eratosthenes(limit) # Since we need specifically 100 primes, ensure we have exactly 100 if len(primes) < 100: raise ValueError(\\"The limit is too low to find enough primes.\\") matrix = [] for i in range(10): row = primes[i*10:(i+1)*10] matrix.append(row) return matrix"},{"question":"Using the programming language Python, write a function that takes a list of integers as input and returns the median value. The function should also handle cases where the input list contains an even number of values by returning the average of the two middle values. Additionally, the input list should be sorted in ascending order before calculating the median. Finally, the function should be able to handle extremely large input lists without causing a memory overflow. Test the function using the given list of values: [2, 3, 5, 4, 1].","solution":"def find_median(numbers): Returns the median value of a list of integers. - If the list contains an even number of values, returns the average of the two middle values. - The input list is sorted in ascending order before calculating the median. if not numbers: raise ValueError(\\"The input list cannot be empty\\") numbers.sort() n = len(numbers) mid = n // 2 if n % 2 == 0: return (numbers[mid - 1] + numbers[mid]) / 2 else: return numbers[mid]"},{"question":"Write a function that takes input of a Python list and returns its reverse, but without using the built-in reverse() method, the slicing shorthand [::-1], or any other built-in or external library methods specifically designed for reversing sequences. Additionally, provide a brief explanation of your solution and its time complexity.","solution":"def reverse_list(input_list): Returns the reverse of the provided list without using the built-in reverse() method, slicing shorthand [::-1], or any other specific methods for reversing sequences. reversed_list = [] for i in range(len(input_list)-1, -1, -1): reversed_list.append(input_list[i]) return reversed_list # Explanation: # The function creates an empty list called reversed_list. Then it iterates over the input list # from the last element to the first element (using a range starting from len(input_list)-1 to 0, inclusive). # During each iteration, the current element is appended to the reversed_list. # In the end, the reversed_list holds the elements in reverse order compared to the input_list. # # Time Complexity: # The time complexity of this algorithm is O(n), where n is the number of elements in the input list. # This is because the function iterates over each element exactly once."},{"question":"Write an example of a Python function that can calculate the Fibonacci sequence of a given number.","solution":"def fibonacci(n): Returns the nth number in the Fibonacci sequence. Parameters: n (int): The position in the Fibonacci sequence to return the value of. Returns: int: The nth number in the Fibonacci sequence. if n <= 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a function in Python that takes as input a list of integers and returns a new list where each element is the square of the corresponding element in the input list. The function should be named square_list and should accept only one argument: lst: A list of integers. The function should not modify the original list and should not raise any errors if the input list contains any non-integer elements. Additionally, the function should include docstrings and comments for better code readability. In addition to this, the function should have a time complexity of O(n), where n is the number of elements in the input list.","solution":"def square_list(lst): Takes a list of integers and returns a new list where each element is the square of the corresponding element in the input list. Parameters: lst (list): A list of integers. Returns: list: A new list with the squares of the original list elements. # Using list comprehension to iterate through the list and square each element return [x**2 for x in lst if isinstance(x, int)]"},{"question":"Suggest a way to create a singly linked list in python, where each node has a data value and a pointer to the next node, and implement a method to reverse the linked list iteratively.","solution":"class ListNode: def __init__(self, data=0, next=None): self.data = data self.next = next class SinglyLinkedList: def __init__(self): self.head = None def insert(self, data): new_node = ListNode(data) new_node.next = self.head self.head = new_node def reverse_iteratively(self): prev = None current = self.head while current: next_node = current.next current.next = prev prev = current current = next_node self.head = prev def to_list(self): result = [] current = self.head while current: result.append(current.data) current = current.next return result"},{"question":"Here's a simple Python function called \\"fetch_latest_submission\\". It is designed to fetch the latest submission record for a given assignment and student from a database. Your task is to extend this function to not only fetch the latest submission but also verify its integrity.","solution":"import hashlib def fetch_latest_submission(database, student_id, assignment_id): Fetches the latest submission for the given student and assignment. Verifies the integrity of the submission. Parameters: - database: A list of dictionaries representing the database. - student_id: An integer representing the student's ID. - assignment_id: An integer representing the assignment's ID. Returns: - The latest submission dictionary if it exists and is valid, otherwise None. # Filter submissions for the given student and assignment submissions = [entry for entry in database if entry['student_id'] == student_id and entry['assignment_id'] == assignment_id] if not submissions: return None # Sort submissions by timestamp in descending order latest_submission = sorted(submissions, key=lambda x: x['timestamp'], reverse=True)[0] # Verify integrity submission_data = latest_submission['data'] given_hash = latest_submission['hash'] calculated_hash = hashlib.sha256(submission_data.encode()).hexdigest() if calculated_hash == given_hash: return latest_submission else: return None"},{"question":"reverse a given array without using any built-in reverse function, any additional array or data structure, or any loop. The solution must be recursive and the time complexity should be O(n), where n is the size of the array. The recursive function should also take into account the case where the array contains duplicate elements. arr = [1, 2, 3, 4, 5]","solution":"def reverse_array(arr, start, end): Recursively reverse the array from start to end. if start >= end: return arr[start], arr[end] = arr[end], arr[start] reverse_array(arr, start + 1, end - 1) # Wrapper function to simplify the interface def reverse(arr): reverse_array(arr, 0, len(arr) - 1)"},{"question":"Create a Python function to filter a given list of strings and return the list with the strings having length greater than the given number. The function should also ignore any strings that contain special characters.","solution":"import re def filter_strings(string_list, min_length): Filters the given list of strings and returns a list with the strings that have length greater than 'min_length' and do not contain special characters. Parameters: string_list (list of str): List of strings to be filtered. min_length (int): Minimum length of string to be included in the return list. Returns: list of str: Filtered list of strings. filtered_list = [] special_characters_pattern = re.compile(r'[^a-zA-Z0-9_ ]') for string in string_list: if len(string) > min_length and not special_characters_pattern.search(string): filtered_list.append(string) return filtered_list"},{"question":"Write a python function that takes as input an unsorted array of integers, a sum S, and a non-negative integer k. The function should return 'True' if there exist k elements in the array that sum up to S. It should return 'False' if there are not. In case there are multiple possible sets that sum up to S, you are only required to find one.","solution":"from itertools import combinations def k_elements_sum(arr, S, k): Determine if there exist k elements in arr that sum up to S. :param arr: List of integers, the input array. :param S: Integer, the target sum. :param k: Integer, the number of elements to find that sum to S. :return: Boolean, True if there are k elements that sum to S, False otherwise. for combination in combinations(arr, k): if sum(combination) == S: return True return False"},{"question":"Write a python function that takes in two strings s1 and s2, and returns the length of the longest common prefix that both strings share.","solution":"def longest_common_prefix(s1, s2): Returns the length of the longest common prefix shared by the two strings s1 and s2. min_length = min(len(s1), len(s2)) prefix_length = 0 for i in range(min_length): if s1[i] == s2[i]: prefix_length += 1 else: break return prefix_length"},{"question":"Code a Python program that accepts a list of positive integers and prints out the largest number that is a perfect square. If no perfect square exists in the list, the program should return -1.","solution":"import math def largest_perfect_square(numbers): Returns the largest number that is a perfect square from the list of positive integers. If no perfect square exists, returns -1. perfect_squares = [num for num in numbers if math.isqrt(num) ** 2 == num] return max(perfect_squares) if perfect_squares else -1"},{"question":"Create a function in Python that takes in a positive integer as input and returns a list of all prime numbers up to that input value. The list must be sorted in descending order. The function should have a time complexity of O(n log log n).","solution":"def generate_primes_up_to(n): Returns a list of all prime numbers up to n, sorted in descending order. Parameters: n (int): A positive integer Returns: list: A list of prime numbers up to n in descending order if n < 2: return [] # Implementation of Sieve of Eratosthenes to find all primes up to n is_prime = [True] * (n + 1) is_prime[0], is_prime[1] = False, False # 0 and 1 are not prime numbers p = 2 while (p * p <= n): if (is_prime[p] == True): for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 primes = [num for num, prime in enumerate(is_prime) if prime] return sorted(primes, reverse=True)"},{"question":"Write a Python3 program to reverse a stack using recursion. The program should also handle error cases where the provided stack is empty. Additionally, implement your solution so that it doesn't use any built-in or external data structures or methods (like list.reverse()), but only recursion and basic operations.","solution":"def reverse_stack(stack): Reverses a stack using recursion. Args: stack (list): A list representing the stack to be reversed. Returns: None: The stack is reversed in place. # Base case if not stack: raise ValueError(\\"Cannot reverse an empty stack\\") def insert_at_bottom(stack, item): if not stack: stack.append(item) else: temp = stack.pop() insert_at_bottom(stack, item) stack.append(temp) def reverse(stack): if stack: temp = stack.pop() reverse(stack) insert_at_bottom(stack, temp) reverse(stack)"},{"question":"Write a Python program that can count and print the frequency of each character in a given string. Input: 'Hello world'","solution":"def character_frequency(s): Returns a dictionary containing the frequency of each character in the given string. frequency = {} for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"Create a function in Python that takes a list of integers and returns a new list with the elements in reverse order, but without using any built-in functions or libraries.","solution":"def reverse_list(lst): Returns a new list with the elements in reverse order. reversed_lst = [] for i in range(len(lst) - 1, -1, -1): reversed_lst.append(lst[i]) return reversed_lst"},{"question":"Given the following list, write a program to sort it in ascending order. Additionally, your program should handle duplicate values in the list and should not use any built-in sorting functions. You are allowed to use additional data structures. The list can contain up to 10^6 elements.","solution":"def insertion_sort(arr): Sorts the given list in ascending order using the insertion sort algorithm. Handles duplicate values as well. for i in range(1, len(arr)): key = arr[i] j = i - 1 while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"Explain how to find the greatest common divisor of two numbers in Python using recursion and implement a program to find the greatest common divisor of a list of numbers. In order to increase the difficulty, you should also explain and implement a method to find the least common multiple of the list of numbers.","solution":"def gcd(a, b): Returns the greatest common divisor (GCD) of a and b using recursion. if b == 0: return a return gcd(b, a % b) def gcd_list(numbers): Returns the GCD of a list of numbers. from functools import reduce return reduce(gcd, numbers) def lcm(a, b): Returns the least common multiple (LCM) of a and b. return abs(a * b) // gcd(a, b) def lcm_list(numbers): Returns the LCM of a list of numbers. from functools import reduce return reduce(lcm, numbers)"},{"question":"Create a Google Colab Notebook for linear regression. This notebook should include a dataset, a plotting function, and an implementation of a simple linear regression model.","solution":"import numpy as np import matplotlib.pyplot as plt from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression from sklearn.metrics import mean_squared_error, r2_score # Generate synthetic data def generate_data(n_samples=100): np.random.seed(0) X = 2 * np.random.rand(n_samples, 1) y = 4 + 3 * X + np.random.randn(n_samples, 1) return X, y # Plotting function def plot_data_and_model(X, y, model=None): plt.scatter(X, y, color='blue', label='Data Points') if model: X_range = np.linspace(X.min(), X.max(), 100).reshape(-1, 1) y_pred = model.predict(X_range) plt.plot(X_range, y_pred, color='red', linewidth=2, label='Linear Regression Model') plt.xlabel('X') plt.ylabel('y') plt.legend() plt.show() # Simple linear regression model def simple_linear_regression(X, y): X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) model = LinearRegression() model.fit(X_train, y_train) y_pred = model.predict(X_test) print(f\\"Mean Squared Error: {mean_squared_error(y_test, y_pred)}\\") print(f\\"R^2 Score: {r2_score(y_test, y_pred)}\\") return model"},{"question":"Generate a Python code that takes a list of integers, prints out an array that is all True if the values are in the input list and all False otherwise. The input list can contain duplicate values and can be of any length.","solution":"def check_presence(int_list, target_list): Returns a list of booleans where each boolean indicates whether the corresponding element in the target_list is present in int_list. return [elem in int_list for elem in target_list]"},{"question":"Construct a code snippet for sorting an array of integer elements in descending order using the bubble sort algorithm.","solution":"def bubble_sort_descending(arr): Sorts an array of integers in descending order using bubble sort algorithm. Parameters: arr (list): A list of integers to be sorted. Returns: list: Sorted list in descending order. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] < arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Create a function in Python that will take two parameters: a string and an integer, and return the string repeated the amount of times specified by the integer. The function should have a time complexity of O(n), where n is the length of the string, and a space complexity of O(1).","solution":"def repeat_string(s, n): Returns the string \`s\` repeated \`n\` times. Parameters: s (str): The string to be repeated. n (int): The number of times to repeat the string. Returns: str: The repeated string. return s * n"},{"question":"You are tasked with designing a system that can accurately predict the next word in a given sentence based on the context of the previous words using a recurrent neural network (RNN). Your task is to implement the forward pass of the RNN using PyTorch, and ensure that the model can be trained to improve its predictions.","solution":"import torch import torch.nn as nn class RNNPredictor(nn.Module): def __init__(self, input_size, hidden_size, output_size, n_layers=1): super(RNNPredictor, self).__init__() self.hidden_size = hidden_size self.n_layers = n_layers self.rnn = nn.RNN(input_size, hidden_size, n_layers, batch_first=True) self.fc = nn.Linear(hidden_size, output_size) def forward(self, x, hidden): out, hidden = self.rnn(x, hidden) out = self.fc(out[:, -1, :]) # We only need the last output in the sequence return out, hidden def init_hidden(self, batch_size): return torch.zeros(self.n_layers, batch_size, self.hidden_size)"},{"question":"Can you create a Python script to determine the number of available USB ports on a computer without using any external libraries or modules?","solution":"import os def count_usb_ports(): Attempts to count the number of USB ports on a Unix-based system by looking at entries in the \`/sys/bus/usb/devices/\` directory. Returns: int: number of detected USB ports usb_devices_path = \\"/sys/bus/usb/devices/\\" if os.path.exists(usb_devices_path) and os.path.isdir(usb_devices_path): devices = os.listdir(usb_devices_path) # Filter out non-USB device directories usb_ports = [device for device in devices if os.path.isdir(os.path.join(usb_devices_path, device)) and device.startswith('usb')] return len(usb_ports) return 0"},{"question":"Given two arrays of positive integers \`nums1\` and \`nums2\`, write a function to return a 1-indexed array representing the intersection of the two arrays. The returning array should not contain duplicate elements. Additionally, implement the function using a hash table to improve efficiency over a brute force solution.","solution":"def intersection(nums1, nums2): Returns a 1-indexed array representing the intersection of nums1 and nums2. Duplicates are removed in the output. Args: nums1 (List[int]): First list of positive integers. nums2 (List[int]): Second list of positive integers. Returns: List[int]: A 1-indexed list representing the intersection of the two arrays. # Use hash sets to find the intersection set1 = set(nums1) set2 = set(nums2) # Find intersection intersection_set = set1.intersection(set2) # Convert to a list and sort it intersection_list = list(intersection_set) intersection_list.sort() # Convert to 1-indexed return [i + 1 for i in range(len(intersection_list))] # Example Usage: # nums1 = [1, 2, 2, 1] # nums2 = [2, 2] # intersection(nums1, nums2) should return [1] # nums1 = [4, 9, 5] # nums2 = [9, 4, 9, 8, 4] # intersection(nums1, nums2) should return [1, 2]"},{"question":"Can you help me write a Python function to calculate the sum of all the digits in an integer input, including handling negative numbers? If the input is not an integer, the function should return \\"Invalid input\\".","solution":"def sum_of_digits(n): Returns the sum of all the digits in an integer input. Handles negative numbers by considering only the absolute value of each digit. If the input is not an integer, returns \\"Invalid input\\". if not isinstance(n, int): return \\"Invalid input\\" n = abs(n) total_sum = 0 while n > 0: total_sum += n % 10 n //= 10 return total_sum"},{"question":"Given a string and a set of characters, write a program to determine if the string has all unique characters within the set. Additionally, ensure the string doesn't contain any character outside the set.","solution":"def is_unique_within_set(s, char_set): Checks if the string has all unique characters within the set and contains only characters from the set. :param s: The string to be checked :param char_set: The set of allowed characters :return: True if all characters are unique within the set and the string only contains characters from the set, False otherwise if len(set(s)) != len(s): return False # Not all characters are unique in the string for char in s: if char not in char_set: return False # String contains a character outside the specified set return True"},{"question":"Write some code to take a list of integers and output the sum of the integers, but with a twist: the code should also handle negative integers, and it should ignore any duplicates in the list. Additionally, the code should only consider integers that are divisible by 3. The output should be a tuple containing the sum of the integers and the number of unique integers that were added to the sum.","solution":"def sum_unique_divisible_by_three(nums): Sums the unique integers in the list that are divisible by 3. Returns a tuple containing the sum and the count of unique integers considered. unique_nums = set(filter(lambda x: x % 3 == 0, nums)) total_sum = sum(unique_nums) count = len(unique_nums) return total_sum, count"},{"question":"Given an input string, write a function to reverse the string without using any built-in string manipulation functions or tools.","solution":"def reverse_string(s): Reverses the input string without using any built-in string manipulation functions. reversed_s = \\"\\" for i in range(len(s)-1, -1, -1): reversed_s += s[i] return reversed_s"},{"question":"Write a Python code to generate the Lucas numbers up to a given number n. The Lucas numbers are similar to the Fibonacci sequence, except that the first two numbers are 2 and 1 instead of 0 and 1. Moreover, include a functionality that checks and prints whether each Lucas number is prime or not. Ensure that your code is optimized for speed and efficiency.","solution":"def lucas_numbers(n): Generates Lucas numbers up to the nth index. Also, determines whether each Lucas number is prime or not. :param n: the maximum index of Lucas number to generate :return: a list of tuples where each tuple contains a Lucas number and a boolean indicating if it is prime if n < 0: return [] lucas = [2, 1] for i in range(2, n + 1): lucas.append(lucas[-1] + lucas[-2]) def is_prime(num): if num < 2: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True result = [(num, is_prime(num)) for num in lucas[:n+1]] return result"},{"question":"Suppose you have an unsorted linked list in a programming environment. What algorithm would you implement to sort the linked list in the most efficient way? Please consider both time and space complexity.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def merge_sort_linked_list(head): if not head or not head.next: return head # Function to split the linked list into two halves def split(head): slow, fast = head, head.next while fast and fast.next: slow = slow.next fast = fast.next.next mid = slow.next slow.next = None return head, mid # Function to merge two sorted linked lists def merge(l1, l2): dummy = ListNode() tail = dummy while l1 and l2: if l1.val < l2.val: tail.next = l1 l1 = l1.next else: tail.next = l2 l2 = l2.next tail = tail.next tail.next = l1 if l1 else l2 return dummy.next # Recursive merge sort implementation left, right = split(head) left = merge_sort_linked_list(left) right = merge_sort_linked_list(right) return merge(left, right)"},{"question":"Create a function in Python to replace all occurrences of a specified element in a given list with another specified element. The function should have a time complexity of O(n), where n is the length of the list.","solution":"def replace_elements(lst, old_elem, new_elem): Replaces all occurrences of old_elem in lst with new_elem. Parameters: lst (list): The list in which to replace elements. old_elem: The element to be replaced. new_elem: The element to replace with. Returns: list: A new list with the elements replaced. return [new_elem if x == old_elem else x for x in lst]"},{"question":"Provide an implementation of the function below that computes the sum of all the numbers in a given list using recursion.","solution":"def recursive_sum(numbers): Returns the sum of all numbers in the given list using recursion. if not numbers: return 0 return numbers[0] + recursive_sum(numbers[1:])"},{"question":"Write a Python function that not only counts the number of equal numbers from three given integers, but also identifies the unique numbers and their frequency. Additionally, the function should handle any errors or exceptions that may arise during the execution.","solution":"def count_and_identify_numbers(a, b, c): Counts the number of equal numbers from three given integers, identifies the unique numbers and their frequencies. try: # Validate the inputs are integers if not (isinstance(a, int) and isinstance(b, int) and isinstance(c, int)): raise ValueError(\\"All inputs must be integers\\") # Create a list of the input numbers numbers = [a, b, c] # Count the frequency of each number using dictionary comprehension frequency = {number: numbers.count(number) for number in set(numbers)} # Calculate the count of equal numbers count_of_equal_numbers = max(frequency.values()) return count_of_equal_numbers, frequency except Exception as e: return str(e)"},{"question":"Please write a Python script that can convert multiple CSV files into multiple JSON files, each with a unique identifier. The script should read all the CSV files from a specified directory, convert them to JSON, and save each JSON file with a unique identifier in the filename. The script should also create a log file to record any errors that occur during the conversion process. The script should be well-documented and easy to read, with a clear separation of concerns and error handling.","solution":"import os import csv import json import uuid import logging def setup_logger(log_file): Sets up the logger to record errors in the log file. logging.basicConfig(filename=log_file, level=logging.ERROR, format='%(asctime)s:%(levelname)s:%(message)s') def read_csv(file_path): Reads a CSV file and returns its content as a list of dictionaries. try: with open(file_path, mode='r', newline='') as csvfile: reader = csv.DictReader(csvfile) return [row for row in reader] except Exception as e: logging.error(f\\"Failed to read CSV file {file_path}: {e}\\") return [] def write_json(data, output_dir): Writes data to a JSON file with a unique identifier. try: unique_id = uuid.uuid4() json_filename = os.path.join(output_dir, f\\"output_{unique_id}.json\\") with open(json_filename, mode='w') as jsonfile: json.dump(data, jsonfile, indent=4) except Exception as e: logging.error(f\\"Failed to write JSON file: {e}\\") def convert_csv_to_json(directory, output_dir, log_file=\\"conversion.log\\"): Converts all CSV files in the specified directory to JSON files with unique identifiers, and saves them in the output directory. setup_logger(log_file) if not os.path.exists(output_dir): os.makedirs(output_dir) for filename in os.listdir(directory): if filename.endswith(\\".csv\\"): csv_path = os.path.join(directory, filename) data = read_csv(csv_path) if data: write_json(data, output_dir) # Example usage # convert_csv_to_json('path_to_csv_directory', 'path_to_output_directory')"},{"question":"Create a comprehensive Python implementation of the Selection Sort algorithm. Your code should not only sort an array of integers but incorporate optimizations like minimizing array scanning and introduce a feature where the user can specify the sorting order (ascending or descending) as an argument.","solution":"def selection_sort(arr, order='ascending'): Sorts an array of integers using the Selection Sort algorithm. Parameters: arr (list): The list of integers to be sorted. order (str): The sorting order, either 'ascending' or 'descending'. Defaults to 'ascending'. Returns: list: The sorted list of integers. n = len(arr) for i in range(n): # Initially, assume the smallest or largest element is at the current index extremum_index = i for j in range(i + 1, n): if order == 'ascending' and arr[j] < arr[extremum_index]: extremum_index = j elif order == 'descending' and arr[j] > arr[extremum_index]: extremum_index = j # Swap the found extremum element with the element at index i arr[i], arr[extremum_index] = arr[extremum_index], arr[i] return arr"},{"question":"Complete the following Python code so it prints the Fibonacci series up to the 10th term where each term shall be the product of two previous prime numbers instead of just summing up the two previous terms. The 0th and 1st term of the series are defined as 0 and 1.","solution":"def is_prime(n): Checks if a given number n is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def next_prime(n): Generates the next prime number after n. i = n + 1 while not is_prime(i): i += 1 return i def fibonacci_prime_series(n): Generates a Fibonacci-like series with terms as the product of two previous prime numbers up to the nth term. if n <= 0: return [] if n == 1: return [0] if n == 2: return [0, 1] fib_series = [0, 1] prev_prime1, prev_prime2 = 2, 3 for i in range(2, n): next_term = prev_prime1 * prev_prime2 fib_series.append(next_term) # Move to the next primes prev_prime1, prev_prime2 = prev_prime2, next_prime(prev_prime2) return fib_series # Example usage: get Fibonacci series up to the 10th term print(fibonacci_prime_series(10))"},{"question":"Design a Python function which, upon execution, produces a dictionary where each key-value pair consists of single-letter alphabets starting from 'a' up to 'z' with their corresponding numeric position in the English alphabet as the value. For instance, 'a' maps to 1, 'b' maps to 2, and so on up to 'z' mapping to 26.","solution":"def alphabet_position_dict(): Returns a dictionary with letters 'a' to 'z' as keys and their positions in the alphabet as values. return {chr(i): i - 96 for i in range(97, 123)}"},{"question":"Given the following erroneous code, identify the mistakes and correct them to generate a binary search tree from the given list of integers [35, 15, 33, 72, 11]. Additionally, implement a method to validate if the generated tree is a valid binary search tree or not.","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key def insert(root, key): if root is None: return TreeNode(key) if key < root.val: root.left = insert(root.left, key) elif key > root.val: root.right = insert(root.right, key) return root def generate_bst(arr): if not arr: return None root = TreeNode(arr[0]) for key in arr[1:]: insert(root, key) return root def is_valid_bst(root, left=float('-inf'), right=float('inf')): if root is None: return True if not (left < root.val < right): return False return (is_valid_bst(root.left, left, root.val) and is_valid_bst(root.right, root.val, right)) # Generating the BST from the list [35, 15, 33, 72, 11] bst_root = generate_bst([35, 15, 33, 72, 11]) # Validating the generated BST is_bst_valid = is_valid_bst(bst_root)"},{"question":"Given a list of strings, write a Python program to find all pairs of strings in the list that are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. The program should return a list of tuples, where each tuple contains a pair of anagram strings. If there are more than two strings that are anagrams of each other, all possible pairs should be included in the output.","solution":"from collections import defaultdict from itertools import combinations def find_anagram_pairs(words): Find all pairs of anagram strings in the given list. Parameters: words (list of str): A list of strings to check for anagram pairs. Returns: list of tuples: A list containing tuples, each of which contains a pair of anagram strings. anagram_dict = defaultdict(list) # Group words by sorted tuple of their characters for word in words: sorted_word = ''.join(sorted(word)) anagram_dict[sorted_word].append(word) # Find all pairs of anagrams anagram_pairs = [] for anagram_group in anagram_dict.values(): if len(anagram_group) > 1: anagram_pairs.extend(combinations(anagram_group, 2)) return anagram_pairs"},{"question":"In Python, write a function that takes a list as input and prints the elements of the list in reverse order.","solution":"def print_reverse(lst): This function takes a list as input and prints its elements in reverse order. for element in reversed(lst): print(element)"},{"question":"Create a program to execute a given command-line argument, but restrict the execution to only commands related to manipulating image files (e.g., applying filters, extracting color channels, generating mosaics) and require that the program supports at least three different image file formats (e.g., JPEG, PNG, TIFF).","solution":"from PIL import Image, ImageFilter import sys def apply_filter(image_path, filter_name, output_path): Applies a specified filter to an image and saves the output. :param image_path: Path to the input image file. :param filter_name: Name of the filter to apply. :param output_path: Path to save the output image file. img = Image.open(image_path) if filter_name == 'BLUR': img = img.filter(ImageFilter.BLUR) elif filter_name == 'CONTOUR': img = img.filter(ImageFilter.CONTOUR) elif filter_name == 'DETAIL': img = img.filter(ImageFilter.DETAIL) else: raise ValueError(\\"Unsupported filter name.\\") img.save(output_path) def extract_color_channel(image_path, channel, output_path): Extracts a specified color channel from an image and saves the output. :param image_path: Path to the input image file. :param channel: Color channel to extract ('R', 'G', or 'B'). :param output_path: Path to save the output image file. img = Image.open(image_path) channels = img.split() channel_img = None if channel == 'R': channel_img = channels[0] elif channel == 'G': channel_img = channels[1] elif channel == 'B': channel_img = channels[2] else: raise ValueError(\\"Unsupported color channel.\\") channel_img.save(output_path) def generate_mosaic(image_path, tile_size, output_path): Generates a mosaic effect on an image and saves the output. :param image_path: Path to the input image file. :param tile_size: Size of the mosaic tile. :param output_path: Path to save the output image file. img = Image.open(image_path) img = img.resize((img.width // tile_size, img.height // tile_size), Image.NEAREST) img = img.resize((img.width * tile_size, img.height * tile_size), Image.NEAREST) img.save(output_path) if __name__ == \\"__main__\\": command = sys.argv[1] if command == \\"apply_filter\\": _, command, image_path, filter_name, output_path = sys.argv apply_filter(image_path, filter_name, output_path) elif command == \\"extract_color_channel\\": _, command, image_path, channel, output_path = sys.argv extract_color_channel(image_path, channel, output_path) elif command == \\"generate_mosaic\\": _, command, image_path, tile_size, output_path = sys.argv generate_mosaic(image_path, int(tile_size), output_path) else: print(\\"Unsupported command.\\")"},{"question":"Create a loop to print the first 100 prime numbers, but make sure that the loop does not use any built-in prime number checking functions or libraries. Additionally, ensure that the implementation uses a separate function to check for prime numbers.","solution":"def is_prime(n): Check if a number n is a prime number. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n ** 0.5) + 1, 2): if n % i == 0: return False return True def first_100_primes(): Print the first 100 prime numbers. prime_numbers = [] num = 2 while len(prime_numbers) < 100: if is_prime(num): prime_numbers.append(num) num += 1 return prime_numbers # Print first 100 prime numbers print(first_100_primes())"},{"question":"Write a Python program that implements the quick sort algorithm in the context of two separate classes: one class for the algorithm and another for testing its functionality. The quick sort algorithm class should include methods for sorting, selecting the pivot, and partitioning the array. The testing class should perform various operations to assess the correctness of the quick sort implementation, including sorting an array with repeated elements, sorting strings of characters, and benchmarking performance against a large array. Also, write a main function that runs these tests and prints the results, including the sorted arrays and the time it took to sort them.","solution":"import time class QuickSort: Class to implement the QuickSort algorithm. def sort(self, arr): Public method to perform quick sort on an array. if len(arr) <= 1: return arr else: return self._quick_sort(arr, 0, len(arr) - 1) def _quick_sort(self, arr, low, high): Internal method that implements the QuickSort algorithm. if low < high: pi = self.partition(arr, low, high) self._quick_sort(arr, low, pi - 1) self._quick_sort(arr, pi + 1, high) return arr def partition(self, arr, low, high): Method to handle the partitioning of the array for quick sort. pivot = arr[high] i = low - 1 # Index of smaller element for j in range(low, high): if arr[j] <= pivot: i += 1 arr[i], arr[j] = arr[j], arr[i] arr[i + 1], arr[high] = arr[high], arr[i + 1] return i + 1 class TestQuickSort: Class to test the QuickSort implementation. def test_sorting_repeated_elements(self): quick_sort = QuickSort() arr = [3, 6, 8, 3, 2, 3, 6, 9] sorted_arr = quick_sort.sort(arr) return sorted_arr == sorted(arr) def test_sorting_strings(self): quick_sort = QuickSort() arr = list(\\"quickbrownfox\\") sorted_arr = quick_sort.sort(arr) return sorted_arr == sorted(arr) def test_performance_large_array(self): quick_sort = QuickSort() import random arr = [random.randint(0, 1000000) for _ in range(10000)] start_time = time.time() quick_sort.sort(arr) end_time = time.time() return end_time - start_time def main(): testQS = TestQuickSort() # Test sorting array with repeated elements print(f\\"Test sorting array with repeated elements: {'Passed' if testQS.test_sorting_repeated_elements() else 'Failed'}\\") # Test sorting strings print(f\\"Test sorting strings: {'Passed' if testQS.test_sorting_strings() else 'Failed'}\\") # Test performance on a large array time_taken = testQS.test_performance_large_array() print(f\\"Time taken for sorting a large array: {time_taken:.4f} seconds\\") if __name__ == \\"__main__\\": main()"},{"question":"Write a comprehensive Python program to create an inventory management system for a store. The system should include a function to add a new item to the inventory, which should have the following attributes: item ID, item name, quantity in stock, cost price, and selling price.","solution":"class InventoryItem: def __init__(self, item_id, item_name, quantity, cost_price, selling_price): self.item_id = item_id self.item_name = item_name self.quantity = quantity self.cost_price = cost_price self.selling_price = selling_price class InventoryManagementSystem: def __init__(self): self.inventory = {} def add_item(self, item_id, item_name, quantity, cost_price, selling_price): if item_id in self.inventory: raise ValueError(f\\"Item ID {item_id} already exists in the inventory.\\") new_item = InventoryItem(item_id, item_name, quantity, cost_price, selling_price) self.inventory[item_id] = new_item def get_item(self, item_id): return self.inventory.get(item_id, None) def update_quantity(self, item_id, quantity): if item_id in self.inventory: self.inventory[item_id].quantity += quantity else: raise ValueError(f\\"Item ID {item_id} does not exist in the inventory.\\") def update_price(self, item_id, cost_price=None, selling_price=None): if item_id in self.inventory: if cost_price is not None: self.inventory[item_id].cost_price = cost_price if selling_price is not None: self.inventory[item_id].selling_price = selling_price else: raise ValueError(f\\"Item ID {item_id} does not exist in the inventory.\\")"},{"question":"Write a check function in Python that takes two integer arrays as input and compares them for equality. The function should return True if both arrays have the same length and all corresponding elements are equal, and False otherwise. Also, identify and correct any errors in the provided code snippet.","solution":"def arrays_equal(array1, array2): Compares two integer arrays for equality. Parameters: array1 (list): The first array to compare. array2 (list): The second array to compare. Returns: bool: True if both arrays have the same length and all corresponding elements are equal, False otherwise. if len(array1) != len(array2): return False for i in range(len(array1)): if array1[i] != array2[i]: return False return True"},{"question":"Python: How to exclude a specific keyword argument from a method's signature when using functools.partial?","solution":"from functools import partial, wraps def exclude_keyword_argument(func, excluded_arg): Wraps a function to exclude a specific keyword argument. @wraps(func) def wrapper(*args, **kwargs): kwargs.pop(excluded_arg, None) return func(*args, **kwargs) return wrapper # For example usage: def example_function(a, b, c=None, d=None): return (a, b, c, d) # Excluding the keyword argument 'd' example_function_with_exclusion = exclude_keyword_argument(example_function, 'd')"},{"question":"Write a Python program that calculates the median of a list of numbers given by the user. If the list has an even number of elements, the program should calculate the average of the two middle numbers. The program should handle any exceptions that may occur during execution, such as empty lists or non-numeric input. Use a try-except block for this purpose.","solution":"def calculate_median(numbers): Calculates the median of a list of numbers. If the list has an even number of elements, calculates the average of the two middle numbers. Handles empty list and non-numeric input exceptions. if not numbers: raise ValueError(\\"The list is empty.\\") try: sorted_numbers = sorted(float(num) for num in numbers) except ValueError as e: raise ValueError(\\"The list contains non-numeric values.\\") from e n = len(sorted_numbers) middle = n // 2 if n % 2 == 0: return (sorted_numbers[middle - 1] + sorted_numbers[middle]) / 2.0 else: return sorted_numbers[middle]"},{"question":"Create a Python program that adds two numbers and then multiplies the result by a third number. Also, include error handling for invalid inputs.","solution":"def add_and_multiply(a, b, c): Adds two numbers (a and b) and then multiplies the result by a third number (c). Returns the calculated result. try: # Convert inputs to floats to allow for integer and float arithmetic a = float(a) b = float(b) c = float(c) except ValueError: # Handle the case where conversion to float fails raise ValueError(\\"All inputs must be numbers\\") addition_result = a + b multiplication_result = addition_result * c return multiplication_result"}]`),F={name:"App",components:{PoemCard:C},data(){return{searchQuery:"",visibleCount:4,poemsData:I,isLoading:!1}},computed:{filteredPoems(){const i=this.searchQuery.trim().toLowerCase();return i?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(i)||e.solution&&e.solution.toLowerCase().includes(i)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(i=>setTimeout(i,1e3)),this.visibleCount+=4,this.isLoading=!1}}},E={class:"search-container"},j={class:"card-container"},z={key:0,class:"empty-state"},N=["disabled"],S={key:0},L={key:1};function D(i,e,l,m,s,a){const f=g("PoemCard");return n(),r("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",E,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),_(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>s.searchQuery=o),placeholder:"Search..."},null,512),[[y,s.searchQuery]]),s.searchQuery?(n(),r("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>s.searchQuery="")}," ✕ ")):u("",!0)]),t("div",j,[(n(!0),r(b,null,v(a.displayedPoems,(o,p)=>(n(),w(f,{key:p,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),r("div",z,' No results found for "'+d(s.searchQuery)+'". ',1)):u("",!0)]),a.hasMorePoems?(n(),r("button",{key:0,class:"load-more-button",disabled:s.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[s.isLoading?(n(),r("span",L,"Loading...")):(n(),r("span",S,"See more"))],8,N)):u("",!0)])}const W=c(F,[["render",D],["__scopeId","data-v-e9e728ef"]]),M=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"drive/19.md","filePath":"drive/19.md"}'),V={name:"drive/19.md"},H=Object.assign(V,{setup(i){return(e,l)=>(n(),r("div",null,[x(W)]))}});export{M as __pageData,H as default};
