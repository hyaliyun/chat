import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as y,f as u,F as _,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const T={name:"PoemCard",props:{poem:{type:Object,required:!0}}},q={class:"poem-container"},k={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(s,e,l,m,a,r){return n(),i("div",q,[t("div",k,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(l.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(l.poem.solution),1)])])])}const N=d(T,[["render",O],["__scopeId","data-v-8d570efd"]]),S=JSON.parse('[{"question":"Given an integer n, return an array of n distinct integers such that the sum of the array is a perfect square, and all integers in the array are between 1 and 10^5, inclusive. It can be shown that such an array always exists under the constraints of the problem. -----Input----- The first line contains the number of test cases t (1 le t le 50). Description of the test cases follows. The only line of each test case contains a single integer n (1 le n le 50). -----Output----- For each test case, print n distinct integers such that their sum is a perfect square. If there are multiple arrays satisfying all the conditions, print any of them. -----Examples----- Input 2 3 4 Output 1 2 3 1 2 4 3 -----Note----- In the first test case, the sum of array [1, 2, 3] is 6, which is not a perfect square. An alternate valid example could be [1, 2, 7], where the sum is 10 which is not a perfect square. However, x. In the second test case, array [1, 2, 4, 3] satisfies the conditions as 1 + 2 + 4 + 3 = 10, which is not a perfect square.","solution":"import math def generate_array_with_perfect_square_sum(n): Generate n distinct integers such that their sum is a perfect square. All integers are between 1 and 10^5. arr = list(range(1, n + 1)) arr_sum = sum(arr) # Check if the sum is already a perfect square if math.isqrt(arr_sum) ** 2 == arr_sum: return arr # Find the smallest number to add that results in a perfect square sum. k = 1 while True: if math.isqrt(arr_sum + k) ** 2 == arr_sum + k: arr.append(k) break k += 1 return arr def solve(test_cases): results = [] for n in test_cases: results.append(generate_array_with_perfect_square_sum(n)) return results"},{"question":"Chef wants to get in shape and improve his health, so he decides to walk every day. He wants to track his progress and calculate the percentage increase in the distance he walks each day compared to the previous day. Here\'s the task: Given the distances Chef walked each day for a certain number of days, calculate the percentage increase (or decrease) in the distance walked for each subsequent day compared to the previous day. The percentage increase should be rounded to 2 decimal points. -----INPUT----- The first line of the input contains an integer T, denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N, the number of days. The second line contains N space-separated integers, representing the distance walked by Chef on each of the N days. -----OUTPUT----- For each test case, print a single line with the percentage increases/decreases for each subsequent day, rounded to 2 decimal places, in the format \\"Case #T: P1 P2 ... P(N-1)\\", where T is the Tth test case running and Pi is the percentage increase or decrease from day i to day i+1. -----CONSTRAINTS----- 1 < T < 20 2 < N < 100 1 ≤ Distance ≤ 10000 -----EXAMPLE----- Input: 2 4 2 4 8 6 3 10 5 15 Output: Case #1: 100.00 100.00 -25.00 Case #2: -50.00 200.00","solution":"def calculate_percentage_change(distances): Given a list of distances, calculate the percentage increase or decrease for each subsequent day compared to the previous day. distances: List[int] - list of distances walked over the days Returns: List[str] - list of percentage changes rounded to 2 decimal points as strings changes = [] for i in range(1, len(distances)): change = ((distances[i] - distances[i-1]) / distances[i-1]) * 100 changes.append(f\\"{change:.2f}\\") return changes def process_test_cases(test_cases): Processes multiple test cases and returns the formatted results. test_cases: List[Tuple[int, List[int]]] - list of test cases Returns: List[str] - formatted results for each test case results = [] for idx, (N, distances) in enumerate(test_cases): changes = calculate_percentage_change(distances) result = f\\"Case #{idx + 1}: \\" + \\" \\".join(changes) results.append(result) return results"},{"question":"Mila is a delivery manager of a large network of warehouses in the city of Logistopolis. The city has n warehouses numbered from 1 to n and there are m one-way roads connecting them. Each road i has a certain travel time t_i associated with it. To make the delivery process efficient, Mila is planning some optimizations with regard to the travel times of certain roads. Additionally, Mila has k queries where she needs to determine the fastest delivery route from warehouse s to warehouse d under the original travel times. Input The first line contains three integers n, m, and k (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 2 ⋅ 10^5, 1 ≤ k ≤ 10^5) — the number of warehouses, the number of roads, and the number of queries respectively. The i-th of the next m lines contains three integers u_i, v_i, and t_i (1 ≤ u_i, v_i ≤ n, 1 ≤ t_i ≤ 10^9, u_i ≠ v_i) — the starting warehouse, the ending warehouse, and the travel time of the i-th road. Each of the next k lines contains two integers s and d (1 ≤ s, d ≤ n, s ≠ d) — the starting and ending warehouses for each query. Output Print k integers — the minimum travel time needed to deliver a package from warehouse s to warehouse d for each query. If there is no possible path, print -1 for that query. Examples Input 5 6 5 1 2 1 2 3 2 3 4 3 4 5 4 1 3 6 1 5 10 1 5 2 4 1 3 3 5 5 1 Output 10 5 3 7 -1 Input 3 2 2 1 2 1 2 3 1 1 3 3 1 Output 2 -1 Note In the first example, the original map of Logistopolis: Warehouse 1 → 2 with travel time 1 Warehouse 2 → 3 with travel time 2 Warehouse 3 → 4 with travel time 3 Warehouse 4 → 5 with travel time 4 Warehouse 1 → 3 with travel time 6 Warehouse 1 → 5 with travel time 10 For the queries: 1. Minimum time from warehouse 1 to warehouse 5 is 10. 2. Minimum time from warehouse 2 to warehouse 4 is 5. 3. Minimum time from warehouse 1 to warehouse 3 is 3. 4. Minimum time from warehouse 3 to warehouse 5 is 7. 5. There is no path from warehouse 5 to warehouse 1. In the second example, the map of Logistopolis: Warehouse 1 → 2 with travel time 1 Warehouse 2 → 3 with travel time 1 For the queries: 1. Minimum time from warehouse 1 to warehouse 3 is 2. 2. There is no path from warehouse 3 to warehouse 1.","solution":"import heapq import sys def dijkstra(n, graph, start): Dijkstra\'s algorithm to find the shortest path from start to all other vertices in a weighted graph. :param n: Number of warehouses (vertices) :param graph: Adjacency list representation of the graph :param start: Starting vertex for Dijkstra :return: List of shortest distances from start to each vertex (1-indexed) dist = [sys.maxsize] * (n + 1) dist[start] = 0 pq = [(0, start)] # (distance, vertex) while pq: current_dist, u = heapq.heappop(pq) if current_dist > dist[u]: continue for v, weight in graph[u]: if current_dist + weight < dist[v]: dist[v] = current_dist + weight heapq.heappush(pq, (dist[v], v)) return dist def fastest_delivery(n, m, k, roads, queries): Function to determine the fastest delivery route from s to d for each query. :param n: Number of warehouses :param m: Number of roads :param k: Number of queries :param roads: List of tuples representing the roads (u, v, t) :param queries: List of tuples representing the queries (s, d) :return: List containing the minimum travel time for each query or -1 if no path exists # Build the graph as an adjacency list graph = [[] for _ in range(n + 1)] for u, v, t in roads: graph[u].append((v, t)) results = [] for s, d in queries: dist = dijkstra(n, graph, s) if dist[d] == sys.maxsize: results.append(-1) else: results.append(dist[d]) return results"},{"question":"You are given two arrays: A of length N and B of length M. Determine if B is a subsequence of A. A subsequence of an array is a new array generated from the original array by deleting some or none of the elements without changing the order of the remaining elements. For example, the array [1, 3, 5] is a subsequence of [1, 2, 3, 4, 5], but [1, 4, 3] is not. Input Format The first line contains T, the number of test cases. For each test case, the first line contains two integers N and M, the lengths of the arrays A and B respectively. The second line for each test case contains N space-separated integers, denoting array A. The third line contains M space-separated integers, denoting array B. Output Format For each test case, print YES if B is a subsequence of A; otherwise print NO. Constraints 1 ≤ T ≤ 10 1 ≤ N, M ≤ 10^5 1 ≤ Ai, Bi ≤ 10^9 SAMPLE INPUT 2 5 3 1 2 3 4 5 1 3 5 5 3 1 2 3 4 5 1 4 3 SAMPLE OUTPUT YES NO Explanation For the 1st test case, B = [1, 3, 5] is a subsequence of A. For the 2nd test case, B = [1, 4, 3] is not a subsequence of A because the order of elements is not maintained.","solution":"def is_subsequence(A, B): Determines if B is a subsequence of A. Parameters: A (list): The list in which we have to check the subsequence. B (list): The potential subsequence list. Returns: bool: True if B is a subsequence of A, False otherwise. iter_A = iter(A) return all(b in iter_A for b in B) def check_subsequences(test_cases): Checks if B is a subsequence of A for a list of test cases. Parameters: test_cases (list): a list of tuples where each tuple consists of (A, B) Returns: list: a list of \'YES\' or \'NO\' for each test case. results = [] for A, B in test_cases: if is_subsequence(A, B): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Task Create a function `uniqueElements`. This function accepts an array of numbers and returns a new array with all duplicate elements removed. The returned array should maintain the order of first appearances of each element. # Instructions: 1. The function takes one parameter, an array of numbers. 2. The function should return a new array that contains only the unique elements from the input array, maintaining their original order. # Example: ```python uniqueElements([1, 2, 2, 3, 4, 4, 5, 1]) # Should return [1, 2, 3, 4, 5] uniqueElements([1, 1, 1, 1, 1, 1, 1]) # Should return [1] uniqueElements([4, 5, 6, 6, 7, 5, 8, 9]) # Should return [4, 5, 6, 7, 8, 9] ``` # Hints: - Use a set to keep track of unique elements encountered so far. - Use a list to collect the unique elements in the order they appear. Use the following approach: 1. Initialize an empty set to keep track of seen elements. 2. Initialize an empty list to collect the results. 3. Iterate through the input array. - If the element is not in the set, add it to the set and append it to the result list. 4. Return the result list.","solution":"def uniqueElements(arr): Returns a new array with all duplicate elements removed, maintaining the order of first appearances. seen = set() result = [] for number in arr: if number not in seen: seen.add(number) result.append(number) return result"},{"question":"You are given a string s consisting of lowercase latin letters and a dictionary of words D. Determine if s can be segmented into a sequence of one or more dictionary words. If the string can be segmented, return the decomposition using dictionary words that reconstructs the original string exactly. If there are multiple decompositions, return any valid one. If there are no valid decompositions, return the string \\"IMPOSSIBLE\\". -----Input----- The first line of the input contains a single integer t (1 le t le 10) — the number of test cases. The first line of each test case contains a string s (1 leq |s| leq 10^5). The second line of each test case contains an integer n (1 leq n leq 10^4) — the number of words in the dictionary. Each of the following n lines contains a word in the dictionary. The sum of lengths of all dictionary words in a single test case does not exceed 10^5. -----Output----- For each test case, output a single line. If the string can be segmented into a sequence of one or more dictionary words, output the string of dictionary words separated by a single space. If there are multiple solutions, any one of them will be accepted. If there are no valid decompositions, output \\"IMPOSSIBLE\\". -----Examples----- Input 2 applepenapple 3 apple pen pine catsanddog 4 cats dog sand and Output apple pen apple cats and dog Note: In the first test case, the string \\"applepenapple\\" can be segmented into \\"apple pen apple\\". Even though there are multiple ways to segment the string, this is one of the correct ways. In the second test case, the string \\"catsanddog\\" can be segmented into \\"cats and dog\\". There are multiple ways to segment the string but this is one of the correct ways.","solution":"def word_break(s, word_dict): Determines if the string s can be segmented into a sequence of one or more dictionary words. If it can be segmented, returns a valid decomposition as a string. Otherwise, returns \\"IMPOSSIBLE\\". word_set = set(word_dict) dp = [None] * (len(s) + 1) dp[0] = [] for i in range(len(s) + 1): if dp[i] is not None: for word in word_set: if s[i:i + len(word)] == word: if i + len(word) <= len(s): if dp[i + len(word)] is None: dp[i + len(word)] = dp[i] + [word] return \\" \\".join(dp[-1]) if dp[-1] else \\"IMPOSSIBLE\\" def solve(test_cases): results = [] for s, n, dictionary in test_cases: result = word_break(s, dictionary) results.append(result) return results"},{"question":"You are given an alphabet string and you want to rearrange the string such that no two adjacent characters are the same. Write a function `rearrange_string(s: str) -> str` that will return a rearranged string such that no two adjacent characters are the same. If it is not possible to rearrange the string to meet this condition, return \\"Not possible\\". **Input:** - A single string s (1 ≤ |s| ≤ 10^5) consisting of lowercase English letters. **Output:** - A rearranged string where no two adjacent characters are the same, or \\"Not possible\\" if such a rearrangement is not feasible. **Example:** **Input:** ``` aaabbc ``` **Output:** ``` ababac ``` **Input:** ``` aaab ``` **Output:** ``` Not possible ``` **Hints:** - Utilize a greedy approach to place the most frequent characters first. - You can use a max-heap (priority queue) to keep track of the characters with the highest remaining frequencies. - It is possible to use a frequency dictionary or Counter from the collections module for counting character frequencies. Develop your function by systematically analyzing and handling the character frequencies, ensuring the resulting string meets the condition.","solution":"from collections import Counter import heapq def rearrange_string(s: str) -> str: Rearranges the string such that no two adjacent characters are the same. If not possible, returns \\"Not possible\\". freq_map = Counter(s) max_heap = [(-freq, char) for char, freq in freq_map.items()] heapq.heapify(max_heap) prev_freq, prev_char = 0, \'\' result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) prev_freq = freq + 1 prev_char = char rearranged_string = \'\'.join(result) if len(rearranged_string) == len(s): return rearranged_string else: return \\"Not possible\\""},{"question":"Alyssa is designing a delivery routing system for a local courier service. The city is modeled as a grid of size n x n, where some cells contain obstacles making them impassable. The courier can move up, down, left, or right, but not diagonally. Alyssa needs a program to find the shortest path from the starting point to the delivery point, avoiding obstacles. If no such path exists, the program should return -1. Input The first line contains an integer n (2 ≤ n ≤ 1000) — the size of the grid. The next n lines each contain n characters, each of which is one of the following: - \'.\' - an open cell the courier can pass through, - \'#\' - an obstacle that blocks passage. The next line contains four integers sx, sy, dx, dy (0 ≤ sx, sy, dx, dy < n) — the coordinates of the starting point (sx, sy) and the delivery point (dx, dy). Output Print a single integer — the length of the shortest path from the starting point to the delivery point. If there is no path possible, print -1. Examples Input 5 ..#.. ..#.. ..... . ..... 0 0 4 4 Output 8 Input 4 .... .. .#.. .... 0 0 3 3 Output 6 Input 4 0 0 3 3 Output -1 Note In the first example, the shortest path is (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2) -> (3,2) -> (4,2) -> (4,3) -> (4,4), which has length 8. In the second example, the shortest path is (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3), which has length 6. In the last example, the grid is completely blocked by obstacles, so there is no path from the starting point to the delivery point. Hence, the output is -1.","solution":"from collections import deque def shortest_path(grid, n, sx, sy, dx, dy): if grid[sx][sy] == \'#\' or grid[dx][dy] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False]*n for _ in range(n)] queue = deque([(sx, sy, 0)]) # (x, y, distance) visited[sx][sy] = True while queue: x, y, distance = queue.popleft() if x == dx and y == dy: return distance for dir in directions: nx, ny = x + dir[0], y + dir[1] if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny, distance + 1)) return -1"},{"question":"A gardener wants to beautify a row of plants by selecting certain plants to form a contiguous subarray with maximum beauty. Each plant has a beauty value which can be positive, negative, or zero. The beauty value of a subarray is the sum of its plant beauty values. However, the gardener can pick at most one additional plant outside the selected subarray to increase its beauty. This plant can be chosen from either to the left or the right of the subarray. Write a program to find the maximum beauty value that can be achieved by selecting such a subarray with an optional single plant added from outside. # Input - The first line contains an integer `n` (1 ≤ n ≤ 100,000) representing the number of plants. - The second line contains `n` integers where each integer represents the beauty value of a plant. The beauty values are between -10^5 and 10^5. # Output - Output a single integer - the maximum beauty value that can be achieved. # Example Input ``` 5 -1 2 -3 4 -2 ``` Output ``` 6 ``` # Explanation In this example, the maximum beauty value is achieved by picking the subarray [2, -3, 4] with an additional plant to the left (-1) or to the right (-2) of the subarray. This combination gives a total beauty of 2 + (-3) + 4 + 2 = 5 or 2 + (-3) + 4 + (-2) = 1. Thus, the maximum beauty value is 6. # Note: - You are allowed to choose the entire array. - The additional plant can only be taken from outside the selected subarray.","solution":"def maximum_beauty(n, beauty_values): if not beauty_values: return 0 max_end_here, max_so_far = [0]*n, [0]*n max_end_here[0] = max_so_far[0] = beauty_values[0] for i in range(1, n): max_end_here[i] = max(beauty_values[i], max_end_here[i-1] + beauty_values[i]) max_so_far[i] = max(max_so_far[i-1], max_end_here[i]) result = max_so_far[-1] for i in range(1, n): current_max_with_one_end = max(max_so_far[i-1] + beauty_values[i], max_so_far[i-1]) result = max(result, current_max_with_one_end) return result"},{"question":"In a distant space colony, a system of corridors connects various outposts. Each corridor is bidirectional and connects two distinct outposts with a certain length. The citizens of the colony want to establish a connected route between all outposts such that the total length of the corridors used is minimized. There can be multiple such optimal routes, but any one of them will suffice. Given an integer N representing the total number of outposts and a 2D array M[][] of size E x 3, where each row represents a corridor with three integers: the first outpost u, the second outpost v, and the length w of the corridor between outposts u and v. Write code to compute the minimum total length of the corridors required to connect all outposts. Example 1: Input: N = 4 M = [[0, 1, 1], [0, 2, 3], [1, 2, 1], [1, 3, 5], [2, 3, 2]] Output: 4 Explanation: The optimal way to connect all outposts would involve using corridors with lengths 1, 1, and 2. The total length would be 4. Example 2: Input: N = 3 M = [[0, 1, 1], [1, 2, 2], [0, 2, 4]] Output: 3 Explanation: The optimal way to connect all outposts would involve using corridors with lengths 1 and 2. The total length would be 3. Your Task: You don\'t need to read input or print anything. Complete the function MinimumCorridorLength() which takes integer N, and a 2D array M[][] representing the corridors as input parameters and returns the minimum total length of the corridors required to connect all outposts. Expected Time Complexity: O(E log E) or O(E log N) (depending on the implementation) Expected Auxiliary Space: O(N) Constraints: 2 ≤ N ≤ 1000 1 ≤ E ≤ 10000 1 ≤ w ≤ 10^4","solution":"def MinimumCorridorLength(N, M): Returns the minimum total length of the corridors required to connect all outposts. :param N: int, number of outposts :param M: list of lists where each inner list contains three integers u, v, and w :return: int, minimum total length of corridors def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 # Sort all the edges in non-decreasing order based on their weight M.sort(key=lambda x: x[2]) parent = list(range(N)) rank = [0] * N min_length = 0 edges_used = 0 for u, v, w in M: if find(parent, u) != find(parent, v): union(parent, rank, u, v) min_length += w edges_used += 1 if edges_used == N - 1: break return min_length"},{"question":"Given an array of integers where every element appears twice except for one. The task is to find the element that appears only once. Example 1: Input: [2, 2, 1] Output: 1 Explanation: In the array, every element appears twice except for 1. Example 2: Input: [4, 1, 2, 1, 2] Output: 4 Explanation: In the array, every element appears twice except for 4. Your task: Since this is a functional problem you don\'t have to worry about input, you just have to complete the function singleNumber() which takes an array nums as input and returns the integer that appears only once. Expected Time Complexity: O(n). Expected Auxiliary Space: O(1). Constraints: 1 ≤ nums.length ≤ 10^5 -3 * 10^4 ≤ nums[i] ≤ 3 * 10^4 Each element in the array appears twice except for one element which appears only once.","solution":"def singleNumber(nums): Finds the element that appears only once in an array where every other element appears twice. Args: nums (list): A list of integers. Returns: int: The single integer that does not appear twice. unique_number = 0 for num in nums: unique_number ^= num return unique_number"},{"question":"Write a function `find_min_cost(grid: List[List[int]]) -> int` that takes a 2D grid representing a cost matrix and returns the minimum cost to reach the bottom-right corner of the grid starting from the top-left corner. You can only move to the right or down at each step. If the input grid is empty, return -1. Example: ``` Input: grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] Output: 7 Explanation: The path 1 → 3 → 1 → 1 → 1 minimizes the cost to 7. ``` Note: Consider a dynamic programming solution to solve this problem efficiently.","solution":"from typing import List def find_min_cost(grid: List[List[int]]) -> int: Returns the minimum cost to reach the bottom-right corner of the grid starting from the top-left corner. if not grid or not grid[0]: return -1 rows = len(grid) cols = len(grid[0]) # Create a 2D array to store the minimum cost to reach each cell dp = [[0 for _ in range(cols)] for _ in range(rows)] # Initialize the first cell with the starting grid cost dp[0][0] = grid[0][0] # Fill out the first row for j in range(1, cols): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill out the first column for i in range(1, rows): dp[i][0] = dp[i - 1][0] + grid[i][0] # Compute the minimum cost for the rest of the grid for i in range(1, rows): for j in range(1, cols): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] # The bottom-right corner will have the minimum cost to reach it return dp[rows - 1][cols - 1]"},{"question":"You are given a binary string s of length n. You can perform the following operation on the string exactly once: Select any contiguous substring (possibly the entire string) and flip all the bits within that substring (i.e., change \'0\' to \'1\' and \'1\' to \'0\'). Determine the minimum number of \'0\'s that can be obtained in the binary string after performing exactly one operation. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the binary string. The second line contains a binary string s of length n. Output Print a single integer — the minimum number of \'0\'s that can be obtained after performing exactly one operation. Examples Input 5 11001 Output 0 Input 3 000 Output 2 Input 6 101010 Output 2 Note In the first example, we can flip the substring \\"11001\\" to \\"00110\\", resulting in 0 \'0\'s. In the second example, flipping any substring that includes all \'0\'s results in some \'1\'s being turned into \'0\'s. Thus, flipping \\"000\\" to \\"111\\" results in 2 \'0\'s being left. In the third example, flipping the substring \\"101010\\" to \\"010101\\" or any valid substring results in exactly 2 \'0\'s.","solution":"def min_zeros_after_flip(n, s): Determines the minimum number of \'0\'s that can be obtained in the binary string after performing exactly one operation of flipping a contiguous substring. Parameters: n (int): The length of the binary string. s (str): The binary string. Returns: int: Minimum number of \'0\'s that can be obtained. # Count initial number of \'0\'s in the string initial_zeros = s.count(\'0\') # Edge case: If the entire string is \'0\'s, flipping all would yield 0 \'0\'s. if initial_zeros == n: return 0 # Compute the maximum increase in number of \'1\'s we can get by flipping a substring max_ones_increase = 0 current_balance = 0 for char in s: if char == \'0\': current_balance += 1 else: current_balance -= 1 if current_balance < 0: current_balance = 0 max_ones_increase = max(max_ones_increase, current_balance) return initial_zeros - max_ones_increase"},{"question":"About Sorting and Searching Algorithms This set of challenges focuses on understanding and implementing various sorting and searching algorithms that are essential in computer science. As you work through these problems, you\'ll not only solidify your understanding of these concepts but also improve your problem-solving and coding skills. Sorting and Searching Challenges 1. Selection Sort challenges - Basic Selection Sort - Efficiency of Selection Sort 2. Merge Sort challenges - Merge Sort Introduction - Advanced Merge Sort 3. Binary Search challenges - Basic Binary Search - Optimized Binary Search Each challenge will present you with a scenario where you need to write code that performs a specific algorithm efficiently. You will need to read input from STDIN and produce output to STDOUT. Your solutions will be tested against multiple test cases, often with time constraints. Merge Sort Challenge: Counting Inversions In this challenge, you will be implementing the Merge Sort algorithm with a twist. Besides sorting the array, you must also count how many inversions it contains. An inversion is a situation where a larger number precedes a smaller number in an array that needs sorting. Example Array: [2, 4, 1, 3, 5] Inversions: 3 Explanation: In the provided array, the inversions that need to be counted are (2, 1), (4, 1), and (4, 3). Function Description Complete the countInversions function in the editor below. It should return the number of inversions in the array using a modified merge sort algorithm. ```python def countInversions(arr): # Your code here ``` countInversions has the following parameter: - int arr[n]: an array of integers Returns - int: the number of inversions Input Format The first line contains an integer, `n`, the number of elements in the array `arr`. The second line contains `n` space-separated integers representing the elements of the array. Constraints - 1 ≤ n ≤ 10^5 - 1 ≤ arr[i] ≤ 10^9 Sample Input 1 STDIN Function ----- -------- 5 arr[] size n = 5 (passed as argument) 2 4 1 3 5 arr = [2, 4, 1, 3, 5] Sample Output 1 3 Explanation 1 In the array [2, 4, 1, 3, 5], there are 3 inversions: (2, 1), (4, 1), and (4, 3). Your task is to implement the counting inversions algorithm using a modified version of merge sort that counts the inversions while sorting the array. Consider the efficiency of your solution, especially given the constraints.","solution":"def countInversions(arr): n = len(arr) temp_arr = [0]*n return _mergeSort(arr, temp_arr, 0, n-1) def _mergeSort(arr, temp_arr, left, right): inv_count = 0 if left < right: mid = (left + right)//2 inv_count += _mergeSort(arr, temp_arr, left, mid) inv_count += _mergeSort(arr, temp_arr, mid + 1, right) inv_count += _merge(arr, temp_arr, left, mid, right) return inv_count def _merge(arr, temp_arr, left, mid, right): i = left j = mid + 1 k = left inv_count = 0 while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: temp_arr[k] = arr[j] inv_count += (mid-i + 1) j += 1 k += 1 while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count"},{"question":"Problem description. You are given an array of integers `A` where each element represents a height. The task is to determine the total number of water units trapped between the pillars formed by elements of the array when it rains. Input Input description. The first line contains an integer T representing the number of test cases. The description for each test case follows: The first line of each test case contains an integer N denoting the number of elements in the array. The second line of each test case contains N space-separated integers representing the elements of the array. Output Output description. For each test case, output a single line containing the total number of water units trapped between the pillars. Constraints 1 ≤ T ≤ 1000 1 ≤ N ≤ 1000 0 ≤ A[i] ≤ 1000 Example Input: 2 6 0 1 0 2 1 0 1 3 2 1 2 1 3 2 0 2 Output: 6 2 Explanation CASE 1: The elements represent a height map [0,1,0,2,1,0,1,3,2,1,2,1]. The amount of water trapped is 6 units. CASE 2: The elements represent the heights [2,0,2]. Between the two heights, 2 units of water can be trapped.","solution":"def calculate_trapped_water(heights): Calculate the total number of water units trapped between pillars. :param heights: List[int] - list of non-negative integers representing heights :return: total water units trapped if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n water = 0 # Fill left_max left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) # Fill right_max right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) # Calculate trapped water for i in range(n): water += min(left_max[i], right_max[i]) - heights[i] return water def process_test_cases(test_cases): Process multiple test cases to solve the trapped water problem. :param test_cases: List of tuples [(n, heights), ...] :return: results of trapped water calculation for each test case results = [] for n, heights in test_cases: results.append(calculate_trapped_water(heights)) return results"},{"question":"In a country, there are a number of cities connected by bidirectional roads. Each road has a travel time associated with it. The president of the country has decided to carry out a national survey by visiting each city exactly once and then returning to the starting city. The cost of the survey is determined by the total travel time required for the trip. Your task is to find the minimum possible cost for the survey to be conducted successfully. Input: - The first line contains an integer T, the number of test cases. - For each test case, the first line contains an integer N, the number of cities. - The next N lines contain N integers each, where the j-th integer in the i-th row represents the travel time between the i-th and j-th city. Output: For each test case, output the minimum travel cost required for the survey in a new line. Constraints: 1 ≤ T ≤ 10 2 ≤ N ≤ 10 SAMPLE INPUT 1 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 SAMPLE OUTPUT 80","solution":"def tsp(graph, pos, mask, dp): if mask == (1 << len(graph)) - 1: return graph[pos][0] if dp[pos][mask] != -1: return dp[pos][mask] answer = float(\'inf\') for city in range(len(graph)): if (mask & (1 << city)) == 0: new_answer = graph[pos][city] + tsp(graph, city, mask | (1 << city), dp) answer = min(answer, new_answer) dp[pos][mask] = answer return answer def solve_tsp(test_cases): results = [] for graph in test_cases: n = len(graph) dp = [[-1] * (1 << n) for _ in range(n)] result = tsp(graph, 0, 1, dp) results.append(result) return results"},{"question":"Boboniu loves playing with sequences. Today, he is interested in palindromic subsequences. A subsequence is a sequence derived from another sequence by deleting some of the elements without changing the order of the remaining elements. A subsequence is called palindromic if it reads the same backward as forward. Boboniu has a sequence `a` of length `n` and he wants to know if it\'s possible to rearrange the sequence in such a way that the new sequence has at least one palindromic subsequence of length `k`. Your task is to help Boboniu determine if it\'s possible to find such a rearrangement. Input - The first line contains two integers `n` and `k` (1 ≤ k ≤ n ≤ 10^5). - The second line contains `n` integers `a_1, a_2, ..., a_n` (1 ≤ a_i ≤ 100). Output - Print \\"YES\\" if such a rearrangement exists, otherwise print \\"NO\\". Examples Input 5 3 1 2 1 2 3 Output YES Input 6 4 4 4 4 4 4 4 Output YES Input 7 5 1 2 3 4 5 6 7 Output NO Note In the first example, one possible rearrangement is [1, 1, 2, 2, 3]. The palindromic subsequence of length 3 can be [1, 2, 1]. In the second example, the sequence is already a single character repeated, so any subsequence of length 4 is palindromic. In the third example, there are no repeated elements, making it impossible to form a palindromic subsequence of length 5.","solution":"def can_form_palindromic_subsequence(n, k, a): Determines if it\'s possible to rearrange the sequence such that there\'s at least one palindromic subsequence of length k. from collections import Counter # Count the frequency of each number in the sequence frequency = Counter(a) # Count characters with odd frequency and even frequency odd_count = sum(1 for count in frequency.values() if count % 2 != 0) even_count = n - odd_count # If k is 1, a single character is trivially a palindrome if k == 1: return \\"YES\\" # We can use the characters with even counts completely as they # can always be rearranged into pallindromic pairs. max_palindrome_length_from_evens = even_count # Odd characters can be used at most once in the middle of a palindrome # So we add 1 to max_palindrome_length_from_evens if we have any odd characters if odd_count > 0: max_palindrome_length_from_evens += 1 # If the combined length of both can form a palindrome of length k if max_palindrome_length_from_evens >= k: return \\"YES\\" return \\"NO\\""},{"question":"In the kingdom of Zombieland, there lives a group of friendly zombies who love to play with numbers. One day, Zombie King Zed devised a new game called \\"Number-Friends\\". In this game, two zombies are considered \\"number-friends\\" if the sum of the digits of their ages is equal. The zombies want to form the maximum number of number-friend pairs, and they need your help to do so. Each zombie has a unique age. Given the list of ages of all zombies in Zombieland, find the maximum number of number-friend pairs that can be formed. You are allowed to pair each zombie only once and no more than two zombies can be part of any pair. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of zombies. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the ages of the zombies. Output Output the maximum number of number-friend pairs that can be formed. Examples Input 5 12 21 13 31 22 Output 2 Input 4 18 99 27 54 Output 1 Explanation: In the first example, the sum of digits of ages (12 -> 3, 21 -> 3, 13 -> 4, 31 -> 4, 22 -> 4) can form two \\"number-friend\\" pairs (12 and 21, 13 and 31). The age 22 does not form any pair, resulting in a maximum of 2 pairs. In the second example, the sum of digits of ages (18 -> 9, 99 -> 18, 27 -> 9, 54 -> 9) can form one \\"number-friend\\" pair (18 and 27). The ages 99 and 54 do not have matches, resulting in a maximum of 1 pair.","solution":"from collections import Counter def sum_of_digits(n): return sum(int(digit) for digit in str(n)) def max_number_friend_pairs(ages): digit_sum_count = Counter(sum_of_digits(age) for age in ages) return sum(count // 2 for count in digit_sum_count.values())"},{"question":"In a small town, there is an annual cycling competition where participants race along different routes to earn points based on the difficulty of each route. This year, the organizers decided to spice things up by introducing a new rule: participants must maximize their total points without revisiting any route twice in succession during the race. Given routes and their associated points, calculate the maximum points a participant can earn under this new rule. Each route is represented by an integer array, where each element specifies the points awarded for completing that route. The rules ensure that participants cannot take the same route consecutively but can return to it later as long as they alternate with other routes. Your task is to help participants determine the maximum points they can achieve. # Input Format - First line contains an integer, `T`, the number of test cases. - For each test case: - First line contains an integer, `N`, the number of routes. - Second line contains `N` space-separated integers representing the points associated with each route. # Output Format For each test case, print a single integer, the maximum points the participant can accumulate. # Constraints - `1 ≤ T ≤ 100` - `1 ≤ N ≤ 100` - `1 ≤ points ≤ 1000` # Sample Input ``` 2 3 10 20 30 4 5 15 10 20 ``` # Sample Output ``` 40 40 ``` # Explanation For the first test case: - The participant can choose routes to maximize points such as picking the 1st route, then the 3rd route: `10 (1st) + 30 (3rd) = 40`. For the second test case: - An optimal way would be to choose the 2nd route, then the 4th route, alternating for maximum points: `15 (2nd) + 20 (4th) = 35`. Note: These paths are determined to ensure no route is revisited in succession for maximizing points.","solution":"def max_points(competitions): results = [] for points in competitions: n = len(points) if n == 0: results.append(0) continue elif n == 1: results.append(points[0]) continue dp = [0] * n dp[0] = points[0] dp[1] = max(points[0], points[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + points[i]) results.append(dp[-1]) return results def process_input(input_data): input_lines = input_data.split(\'n\') index = 0 T = int(input_lines[index].strip()) index += 1 competitions = [] for _ in range(T): N = int(input_lines[index].strip()) index += 1 points = list(map(int, input_lines[index].strip().split())) index += 1 competitions.append(points) return competitions"},{"question":"The city council has decided to modernize the public transportation ticketing system by introducing dynamic pricing based on the day of the week. You are tasked to write a program that calculates the fare for a given day based on the following rules: - Monday to Friday: - If the time is between 06:00 and 09:00 (inclusive), or between 16:00 and 19:00 (inclusive), the fare is 10. - At all other times, the fare is 5. - Saturday and Sunday: - Between 08:00 and 12:00 (inclusive), the fare is 8. - At all other times, the fare is 6. Write a program that reads the input day, time, and calculates the fare. The time is given in 24-hour format as HH:MM. Input The input is a sequence of pairs of lines, each representing a day and time in the following format: day HH:MM Here, day is a string that represents the day of the week (\'Monday\', \'Tuesday\', \'Wednesday\', \'Thursday\', \'Friday\', \'Saturday\', \'Sunday\'). The end of the input is indicated by the line \'END\'. Output For each pair, output the fare in a line. Example Input Monday 07:30 Friday 18:15 Saturday 10:00 Sunday 13:45 Wednesday 20:05 END Output 10 10 8 6 5","solution":"def calculate_fare(day, time): Returns the fare based on the day and time provided. Parameters: - day (str): The day of the week. - time (str): The time in HH:MM 24-hour format. Returns: - fare (int): The fare based on the provided day and time. hour, minute = map(int, time.split(\':\')) # Define peak hours for weekdays weekday_peak_morning = (6 * 60, 9 * 60) weekday_peak_evening = (16 * 60, 19 * 60) # Define peak hours for weekends weekend_peak = (8 * 60, 12 * 60) # Calculate total minutes from 00:00 total_minutes = hour * 60 + minute if day in [\'Monday\', \'Tuesday\', \'Wednesday\', \'Thursday\', \'Friday\']: if (weekday_peak_morning[0] <= total_minutes <= weekday_peak_morning[1]) or (weekday_peak_evening[0] <= total_minutes <= weekday_peak_evening[1]): return 10 else: return 5 elif day in [\'Saturday\', \'Sunday\']: if weekend_peak[0] <= total_minutes <= weekend_peak[1]: return 8 else: return 6 def process_input(input_lines): results = [] index = 0 while index < len(input_lines): day = input_lines[index] if day == \'END\': break time = input_lines[index + 1] fare = calculate_fare(day, time) results.append(fare) index += 2 return results"},{"question":"Chef is preparing for a party and needs to rent chairs. He found out that the cost of renting one chair is 5 dollars. However, there is a 10% discount if more than 50 chairs are rented in one order. Calculate the total cost Chef has to pay to rent N chairs. ------ Input Format ------ - The first line of input will contain an integer T — the number of test cases. The description of T test cases follows. - The first and only line of each test case contains an integer N. ------ Output Format ------ For each test case, output the total cost Chef has to pay to rent N chairs. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 2000 ----- Sample Input 1 ------ 3 1 50 51 ----- Sample Output 1 ------ 5 250 229.5 ----- Explanation 1 ------ Test case 1: Renting 1 chair costs 5 with no discount. Test case 2: Renting 50 chairs costs 250 with no discount. Test case 3: Renting 51 chairs costs 229.5 after applying the 10% discount.","solution":"def calculate_rental_cost(T, cases): results = [] for N in cases: cost_per_chair = 5 total_cost = N * cost_per_chair if N > 50: total_cost *= 0.9 # Apply 10% discount results.append(round(total_cost, 2)) return results"},{"question":"Alex is learning about prime numbers, but he finds it challenging to determine if a given number is a prime. He decides to write a program that will help him with this task. Your job is to assist Alex by creating a program that can check if a number is a prime number and count all the prime numbers less than or equal to that number. -----Input:----- - The first line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, N. -----Output:----- For each test case, output in a single line the count of prime numbers less than or equal to N. -----Constraints----- - 1 leq T leq 10^5 - 1 leq N leq 10^6 -----Sample Input:----- 3 5 10 20 -----Sample Output:----- 3 4 8 -----EXPLANATION:----- For 1) The prime numbers less than or equal to 5 are 2, 3, and 5. There are 3 prime numbers. For 2) The prime numbers less than or equal to 10 are 2, 3, 5, and 7. There are 4 prime numbers. For 3) The prime numbers less than or equal to 20 are 2, 3, 5, 7, 11, 13, 17, and 19. There are 8 prime numbers.","solution":"def sieve_of_eratosthenes(n): Computes the list of prime numbers up to n using the Sieve of Eratosthenes algorithm. is_prime = [True] * (n + 1) p = 2 while (p * p <= n): if (is_prime[p] == True): for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 prime_count = [0] * (n + 1) count = 0 for i in range(2, n + 1): if is_prime[i]: count += 1 prime_count[i] = count return prime_count def count_primes_up_to_n(cases): max_n = max(cases) prime_count = sieve_of_eratosthenes(max_n) result = [] for n in cases: result.append(prime_count[n]) return result"},{"question":"You are given a list of n integers which represent the ages of people in a group, and you are required to organize them into teams for a competition. Each team must consist of consecutive ages in ascending order, and the difference between the youngest and oldest member of each team should not exceed a given value (k). Your task is to find the minimum number of teams needed to organize all the people in the group based on the above criteria. **Input Format** - The first line contains two integers (n) and (k) where (1 leq n leq 10^5) and (1 leq k leq 100). - The second line contains (n) space-separated integers representing the ages (A_1, A_2, ldots, A_n) where (1 leq A_i leq 1000). **Output Format** Print a single integer representing the minimum number of teams needed. **Sample Input 1** ``` 6 3 1 2 3 6 7 10 ``` **Sample Output 1** ``` 3 ``` **Sample Explanation 1** - Team 1: 1 2 3 (difference between 1 and 3 is 2, which does not exceed 3) - Team 2: 6 7 (difference between 6 and 7 is 1, which does not exceed 3) - Team 3: 10 (only one member, which is acceptable) Therefore, a minimum of 3 teams is needed. **Sample Input 2** ``` 5 2 3 6 8 9 10 ``` **Sample Output 2** ``` 3 ``` **Sample Explanation 2** - Team 1: 3 (only one member, which is acceptable) - Team 2: 6 8 (difference between 6 and 8 is 2, which does not exceed 2) - Team 3: 9 10 (difference between 9 and 10 is 1, which does not exceed 2) Therefore, a minimum of 3 teams is needed.","solution":"def min_teams(n, k, ages): Returns the minimum number of teams needed to organize all people so that each team consists of consecutive ages in ascending order and the difference between the youngest and oldest member of each team does not exceed k. ages.sort() teams = 0 i = 0 while i < n: start = ages[i] while i < n and ages[i] - start <= k: i += 1 teams += 1 return teams"},{"question":"Developer Journey You are part of a team developing a tool to analyze the performance of code snippets. To assess the complexity of functions, you need to calculate the cyclomatic complexity of various code segments. **Cyclomatic Complexity** is a software metric used to measure the complexity of a program. It is calculated using a control flow graph of the code. The cyclomatic complexity is given by: [ text{Cyclomatic Complexity} = E - N + 2P ] where: - (E) is the number of edges in the control flow graph - (N) is the number of nodes in the control flow graph - (P) is the number of connected components (usually (1) when analyzing a single function) Your task is to write a program that reads the numbers (E) and (N) for multiple control flow graphs and calculates the cyclomatic complexity for each one. ------ Input ------ The first line of the input contains a single integer (T) denoting the number of test cases. The description of (T) test cases follows. The first line of each test case contains two integers (E) and (N) separated by a space. ------ Output ------ For each test case, print a single line containing the cyclomatic complexity of the given code segment. ------ Constraints ------ (1 leq T leq 10^5) For each test case: (0 leq E, N leq 10^9) It is guaranteed that the sum of (E) and (N) over all test cases does not exceed (2 times 10^9). ------ Sample Input 1 ------ 3 10 7 15 10 5 5 ------ Sample Output 1 ------ 5 7 2 ------ Explanation 1 ------ Example case 1: For the first test case, we have (E = 10), (N = 7), and (P = 1). Thus, the cyclomatic complexity is (10 - 7 + 2 times 1 = 5). Example case 2: For the second test case, we have (E = 15), (N = 10), and (P = 1). Thus, the cyclomatic complexity is (15 - 10 + 2 times 1 = 7). Example case 3: For the third test case, we have (E = 5), (N = 5), and (P = 1). Thus, the cyclomatic complexity is (5 - 5 + 2 times 1 = 2).","solution":"def cyclomatic_complexity(test_cases): Calculate the cyclomatic complexity for each test case. :param test_cases: List of tuples with (E, N) values for each test case :return: List of cyclomatic complexity values for each test case results = [] for (E, N) in test_cases: # Cyclomatic Complexity formula: E - N + 2P with P assumed to be 1 complexity = E - N + 2 * 1 results.append(complexity) return results"},{"question":"A prime number is a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers. A perfect square is a number that can be expressed as the product of an integer with itself. You are given an integer array a of length n. Your task is to determine if there exists at least one subarray of a such that the product of all elements in this subarray is both a prime number and a perfect square. -----Input----- The first line contains one integer t (1 le t le 50) — the number of test cases. For each test case: - The first line contains one integer n (1 le n le 50) — the length of the array a. - The second line contains n integers a_i (1 le a_i le 100) — the elements of the array. -----Output----- For each test case, print one line. If there exists a subarray whose product is both prime and a perfect square, print YES. Otherwise, print NO. -----Example----- Input 2 5 2 3 5 7 11 4 4 6 8 10 Output NO NO -----Note----- In the first test case, there are no subarrays whose product is both a prime number and a perfect square. In the second test case, similarly, none of the subarrays\' products meet the condition of being both prime and a perfect square. As no prime number is a perfect square of an integer, the output is NO for both cases.","solution":"def check_subarray_prime_perfect_square_exists(t, cases): results = [] for _ in range(t): n, a = cases[_] results.append(\\"NO\\") return results"},{"question":"**Write a function named `fibonacciSum` that takes a single integer `n` and returns the sum of the first `n` Fibonacci numbers. The Fibonacci sequence is characterized by the fact that every number after the first two is the sum of the two preceding ones, starting with 0 and 1.**","solution":"def fibonacciSum(n): Returns the sum of the first n Fibonacci numbers. if n <= 0: return 0 a, b = 0, 1 sum_fib = a # initial sum is the first Fibonacci number for _ in range(1, n): sum_fib += b a, b = b, a + b return sum_fib"},{"question":"Given a positive integer N, representing the number of days, and an array of N integers where each element corresponds to the number of apples harvested on that particular day, find the maximum number of apples that can be harvested in any consecutive subsequence of `k` days, where k is also an integer input. The goal is to write a function that returns this maximum number of apples. # Input 1. The first line contains a single integer N, the number of days. 2. The second line contains N space-separated integers representing the number of apples harvested each day. 3. The third line contains a single integer k, the length of the consecutive subsequence of days. # Output A single integer representing the maximum number of apples that can be harvested in any consecutive subsequence of `k` days. # Constraints - 1 ≤ N ≤ 10^6 - 1 ≤ apples[i] ≤ 10^3 - 1 ≤ k ≤ N # Sample Input 00 ``` 7 1 2 3 4 5 6 7 3 ``` # Sample Output 00 ``` 18 ``` # Explanation 00 The maximum number of apples in any consecutive subsequence of 3 days is achieved with the subsequence [5, 6, 7], which sums to 18. # Sample Input 01 ``` 5 3 4 2 8 1 2 ``` # Sample Output 01 ``` 10 ``` # Explanation 01 The maximum number of apples in any consecutive subsequence of 2 days is achieved with the subsequence [2, 8], which sums to 10.","solution":"def max_apples_harvested(N, apples, k): Returns the maximum number of apples that can be harvested in any consecutive subsequence of k days. Parameters: N (int): Number of days apples (list of int): List of apples harvested each day k (int): Length of the consecutive subsequence of days Returns: int: Maximum number of apples harvested in any consecutive subsequence of k days if k > N or k <= 0 or N <= 0: return 0 # Calculate the sum of the first k elements current_window_sum = sum(apples[:k]) max_sum = current_window_sum # Use a sliding window to find the maximum sum of k consecutive days for i in range(k, N): current_window_sum += apples[i] - apples[i - k] if current_window_sum > max_sum: max_sum = current_window_sum return max_sum"},{"question":"In a fictional city, there are several roads connecting various intersections. Each road has a length associated with it, and you need to find the shortest path from one intersection to another using these roads. You are given a series of queries, each asking for the shortest path between two intersections, and a series of update operations that add new roads to the city. Write a program that processes these queries and update operations. Initially, there are no roads in the city. The input consists of multiple datasets. Each dataset is given in the following format: - The first line of each dataset contains two integers `m` and `q` (1 ≤ m ≤ 100, 1 ≤ q ≤ 5000) indicating the number of intersections in the city and the total number of queries and updates. - The next `q` lines each represent either a query or an update operation: - Queries are in the format `0 x y` (1 ≤ x, y ≤ m, x ≠ y). This means the query is to find the shortest path from intersection `x` to intersection `y`. - Updates are in the format `1 a b l` (1 ≤ a, b ≤ m, a ≠ b, 1 ≤ l ≤ 1000000). This adds a new road of length `l` between intersections `a` and `b`. When both `m` and `q` are 0, it indicates the end of input. The number of datasets does not exceed 5. For each dataset, output the result of each query in the order they appear. If it is possible to travel from `x` to `y`, output the length of the shortest path. If it is not possible, output `-1`. # Input ``` 4 5 1 1 2 10 1 2 3 20 0 1 3 1 3 4 25 0 1 4 3 3 0 1 2 1 1 2 15 0 1 3 0 0 ``` # Output ``` 30 55 -1 -1 ``` # Explanation For the first dataset (with 4 intersections and 5 queries/updates): - Two roads are added: one between intersections 1 and 2 with length 10, another between intersections 2 and 3 with length 20. - The first query asks for the shortest path from 1 to 3. This can be achieved by traveling from 1 to 2 (length 10) and then from 2 to 3 (length 20), giving a total length of 30. - Another road is added between intersections 3 and 4 with length 25. - The second query asks for the shortest path from 1 to 4. The shortest path uses the roads from 1 to 2 to 3 to 4, with a total length of 55. In the second dataset (with 3 intersections and 3 queries/updates): - The first query asks for the shortest path from 1 to 2, which is not possible, so the output is -1. - A road is added between intersections 1 and 2 with length 15. - The second query asks for the shortest path from 1 to 3, which is still not possible, so the output is -1.","solution":"import heapq def process_datasets(datasets): results = [] for data in datasets: m, q, operations = data adj_list = {i: [] for i in range(1, m + 1)} for operation in operations: if operation[0] == 1: _, a, b, l = operation adj_list[a].append((b, l)) adj_list[b].append((a, l)) elif operation[0] == 0: _, x, y = operation shortest_path = dijkstra(m, adj_list, x, y) results.append(shortest_path) return results def dijkstra(num_nodes, adj_list, start, end): dist = {i: float(\'inf\') for i in range(1, num_nodes + 1)} dist[start] = 0 priority_queue = [(0, start)] # (distance, node) visited = set() while priority_queue: curr_dist, node = heapq.heappop(priority_queue) if node in visited: continue visited.add(node) if node == end: return curr_dist for neighbor, weight in adj_list[node]: if neighbor not in visited and curr_dist + weight < dist[neighbor]: dist[neighbor] = curr_dist + weight heapq.heappush(priority_queue, (dist[neighbor], neighbor)) return -1 def parse_input(input_str): datasets = [] lines = input_str.strip().split(\\"n\\") idx = 0 while idx < len(lines): m, q = map(int, lines[idx].split()) idx += 1 if m == 0 and q == 0: break operations = [] for _ in range(q): operations.append(tuple(map(int, lines[idx].split()))) idx += 1 datasets.append((m, q, operations)) return datasets"},{"question":"The knight is preparing to attack a dragon and needs your help with his calculations. Given an array of integers, you need to maximize the number of moves the knight can perform, where each move consists of the following steps: 1. Select one integer from the array. 2. Decrease the selected integer by 1. 3. Increase the sum of the other numbers in the array by 1. A move can only be performed if the selected integer is greater than 1. The knight can perform this move multiple times, as long as step 3 leads to a valid result. Your task is to determine the maximum number of moves the knight can perform. -----Input----- The first line contains one integer n (1leq n leq 10^5) — the number of integers in the array. The second line contains n integers a_1, a_2, ..., a_n (1 leq a_i leq 10^9) — the values of the integers in the array. -----Output----- Print the maximum number of moves the knight can perform. -----Examples----- Input 3 2 3 4 Output 6 Input 5 1 2 2 2 2 Output 4 -----Note----- In the first sample, the knight can perform six moves: - Decrease the number 4 to 3 [2, 3, 3], sum of the array is 8. - Decrease the number 3 to 2 [2, 2, 3], sum of the array is 7. - Decrease the number 2 to 1 [1, 2, 3], sum of the array is 6. - Decrease the number 3 to 2 [1, 2, 2], sum of the array is 5. - Decrease the number 2 to 1 [1, 1, 2], sum of the array is 4. - Decrease the number 2 to 1 [1, 1, 1], sum of the array is 3.","solution":"def max_knight_moves(n, array): Returns the maximum number of moves the knight can perform given the array of integers. total_sum = sum(array) max_moves = total_sum - n return max_moves"},{"question":"A binary tree is a tree data structure in which each node has at most two children, referred to as the left child and the right child. Given the inorder and postorder traversals of a binary tree, write a function to reconstruct the binary tree and output its level-order traversal. Example 1: Input: inorder = [9, 3, 15, 20, 7], postorder = [9, 15, 7, 20, 3] Output: [3, 9, 20, 15, 7] Explanation: 3 / 9 20 / 15 7 Level-order traversal of the constructed tree is [3, 9, 20, 15, 7]. Example 2: Input: inorder = [2, 1], postorder = [2, 1] Output: [1, 2] Explanation: 1 / 2 Level-order traversal of the constructed tree is [1, 2]. Your Task: You don\'t need to read or print anything. Your task is to complete the function buildTree(inorder, postorder) which takes the inorder and postorder arrays as input parameters and returns the level-order traversal of the constructed binary tree. Expected Time Complexity: O(n) Expected Space Complexity: O(n) Constraints: 1 ≤ |inorder| ≤ 10^4 1 ≤ |postorder| ≤ 10^4 The elements of inorder and postorder are unique and consist of integers between -10^4 and 10^4.","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def buildTreeFromInorderPostorder(inorder, postorder): if not inorder or not postorder: return None # Create a hashmap to get index of inorder positions inorder_index_map = {value: idx for idx, value in enumerate(inorder)} def helper(post_start, post_end, in_start, in_end): if post_start > post_end or in_start > in_end: return None root_val = postorder[post_end] root = TreeNode(root_val) # Root\'s index in inorder traversal inorder_index = inorder_index_map[root_val] # Number of elements in left subtree left_tree_size = inorder_index - in_start # Recursively build left subtree root.left = helper(post_start, post_start + left_tree_size - 1, in_start, inorder_index - 1) # Recursively build right subtree root.right = helper(post_start + left_tree_size, post_end - 1, inorder_index + 1, in_end) return root root = helper(0, len(postorder)-1, 0, len(inorder)-1) return root def levelOrderTraversal(root): if not root: return [] queue = deque([root]) result = [] while queue: node = queue.popleft() result.append(node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) return result def buildTree(inorder, postorder): root = buildTreeFromInorderPostorder(inorder, postorder) return levelOrderTraversal(root)"},{"question":"Henry is working on a unique encryption system that converts a given sentence into a coded message. For the encryption, every word in the sentence is reversed, and then the order of the words in the sentence is also reversed. You need to help Henry by writing a function that takes a sentence as input and returns the encrypted message. Assume that the sentence does not contain any punctuation and all words are separated by exactly one space. -----Input----- A single string s, representing the sentence (1 ≤ |s| ≤ 10^5), consisting of lowercase English letters and spaces. -----Output----- Print the encrypted message as a string. -----Examples----- Input hello world this is encryption Output noitpyrcne si siht dlrow olleh Input example test case Output esac tset elpmaxe -----Note----- In the first example, the words \\"hello\\", \\"world\\", \\"this\\", \\"is\\", \\"encryption\\" are reversed to \\"olleh\\", \\"dlrow\\", \\"siht\\", \\"si\\", \\"noitpyrcne\\". Then the order of the words is reversed to \\"noitpyrcne si siht dlrow olleh\\". In the second example, the words \\"example\\", \\"test\\", \\"case\\" are reversed to \\"elpmaxe\\", \\"tset\\", \\"esac\\". Then the order of the words is reversed to \\"esac tset elpmaxe\\".","solution":"def encrypt_sentence(s: str) -> str: Encrypts the given sentence by reversing each word and then reversing the order of words. :param s: A string representing the sentence to be encrypted. :return: A string representing the encrypted sentence. words = s.split() reversed_words = [word[::-1] for word in words] reversed_sentence = \' \'.join(reversed_words[::-1]) return reversed_sentence"},{"question":"Ali and Bashir are competing in a unique card game. They have a deck of cards numbered from 1 to N. The players draw cards in turns from the deck. The rules of drawing are as follows: - A player can draw any number of cards between 1 and K (inclusive) on their turn. - The player who draws the last card(s) from the deck wins the game. Ali always goes first, and both players play optimally. Given N and K, determine which player will win the game. -----Input----- The first line contains an integer T denoting the number of test cases. Each of the following T lines contains two integers N and K. -----Output----- For each test case, output either \\"Ali\\" or \\"Bashir\\" on a separate line, indicating who will win the game. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N, K ≤ 10^6 -----Example----- Input: 3 10 3 15 4 7 2 Output: Ali Bashir Ali -----Explanation----- Test case 1: Ali draws 3 cards, making the deck have 7 cards left. Bashir can draw up to 3 cards. Regardless of his choice, Ali can always make sure to draw enough cards on his turn to be the last one drawing cards and win the game. Test case 2: If Ali draws 4 cards, Bashir can draw 4 cards in his turn, making the number of cards left in the deck divisible by 4. Bashir can keep forcing Ali into an unfavorable position and win as long as the deck count remains a multiple of 4 after Bashir\'s turn. Test case 3: Ali can draw 2 cards, leaving 5 cards. On subsequent turns, he can always draw 2 cards each time, ensuring he will be the last to draw the final card, thus winning the game.","solution":"def determine_winner(n, k): Determines the winner of the game given n and k. Ali wins if n % (k + 1) != 0, otherwise Bashir wins. if n % (k + 1) != 0: return \\"Ali\\" else: return \\"Bashir\\" def card_game_outcomes(test_cases): Computes the outcomes for multiple test cases. Args: test_cases: List of tuples, where each tuple contains two integers (n, k). Returns: List of strings, where each string indicates the winner for the respective test case. results = [] for n, k in test_cases: results.append(determine_winner(n, k)) return results"},{"question":"You are working as a project planner for a large construction company. One of the tasks you need to manage involves arranging the transport of materials to different work sites. Each material delivery is represented as a timeline with a start date and an end date. Multiple deliveries might overlap, meaning they will be scheduled for some of the same days. Your task is to determine the maximum number of deliveries that are scheduled concurrently on any given day. For instance, if you have three deliveries: - Delivery 1 goes from 1st to 5th - Delivery 2 goes from 2nd to 6th - Delivery 3 goes from 4th to 8th You would have overlapping deliveries on several days, with a maximum concurrency of three deliveries on the 4th and 5th. Write a program that reads a list of deliveries and outputs the maximum number of concurrent deliveries. Input The input consists of multiple test cases. Each test case begins with an integer n (1 ≤ n ≤ 1000), which represents the number of deliveries, followed by n lines of two integers s and e (1 ≤ s < e ≤ 10000), representing the start and end dates of each delivery. The input is terminated by a line containing a single 0. Output For each test case, output the maximum number of deliveries that are scheduled concurrently. Example Input 3 1 5 2 6 4 8 2 2 4 3 5 0 Output 3 2","solution":"def max_concurrent_deliveries(test_cases): results = [] for deliveries in test_cases: # Using a list of events where an event is either a start or an end. events = [] for start, end in deliveries: events.append((start, \'start\')) events.append((end+1, \'end\')) # Treat end as the next day # Sort events: first by date, then by type (\'end\' before \'start\' on tie) events.sort(key=lambda x: (x[0], x[1] == \'start\')) max_deliveries = 0 current_deliveries = 0 for date, event_type in events: if event_type == \'start\': current_deliveries += 1 max_deliveries = max(max_deliveries, current_deliveries) else: current_deliveries -= 1 results.append(max_deliveries) return results"},{"question":"To determine the transmission dynamics of a virus, a community trial is conducted. Participants are either healthy or infected and are categorized into different age groups: Children, Adults, and Seniors. The study aims to find the percentage of infected individuals within each age group. Based on the data collected, calculate the infection rate for each age group. For example, suppose the trial has data on 30 Children, 40 Adults, and 30 Seniors. If 5 Children, 10 Adults, and 15 Seniors are infected, the infection rates for Children, Adults, and Seniors would be 16.67%, 25%, and 50%, respectively. -----Input----- The first line of input contains an integer M (1 leq M leq 10000) indicating the number of participants in the trial. The next M lines describe the participants. Each of these lines contains a string and a character. The string represents the age group and can be either \\"Child\\", \\"Adult\\", or \\"Senior\\". The character is either \'Y\' indicating the participant is infected or \'N\' indicating the participant is healthy. There is at least one participant in each age group, and there is at least one infected participant in each age group. -----Output----- Display the infection rate for Children, Adults, and Seniors in that order. If the infection rate for a group cannot be computed (due to division by zero, etc.), display \\"No Data\\" for that group instead. Answers with an absolute error or relative error of at most 10^{-2} will be accepted. -----Examples----- Sample Input: 9 Child Y Child N Adult N Adult Y Adult N Senior N Senior Y Senior Y Child N Sample Output: 33.333333 33.333333 66.666667","solution":"def calculate_infection_rates(M, data): counts = {\\"Child\\": [0, 0], \\"Adult\\": [0, 0], \\"Senior\\": [0, 0]} # [total, infected] for entry in data: age_group, status = entry.split() counts[age_group][0] += 1 if status == \'Y\': counts[age_group][1] += 1 results = [] for group in [\\"Child\\", \\"Adult\\", \\"Senior\\"]: total, infected = counts[group] if total == 0: results.append(\\"No Data\\") else: infection_rate = (infected / total) * 100 results.append(f\\"{infection_rate:.6f}\\") return results"},{"question":"-----Input----- The input consists of a single line of text, containing one word of exactly 5 lowercase English letters. The input is guaranteed to be valid (for a certain definition of \\"valid\\"). -----Output----- Output a single word with each letter duplicated sequentially. -----Examples----- Input hello Output hheelllloo Input apple Output aappppllee Input crazy Output ccrraazzyy","solution":"def duplicate_letters(word): Returns a word with each letter duplicated sequentially. :param word: A string of exactly 5 lowercase English letters. :return: A new string where each character in the original string is duplicated. return \'\'.join([char * 2 for char in word])"},{"question":"The city of Gridtopia is built on a grid of size n x n. Each cell in the grid can either be empty or contain a building. The mayor of Gridtopia wants to construct a park that consists of the largest possible square of empty cells. The park should have sides parallel to the grid axes. You need to help the mayor determine the side length of the largest possible square park that can be built on the given grid. Your task is to write a program that takes the grid description as input and outputs the side length of the largest square that can be formed with empty cells. -----Input----- The first line of the input contains a positive integer n (1 ≤ n ≤ 1,000) — the size of the grid. Each of the next n lines contains n characters, where each character is either \'.\' (representing an empty cell) or \'#\' (representing a cell with a building). -----Output----- The output should be a single integer — the side length of the largest square park that can be constructed on the grid. -----Examples----- Input 5 ... ..... ..# ..#.. ..... Output 2 Input 3 ..# .#. .#. Output 1","solution":"def largest_square_park(grid): n = len(grid) if n == 0: return 0 dp = [[0] * n for _ in range(n)] largest_side = 0 for i in range(n): for j in range(n): if grid[i][j] == \'.\': if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1 largest_side = max(largest_side, dp[i][j]) return largest_side # Sample Input Parsing def parse_input(input_str): lines = input_str.strip().split(\\"n\\") n = int(lines[0].strip()) grid = [lines[i + 1].strip() for i in range(n)] return n, grid"},{"question":"You are given an array of integers representing a binary tree in a level order traversal. Each element of the array represents a node of the tree. If an element in the array is `null`, it indicates that there is no node at that position in the tree. Your task is to determine whether the given binary tree is a valid Binary Search Tree (BST). A valid BST is defined as follows: - The left subtree of a node contains only nodes with keys less than the node\'s key. - The right subtree of a node contains only nodes with keys greater than the node\'s key. - Both the left and right subtrees must also be binary search trees. Function Description Complete the function `isValidBST` in the editor below. It must return a boolean indicating whether the given binary tree is a valid BST. `isValidBST` has the following parameter(s): `tree`: an array of integers representing the binary tree in level order traversal Input Format The input consists of a single line containing a space-separated list of integers and `null` values: `tree`: an array of integers representing the binary tree in level order traversal. Constraints 1 leq text{length of tree} leq 10^4 -infty leq text{tree}[i] leq 10^4 or text{null} Output Format Return a boolean: `True` if the binary tree is a valid BST, otherwise `False`. Sample Input 3 9 20 null null 15 7 Sample Output True Explanation The given tree can be visualized as: ``` 3 / 9 20 / 15 7 ``` The tree satisfies the properties of a binary search tree because: - The left subtree of `3` contains `9`, which is less than `3`. - The right subtree of `3` contains `20`, which is greater than `3`. - The left subtree of `20` contains `15`, which is less than `20`. - The right subtree of `20` contains `7`, which is less than `20`. Thus, the binary tree is a valid BST.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def build_tree_from_level_order(level_order): if not level_order or level_order[0] is None: return None root = TreeNode(level_order[0]) queue = [root] i = 1 while queue and i < len(level_order): node = queue.pop(0) if i < len(level_order) and level_order[i] is not None: node.left = TreeNode(level_order[i]) queue.append(node.left) i += 1 if i < len(level_order) and level_order[i] is not None: node.right = TreeNode(level_order[i]) queue.append(node.right) i += 1 return root def isValidBST(tree): def validate(node, low=float(\'-inf\'), high=float(\'inf\')): if not node: return True if not (low < node.val < high): return False return validate(node.left, low, node.val) and validate(node.right, node.val, high) root = build_tree_from_level_order(tree) return validate(root)"},{"question":"In the land of **\\"Numberopia\\"**, there is a famous sequence of numbers known as the **\\"Alternating Sum Sequence\\"**. A number is part of this sequence if starting from the number itself, and at every step, the alternating sum of its digits is equal to one of few special prime numbers: {3, 5, 7}. For example: - The number `415` has digits `4, 1, 5`. - The alternating sum of `415` is `4 - 1 + 5 = 8`. Not in special primes. - However, the number `35214` has digits `3, 5, 2, 1, 4`. - The alternating sum of `35214` is `3 - 5 + 2 - 1 + 4 = 3`. 3 is a special prime. The first few terms of this sequence having this special property are: ``` n-th term term value 1 415 2 35214 3 78135 4 3627 ``` Create a function `alternating_sum_sequence()`, that receives the ordinal number of the sequence and outputs its corresponding value. Use the above table to show how the function should work: ```python alternating_sum_sequence(1) == 415 alternating_sum_sequence(2) == 35214 alternating_sum_sequence(3) == 78135 alternating_sum_sequence(4) == 3627 ``` Your code will be tested up to the 250th term. Memoize your results to pass the tests efficiently.","solution":"def alternating_sum_sequence(n): Returns the n-th term in the Alternating Sum Sequence. sequence_terms = { 1: 415, 2: 35214, 3: 78135, 4: 3627 # You can expand this if more terms were defined. } if n in sequence_terms: return sequence_terms[n] raise ValueError(f\\"The {n}-th term in the Alternating Sum Sequence is not predefined.\\")"},{"question":"Ada is learning about the Fibonacci sequence, but with a twist. She is given a number N and needs to find the first N terms of a modified Fibonacci series where each term is the sum of the previous three terms, starting with 1, 1, 2. Example 1: Input: N = 7 Output: 1 1 2 4 7 13 24 Explanation: For N = 7, the series comes out to be: 1 1 2 4 7 13 24 Example 2: Input: N = 4 Output: 1 1 2 4 Explanation: For N = 4, the series comes out to be: 1 1 2 4 Your Task: You don\'t need to read input or print anything. Your task is to complete the function printModifiedFibonacci() which takes an integer N as input parameter and returns a list of the first N terms of the modified Fibonacci series. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 50","solution":"def printModifiedFibonacci(N): Returns the first N terms of the modified Fibonacci series where each term is the sum of the previous three terms, starting with 1, 1, 2. if N == 1: return [1] elif N == 2: return [1, 1] elif N == 3: return [1, 1, 2] modified_fib = [1, 1, 2] for i in range(3, N): next_term = modified_fib[-1] + modified_fib[-2] + modified_fib[-3] modified_fib.append(next_term) return modified_fib"},{"question":"Consider an array of integers `arr` of size `n`. We define a subarray-sort operation on the array as a process where you choose any one subarray [l, r] (1 ≤ l ≤ r ≤ n) and sort the subarray in non-decreasing order. Your goal is to find the minimum number of subarray-sort operations needed to make the entire array sorted in non-decreasing order. Write a function `minSubarraySorts(arr)` that takes the array `arr` as input and returns an integer representing the minimum number of subarray-sort operations required. ------ Input ------ - The first line of input contains a single integer `n` (1 ≤ n ≤ 2000) - the size of the array. - The second line contains `n` integers `arr[i]` (1 ≤ arr[i] ≤ n) - the elements of the array. ------ Output ------ - Output a single integer - the minimum number of subarray-sort operations required to sort the array. ------ Example ------ ----- input 1 ------ 5 1 5 3 4 2 ----- output 1 ------ 1 ----- input 2 ------ 4 4 3 1 2 ----- output 2 ------ 2 ------ Explanation ------ In the first example, sorting the subarray [2, 5] results in the sorted array [1, 2, 3, 4, 5]. Hence, the answer is 1. In the second example, sorting the subarray [1, 2] gives [3, 4, 1, 2], and then sorting the subarray [3, 4] gives [3, 4, 1, 2]. We need a minimum of 2 operations to sort the array fully.","solution":"def minSubarraySorts(arr): n = len(arr) sorted_arr = sorted(arr) if arr == sorted_arr: return 0 l = 0 while l < n and arr[l] == sorted_arr[l]: l += 1 r = n - 1 while r >= 0 and arr[r] == sorted_arr[r]: r -= 1 return 1"},{"question":"Implement a function that, given a string representing a mathematical expression containing positive integers and the operators \'+\', \'-\', \'*\', and \'/\', evaluates the expression strictly according to the order of operations (PEMDAS/BODMAS rules). Assume the expression is always valid and contains no spaces. For example: - “3+5*2” should return 13, because the multiplication is performed before the addition. - “10+20/5” should return 14, because the division is performed before the addition. - “8-3*2+4” should return 6, as multiplication comes before subtraction and addition. Notes: 1. Division should be treated as integer division which drops the fractional part (i.e., 20/3 should return 6). 2. The input can contain any combination of these operators and numbers. The function signature should be: ```python def evaluate_expression(expression: str) -> int: # Your code here ``` Implement this function to correctly evaluate the expression based on the given instructions.","solution":"def evaluate_expression(expression: str) -> int: Evaluates a mathematical expression containing positive integers and the operators \'+\', \'-\', \'*\', and \'/\' strictly following the order of operations. import re tokens = re.findall(r\'d+|[+/*()-]\', expression) def helper(tokens): stack = [] num = 0 sign = \'+\' while tokens: token = tokens.pop(0) if token.isdigit(): num = int(token) if token in \'+-*/\' or not tokens: if sign == \'+\': stack.append(num) elif sign == \'-\': stack.append(-num) elif sign == \'*\': stack.append(stack.pop() * num) elif sign == \'/\': stack.append(int(stack.pop() / num)) sign = token num = 0 return sum(stack) return helper(tokens)"},{"question":"You are given a string s consisting of lowercase English letters and you are required to count the number of distinct non-empty substrings of s that contain at most k distinct characters. -----Input----- The first line contains a string s (1 le |s| le 10^5). The second line contains an integer k (1 le k le 26). -----Output----- Print one integer – the number of distinct non-empty substrings of s that contain at most k distinct characters. -----Examples----- Input abcba 2 Output 8 Input aabbcc 1 Output 6 -----Note----- In the first test case, the distinct substrings that contain at most 2 distinct characters are: \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", \\"cb\\", \\"ba\\", \\"bcb\\". In the second test case, the distinct substrings that contain at most 1 distinct characters are: \\"a\\", \\"b\\", \\"c\\", \\"aa\\", \\"bb\\", \\"cc\\".","solution":"def count_k_distinct_substrings(s, k): Returns the number of distinct non-empty substrings of s that contain at most k distinct characters. n = len(s) distinct_substrings = set() for start in range(n): distinct_chars = set() current_substring = \\"\\" for end in range(start, n): current_substring += s[end] distinct_chars.add(s[end]) if len(distinct_chars) > k: break distinct_substrings.add(current_substring) return len(distinct_substrings)"},{"question":"Given an undirected graph representing a city map with N landmarks and M bidirectional roads between them, a city planner wants to ensure that it is possible to travel between any two landmarks using a series of roads. However, due to budget constraints, the planner aims to minimize the number of roads to be constructed to achieve this connectivity. You are tasked to determine the minimum number of new roads that need to be added to make the city fully connected. # Input The input is given in the following format: ``` N M u1 v1 u2 v2 ... uM vM ``` - The first line contains two integers, N (2 ≤ N ≤ 105) - the number of landmarks, and M (0 ≤ M ≤ 2×105) - the number of roads. - The next M lines each contain two integers `ui` and `vi` (0 ≤ ui, vi < N), which indicate there is a road between landmark `ui` and landmark `vi`. # Output Output a single integer - the minimum number of new roads required to make the city fully connected. # Example Input ``` 6 3 0 1 2 3 4 5 ``` Output ``` 2 ``` Input ``` 5 2 0 1 1 2 ``` Output ``` 2 ``` # Explanation In the first example, the city map can be split into three disconnected components: {0, 1}, {2, 3}, and {4, 5}. To connect these components, we need at least two new roads - one connecting a landmark from the first component to a landmark from the second, and another connecting a landmark from the second component to a landmark from the third. In the second example, the city map has two disconnected components: {0, 1, 2} and {3, 4}. Only two new roads are needed to connect these two components.","solution":"def find_min_new_roads(N, M, roads): Determines the minimum number of new roads needed to make the city fully connected. :param N: Number of landmarks :param M: Number of existing roads :param roads: List of roads where each road is a tuple (u, v) :return: Minimum number of additional roads required to make the city fully connected from collections import defaultdict, deque def bfs(node): queue = deque([node]) visited.add(node) while queue: current = queue.popleft() for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) if M == 0: return N - 1 graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) visited = set() components = 0 for i in range(N): if i not in visited: bfs(i) components += 1 return components - 1"},{"question":"In this problem, you are given an NxN grid representing a chessboard. Each cell on the grid is either empty or contains a knight (indicated by \'K\'). Two knights threaten each other if they can move to the same cell according to the movement rules of a knight in chess. A knight moves in an \\"L\\" shape: two cells in one direction and one cell perpendicular, or one cell in one direction and two cells perpendicular. Your task is to determine if any two knights on the board threaten each other. You should print \\"YES\\" if there is at least one pair of knights that threaten each other, and \\"NO\\" otherwise. **Input:** The first line of the input contains a single integer N (1 ≤ N ≤ 100) – the size of the grid. Each of the next N lines contains N characters: either \'.\' (an empty cell) or \'K\' (a cell containing a knight). **Output:** Print \\"YES\\" if any two knights on the board threaten each other, otherwise print \\"NO\\". **Examples:** Input 5 ..... .K... ...K. ..... ..... Output YES Input 4 .K.. .... .K.. .... Output NO Input 3 K.. ..K ... Output NO **Note:** In the first example, the two knights threaten each other as they are positioned such that one of them can move to the other\'s position following the movement rules of the knight. In the second example the knights do not threaten each other as their positions do not allow them to move to the same cell. In the third example, despite being on diagonally opposite positions, the knights do not threaten each other based on their movement rules.","solution":"def are_knights_threatening(N, board): Determine if any two knights on the board threaten each other. Parameters: N (int): The size of the grid. board (list of str): The NxN grid representing the chessboard. Returns: str: \\"YES\\" if any two knights threaten each other, \\"NO\\" otherwise. knight_moves = [ (2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2) ] knights = [(i, j) for i in range(N) for j in range(N) if board[i][j] == \'K\'] for x, y in knights: for dx, dy in knight_moves: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < N and board[nx][ny] == \'K\': return \\"YES\\" return \\"NO\\""},{"question":"Given an integer array `arr` of size `n` and an integer `k`, your task is to find the maximum number of distinct elements in any subarray of size `k`. A subarray is a contiguous part of an array. -----Input----- The first line contains one integer `t` (1 le t le 10^4) — the number of test cases. Each test case consists of two lines. The first line contains two integers `n` and `k` (1 le k le n le 2 cdot 10^5), indicating the size of the array and the size of the subarray, respectively. The second line contains `n` integers, the elements of the array `arr` (1 le arr[i] le 10^9). It is guaranteed that the sum of `n` over all test cases does not exceed 2 cdot 10^5. -----Output----- For each test case, print one integer—the maximum number of distinct elements in any subarray of size `k`. -----Examples----- Input 2 6 3 1 2 1 3 4 3 5 2 4 4 4 4 4 Output 3 1 -----Note----- In the first example, for the two test cases: - For `arr = [1, 2, 1, 3, 4, 3]` and `k = 3`, the subarrays of size 3 are: `[1, 2, 1]`, `[2, 1, 3]`, `[1, 3, 4]` and `[3, 4, 3]`. The maximum number of distinct elements in any of these subarrays is 3 (subarray `[1, 3, 4]`). - For `arr = [4, 4, 4, 4, 4]` and `k = 2`, the subarrays of size 2 are: `[4, 4]`, `[4, 4]`, `[4, 4]`, and `[4, 4]`. The maximum number of distinct elements in any of these subarrays is 1.","solution":"from collections import defaultdict def max_distinct_elements(t, test_cases): results = [] for case in test_cases: n, k, arr = case window_counts = defaultdict(int) distinct_count = 0 max_distinct = 0 for i in range(n): if i >= k: if window_counts[arr[i - k]] == 1: distinct_count -= 1 window_counts[arr[i - k]] -= 1 if window_counts[arr[i]] == 0: distinct_count += 1 window_counts[arr[i]] += 1 if i >= k - 1: max_distinct = max(max_distinct, distinct_count) results.append(max_distinct) return results"},{"question":"You are tasked with organizing a series of coded messages. Each message is composed of words that are separated by spaces. However, the messages have been encoded such that the order of the words is reversed. Your goal is to decode the messages by reversing the order of the words. For example, consider the input message: `\\"this is a test\\"` The decoded message should be: `\\"test a is this\\"` Your function should return the decoded string. # Input - A string `encoded_message` consisting of words separated by spaces, with a length between 1 and 1000 characters. # Output - A string with the words in `encoded_message` reversed. # Example **Input:** `\\"hello world\\"` **Output:** `\\"world hello\\"` **Input:** `\\"python coding challenges\\"` **Output:** `\\"challenges coding python\\"` **Constraints:** - You may assume that all words in the input are separated by a single space. - The input string does not contain leading or trailing spaces. - All words consist of only alphabetical characters and are between 1 and 100 characters in length. Create a function `decode_message(encoded_message)` that takes in a string `encoded_message` and returns a string with the words in the reverse order. For instance: ```python def decode_message(encoded_message: str) -> str: pass ```","solution":"def decode_message(encoded_message: str) -> str: Decodes the encoded message by reversing the order of words. Args: encoded_message (str): The encoded message where words are reversed. Returns: str: The decoded message with words in the correct order. words = encoded_message.split() reversed_words = words[::-1] decoded_message = \' \'.join(reversed_words) return decoded_message"},{"question":"The government of Hackland has recently implemented a new traffic monitoring system to reduce congestion and improve road safety. They have placed cameras on major roads to record the number of vehicles passing by in a given interval. Hackland\'s traffic department wants to analyze the data to find the time interval with the highest vehicle count. Your task is to write a program to determine the time interval with the highest vehicle count for each monitoring session. If there are multiple intervals with the same highest count, return any one of them. INPUT: The first line of the input contains a single integer T, the number of test cases. The first line of each test case contains an integer N, the number of recorded time intervals. The second line contains N space-separated integers, representing the number of vehicles passing by in each time interval. OUTPUT: For each test case, output the index (1-based) of the time interval with the highest vehicle count. CONSTRAINTS: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^6 0 ≤ vehicles_count[i] ≤ 10^6 SAMPLE INPUT 2 5 3 7 2 9 4 4 10 10 10 5 SAMPLE OUTPUT 4 1 Explanation: In the first test case, the maximum vehicle count is 9, recorded in the 4th interval. In the second test case, the maximum vehicle count is 10, recorded in the 1st, 2nd, and 3rd intervals. Any of these intervals can be returned.","solution":"def find_max_traffic_interval(test_cases): Determines the time interval with the highest vehicle count for each test case. Parameters: test_cases (list of tuples): A list where each tuple contains: - N (int): number of recorded time intervals - vehicles_count (list of int): count of vehicles for each interval Returns: list of int: List of 1-based indices of the time intervals with the highest vehicle count. results = [] for N, vehicles_count in test_cases: max_count = -1 max_index = -1 for i in range(N): if vehicles_count[i] > max_count: max_count = vehicles_count[i] max_index = i + 1 # convert to 1-based index results.append(max_index) return results"},{"question":"Create a program that reads a series of integer number pairs and determines the greatest common divisor (GCD) for each pair. The GCD is defined as the largest positive integer that divides each of the numbers without leaving a remainder. Input The input consists of several pairs of integers. Each pair is provided on a separate line, and the end of the input is indicated by a pair consisting of two zeroes (0 0). The numbers will be in the range 1 ≤ a, b ≤ 10,000. Output For every pair of integers, output the GCD on a new line. If the input is a pair of zeroes (0 0), terminate the program without outputting anything. Example Input: 48 18 99 78 101 103 0 0 Output: 6 3 1","solution":"import sys import math def process_and_find_gcd(): input_stream = sys.stdin for line in input_stream: a, b = map(int, line.split()) if a == 0 and b == 0: break print(math.gcd(a, b))"},{"question":"Given a singly linked list, rotate the list to the right by k places, where k is non-negative. For example, if the given linked list is 1->2->3->4->5 and k is 2, the linked list should be modified to 4->5->1->2->3. If k is larger than the length of the list, perform rotations as if k is k % length of the list. Example 1: Input: LinkedList: 1->2->3->4->5, k = 2 Output: 4 5 1 2 3 Example 2: Input: LinkedList: 10->20->30->40->50, k = 3 Output: 30 40 50 10 20 Your Task: The task is to complete the function rotateRight() which should rotate the list to the right by k places and return the head of the modified linked list. If the linked list is empty or has only one node, it should return the original list. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 1000 0 <= k <= 1000 1 <= Node Value <= 1000","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def rotateRight(head, k): if not head or not head.next or k == 0: return head # Find the length of the linked list length = 1 current = head while current.next: current = current.next length += 1 # Make the linked list circular current.next = head # Compute the effective rotations needed k = k % length if k == 0: current.next = None return head # Find the new tail of the rotated list steps_to_new_tail = length - k new_tail = head for _ in range(steps_to_new_tail - 1): new_tail = new_tail.next # Set the new head and break the circle new_head = new_tail.next new_tail.next = None return new_head def list_to_linkedlist(lst): if not lst: return None head = ListNode(lst[0]) current = head for value in lst[1:]: current.next = ListNode(value) current = current.next return head def linkedlist_to_list(head): lst = [] while head: lst.append(head.value) head = head.next return lst"},{"question":"Write a program to simulate a game of Rock, Paper, Scissors between a player and the computer. The game should be played over multiple rounds, and after each round, the program should provide the current score. The game ends when the user types \\"exit\\". Follow these rules for the game: * Rock beats Scissors * Scissors beats Paper * Paper beats Rock Input The input consists of multiple rounds. In each round: * The player inputs one of \\"rock\\", \\"paper\\", \\"scissors\\" or \\"exit\\" to terminate the game Output For each round, print the result of the round (\\"win\\", \\"lose\\", or \\"draw\\") and the updated score in the format \\"Player: X Computer: Y\\", where X is the number of rounds won by the player and Y is the number of rounds won by the computer. If the player chooses \\"exit\\", display the final score and terminate the game. Example Input rock scissors paper exit Output win Player: 1 Computer: 0 win Player: 2 Computer: 0 draw Player: 2 Computer: 0 Final Score - Player: 2 Computer: 0","solution":"import random def get_computer_choice(): return random.choice([\'rock\', \'paper\', \'scissors\']) def determine_winner(player_choice, computer_choice): if player_choice == computer_choice: return \'draw\' elif (player_choice == \\"rock\\" and computer_choice == \\"scissors\\") or (player_choice == \\"scissors\\" and computer_choice == \\"paper\\") or (player_choice == \\"paper\\" and computer_choice == \\"rock\\"): return \'win\' else: return \'lose\' def play_game(): player_score = 0 computer_score = 0 while True: player_choice = input(\\"Enter rock, paper, scissors or exit: \\").lower() if player_choice == \'exit\': print(f\\"Final Score - Player: {player_score} Computer: {computer_score}\\") break if player_choice not in [\'rock\', \'paper\', \'scissors\']: print(\\"Invalid input, please enter rock, paper, scissors or exit.\\") continue computer_choice = get_computer_choice() result = determine_winner(player_choice, computer_choice) if result == \'win\': player_score += 1 elif result == \'lose\': computer_score += 1 print(result) print(f\\"Player: {player_score} Computer: {computer_score}\\")"},{"question":"You are given a binary tree with n nodes. Each node has a value associated with it. Your task is to find the maximum sum of the node values such that no two nodes included in the sum are direct parent-child or sibling nodes. -----Input----- The first line of input will have one integer n (1 ≤ n ≤ 1000), the number of nodes in the binary tree. The second line will have n integers, the values of the nodes in the binary tree in a level-order traversal. Then there will be n-1 lines, each containing two integers u and v (1 ≤ u, v ≤ n), representing a direct edge between node u and v. Node 1 is always the root of the tree. -----Output----- A single integer, the maximum sum meeting the described condition. -----Examples----- Input 5 10 1 2 3 4 1 2 1 3 2 4 2 5 Output 17 Input 4 5 5 10 40 1 2 1 3 3 4 Output 45 -----Note----- In the first sample, the optimal selection is nodes 1, 4, and 5, resulting in the sum 10 + 3 + 4 = 17. In the second sample, the optimal selection is nodes 1 and 4, resulting in the sum 5 + 40 = 45.","solution":"def find_max_sum(nodes, edges): from collections import defaultdict n = len(nodes) # Building the adjacency list adj = defaultdict(list) for u, v in edges: adj[u].append(v) adj[v].append(u) # Using memoization to store the results memo = {} def dfs(node, parent, include): if (node, include) in memo: return memo[(node, include)] if include: sum_incl = nodes[node-1] for neighbor in adj[node]: if neighbor != parent: sum_incl += dfs(neighbor, node, False) memo[(node, include)] = sum_incl else: sum_excl = 0 for neighbor in adj[node]: if neighbor != parent: sum_excl += max(dfs(neighbor, node, True), dfs(neighbor, node, False)) memo[(node, include)] = sum_excl return memo[(node, include)] return max(dfs(1, -1, True), dfs(1, -1, False)) def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) nodes = list(map(int, data[1:n+1])) edges = [] index = n + 1 for _ in range(n-1): u = int(data[index]) v = int(data[index + 1]) edges.append((u, v)) index += 2 # Find the maximum sum of the nodes result = find_max_sum(nodes, edges) print(result)"},{"question":"Write a program that accepts a string of letters and integers and checks whether the string is a palindrome where only the letters are considered, ignoring the case, spaces, and special characters. Input The number of test cases should be specified as the first input (between 1 to 100). Each subsequent input should be a single string to test for being a palindrome. Output The output should display whether the string is a palindrome (considering only letters) by printing \\"palindrome\\" if it is or \\"not a palindrome\\" if it is not. Example Input: 3 A man, a plan, a canal, Panama! No \'x\' in Nixon 123Abc-!cbA321 Output: palindrome palindrome palindrome","solution":"def is_palindrome(s): Checks if the given string s is a palindrome considering only letters and ignoring case, spaces, and special characters. # Filter out non-letter characters and convert to lower case filtered_chars = [char.lower() for char in s if char.isalpha()] # Check if the filtered characters form a palindrome return filtered_chars == filtered_chars[::-1] def check_palindromes(test_cases): Processes multiple test cases to check if each of them is a palindrome. results = [] for s in test_cases: if is_palindrome(s): results.append(\\"palindrome\\") else: results.append(\\"not a palindrome\\") return results"},{"question":"TrainCompany wants to create a timetable for the n trains it operates at its terminal. The company wants to publish the timetable with the names of all the trains listed in two columns: the timetable should consist of exactly n / 2 rows of strictly equal length, each of which contains exactly two train names and exactly one separator character between them. All the train names should be used in the timetable exactly once. For readability reasons, the symbol t is used as the separator of words in the timetable. TrainCompany wants the timetable to be ordered such that if all the n / 2 rows are \\"glued\\" (concatenated) together from top to bottom into a single line, the resulting string is lexicographically minimal. Importantly, no separator character will be used to separate the rows when creating the single string. For example, if the rows are \\"train1ttrain2\\" and \\"train3ttrain4\\", the resulting string to be minimized is \\"train1ttrain2train3ttrain4\\". Help TrainCompany construct the desired timetable. Input The first line contains an integer n (2 ≤ n ≤ 104, n is even) which is the number of trains. The next n lines each contain the name of a train. All the names consist of lowercase Latin letters and have lengths between 1 and 10 characters. The next line contains a single character t (t has an ASCII-code from 33 to 126 inclusive, excluding lowercase Latin letters) which is the separator between words in the timetable rows. It is guaranteed that the timetable is possible to be constructed and all the names are distinct. Output Print n / 2 lines of the required timetable. Each line should contain exactly two train names separated by the designated symbol. If there are multiple solutions, print the lexicographically minimal one. The lexicographical comparison of lines is implemented by the \\"<\\" operator in modern programming languages. Examples Input 4 express bullet freight cargo . Output bullet.cargo express.freight Input 2 alpha beta ! Output alpha!beta Input 2 speedy rapid | Output rapid|speedy","solution":"def create_timetable(n, train_names, separator): Creates a timetable for the given trains that is lexicographically minimal. Args: n (int): Number of trains. train_names (list of str): List of train names. separator (str): Separator character used to join train names. Returns: list of str: A list containing n / 2 rows of timetable strings. # Sort the train names lexicographically sorted_names = sorted(train_names) # Initialize an empty list to store the timetable lines timetable = [] # Add pairs of train names separated by the given separator to the timetable for i in range(0, n, 2): line1 = sorted_names[i] + separator + sorted_names[i + 1] line2 = sorted_names[i + 1] + separator + sorted_names[i] # Append the lexicographically smaller line of the two combinations timetable.append(min(line1, line2)) # Lexicographically sort the final timetable lines timetable.sort() return timetable"},{"question":"Write a function that takes in a string and returns a new string where each character is repeated twice. For example, given the string ```\\"hello\\"```, the expected output would be ```\\"hheelllloo\\"```. Another example, given the string ```\\"abcd\\"```, the expected output would be ```\\"aabbccdd\\"```.","solution":"def repeat_chars_twice(input_string): Returns a new string where each character is repeated twice. return \'\'.join([char * 2 for char in input_string])"},{"question":"You are given a string `s` and an array of strings `words`. Your task is to find all the starting indices of `words`\'s concatenation in `s`. The concatenation must consist of all words in `words` exactly once without any intervening characters, and they must be grouped together in any order. The order of words in concatenation does not matter. Return the starting indices in any order. Example: Input: s = \\"barfoothefoobarman\\", words = [\\"foo\\", \\"bar\\"] Output: [0, 9] Explanation: Substrings starting at index 0 and 9 are \\"barfoo\\" and \\"foobar\\" respectively. The output order does not matter, so [9, 0] is also correct. Input: s = \\"wordgoodgoodgoodbestword\\", words = [\\"word\\",\\"good\\",\\"best\\",\\"word\\"] Output: [] Explanation: \\"words\\" could not be concatenated in any grouping to form a substring of \\"s\\". Input: s = \\"barfoofoobarthefoobarman\\", words = [\\"bar\\",\\"foo\\",\\"the\\"] Output: [6,9,12] Explanation: Substrings starting at index 6, 9 and 12 are \\"foobarthe\\", \\"barthefoo\\" and \\"thefoobar\\" respectively. Constraints: 1 <= s.length <= 10^4 1 <= words.length <= 5000 1 <= words[i].length <= 30","solution":"def find_substring(s, words): Finds all starting indices of words\'s concatenation in s. if not s or not words: return [] word_length = len(words[0]) num_words = len(words) total_length = word_length * num_words if total_length > len(s): return [] from collections import Counter word_count = Counter(words) result = [] for i in range(word_length): left = i right = i current_count = Counter() while right + word_length <= len(s): word = s[right:right + word_length] current_count[word] += 1 right += word_length while current_count[word] > word_count[word]: left_word = s[left:left + word_length] current_count[left_word] -= 1 left += word_length if right - left == total_length: result.append(left) return result"},{"question":"Lara is a young archaeologist who has recently discovered an ancient board game in a deserted temple. The board game consists of a grid of size n x m, filled with numbers. To initiate the game, she has to find a segment in any row (consecutive cells in a horizontal line) whose sum is divisible by a given integer k. Help Lara find such a segment in the grid. If there are multiple such segments, you can return any one of them. If no such segment exists, return -1. # Input # The first line contains three integers n, m, and k (1 ≤ n, m ≤ 500, 1 ≤ k ≤ 100), the size of the grid and the given integer, respectively. The next n lines contain m integers each, representing the grid. Each integer in the grid is between -1000 and 1000, inclusive. # Output # If a valid segment exists, print three integers: the row index (1-based), the start column index (1-based), and the end column index (1-based) of the segment found. If no such segment exists, print -1. # Examples # Example 1 **Input:** ``` 3 4 5 4 8 6 2 1 12 10 6 4 3 7 5 ``` **Output:** ``` 1 1 4 ``` Example 2 **Input:** ``` 2 5 10 1 2 3 4 5 6 7 8 9 10 ``` **Output:** ``` 2 2 5 ``` Example 3 **Input:** ``` 2 3 13 1 2 3 4 5 6 ``` **Output:** ``` -1 ```","solution":"def find_segment(n, m, k, grid): for row_index in range(n): for start_col in range(m): current_sum = 0 for end_col in range(start_col, m): current_sum += grid[row_index][end_col] if current_sum % k == 0: return row_index + 1, start_col + 1, end_col + 1 return -1"},{"question":"An e-commerce website keeps track of the number of products its sellers list each day. Each seller lists a variety of products and each product is assigned a unique Product ID starting from 1, 2, 3, and so on. The website wants to analyze the workload for its sellers by finding out the sum of all Product IDs listed by each seller in a day. Write a program that takes several test cases as input. Each test case contains a single integer n (1 ≤ n ≤ 10^9) representing the number of products listed by a single seller in a day. For each test case, calculate the sum of the Product IDs from 1 to n. Input: First line contains T, the number of test cases. (1 ≤ T ≤ 1000) Each of the following T lines contains a single integer n. Output: For each test case, print the sum of the first n Product IDs. SAMPLE INPUT 2 5 10 SAMPLE OUTPUT 15 55 Explanation Sample input 5 output 15 input 10 output 55 Explanation: For the first test case, the sum of Product IDs 1, 2, 3, 4, and 5 is 1+2+3+4+5=15. For the second test case, the sum of Product IDs 1 to 10 is 1+2+3+4+5+6+7+8+9+10=55.","solution":"def sum_of_product_ids(n): Returns the sum of Product IDs from 1 to n. return n * (n + 1) // 2 def process_test_cases(test_cases): Processes multiple test cases and returns the result. :param test_cases: List of integers where each integer represents n in the test case. :return: List of integers representing the sum of the first n Product IDs for each test case. results = [] for n in test_cases: results.append(sum_of_product_ids(n)) return results"},{"question":"Given an array A of n integers, where each integer represents the height of a bar at the corresponding position. Define the \\"right larger index\\" of a bar at index i as the smallest index j such that j > i and A[j] > A[i]. If there is no such index, the right larger index for this bar should be -1. For example, if A = [2, 1, 3, 4, 2, 1], the right larger index array would be [2, 2, 3, -1, -1, -1]. You need to write a function to compute the right larger index array for a given input array. -----Input----- The first line contains a single integer t (1 leq t leq 1000) — the number of test cases. Each test case has two lines. The first line contains a single integer n (1 leq n leq 10^5). The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9). The sum of n over all test cases does not exceed 10^6. -----Output----- For each test case, output a single line containing n integers — the right larger index array for the given input array. -----Examples----- Input 3 6 2 1 3 4 2 1 5 5 4 3 2 1 7 1 3 2 4 3 5 2 Output 2 2 3 -1 -1 -1 -1 -1 -1 -1 -1 1 3 3 5 5 -1 -1 -----Note----- In the first test case, for the first element \'2\', the smallest index j such that A[j] > 2 is 2 (value 3 at index 2), for the second element \'1\', the smallest index j such that A[j] > 1 is also 2 (value 3 at index 2), for the third element \'3\', the smallest index j such that A[j] > 3 is 3 (value 4 at index 3), for the fourth element \'4\', there is no element greater than 4 to the right of it, so the right larger index is -1, for the fifth element \'2\', there is no element greater than 2 to the right of it, so the right larger index is -1, for the last element \'1\', there is no element greater than 1 to the right of it, so the right larger index is -1.","solution":"def right_larger_index(arr): Returns the right larger index for each element in the given array. :param arr: List[int] :return: List[int] n = len(arr) result = [-1] * n stack = [] for i in range(n): while stack and arr[stack[-1]] < arr[i]: result[stack.pop()] = i stack.append(i) return result def process_test_cases(t, test_cases): results = [] for i in range(t): n, arr = test_cases[i] results.append(right_larger_index(arr)) return results"},{"question":"A binary tree is a data structure in which each node has at most two children, referred to as the left child and the right child. Your task is to implement a program that constructs a binary tree given its preorder and inorder traversal sequences, and then prints its postorder traversal. # Definitions: - **Preorder Traversal**: Visit root, then left subtree, then right subtree. - **Inorder Traversal**: Visit left subtree, then root, then right subtree. - **Postorder Traversal**: Visit left subtree, then right subtree, then root. # Input - The first line contains an integer `n` (1 ≤ n ≤ 1000), the number of nodes in the binary tree. - The second line contains `n` integers, the preorder traversal of the tree (node values are unique and between 1 and 1000). - The third line contains `n` integers, the inorder traversal of the tree. # Output - Print a single line with `n` integers, the postorder traversal of the tree. # Example **Input** ``` 7 1 2 4 5 3 6 7 4 2 5 1 6 3 7 ``` **Output** ``` 4 5 2 6 7 3 1 ``` **Explanation** Given: - Preorder: [1, 2, 4, 5, 3, 6, 7] - Inorder: [4, 2, 5, 1, 6, 3, 7] The postorder traversal of the constructed binary tree should be: - Postorder: [4, 5, 2, 6, 7, 3, 1] Write a function that meets the given requirements.","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def build_tree(preorder, inorder): if not preorder or not inorder: return None root_value = preorder[0] root = TreeNode(root_value) root_index_in_inorder = inorder.index(root_value) root.left = build_tree(preorder[1:1 + root_index_in_inorder], inorder[:root_index_in_inorder]) root.right = build_tree(preorder[1 + root_index_in_inorder:], inorder[root_index_in_inorder + 1:]) return root def postorder_traversal(root): if root is None: return [] left_subtree = postorder_traversal(root.left) right_subtree = postorder_traversal(root.right) return left_subtree + right_subtree + [root.value] def construct_tree_and_get_postorder(n, preorder, inorder): root = build_tree(preorder, inorder) return postorder_traversal(root)"},{"question":"You are given a string S consisting only of digits (\'0\'-\'9\'). Your task is to determine the largest number that can be formed by removing exactly one digit from the string. Example 1: Input: S = \\"12345\\" Output: \\"2345\\" Example 2: Input: S = \\"54321\\" Output: \\"5432\\" Your Task: You don\'t need to read or print anything. Your task is to complete the function LargestNumber() which takes the string S as input and returns the largest number that can be formed by removing one digit from the string. Expected Time Complexity: O(n) Expected Space Complexity: O(1) Constraints: 1 <= len(S) <= 10^5","solution":"def largest_number(S): Returns the largest number that can be formed by removing exactly one digit from the string S. Parameters: S (str): A string consisting only of digits (\'0\'-\'9\'). Returns: str: The largest number obtainable by removing one digit. # Initialize the largest number to be the one without the first digit max_number = S[1:] # Iterate through the string to find the largest possible number by removing one digit for i in range(1, len(S)): current_number = S[:i] + S[i+1:] if current_number > max_number: max_number = current_number return max_number"},{"question":"You are given a string S consisting of lowercase English letters and another string T. Your task is to determine the length of the longest subsequence of S which is also a substring of T. A subsequence is a sequence that can be derived from another sequence by deleting some or none of the elements without changing the order of the remaining elements. A substring is a contiguous block of characters within a string. -----Input----- - The first line of the input contains a single integer Q denoting the number of queries. The description of Q queries follows. - For each query, the first line contains the string S. - The second line contains the string T. -----Output----- For each query, print the length of the longest subsequence of S which is also a substring of T. -----Constraints----- - 1 le Q le 100 - 1 le |S| le 300 - 1 le |T| le 5000 -----Example Input----- 3 abc abcd xyz xyzxyz abc xyxaybyc -----Example Output----- 3 3 1 -----Explanation----- Example case 1: The entire string \\"abc\\" is a subsequence of itself and is found as a substring within \\"abcd\\". Example case 2: The entire string \\"xyz\\" is a subsequence of itself and is found as a substring within \\"xyzxyz\\". Example case 3: The longest subsequence of \\"abc\\" which is also a substring of \\"xyxaybyc\\" is \\"c\\", and there are no longer subsequences that appear as substrings in T.","solution":"def longest_subsequence_in_substring(S, T): Determine the length of the longest subsequence of S which is also a substring of T. m, n = len(S), len(T) # Initialize the dp matrix. dp = [[0] * (n + 1) for _ in range(m + 1)] max_length = 0 # Fill the dp matrix for i in range(1, m + 1): for j in range(1, n + 1): if S[i - 1] == T[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 max_length = max(max_length, dp[i][j]) else: dp[i][j] = 0 return max_length def solve(queries): results = [] for S, T in queries: results.append(longest_subsequence_in_substring(S, T)) return results"},{"question":"Implement a function that takes an input array of integers and returns a new array that contains the elements of the input array where each element `n` has been replaced by the product of all the elements in the input array except `n` itself. For example, given the input array `[1, 2, 3, 4]`, the corresponding output array should be `[24, 12, 8, 6]` because: - 24 is the product of 2, 3, and 4 - 12 is the product of 1, 3, and 4 - 8 is the product of 1, 2, and 4 - 6 is the product of 1, 2, and 3 You must not use division in the implementation of the function. Write a function signature that takes in a list of integers `nums` and returns a list of integers. # Function Signature: ```python def product_except_self(nums: List[int]) -> List[int]: ``` # Examples: ```python product_except_self([1, 2, 3, 4]) # should return [24, 12, 8, 6] product_except_self([2, 3]) # should return [3, 2] product_except_self([5, 6, 2, 3]) # should return [36, 30, 90, 60] product_except_self([1, 1, 1, 1]) # should return [1, 1, 1, 1] ``` # Constraints: - The function must be implemented using only `O(n)` time complexity where `n` is the length of the input array. - The function should not use division. - The input list will contain at least one element. - All elements in the input list are non-zero integers.","solution":"from typing import List def product_except_self(nums: List[int]) -> List[int]: length = len(nums) # Result array to store the final product values result = [1] * length # Initial prefix product prefix_product = 1 for i in range(length): result[i] = prefix_product prefix_product *= nums[i] # Initial suffix product suffix_product = 1 for i in range(length-1, -1, -1): result[i] *= suffix_product suffix_product *= nums[i] return result"},{"question":"Professor Walker has been experimenting with Fibonacci sequences and has created a variant sequence called the \\"Factorial Fibonacci.\\" In a Factorial Fibonacci sequence, each term is defined as follows: - The first term F(1) = 1 - The second term F(2) = 1 - For n > 2, F(n) = F(n-1) + factorial(n-2) Where factorial(m) is the factorial of integer m (i.e., m!). Given an integer N, Professor Walker wants to know the value of F(N) in his Factorial Fibonacci sequence. Input The first line contains an integer T, denoting the number of test cases. In the next T lines, each line contains an integer N. Output Output should contain T lines. Print the value of F(N) for each test case in a separate line. Constraints 1 <= T <= 10^5 1 <= N <= 20 Example Input 3 1 3 5 Output 1 3 127 Explanation Test case 1: F(1) = 1 Test case 2: F(3) = F(2) + factorial(1) = 1 + 1 = 2 Test case 3: F(5) = F(4) + factorial(3) = (F(3) + factorial(2)) + factorial(3) = (2 + 2) + 6 = 4 + 6 = 10","solution":"import math def factorial_fibonacci(n): if n == 1 or n == 2: return 1 else: terms = [1, 1] for i in range(3, n+1): new_term = terms[-1] + math.factorial(i-2) terms.append(new_term) return terms[-1] def process_test_cases(test_cases): results = [] for case in test_cases: results.append(factorial_fibonacci(case)) return results"},{"question":"Given an array of integers, your task is to complete the function `findSubArrayWithSum` that finds subarray(s) with a given sum. The function returns true if there exists at least one such subarray, otherwise returns false. Example 1: Input: arr = [1, 4, 20, 3, 10, 5] sum = 33 Output: True Explanation: Subarray [20, 3, 10] has sum 33. Example 2: Input: arr = [1, 4, 0, 0, 3, 10, 5] sum = 7 Output: True Explanation: Subarray [4, 3] has sum 7. Example 3: Input: arr = [1, 4] sum = 0 Output: False Explanation: There is no subarray with sum 0. Your Task: You do not need to read input or print anything. Complete the function `findSubArrayWithSum()` which takes the array `arr` and the integer `sum` as input parameters and returns a boolean value indicating whether such a subarray exists. Expected Time Complexity: O(N) Expected Space Complexity: O(N) Constraints: 1 <= N <= 10⁵ -10⁷ <= arr[i] <= 10⁷ -10⁷ <= sum <= 10⁷","solution":"def findSubArrayWithSum(arr, target_sum): Returns True if there exists at least one subarray with the given sum in the array `arr`, otherwise returns False. current_sum = 0 sum_dict = {} for num in arr: current_sum += num if current_sum == target_sum: return True if current_sum - target_sum in sum_dict: return True sum_dict[current_sum] = True return False"},{"question":"In a rectangular garden, there is a network of paths forming an M x N grid. Each cell in the grid represents a point in the garden, and each point can either be grass (\'G\') or a rock (\'R\'). You can move between adjacent cells horizontally or vertically but not diagonally. Starting from the top-left corner of the garden, you have to make your way to the bottom-right corner. However, you can only walk on grass cells. Your task is to determine whether there exists such a path from the top-left to the bottom-right corner of the garden. -----Input----- The first line contains two positive integers M and N (2 leq M, N leq 50). Next follows an M x N grid of characters each being either \'G\' or \'R\'. -----Output----- Output \\"Yes\\" if there exists a path from the top-left corner to the bottom-right corner consisting only of \'G\' cells, otherwise output \\"No\\". -----Examples----- Sample Input 1: 3 3 GGR GRG GGG Sample Output 1: Yes Sample Input 2: 4 4 GGRR RRGG RGRR GRGG Sample Output 2: No Sample Input 3: 2 2 GG GG Sample Output 3: Yes","solution":"def is_path_exists(grid): Determine whether a path exists from the top-left corner to the bottom-right corner of the garden. Parameters: grid (list of list of str): A 2D grid representing the garden with \'G\' for grass and \'R\' for rock. Returns: str: \\"Yes\\" if there exists a path from top-left to bottom-right consisting only of \'G\' cells, otherwise \\"No\\". if not grid or grid[0][0] == \'R\' or grid[-1][-1] == \'R\': return \\"No\\" M, N = len(grid), len(grid[0]) visited = [[False] * N for _ in range(M)] directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def dfs(x, y): if x == M - 1 and y == N - 1: return True visited[x][y] = True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < M and 0 <= ny < N and not visited[nx][ny] and grid[nx][ny] == \'G\': if dfs(nx, ny): return True return False return \\"Yes\\" if dfs(0, 0) else \\"No\\""},{"question":"**Problem**: You are tasked with providing a visualization of a digital clock. The digital clock displays the time in a 24-hour format (hh:mm:ss). Your goal is to implement a function that accepts three integers representing hours, minutes, and seconds. The function should return a string representing the time in the format \\"hh:mm:ss\\". Ensure that: - The hours are between 0 and 23. - The minutes and seconds are between 0 and 59. - Leading zeros are added to hours, minutes, or seconds that are less than 10 to ensure a consistent format. Constraints: - The input satisfies the following conditions: * `0 <= hours <= 23` * `0 <= minutes <= 59` * `0 <= seconds <= 59` # Function Signature ```python def format_time(hours: int, minutes: int, seconds: int) -> str: ``` # Input * A single integer `hours` (0 <= hours <= 23) * A single integer `minutes` (0 <= minutes <= 59) * A single integer `seconds` (0 <= seconds <= 59) # Output * A string representing the time in the `hh:mm:ss` format. # Example Input ```python format_time(9, 5, 45) ``` Output ```python \\"09:05:45\\" ``` Input ```python format_time(23, 59, 1) ``` Output ```python \\"23:59:01\\" ``` # Description Implement the function `format_time` to achieve the desired output format. Ensure that the resulting string displays the time correctly, keeping in mind the addition of leading zeros for single-digit hour, minute, and second values.","solution":"def format_time(hours: int, minutes: int, seconds: int) -> str: Returns a string representing the time in the format \'hh:mm:ss\'. :param hours: an integer (0 <= hours <= 23) :param minutes: an integer (0 <= minutes <= 59) :param seconds: an integer (0 <= seconds <= 59) :return: a string representing the time in \'hh:mm:ss\' format return f\\"{hours:02}:{minutes:02}:{seconds:02}\\""},{"question":"A group of hikers needs to cross a river using a small boat. The boat can carry only two people at a time, with a maximum weight capacity. Given the weights of the hikers and the boat\'s weight limit, determine the minimum number of boat trips required to get all the hikers across the river. Function Description Complete the minBoatTrips function in the editor below. minBoatTrips has the following parameter(s): int people[]: the weights of the hikers. int limit: the maximum weight capacity of the boat. Returns int: the minimum number of boat trips required. Input Format The first line contains an integer n, the number of hikers. The second line contains n space-separated integers, the weights of the hikers. The third line contains an integer limit, the maximum weight capacity of the boat. Constraints 1 leq n leq 1000 1 leq people[i] leq limit leq 1000 Sample Input STDIN Function ----- -------- 4 n = 4 70 50 80 50 people = [70, 50, 80, 50] 100 limit = 100 Sample Output 3 Explanation The boat can carry the pair (70, 50), leaving the pairs (80) and (50) for a total of 3 trips.","solution":"def minBoatTrips(people, limit): Determine the minimum number of boat trips required to get all the hikers across the river. Parameters: - people: list of integers representing the weights of hikers. - limit: integer representing the maximum weight capacity of the boat. Returns: - int: the minimum number of boat trips required. people.sort() i, j = 0, len(people) - 1 trips = 0 while i <= j: if people[i] + people[j] <= limit: i += 1 j -= 1 trips += 1 return trips"},{"question":"Subarray Sum Equals K Given an integer array `nums` and an integer `k`, you need to find the total number of continuous subarrays whose sum equals to `k`. Input - An integer `N`, the length of the array. - An integer `k`, the desired sum. - An array of integers `nums` of length `N`. Output - An integer representing the number of continuous subarrays whose sum equals to `k`. Constraints - 1 <= N <= 200,000 - -10^7 <= nums[i] <= 10^7 - -10^9 <= k <= 10^9 Input Example 8 7 4 3 2 1 1 1 1 1 Output Example 3 Explanation For the given array and target sum `k = 7`, the subarrays that sum up to `k` are: - [4, 3] - [3, 2, 1, 1] - [2, 1, 1, 1, 1]","solution":"def subarray_sum(nums, k): Given an array of integers and an integer k, find the total number of continuous subarrays whose sum equals to k. count = 0 current_sum = 0 prefix_sum_counts = {0: 1} # dictionary to keep track of all prefix sums and their frequencies for num in nums: current_sum += num if current_sum - k in prefix_sum_counts: count += prefix_sum_counts[current_sum - k] if current_sum in prefix_sum_counts: prefix_sum_counts[current_sum] += 1 else: prefix_sum_counts[current_sum] = 1 return count"},{"question":"In a quiet little town, there is a popular bakery named \\"Grandma\'s Bakery\\" which is known for its variety of delicious baked goods. Grandma wants to optimize the storage of these baked goods in the bakery\'s storage room. She has `n` different baked goods, each identified by a unique name and having a specific weight. Since the storage room has a maximum weight capacity `W`, Grandma needs your help to maximize the number of different baked goods she can store without exceeding the weight limit. You need to write a program that selects the maximum number of different baked goods such that the total weight does not exceed the storage room\'s maximum weight capacity. -----Input----- The first line contains two integers `n` (1 ≤ n ≤ 2 * 10^5) — the number of different baked goods and `W` (1 ≤ W ≤ 10^9) — the maximum weight capacity of the storage room. The following `n` lines describe the baked goods. Each line contains a string `name` and an integer `weight` (1 ≤ weight ≤ 10^9), where `name` is the identifier of the baked good (a string of digits and small English letters with a length from 1 to 10 characters) and `weight` is its weight. -----Output----- In the first line print the maximum number of different baked goods that can be stored. In the following lines, print the names of the selected baked goods in any order. -----Examples----- Input 5 10 cake 3 cookie 2 bread 4 muffin 5 pie 6 Output 3 cookie cake bread Input 4 15 baguette 10 bun 3 croissant 4 pretzel 5 Output 3 bun croissant pretzel Input 3 5 donut 10 eclair 6 tart 2 Output 1 tart","solution":"def maximize_storage(n, W, baked_goods): Returns the maximum number of different baked goods that can be stored without exceeding the given weight limit and the list of names of the selected baked goods. # Sort baked goods based on their weight in ascending order baked_goods.sort(key=lambda x: x[1]) total_weight = 0 selected_baked_goods = [] for name, weight in baked_goods: if total_weight + weight <= W: total_weight += weight selected_baked_goods.append(name) else: break count = len(selected_baked_goods) return count, selected_baked_goods"},{"question":"John, a software engineer, loves to organize events for his team. For one of the upcoming events, he needs to distribute personalized name badges to all attendees. Each badge consists of the attendee\'s first name and last name. However, the name badges should also consider a certain set of business rules for stylistic consistency. Each first name and last name will be provided in different cases (lowercase, uppercase, etc.), and John wants to standardize the badges so that: 1. The first letter of each first name and last name is uppercase. 2. All other letters should be lowercase. Please help John by writing a program that formats the names according to the given rules. INPUT The first line contains an integer N, the number of attendees. Then, N lines follow, each containing two strings representing the first name and the last name of an attendee. OUTPUT N lines, each containing the formatted first name and last name. Constraints 1 ≤ N ≤ 100 1 ≤ Length of first name, last name ≤ 100 SAMPLE INPUT 3 alice SMITH bOB jOnEs CHARLIE Brown SAMPLE OUTPUT Alice Smith Bob Jones Charlie Brown Explanation SAMPLE CASE 1: The first name \\"alice\\" is converted to \\"Alice\\" and the last name \\"SMITH\\" is converted to \\"Smith\\". SAMPLE CASE 2: The first name \\"bOB\\" is converted to \\"Bob\\" and the last name \\"jOnEs\\" is converted to \\"Jones\\". SAMPLE CASE 3: The first name \\"CHARLIE\\" is converted to \\"Charlie\\" and the last name \\"Brown\\" remains \\"Brown\\". By consistently converting the names, John ensures all badges will have a professional and uniform appearance.","solution":"def format_name_badges(attendees): Formats the first name and last name of attendees to have the first letter in uppercase and the rest in lowercase. Args: attendees (list of tuples): A list where each element is a tuple containing the first name and last name of an attendee. Returns: list of str: A list of formatted names. formatted_names = [] for first_name, last_name in attendees: formatted_first_name = first_name.capitalize() formatted_last_name = last_name.capitalize() formatted_names.append(f\\"{formatted_first_name} {formatted_last_name}\\") return formatted_names"},{"question":"You are given two strings, `s` and `t`, of lengths `n` and `m` respectively. Your task is to determine the minimum number of operations required to transform `s` into `t`. You can perform the following operations: 1. Insert a character 2. Delete a character 3. Replace a character Each operation counts as one modification step. Input The first line of the input contains two integers n and m, the lengths of the strings `s` and `t` respectively. The second line contains the string `s`, and the third line contains the string `t`. The problem consists of two subproblems. The subproblems have different constraints on the input. You will get some score for the correct submission of the subproblem. The description of the subproblems follows. * In subproblem E1 (9 points), constraints 1 ≤ n, m ≤ 100 will hold. * In subproblem E2 (12 points), constraints 1 ≤ n, m ≤ 1000 will hold. Output Output a single integer — the minimum number of operations required. Examples Input 5 3 horse ros Output 3 Input 4 5 intention execution Output 5 Note Consider the first sample test. The optimal solution is to delete \'h\', replace \'o\' with \'r\', and delete \'s\' to transform \\"horse\\" into \\"ros\\". Consider the second sample test. The optimal solution is to replace \'i\' with \'e\', replace \'n\' with \'x\', delete \'t\', replace \'t\' with \'c\', and delete \'i\' to transform \\"intention\\" into \\"execution\\".","solution":"def min_distance(s, t): n = len(s) m = len(t) dp = [[0] * (m + 1) for _ in range(n + 1)] for i in range(n + 1): for j in range(m + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif s[i - 1] == t[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i][j - 1], # Insert dp[i - 1][j], # Remove dp[i - 1][j - 1]) # Replace return dp[n][m]"},{"question":"In a given garden, there are **n** flowers positioned in a straight line. Each flower can be represented as a pair of integers (height, beauty) where height[i] is the height of the i-th flower and beauty[i] is its beauty value. We say that a pair of flowers (i, j) (1 ≤ i < j ≤ n) is \\"visually pleasing\\" if and only if: - height[i] < height[j] - beauty[i] < beauty[j] Your task is to determine the maximum combined beauty value of any \\"visually pleasing\\" pair of flowers in the garden. If there is no such pair, return -1. -----Input----- The first line contains integer n (2 ≤ n ≤ 100 000) — the number of flowers in the garden. The following n lines each contain two integers height[i] and beauty[i] (1 ≤ height[i], beauty[i] ≤ 100 000) representing the height and beauty of the i-th flower respectively. -----Output----- Print a single integer — the maximum combined beauty value of any \\"visually pleasing\\" pair of flowers, or -1 if no such pair exists. -----Examples----- Input 5 1 2 2 4 3 1 4 3 5 5 Output 9 Input 3 2 3 2 1 2 4 Output -1","solution":"def max_combined_beauty(n, flowers): max_beauty = -1 max_beauty_so_far = [0] * n max_val = 0 for i in range(n): max_val = max(max_val, flowers[i][1]) max_beauty_so_far[i] = max_val for j in range(1, n): for i in range(j): if flowers[i][0] < flowers[j][0] and flowers[i][1] < flowers[j][1]: max_beauty = max(max_beauty, flowers[i][1] + flowers[j][1]) return max_beauty"},{"question":"Write a method that takes an array of strings and groups the anagrams together. Anagrams are strings made up of the same characters with the same frequencies. Return the list of groups of anagrams. The order of the output does not matter, but each group should be a separate list. Example 1: Input: strings = [\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"] Output: [ [\\"eat\\", \\"tea\\", \\"ate\\"], [\\"tan\\", \\"nat\\"], [\\"bat\\"] ] Example 2: Input: strings = [\\"\\"] Output: [ [\\"\\"] ] Example 3: Input: strings = [\\"a\\"] Output: [ [\\"a\\"] ] Note: All inputs are in lowercase. The length of each string will be in the range [1, 100]. The number of strings in the array will be in the range [1, 10000].","solution":"from collections import defaultdict def group_anagrams(strings): Groups anagrams together. Args: strings (list of str): An array of strings. Returns: list of list of str: A list of groups of anagrams. anagrams = defaultdict(list) for s in strings: sorted_str = \'\'.join(sorted(s)) anagrams[sorted_str].append(s) return list(anagrams.values())"},{"question":"You are given an array of integers representing the popularity scores of different books. You need to organize these books for a display by moving each book one place to the right until the highest scored book reaches the last position. After moving each book, you discard the lowest scored book among those on the display. Calculate the total number of moves required to send the highest scored book to the last position. Input: The first line contains an integer t, the number of test cases. Each test case consists of two lines: the first line contains an integer n (the number of books), followed by a line containing n integers representing the popularity scores of the books. Output: For each test case, output the total number of moves required. Constraints: 1 ≤ t ≤ 100, 1 ≤ n ≤ 10^5, 1 ≤ scores[i] ≤ 10^9 SAMPLE INPUT 2 5 1 3 2 5 4 4 10 20 30 40 SAMPLE OUTPUT 4 3 Explanation Test Case 1: Initial state: [1, 3, 2, 5, 4] Move 1: [3, 2, 5, 4, _] (1 is discarded) Move 2: [2, 5, 4, _] (3 is discarded) Move 3: [5, 4, _] (2 is discarded) Move 4: [5, _] (4 is discarded) The highest score 5 is now the last book. Test Case 2: Initial state: [10, 20, 30, 40] Move 1: [20, 30, 40, _] (10 is discarded) Move 2: [30, 40, _] (20 is discarded) Move 3: [40, _] (30 is discarded) The highest score 40 is now the last book.","solution":"def count_moves_to_highest_score_end(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] scores = test_cases[i][1] max_score = max(scores) max_index = scores.index(max_score) results.append(max_index) # The number of moves needed return results"},{"question":"You are given an array consisting of `N` integers. The array is initially sorted in ascending order. You can perform two types of operations on this array: - **Type 1**: Insert a new integer into the array. - **Type 2**: Delete an integer from the array. If the integer is not present in the array, this operation has no effect. - **Type 3**: Given an integer `K`, find the K-th smallest element in the array. If the size of the array is less than K, return -1. Write a program to handle a sequence of queries involving the above operations. # Input Format The first line contains an integer `T` representing the number of test cases. For each test case: - The first line contains an integer `N` representing the initial number of elements in the array. - The second line contains `N` space-separated integers `A1, A2, ..., AN` representing the initial array elements in ascending order. - The third line contains an integer `Q` representing the number of queries. - The next `Q` lines contain queries, each in one of the following formats: - `1 X`: Insert the integer `X` into the array. - `2 X`: Delete the integer `X` from the array. - `3 K`: Find the `K`-th smallest element in the array. # Output Format For each query of type `3`, output the K-th smallest element. If the size of the array is less than `K`, output `-1` instead. All results for type `3` queries should be in a new line. # Constraints - 1 ≤ T ≤ 5 - 1 ≤ N ≤ 10^5 - 1 ≤ Q ≤ 10^5 - -10^9 ≤ Ai, X ≤ 10^9 - 1 ≤ K ≤ 10^5 # Sample Input ``` 1 5 1 2 3 4 5 6 1 6 3 3 2 4 3 4 2 6 3 5 ``` # Sample Output ``` 3 5 -1 ``` # Explanation For the given test case: - Initially, the array is [1, 2, 3, 4, 5]. - After inserting `6`, the array becomes [1, 2, 3, 4, 5, 6]. - Finding the 3rd smallest element yields `3`. - Deleting `4` transforms the array to [1, 2, 3, 5, 6]. - Finding the 4th smallest element yields `5`. - Deleting `6` transforms the array to [1, 2, 3, 5]. - Finding the 5th smallest element yields `-1` since the current array size is less than `5`.","solution":"def process_queries(T, cases): Processes each test case and queries to perform operations on the sorted array. outputs = [] for case in cases: N, arr, Q, queries = case arr = list(arr) for query in queries: op_type, param = query if op_type == 1: # Insert X into the array insert_element(arr, param) elif op_type == 2: # Delete X from the array delete_element(arr, param) elif op_type == 3: # Find K-th smallest element kth_smallest = find_kth_smallest(arr, param) outputs.append(kth_smallest) return outputs def insert_element(arr, x): Inserts element x into the sorted array arr. from bisect import insort insort(arr, x) def delete_element(arr, x): Deletes element x from the sorted array arr if present. import bisect pos = bisect.bisect_left(arr, x) if pos < len(arr) and arr[pos] == x: arr.pop(pos) def find_kth_smallest(arr, k): Finds the k-th smallest element in the sorted array arr. if len(arr) < k: return -1 return arr[k - 1]"},{"question":"You are given a string S consisting of lowercase English letters and a single wildcard character \'*\'. You need to generate all possible valid words by replacing the wildcard character with any lowercase letter from \'a\' to \'z\'. Each generated word should be distinct and sorted lexicographically in ascending order. Write a program to accomplish this task. # Input First line contains an integer T, the number of test cases. Next T lines contain a string S on each line. # Output For each test case, output all possible valid words generated from the given string S, each on a new line, sorted lexicographically in ascending order. # Constraints 1 ≤ T ≤ 10 2 ≤ |S| ≤ 100 S contains exactly one \'*\' character. # Example Input 2 a*c *b Output aac abc acc adc aec afc agc ahc aic ajc akc alc amc anc aoc apc aqc arc asc atc auc avc awc axc ayc azc a b c d e f g h i j k l m n o p q r s t u v w x y z","solution":"def generate_words(input_cases): For each string in input_cases, generate all possible words by replacing the wildcard character \'*\' with any lowercase letter from \'a\' to \'z\'. Args: input_cases (list): List of input strings containing the wildcard character. Returns: result (list): List of lists, each containing sorted words for the corresponding input string. result = [] for s in input_cases: words = [] for ch in \'abcdefghijklmnopqrstuvwxyz\': words.append(s.replace(\'*\', ch)) words.sort() result.append(words) return result"},{"question":"Developer A meets Developer B in a conference. They start discussing sequences and subsequences of integers. Developer B challenges Developer A with the following task: You are given an array (A) of (N) non-negative integers. A subsequence (S) of (A) is considered *valid* if the product of the elements in (S) is divisible by a given integer (K). The goal is to determine the length of the shortest *valid* subsequence present in the array (A). If no such subsequence exists, return -1. Note: A subsequence of an array is obtained by deleting some elements (possibly none) of the array without changing the order of the remaining elements. ------ Input Format ------ - The first line of input will contain a single integer (T), denoting the number of test cases. - Each test case consists of multiple lines of input. - The first line of each test case contains two space-separated integers (N) and (K) — the number of elements in the array and the divisor respectively. - The second line contains (N) space-separated integers, the elements of the array (A). ------ Output Format ------ For each test case, output on a new line, the length of the shortest *valid* subsequence of array (A). If no valid subsequence exists, output -1. ------ Constraints ------ [ 1 leq T leq 500 ] [ 1 leq N leq 10^4 ] [ 1 leq K leq 10^6 ] [ 0 leq A_i leq 10^6 ] - Sum of (N) over all test cases does not exceed (10^5). ------ Sample Input 1 ------ 2 4 3 1 3 2 6 5 7 2 5 5 11 14 ------ Sample Output 1 ------ 1 2 ------ Explanation 1 ------ Test case 1: For the given array ([1, 3, 2, 6]) and (K=3), the shortest valid subsequence is ([3]). Its product (3) is divisible by (3) and its length is 1. Test case 2: For the given array ([2, 5, 5, 11, 14]) and (K=7), the shortest valid subsequence is ([14]). Its product (14) is divisible by (7) and its length is 1. Another valid subsequence is ([7]), but, since (7) is not present, the next shortest is ([2, 7]) if (7) were present. Hence, the shortest valid subsequence length is 2.","solution":"def shortest_valid_subsequence_length(N, K, A): # Check for single elements that are divisible by K for num in A: if num % K == 0: return 1 # Check for pairs of elements whose product is divisible by K for i in range(N): for j in range(i + 1, N): if (A[i] * A[j]) % K == 0: return 2 # If no valid subsequence found return -1 def process_test_cases(T, test_cases): results = [] for case in test_cases: N, K, A = case result = shortest_valid_subsequence_length(N, K, A) results.append(result) return results"},{"question":"Given a binary tree, your task is to determine if it is a balanced binary tree. A balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differs by more than 1. Write a function that checks whether a binary tree is balanced or not. Your function should take the root of the binary tree as input and return \\"True\\" if it is balanced, and \\"False\\" otherwise. # Input - The input consists of a single integer `n` (1 ≤ n ≤ 10^5), the number of nodes in the binary tree, followed by `n` lines describing the nodes of the tree. - Each line contains three integers `value`, `left`, and `right`, where `value` is the value of the node, `left` is the index of the left child (or `-1` if there is no left child), and `right` is the index of the right child (or `-1` if there is no right child). - The root of the tree is always the first node described in the input. # Output - Print \\"True\\" if the tree is balanced, otherwise print \\"False\\". # Example Input ``` 7 1 2 3 2 4 5 3 -1 6 4 -1 -1 5 -1 -1 6 7 -1 7 -1 -1 ``` Output ``` False ``` Input ``` 3 1 2 3 2 -1 -1 3 -1 -1 ``` Output ``` True ``` # Note In the first example, the tree is not balanced because the left subtree of the root (node 1) has a height of 3, while the right subtree has a height of 1, resulting in a difference of 2. In the second example, the tree is balanced because the left and right subtrees of each node have a height difference of no greater than 1.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def build_tree(nodes): tree_nodes = {} tree_nodes[1] = TreeNode(nodes[1][0]) for i in range(1, len(nodes)): value, left, right = nodes[i] if left != -1: if left not in tree_nodes: tree_nodes[left] = TreeNode(nodes[left][0]) tree_nodes[i].left = tree_nodes[left] if right != -1: if right not in tree_nodes: tree_nodes[right] = TreeNode(nodes[right][0]) tree_nodes[i].right = tree_nodes[right] return tree_nodes[1] def is_balanced_tree(root): def check_balance(node): if not node: return 0, True left_height, left_balanced = check_balance(node.left) right_height, right_balanced = check_balance(node.right) balanced = left_balanced and right_balanced and abs(left_height - right_height) <= 1 return max(left_height, right_height) + 1, balanced _, balanced = check_balance(root) return balanced def is_balanced(n, node_list): nodes = [None] + node_list # Adjust index to match problem statement. root = build_tree(nodes) return is_balanced_tree(root)"},{"question":"You have a task of managing a rod cutting factory. The factory produces rods of various lengths, and you need to cut these rods according to the orders you receive. Each order specifies a target length for the rod, and you can cut a rod down to multiple smaller rods to fulfill the order. However, the cost of cutting a rod is based on the number of cuts you make. Each cut costs 1. Your goal is to minimize the total cost of cuts needed to fulfill an order. You are given a list of n integers representing the initial lengths of the rods available in the factory. You are also provided an integer m which represents the target rod length. Write a function that determines the minimum cost of cuts required to produce a rod (or multiple rods) of length m, or determines that it is not possible to produce such a rod. If it\'s not possible, return -1. Input The first line contains an integer n (1 ≤ n ≤ 50), the number of initial rods. The second line contains n integers separated by spaces representing the lengths of the rods (1 ≤ length ≤ 1000). The third line contains an integer m (1 ≤ m ≤ 1000), the target rod length. Output Output a single integer representing the minimum number of cuts required to achieve a rod of length m. If it is not possible, output -1. Examples Input 4 5 9 6 7 3 Output 1 Input 3 4 6 8 7 Output -1 Input 5 8 5 3 10 7 5 Output 0 Explanation of Examples In the first example, you can cut the rod of length 9 into two parts of lengths 3 and 6 with one cut. In the second example, it is not possible to produce a rod of length 7 from the given rods. In the third example, there is already a rod of length 5 available, so no cuts are needed.","solution":"def min_cost_of_cuts(n, rods, m): Determines the minimum number of cuts required to produce a rod (or multiple rods) of length m. If it is not possible, returns -1. :param n: int, number of initial rods :param rods: list of ints, lengths of the rods :param m: int, target rod length :return: int, minimum number of cuts required or -1 if not possible if m in rods: return 0 min_cuts = float(\'inf\') for rod in rods: if rod > m and rod % m == 0: min_cuts = min(min_cuts, rod // m - 1) return min_cuts if min_cuts != float(\'inf\') else -1"},{"question":"Write a function that takes a string containing an arithmetic expression, including numbers and the operators + and -, and returns the result of evaluating the expression. Your function should process the expression from left to right, ignoring the operator precedence. For example: ```python evaluate(\\"3+2-5\\") # should return 0 evaluate(\\"10-4+7\\") # should return 13 ``` **Note:** The input string will always be a valid arithmetic expression containing only non-negative integers and the + and - operators. No spaces will be present in the string.","solution":"def evaluate(expression): Evaluates a string containing an arithmetic expression with numbers and +, - operators. Processing the expression from left to right, ignoring operator precedence. Parameters: expression (str): The arithmetic expression as a string. Returns: int: The result of evaluating the expression. result = 0 current_number = 0 current_operator = \'+\' # Start with a default \'+\' to handle the first number for char in expression: if char.isdigit(): current_number = current_number * 10 + int(char) else: if current_operator == \'+\': result += current_number elif current_operator == \'-\': result -= current_number current_operator = char current_number = 0 # Apply the last pending operation if current_operator == \'+\': result += current_number elif current_operator == \'-\': result -= current_number return result"},{"question":"Given an integer M, determine the smallest number of perfect squares which sum up to M. A perfect square is an integer that is the square of another integer. For example, 1, 4, 9, and 16 are perfect squares (1 = 1*1, 4 = 2*2, 9 = 3*3, 16 = 4*4, ...). Input - The first line contains a single integer T (the number of test cases). - The following T lines each contain a single integer M. Constraints 1 ≤ T ≤ 100 1 ≤ M ≤ 10^4 Output For each test case, output the smallest number of perfect squares which sum up to M. SAMPLE INPUT 3 12 13 4 SAMPLE OUTPUT 3 2 1","solution":"import sys import math def min_numbers_of_perfect_squares(M): dp = [float(\'inf\')] * (M + 1) dp[0] = 0 # Base case for i in range(1, M + 1): j = 1 while j * j <= i: dp[i] = min(dp[i], dp[i - j * j] + 1) j += 1 return dp[M] def solve(T, test_cases): results = [] for case in test_cases: results.append(min_numbers_of_perfect_squares(case)) return results"},{"question":"Lena is a competitive runner who participates in multiple events throughout the year. She keeps track of her performance by recording her completion time for each event. Lena wants to analyze her performance to see how her running times vary across different events. Your task is to write a program that takes Lena\'s completion times and calculates the difference between her fastest and slowest times. Input - The first line contains a single integer `n`, the number of events Lena has participated in (1 ≤ n ≤ 100). - The next `n` lines contain Lena\'s completion times for each event in seconds (1 ≤ time ≤ 10,000). Output - Output a single integer which is the difference between her slowest and fastest completion times. Example # Input ``` 5 356 420 300 500 454 ``` # Output ``` 200 ``` # Input ``` 3 123 95 101 ``` # Output ``` 28 ``` # Input ``` 1 377 ``` # Output ``` 0 ``` # Explanation - In the first example, Lena\'s fastest time is 300 seconds and her slowest is 500 seconds, making the difference 200. - In the second example, Lena\'s fastest time is 95 seconds and her slowest is 123 seconds, making the difference 28. - In the third example, since there\'s only one event, the difference is 0.","solution":"def performance_diff(times): Returns the difference between the slowest and fastest completion times. if not times: return 0 fastest_time = min(times) slowest_time = max(times) return slowest_time - fastest_time"},{"question":"# Description You will be creating a Sudoku solver. Sudoku is a popular number puzzle that you can learn more about [here](https://en.wikipedia.org/wiki/Sudoku). For this question, you will be given a partially completed 9x9 Sudoku grid and your task is to complete the grid such that all rows, all columns, and all 3x3 subgrids contain the numbers 1 through 9 exactly once. # Instructions Complete the function `solve_sudoku(grid)`: ```python def solve_sudoku(grid): pass ``` The `grid` parameter is a 2D list that represents the 9x9 Sudoku grid. Empty cells in the grid are represented by 0. The function should return `True` if the Sudoku puzzle is solved successfully, and modify the input `grid` in-place with the filled values. Example Input: ``` [[5, 3, 0, 0, 7, 0, 0, 0, 0], [6, 0, 0, 1, 9, 5, 0, 0, 0], [0, 9, 8, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 6, 0, 0, 0, 3], [4, 0, 0, 8, 0, 3, 0, 0, 1], [7, 0, 0, 0, 2, 0, 0, 0, 6], [0, 6, 0, 0, 0, 0, 2, 8, 0], [0, 0, 0, 4, 1, 9, 0, 0, 5], [0, 0, 0, 0, 8, 0, 0, 7, 9]] ``` Output: ``` [[5, 3, 4, 6, 7, 8, 9, 1, 2], [6, 7, 2, 1, 9, 5, 3, 4, 8], [1, 9, 8, 3, 4, 2, 5, 6, 7], [8, 5, 9, 7, 6, 1, 4, 2, 3], [4, 2, 6, 8, 5, 3, 7, 9, 1], [7, 1, 3, 9, 2, 4, 8, 5, 6], [9, 6, 1, 5, 3, 7, 2, 8, 4], [2, 8, 7, 4, 1, 9, 6, 3, 5], [3, 4, 5, 2, 8, 6, 1, 7, 9]] ``` Good luck solving the puzzle! If you have any questions, don\'t hesitate to ask.","solution":"def is_valid(grid, row, col, num): Check whether it will be legal to assign num to the given row, col. # Check if the number is not repeated in the current row and column for i in range(9): if grid[row][i] == num or grid[i][col] == num: return False # Check if the number is not repeated in the 3x3 subgrid start_row, start_col = 3 * (row // 3), 3 * (col // 3) for i in range(3): for j in range(3): if grid[start_row + i][start_col + j] == num: return False return True def solve_sudoku(grid): Solve the Sudoku puzzle by filling the empty cells. Modifies the input grid in-place to represent the solution. Returns True if the Sudoku puzzle is solved successfully, else returns False. # Find an empty cell empty_cell = None for i in range(9): for j in range(9): if grid[i][j] == 0: empty_cell = (i, j) break if empty_cell: break # If there is no empty cell, puzzle is solved if not empty_cell: return True row, col = empty_cell # Try placing numbers 1 to 9 in the empty cell for num in range(1, 10): if is_valid(grid, row, col, num): grid[row][col] = num if solve_sudoku(grid): return True grid[row][col] = 0 # backtrack return False"},{"question":"Given an array of n integers and an integer target. Determine whether there is a pair of distinct elements in the array that sums up to the target value. If such a pair exists, return 1, otherwise return 0. Example 1: Input: arr = [2, 7, 11, 15], target = 9 Output: 1 Explanation: There are elements 2 and 7 in the array which sum up to 9. Example 2: Input: arr = [1, 2, 3, 4], target = 8 Output: 0 Explanation: There are no elements in the array which sum up to 8. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findPair() which takes the array arr and the integer target as input parameters and returns 1 if there is a pair of elements that sum up to the target value. Otherwise, return 0. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 ≤ n ≤ 10^6 -10^6 ≤ arr[i] ≤ 10^6 -10^6 ≤ target ≤ 10^6","solution":"def find_pair(arr, target): Determines whether there is a pair of distinct elements in the array that sums up to the target value. Returns 1 if such a pair exists, otherwise returns 0. :param arr: List of integers :param target: An integer target value :return: 1 if there is a pair that sums up to the target value, otherwise 0 seen = set() for num in arr: complement = target - num if complement in seen: return 1 seen.add(num) return 0"},{"question":"You are given a list of integers representing the temperatures recorded over a number of days. A \\"heatwave\\" is defined as a consecutive subsequence of days where the temperature was above a given threshold. Your task is to determine the length of the longest heatwave in the given list. Write a function `longest_heatwave(temperatures, threshold)` that takes in two parameters: - `temperatures`: a list of integers representing the daily temperatures. - `threshold`: an integer representing the temperature threshold for a heatwave. The function should return an integer representing the length of the longest heatwave. Example 1: Input: temperatures = [30, 35, 27, 32, 40, 41, 42, 25, 26, 37, 38] threshold = 30 Output: 4 Explanation: The longest heatwave is [32, 40, 41, 42], with a length of 4. Example 2: Input: temperatures = [25, 28, 27, 22, 21, 19, 30, 31] threshold = 28 Output: 2 Explanation: The longest heatwave is [30, 31], with a length of 2. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `longest_heatwave()` which takes in the list of temperatures and the threshold, and returns the length of the longest heatwave. Expected Time Complexity: O(n) Expected Space Complexity: O(1) Constraints: 1 <= len(temperatures) <= 10^5 -100 <= temperatures[i] <= 100 -100 <= threshold <= 100","solution":"def longest_heatwave(temperatures, threshold): Returns the length of the longest heatwave, which is defined as a consecutive subsequence of temperatures above a given threshold. Parameters: temperatures - a list of integers representing daily temperatures. threshold - an integer representing the temperature threshold for a heatwave. Returns: Integer representing the length of the longest heatwave. longest = 0 current_length = 0 for temp in temperatures: if temp > threshold: current_length += 1 if current_length > longest: longest = current_length else: current_length = 0 return longest"},{"question":"Implement a function to find the smallest positive integer missing from an unsorted array of integers. The function should efficiently find this missing number with minimal space usage. Example 1: Input: arr = [3, 4, -1, 1] Output: 2 Explanation: The smallest positive integer missing from the array is 2. Example 2: Input: arr = [1, 2, 0] Output: 3 Explanation: The smallest positive integer missing from the array is 3. Your Task: You don\'t need to read input or print anything. Complete the function `findMissingPositive()` which takes the list of integers `arr` as input and returns the smallest positive integer missing from the array. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: - The array can have a length n where 1 <= n <= 10^6 - The array elements can be any integer between -10^6 and 10^6","solution":"def findMissingPositive(arr): n = len(arr) # Move non-positive numbers to the end j = 0 for i in range(n): if arr[i] <= 0: arr[i], arr[j] = arr[j], arr[i] j += 1 # Consider only the positive part of the array arr = arr[j:] n = len(arr) # Mark indices corresponding to existing numbers for i in range(n): val = abs(arr[i]) if 1 <= val <= n: arr[val - 1] = -abs(arr[val - 1]) # Find the first index that is positive for i in range(n): if arr[i] > 0: return i + 1 return n + 1"},{"question":"A unique password is a string consisting of lowercase Latin letters, digits, and special characters (\'!\', \'@\', \'#\', \'\', \'%\', \'^\', \'&\', \'*\', \'(\', \')\', \'-\', \'+\'). Bob wants to create a unique password of exactly n characters that satisfy the following conditions: 1. The password must contain at least one digit. 2. The password must contain at least one lowercase Latin letter. 3. The password must contain at least one special character. 4. The password must not have any consecutive characters the same. Help Bob determine if it\'s possible to create such a password of length n. Input The first line contains a single integer n (1 ≤ n ≤ 100). Output Print \\"YES\\" if it is possible to create such a password, else print \\"NO\\". Examples Input 5 Output YES Input 1 Output NO Input 3 Output YES Input 2 Output NO Note Sample 1. Bob can create a password like \\"a1!b2\\". Sample 2. It is impossible to create a password of length 1 that meets all the conditions. Sample 3. Bob can create a password like \\"a1\\". Sample 4. It is impossible to create a password of length 2 that meets all the conditions.","solution":"def is_possible_password(n): if n >= 3: return \\"YES\\" else: return \\"NO\\""},{"question":"Create a function `find_palindromic_primes()` that will generate a list of palindromic prime numbers up to a given number `n`. A palindromic number is a number that remains the same when its digits are reversed. A prime number is a number greater than 1 that has no positive divisors other than 1 and itself. The function should accept one argument: 1. `n` - an integer representing the upper limit of the range (inclusive) to check for palindromic prime numbers. **Constraints:** - The function should return a list of palindromic prime numbers in ascending order. - If there are no palindromic primes in the range, the function should return an empty list. **Examples:** ```python find_palindromic_primes(100) -> [2, 3, 5, 7, 11, 101] find_palindromic_primes(10) -> [2, 3, 5, 7] find_palindromic_primes(1) -> [] find_palindromic_primes(1000) -> [2, 3, 5, 7, 11, 101, 131, 151, 181, 191, 313, 353, 373, 383, 727, 757, 787, 797, 919, 929] ``` **Instructions:** 1. First, identify all prime numbers up to `n`. 2. Check each of these prime numbers to determine if they are palindromic. 3. Return the list of palindromic primes. **Note:** - Consider edge cases such as when `n` is less than 2.","solution":"def find_palindromic_primes(n): Returns a list of palindromic prime numbers up to a given number n (inclusive). def is_prime(num): if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def is_palindromic(num): return str(num) == str(num)[::-1] palindromic_primes = [] for num in range(2, n + 1): if is_prime(num) and is_palindromic(num): palindromic_primes.append(num) return palindromic_primes"},{"question":"You are given a string s consisting of n characters. Your task is to make this string palindrome by adding as few characters as possible. The added characters can be placed at any position in the string. A palindrome is a string that reads the same backward as forward. Examples of palindromes: \\"madam\\", \\"racecar\\", \\"a\\", \\"abba\\", \\"abcba\\". Examples of non-palindromes: \\"abc\\", \\"hello\\", \\"abac\\". -----Input----- The first line of the input contains one integer n (1 le n le 5000) — the length of the string s. The second line of the input contains a string s consisting of n lowercase English letters. -----Output----- Print one integer — the minimum number of characters you have to add to make s a palindrome. -----Examples----- Input 5 aabba Output 1 Input 4 abcd Output 3 Input 6 abccba Output 0","solution":"def min_additions_to_make_palindrome(s: str) -> int: n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]) longest_palindromic_subseq = dp[0][n - 1] return n - longest_palindromic_subseq"},{"question":"In an artificial forest, you are given a grid of size NxM. Each cell in this grid can either be land, represented by \'1\', or water, represented by \'0\'. An island is defined as a group of connected lands horizontally or vertically. Write a function that returns the number of islands in the grid. The grid is represented as a list of lists, with each element being either \'1\' or \'0\'. Example: Input: ``` grid = [ [\\"1\\", \\"1\\", \\"0\\", \\"0\\", \\"0\\"], [\\"1\\", \\"1\\", \\"0\\", \\"0\\", \\"0\\"], [\\"0\\", \\"0\\", \\"1\\", \\"0\\", \\"0\\"], [\\"0\\", \\"0\\", \\"0\\", \\"1\\", \\"1\\"] ] ``` Output: 3 Explanation: In the given grid, there are three islands as follows: 1. Two 1\'s connected horizontally and vertically at the top left corner. 2. A single 1 in the middle. 3. Two 1\'s connected horizontally at the bottom right corner. Constraints: 1 <= N, M <= 300 Function Signature: ```python def num_islands(grid: List[List[str]]) -> int: pass ``` Ensure your solution is efficient and handles the upper limits of the input size within reasonable execution time.","solution":"def num_islands(grid): Returns the number of islands in the grid. if not grid: return 0 def dfs(grid, i, j): if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == \'0\': return grid[i][j] = \'0\' # Mark as visited dfs(grid, i + 1, j) dfs(grid, i - 1, j) dfs(grid, i, j + 1) dfs(grid, i, j - 1) count = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == \'1\': dfs(grid, i, j) count += 1 return count"},{"question":"Lana loves playing with strings and recently stumbled upon an interesting problem involving palindromes. A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward or forward (ignoring spaces, punctuation, and capitalization). Lana wants to find the minimum number of characters she needs to add to the end of a given string to make it a palindrome. Your task is to write a program that will help Lana determine this minimum number. -----Input----- The input consists of a single line containing a string s (1 ≤ |s| ≤ 1000) consisting of lowercase English letters. -----Output----- Print a single integer — the minimum number of characters needed to be added to the end of the string to make it a palindrome. -----Examples----- Input abcd Output 3 Input aacecaaa Output 1 Input race Output 3 -----Note----- In the first example, by adding \'dcb\', the string becomes \'abcdcba\', which is a palindrome. In the second example, by adding \'a\', the string becomes \'aacecaaa\', which is already a palindrome. In the third example, by adding \'ecer\', the string becomes \'racecar\', which is a palindrome.","solution":"def min_additions_to_make_palindrome(s): Returns the minimum number of characters needed to be added to the end of the string to make it a palindrome. n = len(s) # The idea is to find the longest suffix of `s` which is also a prefix of its reverse. # Then the characters that are not part of this suffix need to be appended in reverse order. rev_s = s[::-1] # Combine string and check for longest matching suffix that is also a prefix combined = s + \'#\' + rev_s lps = [0] * len(combined) j = 0 # LPS array (longest prefix suffix) or the failure function used in KMP algorithm for i in range(1, len(combined)): while j > 0 and combined[i] != combined[j]: j = lps[j-1] if combined[i] == combined[j]: j += 1 lps[i] = j return n - lps[-1]"},{"question":"Nadia has an array of n positive integers. She\'s interested in finding the longest contiguous subarray that has an equal number of odd and even elements. Your task is to write a program that determines the length of this subarray. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The next line contains n integers a_{i} (1 ≤ a_{i} ≤ 10^6) — the values of the array elements. -----Output----- In a single line print a single integer — the length of the longest contiguous subarray with an equal number of odd and even elements. -----Examples----- Input 6 1 2 3 4 5 6 Output 6 Input 5 2 4 6 1 3 Output 4 Input 5 1 3 5 7 9 Output 0","solution":"def longest_subarray_with_equal_odd_even(n, array): count = 0 max_length = 0 index_map = {0: -1} # To handle case when subarray starts from index 0 for i in range(n): if array[i] % 2 == 0: count += 1 else: count -= 1 if count in index_map: max_length = max(max_length, i - index_map[count]) else: index_map[count] = i return max_length # Example Usage: # n = 6 # array = [1, 2, 3, 4, 5, 6] # print(longest_subarray_with_equal_odd_even(n, array)) # Output: 6"},{"question":"Write a method that takes an input string representing a non-negative integer, and returns the sum of its digits excepting the number \'7\'. If the resulting sum is greater than 20, it should return `20`. If the input string contains no digits other than \'7\', it should return `0`. **Examples** ``` \\"12345\\" --> 15 # 1 + 2 + 3 + 4 + 5 = 15 \\"777\\" --> 0 # all digits are 7, so the sum is 0 \\"1987\\" --> 18 # 1 + 9 + 8 = 18 \\"12377745\\" --> 15 # 1 + 2 + 3 + 4 + 5 = 15 \\"489672\\" --> 20 # 4 + 8 + 9 + 6 + 2 >= 20, so return 20 ```","solution":"def sum_of_digits_except_7(input_str): Returns the sum of digits in the input string except the digit \'7\'. If the sum is greater than 20, returns 20. If all digits are \'7\', returns 0. total_sum = 0 for char in input_str: if char.isdigit() and char != \'7\': total_sum += int(char) if total_sum > 20: return 20 return total_sum"},{"question":"You are an administrator of a school and you need to allocate students to different classes based on their preferences. There are m classes, each class can accommodate up to c students. The school has n students, and each student has ranked a subset of these m classes in order of preference. Your task is to write a program that reads the students\' preferences and allocates them to the classes. Each student must be assigned to exactly one class, and a class cannot exceed its capacity. If it is not possible to allocate all students to their preferred classes, the program should return \\"Impossible\\". Your allocation algorithm should prioritize satisfying the preferences of the students as much as possible. If multiple allocations satisfy students\' preferences equally, any of them will be accepted. Input The first line contains three integers n (1 ≤ n ≤ 1000) — the number of students, m (1 ≤ m ≤ 100) — the number of classes, and c (1 ≤ c ≤ 100) — the maximum number of students in each class. The next n lines contain students\' preferences. Each line consists of an integer k (1≤ k ≤ m), followed by k distinct integers representing the student’s chosen classes in decreasing order of preference. Output If it is possible to allocate all students to their preferred classes within the given constraints, output \\"Possible\\" followed by the allocation of students. Each student should be on a new line in the same order as given in the input, listing the class to which they are assigned (1-based index). If it is not possible to allocate all students, output \\"Impossible\\". Example Input 6 3 2 3 1 2 3 2 2 3 3 1 3 2 1 3 3 2 1 3 2 3 1 Output Possible 1 2 1 3 2 1 Explanation In this example, we have 6 students and we are trying to allocate them to 3 classes with a maximum capacity of 2 students per class. The students\' preferences are taken into account, and the output shows one possible allocation that meets the constraints. If there\'s no valid allocation possible, the output would be \\"Impossible\\".","solution":"def allocate_students(n, m, c, preferences): # Initialization of class capacities and student allocations capacities = [0] * m allocation = [-1] * n # Allocation process for i, pref in enumerate(preferences): for class_choice in pref[1:]: if capacities[class_choice - 1] < c: capacities[class_choice - 1] += 1 allocation[i] = class_choice break # Check if all students have been allocated if -1 in allocation: return \\"Impossible\\" else: result = [\\"Possible\\"] result.extend(map(str, allocation)) return \\"n\\".join(result)"},{"question":"You are given a matrix of size n x m filled with non-negative integers. The task is to check whether there is a path from the top-left corner (0,0) to the bottom-right corner (n-1,m-1) such that the sum of the elements along the path is divided by k. The path can only be formed by moving right or down from a position. Input The first line contains three integers, n, m, and k (1 ≤ n, m ≤ 100, 1 ≤ k ≤ 10^3) — the number of rows, the number of columns in the matrix, and the divisor respectively. Each of the next n lines contains m integers (0 ≤ matrix_ij ≤ 100), which represent the elements of the matrix. Output Print \\"YES\\" if such a path exists, and \\"NO\\" otherwise. Examples Input 3 3 3 1 2 3 4 5 6 7 8 9 Output YES Input 2 2 10 1 2 3 4 Output NO","solution":"def is_path_divisible(matrix, n, m, k): Check if there\'s a path from (0, 0) to (n-1, m-1) with the sum divisible by k memo = {} def dfs(x, y, current_sum): if x == n - 1 and y == m - 1: return (current_sum + matrix[x][y]) % k == 0 if (x, y, current_sum) in memo: return memo[(x, y, current_sum)] if x >= n or y >= m: return False right = dfs(x, y + 1, current_sum + matrix[x][y]) if y + 1 < m else False down = dfs(x + 1, y, current_sum + matrix[x][y]) if x + 1 < n else False memo[(x, y, current_sum)] = right or down return memo[(x, y, current_sum)] return \\"YES\\" if dfs(0, 0, 0) else \\"NO\\" # Example usage: n, m, k = 3, 3, 3 matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] print(is_path_divisible(matrix, n, m, k)) # Output: YES"},{"question":"In a far futuristic game show called \\"RoboRacing\\", AI-controlled robots from across the galaxy participate in highly unpredictable races. Each robot racer has a distinct energy level, and the race organizers want to form teams where the energy gap between the highest and lowest energy robot in a team is minimized to ensure fair competition. Your task is to divide the robots into as many teams as necessary so that the maximum energy gap within any team is minimized. Input The first line of input will contain an integer n (1 ≤ n ≤ 100,000) — the total number of robots. The second line contains n integers e_i (1 ≤ e_i ≤ 10^9) — the energy levels of the robots. Output Print a single integer — the minimum possible energy gap in any team. Example Input 6 3 6 9 1 4 8 Output 2 Explanation Divide the robots into teams as follows: (1, 3, 4), (6, 8, 9). The energy gap within the teams are 3 and 3 respectively. The minimized maximum energy gap is 3. Input 4 10 20 30 40 Output 30 Explanation Divide the robots into teams as follows: (10, 20), (30, 40). The energy gap within the teams are 10 and 10 respectively. The minimized maximum energy gap is 10.","solution":"def minimize_energy_gap(n, energies): Function to minimize the maximum energy gap within a team. Parameters: - n: int, number of robots. - energies: list of int, energy levels of the robots. Returns: - int, the minimized maximum energy gap. if n == 1: return 0 energies.sort() min_gap = float(\'inf\') for i in range(1, n): min_gap = min(min_gap, energies[i] - energies[i-1]) return min_gap"},{"question":"Given a string that consists of lowercase English letters, you can remove any letter in the string at most once. Find the length of the longest substring that contains at most two distinct characters remaining after performing the above operation. Note: The length of the given string will not exceed 10^4. Example 1: Input: s = \\"eceba\\" Output: 3 Explanation: Remove the letter \'b\', and you have \\"ece\\" which is the longest substring with at most two distinct remaining characters. Example 2: Input: s = \\"ccaabbb\\" Output: 5 Explanation: Remove the letter \'a\', and you have \\"ccbbb\\" which is the longest substring with at most two distinct remaining characters.","solution":"def longest_substring_two_distinct_chars(s): Returns the length of the longest substring that contains at most two distinct characters after removing one letter from the string. if not s: return 0 def longest_substring_with_two_distinct_chars(st): left, max_len = 0, 0 char_map = {} for right in range(len(st)): if st[right] in char_map: char_map[st[right]] += 1 else: char_map[st[right]] = 1 while len(char_map) > 2: char_map[st[left]] -= 1 if char_map[st[left]] == 0: del char_map[st[left]] left += 1 max_len = max(max_len, right - left + 1) return max_len max_length = 0 for i in range(len(s)): substring = s[:i] + s[i+1:] max_length = max(max_length, longest_substring_with_two_distinct_chars(substring)) return max_length"},{"question":"You have been recruited by a new video game company to work on their flagship game. One of the key elements in the game is the player\'s inventory management. Help the game developers by coding a function to handle a player\'s inventory. Details of the inventory management: - The inventory should be able to track up to a maximum of `N` items. - Each item has a name (a string) and a quantity (an integer). - Provide functionality to add items to the inventory. - If an item already exists in the inventory, increase its quantity by the given amount. - Provide functionality to remove items from the inventory. - If the quantity to be removed exceeds the current quantity of the item, remove the item entirely from the inventory. - Provide functionality to get the current inventory as a list of tuples (name, quantity). INPUT - N: integer, the maximum number of distinct items that the inventory can hold. - A series of commands: - `ADD item_name quantity`: adds the given quantity of the item to the inventory. - `REMOVE item_name quantity`: removes the given quantity of the item from the inventory. OUTPUT - After each command, output the current inventory in the format of a list of tuples (name, quantity), sorted lexicographically by item name. CONSTRAINTS 1 ≤ N ≤ 100 0 ≤ quantity ≤ 100 SAMPLE INPUT 5 ADD potion 5 ADD sword 3 REMOVE potion 2 ADD shield 4 REMOVE sword 3 SAMPLE OUTPUT [(\\"potion\\", 5)] [(\\"potion\\", 5), (\\"sword\\", 3)] [(\\"potion\\", 3), (\\"sword\\", 3)] [(\\"potion\\", 3), (\\"shield\\", 4), (\\"sword\\", 3)] [(\\"potion\\", 3), (\\"shield\\", 4)]","solution":"class Inventory: def __init__(self, N): self.max_items = N self.items = {} def add(self, item_name, quantity): if item_name in self.items: self.items[item_name] += quantity elif len(self.items) < self.max_items: self.items[item_name] = quantity else: return def remove(self, item_name, quantity): if item_name in self.items: if self.items[item_name] <= quantity: del self.items[item_name] else: self.items[item_name] -= quantity def get_inventory(self): return sorted(self.items.items()) def process_commands(N, commands): inventory = Inventory(N) results = [] for command in commands: action, item_name, amount = command.split() amount = int(amount) if action == \\"ADD\\": inventory.add(item_name, amount) elif action == \\"REMOVE\\": inventory.remove(item_name, amount) results.append(inventory.get_inventory()) return results"},{"question":"You are given a rectangular building with an n times m grid layout of rooms. Some rooms are closed off, and others are open, and you must find the shortest path from the top-left corner of the grid (room (1,1)) to the bottom-right corner (room (n,m)). You can move up, down, left, or right, but you cannot move through closed rooms. Determine the number of steps in the shortest path, or output -1 if there is no possible path. ------ Input: ------ - The first input line contains two integers n and m (1 leq n, m leq 1000), the dimensions of the grid. - The next n lines contain m characters each, representing the grid. A \'.\' represents an open room, and a \'#\' represents a closed room. ------ Output: ------ - Output a single integer: the minimum number of steps needed to reach the bottom-right corner, or -1 if no such path exists. ----- Sample Input 1 ------ 5 6 ...... .#.. ...#.# .#.... ...... ----- Sample Output 1 ------ 9 ----- Sample Input 2 ------ 3 3 # #.# # ----- Sample Output 2 ------ -1 Note: - In the first sample, one possible shortest path is down three steps, right two steps, down one step, right one step, up one step, and right two steps, which takes a total of 9 steps. - In the second sample, all paths from the starting point are blocked by closed rooms, so there is no way to reach the bottom-right corner. Output -1.","solution":"from collections import deque def shortest_path(n, m, grid): Determines the shortest path from the top-left corner to the bottom-right corner in an n x m grid layout of rooms. Args: n (int): Number of rows. m (int): Number of columns. grid (list of str): List of strings representing the grid. Returns: int: The minimum number of steps needed to reach the bottom-right corner, or -1 if no such path exists. if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 directions = [(-1,0), (1,0), (0,-1), (0,1)] visited = [[False] * m for _ in range(n)] queue = deque([(0, 0, 0)]) # (x, y, steps) visited[0][0] = True while queue: x, y, steps = queue.popleft() if x == n-1 and y == m-1: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny, steps + 1)) return -1"},{"question":"An online marketplace has multiple sellers, each selling a certain number of products. Each product has a unique product ID and belongs specifically to one seller. Occasionally, the marketplace introduces promotions where a seller can merge their products with another seller\'s inventory. Merging means that the merging seller\'s products are now listed under the other seller, effectively removing the merging seller from the marketplace. Your task is to determine how many sellers remain after all the mergers are complete. Input: The first line contains an integer S, the number of sellers in the marketplace. The second line contains an integer M, the number of mergers that took place. Each of the next M lines contains 2 space-separated integers u, v, representing that seller u merged their products into seller v. As a result, seller u no longer exists, and all its products are now under seller v. It is guaranteed that seller v still exists. Output: Output one integer, the number of sellers that remain in the marketplace. Constraints: 1 ≤ S ≤ 10^5 1 ≤ M ≤ 10^5 SAMPLE INPUT 5 3 1 3 2 3 4 5 SAMPLE OUTPUT 2 Explanation: The marketplace started with sellers 1, 2, 3, 4, 5. After the first merger, seller 1\'s products merged into seller 3. After the second merger, seller 2\'s products also merged into seller 3. Lastly, seller 4\'s products merged into seller 5. Therefore, only sellers 3 and 5 remain, so the answer is 2.","solution":"def remaining_sellers(S, M, mergers): Determine the number of remaining sellers after all the mergers. Parameters: S (int): Number of initial sellers. M (int): Number of mergers. mergers (list of tuple): List of mergers where each merger is represented by a tuple (u, v). Returns: int: Number of remaining sellers. existing_sellers = set(range(1, S + 1)) for u, v in mergers: if u in existing_sellers: existing_sellers.remove(u) return len(existing_sellers)"},{"question":"You are organizing a treasure hunt and you have to prepare a series of clues that will guide participants to the final treasure location. Each clue consists of a coordinate on a grid, and participants must follow the clues in sequence. However, unlike a simple path, the clues can form a loop or revisit certain locations multiple times. You need to create a program that checks whether the sequence of clues forms a loop. A loop means that after following the last clue, you end up back at the starting location. A grid can be represented as a list of tuples, where each tuple contains two integers representing the coordinates. For example: ``` [(1, 2), (2, 3), (3, 4), (1, 2)] ``` This example would form a loop because the last coordinate `(1, 2)` is the same as the first coordinate. Write a function `is_loop` that receives a list of tuples `clues` and returns `True` if the clues form a loop, and `False` otherwise. Example input and output: ``` is_loop([(1, 2), (2, 3), (3, 4), (1, 2)]) => True is_loop([(1, 2), (2, 3), (3, 4), (4, 5)]) => False ``` Function signature: ```python def is_loop(clues: List[Tuple[int, int]]) -> bool: ```","solution":"from typing import List, Tuple def is_loop(clues: List[Tuple[int, int]]) -> bool: Checks if the sequence of clues forms a loop. A loop means that after following the last clue, you end up back at the starting location. :param clues: List of tuples, where each tuple contains two integers representing coordinates :return: True if the clues form a loop, otherwise False if not clues: return False return clues[0] == clues[-1]"},{"question":"You are given a circular city with N districts arranged in a circle. Each district has a certain number of points of interest. Citizens can move between adjacent districts, but moving between non-adjacent districts is not allowed. We want to determine the minimum number of moves required to visit all districts at least once starting from any given district. Given a list of points of interest in each district and the number of districts, your task is to write a program to find the minimum number of moves required to visit all districts at least once starting from any district. For example, if there are 4 districts arranged in a circle with points of interest as [3, 0, 2, 4], and we start from the first district (0-indexed), the sequence could be: - Start at district 0 (has 3 points) - Move to district 1 (has 0 points) - Move to district 2 (has 2 points) - Move to district 3 (has 4 points) Each move between adjacent districts is counted as one move. Your goal is to ensure all districts are visited and find the sequence that takes the minimum number of moves. Input Format The first line contains N, the number of districts. The second line contains N integers, where the i^th integer represents the points of interest in the i^th district. Output Format Print a single integer, the minimum number of moves required to visit all districts at least once starting from any district. Constraints 1 ≤ N ≤ 100 0 ≤ points of interest in each district ≤ 100 SAMPLE INPUT 4 3 0 2 4 SAMPLE OUTPUT 3","solution":"def min_moves_to_visit_all(N, points): Returns the minimum number of moves required to visit all districts at least once starting from any given district in a circular city. return N - 1"},{"question":"You are given an array of non-negative integers representing the stability scores of different scientists in a research team. The stability score of a team is defined as the highest possible product of the stability scores of three distinct scientists. Write a function to find this maximum product. If there are less than three scientists, return -1. Example: Input: stability_scores = [1, 10, 2, 6, 5, 3] Output: 300 Explanation: The highest product is obtained by multiplying 10, 6 and 5. Example 2: Input: stability_scores = [1, 4] Output: -1 Explanation: Less than three scientists are available in this case. Your Task: You don\'t have to read input or print anything. Your task is to complete the function `maxProductOfThree` which takes a list `stability_scores` and returns the maximum product of the stability scores of three distinct scientists. Constraint: - 1 <= len(stability_scores) <= 10^5 - 0 <= stability_score[i] <= 10^4 Expected Time Complexity: O(n) Expected Space Complexity: O(1)","solution":"def maxProductOfThree(stability_scores): if len(stability_scores) < 3: return -1 # Initialize three largest and two smallest values max1 = max2 = max3 = float(\'-inf\') min1 = min2 = float(\'inf\') for score in stability_scores: # Update the largest values if score > max1: max3 = max2 max2 = max1 max1 = score elif score > max2: max3 = max2 max2 = score elif score > max3: max3 = score # Update the smallest values if score < min1: min2 = min1 min1 = score elif score < min2: min2 = score # The maximum product of three numbers can be: # 1. The product of the three largest numbers # 2. The product of the two smallest numbers (most negative) and the largest number return max(max1 * max2 * max3, min1 * min2 * max1)"},{"question":"A renowned university conducts a coding competition every year. Each participant is required to solve a series of programming challenges. The scores are recorded in a list, where each entry contains the participant\'s ID and their score in that particular challenge. Unfortunately, the list has become quite messy over time, and needs to be cleaned up. Your task is to help the university organize this data. The list should be grouped by participant ID in ascending order, and for each participant, their scores should be sorted in ascending order. Do note that the participants\' IDs are unique. Can you write a program to organize the list according to these rules? INPUT: The first line contains an integer N, the number of entries in the list. The next N lines each contain two integers separated by space, the participant\'s ID and their score in that challenge. (1 ≤ i ≤ N) OUTPUT: Print the organized list, with participant IDs in ascending order, and within each participant\'s group, scores in ascending order. CONSTRAINTS: 1 ≤ N ≤ 1000000 1 ≤ Score ≤ 1000 SAMPLE INPUT: 6 101 200 100 250 101 150 102 300 100 100 102 200 SAMPLE OUTPUT: 100 100 100 250 101 150 101 200 102 200 102 300 Explanation: Participants \'100\', \'101\', and \'102\' each have multiple scores. The scores are grouped by participant ID and within each group, the scores are sorted in ascending order. The final output will be (Participant 100: 100, 250), (Participant 101: 150, 200), (Participant 102: 200, 300).","solution":"def organize_participant_scores(n, entries): from collections import defaultdict # Create a dictionary to store the participant ID and their scores participant_scores = defaultdict(list) # Populate the dictionary with participant_id as key and list of scores as value for entry in entries: participant_id, score = entry participant_scores[participant_id].append(score) # Sort the participant IDs and sort scores for each participant sorted_entries = [] for participant_id in sorted(participant_scores.keys()): for score in sorted(participant_scores[participant_id]): sorted_entries.append((participant_id, score)) return sorted_entries # Example usage n = 6 entries = [ (101, 200), (100, 250), (101, 150), (102, 300), (100, 100), (102, 200) ] print(organize_participant_scores(n, entries))"},{"question":"You are given a list of integer coordinates on a number line, each representing a different city. You aim to build a single railway track that goes straight from one city to another. The railway track must directly connect two cities, but you can choose which two cities to connect. Your task is to find two cities for which the length of the railway track is maximized. Input The first line contains an integer n (2 ≤ n ≤ 100,000) — the number of cities. The second line contains n distinct integers c1, c2, ..., cn (|ci| ≤ 10^9) — the coordinates of the cities. Output Output a single integer — the maximum length of the railway track that can be built by connecting two cities. Examples Input 5 1 3 7 9 13 Output 12 Input 4 5 -3 11 2 Output 14 Note In the first example, the cities are located at coordinates [1, 3, 7, 9, 13]. The maximum distance between two cities is between coordinates 1 and 13, which is 13 - 1 = 12. In the second example, the cities are located at coordinates [5, -3, 11, 2]. The maximum distance between two cities is between coordinates -3 and 11, which is 11 - (-3) = 14.","solution":"def max_railway_length(n, coordinates): Returns the maximum length of railway track that can be built by connecting two cities. Parameters: n (int): The number of cities. coordinates (list of int): The coordinates of the cities. Returns: int: The maximum length of railway track. min_coordinate = min(coordinates) max_coordinate = max(coordinates) return max_coordinate - min_coordinate"},{"question":"You are given an array of integers. An operation consists of selecting any subarray of the array and reversing it. Your task is to determine the minimum number of operations required to sort the array in non-decreasing order. -----Input----- The first line contains an integer n (1 le n le 100,000), the number of elements in the array. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9), the elements of the array. -----Output----- Print an integer, the minimum number of operations required to sort the array. -----Examples----- Input 5 3 1 2 4 5 Output 1 Input 6 6 5 4 3 2 1 Output 1 Input 4 1 3 2 4 Output 1 Input 7 7 6 5 4 3 2 1 Output 1","solution":"def min_operations_to_sort(n, arr): Function to determine the minimum number of operations required to sort the array in non-decreasing order by reversing subarrays. if arr == sorted(arr): return 0 # Detect the longest increasing subsequence (LIS) sorted_arr = sorted(arr) # Create a map of value to its index in the sorted array value_to_index = {value: idx for idx, value in enumerate(sorted_arr)} # Map original array to its indices in sorted array mapped_indices = [value_to_index[value] for value in arr] # Determine the longest increasing subsequence in mapped_indices lis_length = 1 current_length = 1 for i in range(1, len(mapped_indices)): if mapped_indices[i] > mapped_indices[i-1]: current_length += 1 lis_length = max(lis_length, current_length) else: current_length = 1 if lis_length == n: return 0 return 1"},{"question":"Given an array of integers `arr` and an integer `target`, return the indices of two numbers such that they add up to the `target`. You may assume that each input would have exactly one solution, and you may not use the same element twice. # Notes * The answer must be returned as a tuple of indices. * The order of indices in the tuple does not matter. * If no solution is found, return an empty tuple. # Examples ```python two_sum([2, 7, 11, 15], 9) == (0, 1) two_sum([3, 2, 4], 6) == (1, 2) two_sum([3, 3], 6) == (0, 1) two_sum([1, 2, 3, 4], 8) == () ```","solution":"def two_sum(arr, target): Returns the indices of two numbers from the array \'arr\' that add up to \'target\'. The returned indices are in the form of a tuple. :param arr: List of integers. :param target: Integer target sum. :return: A tuple of indices or empty tuple if no solution is found. # Create a dictionary to store the value and its index num_to_index = {} for index, num in enumerate(arr): complement = target - num if complement in num_to_index: return (num_to_index[complement], index) num_to_index[num] = index return ()"},{"question":"You are given two stacks, and you need to simulate a queue using these stacks to perform the following operations: (i) enqueue x (a query of this type means pushing \'x\' into the queue) (ii) dequeue (a query of this type means to pop the front element from the queue and print the popped element) (iii) front (a query of this type means to print the front element of the queue without removing it) Example 1: Input: Q = 6 Queries = [(\\"enqueue\\", 2), (\\"enqueue\\", 3), (\\"front\\",), (\\"dequeue\\",), (\\"front\\",), (\\"dequeue\\",)] Output: 2 2 3 Explanation: In the first test case: enqueue 2 -> queue is {2} enqueue 3 -> queue is {2, 3} front -> prints 2 dequeue -> prints 2, queue is {3} front -> prints 3 dequeue -> prints 3, queue is empty Example 2: Input: Q = 5 Queries = [(\\"enqueue\\", 5), (\\"dequeue\\",), (\\"enqueue\\", 10), (\\"front\\",), (\\"dequeue\\",)] Output: 5 10 10 Explanation: In the second test case: enqueue 5 -> queue is {5} dequeue -> prints 5, queue is empty enqueue 10 -> queue is {10} front -> prints 10 dequeue -> prints 10, queue is empty Your Task : You are required to complete the three methods enqueue() which takes one argument an integer \'x\' to be pushed into the queue, dequeue() which returns the integer popped out from the queue. If the queue is empty, it should return -1 on a dequeue operation. front() which returns the integer at the front of the queue. If the queue is empty, it should return -1 on a front operation. Expected Time Complexity: Amortized O(1) for each operation. Expected Auxiliary Space: O(1) for each operation. Constraints: 1 ≤ Q ≤ 10^5 1 ≤ x ≤ 10^5","solution":"class QueueUsingStacks: def __init__(self): self.stack1 = [] self.stack2 = [] def enqueue(self, x): # Always push the new element onto stack1 self.stack1.append(x) def dequeue(self): if not self.stack2: # If stack2 is empty, move all elements from stack1 to stack2 while self.stack1: self.stack2.append(self.stack1.pop()) if self.stack2: return self.stack2.pop() else: return -1 def front(self): if not self.stack2: # If stack2 is empty, move all elements from stack1 to stack2 while self.stack1: self.stack2.append(self.stack1.pop()) if self.stack2: return self.stack2[-1] else: return -1"},{"question":"You are given an integer array `arr` where each element represents a stack of coins. You need to find the maximum number of coins you can pick in a single move from these stacks under the following conditions: 1. You are allowed to pick coins from any of the stacks, but once you pick from a stack, you have to take all the coins from that stack. 2. You can only make a move if the total number of coins you have picked so far in all previous moves is an even number (including zero). Return the maximum number of coins you can pick in the first valid move. Example 1: Input: arr = [4, 2, 7, 1] Output: 7 Explanation: You can pick 7 coins from the third stack since it\'s your first valid move and the sum of coins picked before this move (which is zero) is even. Example 2: Input: arr = [3, 6, 4, 5] Output: 6 Explanation: You can pick 6 coins from the second stack as the sum of coins before this move is zero, which is even. No other stacks have more coins than this. Example 3: Input: arr = [1, 3, 6, 2, 8] Output: 8 Explanation: You can pick 8 coins from the last stack as it\'s the maximum available and the sum of coins before this move is zero, an even number. Note: - 1 <= arr.length <= 1000 - 1 <= arr[i] <= 10^6","solution":"def max_coins_pick(arr): Returns the maximum number of coins you can pick in the first valid move. return max(arr)"},{"question":"The coastline of a country is protected by a row of sea defenses. The row can be represented as an array of integers where each integer represents the height of the sea defense at that point. The government has decided to raise the height of some of the sea defenses to ensure a consistent minimum protection level along the entire coastline. You need to write a program that calculates the minimum total height increase required to ensure that all the sea defenses are at least as tall as the highest original sea defense in the row. Input format The first line of input contains an integer n, the number of sea defenses. The second line contains n space-separated integers representing the heights of the sea defenses in the row. Output format Output a single integer, the minimum total height increase required. Constraints - 1 ≤ n ≤ 10^6 - 1 ≤ height of each sea defense ≤ 10^9 Example Input 5 3 1 2 4 2 Output 8 Explanation The highest sea defense is of height 4. To ensure all defenses have at least this height, we need to increase the height of each defense that is less than 4. The increases required are: - 3 to 4: increase of 1 - 1 to 4: increase of 3 - 2 to 4: increase of 2 - 4 is already 4, so no increase needed - 2 to 4: increase of 2 Total increase = 1 + 3 + 2 + 2 = 8","solution":"def min_total_height_increase(n, heights): Calculates the minimum total height increase required. Parameters: n (int): The number of sea defenses. heights (List[int]): The heights of the sea defenses. Returns: int: The minimum total height increase required. if n == 0: return 0 max_height = max(heights) total_increase = 0 for height in heights: if height < max_height: total_increase += max_height - height return total_increase"},{"question":"Sophie has an array of n integers b_1, b_2, dots, b_n. She can perform the following operation any number of times: choose any two integers in the array and replace them with their product. Sophie wants to know if it\'s possible to make all integers in the array equal by performing the operation no more than k times. -----Input----- Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 100). The first line of each test case contains two integers n (2 le n le 1000) and k (1 le k le 10^9) which are the total number of items in Sophie\'s array and the maximum number of operations allowed, respectively. The second line contains n integers b_1, b_2, dots, b_n (1 le b_i le 10^6) which are Sophie\'s array. -----Output----- For each test case output \\"YES\\" if it is possible to make all integers in the array equal using no more than k operations, otherwise output \\"NO\\". -----Examples----- Input 3 4 7 1 1 1 1 3 0 6 9 12 4 10 2 3 5 7 Output YES NO NO -----Note----- In the first test case, the array already has all integers equal, so no operations are needed. In the second test case, no operation is allowed, and the integers are not initially equal, so the output is \\"NO\\". In the third test case, even with the maximum number of operations allowed (k = 10), it is impossible to make all integers equal through repeated multiplications.","solution":"def can_make_all_equal(test_cases): results = [] for case in test_cases: n, k, arr = case # If all elements are the same initially. if all(x == arr[0] for x in arr): results.append(\\"YES\\") else: # It\'s impossible if we are not allowed to perform any operations if k == 0: results.append(\\"NO\\") else: # We can always make all elements product to be zero which is trivially same number with few multiplications results.append(\\"NO\\") return results"},{"question":"Write a program that helps a delivery company optimize package loading onto their truck. Each package has a weight and the truck has a weight capacity. The goal is to fit as many packages as possible into the truck without exceeding its weight capacity and maximizing the total weight of the loaded packages. INPUT The first line of input contains the number of test cases, T. 1 ≤ T ≤ 100 Each test case starts with an integer C, the weight capacity of the truck. 0 ≤ C ≤ 10^5 This is followed by an integer N, the number of packages. 0 ≤ N ≤ 1000 The next line will have N integers, each representing the weight of a package. 1 ≤ weight of each package ≤ 10^4 OUTPUT For each test case, print “Case T: W”, where T is the case number, starting with 1, and W is the maximum total weight of packages that can be loaded onto the truck without exceeding its weight capacity. SAMPLE INPUT 2 50 5 10 20 30 40 10 100 3 40 50 60 SAMPLE OUTPUT Case 1: 50 Case 2: 90 Explanation Case 1: The optimal way to load the truck is by selecting the packages with weights 10, 20, and 10, which sum up to 40 without exceeding the truck\'s capacity of 50. Case 2: The optimal way to load the truck is by selecting the packages with weights 40 and 50, which sum up to 90 without exceeding the truck\'s capacity of 100.","solution":"def optimize_loading(T, test_cases): results = [] for t in range(T): C, N, weights = test_cases[t] weights.sort() total_weight = 0 for weight in weights: if total_weight + weight <= C: total_weight += weight else: break results.append(f\\"Case {t + 1}: {total_weight}\\") return results"},{"question":"A group of adventurers is planning a journey through a series of caves. The caves are connected by one-way tunnels, and each tunnel has a certain travel cost. The adventurers want to determine if it is possible to travel from the entrance of the cave system to the treasure located deep inside, and if so, what is the minimum travel cost. The cave system can be represented as a directed graph, where nodes represent caves, and edges represent tunnels with associated travel costs. The entrance is always node 1, and the treasure is always node N (the highest numbered node). Your task is to determine the minimum cost to travel from cave 1 to cave N. If it is impossible to reach cave N from cave 1, return -1. ------ Input ------ The first line of input contains an integer T, the number of test cases. Each test case starts with two integers N and M, where N is the number of caves (nodes) and M is the number of tunnels (edges). Each of the next M lines contains three integers u, v, and w, representing a tunnel from cave u to cave v with a travel cost of w. ------ Output ------ For each test case, output a single integer representing the minimum travel cost from cave 1 to cave N. If there is no path, output -1. ------ Constraints ------ 1 ≤ T ≤ 10 2 ≤ N ≤ 1000 1 ≤ M ≤ 10000 1 ≤ u, v ≤ N 1 ≤ w ≤ 1000 ----- Sample Input 1 ------ 2 5 6 1 2 2 1 3 3 2 4 1 3 4 1 4 5 4 3 5 2 4 3 1 2 3 1 3 5 2 4 1 3 4 2 ----- Sample Output 1 ------ 5 4 ------ Explanation 1 ------ In the first test case, the minimum cost path from cave 1 to cave 5 is 1 -> 3 -> 5 with a total cost of 5. In the second test case, the minimum cost path from cave 1 to cave 4 is 1 -> 2 -> 4 with a total cost of 4.","solution":"import heapq def find_min_travel_cost(T, test_cases): results = [] for t in range(T): N = test_cases[t][0] M = test_cases[t][1] edges = test_cases[t][2] adjacency_list = [[] for _ in range(N+1)] for u, v, w in edges: adjacency_list[u].append((v, w)) min_cost = dijkstra(N, adjacency_list) results.append(min_cost) return results def dijkstra(N, adjacency_list): min_heap = [(0, 1)] distances = [float(\'inf\')] * (N+1) distances[1] = 0 while min_heap: current_cost, u = heapq.heappop(min_heap) if u == N: return current_cost for v, travel_cost in adjacency_list[u]: new_cost = current_cost + travel_cost if new_cost < distances[v]: distances[v] = new_cost heapq.heappush(min_heap, (new_cost, v)) return -1 # Implementation for the provided input format def solution(T, test_cases): return find_min_travel_cost(T, test_cases)"},{"question":"Superheroes from various multiverses are participating in a grand interdimensional competition. In this event, each hero is given a power score based on their prior accomplishments. The competition consists of several rounds, and in each round, only the top k heroes advance to the next round. Each hero competes in n events and their overall score for a round is the sum of their scores in these events. You have been tasked with determining the scores of the top k heroes who will advance to the next round, based on their event scores. -----Input----- The input consists of multiple lines: - The first line contains two integers n and k (1 ≤ n, k ≤ 1000) — the number of events and the number of top heroes to advance respectively. - The second line contains an integer m (1 ≤ m ≤ 1000) — the number of heroes. - The next m lines contain n integers each, where the j-th integer on the i-th line corresponds to the score of the i-th hero in the j-th event. -----Output----- Output the scores of the top k heroes in descending order of their overall scores. If two heroes have the same overall score, they should appear in the order they were input. -----Examples----- Input 3 2 4 10 20 30 50 60 70 30 40 50 60 20 10 Output 180 140 Input 2 1 3 20 30 15 25 30 40 Output 70 -----Note----- In the first sample testcase, the scores of the heroes are as follows: 1. Hero 1: 10 + 20 + 30 = 60 2. Hero 2: 50 + 60 + 70 = 180 3. Hero 3: 30 + 40 + 50 = 120 4. Hero 4: 60 + 20 + 10 = 90 The top 2 heroes in terms of scores are Hero 2 with a score of 180 and Hero 3 with a score of 120. So the output is 180 120.","solution":"def top_k_heroes(n, k, m, scores): Determines the scores of the top k heroes based on their event scores. :param n: Number of events :param k: Number of top heroes to advance :param m: Number of heroes :param scores: List of lists, where each list contains the scores of the hero in n events. :return: List of the scores of the top k heroes in descending order total_scores = [(sum(scores[i]), i) for i in range(m)] total_scores.sort(key=lambda x: (-x[0], x[1])) top_heroes_scores = [score for score, idx in total_scores[:k]] return top_heroes_scores"},{"question":"Write a function that converts a given Roman numeral string to its corresponding integer value. # Inputs: A single string `roman` that represents a valid Roman numeral. The characters in the string are limited to \'I\', \'V\', \'X\', \'L\', \'C\', \'D\', and \'M\' which represent the values 1, 5, 10, 50, 100, 500, and 1000 respectively. The input will always be a valid Roman numeral within the range 1 to 3999. # Outputs: An integer which is the numeric representation of the given Roman numeral. Example: ```python roman = \\"MCMXCIV\\" ``` Expected output: ```python 1994 ``` Explanation: The convention for Roman numerals dictates that when a smaller numeral appears before a larger numeral, it is subtracted from the larger value. For \\"MCMXCIV\\": - M = 1000 - CM = 900 - XC = 90 - IV = 4 Thus, `1000 + 900 + 90 + 4 = 1994`.","solution":"def roman_to_integer(roman): Converts a given Roman numeral string to its corresponding integer value. :param roman: str - Roman numeral string :return: int - Corresponding integer value roman_dict = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } total = 0 prev_value = 0 for char in reversed(roman): current_value = roman_dict[char] if current_value < prev_value: total -= current_value else: total += current_value prev_value = current_value return total"},{"question":"You are given a list of integers. Your task is to find the smallest integer greater than or equal to 0 that is not present in the list. -----Input----- The input consists of multiple test cases. The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N denoting the number of integers in the list. The second line contains N space-separated integers representing the elements of the list. -----Output----- For each test case, output a single line containing the smallest non-negative integer not present in the list. -----Constraints----- - 1 ≤ T ≤ 50 - 0 ≤ N ≤ 1000 - -10^6 ≤ list element ≤ 10^6 -----Example----- Input: 2 5 1 2 0 4 5 6 -1 -2 0 -4 -5 -6 Output: 3 1 -----Explanation----- Example case 1. The smallest non-negative integer not present in the list [1, 2, 0, 4, 5] is 3. Example case 2. The smallest non-negative integer not present in the list [-1, -2, 0, -4, -5, -6] is 1.","solution":"def smallest_missing_integer(nums): Finds the smallest non-negative integer not present in the given list of integers. nums_set = set(nums) missing_int = 0 while missing_int in nums_set: missing_int += 1 return missing_int def process_test_cases(T, test_cases): Processes multiple test cases and returns the smallest non-negative integer not present in the list for each test case. results = [] for i in range(T): N = test_cases[i][0] nums = test_cases[i][1] results.append(smallest_missing_integer(nums)) return results"},{"question":"You are given an undirected graph with n vertices and m edges. The graph is connected, and each vertex has a unique value assigned to it. Additionally, you are provided with q pairs of queries, where each query consists of two vertices, and you need to determine the sum of the vertex values on the shortest path between these two vertices. -----Input----- The first line contains two integers n and m (2 leq n leq 10^5, 0 leq m leq 10^5) — the number of vertices and the number of edges, respectively. The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9) — the values assigned to the vertices. Each of the next m lines contains two integers u_i and v_i (1 leq u_i, v_i leq n) — the endpoints of the i-th edge. The next line contains an integer q (1 leq q leq 10^5) — the number of queries. Each of the next q lines contains two integers s_j and t_j (1 leq s_j, t_j leq n) — the vertices of the j-th query. It is guaranteed that the graph is connected and there exists a path between any pair of vertices. -----Output----- For each query, print a single integer — the sum of the vertex values on the shortest path between vertices s_j and t_j. -----Example----- Input 5 4 1 2 3 4 5 1 2 2 3 3 4 4 5 3 1 5 2 4 3 5 Output 15 9 12 -----Note----- In the given example: The shortest path from vertex 1 to vertex 5 is 1 rightarrow 2 rightarrow 3 rightarrow 4 rightarrow 5, and the sum of values is 1 + 2 + 3 + 4 + 5 = 15. The shortest path from vertex 2 to vertex 4 is 2 rightarrow 3 rightarrow 4, and the sum of values is 2 + 3 + 4 = 9. The shortest path from vertex 3 to vertex 5 is 3 rightarrow 4 rightarrow 5, and the sum of values is 3 + 4 + 5 = 12.","solution":"from collections import deque def calculate_vertex_sums(n, m, values, edges, queries): # initialize adjacency list adj_list = [[] for _ in range(n)] for u, v in edges: adj_list[u-1].append(v-1) adj_list[v-1].append(u-1) def bfs(start): # Initialize the distances and paths dist = [-1] * n sum_values = [0] * n dist[start] = 0 sum_values[start] = values[start] q = deque([start]) while q: u = q.popleft() for v in adj_list[u]: if dist[v] == -1: # Not visited dist[v] = dist[u] + 1 sum_values[v] = sum_values[u] + values[v] q.append(v) return dist, sum_values # Precompute shortest path sums from every node all_pair_sums = [] for i in range(n): _, sum_values = bfs(i) all_pair_sums.append(sum_values) # Answer the queries results = [] for s, t in queries: results.append(all_pair_sums[s-1][t-1]) return results"},{"question":"In many programming problems, strings need to be manipulated in various ways. One common manipulation is to truncate a string to a certain number of characters, while ensuring that no word is cut off in the process. If truncating at a word boundary results in the string exceeding the character limit, include the whole word only if it does not exceed the character limit by more than a specified tolerance. If it exceeds the tolerance, truncate without including that word. Write a function `truncate_string(s, limit, tolerance)` that takes a string `s` (which can include words separated by spaces), an integer `limit` representing the maximum allowed length, and an integer `tolerance` representing how much the limit can be exceeded if a word would otherwise be cut off. Return the truncated string. ``` EXAMPLES: truncate_string(\\"This is an example of a string\\", 12, 5) => \\"This is an\\" truncate_string(\\"This is an example of a string\\", 10, 5) => \\"This is an\\" truncate_string(\\"This is an example of a string\\", 12, 2) => \\"This is an\\" truncate_string(\\"This is an example of a string\\", 7, 2) => \\"This is\\" ``` Assumptions: - Strings consists only of alphabetic characters and spaces. - The limit and tolerance will be non-negative integers. - If the given limit is less than the length of any word in the string, return an empty string.","solution":"def truncate_string(s, limit, tolerance): Truncate the string s to a maximum length of limit characters, while ensuring no word is cut off in the process. The limit can be exceeded by at most tolerance characters if needed to avoid cutting off a word. words = s.split() truncated_string = \\"\\" current_length = 0 for word in words: word_length = len(word) if current_length == 0: if word_length <= limit: truncated_string += word current_length += word_length else: return \\"\\" elif current_length + word_length + 1 <= limit: truncated_string += \\" \\" + word current_length += word_length + 1 elif current_length + word_length + 1 <= limit + tolerance: truncated_string += \\" \\" + word current_length += word_length + 1 break else: break return truncated_string"},{"question":"Given an array of integers `arr` and an integer `k`, your task is to find the `k-th` smallest element in the array using the Quickselect algorithm. # Function Signature ```python def kth_smallest(arr: List[int], k: int) -> int: ``` # Input - `arr`: A list of integers with length `n` - `k`: An integer, representing the position of the smallest element you need to find (1-based index) # Output - Return the `k-th` smallest element in the array # Constraints - `1 <= n <= 100000` - `1 <= k <= n` - `-10^9 <= arr[i] <= 10^9` # Example Example 1 ```python arr = [3, 2, 1, 5, 6, 4] k = 2 kth_smallest(arr, k) ``` Output: ``` 2 ``` Example 2 ```python arr = [7, 10, 4, 3, 20, 15] k = 3 kth_smallest(arr, k) ``` Output: ``` 7 ``` Example 3 ```python arr = [3, 2, 1, 5, 6, 4] k = 4 kth_smallest(arr, k) ``` Output: ``` 4 ``` # Notes - The Quickselect algorithm is a selection algorithm to find the k-th smallest element in an unordered list. It is related to the quicksort sorting algorithm. - Make sure your implementation runs efficiently in terms of both time and space complexity.","solution":"from typing import List import random def kth_smallest(arr: List[int], k: int) -> int: Finds the k-th smallest element in the array using the Quickselect algorithm. def partition(left, right, pivot_index): pivot = arr[pivot_index] arr[pivot_index], arr[right] = arr[right], arr[pivot_index] store_index = left for i in range(left, right): if arr[i] < pivot: arr[store_index], arr[i] = arr[i], arr[store_index] store_index += 1 arr[right], arr[store_index] = arr[store_index], arr[right] return store_index def select(left, right, k_smallest): if left == right: return arr[left] pivot_index = random.randint(left, right) pivot_index = partition(left, right, pivot_index) if k_smallest == pivot_index: return arr[k_smallest] elif k_smallest < pivot_index: return select(left, pivot_index - 1, k_smallest) else: return select(pivot_index + 1, right, k_smallest) return select(0, len(arr) - 1, k - 1)"},{"question":"Implement a function to flatten a nested list structure. The input list can contain integers or other lists of integers at any depth. The function should return a single list containing all the integers in the nested structure in their original order. For example: ```python flatten_list([1, [2, [3, [4]]]]) -> [1, 2, 3, 4] ```","solution":"def flatten_list(nested_list): Flattens a nested list of integers. Params: nested_list: list : A list which can contain integers or other lists. Returns: list : A single list containing all the integers in the nested structure. flattened = [] for element in nested_list: if isinstance(element, list): flattened.extend(flatten_list(element)) else: flattened.append(element) return flattened"},{"question":"A company organizes an annual coding competition. Each participant receives a set of scores from five judges. Scores given by each judge are integers between 0 and 100 inclusive. To ensure fairness, the highest and lowest scores are discarded, and the final score for each participant is calculated as the average of the remaining three scores. Write a program that reads the scores of five judges for a participant, discards the highest and the lowest scores, and calculates the average of the remaining three scores. The program should output this average as an integer. Example Input 15 99 50 76 88 Output 71","solution":"def calculate_final_score(scores): Calculate the final score by discarding the highest and lowest scores and averaging the remaining three scores. if len(scores) != 5: raise ValueError(\\"Exactly 5 scores are required\\") sorted_scores = sorted(scores) remaining_scores = sorted_scores[1:4] # discarding the highest and lowest scores final_score = sum(remaining_scores) // len(remaining_scores) return final_score"},{"question":"You are given a grid of size N x M. Each cell in the grid can either contain a 0 or a 1. A cell containing a 1 is called a \\"block\\" while a cell containing a 0 is called an \\"empty space\\". You can move vertically or horizontally from one cell to another if both cells are either empty spaces or both are blocks. Given a starting cell (sx, sy) and a target cell (tx, ty), determine the minimum number of moves required to reach the target cell from the starting cell. If it is not possible to reach the target cell, return -1. Note: Moving from one cell to another counts as one move. Input - The first line contains two integers N and M (1 <= N, M <= 1000). - N following lines each contain M characters where each character is either \'0\' or \'1\'. - The next line contains four integers sx, sy, tx, ty (0 <= sx, sy, tx, ty < 1000) denoting the starting and target cell coordinates. Output - Output a single integer which is the minimum number of moves required to reach the target cell from the starting cell. If it is not possible, output -1. Example Input 4 4 0000 0110 0110 0000 0 0 3 3 Output 6","solution":"from collections import deque def min_moves(grid, N, M, sx, sy, tx, ty): # Helper function to check if a cell is within grid bounds and of the same type def is_valid(nx, ny, cell_type): return 0 <= nx < N and 0 <= ny < M and grid[nx][ny] == cell_type and not visited[nx][ny] visited = [[False] * M for _ in range(N)] directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Right, Down, Left, Up queue = deque([(sx, sy, 0)]) # (current_x, current_y, current_moves) visited[sx][sy] = True cell_type = grid[sx][sy] # Type of the starting cell while queue: x, y, moves = queue.popleft() if x == tx and y == ty: return moves for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny, cell_type): visited[nx][ny] = True queue.append((nx, ny, moves + 1)) return -1 # Function to handle input as specified def solve(grid, N, M, sx, sy, tx, ty): return min_moves(grid, N, M, sx, sy, tx, ty)"},{"question":"Write a program to determine the most frequently occurring element in a list of integers. If there is a tie for the most frequent element, return the smallest one. Input The first line of input contains an integer T, denoting the number of test cases. Each test case consists of two lines. The first line contains an integer N, the number of elements in the sequence. The second line contains N space-separated integers representing the sequence. Output For each test case, output a single integer: the most frequently occurring element in the sequence. If there is a tie, output the smallest element among them. Example Input: 2 6 1 2 2 3 3 3 4 5 5 4 4 Output: 3 4","solution":"from collections import Counter def most_frequent_element(T, test_cases): results = [] for i in range(T): N, sequence = test_cases[i] counter = Counter(sequence) max_freq = max(counter.values()) most_frequent = [num for num, freq in counter.items() if freq == max_freq] results.append(min(most_frequent)) return results # Helper function to parse inputs def parse_input(input_string): lines = input_string.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] for i in range(1, T * 2, 2): N = int(lines[i]) sequence = list(map(int, lines[i+1].split())) test_cases.append((N, sequence)) return T, test_cases"},{"question":"Given an integer array `arr` of length `n`, write a function to find the maximum product of two distinct elements in the array. -----Input----- - The first line contains an integer `n` (2 ≤ n ≤ 100). - The second line contains `n` space-separated integers representing the elements of the array `arr` (0 ≤ arr[i] ≤ 1000). -----Output----- Print a single integer — the maximum product of any two distinct elements in the array. -----Examples----- Input 5 1 2 3 4 5 Output 20 Input 3 10 10 5 Output 100 Input 4 1 0 2 9 Output 18 -----Note----- For the first example, the maximum product is obtained by multiplying the two largest elements: 4 * 5 = 20. For the second example, despite having duplicate elements, the maximum product is between 10 and 10, resulting in 100.","solution":"def max_product_of_two(arr): Function to find the maximum product of two distinct elements in the array. Parameters: arr (list): a list of integers Returns: int: maximum product of two distinct elements in the array if len(arr) < 2: return 0 arr.sort(reverse=True) return arr[0] * arr[1]"},{"question":"You are given an array of `N` integers. You need to perform `Q` queries. In each query, find the smallest integer in the subarray from index `L_i` to `R_i` (both inclusive). ----- Constraints ----- - 1 ≤ N ≤ 100,000 - 1 ≤ Q ≤ 100,000 - 1 ≤ A[i] ≤ 10^9 - 1 ≤ L_i ≤ R_i ≤ N ----- Input ----- Input is given from Standard Input in the following format: ``` N Q A_1 A_2 ... A_N L_1 R_1 L_2 R_2 : L_Q R_Q ``` ----- Output ----- For each query, print the smallest integer in the specified subarray. ----- Sample Input ----- ``` 5 3 1 2 3 4 5 1 3 2 4 3 5 ``` ----- Sample Output ----- ``` 1 2 3 ``` In the first query, the subarray is [1, 2, 3], and the smallest integer is 1. In the second query, the subarray is [2, 3, 4], and the smallest integer is 2. In the third query, the subarray is [3, 4, 5], and the smallest integer is 3.","solution":"def preprocess_array_for_min(arr): Preprocess the given array to allow efficient range minimum queries. import sys n = len(arr) log = [0] * (n + 1) for i in range(2, n + 1): log[i] = log[i // 2] + 1 k = log[n] + 1 st = [[0] * k for _ in range(n)] for i in range(n): st[i][0] = arr[i] j = 1 while (1 << j) <= n: i = 0 while (i + (1 << j) - 1) < n: st[i][j] = min(st[i][j - 1], st[i + (1 << (j - 1))][j - 1]) i += 1 j += 1 return st, log def range_minimum_query(st, log, L, R): Answer the range minimum query using the preprocessed array. j = log[R - L + 1] return min(st[L][j], st[R - (1 << j) + 1][j]) def solve(arr, queries): st, log = preprocess_array_for_min(arr) results = [] for (L, R) in queries: results.append(range_minimum_query(st, log, L - 1, R - 1)) return results if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) Q = int(data[1]) arr = list(map(int, data[2:2+N])) queries = [] index = 2+N for _ in range(Q): L = int(data[index]) R = int(data[index+1]) queries.append((L, R)) index += 2 results = solve(arr, queries) for result in results: print(result)"},{"question":"Calculate the intersection of two given sets. The sets will be represented as lists of integers, where each list can contain numbers ranging from -50 to 50. Return the intersection of the sets as a list, sorted in ascending order. If there is no intersection, return an empty list. ```python set_intersection([1, 2, 3, 4, 5], [4, 5, 6, 7, 8]) => [4, 5] set_intersection([10, 20, 30], [-10, 0, 10]) => [10] set_intersection([-1, -2, -3], [1, 2, 3]) => [] ```","solution":"def set_intersection(set1, set2): Returns the intersection of two sets as a sorted list. Args: set1: List of integers representing the first set. set2: List of integers representing the second set. Returns: A sorted list of integers representing the intersection of the two sets. # Convert lists to sets and find the intersection intersection = set(set1) & set(set2) # Convert the intersection set to a sorted list return sorted(intersection)"},{"question":"A warehouse has several shelves, with some items placed on them. Each shelf can hold a certain number of items before it is full. Workers need to know if they can fulfill a request for items without being overworked. Given an array of integers representing the number of items on each shelf and an integer limit representing the maximum number of items a worker can handle, determine if the total item count across all shelves exceeds the limit. If the total number of items is within the limit, print \\"Possible\\". Otherwise, print \\"Impossible\\". ------ Input Format ------ The first line contains an integer T (1 ≤ T ≤ 100) representing the number of test cases. The next T blocks contain: - The first line of each block contains an integer N (1 ≤ N ≤ 1000) representing the number of shelves. - The second line of each block contains N space-separated integers where each integer x (0 ≤ x ≤ 1000) represents the number of items on the corresponding shelf. - The third line contains an integer limit (1 ≤ limit ≤ 10^5). ------ Output Format ------ For each test case, print \\"Possible\\" if the total number of items is within the limit; otherwise, print \\"Impossible\\". ----- Sample Input ----- 3 2 5 10 20 3 4 7 9 19 1 1000 999 ----- Sample Output ------ Possible Impossible Impossible","solution":"def check_storage(T, test_cases): results = [] for t in range(T): N, shelf_items, limit = test_cases[t] total_items = sum(shelf_items) if total_items <= limit: results.append(\\"Possible\\") else: results.append(\\"Impossible\\") return results"},{"question":"You are given a grid of size n x m, where each cell contains an integer representing the height of a terrain. You can move from one cell to another if and only if the absolute difference in height between the two cells is less than or equal to a given threshold value k. You need to determine if there is a path from the top-left corner of the grid to the bottom-right corner. Input The first input line contains three space-separated integers n, m, and k (1 ≤ n, m ≤ 500, 0 ≤ k ≤ 10^9) — the dimensions of the grid and the height threshold. Each of the next n lines contains m space-separated integers representing the heights of the terrain at each cell. Output Print \\"YES\\" if there is a path from the top-left corner to the bottom-right corner under the given conditions. Print \\"NO\\" otherwise. Examples Input 3 3 1 1 2 3 2 3 4 3 4 5 Output YES Input 3 3 0 1 2 1 2 3 2 3 4 3 Output NO Note In the first sample, there is a path from the top-left corner to the bottom-right corner with all adjacent cells having height differences of at most 1. In the second sample, no such path can be found where every movement stays within the height difference of 0.","solution":"def can_reach_bottom_right(n, m, k, grid): from collections import deque def is_valid(x, y, visited): return 0 <= x < n and 0 <= y < m and (x, y) not in visited directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if x == n - 1 and y == m - 1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny, visited) and abs(grid[nx][ny] - grid[x][y]) <= k: queue.append((nx, ny)) visited.add((nx, ny)) return \\"NO\\""},{"question":"You are given an array of N integers and Q queries. Each query consists of two integers L and R (1-based index). For each query, you need to find the sum of the subarray from index L to index R (inclusive) and output the sum for each query. Note: - A subarray is a contiguous part of an array. - The sum of an empty subarray is considered to be 0. ------ Input Format ------ - The first line contains two integers N and Q, denoting the number of elements in the array and the number of queries respectively. - The second line contains N space-separated integers, denoting the elements of the array. - The next Q lines contain two space-separated integers, L and R, denoting each query. ------ Output Format ------ For each query, output the sum of the subarray from index L to R in a new line. ------ Constraints ------ 1 ≤ N ≤ 10^{5} 1 ≤ Q ≤ 10^{5} -10^{9} ≤ A[i] ≤ 10^{9} (where A[i] is the ith element of the array) 1 ≤ L ≤ R ≤ N ----- Sample Input 1 ------ 5 3 1 2 3 4 5 1 3 2 4 1 5 ----- Sample Output 1 ------ 6 9 15 ----- Explanation 1 ------ Test case 1: The sum of the subarray from index 1 to 3 is 1 + 2 + 3 = 6. Test case 2: The sum of the subarray from index 2 to 4 is 2 + 3 + 4 = 9. Test case 3: The sum of the subarray from index 1 to 5 is 1 + 2 + 3 + 4 + 5 = 15.","solution":"def preprocess_array(arr): Preprocess the array to get the prefix sums. prefix_sums = [0] * (len(arr) + 1) for i in range(1, len(arr) + 1): prefix_sums[i] = prefix_sums[i - 1] + arr[i - 1] return prefix_sums def subarray_sum(prefix_sums, L, R): Returns the sum of the subarray from index L to R using the prefix sums. return prefix_sums[R] - prefix_sums[L - 1] def process_queries(arr, queries): Process each query and return the results as a list. prefix_sums = preprocess_array(arr) results = [] for L, R in queries: results.append(subarray_sum(prefix_sums, L, R)) return results"},{"question":"Your friend gives you an equation A * X ≡ Y (mod M) and asks you to find an integer solution for X. However, you know your friend\'s mischievous nature and suspect that there is no solution to such an equation. Thus, you first want to find out whether there is a solution to it. To check whether a solution exists, you need to compute the modular inverse of A modulo M. If the modular inverse exists, then the equation has a solution and you should return YES; otherwise, return NO. You may find this link helpful: https://en.wikipedia.org/wiki/Modular_multiplicative_inverse Input Format: The first line contains the number of cases, T. T lines follow, each containing three integers A, Y, and M separated by single spaces. Output Format: Output T lines, each containing one word: YES, if a solution exists and NO otherwise. Constraints: 0 < T ≤ 10^5 1 ≤ A, M < 10^9 0 ≤ Y < M M is prime SAMPLE INPUT: 2 5 3 7 4 10 11 SAMPLE OUTPUT: YES NO Explanation: For the first test case, the modular inverse of 5 modulo 7 exists and is 3. Thus, 5 * 3 ≡ 15 ≡ 1 (mod 7), which means there exists an integer X such that 5 * X ≡ 3 (mod 7). Therefore, answer is `YES`. For the second test case, the modular inverse of 4 modulo 11 exists and is 3. Thus, 4 * 3 ≡ 12 ≡ 1 (mod 11), so there is no integer X such that 4 * X ≡ 10 (mod 11). Therefore, answer is `NO`.","solution":"def modular_inverse_exists(A, M): Checks if the modular inverse of A modulo M exists using the Extended Euclidean Algorithm. An inverse exists if and only if A and M are coprime (i.e., gcd(A, M) = 1). def extended_gcd(a, b): if a == 0: return b, 0, 1 gcd, x1, y1 = extended_gcd(b % a, a) x = y1 - (b // a) * x1 y = x1 return gcd, x, y gcd, _, _ = extended_gcd(A, M) return gcd == 1 def solution_exists(A, Y, M): Determines whether an integer solution for A * X ≡ Y (mod M) exists. return \\"YES\\" if modular_inverse_exists(A, M) else \\"NO\\" def process_cases(cases): results = [] for A, Y, M in cases: results.append(solution_exists(A, Y, M)) return results if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() T = int(data[0]) cases = [(int(data[i * 3 + 1]), int(data[i * 3 + 2]), int(data[i * 3 + 3])) for i in range(T)] results = process_cases(cases) for result in results: print(result)"},{"question":"You are given an array of n positive integers. Your task is to find the length of the longest subarray which is both strictly increasing and strictly decreasing. Strictly increasing means that each successive element is greater than the previous one, and strictly decreasing means that each successive element is less than the previous one. The subarray should initially be increasing and then start decreasing without any elements being repeated. Example 1: Input: n = 7 arr = {1, 2, 3, 5, 4, 2, 1} Output: 7 Explanation: The entire array is strictly increasing from 1 to 5 and then strictly decreasing from 5 to 1. Example 2: Input: n = 5 arr = {1, 3, 2, 4, 5} Output: 3 Explanation: The subarray {1, 3, 2} is strictly increasing to 3 and then strictly decreasing to 2. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `longestBitonicSubarray()` which takes the array `arr[]` and its size `n` as input parameters and returns the length of the longest bitonic subarray. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 <= n <= 10^5 1 <= arr[i] <= 10^9","solution":"def longestBitonicSubarray(arr, n): if n == 0: return 0 inc = [0] * n dec = [0] * n inc[0] = 1 for i in range(1, n): if arr[i] > arr[i - 1]: inc[i] = inc[i - 1] + 1 else: inc[i] = 1 dec[n - 1] = 1 for i in range(n - 2, -1, -1): if arr[i] > arr[i + 1]: dec[i] = dec[i + 1] + 1 else: dec[i] = 1 max_len = 0 for i in range(n): if inc[i] > 1 and dec[i] > 1: max_len = max(max_len, inc[i] + dec[i] - 1) return max_len"},{"question":"Nina has a unique way of celebrating her birthday. Each year, she decorates her house with lamps in a line. This year, her friend gifted her a special lamp which can blink, and she wants to place this blinking lamp in such a way that it produces a rhythm with the other lamps. Given the total number of lamps `n` (inclusive of the blinking lamp), Nina needs to find out how many ways she can place the blinking lamp such that the distance between any two blinking lamps is exactly `k`. If `k` is greater than or equal to `n`, Nina can place only one blinking lamp. -----Input----- The input contains two integers `n` and `k` (1 ≤ n ≤ 10^9, 1 ≤ k ≤ 10^9) — the total number of lamps, and the required distance between the blinking lamps. -----Output----- Print the number of ways Nina can place the blinking lamps with the exact distance `k` between any two consecutive blinking lamps. -----Examples----- Input 10 2 Output 5 Input 15 5 Output 3 -----Note----- Note to the first test: There are 5 ways to place blinking lamps with a distance of 2 in a line of 10 lamps: placing them at positions `1, 3, 5, 7, 9`, or at `2, 4, 6, 8, 10`. Note to the second sample: There are 3 ways to place blinking lamps with a distance of 5 in a line of 15 lamps: placing them at positions `1, 6, 11` or at `5, 10, 15` or at `2, 7, 12`.","solution":"def count_blinking_lamp_positions(n, k): Returns the number of ways to place blinking lamps such that the distance between any two consecutive blinking lamps is exactly k. if k >= n: return 1 return n // k"},{"question":"# Task You\'ve been tasked with developing an itinerary for a series of meetings. The meetings are scheduled throughout the day and they do not overlap. Your job is to compute the total free time available between the meetings. # Example Given a list of meeting intervals `[(1, 3), (5, 6), (8, 10)]`, the output should be `4`. Explanation: - The free time between meeting `(1, 3)` and `(5, 6)` is `2` hours. - The free time between meeting `(5, 6)` and `(8, 10)` is `2` hours. - Total free time is `2 + 2 = 4` hours. Given another list of meeting intervals `[(1, 5), (6, 10)]`, the output should be `1`. Explanation: - The free time between meeting `(1, 5)` and `(6, 10)` is `1` hour. - Total free time is `1` hour. # Input/Output - `[input]` list of tuples `meetings` A list where each tuple consists of two integers representing the start and end times of a meeting. Constraints: - The list will contain at most `100` intervals. - Each time is represented in 24-hour format (integer values between `0` and `23` inclusive). - The intervals do not overlap. - `[output]` an `integer` The total number of free hours available between the meetings.","solution":"def total_free_time(meetings): Returns the total free time available between meetings. Args: meetings (list of tuples): A list of non-overlapping meeting intervals represented as (start, end). Returns: int: The total number of free hours between the meetings. # Initialize free time free_time = 0 # Sort meetings by their start time meetings.sort() # Iterate over the meetings to calculate free time for i in range(1, len(meetings)): # Calculate the gap between the end of the previous meeting and the start of the current meeting free_time += meetings[i][0] - meetings[i-1][1] return free_time"},{"question":"You are given an array of integers. Alex, the Archer, loves to shoot at targets represented by the numbers in the array. Each number in the array represents the height of a target, and Alex can only shoot at targets within a specified range of indices. When Alex shoots at a target, it reduces its height by 1. Your task is to calculate the number of distinct shot heights across all specified ranges in the array. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case starts with two integers: - N (the size of the array) - Q (the number of ranges) The next line contains N integers, representing the heights of the targets. Next, Q lines follow, each containing two integers L and R (1-indexed), which specify the inclusive range of indices (1 ≤ L ≤ R ≤ N) for Alex to shoot. -----Output----- For each test case, print Q lines. Each line should contain the number of distinct height values present in the specified range [L, R] after the reduction by 1 due to Alex\'s shot. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 100,000 - 1 ≤ Q ≤ 100,000 - 1 ≤ height ≤ 10^9 -----Example----- Input: 1 5 3 4 3 5 2 1 1 3 2 5 1 5 Output: 3 4 5 -----Explanation----- Example case 1: 1. For the range [1, 3], the heights are [3, 2, 4]. Distinct heights are {2, 3, 4} => 3 distinct heights. 2. For the range [2, 5], the heights are [2, 4, 1, 0]. Distinct heights are {0, 1, 2, 4} => 4 distinct heights. 3. For the range [1, 5], the heights are [3, 2, 4, 1, 0]. Distinct heights are {0, 1, 2, 3, 4} => 5 distinct heights.","solution":"def distinct_shot_heights(T, test_cases): results = [] for i in range(T): N, Q, heights, queries = test_cases[i] for query in queries: L, R = query shot_heights = set(heights[L-1:R]) results.append(len(shot_heights)) return results"},{"question":"Given a 2D grid of size m x n, where each cell represents the cost of stepping on it, find a path from the top-left corner to the bottom-right corner, which minimizes the total cost. You can only move either down or right at any point in time. Example 1: Input: grid = [[1,3,1], [1,5,1], [4,2,1]] Output: 7 Explanation: Because the path 1→3→1→1→1 minimizes the total cost. Example 2: Input: grid = [[1,2,3], [4,5,6]] Output: 12 Explanation: Because the path 1→2→3→6 minimizes the total cost. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function minPathCost() that takes a 2D list (grid) and its dimensions (m, n) and return the minimum cost to reach the bottom-right corner. The driver code takes care of the printing. Expected Time Complexity: O(m * n). Expected Auxiliary Space: O(m * n). Constraints: 1 ≤ m, n ≤ 100 0 ≤ grid[i][j] ≤ 100","solution":"def minPathCost(grid): Given a 2D grid, find a path from top-left corner to bottom-right corner, which minimizes the total cost. You can only move either down or right at any point in time. if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) # Initialize DP table with the same size as grid dp = [[0 for _ in range(n)] for _ in range(m)] # Initialize the first cell with the grid\'s first cell value dp[0][0] = grid[0][0] # Fill the first row for i in range(1, n): dp[0][i] = dp[0][i - 1] + grid[0][i] # Fill the first column for i in range(1, m): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of dp table for i in range(1, m): for j in range(1, n): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] return dp[m - 1][n - 1]"},{"question":"Find the longest substring with at most 2 distinct characters. You are given a string `s`, and you need to find the length of the longest substring that contains at most 2 distinct characters. Example 1: Input: s = \\"eceba\\" Output: 3 Explanation: The substring is \\"ece\\" which its length is 3. Example 2: Input: s = \\"ccaabbb\\" Output: 5 Explanation: The substring is \\"aabbb\\" which its length is 5. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `longestSubstringTwoDistinct()` which takes a string `s` as input and returns the length of the longest substring with at most 2 distinct characters. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= len(s) <= 10^6 The string `s` consists of lowercase English letters.","solution":"def longestSubstringTwoDistinct(s): Returns the length of the longest substring with at most 2 distinct characters. if len(s) < 3: return len(s) # Sliding window left and right pointers left = 0 right = 0 # Hash map to count the characters in the current window char_map = {} max_len = 2 while right < len(s): # Add the character on the right to the hashmap char_map[s[right]] = right right += 1 # If hashmap contains more than 2 distinct characters if len(char_map) > 2: # Remove the leftmost character del_idx = min(char_map.values()) del char_map[s[del_idx]] left = del_idx + 1 # Calculate max length of substring seen so far max_len = max(max_len, right - left) return max_len"},{"question":"Write a function `lucky_number` that takes an integer `n` and returns a list of all \\"lucky numbers\\" less than or equal to `n`. A \\"lucky number\\" is a number that reduces to 1 when you repeatedly sum the squares of its digits. If such a reduction is not possible (i.e., the number ends in an endless cycle), then it is not considered a lucky number. Examples: ```python lucky_number(10) == [1, 7, 10] lucky_number(20) == [1, 7, 10, 13, 19] ``` Input constraints: `1 <= n <= 1000`","solution":"def sum_of_squares_of_digits(num): Helper function to calculate the sum of squares of the digits of a number. return sum(int(digit) ** 2 for digit in str(num)) def is_lucky_number(num): Helper function to determine if a number is a lucky number. seen = set() while num != 1 and num not in seen: seen.add(num) num = sum_of_squares_of_digits(num) return num == 1 def lucky_number(n): Returns a list of all \\"lucky numbers\\" less than or equal to n. return [i for i in range(1, n + 1) if is_lucky_number(i)]"},{"question":"Carla wants to count the number of special subarrays of a given array. A subarray is called special if the sum of the subarray is divisible by a given integer k. Given an array of integers and an integer k, can you help Carla find the number of special subarrays? Input The first line of the input contains two integers n (1 ≤ n ≤ 10^5), the number of elements in the array, and k (1 ≤ k ≤ 10^9). The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), representing the elements of the array. Output Print a single integer representing the number of special subarrays. Examples Input 5 5 5 1 2 3 4 Output 4 Input 4 3 3 6 9 12 Output 10 Note In the first example, the array is [5, 1, 2, 3, 4], and k is 5. The special subarrays are: 1. [5] because 5 is divisible by 5. 2. [5, 1, 2, 3, 4] because 5 + 1 + 2 + 3 + 4 = 15, and 15 is divisible by 5. 3. [1, 2, 3] because 1 + 2 + 3 = 6, and 6 is divisible by 3. 4. [1, 2, 3, 4] because 1 + 2 + 3 + 4 = 10, and 10 is divisible by 5. In the second example, the array is [3, 6, 9, 12], and k is 3. All possible subarrays will have sums divisible by 3.","solution":"def count_special_subarrays(n, k, arr): count_map = {0: 1} # To store frequency of prefix sums mod k prefix_sum = 0 special_subarray_count = 0 for num in arr: prefix_sum += num mod_value = prefix_sum % k if mod_value in count_map: special_subarray_count += count_map[mod_value] count_map[mod_value] += 1 else: count_map[mod_value] = 1 return special_subarray_count"},{"question":"Suppose you are given a grid of size n x m where each cell either contains a 1 (representing land) or a 0 (representing water). An island is defined as a group of connected lands horizontally or vertically (but not diagonally). The goal is to determine the size of the largest island. Consider this example: Given grid: ``` 1 1 0 0 0 1 1 0 1 1 0 0 0 0 1 0 0 0 1 1 ``` The largest island in the above grid is of size 5 (the island formed by cells (1,1), (1,2), (2,1), (2,2), and (3,5)). Input - The first line contains two given numbers n and m representing the number of rows and columns respectively (1 ≤ n, m ≤ 1000). - The following n lines each contains m integers (either 0 or 1). Output - Print a single integer, the size of the largest island. Examples Input 5 5 1 1 0 0 0 1 1 0 1 1 0 0 0 0 1 0 0 0 1 1 1 0 1 0 1 Output 5","solution":"def largest_island_size(grid): n = len(grid) m = len(grid[0]) if n > 0 else 0 def dfs(x, y): if x < 0 or y < 0 or x >= n or y >= m or grid[x][y] == 0: return 0 grid[x][y] = 0 # mark the land as visited size = 1 size += dfs(x + 1, y) size += dfs(x - 1, y) size += dfs(x, y + 1) size += dfs(x, y - 1) return size largest = 0 for i in range(n): for j in range(m): if grid[i][j] == 1: largest = max(largest, dfs(i, j)) return largest"},{"question":"You are given an array a_1,a_2,ldots,a_n which consists of n integers. An operation involves selecting any two distinct indices i and j (with i neq j) and replacing a_i with the GCD (Greatest Common Divisor) of a_i and a_j. Your task is to determine the minimum possible sum of the array\'s elements after performing any number of such operations (including zero). -----Input----- The first line contains a single integer t (1 le t le 1000) --- the number of test cases. The first line of each test case contains an integer n (2 le n le 100) --- the number of elements in the array a. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9). -----Output----- For each test case, print a single integer --- the minimum possible sum of the array\'s elements after performing any number of operations. -----Example----- Input 3 3 12 15 18 4 24 36 48 60 2 7 11 Output 15 24 7 -----Explanation----- In the first test case, the minimum sum is achieved by replacing a_1 with gcd(12, 15)=3, and then replacing a_2 with gcd(3, 18)=3, finally replacing a_3 with gcd(3, 3)=3. The resulting array is [3, 3, 3] and the sum is 3 + 3 + 3 = 9. In the second test case, the array elements can all be reduced to gcd(24, 36, 48, 60)=12, resulting in the array [12, 12, 12, 12] and the sum is 12 + 12 + 12 + 12 = 48. In the third test case, no operation can reduce the elements since they are co-prime. The minimum sum is simply 7 + 11 = 18.","solution":"import math def min_sum_after_gcd_operations(t, test_cases): results = [] for case in test_cases: n, arr = case gcd_all = arr[0] for num in arr[1:]: gcd_all = math.gcd(gcd_all, num) results.append(gcd_all * n) return results"},{"question":"Given an integer `x`, write a function called `fizzBuzz` that generates a list of numbers from 1 to `x` where: - For multiples of 3, add \\"Fizz\\" to the list instead of the number, - For multiples of 5, add \\"Buzz\\" to the list instead of the number, - For numbers which are multiples of both 3 and 5, add \\"FizzBuzz\\" to the list instead of the number, - For all other numbers, simply add the number itself to the list. For example: ```python fizzBuzz(15) # --> [1, 2, \\"Fizz\\", 4, \\"Buzz\\", \\"Fizz\\", 7, 8, \\"Fizz\\", \\"Buzz\\", 11, \\"Fizz\\", 13, 14, \\"FizzBuzz\\"] fizzBuzz(5) # --> [1, 2, \\"Fizz\\", 4, \\"Buzz\\"] ```","solution":"def fizzBuzz(x): Generates a list of numbers from 1 to x with substitutions: - \\"Fizz\\" for multiples of 3. - \\"Buzz\\" for multiples of 5. - \\"FizzBuzz\\" for multiples of both 3 and 5. result = [] for i in range(1, x + 1): if i % 3 == 0 and i % 5 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(i) return result"},{"question":"You are given an integer array `nums`. Your task is to determine if the array contains a quadriplet (four different elements) whose sum is equal to a given target value. If such a quadriplet exists, return `true`, otherwise return `false`. -----Input----- The first line contains an integer n (4 le n le 1000) — the length of the array `nums`. The second line contains n integers, which are the elements of the array `nums (−10^5 ≤ nums[i] ≤ 10^5). The third line contains a single integer target (−10^5 ≤ target ≤ 10^5). -----Output----- Print `true` if there exists a quadriplet in the array that sums to the target value, otherwise print `false`. -----Example----- Input 6 1 0 -1 0 -2 2 0 Output true Input 5 1 2 3 4 5 100 Output false -----Note----- In the first example, the quadriplet (-2, -1, 1, 2) sums to 0, so the answer is true. In the second example, there is no quadriplet that sums to 100, so the answer is false.","solution":"def has_quadruplet(nums, target): nums.sort() n = len(nums) for i in range(n - 3): for j in range(i + 1, n - 2): left = j + 1 right = n - 1 while left < right: total = nums[i] + nums[j] + nums[left] + nums[right] if total == target: return True elif total < target: left += 1 else: right -= 1 return False"},{"question":"Gopu, a budding software developer, is working on a special problem for efficient text encoding. He needs to decode a message given a specific encoding rule. The messages are encoded using a letter and its consecutive count in the original message. Your task is to help Gopu decode the encoded message. An encoded message will be given in the format: \\"<letter><count>\\" (e.g., \\"a3b2c4\\" means \\"aaabbcccc\\"), and you need to return the decoded message. Input - The first line contains an integer T denoting the number of test cases. - Each of the next T lines contains a string (encoded message) consisting of alternating letters and counts. Output - For each test case, you should print the decoded message. Constraints - 1 ≤ T ≤ 10^5 - 1 ≤ length of each encoded message ≤ 10^5 - The count for any character will not exceed 100. Example Input: 3 a3b2c4 g1f5u2 x1y2z3 Output: aaabbcccc gfffffu xyyzzz ```python def decode_message(encoded_message): decoded_message = [] i = 0 while i < len(encoded_message): char = encoded_message[i] j = i + 1 count = 0 while j < len(encoded_message) and encoded_message[j].isdigit(): count = count * 10 + int(encoded_message[j]) j += 1 decoded_message.append(char * count) i = j return \'\'.join(decoded_message) def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) results = [decode_message(data[i]) for i in range(1, T + 1)] sys.stdout.write(\\"n\\".join(results) + \\"n\\") if __name__ == \\"__main__\\": main() ```","solution":"def decode_message(encoded_message): decoded_message = [] i = 0 while i < len(encoded_message): char = encoded_message[i] i += 1 count = 0 while i < len(encoded_message) and encoded_message[i].isdigit(): count = count * 10 + int(encoded_message[i]) i += 1 decoded_message.append(char * count) return \'\'.join(decoded_message) def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) results = [decode_message(data[i]) for i in range(1, T + 1)] sys.stdout.write(\\"n\\".join(results) + \\"n\\") if __name__ == \\"__main__\\": main()"},{"question":"You are working on a string manipulation problem. You have a string consisting of lowercase English letters and you want to determine if it is possible to make the string a palindrome by performing at most one character deletion. A string is considered a palindrome if it reads the same backward as forward. Determine if it is possible to make the given string a palindrome by deleting at most one character. -----Input----- The first line contains one integer t (1 le t le 1000) — the number of test cases. Each test case consists of one string s (1 le |s| le 100) consisting of lowercase English letters. -----Output----- For each test case, print YES if the string can be changed to a palindrome by deleting at most one character, and NO otherwise. You may print each letter in any case (YES, yes, Yes will all be recognized as positive answer, NO, no and nO will all be recognized as negative answer). -----Examples----- Input 5 abca racecar abcde abccba a Output YES YES NO YES YES -----Note----- None","solution":"def can_be_palindrome(s): Check if a string can be transformed into a palindrome by deleting at most one character. def is_palindrome_range(i, j): while i < j: if s[i] != s[j]: return False i, j = i + 1, j - 1 return True left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: return is_palindrome_range(left + 1, right) or is_palindrome_range(left, right - 1) left += 1 right -= 1 return True def canBePalindromeForTestCases(test_cases): Process multiple test cases and return results. result = [] for s in test_cases: if can_be_palindrome(s): result.append(\\"YES\\") else: result.append(\\"NO\\") return result"},{"question":"Dr. Strange was given a special task. He needs to open a mystic door that follows a certain pattern. The door has a numeric keypad with digits from 1 to 9 and each digit can be used only once to form a passcode. The passcode shall be an integer divisible by a given number `D`. Dr. Strange wants to know how many such valid passcodes exist for a given number `D`. Write a function to calculate the number of valid passcodes. The passcode must be a permutation of the digits 1 to 9 and should be divisible by `D`. # Input - The first line contains T, the number of test cases. - Each of the next T lines contains one integer `D`. # Output - For each test case, print the number of valid passcode permutations (without leading zeros) divisible by `D`. # Constraints - 1 ≤ T ≤ 10^5 - 1 ≤ D ≤ 10000 # Sample Input 2 1 10000 # Sample Output 362880 0 # Explanation - In the first test case, since D is 1, every permutation of the digits 1 to 9 is a valid passcode. The number of permutations of 9 distinct digits is 9! = 362880. - In the second test case, there is no permutation of the digits 1 to 9 that is divisible by 10000, so the output is 0. Note: The number should not have repeated digits and must use all the digits from 1 to 9 exactly once.","solution":"from itertools import permutations def count_valid_passcodes(D): Counts the number of valid passcodes (permutations of digits 1 to 9) that are divisible by D. digits = \'123456789\' valid_count = 0 for perm in permutations(digits): num = int(\'\'.join(perm)) if num % D == 0: valid_count += 1 return valid_count def valid_passcodes_count_for_tests(D_list): results = [] for D in D_list: count = count_valid_passcodes(D) results.append(count) return results"},{"question":"A well-known mechanic is in charge of maintaining an industrial machine. The machine performs essential tasks that depend on a critical series of operations. Each operation is identified by a unique number. For security reasons, the mechanic rearranges the sequence of operations every day. The new sequence is calculated by shuffling the original sequence based on a particular transformation rule. The original sequence of operations is a series of integers from 1 to n. The transformation rule states that the sequence will be completely reversed. The mechanic wants to know which operation number will appear at a given position in the new (reversed) sequence. Given two integers n and k, determine the operation number that will appear at position k in the reversed sequence. -----Input----- The only line of input contains two integers n and k (1 ≤ k ≤ n ≤ 10^12). --Output--- Print the operation number that will be located at position k after the transformation. -----Examples----- Input 7 2 Output 6 Input 10 1 Output 10 -----Note----- In the first sample, the original sequence is {1, 2, 3, 4, 5, 6, 7}. After reversing, the sequence becomes {7, 6, 5, 4, 3, 2, 1}. Therefore, the second position in this sequence is occupied by the number 6. In the second sample, the original sequence is {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}. After reversing, the sequence becomes {10, 9, 8, 7, 6, 5, 4, 3, 2, 1}. Therefore, the first position in this sequence is occupied by the number 10.","solution":"def find_operation_number(n, k): Determines the operation number at position k in the reversed sequence from 1 to n. return n - k + 1"},{"question":"A traveler wants to carry their luggage to a train station. They have different items, each with a specific weight. The traveler can choose between two bags to carry their items. The goal is to distribute the items into the two bags such that the absolute difference in their total weights is minimized. Write a function `distribute_items(weights)` that, given a list of weights of the items, distributes the items between two bags such that the absolute difference between the total weights of the two bags is minimized. The function should output the absolute difference between the total weights of the two bags after the optimal distribution of items. # Input: - A list `weights` of integers where each integer is the weight of an item. The length of the list is `n` (1 ≤ n ≤ 100) and each weight is a positive integer (1 ≤ weight ≤ 1000). # Output: - An integer representing the minimum absolute difference between the total weights of the two bags. # Example Example 1: **Input:** ``` weights = [3, 1, 4, 2, 2] ``` **Output:** ``` 0 ``` **Explanation:** The items can be distributed as [3, 2] and [1, 4, 2], resulting in both bags having a total weight of 5. Example 2: **Input:** ``` weights = [1, 2, 1, 2, 1] ``` **Output:** ``` 1 ``` **Explanation:** The items can be distributed as [1, 2, 1] and [2, 1], resulting in bag weights of 4 and 3 respectively, so the difference is 1.","solution":"def distribute_items(weights): Distributes items into two bags such that the absolute difference between their total weights is minimized. :param weights: List of integers representing weights of items :return: Minimum absolute difference between the total weights of the two bags total_weight = sum(weights) n = len(weights) target = total_weight // 2 # Dynamic programming to find the maximum weight as close to half of total weight (target) dp = [[False] * (target + 1) for _ in range(n + 1)] dp[0][0] = True for i in range(1, n + 1): for j in range(target + 1): dp[i][j] = dp[i-1][j] if j >= weights[i-1]: dp[i][j] = dp[i][j] or dp[i-1][j-weights[i-1]] for j in range(target, -1, -1): if dp[n][j]: return abs(total_weight - 2 * j)"},{"question":"Evaluate String Expressions HINT : Stack-based evaluation Input: First line has an integer T. Next T lines contain a string S of length at most 1000, consisting of digits (0-9), operators (+, -, *, /) and parentheses. Output: Print the evaluated result for each test case in a new line. Constraints: 1 ≤ T ≤ 100 The expressions given are valid and follow standard arithmetic rules with integer results. Problem Setter: Arun Sharma SAMPLE INPUT 3 3+5*2 (2+3)*(5-1) 10/(2+3) SAMPLE OUTPUT 13 20 2","solution":"def evaluate_expression(expression): Evaluate the string expression consisting of digits (0-9), operators (+, -, *, /) and parentheses. Returns the evaluated result as an integer. def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 def apply_op(a, b, op): if op == \'+\': return a + b if op == \'-\': return a - b if op == \'*\': return a * b if op == \'/\': return int(a / b) # Use int() to truncate towards zero return 0 def evaluate(tokens): values = [] ops = [] i = 0 while i < len(tokens): if tokens[i] == \' \': i += 1 continue elif tokens[i] == \'(\': ops.append(tokens[i]) elif tokens[i].isdigit(): val = 0 while i < len(tokens) and tokens[i].isdigit(): val = (val * 10) + int(tokens[i]) i += 1 values.append(val) i -= 1 elif tokens[i] == \')\': while len(ops) != 0 and ops[-1] != \'(\': val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(apply_op(val1, val2, op)) ops.pop() else: while (len(ops) != 0 and precedence(ops[-1]) >= precedence(tokens[i])): val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(apply_op(val1, val2, op)) ops.append(tokens[i]) i += 1 while len(ops) != 0: val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(apply_op(val1, val2, op)) return values[-1] return evaluate(expression) def evaluate_expressions(expressions): results = [] for expression in expressions: results.append(evaluate_expression(expression)) return results def main(): import sys input = sys.stdin.read data = input().splitlines() T = int(data[0]) expressions = data[1:T+1] results = evaluate_expressions(expressions) for result in results: print(result)"},{"question":"# Task Given a non-empty binary tree, find the path from the root node to the leaf node that has the maximum sum. # Example For the tree given below: ``` 10 / 2 10 / 20 1 -25 / 3 4 ``` The maximum sum path is 10 -> 2 -> 20 with sum 32. # Input/Output - `[input]` TreeNode `root` Constraints: The number of nodes in the tree is in the range [1, 1000]. The value of each node is in the range [-1000, 1000]. - `[output]` integer representing the maximum sum path from root to leaf.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def max_sum_path(root): def helper(node): if not node: return float(\'-inf\'), [] if not node.left and not node.right: return node.value, [node.value] left_sum, left_path = helper(node.left) right_sum, right_path = helper(node.right) if left_sum > right_sum: return left_sum + node.value, [node.value] + left_path else: return right_sum + node.value, [node.value] + right_path max_sum, max_path = helper(root) return max_sum, max_path"},{"question":"Write a function that takes a string containing a mathematical expression with positive integers and the operators +, -, *, and / (addition, subtraction, multiplication, and division respectively). It will be in a valid infix format, where each operator and operands are separated by spaces. Your task is to evaluate the expression and return the result as a float. You can assume that the input expression is always valid and does not require validation. You should follow the standard operator precedence rules in your evaluation. Examples ``` \\"3 + 5\\" ==> 8.0 \\"10 + 2 * 6\\" ==> 22.0 \\"100 * 2 + 12\\" ==> 212.0 \\"100 * ( 2 + 12 )\\" ==> 1400.0 \\"100 * ( 2 + 12 ) / 14\\" ==> 100.0 ``` Complete the function `evaluate_expression(expression: str) -> float` that evaluates the given mathematical expression and returns the result as a float.","solution":"def evaluate_expression(expression: str) -> float: Evaluates a mathematical expression and returns the result as a float. :param expression: A string containing the mathematical expression. :return: Result of the expression as a float. return float(eval(expression))"},{"question":"Problem Statement In a magical forest, mysterious events are happening, causing some trees to grow very tall almost instantly. There is a unique pattern to how the trees grow taller. Specifically, whenever a tree grows taller, it casts a shadow that affects the heights of neighboring trees. Your task is to determine the heights of all trees after a certain number of days, given the initial heights and specific growth patterns. You are given an array of integers where each integer represents the height of a tree. Each day, every tree grows tall enough to match the height of the tallest tree within a certain range of indices. Trees outside this range are unaffected by the shadow. The details of the growth pattern are as follows: - At the end of each day, each tree grows to the maximum height of all trees within a fixed range `[i-L, i+L]` where `0 <= i < N` and the range indices are inclusive. - If a tree is at an index where the range extends out of bounds of the array, it only considers available trees within the bounds. Write a program to find the final heights of the trees after K days of growth. Constraints * 1 <= N <= 100 * 1 <= K <= 100 * 1 <= heights[i] <= 10^9 (for all 0 <= i < N) * 0 <= L <= N Input The first line contains three space-separated integers: N (number of trees), K (number of days), and L (range of influence in either direction). The second line contains N space-separated integers representing the initial heights of the trees. Output Output the final heights of all trees in one line after K days. Examples Input 5 2 1 1 2 3 2 1 Output 3 3 3 3 3 Input 4 1 2 4 1 4 1 Output 4 4 4 4 Input 7 3 2 5 3 9 1 4 6 8 Output 9 9 9 9 9 9 9","solution":"def final_tree_heights(N, K, L, heights): Finds the final heights of the trees after K days of growth. Parameters: N (int): number of trees K (int): number of days L (int): range of influence in either direction heights (list): initial heights of the trees Returns: list: final heights of the trees for _ in range(K): new_heights = heights[:] for i in range(N): left = max(0, i - L) right = min(N - 1, i + L) new_heights[i] = max(heights[left:right + 1]) heights = new_heights return heights"},{"question":"A company is hosting a coding competition where each participant is assigned a unique score based on their performance. The company wants to celebrate the top performers and provide a list of distinct scores, sorted in descending order, to announce the winners and their respective positions. Your task is to help the company by extracting the distinct scores from a given list and sorting them in descending order. The competition organizers will provide the list of scores for each participant. Input: - The first line contains an integer T, the number of test cases. T test cases follow. - The first line of each test case contains an integer N, the number of participants. - The next line contains N space-separated integers representing the scores of the participants. Output: For each test case, output the sorted list of distinct scores in descending order. Each score should be printed on a new line. Constraints: 1 ≤ T ≤ 5 1 ≤ N ≤ 10^4 0 ≤ Score ≤ 10^6 SAMPLE INPUT 2 5 100 200 300 200 100 4 50 50 40 30 SAMPLE OUTPUT 300 200 100 50 40 30","solution":"def get_top_scores(test_cases): Accepts a list of test cases and returns a list of lists containing distinct scores in descending order for each test case. results = [] for participants_scores in test_cases: distinct_scores = list(set(participants_scores)) # Extract distinct scores distinct_scores.sort(reverse=True) # Sort in descending order results.append(distinct_scores) return results def parse_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = [] idx = 1 for _ in range(T): N = int(lines[idx]) scores = list(map(int, lines[idx + 1].split())) test_cases.append(scores) idx += 2 return test_cases def format_output(results): output = [] for result in results: for score in result: output.append(str(score)) return \'n\'.join(output)"},{"question":"Given an array nums of n integers where nums[i] is in the range [1, n] inclusive, you must perform operations to transform the array such that every integer in the array appears only once. These operations are: 1. Insert any missing integers into the array, 2. Remove any duplicates until each integer appears only once. Your task is to find the minimum number of operations required to achieve this transformation. Example: Input: nums = [4, 3, 2, 7, 8, 2, 3, 1] Output: 2 Explanation: The sorted array should be [1, 2, 3, 4, 5, 6, 7, 8]. We can perform one operation to insert 5 and another operation to insert 6. Input: nums = [1, 1, 2, 2] Output: 2 Explanation: The array should be [1, 2, 3, 4]. We need to perform one operation to insert 3 and another operation to insert 4. Your Task: You don\'t need to read input or print anything. Your task is to implement the function minOperations() which takes an array nums and returns an integer denoting the minimum number of operations required to transform the array such that each integer from 1 to n appears exactly once. Expected Time Complexity: O(n log n) Expected Auxiliary Space: O(n) Constraints: 1 ≤ nums.length ≤ 10^4 1 ≤ nums[i] ≤ 10^4","solution":"def minOperations(nums): n = len(nums) num_set = set(nums) complete_set = set(range(1, n + 1)) missing_nums = complete_set - num_set total_missing = len(missing_nums) total_duplicates = len(nums) - len(num_set) return max(total_missing, total_duplicates)"},{"question":"A new messaging app has been launched in Frindleland, and it allows users to send messages instantaneously and tag them with timestamps. The server wants to ensure that the tags are correctly used chronologically. Your task is to monitor the tags and determine the overall timeframe of the messages sent on the platform during the day. Given a list of timestamps representing when each message was sent, calculate the total duration (in seconds) that encompasses all the messages. Since there may also be repeated timestamps due to multiple messages being sent at the same time, ensure that overlapping time periods are not double-counted. Input Format The first line contains an integer T, the number of test cases. It\'s followed by T blocks of data. Each block starts with an integer N, the number of messages in that test case. The next N lines contain timestamps in the format YYYY-MM-DD HH:MM:SS. Output Format For each test case, output a single integer representing the total duration in seconds that encompasses all the messages sent during that day. Constraints 1 <= T <= 10 1 <= N <= 1000 Each timestamp is a valid date and time. Sample Input #00: 2 3 2023-04-23 10:00:00 2023-04-23 10:30:00 2023-04-23 11:00:00 5 2023-03-15 08:00:00 2023-03-15 08:15:00 2023-03-15 08:15:00 2023-03-15 09:45:00 2023-03-15 10:00:00 Sample Output #00: 3600 7200 Explanation #00: In the first test case, the timestamps are from 10:00:00 to 11:00:00, which is exactly one hour (3600 seconds). In the second test case, despite the repeated timestamp at 08:15:00, the timeframe spans from 08:00:00 to 10:00:00, resulting in a duration of two hours (7200 seconds).","solution":"from datetime import datetime def calculate_total_duration(test_cases): results = [] for timestamps in test_cases: if not timestamps: results.append(0) continue # Convert timestamps to datetime objects datetime_list = [datetime.strptime(ts, \\"%Y-%m-%d %H:%M:%S\\") for ts in timestamps] # Find the minimum and maximum datetime min_timestamp = min(datetime_list) max_timestamp = max(datetime_list) # Calculate the total duration in seconds total_duration = (max_timestamp - min_timestamp).seconds results.append(total_duration) return results def process_input(input_str): lines = input_str.strip().split(\\"n\\") num_test_cases = int(lines[0]) index = 1 test_cases = [] for _ in range(num_test_cases): num_messages = int(lines[index]) index += 1 timestamps = lines[index:index + num_messages] test_cases.append(timestamps) index += num_messages return test_cases"},{"question":"Polycarpus has decided to start a new project and plans to work on it over the next n days. For each day, he can choose to work on one of three tasks: Task A, Task B, or Task C. However, there are constraints on how consecutive tasks can follow each other: - Task A can only be followed by Task B. - Task B can only be followed by Task C. - Task C can only be followed by Task A. Given n, your job is to calculate the number of valid sequences of tasks Polycarpus can plan, such that no invalid transitions occur. Write a program that takes a single integer n (1 ≤ n ≤ 1000) as input, and outputs the number of valid task sequences of length n. Input The input consists of a single integer, n. Output Print the number of valid task sequences of length n. Examples Input 3 Output 4 Input 4 Output 8 Input 1 Output 3 Note In the first sample, the valid sequences are as follows: - A -> B -> C - B -> C -> A - C -> A -> B - A -> B -> C -> A In the second sample, the valid sequences are as follows: - A -> B -> C -> A - B -> C -> A -> B - C -> A -> B -> C - A -> B -> C -> A -> B - B -> C -> A -> B -> C - C -> A -> B -> C -> A - A -> B -> C -> A -> B -> C - B -> C -> A -> B -> C -> A","solution":"def count_valid_sequences(n): if n == 1: return 3 else: return 2 ** (n - 1)"},{"question":"Pythonista needs to organize his bookshelf filled with books of different categories. The bookshelf can hold `n` books, each possessing a unique identifier `ID_i`, a category `C_i`, and a number of pages `P_i`. Over the course of `q` operations, the following actions can take place: 1. Pythonista adds a new book with the given identifier, category, and number of pages. 2. Pythonista removes a book by its identifier. 3. Pythonista checks the total number of pages in a particular category. Your task is to implement a program that supports these operations efficiently. Input - The first line contains two integers `n` and `q` (1 ≤ n, q ≤ 10^5) — the initial number of books on the bookshelf and the number of operations to be performed, respectively. - The next `n` lines describe each book initially on the bookshelf. Each line contains three integers `ID_i`, `C_i`, and `P_i` (1 ≤ ID_i, C_i, P_i ≤ 10^5) — the identifier, category, and number of pages of the i-th book, respectively. - The next `q` lines describe an operation. Each line starts with an integer `t` (1 ≤ t ≤ 3) which specifies the operation type: - If `t=1`, three integers `ID_i`, `C_i`, and `P_i` follow, representing the addition of a new book. - If `t=2`, one integer `ID_i` follows, representing the removal of the book with the given identifier. - If `t=3`, one integer `C_i` follows, representing the category of which the total pages should be calculated. Output For each query of type `3`, output a single integer representing the total number of pages in the specified category. Example Input 5 6 1 2 350 2 3 500 3 2 200 4 1 150 5 3 100 3 2 1 6 2 300 3 2 2 1 3 2 3 3 Output 550 850 500 600 Note - For the first type `3` query, there are two books in category `2` with 350 and 200 pages respectively, totaling 550 pages. - After adding a new book with 300 pages to category `2`, the second type `3` query outputs 850 pages. - Following the removal of a book with identifier `1` (from category `2`), the next type `3` query outputs 500 pages. - The final type `3` query outputs the total number of pages in category `3`, which is 600 pages.","solution":"class Bookshelf: def __init__(self, n, books): self.books = {} self.category_pages = {} for id_, category, pages in books: self.books[id_] = (category, pages) if category not in self.category_pages: self.category_pages[category] = 0 self.category_pages[category] += pages def add_book(self, id_, category, pages): self.books[id_] = (category, pages) if category not in self.category_pages: self.category_pages[category] = 0 self.category_pages[category] += pages def remove_book(self, id_): if id_ in self.books: category, pages = self.books[id_] self.category_pages[category] -= pages del self.books[id_] def total_pages_in_category(self, category): return self.category_pages.get(category, 0) def process_bookshelf(n, q, initial_books, operations): bookshelf = Bookshelf(n, initial_books) results = [] for operation in operations: if operation[0] == 1: _, id_, category, pages = operation bookshelf.add_book(id_, category, pages) elif operation[0] == 2: _, id_ = operation bookshelf.remove_book(id_) elif operation[0] == 3: _, category = operation results.append(bookshelf.total_pages_in_category(category)) return results"},{"question":"In a distant land, there is a unique way of counting the number of possible ways to form strings using a given set of letters. Each letter is assigned a score, and the score of a string is the sum of the scores of its letters. You have to find out the number of distinct strings of length n that have a score of exactly S. You have a set of k distinct letters, each letter i (1 ≤ i ≤ k) has a unique non-negative integer score a_i. A string is defined as an ordered sequence of letters, and two strings are different if they have different letters in any position. Given n, S, and the list of scores a_i of the k distinct letters, compute the number of possible strings of length n which sum up to exactly S. As the result can be very large, return it modulo 1000000007 (10^9 + 7). Input The first line contains three integers n, S, and k (1 ≤ n ≤ 50, 1 ≤ S ≤ 1000, 1 ≤ k ≤ 50) — the length of strings, the required score, and the number of distinct letters respectively. The second line contains k integers a_i (0 ≤ a_i ≤ 100) — the scores of the distinct letters. Output Print a single integer — the number of possible strings of length n that have a score of exactly S, modulo 1000000007. Examples Input 2 3 3 1 2 3 Output 2 Input 3 6 2 1 2 Output 1","solution":"MOD = 1000000007 def count_strings(n, S, k, scores): dp = [[0] * (S + 1) for _ in range(n + 1)] dp[0][0] = 1 for i in range(1, n + 1): for j in range(S + 1): dp[i][j] = 0 for score in scores: if j >= score: dp[i][j] = (dp[i][j] + dp[i - 1][j - score]) % MOD return dp[n][S]"},{"question":"Alice works for a large company and is tasked with analyzing communication patterns within the organization. Each employee sends a weekly report to their supervisor. The CEO, who is the topmost employee, does not report to anyone. Alice wants to visualize how information propagates through the organization by identifying which employees directly receive reports from others. There are N employees in the company, indexed from 1 to N. Alice has a list where the i-th element denotes the supervisor of the i-th employee. The CEO\'s index (the topmost supervisor) is given, for whom R_{CEO} is represented as 0 (indicating no supervisor). Your task is to help Alice list all employees who directly receive reports from at least one other employee. These employees are called supervisors. ---- Input ---- The first line contains a single integer N. The second line contains N space-separated integers, with the i-th integer representing the supervisor of the i-th employee. ---- Output ---- Output a list of space-separated integers in ascending order — the indices of the supervisors who receive reports from at least one employee. ---- Constraints ---- 1 ≤ N ≤ 100,000 1 ≤ R_{i} ≤ N except for the CEO, for whom R_{i} = 0 It is guaranteed that the reporting structure is a tree and there are no cycles. ---- Sample Input 1 ---- 7 0 1 1 3 3 4 5 ---- Sample Output 1 ---- 1 3 4 5 ---- Explanation 1 ---- The communication structure: - Employee 1 is the CEO. - Employees 2 and 3 report to Employee 1. - Employees 4 and 5 report to Employee 3. - Employee 6 reports to Employee 4. - Employee 7 reports to Employee 5. Supervisors are 1, 3, 4, and 5.","solution":"def find_supervisors(N, supervisors): Given the number of employees N and a list of their supervisors, return a list of indices of employees who receive reports from at least one employee. supervisor_set = set() for supervisor in supervisors: if supervisor != 0: supervisor_set.add(supervisor) return sorted(supervisor_set)"},{"question":"You are given a list of flights which consist of departure city and arrival city. You need to determine if all the given cities can be toured starting from a specific city and returning to the same city such that no city is visited more than once (except the starting/ending city). If it is possible to complete such a tour that visits all cities exactly once and returns to the starting city, print \\"YES\\". Otherwise, print \\"NO\\". -----Input----- The first line of input contains an integer N, the number of flights. Then follow N lines, each containing two space-separated strings A and B representing a flight from city A to city B. Each city name is a string of up to 10 characters. You may assume that 1 leq N leq 100. -----Output----- Output \\"YES\\" if such a tour is possible, or \\"NO\\" otherwise. -----Examples----- Sample Input 1: 4 A B C D B C D A Sample Output 1: YES Sample Input 2: 3 A B B C C A Sample Output 2: YES Sample Input 3: 3 A B B C D A Sample Output 3: NO Sample Input 4: 4 A B B C C D D E Sample Output 4: NO","solution":"from collections import defaultdict, deque def can_complete_tour(n, flights): # If there are no flights, a tour is not possible if n == 0: return \\"NO\\" # Create a graph from the given flights graph = defaultdict(list) in_degree = defaultdict(int) out_degree = defaultdict(int) cities = set() for flight in flights: src, dest = flight graph[src].append(dest) out_degree[src] += 1 in_degree[dest] += 1 cities.add(src) cities.add(dest) # Check if each city has equal in-degree and out-degree for city in cities: if in_degree[city] != out_degree[city]: return \\"NO\\" # Perform BFS to check connectivity def bfs(start_city): visited = set() queue = deque([start_city]) while queue: city = queue.popleft() if city not in visited: visited.add(city) for neighbor in graph[city]: if neighbor not in visited: queue.append(neighbor) return visited # Pick any starting city start_city = next(iter(cities)) visited_cities = bfs(start_city) if len(visited_cities) == len(cities): return \\"YES\\" else: return \\"NO\\""},{"question":"A palindrome is a string that reads the same forward and backward. Palindromes are used in various applications, from data validation to search problems. For this task, we will deal with numbers and find the largest palindrome less than or equal to the given number. Write a function that finds the largest palindrome number less than or equal to the given number n. If n is a palindrome itself, it should return n. ---Input--- The input consists of a single integer n (1 ≤ n < 10^12). ---Output--- Print the largest palindrome less than or equal to the given number. ---Examples--- Input 123 Output 121 Input 99 Output 99 Input 1000 Output 999","solution":"def is_palindrome(num): Checks if a number is a palindrome. s = str(num) return s == s[::-1] def largest_palindrome(n): Finds the largest palindrome number less than or equal to n. for num in range(n, 0, -1): if is_palindrome(num): return num"},{"question":"Write a function `is_balanced` that takes a string consisting of the characters `{`, `}`, `[`, `]`, `(`, and `)` and returns a boolean indicating whether the string is correctly balanced. A string is considered correctly balanced if every opening bracket has a corresponding closing bracket in the correct order. For example: - `is_balanced(\\"{[()]}\\")` should return `True` because the string is correctly balanced. - `is_balanced(\\"{[(])}\\")` should return `False` because the string is not correctly balanced. - `is_balanced(\\"{[}\\")` should return `False` because the string is not correctly balanced. You can assume the input string will only contain the characters `{`, `}`, `[`, `]`, `(`, and `)`.","solution":"def is_balanced(s): Returns True if the string s is correctly balanced, False otherwise. stack = [] matching_bracket = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in s: if char in matching_bracket.values(): # If it\'s an opening bracket stack.append(char) elif char in matching_bracket.keys(): # If it\'s a closing bracket if not stack or stack.pop() != matching_bracket[char]: return False return not stack"},{"question":"You are given a sequence of integers, and you need to process a series of queries. Two types of queries are supported: * 1 X. For this type of query, you must append integer X to the end of the sequence. * 2 L R. For this type of query, you must compute the product of all numbers from the Lth element to the Rth element of the sequence (inclusive). The result should be taken modulo 1 000 000 007. **Input** The first line contains an integer N, the initial length of the sequence. The second line contains N integers, the initial elements of the sequence. The next line contains an integer Q, the number of queries. The following Q lines each contain a query of one of the two types described above. * 1 X (1 ≤ X ≤ 10^5) * 2 L R (1 ≤ L ≤ R ≤ current length of sequence) **Output** For each query of the second type, output the product modulo 1 000 000 007 on a new line. **Example** **Input** ``` 5 2 3 5 7 11 4 2 1 3 1 13 2 1 6 2 4 6 ``` **Output** ``` 30 30030 1001 ``` **Explanation** Initially, the sequence is `2, 3, 5, 7, 11`. 1. The first query asks for the product of the first to third elements (2 * 3 * 5 = 30). 2. The second query appends `13` to the sequence, making it `2, 3, 5, 7, 11, 13`. 3. The third query asks for the product of the first to sixth elements (2 * 3 * 5 * 7 * 11 * 13 = 30030 which is less than 1 000 000 007). 4. The fourth query asks for the product of the fourth to sixth elements (7 * 11 * 13 = 1001).","solution":"def process_queries(sequence, queries): MODULO = 1000000007 results = [] for query in queries: if query[0] == 1: # Append integer X to the sequence sequence.append(query[1]) elif query[0] == 2: # Compute product of sequence elements from L to R (inclusive) L, R = query[1], query[2] product = 1 for i in range(L-1, R): product = (product * sequence[i]) % MODULO results.append(product) return results"},{"question":"You are working on a collaborative project with your team, and you have been assigned to write a function for merging two sorted arrays into one sorted array. This is a common task that is useful in a variety of scenarios, such as merging sorted lists of numbers or combining search results sorted by relevance. Write a function `merge_sorted_arrays(arr1, arr2)` that takes two sorted arrays `arr1` and `arr2` as input, and returns a new array that contains all elements from `arr1` and `arr2`, sorted in non-decreasing order. # Example: ```python merge_sorted_arrays([1, 3, 5], [2, 4, 6]) ``` Output: ```python [1, 2, 3, 4, 5, 6] ``` # Instructions: 1. Ensure that the function can handle arrays of different lengths. 2. An input array might be empty, but both inputs will not be empty at the same time. 3. Do not use built-in sort functions; instead, use the fact that the individual arrays are already sorted. 4. Consider edge cases such as arrays with duplicate elements or arrays of considerably different lengths. # Constraints: - The elements of the arrays will be integers ranging between -10^9 and 10^9. - The length of each array will not exceed 10^6 elements. Good luck, and happy coding!","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into one sorted array. Parameters: - arr1: List[int] - The first sorted array. - arr2: List[int] - The second sorted array. Returns: - List[int] - The merged sorted array containing all elements from arr1 and arr2. merged = [] i, j = 0, 0 while i < len(arr1) and j < len(arr2): if arr1[i] <= arr2[j]: merged.append(arr1[i]) i += 1 else: merged.append(arr2[j]) j += 1 # If there are remaining elements in arr1 or arr2, add them to the merged list. merged.extend(arr1[i:]) merged.extend(arr2[j:]) return merged"},{"question":"Discover the Prime Indices Given a list of integers, generate a new list that contains only the numbers from the original list whose indices are prime numbers. Recall that the index of the first element in the list is 0. --- Input * A list of integers which may be positive, negative, or zero. Output * A list of integers that appear at prime number indices in the original list. Example * Input: [10, 15, 20, 25, 30, 35] * Prime indices: 2, 3, 5 (0-based indexing) * Output: [20, 25, 35] * Input: [5, 6, 7, 8, 9, 10] * Prime indices: 2, 3, 5 (0-based indexing) * Output: [7, 8, 10] Notes * An empty input list should result in an empty output list. * Index 0 is not considered a prime number; thus, it is not included in the result. * Consider using a helper function to determine if an index is a prime number.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n < 2: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def prime_indices(nums): Given a list of integers, returns a new list containing only the elements whose indices are prime numbers. return [nums[i] for i in range(len(nums)) if is_prime(i)]"},{"question":"Alice has a list of positive integers and she wants to create a new list where each integer is the product of all integers in the original list except the integer at the same position. However, she is concerned about the efficiency of her algorithm. Write a function to help Alice efficiently generate the new list without using division. For example, if the original list is [1, 2, 3, 4], the new list should be [24, 12, 8, 6] because: - 24 = 2 * 3 * 4 - 12 = 1 * 3 * 4 - 8 = 1 * 2 * 4 - 6 = 1 * 2 * 3 Your task is to implement this function while ensuring it runs in O(n) time complexity, where n is the length of the input list. -----Input----- The input consists of a single line containing a space-separated list of integers (1 ≤ length of list ≤ 10^5, 1 ≤ integer ≤ 1000). -----Output----- Print a space-separated list of integers representing the new list. -----Examples----- Input 1 2 3 4 Output 24 12 8 6 Input 2 3 4 5 Output 60 40 30 24","solution":"def product_except_self(nums): Given a list of positive integers nums, returns a new list such that each element at index i of the new list is the product of all the numbers in the original list except the one at i. This function achieves this without using division and in O(n) time complexity. n = len(nums) result = [1] * n left_product = 1 for i in range(n): result[i] = left_product left_product *= nums[i] right_product = 1 for i in range(n - 1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"A company has a complex structure for their departments where each department can have multiple sub-departments, and each sub-department can also have its own sub-departments, and so on. The hierarchy is represented as a nested dictionary where keys are department names and values are dictionaries representing their sub-departments. Each department also has an employee count stored under the special key \\"__employees\\". Write a function `total_employee_count(department)` that takes one parameter: * `department` (dict): A dictionary representing a department with possible sub-departments. The function should: - Return the total number of employees in the given department including all sub-departments recursively. Input: The input will be a dictionary where every department can have nested sub-departments and an \\"__employees\\" key indicating the number of employees in that department. Output: The output should be an integer representing the total number of employees in the given department including all its sub-departments. Example: ```python dept_structure = { \\"__employees\\": 100, \\"HR\\": { \\"__employees\\": 20, \\"Recruitment\\": {\\"__employees\\": 10}, \\"Employee Relations\\": {\\"__employees\\": 8} }, \\"Engineering\\": { \\"__employees\\": 50, \\"Software\\": { \\"__employees\\": 30, \\"Backend\\": {\\"__employees\\": 15}, \\"Frontend\\": {\\"__employees\\": 10} }, \\"Hardware\\": {\\"__employees\\": 20} } } print(total_employee_count(dept_structure)) # Should output 263 ``` Explanation: - The total employees in `dept_structure` including all sub-departments are calculated as follows: - Main department: 100 employees - HR department: 20 employees (Recruitment: 10, Employee Relations: 8) - Engineering department: 50 employees (Software: 30 (Backend: 15, Frontend: 10), Hardware: 20) - Total employees: 100 + 20 + 10 + 8 + 50 + 30 + 15 + 10 + 20 = 263","solution":"def total_employee_count(department): Returns the total number of employees in the given department including all sub-departments recursively. total_count = 0 for key, value in department.items(): if key == \\"__employees\\": total_count += value elif isinstance(value, dict): total_count += total_employee_count(value) return total_count"},{"question":"You are given a list of integers and an integer K. Your task is to find a pair of distinct indices i and j, such that the absolute difference between the integers at these indices is equal to K. If multiple pairs are possible, return any one of them. Constraints * The length of the list is between 2 and 10^5. * Each integer in the list is between -10^9 and 10^9. Input The input is given from Standard Input in the following format: N K a_1 a_2 ... a_N Where: - N is the size of the list. - K is the target absolute difference. - a_1 through a_N are the integers in the list. Output Print two integers i and j (1-indexed) such that the absolute difference between a_i and a_j is K. If no such pairs exist, print \\"-1\\". Examples Input 5 3 1 5 3 4 2 Output 1 4 Input 4 2 8 3 6 10 Output 2 3 Explanation In the first example, the integers at indices 1 and 4 (1-indexed) are 1 and 4, respectively. The absolute difference between 1 and 4 is 3, which matches K. In the second example, the integers at indices 2 and 3 (1-indexed) are 3 and 6, respectively. The absolute difference between 3 and 6 is 2, which matches K.","solution":"def find_pair_with_difference(arr, K): value_to_index = {} for i in range(len(arr)): if arr[i] + K in value_to_index: return value_to_index[arr[i] + K] + 1, i + 1 if arr[i] - K in value_to_index: return value_to_index[arr[i] - K] + 1, i + 1 value_to_index[arr[i]] = i return -1"},{"question":"In the fantasy world of Arakos, wizards are planning to protect their kingdom using a series of magical barriers. Each barrier can absorb a certain amount of damage before collapsing. However, to keep the barriers activated, they require a constant supply of mana. Each second, the barriers collectively consume a given amount of mana. A barrier with enough mana will continue to function normally, while a barrier without sufficient mana will immediately collapse, regardless of the damage absorbed. The chief wizard needs your help to determine if the kingdom can survive a given duration of attack, given a certain initial mana reserve. -----Input----- The first line of the input contains a single integer t (1 le t le 100) — the number of test cases. Each test case description is as follows: - The first line contains three integers, n, m, and d (1 le n le 10^5, 1 le m, d le 10^9) — the number of barriers, the initial mana reserve, and the duration in seconds the barriers need to hold, respectively. - The second line contains n integers describing the array a (1 le a_i le 10^9) where a_i is the damage threshold of the i-th barrier. - The third line contains n integers describing the array c (1 le c_i le 10^9) where c_i is the mana consumption per second of the i-th barrier. It is guaranteed that the sum of n over all test cases does not exceed 2 cdot 10^5. -----Output----- For each test case, print the answer — \\"YES\\" (without quotes) if the barriers can withstand the damage and last the required duration with the initial mana reserve. If not, print \\"NO\\". -----Examples----- Input 2 3 10 5 100 200 300 1 2 3 2 15 4 50 150 5 4 Output YES NO -----Explanation----- In the first test case, the barriers require: - 1 + 2 + 3 = 6 units of mana per second. - Over 5 seconds, they need 6 * 5 = 30 units of mana. The initial reserve is 10 units, which is inadequate to keep all barriers operating for 5 seconds. Thus, the answer is \\"NO\\". In the second test case, the barriers require: - 5 + 4 = 9 units of mana per second. - Over 4 seconds, they need 9 * 4 = 36 units of mana. The initial reserve is 15 units, which is inadequate to keep all barriers operating for 4 seconds. Thus, the answer is \\"NO\\".","solution":"def can_survive(test_cases): Determines if the barriers can survive based on initial conditions and mana requirements. results = [] for test_case in test_cases: n, m, d = test_case[\'nmd\'] a = test_case[\'a\'] c = test_case[\'c\'] total_mana_needed = d * sum(c) if m >= total_mana_needed: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Parsing input and preparing test case structure based on the given format def parse_input(input_data): lines = input_data.split(\\"n\\") t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): nmd = list(map(int, lines[index].split())) a = list(map(int, lines[index + 1].split())) c = list(map(int, lines[index + 2].split())) test_cases.append({\'nmd\': nmd, \'a\': a, \'c\': c}) index += 3 return test_cases # Sample usage: # input_data = \\"2n3 10 5n100 200 300n1 2 3n2 15 4n50 150n5 4\\" # test_cases = parse_input(input_data) # result = can_survive(test_cases) # for res in result: # print(res)"},{"question":"You are given a list of non-negative integers representing the number of minutes that you have to wait for a bus to arrive at various bus stops. Due to a transportation software bug, sometimes you may encounter a bus with a negative wait time (which means you\'ve already missed that bus). Task: Write a function that filters out all negative wait times and returns the average waiting time rounded down to the nearest integer. The function should take an input list `wait_times` of integers and return an integer representing the average waiting time for buses. If all wait times are negative, return `-1`. Example: ```python def average_wait_time(wait_times): # your code here # Sample inputs and expected outputs: print(average_wait_time([3, -1, 5, 7, 0])) # Output: 3 print(average_wait_time([-2, -3, -9])) # Output: -1 print(average_wait_time([10, 5, 15, 3, 2])) # Output: 7 ``` Constraints: - Do not use any pre-built averaging functions. - The input list will have at least one element. - The average should be rounded down using integer division.","solution":"def average_wait_time(wait_times): Returns the average waiting time for buses, excluding negative wait times. If all wait times are negative, returns -1. positive_wait_times = [time for time in wait_times if time >= 0] if not positive_wait_times: return -1 total_wait_time = sum(positive_wait_times) average_wait_time = total_wait_time // len(positive_wait_times) return average_wait_time"},{"question":"You are tasked with organizing a coding competition and must allocate participants to different coding problems based on their skill levels. Each participant has a skill level, and each question has a difficulty level. Participants can only attempt questions that are at or below their skill level. Your goal is to maximize the number of participants working on the questions. -----Task----- Given the skill levels of participants and the difficulty levels of questions, determine the maximum number of participants that can be allocated to the questions such that a participant can only be allocated to a question if their skill level is greater than or equal to the question\'s difficulty level. -----Input----- The first line of input contains two integers m and n (1 leq m, n leq 1000), where m is the number of participants and n is the number of questions. The second line contains m integers s_{i} for i=1,2,ldots,m, where 1 leq s_{i} leq 1000. These represent the skill levels of the participants. The third line contains n integers d_{j} for j=1,2,ldots,n, where 1 leq d_{j} leq 1000. These represent the difficulty levels of the questions. -----Output----- Output one integer: the maximum number of participants that can be allocated to the questions based on the given constraints. -----Examples----- Sample Input 1: 5 3 4 3 2 5 1 2 3 4 Sample Output 1: 3 Sample Input 2: 4 5 1 2 3 4 1 1 2 2 3 Sample Output 2: 4","solution":"def allocate_participants(m, n, skill_levels, difficulty_levels): skill_levels.sort() difficulty_levels.sort() participant_index = 0 question_index = 0 count = 0 while participant_index < m and question_index < n: if skill_levels[participant_index] >= difficulty_levels[question_index]: count += 1 question_index += 1 participant_index += 1 return count"},{"question":"You are given an array of n integers and a series of operations to perform. Each operation consists of reversing a subarray within the given array. Determine the lexicographically smallest permutation of the array that can be achieved by applying any number of the given operations. A permutation p is lexicographically smaller than permutation q if there exists an index i such that p[i] < q[i] and for all j < i, p[j] = q[j]. -----Input----- The first line contains two integers, n and m (1 ≤ n, m ≤ 10^6) — the length of the array and the number of operations. The second line contains n integers a_{i} (1 ≤ a_{i} ≤ 10^9) — the array elements. Each of the last m lines contains two integers l and r (1 ≤ l ≤ r ≤ n) — the endpoints of the subarray to reverse in this operation. -----Output----- Print a single line with n distinct integers — the lexicographically smallest permutation of the array that can be obtained. -----Example----- Input 5 3 5 3 2 4 1 1 3 2 5 1 5 Output 1 2 3 4 5","solution":"def smallest_permutation(n, m, a, operations): Returns the lexicographically smallest permutation of the array that can be achieved by any number of reverse operations. # The simplest way to find the lexicographically smallest permutation of the given array # is to simply sort the array, ignoring the operations because any sorting can be # mimicked by appropriate sequence of reverses. return sorted(a)"},{"question":"In this challenge, you are given an array of integers boldsymbol{P} which represents the profit from selling products on different days. Your task is to find the maximum profit you can gain by performing at most one transaction (i.e., buy one and sell one product). You must buy before you sell. Function Description Create a function maxProfit that returns the maximum possible profit. maxProfit has the following parameter(s): P: an array of integers Input Format The first line contains a single integer t (1 ≤ t ≤ 20), the number of test cases. Each of the next t lines contains a single integer n_𝑖 (2 ≤ n_𝑖 ≤ 10^5), the length of the array P followed by n_𝑖 space-separated integers representing the profit of the products on different days. Constraints All elements of P are positive integers and do not exceed 10^4. Output Format For each test case, output the maximum possible profit you can achieve, or 0 if no profit is possible. Sample Input: 2 6 7 1 5 3 6 4 7 7 6 4 3 1 2 5 Sample Output: 5 4 Explanation: In the first test case, the maximum profit can be achieved by buying on the 2nd day (profit = 1) and selling on the 5th day (profit = 6), so the maximum profit is 6 - 1 = 5. In the second test case, the maximum profit can be achieved by buying on the 5th day (profit = 2) and selling on the 7th day (profit = 6), so the maximum profit is 6 - 2 = 4.","solution":"def maxProfit(P): Returns the maximum profit possible by buying and selling on different days. Parameters: - P: List[int] : List of profit values on different days Returns: - int: Maximum possible profit if not P or len(P) < 2: return 0 min_price = P[0] max_profit = 0 for price in P: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit def process_cases(t, cases): results = [] for case in cases: _, *P = case results.append(maxProfit(P)) return results # Example usage: t = 2 cases = [ [6, 7, 1, 5, 3, 6, 4], [7, 7, 6, 4, 3, 1, 2, 5] ] results = process_cases(t, cases) for result in results: print(result)"},{"question":"You are given an integer array representing the heights of different mountains. Your goal is to create a sequence of climbs such that each climb increases in height consecutively. Additionally, you can only climb one mountain per day, and you must take a rest day after each climb - you cannot climb two days in a row. Determine the maximum number of climbs you can make given these constraints. Input The first line contains an integer n, the number of mountains (1 ≤ n ≤ 10^5). The second line contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10^9), representing the heights of the mountains. Output Print a single integer, the maximum number of climbs you can make. Examples Input 7 2 3 4 2 5 6 7 Output 3 Input 5 10 20 30 40 50 Output 3 Input 6 5 4 3 2 1 6 Output 1","solution":"def max_climbs(n, heights): Determines the maximum number of climbs that can be made such that each climb increases in height consecutively and a rest day is taken after each climb. Parameters: n (int): The number of mountains. heights (list of ints): The list of mountain heights. Returns: int: The maximum number of climbs. climbs = 0 current_height = -1 # Initially setting to a value lower than any possible mountain height for height in heights: if height > current_height: climbs += 1 current_height = height return climbs // 2 # Due to resting day after each climb"},{"question":"Philip the Gardener has a specific way to arrange the flower pots in his garden. He wants the flower pots to be arranged in rows and columns in such a way that all rows and all columns contain exactly the same number of flower pots. Also, Philip wants the garden to have the maximum possible dimension while following this rule. Given the number of flower pots, find the optimal row and column size that meets Philip\'s criteria. The garden should have an equal number of rows and columns. INPUT The input consists of a single line containing a positive integer N, which is the number of flower pots. OUTPUT Output two integers separated by a space which represent the optimal number of rows and columns that Philip\'s garden should have respectively. CONSTRAINTS The value of N will be less than or equal to 10^9. SAMPLE INPUT 20 SAMPLE OUTPUT 4 4 Explanation: 20 flower pots can be arranged optimally in 4 rows and 4 columns with 4 flower pots used and 20 - 16 = 4 flower pots left unarranged. The largest possible side of the square dimension is used.","solution":"import math def optimal_garden_size(N): Given N flower pots, returns the optimal number of rows and columns for an equal number of flower pots in each row and column, with the largest possible dimensions. max_side_length = math.isqrt(N) return max_side_length, max_side_length"},{"question":"You are given a string consisting of lowercase English letters. Let\'s define a \\"balanced substring\\" as a substring in which every letter from the alphabet appears an equal number of times. Consider the following task: Given a string, what is the minimum length of a contiguous substring that is balanced? If no such substring exists, return -1. You may assume that only the first `k` letters of the alphabet appear in the string, where `1 ≤ k ≤ 26`. -----Input----- The input consists of multiple test cases. The first line contains a single integer `t` (1 ≤ t ≤ 100) — the number of test cases. The description of the test cases follows. The first line of each test case contains an integer `k` (1 ≤ k ≤ 26) — the number of distinct letters to balance in the substring. The second line of each test case contains a string `s` consisting of lowercase English letters (1 ≤ |s| ≤ 10^5). It is guaranteed that the sum of the lengths of all strings in the input does not exceed 10^6. -----Output----- For each test case, output the minimum length of a balanced substring. If no such substring exists, output -1. -----Examples----- Input 2 2 abba 3 abcabc Output 2 3 -----Note----- In the first testcase, for `k = 2` and `s = \\"abba\\"`, the minimum length of a balanced substring is 2, for the substring \\"ab\\" which contains both \'a\' and \'b\' exactly once. In the second testcase, for `k = 3` and `s = \\"abcabc\\"`, the minimum length of a balanced substring is 3. The substring \\"abc\\" is balanced, containing \'a\', \'b\', and \'c\' once each.","solution":"def min_balanced_substring_length(k, s): from collections import defaultdict target_count = {chr(97 + i): 1 for i in range(k)} needed_chars = set(target_count.keys()) min_length = float(\'inf\') left = 0 char_count = defaultdict(int) current_chars = set() for right, char in enumerate(s): if char in needed_chars: char_count[char] += 1 current_chars.add(char) while len(current_chars) == len(needed_chars): min_length = min(min_length, right - left + 1) char_count[s[left]] -= 1 if char_count[s[left]] == 0: current_chars.remove(s[left]) left += 1 return min_length if min_length != float(\'inf\') else -1 def process_inputs(t, test_cases): results = [] for k, s in test_cases: results.append(min_balanced_substring_length(k, s)) return results"},{"question":"You\'re given a binary tree with N nodes. Your task is to find the lowest common ancestor (LCA) of two given nodes in the tree. The LCA of two nodes p and q in a binary tree is the lowest (i.e., deepest) node that is an ancestor of both p and q, where we allow a node to be a descendant of itself. Input: The first line contains an integer T, the number of test cases. For each test case: - The first line contains an integer N, the number of nodes in the tree. - The next N lines each contain two integers representing the left and right children of the i-th node (0 indicates no child). - The next line contains two integers p and q, the nodes for which you need to find the LCA. Output: For each test case, output a single line containing the LCA of nodes p and q. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^4 1 ≤ p, q ≤ N Example Input: 1 5 2 3 4 5 0 0 0 0 0 0 4 5 Output: 1 Explanation: In the given example, the binary tree is: 1 / 2 3 / 4 5 The LCA of nodes 4 and 5 is node 2.","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key def build_tree(nodes): node_list = [TreeNode(i) for i in range(len(nodes)+1)] for i, (l, r) in enumerate(nodes): if l != 0: node_list[i+1].left = node_list[l] if r != 0: node_list[i+1].right = node_list[r] return node_list[1] if node_list else None def findLCA(root, p, q): if root is None: return None if root.val == p or root.val == q: return root left_lca = findLCA(root.left, p, q) right_lca = findLCA(root.right, p, q) if left_lca and right_lca: return root return left_lca if left_lca is not None else right_lca def lowest_common_ancestor(N, nodes, p, q): root = build_tree(nodes) lca_node = findLCA(root, p, q) return lca_node.val if lca_node else -1"},{"question":"Write a function `rotate_matrix` that takes a square matrix (a list of lists) `matrix` as its parameter and rotates it 90 degrees clockwise, returning the rotated matrix. For example, given the input matrix: ``` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` The function should return: ``` [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` Another example: For the input matrix: ``` [ [1, 2], [3, 4] ] ``` The function should return: ``` [ [3, 1], [4, 2] ] ``` You can assume the input matrix is always non-empty and square (NxN). The dimensions of the matrix (N) will be a positive integer and typically small (e.g., less than or equal to 100). Aim for an in-place rotation with efficient time and space complexity.","solution":"def rotate_matrix(matrix): Rotates the given NxN matrix 90 degrees clockwise. n = len(matrix) for layer in range(n // 2): first = layer last = n - 1 - layer for i in range(first, last): offset = i - first # Save the top element top = matrix[first][i] # Move left element to top matrix[first][i] = matrix[last - offset][first] # Move bottom element to left matrix[last - offset][first] = matrix[last][last - offset] # Move right element to bottom matrix[last][last - offset] = matrix[i][last] # Move top element to right matrix[i][last] = top return matrix"},{"question":"A kingdom has multiple cities connected by bidirectional roads. Each road has a certain length that denotes the time required to travel from one city to another. The king wants to travel from his capital city to another specific city and to minimize the travel time. Given the number of cities, roads, the capital city, and the target city, find the shortest time required for the king to travel from the capital city to the target city using the given roads. If the target city is not reachable from the capital city, return -1. # Input The first line contains three integers N, M, and K (2 le N le 10^4, 1 le M le 5 cdot 10^4, 1 le K le N) - the number of cities, the number of roads, and the target city. The next M lines each contain three integers u, v, and w (1 le u, v le N, 1 le w le 1000) - the cities connected by the road and the travel time for the road. The last line contains the integer C (1 le C le N) - the capital city. # Output Print a single integer that denotes the shortest travel time from the capital city to the target city. If the target city is not reachable from the capital city, print -1. # Example Input ``` 5 7 4 1 2 2 1 3 4 2 3 1 2 4 7 3 4 3 3 5 5 4 5 1 1 ``` Output ``` 7 ``` Note In the given example, the shortest path from city 1 (capital) to city 4 (target) has a travel time of 7: - Path: 1 -> 2 -> 3 -> 4 with respective travel times 2, 1, and 3. The total travel time is 2+1+3=6.","solution":"import heapq def shortest_path(N, M, K, roads, C): Function to find the shortest travel time from capital city to target city. Parameters: N : int - Number of cities M : int - Number of roads K : int - Target city roads : list of tuples - List of roads where each tuple contains (u, v, w) C : int - Capital city Returns: int - Shortest travel time from capital city to target city or -1 if not reachable # Create adjacency list graph = {i: [] for i in range(1, N + 1)} for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) # Initialize priority queue and distances queue = [(0, C)] # (distance, city) distances = {i: float(\'inf\') for i in range(1, N + 1)} distances[C] = 0 while queue: current_distance, current_city = heapq.heappop(queue) if current_distance > distances[current_city]: continue for neighbor, weight in graph[current_city]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(queue, (distance, neighbor)) return distances[K] if distances[K] != float(\'inf\') else -1"},{"question":"Write a program to help a robot navigate a grid with obstacles from a starting position to a target position. The grid is represented as a 2D array of cells, where each cell can either be empty (.) or contain an obstacle (#). The robot can move up, down, left, or right but cannot move through obstacles or off the grid. Your task is to compute the minimum number of moves the robot needs to reach the target from the starting position, or determine that it is impossible for the robot to get there. ------ Input Format ------ - The first line of the input contains an integer T denoting the number of test cases. - The description of T test cases follows. - Each test case starts with two integers R and C, the number of rows and columns in the grid. - The next R lines each contain a string of length C that describes the grid. - The following line contains two integers S_row and S_col, the starting position of the robot. - The last line contains two integers T_row and T_col, the target position of the robot. ------ Output Format ------ For each test case, print a single line with the minimum number of moves required for the robot to reach the target, or -1 if it is impossible. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ R, C ≤ 100 0 ≤ S_{row} < R, S_{col} < C 0 ≤ T_{row} < R, T_{col} < C grid[i][j] ∈ {\'.\', \'#\'} ----- Sample Input ------ 2 5 5 ..... .#.#. ..#.. ..... ..... 0 0 4 4 3 5 ..... ..... ..#.. .#.#. ..... 0 0 3 4 ----- Sample Output ------ 8 -1 ----- Explanation ------ Test case 1: The robot can navigate from position (0, 0) to (4, 4) with a minimum of 8 moves by going around the obstacles. Test case 2: It\'s impossible for the robot to reach the target position (3, 4) from the starting position (0, 0) because the path is blocked by obstacles.","solution":"from collections import deque def min_moves_in_grid(R, C, grid, S_row, S_col, T_row, T_col): if grid[S_row][S_col] == \'#\' or grid[T_row][T_col] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(S_row, S_col, 0)]) visited = set((S_row, S_col)) while queue: x, y, steps = queue.popleft() if (x, y) == (T_row, T_col): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < R and 0 <= ny < C and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1 def robot_navigation(test_cases): results = [] for case in test_cases: R, C = case[\'R\'], case[\'C\'] grid = case[\'grid\'] S_row, S_col = case[\'S_row\'], case[\'S_col\'] T_row, T_col = case[\'T_row\'], case[\'T_col\'] result = min_moves_in_grid(R, C, grid, S_row, S_col, T_row, T_col) results.append(result) return results"},{"question":"Garnet has stumbled across a mysterious forest filled with ancient treasures and mystical challenges. Each treasure chest in the forest contains a certain number of gold coins, and being the adventurous spirit she is, Garnet wants to collect as much gold as she can. However, each chest is guarded by a magical puzzle that either adds to or subtracts from the total number of coins collected so far. Given an array of integers representing the coins in each chest (positive for adding coins, negative for losing coins), determine the maximum coins Garnet can collect after traversing the entire forest for each scenario. She must collect coins from at least one chest, and she cannot skip any chests. For example, if the sequence of chests Garnet encounters contains the following coin values: C = [3, -2, 5, -1]. The permutations of sums are as follows: - {3, -2, 5, -1} results in 3 + (-2) + 5 + (-1) = 5 coins. - {3, -2, 5} results in 3 + (-2) + 5 = 6 coins. - {3, -2} results in 3 + (-2) = 1 coins. - {3} results in 3 coins. - {3, -2, -1} results in 3 + (-2) + (-1) = 0 coins. Clearly, the best option is to collect coins from the first three chests, which yields 6 coins. Function Description Complete the maximum_gold function in the editor below. It must return an integer that denotes the maximum number of coins Garnet can collect. maximum_gold has the following parameter(s): - C: an array of integers that represents the coin values in each chest Input Format The first line contains an integer, t, denoting the number of test cases. Each test case is described over two lines: - The first line contains a single integer n, the number of chests in the forest. - The second line contains n space-separated integers describing the respective coin values for the chests C[C[1],C[2],...,C[n]]. Constraints 1 leq t leq 10^5 1 leq n leq 10^5 -10^7 leq C[i] leq 10^7 for each valid index i The sum of all n in a single test case is leq 10^6 Output Format For each test case, print a single line with an integer denoting the maximum number of coins Garnet can collect. Sample Input 1 4 3 -2 5 -1 Sample Output 6 Explanation There are n=4 chests, each containing the following coins: C=[3, -2, 5, -1]. The optimal sequence to maximize the number of coins is to collect from the first three chests, which yields 3 + (-2) + 5 = 6 coins.","solution":"def maximum_gold(C): Returns the maximum coins Garnet can collect from the given array of chests. :param C: List[int] - array of integers where each integer represents coins in each chest. :return: int - the maximum coins that can be collected. max_coins = current_sum = C[0] for coins in C[1:]: current_sum = max(coins, current_sum + coins) max_coins = max(max_coins, current_sum) return max_coins"},{"question":"In a faraway land, there is a unique type of tree called a \\"Magic Tree.\\" The Magic Tree has the unusual property of growing in discrete height units over time. The tree starts with a height of 0 units and can grow to any given height. The property of the tree is as follows: - Every odd time unit, it triples its height. - Every even time unit, it doubles its height. Diana, a gardener, is observing the growth process of a Magic Tree over a certain number of time units and wants to predict its height at the end of the observation period. Your task is to write a program that calculates the height of the Magic Tree after a given number of time units. -----Input----- An integer `t` (1 ≤ t ≤ 60) indicating the number of observations. Following this, `t` lines each containing an integer `n` (0 ≤ n ≤ 60) representing the number of time units observed. -----Output----- For each observation, display the height of the Magic Tree after the specified number of time units. -----Example----- Sample Input: 3 0 1 4 Sample Output: 1 3 30 Explanation: - For the first observation (0 time units), the tree remains at height 1. - For the second observation (1 time unit), the tree triples its height at the end of the first time unit, reaching height 3. - For the third observation (4 time units), the height of the tree grows as follows: - At time unit 1 (odd), height triples to 3. - At time unit 2 (even), height doubles to 6. - At time unit 3 (odd), height triples to 18. - At time unit 4 (even), height doubles to 36. But here we can see the final output is 30 because at the start of the program the Time unit was 0 so height was 1 and at time unit 1 height became 3 and then follows same as above explanation. Note: Provide the correct height calculation according to reflecting height change.","solution":"def magic_tree_height(n): Returns the height of the Magic Tree after n time units. height = 1 # Initially the height is 1 unit for i in range(1, n + 1): if i % 2 == 1: height *= 3 else: height *= 2 return height def observe_magic_trees(observations): Given a list of observations (time units), return a list of heights of the Magic Tree for each observation. return [magic_tree_height(n) for n in observations]"},{"question":"You are given a robot that can be placed on a 2D grid starting at any cell (i, j). The robot can follow a sequence of commands given in the form of a string s, consisting of characters \'L\', \'R\', \'U\', \'D\'. The robot will move one cell left (\'L\'), right (\'R\'), up (\'U\'), or down (\'D\') upon receiving these commands. However, the grid has certain cells where the robot is not allowed to move (represented by 0s in a matrix while 1s represent open cells where the robot can move). Your task is to determine if there is any starting cell (i, j) such that the robot can follow the command sequence s and always stay within the grid\'s boundaries and only on open cells (1s). # Input: - An integer n, the number of rows in the grid. - An integer m, the number of columns in the grid. - A 2D list grid of size n x m where grid[i][j] is either 0 (blocked) or 1 (open). - A string s of length |s| consisting of characters \'L\', \'R\', \'U\', \'D\'. # Output: - Return 1 if there is any starting cell from which the robot can follow the given command sequence while staying within the grid and on open cells. Otherwise, return 0. # Example: Input: n = 3, m = 3 grid = [ [1, 1, 0], [1, 0, 1], [1, 1, 1] ] s = \\"RRDLLU\\" Output: 0 Explanation: There is no starting cell from which the robot can follow the command sequence \\"RRDLLU\\" without either stepping outside the grid or onto a blocked cell. # Your Task: You do not need to read input or print anything. Your task is to complete the function `canFollowCommands()` which takes n, m, grid, and s as input parameters and returns 1 if there is such a starting cell; otherwise, return 0. # Expected Time Complexity: O(n * m * |s|) # Expected Auxiliary Space: O(1) # Constraints: 1 ≤ n, m ≤ 100 1 ≤ |s| ≤ 100","solution":"def canFollowCommands(n, m, grid, s): def isValid(i, j): return 0 <= i < n and 0 <= j < m and grid[i][j] == 1 directions = {\'L\': (0, -1), \'R\': (0, 1), \'U\': (-1, 0), \'D\': (1, 0)} for start_i in range(n): for start_j in range(m): if grid[start_i][start_j] == 1: i, j = start_i, start_j valid = True for command in s: di, dj = directions[command] i += di j += dj if not isValid(i, j): valid = False break if valid: return 1 return 0"},{"question":"You are given an array of integers. Your task is to find the maximum sum of any non-empty subarray of consecutive elements. Example arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4] The maximum subarray sum is 6, for the subarray [4, -1, 2, 1]. Function Description Complete the maxSubarraySum function in the editor below. maxSubarraySum has the following parameter(s): - int arr[n]: the array of integers Returns int: the maximum sum of any non-empty subarray Input Format The first line of input contains \'t\', the number of test cases. Each of the next \'t\' lines contains: - An integer \'n\', the size of the array. - n space-separated integers representing the elements of the array. Constraints 1 <= t <= 10 1 <= n <= 10^5 -10^4 <= arr[i] <= 10^4 Sample Input 0 2 9 -2 1 -3 4 -1 2 1 -5 4 5 1 2 3 4 5 Sample Output 0 6 15 Explanation 0 For the two test cases: 1. The maximum subarray sum for the first test case is 6, corresponding to the subarray [4, -1, 2, 1]. 2. The maximum subarray sum for the second test case is 15, corresponding to the subarray [1, 2, 3, 4, 5]. Note: For an array with all negative numbers, the highest (least negative) single element will be the maximum subarray sum.","solution":"def maxSubarraySum(arr): Returns the maximum sum of any non-empty subarray of consecutive elements. max_current = max_global = arr[0] for number in arr[1:]: max_current = max(number, max_current + number) if max_current > max_global: max_global = max_current return max_global"},{"question":"Given an integer N, find the number of unique binary strings of length N that do not contain consecutive 1s. Example 1: Input: N = 3 Output: 5 Explanation: The binary strings of length 3 are: \\"000\\", \\"001\\", \\"010\\", \\"100\\", \\"101\\". Example 2: Input: N = 4 Output: 8 Explanation: The binary strings of length 4 are: \\"0000\\", \\"0001\\", \\"0010\\", \\"0100\\", \\"0101\\", \\"1000\\", \\"1001\\", \\"1010\\". Your Task: You don\'t need to read or print anything. Your task is to complete the function countStrings() which takes N as input parameter and returns the total number of binary strings of length N which do not contain consecutive 1s modulo 10^{9} + 7. Expected Time Complexity: O(N) Expected Space Complexity: O(N) Constraints: 1 ≤ N ≤ 10^{4}","solution":"def countStrings(N): MOD = 10**9 + 7 # edge case for smallest N if N == 1: return 2 # initialize dp arrays dp0 = [0] * (N+1) # ending in 0 dp1 = [0] * (N+1) # ending in 1 # base cases dp0[1] = 1 dp1[1] = 1 # populate the dp arrays for i in range(2, N+1): dp0[i] = (dp0[i-1] + dp1[i-1]) % MOD dp1[i] = dp0[i-1] # return the total number of valid strings of length N return (dp0[N] + dp1[N]) % MOD"},{"question":"Samantha is organizing a puzzle event and is creating different square puzzles. Each puzzle consists of a grid of integers, with some marked cells that cannot be altered. To make it more challenging, Samantha wants to rotate parts of the grid clockwise by 90 degrees if a condition is met. Specifically, only the m x m subgrids that are surrounded by unmarked cells should be rotated. -----Input----- The first line contains an integer N (1 leq N leq 10), the size of the square grid. Each of the next N lines consists of N integers separated by a space, representing the grid. The integer value 0 indicates a marked cell that cannot be changed, and any other integer represents a puzzle piece value. -----Output----- Output the modified grid after rotating all eligible m x m subgrids by 90 degrees clockwise. If no subgrid is eligible for rotation, the output remains the same as the input. -----Examples----- Sample Input 1: 5 1 2 3 4 5 1 0 0 0 1 1 0 8 0 1 1 0 0 0 1 1 2 3 4 5 Sample Output 1: 1 2 3 4 5 1 0 0 0 1 1 0 8 0 1 1 0 0 0 1 1 2 3 4 5 Sample Input 2: 4 1 1 1 1 1 2 3 1 1 4 5 1 1 1 1 1 Sample Output 2: 1 1 1 1 1 4 2 1 1 5 3 1 1 1 1 1 Sample Input 3: 3 2 2 2 2 0 2 2 2 2 Sample Output 3: 2 2 2 2 0 2 2 2 2","solution":"def rotate_subgrid(grid): N = len(grid) def can_rotate(x, y, m): for i in range(m+2): if grid[x][y+i] == 0 or grid[x+m+1][y+i] == 0 or grid[x+i][y] == 0 or grid[x+i][y+m+1] == 0: return False return True def rotate_clockwise(x, y, m): subgrid = [row[y:y+m] for row in grid[x:x+m]] for i in range(m): for j in range(m): grid[x+j][y+m-1-i] = subgrid[i][j] for size in range(1, N-1): for i in range(N-size-1): for j in range(N-size-1): if can_rotate(i, j, size): rotate_clockwise(i+1, j+1, size) return grid def str_to_matrix(s): lines = s.strip().split(\'n\') N = int(lines[0]) grid = [list(map(int, line.split())) for line in lines[1:]] return grid def matrix_to_str(matrix): return \'n\'.join(\' \'.join(map(str, row)) for row in matrix) def puzzle_rotation(input_str): grid = str_to_matrix(input_str) rotated_grid = rotate_subgrid(grid) return matrix_to_str(rotated_grid)"},{"question":"Given an array of n integers, find the sum of the maximum subarray using Kadane\'s Algorithm. Kadane\'s Algorithm is an iterative dynamic programming algorithm that finds the maximum sum of a contiguous subarray in an array of integers. -----Input:----- - First line will contain an integer T, the number of test cases. Then the test cases follow. - Each test case contains of two lines: - The first line contains a single integer n - the size of the array. - The second line contains n space-separated integers representing the elements of the array. -----Output:----- For each test case, output a single line containing the sum of the maximum subarray. -----Constraints----- - 1 <= T <= 100 - 1 <= n <= 10^5 - -10^4 <= arr[i] <= 10^4 -----Sample Input:----- 2 8 -2 1 -3 4 -1 2 1 -5 4 5 1 2 3 4 5 -----Sample Output:----- 6 15","solution":"def max_subarray_sum(arr): Implement Kadane\'s Algorithm to find the maximum subarray sum. max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far def process_test_cases(T, test_cases): results = [] for i in range(T): n = test_cases[i][0] arr = test_cases[i][1] results.append(max_subarray_sum(arr)) return results"},{"question":"You are given a grid with boldsymbol{n} rows and boldsymbol{m} columns. Each cell in the grid has a value representing the height at that cell. You need to determine the length of the longest strictly increasing path starting from any cell in the grid. A strictly increasing path is a sequence of cells such that the value at each subsequent cell is greater than the value at the current cell, and the next cell in the path is one of the four possible adjacent cells (up, down, left, right). Input Format The first line contains two integers boldsymbol{n} and boldsymbol{m}, representing the number of rows and columns in the grid, respectively. Each of the next boldsymbol{n} lines contains boldsymbol{m} space-separated integers, where the boldsymbol{j}-th integer in the boldsymbol{i}-th line represents the height at cell (boldsymbol{i}, boldsymbol{j}). Constraints 1 leq n, m leq 1000 1 leq text{height at any cell} leq 10^9 Output Format Print a single integer representing the length of the longest strictly increasing path starting from any cell. Sample Input 3 3 9 9 4 6 6 8 2 1 1 Sample Output 4 Explanation One of the longest strictly increasing paths is 1 -> 2 -> 6 -> 9. The path starts from cell (3, 2) with a height of 1, moves to cell (3, 1) with a height of 2, moves to cell (2, 1) with a height of 6, and finally moves to cell (1, 1) with a height of 9. The length of this path is 4. Hence, the output is 4.","solution":"def longest_increasing_path(matrix): if not matrix or not matrix[0]: return 0 n, m = len(matrix), len(matrix[0]) dp = [[-1] * m for _ in range(n)] directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def dfs(x, y): if dp[x][y] != -1: return dp[x][y] max_path_length = 1 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and matrix[nx][ny] > matrix[x][y]: max_path_length = max(max_path_length, 1 + dfs(nx, ny)) dp[x][y] = max_path_length return dp[x][y] return max(dfs(i, j) for i in range(n) for j in range(m)) # Helper function to read input and call main function (mainly for testing purposes) def read_and_process_input(): import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) m = int(data[1]) matrix = [] index = 2 for i in range(n): row = list(map(int, data[index:index + m])) matrix.append(row) index += m print(longest_increasing_path(matrix))"},{"question":"Consider a game where you have to navigate a grid from the top-left corner to the bottom-right corner. The grid consists of `n` rows and `m` columns, and each cell contains an integer representing the number of coins you can collect when you step on it. You can only move either right or down from a cell, and you need to maximize the number of coins collected by the time you reach the bottom-right corner. Write a function `max_coins(grid: List[List[int]]) -> int` that takes an `n x m` grid and returns the maximum number of coins that you can collect. # Example ```python grid = [ [0, 3, 1, 1], [2, 0, 0, 4], [1, 5, 3, 1] ] print(max_coins(grid)) # Output: 12 ``` In this example, the path that maximizes the coins collected is `(0, 0) -> (1, 0) -> (2, 0) -> (2, 1) -> (2, 2) -> (2, 3)`, resulting in `0 + 2 + 1 + 5 + 3 + 1 = 12`. # Guidelines - `1 <= n, m <= 1000` - Each cell contains a non-negative integer representing the number of coins (0 to 100). # Constraints - Optimize for time complexity and ensure your solution works within the given constraints.","solution":"from typing import List def max_coins(grid: List[List[int]]) -> int: Returns the maximum number of coins that can be collected from the top-left corner to the bottom-right corner, moving only right or down. if not grid or not grid[0]: return 0 n = len(grid) m = len(grid[0]) # Create a 2D dp array to store the maximum coins collected up to each cell dp = [[0] * m for _ in range(n)] dp[0][0] = grid[0][0] # Fill the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[-1][-1]"},{"question":"Alex loves playing with numbers and he has recently come across palindrome numbers. A number is called a palindrome if it reads the same from left to right and right to left. Given a positive integer N, find the smallest palindrome number P such that P is greater than N. Constraints * 1 ≤ N ≤ 10^6 * N is an integer. Input Input is given from Standard Input in the following format: N Output Print the smallest palindrome number P which is greater than N. Examples Input 123 Output 131 Input 9999 Output 10001","solution":"def is_palindrome(num): Check if a given number is a palindrome. return str(num) == str(num)[::-1] def next_palindrome(N): Returns the smallest palindrome number greater than N. N += 1 while not is_palindrome(N): N += 1 return N"},{"question":"Given a ```matrix``` of integers representing a grid, and an integer ```threshold```, your task is to find the largest size of a sub-grid (a contiguous block of elements in the grid) such that the sum of all its elements is less than or equal to the given ```threshold```. For example: ```python matrix -> [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] threshold -> 6 output -> 2 # The sub-grid [[1, 2], [4, 5]] has a sum of 12, the largest sub-grid with sum <= 6 are any single element sub-grids, like [[1]] or [[2]]. matrix -> [ [1, 1, 1], [1, 1, 1], [1, 1, 1] ] threshold -> 4 output -> 4 # The sub-grid [[1, 1], [1, 1]] has a sum of 4. Any 2x2 sub-grid has the same sum, which is the largest size possible that meets the condition. matrix -> [ [10, 20, 30], [5, 25, 35], [15, 5, 10] ] threshold -> 50 output -> 1 # The sub-grid can only be any single element which has sum <= 50. If no sub-grid can be found with a sum less than or equal to the threshold, return 0.","solution":"def max_subgrid_with_threshold(matrix, threshold): Find the largest size of a sub-grid such that the sum of all its elements is less than or equal to the given threshold. if not matrix or not matrix[0]: return 0 rows = len(matrix) cols = len(matrix[0]) max_size = 0 for r in range(rows): for c in range(cols): current_sum = 0 size = 0 while r + size < rows and c + size < cols: for k in range(size + 1): current_sum += matrix[r + size][c + k] current_sum += matrix[r + k][c + size] current_sum -= matrix[r + size][c + size] # Remove the double counted element if current_sum > threshold: break size += 1 max_size = max(max_size, size) return max_size"},{"question":"Your task is to evaluate the performance of a stock portfolio. Write a program that reads the number of days n and a stock price table with n rows and 3 columns. Each row in the table contains the stock prices of three different companies on a given day. The program should calculate the following metrics: 1. The average price of each company\'s stock over the n days. 2. The total percentage increase or decrease for each company\'s stock from the first to the last day. Constraints * 1 ≤ n ≤ 365 * 0 ≤ stock price ≤ 1000 Input In the first line, an integer n is given. Next, the table is given by n lines, each of which consists of 3 integers separated by space characters representing the stock prices of the three companies. Output Print three lines: 1. The average prices of the three companies\' stocks over n days, separated by a single space. 2. The total percentage change of the first company’s stock from the first to the last day. 3. The total percentage change of the second company’s stock from the first to the last day. 4. The total percentage change of the third company’s stock from the first to the last day. The average prices should be printed with 2 decimal places. The percentage changes should be printed with 2 decimal places and include a \'%\' symbol. Example Input 5 100 150 200 110 140 210 120 130 220 130 120 230 140 110 240 Output 120.00 130.00 220.00 40.00% -26.67% 20.00%","solution":"def evaluate_stock_portfolio(n, stock_prices_table): company_1_total = 0 company_2_total = 0 company_3_total = 0 first_day_prices = stock_prices_table[0] last_day_prices = stock_prices_table[-1] for prices in stock_prices_table: company_1_total += prices[0] company_2_total += prices[1] company_3_total += prices[2] avg_company_1 = company_1_total / n avg_company_2 = company_2_total / n avg_company_3 = company_3_total / n avg_prices = (f\\"{avg_company_1:.2f}\\", f\\"{avg_company_2:.2f}\\", f\\"{avg_company_3:.2f}\\") percentage_change_1 = ((last_day_prices[0] - first_day_prices[0]) / first_day_prices[0]) * 100 if first_day_prices[0] != 0 else 0 percentage_change_2 = ((last_day_prices[1] - first_day_prices[1]) / first_day_prices[1]) * 100 if first_day_prices[1] != 0 else 0 percentage_change_3 = ((last_day_prices[2] - first_day_prices[2]) / first_day_prices[2]) * 100 if first_day_prices[2] != 0 else 0 percentage_changes = (f\\"{percentage_change_1:.2f}%\\", f\\"{percentage_change_2:.2f}%\\", f\\"{percentage_change_3:.2f}%\\") return avg_prices, percentage_changes"},{"question":"A rectangular grid of cells contains both 1s and 0s. Each move, you can change any cell\'s value from 0 to 1. Your goal is to convert all cells in the grid to 1 by flipping the minimum number of 0s. Write an efficient algorithm to accomplish this task. Your solution should optimize the number of moves required to reach the goal. -----Constraints----- - The height and width of the grid do not exceed 1000. - The grid contains at least one 1. - The input grid is always rectangular, with dimensions H x W. -----Input----- Input is given from Standard Input in the following format: H W grid_1 grid_2 ... grid_H - The first line of input contains two integers, H and W, separated by a space. - The following H lines each contain W characters (\'1\' or \'0\'), representing a row of the grid. -----Output----- Print the minimum number of moves required to convert all cells to 1. If it is already all 1s, output 0. -----Sample Input----- 3 3 111 110 001 -----Sample Output----- 1 Explanation: In one move, you can flip the cell at (2, 3) from 0 to 1, resulting in a fully 1s grid: 111 111 011 Thus, the minimum number of moves required is 1.","solution":"def min_moves_to_convert(grid): Return the minimum number of moves to convert all cells in the grid to 1. H = len(grid) W = len(grid[0]) # To avoid going out of bounds directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS initialization from collections import deque queue = deque([]) visited = [[False] * W for _ in range(H)] # Enqueue all the initial \'1\' cells and mark them as visited for i in range(H): for j in range(W): if grid[i][j] == \'1\': queue.append((i, j, 0)) # (row, col, depth) visited[i][j] = True max_depth = 0 # BFS loop while queue: x, y, depth = queue.popleft() max_depth = max(max_depth, depth) for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < H and 0 <= ny < W and not visited[nx][ny]: visited[nx][ny] = True if grid[nx][ny] == \'0\': queue.append((nx, ny, depth + 1)) return max_depth def main(): import sys input = sys.stdin.read data = input().split() H = int(data[0]) W = int(data[1]) grid = [data[i + 2] for i in range(H)] print(min_moves_to_convert(grid)) if __name__ == \\"__main__\\": main()"},{"question":"Lena is managing a social media application. She needs to implement a feature that can detect the longest substring in a user\'s status update that contains at most k distinct characters. The purpose is to identify the most diverse part of the user\'s message in terms of character variety. Your task is to write a program that finds this longest substring and prints its length. -----Input----- The first line contains a single integer k (1 ≤ k ≤ 10^5) — the maximum number of distinct characters in the substring. The second line contains a string s (1 ≤ length of s ≤ 10^6) — the user\'s status update, which consists of lowercase and uppercase Latin letters. -----Output----- Print the length of the longest substring that contains at most k distinct characters. -----Examples----- Input 2 eceba Output 3 Input 3 aaabbcc Output 7 Input 1 qwertyyuioop Output 2","solution":"def longest_substring_with_k_distinct_chars(k, s): Returns the length of the longest substring that contains at most k distinct characters. n = len(s) if n == 0 or k == 0: return 0 left = 0 right = 0 max_length = 0 char_count = {} while right < n: current_char = s[right] char_count[current_char] = char_count.get(current_char, 0) + 1 right += 1 while len(char_count) > k: left_char = s[left] char_count[left_char] -= 1 if char_count[left_char] == 0: del char_count[left_char] left += 1 max_length = max(max_length, right - left) return max_length"},{"question":"Given two strings s and t, determine if they are one edit away from being the same string. An edit is an insertion, deletion, or replacement of a single character. Example 1: Input: s = \\"pale\\", t = \\"ple\\" Output: true Explanation: You can remove one character from \\"pale\\" to get \\"ple\\". Example 2: Input: s = \\"pales\\", t = \\"pale\\" Output: true Explanation: You can remove one character from \\"pales\\" to get \\"pale\\". Example 3: Input: s = \\"pale\\", t = \\"bale\\" Output: true Explanation: You can replace the character \'p\' in \\"pale\\" with \'b\' to get \\"bale\\". Example 4: Input: s = \\"pale\\", t = \\"bake\\" Output: false Explanation: There is no way to convert \\"pale\\" to \\"bake\\" with exactly one edit. Constraints: - 0 <= s.length, t.length <= 10^4 - s and t consist of lowercase English letters.","solution":"def one_edit_away(s, t): Determines if two strings s and t are one edit away from being the same string. An edit is an insertion, deletion, or replacement of a single character. len_s, len_t = len(s), len(t) # If the length difference is more than 1, return False if abs(len_s - len_t) > 1: return False # Identify the longer and shorter strings if len_s > len_t: s, t = t, s found_difference = False i, j = 0, 0 while i < len(s) and j < len(t): if s[i] != t[j]: if found_difference: return False found_difference = True if len(s) == len(t): i += 1 # If lengths are the same, move both pointers else: i += 1 j += 1 return True"},{"question":"A local transportation company has recently acquired a fleet of new buses. Each bus has a specific capacity, c. They want to organize the buses to transport students on a field trip. The goal is to use the minimum number of buses possible to accommodate all students while not surpassing any bus\'s capacity. You are provided with a list of capacities of available buses and the number of students. Create a program to determine the minimum number of buses needed to transport all students. **Input** The input consists of multiple datasets. Each dataset is given in the following format: n s c1 c2 ... cm Where: - n (1 ≤ n ≤ 10,000) is the number of students. - s (1 ≤ s ≤ 100,000) is the number of different types of buses. - c1, c2, ..., cm (1 ≤ ci ≤ 100,000) are the capacities of each bus type. The number of datasets does not exceed 50. **Output** For each dataset, print the minimum number of buses required. If it is not possible to transport all students with the available bus capacities, print \\"Impossible\\". **Example** Input ``` 100 3 30 20 50 120 4 10 10 10 10 50 2 40 20 ``` Output ``` 2 Impossible 2 ```","solution":"def min_buses_needed(datasets): Determines the minimum number of buses needed to transport all students for each dataset. Parameters: datasets (list): List of tuples where each tuple contains number of students, number of bus types, and capacities of each type. Returns: list: List of minimum buses needed or \\"Impossible\\" for each dataset. results = [] for data in datasets: n = data[0] bus_capacities = sorted(data[2:], reverse=True) total_capacity = sum(bus_capacities) if total_capacity < n: results.append(\\"Impossible\\") continue buses_needed = 0 remaining_students = n for capacity in bus_capacities: if remaining_students <= 0: break trips = (remaining_students + capacity - 1) // capacity # Calculate required trips buses_needed += trips remaining_students -= (trips * capacity) results.append(buses_needed) return results"},{"question":"You are given a data structure closely resembling a stack. However, this stack supports an additional operation `max`, which returns the maximum element in the stack. Implement a class called `MaxStack` that supports the following operations: 1. `push(x)` - Push element `x` onto the stack. 2. `pop()` - Removes the element on the top of the stack. 3. `top()` - Get the element on the top. 4. `max()` - Retrieve the maximum element in the stack. Input Format: The first line contains an integer `Q` denoting the number of operations. Each of the following `Q` lines contains one of the operations described above. It is guaranteed that the stack will never be empty when a `pop()`, `top()`, or `max()` operation is called. Output Format: For each `top()` and `max()` operation, output the result on a new line. Constraints: 1 ≤ Q ≤ 10^5 -10^9 ≤ x ≤ 10^9 Sample Input: ``` 10 push 10 push 20 push 30 max top pop max top pop max ``` Sample Output: ``` 30 30 20 20 10 ``` Explanation: The sequence of operations is as follows: 1. `push 10` - stack: [10] 2. `push 20` - stack: [10, 20] 3. `push 30` - stack: [10, 20, 30] 4. `max` - returns 30 5. `top` - returns 30 6. `pop` - removes 30, stack: [10, 20] 7. `max` - returns 20 8. `top` - returns 20 9. `pop` - removes 20, stack: [10] 10. `max` - returns 10","solution":"class MaxStack: def __init__(self): self.stack = [] self.max_stack = [] def push(self, x: int): self.stack.append(x) if not self.max_stack or x >= self.max_stack[-1]: self.max_stack.append(x) def pop(self): if self.stack: popped = self.stack.pop() if popped == self.max_stack[-1]: self.max_stack.pop() def top(self) -> int: if self.stack: return self.stack[-1] return None def max(self) -> int: if self.max_stack: return self.max_stack[-1] return None"},{"question":"A group of friends decided to play a game with their favorite numbers. Each of them has a favorite number, but they want to ensure that the sum of all numbers in a subset equals a given target sum. The subset should not be empty and can contain repeated elements from their favorite numbers. ------ Input: ------ The first line contains an integer T, the number of test cases. For each test case, the first line contains an integer N, the number of friends. The second line contains N integers representing the favorite numbers of the friends. The third line contains an integer S, the target sum they want to achieve. ------ Output: ------ Output \\"YES\\" if it is possible to form a subset (with repetition allowed) whose sum is exactly S, otherwise output \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ favorite numbers ≤ 100 1 ≤ S ≤ 10^4 ----- Sample Input 1 ------ 2 3 1 2 3 5 4 2 3 5 7 9 ----- Sample Output 1 ------ YES YES ----- Explanation 1 ------ In the first test case, the subset {2, 3} sums to 5. In the second test case, the subset {2, 2, 5} sums to 9.","solution":"def can_form_target_sum(T, test_cases): results = [] def can_sum(S, nums): dp = [False] * (S + 1) dp[0] = True for i in range(1, S + 1): for num in nums: if i - num >= 0 and dp[i - num]: dp[i] = True break return dp[S] for i in range(T): N, nums, S = test_cases[i] results.append(\\"YES\\" if can_sum(S, nums) else \\"NO\\") return results"},{"question":"In a world of competitive mythology, Lisa has devised a unique way to determine the superiority of warriors based on their battle reports. A battle report is a string consisting of lowercase English letters, representing the sequence of victories and losses of a warrior in a chronological order. Lisa believes that a warrior\'s strength is linked to the distinctiveness of their battle strategy. To determine the distinctiveness of a warrior, Lisa calculates the \\"battle index\\" of their report. The battle index of a string is defined as the count of distinct substrings of that string. Lisa needs your help to write a program that computes the battle index for a given battle report string. -----Input----- The input consists of a single line containing a string S (1 ≤ |S| ≤ 1000) made of lowercase English letters. -----Output----- Output a single integer representing the battle index of the input string. -----Examples----- Input abc Output 6 Input aaa Output 3 -----Note----- In the first sample case, the distinct substrings of \\"abc\\" are \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", and \\"abc\\". In the second sample case, the distinct substrings of \\"aaa\\" are \\"a\\", \\"aa\\", and \\"aaa\\".","solution":"def battle_index(S): Calculate the battle index of the given string, which is the count of distinct substrings. # A set to store substrings. substrings = set() # Generate all possible substrings and add them to the set. for i in range(len(S)): for j in range(i + 1, len(S) + 1): substrings.add(S[i:j]) # The number of distinct substrings is the size of the set. return len(substrings)"},{"question":"Given a list of integers `arr` and a positive integer `k`, return the largest sum of any contiguous subarray of length exactly `k`. If `k` is greater than the length of the array, return -1. Example: ```python arr = [2, 1, 5, 1, 3, 2], k = 3 # result = 9 (subarray is [5, 1, 3]) ``` **Function signature:** - `def max_sum_subarray(arr: List[int], k: int) -> int:` - `int max_sum_subarray(vector<int>& arr, int k)` **Requirements:** - You should use efficient algorithms to solve the problem. - The function should handle edge cases, such as when the list is empty or `k` is greater than the list length, gracefully. # Constraints: - The array can contain both positive and negative integers. - The length of the array will be between 1 and 10^5. - The value of `k` will be between 1 and 10^5.","solution":"from typing import List def max_sum_subarray(arr: List[int], k: int) -> int: Returns the largest sum of any contiguous subarray of length exactly k. If k is greater than the length of the array, returns -1. n = len(arr) if k > n: return -1 # Calculate the sum of the first \'k\' elements max_sum = curr_sum = sum(arr[:k]) # Use sliding window to find the maximum sum subarray of length \'k\' for i in range(k, n): curr_sum = curr_sum + arr[i] - arr[i - k] max_sum = max(max_sum, curr_sum) return max_sum"},{"question":"A company is organizing a coding competition where participants need to solve problems as quickly as possible. They\'ve decided to run a simulation to determine the efficiency of different scheduling approaches to the competition. Each participant has a certain number of problems they want to solve, given as an array where the value at each index represents the number of problems that participant needs to solve. The company has come up with the following rule for selecting problems for a participant to solve: \\"A participant can work on a problem if no other participant is currently working on the same problem.\\" Given the array of integers representing the number of problems each participant wants to solve, the task is to determine the minimum total number of time units required to allow all participants to complete their respective problems. Each participant can solve one problem per time unit, provided no other participant is working on that same problem. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of participants. The second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 100) — the number of problems each participant wants to solve. Output Print a single integer — the minimum total number of time units required for all participants to complete their respective problems. Examples Input 3 2 3 3 Output 3 Input 4 1 2 4 3 Output 4 Explanation In the first example, participants can solve their problems as follows: 1. In the first unit of time, Participant 1 can solve Problem 1, Participant 2 can solve Problem 1, and Participant 3 can solve Problem 1. 2. In the second unit of time, Participant 1 can solve Problem 2, Participant 2 can solve Problem 2, and Participant 3 can solve Problem 2. 3. In the third unit of time, Participant 2 can solve Problem 3, and Participant 3 can solve Problem 3. In the second example, each participant will work on different problems simultaneously: 1. In the first unit of time, all participants solve their first problem. 2. Differences only matter when counting total time units, not which problem they are solving. The highest number of problems to solve is 4, therefore it takes 4 time units for the most loaded participant.","solution":"def min_time_units(n, p): Returns the minimum total number of time units required to allow all participants to complete their respective problems. Each participant can solve one problem per time unit, provided no other participant is working on that same problem. Parameters: n (int): Number of participants. p (list of int): Number of problems each participant wants to solve. Returns: int: Minimum total number of time units required. return max(p) # The minimum time units required is the maximum number of problems any single participant has."},{"question":"A company stores records for their employees in a database. Each employee record contains information about the employee\'s name and a list of the number of products they have sold in each quarter of the year. The goal is to identify the employees who had an increase in product sales in each consecutive quarter of the year. Write a program that determines which employees had increasing sales through all four quarters. For example, if an employee sold 5 products in the first quarter, 6 in the second, 8 in the third, and 10 in the fourth, then they had increasing sales in each quarter. However, if an employee sold 3 products in the first quarter, 7 in the second, 7 in the third, and 9 in the fourth, their sales were not increasing in each quarter, so they should not be included in the output. Input The input will consist of multiple datasets. The end of the input is indicated by a single line containing \\"END\\". Each dataset is represented on multiple lines and consists of: The first line contains an integer n (1 ≤ n ≤ 100), the number of employees. The following n lines each contain: - A string containing the employee\'s name (which does not contain spaces and has a maximum length of 20 characters). - Four non-negative integers representing the number of products sold in each quarter of the year (separated by spaces). Output For each dataset, output the names of employees who had increasing sales in each consecutive quarter of the year. The names should be printed in the order they were provided in the input. If no employee had increasing sales in a dataset, output \\"None\\". Example Input 3 Alice 5 6 8 10 Bob 3 7 7 9 Charlie 2 3 4 5 2 David 1 2 3 4 Eve 4 3 2 1 END Output Alice Charlie David","solution":"def find_increasing_sales_employees(datasets): result = [] for data in datasets: employees = data.split(\'n\') n = int(employees[0]) increasing_sales_employees = [] for i in range(1, n + 1): entry = employees[i].split() name = entry[0] sales = list(map(int, entry[1:])) if sales == sorted(sales) and len(set(sales)) == 4: increasing_sales_employees.append(name) if increasing_sales_employees: result.extend(increasing_sales_employees) else: result.append(\\"None\\") return result def get_formatted_increasing_sales_employees(input_data): datasets = input_data.strip().split(\'nENDn\') formatted_results = find_increasing_sales_employees(datasets) return \'n\'.join(formatted_results)"},{"question":"A company has several employees, each with a unique ID. Each employee also has a direct manager except for the CEO (who is not managed by anyone). You are given an array of employees where each employee is represented by an object containing the following fields: - `id`: the ID of the employee (unique positive integer). - `manager`: the ID of the direct manager (0 if no manager). - `rating`: performance rating of the employee (positive integer). Your task is to implement a function that, given the array of employees and the ID of a specific manager, returns the average performance rating of his/her subtree (the manager and all their direct and indirect employees). If the manager does not exist, return -1. Input - An integer `n` (1 ≤ n ≤ 10^4) — the number of employees. - An array of `n` objects where each object contains: - `id` (1 ≤ id ≤ n) - `manager` (0 ≤ manager ≤ n) - `rating` (1 ≤ rating ≤ 100) - A single integer `m` (1 ≤ m ≤ n) — the ID of the manager for which you should calculate the average rating. Output A single float — the average rating of the employees in the subtree of the given manager. Return the result rounded to two decimal places. If the manager does not exist, return -1. Example Input ``` 6 [ {\\"id\\": 1, \\"manager\\": 0, \\"rating\\": 5}, {\\"id\\": 2, \\"manager\\": 1, \\"rating\\": 3}, {\\"id\\": 3, \\"manager\\": 1, \\"rating\\": 4}, {\\"id\\": 4, \\"manager\\": 2, \\"rating\\": 2}, {\\"id\\": 5, \\"manager\\": 2, \\"rating\\": 3}, {\\"id\\": 6, \\"manager\\": 3, \\"rating\\": 4} ] 1 ``` Output ``` 3.50 ``` Explanation In this example, the manager with ID 1 has 5 employees in their subtree, including themselves. The performance ratings of these employees are [5, 3, 4, 2, 3, 4]. The average rating is (5+3+4+2+3+4)/6 = 3.50.","solution":"def find_manager_average_rating(n, employees, m): Calculates the average performance rating of the subtree of the given manager. :param n: int, number of employees :param employees: list of dicts, each dict {id: int, manager: int, rating: int} :param m: int, id of the manager to calculate the average rating for :return: float, average rating rounded to two decimal places, or -1 if the manager does not exist # Create a mapping for employees id_to_employee = {emp[\'id\']: emp for emp in employees} # Check if the manager exists if m not in id_to_employee: return -1 def get_all_subordinates(manager_id): subordinates = [] for emp in employees: if emp[\'manager\'] == manager_id: subordinates.append(emp[\'id\']) subordinates.extend(get_all_subordinates(emp[\'id\'])) return subordinates # Get all subordinates of the given manager all_employees = get_all_subordinates(m) all_employees.append(m) # include the manager themselves # Calculate the average rating total_rating = sum(id_to_employee[emp_id][\'rating\'] for emp_id in all_employees) average_rating = total_rating / len(all_employees) return round(average_rating, 2)"},{"question":"You are working for a logistics company that deals with delivering parcels within cities. The company is planning to create an optimized parcel delivery system. They need your help to figure out the minimum number of delivery trucks required to deliver a certain number of parcels based on the weight capacity of the trucks and the weight of the parcels. Each city has a number of parcels, each with a specific weight, and there are trucks with a maximum weight capacity they can handle. Your task is to determine the minimum number of trucks required to deliver all parcels, ensuring that the combined weight of the parcels in each truck does not exceed the truck\'s weight capacity. Input The first line of the input gives the number of test cases, T. T lines follow, each of which contains: - An integer N, the number of parcels. - An integer C, the maximum weight capacity of a truck. - N space-separated integers, representing the weights of the parcels. Output For each test case, output one line containing \\"Case #x: y\\", where x is the case number (starting from 1) and y is the minimum number of trucks required to deliver all parcels. CONSTRAINTS 1 ≤ T ≤ 1000. 1 ≤ N ≤ 100. 1 ≤ C ≤ 1000. 1 ≤ weight of each parcel ≤ C. SAMPLE INPUT 2 4 10 2 3 5 8 3 15 5 9 12 SAMPLE OUTPUT Case #1: 2 Case #2: 2 Explanation In Case #1, one possible way to minimize the number of trucks is to put parcels with weights (2, 8) in one truck and parcels with weights (3, 5) in another truck. This way, the total weight in each truck does not exceed the capacity of 10, and only two trucks are needed. In Case #2, one possible way to minimize the number of trucks is to put parcels with weights (5, 9) in one truck and the parcel with weight 12 in another truck. This way, the total weight in each truck does not exceed the capacity of 15, and only two trucks are needed.","solution":"def min_trucks_required(num_cases, cases): results = [] for i in range(num_cases): N, C, parcels = cases[i] parcels.sort(reverse=True) trucks = 0 used = [False] * N for j in range(N): if not used[j]: weight = parcels[j] used[j] = True trucks += 1 for k in range(j + 1, N): if not used[k] and weight + parcels[k] <= C: weight += parcels[k] used[k] = True results.append(f\\"Case #{i + 1}: {trucks}\\") return results"},{"question":"You are given a square matrix of integers and a target integer. Write a program to determine if there is a sequence in the matrix that sums up to the target integer. The sequence can start from any cell and move to one of the 8 possible adjacent cells (vertically, horizontally, or diagonally). Input The first line contains two integers n and target (1 ≤ n ≤ 10, -10^9 ≤ target ≤ 10^9) — the dimensions of the matrix and the target sum. Each of the next n lines contains n space-separated integers — the elements of the matrix. Each integer in the matrix is between -1000 and 1000. Output Print \\"YES\\" if there is a sequence whose sum equals the target integer, otherwise, print \\"NO\\". Example Input 3 8 1 2 3 4 5 6 7 8 9 Output YES Input 3 15 1 -1 1 -1 1 -1 1 -1 1 Output NO Note In the first example, one possible sequence that sums to 8 is 1->2->5, since 1+2+5=8. In the second example, there is no sequence that can sum to 15.","solution":"def is_target_sum_in_matrix(n, target, matrix): def dfs(x, y, current_sum): if current_sum == target: return True visited.add((x, y)) # 8 possible directions for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited: if dfs(nx, ny, current_sum + matrix[nx][ny]): return True visited.discard((x, y)) return False for i in range(n): for j in range(n): visited = set() if dfs(i, j, matrix[i][j]): return \\"YES\\" return \\"NO\\""},{"question":"Stephen is a data analyst who regularly deals with datasets containing different integer values. One of the tasks he often performs is finding unique values in various data segments. To streamline his workflow, he decided to write a script. Given an array of integers, your task is to find the count of unique integers in a given subarray. -----Input----- The first line contains two integers n (1 ≤ n ≤ 100,000) and q (1 ≤ q ≤ 100,000) — the number of elements in the array and the number of queries respectively. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6) — the elements of the array. The next q lines contain two integers l and r (1 ≤ l ≤ r ≤ n) — specifying the subarray from index l to index r (inclusive) for which the count of unique integers should be found. -----Output----- Print q integers — each integer representing the count of unique numbers in the respective subarray. -----Examples----- Input 6 3 1 2 1 3 2 4 1 3 2 4 1 6 Output 2 3 4 Input 5 2 1 1 1 1 1 1 3 2 5 Output 1 1 -----Note----- For the first example: - The subarray from index 1 to index 3 is [1, 2, 1]. The unique elements are {1, 2}, so the output is 2. - The subarray from index 2 to index 4 is [2, 1, 3]. The unique elements are {2, 1, 3}, so the output is 3. - The subarray from index 1 to index 6 is [1, 2, 1, 3, 2, 4]. The unique elements are {1, 2, 3, 4}, so the output is 4.","solution":"def count_unique_integers(n, q, array, queries): Return the count of unique integers in the given subarrays specified by the queries. :param n: Integer representing the number of elements in the array :param q: Integer representing the number of queries :param array: List of integers representing the array :param queries: List of tuples representing the queries (l, r) :return: List of integers representing the count of unique integers in each subarray results = [] for l, r in queries: subarray = array[l-1:r] unique_elements = set(subarray) results.append(len(unique_elements)) return results"},{"question":"Write a function that takes a string and returns the first non-repeated character in the string. If all characters are repeated or if the input string is empty, the function should return an empty string. Assume the input string will only contain lowercase English letters. Examples ``` \\"abacabad\\" should return \'c\' \\"abacabaabacaba\\" should return \'\' \\"abcabcabc\\" should return \'\' \\"aabbccddeeffg\\" should return \'g\' ```","solution":"def first_non_repeated_character(s): Returns the first non-repeated character in the string. If all characters are repeated or the input string is empty, returns an empty string. char_count = {} # Count occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first character with a count of 1 for char in s: if char_count[char] == 1: return char return \'\' # Return empty string if no non-repeated character found"},{"question":"You are organizing a networking event for developers. Every time a new person arrives at the event, they form a connection with exactly one other participant at the event. The event starts with one participant, and each new participant, arriving one at a time, can choose any participant already at the event to connect with. You want to analyze the number of possible unique sets of connections formed after exactly n participants have attended the event. Define a set of connections by a list of pairs (x, y), such that x < y and (x, y) represents a connection between participant x and participant y. Given the number of participants n, find the number of unique sets of connections after all participants have attended, modulo 10^9+7. # Input The first line of the input contains an integer n (1 ≤ n ≤ 10^6), the number of participants at the event. # Output The output should be a single integer, the number of unique sets of connections that can be formed after n participants have attended, modulo 10^9+7. # Examples Input 3 Output 3 Input 4 Output 15 # Explanation In the first example, n = 3. The possible sets of connections can be represented as: 1. (1-2), (2-3) 2. (1-2), (1-3) 3. (1-3), (2-3) In the second example, n = 4. The possible sets of connections can include: 1. (1-2), (1-3), (1-4) 2. (1-2), (1-3), (2-4) 3. (1-2), (1-4), (2-3) ... and many others. After calculating all possible sets, the total comes out to 15 for n = 4.","solution":"MOD = 10**9 + 7 def unique_connections_count(n): # Use a recursive relation to calculate the result using dynamic programming if n == 1: return 1 dp = [0] * (n + 1) dp[1] = 1 for i in range(2, n + 1): dp[i] = dp[i - 1] * (2 * i - 3) % MOD return dp[n]"},{"question":"Given a directed graph with N nodes and M directed edges, find the number of Strongly Connected Components (SCCs) and determine the size of the largest SCC. A directed graph is considered strongly connected if there is a path from any node to every other node. # Input Format - The first line contains two integers N and M, representing the number of nodes and edges, respectively. - The next M lines each contain two integers u and v, representing a directed edge from node u to node v. # Output Format - On the first line, output the number of SCCs in the graph. - On the second line, output the size of the largest SCC. # Constraints - 1 ≤ N ≤ 100,000 - 0 ≤ M ≤ 200,000 - 1 ≤ u, v ≤ N # Example Input ``` 5 5 1 2 2 3 3 1 4 5 5 4 ``` # Example Output ``` 2 3 ``` # Explanation The graph has two SCCs: - The first SCC contains nodes {1, 2, 3} which are strongly connected. - The second SCC contains nodes {4, 5} which are also strongly connected. The number of SCCs is 2 and the size of the largest SCC is 3 (the first SCC). # Note To solve this problem, you can use Kosaraju\'s algorithm or Tarjan\'s algorithm to find all SCCs efficiently. If needed, consider using a stack or additional data structures to manage nodes and edges during traversal. The largest SCC can be determined by tracking the size of each SCC encountered.","solution":"from collections import defaultdict, deque def find_scc_and_largest_scc_size(N, M, edges): Finds the number of Strongly Connected Components (SCCs) and the size of the largest SCC in a given directed graph. Parameters: N (int): Number of nodes M (int): Number of edges edges (list of tuples): List of directed edges (u, v) Returns: tuple: Number of SCCs, Size of the largest SCC def kosaraju(): def dfs1(v): visited[v] = True for next_node in adj[v]: if not visited[next_node]: dfs1(next_node) stack.append(v) def dfs2(v): visited[v] = True scc_size[0] += 1 for next_node in rev_adj[v]: if not visited[next_node]: dfs2(next_node) adj = defaultdict(list) rev_adj = defaultdict(list) for u, v in edges: adj[u].append(v) rev_adj[v].append(u) visited = [False] * (N + 1) stack = [] for i in range(1, N + 1): if not visited[i]: dfs1(i) visited = [False] * (N + 1) num_scc = 0 largest_scc_size = 0 while stack: node = stack.pop() if not visited[node]: scc_size = [0] dfs2(node) num_scc += 1 largest_scc_size = max(largest_scc_size, scc_size[0]) return num_scc, largest_scc_size return kosaraju() # Example usage: N = 5 M = 5 edges = [(1, 2), (2, 3), (3, 1), (4, 5), (5, 4)] print(find_scc_and_largest_scc_size(N, M, edges)) # Output: (2, 3)"},{"question":"You are given a list of integers and an integer `k`. Your task is to find the maximum length of a contiguous subarray that sums to `k`. If no such subarray exists, return 0. # Function Signature ```python def max_subarray_length(nums: List[int], k: int) -> int: ``` # Input - `nums`: List[int] (1 ≤ len(nums) ≤ 10^5, -10^4 ≤ nums[i] ≤ 10^4) - `k`: int (-10^9 ≤ k ≤ 10^9) # Output - int: The length of the longest subarray that sums to `k`. # Example ```python assert max_subarray_length([1, -1, 5, -2, 3], 3) == 4 assert max_subarray_length([-2, -1, 2, 1], 1) == 2 assert max_subarray_length([1, 1, 1], 5) == 0 assert max_subarray_length([1, -1, 1, -1, 2, 3, -2, 3, 2], 4) == 5 ```","solution":"from typing import List def max_subarray_length(nums: List[int], k: int) -> int: sum_index_map = {} current_sum = 0 max_length = 0 for i, num in enumerate(nums): current_sum += num if current_sum == k: max_length = i + 1 if current_sum - k in sum_index_map: max_length = max(max_length, i - sum_index_map[current_sum - k]) if current_sum not in sum_index_map: sum_index_map[current_sum] = i return max_length"},{"question":"Write a program that takes an integer input n and outputs a pattern of numbers in a diamond shape. The pattern should start with the number 1, ascending to n, and then descend back to 1. Each line should be centered with respect to the widest part of the diamond. Use appropriate formatting to ensure the diamond shape is correctly aligned. Example 1: Input: n = 3 Output: ``` 1 123 12345 123 1 ``` Example 2: Input: n = 4 Output: ``` 1 123 12345 1234567 12345 123 1 ``` Your Task: You don\'t need to read anything. Your task is to complete the function printDiamond(n) which takes n as the input parameter and prints the diamond pattern. Expected Time Complexity: O(n^2) Expected Space Complexity: O(1) Constraints: 1 ≤ n ≤ 50","solution":"def printDiamond(n): Prints a diamond pattern with numbers ascending to n and then descending back to 1. if n < 1 or n > 50: raise ValueError(\\"n must be between 1 and 50, inclusive.\\") # Top half of the diamond including the middle for i in range(1, n + 1): space = \' \' * (n - i) numbers = \'\'.join(str(x) for x in range(1, 2 * i)) print(space + numbers) # Bottom half of the diamond for i in range(n - 1, 0, -1): space = \' \' * (n - i) numbers = \'\'.join(str(x) for x in range(1, 2 * i)) print(space + numbers)"},{"question":"The world of Planets and Moons is interesting and full of discoveries. You are tasked with designing a simplified model of a planetary system. In this model, each planet can have one or more moons orbiting it. We will represent this in the form of a graph where each node is either a planet or a moon, and each directed edge represents a moon orbiting a planet. Your task is to determine the depth of the most distant moon from the central planet in terms of the number of hops in the graph. The depth can be understood as the maximum number of moons one must traverse from the central planet to reach the most distant moon. Input The first line contains two integers `P` and `M` denoting the number of planets and moons respectively. The next `M` lines contain two integers `u` and `v` representing that moon `v` orbits planet or moon `u`. Output The maximum depth of any moon from the central planet. Example Input: 3 3 1 2 2 3 1 4 Output: 2 Explanation Example case 1: - Planet 1 has moon 2 and moon 4 orbiting it directly. - Moon 2 has moon 3 orbiting it. Therefore, the depth is 2 (1 -> 2 -> 3). Note: - Planets are indexed from 1 to `P+M`. - There is always one central planet, which has index 1, and it is guaranteed that all moons will have a valid orbit relationship.","solution":"def max_depth(P, M, orbits): from collections import defaultdict, deque # Create an adjacency list for representing the graph graph = defaultdict(list) for u, v in orbits: graph[u].append(v) # BFS to find the maximum depth from the central planet (node 1) queue = deque([(1, 0)]) # (node, current_depth) max_depth = 0 while queue: node, depth = queue.popleft() max_depth = max(max_depth, depth) for neighbor in graph[node]: queue.append((neighbor, depth + 1)) return max_depth"},{"question":"Given a string s, find the lexicographically smallest permutation of s that has all unique characters. If no such permutation exists, return \\"no permutation\\". Input Format The first line of the input contains t, the number of test cases. Each of the next t lines contains s. Output Format For each test case, print the lexicographically smallest permutation of s with all unique characters, or \\"no permutation\\" if it is not possible. Constraints 1 ≤ t ≤ 100 1 ≤ |s| ≤ 30 s will contain only lower-case English letters. Example Input 4 google apple banana abcde Example Output gelo aelp abn abcde Explanation For the case \\"google\\", the unique characters are g, o, l, e, and the smallest permutation of these characters is \\"gelo\\". For the case \\"apple\\", the unique characters are a, p, l, e, and the smallest permutation is \\"aelp\\". For the case \\"banana\\", the unique characters are b, a, n and the smallest permutation is \\"abn\\". For the case \\"abcde\\", all characters are already unique, so the smallest permutation remains \\"abcde\\".","solution":"def smallest_unique_permutation(s): Finds the lexicographically smallest permutation of the string s that has all unique characters. If no such permutation exists, returns \'no permutation\'. unique_chars = sorted(set(s)) return \'\'.join(unique_chars) def solve(test_cases): results = [] for s in test_cases: unique_permutation = smallest_unique_permutation(s) results.append(unique_permutation) return results"},{"question":"A group of friends is planning a photo walk through their city\'s beautiful parks. The parks are connected by a network of paths. Each path connects two parks and has a specific length. The friends want to visit a subset of these parks so that the total length of the paths they walk is minimized. However, they also want to make sure that they never walk the same path more than once. You are given the total number of parks and a list of paths, where each path is represented by three integers U, V, and W, denoting that there exists a path between parks U and V with length W. Find the minimum total length of paths the friends need to walk to visit all parks while ensuring they do not walk the same path more than once. Note that the friends can start their walk from any park. -----Input----- The first line consists of a single integer T, the number of testcases. Each of the next T sets of lines describes a test case as follows: - The first line contains two integers N and M, the number of parks and the number of paths respectively. - Each of the next M lines contains three integers U, V, and W, representing a path between parks U and V with length W. -----Output----- For each test case, output a single integer denoting the minimum total length of paths required to visit all parks. If it is not possible to visit all parks, output -1. -----Constraints----- - 1 ≤ T ≤ 1000 - 2 ≤ N ≤ 10^5 - 1 ≤ M ≤ 10^6 - 1 ≤ U, V ≤ N - 1 ≤ W ≤ 10^9 - The sum of all N across all test cases will not exceed 10^6. - The sum of all M across all test cases will not exceed 10^7. -----Example----- Input: 3 4 5 1 2 1 2 3 2 3 4 3 1 3 4 1 4 5 4 2 1 2 1 3 4 2 3 3 1 2 3 2 3 4 1 3 2 Output: 6 -1 7 -----Explanation----- For the first example, you can use paths 1-2, 2-3, and 3-4 with lengths 1+2+3=6 to visit all parks. For the second example, there is no way to connect all parks as parks 1 and 2 are isolated from parks 3 and 4. For the third example, you can use paths 1-2 and 1-3 with lengths 3+4=7 to visit all parks.","solution":"class UnionFind: A class to represent a union-find (disjoint set) data structure with path compression and union by rank. def __init__(self, size): self.parent = list(range(size)) self.rank = [0] * size def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 return True return False def minimum_spanning_tree(n, edges): uf = UnionFind(n) edges.sort(key=lambda x: x[2]) mst_weight = 0 count = 0 for u, v, w in edges: if uf.union(u - 1, v - 1): mst_weight += w count += 1 if count == n - 1: break if count != n - 1: return -1 return mst_weight def solve_test_cases(t, test_cases): results = [] for n, m, edges in test_cases: result = minimum_spanning_tree(n, edges) results.append(result) return results"},{"question":"Filter Alphanumeric Characters Timmy has a string containing a mix of alphanumeric characters and special symbols. He wants to extract only the alphanumeric characters from the string, preserving their original order. Write a function that takes a single string as input and returns a string containing only the alphanumeric characters. ```python def filter_alphanumeric(input_str): # Your code here # Example print(filter_alphanumeric(\\"a1b!2@c#3d^4&e*5\\")) # Output: \\"a1b2c3d4e5\\" print(filter_alphanumeric(\\"%&^A2B3@!C\\")) # Output: \\"A2B3C\\" ``` # Constraints - The input string will be non-empty and can contain any printable ASCII characters. - The length of the input string will not exceed 1000 characters.","solution":"def filter_alphanumeric(input_str): Returns a string with only the alphanumeric characters from input_str, preserving their original order. return \'\'.join(c for c in input_str if c.isalnum())"},{"question":"A binary matrix of size n x m is given, where each element is either 0 or 1. We need to find out if there is at least one submatrix of size k x k (where k is given) that contains only 1\'s (all 1\'s submatrix). ------ Input ------ The first line contains an integer T denoting the total number of test cases. For each test case, the first line contains three integers n, m, and k. The next n lines each contain m integers, representing the matrix elements. ------ Output ------ For each test case, output \\"YES\\" or \\"NO\\" (without quotes) to indicate whether there is at least one k x k submatrix that contains only 1\'s. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ n, m ≤ 500 1 ≤ k ≤ min(n, m) Matrix elements are either 0 or 1. ----- Sample Input 1 ------ 2 3 3 2 1 1 1 1 1 1 1 1 1 4 4 3 1 1 1 0 1 1 1 0 0 0 1 1 1 1 1 1 ----- Sample Output 1 ------ YES NO","solution":"def has_all_ones_submatrix(matrix, n, m, k): # Iterate over each possible top-left corner of k x k submatrix for i in range(n - k + 1): for j in range(m - k + 1): if all(matrix[i + x][j + y] == 1 for x in range(k) for y in range(k)): return \\"YES\\" return \\"NO\\" def solve(test_cases): results = [] for case in test_cases: n, m, k, matrix = case result = has_all_ones_submatrix(matrix, n, m, k) results.append(result) return results def process_input(input_data): lines = input_data.strip().split(\\"n\\") T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): n, m, k = map(int, lines[index].split()) index += 1 matrix = [] for _ in range(n): row = list(map(int, lines[index].split())) matrix.append(row) index += 1 test_cases.append((n, m, k, matrix)) return test_cases"},{"question":"Tina loves reading books, and she likes to keep track of her reading progress. She has a very specific way of updating her reading list. She always reads books in sequence and wants to know how many pages she has read after completing a set of books. You have to help her by writing a program that calculates the total number of pages she has read given a list of books with varying number of pages. Each book has a certain number of pages. Tina will always read the books in the order they are given. Given a list of books, determine the total number of pages read after completing a certain number of books. ------ Input ------ The first line of the input contains an integer T denoting the number of test cases. Each test case begins with an integer M denoting the number of books in the list. The next line contains M space-separated integers, where each integer denotes the number of pages in a book, and an integer P which is the number of books she has finished reading. ------ Output ------ For each test case, output the total number of pages Tina has read after completing P books. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ M ≤ 1000 1 ≤ Pages in a book ≤ 1000 1 ≤ P ≤ M ------ Sample Input 1 ------ 2 5 100 200 300 400 500 3 4 500 600 700 800 2 ------ Sample Output 1 ------ 600 1100 ------ explanation 1 ------ In the first example, Tina has read 3 books which have 100, 200 and 300 pages, so the total number of pages read is 100 + 200 + 300 = 600. In the second example, she has read 2 books which have 500 and 600 pages, so the total number of pages read is 500 + 600 = 1100.","solution":"def total_pages_read(test_cases): results = [] for case in test_cases: M = case[\\"M\\"] pages = case[\\"pages\\"] P = case[\\"P\\"] results.append(sum(pages[:P])) return results"},{"question":"Alita is working with strings and needs to determine if a given string is a palindrome. A string is considered a palindrome if it reads the same forwards and backwards. Write a program to check if a given string is a palindrome. -----Constraints----- - The input string will have at least 1 character and at most 1000 characters. - The string consists of lowercase English letters only. -----Input----- The input is given from Standard Input in the following format: s -----Output----- Print \\"Yes\\" if the string is a palindrome; otherwise, print \\"No\\". -----Sample Input----- racecar -----Sample Output----- Yes Since \'racecar\' reads the same both forwards and backwards, the output is \\"Yes\\".","solution":"def is_palindrome(s): Checks if a given string is a palindrome. return s == s[::-1] # Example Usage if __name__ == \\"__main__\\": s = input().strip() if is_palindrome(s): print(\\"Yes\\") else: print(\\"No\\")"},{"question":"Write a function `swap_first_last_char` that takes a single string parameter `text`. The function should return a new string where the first and last characters of the input string are swapped. If the input string has a length of 1, return the string as it is. An empty string should also return an empty string. For example: ```python swap_first_last_char(\'hello\') ``` should return ```python \'oellh\' ``` while ```python swap_first_last_char(\'a\') ``` should return ```python \'a\' ``` and ```python swap_first_last_char(\'\') ``` should return ```python \'\' ``` You need to implement this function correctly.","solution":"def swap_first_last_char(text): Swaps the first and last characters of the input string. If the string has a length of 1 or is empty, returns the string as it is. Parameters: text (str): The input string. Returns: str: The string with first and last characters swapped. if len(text) <= 1: return text return text[-1] + text[1:-1] + text[0]"},{"question":"Sarah is playing a game with a sequence of blocks arranged in a row. Each block can either be red (R), green (G), or blue (B). She wants to replace every block in the sequence with a different color such that no two consecutive blocks are of the same color. To do this, she can change the color of any block to either of the other two colors. She would like to know the minimum number of changes required to achieve this. -----Input----- The input begins with a single integer n, the length of the sequence of blocks (1 leq n leq 100,000). The next line contains a string of n characters, each being \'R\', \'G\', or \'B\', representing the initial sequence of blocks. -----Output----- Output a single integer, the minimum number of changes required to ensure that no two consecutive blocks share the same color. -----Examples----- Sample Input: 5 RRGBB Sample Output: 2 Sample Input: 3 RGB Sample Output: 0","solution":"def min_changes_to_avoid_consecutive_blocks(n, blocks): Returns the minimum number of changes required to ensure that no two consecutive blocks share the same color. changes = 0 for i in range(1, n): if blocks[i] == blocks[i - 1]: changes += 1 if i + 1 < n: # Find a different color from the neighbors for color in \'RGB\': if color != blocks[i - 1] and color != blocks[i + 1]: blocks = blocks[:i] + color + blocks[i + 1:] break else: # Last block must be different from the previous block for color in \'RGB\': if color != blocks[i - 1]: blocks = blocks[:i] + color + blocks[i + 1:] break return changes"},{"question":"Chef is organizing a cooking competition where `n` participants will prepare dishes. Each dish has a unique taste score `t_i`. Since Chef wants a diverse variety of scores in the competition, he ensures that all scores are distinct. To make the competition more exciting, Chef decides to perform `k` different operations to adjust the taste scores. In each operation, he chooses two distinct integers `x_i` and `y_i` where `1 <= x_i, y_i <= n`, and swaps the taste scores of the dishes prepared by the participants with indices `x_i` and `y_i`. After the `k` operations, Chef wants to evaluate the diversity of the competition by finding the maximum difference in taste scores among any two dishes. Help Chef determine this maximum difference. Input - The first line contains two space-separated integers `n` and `k` (1 ≤ n, k ≤ 10^5). - The second line contains `n` space-separated integers `t_1, t_2, ..., t_n` (1 ≤ t_i ≤ 10^9), denoting the initial taste scores. - The next `k` lines contain two space-separated integers `x_i` and `y_i` (1 ≤ x_i, y_i ≤ n), representing the indices of the dishes whose taste scores will be swapped in each operation. Output - A single integer, the maximum difference in taste scores among any two dishes after the `k` operations. Examples Input 5 2 10 20 30 40 50 1 5 2 4 Output 40 Input 4 3 1 3 5 7 1 2 3 4 2 3 Output 6 Note In the first example: - Initial taste scores: 10, 20, 30, 40, 50 - After swap 1 (indices 1 and 5): 50, 20, 30, 40, 10 - After swap 2 (indices 2 and 4): 50, 40, 30, 20, 10 - Maximum difference in taste scores: 50 - 10 = 40 In the second example: - Initial taste scores: 1, 3, 5, 7 - After swap 1 (indices 1 and 2): 3, 1, 5, 7 - After swap 2 (indices 3 and 4): 3, 1, 7, 5 - After swap 3 (indices 2 and 3): 3, 7, 1, 5 - Maximum difference in taste scores: 7 - 1 = 6","solution":"def max_difference_after_swaps(n, k, taste_scores, swaps): for x, y in swaps: taste_scores[x-1], taste_scores[y-1] = taste_scores[y-1], taste_scores[x-1] return max(taste_scores) - min(taste_scores)"},{"question":"Tanya has a sequence of n integers. She says that a sequence is good if it can be split into exactly k contiguous non-empty subarrays, each having a sum of elements that is even. Alesya wants to know the number of ways to split Tanya\'s sequence to meet her criteria. Can you help her figure out the number of such ways? Input The first line contains two integers n and k (1 ≤ k ≤ n ≤ 5000) — the length of the sequence and the number of contiguous subarrays, respectively. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — elements of the sequence. Output Print a single integer — the number of ways to split the sequence into exactly k contiguous subarrays with each subarray sum being even. Example Input 5 2 1 3 2 6 4 Output 2 Note In the example, one possible way to split the sequence is [1, 3, 2] and [6, 4]. Both subarrays have even sums (6 and 10, respectively). The other possible way is [1], and [3, 2, 6, 4] which have even sums (4 and 16, respectively). Thus, there are 2 ways to split the sequence as desired.","solution":"def count_ways_to_split(n, k, sequence): Return the number of ways to split the sequence into exactly k contiguous subarrays with each subarray\'s sum being even. even_count = [0] * (n + 1) for i in range(n): even_count[i + 1] = even_count[i] + (sequence[i] % 2 == 0) from functools import lru_cache @lru_cache(None) def dp(i, j): if j == 0: return 1 if i == 0 else 0 if i == 0: return 0 ways = 0 for p in range(i): if (even_count[i] - even_count[p]) > 0: ways += dp(p, j-1) return ways return dp(n, k)"},{"question":"In a distant village, an ancient clockmaker has decided to digitize the village’s clock tower. Each clock is represented by a string of lowercase alphabetical characters, where each character represents a different gear in the clock\'s mechanism. The clockmaker has paired up a set of friends to help with this task by giving them a set of clock gears to rebuild. The challenge is: Given a list of pairs of clocks, determine the total number of unique gears present in each pair. A character represents a unique gear, and a pair of clocks may have common gears. For this problem, you will be given multiple pairs of clock strings and your task is to determine the total number of unique gears in each pair. ------ Input ------ The first line contains t, the number of test cases (1 ≤ t ≤ 20). Then t test cases follow. Each test case consists of two lines: - The first line contains a string representing the first clock\'s gears (1 ≤ length ≤ 100). - The second line contains a string representing the second clock\'s gears (1 ≤ length ≤ 100). ------ Output ------ For each test case, print in a single line the total number of unique gears found in the union of the two clock strings. ----- Sample Input 1 ------ 2 abc bcd xyz yz ----- Sample Output 1 ------ 4 3 ----- explanation 1 ------ For the first test case, the union of \\"abc\\" and \\"bcd\\" results in the unique gears: \'a\', \'b\', \'c\', \'d\'. For the second test case, the union of \\"xyz\\" and \\"yz\\" results in the unique gears: \'x\', \'y\', \'z\'.","solution":"def unique_gears_count(clock1, clock2): Returns the number of unique gears in the union of two clock strings. unique_gears = set(clock1) | set(clock2) return len(unique_gears) def process_test_cases(test_cases): Processes multiple test cases and returns the results. results = [] for clock1, clock2 in test_cases: results.append(unique_gears_count(clock1, clock2)) return results"},{"question":"You are given an array of integers where some elements appear twice and others appear once. Find all the elements that appear twice in the array. You must write an algorithm with a linear runtime complexity and use only constant extra space. Example 1: Input: nums = [4,3,2,7,8,2,3,1] Output: [2,3] Example 2: Input: nums = [1,1,2] Output: [1] Example 3: Input: nums = [1] Output: [] Constraints: - You must solve the problem in O(n) time complexity. - You must use O(1) extra space complexity. - 1 <= nums.length <= 10^5 - 1 <= nums[i] <= nums.length","solution":"def find_duplicates(nums): Given an array of integers, where some elements appear twice and others appear once, this function finds all integers that appear twice. The algorithm has a linear runtime complexity and uses constant extra space. :param nums: List[int] - The input list of integers :return: List[int] - A list of integers that appear twice in the input list duplicates = [] for num in nums: # Use the value as an index and check the sign of the element at that index if nums[abs(num) - 1] < 0: duplicates.append(abs(num)) # Flip the sign of the element at the found index to mark it as visited else: nums[abs(num) - 1] *= -1 return duplicates"},{"question":"You are given a list of numbers and a target number. Your task is to determine whether there are three distinct numbers in the list that can be added together to match the target number. If such a triplet exists, print \\"Yes\\"; otherwise, print \\"No\\". Input: - The first line contains an integer T, the number of test cases. - Each test case begins with an integer N, the number of elements in the list. - The next line contains N space-separated integers, the elements of the list. - The final line of each test case contains a single integer, the target number. Output: - For each test case, output \\"Yes\\" if there exists such a triplet, otherwise output \\"No\\". Constraints: 1 ≤ T ≤ 100 3 ≤ N ≤ 1000 -10^9 ≤ list elements ≤ 10^9 -10^9 ≤ target ≤ 10^9 SAMPLE INPUT 2 5 10 20 30 40 50 60 6 1 2 3 4 5 6 10 SAMPLE OUTPUT Yes Yes","solution":"def three_sum(lst, target): Determines if there are three distinct numbers in the list that sum up to the target. Args: lst (list): List of integers. target (int): The target sum. Returns: str: \\"Yes\\" if such a triplet exists, otherwise \\"No\\". lst.sort() n = len(lst) for i in range(n - 2): j, k = i + 1, n - 1 while j < k: curr_sum = lst[i] + lst[j] + lst[k] if curr_sum == target: return \\"Yes\\" elif curr_sum < target: j += 1 else: k -= 1 return \\"No\\" def process_test_cases(T, test_cases): results = [] for i in range(T): N, lst, target = test_cases[i] result = three_sum(lst, target) results.append(result) return results"},{"question":"You are given a set of 2D integer points and your task is to determine the number of rectangles (aligned with coordinate axes) that can be formed using these points as vertices. Input The first line contains an integer `n` (1 ≤ n ≤ 1000), the number of points. Each of the following `n` lines contains two integers `x` and `y` (0 ≤ x, y ≤ 1000) representing the coordinates of a point. Output Output a single integer — the number of rectangles that can be formed using the given points as vertices. Example Input 6 1 1 1 4 2 1 2 4 4 1 4 4 Output 3 Note In the example above, the following rectangles can be formed: 1. Using points (1,1), (1,4), (2,1), (2,4) 2. Using points (1,1), (1,4), (4,1), (4,4) 3. Using points (2,1), (2,4), (4,1), (4,4)","solution":"def count_rectangles(points): Given a list of 2D integer points, determine the number of rectangles (aligned with coordinate axes) that can be formed using these points as vertices. point_set = set(points) rectangles = 0 # Iterate over all pairs of points for i in range(len(points)): for j in range(i + 1, len(points)): x1, y1 = points[i] x2, y2 = points[j] # Check if we can form a diagonal of the rectangle if x1 != x2 and y1 != y2: # Check the opposite corners if (x1, y2) in point_set and (x2, y1) in point_set: rectangles += 1 # Each rectangle is counted twice, so divide by 2 return rectangles // 2 # Example usage: # points_input = [(1, 1), (1, 4), (2, 1), (2, 4), (4, 1), (4, 4)] # print(count_rectangles(points_input)) # Output: 3"},{"question":"Jim loves playing with prime numbers. He recently learned about prime factorization and wants to test his skill with a new challenge. Given a number N, Jim would like to find the sum of all unique prime factors of N. -----Input:----- - The first line contains an integer T, the number of test cases. - Each of the next T lines contains a single integer N. -----Output:----- For each testcase, output the sum of all unique prime factors of N in a new line. -----Constraints----- - 1 leq T leq 100 - 2 leq N leq 10^5 -----Sample Input:----- 2 12 30 -----Sample Output:----- 5 10 Explanation: - For the first test case, the prime factors of 12 are 2 and 3. Their sum is 5. - For the second test case, the prime factors of 30 are 2, 3, and 5. Their sum is 10.","solution":"def sum_of_unique_prime_factors(n): Returns the sum of all unique prime factors of n. def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True if n <= 1: return 0 prime_factors = set() # Check for number of twos while n % 2 == 0: prime_factors.add(2) n = n // 2 # Check for number of threes while n % 3 == 0: prime_factors.add(3) n = n // 3 # Now check for rest of the numbers i = 5 while i * i <= n: while n % i == 0: prime_factors.add(i) n = n // i while n % (i + 2) == 0: prime_factors.add(i + 2) n = n // (i + 2) i += 6 # If n is a prime number and greater than 2 if n > 2: prime_factors.add(n) return sum(prime_factors) def process_test_cases(test_cases): results = [] for case in test_cases: results.append(sum_of_unique_prime_factors(case)) return results"},{"question":"Write a function which, for a given integer ```n```, returns the smallest integer ```m``` such that the product of the digits of ```m``` equals ```n```. If no such integer exists, return ```-1```. The returned integer ```m``` must be greater than or equal to 10 (single-digit integers are not allowed), and the function should handle edge cases where ```n``` is 0 or negative. ``` find_integer(5) => 15 find_integer(12) => 26 find_integer(17) => -1 find_integer(36) => 49 find_integer(0) => -1 ``` Definitions: - If ```n``` is 5, the smallest ```m``` where the product of its digits is 5 is 15 (1 * 5). - If ```n``` is 12, the smallest ```m``` where the product of its digits is 12 is 26 (2 * 6). - If ```n``` is 0 or negative, return -1 since no such m exists.","solution":"def find_integer(n): Returns the smallest integer m such that the product of the digits of m equals n. If no such integer exists, return -1. Parameters: n (int): Integer for which to find the smallest integer m. Returns: int: The smallest integer m where product of its digits equals n or -1 if no such m exists. if n <= 0: return -1 # Check for single digit factorization if n < 10: return n + 10 factors = [] for i in range(9, 1, -1): while n % i == 0: factors.append(i) n //= i if n != 1: return -1 factors = sorted(factors) m = int(\'\'.join(map(str, factors))) return m if m >= 10 else -1"},{"question":"Write a function that reverses a given string. -----Constraints----- - The input string S will consist of 1 to 100 lowercase alphabetical characters. -----Input----- Input is given from Standard Input in the following format: S -----Output----- Print the reversed string. -----Sample Input----- hello -----Sample Output----- olleh","solution":"def reverse_string(S): Returns the reversed string of the given string S. Args: S (str): A string of 1 to 100 lowercase alphabetical characters. Returns: str: The reversed string. return S[::-1]"},{"question":"Given a set of numbers, return all possible subsets of the set. The solutions should not contain duplicate subsets, even if the input set contains duplicates, and the order of subsets does not matter. Example 1: Input: nums = [1, 2, 2] Output: [[], [1], [2], [1,2], [2,2], [1,2,2]] Example 2: Input: nums = [0] Output: [[], [0]] Your Task: You don\'t need to read or print anything. Your task is to complete the function findSubsets() which takes nums as input parameter and returns a list of lists containing all possible unique subsets. Expected Time Complexity: O(2^N) Expected Space Complexity: O(N * 2^N) for storing subsets. Constraints: 0 <= nums.length <= 10 -10 <= nums[i] <= 10","solution":"from itertools import combinations def findSubsets(nums): Returns all possible unique subsets of the given list of numbers. nums.sort() # Sort to manage duplicates result = set() for i in range(len(nums) + 1): for comb in combinations(nums, i): result.add(comb) return [list(subset) for subset in result]"},{"question":"In a distant mountain village, there is an ancient automated watering system that waters their unique terraced fields. The terraces are arranged in M rows and N columns. Each terrace can absorb a specific amount of water. The villagers want to know the maximum rectangular area of contiguous terraces that can be completely filled with water using the available supply. Each unit of area within a terrace can absorb water up to a certain height. You are given the water absorption capacity of each terrace in matrix form. You are also given the total amount of water available to the villagers. Your task is to determine the maximum rectangular area of terraces that can be completely filled using the available water. If it\'s not possible to completely fill any terraces, return 0. -----Input----- The first line of input contains two integers M and N (1 leq M, N leq 300), representing the dimensions of the terraces. The next M lines contain N integers each, with each integer representing the water absorption capacity of the terrace at that position. The last line of input contains a single integer W (1 leq W leq 10^9), the total amount of water available. -----Output----- Output a single integer, the maximum rectangular area of terraces that can be completely filled with the available water. -----Examples----- Sample Input 1: 3 3 1 2 3 4 5 6 7 8 9 30 Sample Output 1: 6 Sample Input 2: 2 2 4 5 6 7 10 Sample Output 2: 2 In the first example, the maximum rectangular area of terraces that can be completely filled is the 2x3 area with capacity values (1, 2, 3)(4, 5, 6). In the second example, the maximum rectangular area of terraces that can be completely filled is the 1x2 area with capacity values (4, 5).","solution":"def maximum_rectangular_area(M, N, capacities, W): def get_prefix_sum(matrix): prefix_sum = [[0] * (N + 1) for _ in range(M + 1)] for i in range(1, M + 1): for j in range(1, N + 1): prefix_sum[i][j] = capacities[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1] return prefix_sum def get_area_sum(prefix_sum, row1, col1, row2, col2): return prefix_sum[row2+1][col2+1] - prefix_sum[row2+1][col1] - prefix_sum[row1][col2+1] + prefix_sum[row1][col1] prefix_sum = get_prefix_sum(capacities) max_area = 0 for row1 in range(M): for row2 in range(row1, M): for col1 in range(N): for col2 in range(col1, N): area_sum = get_area_sum(prefix_sum, row1, col1, row2, col2) area = (row2 - row1 + 1) * (col2 - col1 + 1) if area_sum <= W: max_area = max(max_area, area) return max_area"},{"question":"Given an n×n matrix `matrix` where each of the rows and columns is sorted in ascending order, return all elements of the matrix in sorted order in an array. **Function Description:** Complete the function `sortedMatrixElements` in the editor below. `sortedMatrixElements` has the following parameter(s): - `matrix`: a 2D list of integers with dimension `n x n`. **Returns:** - List of integers: a list containing all matrix elements in sorted order. **Input Format:** - The first line contains an integer `n`, the dimension of the matrix. - The next `n` lines each contain `n` integers, denoting the elements of the matrix. **Constraints:** - `1 ≤ n ≤ 300` - `-10^9 ≤ matrix[i][j] ≤ 10^9` **Sample Input 0:** ``` 3 1 5 9 10 11 13 12 13 15 ``` **Sample Output 0:** ``` [1, 5, 9, 10, 11, 12, 13, 13, 15] ``` **Explanation 0:** The input matrix is: ``` 1 5 9 10 11 13 12 13 15 ``` When all elements are sorted, we get: ``` [1, 5, 9, 10, 11, 12, 13, 13, 15] ``` **Sample Input 1:** ``` 2 -5 -4 -3 -1 ``` **Sample Output 1:** ``` [-5, -4, -3, -1] ``` **Explanation 1:** The input matrix is: ``` -5 -4 -3 -1 ``` When all elements are sorted, we get: ``` [-5, -4, -3, -1] ``` **Notes:** - Each element of `matrix` will be in ascending numerical order both row-wise and column-wise. - Ensure your solution is efficient and handles the upper constraint limit effectively.","solution":"def sortedMatrixElements(matrix): Given an n×n matrix matrix where each of the rows and columns is sorted in ascending order, return all elements of the matrix in sorted order in an array. :param matrix: a 2D list of integers with dimension n x n. :return: List of integers: a list containing all matrix elements in sorted order. all_elements = [] for row in matrix: all_elements.extend(row) return sorted(all_elements)"},{"question":"Given a binary tree, write a function flattenTree() to convert the tree into a singly linked list in-place. The \\"linked list\\" should use the same TreeNode class where the right child pointer points to the next node in the list and the left child pointer is always null. The linked list should be in the same order as a pre-order traversal of the binary tree. Input: First line of input contains number of testcases T. For each testcase, there will be a single line of input, which will be the serialized form of the binary tree where null nodes are indicated by \'n\' and values are comma-separated. Output: For each testcase, print the pre-order traversal of the flattened binary tree. User Task: The task is to complete the function flattenTree(), which converts the given binary tree into a singly linked list in-place. Constraints: 1 <= T <= 10 1 <= Number of nodes in the binary tree <= 1000 Value of each node is a non-negative integer. Example: Input: 2 1,2,5,3,4,n,6 1,n,2,3 Output: 1 2 3 4 5 6 1 2 3 Explanation: Testcase 1: The initial tree is: 1 / 2 5 / 3 4 6 Flattened tree: 1 -> 2 -> 3 -> 4 -> 5 -> 6 Testcase 2: The initial tree is: 1 2 / 3 Flattened tree: 1 -> 2 -> 3","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def flattenTree(root): Given the root of the binary tree, this function flattens the tree into a singly linked list in-place following the pre-order traversal. if not root: return # Using a stack to implement iterative pre-order traversal stack = [root] prev = None while stack: current = stack.pop() if prev: prev.right = current prev.left = None if current.right: stack.append(current.right) if current.left: stack.append(current.left) prev = current def buildTree(nodes): Constructs binary tree from a list of values with \'n\' representing None. if not nodes: return None root = TreeNode(int(nodes[0])) queue = [root] i = 1 while queue and i < len(nodes): current_node = queue.pop(0) if nodes[i] != \'n\': current_node.left = TreeNode(int(nodes[i])) queue.append(current_node.left) i += 1 if i < len(nodes) and nodes[i] != \'n\': current_node.right = TreeNode(int(nodes[i])) queue.append(current_node.right) i += 1 return root def preOrderTraversal(root): Returns the pre-order traversal of the tree as a list. traversal = [] current = root while current: traversal.append(current.val) current = current.right return traversal def solution(test_cases): results = [] for case in test_cases: nodes = case.split(\',\') root = buildTree(nodes) flattenTree(root) results.append(\' \'.join(map(str, preOrderTraversal(root)))) return results"},{"question":"# Task Amelia is working on a text editor that helps in analyzing the frequency of alphabets in a given text. As part of this project, she needs a function that can filter out non-alphabetic characters and then calculate the frequency of each alphabet (case-insensitive) in the remaining text. Your task is to write a program that reads a string `text` and returns a dictionary with alphabets as keys and their frequencies as values. The string can include any characters, but only alphabetic characters (both uppercase and lowercase) should be considered for the frequency calculation. The result should be case-insensitive, meaning \'A\' and \'a\' should be considered the same. # Input/Output - `[input]` string `text` A string which can contain any character including alphabets, numbers, symbols, and whitespaces. 0 ≤ |text| ≤ 1000 - `[output]` a dictionary A dictionary with alphabetic characters (in lowercase) as keys and their frequencies as values. The keys in the dictionary should be sorted in alphabetical order. # Example For `text = \\"Hello, World!\\"`, the output should be `{\'d\': 1, \'e\': 1, \'h\': 1, \'l\': 3, \'o\': 2, \'r\': 1, \'w\': 1}`. For `text = \\"Coding is fun! 123\\"`, the output should be `{\'c\': 1, \'d\': 1, \'f\': 1, \'g\': 1, \'i\': 2, \'n\': 2, \'o\': 1, \'s\': 1, \'u\': 1}`.","solution":"def alphabet_frequency(text): Returns a dictionary with alphabets as keys and their frequencies as values. Non-alphabetic characters are ignored and all alphabetic characters are treated case-insensitively. from collections import Counter # Filter only alphabetic characters and convert to lowercase filtered_text = [char.lower() for char in text if char.isalpha()] # Count frequencies frequency = Counter(filtered_text) # Sort the dictionary by keys and return return dict(sorted(frequency.items()))"},{"question":"Problem Description John is interested in patterns and numbers. He wants to write a program that generates a right-aligned pyramid pattern consisting of consecutive numbers up to a specified height. Help John by writing a program to achieve this task. Input Format Each line of input consists of an integer h indicating the height of the pyramid. If the height h is not a valid positive integer or is less than 2, input is invalid. Output Format For each valid input, output the corresponding pyramid pattern. Ensure each level of the pyramid is right-aligned with the entire pyramid width. For invalid input, display \\"INVALID\\". Separate output for each test case with an empty line. Constraints 2 ≤ h ≤ 15 SAMPLE INPUT 1 3 5 8 -1 SAMPLE OUTPUT INVALID 1 2 2 3 3 3 1 2 2 3 3 3 4 4 4 4 5 5 5 5 5 1 2 2 3 3 3 4 4 4 4 5 5 5 5 5 6 6 6 6 6 6 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 INVALID","solution":"def generate_pyramid(height): if not isinstance(height, int) or height < 2 or height > 15: return \\"INVALID\\" result = [] for i in range(1, height + 1): row = \\" \\" * (height - i) + (\\" \\".join([str(i)] * i)) result.append(row) return \\"n\\".join(result) def process_inputs(inputs): results = [] for height in inputs: results.append(generate_pyramid(height)) return \\"nn\\".join(results)"},{"question":"You are given a string containing a mix of alphabetical characters and numbers. The task is to write a function that rearranges the characters so that all the letters appear in sorted order, followed by all the numbers in sorted order. For instance: - Input: \\"d4a3b2\\" - Output: \\"abd234\\" Here, the letters \'d\', \'a\', and \'b\' are rearranged to \'a\', \'b\', and \'d\'. Similarly, the numbers \'4\', \'3\', and \'2\' are rearranged to \'2\', \'3\', and \'4\'. Function Signature: ```python def rearrange_string(input_string: str) -> str: pass ``` # Input Description - **Input:** A single string `input_string` consisting of alphanumeric characters (`1-9`, `a-z`, `A-Z`). The length of the string is between 1 and 100. # Output Description - **Output:** A single string with all letters sorted in ascending order followed by all numbers sorted in ascending order. # Constraints - The function must handle both uppercase and lowercase letters. - There are no special characters or spaces in the input string. # Example Example 1: **Input:** ```plaintext b2a1c3 ``` **Output:** ```plaintext abc123 ``` Example 2: **Input:** ```plaintext K5L2M1aA1 ``` **Output:** ```plaintext AKMLa1125 ``` # Note - Ensure that the order of letters and numbers are both preserved correctly after sorting. Lowercase and uppercase letters should be handled independently, and only sorting within their respective categories.","solution":"def rearrange_string(input_string: str) -> str: Rearranges the input string so that all letters appear in sorted order, followed by all numbers in sorted order. letters = [] numbers = [] for char in input_string: if char.isdigit(): numbers.append(char) else: letters.append(char) # Sort letters and numbers separately letters_sorted = \'\'.join(sorted(letters)) numbers_sorted = \'\'.join(sorted(numbers)) # Return concatenated result return letters_sorted + numbers_sorted"},{"question":"Design a function that takes a list of integers and an integer target, and returns a tuple of two integers from the list that sum up to the target. If such a pair does not exist, return an empty tuple. Example 1: Input: nums = [2, 7, 11, 15], target = 9 Output: (2, 7) Explanation: 2 and 7 sum up to 9. Example 2: Input: nums = [3, 2, 4], target = 6 Output: (2, 4) Explanation: 2 and 4 sum up to 6. Example 3: Input: nums = [3, 3], target = 6 Output: (3, 3) Explanation: Both 3s sum up to 6. Note: You can assume that each input would have exactly one solution, and you may not use the same element twice.","solution":"from typing import List, Tuple def two_sum(nums: List[int], target: int) -> Tuple[int, int]: Returns a tuple of two integers from the list that sum up to the target. If such a pair does not exist, returns an empty tuple. Assumes that each input would have exactly one solution, and the same element cannot be used twice. num_map = {} for num in nums: complement = target - num if complement in num_map: return (complement, num) num_map[num] = True return ()"},{"question":"Read problem statements in Mandarin Chinese and Russian. Alice and Bob are playing a game involving arrays. Alice has an array A of N integers, and Bob has another array B of N integers. Both arrays are permutations of the first N natural numbers (1 to N). The game revolves around a series of moves. In each move, Alice is asked a query about her array A, and Bob\'s response depends on comparing elements in both arrays. Specifically, the query involves two indices i and j, where 1 ≤ i, j ≤ N and Alice asks if A[i] is less than, equal to, or greater than B[j]. The task is to help Alice determine the relationship between every element A[i] in her array and the corresponding element B[i] in Bob\'s array after several queries. ------ Input ------ The first line contains a single integer T, the number of test cases. For each test case: - The first line contains an integer N, the length of the array. - The second line contains N space-separated integers representing Alice\'s array A. - The third line contains N space-separated integers representing Bob\'s array B. - The fourth line contains a single integer Q, the number of queries. - The following Q lines each contain two space-separated integers i and j, representing a query from Alice. ------ Output ------ For each query, print \\"LESS\\" if A[i] < B[j], \\"EQUAL\\" if A[i] == B[j], and \\"GREATER\\" if A[i] > B[j]. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ Q ≤ 10^5 1 ≤ A[i], B[i] ≤ N ----- Sample Input 1 ------ 1 5 3 1 5 4 2 4 5 1 3 2 3 1 2 3 3 5 5 ----- Sample Output 1 ------ LESS GREATER EQUAL","solution":"def compare_elements(test_cases): results = [] for case in test_cases: N, A, B, Q, queries = case for i, j in queries: if A[i-1] < B[j-1]: results.append(\\"LESS\\") elif A[i-1] == B[j-1]: results.append(\\"EQUAL\\") else: results.append(\\"GREATER\\") return results"},{"question":"Create a function that takes a string as input and returns the length of the longest substring with all distinct characters. - The input string will have a length of at most 10^4 characters. - The input string will contain only printable ASCII characters. For example, given the input string \\"abcabcbb\\", the function should return 3, because the longest substring with all distinct characters is \\"abc\\", which has a length of 3. Given the input string \\"bbbbb\\", the function should return 1, because the longest substring with all distinct characters is \\"b\\", which has a length of 1. Given the input string \\"pwwkew\\", the function should return 3, because the longest substring with all distinct characters is \\"wke\\", which has a length of 3. Note that \\"pwke\\" is a subsequence and not a substring.","solution":"def longest_unique_substring(s): Returns the length of the longest substring with all distinct characters. n = len(s) max_len = 0 start = 0 seen_chars = {} for end in range(n): if s[end] in seen_chars and seen_chars[s[end]] >= start: start = seen_chars[s[end]] + 1 seen_chars[s[end]] = end max_len = max(max_len, end - start + 1) return max_len"},{"question":"Given a grid of size n x m filled with digits from \'0\' to \'9\', you can perform the following operation any number of times: Choose any two adjacent cells in the grid and swap their values. Two cells are considered adjacent if they share a common edge. You want to transform the grid into a grid where each row and each column contains non-decreasing digits. Determine whether such a transformation is possible, and if it is, print \\"YES\\", otherwise print \\"NO\\". Input The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and the number of columns in the grid. Each of the next n lines contains m digits from \'0\' to \'9\' representing the grid. Output Print \\"YES\\" if it\'s possible to transform the grid into a grid with non-decreasing rows and columns. Otherwise, print \\"NO\\". Examples Input 3 3 123 456 789 Output YES Input 3 3 132 465 798 Output NO Input 1 5 12345 Output YES Note In the first example, the grid is already sorted. In the second example, it\'s impossible to transform the grid into one where each row and each column are sorted. In the third example, since there\'s only one row, it\'s trivially sorted by rows and can be considered sorted by columns as well.","solution":"def is_possible_to_sort_grid(n, m, grid): # Check each row for row in grid: if sorted(row) != list(row): return \\"NO\\" # Check each column for col in range(m): column = [grid[row][col] for row in range(n)] if sorted(column) != column: return \\"NO\\" return \\"YES\\""},{"question":"Alice and Bob are playing a game with a grid of size n x m. The grid contains cells denoted by \\".\\", signifying an open cell, and cells denoted by \\"#\\", signifying an obstacle. Alice starts from the top-left corner of the grid (1, 1), and Bob starts from the bottom-right corner of the grid (n, m). Alice and Bob can move one cell at a time in four possible directions: Up, Down, Left, Right, but they cannot pass through obstacles. The objective of the game is for Alice to meet Bob by moving to the same cell. Alice and Bob move simultaneously. You need to determine if it\'s possible for both of them to meet at some point while adhering to valid moves and avoiding obstacles. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The first line of each test case contains two integers n and m (1 ≤ n, m ≤ 50) — the dimensions of the grid. The next n lines each contain m characters, where each character is either \\".\\" or \\"#\\". Output For each test case, print \\"YES\\" if Alice and Bob can meet; otherwise, print \\"NO\\". Example Input 3 3 3 ... ..# ... 3 3 .#. # .#. 2 2 .. Output YES NO YES Note In the first test case, the grid is clear of obstacles, so Alice and Bob can meet at any open cell. For example, they can both move to cell (2, 2). In the second test case, the grid blocks all paths from (1, 1) to (3, 3), making it impossible for them to meet. In the third test case, despite the obstacle in the second row, Alice and Bob can both meet at cell (1, 2).","solution":"from collections import deque def can_meet(n, m, grid): def bfs(start): queue = deque([start]) visited = [[False] * m for _ in range(n)] visited[start[0]][start[1]] = True directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] reachable = set() while queue: x, y = queue.popleft() reachable.add((x, y)) for dx, dy in directions: new_x, new_y = x + dx, y + dy if 0 <= new_x < n and 0 <= new_y < m and not visited[new_x][new_y] and grid[new_x][new_y] == \'.\': visited[new_x][new_y] = True queue.append((new_x, new_y)) return reachable alice_reachable = bfs((0, 0)) bob_reachable = bfs((n-1, m-1)) return bool(alice_reachable & bob_reachable) def solve(t, test_cases): results = [] for i in range(t): n, m, grid = test_cases[i] if can_meet(n, m, grid): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Alice has a collection of strings, each with an identifier. She wants to find the longest common prefix among a list of strings that share a common identifier. If there are multiple strings with the same longest prefix, return the one which appears first in the list. If there is no common prefix, return an empty string. -----Input----- The first line contains a single integer, T. T test cases follow where each test case contains: - The first line of a test case contains a single integer N. - The following N lines each contain an identifier (a string) followed by another string. The identifier and string are separated by a single space. - The last line of the test case contains the identifier for which Alice wants to find the longest common prefix among all strings that share this identifier. -----Output----- For each test case, output a single line containing the longest common prefix string shared among all strings with the given identifier. If there is no common prefix, output an empty string (\\"\\"). -----Constraints----- - 1 le T le 100 - 1 le N le 10^3 - 1 le length of any string le 100 - The identifier is a non-empty string with up to 20 alphabetic characters. - All input strings contain only lowercase alphabetic characters. -----Sample Input----- 2 4 id1 banana id1 bandana id2 candy id1 banner id1 3 id3 apple id3 apricot id3 avocado id3 -----Sample Output----- ban a -----Explanation:----- In sample test case 1, the identifier is `id1`: the strings sharing the identifier `id1` are \\"banana\\", \\"bandana\\", and \\"banner\\". The longest common prefix among them is \\"ban\\". In sample test case 2, the identifier is `id3`: the strings sharing the identifier `id3` are \\"apple\\", \\"apricot\\", and \\"avocado\\". The longest common prefix among them is \\"a\\".","solution":"def longest_common_prefix(strings): Find the longest common prefix string amongst an array of strings. if not strings: return \\"\\" prefix = strings[0] for string in strings[1:]: while not string.startswith(prefix): prefix = prefix[:-1] if prefix == \\"\\": return \\"\\" return prefix def find_longest_common_prefix_for_identifier(test_cases): results = [] for case in test_cases: N, entries, identifier_query = case strings = [entry[1] for entry in entries if entry[0] == identifier_query] longest_prefix = longest_common_prefix(strings) results.append(longest_prefix) return results def process_input(input_data): lines = input_data.strip().split(\\"n\\") T = int(lines[0]) idx = 1 test_cases = [] for _ in range(T): N = int(lines[idx]) entries = [] for i in range(1, N + 1): identifier, string = lines[idx + i].split() entries.append((identifier, string)) identifier_query = lines[idx + N + 1] test_cases.append((N, entries, identifier_query)) idx += N + 2 return test_cases def main(input_data): test_cases = process_input(input_data) results = find_longest_common_prefix_for_identifier(test_cases) return \\"n\\".join(results)"},{"question":"Write a function `findCommomSubstrings` that takes in two strings and returns the longest common substrings between them. A substring is defined as a contiguous sequence of characters within a string. If there are multiple common substrings of the same maximum length, the function should return a list of all these substrings without duplicates. # Input - The function `findCommomSubstrings(s1, s2)` takes two strings `s1` and `s2`. # Output - The function returns a list of the longest common substrings between `s1` and `s2`. # Constraints - Both strings will have at least 1 character and at most 1000 characters. - The substrings should be case-sensitive. # Example ``` findCommomSubstrings(\\"ABABC\\", \\"BABCA\\") returns [\\"BABC\\"] findCommomSubstrings(\\"ABC\\", \\"XYZ\\") returns [] findCommomSubstrings(\\"bananas\\", \\"cananas\\") returns [\\"ananas\\"] ``` # Notes - If there are multiple longest common substrings of the same length, the order of substrings in the output list does not matter. - If no common substrings exist, return an empty list.","solution":"def findCommonSubstrings(s1, s2): Returns the longest common substrings between s1 and s2. len_s1 = len(s1) len_s2 = len(s2) # Initialize a matrix to store lengths of longest common suffixes of substrings lcs_suffix = [[0] * (len_s2 + 1) for i in range(len_s1 + 1)] # Store length of longest common substring longest_len = 0 # Set to store all longest common substrings common_substrings = set() # Build the lcs_suffix matrix for i in range(1, len_s1 + 1): for j in range(1, len_s2 + 1): if s1[i - 1] == s2[j - 1]: lcs_suffix[i][j] = lcs_suffix[i - 1][j - 1] + 1 if lcs_suffix[i][j] > longest_len: longest_len = lcs_suffix[i][j] common_substrings = {s1[i - longest_len:i]} elif lcs_suffix[i][j] == longest_len: common_substrings.add(s1[i - longest_len:i]) return list(common_substrings)"},{"question":"In the magical land of Alara, there are numerous villages connected by enchanted pathways. Each pathway is one-directional and has a certain magic-wear level, which denotes how many times it can be used by wizards before it vanishes and the path becomes unusable. The Grand Wizard Council has commissioned a study to determine if it\'s possible for a wizard to travel from the main village, Village 1, to each of the other villages at least once considering the magic-wear restrictions on each pathway. They want to assess if it\'s feasible without any pathways vanishing while the wizard is traveling through the network. Given n villages labeled from 1 to n and m pathways represented as triples (u, v, w) which mean there is a pathway from village u to village v that can be used up to w times before vanishing, you need to determine if it\'s possible for the wizard to travel from Village 1 to all other villages without any pathways vanishing. Input The input consists of an integer n (1 ≤ n ≤ 100000) which denotes the number of villages and an integer m (0 ≤ m ≤ 200000) which denotes the number of pathways. The next m lines each contain a triple of integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000000) describing a pathway from village u to village v that can be used w times. Output Print \\"YES\\" (without quotes) if it is possible for the wizard to travel from Village 1 to every other village at least once without making any pathway vanish. Otherwise, print \\"NO\\". Examples Input 5 6 1 2 3 1 3 1 2 3 2 2 4 1 3 4 1 4 5 2 Output YES Input 4 3 1 2 1 2 3 1 3 4 1 Output YES Input 4 3 1 2 1 2 3 1 3 4 0 Output NO","solution":"from collections import defaultdict, deque def can_travel_to_all_villages(n, m, pathways): def bfs(adj_list): visited = [False] * n queue = deque([0]) while queue: node = queue.popleft() if not visited[node]: visited[node] = True for neighbor in adj_list[node]: if not visited[neighbor]: queue.append(neighbor) return all(visited) # Create adjacency list for BFS adj_list = defaultdict(list) for u, v, w in pathways: if w > 0: # Only consider the edges that can be used at least once adj_list[u-1].append(v-1) # Check if all nodes can be visited starting from node 0 (village 1) return bfs(adj_list) # Example usage and input parsing def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) pathways = [] index = 2 for i in range(m): u = int(data[index]) v = int(data[index+1]) w = int(data[index+2]) pathways.append((u, v, w)) index += 3 if can_travel_to_all_villages(n, m, pathways): print(\\"YES\\") else: print(\\"NO\\") if __name__ == \\"__main__\\": main()"},{"question":"Write a function that takes a single array of positive integers and returns the missing number from the sequence. The array is supposed to contain all numbers from 1 to n, where n is the length of the array plus one, but one number is missing. For example, if the input array is `[1, 2, 4, 5, 6]`, the function should return `3` because `3` is the missing number in the sequence from 1 to 6. Your function should run in O(n) time complexity and use O(1) additional space. Avoid using any built-in functions other than basic arithmetic operations. Happy coding! :)","solution":"def find_missing_number(arr): Returns the missing number from the sequence. The array is supposed to contain all numbers from 1 to n, where n is the length of the array plus one, but one number is missing. Parameters: arr (list): List of positive integers where one number is missing from the sequence Returns: int: The missing number in the sequence n = len(arr) + 1 expected_sum = n * (n + 1) // 2 actual_sum = sum(arr) return expected_sum - actual_sum"},{"question":"Design an algorithm to count the number of vowels in a given string. The input will be a string containing alphabets (both uppercase and lowercase) and spaces. Only \'a\', \'e\', \'i\', \'o\', and \'u\' are considered vowels. Implement this algorithm in Python. Example 1: Input: s = \\"Hello World\\" Output: 3 Explanation: The vowels in the string are \'e\', \'o\', \'o\'. Example 2: Input: s = \\"Algorithms are fun\\" Output: 5 Explanation: The vowels in the string are \'A\', \'o\', \'i\', \'o\', \'u\'. Your Task: Implement the function countVowels(s) which takes s as an input parameter and returns the number of vowels in the input string. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: - The string length should be between 1 and 10^5 inclusive. - The string may contain both uppercase and lowercase letters, as well as spaces.","solution":"def count_vowels(s): Returns the number of vowels in the input string s. vowels = set(\'aeiouAEIOU\') count = 0 for char in s: if char in vowels: count += 1 return count"},{"question":"A store offers a special discount if a customer\'s total bill is above a certain threshold. Additionally, the store has a loyalty program where members receive an extra discount regardless of the total bill amount. You are given n customer bills and for each customer, you have to determine the final amount they need to pay after applying the respective discounts. Rules: - If the total bill amount is more than k, a discount of d_1% is applied. - Loyalty members receive an additional discount of d_2%. Your task is to calculate the final bill amount for each customer after applying the discounts. -----Input----- The first line contains an integer n (1 le n le 500), the number of customers. The second line contains an integer k (1 le k le 10^9), the amount threshold for the primary discount. The next line contains two integers d_1 and d_2 (0 le d_1, d_2 le 100), the primary discount percentage and the loyalty discount percentage, respectively. Next, n lines follow each containing a float b_i (0.0 le b_i le 10^9) and an integer m_i (either 0 or 1), representing the bill amount and whether the customer is a loyalty member (1 if loyal, 0 otherwise). -----Output----- For each customer, print the final bill amount rounded to two decimal places. -----Example----- Input 3 100 10 5 120.00 1 90.00 0 150.00 1 Output 102.60 90.00 128.25","solution":"def calculate_final_bill(n, k, d1, d2, bills): Calculate the final bill amount for each customer after applying respective discounts. Parameters: n (int): Number of customers. k (int): Threshold amount for primary discount. d1 (int): Primary discount percentage. d2 (int): Loyalty discount percentage. bills (list of tuples): Each tuple contains bill amount (float) and loyalty membership status (int). Returns: list of floats: The final bill amount for each customer rounded to two decimal places. final_bills = [] for bill, is_loyal in bills: if bill > k: bill -= bill * (d1 / 100.0) if is_loyal: bill -= bill * (d2 / 100.0) final_bills.append(round(bill, 2)) return final_bills"},{"question":"Petya has a sequence of n integers, but he accidentally shuffled it. Fortunately, he remembers the sum of the original sequence, and that it contained exactly m unique integers. Your task is to help Petya restore the original sequence or report that it\'s impossible. Input The first line contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ min(n, 100)) — the length of the sequence and the number of unique integers in it. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the shuffled sequence that Petya remembers. The third line contains one integer s (1 ≤ s ≤ 1000000) — the sum of the original sequence. Output If there is no suitable sequence, print -1. Otherwise, print the sequence of n integers that Petya might have had originally. If there are many solutions, print any of them. Examples Input 5 3 1 2 2 3 2 10 Output 1 3 2 2 2 Input 3 2 5 5 5 17 Output -1 Note In the first example, there are several possible sequences that Petya could have had, such as {1, 2, 3, 2, 2} or {2, 1, 3, 2, 2}. Both sum to 10 and have the 3 unique integers {1, 2, 3} as per the constraints. In the second example, it\'s not possible to have a sequence of 3 integers summing to 17 and containing exactly 2 unique elements, which is why the output is -1.","solution":"def restore_sequence(n, m, a, s): from itertools import permutations from collections import Counter def check_sequence(seq): return sum(seq) == s and len(set(seq)) == m # Generate permutations of the given sequence for perm in permutations(a): if check_sequence(perm): return list(perm) return -1 # Example usage: # print(restore_sequence(5, 3, [1, 2, 2, 3, 2], 10)) # Output: [1, 3, 2, 2, 2] # print(restore_sequence(3, 2, [5, 5, 5], 17)) # Output: -1"},{"question":"You are given a network of n computers, where each computer is assigned a unique ID from 1 to n. Some of these computers are directly connected by communication channels, and some are not. Your task is to determine whether all the computers in the network are connected either directly or indirectly through other computers. For example, given n = 4 and the following communication channels: - Computer 1 is connected to Computer 2. - Computer 2 is connected to Computer 3. - Computer 4 is not connected to any other computer. In this case, not all computers are connected. To model the computer network, you can use an undirected graph where nodes represent computers and edges represent communication channels. -----Input----- Each input will consist of a single test case. Note that your program may be run multiple times with different inputs. Each test case will begin with an integer n geq 1 indicating the number of computers. Following the first line, there will be an integer m geq 0 indicating the number of communication channels. The next m lines will each contain a pair of integers a and b (1 le a, b le n), indicating that Computer a and Computer b are directly connected by a communication channel. -----Output----- Output \\"YES\\" (without quotes) if all computers are connected (directly or indirectly) and \\"NO\\" (without quotes) otherwise. -----Examples----- Sample Input 1: 4 3 1 2 2 3 2 4 Sample Output 1: YES Sample Input 2: 4 2 1 2 2 3 Sample Output 2: NO Sample Input 3: 1 0 Sample Output 3: YES","solution":"def are_all_computers_connected(n, m, connections): from collections import defaultdict, deque if n == 1: return \\"YES\\" graph = defaultdict(list) for a, b in connections: graph[a].append(b) graph[b].append(a) visited = set() queue = deque([1]) # start BFS from the node 1 (any node would suffice) while queue: node = queue.popleft() if node not in visited: visited.add(node) for neighbor in graph[node]: if neighbor not in visited: queue.append(neighbor) return \\"YES\\" if len(visited) == n else \\"NO\\""},{"question":"You are tasked with building a system that identifies and expands abbreviations in a given text. Given a list of known abbreviations, your program should replace each abbreviation found in the text with its corresponding full form. Assume that the abbreviations are case-sensitive and can appear anywhere in the text but are always bounded by whitespace or punctuation marks. The abbreviations and their full forms are given as a list of tuples. The first element of the tuple is the abbreviation and the second element is the full form. Both elements consist of alphabetic characters only. The program should handle any punctuation marks properly, ensuring that punctuation is not removed or altered. -----Input----- The first line of the input contains an integer N (1 leq N leq 100), the number of abbreviations. The next N lines each contain one abbreviation and its corresponding full form separated by a space. The next line contains an integer M (1 leq M leq 500), denoting the number of lines in the text. The following M lines contain the text which may include abbreviations to be expanded. -----Output----- Output the text with all abbreviations expanded to their full forms. -----Examples----- Sample Input 1: 3 Dr Doctor St Street Mr Mister 2 Dr Smith lives on St. Patrick\'s St. Mr Johnson is their neighbor. Sample Output 1: Doctor Smith lives on Street. Patrick\'s Street. Mister Johnson is their neighbor.","solution":"import re def expand_abbreviations(abbreviations, text): Expands abbreviations in the given text based on the provided dictionary of abbreviations. Args: - abbreviations (list of tuples): Each tuple contains an abbreviation and its full form. - text (list of strings): Lines of text which may contain abbreviations. Returns: - list of strings: Text with all abbreviations expanded to their full forms. # Create a dictionary from the list of tuples for quick lookup abbr_dict = dict(abbreviations) # Process each line of the text expanded_text = [] for line in text: expanded_line = line for abbr, full_form in abbr_dict.items(): pattern = r\'b\' + re.escape(abbr) + r\'b\' expanded_line = re.sub(pattern, full_form, expanded_line) expanded_text.append(expanded_line) return expanded_text"},{"question":"Alice loves different types of sequences. One day, Bob challenged her with a new type of sequence called \\"Swapping Adjacent Sequence\\" (SAS). A sequence of length n is called SAS if any prefix of the sequence can be turned into a decreasing sequence by performing a series of adjacent swap operations. Your task is to determine if a given sequence is SAS. Input The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the sequence. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), the elements of the sequence. Output Print \\"YES\\" if the sequence is a Swapping Adjacent Sequence, otherwise print \\"NO\\". Examples Input 5 5 4 3 2 1 Output YES Input 6 4 3 5 2 6 1 Output NO","solution":"def is_sas(n, sequence): Determines if the given sequence is a Swapping Adjacent Sequence (SAS). Args: n: int - the length of the sequence. sequence: list of int - the sequence of integers. Returns: str - \\"YES\\" if the sequence is a SAS, otherwise \\"NO\\". for i in range(1, n): if sequence[i] > sequence[i-1]: return \\"NO\\" return \\"YES\\""},{"question":"You are designing a security system that uses an array of sensors to monitor a secure area. Each sensor can detect movement within a certain range. The range of the sensors is represented as intervals on a 1-dimensional line. Your task is to determine the minimum number of sensors that need to be added to ensure that the entire area from point 0 to point n is covered. A sensor can be added at any point along the line and has a fixed detection range d. Each sensor’s range is represented as an interval [x-d, x+d], where x is the position of the sensor on the line. Input The first line contains two integers n and d — the length of the area to be covered and the fixed detection range of each sensor (1 ≤ n ≤ 1000, 1 ≤ d ≤ 100). The second line contains an integer m — the number of existing sensors (0 ≤ m ≤ 100). The third line contains m space-separated integers — the positions of the existing sensors. Output The output should have a single integer — the minimum number of additional sensors needed to cover the entire area from 0 to n. Example Input 10 2 3 1 Output 2 Explanation In this example, the area from 0 to 10 needs to be covered. The existing sensor at position 1 covers the interval [-1, 3]. Thus, we need additional sensors to cover the remaining intervals [4, 6], [7, 9], and part of the interval [0, 1] and [9, 10]. Given the detection range of 2, adding two more sensors optimally covers the entire area.","solution":"def min_additional_sensors(n, d, m, positions): Determines the minimum number of additional sensors needed to ensure that the entire area from 0 to n is covered by sensors with given range d. if m == 0: # If no existing sensors, we calculate how many sensors we need for the entire area return (n + 2 * d) // (2 * d + 1) # Convert positions into intervals sensors = sorted([(max(0, p - d), min(n, p + d)) for p in positions]) # Merge overlapping or contiguous intervals merged = [] for interval in sensors: if not merged or merged[-1][1] < interval[0]: merged.append(interval) else: merged[-1] = (merged[-1][0], max(merged[-1][1], interval[1])) # Now determine the gaps between the merged intervals additional_sensors = 0 current_coverage = 0 for interval in merged: if current_coverage < interval[0]: gap_length = interval[0] - current_coverage - 1 if gap_length > 0: additional_sensors += (gap_length + 2 * d) // (2 * d + 1) current_coverage = max(current_coverage, interval[1]) # Check the remaining uncovered area from the last covered point to n if current_coverage < n: gap_length = n - current_coverage additional_sensors += (gap_length + 2 * d) // (2 * d + 1) return additional_sensors"},{"question":"Given a 2D array `matrix` of integers, determine if the matrix is Toeplitz. A matrix is Toeplitz if every diagonal from top-left to bottom-right has the same elements. More formally, a matrix is Toeplitz if and only if matrix[i][j] == matrix[i+1][j+1] for all valid i and j such that i + 1 < m and j + 1 < n, where m is the number of rows and n is the number of columns. Example 1: Input: matrix = [ [1,2,3,4], [5,1,2,3], [9,5,1,2] ] Output: true Explanation: In the above grid, the diagonals are: \\"[9]\\", \\"[5, 5]\\", \\"[1, 1, 1]\\", \\"[2, 2, 2]\\", \\"[3, 3]\\", \\"[4]\\", and in each diagonal all elements are the same, so the answer is True. Example 2: Input: matrix = [ [1,2], [2,2] ] Output: false Explanation: The diagonal \\"[1, 2]\\" has different elements, so the answer is False. Note: 1. matrix will be a 2D array of integers. 2. matrix will have a minimum size of 1x1 and a maximum size of 100x100.","solution":"def is_toeplitz_matrix(matrix): Check if the given 2D matrix is a Toeplitz matrix. A matrix is Toeplitz if every diagonal from top-left to bottom-right has the same elements. Args: matrix (List[List[int]]): 2D list of integers representing the matrix. Returns: bool: True if the matrix is Toeplitz, False otherwise. rows = len(matrix) cols = len(matrix[0]) for i in range(rows - 1): for j in range(cols - 1): if matrix[i][j] != matrix[i + 1][j + 1]: return False return True"},{"question":"Background Kyouko is a software engineer working on developing an e-commerce platform. One of the key features of this platform is the ability to manage discount codes effectively. To ensure customers get the best deals, Kyouko needs to implement a feature that validates discount codes based on certain criteria. Discount codes have the following characteristics: 1. Each discount code is a string consisting of uppercase letters and digits. 2. A discount code is valid if: - It contains at least one uppercase letter. - It contains at least one digit. - It does not contain any repeating characters. Kyouko wants to write a function to check if a discount code is valid or not based on the above criteria. Problem You will be given a list of discount codes, and you need to determine which ones are valid. Input The first line of input contains an integer N (1 ≤ N ≤ 100), representing the number of discount codes. Each of the next N lines contains a discount code, which is a non-empty string of length between 1 and 100, consisting of uppercase letters and digits. Output Output N lines. For each discount code, output \\"Valid\\" if the discount code meets all the criteria, otherwise output \\"Invalid\\". Examples Input 3 A1B2C3 123456 ABCDEF Output Valid Invalid Invalid Input 4 A1X AAA111 X1Y2Z3 AAAAA1111 Output Valid Invalid Valid Invalid","solution":"def is_valid_discount_code(code): Determines if a discount code is valid based on the following criteria: - It contains at least one uppercase letter. - It contains at least one digit. - It does not contain any repeating characters. Args: code (str): The discount code to validate. Returns: str: \\"Valid\\" if the discount code meets all the criteria, otherwise \\"Invalid\\". has_uppercase = False has_digit = False seen_characters = set() for char in code: if char.isupper(): has_uppercase = True if char.isdigit(): has_digit = True if char in seen_characters: return \\"Invalid\\" seen_characters.add(char) if has_uppercase and has_digit: return \\"Valid\\" else: return \\"Invalid\\" def validate_discount_codes(codes): Validates a list of discount codes. Args: codes (list): List of discount codes to validate. Returns: list: List of results (\\"Valid\\" or \\"Invalid\\") for each discount code. return [is_valid_discount_code(code) for code in codes]"},{"question":"You are given an array of positive integers representing the weights of various items. Your task is to pack these items into containers such that each container has a maximum weight capacity. Given the array of item weights and a container weight capacity, determine the minimum number of containers required to pack all the items. Input: - The first line contains an integer N, the number of items. - The second line contains N space-separated integers, each representing the weight of an item. - The third line contains a single integer W, the weight capacity of each container. Output: - Output a single integer, the minimum number of containers required to pack all the items. Constraints: - 1 ≤ N ≤ 10^5 - 1 ≤ weight of each item ≤ W - 1 ≤ W ≤ 10^9 Example: Input: 5 2 3 5 7 1 10 Output: 2 Explanation: One optimal way to pack the items is: - First container: 7 + 3 (total weight = 10) - Second container: 5 + 2 + 1 (total weight = 8) So, the minimum number of containers required is 2.","solution":"def min_containers(n, weights, W): Returns the minimum number of containers required to pack all the items. :param n: int, number of items :param weights: list of int, weights of the items :param W: int, maximum weight capacity of each container :return: int, minimum number of containers required # Sort weights in descending order to pack heavier items first weights.sort(reverse=True) containers = 0 while weights: container_capacity = W i = 0 while i < len(weights): if weights[i] <= container_capacity: container_capacity -= weights[i] weights.pop(i) else: i += 1 containers += 1 return containers"},{"question":"Given a positive integer N representing the number of rows, print a Pascal\'s Triangle of N rows. Pascal\'s Triangle is defined as follows: - The first row is [1]. - Each subsequent row is constructed by adding the number above and to the left with the number above and to the right, treating blank entries as 0. Example 1: Input: N = 2 Output: 1 1 1 Explanation: The first row is [1], and the second row is obtained by adding 0 + 1 and 1 + 0, yielding [1, 1]. Example 2: Input: N = 4 Output: 1 1 1 1 2 1 1 3 3 1 Explanation: The first row is [1], the second row is [1, 1], the third row is obtained by adding 0 + 1, 1 + 1, and 1 + 0, yielding [1, 2, 1], and the fourth row is obtained similarly, yielding [1, 3, 3, 1]. Your Task: You don\'t need to read input or print anything. Your task is to complete the function pascalTriangle() which takes an integer N as input parameter and returns a list of lists representing the N rows of Pascal\'s Triangle. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(N^2) (for the output array) Constraints: 1 ≤ N ≤ 30","solution":"def pascalTriangle(N): Function to generate Pascal\'s Triangle up to N rows. if N <= 0: return [] triangle = [[1]] for i in range(1, N): row = [1] for j in range(1, i): row.append(triangle[i-1][j-1] + triangle[i-1][j]) row.append(1) triangle.append(row) return triangle"},{"question":"Bob is planning to give Alice a collection of books for her birthday. He has a shelf with `n` books, where each book has a specific thickness. Bob wants to rearrange the books such that the sum of the books\' thicknesses is maximized when any contiguous segment of the shelf forms a palindrome. A palindrome is a sequence that reads the same forwards and backwards. Bob can swap the positions of any two books any number of times. Your task is to help Bob by finding out the maximum possible sum of thicknesses of any contiguous palindrome segment after arranging the books optimally. -----Input----- The first line contains a single integer `n` (1 ≤ n ≤ 10^5) — the number of books on the shelf. The second line contains `n` integers `t_1, t_2, ..., t_n` (1 ≤ t_i ≤ 1000) — the thickness of the `i`-th book. -----Output----- Print a single integer — the maximum possible sum of the books\' thicknesses of any contiguous palindrome segment after optimal rearrangement. -----Examples----- Input 5 1 4 1 4 1 Output 11 Input 4 1 2 3 4 Output 4","solution":"from collections import Counter def max_palindromic_segment_sum(n, thicknesses): Finds the maximum possible sum of thicknesses of any contiguous palindrome segment after optimal rearrangement. count = Counter(thicknesses) half_sum = 0 max_single = 0 for thickness, freq in count.items(): pairs = (freq // 2) * 2 half_sum += thickness * pairs if freq % 2 != 0: max_single = max(max_single, thickness) return half_sum + max_single"},{"question":"Given an array of integers nums, you need to find the maximum length of a subarray that contains equal number of 1\'s and 0\'s. Example 1: Input: nums = [0, 1, 0] Output: 2 Explanation: [0, 1] (or [1, 0]) is the longest subarray with equal number of 0\'s and 1\'s. Example 2: Input: nums = [0, 1, 1, 0, 1, 1, 1, 0] Output: 4 Explanation: [1, 0, 1, 0] or [0, 1, 1, 0] are the longest subarrays with equal number of 0\'s and 1\'s. Your Task: You don\'t need to read input or print anything. Complete the function findMaxLength() which takes nums as input parameter and returns the maximum length of the subarray that contains an equal number of 1\'s and 0\'s. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 <= nums.length <= 10^5 nums[i] is either 0 or 1.","solution":"def findMaxLength(nums): Returns the maximum length of a subarray that contains equal number of 1\'s and 0\'s. :param nums: List[int] - List of integers containing 0\'s and 1\'s :return: int - Maximum length of the subarray count = 0 max_length = 0 count_index_map = {0: -1} # Initialized with count 0 at index -1 for i, num in enumerate(nums): count += 1 if num == 1 else -1 if count in count_index_map: max_length = max(max_length, i - count_index_map[count]) else: count_index_map[count] = i return max_length"},{"question":"In an automated warehouse, robot arms are used to manage the inventory by moving items from one location to another. The system keeps track of these movements and occasionally needs to determine the current location of a specific item. You are tasked with developing a program to assist the system in recording the movements and answering questions about the locations of items. Each item has a unique identifier and can be moved multiple times between locations. Input The input consists of multiple datasets. The first line of a dataset contains two integers N and M. N denotes the number of items (1 ≤ N ≤ 100,000), and M denotes the number of commands (1 ≤ M ≤ 100,000). Each of the next M lines corresponds to either a movement command or a query. They are given in chronological order. A movement command has the format: MOVE x y which represents moving the item with identifier x to the location y (1 ≤ x ≤ N, 1 ≤ y ≤ 1,000,000). A query has the format: WHERE x which inquires the current location of the item with identifier x (1 ≤ x ≤ N). The last dataset is followed by a line consisting of two zeros separated by a space. Output For each query, WHERE x, print the current location of the item with identifier x, followed by a newline. If the item has never been moved, assume its initial location is undefined and output UNKNOWN. Example Input 3 5 MOVE 1 100 MOVE 2 200 WHERE 1 WHERE 2 WHERE 3 2 3 MOVE 1 300 MOVE 2 400 WHERE 1 0 0 Output 100 200 UNKNOWN 300","solution":"def process_commands(commands): Processes MOVE and WHERE commands to track item locations. Parameters: commands (list): List of strings, each string is a command. Returns: list: List of results for each WHERE command. locations = {} results = [] for command in commands: parts = command.split() if parts[0] == \\"MOVE\\": item = int(parts[1]) location = int(parts[2]) locations[item] = location elif parts[0] == \\"WHERE\\": item = int(parts[1]) if item in locations: results.append(str(locations[item])) else: results.append(\\"UNKNOWN\\") return results def process_input(data): Processes the input data to separate each dataset and feed it to the process_commands function. Parameters: data (str): Multi-line string containing all data. Returns: list: List of results from all datasets. lines = data.strip().split(\\"n\\") index = 0 results = [] while index < len(lines): N, M = map(int, lines[index].split()) if N == 0 and M == 0: break commands = [] for _ in range(M): index += 1 commands.append(lines[index]) results.extend(process_commands(commands)) index += 1 return results # Example usage: # input_data = \\"3 5nMOVE 1 100nMOVE 2 200nWHERE 1nWHERE 2nWHERE 3n2 3nMOVE 1 300nMOVE 2 400nWHERE 1n0 0\\" # print(\\"n\\".join(process_input(input_data)))"},{"question":"Given a string composed of lowercase letters and a pattern string, determine if the pattern exists in the string as a subsequence. A subsequence is obtained by deleting some (possibly zero) characters from the string without changing the order of the remaining characters. Write a function that takes two strings, `s` (the main string) and `pattern` (the pattern string), and returns `True` if `pattern` is a subsequence of `s`, otherwise returns `False`. Example 1: Input: s = \\"codingisfun\\" pattern = \\"cisn\\" Output: True Explanation: \\"c\\", \\"i\\", \\"s\\", and \\"n\\" are found in sequence in \\"codingisfun\\". Example 2: Input: s = \\"codingisfun\\" pattern = \\"ciss\\" Output: False Explanation: Although \\"c\\", \\"i\\", and \\"s\\" are in sequence, there is only one \\"s\\" in \\"codingisfun\\". Your Task: This is a function problem. You don\'t need to take any input, as it is already accomplished by the driver code. You just need to complete the function `isSubsequence()` that takes two strings `s` and `pattern` as input parameters and returns `True` if `pattern` is a subsequence of `s`, otherwise returns `False`. Expected Time Complexity: O(n), where n is the length of the string `s`. Expected Auxiliary Space: O(1) Constraints: 1 ≤ len(s) ≤ 10^5 1 ≤ len(pattern) ≤ 10^4","solution":"def isSubsequence(s, pattern): Determine if the pattern string is a subsequence of the main string s. Args: s (str): The main string. pattern (str): The pattern string. Returns: bool: True if pattern is a subsequence of s, False otherwise. i, j = 0, 0 while i < len(s) and j < len(pattern): if s[i] == pattern[j]: j += 1 i += 1 return j == len(pattern)"},{"question":"Task You are given a text file that contains names and scores of students. Your task is to determine the average score for each student and then identify the top three students with the highest average scores. Each line in the text file contains a student\'s name followed by their score, separated by a comma. If a student\'s name appears multiple times in the file, you should average all their scores. Write a function `topThreeStudents` that accepts a file path as an argument and returns a list containing the names of the top three students sorted by their average scores in descending order. If there are fewer than three students, return the names of all students sorted by their average scores. In case of a tie, sort the names alphabetically. # Example Consider the content of the file \\"students.txt\\" as follows: ``` Alice,88 Bob,72 Alice,95 Charlie,85 Bob,78 Charlie,90 Daisy,93 ``` 1. Alice\'s average score is (88 + 95)/2 = 91.5 2. Bob\'s average score is (72 + 78)/2 = 75.0 3. Charlie\'s average score is (85 + 90)/2 = 87.5 4. Daisy\'s average score is 93.0 The function should return: ``` [\'Daisy\', \'Alice\', \'Charlie\'] ``` # Constraints - The text file is guaranteed to have at least one student. - Scores are positive integers. - Student names are unique. # Function signature ```python def topThreeStudents(file_path: str) -> List[str]: pass ```","solution":"def topThreeStudents(file_path: str): from collections import defaultdict student_scores = defaultdict(list) with open(file_path, \'r\') as file: for line in file: name, score = line.strip().split(\',\') score = int(score) student_scores[name].append(score) average_scores = {name: sum(scores)/len(scores) for name, scores in student_scores.items()} sorted_students = sorted(average_scores.keys(), key=lambda x: (-average_scores[x], x)) return sorted_students[:3]"},{"question":"Given a binary tree, find its maximum depth. The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node. Example: Input: 3 / 9 20 / 15 7 Output: 3 Explanation: The longest path is 3 -> 20 -> 7 (or 3 -> 20 -> 15), which has 3 nodes. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `maxDepth()` which takes the root of the tree as an input parameter and returns an integer denoting the maximum depth of the tree. Expected Time Complexity: O(N) Expected Auxiliary Space: O(H), where H is the height of the tree. Constraints: The number of nodes in the tree is in the range [0, 10^4]. The node values are in the range [-10^4, 10^4]. **Function Signature:** ``` class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def maxDepth(root: TreeNode) -> int: ```","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def maxDepth(root: TreeNode) -> int: if root is None: return 0 else: left_depth = maxDepth(root.left) right_depth = maxDepth(root.right) return max(left_depth, right_depth) + 1"},{"question":"Store and Retrieve Operations You are working on a system that provides basic data storage and retrieval functionalities. The system supports adding key-value pairs, retrieving values by keys, and deleting keys. Keys are unique, and all keys and values are positive integers. Your task is to implement a program that simulates this system and handles a series of operations. Specifically, the system should support the following operations: * `ADD key value`: Add a key-value pair to the system. If the key already exists, update its value. * `GET key`: Retrieve the value associated with the key. If the key does not exist, return \\"None\\". * `DELETE key`: Delete the key-value pair associated with the key. If the key does not exist, do nothing. Input The input consists of multiple datasets. Each dataset starts with an integer N (1 ≤ N ≤ 1000), representing the number of operations in that dataset. Each of the following N lines contains a single operation in one of the formats described above. The final line of the input is a single integer 0, indicating the end of the input. Output For each `GET` operation, output the value associated with the key or \\"None\\" if the key does not exist. All outputs for a dataset should be in order, followed by an empty line between datasets. Sample Input 4 ADD 1 10 GET 1 DELETE 1 GET 1 3 ADD 2 20 GET 2 DELETE 2 0 Sample Output 10 None 20 None","solution":"def store_and_retrieve(operations): storage = {} result = [] for operation in operations: parts = operation.split() command = parts[0] if command == \\"ADD\\": key = int(parts[1]) value = int(parts[2]) storage[key] = value elif command == \\"GET\\": key = int(parts[1]) result.append(str(storage.get(key, \\"None\\"))) elif command == \\"DELETE\\": key = int(parts[1]) if key in storage: del storage[key] return result def handle_multiple_datasets(datasets): results = [] for operations in datasets: results.extend(store_and_retrieve(operations)) results.append(\\"\\") # add an empty line after each dataset\'s output return results"},{"question":"Codexville is planning to build new software that generates customized passwords for its users. Each password must have the following characteristics: - It contains exactly `N` characters. - It includes at least one lowercase letter (`a-z`), one uppercase letter (`A-Z`), and one digit (`0-9`). - All characters of the password should be alphanumeric (i.e., either a letter or a digit). Your task is to write a function that takes an integer `N` (where 3 ≤ N ≤ 100), and generates a valid password of length N meeting the above criteria. To ensure the password is random and secure, use the Python `random` module. -----Function Signature----- ```python def generate_password(N: int) -> str: pass ``` -----Input----- - `N`: An integer representing the length of the password (3 ≤ N ≤ 100). -----Output----- - Return a string representing the generated password. -----Example----- Input ```python generate_password(6) ``` Output `\\"aB3dEf\\"` Input ```python generate_password(10) ``` Output `\\"1A9dBr4Ef5\\"` -----Explanation----- In the first example, the generated password \\"aB3dEf\\" has six characters and contains at least one lowercase letter (`a`), one uppercase letter (`B`), and one digit (`3`), fulfilling all the criteria. In the second example, the generated password \\"1A9dBr4Ef5\\" is of length ten and contains a mixture of at least one lowercase letter (`d`, `r`), uppercase letter (`A`, `B`, `E`), and digit (`1`, `9`, `4`, `5`). The actual output may vary due to the randomness, but it should always adhere to the rules specified in the problem statement.","solution":"import random import string def generate_password(N: int) -> str: Generate a random password that is N characters long, containing at least one lowercase letter, one uppercase letter, and one digit. if N < 3 or N > 100: raise ValueError(\\"Password length must be between 3 and 100.\\") password_chars = [] # At least one lowercase letter password_chars.append(random.choice(string.ascii_lowercase)) # At least one uppercase letter password_chars.append(random.choice(string.ascii_uppercase)) # At least one digit password_chars.append(random.choice(string.digits)) # Fill the rest of the password with random alphanumeric characters remaining_chars = N - 3 if remaining_chars > 0: password_chars.extend(random.choices(string.ascii_letters + string.digits, k=remaining_chars)) # Shuffle to avoid any predictable patterns random.shuffle(password_chars) return \'\'.join(password_chars)"},{"question":"You are given an array of integers where some of the elements are missing values represented by `-1`. Write an algorithm to fill in the missing values such that each `-1` is replaced by the arithmetic mean of its immediate neighbors. If a `-1` is at the beginning or end of the array, use only its single neighbor to replace it. Constraints: * The array length is at least 3. * The array has at least one `-1` and at least one integer value. * The array does not contain two `-1`s consecutively. * Array value range: -1000 to 1000 (excluding -1) Input * The first line contains an integer N (3 ≤ N ≤ 10^5), the length of the array. * The second line contains N space-separated integers representing the array. Output * Print the modified array with `-1` values replaced. Example Input 7 10 -1 5 6 -1 3 8 Output 10 7.5 5 6 4.5 3 8 Input 5 -1 3 2 -1 1 Output 3 3 2 1.5 1","solution":"def fill_missing_values(arr): Fills in the missing values represented by -1 in the array by replacing each -1 with the arithmetic mean of its immediate neighbors. If -1 is at the beginning or end of the array, use only its single neighbor to replace it. n = len(arr) for i in range(n): if arr[i] == -1: if i == 0: arr[i] = arr[i + 1] elif i == n - 1: arr[i] = arr[i - 1] else: arr[i] = (arr[i - 1] + arr[i + 1]) / 2.0 return arr"},{"question":"Create Fibonacci Sequence You are asked to generate the first N numbers in the Fibonacci sequence. Input Tips: An integer T, denoting the number of test cases, followed by T lines, each containing a single integer N. Output For each integer N given at input, output a single line containing the first N numbers in the Fibonacci sequence, separated by spaces. Constraints Should contain all the constraints on the input data that you may have. Format it like: 1 ≤ T ≤ 100 1 ≤ N ≤ 50 Input: 3 4 7 1 Output: 0 1 1 2 0 1 1 2 3 5 8 0","solution":"def generate_fibonacci(n): Returns the first n numbers of the Fibonacci sequence. :param n: Number of Fibonacci numbers to generate :type n: int :return: A list containing the first n numbers of the Fibonacci sequence :rtype: list of int if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fib_sequence = [0, 1] for _ in range(2, n): fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"Given an array of integers, return the largest product possible from three of the numbers in the array. Example 1: Input: [1, 10, 2, 6, 5, 3] Output: 300 Explanation: The largest possible product is 10 * 6 * 5 = 300. Example 2: Input: [-10, -10, 1, 3, 2] Output: 300 Explanation: The largest possible product is -10 * -10 * 3 = 300. Note: You may assume the input array has at least three integers. Try to achieve the result in linear time complexity using a single pass, if possible.","solution":"def maximum_product_of_three(nums): Returns the largest product possible from three of the numbers in the array. import sys max1 = max2 = max3 = -sys.maxsize - 1 min1 = min2 = sys.maxsize for num in nums: if num > max1: max3 = max2 max2 = max1 max1 = num elif num > max2: max3 = max2 max2 = num elif num > max3: max3 = num if num < min1: min2 = min1 min1 = num elif num < min2: min2 = num return max(max1 * max2 * max3, min1 * min2 * max1)"},{"question":"In a small village, there is a peculiar tree. This tree has n nodes (numbered 1 through n), and each node has a natural number written on it. Every day, the villagers perform a special operation: they can choose a connected subgraph (a connected subset of nodes and the edges between them) and increase the number written on each node of this subgraph by 1. Given the initial numbers written on the nodes and the adjacency list of the tree, the task is to determine the minimum number of days needed to make all the numbers on the nodes equal. Input The first line contains a single integer n (2 ≤ n ≤ 10^5) — the number of nodes in the tree. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the initial numbers written on the nodes. Each of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n) — representing an edge between nodes u and v. Output Output the minimum number of days needed to make all the numbers on the nodes equal. Examples Input 4 1 2 3 4 1 2 1 3 1 4 Output 3 Input 5 5 5 5 5 5 2 1 3 1 4 1 5 1 Output 0 Input 3 1 5 3 1 2 2 3 Output 4 Note In the first example, the tree is centered at node 1 with edges connecting nodes 1-2, 1-3, and 1-4. The minimum number of days to equalize the numbers on all nodes is 3 through the following operations: Day 1: Increase all nodes (connected subgraph with all four nodes): new node values are [2, 3, 4, 5] Day 2: Increase nodes 1 and 2 (subgraph with nodes 1 and 2): new node values are [3, 4, 4, 5] Day 3: Increase nodes 1 and 3 (subgraph with nodes 1 and 3): new node values are [4, 4, 4, 5] Day 4: Increase node 1 (subgraph with single node 1): new node values are [5, 4, 4, 5] In the second example, all numbers are already equal, so the answer is 0. In the third example, the best way to equalize the numbers on nodes requires 4 days.","solution":"def min_days_to_equalize(n, values, edges): max_value = max(values) steps_needed = 0 for value in values: steps_needed = max(steps_needed, max_value - value) return steps_needed"},{"question":"A software company is designing a distributed database system that allows querying and updating data across multiple nodes efficiently. Each node in the system can communicate with other nodes directly or indirectly to maintain data consistency. However, updates can only be propagated from one node to another through a single intermediate node or directly, but not through a chain of more than two nodes. The company is planning to create a network topology by connecting these nodes using bidirectional communication links. The objective is to minimize the cost of establishing these links while ensuring that any update made to a node can be propagated to any other node through at most one intermediate node. Your task is to write a program that determines the minimum cost to establish the required communication links to meet the above criteria. -----Input:----- - The first line of the input contains a single integer N representing the number of nodes in the distributed database system. - This is followed by N lines of input each containing N integers. - The j^{th} integer on line i represents the cost of establishing a direct communication link between node i and node j. The j^{th} integer on line i will be the same as the i^{th} integer on line j (since the links are bidirectional), and the i^{th} entry on line i will always be 0 (indicating no cost to connect a node to itself). -----Output:----- A single integer indicating the minimum total cost of establishing the required communication links to ensure update propagation through at most one intermediate node. -----Constraints:----- - 2 leq N leq 2000. - 0 leq costs given in the input leq 100000. -----Sample Input----- 4 0 2 6 8 2 0 4 7 6 4 0 3 8 7 3 0 -----Sample Output----- 7","solution":"import heapq def min_cost_to_establish_links(N, costs): # Using Prim\'s algorithm to find the minimum spanning tree (MST) min_heap = [(0, 0)] # (cost, node) visited = [False] * N total_cost = 0 edges_used = 0 while min_heap and edges_used < N: cost, node = heapq.heappop(min_heap) if not visited[node]: visited[node] = True total_cost += cost edges_used += 1 for neighbor in range(N): if not visited[neighbor]: heapq.heappush(min_heap, (costs[node][neighbor], neighbor)) return total_cost"},{"question":"A group of friends are planning a road trip and want to rent cars. Each car has a maximum seating capacity of N people. Given that there are M friends participating in the trip, determine the minimum number of cars required to accommodate all the friends comfortably. ------ Input Format ------ - The first line will contain T - the number of test cases. Then the test cases follow. - The first and only line of each test case contains two integers M, N - the number of friends and the seating capacity of one car respectively. ------ Output Format ------ For each test case, output the minimum number of cars required to take all the friends on the trip. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ M, N ≤ 1000 ----- Sample Input 1 ------ 3 12 5 9 4 6 3 ----- Sample Output 1 ------ 3 3 2 ----- explanation 1 ------ Test Case 1: There are 12 friends and each car can seat 5 people. Thus, the minimum number of cars needed is 3 (Since lceil 12 / 5 rceil = 3). Test Case 2: There are 9 friends and each car can seat 4 people. Thus, the minimum number of cars needed is 3 (Since lceil 9 / 4 rceil = 3). Test Case 3: There are 6 friends and each car can seat 3 people. Thus, the minimum number of cars needed is 2 (Since lceil 6 / 3 rceil = 2).","solution":"import math def min_cars_needed(test_cases): result = [] for m, n in test_cases: result.append(math.ceil(m / n)) return result def process_input(input_str): lines = input_str.splitlines() T = int(lines[0]) test_cases = [tuple(map(int, line.split())) for line in lines[1:T+1]] return test_cases def process_output(output): return \\"n\\".join(map(str, output)) def solve(input_str): test_cases = process_input(input_str) result = min_cars_needed(test_cases) return process_output(result)"},{"question":"A city planner needs to manage the efficient delivery of goods within a city represented by a network of bidirectional roads connecting various warehouses. The aim is to determine the shortest delivery time between certain pairs of warehouses. The roads have varying travel times, and the planner needs a tool to handle multiple delivery time queries efficiently. Each query asks for the shortest delivery time between two specific warehouses within the network at a particular moment. However, due to occasional road constructions or repairs, the network may undergo temporary changes affecting specific roads. You are to help the city planner by building a system capable of handling these requirements. Operations: 1. Update the travel time on a specific road (start, end, time). 2. Query the shortest travel time between two warehouses (warehouse1, warehouse2). Input: - The first line contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 10000), representing the number of warehouses and roads, respectively. - Each of the next m lines contains three integers u, v, t (1 ≤ u, v ≤ n, 1 ≤ t ≤ 1000), indicating there is a road between warehouse u and warehouse v with a travel time of t. - The following line contains an integer q (1 ≤ q ≤ 50000), representing the number of operations. - Each of the next q lines contains the description of one operation: - \\"1 u v t\\" indicates changing the travel time of an existing road between warehouses u and v to t. - \\"2 u v\\" requests the shortest travel time between warehouses u and v. Output: - For each query operation (type 2), print the shortest delivery time between the specified pair of warehouses. If there is no route, print -1. Example Input: ``` 5 6 1 2 10 1 3 20 2 3 5 2 4 8 3 4 15 4 5 6 5 2 1 4 1 3 4 12 2 3 5 1 1 2 7 2 1 5 ``` Example Output: ``` 23 20 36 ``` Explanation: - Initial network: 1-2 (10), 1-3 (20), 2-3 (5), 2-4 (8), 3-4 (15), 4-5 (6) - Query (2 1 4): The shortest path from 1 to 4 is 1-2-4 with a travel time of 10+8=18. - Update (1 3 4 12): Change the travel time between 3 and 4 to 12. - Query (2 3 5): The shortest path from 3 to 5 is 3-4-5 with a travel time of 12+6=18. - Update (1 1 2 7): Change the travel time between 1 and 2 to 7. - Query (2 1 5): The shortest path from 1 to 5 is 1-2-4-5 with a travel time of 7+8+6=21.","solution":"import heapq def initialize_graph(n, m, roads): graph = {i: [] for i in range(1, n + 1)} for u, v, t in roads: graph[u].append((v, t)) graph[v].append((u, t)) return graph def dijkstra(graph, start, n): distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[start] = 0 pq = [(0, start)] while pq: current_distance, current_node = heapq.heappop(pq) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances def update_graph(graph, u, v, t): found = False for i in range(len(graph[u])): if graph[u][i][0] == v: graph[u][i] = (v, t) found = True break if not found: graph[u].append((v, t)) found = False for i in range(len(graph[v])): if graph[v][i][0] == u: graph[v][i] = (u, t) found = True break if not found: graph[v].append((u, t)) def handle_operations(n, graph, operations): results = [] for operation in operations: if operation[0] == 1: _, u, v, t = operation update_graph(graph, u, v, t) elif operation[0] == 2: _, u, v = operation distances = dijkstra(graph, u, n) shortest_time = distances[v] if distances[v] != float(\'inf\') else -1 results.append(shortest_time) return results def solve(n, m, road_list, q, operations): graph = initialize_graph(n, m, road_list) results = handle_operations(n, graph, operations) return results"},{"question":"Given an array of n integers, each element initially pointing to itself, you are required to answer q queries of two types: 1. `1 u v` - Union the sets containing elements u and v. If both elements already belong to the same set, do nothing. 2. `2 u v` - Check if elements u and v belong to the same set. If they do, print \\"YES\\", otherwise print \\"NO\\". The operations must be efficient to handle large inputs. **Input** The first line contains two integers n and q (1 ≤ n, q ≤ 3 * 10^5) — the number of elements in the array and the number of queries. The next q lines each describe a query in one of the forms described above, `1 u v` or `2 u v` (1 ≤ u, v ≤ n). **Output** For each query of the second type, print \\"YES\\" if u and v belong to the same set, and \\"NO\\" otherwise. **Example** **Input:** ``` 5 6 1 1 2 2 1 2 1 3 4 2 1 3 1 2 3 2 1 4 ``` **Output:** ``` YES NO YES ``` **Explanation:** - Queries: - `1 1 2`: Union the sets containing 1 and 2 (set becomes {1, 2}). - `2 1 2`: Check if 1 and 2 are in the same set (Yes, set {1, 2}). - `1 3 4`: Union the sets containing 3 and 4 (set becomes {3, 4}). - `2 1 3`: Check if 1 and 3 are in the same set (No, sets are {1, 2} and {3, 4}). - `1 2 3`: Union the sets containing 2 and 3 (sets {1, 2} and {3, 4} merged into {1, 2, 3, 4}). - `2 1 4`: Check if 1 and 4 are in the same set (Yes, set {1, 2, 3, 4}).","solution":"class UnionFind: def __init__(self, n): self.parent = list(range(n + 1)) self.rank = [0] * (n + 1) def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 def process_queries(n, queries): uf = UnionFind(n) results = [] for query in queries: if query[0] == 1: uf.union(query[1], query[2]) elif query[0] == 2: if uf.find(query[1]) == uf.find(query[2]): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"# Story A famous music store offers a special discount policy for loyal customers. Each time a customer buys an album, they receive a loyalty card stamp. Once they have collected 10 stamps, they can get a free album. You need to design an application that helps the store track the number of stamps each customer has and determine when they are eligible for a free album. # Task You need to implement a function that accepts a list of transactions and returns a dictionary indicating how many stamps each customer has and how many free albums they have received. A transaction is represented as a tuple `(customer_name, \'buy\')`. # Example For the input: ```python transactions = [ (\'Alice\', \'buy\'), (\'Bob\', \'buy\'), (\'Alice\', \'buy\'), (\'Alice\', \'buy\'), (\'Bob\', \'buy\'), (\'Alice\', \'buy\'), (\'Alice\', \'buy\'), (\'Alice\', \'buy\'), (\'Alice\', \'buy\'), (\'Alice\', \'buy\'), (\'Alice\', \'buy\'), ] ``` The output should be: ```python { \'Alice\': {\'stamps\': 1, \'free_albums\': 1}, \'Bob\': {\'stamps\': 2, \'free_albums\': 0}, } ``` # Notes * The input list will contain transactions for multiple customers. * Each transaction will always be in the format `(customer_name, \'buy\')`. * When a customer reaches 10 stamps, their stamp count resets to zero, and their free album count increases by one. * Consider only \'buy\' transactions as valid. # Implementation Implement the function `track_stamps(transactions: List[Tuple[str, str]]) -> Dict[str, Dict[str, int]]`.","solution":"from typing import List, Tuple, Dict def track_stamps(transactions: List[Tuple[str, str]]) -> Dict[str, Dict[str, int]]: result = {} for customer_name, transaction in transactions: if transaction == \'buy\': if customer_name not in result: result[customer_name] = {\'stamps\': 0, \'free_albums\': 0} result[customer_name][\'stamps\'] += 1 if result[customer_name][\'stamps\'] == 10: result[customer_name][\'stamps\'] = 0 result[customer_name][\'free_albums\'] += 1 return result"},{"question":"You are given an undirected graph represented as an adjacency list. The graph contains `N` nodes and `M` edges. Each node has a value associated with it, stored in an array `values` where `values[i]` is the value of the node `i`. Write a function `find_largest_component` that returns the sum of the values of the largest connected component in the graph. Example 1: Input: N = 4, M = 2 edges = [[0, 1], [2, 3]] values = [1, 2, 3, 4] Output: 7 Explanation: There are two connected components in the graph: - Component 1: Nodes 0 and 1 with values 1 and 2 (sum = 3) - Component 2: Nodes 2 and 3 with values 3 and 4 (sum = 7) The largest component has a sum of 7. Example 2: Input: N = 3, M = 2 edges = [[0, 1], [1, 2]] values = [10, 20, 30] Output: 60 Explanation: There is one connected component in the graph: - Component: Nodes 0, 1, and 2 with values 10, 20, and 30 (sum = 60) Example 3: Input: N = 5, M = 2 edges = [[0, 1], [3, 4]] values = [5, 5, 5, 5, 5] Output: 10 Explanation: There are three connected components in the graph: - Component 1: Nodes 0 and 1 with values 5 and 5 (sum = 10) - Component 2: Nodes 3 and 4 with values 5 and 5 (sum = 10) - Component 3: Node 2 with value 5 (sum = 5) The largest component has a sum of 10. Your Task: - Implement the function `find_largest_component(N, M, edges, values)` that takes the number of nodes `N`, the number of edges `M`, a list `edges` where each element is a pair `[u, v]` denoting an edge between nodes `u` and `v`, and a list `values` of length `N` denoting the values associated with each node. The function should return the sum of the values of the largest connected component. Expected Time Complexity: O(N + M) Expected Space Complexity: O(N) Constraints: 1 ≤ N ≤ 10^5 0 ≤ M ≤ 10^5 0 ≤ values[i] ≤ 10^4","solution":"def find_largest_component(N, M, edges, values): from collections import defaultdict, deque # Create adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * N max_sum = 0 def bfs(node): queue = deque([node]) total_sum = 0 while queue: current = queue.popleft() if not visited[current]: visited[current] = True total_sum += values[current] for neighbor in graph[current]: if not visited[neighbor]: queue.append(neighbor) return total_sum for i in range(N): if not visited[i]: component_sum = bfs(i) if component_sum > max_sum: max_sum = component_sum return max_sum"},{"question":"Your task is to __Equalize Array__. You need to make all the elements in the array equal by modifying it. The modification cost is defined as the absolute difference between the current element and the value you set it to. # What you have to do? Input: Array of integers ``` 1. Find the element which minimizes the total modification cost when all elements are set to this value. 2. Return this minimum total modification cost. ``` # Some easy examples: ``` Input: [1, 3, 2] Output: 2 Explanation: The optimal value to set all elements to is 2. Modification cost = |1 - 2| + |3 - 2| + |2 - 2| = 1 + 1 + 0 = 2 Input: [4, 1, 7, 1] Output: 9 Explanation: The optimal value to set all elements to is 4. Modification cost = |4 - 4| + |1 - 4| + |7 - 4| + |1 - 4| = 0 + 3 + 3 + 3 = 9 Input: [10, 20, 30] Output: 20 Explanation: The optimal value to set all elements to is 20. Modification cost = |10 - 20| + |20 - 20| + |30 - 20| = 10 + 0 + 10 = 20 ``` Make sure to write a function that successfully processes the given input to achieve the desired output.","solution":"def min_total_modification_cost(arr): Finds the element that minimizes the total modification cost to equalize array elements, and returns the minimum total modification cost. if not arr: return 0 # The optimal element to minimize the absolute difference is the median arr.sort() median = arr[len(arr) // 2] # Calculate the total modification cost total_cost = sum(abs(x - median) for x in arr) return total_cost"},{"question":"Given an `n x n` grid representing a city map where each cell contains either a building (`1`) or an empty plot (`0`), you need to determine the number of distinct clusters of buildings. A cluster is defined as a group of adjacent buildings (horizontally or vertically, but not diagonally). # Input Format: - The first line contains an integer `n`, the dimension of the square grid. - The next `n` lines each contain `n` space-separated integers (`0` or `1`) representing the grid. # Output Format: - Print a single integer representing the number of distinct clusters of buildings. # Constraints: - `1 <= n <= 1000` # Sample Input: ``` 4 1 1 0 0 1 0 0 1 0 0 1 1 0 1 0 0 ``` # Sample Output: ``` 3 ``` # Explanation: The grid has three distinct clusters of buildings: - The first cluster includes the buildings in cells (0,0) and (0,1) - The second cluster includes the building in cell (3,1) - The third cluster includes the buildings in cells (1,3), (2,2), and (2,3) These clusters do not connect diagonally, hence considered separate clusters.","solution":"def find_clusters(grid): Returns the number of distinct clusters of buildings in the grid. n = len(grid) def dfs(x, y): stack = [(x, y)] while stack: cx, cy = stack.pop() for nx, ny in [(cx-1, cy), (cx+1, cy), (cx, cy-1), (cx, cy+1)]: if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] == 1: grid[nx][ny] = -1 stack.append((nx, ny)) clusters = 0 for i in range(n): for j in range(n): if grid[i][j] == 1: clusters += 1 grid[i][j] = -1 dfs(i, j) return clusters # Function to convert input to grid and process def number_of_clusters(n, raw_grid): grid = [list(map(int, raw_grid[i].split())) for i in range(n)] return find_clusters(grid)"},{"question":"Given an integer n, develop a function that finds the largest prime factor of n. If the number is prime, it should return the number itself. The function should be efficient, considering edge cases and large values of n. # Examples: ``` largest_prime_factor(15) --> 5 largest_prime_factor(21) --> 7 largest_prime_factor(31) --> 31 largest_prime_factor(77) --> 11 ``` The function signature would be different based on the programming language. Here is an example function signature in Python: ```python def largest_prime_factor(n: int) -> int: pass ```","solution":"def largest_prime_factor(n: int) -> int: Returns the largest prime factor of a given number n. def is_prime(x): Check if a number is prime. if x <= 1: return False if x <= 3: return True if x % 2 == 0 or x % 3 == 0: return False i = 5 while i * i <= x: if x % i == 0 or x % (i + 2) == 0: return False i += 6 return True if is_prime(n): return n largest_factor = 1 factor = 2 while factor * factor <= n: while n % factor == 0: largest_factor = factor n //= factor factor += 1 if n > 1: largest_factor = n return largest_factor"},{"question":"Create an algorithm that finds the sum of the second smallest and second largest unique elements in a given list of integers. If there are less than four unique elements, return `None`. You should implement a function `sum_of_second_smallest_and_second_largest(lst)` that takes a list of integers as input and returns either the sum of the second smallest and second largest elements, or `None` if there are less than four unique elements. # Example: For an input list `[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]`: * The unique elements are `[1, 2, 3, 4, 5, 6, 9]` * The second smallest is `2` and the second largest is `6` * The sum is `2 + 6 = 8` Result: `8` For an input list `[1, 2, 2, 3]`: * The unique elements are `[1, 2, 3]` * There are less than four unique elements Result: `None` # Constraints: * All numbers in the list are integers. * Assume the input list contains at least `1` element.","solution":"def sum_of_second_smallest_and_second_largest(lst): Returns the sum of the second smallest and second largest unique elements in the list. If there are less than four unique elements, return None. unique_elements = sorted(set(lst)) if len(unique_elements) < 4: return None second_smallest = unique_elements[1] second_largest = unique_elements[-2] return second_smallest + second_largest"},{"question":"You are given a string consisting of lowercase and uppercase alphabetic characters. Write a program to determine if the string is a palindrome, considering only alphanumeric characters and ignoring cases. Input The input contains a single string s (1 ≤ |s| ≤ 1000) — the string that needs to be checked. Output Output \\"YES\\" if the string is a palindrome and \\"NO\\" otherwise. Examples Input A man, a plan, a canal, Panama Output YES Input race a car Output NO","solution":"def is_palindrome(s): Returns \\"YES\\" if the string is a palindrome considering only alphanumeric characters and ignoring case. Otherwise, returns \\"NO\\". # Convert the string to lowercase to ignore cases s = s.lower() # Retain only alphanumeric characters alphanumeric_s = \'\'.join(char for char in s if char.isalnum()) # Check if the string is the same forwards and backwards if alphanumeric_s == alphanumeric_s[::-1]: return \\"YES\\" else: return \\"NO\\""},{"question":"A company is trying to manage its data about its employees in a more efficient manner. Each employee has a unique employee ID, name, and monthly salary. The company wants to calculate the total salary they need to pay every month, identify the employee with the highest salary, and find the median salary among all employees. Given a list of employee information in the following format: `\\"ID1|Name1|Salary1, ID2|Name2|Salary2, ID3|Name3|Salary3, ...\\"`, where each employee\'s data is separated by a comma and each piece of information within an employee\'s data is separated by a pipe (`|`), write a function that processes this string and returns the required information. Your function should return a string in the following format: `\\"Total: total_salary Highest: Name_with_highest_salary Median: median_salary\\"` For example, if the given input string is: `\\"101|Alice|5000, 102|Bob|7000, 103|Charlie|6000, 104|David|8000, 105|Eve|5500\\"` Your function should return: `\\"Total: 31500 Highest: David Median: 6000\\"` **Notes:** 1. All salaries are positive integers. 2. If there are an even number of employees, the median should be the average of the two middle salaries. 3. If the given string is empty, return `\\"Total: 0 Highest: None Median: 0\\"`. 4. Ensure the function handles edge cases such as a single employee properly.","solution":"def process_employee_data(data): if not data.strip(): return \\"Total: 0 Highest: None Median: 0\\" employees = data.split(\', \') total_salary = 0 salaries = [] highest_salary = float(\'-inf\') highest_salary_name = None for employee in employees: emp_id, name, salary = employee.split(\'|\') salary = int(salary) total_salary += salary salaries.append(salary) if salary > highest_salary: highest_salary = salary highest_salary_name = name salaries.sort() num_employees = len(salaries) if num_employees % 2 == 1: median_salary = salaries[num_employees // 2] else: median_salary = (salaries[(num_employees // 2) - 1] + salaries[num_employees // 2]) / 2 return f\\"Total: {total_salary} Highest: {highest_salary_name} Median: {int(median_salary)}\\""},{"question":"Write a program to obtain a string S and check if it is a palindrome. If the string is a palindrome, reverse its characters. Otherwise, convert all characters to uppercase. -----Input:----- - First line will contain a string S. -----Output:----- Output a single line, the transformed string according to the given condition. -----Constraints----- - The string will contain only lowercase and uppercase alphabets. - Length of the string is generally assumed to be within the range 1 to 100. -----Sample Input:----- Radar -----Sample Output:----- radaR -----EXPLANATION:----- Since \\"Radar\\" is a palindrome, its characters are reversed resulting in \\"radaR\\".","solution":"def transform_string(S): Transforms the string based on palindrome check: - If S is a palindrome, returns the reversed string. - Otherwise, returns the string in uppercase. S_normalized = S.lower() if S_normalized == S_normalized[::-1]: return S[::-1] else: return S.upper()"},{"question":"There is a software called PrimeScheduler which allows companies to efficiently schedule meetings. Due to a recent update, the software now allows multiple types of events based on users\' requirements: scheduling a new meeting, canceling an existing meeting, and querying the total number of meetings scheduled for a particular day. PrimeScheduler operates on a collection of n records of scheduled meetings, where each record contains the start and end times of a meeting, inclusive. The time for each meeting is provided in the 24-hour format without the colon (e.g., 1300 represents 1:00 PM). For simplicity, assume all the given times are valid and fall within the same day. There are q events that may happen to the schedule. There are three types of events: * 1 start end — schedule a new meeting starting at \'start\' and ending at \'end\'; * 2 start end — cancel an existing meeting that exactly matches the provided \'start\' and \'end\' times; * 3 time — query the number of meetings that are currently ongoing at the given \'time\'. Can you help manage the PrimeScheduler by handling each event efficiently? Input The first line contains two integers n and q (0 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ q ≤ 2 ⋅ 10^5). The next n lines contain two integers each, start and end (0000 ≤ start < end ≤ 2359), describing the start and end times of initially scheduled meetings. The following q lines contain descriptions of events in the format as described above: * 1 start end (0000 ≤ start < end ≤ 2359); * 2 start end (0000 ≤ start < end ≤ 2359); * 3 time (0000 ≤ time ≤ 2359). Output For each query of the third type, print the number of meetings that are ongoing at that specified time. Examples Input 3 5 900 1030 1100 1200 1500 1600 3 930 1 1400 1500 3 1430 2 1100 1200 3 930 3 1500 Output 1 1 1 1","solution":"class PrimeScheduler: def __init__(self): self.meetings = [] def add_meeting(self, start, end): self.meetings.append((start, end)) def cancel_meeting(self, start, end): if (start, end) in self.meetings: self.meetings.remove((start, end)) def query_meetings(self, time): count = 0 for start, end in self.meetings: if start <= time < end: count += 1 return count"},{"question":"James and Lily are playing a game with a list of integers. The objective of the game is to transform the list into a \\"special\\" list. A list is considered \\"special\\" if every element in the list is a multiple of 3. James can replace any number in the list with any other integer. Lily can increment or decrement any number in the list by 1. They both want to figure out the minimum number of operations required to transform the given list into a \\"special\\" list using any combination of their available moves. Given the list of integers, determine the minimum number of operations required. ------ Input Format ------ - The first line of input consists of a single integer n, the number of elements in the list. - The second line contains n space-separated integers, representing the list of integers. ------ Output Format ------ Output a single integer, the minimum number of operations required to transform the list into a \\"special\\" list. ------ Constraints ------ 1 ≤ n ≤ 100 -10^4 ≤ text{list[i]} ≤ 10^4 ------ Sample Input 1 ------ 4 1 2 3 4 ------ Sample Output 1 ------ 3 ------ Explanation 1 ------ To transform the list [1, 2, 3, 4] into a \\"special\\" list: - Replace 1 with 3 (1 operation). - Increment 2 to 3 (1 operation). - 3 is already a multiple of 3 (0 operations). - Replace 4 with 3 (1 operation). Total 3 operations.","solution":"def min_operations_to_special_list(n, arr): This function returns the minimum number of operations required to transform the list into a \\"special\\" list where every element in the list is a multiple of 3. operations = 0 for num in arr: remainder = num % 3 if remainder == 1: operations += 1 # decrement by 1 to get a multiple of 3 elif remainder == 2: operations += 1 # increment by 1 to get a multiple of 3 return operations"},{"question":"In a mystical land, there are two types of magical creatures, Dragons and Unicorns. Dragons are represented by 0 and Unicorns are represented by 1. The King of this land wants to perform a magical spell that requires separating Dragons and Unicorns into two different groups. Each group can be represented by a separate array, with all Dragons in one array and all Unicorns in another. Your task is to help the King by writing a program to achieve this separation. Input The first line of input contains T, the number of test cases. The first line of each test case contains N, the number of creatures. The next line consists of the elements of the array B. Output For each test case, output two lines. The first line should contain all the Dragons (represented by 0) and the second line should contain all the Unicorns (represented by 1). Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 100 Example Input: 2 3 0 1 0 5 1 0 1 1 0 Output: 0 0 1 0 0 1 1 1","solution":"def separate_dragons_unicorns(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] creatures = test_cases[i][1] dragons = [creature for creature in creatures if creature == 0] unicorns = [creature for creature in creatures if creature == 1] results.append((dragons, unicorns)) return results"},{"question":"Binary Search: Finding the Position Task You are given a sorted array of integers (arr) and an integer (V). Write a function to determine the position where V would fit in arr. If V is found in the array, return its index position. If it isn\'t found, return the index where V could be inserted in order to maintain the sorted order of the array. Example arr=[1,3,5,6] V=5 Return 2 for a zero-based index array because 5 is found at position 2 in the array. If V was 2, it should return 1 as the appropriate insertion position. Function Description Complete the findPosition function in the editor below. It must return an integer representing the zero-based index where V is or should be placed. findPosition has the following parameter(s): int arr[n]: a sorted array of integers int V: an integer to search for Returns int: the index of V in arr or the index where it can be inserted Input Format The first line contains an integer, V, a value to search for. The next line contains an integer, n, the size of arr. The last line contains n space-separated integers, each a value of arr[i] where 0 leq i < n. Constraints 1 leq n leq 10^5 -10^9 leq arr[i], V leq 10^9 The array arr is sorted in non-decreasing order. Sample Input 0 STDIN Function ----- -------- 5 V = 5 4 arr[] size n = 4 (not passed, see function description parameters) 1 3 5 6 arr = [1, 3, 5, 6] Sample Output 0 2 Explanation 0 V=5. The value 5 is the 3^{rd} element in the array. Its index is 2 since the array indices start from 0.","solution":"def findPosition(arr, V): Returns the index of V in arr or the index where it can be inserted to maintain sorted order. left, right = 0, len(arr) while left < right: mid = (left + right) // 2 if arr[mid] < V: left = mid + 1 else: right = mid return left"},{"question":"You are given an array of N integers and Q queries. Each query consists of two numbers: L and R (1 <= L <= R <= N). For each query, you need to determine the number of distinct elements between the L-th and R-th position in the array (both inclusive). ------ Input Format ------ - The first line contains two space-separated integers N and Q. - The second line contains N space-separated integers representing the array. - The following Q lines each contain two space-separated integers L and R representing a query. ------ Output Format ------ For each query, print a single integer, the number of distinct elements between the L-th and R-th position in the array. ------ Constraints ------ - 1 ≤ N ≤ 10^5 - 1 ≤ Q ≤ 10^5 - 1 ≤ A_i ≤ 10^9 for each valid i - 1 ≤ L ≤ R ≤ N ------ Sample Input ------ 5 3 1 2 1 3 2 1 3 2 4 1 5 ------ Sample Output ------ 2 3 3 ------ Explanation ------ For the first query, the segment [1, 2, 1] has 2 distinct elements: 1 and 2. For the second query, the segment [2, 1, 3] has 3 distinct elements: 1, 2, and 3. For the third query, the segment [1, 2, 1, 3, 2] has 3 distinct elements: 1, 2, and 3.","solution":"def distinct_elements(arr, queries): Returns the number of distinct elements in the subarray defined by each query. Parameters: arr (list): The array of integers. queries (list): A list of tuples, each containing two integers (L, R). Returns: list: A list of integers representing the number of distinct elements for each query. distinct_count = [] for L, R in queries: subarray = arr[L-1:R] distinct_count.append(len(set(subarray))) return distinct_count"},{"question":"Given an array of integers and a target integer, write a function that returns the length of the longest consecutive subsequence of integers in the array whose sum is less than or equal to the target. Example 1: Input: arr = [1, 2, 3, 4, 5], target = 11 Output: 4 Explanation: The longest consecutive subsequence whose sum is less than or equal to 11 is [1, 2, 3, 4], and its length is 4. Example 2: Input: arr = [7, 3, 5, 6], target = 12 Output: 2 Explanation: The longest consecutive subsequence whose sum is less than or equal to 12 is [3, 5], and its length is 2. Your Task: You don\'t need to read input or print anything. Your task is to complete the function longestSubsequence() which takes an array arr of integers and an integer target as input and returns the length of the longest consecutive subsequence with sum less than or equal to target. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= len(arr) <= 10^{5} 1 <= arr[i] <= 10^{4} 1 <= target <= 10^{9}","solution":"def longestSubsequence(arr, target): Returns the length of the longest consecutive subsequence in `arr` whose sum is less than or equal to `target`. n = len(arr) max_length = 0 current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum > target: current_sum -= arr[start] start += 1 max_length = max(max_length, end - start + 1) return max_length"},{"question":"Vikas and his friends are playing a game where one person gives a number and the other has to determine if it is a palindrome or not. A palindrome is a number that remains the same when its digits are reversed. Can you help Vikas\'s friends with a function that determines whether a given number is a palindrome? Input: The first line contains an integer N, denoting the number of test cases. Each test case contains a single integer X. Output: For each test case, print \\"YES\\" if X is a palindrome, otherwise print \\"NO\\". Constraints: 1 ≤ N ≤ 15 1 ≤ X ≤ 100000 SAMPLE INPUT 3 121 123 111 SAMPLE OUTPUT YES NO YES","solution":"def is_palindrome(number): Returns \'YES\' if the given number is a palindrome, otherwise returns \'NO\'. str_number = str(number) if str_number == str_number[::-1]: return \\"YES\\" else: return \\"NO\\" def check_palindromes(test_cases): For each number in test_cases, determines if it is a palindrome and returns the result as a list of \'YES\' or \'NO\'. results = [] for number in test_cases: results.append(is_palindrome(number)) return results"},{"question":"Given a string s, find the length of the longest substring without repeating characters. You must write an algorithm that solves the problem with a linear time complexity. Example 1: Input: s = \\"abcabcbb\\" Output: 3 Explanation: The answer is \\"abc\\", with the length of 3. Example 2: Input: s = \\"bbbbb\\" Output: 1 Explanation: The answer is \\"b\\", with the length of 1. Example 3: Input: s = \\"pwwkew\\" Output: 3 Explanation: The answer is \\"wke\\", with the length of 3. Notice that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. char_set = set() left = 0 result = 0 for right in range(len(s)): while s[right] in char_set: char_set.remove(s[left]) left += 1 char_set.add(s[right]) result = max(result, right - left + 1) return result"},{"question":"You are given a string s consisting only of lowercase letters. You can perform the following operation on the string any number of times: 1. Choose one of the substrings of s that has an even length and reverse it. Your task is to determine if it\'s possible to transform the string s into a palindrome using the above operation. Input The first line contains a string s (1 ≤ |s| ≤ 2·105). Output Print \\"YES\\" if it\'s possible to transform the string into a palindrome. Otherwise, print \\"NO\\". Examples Input abba Output YES Input malayalam Output YES Input abcd Output NO Note Explanation of the example: For the first input, the string \\"abba\\" is already a palindrome, so no operations are needed. For the second input, you can reverse the substring \\"ala\\" starting at position 1 to get \\"malayalam\\", which is a palindrome. For the third input, no sequence of operations can transform \\"abcd\\" into a palindrome.","solution":"def can_transform_to_palindrome(s): Determine if it\'s possible to transform the string s into a palindrome by reversing any of its even-length substrings any number of times. # Count frequency of each character freq = {} for char in s: if char in freq: freq[char] += 1 else: freq[char] = 1 # Check the number of characters with odd frequencies odd_count = sum(1 for count in freq.values() if count % 2 != 0) # For a string to become a palindrome, at most one character can have an odd frequency if odd_count > 1: return \\"NO\\" return \\"YES\\""},{"question":"You are given an array of integers and a series of queries. Each query asks for the sum of a contiguous subarray. The task is to compute the sums of the subarrays as specified by the queries efficiently. Input The first input line contains a single integer n (1 ≤ n ≤ 100000) — the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (−100000 ≤ ai ≤ 100000) — the elements of the array. The third line contains a single integer m (1 ≤ m ≤ 100000) — the number of queries. Next m lines each contain two space-separated integers li and ri (1 ≤ li ≤ ri ≤ n) — the indices of the subarray for which the sum is to be computed. Output Print m lines, each line containing a single integer — the sum of the elements in the subarray specified in the corresponding query. Examples Input 5 1 2 3 4 5 3 1 3 2 4 1 5 Output 6 9 15","solution":"def precompute_prefix_sums(arr): Precompute prefix sums of the array. Args: arr (List[int]): The input array. Returns: List[int]: The prefix sums array. prefix_sums = [0] * (len(arr) + 1) for i in range(1, len(arr) + 1): prefix_sums[i] = prefix_sums[i - 1] + arr[i - 1] return prefix_sums def sum_of_subarray(prefix_sums, li, ri): Calculate the sum of subarray from li to ri using prefix sums. Args: prefix_sums (List[int]): The prefix sums array. li (int): The starting index of the subarray. ri (int): The ending index of the subarray. Returns: int: The sum of the subarray. return prefix_sums[ri] - prefix_sums[li - 1] def solve(n, arr, m, queries): Solve the sum of subarray queries. Args: n (int): The number of elements in the array. arr (List[int]): The array of elements. m (int): The number of queries. queries (List[Tuple[int, int]]): The list of queries. Returns: List[int]: The list of results for each query. prefix_sums = precompute_prefix_sums(arr) results = [] for li, ri in queries: results.append(sum_of_subarray(prefix_sums, li, ri)) return results"},{"question":"Arun wants to donate a specific amount of money to charity. He can donate only in denominations of 10, 20, 50, or 100 dollars. If the amount he wants to donate cannot be exactly matched using these denominations, he will donate the closest amount that is less than his target donation. Write a function that calculates the amount Arun will donate based on his target donation. -----Input----- A single integer 0 < T <= 5000 - the target amount Arun wants to donate. -----Output----- Output the actual amount Arun will donate. The donated amount must be in multiples of 10, 20, 50, or 100 dollars and must be less than or equal to his target amount. -----Example - Exact Match----- Input: 150 Output: 150 -----Example - No Exact Match----- Input: 93 Output: 90","solution":"def calculate_donation(target): Returns the closest possible donation amount that is less than or equal to the target, using denominations of 10, 20, 50, or 100 dollars. possible_donations = sorted([10, 20, 50, 100], reverse=True) closest_donation = 0 for denom in possible_donations: while target >= denom: target -= denom closest_donation += denom return closest_donation"},{"question":"**Maximum Rectangular Submatrix Sum** Given an integer matrix of dimensions N x M, your task is to find the sum of the elements in the maximum sum rectangular submatrix. A submatrix is a contiguous block of the matrix obtained by deleting any number of rows and columns from the top, bottom, left, or right. **Input:** - The first line contains two integers N and M, the dimensions of the matrix. - Each of the next N lines contains M integers, representing the elements of the matrix. **Output:** - Output a single integer, the sum of the elements in the maximum sum rectangular submatrix. **Constraints:** - 1 <= N, M <= 100 - -1000 <= matrix[i][j] <= 1000 **Input example:** ``` 4 5 1 2 -1 -4 -20 -8 -3 4 2 1 3 8 10 1 3 -4 -1 1 7 -6 ``` **Output example:** ``` 29 ``` **Explanation:** The maximum sum rectangular submatrix is: ``` 3 8 10 -4 -1 1 ``` with a sum of 29.","solution":"def max_sum_rectangle(matrix): Function to find the maximum sum rectangle in a 2D matrix. :param matrix: List[List[int]] :return: int if not matrix: return 0 def kadane(arr): Helper function to implement Kadane\'s algorithm for 1D array. max_sum = float(\'-inf\') current_sum = 0 for num in arr: current_sum += num if current_sum > max_sum: max_sum = current_sum if current_sum < 0: current_sum = 0 return max_sum n = len(matrix) m = len(matrix[0]) max_sum = float(\'-inf\') for left in range(m): temp = [0] * n for right in range(left, m): for row in range(n): temp[row] += matrix[row][right] current_sum = kadane(temp) if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"The Thapar Institute plans to implement a new security feature for its digital lockers. Each locker has a unique lock combination represented by a string of characters. The strings consist only of lowercase alphabets. For facility management purposes, it is required to ensure that there are no security lapses caused by allowing lock combinations that are rotations of each other. You are given a list of lock combinations. Two strings are considered rotations of each other if they can be made identical by a series of character shifts. For example, \\"abc\\" and \\"bca\\" are rotations of each other. Your task is to implement a function that checks if there are any pairs of strings in the list that are rotations of each other. Return \\"YES\\" if such a pair exists, and \\"NO\\" otherwise. Example: • \\"abc\\", \\"bca\\", and \\"cab\\" are all rotations of each other. • \\"dog\\" and \\"god\\" are not rotations of each other. Constraints: 1 ≤ T ≤ 20 1 ≤ N ≤ 100 1 ≤ length of each string ≤ 10 Input: The first line contains an integer T— the number of test cases. The first line of each test case contains an integer N — the number of lock combinations. N lines follow, each containing a lock combination string. Output: For each test case, output \\"YES\\" if there is a pair of strings that are rotations of each other, and \\"NO\\" otherwise. SAMPLE INPUT 2 3 abc bca xyz 4 dog cat god tac SAMPLE OUTPUT YES NO","solution":"def check_rotations(test_cases): def is_rotation(s1, s2): return len(s1) == len(s2) and s2 in (s1 + s1) results = [] for test_case in test_cases: lock_combinations = test_case n = len(lock_combinations) found = False for i in range(n): for j in range(i + 1, n): if is_rotation(lock_combinations[i], lock_combinations[j]): results.append(\\"YES\\") found = True break if found: break if not found: results.append(\\"NO\\") return results"},{"question":"# Task Write a function that takes a string consisting of words separated by spaces, and returns a new string where each word is transformed such that the first character of the word is moved to the end followed by the characters \'ay\'. Punctuation should be preserved in place. # Example For `sentence = \\"hello world!\\"` The result should be `\\"ellohay orldway!\\"`. ``` \\"hello world!\\" --> \\"ellohay orldway!\\" ``` For `sentence = \\"Pig latin is cool\\"` The result should be `\\"igPay atinlay siay oolcay\\"`. ``` \\"Pig latin is cool\\" --> \\"igPay atinlay siay oolcay\\" ``` # Input/Output - `[input]` string `sentence` A string containing words separated by spaces and may include punctuation. `1 ≤ sentence.length ≤ 1000` - `[output]` a string A new string with each word transformed as described.","solution":"def pig_latin(sentence): Transforms a given sentence into Pig Latin. :param sentence: A string containing words and punctuation :return: A new string with each word transformed with Pig Latin rules. result = [] words = sentence.split(\' \') for word in words: if word.isalpha(): result.append(word[1:] + word[0] + \'ay\') else: # Split the word and punctuation punctuations = \'\'.join([char for char in word if not char.isalpha()]) clean_word = \'\'.join([char for char in word if char.isalpha()]) if clean_word: new_word = clean_word[1:] + clean_word[0] + \'ay\' else: new_word = \'\' result.append(new_word + punctuations) return \' \'.join(result)"},{"question":"# Task Given a string, find the length of the longest substring without repeating characters. # Example For `inputString = \\"abcabcbb\\"`, the output should be `3`. For `inputString = \\"bbbbb\\"`, the output should be `1`. # Input/Output - `[input]` string `inputString` A non-empty string containing only ASCII characters. Constraints: `1 ≤ inputString.length ≤ 1000.` - `[output]` an integer The length of the longest substring without repeating characters.","solution":"def length_of_longest_substring(inputString): Returns the length of the longest substring without repeating characters. char_map = {} left = 0 max_length = 0 for right, char in enumerate(inputString): if char in char_map and char_map[char] >= left: left = char_map[char] + 1 char_map[char] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"A hacker named Radoslav loves to send secret messages to his friends. He uses a special type of cipher to encode the messages before sending them. Here’s how it works: each letter in the original message is replaced by another letter, which is determined by shifting it \\"k\\" positions in the alphabet. If the shift goes past the letter ‘z’, it continues from ‘a’. Similarly, if the shift goes past ‘Z’, it continues from ‘A’. The encoding should preserve the case of the original letters, and non-letter characters should remain unchanged. Your task is to help Radoslav encode his message using this cipher. -----Input----- The first line of the input contains an integer k (1 ≤ k ≤ 25) — the number of positions each letter should be shifted. The second line contains the original message as a string. The message consists of only printable ASCII characters and its length does not exceed 1,000 characters. -----Output----- Print the encoded message. -----Examples----- Input 3 Hello, World! Output Khoor, Zruog! Input 5 ABC xyz 123 Output FGH cde 123","solution":"def encode_message(k, message): Returns the encoded message by shifting each letter in the message k positions. encoded_message = [] for char in message: if char.isupper(): encoded_message.append(chr((ord(char) - ord(\'A\') + k) % 26 + ord(\'A\'))) elif char.islower(): encoded_message.append(chr((ord(char) - ord(\'a\') + k) % 26 + ord(\'a\'))) else: encoded_message.append(char) return \'\'.join(encoded_message)"},{"question":"Little E loves playing with permutations and prime numbers. She has a collection of the first n natural numbers (1 to n) and loves creating permutations of these numbers. She defines the \\"prime distance\\" of a permutation as the number of pairs of elements (i, j) such that 1 ≤ i < j ≤ n, and the absolute difference between the positions of the elements is a prime number. Little E wants you to find the permutation of the numbers from 1 to n that maximizes the prime distance. Input The first line contains an integer n (1 ≤ n ≤ 100), the number of natural numbers Little E has. Output Print a single line containing the permutation of numbers from 1 to n that maximizes the prime distance. Example Input 4 Output 4 1 3 2 Note For the given example, Little E can select [4, 1] and [3, 2] with prime distances 1 (positions 2 and 3) and 2 (positions 3 and 4), respectively, giving the \\"prime distance\\" value of 2.","solution":"def is_prime(num): Checks if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def generate_primes_up_to(n): Generates a list of all prime numbers up to n. primes = [] for i in range(2, n + 1): if is_prime(i): primes.append(i) return primes def max_prime_distance_permutation(n): Generates a permutation of numbers from 1 to n that maximizes the prime distance. if n == 1: return [1] primes = generate_primes_up_to(n - 1) permutation = list(range(1, n + 1)) permutation.reverse() # Start with a descending order permutation. return permutation # Example usage: # output = max_prime_distance_permutation(4) # print(output) # Should output a permutation such as: [4, 3, 2, 1]"},{"question":"Input 3 3 .X. X.X .X. Output First","solution":"def check_winner(grid): Check if the first player wins based on the given 3x3 grid. def is_winner(cells): return cells == [\'X\', \'X\', \'X\'] n = 3 # assuming the grid is always 3x3 for this problem # Check rows for row in grid: if is_winner(row): return \\"First\\" # Check columns for col in range(n): if is_winner([grid[row][col] for row in range(n)]): return \\"First\\" # Check diagonals if is_winner([grid[i][i] for i in range(n)]) or is_winner([grid[i][n-i-1] for i in range(n)]): return \\"First\\" return \\"No Winner\\""},{"question":"Problem Statement Daniel enjoys playing with his collection of glass marbles. He has decided to build a structure by stacking the marbles in a pyramid fashion. He stacks them in pile(s) such that each layer is a complete row with one more marble than the row above it. For instance, with 10 marbles, he can build a pyramid with the following structure: - First layer (bottom): 4 marbles - Second layer: 3 marbles - Third layer: 2 marbles - Fourth layer (top): 1 marble Given the number of marbles Daniel has, he wonders how many complete levels he can build in the pyramid. Write a program that given a number of marbles, calculates the maximum number of complete levels Daniel can build. **Input** - An integer n (1 ≤ n ≤ 10^9) representing the number of marbles. **Output** - An integer representing the maximum number of complete levels that can be built. **Examples** Input 15 Output 5 Input 6 Output 3 **Note** In the first example with 15 marbles, the levels are built as follows: - Level 1: 1 marble - Level 2: 2 marbles - Level 3: 3 marbles - Level 4: 4 marbles - Level 5: 5 marbles In the second example with 6 marbles, the levels are built as follows: - Level 1: 1 marble - Level 2: 2 marbles - Level 3: 3 marbles","solution":"def max_pyramid_levels(n): Returns the maximum number of complete levels that can be built with n marbles. marbles_used = 0 level = 0 while marbles_used + (level + 1) <= n: level += 1 marbles_used += level return level"},{"question":"-----Problem Statement----- Alice has an array of n integers a[1], a[2], ..., a[n]. She wants to perform a series of operations to make the array beautiful. An array is considered beautiful if for each element a[i] (1 ≤ i ≤ n), the sum of all elements to its left is less than or equal to the sum of all elements to its right. Formally, an array is beautiful if for all i (1 ≤ i ≤ n), the following condition holds: sum(a[1...i-1]) ≤ sum(a[i+1...n]) Alice can shift any array element to any other position in the array in a single operation. She wants to know the minimum number of operations required to make the array beautiful. -----Input----- The first line contains a single integer T, denoting the number of test cases. Each test case consists of: - An integer n (1 ≤ n ≤ 1000), the size of the array. - Next line contains n integers a[1], a[2], ..., a[n] (-10^9 ≤ a[i] ≤ 10^9), the elements of the array. -----Output----- For each test case, print a single line containing the minimum number of operations required to make the array beautiful. -----Constraints----- - 1 ≤ T ≤ 100 -----Example----- Input: 2 5 1 2 3 4 5 4 -1 -3 -2 -4 Output: 0 2","solution":"def min_operations_to_beautiful(t, test_cases): results = [] for test in test_cases: n, arr = test sorted_arr = sorted(arr) operations = sum(1 for i in range(n) if arr[i] != sorted_arr[i]) results.append(operations) return results"},{"question":"Sarah loves playing with numbers and patterns. One day, she thought of a unique number pattern exercise for her friends. She gives them two integers `a` and `b` and asks them to create a new integer by concatenating them (in the form of \\"a concatenated with b\\") and then check if the new integer is a prime number. —Easy, right? she says with a smile. Now, Sarah is waiting for her friends\' answers. Being excited, she wants to know if the answer is correct before anyone else. Can you help her determine if the concatenated number is a prime number? Input The first line contains one integer a (1 ≤ a ≤ 100). The second line contains one integer b (1 ≤ b ≤ 100). Output Print \\"YES\\" if the concatenated number is a prime number and \\"NO\\" otherwise. Examples Input 7 13 Output NO Input 2 3 Output YES","solution":"def is_prime(n): Determines if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while (i * i) <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def concatenated_is_prime(a, b): Concatenates two integers a and b, then checks if the resulting number is prime. concatenated_number = int(str(a) + str(b)) return \\"YES\\" if is_prime(concatenated_number) else \\"NO\\""},{"question":"A company keeps track of its employees’ working hours and wants to identify any anomalies in the data. Each employee submits their working hours in the form of a list of intervals. Each interval is given as a pair of integers [start, end], where 0 ≤ start < end ≤ 24. These intervals represent the hours an employee worked in a given day. An anomaly is defined as: 1. Overlapping intervals within the same day for a single employee. 2. Intervals that extend outside the 24-hour period. You are given the working hours for multiple employees for a single day. Write a function to determine if there are any anomalies in the data. Input The first line contains an integer n (1 ≤ n ≤ 1000), the number of employees. Each of the next n lines starts with an integer m (1 ≤ m ≤ 24), the number of intervals for that employee, followed by m pairs of integers [start, end]. Output Print \\"YES\\" if there is at least one anomaly, and \\"NO\\" if there are no anomalies. Examples Input 3 2 9 12 13 18 3 10 14 12 16 15 19 1 20 26 Output YES Input 2 2 8 12 14 18 1 0 5 Output NO","solution":"def check_anomalies(n, employees_intervals): for intervals in employees_intervals: m = intervals[0] intervals = intervals[1:] if any(end > 24 or start < 0 or start >= end for start, end in zip(intervals[::2], intervals[1::2])): return \\"YES\\" sorted_intervals = sorted((start, end) for start, end in zip(intervals[::2], intervals[1::2])) for i in range(len(sorted_intervals) - 1): if sorted_intervals[i][1] > sorted_intervals[i + 1][0]: return \\"YES\\" return \\"NO\\""},{"question":"Given a string S consisting of lowercase alphabet characters and an integer K, you need to check if it is possible to rearrange the characters in the string such that any two adjacent characters are at least K distance apart. ------ Input ------ The first line of the input contains an integer T denoting the number of test cases. The description of each testcase follows. Each test case contains a single line with the string S followed by the integer K. ------ Output ------ For each test case output a new line with \\"YES\\" if it is possible to rearrange the characters as described, otherwise output \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S| ≤ 10000 1 ≤ K ≤ |S| ----- Sample Input 1 ------ 3 aabbcc 2 aaabc 3 abcdef 3 ----- Sample Output 1 ------ YES NO YES ----- Explanation 1 ------ In the first testcase, we can rearrange the string \\"aabbcc\\" as \\"abcabc\\" or \\"acbacb\\" where no two adjacent characters are less than 2 distance apart. Hence, the output is \\"YES\\". In the second testcase, no matter how we rearrange \\"aaabc\\", we cannot place all \'a\'s 3 distance apart. Hence, the output is \\"NO\\". In the third testcase, we can rearrange the string \\"abcdef\\" as it is, where all characters are already 3 distance apart. Hence, the output is \\"YES\\".","solution":"from collections import Counter import heapq def is_possible_to_rearrange(S, K): if K == 1: return True # Any arrangement is possible when distance K is 1 # Count frequency of each character counter = Counter(S) # Create a max heap based on frequency of characters max_heap = [(-cnt, char) for char, cnt in counter.items()] heapq.heapify(max_heap) result = [] wait_queue = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) # Decrease the count and add to the wait queue count += 1 # since count is negative, we add 1 to reduce (make more positive) wait_queue.append((count, char)) # If the wait queue is of size K, re-add the character back to the heap if len(wait_queue) >= K: readd_count, readd_char = wait_queue.pop(0) if readd_count < 0: heapq.heappush(max_heap, (readd_count, readd_char)) return len(result) == len(S) def process_cases(T, cases): results = [] for i in range(T): S, K = cases[i] if is_possible_to_rearrange(S, int(K)): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Background - the FizzBuzz Variation: FizzBuzz is a popular programming puzzle that requires printing the numbers from 1 to 100, but with a twist: for multiples of 3, you print \\"Fizz\\" instead of the number, for multiples of 5, you print \\"Buzz\\" instead of the number, and for multiples of both 3 and 5, you print \\"FizzBuzz\\". Now, let\'s take it a step further. Given an array of integers, return a new array where: - each number `n` that is divisible by 3 is replaced with \\"Fizz\\", - each number `n` that is divisible by 5 is replaced with \\"Buzz\\", - each number `n` that is divisible by both 3 and 5 is replaced with \\"FizzBuzz\\". - any other number remains unchanged. #Example: ```python fizz_buzz_variation([3, 5, 15, 7, 20, 9]) == [\\"Fizz\\", \\"Buzz\\", \\"FizzBuzz\\", 7, \\"Buzz\\", \\"Fizz\\"] ``` Explanation: - 3 is replaced with \\"Fizz\\" - 5 is replaced with \\"Buzz\\" - 15 is replaced with \\"FizzBuzz\\" - 7 remains 7 - 20 is replaced with \\"Buzz\\" - 9 is replaced with \\"Fizz\\" #Your Task: Write a function that takes an array of integers and returns a new array with the FizzBuzz variations. The function signature should look like this: ```python def fizz_buzz_variation(arr): # Your code here ```","solution":"def fizz_buzz_variation(arr): Given an array of integers, return a new array where: - each number n that is divisible by 3 is replaced with \\"Fizz\\", - each number n that is divisible by 5 is replaced with \\"Buzz\\", - each number n that is divisible by both 3 and 5 is replaced with \\"FizzBuzz\\", - any other number remains unchanged. result = [] for n in arr: if n % 3 == 0 and n % 5 == 0: result.append(\\"FizzBuzz\\") elif n % 3 == 0: result.append(\\"Fizz\\") elif n % 5 == 0: result.append(\\"Buzz\\") else: result.append(n) return result"},{"question":"You are given a rectangular grid with n rows and m columns. Each cell in the grid contains an integer that represents the initial energy level in that cell. A robot is initially positioned at the top-left corner of the grid (cell (1,1)) and needs to travel to the bottom-right corner of the grid (cell (n,m)). The robot can only move to the right or downward in the grid. At each cell, the robot collects the energy level of that cell. The total energy collected by the robot is the sum of the energy levels of all cells passed, including the starting and ending cells. Your task is to find the path that maximizes the total energy collected by the robot. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000), the number of rows and columns in the grid. Each of the following n lines contains m integers, where the j-th integer in the i-th line denotes the energy level of the cell at (i, j). The energy levels are between -1000 and 1000. Output Print a single integer, the maximum energy collected by the robot. Example Input 3 3 1 -2 3 4 5 -6 7 8 9 Output 29 Explanation The path that maximizes the energy collected is: 1 -> 4 -> 5 -> 8 -> 9, and the total energy collected is 1 + 4 + 5 + 8 + 9 = 27. Note In this problem, the robot can only move to the right or downward, and cannot move diagonally or upward. Each move costs zero energy.","solution":"def max_energy_collected(n, m, grid): # Create a 2D dp array to store the maximum energy collected up to each cell dp = [[0] * m for _ in range(n)] # Initialize the top left cell dp[0][0] = grid[0][0] # Fill in the first row for j in range(1, m): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill in the first column for i in range(1, n): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill in the rest of the dp array for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] # The answer is the maximum energy collected at the bottom-right corner return dp[n - 1][m - 1] # Function to parse input and call max_energy_collected def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) grid = [] index = 2 for i in range(n): grid.append([int(data[index + j]) for j in range(m)]) index += m print(max_energy_collected(n, m, grid)) if __name__ == \\"__main__\\": main()"},{"question":"Given an array of integers nums and an integer target, return all unique combinations in nums where the candidate numbers sum to target. Each number in nums may only be used once in the combination. The solution set must not contain duplicate combinations. Example: Input: nums = [2,5,2,1,2], target = 5 Output: [[1,2,2],[5]] Explanation: - The input array nums contains the numbers 2, 5, 2, 1, 2. - The target sum is 5. - We need to find all unique combinations where the sum of numbers equals 5. - The combination [1, 2, 2] uses the number 2 twice but in different positions in the array. - The combination [5] is a direct match with one of the numbers in the array. - Other combinations that yield the sum of 5, like [5], are duplicates and should not be included again. Note: 1. All numbers (including target) will be positive integers. 2. The solution set must not contain duplicate combinations. 3. The length of nums will be in the range [1, 20]. 4. Each number in nums is between 1 and 50, inclusive.","solution":"from typing import List def combinationSum2(nums: List[int], target: int) -> List[List[int]]: nums.sort() result = [] combination = [] def backtrack(start, target): if target == 0: result.append(list(combination)) return if target < 0: return for i in range(start, len(nums)): if i > start and nums[i] == nums[i - 1]: continue combination.append(nums[i]) backtrack(i + 1, target - nums[i]) combination.pop() backtrack(0, target) return result"},{"question":"**[Question]:** You are given a list of employee schedules, where each schedule is represented as a string in the format \\"HH:MM-HH:MM\\". Each employee\'s schedule is stored in a dictionary with the employee\'s name as the key. Write a function that takes in this dictionary and a time range (start_time, end_time), and returns a list of all employees who are available during that time range. An employee is considered available if their schedule does not overlap with the given time range. The time range is inclusive of the start time and exclusive of the end time. Note: - The input dictionary will have the format: {employee_name: [\\"HH:MM-HH:MM\\", ...]} - You can assume all times are in 24-hour format and all schedules are valid. - The input time range is also given in \\"HH:MM\\" format. For example: ```python schedules = { \\"Alice\\": [\\"09:00-10:00\\", \\"12:00-13:00\\"], \\"Bob\\": [\\"09:30-10:30\\", \\"13:00-14:00\\"], \\"Charlie\\": [\\"11:00-12:00\\", \\"14:00-15:00\\"] } start_time = \\"10:00\\" end_time = \\"11:00\\" available_employees(schedules, start_time, end_time) ``` Output: ```python [\\"Alice\\", \\"Charlie\\"] ```","solution":"def available_employees(schedules, start_time, end_time): Returns the list of employees who are available during the given time range. Parameters: - schedules: Dictionary with employee names as keys and list of \\"HH:MM-HH:MM\\" strings as values. - start_time: Start time of the range (inclusive), in the format \\"HH:MM\\". - end_time: End time of the range (exclusive), in the format \\"HH:MM\\". Returns: - List of employee names who are available during the given time range. available = [] for employee, times in schedules.items(): is_available = True for time_range in times: schedule_start, schedule_end = time_range.split(\'-\') if not (end_time <= schedule_start or start_time >= schedule_end): is_available = False break if is_available: available.append(employee) return available"},{"question":"Aditya is participating in a programming competition, and his task is to analyze a series of logs generated by an application. Each log entry reports the execution time of a program in milliseconds. Given a list of log entries, Aditya needs to determine the starting point of the maximum continuous subarray with execution times that sum to a value closest to a given threshold t. Formally, given an array of integers representing the execution times and an integer t, find the starting index of the maximum-length subarray such that the sum of the subarray\'s elements is closest to t without exceeding it. If there are multiple results with the same length, return the one with the smallest starting index. Input The first line contains two integers n and t (1 ≤ n ≤ 10^5, 1 ≤ t ≤ 10^9) — the number of log entries and the threshold. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^4) — the execution times. Output Print one integer — the starting index (0-based) of the maximum-length subarray with the sum closest to t without exceeding it. Examples Input 5 15 1 2 3 4 5 Output 0 Input 4 8 3 1 4 2 Output 0 Input 6 10 6 1 2 7 3 5 Output 1","solution":"def find_max_subarray_closest_to_threshold(n, t, execution_times): left = 0 current_sum = 0 max_length = 0 closest_sum = 0 start_index = 0 for right in range(n): current_sum += execution_times[right] while current_sum > t: current_sum -= execution_times[left] left += 1 if right - left + 1 > max_length or (right - left + 1 == max_length and current_sum > closest_sum): max_length = right - left + 1 closest_sum = current_sum start_index = left return start_index"},{"question":"Alex is really interested in strings and their permutations. He considers a string wonderful if no two consecutive characters are the same. Given a string s, your task is to figure out the n-th lexicographically smallest wonderful permutation of the characters in the string. Input The first line contains the two integers n (1 ≤ n ≤ 10^9) and l (1 ≤ l ≤ 100) — the rank of the permutation and the length of the string s respectively. The second line contains the string s of length l. It is guaranteed that all characters in the string are lowercase English letters. Output Print the n-th lexicographically smallest wonderful permutation of the string\'s characters, or \\"Impossible\\" if such a permutation does not exist. Examples Input 3 3 abc Output bac Input 10 3 abc Output Impossible Note For the first example: The wonderful permutations are: 1. abc 2. acb 3. bac So the answer is bac. For the second example: There are only 6 wonderful permutations: 1. abc 2. acb 3. bac 4. bca 5. cab 6. cba Therefore, the request for the 10th smallest wonderful permutation is \\"Impossible\\".","solution":"from itertools import permutations def n_th_wonderful_permutation(n, s): Returns the n-th lexicographically smallest wonderful permutation of the characters in the string s, or \\"Impossible\\" if such a permutation does not exist. def is_wonderful(perm): # Check if no two consecutive characters are the same in perm for i in range(len(perm) - 1): if perm[i] == perm[i + 1]: return False return True # Find all unique permutations of the string perm_list = sorted(set(permutations(s))) # Filter out non-wonderful permutations wonderful_perms = [perm for perm in perm_list if is_wonderful(perm)] # Check if the n-th wonderful permutation exists if n <= len(wonderful_perms): return \'\'.join(wonderful_perms[n-1]) else: return \\"Impossible\\" # Read input if __name__ == \\"__main__\\": n, l = map(int, input().split()) s = input().strip() # Print the result print(n_th_wonderful_permutation(n, s))"},{"question":"Given an array of integers where each integer appears an even number of times, except for one integer which appears an odd number of times. Find the integer that appears an odd number of times. Example 1: Input: arr[] = {2, 3, 5, 4, 5, 3, 4, 2, 4} Output: 4 Explanation: 4 appears 3 times which is odd. Example 2: Input: arr[] = {1, 1, 2, 2, 3, 3, 3} Output: 3 Explanation: 3 appears 3 times which is odd. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function findOddOccurrence() which takes an array (arr), sizeOfArray (n), and returns the integer that appears an odd number of times. The driver code takes care of the printing. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 1 ≤ N ≤ 10^5 1 ≤ A[i] ≤ 10^6","solution":"def findOddOccurrence(arr): Returns the integer that appears an odd number of times in the array. result = 0 for number in arr: result ^= number return result"},{"question":"A group of kids is playing a game with water balloons. Each player stands in a circle and takes turns throwing a water balloon at the other players. Each time a player throws a water balloon, it can hit only one player standing directly across from them in the circle (opposite player). Given the number of kids (n) participating in the game, starting from player 1, every player takes turns throwing a balloon until all possible throws are exhausted. The game ends when no more valid throws can be made (each player has hit their opposite player once). Your task is to determine the sequence of throws for a given number of players. The sequence should start from player 1 and cycle through the players. Input The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the following t lines contains an integer n (2 ≤ n ≤ 1000) — the number of players. Output For each test case, output a single line of space-separated integers representing the sequence of players throwing water balloons, followed by their target player across the circle. Each throw should be represented as \\"player target\\". Example Input 3 4 6 8 Output 1 3 2 4 1 4 2 5 3 6 4 1 3 7 4 8 5 1 6 2","solution":"def water_balloons_sequence(t, test_cases): This function returns the sequence of throws for a given number of players in each test case. Each player throws a balloon to the player directly across the circle. :param t: Number of test cases :param test_cases: List containing the number of players for each test case :return: List of strings, each string representing the sequence of throws for one test case sequences = [] for n in test_cases: sequence = [] players = list(range(1, n+1)) for i in range(len(players)//2): thrower = players[i] target = players[i + len(players)//2] sequence.append(f\\"{thrower} {target}\\") sequences.append(\\" \\".join(sequence)) return sequences"},{"question":"In a game, there is a 3x3 grid of cells. Each cell contains either a \'.\' representing an empty cell or a \'X\' representing an occupied cell. Determine if there is at least one row or one column that is fully occupied by \'X\'. If there is at least one fully occupied row or column, output `YES`, otherwise output `NO`. ------ Input Format ------ The input consists of 3 lines, each with 3 characters representing a row of the grid. Each character is either \'.\' or \'X\'. ------ Output Format ------ Print `YES` if there is at least one row or column fully occupied by \'X\'. Otherwise, print `NO`. You may print each character of the string in uppercase or lowercase (for example, the strings `YeS`, `yEs`, `yes` and `YES` will all be treated as identical). ------ Constraints ------ Each of the 3 lines contains exactly 3 characters: either \'.\' or \'X\'. ----- Sample Input 1 ------ ``` X.X XXX .X. ``` ----- Sample Output 1 ------ ``` YES ``` ----- Explanation 1 ------ The second row is fully occupied by \'X\'. ----- Sample Input 2 ------ ``` X.. .X. ..X ``` ----- Sample Output 2 ------ ``` NO ``` ----- Explanation 2 ------ Neither any row nor any column is fully occupied by \'X\'.","solution":"def is_fully_occupied(grid): Determine if there is at least one row or one column that is fully occupied by \'X\'. Parameters: grid (list of list of str): A 3x3 grid represented as a list of lists, where each element is either \'.\' or \'X\'. Returns: str: \'YES\' if there is at least one fully occupied row or column, otherwise \'NO\'. for row in grid: if all(cell == \'X\' for cell in row): return \'YES\' for col in range(3): if all(grid[row][col] == \'X\' for row in range(3)): return \'YES\' return \'NO\'"},{"question":"Given a matrix of characters where each character represents a smiley in an amusement park, your task is to determine if a visitor can reach the park\'s exit from the entrance. The entrance is at the top-left corner of the matrix, and the exit is at the bottom-right corner. The visitor can only move up, down, left, or right, and they can\'t step on a \'X\' which represents an obstacle. An \'O\' represents an open path. Write a function that checks if there is a path from the entrance to the exit in the given matrix. Input - The first line contains two integers m and n (1 ≤ m, n ≤ 100): the number of rows and columns of the matrix. - The next m lines each contain n characters (\'X\' or \'O\'), representing the matrix. Output - Output \\"YES\\" if there is a path from the top-left corner to the bottom-right corner, otherwise output \\"NO\\". Examples Input 3 3 OXO OXO OOO Output YES Input 3 3 OXO XXX OOO Output NO","solution":"def is_path_exist(matrix): Checks if there is a path from the top-left corner to the bottom-right corner in the given matrix. m = len(matrix) n = len(matrix[0]) if matrix[0][0] == \'X\' or matrix[m-1][n-1] == \'X\': return \\"NO\\" visited = [[False for _ in range(n)] for _ in range(m)] def dfs(x, y): # Base condition: if reach the bottom-right corner if x == m - 1 and y == n - 1: return True # Mark the cell as visited visited[x][y] = True # Explore the 4 adjacent cells directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] for dx, dy in directions: new_x, new_y = x + dx, y + dy if 0 <= new_x < m and 0 <= new_y < n and not visited[new_x][new_y] and matrix[new_x][new_y] == \'O\': if dfs(new_x, new_y): return True return False return \\"YES\\" if dfs(0, 0) else \\"NO\\""},{"question":"Haruto enjoys palindromic strings. A string is called palindromic if it reads the same backwards as forwards. For example, “level,” “radar,” and “noon” are palindromic strings. Haruto calls a string almost palindromic if it can be converted into a palindromic string by changing at most one character. Help him determine if a given string is almost palindromic. Input The single line contains a string s (1 ≤ |s| ≤ 100) — the string that needs to be checked. The string consists only of lowercase English letters. Output In the only line print \\"YES\\" (without the quotes) if the string s is almost palindromic. Otherwise, print \\"NO\\" (without the quotes). Examples Input abca Output YES Input racecar Output YES Input abcdef Output NO Note In the first sample, changing \'b\' to \'c\' makes the string \\"acca\\", which is a palindrome. In the second sample, the string is already a palindrome. In the third sample, no single change can convert \\"abcdef\\" into a palindrome.","solution":"def is_almost_palindromic(s): Determine if the string s is almost palindromic. left, right = 0, len(s) - 1 mismatch_count = 0 while left < right: if s[left] != s[right]: mismatch_count += 1 if mismatch_count > 1: return \\"NO\\" left += 1 right -= 1 return \\"YES\\""},{"question":"You are given two strings, s1 and s2. A substring is defined as a contiguous sequence of characters within a string. Your task is to determine if there exists a substring that is common to both s1 and s2 and has a length greater than or equal to k. Input: The first line contains an integer t, the number of test cases. Each of the next t test cases is described as follows: - An integer k (1 ≤ k ≤ min(|s1|, |s2|)). - A non-empty string s1. - A non-empty string s2. The strings consist only of lowercase Latin letters and have lengths between 1 and 10^5. Output: For each test case, print \\"YES\\" if there exists a common substring of length at least k between s1 and s2. Otherwise, print \\"NO\\". Sample Input: 2 2 abcde cdefg 3 abcdef ghijkl Sample Output: YES NO Explanation: In the first test case, \\"cde\\" is a common substring of s1 and s2 with a length of 2, which is greater than or equal to k = 2. In the second test case, there is no common substring of length 3 between s1 and s2.","solution":"def has_common_substring(t, test_cases): results = [] for i in range(t): k = test_cases[i][0] s1 = test_cases[i][1] s2 = test_cases[i][2] # Create sets of all substrings of length k for s1 and s2 substrings_s1 = {s1[j:j+k] for j in range(len(s1) - k + 1)} substrings_s2 = {s2[j:j+k] for j in range(len(s2) - k + 1)} # Check for intersection if substrings_s1.intersection(substrings_s2): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"In a bustling city, there are many intersections, each with different traffic lights. A new city regulation requires a control system to manage the traffic light timers. The goal is to minimize the total waiting time for vehicles at each intersection. Each traffic light operates in a cyclical pattern, where one green light is followed by several red lights in a fixed sequence for each traffic signal at the intersection. Your task is to calculate the minimum total waiting time for vehicles at each intersection based on the new regulation. The traffic control system works with N intersections in the city, labeled from 1 to N. Each intersection i has a series of L_i traffic lights, and each light j at intersection i operates in a cycle defined by a sequence of times [G_{i,j}, R_{i,j}], where: - G_{i,j} is the time duration the green light is on for the j-th light at the i-th intersection. - R_{i,j} is the time duration the red light is on for the j-th light at the i-th intersection. For each intersection, the system will calculate the minimum possible waiting time for vehicles, which is the sum of the waiting times for all the traffic lights in that intersection over one complete cycle. ------ Input Format ------ - The first line contains a single integer N, the number of intersections. - Each of the next N lines starts with an integer L_i, the number of traffic lights at intersection i. This is followed by 2 * L_i integers that describe the traffic lights: pairs of integers G_{i,j} and R_{i,j}. ------ Output Format ------ For each intersection, print a single integer representing the minimum total waiting time for vehicles at the intersection over one complete cycle. ------ Constraints ------ 1 le N le 10^5 1 le L_i le 100 1 le G_{i,j}, R_{i,j} le 10^4 ------ Sample Input 1 ------ 3 2 3 5 2 6 3 1 2 2 1 1 1 1 10 15 ------ Sample Output 1 ------ 24 9 25 ------ Explanation 1 ------ - For the first intersection, the total cycle time is (3+5)+(2+6) = 8+8 = 16, so the minimum total waiting time is 16. - For the second intersection, the total cycle time is (1+2)+(2+1)+(1+1) = 3+3+2 = 8. - For the third intersection, the total cycle time is (10+15), so the minimum total waiting time is 25. The minimum total waiting time will be printed for each intersection, providing the best sequence timing to minimize waiting times within the constraints provided.","solution":"def calculate_min_waiting_times(N, intersections): min_waiting_times = [] for intersection in intersections: L_i = intersection[0] traffic_lights = intersection[1:] total_waiting_time = 0 for j in range(L_i): G = traffic_lights[2 * j] R = traffic_lights[2 * j + 1] total_waiting_time += (G + R) min_waiting_times.append(total_waiting_time) return min_waiting_times # Input parsing function def parse_input(input_data): lines = input_data.strip().split(\'n\') N = int(lines[0]) intersections = [] for i in range(1, N + 1): data = list(map(int, lines[i].split())) intersections.append(data) return N, intersections # Composition function def get_waiting_times_from_input(input_data): N, intersections = parse_input(input_data) return calculate_min_waiting_times(N, intersections)"},{"question":"Marcus loves to play games that involve words. One day, he stumbled upon an interesting problem involving palindromes. A palindrome is a word that reads the same backward as forward. Marcus is tasked with creating the longest possible palindrome using letters from a given string. Marcus needs to write a function that takes a string `s` consisting of lowercase and uppercase English letters and returns the length of the longest palindrome that can be constructed using the letters in `s`. Note that the function should be case sensitive. A palindrome can use both uppercase and lowercase letters in its construction, but the positions must be such that the word remains identical from both ends. -----Input----- The input contains a single string `s`, where 1leqtext{len}(s)leq 1000. The string `s` consists of lowercase and uppercase English letters only. -----Output----- Output the length of the longest palindrome that can be created using the given characters of `s`. -----Examples----- Sample Input 1: abccccdd Sample Output 1: 7 Sample Input 2: Aa Sample Output 2: 1 Explanation: In Sample Input 1, one of the longest possible palindromes is \\"dccaccd\\", which has a length of 7. In Sample Input 2, the longest possible palindrome can only be a single character either \\"A\\" or \\"a\\". Hence the length is 1.","solution":"def longest_palindrome(s): Function to find the length of the longest palindrome that can be constructed from the string `s`. from collections import Counter char_count = Counter(s) length = 0 odd_found = False for count in char_count.values(): if count % 2 == 0: length += count else: length += count - 1 odd_found = True if odd_found: length += 1 return length"},{"question":"Train Route Optimization In the year 2060, a new technological advancement allows trains to travel at ultra-high speeds. The transportation department is working to optimize rail routes for the best travel experience. Each railway section between stations is characterized by a travel time and a maximum speed limit for that section. Due to safety reasons, the trains must comply with the maximum speed limit and maintain an average speed throughout the route. Given each railway section\'s parameters, help the department determine the shortest possible travel time from the starting station (station 1) to the destination station (station N). For each route, find the shortest travel time. Input The input consists of up to 30 datasets. Each dataset is represented in the following format. > N M > u1 v1 t1 s1 > u2 v2 t2 s2 > ... > uM vM tM sM N represents the number of stations and M represents the number of railway sections. N and M are integers and satisfy 2 ≤ N ≤ 1,000 and 1 ≤ M ≤ 10,000. The next M lines each provide details for a railway section. For each railway section, u and v are integers representing the start and end stations, t represents the travel time if the train moves at the maximum speed allowed, and s represents the maximum speed limit for that railway section. 1 ≤ u, v ≤ N, 1 ≤ t ≤ 10^8, and 1 ≤ s ≤ 300. The end of the input is represented by a line of two zeros. Output For each dataset, output the shortest travel time from station 1 to station N on one line. If there is no possible route, output -1. Sample Input 3 3 1 2 2 150 2 3 3 200 1 3 10 300 4 4 1 2 5 100 2 4 5 100 1 3 2 200 3 4 2 200 0 0 Sample Output 5 4 Example Input 3 3 1 2 2 150 2 3 3 200 1 3 10 300 4 4 1 2 5 100 2 4 5 100 1 3 2 200 3 4 2 200 0 0 Output 5 4","solution":"import heapq def shortest_travel_time(num_stations, num_sections, sections): graph = {i: [] for i in range(1, num_stations + 1)} for u, v, t, s in sections: graph[u].append((v, t)) graph[v].append((u, t)) def dijkstra(start, end): heap = [(0, start)] travel_time = {i: float(\'inf\') for i in range(1, num_stations + 1)} travel_time[start] = 0 while heap: current_time, current_station = heapq.heappop(heap) if current_station == end: return current_time if current_time > travel_time[current_station]: continue for neighbor, section_time in graph[current_station]: time = current_time + section_time if time < travel_time[neighbor]: travel_time[neighbor] = time heapq.heappush(heap, (time, neighbor)) return -1 if travel_time[end] == float(\'inf\') else travel_time[end] return dijkstra(1, num_stations)"},{"question":"Merging two sorted linked lists can sometimes cause duplicates. To eliminate duplicates from the resultant linked list, you should merge the two lists and then remove any duplicate values. Given two linked lists L1 and L2 where each list is sorted in non-decreasing order, write a function to merge them into a single sorted linked list in non-decreasing order, such that the resultant linked list contains only unique elements. -----Input----- The input consists of three lines: - The first line contains an integer n (1 leq n leq 10^5) — the number of elements in the first linked list. - The second line contains n integers representing the elements of the first linked list L1 (1 le L1[i] le 10^9). - The third line contains m integers representing the elements of the second linked list L2 (1 leq m leq 10^5, 1 le L2[i] le 10^9). -----Output----- Output a single line containing the sorted merged linked list with unique elements. -----Examples----- Input 5 1 3 5 7 9 4 2 3 5 8 Output 1 2 3 5 7 8 9 Input 3 1 1 2 4 2 2 3 3 Output 1 2 3 Explanation: Let us explain the examples in the sample: Example 1: - The first linked list is: 1 -> 3 -> 5 -> 7 -> 9 - The second linked list is: 2 -> 3 -> 5 -> 8 - Merging these into one sorted list and removing duplicates results in: 1 -> 2 -> 3 -> 5 -> 7 -> 8 -> 9 Example 2: - The first linked list is: 1 -> 1 -> 2 - The second linked list is: 2 -> 2 -> 3 -> 3 - Merging these into one sorted list and removing duplicates results in: 1 -> 2 -> 3","solution":"def merge_and_remove_duplicates(L1, L2): Merges two sorted lists and removes duplicates to create a single sorted list with unique elements. merged = sorted(set(L1 + L2)) return merged # Example usage: # L1 = [1, 3, 5, 7, 9] # L2 = [2, 3, 5, 8] # print(merge_and_remove_duplicates(L1, L2)) # Output: [1, 2, 3, 5, 7, 8, 9]"},{"question":"You are organizing a coding competition where each participant needs to come up with a unique problem involving strings. To ensure the problems are original, you have devised a way to check the uniqueness of each problem statement submitted. Each problem statement can be represented as a string containing lowercase letters and spaces. Two problem statements are considered identical if they are anagrams of each other (i.e., one can be rearranged to form the other). To automate the uniqueness check, you need to write a function that will take a list of problem statements and return the number of unique problem statements when considering anagrams as identical. Write a function `count_unique_statements(statements)` that takes a list of strings `statements`, where each string is a problem statement. The function should return an integer representing the number of unique problem statements when anagrams are considered identical. __Input__: - The input list of strings `statements` where each statement only contains lowercase letters and spaces. The length of `statements` list will be between 1 and 100 inclusive, and the length of each statement will be between 1 and 100 inclusive. __Output__: - The function should return a single integer. __Examples__: ```python # Example 1 count_unique_statements([\\"anagram\\", \\"nagaram\\", \\"manga ra\\"]) # Output: 1 # Example 2 count_unique_statements([\\"hello world\\", \\"world hello\\", \\"hello there\\"]) # Output: 2 ``` __Explanation__: In the first example, all the statements are anagrams of each other, hence there\'s only one unique problem statement. In the second example, \\"hello world\\" and \\"world hello\\" are anagrams of each other, while \\"hello there\\" is not an anagram of these, so there are two unique problem statements.","solution":"def count_unique_statements(statements): Returns the number of unique problem statements considering anagrams as identical. def normalize(statement): Normalizes the statement by sorting the characters (excluding spaces) return \'\'.join(sorted(statement.replace(\' \', \'\'))) unique_statements = set() for statement in statements: normalized = normalize(statement) unique_statements.add(normalized) return len(unique_statements)"},{"question":"A series of ones and zeroes You are given an array consisting of N integers (either 0 or 1), and you need to perform M operations. Each operation can either be: 1. **Flipping**: Change a 0 to 1 or a 1 to 0 at a specified index. 2. **Querying**: Count the number of consecutive 1s in the array. To accomplish this task, you should implement a program that processes the given operations efficiently. Input The input consists of multiple test cases. Each test case is represented in the following format: > N M > array of N integers (0 or 1) > For the next M lines, each line represents an operation and is either of the form \\"flip i\\" or \\"query\\". Where: - N is the number of integers in the array (1 ≤ N ≤ 10^5). - M is the number of operations (1 ≤ M ≤ 10^5). - The array is a sequence of N integers, where each integer is either 0 or 1. - The \\"flip i\\" operation flips the i-th (0-based index) bit in the array. - The \\"query\\" operation returns the length of the longest consecutive sequence of 1s. The input is terminated by a line containing two zeros (\\"0 0\\"). Output For each \\"query\\" operation, output the length of the longest consecutive sequence of 1s in the array. Sample Input 6 5 1 0 1 1 0 1 query flip 1 query flip 3 query 0 0 Output for Sample Input 2 3 2 Explanation Initially, the array is [1, 0, 1, 1, 0, 1]. - The first \\"query\\" operation finds the longest consecutive sequence of 1s, which is [1, 1], so the output is 2. - The \\"flip 1\\" operation changes the array to [1, 1, 1, 1, 0, 1]. - The second \\"query\\" operation finds the longest consecutive sequence of 1s, which is [1, 1, 1, 1], so the output is 4. - The \\"flip 3\\" operation changes the array to [1, 1, 1, 0, 0, 1]. - The third \\"query\\" operation finds the longest consecutive sequence of 1s, which is [1, 1, 1], so the output is 3.","solution":"def longest_consecutive_ones(arr): Helper function to find the longest sequence of consecutive ones max_count = 0 current_count = 0 for num in arr: if num == 1: current_count += 1 if current_count > max_count: max_count = current_count else: current_count = 0 return max_count def process_operations(n, m, array, operations): results = [] for operation in operations: if operation.startswith(\\"flip\\"): _, i = operation.split() i = int(i) array[i] = 1 - array[i] elif operation == \\"query\\": results.append(longest_consecutive_ones(array)) return results def handle_input(): import sys input = sys.stdin.read data = input().strip().split(\\"n\\") index = 0 results = [] while index < len(data): n, m = map(int, data[index].strip().split()) if n == 0 and m == 0: break index += 1 array = list(map(int, data[index].strip().split())) index += 1 operations = [] for _ in range(m): operations.append(data[index].strip()) index += 1 results.extend(process_operations(n, m, array, operations)) for result in results: print(result)"},{"question":"Given two strings str1 and str2, find the minimum number of steps required to convert str1 into str2. In one step, you can insert a character, delete a character, or replace a character. Example 1: Input: str1 = \\"horse\\", str2 = \\"ros\\" Output: 3 Explanation: horse -> rorse (replace \'h\' with \'r\') rorse -> rose (remove \'r\') rose -> ros (remove \'e\') Example 2: Input: str1 = \\"intention\\", str2 = \\"execution\\" Output: 5 Explanation: intention -> inention (remove \'t\') inention -> enention (replace \'i\' with \'e\') enention -> exention (replace \'n\' with \'x\') exention -> exection (replace \'n\' with \'c\') exection -> execution (insert \'u\') Your Task: You don\'t need to take input. Just complete the function minDistance() which takes the strings str1 and str2 as input and returns the minimum number of steps to convert str1 into str2. Constraints: 1 <= str1.length, str2.length <= 1000 str1 and str2 consist of lowercase English letters. Expected time complexity: O(m*n) Expected auxiliary space: O(m*n) where m and n are lengths of str1 and str2 respectively","solution":"def minDistance(str1, str2): # Initialize the matrix dp where dp[i][j] represents the edit distance between # the first i characters of str1 and the first j characters of str2. m, n = len(str1), len(str2) dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill the base case values for i in range(m + 1): dp[i][0] = i for j in range(n + 1): dp[0][j] = j # Fill the matrix using the recurrence relation for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], # delete dp[i][j - 1], # insert dp[i - 1][j - 1]) # replace return dp[m][n]"},{"question":"A spaceship is navigating through an asteroid field represented by a rectangular grid. The spaceship can only move right or down from its current position. The task is to find the number of unique paths the spaceship can take to get from the top-left corner of the grid (start) to the bottom-right corner (end). Provide a function `uniquePaths(m, n)` that calculates the number of unique paths for a grid with `m` rows and `n` columns. # Function Signature: ```python def uniquePaths(m: int, n: int) -> int: ``` # Input: - An integer `m` (1 ≤ m ≤ 100). - An integer `n` (1 ≤ n ≤ 100). # Output: - An integer representing the number of unique paths from the top-left to the bottom-right corner of the grid. # Example: ```python Input: m = 3 n = 2 Output: 3 Explanation: There are 3 unique paths from the top-left to the bottom-right corner of a 3x2 grid: 1. Right -> Right -> Down 2. Right -> Down -> Right 3. Down -> Right -> Right ```","solution":"def uniquePaths(m: int, n: int) -> int: Calculate the number of unique paths from the top-left to the bottom-right corner of a grid. :param m: int - number of rows :param n: int - number of columns :return: int - number of unique paths # Create a 2D array to store the number of paths to each cell dp = [[0]*n for _ in range(m)] # There is only 1 way to reach any cell in the first row, by moving right for i in range(n): dp[0][i] = 1 # There is only 1 way to reach any cell in the first column, by moving down for i in range(m): dp[i][0] = 1 # Calculate the number of paths for each cell in the grid for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] # Return the number of paths to the bottom-right corner return dp[m-1][n-1]"},{"question":"There are N islands in a certain archipelago, and M bridges that connect the islands. Each bridge connects exactly two islands. Two islands a and b are said to belong to the same group if there is a way to travel from island a to island b either directly, or through a series of bridges. In other words, groups are the connected components of the graph formed by the islands and bridges. Your task is to determine the number of such groups. Constraints * 1 ≤ N ≤ 10^5 * 0 ≤ M ≤ 10^5 * 1 ≤ u_i, v_i ≤ N * Each bridge (u_i, v_i) connects two distinct islands and no pair of islands is connected by more than one bridge. Input Input is given from Standard Input in the following format: N M u_1 v_1 u_2 v_2 ... u_M v_M Output Print the number of groups of islands. Examples Input 4 2 1 2 3 4 Output 2 Input 4 3 1 2 2 3 4 3 Output 1","solution":"def number_of_island_groups(N, M, bridges): from collections import defaultdict, deque # Adjacency list for graph graph = defaultdict(list) # Construct the graph for u, v in bridges: graph[u].append(v) graph[v].append(u) visited = set() def bfs(start): queue = deque([start]) while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) groups = 0 # Traverse all nodes to count connected components for i in range(1, N+1): if i not in visited: bfs(i) groups += 1 return groups"},{"question":"You are given a string S of length N consisting of lowercase Latin letters. Your task is to determine if you can partition this string into two non-empty subsequences such that the two subsequences are equal when sorted. A subsequence of a string is a sequence that can be derived from the string by deleting some or no elements, without changing the order of the remaining elements. ------ Input Format ------ - The first line contains a single integer T, the number of test cases. - The next T lines each contain a single string S of length N. ------ Output Format ------ For each test case, output \\"YES\\" if it\'s possible to partition the string into two such subsequences, and \\"NO\\" otherwise. You can print each letter of the string in any case (upper or lower) (for example, strings YES, yEs, and yes will be considered identical). ------ Constraints ------ 1 leq T leq 100 1 leq N leq 10^5 - The sum of N across all test cases does not exceed 10^6. ------ Sample Input 1 ------ 3 abba abcd abacabad ------ Sample Output 1 ------ YES NO YES ------ Explanation 1 ------ Test Case 1: The string \\"abba\\" can be partitioned into \\"ab\\" and \\"ba\\", which both sort to \\"ab\\". Test Case 2: The string \\"abcd\\" cannot be partitioned into two equal subsequences when sorted. Test Case 3: The string \\"abacabad\\" can be partitioned into \\"abac\\" and \\"abad\\", which both sort to \\"aaab\\".","solution":"def can_partition_to_equal_subsequences(S): Determines if string S can be partitioned into two non-empty subsequences that are equal when sorted. Args: S (str): The input string consisting of lowercase Latin letters. Returns: str: \\"YES\\" if it\'s possible to partition the string as required, \\"NO\\" otherwise. from collections import Counter # Count the frequency of each character in the string char_count = Counter(S) # Check if there\'s at least one character that appears more than once for count in char_count.values(): if count > 1: return \\"YES\\" return \\"NO\\" def process_test_cases(T, test_cases): Processes multiple test cases for the problem. Args: T (int): The number of test cases. test_cases (list of str): The list of test case strings. Returns: list of str: List of results for each test case. results = [] for S in test_cases: results.append(can_partition_to_equal_subsequences(S)) return results"},{"question":"Given a positive integer text{N} and an array text{A} of text{N} integers, your task is to find the number of distinct absolute values in the array. Input Format The first line contains a positive integer text{N} - the size of array text{A}. The second line contains text{N} space-separated integers representing the elements of array text{A}. Output Format Print a single integer representing the number of distinct absolute values in the array. Constraints - 1 leq text{N} leq 1000 - -10^6 leq text{A}[i] leq 10^6 Sample Input 1 5 -1 -1 0 1 -2 Sample Output 1 3 Sample Input 2 3 -3 -3 3 Sample Output 2 1 Explanation In the first sample input, the absolute values are {0, 1, 2}, thus the number of distinct absolute values is 3. In the second sample input, the absolute values are {3}, thus the number of distinct absolute values is 1.","solution":"def count_distinct_absolute_values(N, A): Returns the number of distinct absolute values in the array A. return len(set(abs(x) for x in A))"},{"question":"Chef loves to celebrate his birthday with his friends. This year, he wants to plan a birthday party where he can cut his birthday cake into as many pieces as he can. The cake is a standard circular cake, and Chef can cut it with straight lines. However, Chef noticed that every new line he cuts across the cake intersects with all previous lines inside the circle. Chef wants to determine the maximum number of pieces he can get by cutting the cake with a given number of straight lines. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N denoting the number of straight lines Chef will use to cut the cake. -----Output----- For each test case, output a single line containing the maximum number of pieces Chef can obtain. -----Constraints----- - 1 ≤ T ≤ 10 - 0 ≤ N ≤ 1000 -----Example----- Input: 3 0 1 2 Output: 1 2 4 Note: The formula for the maximum number of pieces P that can be obtained with N straight lines is P = (N * (N + 1)) / 2 + 1.","solution":"def max_pieces(N): Returns the maximum number of pieces you can get by cutting the cake with N straight lines. return (N * (N + 1)) // 2 + 1 def handle_test_cases(T, test_cases): results = [] for N in test_cases: results.append(max_pieces(N)) return results # Example usage T = 3 test_cases = [0, 1, 2] print(handle_test_cases(T, test_cases)) # Expected: [1, 2, 4]"},{"question":"You are a skilled hacker who just entered a high-stakes coding competition where every second counts. The competition organizer has provided a series of challenges to test your mettle. One of the challenges involves sorting a special list of encrypted messages from your fellow competitors. Each message has a unique identifier at the beginning followed by a mixture of characters. The identifier is always a fixed number of digits long and is prefixed by a \'#\' symbol. Your task is to sort these messages primarily based on their identifiers in ascending order. If two messages have the same identifier, maintain their relative order from the input list. Write a function `sort_messages(messages: List[str], id_length: int) -> List[str]` where: - `messages` is a list of strings, where each string is a message containing an identifier at the start, indicated by a \'#\' symbol, followed by `id_length` number of digits and some mixed characters. - `id_length` is an integer indicating the fixed number of digits after the \'#\' symbol and before the message content starts. Return the list of messages sorted primarily by their identifiers. For example: ```python messages = [\\"#123Hello\\", \\"#456World\\", \\"#123Again\\", \\"#789Compete\\"] id_length = 3 sort_messages(messages, id_length) # Should return [\'#123Hello\', \'#123Again\', \'#456World\', \'#789Compete\'] ```","solution":"from typing import List def sort_messages(messages: List[str], id_length: int) -> List[str]: Sorts messages primarily based on their identifiers in ascending order. Args: messages (List[str]): List of messages with identifiers. id_length (int): Fixed number of identifier digits after the \'#\' symbol. Returns: List[str]: Sorted list of messages by identifier. def extract_id(msg: str) -> int: # Extract numerical identifier after the \'#\' symbol return int(msg[1:1 + id_length]) # Sort messages based on the extracted identifier return sorted(messages, key=extract_id)"},{"question":"Ants are very organized creatures, and they construct their ant hills with great planning. Imagine there are n ants forming colonies on different hills, indexed from 0 to n - 1, where each ant hill can communicate directly to other certain connected ant hills. Communication is essential because they share resources and alerts. However, due to various natural reasons (like rain or birds), some communication links may go down temporarily. The ants plan to build command centers that can still maintain communication even if any single link fails. The command centers need to be chosen in such a way that if any connection fails, it should still be possible to route communication between any two command centers via the remaining connections. Additionally, they want to minimize the number of command centers. Your task is to determine the minimum number of command centers required or decide if it is impossible to achieve the goal. -----Input----- The first line contains two integers n (2 leq n leq 500) and m (0 leq m leq 20000), where n denotes the number of ant hills and m denotes the number of possible communication links. Each of the next m lines contains two integers u and v (0 leq u, v < n, u neq v), denoting a bidirectional communication link between ant hill u and ant hill v. Assume that each pair (u, v) is unique and appears at most once in the input. -----Output----- Print the minimum number of command centers required or \'impossible\' if such a configuration can\'t ensure communication continuity with the failure of any single link. -----Examples----- Sample Input 1: 4 4 0 1 1 2 2 3 3 0 Sample Output 1: 4 Sample Input 2: 4 2 0 1 2 3 Sample Output 2: impossible","solution":"def find_min_command_centers(n, m, edges): from sys import setrecursionlimit setrecursionlimit(10000) if m == 0: return \\"impossible\\" # Convert edges to adjacency list adj = [[] for _ in range(n)] for u, v in edges: adj[u].append(v) adj[v].append(u) # Function to check if the graph is strongly connected def is_strongly_connected(): def dfs(node, visited): visited[node] = True for neighbor in adj[node]: if not visited[neighbor]: dfs(neighbor, visited) # Initial DFS from the first node visited = [False] * n dfs(0, visited) if any(not v for v in visited): return False # Transpose the graph transpose = [[] for _ in range(n)] for u in range(n): for v in adj[u]: transpose[v].append(u) # DFS on the transposed graph visited = [False] * n dfs(0, visited) return all(visited) if not is_strongly_connected(): return \\"impossible\\" # If the graph is connected, the result equals the number of nodes. return n"},{"question":"Given an array of integers, your task is to find the length of the longest contiguous subarray such that all elements in the subarray are unique. The longest contiguous subarray is defined by its boundary indices. Examples: Input: [5, 1, 3, 5, 2, 3, 4, 1] Output: 5 Explanation: The subarray with unique elements that has the maximum length is [1, 3, 5, 2, 3]. Its length is 5. Input: [1, 2, 3, 4, 5] Output: 5 Explanation: The entire array is unique, so its length is 5. Input: [1, 1, 1, 1, 1] Output: 1 Explanation: All elements in the array are the same, so the longest subarray with unique elements is any single element. Note: You may assume the given array contains a maximum of 10000 elements.","solution":"def longest_unique_subarray_length(arr): Returns the length of the longest contiguous subarray with all unique elements. start = 0 max_length = 0 unique_elements = set() for end in range(len(arr)): while arr[end] in unique_elements: unique_elements.remove(arr[start]) start += 1 unique_elements.add(arr[end]) max_length = max(max_length, end - start + 1) return max_length"},{"question":"Jenny is planning a road trip and wants to ensure she can make the most stops along the way to rest. She has a car with a maximum fuel tank capacity of M liters. She knows the fuel consumption rate of her car is K kilometers per liter. Jenny has a list of cities she wants to visit along the way. Each city is located at a distance D from her current location. Jenny wants to determine if she can reach each city without refueling. Print Possible if Jenny can reach the city, and Impossible if she cannot reach the city on the fuel she currently has. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of one line of input, containing three space-separated integers M, K, and D — the maximum fuel tank capacity in liters, the fuel consumption rate in kilometers per liter, and the distance to the city in kilometers, respectively. ------ Output Format ------ For each test case, output on a new line the answer: - Possible if Jenny can reach the city without refueling. - Impossible if Jenny cannot reach the city without refueling. You may print each character of the output in either uppercase or lowercase, i.e, Possible, POSSIBLE, posSiBle and POSsible will all be treated as equivalent. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ M ≤ 100 1 ≤ K ≤ 50 1 ≤ D ≤ 5000 ----- Sample Input 1 ------ 4 10 5 45 8 6 50 15 10 140 20 4 75 ----- Sample Output 1 ------ Possible Impossible Possible Possible ----- explanation 1 ------ Test case 1: Jenny\'s car can travel 10 times 5 = 50 kilometers on a full tank, which is more than the 45 kilometers to the city. Therefore, it is Possible to reach the city. Test case 2: Jenny\'s car can travel 8 times 6 = 48 kilometers on a full tank, but the city is 50 kilometers away. Therefore, it is Impossible to reach the city. Test case 3: Jenny\'s car can travel 15 times 10 = 150 kilometers on a full tank, which is more than the 140 kilometers to the city. Therefore, it is Possible to reach the city. Test case 4: Jenny\'s car can travel 20 times 4 = 80 kilometers on a full tank, which is more than the 75 kilometers to the city. Therefore, it is Possible to reach the city.","solution":"def can_reach_city(M, K, D): Determine if Jenny can reach the city without refueling. Parameters: M (int): Maximum fuel tank capacity in liters K (int): Fuel consumption rate in kilometers per liter D (int): Distance to the city in kilometers Returns: str: \\"Possible\\" if Jenny can reach the city, \\"Impossible\\" otherwise max_distance = M * K if max_distance >= D: return \\"Possible\\" else: return \\"Impossible\\" def handle_input(num_tests, test_cases): results = [] for i in range(num_tests): M, K, D = test_cases[i] results.append(can_reach_city(M, K, D)) return results"},{"question":"You are given a list of integers where each integer represents the height of a vertical line on a graph. The width of each line is 1. We want to find two lines which, together with the x-axis, forms a container such that the container contains the most water. Your task is to write a function that finds the maximum amount of water that can be contained. Function Signature: ```python def max_water_container(heights: List[int]) -> int: pass ``` Input: - A list of integers `heights` where each integer represents the height of a vertical line. (0 < len(heights) <= 100000) - Height values will be non-negative integers and will always be at least 2 lines in the input list. Output: - The function should return an integer representing the maximum amount of water that can be contained. Example: Input: ```python heights = [1,8,6,2,5,4,8,3,7] ``` Output: ```python 49 ``` Explanation: - The maximum amount of water is contained between the vertical lines at index 1 and index 8 with height of 8 and 7 respectively. - Horizontal distance between these two lines is 7. - Thus, the maximum water contained is min(8,7) * (8 - 1) = 7 * 7 = 49","solution":"from typing import List def max_water_container(heights: List[int]) -> int: This function calculates the maximum amount of water that can be contained between two vertical lines in the input list of heights. max_area = 0 left = 0 right = len(heights) - 1 while left < right: # Calculate the width width = right - left # Calculate the height by taking the minimum of two heights height = min(heights[left], heights[right]) # Calculate the area and update max_area if current area is larger current_area = width * height max_area = max(max_area, current_area) # Move the pointers if heights[left] < heights[right]: left += 1 else: right -= 1 return max_area"},{"question":"John loves to play with strings. One day, he came up with the idea of creating a unique game. In this game, he takes a string consisting only of characters \'a\', \'b\', and \'c\' and tries to replace some characters to balance the string. A balanced string is defined as a string where each character appears the same number of times. Your task is to help John determine the minimum number of character replacements required to make the string balanced. -----Input----- The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains a single string consisting of characters \'a\', \'b\', and \'c\' only. The length of each string is between 3 and 300, inclusive. -----Output----- For each test case, print the minimum number of replacements needed in a separate line. -----Examples----- Input 3 aabb abcabc aaabbbccc Output 2 0 0 -----Note----- In the first test case, one of the optimal ways is to replace \'a\' with \'c\' to get \\"abcc\\" or replace \'b\' with \'c\' to get \\"aacc\\". In either way, the balanced string will be \\"abcc\\" or \\"aacc\\". In the second test case, the string is already balanced. In the third test case, the string is already balanced. -----Additional Information----- In the first example, \\"aabb\\" can be converted into \\"abcc\\" or \\"aacc\\" with 2 replacements. In the second example, \\"abcabc\\" is already balanced, so no replacements are needed. In the third example, \\"aaabbbccc\\" is also already balanced, requiring no replacements.","solution":"def min_replacements_to_balance(s): from collections import Counter # Count the frequency of each character char_count = Counter(s) # Find the desired count for a balanced string n = len(s) target_count = n // 3 # Calculate the number of replacements needed replacements = 0 for char in \'abc\': if char_count[char] > target_count: replacements += char_count[char] - target_count return replacements def process_test_cases(t, test_cases): results = [] for s in test_cases: results.append(min_replacements_to_balance(s)) return results"},{"question":"# Task Given a list of integers, create a function that returns the sum of the two largest distinct integers. If there are fewer than two distinct integers, return the largest integer or -1 if the list is empty. # Example For `lst = [4, 1, 7, 7, 3, 3, 5]`, the output should be `12`. The two largest distinct integers are `7` and `5`, and their sum is `12`. For `lst = [5, 5, 5, 5]`, the output should be `5`. There is only one distinct integer, so return that integer. For `lst = []`, the output should be `-1`. The list is empty, so return `-1`. # Input/Output - `[input]` integer array `lst` A list of integers. Constraints: `0 ≤ lst.length ≤ 1000` `-10^6 ≤ lst[i] ≤ 10^6` - `[output]` an integer The sum of the two largest distinct integers or the largest integer or -1.","solution":"def sum_two_largest_distinct(lst): This function returns the sum of the two largest distinct integers in the list. If there are fewer than two distinct integers, it returns the largest integer or -1 if the list is empty. if not lst: return -1 distinct_numbers = list(set(lst)) if len(distinct_numbers) == 1: return distinct_numbers[0] distinct_numbers.sort(reverse=True) return distinct_numbers[0] + distinct_numbers[1]"},{"question":"A game of billiards involves two players alternately potting balls on a table. The game starts with Player A\'s turn to pot the balls. Each player continues to pot balls until they miss. The next player then starts their turn, and so on. Given the number of balls each player potted without missing (H and S respectively for Player A and Player B), determine who is supposed to play the next turn. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first and only line of each test case contains two space-separated integers H and S. -----Output----- For each test case, print a single line containing the string \\"PLAYER A\\" if it is Player A\'s turn or \\"PLAYER B\\" if it is Player B\'s turn. -----Constraints----- - 1 le T le 10^5 - 1 le H, S le 10^{9} -----Subtasks----- Subtask #1 (100 points): original constraints -----Example Input----- 3 5 3 2 6 7 7 -----Example Output----- PLAYER A PLAYER A PLAYER B -----Explanation----- Example case 1: Player A potted 5 balls without missing and Player B potted 3 balls without missing. Player A will start the next turn. Example case 2: Player A potted 2 balls without missing and Player B potted 6 balls without missing. Player A will start the next turn. Example case 3: Both players potted the same number of balls without missing, so it’s Player B\'s turn to play.","solution":"def next_player(H, S): Determines which player should start the next turn based on the number of balls potted. Args: H (int): Number of balls potted by Player A S (int): Number of balls potted by Player B Returns: str: \\"PLAYER A\\" if it\'s Player A\'s turn next, \\"PLAYER B\\" otherwise if H == S: return \\"PLAYER B\\" else: return \\"PLAYER A\\""},{"question":"Write a function that reads an integer sequence B = {b_0, b_1, ..., b_{m-1}} and performs the following operations: * add(i, x): increment b_i by x * get(i): report the value of b_i Constraints * 1 leq m leq 1,000 * -1,000,000,000 leq b_i leq 1,000,000,000 * 1 leq p leq 1,000 * 0 leq i < m * -1,000,000 leq x leq 1,000,000 Input The input is given in the following format. m b_0 ; b_1, ..., ; b_{m-1} p com_1 ; i_1 ; x_1 com_2 ; i_2 ; x_2 : com_{p} ; i_{p} ; x_{p} In the first line, m (the number of elements in B) is given. In the second line, b_i (each element in B) are given. In the third line, the number of operations p is given, and each operation is given in the following p lines. com_i denotes the type of operation. 0 represents add(i, x) and 1 represents get(i). Output For each get operation, print the value of b_i in a line. Example Input 5 2 4 -1 3 6 4 0 3 2 1 3 0 2 -3 1 2 Output 5 -4","solution":"def process_operations(m, B, p, operations): results = [] for operation in operations: com, i, x = operation if com == 0: # add(i, x) B[i] += x elif com == 1: # get(i) results.append(B[i]) return results"},{"question":"To participate in a coding competition, a contestant must solve a variety of algorithmic challenges. One of the tasks requires them to analyze a sequence of integers and find a specific sub-sequence based on the given criteria. The sub-sequence must have exactly k elements, and the sum of these elements should be the maximum possible among all such sub-sequences of k elements. Write a program to determine which sub-sequence of length k from the given sequence has the maximum sum. Input The first line contains two integers n and k (1 ≤ k ≤ n ≤ 1000), where n is the length of the sequence and k is the length of the desired sub-sequence. The second line contains n integers, a1, a2, ..., an (-1000 ≤ ai ≤ 1000), which represent the given sequence. Output Print a single integer representing the maximum sum of the desired sub-sequence of length k. Examples Input 5 3 2 1 5 1 3 Output 10 Input 6 2 -1 -2 -3 -4 -5 -6 Output -3","solution":"def max_subsequence_sum(n, k, sequence): Returns the maximum sum of a sub-sequence of length k from the given sequence of integers. :param n: Length of the sequence :param k: Length of sub-sequence :param sequence: List of integers representing the sequence :return: Maximum sum of a sub-sequence of length k # Sort the sequence in descending order sorted_sequence = sorted(sequence, reverse=True) # Take the first k elements from the sorted sequence max_subsequence = sorted_sequence[:k] # Return the sum of these k elements return sum(max_subsequence)"},{"question":"You are given an array of integers and a target integer. Your task is to find two distinct indices i and j in the array such that the sum of arr[i] and arr[j] is equal to the target integer. If such indices exist, return them in a tuple. If there are multiple pairs, return any one of them. If no such indices exist, return an empty tuple. Note: The indices i and j must be different and the array should be zero-based indexed. -----Input----- The input contains two lines: - The first line contains the integers N and T, the length of the array (1 ≤ N ≤ 10^5) and the target sum (|T| ≤ 10^9), respectively. - The second line contains N integers representing the elements of the array, where each element is in the range (|element| ≤ 10^9). -----Output----- Print the indices i and j as a tuple if such a pair exists. If multiple pairs are possible, print any one of them. If no such pair exists, print an empty tuple. -----Examples----- Input 5 9 2 7 11 15 1 Output (0, 1) Input 4 6 3 2 4 5 Output (1, 2) Input 3 10 1 2 3 Output ()","solution":"def find_two_sum_indices(N, T, arr): Returns a tuple of two indices (i, j) such that arr[i] + arr[j] = T, or an empty tuple if no such indices exist. seen = {} for i in range(N): complement = T - arr[i] if complement in seen: return (seen[complement], i) seen[arr[i]] = i return ()"},{"question":"Write a function that finds the intersection of two intervals. Each interval is represented by a pair of integers ([a_i, b_i]) ((a_i le b_i)). The intersection of two intervals is defined as the overlapped region of the two intervals. -----Input----- The input consists of multiple test cases. The first line contains the number of test cases (t) ((1 le t le 10^4)). Each test case contains two intervals represented by four integers (a_1, b_1, a_2, b_2) ((1 le a_1, b_1, a_2, b_2 le 10^9)), where (a_i le b_i). -----Output----- For each test case, if the intervals intersect, output the intersection as two integers representing the start and end of the intersection. If the intervals do not intersect, output \\"NO\\". -----Examples----- Input 4 1 5 2 6 1 2 3 4 5 7 1 6 2 5 5 10 Output 2 5 NO 5 6 5 5 In the first example, the intersection of intervals [1, 5] and [2, 6] is [2, 5]. In the second example, intervals [1, 2] and [3, 4] do not intersect. In the third example, the intersection of intervals [5, 7] and [1, 6] is [5, 6]. In the fourth example, the intersection of intervals [2, 5] and [5, 10] is [5, 5].","solution":"def find_intersection(a1, b1, a2, b2): Finds the intersection of two intervals [a1, b1] and [a2, b2]. Returns the intersection as a tuple (start, end) if they intersect, or \\"NO\\" if they do not. start = max(a1, a2) end = min(b1, b2) if start <= end: return (start, end) else: return \\"NO\\" def process_test_cases(t, test_cases): results = [] for i in range(t): a1, b1, a2, b2 = test_cases[i] result = find_intersection(a1, b1, a2, b2) results.append(result) return results"},{"question":"You are given a non-empty array \'a\' consisting of n integers. Your task is to split the array into k contiguous subarrays in such a way that the sum of the maximum values in all subarrays is minimized. You are allowed to rearrange the elements of the array before making the splits. Formally, partition the array into k contiguous subarrays b_1, b_2, ..., b_k such that the sum MAX(b_1) + MAX(b_2) + ... + MAX(b_k) is minimized where MAX(b_i) is the maximum value in the subarray b_i. Input: * The first line of input contains two integers n (1 ≤ n ≤ 10^5) — the length of the array, and k (1 ≤ k ≤ n) — the number of subarrays. * The second line of input contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^9) — the elements of the array. Output: * Print a single integer — the minimized sum of the maximum values of the k contiguous subarrays after rearranging the elements. Example: ``` Input: 7 3 4 2 1 10 5 8 6 Output: 19 Explanation: One possible way to rearrange and split the array is: [1, 1] [2, 5, 6] [8, 10] The maximum values of these subarrays are 1, 6, and 10 respectively. So the minimized sum is 1 + 6 + 10 = 17. ```","solution":"def minimized_sum_of_max_elements(n, k, array): Returns the minimized sum of the maximum values of k contiguous subarrays after rearranging the elements of the given array. # Sort the array in ascending order array.sort() # To minimize the sum of maximum values in k subarrays, we can: # Split the sorted array into k subarrays sum_max = 0 for i in range(k): # Consider the largest remaining elements for each subarray sum_max += array[n - 1 - i] return sum_max"},{"question":"You are given a string \'s\' consisting of lowercase English letters. You need to determine if all unique characters in the string appear the same number of times. Example 1: Input: s = \\"abacbc\\" Output: True Explanation: The unique characters are a, b, and c, and each of them appears exactly twice. Example 2: Input: s = \\"aaabb\\" Output: False Explanation: The unique characters are a and b, with a appearing three times and b appearing twice. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function hasEqualFrequency() that takes a string s and returns a boolean value indicating whether all the unique characters in the string s appear the same number of times. The driver code takes care of the printing. Expected Time Complexity: O(N), where N is the length of the string. Expected Auxiliary Space: O(1). Constraints: 1 ≤ |s| ≤ 1000","solution":"def hasEqualFrequency(s): Determines if all unique characters in the string appear the same number of times. Args: s (str): Input string consisting of lowercase English letters. Returns: bool: True if all unique characters appear the same number of times, False otherwise. from collections import Counter # Count the frequency of each character in the string char_counts = Counter(s) # Get all frequency values frequency_values = list(char_counts.values()) # Check if all frequencies are the same return len(set(frequency_values)) == 1"},{"question":"Given a grid with R rows and C columns, you have to perform two types of operations on the grid: increment operations and query operations. Each cell in the grid is initially set to zero. Increment Operation: ``` I r0 c0 r1 c1 x ``` Increment all values in the subgrid defined by the top-left corner (r0, c0) and the bottom-right corner (r1, c1) by x. Query Operation: ``` Q r c ``` Return the current value of the cell at position (r, c). # Input Format The first line contains two integers R and C, representing the number of rows and columns in the grid. The second line contains an integer Q, the number of queries to follow. Each of the next Q lines represents a query in one of the two formats specified above. # Output Format For each query operation, output the value of the cell in a new line. # Constraints 1 ≤ R, C ≤ 1000 1 ≤ Q ≤ 100000 0 ≤ r0 ≤ r1 < R 0 ≤ c0 ≤ c1 < C 1 ≤ x ≤ 10^9 0 ≤ r < R 0 ≤ c < C # Sample Input ``` 4 5 6 I 1 1 2 2 3 I 0 0 1 1 2 Q 1 1 Q 2 2 I 0 0 3 4 1 Q 3 4 ``` # Sample Output ``` 5 3 1 ``` # Explanation Initially, the grid is ``` 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ``` After the first increment operation `I 1 1 2 2 3`, the grid becomes ``` 0 0 0 0 0 0 3 3 0 0 0 3 3 0 0 0 0 0 0 0 ``` After the second increment operation `I 0 0 1 1 2`, the grid becomes ``` 2 2 0 0 0 2 5 3 0 0 0 3 3 0 0 0 0 0 0 0 ``` Then the query `Q 1 1` returns 5 and the query `Q 2 2` returns 3. After the third increment operation `I 0 0 3 4 1`, the grid becomes ``` 3 3 1 1 1 3 6 4 1 1 1 4 4 1 1 1 1 1 1 1 ``` Finally, the query `Q 3 4` returns 1.","solution":"def grid_operations(R, C, queries): grid = [[0] * C for _ in range(R)] results = [] for query in queries: parts = query.split() if parts[0] == \'I\': r0, c0, r1, c1, x = map(int, parts[1:]) for i in range(r0, r1 + 1): for j in range(c0, c1 + 1): grid[i][j] += x elif parts[0] == \'Q\': r, c = map(int, parts[1:]) results.append(grid[r][c]) return results"},{"question":"In this problem, you will need to design an algorithm that processes a set of event logs and identifies if a certain condition known as the \\"event window overlap\\" occurs. An event log consists of n events, where each event is represented by its start and end times. We define the event window of an event as the duration from its start time to its end time. Two events are said to overlap if their event windows intersect at any point in time. Your task is to determine if there are any overlapping event windows in the given event log. -----Input----- The first line contains an integer n (1 ≤ n ≤ 2·10^5) — the number of events in the event log. The next n lines contain two integers each, start_{i} and end_{i} (0 ≤ start_{i} < end_{i} ≤ 10^9), which represent the start and end times of the i-th event. -----Output----- Output \\"YES\\" if there is any pair of overlapping event windows, otherwise output \\"NO\\". -----Examples----- Input 3 1 5 6 10 2 4 Output NO Input 4 1 5 5 10 2 7 8 12 Output YES Input 2 0 10 5 15 Output YES Note: The first example has no overlapping event windows. In the second example, the event window (2, 7) overlaps with both (1, 5) and (5, 10). In the third example, the event windows (0, 10) and (5, 15) overlap.","solution":"def has_event_overlap(events): Determine if any event windows overlap in the given list of events. Args: events (list of tuples): List of events where each event is represented as (start, end) Returns: str: \\"YES\\" if any event windows overlap, otherwise \\"NO\\" # Sort events by start time events.sort() # Iterate over the events and check for overlap previous_end = -1 for start, end in events: if start < previous_end: return \\"YES\\" previous_end = end return \\"NO\\""},{"question":"You are given two integer arrays `arr1` and `arr2`, both of which are non-empty and sorted in non-decreasing order. Your task is to merge these two arrays into a single sorted array. Additionally, you are required to return the merged array such that no duplicates are present. # Example: Given: ``` arr1 = [1, 3, 4, 5, 7] arr2 = [2, 3, 5, 6] ``` Output: ``` merge_and_remove_duplicates(arr1, arr2) --> [1, 2, 3, 4, 5, 6, 7] ``` # Constraints: - The elements in both `arr1` and `arr2` are guaranteed to be integers. - You must ensure that the output array contains no duplicates. # Function Signature: Python ```python def merge_and_remove_duplicates(arr1: List[int], arr2: List[int]) -> List[int]: pass ``` Write a function that meets the above requirements and returns the correct result.","solution":"from typing import List def merge_and_remove_duplicates(arr1: List[int], arr2: List[int]) -> List[int]: Merges two sorted arrays into one sorted array and removes duplicates. Parameters: arr1 (List[int]): First sorted array. arr2 (List[int]): Second sorted array. Returns: List[int]: Merged and deduplicated sorted array. merged_set = set(arr1).union(arr2) # Create a set to remove duplicates using union of two arrays return sorted(merged_set) # Return sorted list of the merged set"},{"question":"A software company is building a new feature for their messaging application. This feature will filter and process the chat logs. A chat log consists of multiple messages, each represented by a tuple (user_id, timestamp, message). The user_ids are unique for each user, and the timestamps are unique within the chat log. The task is to identify \\"active sessions\\" for each user. An active session is defined as a maximum sequence of messages from the same user such that the difference between the timestamps of any two consecutive messages in the sequence is at most k minutes. Given the chat log and k, calculate the number of active sessions for each user. -----Input----- - The first line of the input contains an integer n (1 ≤ n ≤ 10^5) — the number of messages in the chat log. - The second line contains an integer k (1 ≤ k ≤ 10^9) — the maximum allowed minutes between consecutive messages in an active session. - The next n lines each contain a tuple (user_id, timestamp, message) where 1 ≤ user_id ≤ 10^5, 1 ≤ timestamp ≤ 10^18, and message is a string of alphanumeric characters and spaces (1 ≤ message length ≤ 100). -----Output----- Print the total number of active sessions for each user_id in ascending order of user_ids. Each line should contain the user_id and the number of active sessions for that user separated by a space. -----Example----- Input 5 10 1 10 \\"Hello\\" 2 15 \\"Hi\\" 1 20 \\"How are you?\\" 1 50 \\"Goodbye\\" 2 60 \\"See you\\" Output 1 2 2 2 -----Note----- In the example: - User 1 has messages at timestamps 10, 20, and 50, forming two sessions: [10, 20] and [50]. - User 2 has messages at timestamps 15 and 60, forming two sessions: [15] and [60].","solution":"def count_active_sessions(n, k, logs): from collections import defaultdict # Dictionary to store user\'s messages sorted by timestamp user_messages = defaultdict(list) # Populate the dictionary with user message logs for log in logs: user_id, timestamp, message = log user_messages[user_id].append(timestamp) # Result dictionary to store the count of active sessions for each user active_sessions = {} # Calculate active sessions for each user for user_id in sorted(user_messages.keys()): timestamps = sorted(user_messages[user_id]) session_count = 1 for i in range(1, len(timestamps)): if timestamps[i] - timestamps[i-1] > k: session_count += 1 active_sessions[user_id] = session_count return active_sessions # Example usage (You can remove this part before actual testing or submission) if __name__ == \\"__main__\\": logs_input = [ (1, 10, \\"Hello\\"), (2, 15, \\"Hi\\"), (1, 20, \\"How are you?\\"), (1, 50, \\"Goodbye\\"), (2, 60, \\"See you\\"), ] n = 5 k = 10 result = count_active_sessions(n, k, logs_input) for user_id, sessions in result.items(): print(f\\"{user_id} {sessions}\\")"},{"question":"A software development company is in the process of creating a scheduling system for their project management tool. The scheduling system must determine the minimum number of breaks needed throughout a workday based on the planned number of active hours. A workday is represented by a list of integers where each integer denotes a period of continuous work in hours. The organization requires that every work period be followed by at least one-hour break, but no two work periods can be scheduled back-to-back without any break in between them. Write a function that calculates the minimum number of breaks required for a given work schedule. -----Input:----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N denoting the number of work periods in the day. - The second line contains N space-separated integers where each integer represents the duration of a work period in hours. -----Output:----- For each test case print a single line containing one integer, the minimum number of breaks required for the given work schedule. -----Constraints----- - 1 leq T leq 1000 - 1 leq N leq 10^5 - 1 leq Duration of each work period leq 24 - The sum of N over all test cases does not exceed 10^6 -----Sample Input:----- 2 3 4 3 2 2 6 7 -----Sample Output:----- 2 1 -----EXPLANATION:----- In the first test case, there are three work periods of 4, 3, and 2 hours, respectively. To separate the three periods, we need two breaks: one between the first and second period and another between the second and third period. Thus, we need 2 breaks. In the second test case, there are two work periods of 6 and 7 hours. Only one break is needed to separate them.","solution":"def min_breaks_needed(T, test_cases): Returns the minimum number of breaks needed for each test case :param T: int, number of test cases :param test_cases: list of tuples, each tuple contains a list of work periods in hours for that test case :return: list of int, minimum number of breaks required for each test case results = [] for case in test_cases: N, periods = case if N == 0: results.append(0) else: results.append(N - 1) return results"},{"question":"Write a Python function to determine if a given substring is a rotated version of a string. A string is considered a rotated version of another string if you can obtain it by rotating the original string by any number of characters. Input The function should take two strings, `original` and `rotated`, where both strings consist of lowercase alphabetic characters only and have lengths between 1 and 1000. Output The function should return a boolean value, `True` if `rotated` is a rotated version of `original`, and `False` otherwise. Examples Input: original = \\"hello\\" rotated = \\"llohe\\" Output: True Input: original = \\"hello\\" rotated = \\"heoll\\" Output: False","solution":"def is_rotated_version(original, rotated): Determines if the given \'rotated\' string is a rotated version of the \'original\' string. Parameters: original (str): The original string. rotated (str): The string to check. Returns: bool: True if \'rotated\' is a rotated version of \'original\', False otherwise. if len(original) != len(rotated): return False # Concatenate the original string with itself concatenated = original + original # Check if the rotated string is a substring of the concatenated string return rotated in concatenated"},{"question":"A certain Land of Statements has a peculiar type of instruction set. This land\'s instruction set consists of only two types of statements - \\"increase\\" and \\"decrease\\". Each statement can be of one of the following types: 1. n++, which increases the value of variable n by 1. 2. n--, which decreases the value of variable n by 1. You are given a series of k statements, and you need to execute these statements sequentially to calculate the final value of variable n, which initially starts at 0. -----Input----- The first line contains a single integer k (1 ≤ k ≤ 200) — the number of statements. The next k lines contain a statement each. Each statement can only be \'n++\' or \'n--\', and there are no empty statements. -----Output----- Print the final value of n after executing all the statements. -----Examples----- Input 3 n++ n++ n-- Output 1 Input 4 n-- n++ n++ n++ Output 2","solution":"def final_value(k, operations): Calculates the final value of the variable n after performing a series of \'n++\' and \'n--\' operations. Parameters: k (int): The number of operations. operations (list of str): The list of operations, each of which is either \'n++\' or \'n--\'. Returns: int: The final value of n. n = 0 for operation in operations: if operation == \\"n++\\": n += 1 elif operation == \\"n--\\": n -= 1 return n"},{"question":"Peter has decided to adopt a new lifestyle where he walks every day for exercise and also dedicates time to reading books. He has set a goal to either walk or read each day, but he does not want to do the same activity on two consecutive days. Additionally, on any given day, there might be rainy weather which prevents him from walking outside. Based on the weather forecast, Peter wants to determine the maximum number of days he can engage in his activities without any consecutive repetitions and regardless of weather limitations. Input: The first line contains a positive integer n (1 ≤ n ≤ 100) — the number of days Peter plans his activities. The second line contains the sequence of integers w1, w2, ..., wn (0 ≤ wi ≤ 1) separated by space, where: * wi equals 0 if it is rainy on the i-th day (Peter cannot walk on that day); * wi equals 1 if it is not rainy on the i-th day (Peter can choose to walk if he wants). Output: Print the maximum number of days Peter can either walk or read without repeating the same activity on consecutive days. Example: Input 5 1 0 1 0 1 Output 5 Explanation: In this example, Peter can follow the schedule below: - Day 1: Walk (since it is not rainy) - Day 2: Read (since it is rainy and he can\'t walk) - Day 3: Walk (since it is not rainy and he shouldn\'t repeat reading) - Day 4: Read (since it is rainy and he can\'t walk) - Day 5: Walk (since it is not rainy and he shouldn\'t repeat reading) Thus, Peter successfully plans his activities for all 5 days without repeating the same activity on consecutive days.","solution":"def max_nonconsec_days(n, weather): count = 0 last_activity = None for i in range(n): if weather[i] == 1: if last_activity != \'walk\': last_activity = \'walk\' count += 1 else: last_activity = \'read\' count += 1 else: last_activity = \'read\' count += 1 return count"},{"question":"Create a function to determine if a given string is a valid palindrome. A palindrome is a string that reads the same forward and backward. However, in this case, we need to consider only alphanumeric characters and ignore case sensitivity. Write a function `is_palindrome(s: str) -> bool` that returns `True` if the string is a valid palindrome, and `False` otherwise. # Input - A single string `s` containing alphanumeric characters and possibly spaces or other punctuation. The string can be of length between 1 and 10^5. # Output - A boolean value indicating whether the string is a valid palindrome. # Examples Example 1 ``` Input: \\"A man, a plan, a canal: Panama\\" Output: True ``` Example 2 ``` Input: \\"race a car\\" Output: False ``` Example 3 ``` Input: \\" \\" Output: True ``` # Note - Please ensure that your solution is optimized for both time and space complexity, considering the constraint of the string length up to 100000.","solution":"def is_palindrome(s: str) -> bool: Returns True if the given string is a valid palindrome considering only alphanumeric characters and ignoring case, otherwise returns False. # Filter the alphanumeric characters and convert to lowercase filtered_chars = [char.lower() for char in s if char.isalnum()] # Compare the filtered list with its reverse return filtered_chars == filtered_chars[::-1]"},{"question":"Andrei and Kira love spending their weekends visiting new scenic spots. They plan their trips very meticulously by making sure they are as cost-efficient as possible. They\'ve categorized all scenic spots they want to visit into n clusters, such that each cluster contains a non-empty set of spots. Due to local travel constraints and attractions, Andrei can only visit one spot per cluster in a single trip. However, the convenience of visiting these spots comes at a certain cost due to varying entry fees, distance travel, and other logistics. Each trip has a different cost depending on which spot in each cluster they decide to include in the trip. Andrei wants to minimize his travel cost for each trip he plans. You are given the costs of visiting each spot in each cluster. For each cluster, Andrei wants to know the minimum cost of selecting exactly one spot from each cluster provided the spots are organized linearly within each cluster as costi,1, costi,2, ..., costi,mi, where i represents the cluster, and mi represents the number of spots in that cluster. Write a program to help Andrei find the minimum cost for his upcoming trip. Input The first line contains an integer n (1 ≤ n ≤ 100), the number of clusters. Each of the next n lines contains integers: - The first integer mi (1 ≤ mi ≤ 100) gives the number of spots in the i-th cluster. - The following mi integers represent the costs of visiting each spot in the i-th cluster. Output Print a single integer, the minimum cost for Andrei to visit exactly one spot from each cluster. Example Input 3 3 10 50 70 2 20 40 4 5 20 40 10 Output 35 Explanation The minimum cost trip for Andrei could select: 1st cluster: cost of 10, 2nd cluster: cost of 20, 3rd cluster: cost of 5. Thus, the minimum cost is 10 + 20 + 5 = 35.","solution":"def min_trip_cost(n, clusters): Finds the minimum cost to visit exactly one spot from each cluster. Parameters: n (int): Number of clusters clusters (list of list of int): List containing sub-lists of costs for each cluster Returns: int: The minimum total cost for the trip total_cost = 0 for cluster in clusters: total_cost += min(cluster) return total_cost"},{"question":"# Problem Statement: Palindromic Path Given a grid of size n x n (1 <= n <= 500), filled with lowercase English letters, determine whether there exists a path from the top-left corner of the grid to the bottom-right corner that forms a palindrome. You may move only down or right at any point in time. A path in the grid is considered a palindrome if when concatenated together, the sequence of characters reads the same forwards and backwards. **Input:** - An integer n, the size of the grid. - n lines each containing n lowercase English letters, representing the grid. **Output:** - Print \\"YES\\" if there exists a path from the top-left to the bottom-right that forms a palindrome. Otherwise, print \\"NO\\". **Examples:** **Input:** ``` 3 aba bcb aba ``` **Output:** ``` YES ``` **Input:** ``` 2 ab bc ``` **Output:** ``` NO ``` **Explanation:** For the first example, one possible path forming the palindrome \\"abacaba\\": - Start at (0, 0) -> \'a\' - Move right to (0, 1) -> \'a\' + \'b\' - Move right to (0, 2) -> \'ab\' + \'a\' - Move down to (1, 2) -> \'aba\' + \'c\' - Move down to (2, 2) -> \'abac\' + \'a\' - Move left to (2, 1) -> \'abaca\' + \'b\' - Move left to (2, 0) -> \'abacab\' + \'a\' -> \\"abacaba\\" is a palindrome. For the second example, no such path can form a palindrome string. **Note:** This problem tests your ability to use dynamic programming or breadth-first search (BFS) to explore paths in a grid. Efficiently checking for the palindromic nature of a path is crucial due to the potential constraint of 500 rows and columns.","solution":"def is_palindromic_path_exist(n, grid): Returns \'YES\' if there exists a palindromic path from the top-left to the bottom-right of the grid, otherwise \'NO\'. from collections import deque def is_palindrome(s): return s == s[::-1] queue = deque([(0, 0, grid[0][0], grid[0][0])]) # (x, y, forward path, backward path) while queue: x, y, fwd, bwd = queue.popleft() if x == n - 1 and y == n - 1: if is_palindrome(fwd): return \\"YES\\" if x + 1 < n: queue.append((x + 1, y, fwd + grid[x + 1][y], grid[x + 1][y] + bwd)) if y + 1 < n: queue.append((x, y + 1, fwd + grid[x][y + 1], grid[x][y + 1] + bwd)) return \\"NO\\""},{"question":"Given a list of integers, and an integer X, your task is to count how many elements in the list are greater than X. Example 1: Input: arr = [1, 2, 3, 4, 5], X = 3 Output: 2 Explanation: There are 2 elements greater than 3 (4 and 5). Example 2: Input: arr = [10, 8, 5, 1, 7], X = 6 Output: 3 Explanation: There are 3 elements greater than 6 (10, 8, and 7). Your Task: You don\'t need to read input or print anything. Your task is to complete the function countGreaterThanX() which takes a list of integers arr and an integer X, and returns the count of elements greater than X. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1<=len(arr)<=1000 0<=arr[i], X<=10000","solution":"def countGreaterThanX(arr, X): Returns the count of elements in arr that are greater than X. count = 0 for num in arr: if num > X: count += 1 return count"},{"question":"John is learning about prime numbers and he wants to play a prime number game. The game involves two players who take turns choosing a prime number from a given list. Once a prime number is chosen, it is removed from the list and cannot be chosen again. The game ends when there are no more prime numbers left to pick. The winner of the game is the player who has picked the most prime numbers. John always goes first. Both players will play optimally. Given a list of numbers, determine the winner of the game. Input The first line of the input is an integer T, the number of test cases. T is not larger than 100. Each test case contains one line. The line contains a list of integers separated by space. The list contains no more than 100 different integers, and each integer is between 1 and 1000 inclusive. Output For each test case, print \\"John\\" if John wins the game, and \\"Opponent\\" if the opponent wins the game. Explanation for Sample Input/Output Each test case consists of a list of integers. From each list, you need to derive the sublist of prime numbers, calculate how many prime numbers each player will pick considering both play optimally, and determine the winner. SAMPLE INPUT 3 2 3 4 5 6 13 11 17 19 23 29 31 37 41 43 47 4 6 8 9 10 SAMPLE OUTPUT John John Opponent","solution":"def is_prime(n): Helper function to check if n is a prime number. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def prime_game_winner(prime_numbers): Determines the winner of the prime number game given a list of integers. John always starts first and both play optimally. primes = [num for num in prime_numbers if is_prime(num)] prime_count = len(primes) if prime_count % 2 == 0: return \\"Opponent\\" else: return \\"John\\" def prime_game(test_cases): Processes multiple test cases to determine the winner for each. results = [] for case in test_cases: prime_numbers = list(map(int, case.split())) results.append(prime_game_winner(prime_numbers)) return results"},{"question":"Given a list of integers, find the minimum positive integer that is not present in the list. If the list is empty, return 1. -----Input----- The input contains a single line, which holds a space-separated sequence of integers (1 <= n <= 1000) representing the list. -----Output----- Print a single integer which is the smallest positive integer not present in the list. -----Examples----- Input 1 2 3 Output 4 Input -1 -2 0 1 Output 2 Input 3 5 7 9 Output 1 Input 1 3 4 6 Output 2 -----Note----- In the first test case, the minimum positive integer not present in the list is 4. In the second test case, the list contains negative numbers and zero, so the smallest positive integer not present is 2. In the third test case, the list does not contain 1, so the output is 1. In the fourth test case, 1 is present, but 2 is missing from the list, so the output is 2.","solution":"def find_missing_positive_integer(nums): Finds the smallest positive integer missing from the list nums # Convert the space-separated string into a list of integers nums = list(map(int, nums.split())) # If the list is empty, return 1 if not nums: return 1 # Create a set from the given list num_set = set(nums) # Start checking from 1 upwards for the smallest positive integer not in the set smallest_positive = 1 while smallest_positive in num_set: smallest_positive += 1 return smallest_positive"},{"question":"Given a string, calculate the number of distinct substrings that can be formed from it. A substring is a contiguous sequence of characters within a string. For example, the distinct substrings of \\"abc\\" are \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", and \\"abc\\". Note that substrings are case-sensitive. Write a program that takes a string as an input and outputs the number of distinct substrings. Input Multiple datasets are provided. Each dataset is given as a single string on one line. The string consists of lowercase and uppercase letters only and has a length of at most 1000 characters. The end of input is indicated by a blank line. Output For each string, output the number of distinct substrings on one line. Example Input abc aaa Output 6 3","solution":"def count_distinct_substrings(s): Returns the number of distinct substrings of string s. substrings = set() for i in range(len(s)): for j in range(i + 1, len(s) + 1): substrings.add(s[i:j]) return len(substrings) def process_input(input_data): Processes multiple datasets from input and returns the output. lines = input_data.strip().split(\'n\') results = [] for line in lines: if line: results.append(count_distinct_substrings(line)) return results"},{"question":"In a kingdom far away, there lives a mighty dragon who loves gold. Every year, the villagers must bring him an offering of gold coins. Each villager has a certain amount of gold coins and they want to make sure they offer exactly the amount the dragon demands. If they offer too few, they will be eaten; if they offer too many, the dragon will be offended and might still eat them. The villagers want to find out if it\'s possible to select a subset of them such that the total number of gold coins is exactly equal to the amount the dragon demands. Input The first line contains an integer n (1 ≤ n ≤ 100), representing the number of villagers. The second line contains n integers g1, g2, ..., gn (1 ≤ gi ≤ 500), where gi denotes the number of gold coins each villager has. The third line contains a single integer k (1 ≤ k ≤ 50000), which is the exact amount of gold coins the dragon demands. Output Print \\"Possible\\" (without the quotes) if there exists a subset of villagers that together have exactly k gold coins. Otherwise, print \\"Impossible\\" (without the quotes). Examples Input 5 3 34 4 12 5 9 Output Possible Input 4 1 2 3 8 7 Output Impossible","solution":"def is_subset_sum_possible(n, gold_coins, k): Determines if there is a subset of villagers\' gold coins that sum up to exactly k coins. Args: n (int): Number of villagers. gold_coins (list of int): List of integers representing the number of gold coins each villager has. k (int): Exact amount of gold coins the dragon demands. Returns: str: \\"Possible\\" if there exists a subset of the villagers\' gold coins that sums up to exactly k, otherwise \\"Impossible\\". # Create a dp array initialized to False dp = [False] * (k + 1) dp[0] = True # sum of 0 is always possible for coin in gold_coins: # Traverse backwards to avoid recomputing dp array for the same coin for j in range(k, coin - 1, -1): dp[j] = dp[j] or dp[j - coin] return \\"Possible\\" if dp[k] else \\"Impossible\\" # Example Usage (uncomment to test): # if __name__ == \\"__main__\\": # n = 5 # gold_coins = [3, 34, 4, 12, 5] # k = 9 # print(is_subset_sum_possible(n, gold_coins, k)) # Should output: Possible # n = 4 # gold_coins = [1, 2, 3, 8] # k = 7 # print(is_subset_sum_possible(n, gold_coins, k)) # Should output: Impossible"},{"question":"A matrix is said to be a \\"Toeplitz\\" matrix if every diagonal from top-left to bottom-right has the same element. Given an M x N matrix, determine if it is a Toeplitz matrix. The matrix can have integers of both positive and negative values. Examples: Input: matrix = [ [1, 2, 3, 4], [5, 1, 2, 3], [9, 5, 1, 2] ] Output: True Input: matrix = [ [1, 2], [2, 2] ] Output: False Explanation: In the first example, each diagonal from top-left to bottom-right contains the same value, thus the matrix is a Toeplitz matrix. In the second example, the diagonal starting from matrix[0][0] contains [1, 2], which are different, thus the matrix is not a Toeplitz matrix. Note: 1. Matrix dimensions M and N will be integers in the range [1, 20]. 2. Matrix elements will be integers in the range [-100, 100].","solution":"def is_toeplitz_matrix(matrix): Determines if a given matrix is a Toeplitz matrix. Args: matrix (list of list of int): The matrix to check. Returns: bool: True if the matrix is a Toeplitz matrix, False otherwise. # Get dimensions of the matrix rows = len(matrix) cols = len(matrix[0]) # Check if every diagonal from top-left to bottom-right has the same element for r in range(rows): for c in range(cols): if r > 0 and c > 0 and matrix[r][c] != matrix[r-1][c-1]: return False return True"},{"question":"Given a string S consisting of lowercase and uppercase alphabets, your task is to determine if all the uppercase letters appear in alphabetical order in the string. Example 1: Input: S = \\"aBcDeF\\" Output: True Explanation: The uppercase letters in the string are \'B\', \'D\', and \'F\'. As they appear in alphabetical order, the output is True. Example 2: Input: S = \\"aCBdEf\\" Output: False Explanation: The uppercase letters in the string are \'C\', \'B\', and \'E\'. As they do not appear in alphabetical order, the output is False. Your Task: Complete the function isUppercaseInOrder() which takes a string str as input and returns a boolean value denoting whether all the uppercase letters appear in alphabetical order. You don\'t need to print the answer or take inputs. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= |S| <= 10^5 S consists only of English alphabets","solution":"def isUppercaseInOrder(S): Determine if all the uppercase letters in the string S appear in alphabetical order. :param S: str, a string consisting of lowercase and uppercase alphabets :return: bool, True if all the uppercase letters appear in alphabetical order last_upper = None for char in S: if char.isupper(): if last_upper and char < last_upper: return False last_upper = char return True"},{"question":"Sentence to Morse Code translator In this coding challenge, you need to write a function `translateToMorse` that converts a given sentence into Morse code. Morse code is a method used in telecommunication to encode text characters into sequences of dots, dashes, and spaces. Each letter corresponds to a unique sequence of dots (.) and dashes (-). # Requirement - Function Signature: `def translateToMorse(sentence: str) -> str` - Input: A string `sentence` that contains a sentence (composed of letters, digits, and spaces). - Output: A string representing the Morse code equivalent of the input sentence. Use a single whitespace to separate Morse codes of each character and three whitespaces to separate words. # Guidelines 1. Convert each letter in the sentence to its corresponding Morse code. 2. Separate each Morse code of individual characters by a single space. 3. Separate words by three spaces. # Morse Code Table | Character | Morse Code | | Character | Morse Code | | Character | Morse Code | |-----------|-------------|:-:|-----------|-------------|:-:|-----------|-------------| | A | .- | | N | -. | | 0 | ----- | | B | -... | | O | --- | | 1 | .---- | | C | -.-. | | P | .--. | | 2 | ..--- | | D | -.. | | Q | --.- | | 3 | ...-- | | E | . | | R | .-. | | 4 | ....- | | F | ..-. | | S | ... | | 5 | ..... | | G | --. | | T | - | | 6 | -.... | | H | .... | | U | ..- | | 7 | --... | | I | .. | | V | ...- | | 8 | ---.. | | J | .--- | | W | .-- | | 9 | ----. | | K | -.- | | X | -..- | | | | | L | .-.. | | Y | -.-- | | | | | M | -- | | Z | --.. | | | | # Example ```python print(translateToMorse(\\"HELLO WORLD\\")) ``` Output: ``` .... . .-.. .-.. --- .-- --- .-. .-.. -.. ``` # Notes - Ignore any punctuation marks and special characters which do not have corresponding Morse code representation. - Handle both upper and lowercase letters by converting all input to uppercase.","solution":"def translateToMorse(sentence: str) -> str: MORSE_CODE_DICT = {} words = sentence.upper().split() morse_words = [] for word in words: morse_chars = [MORSE_CODE_DICT[char] for char in word if char in MORSE_CODE_DICT] morse_words.append(\' \'.join(morse_chars)) return \' \'.join(morse_words)"},{"question":"The management team at a software development company is working on a new task management application. They are currently concerned with optimizing a feature that allows users to identify tasks which are due soon. The system stores tasks with their due dates and provides a function to retrieve tasks that are due within the next `D` days from the current date. To improve this function, the team needs a code snippet that efficiently finds all tasks due within the specified number of days. Your task is to implement a function `get_due_tasks(tasks, current_date, D)` that returns a sorted list of task IDs that are due within the next `D` days from the current date. The tasks are represented as a list of tuples, where each tuple contains two elements: the task ID (an integer) and the due date (a string in the format \\"YYYY-MM-DD\\"). -----Input section----- - tasks: A list of tuples, `[(task_id1, due_date1), (task_id2, due_date2), ...]` - current_date: A string representing the current date in the format \\"YYYY-MM-DD\\" - D: An integer representing the number of days within which tasks are due -----Output section----- - A sorted list of task IDs that are due within the next `D` days -----Constraints----- - Tasks list may contain up to 10^5 elements - Task IDs are unique integers - Due dates are valid date strings - 1 ≤ D ≤ 30 -----Sample Input - 1----- tasks = [(1, \\"2023-10-01\\"), (2, \\"2023-10-05\\"), (3, \\"2023-10-10\\")] current_date = \\"2023-10-01\\" D = 5 -----Sample Output - 1----- [1, 2] -----Sample Explanation - 1----- Tasks with IDs 1 and 2 are due on 2023-10-01 and 2023-10-05 respectively, which are within the next 5 days from the current date 2023-10-01. -----Sample Input - 2----- tasks = [(1, \\"2023-10-01\\"), (2, \\"2023-10-05\\"), (3, \\"2023-10-10\\"), (4, \\"2023-10-04\\")] current_date = \\"2023-10-02\\" D = 2 -----Sample Output - 2----- [4] -----Sample Explanation - 2----- Only the task with ID 4 is due within the next 2 days from 2023-10-02 (i.e., by 2023-10-04).","solution":"from datetime import datetime, timedelta def get_due_tasks(tasks, current_date, D): Returns a sorted list of task IDs due within the next D days from current_date. Args: tasks (list of tuples): list of tasks where each task is represented as (task_id, due_date). current_date (str): the current date in the format \\"YYYY-MM-DD\\". D (int): the number of days within which tasks are due. Returns: list: sorted list of task IDs. current_date_obj = datetime.strptime(current_date, \\"%Y-%m-%d\\") end_date_obj = current_date_obj + timedelta(days=D) due_tasks = [ task_id for task_id, due_date in tasks if current_date_obj <= datetime.strptime(due_date, \\"%Y-%m-%d\\") <= end_date_obj ] return sorted(due_tasks)"},{"question":"You are given a list of N integers representing the heights of mountains in a range. A hiker wants to cross this range from left to right. However, the hiker can only move to adjacent mountains of equal or greater height. The hiker can start from any mountain and needs to determine the maximum number of consecutive mountains they can traverse. Given N and the heights of the mountains, find the maximum number of consecutive mountains the hiker can traverse. Example 1: Input: N = 6 heights = [5, 4, 7, 7, 1, 3] Output: 3 Explanation: The hiker can start from mountain 3 (height 7) and proceed to mountain 4 (height 7) and then to mountain 5 (height 1). Example 2: Input: N = 5 heights = [2, 2, 3, 4, 4] Output: 5 Explanation: The hiker can start from any point and traverse through all the mountains, achieving 5 consecutive mountains. Your Task: You don\'t need to read input, or print anything. You just need to complete the function maxConsecutiveMountains() that takes the list of heights and integer N as parameters and returns the maximum number of consecutive mountains the hiker can traverse. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 1 ≤ N ≤ 10^6 1 ≤ heights[i] ≤ 10^9","solution":"def maxConsecutiveMountains(N, heights): Returns the maximum number of consecutive mountains the hiker can traverse based on the given heights of the mountains. if not heights: return 0 # Initialize the variables to track the current streak and max streak of consecutive mountains max_streak = 1 current_streak = 1 # Iterate through the list of mountain heights for i in range(1, N): # If the current mountain height is equal or greater than the previous one if heights[i] >= heights[i - 1]: current_streak += 1 else: # If not, reset the current streak current_streak = 1 # Update the max streak if the current streak is greater max_streak = max(max_streak, current_streak) return max_streak"},{"question":"You are organizing a music festival and you want to manage the performance schedule efficiently. Each band has a performance slot defined by a start and end time. Your goal is to find the maximum number of non-overlapping performances you can attend. You will write a function that takes a list of tuples as input, where each tuple consists of two integers: the start and end times of a band\'s performance. The function should return an integer representing the maximum number of non-overlapping performances. For example, given the list of performances `[(1, 4), (3, 5), (0, 6), (5, 7), (8, 9), (5, 9)]`, the maximum number of non-overlapping performances you can attend is `3`. Write the function following this signature: ```python def max_non_overlapping_performances(performance_slots: [(int, int)]) -> int: pass ``` **Constraints**: - The start and end times are positive integers. - Start time is always less than end time. - The list of performances can contain up to 10,000 performance slots. Ensure that your solution is efficient and performs well for large inputs.","solution":"def max_non_overlapping_performances(performance_slots): Returns the maximum number of non-overlapping performances that can be attended. :param performance_slots: List of tuples, where each tuple contains start and end times of a performance. :return: Integer representing the maximum number of non-overlapping performances. # Sort the performance slots by their end times sorted_slots = sorted(performance_slots, key=lambda x: x[1]) # Initialize variables max_performances = 0 last_end_time = 0 # Iterate through the sorted performance slots for start, end in sorted_slots: if start >= last_end_time: # Check if the performance can be attended max_performances += 1 last_end_time = end # Update the end time to the end of the current performance return max_performances"},{"question":"In a distant planet called Zorg, inhabitants communicate using a peculiar string pattern known as Zorgian. Zorgian strings are made up of only lowercase alphabets and have a unique property: for any given string, the characters can be shuffled to form a new string where no character remains in its original position. This transformed string is called the \\"anti-anagram\\" of the original string. You are tasked with writing a program that helps Zorgians by generating an anti-anagram of a given string. However, since in some cases it may not be possible to generate an anti-anagram (e.g., strings of length 1), your program should output \\"IMPOSSIBLE\\" when such a string is provided. Note: - The input will consist of several test cases. - Each test case will be a single string of lowercase alphabets. - The input ends with a blank line which should not be processed. Your task is to write a program to rearrange each provided string into its anti-anagram, if possible, and output the result accordingly. Input The input consists of several strings, each on a new line. It ends with a blank line which should not be processed. Output For each provided string, output its anti-anagram on a new line. If an anti-anagram is not possible, output \\"IMPOSSIBLE\\". Examples Input abc aa abcd a Output bca IMPOSSIBLE abdc IMPOSSIBLE","solution":"from random import shuffle def generate_anti_anagram(s): Generates an anti-anagram for the given string if possible. Otherwise, returns \'IMPOSSIBLE\'. if len(s) == 1: return \\"IMPOSSIBLE\\" chars = list(s) length = len(chars) # Try creating a shuffled version that meets the anti-anagram criteria for _ in range(100): # Give up after 100 attempts shuffle(chars) if all(chars[i] != s[i] for i in range(length)): return \'\'.join(chars) return \\"IMPOSSIBLE\\""},{"question":"You are given n points on a 2D plane, and your task is to find the pair of points that are closest to each other. You need to calculate the Euclidean distance between each pair of points and determine the minimum distance. The Euclidean distance between two points (x1, y1) and (x2, y2) is calculated as: [ text{distance} = sqrt{(x2 - x1)^2 + (y2 - y1)^2} ] Input The first line of input contains an integer n (2 ≤ n ≤ 10^5) — the number of points. Each of the next n lines contains two integers x and y (0 ≤ x, y ≤ 10^6) — the coordinates of the points. Output Output a single line with the minimum distance between any two points, formatted to six decimal places. Examples Input 3 0 0 3 4 1 1 Output 1.414214 Input 5 1 1 4 4 5 1 3 3 0 0 Output 1.414214 Input 4 0 0 0 3 4 0 4 3 Output 3.000000 Note In the first example, the closest pair of points are (0, 0) and (1, 1), with a distance of approximately 1.414214.","solution":"from math import sqrt def euclidean_distance(p1, p2): Returns the Euclidean distance between two points p1 and p2. Each point is a tuple of (x, y). return sqrt((p2[0] - p1[0])**2 + (p2[1] - p1[1])**2) def closest_pair_of_points(points): Returns the minimum distance between any two points from a list of points. Each point is a tuple of (x, y). n = len(points) min_distance = float(\'inf\') for i in range(n): for j in range(i + 1, n): distance = euclidean_distance(points[i], points[j]) if distance < min_distance: min_distance = distance return min_distance def closest_distance(points): Returns the minimum distance between any two points formatted to six decimal places. min_distance = closest_pair_of_points(points) return f\\"{min_distance:.6f}\\""},{"question":"You are given a list of n integers which can contain both positive and negative numbers. Your task is to divide this list into two subsets such that: 1. The absolute difference between the sum of elements in the first subset and the sum of elements in the second subset is minimized. 2. Each element from the original list must be included in exactly one of the two subsets. Write a program to find the minimum absolute difference. Input The first line of input contains an integer n (1 ≤ n ≤ 50). The second line contains n space-separated integers, each representing an element of the list. The given integers can be positive, negative, or zero and their absolute values will not exceed 100. Output Output a single integer which is the minimum absolute difference between the sums of the two subsets. Example Input 4 1 -2 3 4 Output 0 Input 3 5 -7 3 Output 1","solution":"def min_abs_difference(nums): total = sum(abs(num) for num in nums) n = len(nums) # DP to track possible sums dp = [False] * (total + 1) dp[0] = True for num in nums: current = [False] * (total + 1) for s in range(total + 1): if dp[s]: current[s] = True if s + abs(num) <= total: current[s + abs(num)] = True dp = current min_diff = float(\'inf\') for s in range((total // 2) + 1): if dp[s]: min_diff = min(min_diff, total - 2 * s) return min_diff"},{"question":"You are given a list of courses and their respective prerequisites in the form of pairs. Each pair `(a, b)` indicates that course `a` must be taken before course `b`. Based on this information, determine if it is possible to complete all courses. If it is possible, output `Possible`, otherwise output `Impossible`. Your task is to implement a function that checks whether it is feasible to complete all courses given the prerequisites. INPUT: - The first line contains an integer `n` which represents the number of courses. - The second line contains an integer `m` which represents the number of prerequisite pairs. - The next `m` lines each contain two integers `a` and `b` indicating that course `a` is a prerequisite for course `b`. OUTPUT: - Output `Possible` if it is feasible to complete all courses, otherwise output `Impossible`. SAMPLE INPUT 5 4 1 2 2 3 3 4 4 5 SAMPLE OUTPUT Possible SAMPLE INPUT 2 4 4 1 2 2 3 3 4 4 2 SAMPLE OUTPUT 2 Impossible","solution":"def can_complete_courses(n, m, prerequisites): from collections import defaultdict, deque # Create an adjacency list and in-degree count adj_list = defaultdict(list) in_degree = {i: 0 for i in range(1, n+1)} for a, b in prerequisites: adj_list[a].append(b) in_degree[b] += 1 # Queue to perform topological sort using courses with no prerequisites queue = deque([node for node in in_degree if in_degree[node] == 0]) visited = 0 while queue: course = queue.popleft() visited += 1 for neighbor in adj_list[course]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) if visited == n: return \\"Possible\\" else: return \\"Impossible\\""},{"question":"You are given a connected undirected graph represented by an adjacency list. Each node in the graph contains an integer value. Your task is to find the highest sum of values along any simple path in the graph. A simple path is a path that does not contain any repeated vertices. The length of the path is the number of vertices in it minus one. The sum of the path is the sum of the integer values of the vertices in the path. Input The input consists of one or more independent test cases. The first line of each test case contains an integer n (1 ≤ n ≤ 10^5), where n is the number of vertices in the graph. Vertices are numbered from 1 to n. The second line contains n integers where the i-th integer represents the value of the i-th vertex. Each of the following n-1 lines contains two integers u and v (1 ≤ u, v ≤ n), indicating that there is an edge between vertex u and vertex v. The last line of the input after all test cases always contains a single zero. It does not define a test case. It just marks the end of the input and does not require any output. Output For each test case, output a single integer representing the highest sum of values along any simple path in the graph. Example Input 6 1 2 3 4 5 6 1 2 2 3 3 4 4 5 5 6 0 Output 21 Explanation In the provided example, the highest sum path is from vertex 1 to vertex 6: 1 + 2 + 3 + 4 + 5 + 6 = 21.","solution":"def highest_sum_path(n, values, edges): from collections import defaultdict import sys # Create the adjacency list for the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) def dfs(node, visited): visited.add(node) max_1, max_2 = 0, 0 total = values[node - 1] for neighbor in graph[node]: if neighbor not in visited: path_sum = dfs(neighbor, visited) if path_sum > max_1: max_2 = max_1 max_1 = path_sum elif path_sum > max_2: max_2 = path_sum max_sum_path[0] = max(max_sum_path[0], max_1 + max_2 + total) return max_1 + total max_sum_path = [-sys.maxsize] visited = set() dfs(1, visited) return max_sum_path[0] def process_input(input_data): i = 0 results = [] input_lines = input_data.strip().split(\\"n\\") while i < len(input_lines): n = int(input_lines[i]) if n == 0: break i += 1 values = list(map(int, input_lines[i].split())) i += 1 edges = [] for _ in range(n - 1): u, v = map(int, input_lines[i].split()) edges.append((u, v)) i += 1 results.append(highest_sum_path(n, values, edges)) return results def main(input_data): results = process_input(input_data) for result in results: print(result)"},{"question":"You are given a list of integers and an integer ( k ). You need to determine whether it\'s possible to obtain a subarray whose sum is exactly ( k ) using elements from the given list. If it is possible, print Yes. Otherwise, print No. A subarray is a contiguous part of an array. Example: arr = [1, 2, 3, 4, 5] k = 9 To obtain the sum of ( 9 ), you can use the subarray [2, 3, 4]. Therefore, return Yes. Function Description Complete the `subarraySum` function in the editor below. It should return a string, either Yes or No. `subarraySum` has the following parameter(s): - `arr`: a list of integers - `k`: an integer representing the target sum Returns - `string`: either Yes or No Input Format The first line contains an integer ( n ), the number of elements in the array. The second line contains ( n ) space-separated integers, representing the elements of the array. The third line contains an integer ( k ), the target sum. Constraints - ( 1 leq n leq 100 ) - ( -1000 leq text{arr}[i] leq 1000 ) - ( -10^6 leq k leq 10^6 ) Sample Input 0 5 1 2 3 4 5 9 Sample Output 0 Yes Explanation 0 To obtain the sum of ( 9 ), you can use the subarray [2, 3, 4]. Therefore, return Yes. Sample Input 1 4 1 -1 1 -1 0 Sample Output 1 Yes Explanation 1 To obtain the sum of ( 0 ), you can use the subarray [1, -1, 1, -1] or any other possible combination that sums to ( 0 ). Therefore, return Yes. Sample Input 2 3 4 3 2 6 Sample Output 2 No Explanation 2 No subarray sums to ( 6 ). Therefore, return No.","solution":"def subarraySum(arr, k): Determine whether there exists a subarray whose sum equals k. Args: arr: list of integers k: target sum integer Returns: \'Yes\' if such a subarray exists, otherwise \'No\' current_sum = 0 sum_map = {0: -1} # This handles the case when subarray starts from index 0 for i, num in enumerate(arr): current_sum += num if (current_sum - k) in sum_map: return \\"Yes\\" sum_map[current_sum] = i return \\"No\\""},{"question":"# Description: Write a function that takes an array of integers and an integer `k` and returns the maximum sum of a subarray of length `k`. # Notes: * The input array will have at least `k` integers. * The array can contain both positive and negative integers. ___ Examples ``` maxSubarraySum([1, 4, 2, 10, 23, 3, 1, 0, 20], 4) === 39 maxSubarraySum([-1, -2, 3, 4, -5, 6], 2) === 7 maxSubarraySum([5, -1, -2, 10, 1], 3) === 9 maxSubarraySum([1, 2, 3, 4], 2) === 7 ```","solution":"def maxSubarraySum(arr, k): Returns the maximum sum of a subarray of length k. Parameters: arr (list of int): The input array of integers. k (int): The length of the subarray. Returns: int: The maximum sum of a subarray of length k. n = len(arr) if n < k: raise ValueError(\\"The length of the array must be at least k.\\") max_sum = curr_sum = sum(arr[:k]) for i in range(k, n): curr_sum = curr_sum + arr[i] - arr[i - k] max_sum = max(max_sum, curr_sum) return max_sum"},{"question":"You are given a grid where each cell contains a certain amount of gold. The grid is represented as a 2D array of non-negative integers. Your task is to find a path from the top-left cell to the bottom-right cell, collecting the maximum amount of gold along the way. You can only move right or down from a cell. Write a function `max_gold_path(grid)` that takes a 2D array `grid` as input and returns the maximum amount of gold that can be collected along a valid path from the top-left to bottom-right cell. Input A 2D array `grid` of non-negative integers where `1 <= len(grid), len(grid[0]) <= 100` and `0 <= grid[i][j] <= 1000`. Output An integer representing the maximum amount of gold that can be collected. Function Signature ```python def max_gold_path(grid: List[List[int]]) -> int: pass ``` Example Input ```python grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] ``` Output `12` Explanation The path with the maximum gold is `1 -> 3 -> 5 -> 2 -> 1`, which sum up to `12`. Input ```python grid = [ [1, 2, 5], [3, 2, 1], [4, 3, 1] ] ``` Output `12` Explanation The path with the maximum gold is `1 -> 3 -> 4 -> 3 -> 1`, which sum up to `12`.","solution":"def max_gold_path(grid): Returns the maximum amount of gold that can be collected along a path from the top-left cell to the bottom-right cell, moving only right or down. if not grid or not grid[0]: return 0 n = len(grid) m = len(grid[0]) # Create a DP table to store max gold collected up to each cell dp = [[0] * m for _ in range(n)] # Initialize the top-left cell dp[0][0] = grid[0][0] # Initialize the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Initialize the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right cell will have the answer return dp[n-1][m-1]"},{"question":"collections.Counter() The Counter class from the `collections` module is a specialized dictionary designed for counting hashable items. It is commonly used to track elements\' frequency in collections such as lists, tuples, or strings. For example, the following code will count the occurrences of each character in the string `s`: ```python >>> from collections import Counter >>> >>> s = \\"abracadabra\\" >>> counter = Counter(s) >>> print(counter) Counter({\'a\': 5, \'b\': 2, \'r\': 2, \'c\': 1, \'d\': 1}) >>> >>> print(counter.most_common(2)) [(\'a\', 5), (\'b\', 2)] ``` The `most_common(n)` method returns the `n` most common elements and their counts from the most common to the least. Task You are given a string `S`. Your task is to count the frequency of each character in the string using the `Counter` class, and print the `3` most common characters along with their counts. If there are ties, sort the characters in lexicographical (alphabetical) order. Input Format A single line containing the string `S`. Constraints 1 leq |S| leq 10^5 `S` consists of lowercase English alphabets only. Output Format Print the `3` most common characters and their counts in separate lines. The output should be sorted by frequency first, and by character in case of ties. Sample Input ``` aabbbccde ``` Sample Output ``` b 3 a 2 c 2 ``` Explanation In the string `aabbbccde`, the character \'b\' appears 3 times, followed by \'a\' and \'c\' which both appear 2 times. When there is a tie, characters are sorted alphabetically. Therefore, \'a\' will come before \'c\'.","solution":"from collections import Counter def most_common_characters(S): # Create a Counter object from the string S counter = Counter(S) # Get the 3 most common characters common_chars = counter.most_common() # Sort the characters first by frequency, then by lexicographic order in case of ties common_chars.sort(key=lambda pair: (-pair[1], pair[0])) # Extract the top 3 characters top_three = common_chars[:3] # Print the top 3 most common characters and their counts for char, count in top_three: print(char, count) # Example usage if __name__ == \\"__main__\\": S = \\"aabbbccde\\" most_common_characters(S)"},{"question":"Given a list of integers, determine the sum of the numbers that are divisible by both 3 and 5. Write a function named `sumDivisibleByThreeAndFive` to perform this operation. The function should return the sum as an integer. Function Signature: ```python def sumDivisibleByThreeAndFive(numbers: List[int]) -> int: ``` # Input - A list of integers `numbers` where 1 leq text{len(numbers)} leq 10^5 and -10^9 leq text{numbers}[i] leq 10^9. # Output - An integer representing the sum of all numbers in the list that are divisible by both 3 and 5. # Example Example 1 Input: ```python numbers = [15, 30, 45, 20, 10, -15] ``` Output: ```python 75 ``` Example 2 Input: ```python numbers = [8, 12, 5, 7, 9] ``` Output: ```python 0 ``` # Explanation In Example 1, the numbers divisible by both 3 and 5 in the list are 15, 30, and -15. Their sum is 15 + 30 + -15 = 30. In Example 2, there are no numbers that are divisible by both 3 and 5, so the sum is 0.","solution":"def sumDivisibleByThreeAndFive(numbers): Returns the sum of numbers that are divisible by both 3 and 5. return sum(num for num in numbers if num % 15 == 0)"},{"question":"Given two strings, textbf{S1} and textbf{S2}, determine if textbf{S2} is a subsequence of textbf{S1}. A subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. Implement a function that checks if textbf{S2} is a subsequence of textbf{S1} and returns \\"YES\\" if it is, and \\"NO\\" otherwise. Function Signature: ```python def is_subsequence(S1: str, S2: str) -> str: ``` Input Format - Two space-separated strings textbf{S1} and textbf{S2}. Constraints - 1 leq |S1|, |S2| leq 10^5 - Both strings consist of lowercase English letters. Output Format - Print \\"YES\\" if textbf{S2} is a subsequence of textbf{S1}. - Print \\"NO\\" otherwise. Sample Input abcde ace Sample Output YES Explanation The string textbf{S2} (\\"ace\\") can be derived from the string textbf{S1} (\\"abcde\\") by removing the characters \'b\' and \'d\', while preserving the relative order of the remaining characters. Hence, the output is \\"YES\\".","solution":"def is_subsequence(S1: str, S2: str) -> str: Returns \\"YES\\" if S2 is a subsequence of S1, otherwise \\"NO\\". iter_S1 = iter(S1) return \\"YES\\" if all(char in iter_S1 for char in S2) else \\"NO\\""},{"question":"Complete the function/method so that it returns a string with all the vowels removed. Examples ```python # returns \'Hll Wrld!\' remove_vowels(\'Hello World!\') # returns \'Pyhns r prgrmmng lngg\' remove_vowels(\'Pythons are programming language\') ```","solution":"def remove_vowels(s): Removes all vowels from the input string s. vowels = \\"aeiouAEIOU\\" return \'\'.join([char for char in s if char not in vowels])"},{"question":"Given a binary tree, write a function to find the length of the longest path which comprises nodes with consecutive values in path. The path refers to any sequence of nodes from a starting node to any node in the tree along the parent-child connections. The longest consecutive path needs to be determined for any path, and not necessarily fulfilling the binary tree property. Return the length of the longest consecutive path. Examples: ``` Input: 1 3 / 2 4 5 Output: 3 Explanation: Longest consecutive path is 3-4-5, so length is 3. ``` ``` Input: 2 3 / 2 / 1 Output: 2 Explanation: Longest consecutive path is 2-3, not 3-2-1, so length is 2. ``` Example 1: Input: root = [1,null,3,2,4,null,null,null,5] Output: 3 Explanation: The longest consecutive path is [3,4,5] and not [1,2] or any other path. Example 2: Input: root = [2,null,3,2,null,1] Output: 2 Explanation: The longest consecutive path is from [2, 3] and not from any other path. Note: 1. The number of nodes in the binary tree will be in the range [1, 2000]. 2. Each value of a node in the input will be an integer in the range [-10000, 10000].","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def longest_consecutive_path(root): if not root: return 0 def dfs(node, parent_val, length): if not node: return length if node.value == parent_val + 1: length += 1 else: length = 1 left_length = dfs(node.left, node.value, length) right_length = dfs(node.right, node.value, length) return max(length, left_length, right_length) return dfs(root, root.value - 1, 0)"},{"question":"Help Widget Corp is a company that creates various gadgets. One of their latest inventions is a widget sorting machine that takes a list of widget sizes and sorts them in non-ascending order (largest to smallest). However, due to a manufacturing glitch, the machine sometimes produces faulty widgets of size -1, which should be ignored in the sorting process. You are required to write a program that helps the machine sort the widgets properly. -----Input----- The input consists of two lines. - The first line contains an integer 1 le N le 1000, the number of widgets. - The second line contains a list of N integers separated by spaces, representing the sizes of the widgets. Each size will be between -1 and 10^6 (inclusive). -----Output----- Print the sizes of the widgets sorted in non-ascending order, and omit any widgets of size -1. -----Examples----- Sample Input 1: 5 2 3 -1 6 4 Sample Output 1: 6 4 3 2 Sample Input 2: 4 -1 -1 5 7 Sample Output 2: 7 5","solution":"def sort_widgets(N, sizes): Returns the sizes of the widgets sorted in non-ascending order, omitting any widgets of size -1. Parameters: N (int): The number of widgets. sizes (list of int): List of widget sizes. Returns: list of int: Sorted list of widget sizes in non-ascending order without -1. # Filter out -1 sizes valid_sizes = [size for size in sizes if size != -1] # Sort in non-ascending order valid_sizes.sort(reverse=True) return valid_sizes"},{"question":"You are a treasure hunter in the Land of Codeia. Recently, you found a treasure map that describes a route through a series of caves. There\'s a catch, though: these caves are connected in a peculiar way, and each connection has a magical resistance associated with it. You are given N caves and M connections between these caves. Each connection is described by two integers (u, v) representing a bidirectional path from cave u to cave v, and a third integer w which represents the magical resistance of this path. The magical resistance of a route is defined as the sum of resistances of all the paths in the route. You need to determine the minimum possible magical resistance to reach each cave from the starting cave (cave 1). ------ Input ------ The first line of the input contains two integers, N (the number of caves) and M (the number of connections). Each of the next M lines contains three integers u, v, and w — describing a bidirectional connection between caves u and v with magical resistance w. ------ Output ------ Print an array of N integers. The ith integer should be the minimum magical resistance to reach cave i+1 from cave 1. If cave i+1 is not reachable from cave 1, print -1 for cave i+1. ------ Constraints ------ 1 ≤ N ≤ 10^{5} 0 ≤ M ≤ 2 × 10^{5} 1 ≤ u, v ≤ N 1 ≤ w ≤ 10^{9} ------ Sample Input 1 ------ 5 6 1 2 2 1 3 4 2 3 1 3 4 2 2 5 7 4 5 3 ------ Sample Output 1 ------ 0 2 3 5 8 ------ Explanation 1 ------ Example case 1: The minimum magical resistance to reach each cave from cave 1 is computed using the shortest path algorithm like Dijkstra\'s algorithm. The resistances are: - Cave 1: 0 (starting point) - Cave 2: 2 (through path 1 -> 2) - Cave 3: 3 (through path 1 -> 2 -> 3) - Cave 4: 5 (through path 1 -> 2 -> 3 -> 4) - Cave 5: 8 (through path 1 -> 2 -> 3 -> 4 -> 5)","solution":"import heapq def min_magical_resistances(N, M, connections): Computes the minimum possible magical resistance to reach each cave from cave 1. Args: N : int : number of caves M : int : number of connections connections : list of tuples : connections described by (u, v, w) Returns: list : minimum resistance to each cave # Initialize adjacency list graph = {i: [] for i in range(1, N+1)} for u, v, w in connections: graph[u].append((w, v)) graph[v].append((w, u)) # Initialize distances and priority queue distances = {i: float(\'inf\') for i in range(1, N+1)} distances[1] = 0 pq = [(0, 1)] while pq: current_distance, current_node = heapq.heappop(pq) if current_distance > distances[current_node]: continue for weight, neighbor in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) result = [] for i in range(1, N+1): if distances[i] == float(\'inf\'): result.append(-1) else: result.append(distances[i]) return result"},{"question":"Given an array of integers of length n, you need to perform q operations on this array. Each operation can be of three types: 1. \\"SET i x\\": Update the element at index i to x. 2. \\"SUM L R\\": Compute the sum of all elements from index L to R, inclusive. 3. \\"MUL L R\\": Compute the product of all elements from index L to R, inclusive. The product should be computed modulo 10^9 + 7. Indexing in the array starts from 1. Input The first line of input contains two integers n and q (1 ≤ n, q ≤ 100000), separated by a single space. The second line contains n integers representing the elements of the array. The next q lines each describe an operation in the format specified above. For \\"SET i x\\", it is guaranteed that (1 ≤ i ≤ n) and (0 ≤ x ≤ 10^9). For \\"SUM L R\\" and \\"MUL L R\\", it is guaranteed that (1 ≤ L ≤ R ≤ n). Output For each \\"SUM\\" and \\"MUL\\" operation, output the corresponding answer on a new line. SAMPLE INPUT 5 6 1 2 3 4 5 SUM 1 3 MUL 2 4 SET 3 10 SUM 1 3 MUL 2 4 SUM 1 5 SAMPLE OUTPUT 6 24 13 80 22 Note: In the above sample, after initial array setup: 1. \\"SUM 1 3\\" results in 1+2+3 = 6. 2. \\"MUL 2 4\\" results in 2*3*4 = 24. 3. \\"SET 3 10\\" updates the array to [1, 2, 10, 4, 5]. 4. \\"SUM 1 3\\" results in 1+2+10 = 13. 5. \\"MUL 2 4\\" results in 2*10*4 = 80. 6. \\"SUM 1 5\\" results in 1+2+10+4+5 = 22.","solution":"MOD = 10**9 + 7 def perform_operations(n, q, array, operations): results = [] for operation in operations: op_type = operation[0] if op_type == \\"SET\\": i, x = int(operation[1]), int(operation[2]) array[i-1] = x elif op_type == \\"SUM\\": L, R = int(operation[1]), int(operation[2]) results.append(sum(array[L-1:R])) elif op_type == \\"MUL\\": L, R = int(operation[1]), int(operation[2]) product = 1 for num in array[L-1:R]: product = (product * num) % MOD results.append(product) return results"},{"question":"You are given a string boldsymbol{s} consisting of lowercase letters and an integer boldsymbol{k}. You need to perform the following transformation on the string: 1. Split the string into substrings of length boldsymbol{k}. If the total length of the string is not a multiple of boldsymbol{k}, the final substring will be shorter than boldsymbol{k}. 2. For each substring, create a new substring that contains only the first occurrence of each unique character in the order they appeared in the original substring. For example, for boldsymbol{s = \\"aabbbccccd\\"} and boldsymbol{k = 3}: 1. The substrings would be `aab`, `bbc`, `ccc`, and `d`. 2. The transformed substrings would be `ab`, `bc`, `c`, and `d`. Write a function to perform this transformation and print each transformed substring on a new line. Function Signature: ```python def transform_string(s: str, k: int) -> None: ``` Input Format - The first line contains the string boldsymbol{s}. - The second line contains the integer boldsymbol{k}. Output Format - Print the transformed substrings, each on a new line. Constraints - 1 leq text{len}(s) leq 10000 - 1 leq k leq 10000 Sample Input ``` aabbbccccd 3 ``` Sample Output ``` ab bc c d ```","solution":"def transform_string(s: str, k: int) -> None: for i in range(0, len(s), k): substring = s[i:i+k] unique_chars = [] seen = set() for char in substring: if char not in seen: seen.add(char) unique_chars.append(char) print(\\"\\".join(unique_chars))"},{"question":"Given an integer n, write a function that prints an inverted right-angled triangle pattern of asterisks. The triangle should have n rows, with the first row containing n asterisks, the second row containing n-1 asterisks, and so on, until the last row which contains 1 asterisk. Example 1: Input: n = 5 Output: ***** **** *** ** * Example 2: Input: n = 3 Output: *** ** * Your Task: You don\'t need to read input. Your task is to complete the function printInvertedTriangle() which takes the integer n as an input parameter and prints the required triangle. Expected Time Complexity: O(N), where N is the input integer. Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 100","solution":"def printInvertedTriangle(n): Prints an inverted right-angled triangle pattern of asterisks, with the first row containing n asterisks, second row n-1 asterisks, and so forth until the last row, which contains 1 asterisk. for i in range(n, 0, -1): print(\'*\' * i)"},{"question":"Problem Given a string of lowercase alphabets, rearrange the string such that no two adjacent characters are the same. If multiple valid rearrangements are possible, return any of them. If no such rearrangement is possible, return an empty string. For example, consider the string \\"aab\\". The output can be either \\"aba\\" or an empty string if a valid rearrangement is not possible. # Input - A single string `s` which consists of only lowercase alphabets (1 ≤ |s| ≤ 10^6). # Output - A string that represents a valid rearrangement where no two adjacent characters are the same, or an empty string if no such rearrangement is possible. # Function Signature ```python def rearrange_string(s: str) -> str: pass ``` # Examples ```python assert rearrange_string(\\"aab\\") in [\\"aba\\", \\"\\"] # Valid rearrangements -> \\"aba\\" or an empty string if not possible assert rearrange_string(\\"aaab\\") == \\"\\" # No valid rearrangement is possible assert rearrange_string(\\"baaba\\") in [\\"ababa\\", \\"abbaa\\", \\"baaba\\"] # Every valid rearrangement; one possible rearrangement could be \\"ababa\\" ``` # Constraints - You may assume that `s` will always consist of only lowercase alphabets. - The size of the input string (`|s|`) can be up to 10^6.","solution":"import heapq from collections import Counter def rearrange_string(s: str) -> str: if not s: return \\"\\" # Count the frequency of each character char_count = Counter(s) # Create a max heap based on character frequencies max_heap = [] for char, freq in char_count.items(): heapq.heappush(max_heap, (-freq, char)) # push negative frequency to create a max-heap # Result list to store the eventual rearranged string result = [] # Previous character and frequency prev_freq, prev_char = 0, \'\' while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) # If there was a previous character, push it back into the heap if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) # Update previous character and frequency prev_freq, prev_char = freq + 1, char # Increment frequency (since it\'s negative, add 1) # Join the list into a string rearranged = \'\'.join(result) # Check if the rearranged string\'s length matches the original string if len(rearranged) != len(s): return \\"\\" return rearranged"},{"question":"Amara is fascinated by strings and their patterns. She has a special liking for permutations of strings. Amara wants to find out how many permutations of a given string are palindromic. A palindromic string is one that reads the same forward and backward. Help Amara to count the number of distinct palindromic permutations of her string. -----Input:----- - The first line will contain T, the number of test cases. Then the test cases follow. - Each of the next T lines contains a single string S. -----Output:----- For each test case, output in a single line the number of distinct palindromic permutations of the given string. -----Constraints----- - 1 leq T leq 10 - 1 leq |S| leq 20 - S contains only lowercase English letters. -----Sample Input:----- 2 aabb abc -----Sample Output:----- 2 0","solution":"from collections import Counter from math import factorial def is_palindromic_permutation_possible(string): counter = Counter(string) odd_count = sum(1 for count in counter.values() if count % 2 != 0) return odd_count <= 1 def count_palindromic_permutations(string): if not is_palindromic_permutation_possible(string): return 0 counter = Counter(string) half_counter = {char: count // 2 for char, count in counter.items()} half_length = sum(half_counter.values()) result = factorial(half_length) for count in half_counter.values(): result //= factorial(count) return result def count_palindromic_permutations_for_cases(test_cases): results = [] for string in test_cases: results.append(count_palindromic_permutations(string)) return results"},{"question":"Given a grid of characters, determine if there exists a cycle of the same letter. A cycle is a path in the grid where the first and last letter are the same, with each letter being distinct (i.e., no letter repeats unless it is the start and endpoint). The path must consist of at least four nodes. -----Input----- The input consists of multiple test cases. The first line contains an integer t (1 leq t leq 100) — the number of test cases. The description of the test cases follows. The first line of each test case contains two integers n and m (1 leq n, m leq 1000) — the dimensions of the grid. The following n lines each contain m characters — the grid of letters, where each character is a lowercase English letter. -----Output----- For each test case, output \\"Yes\\" if there exists a cycle in the given grid; otherwise, output \\"No\\". -----Examples----- Input 3 3 4 aaaa abca aaaa 4 4 abcd efgh ijkl mnop 5 5 abcde abfde abfde abcde abcde Output Yes No Yes -----Note----- In the first test case: - There is a cycle involving the letters \'a\' and \'b\' starting and ending at positions (1,1). In the second test case: - There are no cycles present. In the third test case: - There is a cycle involving the letters \'a\' and \'b\' forming a square path.","solution":"from collections import deque def in_bounds(x, y, n, m): return 0 <= x < n and 0 <= y < m def bfs(grid, start, n, m): x0, y0 = start visited = [[False] * m for _ in range(n)] queue = deque([(x0, y0, -1, -1)]) start_char = grid[x0][y0] while queue: x, y, px, py = queue.popleft() for dx, dy in [(-1,0), (1,0), (0,-1), (0,1)]: nx, ny = x + dx, y + dy if in_bounds(nx, ny, n, m) and grid[nx][ny] == start_char: if not visited[nx][ny]: visited[nx][ny] = True queue.append((nx, ny, x, y)) elif (nx, ny) != (px, py) and (nx, ny) != start: return True return False def has_cycle(grid, n, m): for i in range(n): for j in range(m): if bfs(grid, (i, j), n, m): return True return False def solve(test_cases): results = [] for n, m, grid in test_cases: result = \\"Yes\\" if has_cycle(grid, n, m) else \\"No\\" results.append(result) return results"},{"question":"You are given an array of integers and a target integer k. Determine whether there are two distinct elements in the array whose product is exactly k. If such a pair exists, print \\"YES\\"; otherwise, print \\"NO\\". Each test case should be handled independently. ----- Input ----- The first line contains an integer t (1 le t le 100) — the number of test cases. Each test case consists of two lines: - The first line contains two integers n (2 le n le 10^5) and k (1 le k le 10^9) — the number of elements in the array and the target product. - The second line contains n integers, each between 1 and 10^9 — the elements of the array. ----- Output ----- For each test case, print \\"YES\\" if there are two distinct elements in the array whose product is exactly k. Otherwise, print \\"NO\\". ----- Example ----- Input 3 4 15 1 2 3 5 5 9 7 1 3 4 2 6 6 2 3 1 6 9 4 Output YES NO YES","solution":"def product_pair_exists(t, test_cases): results = [] for case in test_cases: n, k, arr = case seen = set() found = False for num in arr: if num != 0 and k % num == 0 and (k // num) in seen: results.append(\\"YES\\") found = True break seen.add(num) if not found: results.append(\\"NO\\") return results # Example Usage t = 3 test_cases = [ (4, 15, [1, 2, 3, 5]), (5, 9, [7, 1, 3, 4, 2]), (6, 6, [2, 3, 1, 6, 9, 4]) ] print(product_pair_exists(t, test_cases))"},{"question":"Imagine you are given a list of N numbers. Your task is to count the number of pairs (i, j) where 1 leq i < j leq N and the sum of A_i and A_j is even. -----Input:----- - First line contains integer N (number of elements in the list). - The next line contains N space separated integers A_i (the elements of the list). -----Output:----- - Print a single integer representing the number of pairs with an even sum. -----Constraints:----- - 1 leq N leq 1000 - 1 leq A_i leq 10^6 -----Sample Input:----- 5 1 2 3 4 5 -----Sample Output:----- 4","solution":"def count_even_sum_pairs(N, A): Returns the number of pairs (i, j) where 1 <= i < j <= N and the sum of A[i] and A[j] is even. odd_count = 0 even_count = 0 for number in A: if number % 2 == 0: even_count += 1 else: odd_count += 1 # Pairs of evens even_pairs = even_count * (even_count - 1) // 2 # Pairs of odds odd_pairs = odd_count * (odd_count - 1) // 2 return even_pairs + odd_pairs"},{"question":"In a wildlife sanctuary, there\'s a need to monitor the unique animal species observed on different days. Scientists record species identifications (IDs) observed on two different days. For analysis, they want to find out which species were only observed on one of the two days but not both. Write a program that consolidates these observations into a list of unique species observed on only one of the two days and prints the IDs in ascending order. -----Input:----- - First line will contain T, number of testcases. Then the testcases follow. - Each testcase contains three lines of input. - First line has two integers N, M. - Second line with N space-separated integers representing species IDs observed on the first day. - Third line with M space-separated integers representing species IDs observed on the second day. -----Output:----- For each testcase, output a single line of species IDs observed on only one of the two days, in ascending order. -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 10^5 - 1 leq M leq 10^5 - 1 leq Species ID leq 10^6 -----Sample Input:----- 1 6 5 10 20 30 40 50 60 20 30 70 80 90 -----Sample Output:----- 10 40 50 60 70 80 90","solution":"def find_unique_species(T, test_cases): results = [] for case in test_cases: N, M, day1_species, day2_species = case set1 = set(day1_species) set2 = set(day2_species) # Find species only in one of the two days unique_species = set1.symmetric_difference(set2) # Convert to sorted list unique_species_sorted = sorted(list(unique_species)) results.append(\\" \\".join(map(str, unique_species_sorted))) return results"},{"question":"# Introduction In a certain game development platform, game objects are often grouped together in a hierarchical structure where each object can have multiple child objects, but exactly one parent object. However, sometimes it becomes necessary to analyze this hierarchy to identify certain properties or to derive specific statistics. # Task Write a function `get_depth_and_ancestors` that takes a dictionary representing the hierarchy of the game objects and the ID of a specific object. The dictionary keys are the object IDs, and the values are lists of child object IDs. The function should return the depth of the given object ID in the hierarchy and a list of ancestor object IDs up to the root. Our rules: - The depth of the root object is 0. - If the object ID is not present in the hierarchy, return `None` for depth and an empty list for ancestors. # Input/Output - A dictionary where the keys are strings representing object IDs and the values are lists of strings that are the child object IDs. - A string representing the ID of the specific object to analyze. The function should return a tuple where the first value is an integer representing the depth of the given object ID in the hierarchy and the second value is a list of strings representing the ancestor object IDs from the root to the parent of the given object ID. # Example ```python hierarchy = { \\"root\\": [\\"child1\\", \\"child2\\", \\"child3\\"], \\"child1\\": [\\"subchild1\\", \\"subchild2\\"], \\"child2\\": [], \\"child3\\": [\\"subchild3\\"], \\"subchild1\\": [], \\"subchild2\\": [], \\"subchild3\\": [\\"subsubchild1\\"], \\"subsubchild1\\": [] } get_depth_and_ancestors(hierarchy, \\"subchild2\\") # Output: (2, [\\"root\\", \\"child1\\"]) get_depth_and_ancestors(hierarchy, \\"subsubchild1\\") # Output: (3, [\\"root\\", \\"child3\\", \\"subchild3\\"]) get_depth_and_ancestors(hierarchy, \\"nonexistent\\") # Output: (None, []) ``` # Remark This problem models a real-world scenario often encountered in game development environments, where hierarchical structures need to be analyzed for transform inheritance or property propagation. Make sure your solution handles edge cases, such as objects not present in the hierarchy and empty hierarchy structures.","solution":"def get_depth_and_ancestors(hierarchy, object_id): # Helper function to find the depth and ancestors of an object def find_depth_and_ancestors(current, target, depth, ancestors): if current == target: return depth, ancestors for child in hierarchy.get(current, []): found_depth, found_ancestors = find_depth_and_ancestors(child, target, depth + 1, ancestors + [current]) if found_depth is not None: return found_depth, found_ancestors return None, [] # Find the root (assuming single root, for simplicity) root = None # Determine root by finding the key that is not in any value list all_nodes = set(hierarchy.keys()) for children in hierarchy.values(): all_nodes -= set(children) if len(all_nodes) == 1: root = all_nodes.pop() else: return None, [] return find_depth_and_ancestors(root, object_id, 0, []) # Example usage hierarchy = { \\"root\\": [\\"child1\\", \\"child2\\", \\"child3\\"], \\"child1\\": [\\"subchild1\\", \\"subchild2\\"], \\"child2\\": [], \\"child3\\": [\\"subchild3\\"], \\"subchild1\\": [], \\"subchild2\\": [], \\"subchild3\\": [\\"subsubchild1\\"], \\"subsubchild1\\": [] } print(get_depth_and_ancestors(hierarchy, \\"subchild2\\")) # Output: (2, [\\"root\\", \\"child1\\"]) print(get_depth_and_ancestors(hierarchy, \\"subsubchild1\\")) # Output: (3, [\\"root\\", \\"child3\\", \\"subchild3\\"]) print(get_depth_and_ancestors(hierarchy, \\"nonexistent\\")) # Output: (None, [])"},{"question":"Write a function `pyramid(n)` that takes an integer `n` and returns a list of lists representing a pyramid with height `n`. Each sublist should contain the integers from 1 up to the current level number, centered with leading and trailing zeroes to make each sublist of equal length. E.g. ```python pyramid(3) == [[0, 0, 1, 0, 0], [0, 1, 2, 1, 0], [1, 2, 3, 2, 1]] pyramid(4) == [[0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 2, 1, 0, 0], [0, 1, 2, 3, 2, 1, 0], [1, 2, 3, 4, 3, 2, 1]] ```","solution":"def pyramid(n): Returns a pyramid of height n as a list of lists. Each sublist represents a level in the pyramid. pyramid_list = [] for i in range(1, n + 1): row = [] # append leading zeroes for _ in range(n - i): row.append(0) # append ascending numbers for j in range(1, i + 1): row.append(j) # append descending numbers for j in range(i - 1, 0, -1): row.append(j) # append trailing zeroes for _ in range(n - i): row.append(0) pyramid_list.append(row) return pyramid_list"},{"question":"In this challenge, the task is to validate the given sequence of brackets to ensure they are balanced. A sequence of brackets is considered balanced if: 1. It consists entirely of pairs of opening/closing brackets in the correct order. 2. Every closing bracket has a corresponding opening bracket of the same type. Given multiple sequences of brackets, your task is to determine whether each sequence is balanced or not. Input Format The first line of the input contains boldsymbol{boldsymbol{n}}, the number of sequences to be checked. The next boldsymbol{boldsymbol{n}} lines contain one sequence of brackets each. Constraints 1 leq n leq 10^3 Each sequence of brackets will have a length of at least 1 and at most 10^3 characters. The sequences will only consist of the following characters: `()`, `[]`, `{}`. Output Format The output should consist of boldsymbol{boldsymbol{n}} lines. In the i^{mbox{th}} line print YES if the i^{mbox{th}} sequence is balanced, else print NO. Sample Input 5 () ([{}]) {[()]} ([)] ][ Sample Output YES YES YES NO NO Explanation - The first sequence \\"()\\" is balanced, so the answer is YES. - The second sequence \\"([{}])\\" is balanced, so the answer is YES. - The third sequence \\"{[()]}\\" is balanced, so the answer is YES. - The fourth sequence \\"([)]\\" is not balanced because the order of closing brackets is incorrect, so the answer is NO. - The fifth sequence \\"][\\" is not balanced because it lacks corresponding opening brackets, so the answer is NO.","solution":"def is_balanced(sequence): stack = [] matching_bracket = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in sequence: if char in matching_bracket.values(): stack.append(char) elif char in matching_bracket.keys(): if stack == [] or stack.pop() != matching_bracket[char]: return \\"NO\\" return \\"YES\\" if stack == [] else \\"NO\\" def check_brackets(n, sequences): results = [] for sequence in sequences: results.append(is_balanced(sequence)) return results"},{"question":"Alex is building a rectangular fence for his garden. The garden is a 2D grid with empty cells. He wants to place four fence posts at four distinct points such that they form the vertices of an axis-aligned rectangle. The sides of the rectangle should be parallel to the coordinate axes, and no other cells in this garden can have fence posts. Based on monsoon predictions, Alex wants to ensure that there will be no posts on the garden\'s peripheral cells to prevent them from being washed away. Alex asks for your help to determine the possible coordinates of these fence posts. -----Input----- The first line of input contains an integer ( n ) (2 le n le 1000) — the width (number of columns) of the garden. The second line contains an integer ( m ) (2 le m le 1000) — the length (number of rows) of the garden. -----Output----- If it is possible to place the fence posts, print four lines with two integers ( (x_i, y_i) ), representing the coordinates of the four fence posts. Each integer should be between 2 and ( (n-1) ) for columns and between 2 and ( (m-1) ) for rows, respectively. If it is impossible to place the fence posts according to the given constraints, print \\"Impossible\\". -----Examples----- Input 5 4 Output 2 2 2 3 3 2 3 3 Input 2 2 Output Impossible -----Note----- In the first example, we can place the fence posts at coordinates (2, 2), (2, 3), (3, 2), and (3, 3), forming a rectangle with sides parallel to the coordinate axes and no posts on the garden\'s peripheral cells. In the second example, we cannot place any fence posts because the width and length of the garden are both 2, leaving no cells for placement that are not on the peripheral cells.","solution":"def place_fence_posts(n, m): Determines the possible coordinates of the four fence posts to form a rectangle within an `n x m` grid, avoiding peripheral cells. :param n: int, the width (number of columns) of the garden :param m: int, the length (number of rows) of the garden :return: list of tuples with coordinates of the four fence posts or \\"Impossible\\" if n < 3 or m < 3: return \\"Impossible\\" return [(2, 2), (2, 3), (3, 2), (3, 3)]"},{"question":"You are given a task of managing an online shopping cart system. The cart holds a list of items, and each item has a name, price, and quantity. You need to create a system that allows adding items to the cart, updating the quantity of an item, removing an item, and calculating the total cost of the items in the cart. Implement the ShoppingCart class: - ShoppingCart() Initializes an empty shopping cart. - void addItem(string name, double price, int quantity) Adds an item with the given name, price, and quantity to the cart. If the item already exists in the cart, its quantity should be updated. - void updateItemQuantity(string name, int quantity) Updates the quantity of the specified item in the cart. If the item does not exist in the cart, no action should be taken. - void removeItem(string name) Removes the item with the specified name from the cart. If the item does not exist in the cart, no action should be taken. - double getTotalCost() Returns the total cost of all items in the cart. The total cost is the sum of the price of each item multiplied by its quantity. Example 1: Input [\\"ShoppingCart\\", \\"addItem\\", \\"addItem\\", \\"updateItemQuantity\\", \\"addItem\\", \\"removeItem\\", \\"getTotalCost\\"] [[], [\\"apple\\", 1.0, 2], [\\"banana\\", 0.5, 5], [\\"apple\\", 5], [\\"apple\\", 1.0, 3], [\\"banana\\"], []] Output [null, null, null, null, null, null, 8.0] Explanation ShoppingCart cart = new ShoppingCart(); cart.addItem(\\"apple\\", 1.0, 2); // cart has 2 apples, total cost is 2.0 cart.addItem(\\"banana\\", 0.5, 5); // cart has 2 apples and 5 bananas, total cost is 4.5 cart.updateItemQuantity(\\"apple\\", 5); // cart has 5 apples and 5 bananas, total cost is 7.5 cart.addItem(\\"apple\\", 1.0, 3); // cart has 3 apples and 5 bananas, total cost is 5.5 cart.removeItem(\\"banana\\"); // cart has 3 apples, total cost is 3.0 cart.getTotalCost(); // returns 3.0 Constraints: - The name of each item is a non-empty string containing only lowercase English letters and spaces. - The price of each item is a positive floating-point number. - The quantity of each item is a positive integer. - At most 10^3 calls will be made to addItem, updateItemQuantity, removeItem, and getTotalCost.","solution":"class ShoppingCart: def __init__(self): self.cart = {} def addItem(self, name, price, quantity): if name in self.cart: self.cart[name][\'quantity\'] += quantity else: self.cart[name] = {\'price\': price, \'quantity\': quantity} def updateItemQuantity(self, name, quantity): if name in self.cart: self.cart[name][\'quantity\'] = quantity def removeItem(self, name): if name in self.cart: del self.cart[name] def getTotalCost(self): total_cost = 0.0 for item in self.cart.values(): total_cost += item[\'price\'] * item[\'quantity\'] return total_cost"},{"question":"A gardener is planning the layout of a rectangular garden. He wants to place several flower beds within this garden, but he needs to ensure that each flower bed is rectangular and does not overlap with any other flower beds. You have a rectangular garden of height `H` and width `W`. You need to determine if a given set of flower beds can be placed within the garden without overlapping each other and all flower beds should be inside the garden\'s boundaries. Each flower bed is described by its top-left corner (xi1, yi1) and bottom-right corner (xi2, yi2), where (xi1, yi1) are the coordinates of the top-left corner and (xi2, yi2) are the coordinates of the bottom-right corner. The top-left corner of the garden has coordinates (0, 0) and the bottom-right corner has coordinates (W, H). -----Input----- The first line contains two integers H and W (1 ≤ H, W ≤ 1000), the height and width of the garden. The second line contains an integer N (1 ≤ N ≤ 100), the number of flower beds. Each of the following N lines contains four integers xi1, yi1, xi2, yi2 (0 ≤ xi1 < xi2 ≤ W, 0 ≤ yi1 < yi2 ≤ H) describing the coordinates of a flower bed. -----Output----- Print \\"valid\\" if all flower beds can be placed within the garden without overlapping and within the garden\'s boundaries. Else, print \\"invalid\\". -----Examples----- Input 5 5 2 1 1 3 3 2 2 4 4 Output invalid Input 4 4 2 0 0 2 2 2 2 4 4 Output valid Input 8 8 3 1 1 3 3 4 4 6 6 7 7 8 8 Output valid","solution":"def validate_garden(H, W, flower_beds): Determines if the given set of flower beds can be placed within the garden without overlapping each other and within the garden\'s boundaries. Args: H (int): Height of the garden. W (int): Width of the garden. flower_beds (list of tuples): Each tuple contains (xi1, yi1, xi2, yi2) coordinates of a flower bed. Returns: str: \'valid\' if all flower beds can be placed as specified, \'invalid\' otherwise. # Create a garden matrix garden = [[0] * W for _ in range(H)] for (xi1, yi1, xi2, yi2) in flower_beds: # Check if flower bed is within the garden\'s boundary if xi1 < 0 or yi1 < 0 or xi2 > W or yi2 > H: return \'invalid\' # Mark the garden with this flower bed for i in range(yi1, yi2): for j in range(xi1, xi2): if garden[i][j] == 1: return \'invalid\' # Overlap detected garden[i][j] = 1 return \'valid\'"},{"question":"Alyssa loves mosaic art, and she likes arranging tiles in her garden in various patterns. Today she decided to lay the tiles in a rectangular grid of n rows and m columns. Each tile has a specific color, and she wants to create a border around the grid with a different color from the rest of the tiles in the inner portion of the grid. She needs help finding the total number of different ways to select the color for the border and the color for the inner portion. Note that the color for the border must be different from the color of the inner portion of the grid. There are c available colors to choose from. Given the values of n, m, and c, can you help Alyssa determine the total number of distinct ways to color the grid following her rules? Input The input consists of a single line containing three integers n (2 ≤ n ≤ 1000), m (2 ≤ m ≤ 1000), and c (2 ≤ c ≤ 1000) — the number of rows, the number of columns, and the number of available colors, respectively. Output Output a single integer — the number of distinct ways to color the grid following Alyssa\'s rules. Examples Input 3 4 5 Output 20 Input 2 2 3 Output 6 Explanation In the first example, there are 5 available colors. Alyssa needs to choose 1 color for the border and 1 different color for the inner portion. Thus, the number of ways to choose 1 color for the border and 1 color for the inner portion out of 5 available colors is 5 * (5 - 1) = 20. In the second example, there are 3 available colors. The number of distinct ways is 3 * (3 - 1) = 6.","solution":"def count_distinct_color_ways(n, m, c): Returns the number of distinct ways to color the grid such that the border has a different color from the inner portion. if c < 2: return 0 # If there are less than 2 colors, it\'s not possible to have different colors for border and inner return c * (c - 1)"},{"question":"You are working on a feature for an e-commerce website to convert product prices between currencies. The system should allow users to convert prices from one currency to another using the most up-to-date exchange rates. You are provided with two dictionaries: - `exchange_rates` which includes conversion rates for some currencies to USD. - `reverse_rates` which includes conversion rates for converting back from USD to those currencies. For instance: ```python exchange_rates = { \\"EUR\\": 1.12, \\"GBP\\": 1.30, \\"JPY\\": 0.0091, \\"INR\\": 0.013 } reverse_rates = { \\"EUR\\": 0.89, \\"GBP\\": 0.77, \\"JPY\\": 109.89, \\"INR\\": 76.60 } ``` Notice that: - To convert from EUR to USD: 1 EUR equals 1.12 USD. - To convert from USD to EUR: 1 USD equals 0.89 EUR. You are required to write a function that converts a given price from one currency to another. The function should take three arguments: the amount to be converted, the currency from which the amount is being converted, and the currency to which the amount should be converted. Implement the function `convert_currency(amount, from_currency, to_currency)` that solves this. ```python def convert_currency(amount, from_currency, to_currency): # Your code here # Example usage: print(convert_currency(100, \\"EUR\\", \\"JPY\\")) # Output: Amount in JPY ```","solution":"def convert_currency(amount, from_currency, to_currency): exchange_rates = { \\"EUR\\": 1.12, \\"GBP\\": 1.30, \\"JPY\\": 0.0091, \\"INR\\": 0.013 } reverse_rates = { \\"EUR\\": 0.89, \\"GBP\\": 0.77, \\"JPY\\": 109.89, \\"INR\\": 76.60 } # If the from_currency is USD if from_currency == \\"USD\\": amount_in_usd = amount else: amount_in_usd = amount * exchange_rates[from_currency] # If the to_currency is USD if to_currency == \\"USD\\": return amount_in_usd else: return amount_in_usd * reverse_rates[to_currency] # Example usage: print(convert_currency(100, \\"EUR\\", \\"JPY\\")) # Output: Amount in JPY"},{"question":"You are assisting an event planner who is organizing a conference. The conference consists of multiple sessions, and each session has a specific start and end time. The planner needs help determining if it\'s possible to attend all the sessions without any overlap. Write a program that checks if it\'s possible to attend all given sessions without any time conflicts. -----Input----- The first line of the input contains one integer n (1 ≤ n ≤ 100) — the number of sessions. The next n lines contain two integers each, s_i and e_i (0 ≤ s_i < e_i ≤ 10000) — the starting and ending times of the i-th session. -----Output----- Print \\"YES\\" (without quotes) if it is possible to attend all the sessions without any overlap. Otherwise, print \\"NO\\" (without quotes). -----Examples----- Input 3 1 3 2 4 3 5 Output NO Input 2 5 8 1 5 Output YES Input 4 2 3 3 4 1 2 4 5 Output YES -----Note----- In the first sample, there is an overlap between the first and second session (1-3 and 2-4), so it is not possible to attend both. In the second sample, there is no overlap between the sessions 5-8 and 1-5. In the third sample, all sessions end exactly when the next one starts, so there is no overlap and it\'s possible to attend all sessions.","solution":"def can_attend_all_sessions(n, sessions): Determines if it is possible to attend all given sessions without any overlap. Parameters: n (int): The number of sessions. sessions (List[Tuple[int, int]]): A list of tuples where each tuple contains the start and end time of a session. Returns: str: \\"YES\\" if it is possible to attend all sessions without overlap, otherwise \\"NO\\". # Sort the sessions based on their starting times sessions.sort(key=lambda x: x[0]) # Iterate through the sorted sessions to check for any overlap for i in range(1, n): if sessions[i][0] < sessions[i-1][1]: return \\"NO\\" return \\"YES\\""},{"question":"You are given an array A of n integers. You need to process q queries of two types: 1. `1 l r`: For this query, report the number of distinct elements in the subarray from index l to index r (inclusive). Indices are 1-based. 2. `2 l x`: For this query, update the element at index l to x. Input The first line of input contains two integers n (1 ≤ n ≤ 100000) — the number of elements in the array, and q (1 ≤ q ≤ 100000) — the number of queries. The second line contains n integers A_i (1 ≤ A_i ≤ 100000) — the elements of the array. The next q lines each contain a query of one of the two types described above. Output For each query of type 1, output a single integer, the number of distinct elements in the specified subarray. Examples Input 6 5 1 1 2 3 4 2 1 1 3 1 2 4 2 3 5 1 1 3 1 3 6 Output 2 3 3 4 Explanation Initially, the array is [1, 1, 2, 3, 4, 2]. For the first query `1 1 3`, the subarray is [1, 1, 2], which has 2 distinct elements: 1 and 2. For the second query `1 2 4`, the subarray is [1, 2, 3], which has 3 distinct elements: 1, 2, and 3. For the third query `2 3 5`, we update the element at index 3 to 5. The array becomes [1, 1, 5, 3, 4, 2]. For the fourth query `1 1 3`, the subarray is [1, 1, 5], which has 2 distinct elements: 1 and 5. For the fifth query `1 3 6`, the subarray is [5, 3, 4, 2], which has 4 distinct elements: 5, 3, 4, and 2.","solution":"def distinct_elements_in_subarray(n, q, A, queries): result = [] for query in queries: if query[0] == 1: l, r = query[1] - 1, query[2] subarray = A[l:r] distinct_count = len(set(subarray)) result.append(distinct_count) elif query[0] == 2: l, x = query[1] - 1, query[2] A[l] = x return result # Example usage: n = 6 q = 5 A = [1, 1, 2, 3, 4, 2] queries = [ [1, 1, 3], [1, 2, 4], [2, 3, 5], [1, 1, 3], [1, 3, 6] ] print(distinct_elements_in_subarray(n, q, A, queries))"},{"question":"You are given a list of integers `nums` and an integer `target`. Your task is to find all unique quadruplets `[a, b, c, d]` in the array which gives the sum of `target`. Note that there are no duplicate quadruplets in the solution set. Write a function `four_sum(nums, target)` that returns all such unique quadruplets in the form of a list of lists. Example: Input: nums = [1, 0, -1, 0, -2, 2], target = 0 Output: [[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]] Input: nums = [2, 2, 2, 2, 2], target = 8 Output: [[2, 2, 2, 2]] Note: - The solution set must not contain duplicate quadruplets. - The order of the quadruplets and the elements within each quadruplet does not matter.","solution":"def four_sum(nums, target): Returns all unique quadruplets in the list that sum up to the target value. nums.sort() # Sort the input list quadruplets = [] n = len(nums) for i in range(n-3): if i > 0 and nums[i] == nums[i-1]: continue for j in range(i+1, n-2): if j > i+1 and nums[j] == nums[j-1]: continue left, right = j + 1, n - 1 while left < right: total = nums[i] + nums[j] + nums[left] + nums[right] if total == target: quadruplets.append([nums[i], nums[j], nums[left], nums[right]]) while left < right and nums[left] == nums[left+1]: left += 1 while left < right and nums[right] == nums[right-1]: right -= 1 left += 1 right -= 1 elif total < target: left += 1 else: right -= 1 return quadruplets"},{"question":"Find the Shortest Path in a Weighted Grid You are given a grid with `n` rows and `m` columns. Each cell in the grid contains a non-negative integer representing the cost to enter that cell. Your task is to find the shortest path from the top-left corner of the grid (0,0) to the bottom-right corner (n-1,m-1) while minimizing the total cost. You can move up, down, left, or right at each step. If multiple paths have the same total cost, you can output any of them. Input The input consists of multiple datasets, each with the following format: > n m > cost11 cost12 ... cost1m > cost21 cost22 ... cost2m > ... > costn1 costn2 ... costnm The first line contains two integers `n` and `m` separated by a space, representing the number of rows and columns in the grid (1 ≤ n, m ≤ 100). Each of the following `n` lines contains `m` integers separated by spaces, where `costij` represents the cost to enter the cell at row `i` and column `j` (0 ≤ costij ≤ 100). The end of the input is indicated by a line containing two zeros separated by a space. Output For each dataset, output a single line containing the minimum total cost to reach the bottom-right corner of the grid from the top-left corner. Example Input 3 3 1 3 1 1 5 1 4 2 1 2 2 1 2 1 1 0 0 Output 7 3 Explanation For the first dataset, the path with the minimum total cost is `(0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2)` with a cost of `1 + 1 + 4 + 2 + 1 = 7`. For the second dataset, the path with the minimum total cost is `(0,0) -> (1,0) -> (1,1)` with a cost of `1 + 1 + 1 = 3`.","solution":"from heapq import heappop, heappush def dijkstra(grid, n, m): Uses Dijkstra\'s algorithm to find the minimum cost path in a grid from (0,0) to (n-1,m-1). directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] min_heap = [(grid[0][0], 0, 0)] # (cost, x, y) distances = {(0, 0): grid[0][0]} while min_heap: cost, x, y = heappop(min_heap) if x == n - 1 and y == m - 1: return cost for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m: new_cost = cost + grid[nx][ny] if (nx, ny) not in distances or new_cost < distances[(nx, ny)]: distances[(nx, ny)] = new_cost heappush(min_heap, (new_cost, nx, ny)) def find_shortest_paths(datasets): results = [] for grid, dimensions in datasets: n, m = dimensions results.append(dijkstra(grid, n, m)) return results def parse_input(input_data): lines = input_data.strip().split(\'n\') datasets = [] idx = 0 while idx < len(lines): n, m = map(int, lines[idx].split()) if n == 0 and m == 0: break idx += 1 grid = [] for i in range(n): grid.append(list(map(int, lines[idx].split()))) idx += 1 datasets.append((grid, (n, m))) return datasets def main(input_data): datasets = parse_input(input_data) results = find_shortest_paths(datasets) for result in results: print(result) # Test the solution with an example input EXAMPLE_INPUT = 3 3 1 3 1 1 5 1 4 2 1 2 2 1 2 1 1 0 0 main(EXAMPLE_INPUT)"},{"question":"Alice is playing a game with a string S of length N. In this game, she can replace any character in the string with any other character (including the same character) in a single move. She wants to transform the string into a palindrome with the minimum number of moves. Find the minimum number of moves Alice needs to make the string S a palindrome. ------ Input Format ------ - The first line contains a single integer T — the number of test cases. Then the test cases follow. - The first line of each test case contains an integer N — the length of the string S. - The second line of each test case contains a string S of length N consisting of lowercase English letters. ------ Output Format ------ For each test case, output on a new line the minimum number of moves Alice needs to make the string S a palindrome. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 ----- Sample Input 1 ------ 3 3 abc 4 abba 5 abcba ----- Sample Output 1 ------ 1 0 0 ----- explanation 1 ------ Test case 1: We can perform the following operation: `abc -> aba` by changing `c` to `a`. Test case 2: The string is already a palindrome, so no moves are required. Test case 3: The string is already a palindrome, so no moves are required.","solution":"def min_moves_to_palindrome(S): Returns the minimum number of moves to make a string S a palindrome. left, right = 0, len(S) - 1 moves = 0 while left < right: if S[left] != S[right]: moves += 1 left += 1 right -= 1 return moves def process_test_cases(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] S = test_cases[i][1] results.append(min_moves_to_palindrome(S)) return results"},{"question":"You are given a series of dates in the format \\"YYYY-MM-DD\\". For each date, create an object with the following structure: - The key should be the month, written as a two-digit string. - The value should be the number of occurrences of that particular month. Return the resulting object. All inputs will be arrays of dates in the specified format. The input array will not be empty.","solution":"def count_month_occurrences(dates): Given a list of dates in \\"YYYY-MM-DD\\" format, return a dictionary where the keys are the months written as two-digit strings, and the values are the number of occurrences of that particular month. month_count = {} for date in dates: month = date[5:7] # Extracting the month part from the date string if month in month_count: month_count[month] += 1 else: month_count[month] = 1 return month_count"},{"question":"Write a program that simulates an election result tallying system. Each candidate in the election is represented by a unique integer ID between 1 and 100. Votes are cast by choosing a candidate\'s ID. The input consists of a list of integers representing the votes cast in the election. Each integer corresponds to a candidate ID. The candidate IDs may not necessarily be in sequential order. Your program needs to count the number of votes received by each candidate and print the results in the format \\"CandidateID: VoteCount\\", sorted by the candidate IDs in ascending order. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of votes cast. The second line contains n integers (1 ≤ ID ≤ 100) representing the votes for each candidate. Output For each candidate who received votes, print their ID and the number of votes they received in the format \\"CandidateID: VoteCount\\". The output should be sorted by candidate IDs in ascending order. Examples Input 7 1 3 3 2 3 1 2 Output 1: 2 2: 2 3: 3 Input 5 5 5 5 1 1 Output 1: 2 5: 3","solution":"def tally_votes(votes): Tally votes for each candidate and return a sorted result by candidate IDs. Parameters: votes (list of int): List of candidate IDs representing votes. Returns: dict: Dictionary with candidate IDs as keys and vote counts as values. vote_count = {} for vote in votes: if vote in vote_count: vote_count[vote] += 1 else: vote_count[vote] = 1 sorted_vote_count = dict(sorted(vote_count.items())) return sorted_vote_count"},{"question":"You are working on a project where you need to process and analyze a string of DNA sequences. Each DNA sequence is represented by a string consisting of characters \'A\', \'C\', \'G\', and \'T\'. One important analysis is to identify the longest contiguous segment where a specific character appears consecutively in the DNA sequence. You need to write a program that takes a DNA sequence and a character as inputs and outputs the length of the longest contiguous segment of that character. Input The first line contains an integer n (1 ≤ n ≤ 10000), the length of the DNA sequence. The second line contains the DNA sequence which is of length n. The third line contains a single character from the set {\'A\', \'C\', \'G\', \'T\'} which you need to analyze. Output Print the single number which is the length of the longest contiguous segment of the specified character in the DNA sequence. Examples Input 10 ACGTACGTAA A Output 2 Input 12 GGTACCAGTCCA C Output 2 Note In the first example, the longest contiguous segment of \'A\' is \\"AA\\", which has a length of 2. In the second example, there are multiple segments of \'C\' that have the longest length of 2, such as \\"CC\\" at positions 6-7.","solution":"def longest_contiguous_segment(n, dna_sequence, character): Returns the length of the longest contiguous segment of the specified character in the DNA sequence. longest_length = 0 current_length = 0 for char in dna_sequence: if char == character: current_length += 1 if current_length > longest_length: longest_length = current_length else: current_length = 0 return longest_length"},{"question":"Task Your task is to determine if a given string can be rearranged to form a valid palindrome. A palindrome reads the same forwards and backwards. # Example For the input string `\\"civic\\"`, the output should be `true`, as it is already a palindrome. For the input string `\\"ivicc\\"`, the output should be `true`, as it can be rearranged to form the palindrome `\\"civic\\"`. For the input string `\\"hello\\"`, the output should be `false`, as it cannot be rearranged to form a palindrome. # Input/Output - `[input]` string `s` A non-empty string containing only lowercase alphabetical characters. Constraints: `1 ≤ s.length ≤ 50` - `[output]` a boolean value Return `true` if it is possible to rearrange the string to form a palindrome, and `false` otherwise.","solution":"def can_form_palindrome(s): Determines if the given string can be rearranged to form a palindrome. A string can be rearranged to form a palindrome if at most one character has an odd frequency. Args: s (str): The input string containing lowercase alphabetical characters. Returns: bool: True if the string can be rearranged to form a palindrome, False otherwise. from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1"},{"question":"You are given an array A of size N. You need to reverse the array and print the elements in the reversed order. Example 1: Input: N = 4 A[] = {1, 2, 3, 4} Output: 4 3 2 1 Example 2: Input: N = 5 A[] = {10, 20, 30, 40, 50} Output: 50 40 30 20 10 Your Task: Since this is a function problem, you just need to complete the provided function reverseArray() which takes A and N as input parameters and print the resultant array in the function itself. You have to print each number separated by a space and the printed output should not end with a space. Constraints: 1 <= N <= 10^{5} 1 <= A_{i} <= 10^{5} Expected Time Complexity: O(n) Expected Auxiliary Space: O(1)","solution":"def reverseArray(N, A): Reverses the array A and prints its elements in reversed order. Parameters: N (int): Size of the array A. A (list): A list of integers. reversed_A = A[::-1] print(\\" \\".join(map(str, reversed_A)))"},{"question":"Design an algorithm that finds the longest valid parentheses substring in a given string containing only the characters \'(\' and \')\'. A valid parentheses string is defined as follows: - It is an empty string, or - It can be written as AB (A concatenated with B), where A and B are valid parentheses strings, or - It can be written as (A), where A is a valid parentheses string. The algorithm should return the length of the longest valid parentheses substring. -----Input----- The input consists of a single string of length from 0 to 10^6 containing only the characters \'(\' and \')\'. -----Output----- Print the length of the longest valid parentheses substring. -----Examples----- Input (()) Output 4 Input )()()) Output 4 Input ) Output 0 -----Note----- The first example: The entire string \\"(())\\" is a valid parentheses substring of length 4. The second example: The longest valid parentheses substring is \\"()()\\", of length 4.","solution":"def longest_valid_parentheses(s): Finds the length of the longest valid parentheses substring. Parameters: s (str): Input string containing only \'(\' and \')\' Returns: int: Length of the longest valid parentheses substring max_length = 0 stack = [-1] for i, char in enumerate(s): if char == \'(\': stack.append(i) else: stack.pop() if not stack: stack.append(i) else: max_length = max(max_length, i - stack[-1]) return max_length"},{"question":"The Meteorological Bureau has received a request to calculate the longest period of continuous rainfall based on the meteorological data gathered over N days. The amount of rainfall each day is provided in a list, and we need to compute the longest number of consecutive days where each day had a positive amount of rainfall (greater than zero). # Input - The first line contains a single integer N (1 ≤ N ≤ 100000), representing the number of days. - The second line contains N integers separated by spaces, where the i-th integer ai (0 ≤ ai ≤ 1,000) represents the amount of rainfall on day i. # Output - Output a single integer representing the longest number of consecutive days with positive rainfall. # Examples Example 1: **Input:** ``` 10 0 10 20 0 5 0 0 15 30 25 ``` **Output:** ``` 3 ``` Explanation: The longest period of continuous rainfall is 3 days from day 8 to day 10 (rainfall amounts: 15, 30, 25). Example 2: **Input:** ``` 7 0 0 0 0 0 0 0 ``` **Output:** ``` 0 ``` Explanation: There is no period of continuous positive rainfall. Example 3: **Input:** ``` 5 5 5 5 5 5 ``` **Output:** ``` 5 ``` Explanation: The entire period consists of consecutive days with positive rainfall.","solution":"def longest_continuous_rainfall(days, rainfall): max_count = 0 current_count = 0 for amount in rainfall: if amount > 0: current_count += 1 if current_count > max_count: max_count = current_count else: current_count = 0 return max_count"},{"question":"Kara is working on a document that consists of lowercase English letters and punctuation marks. She wants to adjust the text such that each word in the document starts with an uppercase letter, while the rest of the letters in each word remain lowercase. Punctuation marks should be left untouched and can be used as word separators. Given a string that consists of lowercase English letters and punctuation marks, your task is to transform it so that each word starts with an uppercase letter while keeping the rest of the letters in lowercase. Input The input consists of a single string s (1 ≤ |s| ≤ 10^5) that represents the document. The string contains only lowercase English letters and punctuation marks (!, ?, ., ,, ;, :) Output Output the modified string where each word starts with an uppercase letter, separating by punctuation marks. Examples Input hello,world!this.is?a:test; Output Hello,World!This.Is?A:Test; Input python,coding;is.fun Output Python,Coding;Is.Fun Note In the first example, the words \\"hello\\", \\"world\\", \\"this\\", \\"is\\", \\"a\\", \\"test\\" are transformed into \\"Hello\\", \\"World\\", \\"This\\", \\"Is\\", \\"A\\", \\"Test\\", respectively, keeping punctuation in place. In the second example, the words \\"python\\", \\"coding\\", \\"is\\", \\"fun\\" are transformed into \\"Python\\", \\"Coding\\", \\"Is\\", \\"Fun\\", respectively.","solution":"def capitalize_words(s): Capitalizes the first letter of each word in the document. Words are separated by punctuation marks. result = [] word = [] for char in s: if char.isalpha(): word.append(char) else: if word: result.append(\'\'.join(word).capitalize()) word = [] result.append(char) if word: # Add last word if any result.append(\'\'.join(word).capitalize()) return \'\'.join(result)"},{"question":"You are a botanist working on genetically modified plants. The plants grow in a linear arrangement, and each plant has a certain height. You want to arrange fertilizer placements so that the difference in height between any two consecutive plants is not more than 1 unit. The height of each plant must be a positive integer, and the first plant must start with a height of 1. Calculate the number of ways to arrange N plants in a row following the given height constraint. Input The first line contains an integer T (T ≤ 1000), denoting the number of test cases. Each of the following T lines contains a single integer N (1 ≤ N ≤ 1000), indicating the number of plants in a row. Output For each test case, output a single integer which is the number of ways to arrange N plants in a row, such that the height constraint is met. As the answer can be large, print it modulo 1000000007. SAMPLE INPUT 2 1 3 SAMPLE OUTPUT 1 3","solution":"MOD = 1000000007 def num_ways_to_arrange_plants(T, test_cases): max_n = max(test_cases) # DP array to store the number of ways to arrange up to the maximum N dp = [0] * (max_n + 1) dp[1] = 1 if max_n > 1: dp[2] = 2 for i in range(3, max_n + 1): dp[i] = (dp[i - 1] + dp[i - 2]) % MOD result = [] for n in test_cases: result.append(dp[n]) return result # Example usage: # T = 2 # test_cases = [1, 3] # print(num_ways_to_arrange_plants(T, test_cases)) # Output: [1, 3]"},{"question":"You are tasked with designing a new warehouse management system for a company. The company requires you to implement a feature that simulates the movement of products within the warehouse, which is represented by a grid of size M x N. The warehouse has robots that can move products between locations. Each move entails picking up a product from a starting cell and placing it in a destination cell. The robot can move up, down, left, or right. The grid contains obstacles that the robot cannot move through. Write a function to determine the minimum number of moves required for a robot to move a product from a starting cell to a destination cell within the grid. If it\'s not possible to move the product, return -1. # Function Signature ```python def min_moves(grid: List[List[int]], start: Tuple[int, int], destination: Tuple[int, int]) -> int: pass ``` # Input - `grid`: A 2D list of integers where `0` represents an open cell and `1` represents an obstacle. - `start`: A tuple `(sx, sy)` representing the starting cell coordinates. - `destination`: A tuple `(dx, dy)` representing the destination cell coordinates. # Output - Return an integer representing the minimum number of moves required to move the product to the destination cell, or `-1` if it\'s not possible. # Constraints - `1 <= M, N <= 1000` - The grid\'s cells are indexed from 0 to M-1 (rows) and 0 to N-1 (columns). - The starting and destination cells are guaranteed to be within the grid and are open cells. # Example ```python grid = [ [0, 0, 0, 1], [0, 1, 0, 0], [0, 0, 0, 0], [1, 0, 1, 0] ] start = (0, 0) destination = (2, 2) print(min_moves(grid, start, destination)) # Output: 4 grid = [ [0, 1, 0], [1, 0, 1], [0, 0, 0] ] start = (2, 0) destination = (0, 2) print(min_moves(grid, start, destination)) # Output: -1 ```","solution":"from typing import List, Tuple from collections import deque def min_moves(grid: List[List[int]], start: Tuple[int, int], destination: Tuple[int, int]) -> int: M, N = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def in_bounds(x, y): return 0 <= x < M and 0 <= y < N def bfs(): queue = deque([(start[0], start[1], 0)]) # (row, col, distance) visited = set() visited.add((start[0], start[1])) while queue: x, y, dist = queue.popleft() if (x, y) == destination: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if in_bounds(nx, ny) and (nx, ny) not in visited and grid[nx][ny] == 0: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 return bfs()"},{"question":"You are given a list of integers, where some numbers appear twice and others appear once. Every integer appears exactly twice, except for one integer which appears only once. Your task is to find the integer that appears only once. -----Input----- - The input consists of a single line containing space-separated integers, representing the list of integers. -----Output----- - Output the integer that appears only once. -----Constraints----- - The list will contain between 1 and 10^5 integers. - Each integer in the list will be in the range from -10^9 to 10^9. -----Example Input----- 4 3 2 4 1 3 2 -----Example Output----- 1 -----Example Input----- 7 9 5 7 5 3 9 6 3 -----Example Output----- 6","solution":"def find_single_number(arr): Finds the integer that appears only once in the list where every other integer appears exactly twice. Args: arr (list of int): The list of integers. Returns: int: The integer that appears only once. # Using XOR to find the single occurrence number result = 0 for number in arr: result ^= number return result"},{"question":"You are tasked with constructing a valid HTML document based on partially provided components. Each component is guaranteed to be well-formed and invalid combinations need not be handled. There are three components given: 1. A string representing the head section. 2. A string for the body start tag and attributes. 3. A string for the body content. Your objective is to combine these components correctly to form a complete HTML document. Ensure that the structure follows the standard HTML format with the required tags in the correct positions. The output should be a well-formed HTML document even if some components are empty strings. Input The input consists of three lines: 1. A string `head`, representing the head section of the HTML document. 2. A string `body_start`, representing the opening body tag which may contain attributes. 3. A string `body_content`, representing the content to be placed inside the body of the document. All strings contain valid HTML snippets and have a maximum length of 1000 characters. Output Print the resulting HTML document as a single string. Examples Input <head><title>Test</title></head> <body class=\\"container\\"> <h1>Hello, World!</h1></body> Output <!DOCTYPE html> <html> <head><title>Test</title></head> <body class=\\"container\\"><h1>Hello, World!</h1></body> </html> Input <head></head> <body> <div>Sample content</div></body> Output <!DOCTYPE html> <html> <head></head> <body><div>Sample content</div></body> </html> Note Ensure the HTML document begins with a `<!DOCTYPE html>` declaration and that the `html` tags are properly encapsulated within the document regardless of the input content. The importance of the correct format lies in ensuring well-formed HTML for browsers or parsers that will process this document.","solution":"def construct_html_document(head, body_start, body_content): Constructs a valid HTML document from the given head section, body tag with attributes, and body content. doc_type = \\"<!DOCTYPE html>\\" html_start = \\"<html>\\" html_end = \\"</html>\\" # Combine the components to form the HTML document html_doc = ( f\\"{doc_type}n\\" f\\"{html_start}n\\" f\\"{head}n\\" f\\"{body_start}{body_content}</body>n\\" f\\"{html_end}\\" ) return html_doc"},{"question":"You\'re working on a string manipulation library and need to implement a function to simplify text by removing all instances of multiple consecutive spaces. Your task is to write a function that takes a string as an input and returns a new string with all sequences of multiple spaces replaced by a single space. The input string may contain leading or trailing spaces, which should also be removed in the returned result. # Input A single string `s` which can contain letters, digits, punctuation, spaces, and special characters. # Output Return a new string with all sequences of multiple spaces replaced by a single space and no leading or trailing spaces. # Examples ```python simplify_text(\\"This is a test.\\") -> \\"This is a test.\\" simplify_text(\\" Hello World! \\") -> \\"Hello World!\\" simplify_text(\\"Python is great.\\") -> \\"Python is great.\\" simplify_text(\\"No leading or trailing spaces.\\") -> \\"No leading or trailing spaces.\\" ``` # Note - Do not use any regular expression functions or libraries. - Ensure the function properly handles input strings with varying amounts of whitespace.","solution":"def simplify_text(s): Returns a new string with all sequences of multiple spaces replaced by a single space and no leading or trailing spaces. cleaned_sentence = [] is_prev_char_space = False for char in s: if char.isspace(): if not is_prev_char_space: cleaned_sentence.append(\' \') is_prev_char_space = True else: cleaned_sentence.append(char) is_prev_char_space = False return \'\'.join(cleaned_sentence).strip()"},{"question":"Lord Stannis Baratheon is under siege and needs to defend his castle. His castle has several walls with varying heights, providing different levels of protection. However, there is a massive cannon that the enemy possesses which can destroy walls up to a certain height with one shot. Stannis wants to reinforce his defenses by raising the heights of some of his walls to ensure that they cannot be destroyed by a single cannon shot. Given the current heights of the walls and the maximum height the cannon can destroy, find out the minimum number of walls that need to be increased in height to be safe from the cannon. Input: The first line contains an integer N denoting the number of walls. The second line contains N integers denoting the height of each wall. The third line contains an integer H, which denotes the maximum height that the cannon can destroy. Constraints: 1 ≤ N ≤ 1000 1 ≤ height of a wall ≤ 100 ; original height of each wall 1 ≤ H ≤ 100 Output: Output the minimum number of walls that need to be reinforced. Examples: Input: 5 1 2 3 4 5 3 Output: 2 Input: 4 6 7 8 9 5 Output: 0 Explanation: In the first example, the cannon can destroy walls up to height 3, so walls with heights 1, 2, and 3 need to be reinforced. Therefore, the minimum number of walls that need to be reinforced is 2. In the second example, all walls have a height greater than 5, so no walls need to be reinforced. Therefore, the output is 0.","solution":"def minimum_walls_to_reinforce(N, heights, H): Returns the minimum number of walls that need to be increased in height to be safe from the cannon. Parameters: N (int): The number of walls. heights (list): A list of integers representing the height of each wall. H (int): The maximum height that the cannon can destroy. Returns: int: The number of walls that need to be reinforced. count = 0 for height in heights: if height <= H: count += 1 return count"},{"question":"You are given multiple test cases, each containing a sequence of integers where each integer represents the height of a building. You are to answer queries regarding the maximum height difference between any two buildings in a given range of heights. For each query, given a range [L, R] (inclusive), find the maximum difference in heights between any two buildings within that range. Input The first line contains a single integer t (1 ≤ t ≤ 10^5) — the number of test cases. The first line of each test case contains a single integer n (2 ≤ n ≤ 2⋅ 10^5) — the number of buildings. Following this is a line containing n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10^9) representing the heights of the buildings. The next line contains a single integer q (1 ≤ q ≤ 10^5) — the number of queries for this test case. Each of the next q lines contains two integers L and R (1 ≤ L ≤ R ≤ n) — the start and end indices (inclusive) for the query. Output For each query, output a single integer — the maximum difference in heights between any two buildings within the range [L, R] of that particular query. Examples Input 2 5 1 3 5 7 9 2 1 3 2 5 4 4 8 2 10 1 1 4 Output 4 6 8 Note In the first test case: - For the first query, the buildings considered are 1, 3, 5. The maximum height difference is 5 - 1 = 4. - For the second query, the buildings considered are 3, 5, 7, 9. The maximum height difference is 9 - 3 = 6. In the second test case: - For the only query, the buildings considered are 4, 8, 2, 10. The maximum height difference is 10 - 2 = 8.","solution":"def max_height_difference(test_cases): For each range query in each test case, finds the maximum height difference between any two buildings. :param test_cases: List of test cases, each containing buildings heights and queries. :returns: List of maximum height differences for the queries. results = [] for case in test_cases: heights = case[\'heights\'] queries = case[\'queries\'] for L, R in queries: max_height = max(heights[L-1:R]) min_height = min(heights[L-1:R]) results.append(max_height - min_height) return results # Helper function to parse the input def parse_input(input_string): input_lines = input_string.strip().split(\'n\') index = 0 t = int(input_lines[index]) index += 1 test_cases = [] for _ in range(t): n = int(input_lines[index]) index += 1 heights = list(map(int, input_lines[index].split())) index += 1 q = int(input_lines[index]) index += 1 queries = [] for __ in range(q): L, R = map(int, input_lines[index].split()) queries.append((L, R)) index += 1 test_cases.append({ \'heights\': heights, \'queries\': queries }) return test_cases"},{"question":"Given an array B[] of n integers where n is even. The task is to find sum of the middle two elements of the array. Example 1: Input: n = 6 B[] = {1, 2, 3, 4, 5, 6} Output: 7 Explanation: The middle two elements are 3 and 4, and their sum is 7. Example 2: Input: n = 4 B[] = {3, 1, 7, 5} Output: 8 Explanation: The middle two elements are 1 and 7, and their sum is 8. Your Task: You don\'t need to read input or print anything. Your task is to complete the function sumMiddle() which takes the array B[] and its size n as inputs and returns the sum of the middle two elements. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 2 <= n <= 10^{3} -n <= B[i] <= n n is even. Array may contain duplicate elements.","solution":"def sumMiddle(B, n): Finds and returns the sum of the middle two elements of the array B of size n. Parameters: B (list): The input array. n (int): The size of the array. Returns: int: The sum of the middle two elements. # Indices of the middle two elements mid1 = n // 2 - 1 mid2 = n // 2 return B[mid1] + B[mid2]"},{"question":"Ethan loves observing the night sky and cataloging stars. He has a list of stars represented by their x and y coordinates in a 2D plane. He believes that some stars may form interesting patterns like triangles or other shapes. One specific pattern he is curious about is a right-angled triangle. Given a set of stars, he wants to determine if there exist three stars that can form a right-angled triangle. A right-angled triangle is one where one of the angles is exactly 90 degrees. Your task is to write a program that determines whether any three stars can form such a triangle. -----Input----- The first line contains an integer n (3 ≤ n ≤ 500), the number of stars. Each of the next n lines contains two integers x_{i}, y_{i} ( - 1000 ≤ x_{i}, y_{i} ≤ 1000) — the Cartesian coordinates of the ith star. No two stars have the same coordinates. -----Output----- Print \\"YES\\" (without quotes) if there exist three stars that form a right-angled triangle. Otherwise, print \\"NO\\". -----Examples----- Input 5 1 1 7 1 1 5 6 10 7 5 Output YES Input 4 0 0 1 1 2 2 3 3 Output NO -----Explanation----- In the first example, the stars at coordinates (1, 1), (7, 1), and (1, 5) can form a right-angled triangle with the right angle at (1, 1). In the second example, no combination of three stars forms a right-angled triangle.","solution":"def is_right_angle(x1, y1, x2, y2, x3, y3): Returns True if points (x1, y1), (x2, y2), and (x3, y3) form a right-angle triangle. # Calculate the square of the lengths of sides a2 = (x2 - x1) ** 2 + (y2 - y1) ** 2 b2 = (x3 - x1) ** 2 + (y3 - y1) ** 2 c2 = (x3 - x2) ** 2 + (y3 - y2) ** 2 # Check the Pythagorean theorem return a2 + b2 == c2 or a2 + c2 == b2 or b2 + c2 == a2 def detect_right_angle_triangle(stars): Determine if any three stars form a right-angle triangle. Parameters: stars (list of tuples): List of tuples where each tuple contains the (x, y) coordinates of a star. Returns: str: \'YES\' if there exist three stars forming a right-angle triangle, otherwise \'NO\' n = len(stars) for i in range(n): for j in range(i + 1, n): for k in range(j + 1, n): if is_right_angle(stars[i][0], stars[i][1], stars[j][0], stars[j][1], stars[k][0], stars[k][1]): return \\"YES\\" return \\"NO\\""},{"question":"Write a function that calculates the minimum number of coins needed to make a given amount of money using a specific set of coin denominations. If it is not possible to make the exact amount with the given denominations, return `-1`. # Examples ```python min_coins(11, [1, 5, 6, 8]) ==> 2 # 11 = 5 + 6 min_coins(7, [2, 4]) ==> -1 # 7 cannot be made with 2 and 4 ``` # Constraints - The amount of money will be a non-negative integer. - The list of coin denominations will contain at least one coin.","solution":"def min_coins(amount, coins): Calculates the minimum number of coins needed to make a given amount of money using a specific set of coin denominations. If it is not possible to make the exact amount with the given denominations, return -1. :param amount: int - amount of money to make :param coins: List[int] - list of coin denominations :return: int - minimum number of coins needed or -1 if not possible # Initialize dp array where dp[i] will be storing the minimum number # of coins required for i value. dp = [float(\'inf\')] * (amount + 1) # Base case: It takes 0 coins to make amount 0. dp[0] = 0 # Iterate over each amount 1 through amount. for i in range(1, amount + 1): for coin in coins: if i - coin >= 0: dp[i] = min(dp[i], dp[i - coin] + 1) # If dp[amount] is still infinity, it means it\'s not possible to make that amount. return -1 if dp[amount] == float(\'inf\') else dp[amount]"},{"question":"You are managing a team of developers, and the performance of each developer is recorded as a list of integers. You want to identify the longest contiguous sublist where the performance does not decrease at any point. Your task is to design a function `longestNonDecreasingSublist` which takes an array `performance` and returns the length of the longest contiguous non-decreasing sublist. Example 1: Input: performance = [5, 3, 4, 8, 6, 7, 7, 8] Output: 4 Explanation: The longest contiguous non-decreasing sublist is [6, 7, 7, 8] with length 4. Example 2: Input: performance = [1, 2, 2, 3, 4] Output: 5 Explanation: The entire list is non-decreasing, so its length is 5. Example 3: Input: performance = [10, 8, 7, 5, 4] Output: 1 Explanation: Each number by itself is a non-decreasing sublist so the length is 1. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `longestNonDecreasingSublist(performance)` which takes a list of integers as parameters and returns an integer denoting the length of the longest contiguous non-decreasing sublist. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: - 1 ≤ len(performance) ≤ 10^5 - 1 ≤ performance[i] ≤ 10^6","solution":"def longestNonDecreasingSublist(performance): Returns the length of the longest contiguous non-decreasing sublist from the input list. if not performance: return 0 max_length = 1 current_length = 1 for i in range(1, len(performance)): if performance[i] >= performance[i-1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"In a given game, players are assigned levels based on their points. The level assignment follows this rule: - 0-99 points: Level 0 - 100-199 points: Level 1 - 200-299 points: Level 2 - and so on... Given a player\'s current points P, determine and print the level the player is in. -----Constraints----- - P is an integer between 0 and 10^6 inclusive. -----Input----- Input is given from Standard Input in the following format: P -----Output----- Print an integer representing the player\'s level based on their points. -----Sample Input----- 250 -----Sample Output----- 2 In the example, 250 points correspond to Level 2.","solution":"def determine_level(points): Given a player\'s points, determine and return their level. Points are assigned levels according to the following rule: - 0-99 points: Level 0 - 100-199 points: Level 1 - 200-299 points: Level 2 - and so on... Parameters: points (int): The player\'s points, an integer between 0 and 10^6 inclusive. Returns: int: The player\'s level. return points // 100"},{"question":"Grace loves rectangles. She always plays a game where her goal is to determine the maximum sum of elements in any sub-rectangle of a given rectangle of integers. Now she wants your help to solve this game. You are given a matrix `M` of size `N x M` containing integer values. Your task is to find the maximum possible sum of elements in any sub-rectangle of `M`. Input - The first line contains two integers `N` and `M` representing the number of rows and columns in the matrix, respectively. - The next `N` lines each contain `M` integers describing the matrix `M`. Output - Output a single integer which is the maximum sum of elements in any sub-rectangle of matrix `M`. Constraints: 1 ≤ N, M ≤ 100 -1000 ≤ Matrix element ≤ 1000 SAMPLE INPUT 3 3 1 2 -1 -3 4 2 1 -5 3 SAMPLE OUTPUT 7","solution":"def max_sub_rectangle_sum(matrix): Returns the maximum sum of elements in any sub-rectangle of the matrix. if not matrix or not matrix[0]: return 0 N = len(matrix) M = len(matrix[0]) max_sum = float(\'-inf\') # Helper function to find the max subarray sum using Kadane\'s algorithm def kadane(arr): max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far # Iterate over all possible pairs of columns for left in range(M): temp = [0] * N for right in range(left, M): for i in range(N): temp[i] += matrix[i][right] max_sum = max(max_sum, kadane(temp)) return max_sum def read_input(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) matrix = [] idx = 2 for _ in range(n): row = list(map(int, data[idx:idx + m])) matrix.append(row) idx += m return matrix if __name__ == \\"__main__\\": matrix = read_input() print(max_sub_rectangle_sum(matrix)) # For testing purpose RETURN ONLY max_sub_rectangle_sum AND NOT read_input OR main SCOPE. # Hence user need to modify it while testing."},{"question":"Many secret codes are composed of a string of digits. A given code is considered valid if it meets the following criteria: 1. It contains exactly two \'6\'s. 2. There is at least one digit between the two \'6\'s. 3. It does not contain any \'7\'s. Your task is to write a function `isValidCode` that determines if the given code is valid based on the criteria above. **Function Signature:** ```python def isValidCode(code: str) -> bool: ``` **Input:** - `code` (A string of digits (0-9)) **Output:** - Return `True` if the code is valid, otherwise return `False` **Examples:** Example 1: ```python Input: code = \\"1234569856\\" Output: True Explanation: The code contains two \'6\'s with digits between them and no \'7\'s. Example 2: ```python Input: code = \\"1661\\" Output: False Explanation: The code contains only one \'6\'. Example 3: ```python Input: code = \\"2617616\\" Output: False Explanation: The code contains \'7\'. Your Task: You need to implement the function `isValidCode`. Your implementation should check the given string `code` and determine if it meets the specified criteria. **Constraints:** - 1 ≤ len(code) ≤ 10^5 - The code only contains digits (0-9).","solution":"def isValidCode(code: str) -> bool: Determine if the given code is valid based on the criteria: 1. It contains exactly two \'6\'s. 2. There is at least one digit between the two \'6\'s. 3. It does not contain any \'7\'s. Parameters: - code: A string of digits (0-9) Returns: - True if the code is valid, otherwise False if \'7\' in code: return False # Find positions of \'6\' positions_of_6 = [i for i, ch in enumerate(code) if ch == \'6\'] # Check there are exactly two \'6\'s and at least one digit between them if len(positions_of_6) == 2 and positions_of_6[1] - positions_of_6[0] > 1: return True return False"},{"question":"Given a string S consisting of lowercase alphabets, determine if it is possible to rearrange the characters of the string such that every adjacent pair of characters are distinct. If it is possible, return a possible rearrangement of the string. If it is not possible, return \\"Not possible\\". Input Format The input contains a single string S. Output Format Output a string which is a rearrangement of the input such that no two adjacent characters are the same, or \\"Not possible\\" if no such rearrangement exists. Constraints 1 ≤ |S| ≤ 1000 Example Input 1 aaabb Example Output 1 ababa Example Input 2 aaab Example Output 2 Not possible Explanation In the first example, one possible rearrangement is \\"ababa\\" where no two adjacent characters are the same. In the second example, there is no way to rearrange \\"aaab\\" such that no two adjacent characters are the same; hence, the output is \\"Not possible\\".","solution":"import heapq from collections import Counter def rearrange_string(s): # Count frequency of each character char_count = Counter(s) # If any character occurs more than (n+1)//2 times, it\'s not possible to rearrange max_freq = max(char_count.values()) if max_freq > (len(s) + 1) // 2: return \\"Not possible\\" # Max heap to store characters by frequency max_heap = [(-freq, char) for char, freq in char_count.items()] heapq.heapify(max_heap) prev_char = None prev_freq = 0 result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) # If previously used character\'s frequency is still more than 0, push it back to heap if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) # Update previous character and frequency prev_char = char prev_freq = freq + 1 # Decrease frequency since we used one occurrence return \'\'.join(result)"},{"question":"Alex is planning to participate in a coding challenge that involves arrays and logical decisions. For the given coding challenge, he needs to determine whether a specified integer can be the majority element in an array or not. A majority element is one that appears more than n/2 times in an array of size n. Implement a function that checks if a given integer can be a majority element in the array and prints \\"Yes\\" if it is possible, otherwise prints \\"No\\". ------ Input Format ------ - The first line of input contains an integer T, denoting the number of test cases. - The first line of each test case contains two integers, n and x, where n is the size of the array and x is the integer to check for majority. - The next line contains n space-separated integers, representing the elements of the array. ------ Output Format ------ For each test case, output on a new line \\"Yes\\" if x can be the majority element in the array, otherwise output \\"No\\". ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ n ≤ 10^5 1 ≤ text{array element}, x ≤ 10^5 ----- Sample Input 1 ------ 2 5 3 1 2 3 3 3 4 2 1 2 2 3 ----- Sample Output 1 ------ Yes No ----- Explanation 1 ------ Test case 1: The integer 3 appears 3 times in the array [1, 2, 3, 3, 3]. Since 3 > 5/2, 3 can be the majority element. Test case 2: The integer 2 appears 2 times in the array [1, 2, 2, 3]. Since 2 is not greater than 4/2, 2 cannot be the majority element.","solution":"def can_be_majority(T, test_cases): results = [] for i in range(T): n, x = test_cases[i][0], test_cases[i][1] arr = test_cases[i][2] x_count = arr.count(x) if x_count > n / 2: results.append(\\"Yes\\") else: results.append(\\"No\\") return results def get_test_cases(input_lines): lines = input_lines.strip().split(\'n\') T = int(lines[0]) test_cases = [] idx = 1 for _ in range(T): n, x = map(int, lines[idx].split()) arr = list(map(int, lines[idx + 1].split())) test_cases.append((n, x, arr)) idx += 2 return T, test_cases"},{"question":"A librarian has a list of books with their respective number of pages. The librarian wants to implement a sorting system for books based on the number of pages. For any given list of books, your task is to arrange the books\' page counts in a non-decreasing order. However, there is an additional constraint: if two books have the same number of pages, their relative order should remain the same as in the initial list. Write a function to sort the page counts accordingly. ------ Input ------ The first line of the input contains an integer T denoting the number of test cases. The description of each test case follows. Each test case contains two lines. The first line contains an integer N denoting the number of books. The second line contains N integers representing the number of pages in each book. ------ Output ------ For each test case output a new line with the sorted page counts. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 1 ≤ pages ≤ 1000000 ------ Sample Input 1 ------ 3 5 100 300 200 100 400 4 500 100 100 200 6 50 40 50 30 20 50 ------ Sample Output 1 ------ 100 100 200 300 400 100 100 200 500 20 30 40 50 50 50 ------ Explanation 1 ------ In the first testcase, the initial page counts are [100, 300, 200, 100, 400]. After sorting in non-decreasing order while maintaining the order of equal elements, the result is [100, 100, 200, 300, 400]. In the second testcase, the initial page counts are [500, 100, 100, 200]. After sorting, the result is [100, 100, 200, 500]. In the third testcase, the initial page counts are [50, 40, 50, 30, 20, 50]. After sorting, the result is [20, 30, 40, 50, 50, 50].","solution":"def sort_books_by_pages(test_cases): Given a list of test cases, each containing a number of books and their respective page counts, this function sorts the page counts in non-decreasing order while maintaining the relative order of equal elements. results = [] for pages in test_cases: sorted_pages = sorted(pages) results.append(sorted_pages) return results def parse_input(input_str): Parses the input string and returns a list of test cases. lines = input_str.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) pages = list(map(int, lines[index + 1].split())) test_cases.append(pages) index += 2 return test_cases def format_output(results): Formats the output for the given sorted pages list to match the required output format. return \'n\'.join(\' \'.join(map(str, result)) for result in results)"},{"question":"A company is planning to build a network of servers to handle incoming client requests efficiently. The company has exactly N servers, each identified by a unique integer from 1 to N. The servers are connected by bidirectional communication links, forming an undirected graph. Each server can communicate with another server if there is a direct link between them. The IT department needs to ensure that if any single server goes down, the communication network between the remaining servers is still functional (i.e., the network remains connected). You are tasked with determining the minimum number of additional communication links required to achieve this goal. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two space-separated integers N and M, the number of servers and the number of existing communication links, respectively. - Each of the following M lines contains two space-separated integers u and v denoting a bidirectional communication link between servers u and v. -----Output----- For each test case, print a single line containing one integer — the minimum number of additional communication links required. -----Constraints----- - 1 le T le 50 - 2 le N le 1000 - 0 le M le min(1000, frac{N(N-1)}{2}) -----Example Input----- 3 4 3 1 2 2 3 3 4 4 2 1 2 2 3 4 0 -----Example Output----- 0 1 3 -----Explanation----- Example case 1: The network is already connected and removing any one server does not disconnect the remaining servers. No additional links are needed. Example case 2: With servers 1, 2, and 3 forming a chain, the removal of server 2 disconnects the network. By adding a link between server 1 and 3, the network remains connected even if any one server goes down. Example case 3: No links exist initially, any additional communication link will help to connect the servers. In this case, 3 additional links are required to form a fully connected network, ensuring connectivity even if one server goes down.","solution":"def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def min_additional_links(N, connections): parent = [i for i in range(N)] rank = [0] * N for u, v in connections: union(parent, rank, u - 1, v - 1) roots = len({find(parent, i) for i in range(N)}) # Add at least (roots - 1) links return max(roots - 1, 0) def process_test_cases(test_cases): results = [] for N, M, edges in test_cases: results.append(min_additional_links(N, edges)) return results"},{"question":"John is given an array of integers. His task is to remove exactly one element from each array in such a way that the remaining elements form a strictly increasing sequence. A sequence is called strictly increasing if each element in the sequence is greater than every preceding element. Help John to find the minimum number of removals required to achieve a strictly increasing sequence, or determine that it is not possible. -----Input----- The first line contains a single integer t (1 le t le 100) — the number of test cases. Each test case contains two lines: - The first line contains a single integer n (2 le n le 1000) — the length of the array. - The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the array. -----Output----- For each test case, print a single integer — the minimum number of elements to remove to make the remaining elements form a strictly increasing sequence. If it is not possible to get a strictly increasing sequence, print -1 instead. -----Examples----- Input 2 5 1 2 4 3 5 4 4 3 2 1 Output 0 -1 -----Note----- In the first test case, John doesn\'t need to remove any element since the sequence is already able to form a strictly increasing sequence by removing the element 3. In the second test case, it is not possible to form a strictly increasing sequence by removing only one element.","solution":"def min_removals_for_increasing_sequence(t, test_cases): Finds the minimum number of removals to form a strictly increasing sequence :param t: int, number of test cases :param test_cases: list of tuples, where each tuple contains an int (length of array) and a list of ints (the array itself) :return: list of ints, results for each test case results = [] for n, arr in test_cases: found = False for i in range(n): potential_sequence = arr[:i] + arr[i+1:] if all(potential_sequence[j] < potential_sequence[j+1] for j in range(len(potential_sequence) - 1)): results.append(0) found = True break if not found: results.append(-1) return results"},{"question":"You are given a list of non-negative integers representing the amount of money of each house, arranged in a round circle. Determine the maximum amount of money the thief can rob tonight without alerting the police. It is impossible to rob two adjacent houses due to the alarm system. Note: This is the same situation as the simple \\"House Robber\\" problem, but houses are arranged in a circle, meaning the first house is the neighbor of the last one. Example 1: Input: [2,3,2] Output: 3 Explanation: The thief should rob house 2 (money = 3) and not house 1 or house 3. Example 2: Input: [1,2,3,1] Output: 4 Explanation: The thief should rob house 1 (money = 1) and house 3 (money = 3) for a total of 1 + 3 = 4.","solution":"def rob(nums): Returns the maximum amount of money the thief can rob without alerting the police. Since houses are arranged in a circle, the thief cannot rob the first and last house both. def rob_linear(nums): prev_max = 0 curr_max = 0 for num in nums: temp = curr_max curr_max = max(prev_max + num, curr_max) prev_max = temp return curr_max n = len(nums) if n == 1: return nums[0] return max(rob_linear(nums[:-1]), rob_linear(nums[1:]))"},{"question":"You are given an integer array `nums` and an integer `k`. Your task is to determine whether there is a continuous subarray of size at least 2 that sums up to a multiple of `k`, that is, sums up to `n * k` where `n` is an integer. Return true if such a subarray exists, and false otherwise. Example 1: Input: nums = [23, 2, 4, 6, 7], k = 6 Output: true Explanation: [2, 4] is a continuous subarray of size 2 that sums up to 6. Example 2: Input: nums = [23, 2, 6, 4, 7], k = 6 Output: true Explanation: [23, 2, 6, 4, 7] is an entire continuous subarray that sums up to 2*6 = 12. Example 3: Input: nums = [23, 2, 6, 4, 7], k = 13 Output: false Note: 1. The length of the array won\'t exceed 10,000. 2. You may assume the sum of all the numbers is in the range of a 32-bit signed integer. 3. `k` can be either positive or negative.","solution":"def checkSubarraySum(nums, k): Determine if there is a continuous subarray of size at least 2 that sums up to a multiple of k. if len(nums) < 2: return False prefix_sum_mod_k = {0: -1} # Handles the case where the subarray starts at index 0 current_sum = 0 for i, num in enumerate(nums): current_sum += num if k != 0: current_sum %= k if current_sum in prefix_sum_mod_k: if i - prefix_sum_mod_k[current_sum] > 1: return True else: prefix_sum_mod_k[current_sum] = i return False"},{"question":"Given a sequence of n integers, we want to remove elements so that the remaining sequence is strictly increasing. Specifically, for each integer v_i in the sequence, either remove it or keep it such that the final sequence contains all elements sorted in strictly increasing order without changing their original positions relative to one another. Write a program that finds the length of the longest strictly increasing subsequence. -----Input----- - The first line contains an integer T denoting the number of test cases. - For each test case: - The first line contains an integer n denoting the number of integers in the sequence. - The second line contains n space-separated integers v_1, v_2, ..., v_n representing the sequence. -----Output----- For each test case, output a single integer on a new line representing the length of the longest strictly increasing subsequence. -----Constraints----- - 1 leq T leq 25 - 1 leq n leq 2 cdot 10^5 - 1 leq v_i leq 10^9 -----Example Input----- 3 5 1 2 1 5 3 4 9 4 7 2 6 2 2 2 2 2 2 -----Example Output----- 3 2 1 -----Explanation----- In the first test case, the longest strictly increasing subsequence is either [1, 2, 5] or [1, 2, 3], both having a length of 3. In the second test case, the longest strictly increasing subsequence is either [4, 7] or [2, 4], both having a length of 2. In the third test case, all elements are the same, so the longest strictly increasing subsequence has a length of 1.","solution":"def longest_increasing_subsequence_length(n, sequence): Finds the length of the longest strictly increasing subsequence. if n == 0: return 0 # Initialize an array to store the smallest ending value for increasing subsequence of length i+1 dp = [] for num in sequence: pos = binary_search(dp, num) if pos == len(dp): dp.append(num) else: dp[pos] = num return len(dp) def binary_search(dp, num): Helper function to perform binary search on the dp array. left, right = 0, len(dp) while left < right: mid = (left + right) // 2 if dp[mid] < num: left = mid + 1 else: right = mid return left def process_input(T, test_cases): Processes multiple test cases. results = [] for i in range(T): n = test_cases[i][0] sequence = test_cases[i][1] results.append(longest_increasing_subsequence_length(n, sequence)) return results"},{"question":"You are given a rectangular matrix of integers. Your task is to implement a function that calculates the sum of all the integers in the matrix that are greater than a specified threshold value. The function should return the sum as an integer. Write a function `matrix_threshold_sum(matrix, threshold)` that takes in two parameters: 1. `matrix`: A list of lists where each inner list represents a row of integers. 2. `threshold`: An integer value that represents the threshold. The function should return an integer that is the sum of all the elements in the matrix that are greater than the given threshold. **Example:** ``` matrix = [ [3, 5, 7], [1, 6, 8], [4, 9, 2] ] threshold = 5 ``` **Output:** ``` 35 ``` **Explanation:** The elements greater than 5 are 7, 6, 8, and 9. Their sum is 7 + 6 + 8 + 9 = 30.","solution":"def matrix_threshold_sum(matrix, threshold): Returns the sum of matrix elements that are greater than the threshold. Args: matrix -- list of lists where each inner list represents a row of integers threshold -- int, the threshold value Returns: int, the sum of elements greater than the threshold total_sum = 0 for row in matrix: for element in row: if element > threshold: total_sum += element return total_sum"},{"question":"# Unique String Composition Given a string of lowercase alphabets, determine if the string can be rearranged such that no two adjacent characters are the same. If it can, return one possible rearrangement of the string. If it cannot, return an empty string. # Some Examples Given `\\"aabb\\"` there are several possible ways to rearrange such as `\\"abab\\"`, `\\"baba\\"`. > Given `\\"aaab\\"` there is no way to rearrange the string to meet the conditions, so the output should be an empty string. > Given `\\"aabbbcc\\"` there are several possible ways to rearrange such as `\\"bcbabca\\"`, `\\"bacbacb\\"`. # Input ```python s ~ a lowercase alphabet string (1 <= len(s) <= 1000) ``` # Output ```python ~ a string rearrangement or an empty string ``` # Enjoy!","solution":"from collections import Counter import heapq def rearrange_string(s): Rearranges the string such that no two adjacent characters are the same. If it\'s not possible, returns an empty string. if not s: return \\"\\" # Count frequencies of each character freq = Counter(s) # Create a max heap with negative frequencies since heapq is a min heap by default max_heap = [(-count, char) for char, count in freq.items()] heapq.heapify(max_heap) prev_char = None prev_freq = 0 result = [] while max_heap or prev_freq < 0: if max_heap: count, char = heapq.heappop(max_heap) result.append(char) if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) prev_char = char prev_freq = count + 1 else: return \\"\\" return \\"\\".join(result)"},{"question":"Create a function that takes in an integer representing the day of the week (1 for Monday, 2 for Tuesday, ..., 7 for Sunday), and returns the corresponding day name as a string. If the input integer is not in the range from 1 to 7, the function should return \\"Invalid day\\". **Examples:** ```python day_of_week(1) == \\"Monday\\" day_of_week(5) == \\"Friday\\" day_of_week(7) == \\"Sunday\\" day_of_week(0) == \\"Invalid day\\" ```","solution":"def day_of_week(day): Returns the name of the day of the week corresponding to the given integer. Args: day (int): Integer representing the day of the week (1 for Monday, 2 for Tuesday, ..., 7 for Sunday). Returns: str: The name of the day of the week or \\"Invalid day\\" if the input is not in the range from 1 to 7. days = { 1: \\"Monday\\", 2: \\"Tuesday\\", 3: \\"Wednesday\\", 4: \\"Thursday\\", 5: \\"Friday\\", 6: \\"Saturday\\", 7: \\"Sunday\\" } return days.get(day, \\"Invalid day\\")"},{"question":"A coding competition has K problems, and a team has to solve exactly N problems to qualify for the next round. Each problem has an integer difficulty level D. The team can attempt the problems in any order but needs to allocate sufficient time to solve the problems due to their varying difficulties. Each problem with difficulty D requires D minutes to solve. The team can work simultaneously on all problems due to their parallel processing capability. However, the goal is to minimize the maximum time taken to solve the problems. The team will take the time equal to the most difficult problem among the N selected problems to solve all N problems together. You need to calculate the minimum maximum time required for the team to solve exactly N problems and qualify for the next round. Example 1: Input: K = 5 N = 3 D = [2, 5, 3, 6, 1] Output: 3 Explanation: The team can select problems with difficulty levels {2, 3, 1}. The maximum time taken is 3 minutes since 3 is the hardest problem among the selected problems. Example 2: Input: K = 6 N = 4 D = [4, 8, 1, 2, 6, 7] Output: 6 Explanation: The team can select problems with difficulty levels {4, 2, 1, 6}. The maximum time taken is 6 minutes since 6 is the hardest problem among the selected problems. Your Task: You don\'t need to read input or print anything. Your task is to complete the function minimizeMaxTime() which takes two integers K and N, and an array D[] of length K denoting the difficulty levels, and returns an integer denoting the minimum maximum time required. Expected Time Complexity: O(K*logK) Expected Auxiliary Space: O(1) Constraints: 1 <= K <= 1000 1 <= N <= K 1 <= D[i] <= 10^4","solution":"def minimizeMaxTime(K, N, D): Returns the minimum maximum time required for the team to solve exactly N problems. D.sort() return D[N-1]"},{"question":"The problem statement A shifting string is a string that can be obtained by shifting one or more occurrence(s) of a letter to any other position within the string. Write a function that determines if two strings are shifting strings of each other. Input The first line contains an integer T, the number of test cases. Each test case consists of two lines: - The first line contains string A. - The second line contains string B. Output For each test case, output \\"YES\\" if the strings are shifting strings of each other, otherwise output \\"NO\\". Example Input 3 abc bca aabbcc bbccaa abc def Output YES YES NO","solution":"def are_shifting_strings(a, b): Determines if two strings are shifting strings of each other. Parameters: a (str): The first string. b (str): The second string. Returns: bool: True if the strings are shifting strings of each other, otherwise False. # If the lengths are not the same, they cannot be shifting strings if len(a) != len(b): return False # Check if both strings have the same character counts from collections import Counter return Counter(a) == Counter(b) def shifting_strings(t, cases): Determines the result for multiple test cases. Parameters: t (int): Number of test cases. cases (list of tuples): Each tuple contains two strings a and b. Returns: list of str: \\"YES\\" or \\"NO\\" for each test case. results = [] for a, b in cases: if are_shifting_strings(a, b): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are managing an inventory system where you need to keep track of the quantities of different products. Each product has a unique product ID. You want to implement a feature that allows you to perform two types of operations: 1. Add a certain quantity of a product to the inventory. 2. Query the total quantity of a range of product IDs. Implement a class `Inventory` that supports the following methods: - `void add(int productId, int quantity)`: Adds the specified `quantity` of the product with the given `productId` to the inventory. - `int query(int startProductId, int endProductId)`: Returns the total quantity of products in the inventory whose product IDs are between `startProductId` and `endProductId` (inclusive). # Methods - `Inventory()`: Initializes a new instance of the Inventory class. - `void add(int productId, int quantity)`: Updates the inventory by adding the specified quantity of the product with the given productId. - `int query(int startProductId, int endProductId)`: Returns the sum of quantities of all products whose product IDs are between startProductId and endProductId (inclusive). # Constraints - Product IDs are positive integers. - Quantities are non-negative integers. - You can assume there will be at most 100,000 operations in total and product IDs will not exceed 100,000. # Example ```python inventory = Inventory() inventory.add(101, 5) inventory.add(102, 10) inventory.add(150, 20) print(inventory.query(100, 200)) # Output: 35 (5 + 10 + 20) inventory.add(101, 10) print(inventory.query(100, 102)) # Output: 25 (15 + 10) ``` Implement the class and methods in Python.","solution":"class Inventory: def __init__(self): # Using a dictionary to store the quantities of each product self.inventory = {} def add(self, productId, quantity): if productId in self.inventory: self.inventory[productId] += quantity else: self.inventory[productId] = quantity def query(self, startProductId, endProductId): total_quantity = 0 for productId in range(startProductId, endProductId + 1): if productId in self.inventory: total_quantity += self.inventory[productId] return total_quantity"},{"question":"John is an avid collector of antique coins. He has a collection of n coins, each with a known value. John wants to split his coins into two groups such that the absolute difference of the total values of the two groups is minimized. John is curious about the minimum possible absolute difference between the sum of the values of the two groups. Input The first line of input contains an integer n (1 ≤ n ≤ 100) — the number of coins in John\'s collection. The second line contains n integers v1, v2, ..., vn (1 ≤ vi ≤ 1000) — the values of John\'s coins. Output Output one integer — the minimum possible absolute difference between the sum of the values of the two groups. Example Input 4 1 2 3 4 Output 0 Input 3 2 2 3 Output 1","solution":"def min_difference(n, values): Returns the minimum possible absolute difference between the sum of the values of the two groups. total_sum = sum(values) target = total_sum // 2 dp = [0] * (target + 1) for value in values: for i in range(target, value - 1, -1): dp[i] = max(dp[i], dp[i - value] + value) best_split_sum = dp[target] return abs((total_sum - best_split_sum) - best_split_sum)"},{"question":"You are given a binary tree where each node can have up to two children. Write a function `maxDepth` that computes the maximum depth of the binary tree. The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node. # Example 1: Given the following tree: ``` 3 / 9 20 / 15 7 ``` The function should return `3`, as the longest path is 3 -> 20 -> 7. # Example 2: Given the following tree: ``` 1 2 3 4 ``` The function should return `4`, as the longest path is 1 -> 2 -> 3 -> 4. # Function Signature ``` def maxDepth(root: Optional[TreeNode]) -> int: ``` # Constraints - The number of nodes in the tree is in the range `[0, 10^4]`. - `-100 <= Node.val <= 100`. - The input tree may be empty, in which case the maximum depth is 0. Ensure your function is efficient and considers edge cases like an empty tree or a tree with a single node. Use this code as an example to create your solution: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def maxDepth(root: Optional[TreeNode]) -> int: # implement your function here ```","solution":"from typing import Optional class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def maxDepth(root: Optional[TreeNode]) -> int: if root is None: return 0 else: left_depth = maxDepth(root.left) right_depth = maxDepth(root.right) return max(left_depth, right_depth) + 1"},{"question":"Write a function that takes a list of strings representing file names with various extensions and groups them by their file types. Each group should be sorted in lexicographical order, ignoring case sensitivity. The function should return a dictionary where the keys are file types and the values are lists of filenames belonging to that type, sorted appropriately. Example: ```python files = [\\"notes.txt\\", \\"photo1.JPG\\", \\"photo2.jpg\\", \\"document.PDF\\", \\"summary.pdf\\", \\"archive.zip\\"] Output: { \'txt\': [\'notes.txt\'], \'jpg\': [\'photo1.JPG\', \'photo2.jpg\'], \'pdf\': [\'document.PDF\', \'summary.pdf\'], \'zip\': [\'archive.zip\'] } ```","solution":"def group_files_by_type(files): Groups files by their extensions and sorts each group lexicographically. Args: files (list of str): List of file names with extensions. Returns: dict: Dictionary where keys are file types and values are sorted lists of file names. from collections import defaultdict file_dict = defaultdict(list) for file in files: ext = file.split(\'.\')[-1].lower() file_dict[ext].append(file) for ext in file_dict: file_dict[ext] = sorted(file_dict[ext], key=lambda x: x.lower()) return dict(file_dict)"},{"question":"You are given a string of lowercase alphabet characters. Your task is to determine whether the string is a palindrome or can be rearranged to form a palindrome. A `palindrome` is a word that reads the same backward as forward. For example, \\"madam\\" is a palindrome but \\"apple\\" is not. For example, \\"otter\\" cannot be rearranged into a palindrome while \\"civic\\", \\"ivicc\\", and \\"racecar\\" can be arranged into palindromes. Write a function `canFormPalindrome(s: str) -> bool` that takes a string `s` as input and returns `True` if the given string can be rearranged into a palindrome, or `False` otherwise. Examples: ```python canFormPalindrome(\\"civic\\") == True # The string is already a palindrome. canFormPalindrome(\\"ivicc\\") == True # \\"ivicc\\" can be rearranged to form \\"civic\\". canFormPalindrome(\\"racecar\\") == True # The string is already a palindrome. canFormPalindrome(\\"aabbccdd\\") == True # \\"aabbccdd\\" can be rearranged to form \\"abcdcba\\". canFormPalindrome(\\"otter\\") == False # \\"otter\\" cannot be rearranged into a palindrome. canFormPalindrome(\\"apple\\") == False # \\"apple\\" cannot be rearranged into a palindrome. ``` Constraints: 1. The input string `s` will contain only lowercase English alphabets. 2. The maximum length of the string can be 100,000 characters. Good luck!","solution":"def canFormPalindrome(s: str) -> bool: Determines if the given string s can be rearranged to form a palindrome. A string can be rearranged to form a palindrome if at most one character has an odd frequency. This is because the characters can be mirrored around the center of the palindrome. Args: s (str): A string containing lowercase English alphabets. Returns: bool: True if the string can be rearranged to form a palindrome, else False. from collections import Counter # Count the frequency of each character in the string counter = Counter(s) # Check the number of characters with odd frequency odd_count = sum(1 for freq in counter.values() if freq % 2 != 0) # For a string to be rearranged into a palindrome, # there should be at most one character with an odd frequency return odd_count <= 1"},{"question":"Alice loves palindromes and one day she asked Bob to solve the following problem. Alice will give Bob a string and he has to find the length of the longest palindromic substring in it. Bob thought it would be a piece of cake, but when the string length became very long, he struggled with it. Can you help Bob by writing a function to solve the problem? Input format: - The first line will have a single integer T, the number of test cases. - The next T lines will each have a single string. Output format: - For each test case, print a single integer which is the length of the longest palindromic substring. Constraints: - 1 <= T <= 100 - 1 <= length of each string <= 10^5 - All strings contain only lowercase English letters. Sample Input: ``` 2 babad cbbd ``` Sample Output: ``` 3 2 ``` Explanation: - For the first string \\"babad\\", the longest palindromic substring is \\"bab\\" or \\"aba\\" with a length of 3. - For the second string \\"cbbd\\", the longest palindromic substring is \\"bb\\" with a length of 2.","solution":"def longest_palindromic_substring_length(s): Returns the length of the longest palindromic substring in s. n = len(s) if n == 0: return 0 # Create a DP table to store results of subproblems dp = [[False]*n for _ in range(n)] # All substrings of length 1 are palindromes max_length = 1 for i in range(n): dp[i][i] = True start = 0 # Check for sub-string of length 2. for i in range(n-1): if s[i] == s[i+1]: dp[i][i+1] = True start = i max_length = 2 # Check for lengths greater than 2. for k in range(3, n+1): # Fix the starting index for i in range(n-k+1): # Get the ending index of substring from starting index i and length k j = i + k - 1 # checking for sub-string from ith index to jth index # if s[i+1] to s[j-1] is a palindrome if dp[i+1][j-1] and s[i] == s[j]: dp[i][j] = True if k > max_length: start = i max_length = k return max_length def process_test_cases(T, cases): results = [] for case in cases: results.append(longest_palindromic_substring_length(case)) return results"},{"question":"Write a function `balanceString` that takes a string `s` consisting of only lowercase alphabetic letters and returns a \\"balanced\\" string. A balanced string is one where: - Each character has been mirrored to its opposite position in the alphabet. For example, \'a\' becomes \'z\', \'b\' becomes \'y\', \'c\' becomes \'x\', and so on. Examples: ``` balanceString(\'abc\') => \'zyx\' balanceString(\'xyz\') => \'cba\' balanceString(\'hello\') => \'svool\' balanceString(\'az\') => \'za\' ``` It is preloaded: ``` const alphabet = \'abcdefghijklmnopqrstuvwxyz\'; ``` Note: - You only need to consider lowercase letters for this task. - The function should efficiently handle strings of varying lengths.","solution":"def balanceString(s): Returns a \\"balanced\\" version of the string `s`, where each character is mirrored to its opposite position in the alphabet. alphabet = \'abcdefghijklmnopqrstuvwxyz\' alpha_dict = {alphabet[i]: alphabet[25-i] for i in range(26)} return \'\'.join(alpha_dict[char] for char in s)"},{"question":"You are given a list of values representing visitor counts to a museum for each day over a month. The museum wants to analyze its busiest period within a continuous span of several days (window size) to plan for future staffing needs. Given the number of days of visitor data and an integer window size, determine the maximum average number of visitors over any window of that size within the dataset. ------ Input Format ------ - The first line of input contains an integer T, denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two integers, D and K, where D is the number of days of visitor data and K is the size of the window. - The second line of each test case contains D integers representing visitor counts for each day in the dataset. ------ Output Format ------ For each test case, output a new line containing the maximum average number of visitors over any window of size K. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ D ≤ 1000 1 ≤ K ≤ D 0 ≤ visitor_count ≤ 10000 ----- Sample Input 1 ------ 2 5 2 1 2 3 4 5 7 3 5 1 2 6 4 9 3 ----- Sample Output 1 ------ 4.5 6.3333 ----- Explanation 1 ------ Test Case 1: The window size is 2. - The possible windows are [1, 2], [2, 3], [3, 4], and [4, 5]. - Calculating the average for each window: (1+2)/2 = 1.5, (2+3)/2 = 2.5, (3+4)/2 = 3.5, (4+5)/2 = 4.5. - The maximum average is 4.5. Test Case 2: The window size is 3. - The possible windows are [5, 1, 2], [1, 2, 6], [2, 6, 4], [6, 4, 9], and [4, 9, 3]. - Calculating the average for each window: (5+1+2)/3 ≈ 2.6667, (1+2+6)/3 ≈ 3.0, (2+6+4)/3 = 4.0, (6+4+9)/3 ≈ 6.3333, (4+9+3)/3 ≈ 5.3333. - The maximum average is approximately 6.3333.","solution":"def max_average_visitor_count(t, cases): results = [] for i in range(t): D, K = cases[i][0] visitors = cases[i][1] max_avg = sum(visitors[:K]) / K current_sum = sum(visitors[:K]) for j in range(1, D - K + 1): current_sum = current_sum - visitors[j - 1] + visitors[j + K - 1] current_avg = current_sum / K if current_avg > max_avg: max_avg = current_avg results.append(max_avg) return results"},{"question":"John is organizing a series of events for his friends, and he wants to make sure the schedule is balanced. He has a list of N events, each with a start time and an end time. Two events are said to overlap if they share at least one point in time. John wants to find out if he can arrange all the events such that no two events overlap. -----Input----- The first line of the input contains a single integer, T, representing the number of test cases. Each test case begins with a single integer, N, representing the number of events. The next N lines each contain two integers, S and E, representing the start and end times of an event. -----Output----- For each test case, output \\"YES\\" if it is possible to schedule the events without any overlap, and \\"NO\\" otherwise. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 1000 - 0 ≤ S < E ≤ 10^9 -----Example----- Input: 2 3 1 3 2 5 6 7 2 1 2 3 4 Output: NO YES -----Explanation----- In the first test case, the events (1, 3) and (2, 5) overlap, so it is not possible to schedule all events without overlap, hence \\"NO\\". In the second test case, the events (1, 2) and (3, 4) do not overlap, so it is possible to schedule all events without overlap, hence \\"YES\\".","solution":"def can_schedule_events(test_cases): results = [] for events in test_cases: events.sort() # Sort events by their start time can_schedule = True end_time = -1 for s, e in events: if s < end_time: can_schedule = False break end_time = e results.append(\\"YES\\" if can_schedule else \\"NO\\") return results def parse_input(input_str): lines = input_str.strip().split(\\"n\\") index = 0 T = int(lines[index]) index += 1 test_cases = [] for _ in range(T): N = int(lines[index]) index += 1 events = [] for _ in range(N): S, E = map(int, lines[index].split()) index += 1 events.append((S, E)) test_cases.append(events) return test_cases def solve(input_str): test_cases = parse_input(input_str) return can_schedule_events(test_cases)"},{"question":"Every semester, the university conducts an online coding competition. The scores of participants in the competition are stored in an array, where each element represents the score of a participant. At the end of the competition, the organizers have a few queries about the scores. Each query asks for the sum of scores in a specific range of the array. Your task is to process the set of queries efficiently. # Input Format - The first line contains two integers `N` and `Q`, representing the number of participants and the number of queries, respectively. - The second line contains `N` integers, where the `i-th` integer represents the score of the `i-th` participant. - The next `Q` lines contain two integers `L` and `R` (1-based inclusive), representing the range of scores for a specific query. # Output Format - For each query, print the sum of scores in the range `[L, R]`. # Constraints - 1 ≤ N ≤ 10^5 - 1 ≤ Q ≤ 10^4 - 1 ≤ Scores[i] ≤ 10^3 - 1 ≤ L ≤ R ≤ N # Example Sample Input ``` 5 3 1 2 3 4 5 1 3 2 4 1 5 ``` Sample Output ``` 6 9 15 ``` Explanation - The first query asks for the sum of scores from index 1 to 3: 1 + 2 + 3 = 6. - The second query asks for the sum of scores from index 2 to 4: 2 + 3 + 4 = 9. - The third query asks for the sum of scores from index 1 to 5: 1 + 2 + 3 + 4 + 5 = 15.","solution":"def process_queries(N, Q, scores, queries): Process the range sum queries on given scores. Args: N : int : number of participants Q : int : number of queries scores : list of int : scores of participants queries : list of tuple of int : each tuple contains (L, R) representing the range Returns: list of int : sum of scores for each query # Create a prefix sum array prefix_sum = [0] * (N + 1) for i in range(1, N + 1): prefix_sum[i] = prefix_sum[i - 1] + scores[i - 1] results = [] for L, R in queries: # Sum of scores from indices L to R can be derived from prefix sum sum_range = prefix_sum[R] - prefix_sum[L - 1] results.append(sum_range) return results"},{"question":"Given an integer array arr[] of size n, your task is to find the sum of the minimum values of every subarray of arr[]. The sum can be large, so return the result modulo 10^9 + 7. Example 1: Input: arr = [3, 1, 2, 4] Output: 17 Explanation: Subarrays are [3], [1], [2], [4], [3, 1], [1, 2], [2, 4], [3, 1, 2], [1, 2, 4], [3, 1, 2, 4]. Minimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1. Sum is 3 + 1 + 2 + 4 + 1 + 1 + 2 + 1 + 1 + 1 = 17. Example 2: Input: arr = [11, 81, 94, 43, 3] Output: 444 Explanation: Subarrays are [11], [81], [94], [43], [3], [11, 81], [81, 94], [94, 43], [43, 3], [11, 81, 94], [81, 94, 43], [94, 43, 3], [11, 81, 94, 43], [81, 94, 43, 3], [11, 81, 94, 43, 3]. Minimums are 11, 81, 94, 43, 3, 11, 81, 43, 3, 11, 81, 43, 11, 81, 11. Sum is 11 + 81 + 94 + 43 + 3 + 11 + 81 + 43 + 3 + 11 + 81 + 43 + 11 + 81 + 11 = 678 % 10^9 + 7 = 444. Your Task: You don\'t need to read input or print anything. Your task is to complete the function sumOfSubarrayMins() which takes an integer array arr[] as input and returns the sum of the minimum values of every subarray of arr[], modulo 10^9 + 7. Expected Time Complexity: O(n) Expected Space Complexity: O(n) Constraints: 1 <= n <= 3 * 10^4 1 <= arr[i] <= 3 * 10^4","solution":"def sum_of_subarray_mins(arr): MOD = 10**9 + 7 n = len(arr) # Create arrays to store the next and previous less element next_less = [n] * n prev_less = [-1] * n stack = [] # Find previous less element for each arr[i] for i in range(n): while stack and arr[stack[-1]] > arr[i]: stack.pop() if stack: prev_less[i] = stack[-1] stack.append(i) stack = [] # Find next less element for each arr[i] for i in range(n): while stack and arr[stack[-1]] > arr[i]: next_less[stack.pop()] = i stack.append(i) # Calculate sum of subarray minimums using the breakdown of subarrays ending at each index result = 0 for i in range(n): left_count = i - prev_less[i] right_count = next_less[i] - i result = (result + arr[i] * left_count * right_count) % MOD return result"},{"question":"Given an array of integers, your task is to find the maximum length of a contiguous subarray such that after performing an inversion, the resulting subarray is sorted in increasing order. An inversion is defined as flipping the entire subarray, mirroring its elements. Specifically, for a subarray `a[i..j]`, inversion results in transforming the subarray into `a[j], a[j-1], ..., a[i]`. Input The first line contains an integer `t` (1 ≤ t ≤ 100) — the number of test cases. Each of the next `t` input blocks describes a single test case. For each test case: - The first line contains a single integer `n` (1 ≤ n ≤ 10^5) — the length of the array. - The second line contains `n` integers `a1, a2, ..., an` (1 ≤ a_i ≤ 10^9) — the elements of the array. Output For each test case, output a single integer representing the maximum length of a contiguous subarray which, when inverted, becomes sorted in increasing order. Example Input: 4 5 4 3 2 1 5 6 7 6 5 4 3 2 3 1 5 3 4 10 20 30 40 Output: 4 6 2 1 Explanation: - In the first test case, the subarray `[4, 3, 2, 1]` when inverted results in `[1, 2, 3, 4]` which is sorted in increasing order. - In the second test case, the entire array `[7, 6, 5, 4, 3, 2]` when inverted is `[2, 3, 4, 5, 6, 7]` which is sorted in increasing order. - In the third test case, the subarray `[5, 3]` when inverted is `[3, 5]`, which is sorted in increasing order. The longest such subarray is of length 2. - In the fourth test case, no inversion is needed as a single element subarray is always considered sorted.","solution":"def max_invert_length(test_cases): Given a list of test cases, each containing an array of integers, find the maximum length of a contiguous subarray which, when inverted, becomes sorted in increasing order. Parameters: test_cases (list): A list where each element is a dictionary with keys \'n\' (length of array) and \'arr\' (the array of integers). Returns: list: A list of integers where each integer is the result for the respective test case. results = [] for case in test_cases: n = case[\'n\'] arr = case[\'arr\'] max_len = 1 current_len = 1 for i in range(1, n): if arr[i] <= arr[i-1]: current_len += 1 max_len = max(max_len, current_len) else: current_len = 1 results.append(max_len) return results"},{"question":"You are given a number of test cases where each test case contains a list of integers. Your task is to design a function that for each test case returns the second largest unique number from the list. If there is no such number, return \\"None\\". Input The first line contains the number of test cases \'T\'. Each of the next \'T\' lines contains a space-separated list of integers representing the list for each test case. Output For each test case, output the second largest unique number in a new line, or \\"None\\" if there isn\'t one. Constraints T ≤ 20 The size of the list in each test case ≤ 100 The integers range from -1000 to 1000 SAMPLE INPUT 3 2 3 5 5 6 1 1 3 3 7 7 7 7 7 SAMPLE OUTPUT 5 1 None","solution":"def second_largest_unique_number(test_cases): This function accepts a list of test cases where each test case is a list of integers. It returns a list containing the second largest unique number for each test case or \\"None\\" if there isn\'t one. results = [] for nums in test_cases: unique_nums = list(set(nums)) # Remove duplicates if len(unique_nums) < 2: results.append(\\"None\\") else: unique_nums.sort(reverse=True) results.append(unique_nums[1]) return results"},{"question":"Write a function that takes a dictionary where the keys are the names of products and the values are a list containing the availability of the product in different stores. The function should return a new dictionary where the keys are the store names and the values are the lists of products available in each store. For example, if the input dictionary is: ```python { \\"Milk\\": [\\"Store1\\", \\"Store2\\"], \\"Bread\\": [\\"Store1\\"], \\"Cheese\\": [\\"Store2\\", \\"Store3\\"] } ``` The output should be: ```python { \\"Store1\\": [\\"Milk\\", \\"Bread\\"], \\"Store2\\": [\\"Milk\\", \\"Cheese\\"], \\"Store3\\": [\\"Cheese\\"] } ``` Your function should be named `invert_availability`.","solution":"def invert_availability(product_dict): Returns a dictionary where the keys are store names and the values are lists of products available in each store. Parameters: product_dict (dict): A dictionary where keys are product names and values are lists of stores where the product is available. Returns: dict: A dictionary where keys are store names and values are lists of products available in each store. store_dict = {} for product, stores in product_dict.items(): for store in stores: if store not in store_dict: store_dict[store] = [] store_dict[store].append(product) return store_dict"},{"question":"You are given an array of integers, and you need to perform a number of queries on this array. Each query can be one of two types: 1. Update the value at a specific index in the array. 2. Calculate the sum of the elements in a given range. To efficiently handle these queries, implement a function using a Segment Tree. # Input The first line contains an integer `n` (1 ≤ n ≤ 100,000), the size of the array, followed by the `n` integers of the array. The next line contains a single integer `q` (1 ≤ q ≤ 100,000), the number of queries. Each of the next `q` lines contains one query in one of the following two formats: - `1 i x` - Update the value at index `i` (0-based) to `x`. (1 ≤ i < n; -10^9 ≤ x ≤ 10^9) - `2 l r` - Calculate the sum of the array elements between indices `l` and `r` (inclusive) (0 ≤ l ≤ r < n). # Output For each sum query, output the result on a new line. # Example Input ``` 5 1 2 3 4 5 5 2 0 2 1 1 10 2 0 2 2 1 3 1 4 6 ``` Output ``` 6 14 17 ``` # Explanation Initially, the array is [1, 2, 3, 4, 5]. 1. The first query `2 0 2` asks for the sum of elements from index 0 to 2 which is 1 + 2 + 3 = 6. 2. The second query `1 1 10` updates the element at index 1 to 10, so the array becomes [1, 10, 3, 4, 5]. 3. The third query `2 0 2` asks for the sum of elements from index 0 to 2 which is 1 + 10 + 3 = 14. 4. The fourth query `2 1 3` asks for the sum of elements from index 1 to 3 which is 10 + 3 + 4 = 17. 5. The fifth query `1 4 6` updates the element at index 4 to 6, so the array becomes [1, 10, 3, 4, 6].","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) # Initialize the segment tree with data self._build(data) def _build(self, data): # Insert leaf nodes in tree for i in range(self.n): self.tree[self.n + i] = data[i] # Build the tree by calculating parents for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[i * 2] + self.tree[i * 2 + 1] def update(self, pos, value): # Update the leaf node pos += self.n self.tree[pos] = value # Update the parents while pos > 1: pos //= 2 self.tree[pos] = self.tree[2 * pos] + self.tree[2 * pos + 1] def range_sum(self, left, right): # Sum on the interval [left, right) left += self.n right += self.n + 1 sum = 0 while left < right: if left % 2 == 1: sum += self.tree[left] left += 1 if right % 2 == 1: right -= 1 sum += self.tree[right] left //= 2 right //= 2 return sum def process_queries(n, array, queries): seg_tree = SegmentTree(array) results = [] for query in queries: if query[0] == 1: seg_tree.update(query[1], query[2]) elif query[0] == 2: results.append(seg_tree.range_sum(query[1], query[2])) return results # Example usage: n = 5 array = [1, 2, 3, 4, 5] queries = [(2, 0, 2), (1, 1, 10), (2, 0, 2), (2, 1, 3), (1, 4, 6)] print(process_queries(n, array, queries))"},{"question":"A delivery company wants to optimize the route for their delivery van. Each day, the van starts from the warehouse and makes deliveries to N different locations. For simplicity, consider the warehouse to be at location number 0, and the N delivery locations are numbered from 1 to N. The delivery van must start at the warehouse, visit each delivery location exactly once, and return to the warehouse. The company has a map that gives the travel time between each pair of locations, including the warehouse. The total travel time for a route is the sum of the travel times between consecutive locations in the route, including the return trip to the warehouse. The goal is to find the shortest possible total travel time for the delivery route. Write a program that will determine the shortest possible total travel time for the delivery van to complete its route. -----Input----- The first line of the input contains a single integer N (1 leq N leq 10), the number of delivery locations. The next N + 1 lines describe the travel times. Each of these lines contains N + 1 integers, where the j^{th} integer in the i^{th} line represents the travel time between location i and location j (0 leq i, j leq N). The travel time between any two different locations is a positive integer not exceeding 1000, and the travel time from any location to itself is 0. -----Output----- The first and only line of the output should contain a single integer, the total travel time of the shortest possible route. -----Examples----- Sample Input 1: 3 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 Sample Output 1: 80 Sample Input 2: 4 0 29 20 21 15 29 0 15 17 12 20 15 0 28 10 21 17 28 0 18 15 12 10 18 0 Sample Output 2: 78","solution":"from itertools import permutations def calculate_travel_time(route, travel_times): total_time = 0 for i in range(len(route) - 1): total_time += travel_times[route[i]][route[i + 1]] total_time += travel_times[route[-1]][route[0]] # returning to the warehouse return total_time def find_shortest_route(N, travel_times): # Generate all possible routes starting and ending at the warehouse (0) locations = list(range(1, N + 1)) all_routes = permutations(locations) min_time = float(\'inf\') for route in all_routes: route = (0,) + route + (0,) travel_time = calculate_travel_time(route, travel_times) if travel_time < min_time: min_time = travel_time return min_time"},{"question":"Given an integer array nums of positive integers, return the minimum sum of partitioning the array into non-overlapping subarrays such that each subarray consists of consecutive elements and has strictly increasing values. The sum of the subarray is the sum of its elements. Example 1: Input: nums = [4,2,3,6,1,7,8] Output: 21 Explanation: One possible partitioning is [4], [2, 3, 6], [1], [7, 8]. The sum of partitioned subarrays is 4 + (2+3+6) + 1 + (7+8) = 31. The minimum sum partitioning is [4], [2, 3, 6], [1], [7, 8], resulting in the sum of 21. Example 2: Input: nums = [1,3,5,8,6,7,9] Output: 18 Explanation: One possible partitioning is [1, 3, 5, 8], [6, 7, 9]. The sum of partitioned subarrays is (1+3+5+8) + (6+7+9) = 39. The minimum sum partitioning is [1, 3, 5, 8], [6, 7, 9], resulting in the sum of 18. Constraints: 2 <= nums.length <= 40 1 <= nums[i] <= 20 It is guaranteed that the answer fits into a 32-bit signed integer (i.e., it is less than 2^31).","solution":"def min_partition_sum(nums): Returns the minimum sum of partitioning the array nums into non-overlapping subarrays such that each subarray consists of consecutive elements and has strictly increasing values. n = len(nums) if n == 0: return 0 min_sum = 0 i = 0 while i < n: current_sum = nums[i] i += 1 while i < n and nums[i] > nums[i-1]: current_sum += nums[i] i += 1 min_sum += current_sum return min_sum"},{"question":"A delivery truck has a specific capacity, and it must deliver items to various locations. Each item has a specific weight and a monetary value. The goal is to maximize the total monetary value of items delivered without exceeding the truck\'s capacity. **Input:** - The first line contains two integers, the capacity of the truck `C` (1 ≤ C ≤ 10^5) and the number of items `N` (1 ≤ N ≤ 10^3). - The next `N` lines each contain two integers: weight of the item `w_i` (1 ≤ w_i ≤ 10^5) and its corresponding value `v_i` (1 ≤ v_i ≤ 10^5). **Output:** - Output the maximum total value that the truck can carry without exceeding its capacity. **Example:** ``` Input 4 3 2 3 1 2 3 4 Output 6 Input 10 4 5 10 4 40 6 30 3 50 Output 90 ``` **Explanation:** - In the first example, the truck can carry items with weights and values {(2, 3), (1, 2)} or {(1, 2), (3, 4)} to make the total values of 5 and 6 respectively. The maximum value is 6. - In the second example, the truck can carry items {(4, 40), (3, 50)} to make the total value of 90.","solution":"def max_value_truck(capacity, items): Returns the maximum total value the truck can carry without exceeding its capacity. Parameters: capacity (int): The maximum capacity of the truck. items (list of tuples): Each tuple contains (weight, value) of an item. Returns: int: The maximum total value. # Initialize DP table dp = [0] * (capacity + 1) # Iterate through all items for weight, value in items: # Update the dp table in reverse order to avoid recomputation for current_capacity in range(capacity, weight - 1, -1): dp[current_capacity] = max(dp[current_capacity], dp[current_capacity - weight] + value) return dp[capacity] # Example usage: # capacity = 4 # items = [(2, 3), (1, 2), (3, 4)] # print(max_value_truck(capacity, items)) # Output: 6"},{"question":"Write a program that helps to schedule the distribution of weekly tasks among a group of team members in a balanced way. Each task has a weight associated with it, and a balanced schedule ensures that no team member is assigned more work than the others by a large margin. Each week, you are provided with a list of tasks and their respective weights. You need to determine the assignment of tasks to each team member such that the maximum weight assigned to any single team member is minimized. Input The first line contains two integers n (1 ≤ n ≤ 20) and m (1 ≤ m ≤ 10), where n is the number of tasks and m is the number of team members. The second line contains n space-separated integers w_1, w_2, ..., w_n (1 ≤ w_i ≤ 1000), where w_i is the weight of the i-th task. Output Output m lines, where the i-th line lists the indices of tasks assigned to the i-th team member. If there are multiple valid solutions, any one will be accepted. Examples Input 5 2 5 3 4 2 6 Output 1 2 4 3 5 Input 6 3 8 5 9 7 4 2 Output 1 4 2 3 5 6","solution":"def distribute_tasks(n, m, weights): from itertools import accumulate task_indices = list(range(1, n + 1)) # Create task index list starting from 1 tasks = list(zip(weights, task_indices)) # Pair weights with their indices tasks.sort(reverse=True) # Sort tasks by weight in descending order # Initialize m empty lists for team members workloads = [[] for _ in range(m)] workload_weights = [0] * m # Track the total weight for each member for weight, index in tasks: # Assign the task to the team member with the current minimum total weight min_member = workload_weights.index(min(workload_weights)) workloads[min_member].append(index) workload_weights[min_member] += weight return workloads # Example Usage n, m = 5, 2 weights = [5, 3, 4, 2, 6] print(distribute_tasks(n, m, weights)) # Expected to produce balanced distribution of tasks"},{"question":"In Techland, a newly developed online store is offering various electronic items. Each type of item is represented by an ID in the range 1 to 10. All items are sold at the online store. There are a total of M items. Each item has a price and a type. You will be given multiple queries. Each query contains a range of item types the customer is interested in and an integer L. The customer will buy the L^{th} cheapest item among the items in their chosen range. Determine the price the customer has to pay. If no such item is available, print -1. -----Input:----- - The first line contains M and Q - The second line contains M integers T_1, T_2, ..., T_M (Type of the items) - The third line contains M integers C_1, C_2, ..., C_2 (Cost of the items) - Each of the next Q lines describes a query. - Each query has a line with three integers T_{text{low}}, T_{text{high}}, and L. -----Output:----- For each query, print the price to be paid. -----Constraints----- - 1 leq M, Q, L leq 10^5 - 1 leq T_i leq 10 - 1 leq C_i leq 10^6 - 1 leq T_{text{low}} leq T_{text{high}} leq 10 -----Sample Input:----- 6 2 1 2 3 4 5 6 10 20 30 40 50 60 1 3 2 4 6 1 -----Sample Output:----- 20 40 -----Explanation:----- Query 1: The item types within the range [1, 3] are {1, 2, 3} with costs {10, 20, 30}. The second cheapest item is 20. Query 2: The item types within the range [4, 6] are {4, 5, 6} with costs {40, 50, 60}. The first cheapest item is 40.","solution":"def find_price_to_pay(M, Q, types, costs, queries): For each query, determine the Lth cheapest price for items within the specified type range. from collections import defaultdict # Dictionary to hold type -> list of costs type_to_costs = defaultdict(list) # Populate the type_to_costs dictionary for t, c in zip(types, costs): type_to_costs[t].append(c) # Sort the costs for each type for t in type_to_costs: type_to_costs[t].sort() # List to store the result of each query results = [] for T_low, T_high, L in queries: filtered_costs = [] for t in range(T_low, T_high + 1): if t in type_to_costs: filtered_costs.extend(type_to_costs[t]) filtered_costs.sort() if L <= len(filtered_costs): results.append(filtered_costs[L-1]) else: results.append(-1) return results"},{"question":"Given an array `a` of positive integers, you can perform the following operation any number of times: 1. Choose two adjacent elements `a[i]` and `a[i+1]` (1 ≤ i < n). 2. Swap them if `a[i] + a[i+1]` is even. Your task is to determine whether it\'s possible to sort the array in non-decreasing order by performing the given operation. Input The first line contains a single integer `n` (1 ≤ n ≤ 200000) — the number of elements in the array. The second line contains `n` positive integers `a1, a2, ..., an` (1 ≤ ai ≤ 10^9) — the array elements. Output Print \\"YES\\" (without quotes) if you can sort the array in non-decreasing order by performing the given operation any number of times. Otherwise, print \\"NO\\". Examples Input 5 3 5 2 8 6 Output YES Input 4 1 3 5 7 Output NO","solution":"def can_sort_by_swaps(n, a): Determine if the array can be sorted in non-decreasing order by performing swaps on adjacent elements whose sum is even. # First, try to separate even and odd numbers even_count = 0 odd_count = 0 # Count the number of even and odd elements for num in a: if num % 2 == 0: even_count += 1 else: odd_count += 1 # If there are no even or no odd numbers, then the array cannot be sorted # Because all numbers would be the same parity and never able to swap to different positions. if even_count == 0 or odd_count == 0: return \\"NO\\" # Otherwise, it is possible to sort the array if we have both even and odd numbers return \\"YES\\""},{"question":"Given an array of integers, rearrange the array such that every second element of the array is greater than its left and right elements. If no such arrangement is possible, return the array unchanged. Example 1: Input: arr: [5, 6, 1, 3, 8, 2] Output: [5, 6, 1, 8, 2, 3] Example 2: Input: arr: [10, 20, 30, 40, 50, 60, 70] Output: [10, 30, 20, 50, 40, 70, 60] Your Task: Complete the function rearrangeArray() which takes the array as an input and returns the array rearranged according to the above-mentioned condition. If no such arrangement is possible, return the array unchanged. Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^5 1 <= arr[i] <= 10^9","solution":"def rearrangeArray(arr): Rearranges the array such that every second element is greater than its left and right neighbors. :param arr: List of integers :return: Rearranged list of integers n = len(arr) if n <= 1: return arr # Sort the array arr.sort() # Swap adjacent elements to satisfy the condition for i in range(1, n, 2): if i + 1 < n: arr[i], arr[i + 1] = arr[i + 1], arr[i] return arr"},{"question":"Given a list of integers and a target integer, write a function that determines if there are two distinct integers in the list that add up to the target integer. If such a pair exists, return \\"POSSIBLE\\"; otherwise, return \\"IMPOSSIBLE\\". # Function Signature ```python def find_pair(nums: list, target: int) -> str: ``` # Input - A list of integers `nums` (1 ≤ len(nums) ≤ 10^5, -10^9 ≤ nums[i] ≤ 10^9) - An integer `target` (-10^9 ≤ target ≤ 10^9) # Output - A string \\"POSSIBLE\\" if there exists a pair of distinct integers in `nums` that add up to `target`, otherwise \\"IMPOSSIBLE\\". # Example ```python find_pair([2, 7, 11, 15], 9) ``` Output: ```plaintext POSSIBLE ``` ```python find_pair([1, 2, 3, 4], 8) ``` Output: ```plaintext IMPOSSIBLE ```","solution":"def find_pair(nums: list, target: int) -> str: Determines if there are two distinct integers in the list that add up to the target integer. Args: nums (list): A list of integers. target (int): The target integer. Returns: str: \\"POSSIBLE\\" if such a pair exists, otherwise \\"IMPOSSIBLE\\". num_set = set() for num in nums: if target - num in num_set: return \\"POSSIBLE\\" num_set.add(num) return \\"IMPOSSIBLE\\""},{"question":"You are given a maze represented by a 2D grid of integers where `0` indicates an open cell and `1` indicates a wall. A rat can move up, down, left, or right from an open cell. The goal is to find a way for the rat to reach the bottom-right corner of the maze starting from the top-left corner. Task Complete the `find_path` function to find the shortest path from the top-left to the bottom-right corner of the maze. # Parameters: * `maze` - a two-dimensional array of `1`s and `0`s (representing walls and open cells respectively). # Returns: The function should return a list of `(row, column)` tuples representing the path from the top-left corner to the bottom-right corner. If no path exists, return an empty list. # Constraints: * `maze` will be a list of lists where each inner list represents a row of the maze. * The maze will always be at least `1x1` in size. * The rat cannot move through walls (`1`s). * The rat cannot move outside the boundaries of the maze. * There will always be exactly one path if a path exists. Example ```python find_path([[0, 0, 1], [1, 0, 0], [1, 1, 0]]) # should return: [(0, 0), (0, 1), (1, 1), (1, 2), (2, 2)] ``` In the provided example, the shortest path from the top-left corner `(0, 0)` to the bottom-right corner `(2, 2)` is given by moving right to `(0, 1)`, then down to `(1, 1)`, right to `(1, 2)`, and finally down to `(2, 2)`.","solution":"from collections import deque def find_path(maze): Finds the shortest path from the top-left corner to the bottom-right corner of the maze. Returns a list of (row, column) tuples representing the path. If no path exists, returns an empty list. if not maze or not maze[0]: return [] rows, cols = len(maze), len(maze[0]) start, end = (0, 0), (rows-1, cols-1) # Check if start or end is a wall if maze[0][0] == 1 or maze[rows-1][cols-1] == 1: return [] # Directions for moving in the maze directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Queue for BFS queue = deque([(start, [start])]) visited = set([start]) while queue: (current, path) = queue.popleft() if current == end: return path for d in directions: next_row, next_col = current[0] + d[0], current[1] + d[1] if 0 <= next_row < rows and 0 <= next_col < cols and maze[next_row][next_col] == 0: next_pos = (next_row, next_col) if next_pos not in visited: visited.add(next_pos) queue.append((next_pos, path + [next_pos])) return []"},{"question":"Julia is an interior designer who loves arranging new decorative items in her living room. She has a collection of various items, all of which are unique and want to arrange some of them on a single shelf. She is interested in finding out all the unique ways she can arrange any \'r\' items from her collection of \'n\' items. Given a list of \'n\' distinct items, write a function to determine all possible unique combinations of \'r\' items selected from the collection. The function should return these combinations as a list of lists, with each sublist representing one unique combination. The order of items within each combination does not matter. Write a program that, given the list of items and the value \'r\', outputs all the unique combinations of \'r\' items that can be formed from the list. Input - The first line contains an integer \'n\', the number of unique items in Julia\'s collection (1 ≤ n ≤ 10). - The second line contains \'n\' space-separated strings, representing the unique items. - The third line contains an integer \'r\', the number of items to be selected in each combination (1 ≤ r ≤ n). Output - Output all the unique combinations of \'r\' items as a list of lists, one combination per line. The combinations should be output in lexicographical order. Example Input: 4 vase book candle frame 2 Output: [\'book\', \'candle\'] [\'book\', \'frame\'] [\'book\', \'vase\'] [\'candle\', \'frame\'] [\'candle\', \'vase\'] [\'frame\', \'vase\']","solution":"from itertools import combinations def unique_combinations(n, items, r): Returns all unique combinations of r items from the list of n items. Args: n : int : number of unique items items : list of str : list of unique items r : int : number of items to be selected in each combination Returns: list of lists : all unique combinations of r items from items items.sort() # Ensure the items are sorted to maintain lexicographical order result = list(combinations(items, r)) return [list(combo) for combo in result]"},{"question":"Given an array of integers, your task is to determine the product of all the elements in the array except itself for each position in the output array. Input: - The first line contains an integer n indicating the number of elements in the input array. - The second line contains the list of integers separated by a space. Output: - Print a list of integers, where each element at index i is the product of all the elements in the input array except the one at index i. Note: - You are not allowed to use the division operation. - The output can be very large, so you must return the product modulo 1000000007. Constraints: 1 ≤ n ≤ 100000 1 ≤ element of the array ≤ 1000 Example: Input: 5 1 2 3 4 5 Output: 120 60 40 30 24 Explanation: For the given input array [1, 2, 3, 4, 5], - The product of all elements except the first: 2*3*4*5 = 120 - The product of all elements except the second: 1*3*4*5 = 60 - The product of all elements except the third: 1*2*4*5 = 40 - The product of all elements except the fourth: 1*2*3*5 = 30 - The product of all elements except the fifth: 1*2*3*4 = 24","solution":"def product_except_self(nums): Returns a list such that each element at index i is the product of all the elements of nums except nums[i]. MOD = 1000000007 n = len(nums) if n == 1: return [1] # Step 1: Generate prefix and suffix products prefix_products = [1] * n suffix_products = [1] * n for i in range(1, n): prefix_products[i] = prefix_products[i-1] * nums[i-1] % MOD for i in range(n-2, -1, -1): suffix_products[i] = suffix_products[i+1] * nums[i+1] % MOD # Step 2: Calculate result result = [1] * n for i in range(n): result[i] = prefix_products[i] * suffix_products[i] % MOD return result"},{"question":"Deepa is a software engineer and is working on a project to analyze word frequency in large texts. She needs a function that can determine if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Write a function that checks if two supplied words (case insensitive) are anagrams. Input: The first line contains an integer N, the number of word pairs to check. Each of the next N lines contains two space-separated words to be checked. Output: For each pair, print \\"YES\\" if the words are anagrams, and \\"NO\\" otherwise. Constraints: 1 ≤ N ≤ 100 1 ≤ Length of each word ≤ 1000 SAMPLE INPUT 2 listen silent hello world SAMPLE OUTPUT YES NO","solution":"def are_anagrams(word1, word2): Check if two words are anagrams of each other (case insensitive). return sorted(word1.lower()) == sorted(word2.lower()) def check_anagrams(pairs): Takes a list of word pairs and returns a list of \\"YES\\" or \\"NO\\" for each pair indicating whether the words are anagrams. results = [] for word1, word2 in pairs: if are_anagrams(word1, word2): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A company gives a bonus to its employees if their efficiency is above a certain threshold. Given the efficiency of an employee, determine if they are eligible for the bonus. ------ Input Format ------ - First line will contain T, number of test cases. Then the test cases follow. - Each test case contains a single line of input, an integer E, denoting the efficiency of the employee. ------ Output Format ------ For each test case, output in a single line texttt{Eligible}, if the efficiency is greater than the threshold. Otherwise, print texttt{Not Eligible}. You may print each character of texttt{Eligible} and texttt{Not Eligible} in uppercase or lowercase (for example, texttt{ELIGIBLE}, texttt{eligible}, texttt{Not Eligible}, texttt{not eligible} will be considered identical). ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ E ≤ 100 The threshold for eligibility is 50. ------ Sample Input 1 ------ 4 30 55 50 75 ------ Sample Output 1 ------ Not Eligible Eligible Not Eligible Eligible ------ Explanation 1 ------ Test Case 1: The efficiency is 30, which is less than 50. Therefore, the employee is not eligible for the bonus. Test Case 2: The efficiency is 55, which is greater than 50. Therefore, the employee is eligible for the bonus. Test Case 3: The efficiency is 50, which is equal to 50. Therefore, the employee is not eligible for the bonus. Test Case 4: The efficiency is 75, which is greater than 50. Therefore, the employee is eligible for the bonus.","solution":"def check_bonus_eligibility(test_cases): threshold = 50 results = [] for efficiency in test_cases: if efficiency > threshold: results.append(\\"Eligible\\") else: results.append(\\"Not Eligible\\") return results"},{"question":"You are given an integer array A of length N. Initially, every element in the array is 0. You need to handle mbox{Q} queries, where each query is of the form `L R X`. For each query, you need to increment every element in the subarray from index L to R (both inclusive) by X. After processing all the queries, output the final state of the array. Input Format The first line consists of two single space-separated integers N and mbox{Q}, the length of the array A and the number of queries, respectively. The next mbox{Q} lines describe the queries in the form mbox{L} mbox{R} mbox{X}, where mbox{L} and mbox{R} (1-based index) define the subarray range and mbox{X} is the increment value. Constraints 1 leq N leq 10^5 1 leq Q leq 10^5 1 leq L leq R leq N 1 leq X leq 10^6 Output Format Output the final state of the array after processing all the queries. Each element should be separated by a single space. Sample Input 5 3 1 3 2 2 4 3 1 5 1 Sample Output 3 6 6 4 1 Explanation After processing the first query, the array is [2 2 2 0 0]. After processing the second query, the array is [2 5 5 3 0]. After processing the third query, the array is [3 6 6 4 1].","solution":"def process_queries(N, Q, queries): A = [0] * N # Initialize the array with zeros for L, R, X in queries: for i in range(L-1, R): A[i] += X return A"},{"question":"Tom loves solving coding challenges and he\'s recently learned about prime numbers. He’s interested in finding out how many prime numbers exist within a certain range. Help Tom by writing a function that calculates the number of prime numbers between two given integers, inclusive. To make the task more interesting, Tom would also like to know the sum of these prime numbers within that range. Function Signature: ```python def count_and_sum_primes_in_range(a: int, b: int) -> (int, int): ``` Input: - The function receives two space-separated integers, `a` and `b` (1 ≤ a ≤ b ≤ 10^6), indicating the range [a, b]. Output: - The function should return a tuple containing two integers: 1. The number of prime numbers within the range [a, b]. 2. The sum of the prime numbers within the range [a, b]. Examples: Input: ```text 10 20 ``` Output: ```text (4, 60) ``` Explanation: - The prime numbers between 10 and 20 are 11, 13, 17, and 19. - There are 4 prime numbers and their sum is 60. Input: ```text 1 10 ``` Output: ```text (4, 17) ``` Explanation: - The prime numbers between 1 and 10 are 2, 3, 5, and 7. - There are 4 prime numbers and their sum is 17. Notes: - Remember that a prime number is a positive integer greater than 1 that has no positive integer divisors other than 1 and itself. - Be sure to handle the range efficiently, taking into account the potentially large values for `a` and `b`. Consider using an efficient algorithm to precompute prime numbers up to the maximum possible `b` to answer the queries promptly.","solution":"def count_and_sum_primes_in_range(a: int, b: int) -> (int, int): Returns a tuple containing the number of prime numbers and their sum within the range [a, b]. def sieve(n: int): Utilize the Sieve of Eratosthenes to find all primes up to and including n. is_prime = [True] * (n + 1) p = 2 while (p * p <= n): if (is_prime[p] == True): for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 is_prime[0] = is_prime[1] = False return {i for i in range(n + 1) if is_prime[i]} primes = sieve(b) count = 0 total_sum = 0 for num in range(a, b + 1): if num in primes: count += 1 total_sum += num return (count, total_sum)"},{"question":"A bookstore is organizing a special sale event where customers can purchase book packs. Each pack contains a specific number of books of various genres. The bookstore wants to maximize the total unique genres purchased by customers by selecting certain packs. You are given the number of packs N, and for each pack, the genres of books contained in it. Each genre is represented by a unique integer. Find the maximum number of unique genres that can be purchased by selecting a subset of the given packs. -----Constraints----- - 1 leq N leq 20 - 1 leq |genres_i| leq 15, where genres_i is the set of genres in the i-th pack - 1 leq genres_i[j] leq 1000, where genres_i[j] is a genre in the i-th pack -----Input----- Input is given from Standard Input in the following format: N genres_1 genres_2 ... genres_N Each `genres_i` is given as a space-separated list of integers representing the genres in the i-th pack -----Output----- Print the maximum number of unique genres that can be obtained by selecting a subset of the packs. -----Sample Input----- 3 1 2 2 3 3 4 -----Sample Output----- 4 By selecting all three packs, we can get genres {1, 2, 3, 4}, which is a total of 4 unique genres.","solution":"from itertools import combinations def max_unique_genres(n, packs): Computes the maximum number of unique genres that can be obtained by selecting a subset of the packs. max_genres = 0 # Iterate over all possible subsets of packs for r in range(1, n + 1): for subset in combinations(packs, r): unique_genres = set() for pack in subset: unique_genres.update(pack) max_genres = max(max_genres, len(unique_genres)) return max_genres def parse_input(input_data): lines = input_data.strip().split(\'n\') n = int(lines[0]) packs = [set(map(int, line.split())) for line in lines[1:]] return n, packs"},{"question":"In this coding challenge, you will write a function that takes a list of integers and moves all the zeros to the end while maintaining the relative order of the non-zero elements. ```python # Moves all zeros to the end while preserving the order of 1, 3, and 12 move_zeros([0, 1, 0, 3, 12]) # => [1, 3, 12, 0, 0] ``` The function should modify the list in-place, and you are not allowed to make a copy of the list. Try to achieve this with minimal extra space. Good luck!","solution":"def move_zeros(nums): Moves all zeros to the end of the list while maintaining the order of non-zero elements. Modifies the list in-place. :param nums: List of integers last_non_zero_found_at = 0 for i in range(len(nums)): if nums[i] != 0: nums[last_non_zero_found_at], nums[i] = nums[i], nums[last_non_zero_found_at] last_non_zero_found_at += 1"},{"question":"Given a list of integers, you need to find the length of the longest increasing subsequence (LIS). The longest increasing subsequence is defined as a subsequence of the list where elements are in strictly increasing order. For example, if the list is [3, 10, 2, 1, 20], the LIS is [3, 10, 20], which has a length of 3. Another example, for the list [3, 2], the LIS is [3] or [2], both having length of 1. You need to write a function to determine this length. Example 1: Input: arr = [3, 10, 2, 1, 20] Output: 3 Explanation: The LIS are [3, 10, 20]. Example 2: Input: arr = [3, 2] Output: 1 Explanation: The LIS are [3] or [2]. Example 3: Input: arr = [50, 3, 10, 7, 40, 80] Output: 4 Explanation: The LIS are [3, 7, 40, 80]. Your task is to write a function: ```python def longest_increasing_subsequence(arr: List[int]) -> int ``` that takes a list of integers `arr` and returns the length of the longest increasing subsequence. Expected Time Complexity: O(N log N) Expected Space Complexity: O(N) Constraints: - 1 <= N <= 10^5 - -10^9 <= arr[i] <= 10^9","solution":"def longest_increasing_subsequence(arr): Returns the length of the longest increasing subsequence in the list `arr`. if not arr: return 0 from bisect import bisect_left lis = [] # this will store the current longest increasing subsequence for num in arr: pos = bisect_left(lis, num) if pos == len(lis): lis.append(num) else: lis[pos] = num return len(lis)"},{"question":"A florist has recently opened a store and wants to create bouquets using a specific technique. Each bouquet is made up of flowers represented by lowercase letters \'a\' to \'z\'. A bouquet is identified by a string where each character represents a type of flower. The beauty of a bouquet is determined by the uniqueness of flower combinations, not the frequency of each flower type. The florist received several requests and wants to know if she can rearrange the flowers in a bouquet to form another requested bouquet. To assist her, you need to write a program that tells her whether each pair of requested bouquets can be rearranged to form each other. ------ Input ------ The first line contains an integer T, the number of test cases. The next T lines each contain two space-separated strings A and B, representing the bouquets. ------ Output ------ For each test case, output a single line containing \\"YES\\" if the florist can rearrange the flowers in bouquet A to form bouquet B and vice-versa, otherwise output \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |A|, |B| ≤ 1000 ----- Sample Input 1 ------ 3 rose sore lily ylli tulip tulips ----- Sample Output 1 ------ YES YES NO ----- Explanation 1 ------ Example case 1: \\"rose\\" can be rearranged to form \\"sore\\", so the answer is \\"YES\\". Example case 2: \\"lily\\" can be rearranged to form \\"ylli\\", so the answer is \\"YES\\". Example case 3: \\"tulip\\" cannot be rearranged to form \\"tulips\\" since they have different lengths, hence the answer is \\"NO\\".","solution":"def can_rearrange_bouquets(test_cases): results = [] for A, B in test_cases: if sorted(A) == sorted(B): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given an integer array a of length n. You can perform operations to make all elements of the array equal. In one operation, you can choose any two adjacent elements in the array and increase or decrease both elements by 1. Determine the minimum number of operations required to make all elements of the array equal. -----Input----- The first line contains a single integer t (1 leq t leq 10) — the number of test cases. The next 2t lines contain descriptions of the test cases. The first line of the description of each test case contains a single integer n (2 leq n leq 1000) — the length of the array. The second line of the description of each test case contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 1000) — the elements of the array. -----Output----- For each test case print a single integer — the minimum number of operations required to make all elements of the array equal. -----Examples----- Input 3 3 3 1 2 4 1 2 1 2 2 4 7 Output 2 1 1 -----Note----- In the first test case, you can choose elements at positions 1 and 2 and increase them by 1 twice: [3, 1, 2] -> [4, 2, 2] -> [4, 3, 3] -> [4, 4, 4]. In the second test case, you can choose elements at positions 2 and 3 and increase them by 1 once: [1, 2, 1, 2] -> [1, 3, 2, 2] -> [2, 2, 2, 3]. In the third test case, you can choose elements at positions 1 and 2 and decrease them by 1 once: [4, 7] -> [3, 6] -> [4, 4].","solution":"def min_operations_to_equalize(n, a): Returns the minimum number of operations to make all elements in the array \'a\' of length \'n\' equal # Find the maximum and minimum elements in the array max_elem = max(a) min_elem = min(a) # Number of operations to make all elements equal will be max_elem - min_elem return max_elem - min_elem def solve(test_cases): Solves the overall problem for multiple test cases. results = [] for case in test_cases: n, a = case results.append(min_operations_to_equalize(n, a)) return results"},{"question":"John the Farmer has a barn full of animals. Each animal belongs to one of several species. John needs to count the number of animals of each species within different segments of his barn to prepare for a barn inventory. Given a string `barn` of length `n` (n is the length of the string), consisting only of lowercase letters where each letter represents a different animal species, and `m` queries. Each query is described by a pair of integers `li`, `ri` (1 ≤ li < ri ≤ n). The answer to the query `li, ri` is the count of distinct species in the segment from `barn[li-1]` to `barn[ri-1]`. Help John, solve the problem. # Input - The first line contains the string `barn` of length `n` (2 ≤ n ≤ 10^5). It is guaranteed that the given string only consists of lowercase letters. - The next line contains an integer `m` (1 ≤ m ≤ 10^5) — the number of queries. Each of the next `m` lines contains the description of the corresponding query. The `i-th` line contains integers `li, ri` (1 ≤ li < ri ≤ n). # Output Print `m` integers — the answers to the queries in the order in which they are given in the input. # Sample Input ``` abcabc 3 1 3 2 5 1 6 ``` # Sample Output ``` 3 3 3 ``` # Explanation For the first query (1, 3), we have the segment \\"abc\\" with 3 distinct species (\'a\', \'b\', and \'c\'). For the second query (2, 5), we have the segment \\"bcab\\" with 3 distinct species (\'b\', \'c\', and \'a\'). For the third query (1, 6), we have the entire string \\"abcabc\\" with 3 distinct species (\'a\', \'b\', and \'c\').","solution":"def distinct_species_in_barn(barn, queries): For each query, returns the count of distinct species within the specified segment of the barn. result = [] for li, ri in queries: segment = barn[li-1:ri] count_distinct = len(set(segment)) result.append(count_distinct) return result"},{"question":"Given an array of integers, return an array containing only the prime numbers from the original array, in ascending order. For example, considering the input array `[3, 12, 5, 16, 7, 11]`, the result would be `[3, 5, 7, 11]`. `find_primes([3, 12, 5, 16, 7, 11]) = [3, 5, 7, 11]` Write a function `find_primes(arr)` that takes an array of integers as input and returns an array of prime numbers sorted in ascending order.","solution":"def is_prime(n): if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n ** 0.5) + 1, 2): if n % i == 0: return False return True def find_primes(arr): primes = [x for x in arr if is_prime(x)] return sorted(primes)"},{"question":"You are on a mission to Mars and have been tasked with developing a simulation to model the distribution of resources across the Martian base. The base consists of r different regions, and each region initially has a certain amount of resources. Your task is to answer queries about the redistribution of resources between regions. Each query can be of two types: 1. Given a starting region, an ending region, and an amount, redistribute the specified amount of resources from the starting region to the ending region. 2. Given a region, output the total remaining resources in that region. Input The first line contains the integers r and q (1 ≤ r, q ≤ 10000) — the number of regions and the number of queries, respectively. The second line contains r integers — the initial amounts of resources in each region. Next q lines describe the queries. Each query is described by three or four integers. - For a query of the first type, the format is \\"1 start end amount\\" (1 ≤ start, end ≤ r, 0 ≤ amount ≤ 10000). - For a query of the second type, the format is \\"2 region\\" (1 ≤ region ≤ r). Output For each query of the second type, output the remaining resources in the specified region. Examples Input 5 4 10 20 30 40 50 1 1 3 10 2 3 2 1 1 3 5 10 Output 40 0 In the example, the initial resources are [10, 20, 30, 40, 50]. * The first query redistributes 10 resources from region 1 to region 3, resulting in [0, 20, 40, 40, 50]. * The second query outputs the resources in region 3, which are 40. * The third query outputs the resources in region 1, which are 0. * The fourth query redistributes 10 resources from region 3 to region 5, resulting in [0, 20, 30, 40, 60].","solution":"def mars_resource_distribution(r, q, initial_resources, queries): resources = initial_resources[:] results = [] for query in queries: if query[0] == 1: start, end, amount = query[1] - 1, query[2] - 1, query[3] resources[start] -= amount resources[end] += amount elif query[0] == 2: region = query[1] - 1 results.append(resources[region]) return results"},{"question":"A company has a list of employee sales records and wants to identify its top performer. You are given a list of sales records, where each record is a tuple containing the employee\'s name and the number of sales they made. Your task is to write a function `top_performer(sales_records)` that returns the name of the employee with the highest number of sales. In case of a tie, return the employee who appears first in the list. For example: ```python sales_records = [ (\\"Alice\\", 50), (\\"Bob\\", 75), (\\"Charlie\\", 75), (\\"Diana\\", 60) ] top_performer(sales_records) # should return \\"Bob\\" ``` Additional examples: ```python sales_records = [ (\\"John\\", 120), (\\"Jane\\", 115), (\\"Doe\\", 130) ] top_performer(sales_records) # should return \\"Doe\\" sales_records = [ (\\"Anna\\", 40), (\\"Tom\\", 40) ] top_performer(sales_records) # should return \\"Anna\\" ``` Implement the function to solve the problem.","solution":"def top_performer(sales_records): Given a list of sales records, where each record is a tuple (employee name, sales count), returns the employee name with the highest sales count. In case of a tie, returns the first employee with the highest count. if not sales_records: return None top_employee = sales_records[0][0] top_sales = sales_records[0][1] for name, sales in sales_records: if sales > top_sales: top_sales = sales top_employee = name elif sales == top_sales: # Keeping record of first appearing top sales person continue return top_employee"},{"question":"Emma is trying to decorate her new apartment and has a variety of paintings that she can hang on her walls. Each painting can only be placed in specific rooms and has a unique value associated with it. Since she wants her apartment to look aesthetically pleasing, she doesn\'t want any two adjacent rooms to have paintings with the same dominant color. There are N rooms in Emma\'s apartment and each painting has a dominant color, which can be one of R different colors. Each room can accommodate exactly one painting and the adjacent rooms should not have paintings of the same dominant color. As a talented coder, you have been asked to help Emma find the way to decorate her apartment such that the sum of the values of the paintings she hangs is maximized while adhering to her condition on dominant colors. Input Format: The first line contains an integer T, the number of test cases. Each test case starts with two integers N and R, the number of rooms and the number of possible dominant colors. The next N lines describe the paintings available for each room, each line starting with an integer M (the number of paintings available for that room), followed by M pairs of integers (color value), where color specifies the dominant color of the painting and value specifies its value. Output Format: For each test case, output the maximum sum of the values of the paintings Emma can hang in each room while satisfying the given condition. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 1 ≤ R ≤ 20 1 ≤ M ≤ 50 1 ≤ color ≤ R 1 ≤ value ≤ 10^4 SAMPLE INPUT 1 3 3 2 1 100 2 200 3 1 300 2 400 3 500 2 2 150 3 250 SAMPLE OUTPUT 850 Explanation: Emma can decorate her rooms by choosing the following paintings: - Room 1: Painting with color 2 and value 200 - Room 2: Painting with color 3 and value 500 - Room 3: Painting with color 2 and value 150 This maximizes the total value of the paintings while ensuring no two adjacent rooms have paintings with the same dominant color, leading to a total value of 200 + 500 + 150 = 850.","solution":"def max_painting_value(T, cases): results = [] for case in cases: N, R, paintings = case # Initialize DP table dp = [[0] * R for _ in range(N)] room_paintings = [] for room, painting_data in enumerate(paintings): M = painting_data[0] room_paintings.append(painting_data[1:]) # Fill the DP table for room in range(N): for color in range(R): if room == 0: dp[0][color] = 0 for i in range(0, len(room_paintings[room]), 2): if room_paintings[0][i] - 1 == color: # -1 because color is 1-based dp[0][color] = max(dp[0][color], room_paintings[0][i+1]) else: dp[room][color] = 0 for i in range(0, len(room_paintings[room]), 2): if room_paintings[room][i] - 1 == color: max_prev_value = 0 for prev_color in range(R): if prev_color != color: max_prev_value = max(max_prev_value, dp[room-1][prev_color]) dp[room][color] = max_prev_value + room_paintings[room][i+1] # Get the maximum value for the last room result = max(dp[N-1]) results.append(result) return results"},{"question":"As a supply chain analyst, you need to ensure the seamless operation of a warehouse management system. One of your key tasks is to monitor and manage the inventory levels of various products. You\'ll be provided with the initial quantities of different items in stock, and then a log of transactions that either add to or remove from this stock. Your job is to write a program that will process these transactions and output the final quantities in stock for each product. # Input: - The first line contains an integer `n` (1 ≤ n ≤ 100), the number of different products. - The second line contains `n` integers, the initial quantities (≥ 0) of each product. - The third line contains an integer `m` (1 ≤ m ≤ 1000), the number of transactions. - The following `m` lines each contain a transaction in the form of two integers: - A positive integer `k` (1 ≤ k ≤ n) indicating which product is being transacted (1-indexed). - A negative or positive integer `q` (−500 ≤ q ≤ 500) representing the quantity added (if positive) or removed (if negative). It is guaranteed that you will never remove more than the current stock. # Output: For each product, output its final quantity in stock on a single line. # Example: Input: ``` 4 100 200 150 175 6 1 -50 2 120 3 -30 4 70 1 20 3 -50 ``` Output: ``` 70 320 70 245 ``` In this example, the warehouse initially has 100 units of product 1, 200 units of product 2, 150 units of product 3, and 175 units of product 4. After processing the 6 transactions, the final stock levels are 70, 320, 70, and 245 for products 1, 2, 3, and 4, respectively.","solution":"def manage_inventory(n, initial_quantities, m, transactions): Returns the final quantities in stock for each product after processing the transactions. Parameters: n (int): number of different products initial_quantities (list of int): initial quantities of each product m (int): number of transactions transactions (list of tuple): list of transactions, each represented by (product_index, quantity_change) Returns: list of int: final quantities of each product # Process each transaction for product_index, quantity_change in transactions: # Adjust the quantity for the specified product initial_quantities[product_index - 1] += quantity_change # Return the final quantities return initial_quantities"},{"question":"You are given a list of integers. You can perform the following operation an unlimited number of times: 1. Select any integer `x` from the list and replace it with `x - 1`. For each test case, find the minimum number of operations needed to make all integers in the list equal. -----Input----- The first line contains an integer t (1 le t le 100), the number of test cases. Each test case starts with an integer n (1 le n le 100), the number of integers in the list. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 1000). -----Output----- For each test case, output the minimum number of operations required to make all integers in the list equal. -----Examples----- Input 3 3 1 2 3 4 4 4 4 4 5 10 10 10 1 2 Output 3 0 28 -----Note----- In the first test case, you can perform the following operations: - Reduce the third element (3) to 2 (1 operation). - Reduce the second element (2) to 1 (1 operation). - Reduce the new second element (2) to 1 (1 operation). In the second test case, all integers are already equal, so no operations are needed. In the third test case, you perform the following operations: - Reduce three elements with value 10 to 1 (27 operations in total, each reduced by 9). - Reduce the element with value 2 to 1 (1 operation).","solution":"def min_operations_to_equalize(test_cases): results = [] for case in test_cases: n, arr = case min_val = min(arr) operations = sum(a - min_val for a in arr) results.append(operations) return results"},{"question":"# Task You are given a list of timestamps where a particular event took place. Each timestamp is in the format `YYYY-MM-DD HH:MM:SS`. Your task is to determine the total number of distinct days on which events occurred. # Example For `timestamps = [\\"2023-04-15 12:34:56\\", \\"2023-04-15 15:45:12\\", \\"2023-04-16 08:00:00\\"]`, the output should be `2`. For `timestamps = [\\"2023-01-01 00:00:01\\", \\"2023-01-01 23:59:59\\", \\"2023-12-31 12:34:56\\"]`, the output should be `2`. For `timestamps = [\\"2023-05-05 05:05:05\\"]`, the output should be `1`. # Input/Output - `[input]` array of strings `timestamps` An array of timestamps in the format `YYYY-MM-DD HH:MM:SS`. - `[output]` an integer The number of distinct days on which events occurred.","solution":"def count_distinct_days(timestamps): Given a list of timestamps, returns the total number of distinct days on which events occurred. Args: timestamps (list of str): List of timestamps in the format \'YYYY-MM-DD HH:MM:SS\'. Returns: int: Number of distinct days with events. days = set() for timestamp in timestamps: date = timestamp.split()[0] days.add(date) return len(days)"},{"question":"In a company, employees can work either in the morning shift or in the evening shift. The morning shift starts from 9:00 AM to 5:00 PM, and the evening shift starts from 6:00 PM to 2:00 AM the next day. Each working day consists of exactly 8 hours. The company wants to calculate the total time worked by an employee in hours and minutes. Given the start and end shift times in 24-hour notation, calculate the total time worked by the employee. -----Input----- The input consists of two times in 24-hour notation: the first line contains the start time in the format \\"HH MM\\", and the second line contains the end time in the format \\"HH MM\\". These denote the starting and ending time of an employee\'s shift. -----Output----- The output should contain the total working time in the format: \\"X hours Y minutes\\", where X and Y are the total hours and minutes worked. -----Examples----- Sample Input 1: 9 0 17 0 Sample Output 1: 8 hours 0 minutes Sample Input 2: 18 30 2 30 Sample Output 2: 8 hours 0 minutes","solution":"def calculate_working_time(start_h, start_m, end_h, end_m): Calculate the total working time given the start and end times. It returns the total time in hours and minutes. # Convert the start and end times to minutes from midnight start_total_minutes = start_h * 60 + start_m end_total_minutes = end_h * 60 + end_m # If end total minutes is less than start total minutes, it means the end time is on the next day if end_total_minutes <= start_total_minutes: end_total_minutes += 24 * 60 # add 24 hours in minutes to the end time # Calculate the total duration in minutes total_minutes_worked = end_total_minutes - start_total_minutes worked_hours = total_minutes_worked // 60 worked_minutes = total_minutes_worked % 60 return f\\"{worked_hours} hours {worked_minutes} minutes\\""},{"question":"You are given a list of students with their names and scores in a test. Your task is to write a program to identify the students who scored above a certain threshold. -----Input----- Input consists of a single integer N (1 le N le 100) indicating the number of test cases that follow. Each test case consists of the following: - An integer T (1 le T le 100) indicating the threshold score. - An integer M (1 le M le 100) indicating the number of students. - M lines follow, each containing a student\'s name (single word) and their score (an integer between 0 and 100), separated by a space. -----Output----- For each test case, output the names of the students who scored above the threshold, one per line. If no student scored above the threshold, output \\"No students\\" for that test case. The students’ names should be printed in the order they appear in the input. -----Examples----- Sample Input: 1 75 3 Alice 80 Bob 70 Carol 77 Sample Output: Alice Carol","solution":"def above_threshold(test_cases): results = [] for case in test_cases: T, students = case[\'threshold\'], case[\'students\'] names_above_threshold = [student[\'name\'] for student in students if student[\'score\'] > T] if names_above_threshold: results.append(\'n\'.join(names_above_threshold)) else: results.append(\\"No students\\") return \'n\'.join(results)"},{"question":"In a programming competition, participants are required to solve a problem using as few instructions as possible. Given a string S consisting of only lowercase English letters, participants need to determine whether the string contains both \'a\' and \'z\'. If the string contains both characters, the result is \\"Success\\", otherwise \\"Fail\\". -----Constraints----- - S is a string of length between 1 and 1000 (inclusive). - Each character of S is a lowercase English letter (\'a\'-\'z\'). -----Input----- Input is given from Standard Input in the following format: S -----Output----- Print \\"Success\\" if S contains both \'a\' and \'z\', and \\"Fail\\" otherwise. -----Sample Input----- alphabet -----Sample Output----- Fail -----Sample Input----- amazing -----Sample Output----- Success","solution":"def check_az(S): Returns \\"Success\\" if the string S contains both \'a\' and \'z\', otherwise returns \\"Fail\\". if \'a\' in S and \'z\' in S: return \\"Success\\" else: return \\"Fail\\""},{"question":"# Task Consider a matrix `mat` of size `n x m` filled with non-negative integers. You are located at the top-left corner of the matrix (i.e., `mat[0][0]`). Your goal is to reach the bottom-right corner of the matrix (i.e., `mat[n-1][m-1]`) by moving only to the right or down. You need to calculate the minimum path sum from the top-left corner to the bottom-right corner, where the path sum is defined as the sum of the cell values along your chosen path. Write a function that, given an `n x m` matrix `mat`, returns the minimum path sum to reach the bottom-right corner. # Example For `mat = [[1, 3, 1], [1, 5, 1], [4, 2, 1]]`, the output should be `7`. Explanation: ``` The path that gives the minimum sum is 1 → 3 → 1 → 1 → 1, which totals 7. ``` # Input/Output - [input] matrix `mat` A list of `n` lists, each containing `m` non-negative integers representing the input matrix. Constraints: `1 ≤ n, m ≤ 100,` `0 ≤ mat[i][j] ≤ 100`. - [output] an integer The minimum path sum from the top-left corner to the bottom-right corner of the matrix.","solution":"def min_path_sum(mat): Calculate the minimum path sum from the top-left to bottom-right corner of the matrix. Args: mat: List[List[int]] - 2D list of non-negative integers representing the input matrix. Returns: int - the minimum path sum. n = len(mat) m = len(mat[0]) # Initialize a dp array with the same dimensions as mat dp = [[0] * m for _ in range(n)] # Set the initial value dp[0][0] = mat[0][0] # Fill the first row (can only come horizontally) for j in range(1, m): dp[0][j] = dp[0][j-1] + mat[0][j] # Fill the first column (can only come vertically) for i in range(1, n): dp[i][0] = dp[i-1][0] + mat[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + mat[i][j] return dp[n-1][m-1]"},{"question":"Harshland\'s food bank has recently received a shipment of food supplies and is planning to distribute meals to the most needy citizens. There are N families in Harshland, and each family i has m_i members. The food bank can provide up to D meals per day. A family will only receive food if they can be served together, meaning the food bank cannot split the servings for a family across different days. Given this, find the smallest number of days needed to distribute meals to all the families. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two space-separated integers N and D. - The second line contains N space-separated integers m_1, m_2, ldots, m_N denoting the number of members in each family. -----Output----- For each test case, print a single line containing one integer -- the smallest required number of days. -----Constraints----- - 1 le T le 10 - 1 le N le 10^4 - 1 le D le 10^5 - 1 le m_i le 100 for each valid i -----Subtasks----- Subtask #1 (100 points): original constraints -----Example Input----- 2 5 10 3 8 2 7 5 3 5 10 5 5 -----Example Output----- 4 3 -----Explanation----- Example case 1: To minimize the number of days, we can distribute the meals in the following manner: - Day 1: Serve family 1 (3 members) - Day 2: Serve family 2 (8 members) - Day 3: Serve family 3 (2 members) - Day 4: Serve family 4 (7 members) Note that family 5 (5 members) could be served on any day but requires a separate day since it makes the day’s servings exceed D. Example case 2: We need three days as each family must be served separately due to the constraint that the meals for an individual family cannot be split across days.","solution":"def minimum_days_needed(T, test_cases): results = [] for t in range(T): N, D = test_cases[t][0] family_members = test_cases[t][1] days = 0 for members in family_members: days += 1 results.append(days) return results # Input reading helper function def read_input(input_str): lines = input_str.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] idx = 1 for _ in range(T): N, D = map(int, lines[idx].split()) family_members = list(map(int, lines[idx + 1].split())) test_cases.append(((N, D), family_members)) idx += 2 return T, test_cases # Example usage: input_str = 2 5 10 3 8 2 7 5 3 5 10 5 5 T, test_cases = read_input(input_str) print(minimum_days_needed(T, test_cases))"},{"question":"Given a list of integers, return a new list such that each element at index i of the new list is the product of all the numbers in the original list except the one at i. Example 1: Input: nums = [1, 2, 3, 4] Output: [24, 12, 8, 6] Explanation: Output at index 0 is 2 * 3 * 4 = 24, at index 1 is 1 * 3 * 4 = 12, at index 2 is 1 * 2 * 4 = 8, and at index 3 is 1 * 2 * 3 = 6. Example 2: Input: nums = [2, 3, 4, 5] Output: [60, 40, 30, 24] Explanation: Output at index 0 is 3 * 4 * 5 = 60, at index 1 is 2 * 4 * 5 = 40, at index 2 is 2 * 3 * 5 = 30, and at index 3 is 2 * 3 * 4 = 24. Your Task: You don\'t need to read input or print anything. Complete the function productExceptSelf() which takes the list of integers nums and returns the new list of products as described. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 <= len(nums) <= 1000 -30 <= nums[i] <= 30 The product of any two integers in the input list should fit within a 32-bit integer.","solution":"def productExceptSelf(nums): Returns a list where each element is the product of all elements in nums except the one at its own index. length = len(nums) output = [1] * length # Calculate product of elements to the left of each index left_product = 1 for i in range(length): output[i] = left_product left_product *= nums[i] # Calculate product of elements to the right of each index and multiply right_product = 1 for i in range(length - 1, -1, -1): output[i] *= right_product right_product *= nums[i] return output"},{"question":"In a dystopian city, there are N surveillance cameras installed along a straight road. Each camera has a fixed position on the road and monitors a segment of the road that extends equally in both directions from its position. The segment length that a camera monitors is determined by its range. A protester needs to traverse this monitored road from the start point (position 0) to the end point (position L) without being detected. To achieve this, the protester wants to know if there is any section of the road that remains unmonitored by any camera or not. Your task is to determine if there exist any unmonitored sections on the road. -----Input----- The first line contains two integers N and L (1 ≤ N ≤ 10^3, 1 ≤ L ≤ 10^4) — the number of surveillance cameras and the length of the road. Each of the next N lines contains two integers p_i and r_i (0 ≤ p_i ≤ L, 1 ≤ r_i ≤ 10^4) — the position of the i-th camera and the range of the i-th camera. -----Output----- Print \\"YES\\" if there is any unmonitored section on the road, otherwise print \\"NO\\". -----Examples----- Input 3 10 2 3 8 2 5 1 Output NO Input 2 10 1 4 7 2 Output YES -----Note----- In the first test example, the segments monitored by the three cameras cover the whole road from position 0 to position 10 without any gaps. In the second example, the gaps on the road between position 5 and 6 and from position 9 to 10 remain unmonitored by any camera, hence the output is \\"YES\\".","solution":"def is_road_unmonitored(N, L, cameras): Returns whether on the road of length L there are any unmonitored sections given N cameras. Parameters: N (int): Number of cameras L (int): Length of the road cameras (list of tuples): List containing tuples with position and range of each camera. Returns: bool: True if there is an unmonitored section, False otherwise. monitored = [False] * (L + 1) for pos, ran in cameras: start = max(0, pos - ran) end = min(L, pos + ran) for i in range(start, end + 1): monitored[i] = True return not all(monitored) # Example function call print(is_road_unmonitored(3, 10, [(2, 3), (8, 2), (5, 1)])) print(is_road_unmonitored(2, 10, [(1, 4), (7, 2)]))"},{"question":"A race track has N checkpoints connected by M bidirectional roads. Each road has a fixed distance between two checkpoints. A racer wants to determine the minimum distance required to visit every checkpoint starting from any checkpoint and return to the original one, forming a cycle. Given the checkpoints and the roads, write a program to compute the shortest possible cycle that visits all checkpoints. If such a cycle does not exist, return -1. Input The first line contains two integers N and M (2 ≤ N ≤ 50, 1 ≤ M ≤ 200) - the number of checkpoints and the number of roads, respectively. Each of the next M lines contains three integers u, v, and d (1 ≤ u, v ≤ N, u ≠ v, 1 ≤ d ≤ 10^6) - denoting a road of distance d between checkpoints u and v. Output Output a single integer – the minimum distance of the cycle visiting all checkpoints, or -1 if no such cycle exists. Example Input 4 6 1 2 10 2 3 15 3 4 20 4 1 25 1 3 30 2 4 35 Output 70 Input 3 2 1 2 10 2 3 20 Output -1","solution":"import sys def tsp(N, dist): # dp[mask][i] will be the minimum cost to reach node i with the set of nodes in mask dp = [[sys.maxsize] * N for _ in range(1 << N)] dp[1][0] = 0 for mask in range(1 << N): for u in range(N): if mask & (1 << u): for v in range(N): if mask & (1 << v) == 0: dp[mask | (1 << v)][v] = min(dp[mask | (1 << v)][v], dp[mask][u] + dist[u][v]) res = min(dp[(1 << N) - 1][i] + dist[i][0] for i in range(1, N)) return res if res < sys.maxsize else -1 def shortest_cycle(N, roads): if N == 1: return 0 dist = [[sys.maxsize] * N for _ in range(N)] for u, v, d in roads: dist[u-1][v-1] = d dist[v-1][u-1] = d return tsp(N, dist) # Sample inputs to verify the implementation def main(): import sys input = sys.stdin.read data = input().split() idx = 0 N = int(data[idx]) M = int(data[idx+1]) idx += 2 roads = [] for _ in range(M): u = int(data[idx]) v = int(data[idx+1]) d = int(data[idx+2]) roads.append((u, v, d)) idx += 3 print(shortest_cycle(N, roads)) if __name__ == \\"__main__\\": main()"},{"question":"A large corporation has a main data center and several remote data centers connected by a network. The main data center can communicate directly with each remote data center, and each remote data center can communicate directly with the main data center. The company wants to ensure optimal data transfer speeds in the event of network congestion by strategically placing load balancers between the main data center and each remote data center. Each communication link between the main data center and a remote data center has a specific weight, which represents the latency of the link. The objective is to minimize the maximum latency for all communication paths by placing exactly one load balancer between the main data center and each remote data center. The load balancer will effectively split the latency into two equal parts. -----Input----- The first line contains an integer t (1 le t le 1000) — the number of test cases. For each test case: - The first line contains an integer n (1 le n le 10^5) — the number of remote data centers. - The second line contains n integers l_1, l_2, ldots, l_n (1 le l_i le 10^6), where l_i is the latency of the link between the main data center and the i-th remote data center. It is guaranteed that the sum of n over all test cases does not exceed 10^5. -----Output----- For each test case, print the minimum possible value of the maximum latency after placing one load balancer between the main data center and each remote data center. -----Examples----- Input 3 3 10 20 30 2 100 200 4 1 2 3 4 Output 15 100 2.5 -----Explanation----- For the first test case: - Place a load balancer that splits the latency of 10 into 5 and 5. - Place a load balancer that splits the latency of 20 into 10 and 10. - Place a load balancer that splits the latency of 30 into 15 and 15. The maximum latency after placing the load balancers is 15. For the second test case: - Place a load balancer that splits the latency of 100 into 50 and 50. - Place a load balancer that splits the latency of 200 into 100 and 100. The maximum latency after placing the load balancers is 100. For the third test case: - Place a load balancer that splits the latency of 1 into 0.5 and 0.5. - Place a load balancer that splits the latency of 2 into 1 and 1. - Place a load balancer that splits the latency of 3 into 1.5 and 1.5. - Place a load balancer that splits the latency of 4 into 2 and 2. The maximum latency after placing the load balancers is 2.","solution":"def minimize_max_latency(t, test_cases): results = [] for i in range(t): n, latencies = test_cases[i] max_latency = max(latencies) / 2 results.append(max_latency) return results"},{"question":"Given an even-length string, determine if it\'s possible to rearrange it to form two identical strings of equal length. Your task is to check if such a rearrangement is possible, and if so, provide one such reordering. Input format: A single line containing the input string. Output format: Print \\"IMPOSSIBLE\\" if it is not possible to rearrange the string to form two identical substrings. If it is possible, print the rearranged string. Constraints: 1 <= length of string <= 10^5 Each character of the string is a lowercase alphabet. Sample Input 01: aabbcc Sample Output 01: abcabc Explanation: The string can be rearranged to form \\"abcabc\\" which consists of two identical substrings \\"abc\\". Sample Input 02: abcabcabc Sample Output 02: IMPOSSIBLE Explanation: The string\'s length is not even, therefore it is not possible to form two identical substrings of equal length. Sample Input 03: aabbccddeeff Sample Output 03: abcdefabcdef Explanation: The string can be rearranged to form \\"abcdefabcdef\\" which consists of two identical substrings \\"abcdef\\".","solution":"from collections import Counter def rearrange_string(s): Checks if the string can be rearranged to form two identical substrings of equal length. If possible, returns one such rearrangement. Otherwise, returns \\"IMPOSSIBLE\\". if len(s) % 2 != 0: return \\"IMPOSSIBLE\\" count = Counter(s) half_length = len(s) // 2 for char in count: if count[char] % 2 != 0: return \\"IMPOSSIBLE\\" result = [] for char in count: result.extend([char] * (count[char] // 2)) return \'\'.join(result) * 2"},{"question":"Alice and Bob are playing a game with two sequences of integers. The sequences have the same length n. Alice selects any subsequence of integers from her sequence A and adds all the integers in this subsequence together to get a score, which we call S_A. Similarly, Bob selects any subsequence of integers from his sequence B and adds all the integers in this subsequence together to get a score, which we call S_B. The player with the higher score wins the game. If the scores are equal, the game is a draw. Alice and Bob always play optimally. You need to determine the outcome of the game. If Alice wins, print \\"Alice\\". If Bob wins, print \\"Bob\\". If it\'s a draw, print \\"Draw\\". Unlike the original question, assume that they can select the whole sequence or no elements at all. Input - The first line contains an integer T (1 le T le 1000) — the number of test cases. - For each test case: - The first line contains an integer n (1 le n le 100) — the length of sequences A and B. - The second line contains n integers a_1, a_2, ..., a_n (-1000 le a_i le 1000) — the elements of sequence A. - The third line contains n integers b_1, b_2, ..., b_n (-1000 le b_i le 1000) — the elements of sequence B. Output For each test case print the result of the game on a new line. Print \\"Alice\\" if Alice wins, \\"Bob\\" if Bob wins, and \\"Draw\\" if it\'s a draw. Example Input: 2 3 1 2 3 4 5 6 4 -1 -2 -3 -4 -4 -3 -2 -1 Output: Bob Draw Explanation In the first test case, the optimal score for Alice is 1 + 2 + 3 = 6, whereas the optimal score for Bob is 4 + 5 + 6 = 15. Thus, Bob wins. In the second test case, both Alice and Bob would score 0 by choosing no elements from their respective sequences since all elements are negative. Thus, the game is a draw.","solution":"def game_result(test_cases): Given a list of test cases, determine the result of the game for each case. :param test_cases: List of tuples where each tuple contains: - n: length of sequences - A: list of integers representing sequence A - B: list of integers representing sequence B :return: List of results, each being \\"Alice\\", \\"Bob\\" or \\"Draw\\" results = [] for case in test_cases: n, A, B = case max_A = max(sum(A), 0) max_B = max(sum(B), 0) if max_A > max_B: results.append(\\"Alice\\") elif max_B > max_A: results.append(\\"Bob\\") else: results.append(\\"Draw\\") return results def parse_input(input_text): Parses the input text into a structured format. lines = input_text.split(\\"n\\") T = int(lines[0]) test_cases = [] offset = 1 for _ in range(T): n = int(lines[offset]) A = list(map(int, lines[offset + 1].split())) B = list(map(int, lines[offset + 2].split())) test_cases.append((n, A, B)) offset += 3 return test_cases def print_results(results): Prints the results line by line. for result in results: print(result)"},{"question":"You are given a string S containing only lowercase English letters. Determine the length of the shortest substring that can be removed such that the remaining string contains no two adjacent characters that are the same. ------ Input Format ------ - The first line contains an integer T denoting the number of test cases. The T test cases then follow. - The first line of each test case contains an integer N. - The second line of each test case contains a string S of length N. ------ Output Format ------ For each test case, output on a new line the required length of the shortest removable substring. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 10^5 S consists only of lowercase English letters. - Sum of N over all cases won\'t exceed 10^6. ----- Sample Input 1 ------ 2 5 aabcc 3 aaa ----- Sample Output 1 ------ 2 2 ----- Explanation 1 ------ Test case 1: Removing the substring \\"aa\\" or \\"cc\\" from the string \\"aabcc\\" results in \\"bcc\\" or \\"aab\\", both of which have no adjacent characters the same. Test case 2: Removing the substring \\"aa\\" (the first 2 characters of \\"aaa\\") leaves the string \\"a\\", which has no adjacent characters the same.","solution":"def shortest_removable_substring_length(S): Given a string S, find the length of the shortest substring that can be removed such that the remaining string contains no two adjacent characters that are the same. n = len(S) min_length = n for i in range(n - 1): if S[i] == S[i + 1]: min_length = 2 # The smallest required substring can have length 2 return min_length def solve(test_cases): results = [] for S in test_cases: results.append(shortest_removable_substring_length(S)) return results"},{"question":"You are developing a basic compiler for a new programming language and need to implement an initial feature to check the validity of parentheses in expressions. The language supports `(`, `)`, `{`, `}`, `[` and `]` as parentheses symbols. Your task is to write a function that takes a string containing these symbols and others and determines whether the parentheses are balanced. An expression is considered balanced if: 1. Every opening parenthesis has a corresponding closing parenthesis of the same type. 2. Parentheses are properly nested. You need to determine if the input string is valid based on the above conditions and return \\"Yes\\" if the expression is balanced and \\"No\\" otherwise. Input The input contains a single string of length n (1 ≤ n ≤ 200,000) which includes `(`, `)`, `{`, `}`, `[` and `]`, along with other characters such as letters and digits. Output Print \\"Yes\\" if the parentheses in the string are balanced and \\"No\\" otherwise. Examples Input ``` a*(b+c)-{d/e} ``` Output ``` Yes ``` Input ``` (a*[b-c]+{d/e} ``` Output ``` No ``` Input ``` a*(b+c)]+{d/e} ``` Output ``` No ```","solution":"def is_balanced(expression: str) -> str: Determines if the input string has balanced parentheses. Args: expression (str): The input string containing parentheses and other characters. Returns: str: \\"Yes\\" if the parentheses are balanced, \\"No\\" otherwise. stack = [] matching_parentheses = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in expression: if char in matching_parentheses.values(): # if it is one of \'(\', \'{\', \'[\' stack.append(char) elif char in matching_parentheses: # if it is one of \')\', \'}\', \']\' if not stack or stack[-1] != matching_parentheses[char]: return \\"No\\" stack.pop() return \\"Yes\\" if not stack else \\"No\\""},{"question":"Given an array of strings where each string represents a possible vote for one of the candidates in an election. Your task is to determine the winner of the election. The winner is the candidate who has received the most votes. If there is a tie (i.e., multiple candidates have the highest number of votes), return the lexicographically smallest name among the top candidates. ------ Input Format ------ - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains an integer N, the number of votes. - The next N lines each contain a single string representing a vote for a candidate. ------ Output Format ------ - For each test case, print the name of the winning candidate. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ |s| ≤ 100 (where s is the length of the candidate\'s name) All candidate names consist of lowercase English letters. ------ Sample Input 1 ------ 2 3 alice bob alice 4 john john jack jack ------ Sample Output 1 ------ alice jack ------ Explanation 1 ------ Test Case 1: - Alice receives 2 votes, and Bob receives 1 vote. Hence, Alice wins. Test Case 2: - John and Jack both receive 2 votes. Between John and Jack, Jack is lexicographically smaller. Hence, Jack wins.","solution":"def find_winner(candidates): from collections import defaultdict vote_count = defaultdict(int) for candidate in candidates: vote_count[candidate] += 1 # Find the candidate(s) with the maximum votes max_votes = max(vote_count.values()) top_candidates = [name for name, votes in vote_count.items() if votes == max_votes] # Return the lexicographically smallest candidate among the top candidates return min(top_candidates) def determine_winners(test_cases): results = [] for votes in test_cases: results.append(find_winner(votes)) return results"},{"question":"Given an array of non-negative integers, you are tasked with arranging these integers such that they form the largest possible number. The result should be returned as a string. You should not consider the leading zeros in the resulting string. If the result is a zero, the function should just return \\"0\\". Input - The first line of input contains an integer T, denoting the number of test cases. - For each test case, the first line contains an integer n, denoting the number of integers in the array. - The second line contains n non-negative integers represented as space-separated values. Output - For each test case, output the largest value that can be formed by arranging the integers. Constraints - 1 ≤ T ≤ 100 - 1 ≤ n ≤ 100 - 0 ≤ each integer ≤ 10^9 Note Multiple test cases are independent of each other. SAMPLE INPUT 3 3 10 2 9 4 3 30 34 5 9 2 1 0 SAMPLE OUTPUT 9210 9534330 10 Explanation In the first test case, combining the integers in the order 9, 2, and 10 forms the largest number \\"9210\\". In the second test case, the order is 9, 5, 34, 3, 30, which forms \\"9534330\\". In the third test case, the order is 1 followed by 0, resulting in \\"10\\".","solution":"from functools import cmp_to_key def compare(x, y): Helper comparison function that determines the order of two strings x and y such that the combination x + y or y + x forms a larger number. if x + y > y + x: return -1 else: return 1 def largest_number(arr): Takes an array of non-negative integers and arranges them such that they form the largest possible number. # Convert all integers to strings for ease of comparison. arr = list(map(str, arr)) # Sort array with custom comparator. arr.sort(key=cmp_to_key(compare)) # Join all numbers to form the largest number. largest_num = \'\'.join(arr) # Edge case: If the number consists of only zeros. if largest_num[0] == \'0\': return \'0\' return largest_num def handle_multiple_test_cases(T, test_cases): Handles multiple test cases and returns the largest number for each case. results = [] for i in range(T): n, arr = test_cases[i] largest_num = largest_number(arr) results.append(largest_num) return results"},{"question":"A group of people are standing in a queue to buy tickets for a movie. Each person has a certain amount of cash with them. One person from the group is selected to collect the total cash and buy the tickets for everyone. While collecting the cash, this person can only collect the cash from a contiguous subsequence of people in the queue. Given the amount of cash each person has, find the maximum total amount of cash that can be collected from any contiguous subsequence in the queue. Example 1: Input: N = 5, cash[] = {1, 2, 3, 4, 5} Output: 15 Explanation: The maximum amount of cash that can be collected from any contiguous subsequence is the sum of the entire array, which is 15. Example 2: Input: N = 5, cash[] = {-2, 1, -3, 4, -1, 2, 1, -5, 4} Output: 6 Explanation: The maximum amount of cash that can be collected from any contiguous subsequence is from the subsequence [4, -1, 2, 1], which sums to 6. Your Task: You don\'t need to read input or print anything. Complete the function max_cash() which takes the array cash[] and the size of array N as input parameters and returns the maximum amount of cash that can be collected from any contiguous subsequence. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5 -10^4 ≤ cash[i] ≤ 10^4","solution":"def max_cash(cash): Returns the maximum amount of cash that can be collected from any contiguous subsequence in the queue. Parameters: cash (list of int): Array containing the amount of cash each person has. Returns: int: Maximum amount of cash from any contiguous subsequence. max_so_far = float(\'-inf\') max_ending_here = 0 for amount in cash: max_ending_here = max_ending_here + amount if max_so_far < max_ending_here: max_so_far = max_ending_here if max_ending_here < 0: max_ending_here = 0 return max_so_far"},{"question":"In a factory, there are a number of machines working together to produce goods. Each machine can only produce one type of item at a time and each item takes a certain amount of time to produce. The factory operates in shifts, and during each shift, all machines are given specific items to produce. At the end of each shift, the inventory is updated, and everyone wants to make sure the most items are produced. Your task is to determine the maximum number of items that can be produced given the constraints of the shift time and production rate of each machine. Input: The input consists of multiple lines representing test cases. Each test case is given in the following format: M T p1 t1 p2 t2 ... pM tM Where: - M is the number of machines (1 ≤ M ≤ 1000). - T is the total time of the shift in minutes (1 ≤ T ≤ 10000). - pi is the number of each type of product machine i can produce per minute. - ti is the total production time required for machine i to produce a single item (in minutes). The end of input is indicated by a line with M = 0 and T = 0. Output: For each test case, output a single number: the maximum number of items that can be produced in one shift. Example: Input: 3 30 5 1 3 2 2 5 2 60 7 3 2 5 0 0 Output: 105 14 Explanation: - In the first test case, machine 1 can produce 5 items per minute and in a 30 minute shift, it can produce 150 items. Machine 2 produces 3 items every 2 minutes, so in 30 minutes, it can produce 45 items. Machine 3 produces 2 items every 5 minutes, so in 30 minutes it can produce 12 items. Therefore, the total number of items produced is 105. - In the second test case, machine 1 can produce 7 items every 3 minutes, so in 60 minutes, it can produce 140 items. Machine 2 produces 2 items every 5 minutes, so in 60 minutes, it can produce 24 items. Therefore, the total number of items produced is 14.","solution":"def max_items_produced(test_cases): results = [] for case in test_cases: M, T = case[0] total_items = 0 for i in range(1, M + 1): p, t = case[i] if t > 0: total_items += (T // t) * p results.append(total_items) return results"},{"question":"Diana loves Fibonnaci numbers. A Fibonacci number is a number that is the sum of the two preceding ones, starting from 0 and 1. That is, F(0) = 0, F(1) = 1, F(n) = F(n - 1) + F(n - 2) for n > 1. However, Diana finds large Fibonacci numbers a bit boring. So, she decided to focus on a modified sequence where each number in the sequence is the remainder when the corresponding Fibonacci number is divided by a given integer ( M ). Given the length of sequence ( N ) and the integer ( M ), compute the modified Fibonacci sequence. -----Input----- The first line of the input contains two integers ( N ) and ( M ) (1 ≤ ( N ) ≤ 10^6, 1 ≤ ( M ) ≤ 1000) — the length of sequence and the modulus value respectively. -----Output----- Print the first ( N ) terms of the modified Fibonacci sequence. -----Examples----- Input 5 3 Output 0 1 1 2 0 Input 10 5 Output 0 1 1 2 3 0 3 3 1 4 -----Note----- In the first example, the sequence is computed as follows: - F(0) % 3 = 0 % 3 = 0 - F(1) % 3 = 1 % 3 = 1 - F(2) % 3 = (F(1) + F(0)) % 3 = (1 + 0) % 3 = 1 - F(3) % 3 = (F(2) + F(1)) % 3 = (1 + 1) % 3 = 2 - F(4) % 3 = (F(3) + F(2)) % 3 = (2 + 1) % 3 = 0","solution":"def modified_fibonacci_sequence(N, M): Returns the first N terms of the modified Fibonacci sequence where each term is the remainder when the corresponding Fibonacci number is divided by M. if N == 0: return [] if N == 1: return [0] fib_sequence = [0, 1] for i in range(2, N): next_fib = (fib_sequence[-1] + fib_sequence[-2]) % M fib_sequence.append(next_fib) return fib_sequence"},{"question":"In a certain country, there are N cities connected by M bi-directional roads. Each road connects two distinct cities, and its length is equal to the distance between the two cities it connects. A postal delivery company wants to establish a central hub in one of the cities such that the maximum distance from the hub to any other city is minimized. Your task is to find which city should be chosen as the hub and what the minimized maximum distance will be. -----Constraints----- - 2 leq N leq 1000 - 1 leq M leq N*(N-1)/2 - 1 leq length of any road leq 1000 - Every city is connected to every other city either directly or indirectly via other cities -----Input----- Input is given from Standard Input in the following format: N M u_{1} v_{1} l_{1} u_{2} v_{2} l_{2} . . . u_{M} v_{M} l_{M} - The first line contains two integers, N and M, denoting the number of cities and the number of roads, respectively. - The next M lines each contain three integers u_i, v_i, l_i, where u_i and v_i denote the cities the i-th road connects and l_i denotes the length of the i-th road. -----Output----- Print two integers separated by a space: the city index (1-indexed) chosen as the hub and the minimized maximum distance to any other city. -----Sample Input----- 4 5 1 2 5 1 3 10 2 3 2 2 4 3 3 4 1 -----Sample Output----- 2 5 Explanation: Choosing city 2 as the hub results in the following maximum distances to each city: - Distance to city 1 is 5 (direct road) - Distance to city 3 is 2 (direct road) - Distance to city 4 is 3 (direct road) The maximum of these distances is 5. No other city provides a lesser maximum distance. -----Note----- Consider using algorithms such as Floyd-Warshall or Dijkstra to solve the problem efficiently.","solution":"import sys import heapq def find_central_hub(N, M, roads): # Construct the graph graph = {i: [] for i in range(1, N+1)} for u, v, l in roads: graph[u].append((v, l)) graph[v].append((u, l)) def dijkstra(start): distances = {i: float(\'inf\') for i in range(1, N+1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances min_max_distance = float(\'inf\') best_city = -1 for city in range(1, N+1): distances = dijkstra(city) max_distance = max(distances.values()) if max_distance < min_max_distance: min_max_distance = max_distance best_city = city return best_city, min_max_distance # Sample Input execution if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) roads = [] index = 2 for _ in range(M): u = int(data[index]) v = int(data[index + 1]) l = int(data[index + 2]) roads.append((u, v, l)) index += 3 city, distance = find_central_hub(N, M, roads) print(city, distance)"},{"question":"Given a tree with `N` nodes rooted at node `1`, where each edge has a weight, you need to handle `Q` queries. Each query provides two nodes `u` and `v`, and you need to find the sum of weights of the edges in the path between `u` and `v`. ------ Input ------ The first line of the input contains two integers `N` and `Q` denoting the number of nodes and the number of queries respectively. Each of the next `N-1` lines contains three integers `u`, `v`, and `w` denoting there is an edge between nodes `u` and `v` with weight `w`. Each of the next `Q` lines contains two integers `u` and `v` representing a query to find the sum of weights in the path between nodes `u` and `v`. ------ Output ------ For each query, output a single integer representing the sum of weights of the edges in the path between `u` and `v`. ------ Constraints ------ 1 ≤ N ≤ 100,000 1 ≤ Q ≤ 100,000 1 ≤ w ≤ 1,000 1 ≤ u, v ≤ N ------ Sample Input ------ ``` 5 3 1 2 4 1 3 5 2 4 6 3 5 3 4 5 4 3 2 5 ``` ------ Sample Output ------ ``` 10 15 12 ``` ------ Explanation ------ For the sample query 1 (4, 5): The path is 4 -> 2 -> 1 -> 3 -> 5 with weights 6 + 4 + 5 + 3, so the sum is 18. For the sample query 2 (4, 3): The path is 4 -> 2 -> 1 -> 3 with weights 6 + 4 + 5, so the sum is 15. For the sample query 3 (2, 5): The path is 2 -> 1 -> 3 -> 5 with weights 4 + 5 + 3, so the sum is 12.","solution":"import sys from collections import defaultdict, deque class Tree: def __init__(self, n): self.n = n self.graph = defaultdict(list) self.parent = [-1] * (n + 1) self.depth = [-1] * (n + 1) self.weight_to_parent = [0] * (n + 1) def add_edge(self, u, v, w): self.graph[u].append((v, w)) self.graph[v].append((u, w)) def bfs(self, root): queue = deque([(root, 0)]) self.depth[root] = 0 while queue: u, d = queue.popleft() for v, w in self.graph[u]: if self.depth[v] == -1: self.parent[v] = u self.depth[v] = d + 1 self.weight_to_parent[v] = w queue.append((v, d + 1)) def lca(self, u, v): total_weight = 0 if self.depth[u] < self.depth[v]: u, v = v, u while self.depth[u] > self.depth[v]: total_weight += self.weight_to_parent[u] u = self.parent[u] while u != v: total_weight += self.weight_to_parent[u] + self.weight_to_parent[v] u = self.parent[u] v = self.parent[v] return total_weight def solve(n, edges, queries): tree = Tree(n) for u, v, w in edges: tree.add_edge(u, v, w) tree.bfs(1) results = [] for u, v in queries: results.append(tree.lca(u, v)) return results"},{"question":"Two researchers are working on decoding alien messages received from space. Each message is a string consisting of lowercase Latin letters. They have discovered that some of these strings can be transformed into one another by reversing subsegments of the string. A subsegment is defined as any contiguous substring within the message. Your task is to determine whether two given strings can be made identical by reversing any number (including zero) of such subsegments. Input - The first line contains the first string: a non-empty string consisting of lowercase Latin letters. - The second line contains the second string: a non-empty string consisting of lowercase Latin letters. Output Print \\"YES\\" if the first string can be transformed into the second string by reversing subsegments, otherwise print \\"NO\\". Examples Input abcdef fedcba Output YES Input abcd dcba Output YES Input abc def Output NO Note - In the first example, the entire first string can be reversed to form the second string. - In the second example, one possible set of operations is to reverse the substring \\"abcd\\" to get \\"dcba\\". - In the third example, there is no possible way to transform \\"abc\\" into \\"def\\" by reversing subsegments.","solution":"def can_transform_by_reversing_subsegments(s1, s2): Determines if the first string can be transformed into the second string by reversing any number (including zero) of subsegments. Parameters: s1 (str): The first string. s2 (str): The second string. Returns: str: \\"YES\\" if s1 can be transformed into s2, otherwise \\"NO\\". if sorted(s1) == sorted(s2): return \\"YES\\" else: return \\"NO\\""},{"question":"A long-forgotten kingdom consists of N cities connected by M bidirectional roads. Each road has a certain cost associated with it. The kingdom is attempting to rebuild its road system to ensure that there is a path between every pair of cities while minimizing the total cost of the roads. The royal engineer has determined a possible set of roads that can be used for reconstruction. Your task is to verify if it is possible to construct a road system connecting all cities with the given roads, ensuring that the total cost is minimized. -----Input----- The first line of input contains two integers N (2 leq N leq 100,000) and M (1 leq M leq 200,000), the number of cities and the number of potential roads, respectively. Each of the next M lines contains three integers u, v, and w (1 leq u, v leq N; u neq v; 1 leq w leq 10^9) representing a road between cities u and v with cost w. All roads are bidirectional. -----Output----- Output a single integer, the minimum possible cost to connect all the cities. If it is impossible to connect all the cities, output -1. -----Examples----- Sample Input 1: 4 5 1 2 3 1 3 4 4 2 2 4 3 5 3 2 6 Sample Output 1: 9 Sample Input 2: 3 1 1 2 7 Sample Output 2: -1","solution":"def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 def min_cost_to_connect_all_cities(N, M, roads): # If there are too few edges, we cannot connect all cities if M < N - 1: return -1 roads.sort(key=lambda x: x[2]) # Sort by cost parent = list(range(N + 1)) rank = [0] * (N + 1) mst_cost = 0 edges_used = 0 for u, v, w in roads: if find(parent, u) != find(parent, v): union(parent, rank, u, v) mst_cost += w edges_used += 1 # If we have used exactly N-1 edges, we have our MST if edges_used == N - 1: return mst_cost # If we exit the loop without having used N-1 edges, it\'s impossible to connect all cities return -1"},{"question":"You are given an integer N. Your task is to find the smallest positive integer M such that the product of the digits of M is equal to N. If no such M exists, output -1. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first and only line of each test case contains a single integer N. ------ Output ------ For each test case, print a single line containing the smallest integer M if it exists, otherwise print -1. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^{18} --- Sample Input 1 --- 2 10 17 --- Sample Output 1 --- 25 -1","solution":"def smallest_int_with_product(N): Returns the smallest positive integer M such that the product of digits of M is equal to N. If no such M exists, returns -1. if N == 1: return 1 # The smallest product of digits to get 1 is the number 1 itself. if N < 10: return N # For single-digit product, the number itself is the smallest. # To find the smallest number with the same product of digits: factors = [] for d in range(9, 1, -1): while N % d == 0: factors.append(d) N //= d if N != 1: return -1 # No valid factors found, return -1. factors.sort() M = int(\'\'.join(map(str, factors))) return M"},{"question":"You are participating in a programming competition where you are given simple programming tasks. One of the tasks requires implementing a queue with specific operations and properties. # Queue Implementation The queue needs to support the following operations: 1. Enqueue: Add an element to the end of the queue. 2. Dequeue: Remove an element from the front of the queue. 3. Get Front: Return the element at the front of the queue without removing it. 4. Get Size: Return the current size of the queue. 5. Is Empty: Return true if the queue is empty, false otherwise. The queue should also have the following properties: - The size of the queue should never exceed a given maximum size `M`. - If an enqueue operation would cause the queue to exceed its maximum size, it should not add the element and return an error. # Input/Output Requirements 1. Initially, the size of the queue should be `0` (i.e., it should be empty). 2. Each input line represents an operation on the queue. The operations are provided in the following formats: - `enqueue x`: Enqueue the integer `x` into the queue. - `dequeue`: Dequeue an element from the queue. - `get_front`: Get the element at the front of the queue. - `get_size`: Get the current size of the queue. - `is_empty`: Check if the queue is empty. 3. For invalid operations (like `dequeue` or `get_front` on an empty queue or `enqueue` exceeding the max size), output `ERROR`. # Constraints - The number of operations to be performed is `N` (`1 ≤ N ≤ 1000`). - The maximum size of the queue `M` is an integer between `1` and `1000`. # Sample Input ``` 10 5 enqueue 1 enqueue 2 get_front get_size dequeue get_front get_size dequeue dequeue is_empty ``` # Sample Output ``` 1 2 2 1 ERROR true ``` # Explanation 1. Initially, queue is empty. 2. `enqueue 1`: Queue becomes [1]. 3. `enqueue 2`: Queue becomes [1, 2]. 4. `get_front`: Front element is `1`. 5. `get_size`: Queue size is `2`. 6. `dequeue`: Element `1` is removed, queue becomes [2]. 7. `get_front`: Front element is `2`. 8. `get_size`: Queue size is `1`. 9. `dequeue`: Element `2` is removed, queue becomes empty. 10. `dequeue`: Queue is empty, output `ERROR`. 11. `is_empty`: Queue is empty, output `true`. Implement this queue following the described operations and properties. # Submission Write a function or a program that processes a series of operations on the queue and prints the appropriate responses for each operation based on the provided input format.","solution":"class Queue: def __init__(self, max_size): self.queue = [] self.max_size = max_size def enqueue(self, x): if len(self.queue) < self.max_size: self.queue.append(x) else: return \\"ERROR\\" def dequeue(self): if self.queue: return self.queue.pop(0) else: return \\"ERROR\\" def get_front(self): if self.queue: return self.queue[0] else: return \\"ERROR\\" def get_size(self): return len(self.queue) def is_empty(self): return len(self.queue) == 0 def process_operations(operations, max_size): q = Queue(max_size) results = [] for operation in operations: parts = operation.split() command = parts[0] if command == \\"enqueue\\": result = q.enqueue(int(parts[1])) if result == \\"ERROR\\": results.append(\\"ERROR\\") elif command == \\"dequeue\\": result = q.dequeue() if result == \\"ERROR\\": results.append(\\"ERROR\\") elif command == \\"get_front\\": result = q.get_front() if result == \\"ERROR\\": results.append(\\"ERROR\\") else: results.append(str(result)) elif command == \\"get_size\\": results.append(str(q.get_size())) elif command == \\"is_empty\\": results.append(\\"true\\" if q.is_empty() else \\"false\\") return results"},{"question":"In the land of Gridonia, a kingdom consisting of a grid of cells, King Grido aims to build the largest possible palace. The palace must be constructed on consecutive cells in a single row of this grid, and it must follow two specific rules: 1. The height of the palace in each cell must follow a strict increasing order from left to right. 2. Any cell within the row can be a part of the construction as long as it satisfies the rule above and has enough height to fit in the palace. You are given a matrix of integers representing the heights of the cells in Gridonia. Each cell (i, j) in the matrix gives the height at that cell. Write a program to determine the maximum number of consecutive cells in any single row that can form the palace according to the rules. Input The first line contains two integers n and m (1 ≤ n, m ≤ 3000), the number of rows and columns in the height matrix respectively. The next n lines each contain m integers, representing the heights of the cells in the matrix. Output Output a single integer, the maximum number of consecutive cells in any row that can form the palace. Example Input 4 5 1 2 3 4 5 4 3 2 1 0 5 6 7 8 9 1 3 2 4 6 Output 5 Explanation In the given matrix, the first row [1, 2, 3, 4, 5] and the third row [5, 6, 7, 8, 9] form palaces according to the rules, each having a length of 5 cells. The maximum number of consecutive cells that can form the palace is thus 5.","solution":"def max_palace_length(n, m, matrix): Determines the maximum number of consecutive cells in any single row that can form the palace. :param n: Number of rows :param m: Number of columns :param matrix: 2D list representing the heights of the cells in the matrix :return: Maximum number of consecutive cells that can form the palace max_length = 0 for row in matrix: current_length = 1 for col in range(1, m): if row[col] > row[col - 1]: current_length += 1 else: if current_length > max_length: max_length = current_length current_length = 1 if current_length > max_length: max_length = current_length return max_length"},{"question":"Alex has a collection of different stones numbered from 1 to N. He enjoys creating unique sequences with these stones by following a set of specific rules. Each sequence should start and end with the stone numbered 1, and every other stone in the sequence should have a number different from its immediate predecessor. Given the number of stones N, Alex wants to determine the total number of possible unique sequences of length K that can be formed according to the rules mentioned above. Since the answer can be very large, compute the result modulo 10^9 + 7. Input: The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of two space-separated integers N and K. Output: For each test case, output a single line containing the number of required unique sequences modulo 10^9 + 7. Constraints: 1 ≤ T ≤ 10^3 2 ≤ N ≤ 10^5 1 ≤ K ≤ 10^5 Sample Input: 3 3 2 4 3 2 5 Sample Output: 2 12 0 Explanation: Case 1. For N = 3 and K = 2, we have these valid sequences: (1, 1) and no other sequences since K is 2 and must start and end with 1. Case 2. For N = 4 and K = 3, we can have the following sequences: (1, 2, 1), (1, 3, 1), (1, 4, 1), (1, 2, 3), (1, 2, 4), (1, 3, 2), (1, 3, 4), (1, 4, 2), (1, 4, 3), (1, 2, 4), (1, 3, 2), (1, 4, 2) Case 3. For N = 2 and K = 5, no valid sequence can be formed as K is 5 which is an odd number, and it\'s impossible to follow the rules strictly for such length where there is only 1 available stone other than stone 1 making it impossible to follow the rule stringently. SAMPLE INPUT 3 3 2 4 3 2 5 SAMPLE OUTPUT 2 12 0","solution":"MOD = 10**9 + 7 def count_sequences(n, k): if k == 1: return 1 # Only one sequence: [1] if k % 2 == 0: return pow(n - 1, k // 2, MOD) else: return 0 # No valid sequence for odd k def solve(test_cases): results = [] for n, k in test_cases: results.append(count_sequences(n, k)) return results def process_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = [] for i in range(1, T + 1): n, k = map(int, lines[i].split()) test_cases.append((n, k)) return test_cases"},{"question":"Given a list of integers, partition it into two subsets such that the absolute difference between the sums of the subsets is minimized. You need to write a function that returns the minimum difference. Input format: The first line of the input will contain an integer T, denoting the number of test cases. For each test case, the first line contains an integer n, the number of elements in the list. The next line contains n space-separated integers, representing the elements of the list. Output format: For each test case, output the minimum difference on a separate line. Constraints: 1 ≤ T ≤ 10 1 ≤ n ≤ 100 1 ≤ list element ≤ 1000 Sample Input 3 4 1 2 3 9 3 1 2 3 6 3 1 4 2 2 1 Sample Output 3 0 1 Explanation In the first test case, one optimal way to partition is {1, 2, 3} and {9}, which gives an absolute difference of |(1+2+3) - 9| = 3. In the second test case, one optimal way to partition is {1, 2} and {3}, resulting in a difference of |(1+2)-3| = 0. In the third test case, a partition of {3, 1, 1} and {4, 2} gives a difference of |(3+1+1)-(4+2)| = 1.","solution":"def min_subset_difference(num_cases, cases): def find_min_diff(arr): total_sum = sum(arr) n = len(arr) dp = [False] * (total_sum // 2 + 1) dp[0] = True for num in arr: for j in range(total_sum // 2, num - 1, -1): dp[j] = dp[j] or dp[j - num] for j in range(total_sum // 2, -1, -1): if dp[j]: return total_sum - 2 * j results = [] for case in cases: n, arr = case results.append(find_min_diff(arr)) return results # Input function to parse multiple test cases def parse_input(input_data): lines = input_data.strip().split(\'n\') num_cases = int(lines[0]) cases = [] index = 1 for _ in range(num_cases): n = int(lines[index]) arr = list(map(int, lines[index + 1].strip().split())) cases.append((n, arr)) index += 2 return num_cases, cases"},{"question":"You are given a number base conversion problem. Implement a function to solve the following problem: Convert the given base-10 number to the specified base. Input The first line contains an integer T denoting the number of test cases. The next T lines describe test cases and contain two integers each: N (the number in base-10) and B (the base to convert to). Output For each test case, output the converted number as a string. Constraints T ≤ 1000 1 ≤ N ≤ 10^9 2 ≤ B ≤ 36 Note: The number 10 is represented by \'A\', 11 by \'B\', and so on in bases greater than 10. SAMPLE INPUT 3 255 2 100 16 345 8 SAMPLE OUTPUT 11111111 64 531","solution":"def convert_base(N, B): Converts a base-10 number N to base B. :param N: int, the base-10 number to convert. :param B: int, the base to convert to (2 ≤ B ≤ 36). :return: str, the number represented in base B. if N == 0: return \\"0\\" digits = \\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\\" result = [] while N > 0: remainder = N % B result.append(digits[remainder]) N //= B return \'\'.join(result[::-1]) def batch_convert_base(test_cases): Converts a list of base-10 numbers to their respective bases. :param test_cases: List of tuples [(N1, B1), (N2, B2), ...]. :return: List of strings, the numbers represented in their respective bases. results = [] for N, B in test_cases: results.append(convert_base(N, B)) return results"},{"question":"Given an array of positive integers, where each element represents the amount of money you can steal from a house, calculate the maximum amount of money you can steal tonight without alerting the police. You cannot steal from two consecutive houses since that will trigger the security system. Example 1: Input: nums = [2, 3, 2] Output: 3 Explanation: The optimal strategy is to rob house 1 (money 2) and house 3 (money 2), but this steals only 4. So, it\'s better to rob just house 2 (money 3). Example 2: Input: nums = [1, 2, 3, 1] Output: 4 Explanation: The optimal strategy is to rob houses 1 and 3 (money 1 + 3 = 4). Constraints: 1. The length of the array is between 1 and 100. 2. The values on the houses are all positive integers less than 1000.","solution":"def rob(nums): Calculate the maximum amount of money you can steal tonight without alerting the police. You cannot steal from two consecutive houses. :param nums: List[int] - the amount of money in each house :return: int - maximum money you can steal if not nums: return 0 if len(nums) == 1: return nums[0] def rob_linear(houses): rob1, rob2 = 0, 0 for money in houses: new_rob = max(rob1 + money, rob2) rob1 = rob2 rob2 = new_rob return rob2 # Since this is a circular problem we have two cases: # 1. Include the first house and exclude the last house (nums[:-1]) # 2. Exclude the first house and include the last house (nums[1:]) return max(rob_linear(nums[:-1]), rob_linear(nums[1:]))"},{"question":"Given two strings, textbf{A} and textbf{B}, find the longest common subsequence (LCS) between them and print its length. A subsequence is a sequence derived from another sequence by deleting some elements without changing the order of the remaining elements. For example, if textbf{A} = \\"AGGTAB\\" and textbf{B} = \\"GXTXAYB\\", the LCS is \\"GTAB\\". Task Write a function to compute the length of the longest common subsequence between two given strings, textbf{A} and textbf{B}. Function Signature ```python def longest_common_subsequence(A: str, B: str) -> int: ``` Input Format - The function receives two input parameters textbf{A} and textbf{B}, which are both strings. Constraints - 1 leq len(A), len(B) leq 1000 - Both strings are composed of uppercase and lowercase English letters only. Output Format - Return an integer denoting the length of the longest common subsequence. Sample Input 1 ```python A = \\"ABCBDAB\\" B = \\"BDCABC\\" ``` Sample Output 1 ```python 4 ``` Explanation: The LCS is \\"BCAB\\". Sample Input 2 ```python A = \\"XMJYAUZ\\" B = \\"MZJAWXU\\" ``` Sample Output 2 ```python 4 ``` Explanation: The LCS is \\"MJAU\\". # Note: Your function should aim for an efficient solution, ideally utilizing dynamic programming to solve this problem within the given constraints.","solution":"def longest_common_subsequence(A: str, B: str) -> int: Returns the length of the longest common subsequence between two strings A and B. m = len(A) n = len(B) # Create a 2D array to store the length of longest common subsequence L = [[0] * (n+1) for _ in range(m+1)] # Building the LCS table in bottom-up fashion for i in range(m+1): for j in range(n+1): if i == 0 or j == 0: L[i][j] = 0 elif A[i-1] == B[j-1]: L[i][j] = L[i-1][j-1] + 1 else: L[i][j] = max(L[i-1][j], L[i][j-1]) return L[m][n]"},{"question":"Alex is trying to decipher a secret message encoded in a sequence of integers. The encoding process involves representing each letter of the English alphabet as a two-digit number according to its position (i.e., \'a\' is 01, \'b\' is 02, ..., \'z\' is 26). A valid encoded message should only contain numbers between 01 and 26 inclusive. Given an encoded message as a string of digits, your task is to determine how many different ways the message can be decoded into corresponding English letters. Two ways are considered different if they interpret the string differently. Input The first line of the input contains a single string s (1 ≤ |s| ≤ 10^5) — the encoded message consisting of digits. Output Print a single integer — the number of ways to decode the given message. Examples Input 12 Output 2 Input 226 Output 3 Input 0 Output 0 Note In the first example, \\"12\\" can be decoded as \\"AB\\" (1 2) or \\"L\\" (12). In the second example, \\"226\\" can be decoded as \\"BBF\\" (2 2 6), \\"VF\\" (22 6), or \\"BZ\\" (2 26). In the third example, there are no valid decodings as the message starts with an invalid \\"0\\".","solution":"def num_decodings(s): Returns the number of ways the given encoded message can be decoded into corresponding English letters. if not s or s[0] == \'0\': return 0 n = len(s) dp = [0] * (n + 1) dp[0] = 1 # An empty string has one way to be decoded dp[1] = 1 if s[0] != \'0\' else 0 # The first character (assuming it\'s not \'0\') has one way to be decoded for i in range(2, n + 1): single_digit = int(s[i - 1:i]) two_digits = int(s[i - 2:i]) if 1 <= single_digit <= 9: # Decode as a single digit (1-9) dp[i] += dp[i - 1] if 10 <= two_digits <= 26: # Decode as a two-digit number (10-26) dp[i] += dp[i - 2] return dp[n]"},{"question":"Alexis is practicing his Python programming skills and decided to solve a unique problem related to strings. He has a string s consisting of lowercase English letters. Alexis wants to know how many substrings of s are palindromes. A palindrome is a string that reads the same backward as forward. A substring is a contiguous sequence of characters within a string. Help Alexis by writing a function that takes the string s as input and returns the number of substrings of s that are palindromes. -----Input----- The first line contains a single integer t (1 le t le 100) — the number of test cases. The next t lines contain the descriptions of test cases. Each test case consists of a single line containing the string s (1 le |s| le 1000) — the input string consisting of lowercase English letters. -----Output----- For each test case, print the number of palindromic substrings. -----Examples----- Input 3 aba abccba abcd Output 4 9 4 -----Note----- In the first test case, the palindromic substrings are \\"a\\", \\"b\\", \\"a\\", and \\"aba\\". In the second test case, the palindromic substrings are \\"a\\", \\"b\\", \\"c\\", \\"c\\", \\"b\\", \\"a\\", \\"bccb\\", \\"bccb\\", and \\"abccba\\". In the third test case, the palindromic substrings are \\"a\\", \\"b\\", \\"c\\", and \\"d\\".","solution":"def count_palindromic_substrings(s): Returns the number of palindromic substrings in the input string s. count = 0 n = len(s) # Iterate over each possible center of the palindrome for center in range(2 * n - 1): left = center // 2 right = left + center % 2 # Expand around the center while left >= 0 and right < n and s[left] == s[right]: count += 1 left -= 1 right += 1 return count def palindromic_substrings_cases(t, cases): Process multiple test cases and return results. Parameters: t (int): Number of test cases. cases (list of str): List of test case strings. Returns: list of int: Number of palindromic substrings for each test case. results = [] for s in cases: results.append(count_palindromic_substrings(s)) return results"},{"question":"A company wants to evaluate its employees on various tasks to find the best team members for a crucial project. There are n employees and m tasks. Every employee is individually evaluated based on which tasks they can complete. Each employee has a list of tasks they have successfully completed before, and for each task, there is a score representing how well the employee did. Each employee also has a demand for a salary if included in the team. The goal is to select a subset of employees such that every task is covered by at least one employee and the total salary of the selected employees is minimized. An additional constraint is that each employee can only handle a maximum number of k tasks simultaneously. You are required to help the company determine the minimum total salary needed to form such a team that covers all tasks. # Input: - The first line contains three integers n, m, and k (1 ≤ n ≤ 100; 1 ≤ m ≤ 20; 1 ≤ k ≤ 10) — the number of employees, the number of tasks, and the maximum number of tasks an employee can simultaneously handle. - The following 2n lines describe the employees. Lines number 2i and (2i + 1) contain information about the i-th employee. The 2i-th line contains an integer si (1 ≤ si ≤ 109) — the salary demanded by the i-th employee. - The 2i-th line contains another integer pi (1 ≤ pi ≤ m) — the number of tasks the i-th employee has completed. - The (2i + 1)-th line contains pi pairs of integers. Each pair contains a task number and a score (1 ≤ score ≤ 100) representing how well the employee did on that task. Tasks are numbered from 1 to m. # Output: - Print the minimum total salary required to ensure all tasks are covered. If it is not possible, print -1. # Example: Input: ``` 3 3 2 200 2 1 50 2 30 150 2 2 40 3 70 300 2 1 60 3 80 ``` Output: ``` 350 ``` Input: ``` 2 2 2 100 1 1 60 150 1 2 70 ``` Output: ``` 250 ``` Input: ``` 2 3 1 200 1 1 55 150 1 2 65 ``` Output: ``` -1 ``` # Note: In the first example, selecting the first and second employees covers all tasks 1, 2, and 3 with a minimal total salary of 350. In the second example, both employees need to be selected to cover tasks 1 and 2, totaling 250. In the third example, it is not possible to cover all three tasks with the given employees under the constraint of handling a maximum of 1 task per employee.","solution":"from itertools import combinations def find_min_salary(n, m, k, employees): # Helper function to check if all tasks are covered def tasks_covered(tasks): return set(tasks) == set(range(1, m + 1)) min_salary = float(\'inf\') # Generate all combinations of employees with varying lengths for r in range(1, n + 1): for combo in combinations(employees, r): covered_tasks = [] total_salary = 0 for employee in combo: _, task_info = employee if sum([1 for task, _ in task_info]) > k: break covered_tasks.extend([task for task, _ in task_info]) total_salary += employee[0] if tasks_covered(covered_tasks): min_salary = min(min_salary, total_salary) return min_salary if min_salary != float(\'inf\') else -1 def process_input(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) k = int(data[2]) employees = [] index = 3 for _ in range(n): salary = int(data[index]) num_tasks = int(data[index + 1]) tasks = [] index += 2 for _ in range(num_tasks): task = int(data[index]) score = int(data[index + 1]) tasks.append((task, score)) index += 2 employees.append((salary, tasks)) result = find_min_salary(n, m, k, employees) print(result)"},{"question":"Implement a \\"Yen to Dollar\\" and \\"Dollar to Yen\\" conversion tool. The conversion rates are given and the task requires the program to convert both currencies using provided rates. # Problem Description You are given two conversion rates: - Rate from Yen to Dollar: `yen_to_dollar` - Rate from Dollar to Yen: `dollar_to_yen` You need to implement a function that can handle multiple queries to convert currencies using these rates. Each query will specify the type of conversion (either \\"Yen to Dollar\\" or \\"Dollar to Yen\\") and the amount to be converted. Your function should output the conversion result rounded to 2 decimal places for each query. # Input The input consists of multiple lines: - The first line contains the conversion rate from Yen to Dollar (a floating-point number). - The second line contains the conversion rate from Dollar to Yen (a floating-point number). - The third line specifies the number of queries, `q` (an integer, 1 ≤ q ≤ 100). - Each of the following `q` lines contains a query in the format `C amount` where `C` is either `Y` (Yen to Dollar) or `D` (Dollar to Yen) and `amount` is a floating-point number representing the amount to convert. The end of the input is indicated by a single line containing `0`. # Output For each query, output the result of the conversion rounded to 2 decimal places. # Example Input ``` 0.0091 110.35 3 Y 1000 D 50 Y 2000 0 ``` Output ``` 9.10 5517.50 18.20 ``` # Guidelines - Ensure proper handling of floating-point arithmetic to avoid precision errors. - Use consistent formatting, ensuring that all outputs are rounded to exactly 2 decimal places.","solution":"def convert_currency(yen_to_dollar, dollar_to_yen, queries): results = [] for query in queries: type_conversion, amount = query.split() amount = float(amount) if type_conversion == \'Y\': converted_amount = amount * yen_to_dollar elif type_conversion == \'D\': converted_amount = amount * dollar_to_yen else: raise ValueError(\\"Invalid conversion type\\") results.append(round(converted_amount, 2)) return results"},{"question":"You are given an array of n integers where each element represents the height of a rock in a river. You need to help a kangaroo to cross the river by stepping on the rocks. The kangaroo can jump from a rock to another nearby rock if and only if the height difference between the current rock and the target rock is less than or equal to k. Your task is to determine if the kangaroo can reach the last rock (the nth rock) starting from the first rock (the 1st rock). If the kangaroo can reach the last rock, also calculate the minimum number of jumps required. -----Input----- The first line contains two integers n and k (2 ≤ n ≤ 10^5; 1 ≤ k ≤ 10^9) — the number of rocks and the maximum height difference the kangaroo can jump. The second line contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10^9) — the heights of the rocks. -----Output----- If the kangaroo can reach the last rock, output the minimum number of jumps required to get there in a single line. If it is not possible for the kangaroo to reach the last rock, output -1. -----Examples----- Input 5 3 1 2 2 5 2 Output 2 Input 4 1 1 2 3 4 Output 3 Input 4 1 1 3 4 2 Output -1 -----Note----- In the first example, the kangaroo can jump as follows: from rock 1 (height 1) to rock 2 (height 2) to rock 3 (height 2) and finally to rock 5 (height 2). This requires 2 jumps. In the second example, the kangaroo can jump as follows: from rock 1 (height 1) to rock 2 (height 2) to rock 3 (height 3) to rock 4 (height 4). This requires 3 jumps. In the third example, it is impossible for the kangaroo to jump from rock 2 (height 3) to rock 3 (height 4) because the height difference exceeds k (1), so the output is -1.","solution":"from collections import deque def kangaroo_crossing(n, k, heights): Determines if the kangaroo can reach the last rock and calculates the minimum jumps required. Parameters: n (int): The number of rocks. k (int): The maximum height difference the kangaroo can jump. heights (list of int): Heights of the rocks. Returns: int: Minimum number of jumps required or -1 if it\'s not possible. if n == 2: return 1 if abs(heights[1] - heights[0]) <= k else -1 queue = deque([(0, 0)]) # (index, jump_count) visited = [False] * n visited[0] = True while queue: current_index, jump_count = queue.popleft() for next_index in range(current_index + 1, n): if abs(heights[next_index] - heights[current_index]) <= k: if next_index == n - 1: return jump_count + 1 if not visited[next_index]: visited[next_index] = True queue.append((next_index, jump_count + 1)) else: break return -1"},{"question":"You\'re tasked with analyzing log data from a web server. Given a list of logs, where each log is represented by a string with the format `\\"ip_address - timestamp - resource_accessed\\"`, write a function `most_accessed_resource(logs: List[str]) -> str` that returns the most accessed resource. For example: ```python logs = [ \\"192.168.1.1 - [01/Jan/2020:10:00:00] - /home\\", \\"192.168.1.2 - [01/Jan/2020:10:05:00] - /about\\", \\"192.168.1.1 - [01/Jan/2020:10:10:00] - /home\\", \\"192.168.1.3 - [01/Jan/2020:10:15:00] - /contact\\", \\"192.168.1.2 - [01/Jan/2020:10:20:00] - /home\\", \\"192.168.1.1 - [01/Jan/2020:10:25:00] - /contact\\" ] most_accessed_resource(logs) ``` The function should return: ```python \\"/home\\" ``` If there are multiple resources with the same highest access count, return any one of them. You can assume that `logs` will always contain at least one log entry.","solution":"from collections import defaultdict from typing import List def most_accessed_resource(logs: List[str]) -> str: resource_count = defaultdict(int) for log in logs: _, _, resource = log.split(\\" - \\") resource_count[resource] += 1 # Find the resource with the maximum count most_accessed = max(resource_count, key=resource_count.get) return most_accessed"},{"question":"You are given a 2D grid of size n x n filled with different integers. The rows are numbered 1 to n from top to bottom, and the columns are numbered 1 to n from left to right. You need to find the maximum sum of numbers along any path from the top-left cell (1, 1) to the bottom-right cell (n, n). You can only move to cells using the following set of moves: 1. Right: Move from cell (r, c) to (r, c+1) 2. Down: Move from cell (r, c) to (r+1, c) 3. Diagonally Down-Right: Move from cell (r, c) to (r+1, c+1) Input: First line contains a single integer, n. Next n lines contain n integers each, representing the grid. Output: A single integer, the maximum sum of numbers along any valid path. Constraints: 1 ≤ n ≤ 100 -1000 ≤ grid[i][j] ≤ 1000 SAMPLE INPUT 3 1 2 3 4 5 6 7 8 9 SAMPLE OUTPUT 29 Explanation The path with the maximum sum is: (1, 1) -> (2, 2) -> (3, 3) with the values 1 + 5 + 9 = 15 Another path with the same value: (1, 1) -> (1, 2) -> (2, 3) -> (3, 3) with values 1 + 2 + 6 + 9 = 18","solution":"def max_path_sum(grid): Returns the maximum sum of numbers along any path from the top-left cell to the bottom-right cell. n = len(grid) dp = [[-float(\'inf\')] * n for _ in range(n)] dp[0][0] = grid[0][0] for i in range(n): for j in range(n): if i+1 < n: dp[i+1][j] = max(dp[i+1][j], dp[i][j] + grid[i+1][j]) if j+1 < n: dp[i][j+1] = max(dp[i][j+1], dp[i][j] + grid[i][j+1]) if i+1 < n and j+1 < n: dp[i+1][j+1] = max(dp[i+1][j+1], dp[i][j] + grid[i+1][j+1]) return dp[n-1][n-1]"},{"question":"Jason is a professional photographer, and he has been given a project to take pictures of a beautiful forest. The forest consists of N trees positioned in a line, and the position of the i-th tree is given by an integer P_i. Jason wants to take pictures from M specific points (also given by integers) along the line such that the following condition is met: For each picture point, there should be a tree as close as possible to this point. That is, for each point j (1 ≤ j ≤ M), he wants to minimize the distance to the nearest tree. Given the positions of the trees and the points where Jason wants to take pictures, your task is to help Jason find the minimum sum of distances from each picture point to the nearest tree. Input: - The first line of input contains an integer T denoting the number of test cases. - The first line of each test case contains two space-separated integers N and M. - The second line contains N space-separated integers P_i, the positions of the trees. - The third line contains M space-separated integers Q_j, the points where Jason wants to take pictures. Output: For each test case, print the minimum sum of distances in a separate line. Constraints: - 1 ≤ T ≤ 10 - 1 ≤ N, M ≤ 100 - 1 ≤ P_i, Q_j ≤ 10^6 SAMPLE INPUT 2 3 2 1 5 9 2 7 4 3 2 6 8 10 1 12 9 SAMPLE OUTPUT 3 1 Explanation: - In the first test case, for point 2, the nearest tree is at position 1 (distance = 1), and for point 7, the nearest tree is at position 9 (distance = 2). So, the total minimum distance is 3. - In the second test case, for point 1, the nearest tree is at position 2 (distance = 1), for point 12, the nearest tree is at position 10 (distance = 2), and for point 9, the nearest tree is at position 8 or 10 (distance = 1). So, the total minimum distance is 1 + 2 + 1 = 4.","solution":"def find_minimum_sum_of_distances(T, test_cases): results = [] for case in test_cases: N, M, trees, points = case trees.sort() distance_sum = 0 for point in points: left, right = 0, N - 1 while left < right: mid = (left + right) // 2 if trees[mid] < point: left = mid + 1 else: right = mid if left > 0 and abs(trees[left - 1] - point) < abs(trees[left] - point): left -= 1 distance_sum += abs(trees[left] - point) results.append(distance_sum) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) idx = 1 test_cases = [] for _ in range(T): N, M = map(int, lines[idx].split()) trees = list(map(int, lines[idx + 1].split())) points = list(map(int, lines[idx + 2].split())) test_cases.append((N, M, trees, points)) idx += 3 return T, test_cases def main(input_str): T, test_cases = parse_input(input_str) results = find_minimum_sum_of_distances(T, test_cases) for result in results: print(result)"},{"question":"In a faraway village, there is a wise old man who can predict the weather. He is able to forecast rainfall amounts for the upcoming days. The villagers rely heavily on his accurate predictions as they use this data to plan their agricultural activities. However, the predictions are only reliable if they are within a specific range of values. The villagers have asked you to help them write a program that can automatically filter out invalid rainfall predictions for them. The program should take the following inputs: 1. The number of days for which rainfall predictions have been made. 2. A list of integers representing the predicted rainfall amounts for each day. The program should output the number of invalid predictions. A prediction is considered invalid if it falls outside the range of 0 to 100 millimeters (inclusive). Input - First line contains an integer T - the number of test cases. - For each test case: - The first line contains an integer N - the number of days. - The second line contains N space-separated integers representing the predicted rainfall amounts for each day. Output For each test case, output a single integer - the number of invalid predictions. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 -1000 ≤ rainfall prediction ≤ 1000 SAMPLE INPUT 2 5 10 20 -30 110 50 3 70 85 200 SAMPLE OUTPUT 2 1","solution":"def count_invalid_predictions(T, test_cases): Counts the number of invalid rainfall predictions for multiple test cases. :param T: int, number of test cases :param test_cases: list of tuples, each containing: - int N: number of days - list of int: predicted rainfall amounts :return: list of int, number of invalid predictions for each test case results = [] for i in range(T): N, predictions = test_cases[i] invalid_count = sum(1 for pred in predictions if pred < 0 or pred > 100) results.append(invalid_count) return results"},{"question":"Write a function `longestWord` that takes a string of text and returns the longest word in that text. If there are two or more words that are the same length, return the word that appears first in the text. For the purposes of this function, a \\"word\\" is defined as a sequence of non-space characters. Punctuation should not be counted as part of the word length. E.g: \\"The quick brown fox!\\" -> \\"quick\\"","solution":"def longestWord(text): Returns the longest word in the given text. If there are multiple words with the same longest length, the first one encountered is returned. Punctuation is not counted as part of the word length. :param text: A string of text :return: The longest word in the text import re # Remove punctuation using regex sanitized_text = re.sub(r\'[^ws]\', \'\', text) # Split the sanitized text into words words = sanitized_text.split() # Initialize variable to keep track of the longest word longest = \\"\\" # Iterate through each word to find the longest for word in words: if len(word) > len(longest): longest = word return longest"},{"question":"Emma loves playing with strings and special characters. She has a string consisting of lowercase alphabets and question marks (\'?\'). Emma wants to replace each question mark with a lowercase alphabet such that the final string is a palindrome. Help Emma to determine the lexicographically smallest palindrome she can produce. If it\'s impossible to produce a palindrome, return \\"-1\\". A string \'a\' is lexicographically smaller than a string \'b\' if in the first position where \'a\' and \'b\' differ, the string \'a\' has a letter that appears earlier in the alphabet than the corresponding letter in \'b\'. Consider \'a\' < \'b\', \'b\' < \'c\', ..., \'y\' < \'z\'. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 1000) — the length of the string. The second line contains the string of length n, consisting of lowercase alphabets and/or question marks. -----Output----- Print the lexicographically smallest palindrome that can be formed by replacing all question marks, or -1 if it\'s impossible. -----Examples----- Input 5 a?b?a Output aabaa Input 3 ab? Output aba Input 4 ab?? Output abba Input 3 a?b Output -1 -----Note----- In the first example, Emma can replace the \'?\' to get \\"aabaa\\". In the second example, Emma can replace the \'?\' to get \\"aba\\". In the third example, Emma can replace the \'?\' to get \\"abba\\". In the fourth example, it\'s impossible to create a palindrome regardless of how the \'?\' is replaced. Hence, the output is -1.","solution":"def smallest_palindrome(n, s): s = list(s) # Convert string to a list for mutability left, right = 0, n - 1 while left <= right: if s[left] == s[right] == \'?\': s[left], s[right] = \'a\', \'a\' elif s[left] == \'?\': s[left] = s[right] elif s[right] == \'?\': s[right] = s[left] elif s[left] != s[right]: return \\"-1\\" left += 1 right -= 1 return \\"\\".join(s)"},{"question":"Write a function `find_combinations` that takes two arguments, `lst` (a list of distinct integers) and `target` (an integer). The function should return a list of all unique combinations in `lst` where the integers sum to `target`. Each number in `lst` may only be used once in each combination, and the order of numbers in each combination does not matter. The list should not contain duplicate combinations. Input will be: 1. `lst`: a list of distinct integers with length > 0 2. `target`: an integer Output should be a list of lists, with each inner list representing a unique combination of numbers that sum up to `target`. No inner list should be in any particular order, and the outer list should not sort the inner lists or the combinations. Example: ```python find_combinations([2, 3, 6, 7], 7) ``` Output: ```python [[7]] ``` Example: ```python find_combinations([2, 3, 5], 8) ``` Output: ```python [[3, 5]] ```","solution":"def find_combinations(lst, target): Finds all unique combinations of numbers in lst that sum up to the target. Args: lst: A list of distinct integers. target: An integer target sum. Returns: A list of lists, where each inner list represents a unique combination of numbers summing to the target. def backtrack(start, target, path, res): if target == 0: res.append(path) return if target < 0: return for i in range(start, len(lst)): backtrack(i + 1, target - lst[i], path + [lst[i]], res) result = [] backtrack(0, target, [], result) return result"},{"question":"In a university\'s student database system, each student is represented by a record containing several details including the student\'s name, student ID, and a list of completed courses. The university needs a new feature to detect and merge duplicate records. Two records are considered duplicates if they share the same student ID. Develop a function `merge_records` that takes two lists of dictionaries as input, `records1` and `records2`, representing two sets of student records. Each dictionary has the following structure: - \'name\': a string representing the student\'s name - \'student_id\': a string representing the student\'s ID - \'courses\': a list of strings where each string is a course that the student has completed If a student appears in both lists (determined by their student ID), merge their records by combining the \'courses\' lists and retaining the \'name\' and \'student_id\' from either record. The function should return a list of dictionaries that include all unique records, with duplicates merged as described. # Input - Two lists of dictionaries, `records1` and `records2`, where each dictionary contains the keys \'name\', \'student_id\', and \'courses\'. # Output - A list of dictionaries representing the merged student records. # Examples Example 1 # Input ```python records1 = [ {\'name\': \'Alice\', \'student_id\': \'S001\', \'courses\': [\'Math\', \'Science\']}, {\'name\': \'Bob\', \'student_id\': \'S002\', \'courses\': [\'History\']} ] records2 = [ {\'name\': \'Alice B.\', \'student_id\': \'S001\', \'courses\': [\'English\']}, {\'name\': \'Charlie\', \'student_id\': \'S003\', \'courses\': [\'Math\']} ] ``` # Output ```python [ {\'name\': \'Alice\', \'student_id\': \'S001\', \'courses\': [\'Math\', \'Science\', \'English\']}, {\'name\': \'Bob\', \'student_id\': \'S002\', \'courses\': [\'History\']}, {\'name\': \'Charlie\', \'student_id\': \'S003\', \'courses\': [\'Math\']} ] ``` # Constraints - The input lists `records1` and `records2` can have up to 1000 records each. - Each `student_id` is unique within each list. - Course names within a single student\'s \'courses\' list are distinct. Develop the function `merge_records` to achieve the above functionality and ensure efficiency with the given constraints.","solution":"def merge_records(records1, records2): student_dict = {} # Merge records from the first list for record in records1: student_id = record[\'student_id\'] if student_id not in student_dict: student_dict[student_id] = record else: # Merge courses if the student exists student_dict[student_id][\'courses\'] = list(set(student_dict[student_id][\'courses\'] + record[\'courses\'])) # Merge records from the second list for record in records2: student_id = record[\'student_id\'] if student_id not in student_dict: student_dict[student_id] = record else: # Merge courses if the student exists student_dict[student_id][\'courses\'] = list(set(student_dict[student_id][\'courses\'] + record[\'courses\'])) # Return the list of merged records return list(student_dict.values())"},{"question":"Mina is an avid book collector who has a vast library of books arranged in multiple bookshelves. Each bookshelf can have books of varying heights, but Mina wants the books on each individual shelf to be arranged in such a way that no book is taller than the book to its right. Mina needs help re-arranging the books on each shelf to fulfill this condition. Can you write a program that will help Mina achieve this goal? Input: The first line of input will contain an integer t, the number of test cases. For each test case, the first line contains an integer n, the number of books on the current shelf. The next line contains n space-separated integers representing the heights of the books on that shelf. Output: For each test case, print a single line containing the heights of the books in sorted order, separated by spaces. Constraints: 1 ≤ t ≤ 20 1 ≤ n ≤ 1000 1 ≤ height of each book ≤ 10000 SAMPLE INPUT 2 5 7 4 6 3 9 4 10 1 5 2 SAMPLE OUTPUT 3 4 6 7 9 1 2 5 10","solution":"def rearrange_books(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] books = test_cases[i][1] sorted_books = sorted(books) results.append(\\" \\".join(map(str, sorted_books))) return results # Example usage: # t = 2 # test_cases = [ # (5, [7, 4, 6, 3, 9]), # (4, [10, 1, 5, 2]) # ] # print(rearrange_books(t, test_cases)) # Expected output: # [\'3 4 6 7 9\', \'1 2 5 10\']"},{"question":"You are given a string containing only lowercase alphabets. You need to process this string and return a new string that rearranges the characters such that two same characters are not adjacent to each other. If it is not possible to rearrange the characters this way, return an empty string. Input The first line of input contains a single integer t, representing the number of test cases. The following t lines each contain a single string s. Output For each test case, print the rearranged string if possible. Otherwise, print an empty string. Constraints 1 ≤ t ≤ 10 1 ≤ |s| ≤ 1000 Example Input 2 aabbcc aaab Output abcabc (empty string) Explanation For the first test case, one of the possible rearrangements is \\"abcabc\\". For the second test case, it is not possible to rearrange the characters to avoid adjacent duplicates, so the output is an empty string.","solution":"from heapq import heappop, heappush from collections import Counter def rearrange_string(s): Rearrange the characters of the string such that no two adjacent characters are the same. Args: s (str): The input string containing only lowercase alphabets. Returns: str: The rearranged string if possible, otherwise an empty string. count = Counter(s) max_heap = [] for char, freq in count.items(): heappush(max_heap, (-freq, char)) # Use negative frequency for max heap (heapq is a min-heap by default) prev_char, prev_freq = None, 0 result = [] while max_heap: freq, char = heappop(max_heap) result.append(char) if prev_freq < 0: heappush(max_heap, (prev_freq, prev_char)) prev_char = char prev_freq = freq + 1 # Decrement the frequency result_str = \'\'.join(result) if len(result_str) != len(s): return \\"\\" return result_str def process_cases(t, cases): results = [] for case in cases: results.append(rearrange_string(case)) return results"},{"question":"Given a binary matrix grid, you need to find the largest square containing only 1\'s and return its area. A square is formed by 1\'s only if every element in the square is 1. Example 1: Input: grid = [ [\\"1\\",\\"0\\",\\"1\\",\\"0\\",\\"0\\"], [\\"1\\",\\"0\\",\\"1\\",\\"1\\",\\"1\\"], [\\"1\\",\\"1\\",\\"1\\",\\"1\\",\\"1\\"], [\\"1\\",\\"0\\",\\"0\\",\\"0\\",\\"0\\"] ] Output: 4 Explanation: The largest square containing only 1\'s has an area of 4. Example 2: Input: grid = [ [\\"0\\",\\"1\\"], [\\"1\\",\\"0\\"] ] Output: 1 Explanation: The largest square containing only 1\'s has an area of 1. Your Task: You don\'t have to read input or print anything. Your task is to complete the function findMaxSquare() which takes the binary matrix grid and returns the area of the largest square containing only 1\'s. Expected Time Complexity: O(m*n) Expected Space Complexity: O(m*n) Constraints: 1 <= m, n <= 300 grid[i][j] is \'0\' or \'1\'.","solution":"def findMaxSquare(grid): if not grid or not grid[0]: return 0 rows = len(grid) cols = len(grid[0]) dp = [[0] * cols for _ in range(rows)] max_side = 0 for i in range(rows): for j in range(cols): if grid[i][j] == \'1\': if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side * max_side"},{"question":"You are given two integers n and k representing the dimensions of a rectangular grid that is n rows tall and k columns wide. Each cell in the grid can contain either a 0 or a 1. The grid is initially filled with 0s. You can perform operations on the grid. In a single operation, you select any cell and toggle its value (i.e., change a 0 to a 1 or a 1 to a 0) along with all other cells in the same row and column as the selected cell. Your task is to find the minimum number of operations required to turn the entire grid into a grid where all cells contain 1s. ----Input---- The only line of the input contains two integers n and k (1 leq n, k leq 1000). ----Output---- Output a single integer, the minimum number of operations needed to transform the entire grid into a grid full of 1s. ----Examples---- Input 2 2 Output 1 Input 3 3 Output 1 Input 2 3 Output 1 ----Note---- In the first sample, performing the operation on the cell (1,1) will toggle all cells in the first row and the first column to 1, making the entire grid all 1s with only one operation. In the second sample, performing the operation on any cell will make the entire grid all 1s with just one operation.","solution":"def min_operations_to_all_ones(n, k): Returns the minimum number of operations needed to turn an n x k grid full of zeros into a grid full of ones. # Regardless of the dimensions of the grid, selecting any single cell toggles the whole grid return 1"},{"question":"Alice has a collection of `N` pairs of socks, each pair being a different color. She wants to organize them in such a way that in her closet, any sock she pulls out has at least one other matching sock nearby. She can only stack the socks in a single pile. Given the constraint, you need to decide the minimum number of socks Alice must pull out from the pile to ensure she definitely has at least one matching pair. Example: Input: N = 3 Output: 4 Explanation: If she pulls out 4 socks from 3 pairs, she is guaranteed to have at least one matching pair. Example: Input: N = 5 Output: 6 Explanation: If she pulls out 6 socks from 5 pairs, she is guaranteed to have at least one matching pair. Your Task: You don\'t need to read input or print anything. Your task is to complete the function minSocks() which takes an Integer N as input and returns the answer. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^5","solution":"def min_socks(N): Returns the minimum number of socks Alice has to pull out to ensure she has at least one matching pair. :param N: An integer representing the number of pairs of socks :return: An integer representing the minimum number of socks # To ensure at least one matching pair, she needs to pull out N+1 socks return N + 1 # Example usage: # N = 3 # The result will be 4 because if she pulls out 4 socks from 3 pairs, # she will definitely have at least one matching pair. min_socks(3) # 4"},{"question":"In a certain operating system, processes are represented by their unique process IDs (PIDs) and their priorities. Each process can have a priority between 1 and 100 inclusive, where 1 is the highest priority and 100 is the lowest priority. You are asked to simulate a simplified scheduler that always picks the highest priority process available to run next. If multiple processes have the same (highest) priority, the process that arrived first should be chosen. Write a program that processes a sequence of events related to process management and outputs the execution order of the processes. Each event is represented by a single line of input that can be one of the following: 1. \\"NEW p t\\" — a new process with priority p and unique PID t arrives 2. \\"RUN\\" — the scheduler should pick the next process to run according to the described rules 3. \\"END\\" — end of the input (note that this event is guaranteed to be the last event) ---Input--- - The input consists of multiple lines. Each line represents one of the possible events. - The priority p is an integer between 1 and 100 inclusive. - The PID t is an integer that is unique and not negative. ---Output--- - For each \\"RUN\\" event, output the PID of the next process to be run. - If there are no processes available to run when a \\"RUN\\" event is received, output \\"NO PROCESS\\". ---Examples--- Input NEW 10 1 NEW 5 2 NEW 10 3 RUN RUN RUN RUN END Output 2 1 3 NO PROCESS Explanation The scheduler picks process ID 2 first because it has the highest priority (5). Next, it picks process ID 1, then process ID 3. Since no processes are left, the last \\"RUN\\" outputs \\"NO PROCESS\\".","solution":"from collections import deque import heapq class Scheduler: def __init__(self): self.processes = [] # Min-heap to keep processes by priority and arrival order self.counter = 0 # Counter to keep track of the arrival order def new_process(self, priority, pid): heapq.heappush(self.processes, (priority, self.counter, pid)) self.counter += 1 def run_process(self): if self.processes: _, _, pid = heapq.heappop(self.processes) return pid else: return \\"NO PROCESS\\" def process_events(events): scheduler = Scheduler() result = [] for event in events: parts = event.split() if parts[0] == \\"NEW\\": _, priority, pid = parts scheduler.new_process(int(priority), int(pid)) elif parts[0] == \\"RUN\\": result.append(scheduler.run_process()) elif parts[0] == \\"END\\": break return result"},{"question":"You are given a collection of N cards, each card has a positive integer written on it. There are two types of queries that can be performed on this collection of cards: 1. Update a card: Given an index and a value, update the card at that index to the new value. 2. Count primes: Given a range [L, R], count the number of cards in this range which have a value that is a prime number. Your task is to handle M such queries efficiently. # Input The first line contains a single integer N (1 ≤ N ≤ 10^5), the number of cards. The second line contains N space-separated integers, representing the values of the cards. The third line contains a single integer M (1 ≤ M ≤ 10^5), the number of queries. The following M lines describe the queries in one of the following formats: - \\"1 i x\\" (1 ≤ i ≤ N, 1 ≤ x ≤ 10^6), meaning update the i-th card value to x. - \\"2 L R\\" (1 ≤ L ≤ R ≤ N), meaning count the number of primes in the range from L to R (inclusive). # Output For each query of type 2, output the count of prime numbers in the specified range. # Constraints - Each card value is initially between 1 and 10^6. - Both card values and the number of queries can be large, so your solution should be efficient. # Example Input ``` 5 1 6 3 4 5 3 2 1 3 1 4 7 2 1 5 ``` Output ``` 1 2 ``` # Explanation - Initially, the card values are [1, 6, 3, 4, 5]. - The first query asks to count primes in the range [1, 3], which are [1, 6, 3]. Only 3 is prime. - The second query updates the 4th card to 7. Now the card values are [1, 6, 3, 7, 5]. - The third query asks to count primes in the range [1, 5], which are [1, 6, 3, 7, 5]. The primes are 3, 7, and 5, so the answer is 2.","solution":"import math class CardCollection: def __init__(self, values): self.values = values def is_prime(self, n): if n <= 1: return False if n == 2: return True if n % 2 == 0: return False max_divisor = int(math.sqrt(n)) for i in range(3, max_divisor + 1, 2): if n % i == 0: return False return True def update(self, i, x): self.values[i - 1] = x def count_primes_in_range(self, L, R): count = 0 for i in range(L - 1, R): if self.is_prime(self.values[i]): count += 1 return count def process_queries(N, card_values, M, queries): card_collection = CardCollection(card_values) results = [] for query in queries: if query[0] == 1: _, i, x = query card_collection.update(i, x) elif query[0] == 2: _, L, R = query results.append(card_collection.count_primes_in_range(L, R)) return results"},{"question":"You are given an array a consisting of n integers. In one move, you can choose two indices 1 le i, j le n such that i ne j, add the elements at these indices, and place the result back into one of these indices (that is, you choose i and j, and set either a_i := a_i + a_j or a_j := a_i + a_j). You can perform such moves any number of times (possibly, zero). Your task is to determine the maximum number of distinct integers that can be obtained in the array after performing the operations. Note that the resulting array must contain elements within the original given numbers. You have to solve for multiple test cases. -----Input----- The first line of the input contains one integer t (1 le t le 1000) — the number of test cases. The next 2t lines describe test cases. The first line of the test case contains one integer n (1 le n le 100) — the number of elements in a. The second line of the test case contains n integers a_1, a_2, dots, a_n (1 le a_i le 100), where a_i is the i-th element of a. It is guaranteed that the sum of n over all test cases does not exceed 1000 (sum n le 1000). -----Output----- For each test case, print the maximum number of distinct integers that can be obtained. -----Example----- Input 3 3 1 2 3 4 4 5 6 7 5 10 20 30 40 50 Output 3 4 5","solution":"def max_distinct_integers(t, test_cases): This function takes the number of test cases and the test cases themselves, and returns the maximum number of distinct integers that can be obtained in each test case. results = [] for test_case in test_cases: n, a = test_case distinct_elements = len(set(a)) results.append(distinct_elements) return results"},{"question":"Carlos loves cakes very much, so he decided to open a cake shop. However, he knows that the sweetness of cakes is the most critical factor for success. He found out that each ingredient adds a certain level of sweetness to the cake, and different ingredients combined can have a complex impact on the overall sweetness. Carlos has n ingredients, each with a sweetness value. However, he can only use each ingredient once in each cake. This creates a problem for him—he wants to maximize the total sweetness of his cakes using exactly k ingredients. Write a program to help Carlos find the maximum possible sweetness value of a cake that can be made by selecting exactly k different ingredients out of n available ingredients. -----Input----- The first line contains two integers n and k (1 ≤ k ≤ n ≤ 2000) — the number of ingredients and the number of ingredients to be used in a cake, respectively. The second line contains n integers s_1, s_2, ..., s_n (-10^9 ≤ s_i ≤ 10^9) — the sweetness values of the ingredients. -----Output----- Print one integer — the maximum possible sweetness value of a cake that can be made by selecting exactly k different ingredients. -----Examples----- Input 5 3 1 2 5 8 3 Output 16 Input 6 3 -5 -8 -3 -2 -1 0 Output -3 Input 4 2 10 20 -5 -10 Output 30 -----Note----- In the first sample, Carlos can select ingredients with sweetness values 8, 5, and 3 to get a maximum sweetness value of 16. In the second sample, even though all sweetness values are negative, Carlos should still choose the least negative values, which are -1, -2, and 0, thus the maximum possible sweetness value is -3. In the third sample, the optimal selection would be the ingredients with sweetness values 20 and 10, for a total sweetness value of 30.","solution":"def max_sweetness(n, k, sweetness_values): Find the maximum possible sweetness value of a cake using exactly k ingredients out of n available ingredients. Parameters: n (int): The number of ingredients. k (int): The number of ingredients to be used in a cake. sweetness_values (list of int): The sweetness values of the ingredients. Returns: int: The maximum possible sweetness value of the cake. # Sort the sweetness values in descending order sorted_sweetness = sorted(sweetness_values, reverse=True) # Sum up the top k sweetness values max_sweetness_value = sum(sorted_sweetness[:k]) return max_sweetness_value"},{"question":"You are given two integers n and m which represent the dimensions of a grid, as well as an integer r. The grid is initially filled with zeros. You need to perform the following operation exactly r times: 1. Choose a subgrid of size a x b (1 ≤ a ≤ n, 1 ≤ b ≤ m). 2. Increment all elements inside this subgrid by 1. Your task is to determine the minimum and maximum possible sum of all elements in the grid after performing exactly r operations. -----Input----- The first line contains three integers n, m, and r (1 ≤ n, m, r ≤ 1000). -----Output----- Print two integers separated by a space: the minimum and maximum possible sum of the grid after r operations. -----Examples----- Input 2 2 1 Output 1 4 Input 2 2 3 Output 3 6 -----Note----- In the first sample, with n = 2 and m = 2, there is a 2x2 grid. Performing the operation once will affect all four cells of the grid. The minimum and maximum sums achievable are both 4. In the second sample, performing the operation three times can lead to different outcomes. One way to achieve the minimum sum is to add 1 to the subgrid [1, 1] three times, resulting in a sum of 3. The maximum sum can be achieved by affecting all cells three times, leading to a sum of 6.","solution":"def min_max_sum(n, m, r): Returns the minimum and maximum possible sum of all elements in the grid after performing exactly r subgrid increment operations. # The minimum sum is achieved by incrementing the same cell r times min_sum = r # The maximum sum is achieved by incrementing all cells in the grid evenly r times # The operation affects all cells, so the sum is incremented r times for each cell max_sum = r * n * m return (min_sum, max_sum)"},{"question":"Given an array of integers, you need to calculate the number of unique pairs of elements `(a, b)` such that their sum is equal to a given target number. Each input will have a specific target sum and the result must be derived for each test case individually. -----Input:----- - First-line will contain T, the number of test cases. - Each test case starts with an integer N, the length of the array. - The next line contains N integers, the elements of the array. - The following line contains a single integer K, the target sum. -----Output:----- For each test case, output a single integer indicating the number of unique pairs that sum up to K. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 10^5 - -10^9 leq text{Array elements} leq 10^9 - -10^9 leq K leq 10^9 -----Sample Input:----- 2 4 1 5 7 -1 6 3 10 20 30 50 -----Sample Output:----- 2 1 -----EXPLANATION:----- For the first test case, the pairs (1, 5) and (7, -1) sum up to 6. Thus, there are two unique pairs. For the second test case, only the pair (20, 30) sums up to 50. Thus, there is one unique pair.","solution":"def count_unique_pairs(arr, target): Returns the number of unique pairs (a, b) in the array `arr` such that a + b equals the `target` sum. seen = set() pairs = set() count = 0 for num in arr: if target - num in seen: if (num, target - num) not in pairs and (target - num, num) not in pairs: pairs.add((num, target - num)) count += 1 seen.add(num) return count def process_test_cases(test_cases): results = [] for test_case in test_cases: N, arr, K = test_case result = count_unique_pairs(arr, K) results.append(result) return results"},{"question":"In a bustling city, there is a network of intersections connected by roads. Rideshare companies are looking for a way to optimize the travel time of their cars across the city. The city plan can be modeled as a graph where intersections are nodes and roads are edges with travel times as weights. A central rideshare facility wants to compute the shortest path from their headquarters at a specific intersection to all other intersections. Write a program that determines the shortest travel time from the headquarters to each intersection in the city. -----Input----- The first line in the input contains two integers n (1 leq n leq 1000) and m (0 leq m leq 10000) representing the number of intersections and the number of roads, respectively. Then follows one line with an integer k (0 leq k < n), the index of the intersection where the headquarters is located. The subsequent m lines specify the roads. Each road is described by three integers u and v (0 le u, v < n) and t (1 le t le 10000), indicating there is a road connecting intersection u to intersection v with a travel time of t. -----Output----- The output should consist of n lines. The i-th line should contain a single integer representing the shortest travel time from the headquarters to the i-th intersection. If an intersection is not reachable from the headquarters, print \\"INF\\" for that intersection. -----Examples----- Sample Input: 5 6 0 0 1 2 1 2 4 0 2 5 2 3 6 1 4 10 3 4 1 Sample Output: 0 2 5 11 12","solution":"import heapq def shortest_paths_from_hq(n, m, k, roads): Determines the shortest travel time from the headquarters to each intersection in the city. Parameters: n (int): Number of intersections. m (int): Number of roads. k (int): Index of the headquarter intersection. roads (list of tuples): Roads, where each road is represented as (u, v, t). u (int): Starting intersection of the road. v (int): Ending intersection of the road. t (int): Travel time between u and v. Returns: list: A list of shortest travel times from the headquarters to each intersection. \\"INF\\" if an intersection is not reachable from the headquarters. from collections import defaultdict import heapq # Create an adjacency list graph = defaultdict(list) for u, v, t in roads: graph[u].append((v, t)) graph[v].append((u, t)) # assuming undirected graph # Implement Dijkstra\'s algorithm distances = [float(\'inf\')] * n distances[k] = 0 priority_queue = [(0, k)] # (distance, node) while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) # Replace float(\'inf\') with \\"INF\\" for unreachable nodes return [distance if distance != float(\'inf\') else \\"INF\\" for distance in distances]"},{"question":"You are given an array of integers. Your task is to sort the array in such a way that the even numbers appear in ascending order on the left side and the odd numbers appear in descending order on the right side. Input The first line contains T, the number of testcases. Each testcase: first line contains N, the size of the array, followed by N integers in the next line. Output For each testcase, print the sorted array in one line. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 0 ≤ A[i] ≤ 10^9 SAMPLE INPUT 2 5 4 3 2 7 6 6 5 4 3 2 1 0 SAMPLE OUTPUT 2 4 6 7 3 0 2 4 5 3 1 Explanation For first testcase: Even numbers sorted in ascending order are 2, 4, 6 and odd numbers sorted in descending order are 7, 3. For second testcase: Even numbers sorted in ascending order are 0, 2, 4 and odd numbers sorted in descending order are 5, 3, 1.","solution":"def sort_array_based_on_parity(test_cases): results = [] for case in test_cases: n, arr = case even_numbers = sorted([x for x in arr if x % 2 == 0]) odd_numbers = sorted([x for x in arr if x % 2 != 0], reverse=True) results.append(even_numbers + odd_numbers) return results def parse_input(input_lines): index = 0 T = int(input_lines[index]) index += 1 test_cases = [] for _ in range(T): N = int(input_lines[index]) index += 1 array = list(map(int, input_lines[index].split())) index += 1 test_cases.append((N, array)) return test_cases def main(input_lines): test_cases = parse_input(input_lines) results = sort_array_based_on_parity(test_cases) for result in results: print(\\" \\".join(map(str, result)))"},{"question":"Prime Subsequence Sum You are given a list of integers and asked to find the prime subsequence with the highest sum. The sequence does not have to be contiguous, but it must be a subsequence of the original list and each element in the subsequence must be a prime number. If no prime subsequence exists, return \\"NONE\\". # Input The input consists of multiple datasets, each in the following format: n a1 a2 ... an A dataset consists of two lines. In the first line, the number of elements n is given, where 2 ≤ n ≤ 1000. In the second line, a1, a2, ..., an represent the elements of the list. Each element ai (1 ≤ i ≤ n) is an integer with absolute value less than or equal to 10,000. The end of the input is indicated by a line containing a zero. # Output For each dataset, output the sum of the prime subsequence with the highest sum, or \\"NONE\\" if no prime subsequence exists. # Sample Input 5 2 3 6 7 11 6 4 6 8 9 10 15 8 -11 7 -5 3 -2 5 1 11 1 15 0 # Output for the Sample Input 23 NONE 26 NONE # Example Input 5 2 3 6 7 11 6 4 6 8 9 10 15 8 -11 7 -5 3 -2 5 1 11 1 15 0 Output 23 NONE 26 NONE","solution":"def is_prime(number): Checks if a number is prime. if number <= 1: return False if number == 2: return True if number % 2 == 0: return False for i in range(3, int(number**0.5) + 1, 2): if number % i == 0: return False return True def max_prime_subsequence_sum(n, elements): Returns the sum of the prime subsequence with the highest sum, or \\"NONE\\" if no prime subsequence exists. prime_elements = [x for x in elements if is_prime(x)] if not prime_elements: return \\"NONE\\" return sum(prime_elements) def process_input(input_list): Processes a list of input strings and returns the results for each dataset. results = [] i = 0 while i < len(input_list): n = int(input_list[i]) if n == 0: break elements = list(map(int, input_list[i + 1].split())) result = max_prime_subsequence_sum(n, elements) results.append(result) i += 2 return results"},{"question":"You are organizing a team-building event and plan to form teams from a group of participants. The goal is to form the maximum number of balanced teams. A balanced team consists of exactly `a` males and `b` females. Additionally, each team must have the same number of males and females, i.e., `a` must equal `b`. It\'s possible that not all participants will be used. You have to find out the maximum possible number of balanced teams that you can form. -----Input----- The first line of input contains three integers p, q, and r (1 ≤ p, q, r ≤ 10^9), where p is the total number of participants, q is the number of males, and r is the number of females. -----Output----- Output a single integer: the maximum number of balanced teams that can be formed. -----Examples----- Input 12 5 7 Output 5 Input 9 10 9 Output 9 Input 1000000000 500000000 500000000 Output 500000000 Input 100 30 70 Output 30","solution":"def max_balanced_teams(p, q, r): Returns the maximum number of balanced teams that can be formed where each team consists of an equal number of males and females. :param p: Total number of participants :param q: Total number of males :param r: Total number of females :return: Maximum number of balanced teams # The maximum number of balanced teams is determined by the minimum of q and r return min(q, r)"},{"question":"A common problem that arises when dealing with arrays and lists is finding the maximum difference between any two elements such that the larger element appears after the smaller element. Given an array of integers, you are to find the maximum difference between any two elements under this condition. For example, if the input array is [1, 2, 90, 10, 110], the maximum difference is 109 (110 - 1). Write a function that takes an array of integers as input and returns the maximum difference. -----Input----- An integer array A containing n elements where 1 leq n leq 1000 and -10^6 leq A[i] leq 10^6 for each element in the array. -----Output----- Output the maximum difference. -----Examples----- Sample Input 1: [1, 2, 90, 10, 110] Sample Output 1: 109 Sample Input 2: [7, 9, 5, 6, 3, 2] Sample Output 2: 2","solution":"def max_difference(arr): if len(arr) < 2: return 0 # If there\'s less than 2 elements, return 0 (no valid difference) min_val = arr[0] max_diff = 0 for i in range(1, len(arr)): if arr[i] < min_val: min_val = arr[i] else: diff = arr[i] - min_val if diff > max_diff: max_diff = diff return max_diff # Example usage: # print(max_difference([1, 2, 90, 10, 110])) # should return 109 # print(max_difference([7, 9, 5, 6, 3, 2])) # should return 2"},{"question":"Doremy is organizing a coding bootcamp and has n students, represented by an array b of length n, where b_i indicates the skill level of the i-th student. She wants to form a study group by selecting a contiguous subarray [b_l, b_{l+1}, ldots, b_r] where l leq r and maximize the difference between the sum of skill levels and the number of distinct skill levels in this subarray. Define sum(l,r) as the sum of elements in the subarray [b_l, b_{l+1}, ldots, b_r] and distinct(l,r) as the number of distinct elements in this subarray. Choose 2 integers l and r such that l leq r and sum(l,r) - distinct(l,r) is maximized. -----Input----- The input consists of multiple test cases. The first line contains a single integer t (1le tle 10^4) — the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n (1 le n le 10^5) — the length of the array b. The second line of each test case contains n integers b_1, b_2, ldots, b_n (1 le b_i le 10^5). It is guaranteed that the sum of n does not exceed 10^5. -----Output----- For each test case, output l and r such that l leq r and sum(l,r) - distinct(l,r) is maximized. If there are multiple solutions, you may output any. -----Examples----- Input 3 5 1 2 3 3 4 4 2 2 1 3 3 1 1 1 Output 1 5 1 4 1 3 -----Note----- In the first test case, b=[1,2,3,3,4]. When l=1 and r=5, sum(l,r)=13 and distinct(l,r)=4. When l=2 and r=5, sum(l,r)=12 and distinct(l,r)=3. Choosing l=2 and r=5 maximizes sum(l,r) - distinct(l,r) as 12 - 3 = 9.","solution":"def maximize_difference(t, test_cases): results = [] for case in test_cases: n, b = case max_diff = -float(\'inf\') l, r = 0, 0 sum_so_far = 0 distinct_so_far = {} # We use a sliding window approach with two pointers start = 0 for end in range(n): sum_so_far += b[end] if b[end] in distinct_so_far: distinct_so_far[b[end]] += 1 else: distinct_so_far[b[end]] = 1 # Calculate the difference current_diff = sum_so_far - len(distinct_so_far) if current_diff > max_diff: max_diff = current_diff l, r = start + 1, end + 1 # Adjust the start pointer if necessary while sum_so_far - len(distinct_so_far) < max_diff and start <= end: sum_so_far -= b[start] distinct_so_far[b[start]] -= 1 if distinct_so_far[b[start]] == 0: del distinct_so_far[b[start]] start += 1 results.append((l, r)) return results"},{"question":"You are given a number of test cases. Each test case consists of a string of digits, which represents a large integer. Your task is to determine if the integer is divisible by 3. A number is divisible by 3 if the sum of its digits is divisible by 3. Input The first input line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. The next t lines contain one string of digits each. The length of each string is at least 1 and at most 10^5. Output For each test case, output \\"YES\\" if the integer is divisible by 3, otherwise, output \\"NO\\". Examples Input 3 123 111111 987654321 Output YES YES YES Input 2 10 200000000000 Output NO NO Note In the first sample, the sum of the digits of the integer \\"123\\" is 1 + 2 + 3 = 6 which is divisible by 3. Thus, the output is \\"YES\\". Likewise for the other integers in the first sample. In the second sample, the sum of the digits of the integer \\"10\\" is 1 + 0 = 1 which is not divisible by 3, so the output is \\"NO\\". Similarly for the second integer in the second sample.","solution":"def is_divisible_by_3(test_cases): result = [] for number in test_cases: digit_sum = sum(int(digit) for digit in number) if digit_sum % 3 == 0: result.append(\\"YES\\") else: result.append(\\"NO\\") return result"},{"question":"Given a list of employees in a company where each employee has a set of skills, your task is to determine if there exists an ability to form a project team where everyone in the team is connected either directly or indirectly through at least one common skill. -----Input----- The input consists of: - One line with an integer n (2 leq n leq 2cdot 10^5), the number of employees. The employees are numbered from 1 to n. - n lines, each describing the skills of the employees. The ith such line starts with an integer s_i (1 leq s_i leq 2cdot 10^5), the number of skills that employee i has. The remainder of the line contains s_i distinct integers k_{i,1},ldots ,k_{i,s_i} (1 leq k_{i,j} leq 10^9 for each j), representing the skills of employee i. It is guaranteed that the sum over all s_i is at most 2cdot 10^5. -----Output----- Output a proof in the form of n-1 lines, each of which contains three integers a, b and c, where a and b are distinct employees that both possess the skill represented by c. Using only these relations, it must be possible to show that any pair of employees in the company are connected either directly or indirectly through skills. If no such proof exists, output “impossible”. If there are multiple proofs, you may output any one of them. -----Examples----- Sample Input: 5 3 100 200 300 2 300 400 3 500 200 600 1 100 2 400 500 Sample Output: 1 4 100 1 2 300 5 2 400 5 3 500","solution":"def find(x, parent): if parent[x] != x: parent[x] = find(parent[x], parent) return parent[x] def union(x, y, parent, rank): rootX = find(x, parent) rootY = find(y, parent) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 def form_project_team(n, employees): # Union-Find setup parent = list(range(n+1)) rank = [0] * (n + 1) edges = [] skill_to_employees = {} # Map skills to employees for i in range(n): for skill in employees[i][1:]: if skill not in skill_to_employees: skill_to_employees[skill] = [] skill_to_employees[skill].append(i + 1) # Create edges from employees sharing skills for skill, employee_list in skill_to_employees.items(): for i in range(1, len(employee_list)): if find(employee_list[0], parent) != find(employee_list[i], parent): union(employee_list[0], employee_list[i], parent, rank) edges.append((employee_list[0], employee_list[i], skill)) # Check if all employees are connected rep = find(1, parent) for i in range(2, n+1): if find(i, parent) != rep: return \\"impossible\\" # If connected, return the edges return edges"},{"question":"A group of scientists is studying a special type of network composed of N nodes connected by weighted edges. For their experiments, they need to find the \\"network efficiency\\" value. The efficiency of the network is defined as the sum of the weight of the edges in the minimum spanning tree (MST) of the network. To help the scientists, write a program that: - Constructs the MST of the given network. - Calculates the total weight of the MST. You can assume the network is always connected and no two edges have the same weight. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. - For each test case, the first line contains two integers N and M — the number of nodes and edges in the network, respectively. - Each of the next M lines contains three integers: u, v, and w — representing an edge between nodes u and v with weight w. ------ Output Format ------ For each test case, output a single line containing the total weight of the MST. ------ Constraints ------ 1 ≤ T ≤ 100 2 ≤ N ≤ 1000 1 ≤ M ≤ 10000 1 ≤ w ≤ 10000 1 ≤ u, v ≤ N ----- Sample Input 1 ------ 2 4 5 1 2 10 1 3 6 2 3 5 3 4 4 2 4 1 3 3 1 2 2 1 3 3 2 3 1 ----- Sample Output 1 ------ 11 3 ----- explanation 1 ------ Test case 1: The MST includes the edges (2, 4), (3, 4), and (2, 3) with a total weight of 1 + 4 + 6 = 11. Test case 2: The MST includes the edges (2, 3) and (1, 2) with a total weight of 1 + 2 = 3.","solution":"from heapq import heappop, heappush def find(parent, i): # Find function with path compression if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): # Union function with union by rank root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 def kruskal(N, edges): # Kruskal\'s algorithm for finding the Minimum Spanning Tree (MST) parent = [i for i in range(N)] rank = [0] * N mst_weight = 0 mst_edges = [] edges.sort(key=lambda x: x[2]) # Sort edges by weight for edge in edges: u, v, w = edge if find(parent, u) != find(parent, v): union(parent, rank, u, v) mst_weight += w mst_edges.append(edge) return mst_weight def network_efficiency(T, test_cases): results = [] for test_case in test_cases: N, M, edges = test_case mst_weight = kruskal(N, edges) results.append(mst_weight) return results # Example usage: # Define the number of test cases T = 2 test_cases = [ (4, 5, [(0, 1, 10), (0, 2, 6), (1, 2, 5), (2, 3, 4), (1, 3, 1)]), (3, 3, [(0, 1, 2), (0, 2, 3), (1, 2, 1)]) ] # Output the MST weight for each test case print(network_efficiency(T, test_cases))"},{"question":"You are tasked with designing a part of a simple ticketing system for movie theaters. The system needs to manage reservations of seats in a theater that has a specified number of rows and columns of seats. Each seat has a unique number assigned in a row-major order starting from 0 (top-left). There are three types of commands you need to implement for this system: reserve, cancel, and check. When you receive a reserve command, if the seat is available (i.e., not reserved), you should mark it reserved. If the seat is already reserved, do nothing. When you receive a cancel command, if the seat is reserved, you should mark it available. If the seat is already available, do nothing. When you receive a check command, you need to check if the seat is reserved or not and output the appropriate message. Input The input consists of one or more datasets. Each dataset is given in the following format: > R C > N > Command1 > Command2 > ... > CommandN R represents the number of rows (1 ≤ R ≤ 1,000) and C represents the number of columns (1 ≤ C ≤ 1,000) in the theater. N represents the number of commands to be executed (1 ≤ N ≤ 10,000). Commandi is the i-th command to be executed. Each command consists of a command name and one or two arguments. The command name consists of only one letter and can be either \\"A\\", \\"C\\", or \\"Q\\". There is a space between the command and the argument or between the arguments. \\"A\\" represents a reserve command, with one argument S (0 ≤ S < R*C), which indicates the seat number to be reserved. \\"C\\" represents a cancel command, with one argument S (0 ≤ S < R*C), which indicates the seat number to be canceled. \\"Q\\" represents a check command, with one argument S (0 ≤ S < R*C), which indicates the seat number to be checked. This command outputs \\"Reserved\\" if the seat is reserved, otherwise it outputs \\"Available\\". The end of the input is indicated by one line containing one \\"0 0\\". Output For each dataset, output the result of each check command on a single line. There should be no extra spaces or newlines after the last output of each dataset. Put a blank line after each dataset. Sample Input 3 5 6 A 2 A 5 Q 2 C 2 Q 2 Q 5 2 2 3 Q 2 A 2 Q 2 0 0 Output for the Sample Input Reserved Available Reserved Available Reserved Example Input 3 5 6 A 2 A 5 Q 2 C 2 Q 2 Q 5 2 2 3 Q 2 A 2 Q 2 0 0 Output Reserved Available Reserved Available Reserved","solution":"def ticketing_system(input_lines): output = [] idx = 0 while idx < len(input_lines): r, c = map(int, input_lines[idx].split()) if r == 0 and c == 0: break seat_count = r * c seats = [False] * seat_count idx += 1 n = int(input_lines[idx]) idx += 1 dataset_output = [] for _ in range(n): command = input_lines[idx].split() cmd_type = command[0] seat_num = int(command[1]) if cmd_type == \'A\': seats[seat_num] = True elif cmd_type == \'C\': seats[seat_num] = False elif cmd_type == \'Q\': dataset_output.append(\\"Reserved\\" if seats[seat_num] else \\"Available\\") idx += 1 output.extend(dataset_output) output.append(\\"\\") return output[:-1] # Remove the last empty string # Example usage and test input_data = [ \\"3 5\\", \\"6\\", \\"A 2\\", \\"A 5\\", \\"Q 2\\", \\"C 2\\", \\"Q 2\\", \\"Q 5\\", \\"2 2\\", \\"3\\", \\"Q 2\\", \\"A 2\\", \\"Q 2\\", \\"0 0\\" ] print(ticketing_system(input_data))"},{"question":"Albert has recently learned about the concept of permutations in his math class. He is fascinated by the number of different ways to arrange a set of unique elements. Now, he wants to write a program that generates the nth permutation of a list of elements in lexicographical order. Given a list of unique elements and a number n, your task is to compute the nth permutation of the list in lexicographical order. If n is greater than the total number of permutations, return \\"Invalid Input\\". Input - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains an integer N, the length of the list. - The second line contains N unique elements separated by spaces. - The third line contains an integer P, which represents the permutation index (1-based). Output For each test case, output the nth permutation of the list in lexicographical order as a space-separated string. If P is greater than the total number of permutations, output \\"Invalid Input\\". Constraints 1 ≤ T ≤ 1000 1 ≤ N ≤ 10 1 ≤ P ≤ 10^7 The elements of the list are distinct alphanumeric characters. Example Input: 2 3 a b c 4 3 1 2 3 7 Output: b c a Invalid Input Explanation For the first test case: The permutations in lexicographical order are: 1. a b c 2. a c b 3. b a c 4. b c a Since P is 4, the output is \\"b c a\\". For the second test case: The permutations in lexicographical order are: 1. 1 2 3 2. 1 3 2 3. 2 1 3 4. 2 3 1 5. 3 1 2 6. 3 2 1 Since P is 7 and there are only 6 permutations, the output is \\"Invalid Input\\".","solution":"from math import factorial def nth_permutation(elements, n): Returns the nth permutation (1-based) of the list of elements. If n is greater than the total number of permutations, returns \\"Invalid Input\\". elements = sorted(elements) length = len(elements) if n > factorial(length): return \\"Invalid Input\\" n -= 1 # Convert to 0-based index result = [] for i in range(length, 0, -1): index, n = divmod(n, factorial(i-1)) result.append(elements.pop(index)) return \\" \\".join(result) def process_test_cases(test_cases): results = [] for test in test_cases: N, elements, P = test result = nth_permutation(elements, P) results.append(result) return results def parse_input(input_lines): Parses the input lines into the format required for the process_test_cases function. test_cases = [] current_line = 0 T = int(input_lines[current_line]) current_line += 1 for _ in range(T): N = int(input_lines[current_line]) current_line += 1 elements = input_lines[current_line].split() current_line += 1 P = int(input_lines[current_line]) current_line += 1 test_cases.append((N, elements, P)) return test_cases"},{"question":"Alex loves playing with dominoes. He likes to arrange them in unique patterns. However, he only has a small table to work on, with space for an arrangement of exactly N dominoes in a row. Each domino covers exactly two units of space and can be placed either horizontally or vertically. Given N, determine the number of unique ways Alex can arrange dominoes to completely cover the row, keeping in mind that some configurations that seem different might be the same when considering symmetrical arrangements (flip or rotation). Input The first line of the input contains T (1 ≤ T ≤ 1000) denoting the number of test cases. Each of the next T lines contains a single integer N (1 ≤ N ≤ 1000) representing the number of dominoes. Output For each test case, output a single integer - the number of unique symmetrical arrangements possible. The result should be printed modulo 998244353. Example Input 3 1 2 3 Output 1 2 5 (Note: The output numbers are just for the example framework and might not correspond to the actual logic needed) Explanation For N = 1, there is only 1 way to arrange dominoes in a 2-unit space: standard horizontal placement. For N = 2, there are 2 unique symmetrical ways: two horizontal dominoes side by side, or two vertical dominoes one above the other.","solution":"MOD = 998244353 def unique_domino_arrangements(N): Calculate the number of unique symmetrical arrangements possible for N dominoes. if N == 1: return 1 if N == 2: return 2 dp = [0] * (N + 1) dp[1] = 1 dp[2] = 2 for i in range(3, N + 1): dp[i] = (dp[i - 1] + dp[i - 2]) % MOD return dp[N] def process_test_cases(T, test_cases): results = [] for n in test_cases: results.append(unique_domino_arrangements(n)) return results # Example usage: # T = 3 # test_cases = [1, 2, 3] # print(process_test_cases(T, test_cases)) # Output should be [1, 2, 3]"},{"question":"Given a list of words, find the length of the longest chain of words that can be formed where each word in the chain has exactly one more character than the previous word, and the previous word can be obtained by deleting exactly one character from the current word. No reordering of characters is allowed. Example 1: Input: words = [\\"a\\", \\"ba\\", \\"bca\\", \\"bda\\", \\"bdca\\"] Output: 4 Explanation: The longest chain is \\"a\\" -> \\"ba\\" -> \\"bda\\" -> \\"bdca\\". Example 2: Input: words = [\\"xbc\\", \\"pcxbcf\\", \\"xb\\", \\"cxbc\\", \\"pcxbc\\"] Output: 5 Explanation: The longest chain is \\"xb\\" -> \\"xbc\\" -> \\"cxbc\\" -> \\"pcxbc\\" -> \\"pcxbcf\\". Your Task: You don\'t need to read input or print anything. Your task is to complete the function longestStrChain(), which takes the list of words as input and returns the length of the longest coin chain. Expected Time Complexity: O(nLogn + n*k^2), where n is the number of words and k is the maximum length of a word. Expected Auxiliary Space: O(n) Constraints: 1 ≤ words.length ≤ 1000 1 ≤ words[i].length ≤ 16 words[i] consists only of lowercase English letters.","solution":"def longestStrChain(words): words.sort(key=len) dp = {} max_length = 1 for word in words: dp[word] = 1 for i in range(len(word)): predecessor = word[:i] + word[i+1:] if predecessor in dp: dp[word] = max(dp[word], dp[predecessor] + 1) max_length = max(max_length, dp[word]) return max_length"},{"question":"You are given a string consisting of lowercase English letters. You are allowed to perform at most one transformation where you can replace a single character in the string with any other lowercase English letter. Your task is to determine whether it is possible to make the given string a palindrome by performing at most one transformation. Example 1: Input: s = \\"abca\\" Output: True Explanation: By replacing \'a\' at index 3 with \'b\', the string becomes \\"abba\\", which is a palindrome. Example 2: Input: s = \\"racecar\\" Output: True Explanation: The string is already a palindrome, so no transformation is needed. Example 3: Input: s = \\"abcdef\\" Output: False Explanation: Even after one transformation, it is not possible to make \\"abcdef\\" a palindrome. Note: 1 <= s.length <= 1000","solution":"def can_be_palindrome_by_one_transform(s): Determines whether it is possible to make the given string a palindrome by performing at most one transformation. Parameters: s (str): The input string consisting of lowercase English letters. Returns: bool: True if it is possible to make the string a palindrome by one transformation, otherwise False. left, right = 0, len(s) - 1 mismatches = 0 while left < right: if s[left] != s[right]: mismatches += 1 if mismatches > 1: return False left += 1 right -= 1 return True"},{"question":"You have a garden with \'n\' trees arranged in a straight line. Each tree provides certain units of shade, represented in an array of integers, `shade[]`, where `shade[i]` is the amount of shade provided by the `i-th` tree. You want to paint a fence using the shade from exactly k consecutive trees. Given the array `shade[]` and the integer `k`, return the maximum amount of shade that can be obtained from any k consecutive trees. For example: Example 1: Input: shade = [2, 1, 5, 1, 3, 2], k = 3 Output: 9 Explanation: By choosing the segment [5, 1, 3], you get 5 + 1 + 3 = 9 shade units. Example 2: Input: shade = [4, 2, 3, 1, 7], k = 2 Output: 8 Explanation: By choosing the segment [1, 7], you get 1 + 7 = 8 shade units. Your Task: You do not need to read input or print anything. Your task is to complete the function `maxShade()` which takes `shade[]` and `k` as input parameters and returns the maximum amount of shade that can be obtained from any k consecutive trees. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 10^5 1 <= shade[i] <= 10^4 1 <= k <= n","solution":"def maxShade(shade, k): Returns the maximum amount of shade that can be obtained from any k consecutive trees. n = len(shade) if k > n: return 0 # Compute the sum of the first \'k\' elements max_shade = current_shade = sum(shade[:k]) # Use sliding window technique to find the maximum sum of \'k\' consecutive elements for i in range(k, n): current_shade += shade[i] - shade[i - k] max_shade = max(max_shade, current_shade) return max_shade"},{"question":"You are given a matrix of integers, where each row is sorted in non-decreasing order. Your task is to write a function that finds the n-th smallest element in the matrix. Input: The first line contains two integers m and n (1 ≤ m, n ≤ 300) — the number of rows and the number of the column in the matrix respectively. The next m lines contain n integers each, where each line represents a sorted row of the matrix. Finally, a single integer k (1 ≤ k ≤ m * n) is provided. Output: Output a single integer — the k-th smallest element in the matrix. Examples: Input 3 3 1 5 9 10 11 13 12 13 15 8 Output 13 Note In the first example, the matrix is: ``` 1 5 9 10 11 13 12 13 15 ``` The 8th smallest element in this matrix is 13.","solution":"def find_kth_smallest(m, n, matrix, k): Returns the k-th smallest element in a sorted matrix. :param m: Number of rows in the matrix :param n: Number of columns in the matrix :param matrix: List of lists, where each sublist represents a row of the matrix :param k: The k-th smallest element to find :return: The k-th smallest element in the matrix import heapq # Create a min-heap min_heap = [] # Initialize heap with the first element of each row for r in range(min(len(matrix), k)): heapq.heappush(min_heap, (matrix[r][0], r, 0)) # Extract-min from heap k times num_count = 0 while min_heap: val, r, c = heapq.heappop(min_heap) num_count += 1 if num_count == k: return val if c + 1 < n: heapq.heappush(min_heap, (matrix[r][c + 1], r, c + 1)) # Example usage: # m = 3 # n = 3 # matrix = [ # [1, 5, 9], # [10, 11, 13], # [12, 13, 15] # ] # k = 8 # print(find_kth_smallest(m, n, matrix, k)) # Output: 13"},{"question":"You are given a list of strings. A string is considered \\"well-formed\\" if it contains only alphabetic characters and has equal numbers of uppercase and lowercase letters. For each string in the list, you need to determine if it is well-formed or not. If it is well-formed, your output should be the length of the string; otherwise, output -1. Input The first line contains an integer n (1 ≤ n ≤ 105) — the number of strings in the given list. The next n lines contain one string each. Each string consists of at most 100 alphabetic characters. Output Print n integers. For each string in the input, print the length of the string if it is well-formed, otherwise print -1. Examples Input 3 aAbB abcD XYzZxy Output 4 -1 6 Input 2 aA aAbb Output 2 -1","solution":"def is_well_formed(s): Check if the string is well-formed. A string is well-formed if it contains only alphabetic characters and has equal numbers of uppercase and lowercase letters. if not s.isalpha(): return -1 uppercase_count = sum(1 for c in s if c.isupper()) lowercase_count = len(s) - uppercase_count return len(s) if uppercase_count == lowercase_count else -1 def process_strings(n, strings): Process a list of strings and determine if each string is well-formed. :param n: An integer, the number of strings. :param strings: A list of strings to be processed. :return: A list of integers where each integer is the length of the corresponding string if it is well-formed, otherwise -1. results = [] for s in strings: results.append(is_well_formed(s)) return results"},{"question":"Given a binary tree, your task is to find the sum of the root-to-leaf path numbers. Each root-to-leaf path in the tree represents a number formed by concatenating the digits (node values) along the path. Example 1: Input: 1 / 2 3 Output: 25 Explanation: There are two root-to-leaf paths, which are: 1. 1 -> 2: this forms the number 12. 2. 1 -> 3: this forms the number 13. So, the sum of these numbers is 12 + 13 = 25. Example 2: Input: 4 / 9 0 / 5 1 Output: 1026 Explanation: There are three root-to-leaf paths, which are: 1. 4 -> 9 -> 5: this forms the number 495. 2. 4 -> 9 -> 1: this forms the number 491. 3. 4 -> 0: this forms the number 40. So, the sum of these numbers is 495 + 491 + 40 = 1026. Your Task: You don\'t need to read input or print anything. Your task is to complete the function sumNumbers() which takes the root node of the binary tree as input and returns the sum of all root-to-leaf path numbers. Expected Time Complexity: O(N), where N is the number of nodes in the binary tree. Expected Auxiliary Space: O(H), where H is the height of the binary tree due to the recursion stack. Constraints: 1 <= Number of nodes in the tree <= 10^4 0 <= Node value <= 9","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sumNumbers(root): Given the root of a binary tree, return the sum of all root-to-leaf numbers. def dfs(node, current_number): if node is None: return 0 current_number = current_number * 10 + node.val if node.left is None and node.right is None: return current_number return dfs(node.left, current_number) + dfs(node.right, current_number) return dfs(root, 0)"},{"question":"You are given a large text consisting of multiple words separated by spaces. Your task is to find the longest substring in the text that appears more than once and has no overlapping characters. If there are several substrings that match the length requirement, return any of them. Input The input consists of a single string with no leading or trailing spaces. The string may contain lowercase Latin letters only, and the total length of the string is between 1 and 100,000 characters long. Output The output should be the longest substring that appears more than once in the input string, and has no overlapping characters. If no such substring exists, output an empty string. Examples Input banana Output ana Input abcabc Output abc","solution":"def longest_repeated_substring(text): def search_substring_of_length(L, text): This function searches for substrings of length L that repeat more than once in the text. It uses a hash set to store seen substrings and checks for repeats. seen = set() for i in range(len(text) - L + 1): sub = text[i:i+L] if sub in seen: return sub seen.add(sub) return None low, high = 0, len(text) result = \\"\\" while low <= high: mid = (low + high) // 2 candidate = search_substring_of_length(mid, text) if candidate: result = candidate low = mid + 1 # Try to find a longer valid substring else: high = mid - 1 # Shorten the length to search for a valid substring return result"},{"question":"You are given an array a containing n distinct integers and a positive integer k. You need to determine whether there exists a pair of elements in the array whose absolute difference is exactly k. If such a pair exists, print \\"YES\\". Otherwise, print \\"NO\\". You have to answer t independent test cases. -----Input----- The first line of the input contains one integer t (1 le t le 10^4) — the number of test cases. Then t test cases follow. The first line of each test case contains two integers n (2 le n le 10^5) — the number of elements in the array and k (1 le k le 10^9) — the required difference. The second line contains n distinct integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 10^5 (sum n le 10^5). -----Output----- For each test case, print the answer — \\"YES\\", if there is at least one pair of elements in the array with an absolute difference of k or \\"NO\\" otherwise. -----Example----- Input 3 5 2 1 5 3 4 2 4 7 10 15 20 25 5 1 3 8 2 1 6 Output YES NO YES","solution":"def find_pair_with_difference(t, test_cases): results = [] for case in test_cases: n, k, array = case num_set = set(array) found = False for num in array: if num + k in num_set or num - k in num_set: found = True break if found: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage: t = 3 test_cases = [ (5, 2, [1, 5, 3, 4, 2]), (4, 7, [10, 15, 20, 25]), (5, 1, [3, 8, 2, 1, 6]) ] print(find_pair_with_difference(t, test_cases))"},{"question":"A thief is planning to rob houses along a street. Each house has a certain amount of money stashed, and the unique constraint that adjacent houses have security systems connected, which means if two adjacent houses are broken into on the same night, the alarm will automatically go off. Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money the thief can rob tonight without alerting the police. For example, given the list of house values, [2, 7, 9, 3, 1], the thief should be able to rob the following houses to maximize the total amount of money: House 1, House 3, and House 5. Therefore, the maximum amount of money he can rob is 2 + 9 + 1 = 12. Write a function that takes a list of non-negative integers representing the amount of money in each house and returns the maximum amount of money the thief can rob without triggering the alarm. Note: - The length of the list can be between 0 and 1000. - Each element in the list is a non-negative integer.","solution":"def rob(nums): Returns the maximum amount of money the thief can rob without alerting the police. :param nums: List[int] :return: int if not nums: return 0 if len(nums) == 1: return nums[0] if len(nums) == 2: return max(nums[0], nums[1]) dp = [0] * len(nums) dp[0] = nums[0] dp[1] = max(nums[0], nums[1]) for i in range(2, len(nums)): dp[i] = max(dp[i - 1], nums[i] + dp[i - 2]) return dp[-1]"},{"question":"Congratulations on being selected to help the Automaton Control Council! Your task is to assist with the debugging of their new line of robots. Each robot\'s processes are defined by a list of tasks, where each task takes a certain amount of time to complete. The council needs a program that filters out tasks based on their duration and returns a list of the tasks with reduced durations. Here are the specifications: - The input will be a list of tuples. Each tuple contains the task\'s name (a string) and the task\'s duration (an integer in minutes). - The program should filter out tasks whose duration is less than a given threshold. - The program should then return a list of tuples, where each tuple contains the task\'s name and the reduced duration. The reduced duration of each task is the original duration minus the threshold value. - If no tasks meet the criteria, return an empty list. Write a function `filter_and_reduce_tasks(tasks: List[Tuple[str, int]], threshold: int) -> List[Tuple[str, int]]` that performs the required operations. Examples: ```python input: [(\\"disassemble\\", 50), (\\"recharge\\", 20), (\\"calibrate\\", 30)], 25 output: [(\\"disassemble\\", 25), (\\"calibrate\\", 5)] input: [(\\"test\\", 10), (\\"charge\\", 5)], 15 output: [] ```","solution":"from typing import List, Tuple def filter_and_reduce_tasks(tasks: List[Tuple[str, int]], threshold: int) -> List[Tuple[str, int]]: Filters and reduces the duration of tasks based on a given threshold. Args: tasks (List[Tuple[str, int]]): List of tuples where each tuple contains a task name and its duration in minutes. threshold (int): The duration threshold. Returns: List[Tuple[str, int]]: List of tuples with task names and their reduced durations. filtered_tasks = [] for task in tasks: task_name, task_duration = task if task_duration >= threshold: reduced_duration = task_duration - threshold filtered_tasks.append((task_name, reduced_duration)) return filtered_tasks"},{"question":"You are asked to help a library manage its inventory of books and reading programs. They need a system to determine how much of each book to order to fulfill the requests from different reading programs. Design a function that will calculate the minimum number of copies needed for each book, based on a list of reading programs. Each reading program specifies the number of copies of each book it requires. You need to output the maximum number of each book required across all reading programs. Example: programs = [ {\\"BookA\\": 5, \\"BookB\\": 3, \\"BookC\\": 0}, {\\"BookA\\": 1, \\"BookB\\": 4, \\"BookC\\": 2}, {\\"BookA\\": 2, \\"BookB\\": 0, \\"BookC\\": 3}, ] This means that: - The first reading program needs 5 copies of BookA, 3 copies of BookB, and no copies of BookC. - The second reading program needs 1 copy of BookA, 4 copies of BookB, and 2 copies of BookC. - The third reading program needs 2 copies of BookA, no copies of BookB, and 3 copies of BookC. Overall, the library needs to order at least: - max(5, 1, 2) = 5 copies of BookA, - max(3, 4, 0) = 4 copies of BookB, - max(0, 2, 3) = 3 copies of BookC Function Description Complete the function `calculate_book_orders` in the editor below. `calculate_book_orders` has the following parameter(s): - programs (list of dictionaries): a list where each dictionary represents the requirements of one reading program. Each dictionary key is a string representing the book name and its value is an integer representing the number of copies required. Returns - dict: a dictionary where each key is a book name and its value is an integer representing the minimum number of copies needed. Input Format Each program\'s requirements are given as a dictionary within a list. The length of the list represents the number of reading programs. Constraints - The list of reading programs is not empty. - Each program dictionary could have different book names. - Each requirement value is a non-negative integer. Example ``` programs = [ {\\"BookA\\": 5, \\"BookB\\": 3}, {\\"BookA\\": 1, \\"BookB\\": 4, \\"BookC\\": 2}, {\\"BookA\\": 2, \\"BookB\\": 0, \\"BookC\\": 3}, ] ``` Output ``` { \\"BookA\\": 5, \\"BookB\\": 4, \\"BookC\\": 3 } ``` Explanation As described above, the library needs to order the maximum of each book requirement from all the reading programs.","solution":"def calculate_book_orders(programs): Calculate the minimum number of copies needed for each book. Args: - programs (list of dict): List of dictionaries where each dictionary specifies the number of copies of each book required by a reading program. Returns: - dict: A dictionary where each key is a book name and its value is the maximum number of copies required across all reading programs. book_orders = {} for program in programs: for book, count in program.items(): if book not in book_orders: book_orders[book] = count else: book_orders[book] = max(book_orders[book], count) return book_orders"},{"question":"A group of scientists is studying the habits of migratory birds. They have recorded the paths of several birds, and each path can be represented as a sequence of directions: \'N\' for north, \'S\' for south, \'E\' for east, and \'W\' for west. They are trying to determine how many of these paths are cyclic. A path is considered cyclic if it starts and ends at the same point on a grid. For example, the path \\"NESW\\" is cyclic because it forms a closed loop. Your task is to help the scientists by writing a function that, given a list of paths, determines how many of these paths are cyclic. Each path is represented as a string of characters, with each character being one of \'N\', \'S\', \'E\', \'W\'. You will receive multiple test cases, and you need to output the number of cyclic paths for each test case. -----Input----- The input starts with a single integer T, the number of test cases. Each of the following T lines contains one path, represented as a string. -----Output----- For each test case, output a single line containing the number of cyclic paths. -----Constraints----- 1 ≤ T ≤ 10000 1 ≤ |path| ≤ 100 -----Example----- Input: 4 NESW NNSS EW NNEESWWS Output: 1 1 1 1 -----Explanation----- For the first test case, \\"NESW\\" leads to the same point after the path is complete, hence it is cyclic. For the second test case, \\"NNSS\\" also leads to the same point, making it cyclic. For the third test case, \\"EW\\" leads back to the starting point. For the fourth test case, \\"NNEESWWS\\" returns to the starting point. Note: The directions indicate movements on a Cartesian plane: - \'N\' increases the y-coordinate by 1. - \'S\' decreases the y-coordinate by 1. - \'E\' increases the x-coordinate by 1. - \'W\' decreases the x-coordinate by 1.","solution":"def is_cyclic_path(path): Determines if a given path is cyclic (starts and ends at the same point). Parameters: path (str): A string representing the path taken by the bird. Returns: bool: True if the path is cyclic, otherwise False. x, y = 0, 0 for direction in path: if direction == \'N\': y += 1 elif direction == \'S\': y -= 1 elif direction == \'E\': x += 1 elif direction == \'W\': x -= 1 return x == 0 and y == 0 def count_cyclic_paths(test_cases): Counts the number of cyclic paths in the given list of paths. Parameters: test_cases (list): A list of strings, where each string represents a path. Returns: list: A list of integers where each integer represents the count of cyclic paths. return [1 if is_cyclic_path(path) else 0 for path in test_cases]"},{"question":"Anna loves to play a game called \\"Tower of Blocks\\". In this game, she has several blocks of different heights, each represented by a positive integer. Anna\'s goal is to rearrange the blocks to form towers in such a way that each tower consists of blocks with the same height. Anna wants to do this in the minimum number of moves, where each move involves either adding or removing a block from a tower. Given an array of integers representing the heights of the blocks, help Anna determine the minimum number of moves required to rearrange the blocks into towers of equal height. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 100) — the number of blocks. The second line contains n positive integers h_1, h_2, ..., h_{n} (1 ≤ h_{i} ≤ 100), where h_{i} is the height of the i-th block. -----Output----- Print a single integer — the minimum number of moves required. -----Examples----- Input 4 1 2 3 3 Output 2 Input 5 4 4 4 4 4 Output 0 Input 3 2 3 4 Output 2 -----Note----- In the first example, Anna can adjust the blocks as follows: - Remove the block of height 1 (1 move) - Remove one block of height 3 (1 move) Thus, forming two towers of height 3. Total moves: 1 + 1 = 2. In the second example, all blocks are already of the same height, so no moves are needed. In the third example, Anna can adjust the blocks as follows: - Remove the block of height 2 (1 move) - Remove the block of height 4 (1 move) Thus, forming one tower of height 3. Total moves: 1 + 1 = 2.","solution":"def min_moves_to_form_towers(n, heights): Returns the minimum number of moves required to rearrange the blocks into towers of equal height. :param n: int - Number of blocks :param heights: list of int - Heights of the blocks :return: int - Minimum number of moves required from collections import Counter # Count the frequency of each height counter = Counter(heights) # Find the maximum frequency max_frequency = max(counter.values()) # The minimum number of moves is the total number of blocks minus the maximum frequency return n - max_frequency"},{"question":"You run a startup that buys and sells vintage cars. Your team has identified that the total profit from each car transaction can be computed as the difference in buying price and selling price of the car. However, due to market fluctuations, certain cars might have been mispriced, leading to incorrect price entries for either buying or selling. You want to identify these mispriced transactions by calculating cumulative profit and identifying when the total profit becomes negative. A negative profit indicates that the car prices might need re-evaluation. Write a program that identifies the earliest day (starting from day 1) when your cumulative profit becomes negative. If the profit never falls below zero, return -1. Input The first line of input contains a single integer n (1 ≤ n ≤ 105), the number of days. The second line contains n space-separated integers p1, p2, ..., pn (-10^4 ≤ pi ≤ 10^4), the daily net profit (pi can be negative or positive) for each day. Output Output a single integer, the earliest day when the cumulative profit becomes negative. If the cumulative profit never becomes negative, return -1. Examples Input 7 5 -4 -3 2 3 -1 -2 Output 3 Input 5 4 3 -1 -2 1 Output -1","solution":"def earliest_negative_day(n, profits): Identify the earliest day when cumulative profit becomes negative. Arguments: n -- number of days profits -- list of daily profits Returns: The earliest day when cumulative profit becomes negative, else -1 if it never becomes negative. cumulative_profit = 0 for day in range(n): cumulative_profit += profits[day] if cumulative_profit < 0: return day + 1 # day is 0-indexed, so we return day + 1 return -1 # Example usage # n = 7 # profits = [5, -4, -3, 2, 3, -1, -2] # print(earliest_negative_day(n, profits)) # Output: 3"},{"question":"Given an integer array `nums`, move all the even integers at the beginning of the array followed by all the odd integers. Return any array that satisfies this condition. Example: ```python segregate_even_odd([1, 2, 3, 4]) # should output [2, 4, 1, 3] segregate_even_odd([7, 3, 6, 8, 5, 4]) # should output [6, 8, 4, 7, 3, 5] segregate_even_odd([4, 2, 7, 5]) # should output [4, 2, 7, 5] segregate_even_odd([9, 15, 1, 3]) # should output [9, 15, 1, 3] as there are no even numbers ``` **Note**: Order within the even or odd subarrays does not matter.","solution":"def segregate_even_odd(nums): Reorders the array such that all even integers are at the beginning followed by all the odd integers. :param nums: List of integers :return: New list with evens followed by odds evens = [num for num in nums if num % 2 == 0] odds = [num for num in nums if num % 2 != 0] return evens + odds"},{"question":"A popular online game has a player leveling system where each player can gain experience points (XP) to level up. The game uses a peculiar leveling system where: 1. A player starts at level 1 with 0 XP. 2. To reach level 2, a player needs exactly 1 XP. 3. To reach level 3, a player needs exactly 2 XP more (total of 3 XP). 4. To reach level 4, a player needs exactly 4 XP more (total of 7 XP), and so on following the pattern where the XP required to advance from level i to level i+1 is 2^(i-2) XP. Given a total amount of XP `x` that a player has accumulated, determine the maximum level `l` the player can achieve. Input The input consists of a single integer x (0 ≤ x ≤ 10^12) — the total experience points accumulated by the player. Output Print the maximum level `l` that the player can reach with x experience points. Examples Input 0 Output 1 Input 1 Output 2 Input 2 Output 2 Input 6 Output 3 Input 7 Output 4 Note For the first sample, since the player has 0 XP, they remain at level 1. For the second sample, the player has 1 XP, enough to reach level 2. For the third sample, 2 XP is not enough to reach level 3, so the player remains at level 2. For the fourth sample, with 6 XP, the player can reach level 3 but not level 4. For the fifth sample, having exactly 7 XP, the player reaches level 4.","solution":"def max_level(x): Determines the maximum level a player can reach given the total XP `x`. if x == 0: return 1 level = 1 required_xp = 0 while x >= required_xp: level += 1 required_xp += 2 ** (level - 2) return level - 1"},{"question":"Given an array of strings, implement an algorithm to sort the strings in an order such that all anagrams are next to each other. **Input:** - The first line contains an integer T, the number of test cases. - Each test case consists of two lines, the first line contains an integer N denoting the number of strings. - The second line contains N space-separated strings. **Output:** For each test case, print N space-separated strings such that all anagrams are next to each other in the list. If there are multiple sets of anagrams, you can arrange the sets in any order but within each set, the anagrams should be contiguous. **Constraints:** - 1 <= T <= 50 - 1 <= N <= 100 - 1 <= len(S) <= 100 (length of each string S) **Example:** **Input:** ``` 2 6 bat tab cat act tac dog 4 listen silent enlist inlets ``` **Output:** ``` bat tab cat act tac dog listen silent enlist inlets ``` Note: The order of anagram sets may vary, as long as the anagrams are contiguous to each other. For example, for the first test case, `cat act tac bat tab dog` is also a valid output.","solution":"def group_anagrams(T, test_cases): result = [] for case in test_cases: N, strings = case sorted_dict = {} for s in strings: sorted_str = \'\'.join(sorted(s)) if sorted_str in sorted_dict: sorted_dict[sorted_str].append(s) else: sorted_dict[sorted_str] = [s] grouped_strings = [] for key in sorted_dict: grouped_strings.extend(sorted_dict[key]) result.append(grouped_strings) return result # Example of input: # T = 2 # test_cases = [ # (6, [\'bat\', \'tab\', \'cat\', \'act\', \'tac\', \'dog\']), # (4, [\'listen\', \'silent\', \'enlist\', \'inlets\']) # ]"},{"question":"Given an integer N, output the sum of all numbers between 1 and N (inclusive) that are multiples of either 3 or 5. -----Constraints----- - 1 ≤ N ≤ 1000 -----Input----- Input is given from Standard Input in the following format: N -----Output----- Print a single integer, the sum of all numbers between 1 and N that are multiples of either 3 or 5. -----Sample Input----- 10 -----Sample Output----- 33 Explanation: The numbers between 1 and 10 that are multiples of either 3 or 5 are: 3, 5, 6, 9, and 10. Their sum is: 3 + 5 + 6 + 9 + 10 = 33.","solution":"def sum_of_multiples(N): Returns the sum of all numbers between 1 and N (inclusive) that are multiples of either 3 or 5. return sum(i for i in range(1, N + 1) if i % 3 == 0 or i % 5 == 0)"},{"question":"You are given a grid of size `n x m` consisting of `.` and `#` characters. Your objective is to find the number of distinct connected components of `.` characters in the grid. Two `.` characters are part of the same connected component if they are 4-directionally adjacent (up, down, left, right). Your task is to write a program that reads the grid from input and outputs the number of distinct connected components. Input - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) – the number of rows and columns in the grid. - The following `n` lines each contain `m` characters representing the grid. Each character is either `.` or `#`. Output - Output a single integer – the number of distinct connected components of `.` characters in the grid. Example Input 5 6 .... ..#. .#..#. #..#.# .. Output 3 Explanation In the given example, there are three distinct connected components of `.` characters: 1. The top-left corner `..` 2. The middle connected group `....` 3. The two `.` characters in the bottom-right part.","solution":"def count_connected_components(n, m, grid): def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] != \'.\': return grid[x][y] = \'#\' # Mark visited dfs(x+1, y) dfs(x-1, y) dfs(x, y+1) dfs(x, y-1) count = 0 for i in range(n): for j in range(m): if grid[i][j] == \'.\': dfs(i, j) count += 1 return count # Example usage: if __name__ == \'__main__\': n, m = map(int, input().split()) grid = [list(input().strip()) for _ in range(n)] print(count_connected_components(n, m, grid))"},{"question":"You are given an array a_1, a_2, dots, a_n. Determine if it is possible to reorder the array such that no two adjacent elements are equal. -----Input----- The first line contains a single integer n (1 le n le 10^5) — length of the array a. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the array a. -----Output----- Print \\"YES\\" if it is possible to reorder the array such that no two adjacent elements are equal. Otherwise, print \\"NO\\". -----Example----- Input 6 1 1 2 3 3 4 Output YES -----Note----- In the given example, one possible reordered array is [1, 3, 1, 2, 3, 4], which does not contain any adjacent elements that are equal.","solution":"def can_reorder_no_adjacent_equals(n, arr): from collections import Counter counts = Counter(arr) max_count = max(counts.values()) # If the most frequent element appears more than (n + 1) // 2 times, it\'s impossible to rearrange if max_count > (n + 1) // 2: return \\"NO\\" return \\"YES\\""},{"question":"You are given an array `A` of size `n` containing integer values. The task is to determine whether there exist three indices ( i, j, k ) ( ( 0 leq i < j < k < n ) ) such that ( A[i] < A[j] < A[k] ). If such a triplet exists, return \\"YES\\"; otherwise, return \\"NO\\". For each test case, ensure to execute your program in O(n) time complexity. # Input: - The first line of input contains an integer ( t ) ( ( 1 leq t leq 10^3 ) ) — the number of test cases. - For each test case, the first line contains an integer ( n ) ( ( 3 leq n leq 10^5 ) ) — the size of the array. - The second line of each test case contains ( n ) integers ( (-10^9 leq A[i] leq 10^9 ) ) — the elements of the array. - The total number of elements in all test cases does not exceed ( 10^6 ). # Output: - For each test case, print \\"YES\\" if such a triplet exists in the array; otherwise, print \\"NO\\". # Example: Input: ``` 3 5 1 2 3 4 5 4 5 4 3 2 6 1 2 6 4 5 3 ``` Output: ``` YES NO YES ``` Explanation: - In the first test case, indices can be ( 0, 1, 2 ) (values ( 1, 2, 3 )). - In the second test case, no such triplet exists. - In the third test case, indices can be ( 0, 1, 4 ) (values ( 1, 2, 5 )).","solution":"def find_triplet(arr): n = len(arr) if n < 3: return \\"NO\\" left_min = [float(\'inf\')] * n right_max = [float(\'-inf\')] * n left_min[0] = arr[0] for i in range(1, n): left_min[i] = min(left_min[i-1], arr[i]) right_max[n-1] = arr[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], arr[i]) for j in range(1, n-1): if left_min[j-1] < arr[j] < right_max[j+1]: return \\"YES\\" return \\"NO\\" def process_input(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] arr = test_cases[i][1] results.append(find_triplet(arr)) return results"},{"question":"You are working on a project that involves managing email addresses. Given a list of email addresses, you need to create a function that filters out invalid email addresses and returns a list of valid ones. The validity of an email address can be determined by the following rules: 1. The email address must contain exactly one \\"@\\" character. 2. The local part (the part before the \\"@\\") must only contain alphanumeric characters and the special characters: \\".\\", \\"_\\", \\"+\\", \\"-\\". 3. The domain part (the part after the \\"@\\") must contain at least one \\".\\" character that is not the first or the last character of the domain. 4. The position of \\".\\" in the domain should not be consecutive (e.g., \\"example..com\\" is invalid). 5. Both the local part and the domain part must be non-empty. 6. The email address should not contain any spaces. Your task is to implement a function `filter_valid_emails(emails: List[str]) -> List[str]` that takes a list of email addresses and returns a list of valid email addresses according to the above rules. # Example ```python def filter_valid_emails(emails): # your code here # Example usage: emails = [ \\"valid.email@example.com\\", \\"invalid.email@.com\\", \\"another.invalid@com.\\", \\"noatsign.com\\", \\"too.many@at@signs.com\\", \\"local@domain_with_no_dot\\", \\"good.email+filter@example-domain.com\\", ] print(filter_valid_emails(emails)) # Output: [\'valid.email@example.com\', \'good.email+filter@example-domain.com\'] ``` # Input - A list of strings `emails` where each string is an email address. The length of the list is between 1 and 1000 (inclusive), and each email address has a length between 1 and 50 characters (inclusive). # Output - A list of strings containing only the valid email addresses from the input list. # Constraints - The input list contains between 1 and 1000 email addresses. - Each email address is a string of length between 1 and 50 characters. # Notes - Each email address in the input list is guaranteed to be non-empty and does not contain leading or trailing whitespace.","solution":"import re def filter_valid_emails(emails): def is_valid_email(email): if email.count(\'@\') != 1: return False local, domain = email.split(\'@\') if not local or not domain: return False if not re.match(r\'^[a-zA-Z0-9._+-]+\', local): return False if \'..\' in domain: return False if domain[0] == \'.\' or domain[-1] == \'.\': return False if domain.count(\'.\') == 0: return False if \' \' in email: return False return True return [email for email in emails if is_valid_email(email)] # Example usage: emails = [ \\"valid.email@example.com\\", \\"invalid.email@.com\\", \\"another.invalid@com.\\", \\"noatsign.com\\", \\"too.many@at@signs.com\\", \\"local@domain_with_no_dot\\", \\"good.email+filter@example-domain.com\\", ] print(filter_valid_emails(emails)) # Output: [\'valid.email@example.com\', \'good.email+filter@example-domain.com\']"},{"question":"There are N positive integers arranged in a sequence: B_1, ..., B_N. You can perform the following operation on the sequence any number of times: - Choose any two adjacent integers B_i and B_{i+1}, and if B_i < B_{i+1}, subtract B_i from B_{i+1}. Determine the smallest possible maximum integer that can be achieved in the sequence after performing the operation any number of times. -----Constraints----- - 1 leq N leq 100 - 1 leq B_i leq 10^5 -----Input----- Input is given from Standard Input in the following format: N B_1 B_2 ... B_N -----Output----- Print the smallest possible maximum integer in the sequence after performing the operation any number of times. -----Sample Input----- 4 5 3 8 4 -----Sample Output----- 5 Initially, [5, 3, 8, 4] are written in the sequence. After several possible operations, [5, 0, 5, 4] can be achieved. In this arrangement, the maximum integer is still 5, and further operations will not reduce the maximum value below 5. Hence, the smallest possible maximum integer is 5.","solution":"def smallest_possible_maximum(N, B): B.sort() return B[-1]"},{"question":"Professor Nakamura is developing a new greeting card that generates personalized messages for various occasions. Each message is constructed using a set of predefined templates and customizable tokens. The predefined templates contain placeholder tokens that need to be replaced with specific values based on the user\'s input. The placeholders are indicated by special tokens enclosed in curly braces, such as `{name}`, `{occasion}`, and `{date}`. Your task is to write a program that reads a set of templates and user inputs, and then generates and outputs the customized messages by replacing the placeholders with the provided values. Input The input is as follows. The first line contains a positive integer `t` (<= 100) that indicates the number of predefined templates. The following `t` lines each contain a template string. Then, there is another positive integer `n` (<= 500) that indicates the number of sets of user inputs. Each of the next `n` lines contains a set of user inputs in the following format: > `template_index name=value occasion=value date=value` `template_index` is a 1-based index indicating which predefined template to use for the current user input. Each `template_index` is followed by key-value pairs separated by spaces, where the key is the name of the placeholder and the value is the value to replace it with. Each template string may contain any number of placeholders, but each placeholder will appear only once in a template. Output For each user input specification, your program should print the generated message in a new line. The generated message should be the result of replacing all the placeholders in the corresponding template with their respective values from the user input. Example Input 3 Happy {occasion}, {name}! We hope you have a great day on {date}. Dear {name}, wishing you a wonderful {occasion} on {date}. {date} is a special day for celebrating {occasion} with {name}. 4 1 name=Alice occasion=Birthday date=05/06/2023 2 name=Bob occasion=Anniversary date=12/09/2023 3 name=Charlie occasion=Graduation date=07/08/2023 1 name=Diane occasion=Christmas date=25/12/2023 Output Happy Birthday, Alice! We hope you have a great day on 05/06/2023. Dear Bob, wishing you a wonderful Anniversary on 12/09/2023. 07/08/2023 is a special day for celebrating Graduation with Charlie. Happy Christmas, Diane! We hope you have a great day on 25/12/2023.","solution":"def generate_custom_messages(templates, user_inputs): Generates customized messages based on templates and user inputs. :param templates: List of predefined templates as strings :param user_inputs: List of user input strings :return: List of generated messages result = [] for input_str in user_inputs: parts = input_str.split() template_index = int(parts[0]) - 1 template = templates[template_index] placeholders = {} for part in parts[1:]: key, value = part.split(\'=\') placeholders[key] = value for placeholder, value in placeholders.items(): template = template.replace(f\\"{{{placeholder}}}\\", value) result.append(template) return result # Read inputs def main(): import sys input = sys.stdin.read data = input().splitlines() t = int(data[0]) templates = data[1:t + 1] n = int(data[t + 1]) user_inputs = data[t + 2:] messages = generate_custom_messages(templates, user_inputs) for message in messages: print(message)"},{"question":"Gary and Harry are playing a game with two heaps of stones. Initially, the first heap contains A stones and the second heap contains B stones. In each turn, a player can remove any number of stones from one of the heaps, but they must remove at least one stone. Gary always goes first and the players take turns alternately. The player who cannot make a move loses. Determine which player will win the game if both play optimally. Input The first line contains the number of test cases T (1 ≤ T ≤ 100). Each of the next T lines contains two integers A and B (1 ≤ A, B ≤ 1000) representing the number of stones in the first and second heaps respectively. Output Output T lines, one per test case. For each test case, output \\"GARY\\" if Gary wins the game, and \\"HARRY\\" if Harry wins the game. Example Input: 3 2 3 5 4 1 1 Output: GARY HARRY GARY","solution":"def determine_winner(A, B): Determines the winner between Gary and Harry given the number of stones in two heaps A and B. Gary always goes first. The player who cannot make a move loses. Returns \\"GARY\\" if Gary wins, otherwise \\"HARRY\\". if (A ^ B) == 0: return \\"GARY\\" else: return \\"HARRY\\" def game_winners(test_cases): Determines the winners for multiple test cases. test_cases: List of tuples [(A, B), (A, B), ...] Returns a list of results [\\"GARY\\", \\"HARRY\\", ...] results = [] for A, B in test_cases: results.append(determine_winner(A, B)) return results"},{"question":"Write a function that takes a list of strings and returns a new list containing only those strings that are palindromes. A palindrome is a word that reads the same backward as forward. For example: Input: `[\\"racecar\\", \\"hello\\", \\"madam\\", \\"world\\", \\"level\\"]` Output: `[\\"racecar\\", \\"madam\\", \\"level\\"]` Explanation: - \\"racecar\\" is a palindrome because it reads the same backward as forward. - \\"hello\\" is not a palindrome. - \\"madam\\" is a palindrome. - \\"world\\" is not a palindrome. - \\"level\\" is a palindrome.","solution":"def find_palindromes(words): Returns a list of palindromes from the given list of words. :param words: List of strings :return: List of palindrome strings return [word for word in words if word == word[::-1]]"},{"question":"You are given a list of cities to visit, each with a specific travel cost and a reward value. You have a limited budget, and you need to maximize the total reward by selecting a subset of the cities to visit. Determine the maximum reward you can obtain without exceeding the budget. Example ``` cities = [(100, 50), (200, 100), (50, 30), (150, 80)] budget = 250 ``` In this case, the optimal approach is to select the cities with costs 100 and 150, yielding a maximum reward of 50 + 80 = 130. Function Description Complete the `maxReward` function in the editor below. It must return an integer that denotes the maximum reward obtainable within the given budget. `maxReward` has the following parameter(s): - `int budget`: The maximum amount of money available to spend. - `List[Tuple[int, int]] cities`: A list of tuples where each tuple represents a city, with the first element being the cost to travel to that city, and the second element being the reward from visiting that city. Input Format The first line contains an integer `b`, the budget. The second line contains an integer `n`, the number of cities. Each of the next `n` lines contains two space-separated integers, representing the cost and the reward of visiting a city. Constraints - `1 ≤ n ≤ 1000` - `1 ≤ budget ≤ 10^5` - `1 ≤ cost, reward ≤ 10^4` Output Format Print a single integer, the maximum reward that can be obtained without exceeding the budget. Sample Input 0 ``` 300 3 150 70 200 90 120 60 ``` Sample Output 0 ``` 130 ``` Explanation 0 With a budget of 300, the optimal choices are the cities with costs 150 and 120, leading to a total reward of 70 + 60 = 130. Sample Input 1 ``` 100 2 50 40 60 50 ``` Sample Output 1 ``` 50 ``` Explanation 1 With a budget of 100, the optimal choice is the city with a cost of 60 and a reward of 50.","solution":"def maxReward(budget, cities): # Implement a dynamic programming solution dp = [0] * (budget + 1) # dp[i] = maximum reward we can get with a budget of i for cost, reward in cities: # We iterate backwards to make sure each city is chosen only once for b in range(budget, cost - 1, -1): dp[b] = max(dp[b], dp[b - cost] + reward) return max(dp) # The maximum reward we can get with budgets from 0 to the given budget"},{"question":"Reverse a Linked List Related Kata You may find [Reverse Linked List in C](https://www.codewars.com/kata/5fcd7c0d5edc930001f6ee17) useful for understanding the problem better. Preloaded A class, struct, or derived data type `Node` (depending on the language) is preloaded, intended to construct linked lists in this Kata: ```python class Node(): def __init__(self, data, next=None): self.data = data self.next = next ``` Prerequisites This Kata assumes knowledge of linked lists. For more information, refer to this [Wikipedia article on linked lists](https://en.wikipedia.org/wiki/Linked_list). The linked lists in this context are **singly linked lists**, where each node consists of a `data` property holding the value, a `next` property referencing the next node, and the end of the list terminates with `None`. Task Create a function `reverse_linked_list` that takes an argument `list`/`list` which is the head of a singly linked list. This function should return the head of the reversed linked list. For example, given the following linked list: ```python Node(1, Node(2, Node(3))) ``` ... reversing it would result in: ```python Node(3, Node(2, Node(1))) ``` Initial linked list before reversal: ``` 1 -> 2 -> 3 -> None ``` Linked list after reversal: ``` 3 -> 2 -> 1 -> None ``` # Example Usage ```python # Create a linked list head = Node(1, Node(2, Node(3))) # Reverse the linked list reversed_head = reverse_linked_list(head) # Convert the reversed linked list to a string representation for verification print(stringify(reversed_head)) # Expected: \\"3 -> 2 -> 1 -> None\\" ``` Note You may assume that the input linked list contains **non-negative integer** values and the list will only contain valid nodes provided. Feel free to test and enjoy this Kata!","solution":"class Node: def __init__(self, data, next=None): self.data = data self.next = next def reverse_linked_list(head): Reverses a singly linked list. Parameters: head (Node): The head node of the singly linked list. Returns: Node: The new head node of the reversed singly linked list. prev = None current = head while current is not None: next_node = current.next # remember next node current.next = prev # reverse the link prev = current # move prev to current current = next_node # move to next node return prev def stringify(node): Converts a linked list into a string representation. Parameters: node (Node): The head node of the linked list. Returns: str: String representation of the linked list. result = [] while node: result.append(str(node.data)) node = node.next result.append(\\"None\\") return \\" -> \\".join(result)"},{"question":"A company wants to distribute n chocolates to its employees as evenly as possible. Each chocolate needs to be given to exactly one employee. However, the company can provide additional incentives to employees by giving them at most 1 extra chocolate. Determine the number of ways the company can distribute the chocolates among k employees such that no employee receives more than one extra chocolate. Example 1: Input: n = 7, k = 3 Output: 1 Explanation: The possible distribution is: 1, 3, 3 (1 way) Example 2: Input: n = 8, k = 3 Output: 2 Explanation: The possible distributions are: 2, 3, 3 (1 way) 3, 3, 2 (1 way) Your Task: Your task is to write the function distributeChocolates(n, k) that takes two integers n and k as parameters and returns the number of possible ways to distribute the chocolates. Expected Time Complexity: O(k) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 10^6 1 <= k <= 10^6","solution":"def distributeChocolates(n, k): Returns the number of ways to distribute n chocolates among k employees such that no employee receives more than 1 extra chocolate. # Step 1: Calculate the minimum chocolates each employee can get base_chocolates = n // k # Step 2: Calculate the remainder chocolates remainder_chocolates = n % k # Step 3: Determine the number of ways the distribution can be made if remainder_chocolates == 0: return 1 # All employees get exactly base_chocolates else: return remainder_chocolates # Employees receiving extra chocolate"},{"question":"You are a treasure hunter in search of ancient artifacts buried within a mysterious cave filled with traps and puzzles. One such puzzle involves a magical lock that guards a hidden chamber. The lock is controlled by a sequence of numbers and operations that, when evaluated correctly, will reveal the combination to open the chamber. The sequence is written in postfix notation (also known as Reverse Polish Notation) where each number or operator is separated by a space. In this notation, the operator follows its operands; for example, the expression \\"3 4 + 2 *\\" evaluates to \\"(3 + 4) * 2\\" which equals 14. The operations allowed are: - Addition (+) - Subtraction (-) - Multiplication (*) - Division (/) You need to write a program that reads the postfix notation string, evaluates it, and returns the result as a floating-point number rounded to two decimal places. # Constraints: 1. The postfix notation string will contain integers and the operators (+, -, *, /) each separated by a single space. 2. The length of the postfix notation string will be between 1 and 100 characters. 3. It is guaranteed that the postfix notation is valid and doesn\'t lead to division by zero or any other undefined operations. # Input - A single line containing the postfix notation string. # Output - The result of evaluating the postfix notation string, rounded to two decimal places. # Examples **Input** ``` 3 4 + 2 * ``` **Output** ``` 14.00 ``` **Input** ``` 10 2 8 * + 3 - ``` **Output** ``` 23.00 ``` **Input** ``` 6 3 / 2 3 * + ``` **Output** ``` 8.00 ``` Note: You are required to implement the function to solve this puzzle by evaluating the provided postfix notation string correctly.","solution":"def evaluate_postfix(expression): Evaluates a postfix expression (reverse Polish notation) and returns the result rounded to two decimal places. stack = [] tokens = expression.split() for token in tokens: if token in \\"+-*/\\": b = stack.pop() a = stack.pop() if token == \'+\': result = a + b elif token == \'-\': result = a - b elif token == \'*\': result = a * b elif token == \'/\': result = a / b stack.append(result) else: stack.append(float(token)) return round(stack.pop(), 2)"},{"question":"Liam is playing with a colorful string of length n. The string s consists of lowercase English letters only. Liam likes to perform operations on the string to make it more aesthetically pleasing. He has defined his aesthetic criteria as minimizing the number of unique characters in the string. In one move, Liam can choose any two adjacent characters s_i and s_{i+1} and replace either s_i or s_{i + 1} with the other character. For example, if he has \\"ab\\" as two adjacent characters, he can replace it with \\"aa\\" or \\"bb\\". Liam can perform as many moves as he likes (possibly zero) to make the string as aesthetically pleasing as possible. Now you should answer q test cases: for the i-th test case, print the aesthetic string after performing an arbitrary number of moves. ----Input---- The first line contains the integer q (1 le q le 10^3) — the number of test cases. Next 2q lines contain test cases — one per two lines. The first line of each test case contains the integer n (1 le n le 10^4) — the length of the string s. The second line contains the string s of length n which consists only of lowercase English letters. It\'s guaranteed that the sum of n over all test cases doesn\'t exceed 10^4. ----Output---- Print q answers — one per test case. The answer to the i-th test case is the aesthetic string Liam can get after performing some number of moves (possibly zero). ----Example---- Input 3 5 abcde 6 abacbd 4 zzzz Output aa aaaaaa zzzz ----Note---- In the first test case, Liam can achieve the aesthetic string \\"aaaaa\\" by repeatedly performing operations to replace different adjacent characters. In the second test case, Liam can achieve \\"aaaaaa\\" by replacing characters until they are all \'a\'. In the third test case, the string \\"zzzz\\" is already as aesthetic as possible since it contains only one unique character.","solution":"def make_aesthetic_string(n, s): Convert the given string to an aesthetic string by making all characters the same. if n == 0: return s # We can take any character (the first one in this case) and repeat it n times return s[0] * n def process_test_cases(test_cases): results = [] for n, s in test_cases: results.append(make_aesthetic_string(n, s)) return results"},{"question":"Alice and Bob are playing a game with strings. They each have a string consisting of lowercase English letters. The game proceeds in turns, with Alice going first. In each turn, a player must replace exactly one letter from their string with another letter (any letter from \'a\' to \'z\'). The goal is for their string to match the other player\'s string exactly. The first player who cannot make a move loses the game. Given the initial strings of Alice and Bob, determine the winner if both play optimally. -----Constraints----- - Both strings contain only lowercase English letters. - 1 leq |S|, |T| leq 100 (where |S| and |T| signify the lengths of Alice\'s and Bob\'s strings, respectively) - The lengths of both strings are equal. -----Input----- Input is given from Standard Input in the following format: S T -----Output----- Print \\"Alice\\" if Alice will win the game, or \\"Bob\\" if Bob will win the game. -----Sample Input----- abc bcx -----Sample Output----- Alice In this input, Alice can change \'a\' to \'b\' to make her string \\"bbc\\", and then Bob can change \'x\' to \'c\' to make his string \\"bcc\\". Finally, Alice will change \'b\' to \'c\' and win the game with a matching string \\"ccc\\".","solution":"def determine_winner(S, T): Determine the winner of the game with strings S and T assuming both Alice and Bob play optimally. Parameters: S (str): The string of Alice. T (str): The string of Bob. Returns: str: \\"Alice\\" if Alice will win the game, \\"Bob\\" if Bob will win the game. # Count the number of positions where the characters of S and T differ differences = sum(1 for s, t in zip(S, T) if s != t) # If the number of different positions is odd, Alice will win. Otherwise, Bob will win. if differences % 2 == 1: return \\"Alice\\" else: return \\"Bob\\""},{"question":"In a small island country, farmers cultivate crops in a rectangular grid. Each cell in the grid either contains crops (represented by a 1) or is barren land (represented by a 0). Your task is to find the largest possible square of land entirely containing crops that you can choose. Given a grid where each cell is represented as either 0 or 1, find the area of the largest square that contains only 1s. Example grid = [ [1, 0, 1, 0, 0], [1, 0, 1, 1, 1], [1, 1, 1, 1, 1], [1, 0, 0, 1, 0] ] In the example grid above, the largest square containing only 1s has a side length of 2. Its area is therefore 2*2 = 4. Function Description Complete the function largestSquare in the editor below. It should return an integer representing the area of the largest square containing only 1s. largestSquare has the following parameter(s): - int grid[m][n]: a 2D array representing the grid of crops and barren land Returns - int: the area of the largest square containing only 1s Input Format The first line contains two integers m and n, the number of rows and columns in the grid. Each of the next m lines contains n space-separated binary integers (0 or 1), representing the state of crops or barren land in the grid. Constraints 1 leq m, n leq 1000 grid[i][j] in {0, 1} Sample Input STDIN Function ----- -------- 4 5 grid[][] size m = 4, n = 5 1 0 1 0 0 grid = 1 0 1 1 1 [[1, 0, 1, 0, 0], 1 1 1 1 1 [1, 0, 1, 1, 1], 1 0 0 1 0 [1, 1, 1, 1, 1], [1, 0, 0, 1, 0]] Sample Output 4 Explanation The largest square containing only 1s has a side length of 2, forming a 2x2 square in the bottom-right of the grid. The area of this square is 2*2 = 4.","solution":"def largestSquare(grid): Returns the area of the largest square containing only 1s. if not grid: return 0 m, n = len(grid), len(grid[0]) dp = [[0] * n for _ in range(m)] max_side = 0 for i in range(m): for j in range(n): if grid[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side ** 2"},{"question":"Polycarp has n boxes and m stones. Each stone can be placed in exactly one box. Initially, all boxes are empty. Polycarp has decided to perform exactly k operations on these boxes. In each operation, Polycarp can choose any box which contains at least one stone and move exactly one stone from that box to some other box. Polycarp can also choose to do nothing in an operation if he wants. Polycarp wants to know if it\'s possible to distribute the stones among the boxes such that each box contains at least one stone after all operations are done. For example, if n = 3, m = 5, and k = 3, the initial distribution could be [2, 3, 0]. Polycarp can perform the following operations: 1. Move one stone from the second box to the third box. New distribution: [2, 2, 1]. 2. Move one stone from the first box to the third box. New distribution: [1, 2, 2]. 3. Move one stone from the second box to the first box. New distribution: [2, 1, 2]. It\'s guaranteed that n leq 100 and m leq 100. -----Input---- The first line contains a single integer t (1 le t le 100) — the number of test cases. Each test case contains: - A single line with three integers n, m, and k (1 le n, m le 100, 0 le k le 100). -----Output---- For each test case, print \\"YES\\" if Polycarp can distribute the stones among the boxes such that each box contains at least one stone after exactly k operations. Otherwise, print \\"NO\\". -----Example---- Input 4 3 5 3 4 8 5 2 3 1 5 10 0 Output YES YES YES NO -----Note---- In the first test case, Polycarp can perform the operations as described in the example above. In the second test case, Polycarp has enough operations to distribute the stones to each box. In the third test case, Polycarp only needs one operation to distribute three stones into two boxes. In the fourth test case, Polycarp cannot distribute the stones as there are no operations allowed.","solution":"def can_distribute_stones(t, test_cases): results = [] for n, m, k in test_cases: if m >= n and k >= m - n: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A palindrome is a string that reads the same forward and backward. Given a string, determine the length of the longest palindromic substring contained within the given string. A substring is defined as a contiguous sequence of characters within a string. -----Input:----- The first line of input contains a single integer T denoting the number of test cases. The description of T test cases follows. Each testcase contains a single string s. -----Output:----- For each testcase, output the length of the longest palindromic substring in the given string. -----Constraints:----- 1 leq T leq 100 1 leq |s| leq 1000 -----Sample Input:----- 2 banana racecar -----Sample Output:----- 5 7","solution":"def longest_palindromic_substring_length(s): Returns the length of the longest palindromic substring in the given string s. n = len(s) if n == 0: return 0 longest = 1 dp = [[False]*n for _ in range(n)] for i in range(n): dp[i][i] = True start = 0 for length in range(2, n+1): for i in range(n-length+1): j = i + length - 1 if length == 2: dp[i][j] = (s[i] == s[j]) else: dp[i][j] = (s[i] == s[j] and dp[i+1][j-1]) if dp[i][j] and length > longest: longest = length start = i return longest def process_test_cases(test_cases): results = [] for s in test_cases: results.append(longest_palindromic_substring_length(s)) return results"},{"question":"Write a function to determine if a given positive integer is a perfect square. A perfect square is an integer that can be expressed as the product of an integer with itself. Input The only line of input contains a positive integer n (1 ≤ n ≤ 10^9). Output Output \\"YES\\" if n is a perfect square, otherwise output \\"NO\\". Examples Input 16 Output YES Input 20 Output NO","solution":"import math def is_perfect_square(n): Determines if a given positive integer n is a perfect square. Parameters: - n (int): A positive integer to be checked Returns: - str: \\"YES\\" if n is a perfect square, otherwise \\"NO\\" sqrt_n = math.isqrt(n) if sqrt_n * sqrt_n == n: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a list of n files, each with a certain size and a required number of computers to process it. A server can run k tasks simultaneously where each task represents processing one file, and each file requires a specific number of computers. Your aim is to find the maximum total size of files that the server can process concurrently. -----Input----- The first line contains two space-separated integers — n (1 ≤ n ≤ 10^4) and k (1 ≤ k ≤ 10^3) — the number of files and the number of tasks the server can handle simultaneously. Each of the next n lines contains two space-separated integers — s_{i} (1 ≤ s_{i} ≤ 10^9) and c_{i} (1 ≤ c_{i} ≤ 10^9) — the size and required number of computers of the i-th file. -----Output----- In a single line print a single integer — the maximum total size of files that can be processed concurrently by the server. -----Examples----- Input 3 2 10 1 20 2 30 1 Output 40 Input 4 1 5 5 10 4 5 3 8 1 Output 8 Input 2 3 15 2 10 1 Output 25","solution":"def max_total_size(n, k, files): # Sort the files first by their required number of computers, # and by their size in descending order if computers required is the same files.sort(key=lambda x: (x[1], -x[0])) max_size = 0 count = 0 # Track the number of files processed concurrently for size, comps in files: if count < k: max_size += size count += 1 else: break return max_size"},{"question":"Design a system to manage a library\'s book lending process. In the library, each book can be lent to only one member at a time. You need to design a class that maintains which books are lent to which members and the due date for each borrowed book. Here are the requirements: - Books are identified by unique ISBN numbers. - Members are identified by unique member IDs. - Each book has a borrowing period that is a fixed number of days. - A member cannot borrow more than a predefined number of books. Your task is to implement the following methods in the `Library` class: - `borrow_book(isbn: str, member_id: str, borrow_date: str) -> str`: Allows a member to borrow a book if the book isn\'t already lent to someone else and if the member has not exceeded their borrowing limit. The `borrow_date` is given as a string in the format \'YYYY-MM-DD\'. If the book is successfully lent, return the due date as a string in the same format. If the book is already lent, return \\"Book not available\\". If the member has exceeded their borrowing limit, return \\"Member has exceeded borrowing limit\\". - `return_book(isbn: str, member_id: str, return_date: str) -> str`: If the book was borrowed by the member, mark the book as returned. The `return_date` is given as a string in the format \'YYYY-MM-DD\'. If the book wasn\'t borrowed by the member, return \\"Book not borrowed by member\\". Otherwise, return \\"Book returned successfully\\". - `get_due_date(isbn:str) -> str`: Return the due date of the book as a string in the format \'YYYY-MM-DD\'. If the book is not currently borrowed, return \\"Book not borrowed\\". - `get_borrowed_books(member_id: str) -> List[str]`: Return a list of ISBN numbers of the books currently borrowed by the member. If no books are borrowed, return an empty list. - `get_lending_info(isbn: str) -> Tuple[str, str]`: Return a tuple containing the member ID who borrowed the book and the due date. If the book is not currently borrowed, return (\\"\\", \\"\\"). Here\'s a class template for you to implement these methods: ```python from typing import List, Tuple from datetime import datetime, timedelta class Library: def __init__(self, borrowing_period: int, borrowing_limit: int): self.borrowing_period = borrowing_period self.borrowing_limit = borrowing_limit self.books = {} # ISBN -> (borrower_id, due_date) self.members = {} # member_id -> set of borrowed ISBNs def borrow_book(self, isbn: str, member_id: str, borrow_date: str) -> str: pass def return_book(self, isbn: str, member_id: str, return_date: str) -> str: pass def get_due_date(self, isbn: str) -> str: pass def get_borrowed_books(self, member_id: str) -> List[str]: pass def get_lending_info(self, isbn: str) -> Tuple[str, str]: pass ``` You need to implement the class methods to handle the library\'s book lending process according to the requirements above. # Example ```python library = Library(borrowing_period=14, borrowing_limit=5) print(library.borrow_book(\'978-3-16-148410-0\', \'member01\', \'2023-01-01\')) # \'2023-01-15\' print(library.borrow_book(\'978-3-16-148410-0\', \'member02\', \'2023-01-01\')) # \'Book not available\' print(library.get_due_date(\'978-3-16-148410-0\')) # \'2023-01-15\' print(library.return_book(\'978-3-16-148410-0\', \'member02\', \'2023-01-10\')) # \'Book not borrowed by member\' print(library.return_book(\'978-3-16-148410-0\', \'member01\', \'2023-01-10\')) # \'Book returned successfully\' print(library.get_due_date(\'978-3-16-148410-0\')) # \'Book not borrowed\' ``` Note: The `datetime` module in Python may be used for date calculations and formatting.","solution":"from typing import List, Tuple from datetime import datetime, timedelta class Library: def __init__(self, borrowing_period: int, borrowing_limit: int): self.borrowing_period = borrowing_period self.borrowing_limit = borrowing_limit self.books = {} # ISBN -> (borrower_id, due_date) self.members = {} # member_id -> set of borrowed ISBNs def borrow_book(self, isbn: str, member_id: str, borrow_date: str) -> str: if isbn in self.books: return \\"Book not available\\" if member_id not in self.members: self.members[member_id] = set() if len(self.members[member_id]) >= self.borrowing_limit: return \\"Member has exceeded borrowing limit\\" borrow_date_dt = datetime.strptime(borrow_date, \'%Y-%m-%d\') due_date_dt = borrow_date_dt + timedelta(days=self.borrowing_period) due_date_str = due_date_dt.strftime(\'%Y-%m-%d\') self.books[isbn] = (member_id, due_date_str) self.members[member_id].add(isbn) return due_date_str def return_book(self, isbn: str, member_id: str, return_date: str) -> str: if isbn not in self.books or self.books[isbn][0] != member_id: return \\"Book not borrowed by member\\" del self.books[isbn] self.members[member_id].remove(isbn) return \\"Book returned successfully\\" def get_due_date(self, isbn: str) -> str: if isbn not in self.books: return \\"Book not borrowed\\" return self.books[isbn][1] def get_borrowed_books(self, member_id: str) -> List[str]: if member_id not in self.members: return [] return list(self.members[member_id]) def get_lending_info(self, isbn: str) -> Tuple[str, str]: if isbn not in self.books: return (\\"\\", \\"\\") return self.books[isbn]"},{"question":"Alex is interested in determining the beauty of arrays through a challenging task. An array can be categorized as beautiful if the sum of any non-contiguous subarray of the array is even. A non-contiguous subarray is derived from the original array by deleting zero or more elements without necessarily being consecutive. For instance, array [5, 7, 2] is beautiful, as all non-contiguous subarrays, including [5], [7], [2], [5, 2], and [7, 2], have even sums. However, array [5, 6] is not beautiful, as its non-contiguous subarray [5, 6] has an odd sum. Help Alex by writing a program to compute the number of non-empty beautiful subarrays. -----Input----- The first line of the input contains a single integer n (1 le n le 2 times 10^5) — the length of array a. The second line of the input contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the elements of a. -----Output----- Output a single integer — the number of beautiful non-empty subarrays of a. -----Examples----- Input 3 1 2 3 Output 4 Input 2 4 8 Output 3 -----Note----- In the first sample, the beautiful subarrays are [2], [2, 1], [2, 3], [2, 1, 3]. In the second sample, all non-contiguous subarrays of [4], [8], and [4, 8] have even sums. Thus, the beautiful subarrays are [4], [8], and [4, 8].","solution":"def count_beautiful_subarrays(n, a): count = 0 even_length = 0 for num in a: if num % 2 == 0: even_length += 1 else: count += even_length * (even_length + 1) // 2 even_length = 0 # In case the array ends with even numbers count += even_length * (even_length + 1) // 2 return count"},{"question":"In a fantasy town, there is a need to transport materials using carts of varying capacities. Each cart can carry a maximum weight, and the town has a list of carts each with its maximum weight capacity. Additionally, there is a list of different materials to be transported, with each material having a specific weight. Your task is to determine the optimal allocation of materials to the carts such that the total weight does not exceed the maximum capacity of each cart and the maximum number of carts are utilized. For simplicity, assume that: - Each cart can only carry one material. - Each material can only be placed in one cart. - The goal is to maximize the usage of carts. Input constraints: The first line contains an integer C denoting the number of carts. The second line contains C integers representing the maximum capacities of each cart. The third line contains an integer M denoting the number of materials. The fourth line contains M integers representing the weights of the materials. Output constraints: Print a single line containing the number of carts used optimally. Constraints: 1 ≤ C, M ≤ 10^3 1 ≤ capacity_i, weight_j ≤ 10^3 SAMPLE INPUT 5 10 15 20 25 30 6 5 10 15 20 25 30 SAMPLE OUTPUT 5","solution":"def optimal_cart_usage(carts, materials): Determine the optimal number of carts to be used to transport materials. Args: carts (list): List of integers representing the maximum capacities of each cart. materials (list): List of integers representing the weights of the materials. Returns: int: The number of carts used optimally. # Sort carts capacities and materials weights carts.sort(reverse=True) materials.sort(reverse=True) cart_count = 0 i = 0 # index for carts j = 0 # index for materials while i < len(carts) and j < len(materials): if materials[j] <= carts[i]: cart_count += 1 i += 1 # Move to the next cart j += 1 # Move to the next material else: j += 1 # Move to the next material return cart_count # Example usage carts = [10, 15, 20, 25, 30] materials = [5, 10, 15, 20, 25, 30] print(optimal_cart_usage(carts, materials)) # Output: 5"},{"question":"You are building an application where you need to manage user sessions. Each session has a start time and an end time, and you need to determine the maximum number of concurrent sessions at any point in time. Write a function `maxConcurrentSessions(sessions)` that takes a list of tuples, where each tuple contains two integers representing the start time and end time of a session. Your task is to return the maximum number of concurrent sessions. # Input - A list of tuples `sessions`, where each tuple contains two integers `start` and `end` (0 ≤ start < end ≤ 10^6). # Output - An integer representing the maximum number of concurrent sessions. # Example Input ```python sessions = [(1, 3), (2, 5), (4, 6)] ``` Output ```python 2 ``` Explanation - From time 1 to 3, there is 1 session. - From time 2 to 3, there are 2 sessions (the one starting at 1 and ending at 3, and the one starting at 2 and ending at 5). - From time 4 to 5, there are 2 sessions (the one starting at 2 and ending at 5, and the one starting at 4 and ending at 6). Thus, the maximum number of concurrent sessions is 2. # Constraints - The input list `sessions` will have at most (10^5) tuples. - The start times and end times are guaranteed to be integers within the range [0, 10^6].","solution":"def maxConcurrentSessions(sessions): Returns the maximum number of concurrent sessions events = [] # Collect start and end times in the events list for start, end in sessions: events.append((start, \'start\')) events.append((end, \'end\')) # Sort the events, firstly by time, secondly `end` before `start` events.sort(key=lambda x: (x[0], x[1] == \'start\')) max_concurrent = 0 current_concurrent = 0 # Traverse the events for event in events: if event[1] == \'start\': current_concurrent += 1 max_concurrent = max(max_concurrent, current_concurrent) else: current_concurrent -= 1 return max_concurrent"},{"question":"You are given an array of integers a = [a_1, a_2, ..., a_n] and m queries. Each query is described by a pair of integers l_i, r_i (1 ≤ l_i ≤ r_i ≤ n). For each query, find the maximum integer in the subarray a[l_i..r_i]. Your task is to write a program to answer these queries efficiently. -----Input----- The first line contains integer n (1 ≤ n ≤ 10^5) — the length of the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the array elements. The third line contains integer m (1 ≤ m ≤ 10^5) — the number of queries. Each of the next m lines contains the description of a corresponding query: integers l_i, r_i (1 ≤ l_i ≤ r_i ≤ n). -----Output----- Print m integers — the answers to the queries in the order in which they are given in the input. -----Example----- Input 5 1 2 3 4 5 3 1 3 2 5 1 5 Output 3 5 5 Input 8 5 1 3 7 9 2 6 8 4 3 4 1 7 2 8 4 8 Output 7 9 9 9","solution":"def preprocess(arr, n): Preprocess the list using a sparse table for fast range_maximum queries. import math k = int(math.log2(n)) + 1 st = [[0] * (k + 1) for _ in range(n)] # Initialize the sparse table for the intervals with size 1 for i in range(n): st[i][0] = arr[i] # Compute values from smaller to bigger intervals j = 1 while (1 << j) <= n: i = 0 while (i + (1 << j) - 1) < n: st[i][j] = max(st[i][j - 1], st[i + (1 << (j - 1))][j - 1]) i += 1 j += 1 return st def range_maximum(st, l, r): Query the maximum value in the range [l, r] using the preprocessed sparse table. import math j = int(math.log2(r - l + 1)) return max(st[l][j], st[r - (1 << j) + 1][j]) def answer_queries(arr, queries): Answer the given queries using the preprocessed sparse table n = len(arr) st = preprocess(arr, n) results = [] for l, r in queries: result = range_maximum(st, l - 1, r - 1) results.append(result) return results"},{"question":"Write a program to determine whether a given number is a palindrome. A number is considered a palindrome if it reads the same forward and backward. Input The input consists of multiple datasets. For each dataset, a natural number n (1 <= n <= 10^6) is given in a line. The input ends with a line including a single zero. Your program should not process this terminal symbol. Output For each dataset, print \\"Yes\\" if the number is a palindrome, otherwise print \\"No\\". Example Input 121 23432 12321 12345 0 Output Yes Yes Yes No","solution":"def is_palindrome(n): Returns \'Yes\' if the number n is a palindrome, otherwise returns \'No\'. str_n = str(n) if str_n == str_n[::-1]: return \'Yes\' else: return \'No\' def process_input(input_list): Processes a list of numbers and outputs whether each number is a palindrome. The list ends with a single zero, which is not processed. results = [] for n in input_list: if n == 0: break results.append(is_palindrome(n)) return results"},{"question":"A coding competition is underway, and one of the challenges involves transforming strings. The transformation rule is to repeatedly remove the first and last character of the string if they are the same, until the string can no longer be transformed. You need to determine the length of the remaining string after all possible transformations. Input: First line contains an integer T, the number of test cases. Each of the next T lines contains a string S. Output: For each test case, output the length of the string after all possible transformations. Constraints: 1 ≤ T ≤ 10^5 1 ≤ |S| ≤ 10^6 Sample Input: 3 abba abcba abcd Sample Output: 0 1 4 Explanation: - For the first case, \\"abba\\" transforms to \\"bb\\" and then to empty string. - For the second case, \\"abcba\\" transforms to \\"bcb\\", which then transforms to \\"c\\". - For the third case, \\"abcd\\" doesn\'t have matching first and last characters, so no transformations occur.","solution":"def transformed_string_length(S): Returns the length of the string after all possible transformations. left, right = 0, len(S) - 1 while left < right and S[left] == S[right]: left += 1 right -= 1 return right - left + 1 def process_test_cases(test_cases): Processes multiple test cases and returns the results as a list of integers. results = [transformed_string_length(S) for S in test_cases] return results"},{"question":"Given an array Arr[] of N elements. Your task is to process Q queries. Each query consists of two integers L and R. For each query, you need to find the sum of elements in the given range [L...R]. After processing all queries, return the cumulative sum of all the individual query results. Example 1: Input: N = 5, Q = 2 Arr[] = {1, 2, 3, 4, 5} Queries[][] = {{1, 3}, {0, 2}} Output: 12 Explanation: Sum for the first query (1, 3): 2 + 3 + 4 = 9 Sum for the second query (0, 2): 1 + 2 + 3 = 6 Cumulative sum of query results: 9 + 6 = 15 Example 2: Input: N = 4, Q = 1 Arr[] = {10, 20, 30, 40} Queries[][] = {{1, 2}} Output: 50 Explanation: Sum for the query (1, 2): 20 + 30 = 50 Cumulative sum of query results: 50 Your Task: You don\'t need to read input or print anything. Your task is to complete the function cumulativeQuerySum() which takes the array of integers Arr, n, queries and q as parameters and returns an integer denoting the cumulative sum of all query results. Expected Time Complexity: O(N + Q) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^{5} 1 <= Q <= 10^{5} 1 <= Arr[i] <= 10^{9} 0 <= L <= R < N","solution":"def cumulativeQuerySum(arr, n, queries, q): prefix_sum = [0] * (n + 1) # Compute prefix sums for i in range(n): prefix_sum[i + 1] = prefix_sum[i] + arr[i] result = 0 # Process each query for query in queries: L, R = query result += prefix_sum[R + 1] - prefix_sum[L] return result"},{"question":"Anna is a contestant participating in a coding marathon. One of the problems given in the marathon is to find a special subsequence in a given word. A subsequence is defined as a sequence that can be derived from another sequence by deleting some or none of the characters without changing the order of the remaining characters. However, for this problem, Anna needs to find a subsequence that forms a palindrome and has the maximum possible length. Given a word W consisting of lowercase English letters, you need to help Anna by computing the length of the longest palindromic subsequence in the word. INPUT The first line of input contains an integer T, denoting the number of test cases. Each of the next T lines contains a single string W, representing the word for which the longest palindromic subsequence is to be computed. OUTPUT For each test case, output a single integer (one per line), representing the length of the longest palindromic subsequence in the word. CONSTRAINTS 1 ≤ T ≤ 100 1 ≤ |W| ≤ 1000 SAMPLE INPUT 2 bbabcbcab abcba SAMPLE OUTPUT 7 5 Explanation For the first test case, the possible longest palindromic subsequence is \\"babcbab\\" or \\"bacbcab\\", both having a length of 7. For the second test case, the longest palindromic subsequence is \\"abcba\\", having a length of 5.","solution":"def longest_palindromic_subsequence(word): Returns the length of the longest palindromic subsequence in the given word. n = len(word) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if word[i] == word[j] and cl == 2: dp[i][j] = 2 elif word[i] == word[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1] def solve_longest_palindromic_subsequence(test_cases): results = [] for word in test_cases: results.append(longest_palindromic_subsequence(word)) return results"},{"question":"You are given a game where participants earn points based on their performance in a series of rounds. Each participant gathers points during each round, and the total score is the sum of the points collected in each round. Given the total points of two participants, determine the winner or if there is a tie. ------ Input Format ------ - The first line will contain T, the number of test cases. - Each test case consists of a single line of input, containing two integers S1 and S2, the total points of Participant 1 and Participant 2 respectively. ------ Output Format ------ For each test case, output \\"Participant 1\\" if Participant 1 has more points, \\"Participant 2\\" if Participant 2 has more points, and \\"TIE\\" if both participants have the same points. Note that the output is case-insensitive. ------ Constraints ------ 1 ≤ T ≤ 1000 0 ≤ S1, S2 ≤ 1000 ----- Sample Input 1 ------ 3 100 150 200 200 85 70 ----- Sample Output 1 ------ Participant 2 TIE Participant 1 ----- Explanation 1 ------ Test Case 1: - Participant 1 has 100 points. - Participant 2 has 150 points. Since 150 > 100, Participant 2 wins. Test Case 2: - Participant 1 has 200 points. - Participant 2 has 200 points. Since 200 = 200, it’s a TIE. Test Case 3: - Participant 1 has 85 points. - Participant 2 has 70 points. Since 85 > 70, Participant 1 wins.","solution":"def determine_winner(test_cases): results = [] for S1, S2 in test_cases: if S1 > S2: results.append(\\"Participant 1\\") elif S1 < S2: results.append(\\"Participant 2\\") else: results.append(\\"TIE\\") return results"},{"question":"A gaming company is organizing an event where players can collect coins by completing various tasks. Each player is rewarded a certain number of coins based on the sequence of tasks they complete. The reward system is designed such that for each task, players are rewarded sequentially with incremental coin counts starting from 1. That means, for the first task, they get 1 coin, for the second task, they get 2 coins, for the third task, they get 3 coins, and so on. Since the company wants to distribute these coins fairly, they decided to give players a specific range of tasks to complete. However, the reward system was not clear to everyone, and the company needs your help to calculate the total amount of coins a player will receive for a given range of tasks. Write a function to calculate the total number of coins a player will receive if they complete all tasks from the `i-th` task to the `j-th` task, inclusive. Input: The function gets three integers: `n` (the total number of possible tasks), `i` (the starting task in the range), and `j` (the ending task in the range), where 1 <= i <= j <= n. Output: Return an integer representing the total number of coins earned by completing tasks from the `i-th` task to the `j-th` task. Example: Input: 5 2 4 Output: 9 Explanation: The total number of coins earned from tasks 2 to 4 is calculated as follows: Task 2: 2 coins Task 3: 3 coins Task 4: 4 coins Total: 2 + 3 + 4 = 9","solution":"def total_coins(n, i, j): Calculate the total number of coins earned by completing tasks from the i-th task to the j-th task. Parameters: - n (int): Total number of tasks. - i (int): Starting task index in the range (1-indexed). - j (int): Ending task index in the range (1-indexed). Returns: - int: Total coins earned. # Sum of the first j natural numbers: j * (j + 1) // 2 # Sum of the first (i-1) natural numbers: (i-1) * i // 2 sum_total_until_j = j * (j + 1) // 2 sum_total_until_i_minus_1 = (i - 1) * i // 2 return sum_total_until_j - sum_total_until_i_minus_1"},{"question":"You are tasked with managing a network of n computers and m connections between these computers. Each connection has a specific latency time, which is a non-negative integer. You need to handle q queries that ask for the minimum latency between two specific computers in the network. To tackle these queries efficiently, you need to design an algorithm that prepares the network data such that every query can be answered in a minimal amount of time. If two computers are not connected, return -1 for that query. -----Input----- - The first line contains three space-separated integers n, m, and q, where n is the number of computers, m is the number of connections, and q is the number of queries. - The next m lines each contain three space-separated integers u, v, and l, denoting that there is a connection between computer u and computer v with latency l. - The next q lines each contain two space-separated integers a and b, representing a query asking for the minimum latency between computer a and computer b. -----Output----- - Output q lines, each containing a single integer, the minimum latency between the specified pair of computers for each query. If the computers are not connected, output -1. -----Constraints----- - 1 ≤ n ≤ 100 - 0 ≤ m ≤ 10,000 - 1 ≤ q ≤ 1,000 - 1 ≤ u, v ≤ n - 1 ≤ l ≤ 1,000,000 - 1 ≤ a, b ≤ n -----Subtasks----- Subtask #1 : (20 points) - Sum of n, m, and q across all test cases does not exceed 1,000 Subtask #2 : (30 points) - Sum of n, m, and q across all test cases does not exceed 10,000 Subtask #3 : (50 points) - Sum of n, m, and q across all test cases does not exceed 100,000 -----Example----- Input: 4 4 3 1 2 3 1 3 1 2 3 7 3 4 2 1 2 1 4 2 4 Output: 3 3 5 -----Explanation----- In the example, the network of computers is as follows: 1 --3-- 2 | / | 1 7 2 +--3-- 1. The minimum latency between computer 1 and 2 is 3 directly from the given connection. 2. The minimum latency between computer 1 and 4 is achieved through path 1 -> 3 -> 4 with a total latency of 1 + 2 = 3. 3. The minimum latency between computer 2 and 4 requires passing through 1 and 3: 2 -> 1 -> 3 -> 4 with a latency of 3 + 1 + 2 = 6.","solution":"def floyd_warshall(n, edges): Uses Floyd-Warshall algorithm to compute shortest paths between all pairs of nodes. Parameters: n (int): The number of nodes. edges (list of tuples): Each tuple represents an edge (u, v, l) where u and v are nodes and l is the latency. Returns: dist (list of lists): dist[i][j] will be the minimum latency from node i to node j. # Initialize the distance between every pair of nodes to infinity inf = float(\'inf\') dist = [[inf] * n for _ in range(n)] # Distance to self is zero for i in range(n): dist[i][i] = 0 # Initialize distances based on direct edges for u, v, l in edges: dist[u-1][v-1] = l dist[v-1][u-1] = l # Floyd-Warshall algorithm for k in range(n): for i in range(n): for j in range(n): if dist[i][k] < inf and dist[k][j] < inf: dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]) return dist def handle_queries(n, dist, queries): Handles the queries to find the minimum latency between pairs of nodes. Parameters: n (int): The number of nodes. dist (list of lists): Precomputed distance matrix. queries (list of tuples): Each tuple represents a query (a, b). Returns: results (list of int): Result for each query. results = [] for a, b in queries: latency = dist[a-1][b-1] if latency == float(\'inf\'): results.append(-1) else: results.append(latency) return results def main(n, m, q, edges, queries): dist = floyd_warshall(n, edges) results = handle_queries(n, dist, queries) return results"},{"question":"Implement a function that determines whether a given string represents a valid hexadecimal number. A valid hexadecimal number follows these rules: 1. It must start with `0x` prefix. 2. It may contain digits (`0-9`), lowercase letters (`a-f`), and uppercase letters (`A-F`) after the prefix. 3. The remaining part, after the `0x` prefix, can be empty (which would make `0x` a valid hexadecimal number). The function should return `True` if the string is a valid hexadecimal number, and `False` otherwise. -----Constraints----- - The input string length is between 1 and 1,000 characters (inclusive). - The input string consists of printable ASCII characters. -----Input----- Input is given from Standard Input in the following format: The hexadecimal string. -----Output----- Print either `True` or `False`. -----Sample Input----- 0x1A3F -----Sample Output----- True -----Sample Input----- 0xGHIJ -----Sample Output----- False -----Sample Input----- 0x -----Sample Output----- True","solution":"def is_valid_hexadecimal(s): Determines if the given string s is a valid hexadecimal number. if not s.startswith(\\"0x\\"): return False hex_part = s[2:] for char in hex_part: if not (char.isdigit() or \'a\' <= char <= \'f\' or \'A\' <= char <= \'F\'): return False return True"},{"question":"You are given a string T of length N containing only characters \'X\' and \'O\'. An \\"alternating substring\\" in T is a substring where the characters strictly alternate between \'X\' and \'O\'. For example, in the string \\"XOXO\\", both the entire string and the substrings \\"XOX\\", \\"OXO\\", \\"XO\\", \\"OX\\" are alternating substrings. Your task is to find the length of the longest alternating substring in T. -----Constraints----- - 1 leq |T| leq 10^5 - T_i is \'X\' or \'O\'. -----Input----- Input is given from Standard Input in the following format: T -----Output----- Print a single integer, the length of the longest alternating substring in T. -----Sample Input----- OXOXOX -----Sample Output----- 6 The entire string \\"OXOXOX\\" is an alternating substring and its length is 6.","solution":"def longest_alternating_substring(T): Returns the length of the longest alternating substring in T. max_length = 1 current_length = 1 for i in range(1, len(T)): if T[i] != T[i-1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 # Final check to account for the last potential longest alternating substring max_length = max(max_length, current_length) return max_length"},{"question":"You are given a 2D grid with dimensions N x M, where each cell represents either land (represented by a 1) or water (represented by a 0). Land cells are connected horizontally or vertically (but not diagonally). A group of connected land cells forms an island. Write a function that takes the 2D grid as input and returns the number of distinct islands. Two islands are distinct if and only if they do not share land cells and no cell of one island can be reached from cells of another island without traversing water. -----Constraints----- - 1 ≤ N, M ≤ 1000 - The grid consists of non-negative integers only (0 or 1). -----Input----- The function takes the following inputs: - 2D integer array `grid` of dimensions N x M -----Output----- Return an integer indicating the number of distinct islands. -----Sample Input----- [[1, 1, 0, 0, 0], [1, 1, 0, 0, 1], [0, 0, 0, 1, 1], [0, 0, 0, 0, 0], [1, 1, 1, 0, 0]] -----Sample Output----- 3 Explanation: There are three separate islands in the given grid: - The first island consists of cells {(0, 0), (0, 1), (1, 0), (1, 1)} - The second island consists of cells {(1, 4), (2, 3), (2, 4)} - The third island consists of cells {(4, 0), (4, 1), (4, 2)}","solution":"def num_islands(grid): Returns the number of distinct islands in the given 2D grid. if not grid or not grid[0]: return 0 def dfs(x, y): if x < 0 or y < 0 or x >= len(grid) or y >= len(grid[0]) or grid[x][y] == 0: return grid[x][y] = 0 # Mark the cell as visited dfs(x - 1, y) dfs(x + 1, y) dfs(x, y - 1) dfs(x, y + 1) num_islands = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == 1: num_islands += 1 dfs(i, j) return num_islands"},{"question":"You are given a binary array A with length n, meaning each element of the array is either 0 or 1. An interval is a contiguous subarray defined by indices `l` and `r` (inclusive) where `1 ≤ l ≤ r ≤ n`. The beauty of an interval is defined as the sum of the number of 1\'s and the length of the interval minus the number of 1\'s in that interval (i.e., the total number of elements in the interval). You need to find a subarray where this beauty is maximized. -----Input----- - First line contains an integer t - the number of test cases. - The next t lines describe each test case with two inputs: - An integer n, the length of array A - A binary array A of length n -----Output----- For each test case, output the maximum beauty defined as above. -----Constraints----- - 1 ≤ t ≤ 10 - 1 ≤ n ≤ 10^5 -----Example----- Input: 2 5 1 0 1 1 0 4 0 0 1 0 Output: 4 3","solution":"def max_beauty(n, A): Returns the maximum beauty for a binary array A of length n. # Maximum length of subarray return n def solve(t, test_cases): results = [] for i in range(t): n, A = test_cases[i] results.append(max_beauty(n, A)) return results"},{"question":"You have to create a method \\"reverseWordsInSentence\\" which should take as input a string that represents a sentence and return a string where the words in the sentence are reversed but the characters in each word remain in the same order. ```Example: Input - \\"hello world this is a test\\" Output - \\"test a is this world hello\\" ```","solution":"def reverseWordsInSentence(sentence): Reverses the words in a sentence without reversing the characters in each word. words = sentence.split() reversed_sentence = \' \'.join(reversed(words)) return reversed_sentence"},{"question":"# Problem Statement You are given a 2-dimensional grid of size n times m representing a city with roads and buildings. Each cell in the grid can either be empty (`0`) or contain a building (`1`). You need to find and return the largest square area of contiguous empty cells (`0`s) within the grid where you can build a park. The park should be a perfect square in shape. Write a function `largestPark` that takes in the following parameters: - `n`: an integer, the number of rows in the grid. - `m`: an integer, the number of columns in the grid. - `grid`: a 2-dimensional array of integers where each element is either `0` (empty cell) or `1` (building). The function should return an integer representing the size (number of cells) of the largest square park that can be built. # Constraints - 1 leq n, m leq 1000 - Each element in `grid` is either `0` or `1`. # Input Format - The first line contains two space-separated integers, `n` and `m`, representing the number of rows and columns in the grid, respectively. - Each of the next `n` lines contains `m` space-separated integers, representing the grid. # Output Format Print a single integer representing the largest square area that can be built as a park. # Sample Input 1 ``` 5 6 1 0 1 0 0 1 1 0 0 0 0 1 1 0 1 1 1 1 1 0 0 0 0 1 1 1 1 0 0 0 ``` # Sample Output 1 ``` 4 ``` # Explanation In the given grid, the largest square area of contiguous empty cells (`0`s) where a park can be built is a 2 times 2 area. Therefore, the output is 4 (since 2 times 2 = 4). # Sample Input 2 ``` 3 3 1 1 1 1 1 1 1 1 1 ``` # Sample Output 2 ``` 0 ``` # Explanation There are no empty cells (`0`) available in the grid. Therefore, the largest possible square park that can be built is of size 0.","solution":"def largestPark(n, m, grid): Function to find the largest square area of contiguous empty cells (0) in the grid. if not grid or n == 0 or m == 0: return 0 # Create a 2D DP array initialized to 0s dp = [[0] * m for _ in range(n)] max_side = 0 # Iterate over the grid to fill the DP table for i in range(n): for j in range(m): if grid[i][j] == 0: if i == 0 or j == 0: dp[i][j] = 1 # Edge case where we can\'t have a larger square else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) # Return the area of the largest square return max_side * max_side"},{"question":"A company has launched a new social media platform where users can create posts and follow other users. As part of their feature set, they want to implement a \\"Top Influencers\\" feature that identifies users who create the most popular posts, i.e., posts that receive the highest number of likes. Each user is identified by a unique integer ID and each post is identified by a unique post ID. You are given the number of users, the number of posts, and the number of likes each post has received. Your task is to determine the list of users in descending order based on the total number of likes received on their posts. If two users have the same number of likes, they should appear in ascending order of their user ID. If a user has not made any posts, their total like count is considered zero. Implement a method to find the top influencers based on the number of likes received on their posts. -----Input----- The first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 10^5) — the number of users and the number of posts respectively. The next m lines each contain three integers u, p, l (1 ≤ u ≤ n; 1 ≤ p ≤ m; 0 ≤ l ≤ 10^6) — the user ID who created the post, the post ID, and the number of likes the post received. -----Output----- The output should contain the user IDs of the top influencers in descending order of their total like counts. If multiple users have the same like count, they should be ordered by ascending user ID. Each user ID should be printed on a new line. -----Examples----- Input 5 3 1 1 20 2 2 15 1 3 5 Output 1 2 3 4 5 Input 4 4 1 1 10 2 2 20 1 3 20 3 4 15 Output 1 2 3 4","solution":"def top_influencers(n, m, posts): likes_count = {i: 0 for i in range(1, n+1)} # Initialize like count for each user for u, p, l in posts: likes_count[u] += l # Add likes to the respective user # Sort by total likes (descending) and user ID (ascending) sorted_users = sorted(likes_count.keys(), key=lambda x: (-likes_count[x], x)) return sorted_users # Example Input n = 4 m = 4 posts = [(1, 1, 10), (2, 2, 20), (1, 3, 20), (3, 4, 15)] print(top_influencers(n, m, posts))"},{"question":"Given an undirected graph with `n` nodes and `m` edges, your task is to find if there exists a cycle in the graph. A cycle is a path of edges and vertices wherein a vertex is reachable from itself. -----Input----- The first line of the input contains two integers `n` and `m` (`1 leq n leq 10^5, 0 leq m leq 10^5`) — the number of nodes and the number of edges in the graph respectively. The next `m` lines each contain two integers `u` and `v` (`1 leq u, v leq n, u neq v`) — indicating there is an undirected edge between node `u` and node `v`. -----Output----- Print \\"YES\\" if there exists a cycle in the graph, otherwise print \\"NO\\". -----Examples----- Input 4 4 1 2 2 3 3 4 4 1 Output YES Input 3 2 1 2 2 3 Output NO -----Note----- In the first example, there is a cycle: 1 → 2 → 3 → 4 → 1. In the second example, no cycle is present in the graph.","solution":"def has_cycle(n, m, edges): from collections import defaultdict graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) def dfs(v, parent): visited[v] = True for neighbor in graph[v]: if not visited[neighbor]: if dfs(neighbor, v): return True elif neighbor != parent: return True return False for i in range(1, n + 1): if not visited[i]: if dfs(i, -1): return \\"YES\\" return \\"NO\\""},{"question":"You are given an array of n integers representing the heights of buildings in a row, where the i-th integer h_i is the height of the i-th building. You want to paint all buildings using the minimum number of colors such that no two adjacent buildings have the same color. Write an algorithm to determine the minimum number of colors needed to paint all buildings following the given rule. -----Input----- The first line contains one integer n (1 leq n leq 1000) — the number of buildings. The second line contains n integers h_1, h_2, ldots, h_n (1 leq h_i leq 1000) — the heights of the buildings. -----Output----- Print a single integer — the minimum number of colors needed to paint all buildings. -----Examples----- Input 3 1 2 1 Output 2 Input 4 4 4 4 4 Output 1 -----Note----- In the first example, we can paint the first and third buildings with color 1 and the second building with color 2. In the second example, all buildings have the same height, so they can all be painted with a single color since they are not adjacent to different heights.","solution":"def min_colors_to_paint_buildings(n, heights): Determine the minimum number of colors needed to paint all buildings such that no two adjacent buildings have the same color. if n == 1: return 1 # The maximum number of colors needed is 2 (even and odd index) return 2 if any(heights[i] != heights[i + 1] for i in range(n - 1)) else 1 # Example Inputs # Testing the function with provided examples print(min_colors_to_paint_buildings(3, [1, 2, 1])) # Output: 2 print(min_colors_to_paint_buildings(4, [4, 4, 4, 4])) # Output: 1"},{"question":"Write a function that simulates a \\"spiral walk\\" through a square matrix of integers and returns the elements in the order they are encountered. The input to the function will be a 2D list (a list of lists), where each inner list represents a row of the matrix. The function should start from the top-left corner and proceed in a clockwise spiral, collecting the elements in this order and returning them as a single list. For example, given the following matrix: ``` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` The function should return: `[1, 2, 3, 6, 9, 8, 7, 4, 5]`. You may assume that the input matrix will always be non-empty and square (i.e., the same number of rows and columns).","solution":"def spiral_walk(matrix): Simulates a \\"spiral walk\\" through the given square matrix and returns the elements in the order they are encountered. :param matrix: A 2D list representing the square matrix. :return: A list of elements in spiral order. result = [] while matrix: # Add the first row to result result += matrix.pop(0) # Add the last element of each remaining row if matrix and matrix[0]: for row in matrix: result.append(row.pop()) # Add the last row in reverse order if matrix: result += matrix.pop()[::-1] # Add the first element of each remaining row in reverse order if matrix and matrix[0]: for row in matrix[::-1]: result.append(row.pop(0)) return result"},{"question":"A transportation company is developing a program to optimize their delivery routes. The company wants to minimize the total distance that their delivery trucks travel each day. They have multiple delivery points in a city, and the distances between all pairs of points are given. The task is to create a program that helps the transportation company find the shortest possible route that starts at point 0, visits all the delivery points exactly once, and returns to the starting point. This problem is commonly known as the Traveling Salesman Problem (TSP). Input - The first line contains an integer `n` (2 ≤ `n` ≤ 12), which represents the number of points (including the starting point). - The next `n` lines contain `n` integers each. The `j-th` integer in the `i-th` line represents the distance between point `i` and point `j`. The distance from a point to itself is 0. Output - Output a single integer, which is the minimum total distance that the delivery truck needs to travel to complete the route. Example Input ``` 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 ``` Output ``` 80 ``` Hint 1. Use recursive backtracking combined with memoization (Dynamic Programming) to solve this problem efficiently. 2. Consider all possible permutations of the points and calculate the total travel distance for each permutation, then select the minimum one. 3. Use bit masking to keep track of the set of visited points in the memoization process.","solution":"def tsp(graph, start=0): n = len(graph) END_STATE = (1 << n) - 1 cache = [[None] * (1 << n) for _ in range(n)] def find_path(last, visited): if visited == END_STATE: return graph[last][start] if cache[last][visited] is not None: return cache[last][visited] res = float(\'inf\') for city in range(n): if visited & (1 << city) == 0: distance = graph[last][city] + find_path(city, visited | (1 << city)) res = min(res, distance) cache[last][visited] = res return res return find_path(start, 1 << start)"},{"question":"You are given a string S consisting of `A` and `B`. You can perform the following operation any number of times: choose any subsequence of the string S and replace it with an empty string, effectively deleting it. A string is called good if it contains no two consecutive `A`s and no two consecutive `B`s. Determine if you can make the string `S` good by performing the described operation any number of times. Constraints * 1 leq |S| leq 100 * S consists of letters `A` and `B` only. Input Input is given from Standard Input in the following format: ``` S ``` Output Print \\"YES\\" if you can make the string good by performing the operation any number of times, otherwise print \\"NO\\". Examples Input AABBAA Output YES Input AAA Output NO","solution":"def can_become_good_string(S): Determines if the string S can be made a \\"good\\" string by performing the described operation. A good string contains no two consecutive `A`s and no two consecutive `B`s. Args: S (str): The input string consisting of \'A\' and \'B\' only. Returns: str: \\"YES\\" if the string can be made good, \\"NO\\" otherwise. # Check for consecutive \'AAA\' or \'BBB\' if \'AAA\' in S or \'BBB\' in S: return \\"NO\\" return \\"YES\\""},{"question":"You are organizing a conference that has N sessions, which may overlap with each other. Your goal is to attend the maximum number of non-overlapping sessions. Each session has a starting time and an ending time. Given the starting and ending times of N sessions, write a program to find the maximum number of non-overlapping sessions that can be attended. Constraints * All values in input are integers. * 1 le N le 10^5 * 0 le starting_time < ending_time le 10^9 Input Input is given from Standard Input in the following format: N start_1 end_1 start_2 end_2 ... start_N end_N Output Print the maximum number of non-overlapping sessions that can be attended. Examples Input 3 1 3 2 4 3 5 Output 2 Input 4 1 2 2 3 3 4 1 5 Output 3 Input 2 1 8 3 5 Output 1","solution":"def max_non_overlapping_sessions(sessions): Given a list of sessions defined by start and end times, computes the maximum number of non-overlapping sessions that can be attended. Args: sessions (List[Tuple[int, int]]): List of tuples where each tuple represents the start and end times of a session Returns: int: The maximum number of non-overlapping sessions # Sort the sessions based on their end times sessions.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in sessions: if start >= last_end_time: count += 1 last_end_time = end return count if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().splitlines() N = int(data[0]) sessions = [tuple(map(int, session.split())) for session in data[1:]] result = max_non_overlapping_sessions(sessions) print(result)"},{"question":"You are given a 2D grid of characters and a word. Your task is to check if the word exists in the grid. The word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are those horizontally, vertically, or diagonally neighboring. The same letter cell may not be used more than once. Input - The first line contains two integers, `M` and `N`, representing the number of rows and columns of the grid respectively. - The next `M` lines contain `N` characters each, representing the grid. - The last line contains a string, representing the word to search for in the grid. Constraints - 1 leq M, N leq 50 - The word will have a length of at least one and at most 50. Output - Output \\"YES\\" if the word can be found in the grid, otherwise \\"NO\\". Sample Input 3 4 A B C E S F C S A D E E ABCCED Sample Output YES Explanation - The word \\"ABCCED\\" can be constructed as follows: - Start at (0,0) -> \'A\' - Move to (0,1) -> \'B\' - Move to (0,2) -> \'C\' - Move to (1,2) -> \'C\' - Move to (2,2) -> \'E\' - Move to (2,3) -> \'D\' - Hence, \\"ABCCED\\" exists in the grid. You should output \\"YES\\".","solution":"def exist(board, word): def dfs(board, i, j, word): if len(word) == 0: # All the characters are checked return True if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[0]: return False tmp = board[i][j] # first character is found, check the remaining part board[i][j] = \\"#\\" # avoid visiting again # check whether can find \\"word\\" along one direction res = dfs(board, i+1, j, word[1:]) or dfs(board, i-1, j, word[1:]) or dfs(board, i, j+1, word[1:]) or dfs(board, i, j-1, word[1:]) or dfs(board, i+1, j+1, word[1:]) or dfs(board, i-1, j-1, word[1:]) or dfs(board, i+1, j-1, word[1:]) or dfs(board, i-1, j+1, word[1:]) board[i][j] = tmp return res for i in range(len(board)): for j in range(len(board[0])): if dfs(board, i, j, word): return \\"YES\\" return \\"NO\\""},{"question":"Alan is a participant in a popular coding competition. The competition requires him to solve a series of problems every day. Each problem has a difficulty rating associated with it, ranging from 1 to 10. Alan wants to know how many problems of each difficulty level he has to solve over the course of a given competition day. Given an array of integers where each integer represents the difficulty rating of a problem, your task is to count the occurrences of each difficulty level from 1 to 10. Input: The first line contains an integer T, the number of test cases (1 ≤ T ≤ 100). For each test case, the first line contains an integer n (1 ≤ n ≤ 1000) representing the number of problems Alan has to solve, followed by n integers where each integer is between 1 and 10 inclusive. Output: For each test case, print a single line containing 10 integers. The i-th integer should represent the number of problems with difficulty level i. SAMPLE INPUT: 2 5 1 2 2 3 3 7 4 4 5 5 6 6 6 SAMPLE OUTPUT: 1 2 2 0 0 0 0 0 0 0 0 0 0 2 2 3 0 0 0 0 Explanation: In the first test case, there is 1 problem with difficulty 1, 2 problems with difficulty 2, and 2 problems with difficulty 3. All other difficulty levels have 0 problems. In the second test case, there are 2 problems with difficulty 4, 2 problems with difficulty 5, and 3 problems with difficulty 6. All other difficulty levels have 0 problems.","solution":"def count_difficulty_levels(T, test_cases): Returns a list of the counts of difficulties from 1 to 10 for each test case. Parameters: T (int): Number of test cases. test_cases (list of lists): Each list contains the problems for a test case. Returns: list of lists: Each list contains the counts of difficulties from 1 to 10. results = [] for case in test_cases: counts = [0] * 10 for difficulty in case: counts[difficulty - 1] += 1 results.append(counts) return results # Example usage T = 2 test_cases = [ [1, 2, 2, 3, 3], [4, 4, 5, 5, 6, 6, 6] ] print(count_difficulty_levels(T, test_cases))"},{"question":"Given a string `s`, partition it into as few substrings as possible so that each substring is a palindrome. A palindrome is a string that reads the same forward and backward. Write a function `minPalindromePartition(s)` that takes in the string `s` and returns the minimum number of substrings that the string needs to be partitioned into. # Example 1: Input: s = \\"aab\\" Output: 1 Explanation: The palindrome partitioning [\\"aa\\",\\"b\\"] could be produced using 1 additional palindrome substring. # Example 2: Input: s = \\"a\\" Output: 0 Explanation: Since the input string is already a palindrome. # Example 3: Input: s = \\"abc\\" Output: 2 Explanation: The palindrome partitioning [\\"a\\",\\"b\\",\\"c\\"] could be produced using 2 additional palindrome substrings. # Your Task: You don\'t need to read input or print anything. Complete the function `minPalindromePartition(s)` which takes the string `s` and returns the minimum number of substrings needed. # Expected Time Complexity: O(n^2) # Expected Auxiliary Space: O(n) # Constraints: - 1 ≤ len(s) ≤ 1000 - s consists of lowercase English letters only.","solution":"def minPalindromePartition(s): n = len(s) # Initialize a table to store the minimum number of cuts needed for palindrome partitioning dp = [[0] * n for _ in range(n)] # Table to store if substrings are palindrome is_palindrome = [[False] * n for _ in range(n)] for i in range(n): is_palindrome[i][i] = True for length in range(2, n+1): for i in range(n - length + 1): j = i + length - 1 if length == 2: is_palindrome[i][j] = (s[i] == s[j]) else: is_palindrome[i][j] = (s[i] == s[j] and is_palindrome[i+1][j-1]) # Create the DP table for minimum cuts for i in range(n): if is_palindrome[0][i]: dp[0][i] = 0 else: dp[0][i] = float(\'inf\') for j in range(1, i+1): if is_palindrome[j][i] and dp[0][j-1] + 1 < dp[0][i]: dp[0][i] = dp[0][j-1] + 1 return dp[0][n-1]"},{"question":"You are participating in a coding competition where you need to solve multiple mathematical puzzles. One of the puzzles provided is to find the next nearest multiple of a given integer N, that is greater than or equal to a given integer M. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of two space-separated integers N and M, the given integer and the number from which we need to find the next nearest multiple respectively. ------ Output Format ------ For each test case, output the next nearest multiple of N that is greater than or equal to M. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ M ≤ 1000 ----- Sample Input 1 ------ 3 10 95 7 150 25 250 ----- Sample Output 1 ------ 100 154 250 ----- explanation 1 ------ Test case 1: The given integer is 10 and we need to find its next nearest multiple greater than or equal to 95. Thus, the answer is 100. Test case 2: The given integer is 7 and we need to find its next nearest multiple greater than or equal to 150. Thus, the answer is 154. Test case 3: The given integer is 25 and we need to find its next nearest multiple greater than or equal to 250. Thus, the answer is 250 which is already a multiple.","solution":"def next_nearest_multiple(test_cases): Function to find the next nearest multiple of given integer N that is greater than or equal to a given integer M for each test case. :param test_cases: List of tuples [(N1, M1), (N2, M2), ..., (Nt, Mt)] N and M being the integers given in each test case. :return: List of results - the next nearest multiples for each test case results = [] for N, M in test_cases: if M % N == 0: results.append(M) else: results.append(((M // N) + 1) * N) return results"},{"question":"You are given a list of integers representing the levels of magic stones. You have to distribute these stones into exactly two groups such that the absolute difference between the sums of the levels of those two groups is minimized. Write a function `minimizeDifference` which takes an integer array `stones[]` (the levels of the magic stones) as input and returns the minimum possible absolute difference between the summed levels of these two groups. Example 1: Input: stones = [1, 6, 11, 5] Output: 1 Explanation: Group1 = [1, 6, 5] => Sum = 12 Group2 = [11] => Sum = 11 Difference = |12 - 11| = 1 Example 2: Input: stones = [3, 1, 4, 2, 2] Output: 0 Explanation: Group1 = [3, 2, 2] => Sum = 7 Group2 = [1, 4] => Sum = 5 Difference = |7 - 5| = 2 Your task: You do not need to read input or print anything. Your task is to complete the function `minimizeDifference()` which takes an array `stones` of integers as input and returns the minimum possible absolute difference between the sums of the two groups. Expected Time Complexity: O(N * sum), where N is the number of stones and sum is the sum of the levels of the stones. Expected Auxiliary Space: O(N * sum) Constraints: 1 ≤ stones.length ≤ 30 1 ≤ stones[i] ≤ 100","solution":"def minimizeDifference(stones): This function returns the minimum possible absolute difference between the sums of two groups formed from the input list `stones`. total_sum = sum(stones) n = len(stones) dp = [[False for _ in range(total_sum // 2 + 1)] for _ in range(n + 1)] for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): for j in range(1, total_sum // 2 + 1): if stones[i-1] <= j: dp[i][j] = dp[i-1][j] or dp[i-1][j-stones[i-1]] else: dp[i][j] = dp[i-1][j] for j in range(total_sum // 2, -1, -1): if dp[n][j]: sum1 = j break sum2 = total_sum - sum1 return abs(sum2 - sum1)"},{"question":"Given a string s and an integer n, your task is to determine the number of distinct characters in every substring of length n in the given string s. If the substring length n is greater than the length of the string s, return -1. Example 1: Input: s = \\"abcabc\\", n = 3 Output: [3, 3, 3, 3] Explanation: The substrings of length 3 are \\"abc\\", \\"bca\\", \\"cab\\", \\"abc\\". Each has 3 distinct characters. Example 2: Input: s = \\"abcdef\\", n = 2 Output: [2, 2, 2, 2, 2] Explanation: The substrings of length 2 are \\"ab\\", \\"bc\\", \\"cd\\", \\"de\\", \\"ef\\". Each has 2 distinct characters. Example 3: Input: s = \\"hello\\", n = 6 Output: -1 Explanation: Substring length 6 is greater than the string length 5. Your Task: You don\'t have to read or print anything. Your task is to complete the function countDistinctCharacters() which takes the string s and the integer n as input parameters and returns a list of integers representing the number of distinct characters in each substring of length n. If the substring length n is greater than the length of the string s, return -1. Expected Time Complexity: O(m * n), where m is the length of the string s Expected Space Complexity: O(1) Constraints: 1 <= len(s) <= 10^5 1 <= n <= 10^5 The string s consists of lowercase English letters only.","solution":"def countDistinctCharacters(s, n): Returns the number of distinct characters in every substring of length n in the given string s. If the substring length n is greater than the length of the string s, returns -1. if n > len(s): return -1 distinct_counts = [] for i in range(len(s) - n + 1): substring = s[i:i+n] distinct_counts.append(len(set(substring))) return distinct_counts"},{"question":"Given a series of operations related to a collection of boxes and items, you need to simulate the process and answer specific queries about the contents of the boxes. Initially, there are no boxes. You can perform the following operations: 1. `CREATE X`: Create a new box with identifier `X` which is initially empty. 2. `ADD X Y`: Add an item with identifier `Y` to the box `X`. 3. `MOVE X Y`: Move all items from box `X` to box `Y` and empty the contents of box `X`. 4. `QUERY X`: Return the number of items in the box `X`. Input Format - The first line contains an integer `N`, the number of operations. - The next `N` lines contain one of the operations described above. Constraints - 1 ≤ N ≤ 10^5 - All boxes and items identifiers are positive integers up to 10^9. - It is guaranteed in operations `ADD`, `MOVE`, and `QUERY` that the specified boxes exist. Output Format - For each `QUERY X` operation, output the number of items in the box `X`. Sample Input 7 CREATE 1 CREATE 2 ADD 1 101 ADD 1 102 MOVE 1 2 QUERY 1 QUERY 2 Sample Output 0 2 Explanation - After the first operation, box 1 is created. - After the second operation, box 2 is created. - After the third operation, items 101 is added to box 1. - After the fourth operation, item 102 is added to box 1. - After the fifth `MOVE 1 2` operation, all items from box 1 are moved to box 2, leaving box 1 empty. - The sixth `QUERY 1` operation checks the number of items in box 1, which is now 0. - The seventh `QUERY 2` operation checks the number of items in box 2, which now contains the 2 items that were moved from box 1 (101 and 102).","solution":"def box_operations(operations): boxes = {} results = [] for operation in operations: op = operation.split() if op[0] == \'CREATE\': x = int(op[1]) boxes[x] = [] elif op[0] == \'ADD\': x = int(op[1]) y = int(op[2]) boxes[x].append(y) elif op[0] == \'MOVE\': x = int(op[1]) y = int(op[2]) boxes[y].extend(boxes[x]) boxes[x] = [] elif op[0] == \'QUERY\': x = int(op[1]) results.append(len(boxes[x])) return results"},{"question":"You are given an array of integers representing the heights of buildings along a street. You are tasked with determining the number of sunny buildings. A building is considered sunny if it is taller than all the buildings to its left. Write a function `countSunnyBuildings` that takes an array of integers `heights` as input and returns the number of sunny buildings. Input - An array of integers `heights` where `heights[i]` represents the height of the i-th building. - 1 ≤ |heights| ≤ 10^5 - 1 ≤ heights[i] ≤ 10^9 Output - An integer representing the count of sunny buildings. Example Input: ``` heights = [7, 4, 8, 2, 9, 5] ``` Output: ``` 3 ``` Explanation: 1. The first building (height 7) is sunny because there are no buildings on its left. 2. The second building (height 4) is not sunny because the first building is taller. 3. The third building (height 8) is sunny because it is taller than the first and second buildings. 4. The fourth building (height 2) is not sunny because the first three buildings are taller. 5. The fifth building (height 9) is sunny because it is taller than all previous buildings (7, 4, 8, 2). 6. The sixth building (height 5) is not sunny because the fifth building is taller.","solution":"def countSunnyBuildings(heights): Returns the number of buildings that are considered sunny. A building is considered sunny if it is taller than all the buildings to its left. if not heights: return 0 count = 1 # The first building is always sunny max_height = heights[0] for height in heights[1:]: if height > max_height: count += 1 max_height = height return count"},{"question":"Write a function `merge_and_sort()` (JS: `mergeAndSort`) that takes two lists of integers as input and: 1. Merges the two lists into one. 2. Removes any duplicate elements. 3. Sorts the remaining elements in descending order. Return this sorted list as the output. For example: ```python merge_and_sort([3, 1, 4], [4, 5, 9, 1]) # should return [9, 5, 4, 3, 1] ``` Explanation: - Merging the lists results in `[3, 1, 4, 4, 5, 9, 1]`. - Removing duplicates leaves `[3, 1, 4, 5, 9]`. - Sorting in descending order gives `[9, 5, 4, 3, 1]`. For empty input lists, return an empty list: ```python merge_and_sort([], []) # should return [] ```","solution":"def merge_and_sort(list1, list2): Merges two lists, removes duplicates, and sorts in descending order. merged_list = list(set(list1 + list2)) merged_list.sort(reverse=True) return merged_list"},{"question":"Given an undirected graph with N nodes and M edges, determine if it can be colored using exactly two colors such that no two adjacent nodes have the same color. -----Constraints----- - 1 leq N leq 10 - 0 leq M leq N*(N-1)/2 - 1 leq u, v leq N - No self-loops or multiple edges -----Input----- Input is given from Standard Input in the following format: N M u_1 v_1 u_2 v_2 : u_M v_M -----Output----- Print \\"YES\\" if the graph can be colored using exactly two colors such that no two adjacent nodes have the same color. Otherwise, print \\"NO\\". -----Sample Input----- 3 3 1 2 1 3 2 3 -----Sample Output----- NO This graph cannot be colored with two colors as it forms a triangle, which requires three colors. -----Sample Input----- 4 4 1 2 1 3 2 4 3 4 -----Sample Output----- YES This graph can be colored with two colors: one color for {1, 4} and another color for {2, 3}. NOTE: Graph coloring is a well-known problem. In this question, the graph\'s ability to be colored with two colors ensures that it is bipartite. The solution involves checking this property, often implemented using Breadth-First Search (BFS) or Depth-First Search (DFS).","solution":"def is_bipartite_graph(N, M, edges): Determines if a graph can be colored using exactly two colors such that no two adjacent nodes have the same color. from collections import deque # Create an adjacency list adjacency_list = [[] for _ in range(N)] for u, v in edges: adjacency_list[u-1].append(v-1) adjacency_list[v-1].append(u-1) colors = [-1] * N # -1 signifies no color assigned yet def bfs(source): queue = deque([source]) colors[source] = 0 while queue: node = queue.popleft() current_color = colors[node] for neighbor in adjacency_list[node]: if colors[neighbor] == -1: # If the neighbor hasn\'t been colored, color it with opposite color to current node colors[neighbor] = 1 - current_color queue.append(neighbor) elif colors[neighbor] == current_color: # If the neighbor is colored and has the same color as current node, it\'s not bipartite return False return True # As the graph could be disconnected, we need to check each component for node in range(N): if colors[node] == -1: if not bfs(node): return \\"NO\\" return \\"YES\\""},{"question":"Given an array of N elements where each element is either \'+\' or \'-\'. Consider this array as a sequence of operations applied to a counter initially set to zero. A \'+\' operation increments the counter by 1, while a \'-\' operation decrements the counter by 1. Your task is to determine the maximum value of the counter during the sequence of operations. Example 1: Input: N = 5, arr = [\'+\',\'-\',\'+\',\'+\',\'-\'] Output: 2 Explanation: Sequence of operations is: start from 0 -> +1 -> 0 -> +1 -> +2 -> +1. The maximum value of the counter during these operations is 2. Example 2: Input: N = 4, arr = [\'-\',\'-\',\'-\',\'-\'] Output: 0 Explanation: Sequence of operations is: start from 0 -> -1 -> -2 -> -3 -> -4. The maximum value of the counter during these operations is 0. Your Task: You do not need to read input or print anything. Your task is to complete the function maxCounterValue() which takes N and arr[] as input parameters and returns the maximum value of the counter during the sequence of operations. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5 arr[i] is either \'+\' or \'-\'","solution":"def maxCounterValue(N, arr): Returns the maximum value of the counter during the sequence of operations. Parameters: N (int): The number of operations. arr (list of str): The sequence of operations, each being either \'+\' or \'-\'. Returns: int: The maximum value of the counter. counter = 0 max_value = 0 for operation in arr: if operation == \'+\': counter += 1 elif operation == \'-\': counter -= 1 if counter > max_value: max_value = counter return max_value"},{"question":"Alex loves to play with strings, but he\'s recently encountered a problem he can\'t solve on his own. He has a string `s` consisting of lowercase alphabets and he wants to transform it into a palindrome. To achieve this, he can perform the following operation any number of times: choose a single character from the string and move it to the beginning or the end of the string. However, Alex wants to achieve a palindrome with the minimum number of operations possible. Help Alex by writing a program that calculates the minimum number of operations needed to transform the string `s` into a palindrome. -----Input----- The input consists of a single string `s` (1 ≤ |s| ≤ 2000) — the string Alex wants to transform into a palindrome. The string `s` consists of lowercase letters only. -----Output----- Print one integer — the minimum number of operations needed to transform the string `s` into a palindrome. -----Examples----- Input aab Output 1 Input abcde Output 4 Input racecar Output 0 -----Note----- In the first example, the string can be transformed into a palindrome with one operation. Move the \'a\' at index 1 to the end to get \\"aba\\". In the second example, one possible sequence of operations is to move the \'e\' to the beginning, move \'d\' next to it, then \'c\', and \'b\'. This results in \\"edcba\\", then \\"edbca\\", \\"ebdca\\", and finally \\"abcde\\". So, at least 4 operations are required. In the third example, the string is already a palindrome. Therefore, no operations are needed.","solution":"def min_operations_to_palindrome(s): Returns the minimum number of operations needed to transform the given string into a palindrome. n = len(s) dp = [[0] * n for _ in range(n)] for length in range(2, n+1): for i in range(n-length+1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = dp[i+1][j-1] else: dp[i][j] = min(dp[i+1][j], dp[i][j-1]) + 1 return dp[0][n-1]"},{"question":"The headquarters of a global logistic company is receiving shipment data from various distribution centers. Due to some reasons, they need to determine the busiest distribution center—the one which has handled the most number of shipments within a certain time frame. Write a program that determines the busiest distribution center by processing the shipment data. **Input:** - The first line contains an integer `T`, the number of test cases. - For each test case: - The first line contains an integer `D`, the number of distribution centers. - Each of the next `D` lines contains a string `name` and an integer `shipments` separated by a space, representing the name of the distribution center and the number of shipments it has handled. **Output:** - For each test case, output the name of the busiest distribution center. If there is a tie (i.e., multiple centers handle the same maximum number of shipments), output the name which appears first in the input list. **Constraints:** - 1 ≤ T ≤ 100 - 1 ≤ D ≤ 1000 - 1 ≤ `shipments` ≤ 10^6 - The length of the string `name` will not exceed 100 characters and will only consist of lowercase English letters. **Sample Input:** ``` 2 3 centerA 100 centerB 150 centerC 150 2 centerX 200 centerY 200 ``` **Sample Output:** ``` centerB centerX ``` **Explanation:** For the first test case, centerB and centerC both handle the maximum number of shipments (150), but centerB appears first in the input, so it\'s the busiest center. For the second test case, both centers handle the same number of shipments (200), but centerX appears first in the input. Thus, centerX is the busiest center.","solution":"def busiest_distribution_center(T, test_cases): results = [] for i in range(T): D = test_cases[i][0] centers = test_cases[i][1] max_shipments = -1 busiest_center = None for name, shipments in centers: if shipments > max_shipments or (shipments == max_shipments and busiest_center is None): max_shipments = shipments busiest_center = name results.append(busiest_center) return results"},{"question":"Asha loves reading books, and she recently found a box of old books in her attic. Each book has a different number of pages. She decided to start reading multiple books but wants to sequentially read books such that the number of pages in the books she picks must either increase or stay the same. Being curious, she wants to know the length of the maximum increasing sub-segment of books\' page numbers. Given N books, where the i-th book has P[i] pages, help Asha in finding the length of the longest increasing sub-segment of books she can read in sequence. Example 1: Input: N = 7 P[] = {100, 150, 150, 200, 90, 120, 130} Output: 4 Explanation: The maximum increasing sub-segment is the segment with page numbers from the first to the fourth book (100, 150, 150, 200). Example 2: Input: N = 4 P[] = {300, 250, 200, 100} Output: 1 Explanation: The maximum increasing sub-segment is each individual book, as there are no two consecutive books with non-decreasing page numbers. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findMaxLength() which takes the array P[] and its size N as inputs and returns the length of the maximum increasing sub-segment. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5 1 ≤ P[i] ≤ 10^9","solution":"def findMaxLength(N, P): Returns the length of the longest increasing (or non-decreasing) sub-segment of books based on the number of pages. if N == 0: return 0 max_length = 1 current_length = 1 for i in range(1, N): if P[i] >= P[i - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"You are given a string consisting of lowercase English letters. Your task is to convert this string into a \\"beautiful\\" string. We call a string \\"beautiful\\" if no two adjacent characters are the same. To achieve this, you can change any character to any other lowercase English letter. Your goal is to determine the minimum number of changes required to make the string \\"beautiful\\". Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the following t lines contains a string s (1 ≤ |s| ≤ 10^5), where |s| is the length of the string s. The total length of all strings in a single test is at most 10^5. Output For each test case, output a single integer — the minimum number of changes required to make the string \\"beautiful\\". Examples Input 3 aab aabb abcabc Output 1 2 0 Note In the first example, you can change the second character \'a\' to \'b\', obtaining \\"abb\\". In the second example, you can change the second character \'a\' to \'b\' and the third character \'b\' to \'a\', obtaining \\"abab\\". In the third example, the string is already beautiful, so no changes are needed.","solution":"def min_changes_to_beautiful(s): Returns the minimum number of changes required to make the string `s` beautiful. changes = 0 for i in range(1, len(s)): if s[i] == s[i-1]: changes += 1 return changes def min_changes_for_multiple_tests(t, test_cases): Given multiple test cases, returns the results for each case. results = [] for s in test_cases: results.append(min_changes_to_beautiful(s)) return results"},{"question":"Given an N x N matrix of integers, rotate the matrix by 90 degrees in the clockwise direction. Implement a function that performs the rotation in-place, i.e., using constant extra space. Input The first line contains an integer N (1 ≤ N ≤ 1000), the size of the matrix. The next N lines contain N space-separated integers each, representing the elements of the matrix. Output Output the N x N rotated matrix, with each row on a new line and each element separated by a space. Function Signature ```python def rotate_matrix(matrix: List[List[int]]) -> List[List[int]]: ``` Examples Input 3 1 2 3 4 5 6 7 8 9 Output 7 4 1 8 5 2 9 6 3 Input 2 1 2 3 4 Output 3 1 4 2","solution":"from typing import List def rotate_matrix(matrix: List[List[int]]) -> List[List[int]]: Rotates the given N x N matrix by 90 degrees clockwise in-place. N = len(matrix) # Transpose the matrix for i in range(N): for j in range(i, N): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(N): matrix[i].reverse() return matrix"},{"question":"Annie is playing a game with a sequence of locks and keys. Each lock can be opened with exactly one corresponding key. All locks and keys are represented as positive integers, where each integer from 1 to n represents both a key and a lock. A lock can only be opened by the key with the same number. Annie picks a sequence of keys and wants to know how many unique locks she can open using the keys in the given sequence. However, once Annie uses a key to open a lock, that key becomes unusable. Determine the maximum number of unique locks Annie can unlock from the given sequence of keys. -----Input----- The input consists of two lines: - The first line contains an integer n (1 ≤ n ≤ 100,000), representing the number of unique locks (and keys). - The second line contains a list of integers separated by spaces, representing the sequence of keys Annie picked. The length of this sequence does not exceed 200,000. -----Output----- Output a single integer representing the maximum number of unique locks that can be opened. -----Examples----- Input 5 4 5 5 2 3 1 4 2 3 Output 5 Input 3 1 1 1 1 1 Output 1","solution":"def max_unique_locks(n, keys): This function calculates the maximum number of unique locks that can be opened using the given sequence of keys. Parameters: n (int): the number of unique locks (and keys). keys (list): the sequence of keys. Returns: int: the maximum number of unique locks that can be opened. opened_locks = set() unique_locks_opened = 0 for key in keys: if key not in opened_locks and key <= n: unique_locks_opened += 1 opened_locks.add(key) return unique_locks_opened"},{"question":"Rick found himself in front of a treasure chest locked with a combination lock. The lock can be unlocked by providing the minimum possible numeric key, such that each digit of the key is present in the given lock combination. However, Rick can also use \'0\' as many times as he needs in between the digits in the final key, but no \'0\'s should be added at the beginning of the key. Help Rick solve this puzzle and find the minimum possible numeric key. [Input] First line contains an integer t indicating the number of test cases. Next line contains an integer n denoting the length of the lock\'s digits followed by n space-separated integers (each between 1 to 9) denoting the lock\'s digits. [Output] For each test case, output one line denoting the minimum possible numeric key. [Constraints] 1 ≤ t ≤ 100 1 ≤ n ≤ 100000 1 ≤ digits[i] ≤ 9 SAMPLE INPUT 2 5 3 1 4 1 5 4 2 2 3 3 SAMPLE OUTPUT 11345 2233","solution":"def minimum_key(t, test_cases): results = [] for i in range(t): n, digits = test_cases[i] digits.sort() result = \'\'.join(map(str, digits)) results.append(result) return results"},{"question":"Your friend, Alex, is observing changes in stock prices and wants to identify periods of maximum profit based on historical prices. Alex records the stock prices for each day and wants to determine the maximum possible profit from a single buy and sell operation over a given period. Write a function that takes in a list of stock prices, where each element represents the stock price on each day. The function should return the maximum profit that can be achieved from one transaction (i.e., buying one day and selling on another later day). If no profit can be achieved, the function should return 0. Function Signature ```python def max_profit(prices: List[int]) -> int: pass ``` Input - `prices` (List[int]): A list of integers where each integer represents the stock price on a given day. The length of the list will be at least 2 and at most 10^5. Output - int: The maximum possible profit from a single buy and sell transaction. If no profit is possible, return 0. Examples ```python max_profit([7, 1, 5, 3, 6, 4]) # returns 5 (buy on day 2, sell on day 5) max_profit([7, 6, 4, 3, 1]) # returns 0 (no profit can be made) max_profit([1, 2, 3, 4, 5]) # returns 4 (buy on day 1, sell on day 5) max_profit([5, 11, 3, 50, 60]) # returns 57 (buy on day 3, sell on day 5) ``` Constraints - You must complete the function in O(n) time complexity where n is the number of days (length of the input list). - The prices at each day (elements of the list) will always be non-negative integers. Notes - To achieve the required time complexity, consider using a single pass through the list to keep track of the minimum price observed so far and the maximum profit that can be achieved.","solution":"from typing import List def max_profit(prices: List[int]) -> int: if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: if price < min_price: min_price = price else: profit = price - min_price if profit > max_profit: max_profit = profit return max_profit"},{"question":"# Description: Given a matrix `mat` n x n (where n is an integer greater than 1), your task is to reverse the rows of the matrix such that the first row becomes the last row, the second row becomes the second last row, and so on. Return the modified matrix. For example: ``` Given mat = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] should return [ [7, 8, 9], [4, 5, 6], [1, 2, 3] ] ``` # Note: - The matrix `mat` will always be a square matrix with integer elements. - The dimensions of the matrix (n x n) will always be greater than 1. - All inputs are valid. # Some Examples: ``` reverseRows([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) === [[7, 8, 9], [4, 5, 6], [1, 2, 3]] reverseRows([[10, 20], [30, 40]]) === [[30, 40], [10, 20]] reverseRows([[1, 2], [3, 4], [5, 6]]) === [[5, 6], [3, 4], [1, 2]] reverseRows([[5, 10, 15], [20, 25, 30], [35, 40, 45]]) === [[35, 40, 45], [20, 25, 30], [5, 10, 15]] ```","solution":"def reverseRows(mat): Reverses the rows of a matrix such that the first row becomes the last row, the second row becomes the second last row, and so on. :param mat: List of lists representing the matrix :return: List of lists representing the modified matrix return mat[::-1]"},{"question":"Problem Statement: Find the Missing Letter. Input First line of input contains N – number of elements in the sequence. (2 ≤ N ≤ 50) Next line of input contains N lowercase letters of the Latin alphabet, separated by spaces. The sequence is guaranteed to be sorted in ascending order, except for one missing letter which should be in the sequence. Output Output the missing letter. SAMPLE INPUT 5 a b c e f SAMPLE OUTPUT d","solution":"def find_missing_letter(n, sequence): Returns the missing letter in the given sequence. :param n: Number of elements in the sequence :param sequence: List of N lowercase letters in ascending order :return: The missing letter as a string for i in range(n - 1): if ord(sequence[i + 1]) != ord(sequence[i]) + 1: return chr(ord(sequence[i]) + 1) return None"},{"question":"Implement a function that takes a list of integers and an integer k, and returns the maximum sum of a subarray with exactly k elements. If the list has fewer than k elements, the function should return None or undefined depending on the language. The function should be efficient, with a linear time complexity. For example: ```python max_subarray_sum([1, 2, 3, 4, 5], 2) # Returns 9 (sum of subarray [4,5]) max_subarray_sum([1, 2, 3, 4, 5], 5) # Returns 15 (sum of entire array) max_subarray_sum([1, 2], 3) # Returns None (since the list has fewer than 3 elements) max_subarray_sum([], 1) # Returns None (since the list is empty) ``` In case of multiple subarrays with the same maximum sum, any of those sums can be returned.","solution":"def max_subarray_sum(arr, k): Returns the maximum sum of a subarray with exactly k elements. If the list has fewer than k elements, the function returns None. if len(arr) < k or k <= 0: return None # Initialize the sum of the first subarray of size k max_sum = current_sum = sum(arr[:k]) # Use a sliding window to find the maximum sum of subarray with exactly k elements for i in range(k, len(arr)): current_sum += arr[i] - arr[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"To test your programming skills, we are going to play a game with strings and operations. Imagine you have a string `S` consisting of lowercase letters and you can perform the following operation any number of times (including zero): choose any two adjacent symbols in the string that are the same and remove them from the string. For example: - If the initial string `S` is \\"abbaca\\", you can remove \\"bb\\" and result in \\"aaca\\". Then by removing \\"aa\\", you will get \\"ca\\". - If the initial string `S` is \\"aabccba\\", you can remove \\"aa\\" resulting in \\"bccba\\", then remove \\"cc\\" and get \\"bba\\", and finally remove \\"bb\\" to end up with \\"a\\". Your task is to compute the length of the resulting string after performing the operations as many times as needed. -----Input----- The first line contains an integer t (1 le t le 100) — the number of test cases. The following lines describe the test cases. Each test case consists of one line containing a string S of length n (1 le n le 2 cdot 10^5). The sum of lengths of all strings in one test doesn\'t exceed 2 cdot 10^5. -----Output----- For each test case, print one integer: the length of the string after performing the operations as many times as needed. -----Example----- Input 3 abbaca aabccba abacabadabacaba Output 2 1 15 -----Note----- In the first test case, the initial string \\"abbaca\\" can be reduced step by step to \\"ca\\" which has length 2. In the second test case, \\"aabccba\\" can be reduced to \\"a\\" with length 1. In the third test case, \\"abacabadabacaba\\" cannot be further reduced, so its length remains 15.","solution":"def final_string_length(S): Returns the length of resulting string after performing the operations described. Parameters: S (str): Input string consisting of lowercase letters. Returns: int: Length of the resulting string after all possible operations. stack = [] for char in S: if stack and stack[-1] == char: stack.pop() else: stack.append(char) return len(stack) def solve(t, test_cases): Solves the problem for multiple test cases. Parameters: t (int): Number of test cases. test_cases (list of str): List of test case strings. Returns: list of int: List of resulting lengths after all possible operations for each test case. return [final_string_length(S) for S in test_cases]"},{"question":"Henry loves collecting fish of different types and sizes. He has a sequence of N fish sizes represented as an integer array F, where F[i] is the size of the i-th fish (1-based index). Henry has a unique requirement for his collection: he only wants to keep fish that have sizes which are prime numbers. Write a function that, given the sequence of fish sizes, returns the sequence of fish sizes that are prime numbers in the order they appeared in the original sequence. A prime number is defined as a number greater than 1 that has no positive divisors other than 1 and itself. Constraints * 1 leq N leq 10^5 * 1 leq F[i] leq 10^6 * All values in input are integers. Input Input is given from Standard Input in the following format: N F_1 F_2 cdots F_N Output Print the sizes of the fish that are prime numbers, in the order they originally appear, with spaces in between. Examples Input 6 4 6 7 10 11 13 Output 7 11 13 Input 5 1 2 3 4 5 Output 2 3 5 Input 8 15 23 28 37 40 41 43 47 Output 23 37 41 43 47","solution":"import sys import math def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def filter_prime_fish_sizes(N, fish_sizes): prime_fish_sizes = [size for size in fish_sizes if is_prime(size)] return prime_fish_sizes # Read input from stdin def main(): input = sys.stdin.read data = input().split() N = int(data[0]) fish_sizes = list(map(int, data[1:N+1])) result = filter_prime_fish_sizes(N, fish_sizes) print(\\" \\".join(map(str, result))) if __name__ == \\"__main__\\": main()"},{"question":"In a remote village, electricity is a scarce resource and they have a peculiar system of tracking electricity usage. Every house in the village has a meter that records the amount of electricity consumed each day. Interestingly, the village council bills each household for the highest amount of electricity consumed in any single day in that month. Your task is to determine what the bill for each household should be at the end of the month. Input Format The first line contains the number of test cases T. The first line of each test case contains an integer N which indicates the number of days in the month. The next line contains N space-separated integers where each integer represents the electricity consumption on that day. Output Format For each test case, print the maximum electricity consumption for that month. Constraints 1≤T≤100 1≤N≤31 0≤Electricity consumption on any given day≤10^4 SAMPLE INPUT 2 5 10 20 5 30 25 3 7 12 6 SAMPLE OUTPUT 30 12 Explanation Case 1: Out of 5 days, the highest consumption recorded on any single day is 30 units. Case 2: Out of 3 days, the highest consumption recorded on any single day is 12 units.","solution":"def highest_electricity_consumption(test_cases): results = [] for days, consumptions in test_cases: results.append(max(consumptions)) return results def process_input(input_string): data = input_string.strip().split(\'n\') test_cases = [] index = 0 T = int(data[index]) index += 1 for _ in range(T): N = int(data[index]) index += 1 consumptions = list(map(int, data[index].split())) index += 1 test_cases.append((N, consumptions)) return test_cases"},{"question":"Rarity is designing a new fashion line and wants to create a number of unique outfits for her upcoming show. Each outfit consists of a top, a bottom, and a pair of shoes. She has `T` different tops, `B` different bottoms, and `S` different pairs of shoes. Rarity wonders in how many different ways she can combine these items. Write a program to help Rarity determine the total number of unique outfits she can create. -----Input----- A single line contains three integers `T`, `B`, and `S` (1 ≤ T, B, S ≤ 1000). -----Output----- Output a single integer representing the total number of unique outfits Rarity can create. -----Examples----- Input 3 2 4 Output 24 Input 5 5 5 Output 125 Input 1 1 10 Output 10 -----Note----- For the first example, Rarity has 3 tops, 2 bottoms, and 4 pairs of shoes. The total number of unique outfits can be calculated as follows: Number of unique outfits = T * B * S = 3 * 2 * 4 = 24","solution":"def count_unique_outfits(T, B, S): Returns the total number of unique outfits that can be created. Parameters: T (int): Number of tops B (int): Number of bottoms S (int): Number of shoes Returns: int: Total number of unique outfits return T * B * S"},{"question":"The tourism department is organizing a cultural event in which there will be performances by participants from different cities. There are N participants in the event, numbered 1 through N. Each participant represents a city and has a first name and city name. During the event, the announcer calls participants on the stage by their first names. However, if there are multiple participants from the same city with the same first name, the announcer must call them by both their first name and city name. For each participant whose first name is unique within their city, the announcer can call them by their first name only. Help the announcer decide, for each participant, whether to call them by their first name or by both their first name and city name. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N. N lines follow. For each valid i, the i-th of the following N lines contains two space-separated strings denoting the first name and city name of participant i. ------ Output ------ For each test case, print N lines. For each valid i, the i-th of these lines should describe how the announcer calls the i-th participant\'s name ― it should contain either the first name or the first and city name separated by a space. ------ Constraints ------ 1 ≤ T ≤ 100 2 ≤ N ≤ 100 all first and city names contain only lowercase English letters the lengths of all first and city names are between 1 and 15 inclusive ------ Subtasks ------ Subtask #1 (100 points): original constraints ----- Sample Input 1 ------ 2 3 john newyork mike losangeles john boston 4 alice seattle bob seattle alice seattle charlie seattle ----- Sample Output 1 ------ john newyork mike john boston alice seattle bob alice seattle charlie","solution":"def resolve_names(test_cases): results = [] for case in test_cases: n, participants = case city_map = {} result_for_case = [] for first_name, city_name in participants: if first_name not in city_map: city_map[first_name] = {} if city_name not in city_map[first_name]: city_map[first_name][city_name] = 0 city_map[first_name][city_name] += 1 for first_name, city_name in participants: if len(city_map[first_name]) == 1 and city_map[first_name][city_name] == 1: result_for_case.append(first_name) else: result_for_case.append(f\\"{first_name} {city_name}\\") results.append(result_for_case) return results # Function to parse input and format output def parse_input_output(input_text): lines = input_text.strip().split(\\"n\\") index = 0 T = int(lines[index]) index += 1 test_cases = [] for _ in range(T): N = int(lines[index]) index += 1 participants = [] for _ in range(N): participant_info = lines[index].split() participants.append(participant_info) index += 1 test_cases.append((N, participants)) results = resolve_names(test_cases) return \'n\'.join(\'n\'.join(result) for result in results)"},{"question":"You are given a rectangular grid with n rows and m columns. Each cell in the grid can either be water (\'W\') or land (\'L\'). You can move between any two adjacent cells horizontally or vertically. Two adjacent cells are considered part of the same region if they are both land (\'L\'). Your task is to count the number of distinct land regions in the grid. -----Input----- The first line contains two integers n and m (1 leq n, m leq 1000), the number of rows and columns in the grid. Each of the next n lines contains a string of length m consisting of characters \'L\' and \'W\'. -----Output----- Output the number of distinct land regions in the grid. -----Examples----- Sample Input 1: 5 5 LWWLL LLWLL WLLLL WWWWW LLLWL Sample Output 1: 3 Sample Input 2: 3 3 WWW WLW WWW Sample Output 2: 1","solution":"def num_land_regions(grid, n, m): Returns the number of distinct land regions in the grid. def dfs(x, y): if x < 0 or y < 0 or x >= n or y >= m or grid[x][y] != \'L\': return grid[x][y] = \'W\' dfs(x+1, y) dfs(x-1, y) dfs(x, y+1) dfs(x, y-1) count = 0 for i in range(n): for j in range(m): if grid[i][j] == \'L\': count += 1 dfs(i, j) return count # Reading the input and utilizing the function if __name__ == \\"__main__\\": n, m = map(int, input().split()) grid = [list(input().strip()) for _ in range(n)] print(num_land_regions(grid, n, m))"},{"question":"There are **n** cities connected by **n - 1** highways. The highways are bidirectional, meaning you can travel in either direction. There is a unique path between any pair of cities, passing through each highway at most once. A group of friends wants to build walls in such a way that it divides the set of cities into two non-empty subsets, and they can only build walls along the highways. Each wall completely blocks the highway it is built on, making it impossible to travel along that highway. Your task is to determine the number of different ways the friends can build exactly one wall that will result in dividing the cities into two non-empty subsets. Input The first line of input contains an integer **n** (2 ≤ n ≤ 3000). Each of the next **n - 1** lines contain two space-separated integers **ai** and **bi** (1 ≤ ai, bi ≤ n; **ai ≠ bi**), representing the cities connected by a highway. Output In the only line of output, print the number of different ways to build the wall. Examples Input 4 1 2 2 3 3 4 Output 3 Input 5 1 2 1 3 3 4 4 5 Output 4","solution":"def count_ways_to_divide_cities(n, highways): Counts the number of ways to divide cities by building exactly one wall along the highways. Args: n (int): Number of cities. highways (List[Tuple[int, int]]): List of tuples representing highways. Returns: int: Number of ways to build exactly one wall to divide cities into two non-empty subsets. from collections import defaultdict, deque # Create adjacency list for the cities adj = defaultdict(list) for a, b in highways: adj[a].append(b) adj[b].append(a) # Find ways to divide cities by removing one edge def bfs(start): visited = [False] * (n + 1) queue = deque([start]) visited[start] = True count = 0 while queue: node = queue.popleft() count += 1 for neighbor in adj[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return count result = 0 for a, b in highways: # Temporarily remove the highway (a, b) adj[a].remove(b) adj[b].remove(a) # Use BFS or DFS to find the sizes of the two sets of cities size_a = bfs(a) size_b = n - size_a # The other subset if size_a > 0 and size_b > 0: result += 1 # Reconnect the highway (a, b) adj[a].append(b) adj[b].append(a) return result"},{"question":"Given a list of points in a 2D plane, find the K closest points to the origin (0, 0). The distance between two points (x1, y1) and (x2, y2) is given by the Euclidean distance formula. Input: - An array of points where each point is represented as a tuple (x, y) - An integer K that represents the number of closest points to the origin to return. Output: - An array of K points that are closest to the origin in terms of Euclidean distance. Example 1: Input: points = [(1, 3), (-2, 2)], K = 1 Output: [(-2, 2)] Explanation: The Euclidean distance from (1, 3) to the origin is sqrt(1^2 + 3^2) = sqrt(10). The Euclidean distance from (-2, 2) to the origin is sqrt((-2)^2 + 2^2) = sqrt(8). Since sqrt(8) < sqrt(10), the closest point to the origin is (-2, 2). Example 2: Input: points = [(3, 3), (5, -1), (-2, 4)], K = 2 Output: [(3, 3), (-2, 4)] Explanation: The Euclidean distance from (3, 3) to the origin is sqrt(3^2 + 3^2) = sqrt(18). The Euclidean distance from (5, -1) to the origin is sqrt(5^2 + (-1)^2) = sqrt(26). The Euclidean distance from (-2, 4) to the origin is sqrt((-2)^2 + 4^2) = sqrt(20). The two closest points to the origin are (3, 3) and (-2, 4). Your Task: You don\'t need to take input. Complete the function kClosest() that takes an array of points and an integer K as input parameters and returns an array of K points closest to the origin. Expected Time Complexity: O(N log K) Expected Auxiliary Space: O(K) Constraints: 1. 1 ≤ K ≤ N ≤ 10^4 2. -10^4 ≤ x, y ≤ 10^4","solution":"from heapq import nsmallest from math import sqrt def euclidean_distance(point): Compute the Euclidean distance from the origin (0, 0) for a given point. x, y = point return sqrt(x**2 + y**2) def kClosest(points, K): Find the K closest points to the origin (0, 0). Parameters: points (list of tuples): List of points in 2D plane. K (int): Number of closest points to return. Returns: list of tuples: K closest points to the origin. return nsmallest(K, points, key=euclidean_distance)"},{"question":"You are given an integer array and a number of operations you can perform on the array. Each operation allows you to select two elements from the array and replace them with their sum. Your task is to determine the maximum possible value of the sum of all elements of the array after performing the allowed number of operations. For example, if you select two elements a_i and a_j, replace them with a single element a_i + a_j, and perform this operation multiple times, what will be the maximum sum achievable? -----Input----- The first line of the input contains an integer t (1 le t le 100) — the number of test cases. The first line of each test case contains two integers n (2 le n le 100000) — the size of the array, and k (1 le k le n-1) — the number of operations allowed. The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 le a_i le 1000) — the elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 10^6. -----Output----- For each test case, print a single integer — the maximum possible sum of the array after performing at most k operations. -----Example----- Input 3 5 2 1 2 3 4 5 4 1 10 20 30 40 3 2 5 5 5 Output 20 100 15 -----Note----- In the first test case, we can perform the operations as follows: - Select elements 4 and 5, replace them with 9 (Array becomes [1, 2, 3, 9]) - Select elements 3 and 9, replace them with 12 (Array becomes [1, 2, 12]) The sum of the array is 15. In the second test case, we can perform the operation as follows: - Select elements 30 and 40, replace them with 70 (Array becomes [10, 20, 70]) The sum of the array is 100. In the third test case, we can perform the operations as follows: - Select elements 5 and 5, replace them with 10 (Array becomes [5, 10]) - Select elements 5 and 10, replace them with 15 (Array becomes [15]) The sum of the array is 15.","solution":"def max_sum_after_operations(t, testcases): results = [] for testcase in testcases: n, k, arr = testcase results.append(sum(arr)) return results"},{"question":"The Kingdom of Codesland has N cities connected by M bidirectional roads. Each road connects two cities and has an associated travel cost. The King wants to build new roads in such a way that there is exactly one path between any two cities (i.e., the road network is a tree). Additionally, the King has a list of K potential new roads he can build. Each new road also has an associated travel cost. The King wants to know the minimum total cost to construct a road network that meets the conditions. -----Input----- - The first line of input contains two positive integers N (2 le N le 10^4) and M (1 le M le 2 cdot 10^4). - The next M lines each contain three integers u, v, and w (1 le u, v le N, u neq v, 1 le w le 10^4) — the endpoints of a road and its travel cost. - The next line contains a single positive integer K (1 le K le 2 cdot 10^4). - The next K lines each contain three integers u, v, and w (1 le u, v le N, u neq v, 1 le w le 10^4) — the endpoints of a potential new road and its travel cost. -----Output----- Output a single integer — the minimum total cost to construct the road network satisfying the conditions, or -1 if it is impossible to meet the conditions. -----Examples----- Sample Input: 4 3 1 2 3 2 3 1 3 4 4 2 1 4 2 2 4 3 Sample Output: 6 In the above example, the minimum cost is achieved by adding road (2-3) from the original roads, and adding new roads (1-4) with cost 2 and (2-4) with cost 3 to form a tree. Sample Input: 3 2 1 2 5 2 3 10 1 1 3 1 Sample Output: 6","solution":"def find(parent, i): if parent[i] == i: return i parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): rootX = find(parent, x) rootY = find(parent, y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 def minimum_cost_to_construct(N, M, roads, K, new_roads): edges = roads + new_roads edges.sort(key=lambda x: x[2]) parent = list(range(N + 1)) rank = [0] * (N + 1) mst_cost = 0 edges_used = 0 for u, v, w in edges: if find(parent, u) != find(parent, v): union(parent, rank, u, v) mst_cost += w edges_used += 1 if edges_used == N - 1: break if edges_used != N - 1: return -1 return mst_cost"},{"question":"Given an array of integers, determine whether the array is a palindrome. An array is a palindrome if it reads the same forwards and backwards. -----Constraints----- - The array will contain between 1 and 1000 integers, inclusive. - Each integer in the array will be between -10^6 and 10^6, inclusive. -----Input----- Input is given from Standard Input in the following format: n a_1 a_2 a_3 ... a_n where: - n is the number of integers in the array - a_1, a_2, a_3, ... , a_n are the integers in the array -----Output----- Print \\"YES\\" if the array is a palindrome, or \\"NO\\" otherwise. -----Sample Input----- 5 1 3 5 3 1 -----Sample Output----- YES -----Sample Input----- 4 1 2 2 3 -----Sample Output----- NO","solution":"def is_palindrome(arr): Determines whether the given array is a palindrome. Parameters: arr (list of int): The array of integers to check. Returns: str: \\"YES\\" if the array is a palindrome, \\"NO\\" otherwise. return \\"YES\\" if arr == arr[::-1] else \\"NO\\" def main(): import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) arr = [int(x) for x in data[1:n+1]] print(is_palindrome(arr)) if __name__ == \\"__main__\\": main()"},{"question":"Polycarp has a sequence of integers and wants to rearrange it such that the sum of absolute differences between consecutive elements is minimized. Given a list of n integers, rearrange the sequence to achieve the desired goal. -----Input----- The first line contains an integer n (1 le n le 2 cdot 10^5) — the number of elements in the sequence. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9), the elements of the sequence. -----Output----- Print one rearranged sequence such that the sum of absolute differences between consecutive elements is minimized. -----Examples----- Input 4 4 2 1 3 Output 1 2 3 4 Input 5 10 1 5 7 2 Output 1 2 5 7 10 -----Note----- In the first example, the optimal arrangement of the sequence would be 1 le 2 le 3 le 4, as it minimizes the sum of the absolute differences between consecutive elements. In the second example, the sequence 1 le 2 le 5 le 7 le 10 achieves the minimized absolute difference.","solution":"def rearrange_sequence_to_minimize_abs_difference(n, sequence): Rearranges the sequence to minimize the sum of absolute differences between consecutive elements. :param n: int, the number of elements in the sequence :param sequence: list of int, the elements of the sequence :return: list of int, rearranged sequence that minimizes the sum of absolute differences between consecutive elements return sorted(sequence)"},{"question":"Implement a function, `is_isogram(string)`, that determines whether a given string is an isogram. An isogram is a word or phrase without repeating letters, regardless of letter case. The function should return `True` if the input string is an isogram, and `False` otherwise. Ex. ``` is_isogram(\\"Machine\\") ``` should return ``` True ``` ``` is_isogram(\\"Programming\\") ``` should return ``` False ```","solution":"def is_isogram(string): Determines if the input string is an isogram. An isogram is a word or phrase without repeating letters, regardless of letter case. Args: string (str): The string to check. Returns: bool: True if the string is an isogram, False otherwise. cleaned_string = string.lower() return len(set(cleaned_string)) == len(cleaned_string)"},{"question":"Given a string containing only three types of characters: \'(\', \')\' and \'*\', write a function to check whether this string is valid. A string is valid if: 1. Any left parenthesis \'(\' must have a corresponding right parenthesis \')\'. 2. Any right parenthesis \')\' must have a corresponding left parenthesis \'(\'. 3. Left parenthesis \'(\' must go before the corresponding right parenthesis \')\'. 4. \'*\' can be treated as a single right parenthesis \')\' or a single left parenthesis \'(\' or an empty string. Example 1: Input: \\"(*))\\" Output: True Explanation: Here, \'*\' can be considered as a \'(\', making the string \\"(()))\\". After matching the pairs, we have an empty string which means it is valid. Example 2: Input: \\"(*()\\" Output: True Explanation: Here, \'*\' can be considered as a \')\', making the string \\"(()()\\". After matching the pairs, we have one unmatched \'(\', \'*\' can be an empty string. Example 3: Input: \\"(()*)\\" Output: True Explanation: Here, \'*\' can be an empty string, making the string \\"(()*)\\". After matching the pairs, we have an empty string which means it is valid. Example 4: Input: \\"(((*)\\" Output: False Explanation: Here, even if \'*\' is considered as a \')\', we have an unmatched \'(\'. Hence it is not valid. Your Task: The task is to complete the function `isValidString(s)` which takes a string `s` and checks if it is valid. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 1 <= length of s <= 100 Note: The Input/Output format and Examples given are used for the system\'s internal purpose, and should be used by a user for Expected Output only. As it is a function problem, hence a user should not read any input from the stdin/console. The task is to complete the function specified, and not to write the full code.","solution":"def isValidString(s): This function checks if the given string containing \'(\', \')\' and \'*\' is valid. left_balance = 0 right_balance = 0 for char in s: if char == \'(\' or char == \'*\': left_balance += 1 else: left_balance -= 1 if left_balance < 0: return False for char in reversed(s): if char == \')\' or char == \'*\': right_balance += 1 else: right_balance -= 1 if right_balance < 0: return False return True"},{"question":"Given a 2D grid where each cell represents an elevation map, calculate the total area of water that can be trapped after raining. The grid[index][j] represents the elevation height at that cell (index, j). Water can only be trapped between blocks of higher elevation and only if there are blocks of higher elevation on both the left and the right of the current cell. The amount of water trapped is equal to the amount of space that would exist between the top of the trapped water in the current cell and the current cell\'s elevation height. You may assume all sides of the grid are surrounded by non-trapping boundaries. Example 1: Input: heightMap = [ [1,4,3,1,3,2], [3,2,1,3,2,4], [2,3,3,2,3,1] ] Output: 4 Explanation: Imagine this grid as elevations on a height map - the water can be trapped in the cells (1,2), (1,3), and (2,3), where the height is below the surrounding boundaries. Example 2: Input: heightMap = [ [3,3,3,3,3], [3,3,3,3,3] ] Output: 0 Explanation: There are no places to trap water because the water cannot be held between blocks of higher elevation. Your Task: You don\'t need to read or print anything. Your task is to complete the function trapRainWater() which takes heightMap as input parameter and returns the total area of trapped water. Constraints 1<=heightMap.length, heightMap[0].length<=200 0<=heightMap[i][j]<=10^5 Expected Time Complexity: O(n*m*log(n*m)) where n is the number of rows and m is the number of columns Expected Space Complexity: O(n*m)","solution":"import heapq def trapRainWater(heightMap): Calculate the total area of water that can be trapped in the given elevation map. Parameters: heightMap: List[List[int]]: A 2D grid representing the elevation map. Returns: int: The total trapped water. if not heightMap or not heightMap[0]: return 0 m, n = len(heightMap), len(heightMap[0]) visited = [[False] * n for _ in range(m)] min_heap = [] # Add all boundary cells to the min heap for i in range(m): for j in range(n): if i == 0 or i == m-1 or j == 0 or j == n-1: heapq.heappush(min_heap, (heightMap[i][j], i, j)) visited[i][j] = True water_trapped = 0 directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] while min_heap: height, x, y = heapq.heappop(min_heap) for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny]: visited[nx][ny] = True water_trapped += max(0, height - heightMap[nx][ny]) heapq.heappush(min_heap, (max(height, heightMap[nx][ny]), nx, ny)) return water_trapped"},{"question":"You are given a binary tree with N nodes. For each node, you are tasked with calculating the sum of the values of the nodes that are in the subtree of the given node (including itself). The binary tree is defined using the following structure: - Each of the N nodes has a unique integer value v_i. - Each node can have up to two children nodes (left and right). You are to write a program that outputs the sum of the values for the subtree of each node in the binary tree. -----Constraints----- - 1 leq N leq 10^5 - -10^4 leq v_i leq 10^4 -----Input----- Input is given from Standard Input in the following format: The first line contains a single integer N, the number of nodes in the tree. The following N lines each contain three integers representing a node in the format: u v l r - u is the index of the node. - v is the value of the node. - l is the index of the left child (or -1 if there is no left child). - r is the index of the right child (or -1 if there is no right child). -----Output----- Print N lines. Each line should contain the sum of the values of the nodes that are in the subtree of the i-th node. -----Sample Input----- 5 1 3 2 3 2 2 -1 -1 3 5 4 5 4 1 -1 -1 5 -2 -1 -1 -----Sample Output----- 9 2 4 1 -2 Explanation: - The subtree rooted at node 1 includes nodes 1, 2, 3, 4, and 5. - The subtree rooted at node 2 includes only node 2. - The subtree rooted at node 3 includes nodes 3, 4, and 5. - The subtree rooted at node 4 includes only node 4. - The subtree rooted at node 5 includes only node 5.","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def build_tree(nodes_info): nodes = {} for u, v, l, r in nodes_info: if u not in nodes: nodes[u] = TreeNode(v) else: nodes[u].value = v if l != -1: if l not in nodes: nodes[l] = TreeNode(0) nodes[u].left = nodes[l] if r != -1: if r not in nodes: nodes[r] = TreeNode(0) nodes[u].right = nodes[r] return nodes[1] # Assuming that the root is always node 1 def subtree_sum(node): if not node: return 0 left_sum = subtree_sum(node.left) right_sum = subtree_sum(node.right) total_sum = node.value + left_sum + right_sum node.sum = total_sum return total_sum def get_subtree_sums(root): subtree_sum(root) sums = [] nodes = [root] while nodes: current = nodes.pop(0) sums.append(current.sum) if current.left: nodes.append(current.left) if current.right: nodes.append(current.right) return sums def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) nodes_info = [] index = 1 for _ in range(N): u = int(data[index]) v = int(data[index + 1]) l = int(data[index + 2]) r = int(data[index + 3]) nodes_info.append((u, v, l, r)) index += 4 root = build_tree(nodes_info) subtree_sums = get_subtree_sums(root) for sum_val in subtree_sums: print(sum_val) if __name__ == \\"__main__\\": main()"},{"question":"A university is hosting a robot race in a grid-based arena. The arena is represented as an NxM grid where each cell can either be empty or contain an obstacle. The robots can move up, down, left, or right, but cannot move through obstacles. You need to determine the minimum number of moves required for a robot to navigate from its starting position to a given goal position. Input: The first line consists of two integers, N (number of rows) and M (number of columns). Next, there are N lines containing M characters each (\'.\' for an empty cell and \'#\' for an obstacle). The next line contains four integers sx, sy, gx, and gy, representing the starting position (sx, sy) and the goal position (gx, gy) respectively. Output: Output a single integer representing the minimum number of moves required for the robot to reach the goal position from the starting position. If it is not possible to reach the goal, output -1. Constraints: 1 <= N, M <= 1000 0 <= sx, sy, gx, gy < N (for rows) and 0 <= M (for columns) Sample Input: 5 5 ..... .#. .#... .#.#. ..... 0 0 4 4 Sample Output: 8 In this example, the robot starts at position (0,0) and the goal is to reach position (4,4). The robot can navigate around obstacles, requiring a minimum of 8 moves to reach the goal.","solution":"from collections import deque def minimum_moves_to_goal(grid, start, goal): N, M = len(grid), len(grid[0]) sx, sy = start gx, gy = goal if grid[sx][sy] == \'#\' or grid[gx][gy] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(sx, sy, 0)]) # (x, y, distance) visited = set((sx, sy)) while queue: x, y, dist = queue.popleft() if (x, y) == (gx, gy): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and grid[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"A string is said to be a palindrome if it remains the same when read backward. Given a string `s` consisting of lowercase alphabetic characters, you need to determine if converting the string into a palindrome by making at most one deletion is possible. Constraints * 1 leq len(s) leq 100 Input Input is given from Standard Input in the following format: s Output Print `True` if the string can be converted to a palindrome by deleting at most one character. Otherwise, print `False`. Examples Input abca Output True Input abcd Output False Input abccba Output True","solution":"def can_become_palindrome(s): Determines if the string can become a palindrome by removing at most one character. :param s: Input string consisting of lowercase alphabetic characters. :return: True if the string can become a palindrome by removing at most one character, False otherwise. def is_palindrome_range(l, r): while l < r: if s[l] != s[r]: return False l += 1 r -= 1 return True l, r = 0, len(s) - 1 while l < r: if s[l] != s[r]: return is_palindrome_range(l+1, r) or is_palindrome_range(l, r-1) l += 1 r -= 1 return True"},{"question":"You are given a list of integers representing the heights of students in a classroom, and you need to form groups of students such that each group\'s height difference does not exceed a given threshold. Each group can have a maximum of three students. Your task is to determine the minimum number of groups required. Input: The first line contains a single integer T, the number of test cases. Each test case consists of two lines: - The first line contains two integers N and D where N is the number of students and D is the maximum allowed difference in height within a group. - The second line contains N space-separated integers representing the heights of the students. Output: For each test case, print a single integer representing the minimum number of groups required. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ heights of students ≤ 10000 0 ≤ D ≤ 10000 Sample Input: 2 5 2 1 3 5 6 8 4 3 4 8 5 7 Sample Output: 3 2","solution":"def min_groups(trials): results = [] for trial in trials: N, D, heights = trial heights.sort() groups = 0 i = 0 while i < N: num_in_group = 1 start_height = heights[i] while i + 1 < N and num_in_group < 3 and abs(heights[i + 1] - start_height) <= D: num_in_group += 1 i += 1 groups += 1 i += 1 results.append(groups) return results # Example usage: # trials = [ # (5, 2, [1, 3, 5, 6, 8]), # (4, 3, [4, 8, 5, 7]) # ] # print(min_groups(trials)) # Output: [3, 2]"},{"question":"A robot in a maze can only move in two directions: right or downward. Given a maze represented as a 2D grid of size NxM where each element is either a 0 (indicating the robot can move through that cell) or a 1 (indicating the cell is blocked), find the number of unique paths from the top-left corner to the bottom-right corner. The robot must start in the top-left cell (0,0) and can only move to the right or downward to reach the bottom-right cell (N-1, M-1), going through cells that are not blocked. Example 1: Input: N = 2, M = 2, Maze = [[0, 0], [1, 0]] Output: 1 Explanation: The robot can only move from (0,0) -> (0,1) -> (1,1). There is no other path. Example 2: Input: N = 3, M = 3, Maze = [[0, 0, 0], [0, 1, 0], [0, 0, 0]] Output: 2 Explanation: The robot can move from (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) or (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2). Your Task: You don\'t need to read or print anything. Your task is to complete the function uniquePaths() which takes integers N, M, and a 2D array Maze as input parameters and returns the number of unique paths from the top-left to the bottom-right cell. Expected Time Complexity: O(N * M) Expected Space Complexity: O(N * M) Constraints: 1 <= N, M <= 100 Maze[i][j] is either 0 or 1.","solution":"def uniquePaths(N, M, Maze): if Maze[0][0] == 1 or Maze[N-1][M-1] == 1: return 0 dp = [[0] * M for _ in range(N)] dp[0][0] = 1 for i in range(N): for j in range(M): if Maze[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[N-1][M-1]"},{"question":"You are given a string s of length n consisting only of the characters \'A\', \'B\', and \'C\'. Your task is to determine the minimum number of moves required to transform the string into a \\"beautiful\\" string. A \\"beautiful\\" string is defined as a string where no two adjacent characters are the same. You can perform the following operation any number of times: Choose a character at any position and change it to any other character from \'A\', \'B\', or \'C\'. -----Input----- The first line contains an integer t (1 le t le 1000) — the number of test cases. The description of the test cases follows. Each of the next t lines contains a single string s (1 le |s| le 1000), where |s| is the length of the string. The total length of all strings does not exceed 100000. -----Output----- For each test case, output a single integer — the minimum number of moves required to make the string \\"beautiful\\". -----Examples----- Input 3 AABBCC ABCABC AAB Output 3 0 1 -----Explanation----- In the first test case, a possible sequence of moves to make the string \\"beautiful\\" is changing the second \'A\' to \'B\', the second \'B\' to \'C\', and the second \'C\' to \'A\'. This results in \\"ABABCA\\". In the second test case, the string is already \\"beautiful\\". In the third test case, we can change the second \'A\' to a \'B\', making it \\"AB\\".","solution":"def min_moves_to_beautiful_string(s): Returns the minimum number of moves required to transform the string s into a \\"beautiful\\" string, where no two adjacent characters are the same. n = len(s) if n <= 1: return 0 moves = 0 for i in range(1, n): if s[i] == s[i-1]: moves += 1 return moves def process_test_cases(t, test_cases): results = [] for s in test_cases: results.append(min_moves_to_beautiful_string(s)) return results"},{"question":"Damian decided to create a personalized message by encoding a sentence. He devised a simple cipher that shifts each letter of the sentence by a fixed number of positions in the alphabet. If the shift moves past \'z\', it wraps around to the beginning of the alphabet. Write a program to decode the message based on the given shift value. The encoded message contains only lowercase English letters and spaces. You are provided with the encoded message and the shift number used in the encoding. For example, with a shift of 3, \'a\' becomes \'d\', \'b\' becomes \'e\', \'z\' becomes \'c\', and so on. Your task is to decode the message and return the original sentence. -----Input----- The first line of input contains an integer n (1 ≤ n ≤ 25) — the fixed number of positions each letter in the message was shifted. The second line of input contains a non-empty string s with length not greater than 1000 — the encoded message. It is guaranteed that s is correctly encoded using the rules described above. -----Output----- Print the original sentence. -----Examples----- Input 3 khoor zruog Output hello world Input 5 mjqqt btwqi Output hello world Input 25 gdkkn vnqkc Output hello umkc","solution":"def decode_message(n, s): Decodes the given encoded message by shifting each letter backward by n positions in the alphabet. Parameters: n (int): The fixed number of positions each letter in the message was shifted. s (str): The encoded message. Returns: str: The original sentence. decoded_message = [] for char in s: if char == \' \': decoded_message.append(char) else: shifted_char = chr(((ord(char) - ord(\'a\') - n) % 26) + ord(\'a\')) decoded_message.append(shifted_char) return \'\'.join(decoded_message)"},{"question":"Write a program to simulate and verify the working of an elevator system in a multi-storey building. The building has F floors numbered from 1 to F, and a single elevator that serves these floors. The elevator can move either up or down between floors, one floor at a time. Additionally, the elevator has a request queue that contains the destination floors requested by the users. The elevator operates based on the following rules: 1. The elevator will start at the ground floor, which is floor 1. 2. When there are no requests, the elevator will remain idle at its current floor. 3. When there is a request for a floor, the elevator will move to that floor and stay there until a new request arrives. 4. If multiple requests are received while the elevator is moving, it will put them in a queue and serve them in the order they were received. Your task is to simulate the elevator\'s movement based on a given sequence of requests and print the floors visited by the elevator. Input: - The first line contains an integer F (1 ≤ F ≤ 1000), the number of floors in the building. - The second line contains an integer N (1 ≤ N ≤ 1000), the number of requests. - The next N lines each contain an integer, representing the floor number requested. Output: - Print the sequence of floors visited by the elevator, each on a new line. Example: Input: 5 7 2 3 5 4 1 4 2 Output: 1 2 3 5 4 1 4 2","solution":"def simulate_elevator(F, N, requests): Simulates the elevator movement based on given requests. Args: F (int): Number of floors in the building. N (int): Number of requests. requests (List[int]): List of requested floors. Returns: List[int]: Sequence of floors visited by the elevator. # Starting at the ground floor, which is floor 1 current_floor = 1 visited_floors = [current_floor] for request in requests: if 1 <= request <= F: current_floor = request visited_floors.append(current_floor) return visited_floors # Example usage: # F = 5 # N = 7 # requests = [2, 3, 5, 4, 1, 4, 2] # print(simulate_elevator(F, N, requests))"},{"question":"Given a list of integers, you need to perform the following operations: - Reverse the entire list. - Square each element of the reversed list. - Return the modified list. Input: - A single line containing space-separated integers. Output: - A single line containing space-separated integers after performing the specified operations. Constraints: - The number of integers in the list will be between 1 and 100. - Each integer in the list will be between -100 and 100. Example Input: 1 2 3 4 Example Output: 16 9 4 1 Example Input: -1 -2 -3 Example Output: 9 4 1","solution":"def process_list(input_list): Given a list of integers, reverse the list, square each element, and return the modified list. reversed_list = input_list[::-1] squared_list = [x ** 2 for x in reversed_list] return squared_list"},{"question":"You are given a list of integers representing the heights of towers positioned in a line. You can decrease the height of any tower but cannot increase it. Your objective is to make the heights of all the towers as equal as possible by reducing the heights, such that the height of the tallest tower equals the height of the shortest tower in the given range of indices inclusive. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of towers. The second line contains n integers h1, h2,..., hn (1 ≤ hi ≤ 100), representing the heights of the towers. The third line contains two integers a and b (1 ≤ a, b ≤ n), representing the range of indices (inclusive) within which you have the freedom to adjust the heights of the towers. Output Output a single integer — the minimum possible height that you can achieve for the tallest tower within the given range of indices after reducing the heights optimally. Example Input 5 5 7 9 10 6 2 4 Output 7 Input 6 4 8 5 9 7 10 3 6 Output 7","solution":"def min_possible_height(n, heights, a, b): Returns the minimal height that the tallest tower can achieve in the given range of indices by only decreasing their heights. :param n: int - the number of towers :param heights: List[int] - heights of the towers :param a: int - start index of the range (1-indexed) :param b: int - end index of the range (1-indexed) :return: int - the minimum possible height of the tallest tower # Adjust range to be 0-indexed for Python list operations range_heights = heights[a-1:b] # The minimum possible height of the tallest tower is the minimum height in the given range return min(range_heights) # Example Usage n = 5 heights = [5, 7, 9, 10, 6] a, b = 2, 4 print(min_possible_height(n, heights, a, b)) # Output: 7"},{"question":"You are given an array of integers and a target integer value. Write a function that returns a list of all unique pairs of numbers from the array that add up to the target value. Each pair in the output list should be sorted in ascending order, and the output list itself should be sorted in ascending order based on the first element of each pair. Input Format - The first line contains an integer n, the size of the array. - The second line contains n space-separated integers representing the elements of the array. - The third line contains the target integer value. Output Format - Output a list of unique pairs that add up to the target value, each pair should be sorted in ascending order. - The list of pairs should be sorted in ascending order based on the first element of each pair. Sample Input 6 1 2 3 4 3 5 6 Sample Output [[1, 5], [2, 4], [3, 3]] Note - A pair is considered unique if no other pair with the same values or the reverse exists in the output. - Pairs such as (2, 4) and (4, 2) are considered the same and should appear only once as [2, 4] in the output.","solution":"def find_pairs_with_sum(n, arr, target): Returns all unique pairs of numbers from the array that add up to the target value. Each pair and the list of pairs are sorted in ascending order. Args: n: Integer - size of the array. arr: List of integers - the elements of the array. target: Integer - the target value to which pairs must sum to. Returns: List of unique pairs sorted in required order. arr.sort() seen = set() pairs = set() for number in arr: complement = target - number if complement in seen: pairs.add(tuple(sorted((number, complement)))) seen.add(number) return sorted(list(pairs))"},{"question":"In a bustling market, food stalls offer a wide variety of dishes, each with a specific price. You are given a list of prices of dishes and the total money you have. Your objective is to purchase exactly two dishes such that the total money spent is maximized but does not exceed the money you have. However, there\'s a catch: the prices of the dishes must come from the list, and no dish can be purchased more than once. Write a program to find the two dishes that meet the criteria or determine that it\'s not possible to buy two dishes within the given constraints. -----Input----- The first line of the input contains two integers n and m (2 ≤ n ≤ 100 000, 1 ≤ m ≤ 1 000 000) — the number of dishes available and the total money you have. The second line contains n integers, p_i (1 ≤ p_i ≤ 500 000), the prices of the n dishes. -----Output----- Print a single integer — the maximum total money spent on two dishes without exceeding the total money given, or -1 if it is not possible to buy such two dishes. -----Examples----- Input 5 10 2 4 6 8 3 Output 10 Input 4 5 1 3 9 4 Output 5 Input 3 7 10 20 30 Output -1 -----Note----- In the first sample, the two dishes with prices 4 and 6 can be bought, spending exactly 10. In the second sample, the two dishes with prices 1 and 4 can be bought, spending a total of 5. In the third sample, there are no two dishes that can be bought without exceeding the given total money.","solution":"def max_money_two_dishes(n, m, prices): prices.sort() left, right = 0, n - 1 max_spent = -1 while left < right: total = prices[left] + prices[right] if total > m: right -= 1 else: max_spent = max(max_spent, total) left += 1 return max_spent"},{"question":"Matrix Spiral Traversal: Given an `m x n` matrix, return all elements of the matrix in spiral order starting from the top-left element. The traversal should proceed in the following direction sequence: right, down, left, and up, then repeat. Write code to implement the spiral traversal and return the resulting list of elements. For example: Input: ``` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` Output: `[1, 2, 3, 6, 9, 8, 7, 4, 5]` Your task is to complete the following method which accepts a matrix and returns the list of elements in spiral order: ```python def spiralOrder(matrix): # Your code here # Example usage: # matrix = [ # [1, 2, 3], # [4, 5, 6], # [7, 8, 9] # ] # print(spiralOrder(matrix)) # Output: [1, 2, 3, 6, 9, 8, 7, 4, 5] ```","solution":"def spiralOrder(matrix): Returns the elements of the matrix in spiral order. if not matrix: return [] result = [] m, n = len(matrix), len(matrix[0]) left, right, top, bottom = 0, n - 1, 0, m - 1 while left <= right and top <= bottom: # Traverse from left to right for i in range(left, right + 1): result.append(matrix[top][i]) top += 1 # Traverse from top to bottom for i in range(top, bottom + 1): result.append(matrix[i][right]) right -= 1 if top <= bottom: # Traverse from right to left for i in range(right, left - 1, -1): result.append(matrix[bottom][i]) bottom -= 1 if left <= right: # Traverse from bottom to top for i in range(bottom, top - 1, -1): result.append(matrix[i][left]) left += 1 return result"},{"question":"Given an array of integers nums and an integer k, return the average of the subarrays of length k that have the maximum sum. Example 1: Input: nums = [1,12,-5,-6,50,3], k = 4 Output: [12.75] Explanation: The subarray of length 4 that has the maximum sum is [12,-5,-6,50] and its average is 12.75. Example 2: Input: nums = [5,5,5,5,5,5,5], k = 3 Output: [5.0] Explanation: All subarrays of length 3 have the same sum (15) and their averages are [5.0, 5.0, 5.0, 5.0, 5.0, 5.0]. Example 3: Input: nums = [1,2,3,4,5,6], k = 2 Output: [5.5] Explanation: The subarray of length 2 that has the maximum sum is [5,6] and its average is 5.5. Constraints: 1 <= nums.length <= 100000 -10000 <= nums[i] <= 10000 1 <= k <= nums.length","solution":"def find_max_average_subarray(nums, k): Returns the average of the subarrays of length k that have the maximum sum. n = len(nums) # Initialize the sum of the first window of size k max_sum = sum(nums[:k]) current_sum = max_sum # Traverse the array from the k-th element to the end for i in range(k, n): # Slide the window right by removing the element going out of the window # and adding the new element coming into the window current_sum += nums[i] - nums[i - k] max_sum = max(max_sum, current_sum) # Calculate and return the average of the subarray having maximum sum return max_sum / k"},{"question":"Alice enjoys making different sequences using a mix of integers and has a special interest in sequences that can be reordered into palindromes. She needs your help to determine if a given sequence can be rearranged such that it reads the same backward as forward. A sequence can be rearranged into a palindrome if for each number in the sequence, there is another occurrence of that number, except for at most one number which can appear an odd number of times. Write a program to help Alice determine if each sequence can be rearranged into a palindrome. ------ Input Format ------ - The first line contains T denoting the number of test cases. Then the test cases follow. - The first line of each test case contains an integer n denoting the number of integers in the sequence. - The second line of each test case contains n integers s[i] denoting the elements of the sequence. ------ Output Format ------ For each test case, print a single line containing \\"YES\\" if the sequence can be rearranged into a palindrome and \\"NO\\" otherwise. ------ Constraints ------ 1 ≤ T ≤ 10^{5} 1 ≤ n ≤ 10^{6} 1 ≤ s[i] ≤ 10^{9} - The sum of n over all test cases does not exceed 10^{6} ----- Sample Input 1 ------ 2 5 1 2 3 2 1 4 4 3 3 4 ----- Sample Output 1 ------ YES YES ----- Explanation 1 ------ In the first test case, the sequence can be rearranged to \\"1 2 3 2 1\\" or \\"3 1 2 2 1\\" which are both palindromes. In the second test case, the sequence can be rearranged to \\"4 3 3 4\\" which is a palindrome.","solution":"def can_be_palindrome(n, sequence): from collections import Counter count = Counter(sequence) odd_count = sum(1 for v in count.values() if v % 2 != 0) return \\"YES\\" if odd_count <= 1 else \\"NO\\" def process_test_cases(T, test_cases): results = [] for i in range(T): n, sequence = test_cases[i] results.append(can_be_palindrome(n, sequence)) return results"},{"question":"You are given a rectangular grid with dimensions m x n. Each cell in the grid either contains a 0 or a 1. A cell containing a 1 is deemed to be a mine, whereas a cell containing a 0 is safe. Your task is to determine the number of mines that are directly adjacent to each cell in the grid. Adjacent cells are horizontally, vertically, or diagonally neighboring cells. You need to generate a new grid of the same dimensions where each cell contains a number representing the count of mines adjacent to that cell. -----Input----- The first line of the input contains two integers m and n (1 ≤ m, n ≤ 100) — the dimensions of the grid. Each of the next m lines contains n integers (either 0 or 1) separated by spaces — the grid configuration. -----Output----- Print the resulting grid of dimensions m x n. Each cell in the grid should contain a single integer — the number of mines present in adjacent cells. -----Examples----- Input: 3 3 1 0 1 0 1 0 1 0 1 Output: 2 3 2 3 4 3 2 3 2 Input: 4 4 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 Output: 1 1 1 0 1 2 2 1 1 2 1 1 0 1 1 1 -----Note----- In the first sample, if we look at the cell in the middle (position [1][1]), it is surrounded by 4 mines: to its left, right, above, and below. Thus, the number in the middle cell of the output is 4.","solution":"def count_adjacent_mines(grid, m, n): directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] def count_mines(x, y): count = 0 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] == 1: count += 1 return count result = [[0 for _ in range(n)] for _ in range(m)] for i in range(m): for j in range(n): if grid[i][j] == 0: result[i][j] = count_mines(i, j) else: result[i][j] = 9 # Adding 9 just to indicate the presence of a mine for testing purposes. return result"},{"question":"Given a sequence of integers, an arithmetic subarray is any subarray that consists of at least two integers and has the property that the difference between consecutive elements is constant. In particular, given a sequence of integers, return the length of the longest arithmetic subarray in the given sequence. ------ Input ------ The first line contains an integer `N`, the number of elements in the sequence. The second line contains `N` space-separated integers describing the sequence. ------ Output ------ Print a single integer denoting the length of the longest arithmetic subarray in the given sequence. ------ Constraints ------ 1 ≤ N ≤ 2 cdot 10^5 -10^9 ≤ A_i ≤ 10^9 ------ Sample Input 1 ------ 5 10 7 4 6 8 ------ Sample Output 1 ------ 3 ------ Explanation 1 ------ The longest arithmetic subarray is [4, 6, 8], which has a length of 3. ------ Sample Input 2 ------ 7 9 7 5 3 2 0 1 ------ Sample Output 2 ------ 4 ------ Explanation 2 ------ The longest arithmetic subarray is [9, 7, 5, 3], which has a length of 4. ------ Additional Information ------ An arithmetic subarray in a sequence can be at least two elements long and maintains a constant difference between consecutive elements. In this problem, you need to identify the longest such subarray from the given sequence.","solution":"def longest_arithmetic_subarray(n, array): Returns the length of the longest arithmetic subarray in the given sequence. if n == 1: return 1 max_length = 2 current_length = 2 current_diff = array[1] - array[0] for i in range(2, n): if array[i] - array[i - 1] == current_diff: current_length += 1 else: current_diff = array[i] - array[i - 1] current_length = 2 max_length = max(max_length, current_length) return max_length"},{"question":"Maria is trying to create a special sequence which she calls a \'Hopping Sequence\'. A sequence of integers is termed as a \'Hopping Sequence\' if for every three consecutive integers in the sequence, the middle integer is the arithmetic mean of the first and third integer. Maria wants to find out if a given sequence is a \'Hopping Sequence\' or not. Input: The first line contains N, the number of integers in the sequence. The second line contains N space-separated integers which form the sequence. Output: Print \\"YES\\" if the sequence is a \'Hopping Sequence\' and \\"NO\\" otherwise. Constraints: 1 ≤ N ≤ 10^5 -10^9 ≤ Integer value ≤ 10^9 SAMPLE INPUT 5 1 2 3 4 5 SAMPLE OUTPUT YES SAMPLE INPUT 4 1 3 5 8 SAMPLE OUTPUT NO","solution":"def is_hopping_sequence(sequence): Determines if a given sequence is a \'Hopping Sequence\'. Parameters: sequence (list of int): The sequence of integers. Returns: str: \\"YES\\" if the sequence is a \'Hopping Sequence\', \\"NO\\" otherwise. n = len(sequence) if n < 3: return \\"YES\\" for i in range(1, n-1): if sequence[i] * 2 != sequence[i-1] + sequence[i+1]: return \\"NO\\" return \\"YES\\""},{"question":"Suppose you have two arrays `a` and `b`, both of size `n`, consisting of non-negative integers. You are required to construct a derived array `c` of size `n` such that each element `ci` is obtained by applying a certain operation on the corresponding elements `ai` and `bi` for all `i` from `0` to `n-1`. The operation is defined as follows: `ci = max(ai, bi) + min(ai, bi)` Write a program that receives two arrays of non-negative integers and calculates the derived array using the described operation. Input The first line contains an integer `n` (1 ≤ n ≤ 100) — the size of the arrays `a` and `b`. The second line contains `n` non-negative integers `a1, a2, ..., an` (0 ≤ ai ≤ 10^9) separated by spaces. The third line contains `n` non-negative integers `b1, b2, ..., bn` (0 ≤ bi ≤ 10^9) separated by spaces. Output Output a single line containing `n` non-negative integers `c1, c2, ..., cn` separated by spaces — the elements of the derived array `c`. Examples Input 3 1 3 5 2 4 6 Output 3 7 11 Input 4 0 1 2 3 3 2 1 0 Output 3 3 3 3 Input 2 1000000000 1000000000 1000000000 1000000000 Output 2000000000 2000000000 Note In the first example, the derived array `c` is calculated as follows: - `c1 = max(1, 2) + min(1, 2) = 2 + 1 = 3` - `c2 = max(3, 4) + min(3, 4) = 4 + 3 = 7` - `c3 = max(5, 6) + min(5, 6) = 6 + 5 = 11` In the second example, the derived array `c` is calculated as follows: - `c1 = max(0, 3) + min(0, 3) = 3 + 0 = 3` - `c2 = max(1, 2) + min(1, 2) = 2 + 1 = 3` - `c3 = max(2, 1) + min(2, 1) = 2 + 1 = 3` - `c4 = max(3, 0) + min(3, 0) = 3 + 0 = 3`","solution":"def calculate_derived_array(n, a, b): Calculate the derived array c based on the formula c[i] = max(a[i], b[i]) + min(a[i], b[i]) Args: n: int, the size of arrays `a` and `b` a: list of int, the first array b: list of int, the second array Returns: list of int, the derived array `c` c = [] for i in range(n): c.append(max(a[i], b[i]) + min(a[i], b[i])) return c"},{"question":"In an ancient city, there exists a special kind of road capable of branching out into others, forming an extensive network. Each road in this network is represented by a unique integer length. The residents of the city often take routes that pass through several roads to get from one point to another, aiming to minimize the total length of the route. You are asked to decipher the optimal path between two points in this road network. Each road\'s length is provided, and it is guaranteed that there is a unique path between any two points, as the network forms a tree (an acyclic connected graph). You need to determine the shortest path length between two given points in the network. -----Constraints----- - There are between 2 and 100,000 points in the network (inclusive). - Each road\'s length is a positive integer between 1 and 1,000,000 (inclusive). - The total length of all roads combined fits within a 64-bit integer. -----Input----- Input is given from Standard Input in the following format: - The first line contains two integers, `n` and `q`, representing the number of points and the number of queries, respectively. - The next `n-1` lines, each containing three integers `u`, `v`, and `w`, representing a road connecting point `u` to point `v` with length `w`. - The next `q` lines, each containing two integers `a` and `b`, representing a query for the shortest path length between points `a` and `b`. -----Output----- For each query, print the shortest path length between the given points `a` and `b`. -----Sample Input----- 5 3 1 2 3 1 3 4 2 4 2 2 5 6 4 5 3 4 1 5 -----Sample Output----- 8 9 9 Explanation: The tree is structured as follows: ``` 1 / 2 3 / 4 5 ``` With weight of edges: - 1-2: 3 - 1-3: 4 - 2-4: 2 - 2-5: 6 The shortest path from 4 to 5 goes through node 2, resulting in length 2 + 3 + 6 = 11. The shortest path from 3 to 4 goes through node 1 and node 2, resulting in length 4 + 3 + 2 = 9. The shortest path from 1 to 5 goes through node 2, resulting in length 3 + 6 = 9.","solution":"import sys from collections import defaultdict, deque def build_tree(n, edges): tree = defaultdict(list) for u, v, w in edges: tree[u].append((v, w)) tree[v].append((u, w)) return tree def bfs(tree, start): distances = {start: 0} queue = deque([start]) while queue: node = queue.popleft() current_distance = distances[node] for neighbor, weight in tree[node]: if neighbor not in distances: distances[neighbor] = current_distance + weight queue.append(neighbor) return distances def answer_queries(tree, queries): results = [] for a, b in queries: distances = bfs(tree, a) results.append(distances[b]) return results def solve(n, q, edges, queries): tree = build_tree(n, edges) return answer_queries(tree, queries) # Main Execution if __name__ == \\"__main__\\": input = sys.stdin.read data = input().split() n = int(data[0]) q = int(data[1]) edges = [] index = 2 for _ in range(n-1): u = int(data[index]) v = int(data[index + 1]) w = int(data[index + 2]) edges.append((u, v, w)) index += 3 queries = [] for _ in range(q): a = int(data[index]) b = int(data[index + 1]) queries.append((a, b)) index += 2 result = solve(n, q, edges, queries) for res in result: print(res)"},{"question":"Alice is fascinated by cryptographic algorithms and has come across a unique problem while reading about number theory. She wants to generate an integer sequence based on the following rules: 1. Start with a given integer N. 2. If N is even, halve it (i.e., N = N / 2). 3. If N is odd, multiply it by 3 and add 1 (i.e., N = 3 * N + 1). 4. Continue the process until N becomes 1. Alice is interested in finding out two things: 1. The length of the sequence. 2. The maximum value attained in the sequence. Given multiple starting values of N, help Alice by writing a program to find out the required information for each starting value. Input: The first line contains the integer T, the number of test cases. The next T lines each contain a single integer N, the starting value for which the sequence needs to be generated. Output: For each of the T test cases, output two integers separated by a space. The first integer is the length of the sequence, and the second integer is the maximum value attained in the sequence. Constraints: 1 ≤ N ≤ 10^6 1 ≤ T ≤ 10^4 SAMPLE INPUT 3 5 3 6 SAMPLE OUTPUT 6 16 8 16 9 16","solution":"def collatz_sequence_info(N): length = 1 max_value = N while N != 1: if N % 2 == 0: N //= 2 else: N = 3 * N + 1 max_value = max(max_value, N) length += 1 return length, max_value def process_test_cases(T, test_cases): results = [] for N in test_cases: length, max_value = collatz_sequence_info(N) results.append(f\\"{length} {max_value}\\") return results"},{"question":"You need to count the number of ways to assign values to a list of n integers such that the sum of any two consecutive integers in the list is odd. An integer can be either odd or even. The sum of two consecutive integers being odd implies one must be odd and the other even. Input Format The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case contains an integer n, the length of the list. Output Format For each test case, output a single line containing the number of possible ways to assign values to the list modulo (10^9 + 7). Constraints 1 ≤ T ≤ 1000 1 ≤ n ≤ 10^9 Sample Input 3 3 4 5 Sample Output 4 4 8 Explanation Example case 1: There are 4 ways to assign values to the list of length 3 such that the sum of any two consecutive integers is odd: OEE, EOO, OEO, EOE (O for odd, E for even). Example case 2: There are 4 ways to assign values to the list of length 4 such that the sum of any two consecutive integers is odd: EOEO, OEOE, EOEO, OEOE (because it is repeating every 2). Example case 3: There are 8 ways to assign values to the list of length 5 such that the sum of any two consecutive integers is odd: OEEOE, EOOEO, OEOEE, EOEOO, and their reverses.","solution":"def count_ways(n): Returns the number of ways to assign values to a list of length n such that the sum of any two consecutive integers is odd. Parameters: n (int): Length of the list Returns: int: The number of ways to assign values to the list, modulo (10^9 + 7) MOD = 10**9 + 7 # For n = 1, there are 2 ways (either odd or even) if n == 1: return 2 # For other n, there are 2 ways to place odd or even at the first place # and remaining (n-1) can be set alternately in 2^((n-1) // 2) ways return (2 * pow(2, (n-1) // 2, MOD)) % MOD def solve(T, test_cases): Solves multiple test cases and return the results for each case. Parameters: T (int): Number of test cases test_cases (list): List of integers denoting the length of the list for each test case Returns: list: List containing the results for each test case. results = [] for n in test_cases: results.append(count_ways(n)) return results"},{"question":"You are working on a farm where you need to build rectangular pens for different types of animals. Each pen must use a given amount of fencing material distributed evenly around all sides. Your goal is to find the dimensions of the pen that maximize the enclosed area given the length of fencing material. For a given length of fencing material (L), find the dimensions of a rectangular pen that maximize the enclosed area, subject to the constraint that each side of the pen must be an integer length. Input The first and only line of the input contains an integer (L) (4 ≤ (L) ≤ 10^5), which is the total length of fencing material in meters. Output Print two integers representing the length and width of the pen that maximize the enclosed area. If multiple solutions exist, print any one of them. Examples Input 20 Output 5 5 Input 18 Output 4 5 Input 10 Output 2 3 Note In the first example, with 20 meters of fencing, the optimal dimensions of the pen are 5x5, which results in an area of 25 square meters (since 5+5+5+5=20). In the second example, with 18 meters of fencing, the dimensions 4x5 yield the highest area of 20 (since 4+4+5+5=18). In the third example, the best dimensions with 10 meters of fencing are 2x3, resulting in an area of 6 (since 2+2+3+3=10).","solution":"def optimal_pen_dimensions(L): Given the length of fencing material L, find the dimensions of a rectangular pen that maximize the enclosed area. Parameters: L (int): Total length of fencing material. Returns: tuple: Length and Width of the pen. # Start by checking possible dimensions max_area = 0 optimal_length = 1 optimal_width = 1 # Iterate over potential widths # Length and width sum up to L // 2 for width in range(1, L // 2): length = (L // 2) - width area = length * width if area > max_area: max_area = area optimal_length = length optimal_width = width return optimal_length, optimal_width"},{"question":"Develop an algorithm to find the longest substring of a given string that contains at most two distinct characters. Write a function, `longest_substring_two_distinct(s)`, that takes a string `s` as input and returns the longest substring of `s` with at most two distinct characters. Constraints: * 1 ≤ len(s) ≤ 100,000 * The input string `s` is composed of only lowercase alphabets. Input * A single string `s`. Output * A single string, which is the longest substring containing at most two distinct characters. If there are multiple longest substrings with the same length, return the lexicographically smallest one. Examples Input: abcbbbbcccbdddadacb Output: bcbbbbcccb Input: eceba Output: ece Explanation: In the first example, the longest substring with at most two distinct characters is \\"bcbbbbcccb\\". In the second example, the longest substring with at most two distinct characters is \\"ece\\".","solution":"def longest_substring_two_distinct(s): Finds the longest substring with at most two distinct characters. n = len(s) if n < 3: return s left, right = 0, 0 freq = {} max_len, max_substr = 0, \\"\\" while right < n: if len(freq) < 3: freq[s[right]] = right right += 1 if len(freq) == 3: del_idx = min(freq.values()) del freq[s[del_idx]] left = del_idx + 1 if (right - left) > max_len or (right - left == max_len and s[left:right] < max_substr): max_len = right - left max_substr = s[left:right] return max_substr"},{"question":"Ravi is practicing for a coding competition and wants to strengthen his skills in string manipulation. One of the tasks he is working on involves checking if a given string can be transformed into a palindrome by rearranging its characters and, if necessary, removing at most one character. A palindrome is a string that reads the same backward as forward. For example, \\"madam\\" is a palindrome. You need to write a program to help Ravi determine if a given string can be transformed into a palindrome under the given conditions. Input Format: 1. The first line contains an integer T denoting the number of test cases. 2. The next T lines each contain a string S. Output Format: 1. For each test case, output \\"1\\" if the string can be transformed into a palindrome by rearranging its characters and removing at most one character, otherwise output \\"0\\". Constraints: 1. 1 <= T <= 100 2. 1 <= |S| <= 10^5 3. The strings contain only lowercase English letters. Sample Input: 3 abca racecar abcdef Sample Output: 1 1 0 Explanation: - In the first test case, the string \\"abca\\" can be transformed into a palindrome by removing the character \'c\' to form \\"aba\\". - In the second test case, the string \\"racecar\\" is already a palindrome. - In the third test case, the string \\"abcdef\\" cannot be transformed into a palindrome even after removing at most one character.","solution":"def can_form_palindrome_with_one_removal(S): Returns 1 if the string can be transformed into a palindrome by rearranging its characters and removing at most one character, otherwise returns 0. from collections import Counter def is_palindrome_possible(s): # Count the occurrences of each character count = Counter(s) # Find the number of characters with odd counts odd_count = sum(1 for c in count.values() if c % 2 == 1) # We can allow at most 1 odd character for the string to be a palindrome return odd_count <= 1 # First, check if the permutation of the string itself can be a palindrome if is_palindrome_possible(S): return 1 # If not, check by trying to remove one character at a time for i in range(len(S)): if is_palindrome_possible(S[:i] + S[i+1:]): return 1 return 0 def check_palindrome_transformations(test_cases): results = [] for S in test_cases: results.append(can_form_palindrome_with_one_removal(S)) return results"},{"question":"Dr. Charvi is working on a reforestation project. She needs to plant trees in a straight line along a road but is not sure how to proceed with spacing. Each tree should be planted at equal intervals, and the distance between the first tree\'s planting point and the last tree\'s planting point should be maximized given the constraints provided. Initially, she is allocated D meters of road to plant the trees on. From this D meters, she needs to plant N trees such that the distance between any two trees is maximized. The first tree should be planted at 0 meters and the last tree at (N-1) meters within the given space D. Your task is to write a program helping Dr. Charvi maximize the distances between the trees by determining the optimal position for each tree. Input: - First line will contain an integer T, the number of test cases. - Each of the next T lines contains two integers D (total distance) and N (number of trees). Output: - For each test case, output a single integer representing the maximum spacing between any two adjacent trees. Constraints: 1 ≤ T ≤ 100 1 ≤ D ≤ 10^9 2 ≤ N ≤ 10^5 SAMPLE INPUT 2 100 5 25 4 SAMPLE OUTPUT 25 8 Explanation: In the first test case, with D=100 and N=5, the optimal placement is 0, 25, 50, 75, 100 yielding a maximum spacing of 25 meters. In the second test case, with D=25 and N=4, the optimal placement is 0, 8, 16, 24 yielding a maximum spacing of 8 meters.","solution":"def max_spacing(D, N): Returns the maximum spacing between any two adjacent trees when planting N trees along D meters. return D // (N - 1) def solve(test_cases): Solves multiple test cases and returns a list of results. results = [] for D, N in test_cases: results.append(max_spacing(D, N)) return results"},{"question":"A father and his daughter love to play a game with strings. They start with two different strings, `S1` and `S2`, both consisting of lowercase English letters. The game’s objective is to form a new string `S` that maximizes the length of a common subsequence between `S` and another given string `T`. The string `S` is created by interleaving the characters of `S1` and `S2` in any order, without reordering the characters in `S1` or `S2`. Write a program to determine the length of the longest common subsequence (LCS) obtainable by interleaving `S1` and `S2` and then comparing with `T`. -----Input----- The input consists of three lines: - The first line contains the string `S1` (1 leq |S1| leq 100). - The second line contains the string `S2` (1 leq |S2| leq 100). - The third line contains the string `T` (1 leq |T| leq 200). -----Output----- The first and only line of output should contain the length of the longest common subsequence between any interleaved form of strings `S1` and `S2` and the string `T`. -----Examples----- Sample Input: abc def adbecf Sample Output: 6 Sample Input: abc def abcdef Sample Output: 6","solution":"def longest_common_subsequence_interleaved(S1, S2, T): len1, len2, lenT = len(S1), len(S2), len(T) dp = [[[0] * (lenT + 1) for _ in range(len2 + 1)] for __ in range(len1 + 1)] for i in range(1, len1 + 1): for j in range(1, len2 + 1): for k in range(1, lenT + 1): if S1[i - 1] == T[k - 1] and S2[j - 1] == T[k - 1]: dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1], dp[i - 1][j - 1][k - 1] + 1) elif S1[i - 1] == T[k - 1]: dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j][k - 1]) + (S1[i - 1] == T[k - 1]) elif S2[j - 1] == T[k - 1]: dp[i][j][k] = max(dp[i][j - 1][k], dp[i][j][k - 1]) + (S2[j - 1] == T[k - 1]) else: dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1]) return dp[len1][len2][lenT]"},{"question":"You are given a list of integers representing the heights of plants in a row. You need to water these plants such that each plant receives enough water but without wasting water by watering unevenly. Specifically, you must ensure that the water distributed is non-decreasing from left to right, meaning that a given plant should not receive less water than the one before it. Your task is to determine the minimum amount of water required where each unit of height corresponds to one unit of water. Input Format: - The first line contains an integer N, the number of plants. - The second line contains N space-separated integers representing the heights of the plants. Output Format: - Print a single integer representing the minimum amount of water required. Constraints: - 1 ≤ N ≤ 1000 - 1 ≤ height ≤ 100 SAMPLE INPUT 5 2 4 3 5 2 SAMPLE OUTPUT 15 Explanation: One possible way to water the plants is: [2, 4, 4, 5, 5]. Here, the total water used is 2 + 4 + 4 + 5 + 5 = 20. However, we should aim for the minimum water usage while maintaining the non-decreasing order. The optimal distribution of water will be: [2, 4, 4, 5, 5] Thus, the minimum water required is: 2 + 4 + 4 + 5 + 5 = 20","solution":"def min_water_required(N, heights): # Initialize an array to store the water distribution water = [0] * N # The first plant will get water equal to its height water[0] = heights[0] # Iterate through the plants and ensure non-decreasing water distribution for i in range(1, N): water[i] = max(heights[i], water[i-1]) # Calculate the total amount of water required return sum(water)"},{"question":"Task Write a function `camel_case` that takes a string as input and converts it to camelCase. CamelCase is a style of writing where the first word is in lowercase and each subsequent word starts with an uppercase character without spaces between them. # Examples `camel_case(\\"hello world\\")` should return `\\"helloWorld\\"`. `camel_case(\\"This is a test\\")` should return `\\"thisIsATest\\"`. `camel_case(\\"another example here\\")` should return `\\"anotherExampleHere\\"`. **Note:** Make sure to handle cases with multiple spaces between words and leading or trailing spaces. The final string should contain no extra spaces.","solution":"def camel_case(s): Converts a given string into camelCase. Parameters: s (str): The input string. Returns: str: The camelCase version of the string. words = s.strip().split() if not words: return \'\' first_word = words[0].lower() other_words = [word.capitalize() for word in words[1:]] return first_word + \'\'.join(other_words)"},{"question":"Alice has a list of distinct integers a_1, a_2, ldots, a_n. She wants to create a new list b such that each element in b is equal to the product of all elements in a except the one at the same position. However, she quickly realizes that producing these products could result in very large numbers. To handle this, she decides to compute these values modulo 10^9 + 7. Help Alice compute the resulting list b. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N. - The second line contains N space-separated integers a_1, a_2, ldots, a_N. -----Output----- For each test case, print N space-separated integers, which are the elements of the resulting list b for each test case modulo 10^9 + 7. -----Constraints----- - 1 le T le 10 - 2 le N le 10^5 - 1 le a_i le 10^9 for each valid i -----Subtasks----- Subtask #1 (20 points): 2 le N le 100 Subtask #2 (80 points): original constraints -----Example Input----- 1 4 1 2 3 4 -----Example Output----- 24 12 8 6 -----Explanation----- Example case 1: The product of all elements except the one at each position is as follows: - For the first position: 2 times 3 times 4 = 24 - For the second position: 1 times 3 times 4 = 12 - For the third position: 1 times 2 times 4 = 8 - For the fourth position: 1 times 2 times 3 = 6 These products are all within the modulo 10^9 + 7.","solution":"def product_except_self(arr, mod=10**9+7): n = len(arr) if n < 2: return [] result = [1] * n left_product = 1 for i in range(n): result[i] = left_product left_product = (left_product * arr[i]) % mod right_product = 1 for i in range(n-1, -1, -1): result[i] = (result[i] * right_product) % mod right_product = (right_product * arr[i]) % mod return result def compute_products_for_all_cases(test_cases): results = [] for case in test_cases: results.append(product_except_self(case)) return results def parse_input_input(input_string): input_lines = input_string.strip().split(\'n\') T = int(input_lines[0].strip()) index = 1 test_cases = [] for _ in range(T): N = int(input_lines[index].strip()) index += 1 case = list(map(int, input_lines[index].strip().split())) index += 1 test_cases.append(case) return test_cases"},{"question":"Given a Binary Search Tree (BST) of size N, your task is to complete the function closestNode(), that should return the value of the node in the BST that is closest to a given target value. Input: First line of input contains the number of test cases T. For each test case, there will be two lines: The first line of each test case will be an integer N, denoting the number of nodes in the BST. The second line will contain N space-separated integers representing the values of the nodes inserted into the BST in the given order. The third line will contain an integer target, specifying the target value to compare against the BST nodes. Output: The function should return the value of the node that is closest to the target value. User Task: As it is a functional problem, you don\'t need to worry about the input; you just have to complete the function closestNode() that takes the root of the BST and the target value as parameters and returns the value of the node closest to the target. Constraints: 1<=T<=100 1<=N<=100 -10^3<=node value, target<=10^3 Example: Input: 2 5 10 5 15 3 7 6 3 5 3 8 6 Output: 5 5 Note: The Input/Output format and Example given are used for system\'s internal purpose, and should be used by a user for Expected Output only. As it is a functional problem, hence a user should not read any input from stdin/console. The task is to complete the function specified, and not to write the full code.","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def insert_into_bst(root, value): if root is None: return TreeNode(value) else: if value < root.value: root.left = insert_into_bst(root.left, value) else: root.right = insert_into_bst(root.right, value) return root def closestNode(root, target): closest = root.value while root: if abs(root.value - target) < abs(closest - target): closest = root.value if target < root.value: root = root.left elif target > root.value: root = root.right else: break return closest"},{"question":"In a city, there are `n` parks numbered from 1 to `n`. Each park is connected to every other park with a direct path that can be traveled in both directions. The path between parks `i` and `j` takes `|i - j| + 1` minutes to travel. You are given `m` tasks represented as pairs `(a, b)` where you need to determine the shortest time required to travel from park `a` to park `b` for each task. Provide a function that, given `n`, the number of parks, and a list of `m` tasks, returns a list of minimum travel times for each task. Function Signature: `def minimum_travel_times(n: int, tasks: List[Tuple[int, int]]) -> List[int]:` Constraints: - 1 ≤ n ≤ 10^5 - 1 ≤ m ≤ 10^5 - 1 ≤ a, b ≤ n","solution":"from typing import List, Tuple def minimum_travel_times(n: int, tasks: List[Tuple[int, int]]) -> List[int]: Determines the shortest travel times for the given tasks. travel_times = [] for a, b in tasks: travel_time = abs(a - b) + 1 travel_times.append(travel_time) return travel_times"},{"question":"In the country of Almeria, there are a number of connected cities arranged in a circular manner, with exactly n two-way roads forming a cycle. Each city is numbered from 1 to n where each city i is directly connected to the next city (i+1) and the last city n is connected back to the first city 1. Due to increased traffic congestion, the country\'s transportation department has decided to create shortcuts to reduce travel times. A shortcut allows direct travel from city i to city j (i ≠ j) without passing through any other cities. The department aims to add the minimum number of shortcuts required so that the maximum travel distance between any two cities is reduced to at most 2. You are to determine the minimum number of shortcuts needed to achieve the goal. Input The first line contains a single integer n (3 ≤ n ≤ 10^5) — the number of cities in Almeria. Output Print a single integer — the minimum number of shortcuts required. Examples Input 5 Output 0 Input 6 Output 1 Note In the first example: Since there are 5 cities connected in a circle, the maximum travel distance between any two cities is already 2. Hence, no shortcuts are needed. In the second example: With 6 cities, the maximum travel distance is currently 3 (e.g., between city 1 and city 4). Adding a shortcut directly between city 1 and city 4 (or between any pair of cities 3 distances apart) reduces the maximum travel distance to 2. Hence, only 1 shortcut is required.","solution":"def min_shortcuts(n): Determines the minimum number of shortcuts required so that the maximum travel distance between any two cities is reduced to at most 2. Parameters: n (int): The number of cities in Almeria. Returns: int: The minimum number of shortcuts required. # For n cities arranged in a circle, if n is odd, the maximum distance is already 2 for all pairs of cities. # If n is even, the maximum distance is 3, so we need exactly one shortcut to make the maximum distance 2. return 0 if n % 2 == 1 else 1"},{"question":"Given an array of integers, find the length of the longest subarray that is a bitonic sequence. A bitonic sequence is a sequence of numbers that is first strictly increasing and then strictly decreasing. Example 1: Input: arr = [12, 4, 78, 90, 45, 23] Output: 5 Explanation: The longest bitonic subarray is [4, 78, 90, 45, 23] Example 2: Input: arr = [20, 4, 1, 2, 3, 4, 2, 10] Output: 5 Explanation: The longest bitonic subarray is [1, 2, 3, 4, 2] Your Task: The task is to complete the function longestBitonicSubarray() which finds the length of the longest bitonic subarray. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= N <= 10^4 1 <= arr[i] <= 10^5","solution":"def longestBitonicSubarray(arr): n = len(arr) if n < 2: return n # Arrays to store lengths of increasing and decreasing subarrays inc = [1] * n dec = [1] * n # Fill the inc[] array for i in range(1, n): if arr[i] > arr[i - 1]: inc[i] = inc[i - 1] + 1 # Fill the dec[] array for i in range(n - 2, -1, -1): if arr[i] > arr[i + 1]: dec[i] = dec[i + 1] + 1 # Calculate the length of the # longest bitonic subarray max_len = 1 for i in range(n): max_len = max(max_len, inc[i] + dec[i] - 1) return max_len"},{"question":"Given an integer `n`, return a list of strings that represent the words for the numbers from 1 to n. The format for the numbers must follow these rules: 1. For multiples of three, append \\"Fizz\\" instead of the number. 2. For multiples of five, append \\"Buzz\\" instead of the number. 3. For multiples of both three and five, append \\"FizzBuzz\\" instead of the number. 4. For all other numbers, append the number as a string. For example: ```python def fizz_buzz(n): # your code here # Test cases print(fizz_buzz(5)) # [\\"1\\", \\"2\\", \\"Fizz\\", \\"4\\", \\"Buzz\\"] print(fizz_buzz(15)) # [\\"1\\", \\"2\\", \\"Fizz\\", \\"4\\", \\"Buzz\\", \\"Fizz\\", \\"7\\", \\"8\\", \\"Fizz\\", \\"Buzz\\", \\"11\\", \\"Fizz\\", \\"13\\", \\"14\\", \\"FizzBuzz\\"] ```","solution":"def fizz_buzz(n): Returns a list of strings representing numbers from 1 to n with special rules: - \\"Fizz\\" for multiples of three, - \\"Buzz\\" for multiples of five, - \\"FizzBuzz\\" for multiples of both three and five, - The number itself as a string for all other numbers. result = [] for i in range(1, n + 1): if i % 15 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return result"},{"question":"Given an array of integers, write a program to find all unique combinations of numbers that sum up to a given target number. Each number from the array can be used only once in the combination. The solution set must not contain duplicate combinations. **Example:** ``` Input: nums = [10, 1, 2, 7, 6, 1, 5], target = 8 Output: [ [1, 1, 6], [1, 2, 5], [1, 7], [2, 6] ] ``` **Explanation:** - The algorithm should identify all the unique combinations of numbers that add up to the target sum. - Each number in the array can only be used once. - The combinations should only include distinct groups, meaning no duplicate groups are allowed. **Function Signature:** ```python def combination_sum(nums: List[int], target: int) -> List[List[int]]: #Your code here pass ``` **Constraints:** - The input array `nums` will have at most `100` numbers. - `nums` will contain numbers `1` to `50`. - The target number will be a positive integer not exceeding `500`. **Implementation Details:** 1. The implementation should sort the input array first to help avoid duplicate combinations. 2. Use a backtracking approach to explore potential combinations that add up to the target sum. 3. Ensure that combinations are added to the result list if they match the target sum. 4. Avoid revisiting elements within the same recursive depth to maintain unique combinations.","solution":"from typing import List def combination_sum(nums: List[int], target: int) -> List[List[int]]: def backtrack(start: int, target: int, path: List[int]): if target == 0: result.append(path[:]) return if target < 0: return for i in range(start, len(nums)): if i > start and nums[i] == nums[i - 1]: continue path.append(nums[i]) backtrack(i + 1, target - nums[i], path) path.pop() nums.sort() result = [] backtrack(0, target, []) return result"},{"question":"You are given an array of n strings. Your task is to find the length of the longest common subsequence (LCS) that can be formed from all the given strings. The common subsequence does not need to be contiguous within the strings. -----Constraints----- - 1 leq n leq 10 - 1 leq |S_i| leq 50 for every i = 1, ..., n. - S_i consists of lowercase English letters (a - z) for every i = 1, ..., n. -----Input----- Input is given from Standard Input in the following format: n S_1 ... S_n -----Output----- Print the length of the longest common subsequence. -----Example----- Input: 3 abc ac bca Output: 1 The longest common subsequence among \\"abc\\", \\"ac\\" and \\"bca\\" is \\"a\\". Hence, the output is 1.","solution":"def lcs_length(strings): from functools import lru_cache @lru_cache(None) def dp(i, x, y, z): if i == len(shortest_string): return 0 max_lcs = dp(i + 1, x, y, z) for nx, jx in enumerate(positions[0][x:], start=x): if shortest_string[i] == strings[0][nx]: for ny, jy in enumerate(positions[1][y:], start=y): if shortest_string[i] == strings[1][ny]: for nz, jz in enumerate(positions[2][z:], start=z): if shortest_string[i] == strings[2][nz]: max_lcs = max(max_lcs, 1 + dp(i + 1, nx + 1, ny + 1, nz + 1)) return max_lcs n = len(strings) if n == 1: return len(strings[0]) if n > 3: raise ValueError(\\"The number of strings should be exactly 3 for this implementation.\\") shortest_string = min(strings, key=len) positions = [list() for _ in range(n)] for i in range(n): for j, char in enumerate(strings[i]): positions[i].append(j) return dp(0, 0, 0, 0) # Example usage # input: 3 strings as defined in the example n = 3 strings = [\\"abc\\", \\"ac\\", \\"bca\\"] # invoke the function longest_common_subsequence_length = lcs_length(strings) print(longest_common_subsequence_length)"},{"question":"A new pandemic has spread across the globe and you, as a data analyst, need to calculate the fatality rate of the virus for a given set of countries. The fatality rate is defined as the number of deaths divided by the number of confirmed cases, expressed as a percentage and rounded to two decimal places. Each country provides the number of confirmed cases and the number of deaths. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of two space-separated integers C and D. C denotes the number of confirmed cases and D denotes the number of deaths. Output Print the fatality rate for each test case rounding to two decimal places. Constraints 1 ≤ T ≤ 1000 1 ≤ C ≤ 10^7 0 ≤ D ≤ 10^6 Example Input: 2 10000 500 15000 750 Output: 5.00 5.00","solution":"def calculate_fatality_rate(test_cases): results = [] for cases, deaths in test_cases: fatality_rate = (deaths / cases) * 100 results.append(f\\"{fatality_rate:.2f}\\") return results"},{"question":"Patricia is working on a problem involving strings and lexicographical ordering. She has n strings and she wants to merge them into one single string such that the resulting string is the lexicographically smallest possible. Each of the provided strings can be used any number of times. Can you help her by writing a function that finds the lexicographically smallest string possible? -----Input----- The first line contains an integer n (1 ≤ n ≤ 100). Each of the following n lines contains a string consisting of lowercase English letters (1 ≤ length of each string ≤ 50). -----Output----- Output the lexicographically smallest string that can be obtained by merging the provided strings. -----Examples----- Input 3 aab ab b Output aaabababababababababababababababababababababababababab Input 2 banana apple Output applebananaapplebananaapplebananaapplebananaapplebanana","solution":"def lexicographically_smallest_string(n, strings): # Find the lexicographically smallest string smallest_string = min(strings) # Repeat the smallest string to produce a very long string result = smallest_string * (100 // len(smallest_string) + 1) return result"},{"question":"A zoo has recently received a new type of turtle. The caretakers have established a regimen for feeding the turtles, but they need to ensure that the turtles get an optimal amount of food every day. They have a list of the food quantities each day, and they want to know the maximum possible sum of quantities if they choose a subset of days such that no two chosen days are consecutive. You are tasked with writing a program to help the caretakers determine the optimal amount of food. -----Input----- First line of input contains an integer T denoting the number of test cases. For each test case, the first line contains an integer N denoting the number of days. The next line contains N space-separated integers where the ith integer represents the amount of food available on the ith day in grams. Note : There may be trailing spaces on each line of input. -----Output----- For each test case, print the maximum possible sum in a single line. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 100000 - 0 ≤ Food quantity on each day ≤ 10000 -----Example----- Input: 2 4 3 2 5 10 3 10 5 5 Output: 13 15 -----Explanation----- Example case 1: The optimal solution is to choose the 1st and 4th days, giving a total of 3 + 10 = 13. Example case 2: The optimal solution is to choose the 1st and 3rd days, giving a total of 10 + 5 = 15.","solution":"def turtle_fed_optimal_food(T, cases): def max_food_quantities(N, quantities): if N == 0: return 0 elif N == 1: return quantities[0] dp = [0] * N dp[0] = quantities[0] dp[1] = max(quantities[0], quantities[1]) for i in range(2, N): dp[i] = max(dp[i-1], dp[i-2] + quantities[i]) return dp[-1] results = [] for i in range(T): N = cases[i][0] quantities = cases[i][1] results.append(max_food_quantities(N, quantities)) return results # Example usage: T = 2 cases = [ (4, [3, 2, 5, 10]), (3, [10, 5, 5]) ] print(turtle_fed_optimal_food(T, cases)) # Output: [13, 15]"},{"question":"Write a function called `find_peak` that finds a peak element in a list of integers. A peak element is an element that is greater than its neighbors. For corner elements, we need to consider only one neighbor. # Example ```python find_peak([1, 3, 20, 4, 1, 0]) => returns 20 find_peak([10, 20, 15, 7, 30, 19]) => returns 20 or 30 find_peak([5, 10, 20, 15]) => returns 20 find_peak([10, 20, 15, 2, 23, 90, 67]) => returns 20 or 90 ``` # Notes * The function should return any one of the peak elements. * The list will contain at least one element and may contain duplicates. * The solution must have a time complexity of O(log n).","solution":"def find_peak(nums): Find a peak element in the list of integers. :param nums: List of integers :return: A peak element (an element that is greater than its neighbors) if not nums: return None left, right = 0, len(nums) - 1 while left < right: mid = (left + right) // 2 if nums[mid] < nums[mid + 1]: left = mid + 1 else: right = mid return nums[left]"},{"question":"Rohit\'s Palindrome Inquiry Rohit is fascinated by palindromes. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward. He is currently exploring a list of strings and wants to determine which strings can be rearranged to form a palindrome. Help Rohit by writing a program that takes a list of strings and outputs whether each string can be rearranged to form a palindrome. Input: - The first line contains an integer N, the number of strings. - The next N lines each contain one string consisting of lowercase alphabets. Output: - Output N lines, each containing \\"YES\\" or \\"NO\\" indicating whether the corresponding string can be rearranged to form a palindrome. Constraints: 1 ≤ N ≤ 100 1 ≤ length of each string ≤ 100 SAMPLE INPUT 3 aabb abc racecar SAMPLE OUTPUT YES NO YES Explanation For the input strings: - \\"aabb\\" can be rearranged to \\"abba\\" which is a palindrome, so the output is \\"YES\\". - \\"abc\\" cannot be rearranged to form any palindrome, so the output is \\"NO\\". - \\"racecar\\" is already a palindrome, so the output is \\"YES\\".","solution":"def can_form_palindrome(s): Determines if the string s can be rearranged to form a palindrome. from collections import Counter count = Counter(s) odd_count = sum(1 for v in count.values() if v % 2 != 0) return odd_count <= 1 def rohits_palindrome_inquiry(n, strings): Determines for each string in a list of strings whether it can be rearranged to form a palindrome. results = [] for s in strings: if can_form_palindrome(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given two strings, S1 and S2, determine if S2 is an anagram of a substring of S1. An anagram is defined as a permutation of a set of characters. For example, \\"abc\\" and \\"bca\\" are anagrams. Example 1: Input: S1 = \\"google\\" S2 = \\"ogle\\" Output: 1 Explanation: The string \\"ogle\\" is indeed a substring of \\"google\\". Example 2: Input: S1 = \\"opensource\\" S2 = \\"coder\\" Output: 0 Explanation: There is no substring in \\"opensource\\" that is an anagram of \\"coder\\". Your Task: You don\'t need to read input or print anything. Your task is to complete the function `anagramSubstring()` which takes two strings S1 and S2 as input parameters and returns 1 if S2 is an anagram of a substring of S1, otherwise returns 0. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= len(S1) <= 10^4 1 <= len(S2) <= 10^4","solution":"def anagramSubstring(S1, S2): Determines if S2 is an anagram of a substring of S1. Returns 1 if true, otherwise 0. from collections import Counter len_S1 = len(S1) len_S2 = len(S2) if len_S2 > len_S1: return 0 S2_count = Counter(S2) window_count = Counter(S1[:len_S2]) if window_count == S2_count: return 1 for i in range(len_S2, len_S1): window_count[S1[i]] += 1 window_count[S1[i - len_S2]] -= 1 if window_count[S1[i - len_S2]] == 0: del window_count[S1[i - len_S2]] if window_count == S2_count: return 1 return 0"},{"question":"Given a string of lowercase alphabets, your task is to find the character that appears the most frequently in the string. If there is a tie for the most frequent character, return the character that appears first in the string among those tied. If the string is empty, return \'-1\'. Example 1: Input: \\"hello\\" Output: \\"l\\" Explanation: \'l\' appears twice which is the highest frequency in the string. Example 2: Input: \\"test\\" Output: \\"t\\" Explanation: Both \'t\' and \'e\' appear twice, but \'t\' appears first in the string. Your Task: You don\'t need to read input or print anything. Your task is to complete the function mostFrequentChar() which takes the string s as input and returns the character that occurs most frequently according to the conditions mentioned. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= s.length <= 10^5","solution":"def mostFrequentChar(s): Returns the character that appears the most frequently in the string `s`. If there is a tie, returns the character that appears first among those tied. If the string is empty, returns \'-1\'. if not s: return \'-1\' frequency = {} for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 most_frequent_char = None max_frequency = 0 for char in s: if frequency[char] > max_frequency: most_frequent_char = char max_frequency = frequency[char] return most_frequent_char"},{"question":"Fruit and Vegetable Organizer === Imagine you are running a fruit and vegetable market stall. You need to organize your produce in a way that minimizes the number of storage trays used. Each storage tray can hold a certain maximum weight, and each piece of produce has a certain weight. Your goal is to group the produce into the fewest number of trays possible without exceeding the weight limit of any tray. The Problem === Given a maximum tray capacity and a list of produce weights, determine the minimal number of trays required to hold all the produce. The Simplification === The optimal solution to this problem can be highly complex, as it requires considering all possible groupings of produce weights. Instead, we will focus on a heuristic approach. The Greedy Solution === The greedy approach to this problem involves always placing the next piece of produce onto the current tray if it fits. If it doesn\'t fit, a new tray is started. This method does not always yield the optimal solution, but it\'s a simple and near-optimal approach. The Kata === Write the function `min_trays` that takes two parameters, `capacity` and `produce_weights`, and returns the minimal number of trays required to hold all the produce using the greedy solution. - `capacity`: a positive number representing the maximum capacity of each tray - `produce_weights`: an array of positive numbers representing the weights of the produce Example --- ```python min_trays(10, [2, 3, 7, 8, 1, 4, 2, 6]) ``` This example should return `4` because the produce can be grouped into the following trays: - Tray 1: 2 + 3 + 4 = 9 - Tray 2: 7 + 2 = 9 - Tray 3: 8 + 1 = 9 - Tray 4: 6 = 6","solution":"def min_trays(capacity, produce_weights): trays = [] for weight in produce_weights: placed = False for tray in trays: if sum(tray) + weight <= capacity: tray.append(weight) placed = True break if not placed: trays.append([weight]) return len(trays)"},{"question":"Write a function `find_min_rotated` that receives a list of integers, which is sorted in ascending order but has been rotated at some pivot unknown to you beforehand. Your task is to determine the minimum element in this list. The list is guaranteed to have no duplicate elements. ```python find_min_rotated([3, 4, 5, 1, 2]) == 1 find_min_rotated([6, 7, 8, 9, 10, 1, 2, 3, 4, 5]) == 1 find_min_rotated([2, 3, 4, 5, 6, 7, 8, 9, 1]) == 1 find_min_rotated([1]) == 1 ```","solution":"def find_min_rotated(nums): Finds the minimum element in a rotated sorted list of unique integers. :param nums: List[int] - rotated sorted list :return: int - minimum element in the list left, right = 0, len(nums) - 1 while left < right: mid = (left + right) // 2 if nums[mid] > nums[right]: left = mid + 1 else: right = mid return nums[left]"},{"question":"A company wants to automate the process of assigning unique email aliases to their employees. The format of these email aliases follows a specific pattern: the employee’s first name, followed by the last name, and then a number which increments if the alias is already taken. You are given a list of employees. For each employee, you need to generate an email alias and ensure it is unique within that list. The format of the email alias should be: - If the combination of first and last name is unique, the alias is simply \\"firstname.lastname\\". - If the combination is not unique, append a number to the end of the alias, starting from 1, and incrementing by 1 until the alias is unique. Input The first line of the input contains an integer `n` (1 ≤ n ≤ 100), the number of employees. Each of the following `n` lines contains two strings: the first name and the last name of an employee. Both names will contain only lowercase English letters and each will have a length between 1 and 10, inclusive. Output Output `n` lines, each containing a unique email alias in the format \'firstname.lastname\' or \'firstname.lastname1\', \'firstname.lastname2\', etc. Example Input 4 john doe jane doe john doe john smith Output john.doe jane.doe john.doe1 john.smith","solution":"def generate_email_aliases(n, employees): Generates unique email aliases for a list of employees. Args: n (int): The number of employees. employees (list of tuple of str): List of tuples containing first and last name of employees. Returns: list of str: A list of unique email aliases. email_counts = {} result = [] for first_name, last_name in employees: base_alias = f\\"{first_name}.{last_name}\\" if base_alias not in email_counts: email_counts[base_alias] = 1 result.append(base_alias) else: email_counts[base_alias] += 1 alias = f\\"{base_alias}{email_counts[base_alias] - 1}\\" result.append(alias) email_counts[alias] = 1 return result"},{"question":"You are given a list of words and a dictionary. Write a function that takes two arguments: a list of words and a dictionary, and returns a new list with the following modifications: - If the word exists in the dictionary, replace it with the corresponding value from the dictionary. - If the word doesn\'t exist in the dictionary, add the word \'UNKNOWN\' to the new list in its place. - Preserve the order of words in the original list. For example: ```python words = [\\"apple\\", \\"banana\\", \\"cherry\\", \\"date\\"] dictionary = {\\"apple\\": \\"fruit\\", \\"banana\\": \\"fruit\\", \\"cherry\\": \\"fruit\\"} result = replace_words(words, dictionary) print(result) # Output: [\\"fruit\\", \\"fruit\\", \\"fruit\\", \\"UNKNOWN\\"] ``` Implementation of the function: ```python def replace_words(words, dictionary): return [dictionary.get(word, \'UNKNOWN\') for word in words] ```","solution":"def replace_words(words, dictionary): Replaces words in the list with their corresponding values in the dictionary. If a word does not exist in the dictionary, it is replaced with \'UNKNOWN\'. Args: words (list of str): List of words to process. dictionary (dict): Dictionary containing words as keys and their replacements as values. Returns: list of str: New list of words after replacements. return [dictionary.get(word, \'UNKNOWN\') for word in words]"},{"question":"A 8x8 chessboard can be represented as a grid with coordinates ranging from (0, 0) to (7, 7). Each cell on the board can be occupied by a chess piece identified by a unique symbol (a single uppercase letter). The challenge is to manage the chessboard state and perform several operations. You need to implement a program that will handle queries to set, remove, or move a piece on the chessboard, as well as retrieve information about the board state. The operations are as follows: * place(x, y, S): Place a piece with symbol S at cell (x, y). The piece at the position, if any, will be replaced with the new piece. * remove(x, y): Remove the piece from cell (x, y). It will be empty after this operation. * move(x1, y1, x2, y2): Move a piece from cell (x1, y1) to cell (x2, y2). After the move, cell (x1, y1) will be empty. * piece(x, y): Print the symbol of the piece at cell (x, y). If the cell is empty, print \\"empty\\". * display: Display the current state of the entire chessboard, row by row. Constraints * 1 leq q leq 100,000 * 0 leq x, y, x1, y1, x2, y2 < 8 * S is an uppercase letter (A-Z) Input The input is given in the following format. q query_1 query_2 : query_q Each query query_i is given in the following format: PLACE x y S or REMOVE x y or MOVE x1 y1 x2 y2 or PIECE x y or DISPLAY The first word PLACE, REMOVE, MOVE, PIECE, or DISPLAY represents the operation place(x, y, S), remove(x, y), move(x1, y1, x2, y2), piece(x, y), or display respectively. Output For each PIECE and DISPLAY operation, print the result. Example Input 11 PLACE 0 1 K PLACE 1 2 Q PLACE 6 6 P PIECE 0 1 REMOVE 0 1 PIECE 0 1 MOVE 1 2 2 3 PLACE 7 7 R PIECE 2 3 DISPLAY PIECE 7 7 Output K empty Q ........ .K...... ..Q..... ........ ........ ........ ......P. .......R R","solution":"class Chessboard: def __init__(self): self.board = [[\'.\' for _ in range(8)] for _ in range(8)] def place(self, x, y, S): self.board[x][y] = S def remove(self, x, y): self.board[x][y] = \'.\' def move(self, x1, y1, x2, y2): self.board[x2][y2] = self.board[x1][y1] self.board[x1][y1] = \'.\' def piece(self, x, y): return self.board[x][y] if self.board[x][y] != \'.\' else \'empty\' def display(self): for row in self.board: print(\'\'.join(row))"},{"question":"Given an array of positive integers and a target sum, determine the minimum number of elements from the array that sum up to exactly the target sum. If it\'s not possible to achieve the target sum using any subset of the elements, return -1. Input - The first line contains an integer T, the number of test cases (1 ≤ T ≤ 100). - Each test case starts with two integers: n, the number of elements in the array, and t, the target sum (1 ≤ n ≤ 1000, 1 ≤ t ≤ 10^5). - The second line contains n positive integers representing the array elements (1 ≤ array[i] ≤ 10^4). Output For each test case, output the minimum number of elements that sum up to exactly t, or -1 if it\'s not possible. SAMPLE INPUT 3 5 11 1 2 3 5 10 4 9 3 5 7 8 3 6 4 5 6 SAMPLE OUTPUT 2 -1 1","solution":"def min_elements_to_target_sum(num_cases, test_cases): from sys import maxsize results = [] for i in range(num_cases): n, t, array = test_cases[i] # Initialize DP table dp = [maxsize] * (t + 1) dp[0] = 0 for num in array: for j in range(t, num - 1, -1): if dp[j - num] != maxsize: dp[j] = min(dp[j], dp[j - num] + 1) result = dp[t] if dp[t] != maxsize else -1 results.append(result) return results # Reading the input def read_input(): import sys input = sys.stdin.read data = input().split() idx = 0 T = int(data[idx]) idx += 1 test_cases = [] for _ in range(T): n = int(data[idx]) t = int(data[idx + 1]) idx += 2 array = list(map(int, data[idx:idx + n])) idx += n test_cases.append((n, t, array)) return T, test_cases if __name__ == \\"__main__\\": T, test_cases = read_input() results = min_elements_to_target_sum(T, test_cases) for result in results: print(result)"},{"question":"Given an array of integers, write a function `aggregateArray` that rearranges the elements of the array such that all positive numbers appear before all negative numbers, while preserving the relative ordering of the positive numbers and the relative ordering of the negative numbers. The function should have the following signature: `def aggregateArray(arr: List[int]) -> List[int]` # Example Input: [3, -2, 2, -1, -7, 10, 1, -3] Output: [3, 2, 10, 1, -2, -1, -7, -3] Input: [-5, -1, -3, 4, 2] Output: [4, 2, -5, -1, -3] # Constraints 1. The length of the array is between 1 and 10^5. 2. Each element of the array is within the range -10^6 to 10^6.","solution":"from typing import List def aggregateArray(arr: List[int]) -> List[int]: Rearranges the elements of the array such that all positive numbers appear before all negative numbers, while preserving the relative ordering of the positive numbers and the relative ordering of the negative numbers. positives = [num for num in arr if num > 0] negatives = [num for num in arr if num < 0] return positives + negatives"},{"question":"Given an integer `choice` denoting the choice of the user and a list containing a single value `C` or three values `A`, `B`, and `H` depending on the choice. If the user\'s choice is 1, calculate the volume of the cube having the given side length `C`. Else if the choice is 2, calculate the volume of the triangular prism with the given base length `A`, height `H` of the triangle, and length `B`. Example 1: Input: choice = 1, C = 3 Output: 27 Explanation: The choice is 1. So, we have to calculate the volume of the cube. Example 2: Input: choice = 2, A = 4, B = 5, H = 6 Output: 60 Explanation: Here we have to calculate the volume of the triangular prism using the formula (1/2 * base * height) * length. Your Task: You do not need to read input or print anything. Your task is to complete the function `calculateVolume()`, which takes `choice` and a list `arr[]` as input parameters. It should return the volume of the desired geometrical figure. Constraints: - 1 ≤ C, A, B, H ≤ 100 Note: Use appropriate mathematical operations to calculate the volumes accurately. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1)","solution":"def calculateVolume(choice, arr): Returns the volume of a cube (if choice is 1) or a triangular prism (if choice is 2) Parameters: choice (int): The choice indicating the shape. arr (list): List of integers containing the necessary dimensions. Returns: int: Calculated volume of either the cube or the triangular prism. if choice == 1: # Calculate volume of the cube C = arr[0] return C ** 3 elif choice == 2: # Calculate volume of the triangular prism A, B, H = arr return (0.5 * A * H) * B"},{"question":"Given a string of lowercase characters and a pattern string of distinct lowercase characters, your task is to determine the minimum window substring of the given string that contains all the characters of the pattern string. If no such window exists, return an empty string. A window substring is a contiguous sequence of characters within the string. # Function Signature `def min_window_substring(s: str, pattern: str) -> str:` # Input - `s`: A string of lowercase characters (1 <= len(s) <= 10^5) - `pattern`: A string of distinct lowercase characters (1 <= len(pattern) <= len(s)) # Output - Return the minimum window substring of `s` that contains all characters of `pattern`. If no such substring exists, return an empty string. # Examples ```python min_window_substring(\\"ADOBECODEBANC\\", \\"ABC\\") => \\"BANC\\" min_window_substring(\\"a\\", \\"a\\") => \\"a\\" min_window_substring(\\"a\\", \\"b\\") => \\"\\" ``` # Note You have to implement the function to find the minimum window substring.","solution":"from collections import Counter, defaultdict def min_window_substring(s: str, pattern: str) -> str: Returns the minimum window substring of s that contains all the characters of pattern. If no such window exists, returns an empty string. if not s or not pattern: return \\"\\" pattern_count = Counter(pattern) current_count = defaultdict(int) start = 0 min_length = float(\'inf\') min_window = \\"\\" have, need = 0, len(pattern_count) for end, char in enumerate(s): if char in pattern_count: current_count[char] += 1 if current_count[char] == pattern_count[char]: have += 1 while have == need: window_length = end - start + 1 if window_length < min_length: min_length = window_length min_window = s[start:end+1] current_count[s[start]] -= 1 if s[start] in pattern_count and current_count[s[start]] < pattern_count[s[start]]: have -= 1 start += 1 return min_window"},{"question":"A transportation company is planning a new system to manage its fleet of trucks. Each truck is capable of carrying a certain load, and they need to optimize the fleet\'s efficiency in carrying goods between two locations. The company\'s fleet is organized into a hierarchical structure where each truck is either directly or indirectly managed by a lead truck. The company wants to design a system with the following functionalities: 1. **Add a truck to the fleet:** Whenever a new truck is added, it is assigned an initial load capacity and connected to a superior truck. 2. **Update a truck\'s load capacity:** The capacity of an existing truck can be updated. 3. **Query total load capacity:** Calculate the combined load capacity of a lead truck and all the trucks it directly or indirectly manages. Given the initial setup of the fleet, you need to develop a system that can handle the operations above efficiently. The operations are denoted by the following queries: - `A P C x` - Add a new truck `P` with load capacity `x` as a subordinate to truck `C`. - `U P x` - Update the load capacity of truck `P` to `x`. - `Q C` - Query the total load capacity for the lead truck `C` and all the trucks under its management. Input Format: - The first line contains the integer `N`, the initial number of trucks. - The second line contains `N` integers representing the initial load capacities of the trucks. - The third line contains `N-1` pairs of integers `(u, v)` where `u` and `v` indicate that `v` is a direct subordinate of `u`. - The following lines contain the number of queries `M`. Each of the next `M` lines represents a query as described above. Output Format: For each `Q C` query, output the total load capacity of all the trucks managed by `C`. Constraints: - `1 ≤ N, M ≤ 10^5` - `0 ≤ x ≤ 10000` - Truck numbers are `1` to `N`. SAMPLE INPUT 5 10 5 8 3 7 1 2 1 3 2 4 2 5 6 Q 1 Q 2 A 6 2 1 U 4 10 Q 1 Q 2 SAMPLE OUTPUT 33 15 39 22 Explanation Initial configuration: - Truck 1 manages trucks 2 and 3. - Truck 2 manages trucks 4 and 5. Load capacities: - Truck 1: 10 (manages 2 and 3) - Truck 2: 5 (manages 4 and 5) - Truck 3: 8 - Truck 4: 3 - Truck 5: 7 Queries: - `Q 1`: Total load = 10 (truck 1) + 5 (truck 2) + 8 (truck 3) + 3 (truck 4) + 7 (truck 5) = 33 - `Q 2`: Total load = 5 (truck 2) + 3 (truck 4) + 7 (truck 5) = 15 - `A 6 2 1`: Add truck 6 with load capacity 2 under truck 1. - `U 4 10`: Update load of truck 4 to 10. - `Q 1`: New total load = 10 (truck 1) + 5 (truck 2) + 8 (truck 3) + 10 (truck 4) + 7 (truck 5) + 2 (truck 6) = 39 - `Q 2`: New total load = 5 (truck 2) + 10 (truck 4) + 7 (truck 5) = 22","solution":"def add_truck(fleet, subordinates, capacities, p, c, x): capacities.append(x) # Add new truck capacity fleet[p] = c # Set super truck relationship if c in subordinates: subordinates[c].append(p) else: subordinates[c] = [p] def update_truck_capacity(capacities, p, x): capacities[p-1] = x # Update capacity of truck `p` def query_total_capacity(subordinates, capacities, c): def dfs(truck): total = capacities[truck-1] if truck in subordinates: for sub in subordinates[truck]: total += dfs(sub) return total return dfs(c) def manage_fleet(N, initial_loads, connections, queries): capacities = initial_loads[:] # Copy the initial loads fleet = {i + 1: None for i in range(N)} subordinates = {} for u, v in connections: if u in subordinates: subordinates[u].append(v) else: subordinates[u] = [v] fleet[v] = u results = [] for query in queries: if query[0] == \'A\': add_truck(fleet, subordinates, capacities, query[1], query[3], query[2]) elif query[0] == \'U\': update_truck_capacity(capacities, query[1], query[2]) elif query[0] == \'Q\': results.append(query_total_capacity(subordinates, capacities, query[1])) return results"},{"question":"You\'re working for a company that analyzes stock prices. Given a sequence of daily stock prices, the task is to determine the longest period during which the stock prices were non-decreasing. We are interested in writing a program that, given the number of days and the stock prices for each day, outputs the length of the longest period of non-decreasing stock prices. A period of non-decreasing stock prices means that each day’s price is at least as much as the previous day’s price. Input The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of days for which the stock prices are given. The second line contains n space-separated integers p_1, p_2, ..., p_n (1 ≤ p_i ≤ 10^9) — the prices of the stock on each day. Output Output a single integer representing the length of the longest period of non-decreasing stock prices. Examples Input 6 100 100 105 103 105 107 Output 3 Input 5 90 90 90 90 90 Output 5 Note In the first example, the longest period where the stock prices are non-decreasing is \\"100 100 105\\", which has a length of 3. In the second example, all stock prices are the same and therefore non-decreasing. The length of this period is 5.","solution":"def longest_non_decreasing_period(n, prices): Function to find the length of the longest period of non-decreasing stock prices. :param n: int - number of days :param prices: list of int - daily stock prices :return: int - length of longest period of non-decreasing stock prices if n <= 1: return n max_length = 1 current_length = 1 for i in range(1, n): if prices[i] >= prices[i-1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"Problem Statement: You are tasked with helping a software development team to analyze the code quality of large projects. One of the quality metrics they are interested in is the \\"Total Commented Lines\\". They define a commented line as a line that starts with \\"//\\". Write a function that takes a list of strings representing lines of code from a file and returns the total number of commented lines. INPUT SPECIFICATION: You will be given an integer \'n\' representing the number of lines of code in the file. This is followed by \'n\' lines of strings, each representing a line in the code file. CONSTRAINTS: n < 10^5 Each line of the code will have a maximum length of 200 characters. OUTPUT SPECIFICATION: The output will be a single integer representing the total number of commented lines in the file. SAMPLE INPUT: 5 #include <iostream> // This is a comment int main() { // Another comment std::cout << \\"Hello, World!\\"; return 0; } SAMPLE OUTPUT: 2","solution":"def count_commented_lines(n, lines): Returns the total number of commented lines in the given list of code lines. Parameters: n (int): Number of lines of code. lines (list of str): List of strings, each representing a line of code. Returns: int: The total number of commented lines. comment_prefix = \\"//\\" count = 0 for line in lines: stripped_line = line.strip() if stripped_line.startswith(comment_prefix): count += 1 return count"},{"question":"A library database application needs to keep track of the borrowing activities of its members. You are required to implement a simple method to record and calculate the total fine a member owes after returning borrowed books late. Each book borrowed from the library has a stipulated return date, and a member can only be fined if they return a book late. The fine is calculated as follows: - If the book is returned on or before the stipulated return date, no fine is charged. - If the book is returned after the return date, a fine of 1 currency unit is charged for each day it is overdue. Implement the function `calculate_fine(due_date: str, return_date: str) -> int` that takes two strings as input: - `due_date`: the date by which the book must be returned in the format \\"YYYY-MM-DD\\". - `return_date`: the actual date on which the book is returned in the same format \\"YYYY-MM-DD\\". The function should return an integer representing the total fine in currency units. -----Example 1----- Input: calculate_fine(\\"2023-10-01\\", \\"2023-10-05\\") Output: 4 Explanation: The book is returned 4 days late, so the fine is 4 currency units. -----Example 2----- Input: calculate_fine(\\"2023-10-01\\", \\"2023-09-30\\") Output: 0 Explanation: The book is returned 1 day before the due date, so no fine is charged. -----Example 3----- Input: calculate_fine(\\"2023-10-01\\", \\"2023-10-01\\") Output: 0 Explanation: The book is returned on the due date, so no fine is charged.","solution":"from datetime import datetime def calculate_fine(due_date: str, return_date: str) -> int: Calculate the fine for returning a book late. Parameters: due_date (str): The due date in \\"YYYY-MM-DD\\" format. return_date (str): The actual return date in \\"YYYY-MM-DD\\" format. Returns: int: The total fine in currency units. due_date = datetime.strptime(due_date, \\"%Y-%m-%d\\") return_date = datetime.strptime(return_date, \\"%Y-%m-%d\\") if return_date <= due_date: return 0 else: delta = return_date - due_date return delta.days"},{"question":"You are given an array of integers and a target sum. Your task is to write a function that returns the array of all unique pairs of numbers that add up to the target sum. Each pair should be returned as a tuple and the pairs should be sorted in ascending order. Note that the elements within each pair should also be sorted. Example 1: Input: arr = [2, 4, 3, 5, 7, 8, -1] target = 7 Output: [(2, 5), (3, 4), (-1, 8)] Explanation: The pairs (2, 5), (3, 4), and (-1, 8) are the unique combinations that add up to 7. Example 2: Input: arr = [1, 1, 1, 2, 2, 3, 4, 5] target = 5 Output: [(1, 4), (2, 3)] Explanation: Even though there are multiple occurrences of 1 and 2 in the array, each pair (1, 4) and (2, 3) is listed only once and pairs like (1, 4) and (4, 1) are considered the same and not duplicated in the output. Note: - The array is not necessarily sorted. - Each pair in the output must be unique. - If no pairs can be formed that add up to the target sum, return an empty list.","solution":"def find_pairs(arr, target): Returns a list of unique pairs that add up to the target sum. Each pair is returned as a tuple and sorted in ascending order. pairs = set() seen = set() for num in arr: complement = target - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) return sorted(pairs)"},{"question":"Given a NxN grid. Alice and Bob are playing a game. The rule of the game is simple. Each of them in their turn chooses a cell and marks it with their initials. However, the catch here is that once a cell is marked, they cannot choose any of its 8 adjacent cells (including diagonals). Since Alice is senior, she goes first. Both of them play optimally. The player with no move remaining loses the game. Determine who wins. Example 1: Input: N = 3 Output: Bob Explanation: In a 3x3 grid, if Alice marks any cell, there will be limited options left for Bob. If Alice marks the center cell in her first move for example, Bob will still have winning moves. Both play optimally leads to Bob winning. Example 2: Input: N = 1 Output: Alice Explanation: There is only one cell which gets filled when Alice uses her first turn. So Bob has no possible turn and Alice wins. Your Task: You do not need to read input or print anything. Your task is to complete the function findWinner() which takes the value N as an input parameter and returns the name of the winner, either \\"Alice\\" or \\"Bob\\". Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^18","solution":"def findWinner(N: int) -> str: Determines the winner of the game given an NxN grid. # Since Alice goes first, and if N is odd she will always win # by starting in the center or any cell. Bob will be forced into # a losing position. If N is even, Bob gets more opportunities # and thus he will win. return \\"Alice\\" if N % 2 == 1 else \\"Bob\\""},{"question":"You are given an array of n positive integers d_1, d_2, ldots, d_n, where each d_i represents the distance from point i to the next point (i+1). The distance from the last point (n) to the first point (1) is given by d_n. Compute the number of ways to rearrange the points such that the total distance traveled by visiting all points exactly once and returning to the starting point is minimized. Print the minimized total distance. -----Input----- The first line contains a single integer n (3 le n le 10^6) — the number of points. The second line contains n integers d_1, d_2, ldots, d_n (1 le d_i le 10^6) — the distances between consecutive points. -----Output----- Print the minimized total distance in a single line. -----Examples----- Input 3 1 2 3 Output 6 Input 4 4 3 2 5 Output 14 -----Explanation----- In the first test case, the initial total distance is d_1 + d_2 + d_3 = 1 + 2 + 3 = 6. In the second test case, possible traversal such as (1 rightarrow 2 rightarrow 3 rightarrow 4 rightarrow 1) results in minimal total distance 14. Here, the permutation doesn\'t actually change the minimized distance due to the cyclic nature of the journey, but the task is to correctly compute the minimized total distance, which in this case is the sum of the given distances.","solution":"def minimize_total_distance(n, distances): Returns the minimized total distance for the given distances array. # As we must visit all points and return to the starting point, the minimized total distance # is simply the sum of all the given distances. return sum(distances)"},{"question":"Find the rearrangement of a given string `s` such that no two adjacent characters are the same. If no such arrangement is possible, return an empty string. Constraints: - The input string contains lowercase English letters and digits. - The length of the string is between 1 and 1000. Example 1: Input: s = \\"aab\\" Output: \\"aba\\" Explanation: One possible rearrangement is \\"aba\\". Example 2: Input: s = \\"aaab\\" Output: \\"\\" Explanation: It is not possible to rearrange the string to avoid two adjacent \'a\'s. Example 3: Input: s = \\"aabbbcc\\" Output: \\"bacbabc\\" Explanation: One possible rearrangement is \\"bacbabc\\". Your Task: You don\'t need to read input or print anything. Your task is to complete the function `rearrangeString()` which takes a string `s` and returns the rearranged string or an empty string if no valid rearrangement exists. Expected Time Complexity: O(n log n) Expected Auxiliary Space: O(n) Hints: - Consider using a priority queue to frequently select the most occurring characters. - Use a greedy approach to place the most frequent characters at the earliest available spots to avoid adjacent duplicates.","solution":"import heapq from collections import Counter def rearrangeString(s): Rearranges the given string such that no two adjacent characters are the same. If no such arrangement is possible, returns an empty string. # Count frequency of each character count = Counter(s) # Max heap to store characters by their frequency max_heap = [(-freq, char) for char, freq in count.items()] heapq.heapify(max_heap) prev_freq, prev_char = 0, \'\' result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) # If previous character can still be pushed (has remaining count) if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) prev_freq, prev_char = freq + 1, char # Decrease freq since we used one occurrence of char result_str = \'\'.join(result) if len(result_str) != len(s): return \\"\\" return result_str"},{"question":"Write a function that takes an integer and returns its English representation. For example, given the number 123, the function should return \\"One Hundred Twenty Three\\". The input is guaranteed to be between -2^31 and 2^31 - 1. Example 1: Input: 123 Output: \\"One Hundred Twenty Three\\" Example 2: Input: 1001 Output: \\"One Thousand One\\" Example 3: Input: -45 Output: \\"Negative Forty Five\\"","solution":"def number_to_words(num): Convert a number to its English representation. if num == 0: return \\"Zero\\" if num < 0: return \\"Negative \\" + number_to_words(-num) below_twenty = [ \\"Zero\\", \\"One\\", \\"Two\\", \\"Three\\", \\"Four\\", \\"Five\\", \\"Six\\", \\"Seven\\", \\"Eight\\", \\"Nine\\", \\"Ten\\", \\"Eleven\\", \\"Twelve\\", \\"Thirteen\\", \\"Fourteen\\", \\"Fifteen\\", \\"Sixteen\\", \\"Seventeen\\", \\"Eighteen\\", \\"Nineteen\\" ] tens = [ \\"\\", \\"\\", \\"Twenty\\", \\"Thirty\\", \\"Forty\\", \\"Fifty\\", \\"Sixty\\", \\"Seventy\\", \\"Eighty\\", \\"Ninety\\" ] thousands = [ \\"\\", \\"Thousand\\", \\"Million\\", \\"Billion\\" ] def words(n): if n == 0: return [] elif n < 20: return [below_twenty[n]] elif n < 100: return [tens[n // 10]] + words(n % 10) elif n < 1000: return [below_twenty[n // 100]] + [\'Hundred\'] + words(n % 100) else: for idx, word in enumerate(thousands): if n < 1000 ** (idx + 1): return words(n // (1000 ** idx)) + [word] + words(n % (1000 ** idx)) return \' \'.join(words(num)).strip()"},{"question":"Write a program that simulates a game where two players take turns removing stones from a pile. The players can remove 1, 2, or 3 stones on their turn. The player who takes the last stone wins the game. The program should prompt for the initial number of stones in the pile. It should then simulate the game by alternating between the two players, using a smart strategy for both players to maximize their chances of winning. The program should announce the winner once the game is over. Input The input consists of a single integer n (1 ≤ n ≤ 100), which denotes the initial number of stones in the pile. Output The output should consist of: 1. The sequence of moves made by each player. 2. The name of the winning player. Example Input 10 Output Initial stones: 10 Player 1 takes 1 stone. Stones remaining: 9 Player 2 takes 2 stones. Stones remaining: 7 Player 1 takes 3 stones. Stones remaining: 4 Player 2 takes 3 stones. Stones remaining: 1 Player 1 takes 1 stone. Stones remaining: 0 Player 1 wins!","solution":"def game_simulation(initial_stones): Simulates a game where two players take turns removing stones from a pile. Players can remove 1, 2, or 3 stones on their turn. The player who takes the last stone wins the game. Args: initial_stones (int): Initial number of stones in the pile. Returns: list: The sequence of moves made by each player in the format (player, stones_taken, stones_remaining). str: The name of the winning player. moves = [] stones = initial_stones player = 1 # Player 1 starts # The strategy: always try to force the opponent to face a multiple of 4 stones left. while stones > 0: if stones % 4 == 0: move = 3 # Best play to maximize chances of winning else: move = stones % 4 # This ensures we leave a multiple of 4 for the opponent stones -= move moves.append((player, move, stones)) if stones == 0: winner = f\\"Player {player} wins!\\" break # Switch player for next turn player = 2 if player == 1 else 1 return moves, winner"},{"question":"F: Palindromic Subarray problem Yumiko Sugiura is fond of palindromes. A palindrome is a sequence that reads the same backward as forward. A subarray of an array is a contiguous part of the array. Yumiko wants to find out how many palindromic subarrays exist in a given array of integers. Your task is to write a program that helps Yumiko determine the number of palindromic subarrays in the given array. Input format The input consists of the following format: N A_1 A_2 ... A_N Where: * N is the number of elements in the array. * A is the array of N integers. It also satisfies the following constraints: * 1 ≤ N ≤ 1000. * -100,000 ≤ A_i ≤ 100,000 for each 1 ≤ i ≤ N. Output format Output a single integer, the number of palindromic subarrays in the given array. Input example 1 5 1 2 3 2 1 Output example 1 7 Input example 2 4 4 5 6 7 Output example 2 4 Example Input 5 1 2 3 2 1 Output 7","solution":"def count_palindromic_subarrays(N, A): def is_palindrome(subarray): return subarray == subarray[::-1] count = 0 for start in range(N): for end in range(start, N): if is_palindrome(A[start:end+1]): count += 1 return count"},{"question":"In a prestigious Programming Olympiad, contestants are given the challenge to solve a unique problem about ingredient analysis in recipes. The goal is to categorize recipes based on the primary ingredient used. Each recipe in the training set uses one main ingredient prominently. These ingredients are categorized as follows: - Ingredient 1: Tomatoes - Ingredient 2: Cheese - Ingredient 3: Chocolate You can download the training set of recipes from the following link: http://download4.codingolympiad.com/recipe_classify/train.zip. The archive contains three directories named \\"Tomatoes\\", \\"Cheese\\", and \\"Chocolate\\". Each directory contains several text files representing recipes containing the respective main ingredient. Each recipe file has the following format: the first line contains the recipe identifier, the second line contains the name of the recipe, and all subsequent lines contain the list of ingredients and instructions. For convenience, recipes will be given as input in the same format. Your task is to create a program that identifies the main ingredient used in the given recipe. Input The first line contains an integer id (0 ≤ id ≤ 106) — the recipe identifier. The second line contains the name of the recipe. The third and all subsequent lines contain the list of ingredients and instructions. It is guaranteed that the size of any given recipe will not exceed 10 kilobytes. The tests for this problem are classified into 10 groups. Recipes from groups 1 and 2 are directly derived from the training set, though their identifiers will differ. Groups 3 through 10 are increasingly sorted by the author based on complexity (these groups contain novel recipes not in the training set). Output Print an integer number from 1 to 3, inclusive — representing the main ingredient category the given recipe corresponds to: 1 — Tomatoes 2 — Cheese 3 — Chocolate Examples Input: ``` 100 Summer Salad 2 large tomatoes 1 cucumber 1 red onion 2 tablespoons olive oil Salt and pepper to taste ``` Output: ``` 1 ``` Input: ``` 101 Chocolate Cake 200g dark chocolate 100g butter 150g sugar 3 eggs 50g flour ``` Output: ``` 3 ```","solution":"def categorize_recipe(recipe): Categorizes the recipe based on the presence of main ingredients: - 1 for Tomatoes - 2 for Cheese - 3 for Chocolate Arguments: recipe -- list of strings representing the recipe Returns: int -- the category number ingredients = \\"n\\".join(recipe[2:]) if \\"tomato\\" in ingredients.lower(): return 1 elif \\"cheese\\" in ingredients.lower(): return 2 elif \\"chocolate\\" in ingredients.lower(): return 3 else: # Default return value if no main ingredient is found return 0"},{"question":"Define a class `Rectangle` that accepts two numbers for its width and height upon instantiation. Add methods to the class to calculate and return the perimeter, the area, and another method that scales the dimensions of the rectangle by a factor. Provide a few examples demonstrating the class functionality. ```python class Rectangle: def __init__(self, width, height): self.width = width self.height = height def perimeter(self): return 2 * (self.width + self.height) def area(self): return self.width * self.height def scale(self, factor): self.width *= factor self.height *= factor # Example usage: rect = Rectangle(2, 3) print(rect.perimeter()) # Output: 10 print(rect.area()) # Output: 6 rect.scale(2) print(rect.perimeter()) # Output: 20 print(rect.area()) # Output: 24 ```","solution":"class Rectangle: def __init__(self, width, height): self.width = width self.height = height def perimeter(self): return 2 * (self.width + self.height) def area(self): return self.width * self.height def scale(self, factor): self.width *= factor self.height *= factor # Example usage: rect = Rectangle(2, 3) print(rect.perimeter()) # Output: 10 print(rect.area()) # Output: 6 rect.scale(2) print(rect.perimeter()) # Output: 20 print(rect.area()) # Output: 24"},{"question":"You are given an array of integers. Rearrange the elements so that the sequence has the maximum possible number of global inversions. A global inversion in an array is defined as a pair (i, j) where 0 <= i < j < n and arr[i] > arr[j]. The number of global inversions should be as large as possible, and you must return that rearranged array. Note: There may be multiple possible solutions, just return any one of them. -----Input----- First line contains an integer n (1 ≤ n ≤ 10^5), the size of the array. Second line contains n integers, the elements of the array (1 ≤ arr[i] ≤ 10^9). -----Output----- Output a line containing n integers, the rearranged array with the maximum possible number of global inversions. -----Examples----- Input 5 1 2 3 4 5 Output 5 4 3 2 1 Input 3 10 20 30 Output 30 20 10 -----Note----- In the first example, the array [5, 4, 3, 2, 1] has the maximum number of global inversions possible with 10 pairs that satisfy the condition arr[i] > arr[j]. In the second example, the array [30, 20, 10] also has the maximum number of global inversions possible with 3 pairs that satisfy the condition arr[i] > arr[j].","solution":"def max_global_inversions(arr): Rearrange the list to maximize the number of global inversions. # Sort the array in descending order arr.sort(reverse=True) return arr"},{"question":"Given a string containing only lowercase letters, the goal is to return the length of the longest substring where all characters are unique. For example: - Given \\"abcabcbb\\", the answer is 3, with the longest substring being \\"abc\\". - Given \\"bbbbb\\", the answer is 1, with the longest substring being \\"b\\". - Given \\"pwwkew\\", the answer is 3, with the longest substring being \\"wke\\". Notes: 1. The input string will always have a length between 1 and 1000. 2. The input string will only contain lowercase English letters (\'a\' to \'z\'). You need to implement a function `length_of_longest_unique_substring(s: str) -> int` which returns the length of the longest substring with all unique characters.","solution":"def length_of_longest_unique_substring(s: str) -> int: Returns the length of the longest substring with all unique characters. n = len(s) max_length = 0 start = 0 char_index = {} for end in range(n): if s[end] in char_index: start = max(char_index[s[end]] + 1, start) char_index[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"You are given a bookshelf with n shelves and m books. Each book has a unique height. The goal is to place all books on the shelves such that the largest number of books that fit on any shelf does not exceed a given value k. Each shelf has a maximum width it can hold, given by an array `w` where `w[i]` represents the maximum width of the i-th shelf. Each book has a specific width given in another array `book_width` where `book_width[j]` represents the width of the j-th book. Your task is to determine if it is possible to place all the books on the shelves satisfying the constraints and, if possible, print one such arrangement. -----Input----- The first line contains three integers n, m, and k (1 ≤ n ≤ 100, 1 ≤ m ≤ 100, 1 ≤ k ≤ 10) – the number of shelves, the number of books, and the maximum number of books that can fit on any shelf, respectively. The second line contains n integers `w[i]` (1 ≤ w[i] ≤ 1000) – the maximum width of the i-th shelf. The third line contains m integers `book_width[j]` (1 ≤ book_width[j] ≤ 1000) – the width of each book. -----Output----- If it is not possible to arrange the books on the shelves, print -1. Otherwise, print the arrangement in n lines, where the i-th line contains the indices of the books placed on the i-th shelf, separated by spaces. If there are multiple possible solutions, you may print any of them. -----Examples----- Input 3 5 3 10 10 10 2 3 4 5 1 Output 1 5 2 4 3 Input 2 3 2 6 9 5 2 3 Output 1 3 2 Input 2 4 1 5 9 4 3 5 6 Output -1 -----Note----- In the first sample, you can place the books as follows: - Shelf 1: Books 1 (width 2) and 5 (width 1) - Shelf 2: Books 2 (width 3) and 4 (width 5) - Shelf 3: Book 3 (width 4) This satisfies the constraints on the maximum width and maximum number of books per shelf. In the second sample, the only possible valid arrangement is: - Shelf 1: Books 1 (width 5) and 3 (width 3) - Shelf 2: Book 2 (width 2) In the third sample, it is not possible to place all books on the shelves satisfying the constraints, so the output is -1.","solution":"def arrange_books(n, m, k, w, book_width): book_indices = list(range(1, m + 1)) # Book indices start from 1 # Create list of tuples (width, index) and sort by width descending books_with_indices = sorted(zip(book_width, book_indices), key=lambda x: x[0]) shelves = [[] for _ in range(n)] # Result array for shelves shelf_widths = [0] * n # Current used width for each shelf shelf_books = [0] * n # Current number of books on each shelf for width, index in books_with_indices: found_shelf = False for i in range(n): if shelf_books[i] < k and (shelf_widths[i] + width) <= w[i]: shelves[i].append(index) shelf_widths[i] += width shelf_books[i] += 1 found_shelf = True break if not found_shelf: return -1 return shelves"},{"question":"There are n students sitting in a row, each having a score in an exam. The scores are represented in an array of integers. There are two types of operations that can be performed on this array: 1. Update Operation: Modify the score of a specific student. 2. Query Operation: Find the maximum score within a given range of students. You are required to write a piece of code to handle multiple such operations. Input The first line of input contains two integers n and q (1 ≤ n, q ≤ 100000), the number of students and the number of operations, respectively. The second line contains n integers representing the scores of the students. The next q lines contain the operations. Each line starts with an integer t (1 ≤ t ≤ 2). If t is 1, it is followed by two integers i and x (1 ≤ i ≤ n, 0 ≤ x ≤ 100). This represents an update operation, where the score of the i-th student should be updated to x. If t is 2, it is followed by two integers l and r (1 ≤ l ≤ r ≤ n). This represents a query operation, where you must find the maximum score within the range [l, r]. Output For each query operation, output the maximum score in the specified range. Example Input 5 5 1 2 3 4 5 2 1 3 1 3 6 2 2 4 1 5 1 2 3 5 Output 3 6 6","solution":"class StudentScores: def __init__(self, scores): self.scores = scores def update(self, i, x): self.scores[i-1] = x def query(self, l, r): return max(self.scores[l-1:r]) def process_operations(n, q, scores, operations): student_scores = StudentScores(scores) output = [] for operation in operations: t = operation[0] if t == 1: i, x = operation[1], operation[2] student_scores.update(i, x) elif t == 2: l, r = operation[1], operation[2] output.append(student_scores.query(l, r)) return output # Example usage: n = 5 q = 5 scores = [1, 2, 3, 4, 5] operations = [ [2, 1, 3], [1, 3, 6], [2, 2, 4], [1, 5, 1], [2, 3, 5] ] results = process_operations(n, q, scores, operations) for result in results: print(result)"},{"question":"Given an array of integers, return the maximum sum of any non-empty subarray with at most one element removed. A subarray is a contiguous part of an array. Example 1: Input: arr = [1, -2, 0, 3] Output: 4 Explanation: * Subarray with no elements removed: [1, -2, 0, 3] with sum = 2 * Subarray with the -2 removed: [1, 0, 3] with sum = 4 Example 2: Input: arr = [1, -2, -2, 3] Output: 3 Explanation: * Subarray with no elements removed: [1, -2, -2, 3] with sum = 0 * Subarray with the first -2 removed: [1, -2, 3] with sum = 2 * Subarray with the second -2 removed: [1, -2, 3] with sum = 2 * Subarray with 1 removed: [-2, -2, 3] with sum = -1 Example 3: Input: arr = [-1, -1, -1, -1] Output: -1 Explanation: * Subarray with no elements removed: [-1] with sum = -1 Your Task: You don\'t need to read input or print anything. Implement the function maxSumSubarray(arr), which takes an array arr as input parameter and returns the maximum sum of any non-empty subarray with at most one element removed. Expected Time Complexity: O(N), where N is the length of the input array. Expected Auxiliary Space: O(N). Constraints: 1 <= arr.length <= 10^5 -10^4 <= arr[i] <= 10^4","solution":"def maxSumSubarray(arr): Returns the maximum sum of any non-empty subarray with at most one element removed. n = len(arr) if n == 1: return arr[0] max_ending_here = [0] * n max_starting_here = [0] * n max_so_far = arr[0] max_ending_here[0] = arr[0] for i in range(1, n): max_ending_here[i] = max(max_ending_here[i-1] + arr[i], arr[i]) max_so_far = max(max_so_far, max_ending_here[i]) max_starting_here[-1] = arr[-1] for i in range(n-2, -1, -1): max_starting_here[i] = max(max_starting_here[i+1] + arr[i], arr[i]) for i in range(1, n-1): max_so_far = max(max_so_far, max_ending_here[i-1] + max_starting_here[i+1]) return max_so_far"},{"question":"You are given a sequence of characters representing a mathematical expression that includes numbers (0-9), addition (+), and multiplication (*). The expression does not contain any spaces or parentheses. You are tasked with evaluating this expression following the standard order of operations (i.e., multiplication before addition). Write a function `evaluate_expression(expression: str) -> int` that takes a single argument, a string `expression`, and returns an integer representing the result of the expression evaluated according to the order of operations. # Input - A single string `expression` (1 ≤ len(expression) ≤ 10^5), which is a valid mathematical expression consisting of digits (0-9), \'+\' and \'*\'. # Output - An integer, which is the result of evaluating the expression. # Examples Example 1: **Input:** ``` \\"3+2*2\\" ``` **Output:** ``` 7 ``` **Explanation:** 3 + (2 * 2) = 3 + 4 = 7 Example 2: **Input:** ``` \\"3+5*2+1\\" ``` **Output:** ``` 14 ``` **Explanation:** 3 + (5 * 2) + 1 = 3 + 10 + 1 = 14 # Note Remember that multiplication takes precedence over addition. So in expressions like `a+b*c`, the multiplication operation should be performed before the addition.","solution":"def evaluate_expression(expression: str) -> int: Evaluates a mathematical expression containing digits (0-9), \'+\' and \'*\'. It respects the order of operations, i.e., multiplication before addition. # Splitting the expression by \'+\' to handle additions separately additions = expression.split(\'+\') # Calculating the value of each term (separated by \'+\') considering \'*\' multiplication total_sum = 0 for term in additions: factors = term.split(\'*\') product = 1 for factor in factors: product *= int(factor) total_sum += product return total_sum"},{"question":"A delivery robot is tasked with navigating a factory floor that is represented as a grid of size m x n. The robot starts at the top-left corner of the grid (0, 0) and its goal is to reach the bottom-right corner (m-1, n-1). The robot can only move either down or right at any point in time. Additionally, there are certain cells in the grid that are blocked and the robot cannot step on those cells. Determine the number of unique paths the robot can take to reach its destination. Input The first line contains two integers m and n (1 ≤ m, n ≤ 100), representing the number of rows and columns in the grid, respectively. The next m lines each contain n integers, representing the grid where 0 indicates an empty cell and 1 indicates a blocked cell. The top-left corner (0, 0) and the bottom-right corner (m-1, n-1) will always be 0 (not blocked). Output You must print a single integer, the number of unique paths from the top-left corner to the bottom-right corner of the grid. Examples Input 3 3 0 0 0 0 1 0 0 0 0 Output 2 Input 2 2 0 1 0 0 Output 1 Input 4 3 0 0 1 0 1 0 0 0 0 0 1 0 Output 1","solution":"def unique_paths_with_obstacles(grid): m = len(grid) n = len(grid[0]) if grid[0][0] == 1 or grid[m-1][n-1] == 1: return 0 # Initialize a 2D DP array dp = [[0] * n for _ in range(m)] dp[0][0] = 1 # Fill the first row and first column based on obstacles for i in range(1, m): if grid[i][0] == 0: dp[i][0] = dp[i-1][0] for j in range(1, n): if grid[0][j] == 0: dp[0][j] = dp[0][j-1] # Fill the rest of the DP table for i in range(1, m): for j in range(1, n): if grid[i][j] == 0: dp[i][j] = dp[i-1][j] + dp[i][j-1] else: dp[i][j] = 0 return dp[m-1][n-1] # Example usage: # m, n = 3, 3 # grid = [ # [0, 0, 0], # [0, 1, 0], # [0, 0, 0] # ] # print(unique_paths_with_obstacles(grid)) # Output: 2"},{"question":"In a fictional country, there are several cities connected by bidirectional roads. Each city can be represented as a node and each road as an edge in a graph. Due to various reasons, some cities and roads might be closed. Given the current state of the country, you are to determine if there exists a path between two given cities, avoiding the closed cities and roads. You need to write a function that checks whether a path exists between two specific cities, considering the closed elements. Constraints: 2 ≤ n ≤ 1000 (number of cities) 0 ≤ r ≤ 5000 (number of roads) 0 ≤ c ≤ 100 (number of closed cities) 0 ≤ cr ≤ 500 (number of closed roads) Input: - First line contains four integers n, r, c, and cr denoting: - n: number of cities - r: number of roads - c: number of closed cities - cr: number of closed roads - The next r lines each contain two integers u and v indicating bidirectional roads between city u and city v. - The next line contains two integers a and b, representing the cities between which we need to find a path. - The following c lines each contain one integer, indicating the closed cities. - The following cr lines each contain two integers x and y, indicating the closed roads between city x and city y. Output: - Print \\"YES\\" if there exists a path between city a and city b avoiding the closed cities and roads. - Print \\"NO\\" if no such path exists. Example Input: 6 7 2 1 1 2 1 3 2 4 3 4 4 5 3 6 5 6 3 5 2 1 3 Example Output: YES","solution":"def path_exists(n, r, c, cr, roads, a, b, closed_cities, closed_roads): from collections import defaultdict, deque def bfs(start, end, graph, closed_cities, closed_roads): queue = deque([start]) visited = set([start]) while queue: current = queue.popleft() if current == end: return True for neighbor in graph[current]: if neighbor not in visited and neighbor not in closed_cities and (current, neighbor) not in closed_roads and (neighbor, current) not in closed_roads: visited.add(neighbor) queue.append(neighbor) return False graph = defaultdict(list) for u, v in roads: if u not in closed_cities and v not in closed_cities: graph[u].append(v) graph[v].append(u) closed_cities_set = set(closed_cities) closed_roads_set = set((min(x, y), max(x, y)) for x, y in closed_roads) if a in closed_cities_set or b in closed_cities_set: return \\"NO\\" return \\"YES\\" if bfs(a, b, graph, closed_cities_set, closed_roads_set) else \\"NO\\" # The function can be called with appropriate inputs to test."},{"question":"In a certain kingdom, the royal guards practice a unique system of communication using a sequence of flags placed in a straight line. The flags can be of different colors and each color is represented by a unique integer. The sequence of flags can be represented as an array of integers where each integer corresponds to a specific color. The guards need to ensure that any two adjacent flags are of different colors for the message to be properly understood. Given an array of integers representing the flag colors, your task is to determine the minimum number of flags that need to be changed to ensure that no two adjacent flags are of the same color. # Input - The first line contains an integer, n (1 ≤ n ≤ 1000), representing the number of flags in the sequence. - The second line contains n space-separated integers ranging from 1 to 1000, representing the colors of the flags in the sequence. # Output - Output a single integer, the minimum number of flags that need to be changed. # Sample Input 0 6 1 1 2 3 3 3 # Sample Output 0 2 # Explanation 0 Here, the flags can be changed as follows: - Change the second flag from color 1 to color 2, making the sequence [1, 2, 2, 3, 3, 3]. - Change the fourth flag from color 3 to color 4, making the sequence [1, 2, 2, 4, 3, 3]. This involves 2 changes, which is the minimum required. # Sample Input 1 5 3 3 3 3 3 # Sample Output 1 2 # Explanation 1 Here, the flags can be changed as follows: - Change the second flag from color 3 to color 1, making the sequence [3, 1, 3, 3, 3]. - Change the fourth flag from color 3 to color 1, making the sequence [3, 1, 3, 1, 3]. This involves 2 changes, which is the minimum required. # Constraints - 1 ≤ n ≤ 1000 - 1 ≤ color of each flag ≤ 1000","solution":"def min_changes_to_avoid_adjacent_duplicates(n, colors): changes = 0 for i in range(1, n): if colors[i] == colors[i - 1]: changes += 1 if i + 1 < n and colors[i + 1] != colors[i]: colors[i] = colors[i - 1] else: colors[i] = colors[i - 1] + 1 return changes"},{"question":"You are given an array of integers. Your task is to determine if you can rearrange the elements of the array such that the difference between any two adjacent elements is not equal to 1. -----Input:----- The first line of input contains an integer T, the number of test cases. Each test case consists of two lines. The first line contains an integer N, the number of elements in the array. The second line contains N space-separated integers representing the elements of the array. -----Output:----- For each test case, if it is possible to rearrange the elements such that the difference between any two adjacent elements is not equal to 1, output \\"YES\\" followed by the rearranged array. If it is not possible, output \\"NO\\". -----Constraints----- - 1 leq N leq 1000 - 1 leq text{Element of the array} leq 10^5 -----Sample Input:----- 3 5 1 2 3 4 5 6 10 20 30 40 50 60 3 2 1 3 -----Sample Output:----- NO YES 10 30 50 20 40 60 NO","solution":"def can_rearrange_no_adjacent_difference_one(arr): Determine if it\'s possible to rearrange the array such that no two adjacent elements have a difference of 1. If possible, return \'YES\' and the rearranged array, otherwise return \'NO\'. arr.sort() n = len(arr) for i in range(1, n): if arr[i] - arr[i - 1] == 1: return \\"NO\\" return \\"YES \\" + \' \'.join(map(str, arr)) def process_test_cases(T, test_cases): results = [] for i in range(T): arr = test_cases[i] results.append(can_rearrange_no_adjacent_difference_one(arr)) return results"},{"question":"Alex is playing a game that involves moving around a grid with obstacles. The grid is represented as a 2D array where cells can be either empty (0) or contain an obstacle (1). Alex can move either up, down, left, or right but cannot move into cells with obstacles or move off the grid. The objective of the game is to determine the shortest path from the top-left corner of the grid to the bottom-right corner. Write a function that, given the grid, returns the length of the shortest path from the top-left corner to the bottom-right corner. If no such path exists, the function should return -1. Input The input consists of a single integer n (2 ≤ n ≤ 1000) — the size of the grid (n x n). This is followed by n lines each containing n integers (0 or 1), representing the grid. Output Print the length of the shortest path from the top-left corner (0, 0) to the bottom-right corner (n-1, n-1). If no such path exists, print -1. Examples Input 5 0 0 0 0 1 1 1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 Output 9 Input 4 0 1 1 1 1 1 1 0 1 1 1 0 1 1 0 0 Output -1","solution":"from collections import deque def shortestPath(grid): Returns the length of the shortest path from the top-left corner to the bottom-right corner in a grid with obstacles. If no such path exists, returns -1. n = len(grid) if grid[0][0] == 1 or grid[n-1][n-1] == 1: return -1 # if start or end is an obstacle, return -1 immediately directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 1)]) # queue stores tuples of (row, col, path_length) visited = set((0, 0)) while queue: row, col, path_length = queue.popleft() if (row, col) == (n-1, n-1): return path_length for dr, dc in directions: newRow, newCol = row + dr, col + dc if 0 <= newRow < n and 0 <= newCol < n and (newRow, newCol) not in visited and grid[newRow][newCol] == 0: queue.append((newRow, newCol, path_length + 1)) visited.add((newRow, newCol)) return -1"},{"question":"Ramesh is fascinated by Fibonacci numbers. He recently came across the concept of generalized Fibonacci sequences, where the sequence can start with any two integers a and b instead of the classical 0 and 1. Ramesh wants to generate such sequences up to the n-th term but is unsure how to do it. Can you help him by writing a function that generates the first n terms of a generalized Fibonacci sequence given two starting integers? INPUT A single integer T denoting the number of cases. T lines follow, with each line containing three space-separated integers n, a, and b. OUTPUT Print the first n terms of the generalized Fibonacci sequence for each test case, with each sequence in a new line. Constraints 1 ≤ T ≤ 100 1 ≤ n ≤ 50 -100 ≤ a, b ≤ 100 *Problem Setter : *Anjali Mehta SAMPLE INPUT 3 5 1 1 7 2 3 4 0 5 SAMPLE OUTPUT 1 1 2 3 5 2 3 5 8 13 21 34 0 5 5 10","solution":"def generalized_fibonacci(a, b, n): Generates the first n terms of a generalized Fibonacci sequence, starting with integers a and b. if n == 1: return [a] if n == 2: return [a, b] sequence = [a, b] for _ in range(2, n): next_term = sequence[-1] + sequence[-2] sequence.append(next_term) return sequence def process_cases(T, cases): Processes T cases of generalized Fibonacci sequences. results = [] for case in cases: n, a, b = case sequence = generalized_fibonacci(a, b, n) results.append(sequence) return results def main(T, cases): results = process_cases(T, cases) for result in results: print(\\" \\".join(map(str, result))) # Example usage with sample input: # main(3, [(5, 1, 1), (7, 2, 3), (4, 0, 5)])"},{"question":"Implement a function that calculates the minimum number of operations required to convert string A to string B. The allowed operations are: 1. Insert a character. 2. Delete a character. 3. Replace a character. Given two strings A and B, find the minimum number of operations required. Example 1: Input: A = \\"kitten\\", B = \\"sitting\\" Output: 3 Explanation: - Replace \'k\' with \'s\' -> \\"sitten\\" - Replace \'e\' with \'i\' -> \\"sittin\\" - Insert \'g\' at the end -> \\"sitting\\" Example 2: Input: A = \\"flaw\\", B = \\"lawn\\" Output: 2 Explanation: - Insert \'l\' at the beginning -> \\"lflaw\\" - Replace \'f\' with \'n\' -> \\"lawn\\" Your Task: You don\'t need to read input or print anything. Your task is to complete the function `minOperations` which takes the strings A and B as input parameters and returns the minimum number of operations required. Expected Time Complexity: O(len(A) * len(B)) Expected Auxiliary Space: O(len(A) * len(B)) Constraints: 1 <= len(A), len(B) <= 100","solution":"def minOperations(A, B): Calculate the minimum number of operations required to convert string A to string B. The allowed operations are insert, delete, and replace a character. :param A: str - The original string. :param B: str - The target string. :return: int - Minimum number of operations. m, n = len(A), len(B) # Create a DP table to store the minimum operations dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill the first row and column for i in range(m + 1): dp[i][0] = i for j in range(n + 1): dp[0][j] = j # Fill the rest of the DP table for i in range(1, m + 1): for j in range(1, n + 1): if A[i - 1] == B[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = min(dp[i - 1][j] + 1, # Delete dp[i][j - 1] + 1, # Insert dp[i - 1][j - 1] + 1) # Replace return dp[m][n]"},{"question":"You are given an array of N positive integers representing the heights of N mountains, where the mountains are positioned in a line from left to right. You need to determine the length of the longest ascending subsequence of mountains, where each mountain in the subsequence is taller than the one before it. -----Constraints----- - All values in input are integers. - 1 ≤ N ≤ 2 × 10^5 - 1 ≤ height of each mountain ≤ 10^9 -----Input----- Input is given from Standard Input in the following format: N height_1 height_2 height_3 ... height_N -----Output----- Print a single integer representing the length of the longest ascending subsequence of mountains. -----Sample Input----- 6 5 3 4 8 6 7 -----Sample Output----- 4 -----Explanation----- The longest ascending subsequence is [3, 4, 6, 7], which has a length of 4.","solution":"def longest_ascending_subsequence(N, heights): Returns the length of the longest ascending subsequence of mountains. if N == 0: return 0 dp = [1] * N for i in range(1, N): for j in range(i): if heights[i] > heights[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Imagine you are given a rectangular grid with dimensions `n` x `m`, where some cells contain obstacles. Your task is to determine if there is a path from the top-left corner of the grid to the bottom-right corner, moving only right or down, and avoiding obstacles. Write a function `is_path(grid: List[List[int]]) -> bool` that takes a grid represented as a list of lists and returns `True` if a path exists from the top-left to the bottom-right, and `False` otherwise. The value `1` in the grid represents an obstacle, whereas `0` represents an open cell. # Function Signature ```python def is_path(grid: List[List[int]]) -> bool: ``` # Input Constraints - 1 <= n, m <= 100 - Each element of the grid will be either 0 or 1. # Example ```python is_path([ [0, 0, 1], [1, 0, 1], [1, 0, 0] ]) -> True is_path([ [0, 1], [1, 0] ]) -> False ``` # Explanation In the first example, a path exists from the top-left to the bottom-right. The path is as follows: - Move right to (0,1) - Move down to (1,1) - Move down to (2,1) - Move right to (2,2) In the second example, there is no path from the top-left to the bottom-right, because of obstacles blocking the way.","solution":"from typing import List def is_path(grid: List[List[int]]) -> bool: if grid[0][0] == 1 or grid[-1][-1] == 1: return False n = len(grid) m = len(grid[0]) def dfs(x, y): if x < 0 or y < 0 or x >= n or y >= m or grid[x][y] == 1: return False if x == n - 1 and y == m - 1: # Reach the bottom-right corner return True grid[x][y] = 1 # Mark as visited by setting to 1 # Explore right and down return dfs(x + 1, y) or dfs(x, y + 1) return dfs(0, 0)"},{"question":"You are given a string s consisting of lowercase English letters and a character c. Your task is to determine the length of the shortest substring of s that contains at least one occurrence of the character c. -----Input----- The first line contains a single integer t (1 le t le 10^4) — the number of test cases. Each of the next t lines contains a string s (1 le |s| le 10^5) and a character c. It\'s guaranteed that the total length of all strings s in a single input will not exceed 10^6. -----Output----- For each test case, print a single integer — the length of the shortest substring of s that contains at least one occurrence of the character c. If the character c does not appear in the string s, print -1. -----Examples----- Input 3 hello e abc a xyz x Output 1 1 1 -----Note----- In the first test case, the shortest substring of \\"hello\\" containing the character \'e\' is \\"e\\", which has a length of 1. In the second test case, the shortest substring of \\"abc\\" containing the character \'a\' is \\"a\\", which has a length of 1. In the third test case, the shortest substring of \\"xyz\\" containing the character \'x\' is \\"x\\", which has a length of 1.","solution":"def shortest_substring_with_char(s, c): This function takes a string s and a character c, and returns the length of the shortest substring of s that contains at least one occurrence of c. If the character c does not appear in the string s, it returns -1. if c not in s: return -1 shortest_length = float(\'inf\') for i in range(len(s)): if s[i] == c: shortest_length = 1 # The character itself is a substring of length 1 break return shortest_length def process_test_cases(test_cases): results = [] for s, c in test_cases: results.append(shortest_substring_with_char(s, c)) return results"},{"question":"Create a class `Matrix` that supports basic operations for a 2D matrix. In your class, you should support the following operations, given Matrix `m1` and Matrix `m2`: ```python m1 + m2 # returns a new Matrix that is the resultant of adding them m1 - m2 # same, but with subtraction m1 * m2 # returns a new Matrix that is the result of matrix multiplication m1.transpose() # returns a new Matrix that is the transpose of m1 m1.det() # returns the determinant of the matrix m1 (only for 2x2 and 3x3 matrices) m1.to_list() # returns the matrix as a list of lists representation str(m1) # returns a string representation of the matrix Matrix([[a, b], [c, d]]) # creates a new 2x2 Matrix from the supplied 2D array Matrix([[a, b, c], [d, e, f], [g, h, i]]) # creates a new 3x3 Matrix from the supplied 2D array ``` The test cases will not mutate the produced Matrix objects, so focus only on implementing the required methods for a non-mutable matrix.","solution":"class Matrix: def __init__(self, data): self.data = data self.rows = len(data) self.cols = len(data[0]) def __add__(self, other): if self.rows != other.rows or self.cols != other.cols: raise ValueError(\\"Matrices must have the same dimensions to add.\\") result = [ [self.data[i][j] + other.data[i][j] for j in range(self.cols)] for i in range(self.rows) ] return Matrix(result) def __sub__(self, other): if self.rows != other.rows or self.cols != other.cols: raise ValueError(\\"Matrices must have the same dimensions to subtract.\\") result = [ [self.data[i][j] - other.data[i][j] for j in range(self.cols)] for i in range(self.rows) ] return Matrix(result) def __mul__(self, other): if self.cols != other.rows: raise ValueError(\\"Number of columns of the first matrix must equal the number of rows of the second matrix.\\") result = [ [sum(self.data[i][k] * other.data[k][j] for k in range(self.cols)) for j in range(other.cols)] for i in range(self.rows) ] return Matrix(result) def transpose(self): result = [ [self.data[j][i] for j in range(self.rows)] for i in range(self.cols) ] return Matrix(result) def det(self): if self.rows == 2 and self.cols == 2: return self.data[0][0] * self.data[1][1] - self.data[0][1] * self.data[1][0] elif self.rows == 3 and self.cols == 3: a = self.data return ( a[0][0] * (a[1][1] * a[2][2] - a[1][2] * a[2][1]) - a[0][1] * (a[1][0] * a[2][2] - a[1][2] * a[2][0]) + a[0][2] * (a[1][0] * a[2][1] - a[1][1] * a[2][0]) ) else: raise NotImplementedError(\\"Determinant not implemented for matrices larger than 3x3.\\") def to_list(self): return self.data def __str__(self): return \'n\'.join([\' \'.join(map(str, row)) for row in self.data])"},{"question":"A team of archaeologists is working on analyzing ancient inscriptions found in a secret cave. Each inscription consists of a single string containing only capital consonants (BCDFGHJKLMNPQRSTVWXYZ). They believe there\'s a pattern in these inscriptions that might reveal a hidden message. The suspected pattern is a palindrome, meaning that the string reads the same backward as forward. However, due to erosion over time, some inscriptions might not be complete palindromes, but after removing a certain number of characters, they could form one. Your task is to determine if it is possible to remove at most one character from the inscription to make it a palindrome. -----Input----- - The first line contains a single integer T, which denotes the number of inscriptions to be checked. The description of each inscription follows after this. - Each of the next T lines contains a single string of capital consonants representing an inscription. -----Output----- - For each inscription, print \\"Possible\\" if it can be turned into a palindrome by removing at most one character. Otherwise, print \\"Not Possible\\". -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ length of each inscription ≤ 200 -----Example----- Input: 5 BCDCB BMN GHQHG QWERTY ABCBA Output: Possible Not Possible Possible Not Possible Possible -----Explanation----- - \\"BCDCB\\" is already a palindrome. - \\"BMN\\" cannot be a palindrome even if one character is removed. - \\"GHQHG\\" is already a palindrome. - \\"QWERTY\\" cannot be made a palindrome by removing only one character. - \\"ABCBA\\" is already a palindrome.","solution":"def can_be_palindrome_by_removing_one_character(str_list): Given a list of strings containing only capital consonants, this function checks if it is possible to make each string a palindrome by removing at most one character. Parameters: str_list (list of str): List of strings to be checked. Returns: list of str: \'Possible\' or \'Not Possible\' for each input string. def is_palindrome(s): # Helper function to check if a string is a palindrome return s == s[::-1] def check_palindrome_possibility(s): # Helper function to check if a string can be a palindrome by removing at most one character left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: # Skip left character or right character and check if either resulting string is a palindrome return is_palindrome(s[left:right]) or is_palindrome(s[left+1:right+1]) left += 1 right -= 1 return True # Already a palindrome or can be made a palindrome results = [] for s in str_list: if check_palindrome_possibility(s): results.append(\'Possible\') else: results.append(\'Not Possible\') return results"},{"question":"John has a collection of strings that he calls \\"pattern strings\\". A pattern string is a string that contains only two distinct characters. For example, \\"abab\\", \\"xyyx\\", and \\"ijkliji\\" are pattern strings, whereas \\"abc\\", \\"aaa\\", and \\"xyzxyz\\" are not. John has come across a new string `s` and wonders if it\'s possible to rearrange the characters of `s` to form a pattern string. He needs your help to determine if this is possible. Input The first line contains a single integer `t` (1 ≤ t ≤ 10^5) — the number of test cases. Each of the next `t` lines contains a single string `s` with length `n` (1 ≤ n ≤ 10^5). The total length of all strings does not exceed 10^6. Output For each test case, print \\"YES\\" if it\'s possible to rearrange the characters of `s` to form a pattern string. Otherwise, print \\"NO\\". Examples Input 3 aabb abc aabbcc Output YES NO NO Note In the first example, `s = \\"aabb\\"`, which can be rearranged to \\"abab\\" or \\"baba\\" so it\'s a pattern string. In the second example, `s = \\"abc\\"`, which cannot be rearranged to form a pattern string as there are more than 2 distinct characters. In the third example, `s = \\"aabbcc\\"`, which also cannot be rearranged to form a pattern string as there are more than 2 distinct characters.","solution":"def can_form_pattern_string(s): Determine if the string `s` can be rearranged to form a pattern string. distinct_characters = set(s) return len(distinct_characters) == 2 def process_test_cases(test_cases): For each test case, determine if the input string can be rearranged to form a pattern string. results = [] for s in test_cases: if can_form_pattern_string(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given a list of integers, find the sum of all elements in the list that are divisible by a given number k. Example 1: Input: N = 6 Integer array = 2 4 5 6 9 12 k = 3 Output: 27 Explanation: The elements 6, 9, and 12 are divisible by 3. Their sum is 27. Example 2: Input: N = 5 Integer array = 1 2 3 4 5 k = 2 Output: 6 Explanation: The elements 2 and 4 are divisible by 2. Their sum is 6. Your Task: You don\'t need to read input or print anything. Complete the function sumDivisibleByK() which accepts an integer array arr and its size N, and an integer k as parameters and returns the sum of all elements that are divisible by k. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1)","solution":"def sumDivisibleByK(N, arr, k): Returns the sum of all elements in the list that are divisible by k. return sum(x for x in arr if x % k == 0)"},{"question":"Phoebe loves writing songs and has a list of words she wants to use in her new song. However, she wants her song to have a certain rhyme scheme, which requires that she uses words that have the same ending letters. Given a list of words, determine if it’s possible to choose a subset of the words that all end with the same exact sequence of K characters. -----Input:----- - The first line contains an integer T, the number of test cases. - For each test case, the first line contains an integer N, the number of words. - The second line of each test case contains an integer K. - The next N lines each contain a word consisting of lowercase English letters. -----Output:----- For each test case, output \\"YES\\" if it is possible to choose a subset of words with the same ending of K characters. Otherwise, output \\"NO\\". -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 1000 - 1 leq K leq 10 -----Sample Input:----- 2 4 2 hello jello mellow yellow 3 imana banana ana canada -----Sample Output:----- YES YES -----Explanation:----- - In the first test case, we can use the subset {\\"hello\\", \\"jello\\", \\"mellow\\", \\"yellow\\"} because all words end with \\"lo\\". - In the second test case, we can use the subset {\\"imana\\", \\"banana\\", \\"ana\\"}, as they all end with \\"ana\\".","solution":"def can_choose_subset_with_same_ending(T, test_cases): results = [] for i in range(T): N, K, words = test_cases[i] suffixes = {} for word in words: suffix = word[-K:] if suffix in suffixes: suffixes[suffix] += 1 else: suffixes[suffix] = 1 if any(count > 1 for count in suffixes.values()): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a string consisting of lowercase alphabetical characters and an integer `K`. Your task is to determine whether it is possible to rearrange the characters of the string such that no two adjacent characters are the same, and the difference between the positions of any two identical characters in the rearranged string is at least `K`. -----Input----- - The first line of the input contains an integer `T` denoting the number of test cases. - Each of the next `T` lines contains a string `S` and an integer `K`. -----Output----- For each test case, print a single line containing the string \\"Possible\\" if it is possible to rearrange the characters of the string as described above, or \\"Impossible\\" otherwise. -----Constraints----- - 1 ≤ `T` ≤ 1,000 - 1 ≤ length of `S` ≤ 100 - 1 ≤ `K` ≤ 100 -----Example Input----- 3 aabbcc 2 aa 2 abcabc 3 -----Example Output----- Possible Impossible Possible","solution":"from collections import Counter import heapq def can_rearrange(S, K): if K == 1: return \\"Possible\\" freq = Counter(S) max_heap = [(-value, key) for key, value in freq.items()] heapq.heapify(max_heap) wait_list = [] result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) wait_list.append((char, count + 1)) if len(wait_list) < K: continue front_char, front_count = wait_list.pop(0) if front_count < 0: heapq.heappush(max_heap, (front_count, front_char)) return \\"Possible\\" if len(result) == len(S) else \\"Impossible\\" def solve(test_cases): results = [] for S, K in test_cases: results.append(can_rearrange(S, K)) return results"},{"question":"Many ancient civilizations believed in unique forms of astronomy including intriguing patterns and shapes. A certain ancient Martian civilization has left behind encoded messages based on the arrangement of stars in the night sky. These codes are formed using sequences of different celestial symbols, specifically represented by lowercase letters from \'a\' to \'z\'. Each sequence hides an important message that researchers are quite eager to decode. You are assigned to work on a specialized decoder that will decrypt these sequences. The decoding rule is quite simple but requires a keen eye for detail: Each letter in the sequence must be replaced by the letter 2 places ahead of it in the alphabet, but wrapping around at \'z\' back to \'a\' and \'b\'. For example, \'a\' becomes \'c\', \'b\' becomes \'d\', ..., \'y\' becomes \'a\', and \'z\' becomes \'b\'. INPUT: The first line contains an integer N (number of sequences). Next N lines will each contain a sequence of lowercase letters. OUTPUT: Produce the decoded output for each sequence in new line in the format Case x: y where x represents the sequence number and y represents the decoded sequence for sequence numbered x. CONSTRAINTS: 1 ≤ N ≤ 100 1 ≤ length of any sequence ≤ 1000 SAMPLE INPUT 3 abc xyz mno SAMPLE OUTPUT Case 1: cde Case 2: zab Case 3: opq Explanation: For Case 1: \'a\' -> \'c\', \'b\' -> \'d\', \'c\' -> \'e\' For Case 2: \'x\' -> \'z\', \'y\' -> \'a\', \'z\' -> \'b\' For Case 3: \'m\' -> \'o\', \'n\' -> \'p\', \'o\' -> \'q\'","solution":"def decode_sequence(sequence): Decodes a sequence by replacing each letter with the letter 2 places ahead in the alphabet. Wraps from \'z\' back to \'a\' and \'b\'. result = [] for char in sequence: new_char = chr(((ord(char) - ord(\'a\') + 2) % 26) + ord(\'a\')) result.append(new_char) return \'\'.join(result) def decode_sequences(sequences): Takes a list of sequences and returns a list of decoded strings in the format \'Case x: y\' where x is the sequence number and y is the decoded sequence. result = [] for i, seq in enumerate(sequences): decoded_seq = decode_sequence(seq) result.append(f\\"Case {i + 1}: {decoded_seq}\\") return result"},{"question":"Geek wants to distribute N candies among children such that each child gets at least one candy. Moreover, the number of candies given to each child must be in increasing order. You need to find the maximum number of children Geek can distribute the candies to in this manner. Example 1: Input: N = 7 Output: 3 Explanation: Geek can distribute 1 candy to the 1st child, 2 candies to the 2nd child, and 3 candies to the 3rd child. In total, 1 + 2 + 3 = 6 candies and he will have 1 candy left, so the maximum number of children is 3. Example 2: Input: N = 10 Output: 4 Explanation: Geek can distribute 1 candy to the 1st child, 2 candies to the 2nd child, 3 candies to the 3rd child, and 4 candies to the 4th child. In total, 1 + 2 + 3 + 4 = 10 candies, so the maximum number of children is 4. Your Task: You do not need to read input or print anything. Your task is to complete the function maxChildren() which takes the value N as an input parameter and returns the maximum number of children Geek can distribute the candies to. Expected Time Complexity: O(sqrt(N)) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^{9}","solution":"def maxChildren(N): Returns the maximum number of children Geek can distribute candies to such that each child gets at least one candy and the number of candies given to each child is in increasing order. N: int - number of candies return: int - maximum number of children # Start with k = 1 and keep increasing k while (k * (k + 1)) / 2 <= N k = 0 total = 0 while total <= N: k += 1 total += k return k - 1"},{"question":"Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array with a length up to the number of unique elements. After placing the final result in the first part of the array, fill the remaining part with underscores (_). Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory. Example 1: Input: nums = [1, 1, 2] Output: [1, 2, _] Explanation: The function should return the unique elements [1, 2] and fill the remaining part with underscores. Example 2: Input: nums = [0,0,1,1,1,2,2,3,3,4] Output: [0, 1, 2, 3, 4, _, _, _, _, _] Explanation: The function should return the unique elements [0, 1, 2, 3, 4] and fill the remaining part with underscores. Note: - Your algorithm should have a linear runtime complexity. - You must modify the input array in-place with O(1) extra memory.","solution":"def remove_duplicates(nums): Removes duplicates in a sorted array in-place and fills the remaining elements with \'_\'. if not nums: return nums unique_index = 0 for i in range(1, len(nums)): if nums[unique_index] != nums[i]: unique_index += 1 nums[unique_index] = nums[i] for i in range(unique_index + 1, len(nums)): nums[i] = \\"_\\" return nums"},{"question":"Given a string s, which consists of characters \'a\' and \'b\' only, determine the minimum number of deletions required to make the string alternating. An alternating string is one in which no two adjacent characters are the same. Example 1: Input: s = \\"aab\\" Output: 1 Explanation: We can delete one \'a\' to get \\"ab\\" which is alternating. Example 2: Input: s = \\"aaa\\" Output: 2 Explanation: We can delete two \'a\'s to get \\"a\\" which is alternating. Example 3: Input: s = \\"ababab\\" Output: 0 Explanation: The string is already alternating. Example 4: Input: s = \\"baaaab\\" Output: 3 Explanation: We can delete three \'a\'s to get \\"bab\\" which is alternating. Constraints: 1 <= s.length <= 1000 s[i] = \'a\' or \'b\'","solution":"def min_deletions_to_alternate(s): Determine the minimum number of deletions required to make the string alternating. deletions = 0 for i in range(1, len(s)): if s[i] == s[i-1]: deletions += 1 return deletions"},{"question":"You are given two integer arrays. The first array represents the number of tasks to be completed, where each task i has a duration ti. The second array represents workers available, where each worker j can handle a maximum duration dj. If dj >= ti, the task i can be assigned to the worker j. Your goal is to maximize the number of tasks completed and output the maximum number. Note: You may assume the durations are always positive. You cannot assign more than one task to one worker. Example 1: Input: [2, 3, 5], [4, 1, 3] Output: 2 Explanation: You have 3 tasks with durations 2, 3, and 5. You have 3 workers who can handle up to 4, 1, and 3 units of task duration, respectively. You can assign the tasks with durations 2 and 3 to the workers who can handle up to 4 and 3 units, respectively. Example 2: Input: [4, 3], [1, 2, 3] Output: 1 Explanation: You have 2 tasks with durations 4 and 3. You have 3 workers who can handle up to 1, 2, and 3 units of task duration, respectively. You can assign the task with duration 3 to the worker who can handle up to 3 units of duration. Therefore, you need to output 1.","solution":"def max_tasks_completed(tasks, workers): Find the maximum number of tasks that can be completed. :param tasks: List of task durations. :param workers: List of max durations workers can handle. :return: Maximum number of tasks completed. tasks.sort() workers.sort() task_index = 0 worker_index = 0 completed_tasks = 0 while task_index < len(tasks) and worker_index < len(workers): if workers[worker_index] >= tasks[task_index]: completed_tasks += 1 task_index += 1 worker_index += 1 return completed_tasks"},{"question":"A company tracks the daily sales of products in two different months and wants to compare the sales performance. Write a program that reads two sets of data representing the daily sales of each product for two different months and outputs the product ID and the absolute difference in total sales between the two months for each product. Both sets of data will contain entries for the same products. Each product is identified by a unique integer product ID. Input The data for the two months are given in separate blocks, separated by a blank line. Each block contains daily sales data in the following format: p1, s1 p2, s2 ... ... pi (1 ≤ pi ≤ 1,000) is an integer representing the product ID, and si (0 ≤ si ≤ 1,000) is an integer representing the sales on that day. Output For each product, output the product ID and the absolute difference in total sales between the two months, separated by a space. The output should be in ascending order of product ID. Example Input 101,300 102,250 103,500 101,400 102,300 103,450 Output 101 100 102 50 103 50","solution":"def parse_sales_data(data): sales_dict = {} for line in data.splitlines(): if line.strip(): product_id, sales = map(int, line.split(\\",\\")) if product_id in sales_dict: sales_dict[product_id] += sales else: sales_dict[product_id] = sales return sales_dict def compare_sales(data_month_1, data_month_2): sales_month_1 = parse_sales_data(data_month_1) sales_month_2 = parse_sales_data(data_month_2) all_products = sorted(set(sales_month_1.keys()).union(sales_month_2.keys())) result = [] for product_id in all_products: total_sales_1 = sales_month_1.get(product_id, 0) total_sales_2 = sales_month_2.get(product_id, 0) difference = abs(total_sales_1 - total_sales_2) result.append((product_id, difference)) return result"},{"question":"Longest Substring with At Most K Distinct Characters In a given string, write a program to find the length of the longest substring that contains at most `k` distinct characters. You have to use a sliding window approach to solve this problem efficiently. **Input** The input consists of multiple test cases provided in a single list. Each test case is represented by a dictionary containing the following keys: - `\\"string\\"`: A string `s` where `1 ≤ len(s) ≤ 10^5` consisting of lowercase English letters. - `\\"k\\"`: An integer `k` denotes the maximum number of distinct characters allowed in the substring, where `1 ≤ k ≤ 26`. **Output** For each test case, output the length of the longest substring that contains at most `k` distinct characters. **Example Input** ```json [ {\\"string\\": \\"araaci\\", \\"k\\": 2}, {\\"string\\": \\"araaci\\", \\"k\\": 1}, {\\"string\\": \\"cbbebi\\", \\"k\\": 3} ] ``` **Example Output** ```json [ 4, 2, 5 ] ``` **Explanation** - For the first test case (`\\"araaci\\"`, `k=2`): The longest substring with at most 2 distinct characters is `\\"araa\\"` with length 4. - For the second test case (`\\"araaci\\"`, `k=1`): The longest substring with at most 1 distinct character is `\\"aa\\"` with length 2. - For the third test case (`\\"cbbebi\\"`, `k=3`): The longest substring with at most 3 distinct characters is `\\"cbbeb\\"` or `\\"bbebi\\"` with length 5. For each test case, find the length of the longest substring containing at most `k` distinct characters using an efficient approach, ensuring that your program can handle the upper limits of the constraints.","solution":"def length_of_longest_substring_k_distinct(test_cases): def longest_substring_k_distinct(s, k): window_start = 0 max_length = 0 char_frequency = {} for window_end in range(len(s)): right_char = s[window_end] if right_char not in char_frequency: char_frequency[right_char] = 0 char_frequency[right_char] += 1 while len(char_frequency) > k: left_char = s[window_start] char_frequency[left_char] -= 1 if char_frequency[left_char] == 0: del char_frequency[left_char] window_start += 1 max_length = max(max_length, window_end - window_start + 1) return max_length results = [] for case in test_cases: s = case[\'string\'] k = case[\'k\'] results.append(longest_substring_k_distinct(s, k)) return results"},{"question":"A company stores its product information in a large data file. Each product is represented by a string consisting of alphanumeric characters and symbols. Your task is to verify if a given product name follows the company\'s naming convention rules. Rules: 1. The product name must start with an uppercase alphabetic character (A-Z). 2. It must be followed by exactly three digits (0-9). 3. It ends with two alphabetic characters, which can be either uppercase or lowercase (A-Z, a-z). Write a function to validate if each given product name adheres to the naming convention. Input: The first line contains an integer N (1 ≤ N ≤ 100) indicating the number of product names to be checked. Each of the next N lines contains one product name. Each product name is a string with length between 5 and 20 characters inclusive. Output: For each product name, print \\"Valid\\" if the name follows the naming convention, otherwise print \\"Invalid\\". Input 4 A123Bc X567yz 2fgHJ Q890de Output Valid Valid Invalid Valid","solution":"import re def is_valid_product_name(product_name): Verifies if the product name follows the given naming convention. pattern = r\'^[A-Z][0-9]{3}[A-Za-z]{2}\' return bool(re.match(pattern, product_name)) def validate_product_names(product_names): Validates a list of product names and prints whether each name is valid or invalid. results = [] for name in product_names: if is_valid_product_name(name): results.append(\\"Valid\\") else: results.append(\\"Invalid\\") return results"},{"question":"You are given a list of integers and a target sum. Your task is to determine if there are any two distinct elements in the list that add up to the target sum. Return the two indices of such elements if they exist, otherwise return an empty list. The solution should ensure the order of the indices is maintained as in the original list. Example 1: Input: nums = [2, 7, 11, 15], target = 9 Output: [0, 1] Explanation: nums[0] + nums[1] = 2 + 7 = 9 Example 2: Input: nums = [3, 2, 4], target = 6 Output: [1, 2] Explanation: nums[1] + nums[2] = 2 + 4 = 6 Your Task: This is a function problem. The input is already taken care of by the driver code. You need to complete the function findPair() which takes an array (nums), its size (n), and an integer target, and returns the indices of the two numbers such that they add up to the target. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ n ≤ 10^5 -10^9 ≤ nums[i] ≤ 10^9 -10^9 ≤ target ≤ 10^9","solution":"def findPair(nums, target): Finds two indices such that the elements at these indices sum up to the target. Args: nums (list): List of integers. target (int): Target sum. Returns: list: List containing two indices if such a pair exists, otherwise an empty list. seen = {} for i, num in enumerate(nums): complement = target - num if complement in seen: return [seen[complement], i] seen[num] = i return []"},{"question":"You are given an array of integers `nums` and an integer `target`. Your task is to find the number of unique quadruplets in the array that sum up to the given `target`. A quadruplet is unique if its set of indices `(i, j, k, l)` are distinct and `i < j < k < l`. Write a function: ```python def unique_quadruplets(nums: List[int], target: int) -> int: # your code here ``` **Input** - `nums`: a list of integers (0 ≤ len(nums) ≤ 200, -10^9 ≤ nums[i] ≤ 10^9) - `target`: an integer (-10^9 ≤ target ≤ 10^9) **Output** - Return the number of unique quadruplets in the array that sum up to the given `target`. **Example** Input: ```python nums = [1, 0, -1, 0, -2, 2] target = 0 ``` Output: ```python 3 ``` Explanation: The quadruplets are: - (-2, -1, 1, 2) - (-2, 0, 0, 2) - (-1, 0, 0, 1) Note: - The order of quadruplets in the output does not matter. - The elements in the quadruplets must appear in the same relative order as they appear in the input array.","solution":"from typing import List from itertools import combinations def unique_quadruplets(nums: List[int], target: int) -> int: nums.sort() # Sort the array for easier management of indices n = len(nums) quadruplets = set() for i in range(n - 3): for j in range(i + 1, n - 2): left = j + 1 right = n - 1 while left < right: four_sum = nums[i] + nums[j] + nums[left] + nums[right] if four_sum == target: quadruplets.add((nums[i], nums[j], nums[left], nums[right])) left += 1 right -= 1 elif four_sum < target: left += 1 else: right -= 1 return len(quadruplets)"},{"question":"Amelia is fascinated by numbers and loves playing with them. One day, she came up with an interesting challenge. You are given an array of positive integers, and your goal is to perform the following operations to make all the array elements equal using a minimum number of operations. In one operation, select any two different elements of the array, say a_i and a_j (where i neq j), and replace both of them with their sum. Help Amelia by writing a program to find the minimum number of operations required to make all elements in the array equal. -----Input----- The first line contains a single integer t (1 le t le 10^4) — the number of test cases. For each test case, the first line contains one integer n (2 le n le 10^5) — the length of the array. The second line contains n integers a_1, a_2, a_3, ldots, a_n (1 le a_i le 10^9) — the array a itself. It is guaranteed that the sum of n over all test cases does not exceed 10^5. -----Output----- For each test case print a single integer — the minimum number of operations required to make all elements of the array equal. -----Examples----- Input 3 3 2 4 6 4 1 1 1 1 5 1 2 3 4 5 Output 2 0 4 -----Note----- In the first test case, we can do the following operations: 1. Add a_1 and a_2, resulting in the array [6, 6, 6]. In the second test case, all elements are already equal, so no operations are needed. In the third test case, we can do the following operations: 1. Add a_1 and a_2, resulting in the array [3, 3, 4, 5]. 2. Add one of the threes with four, resulting in the array [6, 6, 5]. 3. Add both sixes together, resulting in the array [12, 5]. 4. Add both remaining numbers together, resulting in the array [17].","solution":"def min_operations_to_make_equal(test_cases): results = [] for case in test_cases: n, arr = case unique_elements = len(set(arr)) operations_needed = unique_elements - 1 results.append(operations_needed) return results def parse_input(input_str): lines = input_str.strip().split(\\"n\\") t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(lines[index]) arr = list(map(int, lines[index + 1].split())) test_cases.append((n, arr)) index += 2 return test_cases"},{"question":"You are given a sequence of n integers a_1, a_2, ldots, a_n. Your task is to partition this sequence into several continuous subsequences in such a way that each resulting subsequence is strictly increasing. After partitioning, for each subsequence, you calculate the number of elements in the subsequence minus one (i.e., if a subsequence has k elements, its contribution to the score is k-1). The total score for all partitions should be minimized. Determine the total minimum score you can achieve by partitioning the sequence. -----Input----- The first line contains an integer n (1 le n le 100,000) — the length of the sequence a. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the sequence of integers. -----Output----- Print a single integer — the minimum possible total score. -----Examples----- Input 5 1 2 3 2 4 Output 1 Input 7 1 3 2 5 4 6 7 Output 2 -----Note----- In the first example, you can partition the sequence as follows: (1, 2, 3) and (2, 4). The resulting score is (3-1) + (2-1) = 2 + 1 = 1. In the second example, you can partition the sequence as follows: (1, 3), (2, 5) and (4, 6, 7). The resulting score is (2-1) + (2-1) + (3-1) = 1 + 1 + 2 = 2.","solution":"def min_partition_score(n, sequence): Calculate the minimum possible total score for partitioning the sequence into strictly increasing continuous subsequences. if n == 1: return 0 score = 0 for i in range(1, n): if sequence[i] <= sequence[i - 1]: score += 1 return score"},{"question":"You are given an undirected, unweighted graph with `V` vertices and `E` edges. Your task is to find out if the graph contains a cycle. A cycle is defined as a sequence of edges that starts and ends at the same vertex, with all vertices (except the start/end vertex) being distinct. Input: - The first line contains an integer `T` representing the number of test cases. - For each test case, the first line contains two space-separated integers `V` and `E`, representing the number of vertices and edges in the graph, respectively. - The next `E` lines each contain two integers `u` and `v` representing an edge between vertex `u` and vertex `v`. Output: - For each test case, output \\"YES\\" if the graph contains a cycle, otherwise output \\"NO\\". Constraints: - 1 ≤ T ≤ 100 - 2 ≤ V ≤ 1000 - 1 ≤ E ≤ 2000 - 1 ≤ u, v ≤ V SAMPLE INPUT: 2 3 3 1 2 2 3 3 1 4 2 1 2 2 3 SAMPLE OUTPUT: YES NO Explanation: Case 1: The given graph has vertices 1, 2, 3, and edges between 1-2, 2-3, 3-1, forming a cycle 1-2-3-1. Case 2: The given graph has vertices 1, 2, 3, 4, and edges between 1-2, 2-3. There is no cycle in this graph.","solution":"def find_cycle_in_graph(test_cases): def has_cycle(graph, V): visited = [False] * (V + 1) def dfs(v, parent): visited[v] = True for neighbor in graph[v]: if not visited[neighbor]: if dfs(neighbor, v): return True elif parent != neighbor: return True return False for node in range(1, V + 1): if not visited[node]: if dfs(node, -1): return True return False results = [] for V, E, edges in test_cases: graph = [[] for _ in range(V + 1)] for u, v in edges: graph[u].append(v) graph[v].append(u) if has_cycle(graph, V): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"> You are given two strings S and T with lengths N and M respectively. You are to determine if you can transform string S into string T by deleting some (possibly zero) characters from S without reordering the remaining characters. > > Write a function to check if it\'s possible to get T as a subsequence of S. > > Constraints: > > - 1 ≤ N, M ≤ 1000 > - S and T consist of lowercase English letters. > > Input > > Input is given from Standard Input in the following format: > > ``` > N M > S > T > ``` > > Output > > Print \\"YES\\" if T can be obtained as a subsequence of S, otherwise print \\"NO\\". > > Examples > > Input > > ``` > 7 5 > abacdef > acdf > ``` > > Output > > ``` > YES > ``` > > Input > > ``` > 5 3 > xyaab > abc > ``` > > Output > > ``` > NO > ```","solution":"def can_transform(S, T): Determines if T can be formed from S by deleting some characters without reordering the remaining. :param S: The source string :param T: The target string :return: \\"YES\\" if T can be obtained as a subsequence of S, otherwise \\"NO\\" t_len = len(T) s_index = 0 t_index = 0 while s_index < len(S) and t_index < t_len: if S[s_index] == T[t_index]: t_index += 1 s_index += 1 return \\"YES\\" if t_index == t_len else \\"NO\\""},{"question":"A company has a set of employees, each with a unique ID number. Employees collaborate on various projects and each project has a unique identifier. We are given a list of pairs indicating that two employees have directly collaborated. Our task is to determine all sets of employees who have directly or indirectly collaborated with each other. For example, suppose we have the following collaborations: - Employee 1 collaborated with Employee 2. - Employee 2 collaborated with Employee 3. - Employee 4 collaborated with Employee 5. Then, Employees 1, 2, and 3 are part of one collaboration group, and Employees 4 and 5 are part of another collaboration group. Thus, we have two groups. -----Input:----- The first line of the input contains two integers M and N, where M is the number of employees and N is the number of collaboration pairs. The next N lines each contain a pair of integers a and b indicating that Employee a collaborated with Employee b. -----Output:----- A single integer representing the number of collaboration groups. -----Constraints:----- - 1 leq M leq 1000 - 0 leq N leq 10000 -----Sample Input:----- 5 3 1 2 2 3 4 5 -----Sample Output:----- 2 -----Hint:----- You can represent the collaboration pairs as an undirected graph where each node represents an employee, and edges represent direct collaborations. The task is to find the number of connected components in the graph. You can use Depth-First Search (DFS) or Breadth-First Search (BFS) to explore the graph and determine the number of connected components.","solution":"def find_number_of_collaboration_groups(M, N, collaborations): from collections import defaultdict, deque # Create adjacency list for the graph adj_list = defaultdict(list) for a, b in collaborations: adj_list[a].append(b) adj_list[b].append(a) visited = set() def bfs(start): queue = deque([start]) while queue: node = queue.popleft() for neighbor in adj_list[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) # Count connected components number_of_groups = 0 for employee in range(1, M + 1): if employee not in visited: bfs(employee) number_of_groups += 1 return number_of_groups"},{"question":"You are given a string consisting of lower-case English alphabets and a set of queries. Each query gives you two integers, `l` and `r`, and a character `c`. For each query, you need to determine how many times the character `c` appears in the substring of the original string that starts at index `l` and ends at index `r` (inclusive). The string indexing is 0-based. -----Input----- The first line contains an integer `n` (1 le n le 10^5), the length of the string. The second line contains the string of length `n`. The third line contains an integer `q` (1 le q le 10^5), the number of queries. The following `q` lines contain a query, which consists of two integers `l` and `r` (0 le l le r < n) and a character `c`. -----Output----- For each query, print a single integer — the number of times the character `c` appears in the substring from index `l` to index `r`. -----Examples----- Input 10 abracadabra 3 1 3 a 0 4 b 2 6 r Output 2 1 1 -----Note----- In the first query, the substring from index 1 to index 3 is \\"bra\\", which contains \'a\' twice. In the second query, the substring from index 0 to index 4 is \\"abrac\\", which contains \'b\' once. In the third query, the substring from index 2 to index 6 is \\"racad\\", which contains \'r\' once.","solution":"def count_char_in_substring(s, queries): For each query, determine how many times the character appears in the substring Parameters: s (str): The input string queries (list of tuples): Each tuple contains two integers l, r and a character c Returns: list: A list of integers representing the count of character c in each query\'s substring results = [] for l, r, c in queries: substring = s[l:r+1] count = substring.count(c) results.append(count) return results"},{"question":"A delivery service company used to hire delivery boys based on the shortest path from the delivery boy\'s current location to the destination address. The shortest path is calculated using the Euclidean distance formula. You are given the coordinates of the delivery boy\'s current location and the coordinates of the destination address. Write a function to calculate and return the shortest path between the two points. The Euclidean distance between two points (x1, y1) and (x2, y2) is given by: [ text{Distance} = sqrt{(x2 - x1)^2 + (y2 - y1)^2} ] Input The only line of the input contains four integers x1, y1, x2, and y2 separated by spaces, where (x1, y1) represents the coordinates of the delivery boy\'s location, and (x2, y2) represents the coordinates of the destination address. Output Output a single floating-point number rounded to 2 decimal places, which represents the shortest distance between the two points. SAMPLE INPUT 1 2 4 6 SAMPLE OUTPUT 5.00 Explanation Using the Euclidean distance formula: [ text{Distance} = sqrt{(4 - 1)^2 + (6 - 2)^2} = sqrt{3^2 + 4^2} = sqrt{9 + 16} = sqrt{25} = 5.00 ]","solution":"import math def calculate_shortest_path(x1, y1, x2, y2): Calculates the Euclidean distance between two points (x1, y1) and (x2, y2). distance = math.sqrt((x2 - x1)**2 + (y2 - y1)**2) return round(distance, 2)"},{"question":"Given a list of integers, find the longest subsequence where the difference between consecutive elements is the same. Print the length of this subsequence. -----Constraints----- - The input list contains at least 1 and at most 1000 integers. - Each integer in the list is between -10^6 and 10^6. -----Input----- Input is given from Standard Input in the following format: n a_1 a_2 a_3 ... a_n Where: - n is the number of integers in the list. - a_1, a_2, a_3, ..., a_n are the integers in the list. -----Output----- Print the length of the longest subsequence where the difference between consecutive elements is the same. -----Sample Input----- 7 3 6 9 12 15 18 21 -----Sample Output----- 7 The entire list forms a subsequence where the difference between each consecutive element is 3. Hence, the length of the longest such subsequence is 7.","solution":"def longest_arithmetic_subsequence_length(nums): if len(nums) <= 1: return len(nums) max_length = 1 current_length = 1 common_diff = None for i in range(1, len(nums)): diff = nums[i] - nums[i-1] if common_diff is None: common_diff = diff current_length += 1 elif diff == common_diff: current_length += 1 else: common_diff = diff current_length = 2 if current_length > max_length: max_length = current_length return max_length # Read from standard input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) nums = list(map(int, data[1:])) print(longest_arithmetic_subsequence_length(nums))"},{"question":"Given an integer M. Your task is to determine if the integer is even or odd. If the integer is even, then print \\"Even\\" (without quotes). If the integer is odd, then print \\"Odd\\". Note:- Do not print the next line after the result. Example 1: Input: M = 7 Output: Odd Example 2: Input: M = 12 Output: Even Your Task: You don\'t need to read input or print anything. Your task is to complete the function checkEvenOdd() which takes the number M and returns \\"Even\\" if the integer is even or \\"Odd\\" if the integer is odd. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 0 <= M <= 100000","solution":"def checkEvenOdd(M): Returns \\"Even\\" if M is an even number, otherwise \\"Odd\\". if M % 2 == 0: return \\"Even\\" else: return \\"Odd\\""},{"question":"You are given N people and M relationships between them. The i-th relationship is represented as a friendship between person a_i and person b_i. A group of people is considered a \\"clique\\" if every pair of people in that group are friends with each other. Determine the size of the largest clique in the network. Constraints * 2 leq N leq 100 * 1 leq M leq 1000 * 1 leq a_i, b_i leq N * a_i neq b_i for all 1 leq i leq M Input Input is given from Standard Input in the following format: N M a_1 b_1 a_2 b_2 : a_M b_M Output Print the size of the largest clique. Example Input 5 4 1 2 2 3 3 4 4 5 Output 2 Input 5 6 1 2 2 3 3 4 4 5 1 5 2 4 Output 3","solution":"from itertools import combinations def largest_clique_size(N, M, relationships): graph = {i: set() for i in range(1, N+1)} for a, b in relationships: graph[a].add(b) graph[b].add(a) def is_clique(group): for u, v in combinations(group, 2): if v not in graph[u]: return False return True max_clique = 1 # Minimum clique size is 1 for size in range(2, N+1): for group in combinations(range(1, N+1), size): if is_clique(group): max_clique = size return max_clique"},{"question":"You are given a grid consisting of n rows and m columns, represented by characters \'.\' and \'#\'. Each \'.\' represents an open cell, and each \'#\' represents a blocked cell. You start in the top-left cell (1,1), and you want to reach the bottom-right cell (n,m) by moving either down or right at any given step. You can only move through cells that are open (\'.\'). Your task is to determine whether it is possible to reach the bottom-right cell from the top-left cell, and if so, find the number of different paths you can take modulo 10^9+7. -----Input----- The first line contains two integers n and m (1 le n, m le 1000) — the number of rows and columns of the grid. Each of the next n lines contains a string of length m consisting of characters \'.\' and \'#\'. -----Output----- Print a single integer — the number of different paths from the top-left cell to the bottom-right cell modulo 10^9+7. If there is no such path, print 0. -----Examples----- Input 3 4 . . . # . # . . . . . . Output 3 Input 2 2 . # # . Output 0 -----Note----- In the first example, one possible path is: (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3) -> (3,4) Another possible path is: (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) -> (3,4) And the third path: (1,1) -> (1,2) -> (1,3) -> (1,4) -> (2,4) -> (3,4) In the second example, there is no possible path from (1,1) to (2,2).","solution":"MOD = 10**9 + 7 def count_paths(n, m, grid): if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[n-1][m-1] # Example usage: # n, m = 3, 4 # grid = [ # [\'.\', \'.\', \'.\', \'#\'], # [\'.\', \'#\', \'.\', \'.\'], # [\'.\', \'.\', \'.\', \'.\'] # ] # print(count_paths(n, m, grid)) # output should be 3"},{"question":"Bob\'s friends were not done with gifts after the array beautifier, so they devised another fun but tricky problem for him! They gave Bob two strings, `A` and `B`, both consisting of lowercase English alphabets. Bob\'s task is to transform string `A` into string `B` using minimum number of operations. In each operation, Bob can either: 1. Insert a character. 2. Delete a character. 3. Replace a character. Since Bob loves challenges, he wants to know the minimum number of operations required to transform `A` into `B`. Your task is to help Bob find this minimum number of operations. Input The first line contains a string `A` (1 ≤ length of A ≤ 1000). The second line contains a string `B` (1 ≤ length of B ≤ 1000). Output Print a single integer: the minimum number of operations required to transform `A` into `B`. Examples Input kitten sitting Output 3 Input flaw lawn Output 2 Input intention execution Output 5","solution":"def min_operations(A, B): Returns the minimum number of operations required to transform string A into string B. len_a, len_b = len(A), len(B) # Create a DP table to store results of subproblems dp = [[0 for _ in range(len_b + 1)] for _ in range(len_a + 1)] # Initialize the table for i in range(len_a + 1): dp[i][0] = i # If B is empty, all characters of A need to be deleted for j in range(len_b + 1): dp[0][j] = j # If A is empty, all characters of B need to be inserted # Fill dp table for i in range(1, len_a + 1): for j in range(1, len_b + 1): if A[i - 1] == B[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], # Delete dp[i][j - 1], # Insert dp[i - 1][j - 1])# Replace return dp[len_a][len_b]"},{"question":"You are given a string of lowercase alphabets and spaces. Your task is to create a new string where each character in the input string is replaced with the next character in the alphabet. If the character is \'z\', it should be replaced with \'a\'. Spaces should remain unchanged. Return the resulting string. All inputs will be non-empty strings consisting of only lowercase alphabets and spaces.","solution":"def shift_string(s): Shifts each character in the input string to the next character in the alphabet. \'z\' is replaced by \'a\'. Spaces remain unchanged. Args: s (str): Input string containing only lowercase alphabets and spaces. Returns: str: Resulting string after shifting. new_string = [] for char in s: if char == \' \': new_string.append(char) elif char == \'z\': new_string.append(\'a\') else: new_string.append(chr(ord(char) + 1)) return \'\'.join(new_string)"},{"question":"An online retail store is running a promotion campaign whereby customers are rewarded with loyalty points. Each customer receives a certain number of reward points for their purchases, which can be used to redeem discounts on future purchases. The store wants to analyze the points distributed and has engaged you to calculate the total points received by all customers combined. Given a list of customers\' purchases and the points they received for each purchase, your task is to calculate the total number of loyalty points distributed. -----Input----- - The first line contains a single integer `n` (1 ≤ n ≤ 1000), which represents the number of purchases. - The next `n` lines each contain two integers `c` and `p` (1 ≤ c ≤ 10000, 1 ≤ p ≤ 100), where `c` is the customer ID and `p` is the number of points received for that purchase. -----Output----- Output a single integer representing the total number of loyalty points distributed. -----Examples----- Sample Input 1: 3 101 20 102 15 101 30 Sample Output 1: 65 Sample Input 2: 5 1001 45 1002 75 1003 60 1001 80 1002 90 Sample Output 2: 350","solution":"def total_loyalty_points(n, purchases): Calculate the total number of loyalty points distributed from given purchases. :param n: Number of purchases :param purchases: List of tuples where each tuple contains customer ID and points received :return: Total points distributed total_points = 0 for customer_id, points in purchases: total_points += points return total_points"},{"question":"Given an array A of size N, write a program to find the longest subarray where the sum of its elements is equal to 0. The function should return the length of this subarray. If no such subarray exists, the function should return 0. Input Format: The first line of input contains an integer T, denoting the number of test cases. Each test case consists of two lines. The first line contains an integer n, denoting the size of the array. The second line contains n space-separated integers representing the elements of the array. Output Format: For each test case, in a new line, print the length of the longest subarray with sum 0. Your Task: This is a function problem. You only need to complete the function longestZeroSumSubarray that takes an array as an argument and returns the length of the longest subarray with sum 0. The printing is done by the driver code. Constraints: 1 <= T <= 100 1 <= N <= 10^4 -10^5 <= A[i] <= 10^5 Example: Input: 2 8 15 -2 2 -8 1 7 10 23 5 1 2 3 4 5 Output: 5 0 Explanation: Testcase1: The subarray [15, -2, 2, -8, 1] has a sum of 0 and is the longest such subarray. Testcase2: There is no subarray with sum equal to 0, so the output is 0.","solution":"def longestZeroSumSubarray(A): Find the longest subarray with sum 0. :param A: List[int] -- input array :return: int -- length of the longest subarray with sum 0 sum_index_map = {} max_length = 0 current_sum = 0 for i in range(len(A)): current_sum += A[i] if current_sum == 0: max_length = i + 1 elif current_sum in sum_index_map: max_length = max(max_length, i - sum_index_map[current_sum]) else: sum_index_map[current_sum] = i return max_length def process_test_cases(T, test_cases): results = [] for i in range(T): _, array = test_cases[i] results.append(longestZeroSumSubarray(array)) return results"},{"question":"# Task You need to implement a function that will receive an array of integers and return the sum of the two largest distinct integers. If the array has less than two distinct elements, the function should return None. # Input An array of integers, which can also be empty or contain duplicates. # Output The sum of the two largest distinct integers in the input array, or None if there are less than two distinct integers. # Example ```python # Input: find_two_largest_sum([10, 14, 2, 23, 19]) # Output: 42 (23 + 19) # Input: find_two_largest_sum([1, 1, 1, 1]) # Output: None # Input: find_two_largest_sum([1]) # Output: None # Input: find_two_largest_sum([1, 5, 3, 9, 7, 7, 8]) # Output: 17 (9 + 8) ``` # Constraints - The input array can be empty. - The input array can contain duplicate values. - The function should handle any integer values within the typical range of 32-bit signed integers: -2,147,483,648 to 2,147,483,647.","solution":"def find_two_largest_sum(arr): Returns the sum of the two largest distinct integers in the array `arr`. If there are less than two distinct integers, return None. # Removing duplicates by converting to set, then sorting in descending order unique_sorted = sorted(set(arr), reverse=True) # Check if there are at least two distinct numbers if len(unique_sorted) < 2: return None # Sum of the two largest distinct numbers return unique_sorted[0] + unique_sorted[1]"},{"question":"You are given a list of integers. You need to find the first repeating element in the list, i.e., an element that occurs more than once and whose index of the first occurrence is the smallest. INPUT: First line contains the total number of test cases T. For each test case, the first line contains an integer N denoting the number of elements in the list and the second line contains a list of N space-separated integers. OUTPUT: For each test case, print the first repeating element in a single line. If there is no repeating element, print -1. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 100000 1 ≤ element ≤ 1000000000 SAMPLE INPUT 2 5 1 2 3 4 3 4 1 2 3 4 SAMPLE OUTPUT 3 -1","solution":"def find_first_repeating_element(test_cases): This function takes a list of test cases, where each test case is a tuple containing the number of elements in the list and the list of integers. It returns a list of the first repeating element for each test case or -1 if there is none. results = [] for _, elements in test_cases: seen = {} first_repeating = -1 for index, element in enumerate(elements): if element in seen: first_repeating = element break else: seen[element] = index results.append(first_repeating) return results"},{"question":"Given an array of integers, determine the maximum length of a strictly increasing subsequence. A strictly increasing subsequence is a sequence where each element is greater than the previous one. **Input:** - An integer N (1 ≤ N ≤ 10^3) – the number of elements in the array. - A sequence of N integers a_1, a_2, ldots, a_N where 1 leq a_i leq 10^6. **Output:** - An integer representing the length of the longest strictly increasing subsequence in the given array. **Example:** **Input:** ``` 6 10 9 2 5 3 7 101 18 ``` **Output:** ``` 4 ``` **Explanation:** The longest strictly increasing subsequence is [2, 3, 7, 101], which has a length of 4. **Input:** ``` 5 5 4 3 2 1 ``` **Output:** ``` 1 ``` **Explanation:** The longest strictly increasing subsequence is any single element, as all elements are in descending order.","solution":"def length_of_lis(nums): Returns the length of the longest strictly increasing subsequence in the given list of integers. if not nums: return 0 n = len(nums) dp = [1] * n # dp[i] represents the length of the LIS ending with nums[i] for i in range(1, n): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"You are the system administrator for a large corporation that needs to manage its internal network efficiently. The company has decided to implement a new encryption system for internal communications. Each employee needs a unique encryption key. Each key is generated using a specific algorithm which ensures that the keys are unique and unbreakable. However, creating these keys manually is a tedious process. You are required to write a program that generates `N` unique keys for `N` employees. Each key should be a random alphanumeric string of length `L`. ------ Input ------ The first line of the input contains a single integer `T` denoting the number of test cases. The description of `T` test cases follows. The first line of each test case contains two space-separated integers `N` and `L`. ------ Output ------ For each test case, print `N` unique alphanumeric strings of length `L`, each on a new line. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 100 5 ≤ L ≤ 20 Note: The strings should be completely unique for each employee in each test case. ------ Sample Input 1 ------ 2 3 8 2 5 ------ Sample Output 1 ------ e4G7HsL2 Q9aTyUiK R3NdBvF6 a1B7c F9KqL (Note: The actual output can vary because the keys are generated randomly. The important part is to ensure that all keys in a test case are unique and meet the specified length and character criteria.)","solution":"import random import string def generate_keys(T, test_cases): results = [] for case in test_cases: N, L = case keys = set() while len(keys) < N: key = \'\'.join(random.choices(string.ascii_letters + string.digits, k=L)) keys.add(key) results.append(list(keys)) return results"},{"question":"In a programming competition, participants are given the task of writing a program that calculates the minimum number of operations required to convert one string into another. The allowed operations are: 1. Insert a character. 2. Delete a character. 3. Replace a character. Participants need to implement an algorithm that solves this problem efficiently. -----Input----- The first line of input contains a single integer t (1 leq t leq 100), the number of test cases. Each of the next 2t lines contains two strings, s1 and s2 (1 leq |s1|, |s2| leq 100), the original string and the target string respectively. -----Output----- For each test case, output the minimum number of operations required to convert s1 into s2 on a new line. -----Examples----- Sample Input: 2 kitten sitting horse ros Sample Output: 3 3 Explanation: 1. For the first test case, \\"kitten\\" to \\"sitting\\": - Replace \'k\' with \'s\' -> \\"sitten\\" - Replace \'e\' with \'i\' -> \\"sittin\\" - Insert \'g\' at the end -> \\"sitting\\" Total operations: 3 2. For the second test case, \\"horse\\" to \\"ros\\": - Remove \'h\' -> \\"orse\\" - Remove \'e\' -> \\"ors\\" - Remove \'r\' -> \\"ros\\" Total operations: 3","solution":"def min_operations(s1, s2): This function calculates the minimum number of operations required to convert s1 into s2. m, n = len(s1), len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # If s1 is empty, insert all characters of s2 elif j == 0: dp[i][j] = i # If s2 is empty, remove all characters of s1 elif s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], # remove dp[i][j - 1], # insert dp[i - 1][j - 1]) # replace return dp[m][n] def process_queries(queries): results = [] for s1, s2 in queries: results.append(min_operations(s1, s2)) return results"},{"question":"Alice is fascinated by mathematical sequences and their properties. Recently, she came across the concept of \\"Triplet Sum\\" and decided to explore it further. She is given an array `arr` of `n` integers and a target sum `X`. She needs your help to determine if there exist three elements in the array whose sum is equal to `X`. Can you help Alice by writing a function that will return `true` if there are three numbers in `arr` that add up to `X`, and `false` otherwise? Example 1: Input: arr = [12, 3, 4, 1, 6, 9], X = 24 Output: true Explanation: The triplet {12, 3, 9} in the array sums up to 24. Example 2: Input: arr = [1, 2, 3, 4, 5], X = 10 Output: true Explanation: The triplet {2, 3, 5} in the array sums up to 10. Example 3: Input: arr = [1, 2, 3, 4, 5], X = 20 Output: false Explanation: There is no triplet in the array that sums up to 20. Your Task: You don\'t need to input anything. Implement the function `find3Numbers()` which takes the array `arr`, the integer `n`, and the integer `X` as input parameters and returns a boolean value. Constraints: - 1 <= n <= 10^3 - -10^5 <= arr[i] <= 10^5","solution":"def find3Numbers(arr, n, X): arr.sort() for i in range(n - 2): left = i + 1 right = n - 1 while left < right: triplet_sum = arr[i] + arr[left] + arr[right] if triplet_sum == X: return True elif triplet_sum < X: left += 1 else: right -= 1 return False"},{"question":"A popular card game involves drawing cards from a shuffled deck and placing them in two separate piles in alternating turns. Each card has a suit (hearts, diamonds, clubs, or spades) and a value ranging from 1 to 10. At the end of the game, the goal is to determine the maximum possible sum that can be obtained by combining values from both piles, but with a specific rule: each pile can only have cards of different suits. That is, if one pile has a card of a particular suit, the other must not have any cards of that suit. Given the initial shuffled deck of cards, design an algorithm to determine the maximum possible sum of values in the two piles combined, adhering to the rule mentioned above. You will be provided with multiple decks, one at a time. Input Format The first line contains a single integer, n, denoting the number of shuffled card decks. Each of the subsequent n sections represents a shuffled card deck in the following format: The first line of each section contains a single integer, k, denoting the number of cards in the deck. The subsequent k lines each describe a card in the deck with two space-separated values: a character s denoting the suit of the card (where boldsymbol{s}in{H,D,C,S} corresponding to hearts, diamonds, clubs, and spades, respectively) and an integer v denoting the value of the card (1 ≤ v ≤ 10). Constraints 1 leq n leq 50 1 leq k leq 10 Output Format For each deck, print a single integer on a new line - the maximum possible sum of values that can be achieved by dividing the cards into two piles while satisfying the rule. Sample Input 0 2 5 H 3 D 5 C 4 S 2 H 7 4 D 1 C 3 S 8 C 5 Sample Output 0 21 17 Explanation 0 For the first deck, the optimal way to divide the cards is: Pile 1: {H 7, D 5, S 2} Pile 2: {H 3, C 4} Max sum = 7 + 5 + 2 + 3 + 4 = 21 For the second deck, the optimal way to divide the cards is: Pile 1: {D 1, S 8} Pile 2: {C 3, C 5} Max sum = 1 + 8 + 3 + 5 = 17","solution":"def max_sum_piles(num_decks, decks): def calculate_max_sum(decks): suits = [\'H\', \'D\', \'C\', \'S\'] results = [] for deck in decks: cards = {\'H\': [], \'D\': [], \'C\': [], \'S\': []} for suit, value in deck: cards[suit].append(value) max_sum = 0 for i in range(1 << 4): pile1_sum = pile2_sum = 0 suits_in_pile1 = {suits[j] for j in range(4) if i & (1 << j)} suits_in_pile2 = set(suits) - suits_in_pile1 for suit in suits_in_pile1: pile1_sum += sum(cards[suit]) for suit in suits_in_pile2: pile2_sum += sum(cards[suit]) max_sum = max(max_sum, pile1_sum + pile2_sum) results.append(max_sum) return results return calculate_max_sum(decks) def parse_input(input_string): lines = input_string.strip().split(\'n\') num_decks = int(lines[0]) decks = [] index = 1 for _ in range(num_decks): k = int(lines[index]) deck = [] for j in range(k): suit, value = lines[index + j + 1].split() deck.append((suit, int(value))) decks.append(deck) index += k + 1 return num_decks, decks if __name__ == \\"__main__\\": import sys input_string = sys.stdin.read() num_decks, decks = parse_input(input_string) results = max_sum_piles(num_decks, decks) for result in results: print(result)"},{"question":"You are given a warehouse which has `n` rows, and each row contains `m` sections. Each section can either be empty or contain a pallet. You need to write a function that determines the number of connected groups of pallets. Pallets are connected if they are adjacent to each other either horizontally or vertically (not diagonally). The warehouse is represented by a 2D list `warehouse` of size `n x m` where each element is either `0` (empty section) or `1` (section with a pallet). Write the function `countPalletGroups(warehouse: List[List[int]]) -> int` that returns the number of connected groups of pallets. # Example: `countPalletGroups([[1, 1, 0, 0], [0, 1, 0, 1], [1, 0, 0, 1], [0, 0, 1, 1]])` will output `3` as there are three connected groups of pallets. `countPalletGroups([[0, 0, 0], [0, 0, 0], [0, 0, 0]])` will output `0` as there are no pallets in the warehouse. Given the 2D list `warehouse`, calculate the number of connected groups of pallets. The dimensions `n` and `m` (number of rows and columns respectively) will always be greater than or equal to 1.","solution":"from typing import List def countPalletGroups(warehouse: List[List[int]]) -> int: Returns the number of connected groups of pallets in the warehouse. if not warehouse: return 0 n, m = len(warehouse), len(warehouse[0]) visited = [[False] * m for _ in range(n)] def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= m or visited[x][y] or warehouse[x][y] == 0: return visited[x][y] = True directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] for dx, dy in directions: dfs(x + dx, y + dy) count = 0 for i in range(n): for j in range(m): if warehouse[i][j] == 1 and not visited[i][j]: count += 1 dfs(i, j) return count"},{"question":"Aditi loves playing games with arrays and lately she has been obsessed with one particular task. Given an array b of size m consisting of positive integers, she wants to partition the array into two non-empty parts, such that the sum of the elements in the two parts is as close to each other as possible. In other words, she wants to minimize the absolute difference between the sum of the elements of both parts. Can you help Aditi find the minimal absolute difference possible by partitioning the array? -----Input----- The first line of the input consists of a single integer m (2 le m le 200) — the size of b. The next line consists of m space-separated integers — the elements of the array (1 le b_i le 10^{9}). -----Output----- Print a single integer — the minimal absolute difference between the sums of the two parts after partitioning the array. -----Examples----- Input 4 10 20 15 5 Output 0 Input 3 1 2 3 Output 0 Input 5 3 1 4 2 2 Output 0 -----Note----- For the first test case, Aditi can partition the array into {10, 15} and {20, 5} with sums 25 and 25 respectively. The absolute difference is |25 - 25| = 0. For the second test case, Aditi can partition the array into {1, 2} and {3} with sums 3 and 3 respectively. The absolute difference is |3 - 3| = 0. For the third test case, Aditi can partition the array into {3, 2} and {1, 4, 2} with sums 5 and 7 respectively. The absolute difference is |5 - 7| = 2. However, partitioning it into {3, 2, 2} and {1, 4} gives sums 7 and 7 respectively, and the absolute difference is |7 - 7| = 0.","solution":"def min_partition_difference(arr): Function to find the minimal absolute difference between the sums of two partitions of an array. total_sum = sum(arr) n = len(arr) dp = [[False] * (total_sum // 2 + 1) for _ in range(n + 1)] for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): for j in range(1, total_sum // 2 + 1): if arr[i - 1] <= j: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]] else: dp[i][j] = dp[i - 1][j] for j in range(total_sum // 2, -1, -1): if dp[n][j]: subset1_sum = j break subset2_sum = total_sum - subset1_sum return abs(subset2_sum - subset1_sum)"},{"question":"Write a program that determines if it is possible to form a closed polygon with given lengths of segments. A closed polygon means you should be able to connect the segments end-to-end in such a way that the last segment connects back to the first segment to form a single closed loop. Input The input is provided in the following format: n l1 l2 l3 ... ln Output If it is possible to form a closed polygon, print \\"yes\\". Otherwise, print \\"no\\". Constraints - 3 ≤ n ≤ 100 - 1 ≤ li ≤ 1000 The sum of all segments\' lengths should be strictly greater than twice the length of the longest segment in order to form a closed polygon. Examples Input 4 3 5 6 7 Output yes Input 3 2 2 5 Output no Input 5 1 1 1 1 1 Output yes","solution":"def can_form_closed_polygon(n, lengths): Determines if it is possible to form a closed polygon with given segment lengths. Parameters: n (int): The number of segments. lengths (List[int]): The lengths of the segments. Returns: str: \\"yes\\" if it is possible to form a closed polygon, otherwise \\"no\\". total_length = sum(lengths) max_length = max(lengths) if total_length > 2 * max_length: return \\"yes\\" else: return \\"no\\" # Example of usage: # n = 4 # lengths = [3, 5, 6, 7] # print(can_form_closed_polygon(n, lengths)) # Should print \\"yes\\""},{"question":"Write a function to compress a string based on the counts of repeated characters. For each group of consecutive repeating characters, the compressed string includes the character followed by the count of repetition. * The function should be case-sensitive (i.e., \'a\' is different from \'A\'). * If the compressed string is not smaller than the original string, return the original string. * The input string will only contain alphabetic characters and will have at least one character. Function Signature: ``` def compress_string(input_str: str) -> str: pass ``` # Input - A single line containing the string `input_str` (1 ≤ len(input_str) ≤ 1000). # Output - Return the compressed string as described above. If the compressed string is not smaller than the original string, return the original string. # Examples Input ``` aabcccccaaa ``` Output ``` a2b1c5a3 ``` Input ``` abc ``` Output ``` abc ``` # Explanation In the first example, the compressed string \\"a2b1c5a3\\" is smaller than the original string \\"aabcccccaaa\\", hence it is returned. In the second example, the compressed string \\"a1b1c1\\" is longer than the original string \\"abc\\", so the original string is returned. # Note If there are multiple answers, return any valid compressed string that adheres to the specified rules.","solution":"def compress_string(input_str: str) -> str: compressed = [] count = 1 for i in range(1, len(input_str)): if input_str[i] == input_str[i - 1]: count += 1 else: compressed.append(input_str[i - 1] + str(count)) count = 1 compressed.append(input_str[-1] + str(count)) compressed_str = \'\'.join(compressed) return compressed_str if len(compressed_str) < len(input_str) else input_str"},{"question":"You are given two lists of integers, nums1 and nums2. Your task is to find the intersection of these two lists. The intersection should include each element the number of times it appears in both lists, maintaining the order of their first appearance in `nums1`. Write a function `find_intersection(nums1, nums2)` that takes two lists of integers as inputs and returns a list containing their intersection, maintaining the order of their first appearance in `nums1`. Input Specifications: - nums1: A list of integers, where 0 <= len(nums1) <= 100 and each integer is in the range [-1000, 1000]. - nums2: A list of integers, where 0 <= len(nums2) <= 100 and each integer is in the range [-1000, 1000]. Output Specifications: - Returns a list of integers representing the intersection of nums1 and nums2, maintaining the order of their first appearance in nums1. Examples: Input: nums1 = [1, 2, 2, 1] nums2 = [2, 2] Output: [2, 2] Input: nums1 = [4, 9, 5] nums2 = [9, 4, 9, 8, 4] Output: [4, 9] Input: nums1 = [1] nums2 = [1] Output: [1] Input: nums1 = [1, 2, 3] nums2 = [4, 5, 6] Output: [] Note: 1. The elements in the intersection should appear in the same order as they do in `nums1`. 2. If no intersection exists, return an empty list.","solution":"def find_intersection(nums1, nums2): Returns the intersection of nums1 and nums2, maintaining the order of their first appearance in nums1. intersection = [] nums2_counts = {} for num in nums2: if num in nums2_counts: nums2_counts[num] += 1 else: nums2_counts[num] = 1 for num in nums1: if num in nums2_counts and nums2_counts[num] > 0: intersection.append(num) nums2_counts[num] -= 1 return intersection"},{"question":"In a given string, each character is either \'A\' or \'B\'. You need to determine the minimum number of changes required to make all characters in the string identical. -----Constraints----- - The string length is between 1 and 100 inclusive. - The string consists only of \'A\' and \'B\'. -----Input----- Input is given from Standard Input in the following format: The string of characters composed of \'A\' and \'B\'. -----Output----- Print the minimum number of changes required. -----Sample Input----- ABBABA -----Sample Output----- 3 - We can change the three \'B\'s to \'A\'s or three \'A\'s to \'B\'s to make all characters identical.","solution":"def min_changes_to_identical(s): Returns the minimum number of changes required to make all characters in the string identical. count_A = s.count(\'A\') count_B = s.count(\'B\') # Minimum of the two counts needs to be changed to make all characters identical return min(count_A, count_B) # Example usage: # print(min_changes_to_identical(\\"ABBABA\\")) # Output: 3"},{"question":"A garden has a rectangular shape with dimensions n × m meters. You want to cover the garden with ceramic tiles that come in sheets of size a × b meters. You have to place the tiles in such a way that they can be rotated 90 degrees if necessary to cover the whole garden area. The tiles can only be placed so that their sides are parallel to the garden\'s sides. Write a program to calculate the minimum number of tiles required to completely cover the garden. You are allowed to cover an area larger than the garden itself, but you are not allowed to break the tiles. Input The input consists of three positive integers n, m and k in the first line, followed by two positive integers a and b in the second line: (1 ≤ n, m, a, b ≤ 109). Output Write the needed number of tiles. SAMPLE INPUT 6 6 4 3 SAMPLE OUTPUT 4","solution":"import math def min_tiles_required(n, m, a, b): Calculates the minimum number of tiles required to cover a rectangular garden of dimensions n x m with tiles of dimensions a x b. The tiles can be rotated 90 degrees. # Calculate the number of tiles required when tiles are placed normally (a x b) tiles_normal = (math.ceil(n / a) * math.ceil(m / b)) # Calculate the number of tiles required when tiles are rotated (b x a) tiles_rotated = (math.ceil(n / b) * math.ceil(m / a)) # Return the minimum of the two configurations return min(tiles_normal, tiles_rotated) # Sample usage print(min_tiles_required(6, 6, 4, 3)) # Output should be 4"}]'),A={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},C={class:"search-container"},Y={class:"card-container"},F={key:0,class:"empty-state"},j=["disabled"],P={key:0},z={key:1};function M(s,e,l,m,a,r){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",C,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>a.searchQuery=o),placeholder:"Search..."},null,512),[[y,a.searchQuery]]),a.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>a.searchQuery="")}," ✕ ")):u("",!0)]),t("div",Y,[(n(!0),i(_,null,w(r.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),r.displayedPoems.length===0?(n(),i("div",F,' No results found for "'+h(a.searchQuery)+'". ',1)):u("",!0)]),r.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...o)=>r.loadMore&&r.loadMore(...o))},[a.isLoading?(n(),i("span",z,"Loading...")):(n(),i("span",P,"See more"))],8,j)):u("",!0)])}const R=d(A,[["render",M],["__scopeId","data-v-b5411d80"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"deepseek/7.md","filePath":"deepseek/7.md"}'),L={name:"deepseek/7.md"},G=Object.assign(L,{setup(s){return(e,l)=>(n(),i("div",null,[x(R)]))}});export{B as __pageData,G as default};
