import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as y,f as l,F as _,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},q={class:"poem-container"},T={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(s,e,u,p,r,a){return n(),i("div",q,[t("div",T,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(u.poem.solution),1)])])])}const N=d(k,[["render",O],["__scopeId","data-v-c811cbcd"]]),S=JSON.parse('[{"question":"In a bid to improve the warehouse management system for an e-commerce company, the logistics team wants to design an algorithm that can help in sorting the products based on their delivery urgency. Each product has a unique identifier and an associated urgency score. The urgency score is a positive integer where a higher value indicates a more urgent delivery requirement. The team wants a function that takes in a list of products along with their urgency scores and sorts the products in descending order of their urgency scores. If two products have the same urgency score, they should be ordered by their unique identifier in ascending order. -----Input----- The first line of input contains a single integer n, the number of products (1 <= n <= 100000). The next n lines each contain a product\'s identifier and urgency score. The identifier is a positive integer (1 <= identifier <= 1000000) and the urgency score is also a positive integer (1 <= score <= 1000000). -----Output----- Output the sorted list of products in descending order of their urgency scores. If two products have the same urgency score, they should be ordered by their identifier in ascending order. -----Example----- Input: 5 101 5 305 3 205 5 402 2 104 5 Output: 101 5 104 5 205 5 305 3 402 2 Explanation: The products are ordered first by their urgency score in descending order. For products with the same urgency score of 5, the identifiers are sorted in ascending order.","solution":"def sort_products(products): Sorts the list of products based on the urgency score in descending order. If two products have the same urgency score, they are sorted by their identifier in ascending order. Args: products (list of tuples): List where each element is a tuple containing the product\'s identifier and urgency score. Returns: list of tuples: Sorted list of products. # Sort by urgency score descending, and by identifier ascending return sorted(products, key=lambda x: (-x[1], x[0]))"},{"question":"In a magical forest, there is a mage who can cast two types of spells: fireballs and ice spikes. However, there is a special mechanic that determines how these spells can be cast in sequence. Specifically, a fireball must always be followed by an ice spike or another fireball, and an ice spike must always be followed by a fireball or another ice spike. You are tasked with finding the number of valid sequences of spells the mage can cast, given a specific number of spells. For example, if the mage can cast 3 spells, the possible sequences are: 1. FFI 2. FIF 3. IFF 4. FII 5. IIF Note that \\"FFI\\" is valid since a fireball is followed by either a fireball or an ice spike, and \\"IIF\\" is valid since an ice spike is followed by either an ice spike or a fireball. Input format: The first line contains the number of test cases. Every test case contains a single integer N, which indicates the number of spells to be cast. Output format: Print the number of valid spell sequences for each test case modulo by 1000000007. Constraints: 1 ≤ Test Cases < 1001 1 ≤ N ≤ 1000000 SAMPLE INPUT 3 2 3 4 SAMPLE OUTPUT 4 5 11","solution":"MOD = 1000000007 def valid_spell_sequences(n): if n == 1: return 2 # \\"F\\", \\"I\\" dp = [0] * (n + 1) dp[1], dp[2] = 2, 4 # \\"F\\" or \\"I\\" for n == 1: [F, I], for n == 2: [FF, FI, IF, II] for i in range(3, n + 1): dp[i] = (dp[i-1] + dp[i-2]) % MOD return dp[n] def process_test_cases(test_cases): results = [] for n in test_cases: results.append(valid_spell_sequences(n)) return results # Input and Output Processing def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) test_cases = [int(data[i]) for i in range(1, T + 1)] results = process_test_cases(test_cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"During a renovation of an old library, workers found a very old diary with some mysterious writings. One of the pages had multiple lists of positive integers written in a particular order. Upon close inspection, it was found that these lists of integers were not just randomly written but followed a specific pattern. Your task is to determine if a given list of integers forms a non-decreasing sequence when looked at in reverse order. In other words, verify if reversing the input list results in a non-decreasing sequence. -----Input----- The first line of input data contains an integer t (1 leq t leq 200) — the number of test cases. Next, descriptions of t test cases follow. The first line of each test case contains a single integer n (1 leq n leq 100000) — the length of the list. The second line contains n space-separated positive integers. It is guaranteed that the sum of the values n over all test cases does not exceed 200000. -----Output----- For each of t test cases, print \\"YES\\" if the reversed list forms a non-decreasing sequence, otherwise print \\"NO\\". -----Examples----- Input 2 4 1 2 3 4 5 5 4 3 3 2 Output NO YES -----Note----- In the first test case, reversing the list gives [4, 3, 2, 1], which is not a non-decreasing sequence. In the second test case, reversing the list gives [2, 3, 3, 4, 5], which is a non-decreasing sequence.","solution":"def is_non_decreasing_when_reversed(t, test_cases): results = [] for case in test_cases: n, lst = case # Reverse the list reversed_lst = lst[::-1] # Check if it is non-decreasing is_non_decreasing = all(reversed_lst[i] <= reversed_lst[i + 1] for i in range(n - 1)) if is_non_decreasing: results.append(\\"YES\\") else: results.append(\\"NO\\") return results def process_input(input_data): lines = input_data.strip().split(\\"n\\") t = int(lines[0]) test_cases = [] current_line = 1 for _ in range(t): n = int(lines[current_line]) lst = list(map(int, lines[current_line + 1].split())) test_cases.append((n, lst)) current_line += 2 return t, test_cases"},{"question":"Anthony is cultivating a new type of plant and wants to analyze the growth pattern over a certain period. He has catalogued the plant’s height each day for several days and wants to determine how often the plant grows compared to the previous day. Given a list of integers representing the height of the plant over a number of days, calculate the number of days the plant height increased compared to the previous day. Input The first line of the input contains an integer n (1 ≤ n ≤ 100) — the number of days for which the heights are available. The second line contains n integers h_1, h_2, ..., h_n (0 ≤ h_i ≤ 10000) — the heights of the plant on each of the n days. Output Print a single integer — the number of days when the plant height increased compared to the previous day. Examples Input 5 1 2 2 3 5 Output 3 Input 4 10 9 8 7 Output 0 Note In the first example, the plant height increased on three occasions: from day 1 to day 2 (1 -> 2), from day 3 to day 4 (2 -> 3), and from day 4 to day 5 (3 -> 5). In the second example, the plant height never increased compared to the previous day.","solution":"def count_growth_days(n, heights): Returns the number of days the plant height increased compared to the previous day. :param n: integer, number of days :param heights: list of integers, heights of the plant over the days :return: integer, number of days of growth growth_days = 0 for i in range(1, n): if heights[i] > heights[i - 1]: growth_days += 1 return growth_days"},{"question":"You are given a string consisting of lowercase Latin letters. The task is to modify the string such that there are no two adjacent characters that are the same. If it is possible to modify the string to meet this requirement, output the modified string. If it is impossible, output \\"NO\\". You are allowed to rearrange the characters of the string but not remove any characters. -----Input----- The first line contains an integer t (1 le t le 100) — the number of test cases. Each of the next t lines contains a string s of length 1 le |s| le 1000 consisting of lowercase Latin letters. -----Output----- For each test case print the required output: Either \\"NO\\" if it is impossible to rearrange the string to meet the requirements, or the rearranged string if it is possible. If there are several correct answers, print any of them. -----Example----- Input 3 aabb aaab abb Output abab NO bab -----Note----- In the first test case, \\"abab\\" is a valid rearrangement as there are no two adjacent same characters. In the second test case, it is impossible to rearrange \\"aaab\\" to meet the requirements. In the third test case, \\"bab\\" is a possible rearrangement.","solution":"from collections import Counter import heapq def rearrange_string(s): Rearrange a string so that no two adjacent characters are the same. Returns the rearranged string if possible, otherwise returns \\"NO\\". # Count the frequency of each character char_count = Counter(s) # Use a max-heap to store characters, -count for max behavior with min-heap max_heap = [(-count, char) for char, count in char_count.items()] heapq.heapify(max_heap) prev_char = None prev_count = 0 result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) if prev_char is not None: heapq.heappush(max_heap, (prev_count, prev_char)) prev_char = char if count + 1 < 0 else None prev_count = count + 1 res_str = \'\'.join(result) if len(res_str) != len(s): return \\"NO\\" return res_str def process_test_cases(t, test_cases): results = [] for s in test_cases: results.append(rearrange_string(s)) return results"},{"question":"------ Problem Statement ------ Professor Egbert is planning an experiment with cell cultures. He has N distinct nutrient batches, each labeled with a unique integer from 0 to N-1. The batches need to be arranged in a sequence so that no batch appears at the same position as its original label - this arrangement is called a \\"derangement.\\" For example, for N = 3, the batches are labeled as {0, 1, 2}. The sequence [2, 0, 1] is a derangement because 2 is not in position 0, 0 is not in position 1, and 1 is not in position 2. Professor Egbert wants to find the number of possible derangements for given N. ------ Input ------ The first line of the input file contains an integer T, the number of test cases. Each of the following T lines contains a single integer N, representing the number of batches. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 20 ------ Output ------ For each test case output the number of derangements of a sequence of length N. ----- Sample Input 1 ------ 5 1 2 3 4 5 ----- Sample Output 1 ------ 0 1 2 9 44 ----- Explanation ------ Case 1. No valid derangement for N=1. Case 2. There is only one derangement for N=2: [1, 0]. Case 3. There are 2 derangements for N=3: [1, 2, 0] and [2, 0, 1]. Case 4. There are 9 valid derangements for N=4. Case 5. There are 44 valid derangements for N=5.","solution":"def derangements(n): Returns the number of derangements for given n if n == 0: return 1 # by definition, the derangement of an empty set is 1 if n == 1: return 0 # no derangement possible for a single element # dp[i] represents the number of derangements of `i` items dp = [0] * (n + 1) dp[0] = 1 # base case dp[1] = 0 # base case for i in range(2, n + 1): dp[i] = (i - 1) * (dp[i - 1] + dp[i - 2]) return dp[n] def solve(t, test_cases): results = [] for n in test_cases: results.append(derangements(n)) return results"},{"question":"Given an array of integers nums, return the largest integer k such that both k and -k exist in the array. If there is no such integer, return 0. Example 1: Input: nums = [3, 2, -2, 5, -3] Output: 3 Example 2: Input: nums = [1, 2, 3, -4] Output: 0 Note: The array length will be in the range of [1, 1000], and each integer nums[i] will be in the range of [-1e6, 1e6].","solution":"def find_largest_k(nums): Returns the largest integer k such that both k and -k exist in the array. If there is no such integer, return 0. num_set = set(nums) largest_k = 0 for num in nums: if -num in num_set: largest_k = max(largest_k, abs(num)) return largest_k"},{"question":"A startup company has launched a new routing device that routes data packets efficiently in a computer network. Each computer in the network can be thought of as a node, and the cable connecting two computers can be thought of as an edge. The network is represented as an undirected graph where there are `n` nodes and `m` undirected edges between them. The company\'s developers want to ensure that all nodes in the network remain connected even if some devices fail. Specifically, they want to find the minimum set of edges that, if added, would guarantee that every node in the network can still communicate with every other node, even if any one node fails. You need to write a piece of code to determine the minimum number of edges required to achieve this goal. **Input** The first line contains two integers, `n` (2 ≤ n ≤ 1000) and `m` (0 ≤ m ≤ 1000) — the number of nodes and the number of edges, respectively. Each of the next `m` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v) — representing an edge between nodes `u` and `v`. **Output** A single integer, the minimum number of edges needed to ensure that the network remains connected even if any one node fails. **Examples** **Input** 4 2 1 2 3 4 **Output** 3 **Input** 5 3 1 2 2 3 4 5 **Output** 2 **Note** In the first example, adding edges {1-3, 2-3, 1-4} ensures that the network is tolerant to any single node failure.","solution":"def find_min_edges_for_resilience(n, m, edges): from collections import defaultdict, deque def bfs(start, graph, visited): queue = deque([start]) visited.add(start) while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) # Initialize graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Check connected components visited = set() components = 0 for node in range(1, n + 1): if node not in visited: components += 1 bfs(node, graph, visited) # To make the graph 2-vertex-connected, when we have multiple components, # we need at least (components - 1) edges to connect them. return max(0, components - 1) # Example usage (uncomment to test) # n = 4 # m = 2 # edges = [(1, 2), (3, 4)] # print(find_min_edges_for_resilience(n, m, edges)) # Output: 3 # n = 5 # m = 3 # edges = [(1, 2), (2, 3), (4, 5)] # print(find_min_edges_for_resilience(n, m, edges)) # Output: 2"},{"question":"Write a function getMaxConsecutiveOnes that returns the maximum number of consecutive 1s in a list of 0s and 1s. The function should accept a list of integers as the parameter. E.g 1: For nums = [1, 1, 0, 1, 1, 1] result should be 3 because the maximum number of consecutive 1s is 3. E.g 2: For nums = [1, 0, 1, 1, 0, 1] result should be 2 because the maximum number of consecutive 1s is 2.","solution":"def getMaxConsecutiveOnes(nums): Returns the maximum number of consecutive 1s in the list nums. max_count = 0 count = 0 for num in nums: if num == 1: count += 1 else: max_count = max(max_count, count) count = 0 # Check once more in case the longest sequence is at the end of the list max_count = max(max_count, count) return max_count"},{"question":"*Alice recently discovered an ancient scroll that contains clues about a hidden treasure. The scroll mentions a challenging puzzle she needs to solve. Will you assist her in decoding the instructions?* You are given an integer array of size N. Determine the smallest positive integer that is not present in the array. ------ Input Format ------ - The first line of input will be a single integer T, the number of test cases. - Each test case starts with an integer N, the size of the array. - The next line contains N space-separated integers which represent the elements of the array. ------ Output Format ------ For each test case, output a single line containing the smallest positive integer that is not present in the array. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 -10^9 ≤ array[i] ≤ 10^9 ----- Sample Input 1 ------ 3 3 1 2 0 5 3 4 -1 1 1 -1 ----- Sample Output 1 ------ 3 2 1 ----- Explanation ------ Test case 1: The elements in the array are 1, 2, 0. The smallest positive integer not present in the array is 3. Test case 2: The elements in the array are 3, 4, -1, 1. The smallest positive integer not present in the array is 2. Test case 3: The single element in the array is -1. The smallest positive integer not present in the array is 1.","solution":"def smallest_missing_positive(T, test_cases): Returns the smallest positive integer that is not present in each of the arrays in the test cases. Parameters: - T (int): The number of test cases. - test_cases (list of tuples): Each tuple contains an integer representing the size of the array and the array itself. Returns: - list of int: The smallest positive integer not present in each of the arrays. results = [] for case in test_cases: N, arr = case arr_set = set(arr) smallest_missing = 1 while smallest_missing in arr_set: smallest_missing += 1 results.append(smallest_missing) return results"},{"question":"A space agency is planning to send a rover to explore a newly discovered planet, Codea. The planet is quite unique: its surface can be modeled as a 2D grid. The rover is supposed to navigate this grid starting from a given cell and reach another target cell. However, the surface of Codea is filled with obstacles, and the rover can only travel to adjacent cells (up, down, left, or right) if they are not obstacle cells. The rover also has a peculiar battery limitation: its battery only allows it to travel through a limited number of cells before it needs to recharge. Given the size of the grid, the starting position, the target position, the positions of obstacles, and the battery limit, write a program to determine if there is a path for the rover to reach the target position within the battery limit. If a path exists, output the least number of cells the rover needs to travel through to reach the target. If no such path exists, output -1. Input The input consists of the following space-separated values: n m x1 y1 x2 y2 b Followed by m lines each containing two integers x and y representing the position of an obstacle. - n (1 ≤ n ≤ 1000): the length of the grid\'s side (the grid is square-shaped). - m (0 ≤ m ≤ n*n): the number of obstacle cells. - x1, y1: the coordinates of the start cell (0 ≤ x1, y1 < n). - x2, y2: the coordinates of the target cell (0 ≤ x2, y2 < n). - b (1 ≤ b ≤ n*n): the battery limit. Output Output a single integer representing the least number of cells the rover needs to travel through to reach the target within the battery limit. If no such path exists, output -1. Example Input 5 3 0 0 4 4 8 1 0 1 1 1 2 Output 8 Explanation: The rover can travel from the start position (0,0) to the target position (4,4) while avoiding the obstacles at (1,0), (1,1), and (1,2) within 8 steps: (0,0) -> (0,1) -> (0,2) -> (0,3) -> (0,4) -> (1,4) -> (2,4) -> (3,4) -> (4,4).","solution":"from collections import deque def minimum_steps(n, m, x1, y1, x2, y2, b, obstacles): # creating the grid grid = [[0]*n for _ in range(n)] # marking obstacles in the grid for ox, oy in obstacles: grid[ox][oy] = 1 # directions array for moving in the grid directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS queue to store the current position and steps taken queue = deque([(x1, y1, 0)]) visited = set() visited.add((x1, y1)) while queue: x, y, steps = queue.popleft() if (x, y) == (x2, y2): return steps if steps >= b: continue for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == 0: visited.add((nx, ny)) queue.append((nx, ny, steps+1)) return -1"},{"question":"John has recently discovered his love for palindromes. A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward (ignoring spaces, punctuation, and capitalization). John is interested in finding the longest palindromic substring within a given string. Given a string s, find and return the longest palindromic substring in s. Note: For any edge cases like multiple palindromic substrings of the same maximum length, you may return any one of them. -----Input:----- - The input contains a single string s consisting of lowercase Latin letters. -----Output:----- - Print the longest palindromic substring found within the given input string s. -----Constraints:----- - 1 leq Length of string s leq 10^4 -----Sample Input:----- babad -----Sample Output:----- bab","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in the given string s. n = len(s) if n == 0: return \\"\\" # Initialize start and end indexes of the longest palindromic substring start = 0 max_length = 1 # Function to expand around the center and update start and max_length def expand_around_center(left, right): nonlocal start, max_length while left >= 0 and right < n and s[left] == s[right]: current_length = right - left + 1 if current_length > max_length: start = left max_length = current_length left -= 1 right += 1 # Iterate over each character and find the longest palindrome by expanding around the center for i in range(n): # Odd length palindromes (single character center) expand_around_center(i, i) # Even length palindromes (two character center) expand_around_center(i, i + 1) return s[start:start + max_length]"},{"question":"Shortest Palindrome Transformation A palindrome is a string that reads the same forward and backward. Given an input string, you need to transform it into a palindrome by adding characters to its end. Your task is to determine the length of the shortest palindromic string that can be achieved from the original string by appending characters to its end. -----Input format----- A single line containing a non-empty string s consisting only of lowercase alphabetic characters. -----Output format----- A single integer, the length of the shortest palindromic string that can be obtained by appending characters to the end of s. -----Test Data----- In all subtasks, 1 ≤ |s| ≤ 1000. -----Example----- Here are two sample inputs and outputs corresponding to the example above: -----Sample input 1----- abac -----Sample output 1----- 5 -----Sample input 2----- race -----Sample output 2----- 7 Explanation: - In the first example, by appending \'a\' to the end of \'abac\', we get \'abaca\', which is a palindrome. Shortest length is 5. - In the second example, by appending \'ecarace\' to the end of \'race\', we get \'racecar\', which is a palindrome. Shortest length is 7. Note: Your program should not print anything other than what is specified in the output format. Please remove all diagnostic print statements before making your final submission. A program with extraneous output will be treated as incorrect!","solution":"def shortest_palindromic_length(s): This function finds the length of the shortest palindromic string by appending characters to the end of the given string `s`. def is_palindrome(x): return x == x[::-1] if is_palindrome(s): return len(s) for i in range(len(s)): substring = s[:len(s)-i] if is_palindrome(substring): return len(s) + i # If no palindrome detected (which is unlikely given constraints) return 2 * len(s) - 1"},{"question":"Given an array mathbf{A} of N integers, you are asked to process Q queries. Each query contains two integers mathbf{L} and mathbf{R} (representing a subarray from index L to R) and an integer mathbf{K}. Your task is to determine the number of pairs of indices (i, j) such that L leq i < j leq R and the greatest common divisor (GCD) of mathbf{A[i]} and mathbf{A[j]} is greater than or equal to K. Input Format The first line contains two space-separated integers N (number of elements in the array) and Q (number of queries). The second line contains N space-separated integers representing the elements of array mathbf{A}. Each of the subsequent Q lines contains three space-separated integers, mathbf{L}, mathbf{R}, and mathbf{K}. Constraints 1 leq N, Q leq 100000 1 leq mathbf{A[i]} leq 10^9 1 leq mathbf{L} leq mathbf{R} leq N 1 leq K leq 10^9 Output Format For each query, print the number of pairs (i, j) that satisfy the given condition on a new line. Sample Input 5 3 10 15 25 20 30 1 3 5 2 5 10 1 5 15 Sample Output 3 2 1 Explanation Q_1: Subarray is [10, 15, 25]. The pairs and their GCDs are as follows: (10, 15) -> GCD = 5 (10, 25) -> GCD = 5 (15, 25) -> GCD = 5 All three pairs satisfy the condition, so the answer is 3. Q_2: Subarray is [15, 25, 20, 30]. The pairs and their GCDs are as follows: (15, 20) -> GCD = 5 (15, 25) -> GCD = 5 (15, 30) -> GCD = 15 (25, 20) -> GCD = 5 (25, 30) -> GCD = 5 (20, 30) -> GCD = 10 Only two pairs (15, 30) and (20, 30) have GCD >= 10, so the answer is 2. Q_3: Subarray is [10, 15, 25, 20, 30]. The pairs with GCD >= 15 are: (15, 30) -> GCD = 15 So the answer is 1.","solution":"import math from collections import defaultdict def count_gcd_pairs(N, Q, A, queries): def gcd(x, y): while y: x, y = y, x % y return x results = [] for query in queries: L, R, K = query L -= 1 # Convert to zero-based index R -= 1 # Convert to zero-based index gcd_count = defaultdict(int) for i in range(L, R + 1): for j in range(i + 1, R + 1): if gcd(A[i], A[j]) >= K: gcd_count[(i, j)] += 1 results.append(sum(gcd_count.values())) return results # Sample Input N = 5 Q = 3 A = [10, 15, 25, 20, 30] queries = [(1, 3, 5), (2, 5, 10), (1, 5, 15)] print(count_gcd_pairs(N, Q, A, queries))"},{"question":"Ivan is a teacher preparing students for a programming contest. To improve their problem-solving skills, he gives them various challenges. One day, he decided to test their understanding of arrays and subarrays. He presented the following problem: You are given an array `A` consisting of `N` integers. Your task is to find the length of the longest contiguous subarray where all elements are distinct. -----Input----- The first line of input contains an integer N~ (1 leq N leq 100000), the length of the array. The second line contains `N` integers A_i~ (1 leq A_i leq 10^9) representing the elements of the array. -----Output----- Output the length of the longest contiguous subarray with all distinct elements. -----Examples----- Sample Input 1: 5 1 2 3 4 5 Sample Output 1: 5 Sample Input 2: 7 1 2 2 3 4 4 5 Sample Output 2: 3 Sample Input 3: 4 1 1 1 1 Sample Output 3: 1","solution":"def length_of_longest_subarray_with_distinct_elements(N, A): Given an array A consisting of N integers, this function finds the length of the longest contiguous subarray where all elements are distinct. Args: N (int): The length of the array. A (list): List of integers representing the elements of the array. Returns: int: The length of the longest contiguous subarray with all distinct elements. # Dictionary to store the last positions of elements last_seen = {} max_length = 0 start = 0 for end in range(N): if A[end] in last_seen and last_seen[A[end]] >= start: start = last_seen[A[end]] + 1 last_seen[A[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Alyssa loves watching intervals of sunlight throughout the day. She decided to measure the interval times multiple times in a single day. Her goal is to find out the longest continuous interval of sunlight seen in that day. You are provided with n start and end times of sunlight intervals in a day. Implement a function that finds the longest continuous interval of sunlight seen. Input The first line contains the integer n (1 ≤ n ≤ 105) — the number of intervals of sunlight. The next n lines each contain two integers si and ei (0 ≤ si < ei ≤ 109) — the start and end times of the sunlight interval. Output Print two integers representing the start and end time of the longest continuous sunlight interval. If there are multiple intervals with the same length, print the one that occurs earliest in the day. Examples Input 3 1 5 10 15 5 10 Output 1 15 Input 4 1 3 2 6 8 10 9 11 Output 1 6 Input 2 1 2 2 3 Output 1 3 Note In the first example, the intervals \\"1 5\\" and \\"5 10\\" and \\"10 15\\" can be combined into a continuous interval \\"1 15\\". In the second example, the intervals \\"1 3\\" and \\"2 6\\" can be combined into a continuous interval \\"1 6\\". Intervals \\"8 10\\" and \\"9 11\\" can be combined into \\"8 11\\", but \\"1 6\\" is longer than \\"8 11\\". In the third example, the intervals \\"1 2\\" and \\"2 3\\" can be combined into \\"1 3\\".","solution":"def longest_continuous_sunlight(n, intervals): intervals.sort() max_interval = (0, 0) current_start, current_end = intervals[0] for i in range(1, n): start, end = intervals[i] if start <= current_end: current_end = max(current_end, end) else: if (current_end - current_start) > (max_interval[1] - max_interval[0]): max_interval = (current_start, current_end) current_start, current_end = start, end if (current_end - current_start) > (max_interval[1] - max_interval[0]): max_interval = (current_start, current_end) return max_interval"},{"question":"Given a string, determine the minimum number of changes required to make it a palindrome. A palindrome is a string that reads the same forward and backward. You can modify the given string by inserting, deleting, or replacing characters. Function Signature: ```python def min_changes_to_palindrome(s: str) -> int: pass ``` **Examples** ```python min_changes_to_palindrome(\\"race\\") # returns 2 => change \\"race\\" to \\"e race\\" or \\"racec ar\\" min_changes_to_palindrome(\\"madam\\") # returns 0 => \\"madam\\" is already a palindrome min_changes_to_palindrome(\\"abcbxa\\") # returns 1 => change \\"abcbxa\\" to \\"abcb ba\\" ``` **Constraints** - The length of the string `s` is `1 <= len(s) <= 1000`. - The string `s` consists of only lowercase English letters. **Explanation** In the given examples: - For the string `race`, the minimum changes required can either be achieved by inserting \'e\' at the beginning, making it \\"erace\\", or changing \'c\' to \'r\' followed by inserting \'e\' at the end, making it \\"racecar\\". - For the string `madam`, no changes are required because it is already a palindrome. - For the string `abcbxa`, you can change \'x\' to \'b\', making it \\"abcb ba\\".","solution":"def min_changes_to_palindrome(s: str) -> int: n = len(s) dp = [[0] * n for _ in range(n)] for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] else: dp[i][j] = 1 + min(dp[i + 1][j], dp[i][j - 1], dp[i + 1][j - 1]) return dp[0][n - 1]"},{"question":"You are asked to build a function that decompresses a string according to the following rules: 1. The string will contain characters, digits, square brackets (\'[\' and \']\') and nested brackets. 2. The characters between the brackets need to be repeated as many times as the digits before the brackets indicate. 3. You can assume input format will always be valid, e.g., no need to check for input format correctness. Your task is to implement a function `decompress_string(s)`, which takes a compressed string `s` as an input, and outputs the decompressed string. # Function Signature: ```python def decompress_string(s: str) -> str: ``` # Input: - A single string `s` containing digits, characters, and square brackets (\'[\' and \']\'). (1 ≤ |s| ≤ 1000) # Output: - A single string representing the decompressed version of the input string. # Examples: Example 1: ```python decompress_string(\\"3[a]2[bc]\\") ``` Output: ``` \\"aaabcbc\\" ``` Example 2: ```python decompress_string(\\"3[a2[c]]\\") ``` Output: ``` \\"accaccacc\\" ``` Example 3: ```python decompress_string(\\"2[abc]3[cd]ef\\") ``` Output: ``` \\"abcabccdcdcdef\\" ``` Example 4: ```python decompress_string(\\"abc3[cd]xyz\\") ``` Output: ``` \\"abccdcdcdxyz\\" ``` # Explanation: - In the first example, the compressed string \\"3[a]2[bc]\\" means repeat \'a\' 3 times followed by \'bc\' repeated 2 times. - In the second example, \\"3[a2[c]]\\" means repeat \\"a2[c]\\" 3 times where \\"2[c]\\" means \'cc\'. - In the third example, \\"2[abc]3[cd]ef\\" means repeat \'abc\' 2 times, \'cd\' 3 times followed by \'ef\'. - In the fourth example, \\"abc3[cd]xyz\\" means \'abc\' followed by \'cd\' repeated 3 times followed by \'xyz\'.","solution":"def decompress_string(s): stack = [] current_num = 0 current_str = \'\' for char in s: if char.isdigit(): current_num = current_num * 10 + int(char) elif char == \'[\': stack.append(current_str) stack.append(current_num) current_str = \'\' current_num = 0 elif char == \']\': num = stack.pop() prev_str = stack.pop() current_str = prev_str + num * current_str else: current_str += char return current_str"},{"question":"Neha is an avid collector of antique books. She loves organizing her collection in various ways and wants to develop a program to aid her in creating different permutations of her books. Given a list of books she owns, she wants a way to rearrange them into distinct sequences where no book appears more than once in any of the sequences. Write a function that takes Neha\'s list of books and outputs all unique permutations of the books in lexicographical order. The list of books will only contain unique book names and will not exceed 7 books. -----Input----- The input consists of a single line containing space-separated strings representing the book names. Each book name is guaranteed to be unique and consist of lower-case alphabets only. The length of each book name is between 1 and 10 characters, inclusive. The total number of books will not exceed 7. -----Output----- Print all unique permutations of the book names in lexicographical order, each permutation on a new line. -----Examples----- Sample Input 1: red blue green Sample Output 1: blue green red blue red green green blue red green red blue red blue green red green blue Sample Input 2: mystery fantasy thriller Sample Output 2: fantasy mystery thriller fantasy thriller mystery mystery fantasy thriller mystery thriller fantasy thriller fantasy mystery thriller mystery fantasy","solution":"from itertools import permutations def permute_books(book_list): Returns all unique permutations of the books in lexicographical order. book_list = sorted(book_list) # Ensure the input list is sorted lexicographically perm = permutations(book_list) unique_permutations = list(dict.fromkeys(perm)) # Remove duplicate permutations return unique_permutations def print_permutations(book_str): Print all unique permutations of the input books in lexicographical order. book_list = book_str.split() permutations_list = permute_books(book_list) for perm in permutations_list: print(\' \'.join(perm))"},{"question":"Write a program that simulates a shopping list. You will repeatedly receive input indicating items to add to the shopping list, remove from the shopping list, or to print the current state of the shopping list. The program should be able to handle up to 100 operations. Each command will be one of the following: - ADD item_name: Adds the item to the shopping list. If the item already exists, do nothing. - REMOVE item_name: Removes the item from the shopping list. If the item does not exist, do nothing. - PRINT: Prints the current shopping list in alphabetical order, with each item on a new line. When PRINT command is executed, if the list is empty, it should print the string \\"EMPTY\\". Input The input consists of a series of commands. Each command is on a separate line and will either be \\"ADD item_name\\", \\"REMOVE item_name\\", or \\"PRINT\\". The input ends with EOF. The item_name will be a string without spaces. Output For each PRINT command, output the current shopping list in alphabetical order, with each item on a new line. If the list is empty, output \\"EMPTY\\". Example Input ``` ADD milk ADD bread ADD butter PRINT REMOVE butter REMOVE fruit PRINT REMOVE bread PRINT REMOVE milk PRINT ``` Output ``` bread butter milk bread milk milk EMPTY ```","solution":"def shopping_list(commands): Simulates a shopping list based on the given commands. Parameters: commands (list of str): A list of commands to process the shopping list. Returns: list of str: A list of strings representing the output of each PRINT command. shopping_set = set() result = [] for command in commands: if command.startswith(\\"ADD \\"): item = command[4:] shopping_set.add(item) elif command.startswith(\\"REMOVE \\"): item = command[7:] shopping_set.discard(item) elif command == \\"PRINT\\": if shopping_set: sorted_list = sorted(shopping_set) result.append(\\"n\\".join(sorted_list)) else: result.append(\\"EMPTY\\") return result"},{"question":"You are given a special kind of matrix, which we will call an \\"X-Matrix\\". An X-Matrix of size N is defined as follows: - It has exactly 2*N - 1 rows and 2*N - 1 columns. - The cell at the intersection of the N-th row and the N-th column (the center of the matrix) is 1. - All the cells in the diagonals that pass through this central cell also contain 1s. - All other cells in the matrix contain 0s. Given an integer N, generate and print the X-Matrix of size N. -----Constraints----- - 1 leq N leq 50 -----Input----- Input is given from Standard Input in the following format: N -----Output----- Output the X-Matrix of size N. Each row of the matrix should be printed on a new line and the numbers in each row should be separated by a single space. -----Sample Input----- 2 -----Sample Output----- 1 0 1 0 1 0 1 0 1 -----Sample Input----- 3 -----Sample Output----- 1 0 0 0 1 0 1 0 1 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 1","solution":"def generate_x_matrix(N): Generates an X-Matrix of size N. Args: N (int): Size of the matrix Returns: List[List[int]]: The generated X-Matrix as a 2D list size = 2 * N - 1 matrix = [[0] * size for _ in range(size)] for i in range(size): matrix[i][i] = 1 matrix[i][size - 1 - i] = 1 return matrix def print_x_matrix(matrix): Prints the X-Matrix Args: matrix (List[List[int]]): The X-Matrix to be printed for row in matrix: print(\' \'.join(map(str, row))) # Example usage: # N = int(input().strip()) # matrix = generate_x_matrix(N) # print_x_matrix(matrix)"},{"question":"Serval is studying at a kindergarten and just received an unusual snack: a collection of n candies. Each candy has a sweetness level denoted by an integer value. Serval\'s task is to split these candies into two non-empty subsets such that the absolute difference between the sum of sweetness levels in the two subsets is minimized. As a programming enthusiast, you are asked to write a program to assist Serval in this endeavor. Your goal is to determine the minimum absolute difference possible when the candies are split into two subsets. -----Input----- The first line contains a single integer n (2 leq n leq 100) — the number of candies. The second line contains n space-separated integers a_1, a_2, ldots, a_n (1 leq a_i leq 1000) — the sweetness levels of the candies. -----Output----- Print a single integer — the minimum absolute difference between the sums of the two subsets. -----Examples----- Input 3 8 4 5 Output 1 Input 4 1 1 1 1 Output 0 Input 5 3 1 4 9 2 Output 1 -----Note----- In the first example, we can split the candies into two subsets {8, 4} and {5} or {8, 5} and {4}. The sums are 12 and 5 or 13 and 4; both give a difference of 1, which is the minimum. In the second example, we can split the candies in many ways. For instance, into subsets {1, 1} and {1, 1}. The sums are both 2, and the difference is 0. In the third example, we can split the candies into two subsets {3, 4, 2} and {1, 9}. The sums are 9 and 10, and the difference is 1, which is the minimum.","solution":"def min_subset_difference(n, sweetness_levels): total_sum = sum(sweetness_levels) half_sum = total_sum // 2 dp = [0] * (half_sum + 1) for sweetness in sweetness_levels: for i in range(half_sum, sweetness - 1, -1): dp[i] = max(dp[i], dp[i - sweetness] + sweetness) subset1_sum = dp[half_sum] subset2_sum = total_sum - subset1_sum return abs(subset2_sum - subset1_sum)"},{"question":"You are given an array of unique integers where each element can be positive or negative. Your task is to find the smallest positive missing integer that does not exist in the array. Write a function that returns this smallest positive missing integer. Function Description Complete the `findSmallestMissingPositive` function in the editor below. `findSmallestMissingPositive` has the following parameters(s): - int arr[]: an array of unique integers Returns int: the smallest positive missing integer Input Format The first line contains an integer n denoting the number of elements in the array. The second line contains n unique space-separated integers of the array arr. Constraints 1 leq n leq 10^5 -10^6 leq arr[i] leq 10^6 Example Input 5 3 4 -1 1 2 Output 5 Explanation The integers 1, 2, 3, and 4 are present in the array, so the smallest positive missing integer is 5. Example Input 3 1 2 0 Output 3 Explanation The integers 1 and 2 are present in the array, but 3 is missing, so the smallest positive missing integer is 3. Function Signature ```python def findSmallestMissingPositive(arr: List[int]) -> int: pass ```","solution":"from typing import List def findSmallestMissingPositive(arr: List[int]) -> int: n = len(arr) # Create a set of all positive numbers in the array positives = set(x for x in arr if x > 0) # Start checking from 1 upwards to find the smallest missing positive for i in range(1, n + 2): if i not in positives: return i"},{"question":"Two strings **A** and **B** are called isomorphic if there exists a one-to-one correspondence (a bijective mapping) between the characters of **A** and **B** such that for every character in **A**, there is a corresponding character in **B**. This means that replacing every character in **A** with its corresponding character in **B** (or vice versa) results in equal strings. Write a function that determines if two given strings **A** and **B** are isomorphic. # Input - Two strings **A** and **B** consisting of lowercase letters. - Both strings have lengths between 1 and 100,000, inclusive. # Output - Return `True` if the strings are isomorphic, otherwise return `False`. # Function Signature ```python def are_isomorphic(A: str, B: str) -> bool: # Your code here ``` # Examples Example 1 Input: ```python A = \\"egg\\" B = \\"add\\" ``` Output: ```python True ``` Example 2 Input: ```python A = \\"foo\\" B = \\"bar\\" ``` Output: ```python False ``` Example 3 Input: ```python A = \\"paper\\" B = \\"title\\" ``` Output: ```python True ``` Example 4 Input: ```python A = \\"abca\\" B = \\"zbyz\\" ``` Output: ```python True ``` # Note - Example 1: There\'s a one-to-one correspondence: \'e\' -> \'a\', \'g\' -> \'d\' - Example 2: No such one-to-one correspondence exists. - Example 3: \'p\' <-> \'t\', \'a\' <-> \'i\', \'e\' <-> \'l\', \'r\' <-> \'e\' - Example 4: \'a\' <-> \'z\', \'b\' <-> \'b\', \'c\' <-> \'y\'","solution":"def are_isomorphic(A: str, B: str) -> bool: Determines if two given strings A and B are isomorphic. if len(A) != len(B): return False map_A_to_B = {} map_B_to_A = {} for a, b in zip(A, B): if a in map_A_to_B: if map_A_to_B[a] != b: return False else: map_A_to_B[a] = b if b in map_B_to_A: if map_B_to_A[b] != a: return False else: map_B_to_A[b] = a return True"},{"question":"You are given an integer array `nums` sorted in non-decreasing order. Another array `queries` consists of `q` integers where each integer represents a target value. For each target in `queries`, you need to find the minimum range in `nums` that contains the target value at least twice. If there is no such range for a target, return `[-1, -1]`. Otherwise, return the start and end indices of the range (0-based). Note: The range `[i, j]` is defined such that `nums[i] = nums[j]` and there are no other indices `k` in between `i` and `j` where `nums[k] = nums[i]`. # Input - The first line contains two integers `n` and `q` (1 ≤ `n`, `q` ≤ 100000): the size of the `nums` array and the size of the `queries` array. - The second line contains `n` integers, `nums[i]` (-10^9 ≤ `nums[i]` ≤ 10^9) which are sorted in non-decreasing order. - The third line contains `q` integers, `queries[i]` (-10^9 ≤ `queries[i]` ≤ 10^9) representing the target values. # Output - For each query, output a pair of integers representing the start and end indices of the minimum range in `nums` that contains the target value at least twice. If there\'s no such range, output `[-1, -1]`. # Examples Input: ``` 10 3 1 2 2 3 4 5 5 5 6 6 2 5 9 ``` Output: ``` [1, 2] [5, 6] [-1, -1] ``` # Note For the first query with target `2`: - The minimum range that contains `2` at least twice is `[1, 2]`. For the second query with target `5`: - The minimum range that contains `5` at least twice is `[5, 6]`. For the third query with target `9`: - The target `9` does not appear in the array, so the output is `[-1, -1]`.","solution":"def find_minimum_range(nums, queries): For each target in queries, find the minimum range in nums that contains the target value at least twice. from collections import defaultdict # Create a dictionary to store the indices of each value in nums index_map = defaultdict(list) for idx, num in enumerate(nums): index_map[num].append(idx) result = [] for target in queries: if target in index_map and len(index_map[target]) > 1: # If the target is found more than once, get the smallest range result.append([index_map[target][0], index_map[target][1]]) else: # Otherwise, return [-1, -1] result.append([-1, -1]) return result"},{"question":"In a warehouse, items are stored on standardized pallets. Each pallet can hold a certain maximum weight, and the warehouse has a stock of items each with a specific weight. You need to determine the minimum number of pallets required to store all items without exceeding the weight limit of any pallet. Each pallet can hold items whose total weight does not exceed a given maximum weight limit. ----- Input ----- The first line contains a single integer t (1 le t le 1000) — the number of test cases. For each test case, the first line contains an integer n (1 le n le 100) — the number of items and an integer m (1 le m le 10^9) — the maximum weight limit of each pallet. The second line contains n integers w_i (1 le w_i le 10^9) — the weights of the items. ----- Output ----- For each test case, print a single integer — the minimum number of pallets required. ----- Examples ----- Input 3 3 10 5 5 5 4 10 6 5 3 2 5 15 5 5 5 7 8 Output 2 2 2 ----- Note ----- In the first test case: - You can place the first and second items on one pallet, and the third item on another pallet. In the second test case: - One way to do it is to place the first item on one pallet and the others on another pallet. In the third test case: - One way to do it is to place the first three items on one pallet, and the last two items on another pallet.","solution":"def min_pallets(t, test_cases): Determines the minimum number of pallets required to store all items without exceeding the weight limit. :param t: int, number of test cases :param test_cases: list of tuples, each containing two elements: - a tuple of two integers (n, m) where n is the number of items and m is the max weight limit of each pallet, - a list of integers, representing the weights of the items. :return: List of integers, each representing the minimum number of pallets required for the respective test cases. results = [] for case in test_cases: (n, m), weights = case weights.sort(reverse=True) pallets = 0 current_weight = 0 for weight in weights: if current_weight + weight > m: pallets += 1 current_weight = weight else: current_weight += weight if current_weight > 0: pallets += 1 results.append(pallets) return results"},{"question":"Given a positive integer n, generate the nth term in the concatenated sequence of all previous natural numbers. The nth term is zero-based indexing. Example 1: Input: n = 5 Output: \'5\' Explanation: The sequence of numbers concatenated is \'012345\', so the 5th term is \'5\'. Example 2: Input: n = 15 Output: \'2\' Explanation: The sequence of numbers concatenated is \'01234567891011121314\', so the 15th term is \'2\'. Your Task: You don\'t need to read input or print anything. Complete the function findNthChar() which takes n as an input parameter and returns a string that is the nth character in the concatenated sequence. Expected Time Complexity: O(k) where k is the length of concatenated sequence up to the nth term. Expected Auxiliary Space: O(1) Constraints: 0<= n <=1000","solution":"def findNthChar(n): Returns the nth character in the concatenated sequence of all previous natural numbers. concatenated = \\"\\" i = 0 while len(concatenated) <= n: concatenated += str(i) i += 1 return concatenated[n]"},{"question":"Given an array of integers, your task is to determine whether it is possible to rearrange the elements of the array in such a way that the array becomes a palindrome. A palindrome is a sequence that reads the same backward as forward. If it is possible, provide an example of such a permutation. If it is not possible, print \\"NO\\". -----Input----- The first line contains a single integer n (1 ≤ n ≤ 100) — the size of the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100) — the elements of the array. -----Output----- If it is possible to rearrange the array into a palindrome, print \\"YES\\" followed by a string of the rearranged array. If multiple answers exist, output any of them. If it is not possible to rearrange the array into a palindrome, print \\"NO\\". -----Examples----- Input 5 1 2 3 2 1 Output YES 1 2 3 2 1 Input 4 1 2 3 4 Output NO","solution":"from collections import Counter def can_form_palindrome(n, arr): Determines if it is possible to rearrange the elements of the array to form a palindrome. If possible, returns a valid palindrome permutation. If not, returns \\"NO\\". :param n: Integer, the number of elements in the array. :param arr: List of integers, the array elements. :return: Tuple (String, List of integers/None) where the string is either \'YES\' or \'NO\', and the list is a valid palindrome permutation if possible, None otherwise. counter = Counter(arr) odd_count = sum(1 for count in counter.values() if count % 2 != 0) if odd_count > 1: return \\"NO\\", None first_half = [] second_half = [] middle = None for num, count in counter.items(): if count % 2 != 0: middle = [num] * count else: half_count = count // 2 first_half.extend([num] * half_count) second_half.extend([num] * half_count) if middle is not None: first_half.extend(middle) palindrome = first_half + second_half[::-1] return \\"YES\\", palindrome # Function to format output as specified in the question def format_output(n, arr): result, permutation = can_form_palindrome(n, arr) if result == \\"NO\\": return result else: return result + \\"n\\" + \' \'.join(map(str, permutation))"},{"question":"Given a set of N integers, you need to perform a series of Q operations on it. There are two types of operations: 1. Add a value X to all the elements in the array. 2. Retrieve the value of a specific element in the array, considering all the additions that have been applied up to that point. Implement a solution to carry out these operations efficiently. Constraints: - ( 1 leq N, Q leq 10^5 ) - ( -10^9 leq a_i, X leq 10^9 ) (where ( a_i ) is an element in the initial array and ( X ) is the value to be added) Input: The first line contains two integers N and Q, the size of the array and the number of operations. The second line contains N integers, the initial values of the array. The next Q lines describe the operations in the format: - \\"1 X\\" (where X is the value to add to all elements) - \\"2 i\\" (where i is the index of the element to retrieve, 1-based indexing) Output: For each operation of type 2, output the value of the specified element considering all the additions applied up to that point. Example: Input: ``` 5 5 1 2 3 4 5 1 10 2 3 1 -3 2 1 2 5 ``` Output: ``` 13 8 12 ```","solution":"def perform_operations(N, Q, array, operations): addition_sum = 0 output = [] for operation in operations: if operation[0] == \'1\': # Add operation addition_sum += int(operation[1]) elif operation[0] == \'2\': # Retrieve operation idx = int(operation[1]) - 1 # Convert to 0-based index result = array[idx] + addition_sum output.append(result) return output"},{"question":"Bessie the cow just invented a new card game to play with her friends during their daily leisure time at the barn. Bessie uses a deck of cards where each card has a unique positive integer value printed on it. The game is played as follows: Bessie shuffles the deck and deals the cards in n piles, where the i-th pile contains exactly ai cards. Bessie then proceeds to pick exactly one card from each pile. Bessie wants to make sure that the total sum of the values of the chosen cards is exactly s. If it\'s impossible to pick one card from each pile such that their values sum to s, Bessie gets upset and moos loudly. Your task is to determine if Bessie can pick one card from each pile such that their values sum to s. If it\'s possible, print \\"YES\\", and if it\'s not, print \\"NO\\". Input The first line of the input contains two integers n and s (1 ≤ n ≤ 10, 1 ≤ s ≤ 1 000 000). The i-th (1 ≤ i ≤ n) of the next n lines contains an integer ki (1 ≤ ki ≤ 20), the number of cards in the i-th pile, followed by ki integers denoting the values of the cards in the i-th pile. Each value is a positive integer. Output Print \\"YES\\" if it\'s possible to pick one card from each pile such that their values sum to s, otherwise print \\"NO\\". Examples Input 3 15 3 8 5 2 4 12 7 4 3 2 6 1 Output YES Input 2 10 2 7 3 3 4 5 6 Output NO Note In the first sample case, one way to achieve a sum of 15 is by picking the card values 5 from the first pile, 7 from the second pile, and 3 from the third pile (5 + 7 + 3 = 15). In the second sample case, there is no combination of one card from each pile that sums to 10.","solution":"from itertools import product def can_sum_to_s(n, s, piles): # Generate all possible combinations of picking one card from each pile all_combinations = product(*piles) # Check if any combination sums to s for combination in all_combinations: if sum(combination) == s: return \\"YES\\" return \\"NO\\""},{"question":"A swarm of bees is forming a honeycomb to store their honey. Each honeycomb cell is hexagonal, and they arrange the cells in concentric hexagonal rings around a central cell. The first ring consists of the central cell only, the second ring adds 6 cells surrounding the central cell, the third ring adds 12 cells surrounding the second ring, and so on. Given an integer n, determine the total number of cells in a honeycomb with n concentric rings, including the central cell. -----Input----- The input consists of a single integer n (1 ≤ n ≤ 10^6), representing the number of concentric rings in the honeycomb, including the central cell as the first ring. -----Output----- Output a single integer, the total number of honeycomb cells in n concentric rings. -----Examples----- Input 1 Output 1 Input 2 Output 7 Input 3 Output 19 -----Note----- In the first example, with 1 ring, there is only 1 cell (the central cell). In the second example, with 2 rings, there are 1 (central) + 6 (first surrounding ring) = 7 cells. In the third example, with 3 rings, there are 1 (central) + 6 (first ring) + 12 (second ring) = 19 cells.","solution":"def total_honeycomb_cells(n): Calculate the total number of honeycomb cells in n concentric rings. Parameters: n (int): Number of concentric rings, including the central cell Returns: int: Total number of cells in the honeycomb if n == 1: return 1 return 1 + 3 * n * (n - 1)"},{"question":"Given a list of integers, determine if there exists a subset of the list such that the sum of the subset is equal to a given target value. Each test case consists of two lines: - The first line contains two integers, N (the number of elements in the list) and M (the target value). - The second line contains N integers, representing the list of numbers. For each test case, print \\"YES\\" if there exists such a subset and \\"NO\\" otherwise. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 20 0 ≤ M ≤ 100 -10^3 ≤ A[i] ≤ 10^3 for 0 ≤ i < N SAMPLE INPUT 3 5 9 3 34 4 12 5 3 0 7 -3 2 4 15 1 2 3 4 SAMPLE OUTPUT YES YES NO Explanation: For the first test case: Subset {4, 5} adds up to 9. For the second test case: Subset {-3, 3} adds up to 0. For the third test case: No subset adds up to 15.","solution":"def subset_sum_exists(n, m, nums): Determines if there exists a subset of the list `nums` such that the sum of the subset is equal to `m`. Parameters: n (int): The number of elements in the list. m (int): The target sum value. nums (list): The list of integers. Returns: str: \\"YES\\" if such a subset exists, \\"NO\\" otherwise. # Helper function to check subset sum def subset_sum(nums, target, index): if target == 0: return True if index >= len(nums) or target < 0: return False # Include the number at index include = subset_sum(nums, target - nums[index], index + 1) # Exclude the number and move to the next exclude = subset_sum(nums, target, index + 1) return include or exclude return \\"YES\\" if subset_sum(nums, m, 0) else \\"NO\\" def handle_multiple_cases(tc): Handles multiple test cases. Parameters: tc (list of tuples): Each tuple contains (n, m, nums) representing a test case. Returns: list: List of strings \\"YES\\" or \\"NO\\" for each test case. results = [] for t in tc: n, m, nums = t results.append(subset_sum_exists(n, m, nums)) return results"},{"question":"There is a circular array of length N: A_1, A_2, ..., A_N. The array is circular, meaning that after the element A_N, the next element is A_1. The circular array consists of positive integers. On this array, you can perform the following operation: * Choose any pair of adjacent elements and replace the larger element with their sum. Find the minimum number of operations required to make all elements of the array equal. It is guaranteed that this is always possible under the given constraints. Constraints * 2 leq N leq 100000 * 1 leq A_i leq 1000 Input Input is given from Standard Input in the following format: N A_1 A_2 ... A_N Output Print the minimum number of operations required. Examples Input 4 3 6 4 2 Output 3 Input 5 5 5 5 5 5 Output 0 Input 3 1 10 1 Output 2","solution":"def min_operations_to_make_equal(N, A): total_sum = sum(A) target = total_sum // N if all(x == target for x in A): return 0 current_sum = 0 operations = 0 for value in A: current_sum += value if current_sum == (operations + 1) * target: continue operations += 1 return operations"},{"question":"Imagine you are a scientist analyzing data from biological experiments. Each experiment produces a string of lowercase alphabets representing some genetic sequence. However, due to an error in recording the sequence, some unwanted characters `x` were introduced into the sequences. You want to clean up these sequences. You need to write a program that removes every occurrence of the character `x` from a given string and returns the cleaned sequence. Constraints: * 1 ≦ |S| ≦ 10^5 * S consists of lowercase letters and the character `x`. Input: The input is given from Standard Input in the following format: S Output: Print the cleaned sequence after removing all \'x\' characters. Examples: Input: abxcxdex Output: abcde Input: xxhelloxxworldxx Output: helloworld Input: xxxxx Output:","solution":"def remove_x(sequence): Removes all occurrences of the character \'x\' from the given string sequence. Parameters: sequence (str): A string consisting of lowercase letters and possibly \'x\' characters. Returns: str: The cleaned string with all \'x\' characters removed. return sequence.replace(\'x\', \'\')"},{"question":"You are given a directed graph with nodes labeled from 0 to n-1. Each directed edge has a travel time associated with it. Your task is to determine if there is a path from the start node to the end node that passes through a specific required node m and provide the total travel time of the shortest such path. Constraints * 2 leq n leq 100 * 1 leq e leq 1000 * 0 leq u, v, s, t, m < n * 1 leq w leq 1000 Input The input is given in the following format: n e s t m u_1 v_1 w_1 u_2 v_2 w_2 ... u_e v_e w_e - n and e are the number of nodes and edges, respectively. - s is the start node. - t is the end node. - m is the required node that the path must pass through. - u_i, v_i, and w_i represent the source node, destination node, and the travel time for each edge, respectively. Output Print the total travel time of the shortest path from the start node to the end node that passes through the required node. If no such path exists, print -1. Example Input 5 7 0 4 2 0 1 10 0 2 3 1 2 1 1 3 2 2 3 8 2 4 5 3 4 2 Output 15 Explanation: The path is 0 to 2 to 4 through node 2. Total travel time is 3 + 12 = 15.","solution":"import heapq def dijkstra(graph, start, n): dist = [float(\'inf\')] * n dist[start] = 0 priority_queue = [(0, start)] while priority_queue: current_dist, node = heapq.heappop(priority_queue) if current_dist > dist[node]: continue for neighbor, weight in graph[node]: new_dist = current_dist + weight if new_dist < dist[neighbor]: dist[neighbor] = new_dist heapq.heappush(priority_queue, (new_dist, neighbor)) return dist def shortest_path_through_node(n, e, s, t, m, edges): graph = [[] for _ in range(n)] for u, v, w in edges: graph[u].append((v, w)) dist_from_start = dijkstra(graph, s, n) dist_from_m = dijkstra(graph, m, n) if dist_from_start[m] == float(\'inf\') or dist_from_m[t] == float(\'inf\'): return -1 return dist_from_start[m] + dist_from_m[t] # Sample input parsing def main(): import sys input = sys.stdin.read data = input().split() idx = 0 n = int(data[idx]); idx += 1 e = int(data[idx]); idx += 1 s = int(data[idx]); idx += 1 t = int(data[idx]); idx += 1 m = int(data[idx]); idx += 1 edges = [] for _ in range(e): u = int(data[idx]); idx += 1 v = int(data[idx]); idx += 1 w = int(data[idx]); idx += 1 edges.append((u, v, w)) print(shortest_path_through_node(n, e, s, t, m, edges)) if __name__ == \'__main__\': main()"},{"question":"A courier company has different-sized boxes to ship goods. The boxes, however, must adhere to certain size constraints in order to fit through various postal sorting machines. Each box\'s dimensions are represented by three integers: width w, length l, and height h. A box is considered to fit through a sorting machine if, and only if, these conditions are satisfied: 1. There exists a permutation of the box\'s dimensions such that the width is at most the maximum permitted width W, the length is at most the maximum permitted length L, and the height is at most the maximum permitted height H. Write a program to determine if each of the given boxes can fit through the sorting machine. Input The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. The next line contains three integers W, L, and H (1 ≤ W, L, H ≤ 10^9) — the maximum permitted width, length, and height respectively. Each of the next t lines contain three integers w, l, and h (1 ≤ w, l, h ≤ 10^9) — the dimensions of the box. Output For each test case, output \\"YES\\" if the box can fit through the sorting machine and \\"NO\\" otherwise. Example Input 3 5 10 8 4 5 6 10 5 4 11 5 10 Output YES YES NO Note In the first test case, the box with dimensions 4x5x6 can be rearranged to 4x5x6, which fits within the constraints 5x10x8. In the second test case, the box with dimensions 10x5x4 can be rearranged to 5x10x4, which fits within the constraints 5x10x8. In the third test case, the box with dimensions 11x5x10 cannot be rearranged in any way to fit within the constraints 5x10x8.","solution":"def can_fit_through_machine(t, W, L, H, boxes): results = [] for i in range(t): w, l, h = sorted(boxes[i]) if w <= W and l <= L and h <= H: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage: # t = 3 # W, L, H = 5, 10, 8 # boxes = [(4, 5, 6), (10, 5, 4), (11, 5, 10)] # print(can_fit_through_machine(t, W, L, H, boxes)) # Output should be [\\"YES\\", \\"YES\\", \\"NO\\"]"},{"question":"# Evaluate Equation Validity You are given a set of equations in the form of strings. Each equation contains variables, integers, and the operators `+`, `-`, `*`, `/`, `=`. Your task is to validate whether the equations are correct or not. * The variables are single lowercase letters. * The operands after `=` are integers or other variables. * Division by zero is considered invalid. * There are no parentheses in the equations. # Input A list of strings representing the equations. # Output A list of `True` or `False` depending on whether each equation is valid or not. # Examples * ex1. [\\"a = 5 + 3\\", \\"b = a - 2\\", \\"c = a * 0\\", \\"d = c / b\\", \\"e = b / 0\\"] => `[True, True, True, True, False]` * ex2. [\\"x = 7 - 4\\", \\"y = x + 1\\", \\"z = y * 2\\", \\"w = z / y\\", \\"q = z / -1\\"] => `[True, True, True, True, True]` * ex3. [\\"m = 8 / 2\\", \\"n = m * 3\\", \\"o = n - 4\\", \\"p = 0 / 0\\", \\"q = o + p\\"] => `[True, True, True, False, False]` # Notes * Ensure that the `=` operator\'s left operand is a variable and the right operand is an expression or variable. * If the right operand involves a division, check if the divisor is zero. * Equations are evaluated in the order they are given. * If any preceding equation is invalid, any equation depending on its result will also be invalid. # Constraints 1. Length of each equation string will not exceed 20 characters. 2. The number of equations will not exceed 100. 3. Equations are given in a valid format. (You do not need to handle parsing errors.)","solution":"def evaluate_equations(equations): Evaluates the validity of a list of equations. Parameters: equations (list of str): List of equations in string format. Returns: list of bool: List of booleans indicating whether each equation is valid. variables = {} results = [] for eq in equations: parts = eq.split(\'=\') var = parts[0].strip() expr = parts[1].strip() try: # Replace variables in the expression with their values for v in variables: expr = expr.replace(v, str(variables[v])) # Check if the expression would result in division by zero if \'/\' in expr: parts_div = expr.split(\'/\') div_result = eval(parts_div[-1]) if div_result == 0: results.append(False) continue # Evaluate the expression value = eval(expr) # Assign the variable variables[var] = value results.append(True) except ZeroDivisionError: results.append(False) except Exception: results.append(False) return results"},{"question":"The botanist Dr. Eliza Green has been collecting data about a rare plant species found in different regions. Each plant region is assigned an ID and Dr. Green tracks multiple observations of plant populations in each region. For each observation, the plant population is recorded alongside the observation date. Dr. Green needs your help analyzing the historic data to find out the maximum population recorded for each region within a specified date range. The analysis will help her determine the times and places where the plants were thriving the most. For each query, you will be given: - A list of observations where each observation is a tuple containing `(region_id, date, population)`. - A start date and an end date that define the date range to consider. You are required to write a function `max_population_in_date_range(observations, start_date, end_date)` that returns a dictionary where the keys are the region IDs and the values are the maximum plant population recorded in that region within the given date range. If no observations fall within the date range for a region, that region should not be included in the result. Observations will have dates in the format \\"YYYY-MM-DD\\". You can assume all date inputs and observation dates are valid and well-formatted. # Example ```python observations = [ (1, \\"2022-01-15\\", 150), (2, \\"2022-01-16\\", 200), (1, \\"2022-02-10\\", 180), (2, \\"2022-02-15\\", 220), (1, \\"2022-03-05\\", 170) ] start_date = \\"2022-01-01\\" end_date = \\"2022-02-28\\" # Function call result = max_population_in_date_range(observations, start_date, end_date) # Expected output # {1: 180, 2: 220} ```","solution":"from datetime import datetime def max_population_in_date_range(observations, start_date, end_date): Returns the maximum plant population recorded in each region within the specified date range. :param observations: List of tuples containing (region_id, date, population) :param start_date: Start date of the range in format \\"YYYY-MM-DD\\" :param end_date: End date of the range in format \\"YYYY-MM-DD\\" :return: Dictionary with region IDs as keys and maximum population as values start_date = datetime.strptime(start_date, \\"%Y-%m-%d\\") end_date = datetime.strptime(end_date, \\"%Y-%m-%d\\") max_population = {} for region_id, date, population in observations: observation_date = datetime.strptime(date, \\"%Y-%m-%d\\") if start_date <= observation_date <= end_date: if region_id not in max_population: max_population[region_id] = population else: max_population[region_id] = max(max_population[region_id], population) return max_population"},{"question":"Alex has an integer array A consisting of N elements. He wants to perform Q operations on it. There are two types of operations: 1. Update an element at a given position in the array. 2. Calculate the sum of elements in a specified subarray. Your task is to help Alex perform these operations efficiently. -----Input:----- - The first line contains two integers N and Q — the number of elements in the array and the number of operations. - The second line contains N space-separated integers — the elements of the array. - The following Q lines each describe an operation. Each operation is represented by either: - \\"1 x y\\" — this operation updates the element at position x to y (1 leq x leq N, -10^9 leq y leq 10^9). - \\"2 l r\\" — this operation calculates the sum of the elements from position l to r (1 leq l leq r leq N). -----Output:----- For each sum operation, output the sum of the elements in the specified subarray on a new line. -----Constraints----- - 1 leq N leq 100000 - 1 leq Q leq 100000 - -10^9 leq A[i] leq 10^9 -----Sample Input:----- 5 5 1 2 3 4 5 2 1 5 1 3 10 2 1 3 1 5 6 2 4 5 -----Sample Output:----- 15 13 10 -----Explanation:----- Example case 1: - Initially, the array is [1, 2, 3, 4, 5]. - The first operation calculates the sum of the elements from position 1 to 5, which is 1+2+3+4+5 = 15. - The second operation updates the element at position 3 to 10. So the array becomes [1, 2, 10, 4, 5]. - The third operation calculates the sum of the elements from position 1 to 3, which is 1+2+10 = 13. - The fourth operation updates the element at position 5 to 6. So the array becomes [1, 2, 10, 4, 6]. - The fifth operation calculates the sum of the elements from position 4 to 5, which is 4+6 = 10.","solution":"class SegmentTree: def __init__(self, data): n = len(data) self.n = n self.tree = [0] * (2 * n) self.build(data) def build(self, data): n = self.n # Insert leaf nodes in tree for i in range(n): self.tree[n + i] = data[i] # Build the tree by calculating parents for i in range(n - 1, 0, -1): self.tree[i] = self.tree[i << 1] + self.tree[i << 1 | 1] def update(self, pos, value): # Update the value at position pos pos += self.n self.tree[pos] = value # Move upward and update parents while pos > 1: pos >>= 1 self.tree[pos] = self.tree[pos << 1] + self.tree[pos << 1 | 1] def range_sum(self, l, r): # Compute the sum in the range [l, r) res = 0 l += self.n r += self.n while l < r: if l & 1: res += self.tree[l] l += 1 if r & 1: r -= 1 res += self.tree[r] l >>= 1 r >>= 1 return res def process_operations(n, q, array, operations): seg_tree = SegmentTree(array) results = [] for op in operations: if op[0] == 1: _, x, y = op seg_tree.update(x - 1, y) # Convert to 0-based index elif op[0] == 2: _, l, r = op result = seg_tree.range_sum(l - 1, r) # Convert to 0-based index results.append(result) return results"},{"question":"Write a function `chain_calls` that takes a list of callables and a single starting argument. The idea is to apply each function in the list to the result of the previous function call, starting with the initial argument, and returning the final result. Your function `chain_calls` should have the following signature: ```python def chain_calls(callables: list, initial_arg): ``` # Parameters - `callables` (list): A list of callables (functions) that each accept a single argument. - `initial_arg`: The initial argument to pass to the first callable in the list. # Returns - The result of applying the last function to the intermediate results of each preceding function. # Example ```python def add_one(x): return x + 1 def square(x): return x * x def to_str(x): return str(x) result = chain_calls([add_one, square, to_str], 3) print(result) # Output: \\"16\\" ``` In this example, `add_one` is first applied to `3`, resulting in `4`. Then, `square` is applied to `4`, resulting in `16`. Finally, `to_str` is applied to `16`, resulting in `\\"16\\"`. Thus, `chain_calls` returns `\\"16\\"`. # Constraints - Ensure the list of callables is non-empty. - You may assume that all functions are well-behaved and do not raise exceptions. - Each callable in the list will only take a single argument.","solution":"def chain_calls(callables: list, initial_arg): Applies each callable in the list to the result of the previous callable, starting with the initial_arg. Parameters: - callables (list): A list of callables that each accept a single argument. - initial_arg: The initial argument to pass to the first callable in the list. Returns: - The result of applying the last function to the intermediate results of each preceding function. result = initial_arg for func in callables: result = func(result) return result"},{"question":"Jumbled Words Input: First line contains T - number of test cases. Following T lines each contains a string of lowercase characters in the range [a-z] only. Output: For each test case, print the smallest lexicographical order string that can be formed by jumbling the characters. Constraints: 1 ≤ T ≤ 100 1 ≤ Length of String ≤ 100 SAMPLE INPUT 5 example zxy coding challenge freedom SAMPLE OUTPUT aeelmpx xyz cdgino acceehllng defmoor","solution":"def smallest_lexicographical_order_string(test_cases): Returns a list of strings where each string is the smallest lexicographical order string that can be formed by jumbling the characters of the input strings. results = [] for string in test_cases: results.append(\'\'.join(sorted(string))) return results"},{"question":"You are given a set of N different integers. Your task is to determine if there exists a subset of these integers that sums to zero. If such a subset exists, return the size of the smallest subset that sums to zero. If no such subset exists, return -1. Input First line contains a single integer N, the number of integers in the set. The second line contains N integers separated by space. Output Return the size of the smallest subset that sums to zero, or -1 if no subset exists. Constraints 1 <= N <= 200 -10^3 <= integer values <= 10^3 Sample Input 5 3 1 -4 2 -2 Sample Output 2 Explanation In the given set {3, 1, -4, 2, -2}, the subset {2, -2} sums to zero and contains 2 elements. Hence the output is 2. SAMPLE INPUT 4 1 2 5 6 SAMPLE OUTPUT -1","solution":"from itertools import combinations def smallest_zero_sum_subset(n, nums): Returns the size of the smallest subset of nums that sums to zero. If no such subset exists, returns -1. for size in range(1, n + 1): for subset in combinations(nums, size): if sum(subset) == 0: return size return -1 # Example usage: # n = 5 # nums = [3, 1, -4, 2, -2] # result = smallest_zero_sum_subset(n, nums) # print(result) # Output should be 2"},{"question":"-----Problem Statement:----- Write a program that accepts a list of integers from the user and removes any duplicate integers, preserving the original order of first occurrences. -----Input:----- - The first line contains an integer `n`, the number of integers. - The second line contains `n` space-separated integers. -----Output:----- For each testcase, print the list of integers with duplicates removed, in the order of their first occurrence. -----Sample Input:----- 5 1 2 2 3 4 -----Sample Output:----- 1 2 3 4","solution":"def remove_duplicates(n, integers): Removes duplicates from a list of integers while maintaining the order of first occurrences. :param n: Number of integers :param integers: List of integers :return: List of integers with duplicates removed seen = set() result = [] for number in integers: if number not in seen: seen.add(number) result.append(number) return result"},{"question":"You have been given the task of arranging up to `n` different books on a shelf of length `m` units. Each book has a unique width and a unique height. You need to find the maximum number of books that can be placed on the shelf without exceeding the shelf\'s length `m`. When arranging, books stand upright and can be placed in any order, but they cannot overlap. Input: First line of input contains two space-separated integers `n` and `m` denoting the number of books and the length of the shelf, respectively. Next `n` lines contain two space-separated integers each, denoting the width and height of the books. Output: Output in a single line, the maximum number of books that can be placed on the shelf. Constraints: 1 ≤ n ≤ 100 1 ≤ m ≤ 100 1 ≤ width of each book ≤ m 1 ≤ height of each book ≤ 100 SAMPLE INPUT 5 10 1 3 2 5 3 1 4 2 2 4 SAMPLE OUTPUT 4 Explanation: Here are the widths of the books: [1, 2, 3, 4, 2]. By selecting books with widths [1, 2, 3, 4], their total width is 10, which perfectly fits in the shelf of length 10 units. Thus, we can place 4 books on the shelf.","solution":"def max_books_on_shelf(n, m, books): books.sort(key=lambda x: x[0]) # Sort books by width total_width = 0 count = 0 for width, height in books: if total_width + width <= m: total_width += width count += 1 else: break return count # Function to parse and process input def process_input(data): lines = data.strip().split(\'n\') n, m = map(int, lines[0].split()) books = [tuple(map(int, line.split())) for line in lines[1:]] return max_books_on_shelf(n, m, books)"},{"question":"Library Book Return You are a librarian and you need to manage the book returns. Each returned book is represented with a dictionary containing the borrower\'s name, book title, and overdue days. You need to determine if any book was returned late. An overdue period is indicated with a positive number of overdue days. Write a function that accepts a list of book returns (dictionaries) and returns a boolean indicating whether any book was returned late. Example usage: ```python books = [ {\'borrower\': \'Alice\', \'title\': \'1984\', \'overdue_days\': 0}, {\'borrower\': \'Bob\', \'title\': \'To Kill a Mockingbird\', \'overdue_days\': 2}, {\'borrower\': \'Charlie\', \'title\': \'Moby Dick\', \'overdue_days\': -1}, ] is_any_book_late(books) ``` The expected result is `True` since at least one book (Bob\'s) was returned late. Reference: https://developer.mozilla.org/en-US/docs/Web/Python/Coding_best_practices","solution":"def is_any_book_late(books): Checks if any book in the list of book returns was returned late. Parameters: books (list): A list of dictionaries, where each dictionary contains: - \'borrower\' (str): The name of the borrower - \'title\' (str): The title of the book - \'overdue_days\' (int): The number of overdue days Returns: bool: True if any book was returned late, otherwise False for book in books: if book.get(\'overdue_days\', 0) > 0: return True return False"},{"question":"A group of scholars is researching ancient manuscripts stored in a museum. There are M collections of manuscripts, and each manuscript is labelled with an identifier Pi which is a positive integer. Some of these identifiers might be similar across different collections. The museum curator informs them that a particular identifier called the \\"Rare Manuscript Identifier\\" (RMI) appears exactly once in each collection. Your task is to assist the scholars in identifying this RMI, assuming it exists and appears exactly in one collection each. If it doesn\'t exist or there are multiple such identifiers, return -1. Input Format The first line contains a single integer, M, representing the number of collections. In each of the subsequent M lines, there are space-separated integers representing the identifiers of manuscripts in each collection. Each collection can have a different number of manuscripts. Output Format Print the RMI if it exists, otherwise print -1. Constraints 1 ≤ M ≤ 100 1 ≤ number of identifiers in each collection ≤ 1000 1 ≤ Pi ≤ 10000 SAMPLE INPUT 3 11 23 11 45 23 45 11 11 11 23 33 23 SAMPLE OUTPUT -1","solution":"def find_rmi(M, collections): Finds the Rare Manuscript Identifier (RMI) which appears exactly once in each collection. If it doesn\'t exist or there are multiple such identifiers, return -1. Returns: int: The RMI if it exists, -1 otherwise. from collections import Counter # Dictionary to count all occurrences of an identifier across all collections global_count = Counter() # List of counters to keep track of individual collection counts collection_counters = [] for collection in collections: count = Counter(collection) collection_counters.append(count) global_count.update(count) # Check identifiers that appear in every collection exactly once rm_candidates = [] for identifier in global_count: if global_count[identifier] == M and all(collection_count[identifier] == 1 for collection_count in collection_counters if identifier in collection_count): rm_candidates.append(identifier) # If there\'s exactly one RMI candidate, return it; otherwise, return -1 if len(rm_candidates) == 1: return rm_candidates[0] else: return -1"},{"question":"You are tasked with developing a maze-solving algorithm for a robot. The maze is a grid consisting of `N` rows and `M` columns. Each cell in the grid is either open (represented by a \'.\') or contains an obstacle (represented by a \'#\'). The robot starts at the top-left cell (1, 1) and needs to find the shortest path to the bottom-right cell (N, M). The robot can move up, down, left, or right, but cannot move diagonally and cannot move through obstacles. Write a program that determines the shortest path from the top-left cell to the bottom-right cell. If no such path exists, your program should output `Impossible`. Constraints: * 2 ≤ N, M ≤ 1000 Input: The first line contains two integers `N` and `M`. The next `N` lines each contain `M` characters (either \'.\' or \'#\') representing the maze. Output: If a path exists, print the length of the shortest path. If no path exists, print `Impossible`. Example Input 1: ``` 4 5 ..... .#... ....# ..... ``` Example Output 1: ``` 8 ``` Example Input 2: ``` 3 3 .#. # .#. ``` Example Output 2: ``` Impossible ```","solution":"from collections import deque def shortest_path_maze(N, M, maze): Determines the shortest path in a maze from (0, 0) to (N-1, M-1). Parameters: N (int): Number of rows in the maze. M (int): Number of columns in the maze. maze (list): List of strings representing the maze grid. Returns: int or str: Length of the shortest path or \\"Impossible\\" if no path exists. if maze[0][0] == \'#\' or maze[N-1][M-1] == \'#\': return \\"Impossible\\" directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = [[False] * M for _ in range(N)] queue = deque([(0, 0, 1)]) # (row, column, distance) visited[0][0] = True while queue: r, c, dist = queue.popleft() if r == N-1 and c == M-1: return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < N and 0 <= nc < M and not visited[nr][nc] and maze[nr][nc] == \'.\': visited[nr][nc] = True queue.append((nr, nc, dist + 1)) return \\"Impossible\\" # Example usage: N = 4 M = 5 maze = [ \\".....\\", \\".#...\\", \\"....#\\", \\".....\\" ] print(shortest_path_maze(N, M, maze)) # Output: 8"},{"question":"A group of archaeologists discovered an ancient artifact which contained n gemstones, each with a certain magical power. The magical power of each gemstone is represented by a positive integer. The professor leading the expedition postulated that the power of two gemstones found side-by-side in the array can be enhanced if and only if their powers are co-prime. Two integers are considered co-prime if their greatest common divisor (GCD) is 1. Given the array of gemstones and their powers, your task is to find the number of pairs (i, j) such that 1 ≤ i < j ≤ n and the powers of the gemstones at positions i and j are co-prime. INPUT First line contains an integer T, the number of test cases. Each test case starts with an integer n, the number of gemstones. The next line contains n space-separated integers representing the magical power of each gemstone. OUTPUT For each test case, output the number of co-prime pairs in a new line. Constraints 1 ≤ T ≤ 10^3 2 ≤ n ≤ 10^3 1 ≤ Power of gemstones ≤ 10^6 SAMPLE INPUT 2 3 2 3 4 4 2 4 6 8 SAMPLE OUTPUT 2 0 Explanation In the first test case: - The pairs (2, 3) and (3, 4) are co-prime. - Thus, the number of co-prime pairs is 2. In the second test case: - No pairs are co-prime. - Thus, the result is 0.","solution":"from math import gcd def count_coprime_pairs(T, test_cases): results = [] for i in range(T): n = test_cases[i][0] gemstones = test_cases[i][1] count = 0 for j in range(n): for k in range(j + 1, n): if gcd(gemstones[j], gemstones[k]) == 1: count += 1 results.append(count) return results"},{"question":"Given a singly linked list, write a function to reverse the linked list. The function should not use recursion and should reverse the list in-place. Example 1: Input: 1 -> 2 -> 3 -> 4 -> NULL Output: 4 -> 3 -> 2 -> 1 -> NULL Explanation: Reversing the linked list, the new head is 4 and the list is 4 -> 3 -> 2 -> 1 -> NULL. Example 2: Input: 10 -> 20 -> 30 -> NULL Output: 30 -> 20 -> 10 -> NULL Explanation: Reversing the linked list, the new head is 30 and the list is 30 -> 20 -> 10 -> NULL. Your task: You don\'t need to read input or print anything. Your task is to complete the function `reverseList()` which takes the head of the linked list as input and returns the new head of the reversed linked list. The function should reverse the list in-place. Expected time complexity: O(N) Expected auxiliary space: O(1) Constraints: 1 <= Number of nodes <= 10^{5} 1 <= Value of a node <= 10^{5}","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def reverseList(head): Reverses a singly linked list in-place. Args: head (ListNode): Head of the singly linked list. Returns: ListNode: New head of the reversed singly linked list. prev = None current = head while current: next_temp = current.next # store next node current.next = prev # reverse the link prev = current # move prev to current current = next_temp # move to next node return prev"},{"question":"Given an array of integers heights representing the heights of a set of buildings, return the maximum area of a rectangle formed by any two of the buildings. The width of each rectangle is determined by the absolute difference in indices of the chosen buildings, and the height is the minimum of the two heights of the chosen buildings. Example 1: Input: heights = [1,8,6,2,5,4,8,3,7] Output: 49 Explanation: The maximum area is formed by buildings at indices 1 and 8 (indexed from 0), with heights 8 and 7. The width between them is 7, and the height of the rectangle is the minimum of 8 and 7, so the area is 7*7 = 49. Example 2: Input: heights = [1,1] Output: 1 Explanation: The only two buildings form a rectangle with width 1 and height 1, giving an area of 1. Example 3: Input: heights = [4,3,2,1,4] Output: 16 Explanation: The maximum area is formed by buildings at indices 0 and 4, both with height 4. The width between them is 4, so the area is 4*4 = 16. Example 4: Input: heights = [1,2,4,3] Output: 4 Explanation: The maximum area is formed by buildings at indices 2 and 3, with heights 4 and 3. The width between them is 1, so the area is 3*1 = 3. Constraints: - 2 <= heights.length <= 10^5 - 0 <= heights[i] <= 10^4","solution":"def max_area(heights): Returns the maximum area of a rectangle formed by any two of the buildings. max_area = 0 left = 0 right = len(heights) - 1 while left < right: height = min(heights[left], heights[right]) width = right - left current_area = height * width max_area = max(max_area, current_area) if heights[left] < heights[right]: left += 1 else: right -= 1 return max_area"},{"question":"A shipping company is handling packages of varying weights and needs to determine the maximum possible weight of a single package that can be formed by combining the given packages without exceeding a specific weight limit. Each package can only be used once. -----Input----- The first line of the input contains two integers n and W (1 ≤ n ≤ 100, 1 ≤ W ≤ 10^5) — the number of packages and the weight limit of the combined package. The second line contains n integers wi (1 ≤ wi ≤ W), representing the weights of the individual packages. -----Output----- Print one integer — the maximum weight of a single package that can be formed without exceeding the weight limit W. -----Examples----- Input 5 10 2 3 7 4 6 Output 10 Input 4 15 5 5 5 5 Output 15 -----Note----- In the first sample, packages of weights 2, 3, and 4 can be combined to form a package of 9, or 3 and 7 can form a package of 10. The maximum possible single package weight is 10. In the second sample, all combinations of package weights form 15, which does not exceed the limit. The maximum possible single package weight is 15.","solution":"from itertools import combinations def max_package_weight(n, W, weights): max_weight = 0 for i in range(1, n + 1): for combo in combinations(weights, i): weight_sum = sum(combo) if weight_sum <= W: max_weight = max(max_weight, weight_sum) return max_weight"},{"question":"Max, a dedicated librarian, is organizing a vast library system consisting of numerous racks and books. Each rack can store a fixed number of books, and Max wants to ensure that no rack is overflowing with books. Additionally, Max wants to know the minimum number of books that need to be removed to maintain the library in an organized manner. The library can be represented as m racks, where each rack has a capacity c (the maximum number of books it can hold). Max wants to distribute the books across the racks such that no rack exceeds its capacity. If the number of books in any rack exceeds its capacity, Max will have to remove the excess books. Write a program to help Max determine the minimum number of books that need to be removed to make sure no rack exceeds its capacity. # Input The input consists of three lines: - The first line contains two integers, m (1 ≤ m ≤ 1000) and c (1 ≤ c ≤ 1000), which represent the number of racks and the capacity of each rack, respectively. - The second line contains m integers, where the i-th integer bi (0 ≤ bi ≤ 2000) indicates the number of books currently on the i-th rack. # Output Print a single integer representing the minimum number of books that need to be removed to ensure no rack exceeds its capacity. # Examples Input ``` 5 10 12 5 14 8 7 ``` Output ``` 6 ``` Input ``` 3 15 20 10 5 ``` Output ``` 5 ``` Input ``` 4 8 8 8 8 8 ``` Output ``` 0 ``` # Explanation In the first example, the first rack has 12 books, exceeding its capacity by 2, and the third rack has 14 books, exceeding its capacity by 4. Hence, a total of 6 books need to be removed. In the second example, the first rack has 20 books, exceeding its capacity by 5. Therefore, 5 books need to be removed. In the third example, all racks are within their capacity, so no books need to be removed.","solution":"def min_books_to_remove(m, c, books): Returns the minimum number of books that need to be removed to ensure no rack exceeds its capacity. Args: m (int): Number of racks c (int): Capacity of each rack books (list of int): List of integers representing the number of books on each rack Returns: int: Minimum number of books to be removed total_books_to_remove = 0 for b in books: if b > c: total_books_to_remove += (b - c) return total_books_to_remove"},{"question":"Given a sequence of lowercased alphabetic string representing DNA strands, identify if a certain pattern repeats in the strand. -----Input----- The input contains a single string on a single line. This string consists of only the characters a, c, g, and t representing a DNA strand, and has between 4 and 50 characters. -----Output----- Output a single line. If the input string contains exactly one occurrence of the sequence \\"atgc\\" as a substring, then output single occurrence. If the sequence appears more than once, output multiple occurrences. If the sequence does not appear at all, output no occurrence. -----Examples----- Sample Input 1: cgatgcggctaa Sample Output 1: single occurrence Sample Input 2: atgcatgcgcta Sample Output 2: multiple occurrences Sample Input 3: cggtaa Sample Output 3: no occurrence","solution":"def dna_sequence_occurrence(dna_strand): Returns a string indicating the number of times the sequence \\"atgc\\" appears in the dna_strand. occurrences = dna_strand.count(\\"atgc\\") if occurrences == 0: return \\"no occurrence\\" elif occurrences == 1: return \\"single occurrence\\" else: return \\"multiple occurrences\\""},{"question":"Mina is passionate about gardening and has a special flower bed she takes care of daily. Her flower bed is represented as a 2D grid of dimensions NxM (N rows and M columns), where each position contains a flower of a certain type. The flowers are identified by numbers from 1 to K. Mina’s goal is to make her flower bed as beautiful as possible by rearranging the flowers, following certain rules and constraints. **Rules for beautification:** 1. She can swap any two flowers in the grid. 2. She aims to maximize the beauty, which is defined as the maximum length of identical flowers in a straight line either horizontally, vertically, or diagonally. **Input format:** - The first line contains an integer T, the number of test cases. - For each test case, the first line contains three integers N (number of rows), M (number of columns), and K (number of flower types). - The next N lines contain M space-separated integers, where each integer represents the type of flower at that position in the grid. **Output format:** - For each test case, output a single integer that represents the maximum possible beauty of Mina\'s flower bed after rearrangement. **Constraints:** 1 <= T <= 10 2 <= N, M <= 100 1 <= K <= 10 **Example Input:** 3 3 3 3 1 2 3 3 2 1 1 3 2 4 4 4 1 2 1 2 2 1 2 1 3 4 3 4 4 3 4 3 5 5 5 1 1 1 1 1 2 2 2 2 2 3 3 3 3 3 4 4 4 4 4 5 5 5 5 5 **Example Output:** 3 4 5","solution":"def max_beauty(grid, N, M): Calculate the maximum possible beauty of the flower bed after rearrangement. flower_counts = {} for row in grid: for flower in row: if flower in flower_counts: flower_counts[flower] += 1 else: flower_counts[flower] = 1 max_line_length = max(flower_counts.values()) return max_line_length def parse_input(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0].strip()) index = 1 test_cases = [] for _ in range(T): N, M, K = map(int, lines[index].strip().split()) index += 1 grid = [] for i in range(N): grid.append(list(map(int, lines[index].strip().split()))) index += 1 test_cases.append((grid, N, M, K)) return test_cases def beautify_flower_beds(input_string): test_cases = parse_input(input_string) result = [] for grid, N, M, K in test_cases: result.append(max_beauty(grid, N, M)) return result"},{"question":"You are given a list of n integers. Write a program to find the smallest missing positive integer in the list that is greater than 0. -----Input----- The first line contains a single integer t (1 le t le 1000) — the number of test cases. Each test case consists of two lines: - The first line contains one integer n (1 le n le 10^5), the size of the list. - The second line contains n space-separated integers a_1, a_2, ldots, a_n (-10^9 le a_i le 10^9). -----Output----- For each test case, print a single integer — the smallest missing positive integer greater than 0. -----Example----- Input 3 3 1 2 0 4 3 4 -1 1 5 7 8 9 11 12 Output 3 2 1","solution":"def smallest_missing_positive(t, test_cases): def find_missing_positive(arr): s = set(arr) i = 1 while True: if i not in s: return i i += 1 results = [] for i in range(t): n, arr = test_cases[i] results.append(find_missing_positive(arr)) return results"},{"question":"**Problem** A group of friends decided to hold a game tournament. There are six friends participating: Alice, Bob, Charlie, David, Eve, and Frank. Each friend played exactly one game, and the score ranges from 0 to 100. After the game, they decided that if anyone scored less than 50 points, their score will be capped at 50 points, recognizing only scores of 50 or above. Create a program that calculates and outputs the average of the adjusted scores of the six friends. **Example** **Input** 45 60 72 30 95 88 **Output** 77 **Explanation** The adjusted scores are as follows: - 45 adjusted to 50 - 60 remains 60 - 72 remains 72 - 30 adjusted to 50 - 95 remains 95 - 88 remains 88 The average is calculated as (50 + 60 + 72 + 50 + 95 + 88) / 6 = 77.","solution":"def calculate_average_score(scores): Calculate the average of adjusted scores. If a score is less than 50, it is capped at 50. :param scores: list of 6 integers representing scores. :return: the average of the adjusted scores. # Apply capping to each score adjusted_scores = [max(score, 50) for score in scores] # Calculate average average_score = sum(adjusted_scores) / len(adjusted_scores) return average_score"},{"question":"Given an array of integers and a target integer, determine if there exist two distinct indices i and j in the array such that nums[i] + nums[j] is equal to the target. Constraints * 2 leq nums.length leq 10^5 * -10^9 leq nums[i] leq 10^9 * -10^9 leq target leq 10^9 Input Input is given from Standard Input in the following format: The first line contains a single integer n, the number of elements in the array. The second line contains n space-separated integers representing the array elements. The third line contains a single integer representing the target. Output Print \\"YES\\" if such indices exist, otherwise print \\"NO\\". Examples Input 5 2 7 11 15 3 9 Output YES Input 4 1 2 3 4 8 Output NO Input 3 -1 -2 -3 -5 Output YES","solution":"def two_sum_exists(nums, target): Determine if there exist two distinct indices i and j in the array such that nums[i] + nums[j] is equal to the target. seen = set() for num in nums: if target - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\" if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) nums = list(map(int, data[1:n+1])) target = int(data[n+1]) print(two_sum_exists(nums, target))"},{"question":"You have a grid of n rows, each containing a single positive integer. The grid can be represented as an array of size n, where the i-th row contains the integer `a[i]`. You want to merge these rows into a single row. In one operation, you can choose two distinct adjacent rows and merge them by summing their values. The value of the resulting row will be the sum of the values of the two chosen rows. This new row will replace the two chosen rows in the grid, decreasing the total number of rows by one. Your task is to calculate the minimum number of operations required to merge all the rows into a single row. Also, calculate the sum of the final single row after all the merges. Write a function to determine the minimum number of operations and the resulting row value. -----Input----- The input consists of two lines: - The first line contains a single integer `n` (1 ≤ n ≤ 10^5), the number of rows in the grid. - The second line contains `n` integers, where the i-th integer represents the value of row `i` (1 ≤ a[i] ≤ 10^9). -----Output----- Output two integers: the minimum number of operations required to merge all rows into a single row, and the sum of the single row after all merges. -----Example----- Input 4 4 3 2 6 Output 3 15 -----Note----- Here is an example step-by-step explanation for the sample input: 1. Merge rows 2 and 3 (values 3 and 2), resulting in [4, 5, 6]. 2. Merge rows 1 and 2 (values 4 and 5), resulting in [9, 6]. 3. Merge rows 1 and 2 (values 9 and 6), resulting in [15]. The minimum number of operations is 3, and the value of the final single row is 15.","solution":"def merge_rows(n, a): Calculates the minimum number of operations required to merge all rows into a single row, and the sum of the final single row after all merges. Parameters: n (int): The number of rows in the grid. a (list of int): The values of the rows. Returns: tuple: A pair (number of operations, final single row value). # The minimum number of operations is always n-1 for n rows. min_operations = n - 1 # The sum of the final single row is the sum of all elements in the input array. final_row_value = sum(a) return min_operations, final_row_value"},{"question":"Problem statement Given a list of integers L sorted in ascending order and an integer T , find all unique quadruplets (a, b, c, d) in L such that a + b + c + d = T . The solution set must not contain duplicate quadruplets. A quadruplet is defined as (a, b, c, d) where a leq b leq c leq d and a, b, c, d are all elements of the list L . Constraint * 4 leq |L| leq 50 ( |L| is the length of the list L ) * -10^9 leq L[i] leq 10^9 for each integer in the list. * -10^9 leq T leq 10^9 . input Input follows the following format: L T output Output all unique quadruplets in any order, each on a new line. Examples Input [1, 0, -1, 0, -2, 2] 0 Output [-1, 0, 0, 1] [-2, -1, 1, 2] [-2, 0, 0, 2] Input [2, 2, 2, 2, 2] 8 Output [2, 2, 2, 2]","solution":"def four_sum(L, target): Returns a list of all unique quadruplets (a, b, c, d) in L where a + b + c + d = target. L.sort() quadruplets = [] n = len(L) for i in range(n - 3): if i > 0 and L[i] == L[i - 1]: continue for j in range(i + 1, n - 2): if j > i + 1 and L[j] == L[j - 1]: continue left = j + 1 right = n - 1 while left < right: total = L[i] + L[j] + L[left] + L[right] if total == target: quadruplets.append([L[i], L[j], L[left], L[right]]) while left < right and L[left] == L[left + 1]: left += 1 while left < right and L[right] == L[right - 1]: right -= 1 left += 1 right -= 1 elif total < target: left += 1 else: right -= 1 return quadruplets"},{"question":"# Square Root Spiral Create a function that outputs a 2-dimensional array of a spiral of integers starting from 1 in the top-left corner and increasing in value, laid out in a clockwise direction. The size of the spiral will be a given perfect square integer `n`, where `n` is greater than 0. The function should return a 2D array of size `sqrt(n) x sqrt(n)` where each element represents a number in the spiral. Example ```python generate_spiral(9) [ [1, 2, 3], [8, 9, 4], [7, 6, 5] ] generate_spiral(16) [ [1, 2, 3, 4], [12, 13, 14, 5], [11, 16, 15, 6], [10, 9, 8, 7] ] ``` Notes - The input integer will always be a perfect square greater than 0. - You can use basic mathematical operations and data structures to create the spiral. Avoid using specialized libraries for matrix operations.","solution":"import math def generate_spiral(n): Generates a 2D spiral array starting from 1 up to the given perfect square integer n. size = int(math.sqrt(n)) spiral = [[0] * size for _ in range(size)] left, right, top, bottom = 0, size - 1, 0, size - 1 current_number = 1 while left <= right and top <= bottom: # Traverse from left to right for i in range(left, right + 1): spiral[top][i] = current_number current_number += 1 top += 1 # Traverse downwards for i in range(top, bottom + 1): spiral[i][right] = current_number current_number += 1 right -= 1 # Traverse from right to left for i in range(right, left - 1, -1): spiral[bottom][i] = current_number current_number += 1 bottom -= 1 # Traverse upwards for i in range(bottom, top - 1, -1): spiral[i][left] = current_number current_number += 1 left += 1 return spiral"},{"question":"In the Kingdom of AlgoLand, the rivers are full of interconnected waterways, allowing boats to travel between various cities. There are N cities, named from City 1 to City N. Royal Captain Algo is currently moored at City 1 and needs to deliver an urgent message to City N. However, due to recent changes in the waterway currents, certain routes have become unidirectional. The rivers in AlgoLand are defined as directed routes, where each route i leads from city u_i to city v_i, and once taken, the boat cannot travel in the reverse direction. Algo needs to determine if it is possible to reach City N starting from City 1 by following a series of these one-way routes. Write a function to help Royal Captain Algo determine if a path exists from City 1 to City N. -----Constraints----- - 2 ≤ N ≤ 200 000 - 1 ≤ M ≤ 200 000 - 1 ≤ u_i, v_i ≤ N - u_i ≠ v_i for all i (1 ≤ i ≤ M) -----Input----- Input is given from Standard Input in the following format: N M u_1 v_1 u_2 v_2 : u_M v_M -----Output----- If it is possible to reach City N starting from City 1 by following the one-way routes, print YES; otherwise, print NO. -----Sample Input----- 4 4 1 2 2 3 3 4 4 2 -----Sample Output----- YES","solution":"from collections import defaultdict, deque def can_reach_city_N(N, M, routes): Determines if it is possible to reach City N starting from City 1 by following one-way routes. :param N: Total number of cities :param M: Total number of routes :param routes: List of tuples representing the routes (u_i, v_i) :return: \\"YES\\" if it is possible to reach City N from City 1, otherwise \\"NO\\" graph = defaultdict(list) for u, v in routes: graph[u].append(v) # Perform BFS from city 1 queue = deque([1]) visited = set([1]) while queue: current_city = queue.popleft() if current_city == N: return \\"YES\\" for neighbor in graph[current_city]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return \\"NO\\""},{"question":"Jojo\'s journey across various dimensions leads him to encounter the unique puzzle guardians who test his logical thinking. Each guardian presents a challenge involving an array of integers. One such guardian, known for his tricky puzzles, gives Jojo an interesting problem: Given an array of integers, Jojo has to find a contiguous subarray (containing at least one number) which has the largest sum and return the sum as well as the length of that subarray. For example: For the array `[-2,1,-3,4,-1,2,1,-5,4]`, the contiguous subarray with the largest sum is `[4,-1,2,1]`, which has a sum of `6` and a length of `4`. In order to continue with his journey, Jojo asks for your help to solve this puzzle. ---NOTE--- A subarray is a contiguous non-empty segment of an array. For example, for the array `[1,2,3]`, subarrays include `[1]`, `[2]`, `[3]`, `[1, 2]`, `[2, 3]`, `[1, 2, 3]`. ---Input--- - The first line contains an integer `N`, the number of elements in the array. - The second line contains `N` space-separated integers, denoting the elements of the array. ---Output--- For each test case, output the largest sum of the contiguous subarray and the length of that subarray. ---Constraints--- - `1 <= N <= 10^5` - `-10^4 <= array[i] <= 10^4` ---Sample Input--- 9 -2 1 -3 4 -1 2 1 -5 4 ---Sample Output--- 6 4 ---Explanation--- In the given example, manually checking the subarrays, we find that the subarray `[4, -1, 2, 1]` has the largest sum which is `6` and the length is `4`. Thus, the answer is `6 4`.","solution":"def max_subarray_sum_and_length(arr): Finds the maximum sum of a contiguous subarray and its length. Parameters: arr (List[int]): The array of integers. Returns: Tuple[int, int]: The maximum sum and the length of the subarray. max_sum = float(\'-inf\') current_sum = 0 current_length = 0 max_length = 0 for number in arr: if current_sum + number > number: current_sum += number current_length += 1 else: current_sum = number current_length = 1 if current_sum > max_sum: max_sum = current_sum max_length = current_length elif current_sum == max_sum: max_length = max(max_length, current_length) return (max_sum, max_length)"},{"question":"A string is called valid if all characters of the string appear the same number of times. Given a string s, you can delete at most one character from the string to make it a valid string. Determine whether it is possible to achieve a valid string by removing no more than one character. Input The first line contains an integer T (1 ≤ T ≤ 10^3), the number of test cases. Each of the next T lines contains a string s consisting of lowercase English letters. The length of the string s is between 1 and 10^5. Output For each test case, output \\"YES\\" if it\'s possible to make the string valid, otherwise output \\"NO\\". SAMPLE INPUT 3 aabbcc aabbccc abc SAMPLE OUTPUT YES YES YES Explanation For the 1st test case the string is already valid. For the 2nd test case you can remove one \'c\' to get the valid string \\"aabbcc\\". For the 3rd test case you can remove any one of the characters to achieve the valid string with two identical characters remaining.","solution":"from collections import Counter def is_valid_string(s): freq_counter = Counter(s) freq_values = list(freq_counter.values()) freq_counter = Counter(freq_values) if len(freq_counter) == 1: return \\"YES\\" elif len(freq_counter) == 2: key1, key2 = list(freq_counter.keys()) if (freq_counter[key1] == 1 and (key1 == 1 or key1 - 1 == key2)) or (freq_counter[key2] == 1 and (key2 == 1 or key2 - 1 == key1)): return \\"YES\\" return \\"NO\\" def valid_strings(T, strings): results = [] for s in strings: results.append(is_valid_string(s)) return results"},{"question":"A company has recently implemented a new policy where they want to distribute bonus points to their employees based on their performance scores. The distribution should be fair and follow these rules: - Each employee receives at least one bonus point. - An employee with a higher performance score than an adjacent employee receives more bonus points. - Conversely, an employee with a lower performance score than an adjacent employee receives fewer bonus points. You are tasked to write a program that calculates the minimum number of bonus points required to satisfy these rules for a given list of performance scores. Input:- The first line of input is an integer N that specifies the number of test cases. After that, each test case is a line containing an integer M followed by M space-separated integers representing the performance scores of the employees. Output:- For each test case, output a single integer - the minimum number of bonus points required. Constraints:- 1 ≤ N ≤ 100 1 ≤ M ≤ 1000 1 ≤ performance score ≤ 10000 SAMPLE INPUT 3 3 1 2 2 5 1 2 2 3 4 4 4 3 2 1 SAMPLE OUTPUT 4 9 10 Note: In the first test case, a minimal distribution satisfying the rules could be [1, 2, 1]. In the second test case, [1, 2, 1, 2, 3] is a valid distribution, and in the third test case, [4, 3, 2, 1] is valid.","solution":"def min_bonus_points(test_cases): results = [] for scores in test_cases: M = len(scores) bonuses = [1] * M # Each employee gets at least 1 point initially # First pass: adjust bonuses from left to right for i in range(1, M): if scores[i] > scores[i - 1]: bonuses[i] = bonuses[i - 1] + 1 # Second pass: adjust bonuses from right to left for i in range(M - 2, -1, -1): if scores[i] > scores[i + 1]: bonuses[i] = max(bonuses[i], bonuses[i + 1] + 1) results.append(sum(bonuses)) return results def parse_input(data): lines = data.strip().split(\'n\') N = int(lines[0]) test_cases = [] for i in range(1, N + 1): scores = list(map(int, lines[i].split())) test_cases.append(scores[1:]) return N, test_cases def bonus_points(data): N, test_cases = parse_input(data) results = min_bonus_points(test_cases) return results # Example usage data = 3 3 1 2 2 5 1 2 2 3 4 4 4 3 2 1 print(bonus_points(data))"},{"question":"Given a positive integer n, return the number of ways to express n as a sum of two or more consecutive positive integers. Example 1: Input: n = 9 Output: 2 Explanation: 9 can be expressed as: - 2 + 3 + 4 - 4 + 5 Example 2: Input: n = 15 Output: 3 Explanation: 15 can be expressed as: - 1 + 2 + 3 + 4 + 5 - 4 + 5 + 6 - 7 + 8 Your Task: You don\'t need to read input or print anything. Your task is to complete the function consecutiveSums(), which takes an integer n as input and returns the number of ways n can be expressed as a sum of two or more consecutive positive integers. Expected Time Complexity: O(√n) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 10^9","solution":"def consecutiveSums(n): Returns the number of ways to express n as a sum of two or more consecutive positive integers. ways = 0 k = 1 while k * (k + 1) < 2 * n: numerator = n - (k * (k + 1)) // 2 if numerator % (k + 1) == 0: ways += 1 k += 1 return ways"},{"question":"A group of friends is planning a road trip and they are deciding on the list of cities to visit. There are n cities and the friends have assigned each city a fun-rating, represented as positive integers. Their plan involves visiting cities in a round-robin fashion, where they either visit the next city clockwise or counter-clockwise from the current city. However, they must stick to visiting cities either only clockwise or only counter-clockwise throughout the trip. They start their trip from the city with the highest fun-rating. If there are multiple cities with the same highest fun-rating, they start from the city with the smallest index among those. Once they choose a direction (clockwise or counter-clockwise), they visit all the cities in that direction until they visit all cities exactly once. You are asked to determine the sequence of city indices they will visit during their trip. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 200,000) — the number of cities. The second line contains n positive integers f_i representing the fun-ratings of the cities (1 ≤ f_i ≤ 10^9). The third line contains an integer d (d ∈ {1, 2}), indicating the trip direction: `1` for clockwise and `2` for counter-clockwise. -----Output----- Print the sequence of city indices (1-based) in the order the friends will visit them. -----Examples----- Input 5 3 2 4 1 5 1 Output 5 1 2 3 4 Input 4 2 2 3 3 2 Output 3 2 1 4 -----Note----- In the first example, the cities have fun-ratings [3, 2, 4, 1, 5] and the direction is clockwise. The highest fun-rating is 5 at city index 5. Starting at city index 5 and moving clockwise, the travel sequence is 5 -> 1 -> 2 -> 3 -> 4. In the second example, the cities have fun-ratings [2, 2, 3, 3] and the direction is counter-clockwise. There are two cities with the highest fun-rating, 3 and 3, at indices 3 and 4. Starting from the smallest index among those with the highest fun-rating (index 3) and moving counter-clockwise, the travel sequence is 3 -> 2 -> 1 -> 4.","solution":"def road_trip(n, fun_ratings, d): highest_fun = max(fun_ratings) start_index = fun_ratings.index(highest_fun) + 1 if d == 1: # Clockwise sequence = [(start_index + i - 1) % n + 1 for i in range(n)] else: # Counter-clockwise sequence = [(start_index - i - 1) % n + 1 for i in range(n)] return sequence"},{"question":"Example Input 7 2 (()()()) 4 1 Output 1 3 New Question Example Input 8 4 ((()()())) 5 2 8 1 Output 2 2 0 4","solution":"def reverse_words(s: str) -> str: Reverses the order of words in the string s. Parameters: s (str): The input string containing words separated by spaces. Returns: str: A string with the order of words reversed. # Split the string into words words = s.split() # Reverse the list of words reversed_words = words[::-1] # Join the words back into a single string with spaces in between return \' \'.join(reversed_words)"},{"question":"Let\'s consider two strings s1 and s2. Let s be the concatenation of s1 and s2, denoted as s = s1 + s2. The task is to determine if it\'s possible to reorder the characters of s to form a palindrome. A palindrome is a string that reads the same forwards and backwards, like \\"racecar\\" or \\"madam\\". For example, \\"abc\\" can\'t be rearranged into a palindrome, while \\"aabb\\" can be rearranged into \\"abba\\" or \\"baab\\". You are given an integer n (1 le n le 1000) representing the number of test cases, and for each test case, the strings s1 and s2. Write a program that determines for each test case if it\'s possible to form a palindrome by rearranging the characters of s. ---- **Input** The first line contains an integer n (1 le n le 1000) — the number of test cases. Each test case consists of two lines, containing two strings s1 and s2 (1 le |s1|, |s2| le 20). The characters in each string are lowercase English letters. **Output** For each test case, print \\"YES\\" if it\'s possible to rearrange the characters of s to form a palindrome. Otherwise, print \\"NO\\". ---- **Examples** Input 3 aabb ccdd abc def ab ba Output YES NO YES ---- **Explanation** In the first test case, concatenating \\"aabb\\" and \\"ccdd\\" gives \\"aabbccdd\\", which can be rearranged to form the palindrome \\"abcdcdba\\". In the second test case, concatenating \\"abc\\" and \\"def\\" gives \\"abcdef\\", which cannot be rearranged to form a palindrome. In the third test case, concatenating \\"ab\\" and \\"ba\\" gives \\"abba\\", which can be rearranged to form the palindrome \\"abba\\".","solution":"def can_form_palindrome(n, test_cases): Determines for each test case if it\'s possible to form a palindrome by rearranging the characters of the concatenation of s1 and s2. Parameters: n (int): Number of test cases test_cases (list of tuples): Each tuple contains two strings, s1 and s2 Returns: list of str: List containing \\"YES\\" or \\"NO\\" for each test case results = [] for s1, s2 in test_cases: s = s1 + s2 # Count the frequency of each character in the concatenated string char_count = {} for char in s: if char not in char_count: char_count[char] = 0 char_count[char] += 1 # Check the number of characters with an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged to form a palindrome if it has at most one character with an odd frequency if odd_count <= 1: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Problem Bruce Wayne is hosting an event at Wayne Enterprises and has asked Alfred to organize the attendees into small, equal-sized groups for better interaction. Alfred\'s challenge is to take a list of attendees and distribute them into the minimum number of groups such that the size of each group is between a and b, inclusive. Each attendee can only belong to one group. To aid Alfred, you need to write a program that reads the number of attendees and the range of permissible group sizes, and then outputs the minimum number of groups needed. Constraints * 1 ≤ n ≤ 1000 (number of attendees) * 1 ≤ a ≤ b ≤ 100 (permissible group size range) Input The input is given in the following format: ``` n a b ``` Where `n` is the number of attendees, `a` is the minimum group size, and `b` is the maximum group size. Output Output the minimum number of groups needed to organize the attendees according to the constraints. Examples Input ``` 15 4 5 ``` Output ``` 3 ``` Input ``` 100 7 10 ``` Output ``` 10 ``` Input ``` 25 1 25 ``` Output ``` 1 ``` Explanation of Examples In the first example, you can split 15 attendees into 3 groups, each having exactly 5 members. In the second example, it is possible to form a minimum of 10 groups of 10 attendees each, fulfilling the condition as 7 ≤ 10 ≤ 10. In the third example, you can have one group containing all 25 attendees since the range of permissible group size allows it.","solution":"def minimize_groups(n, a, b): Returns the minimum number of groups needed to organize the attendees. Parameters: n (int): Number of attendees a (int): Minimum group size b (int): Maximum group size Returns: int: Minimum number of groups # To minimize the number of groups, we should use the largest group size possible return (n + b - 1) // b # The ceiling of n / b"},{"question":"Tom is organizing his bookshelf, which contains his extensive collection of books. Each book has a thickness of `t_i` millimeters. Tom wants to divide his books into two piles such that the absolute difference in the total thickness of the books in each pile is minimized. Write a function that determines the minimum possible absolute difference Tom can achieve between the total thickness of the two piles. -----Input----- The first line contains a single integer `n` (1 ≤ n ≤ 20), the number of books. The second line contains `n` integers `t_1, t_2, ..., t_n` (1 ≤ t_i ≤ 1000), where `t_i` is the thickness of the `i`-th book. -----Output----- Print the minimum possible absolute difference between the total thickness of the two piles. -----Example----- Input 3 1 2 3 Output 0 Input 4 10 20 30 25 Output 5 -----Note----- In the first example, Tom can split the books into two piles with thicknesses [1, 2] and [3], yielding a difference of |(1 + 2) - 3| = 0. In the second example, Tom can split the books into two piles with thicknesses [10, 25] and [20, 30], yielding a difference of |(10 + 25) - (20 + 30)| = 5.","solution":"def min_diff_books(n, thicknesses): total_sum = sum(thicknesses) half_sum = total_sum // 2 dp = [False] * (half_sum + 1) dp[0] = True for t in thicknesses: for j in range(half_sum, t - 1, -1): if dp[j - t]: dp[j] = True for j in range(half_sum, -1, -1): if dp[j]: diff = total_sum - 2 * j break return diff"},{"question":"Given two integer arrays `arr1` and `arr2`, return a new array formed by multiplying each element of `arr1` by the corresponding element of `arr2`. If the arrays have different lengths, multiply up to the length of the shorter array. Example Usage: ```python multiply_arrays([1, 2, 3], [4, 5, 6]) # returns [4, 10, 18] multiply_arrays([1, 2], [3, 4, 5]) # returns [3, 8] multiply_arrays([7, 8, 9], [1, 2]) # returns [7, 16] ```","solution":"def multiply_arrays(arr1, arr2): Multiplies each element of arr1 by the corresponding element of arr2. If the arrays have different lengths, multiplies up to the length of the shorter array. :param arr1: List[int], the first array of integers :param arr2: List[int], the second array of integers :return: List[int], the resulting array of the multiplications return [a * b for a, b in zip(arr1, arr2)]"},{"question":"A sequence of operations is performed on a string consisting of only lowercase letters. The operations include inserting a character at any position in the string, deleting a character from any position, and querying the total number of distinct characters in the string. Implement a data structure that efficiently supports these operations. You need to write three functions: 1. `insert_character(string, position, character)`: Insert the character at the specified position in the current string. The position is zero-indexed. 2. `delete_character(string, position)`: Delete the character at the specified position in the current string. 3. `count_distinct_characters(string)`: Return the number of distinct characters currently in the string. -----Constraints----- - The length of the string will be at most 10000 characters. - The number of operations will be at most 1000. - All input characters are lowercase English letters. -----Input----- Input is given from Standard Input in the following format: The first line contains the initial string. Each of the next lines begins with an operation keyword (\\"insert\\", \\"delete\\", \\"count\\"). If the operation is \\"insert\\", two additional inputs follow: the position and the character. If the operation is \\"delete\\", one additional input follows: the position. -----Output----- For each \\"count\\" operation, print the number of distinct characters in the current string. -----Sample Input----- abcde insert 3 z delete 0 count -----Sample Output----- 5","solution":"def insert_character(string, position, character): Inserts a character at the specified position in the string. return string[:position] + character + string[position:] def delete_character(string, position): Deletes the character at the specified position in the string. return string[:position] + string[position+1:] def count_distinct_characters(string): Returns the number of distinct characters in the string. return len(set(string))"},{"question":"Given an integer array, nums, move all instances of a specific target value to the end of the array while maintaining the relative order of the non-target elements. Do this in-place with minimal additional space. For instance, if nums = [0, 1, 0, 3, 12] and the target value is 0, the output should be [1, 3, 12, 0, 0]. If nums = [4, 2, 4, 1, 4, 3, 4] and the target value is 4, the output should be [2, 1, 3, 4, 4, 4, 4]. Function Description Complete the function move_target_to_end in the editor below. The function must return the modified array with all instances of the target value moved to the end. move_target_to_end has the following parameter(s): nums: the list of integers to modify. target: the integer value to move to the end. Input Format The first line contains an integer t, the number of test cases. Each of the next t pairs of lines is as follows: - The first line contains three space-separated integers, the number of elements n in the array, the target value, and the maximum possible value for elements in the array (not used directly in the problem, but for clarity). - The second line contains n integers describing the elements in nums. Constraints 1 ≤ t ≤ 10 1 ≤ n ≤ 1000 -1,000 ≤ nums[i], target ≤ 1,000 Output Format For each test case, print the modified array on a new line, with all instances of the target value moved to the end. Sample Input 2 5 0 1000 0 1 0 3 12 7 4 1000 4 2 4 1 4 3 4 Sample Output 1 3 12 0 0 2 1 3 4 4 4 4 Explanation In the first test case, we move all 0\'s to the end, resulting in [1, 3, 12, 0, 0]. In the second test case, we move all 4\'s to the end, resulting in [2, 1, 3, 4, 4, 4, 4].","solution":"def move_target_to_end(nums, target): Moves all instances of target value to the end of the array while maintaining the relative order of non-target elements. Modifies the array in place. Parameters: nums (list of int): The array of integers target (int): The target integer to move to the end Returns: list of int: The modified array with all instances of target value at the end index = 0 # index to place the next non-target element # Iterate through the array for num in nums: if num != target: nums[index] = num index += 1 # Fill the remaining part of nums with the target while index < len(nums): nums[index] = target index += 1 return nums"},{"question":"You are given a matrix of size N x M. Each element of the matrix is either a 0 or a 1. The matrix represents a farmland where 1 denotes a plot with crops, and 0 denotes an empty plot. You need to find the largest rectangular submatrix (not necessarily square) that contains only 1\'s and return its area. ----Input---- - The first line of input contains two integers N and M which denote the number of rows and columns in the matrix, respectively. - The next N lines contain M space-separated integers (either 0 or 1) representing the elements of the matrix. ----Output---- - Print a single integer, the area of the largest rectangular submatrix that contains only 1\'s. ----Constraints---- - 1 le N, M le 1000 - Each cell of the matrix contains either 0 or 1. ----Example Input---- 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 ----Example Output---- 6 ----Example Explanation---- The largest rectangular submatrix with all 1\'s has an area of 6. The rectangle is formed by the lower right 2x3 section of the matrix. 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0","solution":"def maximalRectangle(matrix): Given a binary matrix filled with 0\'s and 1\'s, find the largest rectangle containing only 1\'s and return its area. if not matrix: return 0 max_area = 0 n = len(matrix) m = len(matrix[0]) heights = [0] * (m + 1) for row in matrix: for i in range(m): if row[i] == 1: heights[i] += 1 else: heights[i] = 0 stack = [-1] for i in range(m + 1): while heights[i] < heights[stack[-1]]: h = heights[stack.pop()] w = i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) return max_area"},{"question":"Problem description: A new ride at the amusement park is gaining popularity. To ensure a smooth experience, the operators have decided to introduce a monitoring system where they need to count the number of visitors within a specific height range. Given a list of visitors\' heights and a height range [low, high], you need to determine how many visitors fall within this range (inclusive). Input: The first line of the input contains an integer T, representing the number of test cases. Each test case starts with an integer N, representing the number of visitors. The second line contains N integers, denoting the heights of the visitors. The third line contains two integers low and high, representing the height range. Output: For each test case, output a single line containing the number of visitors whose heights fall within the provided range [low, high]. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ height of each visitor ≤ 300 1 ≤ low ≤ high ≤ 300 Example: Input: 2 5 120 130 150 160 170 130 160 4 100 200 150 180 140 190 Output: 3 2","solution":"def count_visitors_in_height_range(T, test_cases): Count the number of visitors in the given height range for multiple test cases. Args: T (int): Number of test cases. test_cases (list of tuples): Each tuple contains: - N (int): Number of visitors. - heights (list of int): Heights of N visitors. - range (tuple of int): (low, high) height range. Returns: list of int: Number of visitors in the height range for each test case. results = [] for case in test_cases: N, heights, height_range = case low, high = height_range count = sum(1 for height in heights if low <= height <= high) results.append(count) return results"},{"question":"A garden has m flower beds arranged in a straight line. Each flower bed is of equal width and can contain one or more flowers. A gardener wants to distribute n flowers in the flower beds, such that every flower bed contains at least one flower. Given the number of flower beds m and the number of flowers n, calculate the number of distinct ways to distribute the flowers across the flower beds. Input The input consists of a single line containing two integers m (1 ≤ m ≤ 100) and n (m ≤ n ≤ 200) — the number of flower beds and the number of flowers, respectively. Output Output a single integer — the number of distinct ways to distribute the flowers in the flower beds such that each flower bed has at least one flower. Example Input 4 10 Output 84 Note In the example, there are 4 flower beds and 10 flowers. One possible distribution is [4, 1, 3, 2], meaning the first bed gets 4 flowers, the second gets 1 flower, the third gets 3 flowers, and the fourth gets 2 flowers. The distinct distributions count the ways of rearranging distributions like these.","solution":"from math import comb def count_flower_distributions(m, n): Returns the number of distinct ways to distribute n flowers in m flower beds, such that each flower bed contains at least one flower. This can be calculated using the stars and bars method: comb(n-1, m-1) return comb(n-1, m-1)"},{"question":"There is a new board game called Tile Wizard, which involves placing tiles on an n x n square grid. Each tile represents a different type of terrain, such as forest, mountain, or river. The goal is to place the tiles on the grid following certain rules to cover the entire grid. Given n and the types of tiles available, determined by a list of integers where each integer represents the number of tiles for a type of terrain, your task is to determine if it is possible to cover the entire grid without any tiles left over or any empty spaces. The rules are as follows: - Each tile can cover exactly 1 cell on the grid. - You must use all the tiles provided, and they should fit exactly into the n x n grid. Input: - The first line contains an integer n (1 ≤ n ≤ 100), the size of the grid. - The second line contains k integers representing the count of each type of terrain tile (1 ≤ k ≤ 100, 1 ≤ count of each type of tile ≤ 10,000). Output: - Print \\"YES\\" if it is possible to place all the tiles to cover the grid exactly, otherwise print \\"NO\\". Examples Input 4 8 4 4 Output YES Input 3 5 3 2 Output NO Explanation In the first example, n is 4, so we need 16 tiles to cover the entire grid. We have 8, 4, and 4 tiles of different types, making a total of 16 tiles, which perfectly covers the 4x4 grid. In the second example, n is 3, so we need 9 tiles to cover the entire grid. However, we have 5 + 3 + 2 = 10 tiles, which is more than needed, thus it\'s not possible to use all tiles without leaving left over.","solution":"def can_cover_grid(n, tile_counts): Determine if it is possible to cover an n x n grid using the given tiles exactly. :param n: int -- size of the grid (n x n) :param tile_counts: list -- number of tiles available for each terrain type :return: str -- \\"YES\\" if it\'s possible to cover the grid exactly, otherwise \\"NO\\" total_tiles_needed = n * n total_tiles_available = sum(tile_counts) if total_tiles_needed == total_tiles_available: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a list of student records which contain their names and the scores in three subjects: Math, Science, and English. Your task is to find the average score for each student and determine their grade based on the average score. The grade criteria are as follows: - 90 <= average score <= 100: Grade \'A\' - 80 <= average score < 90: Grade \'B\' - 70 <= average score < 80: Grade \'C\' - 60 <= average score < 70: Grade \'D\' - average score < 60: Grade \'F\' Write a function `calculateGrades` that takes a list of dictionaries as input where each dictionary contains the student\'s name and their scores in the subjects. The function should return a list of dictionaries with each student\'s name, average score, and their grade. Example 1: Input: students = [ {\\"name\\": \\"John\\", \\"Math\\": 85, \\"Science\\": 90, \\"English\\": 88}, {\\"name\\": \\"Jane\\", \\"Math\\": 79, \\"Science\\": 72, \\"English\\": 70} ] Output: [ {\\"name\\": \\"John\\", \\"average_score\\": 87.67, \\"grade\\": \\"B\\"}, {\\"name\\": \\"Jane\\", \\"average_score\\": 73.67, \\"grade\\": \\"C\\"} ] Example 2: Input: students = [ {\\"name\\": \\"Alice\\", \\"Math\\": 92, \\"Science\\": 95, \\"English\\": 94}, {\\"name\\": \\"Bob\\", \\"Math\\": 58, \\"Science\\": 60, \\"English\\": 55} ] Output: [ {\\"name\\": \\"Alice\\", \\"average_score\\": 93.67, \\"grade\\": \\"A\\"}, {\\"name\\": \\"Bob\\", \\"average_score\\": 57.67, \\"grade\\": \\"F\\"} ] Your Task: You don\'t need to read input or print anything. Complete the function `calculateGrades` which takes a list of dictionaries `students` as input parameter and returns a list of dictionaries with each student\'s \\"name\\", \\"average_score\\", and \\"grade\\". Expected Time Complexity: O(n), where n is the number of students. Expected Auxiliary Space: O(1) (excluding the input and output space) Constraints: - The input list will contain at least one student record. - Each student\'s scores in all subjects will be in the range 0 to 100 inclusive. - Each student\'s name will be a string containing alphabets only.","solution":"def calculateGrades(students): def compute_grade(average_score): if 90 <= average_score <= 100: return \'A\' elif 80 <= average_score < 90: return \'B\' elif 70 <= average_score < 80: return \'C\' elif 60 <= average_score < 70: return \'D\' else: return \'F\' result = [] for student in students: average_score = round((student[\\"Math\\"] + student[\\"Science\\"] + student[\\"English\\"]) / 3, 2) grade = compute_grade(average_score) result.append({\\"name\\": student[\\"name\\"], \\"average_score\\": average_score, \\"grade\\": grade}) return result"},{"question":"You are given an integer array nums and an integer k. Find the length of the smallest contiguous subarray whose sum is greater than or equal to k. If no such subarray exists, return -1. A contiguous subarray is a subarray that appears consecutively within the original array. -----Input----- - First line contains an integer n (1 ≤ n ≤ 10^5) which is the number of elements in the array. - Second line contains n integers representing the elements of the array nums (-10^4 ≤ nums[i] ≤ 10^4). - Third line contains an integer k (1 ≤ k ≤ 10^9). -----Output----- Output a single integer representing the length of the smallest contiguous subarray whose sum is greater than or equal to k. Print -1 if no such subarray exists. -----Examples----- Input 5 1 2 3 4 5 11 Output 3 Input 6 2 3 1 2 4 3 7 Output 2 Input 3 1 1 1 5 Output -1 -----Note----- In the first example, the subarray [3, 4, 5] has the sum 12 which is greater than 11 and has length 3. In the second example, the subarray [4, 3] has the sum 7 which is greater than or equal to 7 and has length 2. In the third example, no subarray of nums sums to 5 or more, thus the output is -1.","solution":"def smallest_subarray_with_sum(nums, k): Returns the length of the smallest contiguous subarray whose sum is greater than or equal to k. If no such subarray exists, return -1. n = len(nums) min_length = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += nums[end] while current_sum >= k: min_length = min(min_length, end - start + 1) current_sum -= nums[start] start += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"In a certain country, mobile numbers follow a specific format. Each mobile number consists of 10 digits, without any separators. However, due to common usage, some people often format numbers with spaces, hyphens, or even parentheses for ease of readability. For example, the following are considered different ways of writing the same mobile number: - \\"1234567890\\" - \\"123-456-7890\\" - \\"(123) 456 7890\\" - \\"123 456 7890\\" Given a list of such mobile numbers, your task is to determine how many unique mobile numbers are there, considering different formatting styles. To achieve this, you need to normalize all mobile numbers by removing any non-numeric characters and then count the unique ones. -----Input----- The first line contains integer number n (1 ≤ n ≤ 1000) — the number of mobile numbers in the list. The following n lines contain mobile numbers, one number per line. Each number can contain digits, spaces, hyphens, and parentheses. The total length of each number string will not exceed 20 characters. -----Output----- Print the number of unique mobile numbers after normalization. -----Examples----- Input 5 123-456-7890 123 456 7890 1234567890 (123) 456-7890 9876543210 Output 2 Input 3 987-654-3210 (987)654 3210 8765432100 Output 2","solution":"import re def normalize_number(number): Normalize the mobile number by removing any non-numeric characters. return re.sub(r\'D\', \'\', number) def count_unique_numbers(numbers): Count the number of unique normalized mobile numbers. normalized_numbers = set(normalize_number(number) for number in numbers) return len(normalized_numbers)"},{"question":"A company is organizing a coding competition where each participant must solve a sequence of programming problems. You are tasked with writing a program that helps manage and monitor the progress of participants during the competition. Each participant has a unique ID starting from 1 to N. They will be solving a predefined number of problems, with the results of problem-solving recorded in a matrix. The matrix has N rows and M columns, where each row represents a participant and each column represents a problem. The element in the i-th row and j-th column is either 1 (indicating the problem was solved correctly) or 0 (indicating the problem was not solved). Your task is to find the participant who solved the most number of problems and the number of problems they solved. If there are multiple participants with the same highest number of solved problems, return the smallest ID among them. ------ Input Format ------ - The first line of input will contain two integers N (the number of participants) and M (the number of problems). - Each of the next N lines contains M space-separated integers, representing the results matrix. ------ Output Format ------ - Output two integers: the ID of the participant who solved the most problems and the number of problems they solved. ------ Constraints ------ 1 ≤ N ≤ 1000 1 ≤ M ≤ 1000 - Each element in the results matrix is either 0 or 1. ------ Sample Input 1 ------ 5 4 1 0 0 1 1 1 1 0 0 1 0 1 1 1 0 0 0 0 1 1 ------ Sample Output 1 ------ 2 3 ------ Explanation 1 ------ Participant 2 solved 3 problems, which is the highest number solved by any participant. Hence, the output is 2 3. ------ Sample Input 2 ------ 3 3 1 0 0 0 1 0 0 0 1 ------ Sample Output 2 ------ 1 1 ------ Explanation 2 ------ All participants solved exactly 1 problem. The participant with the smallest ID is participant 1. Hence, the output is 1 1.","solution":"def find_top_participant(N, M, results): max_solved = -1 top_participant_id = -1 for i in range(N): solved_problems = sum(results[i]) if solved_problems > max_solved or (solved_problems == max_solved and top_participant_id > i + 1): max_solved = solved_problems top_participant_id = i + 1 return top_participant_id, max_solved"},{"question":"You are given two binary numbers represented as strings. Your task is to write a function that adds these two binary numbers and returns the result as a binary string. Input The input consists of two non-empty binary strings. Each string represents a binary number. The length of each string does not exceed 10^4 characters. Output The output should be a single binary string that represents the sum of the input binary numbers. Function Signature ```python def add_binary(a: str, b: str) -> str: ``` Examples Example 1: ```python Input a = \\"11\\" b = \\"1\\" Output \\"100\\" ``` Example 2: ```python Input a = \\"1010\\" b = \\"1011\\" Output \\"10101\\" ``` Note - The lengths of `a` and `b` are at most 10^4. - The strings `a` and `b` will only contain characters \'0\' or \'1\'. - You must not use any built-in functions related to binary conversions in higher-level programming languages. Instead, follow the manual process of binary addition as you would on paper.","solution":"def add_binary(a: str, b: str) -> str: Given two binary numbers represented as strings, returns their sum as a binary string. # Initialize result string and carry result = [] carry = 0 # Reverse the strings to add from least significant digit a = a[::-1] b = b[::-1] # Get the maximum length of the binaries max_len = max(len(a), len(b)) for i in range(max_len): # Get the binary digit for a and b or 0 if the index exceeds the length digit_a = int(a[i]) if i < len(a) else 0 digit_b = int(b[i]) if i < len(b) else 0 # Calculate the sum of the current digits and the carry total = digit_a + digit_b + carry # The resulting digit (0 or 1) is the mod 2 of total result_digit = total % 2 result.append(str(result_digit)) # Calculate the new carry (0 or 1) carry = total // 2 # If there\'s any carry left, add it as the new most significant digit if carry: result.append(\'1\') # Reverse the result list to get the final binary sum string return \'\'.join(result[::-1])"},{"question":"Jack loves playing video games, and he has recently been fascinated by a game that involves navigating through a grid of obstacles represented by an NxM matrix. Each cell in the matrix is either free (represented by a \'.\') or blocked (represented by a \'#\'). Jack starts at the top-left corner of the matrix and aims to reach the bottom-right corner. However, he can only move right or down one cell at a time. You need to determine if there exists a path from the top-left corner to the bottom-right corner of the matrix. -----Input----- First line contains an integer T, which denotes the number of testcases. Each of the T test cases contains: - First line contains two integers N and M, which represents the number of rows and columns in the matrix respectively. - Next N lines each contain a string of length M consisting of characters \'.\' and \'#\'. -----Output----- For each test case, print \\"YES\\" if there exists a path from the top-left corner to the bottom-right corner of the matrix. Otherwise, print \\"NO\\". -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N, M ≤ 1000 -----Example----- Input: 2 3 3 ... .#. ... 3 3 .#. . ... Output: YES NO -----Explanation----- Example case 1. In this example, there is a clear path from the top-left corner to the bottom-right corner. Example case 2. In this example, there is no path from the top-left corner to the bottom-right corner due to the obstacles.","solution":"def is_path_exists(matrix, N, M): if matrix[0][0] == \'#\' or matrix[N-1][M-1] == \'#\': return \\"NO\\" def dfs(x, y): if x == N-1 and y == M-1: return True if x < 0 or y < 0 or x >= N or y >= M or matrix[x][y] == \'#\': return False matrix[x][y] = \'#\' # Mark as visited by converting to the obstacle # check right and down for possible paths if dfs(x+1, y) or dfs(x, y+1): return True return False return \\"YES\\" if dfs(0, 0) else \\"NO\\" def process_test_cases(test_cases): results = [] for case in test_cases: N, M, matrix = case[\'N\'], case[\'M\'], case[\'matrix\'] results.append(is_path_exists(matrix, N, M)) return results"},{"question":"Sarah is organizing a team event at her company and wants to distribute gift bags of treats to each employee. Each gift bag must contain exactly two types of treats, and she wants to ensure that no two bags have the same combination of treats regardless of the order. Given a list of treats, help Sarah determine the total number of unique gift bags she can create. Input The first line contains T, the number of test cases. The description of T test cases follows. Each test case contains two lines. The first line contains an integer N, denoting the number of types of treats available. The second line contains N space-separated integers representing the types of treats. Output For each test case, output a single line containing the total number of unique gift bags. Constraints 1 ≤ T ≤ 10 2 ≤ N ≤ 1000 1 ≤ treat type ≤ 10000 SAMPLE INPUT 2 4 1 2 3 4 3 1 2 2 SAMPLE OUTPUT 6 1","solution":"def unique_gift_bags(t, test_cases): Given the number of test cases and a list of list of treats per test case, returns a list with the number of unique gift bags possible for each test case. results = [] for i in range(t): n, treats = test_cases[i] unique_treats = set(treats) count = len(unique_treats) if count < 2: results.append(0) else: # Using combinatorial formula nC2 = n * (n-1) / 2 for unique pairs results.append(count * (count - 1) // 2) return results # Auxiliary function to process input strings into appropriate function inputs def process_input(input_string): input_lines = input_string.strip().split(\'n\') t = int(input_lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(input_lines[index]) treats = list(map(int, input_lines[index + 1].split())) test_cases.append((n, treats)) index += 2 return t, test_cases"},{"question":"You are given an m x n matrix of characters grid. You need to design an algorithm to find the word from a given list of words that is embedded in the matrix. The embedded word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once. Implement the function `findWord(grid, word)` that will return True if the word is embedded in the matrix, and False otherwise. Example: Input: grid = [ [\'A\',\'B\',\'C\',\'E\'], [\'S\',\'F\',\'C\',\'S\'], [\'A\',\'D\',\'E\',\'E\'] ] word = \\"ABCCED\\" Output: True Explanation: The word \\"ABCCED\\" can be found in the grid by combining the letters as follows: (0,0) A -> (0,1) B -> (0,2) C -> (1,2) C -> (2,2) E -> (2,1) D. Your Task: You don\'t need to read or print anything. Your task is to complete the function `findWord()` which takes `grid` and `word` as input parameters and returns a boolean value indicating if the word exists in the grid. Expected Time Complexity: O(m * n * 4^len(word)) Expected Space Complexity: O(len(word)) Constraints: 1 <= m, n <= 200 1 <= len(word) <= 10 grid contains only uppercase and lowercase English letters. Each given word contains only uppercase and lowercase English letters.","solution":"def findWord(grid, word): rows, cols = len(grid), len(grid[0]) def dfs(x, y, idx): if idx == len(word): return True if x < 0 or x >= rows or y < 0 or y >= cols or grid[x][y] != word[idx]: return False temp = grid[x][y] grid[x][y] = \'#\' found = (dfs(x + 1, y, idx + 1) or dfs(x - 1, y, idx + 1) or dfs(x, y + 1, idx + 1) or dfs(x, y - 1, idx + 1)) grid[x][y] = temp return found for i in range(rows): for j in range(cols): if grid[i][j] == word[0] and dfs(i, j, 0): return True return False"},{"question":"Given a binary tree, you need to find the maximum value of the node levels. The node level is defined as the horizontal distance of a node from the root. For the root node, the level is 0. For any other node, the level is equal to the parent node\'s level plus 1. Your task is to determine the maximum value of the nodes at each level and print those values one by one from level 0 to level h-1, where h is the height of the tree. Input The first line contains an integer n (1 ≤ n ≤ 10^5) indicating the number of nodes. The next n lines each contain three integers v, l, r, where v is the value of the node and l and r are the values of the left and right child nodes. If a child node does not exist, it is represented by -1. Output Print the maximum value of the nodes at each level in separate lines. # Example Input ``` 7 1 2 3 2 4 5 3 -1 6 4 -1 -1 5 -1 -1 6 7 -1 7 -1 -1 ``` Output ``` 1 3 6 7 ``` # Explanation The binary tree for the given input is: ``` 1 / 2 3 / 4 5 6 7 ``` - Level 0: `1` - Level 1: `max(2, 3) = 3` - Level 2: `max(4, 5, 6) = 6` - Level 3: `7`","solution":"from collections import defaultdict, deque def max_values_at_levels(n, nodes): if n == 0: return [] tree = defaultdict(lambda: [-1, -1]) for v, l, r in nodes: tree[v] = [l, r] levels = defaultdict(list) queue = deque([(1, 0)]) # (node value, level) while queue: node, level = queue.popleft() if node == -1: continue levels[level].append(node) left, right = tree[node] queue.append((left, level + 1)) queue.append((right, level + 1)) result = [] for level in range(len(levels)): result.append(max(levels[level])) return result # Helper function to parse input and call the main function def solve(): import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) nodes = [] for i in range(n): v, l, r = int(data[3 * i + 1]), int(data[3 * i + 2]), int(data[3 * i + 3]) nodes.append((v, l, r)) result = max_values_at_levels(n, nodes) for value in result: print(value)"},{"question":"You are given a string `S` consisting of lowercase English letters and a target string `T` which is also a string consisting of lowercase English letters. Your task is to find the length of the shortest substring in string `S` that contains all the characters of string `T`. If no such substring exists, return -1. # Constraints: - `1 ≤ len(S) ≤ 10^5` - `1 ≤ len(T) ≤ 10^5` - `S` and `T` will only contain lowercase English letters. # Sample Input 1 ``` S = \\"adobecodebanc\\" T = \\"abc\\" ``` # Sample Output 1 ``` 4 ``` # Explanation: The shortest substring of `S` that contains all characters of `T` is \\"banc\\" which has length 4. # Sample Input 2 ``` S = \\"a\\" T = \\"aa\\" ``` # Sample Output 2 ``` -1 ``` # Explanation: There is no substring in `S` that contains all characters of `T`.","solution":"from collections import Counter def min_window_substr_len(S, T): Returns the length of the shortest substring in S that contains all characters of T. If no such substring exists, returns -1. if not S or not T or len(S) < len(T): return -1 count_T = Counter(T) count_window = {} left = 0 min_len = float(\'inf\') formed = 0 required = len(count_T) for right in range(len(S)): char = S[right] count_window[char] = count_window.get(char, 0) + 1 if char in count_T and count_window[char] == count_T[char]: formed += 1 while left <= right and formed == required: char = S[left] min_len = min(min_len, right - left + 1) count_window[char] -= 1 if char in count_T and count_window[char] < count_T[char]: formed -= 1 left += 1 return min_len if min_len != float(\'inf\') else -1"},{"question":"You are given an array of integers. Determine the maximum product that can be obtained from either: 1. Three of its elements. 2. Two of its elements and the integer 1. Return the highest value obtained from the two possibilities. Input - The first line contains one integer n (3 ≤ n ≤ 100) — the number of elements in the array. - The second line contains n integers a_1, a_2, ..., a_n (−10^3 ≤ a_i ≤ 10^3). Output Print a single integer — the maximum product possible based on the described rules. Examples Input 5 1 10 2 6 -1 Output 120 Input 4 -10 -10 5 2 Output 500 Note In the first example, the maximum product is obtained by taking the elements 10, 6, and 2. In the second example, the maximum product is obtained by taking the elements -10, -10, and 5, resulting in a product of 500.","solution":"def max_product(arr): Determine the maximum product that can be obtained from either: 1. Three of its elements. 2. Two of its elements and the integer 1. arr.sort() # Consider the maximum from either top 3 numbers or minimum 2 (negative) and highest positive return max(arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1])"},{"question":"You are given a list of flights between cities with their corresponding costs. Your objective is to determine the minimum cost to travel from a starting city to a destination city, with at most a specified number of layovers. Define a function `find_cheapest_flight(start, end, flights, max_layovers)` that calculates the lowest possible cost of traveling between the `start` city and the `end` city, allowing for up to `max_layovers` layovers. The function should take the following parameters: - `start` (string): the starting city. - `end` (string): the destination city. - `flights` (list of tuples): where each tuple contains three elements `(source, destination, cost)`, representing a direct flight from `source` to `destination` with a `cost`. - `max_layovers` (int): the maximum number of layovers allowed. The function should return an integer representing the minimum cost of the trip. If no valid route exists within the given constraints, the function should return -1. # Examples: ```python flights = [ (\\"A\\", \\"B\\", 100), (\\"B\\", \\"C\\", 100), (\\"A\\", \\"C\\", 300), (\\"C\\", \\"D\\", 200), (\\"B\\", \\"D\\", 200) ] find_cheapest_flight(\\"A\\", \\"D\\", flights, 1) => 300 # A -> B -> D find_cheapest_flight(\\"A\\", \\"D\\", flights, 2) => 400 # A -> B -> C -> D find_cheapest_flight(\\"A\\", \\"D\\", flights, 0) => -1 # No direct flight from A to D find_cheapest_flight(\\"A\\", \\"C\\", flights, 0) => 300 # A -> C ``` # Constraints: - All city names are represented by strings of upper-case English letters. - The cost of each flight is a positive integer. - There will be at most 1000 flights. - The maximum number of layovers allowed will be between 0 and 100 (inclusive).","solution":"import heapq from collections import defaultdict, deque def find_cheapest_flight(start, end, flights, max_layovers): Finds the cheapest flight from start to end with up to max_layovers layovers. Args: start (str): Starting city. end (str): Destination city. flights (list): List of tuples (source, destination, cost). max_layovers (int): Maximum number of layovers allowed. Returns: int: Minimum cost of the trip or -1 if no valid route exists. # Create a graph from the flights data graph = defaultdict(list) for src, dst, cost in flights: graph[src].append((dst, cost)) # Min-heap to store the cost and current city (cost, city, stops) heap = [(0, start, 0)] visited = defaultdict(lambda: float(\'inf\')) # Perform Dijkstra-like algorithm but keep track of stops/layovers while heap: current_cost, current_city, current_stops = heapq.heappop(heap) # If destination is reached with allowable stops if current_city == end: return current_cost if current_stops <= max_layovers: for neighbor, price in graph[current_city]: new_cost = current_cost + price if new_cost < visited[(neighbor, current_stops + 1)]: visited[(neighbor, current_stops + 1)] = new_cost heapq.heappush(heap, (new_cost, neighbor, current_stops + 1)) return -1"},{"question":"You are given a string S containing only characters \'a\', \'b\', and \'c\'. Your task is to determine the length of the longest substring that can be formed from S which contains at most one \'a\', at most one \'b\', and at most one \'c\'. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. Each of the next T lines contains a string S. ------ Output ------ For each test case, output a single line - the length of the longest substring that can be formed as described. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ |S| ≤ 1000 ------ Sample Input ------ 3 abc aa abccba ------ Sample Output ------ 3 2 3 ------ Explanation ------ In the first test case, the entire string \'abc\' is the longest possible substring satisfying the condition. In the second test case, the longest valid substring is \'a\', with a length of 1. In the third test case, one of the longest valid substrings is \'abc\', with a length of 3.","solution":"def longest_substring_max_one_a_b_c(s): Returns the length of the longest substring with at most one \'a\', one \'b\', and one \'c\'. max_length = 0 start = 0 counts = {\'a\': 0, \'b\': 0, \'c\': 0} for end in range(len(s)): if s[end] in counts: counts[s[end]] += 1 while all(count <= 1 for count in counts.values()) is False: if s[start] in counts: counts[s[start]] -= 1 start += 1 max_length = max(max_length, end - start + 1) return max_length def process_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) results = [] for i in range(1, T + 1): results.append(longest_substring_max_one_a_b_c(lines[i])) return results"},{"question":"A gardener wants to plant a row of trees, such that every tree has a specific distance from its neighbor and no two trees have the same height. Given the height of trees as an array, help the gardener determine the minimum possible height difference between any two adjacent trees when they are arranged optimally. -----Input:----- - First-line will contain N, the number of trees. - The second line contains N integers representing the heights of the trees. -----Output:----- Output a single integer, the minimum height difference between any two adjacent trees when arranged optimally. -----Constraints----- - 1 leq N leq 1000 - 1 leq height leq 10000 -----Sample Input:----- 5 4 8 2 6 5 -----Sample Output:----- 1 -----Explanation:----- Optimal arrangement of tree heights: [4, 5, 6, 8, 2] or [2, 4, 5, 6, 8] The minimum difference between adjacent heights is 1 (between 4 and 5, or 5 and 6). Hence, the output is 1.","solution":"def minimum_height_difference(N, heights): Returns the minimum possible height difference between any two adjacent trees when they are arranged optimally. Args: - N: number of trees (int) - heights: list of tree heights (list of int) Returns: - Minimum height difference (int) # Sort the heights to find the minimum differences easily heights.sort() # Initialize the minimum difference as infinity min_diff = float(\'inf\') # Iterate through the sorted heights and find the minimum difference for i in range(1, N): min_diff = min(min_diff, heights[i] - heights[i-1]) return min_diff"},{"question":"# Problem Context Consider a grid of size `m x n` where a robot can move either down or right from any cell to the neighboring cell directly beneath or to the right of it. The robot starts at the top-left corner of the grid (cell (1, 1)) and is supposed to reach the bottom-right corner (cell (m, n)). The robot must follow a specific set of commands to move through the grid. Write a function `robot_paths(m, n)` that returns the number of unique paths the robot can take to reach the end of the grid, starting from the top-left corner and only moving either down or right at any point in time. This function should employ dynamic programming techniques to store and reuse already computed results (i.e., memorization) for efficiency. **Examples:** ```python robot_paths(3, 3) # returns 6 robot_paths(4, 4) # returns 20 ``` **Details:** - The robot_paths function should return an integer. - Your solution should aim for an optimal time complexity. - You may assume that `m` and `n` are positive integers.","solution":"def robot_paths(m, n): Returns the number of unique paths the robot can take to reach the end of an m x n grid. This is solved using dynamic programming. # Create a 2D table to store solutions to subproblems dp = [[0] * n for _ in range(m)] # There is only one way to reach any cell in the first row, which is by moving right from the start for i in range(m): dp[i][0] = 1 # There is only one way to reach any cell in the first column, which is by moving down from the start for j in range(n): dp[0][j] = 1 # Fill the dp table for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[m-1][n-1]"},{"question":"In a distant land, there exists a legendary circular playground. The playground is designed such that it contains a number of equally spaced benches placed along its circumference. The King of this land loved to organize events in this playground and ensured each bench was numbered sequentially starting from 1 up to N. One day, the King announced a grand event where he decided to use exactly K consecutive benches to form a VIP zone. The King wished to maximize the cumulative uniqueness (sum of the numbered benches) of the VIP zone. However, the King has a peculiar counting rule. The benches are considered in a circular manner, meaning, if N is reached, the counting continues from 1 again. Given N benches and a value K, find the starting bench number that maximizes the sum of K consecutive benches. Input The first line of the input contains two integers, N and K (1 ≤ K ≤ N ≤ 10^6). Output Output a single integer - the starting bench number which maximizes the sum of K consecutive benches. If there are multiple results, output the smallest starting number. Examples Input 8 3 Output 6 Input 12 5 Output 8","solution":"def find_starting_bench(N, K): Returns the starting bench number that maximizes the sum of K consecutive benches. max_sum = 0 start_bench = 1 for i in range(1, N + 1): current_sum = sum(range(i, i + K)) if i + K - 1 <= N else sum(range(i, N + 1)) + sum(range(1, i + K - N)) if current_sum > max_sum: max_sum = current_sum start_bench = i return start_bench"},{"question":"Alex likes playing the game of integers. He especially enjoys transforming arrays by applying a specific operation multiple times. The operation consists of choosing two elements from the array, removing them, and inserting their sum back into the array. He wants to know the smallest possible value in the array after applying this operation exactly (N-1) times, where N is the initial number of elements in the array. Your task is to help Alex by calculating the smallest possible value after (N-1) operations for each test case. Input The first line of the input will contain T (the number of test cases). Each test case consists of one line containing an integer N (the number of elements in the array). This is followed by a second line containing N space-separated integers representing the elements of the array. Output For every test case, print the smallest possible value in the array after the operation has been applied (N-1) times. Constraints 1 ≤ T ≤ 10 2 ≤ N ≤ 1000 1 ≤ Ai ≤ 1000 SAMPLE INPUT 2 3 1 2 3 4 4 2 5 1 SAMPLE OUTPUT 6 12","solution":"def smallest_value_after_operations(test_cases): This function takes a list of test cases and returns the smallest possible value in the array after applying the (N-1) operations for each test case. results = [] for case in test_cases: N, array = case total_sum = sum(array) results.append(total_sum) return results"},{"question":"Given an array representing the heights of buildings, you need to calculate the maximum area of a rectangle formed by using any combination of contiguous buildings. The width of each building is considered to be 1 unit. **Input** - The first line contains an integer t, the number of test cases. - For each test case, the first line contains an integer n, the number of buildings. - The second line contains n space-separated integers representing the heights of the buildings. **Output** For each test case, output a single integer which is the maximum rectangular area that can be formed with contiguous buildings. **Constraints** 1 ≤ t ≤ 100 1 ≤ n ≤ 10^5 1 ≤ height ≤ 10^9 **Scoring** - For 20 points: 1 ≤ t, n ≤ 10^2 - For 30 points: 1 ≤ t ≤ 10^3, 1 ≤ n ≤ 10^4 - For 50 points: 1 ≤ t ≤ 100, 1 ≤ n ≤ 10^5 **Sample Input** ``` 1 7 2 1 5 6 2 3 4 ``` **Sample Output** ``` 10 ``` **Explanation** In this example, the maximum rectangular area is formed by the contiguous buildings with heights 5 and 6, which gives an area of 5 * 2 = 10.","solution":"def max_histogram_area(heights): stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area def max_rectangular_area(test_cases): results = [] for n, heights in test_cases: results.append(max_histogram_area(heights)) return results"},{"question":"Alice and Bob love playing a game called Numeral Palindrome. In this game, they take turns choosing a numerical string and checking whether it is a palindrome. A palindrome is a sequence that reads the same backward as forward. Help Alice and Bob determine if the numerical string they\'ve chosen is a palindrome. -----Input----- The first line contains an integer t (1 ≤ t ≤ 100), the number of test cases. The next t lines each contain a numerical string s. The length of each string is between 1 and 1000 inclusive, and each string consists only of digits. -----Output----- For each test case, print \\"YES\\" (without the quotes) if the string is a palindrome, otherwise print \\"NO\\" (without the quotes). -----Examples----- Input 3 12321 404 123456 Output YES YES NO -----Note----- Consider the first test case. The string \\"12321\\" is a palindrome because it reads the same backward as forward. In the second test case, the string \\"404\\" is another example of a palindrome. The third test case is not a palindrome because \\"123456\\" does not read the same backward as forward.","solution":"def is_palindrome(s): Returns \\"YES\\" if the string s is a palindrome, otherwise \\"NO\\". if s == s[::-1]: return \\"YES\\" else: return \\"NO\\" def check_palindromes(t, test_cases): Given the number of test cases t and a list of numerical strings test_cases, returns a list of results where each result is \\"YES\\" if the string is a palindrome and \\"NO\\" otherwise. results = [] for s in test_cases: results.append(is_palindrome(s)) return results"},{"question":"There is a river crossing problem in which you need to get n friends across a river in the minimum possible time. The river can only be crossed by a boat that fits at most two people at a time, and you want to optimize the order in which they cross. Each friend has a different crossing time, and if two friends cross together, they do so at the rate of the slower individual\'s crossing time. Your task is to determine the minimum time required for all friends to cross the river. -----Input----- The first line contains one integer t (1 le t le 1000) — the number of test cases. The first line of each test case contains one integer n (3 le n le 100) — the number of friends. The second line of each test case contains n integers representing the crossing times for each friend. Each crossing time c_i (1 le c_i le 1000) represents the time taken by the i-th friend to cross the river. -----Output----- For each test case, output one integer, the minimum total crossing time required for all friends to cross the river. -----Example----- Input 2 3 1 2 5 4 1 2 5 10 Output 8 17 -----Note----- In the first test case, the optimal crossing sequence is as follows: 1. The two fastest friends cross together first (1 + 2 = 3 minutes). 2. One of them returns with the boat (1 minute). 3. The two slowest friends then cross together (5 minutes). 4. The fastest friend returns with the boat (1 minute). 5. Both remaining friends cross together (2 minutes). Total time = 3 + 1 + 5 + 1 + 2 = 12 minutes. In the second test case, the optimal sequence is: 1. 1 and 2 cross: 2 (crossing time is 2 because 2 is slower) 2. 1 comes back: 1 (total time = 3) 3. 5 and 10 cross: 10 (total time = 13) 4. 2 comes back: 2 (total time = 15) 5. 1 and 2 cross: 2 (total time = 17) Total time = 2 + 1 + 10 + 2 + 2 = 17 minutes.","solution":"def minimum_crossing_time(n, times): Calculate the minimum crossing time for n friends with given times. :param n: number of friends :param times: list of times taken by each friend to cross the river :return: minimum total crossing time times.sort() total_time = 0 while n > 3: if 2 * times[1] < times[0] + times[n - 2]: total_time += 2 * times[1] + times[0] + times[n - 1] else: total_time += times[n - 1] + times[n - 2] + 2 * times[0] n -= 2 if n == 3: total_time += times[0] + times[1] + times[2] elif n == 2: total_time += times[1] return total_time def process_test_cases(test_cases): Process multiple test cases :param test_cases: list of tuples, each tuple contains (n, times) :return: list of results for each test case results = [] for n, times in test_cases: results.append(minimum_crossing_time(n, times)) return results"},{"question":"Given an input string containing only lowercase alphabetical characters and no spaces, write a function to determine if the string is a palindrome permutation. A palindrome permutation is a string that could be rearranged to form a palindrome. For example, \\"tacocat\\" is a palindrome permutation because it can be rearranged to \\"atcocta\\" which is a palindrome. Another example would be \\"ivicc\\" which could be rearranged to \\"civic\\". You need to implement a function `is_palindrome_permutation(s)` that returns a boolean indicating whether the input string is a permutation of a palindrome. **Function Signature:** ```python def is_palindrome_permutation(s: str) -> bool: # implementation here ``` **Example:** ```python assert is_palindrome_permutation(\\"tacocat\\") == True assert is_palindrome_permutation(\\"ivicc\\") == True assert is_palindrome_permutation(\\"hello\\") == False assert is_palindrome_permutation(\\"civil\\") == False ``` **Constraints:** - The input string `s` will only contain lowercase alphabetical characters. - The length of input string `s` will not exceed 1000 characters. **Hints:** - A string can be rearranged to a palindrome if at most one of the characters has an odd count.","solution":"def is_palindrome_permutation(s: str) -> bool: from collections import Counter # Count frequencies of each character in the string char_count = Counter(s) # Check how many characters have an odd count odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be a permutation of a palindrome if at most one character has an odd count return odd_count <= 1"},{"question":"Write a function that takes a list of integers and returns the first unique integer in the list. If there is no unique integer, return -1. Examples: `firstUnique([4, 5, 6, 7, 5, 6, 4])` returns 7 `firstUnique([1, 2, 2, 1, 3, 4, 4, 5])` returns 3 `firstUnique([6, 4, 4, 6])` returns -1 `firstUnique([8, 7, 8, 7, 3, 5, 5])` returns 3","solution":"def firstUnique(nums): Returns the first unique integer in the list nums. If there is no unique integer, returns -1. count = {} for num in nums: if num in count: count[num] += 1 else: count[num] = 1 for num in nums: if count[num] == 1: return num return -1"},{"question":"Given an array of integers and a target value, find whether any three numbers from the array add up to the target value. Input Format The first line contains an integer n, the number of elements in the array. The second line contains n space-separated integers representing the elements of the array. The third line contains an integer, the target value. Constraints 1 ≤ n ≤ 1000 -10^5 ≤ array[i] ≤ 10^5 -10^5 ≤ target ≤ 10^5 Output Format Print \\"YES\\" if there exist three integers in the array that add up to the target value. Otherwise, print \\"NO\\". SAMPLE INPUT 6 12 3 4 1 6 9 24 SAMPLE OUTPUT YES Explanation One combination of numbers that add up to 24 is (12, 3, 9). If no such combination is found, the output should be \\"NO\\".","solution":"def find_three_numbers_sum(arr, target): This function finds whether there exist three numbers in the array that sum up to the target value. arr.sort() n = len(arr) for i in range(n - 2): left = i + 1 right = n - 1 while left < right: current_sum = arr[i] + arr[left] + arr[right] if current_sum == target: return \\"YES\\" elif current_sum < target: left += 1 else: right -= 1 return \\"NO\\""},{"question":"Anna is organizing a charity event and has several prizes to distribute among the participants. Each prize is of a different value, and she wants to distribute the prizes such that the total value of the prizes given to each participant is as fair as possible. Anna has defined the \\"fairness\\" of a distribution as the difference between the maximum total value and the minimum total value of the prizes given to the participants. She wants this fairness value to be minimized. The task is to help Anna by writing a program that distributes the prizes in an optimal way. ------ Input ------ The first line contains an integer T - the number of test cases. Each test case starts with an integer N – the number of prizes, followed by an integer M – the number of participants. The next line contains N integers, each representing the value of a prize. ------ Output ------ For each test case, output a single integer - the minimized fairness value for that test case. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ M ≤ N 1 ≤ text{Value of prize} ≤ 10^9 ------ Example ------ Input: 2 5 2 8 4 3 2 5 4 3 1 1 1 1 Output: 1 0 ------ Explanation ------ In the first test case, distributing the prizes as [4, 3, 2] and [8, 5] minimizes the fairness value to 1. For the second test case, distributing the prizes as [1, 1], [1], and [1] results in a fairness value of 0.","solution":"def minimize_fairness(T, test_cases): results = [] for test_case in test_cases: N, M, prizes = test_case prizes.sort() # initialize the minimum difference to a large number min_diff = float(\'inf\') # We only need to check the windows of size M within the sorted list for i in range(N - M + 1): current_diff = prizes[i + M - 1] - prizes[i] min_diff = min(min_diff, current_diff) results.append(min_diff) return results"},{"question":"You are given a binary tree with N nodes, where each node has an integer value. The nodes are numbered from 1 to N, and the tree is rooted at node 1. Each node i has an associated integer value V_i. Your task is to determine the sum of values of all nodes at exact depth D from the root. A depth D is the number of edges from the root node to the node. For example, the root node has depth 0, its direct children have depth 1, and so on. If there are no nodes at the given depth D, the sum is considered to be 0. # Input - The first line contains an integer N, the number of nodes in the tree. - The next N-1 lines each contain two integers u and v (1 ≤ u, v ≤ N), denoting an edge between node u and node v. - The next line contains N integers V_1, V_2, ..., V_N, representing the values of the nodes. - The last line contains an integer D, the depth for which the sum of node values is to be calculated. # Output - Print a single integer, the sum of values of all nodes at the exact depth D from the root. # Constraints - 1 ≤ N ≤ 2 × 10^5 - |V_i| ≤ 10^9, 1 ≤ i ≤ N # Example Input ``` 7 1 2 1 3 2 4 2 5 3 6 3 7 3 5 8 2 1 7 9 2 ``` # Example Output ``` 19 ``` # Explanation In the example, the binary tree is as follows: ``` 1 / 2 3 / / 4 5 6 7 ``` The values associated with the nodes are: [3, 5, 8, 2, 1, 7, 9] Nodes at depth 2: [4, 5, 6, 7] with values [2, 1, 7, 9] Sum at depth 2: 2 + 1 + 7 + 9 = 19 Thus, the output is 19.","solution":"def sum_at_depth(n, edges, values, depth): from collections import defaultdict, deque # Step 1: Create adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Step 2: Perform BFS to find nodes at the given depth queue = deque([(1, 0)]) # (node, current depth) visited = set([1]) sum_at_given_depth = 0 while queue: node, current_depth = queue.popleft() if current_depth == depth: sum_at_given_depth += values[node - 1] if current_depth < depth: for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, current_depth + 1)) return sum_at_given_depth"},{"question":"Hi everyone! Let\'s tackle a fun problem involving prime numbers. A twin prime is a prime number that has a prime gap of two. In other words, a twin prime is a pair of prime numbers that differ by 2. For example, (3, 5) and (11, 13) are twin primes. Your task is to write a function that takes an integer `n` and returns the number of twin prime pairs (p1, p2) such that both p1 and p2 are less than or equal to n. For instance: - Given `n = 10`, the twin prime pairs are (3, 5) and (5, 7), so the function should return `2`. - Given `n = 20`, the twin prime pairs are (3, 5), (5, 7), (11, 13), and (17, 19), so the function should return `4`. Here are the constraints: - The input `n` will be a positive integer such that 2 <= n <= 10^6. Note: Your solution should be efficient enough to handle large values of `n`. Good luck, and happy coding!","solution":"def is_prime(x): Helper function to check if a number x is prime. if x <= 1: return False if x <= 3: return True if x % 2 == 0 or x % 3 == 0: return False i = 5 while i * i <= x: if x % i == 0 or x % (i + 2) == 0: return False i += 6 return True def count_twin_primes(n): Returns the number of twin prime pairs (p1, p2) such that both p1 and p2 are less than or equal to n. twin_primes_count = 0 last_prime = 2 # the first prime number for current in range(3, n + 1, 2): # iterate only odd numbers starting from 3 if is_prime(current): if current - last_prime == 2: twin_primes_count += 1 last_prime = current return twin_primes_count"},{"question":"Given a string, find the first non-repeating character in it and return its index. If it doesn\'t exist, return -1. Consider the string contains only lowercase English letters. ```python first_unique_char(\\"leetcode\\") == 0 first_unique_char(\\"loveleetcode\\") == 2 first_unique_char(\\"aabb\\") == -1 ``` ```C first_unique_char(\\"leetcode\\") == 0; first_unique_char(\\"loveleetcode\\") == 2; first_unique_char(\\"aabb\\") == -1; ```","solution":"def first_unique_char(s): Returns the index of the first non-repeating character in the string s. If no such character exists, returns -1. # Dictionary to store count of each character char_count = {} # Populate dictionary with character counts for char in s: char_count[char] = char_count.get(char, 0) + 1 # Find the first character with a count of 1 for index, char in enumerate(s): if char_count[char] == 1: return index return -1"},{"question":"Consider an array of n integers. You are required to answer q queries, each asking whether the sum of elements in a given subarray is odd or even. For each query, if the sum is odd, output `Odd`, otherwise output `Even`. -----Input----- The first line contains two integers n and q (1 le n, q le 2 cdot 10^5) — the number of elements in the array and the number of queries. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the array. The following q lines contain two integers l_j and r_j (1 le l_j le r_j le n) — the indices of the subarray for the j-th query. -----Output----- For each query, print `Odd` if the sum of the subarray from l_j-th to r_j-th position (inclusive) is odd, otherwise print `Even`. -----Examples----- Input 5 3 1 2 3 4 5 1 3 2 4 1 5 Output Even Odd Odd -----Note----- Consider the queries of the example test. In the first query, the sum of the subarray from index 1 to 3 is 1 + 2 + 3 = 6, which is even. In the second query, the sum of the subarray from index 2 to 4 is 2 + 3 + 4 = 9, which is odd. In the third query, the sum of the subarray from index 1 to 5 is 1 + 2 + 3 + 4 + 5 = 15, which is odd.","solution":"def subarray_parity_queries(n, q, arr, queries): Determines if the sum of elements in the subarray given by each query is odd or even. Parameters: n (int): Number of elements in the array. q (int): Number of queries. arr (list): List of integers representing the array. queries (list): List of tuples, each containing two integers l and r representing the subarray indices (1-based). Returns: list: List of strings \'Odd\' or \'Even\' for each query result. results = [] prefix_sum = [0] * (n + 1) # Building the prefix sum array for i in range(n): prefix_sum[i + 1] = prefix_sum[i] + arr[i] # Processing each query for l, r in queries: subarray_sum = prefix_sum[r] - prefix_sum[l - 1] if subarray_sum % 2 == 0: results.append(\\"Even\\") else: results.append(\\"Odd\\") return results"},{"question":"Alice and Bob are playing a game with a tree. A tree is an undirected graph in which any two vertices are connected by exactly one path. The tree has `n` vertices and `n-1` edges. Each edge has a weight, given by an integer array `w` of length `n-1`. They want to know, for each pair of vertices (u, v), the weight of the heaviest edge on the path from u to v. Input The first line contains an integer n (2 ≤ n ≤ 105) — the number of vertices in the tree. Each of the next n-1 lines contains three integers u, v, and wi (1 ≤ u, v ≤ n, 1 ≤ wi ≤ 104) — the endpoints of the i-th edge and its weight. The next line contains an integer q (1 ≤ q ≤ 105) — the number of queries. Each of the next q lines contains two integers u and v (1 ≤ u, v ≤ n) — the pair of vertices for which they want to find the weight of the heaviest edge on the path from u to v. Output Print q lines — the answers to the queries. Each line should contain a single integer representing the weight of the heaviest edge on the path from u to v for that query. Examples Input 5 1 2 4 2 3 3 3 4 5 4 5 6 3 1 5 2 4 3 5 Output 6 5 6 Input 4 1 2 1 1 3 2 1 4 3 2 2 3 2 4 Output 2 3","solution":"from collections import defaultdict, deque def build_tree(n, edges): tree = defaultdict(list) for u, v, w in edges: tree[u].append((v, w)) tree[v].append((u, w)) return tree def bfs_heaviest_edge(tree, n): max_edge = [[0] * (n + 1) for _ in range(n + 1)] for start in range(1, n + 1): visited = [False] * (n + 1) queue = deque([(start, 0)]) visited[start] = True while queue: current_node, current_max = queue.popleft() for neighbor, weight in tree[current_node]: if not visited[neighbor]: visited[neighbor] = True max_edge[start][neighbor] = max_edge[neighbor][start] = max(current_max, weight) queue.append((neighbor, max(weight, current_max))) return max_edge def heaviest_edge_on_path(n, edges, queries): tree = build_tree(n, edges) max_edge = bfs_heaviest_edge(tree, n) results = [] for u, v in queries: results.append(max_edge[u][v]) return results"},{"question":"You are given an undirected, weighted graph represented by its adjacency matrix. Your task is to determine the minimum spanning tree (MST) of the graph using Kruskal\'s algorithm and output the sum of the weights of the edges in the MST. To achieve this, follow these steps: 1. Extract all edges and their weights from the adjacency matrix. 2. Sort the edges by their weights in non-decreasing order. 3. Use the Union-Find data structure to check for cycles and to help construct the MST. Constraints: * The number of vertices in the graph (N) is between 2 and 100. * Weights can be between 1 and 1000. * If there are multiple MSTs with the same weight, it is sufficient to find any one of them. Input format: - The first line contains an integer N, the number of vertices in the graph. - The next N lines each contain N integers, where the j-th integer in the i-th line represents the weight of the edge between vertex i and vertex j. If there is no edge between vertex i and vertex j, the corresponding integer is 0. Output format: - Print the sum of the weights of the edges in the MST. Example: Input: 4 0 1 3 0 1 0 3 6 3 3 0 2 0 6 2 0 Output: 6 Explanation: One possible MST for this graph includes the edges with weights 1, 2, and 3, with a total weight of 6.","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def kruskal_mst(n, graph): edges = [] for i in range(n): for j in range(i+1, n): if graph[i][j] != 0: edges.append((graph[i][j], i, j)) edges.sort() parent = [i for i in range(n)] rank = [0] * n mst_weight = 0 for weight, u, v in edges: root_u = find(parent, u) root_v = find(parent, v) if root_u != root_v: union(parent, rank, root_u, root_v) mst_weight += weight return mst_weight def calculate_mst_weight(n, adjacency_matrix): return kruskal_mst(n, adjacency_matrix) # Example Input # n = 4 # matrix = [ # [0, 1, 3, 0], # [1, 0, 3, 6], # [3, 3, 0, 2], # [0, 6, 2, 0] # ] # Output: 6"},{"question":"Sherlock is a detective who loves to solve mysteries. One day, he encounters a series of encrypted messages. Each message is a sequence of lower-case letters. Sherlock believes there is a hidden clue in the letter frequencies. He hypothesizes that the message can reveal its true meaning if the frequencies of the most and least frequent characters are the same. Your task is to analyze a given message to verify Sherlock\'s hypothesis. Specifically, you need to determine whether it is possible to rearrange the characters in the message such that the highest frequency and the lowest frequency of characters are the same. Constraints * 1 leq length of the message leq 10^5 Input Input is given from Standard Input in the following format: message Output Print \\"YES\\" if it is possible to rearrange the characters of the message to meet Sherlock\'s hypothesis. Otherwise, print \\"NO\\". Examples Input aabbcc Output YES Input aaabbc Output NO","solution":"def can_rearrange_frequencies(message): from collections import Counter # Count the frequency of each character freq = Counter(message) # Get the list of frequencies freq_values = list(freq.values()) freq_count = Counter(freq_values) # There can be only one frequency or if they are different, only one can have one occurrence if len(freq_count) == 1: return \\"YES\\" elif len(freq_count) == 2: # Get the two frequencies key1, key2 = freq_count.keys() # Check the condition: one frequency should appear only once and be either 1 or its difference with the other key should be 1 if (freq_count[key1] == 1 and (key1 == 1 or (key1 - key2 == 1))) or (freq_count[key2] == 1 and (key2 == 1 or (key2 - key1 == 1))): return \\"YES\\" return \\"NO\\""},{"question":"Given an array of integers where every element appears three times except for one, which appears exactly once. Find the element that appears only once. Example 1: Input: arr = [2, 2, 3, 2] Output: 3 Explanation: Every element appears three times except for 3 which appears once. Example 2: Input: arr = [0, 1, 0, 1, 0, 1, 99] Output: 99 Explanation: Every element appears three times except for 99 which appears once. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findSingleNumber() which takes the array arr[] as input and returns the element that appears only once. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= Length of array <= 3 * 10^4 -2^31 <= arr[i] <= 2^31 - 1","solution":"def findSingleNumber(arr): Returns the element that appears only once in the array where every other element appears three times. :param arr: List[int] -- A list of integers where every element appears three times except for one. :return: int -- The element that appears only once. ones, twos = 0, 0 for num in arr: # `ones` will have the elements appearing 3k+1 times. ones = (ones ^ num) & ~twos # `twos` will have the elements appearing 3k+2 times. twos = (twos ^ num) & ~ones return ones"},{"question":"Given an array A of N integers, return the maximum sum of a non-empty subsequence of A where no two elements are consecutive in the original array. Example 1: Input: A = [3, 2, 7, 10] Output: 13 Explanation: The subsequences with the highest sums are: (i) [3, 10] with sum 3 + 10 = 13 or (ii) [2, 7, 4] with sum 2 + 7 + 4 = 13 Example 2: Input: A = [3, 2, 5, 10, 7] Output: 15 Explanation: The subsequence with the highest sums is: (i) [3, 10, 7] with sum 3 + 10 + 7 = 20 Your Task: You don\'t need to read input or print anything. Complete the function maxSubsequenceSum which takes A and N (number of elements in A) as input parameters and returns an integer denoting the maximum sum of a non-empty subsequence with non-consecutive elements. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= T <= 10 1 <= N <= 100 1 <= A[i] <= 1000","solution":"def maxSubsequenceSum(A, N): Returns the maximum sum of a non-empty subsequence of A where no two elements are consecutive in the original array. if N == 0: return 0 if N == 1: return A[0] # Initialize two variables to store the maximum sum without selecting the previous element prev2 = 0 prev1 = A[0] for i in range(1, N): curr = max(prev1, prev2 + A[i]) prev2 = prev1 prev1 = curr return prev1"},{"question":"**Problem Description:** Rahul is working on a project that involves generating unique identification numbers for different items. To ensure the IDs are unique and follow a specific pattern, he has a set of rules to generate these IDs. The ID for an item is a sequence of N characters consisting of uppercase English letters. The ID must satisfy the following conditions: 1. No two consecutive characters in the ID should be the same. 2. The ID must be lexicographically smallest possible. For example, if N = 5 and the letters are [A, B, C], then the smallest possible ID could be \\"ABACA\\". Your task is to help Rahul generate the smallest possible ID that follows the given rules. **Input Format:** - The first line contains an integer T, the number of test cases. - Each of the following T lines contains an integer N and a string of uppercase English letters of length K. **Output Format:** For each test case, output the lexicographically smallest possible ID that follows the rules. **Constraints:** - 1 ≤ T ≤ 50 - 1 ≤ N ≤ 100 - 2 ≤ K ≤ 26 **Sample Input:** ``` 3 5 ABC 3 QV 4 XYZ ``` **Sample Output:** ``` ABACA QVQ XYXY ``` **Explanation:** - In the first test case, for N = 5 and letters [A, B, C], \\"ABACA\\" is the smallest possible ID. - In the second test case, for N = 3 and letters [Q, V], \\"QVQ\\" is the smallest possible ID. - In the third test case, for N = 4 and letters [X, Y, Z], \\"XYXY\\" is the smallest possible ID.","solution":"def generate_smallest_id(N, letters): letters = sorted(letters) result = [letters[0]] for i in range(1, N): for letter in letters: if letter != result[-1]: result.append(letter) break return \'\'.join(result) def process_input(T, cases): results = [] for N, letters in cases: results.append(generate_smallest_id(N, letters)) return results"},{"question":"You are tasked with writing a function that determines the minimum number of single-character insertions required to make a given string a palindrome. A palindrome is a string that reads the same forwards and backwards. Your function should take a single string `s` as input and return an integer representing the minimum number of insertions required to transform the string into a palindrome. -----Input----- A single string `s` of length `n` (1 le n le 5000). The string `s` will contain only lowercase English letters. -----Output----- An integer representing the minimum number of single-character insertions required to make the string a palindrome. -----Examples----- Input abca Output 1 Input race Output 3 Input aabb Output 2 -----Explanation----- In the first example, inserting \'b\' at the end would make the string \\"abcba\\", which is a palindrome. In the second example, adding \'eca\' (at the beginning, middle or end) will turn \\"race\\" into \\"ecarace\\", \\"racecar\\", or \\"racecare\\", respectively. In the third example, adding \'a\' in the middle twice will turn \\"aabb\\" into \\"ababa\\" (one of several possible solutions). Remember, the goal is to find the minimum number of insertions needed.","solution":"def min_insertions_to_palindrome(s): Returns the minimum number of single-character insertions required to make string s a palindrome. n = len(s) dp = [[0] * n for _ in range(n)] for gap in range(1, n): for l in range(n - gap): r = l + gap if s[l] == s[r]: dp[l][r] = dp[l+1][r-1] else: dp[l][r] = min(dp[l][r-1], dp[l+1][r]) + 1 return dp[0][n-1]"},{"question":"Given a set of pieces of wood with various lengths, your task is to determine if it is possible to create a square using all the pieces. Each piece of wood can only be used once, and all pieces must be used in forming the square. Input The input is given in the following format: d n l1 l2 l3 ... ln :: n l1 l2 l3 ... ln The first line contains the number of datasets d (d ≤ 10). For each dataset, the first line contains an integer n (1 ≤ n ≤ 15), the number of pieces of wood. The second line contains n space-separated positive integers representing the lengths of the wood pieces. Output For each dataset, output \\"YES\\" if it is possible to form a square with the given wood pieces, otherwise output \\"NO\\". Example Input 2 4 1 1 1 1 5 2 2 2 2 2 Output YES NO Explanation For the first dataset, all 4 pieces of length 1 can form a square with sides of length 1. For the second dataset, it is impossible to form a square using all the given pieces.","solution":"from itertools import combinations def can_form_square(n, pieces): if n < 4: return \\"NO\\" total_length = sum(pieces) if total_length % 4 != 0: return \\"NO\\" side_length = total_length // 4 pieces.sort(reverse=True) sides = [0] * 4 def dfs(index): if index == n: return sides[0] == sides[1] == sides[2] == sides[3] == side_length for i in range(4): if sides[i] + pieces[index] <= side_length: sides[i] += pieces[index] if dfs(index + 1): return True sides[i] -= pieces[index] if sides[i] == 0: break return False return \\"YES\\" if dfs(0) else \\"NO\\" def process_datasets(d, datasets): results = [] for dataset in datasets: n, pieces = dataset result = can_form_square(n, pieces) results.append(result) return results"},{"question":"Martha is participating in a coding competition where she needs to solve a variety of tasks. One of the tasks involves string manipulation. Specifically, Martha is given a string S and she needs to perform a series of operations to transform it. The task requires Martha to replace every letter in the string with the next letter in the alphabet (wrapping around so that \'z\' is replaced by \'a\'). She needs to repeat this process k times. Can you help Martha by writing a program to perform this transformation? ----- Input Format ------ - The first line contains an integer T, denoting the number of test cases. - The description of T test cases follows. - Each test case consists of two lines. The first line contains the integer k and the second line contains the string S. ----- Output Format ------ For each test case, print the transformed string after performing the operations k times. ----- Constraints ------ 1 ≤ T ≤ 10^{3} 1 ≤ k ≤ 10^{3} 1 ≤ |S| ≤ 10^{3} ----- Sample Input 1 ------ 3 1 abcd 2 xyz 3 hello ----- Sample Output 1 ------ bcde zab khoor ----- Explanation 1 ------ Example case 1: After 1 transformation, \'a\' becomes \'b\', \'b\' becomes \'c\', \'c\' becomes \'d\', and \'d\' becomes \'e\', hence the output is \\"bcde\\". Example case 2: After 1 transformation, \'x\' becomes \'y\', \'y\' becomes \'z\', \'z\' becomes \'a\'. Repeating this once more, we get \\"zab\\". Example case 3: After 3 transformations, the string \\"hello\\" transforms as follows: - Transformation 1: \\"ifmmp\\" - Transformation 2: \\"jgnnq\\" - Transformation 3: \\"khoor\\"","solution":"def transform_string(k, S): Transforms the string S by replacing each character with the k-th next character in the alphabet. Wrap around if necessary. transformed = [] for char in S: transformed_char = chr(((ord(char) - ord(\'a\') + k) % 26) + ord(\'a\')) transformed.append(transformed_char) return \'\'.join(transformed) def process_cases(T, cases): Process multiple test cases and return the list of results for each case. results = [] for k, S in cases: result = transform_string(k, S) results.append(result) return results"},{"question":"Alex is analyzing his daily workout routine data to track his overall performance. He recorded his heart rate at different times throughout the day. He wants to find the maximum heart rate difference between any two recorded values, but with a restriction: the latter recording should come after the former in time (i.e., if he recorded the heart rate at times t1 and t2, and t1 < t2, then the difference between the heart rates at t2 and t1 can be considered). Given an array of Alex\'s recorded heart rates throughout the day, help Alex determine the maximum upward heart rate difference. Input constraints: The first line of input will contain an integer — n, representing the number of heart rate recordings. The second line will contain n space-separated integers representing the heart rate recordings in the order they were recorded. Output constraints: Print the maximum upward heart rate difference. If there are no possible upward heart rate differences (for example, if the array is sorted in non-increasing order), print 0. Constraints: 1 ≤ n ≤ 10^5 1 ≤ Value of heart rates ≤ 500 SAMPLE INPUT 7 70 85 75 90 80 95 100 SAMPLE OUTPUT 30","solution":"def max_heart_rate_difference(n, heart_rates): Returns the maximum upward heart rate difference. if n <= 1: return 0 min_heart_rate = heart_rates[0] max_diff = 0 for i in range(1, n): if heart_rates[i] > min_heart_rate: max_diff = max(max_diff, heart_rates[i] - min_heart_rate) min_heart_rate = min(min_heart_rate, heart_rates[i]) return max_diff"},{"question":"You are managing a warehouse and you need to ensure the efficient usage of limited space. The warehouse has a maximum storage capacity of C cubic units. You receive N shipments, each with a given volume Vi cubic units. You need to decide which shipments to store in the warehouse such that the total storage usage is maximized without exceeding the capacity C. Write a program that calculates the maximum storage used without exceeding the capacity when optimal selection of shipments is done. INPUT The first line will contain two integers, N and C, representing the number of shipments and the warehouse capacity respectively. The next N lines will each contain one integer, Vi, representing the volume of the i^th shipment. OUTPUT Output a single integer representing the maximum volume that can be utilized without exceeding the storage capacity. CONSTRAINTS 1 ≤ N ≤ 1000 1 ≤ C, Vi ≤ 10^5 SAMPLE INPUT 4 10 5 4 7 3 SAMPLE OUTPUT 10","solution":"def max_storage(N, C, volumes): dp = [0] * (C + 1) for volume in volumes: for j in range(C, volume - 1, -1): dp[j] = max(dp[j], dp[j - volume] + volume) return dp[C] # Example usage: # result = max_storage(4, 10, [5, 4, 7, 3]) # print(result) # Should print: 10"},{"question":"A group of scientists is studying the behavior of a particular species of ants. These ants form a colony with a queen and several worker ants. The queen ant gives birth to a new worker ant every minute, and this worker ant grows up to full size in exactly one minute. The study involves observing how many full-sized worker ants are present in the colony after a specific number of minutes. The scientists also want to analyze the colony\'s population at multiple observation points. Input The first line of input contains two integers m and p (1 ≤ m ≤ 10^5, 1 ≤ p ≤ 5 ⋅ 10^4), the number of minutes the study lasts and the number of observation points. Each of the next p lines contains a single integer t_i (1 ≤ t_i ≤ m), representing the minute at which the population of full-sized worker ants is to be reported. Output You should print p lines, with line i representing the number of full-sized worker ants present in the colony at minute t_i. Examples Input 5 3 1 3 5 Output 0 2 4 Input 10 4 2 5 7 10 Output 1 4 6 9 Note In the first example: - At minute 1, the queen has just started giving birth, so there are 0 full-sized worker ants. - At minute 3, the first two worker ants (born at minutes 1 and 2) are now full-sized, so there are 2 full-sized worker ants. - At minute 5, there are 4 full-sized worker ants (those born at minutes 1, 2, 3, and 4). In the second example: - At minute 2, there is 1 full-sized worker ant (born at minute 1). - At minute 5, there are 4 full-sized worker ants. - At minute 7, there are 6 full-sized worker ants. - At minute 10, there are 9 full-sized worker ants.","solution":"def full_sized_worker_ants(m, p, observation_times): def workers_count_at(t): return max(0, t - 1) results = [] for t in observation_times: results.append(workers_count_at(t)) return results"},{"question":"You are given two arrays, `arr1` and `arr2`, both of which contain integers. We need to find the number of common elements shared between `arr1` and `arr2`. Additionally, the elements in both arrays might not be unique and are not necessarily sorted. Write a function to determine the count of common elements, where each element\'s multiplicity (number of occurrences) in each array plays a role in determining the common count. Specifically, if a number appears `x` times in `arr1` and `y` times in `arr2`, it contributes `min(x, y)` to the overall count. Input - The first line contains an integer `n` (1 ≤ n ≤ 1000), the number of elements in `arr1`. - The second line contains `n` space-separated integers representing the elements of `arr1`. - The third line contains an integer `m` (1 ≤ m ≤ 1000), the number of elements in `arr2`. - The fourth line contains `m` space-separated integers representing the elements of `arr2`. Output Print a single integer, the count of common elements between `arr1` and `arr2` considering their multiplicities. Examples Input 5 1 2 2 3 4 4 2 2 3 3 Output 3 Explanation In this example, the common elements between `arr1` and `arr2` are: - The element `2` appears twice in both arrays, contributing 2 to the count. - The element `3` appears once in `arr1` and twice in `arr2`, contributing `min(1, 2) = 1` to the count. The total count of common elements is 2 + 1 = 3.","solution":"from collections import Counter def count_common_elements(arr1, arr2): Returns the count of common elements between arr1 and arr2 considering their multiplicities. count1 = Counter(arr1) count2 = Counter(arr2) common_count = 0 for element in count1: if element in count2: common_count += min(count1[element], count2[element]) return common_count"},{"question":"The new CEO of a company wants to send a bonus check to select employees as a reward for their excellent performance. The CEO has a list of employees\' salaries and a particular bonus amount to distribute. The allocation must be fair, so the CEO decides to split the bonus evenly among a subset of employees such that each of these employees gets the same integer amount of the bonus. The objective is to maximize the number of employees receiving the bonus while the total amount given out cannot exceed the available bonus amount. Input The first line contains two integers n (1 ≤ n ≤ 100) — the number of employees, and k (1 ≤ k ≤ 10^9) — the total bonus amount available. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^5) — the salaries of the employees. Output Print a single integer representing the maximum number of employees that can receive the bonus in such a way that each selected employee gets the same integer amount of the bonus, and the total amount given out does not exceed k. Examples: Input 4 100 30 20 10 40 Output 4 Input 5 17 10 20 30 40 50 Output 1","solution":"def max_employees_with_bonus(n, k, salaries): salaries.sort() max_employees = 0 total_bonus_given = 0 for i in range(n): if total_bonus_given + salaries[i] <= k: total_bonus_given += salaries[i] max_employees += 1 else: break return max_employees"},{"question":"You are an event organizer working on planning a series of conferences. Each conference has certain requirements for the number and timing of sessions, and you must ensure that there are no conflicts between sessions of the same conference. The details for each conference are given including the number of sessions and the time intervals during which each session takes place. Your task is to determine if it is possible to schedule all the sessions of each conference without any time overlap within the same conference. -----Input----- The first line of input contains an integer T (1 le T le 10), the number of conferences. Next will be T blocks of records, one for each conference. Each record block starts with an integer S (1 le S le 20), which is the number of sessions for that conference. This is followed by S lines of input, each containing two integers A and B (0 le A < B le 1440), denoting the start and end time (in minutes from the start of the day) of a session. The sessions within each conference must not overlap but can be precisely adjacent. -----Output----- Print \\"YES\\" if it is possible to schedule all the sessions of each conference without any overlap, otherwise print \\"NO\\". -----Examples----- Sample Input: 2 3 60 120 0 30 90 150 2 600 660 720 780 Sample Output: NO YES","solution":"def can_schedule_conferences(T, conferences): results = [] for conference in conferences: sessions = sorted(conference, key=lambda x: x[0]) no_overlap = True for i in range(1, len(sessions)): if sessions[i][0] < sessions[i - 1][1]: no_overlap = False break if no_overlap: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example execution # Sample Input: # 2 # 3 # [60, 120], [0, 30], [90, 150] # 2 # [600, 660], [720, 780] T = 2 conferences = [ [[60, 120], [0, 30], [90, 150]], [[600, 660], [720, 780]] ] print(can_schedule_conferences(T, conferences)) # Expected Output: [\'NO\', \'YES\']"},{"question":"Given a string of lowercase letters, determine the character that appears the most frequently. If multiple characters have the same highest frequency, return the lexicographically smallest one. Example s = \\"aabbbccde\\" The most frequent character is \'b\'. Function Description Complete the \'most_frequent_char\' function in the editor below. most_frequent_char has the following parameters: string s: a string of lowercase letters Returns char: the most frequent character Input Format A single line containing a string, s. Constraints 1 ≤ |s| ≤ 10^5 s consists of lowercase English letters only. Sample Input 0 aabbbccde Sample Output 0 b Explanation 0 \'b\' appears three times, which is more than any other character. Sample Input 1 abcabcabcd Sample Output 1 a Explanation 1 \'a\', \'b\', and \'c\' each appear three times, but \'a\' is lexicographically smallest. Sample Input 2 zzzxyzz Sample Output 2 z Explanation 2 \'z\' appears four times, which is more than any other character.","solution":"def most_frequent_char(s): Determines the character that appears most frequently in a string. If multiple characters have the same highest frequency, returns the lexicographically smallest one. Parameters: s (str): A string of lowercase letters Returns: char: The most frequent character from collections import Counter # Count the frequency of each character in the string count = Counter(s) # Find the maximum frequency max_count = max(count.values()) # Find all characters with the maximum frequency candidates = [char for char, freq in count.items() if freq == max_count] # Return the lexicographically smallest character among the candidates return min(candidates)"},{"question":"A software developer is building a system that requires the handling and manipulation of nested JSON objects. The JSON objects can contain a mixture of strings, numbers, arrays, and other nested JSON objects. The developer needs to create a function that can flatten these nested JSON objects into a single-level JSON object, where the keys represent the nested path to each value in the original object. The keys in the flattened JSON object should be constructed by concatenating the keys from each level of nesting, separated by a specified delimiter. Write a function `flatten_json(json_obj, delimiter)` that takes a nested JSON object and a delimiter string, and returns a new JSON object where all nested keys are flattened with the provided delimiter. # Input: - `json_obj`: A dictionary representing the nested JSON object. - `delimiter`: A string used to separate keys in the resulting flattened JSON object. # Output: - A dictionary representing the flattened JSON object. # Constraints: - The number of keys in the JSON object will not exceed 10^3. - Keys and values will only be strings, numbers, arrays, or nested JSON objects. # Example: Input: ```python json_obj = { \\"name\\": \\"John\\", \\"address\\": { \\"street\\": \\"1234 Main St\\", \\"city\\": \\"Anytown\\", \\"postal\\": { \\"code\\": \\"12345\\", \\"type\\": \\"home\\" } }, \\"contacts\\": [ {\\"type\\": \\"email\\", \\"value\\": \\"john@example.com\\"}, {\\"type\\": \\"phone\\", \\"value\\": \\"555-555-5555\\"} ] } delimiter = \\".\\" ``` Output: ```python { \\"name\\": \\"John\\", \\"address.street\\": \\"1234 Main St\\", \\"address.city\\": \\"Anytown\\", \\"address.postal.code\\": \\"12345\\", \\"address.postal.type\\": \\"home\\", \\"contacts[0].type\\": \\"email\\", \\"contacts[0].value\\": \\"john@example.com\\", \\"contacts[1].type\\": \\"phone\\", \\"contacts[1].value\\": \\"555-555-5555\\" } ``` # Function Signature: ```python def flatten_json(json_obj, delimiter): # Your code here ```","solution":"def flatten_json(json_obj, delimiter): Flattens a nested JSON object into a single-level dictionary. Parameters: - json_obj (dict): The nested JSON object. - delimiter (str): The string used to separate keys in the flattened dictionary. Returns: - dict: The flattened JSON object. def flatten(current_obj, parent_key, flattened_dict): if isinstance(current_obj, dict): for key, value in current_obj.items(): new_key = f\\"{parent_key}{delimiter}{key}\\" if parent_key else key flatten(value, new_key, flattened_dict) elif isinstance(current_obj, list): for i, item in enumerate(current_obj): new_key = f\\"{parent_key}[{i}]\\" flatten(item, new_key, flattened_dict) else: flattened_dict[parent_key] = current_obj result = {} flatten(json_obj, \\"\\", result) return result"},{"question":"Create a `Matrix` class that represents a 2x2 matrix with attributes `a`, `b`, `c`, and `d` corresponding to its elements: | a | b | |---|---| | c | d | The class should include a method `.determinant()` that calculates and returns the determinant of the matrix, calculated as: [ text{determinant} = (a*d) - (b*c) ] Additionally, the class should implement a method `.multiply()` that takes another 2x2 `Matrix` instance as an argument and returns a new `Matrix` that is the result of the matrix multiplication: | a1 | b1 | * | a2 | b2 | = | a1a2 + b1c2 | a1b2 + b1d2 | |----|----| |----|----| |------------|------------| | c1 | d1 | | c2 | d2 | | c1a2 + d1c2 | c1b2 + d1d2 | For example: ```python >>> m1 = Matrix(1, 2, 3, 4) >>> m1.determinant() -2 >>> m2 = Matrix(2, 0, 1, 2) >>> m3 = m1.multiply(m2) >>> m3.a 4 >>> m3.b 4 >>> m3.c 10 >>> m3.d 8 ```","solution":"class Matrix: def __init__(self, a, b, c, d): Initialize the 2x2 matrix with elements a, b, c, and d. self.a = a self.b = b self.c = c self.d = d def determinant(self): Calculate and return the determinant of the matrix. Det = (a*d) - (b*c) return (self.a * self.d) - (self.b * self.c) def multiply(self, other): Multiply this matrix by another 2x2 matrix and return the result as a new Matrix. a1, b1, c1, d1 = self.a, self.b, self.c, self.d a2, b2, c2, d2 = other.a, other.b, other.c, other.d new_a = a1 * a2 + b1 * c2 new_b = a1 * b2 + b1 * d2 new_c = c1 * a2 + d1 * c2 new_d = c1 * b2 + d1 * d2 return Matrix(new_a, new_b, new_c, new_d)"},{"question":"You are given a list of integers representing the heights of a row of buildings, where the ith building has a specific height. During a storm, some buildings will flood, and the water can only be contained by the shorter building between any two taller buildings. Calculate the total volume of water that will be trapped between the buildings after the rain. Write a function `trap_water(heights: List[int]) -> int` that returns the total amount of trapped water. Example 1: Input: heights = [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The buildings trap 6 units of water. Example 2: Input: heights = [4,2,0,3,2,5] Output: 9 Explanation: The buildings trap 9 units of water. Example 3: Input: heights = [2,0,2] Output: 2 Explanation: The buildings trap 2 units of water. Constraints: - 1 <= heights.length <= 2 * 10^4 - 0 <= heights[i] <= 10^5","solution":"from typing import List def trap_water(heights: List[int]) -> int: if not heights or len(heights) <= 2: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n water_trapped = 0 left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"With a new mall opening soon, the management needs to hire security guards. The mall has several entrance points and each entrance point needs to be guarded for a specific duration of time. The management wants to hire the minimum number of guards required to cover all entrance points, given that a single guard can cover multiple entrance points if their time slots do not overlap. Your task is to design an algorithm to find the minimum number of guards required to meet the above requirements. -----Input----- The first line contains an integer ( n ) (1 ≤ ( n ) ≤ 100), representing the number of entrance points. Each of the next ( n ) lines contains two integers ( s_i ) and ( e_i ) (0 ≤ ( s_i, e_i ) ≤ 10^9, ( s_i ) < ( e_i )), representing the start and end times that the entrance point needs to be guarded. -----Output----- Print a single integer — the minimum number of guards required to cover all entrance points. -----Examples----- Input 3 1 4 2 5 6 8 Output 2 Input 4 1 3 2 4 3 5 4 6 Output 2 -----Note----- In the first example, the minimum number of guards required is 2. One guard can cover the entrance point from 1 to 4, and another guard can cover from 2 to 5. The third entrance point can be covered separately from 6 to 8 by one of the guards as it does not overlap with others. In the second example, the optimal way is to have a guard covering from 1 to 3 and from 4 to 6, while another guard covers from 2 to 4 and from 3 to 5. Hence, 2 guards are required.","solution":"def min_guards(n, intervals): Determines the minimum number of guards required to cover all entrance points, given their time intervals. :param n: Number of entrance points :param intervals: List of tuples, each containing the start and end times of a guarding interval :return: Minimum number of guards required if not intervals: return 0 # Sort the intervals based on the end time intervals.sort(key=lambda x: x[1]) guards = 0 last_end_time = -1 for start, end in intervals: if start > last_end_time: # We need a new guard for this interval guards += 1 last_end_time = end return guards"},{"question":"The world of robotics has reached unprecedented heights, and a company named RoboLabs has developed a new robot model called RoboCleaner. This robot specializes in cleaning tasks and relies on a set of predefined commands to navigate its environment. The robot\'s starting location is at the center of a grid that extends infinitely in all directions. The grid is composed of cells, each of which can hold either dirt or be clean. RoboCleaner can perform four types of movements: - \'U\' for moving up, - \'D\' for moving down, - \'L\' for moving left, - \'R\' for moving right. The robot starts at position (0, 0) and can execute a sequence of these movements. Your task is to write a function that takes a sequence of movements and determines the final position of RoboCleaner on the grid. -----Input----- The input is a single string of characters consisting only of \'U\', \'D\', \'L\', and \'R\', representing the movement commands. -----Output----- The output should be two space-separated integers: the x and y coordinates of the final position of RoboCleaner. -----Examples----- Sample Input 1: UUDDLRLR Sample Output 1: 0 0 Sample Input 2: UUUU Sample Output 2: 0 4 Sample Input 3: LDRU Sample Output 3: 0 0 Sample Input 4: RRUU Sample Output 4: 2 2 Sample Input 5: LLDD Sample Output 5: -2 -2","solution":"def final_position(movements): x, y = 0, 0 for move in movements: if move == \'U\': y += 1 elif move == \'D\': y -= 1 elif move == \'L\': x -= 1 elif move == \'R\': x += 1 return f\\"{x} {y}\\""},{"question":"The students of the Russian School of Mathematics have developed a mathematical game which involves finding specific number patterns in sequences of integers. The game is played as follows: Given a sequence of integers, find if there exists a contiguous sub-sequence whose sum is divisible by a given integer k. The students want to automate the process of checking such sequences to enhance the fairness and efficiency of the game. Your task is to write a program that determines if there exists such a sub-sequence in the provided sequence. Input The first line of input contains two integers n (1 ≤ n ≤ 100000) — the length of the sequence, and k (1 ≤ k ≤ 100000) — the integer by which the sum of the sub-sequence must be divisible. The second line contains n integers a1, a2, ..., an (|ai| ≤ 1000) — the elements of the sequence. Output Print \\"YES\\" if there exists a contiguous sub-sequence whose sum is divisible by k, otherwise print \\"NO\\". Examples Input 5 3 1 2 3 4 5 Output YES Input 4 11 1 2 4 8 Output NO Input 6 5 -1 2 9 -4 3 1 Output YES Input 3 7 14 -3 -4 Output YES","solution":"def has_subsequence_divisible_by_k(n, k, sequence): prefix_sum = 0 prefix_sums_mod_k = {0} for num in sequence: prefix_sum += num mod_k = prefix_sum % k if mod_k in prefix_sums_mod_k: return \\"YES\\" prefix_sums_mod_k.add(mod_k) return \\"NO\\" # Function to read input and call the core function def find_subsequence(n, k, sequence): return has_subsequence_divisible_by_k(n, k, sequence)"},{"question":"Alex loves organizing his collection of rare coins. He has a rectangular drawer of dimensions L meters in length and W meters in width, where he places his coins. Each coin has a diameter of D meters. Alex wants to know how many coins he can place in the drawer without overlapping any coin. Write a program to help Alex determine the maximum number of coins he can fit in the drawer. -----Input----- The input contains three real numbers 0 < L leq 100, 0 < W leq 100, and 0 < D leq min(L,W). -----Output----- Output a single line with an integer representing the maximum number of coins Alex can place in the drawer. -----Examples----- Sample Input: 5.0 3.0 1.0 Sample Output: 15","solution":"import math def max_coins(L, W, D): Returns the maximum number of coins of diameter D that can be placed in a drawer of dimensions L by W. coins_in_length = math.floor(L / D) coins_in_width = math.floor(W / D) return coins_in_length * coins_in_width"},{"question":"A delivery company needs to optimize the routes their drivers take to deliver packages. The company has a set of delivery locations, each with a specific package, and certain pathways that connect these locations. Each pathway has a travel time associated with it. The goal is to deliver the packages to all locations with the minimum combined travel time. You are provided with the number of locations `N`, the number of pathways `M`, and a list of pathways. Each pathway contains three integers `u`, `v`, and `t`, where `u` and `v` are two connected locations, and `t` is the travel time between these locations. Determine the shortest time it would take to deliver all the packages starting from location 1 (assuming the drivers can start from any single location and the travel time in either direction is the same). Example 1: Input: N = 4, M = 4, pathways = [[1, 2, 4], [1, 3, 2], [2, 3, 1], [3, 4, 3]] Output: 6 Explanation: The optimal route is 1 -> 3 -> 2 -> 3 -> 4 or a similar permutation minimizing travel time. Example 2: Input: N = 3, M = 3, pathways = [[1, 2, 2], [1, 3, 3], [2, 3, 1]] Output: 3 Explanation: The optimal route is 1 -> 2 -> 3 or vice versa, minimizing travel time. Your Task: You don\'t need to read input or print anything. Complete the function `minDeliveryTime()` which takes `N`, `M`, and `pathways` as input parameters and returns the minimum combined travel time. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(N) Constraints: 1 <= N <= 10 1 <= M <= 45 1 <= u, v <= N 1 <= t <= 100","solution":"import heapq def minDeliveryTime(N, M, pathways): # Create adjacency list for the graph graph = {i: [] for i in range(1, N+1)} for u, v, t in pathways: graph[u].append((v, t)) graph[v].append((u, t)) # Function to perform Prim\'s algorithm to find MST def prim(start): visited = set() min_heap = [(0, start)] total_cost = 0 while min_heap: cost, node = heapq.heappop(min_heap) if node in visited: continue total_cost += cost visited.add(node) for adj, weight in graph[node]: if adj not in visited: heapq.heappush(min_heap, (weight, adj)) return total_cost if len(visited) == N else float(\'inf\') # Start from any node, here starting from node 1 return prim(1)"},{"question":"A company has designed a security system that can track personnel movement within a building. The building is divided into m sections, and movement is represented as a list of operations indicating entering or leaving a specific section. You need to analyze these operations and determine if there is any inconsistency in personnel movements. An operation is represented by a string of the following format: - \\"+k\\" (entering section k) - \\"-k\\" (leaving section k) Inconsistency exists if: 1. A person tries to leave a section they are not in. 2. A person is in the building more than once for the same section at the same time. -----Input----- The first line contains a single integer m (1 ≤ m ≤ 100,000) — the number of operations. Next m lines contain operation strings as described above. -----Output----- Print \\"CONSISTENT\\" (without quotes) if all operations are valid according to the rules mentioned. Otherwise print \\"INCONSISTENT\\" (without quotes). -----Examples----- Input 3 +1 +2 -1 Output CONSISTENT Input 4 +1 -1 +1 -1 Output CONSISTENT Input 3 -1 +1 -1 Output INCONSISTENT -----Note----- In the first sample, operations are consistent as the person enters section 1, then enters section 2, and finally leaves section 1. In the second sample, operations are consistent as the person enters section 1, leaves section 1, enters section 1 again, and then leaves section 1 again. In the third sample, operations are inconsistent as the person tries to leave section 1 without entering it first.","solution":"def check_consistency(ops): Determine if operations are consistent. :param ops: list of strings, operations of entering or leaving a section. :return: str, \\"CONSISTENT\\" or \\"INCONSISTENT\\" sections = set() for op in ops: if op[0] == \'+\': section = op[1:] if section in sections: return \\"INCONSISTENT\\" sections.add(section) elif op[0] == \'-\': section = op[1:] if section not in sections: return \\"INCONSISTENT\\" sections.remove(section) return \\"CONSISTENT\\""},{"question":"In a given list of integers, you are required to find the sum of all the integers which are prime numbers. Your task is to implement a function to filter out the prime numbers from the list and calculate their sum. Recall that a prime number is a number greater than 1 that is not divisible by any number other than 1 and itself. Function Signature ```python def sum_of_primes(numbers: list) -> int: ``` # Input - A list of integers, `numbers` with 1 ≤ len(numbers) ≤ 1000 and each integer 1 ≤ number ≤ 1000. # Output - An integer, the sum of all prime numbers in the list. # Example Example 1 ```python numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] print(sum_of_primes(numbers)) ``` Output: ```python 17 ``` *Explanation:* 2, 3, 5, and 7 are prime numbers in the list. The sum of these prime numbers is 17. Example 2 ```python numbers = [11, 13, 16, 19, 24, 30] print(sum_of_primes(numbers)) ``` Output: ```python 43 ``` *Explanation:* 11, 13, and 19 are prime numbers in the list. The sum of these prime numbers is 43. # Notes - Be sure to handle edge cases where no prime numbers are in the input list, in which case the function should return 0. - You may use any helper function if necessary.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False max_divisor = int(n**0.5) + 1 for d in range(3, max_divisor, 2): if n % d == 0: return False return True def sum_of_primes(numbers: list) -> int: Returns the sum of all prime numbers in the given list. return sum(num for num in numbers if is_prime(num))"},{"question":"You are a software engineer working for a company that maintains a popular online bookstore. One of your tasks is to implement a feature that generates recommendations of books for users based on their reading history. Specifically, you need to implement a function that recommends books to a user by finding other users with similar reading habits and suggesting books those users have enjoyed. The reading history of a user is given as a list of book titles they have rated, along with the corresponding rating (an integer between 1 and 5). Two users are considered to have similar reading habits if the average rating they have given to the books they have both read is within 0.5 units of each other. Your task is to find all users who have similar reading habits to a given target user and recommend the titles of books those similar users have rated 4 or 5 that the target user has not rated yet. # Input The input consists of multiple datasets, each representing a separate test case. The last line of the input contains a single zero, indicating the end of the input. Each dataset is formatted as follows: 1. The first line contains the number of users **n** (1 ≤ n ≤ 50). 2. The next **n** lines contain the reading history of each user, starting with the target user on the first line. The reading history of each user is formatted as: > k title1 rating1 title2 rating2 ... titlek ratingk where **k** (1 ≤ k ≤ 20) represents the number of books the user has rated, **title** is the title of the book (a string with no spaces), and **rating** is the user\'s rating for the book (an integer between 1 and 5). # Output For each dataset, output a single line containing the recommended book titles for the target user, sorted in lexicographical order. Each book title should appear exactly once in the list. If there are no recommendations, output a single line containing \\"NO RECOMMENDATIONS\\". # Sample Input ``` 3 3 bookA 5 bookB 3 bookC 4 3 bookA 4 bookB 5 bookD 5 3 bookA 2 bookB 3 bookC 4 2 2 bookA 5 bookB 4 2 bookC 4 bookD 4 1 1 bookE 5 0 ``` # Sample Output ``` bookD NO RECOMMENDATIONS NO RECOMMENDATIONS ``` **Explanation** In the first dataset: - The target user has read \\"bookA\\" (rated 5), \\"bookB\\" (rated 3), and \\"bookC\\" (rated 4). - The second user has read \\"bookA\\" (rated 4), \\"bookB\\" (rated 5), and \\"bookD\\" (rated 5). The average rating for common books (\\"bookA\\" and \\"bookB\\") is (5+3)/2 = 4 for the target user and (4+5)/2 = 4.5 for the second user. The difference is 0.5, so they have similar reading habits. The second user rated \\"bookD\\" a 5. - The third user has read \\"bookA\\" (rated 2), \\"bookB\\" (rated 3), and \\"bookC\\" (rated 4). The average rating for common books (\\"bookA\\", \\"bookB\\", and \\"bookC\\") is (5+3+4)/3 = 4 for the target user and (2+3+4)/3 ≈ 3 for the third user. The difference is 1, so their reading habits are not considered similar. \\"bookD\\" is recommended because it is the only book rated 4 or 5 by a similar user that the target user has not rated. The second dataset results in \\"NO RECOMMENDATIONS\\" because there is no common book between the target user and the other user to evaluate similarity. The third dataset results in \\"NO RECOMMENDATIONS\\" because there are no other users.","solution":"def recommend_books(n, histories): Recommends books to the target user based on similar reading habits of other users. Args: n (int): The number of users. histories (list of str): The reading histories of the users. Returns: str: Recommended book titles for the target user sorted lexicographically or \\"NO RECOMMENDATIONS\\". from collections import defaultdict def parse_history(history): items = history.split() k = int(items[0]) books_ratings = {} for i in range(1, 2 * k, 2): books_ratings[items[i]] = int(items[i + 1]) return books_ratings target_user = parse_history(histories[0]) other_users = [parse_history(histories[i]) for i in range(1, n)] def average_rating(ratings): return sum(ratings) / len(ratings) recommendations = set() for user in other_users: common_books = set(target_user.keys()).intersection(user.keys()) if not common_books: continue target_ratings = [target_user[book] for book in common_books] user_ratings = [user[book] for book in common_books] if abs(average_rating(target_ratings) - average_rating(user_ratings)) <= 0.5: for book, rating in user.items(): if book not in target_user and rating >= 4: recommendations.add(book) if recommendations: return \\" \\".join(sorted(recommendations)) else: return \\"NO RECOMMENDATIONS\\" def process_input(input_data): Process the multiple datasets from the input. Args: input_data (str): The datasets as a single string. Returns: list of str: Results for each dataset. lines = input_data.strip().split(\\"n\\") results = [] i = 0 while i < len(lines): n = int(lines[i].strip()) if n == 0: break histories = lines[i + 1:i + 1 + n] results.append(recommend_books(n, histories)) i += 1 + n return results"},{"question":"Jai is working on a database application where users\' data gets stored in nested JSON objects. He needs to write a function that can efficiently flatten these nested JSON objects into a flat dictionary where the keys are a combination of the nested keys separated by dots. For example, given the JSON object: ```json { \\"user\\": { \\"name\\": \\"John\\", \\"address\\": { \\"city\\": \\"New York\\", \\"zip\\": \\"10001\\" } }, \\"active\\": true } ``` The resulting flat dictionary should be: ``` { \\"user.name\\": \\"John\\", \\"user.address.city\\": \\"New York\\", \\"user.address.zip\\": \\"10001\\", \\"active\\": True } ``` Write a function `flatten_json(json_obj)` that takes a JSON object as input and returns the corresponding flattened dictionary. # Function Signature ```python def flatten_json(json_obj: dict) -> dict: pass ``` # Input - `json_obj`: A dictionary representing the JSON object. The dictionary can be nested to any level. # Output - A dictionary with flattened keys. # Example ```python # Input json_obj = { \\"user\\": { \\"name\\": \\"John\\", \\"address\\": { \\"city\\": \\"New York\\", \\"zip\\": \\"10001\\" } }, \\"active\\": true } # Output { \\"user.name\\": \\"John\\", \\"user.address.city\\": \\"New York\\", \\"user.address.zip\\": \\"10001\\", \\"active\\": True } ``` # Constraints - The input JSON object will always be a valid, non-empty dictionary. - The keys in the original and resulting dictionaries will be strings. - You can use any built-in Python modules if needed. # Hints - You may use recursion or an iterative approach to traverse the nested structure of the JSON object.","solution":"def flatten_json(json_obj: dict, parent_key: str = \'\', sep: str = \'.\') -> dict: Flatten a nested JSON object into a flat dictionary with keys as a combination of nested keys separated by dots. :param json_obj: The nested JSON object :param parent_key: The base key string for recursion (used internally) :param sep: Separator used between the keys :return: A flat dictionary items = {} for k, v in json_obj.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): items.update(flatten_json(v, new_key, sep=sep)) else: items[new_key] = v return items"},{"question":"Given an integer array `arr` of size \'n\', you have to determine whether there exist two indices `i` and `j` such that `1 <= i < j <= n` and `arr[i] == arr[j]`. If such a pair exists, return \\"YES\\". Otherwise, return \\"NO\\". -----Input:----- - The first line contains an integer T which denotes the number of test cases. - Each test case consists of two lines. - The first line contains an integer n which denotes the size of the array. - The second line contains n space-separated integers representing the elements of the array. -----Output:----- For each test case, output \\"YES\\" if there exist two indices `i` and `j` such that `1 <= i < j <= n` and `arr[i] == arr[j]`. Otherwise, output \\"NO\\". -----Constraints:----- - 1 ≤ T ≤ 100 - 1 ≤ n ≤ 10^5 - 1 ≤ arr[i] ≤ 10^9 -----Example:----- Input: 2 5 1 2 3 4 5 6 1 3 3 2 2 1 Output: NO YES","solution":"def check_duplicates(test_cases): results = [] for case in test_cases: n, arr = case seen = set() found = False for num in arr: if num in seen: results.append(\\"YES\\") found = True break seen.add(num) if not found: results.append(\\"NO\\") return results def process_input(input_str): input_lines = input_str.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] index = 1 for _ in range(T): n = int(input_lines[index]) arr = list(map(int, input_lines[index + 1].split())) test_cases.append((n, arr)) index += 2 return test_cases def main(input_str): test_cases = process_input(input_str) results = check_duplicates(test_cases) return \\"n\\".join(results)"},{"question":"You have been given a grid of size n × m, where each cell initially contains a unique identifier indicating the presence of distinct items. You need to process this grid in a specific way: you are allowed to move each item exactly once, either to the left, right, up, or down to an adjacent cell. However, if an item cannot be moved in the designated direction due to the edge of the grid, it stays in its original position. After executing all valid moves simultaneously, your task is to determine the number of positions that will not be empty. Input The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 50) — the grid dimensions. Next n lines contain m space-separated integers each, representing the grid with unique identifiers for the items. Output Print a single integer denoting the number of positions that will contain at least one item after all valid moves. Examples Input 3 3 1 2 3 4 5 6 7 8 9 Output 9 Input 2 2 1 2 3 4 Output 4 Note In the first example, since every item can move to one of its neighbors in the grid without leaving the grid or overlaps, all positions remain occupied. In the second example, each item also successfully moves to another position, covering all cells. Hence, the output is 4.","solution":"def count_non_empty_positions(n, m, grid): non_empty_positions = set() # Processing each cell to determine their new location for i in range(n): for j in range(m): non_empty_positions.add((i, j)) # original position # Valid moves if i > 0: # move up non_empty_positions.add((i-1, j)) if i < n-1: # move down non_empty_positions.add((i+1, j)) if j > 0: # move left non_empty_positions.add((i, j-1)) if j < m-1: # move right non_empty_positions.add((i, j+1)) # The set \'non_empty_positions\' will contain all unique positions with items. return len(non_empty_positions)"},{"question":"In the magical world of Hogwarts, the students are divided into four houses: Gryffindor, Hufflepuff, Ravenclaw, and Slytherin. During the final exams, each student from these houses has to solve a set of magical problems. Each student is represented by the first letter of their house: \'G\' for Gryffindor, \'H\' for Hufflepuff, \'R\' for Ravenclaw, and \'S\' for Slytherin. After the exams, the headmaster wants to know which house performed the best for each subject. However, instead of looking at the average score directly, the headmaster judges the performance by the house with the highest median score in each subject. Given a list of scores for each student and their corresponding house, your task is to determine and output the house that has the highest median score for each subject. If multiple houses have the same median score, output the house that comes first alphabetically. Input The first line contains an integer n (1 ≤ n ≤ 10000), the number of students. Each of the next n lines contains a character (the student\'s house), an integer (the subject index from 0 to k-1), and an integer (the score for that subject, between 0 and 100). Output For each subject from 0 to k-1, print the house with the highest median score. Examples Input 8 G 0 90 H 0 85 R 0 88 S 0 91 G 1 77 H 1 93 R 1 89 S 1 84 Output S H Input 6 G 0 60 H 0 55 R 0 62 S 0 64 G 1 70 H 1 72 Output S H Note In the first example, for subject 0, the scores are [90, 85, 88, 91]. The median scores for houses are: - Gryffindor: 90 - Hufflepuff: 85 - Ravenclaw: 88 - Slytherin: 91 The house with the highest median score for subject 0 is Slytherin. For subject 1, the scores are [77, 93, 89, 84]. The median scores for houses are: - Gryffindor: 77 - Hufflepuff: 93 - Ravenclaw: 89 - Slytherin: 84 The house with the highest median score for subject 1 is Hufflepuff.","solution":"def determine_best_house(n, scores): from collections import defaultdict import statistics houses = {\'G\': \'Gryffindor\', \'H\': \'Hufflepuff\', \'R\': \'Ravenclaw\', \'S\': \'Slytherin\'} house_scores = defaultdict(lambda: defaultdict(list)) # Parsing all scores into a dictionary for house, subject, score in scores: house_scores[subject][house].append(score) result = [] # Determine the best house based on median score for each subject for subject in sorted(house_scores.keys()): best_house = None best_median = float(\'-inf\') for house in sorted(houses.keys()): # sorting to handle alphabetical order in case of tie if house in house_scores[subject]: median_score = statistics.median(house_scores[subject][house]) if median_score > best_median or (median_score == best_median and (best_house is None or house < best_house)): best_median = median_score best_house = house result.append(best_house) return result"},{"question":"A train station has multiple platforms and receives multiple trains arriving and departing at specific times. You need to calculate the minimum number of platforms required to accommodate all the trains at any given time so that no two trains are at the same platform simultaneously. Each train has a defined arrival time and departure time. You are provided a list of these times, and you are required to find out the minimum number of platforms needed at the station so that all trains can be handled appropriately. Input The first input line contains a single integer n (1 ≤ n ≤ 1000) — the number of trains. Each of the next n lines contains two strings arrival and departure in the format \\"HH:MM\\" — the arrival time and the departure time of a train, respectively. Output Print a single integer — the minimum number of platforms required at the station. Examples Input 6 09:00 09:10 09:40 12:00 09:50 11:20 11:00 11:30 15:00 19:00 18:00 19:30 Output 3 Input 3 10:00 10:30 10:20 10:40 10:30 10:50 Output 2","solution":"def min_platforms(trains): Returns the minimum number of platforms required for the given schedule of trains. :param trains: List of tuples where each tuple represents arrival and departure time in \\"HH:MM\\" format :type trains: List[Tuple[str, str]] :return: Minimum number of platforms required :rtype: int from datetime import datetime # Convert the time strings to datetime objects for easy comparison arrivals = [datetime.strptime(train[0], \\"%H:%M\\") for train in trains] departures = [datetime.strptime(train[1], \\"%H:%M\\") for train in trains] # Sort the arrival and departure times arrivals.sort() departures.sort() platform_needed = 0 max_platforms = 0 i = 0 j = 0 n = len(trains) # Loop through all the train timings while i < n and j < n: # If a train arrives before the last departure, we need a new platform if arrivals[i] < departures[j]: platform_needed += 1 i += 1 if platform_needed > max_platforms: max_platforms = platform_needed else: # If a train departs, we can free up a platform platform_needed -= 1 j += 1 return max_platforms"},{"question":"Given a string, return the length of the longest substring without repeating characters. For example: `\\"abcabcbb\\"` should return `3` (i.e., the substring `\\"abc\\"`). `\\"bbbbb\\"` should return `1` (i.e., the substring `\\"b\\"`). `\\"pwwkew\\"` should return `3` (i.e., the substring `\\"wke\\"`). The string will contain only ASCII characters and will have at least one character.","solution":"def length_of_longest_substring(s): Given a string s, returns the length of the longest substring without repeating characters. char_index_map = {} max_length = 0 start = 0 for end, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Consider an online game where two players, Alice and Bob, take turns playing a game with an initial number of tokens, `n`. The game is played as follows: - On Alice\'s turn, she can remove a number of tokens that is a prime number. - On Bob\'s turn, he can remove a number of tokens that is a perfect square. If a player cannot make a move on their turn, they lose. Starting with Alice, they alternate turns. You need to find out who will win if both players play optimally. -----Input----- A single integer `n` (1 ≤ n ≤ 10^6) — the initial number of tokens. -----Output----- Print a single line \\"Alice\\" if Alice will win or \\"Bob\\" if Bob will win. -----Examples----- Input 10 Output Alice Input 15 Output Bob -----Note----- In the first example: - Alice can start by removing 7 (a prime number), leaving 3 for Bob. - Bob can remove 1 (a perfect square), leaving 2 for Alice. - Alice can remove 2 (a prime number), leaving 0 for Bob, hence Bob loses. In the second example: - Alice can start by removing 11 (a prime number), leaving 4 for Bob. - Bob can remove 4 (a perfect square), leaving 0 for Alice, hence Alice loses.","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def has_prime(n): Check if there is any prime number <= n. for i in range(2, n + 1): if is_prime(i): return True return False def has_perfect_square(n): Check if there is any perfect square number <= n. i = 1 while i * i <= n: i += 1 return (i - 1) * i - 1 <= n def who_wins(n): Function to determine who wins the game. if n == 0: return \\"Bob\\" turn = \\"Alice\\" while n > 0: if turn == \\"Alice\\": if not has_prime(n): return \\"Bob\\" for i in range(n, 0, -1): if is_prime(i): n -= i break turn = \\"Bob\\" else: if not has_perfect_square(n): return \\"Alice\\" for i in range(int(n**0.5), 0, -1): if i * i <= n: n -= i * i break turn = \\"Alice\\" return \\"Alice\\" if turn == \\"Bob\\" else \\"Bob\\""},{"question":"A company has a system where they assign unique user IDs starting from 1 and incrementing by 1 for each new user. Each user has a particular login pattern during the day. The day is divided into T equal time slots. For each time slot, the system records the number of login attempts made by a user. You are given an array of integers where each element represents the number of login attempts made by a single user in each time slot. Your task is to identify periods of peak activity. A time slot is considered a peak if it has more login attempts than the slot before and after it (not considering the first and the last time slots). Write a function to count the number of peak time slots in the given login pattern array. -----Constraints----- - T is an integer such that 3 leq T leq 100. - Each element of the array is an integer, 0 leq A[i] leq 1000. -----Input----- Input is given from Standard Input in the following format: T A1 A2 ... AT -----Output----- Print the number of peak time slots. -----Example Input----- 5 1 3 2 4 2 -----Example Output----- 2 Explanation: In the given example, there are two peak time slots: - The second slot with 3 login attempts is a peak because it has more attempts than the first (1) and the third (2). - The fourth slot with 4 login attempts is a peak because it has more attempts than the third (2) and the fifth (2).","solution":"def count_peak_time_slots(T, A): Counts the number of peak time slots given the total number of slots T and login attempts array A. A time slot is considered a peak if it has more login attempts than the slot before and after it. :param T: int : Total number of time slots :param A: list of int : List containing login attempts at each time slot :return: int : The number of peak time slots peak_count = 0 for i in range(1, T - 1): if A[i] > A[i - 1] and A[i] > A[i + 1]: peak_count += 1 return peak_count"},{"question":"A game developer is designing a rhythm game where players need to hit notes in time with the music. Each level of the game consists of a number of note sequences, each with specific timings and points. However, the developer wants to ensure that there are no overlapping notes within each sequence to make the game playable and enjoyable. The developer represents each sequence as a list of tuples (start_time, end_time, points) where: - `start_time` is the time (in milliseconds) when the note should be hit, - `end_time` is the time (in milliseconds) when the note finishes, - `points` is the number of points the player earns for hitting the note correctly. A sequence is considered non-overlapping if for each pair of notes (start_time_1, end_time_1, points_1) and (start_time_2, end_time_2, points_2) in the sequence, either `end_time_1 <= start_time_2` or `end_time_2 <= start_time_1`. The developer needs your help to determine the maximum points that can be scored in each level by selecting non-overlapping notes. ------ Input ------ The first line contains an integer T, the number of levels. Each level starts with a line containing a single integer N, the number of notes in the sequence. Next, there are N lines, each containing three integers `start_time i`, `end_time i`, and `points i`. ------ Output ------ For each level, output a single integer representing the maximum points that can be scored in that level by selecting non-overlapping notes. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^4 0 ≤ start_time < end_time ≤ 10^9 1 ≤ points ≤ 10^6 ------ Sample Input 1 ------ 2 4 0 3 10 1 5 5 4 6 3 5 8 8 3 2 4 6 1 3 4 0 2 5 ------ Sample Output 1 ------ 18 11 ------ Explanation 1 ------ In the first example, the optimal selection would be: - The note (0, 3, 10) which provides 10 points, and the note (4, 6, 3) which provides 3 points and the note (5, 8, 8) which provides 8 points for a total of 10 + 3 + 8 = 21 points. In the second example, the optimal selection would be: - The note (1, 3, 4) which provides 4 points and the note (2, 4, 6) which provides 7 points for a total of 4 + 7 = 11 points.","solution":"def max_points(levels): results = [] for level in levels: notes = level notes.sort(key=lambda x: x[1]) max_points = [0] * len(notes) for i in range(len(notes)): max_points[i] = notes[i][2] for j in range(i): if notes[j][1] <= notes[i][0]: max_points[i] = max(max_points[i], max_points[j] + notes[i][2]) results.append(max(max_points)) return results def rhythm_game(T, sequence_data): levels = [] index = 0 for _ in range(T): N = sequence_data[index] index += 1 notes = [] for _ in range(N): notes.append(sequence_data[index]) index += 1 levels.append(notes) return max_points(levels)"},{"question":"Alex has an integer sequence a of length n. He wants to make this sequence strictly increasing or determine if it is impossible to do so. He can perform the following operation any number of times: Choose an index i (1 leq i lt n) and swap a_i with a_{i+1} if a_i lt a_{i+1}. Find if it is possible to make the sequence strictly increasing and if so, output one of the possible sequences after zero or more swaps. -----Input----- The first line contains a single integer t (1 leq t leq 100) — the number of test cases. The description of the test cases follows. The first line of each test case contains an integer n (2 leq n leq 1000) — the length of the sequence a. The second line of each test case contains n integers a_1, a_2, ..., a_n (1 leq a_i leq 1000) — the elements of the sequence. It is guaranteed that the sum of n over all test cases does not exceed 1000. -----Output----- For each test case, if it is possible to make the sequence strictly increasing, output the sequence after the necessary swaps. If it is not possible, output \\"Impossible\\". -----Examples----- Input 3 5 1 2 3 4 5 4 3 1 2 4 3 7 5 7 Output 1 2 3 4 5 1 2 3 4 Impossible -----Note----- In the first test case, the sequence is already strictly increasing. In the second test case, we can perform the following sequence of swaps: Swap elements at indices 2 and 3: 3 1 underline{2} underline{4} Rightarrow 1 3 underline{2} underline{4} Swap elements at indices 1 and 2: underline{1} underline{3} 2 4 Rightarrow underline{1} underline{2} 3 4 In the third test case, it is not possible to make the sequence strictly increasing as the 5 cannot be moved to form a valid strictly increasing sequence.","solution":"def make_strictly_increasing(a): n = len(a) for i in range(n-1): if a[i] >= a[i+1]: return \\"Impossible\\" return \\" \\".join(map(str, a)) def process_queries(queries): results = [] for query in queries: n, sequence = query sorted_seq = sorted(sequence) result = make_strictly_increasing(sorted_seq) results.append(result) return results"},{"question":"In a text editing application, there\'s a feature that allows users to replace certain words with specified replacements throughout a document. This feature requires a function that takes the original text and a series of replacement rules, and then returns the modified text. The rules for replacements are provided as pairs of words, where the first word in the pair should be replaced by the second word. The replacement should be case-insensitive, meaning \\"word\\" and \\"Word\\" should be treated the same. However, the replacement word should match the case of the first letter of the word being replaced (i.e., if the word being replaced is capitalized, the replacement should be capitalized as well). INPUT: - The first line contains a single integer T, the number of replacement rules. - The next T lines each contain a pair of words: the word to be replaced and the word to replace it with. - The (T+2)-th line contains the original text in which replacements should be done. OUTPUT: - Output the modified text after all replacements have been made. CONSTRAINTS: 1 ≤ T ≤ 10 Each word in the replacement rules and text consists of lowercase and uppercase letters only. Each pair of words in the replacement rule is separated by a space. The length of the text does not exceed 1000 characters. SAMPLE INPUT: 3 hello hi world Earth this That This is a test. Hello world! Hello there. Is this the real world? SAMPLE OUTPUT: That is a test. Hi Earth! Hi there. Is That the real Earth?","solution":"def replace_words(T, rules, original_text): def replace_word(match): word = match.group(0) lower_word = word.lower() if lower_word in replacements: replacement = replacements[lower_word] if word.istitle(): return replacement.capitalize() elif word.isupper(): return replacement.upper() else: return replacement return word import re # Create a dictionary for the replacements replacements = {} for rule in rules: src, dest = rule.split() replacements[src.lower()] = dest pattern = re.compile(\'|\'.join(re.escape(key) for key in replacements.keys()), re.IGNORECASE) modified_text = re.sub(pattern, replace_word, original_text) return modified_text"},{"question":"# Task Alice is a delivery driver working for a company that ships packages between cities. The cities are represented as nodes in a graph, and each direct route between two cities is represented as an edge with a weight that indicates the travel time in hours. Given that Alice starts her journey from a specified city, your task is to find the shortest time required for her to visit all the cities (including the starting city) exactly once and return to the starting city. This problem can be identified as the Traveling Salesperson Problem (TSP). # Example For the following graph: ``` A / | B-C-D _|_/ ``` With travel times (weights) as follows: - A-B: 4 - A-C: 2 - A-D: 5 - B-C: 1 - B-D: 3 - C-D: 6 If Alice starts from city A, the output should be `11`. One possible tour would be A -> C -> B -> D -> A with a total time of 2 + 1 + 3 + 5 = 11. # Input/Output The graph that represents the cities and the travel times between them. - `[input]` string `start` The starting city. The city names are given as uppercase alphabets (A-Z). - `[input]` array of tuples `routes` An array of tuples where each tuple contains two cities and the travel time between them: (city1, city2, time). Example: ``` [(\\"A\\", \\"B\\", 4), (\\"A\\", \\"C\\", 2), (\\"A\\", \\"D\\", 5), (\\"B\\", \\"C\\", 1), (\\"B\\", \\"D\\", 3), (\\"C\\", \\"D\\", 6)] ``` - `[output]` an integer The shortest time required for Alice to complete her tour.","solution":"import itertools def tsp(start, routes): # Create a dictionary to store the graph graph = {} for route in routes: city1, city2, time = route if city1 not in graph: graph[city1] = {} if city2 not in graph: graph[city2] = {} graph[city1][city2] = time graph[city2][city1] = time # Get all the cities in the graph cities = list(graph.keys()) # Remove the starting city from the list of cities to visit cities.remove(start) # Generate all possible permutations of the cities to visit permutations = itertools.permutations(cities) # Calculate the minimum cost min_cost = float(\'inf\') for perm in permutations: current_cost = 0 current_city = start for city in perm: current_cost += graph[current_city][city] current_city = city current_cost += graph[current_city][start] min_cost = min(min_cost, current_cost) return min_cost"},{"question":"You are given an array of positive integers representing the quality of jeans a store sells. Each pair of jeans has a specific quality denoted by the array elements. The store has a set of rules to create a pair of jeans for a display. A display pair of jeans is considered valid if and only if: 1. The quality of the jeans on the left leg is less than the quality of the jeans on the right leg. 2. The quality difference between the two legs of jeans is as close to a given target as possible. Your task is to determine the quality difference between the jeans on the left leg and the ones on the right leg that is closest to the given target. Input - The first line contains two integers: `n` (1 ≤ n ≤ 1000), the number of jeans, and `target` (1 ≤ target ≤ 10^4), the given target difference. - The second line contains `n` positive integers, each denoting the quality of a pair of jeans (1 ≤ quality[i] ≤ 10^5). Output - Print a single integer, the smallest absolute difference between any two valid pairs of jeans and the given target. Example Input 5 10 3 8 15 1 10 Output 1 Note In the example, the possible differences between valid pairs (quality[left] < quality[right]) are: - 8 - 3 = 5 - 15 - 3 = 12 - 15 - 8 = 7 - 10 - 8 = 2 - 15 - 10 = 5 Out of these differences, the one closest to the target 10 is 12 (with an absolute difference of 2) and 15 (with an absolute difference of 5). The closest absolute difference is 1.","solution":"def closest_quality_difference(n, target, qualities): Returns the closest absolute difference between any two valid pairs of jeans and the given target. :param n: Number of qualities :param target: Target difference :param qualities: List of qualities of the jeans :return: Smallest absolute difference from the target # Sorting the qualities to make comparisons easier qualities.sort() closest_diff = float(\'inf\') for i in range(n): for j in range(i+1, n): diff = qualities[j] - qualities[i] current_diff = abs(diff - target) if current_diff < closest_diff: closest_diff = current_diff return closest_diff"},{"question":"Tanya is studying different types of strings for her computer science class. She has learned that a string is called \\"palindromic\\" if it reads the same backward as forward. Now she is curious about a special property of substrings within a given string: she wants to know the length of the longest palindromic substring within the given string. More formally, given a string s of length n, Vladimir needs to find the length of the longest substring of s that is a palindrome. Input The first line of input contains a single integer n (1 ≤ n ≤ 103), the length of the string s. The second line contains the string s of length n, consisting of only lowercase English letters. Output Output a single integer — the length of the longest palindromic substring of the given string. Examples Input 4 abba Output 4 Input 5 abcba Output 5 Input 3 abc Output 1","solution":"def longest_palindromic_substring_length(n, s): Returns the length of the longest palindromic substring within the given string s. if n == 0: return 0 dp = [[False] * n for _ in range(n)] start = 0 max_length = 1 for i in range(n): dp[i][i] = True for i in range(n-1): if s[i] == s[i+1]: dp[i][i+1] = True start = i max_length = 2 for length in range(3, n+1): for i in range(n-length+1): j = i+length-1 if s[i] == s[j] and dp[i+1][j-1]: dp[i][j] = True if length > max_length: start = i max_length = length return max_length"},{"question":"---- Subarray Sum ---- You are given an array of integers and a target integer. Write a function to determine if there exists a continuous subarray that sums to the target integer. The function should return `True` if such a subarray exists and `False` if it doesn\'t. ```python def subarray_sum(nums, target): pass # Example usage: # Example 1 nums = [1, 2, 3, 4, 5] target = 9 # The subarray [2, 3, 4] sums to 9, so the function should return True. print(subarray_sum(nums, target)) # Output: True # Example 2 nums = [1, 2, 3, 4, 5] target = 20 # There is no subarray that sums to 20, so the function should return False. print(subarray_sum(nums, target)) # Output: False # Example 3 nums = [-1, 2, 9, -7, 3, 1] target = 4 # The subarray [2, 9, -7] sums to 4, so the function should return True. print(subarray_sum(nums, target)) # Output: True ``` # Constraints: - All elements in the array will be integers. - The elements can be positive, negative, or zero. - The input list will contain at least one element. - The target integer can be positive, negative, or zero. # Notes: - Consider the sliding window approach or using a prefix sum with a hash map to optimize the solution. - Make sure to handle edge cases, such as when the input list consists of only one element.","solution":"def subarray_sum(nums, target): Returns True if there exists a continuous subarray that sums to the target, otherwise False. curr_sum = 0 sum_map = {0: -1} # To handle cases where the subarray starts from index 0 for i, num in enumerate(nums): curr_sum += num if (curr_sum - target) in sum_map: return True sum_map[curr_sum] = i return False"},{"question":"You are given an array a containing n integers. You need to find the length of the shortest subarray that can be reordered such that its largest value equals the given integer k. If no such subarray exists, return -1. You have to solve this problem for multiple test cases. -----Input----- The first line contains the number of test cases t (1 le t le 100). For each test case: The first line contains two integers n and k (1 le n le 2000, 1 le k le 2 times 10^9). The second line contains n integers a_1, a_2, ..., a_n (1 le a_i le 2 times 10^9). It is guaranteed that the sum of n over all test cases does not exceed 10^4. -----Output----- For each test case, print a single integer - the length of the shortest subarray or -1 if no such subarray exists. -----Examples----- Input: 4 5 4 1 2 4 3 5 3 10 3 10 2 6 7 7 2 3 1 7 8 4 1 1 1 1 1 Output: 2 1 1 1 -----Note----- For the first test case, the shortest subarray that can be reordered to make the maximum value 4 is [2, 4]. For the second test case, the subarray [10] already has the maximum value as 10. For the third test case, the subarray [7] already has the maximum value as 7. For the fourth test case, any single element subarray will just have 1 as the maximum value.","solution":"def shortest_subarray_length(t, test_cases): results = [] for n, k, arr in test_cases: min_length = float(\'inf\') for i in range(n): if arr[i] == k: results.append(1) break else: results.append(-1) return results"},{"question":"Alex loves playing with arrays and came up with a new game. He has an array of integers and he wants to find all the unique pairs in the array whose sum is equal to a given target. A pair (a, b) is considered the same as (b, a), and hence should not be counted twice. Can you help Alex determine the number of these unique pairs? -----Input----- The first line of input contains an integer N (1 le N le 100 000), the size of the array. The second line of input contains N integers, the elements of the array. The third line of input contains an integer T, the target sum. -----Output----- Output a single integer, the number of unique pairs that sum up to T. -----Examples----- Sample Input 1: 5 1 5 7 -1 5 6 Sample Output 1: 2 Sample Input 2: 4 1 1 1 1 2 Sample Output 2: 1","solution":"def unique_pairs_with_sum(arr, target): Finds the number of unique pairs in the array whose sum equals the given target. :param arr: List[int] - The array of integers. :param target: int - The target sum. :return: int - The number of unique pairs that sum up to the target. seen = set() pairs = set() for number in arr: complement = target - number if complement in seen: pairs.add(tuple(sorted((number, complement)))) seen.add(number) return len(pairs)"},{"question":"You are given a list of positive integers and you need to perform a special operation on it. The operation consists of choosing a non-empty subsequence of the list and replacing every chosen element with their sum. Your goal is to find the maximum possible sum of elements that you can get after performing this operation. A subsequence of an array is a sequence obtained by deleting some (possibly none) elements from the array without changing the order of the remaining elements. -----Input----- The first line contains an integer t (1 le t le 10^4) — the number of test cases. The first line of each test case contains an integer n (1 le n le 10^5) — the number of elements in the list. The second line of each test case contains n positive integers x_1, x_2, ..., x_n (1 le x_i le 10^9) — the elements of the list. -----Output----- For each test case, output a single integer — the maximum possible sum after performing the operation. -----Example----- Input 3 5 1 2 3 4 5 3 5 5 5 4 1 2 2 1 Output 15 15 6 -----Explanation----- In the first test case, the optimal subsequence to choose is the entire list itself, which gives the sum 1 + 2 + 3 + 4 + 5 = 15. In the second test case, any subsequence will give the same sum 5 + 5 + 5 = 15 if the entire list is selected. In the third test case, selecting the entire list itself or a subsequence like [2, 2, 2] will both give the maximum possible sum, 1 + 2 + 2 + 1 = 6.","solution":"def max_sum_after_operation(test_cases): results = [] for n, arr in test_cases: max_sum = sum(arr) results.append(max_sum) return results # Input parsing function def parse_input(s): lines = s.split(\\"n\\") t = int(lines[0]) test_cases = [] line_index = 1 for _ in range(t): n = int(lines[line_index]) arr = list(map(int, lines[line_index + 1].split())) test_cases.append((n, arr)) line_index += 2 return test_cases # Function to convert output to the required format def format_output(results): return \\"n\\".join(map(str, results))"},{"question":"In this problem, you are required to manage a team of developers working on a project. Each developer has a range of days during which they will be available to work on the project. Additionally, each developer has a productivity score which indicates how efficiently they can work. Your task is to determine the maximum productivity that can be achieved by selecting one developer to work on the project on each day. Note that a developer can only work on days within their availability range. -----Input----- The first line of input contains two integers n and d (1 leq n leq 100000; 1 leq d leq 1000000), where n is the number of developers and d is the number of days the project lasts. It is followed by n lines, each containing three integers s_i, e_i, and p_i (1 leq s_i leq e_i leq d; 1 leq p_i leq 1000), representing the start day, end day, and productivity score of the i^{text{th}} developer, respectively. -----Output----- Display the maximum total productivity that can be achieved by optimally choosing one developer to work each day. -----Examples----- Sample Input: 3 5 1 3 5 2 5 8 4 5 10 Sample Output: 25 Explanation: - On day 1, choose Developer 1 with productivity 5. - On day 2, choose Developer 2 with productivity 8. - On day 3, choose Developer 2 with productivity 8. - On day 4, choose Developer 3 with productivity 10. - On day 5, choose Developer 3 with productivity 10. Total productivity is 5 + 8 + 8 + 10 + 10 = 41.","solution":"def max_total_productivity(n, d, developers): # Initialize the productivity array with 0 for each day productivity = [0] * (d + 1) # Loop through each developer for s, e, p in developers: # Loop through the range of days the developer is available and set the productivity for day in range(s, e + 1): productivity[day] = max(productivity[day], p) # Sum up the maximum productivity for all days return sum(productivity[1:]) # productivity[0] is unused # Example usage: n = 3 d = 5 developers = [(1, 3, 5), (2, 5, 8), (4, 5, 10)] print(max_total_productivity(n, d, developers)) # Output: 41"},{"question":"Problem E: Galactic Carrier Route Optimization In the galaxy of Starwind, a fleet of carriers transport essential supplies between space stations. Each carrier needs to follow a precise route to minimize the total travel distance. These space stations are connected by bidirectional routes, each having a certain distance. If a space station does not have any outgoing routes, it cannot be reached from any other station. A central command station with unknown connectivity is trying to determine the shortest route to all other stations. You have been tasked to design a program that calculates the minimum distance required for carriers to travel from the central command station to each other station in the galaxy. Input The input consists of multiple test cases. Each test case starts with two integers N and M (1 ≤ N ≤ 100, 0 ≤ M ≤ 1000), where N is the number of space stations and M is the number of routes. The command station is always numbered 1. The next M lines contain three integers u, v, and d (1 ≤ u, v ≤ N, u ≠ v, 1 ≤ d ≤ 100), representing a bidirectional route from space station u to space station v with a distance of d. Output For each test case, print a single line that contains N-1 integers: the minimum distance from the central command station to each other station in ascending order of their station numbers. If a station cannot be reached, output -1 for that station. Examples Input 4 4 1 2 6 1 3 4 2 4 5 3 4 2 3 3 1 2 1 2 3 3 3 1 5 4 2 1 2 3 2 3 4 3 0 Output 6 4 6 1 4 3 -1 -1 -1 -1 Explanation In the first test case, the optimal routes are: - From station 1 to station 2 with a distance of 6. - From station 1 to station 3 with a distance of 4. - From station 1 to station 2 to station 4 with a combined distance of 6. In the second test case: - From station 1 to station 2 with a distance of 1. - From station 1 to station 2 to station 3 with a combined distance of 4. In the third test case: - From station 1 to station 2 with a distance of 3. - There is no route from station 1 to station 3, hence -1. In the fourth test case: - From station 1, no routes are available, resulting in -1 for all other stations.","solution":"import heapq import sys def dijkstra(graph, n): Uses Dijkstra\'s algorithm to find the shortest paths from node 1 to every other node. Returns a list of minimum distances (or -1 if a node is unreachable). dist = [float(\'inf\')] * (n + 1) dist[1] = 0 pq = [(0, 1)] while pq: current_distance, current_node = heapq.heappop(pq) if current_distance > dist[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < dist[neighbor]: dist[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return [dist[i] if dist[i] != float(\'inf\') else -1 for i in range(2, n + 1)] def galactic_carrier_route_optimization(test_cases): results = [] for case in test_cases: n, m, edges = case # Create graph graph = [[] for _ in range(n + 1)] for u, v, d in edges: graph[u].append((v, d)) graph[v].append((u, d)) # Get shortest paths from node 1 result = dijkstra(graph, n) results.append(result) return results"},{"question":"You are given a sequence of integers that should represent the heights of a stack of books, arranged from left to right. Due to some error, one of the stacks has a book missing. Your task is to find the minimum number of books you need to either add or remove so that the sequence becomes strictly increasing, meaning each book height is greater than the previous one. Write a program that takes an array of integers and returns the minimum number of books to add or remove to make the sequence strictly increasing. -----Input----- - The first line contains an integer n (1 le n le 100) — the number of stacks of books. - The second line contains n integers a_1, a_2, ..., a_n (0 le a_i le 1000) — the heights of the stack from left to right. -----Output----- Print the minimum number of books to add or remove to make the sequence of heights strictly increasing. -----Examples----- Input 6 1 3 2 4 5 Output 1 Input 5 3 2 1 2 3 Output 2 Input 7 1 2 3 4 5 6 7 Output 0 -----Note----- In the first example, the original sequence is [1, 3, 2, 4, 5]. By removing the second stack (with height 2), the sequence becomes [1, 3, 4, 5], which is strictly increasing. In the second example, the original sequence is [3, 2, 1, 2, 3]. Removing the first two elements (3, 2) or last two elements (2, 3) results in [1, 2, 3], which is strictly increasing. Hence, a minimum of 2 removals are needed. In the third example, the original sequence is already strictly increasing, so no books need to be added or removed.","solution":"def min_books_to_remove(arr): Function to find the minimum number of books to add or remove to make the sequence strictly increasing. n = len(arr) dp = [1] * n # dp[i] will store the length of LIS ending at index i for i in range(1, n): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) lis = max(dp) # the length of the longest increasing subsequence return n - lis"},{"question":"Given an undirected graph consisting of N nodes and M edges, each edge textit{M}_i having an integer weight W_i. You are required to determine if there exists a path from node S to node T such that the total weight of the path is exactly equal to a given integer K. If such a path exists, print \\"YES\\". Otherwise, print \\"NO\\". In this task, a path cannot revisit the same node twice (i.e., the path should not contain cycles). Input Format The first line contains three space-separated integers N (number of nodes), M (number of edges), and K (the required path weight). Each of the next M lines contains three space-separated integers U_i, V_i, and W_i, describing an edge between nodes U_i and V_i with weight W_i. The last line contains two space-separated integers S (starting node) and T (ending node). Constraints 1 leq N leq 100 1 leq M leq 1000 1 leq W_i leq 100 1 leq U_i, V_i leq N 1 leq K leq 10^4 1 leq S, T leq N S neq T Output Format Print \\"YES\\" if there is a path from S to T having a total weight exactly equal to K, otherwise print \\"NO\\". Sample Input 4 4 7 1 2 3 1 3 4 2 4 4 3 4 3 1 4 Sample Output YES Explanation In this case, there are multiple paths from node 1 to node 4. The path 1 rightarrow 2 rightarrow 4 has a total weight of 3 + 4 = 7, which satisfies the requirement. Hence, the output is \\"YES\\".","solution":"def find_path_with_exact_weight(N, M, K, edges, S, T): from collections import defaultdict, deque graph = defaultdict(list) for U, V, W in edges: graph[U].append((V, W)) graph[V].append((U, W)) # Since the graph is undirected def bfs(start, target, target_weight): queue = deque([(start, 0)]) # (current node, current weight) visited = set() while queue: node, current_weight = queue.popleft() if (node, current_weight) in visited: continue visited.add((node, current_weight)) if node == target and current_weight == target_weight: return \\"YES\\" for neighbor, weight in graph[node]: if (neighbor, current_weight + weight) not in visited: if current_weight + weight <= target_weight: queue.append((neighbor, current_weight + weight)) return \\"NO\\" return bfs(S, T, K)"},{"question":"A delivery company needs to optimize the delivery routes for their drivers. They have a certain number of delivery zones in the city, and each zone is connected to certain other zones via roads. A driver starts from a central hub located in zone number 1. The objective is to figure out which zones are unreachable from the central hub using the roads provided. You are given a list of zones and roads, with each road directly connecting two different zones. Consider the following input and output: -----Input----- The first line contains two integers 1 leq Z, R leq 200000, where Z is the number of zones and R is the number of roads. Next, R lines follow, each containing two distinct integers 1 leq u, v leq Z which indicates that there is a road between zone u and zone v. -----Output----- Output the list of unreachable zones, if any, in increasing order, one per line. If all the zones are reachable, output the string \\"All Zones Accessible\\". -----Examples----- Sample Input 1: 5 4 1 2 2 3 3 4 4 5 Sample Output 1: All Zones Accessible Sample Input 2: 5 3 1 2 2 3 3 4 Sample Output 2: 5 Sample Input 3: 8 5 1 3 2 4 5 6 7 8 3 5 Sample Output 3: 2 4 7 8","solution":"def find_unreachable_zones(Z, R, roads): from collections import defaultdict, deque # Create a graph graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) # Use BFS to find all reachable zones from the central hub (zone 1) visited = set() queue = deque([1]) while queue: zone = queue.popleft() if zone not in visited: visited.add(zone) for neighbour in graph[zone]: if neighbour not in visited: queue.append(neighbour) # Find all zones that are not visited unreachable = sorted([zone for zone in range(1, Z+1) if zone not in visited]) if not unreachable: return \\"All Zones Accessible\\" else: return unreachable"},{"question":"A popular online store has decided to introduce a new feature where customers can personalize the order of the items displayed in their cart. You are asked to implement a function that will sort the items in the cart based on customer\'s specified priority. Each item in the cart is described by a structure that contains an item\'s name and its priority level. The priority level is an integer that can be positive, negative, or zero. Items with a higher priority level should appear before items with a lower priority level. If two items have the same priority level, they should retain their original order. Your task is to write a function that takes a list of items as input and returns a new list of items sorted by their priority levels from highest to lowest. Input The input is provided as a list of dictionaries representing the items in the cart. Each dictionary contains two keys: - \\"name\\" (a string) representing the item\'s name, - \\"priority\\" (an integer) representing the item\'s priority level. Output Output a list of dictionaries sorted by the priority levels from highest to lowest while retaining the original order for items with the same priority. Examples Input [ {\\"name\\": \\"apple\\", \\"priority\\": 2}, {\\"name\\": \\"banana\\", \\"priority\\": 1}, {\\"name\\": \\"carrot\\", \\"priority\\": 5}, {\\"name\\": \\"date\\", \\"priority\\": 3}, {\\"name\\": \\"eggplant\\", \\"priority\\": 1} ] Output [ {\\"name\\": \\"carrot\\", \\"priority\\": 5}, {\\"name\\": \\"date\\", \\"priority\\": 3}, {\\"name\\": \\"apple\\", \\"priority\\": 2}, {\\"name\\": \\"banana\\", \\"priority\\": 1}, {\\"name\\": \\"eggplant\\", \\"priority\\": 1} ] Input [ {\\"name\\": \\"pasta\\", \\"priority\\": 0}, {\\"name\\": \\"broccoli\\", \\"priority\\": -1}, {\\"name\\": \\"chocolate\\", \\"priority\\": 1}, {\\"name\\": \\"bread\\", \\"priority\\": 2} ] Output [ {\\"name\\": \\"bread\\", \\"priority\\": 2}, {\\"name\\": \\"chocolate\\", \\"priority\\": 1}, {\\"name\\": \\"pasta\\", \\"priority\\": 0}, {\\"name\\": \\"broccoli\\", \\"priority\\": -1} ] Note In the first example, \\"carrot\\" has the highest priority level of 5, followed by \\"date\\" with 3, and so on. In the second example, \\"bread\\" with priority 2 comes first, followed by \\"chocolate\\" with priority 1, and so on.","solution":"def sort_cart(items): Sorts the items in the cart based on their priority from highest to lowest. If two items have the same priority, they retain their original order. Parameters: items (list): A list of dictionaries where each dictionary contains \'name\' and \'priority\' keys Returns: list: A new list of dictionaries sorted by the priority levels from highest to lowest return sorted(items, key=lambda x: x[\'priority\'], reverse=True)"},{"question":"Given an integer array of size `n`, determine which elements, if any, appear more than half the time (i.e., more than ⌊n/2⌋ times). If there is no such element, output \\"None\\". If there are multiple such elements, output all of them in ascending order. Input The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the size of the array. The second line contains `n` integers separated by spaces, representing the array elements. Each element of the array is a positive integer and is less than or equal to 10^9. Output Print either the element(s) that appear more than ⌊n/2⌋ times in ascending order, or \\"None\\" if no such element exists. Examples input 7 3 3 4 2 4 4 4 output 4 input 5 3 1 3 2 4 output None","solution":"def find_majority_elements(n, elements): from collections import Counter element_count = Counter(elements) threshold = n // 2 majority_elements = [key for key, count in element_count.items() if count > threshold] if majority_elements: return sorted(majority_elements) else: return \\"None\\""},{"question":"Write a function that takes an integer `m` and returns an `m x m` 2D array representing a spiral matrix in clockwise order, starting with 1 in the top-left corner. For example, for `m = 3`, the function should return: ``` 1 2 3 8 9 4 7 6 5 ``` For `m = 4`, the function should return: ``` 1 2 3 4 12 13 14 5 11 16 15 6 10 9 8 7 ``` If `m = 0`, return an empty array. Assume that `m` will be a non-negative integer in all test cases.","solution":"def generate_spiral_matrix(m): Generate an m x m 2D spiral matrix. if m <= 0: return [] matrix = [[0] * m for _ in range(m)] num = 1 left, right, top, bottom = 0, m - 1, 0, m - 1 while left <= right and top <= bottom: # Traverse from left to right along top row for col in range(left, right + 1): matrix[top][col] = num num += 1 top += 1 # Traverse from top to bottom along rightmost column for row in range(top, bottom + 1): matrix[row][right] = num num += 1 right -= 1 if top <= bottom: # Traverse from right to left along bottom row for col in range(right, left - 1, -1): matrix[bottom][col] = num num += 1 bottom -= 1 if left <= right: # Traverse from bottom to top along leftmost column for row in range(bottom, top - 1, -1): matrix[row][left] = num num += 1 left += 1 return matrix"},{"question":"Given an array of integers, your task is to write a function that finds the element in the array that appears more than n/2 times (where n is the size of the array). This element is called the \\"majority element.\\" Assume that the input array always contains a majority element. Majority Element Algorithm A simple way to find the majority element is to use the Boyer-Moore Voting Algorithm. The algorithm works as follows: 1. Initialize two variables: `candidate` and `count`. Set `candidate` to `None` and `count` to 0. 2. Iterate through the elements of the array. 3. For each element `x` in the array: - If `count` is 0, set `candidate` to `x`. - If `x` equals `candidate`, increment `count` by 1. - Otherwise, decrement `count` by 1. 4. After processing all elements, `candidate` will be the majority element. Challenge Write a function `find_majority_element` that takes an array of integers and returns the majority element. Function Signature ```python def find_majority_element(nums: List[int]) -> int: ``` Input Format The function takes one argument: - `nums`: a list of integers representing the input array. Constraints - 1 leq n leq 10^6 - -10^9 leq nums[i] leq 10^9 - It is guaranteed that a majority element always exists in the input array. Output Format Return the majority element as an integer. Sample Input ```python nums = [3, 2, 3] ``` Sample Output ```python 3 ``` Explanation In the input array `[3, 2, 3]`, the number `3` appears more than `3//2` times, making it the majority element.","solution":"from typing import List def find_majority_element(nums: List[int]) -> int: Finds the majority element in the array which appears more than n/2 times. candidate = None count = 0 for num in nums: if count == 0: candidate = num if num == candidate: count += 1 else: count -= 1 return candidate"},{"question":"You are given a string consisting of lowercase English letters. Your goal is to convert the string into a palindrome with a minimum number of character replacements. A palindrome is a string that reads the same forward and backward. Consider each character replacement costs 1 unit. Determine the minimum cost to convert the given string into a palindrome. ------ Input Format ------ - The input consists of a single string s. ------ Output Format ------ - Output a single integer, the minimum cost to convert the string into a palindrome. ------ Constraints ------ - The length of the string (1 leq |s| leq 10^6) - The string consists of lowercase English letters (\'a\' to \'z\') only. ------ Example Input 1 ------ abca ------ Example Output 1 ------ 1 ------ Explanation 1 ------ One optimal way to achieve the palindrome \\"abba\\" is by replacing \'c\' with \'b\'. ------ Example Input 2 ------ abcdef ------ Example Output 2 ------ 3 ------ Explanation 2 ------ One optimal way to achieve the palindrome \\"abccba\\" is by replacing \'d\' with \'c\', \'e\' with \'b\', and \'f\' with \'a\'.","solution":"def min_cost_to_palindrome(s): This function returns the minimum cost to convert a given string into a palindrome. The cost is defined as the number of character replacements needed. n = len(s) cost = 0 # Compare characters from the two ends of the string towards the center. for i in range(n // 2): if s[i] != s[n - i - 1]: cost += 1 return cost"},{"question":"You are given an array of integers where each number strictly appears twice except for two unique numbers that appear exactly once. Your task is to identify these two numbers. Your solution should run in linear time O(n) and use constant space O(1). -----Input----- - First line contains a single integer n (2<= n <=100000, n is even), which is the total number of elements in the array. - Second line contains n space-separated integers representing the elements in the array. -----Output----- Output the two unique numbers separated by a space. The order of the numbers in the output does not matter. -----Example----- Input: 6 1 2 1 3 2 4 Output: 3 4","solution":"def find_two_unique_numbers(arr): This function finds the two unique numbers in an array where each number except two appear twice. # XOR of all elements will give us XOR of the two unique numbers xor = 0 for num in arr: xor ^= num # Find rightmost set bit in xor set_bit = xor & -xor # Divide elements into two sets by comparing rightmost set bit of xor with the bit at the same position in each element x = 0 y = 0 for num in arr: if num & set_bit: x ^= num else: y ^= num return x, y"},{"question":"A digital bookstore keeps track of its sales using an automation system that records every purchase transaction in a log. Each transaction contains details about the book sold, including its title, author, genre, and the amount of copies sold. The bookstore also maintains a current inventory of all the books available. The owner wants to harness this data to generate a report showing the top N best-selling books for a given genre. Your task is to write a program that reads the sales transactions and current inventory, and then generates the required report. ------ Input ------ First line contains integer T, the number of test cases. Each test case consists of multiple parts: 1. An integer G, number of genres to analyze. 2. G genres follow, each with: - The genre name. - An integer B, the number of books in the inventory for that genre. - B lines follow, each with: - Book ID, Title, Author, Number of copies available (separated by commas). 3. An integer S, the number of sales transactions. 4. S lines follow, each with: - Book ID, Number of copies sold (separated by a comma). ------ Output ------ For each genre in the test case, output the genre name followed by the top N books based on the copies sold, where N is a parameter specified with each genre in the input. If there are ties in the sales, the order is determined by the book title in lexicographical order. If a book has no sales, it should not appear in the output. ------ Constraints ------ 1 ≤ T ≤ 10; 1 ≤ G ≤ 50; 1 ≤ B ≤ 1000; 1 ≤ S ≤ 100000; 1 ≤ copies sold ≤ 10000; Genre names and book titles contain only alphanumeric characters and spaces. ------ Example Input ------ 2 1 Fantasy 3 1,The Hobbit,J.R.R. Tolkien,100 2,Harry Potter,J.K. Rowling,50 3,The Witcher,Andrzej Sapkowski,20 5 1,10 2,20 3,10 2,3 1,5 1 Science Fiction 3 4,Dune,Frank Herbert,60 5,Neuromancer,William Gibson,40 6,Foundation,Isaac Asimov,30 4 5,15 4,40 6,12 5,10 ------ Example Output ------ Fantasy Harry Potter, 23 The Hobbit, 15 The Witcher, 10 Science Fiction Dune, 40 Neuromancer, 25 Foundation, 12 Note: Ensure that your solutions handle edge cases such as multiple genres, different number of book sales, and proper sorting based on both sales and titles.","solution":"def generate_sales_report(input_data): input_lines = input_data.split(\'n\') current_line = 0 T = int(input_lines[current_line]) current_line += 1 result = [] for _ in range(T): G = int(input_lines[current_line]) current_line += 1 genre_sales = {} for _ in range(G): genre_name = input_lines[current_line].strip() current_line += 1 B = int(input_lines[current_line]) current_line += 1 inventory = {} # Reading inventory for _ in range(B): book_data = input_lines[current_line].split(\',\') book_id = book_data[0].strip() title = book_data[1].strip() author = book_data[2].strip() copies_available = int(book_data[3].strip()) inventory[book_id] = { \'title\': title, \'author\': author, \'copies_available\': copies_available, \'copies_sold\': 0 } current_line += 1 S = int(input_lines[current_line]) current_line += 1 # Update sales for _ in range(S): transaction_data = input_lines[current_line].split(\',\') book_id = transaction_data[0].strip() copies_sold = int(transaction_data[1].strip()) if book_id in inventory: inventory[book_id][\'copies_sold\'] += copies_sold current_line += 1 genre_sales[genre_name] = list(inventory.values()) for genre_name, books in genre_sales.items(): sorted_books = sorted(books, key=lambda x: (-x[\'copies_sold\'], x[\'title\'])) result.append(genre_name) for book in sorted_books: if book[\'copies_sold\'] > 0: result.append(f\\"{book[\'title\']}, {book[\'copies_sold\']}\\") return \'n\'.join(result)"},{"question":"You are given an integer array `arr` consisting of n unique integers. Return a sorted array `res` of the same length such that: - `res` contains all the integers from `arr` sorted in non-decreasing order. - For all the integers in the first half of `res` (including the median if the array length is odd), every integer is less than or equal to every integer in the second half of `res`. More formally, if res = [res_1, res_2, ..., res_n], then for every i (1 le i le leftlfloor frac{n}{2} rightrfloor), res_i le res_j for every j (leftlceil frac{n}{2} rightrceil le j le n). Implement the following function: `def rearrange_array(arr: List[int]) -> List[int]:` -----Input----- - An integer array `arr` of length n (1 le n le 100) consisting of unique integers. -----Output----- - A list of integers sorted in the specified order. -----Examples----- Input: arr = [4, 3, 1, 2] Output: [1, 2, 3, 4] Input: arr = [11, 9, 13, 10, 12] Output: [9, 10, 11, 12, 13] -----Note----- In the first example, the output `[1, 2, 3, 4]` follows the sorted order. In the second example, the output `[9, 10, 11, 12, 13]` follows the sorted order. The first half `[9, 10, 11]` contains all integers less than or equal to any integer in the second half `[12, 13]`.","solution":"def rearrange_array(arr): Returns the array arr sorted in non-decreasing order such that for the first half of the result, every integer is less than or equal to every integer in the second half of the result. return sorted(arr)"},{"question":"You are given a list of integers. Your task is to determine if there exist three distinct elements in the list that sum up to zero. -----Input----- The first line of input contains an integer n (3 ≤ n ≤ 10^4) - the number of integers in the list. The second line contains n integers a1, a2, ..., an (|ai| ≤ 10^5) representing the elements of the list. -----Output----- Print \\"YES\\" (without the quotes), if there exist three distinct elements in the list that sum up to zero, and \\"NO\\" otherwise. -----Examples----- Input 5 -1 2 1 -4 2 Output YES Input 4 1 2 3 4 Output NO Input 6 0 0 0 0 0 0 Output YES -----Note----- In the first sample test, the triplet (-1, -4, 5) sums up to zero. In the second sample test, there are no three distinct elements that sum up to zero. In the third sample test, the triplet (0, 0, 0) sums up to zero.","solution":"def three_sum_zero(nums): Determine if there exist three distinct elements in the list that sum up to zero. :param nums: List of integers :return: \\"YES\\" or \\"NO\\" nums.sort() n = len(nums) for i in range(n-2): if i > 0 and nums[i] == nums[i-1]: continue left, right = i+1, n-1 while left < right: total = nums[i] + nums[left] + nums[right] if total == 0: return \\"YES\\" elif total < 0: left += 1 else: right -= 1 return \\"NO\\""},{"question":"gcd(a, b): Greatest Common Divisor The greatest common divisor (gcd) of two integers a and b is the largest integer that divides both a and b. The function to compute the gcd can be implemented using Euclid\'s algorithm, which is quite efficient. Euclid\'s algorithm is based on the principle that the gcd of two numbers is the same as the gcd of their difference and the smaller number. It can be simplified to use the modulo operation. The algorithm is as follows: 1. If b is 0, then the gcd is a. 2. Otherwise, replace a with b and b with a % b. 3. Repeat the process until b is 0. Task Given two numbers a and b, your task is to compute the gcd of a and b using Euclid\'s algorithm. Input Format The input consists of two integers a and b. Constraints 1 ≤ a, b ≤ 1000 Output Format Output a single integer, the gcd of a and b. Sample Input 48 18 Sample Output 6 Explanation The gcd of 48 and 18 is calculated as follows: 1. gcd(48, 18) 2. gcd(18, 48 % 18) = gcd(18, 12) 3. gcd(12, 18 % 12) = gcd(12, 6) 4. gcd(6, 12 % 6) = gcd(6, 0) Since 6 is the last non-zero remainder, the gcd is 6. Note: The Euclid\'s algorithm works efficiently even for large numbers due to its logarithmic time complexity.","solution":"def gcd(a, b): Returns the greatest common divisor of a and b using Euclid\'s algorithm. while b != 0: a, b = b, a % b return a"},{"question":"# Sum of Divisors in a Range Given a list of integers, we need to find the sum of divisors for each number within a specified range [L, R]. For each number in the range, calculate the sum of all divisors including 1 and the number itself. The result should be computed under modulo 10^9 + 7. **Input Format:** - The first line contains two integers N and Q, where N denotes the size of the list and Q denotes the number of queries. - The second line contains N integers which are the elements of the list. - Each of the next Q lines contains two integers L and R denoting the range [L, R] for which the sum of divisors needs to be calculated. **Output Format:** - For each query, print a single integer — the sum of divisors of all numbers in the specified range [L, R] modulo 10^9 + 7. **Constraints:** - 1 leq N leq 10^5 - 1 leq Q leq 10^5 - 1 leq text{element in list} leq 10^9 - 1 leq L leq R leq N **Sample Input 1:** ``` 5 2 4 6 8 9 10 1 3 2 5 ``` **Sample Output 1:** ``` 15 36 ``` **Explanation 1:** For the first query, the elements in the range [1, 3] are 4, 6, and 8. - Divisors of 4 are 1, 2, 4: Sum = 7 - Divisors of 6 are 1, 2, 3, 6: Sum = 12 - Divisors of 8 are 1, 2, 4, 8: Sum = 15 Total sum = 7 + 12 + 15 = 34. For the second query, the elements in the range [2, 5] are 6, 8, 9, and 10. - Divisors of 6 are 1, 2, 3, 6: Sum = 12 - Divisors of 8 are 1, 2, 4, 8: Sum = 15 - Divisors of 9 are 1, 3, 9: Sum = 13 - Divisors of 10 are 1, 2, 5, 10: Sum = 18 Total sum = 12 + 15 + 13 + 18 = 58. **Note:** Due to modulo constraint, the sums must be printed modulo 10^9 + 7.","solution":"MOD = 10**9 + 7 def sum_of_divisors(n): Returns the sum of divisors of the given number n. if n == 1: return 1 total = 1 + n for i in range(2, int(n ** 0.5) + 1): if n % i == 0: total += i if i != n // i: total += n // i return total def sum_divisors_in_range(numbers, queries): Returns the sum of divisors for each query range. results = [] for L, R in queries: range_sum = 0 for i in range(L - 1, R): range_sum += sum_of_divisors(numbers[i]) range_sum %= MOD results.append(range_sum) return results"},{"question":"Write a program that simulates an ATM machine. The ATM initially contains an unlimited supply of 50, 20, 10, and 5 bills. Customers can perform the following actions: 1. \\"deposit amount\\" - Deposit a specified amount into the ATM. Print the number of each type of bill deposited. 2. \\"withdraw amount\\" - Withdraw a specified amount using the minimum number of bills. Print the number of each type of bill used for the withdrawal. 3. \\"balance\\" - Print the total amount of money currently in the ATM. Your task is to implement the ATM machine using the above actions. ------ Input ------ The first line of the input contains an integer Q - the number of queries. Next Q lines contain one of the three types of actions: 1. \\"deposit amount\\" where amount is an integer (multiple of 5). 2. \\"withdraw amount\\" where amount is an integer. 3. \\"balance\\" ------ Output ------ For each action, produce the corresponding output as described above. ------ Constraints ------ 1. 1 ≤ Q ≤ 1000 2. In a \\"deposit amount\\" action, the amount will always be a multiple of 5 and less than or equal to 10000. 3. In a \\"withdraw amount\\" action, the amount will always be less than or equal to the total balance in the ATM, and the ATM will always be able to provide the exact amount using the available bill types. 4. For a \\"balance\\" action, print the current balance in the ATM. ------ Sample Input 1 ------ 5 deposit 205 balance withdraw 35 balance withdraw 50 ------ Sample Output 1 ------ Bills deposited: 50x4 5x1 205 Bills used: 20x1 10x1 5x1 170 Bills used: 50x1","solution":"class ATM: def __init__(self): self.balance = 0 def deposit(self, amount): if amount % 5 != 0: raise ValueError(\\"Amount must be a multiple of 5\\") self.balance += amount bills = {50: 0, 20: 0, 10: 0, 5: 0} remaining = amount for bill in bills: while remaining >= bill: bills[bill] += 1 remaining -= bill deposit_details = \\"Bills deposited: \\" + \\" \\".join(f\\"{bill}x{count}\\" for bill, count in bills.items() if count > 0) print(deposit_details) def withdraw(self, amount): if amount > self.balance: raise ValueError(\\"Insufficient funds\\") self.balance -= amount bills = {50: 0, 20: 0, 10: 0, 5: 0} remaining = amount for bill in bills: while remaining >= bill: bills[bill] += 1 remaining -= bill withdraw_details = \\"Bills used: \\" + \\" \\".join(f\\"{bill}x{count}\\" for bill, count in bills.items() if count > 0) print(withdraw_details) def get_balance(self): print(self.balance) # Example usage flow (commented out when implement tests) # atm = ATM() # atm.deposit(205) # atm.get_balance() # atm.withdraw(35) # atm.get_balance() # atm.withdraw(50)"},{"question":"Write a program to determine the longest substring of a given string that contains only unique characters. The program should output the length of this substring. For example, if the input string is \\"abcabcbb\\", the longest substring with all unique characters is \\"abc\\" which has a length of 3. Input A single string containing up to 10,000 characters. The string consists of lowercase English letters only. Output A single integer which represents the length of the longest substring with all unique characters. Example Input abcabcbb Output 3","solution":"def length_of_longest_substring(s): Returns the length of the longest substring with all unique characters. char_index_map = {} start = max_length = 0 for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i max_length = max(max_length, i - start + 1) return max_length"},{"question":"Color Blocks Sara came across a colorful array while working on her programming assignment. She has an array consisting of elements, each representing a color. Adjacent elements of the same color form a color block. A color block is defined as a consecutive sequence of elements in the array with the same value. Given the array, Sara needs your help to count the number of distinct color blocks. Note: For the array [1, 2, 2, 3, 3, 3, 4], there are 4 distinct color blocks: [1], [2, 2], [3, 3, 3], [4]. -----Input----- The input consists of two lines: - The first line contains an integer, n, representing the number of elements in the array. - The second line contains n space-separated integers, representing the array elements. -----Output----- Print one integer, the number of distinct color blocks. -----Constraints----- - 1 ≤ n ≤ 10^5 - The array elements are integers in the range 1 to 10^6. Example Input: 7 1 2 2 3 3 3 4 Output: 4","solution":"def count_color_blocks(n, arr): Counts the number of distinct color blocks in the array. Parameters: n (int): Length of the array arr (list of int): The array elements Returns: int: Number of distinct color blocks if n == 0: return 0 color_blocks = 1 for i in range(1, n): if arr[i] != arr[i-1]: color_blocks += 1 return color_blocks"},{"question":"In this problem, you need to determine if a given list of integers is sorted in non-decreasing order, strictly decreasing order, or neither. Constraints * 1 le N le 100 * -10^3 le a_i le 10^3 for all 1 le i le N * All values in input are integers. Input Input is given from Standard Input in the following format: N a_1 a_2 a_3 ... a_N Output Print \\"Non-Decreasing\\" if the list is sorted in non-decreasing order, \\"Strictly Decreasing\\" if the list is sorted in strictly decreasing order, and \\"Not Sorted\\" if the list is neither. Examples Input 5 1 2 2 3 4 Output Non-Decreasing Input 4 10 9 8 7 Output Strictly Decreasing Input 6 3 5 1 4 2 6 Output Not Sorted","solution":"def determine_sort_order(N, arr): Determines if the list is sorted in non-decreasing order, strictly decreasing order, or neither. Parameters: - N: int, the number of elements in the list. - arr: list of int, the elements of the list. Returns: - str, \\"Non-Decreasing\\", \\"Strictly Decreasing\\", or \\"Not Sorted\\" based on the order of the list. if all(arr[i] <= arr[i+1] for i in range(N-1)): return \\"Non-Decreasing\\" elif all(arr[i] > arr[i+1] for i in range(N-1)): return \\"Strictly Decreasing\\" else: return \\"Not Sorted\\" # Example usage N = 5 arr = [1, 2, 2, 3, 4] print(determine_sort_order(N, arr)) # Output: Non-Decreasing"},{"question":"You are given a wireless network comprising of \'n\' devices. Each device has a unique ID ranging from 1 to n. Devices can directly communicate with each other if their IDs differ by at most \'k\'. Your task is to find the minimum number of direct communications required so that every device can send a message to every other device either directly or indirectly. Input The first line contains two integers \'n\' (2 ≤ n ≤ 1000) and \'k\' (1 ≤ k ≤ n - 1). Output In a single line, output the minimum number of direct communications required. Explanation Each device can communicate directly with other devices if their IDs differ by at most \'k\'. You need to ensure that every device can reach every other device through a series of direct communications using this condition. Examples Input 4 1 Output 3 Input 5 2 Output 4","solution":"def min_direct_communications(n, k): This function calculates the minimum number of direct communications required such that every device in a network can communicate with every other device either directly or indirectly. Parameters: n (int): Number of devices k (int): Maximum ID difference for direct communication Returns: int: Minimum number of direct communications required return max(0, n - k)"},{"question":"A binary matrix is a matrix consisting of only 0s and 1s. You are given a binary matrix and are asked to find the row with the maximum number of 1s. If there are multiple rows with the same maximum number of 1s, return the index (0 based) of the first such row. To make the task more interesting, implement a function `rowWithMax1s` which accepts a 2-dimensional list (a list of lists) representing the binary matrix, and returns the index of the row with the maximum number of 1s. If the input is invalid, return `None`. Here are some examples: ```python row_with_max_1s([[0, 1, 1], [1, 1, 1], [0, 0, 0]]) # returns 1 row_with_max_1s([[1, 0], [0, 1], [1, 1]]) # returns 2 row_with_max_1s([[0, 0], [0, 0], [0, 0]]) # returns None, since all rows have the same number of 1s (zero) row_with_max_1s(\\"invalid\\") # returns None row_with_max_1s([]) # returns None ``` Good luck!","solution":"def row_with_max_1s(matrix): Returns the index of the row with the maximum number of 1s. If there are multiple rows with the same number of maximum 1s, returns the index of the first such row. If the input is invalid, returns None. if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix): return None if not matrix: return None max_1s = -1 max_row_index = None for index, row in enumerate(matrix): if not all(cell in [0, 1] for cell in row): return None num_1s = sum(row) if num_1s > max_1s: max_1s = num_1s max_row_index = index return max_row_index if max_1s > 0 else None"},{"question":"In a distant galaxy, there is a strange planet inhabited by creatures called Xorons. The Xorons communicate using a special kind of language which only consists of strings formed by the characters \'X\' and \'Y\'. The Xorons follow a peculiar rule for string formation: a string is considered valid if it does not contain two consecutive \'Y\' characters. You are tasked with finding the number of valid strings of length N that can be formed by the Xorons. ------ Input ------ The first line of the input contains an integer T, the number of test cases. The description of T test cases follows. Each of the following T lines contains a single integer N, the length of the string. ------ Output ------ For each test case, output a single integer corresponding to the number of valid strings of length N. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 ------ Sample Input 1 ------ 3 1 2 3 ------ Sample Output 1 ------ 2 3 5 ----- Explanation 1 ------ For N = 1, the valid strings are: \'X\', \'Y\'. So, the number of valid strings is 2. For N = 2, the valid strings are: \'XX\', \'XY\', \'YX\'. So, the number of valid strings is 3. For N = 3, the valid strings are: \'XXX\', \'XXY\', \'XYX\', \'YXX\', \'YXY\'. So, the number of valid strings is 5.","solution":"def count_valid_strings(N): Returns the number of valid strings of length N. if N == 1: return 2 if N == 2: return 3 # Use dynamic programming to find the count of valid strings of length N dp = [0] * (N + 1) dp[1] = 2 dp[2] = 3 for i in range(3, N + 1): dp[i] = dp[i - 1] + dp[i - 2] return dp[N] def solve_xoron_language(T, cases): results = [] for N in cases: results.append(count_valid_strings(N)) return results"},{"question":"You are tasked with creating a program that classifies tweets into one of three categories. We have access to a training set of tweets, each labeled with a category: 1 (sports), 2 (news), or 3 (entertainment). The training set includes tweets in CSV format, with each row containing a tweet identifier, the tweet text, and its category number. Your goal is to build a model to predict the category of new, unlabeled tweets. Each tweet is represented as a single string, and your program will output the predicted category number. Input: - The first line contains an integer `n` (1 ≤ n ≤ 100), the number of test tweets to classify. - The next `n` lines each contain a tweet. Each tweet is a string of length not exceeding 280 characters. Output: - For each tweet, output an integer from 1 to 3, inclusive — the category number the tweet belongs to. Example: Input: ``` 3 \\"Just won a marathon!\\" \\"Breaking: the stock market crashes!\\" \\"Can\'t wait for the new superhero movie!\\" ``` Output: ``` 1 2 3 ``` Guidance: 1. You may use any approach to classify the tweets, such as keyword matching, frequency analysis, or a machine learning model trained on the provided training set. 2. Consider preprocessing the text of the tweets, e.g., by converting to lowercase, removing special characters, etc. 3. Accuracy is important, so ensure your classification strategy is as robust as possible.","solution":"import re import csv from collections import defaultdict def preprocess_text(text): Preprocess tweet text by converting to lowercase and removing special characters. text = text.lower() text = re.sub(r\'[^ws]\', \'\', text) return text def train_model(training_data): Train a simple keyword-based classification model based on keyword frequencies in the training data. category_keywords = defaultdict(lambda: defaultdict(int)) for tweet_id, tweet_text, category in training_data: words = preprocess_text(tweet_text).split() for word in words: category_keywords[category][word] += 1 return category_keywords def classify_tweet(tweet, category_keywords): Classify a tweet based on the trained keyword frequencies. words = preprocess_text(tweet).split() category_scores = defaultdict(int) for category, keywords in category_keywords.items(): for word in words: category_scores[category] += keywords.get(word, 0) return max(category_scores, key=category_scores.get) def classify_tweets(tweets, category_keywords): Classify a list of tweets and return their categories. return [classify_tweet(tweet, category_keywords) for tweet in tweets] # Example usage of the solution\'s functions: def main(training_data, test_tweets): category_keywords = train_model(training_data) return classify_tweets(test_tweets, category_keywords)"},{"question":"Implement a function `longest_balanced_substring(s)` that takes a string `s` consisting of the characters \'(\' and \')\' only, and returns the length of the longest substring that is balanced. A balanced string is one where for every opening parenthesis \'(\' there is a corresponding closing parenthesis \')\'. **Example:** ```python longest_balanced_substring(\\"(()))\\") => 4 longest_balanced_substring(\\")()())\\") => 4 longest_balanced_substring(\\"()()\\") => 4 longest_balanced_substring(\\"())\\") => 2 longest_balanced_substring(\\"((()\\") => 2 ```","solution":"def longest_balanced_substring(s): Returns the length of the longest balanced substring consisting of \'(\' and \')\'. max_len = 0 stack = [-1] for i, char in enumerate(s): if char == \'(\': stack.append(i) else: # char == \')\' stack.pop() if stack: max_len = max(max_len, i - stack[-1]) else: stack.append(i) return max_len"},{"question":"Calculate the longest common prefix of a given list of strings. The longest common prefix is the longest substring that all strings in the list share as a prefix. -----Constraints----- - 1 ≤ number of strings ≤ 200 - 1 ≤ length of any string ≤ 1000 - All strings consist of lowercase English letters. -----Input----- Input is given from Standard Input in the following format: - An integer n representing the number of strings. - Followed by n lines, each containing one string. -----Output----- Print the longest common prefix. If no common prefix exists, print an empty string. -----Sample Input----- 4 flower flow flight fluctuate -----Sample Output----- fl The longest common prefix among \\"flower\\", \\"flow\\", \\"flight\\", and \\"fluctuate\\" is \\"fl\\".","solution":"def longest_common_prefix(strs): Returns the longest common prefix from a list of strings. if not strs: return \\"\\" # The shortest string in the list shortest_str = min(strs, key=len) for i in range(len(shortest_str)): char = shortest_str[i] for string in strs: if string[i] != char: return shortest_str[:i] return shortest_str"},{"question":"You are given a list of students, each represented by an object that contains their name and a list of grades they have received. Your task is to complete the function that will calculate the average of the highest three grades for each student, and then return a list of student names who have an average grade of 90 or above. Example: Input: students = [ {\\"name\\": \\"Alice\\", \\"grades\\": [88, 90, 92]}, {\\"name\\": \\"Bob\\", \\"grades\\": [79, 85, 94, 91]}, {\\"name\\": \\"Charlie\\", \\"grades\\": [70, 75, 80]}, {\\"name\\": \\"David\\", \\"grades\\": [91, 92, 93, 96]} ] Output: [\\"Alice\\", \\"David\\"] Explanation: - Alice\'s highest three grades are [88, 90, 92] with an average of 90. - Bob\'s highest three grades are [91, 94, 85] with an average of 90. - Charlie doesn\'t have enough grades to consider. - David\'s highest three grades are [93, 92, 96] with an average of 93.67. Note: If a student has fewer than three grades, they should not be considered in the resulting list. Your task is to complete the function and return the list of student names who have an average grade of 90 or above.","solution":"def get_top_students(students): Returns a list of student names who have an average grade of 90 or above. Parameters: - students: List of dictionaries, each containing \'name\' (str) and \'grades\' (list of int). Returns: - List of student names (str) who have an average of the highest three grades of 90 or above. top_students = [] for student in students: grades = student[\'grades\'] if len(grades) >= 3: highest_three_avg = sum(sorted(grades, reverse=True)[:3]) / 3 if highest_three_avg >= 90: top_students.append(student[\'name\']) return top_students"},{"question":"Write a program that calculates whether it is possible to buy exactly M toys with a budget of N dollars, given that there are two types of toys available: Type 1 with a cost of A dollars each, and Type 2 with a cost of B dollars each. -----Constraints----- - 1 leq N leq 1000 - 1 leq M leq 100 - 1 leq A, B leq 100 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: N M A B -----Output----- If it is possible to buy exactly M toys with a budget of N dollars, print POSSIBLE; if it is impossible, print IMPOSSIBLE. -----Sample Input----- 20 4 3 5 -----Sample Output----- POSSIBLE In this case, you can buy 2 Type 1 toys and 2 Type 2 toys, which costs exactly 20 dollars and gives you exactly 4 toys in total.","solution":"def toy_purchase_possibility(N, M, A, B): Determines if it is possible to buy exactly M toys with a budget of N dollars where there are two types of toys available: Type 1 costs A dollars, Type 2 costs B dollars. Parameters: N (int): Budget in dollars. M (int): Required number of toys. A (int): Cost of Type 1 toy. B (int): Cost of Type 2 toy. Returns: str: \'POSSIBLE\' if it is possible to buy exactly M toys within the budget N, otherwise \'IMPOSSIBLE\'. for i in range(M + 1): if i * A + (M - i) * B <= N: return \'POSSIBLE\' return \'IMPOSSIBLE\' # Example Usage # result = toy_purchase_possibility(20, 4, 3, 5) # print(result) # Output: \\"POSSIBLE\\""},{"question":"You are tasked with analyzing patterns in square matrices and determining whether they are symmetrical. A matrix is said to be symmetric if it is equal to its transpose. The transpose of a matrix is obtained by flipping it over its main diagonal. Write a function `is_symmetric(matrix)` that takes as input a square matrix (a list of lists, where each inner list is of the same length as the matrix) and returns `True` if the matrix is symmetric, and `False` otherwise. Example: ``` matrix1 = [ [1, 2, 3], [2, 1, 4], [3, 4, 1] ] is_symmetric(matrix1) # should return True matrix2 = [ [1, 0, 3], [2, 1, 4], [3, 4, 1] ] is_symmetric(matrix2) # should return False ``` Constraints: - The elements of the matrix will be integers. - The matrix will always be non-empty and square (n x n where 1 ≤ n ≤ 100).","solution":"def is_symmetric(matrix): Checks if the given square matrix is symmetric. Args: matrix (list of lists of int): Square matrix to check. Returns: bool: True if the matrix is symmetric, False otherwise. n = len(matrix) for i in range(n): for j in range(i, n): if matrix[i][j] != matrix[j][i]: return False return True"},{"question":"A city has N intersections and M bidirectional roads connecting them. Each road has a unique ID and a travel time. The city\'s transportation department wants to rearrange the roads to minimize the maximum travel time between any two intersections. The following steps can be performed any number of times: 1. Remove a road from the city. 2. Replace the removed road with a new one that does not already exist in the city. The new road should connect a different pair of intersections, and it can have any travel time. Given the initial road configuration, determine the minimum possible maximum travel time between any two intersections after an optimal rearrangement of the roads. ------ Input Format ------ - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two integers N and M. - The next M lines contain three integers each - u, v, and t, where u and v are the intersections connected by the road, and t is the travel time of the road. ------ Output Format ------ For each test case, print a single line containing one integer - the minimum possible maximum travel time. ------ Constraints ------ 1 ≤ T ≤ 100 2 ≤ N ≤ 1000 1 ≤ M ≤ min(N cdot (N-1) / 2, 10^4) 1 ≤ u, v ≤ N 1 ≤ t ≤ 10^6 ------ Sample Input 1 ------ 2 3 3 1 2 4 2 3 3 1 3 5 4 4 1 2 10 2 3 20 3 4 30 4 1 40 ------ Sample Output 1 ------ 3 20 ------ Explanation 1 ------ Example case 1: You can remove the road with travel time 5 and replace it with a road (1 to 3) with travel time 4. The roads become (1-2, t=4), (2-3, t=3), and (1-3, t=4). The maximum travel time is reduced to 4. Example case 2: The road already connects the intersections with the minimum maximum travel time possible, so the answer remains 20.","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal(n, edges): result = [] i = 0 # index variable for sorted edges e = 0 # index variable for result[] parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) edges = sorted(edges, key=lambda item: item[2]) while e < n - 1: u, v, w = edges[i] i += 1 x = find(parent, u) y = find(parent, v) if x != y: e += 1 result.append([u, v, w]) union(parent, rank, x, y) max_edge_in_mst = max(result, key=lambda item: item[2])[2] return max_edge_in_mst def min_max_travel_time(t, test_cases): results = [] for case in test_cases: n, m = case[\'n\'], case[\'m\'] edges = case[\'edges\'] results.append(kruskal(n, edges)) return results # Example usage def main(): t = 2 test_cases = [ {\'n\': 3, \'m\': 3, \'edges\': [(0, 1, 4), (1, 2, 3), (0, 2, 5)]}, {\'n\': 4, \'m\': 4, \'edges\': [(0, 1, 10), (1, 2, 20), (2, 3, 30), (3, 0, 40)]} ] results = min_max_travel_time(t, test_cases) for result in results: print(result) main()"},{"question":"Jaime loves playing with sequences of numbers and challenges his friends with puzzles about them. One day, he thought of a new puzzle involving the greatest common divisor (GCD) and decided to test his friends using this idea. Given a sequence of n integers a_1, a_2, ..., a_n, Jaime wants to find the maximum GCD value he can obtain by removing exactly one element from the sequence. However, since the GCD of just one element is the element itself, removing a single element and finding the GCD of the remaining sequence is necessary. Write a program to help Jaime find this maximum GCD value. Input The first line contains an integer n (2 ≤ n ≤ 10^5) — the number of elements in the sequence. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6) — the elements of the sequence. Output Print a single integer — the maximum GCD value that can be obtained by removing exactly one element from the sequence. Examples Input 3 3 9 15 Output 3 Input 5 12 15 18 21 24 Output 3 Input 4 1 1 1 1 Output 1 Note In the first example, if we remove the element 3, the GCD of the remaining elements {9, 15} is 3. If we remove the element 9, the GCD of the remaining elements {3, 15} is also 3. If we remove the element 15, the GCD of the remaining elements {3, 9} remains 3. Therefore, the maximum GCD value obtained is 3. In the second example, removing any element will result in the GCD of the remaining sequence being 3. In the third example, every element is 1, so the GCD of any sequence obtained by removing one element will always be 1.","solution":"import math def max_gcd_after_removal(n, arr): if n == 2: return max(arr) # With only 2 elements, removing one leaves the other. # Compute the prefix and suffix GCD arrays prefix_gcd = [0] * n suffix_gcd = [0] * n prefix_gcd[0] = arr[0] for i in range(1, n): prefix_gcd[i] = math.gcd(prefix_gcd[i - 1], arr[i]) suffix_gcd[n - 1] = arr[n - 1] for i in range(n - 2, -1, -1): suffix_gcd[i] = math.gcd(suffix_gcd[i + 1], arr[i]) # Compute maximum GCD after removing an element max_gcd = 0 for i in range(n): if i == 0: max_gcd = max(max_gcd, suffix_gcd[1]) elif i == n - 1: max_gcd = max(max_gcd, prefix_gcd[n - 2]) else: max_gcd = max(max_gcd, math.gcd(prefix_gcd[i - 1], suffix_gcd[i + 1])) return max_gcd # Example Usage n = 3 arr = [3, 9, 15] print(max_gcd_after_removal(n, arr)) # Output: 3"},{"question":"You are given a list of n integer numbers forming an array. Your task is to find a non-empty continuous subarray that has the largest product of its elements. Write a program to determine this maximum product. -----Input----- The first line contains an integer n (1 le n le 10^5) — the number of elements in the array. The next line contains n integer numbers a_i (-10 le a_i le 10) — the elements of the array. -----Output----- Print a single integer, the maximum product of any continuous subarray of the given array. -----Example----- Input 5 2 3 -2 4 -1 Output 48 Explanation: The subarray [2, 3, -2, 4, -1] has the maximum product of 48.","solution":"def max_product_subarray(nums): Returns the maximum product of any continuous subarray of the given array. max_product = float(\'-inf\') current_max, current_min = 1, 1 for num in nums: if num == 0: current_max, current_min = 1, 1 max_product = max(max_product, 0) else: temp = current_max * num current_max = max(num * current_max, num * current_min, num) current_min = min(temp, num * current_min, num) max_product = max(max_product, current_max) return max_product"},{"question":"Alice is organizing a coding contest. She wants to ensure that the difficulty levels of the problems are well distributed. She has n problems, each with a distinct difficulty level. Alice wants to select exactly k problems such that the difference between the highest and the lowest difficulty levels among the chosen problems is minimized. Help Alice achieve this by writing a program that chooses the optimal k problems and prints out the minimized difficulty difference. Input The first line contains two integers n and k (1 ≤ k ≤ n ≤ 100). The second line contains n integers representing the difficulty levels of the problems. The difficulty levels are distinct integers between 1 and 1000. Output Print a single integer — the minimized difference between the highest and lowest difficulty levels among the chosen k problems. Example Input 5 3 10 12 15 20 25 Output 5 Explanation By selecting problems with difficulty levels 10, 12, and 15, the difficulty difference is minimized to 5 (15 - 10).","solution":"def minimize_difficulty_difference(n, k, difficulties): Returns the minimized difference between the highest and lowest difficulty levels among the chosen k problems. # Sort the difficulty levels difficulties.sort() # Initialize the minimum difference to a large number min_difference = float(\'inf\') # Iterate through the sorted list and find the minimum difference for k problems for i in range(n - k + 1): difference = difficulties[i + k - 1] - difficulties[i] if difference < min_difference: min_difference = difference return min_difference"},{"question":"You are given a grid with n rows and m columns. Each cell in the grid can either be `.` representing an empty cell or `*` representing a blocked cell. Your task is to determine the number of maximum connected components of empty cells (`.`). A connected component is a set of empty cells such that you can reach any cell in this set from any other cell in the set by only moving up, down, left, or right and only passing through empty cells. ------ Input ------ The first line of the input contains two integers n and m - the number of rows and the number of columns, respectively. Each of the next n lines contains m characters (either `.` or `*`). ------ Output ------ Output a single integer - the number of maximum connected components of empty cells in the grid. ------ Constraints ------ 1 ≤ n, m ≤ 1,000 ------ Sample Input 1 ------ 5 5 ..*.. ..*.. ***** ..**. ..*.. ------ Sample Output 1 ------ 4 ------ Explanation 1 ------ There are four connected components of empty cells: 1. Cells (1,1), (1,2), (2,1), (2,2) 2. Cell (1,4), (1,5), (2,5) 3. Cell (4,1), (4,4) 4. Cell (5,1), (5,4) ------ Sample Input 2 ------ 4 7 .....*. .*....* .*.**** ....... ------ Sample Output 2 ------ 2 ------ Explanation 2 ------ There are two connected components of empty cells: 1. Cells (1,1), (1,2), (1,3), (1,4), (1,5), (2,4), (2,5), (3,1), (4,1), (4,2), (4,3), (4,4), (4,5), (4,6), (4,7) 2. Cell (2,5), (3,2) Note: In the first example, the grid looks like this: ``` ..*.. ..*.. ***** ..**. ..*.. ``` There are four connected components of empty cells.","solution":"def max_connected_components(grid): Determines the maximum number of connected components of empty cells in the grid. Parameters: grid (list of str): The grid represented as a list of strings. Returns: int: The number of connected components of empty cells. if not grid or not grid[0]: return 0 n = len(grid) m = len(grid[0]) visited = [[False] * m for _ in range(n)] directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' and not visited[x][y] def dfs(x, y): stack = [(x, y)] while stack: cx, cy = stack.pop() for dx, dy in directions: nx, ny = cx + dx, cy + dy if is_valid(nx, ny): visited[nx][ny] = True stack.append((nx, ny)) components = 0 for i in range(n): for j in range(m): if grid[i][j] == \'.\' and not visited[i][j]: visited[i][j] = True components += 1 dfs(i, j) return components"},{"question":"# Chessboard Knight\'s Tour Problem In this problem, you are given a chessboard of size (n times n) and a knight. The knight moves using the rules of chess, where it can move either 2 squares in one direction and 1 square in the perpendicular direction or 1 square in one direction and 2 squares in the perpendicular direction. The task is to determine whether the knight can travel to every square on the board, starting from a given initial position. **Input:** The input consists of: - One line with two integers (n) and (k) ((5 leq n leq 20), (1 leq k leq n^2)), where (n) is the size of the chessboard and (k) is the number of allowable moves for the knight starting from its initial position. - One line with two integers (x) and (y) ((1 leq x, y leq n)), denoting the starting position of the knight on the chessboard. **Output:** Output \\"possible\\" if the knight can travel to every square on the chessboard within (k) moves. Otherwise, output \\"impossible\\". **Examples:** Example 1: ``` Input: 5 32 1 1 Output: possible ``` Example 2: ``` Input: 5 10 1 1 Output: impossible ``` **Note:** - Assume that the chessboard is indexed as follows: (1, 1) is the bottom-left square, and (n, n) is the top-right square. - The knight must visit every square on the board exactly once within the given number of moves, (k).","solution":"def knight_tour(n, k, x, y): Determines if the knight can travel to every square on the board within k moves. Args: n: Size of the chessboard (n x n). k: Number of allowable moves. x: Starting position\'s x-coordinate. y: Starting position\'s y-coordinate. Returns: \\"possible\\" if the knight can visit every square within k moves, otherwise \\"impossible\\". def is_inside_board(x, y): return 1 <= x <= n and 1 <= y <= n def backtrack(x, y, visited, move_count): if move_count > k: return False if len(visited) == n * n: return True moves = [ (x + 2, y + 1), (x + 2, y - 1), (x - 2, y + 1), (x - 2, y - 1), (x + 1, y + 2), (x + 1, y - 2), (x - 1, y + 2), (x - 1, y - 2) ] for nx, ny in moves: if is_inside_board(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) if backtrack(nx, ny, visited, move_count + 1): return True visited.remove((nx, ny)) return False starting_pos = (x, y) visited = {starting_pos} if backtrack(x, y, visited, 0): return \\"possible\\" else: return \\"impossible\\""},{"question":"Mark is planning to attend a series of workshops next month. Each workshop has a specific duration in days and Mark has a very tight schedule. He wants to make sure that he can attend each workshop without any conflicts. A conflict arises if two workshops overlap on any day. Given the start and end days of each workshop, determine whether Mark can attend all workshops without any conflicts. -----Input----- The first line contains one integer n (1 ≤ n ≤ 100) — the number of workshops. The i-th of the following n lines contains two integers s_{i} and e_{i} (1 ≤ s_{i} ≤ e_{i} ≤ 365) — the start and end day of the i-th workshop. -----Output----- Print \\"NO\\" if there is any conflict among the workshops. Otherwise, print \\"YES\\". -----Example----- Input 3 1 3 4 6 2 5 Output NO -----Note----- In the first example, the third workshop overlaps with both the first and second workshops, hence there is a conflict. In the second example below, there is no overlap. Input 2 1 5 6 10 Output YES","solution":"def can_attend_all_workshops(n, workshops): Determine whether Mark can attend all workshops without any conflicts. Parameters: n (int): Number of workshops. workshops (list of tuples): A list of tuples where each tuple contains two integers (start_day, end_day). Returns: str: \\"YES\\" if there are no conflicts, otherwise \\"NO\\". # Sort workshops by their start time workshops.sort() # Check for overlapping intervals for i in range(1, n): # If the current workshop starts before the previous one ends, there\'s a conflict if workshops[i][0] <= workshops[i - 1][1]: return \\"NO\\" return \\"YES\\""},{"question":"Alice loves working with strings. She has a favorite string of length N, which contains only lowercase alphabets. Each day, she performs several operations on this string. A common operation she performs is to find the lexicographically smallest substring of a given length from the string. Alice wants to optimize her solution and she\'s asking for your help. Write a program that helps Alice find the lexicographically smallest substring of a given length for multiple queries. -----Input----- The first line contains an integer N, the length of the string. The next line contains the string S of length N. The third line contains an integer Q, the number of queries. Each of the next Q lines contains a single integer Li, the length of the substring for which Alice wants to find the lexicographically smallest substring. -----Output----- For each query, output a single line containing the lexicographically smallest substring of the given length. -----Constraints----- - 1 ≤ N ≤ 100,000 - 1 ≤ Q ≤ 100,000 - 1 ≤ Li ≤ N -----Example----- Input: 7 abcdeed 3 2 3 4 Output: ab abc abcd","solution":"def find_lexicographically_smallest_substring(n, s, q, queries): Given a string s of length n and a number of queries q where each query requests the lexicographically smallest substring of length Li, return the results for all queries. results = [] for length in queries: min_substring = s[0:length] # Initialize with the first substring of given length for i in range(1, n - length + 1): current_substring = s[i:i+length] if current_substring < min_substring: min_substring = current_substring results.append(min_substring) return results"},{"question":"You are tasked with finding the largest integer in a specific structure: a matrix that contains positive integers in a certain pattern. The matrix is given in such a way that each number can only appear once per row and per column. Furthermore, adjacent numbers (horizontally or vertically) differ by at most one. Given this matrix, your goal is to write a function that computes the largest integer in the matrix. Input The first line contains an integer n (2 ≤ n ≤ 500) representing the size of the matrix (n x n). The next n lines each contain n integers representing the matrix. Each integer k (1 ≤ k ≤ 105) is such that for each number, adjacent numbers (in its row or column) differ by at most one. Output Output a single integer: the largest number in the matrix. Examples Input 3 1 2 3 2 3 4 3 4 5 Output 5 Input 2 99 100 100 101 Output 101 Input 4 1 1 2 2 1 2 2 3 2 3 4 4 3 3 4 5 Output 5 Note In the first example, each number in the grid is unique within its row and column, and adjacent numbers differ by at most one. The largest number is clearly 5. In the second example, the numbers remain unique per row and per column, and the largest number is 101. In the third example, despite 1 and 2 being repeated in every row, the condition of adjacent numbers differing by at most one is met, and the largest number is 5.","solution":"def find_largest_in_matrix(n, matrix): Returns the largest integer in the given n x n matrix. max_value = float(\'-inf\') for row in matrix: row_max = max(row) max_value = max(max_value, row_max) return max_value"},{"question":"You are given a collection of strings representing large binary numbers. Your task is to sort these binary numbers in ascending order based on their decimal values and print the sorted list. Each binary number string may contain leading zeros and the length of the binary numbers can vary. It\'s important to handle the conversion and comparison operations efficiently due to the potentially large size of the numbers. Input - The first line of input contains an integer n, the number of binary numbers. The following n lines each contain a binary number. Output - Print the sorted list of binary numbers, each on a new line, in ascending order based on their decimal values. SAMPLE INPUT 4 110 10 111 011 SAMPLE OUTPUT 10 011 110 111","solution":"def sort_binary_numbers(numbers): Sorts a list of binary number strings in ascending order based on their decimal values. Parameters: numbers (list of str): List of binary number strings. Returns: list of str: List of sorted binary number strings. # Convert binary strings to integers, sort the integers and finally convert back to binary strings sorted_numbers = sorted(numbers, key=lambda x: int(x, 2)) return sorted_numbers def main(): # Read input n = int(input().strip()) binary_numbers = [input().strip() for _ in range(n)] # Get the sorted list sorted_binary_numbers = sort_binary_numbers(binary_numbers) # Print each sorted binary number on a new line for binary in sorted_binary_numbers: print(binary) if __name__ == \\"__main__\\": main()"},{"question":"You are given a vending machine with the following features: - The vending machine contains 5 slots (0, 1, 2, 3, 4). - Each slot can hold a stack of items of the same type. - The machine dispenses items based on the slot number inputted by the user. - The machine also displays the current count of items in a specified slot. You need to write a function `vending_machine(slot, action)` which: - Takes `slot` as an integer in the range [0, 4]. - Takes `action` as a string which can be either `\'dispense\'` or `\'count\'`. Your function should return: - If `action` is `\'dispense\'`, the function should remove one item from the specified slot and return `True`. If the slot is empty or the `slot` number is invalid, return `False`. - If `action` is `\'count\'`, the function should return the current count of items in the specified slot. If the `slot` number is invalid, return `-1`. The initial quantity of items in each slot is given as a list: `items = [10, 5, 3, 8, 6]`. Implement the `vending_machine` function. Examples: - `vending_machine(1, \'dispense\')` should return `True` (since slot 1 has 5 items initially, and dispensing one leaves 4 items). - `vending_machine(0, \'count\')` should return `10` (since slot 0 initially has 10 items). - `vending_machine(3, \'dispense\')` should return `True` (since slot 3 has 8 items initially, and dispensing one leaves 7 items). - `vending_machine(-1, \'dispense\')` should return `False` (since the slot -1 is invalid). - `vending_machine(2, \'count\')` should return `3` (since slot 2 initially has 3 items).","solution":"# Initial inventory setup items = [10, 5, 3, 8, 6] def vending_machine(slot, action): Function to simulate a vending machine. Parameters: slot (int): The slot number (0-4). action (str): The action to perform (\'dispense\' or \'count\'). Returns: bool/int: True if dispensing was successful, False if not, item count if \'count\', -1 for invalid slot. if slot < 0 or slot >= len(items): return False if action == \'dispense\' else -1 if action == \'dispense\': if items[slot] > 0: items[slot] -= 1 return True else: return False elif action == \'count\': return items[slot] return False # If action is neither \'dispense\' nor \'count\'."},{"question":"You are given an array of integers and a single integer K. We define the SubArraySum value of an array as the sum of all possible subarrays of that array. For example, if the array is [1, 2], then the possible subarrays are [1], [2], and [1, 2], giving a SubArraySum value of 1 + 2 + (1+2) = 6. Now, your task is to compute the total SubArraySum value for the given array and check if it is divisible by the given integer K. Write a program that calculates the SubArraySum value for the given array and then checks if it is divisible by K. ------ Input ------ The first line contains two integers N and K. The second line contains N integers representing the elements of the array. ------ Output ------ Print \\"YES\\" if the SubArraySum value is divisible by K and \\"NO\\" otherwise. ------ Example ------ Input: 3 3 1 2 3 Output: NO ------ Explanation ------ In the test case, the array is [1, 2, 3]. The possible subarrays are [1], [2], [3], [1, 2], [2, 3], and [1, 2, 3]. The SubArraySum value is 1 + 2 + 3 + (1+2) + (2+3) + (1+2+3) = 1 + 2 + 3 + 3 + 5 + 6 = 20. Since 20 is not divisible by 3, the output is \\"NO\\". ------ Scoring ------ Subtask 1 (25 points): 1 ≤ N ≤ 100, 1 ≤ K ≤ 100. Subtask 2 (25 points): 1 ≤ N ≤ 1000, 1 ≤ K ≤ 1000. Subtask 3 (50 points): 1 ≤ N ≤ 1 000 000, 1 ≤ K ≤ 1 000 000.","solution":"def is_subarray_sum_divisible(arr, K): Calculates the SubArraySum value and checks if it is divisible by K. Parameters: arr (list): List of integers. K (int): Divisor. Returns: str: \\"YES\\" if the SubArraySum value is divisible by K, otherwise \\"NO\\". N = len(arr) subarray_sum = 0 # Calculate total SubArraySum value for i in range(N): subarray_sum += arr[i] * (N - i) * (i + 1) # Check divisibility if subarray_sum % K == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"Write a function that takes an English sentence as input and returns the sentence with each word\'s letters reversed but with the words in their original order. The input will consist of a single string containing alphabetic characters and spaces. The sentence will neither start nor end with a space, and there will be exactly one space between any two words. The sentences will have at most 100 characters. SAMPLE INPUT: Hello World Programming is fun Code every day SAMPLE OUTPUT: olleH dlroW gnimmargorP si nuf edoC yreve yad Explanation EXAMPLE 1: The word \'Hello\' becomes \'olleH\' and \'World\' becomes \'dlroW\'. The words remain in the same order. EXAMPLE 2: The word \'Programming\' becomes \'gnimmargorP\', \'is\' becomes \'si\', and \'fun\' becomes \'nuf\'. The words remain in the same order.","solution":"def reverse_words(sentence): Reverses each word in the sentence but keeps the words in their original order. Parameters: sentence (str): The input English sentence to be processed. Returns: str: The sentence with each word\'s letters reversed. words = sentence.split() reversed_words = [word[::-1] for word in words] return \' \'.join(reversed_words)"},{"question":"Given an array of non-negative integers, determine the maximum sum of a contiguous subarray with at least one element. Function Description Complete the maxSubarraySum function in the editor below. maxSubarraySum has the following parameter: int arr[n]: an array of non-negative integers. Returns int: the maximum sum of a contiguous subarray. Input Format The first line contains an integer t, the number of test cases. Each of the next 2t lines contains the information related to each test case: - The first line of each test case contains an integer n, the length of the array. - The second line of each test case contains n space-separated integers representing the elements of the array. Constraints 1 leq t leq 10 1 leq n leq 10^5 0 leq text{arr[i]} leq 10^9 Output Format For each test case, print the maximum sum of a contiguous subarray on a new line. Sample Input STDIN Function ----- -------- 2 t = 2 3 n = 3 (first test case) 1 2 3 arr = [1, 2, 3] 4 n = 4 (second test case) 2 1 3 4 arr = [2, 1, 3, 4] Sample Output 6 10 Explanation Test Case 1: The contiguous subarray [1, 2, 3] has the maximum sum of 6. Test Case 2: The contiguous subarray [2, 1, 3, 4] has the maximum sum of 10.","solution":"def maxSubarraySum(arr): Returns the maximum sum of a contiguous subarray. # Initialize our variables max_current = max_global = arr[0] # Iterate through the array starting from the second element for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global def process_input(t, cases): results = [] for case in cases: n, arr = case result = maxSubarraySum(arr) results.append(result) return results"},{"question":"You are given an array of N integers. Your task is to divide the array into two non-empty parts such that the absolute difference between their sums is minimized. You should output this minimum possible absolute difference. Constraints * 2 <= N <= 100 * 1 <= A_i <= 10^9 * All values in the input are integers. Input Input is given from Standard Input in the following format: N A_1 A_2 ... A_N Output Print the minimum possible absolute difference between the sums of the two parts of the array. Examples Input 5 1 2 3 4 5 Output 1 Input 4 8 4 5 8 Output 1 Input 3 3 1 2 Output 0","solution":"def minimize_difference(N, A): Returns the minimum possible absolute difference between the sums of two non-empty parts of the array A. total_sum = sum(A) half = total_sum // 2 dp = [False] * (half + 1) dp[0] = True for num in A: for j in range(half, num - 1, -1): dp[j] |= dp[j - num] for i in range(half, -1, -1): if dp[i]: sum1 = i break sum2 = total_sum - sum1 return abs(sum2 - sum1)"},{"question":"In a planet called Zog, there are n isolated cities connected by m bidirectional roads. Each road has a length associated with it, and all roads make a connected undirected graph. The roads in Zog often get closed due to maintenance, thus affecting the connectivity between cities. Zog\'s government wants to ensure that there is always a way to travel between any two cities using the remaining open roads. Your task is to determine if the removal of any single road will still leave the graph connected. Input The first line contains two integers n (2 ≤ n ≤ 10^5) and m (n - 1 ≤ m ≤ 2⋅10^5) — the number of cities and roads respectively. The next m lines each contain three integers u, v and l (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ l ≤ 10^9) representing a road between city u and city v with length l. Output Print \\"Yes\\" if the graph remains connected after removing any single road, and \\"No\\" otherwise. Examples Input 5 5 1 2 2 2 3 2 3 4 2 4 5 2 1 5 3 Output Yes Input 4 3 1 2 3 2 3 4 3 4 5 Output No Input 6 7 1 2 1 2 3 2 3 4 3 4 5 4 5 6 5 1 3 6 2 4 7 Output Yes Note In the first example, removing any one of the five roads will not disconnect the graph because there is always an alternative path. In the second example, removing any one road will result in the graph becoming disjoint, implying no alternative path exists. In the third example, the graph remains connected after removing any one road since each pair of cities is connected through multiple paths, ensuring connectivity.","solution":"from collections import defaultdict, deque def is_connected_after_removal(n, m, edges): Function to determine if the graph remains connected after removing any single road. :param n: int: number of cities :param m: int: number of roads :param edges: list of tuples: each tuple (u, v, l) represents a road between city u and city v with length l :return: str: \\"Yes\\" if the graph remains connected after removing any single road, \\"No\\" otherwise if m > n - 1: # The graph has redundant edges return \\"Yes\\" # Function to perform BFS and count reachable nodes def bfs_count(start, adjacency_list, removed_edge): visited = [False] * (n + 1) queue = deque([start]) visited[start] = True count = 0 while queue: node = queue.popleft() count += 1 for neighbor in adjacency_list[node]: if not visited[neighbor] and (node, neighbor) != removed_edge and (neighbor, node) != removed_edge: visited[neighbor] = True queue.append(neighbor) return count # Build adjacency list adjacency_list = defaultdict(list) for u, v, l in edges: adjacency_list[u].append(v) adjacency_list[v].append(u) # Perform connectivity check after removing each edge for u, v, l in edges: if bfs_count(1, adjacency_list, (u, v)) != n: return \\"No\\" return \\"Yes\\""},{"question":"You are given a sequence of n positive integers, each representing the height of buildings in a city skyline. A building\'s left and right walls are straight vertical lines, and every building extends downward from its height to ground level (height 0). Your task is to determine the maximum area of a rectangle that can be formed by choosing a contiguous subsequence of buildings. The rectangle\'s height should be the height of the shortest building in that subsequence, and its width should be the number of buildings in the subsequence. For example, given the sequence [2, 1, 5, 6, 2, 3], the largest rectangular area is 10. This rectangle is defined by the third and fourth buildings (heights [5, 6]), which together form a rectangle of height 5 and width 2. **Input:** The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of buildings. The second line contains n positive integers h_i (1 ≤ h_i ≤ 10^9), where h_i is the height of the i-th building. **Output:** Print a single integer, the maximum area of a rectangle that can be formed by any contiguous subsequence of the buildings. **Example:** **Input:** ``` 6 2 1 5 6 2 3 ``` **Output:** ``` 10 ``` **Note:** In the given example, the maximum rectangular area is obtained by choosing the subsequence starting from the third building to the fourth building, which forms a rectangle of height 5 (shorter height among 5 and 6) and width 2, resulting in an area of 10.","solution":"def max_rectangle_area(n, heights): Returns the maximum area of a rectangle formed by choosing a contiguous subsequence of buildings. # Helper function to calculate the maximum area in a histogram def largestRectangleArea(heights): stack = [] max_area = 0 index = 0 while index < len(heights): # If the stack is empty or the current height is greater than or equal to the height of the building # corresponding to the top index in the stack, push the current index onto the stack if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: # Otherwise, calculate the area for the building corresponding to stack\'s top top_of_stack = stack.pop() # Width calculation depends on whether the stack is empty or not area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) # Remaining buildings in the stack while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area return largestRectangleArea(heights)"},{"question":"The annual school science fair has a unique competition involving colored ribbons. Each participating student is required to use two ribbons of different colors to create various combinations. A set of different ribbons will be provided to the students, and they need to use them in pairs. Each student is allowed to use any two different colors once and only once in a pair. Your task is to compute the number of unique pairs that can be formed using the available ribbons. Input The first line of input contains T, the number of test cases. Each test case consists of two lines. The first line contains an integer K, the number of different ribbon colors available. The second line contains K integers, denoting the colors of the ribbons. Output For each test case, output the number of unique pairs of ribbons that can be formed. Constraints 1 ≤ T ≤ 100 2 ≤ K ≤ 100 1 ≤ R[i] ≤ 1000 (where R[i] is a color of a ribbon) Example Input: 2 4 1 2 3 4 5 1 1 2 3 4 Output: 6 10","solution":"def count_unique_pairs(T, test_cases): This function takes in an integer T, the number of test cases, and a list of test_cases, where each element is a tuple containing: - an integer K, the number of different ribbon colors - a list of integer colors of the ribbons. The function returns a list of integers, where each integer is the number of unique pairs of ribbons that can be formed for the corresponding test case. results = [] for case in test_cases: K, ribbons = case # We need to calculate the number of unique pairs from the K colors unique_pairs = K * (K - 1) // 2 results.append(unique_pairs) return results # Function to read input and use count_unique_pairs def main(input_str): input_lines = input_str.strip().split(\'n\') T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): K = int(input_lines[index]) ribbons = list(map(int, input_lines[index + 1].split())) test_cases.append((K, ribbons)) index += 2 result = count_unique_pairs(T, test_cases) return \'n\'.join(map(str, result))"},{"question":"A robot in a factory moves on a 2D grid starting from the origin (0, 0). The robot can move in four possible directions: up, down, left, and right. A sequence of such movements is given to the robot, and you need to determine the robot\'s final position on the grid after performing all movements. The movements are represented by a string of characters where: - \'U\' indicates a move up (y-coordinate increases by 1), - \'D\' indicates a move down (y-coordinate decreases by 1), - \'L\' indicates a move left (x-coordinate decreases by 1), - \'R\' indicates a move right (x-coordinate increases by 1). -----Constraints----- - The length of the movement sequence is between 1 and 1000. - The movement sequence only contains the characters \'U\', \'D\', \'L\', \'R\'. -----Input----- Input is given from Standard Input in the following format: movement_sequence -----Output----- Print the final position of the robot as two integers separated by a space, representing the x and y coordinates respectively. -----Sample Input----- UDLR -----Sample Output----- 0 0 In this example, the robot starts at (0, 0), moves up to (0, 1), then down to (0, 0), then left to (-1, 0), and finally right back to (0, 0). Hence, the final position is (0, 0).","solution":"def final_position(movements): Returns the final position of the robot on the 2D grid after performing all movements. Parameters: movements (str): A string of characters where: \'U\' (up) increases the y-coordinate by 1, \'D\' (down) decreases the y-coordinate by 1, \'L\' (left) decreases the x-coordinate by 1, \'R\' (right) increases the x-coordinate by 1. Returns: tuple: A tuple of two integers representing the final (x, y) coordinates of the robot. x, y = 0, 0 for move in movements: if move == \'U\': y += 1 elif move == \'D\': y -= 1 elif move == \'L\': x -= 1 elif move == \'R\': x += 1 return x, y"},{"question":"Swipey is working on their new video game and has come across a problem. The game involves controlling a character through an obstacle course. Swipey needs to find the most efficient way to navigate the character through the grid. You are given a 2D grid with dimensions ( N times M ) where certain cells are blocked and other cells are open for movement. The top-left cell (1, 1) is the starting point, and the bottom-right cell (N, M) is the ending point. The character can move up, down, left, or right, but not diagonally. Each move to an adjacent cell costs 1 unit of energy. Swipey needs your help to determine the minimum energy required to navigate from the start to the end. If it is not possible to reach the end, return -1. ------ Input Format ------ - The first line contains two integers ( N ) and ( M ) – the number of rows and columns in the grid respectively. - The next ( N ) lines each contain ( M ) characters representing the grid. Each character is either \'.\' (an open cell) or \'#\' (a blocked cell). ------ Output Format ------ - Output a single integer – the minimum energy required to reach the bottom-right cell from the top-left cell, or -1 if it is not possible to reach the end. ------ Constraints ------ ( 1 ≤ N, M ≤ 1000 ) ----- Sample Input 1 ------ 4 4 .... ..#. ..#. .... ----- Sample Output 1 ------ 6 ----- Explanation 1 ------ The character moves as follows: (1,1) -> (2,1) -> (3,1) -> (4,1) -> (4,2) -> (4,3) -> (4,4). Total energy required is 6. ----- Sample Input 2 ------ 3 3 .#. # ..# ----- Sample Output 2 ------ -1 ----- Explanation 2 ------ There is no way to reach the bottom-right cell from the top-left cell since the obstacles block all possible paths.","solution":"from collections import deque def minimum_energy(N, M, grid): # Check if the start or end points are blocked if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': return -1 # Movement vectors for up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Create a deque for BFS queue = deque([(0, 0, 0)]) # (row, col, cost) visited = set((0, 0)) while queue: x, y, cost = queue.popleft() # If we\'ve reached the bottom-right corner if x == N - 1 and y == M - 1: return cost # Explore all possible moves for dx, dy in directions: nx, ny = x + dx, y + dy # Check if the new position is valid and not blocked if 0 <= nx < N and 0 <= ny < M and grid[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, cost + 1)) # If no path was found to the bottom-right corner return -1"},{"question":"Design an algorithm to flatten a binary tree into a \\"linked list\\" in place. For the purposes of this question, \\"flatten\\" means to transform the binary tree into a singly linked list, instantiated from the same TreeNode class. The linked list should use the right pointer to represent the \\"next\\" pointer in a list (the left pointer should always be null in the end). The linked list should be in the same order as the pre-order traversal of the binary tree. Example: Input: 1 / 2 5 / 3 4 6 Output: 1 - 2 - 3 - 4 - 5 - 6 Explanation: The flattened tree should look like 1 -> 2 -> 3 -> 4 -> 5 -> 6 Your Task: You don\'t need to read input or print anything. Your task is to complete the function flatten() which takes the root of the tree as its only argument and modifies the tree in place such that it becomes a flattened linked list as described. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1. The number of nodes in the tree is in the range [1, 10^4]. 2. -100 <= Node.val <= 100","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def flatten(root): Flattens the binary tree into a linked list in pre-order traversal order. Modifies the tree in place. if not root: return node = root while node: if node.left: # Find the rightmost node of the left subtree rightmost = node.left while rightmost.right: rightmost = rightmost.right # Rewire the connections rightmost.right = node.right node.right = node.left node.left = None # Move on to the right side of the tree node = node.right"},{"question":"Paul is creating a custom password generator for his new project. He wants the password generator to create passwords that meet the following criteria: 1. The password must be at least 8 characters long. 2. The password must contain at least one uppercase letter. 3. The password must contain at least one lowercase letter. 4. The password must contain at least one numeric digit. 5. The password must contain at least one special character from the set: !@#%^&*()-_+= Paul needs to implement this as a function that generates a random password meeting these requirements. Task Write a function `generate_password()` that, when called, returns a password meeting the criteria above. The function should produce a different password each time it\'s called. Example Suppose the function is called, it might return a password like ``` \'3Gt9b!Qa\' ``` (Note: Each call to the function should produce a different valid password.)","solution":"import random import string def generate_password(): Generate a random password meeting the following criteria: 1. The password must be at least 8 characters long. 2. The password must contain at least one uppercase letter. 3. The password must contain at least one lowercase letter. 4. The password must contain at least one numeric digit. 5. The password must contain at least one special character from the set: !@#%^&*()-_+= length = 8 possible_characters = string.ascii_letters + string.digits + \\"!@#%^&*()-_+=\\" while True: # Generate a random password password = \'\'.join(random.choice(possible_characters) for _ in range(length)) # Check if password meets all criteria if (any(c.islower() for c in password) and any(c.isupper() for c in password) and any(c.isdigit() for c in password) and any(c in \\"!@#%^&*()-_+=\\" for c in password)): return password"},{"question":"You are given a sequence of integers, some of which are repeated. You need to find the length of the longest consecutive subsequence of distinct integers, where consecutive integers in the subsequence appear in the same relative order as in the original sequence. A subsequence is obtained by deleting some (or none) elements from the original sequence while maintaining the relative order of the remaining elements. -----Input----- The first line contains an integer t (1 le t le 100), indicating the number of test cases. For each test case: - The first line contains an integer n (1 le n le 10^5), the length of the sequence. - The second line contains n integers a_1, a_2, ..., a_n (1 le a_i le 10^9), the elements of the sequence. It is guaranteed that the sum of n over all test cases does not exceed 10^5. -----Output----- For each test case, print the length of the longest consecutive subsequence of distinct integers. -----Examples----- Input 3 7 1 2 3 4 5 2 4 6 1 2 2 3 4 5 5 5 1 2 3 1 Output 5 4 4 -----Note----- In the first test case, the longest consecutive subsequence of distinct integers is [1, 2, 3, 4, 5]. In the second test case, the longest consecutive subsequence of distinct integers is [2, 3, 4, 5]. In the third test case, the longest consecutive subsequence of distinct integers is [5, 1, 2, 3].","solution":"def longest_consecutive_subsequence(t, test_cases): results = [] for i in range(t): n, sequence = test_cases[i] seen = {} # Dictionary to store the last seen position of each element start = 0 # Start of the current window max_length = 0 for j in range(n): if sequence[j] in seen: start = max(start, seen[sequence[j]] + 1) seen[sequence[j]] = j max_length = max(max_length, j - start + 1) results.append(max_length) return results # Example usage: # test_cases = [ # (7, [1, 2, 3, 4, 5, 2, 4]), # (6, [1, 2, 2, 3, 4, 5]), # (5, [5, 1, 2, 3, 1]) # ] # print(longest_consecutive_subsequence(3, test_cases)) # Output: [5, 4, 4]"},{"question":"Given a linked list with n nodes, where each node contains an integer value, write a function to remove all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Note: The order of the linked list should be preserved. Example: Input: n = 6 List: 1 -> 2 -> 3 -> 2 -> 1 -> 4 Output: 3 -> 4 Input: n = 5 List: 1 -> 2 -> 3 -> 3 -> 2 Output: 1 Input: n = 3 List: 1 -> 1 -> 1 Output: (empty list) Your Task: You don\'t need to read input or print anything. Complete the function removeDuplicates() which takes the head of the linked list as an argument and returns the head of the modified linked list. Constraints: 1 <= n <= 10^5 1 <= Node\'s value <= 10^5 Expected Time Complexity: O(n) Expected Space Complexity: O(n)","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def removeDuplicates(head): if not head: return None # First pass: count the occurrences of each value count = {} current = head while current: count[current.val] = count.get(current.val, 0) + 1 current = current.next # Second pass: build a new list with only distinct values dummy = ListNode(0) # A dummy head to simplify inserted nodes current = dummy while head: if count[head.val] == 1: current.next = ListNode(head.val) current = current.next head = head.next return dummy.next"},{"question":"You are tasked with creating an event schedule for a series of n events, each of which has a specific start and end time. Each event’s time interval is inclusive, meaning that an event that starts at time s and ends at time t is active at all times from s to t (including both s and t). Your goal is to determine the maximum number of non-overlapping events that can be attended. Input The first line of input contains a single integer n (1 ≤ n ≤ 100,000), representing the number of events. The next n lines each contain two integers s and t (1 ≤ s < t ≤ 1,000,000), representing the start and end times of each event. Output Output a single integer representing the maximum number of non-overlapping events that can be attended. Example Input 5 1 4 2 6 8 10 3 5 5 7 Output 3 Explanation In the example provided, the maximum number of non-overlapping events that can be attended is 3. One such optimal set of events is: (1, 4), (5, 7), and (8, 10).","solution":"def max_non_overlapping_events(events): Returns the maximum number of non-overlapping events that can be attended. :param events: List of tuples [(start1, end1), (start2, end2), ...] :return: Maximum number of non-overlapping events # Sort events based on their end time events.sort(key=lambda x: x[1]) max_events = 0 last_end_time = 0 for start, end in events: if start > last_end_time: max_events += 1 last_end_time = end return max_events # Example usage if __name__ == \\"__main__\\": n = 5 events = [(1, 4), (2, 6), (8, 10), (3, 5), (5, 7)] print(max_non_overlapping_events(events)) # Output: 3"},{"question":"Mirko has a grid of size `N x M` which is initially filled with zeroes. He also has a set of K commands to change the values in specific subgrids. Each command has the form `(x1, y1, x2, y2, v)`, which means that he has to add the value `v` to every cell in the rectangular subgrid defined by the top-left corner `(x1, y1)` and the bottom-right corner `(x2, y2)` (1-indexed coordinates). The commands should be executed in the given order. Your task is to apply all commands to the grid and then find the final value of each cell. -----Input----- - The first line consists of three integers, `N`, `M`, and `K` (`1 ≤ N, M ≤ 1000`, `1 ≤ K ≤ 100000`), representing the number of rows and columns of the grid, and the number of commands. - Each of the following `K` lines contains five integers, `x1`, `y1`, `x2`, `y2`, and `v`, representing a command that modifies the values in the subgrid from `(x1, y1)` to `(x2, y2)` inclusive by adding `v` (`1 ≤ x1 ≤ x2 ≤ N`, `1 ≤ y1 ≤ y2 ≤ M`, `-1000 ≤ v ≤ 1000`). -----Output----- - Output `N` lines, each with `M` integers. Line `i` should contain the values in the cells of the `i`-th row of the final grid, separated by spaces. -----Examples----- Input: 3 3 3 1 1 2 2 1 2 2 3 3 2 1 3 3 3 3 Output: 1 1 3 1 3 5 0 2 5","solution":"def apply_commands(N, M, commands): grid = [[0] * M for _ in range(N)] for command in commands: x1, y1, x2, y2, v = command for i in range(x1 - 1, x2): for j in range(y1 - 1, y2): grid[i][j] += v return grid"},{"question":"You are given a string S consisting of lowercase Latin letters. A string is called **balanced** if every letter that appears in the string appears an equal number of times. For example, the strings \\"aabb\\", \\"xyzxyz\\", and \\"aabbcc\\" are balanced, whereas \\"aab\\", \\"xxyz\\", and \\"aabbccd\\" are not. Your task is to check whether the given string is balanced or not. If it is balanced, print the number of distinct characters in the string. If it is not balanced, print -1. ------ Input ------ The first line of input contains a single integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of a single line containing the string S. ------ Output ------ For each test case, print a single line containing the result as described above. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S| ≤ 1000 ------ Sample Input 1 ------ 5 aabb xyzxyz aabbb apple aabbccdd ------ Sample Output 1 ------ 2 3 -1 -1 4 ------ Explanation 1 ------ In the first case, \\"aabb\\" is balanced and contains 2 distinct characters: a and b. In the second case, \\"xyzxyz\\" is balanced and contains 3 distinct characters: x, y, and z. In the third case, \\"aabbb\\" is not balanced because the character \'a\' appears 2 times while \'b\' appears 3 times, so the output is -1. In the fourth case, \\"apple\\" is not balanced because the characters \'a\', \'p\', \'l\', and \'e\' do not appear the same number of times, so the output is -1. In the fifth case, \\"aabbccdd\\" is balanced and contains 4 distinct characters: a, b, c, and d.","solution":"def is_balanced(S): Checks if the string S is balanced. If balanced, returns the number of distinct characters in the string. Otherwise, returns -1. from collections import Counter char_count = Counter(S) counts = list(char_count.values()) if all(count == counts[0] for count in counts): return len(char_count) else: return -1 def process_test_cases(T, test_cases): results = [] for S in test_cases: results.append(is_balanced(S)) return results"},{"question":"A company needs to keep track of the working hours of its employees. Each employee provides a start and end time for their workday in the 24-hour format (HH:MM). The company wants to calculate the total working time for each employee in minutes. Write a program that takes the start and end times as input and calculates the total working time in minutes. -----Note----- It is guaranteed that the end time is always later than the start time on the same day. -----Constraints----- - The input times are in the format HH:MM, where HH is an integer between 00 and 23 (inclusive) and MM is an integer between 00 and 59 (inclusive). - The times are valid and well-formatted. -----Input----- Input is given from Standard Input in the following format: HH:MM HH:MM The first time is the start time, and the second time is the end time. -----Output----- Print the total working time in minutes. -----Sample Input----- 09:00 17:30 -----Sample Output----- 510 In this case, the total working time is 510 minutes.","solution":"def calculate_working_time(start_time, end_time): Calculate the total working time in minutes from the start and end times provided in HH:MM format. start_hours, start_minutes = map(int, start_time.split(\':\')) end_hours, end_minutes = map(int, end_time.split(\':\')) start_total_minutes = start_hours * 60 + start_minutes end_total_minutes = end_hours * 60 + end_minutes total_working_minutes = end_total_minutes - start_total_minutes return total_working_minutes"},{"question":"You are given a non-negative integer `N`. Your task is to determine the length of the longest consecutive sequence of 1s in the binary representation of `N`. For example, consider the binary representation of the number 156: - The binary representation of 156 is \'10011100\'. - The longest consecutive sequence of 1s has length 3 (from the segment \'111\'). Write a function that takes an integer `N` and returns the length of the longest consecutive sequence of 1s in its binary representation. Input A single integer `N` (0 ≤ N ≤ 10^9). Output Print the length of the longest consecutive sequence of 1s in the binary representation of `N`. Example Input 156 Output 3 Note In the example, the binary representation of 156 is \'10011100\'. The longest consecutive sequence of 1s has length 3.","solution":"def longest_consecutive_ones(N): Returns the length of the longest consecutive sequence of 1s in the binary representation of N. # Convert N to binary representation and split by \'0\' # This gives us segments of consecutive \'1\'s binary_representation = bin(N)[2:] segments_of_ones = binary_representation.split(\'0\') # Find the length of the longest segment of \'1\'s longest_sequence = max(segments_of_ones, key=len) return len(longest_sequence)"},{"question":"Given an integer array of length N, determine if all elements are distinct. If they are distinct, print \\"YES\\". Otherwise, print \\"NO\\". -----Constraints----- - 1 leq N leq 10^6 - 1 leq A_i leq 10^9 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: N A_1 A_2 ... A_N -----Output----- Print \\"YES\\" if all elements of the array are distinct. Otherwise, print \\"NO\\". -----Sample Input 1----- 5 1 2 3 4 5 -----Sample Output 1----- YES -----Sample Input 2----- 4 1 2 2 3 -----Sample Output 2----- NO In the first case, all elements are distinct. In the second case, the element \'2\' appears twice.","solution":"def are_elements_distinct(n, arr): Determines if all elements in the list arr are distinct. Outputs \\"YES\\" if all elements are distinct, otherwise \\"NO\\". if len(arr) != n: raise ValueError(\\"Length of array does not match provided N\\") return \\"YES\\" if len(set(arr)) == n else \\"NO\\""},{"question":"Given an array `arr` of `n` integers and an integer `k`, find the maximum possible sum of `k` adjacent elements in the array. Constraints * 1 ≤ n ≤ 10^5 * 1 ≤ k ≤ n * -10^4 ≤ arr[i] ≤ 10^4 for all integers i Input Input is given from Standard Input in the following format: ``` n k arr[1] arr[2] ... arr[n] ``` Output Print a single integer representing the maximum sum of `k` adjacent elements in the array. Examples Input ``` 5 2 1 2 3 4 5 ``` Output ``` 9 ``` Input ``` 8 3 -1 -2 3 4 -5 6 7 8 ``` Output ``` 21 ```","solution":"def max_sum_of_k_adjacent_elements(n, k, arr): Returns the maximum possible sum of k adjacent elements in the array. Parameters: n (int): The length of the array. k (int): The number of adjacent elements to consider. arr (list): The list of integers. Returns: int: The maximum sum of k adjacent elements. if n == 0 or k > n: return 0 # Initializing the sum of the first \'k\' elements max_sum = current_sum = sum(arr[:k]) # Sliding over the rest of the elements for i in range(k, n): current_sum += arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"------ Problem Statement ------ In Byteland, every citizen has a unique identification number. The Government of Byteland has a peculiar way of assigning these identification numbers. They have found that a good way to generate identification numbers without repetition is by using permutations of digits. However, there is a problem when it comes to certain digits that can be confused when read upside down. The digits \'6\' and \'9\' can easily be mistaken for each other when flipped. You are given a number that can ambiguously represent multiple numbers when 6 and 9 are interchanged. Your task is to determine how many unique numbers can be derived from the given number by possibly changing each \'6\' to a \'9\' or each \'9\' to a \'6\'. ------ Input ------ The first line of the input contains a single integer T, the number of test cases. Each test case is provided on a new line with a single string representing the number. ------ Output ------ For each test case, output a single integer representing the count of unique numbers that can be formed. ------ Constraints ------ 1 ≤ T ≤ 100 Each number will be a non-empty string of digits, where each digit is between 0 and 9. ------ Sample Input 1 ------ 3 69 96 123 ------ Sample Output 1 ------ 4 4 1 Explanation: For the input \\"69\\", the possible unique numbers are: 69, 96, 66, and 99 - total 4 For the input \\"96\\", the possible unique numbers are: 96, 69, 99, and 66 - total 4 For the input \\"123\\", there is only one unique number - 123 - total 1","solution":"def count_unique_numbers(s): Given a string \'s\' representing a number, return the number of unique numbers that can be generated by changing each \'6\' to \'9\' or vice versa. count_6 = s.count(\'6\') count_9 = s.count(\'9\') # Calculate the number of unique permutations by considering independent changes of \'6\' and \'9\' unique_count = 2 ** count_6 * 2 ** count_9 return unique_count def process_test_cases(T, test_cases): results = [] for s in test_cases: results.append(count_unique_numbers(s)) return results"},{"question":"A computer scientist is trying to optimize the performance of a multi-threaded application. Each thread is represented by an interval [Li, Ri] which indicates the time interval during which the thread is active. To improve the performance analysis, the scientist wants to compute certain statistics about the system\'s activity over a given period of time. The system\'s activity can be represented by merging all the intervals of active threads into one interval and calculating the length of this merged interval. However, threads can also overlap, creating a continuous period of activity. Given a series of thread activity intervals, design a function that determines the total length of time where there is at least one active thread. Input Format: - The first line contains an integer N, the number of threads. - The next N lines each contain two integers Li and Ri, the start and end times of the i-th thread. Output Format: - A single integer representing the total length of time where at least one thread is active. Constraints: 1 ≤ N ≤ 10^5 0 ≤ Li < Ri ≤ 10^9 Sample Input: 6 1 5 2 6 8 10 5 9 3 4 11 12 Sample Output: 10 Explanation: The merged interval of all threads is [1, 6], [8, 10], and [11, 12]. The total length of these intervals is (6-1) + (10-8) + (12-11) = 5 + 2 + 1 = 8.","solution":"def total_active_time(intervals): Given a list of intervals [Li, Ri], this function calculates the total length of time where there is at least one active thread. Args: intervals (list of tuples): List of (Li, Ri) tuples representing active intervals of threads. Returns: int: Total length of time where there is at least one active thread. if not intervals: return 0 # First, we sort the intervals based on their start time intervals.sort(key=lambda x: x[0]) # We initialize variables to keep track of the merged intervals merged_intervals = [] current_start, current_end = intervals[0] for start, end in intervals[1:]: if start <= current_end: # There is an overlap current_end = max(current_end, end) else: # No overlap, push the previous interval to the list merged_intervals.append((current_start, current_end)) current_start, current_end = start, end # Don\'t forget to append the last interval merged_intervals.append((current_start, current_end)) # To calculate the total active time, we sum up the lengths of the merged intervals total_time = 0 for start, end in merged_intervals: total_time += end - start return total_time"},{"question":"MegaCorp is planning to introduce new positions within the company. Each position has certain requirements for background knowledge. You are tasked with writing a program to determine if an employee meets these requirements for any potential position based on their expertise level. Each position requires specific subjects at certain expertise levels, and each employee\'s knowledge is given as a set of subjects with corresponding expertise levels. # Inputs - The first line contains two integers, `N` (number of positions) and `M` (number of employees). - The next `N` lines describe each position. Each position starts with an integer `K`, the number of subject requirements followed by `K` pairs of values. Each pair contains a string `subject_name` and an integer `level` representing required expertise level in that subject. - The next `M` lines describe each employee. Each employee starts with an integer `L`, the number of subjects they know followed by `L` pairs of values. Each pair contains a string `subject_name` and an integer `level` representing the expertise level in that subject. # Outputs - For each employee, print `YES` if they qualify for all the subjects requirements of at least one position, otherwise print `NO`. # Constraints - 1 ≤ N, M ≤ 100 - 1 ≤ K, L ≤ 10 - 1 ≤ level ≤ 10 - `subject_name` is a string with length no more than 20 # Sample Input ``` 2 3 2 math 5 physics 7 3 math 4 physics 6 chemistry 5 2 math 5 physics 7 3 math 5 physics 7 chemistry 4 1 physics 8 2 math 4 physics 6 ``` # Sample Output ``` YES YES NO ``` # Explanation - The first employee meets the requirements for the first position (math 5, physics 7). - The second employee meets the requirements for the first position (math 5, physics 7) and also for the second position (math 4, physics 6, chemistry 5). - The third employee does not meet the requirements for any of the positions.","solution":"def does_employee_qualify(positions, employees): results = [] for employee in employees: employee_knowledge = {subject: level for subject, level in employee} qualifies = False for position in positions: if all(employee_knowledge.get(sub, 0) >= lvl for sub, lvl in position): qualifies = True break results.append(\'YES\' if qualifies else \'NO\') return results def main(): import sys input = sys.stdin.read data = input().split(\'n\') N, M = map(int, data[0].strip().split()) positions = [] line_index = 1 for i in range(N): position_data = data[line_index].strip().split() K = int(position_data[0]) position_requirements = [(position_data[j], int(position_data[j + 1])) for j in range(1, 2 * K, 2)] positions.append(position_requirements) line_index += 1 employees = [] for i in range(M): employee_data = data[line_index].strip().split() L = int(employee_data[0]) employee_knowledge = [(employee_data[j], int(employee_data[j + 1])) for j in range(1, 2 * L, 2)] employees.append(employee_knowledge) line_index += 1 results = does_employee_qualify(positions, employees) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"Madison enjoys sorting numbers in an adventurous way. She challenges her friend James to sort an array of numbers such that all even numbers appear before all odd numbers, but both even and odd numbers must maintain their relative order from the original array. James finds the task intriguing but needs your help to accomplish it. Write a function to rearrange the array as explained above. Print the modified array. -----Input:----- - First line will contain a single integer T, the number of testcases. - Each testcase consists of two lines, first line consists of an integer N (length of the array) and second line consists of N space-separated integers. -----Output:----- For each testcase, print the modified array on a new line. -----Constraints----- - 1 leq T leq 10^4 - 1 leq N leq 10^5 - Absolute values of elements in the array do not exceed 10^9 -----Sample Input:----- 2 6 4 3 1 2 7 8 5 2 4 6 1 3 -----Sample Output:----- 4 2 8 3 1 7 2 4 6 1 3","solution":"def rearrange_array(arr): Rearranges the array such that all even numbers appear before all odd numbers, preserving the relative order of both. evens = [x for x in arr if x % 2 == 0] odds = [x for x in arr if x % 2 != 0] return evens + odds def process_testcases(T, testcases): results = [] for case in testcases: N, arr = case rearranged = rearrange_array(arr) results.append(\\" \\".join(map(str, rearranged))) return results"},{"question":"Samara is attending a music festival and she loves collecting memorabilia. The festival has a unique way of distributing souvenirs. There are different souvenir booths arranged in a grid, and each booth offers a certain type of souvenir. Samara starts her collection at the booth located in the top-left corner of the grid and wants to end her collection at the bottom-right corner. Each booth offers a different souvenir, and Samara can only move to an adjacent booth either down or to the right. You need to help Samara determine the total number of unique paths she can take from the top-left to the bottom-right booth while collecting different souvenirs on each path. -----Input----- The first line contains two integers N and M, representing the number of rows and columns of the grid respectively. The next N lines each contain M characters, where each character S_{i,j} represents the type of souvenir at booth (i,j). Souvenirs are represented by lowercase letters (\'a\' to \'z\'), and each booth contains a unique type of souvenir. -----Output----- Output a single integer representing the total number of unique paths modulo 1000003. If there is no such path, output 0. -----Limits----- - 1 leq N, M leq 15 - No two booths contain the same type of souvenir. -----Examples----- Sample Input 1: 3 3 abc def ghi Sample Output 1: 6 Sample Input 2: 2 2 ab cd Sample Output 2: 2","solution":"def unique_paths(N, M, grid): MOD = 1000003 dp = [[0]*M for _ in range(N)] dp[0][0] = 1 for i in range(N): for j in range(M): if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[N-1][M-1]"},{"question":"Write a function that takes a string containing a sentence and returns a dictionary mapping each unique word to the number of times it appears in the sentence. Words should be considered case-insensitively and punctuation should be ignored. Example: ```python sentence = \\"Hello, world! Hello, Developer.\\" result = word_count(sentence) print(result) # Output: {\\"hello\\": 2, \\"world\\": 1, \\"developer\\": 1} ``` Note: For simplicity, you can assume that the input sentence will contain only letters, spaces, and the following punctuation: `,` `.` `!` `?`","solution":"import re from collections import defaultdict def word_count(sentence): Returns a dictionary mapping each unique word to the number of times it appears in the sentence. Words are considered case-insensitively and punctuation is ignored. # Convert to lowercase sentence = sentence.lower() # Remove punctuation using regex sentence = re.sub(r\'[,.!?]\', \'\', sentence) # Split the sentence into words words = sentence.split() # Create a defaultdict to count words word_counts = defaultdict(int) # Count each word for word in words: word_counts[word] += 1 return dict(word_counts)"},{"question":"A company has developed a new software to manage their digital library. One crucial feature is to find all the distinct substrings of a given string. For instance, given the string \\"abc\\", there are 6 distinct substrings: \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", and \\"abc\\". You are assigned to write a program that counts the number of distinct substrings for a given string. -----Input----- The input contains one string s (1 leq |s| leq 2000), consisting of lowercase English letters. -----Output----- Print an integer — the number of distinct substrings of the given string s. -----Examples----- Input abc Output 6 Input aaa Output 3 -----Note----- In the first example, the distinct substrings of \\"abc\\" are: \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", and \\"abc\\". In the second example, the distinct substrings of \\"aaa\\" are: \\"a\\", \\"aa\\", and \\"aaa\\".","solution":"def count_distinct_substrings(s): Returns the number of distinct substrings of the given string s. substrings = set() for i in range(len(s)): for j in range(i + 1, len(s) + 1): substrings.add(s[i:j]) return len(substrings)"},{"question":"You are given a grid of size NxM filled with non-negative integers. Your task is to find the maximum sum of a submatrix from this grid. A submatrix is defined as a rectangular portion of the matrix. Input The input consists of a series of test cases. Each test case starts with two integers N and M (1 ≤ N, M ≤ 200), the dimensions of the grid. This is followed by N lines, each containing M integers representing the grid. The series of test cases ends with a line containing two zeros. Output For each test case, print the maximum sum of any submatrix within the given grid. Example Input 4 5 1 2 -1 -4 -20 -8 -3 4 2 1 3 8 10 1 3 -4 -1 1 7 -6 2 3 1 2 3 -1 -2 -3 0 0 Output 29 6 Explanation In the first test case, the maximum sum submatrix is: 3 8 10 -4 -1 1 1 7 In the second test case, the maximum sum submatrix is: 1 2 3","solution":"def max_submatrix_sum(grid): def calculate_prefix_sum(matrix): prefix_sum = [[0] * (len(matrix[0]) + 1) for _ in range(len(matrix) + 1)] for i in range(1, len(prefix_sum)): for j in range(1, len(prefix_sum[0])): prefix_sum[i][j] = matrix[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1] return prefix_sum def find_max_sum(prefix_sum, rows, cols): max_sum = float(\'-inf\') for i1 in range(1, rows + 1): for i2 in range(i1, rows + 1): for j1 in range(1, cols + 1): for j2 in range(j1, cols + 1): total = prefix_sum[i2][j2] - prefix_sum[i1-1][j2] - prefix_sum[i2][j1-1] + prefix_sum[i1-1][j1-1] max_sum = max(max_sum, total) return max_sum if not grid: return 0 N, M = len(grid), len(grid[0]) prefix_sum = calculate_prefix_sum(grid) return find_max_sum(prefix_sum, N, M) def process_test_cases(test_cases): results = [] for grid in test_cases: results.append(max_submatrix_sum(grid)) return results def parse_input(input_string): lines = input_string.strip().split(\'n\') idx = 0 test_cases = [] while idx < len(lines): N, M = map(int, lines[idx].strip().split()) if N == 0 and M == 0: break grid = [] for i in range(N): row = list(map(int, lines[idx + 1 + i].strip().split())) grid.append(row) test_cases.append(grid) idx += N + 1 return test_cases def main(input_string): test_cases = parse_input(input_string) results = process_test_cases(test_cases) for result in results: print(result)"},{"question":"Write a function that accepts a list of integers and an integer k, and returns the k most frequent elements in the list. The order of the elements in the output does not matter. For example: ``` Input: [1,1,1,2,2,3], k = 2 Output: [1,2] Input: [4,1,-1,2,-1,2,3], k = 2 Output: [-1,2] ``` If there are multiple possible answers with the same frequency, you can return any of them. The solution should handle cases where the list is empty or k is greater than the length of the list. Ensure the solution is efficient and can handle large inputs gracefully.","solution":"from collections import Counter from heapq import nlargest def k_most_frequent(nums, k): Returns the k most frequent elements in the list nums. Parameters: - nums: List[int], a list of integers - k: int, number of most frequent elements to return Returns: - List[int]: k most frequent elements, order does not matter if not nums or k <= 0: return [] frequency = Counter(nums) return [element for element, _ in nlargest(k, frequency.items(), key=lambda x: x[1])]"},{"question":"In a large-scale chess tournament, the organizers decided to collect statistics on the efficiency of players. They are particularly interested in the maximum number of consecutive wins each player has achieved during the tournament. Your task is to help them by writing a program that calculates this statistic for each player. Each player\'s performance is represented as a string consisting of \'W\' (win) and \'L\' (loss). For example, a string \\"WWLWLW\\" means the player won the first two games, lost the third, won the fourth game, lost the fifth, and won the sixth. Your task is to write a program to determine the maximum number of consecutive wins for each player. -----Input----- The first line of input contains an integer n (1 ≤ n ≤ 100) — the number of players. Each of the next n lines contains a string consisting of \'W\' and \'L\', representing a player\'s performance in the tournament. The length of each string does not exceed 10^5. -----Output----- For each player, print the maximum number of consecutive wins in a separate line. -----Examples----- Input 3 WWLWLW WLWLWLL WWWLLLWWW Output 2 1 3 Input 2 LWLWLWLW WWWWLWWW Output 1 4","solution":"def max_consecutive_wins(n, performances): Calculate the maximum number of consecutive wins for each player. Args: n : int : number of players performances : list of str : list of performance strings for each player Returns: list of int : list of maximum consecutive wins for each player max_wins = [] for performance in performances: max_win_count = 0 current_win_count = 0 for game in performance: if game == \'W\': current_win_count += 1 max_win_count = max(max_win_count, current_win_count) else: current_win_count = 0 max_wins.append(max_win_count) return max_wins"},{"question":"Emily has a list of positive integers representing steps she needs to climb to reach the top of a staircase. Each element in the list indicates the maximum number of steps she can climb from that position. For example, if the list is [2, 3, 1, 1, 4], Emily can choose to climb up to 2 steps from the first position, up to 3 steps from the second position, and so on. Emily wants to determine the minimum number of jumps she needs to make to reach the last step of the staircase. If it is not possible to reach the last step, return -1. Input format: The first line of the input will contain an integer N. The second line will contain N space-separated integers - the elements of the list. Output format: Print the minimum number of jumps needed to reach the last step. If it\'s not possible, print \\"-1\\" (without the quotes). Constraints: 1 ≤ N ≤ 10^5 1 ≤ steps[i] ≤ 10^5 N ≤ 100 in test data worth 15% of all points N ≤ 10^3 in test data worth 40% of all points SAMPLE INPUT 5 2 3 1 1 4 SAMPLE OUTPUT 2 Explanation Emily can jump 1 step from the first position to the second position with value 3, and then jump 3 steps to reach the last position. She needs at least 2 jumps to reach the end of the list.","solution":"def min_jumps(arr): Returns the minimum number of jumps required to reach the end of the list or -1 if it is not possible to reach the end. n = len(arr) if n <= 1: return 0 if arr[0] == 0: return -1 max_reach = arr[0] steps = arr[0] jumps = 1 for i in range(1, n): if i == n - 1: return jumps max_reach = max(max_reach, i + arr[i]) steps -= 1 if steps == 0: jumps += 1 if i >= max_reach: return -1 steps = max_reach - i return -1"},{"question":"Divya wants to purchase a meal that costs M dollars at a restaurant. The restaurant has a promotion where if the cost of the meal is a prime number, Divya gets a 20% discount on the total cost. You need to calculate the final price Divya has to pay after applying the discount (if applicable). ------ Input Format ------ Each input contains a single integer M. M is the cost of the meal in dollars. ------ Output Format ------ Output the final price Divya has to pay, given as a number with two digits of precision. If the cost is not a prime number, output the original meal cost. ------ Constraints ------ 1. 2 ≤ M ≤ 1000 - the cost of the meal in dollars. ----- Sample Input 1 ------ 17 ----- Sample Output 1 ------ 13.60 ----- explanation 1 ------ Example - Meal cost is a prime number and a 20% discount is applied. 17 * 0.80 = 13.60 ----- Sample Input 2 ------ 21 ----- Sample Output 2 ------ 21.00 ----- explanation 2 ------ Example - Meal cost is not a prime number, no discount applied. The cost remains as 21.00","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def calculate_final_price(M): Returns the final price Divya has to pay after applying discount if necessary. if is_prime(M): return round(M * 0.80, 2) else: return round(M, 2)"},{"question":"Given an unsorted array of integers, find the length of the longest consecutive elements sequence. Example 1: Input: [100, 4, 200, 1, 3, 2] Output: 4 Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4. Example 2: Input: [0,3,7,2,5,8,4,6,0,1] Output: 9 Explanation: The longest consecutive elements sequence is [0, 1, 2, 3, 4, 5, 6, 7, 8]. Therefore its length is 9.","solution":"def longest_consecutive(nums): Returns the length of the longest consecutive elements sequence. if not nums: return 0 num_set = set(nums) max_length = 0 for num in nums: # Only start counting if `num` is the start of a sequence if num - 1 not in num_set: current_num = num current_length = 1 # Count the length of the sequence from `num` while current_num + 1 in num_set: current_num += 1 current_length += 1 max_length = max(max_length, current_length) return max_length"},{"question":"A city is planning to improve its public transportation by adding new bus routes. The city can be represented as a grid with M rows and N columns where each cell can either be a road that a bus can travel on, indicated by a \'0\', or a building that a bus cannot pass through, indicated by a \'1\'. Buses can travel up, down, left, and right, but they cannot move diagonally. The city wants to ensure that there is a direct bus route from every road cell to the main bus station located at the top-left corner of the grid (0, 0). A direct bus route means that there exists a sequence of adjacent cells (sharing a side) starting from the main bus station to the target cell filled with \'0\', without passing through any cells filled with \'1\' or going outside the grid. The goal is to determine the minimum number of new roads that need to be constructed by changing cells from \'1\' to \'0\' to make all road cells in the grid directly reachable from the bus station. -----Input----- The first line of input has two integers M and N (2 leq M, N leq 50). Each of the next M lines represents the grid and contains N integers where each integer is either \'0\' or \'1\'. -----Output----- Output the minimum number of new roads needed to make all road cells reachable from the main bus station. If it is not possible to make all road cells reachable, output -1. -----Examples----- Sample Input 1: 3 4 0 1 0 0 1 1 1 0 0 0 0 1 Sample Output 1: 2 Sample Input 2: 3 3 0 1 1 1 0 1 1 1 0 Sample Output 2: 3","solution":"def min_new_roads(m, n, grid): from heapq import heappop, heappush from collections import deque if grid[0][0] != 0: return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def is_valid(x, y): return 0 <= x < m and 0 <= y < n and grid[x][y] == 0 visited = [[False] * n for _ in range(m)] queue = deque([(0, 0)]) visited[0][0] = True while queue: x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and not visited[nx][ny]: visited[nx][ny] = True queue.append((nx, ny)) additional_roads = [] for i in range(m): for j in range(n): if grid[i][j] == 0 and not visited[i][j]: additional_roads.append((i, j)) if not additional_roads: return 0 def bfs_additional_roads(): steps = 0 queue = [(i, j, steps) for i, j in additional_roads] heap = [] for item in queue: heappush(heap, item) while heap: i, j, steps = heappop(heap) if visited[i][j]: continue visited[i][j] = True steps += 1 for dx, dy in directions: ni, nj = i + dx, j + dy if 0 <= ni < m and 0 <= nj < n and not visited[ni][nj]: if grid[ni][nj] == 1: heappush(heap, (ni, nj, steps + 1)) else: heappush(heap, (ni, nj, steps)) for i in range(m): for j in range(n): if grid[i][j] == 0 and not visited[i][j]: return -1 return steps return bfs_additional_roads()"},{"question":"A company has a set of n employees, each of whom has a unique ID number from 1 to n. Some employees are good friends and have established a communication network. The CEO wants to make sure that every employee can communicate with every other employee (directly or indirectly). It is the job of the IT department to determine if the communication network already meets this requirement or if additional connections are needed. You are given a list of friend pairs and you must determine if the network is fully connected. If it is not, you have to find out the minimum number of additional connections required to make it fully connected. Input - The first line contains an integer T (1 ≤ T ≤ 100), the number of test cases. - For each test case: - The first line contains two integers, n (1 ≤ n ≤ 1000), the number of employees, and m (0 ≤ m ≤ 5000), the number of friend pairs. - The next m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v), indicating that employee u and employee v are friends. Output For each test case, output a single integer, the minimum number of additional connections required to make the network fully connected. SAMPLE INPUT 2 5 3 1 2 1 3 4 5 3 2 1 2 2 3 SAMPLE OUTPUT 1 0","solution":"def find_parent(parent, i): A utility function to find the parent of an element i. Utilizes path compression for efficiency. if parent[i] == i: return i else: parent[i] = find_parent(parent, parent[i]) return parent[i] def union(parent, rank, x, y): A function that does union of two sets of x and y using rank. xroot = find_parent(parent, x) yroot = find_parent(parent, y) if xroot != yroot: if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def minimum_additional_connections(n, m, friendships): parent = [] rank = [] for i in range(n): parent.append(i) rank.append(0) for u, v in friendships: union(parent, rank, u - 1, v - 1) unique_parents = len(set(find_parent(parent, i) for i in range(n))) return unique_parents - 1 def solve(T, test_cases): results = [] for case in test_cases: n, m, friendships = case results.append(minimum_additional_connections(n, m, friendships)) return results"},{"question":"# Task You are developing a search function for a text-based adventure game. Part of the functionality requires finding objects in the game\'s room descriptions. Given a description of a room and the name of the object, write a function to determine if the object is mentioned in the room description or not. The function should return `true` if the object is found, regardless of its case, and `false` otherwise. # Example For description = \\"A dusty old bOoK lays on the wooden table near the window.\\", and object = \\"book\\", the output should be `true`. For description = \\"A shiny red apple sits in a basket on the kitchen counter.\\", and object = \\"banana\\", the output should be `false`. # Input/Output - `[input]` string `description` - the description of the room, a string containing between `1` and `1000` characters. - `[input]` string `object` - the name of the object to search for, a string containing between `1` and `100` characters. - `[output]` boolean - `true` if the object is found in the description, `false` otherwise.","solution":"def is_object_in_description(description, object): Returns true if the object is found in the description ignoring case, false otherwise. # Convert both strings to lowercase to make the search case-insensitive description_lower = description.lower() object_lower = object.lower() # Check if the object is in the description return object_lower in description_lower"},{"question":"A large company wants to distribute its annual bonuses to employees based on their performance scores. Each employee has an associated performance score and the company aims to distribute the total bonus pool in such a way that the ratio of the bonuses between any two employees matches the ratio of their performance scores as closely as possible. Given the performance scores of three employees and the total bonus pool, determine the bonus for each employee. Ignoring rounding issues, you need to calculate the exact bonuses for the employees. ------ Input Format ------ - The first line contains an integer T, the number of test cases. - Each test case consists of a single line containing four space-separated integers S1, S2, S3, and B, where S1, S2, S3 are the performance scores of the three employees, and B is the total bonus pool. ------ Output Format ------ For each test case, output three space-separated integers — bonuses for the three employees rounded to the nearest integer. ------ Constraints ------ 1 ≤ T ≤ 10^3 1 ≤ S1, S2, S3 ≤ 100 1 ≤ B ≤ 10^6 ------ Sample Input 1 ------ 3 1 1 1 300 2 3 5 1000 10 20 30 600 ------ Sample Output 1 ------ 100 100 100 200 300 500 100 200 300 ------ Explanation 1 ------ Test case 1: Since all performance scores are equal, the bonus should be divided equally among the employees. Hence, each employee gets 100. Test case 2: The ratio of scores is 2:3:5. Therefore, out of 1000, the bonuses should be 200, 300, and 500 respectively. Test case 3: The ratio of scores is 10:20:30, which simplifies to 1:2:3. Hence, the bonuses are 100, 200, and 300, respectively.","solution":"def calculate_bonuses(T, test_cases): results = [] for case in test_cases: S1, S2, S3, B = case total_score = S1 + S2 + S3 # Calculate bonuses B1 = round((S1 / total_score) * B) B2 = round((S2 / total_score) * B) B3 = round((S3 / total_score) * B) results.append((B1, B2, B3)) return results"},{"question":"A company has M employees (1 ≤ M ≤ 50) and N projects (1 ≤ N ≤ 50). Each employee i (1 ≤ i ≤ M) has a specific set of skills, represented as a list of integers ranging from 1 to 1000. Each project j (1 ≤ j ≤ N) requires certain skills, also represented as a list of integers from 1 to 1000. An employee can be assigned to a project if and only if that employee has all the skills required by the project. You need to find how many unique ways employees can be assigned to projects such that every project has at least one employee assigned to it. ---Constraints--- - 1 ≤ M ≤ 50 - 1 ≤ N ≤ 50 - 1 ≤ skill_i, skill_j ≤ 1000 - The number of skills for each employee and each project is between 1 and 50, inclusive. ---Input--- The input is given from Standard Input in the following format: ``` M N S_1 S_2 ... S_M P_1 P_2 ... P_N ``` Where: - The first line contains two integers M and N. - The next M lines contain the list of skills for each of the M employees. Each list starts with an integer k_i, the number of skills that employee i has, followed by k_i space-separated integers representing the skills. - The next N lines contain the list of required skills for each of the N projects. Each list starts with an integer l_j, the number of skills that project j requires, followed by l_j space-separated integers representing the required skills. ---Output--- Print the number of unique assignments where each project gets at least one assigned employee. ---Sample Input--- ``` 3 2 3 1 2 3 2 2 3 1 4 2 1 2 1 4 ``` ---Sample Output--- ``` 2 ``` - In the sample input, employee 1 can be assigned to project 1 based on required skills 1 and 2. Employee 2 can be assigned to project 1 and employee 3 can be assigned to project 2 based on required skill 4. - The unique assignments are: 1. Employee 1 to Project 1 and Employee 3 to Project 2 2. Employee 2 to Project 1 and Employee 3 to Project 2","solution":"from itertools import product def can_assign(employee_skills, project_requirement): Check if an employee can be assigned to a project based on skills. return set(project_requirement).issubset(employee_skills) def count_assignments(M, N, employees_skills, projects_requirements): Counts the unique ways to assign employees to projects such that every project has at least one employee assigned. # Matrix that stores which employees can be assigned to which projects can_be_assigned = [[can_assign(employees_skills[e], projects_requirements[p]) for p in range(N)] for e in range(M)] def valid_assignment(assignment): return all(any(can_be_assigned[e][p] for e, a in enumerate(assignment) if a == p) for p in range(N)) # Generate all possible assignments of employees to projects all_possible_assignments = product(range(N), repeat=M) # Filter valid assignments valid_count = sum(1 for assignment in all_possible_assignments if valid_assignment(assignment)) return valid_count # Parsing input def parse_input(input_str): lines = input_str.strip().split(\'n\') M, N = map(int, lines[0].split()) employees_skills = [list(map(int, line.split()[1:])) for line in lines[1:M+1]] projects_requirements = [list(map(int, line.split()[1:])) for line in lines[M+1:M+1+N]] return M, N, employees_skills, projects_requirements # Main function to read the input, process it and print the result def main(input_str): M, N, employees_skills, projects_requirements = parse_input(input_str) print(count_assignments(M, N, employees_skills, projects_requirements))"},{"question":"Alex is organizing a treasure hunt. He has placed M chests in a row, each containing a certain number of gold coins. To make the game more interesting, Alex has decided on a particular rule: a player can collect coins from consecutive chests, but the total number of coins collected in one move must not exceed K. The game is played in turns with the first player starting the game. The player who picks the last chest wins. Assume both players play optimally. Determine the winner of the game if the players start with the provided array of chests and value K. ----- Input ----- The first line contains two integers separated by a space: M (1 leq M leq 100000), the number of chests, and K (1 leq K leq 1000000000), the maximum number of coins that can be collected in one move. The second line contains M integers separated by spaces, where each integer a_i (1 leq a_i leq 10000) is the number of coins in the i_{th} chest. ----- Output ----- Output the winner, “First” or “Second” (without the quotes), on a single line. ----- Examples ----- Sample Input 1: 3 5 1 2 3 Sample Output 1: First Sample Input 2: 4 5 5 5 5 5 Sample Output 2: Second Sample Input 3: 4 10 1 1 1 1 Sample Output 3: First","solution":"def determine_winner(M, K, chests): Determine the winner of the game given the number of chests (M), the maximum number of coins that can be collected in one move (K), and the array of chests with coins. total_coins = sum(chests) if total_coins <= K: return \\"First\\" max_coins_per_move = max(chests) if max_coins_per_move > K: return \\"Second\\" if (total_coins // K) % 2 == 1: return \\"First\\" else: return \\"Second\\""},{"question":"Write a function that, given an array of words (strings), returns the most frequent letter in those words. If there are multiple letters with the same highest frequency, return the one which comes first alphabetically. Assume all letters are lowercase and input words only consist of lowercase letters. Example: Consider [\\"hello\\", \\"world\\"] Letter frequencies are: h: 1 e: 1 l: 3 o: 2 w: 1 r: 1 d: 1 The most frequent letter is \'l\' since it appears 3 times. Consider [\\"apple\\", \\"banana\\"] Letter frequencies are: a: 4 p: 2 l: 1 e: 1 b: 1 n: 2 The most frequent letter is \'a\' since it appears 4 times.","solution":"def most_frequent_letter(words): Returns the most frequent letter from an array of words. If multiple letters have the same frequency, returns the one which comes first alphabetically. from collections import Counter import string letter_count = Counter() for word in words: letter_count.update(word) most_frequent = \'\' max_count = 0 for letter in string.ascii_lowercase: if letter_count[letter] > max_count: max_count = letter_count[letter] most_frequent = letter return most_frequent"},{"question":"HackerMan has discovered a hidden treasure map. The map consists of a grid with cells, where each cell can either be empty (denoted by \'.\') or contain an obstacle (denoted by \'#\'). The treasure is hidden in a cell marked with a \'T\', and HackerMan starts at a cell marked with an \'S\'. HackerMan can move up, down, left, or right but cannot move through obstacles. Your task is to determine if HackerMan can reach the treasure. The first line of input contains the number of test cases T (1 ≤ T ≤ 100). Each test case starts with two integers M and N (1 ≤ M, N ≤ 1000), where M is the number of rows and N is the number of columns in the grid. This is followed by M lines, each containing N characters that describe the grid. Print \\"YES\\" if HackerMan can reach the treasure; otherwise, print \\"NO\\". # Input: ``` 2 5 5 S.... .#. ..#.. .#. ....T 4 6 S... .#..#. .#..#T .. ``` # Output: ``` YES NO ```","solution":"def can_hackerman_reach_treasure(grid, start, end): # Helper function for checking neighbors def is_safe(x, y): return 0 <= x < len(grid) and 0 <= y < len(grid[0]) and grid[x][y] != \'#\' from collections import deque M, N = len(grid), len(grid[0]) queue = deque([start]) visited = set([start]) while queue: x, y = queue.popleft() if (x, y) == end: return True for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if is_safe(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return False def solve(test_cases): results = [] for grid, start, end in test_cases: if can_hackerman_reach_treasure(grid, start, end): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Input Parsing Function def parse_input(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): M, N = map(int, lines[index].split()) index += 1 grid = [] for _ in range(M): grid.append(list(lines[index])) index += 1 start = end = None for i in range(M): for j in range(N): if grid[i][j] == \'S\': start = (i, j) if grid[i][j] == \'T\': end = (i, j) test_cases.append((grid, start, end)) return test_cases"},{"question":"Write a function mergeTwoSortedArrays() that takes two sorted arrays as input and merges them into a single sorted array. You should not use any additional space for merging and the input arrays should remain unchanged. Example 1: Input: arr1 = [1, 3, 5, 7] arr2 = [2, 4, 6, 8] Output: [1, 2, 3, 4, 5, 6, 7, 8] Example 2: Input: arr1 = [-1, 2, 5, 10] arr2 = [0, 3, 6, 12, 15] Output: [-1, 0, 2, 3, 5, 6, 10, 12, 15] Your Task: You don\'t need to read input or print anything. Your task is to complete the function mergeTwoSortedArrays() which takes two sorted arrays arr1[] and arr2[] as input and returns a new sorted array containing all the elements from arr1 and arr2. Expected Time Complexity: O(N + M), where N and M are the lengths of arr1 and arr2 respectively. Expected Auxiliary Space: O(N + M), as the output array will contain all elements from both input arrays. Constraints: 1 <= len(arr1), len(arr2) <= 10^5 -10^9 <= arr1[i], arr2[i] <= 10^9","solution":"def mergeTwoSortedArrays(arr1, arr2): Merges two sorted arrays into one sorted array. i, j = 0, 0 merged_array = [] # Traverse both arrays and merge them while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # Append any remaining elements from arr1 while i < len(arr1): merged_array.append(arr1[i]) i += 1 # Append any remaining elements from arr2 while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"You are given an undirected graph with n nodes and m edges. Your task is to determine if all nodes in the graph belong to a single connected component. If the graph is fully connected, output \\"YES\\", otherwise output \\"NO\\". -----Input----- The first line contains a single integer t (1 le t le 10^4) — the number of test cases. Then the test cases follow. Each test case consists of multiple lines. The first line contains two integers n (1 le n le 10^5) and m (0 le m le 10^5) — the number of nodes and the number of edges, respectively. Then follow m lines, each containing two integers u and v (1 le u, v le n and u ne v) — the endpoints of an edge in the graph. It is guaranteed that the sum of n for all test cases does not exceed 2 cdot 10^5, and the sum of m for all test cases does not exceed 2 cdot 10^5. -----Output----- For each test case, print \\"YES\\" if all nodes are in a single connected component, and \\"NO\\" otherwise. -----Examples----- Input 3 4 2 1 2 2 3 5 4 1 2 2 3 3 4 4 5 3 0 Output NO YES NO -----Note----- In the first test case, node 4 is isolated and does not belong to the connected component containing nodes 1, 2, and 3. In the second test case, all nodes 1 to 5 are connected in a single component. In the third test case, there are no edges, so none of the nodes are connected.","solution":"def is_fully_connected(n, edges): from collections import defaultdict, deque if n == 0: return \\"NO\\" graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) def bfs(start): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbour in graph[node]: if not visited[neighbour]: visited[neighbour] = True queue.append(neighbour) # Start BFS from node 1 (or any other node) components = 0 for node in range(1, n + 1): if not visited[node]: components += 1 bfs(node) return \\"YES\\" if components == 1 else \\"NO\\" def process_test_cases(test_cases): result = [] for n, m, edges in test_cases: result.append(is_fully_connected(n, edges)) return result"},{"question":"Balanced Brackets A bracket is considered any of the following characters: (, ), {, }, [, or ]. Two brackets are considered to be a matched pair if the opening bracket (i.e., (, {, or [) occurs to the left of a closing bracket (i.e., ), }, or ]) of the same type. There are three types of matched pairs of brackets: [], {}, and (). A matching pair of brackets is not balanced if the set of brackets it encloses are not matched. For example, {[(])} is not balanced because the contents in between { and } are not balanced. The pair of square brackets encloses a single, unbalanced opening bracket, (, and a pair of parentheses encloses a single, unbalanced closing bracket, ]. By this logic, we say a sequence of brackets is considered to be balanced if: - It contains no unmatched brackets. - The subset of brackets enclosed within the confines of a matched pair of brackets is also a matched pair of brackets. Given a string of brackets, determine whether it is balanced. If the string is balanced, then print \\"YES\\"; otherwise, print \\"NO\\". Example Input {[()]} Output YES Input {[(])} Output NO Task Write a function that determines if a sequence of brackets is balanced. Function Signature: def is_balanced(s: str) -> str: Input - A single string s (1 ≤ |s| ≤ 10^3), the sequence of brackets. Output - A single string, either \\"YES\\" or \\"NO\\", denoting whether the sequence is balanced. Sample Input ({[()]}) Sample Output YES Sample Input ({[}) Sample Output NO","solution":"def is_balanced(s: str) -> str: Determines if a sequence of brackets is balanced. Returns \\"YES\\" if balanced, otherwise \\"NO\\". stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_map.values(): stack.append(char) elif char in bracket_map: if not stack or stack.pop() != bracket_map[char]: return \\"NO\\" else: return \\"NO\\" # If the character is not a recognized bracket return \\"YES\\" if not stack else \\"NO\\""},{"question":"Write a function that takes a string of words and returns the longest word in the string. If there are multiple words with the same length, return the first one encountered. Punctuation marks should be disregarded and any word is defined as a sequence of letters (a-z, A-Z) and optionally one apostrophe (\') sandwiched within or at the end. For example, `longestWord(\\"I can\'t believe it\'s not butter\\")` should return `\\"believe\\"`. More examples in the test cases: ```python def longestWord(s): # implementation here # Test cases print(longestWord(\\"Hello world!\\")) # returns \\"Hello\\" print(longestWord(\\"The quick brown fox\\")) # returns \\"quick\\" print(longestWord(\\"It\'s a wonderful life\\")) # returns \\"wonderful\\" print(longestWord(\\"To infinity and beyond\\")) # returns \\"infinity\\" ``` Good luck! If you like this challenge, please try: [Shortest Word](https://www.codewars.com/kata/57cebe1dc6fdc20c57000ac9) [Words within Words](https://www.codewars.com/kata/59b9a1ea28664863c900002e)","solution":"import re def longestWord(s): Returns the longest word in the string. If there are multiple words with the same length, returns the first one encountered. Words are defined as sequences of letters and optionally one apostrophe. # Regular expression for extracting words with optional apostrophe words = re.findall(r\\"b[a-zA-Z]+(?:\'[a-zA-Z]+)?b\\", s) longest = \\"\\" max_length = 0 for word in words: if len(word) > max_length: longest = word max_length = len(word) return longest"},{"question":"Henry is a treasure hunter, and he is faced with a grid of cells filled with coins. Each cell may contain a certain number of coins, and Henry can only move right or down from one cell to another. He starts from the top-left cell and wants to collect as many coins as possible while reaching the bottom-right cell in the grid. Your task is to help Henry find the maximum number of coins he can collect on his way to the bottom-right cell. Input The first line contains two integers N and M (1 ≤ N, M ≤ 1000) — the number of rows and columns in the grid. Each of the following N lines contains M integers not exceeding 100 — the number of coins in each cell. Output Output a single integer, which is the maximum number of coins Henry can collect by moving from the top-left cell to the bottom-right cell. Example Input 3 3 1 3 1 1 5 1 4 2 1 Output 12 Explanation Henry can collect the maximum number of coins by moving through the cells (1,1) -> (1,2) -> (2,2) -> (3,2) -> (3,3), collecting 1 + 3 + 5 + 2 + 1 = 12 coins.","solution":"def max_coins(grid): N = len(grid) M = len(grid[0]) dp = [[0] * M for _ in range(N)] dp[0][0] = grid[0][0] for i in range(1, N): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, M): dp[0][j] = dp[0][j-1] + grid[0][j] for i in range(1, N): for j in range(1, M): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[N-1][M-1]"},{"question":"Write a function that takes an array of integers and returns a new array containing only the prime numbers from the input array, preserving the order of their first occurrence. ``` input: [arrayOfIntegers] output: [arrayOfPrimes] example: [15, 3, 8, 11, 2, 5, 4, 2] --> [3, 11, 2, 5, 2] ``` All elements of the input array will be positive integers.","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def get_primes(array): Returns a new array containing only the prime numbers from the input array, preserving the order of their first occurrence. return [num for num in array if is_prime(num)]"},{"question":"Given a string, determine if it can be rearranged to form a palindrome. A palindrome is a word or phrase that reads the same forwards and backwards, ignoring spaces, punctuation, and capitalization. Examples: ```python \\"civic\\" => true (already a palindrome) \\"ivicc\\" => true (can be rearranged to \\"civic\\") \\"hello\\" => false (cannot be rearranged to form a palindrome) \\"A man, a plan, a canal, Panama\\" => true (can be rearranged to form \\"A man, a plan, a canal, Panama\\") ```","solution":"from collections import Counter def can_form_palindrome(s): Determine if the string can be rearranged to form a palindrome. # Filter out non-alphabetic characters and convert to lower case filtered_s = \'\'.join(filter(str.isalpha, s)).lower() # Count the frequency of each character char_count = Counter(filtered_s) # Check the number of characters with an odd count odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged to form a palindrome if it has at most one character with an odd count return odd_count <= 1"},{"question":"You are given a string consisting of lowercase English letters. You may perform the following operation any number of times: choose a contiguous substring that is a palindrome and remove it from the string. Your task is to determine the minimum number of operations required to make the string empty. -----Input----- The first line contains a single integer t (1 le t le 10) — the number of test cases. The following t lines contain a string s (1 le |s| le 2000) consisting of lowercase English letters. -----Output----- For each test case, output the minimum number of operations required to make the string empty. -----Examples----- Input 3 ababa abb civic Output 1 2 1 -----Note----- In the first example, the whole string \\"ababa\\" is a palindrome, so it can be removed in one operation. In the second example, the string \\"abb\\" can be emptied in two operations: first remove \\"bb\\" and then \\"a\\". In the third example, the whole string \\"civic\\" is a palindrome, so it can be removed in one operation.","solution":"def min_operations_to_empty_string(t, test_cases): Given a number of test cases and the corresponding strings, returns the minimum number of operations required to make each string empty by removing contiguous palindromic substrings. results = [] for s in test_cases: if s == s[::-1]: # Check if the whole string is a palindrome results.append(1) else: results.append(2) # Else we can always do it in 2 steps return results"},{"question":"A company is organizing a coding competition, and they want to design a system to determine if any pairs of participants have conflicting availability schedules. The participant availability is given in the form of intervals representing the start and end times they are available. You need to determine if any two participants have overlapping availability periods. Write a function to check for any overlap in the given intervals of participants\' availability. Function Signature: `def hasConflict(intervals: List[Tuple[int, int]]) -> bool:` Example 1: Input: intervals = [(1, 5), (6, 10), (15, 20), (5, 6)] Output: False Explanation: No intervals overlap. Example 2: Input: intervals = [(1, 3), (2, 6), (8, 10), (15, 18)] Output: True Explanation: Interval (1, 3) overlaps with interval (2, 6). Your Task: You don\'t need to read input or print anything. Complete the function `hasConflict()` which takes a list of intervals as input parameter and returns `True` if any intervals overlap, else returns `False`. Expected Time Complexity: O(nlogn) Expected Auxiliary Space: O(1) Constraints: 1 <= len(intervals) <= 10^4 0 <= intervals[i][0] < intervals[i][1] <= 10^9","solution":"from typing import List, Tuple def hasConflict(intervals: List[Tuple[int, int]]) -> bool: Check if any two intervals overlap. Parameters: intervals (List[Tuple[int, int]]): List of intervals represented as (start, end). Returns: bool: True if any two intervals overlap, False otherwise. # Sort intervals by their start time intervals.sort(key=lambda x: x[0]) # Iterate through intervals to check for any overlap for i in range(1, len(intervals)): # If the start of the current interval is less than the end of the previous interval, there is a conflict if intervals[i][0] < intervals[i-1][1]: return True return False"},{"question":"In a remote village, there are n houses aligned in a row, each house having a certain number of chocolates. The villagers want to divide these houses into k contiguous blocks of houses such that the difference between the block with the maximum number of chocolates and the block with the minimum number of chocolates is minimized. Help the villagers determine the minimum possible value of this difference. Input The first line contains two integers n and k — the number of houses and the number of blocks, respectively (1 ≤ k ≤ n ≤ 100,000). The second line contains n space-separated integers c_i — the number of chocolates in the i-th house (1 ≤ c_i ≤ 10^9). Output Print a single integer — the minimum possible difference between the maximum and minimum number of chocolates in the blocks. Examples Input 5 2 1 3 2 6 4 Output 3 Input 8 3 9 3 8 4 7 2 6 5 Output 2 Input 6 3 10 30 40 20 50 60 Output 20 Note In the first example, we can divide the houses into two blocks: [1, 3, 2] and [6, 4]. The first block has 6 chocolates and the second block has 10 chocolates, making the difference 10 - 6 = 4. But we can get an even smaller difference by dividing into [1, 3, 2, 6] and [4]. Here, the first block has 12 chocolates and the second block has 4 chocolates, making the difference 12 - 4 = 8. Still, the best division is [1, 3, 2], [6], and [4] which gives [6, 6], making the smallest possible difference 3. In the second example, we can divide the houses into three blocks: [9, 3, 8], [4, 7], and [2, 6, 5]. The first block has 20 chocolates, the second block has 11 chocolates, and the third block has 13 chocolates. The difference between the block with the maximum number of chocolates (20) and the block with the minimum number of chocolates (11) is 20 - 11 = 9. In the last example, we can divide the houses into three blocks: [10], [30, 40] and [20, 50, 60]. The first block has 10 chocolates, the second block has 70 chocolates, and the third block has 130 chocolates. The difference between the maximum (130) and the minimum (10) is 120. But we can divide better: [10, 30], [40], and [20, 50, 60], with blocks [40, 40, 130] and reducing the difference to 90. The minimum possible difference is obtained by [10, 30], [40, 20], and [50, 60], which gives [40, 60, 110] with difference 110 - 40 = 70, and other combinations to get the minimum possible difference 20.","solution":"def min_difference_chocolates(n, k, chocolates): Function to determine the minimum possible difference between the maximum and minimum number of chocolates in k contiguous blocks of houses. n: int - number of houses k: int - number of blocks chocolates: list - list of integers representing chocolates in each house return: int - minimum possible difference between the most and least chocolates in the blocks chocolates.sort() min_diff = float(\'inf\') for i in range(n - k + 1): current_diff = chocolates[i + k - 1] - chocolates[i] min_diff = min(min_diff, current_diff) return min_diff"},{"question":"In a small town, there are different types of stores that sell various items. A smart consumer wants to know which store offers the lowest price for each item they need to buy. You are given a list of tuples where each tuple has the store name, item name, and the price of the item in that store. Your task is to write a function that returns a dictionary where the keys are the items and the values are dictionaries representing the store offering the lowest price for that item. If no prices are available, return an empty dictionary. ```python >>> best_prices([ (\'StoreA\', \'apple\', 3), (\'StoreB\', \'apple\', 2), (\'StoreA\', \'banana\', 1), (\'StoreB\', \'banana\', 2), (\'StoreA\', \'milk\', 5), (\'StoreB\', \'milk\', 4) ]) {\'apple\': {\'StoreB\': 2}, \'banana\': {\'StoreA\': 1}, \'milk\': {\'StoreB\': 4}} # If the list is empty, return an empty dictionary >>> best_prices([]) {} # If there are no items with prices, return an empty dictionary >>> best_prices([(\'StoreA\', \'apple\', None)]) {} ```","solution":"def best_prices(store_data): Given a list of tuples (store_name, item_name, price), returns a dictionary where the keys are the items and the values are dictionaries representing the store offering the lowest price for that item. :param store_data: List of tuples (store_name, item_name, price) :return: Dictionary with items as keys and the lowest price info as values price_map = {} for store, item, price in store_data: if price is None: continue if item not in price_map or price_map[item][\'price\'] > price: price_map[item] = {\'store\': store, \'price\': price} result = {item: {info[\'store\']: info[\'price\']} for item, info in price_map.items()} return result"},{"question":"You are given textit{n} objects, each with a weight and a value. Your task is to select a subset of these objects to put into a knapsack in such a way that the total weight of the selected objects does not exceed the knapsack\'s capacity, and the total value is maximized. Print the maximal value that can be obtained from the selected subset. Input Format The first line contains a single positive integer, textit{n} , denoting the number of objects. The second line contains a single positive integer, textit{W} , denoting the capacity of the knapsack. Each of the textit{n} subsequent lines contains two space-separated integers, w_i and v_i , denoting the weight and value of the ith object, respectively. Constraints 1 leq n leq 20 1 leq W leq 10^3 1 leq w_i, v_i leq 100 Output Format Print a single integer representing the maximum value that can be obtained by selecting a subset of the given objects, such that their total weight does not exceed W . Sample Input 4 10 5 10 4 40 6 30 3 50 Sample Output 90 Explanation By performing the selection optimally, you can achieve a maximal value of 90 by selecting the following objects: - The object with weight 4 and value 40 - The object with weight 3 and value 50 The total weight is 4 + 3 = 7 leq 10, and the total value obtained is 40 + 50 = 90. Therefore, the output is 90.","solution":"def knapsack(n, W, items): Returns the maximum value that can be obtained by selecting a subset of the given items without exceeding the total weight capacity, W. Parameters: n (int): Number of items W (int): Capacity of the knapsack items (list of tuples): Each tuple contains two integers (weight, value) of the ith item Returns: int: The maximum value that can be obtained dp = [[0] * (W + 1) for _ in range(n + 1)] for i in range(1, n + 1): weight, value = items[i - 1] for w in range(W + 1): if weight <= w: dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weight] + value) else: dp[i][w] = dp[i - 1][w] return dp[n][W] # Function to read input and call the knapsack function def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) W = int(data[1]) items = [(int(data[2 + 2 * i]), int(data[3 + 2 * i])) for i in range(n)] print(knapsack(n, W, items)) if __name__ == \\"__main__\\": main()"},{"question":"You are given a string s consisting of lowercase Latin letters. Your task is to re-order the letters in such a way that the new string formed has no two adjacent characters that are the same. If such a reordering is not possible, return an empty string. Function Signature: `def reorganize_string(s: str) -> str:` Input: - A single string s (1 ≤ len(s) ≤ 500) Output: - A string that satisfies the described condition or an empty string if no such reordering is possible. Examples: Input: \\"aab\\" Output: \\"aba\\" Input: \\"aaab\\" Output: \\"\\" Explanation: In the first example, one possible reordering is \\"aba\\", which satisfies the condition since no two adjacent characters are the same. In the second example, it is not possible to re-order the string to satisfy the condition. Note: - You can assume that input string will contain only lowercase Latin letters. - The function should be case insensitive.","solution":"import heapq from collections import Counter def reorganize_string(s: str) -> str: # Frequency count of each character frequency = Counter(s) # Max heap of pairs (-frequency, character) max_heap = [(-freq, char) for char, freq in frequency.items()] heapq.heapify(max_heap) # Previous character and its frequency prev_freq, prev_char = 0, \'\' result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) # If previous character exists, push it back into heap if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) # Update prev_freq and prev_char for next iteration prev_freq, prev_char = freq + 1, char result = \'\'.join(result) # If the length of result is the same as original string, it\'s valid return result if len(result) == len(s) else \'\'"},{"question":"In a city, there are numerous buses, each with a defined route. Each route is represented by a list of distinct bus stops that the bus visits in the order given. The bus stops are numbered from 1 to n. Your task is to find the shortest path from a given start bus stop to a destination bus stop using any combination of buses. You can transfer from one bus to another only at the common bus stops they both visit. Input The first line contains three integers n, m, and q (1 ≤ n ≤ 10000, 1 ≤ m ≤ 1000, 1 ≤ q ≤ 1000) where n is the number of bus stops, m is the number of buses, and q is the number of queries. The next m lines describe bus routes. Each route begins with an integer k (1 ≤ k ≤ 100) which is the number of stops this bus visits, followed by k integers representing the bus stops. The next q lines contain queries. Each query consists of two integers u and v (1 ≤ u, v ≤ n) representing the start and destination bus stops, respectively. Output For each query, print the minimum number of buses needed to travel from stop u to stop v. If it is not possible to travel from u to v using the given bus routes, print -1. Examples Input 5 2 2 3 1 2 3 3 3 4 5 1 5 2 3 Output 2 1 Input 6 3 3 4 1 3 5 6 3 2 3 4 2 1 4 1 6 2 5 3 4 Output 1 2 1","solution":"from collections import defaultdict, deque def shortest_path_from_start_to_destination(n, m, q, bus_routes, queries): # Create a map of bus stops to buses that visit those stops stop_to_buses = defaultdict(list) for bus_num, route in enumerate(bus_routes): for stop in route: stop_to_buses[stop].append(bus_num) def bfs(start, destination): if start == destination: return 0 visited_stops = set() visited_buses = set() queue = deque([(start, 0)]) # (current stop, bus count) while queue: current_stop, bus_count = queue.popleft() if current_stop == destination: return bus_count for bus in stop_to_buses[current_stop]: if bus in visited_buses: continue visited_buses.add(bus) for next_stop in bus_routes[bus]: if next_stop not in visited_stops: visited_stops.add(next_stop) queue.append((next_stop, bus_count + 1)) return -1 results = [] for start, destination in queries: results.append(bfs(start, destination)) return results"},{"question":"Consider John, who enjoys watching nature documentaries. One day, while watching a documentary about beavers building dams, he noticed an interesting pattern in the placement of logs. Inspired, he decided to recreate a version of this pattern using a sequence of numbers. He created a sequence consisting of `n` numbers for various purposes. Given an integer `n`, you need to construct an array of length `n` such that the sum of the digits in each even position (0-based indexing) is equal to the sum of the digits in each odd position. The digits should range from 0 to 9, and you should return any valid sequence that satisfies this condition. Input The first line of input contains `t`, the number of test cases. Each of the next `t` lines contains an integer `n` which denotes the length of the array. Output For each test case, output a single line with `n` digits. If `n` is 1, output a single digit in the range 0 to 9 since the condition is trivially satisfied. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 SAMPLE INPUT 3 1 4 5 SAMPLE OUTPUT 5 1234 12345","solution":"def generate_sequence(n): Generates a sequence of length n such that the sum of digits at even positions is equal to the sum of digits at odd positions. if n == 1: return \\"5\\" # Any single digit from 0 to 9 will satisfy sequence = [] for i in range(n): if i % 2 == 0: sequence.append(\\"1\\") else: sequence.append(\\"2\\") return \\"\\".join(sequence) def beaver_sequence(t, cases): results = [] for n in cases: results.append(generate_sequence(n)) return results"},{"question":"# Sum of Pairs Write a function that, given a list of integers and a target sum, returns all pairs of numbers in the list that add up to the target sum. Each pair should be presented as a tuple `(a, b)` where `a` and `b` are elements from the given list. The order of elements in the pairs should be in ascending order (i.e., `(a, b)` where `a <= b`). # Example: find_pairs([1, 2, 3, 4, 5], 5) = [(1, 4), (2, 3)] find_pairs([1, 1, 2, 3, 4], 4) = [(1, 3)] find_pairs([3, 3, 4, 2], 6) = [(2, 4), (3, 3)] Write a function `find_pairs` that takes in two arguments, a list of integers and the target sum, and returns a list of tuples representing all possible pairs that add up to the target sum.","solution":"def find_pairs(numbers, target_sum): Return all pairs of numbers in the list that add up to the target sum. Each pair is presented as a tuple (a, b) where a and b are elements from the list and the order of elements in the pairs is (a, b) where a <= b. seen = set() pairs = set() for number in numbers: needed = target_sum - number if needed in seen: pairs.add((min(number, needed), max(number, needed))) seen.add(number) return sorted(pairs)"},{"question":"Dana is an artist who loves painting symmetrical patterns. She wants to create a large, beautiful mural on a wall, but to make it perfect, she needs to find the longest symmetric subsequence of some parts of her initial design. Being too excited, Dana seeks your help in determining the length of the longest symmetric subsequence within the given sequence of color codes. A sequence is said to be symmetric if it reads the same forwards and backwards. -----Input:----- - The first line contains an integer T, the number of test cases. - Each test case consists of two lines: - The first line contains an integer N, the number of elements in the sequence. - The second line contains N space-separated integers representing the sequence of color codes. -----Output:----- For each test case, output a single integer representing the length of the longest symmetric subsequence. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 1000 - 1 leq text{Color code} leq 10^5 -----Sample Input:----- 2 7 1 4 5 9 4 1 1 5 1 2 3 2 1 -----Sample Output:----- 5 5 -----Explanation:----- In the first case, the longest symmetric subsequence is [1, 4, 5, 4, 1]. In the second case, the entire sequence [1, 2, 3, 2, 1] is symmetric.","solution":"def longest_symmetric_subsequence_length(seq): Returns the length of the longest symmetric subsequence within the given sequence of color codes. n = len(seq) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n+1): for i in range(n - cl + 1): j = i + cl - 1 if seq[i] == seq[j] and cl == 2: dp[i][j] = 2 elif seq[i] == seq[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1] def solve_longest_symmetric_subsequence(T, test_cases): results = [] for case in test_cases: N, seq = case results.append(longest_symmetric_subsequence_length(seq)) return results"},{"question":"A large candy store is offering a new promotion where customers can exchange candies according to specific rules. The store has containers with candies of different types. The purpose is to maximize the number of candies of a particular type in a single container after several operations. You are given an integer array candies[] of length n, where candies[i] represents the type of candy present in the i-th container. There are q operations that you can perform on these containers. Each operation is either of the following types: 1. Update the candy type in a specific container. 2. Check and print the maximum number of candies of the same type in any single container. Input: The first line contains two integers n and q (1 ≤ n, q ≤ 2 * 10^5). The second line contains n integers representing the initial types of candies in the containers: candies_1, candies_2, ..., candies_n (1 ≤ candies_i ≤ n). The next q lines describe the operations in one of these two formats: - \\"1 k x\\" (1 ≤ k ≤ n, 1 ≤ x ≤ n) indicating an operation to update the k-th container with candy type x. - \\"2\\" indicating an operation to check and print the maximum number of candies of the same type in any single container. Output: For each operation of the second type, print the answer on a new line. Example Input: 5 4 1 2 2 3 1 2 1 2 3 2 1 5 3 2 Example Output: 2 3 3 Explanation: - Initially, the containers have [1, 2, 2, 3, 1]. The maximum number of same-type candies in any container is 2. - After updating container 2 with type 3, the configuration is [1, 3, 2, 3, 1]. The maximum remains 2 with type 2 still being present in two containers. - After updating container 5 with type 3, the configuration becomes [1, 3, 2, 3, 3], and now there are 3 containers (2, 4, and 5) with type 3 candies. Thus, the maximum is now 3. Note: - Each operation is processed independently. The update operations change the state of the containers, while the check operations print the maximum number of candies of the same type in the current state.","solution":"def max_candies(candies, operations): This function takes a list of integers representing the initial types of candies in the containers, and a list of operations to perform on these containers. It returns the results of the operations that check the maximum number of candies of the same type in any single container. :param candies: List[int], the initial types of candies in the containers :param operations: List[str], the operations to perform on the containers :return: List[int], the results for operations that check the maximum number of candies of the same type from collections import Counter # Initialize the counter for candy types count = Counter(candies) results = [] for operation in operations: if operation[0] == \\"1\\": _, k, x = map(int, operation.split()) k -= 1 # Convert to 0-based index # Update the type of candy in the specified container old_type = candies[k] candies[k] = x # Update the counts count[old_type] -= 1 if count[old_type] == 0: del count[old_type] count[x] += 1 elif operation[0] == \\"2\\": # Find the maximum count across all candy types max_count = max(count.values(), default=0) results.append(max_count) return results"},{"question":"Let\'s Implement a Task Scheduling System ![tasks](https://media.giphy.com/media/LmNwrBhejkK9EFP504/giphy.gif) In the modern world, efficient task management systems are critical for productivity. We aim to create a system where tasks can be assigned priorities and resources can be allocated to execute them in a sequence that respects these priorities. ___ # Task: You are required to implement a class `TaskScheduler` that handles the scheduling of tasks based on their priorities. The scheduler should execute tasks in the order of their priority, from highest to lowest. If two tasks have the same priority, they should be executed in the order they were added to the system. Specifications: **Constructor:** - `TaskScheduler()` - Initializes an empty task scheduler. **Methods:** - `add_task(priority: int, task: str) -> None`: Adds a task with a given priority to the scheduler. - `execute_tasks() -> List[str]`: Executes all tasks in the scheduler based on their priority, returning a list of executed tasks in the order of their execution. Examples: ```python scheduler = TaskScheduler() scheduler.add_task(1, \\"Write report\\") scheduler.add_task(3, \\"Implement feature\\") scheduler.add_task(2, \\"Fix bugs\\") scheduler.add_task(3, \\"Code review\\") print(scheduler.execute_tasks()) # Output: [\\"Implement feature\\", \\"Code review\\", \\"Fix bugs\\", \\"Write report\\"] ``` Additional Considerations: - The `add_task` method allows adding tasks of varying priorities to the system. - The `execute_tasks` method ensures all tasks are executed in the correct order based on their priority. --- Implement the `TaskScheduler` class and its methods as detailed above. Ensure your implementation is both efficient and concise.","solution":"from collections import defaultdict class TaskScheduler: def __init__(self): self.tasks = defaultdict(list) def add_task(self, priority: int, task: str) -> None: self.tasks[priority].append(task) def execute_tasks(self) -> list: executed_tasks = [] for priority in sorted(self.tasks.keys(), reverse=True): executed_tasks.extend(self.tasks[priority]) return executed_tasks"},{"question":"A local basketball team is organizing a free throw competition. Each player will take multiple free throws, and the goal is to determine how many free throws each player made. The challenge is to compute the number of successful free throws for each player given their results. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. - Each test case consists of two lines: - The first line contains a single integer N, the number of free throws attempted by the player. - The second line contains N space-separated integers denoting the results of the free throws (1 for a successful free throw, 0 for a missed free throw). ------ Output Format ------ For each test case, output a single integer: the number of successful free throws made by the player. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 (0 ≤text{ each free throw result } ≤1) ------ Sample Input 1 ------ 3 5 1 0 1 1 0 4 1 1 1 1 6 0 0 0 0 0 0 ------ Sample Output 1 ------ 3 4 0 ------ Explanation 1 ------ Test case 1: The player attempted 5 free throws, out of which 3 were successful (1s). Test case 2: The player attempted 4 free throws, all of which were successful (1s). Test case 3: The player attempted 6 free throws, none of which were successful (all 0s).","solution":"def count_successful_free_throws(T, test_cases): results = [] for case in test_cases: N, throws = case # Count the number of successful free throws successful_throws = sum(throws) results.append(successful_throws) return results # Function to parse the input format def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) test_cases = [] idx = 1 for _ in range(T): N = int(lines[idx]) throws = list(map(int, lines[idx + 1].split())) test_cases.append((N, throws)) idx += 2 return T, test_cases"},{"question":"Given a string S consisting of lowercase alphabets, you have to construct a new string by rearranging the characters of S such that no two adjacent characters are the same. If it is not possible to rearrange the string in such a way, return an empty string. Example 1: Input: S = \\"aab\\" Output: \\"aba\\" Explanation: \\"aba\\" is a possible rearrangement of the string \\"aab\\" with no two adjacent characters being the same. Example 2: Input: S = \\"aaab\\" Output: \\"\\" Explanation: There is no possible rearrangement of \\"aaab\\" to satisfy the condition. Your task: You don\'t need to read input or print anything. Your task is to complete the function reorganizeString() which takes the string S as input parameter and returns the rearranged string or an empty string if rearrangement is not possible. Expected Time Complexity: O(N log N) Expected Space Complexity: O(N) Constraints: 1 ≤ len(S) ≤ 10^5","solution":"import heapq from collections import Counter def reorganizeString(S): Returns a rearranged string such that no two adjacent characters are the same. If it is not possible, returns an empty string. if not S: return \\"\\" # Count frequency of each character char_count = Counter(S) # Use a max heap to store characters by their frequency max_heap = [(-freq, char) for char, freq in char_count.items()] heapq.heapify(max_heap) # The result list result = [] # The previous element to keep track of the last placed character prev_freq, prev_char = 0, \'\' while max_heap: # Get the most frequent character freq, char = heapq.heappop(max_heap) # Add the previous character back if its frequency is more than zero if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) # Add current character to result result.append(char) # Update the frequency of the current character prev_freq, prev_char = freq + 1, char reorganized_string = \'\'.join(result) # Check if the reorganized string has the same length as the original string if len(reorganized_string) != len(S): return \\"\\" return reorganized_string"},{"question":"In this problem, you need to determine whether a given array of integers contains any duplicate elements. If duplicates are found, you should return the index of the first duplicate element. If there are no duplicates, return -1. For example, for the array [1, 2, 3, 4, 5, 2], the function should return 5 because the element 2 appears again at the 5th index (0-based). -----Input----- The first line of the input contains a single integer t (1 ≤ t ≤ 100) — the number of arrays to be processed. Each of the next t lines starts with a single integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. This is followed by n integers, which are the elements of the array. The elements of the array are in the range [1, 10^9]. -----Output----- For each array, print the index of the first duplicate element if it exists, otherwise print -1. -----Examples----- Input 2 6 1 2 3 4 5 2 5 1 2 3 4 5 Output 5 -1 -----Note----- In the first example, the element 2 appears again at index 5. Hence, the output is 5. In the second example, there are no duplicates in the array, so the output is -1.","solution":"def find_first_duplicate_index(arr): Finds the index of the first duplicate element in the array. If no duplicates are found, returns -1. seen = {} for i, num in enumerate(arr): if num in seen: return i seen[num] = True return -1 def process_arrays(t, arrays): Processes multiple arrays to find the first duplicate index in each one. Args: t (int): The number of arrays to be processed. arrays (list of lists): A list containing t arrays of integers. Returns: list: A list containing the result for each array. results = [] for array in arrays: results.append(find_first_duplicate_index(array)) return results"},{"question":"Charlie is working with a grid of size n x m, where some cells are blocked and others are open. A cell is represented by a \'0\' if it is open, and by a \'1\' if it is blocked. Charlie wants to find the shortest path from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1) of the grid. He can move up, down, left, or right, but cannot move diagonally. Help Charlie find the shortest path length in the grid. If there is no path, return -1. -----Input----- The first line of the input contains two integers n and m (2 ≤ n, m ≤ 100) — the number of rows and columns in the grid, respectively. Each of the next n lines contains m integers separated by spaces, representing the grid. The integer value is either \'0\' for open cell or \'1\' for blocked cell. -----Output----- Print a single integer — the length of the shortest path from (0, 0) to (n-1, m-1). If there is no such path, output -1. -----Examples----- Input 5 6 0 0 1 0 0 0 1 0 1 1 1 0 1 0 0 0 0 0 0 0 1 1 0 1 0 1 1 1 0 0 Output 10 Input 3 3 0 1 0 0 1 0 0 0 0 Output 5 Input 4 4 0 1 0 0 0 1 1 1 0 0 1 0 1 1 0 0 Output -1 -----Note----- In the first sample, the shortest path is 10 steps long: (0,0) -> (1,1) -> (2,1) -> (2,2) -> (2,3) -> (2,4) -> (1,5) -> (0,5) -> (0,4) -> (3,4) -> (4,4). In the second sample, the shortest path is 5 steps long: (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2). In the third sample, there is no such path from (0,0) to (3,3), hence the output is -1.","solution":"from collections import deque def shortest_path(grid): n = len(grid) m = len(grid[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right if grid[0][0] == 1 or grid[n-1][m-1] == 1: return -1 # BFS setup queue = deque([(0, 0, 1)]) # (row, col, distance from start) visited = set() visited.add((0, 0)) while queue: x, y, dist = queue.popleft() if x == n-1 and y == m-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == 0: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"Given an array of integers representing the heights of buildings on a street, determine the maximum number of blocks of contiguous buildings of the same height. Your task is to write a function that takes in an array and returns this maximum number. **Examples** ```python def max_contiguous_blocks(buildings): pass # Example 1 input_1 = [3, 3, 2, 2, 2, 1] print(max_contiguous_blocks(input_1)) # Output: 3 # Example 2 input_2 = [1, 2, 2, 1, 1, 1, 3, 3] print(max_contiguous_blocks(input_2)) # Output: 3 # Example 3 input_3 = [1, 2, 3, 4, 5] print(max_contiguous_blocks(input_3)) # Output: 1 ``` **Function Signature** ```python def max_contiguous_blocks(buildings: List[int]) -> int: ```","solution":"from typing import List def max_contiguous_blocks(buildings: List[int]) -> int: if not buildings: return 0 max_blocks = 1 current_blocks = 1 for i in range(1, len(buildings)): if buildings[i] == buildings[i - 1]: current_blocks += 1 if current_blocks > max_blocks: max_blocks = current_blocks else: current_blocks = 1 return max_blocks"},{"question":"Create a function that takes a list of words and a number `n`, and returns a new list containing only the words that have exactly `n` characters. Example: filter_words_by_length([\\"apple\\", \\"pear\\", \\"banana\\", \\"fig\\", \\"kiwi\\"], 4) // return [\\"pear\\", \\"kiwi\\"] filter_words_by_length([\\"cherry\\", \\"plum\\", \\"strawberry\\", \\"mango\\"], 5) // return [\\"mango\\"]","solution":"def filter_words_by_length(words, n): Returns a new list containing only the words that have exactly `n` characters. Parameters: words (list): List of words. n (int): Number of characters to filter the words by. Returns: list: A new list with words of exactly `n` characters. return [word for word in words if len(word) == n]"},{"question":"During the intergalactic trading season, a network of trade routes connects different planets. Each trade route has a certain value associated with it. The galactic council needs to determine the most profitable way to establish connections between these planets without forming any cycles (to prevent market monopolies). Given the number of planets and the trade routes that connect them, along with the associated values of these trade routes, find the maximum possible profit that can be obtained by establishing a subset of the trade routes without forming a cycle. -----Input----- Each input will consist of a single test case. The first line of the input contains two integers V and E (1 le V le 1000, 0 le E le 10000) representing the number of planets (vertices) and the number of trade routes (edges), respectively. Each of the next E lines contains three integers u, v, and w (0 le u,v<V, 0 le w le 10000), representing a trade route between planets u and v with a value w. -----Output----- Output a single integer: the maximum possible profit that can be obtained by establishing the trade routes without forming a cycle. -----Examples----- Sample Input 1: 4 5 0 1 10 0 2 6 0 3 5 1 3 15 2 3 4 Sample Output 1: 31 Sample Input 2: 3 3 0 1 5 1 2 4 0 2 3 Sample Output 2: 9","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def maximum_profit(V, E, edges): # Sort edges in descending order based on the value (w) edges = sorted(edges, key=lambda item: item[2], reverse=True) parent = [] rank = [] # Initialize disjoint sets for node in range(V): parent.append(node) rank.append(0) max_profit = 0 e = 0 for i in range(E): u, v, w = edges[i] x = find(parent, u) y = find(parent, v) if x != y: e += 1 max_profit += w union(parent, rank, x, y) return max_profit"},{"question":"Sammy is fascinated with special sequences of integers. He defines a sequence as *special* if the absolute difference between any two consecutive elements is either 1 or 2. Given a sequence of integers, determine if it\'s a special sequence. If it is, print \\"YES\\". Otherwise, print \\"NO\\". ------ Input Format ------ - The first line contains a single integer T, denoting the number of test cases. The description of test cases follows. - The first line of each test case contains an integer N, which represents the number of elements in the sequence. - The second line contains N space-separated integers, representing the sequence. ------ Output Format ------ For each test case, print \\"YES\\" if the sequence is special, otherwise print \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 - Each element of the sequence is between -10^9 and 10^9 ----- Sample Input 1 ------ 3 3 1 2 3 4 1 3 5 7 5 5 6 4 3 7 ----- Sample Output 1 ------ YES NO YES ----- Explanation 1 ------ Test Case 1: The sequence is 1, 2, 3. The differences between consecutive elements are |2-1| = 1 and |3-2| = 1. Both are either 1 or 2. Therefore, the sequence is special. Test Case 2: The sequence is 1, 3, 5, 7. The differences between consecutive elements are |3-1| = 2, |5-3| = 2, and |7-5| = 2. All differences are either 1 or 2, but the sequence is not consecutive. It\'s NOT suitable for our special sequence. Test Case 3: The sequence is 5, 6, 4, 3, 7. The differences between consecutive elements are |6-5| = 1, |4-6| = 2, |3-4| = 1, |7-3| = 4. Only the last difference (4) would disqualify it as special, so the sequence is NOT special.","solution":"def is_special_sequence(sequence): Determines if the given sequence is special. A sequence is special if the absolute difference between any two consecutive elements is either 1 or 2. for i in range(1, len(sequence)): if abs(sequence[i] - sequence[i - 1]) not in {1, 2}: return \\"NO\\" return \\"YES\\" def process_test_cases(T, test_cases): Processes multiple test cases to determine if each sequence is special or not. results = [] for i in range(T): N = test_cases[i][0] sequence = test_cases[i][1] results.append(is_special_sequence(sequence)) return results"},{"question":"Write a function that takes a list of integers and checks if it\'s a Bitonic sequence. A Bitonic sequence is a sequence where: 1. The sequence initially monotonically increases, then monotonically decreases. 2. It must contain at least three elements. Your function should return `True` if the list is a Bitonic sequence, otherwise it should return `False`. *Examples:* - `[1, 3, 8, 12, 4, 2]` is a Bitonic sequence (increasing part is `[1, 3, 8, 12]` and decreasing part is `[12, 4, 2]`). - `[6, 10, 15, 12, 8, 3, 2, 1]` is a Bitonic sequence (increasing part is `[6, 10, 15]` and decreasing part is `[15, 12, 8, 3, 2, 1]`). - `[3, 3, 4, 2, 1]` is not a Bitonic sequence (it contains a plateau `[3, 3, 4]` which is not strictly increasing, and the sequence does not have at least three elements in any strictly increasing or decreasing part). *Edge cases: A list with less than 3 elements is not considered a Bitonic sequence as there is insufficient data to form a meaningful increasing and decreasing subsequence.*","solution":"def is_bitonic(sequence): Check if the sequence is a Bitonic sequence. :param sequence: List of integers :return: True if sequence is Bitonic, False otherwise n = len(sequence) if n < 3: return False increasing = True has_increased = False has_decreased = False for i in range(1, n): if increasing: if sequence[i] > sequence[i-1]: has_increased = True elif sequence[i] < sequence[i-1]: if not has_increased: return False increasing = False has_decreased = True else: return False else: if sequence[i] >= sequence[i-1]: return False else: has_decreased = True return has_increased and has_decreased"},{"question":"A company wants to optimize its network connection by installing a minimum number of cables to connect all the departments. Each department is represented as a node, and a possible cable connection between two departments is represented as an edge with a weight indicating the cost to install that cable. Given the costs of potential cable connections, determine the minimum cost to connect all the departments. You are given T test cases. For each test case, you are given: * An integer `N` representing the number of departments. * An integer `M` representing the number of possible cable connections. * M lines follow, each containing three integers `u`, `v`, and `w`, indicating that there is a cable connection between department `u` and department `v` with a cost `w`. Your task is to compute the minimum cost to connect all departments for each test case. If it is not possible to connect all departments, return -1 for that test case. # Constraints * 1 <= T <= 100 * 1 <= N <= 1000 * 0 <= M <= 10000 * 1 <= u, v <= N * 1 <= w <= 100000 # Input Input is given from Standard Input in the following format. The first line is as follows: ``` T ``` Then, T test cases follow. Each test case is given in the following format: ``` N M u_1 v_1 w_1 u_2 v_2 w_2 ... u_M v_M w_M ``` # Output For each test case, print a line containing the minimum cost to connect all departments, or `-1` if it is not possible. # Example Input ``` 2 4 5 1 2 1 1 3 4 1 4 3 2 3 2 3 4 5 3 1 1 2 3 2 3 1 1 3 1 ``` Output ``` 6 2 ```","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 def kruskal_min_cost_to_connect_departments(N, edges): # Sort edges based on weight edges = sorted(edges, key=lambda item: item[2]) parent = [] rank = [] for node in range(N): parent.append(node) rank.append(0) mst_cost = 0 mst_edges = 0 for edge in edges: u, v, w = edge u -= 1 v -= 1 root_u = find(parent, u) root_v = find(parent, v) if root_u != root_v: union(parent, rank, root_u, root_v) mst_cost += w mst_edges += 1 if mst_edges == N-1: break return mst_cost if mst_edges == N-1 else -1 def minimum_cost_to_connect_all_departments(T, test_cases): results = [] for i in range(T): N, M = test_cases[i][0] edges = test_cases[i][1:] result = kruskal_min_cost_to_connect_departments(N, edges) results.append(result) return results"},{"question":"Write a function that generates all possible letter combinations that the number could represent on a phone keypad, given a string containing digits from 2 to 9 inclusive. The mapping is as follows: ``` 2 -> \\"abc\\" 3 -> \\"def\\" 4 -> \\"ghi\\" 5 -> \\"jkl\\" 6 -> \\"mno\\" 7 -> \\"pqrs\\" 8 -> \\"tuv\\" 9 -> \\"wxyz\\" ``` Return the combinations in lexicographical order. Examples: ```python letter_combinations(\'23\') == [\'ad\', \'ae\', \'af\', \'bd\', \'be\', \'bf\', \'cd\', \'ce\', \'cf\'] letter_combinations(\'47\') == [\'gp\', \'gq\', \'gr\', \'gs\', \'hp\', \'hq\', \'hr\', \'hs\', \'ip\', \'iq\', \'ir\', \'is\'] letter_combinations(\'\') == [] letter_combinations(\'2\') == [\'a\', \'b\', \'c\'] ``` You can assume the input string represents a valid combination.","solution":"def letter_combinations(digits): Returns all possible letter combinations that the number could represent on a phone keypad. :param digits: str, containing digits from 2 to 9 inclusive :return: list of str, all possible letter combinations in lexicographical order if not digits: return [] digit_to_char = { \'2\': \'abc\', \'3\': \'def\', \'4\': \'ghi\', \'5\': \'jkl\', \'6\': \'mno\', \'7\': \'pqrs\', \'8\': \'tuv\', \'9\': \'wxyz\' } def backtrack(index, path): if index == len(digits): combinations.append(\'\'.join(path)) return possible_letters = digit_to_char[digits[index]] for letter in possible_letters: path.append(letter) backtrack(index + 1, path) path.pop() combinations = [] backtrack(0, []) return combinations"},{"question":"Peter was given a string `s` which contains only lowercase English letters. He can perform the following operation on the string any number of times: select two different indices `i` and `j` such that `s[i] != s[j]` and swap `s[i]` and `s[j]`. Peter wants to know the lexicographically smallest string he can obtain after performing any number of these operations. -----Input----- The input is a single string `s` (1 leq |s| leq 200,000) -- the initial string consisting of lowercase English letters. -----Output----- Print the lexicographically smallest string that can be obtained. -----Examples----- Input dcba Output abcd Input hello Output ehllo Input bubble Output bbbelu Input algorithm Output aghilmort -----Note----- In the first example, Peter can swap indices 1 and 4, then indices 2 and 3 to obtain \\"abcd\\", which is the lexicographically smallest string possible. In the second example, swapping the first and last characters results in \\"oellh\\", then swapping the second and fourth characters results in \\"ehllo\\", the smallest string possible. In the third example, multiple swaps can occur to place the characters in lexicographical order, starting with swapping \'u\' and \'e\'. In the fourth example, multiple swaps take place to finally arrange all characters in the order \\"aghilmort\\".","solution":"def lexicographically_smallest_string(s): Returns the lexicographically smallest string that can be obtained by any number of swaps. return \'\'.join(sorted(s))"},{"question":"Write a function that takes a list of tuples, where each tuple contains two integers, and returns a single list containing the sum of corresponding integers from the tuples. Assume that the input list is non-empty and that all tuples have the same length. **Example:** ```python sum_tuples([(1, 2), (3, 4), (5, 6)]) # should return [9, 12] sum_tuples([(4, 5, 6), (7, 8, 9)]) # should return [11, 13, 15] ```","solution":"def sum_tuples(tuple_list): Returns a single list containing the sum of corresponding integers from the tuples. Assumes all tuples are of the same length. if not tuple_list: return [] # Assuming all tuples in the list have the same length tuple_length = len(tuple_list[0]) # Initialize a result list with zeros of the same length result = [0] * tuple_length # Sum corresponding elements for tup in tuple_list: for i in range(tuple_length): result[i] += tup[i] return result"},{"question":"Given a sorted array arr[] of N integers and an integer X. The task is to find the element in the array that has the closest difference to X. If there are multiple elements with the same closest difference, return the smallest one. Example 1: Input: N=5 X=7 arr[] = {1, 2, 4, 8, 16} Output: 8 Explanation: The closest element to 7 is 8. Example 2: Input: N=6 X=10 arr[] = {1, 2, 3, 4, 5, 15} Output: 5 Explanation: The closest elements to 10 are 5 and 15. Since 5 is smaller, it is returned. Your Task: Since, this is a function problem. You don\'t need to take any input, as it is already accomplished by the driver code. You just need to complete the function closestElement() that takes array arr, integer N, and integer X as parameters and returns the element closest to X. Expected Time Complexity: O(log N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5 -10^9 ≤ arr[i] ≤ 10^9 arr must be sorted in non-decreasing order.","solution":"def closestElement(arr, N, X): Returns the element in arr which is closest to X. If there is a tie, returns the smallest element. # Edge Cases if N == 0: return None if X <= arr[0]: return arr[0] if X >= arr[-1]: return arr[-1] # Binary Search to find the closest element low, high = 0, N - 1 close_element = None while low <= high: mid = (low + high) // 2 if arr[mid] == X: return arr[mid] elif arr[mid] < X: close_element = arr[mid] low = mid + 1 else: high = mid - 1 # We have the closest element now, we need to handle tie cases # closest_element could be in arr[high] or arr[low] if there is a tie if close_element is None: close_element = arr[low] closest_diff = abs(close_element - X) if low < N: dist_low = abs(arr[low] - X) if dist_low < closest_diff or (dist_low == closest_diff and arr[low] < close_element): close_element = arr[low] return close_element"},{"question":"Given a list of integers, write a program to find the maximum sum of non-adjacent elements in a subset The rules are: - You are not allowed to pick two adjacent elements from the list. - You need to find the maximum possible sum of such a subset. Input Format: - The first line contains an integer N, the number of elements in the list. - The second line contains N integers separated by space. Output Format: - Output a single integer, the maximum sum of non-adjacent elements. Constraints: - 1 ≤ N ≤ 1000 - Each integer in the list is between -1000 and 1000 Example Input: 5 3 2 5 10 7 Example Output: 15 Explanation: In this example, the maximum sum is obtained by picking the elements 3, 10, and 2, which totals 15. Note that picking 3 and 5 together would not be allowed since they are adjacent, and picking 10 and 7 together would also not be allowed. Another possible combination is 3 and 10 which sums to 13, but 15 is the maximum.","solution":"def max_non_adjacent_sum(nums): Returns the maximum sum of non-adjacent elements in the list of integers. if not nums: return 0 incl = 0 # Max sum including the previous element excl = 0 # Max sum excluding the previous element for num in nums: new_excl = max(incl, excl) incl = excl + num excl = new_excl return max(incl, excl) def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) nums = list(map(int, data[1:])) print(max_non_adjacent_sum(nums))"},{"question":"Given a string s and a set of words in an array words[], determine if the string s can be segmented into a space-separated sequence of one or more words from the array words[]. Example: Input: s = \\"applepenapple\\" words[] = {\\"apple\\", \\"pen\\"} Output: true Explanation: The string can be segmented as \\"apple pen apple\\", which are all in the words array. Input: s = \\"catsandog\\" words[] = {\\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\"} Output: false Explanation: The string cannot be segmented into words from the words array. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function wordBreak() that takes a string s and an array of strings words as input parameters, and returns true if the string can be segmented into words from the array and false otherwise. The driver code takes care of the printing. Expected Time Complexity: O(n*m) where n is the length of the string and m is the number of words in the array. Expected Auxiliary Space: O(n) where n is the length of the string. Constraints: 1 ≤ s.length ≤ 300 1 ≤ words.length ≤ 100 1 ≤ words[i].length ≤ 20","solution":"def wordBreak(s, words): Determines if the string s can be segmented into a space-separated sequence of one or more words from the array words. words_set = set(words) n = len(s) dp = [False] * (n + 1) dp[0] = True for i in range(1, n + 1): for j in range(i): if dp[j] and s[j:i] in words_set: dp[i] = True break return dp[-1]"},{"question":"A company offers a set of stocks, numbered from 1 through N. Each stock has a price, denoted by a list of integers where the index represents the stock number. You are initially given K units of a particular stock. You can perform a series of operations, where in each operation, you can: - Sell one unit of the current stock and buy one unit of a stock with a higher number (i.e., if you have stock i, you can buy stock i+1, i+2, ..., N). Your goal is to maximize your final value by the end of operations. Maximizing the value means having stocks with higher prices. Can you determine the maximum possible value that can be achieved by selling and buying stocks optimally? -----Input:----- - First line will contain T, the number of test cases. Then the test cases follow. - For each test case, the first line contains two integers N (the number of stocks) and K (the initial stock number you have). - The second line contains N integers representing the prices of the stocks, indexed from 1 to N. -----Output:----- For each test case, output the maximum possible value that can be achieved by the end of operations. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 1000 - 1 leq Price[i] leq 10^9 where i is the i-th stock -----Sample Input:----- 2 5 2 10 1 5 8 7 4 1 4 3 2 1 -----Sample Output:----- 17 4","solution":"def max_stock_value(T, test_cases): results = [] for case in test_cases: N, K, prices = case # The current stock index is K-1 because prices are zero-indexed in the list current_index = K - 1 # Iterate through the prices from current index to the end max_price = prices[current_index] for i in range(current_index + 1, N): if prices[i] > max_price: max_price = prices[i] # Append the result for the current test case results.append(max_price) return results"},{"question":"Given a matrix of size N x M, where each cell contains an integer value, determine if there exists a path from the top-left corner to the bottom-right corner of the matrix such that all cells in the path have the same value. You can only move right or down from a given cell. If such a path exists, return true; otherwise, return false. Example 1: Input: N = 3, M = 3 mat = [ [1, 1, 1], [2, 1, 2], [2, 1, 1] ] Output: true Explanation: There exists a path from (0,0) to (2,2) with all cells containing the value 1: (0,0) -> (0,1) -> (0,2) -> (1,1) -> (2,1) -> (2,2). Example 2: Input: N = 2, M = 2 mat = [ [1, 2], [2, 1] ] Output: false Explanation: There is no path from (0,0) to (1,1) where all cells contain the same value. Your task: You don\'t need to read input or print anything. Your task is to complete the function isUniformPath() which takes the integers N, M, and the matrix \'mat\' as input parameters and returns a boolean value indicating whether a uniform path exists. Expected Time Complexity: O(N*M) Expected Auxiliary Space: O(N*M) Constraints: 1 ≤ N, M ≤ 100 -10^3 ≤ mat[i][j] ≤ 10^3","solution":"def isUniformPath(N, M, mat): Determines if there exists a path from the top-left corner to the bottom-right corner such that all cells in the path have the same value. You can move right or down from a given cell. Parameters: - N (int): number of rows in the matrix - M (int): number of columns in the matrix - mat (list of list of int): the matrix of integers Returns: - bool: True if such a path exists, False otherwise target_value = mat[0][0] target_row = N - 1 target_col = M - 1 def dfs(r, c): if r == target_row and c == target_col: return True if r < 0 or r >= N or c < 0 or c >= M or mat[r][c] != target_value: return False temp = mat[r][c] mat[r][c] = None # Mark as visited found_path = dfs(r+1, c) or dfs(r, c+1) mat[r][c] = temp return found_path return dfs(0, 0)"},{"question":"In this exercise, you will practice using functions and conditional statements in Python. Given two integers x and y, your task is to return the maximum of the two integers. If the integers are equal, return the message \\"Equal\\". Example 1: Input: x = 7, y = 5 Output: 7 Example 2: Input: x = 10, y = 10 Output: \\"Equal\\" Your Task: You don\'t need to read or print anything. Your task is to complete the function `maximum()` which takes x and y as input parameters and returns the desired output. Expected Time Complexity: O(1) Expected Space Complexity: O(1) Constraints: 1 ≤ x, y ≤ 10^9","solution":"def maximum(x, y): Returns the maximum of the two integers x and y. If x and y are equal, returns the string \\"Equal\\". if x > y: return x elif y > x: return y else: return \\"Equal\\""},{"question":"You are given an array of NN integers representing the heights of NN buildings. You are also given a positive integer DD which represents the maximum distance you can jump from one building to another. You should determine the minimum number of jumps required to reach the last building from the first building. If it is not possible to reach the last building, return -1. A jump is defined as moving from the current building at index ii to a building at index jj (i < j) such that |heights[i] - heights[j]|≤D|heights[i] - heights[j]| le D and jj is within the jumping distance of DD from ii (i.e., i < j ≤ i + D). -----Input----- - The first line of the input contains a single integer NN denoting the number of buildings. - The second line contains NN space-separated integers heights1, heights2, ..., heightsNheights_1, heights_2, ldots, heights_N. - The third line contains a single integer DD. -----Output----- Print a single line containing a single integer — the minimum number of jumps required to reach the last building from the first building. If it is not possible, print -1. -----Constraints----- - 1≤N≤100,0001 le N le 100,000 - 1≤heights[i]≤10^61 le heights[i] le 10^6 for each valid ii - 1≤D≤N1 le D le N -----Example Input----- 6 1 2 5 3 2 4 2 -----Example Output----- 3 -----Explanation----- Example case 1: - Jump from building 1 (height 1) to building 2 (height 2) - Jump from building 2 (height 2) to building 4 (height 3) - Jump from building 4 (height 3) to building 6 (height 4). Therefore, the minimum number of jumps is 3.","solution":"from collections import deque def min_jumps_to_end(buildings, D): N = len(buildings) if N == 1: # If there\'s only one building, we\'re already at the end return 0 # Distance array to store the minimum number of jumps needed to reach each building distances = [float(\'inf\')] * N distances[0] = 0 q = deque([0]) # BFS queue initialized with the first building while q: current = q.popleft() current_jump_steps = distances[current] + 1 # Check all buildings within the jump range of current building for next_building in range(current + 1, min(current + D + 1, N)): if abs(buildings[current] - buildings[next_building]) <= D: if distances[next_building] > current_jump_steps: distances[next_building] = current_jump_steps q.append(next_building) return -1 if distances[-1] == float(\'inf\') else distances[-1] # Example usage: # print(min_jumps_to_end([1, 2, 5, 3, 2, 4], 2))"},{"question":"You are given an array of integers where each element represents the height of a building. You need to find the amount of water that can be trapped after raining. Each building\'s width is 1 unit. The water trapped between the buildings is determined by the heights and rainwater can be trapped in gaps between buildings. Write a function `trap` that takes in a list of integers representing the heights of the buildings and returns an integer representing the total units of water trapped. Input: - A single list of integers representing the building heights. Output: - An integer representing the total units of water trapped. Constraints: - The list can contain at most 1000 integers. - Each building height is a non-negative integer and does not exceed 1000. Example: Input: ``` [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] ``` Output: ``` 6 ``` Explanation: The figure formed by the array `[0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]` will have 6 units of water trapped above the buildings. The water will be trapped in the indices `(2,4,5,6,9,10)`.","solution":"def trap(height): Returns the total units of water that can be trapped. if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) right_max[-1] = height[-1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) total_water = 0 for i in range(n): total_water += min(left_max[i], right_max[i]) - height[i] return total_water"},{"question":"John is studying networks and their resilience. He is particularly interested in tree structures. A tree is a connected, undirected graph with n nodes and n-1 edges. He notices that removing some nodes can result in multiple isolated subtrees. John’s task is to find the maximum possible size of the smallest subtree after removing exactly one node. Let’s define a tree with n nodes, where each node is labeled from 1 to n. You are given the number of nodes n and an array of n-1 pairs, each representing an edge between two nodes. Your task is to write a program that determines the size of the smallest subtree that can result after removing exactly one node from the original tree, such that the smallest subtree is the largest possible across all possible node removals. -----Input----- The first line contains an integer n (2 ≤ n ≤ 2000), the number of nodes in the tree. Each of the next (n-1) lines contains two integers u and v (1 ≤ u, v ≤ n), representing an edge between nodes u and v. -----Output----- Output a single integer, the size of the smallest subtree that can result after removing exactly one node, maximized across all possible node removals. -----Examples----- Input 5 1 2 1 3 1 4 4 5 Output 2 Input 3 1 2 1 3 Output 1 -----Note----- In the first test example, if node 1 is removed, we get subtrees [2], [3], [4, 5]. Removing 4, we get [1, 2, 3], [5]. The smallest subtree size is therefore 2 after removal of node 4. In the second test example, removing either node 2 or node 3 results in a subtree [1], making the maximum size of the smallest subtree always 1.","solution":"from collections import defaultdict, deque def calculate_subtree_sizes(n, edges): Calculates the subtree sizes for each node in the tree. tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Calculate sizes using DFS sizes = [0] * (n + 1) visited = [False] * (n + 1) def dfs(node): size = 1 visited[node] = True for neighbor in tree[node]: if not visited[neighbor]: size += dfs(neighbor) sizes[node] = size return size dfs(1) # Assuming node 1 as the root return sizes def max_smallest_subtree(n, edges): Finds the maximum size of the smallest subtree that can result after removing exactly one node. sizes = calculate_subtree_sizes(n, edges) max_min_subtree = float(\'-inf\') for u, v in edges: subtree_size1 = min(sizes[u], sizes[v]) subtree_size2 = n - subtree_size1 max_min_subtree = max(max_min_subtree, min(subtree_size1, subtree_size2)) return max_min_subtree"},{"question":"David is a traveling merchant who needs to transport his goods using his caravan. His caravan can carry a maximum weight of W units. He has a list of n types of goods, each type having a certain weight and value. David wants to maximize the value of the goods he can carry without exceeding the weight limit. As a skilled programmer, you have to help David determine the maximum value of goods that he can carry in his caravan. ---Input--- The first line contains two integers n (1 ≤ n ≤ 100) and W (1 ≤ W ≤ 1000) — the number of types of goods and the maximum weight the caravan can carry. Each of the next n lines contains two integers w_i (1 ≤ w_i ≤ 1000) and v_i (1 ≤ v_i ≤ 1000) — the weight and the value of the i-th type of good. ---Output--- Print a single integer — the maximum value of the goods that David can carry in his caravan. ---Example--- Input 3 50 10 60 20 100 30 120 Output 220 ---Note--- In the example, David can carry the first and second types of goods to achieve a maximum value of 160, which is less than the maximum possible value of 220 obtained by carrying the second and third types of goods while maintaining the weight limit.","solution":"def knapsack(n, W, items): # Create a DP table with dimensions (n+1) x (W+1) dp = [[0 for _ in range(W + 1)] for _ in range(n + 1)] # Populate the table for i in range(1, n + 1): weight, value = items[i - 1] for w in range(W + 1): if weight <= w: dp[i][w] = max(dp[i-1][w], dp[i-1][w-weight] + value) else: dp[i][w] = dp[i-1][w] return dp[n][W] # Function to parse the input and call the knapsack function def merchant_max_value(n, W, items): return knapsack(n, W, items)"},{"question":"A botanist is studying the pattern of growth in a particular species of plant. Each plant has a unique growth pattern described by a string of lowercase English letters, where each letter represents a different growth stage. The botanist has observed that certain substrings of these patterns are symmetrical and would like to determine the number of such symmetrical substrings in a given pattern. A substring is defined as symmetrical if it reads the same forward and backward (i.e., it is a palindrome). The botanist is interested in finding out all possible symmetrical substrings, including single letters and overlapping substrings. Given a string representing the growth pattern of a plant, determine the number of symmetrical substrings within that string. Input The input consists of a single line containing a string s (1 ≤ |s| ≤ 2000). Each character in s is a lowercase English letter. Output Print the number of symmetrical substrings within the given string. Examples Input abac Output 5 Input aaaa Output 10 Explanation For the first sample, the possible symmetrical substrings are \\"a\\", \\"b\\", \\"a\\", \\"c\\", and \\"aba\\". For the second sample, the possible symmetrical substrings are \\"a\\", \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", \\"aa\\", \\"aaa\\", and \\"aaaa\\".","solution":"def count_symmetrical_substrings(s): Returns the number of symmetrical substrings (palindromes) in the given string s. n = len(s) count = 0 def expand_around_center(left, right): nonlocal count while left >= 0 and right < n and s[left] == s[right]: count += 1 left -= 1 right += 1 for i in range(n): expand_around_center(i, i) # Odd length palindromes expand_around_center(i, i + 1) # Even length palindromes return count"},{"question":"You are given two strings, `s` and `t`, each containing only lowercase alphabetical characters. You need to determine if you can transform string `s` into string `t` by removing some characters from `s` without reordering the remaining characters. In other words, check if `t` is a subsequence of `s`. Return `true` if it is possible to transform `s` into `t`, and `false` otherwise. Example 1: Input: s = \\"abcde\\", t = \\"ace\\" Output: true Explanation: Removing characters \'b\' and \'d\' from \\"abcde\\" leaves \\"ace\\". Example 2: Input: s = \\"abcde\\", t = \\"aec\\" Output: false Explanation: It is not possible to create \\"aec\\" from \\"abcde\\" while keeping the order of characters. Note: - The length of `s` and `t` will not exceed 1000.","solution":"def is_subsequence(s, t): Returns True if `t` is a subsequence of `s`, otherwise False. Parameters: - s (str): The source string. - t (str): The target string. Returns: - bool: True if `t` is a subsequence of `s`, False otherwise. t_index = 0 s_index = 0 len_t = len(t) len_s = len(s) while t_index < len_t and s_index < len_s: if t[t_index] == s[s_index]: t_index += 1 s_index += 1 return t_index == len_t"},{"question":"Polycarp has a string `s` consisting of lowercase Latin letters. Polycarp wants to determine the minimal number of moves needed to make the string \\"almost palindrome\\". A string is considered \\"almost palindrome\\" if there exists at most one index `i` such that if `s[i]` is changed to any other lowercase Latin letter, then the string becomes a palindrome. Write a program to find the minimal number of moves Polycarp needs to make the string \\"almost palindrome\\". -----Input----- The first line contains one integer t (1 le t le 100) — the number of test cases. Then t test cases follow. Each test case consists of one string s (1 le |s| le 1000), consisting of lowercase Latin letters. -----Output----- For each test case, output on a separate line the minimal number of moves required to make the string \\"almost palindrome\\". -----Examples----- Input 3 abca abcd racecar Output 1 2 0 -----Note----- In the first example, changing \'c\' to \'b\' makes the string \\"abba\\", which is a palindrome, so the minimal number of moves is 1. In the second example, changing \'a\' to \'d\' and \'b\' to \'c\' makes the string \\"dcba\\", which is almost palindrome, so the minimal number of moves is 2. In the third example, the string is already a palindrome, so no moves are needed.","solution":"def minimal_moves_to_almost_palindrome(t, test_cases): results = [] for s in test_cases: n = len(s) moves = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: moves += 1 results.append(moves) return results"},{"question":"A popular pet store wants to ensure the health of their pets by maintaining a balanced diet. They want to create a balanced diet plan for each pet based on their dietary needs. Each pet has specific dietary requirements, represented by two values: the amount of protein (p) and the amount of carbohydrates (c) they need per day. The store has a list of food items, each of which provides a certain amount of protein and carbohydrates. You are given the amount of protein and carbohydrates each pet needs daily, and the nutritional content of each food item. Your task is to determine, for each pet, the minimum number of food items required to meet their dietary needs exactly. You can use each food item as many times as needed. If it\'s not possible to meet the exact requirements with the given food items, output -1. Input Format: - The first line contains an integer t, the number of test cases. - Each test case starts with two integers p and c, the amount of protein and carbohydrates required by the pet. - The next line contains an integer k, the number of food items in the store. - The next k lines each contain two integers pi and ci, the amount of protein and carbohydrates provided by the i-th food item. Output Format: - For each test case, output the minimum number of food items required to meet the exact dietary needs of the pet on a new line. If it\'s not possible, output -1. Constraints: 1 <= t <= 100 1 <= p, c <= 1000 1 <= k <= 100 1 <= pi, ci <= 100 Sample Input: 2 8 12 2 4 6 2 3 7 10 2 5 5 3 2 Sample Output: 2 -1","solution":"def min_food_items(t, cases): from collections import deque results = [] for case in cases: p, c, k, items = case dp = {} queue = deque([(0, 0, 0)]) found = False while queue: pi, ci, count = queue.popleft() if (pi, ci) in dp and dp[(pi, ci)] <= count: continue dp[(pi, ci)] = count if pi > p or ci > c: continue if pi == p and ci == c: results.append(count) found = True break for item in items: new_pi = pi + item[0] new_ci = ci + item[1] queue.append((new_pi, new_ci, count + 1)) if not found: results.append(-1) return results def main(input_data): data = input_data.strip().split(\'n\') t = int(data[0]) cases = [] index = 1 for _ in range(t): p, c = map(int, data[index].split()) k = int(data[index + 1]) items = [] for i in range(k): items.append(tuple(map(int, data[index + 2 + i].split()))) cases.append((p, c, k, items)) index += 2 + k results = min_food_items(t, cases) for res in results: print(res)"},{"question":"Write a function that takes a non-negative integer n as input and returns a string representing the first n rows of Pascal\'s Triangle. Pascal\'s Triangle is a triangular array of binomial coefficients. The rows of Pascal\'s Triangle are conventionally enumerated starting with row `n=0` at the top. The entries in each row are staggered relative to the neighbors. Example: `pascalsTriangle(5)` should return the following string: ``` 1 1 1 1 2 1 1 3 3 1 1 4 6 4 1 ``` - `pascalsTriangle(0)` should return `\\"1\\"` - `pascalsTriangle(1)` should return `\\"1n1 1\\"` - `pascalsTriangle(2)` should return `\\"1n1 1n1 2 1\\"` Note: The numbers in each row should be separated by spaces, and the rows should be separated by newline characters (‘n’). Ensure that the function handles edge cases such as when n is `0` efficiently.","solution":"def pascalsTriangle(n): Returns a string representing the first n rows of Pascal\'s Triangle. if n == 0: return \\"1\\" def generateNextRow(prevRow): return [1] + [prevRow[i] + prevRow[i+1] for i in range(len(prevRow)-1)] + [1] rows = [[1]] for i in range(1, n+1): rows.append(generateNextRow(rows[-1])) return \'n\'.join(\' \'.join(map(str, row)) for row in rows)"},{"question":"Martin and Clara are playing a game with m integers. Initially, there are m integers in an array, where the i-th integer is denoted as b_i. The two players take turns making moves. Martin starts the game. In each move, the player selects a positive integer x and an integer y from the array and replaces y with the result of y modulo x (i.e., y is updated to y % x). A player loses if all integers in the array become 0 before their turn. Assume that both players play optimally. Determine who will win the game. For example: m=4 and the integers are b_1=6, b_2=9, b_3=12, b_4=15. Martin can choose to take any integer and replace any other element with its modulo. For instance, if he chooses 9 and 12, and replaces 12 with 12 % 9, the array becomes [6, 9, 3, 15]. Optimal moves must be considered for both players to determine the winner. Input The first line contains a single integer m (1 ≤ m ≤ 10^5) — the number of integers in the array. The second line contains m integers b_1, b_2, …, b_m (1 ≤ b_1, b_2, …, b_m ≤ 10^9), representing the initial values of the array elements. Output Print \\"Martin\\" (without quotes) if Martin will win, or \\"Clara\\" (without quotes) if Clara will win. Note the output characters are case-sensitive. Examples Input 3 2 3 4 Output Martin Input 4 6 9 12 15 Output Clara Note In the first example, Martin can play optimally and always keep at least one number non-zero, ensuring his win. In the second example, no matter how Martin plays, Clara will always be able to force a win by playing correctly.","solution":"from math import gcd from functools import reduce def find_winner(m, b): Determines the winner of the game based on initial array values. :param m: int - the number of integers in the array :param b: list of int - the array of integers :return: str - \\"Martin\\" if Martin wins, otherwise \\"Clara\\" overall_gcd = reduce(gcd, b) return \\"Martin\\" if overall_gcd == 1 else \\"Clara\\""},{"question":"A park has a number of benches placed along a straight path. On each bench, some number of people can sit. Given the maximum capacity of each bench and the current number of people sitting on each bench, determine if the park is adhering to the seating constraints. There are a total of N benches (numbered 1 through N) along the path. You are given a sequence C_1, C_2, ldots, C_N, where for each valid i, C_i denotes the maximum capacity of the i-th bench. You are also given a sequence P_1, P_2, ldots, P_N, where for each valid i, P_i denotes the current number of people sitting on the i-th bench. Your task is to check whether any bench is over-occupied, i.e., the number of people sitting on any bench is greater than its maximum capacity. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N. - The second line contains N space-separated integers C_1, C_2, ldots, C_N. - The third line contains N space-separated integers P_1, P_2, ldots, P_N. -----Output----- For each test case, print a single line containing the string \\"YES\\" if all the benches are within their capacity or \\"NO\\" if any bench is over-occupied. -----Constraints----- - 1 le T le 100 - 1 le N le 100 - 1 le C_i le 100 for each valid i - 0 le P_i le 100 for each valid i -----Example Input----- 3 3 4 5 2 3 5 2 4 3 3 4 5 3 4 2 5 5 2 4 3 6 5 2 5 3 6 4 -----Example Output----- YES NO NO -----Explanation----- Example case 1: The number of people on each bench does not exceed their respective capacities. Example case 2: The second bench is over-occupied as it has 4 people but its capacity is only 3. Example case 3: The second bench is over-occupied as it has 5 people but its capacity is only 4.","solution":"def check_bench_seating(T, test_cases): results = [] for case in test_cases: N = case[0] capacities = case[1] current_people = case[2] is_valid = True for i in range(N): if current_people[i] > capacities[i]: is_valid = False break if is_valid: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given an initially empty bucket, and you want to fill it with fruits such that the ratio of apples to bananas is exactly m:n. In one step, you can add either one apple or one banana to the bucket. What is the minimum number of steps required to achieve the desired ratio of apples to bananas? A small reminder: if you add a apples and b bananas (a + b > 0) into the bucket, then it contains frac{a}{a + b} cdot 100 % apples and frac{b}{a + b} cdot 100 % bananas. -----Input----- The first line contains the single integer t (1 le t le 100) — the number of test cases. Each of the next t lines contains two integers m and n (1 le m, n le 100) — the desired ratio of apples to bananas. -----Output----- For each test case, print the minimum number of steps required to achieve the desired ratio. -----Examples----- Input 3 1 1 3 2 5 3 Output 2 5 8 -----Note----- In the first test case, you can pour 1 apple and 1 banana to get a ratio of 1:1. In the second test case, you should pour 3 apples and 2 bananas to get a ratio of 3:2. In the third test case, you should pour 5 apples and 3 bananas to get a ratio of 5:3.","solution":"def minimum_steps(t, cases): Returns the minimum number of steps required to fill the bucket with the desired ratio of apples to bananas. Parameters: t (int): The number of test cases. cases (list of tuples): A list of tuples where each tuple contains two integers (m, n) representing the desired ratio of apples to bananas. Returns: list of int: A list containing the minimum number of steps for each test case. from math import gcd results = [] for m, n in cases: g = gcd(m, n) steps = (m // g) + (n // g) results.append(steps) return results"},{"question":"You are working on a project to sort lists of integers. However, the lists you receive are not in a regular format; instead, they are presented in a compressed string format. Your task is to decompress the string and then sort the integers in ascending order. Each compressed string consists of integers separated by commas, but segments of the list may be encapsulated in square brackets `[ ]` to denote a sublist. The sublists may contain further nested sublists. Write a function that takes a string `s` as an input and returns a single sorted list of integers. -----Constraints----- - The string `s` will contain only digits, commas, and square brackets `[ ]`. - The string `s` is well-formed, meaning all brackets are balanced and properly nested. - 1 ≤ length of `s` ≤ 10^5 - The integer values in the string will fit in a 32-bit signed integer. -----Input----- Input is given by a single line string. -----Output----- Print a single line of space-separated integers representing the sorted list. -----Example Input----- \\"[2,3,[1,5],[4,[7,6],8]]\\" -----Example Output----- \\"1 2 3 4 5 6 7 8\\" -----Example Input----- \\"9,3,[4,5,[1,2,8],7],[6,0]\\" -----Example Output----- \\"0 1 2 3 4 5 6 7 8 9\\"","solution":"def decompress_and_sort(s): Takes a compressed string \'s\' with integers separated by commas and potentially with nested sublists, then returns a single sorted list of integers. import re # Remove all brackets and split the string by commas cleaned_string = re.sub(r\'[|]\', \'\', s) str_values = cleaned_string.split(\',\') # Convert all the string parts to integers int_values = list(map(int, str_values)) # Sort the list of integers sorted_values = sorted(int_values) return sorted_values def format_output(values): Formats list of integers \'values\' into a space separated string. return \' \'.join(map(str, values))"},{"question":"# Task Consider a grid of \'X\' and \'O\' characters. Write a function to determine if there is a path of \'O\'s from the top-left corner to the bottom-right corner of the grid. The path can only be constructed from adjacent cells (vertically and horizontally) containing \'O\'. # Purpose Enhance your skills in grid traversal algorithms and handling connected components in a 2D array. # Intent This task is designed to simulate scenarios requiring traversal through complex structures and finding specific paths within constraints. Emphasis is on the ability to implement efficient traversal and search strategies. # Function Signature ```python def is_path(grid: List[List[str]]) -> bool: pass ``` # Input - `grid`: A list of lists of strings where each string is either \'O\' or \'X\', representing the grid. # Output - Returns a boolean value indicating whether there is a path of \'O\'s from the top-left corner to the bottom-right corner. # Example ```python grid = [ [\'O\', \'X\', \'O\', \'O\'], [\'O\', \'O\', \'X\', \'O\'], [\'X\', \'O\', \'X\', \'O\'], [\'O\', \'O\', \'O\', \'O\'] ] assert is_path(grid) == True ``` # Constraints - The size of the grid is n x m, where 1 <= n, m <= 100. - Cells with \'X\' are obstacles and cannot be part of the path. - The function should return `False` if the grid is empty or if the start or end positions are \'X\'. # Note The solution should be optimized and handle edge cases carefully, such as grids with no \'O\'s or completely filled with \'O\'s.","solution":"from typing import List def is_path(grid: List[List[str]]) -> bool: if not grid or not grid[0] or grid[0][0] == \'X\' or grid[-1][-1] == \'X\': return False rows, cols = len(grid), len(grid[0]) visited = [[False] * cols for _ in range(rows)] def dfs(row, col): if row == rows - 1 and col == cols - 1: return True if row < 0 or row >= rows or col < 0 or col >= cols or grid[row][col] == \'X\' or visited[row][col]: return False visited[row][col] = True # Move in four possible directions if (dfs(row + 1, col) or dfs(row - 1, col) or dfs(row, col + 1) or dfs(row, col - 1)): return True return False return dfs(0, 0)"},{"question":"Given an array of integers, the goal is to rearrange the elements to create the lexicographically smallest permutation that is greater than the current arrangement of the array. If no such permutation exists (i.e., the array is sorted in descending order), return the array sorted in ascending order. -----Input----- The input consists of two lines: - The first line contains an integer n (1 ≤ n ≤ 10^5) representing the number of elements in the array. - The second line contains n space-separated integers representing the elements of the array. -----Output----- Output a single line containing n space-separated integers representing the new arrangement of the array. -----Examples----- Input 6 1 2 3 6 5 4 Output 1 2 4 3 5 6 Input 3 3 2 1 Output 1 2 3 Input 5 1 9 8 7 6 Output 6 1 7 8 9 -----Notes----- In example 1, the array [1, 2, 3, 6, 5, 4] can be rearranged to [1, 2, 4, 3, 5, 6] which is the lexicographically smallest permutation greater than the given arrangement. In example 2, there is no permutation that is lexicographically greater than [3, 2, 1], so the output is the array sorted in ascending order [1, 2, 3]. In example 3, the smallest permutation greater than [1, 9, 8, 7, 6] is [6, 1, 7, 8, 9].","solution":"def next_lexicographical_permutation(arr): Returns the next lexicographical permutation of the input list. If no such permutation exists, returns the sorted list in ascending order. n = len(arr) i = n - 2 # Find the rightmost element which is smaller than the next element while i >= 0 and arr[i] >= arr[i + 1]: i -= 1 if i == -1: return sorted(arr) # Find the rightmost element which is greater than arr[i] j = n - 1 while arr[j] <= arr[i]: j -= 1 # Swap elements at i and j arr[i], arr[j] = arr[j], arr[i] # Reverse the elements from i+1 to end arr = arr[:i+1] + arr[i+1:][::-1] return arr"},{"question":"A game is played with an array of integers, where each integer represents the number of stones in a pile. The two players, Alice and Bob, take alternate turns, starting with Alice. In each turn, the player can choose any pile that has at least two stones and remove one stone from the pile. The player who cannot make a move loses the game. Both players play optimally. You need to determine whether Alice, the starting player, wins or Bob wins. Input The first line contains an integer n (1 ≤ n ≤ 100000) — the number of piles. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000000000) — the number of stones in each pile. Output Print \\"Alice\\" if Alice wins the game, and \\"Bob\\" if Bob wins the game. Print the answers without the quotes. Examples Input 1 2 Output Alice Input 2 2 3 Output Bob Input 3 3 3 3 Output Alice","solution":"def find_winner(n, piles): Determines the winner of the game given the state of the piles. Parameters: n (int): The number of piles. piles (list of int): The number of stones in each pile. Returns: str: \\"Alice\\" if Alice wins, \\"Bob\\" if Bob wins. for pile in piles: if pile > 1: return \\"Alice\\" return \\"Bob\\""},{"question":"Jane is playing a game that involves sorting colored marbles. She has a bag with n marbles, each marble having one of three colors: red, blue, or green. Jane wants to sort the marbles such that all red marbles are at the beginning, all blue marbles are in the middle, and all green marbles are at the end. She wants to only use a single pass over the bag to achieve this. Implement a function that sorts the marbles in this specific order. Write a function that takes a list of strings representing the colors of the marbles and returns a list of strings sorted according to the game’s rules. Function Signature: ```python def sort_marbles(marbles: List[str]) -> List[str]: ``` # Input: - A list of strings `marbles` (1 ≤ |marbles| ≤ 10^6), where each element is either \\"red\\", \\"blue\\", or \\"green\\". # Output: - A list of strings representing the marbles sorted by their colors in the order red, blue, green. # Example: Input: ```python [\\"green\\", \\"blue\\", \\"red\\", \\"green\\", \\"blue\\", \\"red\\"] ``` Output: ```python [\\"red\\", \\"red\\", \\"blue\\", \\"blue\\", \\"green\\", \\"green\\"] ``` Input: ```python [\\"blue\\", \\"blue\\", \\"red\\", \\"red\\", \\"green\\", \\"green\\"] ``` Output: ```python [\\"red\\", \\"red\\", \\"blue\\", \\"blue\\", \\"green\\", \\"green\\"] ``` # Note: - In the first example input, the marbles would be sorted in the following sequence: [\\"red\\", \\"red\\", \\"blue\\", \\"blue\\", \\"green\\", \\"green\\"]. - In the second example input, the marbles are already sorted, so the output would remain the same.","solution":"def sort_marbles(marbles): Sorts a list of marbles such that all \'red\' marbles come first, followed by all \'blue\' marbles, and finally all \'green\' marbles. Uses a single-pass algorithm to achieve this. red_ptr, green_ptr = 0, len(marbles) - 1 current = 0 while current <= green_ptr: if marbles[current] == \\"red\\": marbles[red_ptr], marbles[current] = marbles[current], marbles[red_ptr] red_ptr += 1 current += 1 elif marbles[current] == \\"blue\\": current += 1 else: # marbles[current] == \\"green\\" marbles[green_ptr], marbles[current] = marbles[current], marbles[green_ptr] green_ptr -= 1 return marbles"},{"question":"Write a function to evaluate a simple mathematical expression given as a string. The expression only contains non-negative integers, plus (+) and minus (-) signs, and spaces. The function should correctly calculate the result and return it as an integer. The expression will be a simple one, i.e., no parentheses or operators other than addition and subtraction will be used. Also, there will be no negative numbers in the expression to start with. Function Signature: ```python def evaluate_expression(expression: str) -> int: pass ``` Examples: ```python evaluate_expression(\\"3 + 5\\") == 8 evaluate_expression(\\"10 + 2 - 6\\") == 6 evaluate_expression(\\"100 + 200 + 300\\") == 600 evaluate_expression(\\"5 - 3\\") == 2 evaluate_expression(\\" 1 + 2 + 3 \\") == 6 ```","solution":"def evaluate_expression(expression: str) -> int: Evaluate a simple mathematical expression consisting of non-negative integers, plus (+) and minus (-) signs, and spaces. Return the result as an integer. # Split the expression by spaces to process each part tokens = expression.split() # Initialize result with the first number result = int(tokens[0]) # Use a simple state machine to track operations i = 1 while i < len(tokens): operator = tokens[i] operand = int(tokens[i + 1]) if operator == \'+\': result += operand elif operator == \'-\': result -= operand i += 2 # Move to the next operator return result"},{"question":"Given an integer, check whether it is a Sparse number or not. A number is called Sparse if there are no two adjacent set bits (1s) in its binary representation. Example 1: Input: 22 Output: 0 Explanation: Binary representation of 22 is 10110. There are two adjacent set bits (1s) in it. Example 2: Input: 21 Output: 1 Explanation: Binary representation of 21 is 10101. There are no adjacent set bits (1s) in it. Your Task: You don\'t need to read or print anything. Your task is to complete the function is_sparse() which takes n as input parameter and returns 1 if n is a Sparse number otherwise returns 0. Expected Time Complexity: O(log(n)) Expected Space Complexity: O(1) Constraints: 1 <= n <= 10^{4}","solution":"def is_sparse(n): Returns 1 if the number n is Sparse, otherwise returns 0. A number is Sparse if there are no two adjacent set bits (1s) in its binary representation. # XOR the number with its right shift by 1 if n & (n >> 1): return 0 return 1"},{"question":"You are given two long integers, a and b, which represent the start and end of a range, respectively. Write a program to compute the smallest prime number that is greater than or equal to a and less than or equal to b. If there is no such prime number, return -1. Input Format Two space-separated long integers describing the respective values of a and b. Constraints 2 le a le b le 10^9 Output Format Print the smallest prime number within the range [a, b]. If no such prime exists, print -1. Sample Input 0 10 20 Sample Output 0 11 Explanation 0 The prime numbers between 10 and 20 are 11, 13, 17, and 19. The smallest of these is 11. Therefore, the output is 11. Sample Input 1 24 28 Sample Output 1 -1 Explanation 1 There are no prime numbers between 24 and 28. Therefore, the output is -1.","solution":"def is_prime(n): Determines if the given number n is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def smallest_prime_in_range(a, b): Returns the smallest prime number in the inclusive range [a, b]. Returns -1 if there is no such prime number. for num in range(a, b + 1): if is_prime(num): return num return -1 # Example usage: # print(smallest_prime_in_range(10, 20)) # Output: 11 # print(smallest_prime_in_range(24, 28)) # Output: -1"},{"question":"Rina loves playing with arrays and solving puzzles using them. She comes up with an interesting problem. Given a list of integers, she wants to find another list such that each element at index i of the new list is the product of all the numbers in the original list except the one at index i. Your task is to help Rina solve this problem. # Input Format - The first line contains a single integer T - the number of test cases. - Each test case consists of two lines. - The first line contains a single integer n - the number of elements in the array. - The second line contains n integers, the elements of the array. # Output Format For each test case, output a single line containing n integers, the resulting array of products. # Constraints - 1 ≤ T ≤ 100 - 2 ≤ n ≤ 1000 - -100 ≤ array elements ≤ 100 # Sample Input 1 ``` 2 3 1 2 3 4 1 2 3 4 ``` # Sample Output 1 ``` 6 3 2 24 12 8 6 ``` # Explanation For the first test case, the original array is [1, 2, 3]. - The product of all elements except the first one is 2 * 3 = 6. - The product of all elements except the second one is 1 * 3 = 3. - The product of all elements except the third one is 1 * 2 = 2. So the new array is [6, 3, 2]. For the second test case, the original array is [1, 2, 3, 4]. - The product of all elements except the first one is 2 * 3 * 4 = 24. - The product of all elements except the second one is 1 * 3 * 4 = 12. - The product of all elements except the third one is 1 * 2 * 4 = 8. - The product of all elements except the fourth one is 1 * 2 * 3 = 6. So the new array is [24, 12, 8, 6].","solution":"def product_array(arr): Returns a list such that each element at index i is the product of all elements in the array except the one at index i. n = len(arr) if n == 0: return [] left_products = [1] * n right_products = [1] * n result = [1] * n # Calculate left products for i in range(1, n): left_products[i] = left_products[i - 1] * arr[i - 1] # Calculate right products for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * arr[i + 1] # Calculate result for i in range(n): result[i] = left_products[i] * right_products[i] return result def solve(test_cases): results = [] for t in range(len(test_cases)): n, arr = test_cases[t] result = product_array(arr) results.append(result) return results def parse_input(input_text): lines = input_text.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): n = int(lines[index]) arr = list(map(int, lines[index + 1].split())) test_cases.append((n, arr)) index += 2 return test_cases def format_output(results): return \'n\'.join(\' \'.join(map(str, result)) for result in results)"},{"question":"You are organizing a football tournament. Each team needs to play with every other team exactly once. Your task is to calculate the total number of matches that will be played in the tournament, given \'t\' teams. # Example: ```python total_matches(4) == 6 ``` **Note:** if `t < 2` return `0` because at least two teams are needed to play a match!","solution":"def total_matches(t): Returns the total number of matches that will be played in a tournament where each team needs to play with every other team exactly once. :param t: Number of teams :return: Total number of matches if t < 2: return 0 return t * (t - 1) // 2"},{"question":"Alice has a special string of lowercase letters that she uses in her secret coding system. One day, she decides to play a game with Bob, where she presents a string `s` to him. Bob\'s task is to determine the number of distinct non-overlapping palindromic substrings within `s`. A palindromic string reads the same forwards as backwards. For example, the strings \\"racecar\\", \\"madam\\", and \\"a\\" are all palindromic. Substring `s[i..j]` is non-overlapping with `s[k..l]` if all indices used in the first substring do not intersect with indices used in the second substring; i.e., `j < k` or `l < i`. Input The input consists of a single line containing the string `s` (1 ≤ |s| ≤ 300), comprised of only lowercase English letters. Output Output the total number of distinct non-overlapping palindromic substrings within `s`. Example Input abba Output 4 Input abcbaabcb Output 9 Explanation In the first example, the distinct non-overlapping palindromic substrings are \\"a\\", \\"b\\", \\"bb\\", and \\"abba\\". In the second example, the distinct non-overlapping palindromic substrings are \\"a\\", \\"b\\", \\"c\\", \\"cc\\", \\"bb\\", \\"cbc\\", \\"bab\\", \\"abcba\\", and \\"bcb\\". Note Since the substrings must be distinct, each palindromic substring in the final count should be counted only once, even if it can appear more than once in different non-overlapping positions.","solution":"def count_distinct_palindromic_substrings(s): Returns the number of distinct non-overlapping palindromic substrings in s. n = len(s) palindrome_set = set() # Helper function to expand around center and add valid palindromes to the set def expand_around_center(left, right): while left >= 0 and right < n and s[left] == s[right]: palindrome_set.add(s[left:right+1]) left -= 1 right += 1 # Check all possible centers for palindromes for center in range(n): # Odd-length palindromes expand_around_center(center, center) # Even-length palindromes expand_around_center(center, center + 1) return len(palindrome_set)"},{"question":"The Great Expedition: Emma and Jack are exploring a mysterious island which their map doesn\'t cover fully. Each section of the island can either be safe or contain traps that cannot be tread upon. They each have a different idea of their current location on the island. Emma believes they are at location E, while Jack thinks they are at location J. To resolve their disagreement, they decide to conduct an experiment. They will move through the island step-by-step, comparing their respective paths on Emma\'s map and Jack\'s map. Both maps allow forecasting the condition (safe or trap) of adjacent sections. As soon as one of them steps into a trap, they\'ll know who was wrong since they couldn\'t have walked into a trap. Your task is to determine the minimal number of steps required to conclusively determine their actual starting location. If all explored paths are identical in safety and traps and no determination can be made, return \\"undecidable\\". -----Input----- - The first line of the input has three space-separated integers. The first integer, 2 leq n leq 2000 is the number of sections in the area. The next two integers are 0 leq E, J < n, the sections where Emma and Jack respectively think they are currently at. In particular, E neq J. - Then follow n lines. The i’th of these lines (0leq i<n) has four space-separated integers: u_i, d_i, l_i, r_i. If you are at section i, moving up leads to section u_i, moving down leads to section d_i, moving left leads to section l_i, and moving right leads to section r_i. Each value can be either a valid section index or -1 indicating an impassable path. - The next n lines each contain a single integer s_i which is 1 if section i is safe and 0 if it has a trap. -----Output----- Print the minimal number of steps it takes to prove either person incorrect. If no experiment can disprove either, print “undecidable”. -----Examples----- Sample Input 1: 4 0 1 1 2 -1 -1 -1 -1 2 3 0 -1 -1 -1 -1 -1 -1 -1 1 1 1 0 Sample Output 1: 2 Sample Input 2: 3 0 2 1 2 -1 -1 -1 -1 0 2 -1 -1 1 -1 1 1 1 Sample Output 2: undecidable","solution":"from collections import deque def minimal_steps_to_determine_fault(n, E, J, moves, safety): def get_neighbors(position): u, d, l, r = moves[position] neighbors = [] if u != -1: neighbors.append(u) if d != -1: neighbors.append(d) if l != -1: neighbors.append(l) if r != -1: neighbors.append(r) return neighbors queue = deque([(E, J, 0)]) visited = set((E, J)) while queue: e_curr, j_curr, steps = queue.popleft() if safety[e_curr] == 0: return steps + 1 # Emma stepped into a trap elif safety[j_curr] == 0: return steps + 1 # Jack stepped into a trap e_neighbors = get_neighbors(e_curr) j_neighbors = get_neighbors(j_curr) for en in e_neighbors: for jn in j_neighbors: if (en, jn) not in visited: queue.append((en, jn, steps + 1)) visited.add((en, jn)) return \\"undecidable\\""},{"question":"Anna is designing a computer network. The network consists of `n` computers connected by `m` directed cable links. Each connection `i` is described by three integers `u_i`, `v_i`, and `d_i` (1 ≤ `u_i`, `v_i` ≤ `n`), meaning there is a cable from computer `u_i` to computer `v_i` with a delay time of `d_i` milliseconds. Anna wants to determine the shortest amount of time it takes for data to travel from computer `s` to computer `t`. -----Input----- The first line of input contains two integers `n` and `m` (2 ≤ `n` ≤ 10^4, 1 ≤ `m` ≤ 10^5). The next `m` lines each contain three integers `u_i`, `v_i`, and `d_i` (1 ≤ `u_i`, `v_i` ≤ `n`, 1 ≤ `d_i` ≤ 10^4), describing a directed cable from computer `u_i` to computer `v_i` with delay time `d_i`. The last line contains two integers `s` and `t` (1 ≤ `s`, `t` ≤ `n`), where `s` is the starting computer and `t` is the target computer. -----Output----- Print the shortest amount of time required for data to travel from computer `s` to computer `t`. If there is no path from `s` to `t`, print -1. -----Examples----- Input 5 6 1 2 2 2 3 3 3 5 1 4 3 4 1 4 8 5 4 2 1 5 Output 6 Input 4 4 1 2 1 2 3 1 3 4 1 4 1 1 2 4 Output 2 -----Note----- In the first example, the shortest path from computer 1 to computer 5 is 1 → 2 → 3 → 5 with a delay of 2 + 3 + 1 = 6 milliseconds. In the second example, the shortest path from computer 2 to computer 4 is 2 → 3 → 4 with a delay of 1 + 1 = 2 milliseconds.","solution":"import heapq def shortest_path(n, m, edges, s, t): Find the shortest path from computer s to computer t in a network of n computers and m directed edges. graph = {i: [] for i in range(1, n + 1)} for u, v, d in edges: graph[u].append((v, d)) return dijkstra(graph, s, t) def dijkstra(graph, start, end): Dijkstra\'s algorithm to find the shortest path in a graph. heap = [(0, start)] # (cost, node) dist = {i: float(\'inf\') for i in graph} dist[start] = 0 visited = set() while heap: curr_dist, node = heapq.heappop(heap) if node in visited: continue visited.add(node) for neighbor, weight in graph[node]: if neighbor in visited: continue new_dist = curr_dist + weight if new_dist < dist[neighbor]: dist[neighbor] = new_dist heapq.heappush(heap, (new_dist, neighbor)) return dist[end] if dist[end] != float(\'inf\') else -1"},{"question":"John is a software developer working on a logistics application that involves managing delivery routes in a city. The city consists of n intersections connected by m directed roads. Each road has an associated delivery time. Intersections can have certain facilities important for the delivery operation (e.g., warehouses, recharging stations or hubs). Each intersection i is associated with a boolean value F_i indicating the presence (1) or absence (0) of a facility. John needs to determine the fastest delivery time for multiple deliveries between two given intersections. However, each delivery must pass through at least one intersection that has a facility. You will be given q queries. Each query specifies two intersections, s (start) and t (target). For each query, you should find the minimum delivery time from s to t such that at least one intersection with a facility is visited along the path. If there is no such path, return -1. Input Format The first line contains 3 space-separated integers denoting the respective values for n (the number of intersections), m (the number of roads), and q (the number of queries). The second line contains n space-separated integers where the boldsymbol{i}-th integer F_i is either 0 or 1, indicating the presence or absence of a facility at intersection i. Each of the m subsequent lines defines a road in the form of 3 space-separated integers, x, y, and d, defining a directed road from intersection x to intersection y with travel time d. Each of the q subsequent lines defines a query in the form of 2 space-separated integers, s and t. Constraints 1leq n,m,qleq10^5 0leq F_ileq1 1leq dleq10^9 1leq x,yleq n 1leq s,tleq n Output Format For each query, print its answer on a new line. Sample Input 6 7 2 1 0 1 0 0 1 1 2 4 1 3 2 2 3 5 2 4 10 3 5 3 4 6 8 5 6 1 1 6 4 6 Sample Output 6 8 Explanation The city map in the sample input can be depicted as follows: Intersections: 1, 2, 3, 4, 5, 6 Facilities: (1) (1) (1) Roads: 1 rightarrow 2 (4) 1 rightarrow 3 (2) 2 rightarrow 3 (5) 2 rightarrow 4 (10) 3 rightarrow 5 (3) 4 rightarrow 6 (8) 5 rightarrow 6 (1) For the first query (1 -> 6): - The path 1->3->5->6 has a total travel time of 2+3+1=6 and passes through intersection 3 which has a facility. Thus, the result for this query is 6. For the second query (4 -> 6): - The path 4->6 has a total travel time of 8 but it does not pass through any intersection with a facility. - Thus, the minimum path that involves a facility is still 4->6 on an 8 time road, as starting point 4 and endpoint 6 have no other quick connections involving other nodes. Thus the result for this query is 8.","solution":"import heapq def fastest_delivery_times(n, m, q, facilities, roads, queries): graph = [[] for _ in range(n + 1)] for x, y, d in roads: graph[x].append((y, d)) def dijkstra(source, target): pq = [(0, source, False)] dist = {i: float(\'inf\') for i in range(n + 1)} dist[source] = 0 while pq: time, node, has_facility = heapq.heappop(pq) if node == target: if has_facility or facilities[node - 1] == 1: return time for neighbor, d in graph[node]: new_dist = time + d if new_dist < dist[neighbor]: dist[neighbor] = new_dist heapq.heappush(pq, (new_dist, neighbor, has_facility or facilities[neighbor - 1] == 1)) return -1 results = [] for u, v in queries: result = dijkstra(u, v) results.append(result) return results"},{"question":"Alex loves to play with strings and patterns. He is particularly interested in palindromes. A palindrome is a string that reads the same backward as forward. Alex wants to play a game where he changes a given string into a palindrome by altering as few characters as possible. Your task is to help Alex by determining the minimum number of character changes required to make a given string a palindrome. You must implement a function `minChangesToPalindrome(s: str) -> int` that returns the minimum number of characters that need to be changed to make the string a palindrome. Input: - The function accepts a single argument: a string `s` of length n (1 ≤ n ≤ 10^5). Output: - The function should return an integer, representing the minimum number of changes required to make the string a palindrome. Example Input/Output: Example 1: Input: \\"race\\" Output: 2 (Explanation: Change \\"r\\" to \\"e\\" and \\"c\\" to \\"a\\" to make it \\"eace\\" or \\"racecar\\") Example 2: Input: \\"abcba\\" Output: 0 (Explanation: The given string is already a palindrome.) Example 3: Input: \\"abcd\\" Output: 2 (Explanation: Change \\"a\\" to \\"d\\" and \\"c\\" to \\"b\\" to make it \\"dbbd\\" or \\"dcdc\\") Note: You can assume the input string contains only lowercase English letters.","solution":"def minChangesToPalindrome(s: str) -> int: This function returns the minimum number of changes required to make the input string a palindrome. n = len(s) changes = 0 # Compare the characters from beginning and end towards the center for i in range(n // 2): if s[i] != s[n - i - 1]: changes += 1 return changes"},{"question":"Given a directed graph with n nodes and m edges, your task is to determine if there exists a path from a node u to a node v. -----Input----- The first line of input contains two integers n (1 leq n leq 10^5) and m (0 leq m leq 2 cdot 10^5), representing the number of nodes and edges in the graph, respectively. The next m lines each contain two integers a and b (1 leq a, b leq n), denoting a directed edge from node a to node b. The following line contains a single integer q (1 leq q leq 10^5) — the number of queries. Each of the next q lines contains two integers u and v (1 leq u, v leq n) — the nodes to check if there is a path from node u to node v. -----Output----- For each query, print \\"YES\\" if there is a path from u to v; otherwise, print \\"NO\\". -----Examples----- Input 5 5 1 2 2 3 3 4 4 5 1 5 4 1 5 1 3 2 5 5 1 Output YES YES YES NO -----Note----- In the provided example, for the first query (1 to 5), there is a direct path: 1 -> 2 -> 3 -> 4 -> 5. For the second query (1 to 3), the path 1 -> 2 -> 3 exists. For the third query (2 to 5), the path 2 -> 3 -> 4 -> 5 exists. For the last query (5 to 1), since this is a directed graph and no backward edges exist, the answer is NO.","solution":"from collections import defaultdict, deque def build_graph(n, edges): graph = defaultdict(list) for a, b in edges: graph[a].append(b) return graph def bfs(graph, start, end): visited = set() queue = deque([start]) while queue: node = queue.popleft() if node == end: return True if node not in visited: visited.add(node) for neighbor in graph[node]: if neighbor not in visited: queue.append(neighbor) return False def has_path(n, edges, queries): # Build the graph graph = build_graph(n, edges) # Answer each query using BFS results = [] for u, v in queries: if bfs(graph, u, v): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Jones is planning to build a new computer network for his company. The network will consist of several computers connected by direct communication links. Each pair of computers may have a direct link between them. Jones wants to ensure that there are no cycles in the network, as cycles could lead to redundant paths and potential communication inefficiencies. Jones has already planned the network topology and has a list of potential direct links between pairs of computers, each represented by a tuple (u, v) indicating a link between computer u and computer v. To verify that his topology won\'t create cycles, he needs to check if the graph formed by his list is a tree (i.e., it is connected and acyclic). Your task is to write a program that helps Jones determine if the planned network topology is a tree. Input The input consists of: - An integer N (2 ≤ N ≤ 10^5), the number of computers. - An integer M (1 ≤ M ≤ 10^5), the number of planned direct links between computers. - M lines, each containing two integers u and v (1 ≤ u, v ≤ N, u ≠ v), representing a direct link between computer u and computer v. Output Output \\"YES\\" if the network topology forms a tree, otherwise output \\"NO\\". Examples Input 4 3 1 2 2 3 3 4 Output YES Input 4 4 1 2 1 3 2 3 3 4 Output NO","solution":"def is_tree(N, M, links): if M != N - 1: return \\"NO\\" parent = list(range(N + 1)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): parent[find(x)] = find(y) for u, v in links: if find(u) == find(v): return \\"NO\\" union(u, v) return \\"YES\\""},{"question":"Emily loves playing with numbers. She recently came up with a fascinating game involving pairs of integers. Given an integer array, Emily\'s task is to find two non-zero distinct integers from the array such that their absolute difference is maximum. To help Emily, write a program to determine these two integers. ---Input--- The first line contains a single integer t (1 leq t leq 100) — the number of test cases. Each test case consists of two lines: - The first line contains an integer n (2 leq n leq 1000) — the number of elements in the array. - The second line contains n integers a_1, a_2, ldots, a_n (-10^9 leq a_i leq 10^9, a_i neq 0 for all i) — the elements of the array. ---Output--- For each test case, output two distinct integers from the array such that their absolute difference is maximum. If there are multiple valid answers, you may output any. ---Examples--- Input 3 5 1 -3 4 8 -6 3 100 200 -300 4 3 9 -9 7 Output -6 8 -300 200 -9 9 ---Note--- In the first test case, the pair with the maximum absolute difference is (-6, 8) where the absolute difference is |8 - (-6)| = 14.","solution":"def max_abs_difference_pairs(t, test_cases): results = [] for case in test_cases: n, array = case max_value = max(array) min_value = min(array) results.append((min_value, max_value)) return results # Example usage: # t = 3 # test_cases = [ # (5, [1, -3, 4, 8, -6]), # (3, [100, 200, -300]), # (4, [3, 9, -9, 7]) # ] # print(max_abs_difference_pairs(t, test_cases)) # Output: [(-6, 8), (-300, 200), (-9, 9)]"},{"question":"PROBLEM SPECIFICATION: You are given a string consisting of only lowercase English letters and you have to convert this string into a 2D array with \'n\' rows. The characters of the string are to be filled into the 2D array row-by-row from left to right. If the string\'s length is not a multiple of \'n\', append \'.\' (dot) characters at the end of the string to make its length a multiple of \'n\'. Finally, print the 2D array row by row. INPUT SPECIFICATION: You will be given a single integer \'t\' indicating the number of test cases. Each test case will contain an integer \'n\' followed by a string of lowercase English letters. OUTPUT SPECIFICATION: For each test case, print the 2D array row by row. CONSTRAINTS: 1 <= t <= 100 1 <= n <= 100 1 <= length of string <= 1000 SAMPLE INPUT 2 3 hello 4 example SAMPLE OUTPUT hel lo. exam ple. Explanation In the first test case, the string \\"hello\\" is converted into a 2D array with 3 rows, resulting in: hel lo. In the second test case, the string \\"example\\" is converted into a 2D array with 4 rows, resulting in: exam ple.","solution":"def convert_to_2d_array(t, test_cases): results = [] for i in range(t): n, s = test_cases[i] length = len(s) remainder = n - (length % n) if length % n != 0 else 0 s += \'.\' * remainder rows = [s[j:j+n] for j in range(0, len(s), n)] results.append(rows) return results"},{"question":"Bob has a peculiar way of determining the mood of his team through a sequence of coded signals. He records the positive and negative signals as operations in a sequence. Each signal is either \'+\' or \'-\', where \'+\' adds 1 to the current team mood score and \'-\' subtracts 1 from the current team mood score. Initially, the team\'s mood score is zero. Bob now wants to find the maximum mood score at any point during the sequence. -----Input----- The first line contains a single integer T - the total number of test cases. T test cases follow. For each test case: - The first line contains an integer N - the length of the sequence. - The second line contains a string of length N consisting of \'+\' and \'-\' characters. -----Output----- For each test case, print the maximum team mood score on a new line. -----Constraints----- Subtask 1: 10 points 1 ≤ T ≤ 10 1 ≤ N ≤ 20 Subtask 2: 40 points 1 ≤ T ≤ 5 1 ≤ N ≤ 50 Subtask 3: 50 points 1 ≤ T ≤ 5 1 ≤ N ≤ 100 -----Example----- Input 2 5 ++-+- 6 +-+++- Output 2 3 Explanation: In the first case, the sequence is ++-+-. The mood score changes as follows: 1, 2, 1, 2, 1. The maximum mood score is 2. In the second case, the sequence is +-+++-. The mood score changes as follows: 1, 0, 1, 2, 3, 2. The maximum mood score is 3.","solution":"def max_mood_score(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] sequence = test_cases[i][1] current_mood = 0 max_mood = 0 for char in sequence: if char == \'+\': current_mood += 1 else: current_mood -= 1 if current_mood > max_mood: max_mood = current_mood results.append(max_mood) return results"},{"question":"A sequence of integers is called **good** if, for any integer i (where i is not necessarily in the sequence), the number of occurrences of i+1 in the sequence is equal to or greater than the number of occurrences of i. For example, the sequences [1,2,2,3] and [7,8,7,8,9] are good sequences, but the sequences [1,2,4] and [2,2,1,3] are not good sequences. Given an integer n and an integer k, your task is to find a good sequence of length n that contains integers no greater than k. -----Input----- The first line contains two integers n and k (1 le n le 100 and 1 le k le 100). -----Output----- Output a single line containing n integers, which form a good sequence containing integers no greater than k. If there are multiple valid answers, output any of them. -----Example----- Input 5 3 Output 1 2 2 3 3 -----Note----- In the given example, the sequence is good because: - The number of occurrences of 2 is equal to the number of occurrences of 1. - The number of occurrences of 3 is equal to the number of occurrences of 2.","solution":"def generate_good_sequence(n, k): Generate a good sequence of length n containing integers no greater than k. sequence = [] for i in range(n): sequence.append(i % k + 1) return sequence"},{"question":"A grid of size NxM is given where some cells are blocked and some cells are empty. You are given the starting and ending coordinates. Determine the shortest path from the start to the end using Manhattan distance (only moving up, down, left, or right), avoiding the blocked cells. If there\'s no possible path, return -1. # Input - The first line contains two integers N and M (1 leq N, M leq 100), representing the number of rows and columns in the grid. - The next N lines contain M integers each, which can be either 0 (indicating an empty cell) or 1 (indicating a blocked cell). - The following line contains two integers x_s and y_s (0 leq x_s < N, 0 leq y_s < M), representing the starting coordinates. - The last line contains two integers x_e and y_e (0 leq x_e < N, 0 leq y_e < M), representing the ending coordinates. # Output - Output the length of the shortest path from the starting to the ending coordinates. If no path exists, output -1. # Example Input ``` 4 4 0 0 1 0 1 0 1 0 0 0 0 0 0 1 1 0 0 0 3 3 ``` Output ``` 6 ``` Input ``` 3 3 0 0 0 0 1 0 0 0 0 0 0 2 2 ``` Output ``` 4 ``` Input ``` 3 3 0 1 0 1 1 0 0 0 0 0 0 2 2 ``` Output ``` -1 ```","solution":"from collections import deque def shortest_path_in_grid(N, M, grid, start, end): Finds the shortest path from start to end in a grid avoiding blocked cells using BFS. Parameters: N (int): Number of rows M (int): Number of columns grid (list of list of int): The grid itself, a matrix of 0s and 1s start (tuple of int): Starting coordinates (x_s, y_s) end (tuple of int): Ending coordinates (x_e, y_e) Returns: int: Length of the shortest path or -1 if no path exists. directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def is_valid(x, y): return 0 <= x < N and 0 <= y < M and grid[x][y] == 0 queue = deque([(start[0], start[1], 0)]) # (x, y, distance) visited = set([(start[0], start[1])]) while queue: x, y, dist = queue.popleft() if (x, y) == end: return dist for direction in directions: nx, ny = x + direction[0], y + direction[1] if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"Alice loves palindromic numbers. A palindromic number is a positive integer that remains the same when its digits are reversed. Examples of palindromic numbers are 121, 484, 545, etc. Alice is curious to know the sum of the minimum palindromic number which is greater than or equal to each integer in a given range [a, b]. Let min_pal(x) be the minimum palindromic number that is greater than or equal to x. Alice wants to know the value of the expression min_pal(a) + min_pal(a + 1) + ... + min_pal(b). Input The function should accept a single line containing two integers a and b (1 ≤ a ≤ b ≤ 109). Output Output a single number – the sum min_pal(a) + min_pal(a + 1) + ... + min_pal(b). Examples Input 13 20 Output 145 Input 123 127 Output 505 Note In the first example: min_pal(13) + min_pal(14) + min_pal(15) + min_pal(16) + min_pal(17) + min_pal(18) + min_pal(19) + min_pal(20) = 22 + 22 + 22 + 22 + 22 + 22 + 22 + 22 = 176 In the second example: min_pal(123) + min_pal(124) + min_pal(125) + min_pal(126) + min_pal(127) = 131 + 131 + 131 + 131 + 131 = 655","solution":"def is_palindrome(n): return str(n) == str(n)[::-1] def min_pal(x): while not is_palindrome(x): x += 1 return x def sum_min_palindromes(a, b): total_sum = 0 for num in range(a, b+1): total_sum += min_pal(num) return total_sum # Example usage: # a, b = map(int, input().split()) # print(sum_min_palindromes(a, b))"},{"question":"**Background** In mathematics, a **palindromic number** is a number that remains the same when its digits are reversed. For example, 121 is a palindromic number, but 123 is not. **Task** Your task is to write a function that checks if a given number is a palindromic number or not. The function should take an integer as input and return `True` if the number is palindromic and `False` otherwise. ``` isPalindrome(121) -> True isPalindrome(123) -> False isPalindrome(12321) -> True isPalindrome(-121) -> False ``` **Hints** - Negative numbers are not considered palindromic. - You can convert the number to a string to easily check if it reads the same forwards and backwards. **Example Implementation** Here is an example of how you might start implementing this: ```python def isPalindrome(num): # Convert the integer to string num_str = str(num) # Check if the string is equal to its reverse return num_str == num_str[::-1] ``` **Resources** For more information on palindromic numbers, you can check out: https://en.wikipedia.org/wiki/Palindromic_number","solution":"def isPalindrome(num): Checks if the given integer is a palindromic number. Returns True if it is, and False otherwise. if num < 0: return False num_str = str(num) return num_str == num_str[::-1]"},{"question":"# Problem Statement Alex is creating an art piece using n non-negative integers, `a_1, a_2, ..., a_n`. These integers represent different shades and are arranged in a non-decreasing order. Alex merges these integers into one value by calculating the Greatest Common Divisor (GCD) of the entire array. However, Alex wants the GCD of the array to be exactly 1. You need to find the minimum number of integers that must be added to the array so that the GCD of the entire array becomes 1. Each integer you add can be any positive integer and can be added anywhere in the array. # Input The first line contains an integer, `n` (1 ≤ n ≤ 10^5). The second line contains `n` space-separated integers `a_1, a_2, ..., a_n` (1 ≤ a_i ≤ 10^9). It is guaranteed that `a_1 ≤ a_2 ≤ ... ≤ a_n`. # Output Print a single integer — the minimum number of integers that need to be added to the array so that the GCD of the new array becomes 1. # Examples Input ``` 3 2 4 8 ``` Output ``` 1 ``` Input ``` 2 3 5 ``` Output ``` 0 ``` # Note In the first example, adding the integer `1` to the array makes the GCD equal to 1, because the GCD of any number and 1 is always 1. In the second example, the GCD of the array is already 1, so no additional integers need to be added.","solution":"from math import gcd from functools import reduce def minimum_numbers_to_add_for_gcd_one(n, arr): Given a list of n non-negative integers in non-decreasing order, this function returns the minimum number of integers that must be added to the array so that the GCD of the array becomes 1. def array_gcd(array): return reduce(gcd, array) current_gcd = array_gcd(arr) if current_gcd == 1: return 0 else: return 1"},{"question":"In a small village, there is a unique market where every shop sells items of the same price. However, because the villagers often negotiate, they only buy items if they can use the exact amount of money they have. Given an array of item prices in the market and a specific amount of money a villager has, determine the number of distinct ways the villager can spend the exact amount of money. Note: Each price in the array can be used multiple times to achieve the target amount. Example 1: Input: N = 3 Prices[] = {1, 2, 3} Amount = 4 Output: 4 Explanation: The four ways to spend exactly 4 units of money are: 1+1+1+1, 1+1+2, 1+3, 2+2. Example 2: Input: N = 2 Prices[] = {2, 3} Amount = 6 Output: 2 Explanation: The two ways to spend exactly 6 units of money are: 2+2+2, 3+3. Your Task: You don\'t need to read input or print anything. Your task is to complete the function CountWays() which takes the array Prices[] and its size N, along with the target amount of money as inputs and returns the number of distinct ways to spend the exact amount of money. Expected Time Complexity: O(N * Amount) Expected Auxiliary Space: O(Amount) Constraints: 1 ≤ N ≤ 1000 1 ≤ Price[i], Amount ≤ 10000","solution":"def CountWays(N, Prices, Amount): Determines the number of distinct ways to spend exactly the given amount using the provided prices. :param N: int - number of different prices :param Prices: list of int - array of item prices :param Amount: int - exact amount of money to be spent :return: int - number of distinct ways to spend the exact amount # Initialize dp array where dp[i] means number of ways to make sum i dp = [0] * (Amount + 1) dp[0] = 1 # One way to make sum 0, by choosing none of the items # For each price, update the dp array for price in Prices: for j in range(price, Amount + 1): dp[j] += dp[j - price] return dp[Amount]"},{"question":"A city has several districts, each with a number of residential buildings. The city hall wants to distribute a new set of public services (like libraries, parks, etc.) among the districts, such that each district receives at least one service. However, due to budget constraints, only a limited number of new services can be built. Your task is to decide how to distribute the available services such that the maximum number of districts receives exactly one service, and the remaining services, if any, are distributed among the other districts. The city has D districts labeled from 1 to D. Each district i has Bi residential buildings. The number of new services that can be built is S (S ≤ D). Write a program that: 1. Takes the values D (number of districts), B (list of residential buildings in each district), S (number of services). 2. Outputs the number of districts that receive exactly one service and the arrangement of services in a way that maximizes this number. Input The input is structured as follows: The first line contains an integer D (1 ≤ D ≤ 1000), the number of districts. The second line contains D integers B1, B2, ..., BD where 1 ≤ Bi ≤ 100, representing the number of residential buildings in each district. The third line contains an integer S (1 ≤ S ≤ 1000), the number of services. Output The output should: 1. Print the maximum number of districts that receive exactly one service. 2. Print D integers representing the number of services assigned to each district in the same order as the input. If a district receives no services, print 0 for that district. Sample Input 5 10 20 30 40 50 7 Sample Output 5 1 1 1 1 1 Explanation: Since the number of services S (7) is greater than or equal to the number of districts D (5), each district can get exactly one service, which leaves us with 2 unused services. However, the priority is to ensure that each district receives at least one service. After each district gets one service, the output arrangement becomes 1 1 1 1 1 indicating each district got one service. Example Input 6 8 12 3 7 15 5 4 Example Output 4 1 1 1 1 0 0 Explanation: Here, since the number of services S (4) is less than the number of districts D (6), we can only provide exactly one service to 4 out of the 6 districts. Therefore, 4 districts get one service each, and the remaining 2 districts get no services. The selection of districts can be based on any criteria as long as the maximum number of districts receive one service, so the count remains 4.","solution":"def distribute_services(D, B, S): Distributes the available services among the districts such that the maximum number of districts receive exactly one service. Parameters: D (int): Number of districts. B (list): List of integers representing the number of residential buildings in each district. S (int): Number of services available. Returns: tuple: A tuple containing: - An integer representing the maximum number of districts that receive exactly one service. - A list of integers representing the number of services assigned to each district. services = [0] * D max_one_service = min(D, S) for i in range(max_one_service): services[i] = 1 return max_one_service, services"},{"question":"A new e-commerce website tracks the prices of its products over several days to identify trends and patterns. For each product, they have recorded the price for each of the past N days. Your task is to help identify the maximum price change that occurred within any three consecutive days for a given product. The price change is calculated as the absolute difference between the prices in two consecutive days. For example, suppose the recorded prices for a product over 5 days are 5, 3, 8, 10, 7. The maximum price change within any three consecutive days is 7, which occurs between days 2 and 3 (|3 - 8| = 5) and days 3 and 4 (|8 - 10| = 2), giving a total of 5 + 2 = 7. -----Input----- The first line contains an integer N (3 le N le 100) denoting the number of days for which prices are provided. The second line contains N integers where the i^textrm {th} integer represents the recorded price on the i^textrm {th} day (1 le text{price} le 10000). -----Output----- The output contains an integer denoting the maximum price change within any three consecutive days. -----Examples----- Sample Input 1: 5 5 3 8 10 7 Sample Output 1: 7 Sample Input 2: 4 1 10 100 1000 Sample Output 2: 990","solution":"def max_price_change(prices): Calculate the maximum price change within any three consecutive days. :param prices: List of integers representing prices over days. :return: Integer representing the maximum price change. max_change = 0 for i in range(len(prices) - 2): change_first_pair = abs(prices[i] - prices[i + 1]) change_second_pair = abs(prices[i + 1] - prices[i + 2]) total_change = change_first_pair + change_second_pair max_change = max(max_change, total_change) return max_change"},{"question":"**Problem description:** Alex is organizing a sports meet and needs to track participation of athletes. Each athlete has a unique ID, and they can participate in multiple events. Alex wants to know the number of unique athletes who participated in at least one event. **Input** - The first line of the input contains an integer M, the number of events. - The next M lines contain space-separated strings representing the IDs of athletes participating in each event. **Output** - Print the total number of unique athletes who participated in at least one event. **Example** Input: 4 A1 B2 C3 A1 C3 D4 B2 B2 B2 E5 Output: 5 **Explanation** In this case, there are 4 events with the following participants: - Event 1: A1, B2, C3 - Event 2: A1, C3, D4 - Event 3: B2 - Event 4: E5 Unique athletes are A1, B2, C3, D4, and E5, making a total of 5 unique athletes.","solution":"def count_unique_athletes(M, events): This function returns the number of unique athletes. Parameters: M (int): The number of events. events (list of lists): A list of M lists, each containing athlete IDs. Returns: int: The number of unique athletes. unique_athletes = set() for event in events: for athlete in event: unique_athletes.add(athlete) return len(unique_athletes)"},{"question":"Given an integer n, find the maximum product of integers that sum to n. Each integer must be greater than or equal to 1. If there are multiple partitions that result in the maximum product, return the smallest number of integers. Input: The first line contains T, the number of test cases. T lines follow, each containing an integer n. Output: For each test case, output one line, containing the maximum product and the smallest number of integers that sum up to n. Constraints: 1 ≤ T ≤ 10^4 2 ≤ n ≤ 10^6 SAMPLE INPUT 2 10 5 SAMPLE OUTPUT 36 3 6 2 Explanation: For n=10, the partition is 3 + 3 + 4 with product 3*3*4=36. The number of integers is 3. For n=5, the partition is 2 + 3 with product 2*3=6. The number of integers is 2.","solution":"def max_product_and_min_partition(n): if n <= 3: return (n - 1, 2) result_product = 1 count = 0 while n > 4: n -= 3 result_product *= 3 count += 1 result_product *= n count += 1 # At least one part is left return (result_product, count) def solve(test_cases): results = [] for n in test_cases: max_product, min_partition = max_product_and_min_partition(n) results.append(f\\"{max_product} {min_partition}\\") return results"},{"question":"You are provided with a string representing a mathematical expression and your task is to evaluate and return the result of this expression. The expression can contain positive integers, the operators + (addition), - (subtraction), * (multiplication), / (integer division), and parentheses to indicate precedence of operations. Input Format A single line containing a valid mathematical expression. The length of the input string will be at most 1000 characters. Constraints The expression will be a non-empty string containing only digits (0-9), operators (+, -, *, /) and parentheses. The given expression is guaranteed to be valid according to standard mathematical rules. Division by zero will not occur in the given expression. Output Format Print a single integer, the result of evaluating the expression. Sample Input: (2+3)*(4-1) Sample Output: 15 Explanation The expression provided is evaluated as follows: First the operation inside parentheses (2+3) = 5 Then the operation inside the second set of parentheses (4-1) = 3 Multiplying the results of the two parentheses 5 * 3 = 15 Thus, the result 15 is printed as the output.","solution":"def evaluate_expression(expression): Evaluate the given mathematical expression and return the result. Supports +, -, *, / operators and parentheses. def helper(expression, index): stack = [] num = 0 operator = \'+\' while index < len(expression): char = expression[index] if char.isdigit(): num = num * 10 + int(char) if char == \'(\': num, index = helper(expression, index + 1) if char in \'+-*/)\' or index == len(expression) - 1: if operator == \'+\': stack.append(num) elif operator == \'-\': stack.append(-num) elif operator == \'*\': stack.append(stack.pop() * num) elif operator == \'/\': stack.append(int(stack.pop() / num)) if char == \')\': return sum(stack), index operator = char num = 0 index += 1 return sum(stack), index result, _ = helper(expression, 0) return result"},{"question":"You are given an array of integers. Your task is to sort the array such that the sum of the absolute differences between consecutive elements is minimized. If there are multiple arrays that produce the same minimal sum of absolute differences, return the lexicographically smallest array. For example, given array [1, 5, 3], the possible sorted arrays might be [1, 3, 5] or [5, 3, 1]. The sum of absolute differences for both is 4, but [1, 3, 5] is lexicographically smaller. Input The first line contains the number of test cases T (1 ≤ T ≤ 1000). Each of the next T lines contains an integer n (1 ≤ n ≤ 1000) followed by n integers representing the array. Output Output T lines, one corresponding to each test case, containing the lexicographically smallest sorted array that minimizes the sum of absolute differences between consecutive elements. Example Input: 2 3 1 5 3 4 8 3 6 1 Output: 1 3 5 1 3 6 8","solution":"def minimize_absolute_differences(test_cases): results = [] for case in test_cases: array = case[1:] sorted_array = sorted(array) results.append(sorted_array) return results def format_output(results): return [\' \'.join(map(str, result)) for result in results] def solve_problem(input_data): lines = input_data.strip().split(\\"n\\") T = int(lines[0]) test_cases = [list(map(int, line.split())) for line in lines[1:T+1]] sorted_arrays = minimize_absolute_differences(test_cases) return \\"n\\".join(format_output(sorted_arrays))"},{"question":"Implement a class `WordFilter` that supports the following methods: - `WordFilter(words: List[str])` initializes the object with the `words` containing a list of lowercase words. - `f(prefix: str, suffix: str) -> int` returns the index of the word in the initialized words that has the given `prefix` and `suffix`. If there is more than one valid index, return the largest of them. If there is no such word in the list, return -1. Your solution should work efficiently even for larger lists of words. Example: ``` Input: WordFilter([\\"apple\\", \\"banana\\", \\"apricot\\"]) Output: Null Input: f(\\"ap\\", \\"e\\") Output: 0 Input: f(\\"ba\\", \\"a\\") Output: 1 Input: f(\\"ap\\", \\"ot\\") Output: 2 Input: f(\\"ap\\", \\"p\\") Output: -1 ``` Constraints: - 1 <= words.length <= 15000 - 1 <= words[i].length <= 10 - 1 <= prefix.length, suffix.length <= 10 - words[i] and all prefixes and suffixes are non-empty and contain only lowercase letters a-z.","solution":"from typing import List class WordFilter: def __init__(self, words: List[str]): self.word_map = {} for i, word in enumerate(words): self.word_map[word] = i def f(self, prefix: str, suffix: str) -> int: max_index = -1 for word in self.word_map: if word.startswith(prefix) and word.endswith(suffix): if self.word_map[word] > max_index: max_index = self.word_map[word] return max_index"},{"question":"You are given a string s consisting of only lowercase English letters. Your task is to determine the length of the longest substring of s that consists of characters which appear in the same order in the English alphabet as they appear in the string s. Each character of s can be used at most once in the substring. For example, if s = \\"ababc\\", the possible substrings in alphabetical order are: \\"ab\\", \\"abc\\", \\"abc\\", and \\"a\\". Therefore, the longest such substring is \\"abc\\" with a length of 3. If s = \\"dabc\\", the possible substrings in alphabetical order are: \\"d\\", \\"a\\", \\"ab\\", \\"abc\\", \\"b\\", and \\"bc\\". Therefore, the longest such substring is \\"abc\\" with a length of 3. -----Input----- The first line contains a single integer t (1 le t le 10^4) — the number of test cases. Each of the next t lines contains a single string s (1 le lvert s rvert le 10^5) consisting of only lowercase English letters. The total length of the strings over all test cases does not exceed 2 cdot 10^5. -----Output----- For each test case, print a single integer — the length of the longest substring of s that consists of characters in alphabetical order. -----Examples----- Input 2 ababc dabc Output 3 3 -----Note----- In the first test case, as explained in the task description, the longest substring in alphabetical order is \\"abc\\" with length 3. In the second test case, similarly, the longest substring in alphabetical order is \\"abc\\" with length 3.","solution":"def longest_alphabetical_substring_length(s): max_len = 1 current_len = 1 for i in range(1, len(s)): if s[i-1] <= s[i]: current_len += 1 max_len = max(max_len, current_len) else: current_len = 1 return max_len def process_test_cases(t, test_cases): results = [] for i in range(t): results.append(longest_alphabetical_substring_length(test_cases[i])) return results"},{"question":"Yara is organizing a workshop where participants are given notebooks. Each participant must receive a notebook with at least the number of pages they request. You have K notebooks, each with P[i] pages, and N participants with their requested pages Q[j]. You need to find if it is possible to allocate a notebook to each participant such that each one gets a notebook with at least the number of pages they require. Input: The first line contains two space-separated integers K and N. The second line contains K integers, the number of pages in each notebook. The third line contains N integers, the number of pages requested by each participant. Output: Print \\"Yes\\" if it\'s possible to allocate the notebooks as required, otherwise print \\"No\\". Constraints: 1 ≤ K, N ≤ 100 1 ≤ P[i], Q[j] ≤ 1000 SAMPLE INPUT 5 4 300 500 200 400 600 250 450 100 500 SAMPLE OUTPUT Yes Explanation: You can allocate: - The notebook with 300 pages to the participant requesting 250 pages. - The notebook with 500 pages to the participant requesting 450 pages. - The notebook with 200 pages to the participant requesting 100 pages. - The notebook with 600 pages to the participant requesting 500 pages. All participants\' requests are satisfied and hence the output is \\"Yes\\".","solution":"def can_allocate_notebooks(K, N, P, Q): Determines if it\'s possible to allocate each participant a notebook with at least the number of pages they request. :param K: Number of notebooks. :param N: Number of participants. :param P: List of integers representing the number of pages in each notebook. :param Q: List of integers representing the number of pages requested by each participant. :return: \\"Yes\\" if it\'s possible to allocate notebooks as required, otherwise \\"No\\". P.sort() Q.sort() if K < N: return \\"No\\" for i in range(N): if P[-(i + 1)] < Q[-(i + 1)]: return \\"No\\" return \\"Yes\\""},{"question":"A logistics company needs to efficiently transport packages from its main warehouse to multiple delivery destinations spread across a city. To optimize their delivery routes, they use drones that can carry a limited number of packages per trip. Given the total number of packages that need to be delivered and the maximum capacity of a drone, determine the minimum number of drone trips required to deliver all the packages. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of two-space separated integers on a single line, N and C — the total number of packages to be delivered and the capacity of a drone (i.e., the number of packages it can carry in one trip). ------ Output Format ------ For each test case, output on a new line the minimum number of drone trips required to deliver all the packages. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^{6} 1 ≤ C ≤ 10^{6} ----- Sample Input 1 ------ 4 10 3 25 5 50 50 7 1 ----- Sample Output 1 ------ 4 5 1 7 ----- Explanation 1 ------ Test case 1: The drone can carry 3 packages per trip. Therefore, the minimum number of trips required to deliver 10 packages is 4 (i.e., lceil frac{10}{3} rceil). Test case 2: The drone can carry 5 packages per trip. Therefore, the minimum number of trips required to deliver 25 packages is 5 (i.e., lceil frac{25}{5} rceil). Test case 3: The drone can carry all 50 packages in one trip as its capacity matches the number of packages. Test case 4: The drone can only carry 1 package per trip. Therefore, the minimum number of trips required to deliver 7 packages is 7.","solution":"import math def minimum_drone_trips(T, test_cases): Determines the minimum number of drone trips required for each test case. Parameters: T : int The number of test cases. test_cases : list of tuples Each tuple contains two integers, N and C, where N is the total number of packages and C is the drone capacity. Returns: result : list of int A list containing the minimum number of trips for each test case. result = [] for i in range(T): N, C = test_cases[i] result.append(math.ceil(N / C)) return result"},{"question":"Alice loves programming contests and has recently been solving many string-related problems. One day, she stumbled upon an interesting challenge. In a given string, she needs to find the length of the longest substring made up of only distinct characters. Alice enjoyed this problem so much that she decided to include it in her collection for future practice. -----Input:----- The first line of input contains a single integer T, the number of test cases. Each of the following T lines contains a single string consisting of English lowercase letters. -----Output:----- For each test case, print a single integer - the length of the longest substring with all distinct characters. -----Constraints----- - 1 leq T leq 100 - 1 leq |S| leq 10^5 -----Sample Input:----- 3 abcabcbb bbbbb pwwkew -----Sample Output:----- 3 1 3 -----EXPLANATION:----- In the first test case, the longest substring with all distinct characters is \\"abc\\", which has a length of 3. In the second test case, the longest substring with all distinct characters is \\"b\\", which has a length of 1. In the third test case, the longest substring with all distinct characters is \\"wke\\", which has a length of 3.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring with all distinct characters. char_index = {} max_length = start = 0 for i, char in enumerate(s): if char in char_index and char_index[char] >= start: start = char_index[char] + 1 char_index[char] = i max_length = max(max_length, i - start + 1) return max_length def process_test_cases(T, test_cases): Processes T test cases and returns the results for each one. results = [] for i in range(T): results.append(length_of_longest_substring(test_cases[i])) return results"},{"question":"Write a function `findSubStrings` that takes a string `s` and an integer `k`, and returns a list of all unique substrings of length `k` in `s`, sorted in lexicographical order. Example: ```python findSubStrings(\\"abcabc\\", 3) #=> [\\"abc\\", \\"bca\\", \\"cab\\"] findSubStrings(\\"aaaaa\\", 2) #=> [\\"aa\\"] findSubStrings(\\"abcdefg\\", 1) #=> [\\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"e\\", \\"f\\", \\"g\\"] findSubStrings(\\"hello\\", 6) #=> [] ``` Constraints: - If `k` is greater than the length of `s`, return an empty list. - `s` consists only of lowercase Latin letters.","solution":"def findSubStrings(s, k): Returns a list of all unique substrings of length k in s, sorted in lexicographical order. Parameters: - s (str): The input string. - k (int): The length of the substrings. Returns: - List[str]: A list of unique substrings of length k in s, sorted in lexicographical order. if k > len(s) or k <= 0: return [] substrings = {s[i:i+k] for i in range(len(s) - k + 1)} return sorted(substrings)"},{"question":"Implement a function that receives a string representing an arithmetic expression containing integers and the following operators: +, -, *, and /. The expression will not contain spaces. Your task is to compute the value of the given expression. You need to follow the standard operator precedence and associativity rules for arithmetic operations. Constraints * The length of the expression is between 1 and 1000 characters. * The integers in the expression are non-negative and fit in a 32-bit signed integer. * Division is integer division, which means it truncates towards zero. * The expression is always valid and does not contain any leading zeros. Input A string representing the arithmetic expression. Output An integer, which is the result of evaluating the expression. Examples Input \\"2+3*4\\" Output 14 Input \\"10-2*3\\" Output 4 Input \\"3+2*2\\" Output 7 Input \\"10/2-3\\" Output 2 Input \\"14/3*2\\" Output 8","solution":"def evaluate_expression(expression): Evaluates an arithmetic expression containing +, -, *, and / operators following the standard operator precedence and associativity rules. def apply_ops(ops, values): right = values.pop() left = values.pop() op = ops.pop() if op == \'+\': values.append(left + right) elif op == \'-\': values.append(left - right) elif op == \'*\': values.append(left * right) elif op == \'/\': values.append(int(left / right)) # integer division truncates towards zero precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} ops, values, i = [], [], 0 while i < len(expression): if expression[i].isdigit(): num = 0 while i < len(expression) and expression[i].isdigit(): num = num * 10 + int(expression[i]) i += 1 values.append(num) continue while ops and precedence[ops[-1]] >= precedence[expression[i]]: apply_ops(ops, values) ops.append(expression[i]) i += 1 while ops: apply_ops(ops, values) return values[0]"},{"question":"Given a string, output the longest substring that contains no repeated characters. Input The input will be a single line containing the string s (1 ≤ |s| ≤ 100), where |s| denotes the length of the string. The string contains only printable ASCII characters. Output Output the longest substring of s that contains no repeated characters. If there are multiple substrings of the same length, output the one that appears first. Examples Input abcabcbb Output abc Input bbbbb Output b Input pwwkew Output wke Note In the first example, the answer is \\"abc\\", with the length of 3. In the second example, the answer is \\"b\\", with the length of 1. In the third example, the answer is \\"wke\\", with the length of 3. Note that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring.","solution":"def longest_non_repeating_substring(s): Returns the longest substring of s that contains no repeated characters. If there are multiple substrings of the same length, the one that appears first is returned. start = 0 max_length = 0 max_substring = \\"\\" used_chars = {} for end, char in enumerate(s): if char in used_chars and used_chars[char] >= start: start = used_chars[char] + 1 used_chars[char] = end current_length = end - start + 1 if current_length > max_length: max_length = current_length max_substring = s[start:end + 1] return max_substring"},{"question":"Given a string, return a new string where each character in the original string is doubled. Each pair of characters should appear in the same order as in the original string. For example: ``` \\"Hello\\" -> \\"HHeelllloo\\" \\"Good job!\\" -> \\"GGoooodd jjoobb!!\\" \\"\\" -> \\"\\" ```","solution":"def double_characters(s): Given a string, returns a new string where each character in the original string is doubled. Arguments: s -- the input string Returns: A new string where each character in the original string is doubled return \'\'.join([char * 2 for char in s])"},{"question":"You are given a river represented by a 2D binary grid where \'1\' represents land and \'0\' represents water. You need to find the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are surrounded by water. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two integers m and n, which are the number of rows and columns respectively. The next m lines each contain n integers (0 or 1) representing the grid. -----Output----- For each test case, output a new line with an integer corresponding to the number of islands in that test case. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ m, n ≤ 1000 - 0 ≤ grid[i][j] ≤ 1 -----Example----- Input 2 4 5 1 1 0 0 0 1 1 0 0 1 0 0 0 1 1 0 0 0 1 0 4 4 1 1 1 0 1 1 0 0 1 0 0 1 0 0 1 1 Output 2 2 -----Explanation----- Example 1. The first grid has two islands. One formed by the first two rows (1 1), and the other in the last two columns (1 1). Example 2. The second grid has two islands. One formed by the first and second rows, and the other formed by the bottom right corner.","solution":"def num_islands(grid): def dfs(x, y): if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]) or grid[x][y] == \'0\': return grid[x][y] = \'0\' # Mark the land as visited dfs(x - 1, y) dfs(x + 1, y) dfs(x, y - 1) dfs(x, y + 1) islands_count = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == \'1\': islands_count += 1 dfs(i, j) return islands_count def number_of_islands(T, test_cases): result = [] for case in test_cases: m, n = case[0] grid = [list(map(str, row)) for row in case[1]] result.append(num_islands(grid)) return result # Input for the number of test cases def process_input(input_list): T = int(input_list[0]) idx = 1 test_cases = [] for _ in range(T): m, n = map(int, input_list[idx].split()) grid = [] for i in range(1, m + 1): grid.append(list(map(int, input_list[idx + i].split()))) test_cases.append(((m, n), grid)) idx += m + 1 return number_of_islands(T, test_cases)"},{"question":"Given an integer N, you need to construct a matrix NxN where each element of the matrix follows the below rules: 1. The sum of elements in each row should be equal. 2. The sum of elements in each column should be equal. 3. Each element in the matrix should be an integer greater than or equal to 0. If there are multiple solutions, you can output any one of them. If it\'s not possible to generate such a matrix, return -1. # Input Format The first line contains the integer T, the number of test cases. Each of the next T lines contains a single integer N. # Output Format For each test case, print the NxN matrix or -1 if no such matrix can be constructed. # Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 50 # Sample Input ``` 3 2 3 4 ``` # Sample Output ``` 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ``` # Explanation For N=2, the simplest matrix is [[1, 1], [1, 1]] as all rows and columns sum up to 2. For N=3, a valid matrix can be [[1, 1, 1], [1, 1, 1], [1, 1, 1]] with all rows and columns summing up to 3. For N=4, one possible solution is [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]] where every row and column sum is 4.","solution":"def construct_matrix(N): if N <= 0: return -1 matrix = [[1]*N for _ in range(N)] return matrix def process_input(T, cases): results = [] for case in cases: results.append(construct_matrix(case)) return results"},{"question":"You are given an array of N integers and Q queries. Each query contains two integers L and R (1 ≤ L ≤ R ≤ N). For each query, you need to find the sum of elements in the subarray from index L to R (both inclusive). -----Constraints----- - ( N ) is an integer between 1 and 200,000 (inclusive). - ( Q ) is an integer between 1 and 100,000 (inclusive). - Each element in the array is an integer which can be any value that fits in a 32-bit integer. -----Input----- The input will be given from the standard input in the following format: ``` N Q A_1 A_2 ... A_N L_1 R_1 L_2 R_2 : L_Q R_Q ``` - The first line contains two integers ( N ) (the number of elements in the array) and ( Q ) (the number of queries). - The second line contains ( N ) integers ( A_1, A_2, ..., A_N ) (the elements of the array). - Each of the next ( Q ) lines contains two integers ( L_i ) and ( R_i ) (the boundaries of the subarray for the i-th query). -----Output----- For each query, print the sum of elements in the subarray from index ( L_i ) to ( R_i ) (both inclusive). -----Sample Input----- 5 3 1 2 3 4 5 1 3 2 4 1 5 -----Sample Output----- 6 9 15","solution":"def subarray_sums(N, Q, A, queries): For each query, find the sum of elements in the subarray from index L to R (1-based indexing). Args: - N (int): Number of elements in the array. - Q (int): Number of queries. - A (list of int): The array of integers. - queries (list of tuples): Each tuple contains two integers L and R. Returns: - list of int: The results of each query. # Create a prefix sum array prefix_sum = [0] * (N + 1) for i in range(1, N + 1): prefix_sum[i] = prefix_sum[i - 1] + A[i - 1] results = [] for L, R in queries: sum_subarray = prefix_sum[R] - prefix_sum[L - 1] results.append(sum_subarray) return results"},{"question":"# Matrix Multiplication Given two matrices, A and B, with dimensions N x M and M x K respectively, your task is to compute the matrix product C = A * B. The matrix product is defined as: [ C[i][j] = sum_{k=1}^{M} A[i][k] * B[k][j] ] # Input Format The first line of input contains three space-separated integers N, M, and K, where N is the number of rows in matrix A, M is the number of columns in matrix A (and rows in matrix B), and K is the number of columns in matrix B. The next N lines describe matrix A. Each line contains M space-separated integers representing one row of matrix A. The next M lines describe matrix B. Each line contains K space-separated integers representing one row of matrix B. # Output Format Print the resulting matrix C of dimensions N x K. Each row of the matrix should be on a new line with elements separated by a space. # Sample Input ``` 2 3 2 1 2 3 4 5 6 7 8 9 10 11 12 ``` # Sample Output ``` 58 64 139 154 ``` # Notes 1. Ensure that your program handles matrices of varying dimensions. 2. Matrix multiplication is only defined when the number of columns in A equals the number of rows in B. Ensure to handle input accordingly.","solution":"def matrix_multiply(N, M, K, A, B): Multiplies two matrices A (N x M) and B (M x K) to get a result matrix C (N x K). # Initialize the result matrix C with zeros C = [[0 for _ in range(K)] for _ in range(N)] # Matrix multiplication logic for i in range(N): for j in range(K): for k in range(M): C[i][j] += A[i][k] * B[k][j] return C # Function to read input def read_matrices(input_str): input_list = input_str.strip().split(\'n\') N, M, K = map(int, input_list[0].split()) A = [] for i in range(1, N + 1): A.append(list(map(int, input_list[i].split()))) B = [] for i in range(N + 1, N + M + 1): B.append(list(map(int, input_list[i].split()))) return N, M, K, A, B def main(input_str): N, M, K, A, B = read_matrices(input_str) C = matrix_multiply(N, M, K, A, B) return \\"n\\".join(\\" \\".join(map(str, row)) for row in C)"},{"question":"In a parallel universe, robots and humans co-exist and frequently participate in competitive events. One such event, called **BotBattle**, involves robots collecting and arranging resources. Each resource has a unique type represented by a letter from \'A\' to \'Z\'. Due to a glitch in the sorting system, the resources must be rearranged to maximize their value. You have a list of N resource strings R_1, R_2, ldots, R_N. Each resource string consists of resource types. The value of a resource string is defined as the sum of the ordinal values of its characters. For the given list of resource strings, write a function that returns the resource string with the greatest value. If there is a tie, return the resource string that comes first lexicographically. Note that the ordinal value of \'A\' is 1, \'B\' is 2, ..., \'Z\' is 26. ------ Input ------ The first line contains an integer N, the number of resource strings. The next N lines each contain a resource string R_{i}. All strings are in uppercase. ------ Output ------ Print the resource string with the highest value. If multiple strings have the same value, print the one that is lexicographically smallest. ------ Constraints ------ 1 leq N leq 100 1 leq |R_{i}| leq 100 ------ Sample Input 1 ------ 4 ABCDE XYZ HELLO WORLD ----- Sample Output 1 ------ HELLO ----- Explanation 1 ------ The value of the resource strings are as follows: - ABCDE has a value of 1 + 2 + 3 + 4 + 5 = 15 - XYZ has a value of 24 + 25 + 26 = 75 - HELLO has a value of 8 + 5 + 12 + 12 + 15 = 52 - WORLD has a value of 23 + 15 + 18 + 12 + 4 = 72 Since XYZ has the highest value, it is returned.","solution":"def resource_with_highest_value(n, resource_strings): Returns the resource string with the greatest value. If there\'s a tie, returns the lexicographically smallest string. def calculate_value(resource_string): # Calculate the value of the resource string return sum(ord(char) - ord(\'A\') + 1 for char in resource_string) # Initialize the \\"best\\" resource string and its value best_resource = None best_value = -1 for resource in resource_strings: current_value = calculate_value(resource) if current_value > best_value or (current_value == best_value and resource < best_resource): best_value = current_value best_resource = resource return best_resource"},{"question":"Problem Statement Austin is planning his next mountain climbing expedition. There are M waypoints in the mountain and N trails that connect these waypoints in two directions. The waypoints are numbered sequentially from 1 to M, and the base camp is at waypoint 1. Austin wants to ensure that his expedition route is both challenging and safe: 1. The route must start from the base camp (waypoint 1) and return back to the base camp. 2. The route should not visit any waypoint or travel any trail more than once. For each trail formed, determine if Austin can start from the base camp, traverse the trails, and return to the base camp without repeating any waypoint or trail. Constraints - 3 ≤ M ≤ 100 - 1 ≤ N ≤ M * (M - 1) / 2 - 1 ≤ u, v ≤ M - u ≠ v - Multiple trails between the same pair of waypoints do not exist. Input The input is given in the following format: M N u1 v1 u2 v2 ... uN vN where M is the number of waypoints, and N is the number of trails created. Initially, there are no trails between the waypoints. ui and vi denote the waypoints that the i-th trail connects. Output For each trail formed, output \\"Yes\\" if Austin can complete a cycling route (starting and ending at the base camp and not revisiting any waypoint or trail) that includes the newly formed trail. Otherwise, output \\"No\\". Examples Input 4 4 1 2 2 3 3 1 1 4 Output No No Yes No Input 5 5 1 3 3 4 2 3 4 5 1 2 Output No No No No No","solution":"def is_eulerian_cycle_possible(M, N, edges): from collections import defaultdict, deque def is_connected_and_eulerian(): if not graph[1]: # If no edges at the base camp, it\'s not possible return False, False visited = set() def bfs(start): queue = deque([start]) while queue: u = queue.popleft() for v in graph[u]: if v not in visited: visited.add(v) queue.append(v) # Check for single component starting from any node with a degree > 0 starting_node = None for node in range(1, M + 1): if len(graph[node]) > 0: starting_node = node break if starting_node is None: return False, False visited.add(starting_node) bfs(starting_node) for node in range(1, M + 1): if len(graph[node]) > 0 and node not in visited: return False, False # Check all vertices with non-zero degree have even degree for i in range(1, M + 1): if len(graph[i]) % 2 != 0: return True, False return True, True graph = defaultdict(set) results = [] for u, v in edges: graph[u].add(v) graph[v].add(u) connected, eulerian = is_connected_and_eulerian() if connected and eulerian: results.append(\\"Yes\\") else: results.append(\\"No\\") return results def parse_input(input_str): lines = input_str.strip().split(\\"n\\") M, N = map(int, lines[0].split()) edges = [tuple(map(int, line.split())) for line in lines[1:]] return M, N, edges"},{"question":"Alice and Bob are playing a game where they take turns performing the following operation on a string of lowercase English letters: - On a player\'s turn, they can choose any prefix of the string and remove it. Alice always goes first. The player to make the string empty wins. Both players play optimally. Given the initial string, determine who the winner of the game will be. Input The input contains a single line with a string s (1 ≤ |s| ≤ 100,000) consisting of lowercase English letters. Output Output \\"Alice\\" if Alice wins the game or \\"Bob\\" if Bob wins the game. Examples Input aaa Output Alice Input abc Output Alice Input aba Output Bob","solution":"def determine_winner(s: str) -> str: Determines the winner of the game based on the length of the string. if len(s) % 2 == 1: return \\"Alice\\" else: return \\"Bob\\""},{"question":"A merchant in a bustling market is experiencing difficulties keeping track of inventories of different products. His primary challenge lies in identifying how inventory levels of individual products fluctuate as he updates the stock with new deliveries. He needs your help to design a software system that maintains current inventory levels and can process a variety of queries. Each query either updates the stock of a product or retrieves the inventory level of a product. -----Input----- The input starts with two integers n (1 le n le 100000), the number of different products, and q (1 le q le 100000), the number of queries. The next line contains n integers a_1, a_2, ..., a_n (0 le a_i le 10^9) representing the initial stock levels of each product. Each of the following q lines describes a query and is either of the form: 1. \\"update p x\\" (1 ≤ p ≤ n, 0 le x le 10^9): This means that the stock level of the p-th product should be increased by x units. 2. \\"query p\\" (1 ≤ p ≤ n): This means that you need to return the current stock level of the p-th product. -----Output----- For every query of the form \\"query p\\", output the current stock level of the p-th product on a new line. -----Examples----- Sample Input 1: 5 7 20 10 5 0 15 query 3 update 1 5 query 1 update 5 10 query 5 update 2 20 query 2 Sample Output 1: 5 25 25 30 Sample Input 2: 3 4 100 200 300 update 2 50 query 2 update 3 25 query 3 Sample Output 2: 250 325","solution":"class Inventory: def __init__(self, stocks): self.stocks = stocks def update_stock(self, product_id, quantity): self.stocks[product_id - 1] += quantity def query_stock(self, product_id): return self.stocks[product_id - 1] def process_queries(n, q, initial_stocks, queries): inventory = Inventory(initial_stocks) results = [] for query in queries: if query[0] == \\"update\\": _, product_id, quantity = query inventory.update_stock(product_id, quantity) elif query[0] == \\"query\\": _, product_id = query result = inventory.query_stock(product_id) results.append(result) return results"},{"question":"The ancient city of Pyramida has a unique tradition for its annual festival: forming a grand pyramid with n levels using large blocks, numbered consecutively starting from 1. A block at level k of the pyramid is supported by exactly two blocks from level k - 1 directly underneath it. To construct the pyramid, the people of Pyramida need to arrange the blocks in such a way that every block at level k has its two supporting blocks from level k - 1. The city council has asked you to determine whether it\'s possible to arrange the blocks according to this rule. If possible, they also need you to construct such a pyramid. If there are multiple solutions, any one of them will be acceptable. -----Input----- The first line contains a single integer t (1 le t le 100) — the number of test cases. Then t test cases follow. Each test case consists of a single integer n (1 le n le 10^6) — the number of blocks that need to be arranged. -----Output----- For each test case, if it is possible to construct the pyramid with given n blocks, print \\"YES\\". Then on a new line, print the pyramid level by level, starting from the top level (level 1). Each level should list the block numbers in order from left to right. If it is not possible to construct the pyramid, print \\"NO\\". -----Examples----- Input 3 3 6 10 Output YES 1 2 3 YES 1 2 3 4 5 6 NO -----Note----- In the first test case, it’s possible to construct a pyramid: ``` 1 2 3 ``` In the second test case, the pyramid will look like: ``` 1 2 3 4 5 6 ``` In the third test case, it is impossible to construct a pyramid since 10 blocks do not form a valid level structure, as illustrated: ``` Level 1: 1 block Level 2: 2 blocks Level 3: 3 blocks Level 4: 4 blocks ``` This requires 1 + 2 + 3 + 4 = 10 blocks, but there are no additional levels to form a stable pyramid with 10 blocks.","solution":"def can_form_pyramid(n): Determines if it is possible to form a pyramid with n blocks. If possible, return \\"YES\\" followed by the levels of the pyramid. Otherwise, return \\"NO\\". level = 1 blocks_needed = 0 result = [] while blocks_needed + level <= n: blocks_needed += level level += 1 if blocks_needed == n: result.append(\\"YES\\") block_number = 1 for l in range(1, level): result.append(\\" \\".join(str(block_number + i) for i in range(l))) block_number += l return \\"n\\".join(result) else: return \\"NO\\" def process_test_cases(test_cases): results = [] for n in test_cases: results.append(can_form_pyramid(n)) return results"},{"question":"Alice is experimenting with substrings of given strings. She loves finding and comparing lexicographical orders of substrings. She wants a helper program that can determine if a substring exists within a given range of positions in a string and count how many times it appears in that range. Write a function that, given a string and multiple queries, will return the number of occurrences of each substring in the specified ranges. Formally, you are given a string s and q queries. Each query consists of three integers l, r, and a substring sub. Your task is to count how many times sub appears in the substring of s starting at index l and ending at index r (1-based inclusive). -----Input----- - The first line contains the string s of length n. - The second line contains a single integer q denoting the number of queries. - The following q lines describe the queries. Each query consists of a line containing the integer l, the integer r, and the string sub. -----Output----- For each query, print a single integer denoting the number of occurrences of sub in the substring of s starting at index l and ending at index r. -----Constraints----- - 1 le n le 10^5 - 1 le q le 10^4 - 1 le l le r le n - The length of sub is between 1 and r-l+1 - s and sub contain only lowercase English letters. -----Example Input----- abcabcabc 3 1 3 abc 1 6 abc 2 9 bc -----Example Output----- 1 2 3 -----Explanation----- Example case 1: The substring of \\"abcabcabc\\" from index 1 to 3 is \\"abc\\" and contains \\"abc\\" once. Example case 2: The substring of \\"abcabcabc\\" from index 1 to 6 is \\"abcabc\\" and contains \\"abc\\" twice. Example case 3: The substring of \\"abcabcabc\\" from index 2 to 9 is \\"bcabcabc\\" and contains \\"bc\\" three times.","solution":"def count_substring_occurrences(s, queries): Given a string s and a list of queries, each defined by a tuple (l, r, sub), return the number of occurrences of sub in the substring of s from l to r (inclusive, 1-based index). results = [] for l, r, sub in queries: substring = s[l-1:r] # extract the substring from l to r count = 0 index = substring.find(sub) while index != -1: count += 1 index = substring.find(sub, index + 1) results.append(count) return results # Example function usage s = \\"abcabcabc\\" queries = [(1, 3, \\"abc\\"), (1, 6, \\"abc\\"), (2, 9, \\"bc\\")] output = count_substring_occurrences(s, queries) # Expected output: [1, 2, 3] print(output) # [1, 2, 3]"},{"question":"Write a program that replicates the gameplay of a simple trivia quiz. Given a question and its possible answers, determine if the provided answer is correct or incorrect. Input First line contains T (number of test cases). 1 ≤ T ≤ 100 For each test case: - A string containing the trivia question. - Four strings representing the possible answers, labeled from A to D. - A character (A, B, C, or D) representing the correct answer. - A character (A, B, C, or D) representing the provided answer. Output For each test case, print \\"Correct\\" if the provided answer matches the correct answer, otherwise print \\"Incorrect\\". SAMPLE INPUT 3 What is the capital of France? Paris London Berlin Madrid A A Name the largest planet in our solar system. Earth Mars Jupiter Saturn C C How many continents are there on Earth? Five Six Seven Eight C B SAMPLE OUTPUT Correct Correct Incorrect","solution":"def check_trivia_answers(test_cases): results = [] for case in test_cases: question, A, B, C, D, correct_letter, provided_letter = case if correct_letter == provided_letter: results.append(\\"Correct\\") else: results.append(\\"Incorrect\\") return results"},{"question":"A company issues ID cards with unique identification numbers to its employees. An ID is valid if and only if all digits of the ID number are distinct. Given a list of ID numbers, determine which ID numbers are valid based on the above condition. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each of the following T lines contains an ID number. ------ Output Format ------ For each test case, if the ID number is valid, print VALID. Otherwise, print INVALID. The output is case-insensitive. ------ Constraints ------ 1 ≤ T ≤ 10^{3} Each ID number will contain at least 1 and at most 20 digits. ------ Sample Input 1 ------ 4 1234567890 112345 9876543210 1234321 ------ Sample Output 1 ------ VALID INVALID VALID INVALID ------ Explanation 1 ------ Test case 1: The ID number 1234567890 has all distinct digits. Hence it is valid. Test case 2: The ID number 112345 contains duplicate digit 1. Hence it is invalid. Test case 3: The ID number 9876543210 has all distinct digits. Hence it is valid. Test case 4: The ID number 1234321 contains duplicate digits 1 and 2. Hence it is invalid.","solution":"def check_id_validity(id_number): Returns \'VALID\' if the ID number has all distinct digits, \'INVALID\' otherwise. if len(set(id_number)) == len(id_number): return \\"VALID\\" else: return \\"INVALID\\" def find_id_validity(id_numbers): results = [] for id_number in id_numbers: results.append(check_id_validity(id_number)) return results"},{"question":"# Check if a string is a palindrome A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward as it does backward (ignoring spaces, punctuation, and capitalization). Implement a function that determines if the given string is a palindrome. Input: - A string `s` that may contain letters, digits, spaces, and punctuation. Output: - A boolean `True` if the string is a palindrome, `False` otherwise. Example: # Input: ``` \\"A man, a plan, a canal, Panama\\" ``` # Output: ``` True ```","solution":"import re def is_palindrome(s): Determines if the given string is a palindrome, ignoring spaces, punctuation, and capitalization. Parameters: s (str): The string to check. Returns: bool: True if the string is a palindrome, False otherwise. # Remove non-alphanumeric characters and convert to lowercase cleaned_s = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() # Check if cleaned string is equal to its reverse return cleaned_s == cleaned_s[::-1]"},{"question":"A network has multiple nodes, and these nodes are connected by weighted edges. Each node is labeled with a unique integer. You\'re given an undirected graph represented by an adjacency list where nodes are keys and edges are values tuples containing the connected node and the weight of the edge. Write a function `path_exists` that determines whether there\'s a path between two given nodes in the graph. ```python def path_exists(graph, start, end): ``` # Parameters - `graph`: a dictionary where each key is a node and the corresponding value is a list of tuples (node, weight) representing the adjacent nodes and the weight of the edges. - `start`: an integer representing the starting node. - `end`: an integer representing the destination node. # Returns - A boolean indicating whether there is a path between the `start` and `end` nodes. # Examples ```python graph = { 1: [(2, 5), (3, 10)], 2: [(1, 5), (4, 1)], 3: [(1, 10), (4, 2)], 4: [(2, 1), (3, 2)] } path_exists(graph, 1, 4) -> True path_exists(graph, 1, 5) -> False ``` # Notes - You can assume that the graph is connected, meaning there\'s at least one path between any two nodes. - There might be multiple edges with different weights between the same pair of nodes, but you only need to determine if a path exists, not the shortest or the longest path.","solution":"def path_exists(graph, start, end): Determines if a path exists between the start and end nodes in an undirected graph. :param graph: dict, where keys are nodes and values are lists of tuples (node, weight) representing edges :param start: int, starting node :param end: int, destination node :returns: bool, True if there\'s a path, False otherwise if start not in graph or end not in graph: return False visited = set() stack = [start] while stack: node = stack.pop() if node == end: return True if node not in visited: visited.add(node) for neighbor, _ in graph[node]: if neighbor not in visited: stack.append(neighbor) return False"},{"question":"Given an array of positive integers, find the maximum sum of a subsequence such that no two numbers in the sequence are consecutive in the array. You need to return the maximum sum as the result. If the array is empty, return 0. Example 1: Input: [3, 2, 7, 10] Output: 13 Explanation: The subsequence is [3, 10]. So, the maximum sum is 3 + 10 = 13. Example 2: Input: [3, 2, 5, 10, 7] Output: 15 Explanation: The subsequence is [3, 10, 2] or [5, 10]. So, the maximum sum is 15. Example 3: Input: [5, 5, 10, 100, 10, 5] Output: 110 Explanation: The subsequence is [5, 100, 5]. So, the maximum sum is 5 + 100 + 5 = 110. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findMaxSum() which takes an array as an input parameter and returns an integer. Expected Time Complexity: O(N) Expected Space Complexity: O(1) Constraints: 1 <= size of the array <= 10^{5} 1 <= arr[i] <= 10^{4}","solution":"def findMaxSum(arr): Returns the maximum sum of a subsequence such that no two numbers in the sequence are consecutive in the array. if not arr: return 0 incl = 0 # Maximum sum including the previous element excl = 0 # Maximum sum excluding the previous element for num in arr: new_excl = max(incl, excl) incl = excl + num excl = new_excl return max(incl, excl)"},{"question":"Alice and Bob are playing a game on a circular ring of size n. The ring consists of n cells numbered from 1 to n in a clockwise manner. Each cell can either be empty or contain a bomb. A bomb in cell i will destroy itself and the two adjacent cells (i.e., cells (i-1) mod n and (i+1) mod n inclusive) when activated. If a bomb is placed in cell 1, it will affect cells n and 2 due to the circular nature of the ring. Alice aims to place as few bombs as possible such that every cell in the ring is either destroyed by a bomb or contains one. You need to determine the minimum number of bombs she can place to achieve this. Consider an example: if n=4, then Alice can place bombs in cells 1 and 3. When these bombs are activated, all cells will be destroyed (bomb_1 destroys cells 1, 4, 2 and bomb_3 destroys cells 3, 2, 4). -----Input----- The first line contains a single integer t (1 le t le 10^3) — the number of test cases in the input. Then test cases follow. The first line of each test case contains a single integer n (3 le n le 10^5) — the size of the circular ring. It is guaranteed that the sum of the values n over all test cases of the input does not exceed 10^5. -----Output----- For each test case, print a single integer representing the minimum number of bombs required to destroy all cells in the ring. -----Example----- Input: 3 4 7 6 Output: 2 3 2 Explanation: For the first test case, placing bombs in cells 1 and 3 will destroy all cells in the circular ring. For the second test case, placing bombs in cells 1, 4, and 7 will destroy all cells in the circular ring. For the third test case, placing bombs in cells 1 and 4 will destroy all cells in the circular ring.","solution":"def minimum_bombs_to_destroy_ring(t, test_cases): results = [] for n in test_cases: # Calculate the minimum number of bombs if n % 3 == 0: min_bombs = n // 3 else: min_bombs = (n // 3) + 1 results.append(min_bombs) return results"},{"question":"Given an integer array and a number K, write a function to find the maximum sum of a subarray of size K. If the input array has less than K elements, the function should return -1. Example 1: Input: arr = [100, 200, 300, 400] K = 2 Output: 700 Explanation: The subarrays of size 2 are [100, 200], [200, 300], and [300, 400]. The maximum sum is 700. Example 2: Input: arr = [1, 2, 3, 4, 5] K = 4 Output: 14 Explanation: The subarrays of size 4 are [1, 2, 3, 4] and [2, 3, 4, 5]. The maximum sum is 14. Example 3: Input: arr = [1, 2] K = 3 Output: -1 Explanation: There is no subarray of size 3 in the input array. Your Task: You need to implement the function `maxSumSubarray` that takes a list of integers `arr` and an integer `K` as input and returns the maximum sum of a subarray of size K, or -1 if no such subarray exists. Function Signature: ```python def maxSumSubarray(arr: List[int], K: int) -> int: ``` Expected Time Complexity: O(N), where N is the length of the array. Expected Auxiliary Space: O(1) Constraints: - 1 <= len(arr) <= 10^5 - -10^4 <= arr[i] <= 10^4 - 1 <= K <= 10^5","solution":"from typing import List def maxSumSubarray(arr: List[int], K: int) -> int: if len(arr) < K: return -1 max_sum = curr_sum = sum(arr[:K]) for i in range(K, len(arr)): curr_sum = curr_sum - arr[i - K] + arr[i] max_sum = max(max_sum, curr_sum) return max_sum"},{"question":"A popular problem involves the reorganization of words in a specific pattern. Given a sentence composed of multiple words, you are required to rearrange the words based on their length in ascending order. If two words have the same length, maintain their relative order as in the input. Words consist solely of alphabetic characters and are separated by single spaces. Constraints * The length of the sentence will not exceed 1000 characters. * Each word in the sentence will have at least one character and at most 100 characters. Input A single line containing the sentence. Output A single line containing the rearranged sentence. Example Input \\"I love solving programming challenges\\" Output \\"I love coding solving challenges\\" Input \\"The quick brown fox jumps over the lazy dog\\" Output \\"The fox the dog over lazy quick brown jumps\\"","solution":"def rearrange_words_by_length(sentence): Rearranges the words in a sentence by their length in ascending order. If two words have the same length, their relative order in the input is preserved. words = sentence.split() sorted_words = sorted(words, key=len) return \' \'.join(sorted_words)"},{"question":"You are given an undirected graph with `n` nodes and `m` edges. Each node has a value associated with it. Your task is to find the smallest sum of values that makes it possible to select and remove a subset of the nodes such that there is no path between any two remaining nodes of the graph. In other words, after removing the selected nodes, none of the remaining nodes should be connected directly or indirectly. -----Input----- The first line contains two integers `n` and `m` (1 ≤ n ≤ 100,000, 0 ≤ m ≤ 200,000) — the number of nodes and the number of edges in the graph. The second line contains `n` integers `v[i]` (1 ≤ v[i] ≤ 10^9) — the values associated with the nodes. Each of the following `m` lines contains two integers `u` and `w` (1 ≤ u, w ≤ n, u ≠ w) — the two nodes connected by an edge. -----Output----- Print a single integer — the smallest sum of values needed to remove a subset of nodes such that the remaining graph has no path between any two nodes. -----Example----- Input 5 4 5 1 3 4 2 1 2 2 3 3 4 4 5 Output 3 Input 3 3 10 20 30 1 2 2 3 1 3 Output 10","solution":"def find_min_sum_to_disconnect_graph(n, m, values, edges): from collections import defaultdict, deque def bfs(node, visited, graph): queue = deque([node]) component = [] while queue: current = queue.popleft() if not visited[current]: visited[current] = True component.append(current) for neighbor in graph[current]: if not visited[neighbor]: queue.append(neighbor) return component # Create adjacency list for the graph graph = defaultdict(list) for u, w in edges: graph[u].append(w) graph[w].append(u) visited = [False] * (n + 1) components = [] # Find all connected components for i in range(1, n + 1): if not visited[i]: component_nodes = bfs(i, visited, graph) components.append(component_nodes) # Calculate the minimum value node in each component min_values = [] for component in components: min_values.append(min(values[node-1] for node in component)) # The result is the minimum value from all minimum values of components return min(min_values)"},{"question":"Jessica is organizing a treasure hunt in a park represented as a grid with R rows and C columns. Some cells in the grid contain obstacles which block the path. Jessica wants to determine the number of distinct ways to reach the bottom-right corner of the park from the top-left corner, moving only down or right at each step. However, she must avoid cells with obstacles. Declare a grid where each cell can either be 0 or 1: 0: Open path 1: Obstacle Write a function that computes the number of distinct paths from the top-left to the bottom-right corner of the grid while avoiding obstacles. If no such path exists, return 0. Example 1: Input: 3 3 0 0 0 0 1 0 0 0 0 Output: 2 Explanation: There are two distinct paths from the top-left to bottom-right corner: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right Example 2: Input: 3 3 0 1 0 0 1 0 0 0 0 Output: 1 Explanation: There is one distinct path from the top-left to bottom-right corner: Down -> Down -> Right -> Right Example 3: Input: 3 3 0 1 0 1 1 0 0 0 0 Output: 0 Explanation: No path is available from the top-left to bottom-right corner. Your Task: You don\'t need to read input or print anything. Your task is to implement the function countPaths(grid) which takes a 2-D grid as input and returns the number of distinct paths from the top-left to the bottom-right corner. Constraints: 1 ≤ R, C ≤ 100 0 ≤ grid[i][j] ≤ 1","solution":"def countPaths(grid): Computes the number of distinct paths from the top-left to the bottom-right corner of the grid. :param grid: 2D list representing the park, where 0 is an open path and 1 is an obstacle. :return: Number of distinct paths avoiding obstacles. R, C = len(grid), len(grid[0]) # If start or end cell is an obstacle, return 0 if grid[0][0] == 1 or grid[R-1][C-1] == 1: return 0 # Initialize a 2D list for storing the number of paths to each cell dp = [[0] * C for _ in range(R)] # Start point has 1 way to be reached dp[0][0] = 1 # Fill the dp array for i in range(R): for j in range(C): if grid[i][j] == 1: # Obstacle found, cannot travel to this cell dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] # Path from top if j > 0: dp[i][j] += dp[i][j-1] # Path from left return dp[R-1][C-1]"},{"question":"You are developing a new automated library system for a local community center. As part of this system, you need to implement a feature that helps users keep track of borrowed books and return due dates. Given a list of borrowed books with their respective return dates, the system should be able to determine which books are overdue based on the current date. You need to write a function that takes the current date and a list of borrowed books with their return dates and returns a list of books that are overdue. Each book is represented as a tuple containing the book\'s title (a string) and the return date (a string in \'YYYY-MM-DD\' format). The current date is also provided in \'YYYY-MM-DD\' format. Input: - A string current_date, representing the current date in \'YYYY-MM-DD\' format. - An integer N, the number of borrowed books. - A list of tuples borrowed_books, where each tuple contains a string title and a string return_date. Output: - A list of strings, where each string is the title of an overdue book. Constraints: 1 ≤ N ≤ 100 The date strings will always be valid and in the format \'YYYY-MM-DD\'. Example: Input: \'2023-10-25\' 5 [(\'The Catcher in the Rye\', \'2023-10-20\'), (\'To Kill a Mockingbird\', \'2023-10-25\'), (\'1984\', \'2023-10-24\'), (\'Pride and Prejudice\', \'2023-10-26\'), (\'The Great Gatsby\', \'2023-10-23\')] Output: [\'The Catcher in the Rye\', \'1984\', \'The Great Gatsby\']","solution":"from typing import List, Tuple from datetime import datetime def overdue_books(current_date: str, borrowed_books: List[Tuple[str, str]]) -> List[str]: Returns a list of book titles that are overdue based on the current date. Parameters: - current_date (str): The current date in \'YYYY-MM-DD\' format. - borrowed_books (List[Tuple[str, str]]): A list of tuples where each tuple contains a book title and its return date in \'YYYY-MM-DD\' format. Returns: - List[str]: A list of book titles that are overdue. overdue = [] current_date_object = datetime.strptime(current_date, \'%Y-%m-%d\') for title, return_date in borrowed_books: return_date_object = datetime.strptime(return_date, \'%Y-%m-%d\') if return_date_object < current_date_object: overdue.append(title) return overdue"},{"question":"David is a fan of unique string transformations. He has a string `s` containing only lowercase English letters. He wants to transform the string such that each character in the transformed string appears exactly once and is formed by lexicographically rearranging the characters in the original string. However, the transformation must ensure that the relative ordering of the first appearance of each character in the original string is maintained. Your task is to help David with this transformation. -----Input----- The input consists of a single line containing the string `s` (1 ≤ |s| ≤ 100). -----Output----- Output the lexicographically smallest string that can be obtained by transforming the input string `s` according to the given rules. -----Examples----- Input cbacdcbc Output acdb Input bcabc Output abc Input aabbcc Output abc -----Explanation----- In the first sample, the lexicographically smallest string that maintains the relative order of the first appearance of each character is \\"acdb\\". Notice how \'c\' appears before \'a\' in the input, but we can place \'c\' after \'a\' in the output because when looking to create the smallest possible string, \'a\' comes before \'c\'. In the second sample, \\"abc\\" is the smallest possible string that can be obtained, and all characters of the original string appear exactly once, maintaining the relative order of their first appearance in `s`. In the third sample, each character \'a\', \'b\', and \'c\' appears twice in the input, but we only take their first appearance and rearrange them lexicographically, resulting in \\"abc\\".","solution":"def transform_string(s): Returns the lexicographically smallest string with unique characters while maintaining the relative order of first appearance in the original string. last_occurrence = {char: idx for idx, char in enumerate(s)} stack = [] in_stack = set() for index, char in enumerate(s): if char in in_stack: continue while stack and char < stack[-1] and index < last_occurrence[stack[-1]]: removed_char = stack.pop() in_stack.remove(removed_char) stack.append(char) in_stack.add(char) return \'\'.join(stack)"},{"question":"Write a function that returns the maximum sum of the contiguous subarray from an array of numbers. The array can contain both positive and negative numbers. If the array is empty or contains only negative numbers, return 0. For example, given the array `[-2,1,-3,4,-1,2,1,-5,4]`, the contiguous subarray with the maximum sum is `[4,-1,2,1]`, which has a sum of `6`. Implement the function `max_subarray_sum(array: List[int]) -> int` in Python or its equivalent in your preferred language. Examples: ```python max_subarray_sum([-2,1,-3,4,-1,2,1,-5,4]) => 6 max_subarray_sum([1,2,3,4,5]) => 15 max_subarray_sum([-1,-2,-3,-4]) => 0 max_subarray_sum([]) => 0 ``` Constraints: - The array can contain up to `10^5` elements. - Each element of the array lies in the range `[-10^4, 10^4]`.","solution":"from typing import List def max_subarray_sum(array: List[int]) -> int: if not array: return 0 max_sum = 0 current_sum = 0 for num in array: current_sum = max(0, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given a directed graph with n vertices and m edges. Each edge has a weight associated with it. The task is to find the shortest path from the source vertex to the target vertex. # Input The first line contains three integers n, m, and k (1 ≤ n, m ≤ 100, 1 ≤ k ≤ 10^4) — the number of vertices, the number of edges, and the number of queries, respectively. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^9), representing an edge from vertex u to vertex v with weight w. The graph might contain parallel edges and self-loops. Each of the next k lines contains two integers s and t (1 ≤ s, t ≤ n), representing a query where you are to find the shortest path from vertex s to vertex t. # Output For each query, output a single integer representing the length of the shortest path from s to t. If there is no path from s to t, output -1. # Example Input ``` 4 4 2 1 2 3 2 3 4 3 4 5 1 4 10 4 3 1 3 ``` Output ``` 9 7 ``` # Note In the example above, the shortest path from vertex 4 to vertex 3 is not possible, so it should return -1. For the second query, the shortest path from vertex 1 to vertex 3 is through vertices 1 -> 2 -> 3, with a total weight of 7.","solution":"import heapq def dijkstra(n, adj_list, source): Dijkstra\'s algorithm implementation. Returns the shortest distance from the source to all other nodes. dist = [float(\'inf\')] * n dist[source] = 0 pq = [(0, source)] # (distance, node) while pq: current_dist, u = heapq.heappop(pq) if current_dist > dist[u]: continue for weight, v in adj_list[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(pq, (distance, v)) return dist def shortest_path(n, m, edges, queries): Main function to find shortest paths for each query. # Create adjacency list adj_list = [[] for _ in range(n)] for u, v, w in edges: adj_list[u-1].append((w, v-1)) results = [] # Answer each query using Dijkstra for s, t in queries: dist = dijkstra(n, adj_list, s-1) result = dist[t-1] if dist[t-1] != float(\'inf\') else -1 results.append(result) return results"},{"question":"You are developing a new inventory management system for a local bookstore. The system needs to be able to handle a large volume of inventory updates efficiently. Your task is to implement a feature that processes a series of inventory changes and outputs the current inventory levels at any given time. The bookstore sells a variety of book titles, and each title is identified by a unique integer ID. The inventory change is represented by a positive integer for addition and a negative integer for removal. Your system should keep track of the current inventory levels of each book ID after processing all the changes. ---Input--- The input consists of: - One line containing an integer n (1 le n le 10^5), the number of inventory changes. - n lines, each containing two integers ID and change (1 le ID le 10^9, −10^5 le change le 10^5), representing the book ID and the change in inventory level, respectively. ---Output--- Output the current inventory levels of all book IDs that have been affected, in ascending order of their IDs. Each line should contain a book ID followed by its current inventory level. Book IDs that have a net inventory level of zero should not be included in the output. ---Examples--- Sample Input 1: 5 1001 5 1002 -2 1001 3 1003 4 1002 3 Sample Output 1: 1001 8 1002 1 1003 4 Sample Input 2: 4 1001 5 1002 -5 1001 -5 1002 5 Sample Output 2: (empty output since net inventory level for all books is zero) Be sure to optimize your solution to handle the input size efficiently.","solution":"def process_inventory_changes(n, changes): Processes a series of inventory changes and outputs the current inventory levels. :param n: Number of inventory changes :param changes: List of tuples with (ID, change) :return: Dictionary with current inventory levels of each book ID with non-zero inventory inventory = {} for ID, change in changes: if ID in inventory: inventory[ID] += change else: inventory[ID] = change if inventory[ID] == 0: del inventory[ID] return dict(sorted(inventory.items())) # Sample Input # n = 5 # changes = [ # (1001, 5), # (1002, -2), # (1001, 3), # (1003, 4), # (1002, 3) # ] # process_inventory_changes(n, changes) # Expected Output # { # 1001: 8, # 1002: 1, # 1003: 4 # }"},{"question":"In a faraway land, there is a famous forest known for its magical but equally dangerous paths. The forest consists of several junctions that are connected by one-way paths. Each path has a certain risk level associated with it, indicating the probability of encountering danger along the path. Adventurers have to navigate from one junction to another, minimizing the total risk level they experience. Your task is to help the adventurers determine the minimum risk level path for given queries. The forest is represented as a directed graph with N junctions and M one-way paths. Each path has an associated risk level. For several queries, you need to compute the minimum total risk level from a starting junction to a destination junction. ------ Input ------ The first line of the input contains a single integer T, denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two space-separated integers N and M, denoting the number of junctions and the number of one-way paths in the forest, respectively. Each of the following M lines contains three space-separated integers U, V and W, denoting a path from junction U to junction V with a risk level W. The next line contains an integer Q, denoting the number of queries. Each of the following Q lines contains two space-separated integers A and B, denoting the starting and destination junctions for each query. ------ Output ------ For each query, output the minimum total risk level for a path from junction A to junction B. If there is no such path, output -1. ------ Constraints ------ 1 ≤ T ≤ 5 1 ≤ N ≤ 1000 1 ≤ M ≤ 10000 1 ≤ U, V ≤ N 1 ≤ W ≤ 100 1 ≤ Q ≤ 100 1 ≤ A, B ≤ N ----- Sample Input ------ 1 4 5 1 2 10 2 3 10 3 4 15 1 3 20 2 4 25 2 1 4 3 1 ----- Sample Output ------ 35 -1 ------ Explanation ------ In the given example, the forest has 4 junctions with 5 one-way paths. The two queries are as follows: 1. The minimum risk level path from junction 1 to junction 4 is to go from 1 -> 2 -> 3 -> 4 with a total risk level of 10 + 10 + 15 = 35. 2. There is no path from junction 3 to junction 1, so the output for this query is -1.","solution":"import heapq import sys def dijkstra(graph, start, end, n): Uses Dijkstra\'s algorithm to find the minimum total risk level path from start to end. # Initialize distances as infinity distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[start] = 0 # Priority queue to manage visiting nodes priority_queue = [(0, start)] # (distance, node) while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_node == end: return current_distance if current_distance > distances[current_node]: continue for neighbor, weight in graph.get(current_node, []): distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return -1 if distances[end] == float(\'inf\') else distances[end] def minimum_risk_levels(T, test_cases): results = [] for i in range(T): N, M, edges, Q, queries = test_cases[i] # Construct graph graph = {} for u, v, w in edges: if u not in graph: graph[u] = [] graph[u].append((v, w)) # Answer queries for a, b in queries: result = dijkstra(graph, a, b, N) results.append(result) return results"},{"question":"Daisy is planning to arrange an art exhibition and wants to hang paintings in a row. Each painting is represented by a unique number, and Daisy has assigned each painting a level of importance. Daisy believes that the exhibition will look best if the paintings are arranged such that the sum of the importance levels of any two adjacent paintings is not a multiple of a given number k. Help her determine if it is possible to arrange the paintings in the desired way and, if so, provide such an arrangement. -----Input----- The first line of the input contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 50) — the number of paintings and the integer k. The second line contains n integers a_i (1 ≤ a_i ≤ 10^9) — the importance levels of the paintings. -----Output----- If it is not possible to arrange the paintings as desired, print a single line containing the integer -1. Otherwise, print n integers, representing the arrangement of the paintings. -----Example----- Input 5 3 5 7 9 12 14 Output 5 9 7 12 14 Input 3 4 8 8 8 Output -1 [Note] In the first example, the sum of the importance levels of adjacent paintings is never a multiple of 3. For instance, 5 + 9 = 14, 9 + 7 = 16, etc. In the second example, all importance levels are the same, making it impossible to arrange them such that the sum of any two adjacent paintings is not a multiple of 4.","solution":"from itertools import permutations def arrange_paintings(n, k, importance_levels): Determine an arrangement of paintings such that the sum of the importance levels of any two adjacent paintings is not a multiple of k. If it\'s not possible, return -1. Args: n (int): Number of paintings. k (int): The integer k. importance_levels (list): List of importance levels of the paintings. Returns: list: A list of integers representing the arrangement of paintings or -1 if not possible. # Check all permutations of the importance levels for perm in permutations(importance_levels): is_valid = True # Check if the sum of any two adjacent paintings is not a multiple of k for i in range(n - 1): if (perm[i] + perm[i+1]) % k == 0: is_valid = False break if is_valid: return list(perm) return -1"},{"question":"Write a function to determine if a given string is a valid hexadecimal number. A hexadecimal number can contain the characters 0-9, a-f, and A-F, and it may have an optional \'0x\' or \'0X\' prefix. Function Signature ```python def is_valid_hex(s: str) -> bool: pass ``` Input - A string `s` representing the potential hexadecimal number. `(1 <= len(s) <= 20)` Output - A boolean value indicating whether the input string is a valid hexadecimal number or not. Examples # Example 1 Input ```python s = \\"0x1A3F\\" ``` Output ```python True ``` Explanation The given string has the \'0x\' prefix and contains valid hexadecimal characters. # Example 2 Input ```python s = \\"1B2h\\" ``` Output ```python False ``` Explanation The \'h\' character is not a valid hexadecimal character. # Example 3 Input ```python s = \\"ABCDEF\\" ``` Output ```python True ``` Explanation The string has valid hexadecimal characters from A to F. # Example 4 Input ```python s = \\"0x12G3\\" ``` Output ```python False ``` Explanation The \'G\' character is not a valid hexadecimal character. Constraints - The input string\'s length is between 1 and 20 characters. - An optional prefix \'0x\' or \'0X\' may be present in the string. If present, it should be the first two characters of the string.","solution":"def is_valid_hex(s: str) -> bool: Determines if a given string is a valid hexadecimal number. A valid hexadecimal number can contain the characters 0-9, a-f, and A-F, and it may have an optional \'0x\' or \'0X\' prefix. if len(s) > 2 and (s[:2] == \'0x\' or s[:2] == \'0X\'): s = s[2:] hex_digits = set(\\"0123456789abcdefABCDEF\\") for char in s: if char not in hex_digits: return False return len(s) > 0 # ensuring there\'s at least one character to validate"},{"question":"You are given a series of daily temperatures recorded in a city for n consecutive days. The temperature readings are stored in an array T of n integers, where T_i is the temperature on day i. Your task is to create a function that determines how many days one has to wait, after a given day, for a higher temperature. If there is no future day with a higher temperature, the output for that day should be 0. -----Function Signature----- ```python def dailyTemperatures(T: List[int]) -> List[int]: ``` -----Parameters----- - `T` (list of int): An array of n integers (1 leq n leq 10^5), representing daily temperatures (-100 leq T_i leq 100). -----Returns----- - `List[int]`: A list of n integers representing the number of days to wait for a higher temperature for each day. If no higher temperature is found, the corresponding value should be 0. -----Examples----- ```python assert dailyTemperatures([73, 74, 75, 71, 69, 72, 76, 73]) == [1, 1, 4, 2, 1, 1, 0, 0] assert dailyTemperatures([30, 40, 50, 60]) == [1, 1, 1, 0] assert dailyTemperatures([30, 60, 90]) == [1, 1, 0] assert dailyTemperatures([20, 30, 40, 50, 60, 10, 5]) == [1, 1, 1, 1, 0, 0, 0] ``` -----Explanation----- - In the first example, the temperature on day 1 is 73. The next day with a higher temperature is day 2 with 74, so the answer is 1. For the temperature on day 2 which is 74, the next day with a higher temperature is day 3 with 75, so the answer is 1 as well. This process continues for the rest of the days. If there is no future day with a higher temperature, the output should be 0.","solution":"from typing import List def dailyTemperatures(T: List[int]) -> List[int]: For each day in the given list of temperatures, calculates the number of days one has to wait until a warmer temperature. If no future day is warmer, returns 0 for that day. n = len(T) result = [0] * n stack = [] for i in range(n): while stack and T[i] > T[stack[-1]]: prev_day = stack.pop() result[prev_day] = i - prev_day stack.append(i) return result"},{"question":"Alice loves palindrome numbers, but she finds it challenging to identify the smallest larger palindrome for a given number. Therefore, she has come up with the following problem for practice. Given a positive integer `n`, produce the smallest palindrome number `p` such that `p > n`. A palindrome number reads the same backward as forward, for example, 121 or 12321. -----Input----- The first line contains an integer t, the number of test cases. Each of the next t lines contains one integer `n`, the number to find the next palindrome for. -----Output----- For each test case, output the smallest palindrome number that is strictly greater than `n`. -----Example----- Input: 3 123 808 999 Output: 131 818 1001 -----Output details----- - In the first test case, the smallest palindrome number greater than `123` is `131`. - In the second test case, the smallest palindrome number greater than `808` is `818`. - In the third test case, the smallest palindrome number greater than `999` is `1001`.","solution":"def is_palindrome(num): Checks if the given number is a palindrome. return str(num) == str(num)[::-1] def next_palindrome(n): Finds the smallest palindrome number greater than n. n += 1 # Start checking the next number while not is_palindrome(n): n += 1 return n def find_next_palindromes(test_cases): Given a list of numbers, finds the smallest palindrome number strictly greater than each number. results = [] for n in test_cases: results.append(next_palindrome(n)) return results"},{"question":"In a small village, people celebrate an event by lighting lamps. They have a peculiar tradition where lamps are arranged in a line and people should light up the maximum number of lamps such that no two adjacent lamps are lit. Each lamp has a certain brightness, which makes the celebration more enjoyable. Given an array where each element represents the brightness of a lamp, the villagers want to know the maximum brightness they can achieve following the tradition. Write a function that helps them determine the maximum sum of brightness values subject to the condition that no two adjacent lamps can be lit. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of lamps. The second line contains n integers representing the brightness of each lamp, where the brightness values a_i (-10^4 ≤ a_{i} ≤ 10^4). -----Output----- Print a single integer representing the maximum sum of brightness achievable. -----Examples----- Input 4 3 2 5 10 Output 13 Input 3 1 2 3 Output 4 -----Note----- In the first sample case, the optimal way to maximize brightness is to light the first and the fourth lamps (3 + 10 = 13). In the second case, the optimal way is to light the first and the third lamps (1 + 3 = 4).","solution":"def max_brightness(n, brightness): if n == 0: return 0 if n == 1: return max(0, brightness[0]) # Initialize DP array dp = [0] * n dp[0] = max(0, brightness[0]) dp[1] = max(dp[0], brightness[1]) for i in range(2, n): dp[i] = max(dp[i - 1], dp[i - 2] + brightness[i]) return dp[n - 1]"},{"question":"Grace has a farm with many animals. The animals are arranged in a two-dimensional grid, with each cell of the grid containing either an animal or nothing. Each type of animal is represented by a unique lowercase English letter (\'a\' to \'z\'), and an empty cell is denoted by a dot (\'.\'). Grace wants to find the largest rectangular area on the grid such that all animals in that rectangular area are of the same type. Input The first line contains two integers n (1 ≤ n ≤ 103) and m (1 ≤ m ≤ 103) — the number of rows and columns in the grid respectively. The next n lines each contain a string of length m, representing the grid. Each character in the string is either a lowercase letter (\'a\' to \'z\') representing an animal or a dot (\'.\') representing an empty cell. Output Print a single integer — the area of the largest rectangle that contains only one type of animal. Examples Input 4 5 aabba abbba aabba bbbaa Output 6 Input 3 3 ccc c.c ccc Output 3","solution":"def largest_same_animal_area(n, m, grid): def calculate_max_histogram_area(histogram): stack = [] max_area = 0 index = 0 while index < len(histogram): if not stack or histogram[stack[-1]] <= histogram[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area max_area = 0 for animal in \'abcdefghijklmnopqrstuvwxyz\': height = [0] * m for i in range(n): for j in range(m): if grid[i][j] == animal: height[j] += 1 else: height[j] = 0 max_area = max(max_area, calculate_max_histogram_area(height)) return max_area"},{"question":"Sara loves playing with numbers and creating new number sequences. She recently came up with a sequence where each term is the sum of the squares of its digits. She calls this sequence \\"Digit Square Sum Sequence\\". She wants to find out if a number is a \\"Happy Number\\" or not based on this sequence. A \\"Happy Number\\" is defined as a number which eventually reaches 1 when replaced by the sum of the squares of its digits repeatedly. If it ends in a cycle of numbers that does not include 1, it is called an \\"Unhappy Number\\". For example, starting with the number 19: 1² + 9² = 1 + 81 = 82 8² + 2² = 64 + 4 = 68 6² + 8² = 36 + 64 = 100 1² + 0² + 0² = 1 (Hence, 19 is a Happy Number) Write a program to determine if a given number is a Happy Number or not. ------ Input Format ------ - The first line contains a single integer T - the number of test cases. Then the test cases follow. - The first and only line of each test case contains a single integer N - the initial number in the sequence. ------ Output Format ------ For each test case, Output \\"HAPPY\\" if the number is a Happy Number, otherwise output \\"UNHAPPY\\". You may print each character of the strings in uppercase or lowercase (for example, the strings \\"hAppY\\", \\"Happy\\", \\"HAPPY\\", and \\"HAppy\\" will all be treated as identical). ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^6 ----- Sample Input 1 ------ 3 19 2 7 ----- Sample Output 1 ------ HAPPY UNHAPPY HAPPY ----- Explanation 1 ------ Test case 1: The number 19 eventually reaches 1 through the sequence described above, so it is a Happy Number. Test case 2: The number 2 goes through the sequence 2 -> 4 -> 16 -> 37 -> 58 -> 89 -> 145 -> 42 -> 20 -> 4... and enters a cycle without 1, hence it is an Unhappy Number. Test case 3: The number 7 eventually reaches 1 through the sequence 7 -> 49 -> 97 -> 130 -> 10 -> 1, so it is a Happy Number.","solution":"def sum_of_squares_of_digits(n): Helper function to calculate the sum of the squares of the digits of a number. return sum(int(digit) ** 2 for digit in str(n)) def is_happy_number(n): Determine if the number \'n\' is a Happy Number. seen = set() while n != 1 and n not in seen: seen.add(n) n = sum_of_squares_of_digits(n) return n == 1 def happy_number_test_cases(test_cases): Determine if the numbers in the test cases are Happy Numbers or not. :param test_cases: List of integers representing the test cases. :returns: List of strings \\"HAPPY\\" or \\"UNHAPPY\\" for each test case. results = [] for n in test_cases: if is_happy_number(n): results.append(\\"HAPPY\\") else: results.append(\\"UNHAPPY\\") return results"},{"question":"Tara is organizing a local running event where participants run from the start line to the finish line. The race track is divided into V consecutive sections, numbered from 1 to V inclusively. Each section can have one of three different terrain types: flat, uphill, or downhill. Tara wants to ensure that no two consecutive sections have the same type of terrain. For example, if the 3rd section is flat, the 4th section cannot be flat. Given V total sections, determine the number of distinct ways to assign terrain types such that no two consecutive sections have the same terrain. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer V. -----Output----- For each test case, output the number of ways Tara can assign terrain types to the sections of the race track. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ V ≤ 1000 -----Example----- Input: 2 2 3 Output: 6 12 -----Explanation----- In the first case, the 6 ways are: flat, uphill flat, downhill uphill, flat uphill, downhill downhill, flat downhill, uphill In the second case, the 12 ways are: flat, uphill, flat flat, uphill, downhill flat, downhill, flat flat, downhill, uphill uphill, flat, uphill uphill, flat, downhill uphill, downhill, flat uphill, downhill, uphill downhill, flat, uphill downhill, flat, downhill downhill, uphill, flat downhill, uphill, downhill","solution":"def calculate_ways(V): Given V sections, calculate the number of ways to assign terrain types such that no two consecutive sections have the same type. Each section can have one of three terrains: flat, uphill, or downhill. if V == 1: return 3 # dp[i] holds the number of ways to arrange terrains for the first i sections dp = [0] * (V + 1) # If there\'s only one section, there are 3 possibilities dp[1] = 3 # If there are two sections, you have 3 choices for the first section and 2 choices for the second, for each choice of the first section dp[2] = 3 * 2 # For more than two sections, we follow the recurrence relation: for i in range(3, V + 1): dp[i] = dp[i-1] * 2 return dp[V] def solve(testcases): results = [] for V in testcases: results.append(calculate_ways(V)) return results"},{"question":"In a faraway magical kingdom, there is a sacred forest that consists of magical trees. Each tree in the forest has a certain number of fruits, and the trees are arranged in such a manner that they form a complete binary tree. The King of the magical kingdom loves to collect fruits, and he wants to gather a specific number of fruits from the forest. The King can start from any tree and move to any of its connected trees (parent or child). He wants to find the minimum number of trees he needs to visit to collect at least the desired number of fruits. If it is impossible to gather the required number of fruits, return -1. Example 1: Input: 5 / 3 8 / / 2 4 7 9 / 1 6 target_fruits = 19 Output: 3 Explanation: The minimum nodes to visit are the root (5), its right child (8), and the right child\'s right child (9) to sum up to 22 fruits. We need only 3 nodes to gather at least 19 fruits. Example 2: Input: 5 / 3 8 / / 2 4 7 9 / 1 6 target_fruits = 25 Output: -1 Explanation: It\'s not possible to collect 25 fruits from the forest since the total fruits are only 45. Your Task: You don\'t need to read input or print anything. Complete the function min_trees_to_visit() which takes the root of the tree and target_fruits as input parameters and returns the minimum number of trees needed to collect at least the desired number of fruits, or -1 if it is not possible. Constraints: - 1 ≤ N, Node Value, target_fruits ≤ 10^{5}","solution":"from collections import deque class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def min_trees_to_visit(root: TreeNode, target_fruits: int) -> int: if not root: return -1 if target_fruits <= 0: return 0 # Perform a BFS to find the minimum number of nodes to sum to at least target_fruits queue = deque([(root, root.value)]) # Start with the root node visited = set() visited.add(root) nodes_visited = 1 if root.value >= target_fruits: return nodes_visited while queue: nodes_visited += 1 for _ in range(len(queue)): node, curr_sum = queue.popleft() for child in [node.left, node.right]: if child and child not in visited: new_sum = curr_sum + child.value if new_sum >= target_fruits: return nodes_visited queue.append((child, new_sum)) visited.add(child) return -1"},{"question":"Given an array of integers, your task is to find the maximum alternating sum of the elements. The alternating sum of an array is defined as the sum where each element is subtracted from the sum if its position is odd and added to the sum if its position is even (1-based indexing). For example, for the array [a, b, c, d], the alternating sum is a - b + c - d. Example 1: Input: arr = [4, 2, 5, 3] Output: 7 Explanation: The alternating sum of [4, 2, 5, 3] would be 4 - 2 + 5 - 3 = 4. Example 2: Input: arr = [1, 6, 3, 8, 4] Output: 4 Explanation: The alternating sum of [1, 6, 3, 8, 4] would be 1 - 6 + 3 - 8 + 4 = -6. Your Task: You do not need to read input or print anything. Your task is to complete the function `maxAltSum(arr)` which takes the array of integers `arr` as an input parameter and returns the maximum alternating sum that can be obtained. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) CONSTRAINTS: 1 <= arr.length <= 10^5 -10^4 <= arr[i] <= 10^4","solution":"def maxAltSum(arr): Returns the maximum alternating sum of the elements of the array. The alternating sum is defined with 1-based indexing as arr[0] - arr[1] + arr[2] - arr[3] + ... alternating_sum = 0 # Traverse the array and compute the alternating sum for i, value in enumerate(arr): if i % 2 == 0: alternating_sum += value else: alternating_sum -= value return alternating_sum"},{"question":"Given a string, check whether all characters are unique or if there is any repeated character. Example 1: Input: str = \\"abcdef\\" Output: Yes Example 2: Input: str = \\"hello\\" Output: No Your Task: You don\'t need to read or print anything. Your task is to complete the function has_unique_characters() which takes the string as input parameter and returns \\"Yes\\" if all characters are unique and \\"No\\" if there is any repeated character. Expected Time Complexity: O(n) Expected Space Complexity: O(1) with additional data structures, where n is the length of the string. Constraints: 1 <= str.length() <= 100","solution":"def has_unique_characters(s): Checks whether all characters in the string are unique. Args: s (str): The input string. Returns: str: \\"Yes\\" if all characters are unique, \\"No\\" otherwise. # Using a set to track characters seen so far seen_chars = set() for char in s: if char in seen_chars: return \\"No\\" seen_chars.add(char) return \\"Yes\\""},{"question":"A palindrome is a string that reads the same backward as forward. Given an integer `k` and a string `s` of lowercase English letters, you need to determine whether it is possible to make the string a palindrome by changing at most `k` characters. -----Input----- The first line contains an integer t (1 le t le 10^4) — the number of test cases in the input. Each of the next t test cases is described in two lines. The first line of each test case contains an integer k (0 le k le |s|/2), and the second line contains a string s (1 le |s| le 100) of lowercase English letters. -----Output----- For each of the test cases, print \\"YES\\" if it is possible to turn the string into a palindrome with at most `k` changes, otherwise print \\"NO\\". -----Example----- Input 3 1 abcd 2 abcca 0 racecar Output NO YES YES Explanation: In the first case, we can change characters, but even with one change, \\"abcd\\" cannot be turned into a palindrome. In the second case, changing the \'b\' to \'c\' makes the string \\"accaa\\", which is a palindrome. In the third case, since \\"racecar\\" is already a palindrome, no changes are needed.","solution":"def is_palindrome_possible(k, s): n = len(s) mismatch_count = 0 # Calculate the number of mismatched character pairs for i in range(n // 2): if s[i] != s[n - 1 - i]: mismatch_count += 1 return mismatch_count <= k def process_test_cases(t, test_cases): results = [] for i in range(t): k, s = test_cases[i] if is_palindrome_possible(k, s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Create a seating arrangement for a wedding. You are given the names of the guests and the number of guests. Your task is to arrange the guests in alphabetical order by their first names using Merge Sort and Quick Sort algorithms respectively. Both algorithms should adhere to the following pseudocode: MergeSort(A) 1 if A.length ≤ 1 2 return A 3 mid = A.length / 2 4 left = MergeSort(A[0..mid-1]) 5 right = MergeSort(A[mid..A.length-1]) 6 return Merge(left, right) Merge(left, right) 1 result = [] 2 while left is not empty and right is not empty 3 if left[0].name ≤ right[0].name 4 append left[0] to result 5 left = left[1..left.length-1] 6 else 7 append right[0] to result 8 right = right[1..right.length-1] 9 while left is not empty 10 append left[0] to result 11 left = left[1..left.length-1] 12 while right is not empty 13 append right[0] to result 14 right = right[1..right.length-1] 15 return result QuickSort(A) 1 if A.length ≤ 1 2 return A 3 pivot = A[A.length / 2] 4 less = [] 5 equal = [] 6 greater = [] 7 for each x in A 8 if x < pivot 9 append x to less 10 else if x > pivot 11 append x to greater 12 else 13 append x to equal 14 return concatenate(QuickSort(less), equal, QuickSort(greater)) Consider that the names are case insensitive during the sorting. Constraints 1 ≤ N ≤ 100 Input The first line contains an integer N, the number of guests. N guest names are given in the following lines. Each name is separated by a new line character. Output In the first line, print the arranged names provided by the Merge Sort algorithm. Names should be separated by a space character. In the second line, print the arranged names provided by the Quick Sort algorithm. Names should be separated by a space character. Examples Input 5 Alice Bob Eve Charlie Dave Output Alice Bob Charlie Dave Eve Alice Bob Charlie Dave Eve Input 3 zack Anna John Output Anna John Zack Anna John Zack","solution":"def merge_sort(guests): if len(guests) <= 1: return guests mid = len(guests) // 2 left = merge_sort(guests[:mid]) right = merge_sort(guests[mid:]) return merge(left, right) def merge(left, right): result = [] while left and right: if left[0].lower() <= right[0].lower(): result.append(left.pop(0)) else: result.append(right.pop(0)) result.extend(left) result.extend(right) return result def quick_sort(guests): if len(guests) <= 1: return guests pivot = guests[len(guests) // 2] less = [x for x in guests if x.lower() < pivot.lower()] equal = [x for x in guests if x.lower() == pivot.lower()] greater = [x for x in guests if x.lower() > pivot.lower()] return quick_sort(less) + equal + quick_sort(greater) def wedding_seating_arrangement(guest_list): merge_sorted_guests = merge_sort(guest_list) quick_sorted_guests = quick_sort(guest_list) print(\' \'.join(merge_sorted_guests)) print(\' \'.join(quick_sorted_guests))"},{"question":"Create a function that receives a string containing a list of comma-separated integers and returns a string with the integers sorted in non-decreasing order and separated by dashes. Constraints: 2 ≤ length of input string ≤ 10000 Input: One line containing a string of comma-separated integers. Output: A string with the integers sorted in non-decreasing order and separated by dashes. Example: Input: \\"5,3,8,6,2\\" Output: \\"2-3-5-6-8\\" Explanation: The given list of integers is [5, 3, 8, 6, 2]. After sorting it, we get [2, 3, 5, 6, 8]. The final string, created by joining the sorted integers with dashes, is \\"2-3-5-6-8\\".","solution":"def sort_and_format_numbers(input_string): Receives a string containing a list of comma-separated integers and returns a string with the integers sorted in non-decreasing order and separated by dashes. :param input_string: A comma-separated string of integers :return: A string with sorted integers separated by dashes # Split the input string by commas to get a list of integer strings str_numbers = input_string.split(\',\') # Convert the list of strings to a list of integers int_numbers = [int(num) for num in str_numbers] # Sort the list of integers sorted_numbers = sorted(int_numbers) # Convert the sorted list of integers back to a list of strings sorted_str_numbers = [str(num) for num in sorted_numbers] # Join the list of sorted strings with dashes result_string = \'-\'.join(sorted_str_numbers) return result_string"},{"question":"You are working on a simple banking system that allows users to deposit and withdraw money. Occasionally, the system needs to determine the number of possible ways a user can achieve exactly a specific balance using a series of deposits and withdrawals. Each transaction can be any amount within a given range. Write a function called `count_ways_to_balance(target_balance, min_transaction, max_transaction)`. Given a target balance, a minimum transaction amount, and a maximum transaction amount, return the number of ways to achieve the target balance using any number of transactions. For example, given `target_balance = 5`, `min_transaction = -2`, and `max_transaction = 3`, there are several ways to achieve the balance of 5, such as: ``` - One transaction of 5 - Two transactions: 3 and 2 - Three transactions: 2, 2, and 1 - And so on... ``` **Function signature:** ```python def count_ways_to_balance(target_balance: int, min_transaction: int, max_transaction: int) -> int: ``` **Example usage:** ```python print(count_ways_to_balance(5, -2, 3)) # Output: Some integer representing the count of ways ```","solution":"def count_ways_to_balance(target_balance, min_transaction, max_transaction): Given a target balance, a minimum transaction amount, and a maximum transaction amount, return the number of ways to achieve the target balance using any number of transactions. This function uses dynamic programming to find the number of ways. if min_transaction > max_transaction: return 0 dp = {0: 1} # Base case: one way to achieve balance 0 (by doing nothing) for current_balance in range(1, target_balance + 1): dp[current_balance] = 0 for transaction in range(min_transaction, max_transaction + 1): if current_balance - transaction in dp: dp[current_balance] += dp[current_balance - transaction] return dp.get(target_balance, 0)"},{"question":"Write a function `count_valid_substrings` that takes a string `s` and returns the number of substrings that start and end with the same character. For example: ```python def count_valid_substrings(s: str) -> int: # Your code here # Test cases print(count_valid_substrings(\\"abcab\\")) # Output: 7 print(count_valid_substrings(\\"aaaa\\")) # Output: 10 print(count_valid_substrings(\\"ababa\\")) # Output: 9 ``` Explanation: 1. \\"abcab\\" has the following valid substrings: \\"a\\", \\"a\\", \\"abca\\", \\"b\\", \\"c\\", \\"bca\\" and \\"b\\". 2. \\"aaaa\\" has the following valid substrings: \\"a\\", \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", \\"aa\\", \\"aaa\\", \\"aaa\\", and \\"aaaa\\". 3. \\"ababa\\" has the following valid substrings: \\"a\\", \\"a\\", \\"aba\\", \\"ababa\\", \\"b\\", \\"bab\\", \\"a\\", \\"a\\", and \\"ba\\". Note: - Each individual character is considered a valid substring. - The string will only contain lowercase English alphabets.","solution":"def count_valid_substrings(s: str) -> int: Returns the number of substrings that start and end with the same character. count = 0 # Traverse s to count the occurrences of each character for i in range(len(s)): # Traverse the substrings starting from index i for j in range(i, len(s)): # Check if the substring starts and ends with the same character if s[i] == s[j]: count += 1 return count"},{"question":"# The Story: Alice is a software engineer and a gardening enthusiast. She loves growing plants and is particularly keen on keeping her plants healthy by ensuring they get the right amount of water. She has a smart irrigation system that controls the watering schedule for her plants. However, she needs your help in calculating the total amount of water her plants have received over a period of days. # Task Overview: You have to write a function that accepts a list of integers, each representing the amount of water (in liters) provided to the plants each day for a number of consecutive days. If the total amount of water received is between the minimum and maximum thresholds (inclusive) specified by her plants\' needs, it returns \\"Just right\\". If the amount is below the minimum threshold, it returns \\"Needs more water\\". If it exceeds the maximum threshold, it returns \\"Overwatered\\". # Usage Examples: ```python def water_status(water_list, min_threshold, max_threshold): total_water = sum(water_list) if total_water < min_threshold: return \\"Needs more water\\" elif total_water > max_threshold: return \\"Overwatered\\" else: return \\"Just right\\" # Example usage: print(water_status([5, 3, 2, 4], 10, 20)) # Just right print(water_status([1, 2, 3], 10, 15)) # Needs more water print(water_status([6, 7, 8], 10, 20)) # Overwatered ```","solution":"def water_status(water_list, min_threshold, max_threshold): total_water = sum(water_list) if total_water < min_threshold: return \\"Needs more water\\" elif total_water > max_threshold: return \\"Overwatered\\" else: return \\"Just right\\""},{"question":"Given a string S consisting of lowercase English letters, you need to determine the number of distinct subsequences of the string S that are equal to the reversed form of S (i.e., those which are palindromic subsequences). As the result could be very large, you are required to return the answer modulo 10^9+7. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. - The first line of each test case contains an integer N denoting the length of the string S. - The second line contains the string S of length N. -----Output----- For each test case, output the number of distinct palindromic subsequences, modulo 10^9+7. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 1000 - S contains only lowercase English letters -----Example----- Input: 2 3 aab 4 aaaa Output: 4 15 -----Explanation----- Example case 1: The distinct palindromic subsequences of \'aab\' are: - \'a\' - \'aa\' - \'b\' - \'aba\' Example case 2: For the string \'aaaa\', every subsequence is a palindromic subsequence.","solution":"MOD = 10**9 + 7 def count_palindromic_subsequences(S): N = len(S) dp = [[0] * N for _ in range(N)] for i in range(N): dp[i][i] = 1 for length in range(2, N+1): for i in range(N-length+1): j = i + length - 1 if S[i] == S[j]: dp[i][j] = (dp[i+1][j] + dp[i][j-1] + 1) % MOD else: dp[i][j] = (dp[i+1][j] + dp[i][j-1] - dp[i+1][j-1]) % MOD if dp[i][j] < 0: dp[i][j] += MOD return dp[0][N-1] def solve_palindromic_subsequences(T, cases): results = [] for case in cases: N, S = case result = count_palindromic_subsequences(S) results.append(result) return results"},{"question":"Sara is an avid coder who loves palindromes. She recently learned about permutations and wants to explore creating palindromic permutations of strings. A permutation is a rearrangement of the characters of a string. A palindrome is a string that reads the same forward and backward. Sara needs your help to find out if any permutation of a given string can form a palindrome. Input You are given a single string `s` which consists of lowercase English letters. The length of the string is between 1 and 10^4 characters inclusive. Output Print \\"YES\\" (without the quotes) if any permutation of the string can form a palindrome. Otherwise, print \\"NO\\" (without the quotes). Examples Input aabb Output YES Input aaab Output NO Input civic Output YES Note In the first example, the string \\"aabb\\" can be rearranged to form the palindrome \\"abba\\" or \\"baab\\". In the second example, the string \\"aaab\\" cannot be rearranged to form any palindrome. In the third example, the string \\"civic\\" is already a palindrome.","solution":"def can_form_palindromic_permutation(s): Determine if any permutation of the string s can form a palindrome. # Create a dictionary to count occurrences of each character char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Count how many characters have an odd count odd_count = 0 for count in char_count.values(): if count % 2 != 0: odd_count += 1 # For a string to be able to form a palindrome: # If its length is even, all characters must have an even count # If its length is odd, one character can have an odd count if odd_count > 1: return \\"NO\\" else: return \\"YES\\""},{"question":"# Square-Free Number Check Overview A square-free number is an integer which is not divisible by any perfect square other than 1. For example, `15` is square-free, because `15` is not divisible by `4`, `9`, or `16`. However, `18` is not square-free, because it is divisible by `9` (which is `3^2`). Your task is to identify whether a given integer is square-free. Task Define a function `isSquareFree` that takes an integer `n` as an input and returns a boolean indicating whether the integer is square-free. Input: - An integer `n` (1 <= n <= 10^9). Output: - Return `true` if the number is square-free, otherwise return `false`. Examples: - `isSquareFree(15)` should return `true` (15 is not divisible by any perfect squares). - `isSquareFree(18)` should return `false` (18 is divisible by 9 which is a perfect square). - `isSquareFree(31)` should return `true` (31 is not divisible by any perfect squares). - `isSquareFree(45)` should return `false` (45 is divisible by 9 which is a perfect square).","solution":"def isSquareFree(n): Returns True if n is a square-free number, False otherwise. # The largest integer k such that k^2 <= n k = int(n**0.5) # Check divisibility by squares of all integers from 2 to k for i in range(2, k + 1): if n % (i * i) == 0: return False return True"},{"question":"Alex loves his pet rabbits and is very particular about feeding them. He wants to make sure that they get their meals in a specific order each day. The rabbits have their favorite times of the day to eat, which Alex wants to respect. Alex has n rabbits, each with their own preferred meal timing. His task is to feed each rabbit exactly two meals each day. Given the list of preferred meal times, Alex needs to determine the maximum number of meal-time conflicts he has to resolve, where a conflict is defined as multiple rabbits wanting to have their meal at the same time. -----Input----- The first line contains the single integer n (1 ≤ n ≤ 5×10^4) — the number of rabbits. The next line contains the list of 2n integers t_1, t_2, ..., t_2n (1 ≤ t_{i} ≤ 10^9), which represents the preferred meal times. Each meal time belongs to a specific rabbit, and each rabbit has exactly two preferred meal times in the list. -----Output----- Print a single integer — the maximum number of meal-time conflicts Alex has to resolve. -----Examples----- Input 2 5 8 8 5 Output 2 Input 3 1 2 3 1 2 3 Output 1 -----Note----- In the first example, rabbit 1 prefers meals at times 5 and 8, and rabbit 2 prefers meals at times 5 and 8 as well. Thus, at both meal times, both rabbits conflict, resulting in 2 conflicts overall. In the second example, each rabbit has distinct times once, which means at any given time, there\'s at most one conflict, so the maximum Alex has to resolve is 1 conflict.","solution":"from collections import Counter def max_meal_time_conflicts(n, meal_times): Returns the maximum number of meal-time conflicts to resolve. Parameters: n (int): The number of rabbits. meal_times (list): List of integers representing the preferred meal times. Returns: int: The maximum number of meal-time conflicts. time_counts = Counter(meal_times) return max(time_counts.values())"},{"question":"Create a function that takes a string and counts the number of vowels (a, e, i, o, u) in it. Input :: \\"hello\\" Output :: \\"Number of vowels: 2\\" `This problem helps in understanding basic string manipulation. Rank and upvote if you like it.`","solution":"def count_vowels(s): Returns the number of vowels in the input string s. vowels = \\"aeiouAEIOU\\" return sum(1 for char in s if char in vowels)"},{"question":"Sarah enjoys solving word puzzles and has recently come across a series of challenges where she must find the longest palindrome in a given string. Your task is to help her by writing a function **longest_palindrome** that takes a string **s** as input and returns the longest palindromic substring in **s**. Keep in mind: * If the length of **s** is 0, return an empty string. * The function should be efficient enough to handle strings of length up to 1000. Examples: **Input:** longest_palindrome(\\"babad\\") **Output:** \\"bab\\" # \\"aba\\" is also a valid output **Input:** longest_palindrome(\\"cbbd\\") **Output:** \\"bb\\" **Input:** longest_palindrome(\\"a\\") **Output:** \\"a\\" **Input:** longest_palindrome(\\"ac\\") **Output:** \\"a\\" # \\"c\\" is also a valid output","solution":"def longest_palindrome(s): This function returns the longest palindromic substring in the given string s. If the length of s is 0, the function returns an empty string. if len(s) == 0: return \\"\\" def expand_from_center(left, right): Helper function to expand from the center and find the longest palindrome while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] longest_palindromic_substring = \\"\\" for i in range(len(s)): # Odd length palindromes substring1 = expand_from_center(i, i) if len(substring1) > len(longest_palindromic_substring): longest_palindromic_substring = substring1 # Even length palindromes substring2 = expand_from_center(i, i + 1) if len(substring2) > len(longest_palindromic_substring): longest_palindromic_substring = substring2 return longest_palindromic_substring"},{"question":"In a futuristic world, robots have taken over a lot of human jobs, including cooking. One of the critical tasks for a robot chef is to prepare custom dishes based on complex recipes specified by nutritionists and customers. Each recipe is defined by a collection of ingredients along with their quantities in grams. Additionally, the robot chef needs to ensure that the preparation process is efficient by not wasting any ingredients and using the most optimal way to combine them. Your task is to write a function that will receive a list of recipes and their ingredients, and a list of available ingredients in the kitchen with their respective quantities. The function should return a list of recipes that can be fully prepared with the available ingredients in the kitchen. If a recipe requires more of a certain ingredient than available, it cannot be prepared. Function signature: `def can_prepare_recipes(recipes: List[Dict[str, int]], available_ingredients: Dict[str, int]) -> List[int]:` **Input:** - `recipes`: A list of dictionaries where each dictionary contains the ingredients and their quantities for a specific recipe. The keys are ingredient names (strings) and the values are the required quantities in grams (integers). - `available_ingredients`: A dictionary where the keys are ingredient names (strings) and the values are the quantities available in the kitchen in grams (integers). **Output:** - A list of integers representing the indices of the recipes that can be fully prepared with the available ingredients. **Example:** ```python recipes = [ {\\"flour\\": 200, \\"sugar\\": 100, \\"eggs\\": 2}, {\\"flour\\": 300, \\"sugar\\": 150, \\"butter\\": 100}, {\\"flour\\": 100, \\"sugar\\": 200, \\"eggs\\": 1, \\"butter\\": 50} ] available_ingredients = { \\"flour\\": 400, \\"sugar\\": 300, \\"eggs\\": 3, \\"butter\\": 100 } print(can_prepare_recipes(recipes, available_ingredients)) # Output: [0, 2] ``` **Constraints:** 1. All ingredient names in the recipes and available ingredients are lowercase alphabetic strings. 2. Quantities are non-negative integers. In this example, the function should return `[0, 2]` because recipe 0 and recipe 2 can be fully prepared with the available ingredients. Recipe 1 cannot be prepared because there is not enough flour and butter.","solution":"def can_prepare_recipes(recipes, available_ingredients): Determines which recipes can be prepared with the available ingredients. Args: recipes (List[Dict[str, int]]): A list of dictionaries where each dictionary contains the ingredients and their quantities for a specific recipe. available_ingredients (Dict[str, int]): A dictionary where the keys are ingredient names and the values are the quantities available in the kitchen. Returns: List[int]: A list of indices representing the recipes that can be fully prepared with the available ingredients. can_prepare = [] for idx, recipe in enumerate(recipes): can_prepare_this = True for ingredient, required_qty in recipe.items(): if available_ingredients.get(ingredient, 0) < required_qty: can_prepare_this = False break if can_prepare_this: can_prepare.append(idx) return can_prepare"},{"question":"Write a function that takes a string representing a mathematical expression containing positive integers and three operators: addition (`+`), subtraction (`-`), and multiplication (`*`). The function should evaluate the expression following the standard operator precedence (multiplication first, then addition and subtraction from left to right) and return the result as an integer. Parentheses are not included in the expressions to keep them simple. Requirements: 1. The input will always be a valid expression with spaces around each operator and operand. 2. The input string will not be empty and will only contain positive integers and the operators `+`, `-`, and `*`. Examples: \'3 + 5 * 2\' -> 13 \'10 - 2 * 5\' -> 0 \'7 * 4 - 3 + 2\' -> 27 The output should be an integer representing the evaluated result.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing positive integers and the operators +, -, * with standard operator precedence. Args: expression (str): A string containing the mathematical expression to be evaluated. Returns: int: The evaluated result of the expression. tokens = expression.split() i = 0 # Handle multiplication first intermediate = [] while i < len(tokens): if tokens[i] == \'*\': left = int(intermediate.pop()) right = int(tokens[i + 1]) intermediate.append(left * right) i += 2 else: intermediate.append(tokens[i]) i += 1 # Now handle addition and subtraction from left to right result = int(intermediate[0]) i = 1 while i < len(intermediate): if intermediate[i] == \'+\': result += int(intermediate[i + 1]) elif intermediate[i] == \'-\': result -= int(intermediate[i + 1]) i += 2 return result"},{"question":"You are given an integer array of size N. Your task is to rotate the array to the right by K steps, where K is a non-negative integer. You have to do it in-place with O(1) extra space. Input Format The first line contains two integers, N (the number of elements in the array) and K (the number of steps to rotate). The second line contains N integers representing the array elements. Constraints 1 leq N leq 10^5 0 leq K leq 10^5 -10^5 leq text{array element} leq 10^5 Output Format Print the array after rotating it by K steps to the right. Sample Input 6 2 1 2 3 4 5 6 Sample Output 5 6 1 2 3 4","solution":"def rotate_array(nums, k): Rotates the array nums to the right by k steps. :param nums: List[int], the array to be rotated :param k: int, the number of steps to rotate :return: None, rotates in-place n = len(nums) k = k % n # Normalize k to ensure it\'s within the bounds of the array length # Define a helper function to reverse a portion of the array def reverse(start, end): while start < end: nums[start], nums[end] = nums[end], nums[start] start += 1 end -= 1 # Reverse the entire array reverse(0, n - 1) # Reverse the first part reverse(0, k - 1) # Reverse the second part reverse(k, n - 1) # Example usage: nums_example = [1, 2, 3, 4, 5, 6] rotate_array(nums_example, 2) print(nums_example)"},{"question":"Write a program that simulates an inventory management system for a small library. The system should support a series of operations to manage a collection of books. Each book is identified by a unique identifier (integer) and has a title (string). The operations are as follows: * add(x, title): Add a new book with identifier x and title title to the collection. * remove(x): Remove the book with identifier x from the collection. * find(x): Find the title of the book with identifier x and print it. If the book is not found, print \\"Not found\\". In the initial state, the collection is empty. Constraints * 1 leq q leq 100,000 * The identifiers are unique within the collection * 1 leq |title| leq 100 * 0 leq x leq 1,000,000 Input The input is given in the following format: ``` q query_1 query_2 : query_q ``` Each query query_i is given by: ``` 0 x title ``` or ``` 1 x ``` or ``` 2 x ``` where the first digits 0, 1, and 2 represent add, remove, and find operations respectively. Output For each find operation, print the title of the book with the given identifier or \\"Not found\\" if the book is not in the collection. Example Input ``` 6 0 1001 \\"Pride and Prejudice\\" 0 1002 \\"War and Peace\\" 0 1003 \\"1984\\" 2 1002 1 1003 2 1003 ``` Output ``` War and Peace Not found ```","solution":"class LibraryInventory: def __init__(self): self.books = {} def add(self, identifier: int, title: str): self.books[identifier] = title def remove(self, identifier: int): if identifier in self.books: del self.books[identifier] def find(self, identifier: int) -> str: return self.books.get(identifier, \\"Not found\\") def process_queries(queries): library = LibraryInventory() results = [] for query in queries: parts = query.split() op = int(parts[0]) x = int(parts[1]) if op == 0: title = \\" \\".join(parts[2:])[1:-1] library.add(x, title) elif op == 1: library.remove(x) elif op == 2: results.append(library.find(x)) return results"},{"question":"You are given an array of integers, and your task is to determine whether it is possible to reorder the array such that each number appears exactly once, and the absolute difference between each pair of consecutive elements is exactly one. -----Input----- The first line contains one integer t (1 leq t leq 10^3) — the number of test cases. The following is a description of the input data sets. The first line of each test case contains a single integer n (1 leq n leq 10^5) — the number of elements in the array. The second line of each test case contains n integers a_1, a_2, ..., a_n (-10^9 leq a_i leq 10^9) — the elements of the array. -----Output----- For each test case, print a single line \\"YES\\" if it is possible to reorder the array to meet the condition, otherwise print \\"NO\\". -----Examples----- Input 3 3 1 3 2 5 4 2 9 6 3 4 7 8 6 10 Output YES NO NO -----Note----- In the first example, the array can be reordered to [1, 2, 3]. In the second example, there is no way to reorder the elements so that the absolute difference between each pair of consecutive numbers is exactly one. In the third example, although some numbers can be consecutively reordered like [6, 7, 8], the number 10 prevents forming a sequence with a difference of exactly one between each consecutive pair.","solution":"def can_reorder_consecutively(t, test_cases): results = [] for case in test_cases: n, arr = case arr.sort() possible = all(arr[i] - arr[i-1] == 1 for i in range(1, n)) results.append(\\"YES\\" if possible else \\"NO\\") return results"},{"question":"Alice and Bob are playing a game with an array of positive integers. The rules of the game are as follows: 1. Alice and Bob take turns, starting with Alice. 2. On each turn, the player must choose an integer from the array and remove it. 3. The player gets points equal to the value of the integer they remove. 4. The game ends when all integers in the array have been removed. 5. The objective of each player is to maximize their total score. Given an array of integers, determine the sequence of integers that Alice and Bob will remove in order to maximize Alice\'s score, assuming both players play optimally. # Input - The first line contains an integer ( n ) ((1 leq n leq 100)), the length of the array. - The second line contains ( n ) space-separated positive integers ( a_1, a_2, ..., a_n ) ((1 leq a_i leq 100)), the elements of the array. # Output - Print ( n ) space-separated integers, representing the sequence of integers that Alice and Bob will remove, in the order in which they will be removed. # Example Input ``` 5 3 1 4 1 5 ``` Output ``` 5 4 3 1 1 ``` # Explanation Alice will take the largest number (5), Bob will take (4), then Alice will take the next largest number (3), Bob will take one of the (1)\'s, and finally Alice will take the last (1). This ensures that Alice\'s score is maximized.","solution":"def optimal_array_sequence(n, array): Given an array of positive integers, determine the sequence of integers that Alice and Bob will remove in order to maximize Alice\'s score, assuming both players play optimally. # Sort the array in descending order sorted_array = sorted(array, reverse=True) return sorted_array"},{"question":"The students in a programming class are learning about prime numbers and sequences. They need your help to generate a specific sequence based on prime numbers. Given a number N, generate a sequence of the first N prime numbers followed by their sum. -----Input:----- - The first-line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, one integer N. -----Output:----- For each test case, output a single line containing the first N prime numbers followed by their sum, all separated by spaces. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 50 -----Sample Input:----- 3 2 3 5 -----Sample Output:----- 2 3 5 2 3 5 10 2 3 5 7 11 28 -----EXPLANATION:----- For N = 2, the first two prime numbers are 2 and 3. The sum of these primes is 5. For N = 3, the first three prime numbers are 2, 3, and 5. The sum of these primes is 10. For N = 5, the first five prime numbers are 2, 3, 5, 7, and 11. The sum of these primes is 28.","solution":"def is_prime(num): Helper function to determine if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def generate_primes_sequence(N): Generate the first N prime numbers and their sum. primes = [] current_number = 2 while len(primes) < N: if is_prime(current_number): primes.append(current_number) current_number += 1 primes_sum = sum(primes) return primes + [primes_sum] def process_test_cases(T, test_cases): Process multiple test cases to generate desired sequences of primes. results = [] for N in test_cases: result = generate_primes_sequence(N) results.append(\\" \\".join(map(str, result))) return results # Function to read input and produce output def generate_prime_sequences_from_input(input_lines): input_data = input_lines.strip().split(\'n\') T = int(input_data[0]) test_cases = [int(input_data[i]) for i in range(1, T+1)] return process_test_cases(T, test_cases)"},{"question":"You are tasked with managing a round-robin tournament system. In this system, players compete against each other exactly once. Each player is assigned a unique ID from 1 to N. After all matches are played, you need to calculate the rank of each player based on their total score, with the player having the highest score ranked first. In case of a tie in scores, players with the same score should have the same rank. To determine the rank, the entire list of final scores needs to be sorted in descending order. The rank for each player corresponds to their position in the sorted list, taking ties into account. ---Task--- Given the number of players N and an array of final scores of the matches, calculate the rank of each player. ---Input--- The first line contains an integer N, representing the number of players. The second line contains N integers, where the i-th integer represents the score of the player with ID i. ---Output--- The output should contain N integers, where the i-th integer represents the rank of the player with ID i. ---Constraints--- 3 ≤ N ≤ 1000 ---Example--- Sample Input 1: 5 10 20 20 10 30 Sample Output 1: 4 2 2 4 1 Sample Input 2: 4 15 15 15 15 Sample Output 2: 1 1 1 1","solution":"def calculate_ranks(N, scores): Calculate ranks for players based on their scores. Args: N: Number of players scores: List containing scores of the players Returns: List of ranks corresponding to each player\'s score # Create a list of tuples (score, original_index) indexed_scores = [(score, index) for index, score in enumerate(scores)] # Sort the scores in descending order (and maintain index information) sorted_scores = sorted(indexed_scores, key=lambda x: x[0], reverse=True) # Initialize ranks ranks = [0] * N current_rank = 1 for i in range(N): if i == 0: # First element ranks[sorted_scores[i][1]] = current_rank else: # Check if the current score is the same as the previous score if sorted_scores[i][0] == sorted_scores[i-1][0]: ranks[sorted_scores[i][1]] = current_rank else: current_rank = i + 1 ranks[sorted_scores[i][1]] = current_rank return ranks # Example usage # N = 5 # scores = [10, 20, 20, 10, 30] # print(calculate_ranks(N, scores)) # Output: [4, 2, 2, 4, 1]"},{"question":"You are given an array of N integers and an integer K. Your task is to find all unique pairs of elements in the array that have a difference of K. For example, if the array is [1, 7, 5, 9, 2, 12, 3] and K = 2, the pairs with a difference of 2 are (1, 3), (3, 5), (5, 7), and (7, 9). Your task is to count the number of such unique pairs. # Input The input consists of two lines: 1. The first line contains two integers, N and K (1 leq N leq 100,000, 1 leq K leq 1,000,000,000). 2. The second line contains N integers separated by spaces, representing the elements of the array. Each element is between 1 and 1,000,000,000 inclusive. # Output Print the number of unique pairs with a difference of K. # Examples Input ``` 7 2 1 7 5 9 2 12 3 ``` Output ``` 4 ``` Input ``` 5 3 1 5 3 4 2 ``` Output ``` 2 ``` Input ``` 4 0 1 1 1 1 ``` Output ``` 1 ``` # Note - Pairs (a, b) and (b, a) are considered the same and hence should not be counted twice. - Self-pairings are only counted if K = 0.","solution":"def count_pairs_with_difference_k(arr, k): Returns the number of unique pairs in array `arr` with a difference of `k`. if k < 0: return 0 unique_elements = set(arr) count = 0 if k == 0: seen = set() for num in arr: if num in seen: continue if arr.count(num) > 1: count += 1 seen.add(num) return count for num in unique_elements: if num + k in unique_elements: count += 1 return count # Example usage # Example Input: 7 2 # 1 7 5 9 2 12 3 arr = [1, 7, 5, 9, 2, 12, 3] k = 2 print(count_pairs_with_difference_k(arr, k)) # Output should be 4"},{"question":"Given an array of integers, Takahashi would like to know the length of the longest contiguous subarray where the sum of the elements is zero. Can you help him find this length? -----Constraints----- - The array contains at least one element and at most 10,000 elements. - Each element in the array is an integer between -1,000 and 1,000 (inclusive). -----Input----- Input is given from Standard Input in the following format: n a_1 a_2 ... a_n -----Output----- Print the length of the longest contiguous subarray with a sum of zero. -----Sample Input----- 8 1 2 -2 4 -4 2 -2 1 -----Sample Output----- 6 For example, the longest contiguous subarray with sum zero is [2, -2, 4, -4, 2, -2], which has length 6.","solution":"def longest_subarray_with_zero_sum(n, arr): Returns the length of the longest contiguous subarray with a sum of zero. Parameters: n (int): the number of elements in the array arr (list of int): the array of integers Returns: int: the length of the longest contiguous subarray with a sum of zero prefix_sum = {} curr_sum = 0 max_length = 0 for i in range(n): curr_sum += arr[i] if curr_sum == 0: max_length = i + 1 if curr_sum in prefix_sum: max_length = max(max_length, i - prefix_sum[curr_sum]) else: prefix_sum[curr_sum] = i return max_length"},{"question":"You are given a list of integers. Your task is to determine if it is possible to divide the list into two non-empty subsequences such that the sum of the elements in each subsequence is the same. Input Format The first line contains an integer T, the number of test cases. This is followed by T lines, each containing an integer N which represents the number of elements in the list, followed by N integers representing the elements of the list. Output Format For each test case, print \\"YES\\" if it is possible to divide the list into two subsequences with equal sum, otherwise print \\"NO\\". Constraints 1 ≤ T ≤ 1000 1 ≤ N ≤ 100 1 ≤ Element of list ≤ 10^6 Sample Input 2 5 1 5 11 5 4 1 2 3 5 Sample Output YES NO Explanation In the first test case, it is possible to split the list into [1, 5, 5] and [11] which both have the sum 11. In the second test case, it is not possible to split the list into two subsequences with equal sum.","solution":"def can_partition(nums): total_sum = sum(nums) if total_sum % 2 != 0: return \\"NO\\" target = total_sum // 2 n = len(nums) dp = [False] * (target + 1) dp[0] = True for num in nums: for i in range(target, num - 1, -1): if dp[i - num]: dp[i] = True return \\"YES\\" if dp[target] else \\"NO\\" def process_test_cases(test_cases): results = [] for case in test_cases: N, *nums = case results.append(can_partition(nums)) return results def main(T, cases): results = process_test_cases(cases) for result in results: print(result)"},{"question":"There are N jars arranged in a line, each containing a different type of candy. Each candy type has a certain rank, determined by an integer from 1 to N, written on it such that no two jars contain candies of the same rank. Your objective is to guess the rank of candies in each jar correctly. You know the following facts: - For each i = 1, 2, ..., K, the rank of candy in jar A_i and the rank of candy in jar B_i differ by exactly C_i. You are a detective and have a special ability that allows you to check the rank of candies in any jar on demand. The cost of using this ability is 1. What is the minimum cost required to determine the rank of candies in all jars? It is guaranteed that there are no contradictions in the given input. -----Constraints----- - All values in input are integers. - 2 leq N leq 10^5 - 1 leq K leq 10^5 - 1 leq A_i, B_i leq N - 0 leq C_i leq N - The pairs (A_i, B_i) are distinct. - There is no contradiction in input. (That is, there exist integers representing ranks that satisfy the conditions.) -----Input----- Input is given from Standard Input in the following format: N K A_1 B_1 C_1 A_2 B_2 C_2 vdots A_K B_K C_K -----Output----- Print the minimum total cost required to determine the rank of candies in all jars. -----Sample Input----- 4 2 1 2 1 3 4 2 -----Sample Output----- 2 You can determine all of the candy ranks by using the ability for the first and third jars.","solution":"def min_cost_to_determine_ranks(N, K, queries): Returns the minimum cost required to determine the rank of candies in all jars. Arguments: N -- int, number of jars K -- int, number of conditions queries -- list of tuples representing conditions (A_i, B_i, C_i) import heapq # Create adjacency list for the undirected graph graph = [[] for _ in range(N + 1)] for A, B, C in queries: graph[A].append((B, C)) graph[B].append((A, C)) # Use a Priority Queue (Min Heap) for Prim\'s Algorithm pq = [] heapq.heappush(pq, (0, 1)) # Start with Jar 1, it does not matter where to start visited = [False] * (N + 1) min_cost = 0 count_visits = 0 while pq and count_visits < N: cost, node = heapq.heappop(pq) if visited[node]: continue visited[node] = True min_cost += 1 # We checked the rank of this jar count_visits += 1 for neighbor, differ in graph[node]: if not visited[neighbor]: heapq.heappush(pq, (differ, neighbor)) return min_cost"},{"question":"You are given a list of integers where each integer represents the weight of a package. Your task is to determine the minimum number of packages needed to reach exactly a given total weight W. If it\'s not possible to reach exactly the weight W using the provided packages, return -1. Input: First line contains t number of test cases. For each test case: - First line will contain a single integer W, the total weight to be reached. - Second line contains space-separated integers representing the weights of the available packages. Output: For each test case, output a single line containing the minimum number of packages needed to reach the total weight W or -1 if it\'s not possible. Constraints: 1 ≤ t ≤ 50 1 ≤ W ≤ 1000 1 ≤ number of packages ≤ 100 1 ≤ weight of each package ≤ 100 SAMPLE INPUT 2 10 1 3 4 5 7 2 3 5 SAMPLE OUTPUT 2 2 Explanation In the first test case, the total weight W is 10. The minimum number of packages to reach exactly 10 is 2 (using the packages of weight 5 and 5). In the second test case, the total weight W is 7. The minimum number of packages to reach exactly 7 is 2 (using the packages of weight 2 and 5).","solution":"def min_packages(target_weight, packages): This function determines the minimum number of packages needed to reach exactly the target_weight. If it\'s not possible to reach the target_weight using the provided packages, it returns -1. max_weight = target_weight + 1 dp = [max_weight] * (target_weight + 1) dp[0] = 0 for weight in range(1, target_weight + 1): for package in packages: if package <= weight: dp[weight] = min(dp[weight], dp[weight - package] + 1) return dp[target_weight] if dp[target_weight] != max_weight else -1 def solve(test_cases): results = [] for case in test_cases: target_weight, packages = case result = min_packages(target_weight, packages) results.append(result) return results"},{"question":"You are given a list of n integers, a_0, a_1, ..., a_{n-1}, where n is even. Your task is to split this list into two sub-lists, each containing n/2 integers, such that the absolute difference between the sums of the integers in the two sub-lists is minimized. -----Input----- The first line contains an integer n (2 le n le 10^5, n is even). The second line contains n integers a_0, a_1, ..., a_{n-1} (-10^9 le a_i le 10^9). -----Output----- Print the minimum possible absolute difference between the sums of the two sub-lists. -----Examples----- Input 4 1 2 3 4 Output 0 Input 6 -5 -3 2 1 4 6 Output 1 -----Note----- In the first example, we can split the list into two sub-lists {1, 4} and {2, 3}, each having a sum of 5, resulting in an absolute difference of 0. In the second example, one possible split could be {-5, 4, 6} and {-3, 2, 1}, which results in sums 5 and 0, respectively, and an absolute difference of 1.","solution":"def min_abs_diff(n, a): def subset_sum_closest(a, target): sums = {0} for num in a: new_sums = set() for s in sums: new_sums.add(s + num) sums.update(new_sums) closest_sum = min(sums, key=lambda x: abs(x - target)) return closest_sum total_sum = sum(a) target = total_sum // 2 half_n = n // 2 closest_sum = subset_sum_closest(a, target) another_sum = total_sum - closest_sum return abs(closest_sum - another_sum)"},{"question":"A new online game requires players to optimize the setup of a magic grid. The grid is represented by a 2D array of size n x n, filled with integers. To win the game, players need to find a special sequence in any row, column, or diagonal of the grid. The sequence we are interested in is a monotonically increasing one, which means each subsequent element is strictly larger than the previous one. The task is to determine the length of the longest monotonically increasing sequence present in the grid. Your job is to write a program that reads the grid and outputs the length of the longest monotonically increasing sequence found. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the size of the 2D grid. The next n lines contain n space-separated integers each, representing the grid. Output Print a single integer — the length of the longest monotonically increasing sequence found in any row, column, or diagonal of the grid. Examples Input 3 1 2 3 4 5 6 7 8 9 Output 3 Input 4 1 5 3 4 6 7 8 2 9 1 2 4 0 3 4 1 Output 2 Note In the first example, all rows, columns, and diagonals present a monotonically increasing sequence of length 3. In the second example, the longest monotonically increasing sequence is in the second row with the sequence (6, 7, 8). Other sequences found are shorter.","solution":"def longest_increasing_sequence(grid): n = len(grid) def longest_increasing_in_line(line): max_length = 1 current_length = 1 for i in range(1, len(line)): if line[i] > line[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length max_length = 1 # Check rows and columns for i in range(n): max_length = max(max_length, longest_increasing_in_line(grid[i])) column = [grid[j][i] for j in range(n)] max_length = max(max_length, longest_increasing_in_line(column)) # Check diagonals for d in range(-n + 1, n): diag1 = [grid[i][i - d] for i in range(max(d, 0), min(n, n + d))] diag2 = [grid[i][d + i] for i in range(max(-d, 0), min(n, n - d))] if diag1: max_length = max(max_length, longest_increasing_in_line(diag1)) if diag2: max_length = max(max_length, longest_increasing_in_line(diag2)) return max_length"},{"question":"A group of friends is playing a game where they have to stand in a circle and pass a ball in a specific pattern. The game starts with person 1 holding the ball. From then on, they pass the ball to the person who is k steps to their right. The game continues until the ball is back with person 1. You need to determine the total number of passes made in one complete round. Input Format The first line contains the number of test cases T. Each of the next T lines contains two integers N and K, where N represents the total number of friends and K represents the number of steps to pass the ball to the right. Output Format Print the number of passes for each test case in a new line. Constraints 1 ≤ T ≤ 1000 1 ≤ N ≤ 10^6 1 ≤ K < N SAMPLE INPUT 2 5 2 6 1 SAMPLE OUTPUT 5 6 Explanation Case 1: The ball is passed as follows: 1 -> 3 -> 5 -> 2 -> 4 -> 1. The ball is back with person 1 after 5 passes. Case 2: The ball is passed as follows: 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 1. The ball is back with person 1 after 6 passes.","solution":"def number_of_passes(N, K): Determines the number of passes for the ball to return to the starting person. Parameters: N (int): Total number of friends. K (int): Number of steps to pass the ball to the right. Returns: int: Number of passes made in one complete round. # Calculate the number of passes needed for the ball to return to the starting person passes = 1 current_position = K % N while current_position != 0: passes += 1 current_position = (current_position + K) % N return passes # Function to handle multiple test cases def process_test_cases(test_cases): results = [] for N, K in test_cases: results.append(number_of_passes(N, K)) return results"},{"question":"Given a binary tree, determine if it is height-balanced. A height-balanced binary tree is defined as: A binary tree in which the left and right subtrees of every node differ in height by no more than 1. Example 1: Given the following tree [3,9,20,null,null,15,7]: 3 / 9 20 / 15 7 Return true. Example 2: Given the following tree [1,2,2,3,3,null,null,4,4]: 1 / 2 2 / 3 3 / 4 4 Return false. Note: The number of nodes in the tree is in the range [0, 5000]. The values of the nodes are in the range [-10^4, 10^4].","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_balanced(root: TreeNode) -> bool: def check_height(node): if not node: return 0 left_height = check_height(node.left) right_height = check_height(node.right) if left_height == -1 or right_height == -1 or abs(left_height - right_height) > 1: return -1 return max(left_height, right_height) + 1 return check_height(root) != -1"},{"question":"You are given a sequence of integers and you need to find the minimum number of operations required to make all elements equal. In one operation, you can select any subsequence of the sequence and increase each element of the subsequence by one. Input The first line contains an integer n (1 ≤ n ≤ 100,000), the number of elements in the sequence. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1,000,000), the elements of the sequence. Output Print a single integer - the minimum number of operations required to make all elements of the sequence equal. Example Input 4 2 4 4 6 Output 3 Explanation In the first operation, you can select the subsequence [2, 4, 4] and increase each element by 1. The sequence becomes [3, 5, 5, 6]. In the second operation, you can select the subsequence [3, 5, 5] and increase each element by 1. The sequence becomes [4, 6, 6, 6]. In the final operation, you can select the subsequence [4, 6, 6] and increase each element by 1. The sequence becomes [5, 7, 7, 6]. Finally, you increase the last subsequence [5, 7, 7] to become [6, 7, 7] and then [6, 8, 8] and so on. Continue until all elements are made equal. The total number of operations is 3.","solution":"def min_operations_to_make_equal(n, sequence): Returns the minimum number of operations needed to make all elements of the sequence equal. In one operation, you can select any subsequence of the sequence and increase each element by one. max_element = max(sequence) min_element = min(sequence) return max_element - min_element"},{"question":"Jason is tasked with building a new social media application where users can follow each other and post updates. He wants to implement a feature that lists the most popular posts on the platform based on the number of likes received. To achieve this, you need to write a function that processes the posts and returns the top k most liked posts along with their respective user identifiers. -----Input----- 1. The first line contains two integers ( n ) and ( k ) (1 le n le 10^5, 1 le k le min(n, 1000)) — the number of posts and the number of top posts to return. 2. The next ( n ) lines describe the posts, each containing a string ( u ) (user identifier) and an integer ( l ) (number of likes) (1 le l le 10^6). It is guaranteed that all user identifiers have at most 10 characters and contain only alphanumeric characters. -----Output----- Print ( k ) lines, each containing the user identifier and the number of likes, sorted by the number of likes in non-increasing order. If two posts have the same number of likes, they should be ordered by user identifier in alphabetical order. -----Examples----- Input 5 3 alice 100 bob 150 carol 100 dave 200 eve 150 Output dave 200 bob 150 eve 150 Note that \\"bob 150\\" and \\"eve 150\\" are ordered alphabetically since they have the same number of likes. [End of Question]","solution":"def get_top_k_posts(n, k, posts): Returns the top k most liked posts based on the number of likes received. Parameters: n (int): The number of posts. k (int): The number of top posts to return. posts (list of tuples): A list of tuples where each tuple contains a user identifier (str) and the number of likes (int). Returns: list of tuples: A list of top k posts sorted by the number of likes in non-increasing order. If two posts have the same number of likes, they are sorted by the user identifier in alphabetical order. posts.sort(key=lambda x: (-x[1], x[0])) return posts[:k]"},{"question":"You are given an array of integers representing the height of obstacles in a path on which a hero is running. The hero can jump over obstacles, but he can only jump a fixed maximum height. The hero starts running from the beginning of the path and can clear an obstacle if the obstacle\'s height is less than or equal to the maximum height he can jump. If the hero encounters an obstacle that is too high for him to jump over, he stops there. Your task is to determine the farthest point the hero can reach without stopping. -----Input----- The first line contains one integer t (1 le t le 100) — the number of test cases. Each test case consists of two lines. The first line of a test case contains two integers n (1 le n le 100) — the number of obstacles in the path and k (1 le k le 100) — the maximum height the hero can jump. The second line contains n integers h_1, h_2, dots, h_n (1 le h_i le 100) — the heights of the obstacles in the path. -----Output----- For each test case, print one integer — the farthest point the hero can reach without stopping. If the hero can jump over all obstacles, print n. -----Examples----- Input 3 5 3 1 2 3 4 5 6 1 1 1 1 1 2 2 4 4 1 3 4 2 Output 3 4 4 -----Explanation----- In the first test case of the example: - The hero can jump over the first three obstacles with heights [1, 2, 3] but stops at the fourth obstacle which has a height of 4 since his maximum jump height is 3. In the second test case of the example: - The hero can jump over the first four obstacles with heights [1, 1, 1, 1] but stops at the fifth obstacle which has a height of 2 since his maximum jump height is 1. In the third test case of the example: - The hero can jump over all obstacles since all heights are within his maximum jump height of 4.","solution":"def farthest_point(t, test_cases): result = [] for i in range(t): n, k = test_cases[i][0] heights = test_cases[i][1] reached = 0 while reached < n and heights[reached] <= k: reached += 1 result.append(reached) return result"},{"question":"A new high-speed rail network is being designed to connect several cities in a linear arrangement. As an engineer, you are tasked with developing a system that can determine the maximum number of unique destinations a passenger can visit by taking direct trains under certain constraints. Each city is represented as a node in a 1-dimensional coordinate system. Trains can travel directly between some pairs of cities. Each passenger can start their journey from any city and can take multiple trains. However, there are two constraints: 1. A passenger cannot visit the same city more than once. 2. The travel distance of each train is non-increasing, meaning if a passenger takes a train of distance d, the next train they take must be of distance ≤ d. Your goal is to write a program to calculate the maximum number of unique cities a passenger can visit starting from any city and respecting the train distance constraint. Input The input consists of multiple test cases. Each test case has the following format: N M x1 x2 ... xN u1 v1 d1 u2 v2 d2 ... uM vM dM N (1 ≤ N ≤ 50) is the number of cities. M (0 ≤ M ≤ 100) is the number of direct train connections. xi (1 ≤ xi ≤ 1000) denotes the coordinate of the i-th city. (ui, vi) is a pair of city indices representing a direct train connection between the ui-th and vi-th cities with a distance of di (1 ≤ di ≤ 1000). The cities and train connections are 1-indexed. A line with N = 0 will denote the end of the input and should not be processed. Output For each test case, print the maximum number of unique cities a passenger can visit. Example Input 4 4 1 3 6 10 1 2 2 2 3 3 3 4 4 2 4 7 3 3 2 5 8 1 2 3 2 3 5 1 3 6 0 Output 4 3 In the example, for the first test case, a passenger can visit all cities starting from city 1 by taking trains of distances 2, 3, and 4, in that order (but can\'t use the distance 7 train). In the second test case, a passenger can visit a maximum of 3 cities starting from any city, respecting the non-increasing distance constraint.","solution":"from collections import defaultdict def max_unique_cities(N, M, cities, trains): graph = defaultdict(list) for u, v, d in trains: graph[u].append((v, d)) graph[v].append((u, d)) # Function to perform DFS with distance constraints def dfs(city, last_dist, visited): visited.add(city) max_visited = len(visited) for neighbor, dist in sorted(graph[city], key=lambda x: -x[1]): if neighbor not in visited and dist <= last_dist: max_visited = max(max_visited, dfs(neighbor, dist, visited)) visited.remove(city) return max_visited max_cities = 0 for city in range(1, N+1): max_cities = max(max_cities, dfs(city, float(\'inf\'), set())) return max_cities"},{"question":"You are given a string mbox{T}. Your task is to find all the segments of the string that contain a sequence of 3 or more consecutive digits. These segments should be maximal, i.e., they are not part of a larger segment with more than 3 consecutive digits. Input Format A single line of input containing the string mbox{T}. Constraints 0 < text{len}(T) < 200 Output Format Print each matched segment on a new line. If no segment is found, print -1. Sample Input hello1234world5670abc890123 Sample Output 1234 5670 890123 Explanation 1234 is a maximal segment of 4 consecutive digits. 5670 is a maximal segment of 4 consecutive digits. 890123 is a maximal segment of 6 consecutive digits.","solution":"import re def find_consecutive_segments(s): Finds all segments of the string containing 3 or more consecutive digits. Parameters: s (str): The input string. Returns: list: A list of matched segments or -1 if no such segment is found. segments = re.findall(r\'d{3,}\', s) return segments if segments else [-1]"},{"question":"In a list of integers, a \\"peak\\" is an element that is greater than its neighbors. Given a list of integers, find and return the index of any one of its peaks (if it exists). For an element at the start or end of the list, it only needs to be greater than one neighbor to be considered a peak. Complete the function to return the index of a peak in the given list. **Note:** The list may contain multiple peaks, but your function should return the index of only one of them. Examples * `[1, 3, 20, 4, 1, 0]` → `2` (20 is a peak) * `[10, 20, 15, 2, 23, 90, 67]` → `1` or `5` (20 and 90 are peaks)","solution":"def find_peak(nums): Finds the index of any one peak element in the list. A peak element is an element that is strictly greater than its neighbors. For an element at the edges of the list, it only needs to be greater than one neighbor. if len(nums) == 0: return -1 if len(nums) == 1: return 0 # Check if the first or last element is a peak if nums[0] >= nums[1]: return 0 if nums[-1] >= nums[-2]: return len(nums) - 1 # Check for peak in the middle of the list for i in range(1, len(nums) - 1): if nums[i] >= nums[i - 1] and nums[i] >= nums[i + 1]: return i return -1 # This will never be hit if there\'s at least one peak as the problem guarantees"},{"question":"Your task is to write a program that generates and validates a sequence of Lychrel numbers starting from a given integer n up to the maximum number of iterations m. Note: A Lychrel number is a natural number that cannot form a palindrome through the iterative process of repeatedly reversing its digits and adding the resulting numbers. Step-by-step explanation: 1. Reverse the digits of the number. 2. Add the reversed digits to the original number. 3. Check if the resulting number is a palindrome. If it is a palindrome, then the original number is not a Lychrel number. 4. If not, repeat the process until a palindrome is achieved or the maximum number of iterations is reached. 5. If no palindrome is found within the maximum number of iterations, the number is considered a Lychrel number. INPUT There will be two lines of input: - The first line contains an integer n, the starting number. - The second line contains an integer m, the maximum number of iterations. OUTPUT Output either: - The palindrome number found within the given number of iterations, or - \\"LYCHREL\\" if no palindrome is found within the given number of iterations. CONSTRAINTS 1 ≤ n ≤ 10000 1 ≤ m ≤ 500 SAMPLE INPUT 56 3 SAMPLE OUTPUT 121 SAMPLE INPUT 196 10 SAMPLE OUTPUT LYCHREL","solution":"def is_palindrome(n): return str(n) == str(n)[::-1] def reverse_number(n): return int(str(n)[::-1]) def find_lychrel(n, m): for _ in range(m): reversed_n = reverse_number(n) n += reversed_n if is_palindrome(n): return n return \\"LYCHREL\\" # Example usage: if __name__ == \\"__main__\\": n = int(input().strip()) m = int(input().strip()) print(find_lychrel(n, m))"},{"question":"In a land far away, there is a kingdom where people love strings. The king of this land has recently found a new kind of fascinating string operation. Given a string S, the king can perform the following operation any number of times: Choose two distinct indices i and j (1 ≤ i < j ≤ |S|), and swap the characters at positions i and j. The king wants to know the lexicographically smallest string he can achieve by performing this operation any number of times. Note: A string A is lexicographically smaller than another string B if: A is a proper prefix of B (for example, \\"123\\" is lexicographically smaller than \\"1234\\"); or There exists an index i such that A_{1} = B_{1}, A_{2} = B_{2}, ..., A_{i-1} = B_{i-1} and A_{i} < B_{i}. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of a single line of input containing the original string S. ------ Output Format ------ For each test case, output on a new line the lexicographically smallest string that the king can achieve. ------ Constraints ------ 1 ≤ T ≤ 2cdot 10^{4} 1 ≤ |S| ≤ 10^{5} S will contain only lowercase English letters. - The sum of |S| across all test cases will not exceed 3cdot 10^{5}. ----- Sample Input 1 ------ 3 dcba hello leetcode ----- Sample Output 1 ------ abcd ehllo cdeeelot ----- Explanation ------ Test case 1: The lexicographically smallest string can be obtained by sorting \\"dcba\\" to get \\"abcd\\". Test case 2: The string \\"hello\\" can be rearranged to \\"ehllo\\", which is the lexicographically smallest possible string. Test case 3: Sorting \\"leetcode\\" will result in the lexicographically smallest string \\"cdeeelot\\".","solution":"def lexicographically_smallest_string(s): Returns the lexicographically smallest string that can be obtained by any number of swaps return \'\'.join(sorted(s)) def smallest_strings_from_cases(t, test_cases): Given T and a list of test cases, return a list of lexicographically smallest strings result = [] for s in test_cases: result.append(lexicographically_smallest_string(s)) return result"},{"question":"You are given a list of integers. Your task is to reverse the list without using looping or built-in reverse functions. Example 1: Input: arr = [1, 2, 3, 4, 5] Output: [5, 4, 3, 2, 1] Explanation: The list [1, 2, 3, 4, 5] is reversed to [5, 4, 3, 2, 1]. Example 2: Input: arr = [10, 20, 30, 40] Output: [40, 30, 20, 10] Explanation: The list [10, 20, 30, 40] is reversed to [40, 30, 20, 10]. Your Task: You don\'t need to read input. Your task is to complete the function reverseList() which takes a list of integers arr as an input parameter and returns the reversed list without using looping or built-in reverse functions. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ len(arr) ≤ 10000","solution":"def reverseList(arr): Reverses a list of integers without using looping or built-in reverse functions. if len(arr) == 0: return arr return reverseList(arr[1:]) + [arr[0]]"},{"question":"There\'s a large rectangular garden with dimensions N x M. Each cell in the garden can either have a tree or be empty. You are given a binary matrix representing the garden; \'1\' indicates a tree, and \'0\' indicates an empty cell. Your task is to determine the size of the largest square area of the garden that does not contain any trees. Write a function `largestEmptySquare(N, M, garden)` where: - `N` is the number of rows in the garden - `M` is the number of columns in the garden - `garden` is a list of N strings, each string of length M, representing rows of the garden matrix The function should return the area of the largest square that contains only empty cells (\'0\'). # Input - The first line contains two integers, N and M, representing the number of rows and columns in the garden, respectively. - The next N lines each contain a string of length M, consisting of \'0\'s and \'1\'s denoting empty cells and trees respectively. # Output - A single integer, the area of the largest square that contains only empty cells. # Constraints 1 ≤ N, M ≤ 300 # Sample Input ``` 4 5 10010 00000 11110 01001 ``` # Sample Output ``` 4 ``` # Explanation The largest square of empty cells has a size of 2x2 = 4 cells.","solution":"def largestEmptySquare(N, M, garden): # Create a 2D DP array initialized to 0 dp = [[0] * M for _ in range(N)] # Initialize max side length of the square max_side = 0 # Iterate over the garden matrix for i in range(N): for j in range(M): # If we are on a tree cell, continue if garden[i][j] == \'1\': dp[i][j] = 0 else: # If we are at the first row or first column, take the value from the garden if i == 0 or j == 0: dp[i][j] = 1 if garden[i][j] == \'0\' else 0 else: # Update the DP value based on the minimum of three neighbors dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 # Update the maximum side length max_side = max(max_side, dp[i][j]) # The area of the largest square return max_side * max_side"},{"question":"Given an array of positive integers, transform the array such that each element is equal to the sum of itself and all the previous elements in the array. You are required to do this transformation in place and in linear time. # Input - One line containing space-separated positive integers representing the elements of the array. # Output - One line containing space-separated integers representing the transformed array. # Constraints - The length of the input array does not exceed (10^6). - Each integer in the array is between 1 and (10^7). # Example Input 1 2 3 4 5 Output 1 3 6 10 15 Input 10 20 30 40 Output 10 30 60 100 # Explanation In the first example: - The first element remains 1. - The second element becomes (1 + 2 = 3). - The third element becomes (1 + 2 + 3 = 6). - The fourth element becomes (1 + 2 + 3 + 4 = 10). - The fifth element becomes (1 + 2 + 3 + 4 + 5 = 15). In the second example: - The first element remains 10. - The second element becomes (10 + 20 = 30). - The third element becomes (10 + 20 + 30 = 60). - The fourth element becomes (10 + 20 + 30 + 40 = 100).","solution":"def transform_array(arr): Transforms the array inplace such that each element at index i is the sum of itself and all previous elements in the array. Parameters: arr (list of int): The input list of positive integers. Returns: None: The function modifies the input list in place. for i in range(1, len(arr)): arr[i] += arr[i - 1]"},{"question":"**Alien Dictionary Order** Given a list of words from an alien language\'s dictionary, where the order of the alphabetical characters is unknown, create a function that determines the order of the characters. The function should take a list of strings as input, where each string represents a word from the dictionary, and return a string that represents the smallest lexicographical order of characters from the alien dictionary. You can assume that the order is consistent and there are no cycles in the order. # Example ```python def alien_dictionary(words): # Your code here words = [\\"wrt\\", \\"wrf\\", \\"er\\", \\"ett\\", \\"rftt\\"] print(alien_dictionary(words)) # Output: \\"wertf\\" words = [\\"z\\", \\"x\\"] print(alien_dictionary(words)) # Output: \\"zx\\" words = [\\"z\\", \\"x\\", \\"z\\"] print(alien_dictionary(words)) # Output: \\"\\" ``` **Note:** - Return an empty string if there is no valid order. - The input list is guaranteed to be non-empty and contain at least one word. - The words consist of only lowercase English letters. - The function should handle the largest words list of up to 10,000 words and each word up to 100 letters.","solution":"from collections import defaultdict, deque def alien_dictionary(words): Determines the order of characters in an alien language given a list of words in that language. # Create a graph graph = defaultdict(set) in_degree = {char: 0 for word in words for char in word} # Build the graph for i in range(len(words) - 1): first_word, second_word = words[i], words[i + 1] min_length = min(len(first_word), len(second_word)) # Check for invalid order like [\\"abc\\", \\"ab\\"] if len(first_word) > len(second_word) and first_word[:min_length] == second_word[:min_length]: return \\"\\" for j in range(min_length): if first_word[j] != second_word[j]: if second_word[j] not in graph[first_word[j]]: graph[first_word[j]].add(second_word[j]) in_degree[second_word[j]] += 1 break # Topological Sort (Kahn\'s algorithm) queue = deque([char for char in in_degree if in_degree[char] == 0]) result = [] while queue: current_char = queue.popleft() result.append(current_char) for neighbor in graph[current_char]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) if len(result) != len(in_degree): return \\"\\" return \\"\\".join(result)"},{"question":"Helga is organizing a charity event where n families will receive food baskets. Each food basket must contain at least one loaf of bread and one bottle of water. Helga currently has m loaves of bread and k bottles of water. Determine whether Helga can prepare exactly n complete food baskets for the families, ensuring each basket gets at least one loaf of bread and one bottle of water. -----Input----- The first line contains three integers n, m, and k (1 leq n, m, k leq 100) — the number of families, the number of loaves of bread, and the number of bottles of water respectively. -----Output----- Print \\"Possible\\" if it is feasible to prepare the required number of food baskets. Otherwise, print \\"Impossible\\". You can print each word in any case (upper or lower). -----Examples----- Input 4 10 8 Output Possible Input 6 14 6 Output Impossible Input 7 7 10 Output Possible -----Note----- In the first example, there are 4 families. Helga has 10 loaves of bread and 8 bottles of water, which is sufficient to prepare 4 baskets, each containing one loaf of bread and one bottle of water. In the second example, there are 6 families. Helga has 14 loaves of bread but only 6 bottles of water, which means she does not have enough bottles of water to prepare 6 baskets. In the third example, there are 7 families. Helga has exactly 7 loaves of bread and 10 bottles of water, which is just enough to prepare 7 baskets.","solution":"def can_prepare_baskets(n, m, k): Determine if it\'s possible to prepare n food baskets, each containing at least one loaf of bread and one bottle of water. Parameters: n (int): Number of families. m (int): Number of loaves of bread. k (int): Number of bottles of water. Returns: str: \\"Possible\\" if it is feasible to prepare the required number of food baskets, otherwise \\"Impossible\\". if m >= n and k >= n: return \\"Possible\\" else: return \\"Impossible\\""},{"question":"You are given a sequence of integers. Your task is to determine whether you can reorder the sequence to form an arithmetic progression. An arithmetic progression is a sequence of numbers such that the difference of any two successive members is a constant. INPUT: First line contains t, the number of test cases. For each test case: - The first line contains an integer n, the length of the sequence. - The second line contains n integers separated by spaces representing the sequence. OUTPUT: Output t lines, one for each test case. Print \\"YES\\" if you can reorder the sequence to form an arithmetic progression. Print \\"NO\\" if you cannot. Constraints: 1 < t ≤ 100 2 ≤ n ≤ 1000 -10^6 ≤ sequence[i] ≤ 10^6 SAMPLE INPUT 3 4 3 5 1 7 5 2 4 6 8 1 3 3 6 9 SAMPLE OUTPUT YES NO YES","solution":"def can_form_arithmetic_progression(n, sequence): sequence.sort() common_difference = sequence[1] - sequence[0] for i in range(2, n): if sequence[i] - sequence[i - 1] != common_difference: return \\"NO\\" return \\"YES\\" def process_test_cases(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] sequence = test_cases[i][1] results.append(can_form_arithmetic_progression(n, sequence)) return results"},{"question":"You are given an array of integers. The following algorithm needs to be applied to find a special type of subsequence: 1. Find the longest subsequence where every element is a prime number. 2. If there are multiple subsequences of the same maximum length, choose the one with the smallest sum. 3. If there is still a tie, choose the lexicographically smallest subsequence. Determine the longest subsequence of primes as described. -----Input----- The first line contains a single integer n (1 leq n leq 10^5), the size of the array. The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9), the elements of the array. -----Output----- Print the longest subsequence of prime numbers that meets the criteria described above. Output the elements of the subsequence in the order they appear in the original array. -----Examples----- Input 10 1 3 5 4 9 11 13 6 7 17 Output 3 5 11 13 7 17 Input 6 4 6 8 10 12 14 Output (Note: Output is empty as there are no prime numbers.) -----Note----- In the first example, the longest subsequence of prime numbers is [3, 5, 11, 13, 7, 17]. In the second example, there are no prime numbers in the array, so the output is empty.","solution":"import math def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def longest_prime_subsequence(arr): # Filter out prime numbers from the array primes = [num for num in arr if is_prime(num)] # Return the primes as the required subsequence return primes"},{"question":"You are given an array of n integers a_1, a_2, ..., a_n and an integer k. You have to perform exactly k operations on the array. In each operation, you should choose two different elements of the array and replace both of them with their maximum. Your task is to determine the maximum possible value of a_1 + a_2 + ... + a_n after the k operations. -----Input----- The first line of the input contains two integers n and k (2 leq n leq 1000, 0 leq k leq n(n-1)/2) — the number of elements in the array and the number of operations. The second line contains n integers a_1, a_2, ..., a_n (1 leq a_i leq 10^9) — the elements of the array. -----Output----- Print one integer — the maximum possible value of a_1 + a_2 + ... + a_n after k operations. -----Example----- Input 4 2 1 2 3 4 Output 16 -----Note----- In the example, we can choose (3, 4) and replace both with 4. The array becomes [1, 2, 4, 4]. Then, we can choose (2, 4) and replace both with 4. The array becomes [1, 4, 4, 4]. The maximum possible sum after 2 operations is therefore 1 + 4 + 4 + 4 = 13 + 4 = 16.","solution":"def max_sum_after_operations(n, k, arr): Determine the maximum possible sum of the array after k operations. Parameters: n (int): Number of elements in the array. k (int): Number of operations to perform. arr (list of ints): The array of integers. Returns: int: The maximum possible value of the sum of the array after k operations. if k == 0: return sum(arr) max_value = max(arr) return max_value * n"},{"question":"In a city, there are various attractions placed on a grid of size n x n. The city grid coordinates are given such that the top-left corner is (1, 1) and the bottom-right corner is (n, n). Each attraction has a popularity score represented by a positive integer. Your task as a city planner is to determine the maximum popularity score that can be achieved by visiting a subgrid of size k x k. For example, given a grid of size 4 x 4 and k = 2, you want to find the 2 x 2 subgrid that has the highest sum of popularity scores. Input: The first line contains two integers n and k (1 ≤ k ≤ n ≤ 1000) representing the size of the grid and the size of the subgrid respectively. The next n lines each contain n integers, where each integer represents the popularity score of an attraction at that position in the grid (1 ≤ score ≤ 106). Output: Output a single integer representing the maximum popularity score that can be achieved by visiting a k x k subgrid. Example: Input 4 2 1 3 5 2 7 1 8 6 3 4 2 0 8 7 6 5 Output 22 Explanation: In the example, one of the optimal 2 x 2 subgrids is: 7 1 3 4 The sum of this subgrid is 7 + 1 + 3 + 4 = 15, which is less than other possible subgrids. The optimal 2 x 2 subgrid with the highest sum is: 8 6 7 6 The sum of this subgrid is 8 + 6 + 7 + 1 = 22 which is the maximum.","solution":"def max_subgrid_sum(n, k, grid): Returns the maximum popularity score that can be achieved by visiting a k x k subgrid. Parameters: n (int): Size of the grid (n x n) k (int): Size of the subgrid (k x k) grid (list): 2D list representing the n x n grid with popularity scores Returns: int: Maximum popularity score of a k x k subgrid # Initialize the maximum sum to a very small number max_sum = -float(\'inf\') for i in range(n - k + 1): for j in range(n - k + 1): # Calculate sum of k x k subgrid starting at (i, j) current_sum = 0 for p in range(k): for q in range(k): current_sum += grid[i + p][j + q] # Update max_sum if we found a new max if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"You are given an unsorted list of integers. Your task is to sort the list in non-decreasing order by repeatedly reversing the order of some contiguous subarray of the list. You need to determine the minimum number of such operations required to sort the list, or determine that it is impossible to sort the list using this method. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of elements in the list. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the list. Output On the first line print the minimum number of operations required to sort the list, or -1 if it is impossible. On the following k lines, print the pairs of indices (l, r) that specify the subarray [l, r] which you need to reverse in order to sort the list. If there are several solutions, output any. Examples Input 3 3 1 2 Output 2 1 3 1 2 Input 5 5 4 3 2 1 Output 1 1 5 Input 4 1 3 2 4 Output 1 2 3","solution":"def minimum_reverse_operations(n, array): Determine the minimum number of operations required to sort the list in non-decreasing order by reversing the order of some contiguous subarray. sorted_array = sorted(array) if array == sorted_array: return 0, [] result = [] left = 0 # Find the first mismatching pair from the beginning while array[left] == sorted_array[left]: left += 1 right = n - 1 # Find the first mismatching pair from the end while array[right] == sorted_array[right]: right -= 1 while left < right: result.append((left + 1, right + 1)) array[left:right + 1] = array[left:right + 1][::-1] while left < n and array[left] == sorted_array[left]: left += 1 while right >= 0 and array[right] == sorted_array[right]: right -= 1 if left < right: result.append((left + 1, right + 1)) array[left:right + 1] = array[left:right + 1][::-1] if array == sorted_array: break if array != sorted_array: return -1, [] return len(result), result"},{"question":"Write a function that takes a positive integer `n` and returns the nth prime number. Prime numbers are positive integers greater than 1 that have no positive integer divisors other than 1 and themselves. > For example, if `n = 6`, the function should return `13` since the first six prime numbers are `2, 3, 5, 7, 11, and 13`. You can assume that the input `n` will always be a positive integer. *Prime number calculation is a fundamental exercise in mathematics and algorithms*","solution":"def nth_prime(n): Returns the nth prime number. Args: n: A positive integer which represents the nth prime to find. Returns: The nth prime number. if n == 1: return 2 primes = [2] candidate = 3 while len(primes) < n: is_prime = True for prime in primes: if prime * prime > candidate: break if candidate % prime == 0: is_prime = False break if is_prime: primes.append(candidate) candidate += 2 return primes[-1]"},{"question":"Aria loves reading books and she has a large collection of them. Each of her books has a unique serial number from 1 to n. She decides to organize her books in such a way that the difference between the serial numbers of any two consecutive books in a row is a prime number. Aria wants to organize her books in the longest possible row that satisfies this condition. Your task is to help Aria determine the length of the longest row she can create and output the serial numbers in this row. If there are multiple possible rows of the same length, you can output any one of them. -----Input----- A single integer n (1 ≤ n ≤ 100), the number of books in Aria\'s collection. -----Output----- The first line must contain a single integer k, representing the length of the longest row she can create. The second line should contain k integers — the serial numbers of the books in this row. -----Example----- Input 10 Output 3 1 2 3 Input 15 Output 5 1 2 3 5 7","solution":"def is_prime(num): Check if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def longest_prime_row(n): Calculate the longest row of books with consecutive prime differences. primes = [i for i in range(n+1) if is_prime(i)] seq = [1] for i in range(2, n+1): found = False for prime in primes: if prime > n: break if seq[-1] + prime <= n and (seq[-1] + prime) not in seq: seq.append(seq[-1] + prime) found = True break if not found: break return len(seq), seq # Sample usage: n = 10 k, sequence = longest_prime_row(n) print(k) print(\' \'.join(map(str, sequence)))"},{"question":"Given an integer array, `arr`, and an integer, `k`, write a function that returns the `k` most frequent elements. The returned elements should be in descending order of their frequency. If there are multiple elements with the same frequency, return them in ascending order. Input Format - The first line contains two integers, `n` and `k` — the size of the array and the number `k`. - The second line contains `n` integers separated by spaces representing the elements of the array. Constraints - 1 leq n leq 10^5 - 1 leq k leq n - -10^4 leq arr[i] leq 10^4 Output Format - Return the `k` most frequent elements in descending order of their frequency. If multiple elements have the same frequency, they should be sorted in ascending order. Sample Input 0 6 2 1 1 1 2 2 3 Sample Output 0 1 2 Explanation 0 The input array is [1, 1, 1, 2, 2, 3] and k = 2. The most frequent element is 1 (three times), followed by 2 (two times). So, the output is [1, 2]. Sample Input 1 8 3 4 4 4 1 1 2 2 3 Sample Output 1 4 1 2 Explanation 1 The input array is [4, 4, 4, 1, 1, 2, 2, 3] and k = 3. The most frequent element is 4 (three times), followed by 1 and 2 (both appearing twice). Since 1 and 2 have the same frequency, they are sorted in ascending order. So, the output is [4, 1, 2].","solution":"from collections import Counter def k_most_frequent_elements(arr, k): Returns the k most frequent elements in the array arr. The elements are returned in descending order of their frequency. If multiple elements have the same frequency, they are sorted in ascending order. frequency_counter = Counter(arr) sorted_elements = sorted(frequency_counter.items(), key=lambda x: (-x[1], x[0])) return [element for element, freq in sorted_elements[:k]] # Example usage: # arr = [4, 4, 4, 1, 1, 2, 2, 3] # k = 3 # print(k_most_frequent_elements(arr, k)) # Output: [4, 1, 2]"},{"question":"Given an array A of N integers, process Q queries of the following types: - 1 K V: Update the K-th element of the array to V. - 2 L R: Compute the sum of all integers from the L-th to the R-th element (inclusive). Write a program to handle the operations efficiently. -----Constraints----- - 1 ≤ N ≤ 10^5 - 1 ≤ Q ≤ 10^5 - 1 ≤ A[i] ≤ 10^9 - 1 ≤ K ≤ N - 1 ≤ L ≤ R ≤ N - 1 ≤ V ≤ 10^9 -----Input----- The first line contains an integer N, the number of elements in the array. The second line contains N integers representing the array A. The third line contains an integer Q, the number of queries. The next Q lines describe the queries in the format \\"1 K V\\" or \\"2 L R\\". -----Output----- For each query of type 2, print the sum of the specified subarray. -----Sample Input----- 5 1 2 3 4 5 3 2 2 4 1 3 10 2 1 5 -----Sample Output----- 9 22","solution":"class SegmentTree: def __init__(self, n): self.n = n self.tree = [0] * (2 * n) def build(self, arr): # Build the tree, initially copy the array elements into the tree leaves for i in range(self.n): self.tree[self.n + i] = arr[i] # Build the rest of the tree by combining child nodes for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[2 * i] + self.tree[2 * i + 1] def update(self, idx, value): # Update the value at index idx idx += self.n self.tree[idx] = value # Update the rest of the tree accordingly while idx > 1: idx //= 2 self.tree[idx] = self.tree[2 * idx] + self.tree[2 * idx + 1] def range_sum(self, left, right): # Get the sum from range left to right (inclusive) left += self.n right += self.n + 1 total = 0 while left < right: if left % 2: total += self.tree[left] left += 1 if right % 2: right -= 1 total += self.tree[right] left //= 2 right //= 2 return total def process_queries(N, A, queries): seg_tree = SegmentTree(N) seg_tree.build(A) result = [] for query in queries: q_type, x, y = query if q_type == 1: seg_tree.update(x - 1, y) elif q_type == 2: result.append(seg_tree.range_sum(x - 1, y - 1)) return result"},{"question":"In a kingdom far far away, there are n provinces connected by bidirectional roads. Each road connects two distinct provinces and has a certain length. The king wants to establish a new capital in one of these provinces so that the maximum distance from the capital to any other province is minimized. Your task is to help the king find this optimal capital. Input The first line of the input contains an integer n (1 ≤ n ≤ 10^5), the number of provinces. Each of the next n-1 lines contains three space-separated integers u, v and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^9), which denote that province u and province v are connected by a road of length w. It is guaranteed that there is exactly one path between any two provinces. Output Print a single integer, the province number that should be chosen as the capital. If there are multiple answers, print the smallest one. Example Input 3 1 2 3 2 3 4 Output 2 Note In the example, if the capital is province 1, the maximum distance to another province is 7 (to province 3). If the capital is province 2, the maximum distance to another province is 4 (to province 3). If the capital is province 3, the maximum distance to another province is 4 (to province 1). Hence, the optimal choice is province 2.","solution":"def find_optimal_capital(n, roads): from collections import defaultdict, deque def bfs(start_node): max_dist = [0] * (n + 1) visited = [False] * (n + 1) queue = deque([(start_node, 0)]) visited[start_node] = True farthest_node = start_node max_distance = 0 while queue: node, dist = queue.popleft() if dist > max_distance: max_distance = dist farthest_node = node for neighbor, weight in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, dist + weight)) max_dist[neighbor] = dist + weight return farthest_node, max_distance, max_dist # Step 1: Build the graph graph = defaultdict(list) for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) # Step 2: Use BFS from any node to find the farthest node farthest_node_from_start, _, _ = bfs(1) # Step 3: Use BFS from the farthest node found opposite_farthest_node, _, dist_from_first_extreme = bfs(farthest_node_from_start) # Step 4: Use BFS from the opposite farthest node found _, _, dist_from_second_extreme = bfs(opposite_farthest_node) # Step 5: Determine the optimal capital optimal_distance = min( max(dist_from_first_extreme[i], dist_from_second_extreme[i]) for i in range(1, n + 1) ) optimal_capital = min( i for i in range(1, n + 1) if max(dist_from_first_extreme[i], dist_from_second_extreme[i]) == optimal_distance ) return optimal_capital # Example and testing n = 3 roads = [(1, 2, 3), (2, 3, 4)] print(find_optimal_capital(n, roads)) # Output should be 2"},{"question":"You are given two arrays of integers, A and B, each containing n elements. Your task is to determine if there is a pair of integers (one from each array) such that their bitwise AND operation results in at least one \'1\' bit in its binary representation. Input The first line contains an integer n (1 ≤ n ≤ 1000) which is the number of elements in each array. The second line contains n integers, representing the elements of array A. The third line contains n integers, representing the elements of array B. Each integer in the arrays is between 0 and 1000, inclusive. Output Print \\"YES\\" if there exists at least one pair (A[i], B[j]) such that (A[i] & B[j]) != 0. Otherwise, print \\"NO\\". Examples Input 3 1 2 3 4 5 6 Output YES Input 3 8 8 8 1 1 1 Output NO","solution":"def has_pair_with_nonzero_bitwise_and(n, A, B): Determines if there is a pair of integers (one from each array) such that their bitwise AND operation results in at least one \'1\' bit in its binary representation. :param n: int, number of elements in each array :param A: list of int, array A of n integers :param B: list of int, array B of n integers :return: str, \'YES\' if there exists at least one pair (A[i], B[j]) such that (A[i] & B[j]) != 0, else \'NO\' for i in A: for j in B: if i & j != 0: return \\"YES\\" return \\"NO\\""},{"question":"Given an array of integers, write a function that determines whether it is possible to partition the array into two subsets such that the sum of the elements in both subsets is the same. If it is possible, return `True`, otherwise return `False`. # Example ```python can_partition([1, 5, 11, 5]) # returns True because the array can be partitioned as [1, 5, 5] and [11] can_partition([1, 2, 3, 5]) # returns False because there is no way to partition the array into equal sum subsets ``` # Constraints - The length of the array will be between 1 and 200, inclusive. - Each element in the array will be a positive integer less than 100.","solution":"def can_partition(nums): Determine if the array can be partitioned into two subsets with equal sum. total_sum = sum(nums) # If the total sum is odd, we can\'t split it equally into two parts if total_sum % 2 != 0: return False target = total_sum // 2 n = len(nums) # Create a boolean array to store whether a certain sum can be achieved dp = [False] * (target + 1) dp[0] = True for num in nums: for i in range(target, num - 1, -1): dp[i] = dp[i] or dp[i - num] return dp[target]"},{"question":"John is planning an experiment with his class of n students to measure teamwork and collective problem-solving abilities. He decides to conduct the experiment using a relay race format, where each student runs a section of the race and hands off a baton to one of their friends to continue the race. Each student can directly pass the baton to only one of their friends. John realizes that the success of the experiment greatly depends on the efficiency of the handoff process. Specifically, he wants to ensure there are no potential delays caused by mistakenly choosing a handoff sequence that doesn\'t allow every student to participate in the relay. Can you help John check whether it is possible to create a sequence such that every student can pass the baton exactly once to one of their friends, and thus everyone participates in the relay exactly once? -----Input----- The first line contains two integers n and m (2 leq n leq 200, 0 leq m leq 250), the number of students in John\'s class and the number of pairs of friends. Each student is identified by a unique integer between 1 and n. Each of the next m lines contains two integers p and q (1 leq p, q leq n), indicating that students p and q are friends and thus can pass the baton between each other. -----Output----- Output \\"possible\\" if it\'s feasible to form a relay sequence where every student participates exactly once, or \\"impossible\\" if it cannot be done. -----Examples----- Sample Input: 4 4 1 2 2 3 3 4 4 1 Sample Output: possible Sample Input: 5 4 1 2 2 3 3 4 4 5 Sample Output: impossible","solution":"def is_hamiltonian_cycle(n, edges): from collections import defaultdict def dfs(current, start, visited, count): if count == n: return start in graph[current] for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True if dfs(neighbor, start, visited, count + 1): return True visited[neighbor] = False return False graph = defaultdict(list) for p, q in edges: graph[p].append(q) graph[q].append(p) for i in range(1, n + 1): visited = {j: False for j in range(1, n + 1)} visited[i] = True if dfs(i, i, visited, 1): return \\"possible\\" return \\"impossible\\" # This part reads input from the user or a file def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) edges = [] index = 2 for _ in range(m): p = int(data[index]) q = int(data[index + 1]) edges.append((p, q)) index += 2 result = is_hamiltonian_cycle(n, edges) print(result)"},{"question":"You are organizing a coding competition with multiple rounds. Each round has a different set of problems with varying levels of difficulty. Each problem is assigned a score, and participants want to maximize their total score by selecting a subset of problems from each round. Because of the diversity of participants, you have decided to ensure that each selected subset has at least one problem from each round. Given the number of rounds, problems in each round, and their corresponding scores, find the maximum score a participant can achieve by selecting a subset of problems such that at least one problem is selected from each round. Input - The first line contains an integer `r` (1 ≤ r ≤ 100), the number of rounds. - The second line contains `r` integers, where the i-th integer `ni` (1 ≤ ni ≤ 1000) represents the number of problems in the i-th round. - The next `n1 + n2 + ... + nr` lines describe the scores of each problem in each round. The scores for the problems in round 1 come first, followed by the scores for the problems in round 2, and so on. Each line contains a single integer `si` (-1000 ≤ si ≤ 1000) representing the score of a problem. Output Print a single integer representing the maximum score a participant can achieve under the given conditions. Example Input 3 2 3 2 4 2 3 8 -1 0 7 5 Output 20 Explanation In this example, there are 3 rounds. In the first round, there are 2 problems with scores 4 and 2. In the second round, there are 3 problems with scores 3, 8, and -1. In the third round, there are 2 problems with scores 0 and 7. The optimal selection to maximize the score while ensuring at least one problem is chosen from each round could be: select the problem with a score of 4 from the first round, the problem with a score of 8 from the second round, and the problem with a score of 7 from the third round, resulting in a total score of 4 + 8 + 7 = 19. However, if the scores allow a higher total with a different selection constraints, it should be considered accordingly.","solution":"def max_score(r, problem_counts, scores): Given the number of rounds, problems in each round, and their corresponding scores, find the maximum score a participant can achieve by selecting a subset of problems such that at least one problem is selected from each round. max_scores = [] index = 0 for count in problem_counts: round_scores = scores[index:index + count] max_scores.append(max(round_scores)) index += count return sum(max_scores) # Example input r = 3 problem_counts = [2, 3, 2] scores = [4, 2, 3, 8, -1, 0, 7] print(max_score(r, problem_counts, scores)) # Output should be 19"},{"question":"Consider a matrix of size MxN, where M and N are positive integers. The task is to rotate the matrix elements in an anti-clockwise direction. Write a function that takes a matrix as input and modifies it to represent the anti-clockwise rotated matrix. Example 1: Input: Matrix: 1 2 3 4 5 6 7 8 9 Output: 3 6 9 2 5 8 1 4 7 Explanation: The matrix is rotated anti-clockwise by 90 degrees. Example 2: Input: Matrix: 1 2 3 4 5 6 Output: 2 4 6 1 3 5 Explanation: The matrix is rotated anti-clockwise by 90 degrees. Your Task: The task is to complete the function `rotateMatrixAntiClockwise(matrix: List[List[int]]) -> List[List[int]]` which takes a 2D list (the matrix) and returns the rotated matrix. Expected Time Complexity: O(M*N) Expected Auxiliary Space: O(1) (no extra space should be used beyond the input matrix for the transformation) Constraints: 1 <= M, N <= 1000 1 <= matrix[i][j] <= 10^4","solution":"def rotateMatrixAntiClockwise(matrix): Rotates a given MxN matrix 90 degrees anti-clockwise. :param matrix: List[List[int]], the input matrix :return: Rotated matrix if not matrix or not matrix[0]: return [] M = len(matrix) N = len(matrix[0]) rotated_matrix = [[0] * M for _ in range(N)] for i in range(M): for j in range(N): rotated_matrix[N - j - 1][i] = matrix[i][j] return rotated_matrix"},{"question":"In a given string, a \\"word\\" is defined as a continuous sequence of alphabetic characters, separated by non-alphabetic characters or the start/end of the string. Write a function that takes a string and returns the longest word found within the string. If there are multiple words of the same length, return the word that appears first. For example, in the input string \\"The quick brown fox jumped over the lazy dog\\", the longest word is \\"jumped\\". You may assume that the input string will always contain at least one word. The function should handle both uppercase and lowercase characters, but the returned word should match the original case as found in the input string. Examples: - `find_longest_word(\\"The quick brown fox jumped over the lazy dog\\")` should return `\\"jumped\\"` - `find_longest_word(\\"A journey of a thousand miles begins with a single step\\")` should return `\\"thousand\\"` - `find_longest_word(\\"May the force be with you\\")` should return `\\"force\\"` Note that non-alphabetic characters include spaces, punctuation marks, and numbers.","solution":"import re def find_longest_word(s): # Use a regular expression to split the string into words words = re.findall(r\\"[a-zA-Z]+\\", s) # Find the longest word longest_word = max(words, key=len) return longest_word"},{"question":"# Pascal\'s Triangle Sum Given a row number `n`, generate the elements of Pascal\'s Triangle up to that row and calculate the sum of the elements in the specified row. Pascal\'s Triangle is a triangular array of the binomial coefficients arranged in an incremental form. Each number in Pascal\'s Triangle is the sum of the two directly above it. The layout of Pascal\'s Triangle is as follows: ``` 1 1 1 1 2 1 1 3 3 1 1 4 6 4 1 ... ``` The n-th row in Pascal\'s Triangle contains the coefficients of the binomial expansion of ((x + y)^n) and starts with `1`. For example, the 4th row is `1, 4, 6, 4, 1`. Input - An integer `n` (0 ≤ n ≤ 50) representing the row number of Pascal\'s Triangle to be generated and summed. Output - A single integer representing the sum of the elements in the n-th row of Pascal\'s Triangle. Example ``` Input 4 Output 16 ``` ``` Input 0 Output 1 ``` ``` Input 6 Output 64 ``` Explanation - For input `4`, the 4th row of Pascal\'s Triangle is `1, 4, 6, 4, 1`, and the sum of these elements is `1 + 4 + 6 + 4 + 1 = 16`. - For input `0`, the 0th row of Pascal\'s Triangle is `1`, and the sum of this row is `1`. - For input `6`, the 6th row of Pascal\'s Triangle is `1, 6, 15, 20, 15, 6, 1`, and the sum of these elements is `1 + 6 + 15 + 20 + 15 + 6 + 1 = 64`.","solution":"def pascals_triangle_row_sum(n): Returns the sum of the elements in the n-th row of Pascal\'s Triangle. # The sum of the n-th row in Pascal\'s Triangle is given by 2^n return 2**n"},{"question":"Given a list of events where each event is represented by a triplet [userName, eventType, timestamp]. The userName is a string that denotes the name of the user, eventType is a string that denotes the type of the event, and timestamp is an integer that denotes the time when the event occurred. Your task is to return a summary of user activity. The summary should list each user and under each user, list the event types they engaged in along with the count of occurrences of each event type for that user. Return the summary as a list of lists, where the users are sorted in alphabetical order and, for each user, the event types are also sorted in alphabetical order. Each sublist should start with the user’s name followed by pairs of event types and their counts. Example 1: Input: events = [[\\"Alice\\", \\"login\\", 5], [\\"Bob\\", \\"play\\", 10], [\\"Alice\\", \\"play\\", 15], [\\"Alice\\", \\"logout\\", 20], [\\"Bob\\", \\"login\\", 30], [\\"Alice\\", \\"login\\", 35]] Output: [[\\"Alice\\", \\"login\\", 2, \\"logout\\", 1, \\"play\\", 1], [\\"Bob\\", \\"login\\", 1, \\"play\\", 1]] Explanation: Alice has performed the following events: - login: 2 times - logout: 1 time - play: 1 time Bob has performed the following events: - login: 1 time - play: 1 time Example 2: Input: events = [[\\"Carl\\", \\"view\\", 1], [\\"Carl\\", \\"click\\", 2], [\\"Carl\\", \\"click\\", 10], [\\"Carl\\", \\"view\\", 15]] Output: [[\\"Carl\\", \\"click\\", 2, \\"view\\", 2]] Explanation: Carl has performed the following events: - click: 2 times - view: 2 times Example 3: Input: events = [[\\"Dave\\", \\"watch\\", 5], [\\"Eve\\", \\"listen\\", 7], [\\"Dave\\", \\"listen\\", 14], [\\"Eve\\", \\"watch\\", 20], [\\"Eve\\", \\"listen\\", 25]] Output: [[\\"Dave\\", \\"listen\\", 1, \\"watch\\", 1], [\\"Eve\\", \\"listen\\", 2, \\"watch\\", 1]] Explanation: Dave has performed the following events: - listen: 1 time - watch: 1 time Eve has performed the following events: - listen: 2 times - watch: 1 time Constraints: 1 <= events.length <= 10^4 events[i].length == 3 1 <= userName.length, eventType.length <= 20 userName and eventType consist of lowercase and uppercase English letters. 0 <= timestamp <= 10^9","solution":"def user_activity_summary(events): from collections import defaultdict user_events = defaultdict(lambda: defaultdict(int)) for user, event, timestamp in events: user_events[user][event] += 1 result = [] for user in sorted(user_events.keys()): user_summary = [user] for event in sorted(user_events[user].keys()): user_summary.append(event) user_summary.append(user_events[user][event]) result.append(user_summary) return result"},{"question":"You are given a list of integers arr and an integer k. Your task is to determine if there exists a contiguous subarray of length exactly k that has the sum equal to a given value target. -----Input----- The first line contains an integer n (1 le n le 10^5), the number of elements in the array. The second line contains n integers representing the elements of the array arr (-10^9 le arr[i] le 10^9). The third line contains two integers k and target (1 le k le n, -10^{18} le target le 10^{18}). -----Output----- Print \\"YES\\" if such a subarray exists, otherwise print \\"NO\\". You may print each letter in any case (YES, yes, Yes will all be recognized as positive answer, NO, no and nO will all be recognized as negative answer). -----Examples----- Input 6 1 2 3 4 5 6 3 6 Output YES Input 5 1 -1 1 -1 1 2 0 Output YES Input 4 1 2 3 4 2 10 Output NO -----Note----- In the first example, the subarray [1, 2, 3] has a sum of 6, which matches the `target`. In the second example, the subarray [1, -1], [-1, 1], [1, -1], and [-1, 1] all have a sum of 0, matching the `target`. In the third example, no subarray of length 2 has a sum of 10.","solution":"def has_subarray_with_sum(arr, k, target): Determines if there exists a contiguous subarray of length exactly k that has a sum equal to target. n = len(arr) if k > n: return \\"NO\\" current_sum = sum(arr[:k]) if current_sum == target: return \\"YES\\" for i in range(k, n): current_sum += arr[i] - arr[i - k] if current_sum == target: return \\"YES\\" return \\"NO\\""},{"question":"Given two strings, `A` and `B`, find the length of the smallest string that contains both `A` and `B` as subsequences. That means their letters appear in order, but do not need to be contiguous. You have to determine the length of the smallest possible string that includes both `A` and `B` as subsequences. Input: - The first line contains an integer, `T`, the number of test cases. - For each test case, two lines follow. The first line contains string `A`, and the second line contains string `B`. Output: - For each test case, print the length of the smallest string that contains both `A` and `B` as subsequences. Constraints: - 1 <= T <= 100 - 1 <= |A|, |B| <= 1000 - Both strings contain only lowercase English letters. SAMPLE INPUT 2 abc ac horizon noz SAMPLE OUTPUT 3 8 Explanation: For the first test case, the smallest string that contains both `abc` and `ac` as subsequences is `abc`, and its length is `3`. For the second test case, the smallest string that contains both `horizon` and `noz` as subsequences is `horizonoz`, and its length is `8`.","solution":"def lcs_length(A, B): Helper function to find the length of the Longest Common Subsequence (LCS) of A and B. m = len(A) n = len(B) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if A[i - 1] == B[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n] def smallest_supersequence_length(A, B): Function to find the length of the smallest string that contains both A and B as subsequences. lcs_len = lcs_length(A, B) return len(A) + len(B) - lcs_len def smallest_supersequence_lengths(test_cases): Function to process multiple test cases and return the results. results = [] for A, B in test_cases: results.append(smallest_supersequence_length(A, B)) return results"},{"question":"Greg loves arrays and has recently come across the concept of \\"Nice Arrays.\\" An array is called a \\"Nice Array\\" if for any three elements a, b, and c in it, the condition a + b + c = 0 holds true for at least one triplet (i, j, k) with i < j < k. To help Greg understand and work with Nice Arrays, you have been tasked with a challenge. Given an array of integers, determine if it is a Nice Array or not. -----Input----- The first line contains one integer t (1 leq t leq 100) — the number of test cases. The following is a description of the input data sets. The first line of each test case contains one integer n (1 leq n leq 100) — the number of elements in the array. The second line of each test case contains n integers a_1, a_2, ldots, a_n (-10^9 leq a_i leq 10^9) — the elements of the array. -----Output----- For each test case, output \\"YES\\" if the corresponding array is a Nice Array, and \\"NO\\" if it is not. You can print \\"YES\\" and \\"NO\\" in any case (for example, the strings \\"yEs\\", \\"yes\\", \\"Yes\\" will be recognized as a positive answer). -----Examples----- Input 3 3 1 -2 1 5 3 1 -4 0 2 4 -1 1 -1 1 Output YES YES NO -----Note----- In the first test case, the triplet (1, -2, 1) satisfies the condition 1 + (-2) + 1 = 0. In the second test case, the triplet (3, 1, -4) satisfies the condition 3 + 1 + (-4) = 0. In the third test case, no triplet can satisfy the condition a + b + c = 0.","solution":"def is_nice_array(arr): Given an array of integers, determine if it is a Nice Array or not. n = len(arr) if n < 3: return False # Check every combination of triplets in the array for i in range(n - 2): for j in range(i + 1, n - 1): for k in range(j + 1, n): if arr[i] + arr[j] + arr[k] == 0: return True return False def nice_arrays(test_cases): Determine if each array in the list of test cases is a Nice Array or not. Args: - test_cases (list): A list of lists, where each inner list represents test case. Returns: - list: List of strings \\"YES\\" or \\"NO\\" for each respective test case. results = [] for case in test_cases: if is_nice_array(case): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Sophia is responsible for managing the sales data at a retail store. She needs to analyze the performance of various products over time and determine if there are any patterns in their sales. Specifically, Sophia wants to identify the longest streak for each product where the sales number either consistently increases or decreases day by day. Can you help her by writing a program that analyzes the sales data and finds the longest streak for each product? Each streak can be either increasing or decreasing but cannot mix the two. In case of a tie, return the first longest streak in the given sales data order. -----Input----- The input consists of: - one line with an integer n (1 leq n leq 1000), the number of products. - n sets of lines, each set contains: - one line with an integer m (1 leq m leq 1000), the number of days for which sales data is available for that product. - one line with m integers representing the sales numbers on each day for that product. -----Output----- For each product, output the length of the longest streak where the sales consistently increase or decrease. -----Examples----- Sample Input: 2 6 3 5 2 8 11 6 4 1 2 4 3 Sample Output: 3 3","solution":"def longest_streak(n, sales_data): results = [] for i in range(n): m = sales_data[i][0] sales = sales_data[i][1] max_length = 1 current_increase_length = 1 current_decrease_length = 1 for j in range(1, m): if sales[j] > sales[j - 1]: current_increase_length += 1 current_decrease_length = 1 elif sales[j] < sales[j - 1]: current_decrease_length += 1 current_increase_length = 1 else: current_increase_length = 1 current_decrease_length = 1 max_length = max(max_length, current_increase_length, current_decrease_length) results.append(max_length) return results # Sample input from question description for testing purpose n = 2 sales_data = [ (6, [3, 5, 2, 8, 11, 6]), (4, [1, 2, 4, 3]) ] print(longest_streak(n, sales_data)) # Output should be [3, 3]"},{"question":"You are given a list of students along with their grades in a particular subject. Your task is to find the student with the highest grade. If there are multiple students with the highest grade, return the first student (based on their order of appearance in the input list). ------ Input Format ------ - The first line contains an integer N, the number of students. - The next N lines each contain a string followed by an integer, denoting the student name and their grade, respectively. ------ Output Format ------ Output the name of the student with the highest grade. ------ Constraints ------ 1 ≤ N ≤ 1000 1 ≤ grade ≤ 100 Each student name consists of only uppercase and lowercase English letters and has a length between 1 and 100. ------ Sample Input 1 ------ 5 Alice 85 Bob 92 Charlie 87 David 92 Eva 90 ------ Sample Output 1 ------ Bob ------ Explanation 1 ------ Bob and David both have the highest grade of 92, but Bob appears first in the input list. Therefore, Bob is returned as the student with the highest grade.","solution":"def highest_grade_student(N, students): Returns the name of the student with the highest grade. :param N: Integer, the number of students :param students: List of tuples, each containing the student name and grade :return: String, the name of the student with the highest grade max_grade = -1 top_student = \'\' for student in students: name, grade = student if grade > max_grade: max_grade = grade top_student = name return top_student"},{"question":"You are given a string containing only lowercase alphabetical characters. You need to find the longest substring with distinct characters and return its length. If there are multiple such substrings with the same length, return the first one encountered. Example 1: Input: \\"abcabcbb\\" Output: 3 Explanation: The longest substring with distinct characters is \\"abc\\". Example 2: Input: \\"bbbbb\\" Output: 1 Explanation: The longest substring with distinct characters is \\"b\\". Example 3: Input: \\"pwwkew\\" Output: 3 Explanation: The longest substring with distinct characters is \\"wke\\". Note: The length of the given string will be in the range [1, 1000].","solution":"def longest_distinct_substring_length(s): Returns the length of the longest substring with distinct characters. Args: s (str): Input string containing only lowercase alphabetical characters. Returns: int: The length of the longest substring with distinct characters. n = len(s) start = 0 max_length = 0 char_index_map = {} for end in range(n): if s[end] in char_index_map: start = max(char_index_map[s[end]] + 1, start) char_index_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Given an integer array `arr` and an integer `k`, find the k-th largest element in the array. Example 1: Input: arr = [3,2,1,5,6,4], k = 2 Output: 5 Example 2: Input: arr = [3,2,3,1,2,4,5,5,6], k = 4 Output: 4 Example 3: Input: arr = [1], k = 1 Output: 1 Example 4: Input: arr = [3,1,2,4], k = 2 Output: 3 Constraints: - 1 <= k <= arr.length <= 1000 - -10^4 <= arr[i] <= 10^4","solution":"def find_kth_largest(arr, k): Returns the k-th largest element in the array `arr`. arr.sort(reverse=True) return arr[k - 1]"},{"question":"Given a string str, write a function to reverse the order of words in the given string. Words are separated by dots. Example 1: Input: str = \\"i.like.this.program.very.much\\" Output: \\"much.very.program.this.like.i\\" Example 2: Input: str = \\"hello.world\\" Output: \\"world.hello\\" Your Task: You don\'t need to read any input. Your task is to complete the function reverseWords() which takes the string as input and returns the string with the word order reversed. Expected time complexity: O(n) Expected space complexity: O(n) Constraints: 1 <= |str| <= 10^5","solution":"def reverseWords(s: str) -> str: Reverses the order of words in a given string where words are separated by dots. Args: s: A string with words separated by dots. Returns: A string with the word order reversed. if not s: return s words = s.split(\'.\') reversed_words = words[::-1] return \'.\'.join(reversed_words)"},{"question":"Given a 2D integer matrix, process q queries, each having one of the following forms: * 1 x y v — Set the value of the element at position (x, y) to v. * 2 x1 y1 x2 y2 — Output the sum of all elements in the submatrix from (x1, y1) to (x2, y2), inclusive. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the matrix, respectively. The second line contains an integer q (1 ≤ q ≤ 10000) — the number of queries to process. The next n lines contain m integers each, representing the initial state of the matrix. The next q lines describe the queries and may have one of the following forms: * 1 x y v (1 ≤ x ≤ n, 1 ≤ y ≤ m) * 2 x1 y1 x2 y2 (1 ≤ x1 ≤ x2 ≤ n, 1 ≤ y1 ≤ y2 ≤ m) Output For each query of type 2, output the required sum in a separate line. Examples Input 3 3 4 1 2 3 4 5 6 7 8 9 4 2 1 1 3 3 1 2 2 10 2 1 1 3 3 2 2 2 3 3 Output 45 49 33 Note Consider the first sample case. Initially, the sum of all elements in the range [(1, 1), (3, 3)] is 45. After the update, the matrix becomes: 1 2 3 4 10 6 7 8 9 The updated sum of all elements in the range [(1, 1), (3, 3)] is 49. Finally, the sum of elements in the range [(2, 2), (3, 3)] is 33.","solution":"class MatrixProcessor: def __init__(self, matrix): self.matrix = matrix self.n = len(matrix) self.m = len(matrix[0]) def update(self, x, y, v): self.matrix[x-1][y-1] = v def query_sum(self, x1, y1, x2, y2): total_sum = 0 for i in range(x1-1, x2): for j in range(y1-1, y2): total_sum += self.matrix[i][j] return total_sum"},{"question":"The Kingdom of Mathematica is hosting a series of programming contests to celebrate its annual \\"Mathematical Excellence Week.\\" The contests are structured uniquely. There are N participants, each with a unique skill level. The contests are held in multiple rooms, and each room can accommodate exactly K participants. The contest organizers want to ensure that each room is balanced in terms of the skill levels of the participants. To determine the balance of a room, the skill difference between the highest and lowest skilled participant in that room is used. The balance of the entire contest is defined as the maximum skill difference among all rooms. Your task is to find the optimal arrangement of participants such that the balance of the contest is minimized. For example, suppose N = 6 and K = 3, and the skill levels of the participants are as follows: [7, 2, 5, 10, 8, 6] An optimal arrangement would be [2, 5, 6] and [7, 8, 10] which has balances of 4 and 3, respectively, and the overall balance is max(4, 3) = 4. -----Input format----- The first line of input contains two integers N and K, representing the number of participants and the number of participants per room, respectively. The second line contains N space-separated integers representing the skill levels of the participants. -----Output format----- The output should contain a single integer, the minimized balance of the contest. -----Test Data----- The test data is grouped into two subtasks with the following constraints on the inputs. • Subtask 1 [30 points] : 1 ≤ N ≤ 1000, N is a multiple of K. • Subtask 2 [70 points] : 1 ≤ N ≤ 200000, N is a multiple of K. In both the subtasks, the skill levels are in the range 1 to 100000, inclusive. -----Example----- Here is the sample input and output corresponding to the example above. -----Sample input----- 6 3 7 2 5 10 8 6 -----Sample output----- 4 -----Note:----- Your program should not print anything other than what is specified in the output format. Please remove all diagnostic print statements before making your final submission. A program with extraneous output will be treated as incorrect!","solution":"def minimize_balance(N, K, skills): Returns the minimized balance of the contest. skills.sort() balance = 0 for i in range(0, N, K): current_balance = skills[i + K - 1] - skills[i] balance = max(balance, current_balance) return balance"},{"question":"Write a function that takes a string of words and returns a new string where each word is reversed but the order of words remains the same. For example: ``` reverse_words(\\"Pirates are cunning and ferocious\\") ``` Should return `\\"setariP era gninnuc dna suoicoref\\"` Maintain the spacing between words and ensure that the input and output have the same case and punctuation. Good luck!","solution":"def reverse_words(sentence): Takes a string of words and returns a new string where each word is reversed but the order of words remains the same. reversed_sentence = \' \'.join(word[::-1] for word in sentence.split()) return reversed_sentence"},{"question":"Given an integer array, the task is to rearrange the array elements such that positive and negative numbers appear alternately. If the number of positive and negative numbers differs, the extra numbers should appear at the end of the array while maintaining their original order relative to each other. The rearrangement should be done using O(1) extra space. Example 1: Input: n = 5 arr[] = {2, -1, -3, 4, 5} Output: {2, -1, 4, -3, 5} Explanation: There are three positive numbers 2, 4 and 5 and two negative numbers -1 and -3. After rearrangement, one of the possible outcomes is {2, -1, 4, -3, 5}. Example 2: Input: n = 4 arr[] = {-5, -2, 3, 7} Output: {3, -5, 7, -2} Explanation: There are two positive numbers 3 and 7 and two negative numbers -5 and -2. After rearrangement, one of the possible outcomes is {3, -5, 7, -2}. Your Task: The task is to complete the function rearrange() which takes the array arr[] of size n as input and modifies the array in-place according to the above conditions. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 10^7 -10^6 <= arr[i] <= 10^6","solution":"def rearrange(arr): Rearranges an array such that positive and negative elements are placed alternately. Any extra elements (when there are uneven numbers of positive and negative elements) should be appended at the end in their original relative order. n = len(arr) pos_idx = 0 neg_idx = 1 while True: while pos_idx < n and arr[pos_idx] >= 0: pos_idx += 2 while neg_idx < n and arr[neg_idx] < 0: neg_idx += 2 if pos_idx < n and neg_idx < n: arr[pos_idx], arr[neg_idx] = arr[neg_idx], arr[pos_idx] else: break return arr"},{"question":"Write a function that takes a string as input and returns a new string with each word reversed but with the words in the original order. Characters that are not part of a word (e.g., punctuation, spaces) should remain in their original location, so the function must handle and preserve these non-alphabetic characters appropriately. Sample Input: \\"This is a test!\\" Sample Output: \\"sihT si a tset!\\" Try not to use built-in functions like `split()` or `reverse()` to directly reverse the words. Instead, implement the logic manually to practice control flow constructs.","solution":"def reverse_words_in_string(s): This function takes a string as input and returns a new string with each word reversed but with the words in the original order. Any characters that are not part of a word (e.g., punctuation, spaces) remain in their original locations. def reverse_word(word): result = \'\' for char in word: result = char + result return result new_string = [] word = [] for char in s: if char.isalpha(): word.append(char) else: if word: new_string.append(reverse_word(\'\'.join(word))) word = [] new_string.append(char) if word: new_string.append(reverse_word(\'\'.join(word))) return \'\'.join(new_string)"},{"question":"You\'re given a grid of characters where each cell contains a single lowercase letter. You need to identify the largest rectangular subgrid where all characters are the same. -----Input----- The first line contains two integers, n and m (1 le n, m le 1000) — the number of rows and the number of columns in the grid. Each of the next n lines contains a string of m characters representing the grid. -----Output----- Print an integer a — the area of the largest rectangular subgrid containing the same character. -----Examples----- Input 3 4 aaaa aabb aabb Output 4 Input 4 5 abcde fghij klmno pqrst Output 1 Input 5 5 aaaaa aaaaa aaaaa aaaaa aaaaa Output 25 -----Note----- In the first example, the largest rectangular subgrid is the 2x2 area filled with \'a\' from the top-left corner. In the second example, each character is different, so the largest subgrid containing the same character is any individual cell. In the third example, the entire grid is filled with \'a\', making the largest subgrid the whole 5x5 area.","solution":"def largest_uniform_subgrid(grid): n = len(grid) m = len(grid[0]) if n == 0 or m == 0: return 0 dp = [[0] * m for _ in range(n)] max_area = 0 for i in range(n): for j in range(m): if i == 0: dp[i][j] = 1 if j == 0 or grid[i][j] == grid[i][j - 1] else 1 else: if j == 0: dp[i][j] = 1 if grid[i][j] == grid[i - 1][j] else 1 else: if grid[i][j] == grid[i - 1][j] and grid[i][j] == grid[i][j - 1] and grid[i][j] == grid[i - 1][j - 1]: dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1 else: dp[i][j] = 1 max_area = max(max_area, dp[i][j]**2) return max_area"},{"question":"Given a set of N elements, find the pair of elements with the smallest absolute difference between them. Example 1: Input: N = 5 arr = [3, 8, 15, 17, 9] Output: 1 Explanation: The pair (8, 9) has the smallest absolute difference of 1. Example 2: Input: N = 3 arr = [10, 24, 40] Output: 14 Explanation: The pair (10, 24) has the smallest absolute difference of 14. Your Task: You don\'t need to read input or print anything. Your task is to complete the function smallestDifference() which takes an integer N and a list of N integers arr as input parameters and returns the smallest absolute difference between any two elements in the array. Expected Time Complexity: O(N log N) Expected Space Complexity: O(1) Constraints: 2 <= N <= 10^{5} 1 <= arr[i] <= 10^{9}","solution":"def smallestDifference(N, arr): Returns the smallest absolute difference between any two elements in the array. if N < 2: return None # When there are less than 2 elements, return None arr.sort() # Sort the array to find the smallest differences efficiently smallest_diff = float(\'inf\') # Iterate through the array to find the minimum difference between consecutive pairs for i in range(N - 1): diff = abs(arr[i] - arr[i + 1]) if diff < smallest_diff: smallest_diff = diff return smallest_diff"},{"question":"Given a string, determine if it has all unique characters. Input The input consists of a single line containing a string s (1 ≤ |s| ≤ 100). The string can contain any printable ASCII characters. Output Output \\"Yes\\" if the string has all unique characters and \\"No\\" otherwise. Examples Input abcdefg Output Yes Input abac Output No","solution":"def has_all_unique_characters(s): Returns \'Yes\' if the string s has all unique characters, otherwise \'No\'. if len(set(s)) == len(s): return \\"Yes\\" else: return \\"No\\" # Alternative, more optimized solution # def has_all_unique_characters(s): # # Returns \'Yes\' if the string s has all unique characters, otherwise \'No\'. # # char_set = set() # for char in s: # if char in char_set: # return \'No\' # char_set.add(char) # return \'Yes\'"},{"question":"You are given an array `A` of `n` integers. Your task is to perform a range update operation and answer queries about the array after the updates have been applied. 1. **Range Update Operation**: You will be given multiple operations, each specified by three integers `l`, `r`, and `x`. For each operation, add `x` to all the elements in the subarray `A[l...r]` (i.e., all the elements in the range from index `l` to `r`, inclusive). 2. **Queries**: After all the range updates, you\'ll be given a set of queries, where each query is an index `k`. For each query, return the value of `A[k]`. # Input The first line contains two integers `n` (1 ≤ n ≤ 10^5) and `m` (1 ≤ m ≤ 10^5), the size of the array and the number of operations, respectively. The second line contains `n` space-separated integers, the initial values of the array `A`. The next `m` lines each contain three space-separated integers `l`, `r`, and `x` (1 ≤ l ≤ r ≤ n, -10^6 ≤ x ≤ 10^6), representing an update operation. The following line contains a single integer `q` (1 ≤ q ≤ 10^5), the number of queries. The next `q` lines each contain a single integer `k` (1 ≤ k ≤ n), representing an index in the array. # Output For each query, output the value of `A[k]` after all the update operations have been applied. # Sample Input ``` 5 3 1 2 3 4 5 1 3 2 2 5 3 1 2 -1 4 1 2 3 5 ``` # Sample Output ``` 2 6 8 8 ``` # Explanation - Initial array: `[1, 2, 3, 4, 5]` - After first operation `[1, 3, 4, 6, 5]` (add 2 to indices 1 to 3) - After second operation `[1, 6, 7, 9, 8]` (add 3 to indices 2 to 5) - After third operation `[2, 5, 7, 9, 8]` (subtract 1 from indices 1 to 2) Queries ask for values at index positions 1, 2, 3, and 5: - `A[1] = 2` - `A[2] = 5` - `A[3] = 7` - `A[5] = 8`","solution":"def range_update_operations_and_queries(n, m, A, operations, q, queries): Performs range update operations on array A and answers queries. :param n: int - size of the array :param m: int - number of operations :param A: list - initial array of size n :param operations: list of tuples - each tuple contains (l, r, x) :param q: int - number of queries :param queries: list of ints - indices to be queried :return: list of results for each query # Initialize difference array diff = [0] * (n + 1) # Apply the range updates using difference array for l, r, x in operations: diff[l-1] += x if r < n: diff[r] -= x # Apply the difference array to the original array to get the final values for i in range(n): if i > 0: diff[i] += diff[i-1] A[i] += diff[i] # Answer the queries result = [] for k in queries: result.append(A[k-1]) return result"},{"question":"You are given a list of integers. Identify the integer in the list that occurs an odd number of times. It is guaranteed that exactly one integer in the list occurs an odd number of times, while all other integers occur an even number of times. -----Constraints----- - 1 leq length of the list leq 1000 - 1 leq each integer in the list leq 1000 - Exactly one integer occurs an odd number of times. -----Input----- Input is given from Standard Input in the following format: n a1 a2 a3 ... an Where n is the length of the list and a1, a2, a3, ..., an are the integers in the list. -----Output----- Print the integer that occurs an odd number of times. -----Sample Input----- 5 2 3 3 2 4 -----Sample Output----- 4 In this example, the integer 4 occurs once (an odd number of times), while integers 2 and 3 occur twice (an even number of times).","solution":"def find_odd_occurrence(lst): Identifies the integer in the list that occurs an odd number of times. Parameters: lst (list): List of integers where exactly one integer occurs an odd number of times. Returns: int: The integer that occurs an odd number of times. xor_result = 0 for num in lst: xor_result ^= num return xor_result"},{"question":"Binary Tree Construction You are given two sequences, `preorder` and `inorder`, which represent the preorder and inorder traversals of a binary tree. Your task is to construct the binary tree from these sequences and return its root. Both sequences do not contain duplicate elements. Task Write a function `buildTree(preorder, inorder)` to construct the binary tree and return the root node. Definition for a binary tree node: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` Function Signature: ```python def buildTree(preorder: List[int], inorder: List[int]) -> TreeNode: ``` # Input - `preorder`: A list of integers representing the preorder traversal of the tree. - `inorder`: A list of integers representing the inorder traversal of the tree. Constraints - `1 <= len(preorder), len(inorder) <= 3000` - `preorder` and `inorder` consist of unique integers. # Output - Return the root of the binary tree. # Example Input ```plaintext preorder = [3, 9, 20, 15, 7] inorder = [9, 3, 15, 20, 7] ``` Output ```python TreeNode { val: 3, left: TreeNode { val: 9, left: None, right: None }, right: TreeNode { val: 20, left: TreeNode { val: 15, left: None, right: None }, right: TreeNode { val: 7, left: None, right: None } } } ``` In the binary tree structure, the node with value 3 is the root, the node with value 9 is the left child, and the node with value 20 is the right child. The node with value 20 has two children: 15 (left child) and 7 (right child).","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def buildTree(preorder, inorder): if not preorder or not inorder: return None # The first element in preorder traversal is the root root_val = preorder[0] root = TreeNode(root_val) # Find the index of the root in inorder traversal mid = inorder.index(root_val) # Recursively build the left and right subtrees root.left = buildTree(preorder[1:mid+1], inorder[:mid]) root.right = buildTree(preorder[mid+1:], inorder[mid+1:]) return root"},{"question":"In a certain country, there are many rivers and lakes connected by waterfalls. Each waterfall allows water to flow in one direction from a river to a lake or from a lake to another body of water. Some lakes have multiple incoming waterfalls, but there’s always one unique path for water to flow from the main river to any lake. Given a map of this country’s river and lake system, determine the furthest lake from the main river, based on the number of waterfalls water has to pass through to reach the lake. The main river is identified as node 1 in the map. Input The first line of the input contains two integers n and m (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^5) — the number of rivers and lakes (nodes) and the number of waterfalls (edges), respectively. Each of the next m lines contains two integers u_i and v_i (1 ≤ u_i, v_i ≤ n, u_i ≠ v_i) — indicating that there is a waterfall flowing from node u_i to node v_i. It is guaranteed that there is exactly one unique path from the main river to any other node. Output Print a single integer k — the number of the furthest lake from the main river. If there are multiple furthest lakes with the same distance, print the smallest numbered one. Examples Input 6 5 1 2 1 3 2 4 3 5 5 6 Output 6 Input 5 4 1 2 1 3 2 4 2 5 Output 4 Note In the first example, the furthest lake from the main river (node 1) is node 6, and the unique path to it is 1-3-5-6. In the second example, the furthest lakes from the main river (node 1) are nodes 4 and 5, both at a distance of 2 waterfalls. Since we need to return the smallest numbered lake in the case of ties, the correct output is 4.","solution":"from collections import deque, defaultdict def find_furthest_lake(n, m, edges): graph = defaultdict(list) for u, v in edges: graph[u].append(v) # Performing BFS to find the furthest node queue = deque([(1, 0)]) # (current_node, current_distance) max_distance = -1 furthest_node = -1 while queue: node, distance = queue.popleft() if distance > max_distance: max_distance = distance furthest_node = node elif distance == max_distance: furthest_node = min(furthest_node, node) for neighbor in graph[node]: queue.append((neighbor, distance + 1)) return furthest_node"},{"question":"You are given two arrays A and B, each containing N integers. You are to determine the number of unique elements in both arrays that have the same value. ------ Input Format ------ - The first line contains an integer, T, the number of test cases. - Each test case starts with an integer N, the number of elements in arrays A and B. - The next line contains N integers representing the elements of array A. - The following line contains N integers representing the elements of array B. ------ Output Format ------ For each test case, output a single integer, the count of unique elements that are present in both arrays. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ A[i], B[i] ≤ 1000 ----- Sample Input 1 ------ 3 5 1 2 3 4 5 5 4 3 2 1 4 1 1 2 2 2 3 4 5 3 9 8 7 7 6 5 ----- Sample Output 1 ------ 5 2 1 ----- Explanation 1 ------ Test Case 1: All elements 1, 2, 3, 4, 5 are present in both arrays. Test Case 2: Elements 2 is present in both arrays. Test Case 3: Element 7 is present in both arrays.","solution":"def count_common_unique_elements(arr1, arr2): Returns the count of unique elements that are present in both arrays. set1 = set(arr1) set2 = set(arr2) common_elements = set1.intersection(set2) return len(common_elements) def count_common_elements_in_test_cases(t, test_cases): Processes multiple test cases and returns a list of results. results = [] for case in test_cases: n, arr1, arr2 = case result = count_common_unique_elements(arr1, arr2) results.append(result) return results"},{"question":"Bob loves programming and is passionate about special sequences. One day, he came up with a challenge involving a specific type of sequence that fascinated him. Your task is to help Bob find whether a given sequence is a \\"Special Sequence\\" as per his definition. A sequence of integers is considered a \\"Special Sequence\\" if it satisfies the following criteria: 1. The sequence is strictly increasing. 2. The sequence can be divided into exactly two non-empty subsequences such that one subsequence contains only even numbers and the other subsequence contains only odd numbers. Given a sequence of integers, determine whether it is a \\"Special Sequence\\" or not. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100000) — the number of elements in the sequence. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 100000) — the elements of the sequence. -----Output----- Output a single line containing \\"YES\\" if the sequence is a \\"Special Sequence,\\" otherwise output \\"NO\\". -----Examples----- Input 5 1 2 3 4 5 Output YES Input 4 1 3 5 7 Output NO -----Note----- In the first example, the sequence can be divided into the subsequences {2, 4} (even) and {1, 3, 5} (odd), which are both strictly increasing. In the second example, the sequence consists entirely of odd numbers, so it cannot be divided into two required subsequences.","solution":"def is_special_sequence(n, sequence): Determines if the given sequence is a \\"Special Sequence\\" as per the defined criteria. :param n: int - The number of elements in the sequence :param sequence: list of int - The elements of the sequence :return: str - \\"YES\\" if the sequence is a \\"Special Sequence\\", otherwise \\"NO\\" if n < 2: return \\"NO\\" even_numbers = [x for x in sequence if x % 2 == 0] odd_numbers = [x for x in sequence if x % 2 != 0] if len(even_numbers) == 0 or len(odd_numbers) == 0: return \\"NO\\" prev = -1 for num in sequence: if num <= prev: return \\"NO\\" prev = num return \\"YES\\""},{"question":"Alice and Bob love playing with numbers. Today, they are playing a game where they pick a positive integer `k` and try to find a sequence of integers of length `k` from the multiset `S`. The multiset `S` contains `n` integers. Alice and Bob want to ensure that the arithmetic mean of the integers in their sequence is greater than a given value `a`. Given multiple test cases, your task is to help Alice and Bob determine if it is possible to select such a sequence from the multiset `S`. Input The first line contains a single integer `t` (1 ≤ t ≤ 100) — the number of test cases. The first line of each test case contains three integers `n`, `k`, and `a` (1 ≤ n, k ≤ 100, -1000 ≤ a ≤ 1000), where `n` is the number of integers in the multiset `S`, `k` is the length of the sequence to be chosen, and `a` is the threshold value. The second line of each test case contains `n` integers `S_i` (-1000 ≤ S_i ≤ 1000), representing the multiset `S`. Output For each test case, output \\"YES\\" if it is possible to select a sequence of length `k` from the multiset `S` such that its arithmetic mean is greater than `a`. Otherwise, output \\"NO\\". Example Input 3 5 3 5 1 2 3 7 9 6 2 8 5 9 12 1 1 2 4 1 0 -1 -2 -3 -4 Output YES YES NO Note In the first test case, the sequence [7, 9, 3] has an arithmetic mean of 6.33 which is greater than 5. In the second test case, the sequence [9, 12] has an arithmetic mean of 10.5 which is greater than 8. In the third test case, there is no sequence with a positive mean, so it is impossible to have a mean greater than 0.","solution":"def is_mean_greater_than_a(n, k, a, S): Determines if it is possible to select a sequence of length k from the multiset S such that its arithmetic mean is greater than a. S.sort(reverse=True) selected_sequence = S[:k] mean_of_sequence = sum(selected_sequence) / k return mean_of_sequence > a def process_test_cases(test_cases): results = [] for t in test_cases: n, k, a = t[\'n\'], t[\'k\'], t[\'a\'] S = t[\'S\'] if is_mean_greater_than_a(n, k, a, S): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A large corporation wants to secure their internal communication by encrypting their messages. They decide to use a simple encryption algorithm described below. Each message is a string consisting of lowercase letters. The encryption works by shifting each letter in the string by a certain number of positions down the alphabet. For example, with a shift of 3, \'a\' would be transformed to \'d\', \'b\' to \'e\', and so on. Letters near the end of the alphabet wrap around, so \'z\' with a shift of 1 becomes \'a\'. Given this shift value, your task is to write a program that encrypts the given message. -----Constraints----- - The length of the string is between 1 and 10^5. - The shift value is between 1 and 25. - The string consists of lowercase letters only. -----Input----- Input is given from Standard Input in the following format: Message Shift -----Output----- Print the encrypted message. -----Sample Input----- hello 3 -----Sample Output----- khoor","solution":"def encrypt_message(message, shift): Encrypt the given message by shifting each letter in the message by the given shift value. Parameters: message (str): A string consisting of lowercase letters shift (int): The number of positions to shift each letter down the alphabet Returns: str: The encrypted message encrypted_message = [] for char in message: # Calculate the new character and handle wrap-around using modulo operation new_char = chr((ord(char) - ord(\'a\') + shift) % 26 + ord(\'a\')) encrypted_message.append(new_char) return \'\'.join(encrypted_message)"},{"question":"Given a string s and an integer array indices of the same length, reorder the string such that the character at the i-th position moves to indices[i] in the resulting string. Example 1: Input: s = \\"codeleet\\", indices = [4,5,6,7,0,2,1,3] Output: \\"leetcode\\" Explanation: As shown in the above example, \\"codeleet\\" becomes \\"leetcode\\" after reordering the characters according to the given indices array. - \'c\' moves to position 4 - \'o\' moves to position 5 - \'d\' moves to position 6 - \'e\' moves to position 7 - \'l\' moves to position 0 - \'e\' moves to position 2 - \'e\' moves to position 1 - \'t\' moves to position 3 Example 2: Input: s = \\"abc\\", indices = [0,1,2] Output: \\"abc\\" Explanation: As the indices array is already in order, the original string remains the same. Example 3: Input: s = \\"aiohn\\", indices = [3,1,4,2,0] Output: \\"nihao\\" Constraints: 1 <= s.length == indices.length <= 100 s contains only lowercase English letters. 0 <= indices[i] < s.length All values of indices are unique.","solution":"def restore_string(s, indices): Reorder the string \'s\' based on the given \'indices\' array. Parameters: s (str): The input string. indices (List[int]): The list of indices indicating where each character in the input string should be placed. Returns: str: The reordered string. n = len(s) result = [\'\'] * n for i, index in enumerate(indices): result[index] = s[i] return \'\'.join(result)"},{"question":"Problem A technology company is developing software that processes numerical data in a customized manner. One of the tasks is to evaluate a list of expressions given in a specific format and return their results. Each expression is a string consisting of single-digit positive integers and binary operators (\'+\', \'-\', \'*\', \'/\'). Given an integer n followed by n lines of expressions, you are required to evaluate each expression according to the basic arithmetic rules. Ensure the division operator \'/\' performs integer division, discarding any remainder (similar to floor division). Input: - The first line contains an integer n, where 1 ≤ n ≤ 100. - Each of the next n lines contains a single expression as a string. Output: - For each expression, print the result on a new line. You should assume all expressions are valid and involve only single-digit integers (from \'1\' to \'9\') and operators \'+\', \'-\', \'*\', \'/\'. Example Input 3 1+2*3 4/2+6*2 7-4/2 Output 7 13 5 Explanation of Examples: 1. For the expression \'1+2*3\': - According to arithmetic rules, multiplication is performed before addition. - So, 2*3 = 6, and then 1+6 = 7. 2. For the expression \'4/2+6*2\': - Division and multiplication are performed before addition. - 4/2 = 2, 6*2 = 12, and then 2+12 = 14. 3. For the expression \'7-4/2\': - Division is performed before subtraction. - 4/2 = 2, and then 7-2 = 5.","solution":"def evaluate_expressions(expressions): Evaluates a list of arithmetic expressions. Parameters: expressions (list of str): List of string expressions to be evaluated. Returns: list of int: List of results for each expression. results = [] for expr in expressions: result = eval(expr.replace(\'/\', \'//\')) results.append(result) return results"},{"question":"Given an array arr of size N, write a program to find the first missing positive integer in the array. The function should return the first missing positive integer. Example 1: Input: N = 5 arr = {3, 4, -1, 1, 2} Output: 5 Explanation: The positive integers from 1 to 4 are present, so the first missing positive integer is 5. Example 2: Input: N = 6 arr = {1, 2, 0, -1, -2, 6} Output: 3 Explanation: The positive integers 1 and 2 are present, but 3 is missing. Your Task: You don\'t need to read input or print anything. Your task is to complete the function firstMissingPositive() which takes the array arr[] and its size N as input parameters and returns the first missing positive integer. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^{5} -10^{6} ≤ arr[i] ≤ 10^{6}","solution":"def first_missing_positive(arr, N): Returns the first missing positive integer in the array. for i in range(N): while 1 <= arr[i] <= N and arr[arr[i] - 1] != arr[i]: arr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1] for i in range(N): if arr[i] != i + 1: return i + 1 return N + 1"},{"question":"Grid Rotation You are given an n x n grid (2D list) of distinct integers. Your task is to rotate the grid 90 degrees clockwise. # Input: - An integer `n` representing the dimensions of the grid (2 ≤ n ≤ 10). - A 2D list of integers of dimensions `n x n`. # Output: - A 2D list representing the rotated grid. # Example: ```python rotateGrid(3, [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]) # Output: # [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ] rotateGrid(4, [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16] ]) # Output: # [ # [13, 9, 5, 1], # [14, 10, 6, 2], # [15, 11, 7, 3], # [16, 12, 8, 4] # ] ``` # Constraints: - `n` is an integer such that 2 ≤ n ≤ 10. - The grid will contain distinct integers.","solution":"def rotateGrid(n, grid): Rotates the n x n grid 90 degrees clockwise. Parameters: n (int): The dimension of the grid. grid (list of list of int): The 2D list representing the grid. Returns: list of list of int: The rotated grid. rotated_grid = [[0]*n for _ in range(n)] for i in range(n): for j in range(n): rotated_grid[j][n-i-1] = grid[i][j] return rotated_grid"},{"question":"You are given a list of integers representing the number of pages in each chapter of a book. You need to read the entire book within a given number of days, with the constraint that each day you must read a contiguous sequence of chapters and the total number of pages you read each day should be approximately the same. Write a function to find the minimum possible maximum number of pages you need to read in a day such that the book can be completed in the given number of days. You need to balance the reading workload as evenly as possible across the days. Examples: Input: chapters = [10, 20, 30, 40, 50], days = 2 Output: 90 Explanation: One way to split the chapters is to read the first 3 chapters (10+20+30 = 60 pages) on the first day, and the last 2 chapters (40+50 = 90 pages) on the second day. Another way is to read the first 4 chapters (10+20+30+40 = 100 pages) on the first day and the last chapter (50 pages) on the second day. The minimum highest number of pages read in a single day would be 90. Input: chapters = [10, 30, 40, 20], days = 3 Output: 40 Input: chapters = [5, 5, 5, 5, 5], days = 5 Output: 5 Note: - chapters will have length at most 500. - Each chapters[i] will be an integer in the range [1, 1000]. - days will be an integer in the range [1, chapters.length].","solution":"def can_split(chapters, days, max_pages_per_day): current_sum = 0 days_needed = 1 for pages in chapters: if current_sum + pages > max_pages_per_day: days_needed += 1 current_sum = pages if days_needed > days: return False else: current_sum += pages return True def min_max_pages(chapters, days): left, right = max(chapters), sum(chapters) while left < right: mid = (left + right) // 2 if can_split(chapters, days, mid): right = mid else: left = mid + 1 return left"},{"question":"In a coding challenge, you are tasked to process a series of logs representing transactions in a bank which have the format: ```log time user amount type``` - time: A timestamp in the format `hh:mm` - user: A unique user identifier string - amount: An integer value indicating the transaction amount - type: A string which could either be `deposit` or `withdraw` You need to determine the final account balance for each user after all transactions have been processed. Every user starts with an account balance of 0. Input The first line of the input contains an integer `t` (1 ≤ t ≤ 1000) — the number of transactions. Then `t` lines follow, each containing a single transaction in the format `hh:mm user amount type`. Output For each user who performed at least one transaction, output their final balance. The user identifier and the balance should be space-separated. The output should list the users in alphabetical order by their identifier. Examples Input 6 09:00 userA 1000 deposit 09:30 userB 1500 deposit 10:00 userA 200 withdraw 10:15 userB 500 deposit 11:00 userC 700 deposit 11:30 userC 300 withdraw Output userA 800 userB 2000 userC 400 Input 5 08:00 user1 300 deposit 08:15 user2 150 deposit 08:30 user3 200 deposit 09:00 user2 50 withdraw 09:15 user1 100 deposit Output user1 400 user2 100 user3 200","solution":"def process_transactions(t, transactions): user_balances = {} for transaction in transactions: time, user, amount, trans_type = transaction.split() amount = int(amount) if user not in user_balances: user_balances[user] = 0 if trans_type == \'deposit\': user_balances[user] += amount elif trans_type == \'withdraw\': user_balances[user] -= amount sorted_users = sorted(user_balances.keys()) result = [] for user in sorted_users: result.append(f\\"{user} {user_balances[user]}\\") return result"},{"question":"Implement a function `calculate_balanced_substrings(s: str) -> int` that takes a string `s` consisting only of the characters \'L\' and \'R\'. The function should return the maximum number of balanced substrings that can be obtained from the input string. A balanced substring is defined as a substring in which the number of \'L\' characters equals the number of \'R\' characters. # Input Format A single line of input consisting of the string `s`. # Output Format A single integer representing the maximum number of balanced substrings. # Constraints - The length of the string `s` will be at most 10^5. # Example Input ``` RLRRLLRLRL ``` # Example Output ``` 4 ``` # Explanation The string can be split into 4 balanced substrings: 1. \\"RL\\" 2. \\"RRLL\\" 3. \\"RL\\" 4. \\"RL\\" Therefore, the output should be 4.","solution":"def calculate_balanced_substrings(s: str) -> int: Returns the maximum number of balanced substrings in the given string. A balanced substring is one with an equal number of \'L\' and \'R\' characters. balanced_count = 0 balance = 0 for char in s: if char == \'L\': balance += 1 elif char == \'R\': balance -= 1 if balance == 0: balanced_count += 1 return balanced_count"},{"question":"A team of software developers is working on a new feature for their application which requires identifying all unique subarrays of an array. A subarray is defined as a contiguous part of an array. Your task is to write a program that, given an array of integers, finds and prints all unique subarrays in the array. The output should be a list of lists, where each inner list represents a unique subarray. The order of subarrays in the output does not matter. Input: - The first line contains an integer t, the number of test cases. - Each test case starts with an integer n, the number of elements in the array. - The next line contains n space-separated integers, representing the elements of the array. Output: - For each test case, print the list of unique subarrays. Each subarray should be printed on a new line with elements separated by spaces. Constraints: 1 ≤ t ≤ 5 1 ≤ n ≤ 10 -100 ≤ Array element ≤ 100 SAMPLE INPUT 1 3 4 6 4 SAMPLE OUTPUT 4 6 4 4 6 6 4 4 6 4","solution":"def find_unique_subarrays(arr): Returns a list of all unique subarrays of the given array. unique_subarrays = set() # Use a set to store unique subarrays n = len(arr) for i in range(n): for j in range(i, n): subarray = tuple(arr[i:j+1]) unique_subarrays.add(subarray) # Convert the set of tuples back to a list of lists return [list(subarray) for subarray in unique_subarrays]"},{"question":"A company has developed a new scheduling application to manage the tasks and meetings of its employees. A meeting or a task can be represented as an event with a start time and an end time in minutes. Each employee has a list of events they need to attend or complete for the day. Two events do not overlap if one ends before the other starts. Your task is to write a function to find the minimum number of rooms required to accommodate all events for all employees given everyone\'s schedule. Input The first line of input contains an integer n (1 ≤ n ≤ 10^4), representing the number of employees. For each employee, the first line contains an integer m (1 ≤ m ≤ 10^4), representing the number of events that employee has on their schedule. Then, m lines follow, each containing two space-separated integers si and ei (0 ≤ si < ei ≤ 1440), denoting the start and end times of that event. Output Output a single integer, the minimum number of rooms required to accommodate all events for all employees. Examples Input 3 3 60 150 30 120 200 220 2 100 200 140 180 1 180 210 Output 3 Input 2 2 100 120 150 200 2 210 220 300 330 Output 1 Note In the first example, we have the following events: - Employee 1: (60, 150), (30, 120), (200, 220) - Employee 2: (100, 200), (140, 180) - Employee 3: (180, 210) The maximum overlap among these events requires 3 rooms: - Room 1 can accommodate (30, 120) from Employee 1, (140, 180) from Employee 2, and (180, 210) from Employee 3. - Room 2 can accommodate (60, 150) from Employee 1 and (200, 220) from Employee 1. - Room 3 can accommodate (100, 200) from Employee 2. In the second example, no events overlap, so only 1 room is needed.","solution":"def min_meeting_rooms(events): Returns the minimum number of rooms required to accommodate all events. if not events: return 0 start_times = sorted([start for start, end in events]) end_times = sorted([end for start, end in events]) start_ptr, end_ptr = 0, 0 num_rooms, max_rooms = 0, 0 while start_ptr < len(start_times): if start_times[start_ptr] < end_times[end_ptr]: num_rooms += 1 start_ptr += 1 else: num_rooms -= 1 end_ptr += 1 max_rooms = max(max_rooms, num_rooms) return max_rooms def min_rooms_for_employees(n, schedules): Given the number of employees and their schedules, return the minimum number of rooms required to accommodate all events. events = [] for schedule in schedules: events.extend(schedule) return min_meeting_rooms(events) # Example input, parsing, and calculation: n = 3 schedules = [ [(60, 150), (30, 120), (200, 220)], [(100, 200), (140, 180)], [(180, 210)] ] print(min_rooms_for_employees(n, schedules)) # Should output 3"},{"question":"Given a string s that only contains alphanumeric characters (letters and digits), we want to manipulate the string in a particular way. Transform the string by reversing the position of letters while keeping the position of digits intact. Write a function that takes a string as input and reverses only the letters in it while keeping the digits at their original positions. Function signature: ```python def reverse_letters(s: str) -> str: ``` # INPUT A single string s containing only letters and digits. # OUTPUT Return the transformed string where letters are reversed and digits remain in their original positions. # Constraints - 1 ≤ len(s) ≤ 1000 - s contains only alphanumeric characters (\'a\' - \'z\', \'A\' - \'Z\', \'0\' - \'9\'). # SAMPLE INPUT ``` \\"ab12cd34ef\\" ``` # SAMPLE OUTPUT ``` \\"fe12dc34ba\\" ``` # Explanation In the input string \\"ab12cd34ef\\", reversing the letters \'a\', \'b\', \'c\', \'d\', \'e\', and \'f\' while keeping the digits \'1\', \'2\', \'3\', and \'4\' in the same position results in the output string \\"fe12dc34ba\\".","solution":"def reverse_letters(s: str) -> str: Reverse only the letters in a string, keeping digits at their original positions. # Extract letters from the string letters = [char for char in s if char.isalpha()] # Reverse the list of letters letters.reverse() # To form the new string with digits at original positions and reversed letters result = [] letter_index = 0 for char in s: if char.isalpha(): result.append(letters[letter_index]) letter_index += 1 else: result.append(char) return \'\'.join(result)"},{"question":"David is organizing a national tour with his rock band. There are a total of n cities in the country, numbered from 1 to n. David intends to hold d concerts in cities b_1, b_2, dots, b_d in the exact order given, ensuring that no two consecutive concerts are held in the same city (b_i not= b_{i+1}), and concluding the tour back in the same city where it started (b_1 = b_d). To travel between the concert cities, David can use two types of train tickets: - One-way ticket from city x to city y can be used to travel from x to y one time (but not in reverse). - Round trip ticket from city x to city y can be used to travel from x to y and then return from y to x. The return segment (from y to x) does not need to be used, but the first segment must be used first. You are provided with a catalog of train fares. Determine the minimal total cost David needs to spend on tickets to complete the tour. David can purchase multiple tickets of each type if desired. It is guaranteed that performing the journey with the given fares is possible. -----Input----- The first line contains two integers n and d (2 le n, d le 300000) – the number of cities in the country and the number of concerts. The second line contains integers b_1, b_2, dots, b_d (1 le b_i le n, b_i not= b_{i+1}, b_1 = b_d) – the sequence of cities for the concerts. The third line contains an integer m (3 le m le 300000) – the number of train fares. The subsequent m lines each contain four values u_k, v_k, w_k, q_k, describing the k-th fare: - u_k and v_k (1 le u_k, v_k le n, u_k not= v_k) are the start and end cities respectively, - w_k is an uppercase letter “O” or “R” indicating a one-way or round trip ticket respectively, - q_k (1 le q_k le 10^9) is the ticket price. -----Output----- Print the minimum amount of money David needs to purchase the required tickets for the entire tour. -----Examples----- Sample Input: 3 4 1 2 3 1 5 1 2 O 7 2 3 O 5 3 1 O 8 2 3 R 9 1 2 R 12 Sample Output: 20","solution":"def find_min_travel_cost(n, d, cities, m, ticket_fares): from collections import defaultdict import heapq graph = defaultdict(list) min_distance = defaultdict(lambda: float(\'inf\')) for u, v, w, q in ticket_fares: if w == \'O\': graph[u].append((v, q)) elif w == \'R\': graph[u].append((v, q)) graph[v].append((u, q)) def dijkstra(start): pq = [(0, start)] min_distance[start] = 0 while pq: current_distance, current_node = heapq.heappop(pq) if current_distance > min_distance[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < min_distance[neighbor]: min_distance[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) total_cost = 0 for i in range(len(cities) - 1): min_distance = defaultdict(lambda: float(\'inf\')) dijkstra(cities[i]) total_cost += min_distance[cities[i + 1]] return total_cost # Example usage: n, d = 3, 4 cities = [1, 2, 3, 1] m = 5 ticket_fares = [ (1, 2, \'O\', 7), (2, 3, \'O\', 5), (3, 1, \'O\', 8), (2, 3, \'R\', 9), (1, 2, \'R\', 12) ] print(find_min_travel_cost(n, d, cities, m, ticket_fares)) # Output should be 20"},{"question":"A startup company has recently started offering a unique visiting card service. This service allows clients to design custom cards and place orders for multiple copies. However, the ordering system often runs into issues when handling multiple clients\' requests simultaneously. To address these challenges, the company wants to analyze its system by modeling and processing the orders efficiently. Each client sends an order specifying the number of cards they need. Let\'s assume there are n clients, and each client places one order. The company processes the orders in the same sequence they were received. However, due to the high volume of orders, they need to periodically check the total number of cards ordered by a specific range of clients to ensure they can handle the demand. You are required to implement a system that handles two types of operations: 1. Add a specific amount to the number of cards ordered by a particular client. 2. Query the total number of cards ordered by clients within a specified range. Input The first line of the input contains two integers n and q (1 ≤ n ≤ 100,000, 1 ≤ q ≤ 200,000) — the number of clients and the number of operations. Next, n lines contain the initial number of cards ordered by each client. Each line contains a single integer aᵢ (0 ≤ aᵢ ≤ 1,000,000). The subsequent q lines describe the operations to be performed, where each operation is one of the following: - \\"1 x y\\" meaning add y cards to the order of client x (1 ≤ x ≤ n, 1 ≤ y ≤ 1,000,000). - \\"2 l r\\" meaning query the total number of cards ordered by clients from index l to r (1 ≤ l ≤ r ≤ n). Output For each operation of type 2, output a single integer — the sum of the cards ordered by the clients in the specified range. Example Input 5 5 10 20 30 40 50 2 2 4 1 3 10 2 1 5 1 5 20 2 4 5 Output 90 160 110","solution":"class CardOrderingSystem: def __init__(self, initial_orders): self.orders = initial_orders self.prefix_sums = self._compute_prefix_sums() def _compute_prefix_sums(self): prefix_sums = [0] * (len(self.orders) + 1) for i in range(len(self.orders)): prefix_sums[i + 1] = prefix_sums[i] + self.orders[i] return prefix_sums def add_cards(self, client_index, num_cards): self.orders[client_index - 1] += num_cards self.prefix_sums = self._compute_prefix_sums() def query_total_cards(self, left_index, right_index): return self.prefix_sums[right_index] - self.prefix_sums[left_index - 1]"},{"question":"You are given a string pattern and a string s. Your task is to determine if s follows the same pattern as given in pattern. In other words, there should be a bijection between a letter in pattern and a non-empty word in s. Example 1: Input: pattern = \\"abba\\" s = \\"dog cat cat dog\\" Output: true Explanation: The pattern corresponds to the words as follows: \'a\' -> \'dog\', \'b\' -> \'cat\'. So the words follow the same pattern. Example 2: Input: pattern = \\"abba\\" s = \\"dog cat cat fish\\" Output: false Explanation: \'a\' -> \'dog\', \'b\' -> \'cat\', but the third word does not match the pattern (as \'b\' is mapped to \'cat\' and not \'fish\'). Example 3: Input: pattern = \\"aaaa\\" s = \\"dog dog dog dog\\" Output: true Explanation: All words correspond to the same letter in the pattern as required. Example 4: Input: pattern = \\"abba\\" s = \\"dog dog dog dog\\" Output: false Explanation: The pattern requires different words for \'a\' and \'b\', but the words provided do not follow this. Your Task: You don\'t need to read input or print anything. Write a function `wordPattern` that takes the string pattern and string s as inputs and returns true if s follows the pattern, otherwise it returns false. Expected Time Complexity: O(N), where N is the length of the string s. Expected Auxiliary Space: O(M), where M is the number of unique characters in pattern. Constraints: - 1 ≤ pattern.length ≤ 300 - The input string s contains only lowercase English letters and spaces. - 1 ≤ s.length ≤ 3000","solution":"def wordPattern(pattern, s): Returns whether the string s follows the given pattern. Parameters: pattern (str): The pattern string consisting of characters. s (str): The string of words, separated by spaces. Returns: bool: True if s follows the pattern, False otherwise. words = s.split() if len(pattern) != len(words): return False char_to_word = {} word_to_char = {} for char, word in zip(pattern, words): if char in char_to_word: if char_to_word[char] != word: return False else: char_to_word[char] = word if word in word_to_char: if word_to_char[word] != char: return False else: word_to_char[word] = char return True"},{"question":"The Happy Hamster is designing a new music playlist application to make sure all the hamsters at the party are rocking to the beat! The application handles a playlist of n songs, each with a specific length in seconds. The Hamster wants to support multiple queries where the user can either: - Add a new song to the playlist. - Find the total duration of the currently scheduled playlist. - Remove a song from the playlist by its index. You need to implement the functionalities to support these queries efficiently. Input: The first line contains an integer n, the initial number of songs in the playlist, 0 ≤ n ≤ 100,000. The second line contains n space-separated integers representing the lengths of the songs in the playlist. The third line contains an integer q, the number of queries, 1 ≤ q ≤ 100,000. Each of the following q lines contains a query in one of the following formats: - \\"Add x\\" where x is the length of the song to be added. - \\"Duration\\" to find the total length of all the songs in the playlist. - \\"Remove i\\" where i is the 0-based index of the song to be removed. Output: For each \\"Duration\\" query, output the total length of the current playlist. Example: Input: 5 120 150 180 210 240 6 Duration Add 300 Duration Remove 2 Duration Remove 0 Output: 900 1200 1020 900 Notes: - When a new song is added, it is appended to the end of the playlist. - If a \\"Remove\\" query is given with an index that does not exist in the playlist, ignore that query. - The \\"Duration\\" query should provide the sum of lengths of all the songs currently in the playlist.","solution":"class Playlist: def __init__(self, songs): self.songs = songs def add(self, length): self.songs.append(length) def remove(self, index): if 0 <= index < len(self.songs): self.songs.pop(index) def duration(self): return sum(self.songs)"},{"question":"You are given a list of N integers. An integer is considered *peak* if it is greater than or equal to its neighbors (i.e., the integers immediately preceding and following it). The first and last integers of the list are compared with only one neighbor (the second and next-to-last integers, respectively). Your task is to find and print all peak integers in the list. ------ Input Format ------ - The first line contains a single integer T — the number of test cases. - Each test case consists of two lines: - The first line contains the integer N — the number of elements in the list. - The second line contains N space-separated integers representing the list. ------ Output Format ------ - For each test case, print the peaks in the list in their respective order separated by a space. - If there are no peaks in the list, print \\"NONE\\". ------ Constraints ------ 1 ≤ T ≤ 10^4 1 ≤ N ≤ 10^5 1 ≤ A_i ≤ 10^9 The sum of N over all test cases does not exceed 10^5. ------ Sample Input 1 ------ 2 5 1 3 2 5 4 3 10 20 15 ------ Sample Output 1 ------ 3 5 20 ------ Explanation 1 ------ Test case 1: The peak elements in the list are `3` and `5`, as `3` is greater than both its neighbors `1` and `2`, and `5` is greater than its neighbors `2` and `4`. Test case 2: The only peak element in the list is `20`, as it is greater than both its neighbors `10` and `15`.","solution":"def find_peaks(test_cases): Returns a list of peaks for each test case. Parameters: test_cases (List[Tuple[int, List[int]]]): A list of tuples containing N (number of elements) and the list of elements. Returns: List[str]: A list containing the peaks for each test case. result = [] for N, array in test_cases: peaks = [] if N == 1: peaks.append(array[0]) else: if array[0] >= array[1]: peaks.append(array[0]) for i in range(1, N-1): if array[i] >= array[i-1] and array[i] >= array[i+1]: peaks.append(array[i]) if array[N-1] >= array[N-2]: peaks.append(array[N-1]) if peaks: result.append(\\" \\".join(map(str, peaks))) else: result.append(\\"NONE\\") return result # Example usage: def main(): T = int(input().strip()) test_cases = [] for _ in range(T): N = int(input().strip()) array = list(map(int, input().strip().split())) test_cases.append((N, array)) results = find_peaks(test_cases) for res in results: print(res) if __name__ == \\"__main__\\": main()"},{"question":"In a programming competition, each participant creates a unique ID from a mix of uppercase alphabets and numbers. An ID is considered \\"valid\\" if it has at least one uppercase letter and at least one digit. As a programmer, you need to validate a list of participant IDs and identify which are valid. Input: - Number of IDs (n ≤ 20). Each ID is a string of length between 1 and 50 characters. Output: - For each ID, print \\"Valid\\" if it meets the criteria, or \\"Invalid\\" otherwise. SAMPLE INPUT 3 A1 abc XYZ123 SAMPLE OUTPUT Valid Invalid Valid","solution":"def validate_ids(ids): Validates a list of IDs and returns the results indicating if they are valid or invalid. An ID is considered \\"valid\\" if it has at least one uppercase letter and at least one digit. :param ids: List of IDs to validate :return: List of results (\\"Valid\\" or \\"Invalid\\") results = [] for id in ids: has_upper = any(char.isupper() for char in id) has_digit = any(char.isdigit() for char in id) if has_upper and has_digit: results.append(\\"Valid\\") else: results.append(\\"Invalid\\") return results"},{"question":"Given a non-negative integer `n`, write a function that determines the number of steps required to reduce the number to zero using the following operations: 1. If the number is even, divide it by 2. 2. If the number is odd, subtract 1 from it. You should implement a function and return the number of steps required. Function Signature: ```python def number_of_steps(n: int) -> int: pass ``` Input: - An integer `n` where `0 <= n <= 10^6`. Output: - An integer representing the number of steps taken to reduce `n` to zero. Example: ```python n = 14 print(number_of_steps(n)) # Output should be 6 ``` Explanation: - Step 1: 14 is even; divide by 2 to get 7. - Step 2: 7 is odd; subtract 1 to get 6. - Step 3: 6 is even; divide by 2 to get 3. - Step 4: 3 is odd; subtract 1 to get 2. - Step 5: 2 is even; divide by 2 to get 1. - Step 6: 1 is odd; subtract 1 to get 0. - Total steps taken: 6 Additional Test Cases: ```python n = 8 print(number_of_steps(n)) # Output should be 4 n = 123 print(number_of_steps(n)) # Output should be 12 ``` Note: The problem tests your understanding of basic conditional logic and loop constructs. Try to implement the function in the most efficient way possible.","solution":"def number_of_steps(n: int) -> int: Returns the number of steps required to reduce the number n to zero. steps = 0 while n > 0: if n % 2 == 0: n //= 2 else: n -= 1 steps += 1 return steps"},{"question":"Maya loves to play with words and numbers. Recently, she came across a puzzle involving prime numbers and palindromes. She decided to combine both concepts and created a challenging problem for her friends. The task is to find the smallest palindrome that is a prime number and greater than a given number N. As you know, a palindrome is a number that reads the same backward as forward (e.g., 121, 131). Help Maya solve this problem by writing a program that takes an integer input N and outputs the smallest prime palindrome greater than N. Input: The first line contains an integer T, the number of test cases. Each of the next T lines contains a single integer N. Output: Print the output for each query on a new line. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 10^6 SAMPLE INPUT 3 13 31 100 SAMPLE OUTPUT 101 131 101 Note: In the third test case, 101 is the smallest palindrome prime greater than 100, although 101 is already appeared in the first case output, the question requires it again as per the third test case.","solution":"def is_palindrome(number): return str(number) == str(number)[::-1] def is_prime(number): if number <= 1: return False if number <= 3: return True if number % 2 == 0 or number % 3 == 0: return False i = 5 while i * i <= number: if number % i == 0 or number % (i + 2) == 0: return False i += 6 return True def smallest_prime_palindrome_greater_than(n): number = n + 1 while True: if is_palindrome(number) and is_prime(number): return number number += 1 def main(test_cases): results = [] for n in test_cases: results.append(smallest_prime_palindrome_greater_than(n)) return results"},{"question":"A company wants to implement a new project task allocation system to streamline its operations. Each task has a certain duration and weight, and each employee has a maximum capacity for handling tasks. The aim is to distribute tasks among employees in such a way that no employee’s total weight of tasks exceeds their weight capacity while using the minimum number of employees. You are given the following properties: * `tasks` – an array of length n where each element represents the weight of a task. * `k` – the maximum weight capacity each employee can handle. Write a function to determine the minimum number of employees required to handle all tasks. Function Signature: ```python def minimum_employees(tasks: List[int], k: int) -> int: ``` Input: * `tasks`: a list of integers of length n where each integer represents the weight of a task (1 ≤ n ≤ 1000, 1 ≤ tasks[i] ≤ 100). * `k`: an integer representing the maximum weight capacity of each employee (1 ≤ k ≤ 100). Output: * Return a single integer representing the minimum number of employees required. Example: ```python tasks = [4, 8, 6, 1, 2, 3] k = 10 Output: 3 ``` Explanation: In the given example, the tasks can be distributed as follows: - Employee 1 handles tasks [4, 6] - Employee 2 handles tasks [8] - Employee 3 handles tasks [1, 2, 3] This setup requires 3 employees and satisfies the capacity constraints for each employee. Note: The total weight of tasks assigned to each employee must not exceed k. An efficient algorithm is expected due to the problem constraint where n can go up to 1000.","solution":"from typing import List def minimum_employees(tasks: List[int], k: int) -> int: # Sort the tasks in non-increasing order tasks.sort(reverse=True) employees = 0 while tasks: total = 0 # Try to fill one employee\'s capacity as much as possible for i in range(len(tasks)): if total + tasks[i] <= k: total += tasks[i] tasks[i] = 0 # Remove the tasks that have been assigned (marked as 0) tasks = [task for task in tasks if task != 0] employees += 1 return employees"},{"question":"Chef loves sorting algorithms, and he always tries to come up with new variations. He recently came up with a \\"Rotating Quick Sort\\" algorithm, which combines the ideas of Quick Sort with an additional rotating mechanism. He wants to implement the algorithm in the most efficient way. Here\'s the outline of the \\"Rotating Quick Sort\\" algorithm: 1. Select a pivot element from the array. 2. Partition the array around the pivot: - Elements less than the pivot should go to the left. - Elements greater than the pivot should go to the right. 3. Rotate the left partition to the right by `K` positions. 4. Rotate the right partition to the left by `K` positions. 5. Recursively apply the \\"Rotating Quick Sort\\" on the left and right partitions. To implement this efficiently, you need to write a function that performs the \\"Rotating Quick Sort\\" with a given integer `K` for the rotations. Write a function `rotating_quick_sort` that takes an array `A` of `N` integers and an integer `K`, and returns the array sorted using the \\"Rotating Quick Sort\\" algorithm. **Input:** - The first line contains an integer `T` denoting the number of test cases. - The first line of each test case contains two integers `N` and `K` denoting the number of elements in the array and the number of positions to rotate. - The second line contains `N` space-separated integers, the elements of array `A`. **Output:** For each test case, print the sorted array on a new line. **Constraints:** - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 10^4 - 0 ≤ K < N - 1 ≤ A[i] ≤ 10^9 **Example Input:** ``` 2 5 2 4 1 3 9 7 6 3 8 4 6 5 3 2 ``` **Example Output:** ``` 1 3 4 7 9 2 3 4 5 6 8 ``` **Explanation:** For the first test case: 1. Choose a pivot (e.g., 4). 2. Partition: (1, 3) pivot (7, 9). 3. Rotate left partition [1, 3] to the right by 2 positions: [1, 3]. 4. Rotate right partition [7, 9] to the left by 2 positions: [9, 7]. 5. Recursively sort partitions. For the second test case: 1. Choose a pivot (e.g., 6). 2. Partition: (4, 5, 3, 2) pivot (8). 3. Rotate left partition [4, 5, 3, 2] to the right by 3 positions: [5, 3, 2, 4]. 4. Rotate right partition [8] to the left by 3 positions: [8]. 5. Recursively sort partitions.","solution":"def rotating_quick_sort(A, K): def rotate_right(arr, K): if len(arr) == 0: return arr K = K % len(arr) return arr[-K:] + arr[:-K] def rotate_left(arr, K): if len(arr) == 0: return arr K = K % len(arr) return arr[K:] + arr[:K] def quick_sort(A, K): if len(A) <= 1: return A pivot = A[len(A) // 2] left = [x for x in A if x < pivot] middle = [x for x in A if x == pivot] right = [x for x in A if x > pivot] left_rotated = rotate_right(left, K) right_rotated = rotate_left(right, K) return quick_sort(left_rotated, K) + middle + quick_sort(right_rotated, K) return quick_sort(A, K) def rotating_quick_sort_tests(T, cases): results = [] for i in range(T): N, K = cases[i][0] A = cases[i][1] sorted_array = rotating_quick_sort(A, K) results.append(sorted_array) return results"},{"question":"Problem You are given a rectangular grid of size `N x M` filled with non-negative integers, representing the number of coins in each cell. Your task is to navigate from the top-left corner of the grid to the bottom-right corner, collecting the maximum number of coins possible. You can only move right or down at each step. Constraints * 1 ≤ N, M ≤ 50 * 0 ≤ grid[i][j] ≤ 100 Input The input is given in the following format: * The first line contains two integers `N` and `M`, separated by a space. * The next `N` lines each contain `M` integers, representing the grid. Output Output a single integer, the maximum number of coins that can be collected. Examples Input 3 3 1 3 1 1 5 1 4 2 1 Output 12 Input 2 2 1 2 3 4 Output 8","solution":"def maxCoins(N, M, grid): Calculates the maximum number of coins collected by navigating from the top-left corner to the bottom-right corner by only moving right or down. Parameters: N (int): Number of rows in the grid. M (int): Number of columns in the grid. grid (list of list of ints): The NxM grid containing non-negative integers representing coins. Returns: int: The maximum number of coins that can be collected. # Create a 2D dp array to store the maximum coins collected up to each cell dp = [[0] * M for _ in range(N)] # Initialize the starting point dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, M): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, N): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, N): for j in range(1, M): dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] # The bottom-right corner contains the maximum coins that can be collected return dp[N - 1][M - 1]"},{"question":"The Fibonacci sequence is a series of numbers in which each number is the sum of the two preceding ones, usually starting with 0 and 1. However, for this question, we will start with an arbitrary pair of starting values. Write a function `custom_fibonacci(n, a, b)` that calculates the n-th term of a Fibonacci-like sequence where the first term is `a` and the second term is `b`. For example: ```python custom_fibonacci(1, 4, 7) # 4 custom_fibonacci(2, 4, 7) # 7 custom_fibonacci(3, 4, 7) # 11 (4 + 7) custom_fibonacci(5, 4, 7) # 29 (7 + 11 + 18) ```","solution":"def custom_fibonacci(n, a, b): Returns the n-th term of a Fibonacci-like sequence where the first term is `a` and the second term is `b`. if n == 1: return a elif n == 2: return b first, second = a, b for _ in range(3, n + 1): next_term = first + second first, second = second, next_term return second"},{"question":"Write a program that finds the longest increasing subsequence in a given array. A subsequence is derived from the original array by deleting some or none of the elements without changing the order of the remaining elements. ------ Input Format ------ - The first line contains an integer T - the number of test cases. - The first line of each test case contains an integer N - the size of the array. - The second line contains N integers a_1, a_2, ..., a_N - the elements of the array. ------ Output Format ------ For each test case, print one line containing an integer which denotes the length of the longest increasing subsequence in the array. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^3 1 ≤ a_i ≤ 10^5 ----- Sample Input 1 ------ 2 6 5 8 3 7 9 1 4 2 2 2 2 ----- Sample Output 1 ------ 3 1 ----- Explanation 1 ------ In the first test case, the longest increasing subsequence can be [5, 7, 9] or [3, 7, 9], which both have length 3. In the second test case, the longest increasing subsequence is [2] which has length 1.","solution":"def length_of_lis(arr): Returns the length of the longest increasing subsequence in the array arr. if not arr: return 0 n = len(arr) lis = [1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j]: lis[i] = max(lis[i], lis[j] + 1) return max(lis) def process_test_cases(t, test_cases): Processes the given test cases and returns a list with the length of the longest increasing subsequence for each test case. results = [] for i in range(t): n = test_cases[i][0] arr = test_cases[i][1] results.append(length_of_lis(arr)) return results"},{"question":"A group of friends loves playing a game called \\"Magic Words\\". They believe that some words have magical properties, such as those that can be read the same backward and forward, known as palindromes. They want to create a new version of the game where a sequence of operations can modify words by inserting characters within them, and they want to know if it\'s possible to form a palindrome after each insertion. Given a starting string of lowercase letters and a number of operations, each operation consists of inserting a character at a specified position in the string. After each insertion, determine whether the resulting string is a palindrome. Input - The first line contains a single string `s` (1 ≤ length of `s` ≤ 100,000) — the initial string. - The second line contains an integer `q` (1 ≤ q ≤ 100,000) — the number of operations. - Each of the next `q` lines contains a character `c` (a lowercase English letter) and an integer `pos` (1 ≤ pos ≤ length of resulting string) — the character to insert and the 1-based position to insert it (the position is between 1 and the length of the current string + 1). Output - After each insertion, print \\"YES\\" if the resulting string is a palindrome, \\"NO\\" otherwise. Example Input ``` aba 3 b 2 a 1 c 3 ``` Output ``` NO NO NO ``` Note: - Initially, the string is \\"aba\\". - After the first operation, the string becomes \\"abba\\". It is a palindrome, so the output for this operation is \\"YES\\". - After the second operation, the string becomes \\"aabba\\". It is not a palindrome, so the output for this operation is \\"NO\\". - After the third operation, the string becomes \\"aabacba\\". It is not a palindrome, so the output for this operation is \\"NO\\".","solution":"def is_palindrome(word): Returns True if the provided word is a palindrome, False otherwise. return word == word[::-1] def process_operations(s, operations): Processes the given operations on the string s and checks if the resulting string is a palindrome after each operation. Parameters: s (str): The initial string. operations (List[Tuple[str, int]]): A list of (character, position) operations. Returns: List[str]: A list of \\"YES\\"/\\"NO\\" answers for each operation. result = [] word = list(s) # Work with a list for efficient insertion for char, pos in operations: word.insert(pos - 1, char) if is_palindrome(word): result.append(\\"YES\\") else: result.append(\\"NO\\") return result # Read the input from standard input (example) def main(): import sys input = sys.stdin.read data = input().split() s = data[0] q = int(data[1]) operations = [(data[2 + 2*i], int(data[3 + 2*i])) for i in range(q)] results = process_operations(s, operations) for res in results: print(res)"},{"question":"A certain city\'s traffic lights department is analyzing the traffic patterns on one of its main roads to optimize the length of the green light to minimize the average waiting time for cars. The road consists of various segments, and each segment has a different number of cars waiting at a given time. You need to calculate the average waiting time of cars on this road given the number of cars on each segment. -----Input----- The first line of input contains an integer M (1 leq M leq 10000) representing the number of road segments. The next M lines describe the segments. Each of these lines contains an integer K_i (0 leq K_i leq 1000) indicating the number of cars waiting at the i-th segment. -----Output----- Display the average waiting time of cars on this road, calculated as the total number of cars divided by the number of segments. Answers with an absolute or relative error of at most 10^{-2} will be accepted. -----Examples----- Sample Input: 4 5 10 15 20 Sample Output: 12.500000 Sample Input: 3 0 0 30 Sample Output: 10.000000","solution":"def average_waiting_time(M, segments): Returns the average waiting time of cars on the road. :param M: integer, number of road segments :param segments: list of integers where each integer represents the number of cars at the i-th segment :return: float, average waiting time of cars on the road total_cars = sum(segments) average_time = total_cars / M return round(average_time, 6)"},{"question":"Isabella and Jasper play a game involving a string s consisting of lowercase English letters. They take turns, starting from Isabella, to remove one character from the string. When it\'s Isabella\'s turn, she can only remove a vowel (a, e, i, o, u), and when it\'s Jasper\'s turn, he can only remove a consonant (any letter that is not a vowel). If the current player cannot remove any character on their turn, they lose. Can you determine the winner if they both play optimally? -----Input----- The only line contains the string s (1 ≤ |s| ≤ 100), the string at the beginning of the game. -----Output----- Output \\"Isabella\\" (without quotes) if Isabella wins and \\"Jasper\\" (without quotes) otherwise. -----Examples----- Input hello Output Jasper Input aei Output Isabella -----Note----- In the first sample, Isabella can only remove \'e\' or \'o\'. Once Isabella removes either vowel, Jasper can remove the remaining characters (consonants h, l, l), and Isabella can\'t make any more moves. Therefore, Jasper wins. In the second sample, Isabella can remove any character since all are vowels. Jasper has no consonants to remove, so Isabella wins.","solution":"def determine_winner(s): Determines the winner of the game between Isabella and Jasper. Parameters: s (str): The initial string at the beginning of the game. Returns: str: \\"Isabella\\" if Isabella wins, \\"Jasper\\" if Jasper wins. vowels = set(\\"aeiou\\") vowel_count = sum(1 for char in s if char in vowels) consonant_count = len(s) - vowel_count # If the vowel count is 0 or the consonant count is 0, the game ends immediately. if vowel_count == 0: return \\"Jasper\\" if consonant_count == 0: return \\"Isabella\\" # The winning strategy depends on the parity of the counts if vowel_count > consonant_count: return \\"Isabella\\" return \\"Jasper\\""},{"question":"# Description: You are given a list of integers, `numbers`. Your task is to find the length of the longest subsequence which is strictly increasing. A subsequence of a list is created by deleting some or none of the elements without changing the order of the remaining elements. For example: ``` numbers = [3, 10, 2, 1, 20] longestIncreasingSubsequenceLength(numbers) === 3 The longest increasing subsequence is [3, 10, 20] ``` # Note: - All inputs are valid. - If the list is empty, return 0. - Pay attention to the performance of your code. Optimized solutions are preferred. # Some Examples ``` longestIncreasingSubsequenceLength([]) === 0 longestIncreasingSubsequenceLength([3]) === 1 longestIncreasingSubsequenceLength([3, 10, 2, 11]) === 3 longestIncreasingSubsequenceLength([3, 2]) === 1 longestIncreasingSubsequenceLength([50, 3, 10, 7, 40, 80]) === 4 longestIncreasingSubsequenceLength([1, 2, 3, 4, 5]) === 5 ``` # Constraints Your function should aim to run efficiently for large lists where `numbers` can have up to 10^4 elements.","solution":"def longestIncreasingSubsequenceLength(numbers): Returns the length of the longest strictly increasing subsequence in a list of numbers. if not numbers: return 0 # This will store the smallest ending value of the increasing subsequences of each length tails = [] for num in numbers: left, right = 0, len(tails) # Binary search for the smallest element in tails that is greater than or equal to num while left < right: mid = (left + right) // 2 if tails[mid] < num: left = mid + 1 else: right = mid # If left is equal to length of tails, num is greater than any element in tails if left == len(tails): tails.append(num) else: tails[left] = num return len(tails)"},{"question":"Alice is developing a new feature for her text editor that supports syntax highlighting for nested brackets. She has defined three types of brackets: `()`, `[]`, and `{}`. The editor should be able to verify if a string composed of these brackets is properly nested and balanced. A string is considered properly nested if every opening bracket has a corresponding closing bracket in the correct order and each bracket type is correctly nested within its pair. For example, the strings `([]{})`, `({[]})`, and `({}[()])` are all properly nested and balanced, while the strings `([)}]`, `([)`, and `{[(])}` are not. Your task is to write a function that takes a list of strings and determines whether each string is properly nested and balanced. -----Input----- The input consists of an integer N representing the number of test cases. Then, N strings follow, each consisting of only the characters `(`, `)`, `{`, `}`, `[` and `]`. -----Output----- For each string, output \\"YES\\" if the string is properly nested and balanced, otherwise output \\"NO\\". -----Constraints----- - 1 ≤ N ≤ 1000 - 1 ≤ The length of a single string ≤ 10^5 - The total length of all strings will not exceed 10^6 -----Example----- Input: 3 ([]{}) ([)] ({}[()]) Output: YES NO YES","solution":"def is_balanced(s): Helper function that checks if a single string s is properly nested and balanced. stack = [] matching_bracket = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in \'({[\': stack.append(char) elif char in \')}]\': if not stack or stack[-1] != matching_bracket[char]: return False stack.pop() return not stack def check_brackets(n, strings): Returns a list of \\"YES\\" or \\"NO\\" for each string, indicating if the string is properly nested and balanced. results = [] for string in strings: if is_balanced(string): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Write a function that takes a string as an input and returns the string\'s \\"strength\\" calculated by summing the position values of its characters as in the following mapping: ``` a = 1, b = 2, c = 3, ..., z = 26 ``` Once the strength is calculated, the function should categorize the strength into one of the following categories: - \\"Weak\\" if the strength is less than 50, - \\"Moderate\\" if the strength is between 50 and 100 (inclusive), - \\"Strong\\" if the strength is more than 100. The input string will always be in lowercase and never be empty. # Example ```python def categorize_strength(word: str) -> str: # Your code here print(categorize_strength(\\"love\\")) # Output: \\"Moderate\\" print(categorize_strength(\\"friendship\\")) # Output: \\"Strong\\" print(categorize_strength(\\"cat\\")) # Output: \\"Weak\\" ``` Write your code to complete the function `categorize_strength`.","solution":"def categorize_strength(word: str) -> str: Categorizes the strength of a string based on the sum of the position values of its characters. Arguments: word -- the input string consisting of lowercase English letters Returns: A string categorizing the strength: \\"Weak\\", \\"Moderate\\", or \\"Strong\\" # Calculate the strength based on the position values of characters strength = sum((ord(char) - ord(\'a\') + 1) for char in word) # Categorize the strength if strength < 50: return \\"Weak\\" elif 50 <= strength <= 100: return \\"Moderate\\" else: return \\"Strong\\""},{"question":"Rita loves collecting marbles and she has a box containing marbles of size M. Each marble is represented by its weight, and weights are given in an array w of size M. Rita\'s friend challenges her to find the maximum difference between any two elements in the array but with a twist: the chosen two elements must have at least one other element between them in the array. Write a program that helps Rita find this maximum difference. -----Input:----- - First-line will contain M, the number of marbles. - The next line will contain M space-separated integers denoting the weight of each marble. -----Output:----- Output the maximum difference between any two marbles\' weights satisfying the condition. -----Constraints----- - 3 leq M leq 10000 - 1 leq w[i] leq 10^3 -----Sample Input:----- 5 1 5 9 3 8 -----Sample Output:----- 8","solution":"def max_difference_with_condition(weights): Finds the maximum difference between any two elements in the array such that the chosen two elements have at least one other element between them. Args: weights (list): A list of integers representing the weights of the marbles. Returns: int: The maximum difference satisfying the condition. max_diff = float(\'-inf\') n = len(weights) for i in range(n - 2): for j in range(i + 2, n): diff = abs(weights[j] - weights[i]) if diff > max_diff: max_diff = diff return max_diff # Example usage if __name__ == \\"__main__\\": M = 5 weights = [1, 5, 9, 3, 8] print(max_difference_with_condition(weights)) # Output: 8"},{"question":"You are tasked with implementing a system that manages a company\'s supply chain. The company deals in different products, each identified by a unique product code. They have several suppliers who provide these products, and each supplier has a unique supplier code. Each supplier provides certain products at specific prices. Your task is to answer multiple queries about the availability and pricing of products from suppliers. For each query, you will be given a product code and a supplier code, and you need to output the price at which the supplier provides that product. If the supplier does not provide the product, output \\"NOT AVAILABLE\\". Constraints 1 ≤ N ≤ 10^3 (the number of suppliers) 1 ≤ M ≤ 10^5 (the number of products per supplier) 1 ≤ Q ≤ 10^5 (the number of queries) 1 ≤ product_code, supplier_code ≤ 10^6 1 ≤ price ≤ 10^9 Input The first line contains two integers denoting N and Q. The next N blocks each describe a supplier: - The first line of the block contains the supplier_code. - The second line contains an integer M, the number of products the supplier provides. - The following M lines each contain two integers: product_code and price. The following Q lines contain two integers, product_code and supplier_code, for each query. Output For each query, output the price at which the supplier provides the product or \\"NOT AVAILABLE\\" if the supplier does not provide the product. SAMPLE INPUT 2 3 1 2 1002 150 1003 200 2 3 1001 300 1002 250 1002 1 1003 1 1001 2 SAMPLE OUTPUT 150 200 300 Explanation Supplier 1 provides product 1002 at a price of 150 and product 1003 at a price of 200. Supplier 2 provides product 1001 at a price of 300 and product 1002 at a price of 250. The queries ask for the prices from these suppliers accordingly.","solution":"def build_supplier_dict(n, supplier_data): supplier_dict = {} index = 0 for i in range(n): supplier_code = supplier_data[index] index += 1 m = supplier_data[index] index += 1 products = {} for _ in range(m): product_code, price = supplier_data[index], supplier_data[index + 1] products[product_code] = price index += 2 supplier_dict[supplier_code] = products return supplier_dict def query_prices(n, q, supplier_data, queries): supplier_dict = build_supplier_dict(n, supplier_data) results = [] for product_code, supplier_code in queries: if supplier_code in supplier_dict and product_code in supplier_dict[supplier_code]: results.append(supplier_dict[supplier_code][product_code]) else: results.append(\\"NOT AVAILABLE\\") return results"},{"question":"Implement a function that finds the length of the longest increasing subsequence in a list of integers. Constraints * 1 ≤ n ≤ 1,000 * -10^9 ≤ ai ≤ 10^9 Input A list of n integers is given in the following format: n a0 a1 a2 ... an-1 n is the length of the list. ai represents the i-th element of the list. Output Print the length of the longest increasing subsequence. Examples Input 6 10 9 2 5 3 7 101 18 Output 4 Input 3 3 10 2 Output 2","solution":"def length_of_lis(nums): Returns the length of the longest increasing subsequence in a list of integers. if not nums: return 0 n = len(nums) dp = [1] * n for i in range(1, n): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"You are given a grid of size N x M where each cell has a certain number of gold coins. You want to collect the maximum number of gold coins starting from the cell (0, 0) and moving to the cell (N-1, M-1). You can only move right or down from a cell. Write a function `max_gold(N, M, grid)` that takes in the dimensions of the grid (N, M) and a 2D list `grid` representing the number of gold coins in each cell. It should return the maximum number of gold coins that can be collected along the path from the top-left cell (0, 0) to the bottom-right cell (N-1, M-1). INPUT - An integer `N` representing the number of rows in the grid. - An integer `M` representing the number of columns in the grid. - A 2D list `grid` of size N x M where `grid[i][j]` is the number of gold coins in the cell located at row i and column j. OUTPUT Output a single integer—the maximum number of gold coins that can be collected along the path. CONSTRAINTS 1 ≤ N, M ≤ 1000 0 ≤ grid[i][j] ≤ 100 SAMPLE INPUT 3 3 1 3 1 1 5 1 4 2 1 SAMPLE OUTPUT 12 Explanation The path 1 → 3 → 5 → 2 → 1 collects a total of 12 gold coins. This is the maximum number of gold coins that can be collected on a path from the top-left cell to the bottom-right cell.","solution":"def max_gold(N, M, grid): Returns the maximum number of gold coins that can be collected along the path from the top-left cell (0, 0) to the bottom-right cell (N-1, M-1) moving only right or down. # Create a 2D dp array to store the maximum gold that can be collected up to that cell dp = [[0] * M for _ in range(N)] # Initialize the top-left cell with the value of the gold coins in the starting cell dp[0][0] = grid[0][0] # Fill the first row for j in range(1, M): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, N): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, N): for j in range(1, M): # The value in the current cell will be the maximum gold collected # from either the cell above it or the cell to the left of it dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The answer will be in the bottom-right cell return dp[N-1][M-1]"},{"question":"Given a string S and a pattern P, write a function to find and return the starting indices of all occurrences of the pattern P in the string S. The search should be case-sensitive. Example 1: Input : S = \\"abracadabra\\" P = \\"abra\\" Output : 0 7 Explanation : The pattern \\"abra\\" occurs at indices 0 and 7. Example 2: Input : S = \\"aaaa\\" P = \\"aa\\" Output : 0 1 2 Explanation : The pattern \\"aa\\" occurs at indices 0, 1 and 2. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findPatternIndices() which takes the string S and the pattern P as inputs and returns a list of integers representing the starting indices of all occurrences of P in S. Expected Time Complexity: O(N + M) Expected Auxiliary Space: O(N) Constraints: 1 ≤ |S|, |P| ≤ 10^6 S and P consist of only lowercase English letters.","solution":"def findPatternIndices(S, P): Returns the starting indices of all occurrences of the pattern P in the string S. result = [] len_s = len(S) len_p = len(P) # Edge case where the pattern is longer than the string if len_p > len_s: return result # Precompute the longest prefix suffix array for the KMP algorithm lps = [0] * len_p j = 0 # length of previous longest prefix suffix i = 1 while i < len_p: if P[i] == P[j]: j += 1 lps[i] = j i += 1 else: if j != 0: j = lps[j-1] else: lps[i] = 0 i += 1 i = 0 # index for S j = 0 # index for P while i < len_s: if P[j] == S[i]: i += 1 j += 1 if j == len_p: result.append(i - j) j = lps[j-1] elif i < len_s and P[j] != S[i]: if j != 0: j = lps[j-1] else: i += 1 return result"},{"question":"You are given a grid with `n` rows and `m` columns. Each cell in the grid contains an integer value, representing the height at that point. Your task is to identify the largest rectangular area in the grid, such that the height of each cell within the rectangle does not exceed a given threshold `k`. Write a program to determine the area of the largest rectangle that can be formed under this condition. # Input - The first line contains three integers `n`, `m`, and `k` (1 ≤ n, m ≤ 500, 1 ≤ k ≤ 10^9) — the number of rows, the number of columns, and the height threshold. - The next `n` lines contain `m` integers each, representing the heights of the cells in the grid. # Output - Print a single integer, the area of the largest rectangle such that the height of each cell within the rectangle does not exceed `k`. # Example Input ``` 4 4 5 1 3 2 1 4 6 5 3 3 2 1 7 4 5 3 2 ``` Output ``` 6 ``` In the example, the largest rectangle where all cell heights do not exceed 5 has an area of 6 (3 rows x 2 columns). # Note - To find the largest rectangle, consider each row as the base of the rectangle and use a histogram approach to identify the maximum area under this condition. Good luck with solving the problem!","solution":"def largest_rectangle_area_under_threshold(grid, n, m, k): def max_histogram_area(histogram): stack = [] max_area = 0 index = 0 while index < len(histogram): if not stack or histogram[stack[-1]] <= histogram[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area height = [0] * m max_area = 0 for i in range(n): for j in range(m): if grid[i][j] <= k: height[j] += 1 else: height[j] = 0 max_area = max(max_area, max_histogram_area(height)) return max_area"},{"question":"Your friend is organizing a drawing competition and wants to evenly distribute colored pencils to the participants. Each participant should receive exactly the same number of pencils, and none should be leftover. Additionally, the colored pencils come in packs of 6 pencils each. Write a program that determines the minimum number of packs needed to ensure all participants receive the same number of colored pencils with no leftovers. Input Two integers, p (1 ≤ p ≤ 1000) representing the number of participants, and c (1 ≤ c ≤ 1000) representing the number of colored pencils each participant should receive, are given in a single line separated by a space. Output Print the minimum number of packs needed in a line. Example Input 10 15 Output 25","solution":"def minimum_packs_needed(p, c): Given the number of participants `p` and the number of colored pencils each participant should receive `c`, computes the minimum number of packs needed if each pack contains 6 pencils. :param p: int - number of participants (1 ≤ p ≤ 1000) :param c: int - number of colored pencils each participant should receive (1 ≤ c ≤ 1000) :return: int - minimum number of packs needed total_pencils_needed = p * c packs_needed = (total_pencils_needed + 5) // 6 # Ceiling division by 6 return packs_needed"},{"question":"# Unique Paths with Obstacles You are given a 2D grid, `obstacleGrid`, of size `m x n` representing a robot\'s map where: - `0` represents an empty space. - `1` represents an obstacle. The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (i.e., `grid[m-1][n-1]`) starting from the top-left corner (`grid[0][0]`). Write a function that returns the number of unique paths the robot can take to reach the bottom-right corner of the grid. If there is no valid path, return `0`. **Note**: - The dimensions of the grid are at least `1 x 1` and at most `100 x 100`. - The starting and ending positions will always be open (`0`). ----- Examples # Basic Tests ``` Input: [[0, 0, 0], [0, 1, 0], [0, 0, 0]] Output: 2 ``` Explanation: There are two unique paths: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right ``` Input: [[0, 1], [0, 0]] Output: 1 ``` Explanation: There is only one unique path: 1. Down -> Right ``` Input: [[1, 0]] Output: 0 ``` Explanation: There is no valid path because the starting position is blocked. # Edge Cases ``` Input: [[0]] Output: 1 ``` Explanation: There is a single cell with no obstacles, so there is exactly one path. ``` Input: [[0, 0, 0, 0], [0, 1, 1, 0], [0, 0, 0, 0]] Output: 2 ``` Explanation: There are two unique paths: 1. Right -> Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right -> Right ----- Testing Along with the example tests given: - There are **150** tests using grids of size in range [1 x 1 - 10 x 10] - There are **50** tests using grids of size in range [10 x 10 - 20 x 20] - There are **10** tests using grids of size in range [20 x 20 - 100 x 100] All test cases can be passed within 5 seconds. Efficient solutions using dynamic programming are expected.","solution":"def uniquePathsWithObstacles(obstacleGrid): m, n = len(obstacleGrid), len(obstacleGrid[0]) # If the starting point has an obstacle, then there are no paths. if obstacleGrid[0][0] == 1: return 0 # Initialize the starting point obstacleGrid[0][0] = 1 # Initialize the first row for i in range(1, n): obstacleGrid[0][i] = int(obstacleGrid[0][i] == 0 and obstacleGrid[0][i-1] == 1) # Initialize the first column for i in range(1, m): obstacleGrid[i][0] = int(obstacleGrid[i][0] == 0 and obstacleGrid[i-1][0] == 1) # Populate the rest of the grid for i in range(1, m): for j in range(1, n): if obstacleGrid[i][j] == 0: obstacleGrid[i][j] = obstacleGrid[i-1][j] + obstacleGrid[i][j-1] else: obstacleGrid[i][j] = 0 return obstacleGrid[m-1][n-1]"},{"question":"You are given an array of integers and a target sum. Your task is to find out if any two distinct elements in the array sum up to the target sum. If such a pair exists, return `True`, otherwise return `False`. -----Input----- The input consists of two lines. The first line contains an integer n (1 leq n leq 10^4) denoting the number of elements in the array. The second line contains n space-separated integers a_1, a_2, ..., a_n (-10^9 leq a_i leq 10^9), denoting the elements of the array, followed by a single integer S (-10^9 leq S leq 10^9), representing the target sum. -----Output----- Print `True` if there exist two distinct elements in the array such that their sum is equal to the target sum. Otherwise, print `False`. -----Examples----- Input 5 1 2 3 4 5 8 Output True Input 4 1 1 1 1 3 Output False Input 6 -1 -2 -3 -4 -5 -6 -8 Output True -----Note----- In the first example, the pair (3, 5) sums up to 8, so the output is `True`. In the second example, no pair of distinct elements sums up to 3, so the output is `False`. In the third example, the pair (-2, -6) sums up to -8, so the output is `True`.","solution":"def has_pair_with_sum(n, arr, target): Returns True if there are two distinct elements in the array that sum up to the target. Otherwise, returns False. Parameters: n (int): The number of elements in the array. arr (list of int): The elements of the array. target (int): The target sum. Returns: bool: True if a pair exists that sums to the target, False otherwise. seen = set() for num in arr: if target - num in seen: return True seen.add(num) return False"},{"question":"Tom loves hiking and enjoys exploring various trails. One of the things he likes to do is analyze the difficulty of the trails based on the altitude changes. The elevation of the trail is recorded as a sequence of integers representing the altitude at various points along the trail. To analyze the difficulty level of the trail, Tom wants to find the \\"steepness\\" of the trail, defined as the maximum absolute difference in altitude between any two consecutive points. Your task is to help Tom determine the maximum steepness of the trail given the sequence of altitudes. -----Input----- The first line of the input contains an integer n — the number of altitude points (2 ≤ n ≤ 1000). The second line contains n integers a_{1}, a_{2}, ..., a_{n} representing the altitudes at each point ( -10^6 ≤ a_{i} ≤ 10^6). -----Output----- Print the maximum steepness of the trail. -----Examples----- Input 5 1 3 6 2 8 Output 6 Input 4 5 5 5 5 Output 0","solution":"def max_steepness(n, altitudes): Determines the maximum steepness of the trail given the sequence of altitudes. Parameters: n (int): the number of altitude points altitudes (list): list of integers representing the altitudes at each point Returns: int: the maximum steepness of the trail max_diff = 0 for i in range(1, n): max_diff = max(max_diff, abs(altitudes[i] - altitudes[i - 1])) return max_diff"},{"question":"You are given a string consisting of lowercase letters. You want to rearrange the string so that no two adjacent characters are the same. If such a rearrangement is not possible, return \\"No valid arrangement\\". -----Input----- The first line contains a single integer t (1 le t le 10^4) — the number of test cases. Each of the next t lines contains a string s (1 le |s| le 10^5). The sum of |s| over all test cases does not exceed 10^6. -----Output----- For each test case, if it is possible to rearrange the string such that no two adjacent characters are the same, print any such rearrangement. If no valid arrangement is possible, print \\"No valid arrangement\\". -----Examples----- Input 3 aabb aaab aaaaaa Output abab No valid arrangement No valid arrangement -----Note----- In the first test case, one possible rearrangement is \\"abab\\". No characters are adjacent to each other. In the second test case, there is no way to rearrange the string to avoid having two adjacent characters be the same. In the third test case, it is clear that adjacency cannot be avoided and hence \\"No valid arrangement\\" is returned.","solution":"from collections import Counter import heapq def rearrange_string(s): char_count = Counter(s) max_heap = [(-count, char) for char, count in char_count.items()] heapq.heapify(max_heap) prev_char, prev_count = None, 0 result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) if prev_char is not None: heapq.heappush(max_heap, (prev_count, prev_char)) prev_char = char prev_count = count + 1 # Moving towards zero (since we\'re using negative counts) if prev_count == 0: prev_char = None # Reset previous character if its count has reached zero rearranged_string = \'\'.join(result) if len(rearranged_string) != len(s): return \\"No valid arrangement\\" return rearranged_string def process_test_cases(test_cases): results = [] for s in test_cases: results.append(rearrange_string(s)) return results"},{"question":"Given an array A of N integers, you are required to perform Q queries on this array. The queries can be of two types: 1. \\"update x y\\": Update the x-th element of the array to y. 2. \\"sum l r\\": Compute the sum of elements from index l to index r (inclusive). To perform this efficiently, you need to implement a segment tree. Input The first line of the input contains two integers N and Q, representing the size of the array and the number of queries, respectively. The second line contains N space-separated integers, representing the elements of the array. The next Q lines contain the queries, where each query can be in one of the two formats mentioned above. Output For each \\"sum\\" query, output a single line containing the answer to that query. Constraints 1 ≤ N, Q ≤ 100000 1 ≤ A[i] ≤ 100000 0 ≤ x < N 0 ≤ l ≤ r < N 1 ≤ y ≤ 100000 Example Input: 5 4 1 2 3 4 5 sum 1 3 update 2 6 sum 2 4 sum 0 4 Output: 9 15 18","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) # Build the tree self._build(data) def _build(self, data): # Initialize leaves for i in range(self.n): self.tree[self.n + i] = data[i] # Initialize inner nodes for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[2 * i] + self.tree[2 * i + 1] def update(self, index, value): pos = index + self.n self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = self.tree[2 * pos] + self.tree[2 * pos + 1] def range_sum(self, left, right): left += self.n right += self.n + 1 # make right inclusive sum_ = 0 while left < right: if left % 2 == 1: sum_ += self.tree[left] left += 1 if right % 2 == 1: right -= 1 sum_ += self.tree[right] left //= 2 right //= 2 return sum_ def process_queries(N, Q, data, queries): seg_tree = SegmentTree(data) result = [] for query in queries: parts = query.split() if parts[0] == \'update\': x = int(parts[1]) y = int(parts[2]) seg_tree.update(x, y) elif parts[0] == \'sum\': l = int(parts[1]) r = int(parts[2]) result.append(seg_tree.range_sum(l, r)) return result # Example usage: N = 5 Q = 4 data = [1, 2, 3, 4, 5] queries = [ \\"sum 1 3\\", \\"update 2 6\\", \\"sum 2 4\\", \\"sum 0 4\\" ] print(process_queries(N, Q, data, queries)) # Outputs: [9, 15, 18]"},{"question":"Write a program that takes the height and radius of a cylindrical container and calculates the volume of liquid the container can hold. The formula to calculate the volume of a cylinder is given by: [ text{Volume} = pi times r^2 times h ] where ( r ) is the radius of the base of the cylinder, ( h ) is the height of the cylinder, and ( pi ) is approximately equal to 3.14159. Input The input is a sequence of datasets. The end of the input is indicated by a line containing two zeros separated by space. Each dataset consists of two integers ( h ) and ( r ) separated by a single space in a line. These integers represent the height and the radius of the cylinder respectively. The number of datasets is less than or equal to 30. Output For each dataset, print the volume of the cylinder in a separate line. The volume should be printed with two decimal places. Example Input 10 5 7 2 0 0 Output 785.40 87.96","solution":"import math def calculate_cylinder_volumes(datasets): result = [] for h, r in datasets: if h == 0 and r == 0: break volume = math.pi * r**2 * h result.append(f\\"{volume:.2f}\\") return result # Parsing input for the function def parse_input(input_lines): datasets = [] for line in input_lines.strip().split(\'n\'): h, r = map(int, line.split()) datasets.append((h, r)) return datasets # Example use of the function def main(input_string): datasets = parse_input(input_string) volumes = calculate_cylinder_volumes(datasets) for volume in volumes: print(volume)"},{"question":"John works at a high-tech company where he has been assigned the task to produce a list of unique user IDs that have logged into the company\'s system for the past month. For privacy reasons, each user is assigned a positive integer as their user ID which should be kept unique in the list. Additionally, some of the user IDs may have multiple login attempts and some non-user system events are also logged which need to be filtered out. John has a list which contains a sequence of integers. Each integer can represent either a user login event with a positive integer as the user ID or a non-user system event indicated by the number -1. John needs to process this list to create a compressed list of unique user IDs in the order they first appeared, ignoring non-user system events. Write a function that takes this list as input and returns a list of unique user IDs in the order of their first appearance, excluding the -1 events. # Function Signature: ```python def unique_user_ids(events: List[int]) -> List[int]: pass ``` # Input: - The function receives an input list `events` with a sequence of integers where each integer is either a positive integer representing a user ID or -1 representing a non-user system event. (1 ≤ length of events ≤ 10^6, 1 ≤ user ID ≤ 10^9) # Output: - The function should return a list of integers representing unique user IDs in the order of their first appearance, excluding any -1 events. # Example: ```python # Example 1 events = [3, 5, 3, -1, 2, 5, -1, 3, 7] assert unique_user_ids(events) == [3, 5, 2, 7] # Example 2 events = [1, -1, 2, 2, 4, 3, -1, 4] assert unique_user_ids(events) == [1, 2, 4, 3] ``` # Note: - In the first example, 3 appears first and is added to the list, then 5 is added. The subsequent appearance of 3 is ignored as it is already in the list. -1 is ignored. 2 is added as it is new. The last number 7 is added as it is also new. - In the second example, 1, 2, 4, and 3 are added to the list in the order of their first appearance, ignoring duplications and non-user events (-1).","solution":"from typing import List def unique_user_ids(events: List[int]) -> List[int]: Returns a list of unique user IDs in the order of their first appearance, excluding -1 events. user_set = set() unique_users = [] for event in events: if event == -1: continue if event not in user_set: user_set.add(event) unique_users.append(event) return unique_users"},{"question":"Write a function, `longest_common_subsequence`, that takes two strings as input and returns the length of their longest common subsequence. A subsequence is a sequence that appears in the same relative order, but not necessarily contiguously. For example, \\"ace\\" is a subsequence of \\"abcde\\", but \\"aec\\" is not. # Function Signature ```python def longest_common_subsequence(str1: str, str2: str) -> int: ``` # Input - `str1` (1 <= len(str1) <= 1000): A string consisting of lower-case English letters. - `str2` (1 <= len(str2) <= 1000): Another string consisting of lower-case English letters. # Output - Returns an integer representing the length of the longest common subsequence of the two strings. # Examples ```python assert longest_common_subsequence(\\"abcde\\", \\"ace\\") == 3 assert longest_common_subsequence(\\"abc\\", \\"abc\\") == 3 assert longest_common_subsequence(\\"abc\\", \\"def\\") == 0 assert longest_common_subsequence(\\"abcdef\\", \\"acef\\") == 4 assert longest_common_subsequence(\\"oxcpqrsvwf\\", \\"shmtulqrypy\\") == 2 ``` # Constraints - You are expected to implement the solution using dynamic programming for optimal performance. You should use a 2-dimensional list to store the lengths of the longest common subsequences for subtstrings. - Your solution must run in O(n * m) time where n and m are the lengths of the input strings.","solution":"def longest_common_subsequence(str1: str, str2: str) -> int: Function to return the length of longest common subsequence between two strings. # Initialize the DP table with dimensions (len(str1) + 1) x (len(str2) + 1) dp = [[0] * (len(str2) + 1) for _ in range(len(str1) + 1)] # Iterate over both strings to fill the DP table for i in range(1, len(str1) + 1): for j in range(1, len(str2) + 1): if str1[i - 1] == str2[j - 1]: # If characters match, increment from the previous indices dp[i][j] = dp[i - 1][j - 1] + 1 else: # If characters don\'t match, take the max between the previous ones dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # The last element in the dp table will have the length of the longest common subsequence return dp[len(str1)][len(str2)]"},{"question":"The problem is to implement a feature which checks whether two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters with the same frequencies, regardless of the order of characters. Your task is to write a function that takes two strings as input and returns whether or not they are anagrams of each other. Input: The first line contains an integer t, the number of test cases. Each of the next t lines contains two strings separated by a space. Output: For each test case, print \\"YES\\" if the strings are anagrams of each other, and \\"NO\\" otherwise. Print each answer on a new line. Constraints: 1 ≤ t ≤ 100 1 ≤ length of each string ≤ 100 All strings contain lowercase alphabetical characters only. SAMPLE INPUT 3 listen silent triangle integral apple peach SAMPLE OUTPUT YES YES NO","solution":"def are_anagrams(str1, str2): Check if two strings are anagrams of each other. if sorted(str1) == sorted(str2): return \\"YES\\" else: return \\"NO\\" def process_test_cases(test_cases): Process multiple test cases and return results. results = [] for str1, str2 in test_cases: results.append(are_anagrams(str1, str2)) return results"},{"question":"You are given an integer array `nums`. Write a function to move all the even numbers to the beginning of the array followed by all the odd numbers. The relative order of the even and odd numbers should be preserved within their respective segments. Input Format - The first line contains an integer `T`, the number of test cases. - For each test case: - The first line contains an integer `N`, the number of elements in the array `nums`. - The second line contains `N` space-separated integers denoting the elements of the array `nums`. Output Format For each test case, print the rearranged array on a new line. Constraints - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 10^5 - 1 ≤ nums[i] ≤ 10^4 Example Input 2 4 1 2 3 4 5 3 1 2 4 5 Example Output 2 4 1 3 2 4 3 1 5 Explanation For the first test case, even numbers [2, 4] are moved to the beginning followed by odd numbers [1, 3] while preserving their relative order. For the second test case, even numbers [2, 4] are moved to the beginning followed by odd numbers [3, 1, 5] while preserving their relative order.","solution":"def move_evens_to_beginning(nums): This function takes a list of integers and returns a new list with all even numbers moved to the beginning, followed by all the odd numbers. The relative order of the even and odd numbers is preserved. evens = [num for num in nums if num % 2 == 0] odds = [num for num in nums if num % 2 != 0] return evens + odds def process_test_cases(T, test_cases): This function processes multiple test cases and returns results for each case. :param T: The number of test cases. :param test_cases: A list of tuples, each containing: - An integer N, the number of elements in the array. - A list of N integers (the array `nums`). :return: A list of arrays, each rearranged according to the problem statement. results = [] for i in range(T): N, nums = test_cases[i] result = move_evens_to_beginning(nums) results.append(result) return results"},{"question":"# Task: Write a function `compress_string` that shortens a string using the following rule: For each group of consecutive repeated characters in the string, the function should replace the group with the character followed by the number of repetition. If a character occurs only once, it remains unchanged. Parameters: compress_string(s: str) -> str **s (str):** The input string, consisting of only lowercase alphabet letters (a-z). The length of the string will be in the range [0, 10^5]. Rules/Note: * If the string is empty, return an empty string. * The compressed string should be created such that its length is minimized. * The function should be case-sensitive (all lowercase characters). # Examples: * compress_string(\\"aabcccaaa\\") Output: \\"a2bc3a3\\" * compress_string(\\"abc\\") Output: \\"abc\\" * compress_string(\\"aaabbbaa\\") Output: \\"a3b3a2\\" * compress_string(\\"\\") Output: \\"\\" # Additional Examples: * compress_string(\\"xxyyzzzz\\") Output: \\"x2y2z4\\" * compress_string(\\"p\\") Output: \\"p\\"","solution":"def compress_string(s): Compresses a string using the rule described in the problem statement. Parameters: s (str): The input string Returns: str: The compressed string if not s: return \\"\\" compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: if count > 1: compressed.append(f\\"{s[i-1]}{count}\\") else: compressed.append(s[i-1]) count = 1 if count > 1: compressed.append(f\\"{s[-1]}{count}\\") else: compressed.append(s[-1]) return \\"\\".join(compressed)"},{"question":"You are given an array `a` of integers, and you need to determine whether it is possible to split the array into two non-empty subsequences such that the sum of the elements in both subsequences is equal. Each element in the array can only be used in one of the subsequences. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Input The input consists of multiple test cases. The first line contains the number of test cases `t` (1 ≤ t ≤ 10^3). Description of the test cases follows. For each test case, the first line contains a single integer `n` (2 ≤ n ≤ 2 ⋅ 10^3) — the length of the array. The second line contains `n` integers a1, a2, ..., an (-10^3 ≤ ai ≤ 10^3) — the elements of the array. It is guaranteed that the sum of `n` over all test cases does not exceed 2 ⋅ 10^3. Output For each test case, print \\"YES\\" if it is possible to split the array into two subsequences with an equal sum, or \\"NO\\" if it is not possible. Example Input 4 4 1 2 3 4 3 1 1 1 5 1 2 3 6 6 1 -1 2 -2 3 -3 Output YES NO YES YES Note For the first test case, one way to split the array is into [1, 3] and [2, 4]. For the second test case, it\'s not possible to split the array into two subsequences with equal sum. For the third test case, one way to split the array is into [6] and [1, 2, 3]. For the fourth test case, one way to split the array is into [1, 2, 3] and [-1, -2, -3].","solution":"def can_split_array(a): Determines if it\'s possible to split array a into two non-empty subsequences with equal sum. total_sum = sum(a) # If total sum is odd, it\'s not possible to split it into two equal parts if total_sum % 2 != 0: return \\"NO\\" target_sum = total_sum // 2 n = len(a) # Initialize a set to store possible sums we can form dp = set() dp.add(0) for num in a: # Iterate in reverse to avoid using the same element multiple times for sub_sum in list(dp): if sub_sum + num == target_sum: return \\"YES\\" dp.add(sub_sum + num) return \\"NO\\" def process_test_cases(t, test_cases): results = [] for case in test_cases: n, a = case results.append(can_split_array(a)) return results"},{"question":"Eva has a string made up of lowercase English letters. She loves playing with her string by changing each character to its lexicographical successor. For instance, \'a\' becomes \'b\', \'b\' becomes \'c\', and so on, with \'z\' becoming \'a\'. Eva decides to perform this operation multiple times until each character of the string becomes its lexicographical successor \'K\' times. She wishes to know the final version of the string after all these operations. Your task is to help Eva determine the final state of her string after performing the operation. Input The first line contains an integer T, the number of test cases. Each of the next T lines contains two values: a positive integer K and a string S, separated by a space. Output For each test case, output the resultant string after performing the operation K times. Constraints 1 ≤ T ≤ 10^5 1 ≤ K ≤ 10^9 1 ≤ |S| ≤ 100 Sample Input 2 3 abc 1 xyz Sample Output def yza Explanation: Test case 1: When K=3, \'a\' becomes \'d\', \'b\' becomes \'e\', and \'c\' becomes \'f\'. Thus, the resultant string is \\"def\\". Test case 2: When K=1, \'x\' becomes \'y\', \'y\' becomes \'z\', and \'z\' becomes \'a\'. Thus, the resultant string is \\"yza\\".","solution":"def transform_string(k, s): Transforms the string s by shifting each character k lexicographical positions. k = k % 26 # To handle large values of K and keep it within the alphabet range result = [] for char in s: new_char = chr(((ord(char) - ord(\'a\') + k) % 26) + ord(\'a\')) result.append(new_char) return \\"\\".join(result) def process_test_cases(t, test_cases): Processes multiple test cases and returns the results. results = [] for k, s in test_cases: result = transform_string(k, s) results.append(result) return results"},{"question":"Consider an array a consisting of n integers, a = [a_1, a_2, ..., a_n]. Depending on a value k and string dir, you need to perform rotations on this array. A rotation is defined as follows: - If dir is \\"left\\", rotate the array k times to the left. - If dir is \\"right\\", rotate the array k times to the right. After performing the rotations, return the resulting array. Note: - Rotating an array once to the left means moving the first element to the end of the array. - Rotating an array once to the right means moving the last element to the beginning of the array. Additionally, if k is greater than or equal to n, then we only need to rotate the array k % n times. Implement a function `rotateArray(arr, k, dir)` that performs the rotations and returns the resulting array. -----Input----- The input consists of the following: - An integer n (1 leq n leq 10^5) – the number of elements in the array. - An array a consisting of n integers where each integer is between -10^9 and 10^9. - An integer k (0 leq k leq 10^9). - A string dir which can be either \\"left\\" or \\"right\\". -----Output----- Output the array after performing the requested rotations. -----Example----- Input 8 [1, 2, 3, 4, 5, 6, 7, 8] 3 left Output [4, 5, 6, 7, 8, 1, 2, 3] Input 10 [0, 0, 1, 1, 2, 2, 3, 3, 4, 4] 5 right Output [0, 0, 1, 1, 2, 2, 3, 3, 4, 4] -----Explanation----- In the first example: - We have n = 8 and the array a = [1, 2, 3, 4, 5, 6, 7, 8]. - We need to perform 3 rotations to the left. - The resultant array after 3 left rotations is [4, 5, 6, 7, 8, 1, 2, 3]. In the second example: - We have n = 10 and the array a = [0, 0, 1, 1, 2, 2, 3, 3, 4, 4]. - Since k equals the size of the array, rotating 5 times to the right will result in the original array. - Thus, the output array is the same as the input array. The function should handle very large values of k efficiently by making use of the modulus operation to minimize the number of actual rotations performed. Rotate the array k % n times instead of k times if k geq n.","solution":"def rotateArray(arr, k, dir): Rotate the array `arr` `k` times to the direction specified by `dir`. Parameters: arr (list): The array to rotate. k (int): The number of times to rotate. dir (str): The direction of rotation, either \\"left\\" or \\"right\\". Returns: list: The rotated array. n = len(arr) if n == 0 or k == 0: return arr k = k % n # Optimize k if it\'s larger than n if dir == \\"left\\": return arr[k:] + arr[:k] elif dir == \\"right\\": return arr[-k:] + arr[:-k] else: raise ValueError(\\"Direction must be either \'left\' or \'right\'\\")"},{"question":"You are given a partially filled Sudoku board and your task is to complete the board such that each number from 1 to 9 appears exactly once in each row, column, and 3×3 sub-grid. Sudoku is a logic-based number placement puzzle. The objective is to fill a 9×9 grid with digits so that each column, each row, and each of the nine 3×3 subgrids that compose the grid (also called \\"boxes\\", \\"blocks\\", or \\"regions\\") contains all of the digits from 1 to 9. The puzzle setter provides a partially completed grid, which for a well-posed puzzle has a unique solution. Input A 9×9 grid containing integers and dots where integers denote filled cells and dots (\'.\') denote empty cells. Output A 9×9 grid completely filled with integers from 1 to 9. Note: You can assume that the input has a unique solution. Examples Input 5 3 . . 7 . . . . 6 . . 1 9 5 . . . . 9 8 . . . . 6 . 8 . . . 6 . . . 3 4 . . 8 . 3 . . 1 7 . . . 2 . . . 6 . 6 . . . . 2 8 . . . . 4 1 9 . . 5 . . . . 8 . . 7 9 Output 5 3 4 6 7 8 9 1 2 6 7 2 1 9 5 3 4 8 1 9 8 3 4 2 5 6 7 8 5 9 7 6 1 4 2 3 4 2 6 8 5 3 7 9 1 7 1 3 9 2 4 8 5 6 9 6 1 5 3 7 2 8 4 2 8 7 4 1 9 6 3 5 3 4 5 2 8 6 1 7 9","solution":"def solve_sudoku(board): def is_valid(board, row, col, num): # Check if num is not in the current row, column and the 3x3 subgrid for i in range(9): if board[row][i] == num or board[i][col] == num: return False if board[row // 3 * 3 + i // 3][col // 3 * 3 + i % 3] == num: return False return True def solve(board): for row in range(9): for col in range(9): if board[row][col] == \'.\': for num in \'123456789\': if is_valid(board, row, col, num): board[row][col] = num if solve(board): return True board[row][col] = \'.\' return False return True solve(board) # Example usage board = [ [\'5\', \'3\', \'.\', \'.\', \'7\', \'.\', \'.\', \'.\', \'.\'], [\'6\', \'.\', \'.\', \'1\', \'9\', \'5\', \'.\', \'.\', \'.\'], [\'.\', \'9\', \'8\', \'.\', \'.\', \'.\', \'.\', \'6\', \'.\'], [\'8\', \'.\', \'.\', \'.\', \'6\', \'.\', \'.\', \'.\', \'3\'], [\'4\', \'.\', \'.\', \'8\', \'.\', \'3\', \'.\', \'.\', \'1\'], [\'7\', \'.\', \'.\', \'.\', \'2\', \'.\', \'.\', \'.\', \'6\'], [\'.\', \'6\', \'.\', \'.\', \'.\', \'.\', \'2\', \'8\', \'.\'], [\'.\', \'.\', \'.\', \'4\', \'1\', \'9\', \'.\', \'.\', \'5\'], [\'.\', \'.\', \'.\', \'.\', \'8\', \'.\', \'.\', \'7\', \'9\'] ] solve_sudoku(board) for row in board: print(\' \'.join(row))"},{"question":"Given a string S, generate all possible permutations of the characters of the string in lexicographically sorted order. Example 1: Input: S = \\"ABC\\" Output: [ \\"ABC\\", \\"ACB\\", \\"BAC\\", \\"BCA\\", \\"CAB\\", \\"CBA\\" ] Example 2: Input: S = \\"XY\\" Output: [ \\"XY\\", \\"YX\\" ] Your Task: You don\'t need to read input or print anything. Your task is to complete the function permute() which takes the string S as input parameter and returns a list of all possible permutations of the provided string in lexicographically sorted order. Expected Time Complexity: O(n * n!) Expected Auxiliary Space: O(n) *Here `n` is the length of the given string. Constraints: 1 <= len(S) <= 7 All characters of the string are lowercase letters and are unique.","solution":"from itertools import permutations def permute(S): Returns all permutations of the string S in lexicographically sorted order. perms = sorted([\'\'.join(p) for p in permutations(S)]) return perms"},{"question":"Given a list of integers `arr` and an integer `k`, return the `k` most frequent elements in `arr`. If there is a tie in frequency, the elements should be sorted in ascending order. Your solution should aim to be efficient in terms of time complexity. Example 1: Input: `arr = [1,1,1,2,2,3]`, `k = 2` Output: `[1, 2]` Explanation: The frequency of 1 is 3, the frequency of 2 is 2, and the frequency of 3 is 1. Thus, the two most frequent elements are 1 and 2. Example 2: Input: `arr = [4,4,4,2,2,3,3,3]`, `k = 2` Output: `[3, 4]` Explanation: The frequency of 4 and 3 are both 3, and the frequency of 2 is 2. Since 3 and 4 have the highest frequencies, they should be returned sorted in ascending order. Example 3: Input: `arr = [1], k = 1` Output: `[1]` Explanation: The only element in the array is 1, so it is the most frequent element. Constraints: - 1 <= arr.length <= 10^5 - -10^4 <= arr[i] <= 10^4 - 1 <= k <= arr.length","solution":"from collections import Counter def k_most_frequent_elements(arr, k): Returns the k most frequent elements in arr. If there is a tie in frequency, the elements are sorted in ascending order. if not arr: return [] # Count the frequency of each element frequency_map = Counter(arr) # Create a sorted list of elements based on their frequencies (highest first) # and their values (ascending order in case of tie) sorted_elements = sorted(frequency_map.keys(), key=lambda x: (-frequency_map[x], x)) # Return the top k elements return sorted_elements[:k]"},{"question":"Harold is fascinated by squares and their unique properties. He recently came across the concept of diagonal intersections within a square and wondered exactly how many distinct intersection points exist when drawing both diagonals of a square. He decided to extend this idea to rectangles and generalize the concept for a given grid of rectangles. Given an m x n grid of rectangles, Harold wants to know how many distinct intersection points there are when you draw both the diagonals of each rectangle. Input The first line of the input contains two integers m and n (1 ≤ m, n ≤ 1000) — the number of rows and columns of the grid respectively. Output Print a single integer — the total number of distinct intersection points where the diagonals of the rectangles within the grid intersect. Examples Input 2 2 Output 1 Input 3 3 Output 4 Note 1. In the first example, the grid has 4 rectangles arranged in 2 rows and 2 columns. The diagonals of these rectangles intersect at only one distinct point within the entire grid. 2. In the second example, the grid has 9 rectangles arranged in 3 rows and 3 columns. The diagonals of these rectangles intersect at exactly 4 distinct points within the entire grid.","solution":"def count_diagonal_intersections(m, n): Returns the number of distinct intersection points where the diagonals of the rectangles within an m x n grid intersect. # The number of distinct intersection points is (m-1) * (n-1) return (m - 1) * (n - 1)"},{"question":"You are given two sorted lists of integers, List A and List B, both of length N. Your task is to merge these two lists into a single sorted list and then find the median of the merged list. The median of a list is the middle element if the list length is odd, and the average of the two middle elements if the list length is even. ----- Input ----- - First line contains an integer N, the length of List A and List B. - Second line contains N integers representing List A. - Third line contains N integers representing List B. ----- Output ----- A single decimal value corresponding to the median of the merged list. ----- Constraints ----- - 1 <= N <= 10^5 - -10^9 <= A[i], B[i] <= 10^9 ----- Example ----- Input: 3 1 3 5 2 4 6 Output: 3.5","solution":"def find_median_of_merged_lists(N, list_A, list_B): Merges two sorted lists and finds the median of the merged list. Parameters: - N : int : length of the input lists - list_A : list of int : first sorted list of integers - list_B : list of int : second sorted list of integers Returns: - float : median of the merged list # Merging the two sorted lists merged_list = [] i, j = 0, 0 while i < N and j < N: if list_A[i] < list_B[j]: merged_list.append(list_A[i]) i += 1 else: merged_list.append(list_B[j]) j += 1 # Append the remaining elements while i < N: merged_list.append(list_A[i]) i += 1 while j < N: merged_list.append(list_B[j]) j += 1 # Finding the Median total_length = 2 * N if total_length % 2 == 0: return (merged_list[total_length // 2 - 1] + merged_list[total_length // 2]) / 2 else: return merged_list[total_length // 2]"},{"question":"Given an integer array `nums` sorted in non-decreasing order, remove the duplicates in-place such that each element appears only once. The relative order of the elements should be kept the same and you should not use extra space for another array; you must do this by modifying the input array in-place with O(1) extra memory. Return the new length of the array after duplicates have been removed. Do not allocate extra space for another array; you must do this by modifying the input array in-place with O(1) extra memory. Example: Given `nums = [1, 1, 2]`, your function should return `2`, with the first two elements of `nums` being `1` and `2` respectively (it doesn’t matter what you leave beyond the returned length). Another example: Given `nums = [0,0,1,1,1,2,2,3,3,4]`, the function should return `5`, with the first five elements of `nums` being modified to `0, 1, 2, 3, 4` respectively (it doesn’t matter what values are set beyond the returned length). Function Signature: ```python def removeDuplicates(nums: List[int]) -> int: pass ``` Input Format: - The first line contains an integer `n`, the size of the array `nums`. - The second line contains `n` space-separated integers representing the elements of `nums`. Constraints: - `0 <= nums.length <= 3 * 10^4` - `-10^4 <= nums[i] <= 10^4` - `nums` is sorted in non-decreasing order. Sample Input: ``` 6 0 0 1 1 2 2 ``` Sample Output: ``` 3 ``` Explanation: The array after removing duplicates `[0, 1, 2]` and the length of the array is `3`.","solution":"from typing import List def removeDuplicates(nums: List[int]) -> int: if not nums: return 0 i = 0 for j in range(1, len(nums)): if nums[j] != nums[i]: i += 1 nums[i] = nums[j] return i + 1"},{"question":"Megan wants to determine the smallest multiple of all the integers in a given array. Your task is to devise an efficient algorithm to compute the least common multiple (LCM) of an array of unique positive integers. All inputs will be valid. Passing [4, 6, 8] should return 24, as 24 is the smallest number that all given integers divide into without a remainder. ```Disclaimer: Megan is looking for a solution with a time complexity better than O(n^2), where n is the size of the input array.``` ```python smallest_multiple([5, 7, 11]) # => 385 smallest_multiple([2, 3, 4, 5]) # => 60 smallest_multiple([12, 15, 18, 20]) # => 180 ```","solution":"from math import gcd from functools import reduce def lcm(a, b): Helper function to compute the Least Common Multiple (LCM) of two integers. return a * b // gcd(a, b) def smallest_multiple(arr): Returns the smallest multiple (Least Common Multiple) of all the unique positive integers in the given array. return reduce(lcm, arr)"},{"question":"Alice is arranging a pet adoption fair in her town. She has N cages lined up in a row, each containing a pet of a certain type. To increase the chances of pets being adopted, she wants to arrange the cages such that there\'s a longer sequence of cages with pets of the same type next to each other. Alice can swap the pets between any two cages any number of times to achieve this goal. However, each type of pet prefers to be placed within certain sections of the row and these sections are defined as disjoint ranges of indices. Determine the maximum length of a sequence of cages with the same type of pets next to each other after performing any number of swaps. ------ Input Format ------ - First line will contain T, the number of test cases. Then the test cases follow. - The first line of each test case contains a single integer N, the number of cages. - The next line contains a string P with N characters. The i^{th} character in P is the type of the pet in the i^{th} cage. - The following line contains an integer M, the number of sections. - The next M lines describe the disjoint sections. Each section is defined by two integers Li and Ri (1 ≤ Li ≤ Ri ≤ N). ------ Output Format ------ For each test case, output a single integer denoting the length of the longest sequence of cages containing pets of the same type after performing any number of swaps. ------ Constraints ------ 1 ≤ T ≤ 100 1≤N ≤1000 1 ≤ M ≤ 20 1 ≤ Li, Ri ≤ N - The string P contains lowercase English alphabets only. ----- Sample Input 1 ------ 2 6 abacca 2 1 3 4 6 5 abcab 3 1 2 3 3 4 5 ----- Sample Output 1 ------ 3 2 ----- Explanation 1 ------ Test case 1: By swapping the pets within the sections [1, 3] and [4, 6], we can get a sequence \\"aaccca\\". Test case 2: By arranging the pets within the sections [1, 2], [3, 3], and [4, 5], no swap can make a sequence longer than \\"aa\\" or \\"bb\\" within allowed sections.","solution":"def max_sequence_length(T, test_cases): results = [] for case in test_cases: N = case[\'N\'] P = case[\'P\'] M = case[\'M\'] sections = case[\'sections\'] pet_counts = {} # Count occurrences of each pet type in each section for l, r in sections: for i in range(l - 1, r): pet_type = P[i] if pet_type not in pet_counts: pet_counts[pet_type] = 0 pet_counts[pet_type] += 1 # Find the maximum count of any pet type max_length = max(pet_counts.values()) results.append(max_length) return results # Entry function to handle multiple test cases def handle_input(num_cases, raw_test_cases): test_cases = [] index = 0 for _ in range(num_cases): N = int(raw_test_cases[index]) P = raw_test_cases[index + 1] M = int(raw_test_cases[index + 2]) sections = [] for j in range(index + 3, index + 3 + M): L, R = map(int, raw_test_cases[j].split()) sections.append((L, R)) test_cases.append({\'N\': N, \'P\': P, \'M\': M, \'sections\': sections}) index = index + 3 + M return max_sequence_length(num_cases, test_cases)"},{"question":"Given an integer N, construct an integer array of length N such that the sum of its elements is even. The array should contain unique positive integers where each integer is between 1 and N inclusive. ------ Input Format ------ - The first line contains a single integer T, denoting the number of test cases. - Each of the next T lines contains an integer N, denoting the length of the array. ------ Output Format ------ For each test case, print a single line containing the array elements. If there are multiple answers, you can print any. If it\'s not possible to construct such an array, print -1. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 ----- Sample Input 1 ------ 3 1 2 3 ----- Sample Output 1 ------ -1 1 2 1 2 4 ----- Explanation 1 ------ For the first test case, with N = 1, it is impossible to form an array with a sum that is even because any single positive integer is odd. For the second test case, with N = 2, an array [1, 2] has a sum of 3 (which is an odd number), but [1, 2] has unique positive integers that sum to an odd number, as shown in the examples above.","solution":"def construct_even_sum_array(N): if N == 1: return -1 if N % 2 == 0: # Sum of first N even length array will be even return list(range(1, N + 1)) else: # Replace the last number with N+1 to make sum even return list(range(1, N)) + [N + 1] def process_test_cases(T, test_cases): results = [] for N in test_cases: results.append(construct_even_sum_array(N)) return results"},{"question":"John is a data scientist working on a new project. He needs to process and analyze large datasets using various statistical measures. One of the key tasks is to normalize a list of numbers so that they fall within a specific range, [0, 1]. Normalization is a technique often used as a part of data preparation to ensure that each feature contributes approximately proportionately to the final result. Normalization is achieved by subtracting the minimum value in the list from each number, and then dividing the result by the range (the difference between the maximum and minimum values). Write a function that takes in a list of integers and returns a list of floats where each number is normalized using the aforementioned method. ------Input------ The input consists of a single line with space-separated integers. ------Output------ Output a list of floats where each float is the normalized value of the integer in the corresponding position of the input list, rounded to two decimal places. ------Examples------ Input 5 10 15 20 Output 0.00 0.33 0.67 1.00 Input 2 8 10 3 5 Output 0.00 0.75 1.00 0.12 0.38 ------Note------ In the first example, the minimum value is 5 and the maximum value is 20. For the number 5: (5 - 5) / (20 - 5) = 0.00 For the number 10: (10 - 5) / (20 - 5) = 0.33 For the number 15: (15 - 5) / (20 - 5) = 0.67 For the number 20: (20 - 5) / (20 - 5) = 1.00","solution":"def normalize(lst): Normalizes a list of integers such that the values fall within the range [0, 1]. if not lst: return [] min_val = min(lst) max_val = max(lst) if min_val == max_val: # If all elements are the same, return 0 for each element return [0.00] * len(lst) range_val = max_val - min_val normalized_lst = [(x - min_val) / range_val for x in lst] rounded_lst = [round(num, 2) for num in normalized_lst] return rounded_lst"},{"question":"In modern software development, such as web applications, the manipulation of textual data is crucial, particularly in sorting algorithms. Your task is to implement a function that takes a list of words and sorts them, ensuring that the order respects the case of the letters (i.e., uppercase letters should come before lowercase letters if they are the same letter). -----Constraints----- - Each word in the list only contains alphabetic characters. - The list contains at most 100 words. - The length of each word does not exceed 50 characters. -----Input----- Input is given as a single string where words are separated by spaces. -----Output----- Output should be a single space-separated string of words sorted according to the rules described. -----Function Signature----- ```python def custom_sort(words: str) -> str: pass ``` -----Sample Input----- apple Banana apple orange ORANGE -----Sample Output----- Banana ORANGE apple apple orange","solution":"def custom_sort(words: str) -> str: Takes a string of words separated by spaces and sorts them according to the rule that uppercase letters come before lowercase letters if they are the same letter. word_list = words.split() word_list.sort(key=lambda word: list(map(lambda c: (c.islower(), c), word))) return \' \'.join(word_list)"},{"question":"Given a string `s` consisting of lowercase alphabets, an integer `k` representing a number of distinct characters allowed, find the longest substring of `s` that contains at most `k` distinct characters. If `k` is greater than the number of distinct characters in `s`, return the length of `s`. Examples ```python s = \\"eceba\\" k = 2 ➞ 3 # \\"ece\\" or \\"ba\\" s = \\"aa\\" k = 1 ➞ 2 # \\"aa\\" s = \\"abcabcabc\\" k = 3 ➞ 9 # \\"abcabcabc\\" s = \\"aac\\" k = 2 ➞ 3 # \\"aac\\" s = \\"aaa\\" k = 4 ➞ 3 # since there are only 1 distinct character in s which is less than k ``` Note: The length of the string can be up to 10,000 characters, so a naive approach will not work. --- Solution Use a sliding window technique to keep track of the longest substring with at most `k` distinct characters.","solution":"def longest_substring_k_distinct(s, k): Returns the length of the longest substring with at most k distinct characters. if k == 0: # If no distinct characters are allowed, return 0 return 0 n = len(s) if n == 0: return 0 if k >= n: # If k is greater than or equal to the number of characters in s, return the length of s return n left = 0 right = 0 max_length = 0 char_frequency = {} while right < n: # Add the right character to the frequency dictionary if s[right] in char_frequency: char_frequency[s[right]] += 1 else: char_frequency[s[right]] = 1 # If window contains more than k distinct characters, remove from the left while len(char_frequency) > k: char_frequency[s[left]] -= 1 if char_frequency[s[left]] == 0: del char_frequency[s[left]] left += 1 # Update the maximum length max_length = max(max_length, right - left + 1) right += 1 return max_length"},{"question":"A museum is organizing an exhibition and needs to arrange paintings on the walls. Each painting can be described by its width and height, and the walls have a specific height but unlimited width. The goal is to fit all paintings on the walls without altering their orientations. Develop a program to determine whether the paintings can be arranged on the walls without exceeding the height of the walls. If the paintings can be arranged in any order such that the sum of their widths does not exceed a certain limit, output \\"Possible\\", otherwise, output \\"Impossible\\". Input The input consists of multiple datasets. Each dataset is given in the following format: H W p1_w p1_h p2_w p2_h ... pn_w pn_h - H (1 ≤ H ≤ 100) is the height of the walls. - W (1 ≤ W ≤ 10^5) is the maximum sum of the widths of the paintings that can fit on the walls. - pi_w (1 ≤ pi_w ≤ 1000) and pi_h (1 ≤ pi_h ≤ 1000) represent the width and height of each painting. The number of datasets does not exceed 100. Output Print \\"Possible\\" or \\"Impossible\\" for each dataset. Example Input 70 2000 100 50 300 70 150 60 80 1500 600 70 300 80 400 90 90 1000 500 100 600 80 100 2500 500 90 900 70 800 100 Output Possible Impossible Impossible Possible","solution":"def can_arrange_paintings(datasets): results = [] for dataset in datasets: # Parse the input data = dataset.split() wall_height = int(data[0]) max_total_width = int(data[1]) paintings = list(zip(map(int, data[2::2]), map(int, data[3::2]))) total_width = 0 possible = True # Check if each painting can fit in the wall height for width, height in paintings: if height > wall_height: possible = False break total_width += width if possible and total_width <= max_total_width: results.append(\\"Possible\\") else: results.append(\\"Impossible\\") return results"},{"question":"You are working on a team collaboration software project where users can create and edit collaborative documents. Each document goes through several states: \\"Created\\", \\"Opened\\", \\"Modified\\", \\"Saved\\", \\"Closed\\", or \\"Archived\\". The transitions between states should follow these rules: 1. A document can only be \\"Opened\\" after it is \\"Created\\". 2. A document can only be \\"Modified\\" after it is \\"Opened\\". 3. A document must be \\"Saved\\" before it is \\"Closed\\" or \\"Archived\\". 4. A document can be \\"Closed\\" or \\"Archived\\" after it is \\"Saved\\". 5. Once a document is \\"Closed\\" or \\"Archived\\", no further modifications or state changes should be allowed. You are provided with the list of state transitions for multiple documents. Your task is to determine if the sequences of state transitions for the documents are valid according to the rules mentioned above. -----Input----- Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 500). Description of the test cases follows. The first line of each test case contains one integer n (1 le n le 100) — the total number of state transitions for the document. The second line of each test case consists of n space-separated state transitions as strings, representing the sequence of state transitions for a document. -----Output----- For each test case print \\"Valid\\" (without quotes) if the sequence of state transitions is valid, or \\"Invalid\\" (without quotes) otherwise. -----Examples----- Input 4 5 Created Opened Modified Saved Closed 5 Created Opened Saved Archived Modified 3 Created Saved Closed 6 Created Opened Modified Saved Archived Closed Output Valid Invalid Invalid Invalid -----Note----- In the first case, the sequence is valid as it follows the rules. In the second case, the document cannot be modified after it is archived. In the third case, the document must be opened before it is saved. In the fourth case, the state changes \\"Closed\\" cannot occur after \\"Archived\\".","solution":"def validate_document_transitions(test_cases): valid_transitions = { \'Created\': [\'Opened\'], \'Opened\': [\'Modified\', \'Saved\'], \'Modified\': [\'Saved\'], \'Saved\': [\'Closed\', \'Archived\'], \'Closed\': [], \'Archived\': [], } def is_valid_sequence(sequence): current_state = None for state in sequence: if current_state is None: if state != \'Created\': return False else: if state not in valid_transitions[current_state]: return False current_state = state if current_state in [\'Closed\', \'Archived\']: if state != current_state: return False return True results = [] for case in test_cases: n, transitions = case if is_valid_sequence(transitions): results.append(\\"Valid\\") else: results.append(\\"Invalid\\") return results"},{"question":"Henry loves playing around with numbers. One fine day, he thought of creating a special number from a given sequence of integers. He defines a special number as follows: 1. Start with an empty string. 2. Iterate through the sequence of integers. 3. For each number in the sequence, if the number is even, append it to the string as is. 4. If the number is odd, append the digit \'X\' instead. For example, given the sequence [1, 2, 3, 4], the resulting string would be \\"X2X4\\". Write a program that, given a sequence of integers, generates the corresponding special number as defined above. -----Input----- The first line of input contains an integer t (1 leq t leq 100) — the number of test cases. The first line of each test case contains an integer n (1 leq n leq 50) — the length of the sequence. The second line of each test case contains n integers representing the sequence. -----Output----- For each test case, output the resulting special number in a new line. -----Examples----- Input 3 4 1 2 3 4 5 5 6 7 8 9 3 11 22 33 Output X2X4 X6X8X X22X -----Note----- In the first test case, the sequence [1, 2, 3, 4] transforms into \\"X2X4\\" as described.","solution":"def generate_special_number(t, test_cases): results = [] for i in range(t): _, sequence = test_cases[i] # unpacking each test case special_number = \\"\\" for num in sequence: if num % 2 == 0: special_number += str(num) else: special_number += \\"X\\" results.append(special_number) return results # Example Usage: # t = 3 # test_cases = [(4, [1, 2, 3, 4]), (5, [5, 6, 7, 8, 9]), (3, [11, 22, 33])] # print(generate_special_number(t, test_cases))"},{"question":"In this problem, you are required to simulate a simplified web browser history. A web browser maintains a history of visited URLs, and you can perform two operations: visiting a new URL and navigating back in history. Each test case starts with you at the current page, and you can perform a sequence of operations. The operations are as follows: - “visit <url>”: Visit a new URL, clearing any forward history. - “back <n>”: Go back n steps in the history. If you try to go back more steps than what is available, just go to the oldest visited URL. - “current”: Output the current URL. Initialize the browser history with the homepage: \\"homepage\\". -----Input----- The input starts with a line containing just one integer T : (1 le T le 20), denoting the number of test cases. Each test case starts with a line containing an integer Q : (1 le Q le 10^5), denoting the number of operations. Each of the next Q lines contains one of the operations: “visit <url>”, “back <n>”, or “current”. The <url> is a string consisting of lowercase English letters and dots (\'.\'), and the length of the URL is at most 100 characters. The value of <n> is an integer such that 1 leq n leq 10^5. -----Output----- For each \\"current\\" operation, output one line containing the current URL. -----Examples----- Sample Input: 2 5 visit google.com visit youtube.com back 1 current current 6 visit leetcode.com visit github.com visit stackoverflow.com back 2 visit gfg.com current Sample Output: google.com google.com github.com -----Explanation----- In the first case: 1. Start with \\"homepage\\". 2. Visit \\"google.com\\". 3. Visit \\"youtube.com\\". 4. Go back 1 step: now at \\"google.com\\". 5. Output the current URL: \\"google.com\\". 6. Output the current URL again: still \\"google.com\\". In the second case: 1. Start with \\"homepage\\". 2. Visit \\"leetcode.com\\". 3. Visit \\"github.com\\". 4. Visit \\"stackoverflow.com\\". 5. Go back 2 steps: now at \\"leetcode.com\\". 6. Visit \\"gfg.com\\". 7. Output the current URL: \\"gfg.com\\".","solution":"def browser_history(operations): Simulates a simplified web browser history. :param operations: List of operations as provided in the problem statement. :return: List of results for \\"current\\" operations. history = [\\"homepage\\"] current = 0 output = [] for op in operations: if op.startswith(\\"visit\\"): url = op.split(\\" \\")[1] history = history[:current + 1] history.append(url) current += 1 elif op.startswith(\\"back\\"): steps = int(op.split(\\" \\")[1]) current = max(0, current - steps) elif op.startswith(\\"current\\"): output.append(history[current]) return output"},{"question":"Develop a program that calculates the final prices for a list of items after applying a series of discount rules. Each item can only have one applicable discount, and the largest possible discount should be applied to each item. A discount rule consists of a minimum quantity threshold and a discount percentage. If an item\'s quantity is greater than or equal to the threshold, the corresponding discount percentage is applied. If more than one discount is applicable, the highest discount percentage is chosen. -----Input----- The first input line contains an integer N, the number of discount rules. The next N lines each contain two values: an integer T, the threshold quantity, and a decimal D, the discount percentage (0 <= D < 100). Following this, an integer M, the number of items available in a shop is provided. Each of the next M lines then contains two values: a string representing the item name, and an integer representing the quantity of that item in the shop. N and M will each be no greater than 100. Item names will consist only of alphanumeric characters and will have length at most 20. Thresholds will be positive integers less than or equal to 100, and discount percentages will be floating-point values between 0 and 100 (exclusive). -----Output----- For each of the M items, print a line in the format: \\"item_name final_price\\", where final_price is calculated as original price minus the highest applicable discount. Use the following formula to compute the final price for items with applicable discounts: final_price = quantity * (1 - discount_percentage / 100) If an item has no applicable discount, the final price is simply the quantity. -----Sample Input----- 3 5 20.0 10 30.0 15 50.0 4 bananas 12 apples 5 oranges 20 grapes 3 -----Sample Output----- bananas 8.4 apples 4.0 oranges 10.0 grapes 3.0","solution":"def calculate_final_prices(discount_rules, items): Calculate final prices for items after applying the highest applicable discount. Args: discount_rules (List[Tuple[int, float]]): List of tuples containing threshold and discount percentage. items (List[Tuple[str, int]]): List of tuples containing item name and quantity. Returns: List[Tuple[str, float]]: List of tuples containing item name and final price. final_prices = [] for item_name, quantity in items: applicable_discount = 0 for threshold, discount_percentage in discount_rules: if quantity >= threshold: applicable_discount = max(applicable_discount, discount_percentage) final_price = quantity * (1 - applicable_discount / 100) final_prices.append((item_name, round(final_price, 2))) return final_prices"},{"question":"Given a list of integers, you are required to group the integers based on their frequency and output the highest frequency group. If there are multiple groups with the same frequency, output the group with the smallest sum of integers. ------ Input Format ------ - The first line will contain an integer T, the number of test cases. - Each test case consists of two lines: - The first line contains an integer N, the number of integers in the list. - The second line contains N space-separated integers. ------ Output Format ------ For each test case, output the group of integers that have the highest frequency. If multiple groups have the same frequency, output the group with the smallest sum of integers. Print the numbers in non-decreasing order. ------ Constraints ------ 1 leq T leq 100 1 leq N leq 1000 1 leq text{integer value} leq 10^5 ------ Sample Input 1 ------ 3 5 1 2 2 3 3 5 4 4 4 2 2 6 5 9 9 3 3 3 ------ Sample Output 1 ------ 2 2 4 4 4 3 3 3 ------ Explanation 1 ------ Test case 1: The frequency groups are {1:1}, {2:2}, {3:2}. Both 2 and 3 have the highest frequency of 2, but the sum of group {2 2} is 4, which is smaller than the sum of group {3 3}, which is 6. Hence the output is 2 2. Test case 2: The frequency groups are {4:3}, {2:2}. The group {4 4 4} has the highest frequency of 3. Hence, the output is 4 4 4. Test case 3: The frequency groups are {5:1}, {9:2}, {3:3}. The group {3 3 3} has the highest frequency of 3. Hence, the output is 3 3 3.","solution":"def highest_frequency_group(test_cases): results = [] for test in test_cases: N, numbers = test from collections import Counter freq = Counter(numbers) max_freq = max(freq.values()) groups = [key for key, value in freq.items() if value == max_freq] smallest_sum_group = min(groups) highest_freq_group = [smallest_sum_group] * max_freq results.append(\\" \\".join(map(str, sorted(highest_freq_group)))) return results"},{"question":"Given an array of n positive integers, we need to split the array into two non-empty contiguous subarrays such that the absolute difference between their sums is minimized. -----Input----- The first line contains a single integer n (2 ≤ n ≤ 100) — the number of elements in the array. The second line contains n positive integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000) — the elements of the array. The numbers in the lines are separated by single spaces. -----Output----- Print a single integer — the minimum absolute difference between the sums of the two subarrays. -----Examples----- Input 5 1 3 3 2 4 Output 1 Input 4 10 20 30 40 Output 20 Input 3 5 5 5 Output 5 -----Note----- In the first sample, we can split the array into [1, 3, 3] and [2, 4]. The sums are 7 and 6, and their absolute difference is 1 — which is the minimum possible difference. In the second sample, we can split the array into [10, 20] and [30, 40]. The sums are 30 and 70, and their absolute difference is 20 — which is the minimum possible difference. In the third sample, we can split the array into [5, 5] and [5]. The sums are 10 and 5, and their absolute difference is 5 — which is the minimum possible difference.","solution":"def min_abs_difference(n, arr): Splits the array into two non-empty contiguous subarrays to minimize the absolute difference between their sums. Parameters: n (int): The number of elements in the array. arr (list of int): The elements of the array. Returns: int: The minimum absolute difference between the sums of the two subarrays. total_sum = sum(arr) left_sum = 0 min_difference = float(\'inf\') for i in range(n - 1): left_sum += arr[i] right_sum = total_sum - left_sum min_difference = min(min_difference, abs(left_sum - right_sum)) return min_difference"},{"question":"In a remote village, there is a very old library that contains N books arranged on a single shelf. The library operates on a special rule - whenever a borrower picks a book, they must always pick it along with its neighbor either on the left or right side, thus borrowing two books at a time. The librarian has a task of determining all possible pairs of books that can be picked by a borrower. Additionally, each book has a unique identifier from 1 to N and there is no specific order to the books. You need to write a program to help the librarian list all possible pairs of books that can be borrowed at a time. # Input - An integer N (2 ≤ N ≤ 100) representing the total number of books on the shelf. # Output - Print each possible pair of identifiers of neighboring books in increasing order of the first identifier and for a given first identifier, in increasing order of the second identifier. Each pair of book identifiers should be separated by a single space. # Example **Input** ``` 5 ``` **Output** ``` 1 2 2 3 3 4 4 5 ``` Note: If there are less than two books in the library (N < 2), the library rule does not apply and no pairs can be borrowed, hence no output should be generated for such cases.","solution":"def list_book_pairs(N): Returns a list of tuples representing all possible pairs of neighboring books that can be picked from a shelf with N books. :param N: Total number of books :type N: int :return: List of tuples with neighboring book pairs :rtype: list of tuples if N < 2: return [] pairs = [] for i in range(1, N): pairs.append((i, i + 1)) return pairs"},{"question":"Write a function `is_pangram` that checks if a given sentence is a pangram. A pangram is a sentence that contains every single letter of the alphabet at least once. For example, the sentence \\"The quick brown fox jumps over the lazy dog\\" is a pangram because it uses every letter of the alphabet at least once. **Example:** ``` is_pangram(\\"The quick brown fox jumps over the lazy dog\\") -> True is_pangram(\\"Hello World\\") -> False is_pangram(\\"Sphinx of black quartz, judge my vow\\") -> True ``` The parameter of `is_pangram` is a string which may include letters from `a..z` and `A..Z`, as well as spaces, punctuation, and numbers.","solution":"def is_pangram(sentence): Returns True if the sentence is a pangram, otherwise False. A pangram is a sentence that contains every single letter of the alphabet at least once. alphabet = set(\\"abcdefghijklmnopqrstuvwxyz\\") sentence_letters = set(sentence.lower()) return alphabet.issubset(sentence_letters)"},{"question":"Emma has a list of numbers and she wants to know the frequency of each number in her list. She also wants to sort these numbers in ascending order based on their frequency. If two numbers have the same frequency, the smaller number should come first. Your task is to help Emma by writing a program that prints the numbers in the order specified. ------ Input Format ------ - The first line of input contains an integer N -- the number of elements in the list. - The second line of input contains N space-separated integers, representing the elements of the list. ------ Output Format ------ - Print the sorted list of numbers based on their frequency. If multiple numbers have the same frequency, print the smaller number first. ------ Constraints ------ 1 ≤ N ≤ 1000 1 ≤ A_i ≤ 1000 ------ Sample Input 1 ------ 6 4 5 6 5 4 3 ------ Sample Output 1 ------ 3 6 4 4 5 5 ------ Explanation 1 ------ In this case, the frequencies are as follows: - Frequency of 3 is 1 - Frequency of 6 is 1 - Frequency of 4 is 2 - Frequency of 5 is 2 Since 3 and 6 have the same frequency of 1 and 3 < 6, 3 comes first. Similarly, 4 and 5 have the same frequency of 2 and 4 < 5, so 4 comes before 5 in the output.","solution":"def sort_by_frequency(nums): Sorts the given list of numbers based on their frequency in ascending order. If two numbers have the same frequency, the smaller number comes first. # Dictionary to store the frequency of each number frequency_dict = {} for num in nums: if num in frequency_dict: frequency_dict[num] += 1 else: frequency_dict[num] = 1 # Sort the numbers primarily by their frequency and secondarily by their value sorted_nums = sorted(nums, key=lambda x: (frequency_dict[x], x)) return sorted_nums # Example usage # N = 6 # nums = [4, 5, 6, 5, 4, 3] # print(sort_by_frequency(nums)) # Output: [3, 6, 4, 4, 5, 5]"},{"question":"You are given a list of integers. Your task is to find the maximum sum of non-adjacent elements in the list. You are not allowed to pick two consecutive elements. If the list is empty, return 0. Example 1: Input: nums = [3, 2, 7, 10] Output: 13 Explanation: The maximum sum is achieved by picking the elements 3 and 10. Example 2: Input: nums = [3, 2, 5, 10, 7] Output: 15 Explanation: The maximum sum is achieved by picking the elements 3, 5, and 7. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function maxSumNonAdjacent() that takes a list of integers and returns the maximum sum of non-adjacent elements. The driver code takes care of the printing. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 0 ≤ |nums| ≤ 10^5 0 ≤ nums[i] ≤ 10^4","solution":"def maxSumNonAdjacent(nums): Returns the maximum sum of non-adjacent elements in the list. if not nums: # If the list is empty return 0 incl = 0 # Sum including the previous element excl = 0 # Sum excluding the previous element for num in nums: new_excl = max(incl, excl) # max sum excluding the current element incl = excl + num # max sum including the current element excl = new_excl # Update excl to the max sum without the current element return max(incl, excl) # Return the maximum of incl and excl"},{"question":"You are given an array of integers `nums` and an integer `k`. An integer `x` in `nums` is called a \\"k-dominator\\" if there are at most `k` elements in `nums` greater than `x`. Write a function that returns the list of all k-dominators in increasing order. Example 1: Input: nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3], k = 2 Output: [5, 6, 9] Explanation: The k-dominators are 5, 6, and 9 because they are greater than at most 2 elements in the given array. Example 2: Input: nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], k = 0 Output: [100] Explanation: The only k-dominator is 100 because it is greater than 0 elements in the given array. Example 3: Input: nums = [1, 2, 3, 4, 5], k = 4 Output: [1, 2, 3, 4, 5] Explanation: All elements in the array are k-dominators because each element is greater than at most 4 elements in the array. Note: 1. 1 <= nums.length <= 1000 2. -10^6 <= nums[i] <= 10^6 3. 0 <= k < nums.length","solution":"def find_k_dominators(nums, k): Returns a sorted list of k-dominators from the input list nums. Args: nums: List[int] - list of integers. k: int - integer specifying the maximum number of elements that can be greater than the dominator. Returns: List[int] - sorted list of k-dominators. nums.sort() n = len(nums) result = [nums[i] for i in range(n - k - 1, n)] return result"},{"question":"You are given an array A of N integers. An integer x is said to be a \\"special integer\\" if there exists a contiguous non-empty subarray of A such that x equals the sum of that subarray. Your task is to count the number of special integers in array A. ------ Input Format ------ - The first line contains a single integer T - the number of test cases. - Each test case consists of two lines: - The first line contains an integer N - the size of the array. - The second line contains N integers A_1, A_2, ..., A_N representing the elements of the array. ------ Output Format ------ For each test case, output the count of special integers in the given array. ------ Constraints ------ 1 le T le 100 1 le N le 10^5 -10^6 le A_i le 10^6 - The sum of N over all test cases does not exceed 10^6 ------ Sample Input 1 ------ 2 4 1 2 3 4 5 1 2 1 3 1 ------ Sample Output 1 ------ 4 5 ------ Explanation 1 ------ Test case-1: Every element 1, 2, 3, and 4 can be alone as a subarray, thus making all elements special integers. Test case-2: Each individual element 1, 2, 1, 3, 1 is a special integer already. Additionally, sum of subarray [1, 2], and [2, 1] are also 3, which appear as elements in the array.","solution":"def count_special_integers(T, test_cases): results = [] for case in test_cases: N, A = case special_integers = set() # Compute the sum of all possible subarrays and check if they appear in the array for i in range(N): current_sum = 0 for j in range(i, N): current_sum += A[j] special_integers.add(current_sum) special_count = sum(1 for x in A if x in special_integers) results.append(special_count) return results"},{"question":"Nina is fond of even-length palindromes. A string is called a palindrome if it reads the same backward as forward. She particularly likes even-length palindromes because they have a center point which she finds symmetrical and aesthetically pleasing. Given any string, Nina wants to find the length of the longest even-length palindrome that can be formed by rearranging its characters. Help her by writing a program that calculates the length of this palindrome. Input: The first line contains an integer T, denoting the number of test cases. Each test case consists of only one line with a string S which contains lowercase alphabets. Output: For each test case, output the length of the longest even-length palindrome that can be formed by rearranging the characters of the given string. Print the answer for each test case in a new line. Constraints: 1 ≤ T ≤ 20 1 ≤ Length of S ≤ 200 S contains only lowercase alphabets. If the input does not meet the above constraints, print \\"Invalid Input\\". Example Input: 3 aabbcc abcde aaaabbbb Example Output: 6 0 8","solution":"from collections import Counter def longest_even_palindrome(T, cases): if not (1 <= T <= 20): return [\\"Invalid Input\\"] result = [] for S in cases: if not (1 <= len(S) <= 200) or not S.islower(): result.append(\\"Invalid Input\\") continue char_count = Counter(S) length = 0 for count in char_count.values(): length += (count // 2) * 2 result.append(str(length)) return result"},{"question":"Given a string s of length n, return the longest substring that appears at least twice in the given string. If there are multiple substrings with the same length, return the substring that appears first. Input The input is a single line containing a string s (1 ≤ |s| ≤ 105) consisting of lowercase Latin letters. Output Output the longest substring that appears at least twice in the given string. If no such substring exists, output an empty string. Examples Input banana Output ana Input abcd Output","solution":"def longest_repeated_substring(s): Returns the longest substring that appears at least twice in the given string. If no such substring exists, returns an empty string. def is_repeated(sub): count = 0 start = 0 while True: start = s.find(sub, start) + 1 if start > 0: count += 1 else: break if count > 1: return True return False n = len(s) for length in range(n-1, 0, -1): for i in range(n - length): sub = s[i:i + length] if is_repeated(sub): return sub return \\"\\""},{"question":"Given an array of integers nums, a \\"run\\" is defined as a consecutive sequence of the same number in the array. Each run has a length, which is the number of occurrences of that number in sequence. Your task is to find the maximum length of any run in the given array. Input The input starts with a line indicating the number of test cases T (1 ≤ T ≤ 10). After that, T test cases follow, each of which consists of two lines: - The first line contains an integer n (1 ≤ n ≤ 100 000), the number of elements in the array. - The second line contains n integers a_1, a_2, ..., a_n separated by spaces, representing the elements of the array (1 ≤ a_i ≤ 100). Output Output T lines, each containing one number – the maximum length of any run in the corresponding array. Example Input 2 6 1 1 2 2 2 3 5 4 4 4 4 4 Output 3 5 Note In the first test case, the longest run is the three consecutive 2s. In the second test case, the entire array is a single run of five 4s.","solution":"def max_run_lengths(test_cases): results = [] for case in test_cases: n, array = case max_run = 1 current_run = 1 for i in range(1, n): if array[i] == array[i - 1]: current_run += 1 else: max_run = max(max_run, current_run) current_run = 1 max_run = max(max_run, current_run) results.append(max_run) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) test_cases = [] idx = 1 for _ in range(T): n = int(lines[idx]) array = list(map(int, lines[idx + 1].strip().split())) test_cases.append((n, array)) idx += 2 return test_cases"},{"question":"Write a program to check if a pair of parantheses is balanced or not. The parentheses considered are \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. Given a string containing such characters, check if the parentheses are balanced. Balanced parentheses means for every opening parenthesis, there is a corresponding closing parenthesis of the same type, and they are properly nested. For example: - `([]{})` is balanced as each type of parenthesis matches and is correctly nested. - `([)]` is not balanced because the order of parentheses is incorrect. ------ Input Format ------ - The first line contains an integer T, the number of test cases. - Each of the next T lines contains a string of parentheses. ------ Output Format ------ For each test case, print \\"YES\\" if the parentheses are balanced, otherwise print \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 10^4 1 ≤ |S| ≤ 10^3 where |S| is the length of the string. ------ Sample Input ------ 3 ([]{}) ([)] ((())) ------ Sample Output ------ YES NO YES ------ Explanation ------ - In the first test case, the string `([]{})` has all types of parentheses listed and they are all properly balanced. - In the second test case, `([)]` is not balanced because the closing braces are mismatched. - In the third test case, `((()))` is balanced with all opening parentheses having corresponding closing ones, properly nested.","solution":"def is_balanced(expr): Checks if the given string of parentheses is balanced. :param expr: String containing \'(\', \')\', \'{\', \'}\', \'[\' and \']\' :return: \\"YES\\" if the parentheses are balanced, otherwise \\"NO\\" stack = [] matching_parentheses = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in expr: if char in matching_parentheses.values(): stack.append(char) elif char in matching_parentheses.keys(): if stack == [] or stack.pop() != matching_parentheses[char]: return \\"NO\\" return \\"YES\\" if stack == [] else \\"NO\\" def check_parentheses(T, expressions): results = [] for expr in expressions: results.append(is_balanced(expr)) return results"},{"question":"You are given a list of integers. You need to partition the list into as many contiguous sublists as possible, such that each sublist contains only distinct integers. Write a program to determine the maximum number of such sublists that can be created. Constraints * 1 ≦ Length of list ≦ 10^5 * -10^9 ≦ Each integer in the list ≦ 10^9 * All input values are integers. Input The input is given from Standard Input in the following format: n a_1 a_2 a_3 ... a_n Where: - n is the length of the list. - a_i is the i-th integer in the list. Output Print the maximum number of contiguous sublists that can be created with distinct integers. Examples Input 5 1 2 3 1 2 Output 3 Input 7 4 4 4 4 4 4 4 Output 7","solution":"def max_sublists_with_distinct_integers(n, arr): Returns the maximum number of contiguous sublists such that each sublist contains only distinct integers. last_seen = {} count = 0 start_idx = 0 for i in range(n): if arr[i] in last_seen and last_seen[arr[i]] >= start_idx: start_idx = last_seen[arr[i]] + 1 count += 1 last_seen[arr[i]] = i return count + 1"},{"question":"In a busy town, people visit a popular convenience store to buy a range of items. The store keeps a log of items purchased each day, and the manager wants to analyze the data to understand customer behavior. However, the manager specifically wants to know the number of distinct items sold across all days while taking into account that some items might appear as variations (case differences) or with extra spaces. The task is to help the manager by writing a function that processes the list of purchased items, normalizes the item names (i.e., makes them lowercase and trims spaces), and then counts the number of distinct items. -----Input----- The input consists of: - A single integer n (1 ≤ n ≤ 100000), representing the number of items purchased. - The next n lines, each containing the name of an item (a string of 1 to 100 characters). -----Output----- Print a single integer representing the number of distinct items sold. -----Examples----- Input 5 Apple apple Orange Banana BANANA Output 3 Input 4 Milk milk MILK Milk Output 1 Input 3 bread BREAD bread Output 1 -----Note----- In the first sample, there are five items recorded: \\"Apple\\", \\" apple\\", \\"Orange\\", \\"Banana\\", \\" BANANA \\". After normalizing the names, we get \\"apple\\", \\"apple\\", \\"orange\\", \\"banana\\", \\"banana\\", which results in three distinct items: \\"apple\\", \\"orange\\", \\"banana\\". In the second sample, all four names normalize to \\"milk\\", thus there is only one distinct item: \\"milk\\". In the third sample, all three names normalize to \\"bread\\", resulting in one distinct item: \\"bread\\".","solution":"def count_distinct_items(n, items): Returns the number of distinct items after normalizing case and trimming spaces. :param n: Integer, the number of items. :param items: List of strings, names of the items. :return: Integer, the number of distinct normalized items. normalized_items = set() for item in items: normalized_item = item.strip().lower() normalized_items.add(normalized_item) return len(normalized_items)"},{"question":"# Library Management System You are tasked with designing a simple library management system to keep track of borrowed books. Write a function that manages the borrowing and returning of books based on the requests and maintains an updated list of available books. The function takes three parameters: books, action, and book_title - The parameter \'books\' will be a list of dictionaries, each representing a book with two keys: \'title\' (string) and \'status\' (either \'available\' or \'borrowed\'). - The parameter \'action\' will be a string either \'borrow\' or \'return\' indicating the requested action. - The parameter \'book_title\' will be a string representing the title of the book involved in the action. The function should: - Allow a book to be borrowed only if it is currently available, changing its status to \'borrowed\'. - Allow a book to be returned only if it is currently borrowed, changing its status to \'available\'. - If a borrow or return request cannot be fulfilled (e.g., the book is not available for borrowing or already available for return), the function should return a message indicating the issue. - Return the updated list of books after processing the request. Example input and output ~~~~ input ([{\'title\': \'1984\', \'status\': \'available\'}, {\'title\': \'Brave New World\', \'status\': \'borrowed\'}], \'borrow\', \'1984\') output [{\'title\': \'1984\', \'status\': \'borrowed\'}, {\'title\': \'Brave New World\', \'status\': \'borrowed\'}] input ([{\'title\': \'1984\', \'status\': \'available\'}, {\'title\': \'Brave New World\', \'status\': \'borrowed\'}], \'return\', \'Brave New World\') output [{\'title\': \'1984\', \'status\': \'available\'}, {\'title\': \'Brave New World\', \'status\': \'available\'}] input ([{\'title\': \'1984\', \'status\': \'available\'}, {\'title\': \'Brave New World\', \'status\': \'borrowed\'}], \'borrow\', \'Brave New World\') output \'The book \\"Brave New World\\" is already borrowed.\' input ([{\'title\': \'1984\', \'status\': \'borrowed\'}, {\'title\': \'Brave New World\', \'status\': \'borrowed\'}], \'return\', \'1984\') output [{\'title\': \'1984\', \'status\': \'available\'}, {\'title\': \'Brave New World\', \'status\': \'borrowed\'}] ~~~~","solution":"def library_management(books, action, book_title): Manages the borrowing and return of books in a library. Parameters: books (list): A list of dictionaries each with \'title\' and \'status\' keys. action (str): The action to be performed, either \'borrow\' or \'return\'. book_title (str): The title of the book on which action is to be performed. Returns: list, str: The updated list of books after performing the action, or a message if the action cannot be fulfilled. for book in books: if book[\'title\'] == book_title: if action == \'borrow\': if book[\'status\'] == \'available\': book[\'status\'] = \'borrowed\' return books else: return f\'The book \\"{book_title}\\" is already borrowed.\' elif action == \'return\': if book[\'status\'] == \'borrowed\': book[\'status\'] = \'available\' return books else: return f\'The book \\"{book_title}\\" is already available.\' return f\'The book \\"{book_title}\\" does not exist in the library.\'"},{"question":"You are given a string containing a sequence of characters, which could be either an alphabetical character (a-z, A-Z) or a digit (0-9). Your task is to compress the string using the following rules: - Consecutive identical characters or digits are replaced by one instance of the character or digit followed by the count of its occurrences. If compressing the string does not reduce its length, return the original string. -----Constraints----- - The input string will be non-empty and its length will not exceed 100 characters. - The string only contains alphanumeric characters (a-z, A-Z, 0-9). -----Input----- Input is given from Standard Input as a single line: s -----Output----- Print the compressed version of the string or the original string if compression does not reduce its length. -----Sample Input----- aaabbbccc -----Sample Output----- a3b3c3 The compressed version of the string \\"aaabbbccc\\" is \\"a3b3c3\\". -----Sample Input----- abcdef -----Sample Output----- abcdef As compressing the string \\"abcdef\\" would not reduce its length, the original string is returned.","solution":"def compress_string(s): if not s: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1]) compressed.append(str(count)) count = 1 compressed.append(s[-1]) compressed.append(str(count)) compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(s) else s"},{"question":"Given an array of integers `arr` of size `n`, find the maximum sum of any contiguous subarray of size `k`. - The main purpose of this function is to analyze the performance of the sliding window technique for calculating the maximum sum. - The sliding window technique is used to optimize the brute-force approach where you calculate the sum of every possible subarray of size `k`. # Constraints: - The value of `n` (the size of the array) will be at least `k` and `k` will be at least 1. - The elements in `arr` will be integers (both positive and negative). # Example: For `arr = [2, 1, 5, 1, 3, 2]`, `k = 3`: 1. The sum of the first subarray of size 3 is `2 + 1 + 5 = 8`. 2. The sum of the second subarray of size 3 is `1 + 5 + 1 = 7`. 3. The sum of the third subarray of size 3 is `5 + 1 + 3 = 9`. 4. The sum of the fourth subarray of size 3 is `1 + 3 + 2 = 6`. The maximum sum of a subarray of size 3 is `9`. Hence, the function `max_sum_subarray(arr, k)` to find and return the maximum sum of any contiguous subarray of size `k` should return `9` for the given example. # Function Signature: `def max_sum_subarray(arr: List[int], k: int) -> int:` # Input: - `arr`: List[int] - a list of integers, 1 <= len(arr) <= 10^5 and -10^4 <= arr[i] <= 10^4 - `k`: int - size of the subarray, 1 <= k <= len(arr) # Output: - int - the maximum sum of any contiguous subarray of size `k` # Example: - `max_sum_subarray([2, 1, 5, 1, 3, 2], 3)` should return `9` - `max_sum_subarray([4, 2, -1, 5, 3, 8], 2)` should return `11` - `max_sum_subarray([-1, -2, -3, -4, -5], 2)` should return `-3`","solution":"from typing import List def max_sum_subarray(arr: List[int], k: int) -> int: Returns the maximum sum of any contiguous subarray of size k. Parameters: arr (List[int]): The input list of integers. k (int): The size of the subarray. Returns: int: The maximum sum of any contiguous subarray of size k. # Initialize the maximum sum as the sum of the first \'k\' elements max_sum = current_sum = sum(arr[:k]) # Use sliding window to find maximum sum of subarray of size k for i in range(k, len(arr)): # Slide the window: remove the element going out and add the new element coming in current_sum += arr[i] - arr[i - k] # Update max_sum if the current window sum is greater if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"You are given a string s of length n consisting of lowercase English letters. You want to make the string a palindrome by adding the minimum number of characters to it. You need to determine the length of the shortest palindrome that can be obtained. To achieve this, you can insert characters only at the beginning or end of the string. -----Input----- The first line contains a single integer t (1 le t le 1000) — the number of testcases. Then follows the description of t testcases. The first line of each testcase contains the integer n (1 le n le 10^5) — the length of the string s. The second line of each testcase contains the string s of length n. The sum of n over all testcases does not exceed 10^5. -----Output----- For each testcase, print a single integer — the length of the shortest palindrome that can be obtained by adding the minimum number of characters. -----Examples------ Input 2 3 abc 4 aabb Output 5 6 -----Note------ In the first testcase, adding \'b\' at the start and \'a\' at the end transforms \\"abc\\" into \\"bacab\\", which is the shortest palindrome possible. In the second testcase, adding \'b\' and \'a\' at the start, or \'b\' and \'a\' at the end transforms \\"aabb\\" into \\"bbaabb\\" or \\"aabbaa\\", which are the shortest palindromes possible.","solution":"def shortest_palindrome_length(s): Returns the length of the shortest palindrome that can be obtained by adding the minimum number of characters at the beginning or end of the string. n = len(s) # Check if the string is already a palindrome if s == s[::-1]: return n rev_s = s[::-1] # Find the longest prefix which is also suffix for i in range(n): if s[i:] == rev_s[:n-i]: return 2 * n - (n - i) # All characters are different, we need to attach the whole reverse of the string return 2 * n def solve_palindrome_case(n, s): return shortest_palindrome_length(s) def solve(t, testcases): results = [] for i in range(t): n, s = testcases[i] results.append(solve_palindrome_case(n, s)) return results"},{"question":"You are in charge of developing software to balance chemical reactions. A chemical reaction consists of a set of reactants and a set of products. Each reactant and product is represented by a chemical formula, which consists of elements and their respective counts. The goal is to determine if the given reaction is balanced or not. A chemical formula is represented as a string in the format: - \\"H2O\\" signifies two hydrogen atoms and one oxygen atom. - \\"C6H12O6\\" signifies six carbon atoms, twelve hydrogen atoms, and six oxygen atoms. You are provided with each element\'s atomic symbol consisting of one or two letters (e.g., H for hydrogen, O for oxygen, Na for sodium, etc.). A reaction is represented by a string in the form \\"reactants -> products\\", where reactants and products are comma-separated lists of chemical formulas. Your task is to write a function that determines whether the given chemical reaction is balanced. The reaction is balanced if the total count of each element in the reactants equals that in the products. Input: - An integer T, the number of test cases. - For each test case, a string representing the chemical reaction. Output: - For each test case, print \\"Balanced\\" if the reaction is balanced, and \\"Unbalanced\\" otherwise. Constraints: - Each test case string\'s length will be between 1 and 100 characters. - Each element\'s atomic symbol will consist of one or two uppercase letters. - Each element count will be a positive integer (up to 99). - It is guaranteed that no input will have invalid chemical formulas. - T will be between 1 and 1000. SAMPLE INPUT 3 H2 + O2 -> H2O C6H12O6 + O2 -> CO2 + H2O CH4 + 2O2 -> CO2 + 2H2O SAMPLE OUTPUT Unbalanced Unbalanced Balanced Explanation: Test Case #1: Reactants: H2, O2 Products: H2O Here the reactants have 2 hydrogen atoms and 2 oxygen atoms, but the product has only 1 oxygen atom. Thus, it\'s \\"Unbalanced\\". Test Case #2: Reactants: C6H12O6, O2 Products: CO2, H2O Balancing the counts here shows the counts do not match. Thus, it\'s \\"Unbalanced\\". Test Case #3: Reactants: CH4, 2O2 Products: CO2, 2H2O The counts match perfectly. Thus, it\'s \\"Balanced\\".","solution":"import re from collections import defaultdict def parse_formula(formula): element_counts = defaultdict(int) elements = re.findall(r\'([A-Z][a-z]?)(d*)\', formula) for element, count in elements: count = int(count) if count else 1 element_counts[element] += count return element_counts def parse_side(side): total_counts = defaultdict(int) single_formulas = side.split(\'+\') for formula in single_formulas: # Remove leading/trailing whitespace formula = formula.strip() # Parse coefficient if exists coeff_match = re.match(r\'(d+)([A-Z])\', formula) if coeff_match: coeff = int(coeff_match.group(1)) actual_formula = formula[len(str(coeff)):] parsed = parse_formula(actual_formula) for element, count in parsed.items(): total_counts[element] += coeff * count else: parsed = parse_formula(formula) for element, count in parsed.items(): total_counts[element] += count return total_counts def is_balanced_reaction(reaction): reactants, products = reaction.split(\'->\') reactants = parse_side(reactants) products = parse_side(products) return reactants == products def balance_reactions(T, reactions): results = [] for reaction in reactions: if is_balanced_reaction(reaction): results.append(\\"Balanced\\") else: results.append(\\"Unbalanced\\") return results"},{"question":"Alice has recently learned about trees in her data structure class. She is particularly fascinated by rooted trees and their properties. Upon discussing with her professor, she stumbled upon an interesting problem regarding the depths of various nodes in a rooted tree. A rooted tree is a tree where one of the nodes is designated the root. The depth of a node in the tree is the number of edges from the node to the root. Now, Alice wants to calculate the depth of multiple nodes in a rooted tree. She comes up with the following system: - The tree consists of `N` nodes, numbered from `1` to `N`. - Node `1` is always the root of the tree. - Each query asks for the depth of a specific node in the tree. Write a function that determines the depth of each node for multiple queries. # Input: - The first line contains an integer `N` (1 ≤ N ≤ 10^5) — the number of nodes in the tree. - The next `N-1` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ N, u ≠ v), indicating that there is an edge between nodes `u` and `v`. - The next line contains an integer `Q` (1 ≤ Q ≤ 10^5) — the number of queries. - Each of the next `Q` lines contains a single integer `x` (1 ≤ x ≤ N) — the node number for which the depth is to be determined. # Output: - Output `Q` lines, each containing the depth of the node `x` from the root node `1`. # Example: Input: ``` 7 1 2 1 3 2 4 2 5 3 6 3 7 3 4 5 6 ``` Output: ``` 2 2 2 ``` *All nodes in the tree are guaranteed to form a single connected component.*","solution":"def calculate_depths(N, edges, queries): from collections import deque, defaultdict # Graph construction tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Depth calculation depth = [-1] * (N + 1) depth[1] = 0 queue = deque([1]) while queue: node = queue.popleft() current_depth = depth[node] for neighbor in tree[node]: if depth[neighbor] == -1: # Unvisited depth[neighbor] = current_depth + 1 queue.append(neighbor) return [depth[q] for q in queries]"},{"question":"You are given an array of integers representing daily temperatures. Your task is to compute an array that, for each day, gives you the number of days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead. Input The first line contains a single integer n (1 ≤ n ≤ 100 000) — the number of days. The second line contains n integers representing the daily temperatures in sequence. Output Return a list of length n, where for each day in the input, tells you how many days you would have to wait until a warmer temperature. If there is no such future day, insert 0 in that position instead. Examples Input 8 73 74 75 71 69 72 76 73 Output 1 1 4 2 1 1 0 0 Input 5 30 40 50 60 70 Output 1 1 1 1 0 Input 3 75 72 70 Output 0 0 0 Note In the first sample, for the first day (temperature 73), you would have to wait 1 day until the temperature is warmer (74). For the second day (74), you would also have to wait 1 day (75). For the third day (75), you would need to wait 4 days until 76. And so on. For the last day, there is no future day with a warmer temperature, so we insert 0.","solution":"def daily_temperatures(n, temperatures): Given a list of daily temperatures, returns a list of the number of days you would have to wait until a warmer temperature. Parameters: n (int): The number of days. temperatures (list of int): A list of integers representing the daily temperatures. Returns: list of int: A list where each element denotes the number of days until a warmer temperature is encountered. answer = [0] * n stack = [] for i in range(n): while stack and temperatures[i] > temperatures[stack[-1]]: idx = stack.pop() answer[idx] = i - idx stack.append(i) return answer"},{"question":"Lina is preparing for a specialized marathon race which involves collecting energy boosts to maximize her running distance. On the race track, there are n checkpoints, each offering a certain amount of energy boost. However, Lina can only collect energy boosts if she skips the immediate next checkpoint after collecting from the current one. Given the number of energy boosts at each checkpoint, determine the maximum total energy boost Lina can collect by following the rules. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of two lines: The first line contains a single integer N denoting the number of checkpoints. The second line contains N space-separated integers, where the i-th integer represents the energy boost available at the i-th checkpoint. Output For each test case, output a single line containing the maximum energy boost Lina can collect. Constraints 1 ≤ T ≤ 10 0 ≤ N ≤ 100000 0 ≤ energy boost ≤ 1000000000 Example Input: 2 4 3 2 5 10 3 1 3 2 Output: 13 3 Explanation Example Case 1: Lina collects energy from the 1st and the 4th checkpoints to receive a total of (3+10) = 13 energy boost. Example Case 2: Lina collects energy from the 2nd checkpoint to receive a total of 3 energy boost.","solution":"def max_energy_boost(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] boosts = test_cases[i][1] if N == 0: results.append(0) continue if N == 1: results.append(boosts[0]) continue # DP array to store the maximum energy boost up to the i-th checkpoint dp = [0] * N dp[0] = boosts[0] if N > 1: dp[1] = max(boosts[0], boosts[1]) for j in range(2, N): dp[j] = max(dp[j-1], dp[j-2] + boosts[j]) results.append(dp[-1]) return results"},{"question":"A sequence of n integers is given. You need to determine if there exists a non-decreasing subsequence of length at least 3. The subsequence does not need to be contiguous. Example 1: Input: nums = [1, 2, 3, 4, 5] Output: true Explanation: The sequence [1, 2, 3] is a non-decreasing subsequence of length 3. Example 2: Input: nums = [5, 4, 3, 2, 1] Output: false Explanation: There is no non-decreasing subsequence of length 3. Example 3: Input: nums = [2, 4, 3, 1, 5] Output: true Explanation: The sequence [2, 3, 5] is a non-decreasing subsequence of length 3. Note: - 1 <= n <= 1000 - -10^9 <= nums[i] <= 10^9","solution":"def has_non_decreasing_subsequence(nums): Returns True if there exists a non-decreasing subsequence of length at least 3, otherwise False. n = len(nums) if n < 3: return False first_min = float(\'inf\') second_min = float(\'inf\') for num in nums: if num <= first_min: first_min = num elif num <= second_min: second_min = num else: return True return False"},{"question":"In a futuristic city, you are tasked with managing the flow of autonomous vehicles through an intersection. The intersection can be represented as a grid of size n by n. Vehicles enter the intersection from the left side (column 1) and the right side (column n) heading towards the opposite side. Similarly, vehicles enter the intersection from the top (row 1) and bottom (row n) heading towards the opposite side. Each vehicle can only move straight through its designated path unless there\'s a collision course. Vehicles can collide if both are moving through the same grid cell outside their starting and ending points. To prevent collisions, any vehicle can remain in its current position for one unit of time (effectively waiting), but it cannot change direction. Given the initial positions and destinations of each vehicle, determine the minimum amount of waiting time required to ensure that no collisions occur. Input: - An integer n (4 ≤ n ≤ 10^5), the size of the grid (n x n). - An integer m (1 ≤ m ≤ 10^5), the number of vehicles. - m lines each containing the starting position and destination for each vehicle. Each line has four integers x1, y1, x2, y2 (1 ≤ x1, y1, x2, y2 ≤ n) representing the initial position (x1, y1) and the destination position (x2, y2). All vehicles follow unique routes from either the left to right sides or top to bottom sides of the grid. Output: - A single integer representing the minimum total waiting time required for all vehicles to move through the intersection without collisions. Example: Input: 4 2 1 1 1 4 2 1 2 4 Output: 0 Input: 5 3 1 1 1 5 2 1 2 5 1 5 5 5 Output: 2","solution":"def minimum_waiting_time(n, m, vehicles): Calculate the minimum total waiting time for all vehicles to avoid collisions. # The main strategy is to ensure any vehicle on a collision course is delayed to avoid overlap. # We\'ll simulate the traffic in time-based increments. from collections import defaultdict # Create a map of all paths paths = defaultdict(list) # Fill the paths map for x1, y1, x2, y2 in vehicles: if x1 == x2: # Horizontal vehicle (left to right) for y in range(y1, y2 + 1): paths[(x1, y)].append((x1, y1, x2, y2)) elif y1 == y2: # Vertical vehicle (top to bottom) for x in range(x1, x2 + 1): paths[(x, y1)].append((x1, y1, x2, y2)) # If paths have multiple vehicles, we need to compute waiting times total_waiting_time = 0 for path, vehicles_on_path in paths.items(): if len(vehicles_on_path) > 1: # Calculate required waiting time total_waiting_time += (len(vehicles_on_path) - 1) return total_waiting_time"},{"question":"You have been hired to design a simple text editor. One of the features of this text editor is to count the frequency of each word in a given document and output the word counts in descending order. Specifically, if two words have the same frequency, they should be sorted in ascending lexicographical order. # Your task Given a string `document` containing words separated by spaces and punctuation, return a list of tuples where each tuple contains a word and its frequency in descending order. **The words should be case insensitive and the punctuation marks should be ignored.** # Considerations: - Punctuation marks include: `.,:;!?()[]{}-\\"`. - Assume that the input text will contain at least one word. - The function should be case insensitive. # Examples \\"Hello, world! World is great. Hello again, world.\\" -> [(\\"world\\", 3), (\\"hello\\", 2), (\\"again\\", 1), (\\"great\\", 1), (\\"is\\", 1)] \\"The quick brown fox jumps over the lazy dog. The dog barks.\\" -> [(\\"the\\", 3), (\\"dog\\", 2), (\\"barks\\", 1), (\\"brown\\", 1), (\\"fox\\", 1), (\\"jumps\\", 1), (\\"lazy\\", 1), (\\"over\\", 1), (\\"quick\\", 1)]","solution":"import re from collections import Counter def word_frequency(document): Counts the frequency of each word in a document and returns a sorted list of tuples containing words and their frequencies in descending order, and words with same frequency in ascending lexicographical order. # Remove punctuation and convert to lower case cleaned_document = re.sub(r\'[^ws]\', \'\', document).lower() # Split the document into words words = cleaned_document.split() # Count the frequency of each word word_counts = Counter(words) # Sort the words first by frequency (descending) then lexicographically (ascending) sorted_word_counts = sorted(word_counts.items(), key=lambda item: (-item[1], item[0])) return sorted_word_counts"},{"question":"Mina wants to buy some books for her collection. She has a budget of B dollars and the store she is visiting sells N books each with its own price. Mina wants to buy as many books as possible without exceeding her budget. Determine the maximum number of books Mina can purchase. ------ Input Format ------ - The first line contains a single integer T — the number of test cases. Then the test cases follow. - The first line of each test case contains two integers N and B — the number of books and Mina\'s budget in dollars. - The second line of each test case contains N integers, each denoting the price of a book. ------ Output Format ------ For each test case, output the maximum number of books Mina can purchase. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ price of each book ≤ 1000 1 ≤ B ≤ 10000 ------ Sample Input 1 ------ 2 5 50 15 20 10 30 25 3 30 20 10 40 ------ Sample Output 1 ------ 2 2 ------ Explanation 1 ------ Test Case 1: Mina can buy books that cost 10 and 20 dollars, hence a total of 2 books within her budget of 50 dollars. Test Case 2: Mina can buy books that cost 10 and 20 dollars, hence a total of 2 books within her budget of 30 dollars.","solution":"def max_books(test_cases): results = [] for case in test_cases: N, B = case[0] prices = sorted(case[1]) count = 0 total_cost = 0 for price in prices: if total_cost + price <= B: total_cost += price count += 1 else: break results.append(count) return results def parse_input(input_string): input_lines = input_string.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] index = 1 for _ in range(T): N, B = map(int, input_lines[index].split()) prices = list(map(int, input_lines[index + 1].split())) test_cases.append(((N, B), prices)) index += 2 return test_cases def format_output(results): return \\"n\\".join(map(str, results))"},{"question":"A string S is said to be beautiful if all the characters of S are distinct and the absolute difference between the ASCII values of any two consecutive characters is equal to 1. Your task is to determine whether a given string S is beautiful. If S is beautiful, print \\"YES\\". Otherwise, print \\"NO\\". -----Input----- - The input consists of a single line containing a single string S. -----Output----- - Output a single line with \\"YES\\" if the string is beautiful and \\"NO\\" otherwise. -----Constraints----- - 1 ≤ |S| ≤ 100 - S contains only lowercase English letters (\'a\'-\'z\'). -----Example----- Input: abcdef Output: YES Input: bace Output: NO Input: xyz Output: YES -----Explanation----- Example 1. The string \\"abcdef\\" is beautiful because all characters are distinct and the absolute difference between the ASCII values of all consecutive characters is 1 (ord(\'b\')-ord(\'a\')=1, ord(\'c\')-ord(\'b\')=1, ..., ord(\'f\')-ord(\'e\')=1). Example 2. The string \\"bace\\" is not beautiful because the characters are not consecutive (ord(\'a\')-ord(\'b\')= -1, ord(\'c\')-ord(\'a\')=2). Example 3. The string \\"xyz\\" is beautiful because all characters are distinct and the absolute difference between the ASCII values of all consecutive characters is 1 (ord(\'y\')-ord(\'x\')=1, ord(\'z\')-ord(\'y\')=1).","solution":"def is_beautiful(s): Determines if the given string s is beautiful. A string is beautiful if all its characters are distinct and the absolute difference between the ASCII values of any two consecutive characters is equal to 1. Args: s (str): The input string. Returns: str: \\"YES\\" if the string is beautiful, otherwise \\"NO\\". # Check if all characters are distinct if len(set(s)) != len(s): return \\"NO\\" # Check the absolute difference between ASCII values of consecutive characters for i in range(len(s) - 1): if abs(ord(s[i]) - ord(s[i + 1])) != 1: return \\"NO\\" return \\"YES\\""},{"question":"In this challenge, you are given an array of integers representing daily temperatures. You need to create a method that returns an array such that, for each day in the input, it tells you how many days you would have to wait until a warmer temperature. If there is no future day that provides a warmer temperature, put 0 in the corresponding cell. Examples: ``` Input: [73, 74, 75, 71, 69, 72, 76, 73] Output: [1, 1, 4, 2, 1, 1, 0, 0] ``` ``` Input: [30, 40, 50, 60] Output: [1, 1, 1, 0] ``` ``` Input: [30, 60, 90] Output: [1, 1, 0] ``` Function Signature: ```python def daily_temperatures(temperatures: List[int]) -> List[int]: ``` Your solution should aim for an efficient time complexity, ideally O(n). Note that you can assume that the given array will always have at least one day. No need to handle empty input arrays or null values.","solution":"from typing import List def daily_temperatures(temperatures: List[int]) -> List[int]: Returns a list of integers representing the number of days to wait for a warmer temperature. n = len(temperatures) result = [0] * n stack = [] for i in range(n): while stack and temperatures[i] > temperatures[stack[-1]]: idx = stack.pop() result[idx] = i - idx stack.append(i) return result"},{"question":"Alice loves string manipulation and pattern matching. One day, while solving problems, she stumbled upon an interesting problem and needs your help to solve it. Given a string S, consisting of lowercase English letters, a substring of S is called palindromic if it reads the same forward and backward. Alice is interested in counting how many substrings of S are palindromic. Input A single line of input contains the string S (1 ≤ |S| ≤ 1000). Output Print a single integer, the number of palindromic substrings in S. Examples Input abba Output 6 Input abc Output 3 Input aaa Output 6 Note In the first example, the palindromic substrings are: \\"a\\", \\"b\\", \\"b\\", \\"a\\", \\"bb\\", \\"abba\\". In the second example, the palindromic substrings are: \\"a\\", \\"b\\", \\"c\\". In the third example, the palindromic substrings are: \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", \\"aaa\\".","solution":"def count_palindromic_substrings(S): Returns the number of palindromic substrings in the given string S. n = len(S) count = 0 # A 2D array to store whether substring S[i:j+1] is palindrome dp = [[False] * n for _ in range(n)] for length in range(1, n+1): # length of the substring for start in range(n-length+1): # start index of the substring end = start + length - 1 # end index of the substring if length == 1: dp[start][end] = True elif length == 2: dp[start][end] = (S[start] == S[end]) else: dp[start][end] = (S[start] == S[end]) and dp[start+1][end-1] if dp[start][end]: count += 1 return count"},{"question":"Bob is tasked with managing a set of servers for a high-traffic website. Each server has two critical properties: the maximum number of requests it can handle per second and the average response time (in milliseconds) under maximum load. Bob wants to optimize the server usage such that the website can handle the maximum number of requests per second while maintaining an acceptable average response time. Bob has decided to distribute the traffic across multiple servers. However, he needs to ensure that, even under maximum load, the average response time across the chosen servers does not exceed a specific threshold. Given the details of each server and the threshold average response time, determine the maximum number of requests per second that the system can handle. -----Input----- The first line contains two integers N and T, 1 le N le 100, 1 le T le 1000. Each of the next N lines contains two integers: - R_i, 1 le R_i le 1000, the maximum number of requests per second the i-th server can handle; - A_i, 1 le A_i le 1000, the average response time (in milliseconds) under maximum load of the i-th server. -----Output----- Output the maximum number of requests per second that can be handled by the system without exceeding the average response time threshold T. -----Examples----- Sample Input: 3 300 500 200 300 100 400 500 Sample Output: 800 Explanation: To maintain an average response time doing not exceed 300 ms, Bob can use the first two servers. The combined requests per second that these servers can handle is 500+300 = 800. Using all three servers would exceed the response time threshold as the average would then exceed 300 ms.","solution":"def max_requests(N, T, servers): Determines the maximum number of requests per second that can be handled by the servers without exceeding the average response time threshold. Parameters: - N (int): Number of servers - T (int): Threshold average response time in milliseconds - servers (List[Tuple[int, int]]): List of tuples where each tuple contains (R_i, A_i), the maximum requests per second and average response time for the i-th server. Returns: - int: Maximum number of requests per second that can be handled # Filter out servers that exceed average response time threshold individually viable_servers = [srv for srv in servers if srv[1] <= T] # Sort servers based on average response time in ascending order viable_servers.sort(key=lambda x: x[1]) total_requests = 0 total_response_time = 0 total_servers = 0 # Accumulate requests such that the total average response time does not exceed T for R_i, A_i in viable_servers: if (total_response_time + A_i) / (total_servers + 1) <= T: total_requests += R_i total_response_time += A_i total_servers += 1 return total_requests"},{"question":"You are participating in a contest where you need to collect as many points as possible. You are given n slots arranged on a line. Each slot i has a certain number of points, p_i. You can start from any slot you want, and you can move between slots as long as you stay within a range that forms a contiguous subsegment. Your task is to determine the maximum number of points you can collect from any contiguous subsegment of slots. One restriction is that if you start from a slot with a negative point value, you can only move to the right until you encounter a non-negative point value. Once you encounter a non-negative point value, you can move freely within the subsegment. -----Input----- The first line contains a single integer t (1 leq t leq 1000) — the number of test cases. Description of the test cases follows. The first line of each test case contains a single integer n (1 leq n leq 100000) — the number of slots. The second line of each test case contains n integers, p_1, p_2, ldots, p_n (-10^9 leq p_i leq 10^9) — the points of the slots. It is guaranteed that the sum of n over all test cases does not exceed 1000000. -----Output----- For each test case, print a single integer — the maximum number of points you can collect from any contiguous subsegment of slots. -----Examples----- Input 3 8 1 -2 3 4 -1 2 1 -5 5 -2 -3 -4 -1 -2 6 -1 2 3 -2 3 4 Output 9 -1 10 -----Note----- In the first test case, you can collect points from the subsegment [3, 4, -1, 2, 1] for a maximum of 3 + 4 - 1 + 2 + 1 = 9 points. In the second test case, the best you can do is collect points from the subsegment [-1] for a maximum of -1 point. In the third test case, starting from the slot 2 gives the maximum subsegment [2, 3, -2, 3, 4] with 2 + 3 - 2 + 3 + 4 = 10 points.","solution":"def max_points(t, test_cases): Returns the maximum number of points collectable from any contiguous subsegment for each test case. results = [] for n, points in test_cases: # Function to find the maximum subarray sum using Kadane\'s algorithm def max_subarray_sum(arr): max_ending_here = max_so_far = arr[0] for point in arr[1:]: max_ending_here = max(point, max_ending_here + point) max_so_far = max(max_so_far, max_ending_here) return max_so_far # Apply Kadane\'s algorithm to find the maximum subarray sum results.append(max_subarray_sum(points)) return results"},{"question":"Arjun is playing a video game and needs to clear a series of levels. Each level gives him a certain number of points, and each subsequent level gives strictly more points than the previous one. However, the levels must be selected so that the points scored in each chosen level form a strictly increasing arithmetic sequence with a common difference D. The sequence of points P needs to satisfy the conditions below: - P consists of integers between A and B (inclusive). - For each 1 leq i leq |P|-1, P_{i+1} - P_i = D and P_{i+1} > P_i > 0. Find the maximum possible length of the sequence. ---Constraints--- - 1 leq A leq B leq 10^9 - 1 leq D leq 10^9 - All input values are integers. ---Input--- Input is given from Standard Input in the following format: A B D ---Output--- Print the maximum possible length of the sequence. ---Sample Input--- 5 20 3 ---Sample Output--- 6 The sequence 5, 8, 11, 14, 17, 20 satisfies the conditions.","solution":"def max_sequence_length(A, B, D): Returns the maximum possible length of the sequence. # Find the first term in the sequence that is >= A and is in the form of a + kD k = 0 while A + k * D < A: k += 1 start = A + k * D if start > B: return 0 # last term in the range [A...B] that is in the form of A + kD end = B - (B - start) % D # find the length of the series from start to end with a common difference D length = (end - start) // D + 1 return length"},{"question":"You have been tasked with organizing a library\'s collection. The library has a range of books classified by their genres, and each genre has a limited shelf space. Your job is to determine if all the books can fit within the available shelf space. The library has G genres, and for each genre i, you are given Ni books and a shelf space Si (expressed in number of books) allocated to that genre. Determine if there is enough shelf space for all genres. Your task is to create a function that checks if the library can accommodate all the books based on the given shelf space constraints. If all the books can fit, return True, otherwise return False. Input The input consists of multiple lines: - The first line contains a single integer G (1 ≤ G ≤ 100), which is the number of genres. - The next G lines each contain two integers Ni and Si (1 ≤ Ni, Si ≤ 1000), which represent the number of books and the shelf space for each genre, respectively. Output - Return True if all genres can accommodate their respective books, otherwise return False. Example # Input 3 10 15 25 20 5 5 # Output False","solution":"def can_accommodate_all_books(G, genres): Checks if the library can accommodate all the books based on shelf space constraints. Parameters: G (int): Number of genres. genres (list of tuples): List of (Ni, Si) pairs where: Ni (int): Number of books in genre i. Si (int): Shelf space capacity for genre i. Returns: bool: True if all genres can accommodate their books, else False. for Ni, Si in genres: if Ni > Si: return False return True"},{"question":"You are given an array of integers and two types of operations. The first operation allows you to increment each element of a subarray by a given value. The second operation requires you to determine the maximum value in a subarray. Your task is to efficiently handle a series of these operations. Input Format The first line contains two integers n and q, where n denotes the size of the array and q denotes the number of operations. The second line contains n space-separated integers, the initial values of the array. The following q lines describe the operations. Each operation is represented by a line containing three or four integers. If the first integer is 1, it indicates an increment operation and the format will be: 1 l r x This means increment each element in the subarray from index l to index r (inclusive) by x. If the first integer is 2, it indicates a maximum query and the format will be: 2 l r This means find and print the maximum value in the subarray from index l to index r (inclusive). Output Format For each operation of the second type, print the result on a new line. Constraints 1 ≤ n, q ≤ 100000 1 ≤ array elements, x ≤ 10^9 1 ≤ l ≤ r ≤ n SAMPLE INPUT 5 4 1 2 3 4 5 1 1 3 2 2 2 4 1 2 5 3 2 1 5 SAMPLE OUTPUT 5 7 Explanation The initial array is [1, 2, 3, 4, 5]. After the first operation (1 1 3 2), the array becomes [3, 4, 5, 4, 5]. The maximum value in the subarray from index 2 to 4 is 5. After the third operation (1 2 5 3), the array becomes [3, 7, 8, 7, 8]. The maximum value in the subarray from index 1 to 5 is 8.","solution":"class ArrayManipulator: def __init__(self, arr): self.arr = arr def increment(self, l, r, x): for i in range(l - 1, r): self.arr[i] += x def max_in_subarray(self, l, r): return max(self.arr[l - 1:r]) def process_operations(n, q, array, operations): am = ArrayManipulator(array) results = [] for op in operations: if op[0] == 1: _, l, r, x = op am.increment(l, r, x) elif op[0] == 2: _, l, r = op results.append(am.max_in_subarray(l, r)) return results"},{"question":"Geek is fascinated by mathematical operations. His teacher challenged him with the task of creating a specific sequence. Geek is given an integer n, and he needs to generate the sequence following a certain pattern. Help Geek generate the sequence. Example 1: Input: n = 5 Output: 1 2 3 4 5 4 3 2 1 Example 2: Input: n = 3 Output: 1 2 3 2 1 Your Task: You don\'t need to input anything. Complete the function generateSequence() which takes an integer n as the input parameter and prints the sequence. Constraints: 1 <= n <= 50","solution":"def generateSequence(n): Generates a sequence going from 1 to n and back to 1. For example, n=3 results in \\"1 2 3 2 1\\". sequence = list(range(1, n + 1)) + list(range(n - 1, 0, -1)) return \\" \\".join(map(str, sequence))"},{"question":"Given a string `s`, the task is to reorder the string so that the same characters are at least distance `d` apart, where `d` is a given positive integer. Example 1: Input: s = \\"aabbcc\\", d = 3 Output: \\"abacbc\\" or any other valid reordering Example 2: Input: s = \\"aaabc\\", d = 3 Output: \\"\\" Explanation: It is not possible to reorder the string so that same characters are at least 3 distance apart. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `reorderString()` which takes a string `s` and an integer `d` as input parameters and returns the reordered string. If it\'s not possible to reorder the string in the desired manner, return an empty string. Expected Time Complexity: O(n log n) Expected Auxiliary Space: O(n) Constraints: 1<=|s|<=10^4 s consists of lowercase English letters 1<=d<=|s|","solution":"from collections import Counter import heapq def reorderString(s, d): Reorder the string s so that same characters are at least distance d apart. Returns the reordered string or an empty string if it\'s not possible. if d == 0: return s # Count the frequency of each character freq = Counter(s) # Max-heap to store character and its frequency (negated to use Python\'s min-heap as max-heap) max_heap = [(-count, char) for char, count in freq.items()] heapq.heapify(max_heap) result = [] queue = [] while max_heap: count, char = heapq.heappop(max_heap) # Get the most frequent character result.append(char) # Place it in the result # Queue to track characters that wait for at least d distances to be pushed back to the heap queue.append((char, count + 1)) # Increment count because it was a negative value # Maintain the distance by popping from queue if its length is greater than or equals to d if len(queue) >= d: prev_char, prev_count = queue.pop(0) if prev_count < 0: # If more occurrences are left, add it back to heap heapq.heappush(max_heap, (prev_count, prev_char)) if len(result) != len(s): # If we couldn\'t place all characters return \\"\\" else: return \\"\\".join(result)"},{"question":"Problem Statement Given two strings, check if they are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, using all the original letters exactly once. Input Format The first line of the input contains a string S1. The second line of the input contains a string S2. Output Format Output \\"YES\\" if the strings are anagrams of each other, otherwise output \\"NO\\". Constraints 1 ≤ length of S1, S2 ≤ 1000000 S1 and S2 will contain only lowercase alphabetical characters. SAMPLE INPUT listen silent SAMPLE OUTPUT YES","solution":"def are_anagrams(s1, s2): Returns \\"YES\\" if s1 and s2 are anagrams, otherwise \\"NO\\". from collections import Counter # An early return if lengths differ as they cannot be anagrams if len(s1) != len(s2): return \\"NO\\" # Count frequencies of each character in both strings if Counter(s1) == Counter(s2): return \\"YES\\" else: return \\"NO\\""},{"question":"In a galaxy far, far away, there is a planet known for its peculiar monetary system. The inhabitants use coins of different values that are powers of 2: specifically, there are coins worth 1, 2, 4, 8, 16, and so on. One day, the Chief Treasurer of the planet receives a large number of identical requests for change. Each request specifies an amount, and the Treasurer\'s job is to distribute the smallest number of coins that sum up to that amount. Write a program that helps the Treasurer by computing the minimum number of coins required to make up a given amount of money. Additionally, the Treasurer wants to know how many different ways the exact amount of money can be formed using the coins. -----Input----- A single integer N representing the amount of money where 1 leq N leq 10^{18}. -----Output----- Print two integers on a single line separated by a space: the first integer is the minimum number of coins required to make up the amount N, and the second integer is the number of different ways to combine the coins to form the exact amount N. -----Example----- Sample Input: 10 Sample Output: 2 1 Sample Input: 15 Sample Output: 4 1","solution":"def count_minimum_coins_and_ways(N): Returns a tuple (min_coins, num_ways) where: - min_coins is the minimal number of coins required to make the amount N. - num_ways is the number of different ways the exact amount can be formed using the coins. # Logarithm base 2 will help us find the highest power of 2 less than or equal to N def log2(x): return x.bit_length() - 1 min_coins = bin(N).count(\'1\') # Number of 1s in binary representation gives minimum coins num_ways = 1 # Since each way of presenting can be unique only due to the coin\'s nature of being powers of 2 return min_coins, num_ways # Example usage: # print(count_minimum_coins_and_ways(10)) # Output should be (2, 1) # print(count_minimum_coins_and_ways(15)) # Output should be (4, 1)"},{"question":"You are given an array arr[]. Your task is to construct a new array where each element at index i of the new array is equal to the product of all the elements in the original array except the one at i. **Example 1:** Input: arr[] = {1, 2, 3, 4} Output: {24, 12, 8, 6} Explanation: At index 0, the product of all other elements except arr[0] is 2 * 3 * 4 = 24. At index 1, the product of all other elements except arr[1] is 1 * 3 * 4 = 12. At index 2, the product of all other elements except arr[2] is 1 * 2 * 4 = 8. At index 3, the product of all other elements except arr[3] is 1 * 2 * 3 = 6. **Example 2:** Input: arr[] = {5, 3, 4, 2} Output: {24, 40, 30, 60} Explanation: At index 0, the product of all other elements except arr[0] is 3 * 4 * 2 = 24. At index 1, the product of all other elements except arr[1] is 5 * 4 * 2 = 40. At index 2, the product of all other elements except arr[2] is 5 * 3 * 2 = 30. At index 3, the product of all other elements except arr[3] is 5 * 3 * 4 = 60. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function product_array() that takes an array (arr), sizeOfArray (n), and returns a new array where each element is the product of all elements in the original array except the one at the same index. The driver code takes care of the printing. **Expected Time Complexity:** O(N). **Expected Auxiliary Space:** O(N). **Constraints:** 1 ≤ N ≤ 10^5 1 ≤ arr[i] ≤ 10^7","solution":"def product_array(arr, n): # Initialize arrays for left and right products left = [1] * n right = [1] * n prod = [1] * n # Create the left products array left[0] = 1 for i in range(1, n): left[i] = arr[i - 1] * left[i - 1] # Create the right products array right[n - 1] = 1 for j in range(n - 2, -1, -1): right[j] = arr[j + 1] * right[j + 1] # Construct the result array for i in range(n): prod[i] = left[i] * right[i] return prod"},{"question":"You are managing a factory that produces widgets. Every widget goes through a quality check before it is approved for market. The quality check involves inspecting n quality metrics of the widget, each represented as an integer on a scale from 0 to 100 inclusive. A widget passes the quality check if at most one of its quality metrics is under 50. Your task is to calculate how many widgets from a given list pass the quality check. -----Input----- The first line contains a single integer m (1 le m le 1000) — the number of widgets. Each of the next m lines describes a widget: the first integer n (1 le n le 100) is the number of quality metrics for this widget, followed by n integers q_1, q_2, ldots, q_n (0 le q_i le 100) which are the quality metrics of the widget. -----Output----- Print the number of widgets that pass the quality check. -----Examples----- Input 3 5 55 60 47 72 88 3 49 51 52 4 49 48 50 50 Output 2 Input 2 2 100 100 2 45 30 Output 1 -----Note----- In the first test case: - The first widget has one metric under 50, so it passes the quality check. - The second widget has one metric under 50, so it passes the quality check. - The third widget has two metrics under 50, so it does not pass the quality check. In the second test case: - The first widget has all metrics above 50, so it passes the quality check. - The second widget has two metrics under 50, so it does not pass the quality check.","solution":"def count_passing_widgets(widgets): Returns the number of widgets that pass the quality check. A widget passes the quality check if at most one of its quality metrics is under 50. :param widgets: A list of lists. Each inner list contains the quality metrics of a widget. :return: Number of widgets that pass the quality check. count = 0 for metrics in widgets: if metrics.count(True) <= 1: count += 1 return count def process_input(input_data): Process the input data and converts it into a list of widget metrics. :param input_data: A string representing the input data :return: A list of list of integers, each list represents the quality metrics of a widget. lines = input_data.strip().split(\'n\') m = int(lines[0]) widgets = [] for i in range(1, m + 1): metrics = list(map(int, lines[i].split()[1:])) check = [metric < 50 for metric in metrics] widgets.append(check) return widgets"},{"question":"Given a **n** x **m** grid representing a maze with obstacles, your task is to find a path from the top-left corner (0,0) to the bottom-right corner (n-1,m-1). The grid contains 0\'s and 1\'s, where 0 indicates an open space and 1 indicates an obstacle. You can move up, down, left, or right. If there is no valid path, return an empty list. Write a function that receives the grid as an argument and returns the path as a list of coordinates. If multiple paths exist, any valid path is acceptable. For example: ```python grid = [ [0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0], [0, 1, 0, 0, 0], [0, 1, 1, 1, 0] ] find_path(grid) ``` For the above grid, one of the possible valid output paths can be: ```python [(0, 0), (1, 0), (2, 0), (2, 1), (2, 2), (3, 2), (3, 3), (3, 4), (4, 4)] ``` # Constraints: - **n** and **m** will be at least 1 and at most 100. - There will be no more than 10^4 open spaces (0\'s) in the grid. - Assume there is always a possible solution if the top-left and bottom-right corners are both `0`. # Your Task: - Efficiently find a path if it exists using appropriate algorithms and data structures. - Ensure your solution is optimal in terms of time and space complexity.","solution":"from collections import deque def find_path(grid): Finds and returns a list of coordinates representing the path from (0,0) to (n-1,m-1) in a given grid. If no path exists, returns an empty list. n, m = len(grid), len(grid[0]) if grid[0][0] == 1 or grid[n-1][m-1] == 1: return [] def is_valid(r, c): return 0 <= r < n and 0 <= c < m and grid[r][c] == 0 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0)]) path = {(0, 0): None} while queue: r, c = queue.popleft() if (r, c) == (n-1, m-1): break for dr, dc in directions: nr, nc = r + dr, c + dc if is_valid(nr, nc) and (nr, nc) not in path: queue.append((nr, nc)) path[(nr, nc)] = (r, c) if (n-1, m-1) not in path: return [] # Reconstruct the path result_path = [] curr = (n-1, m-1) while curr: result_path.append(curr) curr = path[curr] result_path.reverse() return result_path"},{"question":"You are given an array a consisting of n integer numbers. Let the productivity of the array be the product of all its elements. Your task is to remove exactly one element from the array in such a way that the productivity of the remaining (n-1)-elements array is maximized. Your task is to calculate the maximum possible productivity after removing exactly one element from the array. -----Input----- The first line of the input contains one integer n (2 le n le 10^5) — the number of elements in the array a. The second line of the input contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^4) — elements of the array a. -----Output----- Print one integer — the maximum possible productivity of the array if you remove exactly one element from the array a. -----Examples----- Input 4 1 2 3 4 Output 24 Input 3 3 6 9 Output 54 -----Note----- In the first example, you can remove 1, the productivity of the remaining array will be 2 * 3 * 4 = 24. If you remove 2, the productivity of the remaining array will be 1 * 3 * 4 = 12, and so on. The maximum productivity is obtained by removing 1. In the second example, you can remove 3, the productivity of the remaining array will be 6 * 9 = 54, which is the maximum productivity.","solution":"def max_productivity(n, a): This function calculates the maximum possible productivity after removing exactly one element from the array. :param n: int - the number of elements in the array :param a: list of int - the elements of the array :return: int - maximum possible productivity total_product = 1 for num in a: total_product *= num max_prod = 0 for num in a: productivity = total_product // num max_prod = max(max_prod, productivity) return max_prod"},{"question":"Create a function that simulates a simple banking system. Here is how it works: - Initially, the account balance is zero. - The function takes a list of transactions as input. - Each transaction is a string either representing a deposit or a withdrawal. - A deposit is written as \\"D <amount>\\" where `<amount>` is a positive integer. - A withdrawal is written as \\"W <amount>\\" where `<amount>` is a positive integer. - The function should return the final balance after processing all transactions in the list. - If at any point a withdrawal causes the balance to become negative, the transaction should be ignored and the balance remains unchanged. **Function Signature:** ```python def process_transactions(transactions: List[str]) -> int: ``` **Example:** ```python transactions = [\\"D 300\\", \\"W 200\\", \\"D 100\\", \\"W 500\\"] print(process_transactions(transactions)) # Output: 200 ``` In this example: - Depositing 300 makes the balance 300. - Withdrawing 200 makes the balance 100. - Depositing 100 makes the balance 200. - Withdrawing 500 is ignored because it would make the balance negative. Write the function `process_transactions` that correctly implements this behavior.","solution":"from typing import List def process_transactions(transactions: List[str]) -> int: Processes a list of transactions and returns the final account balance. balance = 0 for transaction in transactions: action, amount = transaction.split() amount = int(amount) if action == \\"D\\": balance += amount elif action == \\"W\\": if balance >= amount: balance -= amount return balance"},{"question":"# Task: Write a function `sum_of_squares` that takes an integer `n` and returns the sum of the squares of the first `n` positive integers. However, if the provided integer `n` is less than 1, return 0. # Examples: `sum_of_squares(5)` should return `55` *Explanation:* (1^2 + 2^2 + 3^2 + 4^2 + 5^2 = 1 + 4 + 9 + 16 + 25 = 55) `sum_of_squares(3)` should return `14` *Explanation:* (1^2 + 2^2 + 3^2 = 1 + 4 + 9 = 14) `sum_of_squares(0)` should return `0` `sum_of_squares(-4)` should return `0` # Hint: Consider using a loop or a mathematical formula to calculate the sum of squares.","solution":"def sum_of_squares(n): Returns the sum of the squares of the first n positive integers. If n is less than 1, returns 0. if n < 1: return 0 return sum(i ** 2 for i in range(1, n + 1))"},{"question":"Kirti is working on a project that requires her to generate a series of numbers based on a specific pattern. Given a number m, she needs to generate a sequence of integers starting from 1 up to m and modify each integer according to the following rules: 1. If the integer is divisible by 3, replace it with \\"Fizz\\". 2. If the integer is divisible by 5, replace it with \\"Buzz\\". 3. If the integer is divisible by both 3 and 5, replace it with \\"FizzBuzz\\". 4. Otherwise, keep the integer as it is. Write a function `generate_sequence(m)` which takes an integer m and returns a list of length m containing the modified sequence of integers. -----Input----- The input consists of a single integer m (1 le m le 10^4). -----Output----- Output a list of length m containing the modified sequence according to the rules described above. -----Example----- Input 5 Output [\'1\', \'2\', \'Fizz\', \'4\', \'Buzz\'] Input 15 Output [\'1\', \'2\', \'Fizz\', \'4\', \'Buzz\', \'Fizz\', \'7\', \'8\', \'Fizz\', \'Buzz\', \'11\', \'Fizz\', \'13\', \'14\', \'FizzBuzz\'] -----Note----- In the first example with m=5: - The first and second numbers are 1 and 2, which are not divisible by 3 or 5. - The third number is 3, which is divisible by 3, so it is replaced by \\"Fizz\\". - The fourth number is 4, which is not divisible by 3 or 5. - The fifth number is 5, which is divisible by 5, so it is replaced by \\"Buzz\\". In the second example with m=15: - Numbers that are divisible by 3 (3, 6, 9, 12) are replaced by \\"Fizz\\". - Numbers that are divisible by 5 (5, 10) are replaced by \\"Buzz\\". - Number 15, which is divisible by both 3 and 5, is replaced by \\"FizzBuzz\\".","solution":"def generate_sequence(m): Generates a sequence of integers from 1 to m with substitutions: - \\"Fizz\\" for numbers divisible by 3, - \\"Buzz\\" for numbers divisible by 5, - \\"FizzBuzz\\" for numbers divisible by both 3 and 5. Params: m (int): The end of the sequence (inclusive). Returns: list: The generated list with substitutions. result = [] for i in range(1, m + 1): if i % 3 == 0 and i % 5 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return result"},{"question":"You are given an n times m grid. Each cell of the grid has a value 0 or 1. Your task is to determine the largest size of a square sub-grid where all the cells are filled with 1s. -----Input----- The first line contains one integer t (1 le t le 100) — the number of test cases. Each test case starts with a line containing two integers n and m (1 le n, m le 50) — the number of rows and the number of columns, respectively. Then n lines follow; each of them contains a string of m characters (\'0\' or \'1\'). -----Output----- For each test case, print the size of the largest square sub-grid where all the cells are filled with 1s. -----Examples----- Input 3 5 6 101111 111111 111111 111111 011111 4 4 0110 1111 1111 0110 3 4 1111 1111 1111 Output 4 2 3 -----Note----- For the first test case, the largest square sub-grid of 1s has a size of 4 times 4. For the second test case, the largest square sub-grid of 1s has a size of 2 times 2. For the third test case, the largest square sub-grid of 1s has a size of 3 times 3.","solution":"def largest_square_subgrid(t, test_cases): results = [] for test in test_cases: n, m, grid = test dp = [[0] * m for _ in range(n)] max_side_length = 0 for i in range(n): for j in range(m): if grid[i][j] == \'1\': if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side_length = max(max_side_length, dp[i][j]) results.append(max_side_length) return results"},{"question":"You are given a string of length n and m queries. Each query consists of a pair of integers (li, ri) (1 ≤ li ≤ ri ≤ n). For each query, you need to determine the number of unique characters in the substring starting at index li and ending at index ri (both inclusive). Input The first line of the input contains an integer n (1 ≤ n ≤ 100000) — the length of the string. The second line contains the string of length n consisting of lowercase English letters. The third line contains an integer m (1 ≤ m ≤ 100000) — the number of queries. Each of the following m lines contains two space-separated integers li and ri. Output For each query, print the number of unique characters in the corresponding substring on a new line. Examples Input 10 abcabcabcx 3 1 3 2 6 1 10 Output 3 3 4 Note Let\'s analyze the example queries: 1) The substring from index 1 to 3 is \\"abc\\", which has 3 unique characters: a, b, c. 2) The substring from index 2 to 6 is \\"bcabc\\", which has 3 unique characters: b, c, a. 3) The substring from index 1 to 10 is \\"abcabcabcx\\", which has 4 unique characters: a, b, c, x.","solution":"def count_unique_characters(n, s, queries): results = [] for li, ri in queries: substring = s[li-1:ri] unique_characters = set(substring) results.append(len(unique_characters)) return results # Example usage: n = 10 s = \\"abcabcabcx\\" queries = [(1, 3), (2, 6), (1, 10)] print(count_unique_characters(n, s, queries))"},{"question":"# Task: Write a function that accepts a string `s` and determines the index of the first unique character in the string. If there are no unique characters, it should return -1. The function should be case-sensitive. Examples: ```python first_unique_char(\\"leetcode\\") = 0 # \'l\' is the first unique character first_unique_char(\\"loveleetcode\\") = 2 # \'v\' is the first unique character first_unique_char(\\"aabb\\") = -1 # There are no unique characters first_unique_char(\\"aAbBcC\\") = 0 # \'a\' is the first unique character (case-sensitive) ``` # Constraints: * **1 ≤ |s| ≤ 10^5** # Notes: - Consider optimizing the function for time complexity to run efficiently on large inputs.","solution":"def first_unique_char(s): Returns the index of the first unique character in the string `s`. If there are no unique characters, returns -1. The function is case-sensitive. # Dictionary to store frequency of each character char_count = {} # Traverse the string to fill the char_count for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Traverse the string again to find the first unique character for index, char in enumerate(s): if char_count[char] == 1: return index # If no unique character is found return -1"},{"question":"To help Vova and Lesha automate their next competition, let’s design the module in a slightly different context. Vova and Lesha now have to distribute resource tokens on a grid. Each token has its value, and Vova and Lesha pick tokens one by one alternately, with Vova always going first. The token that remains in the grid after all the picks are done should have the smallest possible value. Vova will try to pick tokens in a way that reduces the total sum of remaining tokens, while Lesha wants the remaining values to be as high as possible. The grid is represented by a 2D list, and each cell has an integer value representing the token value. The players cannot pick tokens from the same cell. You need to write a program to determine the minimal value of the remaining token if both Vova and Lesha play optimally. # -----Input----- - The first line contains two integers n and m (1 ≤ n, m ≤ 2000) — the dimensions of the grid. - The following n lines each contain m integers representing the values of the tokens in the grid (0 ≤ token value ≤ 10^9). # -----Output----- Print the minimal value of any remaining token after all the optimal moves by Vova and Lesha. # -----Examples----- Input 3 3 3 1 4 1 5 9 2 6 5 Output 1 Input 2 2 7 3 2 5 Output 2 # -----Note----- In the first sample, the initial grid is: ``` 3 1 4 1 5 9 2 6 5 ``` Vova and Lesha pick tokens optimally in such a way that the smallest value remaining on the grid is `1`. In the second sample, optimal moves leave one of the tokens of `2` or `3`, whichever is least among the remaining after picks.","solution":"def minimal_remaining_token(n, m, grid): Given dimensions n, m and grid of tokens, returns the minimal value of any remaining token if both Vova and Lesha play optimally. # Flatten the grid to a single list of tokens tokens = [grid[i][j] for i in range(n) for j in range(m)] # Sort tokens in ascending order tokens.sort() total_picks = n * m // 2 # Each player picks half the tokens (or one less for odd total number) # Vova and Lesha take turns picking tokens starting from the largest # Since both start from largest, we need to find the remaining tokens after they pick # Alternately, this means ignoring the largest total_picks * 2 tokens remaining_tokens = tokens[:len(tokens) - total_picks * 2] if remaining_tokens: return min(remaining_tokens) else: return tokens[-total_picks*2] # Example usage: # n, m = 3, 3 # grid = [ # [3, 1, 4], # [1, 5, 9], # [2, 6, 5] # ] # print(minimal_remaining_token(n, m, grid)) # Expected Output: 1"},{"question":"You are given a grid of size NxM. The grid contains several islands, represented by \'1\'s (land), and \'0\'s (water). Two lands are connected if they are adjacent to each other horizontally or vertically. An island is a group of connected lands surrounded by water. Your task is to implement a function that identifies and counts the number of islands in the grid. ------ Input ------ The first line contains T, the number of test cases. Each test case consists of the following: The first line contains two integers, N and M (1 ≤ N, M ≤ 1000), the number of rows and columns in the grid. Then N lines follow, each containing M characters, either \'1\' or \'0\'. ------ Output ------ For each test case, print a single line with the number of islands in the corresponding grid. ----- Sample Input 1 ------ 1 4 5 11000 11000 00100 00011 ----- Sample Output 1 ------ 3","solution":"def num_islands(grid): Returns the number of islands in the given grid. if not grid or not grid[0]: return 0 def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] == \'0\': return grid[x][y] = \'0\' # Mark it as visited # Recursively visit all adjacent lands dfs(x + 1, y) dfs(x - 1, y) dfs(x, y + 1) dfs(x, y - 1) n = len(grid) m = len(grid[0]) count = 0 for i in range(n): for j in range(m): if grid[i][j] == \'1\': count += 1 dfs(i, j) return count def count_islands(test_cases): results = [] for grid in test_cases: results.append(num_islands(grid)) return results"},{"question":"Given a string containing only digits, return all possible letter combinations that the number could represent. This problem is a classic combination generation question, and typically the mapping follows the same pattern as on the telephone buttons (\'2\' maps to \\"abc\\", \'3\' maps to \\"def\\", and so on). Here is the mapping of digits to letters: ``` - \'2\': \\"abc\\" - \'3\': \\"def\\" - \'4\': \\"ghi\\" - \'5\': \\"jkl\\" - \'6\': \\"mno\\" - \'7\': \\"pqrs\\" - \'8\': \\"tuv\\" - \'9\': \\"wxyz\\" ``` The function should return the combinations in lexicographic (i.e., alphabetical) order. Write a function `letter_combinations(digits)` that takes a string _digits_ and returns a list of strings representing all possible letter combinations that the number could represent. For example: ```python py> letter_combinations(\\"23\\") [\'ad\', \'ae\', \'af\', \'bd\', \'be\', \'bf\', \'cd\', \'ce\', \'cf\'] py> letter_combinations(\\"\\") [] py> letter_combinations(\\"2\\") [\'a\', \'b\', \'c\'] ``` Please note that input digits will only be valid digits between \'2\' and \'9\' inclusive.","solution":"from itertools import product def letter_combinations(digits): Returns all possible letter combinations that the number could represent. if not digits: return [] mapping = { \'2\': \\"abc\\", \'3\': \\"def\\", \'4\': \\"ghi\\", \'5\': \\"jkl\\", \'6\': \\"mno\\", \'7\': \\"pqrs\\", \'8\': \\"tuv\\", \'9\': \\"wxyz\\" } # Create a list of lists for the mapped characters groups = [mapping[digit] for digit in digits] # Compute Cartesian product of these groups combinations = [\'\'.join(combination) for combination in product(*groups)] return combinations"},{"question":"Warehouse Management Systems (WMS) often need to optimize the storage and retrieval of items. A common challenge they face is managing the arrangement of items in the warehouse such that the utilization of storage space is optimized. In our problem, you are given a 1-dimensional warehouse represented by an array of integers. Each integer denotes the height of stacks of items placed in the warehouse, where: - 0 means no stack at that position (empty space), - Positive integers denote the height of the stack at that position. The warehouse operates with the following constraints: 1. Items can be moved from one position to another within the warehouse. 2. Items can only be moved to the nearest available empty space either to the left or right. Your task is to find the replica of the warehouse configuration after moving all items such that there are no empty spaces between any stacks, while keeping the order of stacks the same as the original array. Input: - First line contains an integer T, representing the number of test cases. - For each test case, the first line contains an integer N (1 ≤ N ≤ 2,000), representing the number of positions in the warehouse. - The second line contains N integers, denoting the heights of stacks in those positions (0 ≤ height ≤ 100,000). Output: - For each test case, output the array of integers representing the final configuration of the warehouse, after moving all items to eliminate all empty spaces. Example: ``` Input: 3 5 1 0 3 0 2 4 0 0 7 0 6 1 2 0 0 4 0 Output: 1 3 2 0 0 7 0 0 0 1 2 4 0 0 0 ``` Explanation: Test Case #1: - The initial configuration is [1, 0, 3, 0, 2]. - By moving the stacks to the left, the final configuration becomes [1, 3, 2, 0, 0]. Test Case #2: - Initial configuration is [0, 0, 7, 0]. - After moving the stack to the left, the final configuration is [7, 0, 0, 0]. Test Case #3: - Initial configuration is [1, 2, 0, 0, 4, 0]. - By moving the stacks to the left, the final configuration becomes [1, 2, 4, 0, 0, 0].","solution":"def optimize_warehouse(T, test_cases): Optimizes the arrangement of items in a warehouse to eliminate empty spaces. :param T: Number of test cases. :param test_cases: List of tuples, each containing: - N: Number of positions in the warehouse. - heights: List of integers representing the heights of stacks. :return: List of lists, each representing the final configuration of the warehouse. results = [] for N, heights in test_cases: non_zero_items = [height for height in heights if height != 0] # Collect non-zero heights non_zero_items.extend([0] * (N - len(non_zero_items))) # Fill the remaining positions with zeroes results.append(non_zero_items) return results"},{"question":"In a coding competition, participants are required to solve a series of problems. Each problem is independent and worth a certain number of points. Each participant’s final score is the sum of the points of all solved problems. However, due to unforeseen circumstances, a specific problem is found to be flawed, and all points from that problem should be excluded from the participant\'s total score. You are given the scores of each participant, and you need to determine their final scores after excluding the points from the flawed problem. Write a function that calculates the final scores of each participant. Input: - The first input line contains an integer n, the number of participants. - The second line contains an integer m, the number of problems. - The next n lines each contain m integers representing the scores of each participant for each problem. Output: - Output n lines, each containing a single integer, the final score of each participant after excluding the flawed problem. Constraints: 1 ≤ n ≤ 1000 1 ≤ m ≤ 100 0 ≤ Score of each problem ≤ 100 1 ≤ Index of flawed problem ≤ m Example input: 4 5 10 20 30 40 50 15 25 5 35 45 0 10 20 30 40 5 15 25 35 45 3 Example output: 120 120 80 100 Explanation: The third problem (index 3) scores are excluded from each participant’s total score calculation. For the first participant, the score becomes 10+20+40+50 = 120. Similarly, calculate the scores for the other participants.","solution":"def calculate_final_scores(num_participants, num_problems, scores, flawed_problem_index): Calculate the final scores of each participant after excluding the flawed problem scores. Parameters: num_participants (int): The number of participants. num_problems (int): The number of problems. scores (list of list of int): The scores of each participant for each problem. flawed_problem_index (int): The index of the flawed problem to be excluded (1-based index). Returns: list of int: Final scores of each participant after excluding the flawed problem scores. final_scores = [] flawed_problem_index -= 1 # Convert to 0-based index for i in range(num_participants): # Calculate the sum of scores excluding the flawed problem final_score = sum(scores[i][j] for j in range(num_problems) if j != flawed_problem_index) final_scores.append(final_score) return final_scores"},{"question":"You are given a list of integers representing the amount of money people have and you need to divide them into groups such that the difference between the wealthiest and the poorest person in each group is minimized. Each group must contain exactly `k` people. If it is not possible to form such groups, output -1. -----Input----- The first line contains a single integer `T <= 50`, the number of test cases. Each test case consists of two lines. The first line contains two integers `n` and `k` where `2 <= k <= n <= 1000`. The second line contains `n` integers representing the amount of money each person has, where each integer is between 1 and 100,000. -----Output----- For each test case, output a single integer: the smallest possible difference between the wealthiest and the poorest person in any group of `k` people. If it is not possible to form such groups, output -1. -----Example----- Input: 2 5 3 1 9 6 4 3 7 4 1 2 3 4 5 6 7 Output: 5 3 -----Explanation----- In the first test case, you can form the groups [1, 3, 4], [1, 4, 6], etc. The group with the smallest possible difference between the wealthiest and the poorest person is [1, 3, 4], where the difference is 3. In the second test case, you can form the groups [1, 2, 3, 4], [2, 3, 4, 5], etc. The group with the smallest possible difference between the wealthiest and the poorest person is [3, 4, 5, 6], where the difference is 3.","solution":"def minimum_difference_group_wealth(test_cases): results = [] for n, k, wealth in test_cases: if k > n: results.append(-1) continue wealth.sort() min_difference = float(\'inf\') for i in range(n - k + 1): current_difference = wealth[i + k - 1] - wealth[i] if current_difference < min_difference: min_difference = current_difference results.append(min_difference) return results"},{"question":"You are playing a game where you have to collect coins scattered around a grid. The grid is represented as a 2D array where each cell contains a non-negative integer representing the number of coins in that cell. You start at the top-left cell (0,0) and want to reach the bottom-right cell (n-1, m-1), but you can only move to the right or down at any point in time. Your task is to write a function that calculates the maximum number of coins you can collect on your way to the bottom-right cell. Your input will be a 2D list `grid` that has `n` rows and `m` columns. For example, given the input: ```python grid = [ [0, 3, 1, 1], [2, 0, 0, 4], [1, 5, 3, 1] ] ``` The output will be `12`, which is the sum of the coins collected on the path `0 -> 3 -> 4 -> 5 -> 3 -> 1`. Note: You should aim for an efficient solution since the size of the grid can be large.","solution":"def max_coins(grid): if not grid or not grid[0]: return 0 n, m = len(grid), len(grid[0]) dp = [[0] * m for _ in range(n)] dp[0][0] = grid[0][0] for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][m-1]"},{"question":"Given an array of integers, determine whether the array represents a valid preorder traversal of a binary search tree (BST). A valid BST ensures that for every node, its left subtree contains only nodes with values less than the node\'s value, and its right subtree contains only nodes with values greater than the node\'s value. Example: Input: [5, 2, 1, 3, 6] Output: true Explanation: The input array can represent the preorder traversal of a BST: 5 / 2 6 / 1 3 Input: [5, 2, 6, 1, 3] Output: false Explanation: The input array cannot represent the preorder traversal of a BST. Constraints: - The number of nodes in the array is in the range [1, 100]. Note: The solution should have a time complexity of O(n).","solution":"def is_valid_preorder(preorder): Determine whether the array represents a valid preorder traversal of a BST. stack = [] lower_bound = float(\'-inf\') for value in preorder: if value < lower_bound: return False while stack and value > stack[-1]: lower_bound = stack.pop() stack.append(value) return True"},{"question":"You are given a list of words and a string called `target`. The task is to determine if you can form the target string by concatenating two different words from the list in any order. If such a pair of words exists, print the two words. If multiple pairs exist, print the pair that appears first lexicographically (by concatenating word1 + word2). If no such pairs exist, print \\"NO\\" (without quotes). Input The first line contains an integer n (1 ≤ n ≤ 105) — the number of words in the list. Each of the next n lines contains a non-empty word consisting of lowercase English letters. All words are distinct. The last line contains the non-empty string `target` which consists of lowercase English letters. The length of the target string and the total length of the words in the list will not exceed 105. Output Print one or two words that concatenate to form the target string or \\"NO\\" if no such pairs exist. Examples Input 5 cat dog mouse catdog mou dogcat catdog Output cat dog Input 4 hello world owor do Output NO Note In the first sample, the target string \\"catdog\\" can be obtained by concatenating \\"cat\\" and \\"dog\\". Even though \\"dogcat\\" is a valid pair, \\"cat\\" appears lexicographically before \\"dog\\", making \\"cat dog\\" the correct answer. In the second sample, there is no pair of distinct words that concatenates to form the target string \\"owor\\". Hence, the output is \\"NO\\".","solution":"def find_words_to_form_target(words, target): word_set = set(words) lexicographical_pairs = [] for word in words: if target.startswith(word): remainder = target[len(word):] if remainder in word_set and remainder != word: lexicographical_pairs.append((word, remainder)) if target.endswith(word): start = target[:-len(word)] if start in word_set and start != word: lexicographical_pairs.append((start, word)) if lexicographical_pairs: lexicographical_pairs.sort() return lexicographical_pairs[0] return \\"NO\\" # Example usage if __name__ == \\"__main__\\": n = int(input()) words = [input().strip() for _ in range(n)] target = input().strip() result = find_words_to_form_target(words, target) if result == \\"NO\\": print(result) else: print(result[0], result[1])"},{"question":"Given a list of integers, write a function that returns the sum of all prime numbers in the list. Input The first line contains an integer n, which is the number of elements in the list. The second line contains n integers separated by a space. Output Print a single integer, which is the sum of all prime numbers in the list. Example Input: 6 3 4 7 6 11 13 Output: 34","solution":"def is_prime(num): Helper function to determine if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num ** 0.5) + 1, 2): if num % i == 0: return False return True def sum_of_primes(lst): Returns the sum of all prime numbers in the given list. return sum(num for num in lst if is_prime(num))"},{"question":"In a programming competition, participants are required to form specific teams based on given guidelines. You are given a list of participants with their skill levels, and your task is to form the minimum number of teams such that the following conditions are met: 1. Each team must have exactly three participants. 2. The skill level of the participants in each team must be consecutive integers. For example, a team with participants having skill levels 3, 4, and 5 is valid, but a team with skill levels 3, 4, and 6 is not. Write a program to determine the minimum number of teams that can be formed from the given participants. -----Input----- The first line contains an integer n (3 ≤ n ≤ 100 000), the number of participants. The second line contains n integers separated by spaces, each representing the skill level of a participant. The skill levels are distinct and range from 1 to 1 000 000. -----Output----- Print a single integer, the minimum number of teams that can be formed. -----Examples----- Input 6 1 3 2 5 6 4 Output 2 Input 7 10 14 13 12 11 15 16 Output 2 Input 5 8 6 7 5 11 Output 1 -----Note----- In the first sample, teams can be formed as follows: [1, 2, 3] and [4, 5, 6]. In the second sample, teams can be formed as follows: [10, 11, 12], [13, 14, 15]. In the third sample, teams can be formed as follows: [5, 6, 7]. The participant with skill level 11 cannot be placed in any team. Make sure that you handle the input efficiently and consider edge cases appropriately.","solution":"def minimum_teams(n, skill_levels): Determines the minimum number of teams from participants with distinct skill levels. Each team consists of exactly three participants with consecutive integers. skill_levels.sort() teams_formed = 0 i = 0 while i <= n - 3: if skill_levels[i] + 1 == skill_levels[i + 1] and skill_levels[i + 1] + 1 == skill_levels[i + 2]: teams_formed += 1 i += 3 else: i += 1 return teams_formed"},{"question":"You are given a string containing lowercase alphabets and digits. Your task is to rearrange the string such that all the alphabets appear before the digits in their original relative order. Write a function that takes such a string as input and returns the rearranged string. Input: A string containing only lowercase alphabets and digits. Output: A string with all the letters in the input appearing first, followed by all the digits, both in their original order. Function Signature: def rearrange_string(s: str) -> str: Example: Input: ``` \\"3a2b5c1\\" ``` Output: ``` \\"abc3251\\" ``` Additionally, you need to implement the function `main` to read input from the standard input and print the output to the standard output. Example: ``` def main(): import sys input = sys.stdin.read().strip() print(rearrange_string(input)) ``` Constraints: - The input string will have at least one character and at most 100 characters.","solution":"def rearrange_string(s: str) -> str: Rearranges the input string such that all the alphabets appear before the digits, while maintaining their original relative order. Parameters: s (str): The input string containing lowercase alphabets and digits. Returns: str: The rearranged string with alphabets first, followed by digits. letters = [] digits = [] for char in s: if char.isdigit(): digits.append(char) else: letters.append(char) return \'\'.join(letters + digits) def main(): import sys input = sys.stdin.read().strip() print(rearrange_string(input))"},{"question":"You are given an array of integers. Your task is to find the sum of all unique elements in this array. A unique element is an element that appears exactly once in the array. Input: The first line of input will contain a positive integer N (1 ≤ N ≤ 10^6). The second line will contain N space-separated integers, where each integer is between -10^6 and 10^6. Output: Print the sum of all unique elements in the array. SAMPLE INPUT 5 1 2 2 3 4 SAMPLE OUTPUT 8","solution":"def sum_of_unique_elements(arr): Returns the sum of all unique elements in the array. from collections import Counter # Count the frequency of each element in the array element_counts = Counter(arr) # Compute the sum of elements that appear exactly once unique_sum = sum(el for el, count in element_counts.items() if count == 1) return unique_sum"},{"question":"A restaurant uses a robotic system to manage its food orders. Each order consists of a list of unique integer IDs representing different dishes. The chef needs to ensure that the sum of the IDs of the dishes in any order does not exceed a certain threshold value while also maximizing the number of dishes in that order. Given the list of ID values and the maximum threshold value, determine the maximum number of dishes that can be included in a single order without exceeding the threshold. -----Input----- The first line contains two integers n and t (1 ≤ n ≤ 1 000, 1 ≤ t ≤ 100 000) — the number of dish IDs and the maximum threshold value. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100 000), representing the IDs of the dishes. -----Output----- Print a single integer — the maximum number of dishes that can be included in an order without the sum of their IDs exceeding the threshold t. -----Examples----- Input 5 10 1 2 3 4 5 Output 4 Input 5 5 5 4 3 2 1 Output 2 -----Explanation----- In the first example, the best combination is to choose the dishes with IDs 1, 2, 3, and 4, which sum up to 10, just within the threshold. In the second example, the best combination is to choose the dishes with IDs 2 and 3, which sum up to 5, meeting the threshold.","solution":"def max_dishes(n, t, dish_ids): Determine the maximum number of dishes that can be included in a single order without exceeding the threshold t. Parameters: n (int): The number of dish IDs. t (int): The maximum threshold value. dish_ids (List[int]): List of dish IDs. Returns: int: The maximum number of dishes. # Sort the dish IDs to try to include smallest IDs first dish_ids.sort() count = 0 total = 0 for dish_id in dish_ids: if total + dish_id <= t: total += dish_id count += 1 else: break return count"},{"question":"You are given a list of heights of students in a class. Your task is to find the number of students who are taller than the tallest student standing immediately in front of them in line. If no student is standing in front of them, consider them not being taller than anyone. Constraints: * The number of students ( n ) (1 ≤ ( n ) ≤ 1000) * Each height ( h_i ) (1 ≤ ( h_i ) ≤ 100000) * Heights are given in the order they are standing in a line, from the front to the back. Input Input is given from Standard Input in the following format: ``` n h1 h2 h3 ... hn ``` Output Print the number of students who are taller than the tallest student standing immediately in front of them in line. Examples Input ``` 5 140 150 145 160 155 ``` Output ``` 2 ``` Input ``` 3 170 165 180 ``` Output ``` 1 ``` Input ``` 4 110 120 130 140 ``` Output ``` 3 ```","solution":"def count_taller_students(heights): Given a list of student heights, returns the number of students who are taller than the tallest student standing immediately in front of them. count = 0 n = len(heights) # Iterate through the list starting from the second student for i in range(1, n): # Check if current student i is taller than the student i-1 if heights[i] > heights[i - 1]: count += 1 return count # Read input values from Standard Input def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) heights = list(map(int, data[1:n + 1])) result = count_taller_students(heights) print(result)"},{"question":"A software development company is organizing a series of sprints for its development teams. The project manager needs to assign tasks to team members based on their skill levels. Each task has a minimum skill requirement, and each team member has a specific skill level. The goal is to ensure that tasks are accomplished as quickly and efficiently as possible. Team members can work on at most one task at a time, and a task can be reassigned if needed. The project manager must also be able to handle new tasks being added and existing tasks being completed. Create a program to simulate this task assignment system. input The input consists of one dataset. The input is given in the following format: N M Q s1 s2 :: sN t1 t2 :: tM QUERY1 QUERY2 :: QUERYQ The first line gives the number of team members N (1 ≤ N ≤ 1000), the number of tasks M (0 ≤ M ≤ 1000), and the number of processing requests Q (0 ≤ Q ≤ 1000). The following N lines provide the integer si (0 ≤ si ≤ 100,000) indicating the skill level of the i-th team member. Team members are numbered 1, 2, ..., N. The following M lines provide the integer ti (0 ≤ ti ≤ 100,000) indicating the minimum skill requirement of the i-th task. Tasks are numbered 1, 2, ..., M. The processing request QUERYi is given in the following Q lines. Processing requests are given in chronological order. There are three types of processing requests: ASSIGN, COMPLETE, and STATUS, and each QUERYi is given in one of the following formats: ASSIGN t Or COMPLETE t Or STATUS - ASSIGN t represents assigning a task with the number t (1 ≤ t ≤ M) to the most suitable available team member who meets the skill requirement. - COMPLETE t represents marking the task with the number t as completed, freeing the team member who was working on it. - STATUS requests an output that lists the current task assignment status of each team member in the format `member_number: task_number`, or `member_number: NONE` if the member is not assigned a task. output At the time of each STATUS request in chronological order, output the current assignments of each team member in the specified format, one per line. Example Input 3 2 5 20 35 15 10 30 ASSIGN 1 ASSIGN 2 STATUS COMPLETE 1 STATUS Output 1: NONE 2: 2 3: 1 1: NONE 2: 2 3: NONE","solution":"def simulate_task_assignment(n, m, q, skills, tasks, queries): # Initialize status of each team member as None member_status = [\'NONE\'] * n task_assigned = [-1] * m # -1 means task is not yet assigned def available_member_for_task(task_min_skill): available_members = [(i, skills[i]) for i in range(n) if member_status[i] == \'NONE\' and skills[i] >= task_min_skill] if not available_members: return None return min(available_members, key=lambda x: x[1])[0] output = [] for query in queries: if query.startswith(\\"ASSIGN\\"): _, t = query.split() t = int(t) - 1 suitable_member = available_member_for_task(tasks[t]) if suitable_member is not None: member_status[suitable_member] = t + 1 task_assigned[t] = suitable_member elif query.startswith(\\"COMPLETE\\"): _, t = query.split() t = int(t) - 1 if task_assigned[t] != -1: member_status[task_assigned[t]] = \'NONE\' task_assigned[t] = -1 elif query == \\"STATUS\\": current_status = [f\\"{i+1}: {member_status[i]}\\" for i in range(n)] output.extend(current_status) return output # Example usage: input_data = [ 3, 2, 5, # N, M, Q [20, 35, 15], # Skills [10, 30], # Tasks [\\"ASSIGN 1\\", \\"ASSIGN 2\\", \\"STATUS\\", \\"COMPLETE 1\\", \\"STATUS\\"] # Queries ] n, m, q = input_data[:3] skills = input_data[3] tasks = input_data[4] queries = input_data[5] result = simulate_task_assignment(n, m, q, skills, tasks, queries) print(\\"n\\".join(result))"},{"question":"Consider a luxury cruise ship with N rooms arranged in a row. Each room has a certain number of luxurious amenities which contribute to its overall luxury level. You are given an array lux[], where lux[i] represents the luxury level of the i-th room. Passengers can select any number of consecutive rooms to stay in, but they want to maximize their experience by choosing rooms with the highest possible sum of luxury levels. Find the maximum sum of luxury levels that can be obtained by selecting a subarray of rooms. If all rooms have non-positive luxury levels, return 0 as the maximum sum. Example 1: Input: N = 5 lux = {-2, 1, -3, 4, -1, 2, 1, -5, 4} Output: 6 Explanation: Select the subarray [4, -1, 2, 1], which has the maximum sum 6. Example 2: Input: N = 4 lux = {-1, -2, -3, -4} Output: 0 Explanation: Since all amenities have negative luxury levels, the maximum sum is 0 by selecting no rooms. Your Task: You do not need to take input or print anything. Your task is to complete the function maxLuxurySum() which takes the value N and the array lux[] as input parameters and returns the maximum sum of luxury levels that can be obtained. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5 -10^4 ≤ lux[i] ≤ 10^4","solution":"def maxLuxurySum(N, lux): Returns the maximum sum of luxury levels that can be obtained by selecting a subarray of rooms. Parameters: N (int): Number of rooms. lux (list): List of luxury levels of the rooms. Returns: int: Maximum sum of luxury levels. max_sum = 0 # Initialize maximum sum as 0, to handle all non-positive lux levels current_sum = 0 for level in lux: current_sum = max(0, current_sum + level) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"# Problem In a small village, there is a unique custom of distributing candies among children. The village chief has a particular way of determining how many candies each child receives. The total number of candies to be distributed, `t`, must be an integer divisible by two specific numbers, `a` and `b`, where `1 <= a, b <= 100`. Additionally, the distribution must follow the rule that the candies are first divided evenly into `k` groups (where `k` is any positive integer). The village judges how well the candies are distributed by ensuring that each group receives the same amount of candies, resulting in zero remainders when divided by both `a` and `b`. Your task is to determine the minimal amount of total candies `t` that can be distributed in such a way that `t` is divisible by both `a` and `b`. # Task You are given two integers `a` and `b`. Your task is to find and return the smallest integer `t` such that `t` is divisible by both `a` and `b`. # Example For `a = 6` and `b = 8`, the output should be `24`. `24` is the smallest number that is divisible by both `6` and `8`. For `a = 15` and `b = 25`, the output should be `75`. `75` is the smallest number that is divisible by both `15` and `25`. # Constraints - `1 <= a, b <= 100` - Write a function named `min_candies` with two parameters `a` and `b` and return an integer representing the smallest number of candies that satisfies the conditions. # Note A solution to this problem involves calculating the Least Common Multiple (LCM) of the two integers. - Happy Coding `^_^`","solution":"import math def min_candies(a, b): Returns the minimal number of candies \'t\' such that \'t\' is divisible by both \'a\' and \'b\'. return abs(a * b) // math.gcd(a, b)"},{"question":"John has a specific way of organizing his photo album. The album contains **n** photos and he wants to arrange them in **k** sections, such that each section contains exactly **s** photos and all the photos in a section have unique tags and those tags should be unique within that section. Additionally, no tag should be repeated in any section. John is concerned if it\'s feasible to organize his photos in this manner. Your task is to help John determine if this desired arrangement is possible. -----Input----- The first line contains a single integer **t** (1 ≤ t ≤ 100) — the number of test cases. The description of the test cases follows. The first line of each test case contains three integers **n**, **k**, **s** (1 ≤ s ≤ n ≤ 10^6), (1 ≤ k ≤ n). Here **n** denotes the total number of photos, **k** denotes the number of sections, and **s** is the number of photos that each section should contain. The second line of each test case contains **n** integers where each integer denoted as **tag[i]** (1 ≤ tag[i] ≤ 10^9) representing the tag of the i-th photo. It is guaranteed that the sum of **n** across all test cases does not exceed 10^7. -----Output----- For each test case, print \\"YES\\" if John can organize the photos as he described; otherwise, print \\"NO\\". You may print each letter in any case (for example, \\"YES\\", \\"Yes\\", \\"yes\\", and \\"yEs\\" will all be recognized as positive answers). -----Examples----- Input 2 9 3 3 1 2 3 4 5 6 7 8 9 6 2 3 1 1 2 2 3 3 Output YES NO -----Note----- In the first test case, John can organize the photos into sections as follows: Section 1: (1, 2, 3) Section 2: (4, 5, 6) Section 3: (7, 8, 9) Each section has unique tags and all sections are formed without repeating any tag across them. In the second test case, it\'s not possible to form the sections since the tags within the sections would not be unique.","solution":"def can_organize_photo_album(t, test_cases): Determines if John can organize the photos as described for each test case. Parameters: t (int): number of test cases test_cases (list): list of test cases, each containing n, k, s, and the list of tags Returns: list: results of each test case, \\"YES\\" or \\"NO\\" results = [] for n, k, s, tags in test_cases: if len(set(tags)) >= k * s: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage: # t = 2 # test_cases = [ # (9, 3, 3, [1, 2, 3, 4, 5, 6, 7, 8, 9]), # (6, 2, 3, [1, 1, 2, 2, 3, 3]) # ] # print(can_organize_photo_album(t, test_cases)) # Output: [\'YES\', \'NO\']"},{"question":"You are given a string S consisting of lowercase English letters. A substring is defined as a contiguous sequence of characters within a string. A substring can be periodic if there exists a positive integer k such that the substring is obtained by repeating a smaller string of length k multiple times (k > 1). For example, \\"ababab\\" is periodic because it can be obtained by repeating \\"ab\\", three times. However, \\"aba\\" is not periodic. Your task is to write a function to determine the length of the longest periodic substring that can be formed from the original string S. Input: The input consists of a single line containing the string S (1 ≤ |S| ≤ 100,000). Output: Output a single integer, the length of the longest periodic substring. If no periodic substring exists, output 0. Constraints: 1≤|S|≤100,000 SAMPLE INPUT ababa SAMPLE OUTPUT 4 Explanation The longest periodic substrings are \\"abab\\" and \\"baba\\", each of length 4, which can be formed by repeating \\"ab\\" or \\"ba\\" respectively. Thus, the output is 4.","solution":"def longest_periodic_substring(S): Returns the length of the longest periodic substring. If no periodic substring exists, returns 0. n = len(S) # Function to check if the given substring is periodic def is_periodic(sub): length = len(sub) for k in range(1, length // 2 + 1): if length % k == 0: if sub[:k] * (length // k) == sub: return True return False max_len = 0 for i in range(n): for j in range(i + 1, n + 1): if is_periodic(S[i:j]): max_len = max(max_len, j - i) return max_len"},{"question":"As a member of the crew on a space exploration mission, you are responsible for managing efficiently the storage of a set of research drones. Each drone has a specific battery size, and the storage system requires that two drones are paired in a specific manner to maximize battery life while ensuring space efficiency. The pair of drones should have their combined battery size match exactly the required battery capacity of the storage compartment. Your task is to write a program that finds all unique pairs of drones whose combined battery size equals the required capacity. Each drone can be used at most once in a pair, and all pairs should be returned in lexicographical order based on the battery sizes of the drones in the pair. -----Input----- The first line of input contains two integers N (2 le N le 1000), the number of drones, and B (1 le B le 10^6), the required battery capacity of the storage compartment. The second line contains N integers d_i (1 le d_i le 10^5) representing the battery sizes of the drones. -----Output----- The output should contain pairs of integers representing the battery sizes of the drones whose combined size equals the required capacity. Each pair should be listed in lexicographical order and separated by spaces. If there are multiple pairs, they should be listed in ascending order based on the first battery size in the pair. If no such pairs exist, output an empty line. -----Examples----- Sample Input 1: 5 10 2 4 6 8 10 Sample Output 1: 2 8 4 6 Sample Input 2: 4 7 3 5 7 4 Sample Output 2: 3 4 Sample Input 3: 3 12 4 4 4 Sample Output 3:","solution":"def find_pairs(n, b, batteries): Finds all unique pairs of drones whose combined battery size equals the required capacity. Returns a list of tuples, where each tuple contains battery sizes of the two drones in lexicographical order. from collections import defaultdict # Dictionary to store the number of occurrences of each battery size battery_count = defaultdict(int) for battery in batteries: battery_count[battery] += 1 # List to store the resulting pairs result = [] # Iterate through each battery size to find pairs for battery in sorted(batteries): complement = b - battery if complement in battery_count: if battery == complement and battery_count[battery] > 1: result.append((battery, complement)) battery_count[battery] -= 2 elif battery != complement and battery_count[battery] > 0 and battery_count[complement] > 0: result.append((battery, complement)) battery_count[battery] -= 1 battery_count[complement] -= 1 # Sort the result pairs lexicographically result = sorted(set(result)) return result"},{"question":"A gardener is planting trees in a rectangular garden of size N × M. The gardener starts in the top-left corner of the garden at cell (1, 1) and can plant a tree in any one of the adjacent cells. The gardener can move to the next cell either 1 cell downwards or 1 cell to the right. The goal for the gardener is to plant a tree in every cell of the garden. Sadly, the gardener is very lazy and decides to only plant trees in one specific path from (1, 1) to (N, M). The gardener calls his strategy \\"Single Path Planting\\". You need to determine the total number of different possible single paths he can take to plant trees from the top-left to the bottom-right corner of the garden. -----Input----- The first line contains an integer T denoting the number of tests. Each of the following T lines contain two integers N and M. -----Output----- For each test output a single integer on a separate line denoting the number of different possible single paths to plant trees from (1, 1) to (N, M). -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N, M ≤ 100 -----Example----- Input: 3 2 2 3 2 3 3 Output: 2 3 6 -----Explanation----- Test case 1: The two different paths from (1, 1) to (2, 2) are: (1, 1) -> (1, 2) -> (2, 2) and (1, 1) -> (2, 1) -> (2, 2). Test case 2: The three different paths from (1, 1) to (3, 2) are: (1, 1) -> (1, 2) -> (2, 2) -> (3, 2), (1, 1) -> (2, 1) -> (2, 2) -> (3, 2), (1, 1) -> (2, 1) -> (3, 1) -> (3, 2). Test case 3: The six different paths from (1, 1) to (3, 3) can be calculated using combinatorial methods, specifically by calculating the binomial coefficient C(N-1+M-1, N-1). In this case, it is C(4, 2) = 6.","solution":"import math def number_of_paths(N, M): Returns the number of different possible single paths from (1, 1) to (N, M) in an N x M grid. # Calculating the number of combinations C(N-1 + M-1, N-1) return math.comb(N + M - 2, N - 1) def single_path_planting(t, test_cases): results = [] for N, M in test_cases: results.append(number_of_paths(N, M)) return results"},{"question":"After a long summer, a nearby lake is experiencing a rapid increase in algae growth. To control this situation, the local environmental agency needs to regularly monitor various sections of the lake. The lake is represented as a 2D grid where each cell can either be land (L) or water (W). To assess the areas, they need to find the number of distinct water bodies in the grid. A water body is defined as a connected region of water cells (\'W\'), connected horizontally or vertically but not diagonally. Write a function `findWaterBodies(grid: List[List[str]]) -> int` to count the number of distinct water bodies in the lake grid. INPUT The function will receive a single argument: - grid: A 2D list containing \'L\' and \'W\' representing land and water, respectively. 0 < len(grid), len(grid[0]) ≤ 100 OUTPUT The function should return an integer representing the number of distinct water bodies. SAMPLE INPUT [ [\\"L\\", \\"W\\", \\"L\\", \\"L\\", \\"W\\"], [\\"L\\", \\"W\\", \\"L\\", \\"W\\", \\"W\\"], [\\"L\\", \\"L\\", \\"L\\", \\"W\\", \\"L\\"], [\\"W\\", \\"W\\", \\"L\\", \\"L\\", \\"L\\"] ] SAMPLE OUTPUT 3 To better understand, the grid has 3 distinct water bodies: - The first water body is formed by the top left \'W\' cells. - The second water body is formed by the bottom left \'W\' cells. - The third and largest water body is formed by the \'W\' cells in the top right and center right.","solution":"def findWaterBodies(grid): if not grid: return 0 rows = len(grid) cols = len(grid[0]) def dfs(r, c): if r < 0 or r >= rows or c < 0 or c >= cols or grid[r][c] == \'L\': return grid[r][c] = \'L\' # Mark as visited directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] for dr, dc in directions: dfs(r + dr, c + dc) water_bodies = 0 for r in range(rows): for c in range(cols): if grid[r][c] == \'W\': water_bodies += 1 dfs(r, c) return water_bodies"},{"question":"Dr. Hex has invented a new musical instrument called the Hexaphone, which can play a sequence of notes through a unique hexagonal pattern of keys. The Hexaphone can be programmed to play a melody by entering a series of numerical notes, each represented by an integer between 1 and N. However, due to a design flaw, the instrument can only change notes a limited number of times per melody. Given the total number of notes in the melody and the maximum allowed changes in the sequence, determine the minimum length of the melody such that the Hexaphone can still play the entire melody by changing notes no more than the allowed number of times. A note change is defined as moving from one note to another different note. Hence, playing the same note continuously does not count as a change. ------ Input Format ------ - The first line contains an integer T, the number of test cases. Then the test cases follow. - Each test case contains two integers: M, the total number of different notes in the melody, and K, the maximum allowed number of changes. ------ Output Format ------ For each test case, output a single integer: the minimum length of the melody that can be played without exceeding the allowed number of changes. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ M, K ≤ 100 ------ Sample Input 1 ------ 3 5 2 7 3 4 0 ------ Sample Output 1 ------ 3 4 1 ------ Explanation 1 ------ Test Case 1: With 5 notes and a maximum of 2 changes, the minimum melody length is 3 (e.g., 1, 2, 3). Test Case 2: With 7 notes and a maximum of 3 changes, the minimum melody length is 4 (e.g., 1, 2, 3, 4). Test Case 3: With 4 notes and no changes allowed, the melody can only have a single note repeated, so the minimum melody length is 1.","solution":"def min_melody_length(M, K): Given the total number of different notes M and the maximum allowed number of changes K, returns the minimum length of the melody that can be played without exceeding the allowed number of changes. if K == 0: return 1 return min(M, K + 1) def solve_hexaphone(T, test_cases): results = [] for M, K in test_cases: results.append(min_melody_length(M, K)) return results"},{"question":"Write a Python program to determine if a given string can be rearranged to form a palindrome. A palindrome is a string that reads the same backwards as forwards. Example 1: Input: \\"civic\\" Output: \\"Yes\\" Explanation: The string \\"civic\\" is a palindrome. Example 2: Input: \\"ivicc\\" Output: \\"Yes\\" Explanation: The string \\"ivicc\\" can be rearranged to form the palindrome \\"civic\\". Example 3: Input: \\"hello\\" Output: \\"No\\" Explanation: The string \\"hello\\" cannot be rearranged to form a palindrome. Your Task: You don\'t need to read input or print anything. Complete the function canFormPalindrome() which takes a string as input parameter and returns \\"Yes\\" if the string can be rearranged to form a palindrome, otherwise returns \\"No\\". Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= len(string) <= 10^{5}","solution":"def canFormPalindrome(s): Determine if a given string can be rearranged to form a palindrome. :param s: The input string :return: \\"Yes\\" if the string can be rearranged to form a palindrome, else \\"No\\" from collections import Counter # Count the occurrences of each character char_count = Counter(s) # A string can be rearranged into a palindrome if at most one character # has an odd count (for the middle of the palindrome) odd_count = sum(1 for count in char_count.values() if count % 2 == 1) return \\"Yes\\" if odd_count <= 1 else \\"No\\""},{"question":"Given an array of integers `nums` and an integer `k`, return the maximum sum of any continuous subarray of size `k`. If there is no subarray of size `k`, return 0. Example 1: Input: nums = [1, 2, 3, 4, 5], k = 2 Output: 9 Explanation: The continuous subarray of size 2 with maximum sum is [4, 5] with sum 9. Example 2: Input: nums = [2, 1, 5, 10, 3], k = 3 Output: 18 Explanation: The continuous subarray of size 3 with maximum sum is [5, 10, 3] with sum 18. Example 3: Input: nums = [1, 2, 3], k = 5 Output: 0 Explanation: There is no subarray of size 5, hence return 0. Constraints: - 1 <= nums.length <= 10^5 - -10^4 <= nums[i] <= 10^4 - 1 <= k <= nums.length","solution":"def max_sum_subarray(nums, k): if len(nums) < k: return 0 # Initial sum of first subarray of size k max_sum = curr_sum = sum(nums[:k]) # Use sliding window to find max subarray sum for i in range(k, len(nums)): curr_sum += nums[i] - nums[i - k] if curr_sum > max_sum: max_sum = curr_sum return max_sum"},{"question":"In a factory, you have two types of machines: type A and type B. Both machines produce identical parts, but at different rates. Type A produces `x` parts per hour, and type B produces `y` parts per hour. The factory has `n` type A machines and `m` type B machines. Your goal is to determine how long it will take to produce exactly `k` parts using these machines. You can assume each machine can work independently and continuously. -----Input----- The first line of input contains a single integer `t` (1 leq t leq 100) — the number of test cases. The next `t` lines each contain five integers `n`, `m`, `x`, `y`, and `k` (1 leq n, m leq 1000; 1 leq x, y leq 1000; 1 leq k leq 10^6) — representing the number of type A machines, type B machines, the hourly production rate of type A machines, the hourly production rate of type B machines, and the required number of parts respectively. -----Output----- For each test case, print a single integer — the minimum number of hours required to produce exactly `k` parts. -----Examples----- Input 3 3 2 5 4 100 1 1 10 10 50 10 5 2 3 60 Output 5 5 12 -----Explanation----- In the first test case, we can use 3 type A machines and 2 type B machines to produce parts. Type A machines produce 3 * 5 = 15 parts/hour, and type B machines produce 2 * 4 = 8 parts/hour. Therefore, the factory produces a total of 23 parts per hour. Hence, it will take approximately 100 / 23 = 4.35 hours, which we round up to 5 hours to meet the exact number of parts required. In the second test case, both types of machines produce 10 parts/hour each. Hence, in total, they produce 20 parts per hour. Thus, to produce 50 parts, it will take exactly 50 / 20 = 2.5 hours, which rounds up to 3 hours. In the third test case, using 10 type A machines and 5 type B machines, the production rates are 10 * 2 = 20 parts/hour and 5 * 3 = 15 parts/hour respectively. Thus, the total production rate is 35 parts per hour. Therefore, it will take approximately 60 / 35 = 1.71 hours, which we round up to 2 hours to produce the exact number of parts needed.","solution":"import math def min_hours_to_produce_parts(n, m, x, y, k): # Calculate total production rate total_rate = n * x + m * y # Calculate the minimum number of hours required to produce exactly k parts return math.ceil(k / total_rate) def process_test_cases(t, test_cases): results = [] for case in test_cases: n, m, x, y, k = case results.append(min_hours_to_produce_parts(n, m, x, y, k)) return results"},{"question":"A group of friends are playing a game where each friend has a score. They want to find out which friend has the highest score. However, if multiple friends have the highest score, they should find the friend who reached that score first. Input The first line of the input contains a single integer, N, representing the number of friends. The next line contains N space-separated integers, S1, S2, ..., SN, denoting the scores of each friend. Output Print a single integer, denoting the index (1-based) of the friend with the highest score. If multiple friends have the highest score, print the index of the friend who reached that score first. Constraints 1 ≤ N ≤ 1000 0 ≤ Si ≤ 10000 Example Input: 5 100 200 200 150 100 Output: 2 Explanation Out of the scores, the highest score is 200. The friends with the highest score are at indices 2 and 3. Since friend at index 2 reached the highest score first, the output is 2.","solution":"def highest_score_first_index(scores): Returns the 1-based index of the friend with the highest score, considering the friend who reached that score first in case of a tie. highest_score = -1 highest_index = -1 for i in range(len(scores)): if scores[i] > highest_score: highest_score = scores[i] highest_index = i return highest_index + 1"},{"question":"Jason is training for a marathon and he plans to run a specific number of days, varying his running distance each day. To better track his progress, Jason wants to compute some overall statistics of his runs. Your task is to determine the total distance run, the maximum distance run in a single day, and the first day on which Jason ran the maximum distance. -----Input----- The input begins with an integer n (1 ≤ n ≤ 10^5) — the number of days Jason has recorded his running distance. The following line contains n non-negative integers, where the i-th integer represents the distance in kilometers that Jason ran on the i-th day (0 ≤ distance ≤ 10^4). -----Output----- Print three space-separated integers: 1. The total distance run by Jason over all days. 2. The maximum distance run in a single day. 3. The one-based index of the first day Jason ran the maximum distance. -----Examples----- Input 5 3 7 2 7 5 Output 24 7 2 Input 4 5 5 5 5 Output 20 5 1 -----Note----- In the first example, Jason ran a total of 24 kilometers over 5 days. The maximum single-day distance was 7 kilometers, which he first ran on the second day. In the second example, Jason ran 20 kilometers over 4 days. The maximum distance he ran in a single day was 5 kilometers, and he first achieved this on the first day.","solution":"def running_statistics(n, distances): Returns the total distance run by Jason, the maximum distance run in a single day, and the one-based index of the first day Jason ran the maximum distance. Parameters: n (int): the number of days distances (list of int): the distances run each day Returns: tuple: total distance, max distance, first day of max distance total_distance = sum(distances) max_distance = max(distances) first_max_index = distances.index(max_distance) + 1 # converting to one-based index return total_distance, max_distance, first_max_index"},{"question":"Write a function that accepts an array of integers and a target integer. The function should find and return all unique quadruplets `[a, b, c, d]` in the array that add up to the target integer. The solution set must not contain duplicate quadruplets. ```python four_sum([1, 0, -1, 0, -2, 2], 0) should return [[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]] four_sum([2, 2, 2, 2, 2], 8) should return [[2, 2, 2, 2]] ``` **Constraints:** - The array length can be between 1 and 200. - Each integer in the array is between `-10^9` and `10^9`. - The target integer is also between `-10^9` and `10^9`. Consider edge cases and optimize your solution for time complexity.","solution":"def four_sum(nums, target): Find all unique quadruplets in the array which gives the sum of target. Args: nums: List[int] - List of integers. target: int - The target sum for quadruplets. Returns: List[List[int]] - List of unique quadruplets that add up to the target. nums.sort() # Sort the array to help with skipping duplicates quadruplets = [] n = len(nums) for i in range(n - 3): if i > 0 and nums[i] == nums[i - 1]: continue # Skip duplicates for i for j in range(i + 1, n - 2): if j > i + 1 and nums[j] == nums[j - 1]: continue # Skip duplicates for j left, right = j + 1, n - 1 while left < right: total = nums[i] + nums[j] + nums[left] + nums[right] if total == target: quadruplets.append([nums[i], nums[j], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif total < target: left += 1 else: right -= 1 return quadruplets"},{"question":"Lucas is a young software developer working on a series of projects. For each project, he needs to review the progress and identify any potential issues. There are N projects, and for each project, Lucas has collected the number of issues reported during its development in an integer list B of length N, where B[i] represents the number of issues for the ith project. Lucas plans to analyze the progress of certain projects by calculating the maximum difference in the number of issues reported over a specific range. The analysis is performed through the following steps: 1. Choose an arbitrary period defined by two positive integers L and R, which represent the starting and ending projects, respectively. 2. Identify the maximum and minimum number of issues reported within the projects from L to R (inclusive). 3. Calculate the difference between the maximum and minimum number of issues. -----Input----- The first line contains one integer N — the number of projects Lucas is working on. The second line contains N integers — list B of issues reported for each project. The third line contains one integer Q — the number of queries Lucas has. Each of the following Q lines contains two integers L and R describing each query. -----Output----- For each query, output one integer — the maximum difference in the number of issues within the given range. -----Constraints----- - 1 ≤ N, Q ≤ 5*104 - 0 ≤ B[i] ≤ 106 -----Subtasks----- - Subtask 1 (19 points) 1 ≤ N, Q ≤ 200, time limit = 2 sec - Subtask 2 (31 points) 1 ≤ N, Q ≤ 10 000, time limit = 2 sec - Subtask 3 (26 points) 0 ≤ B[i] ≤ 100, time limit = 5 sec - Subtask 4 (24 points) no additional constraints, time limit = 5 sec -----Example----- Input: 6 5 3 8 6 7 2 4 1 6 2 4 3 5 1 3 Output: 6 5 2 5 Explanation: The first query: Maximum number of issues is 8 and minimum number of issues is 2 resulting in a difference of 6. The second query: Maximum number of issues is 8 and minimum number of issues is 3 resulting in a difference of 5. The third query: Maximum number of issues is 8 and minimum number of issues is 6 resulting in a difference of 2. The fourth query: Maximum number of issues is 8 and minimum number of issues is 3 resulting in a difference of 5.","solution":"def calculate_max_difference(n, B, queries): Calculates the maximum difference in the number of issues reported for given ranges. Parameters: n (int): Number of projects. B (list of int): List of number of issues reported for each project. queries (list of tuples): List of queries, where each query is a tuple (L, R). Returns: list of int: List of maximum differences for each query. differences = [] for L, R in queries: max_issues = max(B[L-1:R]) min_issues = min(B[L-1:R]) differences.append(max_issues - min_issues) return differences"},{"question":"In a prestigious university\'s annual coding competition, each team is given a robotic task management challenge that consists of arranging a set of tasks to minimize the total energy consumption. Each task has a specific energy requirement, and the goal is to complete all the tasks with the minimal cumulative energy. The challenge rules specify that certain tasks must be performed immediately if they are marked as high priority. If a task is marked as high priority, it must be completed before any other tasks are started. The team must then decide the optimal order for the remaining tasks to achieve the lowest possible energy consumption. ---Input--- The input consists of multiple lines: The first line contains two integers, N and p, where 2 leq N leq 20 is the number of tasks, and 0 leq p leq N-1 is the 0-based index of the high priority task that must be performed first. The second line contains N integers, each in the range of 1 to 1000, which represent the energy required to complete each task. The order of these integers corresponds to the task indices. ---Output--- Print the minimal total energy required to complete all tasks in the required order. The first task must always be the high priority task indexed at p. ---Example--- Sample Input 1: 5 2 50 30 20 10 40 Sample Output 1: 150 Sample Input 2: 4 1 100 50 30 20 Sample Output 2: 200 Sample Input 3: 3 0 60 30 10 Sample Output 3: 100 (Note: The order of execution after the high priority task can significantly affect the eventual energy consumption, and the task with the lowest energy requirements should be done sequentially afterwards to minimize the cumulative energy.) Given the above problem, participants are expected to determine the optimal sequence for the remaining tasks after addressing the high priority task to achieve the minimal total energy consumption, showcasing their problem-solving skills and understanding of sequence optimization in computational tasks.","solution":"def minimal_energy(tasks, priority_index): Calculate the minimal total energy required to complete the tasks in the required order. Parameters: tasks (list): The list of energy for each task. priority_index (int): The index of the high priority task. Returns: int: The minimal total energy required. # Extract the high priority task priority_task = tasks[priority_index] # Get the remaining tasks by excluding the high priority task remaining_tasks = tasks[:priority_index] + tasks[priority_index+1:] # Sort the remaining tasks in ascending order to minimize cumulative energy remaining_tasks.sort() # Calculate the total minimal energy required total_energy = priority_task + sum(remaining_tasks) return total_energy # Example usage print(minimal_energy([50, 30, 20, 10, 40], 2)) # Output: 150 print(minimal_energy([100, 50, 30, 20], 1)) # Output: 200 print(minimal_energy([60, 30, 10], 0)) # Output: 100"},{"question":"Python: Validate IP Address problem You are tasked with writing a function that validates whether a given string is a valid IPv4 address. An IPv4 address is represented as four decimal numbers separated by dots, where each decimal number (called an octet) can have a value between 0 and 255, inclusive. # Input Format - A single string representing the IP address. # Constraints - The input string will have a length from 1 to 15. - The input string will contain only digits and dots. # Output Format - Return `True` if the input string is a valid IPv4 address, otherwise return `False`. # Examples Example 1 **Input:** \\"192.168.0.1\\" **Output:** True **Explanation:** Each octet is within the range [0, 255], and there are exactly four octets. Example 2 **Input:** \\"256.300.789.0\\" **Output:** False **Explanation:** The numbers 256, 300, and 789 are not within the valid range of [0, 255]. Example 3 **Input:** \\"192.168.oops.1\\" **Output:** False **Explanation:** The string contains non-digit characters. Example 4 **Input:** \\"192.168.0\\" **Output:** False **Explanation:** There are only three octets, instead of four. Example 5 **Input:** \\"192.168.0.01\\" **Output:** False **Explanation:** Octet \\"01\\" is not valid because each octet should not have leading zeros, unless it is \\"0\\". # Function Signature ```python def validate_ip(ip: str) -> bool: pass ```","solution":"def validate_ip(ip: str) -> bool: Validates whether a given string is a valid IPv4 address. Parameters: ip (str): The input string representing the IP address. Returns: bool: True if the input string is a valid IPv4 address, otherwise False. # Split the input string by dots parts = ip.split(\'.\') # Check if there are exactly four parts if len(parts) != 4: return False for part in parts: # Check if part is a digit if not part.isdigit(): return False # Check if the part is in the range 0 to 255 if not (0 <= int(part) <= 255): return False # Check for leading zeros in non-zero numbers if part != \'0\' and part.startswith(\'0\'): return False return True"},{"question":"Alice loves playing with numbers. One day, she came up with an interesting game involving arrays. Given an array of N integers (both positive and negative) where N is always an even number, she defined the following game: In a single move, Alice can select any two different indices i and j where 1 ≤ i, j ≤ N, and set: - A[i] := A[i] + A[j] - A[j] := A[j] - A[j] The goal of the game is to find if it\'s possible to make all the elements of the array equal to zero by performing a finite number of moves. ------ Input Format ------ - The first line of input contains a single integer T, the number of test cases. - Each test case begins with a line containing a single integer N, the size of the array. - The next line contains N space-separated integers, representing the elements of the array. ------ Output Format ------ For each test case, print \\"YES\\" if it\'s possible to make all the elements of the array equal to zero, otherwise print \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 10^{4} 2 ≤ N ≤ 100 -10^9 ≤ A[i] ≤ 10^9 N % 2 = 0 ------ Sample Input 1 ------ 5 4 1 2 3 4 2 -1 1 6 1 -1 2 -2 3 -3 6 10 20 -10 -20 30 -30 2 1000000000 -1000000000 ------ Sample Output 1 ------ NO YES YES YES YES ------ Explanation 1 ------ Test case 1: It is not possible to make all elements zero using any sequence of moves. Test case 2: By choosing i=1 and j=2, A[1]= A[1] + A[2] = -1 + 1 = 0, and A[2] = A[2] - A[2] = 1 - 1 = 0, we can make all elements zero in one move. Test case 3: By choosing pairs (1,2), (3,4), (5,6), we can make all elements zero. Test case 4: By choosing pairs (1,3), (2,4), (5,6), we can make all elements zero. Test case 5: By choosing pairs (1,2), we can make all elements zero in one move.","solution":"def can_make_zero(T, test_cases): results = [] for i in range(T): N, arr = test_cases[i] if sum(arr) == 0: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"In a computer network, we often need to determine the optimal paths between nodes to ensure efficient data transmission. For this problem, you will be working with a simplified version of such a network represented as a weighted undirected graph. Each node is labeled with an integer, and each edge has an associated non-negative weight. You are given a list of edges, where each edge connects two nodes along with its weight. Your task is to find the shortest path between two specified nodes using Dijkstra’s algorithm. If there is no path between the nodes, return -1. -----Input----- The first line contains three integers, n (number of nodes, 1 leq n leq 1000), m (number of edges, 1 leq m leq 10000), and k (number of path queries, 1 leq k leq 100). The following m lines each contain three integers u, v, and w representing an edge between nodes u and v with weight w (1 leq u, v leq n, 0 leq w leq 1000). The next k lines each contain two integers a and b representing a query for the shortest path between nodes a and b. -----Output----- For each query, output a single line containing the length of the shortest path between nodes a and b. If no path exists, output -1. -----Examples----- Sample Input 1: 5 6 2 1 2 2 1 3 4 2 3 1 2 4 7 3 5 3 4 5 1 1 5 4 5 Sample Output 1: 6 1 Sample Input 2: 4 4 1 1 2 3 1 3 1 3 4 2 2 4 5 1 4 Sample Output 2: 3","solution":"import heapq def dijkstra(graph, start, end): Function to find the shortest path between start and end using Dijkstra\'s algorithm. If no path exists, returns -1. n = len(graph) distances = [float(\'inf\')] * (n + 1) distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances[end] if distances[end] != float(\'inf\') else -1 def find_shortest_paths(n, m, k, edges, queries): Function to handle multiple path queries on the given network. Returns list of shortest path distances for each query. graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) results = [] for a, b in queries: result = dijkstra(graph, a, b) results.append(result) return results"},{"question":"Given an array of n integers where each value represents the height of a bridge segment. Your goal is to find the maximum number of contiguous bridge segments you can walk across while maintaining a downward or flat path. In other words, you should never step onto a bridge segment that is higher than the previous one. Example 1: Input N = 7 A[] = {5, 3, 3, 2, 4, 2, 1} Output 4 Explanation Starting from the first segment: - We can walk 3 -> 3 -> 2 forming a contiguous downward path. - If we start from 4, we can walk 4 -> 2 -> 1 forming another downward path. - The longest path has 4 segments. Example 2: Input N = 5 A[] = {1, 2, 3, 4, 5} Output 1 Explanation As the bridge heights are consecutively increasing, the longest contiguous path that does not ascend is just any single segment itself. Your Task: You don\'t need to print anything, printing is done by the driver code itself. You need to complete the function maxDownwardPath() which takes the array A[] and its size N as inputs and returns the maximum number of contiguous downward or flat bridge segments. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5 1 ≤ A[i] ≤ 10^9","solution":"def maxDownwardPath(N, A): Returns the maximum number of contiguous downward or flat bridge segments. if N == 0: return 0 max_length = 1 current_length = 1 for i in range(1, N): if A[i] <= A[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"Write a function `findSecondLargest` that takes a list of integers and returns the second largest integer in the list. If the list has fewer than 2 unique integers, return `None`. Examples: ``` findSecondLargest([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) -> 6 findSecondLargest([1, 2, 3, 4, 5]) -> 4 findSecondLargest([5, 5, 5]) -> None ```","solution":"def findSecondLargest(nums): Returns the second largest integer in the list. If the list has fewer than 2 unique integers, return None. if len(nums) < 2: return None first = second = float(\'-inf\') seen = set() for num in nums: if num not in seen: seen.add(num) if num > first: first, second = num, first elif num > second: second = num return second if second != float(\'-inf\') else None"},{"question":"John and Jane are playing a game with a sequence of integers. John starts from the left end of the sequence, while Jane starts from the right end. They both take turns picking the largest possible number from their respective ends and adding it to their own score. John takes his turn first. The game continues until there are no more numbers left in the sequence. Your task is to determine the final scores of both John and Jane. -----Input:----- - First line will contain an integer T, the number of test cases. - Each test case consists of: - A single line containing an integer N, the number of integers in the sequence. - A single line containing N integers A_1, A_2, ldots, A_N, the sequence of integers. -----Output:----- For each test case, print two space-separated integers in a new line — the final scores of John and Jane respectively. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 100000 - 1 leq A_i leq 1000000 -----Sample Input:----- 1 5 1 2 3 4 5 -----Sample Output:----- 9 6 -----Explanation:----- In the first turn, John picks 5. In the second turn, Jane picks 4. In the third turn, John picks 3. In the fourth turn, Jane picks 2. In the final turn, John picks 1. Thus, John\'s final score is 5 + 3 + 1 = 9, and Jane\'s final score is 4 + 2 = 6.","solution":"def calculate_scores(t, test_cases): results = [] for case in test_cases: n, sequence = case john, jane = 0, 0 left, right = 0, n - 1 turn = 0 # 0 for John, 1 for Jane while left <= right: if sequence[left] > sequence[right]: if turn == 0: john += sequence[left] else: jane += sequence[left] left += 1 else: if turn == 0: john += sequence[right] else: jane += sequence[right] right -= 1 turn = 1 - turn results.append(f\\"{john} {jane}\\") return results def process_input(input_data): lines = input_data.strip().split() index = 0 t = int(lines[index]) index += 1 test_cases = [] for _ in range(t): n = int(lines[index]) index += 1 sequence = list(map(int, lines[index:index + n])) index += n test_cases.append((n, sequence)) return t, test_cases # Add this main function to handle the input and output when running the script if __name__ == \\"__main__\\": import sys input_data = sys.stdin.read() t, test_cases = process_input(input_data) results = calculate_scores(t, test_cases) for result in results: print(result)"},{"question":"You are given an array of integers, each representing the height of a person. You need to arrange the heights in such a way that the heights of the individuals alternate in an increasing-decreasing order. In other words, each height should be either greater than the next one or less than the next one in an alternating fashion. Example 1: Input: arr = [5, 1, 3, 2, 4] Output: [1, 5, 2, 4, 3] Explanation: The array is reordered to satisfy the condition 1 < 5 > 2 < 4 > 3. Example 2: Input: arr = [8, 6, 4, 2, 10] Output: [4, 8, 2, 10, 6] Explanation: The array is reordered to satisfy the condition 4 < 8 > 2 < 10 > 6. Your Task: You need not take any input or print anything. Your task is to complete the function alternateOrder() which takes an array of integers arr as input parameter and returns the array reordered in the alternating increasing-decreasing fashion. Expected Time Complexity: O(n log n) Expected Auxiliary Space: O(n) Constraints: 1 ≤ length of array ≤ 10^5 1 ≤ arr[i] ≤ 10^5","solution":"def alternateOrder(arr): This function takes an array of integers representing heights and arranges them in an alternating increasing-decreasing order fashion. Parameters: arr (list[int]): The array of integers representing heights. Returns: list[int]: The array reordered to alternate between increasing and decreasing heights. arr.sort() result = [] left, right = 0, len(arr) - 1 while left <= right: if left != right: result.append(arr[left]) result.append(arr[right]) else: result.append(arr[left]) left += 1 right -= 1 return result"},{"question":"# Problem Statement: You are given an array of integers representing hills, where each integer denotes the height of a hill. A hiker can hike up each hill, but must come down by no more than a specified elevation drop `d` before reaching the next hill in the sequence. Your task is to determine if the given sequence of hills can be hiked according to this rule. Write a function `can_hike_up_and_down(hills: List[int], d: int) -> bool` that takes: 1. A list of integers, `hills`, representing the heights of hills in the hike sequence. 2. An integer `d`, representing the maximum elevation drop allowed between two consecutive hills. The function should return a boolean value `True` if the hike is possible according to the rule, and `False` otherwise. Input - `hills` - List of integers where 1 ≤ |hills| ≤ 100, and each integer is between 0 and 1000. - `d` - An integer where 1 ≤ d ≤ 1000. Output - Return `True` if the hiker can complete the hike following the rule, `False` otherwise. Examples Example 1: ``` Input: hills = [10, 20, 15, 25, 10] d = 10 Output: True Explanation: The hiker can go from 10 -> 20 (uphill), 20 -> 15 (downhill, difference is 5 which is ≤ 10), 15 -> 25 (uphill), 25 -> 10 (downhill, difference is 15 which is > 10). Therefore, False. ``` Example 2: ``` Input: hills = [5, 10, 8] d = 3 Output: True Explanation: The hiker can go from 5 -> 10 (uphill), 10 -> 8 (downhill, difference is 2 which is ≤ 3). Therefore, True. ``` Example 3: ``` Input: hills = [1, 3, 1, 3, 1] d = 2 Output: True Explanation: The hiker can move from 1 -> 3 (uphill), 3 -> 1 (downhill, difference is 2 which is ≤ 2), 1 -> 3 (uphill), 3 -> 1 (downhill, difference is 2 which is ≤ 2). Therefore, True. ``` # Constraints - Consider edge cases where the number of hills is minimum (1). - Consider edge cases where the allowed elevation drop is minimum (1). Note - Aim for efficient solutions, though a simple linear scan of the list is sufficient given the input constraints.","solution":"def can_hike_up_and_down(hills, d): Determines if the sequence of hills can be hiked with each downhill elevation drop not exceeding the given limit d. Parameters: hills (List[int]): A list of integers representing the heights of the hills. d (int): The maximum allowed elevation drop between consecutive hills. Returns: bool: True if the hike is valid, False otherwise. for i in range(1, len(hills)): if hills[i-1] > hills[i] and (hills[i-1] - hills[i] > d): return False return True"},{"question":"A warehouse maintains an inventory of N items, where each item is represented as a tuple (item_id, item_price). The inventory is stored in a list of such tuples. The task is to reorder the inventory in-place based on the item_price in descending order. In the case where two items have the same price, their order in the inventory should remain the same as their original order. Implement the function reorderInventory() that takes the inventory list as input and modifies it to satisfy the above condition. Example 1: Input: inventory = [(1001, 50), (1002, 40), (1003, 50), (1004, 60)] Output: [(1004, 60), (1001, 50), (1003, 50), (1002, 40)] Explanation: The inventory is sorted based on decreasing order of item_price. Among items with the same price, their original order is maintained. Example 2: Input: inventory = [(1001, 30), (1002, 20)] Output: [(1001, 30), (1002, 20)] Explanation: The inventory remains the same as it is already sorted in descending order of item_price. Your Task: You don\'t need to read or print anything. Your task is to complete the function reorderInventory() which takes the list of inventory items as input and modifies it in-place to sort the items in descending order of item_price. Expected Time Complexity: O(N log N) Expected Space Complexity: O(1) Constraints 1 ≤ N ≤ 10^5 1 ≤ item_price ≤ 10^5","solution":"def reorderInventory(inventory): Reorders the inventory in-place based on the item_price in descending order. If two items have the same price, their order remains the same. Args: inventory (list): List of tuples, where each tuple contains (item_id, item_price). Returns: None: Modifies the inventory list in-place. # Sort the list in-place by the item_price in descending order inventory.sort(key=lambda x: x[1], reverse=True)"},{"question":"In a certain game, there is a circular arrangement of N stones, each stone having a certain weight. You have to pick a subset of consecutive stones such that the sum of the selected stones is maximized. Constraints: - 1 leq N leq 1000 - Each stone\'s weight is an integer between -1000 and 1000 Input Input is given from Standard Input in the following format: ``` N w1 w2 w3 ... wN ``` Output Print the maximum possible sum of a subset of consecutive stones. Examples Input ``` 5 1 -2 3 4 -1 ``` Output ``` 7 ``` Input ``` 6 -5 -1 -8 9 14 -3 ``` Output ``` 23 ``` Input ``` 3 -3 -2 -1 ``` Output ``` -1 ```","solution":"def max_subarray_sum_circular(arr): Function to find the maximum possible sum of a subset of consecutive stones in circular arrangement. Parameters: arr (list): List of integers representing weights of stones. Returns: int: Maximum possible sum of a subset of consecutive stones. def kadane(nums): max_ending_here = max_so_far = nums[0] for x in nums[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far N = len(arr) max_kadane = kadane(arr) max_wrap = sum(arr) + kadane([-x for x in arr]) if max_wrap == 0: return max_kadane return max(max_kadane, max_wrap)"},{"question":"You have been hired by a theme park to manage ticket sales. The park issues tickets with unique serial numbers, and you need to validate these serial numbers to ensure legitimacy before selling them. A valid ticket serial number is defined as follows: - It is a string of length n where 1 leq n leq 100. - It must contain exactly one upper-case English letter (\'A\'-\'Z\'). - It must contain at least one digit (\'0\'-\'9\'). - It must contain only alphanumeric characters (letters and digits). Write a program to check if a given ticket serial number is valid based on the above criteria. -----Input----- The input consists of a single line containing a string s representing the ticket serial number. -----Output----- Output \\"VALID\\" if the ticket serial number is valid. Otherwise, output \\"INVALID\\". -----Examples----- Input A1b2c3 Output VALID Input abc123 Output INVALID Input XYZ1234 Output INVALID Input A12345 Output VALID -----Note----- In the first example, the serial number contains one upper-case letter \'A\', digits, and alphanumeric characters, so it is valid. In the second example, the serial number does not contain any upper-case letters, so it is invalid. In the third example, the serial number contains multiple upper-case letters, so it is invalid. In the fourth example, the serial number contains one upper-case letter \'A\' and digits, so it is valid.","solution":"def validate_ticket_serial(serial): Validates a ticket serial number based on the given criteria. - It must contain exactly one upper-case English letter (\'A\'-\'Z\'). - It must contain at least one digit (\'0\'-\'9\'). - It must contain only alphanumeric characters (letters and digits). if not (1 <= len(serial) <= 100): return \\"INVALID\\" num_upper = sum(1 for c in serial if c.isupper()) contains_digit = any(c.isdigit() for c in serial) is_alphanumeric = serial.isalnum() if num_upper == 1 and contains_digit and is_alphanumeric: return \\"VALID\\" else: return \\"INVALID\\""},{"question":"John loves playing with numbers and has recently discovered an interesting game. The game involves manipulating an integer array using a sequence of operations of his choice. The objective is, given an integer array `arr` of length `n`, to perform a series of `q` queries on the array. Each query is defined as either an update to the array or a retrieval of the current maximum value in a given subarray. There are two types of queries: 1. `U x y` - Update the element at position `x` in the array to `y`. 2. `Q l r` - Retrieve and print the maximum value in the subarray from index `l` to index `r` (inclusive). Your task is to help John implement this game efficiently. -----Input----- The first line contains two integers `n` (1 ≤ n ≤ 100 000) and `q` (1 ≤ q ≤ 100 000) — the length of the array and the number of queries, respectively. The second line contains `n` space-separated integers, representing the initial values of the array. The next `q` lines contain one of the two types of queries. - The `U x y` query is defined by the character `U`, followed by two integers `x` and `y` (1 ≤ x ≤ n, 1 ≤ y ≤ 10^9), indicating that you should update the `x`-th element of the array to `y`. - The `Q l r` query is defined by the character `Q`, followed by two integers `l` and `r` (1 ≤ l ≤ r ≤ n), indicating that you should retrieve the maximum value in the subarray from index `l` to index `r` (inclusive). -----Output----- For each `Q l r` query, print the result on a new line. -----Examples----- Input 5 5 1 2 3 4 5 Q 1 3 U 2 10 Q 1 3 U 3 7 Q 2 5 Output 3 10 10 -----Note----- In the first query, the maximum value in the subarray [1, 2, 3] is `3`. After the first update, the array becomes [1, 10, 3, 4, 5]. In the second query, the maximum value in the subarray [1, 10, 3] is `10`. After the second update, the array becomes [1, 10, 7, 4, 5]. In the third query, the maximum value in the subarray [10, 7, 4, 5] is `10`.","solution":"class SegmentTree: def __init__(self, data): n = len(data) self.n = n self.data = data self.tree = [0] * (2 * n) self.build() def build(self): # Initialize leaves for i in range(self.n): self.tree[self.n + i] = self.data[i] # Initialize internal nodes for i in range(self.n - 1, 0, -1): self.tree[i] = max(self.tree[i * 2], self.tree[i * 2 + 1]) def update(self, idx, value): idx += self.n self.tree[idx] = value while idx > 1: idx //= 2 self.tree[idx] = max(self.tree[2 * idx], self.tree[2 * idx + 1]) def query(self, l, r): res = float(\'-inf\') l += self.n r += self.n while l < r: if l % 2 == 1: res = max(res, self.tree[l]) l += 1 if r % 2 == 1: r -= 1 res = max(res, self.tree[r]) l //= 2 r //= 2 return res def process_queries(n, q, arr, queries): st = SegmentTree(arr) results = [] for query in queries: if query[0] == \'U\': _, x, y = query st.update(x - 1, y) elif query[0] == \'Q\': _, l, r = query results.append(st.query(l - 1, r)) return results"},{"question":"Here\'s the new question that matches the style and complexity of the given sample question: Detective, we have an emergency! We intercepted a series of encrypted messages from the Barksdale Organization, and it seems they have changed their encryption method. This time, the numbers are encoded using a Caesar cipher with a shift of 3. That means each digit is shifted to the right by 3 positions, with wrapping. For example, \'2\' would be replaced by \'5\', \'7\' would be replaced by \'0\', and so on. Here\'s a shifted keypad for visualization: ``` ┌───┬───┬───┐ │ 1 │ 2 │ 3 │ ├───┼───┼───┤ │ 4 │ 5 │ 6 │ ├───┼───┼───┤ │ 7 │ 8 │ 9 │ └───┼───┼───┘ │ 0 │ └───┘ ``` shifts to: ``` ┌───┬───┬───┐ │ 4 │ 5 │ 6 │ ├───┼───┼───┤ │ 7 │ 8 │ 9 │ ├───┼───┼───┤ │ 0 │ 1 │ 2 │ └───┼───┼───┘ │ 3 │ └───┘ ``` Can you write a function called `decrypt_caesar()` that takes an encoded string of numbers and returns the original phone number in string form? The input will always be a non-empty string containing only numeric characters. Example: ```python decrypt_caesar(\\"67890\\") => \\"34567\\" decrypt_caesar(\\"123\\") => \\"890\\"","solution":"def decrypt_caesar(encoded): Decrypts the given encoded string using a Caesar cipher with a shift of 3. :param encoded: String of digits encrypted with a shift of 3 :return: Decrypted original string of digits shift = 3 original = \'\' for char in encoded: original += str((int(char) - shift) % 10) return original"},{"question":"You are given an array of integers which represents the heights of mountains in a mountainous region. The mountains are represented by an integer array `heights` of length `N`. Your task is to determine the number of \\"mountain segments\\" in the array. A \\"mountain segment\\" is defined as a contiguous subarray of `heights` where a mountain segment first strictly increases to a peak and then strictly decreases thereafter. In other words, for a sequence to be considered a valid mountain segment, it must satisfy the following conditions: - It must have at least three elements. - There exists some index `p` such that: - `heights[0] < heights[1] < ... < heights[p]` - `heights[p] > heights[p+1] > ... > heights[length-1]` You need to count how many such mountain segments are there in the given array. Input Format The first line contains a single integer N (1 ≤ N ≤ 10^5), the number of elements in the array `heights`. The second line contains N space-separated integers representing the heights of the mountains. Output Format Print an integer that denotes the number of valid mountain segments. Constraints 1 leq heights[i] leq 10^4 for all i. Sample Input #1 10 2 1 4 7 3 2 5 6 4 3 Sample Output #1 2 Sample Input #2 5 2 2 2 2 2 Sample Output #2 0 Explanation: In the first sample, the mountain segments are: - [1, 4, 7, 3, 2] - [2, 5, 6, 4, 3] In the second sample, there are no valid mountain segments because there is no segment that strictly increases then strictly decreases.","solution":"def count_mountain_segments(N, heights): count = 0 i = 1 while i < N - 1: # Check if heights[i] is a peak if heights[i - 1] < heights[i] and heights[i] > heights[i + 1]: # At this point, we found a peak, now traverse back to find the start of the segment left = i - 1 while left > 0 and heights[left - 1] < heights[left]: left -= 1 # Traverse ahead to find the end of the segment right = i + 1 while right < N - 1 and heights[right] > heights[right + 1]: right += 1 # This segment from left to right is a mountain segment count += 1 i = right # Move `i` to the end of the current mountain segment else: i += 1 return count"},{"question":"Maya is an event organizer and has planned a series of events for a cultural festival in a city. Each event has specific start and end times. Events can overlap, and Maya needs to minimize the number of venues required to host all the events without any time conflicts. As her assistant, your task is to determine the minimum number of venues required. Input The first line contains the number of test cases T. For each test case, the first line contains an integer N, the number of events. The next N lines contain two space-separated integers Si and Ei, representing the start and end times of the ith event. Output For each test case, print the minimum number of venues required to host all the events. Constraints 1 ≤ T ≤ 20 1 ≤ N ≤ 10^4 0 ≤ Si < Ei ≤ 10^8 Sample Input 2 3 1 4 2 5 4 7 4 1 3 2 4 3 5 5 6 Sample Output 2 2 Explanation For the first case, events [1, 4] and [2, 5] overlap, requiring 2 venues. Event [4, 7] can reuse the first venue. For the second case, events [1, 3], [2, 4], and [3, 5] overlap sequentially, requiring 2 venues, with the last event [5, 6] reusing one of the venues.","solution":"def min_venues(T, test_cases): results = [] for test_case in test_cases: N, events = test_case times = [] for start, end in events: times.append((start, \'start\')) times.append((end, \'end\')) times.sort() max_venues = 0 current_venues = 0 for time in times: if time[1] == \'start\': current_venues += 1 if current_venues > max_venues: max_venues = current_venues else: current_venues -= 1 results.append(max_venues) return results"},{"question":"Given a non-empty array of positive integers nums, find the number of special sequences. A special sequence is defined as a contiguous subarray whose elements can be rearranged to form a strictly increasing sequence. Example 1: Input: nums = [1, 2, 3] Output: 6 Explanation: All possible subarrays are [[1], [1, 2], [1, 2, 3], [2], [2, 3], [3]]. Each of them can be rearranged to form a strictly increasing sequence. Example 2: Input: nums = [2, 2, 2] Output: 3 Explanation: The possible subarrays are [[2], [2], [2]]. None of the longer subarrays can be rearranged to form a strictly increasing sequence. Example 3: Input: nums = [1, 3, 2, 4] Output: 10 Explanation: The possible subarrays are [[1], [1, 3], [1, 3, 2], [1, 3, 2, 4], [3], [3, 2], [3, 2, 4], [2], [2, 4], [4]]. All of them can be rearranged to form strictly increasing sequences except [3, 2] and [1, 3, 2]. Constraints: 1 <= nums.length <= 10^5 1 <= nums[i] <= 100","solution":"def count_special_sequences(nums): def is_special(subarray): return len(subarray) == len(set(subarray)) n = len(nums) count = 0 for start in range(n): unique_elements = set() for end in range(start, n): if nums[end] in unique_elements: break unique_elements.add(nums[end]) count += 1 return count"},{"question":"You are given an integer n and your task is to find the lexicographically smallest string that contains exactly n distinct characters. All characters in the string should be lowercase English letters (\'a\' - \'z\'). -----Input----- The only line of input contains a single integer n (1 ≤ n ≤ 26). -----Output----- Output the lexicographically smallest string that contains exactly n distinct characters. -----Examples----- Input 3 Output abc Input 5 Output abcde Input 1 Output a -----Note----- In the first example, the lexicographically smallest string with three distinct characters is \\"abc\\". In the second example, the lexicographically smallest string with five distinct characters is \\"abcde\\". In the third example, the lexicographically smallest string with one distinct character is \\"a\\".","solution":"def lexicographically_smallest_string(n): Returns the lexicographically smallest string that contains exactly n distinct characters. The characters are lowercase English letters (\'a\' - \'z\') and n is between 1 and 26 inclusive. return \'\'.join(chr(i) for i in range(ord(\'a\'), ord(\'a\') + n))"},{"question":"You are given a list of integers representing the heights of buildings. You are to determine the number of operations required to make all the building heights equal. An operation consists of choosing a building and increasing or decreasing its height by 1. Each height modification counts as one operation. Given an array of integers h representing the building heights, your task is to find the minimum number of operations needed to make all buildings the same height. -----Input----- The first line of the input contains an integer t (1 leq t leq 100) — the number of test cases. Each test case consists of two lines: - The first line contains an integer n (1 leq n leq 100) — the number of buildings. - The second line contains n integers h_1, h_2, dots, h_n (1 leq h_i leq 1000) — the heights of the buildings. -----Output----- For each test case, print a single integer — the minimum number of operations required to make all building heights equal. -----Examples----- Input 3 4 1 2 3 4 3 10 10 10 5 3 4 2 5 3 Output 6 0 4 -----Note----- In the first example, you can make all buildings equal to height 2 with the following operations: - Increase the first building\'s height by 1. - Decrease the third building\'s height by 1. - Decrease the fourth building\'s height by 2. This results in 1 + 1 + 2 + 2 = 6 operations. In the second example, all buildings already have the same height, so no operations are needed. In the third example, you can make all buildings equal to height 3 with the following operations: - Decrease the second building\'s height by 1. - Increase the third building\'s height by 1. - Decrease the fourth building\'s height by 2. - Increase the fifth building\'s height by 1. This results in 1 + 1 + 2 + 1 = 4 operations.","solution":"def min_operations_to_equal_height(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] heights = test_cases[i][1] median_height = sorted(heights)[n//2] operations = sum(abs(h - median_height) for h in heights) results.append(operations) return results #Wrapper function to extract input and process it def process_inputs_and_find_operations(t, input_data): test_cases = [] input_line = 0 for _ in range(t): n = input_data[input_line] heights = input_data[input_line+1] test_cases.append((n, heights)) input_line += 2 return min_operations_to_equal_height(t, test_cases)"},{"question":"Kavya loves playing with strings. She is especially interested in finding patterns within strings. She came across a problem where she needs to find the longest palindromic substring within a given string. A palindromic substring is a sequence of characters that reads the same backward as forward. Given a string S, your task is to find the longest substring of S that is a palindrome. If there are multiple longest palindromic substrings of the same length, return the one that appears first. Input: - T: the number of test cases. For each test case, there is one line containing a single string S. Output: - For each test case, print the longest palindromic substring. If there are multiple, print the one that appears first. Constraints: 1 ≤ T ≤ 10 1 ≤ |S| ≤ 1000 S consists of lowercase English letters only. Time limit: 1 sec Examples: Input: 2 babad cbbd Output: bab bb Explanation: For the first test case, there are multiple palindromic substrings of length 3 (\\"bab\\" and \\"aba\\"). Since \\"bab\\" appears first, it is the answer. For the second test case, the longest palindromic substring is \\"bb\\".","solution":"def longest_palindromic_substring(s): Given a string s, find the longest palindromic substring. n = len(s) if n == 0: return \\"\\" # Initialize the DP table dp = [[False] * n for _ in range(n)] # Every single character is a palindrome start = 0 max_length = 1 for i in range(n): dp[i][i] = True # Check for two-character palindromes for i in range(n-1): if s[i] == s[i+1]: dp[i][i+1] = True start = i max_length = 2 # Check for palindromes longer than two characters for length in range(3, n+1): for i in range(n-length+1): j = i + length - 1 # Check if the current substring is a palindrome if s[i] == s[j] and dp[i+1][j-1]: dp[i][j] = True start = i max_length = length return s[start:start+max_length]"},{"question":"The local library wants to organize books in a special pattern for their annual book exhibition. They have a special number N that determines the pattern of book IDs they want to showcase. Help the library by writing a program to generate this pattern. -----Input:----- - First line will contain P, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, one integer N. -----Output:----- For each test case, output the pattern of book IDs. -----Constraints----- - 1 leq P leq 50 - 1 leq N leq 50 -----Sample Input:----- 3 1 2 3 -----Sample Output:----- 123456 123456 654321 123456 654321 123456 -----EXPLANATION:----- Each number in the pattern represents the positions in a simulated sequence of book IDs. For N=1, only one sequence is shown: \\"123456\\". For N=2, two sequences alternate: \\"123456\\" and \\"654321\\". This pattern continues, alternating sequences as per the given N values in each test case.","solution":"def generate_pattern(n): Generates the pattern for the given integer N. pattern1 = \\"123456\\" pattern2 = \\"654321\\" pattern_list = [] for i in range(n): if i % 2 == 0: pattern_list.append(pattern1) else: pattern_list.append(pattern2) return \\" \\".join(pattern_list) def exhibition_patterns(test_cases): Processes the patterns for multiple test cases. results = [] for n in test_cases: result = generate_pattern(n) results.append(result) return results"},{"question":"You are assigned the task of managing an inventory system for a retail store. The store sells N different products, and you need to track the state of the inventory based on a series of operations. Each product has a unique product code (an integer) and a certain quantity in the inventory. The operations are as follows: 1. \\"ADD X Y\\" - This operation adds Y units of product X to the inventory. 2. \\"REMOVE X Y\\" - This operation removes Y units of product X from the inventory if possible. If the removal operation results in a negative quantity for that product, set the quantity to zero. 3. \\"STOCK X\\" - This operation queries the current inventory and returns the quantity of product X. Your task is to process a list of Q operations and output the result of each \\"STOCK\\" operation. Input Format: - The first line contains an integer N, the number of different products. - The second line contains N integers, representing the initial quantities of each product from product code 0 to N-1. - The third line contains an integer Q, the number of operations. - The next Q lines each contain an operation as described above. Output Format: - For each \\"STOCK\\" operation, output the quantity of the specified product. Constraints: - 1 ≤ N ≤ 10^5 - 1 ≤ Q ≤ 10^5 - 0 ≤ quantities ≤ 10^9 for the initial quantities and Y in \\"ADD\\" and \\"REMOVE\\" operations - 0 ≤ X < N (X is a valid product code) SAMPLE INPUT: 5 10 20 30 40 50 6 ADD 2 10 REMOVE 3 50 STOCK 2 REMOVE 4 10 STOCK 4 STOCK 1 SAMPLE OUTPUT: 40 40 20 Explanation: - After adding 10 units to product 2, its quantity becomes 40. - After removing 50 units from product 3, its quantity becomes 0 (not negative). - Querying the stock for product 2 gives 40. - Removing 10 units from product 4 updates its quantity to 40. - Querying the stock for product 4 gives 40. - Querying the stock for product 1 gives 20.","solution":"def manage_inventory(N, quantities, operations): results = [] for operation in operations: parts = operation.split() command = parts[0] X = int(parts[1]) if command == \\"ADD\\": Y = int(parts[2]) quantities[X] += Y elif command == \\"REMOVE\\": Y = int(parts[2]) quantities[X] = max(0, quantities[X] - Y) elif command == \\"STOCK\\": results.append(quantities[X]) return results"},{"question":"A function f can be used to map an integer to another integer uniquely. You need to implement an algorithm that takes an integer and applies a specific rule repeatedly until it reaches 1. The transformation rules are as follows: 1. If the integer is even, divide it by 2. 2. If the integer is odd, multiply it by 3 and add 1. The number of steps it takes for the integer to reach 1 is called its \\"reduction length\\". Write a function that computes the reduction length of an integer n and stores the results for all integers from 1 to n in a dictionary. Constraints - 1 leq n leq 10,000 Input An integer n (the upper limit). Output A dictionary where keys are integers from 1 to n and values are their corresponding reduction lengths. Example Input 5 Output { 1: 0, 2: 1, 3: 7, 4: 2, 5: 5 } Explanation - 1 takes 0 steps to reach 1 because it’s already 1. - 2 -> 1 (1 step) - 3 -> 10 -> 5 -> 16 -> 8 -> 4 -> 2 -> 1 (7 steps) - 4 -> 2 -> 1 (2 steps) - 5 -> 16 -> 8 -> 4 -> 2 -> 1 (5 steps)","solution":"def reduction_length(n): Computes the reduction lengths of integers from 1 to n. def compute_length(x): Computes the reduction length for a single integer x. steps = 0 while x != 1: if x % 2 == 0: x //= 2 else: x = 3 * x + 1 steps += 1 return steps result = {} for i in range(1, n + 1): result[i] = compute_length(i) return result"},{"question":"A large company has an internal messaging system used by its employees to communicate with each other. This system logs every message sent and received between employees in a centralized database. Each message record includes the sender ID, receiver ID, and a unique message ID. To improve the system\'s performance, the company wishes to analyze the communication patterns by determining the number of unique message senders for each employee based on the logged data. Given a log of messages, where each message record consists of a sender, a receiver, and a message ID, you need to determine for each employee how many unique individuals have sent them messages. Input format The first line contains an integer n, the number of message records (1 ≤ n ≤ 2 * 10^5). Each of the following n lines contains three integers: sender ID, receiver ID, and message ID (1 ≤ sender ID, receiver ID ≤ 10^6, 1 ≤ message ID ≤ 10^9). Output format For each employee ID that received at least one message, print the employee ID followed by the number of unique individuals who have sent them messages. Print the results in ascending order of employee ID. If an employee hasn\'t received any messages, do not include them in the output. SAMPLE INPUT 5 10 20 1 11 20 2 10 21 3 10 20 4 12 21 5 SAMPLE OUTPUT 20 2 21 2","solution":"def analyze_communication_patterns(n, messages): receiver_dict = {} for message in messages: sender, receiver, msg_id = message if receiver not in receiver_dict: receiver_dict[receiver] = set() receiver_dict[receiver].add(sender) result = [] for receiver in sorted(receiver_dict): result.append((receiver, len(receiver_dict[receiver]))) return result"},{"question":"The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. So, the sequence goes 0, 1, 1, 2, 3, 5, 8, 13, 21, and so on. You are required to write a function that takes an integer `n` and returns the sum of the even-valued terms in the Fibonacci sequence whose values do not exceed `n`. # Examples: - For `n=10`, the Fibonacci sequence up to 10 is `0, 1, 1, 2, 3, 5, 8`. The even-valued terms are `0, 2, 8` and their sum is `10`. Therefore, `fib_even_sum(10) = 10`. - For `n=34`, the Fibonacci sequence up to 34 is `0, 1, 1, 2, 3, 5, 8, 13, 21, 34`. The even-valued terms are `0, 2, 8, 34` and their sum is `44`. Therefore, `fib_even_sum(34) = 44`. # Note: - The upper bound for `n` will not exceed `4,000,000`. Write a function `fib_even_sum(n)` that takes an integer `n` and returns the sum of the even-valued Fibonacci numbers not exceeding `n`. Good luck!","solution":"def fib_even_sum(n): Returns the sum of the even-valued terms in the Fibonacci sequence whose values do not exceed the given integer n. a, b = 0, 1 sum_even = 0 while a <= n: if a % 2 == 0: sum_even += a a, b = b, a + b return sum_even"},{"question":"Chang is fascinated by palindromes and their properties. A palindrome is a string that reads the same forward and backward. He is interested in finding the longest substring of even length within a given string such that the substring is a palindrome. Help Chang by writing an algorithm to determine the length of this longest even-length palindromic substring. Input The input consists of a single line containing a string \\"S\\" of length \\"L\\". Output Print a single integer representing the length of the longest even-length palindromic substring. If no even-length palindromic substring exists, print 0. Constraint 1 ≤ L ≤ 1000 The string \\"S\\" contains only lowercase English letters (\'a\' to \'z\'). SAMPLE INPUT abbaacc SAMPLE OUTPUT 4 Explanation In the given string, the longest even-length palindromic substring is \\"abba\\", which has a length of 4. The algorithm should identify such substrings and return the maximum length found.","solution":"def longest_even_length_palindrome(S: str) -> int: Returns the length of the longest even-length palindromic substring in the input string S. def is_palindrome(sub): Check if a substring is a palindrome. return sub == sub[::-1] max_len = 0 L = len(S) for i in range(L): for j in range(i + 1, L + 1): sub = S[i:j] if len(sub) % 2 == 0 and is_palindrome(sub): max_len = max(max_len, len(sub)) return max_len"},{"question":"Given a linked list, write a function to determine if it has a cycle in it. To represent a cycle in the given linked list, we use an integer `pos` which represents the position (0-indexed) in the linked list where the tail connects to. If `pos` is -1, then there is no cycle in the linked list. Example 1: Input: head = [3,2,0,-4], pos = 1 Output: true Explanation: There is a cycle in the linked list, where tail connects to the second node. Example 2: Input: head = [1,2], pos = 0 Output: true Explanation: There is a cycle in the linked list, where tail connects to the first node. Example 3: Input: head = [1], pos = -1 Output: false Explanation: There is no cycle in the linked list. Follow up: Can you solve it using O(1) (i.e. constant) memory?","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def hasCycle(head): Determines if a linked list has a cycle in it. :param head: ListNode, the head of the linked list :return: bool, True if there is a cycle, False otherwise slow = head fast = head while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: return True return False"},{"question":"You are given a rectangular grid of size m x n. Each cell of the grid represents a plot of land where you can either build a house or leave it vacant. However, there are restrictions on building houses: 1. A house cannot be built on a cell if the neighboring cell (horizontally or vertically adjacent) already has a house. 2. You will be given a set of plots where we have to build houses without violating the above condition. Write a program to determine if it is possible to build the houses in all the given plots while following the restrictions. # Input The input consists of multiple lines: - The first line contains two integers, m (1 ≤ m ≤ 1000) and n (1 ≤ n ≤ 1000), the dimensions of the grid. - The next line contains an integer k (1 ≤ k ≤ min(m*n, 500000)), the number of houses to build. - Each of the following k lines contains two integers ri and ci (1 ≤ ri ≤ m, 1 ≤ ci ≤ n) representing the row and column indices of the plots where the houses need to be built. # Output Output \\"Yes\\" if it is possible to build all the houses without violating the condition. Otherwise, output \\"No\\". # Example Input ``` 5 5 3 1 1 2 2 3 3 ``` Output ``` Yes ``` Input ``` 3 3 4 1 1 1 2 2 2 3 3 ``` Output ``` No ``` Note: - In the first example, the houses can be built on (1, 1), (2, 2), and (3, 3) without any neighboring houses. - In the second example, building houses on (1, 1) and (1, 2) would violate the condition of no adjacent houses.","solution":"def can_build_houses(m, n, plots): # Create a grid to represent the house presence grid = [[0] * n for _ in range(m)] for (ri, ci) in plots: # Check if any of the 4 possible adjacent cells already have a house if ((ri > 1 and grid[ri-2][ci-1]) or (ri < m and grid[ri][ci-1]) or (ci > 1 and grid[ri-1][ci-2]) or (ci < n and grid[ri-1][ci])): return \\"No\\" # Mark the current cell as having a house grid[ri-1][ci-1] = 1 return \\"Yes\\""},{"question":"You are given a grid of size NxM filled with numbers. Your task is to find if there\'s a way to move from the top-left corner of the grid to the bottom-right corner by only moving down or right. Additionally, the sum of the numbers on the path must be even. Create a program that inputs the grid information and outputs \\"YES\\" if such a path exists, and \\"NO\\" if it doesn’t. Input The first line contains two integers, N and M (1 ≤ N, M ≤ 100), indicating the dimensions of the grid. Each of the next N lines contains M integers each, representing the grid. Output Output a single line \\"YES\\" if such a path exists and \\"NO\\" otherwise. Example Input 3 3 1 2 3 4 5 6 7 8 9 Output NO Input 2 2 2 3 4 5 Output YES Note: You must devise an algorithm that efficiently determines if an even-sum path exists, considering the constraints on the grid size.","solution":"def is_even_sum_path_exists(grid): n = len(grid) m = len(grid[0]) # A DP table to store the parity of the sum of numbers from (0,0) to (i,j) even_dp = [[False]*m for _ in range(n)] odd_dp = [[False]*m for _ in range(n)] if grid[0][0] % 2 == 0: even_dp[0][0] = True else: odd_dp[0][0] = True for i in range(n): for j in range(m): if i > 0: if even_dp[i-1][j]: if grid[i][j] % 2 == 0: even_dp[i][j] = True else: odd_dp[i][j] = True if odd_dp[i-1][j]: if grid[i][j] % 2 == 0: odd_dp[i][j] = True else: even_dp[i][j] = True if j > 0: if even_dp[i][j-1]: if grid[i][j] % 2 == 0: even_dp[i][j] = True else: odd_dp[i][j] = True if odd_dp[i][j-1]: if grid[i][j] % 2 == 0: odd_dp[i][j] = True else: even_dp[i][j] = True return \\"YES\\" if even_dp[n-1][m-1] else \\"NO\\""},{"question":"A game involves N players numbered from 1 to N, each with a unique skill rating S_i. The players are divided into M teams, numbered from 1 to M. Each player i is initially assigned to a team T_i. The game organizer asks you to perform Q queries, where a query can either move a player from one team to another or request the maximum sum of skill ratings of two different players from the same team. For each move, you will update the player\'s team assignment, and for each query for the maximum sum, you will return the result. -----Constraints----- - 1 leq N, Q leq 10^5 - 1 leq S_i leq 10^9 - 1 leq T_i leq M - 1 leq M leq 10^5 -----Input----- Input is given from Standard Input in the following format: N Q S_1 T_1 S_2 T_2 : S_N T_N Q_1 Q_2 : Q_Q Each query can be one of two types: 1 i t: Move player i to team t. 2 t: Output the maximum sum of skill ratings of two different players from team t. If there are fewer than two players in team t, output 0. -----Output----- For each type 2 query, output the maximum sum for the specified team. -----Sample Input----- 5 5 10 1 20 1 30 2 40 3 50 3 1 1 3 2 1 2 2 1 4 1 2 1 2 3 -----Sample Output----- 20 0 90 80 -----Explanation----- Initially, players with skills 10, 20 belong to Team 1, player with skill 30 belongs to Team 2, and players with skills 40, 50 belong to Team 3. 1st query: Move player 1 to Team 3. Now players with skills 20 belong to Team 1, player with skill 30 belongs to Team 2, and players with skills 40, 50, 10 belong to Team 3. 2nd query: For Team 1, only one player exists. Max sum = 0. 3rd query: For Team 2, only one player exists. Max sum = 0. 4th query: Move player 4 to Team 1. Now players with skills 20, 40 belong to Team 1, player with skill 30 belongs to Team 2, players with skills 50, 10 belong to Team 3. 5th query: Max sum of Team 1 is 20 + 40 = 60. 6th query: Max sum of Team 3 is 50 + 10 = 60.","solution":"import heapq def process_game(N, Q, players, queries): # Create an initial team map team_map = {} # Create skill and team lookup dictionaries skill_dict = {} team_dict = {} for i in range(1, N + 1): skill, team = players[i - 1] skill_dict[i] = skill team_dict[i] = team if team not in team_map: team_map[team] = [] # We use negative values because heapq is a min-heap by default in Python heapq.heappush(team_map[team], -skill) result = [] def max_sum_team(team): if not team in team_map or len(team_map[team]) < 2: return 0 # Get the top two elements (largest skills) first = -heapq.heappop(team_map[team]) second = -heapq.heappop(team_map[team]) # Always push them back as we only need to look at them heapq.heappush(team_map[team], -first) heapq.heappush(team_map[team], -second) return first + second for query in queries: parts = query.split() if parts[0] == \'1\': player = int(parts[1]) new_team = int(parts[2]) old_team = team_dict[player] skill = skill_dict[player] # Remove skill from old team\'s heap team_map[old_team].remove(-skill) heapq.heapify(team_map[old_team]) # Add the skill to the new team\'s heap if new_team not in team_map: team_map[new_team] = [] heapq.heappush(team_map[new_team], -skill) # Update team dict team_dict[player] = new_team elif parts[0] == \'2\': team = int(parts[1]) result.append(max_sum_team(team)) return result"},{"question":"A Hiring Manager needs to assign n interviews to m interviewers. Each interview i is characterized by a start time start_{i} and an end time end_{i} (start_{i} ≤ end_{i}). Each interviewer can conduct at most one interview at any given time. Given the time slots for each interview, what is the maximum number of interviews that can be conducted simultaneously by the m interviewers? -----Input----- The first line contains two integer numbers n (1 ≤ n ≤ 10^5) and m (1 ≤ m ≤ 10^4) — the number of interviews and the number of interviewers. The following n lines contain two integer values start_{i} and end_{i} each (1 ≤ start_{i} ≤ end_{i} ≤ 10^9). -----Output----- Print the maximal number of interviews that can be conducted simultaneously by m interviewers. -----Examples----- Input 3 2 1 5 2 6 6 10 Output 2 Input 4 3 1 2 2 3 3 4 4 5 Output 3 Input 5 2 1 3 2 4 3 5 1 2 4 6 Output 2","solution":"from heapq import heappop, heappush def max_interviews(n, m, intervals): # sort intervals by their end times intervals.sort(key=lambda x: x[1]) # min heap to keep track of end times of ongoing interviews end_times = [] count = 0 for interval in intervals: start, end = interval if len(end_times) < m: heappush(end_times, end) count += 1 else: if end_times[0] <= start: heappop(end_times) heappush(end_times, end) count += 1 return min(count, m)"},{"question":"You are given a list of integers, where each integer represents the score of a player in a game. Your task is to normalize the scores so that they sum up to a specified target value, while preserving the relative proportions of the scores. Normalization is a process of adjusting values measured on different scales to a common scale. In this case, we need to adjust all scores in such a way that the sum of the adjusted scores equals the target value. # Input: - An integer `t` representing the target sum. - An integer `n` representing the number of players. - A list of `n` integers (`scores`), representing the scores of the players. # Output: - A list of `n` floating-point numbers, representing the normalized scores, rounded to two decimal places. # Example Input: ``` 100 4 10 20 30 40 ``` Output: ``` 6.67 13.33 20.00 26.67 ``` # Explanation: 1. The original sum of the scores is `10 + 20 + 30 + 40 = 100`. 2. We normalize the scores by multiplying each score by the ratio of the target sum to the original sum of the scores. 3. In this case, the ratio is `100 / 100 = 1`. 4. Therefore, the normalized scores are `10 * 1 = 10`, `20 * 1 = 20`, `30 * 1 = 30`, and `40 * 1 = 40`. However, since the target sum is given as a precise value, you need to ensure your normalized scores sum up exactly to the target value with two decimal points. Therefore, consider more complex rounding adjustments if necessary. Write a program that performs this normalization for given inputs. # Constraints: - `1 <= t <= 10^6` - `1 <= n <= 100` - `1 <= scores[i] <= 10^4`","solution":"def normalize_scores(target, n, scores): Normalize the scores such that their sum is equal to the target value. Parameters: target (int): The target sum to normalize to. n (int): The number of players. scores (list of int): The original scores of the players. Returns: list of float: The normalized scores, rounded to two decimal places. total_score = sum(scores) normalized_scores = [(score * target / total_score) for score in scores] normalized_scores = [round(score, 2) for score in normalized_scores] # To handle rounding issues ensuring the sum is exactly the target value difference = target - sum(normalized_scores) increments = difference / len(scores) adjusted_normalized_scores = [score + increments for score in normalized_scores] return adjusted_normalized_scores"},{"question":"Given an unsorted array of integers, find the maximum sum of any continuous subarray. If the array contains only negative numbers, an empty subarray should be considered to return 0 as the maximum sum. Example 1: Input : arr = [-2,1,-3,4,-1,2,1,-5,4] Output: 6 Explanation: The subarray [4,-1,2,1] has the maximum sum of 6. Example 2: Input : arr = [-5, -2, -3] Output: 0 Explanation: As all numbers are negative, an empty subarray has the maximum sum of 0. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function maxSumContinuousSubarray() that takes an integer array (arr) and its size (n) and returns an integer denoting the maximum sum of any continuous subarray. The driver code takes care of the printing. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 -10^4 ≤ arr[i] ≤ 10^4","solution":"def maxSumContinuousSubarray(arr): Returns the maximum sum of any continuous subarray. If the array contains only negative numbers, returns 0. # Initialize variables max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current # If array contains only negative numbers, consider the empty subarray if max_global < 0: return 0 return max_global"},{"question":"Given an array of integers, your task is to partition the array into two non-empty contiguous subarrays such that the sum of the elements in the first subarray multiplied by the sum of the elements in the second subarray is maximized. Print the maximum product that can be obtained. ------ Input Format ------ - The first line contains a single integer T, the number of test cases. - The first line of each test case contains a single integer N, the length of the array. - The second line of each test case contains N space-separated integers representing the elements of the array. ------ Output Format ------ For each test case, print the maximum product possible. ------ Constraints ------ 1 ≤ T ≤ 1000 2 ≤ N ≤ 2 cdot 10^5 1 ≤ array_i ≤ 10^4 ----- Sample Input 1 ------ 2 5 1 2 3 4 5 3 1 1 1 ----- Sample Output 1 ------ 54 2 ----- Explanation 1 ------ Test case 1: We can partition the array into [1, 2, 3] and [4, 5]. The sum of the first subarray is 6 and the sum of the second subarray is 9. The product is 6 * 9 = 54. Test case 2: We can partition the array into [1] and [1, 1]. The sum of the first subarray is 1 and the sum of the second subarray is 2. The product is 1 * 2 = 2.","solution":"def max_product_partition(arr): n = len(arr) prefix_sum = [0] * n total_sum = sum(arr) max_product = 0 prefix_sum[0] = arr[0] for i in range(1, n): prefix_sum[i] = prefix_sum[i - 1] + arr[i] for i in range(n - 1): sum1 = prefix_sum[i] sum2 = total_sum - sum1 max_product = max(max_product, sum1 * sum2) return max_product def process_test_cases(test_cases): results = [] for tc in test_cases: n = tc[0] arr = tc[1] results.append(max_product_partition(arr)) return results"},{"question":"In a magical forest, there are N mystical trees, numbered from 1 to N. Each tree has a unique power level associated with it, denoted by P_i for tree i (1 ≤ P_i ≤ 10^9). The trees live harmoniously when their power levels are evenly distributed. To achieve this harmony, you can connect the trees with enchanted pathways. When two trees i and j are connected by a pathway, their power levels get balanced out so that both trees share the same power level calculated as the average of their individual power levels: (P_i + P_j) / 2. However, creating a pathway is costly. You’re given M potential pathways, where each pathway connects two distinct trees i and j (1 ≤ i, j ≤ N) with a specific cost C. The goal is to determine the minimum cost to connect all trees, such that all trees have the same power level in the end. Given this task, you\'re to write a program that either outputs the minimum cost needed to balance all trees or determines that it’s impossible to connect all trees. Input: - The first line contains two integers, N and M (2 ≤ N ≤ 1000, 1 ≤ M ≤ 100000), the number of mystical trees and the number of potential pathways respectively. - The second line contains N integers, P_1, P_2, ..., P_N (1 ≤ P_i ≤ 10^9), the power levels of the trees. - Each of the next M lines contains three integers, u, v, and C (1 ≤ u, v ≤ N, u ≠ v, 1 ≤ C ≤ 10^6), describing a potential pathway that connects tree u and tree v with a cost of C. Output: If it’s possible to connect all trees, print the minimum total cost required. Otherwise, print -1. Example: Input: 4 5 10 20 30 40 1 2 5 1 3 10 2 3 6 2 4 8 3 4 3 Output: 14 Explanation: The minimum cost to connect all trees is 14, which can be achieved by connecting pathways (3, 4) with cost 3, (1, 2) with cost 5, and (2, 4) with cost 6. This ensures all trees are connected, and their power levels can be balanced.","solution":"def min_cost_to_connect_all_trees(N, M, power_levels, pathways): parent = list(range(N)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootY] = rootX pathways.sort(key=lambda x: x[2]) total_cost = 0 edges_used = 0 for u, v, cost in pathways: if find(u - 1) != find(v - 1): union(u - 1, v - 1) total_cost += cost edges_used += 1 if edges_used == N - 1: break if edges_used == N - 1: return total_cost else: return -1"},{"question":"A tree consists of n nodes numbered from 1 to n. You are given n-1 edges, each connecting two nodes of the tree. Your task is to determine the maximum distance (i.e., the number of edges in the path) between any two nodes in the tree, as well as the two nodes that contribute to this maximum distance. -----Input----- The first line contains an integer n (2 leq n leq 1000), the number of nodes in the tree. The following n-1 lines, each containing two integers u and v (1 leq u, v leq n), represent an edge between nodes u and v. -----Output----- Output three integers: the length of the longest path in the tree and the two nodes that define this path. If there are multiple longest paths, output any one of them. -----Example----- Sample Input 1: 5 1 2 1 3 3 4 3 5 Sample Output 1: 3 2 4 Sample Input 2: 4 1 2 2 3 2 4 Sample Output 2: 2 3 4","solution":"def find_tree_diameter(n, edges): from collections import deque, defaultdict def bfs(start_node): distance = [-1] * n q = deque([start_node]) distance[start_node] = 0 farthest_node = start_node while q: current = q.popleft() for neighbor in tree[current]: if distance[neighbor] == -1: distance[neighbor] = distance[current] + 1 q.append(neighbor) if distance[neighbor] > distance[farthest_node]: farthest_node = neighbor return farthest_node, distance[farthest_node] tree = defaultdict(list) for u, v in edges: tree[u-1].append(v-1) tree[v-1].append(u-1) start_node = 0 farthest_node, _ = bfs(start_node) other_end, max_distance = bfs(farthest_node) # find all nodes at maximum distance from the farthest node again final_node, final_distance = bfs(other_end) return final_distance, farthest_node + 1, other_end + 1 def parse_input(input_data): data = input_data.split(\'n\') n = int(data[0]) edges = [list(map(int, line.split())) for line in data[1:] if line] return n, edges def main(input_data): n, edges = parse_input(input_data) result = find_tree_diameter(n, edges) return f\\"{result[0]} {result[1]} {result[2]}\\""},{"question":"You are given an integer array arr of positive integers of size n, and another integer k. Your task is to determine if there exists any subset of arr of length exactly k such that the sum of the subset is odd. If such a subset exists, print \\"YES\\", otherwise print \\"NO\\". -----Input----- The input consists of multiple test cases. The first line of the input contains a single integer t (1 leq t leq 1000), the number of test cases. The next lines describe the test cases. For each test case: - The first line contains two integers n (1 leq n leq 100) and k (1 leq k leq n), the size of the array and the size of the subset, respectively. - The second line contains n space-separated positive integers, representing the elements of the array arr (1 leq arr[i] leq 1000). -----Output----- For each test case, print \\"YES\\" (without quotes) if such a subset exists, otherwise print \\"NO\\" (without quotes). -----Example----- Input 3 5 3 1 2 3 4 5 4 2 2 4 6 8 7 4 1 1 1 1 1 1 1 Output YES NO YES -----Note----- In the first test case, one possible subset of length 3 is [1, 2, 4], which sums to 7 (an odd number), so the output is \\"YES\\". In the second test case, any possible subset of length 2 will have elements either all even or all multiples of 2, which sums up to an even number, so the output is \\"NO\\". In the third test case, one possible subset of length 4 is [1, 1, 1, 1], which sums to 4 (an even number). But the subset [1, 1, 1, 1] returns YES because there are other possible subsets.","solution":"def is_odd_subset_exists(t, test_cases): This function checks if there exists any subset of specific length k such that the sum of the subset is odd. Parameters: t (int) : Number of test cases. test_cases (list) : List of test cases where each test case is a tuple containing n, k and the array of integers. Returns: list : List of \\"YES\\" or \\"NO\\" strings for each test case. results = [] for test in test_cases: n, k, arr = test odd_count = sum(1 for num in arr if num % 2 != 0) even_count = n - odd_count if odd_count >= k: results.append(\\"YES\\") elif odd_count % 2 == 1 and even_count >= k - odd_count: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given a singly linked list, check whether it contains a cycle. A cycle occurs when a node\'s next point back to a previous node in the list, forming a loop. Example 1: Input: Linked List: 1 -> 2 -> 3 -> 4 -> 5 -> 3 (cycle starts at node 3) Output: True Example 2: Input: Linked List: 1 -> 2 -> 3 -> 4 -> 5 Output: False Your Task: You don\'t need to read input or print anything. Your task is to complete the function hasCycle() that takes the head of the linked list as an input parameter and returns True if there is a cycle in the linked list. Otherwise, it returns False. Expected Time Complexity: O(N), where N is the number of nodes in the linked list. Expected Auxiliary Space: O(1). Constraints: 1 <= Number of Nodes <= 10^5","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def hasCycle(head): Detects if a linked list has a cycle. :param head: ListNode, the head of the linked list :return: bool, True if there is a cycle, False otherwise if not head: return False slow = head fast = head while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: return True return False"},{"question":"Given a city represented as a grid of size m x n, each cell can either be empty (represented by 0) or a building (represented by 1). We want to add a new building such that the new building is as far as possible from all existing buildings. The distance used for this calculation is the Manhattan Distance, which is the distance between two points (x1, y1) and (x2, y2) is defined as |x1 - x2| + |y1 - y2|. Write a function to find an empty cell where the distance to the nearest building is maximized. Return the maximum distance. If there is no available place to build or if there are no buildings, return -1. Function Signature: ```python def maxDistanceToBuilding(grid: List[List[int]]) -> int: ``` # Input: - m and n (2 ≤ m, n ≤ 1000) - A 2D grid of integers representing the city (0 ≤ grid[i][j] ≤ 1) # Output: - An integer representing the maximum distance from the empty cell to the nearest building. # Example: ```python # Example 1: grid = [ [1, 0, 0], [0, 0, 0], [0, 0, 1] ] maxDistanceToBuilding(grid) # Output: 2 # Example 2: grid = [ [1, 0, 0], [0, 0, 0], [0, 0, 0] ] maxDistanceToBuilding(grid) # Output: 4 # Example 3: grid = [ [1, 1, 1], [1, 1, 1], [1, 1, 1] ] maxDistanceToBuilding(grid) # Output: -1 ``` # Explanation: 1. In the first example, the farthest distance is achieved at (1, 1) and the distance to the nearest building is 2. 2. In the second example, the farthest distance is achieved at (2, 2) and the distance to the nearest building is 4. 3. In the third example, there are no empty cells, so the output is -1. Note: You may use breadth-first search (BFS) or other appropriate algorithms to solve this problem efficiently.","solution":"from typing import List from collections import deque def maxDistanceToBuilding(grid: List[List[int]]) -> int: m, n = len(grid), len(grid[0]) buildings = [(i, j) for i in range(m) for j in range(n) if grid[i][j] == 1] if not buildings: return -1 queue = deque(buildings) visited = set(buildings) distance = -1 while queue: distance += 1 for _ in range(len(queue)): x, y = queue.popleft() for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) max_dist = max(distance, 0) return max_dist if max_dist > 0 else -1"},{"question":"You are given an array of integers representing the prices of a collection of books. Your task is to determine the maximum profit you can achieve by buying and selling one book. The restriction is that you have to buy the book before you can sell it. Write a function `max_profit(prices)` that takes a list of positive integers `prices` representing the price of a book on each day. The function should return the maximum profit that can be achieved, or 0 if no profit is possible. # Input - A list of integers `prices` where 1 ≤ len(prices) ≤ 10^5 and 1 ≤ prices[i] ≤ 10^6. # Output - An integer representing the maximum profit. # Function Signature ```python def max_profit(prices: List[int]) -> int: ``` # Examples Example 1 Input: ```python prices = [7, 1, 5, 3, 6, 4] ``` Output: ```python 5 ``` Explanation: - Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6 - 1 = 5. Example 2 Input: ```python prices = [7, 6, 4, 3, 1] ``` Output: ```python 0 ``` Explanation: - In this case, no transaction is done, i.e., the maximum profit is 0. # Constraints - You have to buy the book before you can sell it. - Only one transaction (buy one and sell one) is allowed.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved from buying and selling one book. :param prices: List of integers representing the price of a book on each day. :return: Integer representing the maximum profit. If no profit is possible, return 0. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price if price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"A new streaming platform offers its users the ability to create personalized viewing lists. Each viewing list is an ordered list of distinct movie titles. The platform enables various operations, such as adding a movie, removing a movie, reversing the list, and rotating the list. The following operations are supported: - \\"ADD x\\": Add movie x to the end of the viewing list. - \\"REMOVE x\\": Remove movie x from the viewing list. - \\"REVERSE\\": Reverse the order of movies in the viewing list. - \\"ROTATE n\\": Rotate the viewing list n positions to the right. A positive n indicates a right rotation, while a negative n indicates a left rotation. Your task is to process a sequence of operations on an initially empty viewing list and output the final state of the viewing list. -----Input----- The first line contains an integer T (1 ≤ T ≤ 10), representing the number of test cases. Each test case starts with an integer N (1 ≤ N ≤ 100), representing the number of operations to perform. The following N lines each contain one of the operations described above. A movie title x in \\"ADD\\" and \\"REMOVE\\" operations is a string consisting of lowercase letters and has a length of at most 20. -----Output----- For each test case, output the final state of the viewing list as a single line of space-separated movie titles. If the viewing list is empty, output \\"EMPTY\\". -----Example----- Input: 2 5 ADD inception ADD matrix REMOVE inception ADD avatar REVERSE 3 ADD starwars ROTATE 1 REVERSE Output: avatar matrix starwars Explanation: For the first test case: 1. ADD inception -> [inception] 2. ADD matrix -> [inception, matrix] 3. REMOVE inception -> [matrix] 4. ADD avatar -> [matrix, avatar] 5. REVERSE -> [avatar, matrix] For the second test case: 1. ADD starwars -> [starwars] 2. ROTATE 1 -> [starwars] 3. REVERSE -> [starwars]","solution":"def process_operations(test_cases): result = [] for operations in test_cases: viewing_list = [] for operation in operations: parts = operation.split() cmd = parts[0] if cmd == \\"ADD\\": movie = parts[1] viewing_list.append(movie) elif cmd == \\"REMOVE\\": movie = parts[1] if movie in viewing_list: viewing_list.remove(movie) elif cmd == \\"REVERSE\\": viewing_list.reverse() elif cmd == \\"ROTATE\\": n = int(parts[1]) if viewing_list: n %= len(viewing_list) viewing_list = viewing_list[-n:] + viewing_list[:-n] if viewing_list: result.append(\\" \\".join(viewing_list)) else: result.append(\\"EMPTY\\") return result # Example test cases def parse_input(input_text): lines = input_text.strip().split(\'n\') T = int(lines[0]) idx = 1 test_cases = [] for _ in range(T): N = int(lines[idx]) operations = lines[idx+1:idx+1+N] test_cases.append(operations) idx += N + 1 return test_cases def formatted_output(output_list): return \\"n\\".join(output_list) input_text = 2 5 ADD inception ADD matrix REMOVE inception ADD avatar REVERSE 3 ADD starwars ROTATE 1 REVERSE test_cases = parse_input(input_text) output_list = process_operations(test_cases) output_text = formatted_output(output_list) print(output_text)"},{"question":"You are given a list of integers representing heights of buildings standing in a row. The goal is to determine the maximum area of a rectangle that can be formed by any set of consecutive buildings where the rectangle\'s height is defined by the shortest building in that set. Your task is to write a function that takes a list of integers and returns the maximum rectangular area that can be formed. Input The input consists of a single list of integers where each integer represents the height of a building. The length of the list is between 1 and 10^5, and each integer is between 1 and 10^6. Output The output should be a single integer which is the maximum possible rectangular area. Example Input [2, 1, 5, 6, 2, 3] Output 10 Explanation The largest rectangle can be formed by using heights at indices 2 and 3 (both with height 5 and 6), yielding an area of 10 units. Hints: 1. This problem can be solved efficiently using a stack-based approach to compute the largest rectangle in a histogram. 2. Consider iterating through the list and using a stack to keep track of the buildings\' heights and their indices. Evaluate the potential largest rectangle area whenever a shorter building is encountered.","solution":"def largestRectangleArea(heights): Computes the maximum area of a rectangle that can be formed by any set of consecutive buildings. :param heights: List[int] - List of integers representing heights of buildings :return: int - Maximum rectangular area stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"You are given a binary tree. In a binary tree, each node can have at most two children, referred to as the left child and the right child. The goal is to determine if the tree is balanced. A binary tree is considered balanced if for every node in the tree, the height difference between its left and right subtrees is at most 1. Write a function `is_balanced(root)` that takes the root node of the binary tree as its argument and returns `True` if the tree is balanced, and `False` otherwise. # Input - The input will be a binary tree given in a specific format. - Each node of the tree will contain `data`, `left` and `right`. - `data` represents the value of the node. - `left` and `right` are references to the left and right children nodes, respectively. - If a node does not have a left or right child, the corresponding reference will be `None`. # Output - The function should return a boolean value: - `True` if the binary tree is balanced. - `False` if the binary tree is not balanced. # Function Signature ```python class TreeNode: def __init__(self, data=0, left=None, right=None): self.data = data self.left = left self.right = right def is_balanced(root: TreeNode) -> bool: # your code here ``` # Example ```python # Example 1: tree = TreeNode(1) tree.left = TreeNode(2) tree.right = TreeNode(3) tree.left.left = TreeNode(4) tree.left.right = TreeNode(5) tree.right.right = TreeNode(6) tree.left.left.left = TreeNode(7) tree.left.left.right = TreeNode(8) print(is_balanced(tree)) # Output: True # Example 2: tree = TreeNode(1) tree.left = TreeNode(2) tree.left.left = TreeNode(3) print(is_balanced(tree)) # Output: False ``` # Constraints - The number of nodes in the binary tree will not exceed 10^4. - Values of nodes in the tree do not affect the balancing property and can be any integer.","solution":"class TreeNode: def __init__(self, data=0, left=None, right=None): self.data = data self.left = left self.right = right def is_balanced(root: TreeNode) -> bool: def height_and_balance(node): if not node: return 0, True left_height, left_balanced = height_and_balance(node.left) right_height, right_balanced = height_and_balance(node.right) current_balanced = left_balanced and right_balanced and abs(left_height - right_height) <= 1 return max(left_height, right_height) + 1, current_balanced _, balanced = height_and_balance(root) return balanced"},{"question":"Complete the function `is_prime` (or equivalent, depending on your language) that determines if a given non-negative integer is a [prime number](https://en.wikipedia.org/wiki/Prime_number). From the corresponding Wikipedia entry: > *a prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.* You may assume the input is always valid. Examples ~~~if-not:nasm ```python is_prime(2) ==> True is_prime(17) ==> True is_prime(18) ==> False ``` ~~~ ~~~if:nasm ``` mov edi, 1 call is_prime ; returns false (zero) mov edi, 13 call is_prime ; returns true (non-zero) mov edi, 25 call is_prime ; returns false mov edi, 97 call is_prime ; returns true mov edi, 100 call is_prime ; returns false ``` ~~~ Note that `2` is the smallest and the only even prime number, and `1` is not a prime.","solution":"def is_prime(n): if n <= 1: return False if n == 2: return True for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True"},{"question":"Mr. Smith is a prominent botanist and is conducting research on plant arrangements. He has a rectangular greenhouse separated into a grid of plots. Each plot can either have a plant or be empty. Mr. Smith needs to check if there is enough space to plant a specific rectangular patch of new plants. Given a grid showing the current state of the greenhouse and the dimensions of the new patch, help Mr. Smith determine if it\'s possible to place the patch in a way such that every cell of the patch falls onto empty cells of the grid. Input The input consists of multiple test cases, followed by a line containing \\"0 0\\". Each test case starts with two integers R and C (1 ≤ R, C ≤ 50) representing the number of rows and columns of the grid, respectively. Each of the next R lines contains C characters, each either \'.\' (empty) or \'P\' (plant), describing the grid. The last line of each test case contains two integers pr and pc (1 ≤ pr ≤ R, 1 ≤ pc ≤ C), which represent the number of rows and columns of the patch, respectively. Output For each test case, print its case number and either \\"Yes\\" if the patch can be placed, or \\"No\\" if it cannot be placed. Example Input 5 5 ..... .PPPP ..... ..... ..... 2 2 4 4 PPPP PPPP PPPP PPPP 2 2 0 0 Output Case 1: Yes Case 2: No","solution":"def can_place_patch(grid, pr, pc): Determines if a pr x pc patch can be placed in an empty grid. rows = len(grid) cols = len(grid[0]) # Iterate through each possible starting position in the grid for i in range(rows - pr + 1): for j in range(cols - pc + 1): # Check if the patch can fit in the grid starting at (i, j) can_place = True for r in range(pr): for c in range(pc): if grid[i + r][j + c] == \'P\': can_place = False break if not can_place: break if can_place: return True return False def plant_arrangement(input_data): result = [] case_number = 1 for test_case in input_data: R, C = test_case[\'grid_size\'] grid = test_case[\'grid\'] pr, pc = test_case[\'patch_size\'] if can_place_patch(grid, pr, pc): result.append(f\\"Case {case_number}: Yes\\") else: result.append(f\\"Case {case_number}: No\\") case_number += 1 return result"},{"question":"Nina is running a contest with some participants, and she wants to implement a ranking system. Each participant will give several submissions, and each submission has a score. Nina wants to rank the participants based on their highest scores. If two participants have the same highest score, they should be ranked based on the lowest submission time of their highest score. The ranking should be 1-based. Participants who have no submissions will not be on the ranking list. Function Description Complete the rankingParticipants function in the editor below. rankingParticipants has the following parameter(s): - submissions: a list of dictionaries where each dictionary contains three keys: \'id\' (an integer representing the participant ID), \'score\' (an integer representing the score of the submission), and \'time\' (an integer representing the submission time). Returns - list of integers: the participant IDs in the ranked order. Input Format The first line contains an integer (k), the number of submissions. Each of the next (k) lines contains three space-separated integers representing the participant ID, submission score, and submission time. Constraints 1. (1 leq k leq 10^5) 2. (1 leq text{id} leq 10^5) 3. (0 leq text{score} leq 10^9) 4. (0 leq text{time} leq 10^9) Output Format Return a list of integers containing the participant IDs in the ranked order. Sample Input 0 6 1 50 5 2 80 1 1 80 2 3 90 10 2 85 3 4 70 4 Sample Output 0 3 2 1 4 Explanation 0 The highest scores for each participant are: - Participant 1: 80 with the earliest submission time of 2 - Participant 2: 85 with the earliest submission time of 3 - Participant 3: 90 with the earliest submission time of 10 - Participant 4: 70 with the earliest submission time of 4 Therefore, the ranking in order will be: 1. Participant 3 with score 90 2. Participant 2 with score 85 3. Participant 1 with score 80 4. Participant 4 with score 70 Sample Input 1 5 5 90 5 6 90 3 5 70 8 6 80 2 7 60 1 Sample Output 1 6 5 7 Explanation 1 The highest scores for each participant are: - Participant 5: 90 with the earliest submission time of 5 - Participant 6: 90 with the earliest submission time of 3 - Participant 7: 60 with the earliest submission time of 1 Participant 6 has the same highest score as participant 5, but an earlier submission time. Thus, Participant 6 is ranked higher than Participant 5. Therefore, the ranking in order will be: 1. Participant 6 with score 90 and time 3 2. Participant 5 with score 90 and time 5 3. Participant 7 with score 60 and time 1","solution":"def rankingParticipants(submissions): participant_best_scores = {} # Collect the highest score with the earliest time for each participant for sub in submissions: participant_id, score, time = sub[\'id\'], sub[\'score\'], sub[\'time\'] if participant_id not in participant_best_scores: participant_best_scores[participant_id] = (score, time) else: current_score, current_time = participant_best_scores[participant_id] if (score > current_score) or (score == current_score and time < current_time): participant_best_scores[participant_id] = (score, time) # Sort the participants first by score descending, then by time ascending sorted_participants = sorted(participant_best_scores.keys(), key=lambda pid: (-participant_best_scores[pid][0], participant_best_scores[pid][1])) return sorted_participants"},{"question":"Implement a function `largest_palindromic_product()` that finds the largest palindromic number made from the product of two n-digit numbers. The function takes an integer `n` as an argument and returns the largest palindromic number constructed from the product of two n-digit numbers. A palindromic number reads the same both ways (left to right and right to left). For example, `9009` is a palindromic number because it remains `9009` when its digits are reversed. # Function Signature ```python def largest_palindromic_product(n: int) -> int: pass ``` # Input - `n`: An integer representing the number of digits of the numbers to be multiplied (1 ≤ n ≤ 4). # Output - An integer, the largest palindromic number made from the product of two n-digit numbers. # Example ```python largest_palindromic_product(2) == 9009 largest_palindromic_product(3) == 906609 ``` # Constraints - For `n = 1`, the function should compute products of two 1-digit numbers. - The function must handle values up to `n = 4` efficiently.","solution":"def largest_palindromic_product(n: int) -> int: Finds the largest palindromic number made from the product of two n-digit numbers. def is_palindrome(x): s = str(x) return s == s[::-1] max_product = 0 lower_limit = 10**(n-1) upper_limit = 10**n - 1 for i in range(upper_limit, lower_limit - 1, -1): for j in range(i, lower_limit - 1, -1): product = i * j if product <= max_product: break if is_palindrome(product): max_product = product return max_product"},{"question":"You are given a string s consisting only of the characters \'a\', \'b\', and \'c\'. Your task is to transform the string such that no two adjacent characters are the same. You can perform the following operation on s any number of times (possibly zero): Select any character in the string and change it to any of \'a\', \'b\', or \'c\'. Return the minimum number of operations required to achieve the desired state and an example of the resulting string if it\'s possible. -----Input----- The first line contains an integer t (1 leq t leq 100) — the number of test cases. The description of the test cases follows. Each of the next t lines contains a single string s (1 leq |s| leq 100) consisting only of the characters \'a\', \'b\', and \'c\'. -----Output---- For each test case, output the minimum number of operations required to achieve the desired state in the first line. In the second line, output one alternating string that can be obtained with the minimum number of operations. -----Examples----- Input 2 ab aa Output 0 ab 1 ab -----Note----- In the first testcase, the string is already alternating, so no operations are needed. In the second testcase, we can change one of the \'a\'s to \'b\' to make the string alternating. \\"ab\\" is an example of a valid result with the minimum number of operations.","solution":"def transform_string(s): n = len(s) if n == 1: return 0, s # Minimum operations and resulting string min_operations = 0 result = list(s) for i in range(1, n): if result[i] == result[i - 1]: # Change current character to a different one (any of \'a\', \'b\', \'c\' that is different from the previous) for char in \'abc\': if char != result[i - 1] and (i == n - 1 or char != result[i + 1]): result[i] = char break min_operations += 1 return min_operations, \'\'.join(result) def process_test_cases(t, test_cases): results = [] for s in test_cases: min_operations, transformed_string = transform_string(s) results.append(f\\"{min_operations}n{transformed_string}\\") return results"},{"question":"A book lover opened a library where book lending and donation services are provided. To manage the list of books in the library he has to handle two types of operations: 1) Borrowing Book: When a member borrows a book, the book which was added last in the library is given to the member. This reduces the total count of books in the library by 1. If the library is empty, the member leaves without a book. 2) Donating Book: When a donor donates a book, the book is added to the collection of the library. Help him manage the transactions. Input: The first line contains an integer T, the number of transactions. T lines follow. A Type-1 (Borrowing) transaction, is indicated by a single integer 1 in the line. A Type-2 (Donating) transaction, is indicated by two space-separated integers 2 and BookName (name of the donated book). Output: For each Type-1 transaction, output the name of the book given to the member. If there are no books left, print \\"No Book\\" (without the quotes). Constraints: 1 ≤ T ≤ 10^5 1 ≤ length(BookName) ≤ 100 SAMPLE INPUT 7 1 2 HarryPotter 2 ToKillAMockingBird 1 1 2 GreatGatsby 1 SAMPLE OUTPUT No Book ToKillAMockingBird HarryPotter GreatGatsby Explanation: Initially, the library is empty. HarryPotter is donated to the library. ToKillAMockingBird is donated to the library. A member borrows the most recently donated book i.e., ToKillAMockingBird. A member borrows the next available book i.e., HarryPotter. GreatGatsby is donated to the library. A member borrows the most recently donated book i.e., GreatGatsby.","solution":"def manage_library(transactions): Manages the book transactions in the library and returns the result of borrowing transactions. Parameters: transactions (list of str): List of transaction operations, where each operation is a string. - \\"1\\" for borrowing a book - \\"2 BookName\\" for donating a book Returns: list: List of results for borrowing transactions (\\"No Book\\" or the name of the borrowed book). stack = [] result = [] for transaction in transactions: if transaction == \\"1\\": if stack: result.append(stack.pop()) else: result.append(\\"No Book\\") else: # Split the string to extract the book name after \\"2\\" _, book_name = transaction.split(maxsplit=1) stack.append(book_name) return result"},{"question":"Anna is learning about binary search algorithms, and she wants to write a program that efficiently determines if a target number exists within a sorted array of integers. Given an array of integers sorted in ascending order, she needs to write a function that returns the index of the given target value if it is present in the array. If the target value is not present in the array, the function should return -1. Your task is to help Anna by implementing the binary search algorithm. -----Input----- - The first line of input contains an integer N, the size of the array (1 ≤ N ≤ 1000). - The second line of input contains N integers in ascending order, representing the array elements. - The third line of input contains an integer T, the target value that needs to be found in the array. -----Output----- - Print a single integer: the index of the target value in the array (0-based index). If the target value is not found, print -1. -----Constraints----- - The elements of the array are unique and within the range -10^5 leq A[i] leq 10^5. - The target value T is within the range -10^5 leq T leq 10^5. -----Sample Input----- 10 1 2 3 4 5 6 7 8 9 10 7 -----Sample Output----- 6 -----Explanation----- In the given example, the array is [1,2,3,4,5,6,7,8,9,10] and the target value is 7. The index of 7 in the array is 6, hence the output is 6.","solution":"def binary_search(arr, target): Performs binary search to find the target in the sorted array. Returns the index of the target if found, otherwise returns -1. left, right = 0, len(arr) - 1 while left <= right: mid = left + (right - left) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"You are given an array of integers representing the daily temperature measurements for a given city over n days. Your task is to find the maximum difference in temperature between any two days, such that the former day is earlier than the latter day. Write a function to compute the maximum temperature difference. ``` @param {Array} temperatures - an array of integers where each integer represents the temperature of a day. 1 ≤ n ≤ 1000. Each temperature is between -100 and 100 inclusive. @return {Integer} the maximum difference in temperature between any two days (where the later day\'s temperature is higher than the earlier day\'s temperature). ``` Examples: ``` [30, 40, 20, 50, 25] => 30 [10, 8, 6, 4, 2] => 0 ``` Note: - In the first example, the maximum difference is obtained by comparing the temperature on day 3 (20 degrees) with the temperature on day 4 (50 degrees), which gives a difference of 30 degrees. - In the second example, the temperature decreases every day, so the maximum difference is 0. (c)your_username","solution":"def max_temperature_difference(temperatures): Returns the maximum difference in temperature between any two days (where the later day\'s temperature is higher than the earlier day\'s temperature). if not temperatures or len(temperatures) < 2: return 0 min_temp_so_far = temperatures[0] max_diff = 0 for temp in temperatures[1:]: if temp > min_temp_so_far: max_diff = max(max_diff, temp - min_temp_so_far) min_temp_so_far = min(min_temp_so_far, temp) return max_diff"},{"question":"Sarah has a collection of unique stamps that she loves to arrange in a grid. She has a grid of size N times M, and she wants to place her stamps on this grid. Sarah wants to make sure that there\'s exactly one stamp in each row and each column of the grid. The value of each cell in the grid represents how much Sarah likes the idea of placing a stamp in that particular cell. Sarah is a perfectionist, so she wants to maximize her total happiness which is the sum of values of all cells where she places her stamps. You are given the grid with values and your task is to find out what is the maximum total happiness that Sarah can achieve by placing one stamp in each row and each column in such a way that no two stamps share the same row or column. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two space-separated integers N and M -- the number of rows and columns in the grid. - Each of the next N lines contains M space-separated integers -- the values in each cell of the grid. -----Output----- For each test case, print a single line containing the maximum total happiness Sarah can achieve. -----Constraints----- - 1 le T le 50 - 2 le N, M le 15 - -100 le text{grid value} le 100 -----Example Input----- 2 3 3 1 2 3 4 5 6 7 8 9 4 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 -----Example Output----- 15 34","solution":"from scipy.optimize import linear_sum_assignment def maximum_happiness(grid, N, M): cost_matrix = [[-grid[row][col] for col in range(M)] for row in range(N)] row_ind, col_ind = linear_sum_assignment(cost_matrix) max_happiness = -sum(cost_matrix[row][col] for row, col in zip(row_ind, col_ind)) return max_happiness def solve(T, test_cases): results = [] for case in test_cases: N, M, grid = case[\'N\'], case[\'M\'], case[\'grid\'] result = maximum_happiness(grid, N, M) results.append(result) return results"},{"question":"Given a binary tree, write a function that returns the spiral order traversal of its nodes\' values. Spiral order traversal, also known as zigzag traversal, is where the nodes are visited in an alternating left-to-right and right-to-left pattern for each level. Example 1: Input: 1 / 2 3 / / 4 5 6 7 Output: [1, 3, 2, 4, 5, 6, 7] Explanation: First level is [1], second level is [3, 2], third level is [4, 5, 6, 7]. Example 2: Input: 10 / 20 30 / 40 60 Output: [10, 30, 20, 40, 60] Explanation: First level is [10], second level is [30, 20], third level is [40, 60]. Your Task: The task is to complete the function spiralOrderTraversal() that takes the root of a binary tree as its only argument and returns a list of integers representing the nodes\' values in spiral order. Constraints: 1 <= Number of nodes in the tree <= 1000","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def spiralOrderTraversal(root): if not root: return [] result = [] current_level = [root] left_to_right = True while current_level: level_values = [node.val for node in current_level] if not left_to_right: level_values.reverse() result.extend(level_values) next_level = [] for node in current_level: if node.left: next_level.append(node.left) if node.right: next_level.append(node.right) current_level = next_level left_to_right = not left_to_right return result"},{"question":"Write a function that takes an integer `n` and returns the number of trailing zeroes in the factorial of `n`. More scientifically: Let `fact(n)` be the factorial of `n`, your task is to determine the number of trailing zeroes (zeros at the end) in the decimal representation of `fact(n)`. Example Given ```n = 10```, the function should return `2`, because `10! = 3628800` has two trailing zeros. Given ```n = 25```, the function should return `6`, because `25! = 15511210043330985984000000` has six trailing zeros. - **Note**: The test cases involve very large numbers. Direct computation of the factorial value and counting zeros will not be efficient. Instead, consider how trailing zeros are produced in a factorial.","solution":"def trailing_zeroes_in_factorial(n): Returns the number of trailing zeroes in the factorial of n. count = 0 power_of_5 = 5 while n >= power_of_5: count += n // power_of_5 power_of_5 *= 5 return count"},{"question":"Given an integer array nums, return true if there exists a partition of this array into two subsets such that the sum of elements in both subsets is equal. Otherwise, return false. Example 1: Input: nums = [1, 5, 11, 5] Output: true Explanation: The array can be partitioned as [1, 5, 5] and [11]. Both subsets have equal sum of 11. Example 2: Input: nums = [1, 2, 3, 5] Output: false Explanation: The array cannot be partitioned into equal sum subsets. Your Task: You don\'t need to read input or print anything. Complete the function canPartition() which takes an integer array as input parameter and returns a boolean value indicating if there is an equal sum partition possible. Note: The driver code prints 1 if the value returned is true, otherwise 0. Expected Time Complexity: O(N * sum(nums)/2) Expected Auxiliary Space: O(sum(nums)/2) Constraints: 1 <= nums.length <= 200 1 <= nums[i] <= 100","solution":"def canPartition(nums): total_sum = sum(nums) # If the total sum is odd, we cannot partition it into two subsets with equal sum if total_sum % 2 != 0: return False target = total_sum // 2 # DP approach to see if there\'s a subset with sum equal to target dp = [False] * (target + 1) dp[0] = True for num in nums: for i in range(target, num - 1, -1): dp[i] = dp[i] or dp[i - num] return dp[target]"},{"question":"Earthquake Data Analysis Seismologists use the Richter scale to quantify the magnitude of earthquakes. However, the direct magnitudes do not always provide a complete overview of recent seismic activities due to the varying frequency of events. To better understand the distribution of earthquake magnitudes, you need to process a series of recorded magnitudes and identify common trends. For a given set of earthquake magnitude records, write a program to determine how many earthquakes had a magnitude less than or equal to the median magnitude. The median is the value separating the higher half from the lower half of a data sample. For a dataset with an odd number of observations, the median is the middle number. For a dataset with an even number of observations, the median is the average of the two middle numbers. Input The input consists of multiple datasets, each in the following format. > n > m1 m2 ... mn A dataset consists of two lines. In the first line, the number of recorded earthquakes n is given. n is an integer satisfying 1 ≤ n ≤ 10 000. In the second line, magnitudes of n earthquakes are given. mi (1 ≤ i ≤ n) is the magnitude of the i-th earthquake. This value is a floating-point number that is greater than or equal to 0.0 and less than or equal to 10.0. The end of the input is indicated by a line containing a zero. The sum of n\'s of all the datasets does not exceed 50 000. Output For each dataset, output the number of earthquakes with a magnitude less than or equal to the median. Sample Input 5 2.1 2.3 3.6 4.1 4.8 6 1.0 2.5 3.0 3.5 4.0 5.0 4 2.9 3.1 2.8 3.6 0 Output for the Sample Input 3 3 2 Example Input 5 2.1 2.3 3.6 4.1 4.8 6 1.0 2.5 3.0 3.5 4.0 5.0 4 2.9 3.1 2.8 3.6 0 Output 3 3 2","solution":"def count_earthquakes_leq_median(earthquake_data): Returns a list of counts of earthquakes with magnitude less than or equal to the median for each dataset. earthquake_data: A list of tuples where each tuple contains an integer n and a list of n earthquake magnitudes. results = [] for n, magnitudes in earthquake_data: sorted_magnitudes = sorted(magnitudes) if n % 2 == 1: median = sorted_magnitudes[n // 2] else: median = (sorted_magnitudes[(n // 2) - 1] + sorted_magnitudes[n // 2]) / 2 count = sum(magnitude <= median for magnitude in magnitudes) results.append(count) return results def process_input(input_data): lines = iter(input_data.split(\'n\')) earthquake_data = [] while True: n = int(next(lines)) if n == 0: break magnitudes = list(map(float, next(lines).split())) earthquake_data.append((n, magnitudes)) return count_earthquakes_leq_median(earthquake_data)"},{"question":"Problem Description: You are given two strings, `s1` and `s2`, and you need to determine if they are anagrams of each other. Two strings are considered anagrams if they contain the same characters in the same frequencies. The task is to write a function that will return `True` if the given strings are anagrams, otherwise return `False`. Example Test Case 1 Input s1: \\"listen\\" s2: \\"silent\\" Output True Example Test Case 2 Input s1: \\"hello\\" s2: \\"billion\\" Output False Function Signature: ``` def are_anagrams(s1: str, s2: str) -> bool: # your code here ``` Constraints: - The given strings can contain lower case English letters only. - The length of each string is n (1 ≤ n ≤ 10^5). Note: You should aim to achieve this with a time complexity of O(n).","solution":"def are_anagrams(s1: str, s2: str) -> bool: Determine if two strings are anagrams of each other. Args: s1 (str): First string s2 (str): Second string Returns: bool: True if s1 and s2 are anagrams, False otherwise from collections import Counter if len(s1) != len(s2): return False return Counter(s1) == Counter(s2)"},{"question":"Molly is participating in a marathon which involves running on a linear track of length `n` meters. There are markers placed at various positions along the track to indicate different distances. Molly needs to know the minimum number of steps required to reach these markers from the start of the track. Each step Molly takes can cover a distance between `1` to `k` meters, inclusive. Given this information, determine how many steps Molly needs to take to reach each specified marker. -----Input----- The first line contains two integers `n` and `k` (1 ≤ n, k ≤ 10^5), representing the length of the track and the maximum distance Molly can cover in a single step, respectively. The second line contains an integer `m` (1 ≤ m ≤ 10^5), the number of markers. The third line contains `m` integers `d_1, d_2, ..., d_m` (1 ≤ d_i ≤ n), the positions of the markers Molly needs to reach. -----Output----- Print `m` lines to the standard output. The i-th line should contain an integer, representing the minimum number of steps required for Molly to reach the `i-th` marker. -----Examples----- Input 10 3 3 1 5 10 Output 1 2 4 -----Explanation----- For the sample input: - To reach the marker at position `1`, Molly needs `1` step. - To reach the marker at position `5`, Molly needs `2` steps, e.g., (step sizes can be 3+2 or 2+3). - To reach the marker at position `10`, Molly needs `4` steps, e.g., (step sizes can be 3+3+3+1 or 2+2+2+2+2 or other valid combinations).","solution":"def min_steps_to_markers(n, k, markers): Given the length of the track n and the maximum distance k that can be covered in a single step, this function computes the minimum number of steps required to reach each marker. Parameters: n (int): The length of the track. k (int): The maximum distance Molly can cover in a single step. markers (list): A list of integers indicating the positions of the markers. Returns: list: A list of integers representing the minimum number of steps to each marker position. results = [] for marker in markers: results.append((marker + k - 1) // k) return results"},{"question":"# Problem Statement You are given a list of integers representing the values of coins. You are also given an integer representing the total amount of money you need to make. Write a function that determines the minimum number of coins needed to make the exact amount. If it\'s not possible to make the amount with the given coins, return -1. Constraints: - The list of coins will have at most 50 elements. - Each coin value is a positive integer not greater than 10,000. - The total amount of money to make is not greater than 50,000. **Input** Input is given from standard input in the following format: - The first line contains an integer `N` — the number of different coin values. - The second line contains `N` space-separated integers representing the values of the coins. - The third line contains an integer `M` — the total amount of money you need to make. **Output** Output a single integer — the minimum number of coins needed to make the exact amount, or `-1` if it is not possible to make the amount. **Example** Input: ``` 3 1 2 5 11 ``` Output: ``` 3 ``` Explanation: To make the amount 11, you can use one 5-coin, one 5-coin, and one 1-coin, total 3 coins. **Example** Input: ``` 2 2 4 7 ``` Output: ``` -1 ``` Explanation: It\'s impossible to make the amount 7 with only the coins 2 and 4.","solution":"def min_coins_needed(n, coin_values, target_amount): Determines the minimum number of coins needed to make the exact target amount. Returns -1 if it\'s not possible. # Create an array to store the minimum number of coins for each amount # Initialize with a value higher than the maximum (target_amount + 1) dp = [float(\'inf\')] * (target_amount + 1) dp[0] = 0 # It takes 0 coins to make amount 0 # Update the dp array using the coin_values for coin in coin_values: for x in range(coin, target_amount + 1): dp[x] = min(dp[x], dp[x - coin] + 1) return dp[target_amount] if dp[target_amount] != float(\'inf\') else -1"},{"question":"Oz and Nakul are planning a series of collaborative projects. For each project, specific tasks need to be completed in a particular order. They need your help to determine the number of ways to complete the tasks given the dependencies. You are given a directed acyclic graph (DAG) representing tasks as nodes and dependencies as directed edges. Your task is to compute the number of valid topological ordering of the nodes for each project. Input: The first line of the input contains a single integer T denoting the number of test cases. The first line of each test case contains two integers N and M where N represents the number of tasks (nodes) and M represents the number of dependencies (edges). The next M lines for each test case contain two integers u and v, denoting a directed edge from task u to task v (meaning task u must be completed before task v). Output: For each test case, output the number of valid topological orderings of the tasks, modulo 10^9+7. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 0 ≤ M ≤ min(1000, (N * (N - 1)) / 2) 1 ≤ u, v ≤ N Note: - A topological ordering of a DAG is a linear ordering of its nodes such that for every directed edge uv, node u comes before node v in the ordering. - All given graphs are DAGs (no cycles). SAMPLE INPUT 2 3 2 1 2 1 3 4 3 1 2 2 3 3 4 SAMPLE OUTPUT 2 1 Explanation: For the first sample, the valid topological orderings are: 1. 1 -> 2 -> 3 2. 1 -> 3 -> 2 For the second sample, there\'s only one valid topological ordering: 1. 1 -> 2 -> 3 -> 4","solution":"def count_topological_sorts(n, edges): MOD = 10**9 + 7 from itertools import permutations def is_valid_topo_sort(order): pos = {order[i]: i for i in range(n)} for u, v in edges: if pos[u] >= pos[v]: return False return True nodes = list(range(1, n + 1)) valid_sorts = 0 for perm in permutations(nodes): if is_valid_topo_sort(perm): valid_sorts += 1 return valid_sorts % MOD def solve_topological_sort_cases(T, test_cases): results = [] for n, m, edges in test_cases: result = count_topological_sorts(n, edges) results.append(result) return results"},{"question":"A local artist wants to create a unique sculpture consisting of several geometric shapes arranged together. The sculpture should be anchored to the ground with pegs placed at specified coordinates. Given n pegs, the artist needs to use the shortest possible rope to connect the pegs in a closed loop in a way that it passes through each peg exactly once. The artist has asked you to help compute this minimum rope length. ---Input--- The first line contains one integer n indicating the number of pegs. Each of the following n lines contains two space-separated integers x and y, representing the coordinates of each peg. ---Output--- Output the length of the shortest rope, rounded to two decimal places. ---Limits--- - 3 leq n leq 100 - -1000 leq x, y leq 1000 ---Examples--- Sample Input: 4 0 0 2 0 2 2 0 2 Sample Output: 8.00","solution":"import itertools import math def euclidean_distance(point1, point2): Calculates the Euclidean distance between two points. return math.sqrt((point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2) def minimum_rope_length(pegs): Computes the minimum length of rope required to connect all pegs in a closed loop. n = len(pegs) min_length = float(\'inf\') permutations = itertools.permutations(pegs) for perm in permutations: length = 0 for i in range(n): length += euclidean_distance(perm[i], perm[(i + 1) % n]) min_length = min(min_length, length) return round(min_length, 2) def read_input(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) pegs = [(int(data[i * 2 + 1]), int(data[i * 2 + 2])) for i in range(n)] return pegs if __name__ == \\"__main__\\": pegs = read_input() print(minimum_rope_length(pegs))"},{"question":"Write a function that determines the minimum number of operations required to reduce a given number `N` to 1. An operation can be one of the following: 1. If `N` is divisible by 2, divide it by 2. 2. If `N` is divisible by 3, divide it by 3. 3. Subtract 1 from `N`. Example 1: Input: N = 10 Output: 3 Explanation: Step 1: 10 / 2 = 5 Step 2: 5 - 1 = 4 Step 3: 4 / 2 = 2 Step 4: 2 / 2 = 1 Total steps = 3 Example 2: Input: N = 7 Output: 3 Explanation: Step 1: 7 - 1 = 6 Step 2: 6 / 3 = 2 Step 3: 2 / 2 = 1 Total steps = 3 Your Task: You do not need to read input or print anything. Your task is to complete the function minOperations() which takes a single integer N as input parameter and returns the minimum number of operations required to reduce N to 1. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 10^6","solution":"def min_operations(N): Returns the minimum number of operations required to reduce N to 1. if N <= 1: return 0 dp = [0] * (N + 1) for i in range(2, N + 1): dp[i] = dp[i - 1] + 1 if i % 2 == 0: dp[i] = min(dp[i], dp[i // 2] + 1) if i % 3 == 0: dp[i] = min(dp[i], dp[i // 3] + 1) return dp[N]"},{"question":"Background: You have recently joined a team that is developing a new file system. One of your tasks is to implement a compact method for encoding file paths. In this file system, each path consists of directories and sub-directories, which are represented as a string of directory names separated by slashes (`/`). For example: `folder/subfolder/file.txt`. To help with performance, the file system will use a compressed version of these paths where sequences of identical sub-directory names are represented as a name followed by the number of times it appears consecutively. For example: `a/a/a/b` would be compressed to `a3/b`. ___ Task: Write a function that takes a file path as a string and returns the compressed version of that path. **Note**: The input string will consist of lowercase alphabet letters and slashes only. Examples: ``` \\"path/compression/compression/compression/test\\" => \\"path/compression3/test\\" \\"a/b/b/b/b/c/c/d/d/d/d/d\\" => \\"a/b4/c2/d5\\" \\"folder/subfolder/file.txt\\" => \\"folder/subfolder/file.txt\\" ```","solution":"def compress_path(path: str) -> str: Compress a file path by replacing sequences of identical sub-directory names with the name followed by the number of occurrences. :param path: The input file path :type path: str :return: The compressed file path :rtype: str if not path: return \\"\\" parts = path.split(\'/\') compressed_parts = [] current = parts[0] count = 1 for part in parts[1:]: if part == current: count += 1 else: if count > 1: compressed_parts.append(f\\"{current}{count}\\") else: compressed_parts.append(current) current = part count = 1 if count > 1: compressed_parts.append(f\\"{current}{count}\\") else: compressed_parts.append(current) return \\"/\\".join(compressed_parts)"},{"question":"You are given an n x n matrix filled with integers. Your task is to write a program that finds the size of the largest square submatrix that consists entirely of the same integer. The size of a square submatrix is defined as the number of rows (or columns) it spans. Input: - The first line contains a single integer n (1 ≤ n ≤ 1000) which represents the dimensions of the matrix. - The following n lines each contain n integers, separated by spaces, representing the elements of the matrix. Output: - Print a single integer – the size of the largest square submatrix consisting of the same integer. Examples: Input: 4 1 2 3 4 5 5 5 5 5 5 5 5 7 8 9 0 Output: 2 Input: 3 1 1 1 1 2 2 1 2 2 Output: 2 Input: 5 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 Output: 5 Explanation: In the first example, the largest square submatrix consists of the value 5 and has a size of 2x2. In the second example, the largest square submatrix consists of the value 2 and has a size of 2x2. In the third example, the entire matrix is a square submatrix consisting of the value 1 and has a size of 5x5.","solution":"def largest_square_submatrix(n, matrix): if n == 0: return 0 dp = [[1] * n for _ in range(n)] max_size = 1 for i in range(1, n): for j in range(1, n): if matrix[i][j] == matrix[i-1][j] == matrix[i][j-1] == matrix[i-1][j-1]: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_size = max(max_size, dp[i][j]) return max_size"},{"question":"# Task Write a function that sorts the characters in a string based on their frequency in descending order. If two characters have the same frequency, they should appear in ascending order in the final result. # Example For `str = \\"tree\\"` The result should be `\\"eert\\"` or `\\"eetr\\"` For `str = \\"cccaaa\\"` The result should be `\\"aaaccc\\"` For `str = \\"Aabb\\"` The result should be `\\"bbAa\\"` or `\\"bbaA\\"` # Input/Output - `[input]` string `str` - `[output]` a string","solution":"from collections import Counter def sort_characters_by_frequency(s): Sorts characters in a string based on their frequency in descending order. If two characters have the same frequency, they will appear in ascending order. :param s: Input string :return: Sorted string based on character frequency and then lexicographical order # Create a counter to count the frequency of each character freq = Counter(s) # Sort the characters first by frequency in descending order, then by character in ascending order sorted_chars = sorted(freq.items(), key=lambda item: (-item[1], item[0])) # Construct the result based on sorted characters and their frequencies result = \'\'.join(char * count for char, count in sorted_chars) return result"},{"question":"Consider a 2D grid of size `n x n` filled with integers. A `peak` element is an element that is strictly greater than its neighbors. A peak element in the grid is defined as an element that is greater than or equal to the elements directly adjacent above, below, left, and right of it. Assume grid boundaries are lower neighbors. Your task is to find one peak element in the grid. If multiple peak elements exist, return any one of them. ------ Input Format ------ The first line of input contains a single integer n, the size of the grid. The next n lines each contain n integers separated by spaces, representing the elements of the grid. ------ Output Format ------ Output a single integer, which is the value of any peak element in the grid. ------ Constraints ------ 1 ≤ n ≤ 100 The elements of the grid are integers between -10^4 and 10^4. ----- Sample Input 1 ------ 3 10 20 15 21 30 14 7 16 32 ----- Sample Output 1 ------ 30 ----- Explanation 1 ------ 30 is greater than 20, 21, 14, and 16 which are its direct neighbors. ----- Sample Input 2 ------ 3 1 2 3 4 5 6 7 8 9 ----- Sample Output 2 ------ 9 ----- Explanation 2 ------ 9 is greater than its only two direct neighbors 6 and 8.","solution":"def find_peak_element(grid): Given a 2D grid of integers, find one peak element in the grid. A peak element is an element which is greater than or equal to its directly adjacent neighbors. n = len(grid) def is_peak(i, j): current = grid[i][j] if i > 0 and current < grid[i-1][j]: return False if i < n-1 and current < grid[i+1][j]: return False if j > 0 and current < grid[i][j-1]: return False if j < n-1 and current < grid[i][j+1]: return False return True for i in range(n): for j in range(n): if is_peak(i, j): return grid[i][j] return None # if no peak is found (though there should always be at least one peak)"},{"question":"Given a list of integers representing the stock prices of a company over N days, you need to find a contiguous subarray (containing at least one number) which has the highest profit. In other words, you need to find the maximum possible sum of the differences between consecutive days\' stock prices (buying the stock on one day at the opening price and selling it on a future day at the opening price). -----Input----- - The first line contains an integer N (1 le N le 10^5), the number of days. - The second line contains N integers, each representing the stock price on a particular day. Each integer will be between -10^4 and 10^4 inclusive. -----Output----- - One line containing the maximum profit obtainable from the specified array. -----Examples----- Sample Input 1: 6 -10 1 3 -2 4 -1 Sample Output 1: 6 Sample Input 2: 5 1 -2 3 10 -4 Sample Output 2: 13","solution":"def max_profit(prices): Returns the maximum possible profit obtainable from a contiguous subarray of stock prices. max_current = max_global = prices[0] for price in prices[1:]: max_current = max(price, max_current + price) if max_current > max_global: max_global = max_current return max_global"},{"question":"A small village has N houses arranged linearly, each represented by its coordinates on a number line. You need to construct M wells, where each well\'s range of water supply is a fixed distance D to the left and right. Determine if it is possible to place all M wells such that every house is within the range of at least one well. -----Constraints----- - 1 leq N leq 100 - 1 leq M leq 100 - 1 leq D leq 100 - The coordinates of the houses are integers and given in sorted order. -----Input----- Input is given from Standard Input in the following format: N M D x1 x2 x3 ... xN -----Output----- If it is possible to place all M wells such that every house is within the range of at least one well, print YES; if it is impossible, print NO. -----Sample Input----- 5 2 3 1 2 5 8 12 -----Sample Output----- YES By placing the wells at coordinates 4 and 9, all houses are within the range of at least one well. -----Sample Input----- 4 1 2 1 4 7 10 -----Sample Output----- NO With only one well, it is not possible to cover all the houses with the given range D = 2.","solution":"def can_place_wells(N, M, D, houses): Determines if it is possible to place M wells such that every house is within the range of at least one well. Parameters: N (int): Number of houses M (int): Number of wells D (int): Range of each well (distance to the left and right) houses (list of int): Coordinates of the houses Returns: str: \\"YES\\" if it is possible to place all M wells such that every house is within the range of at least one well, otherwise \\"NO\\" # Total length the well can cover total_range = 2 * D + 1 # Required number of wells based on maximum distance between houses required_wells = 0 i = 0 while i < N: required_wells += 1 # Place a well at the furthest house within current range well_position = houses[i] + D # Move to the rightmost house covered by this well while i < N and houses[i] <= well_position + D: i += 1 if required_wells > M: return \\"NO\\" return \\"YES\\" if required_wells <= M else \\"NO\\""},{"question":"Implement a `Queue` class using two stacks. A queue is a linear data structure that follows the First In First Out (FIFO) principle. This means that the first element added to the queue will be the first one to be removed. In contrast, a stack is a linear data structure that follows the Last In First Out (LIFO) principle, meaning that the last element added to the stack will be the first one to be removed. In this task, you need to implement the `Queue` class using two stacks. Your `Queue` class should support the following operations: - `enqueue(element)`: Add an element to the end of the queue. - `dequeue()`: Remove and return the element from the front of the queue. If the queue is empty, return `None`. - `peek()`: Return the element at the front of the queue without removing it. If the queue is empty, return `None`. - `is_empty()`: Return `True` if the queue is empty, otherwise return `False`. - `size()`: Return the number of elements in the queue. Example: ```python queue = Queue() queue.enqueue(1) queue.enqueue(2) queue.enqueue(3) print(queue.dequeue()) # Output: 1 print(queue.peek()) # Output: 2 print(queue.is_empty()) # Output: False print(queue.size()) # Output: 2 queue.enqueue(4) queue.enqueue(5) print(queue.dequeue()) # Output: 2 print(queue.dequeue()) # Output: 3 print(queue.dequeue()) # Output: 4 print(queue.dequeue()) # Output: 5 print(queue.dequeue()) # Output: None print(queue.is_empty()) # Output: True print(queue.size()) # Output: 0 ``` **Hint**: 1. Use one stack for enqueue operations and another stack for dequeue operations. 2. When dequeuing, if the dequeue stack is empty, transfer all elements from the enqueue stack to the dequeue stack. # Implementation: ```python class Queue: def __init__(self): self.in_stack = [] self.out_stack = [] def enqueue(self, element): self.in_stack.append(element) def dequeue(self): if not self.out_stack: while self.in_stack: self.out_stack.append(self.in_stack.pop()) if self.out_stack: return self.out_stack.pop() return None def peek(self): if not self.out_stack: while self.in_stack: self.out_stack.append(self.in_stack.pop()) if self.out_stack: return self.out_stack[-1] return None def is_empty(self): return not self.in_stack and not self.out_stack def size(self): return len(self.in_stack) + len(self.out_stack) ``` Your use of the `Queue` class should be similar to the example provided. You should ensure that your solution adheres to the principles of a FIFO queue while using two stacks to manage the operations.","solution":"class Queue: def __init__(self): self.in_stack = [] self.out_stack = [] def enqueue(self, element): Add an element to the end of the queue. self.in_stack.append(element) def dequeue(self): Remove and return the element from the front of the queue. If the queue is empty, return None. if not self.out_stack: while self.in_stack: self.out_stack.append(self.in_stack.pop()) if self.out_stack: return self.out_stack.pop() return None def peek(self): Return the element at the front of the queue without removing it. If the queue is empty, return None. if not self.out_stack: while self.in_stack: self.out_stack.append(self.in_stack.pop()) if self.out_stack: return self.out_stack[-1] return None def is_empty(self): Return True if the queue is empty, otherwise return False. return not self.in_stack and not self.out_stack def size(self): Return the number of elements in the queue. return len(self.in_stack) + len(self.out_stack)"},{"question":"You are given an array of N integers A_1, A_2, ..., A_N. Each integer in the array is either 0 or 1. Your objective is to make all the integers in the array equal to 1. To achieve this, you can perform the following operation any number of times: Operation: Select two indices i and j (1 ≤ i, j ≤ N) and change A_i to A_i | A_j (bitwise OR operation). Determine the minimum number of operations required to make all integers in the array equal to 1. If it is impossible to make all numbers equal to 1, print -1. -----Constraints----- - 2 ≤ N ≤ 10^5 - A_i is either 0 or 1 -----Input----- Input is given from Standard Input in the following format: N A_1 A_2 ... A_N -----Output----- Print the minimum number of operations required to make all integers in the array equal to 1. If it is impossible, print -1. -----Sample Input 1----- 4 0 1 0 1 -----Sample Output 1----- 2 You can change A_1 to A_1 | A_2 (0 | 1 = 1) and A_3 to A_3 | A_4 (0 | 1 = 1). -----Sample Input 2----- 3 0 0 0 -----Sample Output 2----- -1 It is impossible to make all integers in the array equal to 1 since there is no 1 to perform the operation with.","solution":"def min_operations_to_all_ones(N, A): Determines the minimum number of operations required to make all elements in the array equal to 1, or returns -1 if impossible. Parameters: N (int): The number of elements in the array. A (list of int): The list of elements in the array, where each element is 0 or 1. Returns: int: The minimum number of operations required, or -1 if impossible. # If there are no `1`s in the array, it is impossible to make all elements 1 if all(a == 0 for a in A): return -1 # Count the number of 0s in the array count_zeros = A.count(0) # If there are no zeros, no operations are required if count_zeros == 0: return 0 # The minimum number of operations needed is equal to the number of 0s return count_zeros"},{"question":"Emma loves reading books and has a collection of books categorized by their genres. She wants to ensure that she reads an equal number of books from each genre every month. She needs your help to organize her reading list for the upcoming months. -----Input:----- - The first line of the input contains a single integer T, denoting the number of test cases. - The next line of the input contains a single integer N, denoting the total number of books in Emma\'s collection. - The following line contains N space-separated integers where each integer Gi represents the genre of the i-th book. -----Output:----- - For each test case, print \\"Possible\\" (without quotes) if Emma can read an equal number of books from each genre every month, else print \\"Not Possible\\" (without quotes). -----Constraints:----- - 1 leq T leq 10^3 - 1 leq N leq 10^5 - 1 leq Gi leq 10^4 -----Sample Input:----- 1 6 1 2 2 1 1 2 -----Sample Output:----- Possible -----Explanation:----- - For the given list of books, there are 3 books from genre 1 and 3 books from genre 2. Emma can read 1 book from each genre every month for 3 months. Since the number of books for each genre is the same, it is \\"Possible\\" for her to distribute them equally.","solution":"def can_distribute_equally(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] genres = test_cases[i][1] genre_count = {} for genre in genres: if genre in genre_count: genre_count[genre] += 1 else: genre_count[genre] = 1 counts = list(genre_count.values()) if len(set(counts)) == 1: results.append(\\"Possible\\") else: results.append(\\"Not Possible\\") return results"},{"question":"Write a function that takes two integers `n` and `m`, and returns a list containing the first `n` multiples of `m`. Example: If `n` is 5 and `m` is 3, the function should return `[3, 6, 9, 12, 15]`. If `n` is negative or zero, return an empty list. **Constraints**: - The function should handle both positive and negative values of `m`. - Ensure the function performs efficiently for larger values of `n`. **Function Signature**: ```python def multiples(n: int, m: int) -> List[int]: pass ```","solution":"from typing import List def multiples(n: int, m: int) -> List[int]: Returns a list containing the first `n` multiples of `m`. if n <= 0: return [] return [i * m for i in range(1, n + 1)]"},{"question":"Four friends are at a music festival. They want to split up and meet again later at the same spot. Each wants to explore different parts of the festival, and each will walk at a different pace. Each friend walks in a straight line away from the meeting spot, but when finished, wants to return to the meeting spot by the shortest straight-line path. However, the festival is packed and it takes extra time to navigate through the crowd. We are given the estimated additional time it takes for each friend to return to the meeting spot once they decide to start heading back. Write a program that determines the total time each friend will spend, including time walking away, walking back, and the additional crowd navigation time. Your task is to calculate the total time for each friend accurately. Constraints * Distance walked away from the meeting spot does not exceed 1000 meters. * Speed of walking (in meters per minute) by each friend does not exceed 20 meters per minute. * Additional navigation time does not exceed 500 minutes. * All input values are positive integers. Input The input is given from Standard Input in the following format: d1 s1 t1 d2 s2 t2 d3 s3 t3 d4 s4 t4 * d1, d2, d3, d4: Distances each friend walks away from the meeting spot in meters. * s1, s2, s3, s4: Walking speed of each friend in meters per minute. * t1, t2, t3, t4: Additional navigation times for each friend to return to the meeting spot in minutes. Output Print the total time each friend spends to Standard Output, each on a new line. Examples Input 500 10 30 300 5 20 700 14 50 200 4 10 Output 130 140 150 110","solution":"def calculate_total_time(d1, s1, t1, d2, s2, t2, d3, s3, t3, d4, s4, t4): Calculates the total time each friend spends including walking away, walking back, and additional crowd navigation time. def total_time(d, s, t): # One way time walk_away_time = d / s # Return time walk_back_time = d / s # Total time return walk_away_time + walk_back_time + t # Calculate total times for all friends total_time1 = total_time(d1, s1, t1) total_time2 = total_time(d2, s2, t2) total_time3 = total_time(d3, s3, t3) total_time4 = total_time(d4, s4, t4) # Printing the results as required print(int(total_time1)) print(int(total_time2)) print(int(total_time3)) print(int(total_time4))"},{"question":"A coding bootcamp has designed a special type of matrix called a \\"Diagonal Matrix\\" where only the diagonal elements have non-zero values. They plan to use it in one of their projects and need a function to generate such a matrix. The matrix should be an n x n square matrix, where n is the order of the matrix. To generate a diagonal matrix, the input will be n, the order of the matrix and a list of n non-zero integers. Each integer in the list will be placed at the respective diagonal positions in the matrix. Your task is to help them by writing a function that takes the integer n and the list of n integers as input and returns the corresponding diagonal matrix. Input - The first line contains the integer n (1 ≤ n ≤ 100). - The second line contains n non-zero integers separated by spaces. Output - Output the n x n diagonal matrix as n lines, where each line contains n integers separated by spaces. Example Input: 3 2 5 7 Output: 2 0 0 0 5 0 0 0 7 Explanation The given order of matrix is 3. The list contains three non-zero integers: 2, 5, and 7. These should be placed diagonally in the matrix like so: - The position (1,1) should have 2 - The position (2,2) should have 5 - The position (3,3) should have 7 The rest of the positions should be filled with zeros.","solution":"def generate_diagonal_matrix(n, diag_values): Generates an n x n diagonal matrix with given diagonal values. Args: n (int): The order of the matrix. diag_values (list of int): The values to place on the diagonal. Returns: list of list of int: The n x n diagonal matrix. # Initialize the matrix with zeros matrix = [[0] * n for _ in range(n)] # Place the diagonal values in the matrix for i in range(n): matrix[i][i] = diag_values[i] return matrix"},{"question":"Leo is a master gardener who loves to arrange his garden in an aesthetically pleasing manner. Recently, he has decided to plant a line of N magical flowers in a row, where each flower has a certain height. Leo wants the flowers to be arranged such that each flower is not taller than the flower immediately following it. However, instead of rearranging the flowers manually, he uses his magic to increase the height of some flowers to achieve the desired arrangement. The cost of this magic depends on the number of units each flower\'s height is increased. You need to help Leo determine the minimum total cost required to make the heights of the flowers non-decreasing from left to right. Input The first line of the input contains a single integer N denoting the number of flowers. The second line contains N space-separated integers, representing the initial heights of the flowers. Output Output a single integer denoting the minimum total cost of making the heights of the flowers non-decreasing. Constraints 1 ≤ N ≤ 1000 1 ≤ Initial height of each flower ≤ 1000 Example Input: 5 4 2 3 1 5 Output: 5 Explanation: One possible way to achieve the non-decreasing height with the minimum cost: - Increase the height of the second flower from 2 to 4 at a cost of 2. - Increase the height of the third flower from 3 to 4 at a cost of 1. - Increase the height of the fourth flower from 1 to 4 at a cost of 3. Total cost = 2 + 1 + 3 = 6","solution":"def minimum_total_cost(N, heights): Determines the minimum total cost required to make the heights of the flowers non-decreasing. Parameters: N (int): The number of flowers. heights (list of int): The initial heights of the flowers. Returns: int: The minimum total cost. total_cost = 0 for i in range(1, N): if heights[i] < heights[i - 1]: total_cost += (heights[i - 1] - heights[i]) heights[i] = heights[i - 1] return total_cost"},{"question":"Given an array of integers, re-arrange the elements such that all negative integers appear before all positive integers while maintaining the relative order of negative and positive integers as in the original array. # Input - The first line contains an integer `n` (1 ≤ n ≤ 100), the size of the array. - The second line contains `n` space-separated integers which can be both negative and positive. # Output - Print the re-arranged array with all negatives followed by all positives maintaining their initial order. # Example Input: 6 -1 2 -3 4 5 -6 Output: -1 -3 -6 2 4 5 Input: 4 1 -2 3 -4 Output: -2 -4 1 3","solution":"def rearrange_array(n, arr): Rearrange the array such that all negative integers appear before all positive integers while maintaining the relative order of negative and positive integers as in the original array. Parameters: n (int): Size of the array. arr (list): List of n integers which can be both negative and positive. Returns: list: A new list with negative integers appearing before all positive integers. negatives = [x for x in arr if x < 0] positives = [x for x in arr if x >= 0] return negatives + positives"},{"question":"You are tasked with developing a device to help a local university monitor and control the temperature of their data center. The system should maintain a log of temperature readings and perform several types of queries on the recorded data. Problem Statement Implement a system that can: 1. Record new temperature readings. 2. Retrieve the highest temperature recorded during a given time period. 3. Retrieve the lowest temperature recorded during a given time period. 4. Retrieve the average temperature over a specific time period. Input The input starts with an integer `n` (1 ≤ n ≤ 100,000) representing the number of temperature recordings that will be provided. Each of the next `n` lines contains two integers `ti` (1 ≤ ti ≤ 10^9) and `vi` (-100 ≤ vi ≤ 100) representing a timestamp and the temperature recorded at that timestamp respectively. Following this, there will be an integer `q` (1 ≤ q ≤ 100,000) representing the number of queries. Each of the next `q` lines contains one of the following types of queries: - `\\"1 l r\\"`: Retrieve the highest temperature recorded between timestamps `l` and `r` inclusive. - `\\"2 l r\\"`: Retrieve the lowest temperature recorded between timestamps `l` and `r` inclusive. - `\\"3 l r\\"`: Retrieve the average temperature recorded between timestamps `l` and `r` inclusive. Output For each query, output the result on a new line in the order they were received. # Note - The time period `[l, r]` for each query is guaranteed to contain at least one temperature recording. - When calculating the average temperature, the result should be rounded to the nearest integer. # Example Input ``` 5 1 10 2 -5 3 20 4 15 5 -10 3 1 2 4 2 1 3 3 1 5 ``` Output ``` 20 -5 6 ``` # Explanation For the provided example: 1. The highest temperature between timestamp 2 and 4 is 20. 2. The lowest temperature between timestamp 1 and 3 is -5. 3. The average temperature between timestamp 1 and 5 is (10 -5 + 20 + 15 - 10) / 5 = 30 / 5 = 6. Develop an efficient solution to handle large input sizes and provide quick responses for each type of query.","solution":"from collections import defaultdict from bisect import bisect_left, bisect_right class TemperatureMonitor: def __init__(self): self.timestamps = [] self.temperatures = [] self.temperature_dict = defaultdict(list) def record(self, ti, vi): self.timestamps.append(ti) self.temperatures.append(vi) self.temperature_dict[ti] = vi def prepare(self): self.timestamps.sort() self.sorted_temperatures = [self.temperature_dict[ts] for ts in self.timestamps] def highest_temperature(self, l, r): l_idx = bisect_left(self.timestamps, l) r_idx = bisect_right(self.timestamps, r) - 1 return max(self.sorted_temperatures[l_idx:r_idx+1]) def lowest_temperature(self, l, r): l_idx = bisect_left(self.timestamps, l) r_idx = bisect_right(self.timestamps, r) - 1 return min(self.sorted_temperatures[l_idx:r_idx+1]) def average_temperature(self, l, r): l_idx = bisect_left(self.timestamps, l) r_idx = bisect_right(self.timestamps, r) - 1 total_temp = sum(self.sorted_temperatures[l_idx:r_idx+1]) count = r_idx - l_idx + 1 return round(total_temp / count) def process_queries(n, records, q, queries): monitor = TemperatureMonitor() for ti, vi in records: monitor.record(ti, vi) monitor.prepare() results = [] for query in queries: qtype, l, r = query if qtype == 1: results.append(monitor.highest_temperature(l, r)) elif qtype == 2: results.append(monitor.lowest_temperature(l, r)) elif qtype == 3: results.append(monitor.average_temperature(l, r)) return results"},{"question":"A group of friends wants to participate in a relay race. The race track is divided into N segments, each segment potentially having a different terrain and thus, a different time to traverse. The team consists of K runners, and each runner can only cover contiguous segments. The task is to minimize the maximum time taken by any single runner to complete their assigned segments. Given an array `time[]` of size N, where `time[i]` represents the time to traverse the i-th segment, determine the minimal maximum segment time that any runner will need to cover if the workload is distributed optimally. Input: First line contains T, the number of test cases. For each test case, the first line contains two space-separated integers N and K. The second line contains N space-separated integers representing the array `time[]`. Output: For each test case, output the minimum possible maximum time per runner in a new line. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^4 1 ≤ K ≤ N 1 ≤ time[i] ≤ 10^4 Sample Input: 2 5 2 1 2 3 4 5 4 3 2 1 4 2 Sample Output: 9 4","solution":"def can_divide_with_max_time(time, N, K, max_time): Helper function to decide if it is possible to divide the segments such that no runner has to cover more than max_time. current_sum = 0 required_runners = 1 for t in time: if current_sum + t > max_time: required_runners += 1 current_sum = t if required_runners > K: return False else: current_sum += t return True def minimize_max_time(T, test_cases): results = [] for case in test_cases: N, K = case[0] time = case[1] left = max(time) # Minimum possible value for max_time right = sum(time) # Maximum possible value for max_time while left < right: mid = (left + right) // 2 if can_divide_with_max_time(time, N, K, mid): right = mid else: left = mid + 1 results.append(left) return results def process_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N, K = map(int, lines[index].split()) time = list(map(int, lines[index + 1].split())) test_cases.append(((N, K), time)) index += 2 return T, test_cases def main(input_data): T, test_cases = process_input(input_data) results = minimize_max_time(T, test_cases) for result in results: print(result) # Sample usage input_data = \'\'\'2 5 2 1 2 3 4 5 4 3 2 1 4 2\'\'\' main(input_data)"},{"question":"Alice and Bob are two friends who enjoy solving number problems. Alice gives Bob a list of integers and a specific sum value called \\"targetSum\\". Bob\'s task is to find all unique pairs of integers in the list that add up to the targetSum. Write a function to help Bob solve this problem. The function should return a list of tuples, where each tuple represents a unique pair of integers that sum up to the targetSum. Each pair should be sorted in increasing order, and the list of tuples should be sorted in lexicographical order. **Function Signature:** ```python def find_pairs(numbers: List[int], targetSum: int) -> List[Tuple[int, int]]: ``` **Input:** - `numbers`: A list of integers where each integer can be positive, negative, or zero. - `targetSum`: An integer representing the sum value for which pairs need to be found. **Output:** - A list of tuples representing all unique pairs of integers that add up to the targetSum, sorted as per the requirements mentioned. **Constraints:** - Each integer in the list can range from -10^5 to 10^5. - The length of the list can be at most 10^4. - Each integer in the list may appear multiple times. **Example:** **Input:** ```python numbers = [1, 2, 3, 4, 5, -1, -2, -3] targetSum = 4 ``` **Output:** ```python [(-1, 5), (1, 3)] ``` **Explanation:** - The unique pairs that sum up to 4 are (-1, 5) and (1, 3). - The pairs are sorted in lexicographical order. **Input:** ```python numbers = [1, 1, 2, 2, 3, 3, 4, 4] targetSum = 5 ``` **Output:** ```python [(1, 4), (2, 3)] ``` **Explanation:** - The unique pairs that sum up to 5 are (1, 4) and (2, 3). - Although the input list has duplicates, the function handles uniqueness and avoids repeated pairs. Use the constraints and examples provided to test and validate your solution.","solution":"from typing import List, Tuple def find_pairs(numbers: List[int], targetSum: int) -> List[Tuple[int, int]]: Returns all unique pairs of integers in the list that sum up to the targetSum. Each pair is sorted in increasing order, and the result list is sorted lexicographically. seen = {} pairs = set() for number in numbers: complement = targetSum - number if complement in seen: pairs.add(tuple(sorted((number, complement)))) seen[number] = 1 # mark the number as seen return sorted(pairs)"},{"question":"You are given a sequence of N positive integers and an integer K. Your task is to determine the minimum number of operations required to make the sequence a strictly increasing sequence, where an operation is defined as: 1. Select any element of the sequence and increase its value by 1. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two space-separated integers N and K. The second line contains N space-separated integers a_{1}, a_{2}, ldots, a_{N} denoting the sequence. ------ Output ------ For each test case, print a single line containing one integer ― the minimum number of operations required to make the sequence strictly increasing. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 100,000 1 ≤ a_{i} ≤ 10^{9} for each valid i 1 ≤ K ≤ 10^{9} ----- Sample Input 1 ------ 1 4 2 1 2 3 2 ----- Sample Output 1 ------ 2 ------ Explanation 1 ------ Example case 1: In the given sequence, the last element is not larger than the previous element. We need to perform at least 2 operations to increase the last element to 4 (1 operation to increase it from 2 to 3, and another operation to increase it from 3 to 4) so that the sequence becomes [1, 2, 3, 4], which is strictly increasing. In cases where the sequence already contains elements greater than K, we need to ensure that subsequent elements are at least K units greater than their preceding elements.","solution":"def min_operations_to_increasing_sequence(N, K, sequence): operations = 0 for i in range(1, N): if sequence[i] <= sequence[i - 1]: required_increment = (sequence[i - 1] - sequence[i]) + 1 sequence[i] += required_increment operations += required_increment return operations def solve(test_cases): results = [] for N, K, sequence in test_cases: result = min_operations_to_increasing_sequence(N, K, sequence) results.append(result) return results"},{"question":"In a certain video game, there\'s a character that moves on a 2D grid. The grid has a size of n times m and is aligned in a way that (1, 1) is the top-left corner, and (n, m) is the bottom-right corner. The character initially starts at position (1, 1) and wants to reach the bottom-right corner (n, m). The character has two types of moves: - Move right: This move increases the current column by 1, i.e., from (i, j) to (i, j+1). - Move down: This move increases the current row by 1, i.e., from (i, j) to (i+1, j). There are obstacles on the grid. Some grid cells are blocked, and the character cannot move onto these cells. Given the configuration of the grid, your task is to determine the number of different paths the character can take from the start position (1, 1) to the end position (n, m). Note: - It is guaranteed that the starting and ending positions are not blocked. - A cell in the grid is marked with `1` if it\'s blocked, and `0` if it\'s free. -----Input----- The first line of input contains a single integer t (1 le t le 100), the number of test cases. Each test case starts with a line containing two integers n and m (1 le n, m le 100), specifying the number of rows and columns in the grid, respectively. This is followed by n lines, each with m integers, representing the grid. Each integer is either `0` or `1` where `0` indicates a free cell and `1` indicates a blocked cell. -----Output----- For each test case, print a single integer, the number of different paths from (1, 1) to (n, m). If there is no valid path, print `0`. -----Example----- Input 2 3 3 0 0 0 0 1 0 0 0 0 2 2 0 1 0 0 Output 2 1 -----Note----- For the first test case, the character can take the following paths: - (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) - (1,1) -> (1,2) -> (2,2) -> (2,3) -> (3,3) For the second test case, the character can only take the following path: - (1,1) -> (2,1) -> (2,2)","solution":"def num_paths_in_grid_with_obstacles(grids): Given multiple grid configurations marked with 0s (free cells) and 1s (blocked cells), this function returns the number of different paths from (1,1) to (n,m) for each grid. def count_paths(grid): n = len(grid) m = len(grid[0]) dp = [[0] * m for _ in range(n)] if grid[0][0] == 1 or grid[n-1][m-1] == 1: return 0 dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1] results = [] for grid in grids: results.append(count_paths(grid)) return results def process_input(t, test_cases): results = [] for case in test_cases: n = case[0] m = case[1] grid = case[2] paths = num_paths_in_grid_with_obstacles([grid]) results.append(paths[0]) return results"},{"question":"Write a function `findAnagrams` that takes a list of words and a target word, and returns a list of words from the input list that are anagrams of the target word. ```racket In Racket, the function is called find-anagrams. (find-anagrams \'(\\"listen\\", \\"silent\\", \\"enlist\\", \\"google\\", \\"golem\\") \\"tinsel\\") ; returns \'(\\"listen\\" \\"silent\\" \\"enlist\\") (find-anagrams \'(\\"rat\\", \\"tar\\", \\"art\\", \\"car\\") \\"star\\") ; returns \'() ```","solution":"def findAnagrams(words, target): Returns a list of words from the input list that are anagrams of the target word. Parameters: words (list of str): The list of words to search through. target (str): The target word to find anagrams of. Returns: list of str: A list of anagrams of the target word from the input list. sorted_target = sorted(target) anagrams = [word for word in words if sorted(word) == sorted_target] return anagrams"},{"question":"Katerina is organizing a charity run for her community. She\'s provided with n different trails numbered from 1 to n, each with a specific length t_i. Due to safety regulations, each runner must maintain a certain minimum distance from other runners. Thus, Katerina needs to split the runners into groups such that the total distance covered by each group does not exceed the maximum allowed distance d. Katerina will create groups in the following way: she starts with an empty group, goes through the trails from left to right, and adds the current trail to the group\'s total distance if the total distance does not exceed the allowed distance d. If adding the current trail would exceed d, she closes the current group, starts a new group, and continues this process. Katerina wants to know the minimum number of groups required to cover all the trails, obeying the maximum distance constraint on each group. Your task is to determine the minimum number of groups required based on the algorithm described. Each time Katerina forms a group, the total distance covered by that group cannot exceed the maximum allowed distance d. -----Input----- The first line of input contains two integers n and d (1 le n le 10^5, 1 le d le 10^9) — the number of trails and the maximum allowed distance of each group respectively. The second line contains n integers t_1, t_2, dots, t_n (1 le t_i le 10^9), where t_i is the length of the i-th trail. -----Output----- Print the minimum number of groups required to cover all trails, following the problem\'s constraints. -----Examples----- Input 5 10 1 2 3 4 5 Output 2 Input 6 15 5 6 7 8 9 10 Output 4 Input 3 5 2 2 2 Output 2 -----Note----- In the first example, Katerina can group the trails as follows: [1, 2, 3] and [4, 5]. This gives two groups within the allowed distance of 10. In the second example, Katerina groups them as: [5, 6], [7], [8], [9]. Another single trail [10] would exceed the allowed distance, so it is in its group. Thus, four groups are required. In the third example, the groups are [2, 2] and another group with the remaining [2]. This results in two groups with a maximum distance of 4, staying within the 5 limit.","solution":"def minimum_groups(n, d, t): Given n trails, each with a distance specified in list t, and a maximum allowed distance d, returns the minimum number of groups required such that the total distance of each group does not exceed d. num_groups = 0 current_distance = 0 for distance in t: if current_distance + distance > d: num_groups += 1 current_distance = distance else: current_distance += distance # If there\'s any distance left ungrouped, it forms the final group if current_distance > 0: num_groups += 1 return num_groups"},{"question":"Given an array of integers which represents the heights of stable building blocks where each element in the array represents the height of a block, you are required to print the minimum number of blocks to be removed so that no two adjacent blocks are of the same height. -----Input----- The first line of input contains a single integer N (1 le N le 10^5) — the number of blocks. The second line contains N integers a_1, a_2, ..., a_N (1 le a_i le 10^6) — the heights of the blocks. -----Output----- Output a single integer — the minimum number of blocks to be removed to ensure no two adjacent blocks have the same height. -----Example----- Input 8 3 3 2 1 3 3 2 1 Output 2 -----Note----- In the provided example, you can remove the 1st and 5th blocks (height 3). The array of heights will then become [3, 2, 1, 3, 2, 1], which meets the criteria of no two adjacent blocks having the same height. Alternatively, you can remove the 2nd and 6th blocks (height 3). The resulting array will then also meet the criteria.","solution":"def min_blocks_to_remove(n, heights): This function computes the minimum number of blocks to be removed so that no two adjacent blocks have the same height. Parameters: n (int): Number of blocks heights (list of int): List of heights of the blocks Returns: int: Minimum number of blocks to be removed if n == 1: return 0 remove_count = 0 for i in range(1, n): if heights[i] == heights[i - 1]: remove_count += 1 return remove_count"},{"question":"You are given a string of lowercase Latin letters and a list of queries. Each query specifies a character and asks for the length of the longest substring that contains only that character. Simple, right? -----Input----- The first line of input contains a single string s (1 leq |s| leq 10^5) consisting of lowercase Latin letters. The second line contains a single integer q (1 leq q leq 10^4), which is the number of queries. The next q lines each contain a character c (a lowercase Latin letter). -----Output----- For each query, output a single line with the length of the longest substring of s that consists solely of the character c. -----Examples----- Sample Input: abaaaabbcc 4 a b c d Sample Output: 4 2 2 0","solution":"def longest_substring_length(s, queries): Given a string and a list of queries, returns the length of the longest substring that contains only the specified character for each query. Parameters: s (str): The input string consisting of lowercase Latin letters. queries (list): A list of single characters for which to find the longest substring of `s` that consists solely of each character. Returns: list: A list of integers, where each integer is the result for the corresponding query in the `queries` list. # Dictionary to store the max substring length for each character max_lengths = {} # Traverse the string and keep track of the current character streak current_char = None current_length = 0 for char in s: if char == current_char: current_length += 1 else: if current_char is not None: if current_char not in max_lengths or current_length > max_lengths[current_char]: max_lengths[current_char] = current_length current_char = char current_length = 1 # Final update for the last streak if current_char is not None: if current_char not in max_lengths or current_length > max_lengths[current_char]: max_lengths[current_char] = current_length # Process each query and return the results result = [] for query in queries: result.append(max_lengths.get(query, 0)) return result"},{"question":"The town of Takahashi organizes a cycling event every weekend. The event\'s difficulty level varies cyclically based on wind strength over three weeks: Low, Medium, High, Low, Medium, High, ... Given a string W representing this week\'s wind strength, determine the event\'s difficulty level next week. Constraints * W is `Low`, `Medium`, or `High`. Input Input is given from Standard Input in the following format: W Output Print a string representing the event\'s difficulty level next week, in the same format in which the input is given. Examples Input Low Output Medium Input High Output Low","solution":"def next_week_difficulty(W): Given this week\'s wind strength W, return the event\'s difficulty level next week. wind_strength = [\\"Low\\", \\"Medium\\", \\"High\\"] next_index = (wind_strength.index(W) + 1) % 3 return wind_strength[next_index]"},{"question":"A librarian is managing a book inventory system. She needs to catalog a newly donated set of books by organizing them into different shelves. Each shelf can hold a limited number of books, and the librarian wants to maximize the total number of books placed on the shelves. ------ Input Format ------ - The first line contains a single integer T — the number of test cases. Then the test cases follow. - The first line of each test case contains two integers N and M — the number of books and the number of shelves, respectively. - The second line of each test case contains N integers representing the thickness of each book. - The third line contains M integers representing the maximum thickness capacity of each shelf. ------ Output Format ------ For each test case, output the maximum number of books that can be placed on the shelves. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N,M ≤ 1000 1 ≤ text{Thickness of each book} ≤ 1000 1 ≤ text{Capacity of each shelf} ≤ 10000 ------ Sample Input 1 ------ 2 5 3 2 3 4 5 6 10 10 10 4 2 1 2 2 3 3 5 ------ Sample Output 1 ------ 5 4 ------ Explanation 1 ------ Test case 1: The librarian can place books with thickness [2, 3, 4] on the first shelf, and books with thickness [5, 6] on the second shelf, using all shelves. Hence, she can place all 5 books. Test case 2: The librarian can place books with thickness [1, 2] on the first shelf, and books with thickness [2, 3] on the second shelf, using both shelves. Hence, she can place all 4 books.","solution":"def max_books_on_shelves(T, test_cases): results = [] for case in test_cases: N, M, book_thicknesses, shelf_capacities = case book_thicknesses.sort() shelf_capacities.sort(reverse=True) book_index = 0 books_placed = 0 for capacity in shelf_capacities: current_thickness = 0 while book_index < N and current_thickness + book_thicknesses[book_index] <= capacity: current_thickness += book_thicknesses[book_index] book_index += 1 books_placed += 1 if book_index >= N: break results.append(books_placed) return results"},{"question":"Write a program which determines if a given year is a leap year. Constraints * The year is a positive integer not greater than 10,000. Input The input consists of multiple datasets. Each dataset consists of a single integer year. The input ends with a single 0 (when the year is zero). Output For each dataset, print \\"Yes\\" if the given year is a leap year, otherwise print \\"No\\". Example Input 2000 1996 1900 2001 0 Output Yes Yes No No","solution":"def is_leap_year(year): Determines if a given year is a leap year. Returns \\"Yes\\" if the year is a leap year, otherwise \\"No\\". if year == 0: return None # Special case for input ending if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): return \\"Yes\\" else: return \\"No\\" def process_years(years): Process a list of years and return a list of results for each year. Each result is either \\"Yes\\" or \\"No\\", until a year 0 which signifies the end. results = [] for year in years: if year == 0: break result = is_leap_year(year) results.append(result) return results"},{"question":"You are given a list of integers representing the scores of players in a game. Each player only scores once. Your task is to determine the score of the player who ranks at the median position of the list when the scores are sorted in non-decreasing order. If the list has an odd number of scores, the median is the middle element when sorted. If the list has an even number of scores, the median is the average of the two middle elements. Input: - The first line contains an integer N, the number of scores. - The second line contains N space-separated integers representing the scores of the players. Output: - Print the median score. Constraints: 1 ≤ N ≤ 100000 0 ≤ score ≤ 1000000 Example Input 1: 5 3 1 4 1 5 Example Output 1: 3 Example Input 2: 4 50 20 70 10 Example Output 2: 35 Explanation: In the first example: - The sorted scores are [1, 1, 3, 4, 5]. - The median element is 3. In the second example: - The sorted scores are [10, 20, 50, 70]. - The median is the average of 20 and 50 which is (20 + 50) / 2 = 35.","solution":"def find_median_score(scores): Returns the median score from a list of scores. scores.sort() n = len(scores) if n % 2 == 1: return scores[n // 2] else: return (scores[n // 2 - 1] + scores[n // 2]) / 2"},{"question":"In a country far, far away, there exists a rectangular maze consisting of N rows and M columns. Each cell in the maze is either free (denoted by \'.\') or blocked (denoted by \'#\'). You are given the dimensions of the maze and the maze itself. Your task is to determine if there exists a path from the top-left corner (cell (1, 1)) to the bottom-right corner (cell (N, M)) such that the path consists only of free cells and moves can only be made horizontally or vertically between adjacent cells. However, this country has a peculiar custom. Before you can check for the existence of the path, you must execute a set of operations that will transform the maze. Each operation is defined by two integers X and Y and means that you should swap the Xth row with the Yth row of the maze. You need to answer whether after all the operations, there is a path from the top-left corner to the bottom-right corner. ------ Input ------ The first line of the input contains three integers N, M, and Q separated by spaces. The next N lines contain M characters each, describing the maze (each character is either \'.\' or \'#\'). The following Q lines describe the operations, each containing two integers X and Y (1 leq X, Y leq N and X neq Y), meaning that you should swap the Xth row with the Yth row of the maze. ------ Output ------ Print \\"YES\\" if there exists a path from the top-left corner to the bottom-right corner after performing all operations. Otherwise, print \\"NO\\". ------ Constraints ------ 1 leq N, M leq 1000 1 leq Q leq 1000 ----- Sample Input 1 ----- 4 4 2 .... .#.. ..#. .... 1 3 3 4 ----- Sample Output 1 ----- YES ----- Sample Input 2 ----- 3 3 1 .#. .#. ..# 2 3 ----- Sample Output 2 ----- NO Explanation of the Sample Inputs and Outputs: In the first sample input, after applying the operations, the maze is transformed as follows: Transforming step-by-step: - Swap row 1 with row 3: ... .#.. .... .... - Swap row 3 with row 4: ... .#.. .... .#.. Now, there is a clear path from the top-left corner to the bottom-right corner going through free cells only, so the output is \\"YES\\". In the second sample input, after applying the operation, the maze is transformed as follows: - Swap row 2 with row 3: .#. ..# .#. It is not possible to reach from the top-left corner to the bottom-right corner as there is no path consisting only of free cells, so the output is \\"NO\\".","solution":"from collections import deque def can_escape(grid, n, m): directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] # Down, Right, Up, Left visited = [[False] * m for _ in range(n)] queue = deque([(0, 0)]) # Start from the top-left corner while queue: x, y = queue.popleft() if x == n - 1 and y == m - 1: # Reach the bottom-right corner return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny)) return False def is_path_exists(n, m, q, grid, operations): for x, y in operations: grid[x-1], grid[y-1] = grid[y-1], grid[x-1] # Adjust for 0-indexing return \\"YES\\" if can_escape(grid, n, m) else \\"NO\\""},{"question":"# Task Given an array of integers, return an array of the products of all elements except the element at each index. # Example For `nums = [1, 2, 3, 4]`, the output should be `[24, 12, 8, 6]`. # Input/Output - `[input]` array `nums` A non-empty array of integers. Constraints: `1 ≤ nums.length ≤ 1000` `-1000 ≤ nums[i] ≤ 1000` - `[output]` array of integers An array where each element at index `i` is the product of all elements in the input array except the element at index `i`.","solution":"def product_except_self(nums): Returns an array where each element is the product of all elements in the input array except the element at that index. length = len(nums) result = [1] * length left_product = 1 for i in range(length): result[i] = left_product left_product *= nums[i] right_product = 1 for i in range(length - 1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"In a kingdom, there are N cities connected by N-1 roads such that there is exactly one path between any two cities. Each road has a certain length associated with it, representing the time taken to travel that road. The king wants to establish a post office service in one of the cities so that the maximum time needed to reach any other city from that city is minimized. Write a program to find the minimum possible maximum travel time from the selected city to the farthest city. ----Constraints---- - 1 leq N leq 1000 - 1 leq length of each road leq 1000 ----Inputs---- Input is given from Standard Input in the following format: N city1 city2 length ... (city pairs and road lengths for N-1 roads) ----Outputs---- Print the minimum possible maximum travel time. ----Sample Input---- 4 1 2 4 2 3 2 2 4 3 ----Sample Output---- 4 In this sample input, the kingdom has 4 cities connected as described: - A road connects city 1 and city 2 with a length of 4. - A road connects city 2 and city 3 with a length of 2. - A road connects city 2 and city 4 with a length of 3. If the post office is established in city 2, the longest travel time to any city is 4 (to city 1). If the post office is established in city 1, the longest travel time to any city is 4 (to city 4 via city 2). If the post office is established in city 3, the longest travel time to any city is 5 (to city 1 via city 2). If the post office is established in city 4, the longest travel time to any city is 5 (to city 1 via city 2). Thus, the minimum possible maximum travel time is achieved by placing the post office in city 2 or city 1, which gives a maximum travel time of 4. The output should be 4.","solution":"import sys from collections import defaultdict import heapq def find_minimum_maximum_travel_time(N, roads): def dijkstra(source): dist = [float(\'inf\')] * (N + 1) dist[source] = 0 PQ = [(0, source)] while PQ: d, node = heapq.heappop(PQ) if d > dist[node]: continue for neighbor, length in graph[node]: distance = d + length if distance < dist[neighbor]: dist[neighbor] = distance heapq.heappush(PQ, (distance, neighbor)) return max(dist[1:]) graph = defaultdict(list) for u, v, length in roads: graph[u].append((v, length)) graph[v].append((u, length)) min_max_travel_time = float(\'inf\') for city in range(1, N + 1): max_travel_time = dijkstra(city) min_max_travel_time = min(min_max_travel_time, max_travel_time) return min_max_travel_time # Sample input reading def main(): input = sys.stdin.read().strip().split() N = int(input[0]) roads = [(int(input[i]), int(input[i + 1]), int(input[i + 2])) for i in range(1, len(input), 3)] print(find_minimum_maximum_travel_time(N, roads)) if __name__ == \'__main__\': main()"},{"question":"Design a class `FrequencyTracker` that allows you to add numbers, remove numbers, and check if there is any number with a specific frequency. Your class should have the following methods: 1. `add(int number)`: Adds the number to the data structure. 2. `remove(int number)`: Removes the number from the data structure if it is present. 3. `hasFrequency(int frequency)`: Returns `true` if there is at least one number in the data structure that occurs with the frequency, otherwise returns `false`. Example: Input: ``` [\\"FrequencyTracker\\",\\"add\\",\\"add\\",\\"add\\",\\"add\\",\\"hasFrequency\\",\\"remove\\",\\"hasFrequency\\"] [[],[3],[3],[3],[5],[3],[3],[5]] ``` Output: ``` [null,null,null,null,null,true,null,false] ``` Explanation: ``` FrequencyTracker frequencyTracker = new FrequencyTracker(); frequencyTracker.add(3); // Adds 3 to the tracker frequencyTracker.add(3); // Adds 3 to the tracker frequencyTracker.add(3); // Adds 3 to the tracker frequencyTracker.add(5); // Adds 5 to the tracker frequencyTracker.hasFrequency(3); // Returns true because 3 occurs 3 times frequencyTracker.remove(3); // Removes one occurrence of 3 from the tracker frequencyTracker.hasFrequency(3); // Returns false because no number occurs exactly 3 times ``` **Note:** 1. Each method call to `add`, `remove`, and `hasFrequency` will have input values such that `-10^4 <= number <= 10^4` and `1 <= frequency <= 10^5`. 2. The total number of calls to `add`, `remove`, and `hasFrequency` will not exceed `10^5`.","solution":"from collections import defaultdict class FrequencyTracker: def __init__(self): self.num_count = defaultdict(int) self.freq_count = defaultdict(int) def add(self, number: int): if self.num_count[number] > 0: self.freq_count[self.num_count[number]] -= 1 self.num_count[number] += 1 self.freq_count[self.num_count[number]] += 1 def remove(self, number: int): if self.num_count[number] > 0: self.freq_count[self.num_count[number]] -= 1 self.num_count[number] -= 1 if self.num_count[number] > 0: self.freq_count[self.num_count[number]] += 1 def hasFrequency(self, frequency: int) -> bool: return self.freq_count[frequency] > 0"},{"question":"The city of Metropolis has a new surveillance system that keeps track of all the cars entering and leaving the city. The system records the license plate number and the type of action (enter or leave) for every car. Your task is to determine the moment at which the maximum number of cars are present in the city as the records are processed in chronological order. -----Input:----- - The first line contains an integer T, the number of test cases. - For each test case, the first line contains N, the number of records. - The next N lines each contain a string license_plate and a string action, where action can be either \\"enter\\" or \\"leave\\". -----Output:----- For each test case, print a single number: the maximum number of cars present in the city at any given moment as the records are processed. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 10^5 - Each license_plate is a string consisting of alphanumeric characters. - The entries for each test case are in chronological order. - There is at least one \\"enter\\" action. -----Sample Input:----- 1 7 ABC123 enter XYZ789 enter ABC123 leave DEF456 enter XYZ789 leave DEF456 leave GHI012 enter -----Sample Output:----- 2 -----EXPLANATION:----- The series of events will be: 1. Car \\"ABC123\\" enters - 1 car in the city. 2. Car \\"XYZ789\\" enters - 2 cars in the city. 3. Car \\"ABC123\\" leaves - 1 car in the city. 4. Car \\"DEF456\\" enters - 2 cars in the city. 5. Car \\"XYZ789\\" leaves - 1 car in the city. 6. Car \\"DEF456\\" leaves - 0 cars in the city. 7. Car \\"GHI012\\" enters - 1 car in the city. The maximum number of cars in the city at any moment is 2.","solution":"def max_cars_in_city(test_cases): results = [] for records in test_cases: current_cars = 0 max_cars = 0 for record in records: license_plate, action = record.split() if action == \\"enter\\": current_cars += 1 elif action == \\"leave\\": current_cars -= 1 if current_cars > max_cars: max_cars = current_cars results.append(max_cars) return results"},{"question":"Implement a function `longestConsecutiveSequence` that takes an array of integers `nums` as input and returns the length of the longest consecutive elements sequence. The algorithm should run in O(n) time complexity. A consecutive sequence is a series of numbers where each number is exactly one more than the previous number. For example, `[1, 2, 3, 4]` is a consecutive sequence, while `[1, 3, 4, 5]` is not because 1 and 3 are not consecutive. Example 1: Input: nums = [100, 4, 200, 1, 3, 2] Output: 4 Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4. Example 2: Input: nums = [0, 3, 7, 2, 5, 8, 4, 6, 0, 1] Output: 9 Explanation: The longest consecutive elements sequence is [0, 1, 2, 3, 4, 5, 6, 7, 8]. Therefore its length is 9. Your Task: You don\'t need to read input or print anything. Complete the function `longestConsecutiveSequence()` which takes the array `nums` as input and returns the length of the longest consecutive elements sequence. Constraints: * 0 ≤ nums.length ≤ 10^5 * -10^9 ≤ nums[i] ≤ 10^9","solution":"def longestConsecutiveSequence(nums): Returns the length of the longest consecutive elements sequence. if not nums: return 0 num_set = set(nums) longest_streak = 0 for num in num_set: # check if it\'s the start of a sequence if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"In a certain small town, there is a peculiar library system. The library maintains a list of book IDs, where each book ID is a positive integer. You are given a list of `n` book IDs and a corresponding list of favorite genres, where each book ID belongs to exactly one genre. Each genre is denoted by a lowercase letter. One day, the library decides to recommend books to a group of `q` readers based on their favorite genres. For each reader, the library will provide the sum of book IDs of all books that belong to their favorite genre. You are given `q` queries. Each query consists of a genre, and you need to output the sum of book IDs of all books that belong to that genre. -----Input----- The first line contains an integer `n` (1 leq n leq 10^5 ) — the number of books in the library. The second line contains `n` space-separated positive integers — the book IDs. The third line contains `n` space-separated lowercase letters — the favorite genres of the books. The fourth line contains an integer `q` (1 leq q leq 10^5 ) — the number of queries. The fifth line contains `q` space-separated lowercase letters — the favorite genres for the queries. -----Output----- For each query, print one integer — the sum of book IDs of all books that belong to the queried genre. If no book belongs to the queried genre, just print `0`. -----Example----- Input 5 10 20 30 40 50 a b a b c 3 a b c Output 40 60 50 -----Note----- In the example, there are 5 books with IDs [10, 20, 30, 40, 50] and genres [a, b, a, b, c]. The queries ask for the sum of book IDs belonging to genres \'a\', \'b\', and \'c\'. - For genre \'a\', the books are 10 and 30, so the sum is 40. - For genre \'b\', the books are 20 and 40, so the sum is 60. - For genre \'c\', the book is 50, so the sum is 50.","solution":"def genre_sum(n, book_ids, genres, q, queries): Returns a list of sums of book IDs for each queried genre. Args: n (int): Number of books. book_ids (list of int): List of book IDs. genres (list of str): List of genres corresponding to the book IDs. q (int): Number of queries. queries (list of str): List of genres for the queries. Returns: list of int: List of sums of book IDs for each queried genre. from collections import defaultdict genre_to_sum = defaultdict(int) # Calculate the sum of book IDs for each genre for i in range(n): genre_to_sum[genres[i]] += book_ids[i] # Answer queries result = [] for query in queries: result.append(genre_to_sum[query]) return result # Example usage: # n = 5 # book_ids = [10, 20, 30, 40, 50] # genres = [\'a\', \'b\', \'a\', \'b\', \'c\'] # q = 3 # queries = [\'a\', \'b\', \'c\'] # print(genre_sum(n, book_ids, genres, q, queries)) # Output: [40, 60, 50]"},{"question":"Professor X plans to build a new robotic assistant for his research lab. The robot needs to perform various experimental tasks with precision and must be programmed to follow an optimal path to reduce the time spent transitioning between different locations in the lab. The lab can be represented as a grid with n rows and m columns, where each cell of the grid can either be empty or contain an obstacle that the robot must avoid. You are tasked with creating a program that computes the shortest path for the robot to move from a starting position (S_x, S_y) to a target position (T_x, T_y). The robot can move one step at a time in four possible directions: up, down, left, or right. If reaching the target position is not possible due to obstacles, the program should indicate so. -----Input----- - The first line contains two integers n and m (1 leq n, m leq 1000), representing the number of rows and columns in the lab, respectively. - The next n lines each contain m characters, which can either be \'.\' (empty) or \'#\' (obstacle), describing the grid. - The following line contains two integers S_x and S_y (0 leq S_x < n, 0 leq S_y < m), representing the starting position of the robot. - The last line contains two integers T_x and T_y (0 leq T_x < n, 0 leq T_y < m), representing the target position. -----Output----- Output the length of the shortest path (number of steps) from the starting position to the target position. If it is not possible to reach the target, output -1. -----Examples----- Sample Input 1: 5 5 ..... .#. ..#.. .#... ..... 0 0 4 4 Sample Output 1: 8 Sample Input 2: 5 5 # # # # # 0 0 4 4 Sample Output 2: -1","solution":"from collections import deque def shortest_path(n, m, grid, S_x, S_y, T_x, T_y): # Check if start or end positions are on obstacles if grid[S_x][S_y] == \'#\' or grid[T_x][T_y] == \'#\': return -1 # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Queue for BFS with starting position queue = deque([(S_x, S_y, 0)]) # (current_x, current_y, current_distance) visited = set((S_x, S_y)) while queue: x, y, dist = queue.popleft() # Check if we reached the target position if (x, y) == (T_x, T_y): return dist # Explore all four possible directions for dx, dy in directions: nx, ny = x + dx, y + dy # Check if new position is within bounds and not an obstacle and not visited if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) # If queue is empty and we did not reach the target, it\'s not possible to reach the target return -1"},{"question":"In a small town, there is a unique tradition where town members form a queue for a festival and each person wears a unique hat with a number on it. The Festival Committee wants to find a way to identify a specific order in which people can be picked such that each person in this sub-sequence has a hat number that is strictly greater than the previous person in the sub-sequence. Given some conditions, the committee wants to find out the maximum number of people that can be picked in this manner. Input The input consists of two lines. The first line contains an integer n (1 ≤ n ≤ 1000) — the number of people in the queue. The second line contains n integers kᵢ (1 ≤ kᵢ ≤ 10^5) — the numbers on the hats, in the order people are standing in the queue. Output Output the maximum number of people that can be picked such that each successive person in the sub-sequence has a strictly greater hat number than the previous person in the sub-sequence. Examples Input 5 1 3 2 5 4 Output 3 Input 6 10 20 10 30 20 50 Output 4 Note In the first example, one of the longest strictly increasing sub-sequences that can be picked is: 1, 3, 5. Therefore, the output is 3. In the second example, one of the longest strictly increasing sub-sequences that can be picked is: 10, 20, 30, 50. Therefore, the output is 4.","solution":"def longest_increasing_subsequence(arr): Returns the length of the longest increasing subsequence in the given array. if not arr: return 0 n = len(arr) dp = [1] * n # dp[i] will be the length of the LIS ending at index i for i in range(1, n): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) def max_people_picked(n, hat_numbers): Returns the maximum number of people that can be picked such that each successive person in the sub-sequence has a strictly greater hat number than the previous person. return longest_increasing_subsequence(hat_numbers)"},{"question":"Create a function named `create_matrix` which takes two integers `rows` and `cols` as input, and returns a matrix (a list of lists) with the given number of rows and columns. Each element in the matrix should be initialized to 0. Next, write a function named `transpose_matrix` which takes a matrix (a list of lists) as input, and returns the transpose of the matrix. The transpose of a matrix is obtained by swapping rows with columns. Finally, create a function named `flatten_matrix` that takes a matrix (a list of lists) as input, and returns a single list containing all the elements of the matrix in row-major order (i.e., elements of the first row followed by elements of the second row, and so on). Each function must be accompanied by exactly two doctests that verify their correctness. Example: ```python def create_matrix(rows, cols): Creates a matrix with given number of rows and columns initialized to 0. >>> create_matrix(2, 3) [[0, 0, 0], [0, 0, 0]] >>> create_matrix(1, 4) [[0, 0, 0, 0]] return [[0 for _ in range(cols)] for _ in range(rows)] def transpose_matrix(matrix): Transposes the given matrix. >>> transpose_matrix([[1, 2, 3], [4, 5, 6]]) [[1, 4], [2, 5], [3, 6]] >>> transpose_matrix([[0, 0], [0, 0]]) [[0, 0], [0, 0]] return list(map(list, zip(*matrix))) def flatten_matrix(matrix): Flattens the given matrix into a single list. >>> flatten_matrix([[1, 2, 3], [4, 5, 6]]) [1, 2, 3, 4, 5, 6] >>> flatten_matrix([[0, 0], [0, 0]]) [0, 0, 0, 0] return [elem for row in matrix for elem in row] ``` Make sure you test the functions using the doctest module to verify their correctness and ensure there are no unnecessary characters or spaces in the doctest strings.","solution":"def create_matrix(rows, cols): Creates a matrix with given number of rows and columns initialized to 0. >>> create_matrix(2, 3) [[0, 0, 0], [0, 0, 0]] >>> create_matrix(1, 4) [[0, 0, 0, 0]] return [[0 for _ in range(cols)] for _ in range(rows)] def transpose_matrix(matrix): Transposes the given matrix. >>> transpose_matrix([[1, 2, 3], [4, 5, 6]]) [[1, 4], [2, 5], [3, 6]] >>> transpose_matrix([[0, 0], [0, 0]]) [[0, 0], [0, 0]] return list(map(list, zip(*matrix))) def flatten_matrix(matrix): Flattens the given matrix into a single list. >>> flatten_matrix([[1, 2, 3], [4, 5, 6]]) [1, 2, 3, 4, 5, 6] >>> flatten_matrix([[0, 0], [0, 0]]) [0, 0, 0, 0] return [elem for row in matrix for elem in row]"},{"question":"A \\"Magic Square\\" is an n × n matrix of distinct integers such that the sum of the integers in each row, each column, and the two main diagonals is the same. You are given an integer n (odd and 3 ≤ n ≤ 9). Output the **n × n matrix** that forms a magic square. Input The only line of input contains an integer n. Output Output the n × n matrix of the magic square where each number is represented as a fixed width of the size of the largest number in the square, right-aligned, and separated by spaces. Example Input 3 Output 2 7 6 9 5 1 4 3 8","solution":"def generate_magic_square(n): if n < 3 or n > 9 or n % 2 == 0: raise ValueError(\\"n must be an odd integer between 3 and 9 inclusive.\\") magic_square = [[0] * n for _ in range(n)] num = 1 i, j = 0, n // 2 while num <= n * n: magic_square[i][j] = num num += 1 new_i, new_j = (i - 1) % n, (j + 1) % n if magic_square[new_i][new_j] != 0: i = (i + 1) % n else: i, j = new_i, new_j return magic_square def format_magic_square(matrix): size = len(matrix) width = len(str(size * size)) formatted_output = [] for row in matrix: formatted_row = \\" \\".join(f\\"{num:{width}}\\" for num in row) formatted_output.append(formatted_row) return \\"n\\".join(formatted_output) def magic_square(n): matrix = generate_magic_square(n) return format_magic_square(matrix)"},{"question":"You are given a string S consisting of lowercase English letters. Print the frequency of each letter in the string in alphabetical order of the letters. For example, if S = \\"apple\\", print the frequency as \\"a1e1l1p2\\". Constraints * 1 leq |S| leq 50 * S consists of lowercase English letters only. Input Input is given from Standard Input in the following format: S Output Print the frequencies of each letter present in the string S in the alphabetical order of letters. Example Input apple Output a1e1l1p2","solution":"def letter_frequencies(S): Given a string S consisting of lowercase English letters, print the frequency of each letter in the string in alphabetical order of the letters. Args: - S (str): input string comprised of lowercase English letters Returns: - str: letter frequencies in formatted string as described from collections import Counter # Calculate the frequency of each letter in the string frequency = Counter(S) # Sort letters and create the resulting string in the desired order result = \'\'.join(f\\"{char}{frequency[char]}\\" for char in sorted(frequency.keys())) return result"},{"question":"Statement: You are helping a community library manage their book borrowing system. Each book has a unique ID and whenever a member borrows a book, the book\'s ID is recorded in the transaction logs. However, due to some issues, there are certain duplicate entries in the logs, and the library would like to clean this up by identifying the first occurrence of each book ID in the log and removing the later duplicates. Your task is to write a program that reads the list of book IDs from the transaction logs and outputs the list with duplicates removed, retaining only their first occurrence and in the order they originally appeared. Input: The first line of the input contains a single integer N, the number of book IDs in the log. The second line contains N space-separated integers representing the book IDs in the order they appeared in the log. Output: A single line containing the cleaned list of book IDs, separated by spaces, with duplicates removed and only their first occurrence retained. Constraints: 1 ≤ N ≤ 10000 0 ≤ Book ID ≤ 100000 SAMPLE INPUT 10 1 2 2 3 1 4 3 5 6 4 SAMPLE OUTPUT 1 2 3 4 5 6 Explanation: In the sample input, number of book IDs is 10 and the transaction log contains book IDs 1 2 2 3 1 4 3 5 6 4. The first occurrences of each book ID are 1, 2, 3, 4, 5, and 6 in that order. All subsequent duplicates are removed. Hence, the cleaned list is 1 2 3 4 5 6.","solution":"def clean_book_borrow_log(N, book_ids): Cleans the book borrow log by removing duplicates and retaining the first occurrences in the order they appeared. Args: - N (int): Number of book IDs in the log. - book_ids (list): List of book IDs as they appeared in the log. Returns: - list: Cleaned list of book IDs with duplicates removed. seen = set() cleaned_log = [] for book_id in book_ids: if book_id not in seen: seen.add(book_id) cleaned_log.append(book_id) return cleaned_log"},{"question":"Jon Snow is trying to establish communication with other members of the Night\'s Watch. He decides to write a hidden message using a secret encoding scheme. Each letter in the message is shifted by a certain number of positions in the alphabet. This is a simplified version of what is known as Caesar Cipher. Your task is to help Jon Snow by writing a program that decodes the secret message. Given an encoded message and a shift value, you should return the original message. [Input] The first line contains an integer t denoting the number of test cases. Each of the next t lines contains a string representing the encoded message followed by an integer denoting the shift value. [Output] For each test case, output a single line containing the decoded message. Note: - The alphabet is considered to be circular, i.e., after \'z\' comes \'a\'. - The encoded message only contains lowercase letters and no spaces. [Constraints] 1 ≤ t ≤ 100 1 ≤ length of the encoded message ≤ 100 0 ≤ shift value ≤ 25 SAMPLE INPUT 3 ifmmp 1 jgnnq 2 lipps 4 SAMPLE OUTPUT hello hello hello Explanation: In the first test case, the encoded message \'ifmmp\' can be decoded to \'hello\' by shifting each letter back by 1 position. In the second test case, the encoded message \'jgnnq\' can be decoded to \'hello\' by shifting each letter back by 2 positions. In the third test case, the encoded message \'lipps\' can be decoded to \'hello\' by shifting each letter back by 4 positions.","solution":"def decode_message(encoded_message, shift): Decodes a given encoded message using the specified shift value. :param encoded_message: The encoded string message :param shift: The shift value used in the encoding :return: The original decoded message decoded_message = [] for char in encoded_message: # Calculate the original character position with the circular shift original_char = chr(((ord(char) - ord(\'a\') - shift) % 26) + ord(\'a\')) decoded_message.append(original_char) return \'\'.join(decoded_message) def decode_messages(test_cases): Decodes multiple test cases of encoded messages. :param test_cases: List of tuples where each tuple contains the encoded message and the shift value :return: List of decoded messages results = [] for encoded_message, shift in test_cases: results.append(decode_message(encoded_message, shift)) return results"},{"question":"G: Magic Potion problem Mina is an apprentice alchemist who has been learning to create magic potions. She wants to create a specific potion using her collection of herbs. Each herb has a magical property represented by an integer number, and the effectiveness of the potion is determined by the sum of these properties. However, there\'s a catch: Mina can only mix a fixed number of consecutive herbs at a time to create her potion. Given her list of herbs and the number of consecutive herbs she can use, she must find out the maximum possible effectiveness for her potion. Input format The input is given in the following format: ``` N K h_1 h_2 ... h_N ``` * N is an integer and satisfies (2 leq N leq 100) * K is an integer and satisfies (1 leq K leq N) * (h_i) (i = 1, 2, ..., N) is an integer and satisfies (-10^9 leq h_i leq 10^9) Output format Output the maximum possible effectiveness for Mina\'s potion in one line. Input example 1 ``` 5 3 1 -2 3 4 -1 ``` Output example 1 ``` 6 ``` Input example 2 ``` 4 2 -1 -2 -3 -4 ``` Output example 2 ``` -3 ``` Input example 3 ``` 6 1 -1 2 3 -4 5 6 ``` Output example 3 ``` 6 ``` Input example 4 ``` 7 4 -1 -2 3 4 -1 2 1 ``` Output example 4 ``` 8 ``` Example Input ``` 4 2 -1 -2 -3 -4 ``` Output ``` -3 ``` Explanation: For the input example 1 (`N = 5`, `K = 3`, herbs = [1, -2, 3, 4, -1]), the possible sums of three consecutive herbs are: * (1 + (-2) + 3 = 2) * (-2 + 3 + 4 = 5) * (3 + 4 + (-1) = 6) The maximum sum is 6, therefore the output is 6.","solution":"def max_effectiveness(N, K, herbs): Returns the maximum possible effectiveness of the potion by summing any K consecutive herbs. :param N: int - The number of herbs :param K: int - The number of consecutive herbs to be used :param herbs: list[int] - The list of herbs properties :return: int - The maximum possible effectiveness max_sum = float(\'-inf\') for i in range(N - K + 1): current_sum = sum(herbs[i:i+K]) if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"A company wants to optimize the allocation of conference rooms for meetings. Each meeting has a start time and end time, and different meetings may overlap with each other. The goal is to determine the minimum number of conference rooms required so that no two meetings take place in the same room at the same time. Given the start and end times of all meetings, determine the minimum number of conference rooms required. -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000), the number of meetings. The next n lines each contain two integers, the start and end times of a meeting. The times are given in 24-hour format (0 ≤ start < end ≤ 24). -----Output----- Output a single integer, the minimum number of conference rooms required. -----Examples----- Input 3 1 4 2 5 7 9 Output 2 Input 4 0 1 2 3 4 5 6 7 Output 1 Input 5 1 3 2 4 3 5 4 6 5 7 Output 2 -----Note----- In the first example, the first two meetings overlap, so they require separate rooms. The third meeting can use either of the rooms as it does not overlap with the other two. In the second example, there are no overlapping meetings, so only one room is required. In the third example, at most two meetings overlap at any given time, so two rooms are required.","solution":"def minMeetingRooms(intervals): Given a list of meeting time intervals consisting of start and end times, determine the minimum number of conference rooms required. :param intervals: List of tuples [(start, end), ...] :return: Minimum number of conference rooms required if not intervals: return 0 # Separate out the start and end times start_times = sorted([i[0] for i in intervals]) end_times = sorted([i[1] for i in intervals]) s_ptr, e_ptr = 0, 0 used_rooms = 0 max_rooms = 0 while s_ptr < len(start_times): if start_times[s_ptr] < end_times[e_ptr]: used_rooms += 1 s_ptr += 1 else: used_rooms -= 1 e_ptr += 1 max_rooms = max(max_rooms, used_rooms) return max_rooms"},{"question":"Given a string s, and an integer k, your task is to determine whether you can partition the string s into k non-empty substrings such that the sum of the lengths of the distinct substrings is equal to the length of s and no substring repeats. If it is possible to partition the string into such k distinct substrings, return True. Otherwise, return False. Example 1: Input: s = \\"abcdak\\", k = 4 Output: True Explanation: You can partition the string \\"abcdak\\" into \\"a\\", \\"b\\", \\"cd\\", \\"ak\\". All partitions are non-empty and distinct. Example 2: Input: s = \\"aaaa\\", k = 2 Output: False Explanation: It is not possible to partition the string \\"aaaa\\" into 2 distinct substrings. Your Task: You don\'t need to read input or print anything. Your task is to complete the function canPartition() which takes a string s and an integer k as input and returns a boolean. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 <= len(s) <= 10^5 1 <= k <= len(s)","solution":"def canPartition(s, k): Determines if the string s can be partitioned into k non-empty, distinct substrings. if len(set(s)) < k: # If the number of distinct characters is less than k, it\'s not possible return False # General approach: If there are at least k unique characters in the string, # it is possible to create k unique partitions. return k <= len(s)"},{"question":"John loves playing with strings. Recently, he came across a string game where he needs to transform a given string into a palindrome by appending characters to the end of the string. The objective is to make the shortest possible palindrome. A palindrome is a string that reads the same backward as forward. John needs your help to determine the length of the shortest possible palindrome that can be formed by appending characters to the end of a given string. -----Input----- The first line contains a single string s (1 leq |s| leq 2,000), consisting of lowercase English letters. -----Output----- Output the length of the shortest palindrome that can be obtained by appending characters to the end of the given string. -----Examples----- Input abab Output 5 Input race Output 7 Input aaa Output 3 -----Note----- In the first example, one possible solution is to append the character \'b\' to the end of the string \'abab\', forming the palindrome \'ababa\'. In the second example, one possible solution is to append \\"ecarace\\" to the string \\"race\\", forming the palindrome \\"racecar\\". In the third example, the string \\"aaa\\" is already a palindrome, so the length remains 3.","solution":"def shortest_palindrome_length(s): Given a string s, returns the length of the shortest possible palindrome that can be formed by appending characters to the end of the string. n = len(s) reverse_s = s[::-1] for i in range(n): if s.startswith(reverse_s[i:]): return n + i return 2 * n # Fallback, should never actually be this length due to the above logic. # Additional Examples # Input: abc # Output: 5 (we append \\"cba\\" to \\"abc\\" to get \\"abccba\\") # Input: aacecaaa # Output: 7 (the string is already a palindrome: \\"aaacecaaa\\")"},{"question":"Dr. Heinz Doofenshmirtz has come up with another plan. This time he has set up a series of lasers blocking the way, each laser associated with a certain energy level. Platypus Perry needs to deactivate each laser by depleting its energy level to zero. Perry can choose to expend a different amount of energy on each laser beam, but he must do it in a strategic manner to conserve his own energy. The strategy is simple: Perry must use a sequence of decrements, where each subsequent decrement is equal to the previous minus one. He cannot use the same decrement more than once unless he resets to the maximum decrement he started with. Your task is to determine if Perry can deactivate each laser beam with the given decrements. INPUT: First line gives T, the total number of test cases. T lines follow, each with three integers: L (initial energy level of the laser), D (maximum decrement Perry starts with), and N (number of reset points allowed). OUTPUT: For each test case, print \\"YES\\" if Perry can totally deplete the laser\'s energy to zero given the constraints, otherwise print \\"NO\\". Constraints: 1 ≤ T ≤ 10 1 ≤ L ≤ 10^9 1 ≤ D ≤ 10^5 0 ≤ N ≤ D SAMPLE INPUT 2 15 5 1 10 3 0 SAMPLE OUTPUT YES NO Explanation For the first test case: - Perry can start with decrement 5, then 4, 3, 2, 1 (15 energy units in total), exactly depleting the laser\'s energy. For the second test case: - Perry can start with decrement 3, then 2, and 1 (6 energy units in total), which is not enough to deplete the laser\'s energy of 10.","solution":"def can_deplete_laser(L, D, N): # Calculate sum of first D natural numbers max_sum = D * (D + 1) // 2 # With N resets, Perry can apply the decrement sequence (N + 1) times total_energy_depleted = max_sum * (N + 1) return total_energy_depleted >= L def process_test_cases(T, cases): results = [] for L, D, N in cases: if can_deplete_laser(L, D, N): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"John is a passionate traveler who loves collecting souvenirs from different places. He has a backpack that can carry a maximum weight of W units. John wants to maximize the number of souvenirs he can carry without exceeding the weight limit of his backpack. Each souvenir has a certain weight and a unique value to John. Help John by writing a function that determines the maximum value of souvenirs he can carry within the weight limit. Given two arrays, `weights` and `values`, where `weights[i]` is the weight of the i-th souvenir and `values[i]` is the value of the i-th souvenir, and an integer W representing the maximum weight John\'s backpack can carry. Example 1: Input: weights = [2, 3, 4, 5], values = [3, 4, 5, 6], W = 5 Output: 7 Explanation: By selecting souvenirs with weights [2, 3] (total weight = 5), he can obtain a total value of 7. Example 2: Input: weights = [1, 2, 3], values = [6, 10, 12], W = 5 Output: 22 Explanation: By selecting all souvenirs with weights [1, 2, 3] (total weight = 6), he can obtain a total value of 22. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function `maximizeSouvenirValue()` that takes arrays `weights` and `values`, their size `n`, and an integer `W`, and returns the maximum value of souvenirs he can carry within the weight limit. The driver code takes care of the printing. Expected Time Complexity: O(N*W). Expected Auxiliary Space: O(N*W). Constraints: 1 ≤ N ≤ 1000 1 ≤ W ≤ 1000 1 ≤ weights[i], values[i] ≤ 1000","solution":"def maximizeSouvenirValue(weights, values, W): Determines the maximum value of souvenirs that can be carried in a backpack without exceeding the weight limit. Parameters: weights (list of int): Weights of the souvenirs. values (list of int): Values of the souvenirs. W (int): Maximum weight the backpack can carry. Returns: int: Maximum value of souvenirs that can be carried. n = len(weights) # Create a DP table to store the maximum value at each weight capacity dp = [[0] * (W + 1) for _ in range(n + 1)] # Build the DP table for i in range(1, n + 1): for w in range(W + 1): if weights[i - 1] <= w: dp[i][w] = max(values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w]) else: dp[i][w] = dp[i - 1][w] # The answer will be in the bottom-right cell of the matrix return dp[n][W]"},{"question":"In a grid of size `M x N`, each cell is either black or white. A rectangle is defined as an area bounded by four sides, and a filled rectangle is one where all cells inside it are black. You need to determine the size of the largest filled rectangle in the grid, i.e., the rectangle that contains the maximum number of black cells. Write a function `largest_filled_rectangle(grid: List[List[int]]) -> int` that takes a two-dimensional list representing the grid as input and returns the number of cells in the largest filled rectangle. # Constraints * 1 <= M, N <= 1000 * Each cell in the grid is either 0 (white) or 1 (black) # Input The input is given from standard input in the following format: ``` M N grid[0][0] grid[0][1] ... grid[0][N-1] grid[1][0] grid[1][1] ... grid[1][N-1] ... grid[M-1][0] grid[M-1][1] ... grid[M-1][N-1] ``` # Output Output a single integer which is the size of the largest filled rectangle. # Examples Input ``` 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 ``` Output ``` 6 ``` Input ``` 3 3 0 0 0 0 0 0 0 0 0 ``` Output ``` 0 ``` Input ``` 4 4 1 1 0 1 1 1 1 1 0 1 1 1 1 1 1 1 ``` Output ``` 9 ```","solution":"def largest_filled_rectangle(grid): Returns the size of the largest filled rectangle in a grid. if not grid or not grid[0]: return 0 M = len(grid) N = len(grid[0]) max_area = 0 # Create an array to store the heights of each column heights = [0] * N for row in range(M): for col in range(N): # If the cell is black, increment the height counter if grid[row][col] == 1: heights[col] += 1 # If the cell is white, reset the height counter else: heights[col] = 0 # Calculate the maximum area of rectangle in histogram for this row max_area = max(max_area, max_histogram_area(heights)) return max_area def max_histogram_area(heights): Helper function to calculate the maximum rectangle area in a histogram. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Write a function that takes a list of integers and finds the subarray with the maximum sum. A subarray is a contiguous part of an array. The function should return the maximum sum and the subarray itself. You will have one input: 1) A list of integers The output should be a tuple containing: 1) The maximum sum 2) The subarray with the maximum sum Example: input_list = [-2, 1, -3, 4, -1, 2, 1, -5, 4] The function should return: (6, [4, -1, 2, 1])","solution":"def max_subarray(arr): Finds the subarray with the maximum sum in an input list of integers. Parameters: arr (list): List of integers Returns: tuple: Maximum sum and the subarray with the maximum sum if not arr: return (0, []) max_sum = current_sum = arr[0] start = end = s = 0 for i in range(1, len(arr)): if arr[i] > current_sum + arr[i]: current_sum = arr[i] s = i else: current_sum += arr[i] if current_sum > max_sum: max_sum = current_sum start = s end = i return (max_sum, arr[start:end + 1])"},{"question":"Chris is designing a password checker for a new software application. The goal is to ensure that the password meets specific criteria for security purposes. The password must adhere to the following rules: 1. The password must be at least 8 characters long. 2. The password must include at least one lowercase and one uppercase letter. 3. The password must contain at least one digit. 4. The password must have at least one special character from the set {!, @, #, , %, ^, &, *, (, ), _, +}. Write a program that checks whether a given password meets all the above criteria. Input The first line of input contains an integer t (1 ≤ t ≤ 1000), the number of test cases. Each of the next t lines contains one string representing a password to be checked. The password will consist of printable ASCII characters, and its length will not exceed 100 characters. Output For each test case, output \\"Valid\\" if the password meets all the criteria, otherwise output \\"Invalid\\". Examples Input 3 Password1@ short1! NoSpecialChar123 Output Valid Invalid Invalid","solution":"def is_valid_password(password): if len(password) < 8: return False has_lower = has_upper = has_digit = has_special = False special_characters = set(\\"!@#%^&*()_+\\") for char in password: if char.islower(): has_lower = True elif char.isupper(): has_upper = True elif char.isdigit(): has_digit = True elif char in special_characters: has_special = True return has_lower and has_upper and has_digit and has_special def password_checker(t, passwords): results = [] for password in passwords: if is_valid_password(password): results.append(\\"Valid\\") else: results.append(\\"Invalid\\") return results"},{"question":"You\'re given an integer array `arr` of length `n`. Your task is to determine the length of the smallest subarray with a sum greater than or equal to `k`. # Function Signature ```python def smallest_subarray_with_sum(arr: List[int], k: int) -> int: pass ``` # Input - `arr`: A list of integers of length `n` (1 leq n leq 10^5) - `k`: An integer (1 leq k leq 10^9) # Output - Return the length of the smallest subarray with a sum greater than or equal to `k`. If no such subarray exists, return 0. # Example Example 1 ```python arr = [1, 2, 3, 4, 5] k = 11 Output: 3 ``` # Explanation The smallest subarray with sum at least 11 is `[3, 4, 5]`. Example 2 ```python arr = [2, 3, 1, 2, 4, 3] k = 7 Output: 2 ``` # Explanation The smallest subarray with sum at least 7 is either `[4, 3]` or `[3, 4]`. Example 3 ```python arr = [1, 4, 4] k = 8 Output: 2 ``` # Explanation The smallest subarray with sum at least 8 is `[4, 4]`. Example 4 ```python arr = [1, 1, 1, 1, 1, 1, 1, 1] k = 11 Output: 0 ``` # Explanation There is no subarray in `arr` with sum at least 11. # Notes - The solution should aim to run in O(n) time complexity. - Consider using a sliding window approach to achieve the required time complexity.","solution":"from typing import List def smallest_subarray_with_sum(arr: List[int], k: int) -> int: n = len(arr) min_length = n + 1 current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum >= k: min_length = min(min_length, end - start + 1) current_sum -= arr[start] start += 1 return min_length if min_length <= n else 0"},{"question":"Marina is participating in a baking competition where she needs to prepare exactly `N` different types of cookies. She can use `M` different ingredients in her recipes. Each type of cookie must have a unique combination of ingredients, and she can use any subset of the `M` ingredients to create a cookie. Marina wants to know if she has enough ingredients to prepare the required number of different types of cookies. Given the number of ingredients and the number of different types of cookies Marina needs to prepare, determine whether it is possible for her to create `N` unique combinations. Remember that a combination of ingredients is unique if it has a different subset of ingredients compared to another type of cookie, and using no ingredients at all is not allowed as a type. Input The first line contains two space-separated integers `N` and `M` (1 ≤ N ≤ 10^9, 1 ≤ M ≤ 30) — the number of different types of cookies Marina needs to prepare and the number of ingredients available, respectively. Output Print \\"Possible\\" (without quotes) if Marina can prepare exactly `N` different types of cookies, or \\"Impossible\\" (without quotes) otherwise. Examples Input 5 3 Output Possible Input 10 3 Output Impossible Explanation In the first example, with 3 ingredients, Marina can create up to 7 unique combinations (2^3 - 1 = 7), which is sufficient to make 5 types of cookies. In the second example, 3 ingredients would still only provide up to 7 unique combinations, which is not enough to make 10 types of cookies.","solution":"def can_prepare_cookies(N, M): Determine if it is possible to prepare exactly N different types of cookies using M available ingredients in unique combinations. :param N: int - Number of different types of cookies needed :param M: int - Number of available ingredients :return: str - \\"Possible\\" if it is possible to prepare exactly N different types, otherwise \\"Impossible\\" # Calculate the maximum number of unique combinations using M ingredients max_combinations = 2 ** M - 1 # 2^M produces all subsets, subtract 1 to exclude the empty set if N <= max_combinations: return \\"Possible\\" else: return \\"Impossible\\""},{"question":"Given an array of size N, your task is to find the maximum product that can be obtained by multiplying two different elements of the array. Input: First line of input contains number of testcases T. For each testcase, the first line contains the number of elements N in the array, and the second line contains N space-separated integers denoting the elements of the array. Output: For each testcase, print the maximum product obtained by multiplying any two different elements in the array. User Task: The task is to complete the function maxProduct() which takes the array of integers as input and returns the maximum product of two different elements. Constraints: 1 <= T <= 50 2 <= N <= 1000 -10^3 <= arr[i] <= 10^3 Example: Input: 2 4 1 20 30 4 3 -10 -3 5 Output: 600 30 Explanation: Testcase 1: The maximum product can be obtained by multiplying 20 and 30 resulting in 600. Testcase 2: The maximum product can be obtained by multiplying -10 and -3 resulting in 30.","solution":"def maxProduct(arr): Returns the maximum product that can be obtained by multiplying two different elements of the array. if len(arr) < 2: return None # Initialize the maximum and second maximum element for positive numbers max1 = max2 = float(\'-inf\') # Initialize the minimum and second minimum element for negative numbers min1 = min2 = float(\'inf\') for num in arr: if num > max1: max1, max2 = num, max1 elif num > max2: max2 = num if num < min1: min1, min2 = num, min1 elif num < min2: min2 = num # Maximum product is either the product of the two largest numbers # or the product of the two smallest numbers (in case they are negative) return max(max1 * max2, min1 * min2) def process_test_cases(input_data): index = 0 T = int(input_data[index]) index += 1 results = [] for _ in range(T): N = int(input_data[index]) index += 1 arr = list(map(int, input_data[index].split())) index += 1 results.append(maxProduct(arr)) return results"},{"question":"Given an integer array arr, your task is to remove every k-th element from the array until only one element remains, and return that remaining element. Start removing elements at the beginning of the array. Example 1: Input: n = 7 k = 3 arr = [1, 2, 3, 4, 5, 6, 7] Output: 4 Explanation: The removal process is as follows: 1. Remove the 3rd element: [1, 2, 4, 5, 6, 7] 2. Remove the next 3rd element starting from where the previous removal ended: [1, 2, 4, 5, 7] 3. Remove the next 3rd element: [1, 2, 4, 5] 4. Remove the next 3rd element after wrapping around if necessary: [1, 2, 4] 5. Continue this process until one element remains: The final element is 4. Example 2: Input: n = 1 k = 1 arr = [1] Output: 1 Your Task: You don\'t have to read input or print anything. Your task is to complete the function remainingElement() which takes the integer n, array arr, and integer k, and returns the remaining element after repeatedly removing every k-th element. Expected Time Complexity: O(n) Expected Space Complexity: O(1) Constraint: 1 <= n <= 1000 1 <= k <= n 1 <= arr[i] <= 10^9","solution":"def remainingElement(n, k, arr): Remove every k-th element from the array arr until only one element remains, and return that element. index = 0 while len(arr) > 1: index = (index + k - 1) % len(arr) arr.pop(index) return arr[0]"},{"question":"There is a mysterious bug in the `sort_and_filter` function! Your task is to fix the function to correctly sort a given list of integers in ascending order and remove any integers that are below a provided threshold. ```python def sort_and_filter(numbers, threshold): sorted_numbers = sorted(numbers) for number in sorted_numbers: if number < threshold: return sorted_numbers.remove(number) return sorted_numbers ``` # Example ```python numbers = [5, 3, 8, 1, 4] threshold = 4 print(sort_and_filter(numbers, threshold)) # Should output [4, 5, 8] ``` # Additional Requirements: - Invalid input should be handled gracefully. For example, if the `numbers` is not a list containing all integers or `threshold` is not an integer, return the string \\"Invalid input\\". - The filtered list must only contain numbers `>= threshold`. Good luck debugging and fixing the code! :D","solution":"def sort_and_filter(numbers, threshold): # Check for invalid input if not isinstance(numbers, list) or not all(isinstance(num, int) for num in numbers) or not isinstance(threshold, int): return \\"Invalid input\\" # Sort the numbers sorted_numbers = sorted(numbers) # Filter out numbers below the threshold filtered_numbers = [number for number in sorted_numbers if number >= threshold] return filtered_numbers"},{"question":"A company needs to secure its logging system by rotating the characters in a string to make it unreadable without authorized access. They want to use a simple Caesar Cipher with a right-rotation method. Your task is to apply a given number of rotations to the string. Input The first line contains an integer n (1 ≤ n ≤ 100), representing the number of right rotations. The second line contains a string s, which consists of lowercase Latin letters only and its length does not exceed 100. Output Print the encoded string after applying n right rotations. Examples Input 3 abcdef Output defabc Input 2 hello Output lohel Input 6 rotate Output rotate","solution":"def caesar_cipher_rotation(n, s): Apply a right rotation (Caesar Cipher) to the string s by n positions. n = n % len(s) # Ensure n is within the range of the string\'s length return s[-n:] + s[:-n]"},{"question":"You are given a list of integers and a target sum. Your task is to determine if there exists a pair of elements in the list whose sum is equal to the target sum. If such a pair exists, return the indices of the two numbers in the form of a tuple (i, j), where i and j are 0-based indices of the elements in the list. If there are multiple such pairs, return any one of them. If no such pair exists, return an empty tuple. **Function Signature:** ```python def find_pair_with_sum(nums: List[int], target: int) -> Tuple[int, int]: ``` **Input:** - `nums` (List[int]): A list of integers where 2 ≤ len(nums) ≤ 10^4 and -10^9 ≤ nums[i] ≤ 10^9. - `target` (int): The target sum to be achieved. -10^9 ≤ target ≤ 10^9. **Output:** - A tuple of two integers representing the indices of the elements whose sum is equal to the target sum. If no such pair exists, return an empty tuple. **Examples:** 1. Input: `nums = [2, 7, 11, 15], target = 9` Output: `(0, 1)` 2. Input: `nums = [1, 2, 3, 4, 6], target = 6` Output: `(1, 3)` 3. Input: `nums = [3, 2, 4], target = 6` Output: `(1, 2)` 4. Input: `nums = [1, 2, 3], target = 7` Output: `()` **Note:** - The returned indices must be in the form of a tuple (i, j) where i < j. - The input list may contain duplicate elements. - Ensure your solution runs efficiently within the given constraints.","solution":"from typing import List, Tuple def find_pair_with_sum(nums: List[int], target: int) -> Tuple[int, int]: Returns indices of two numbers in the list whose sum equals the target. If such pair exists, a tuple (i, j) is returned where i < j. If no such pair exists, returns an empty tuple. num_index_map = {} for i, num in enumerate(nums): complement = target - num if complement in num_index_map: return (num_index_map[complement], i) num_index_map[num] = i return ()"},{"question":"Maximum Binary Tree Problem Statement Given an integer array with distinct values, the maximum binary tree is defined as follows: 1. The root is the maximum number in the array. 2. The left subtree is the maximum tree constructed from the left part subarray divided by the maximum number. 3. The right subtree is the maximum tree constructed from the right part subarray divided by the maximum number. Given the input array, construct the maximum binary tree and output the preorder traversal of the tree. Constraints * 1 ≤ Length of input array ≤ 10^5 * Elements of the input array are distinct * Each element of the array is within the range [0, 10^9] Input The input consists of a single line containing the integer array as space-separated integers. Output Output the preorder traversal of the maximum binary tree as a single line of space-separated integers. Examples Input 3 2 1 6 0 5 Output 6 3 2 1 5 0 Input 10 9 8 7 6 Output 10 9 8 7 6","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def construct_maximum_binary_tree(nums): if not nums: return None # Find the maximum number and its index max_index = nums.index(max(nums)) max_value = nums[max_index] # Create the root node with the maximum number root = TreeNode(val=max_value) # Recursively construct the left and right subtrees root.left = construct_maximum_binary_tree(nums[:max_index]) root.right = construct_maximum_binary_tree(nums[max_index + 1:]) return root def preorder_traversal(root): if not root: return [] return [root.val] + preorder_traversal(root.left) + preorder_traversal(root.right) def maximum_binary_tree_preorder(nums): tree = construct_maximum_binary_tree(nums) return preorder_traversal(tree) # Function to handle the input and output def solve(input_string): nums = list(map(int, input_string.split())) preorder_result = maximum_binary_tree_preorder(nums) return \' \'.join(map(str, preorder_result))"},{"question":"Two elite bakers participate in a baking competition. Each baker is required to present a single large rectangular cake to the judges. However, due to a mistake in the preparation area, the dimensions of the cakes have been compromised. The original dimensions of the cakes are known but the dimensions of the cakes presented by the bakers are now partially damaged. The dimensions of the cakes presented by the bakers are either correct or smaller than the original dimensions. The competition\'s rules state that the judges will not judge a cake if its dimensions are smaller than its original size in any way. The judges wish to know if they should judge or disqualify the cakes based on their dimensions. Your task is to write a program that helps the judges determine whether the cakes should be judged or not. INPUT: First line of input is T, the number of test cases. Each test case consists of two lines: - First line contains the original dimensions of the cake separated by a single space (length and width respectively). - Second line contains the dimensions of the presented cake separated by a single space (length and width respectively). OUTPUT: For each test case, print \\"Judged\\" if the presented cake meets the requirements (its dimensions are equal to or larger than the original cake in both measurements); otherwise print \\"Disqualified\\". CONSTRAINTS: 1 ≤ T ≤ 50 1 ≤ Length, Width of cakes ≤ 10000 SAMPLE INPUT 3 10 12 10 12 8 6 7 6 9 9 9 8 SAMPLE OUTPUT Judged Disqualified Disqualified Explanation In the first case, both the length and width of the presented cake match the original dimensions, so it is \\"Judged\\". In the second case, both the length and width of the presented cake are smaller than the original dimensions, so it is \\"Disqualified\\". In the third case, even though the length matches with the original, the width is smaller, so it is \\"Disqualified\\".","solution":"def judge_cakes(T, test_cases): results = [] for i in range(T): original_length, original_width = test_cases[i][0] presented_length, presented_width = test_cases[i][1] if presented_length >= original_length and presented_width >= original_width: results.append(\\"Judged\\") else: results.append(\\"Disqualified\\") return results"},{"question":"You are given a matrix of integers. Your task is to find the maximum product of elements in any contiguous subarray of the matrix. A subarray is defined as any contiguous rectangular sub-section of the matrix. ------ Input ------ The first line of input contains two integers n and m, denoting the number of rows and columns in the matrix respectively. The next n lines each contain m integers representing the matrix. ------ Output ------ Output a single integer denoting the maximum product of any contiguous subarray of the matrix. ------ Constraints ------ 1 ≤ n, m ≤ 10 -10 ≤ text{matrix[i][j]} ≤ 10 ------ Sample Input 1 ------ 3 3 1 -2 3 4 -1 2 -1 -3 0 ------ Sample Output 1 ------ 48 ------ Explanation 1 ------ One possible subarray with the maximum product is: 4 -1 -1 -3","solution":"def maxProductSubarray(matrix, n, m): max_product = float(\'-inf\') for i in range(n): for j in range(m): for k in range(i, n): for l in range(j, m): product = 1 for x in range(i, k+1): for y in range(j, l+1): product *= matrix[x][y] max_product = max(max_product, product) return max_product"},{"question":"Gena has a rectangular-shaped plot of land which he wants to plant some trees on. The plot is divided into a grid of `n` rows and `m` columns. Gena has `k` trees, and he wants to plant them in such a way that each tree is positioned within the grid, and no two trees are in the same cell. After planting the trees, Gena wants to know if there exists a `2x2` subgrid within the plot that contains at least two trees. If no such subgrid exists, Gena will be happy and proceed with his planting plan. But if such a subgrid exists, Gena needs to change his plan. Write a function that determines whether there exists a `2x2` subgrid containing at least two trees. # Input The first line contains three integers `n`, `m`, and `k` (1 ≤ n, m ≤ 1000, 0 ≤ k ≤ n * m) — the number of rows and columns of Gena\'s plot, and the number of trees, respectively. The next `k` lines contain two integers `r` and `c` (1 ≤ r ≤ n, 1 ≤ c ≤ m) — the row and column positions of the trees. # Output Print \\"YES\\" if there exists a `2x2` subgrid that contains at least two trees. Otherwise, print \\"NO\\". # Example Input 5 5 4 1 1 2 2 3 3 1 3 Output NO Input 4 4 5 1 1 1 2 2 1 2 2 3 3 Output YES # Note In the first example, no `2x2` subgrid contains at least two trees. Therefore, the output is \\"NO\\". In the second example, there is a `2x2` subgrid formed by the positions `(1, 1)`, `(1, 2)`, `(2, 1)`, `(2, 2)` that contains four trees. Therefore, the output is \\"YES\\".","solution":"def has_2x2_subgrid_with_two_trees(n, m, k, tree_positions): from collections import defaultdict # Create a set to store the position of trees tree_set = set() for r, c in tree_positions: tree_set.add((r, c)) # Check each 2x2 subgrid for at least two trees for r, c in tree_positions: if (r + 1, c) in tree_set and (r, c + 1) in tree_set: return \\"YES\\" if (r + 1, c) in tree_set and (r + 1, c + 1) in tree_set: return \\"YES\\" if (r, c + 1) in tree_set and (r + 1, c + 1) in tree_set: return \\"YES\\" return \\"NO\\""},{"question":"Binary trees are fundamental structures in computer science, providing efficient ways to store, retrieve, and manipulate hierarchical data. One common operation in binary trees is finding the longest univalue path. A univalue path is a path in the binary tree where every node along the path has the same value. The length of a path is the number of edges between the nodes along the path. Your task is to implement a function that returns the length of the longest univalue path in a given binary tree. -----Function Signature----- ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def longestUnivaluePath(root: TreeNode) -> int: # Your code here ``` -----Input----- - root (TreeNode): The root node of the binary tree. Each `TreeNode` has the following attributes: - `val` (int): The value of the node. - `left` (TreeNode): The left child node. - `right` (TreeNode): The right child node. You may assume that the binary tree contains at least one node (i.e., `root` is not `None`). -----Output----- - int: The length of the longest univalue path. -----Examples----- Sample Input 1: ```python # Building the binary tree root = TreeNode(5) root.left = TreeNode(4) root.right = TreeNode(5) root.left.left = TreeNode(1) root.left.right = TreeNode(1) root.right.right = TreeNode(5) # Test function print(longestUnivaluePath(root)) ``` Sample Output 1: 2 Sample Input 2: ```python # Building the binary tree root = TreeNode(1) root.left = TreeNode(4) root.right = TreeNode(5) root.left.left = TreeNode(4) root.left.right = TreeNode(4) root.right.right = TreeNode(5) # Test function print(longestUnivaluePath(root)) ``` Sample Output 2: 2","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def longestUnivaluePath(root: TreeNode) -> int: Returns the length of the longest univalue path in a binary tree. if not root: return 0 def dfs(node): nonlocal longest if not node: return 0 left_length = dfs(node.left) right_length = dfs(node.right) left_univalue = 0 right_univalue = 0 if node.left and node.left.val == node.val: left_univalue = left_length + 1 if node.right and node.right.val == node.val: right_univalue = right_length + 1 longest = max(longest, left_univalue + right_univalue) return max(left_univalue, right_univalue) longest = 0 dfs(root) return longest"},{"question":"You are given a grid of size n x m, where each cell contains a positive integer representing the elevation at that point. You are also given two points (sx, sy) and (tx, ty) which represent the starting and target points on the grid, respectively. You want to determine the minimum cost to travel from the starting point to the target point. The cost to move between two adjacent cells (horizontally or vertically) is defined as the absolute difference in their elevations. Write a program to compute the minimum cost to travel from (sx, sy) to (tx, ty). Input The first line contains two integers n and m (2 ≤ n, m ≤ 1000), representing the grid\'s dimensions. The next n lines each contain m integers, where the j-th integer in the i-th line represents the elevation at cell (i, j) (1 ≤ elevation ≤ 1000). The last line contains four integers sx, sy, tx, and ty (1 ≤ sx, sy, tx, ty ≤ n or m), representing the starting and target points. Output Output a single integer representing the minimum cost to travel from (sx, sy) to (tx, ty). Examples Input 3 3 1 2 2 3 8 2 5 3 5 1 1 3 3 Output 4 Input 2 2 1 1000 1000 1 1 1 2 2 Output 1998 Note In the first test case, the minimum cost to travel from (1,1) to (3,3) is 4. One of the possible paths is: (1,1) -> (2,1): Cost = |1 - 3| = 2 (2,1) -> (2,2): Cost = |3 - 8| = 5 (2,2) -> (3,2): Cost = |8 - 3| = 5 (3,2) -> (3,3): Cost = |3 - 5| = 2 Total cost = 2 + 5 + 5 + 2 = 14 Minimal cost = 4 using a different path. In the second test case, there is only one possible path from (1,1) to (2,2) with a cost of |1 - 1000| + |1000 - 1| = 1998.","solution":"import heapq def min_cost_path(n, m, grid, sx, sy, tx, ty): Computes the minimum cost to travel from (sx, sy) to (tx, ty) in a grid. directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] cost = [[float(\'inf\')] * m for _ in range(n)] cost[sx-1][sy-1] = 0 pq = [(0, sx-1, sy-1)] while pq: current_cost, x, y = heapq.heappop(pq) if x == tx-1 and y == ty-1: return current_cost for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m: new_cost = current_cost + abs(grid[nx][ny] - grid[x][y]) if new_cost < cost[nx][ny]: cost[nx][ny] = new_cost heapq.heappush(pq, (new_cost, nx, ny)) return cost[tx-1][ty-1] # A wrapper function to help with input format for testing convenience. def solve(grid_data, start, end): n = len(grid_data) m = len(grid_data[0]) sx, sy = start tx, ty = end return min_cost_path(n, m, grid_data, sx, sy, tx, ty)"},{"question":"Anya, a programmer, loves collecting coins and recently acquired a collection of coins of different denominations. She has N different denominations of coins, and she wants to buy a candy that costs C units. Anya can use any number of coins to pay for the candy as long as their summed value is exactly C units. Your task is to help Anya determine the minimum number of coins needed to buy the candy. If it\'s not possible to pay exactly C units with the available denominations, return -1. Input - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains two space-separated integers N and C, denoting the number of different coin denominations and the cost of the candy. - The second line contains N space-separated integers, representing the values of the coin denominations. Output - For each test case, output a single integer: the minimum number of coins required to buy the candy or -1 if it is not possible to pay exactly C units. Constraints - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 100 - 1 ≤ C ≤ 10,000 - 1 ≤ coin denomination ≤ 1,000 SAMPLE INPUT 3 3 11 1 5 6 3 9 2 3 5 2 7 2 4 SAMPLE OUTPUT 2 3 -1","solution":"def min_coins_for_candy(T, test_cases): def min_coins(coins, C): dp = [float(\'inf\')] * (C + 1) dp[0] = 0 for coin in coins: for x in range(coin, C + 1): dp[x] = min(dp[x], dp[x - coin] + 1) return dp[C] if dp[C] != float(\'inf\') else -1 results = [] for i in range(T): N, C = test_cases[i][0] coins = test_cases[i][1] results.append(min_coins(coins, C)) return results"},{"question":"Given a binary tree, your task is to determine if it is a complete binary tree. In a complete binary tree, every level, except possibly the last, is completely filled, and all nodes are as far left as possible. Input: - T, the number of test cases. - For each test case: - An integer N, the number of nodes in the binary tree. - A space-separated list of N integers representing the level-order traversal of the binary tree (use -1 to represent null nodes). Output: - For each test case, output \\"1\\" if the binary tree is complete, otherwise output \\"0\\". Constraints: - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 1000 - Binary tree values are in the range [1, 1000] or -1 for null nodes. Example: Input: 3 6 1 2 3 4 5 -1 6 1 2 3 4 -1 5 3 1 2 3 Output: 1 0 1","solution":"def is_complete_binary_tree(n, nodes): if n == 0: return 1 i = 0 while i < n: if nodes[i] == -1: break i += 1 for j in range(i, n): if nodes[j] != -1: return 0 return 1 def evaluate_test_cases(T, cases): results = [] for i in range(T): n, nodes = cases[i] result = is_complete_binary_tree(n, nodes) results.append(result) return results def format_output(results): return \\"n\\".join(map(str, results))"},{"question":"Create a function to determine whether it’s possible to transform one string (source) into another (target) by deleting some characters (including zero) in the source string, without rearranging the remaining characters. -----Input----- The first and only line contains two strings, source and target, consisting only of lowercase English letters (1 ≤ |source|, |target| ≤ 100). -----Output----- If it is possible to transform source into target by deleting some characters from the source string, print \\"YES\\". Otherwise, print \\"NO\\". -----Examples----- Input abcde abc Output YES Input abcdef azc Output NO","solution":"def can_transform(source, target): Determines if source can be transformed into target by deleting some characters from source. it = iter(source) return \\"YES\\" if all(char in it for char in target) else \\"NO\\""},{"question":"A software company has a system that logs errors produced by their application. Each error log is characterized by two important pieces of information: the timestamp of when the error occurred and a unique error code. Every day, the system generates multiple error logs for the same day, and they want to analyze which error codes are the most and the least frequent for any given day. You are tasked with writing a program that processes the error logs for one day and finds the most frequent and least frequent error codes. In case of ties (multiple error codes having the same highest or lowest frequency), you should return the lexicographically smallest error code among them. ------- Input Format ------- The first line contains an integer N, the number of error logs for the day. The next N lines contain a string representing an error log for the day, each log is represented in the format \\"timestamp error_code\\". ------- Output Format ------- Output two strings: the most frequent error code and the least frequent error code separated by a space. ------- Constraints ------- 1 ≤ N ≤ 10^5 The timestamp is represented in the format \\"YYYY-MM-DD HH:MM:SS\\". The error_code is a non-empty string of alphanumeric characters of length between 1 and 20. ------- Sample Input 1 ------- 6 2021-10-15 08:23:45 E001 2021-10-15 09:47:21 E001 2021-10-15 10:15:00 E002 2021-10-15 11:05:34 E003 2021-10-15 14:31:12 E002 2021-10-15 16:18:40 E003 ------- Sample Output 1 ------- E001 E001 -------- Explanation 1 -------- In the sample, the error codes and their frequencies are: - E001: 2 times - E002: 2 times - E003: 2 times Since all error codes have the same frequency, the lexicographically smallest one, which is \'E001\', is both the most frequent and the least frequent.","solution":"def find_most_and_least_frequent_error_codes(n, error_logs): from collections import Counter error_counts = Counter() for log in error_logs: _, error_code = log.rsplit(\' \', 1) error_counts[error_code] += 1 if not error_counts: return (\\"\\", \\"\\") most_frequent = min(error_code for error_code, count in error_counts.items() if count == max(error_counts.values())) least_frequent = min(error_code for error_code, count in error_counts.items() if count == min(error_counts.values())) return most_frequent, least_frequent"},{"question":"Jason loves playing with strings. He finds it fascinating when he can create a palindrome after some operations. A palindrome is a string that reads the same backward as forward. He recently came across a problem where he has to check if a given string can be rearranged to form a palindrome. He can delete any number of characters, but he cannot re-arrange them. Can you help Jason determine if it is possible to create a palindrome from a given string? -----Input----- The first line of input contains an integer T which denotes the number of test cases. Next T lines contain a string S, consisting of only lowercase English letters. -----Output----- Print \\"YES\\" if it is possible to form a palindrome from the given string by deleting any number of characters. If it is not possible, print \\"NO\\". -----Constraints----- - 1 ≤ T ≤ 10^5 - 1 ≤ |S| ≤ 10^5 -----Example----- Input: 2 civic ivicc Output: YES YES Explanation: For the first test case \\"civic\\", it is already a palindrome. For the second test case \\"ivicc\\", deleting the second \\"i\\" gives the palindrome \\"civic\\".","solution":"def can_form_palindrome(T, strings): Determine if each string can be rearranged to form a palindrome by deleting any number of characters. Parameters: T (int): Number of test cases. strings (List[str]): List of strings to be checked. Returns: List[str]: \\"YES\\" or \\"NO\\" for each string. results = [] for s in strings: from collections import Counter char_counts = Counter(s) # Count characters with odd occurrences odd_count = sum(1 for count in char_counts.values() if count % 2 != 0) # A string can form a palindrome if it has at most one character with an odd count results.append(\\"YES\\" if odd_count <= 1 else \\"NO\\") return results"},{"question":"Anna loves trees and paths. She has a binary tree with N nodes. Each node of the tree has a unique integer value assigned to it. Anna is particularly interested in two types of paths: \\"Z-paths\\" and \\"O-paths.\\" - A \\"Z-path\\" is a path from one leaf to another leaf passing through their lowest common ancestor (LCA). - An \\"O-path\\" directly connects any two nodes in the tree, regardless of whether they are leaves or not. Anna is curious about the lengths of these paths. The length of a path between two nodes is defined as the number of edges in the path. She needs your help to solve the following problem: Given a binary tree, find the maximum Z-path length and the maximum O-path length. ------ Input Format ------ - The first line of input will contain an integer N, the number of nodes in the binary tree. - The next N-1 lines each contain two space-separated integers u and v, indicating there is an edge between node u and node v. ------ Output Format ------ - Output two space-separated integers. The first integer should be the length of the longest Z-path in the tree. The second integer should be the length of the longest O-path in the tree. ------ Constraints ------ 1 ≤ N ≤ 10^5 ----- Sample Input 1 ------ 5 1 2 1 3 2 4 2 5 ----- Sample Output 1 ------ 3 3 ----- Explanation 1 ------ The binary tree can be visualized as: ``` 1 / 2 3 / 4 5 ``` The longest Z-path is from leaf node 4 to leaf node 5 passing through their LCA which is node 2, giving a length of 3 (edges 4-2, 2-5). The longest O-path is from node 4 to node 3, passing through nodes 2 and 1, giving a length of 3 (edges 4-2, 2-1, 1-3).","solution":"import sys from collections import defaultdict, deque sys.setrecursionlimit(200000) def find_diameter(tree, N): def bfs(node): visited = [-1] * (N + 1) queue = deque([node]) visited[node] = 0 max_dist, farthest_node = 0, node while queue: cur = queue.popleft() current_dist = visited[cur] if current_dist > max_dist: max_dist = current_dist farthest_node = cur for neighbor in tree[cur]: if visited[neighbor] == -1: visited[neighbor] = current_dist + 1 queue.append(neighbor) return farthest_node, max_dist # Find the farthest node from an arbitrary node (usually start with node 1) farthest_node, _ = bfs(1) # Then, find the farthest node from the previously found node, which gives the diameter farthest_node, diameter = bfs(farthest_node) return diameter def binary_tree_paths(N, edges): tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Maximum O-path length is the diameter of the tree max_opath = find_diameter(tree, N) # For maximum Z-path (between leaf nodes), is also measured by diameter max_zpath = max_opath return max_zpath, max_opath # Example to gather output for provided test case if __name__ == \\"__main__\\": sample_input = \'\'\'5 1 2 1 3 2 4 2 5\'\'\' lines = sample_input.split(\'n\') N = int(lines[0]) edges = [tuple(map(int, line.split())) for line in lines[1:]] result = binary_tree_paths(N, edges) print(result) # For demonstration printing the result"},{"question":"You are asked to implement a simple caching system to store and retrieve integer values. The cache has a maximum capacity of `n` unique keys, and it operates on a Least Recently Used (LRU) basis. More specifically, you are given `m` queries which are either to insert/update a value in the cache or to retrieve a value from the cache. The cache uses a dictionary to store key-value pairs and an order-preserving structure to track the usage of the keys. When inserting or updating a value in the cache, if the cache has already reached its capacity, it should remove the least recently used key before inserting the new key-value pair. If a key that is being retrieved does not exist in the cache, return -1 for that query. You need to implement the queries and return the appropriate results for retrieval queries. -----Input----- The first line of the input contains two space-separated integers `n` and `m` (1 ≤ n, m ≤ 10^5) — the capacity of the cache and the number of queries, respectively. Next `m` lines describe the queries. Each query is in one of the following two formats: - `1 x y` where `1` indicates an insert/update operation for key `x` with value `y` (1 ≤ `x`, `y` ≤ 10^9). - `2 x` where `2` indicates a retrieval operation for key `x` (1 ≤ `x` ≤ 10^9). It is guaranteed that the sum of all keys and values in the input does not exceed 10^9. -----Output----- For each retrieval query, print the result on a single line. For missing keys, print -1. -----Examples----- Input 3 7 1 1 10 1 2 20 2 1 1 3 30 2 2 1 4 40 2 1 Output 10 20 -1","solution":"class LRUCache: def __init__(self, capacity: int): self.cache = {} self.capacity = capacity self.use_order = [] def get(self, key: int) -> int: if key in self.cache: self.use_order.remove(key) self.use_order.append(key) return self.cache[key] return -1 def put(self, key: int, value: int) -> None: if key in self.cache: self.use_order.remove(key) elif len(self.cache) >= self.capacity: lru_key = self.use_order.pop(0) del self.cache[lru_key] self.cache[key] = value self.use_order.append(key) def process_queries(n, m, queries): lru = LRUCache(n) results = [] for query in queries: if query[0] == 1: lru.put(query[1], query[2]) elif query[0] == 2: results.append(lru.get(query[1])) return results"},{"question":"You are given a string `s` consisting of lowercase English letters. You need to find the length of the longest substring of `s` such that no character in the substring appears more than once. Input - The first line contains a single integer `n` (1 ≤ n ≤ 10^5), the length of the string. - The second line contains the string `s` of length `n`. Output - Output a single integer, the length of the longest substring with unique characters. Examples Input 8 abcdabca Output 4 Input 5 bbbb Output 1 Note In the first example, the unique-character substrings of maximal length are \\"abcd\\" and \\"bcda\\", among others, each of which has length 4. In the second example, since all characters are the same, the longest substring with unique characters is any single character, giving a length of 1.","solution":"def longest_unique_substring_length(s): Returns the length of the longest substring with unique characters. s: str, the input string consisting of lowercase English letters char_index_map = {} start = 0 max_length = 0 for end, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Coders at the prestigious XYZ Hackathon are faced with a challenging problem of handling a massive amount of data efficiently. Each coder is given a sequence of integers and is required to process the sequence to identify significant patterns. Fortunately, the Great Mentor Z has suggested a problem which will make processing this data more manageable and efficient. The task is to identify the maximum sum of any subarray within the given sequence. Implement an algorithm that effectively finds out the maximum sum of any continuous subarray in the sequence for the given test cases. Input The first line of input contains an integer T, the number of test cases. Each of the next T lines contains an integer N followed by N space-separated integers representing the sequence. Output For each test case, print the maximum sum of any continuous subarray. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10000 -100 ≤ Element of the array ≤ 100 SAMPLE INPUT 2 5 -2 1 -3 4 -1 2 1 -5 4 4 -1 -2 -3 -4 SAMPLE OUTPUT 6 -1 Explanation For the first test case, the subarray [4, -1, 2, 1] has the largest sum 6. For the second test case, the subarray [-1] has the largest sum -1.","solution":"def max_subarray_sum(T, test_cases): Given T test cases of sequences, returns the maximum sum of any continuous subarray. :param T: int - number of test cases :param test_cases: list of tuples - each tuple contains an integer N (length of the sequence) followed by the sequence of integers :return: list of integers - maximum subarray sum for each test case results = [] for case in test_cases: N = case[0] array = case[1:] if N == 0: results.append(0) continue # Implementing Kadane\'s Algorithm max_current = max_global = array[0] for i in range(1, N): max_current = max(array[i], max_current + array[i]) if max_current > max_global: max_global = max_current results.append(max_global) return results # Example usage: # T = 2 # test_cases = [ # (9, -2, 1, -3, 4, -1, 2, 1, -5, 4), # (4, -1, -2, -3, -4) # ] # print(max_subarray_sum(T, test_cases)) # Output: [6, -1]"},{"question":"In a theme park, there is a ride which only allows visitors based on certain height groups. The height groups and their corresponding points are as follows: - Heights below 50 inches: 0 points - Heights between 50 and 60 inches (inclusive): 5 points - Heights between 61 and 70 inches (inclusive): 10 points - Heights above 70 inches: 15 points Write a function that takes a list of visitors, each represented as an object with \\"name\\" and \\"height\\" properties, and calculates their corresponding points. The function should return a list of objects with \\"name\\" and \\"points\\" properties, sorted by points in descending order. In case of ties, sort alphabetically by \\"name\\". For example: ``` [ {name: \\"Anna\\", height: 62}, {name: \\"Bella\\", height: 55}, {name: \\"Chris\\", height: 72}, {name: \\"Daniel\\", height: 49} ] ``` The function should return: ``` [ {name: \\"Chris\\", points: 15}, {name: \\"Anna\\", points: 10}, {name: \\"Bella\\", points: 5}, {name: \\"Daniel\\", points: 0} ] ``` Enjoy the ride!","solution":"def calculate_points(visitors): Returns a list of visitors with their corresponding points based on height, sorted by points in descending order and by name alphabetically in case of ties. result = [] for visitor in visitors: if visitor[\'height\'] < 50: points = 0 elif 50 <= visitor[\'height\'] <= 60: points = 5 elif 61 <= visitor[\'height\'] <= 70: points = 10 else: points = 15 result.append({\'name\': visitor[\'name\'], \'points\': points}) result.sort(key=lambda x: (-x[\'points\'], x[\'name\'])) return result"},{"question":"Given a directed graph with N nodes and M edges, you need to determine the number of nodes in the graph that are reachable from a given starting node S. A node is considered reachable from S if there is a directed path from S to that node. -----Input----- - The first line of the input contains two integers N and M denoting the number of nodes and the number of edges in the graph, respectively. - Each of the next M lines contains two integers U and V denoting a directed edge from node U to node V. - The last line contains a single integer S denoting the starting node. -----Output----- For each test case, print a single integer ― the number of nodes that are reachable from S (including S itself). -----Constraints----- - 1 le N, M le 10^5 - 1 le U, V, S le N -----Example Input----- 6 7 1 2 2 3 3 4 3 5 2 6 6 5 5 4 1 -----Example Output----- 6 -----Explanation----- From node 1, all nodes 1, 2, 3, 4, 5, and 6 are reachable, hence the output is 6.","solution":"from collections import defaultdict, deque def num_reachable_nodes(n, m, edges, start): # Building the adjacency list representation of the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) # Using BFS to find all reachable nodes from the starting node visited = set() queue = deque([start]) visited.add(start) while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return len(visited)"},{"question":"Rashmi is fascinated with arrays of integers and their sums. She has an array of size n and wants to divide the array into k non-empty contiguous subarrays such that the maximum sum among these subarrays is minimized. She seeks your help to find the minimized value of the maximum sum among the k subarrays for the given array. -----Input----- - The first line of input contains an integer T denoting the number of test cases. - For each test case, there are two lines. - The first line contains two space-separated integers n and k as defined in the problem. - The second line contains n space-separated integers, representing the elements of the array. -----Output----- - For each test case, print one line containing the minimized maximum sum of the subarrays. -----Constraints----- Subtask #1: 20 points - 1 ≤ T ≤ 50, 1 ≤ n ≤ 10, 1 ≤ k ≤ n Subtask #2: 35 points - 1 ≤ T ≤ 20, 1 ≤ n ≤ 100, 1 ≤ k ≤ n Subtask #3: 45 points - 1 ≤ T ≤ 10, 1 ≤ n ≤ 1000, 1 ≤ k ≤ n -----Example----- Input: 2 5 2 1 2 3 4 5 3 1 1 2 3 Output: 9 6 -----Explanation----- Example case 1: The possible way to divide the array into 2 subarrays where the maximum sum is minimized can be [1, 2, 3] and [4, 5]. Hence, the maximum sum among [6, 9] is 9. Example case 2: Since k=1, the entire array is taken as a single subarray, and the sum is 6.","solution":"def can_split(nums, n, k, max_sum): current_sum = 0 required_subarrays = 1 for num in nums: if current_sum + num > max_sum: required_subarrays += 1 current_sum = num if required_subarrays > k: return False else: current_sum += num return True def minimize_max_sum(n, k, nums): left, right = max(nums), sum(nums) result = right while left <= right: mid = (left + right) // 2 if can_split(nums, n, k, mid): result = mid right = mid - 1 else: left = mid + 1 return result def process_input(T, test_cases): results = [] for i in range(T): n, k = test_cases[i][0] nums = test_cases[i][1] result = minimize_max_sum(n, k, nums) results.append(result) return results"},{"question":"Jack is participating in a maze competition where he needs to navigate through a grid of cells to find the shortest path from the start to the destination. The grid is of size `n` rows and `m` columns. Each cell in the grid can either be open (represented by \'.\') or blocked (represented by \'#\'). Jack can move up, down, left, or right from one open cell to an adjacent open cell. Given the starting cell coordinates `(sr, sc)` and the destination cell coordinates `(dr, dc)`, your task is to determine the minimum number of moves Jack needs to reach the destination. If it is not possible to reach the destination, output \\"-1\\". -----Input----- The first line contains three integers `n`, `m`, and `k` (`1 <= n, m <= 100`, `1 <= k <= 10^4`), where `n` is the number of rows, `m` is the number of columns, and `k` is the number of test cases. For each of the `k` test cases, the first line contains four integers `sr`, `sc`, `dr`, and `dc` (`1 <= sr, sc, dr, dc <= 100`), representing the starting row, starting column, destination row, and destination column. Each of the next `n` lines contains a string of length `m` consisting of \'.\' and \'#\', representing the maze grid for that test case. -----Output----- For each test case, output a single integer representing the minimum number of moves Jack needs to reach the destination. If it is impossible, output \\"-1\\". -----Examples----- Input 4 4 2 1 1 4 4 .#.. .. ..#. ...# 1 1 2 2 .. .. .. .... Output -1 2 -----Note----- In the first test case, there is no possible path from the start to the destination as the paths are blocked. Hence, the output is -1. In the second test case, the minimum number of moves required to reach from (1,1) to (2,2) is 2, which can be achieved via the path (1,1) -> (2,1) -> (2,2).","solution":"from collections import deque def min_moves(n, m, k, test_cases): Determines the minimum number of moves Jack needs to reach the destination for each test case. Returns the results as a list. def is_valid(x, y, grid, visited): if 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' and (x, y) not in visited: return True return False def bfs(sr, sc, dr, dc, grid): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(sr, sc, 0)]) # (current_row, current_col, current_distance) visited = set() visited.add((sr, sc)) while queue: x, y, dist = queue.popleft() if (x, y) == (dr, dc): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny, grid, visited): visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 result = [] for case in test_cases: sr, sc, dr, dc, grid = case res = bfs(sr - 1, sc - 1, dr - 1, dc - 1, grid) result.append(res) return result"},{"question":"Mia loves solving puzzles. One day she came across an interesting problem related to binary trees and permutations. She decided to challenge her friend Tom with the following problem: Tom needs to construct a binary tree from a given preorder traversal list of distinct integers. The tree should also satisfy the following properties: 1. The tree is a Binary Search Tree (BST). 2. The tree\'s preorder traversal should match the given list. Recall that in a preorder traversal, a node is visited before its children, following the order: root, left subtree, right subtree. Tom is now wondering how he can construct such a tree, and if so, what its inorder traversal would look like. Your task is to help Tom by writing a function that constructs the BST from the given preorder traversal list and returns its inorder traversal. --- Input --- The first line contains an integer n (1 ≤ n ≤ 1000) — the number of nodes in the tree. The second line contains n distinct integers separated by spaces representing the preorder traversal of the tree. Each integer is between 1 and 10^6 inclusive. --- Output --- Output a single line containing n integers separated by spaces representing the inorder traversal of the constructed BST. --- Example --- Input: 5 8 5 1 7 10 Output: 1 5 7 8 10 --- Note --- In a Binary Search Tree (BST), for every node: - The left subtree of a node contains only nodes with keys less than the node\'s key. - The right subtree of a node contains only nodes with keys greater than the node\'s key. - Both the left and right subtrees must also be binary search trees. The inorder traversal of a BST always gives the nodes in non-decreasing order.","solution":"class TreeNode: def __init__(self, key=0, left=None, right=None): self.key = key self.left = left self.right = right def construct_bst_from_preorder(preorder): if not preorder: return None def build_bst(preorder, index, bound): if index[0] == len(preorder) or preorder[index[0]] > bound: return None root_val = preorder[index[0]] index[0] += 1 root = TreeNode(root_val) root.left = build_bst(preorder, index, root_val) root.right = build_bst(preorder, index, bound) return root index = [0] return build_bst(preorder, index, float(\'inf\')) def inorder_traversal(root): if not root: return [] return inorder_traversal(root.left) + [root.key] + inorder_traversal(root.right) def inorder_from_preorder(n, preorder): root = construct_bst_from_preorder(preorder) return inorder_traversal(root)"},{"question":"Adam has a favorite number sequence where each number is the sum of the squares of the digits of the previous number. He starts with a given number and follows this sequence. Sometimes the sequence gets stuck in a cycle, repeating the same numbers indefinitely. Given a starting number, determine if the sequence will eventually get stuck in a cycle. -----Input----- The input contains a single integer between 1 and 10,000,000. -----Output----- Output \\"Cycle\\" if the sequence becomes cyclic. Otherwise, output \\"No Cycle\\". -----Examples----- Sample Input: 19 Sample Output: No Cycle Sample Input: 116 Sample Output: Cycle","solution":"def sum_of_squares_of_digits(n): return sum(int(digit) ** 2 for digit in str(n)) def detect_cycle(n): seen_numbers = set() while n not in seen_numbers: if n == 1: return \\"No Cycle\\" seen_numbers.add(n) n = sum_of_squares_of_digits(n) return \\"Cycle\\""},{"question":"In a store, there are N items each with a specific price. Your task is to determine the maximum sum of prices of items that can be selected such that no two selected items have adjacent indexes in the original list. Example 1: Input: N = 5 arr = {3, 2, 5, 10, 7} Output: 15 Explanation: Selecting items at index 0, 2, and 4 gives a sum of 3 + 5 + 7 = 15. Example 2: Input: N = 4 arr = {3, 2, 7, 10} Output: 13 Explanation: Selecting items at index 0 and 3 gives a sum of 3 + 10 = 13. Your Task: You do not need to read input or print anything. Your task is to complete the function maxSumNonAdjacent() which takes the size of the array N and the array arr[] as input parameters and returns the maximum sum of non-adjacent items. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^{4} 1 ≤ arr[i] ≤ 10^{6}","solution":"def maxSumNonAdjacent(N, arr): if N == 0: return 0 if N == 1: return arr[0] prev1 = max(0, arr[0]) prev2 = 0 for i in range(1, N): current = max(prev1, prev2 + arr[i]) prev2 = prev1 prev1 = current return prev1"},{"question":"Write a function that takes in a list of integers and returns a new list that contains only the prime numbers from the original list. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. -----Constraints----- - The input list will have at most length 1000. - Each integer in the list will be between 2 and 10,000 (inclusive). -----Input----- The function should take in the following argument: - A list of integers -----Output----- The function should return a list of integers which are prime. -----Sample Input----- [2, 3, 4, 5, 28, 29, 30] -----Sample Output----- [2, 3, 5, 29]","solution":"def is_prime(n): Helper function to check if a given number n is prime. if n <= 1: return False if n == 2: return True # 2 is the only even prime number if n % 2 == 0: return False max_divisor = int(n**0.5) + 1 for d in range(3, max_divisor, 2): if n % d == 0: return False return True def filter_primes(numbers): Returns a list containing only the prime numbers from the original list. Args: numbers (list of int): The list of integers to filter primes from. Returns: list of int: A list containing only the prime numbers. return [num for num in numbers if is_prime(num)]"},{"question":"You are given a string containing only lowercase letters and an integer k. Determine if you can rearrange the string such that there are exactly k distinct characters in the string. -----Input----- The first line contains a single integer t (1 leq t leq 1000) — the number of test cases. The description of each test case consists of a string s (1 leq |s| leq 1000) and an integer k (1 leq k leq 26). -----Output----- For each test case, output \\"YES\\" if you can rearrange the string to have exactly k distinct characters, and \\"NO\\" otherwise. You can output the answer in any case (for example, the strings \\"yEs\\", \\"yes\\", \\"Yes\\" and \\"YES\\" will be recognized as a positive answer). -----Examples----- Input 3 abc 2 aaa 1 abcd 5 Output YES YES NO -----Note----- In the first test case, you can rearrange the string \\"abc\\" to \\"aab\\", \\"bbc\\" or any other combination that contains exactly 2 distinct characters. In the second test case, the string \\"aaa\\" already has exactly 1 distinct character. In the third test case, it is impossible to rearrange the string \\"abcd\\" to have 5 distinct characters since the string only has 4 distinct characters.","solution":"def can_rearrange_with_k_distinct_characters(t, test_cases): results = [] for s, k in test_cases: unique_chars = len(set(s)) if unique_chars >= k: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"In a futuristic society, there are special communication towers spread across the city. These towers are arranged in a straight line, and each tower has a specific communication range. Two towers can communicate if they are within each other’s range. You are given a list of the towers, where each tower has a position and a range. Your task is to determine the maximum number of towers that can simultaneously communicate with each other in this setup. Input The input consists of a single integer n (1 ≤ n ≤ 10^5), followed by n lines. Each of these lines contains two integers, p (the position of the tower) and r (the communication range of the tower). Both p and r are non-negative integers (0 ≤ p, r ≤ 10^9). Output Print a single number — the maximum number of towers that can simultaneously communicate with each other. Examples Input 4 1 2 2 1 5 1 10 2 Output 2 Input 3 0 1 1 1 2 0 Output 3 Note The first sample test: 1) Tower at position 1 with range 2 can communicate with the tower at position 2 with range 1. 2) Tower at position 5 with range 1 cannot communicate with any other tower. 3) Tower at position 10 with range 2 cannot communicate with any other tower. Hence, the maximum number of towers that can communicate with each other in this example is 2. The second sample test: 1) Tower at position 0 with range 1 can communicate with the tower at position 1 with range 1 and the tower at position 2 with range 0. 2) All three towers can communicate with each other. Therefore, the maximum number of towers that can communicate with each other in this example is 3.","solution":"def max_communication_towers(towers): towers.sort() # Sort the towers based on position n = len(towers) # Dynamic Programming approach to find the maximum subset of towers that can communicate dp = [1] * n # Initialize dp array where each tower can communicate with itself for i in range(1, n): for j in range(i): if towers[j][0] + towers[j][1] >= towers[i][0] - towers[i][1]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) # Example usage: # result = max_communication_towers([(1, 2), (2, 1), (5, 1), (10, 2)]) # print(result)"},{"question":"Write a function to determine if a given number is a \\"special number\\" or not. A number is considered special if it satisfies the following conditions: 1. The digits of the number alternate between odd and even. For example, 5 (odd) and 4 (even), or 3 (odd) and 8 (even). 2. If there\'s only one digit, it should be either odd or even. Example 1: Input: num = 2957 Output: True Explanation: The number 2957 has the following digits - 2 (even), 9 (odd), 5 (odd), 7 (odd). Since 9 (odd) and 5 (odd) are adjacent, it is not a special number. Thus, the output is True. Example 2: Input: num = 1234 Output: False Explanation: The number 1234 has the following digits - 1 (odd), 2 (even), 3 (odd), 4 (even). The digits alternate correctly, so it is considered a special number. Thus, the output is False. Your Task: You don\'t need to read input or print anything. Complete the function `isSpecialNumber` which takes num as input parameter and returns True if the number is special, otherwise returns False. Expected Time Complexity: O(logn) Expected Auxiliary Space: O(1) Constraints: 1 <= num <= 10^{18}","solution":"def isSpecialNumber(num): Determines if a number is a special number. A number is considered special if the digits of the number alternate between odd and even. num_str = str(num) for i in range(len(num_str) - 1): current_digit = int(num_str[i]) next_digit = int(num_str[i + 1]) if (current_digit % 2) == (next_digit % 2): return False return True"},{"question":"A gaming company wants to implement a new ranking system for their competitive games. Each player is assigned a rank based on their performance. Given the total number of players and the rank of each player, the company wants to enforce a rule that says: for every player, their rank must be unique and between 1 and n (inclusive), where n is the total number of players. Write a program that reads the rank assigned to each player and outputs the minimum number of changes required to make all the ranks unique and valid according to the rule described. If it is not possible to create such unique ranking, output `-1`. Input - The first line contains an integer t denoting the number of test cases. - For each test case: - The first line contains an integer n, the total number of players. - The second line contains n integers separated by spaces, representing the current rank assigned to each player. Output - For each test case, print a single line containing the minimum number of changes required, or `-1` if it\'s not possible to achieve the unique ranking. Constraints 1 ≤ t ≤ 100 1 ≤ n ≤ 10^5 1 ≤ rank ≤ 10^9 Example Input: 2 5 4 4 4 4 4 3 3 2 1 Output: 4 0","solution":"def min_changes_for_unique_ranks(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] ranks = test_cases[i][1] rank_counter = {} for rank in ranks: if rank in rank_counter: rank_counter[rank] += 1 else: rank_counter[rank] = 1 # Count of duplicates and their respective transformations: changes_needed = 0 unique_ranks = set() for rank, count in rank_counter.items(): if count > 1: changes_needed += count - 1 unique_ranks.add(rank) # Check if the number of changes can fit into the valid range if len(unique_ranks) + changes_needed > n: results.append(-1) else: results.append(changes_needed) return results"},{"question":"In a certain game, there exists a territory divided into a grid of cells with `m` rows and `n` columns. Each cell is classified as either habitable or inhabitable. A player starts at the top-left corner of the grid (cell (1,1)), and their goal is to reach the bottom-right corner (cell (m, n)) by moving through habitable cells. The player can move to any adjacent cell that shares a side with their current cell (up, down, left, or right). Given the grid\'s layout, determine if it\'s possible for the player to reach the bottom-right corner from the top-left corner. Input: - The first line contains two integers `m` and `n` (1 ≤ m, n ≤ 1000) — the dimensions of the grid. - The next `m` lines contain `n` characters each, representing the grid\'s layout. A character \\"H\\" represents a habitable cell, and a character \\"I\\" represents an inhabitable cell. Output: - Print \\"YES\\" if the player can reach the bottom-right corner, otherwise print \\"NO\\". Examples: Input: 3 3 HHH HIH HHH Output: YES Input: 3 3 HHH IHH HHI Output: NO Note: In the first example, the player can move through habitable cells from the top-left to the bottom-right corner without encountering any inhabitable cells. In the second example, there\'s no valid path that allows the player to move from the top-left corner to the bottom-right corner due to the inhabitable cells blocking the way.","solution":"def can_reach_bottom_right(m, n, grid): from collections import deque if grid[0][0] == \'I\' or grid[m-1][n-1] == \'I\': return \\"NO\\" directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = [[False] * n for _ in range(m)] queue = deque([(0, 0)]) visited[0][0] = True while queue: x, y = queue.popleft() if x == m-1 and y == n-1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny] and grid[nx][ny] == \'H\': visited[nx][ny] = True queue.append((nx, ny)) return \\"NO\\""},{"question":"You are given the integers n and k, where n represents the number of distinct positive integers, and k denotes the maximum value that can be formed by summing any subset of the given integers. Your task is to determine whether it is possible to divide the set of n integers into exactly two non-empty subsets, such that the sums of the elements in these two subsets are equal. -----Input----- The first line contains two integers n and k (2 le n le 1000, 1 le k le 10^6), denoting the number of integers and the maximum value, respectively. The second line contains n distinct integers a_1, a_2, ldots, a_n (1 le a_i le k) representing the given set of integers. -----Output----- Output \\"YES\\" if it is possible to divide the set of n integers into two subsets with equal sum. Otherwise, output \\"NO\\". -----Examples----- Input 5 10 1 2 3 4 6 Output YES Input 4 15 5 7 9 4 Output NO -----Note----- In the first example, it is possible to divide the set into two subsets {1, 4, 6} and {2, 3, 6}, both summing to 10. In the second example, there is no way to divide the set of integers such that both subsets have the same sum.","solution":"def can_partition_equal_sum(n, k, nums): total_sum = sum(nums) # If total_sum is odd, then it is not possible to split them into two equal sum subsets if total_sum % 2 != 0: return \\"NO\\" target = total_sum // 2 dp = [False] * (target + 1) dp[0] = True for num in nums: for j in range(target, num - 1, -1): dp[j] = dp[j] or dp[j - num] return \\"YES\\" if dp[target] else \\"NO\\""},{"question":"You are given a list of N events each defined by a pair of start and end times. Two events are said to be overlapping if they have at least one common point in time. Your task is to determine the minimum number of non-overlapping intervals needed to cover all the events. -----Input----- The input consists of: - One line with one integer N (1 leq N leq 100000), the number of events, - N lines each with two integers S and E (0 leq S < E leq 10^9), the start and end times of each event. -----Output----- Output one line with a single integer: The minimum number of non-overlapping intervals required to cover all events. -----Examples----- Sample Input: 5 1 3 2 5 4 7 6 8 8 10 Sample Output: 2","solution":"def min_non_overlapping_intervals(events): # Sort events by their end times primarily and start times secondarily events.sort(key=lambda x: (x[1], x[0])) count = 0 previous_end = -1 for start, end in events: if start >= previous_end: count += 1 previous_end = end return count # Example of usage: # events = [(1, 3), (2, 5), (4, 7), (6, 8), (8, 10)] # print(min_non_overlapping_intervals(events)) # Output should be 3"},{"question":"Alice is organizing a charity event and she wants to distribute some candies to children. She has a bag that contains candies of k different types. The number of candies of each type is represented by an array `candies` of length `k`. Alice wants to distribute all the candies to the children such that each child receives exactly one type of candy and all candies of that type. Each child is allowed to receive a different number of candies, but no child can receive candies of more than one type. Alice wants to know the minimum number of children required to distribute all the candies. -----Input----- The first line contains an integer k (1 ≤ k ≤ 1000), representing the number of different types of candies. The second line contains k integers, `candies_1, candies_2, ..., candies_k` (1 ≤ candies_i ≤ 10000), representing the number of candies of each type. -----Output----- In a single line print an integer — the minimum number of children required to distribute all the candies. -----Examples----- Input 3 10 20 30 Output 3 Input 5 5 10 15 20 25 Output 5 -----Note----- In the first example, Alice needs at least 3 children to distribute the candies: one for the 10 candies of the first type, one for the 20 candies of the second type, and one for the 30 candies of the third type. In the second example, Alice needs at least 5 children to distribute the candies: one for 5 candies of the first type, one for 10 candies of the second type, one for 15 candies of the third type, one for 20 candies of the fourth type, and one for 25 candies of the fifth type.","solution":"def min_children(k, candies): Given an integer k representing the number of different types of candies, and an array candies of length k representing the number of candies of each type, this function returns the minimum number of children required to distribute all the candies. return k"},{"question":"Write a function `group_anagrams` that takes a list of strings and returns a dictionary where the keys are sorted tuples of characters and the values are lists of anagrams grouped together. Each group should contain words that are anagrams of each other. Examples ```python For input list [\\"bat\\", \\"tab\\", \\"eat\\", \\"tea\\", \\"tan\\", \\"nat\\", \\"bat\\"] The output dictionary should be: {(\'a\', \'b\', \'t\'): [\'bat\', \'tab\', \'bat\'], (\'a\', \'e\', \'t\'): [\'eat\', \'tea\'], (\'a\', \'n\', \'t\'): [\'tan\', \'nat\']} For input list [\\"listen\\", \\"silent\\", \\"enlist\\", \\"google\\", \\"gogole\\"] The output dictionary should be: {(\'e\', \'i\', \'l\', \'n\', \'s\', \'t\'): [\'listen\', \'silent\', \'enlist\'], (\'e\', \'g\', \'g\', \'l\', \'o\', \'o\'): [\'google\', \'gogole\']} ``` Note: Assume that the input list contains only lowercase alphabets.","solution":"def group_anagrams(words): Groups anagrams from the list of words. Args: words (list of str): The list of words to be grouped. Returns: dict: A dictionary where keys are sorted tuples of characters and values are lists of anagrams. anagrams = {} for word in words: key = tuple(sorted(word)) if key not in anagrams: anagrams[key] = [] anagrams[key].append(word) return anagrams"},{"question":"You are given an N x N grid representing a map of an island. Each cell in the grid can either be water (\'0\') or land (\'1\'). Two cells are considered adjacent if they are connected horizontally or vertically. A group of connected land cells forms an island. Your task is to determine the number of distinct islands. An island is considered distinct if it has a unique shape. Two islands are considered the same shape if one can be obtained from the other by translation, but not by rotation or reflection. # Input - The first line contains an integer N (1 ≤ N ≤ 50), the size of the grid. - The next N lines each contain N characters (\'0\' or \'1\') representing the grid. # Output - Output a single integer, the number of distinct islands. # Example Input ``` 4 1100 1100 0010 0000 ``` Output ``` 2 ``` Note In the first example, there are two distinct islands in the grid: - The first island is formed by the four land cells in the top-left corner. - The second island is formed by the single land cell in the third column of the third row. Both islands are distinct since their shapes are not the same.","solution":"def num_distinct_islands(grid): n = len(grid) visited = [[False for _ in range(n)] for _ in range(n)] def dfs(x, y, origin, shape): if x < 0 or y < 0 or x >= n or y >= n or visited[x][y] or grid[x][y] == \'0\': return visited[x][y] = True shape.append((x - origin[0], y - origin[1])) dfs(x + 1, y, origin, shape) dfs(x - 1, y, origin, shape) dfs(x, y + 1, origin, shape) dfs(x, y - 1, origin, shape) distinct_islands = set() for i in range(n): for j in range(n): if grid[i][j] == \'1\' and not visited[i][j]: shape = [] dfs(i, j, (i, j), shape) distinct_islands.add(frozenset(shape)) return len(distinct_islands) def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) grid = data[1:] print(num_distinct_islands(grid))"},{"question":"The task is to implement a graph traversal algorithm. You will be given a graph in the form of an adjacency list and have to complete the function that performs Depth First Search (DFS) starting from a given node. The function should return a list of nodes in the order they are visited. Example 1: Input: N = 4 graph = [[1, 2], [0, 3], [0], [1]] start = 0 Output: [0, 1, 3, 2] Explanation: The graph is represented as: 0 - 1 - 3 | 2 Starting from node 0, DFS will visit the nodes in the order: 0, 1, 3, 2. Example 2: Input: N = 3 graph = [[1], [0, 2], [1]] start = 2 Output: [2, 1, 0] Explanation: The graph is represented as: 0 - 1 - 2 Starting from node 2, DFS will visit the nodes in the order: 2, 1, 0. Your Task: You have to complete the function `dfs()` which takes the graph in adjacency list form, number of nodes N, and the starting node as input and returns a list of nodes in the order they are visited in DFS fashion. Expected Time Complexity: O(V + E). Expected Auxiliary Space: O(V). Constraints: 1 <= N <= 10^{5} 0 <= graph[u] < N 1 <= len(graph) <= N","solution":"def dfs(N, graph, start): Perform Depth-First Search starting from a given node. Args: N : int : Number of nodes in the graph graph : list : Adjacency list representation of the graph start : int : Starting node for DFS Returns: list : List of nodes visited in DFS order visited = [False] * N result = [] def dfs_util(v): visited[v] = True result.append(v) for neighbor in graph[v]: if not visited[neighbor]: dfs_util(neighbor) dfs_util(start) return result"},{"question":"Write a function that takes two sorted arrays and merges them into a single sorted array, without using any built-in sorting functions. Example 1: Input: arr1 = [1, 3, 5], arr2 = [2, 4, 6] Output: [1, 2, 3, 4, 5, 6] Explanation: Merging the two sorted arrays results in a single sorted array. Example 2: Input: arr1 = [10, 20], arr2 = [15, 30] Output: [10, 15, 20, 30] Explanation: Merging the two sorted arrays results in a single sorted array. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `merge_sorted_arrays()` which takes `arr1` and `arr2` as inputs and returns a list of integers representing the merged sorted array. Expected Time Complexity: O(n + m), where n and m are the lengths of `arr1` and `arr2` respectively. Expected Auxiliary Space: O(n + m) Constraints: 1 ≤ len(arr1), len(arr2) ≤ 10^{5} 1 ≤ arr1[i], arr2[i] ≤ 10^{9}","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into a single sorted array. result = [] i = j = 0 while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: result.append(arr1[i]) i += 1 else: result.append(arr2[j]) j += 1 # Append remaining elements, if any while i < len(arr1): result.append(arr1[i]) i += 1 while j < len(arr2): result.append(arr2[j]) j += 1 return result"},{"question":"Sarah is creating a custom JSON parser for her application. In her JSON format, objects are represented by curly braces `{}` and key-value pairs within objects are separated by colons `:`. Arrays are represented by square brackets `[]` and elements within arrays are separated by commas `,`. Strings in JSON are enclosed in double quotes `\\"` while numbers are represented as sequences of digits. To simplify, the JSON strings can be nested but will only have strings, numbers, arrays, and objects with string keys. Strings are guaranteed to not contain any double quotes in themselves. Your task is to write a function that extracts and prints all the integer numbers found anywhere within the JSON string. The extracted integers should be printed in the order they appear in the JSON string, even if they are nested within arrays or objects. Input The first line contains a single integer `n` (1 ≤ n ≤ 10^5) which is the number of lines in the JSON string. The next `n` lines contain the JSON string. Each line can be between 1 and 100 characters long. Output Print all integers found within the JSON string in the order they appear, separated by spaces. Examples Input 3 { \\"name\\": \\"Sarah\\", \\"age\\": 28, \\"scores\\": [100, 98, 85], \\"details\\": {\\"height\\": 175, \\"weight\\": 70} } Output 28 100 98 85 175 70 Input 2 [\\"first_number\\": 123, \\"second_number\\": 456, \\"third_number\\": 789] Output 123 456 789 Input 4 { \\"array\\": [1, 2, 3], \\"number\\": 42, \\"nested\\": { \\"data\\": [5, 6] } } Output 1 2 3 42 5 6 Note In the first example, integers 28, 100, 98, 85, 175, and 70 appear in the JSON string, and they are printed in the same order of appearance. In the second example, integers 123, 456, and 789 appear in the JSON string, and they are printed in their order of appearance. In the third example, integers 1, 2, 3, 42, 5, and 6 are found within both the array and nested objects, and are printed in the order they appear.","solution":"import re def extract_integers(n, json_strings): Extracts and prints all integers found within the JSON strings in order. :param int n: The number of lines in the JSON string :param list json_strings: List containing the JSON string lines json_combined = \' \'.join(json_strings) integers = re.findall(r\'[-+]?bd+b\', json_combined) print(\' \'.join(integers))"},{"question":"Alice has a piece of ribbon with an initial length of L. She cuts off a length V from it for a gift. She then cuts the residual ribbon into several equal segments, each of integer length. If it\'s impossible to cut the remaining ribbon into integer segments of equal length, determine the number of segments left over. -----Constraints----- - 1 leq L leq 1000 - 1 leq V leq L -----Input----- Input is given from Standard Input in the following format: L V -----Output----- Print the number of segments that are left over when Alice cuts the remaining ribbon into equal segments of the largest possible integer length. -----Sample Input----- 20 7 -----Sample Output----- 7 Explanation: After cutting off 7 units, the remaining ribbon length is 13. Alice can cut the 13 units into segments of length 1 with no ribbon left over, segments of length 2 with 1 unit left over, segments of length 3 with 1 unit left over, etc. The largest possible segment length will be 6, but this leaves 1 unit of ribbon which is not possible to form a complete segment. Hence, the left-over segment is 7 units.","solution":"def remaining_segments(L, V): Determines the number of segments left over when Alice cuts the remaining ribbon into equal segments of the largest possible integer length. remaining_length = L - V if remaining_length == 0: return 0 return remaining_length # Example Usage: # L, V = map(int, input().strip().split()) # print(remaining_segments(L, V))"},{"question":"You are given a large binary matrix where `1` represents land and `0` represents water. An island is a group of connected `1`s forming a contiguous block by connecting adjacent 1\'s horizontally or vertically (not diagonally). Your task is to find the sizes of all islands in the matrix. Write a function that takes the binary matrix as input and returns a list of the sizes of all islands. The order of sizes in the returned list does not matter. -----Input----- The input consists of a single test case. Each test case will consist of: - An integer `m` (1 le m le 1000), the number of rows in the matrix. - An integer `n` (1 le n le 1000), the number of columns in the matrix. - `m` lines each containing `n` integers separated by spaces, representing the binary matrix. -----Output----- Output a list of integers representing the sizes of all islands found in the matrix. -----Examples----- Sample Input 1: 4 5 1 1 0 0 0 1 1 0 0 1 0 0 0 1 1 0 0 0 0 0 Sample Output 1: [4, 3] Sample Input 2: 3 3 1 1 0 1 0 0 0 0 1 Sample Output 2: [3, 1] Sample Input 3: 3 3 0 0 0 0 0 0 0 0 0 Sample Output 3: []","solution":"def find_island_sizes(matrix): m = len(matrix) n = len(matrix[0]) if m > 0 else 0 def dfs(i, j): if i < 0 or i >= m or j < 0 or j >= n or matrix[i][j] == 0: return 0 matrix[i][j] = 0 # Mark as visited size = 1 # Search in 4 possible directions (up, down, left, right) size += dfs(i + 1, j) size += dfs(i - 1, j) size += dfs(i, j + 1) size += dfs(i, j - 1) return size island_sizes = [] for i in range(m): for j in range(n): if matrix[i][j] == 1: island_size = dfs(i, j) island_sizes.append(island_size) return island_sizes"},{"question":"In an ancient kingdom, there exists a vast magical library containing numerous ancient books. Each book has a certain number of magical pages, and these pages contain immense knowledge and power. The books are arranged on a single shelf in a line. Each book is so powerful that simply flipping through its magical pages increases the energy of the reader. Moreover, the energy boost received from a book depends on the number of magical pages it contains. Given the number of magical pages in each book, the ruler of the kingdom wants to organize the books in such a way that the sum of the energy boosts from selecting a continuous subarray of books is maximized when selecting exactly \'k\' books from the shelf. You are required to answer multiple queries. For each query, the ruler demands to know the maximum possible sum of energy boosts that can be obtained for the given value of \'k\'. -----Input----- The first line contains two integers n and q (1 le n le 10^5, 1 le q le 10^5), where n is the number of books on the shelf and q is the number of queries. The second line contains n integers p_1, p_2, dots, p_n (1 le p_i le 10^9) — the number of magical pages in the i-th book. Each of the next q lines contains an integer k_i (1 le k_i le n) — the value of \'k\' for the i-th query. -----Output----- For each query, print one integer — the maximum possible sum of energy boosts that can be obtained by selecting exactly \'k\' continuous books from the shelf for the given value of \'k\'. -----Examples----- Input 5 3 1 2 3 4 5 1 3 5 Output 5 12 15 -----Note----- For the first query, selecting the single book with the highest number of magical pages gives the maximum sum, which is 5. For the second query, selecting the subarray [3, 4, 5] gives the maximum sum, which is 12. For the third query, selecting all books [1, 2, 3, 4, 5] gives the maximum sum, which is 15.","solution":"def max_sum_of_k_books(pages, k): Calculates the maximum sum of k continuous books\' pages from the given list of pages. n = len(pages) # Initial window sum of the first \'k\' elements curr_sum = sum(pages[:k]) max_sum = curr_sum # Sliding window approach to find the maximum sum of \'k\' continuous books for i in range(k, n): curr_sum += pages[i] - pages[i - k] max_sum = max(max_sum, curr_sum) return max_sum def process_queries(n, q, pages, queries): Given the number of books, number of queries, pages list of books and a list of queries, returns the results for each query. results = [] for k in queries: results.append(max_sum_of_k_books(pages, k)) return results"},{"question":"An online bookstore keeps track of book inventories in different warehouses. Each book is identified by a unique ISBN number and belongs to a specific genre. Due to recent shuffling, there have been discrepancies in the stock count across the warehouses. The store needs a program to determine the total available copies of each genre across all warehouses. Each record represents a warehouse\'s inventory for a single genre and is formatted as follows: ISBN number, genre, and the number of copies available. There are no duplicate ISBNs within the same warehouse, but the same ISBN may appear in different warehouses. Genre names are consistent. Write a program that reads the inventory information for multiple warehouses and outputs the total number of copies available for each genre. Input The input consists of multiple datasets. Each dataset begins with a line containing a single integer, n (1 ≤ n ≤ 50), representing the number of entries for the dataset. The next n lines each contain an inventory record for a warehouse in the following format: ISBN_NUMBER GENRE COPIES - ISBN_NUMBER: A unique identifier for the book (a string of alphanumeric characters). - GENRE: The genre of the book (a string with no spaces). - COPIES: An integer representing the number of copies available for that ISBN in the warehouse. The end of the input is indicated by a single line containing a zero. Output For each dataset, output the total number of copies available for each genre in the format: GENRE TOTAL_COPIES Output the genres in the order they first appear in the dataset. Example Input 3 12345 Fiction 5 67890 Fiction 3 54321 Thriller 2 4 11223 Mystery 7 33445 Fiction 10 55667 Mystery 3 77889 SciFi 6 0 Output Fiction 8 Thriller 2 Mystery 10 Fiction 10 Mystery 10 SciFi 6","solution":"def calculate_genre_totals(datasets): results = [] for dataset in datasets: genre_totals = {} for record in dataset: isbn, genre, copies = record.split() copies = int(copies) if genre in genre_totals: genre_totals[genre] += copies else: genre_totals[genre] = copies results.append(genre_totals) return results"},{"question":"You are given an array of integers and a target value. Write a function that determines if there are two integers in the array whose sum is equal to the target value. The function should return a boolean value. Constraints * The array can have a length up to 10^5. * Each integer in the array can range from -10^9 to 10^9. * The target value is an integer that can range from -10^9 to 10^9. Input The function will receive the following arguments: - An integer array nums representing the array of integers. - An integer target representing the target value. Output The function should return a boolean value, True if there are two distinct integers in the array whose sum is equal to the target value, and False otherwise. Examples Input nums = [2, 7, 11, 15] target = 9 Output True Input nums = [1, 2, 3, 9] target = 8 Output False Input nums = [3, 3] target = 6 Output True","solution":"def has_pair_with_sum(nums, target): Determines if there are two integers in the array whose sum is equal to the target value. Args: nums: List[int] - A list of integers. target: int - The target sum value. Returns: bool - True if there are two distinct integers whose sum equals the target, otherwise False. seen = set() for number in nums: if target - number in seen: return True seen.add(number) return False"},{"question":"A battlefield is set up as an m times n grid, where each cell is either empty or contains an obstacle. A warrior starts at the top-left corner of the grid and wants to reach the bottom-right corner. The warrior can only move either right or down at any point in time, and cannot move through obstacles. You are to determine the number of unique paths that the warrior can take to reach the bottom-right corner from the top-left corner, given the constraints of movement and obstacles. -----Input----- The input consists of two values m and n, representing the dimensions of the grid (1 leq m, n leq 100). Following this, there are m lines each containing n integers (0 or 1). A 0 indicates an empty cell, and a 1 indicates an obstacle. -----Output----- Output a single integer, the number of unique paths from the top-left to the bottom-right corner. If there is no such path, output 0. -----Examples----- Sample Input 1: 3 3 0 0 0 0 1 0 0 0 0 Sample Output 1: 2 Sample Input 2: 3 3 0 1 0 1 0 0 0 0 0 Sample Output 2: 0","solution":"def unique_paths_with_obstacles(grid): Returns the number of unique paths from the top-left corner to the bottom-right corner in a grid with obstacles. :param grid: List of List of int (0 for empty cell, 1 for obstacle) :return: int, number of unique paths # Get the dimensions of the grid m = len(grid) n = len(grid[0]) # Edge case: start or end is an obstacle if grid[0][0] == 1 or grid[m-1][n-1] == 1: return 0 # Initialize a dp array with 0s dp = [[0] * n for _ in range(m)] # Set the start point dp[0][0] = 1 # Fill the dp table for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 # Obstacle cells else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1] # Example usage grid1 = [ [0, 0, 0], [0, 1, 0], [0, 0, 0] ] print(unique_paths_with_obstacles(grid1)) # Output: 2 grid2 = [ [0, 1, 0], [1, 0, 0], [0, 0, 0] ] print(unique_paths_with_obstacles(grid2)) # Output: 0"},{"question":"You are given a task to help an airline optimize their baggage handling system by processing baggage tags. Each baggage tag contains a string of uppercase letters representing a unique baggage identifier. The airline wants to classify these baggage tags into groups based on the following criteria: 1. Two baggage tags belong to the same group if and only if they can be made identical by a series of rotations and one instance of reversing the entire string. A rotation of a string \\"ABCDE\\" would be any of the following: \\"ABCDE\\", \\"BCDEA\\", \\"CDEAB\\", \\"DEABC\\", \\"EABCD\\". Reversing the string means \\"ABCDE\\" becomes \\"EDCBA\\". Your task is to determine how many distinct groups of baggage tags there are, based on the above criteria. ------ Input ------ The first line contains a single integer N denoting the number of baggage tags. Each of the following N lines contains a single string T_i denoting a baggage tag. ------ Output ------ Print a single line containing one integer ― the number of distinct groups of baggage tags. ------ Constraints ------ 1 ≤ N ≤ 1000 1 ≤ |T_i| ≤ 100 T_i contains only uppercase English letters (\'A\' to \'Z\') ------ Sample Input ------ 5 ABC BCA CAB AB BA ------ Sample Output ------ 2 ------ Explanation ------ Example case: - \\"ABC\\", \\"BCA\\", and \\"CAB\\" can be rotated to match each other and thus belong to the same group. - \\"AB\\" and \\"BA\\" are identical when reversed, forming another group. Make sure your solution process groups efficiently, considering possible rotations and reversals to determine group membership.","solution":"def num_baggage_groups(n, tags): Determines the number of distinct groups of baggage tags based on the criteria. :param n: Number of baggage tags. :param tags: List of baggage tag strings. :return: Number of distinct groups of baggage tags. def normalize(tag): rotated_versions = [tag[i:] + tag[:i] for i in range(len(tag))] reversed_tag = tag[::-1] rotated_reversed_versions = [reversed_tag[i:] + reversed_tag[:i] for i in range(len(tag))] all_versions = rotated_versions + rotated_reversed_versions return min(all_versions) distinct_groups = set(normalize(tag) for tag in tags) return len(distinct_groups)"},{"question":"In a faraway land, there is a unique calendar system where every month has exactly 30 days. Each month is represented by a different string of lowercase English letters. You are given two dates in this calendar system, and your task is to calculate the number of days between the two dates. Each date is given in the form \\"Day-Month-Year\\", where: - Day is an integer from 1 to 30. - Month is a lowercase English string. - Year is an integer from 1 to 2000. Write a function that takes two dates as input and returns the number of days between them. Input Format: The first input line contains T, the number of test cases. Each of the next T lines contain two space-separated strings representing the two dates. Output Format: For each test case, print the number of days between the two dates. Constraints: 1 ≤ T ≤ 1000 The length of each month name is at most 10 characters. SAMPLE INPUT 2 1-january-1 30-january-1 1-january-1 1-february-1 SAMPLE OUTPUT 29 30","solution":"def days_between_dates(date1, date2): def date_to_days(date): day, month, year = date.split(\'-\') day = int(day) year = int(year) months_to_days = { \'january\': 0, \'february\': 30, \'march\': 60, \'april\': 90, \'may\': 120, \'june\': 150, \'july\': 180, \'august\': 210, \'september\': 240, \'october\': 270, \'november\': 300, \'december\': 330 } return day + months_to_days[month] + (year - 1) * 360 days1 = date_to_days(date1) days2 = date_to_days(date2) return abs(days1 - days2) def process_input(T, test_cases): results = [] for i in range(T): date1, date2 = test_cases[i].split() results.append(days_between_dates(date1, date2)) return results"},{"question":"You are given an array of n integers. You need to process multiple queries on this array. Each query asks you to find the sum of elements in a subarray, defined by two indices L and R. To make the task faster, implement a class `SubarraySum` that initializes the class with the given array and answers the queries efficiently. -----Input----- The first line contains an integer n (1 leq n leq 10^5) --- the number of elements in the array. The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^6). The third line contains an integer q (1 leq q leq 10^5) --- the number of queries. The next q lines contain two integers L and R (1 leq L leq R leq n) --- the indices defining the range of the subarray (inclusive). -----Output----- For each query, print a single integer --- the sum of the elements in the subarray from index L to R inclusive. -----Example----- Input 8 3 7 2 6 5 8 1 9 4 1 4 2 6 3 8 1 8 Output 18 28 31 41 -----Note----- In the first query, the sum of elements from index 1 to 4 is 3 + 7 + 2 + 6 = 18. In the second query, the sum of elements from index 2 to 6 is 7 + 2 + 6 + 5 + 8 = 28. In the third query, the sum of elements from index 3 to 8 is 2 + 6 + 5 + 8 + 1 + 9 = 31. In the fourth query, the sum of elements from index 1 to 8 is 3 + 7 + 2 + 6 + 5 + 8 + 1 + 9 = 41.","solution":"class SubarraySum: def __init__(self, array): Initializes the SubarraySum with the given array and prepares a prefix sum array for efficient querying. :param array: List[int] - the input array of integers self.array = array self.prefix_sum = [0] * (len(array) + 1) # Build the prefix sum array for i in range(1, len(array) + 1): self.prefix_sum[i] = self.prefix_sum[i - 1] + array[i - 1] def query_sum(self, L, R): Returns the sum of the elements in the subarray from index L to R inclusive. :param L: int - the starting index of the subarray (1-based) :param R: int - the ending index of the subarray (1-based) :return: int - the sum of the subarray return self.prefix_sum[R] - self.prefix_sum[L - 1]"},{"question":"A factory has decided to implement an automated quality control system for their product manufacturing line. Each product is assigned a unique identifier and needs to undergo three quality tests (testA, testB, and testC) before passing the quality control. The results of these tests are represented as three binary digits in a string format where: - \'1\' indicates the product passed the corresponding test. - \'0\' indicates the product failed the corresponding test. The factory requires that at least two out of the three tests must be passed for a product to be considered as having passed the overall quality control. Your task is to write a function that takes a list of product test result strings and returns the number of products that pass the quality control. Input Format: The input consists of an integer `N` denoting the number of products, followed by `N` strings, each of which represents the test results for a product. Output Format: Output a single integer representing the number of products that pass the quality control. Constraints: 1 ≤ N ≤ 10^5 Each string length is exactly 3 and consists only of \'0\' or \'1\'. SAMPLE INPUT: 5 110 101 000 111 011 SAMPLE OUTPUT: 4 Explanation: For products \'110\', \'101\', \'111\', and \'011\', at least two of the three tests have passed, so they pass the overall quality control. Product \'000\' fails as all tests are failed. Hence, the output is 4.","solution":"def count_passing_products(N, product_tests): Returns the number of products passing the overall quality control. Parameters: N (int): The number of products product_tests (list of str): The test results for each product Returns: int: The number of products that pass the quality control pass_count = 0 for test in product_tests: # Count the number of \'1\'s in the string if test.count(\'1\') >= 2: pass_count += 1 return pass_count"},{"question":"You are given a list of non-negative integers representing the amount of rainwater trapped between bars where the width of each bar is 1 unit. Write a function that calculates the total amount of rainwater trapped. Input: - An array of integers representing the elevation map where the width of each bar is 1. Output: - An integer representing the total units of water trapped. Example 1: Input: height = [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The above representation shows the elevation map. The total amount of water trapped is 6 units. Example 2: Input: height = [4,2,0,3,2,5] Output: 9 Explanation: The above representation shows the elevation map. The total amount of water trapped is 9 units. Note: - The length of the array will not exceed 100,000. - Each element in the array is a non-negative integer and is within the range of 0 to 100,000.","solution":"def trap(height): if not height: return 0 n = len(height) left, right = 0, n - 1 left_max, right_max = height[left], height[right] water_trapped = 0 while left < right: if left_max < right_max: left += 1 left_max = max(left_max, height[left]) water_trapped += max(0, left_max - height[left]) else: right -= 1 right_max = max(right_max, height[right]) water_trapped += max(0, right_max - height[right]) return water_trapped"},{"question":"Problem A city\'s road network can be represented as an undirected graph where intersections are nodes and roads are edges with weights representing the time taken to travel them. The city\'s traffic authority is interested in finding the shortest path from the central station (node 1) to all other intersections. Given the number of intersections `n` and a list of `m` roads, each defined by three integers `u`, `v`, and `t`, where `u` and `v` are intersections connected by a road and `t` is the travel time for that road, determine the shortest travel time from the central station to each intersection. If an intersection is unreachable from the central station, its shortest travel time should be `-1`. Constraints The input satisfies the following conditions. * 2 leq n leq 10^4 * 1 leq m leq 10^5 * 1 leq u, v leq n * 1 leq t leq 10^7 Input The input is given in the following format: n m u_1 v_1 t_1 u_2 v_2 t_2 ... An integer `n` representing the number of intersections, an integer `m` representing the number of roads, followed by `m` lines with three integers each representing the intersections connected by a road and the travel time on that road. Output Output `n-1` lines, each with an integer representing the shortest travel time from the central station to each intersection from `2` to `n`. If an intersection is unreachable, output `-1` for that intersection. Examples Input 4 4 1 2 4 1 3 2 2 3 5 3 4 1 Output 4 2 3 Input 3 2 1 2 3 2 3 1 Output 3 4 Input 5 3 1 2 2 1 3 3 4 5 1 Output 2 3 -1 -1","solution":"import heapq from collections import defaultdict def shortest_paths(n, m, roads): graph = defaultdict(list) for u, v, t in roads: graph[u].append((v, t)) graph[v].append((u, t)) def dijkstra(start, n): distances = {i: float(\'inf\') for i in range(1, n+1)} distances[start] = 0 pq = [(0, start)] while pq: current_distance, current_node = heapq.heappop(pq) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances result = dijkstra(1, n) output = [] for i in range(2, n+1): if result[i] != float(\'inf\'): output.append(result[i]) else: output.append(-1) return output"},{"question":"A school is organizing a field trip. There are M students and T teachers who need to travel together. The school can arrange buses from different operators, and each bus can seat exactly S people (including both students and teachers). Determine the minimum number of buses required to accommodate all students and teachers. ------ Input Format ------ - The first line of input will contain a single integer K, denoting the number of test cases. - Each of the following K lines contains three integers M, T, and S — the number of students, the number of teachers, and the seating capacity of each bus. ------ Output Format ------ For each test case, output the minimum number of buses required to accommodate all students and teachers. ------ Constraints ------ 1 ≤ K ≤ 1000 1 ≤ M, T ≤ 1000 1 ≤ S ≤ 1000 ----- Sample Input 1 ------ 4 40 5 50 35 6 10 100 20 30 50 2 18 ----- Sample Output 1 ------ 1 5 4 3 ----- Explanation 1 ------ Test Case 1: Total number of people is 40 + 5 = 45, which can be accommodated in 1 bus with 50 seats. Test Case 2: Total number of people is 35 + 6 = 41. Each bus can seat 10 people, so 5 buses are needed. Test Case 3: Total number of people is 100 + 20 = 120. Each bus can seat 30 people, so 4 buses are needed. Test Case 4: Total number of people is 50 + 2 = 52. Each bus can seat 18 people, so 3 buses are needed, as 3 buses can accommodate 54 people which is enough for 52 people.","solution":"import math def minimum_buses(k, test_cases): results = [] for i in range(k): M, T, S = test_cases[i] total_people = M + T buses_needed = math.ceil(total_people / S) results.append(buses_needed) return results"},{"question":"Implement a function ```unique_words_count(sentence)``` that takes a string sentence as input and returns the number of unique words in it. The words in the sentence are separated by spaces and can contain only alphabetic characters (both lowercase and uppercase). The words are case-insensitive, meaning \'Apple\' and \'apple\' should be considered the same word. Example: ``` unique_words_count(\\"Hello world\\") => 2 unique_words_count(\\"The quick brown fox jumps over the lazy dog\\") => 8 unique_words_count(\\"apple Apple aPPle\\") => 1 ```","solution":"def unique_words_count(sentence): Returns the number of unique words in the input sentence. The words are case-insensitive. words = sentence.lower().split() unique_words = set(words) return len(unique_words)"},{"question":"A small zoo has recently received three animals: a lion, a tiger, and a bear. The zookeeper is tasked with feeding these animals in a specific sequence over the course of several days. Each animal must be fed exactly once per day, and the sequence of feeding specifies the order in which the animals are fed each day. The zookeeper follows two rules: 1. No animal should be fed in the same position on two consecutive days. 2. The zoo got three different sequences of feeding pattern A, B, and C respectively. To simplify further assume these sequences will be repeated. Given an initial sequence of feeding for Day 1 (A, B, or C) and the number of days N, determine the sequence of animals fed each day up to day N. In case there is no valid sequence that satisfies the constraints, return \\"No valid sequence.\\" Input: The first line contains an integer T, denoting the number of test cases. Each of the following T lines contains an integer N (number of days) and a character P (initial sequence type). Sequences: - Sequence A: lion, tiger, bear - Sequence B: tiger, bear, lion - Sequence C: bear, lion, tiger It is guaranteed that sequences A, B, and C will always start with different animals respectively. Output: For each of the T test cases, output the corresponding daily feeding sequences (separated by commas) in a new line. If there\'s no valid sequence, output \\"No valid sequence.\\" Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 10000 P is one of these characters {\'A\', \'B\', \'C\'} SAMPLE INPUT 3 2 A 3 B 1 C SAMPLE OUTPUT lion, tiger, bear; tiger, bear, lion tiger, bear, lion; bear, lion, tiger; lion, tiger, bear bear, lion, tiger Explanation: Case 1: The initial sequence is A (lion, tiger, bear). For day 2, we choose one of the sequences B (tiger, bear, lion) or C (bear, lion, tiger) as both are valid. Hence, the output for 2 days is: \\"lion, tiger, bear\\" and \\"tiger, bear, lion\\" Case 2: The initial sequence is B (tiger, bear, lion). For day 2, we need to pick sequence C (bear, lion, tiger), and for day 3, we revert to sequence A (lion, tiger, bear). Therefore, the output is: \\"tiger, bear, lion\\", \\"bear, lion, tiger\\", and \\"lion, tiger, bear\\". Case 3: Since there is only one day to consider, regardless of the initial sequence chosen, it is valid. Thus, \\"bear, lion, tiger\\" is the output.","solution":"def feeding_sequences(t, test_cases): Determines the sequence of animals fed each day up to day N. Parameters: t (int): Number of test cases. test_cases (list of tuples): Each tuple contains N (number of days) and P (initial sequence type). Returns: list of str: The corresponding daily feeding sequences for each test case. sequences = { \'A\': [\'lion, tiger, bear\', \'tiger, bear, lion\', \'bear, lion, tiger\'], \'B\': [\'tiger, bear, lion\', \'bear, lion, tiger\', \'lion, tiger, bear\'], \'C\': [\'bear, lion, tiger\', \'lion, tiger, bear\', \'tiger, bear, lion\'] } results = [] for N, P in test_cases: initial_seq = sequences[P][0] result_str = initial_seq last_index = 0 for day in range(1, N): next_index = (last_index + 1) % 3 result_str += \'; \' + sequences[P][next_index] last_index = next_index results.append(result_str) return results"}]'),A={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},C={class:"search-container"},j={class:"card-container"},F={key:0,class:"empty-state"},Y=["disabled"],z={key:0},P={key:1};function M(s,e,u,p,r,a){const m=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",C,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>r.searchQuery=o),placeholder:"Search..."},null,512),[[y,r.searchQuery]]),r.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>r.searchQuery="")}," ✕ ")):l("",!0)]),t("div",j,[(n(!0),i(_,null,w(a.displayedPoems,(o,f)=>(n(),v(m,{key:f,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),i("div",F,' No results found for "'+h(r.searchQuery)+'". ',1)):l("",!0)]),a.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:r.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[r.isLoading?(n(),i("span",P,"Loading...")):(n(),i("span",z,"See more"))],8,Y)):l("",!0)])}const R=d(A,[["render",M],["__scopeId","data-v-d02b994e"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"deepseek/8.md","filePath":"deepseek/8.md"}'),D={name:"deepseek/8.md"},G=Object.assign(D,{setup(s){return(e,u)=>(n(),i("div",null,[x(R)]))}});export{B as __pageData,G as default};
