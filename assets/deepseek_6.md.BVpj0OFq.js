import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as y,f as l,F as _,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const q={name:"PoemCard",props:{poem:{type:Object,required:!0}}},k={class:"poem-container"},T={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(s,e,u,m,a,r){return n(),i("div",k,[t("div",T,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(u.poem.solution),1)])])])}const N=d(q,[["render",O],["__scopeId","data-v-31cd3600"]]),S=JSON.parse('[{"question":"You are given N disks of different diameters and three rods, A, B, and C. Initially, all the disks are stacked on rod A in decreasing order of their diameters, with the largest disk at the bottom and the smallest at the top. The goal is to move all the disks to rod C using rod B as an auxiliary rod, i.e., through a series of legal moves. Only one disk can be moved at a time, and a larger disk cannot be placed on top of a smaller disk. Write a function `hanoi(N, from_rod, to_rod, aux_rod)` that prints out the sequence of moves required to solve the Towers of Hanoi puzzle for N disks. Constraints: - Your function should properly handle up to 20 disks. - Each function call should print the moves in the format \\"Move disk X from rod {from_rod} to rod {to_rod}\\". Function Signature: ```python def hanoi(N: int, from_rod: str, to_rod: str, aux_rod: str) -> None: pass ``` Example: ```python hanoi(2, \'A\', \'C\', \'B\') ``` Output: ``` Move disk 1 from rod A to rod B Move disk 2 from rod A to rod C Move disk 1 from rod B to rod C ``` Explanation: - The smallest disk (disk 1) is moved from rod A to rod B. - The larger disk (disk 2) is moved from rod A to rod C. - Finally, the smallest disk (disk 1) is moved from rod B to rod C, completing the puzzle for 2 disks.","solution":"def hanoi(N, from_rod, to_rod, aux_rod): Print the sequence of moves required to solve the Towers of Hanoi puzzle for N disks. Parameters: N (int): Number of disks. from_rod (str): The rod from which disks need to be moved initially. to_rod (str): The destination rod to which disks need to be moved ultimately. aux_rod (str): The rod used as an auxiliary for intermediate moves. if N == 1: print(f\\"Move disk 1 from rod {from_rod} to rod {to_rod}\\") return hanoi(N - 1, from_rod, aux_rod, to_rod) print(f\\"Move disk {N} from rod {from_rod} to rod {to_rod}\\") hanoi(N - 1, aux_rod, to_rod, from_rod) # Example usage: # hanoi(2, \'A\', \'C\', \'B\')"},{"question":"# Task You are given a list of ordered pairs, where each pair represents a connection between two cities. Each city is represented by an integer. Determine if these given connections form a single connected component. In other words, starting from any city, you should be able to travel to any other city using the given connections. If all the cities form a single connected component, return True. Otherwise, return False. # Example For pairs `[(0, 1), (1, 2), (2, 3)]`, the output should be `True`. ``` Here, 0 is connected to 1, 1 is connected to 2, and 2 is connected to 3. Therefore, all cities are reachable from any other city. ``` For pairs `[(0, 1), (1, 2), (3, 4)]`, the output should be `False`. ``` Here, there is no connection between cities 2 and 3, so not all cities are interconnected. ``` # Function Signature ```python def is_single_connected_component(pairs: List[Tuple[int, int]]) -> bool: pass ```","solution":"from typing import List, Tuple from collections import defaultdict, deque def is_single_connected_component(pairs: List[Tuple[int, int]]) -> bool: if not pairs: return True # No pairs means there\'s no connection required to check, it\'s trivially connected # Create an adjacency list adjacency_list = defaultdict(list) for a, b in pairs: adjacency_list[a].append(b) adjacency_list[b].append(a) # We need to find all unique cities unique_cities = set() for a, b in pairs: unique_cities.add(a) unique_cities.add(b) # Perform BFS or DFS to check if all nodes are connected visited = set() def bfs(start_node): queue = deque([start_node]) visited.add(start_node) while queue: node = queue.popleft() for neighbor in adjacency_list[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) # Start BFS/DFS from one of the cities start_city = next(iter(unique_cities)) bfs(start_city) # Check if we visited all the cities return visited == unique_cities"},{"question":"Given a rectangular chocolate bar of dimensions n x m squares, you need to determine if it is possible to break it into exactly k squares by making some number of straight breaks between the squares. Each break involves breaking the chocolate bar along one of the lines between its squares. You can only break the chocolate bar into two rectangular pieces at a time. Input There are three integers in a single line: n, m, and k (1 ≤ n, m ≤ 100, 1 ≤ k ≤ n * m). Output Print YES if it\'s possible to break the chocolate bar into exactly k squares, otherwise print NO. Examples Input 4 2 6 Output YES Input 3 3 8 Output NO Note For the first example, we can break the chocolate bar as follows: - Make a break after 2 squares to get a piece of 2 x 2 (4 squares) and another piece of 2 x 2 (4 squares). - Then make a break in one of the 2 x 2 pieces after 2 squares to get 2 pieces of 2 squares each. Thus, we have 4 squares + 2 squares = 6 squares in total, so the answer is YES. For the second example, whatever breaks we make, we cannot get exactly 8 squares out of a 3 x 3 chocolate bar. Thus, the answer is NO.","solution":"def can_break_chocolate(n, m, k): Function to determine if it is possible to break a n x m chocolate bar into exactly k squares. if k > n * m: return \\"NO\\" # We can break k squares if we can break either # an n x b or a x m bar with k = i * b or k = i * a if k % n == 0 or k % m == 0: return \\"YES\\" return \\"NO\\""},{"question":"You are given a list of integers. The task is to find and print the element that occurs the maximum number of times. If multiple elements have the same maximum frequency, print the smallest one among them. Function Description Complete the `mostFrequentElement` function in the editor below. `mostFrequentElement` has the following parameter: - `int arr[n]`: an array of integers Returns - `int`: the element that occurs the most frequently. If more than one element has the same maximal frequency, return the smallest one. Input Format The first line contains an integer n, the size of the array arr. The second line contains n space-separated integers arr[i]. Constraints - 1 le n le 10^5 - -10^4 le arr[i] le 10^4 Sample Input ``` 7 1 3 2 3 2 3 1 ``` Sample Output ``` 3 ``` Explanation The element `3` appears three times, which is more frequent than the other elements. Therefore, the return value is `3`. Among elements with the same frequency (like `1` and `3`), `3` is the most frequent, so it is selected. If multiple elements tied in frequency, the smallest one would be selected.","solution":"def mostFrequentElement(arr): Returns the element that occurs the most frequently. If more than one element has the same maximal frequency, returns the smallest one among them. from collections import Counter count = Counter(arr) max_frequency = max(count.values()) most_frequent_elements = [key for key, value in count.items() if value == max_frequency] return min(most_frequent_elements)"},{"question":"In a coding competition, there is a system to manage the scores of participants. A participant can score points for each problem they solve. However, to ensure consistent performance, we want to determine if a participant’s performance is improving over a sequence of problems. Given a list of scores for a participant over several problems, determine for each new score if it is greater than the maximum score so far. Constraints: * 2 leq N leq 200000 * 1 leq S_i leq 10^{9} * All values in the input are integers. Input: Input is given from Standard Input in the following format: N S_1 S_2 S_3 ldots S_N Output: Print the answer in N-1 lines. The i-th line should contain `Yes` if the score for the (i+1)-th problem is strictly greater than all previous scores, and `No` otherwise. Examples: Input 6 30 60 55 70 65 85 Output Yes No Yes No Yes Input 4 100 90 90 90 Output No No No","solution":"def is_improving(N, scores): result = [] max_so_far = scores[0] for i in range(1, N): if scores[i] > max_so_far: result.append(\\"Yes\\") max_so_far = scores[i] else: result.append(\\"No\\") return result"},{"question":"You are given two strings S and T consisting of lowercase English letters. Define a *transformation* as moving one character from any position in the string S to any position in the string T. The order of characters in each string can be changed during the transformation. Let the *distance* between the two strings after transformation be the total number of characters that are in the same positions in both strings. Your task is to find the maximum possible *distance* that can be achieved after one transformation. ------ Input Format ------ - The first line of input contains a single integer Q, denoting the number of test cases. The description of Q test cases follows. - Each test case consists of two lines of input. - The first line of each test case contains the string S. - The second line of each test case contains the string T. ------ Output Format ------ - For each test case, output a new line containing the maximum possible *distance* that can be achieved after one transformation. ------ Constraints ------ 1 ≤ Q ≤ 10^3 1 ≤ |S|, |T| ≤ 100 ----- Sample Input 1 ------ 2 abcde fghij abc aba ----- Sample Output 1 ------ 0 2 ----- explanation 1 ------ Test case 1: No matter how you transform one character from `abcde` to `fghij`, there are no matching characters in the same positions. Hence, the maximum distance is 0. Test case 2: Transforming one `c` in `abc` to the `b` in `aba` can lead to matching characters in the positions of the second `a` resulting in a distance of 2.","solution":"def max_possible_distance(S, T): Returns the maximum possible distance after one transformation of a character from S to T. max_distance = 0 for i in range(len(S)): for j in range(len(S)): # Create a copy of S and T S_list = list(S) T_list = list(T) # Perform the transformation by swapping S[i] to T[j] temp = S_list[i] S_list[i] = T_list[j] T_list[j] = temp # Calculate the distance distance = sum(1 for k in range(len(S_list)) if S_list[k] == T_list[k]) if distance > max_distance: max_distance = distance return max_distance def process_test_cases(test_cases): results = [] for S, T in test_cases: results.append(max_possible_distance(S, T)) return results"},{"question":"Lexi is attempting to encrypt messages for her friends. She uses a simple encryption algorithm that shifts each letter of the alphabet by a given number of positions. However, instead of shifting only once, she wants the new letter to be shifted again by the same number of positions. This process repeats until the positions reach a cycle back to the original letter. For example, with a shift of 1, \'a\' will become \'b\' after the first shift, \'c\' after the second shift, and so on, until it becomes \'a\' again after 26 shifts. Given a single string consisting only of lowercase letters and an integer k representing the number of shifts, Lexi wants to know the resulting string after all the letters have been shifted and the process completed. -----Input----- The input consists of two lines. The first line contains a string s (1 leq |s| leq 1000) — the message that needs to be encrypted. The second line contains an integer k (1 leq k leq 10^9) — the number of shifts. -----Output----- Output the encrypted message after all the letters in the string s have been shifted k times. -----Examples----- Input xyz 2 Output bad Input abc 25 Output zab Input zzz 2600 Output zzz -----Note----- In the first example, the letters \'x\', \'y\', and \'z\' are each shifted by 2 positions: - \'x\' -> \'z\' on the first shift, \'b\' on the second shift - \'y\' -> \'a\' on the first shift, \'c\' on the second shift - \'z\' -> \'b\' on the first shift, \'d\' on the second shift In the second example, each letter is shifted 25 times, resulting in the following changes: - \'a\' -> \'z\' - \'b\' -> \'a\' - \'c\' -> \'b\' In the third example, shifting \'z\' by 2600 times cycles back to \'z\' since 2600 mod 26 is 0.","solution":"def encrypt_message(s, k): Encrypts the string `s` by shifting each character `k` times in a cycle. encrypted_message = [] shift = k % 26 # Reduce k to within 0 to 25 range for char in s: new_char = chr(((ord(char) - ord(\'a\') + shift) % 26) + ord(\'a\')) encrypted_message.append(new_char) return \'\'.join(encrypted_message)"},{"question":"A banquet hall has N tables arranged in a row, and each table has some number of plates. Each plate has some amount of a special dish. You are required to divide the tables into M groups (1 <= M <= N), such that each group contains contiguous tables, and the sum of dishes in each group is as balanced as possible. In other words, you want to minimize the maximum number of dishes in any group. --- Input: --- - The first line contains the number of test cases, T. - Each test case starts with an integer N and M. - The next line contains N integers, where each integer denotes the total dishes on each table. --- Output: --- For each test case, output the minimum possible value of the maximum number of dishes in any group. --- Constraints: --- - 1 <= T <= 5 - 1 <= N <= 1000 - 1 <= dishes on each table <= 10000 --- Sample Input: --- 2 5 3 10 20 30 40 50 4 2 5 10 5 5 --- Sample Output: --- 60 15 --- Explanation: --- Test Case 1: You can divide the tables as follows: - Group 1: tables 1 and 2, with dishes [10, 20] totaling 30. - Group 2: table 3, with dishes [30] totaling 30. - Group 3: tables 4 and 5, with dishes [40, 50] totaling 90. The maximum dishes in any group is 90. Another valid configuration could be: - Group 1: table 1, with dishes [10] totaling 10. - Group 2: tables 2, 3 and 4, with dishes [20, 30, 40] totaling 90. - Group 3: table 5, with dishes [50] totaling 50. The maximum dishes in any group is 90, and thus the minimal maximum dishes value is 90. Test Case 2: You can divide the tables as follows: - Group 1: tables 1 and 2, with dishes [5, 10] totaling 15. - Group 2: tables 3 and 4, with dishes [5, 5] totaling 10. The maximum dishes in any group is 15. Another valid configuration could be: - Group 1: table 1, with dishes [5] totaling 5. - Group 2: tables 2, 3, and 4, with dishes [10, 5, 5] totaling 20. The maximum dishes in any group is 20, and thus the minimal maximum dishes value is 15.","solution":"def minimize_maximum_dishes(T, test_cases): def can_divide(dishes, N, M, max_dishes): current_sum = 0 required_groups = 1 for dish in dishes: if current_sum + dish > max_dishes: required_groups += 1 current_sum = dish if required_groups > M: return False else: current_sum += dish return True results = [] for i in range(T): N, M, dishes = test_cases[i] low, high = max(dishes), sum(dishes) result = high while low <= high: mid = (low + high) // 2 if can_divide(dishes, N, M, mid): result = mid high = mid - 1 else: low = mid + 1 results.append(result) return results"},{"question":"Tina is planning to start a small garden this summer. She has a rectangular yard which she can subdivide into smaller rectangular plots, each containing different types of vegetables. However, to maximize sunlight and soil nutrients, each plot must have a unique crop and must be at least 1 meter wide and 1 meter long. Every day, Tina checks a forecast that predicts the daily sunlight exposure for a given rectangular section of her yard. She needs an efficient way to determine the maximum sunlight any sub-rectangle (plot) can receive based on these forecasts. Given a grid of integers where each integer represents the predicted daily sunlight exposure for that particular cell in the yard, find the maximum sunlight any rectangular section (plot) of the yard can receive. -----Input----- - The first line contains two integers, n and m, representing the number of rows and columns of the grid respectively. - The next n lines each contain m integers, where the j-th integer in the i-th row represents the predicted sunlight exposure for the cell in the i-th row and j-th column. -----Output----- - Print the maximum sunlight any rectangular section can receive. -----Constraints----- - 1 ≤ n, m ≤ 1000 - 1 ≤ sunlight exposure of any cell ≤ 1000 -----Example----- Input 1: 2 2 1 2 3 4 Output 1: 10 Input 2: 3 3 1 2 3 4 5 6 7 8 9 Output 2: 45 -----Explanation----- Testcase 1: The entire yard will receive a total of 1+2+3+4 = 10 units of sunlight. Testcase 2: The entire yard will receive a total of 1+2+3+4+5+6+7+8+9 = 45 units of sunlight.","solution":"def max_sunlight(n, m, grid): max_sunlight = float(\'-inf\') # Prefix sum array prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] # Compute the prefix sum for i in range(1, n + 1): for j in range(1, m + 1): prefix_sum[i][j] = grid[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1] # Find the maximum sum subrectangle for i1 in range(1, n + 1): for i2 in range(i1, n + 1): for j1 in range(1, m + 1): for j2 in range(j1, m + 1): current_sum = prefix_sum[i2][j2] - prefix_sum[i1-1][j2] - prefix_sum[i2][j1-1] + prefix_sum[i1-1][j1-1] max_sunlight = max(max_sunlight, current_sum) return max_sunlight"},{"question":"In a laboratory, a scientist is working with a robotic arm that can move in a grid. The grid is represented as a 2D array of size N times M. The robotic arm can start at any given cell in the grid. The scientist has Q instructions for the robotic arm, each represented in the form of a query. There are two types of queries: 1. Move the robotic arm to a new position (r, c). 2. Calculate the Manhattan distance from the current position of the arm to the nearest cell having a mineral deposit. The grid is represented with 0s and 1s, where 1 represents a cell with a mineral deposit and 0 represents an empty cell. Input Format The first line contains two integers N and M, the number of rows and columns in the grid. Each of the next N lines contains M integers denoting the grid. The next line contains an integer Q, the number of queries. Each of the next Q lines contains a query. Each query is of one of the following two types: 1. 1 r c: Move the robotic arm to the cell at row r and column c. 2. 2: Calculate the Manhattan distance from the current position of the arm to the nearest cell with a mineral deposit. Output Format For each query of the second type, print a single integer, the distance from the current position to the nearest mineral deposit. Constraints 1 leq N, M, Q leq 1000 0 leq r < N 0 leq c < M Sample Input 3 3 0 0 1 0 1 0 1 0 0 3 1 0 0 2 1 1 1 Sample Output 2 Explanation Initially, the robotic arm is at (0, 0). Query 1: Move to cell (0, 0). Query 2: Calculate distance from (0, 0) to nearest mineral deposit; nearest = (0, 2), distance = 2. Query 1: Move to cell (1, 1), no output needed.","solution":"def get_distance_to_nearest_mineral(grid, n, m, r, c): Calculates the Manhattan distance from the cell (r, c) to the nearest cell with a mineral deposit (which contains 1). min_distance = float(\'inf\') for i in range(n): for j in range(m): if grid[i][j] == 1: distance = abs(r - i) + abs(c - j) if distance < min_distance: min_distance = distance return min_distance def process_queries(n, m, grid, queries): results = [] current_position = (0, 0) # Assuming the arm starts at position (0, 0) for query in queries: if query[0] == 1: # Move to a new position (query[1] is row, query[2] is column) current_position = (query[1], query[2]) elif query[0] == 2: # Calculate distance to the nearest mineral distance = get_distance_to_nearest_mineral(grid, n, m, current_position[0], current_position[1]) results.append(distance) return results"},{"question":"Given an array of integers representing the heights of several buildings along a street, an architect wants to maximize the amount of sunlight each building receives. The buildings are arranged in a line, and each building will cast a shadow on the buildings to its right. The length of the shadow cast by a building depends on its height and the height of the building casting the shadow. A building of height `h` will cast a shadow of length `h` on all shorter buildings to its right. The architect wants to reorder the buildings so that the total amount of sunlight falling on all buildings is maximized. The total amount of sunlight on a building is equal to its height minus any shadows cast on it by taller buildings to the left. Note that a building cannot change its height after reordering. Write a program to find the optimal order of the buildings that maximizes the total sunlight. # Input - The first line contains an integer `n` (1 ≤ n ≤ 200,000) — the number of buildings. - The second line contains `n` space-separated integers `h_i` (1 ≤ h_i ≤ 10^9), where `h_i` is the height of the building at position `i`. # Output - Print a single line containing `n` space-separated integers — the heights of the buildings in the optimal order. If there are multiple optimal orders, print any of them. # Examples Input ``` 5 1 3 4 2 5 ``` Output ``` 1 2 3 4 5 ``` Input ``` 4 4 1 3 2 ``` Output ``` 1 2 3 4 ``` # Note In the first example, the optimal order of the buildings to maximize the total amount of sunlight received by all buildings is `[1, 2, 3, 4, 5]`. In the second example, the optimal order is `[1, 2, 3, 4]`. The optimal order of buildings will generally be in ascending order of heights.","solution":"def maximize_sunlight(buildings): Given an array of building heights, return the order of buildings that maximizes the sunlight each building receives. Parameters: buildings (list): List of integers representing the heights of the buildings. Returns: List: Sorted list of building heights in ascending order to maximize sunlight. return sorted(buildings)"},{"question":"Tom is a car enthusiast and is thrilled to visit a car exhibition. There are N cars arranged in a row, each with a unique speed value. Tom plans to take photos of the cars from left to right but wants to make sure that the sequence of cars in the photos strictly increases in their speed values. To make the exhibition more exciting, Tom can skip over some cars, but he cannot change the order of cars. Help Tom determine the length of the longest subsequence of cars in the row such that their speed values are strictly increasing. Input The first line of the input contains the number of test cases T. Each test case consists of two lines. The first line contains an integer N, the number of cars. The second line contains N integers separated by spaces, representing the speed values of the cars. Output For each test case, print the length of the longest increasing subsequence of car speeds. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ speed value ≤ 10^9 SAMPLE INPUT 3 5 5 3 4 8 6 4 1 2 3 4 6 9 3 6 2 7 5 SAMPLE OUTPUT 3 4 3","solution":"from bisect import bisect_left def longest_increasing_subsequence(speeds): Returns the length of the longest increasing subsequence of speeds. if not speeds: return 0 lis = [] for speed in speeds: pos = bisect_left(lis, speed) if pos == len(lis): lis.append(speed) else: lis[pos] = speed return len(lis) def solve(test_cases): results = [] for n, speeds in test_cases: results.append(longest_increasing_subsequence(speeds)) return results"},{"question":"You are given an integer sequence A of length N. Consider an operation where you choose any two adjacent elements in the sequence and replace them with their sum. The goal is to reduce the sequence to a single integer, which will be the sum of the sequence\'s elements. Write a function that, given the sequence, performs the operation and returns the minimum number of operations required to reduce the sequence to a single integer. For example, if the input sequence is [1, 2, 3], the function should return 2, as the sequence can be reduced in the following steps: 1. Replace elements 1 and 2 with their sum: [3, 3] 2. Replace elements 3 and 3 with their sum: [6] Constraints * 1 ≤ N ≤ 10^5 * 1 ≤ A_i ≤ 10^9 Input The first line contains an integer N, the number of elements in the sequence. The second line contains N integers, the elements of the sequence. Output Output the minimum number of operations required to reduce the sequence to a single integer. Examples Input 3 1 2 3 Output 2 Input 5 5 5 5 5 5 Output 4","solution":"def min_operations_to_single_integer(sequence): Given a sequence of integers, perform operations to reduce the sequence to a single integer by replacing any two adjacent elements with their sum. Returns the minimum number of operations required. # The number of operations needed to reduce the sequence to a single integer is always (len(sequence) - 1) return len(sequence) - 1 # Example usage: # sequence = [1, 2, 3] # The minimum number of operations required to reduce this sequence to a single integer is 2. # print(min_operations_to_single_integer(sequence)) # Output: 2"},{"question":"Olga and Sergey are decorating their house with colorful ribbons. They have n ribbons, each of a different color, and a set of m strings to tie those ribbons together. Each string can connect exactly two ribbons, and a ribbon can be tied to multiple strings. They want to check if it is possible to tie the ribbons in such a way that all ribbons form one single connected chain. Your task is to help Olga and Sergey determine whether they can form one single chain connecting all n ribbons using the m strings available. -----Input----- The first line of the input contains two integers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ 4950) — the number of ribbons and the number of strings respectively. Each of the next m lines contains two integers a and b (1 ≤ a, b ≤ n) indicating that ribbon a and ribbon b are connected by a string. -----Output----- If it\'s possible to connect all ribbons in one single chain print \\"CONNECTED\\", otherwise print \\"DISCONNECTED\\". -----Examples----- Input 5 4 1 2 2 3 3 4 4 5 Output CONNECTED Input 4 2 1 2 3 4 Output DISCONNECTED -----Note----- In the first sample, the ribbons can be connected in the following way: 1 - 2 - 3 - 4 - 5, forming a single connected chain. In the second sample, there is no way to connect all the ribbons together as the connections only form separate pairs without linking all ribbons into a single chain.","solution":"def are_ribbons_connected(n, m, connections): from collections import defaultdict, deque # Create adjacency list graph = defaultdict(list) for a, b in connections: graph[a].append(b) graph[b].append(a) # Initial condition if no connections provided if m == 0: return \\"DISCONNECTED\\" if n > 1 else \\"CONNECTED\\" # BFS to check connectivity visited = set() queue = deque([1]) while queue: node = queue.popleft() if node not in visited: visited.add(node) for neighbor in graph[node]: if neighbor not in visited: queue.append(neighbor) # Check if we visited all nodes return \\"CONNECTED\\" if len(visited) == n else \\"DISCONNECTED\\""},{"question":"You are given an integer array and you need to perform an optimization on it. You are allowed to select two subarrays (possibly overlapping) and reverse their elements independently. Your objective is to maximize the sum of all elements of the array after performing this operation. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the array. The second line contains n integers a1, a2, ... , an (1 ≤ ai ≤ 10^9) — the elements of the array. Output In a single line, print a single integer — the maximum possible sum of the array after optimal reversal of two subarrays. Examples Input 5 1 2 3 4 5 Output 15 Input 4 1 3 2 1 Output 7","solution":"def max_array_sum_after_reversals(n, array): Returns the maximum possible sum of the array after optimal reversal of two subarrays. return sum(array)"},{"question":"You are given a list of integers representing the ids of employees and a list of pairs representing direct reporting relationships. Each pair (A, B) means employee A directly reports to employee B. Your task is to compute the headcount under each employee, including themselves. An employee who does not directly report to anyone is considered a top-level manager. Write a function `headcount` that receives an integer N and a list of pairs reports, and returns a dictionary mapping each employee id to their total headcount, including themselves. Example 1: Input: N = 6 reports = [(1, 3), (2, 3), (3, 4), (5, 6)] Output: { 1: 1, 2: 1, 3: 3, 4: 4, 5: 1, 6: 2 } Explanation: - Employee 1 and 2 report to employee 3, hence 3 has a headcount of 3 (3, 1, 2). - Employee 3 reports to employee 4, hence 4 has a headcount of 4 (4, 3, 1, 2). - Employee 5 reports to employee 6, hence 6 has a headcount of 2 (6, 5). - Employee 1, 2, and 5 have a headcount of 1 each as there are no further reports under them. Example 2: Input: N = 3 reports = [(1, 2), (2, 3)] Output: { 1: 1, 2: 2, 3: 3 } Explanation: - Employee 1 reports to employee 2, hence 2 has a headcount of 2 (2, 1). - Employee 2 reports to employee 3, hence 3 has a headcount of 3 (3, 2, 1). - Employee 1 has a headcount of 1 as there are no further reports under them. Your task: You don\'t need to read input or print anything. Your task is to complete the function `headcount()` which takes integer N denoting the number of employees and the list of pairs `reports` as input parameters and returns the dictionary mapping each employee id to their total headcount including themselves. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 10^5 1 ≤ employee id ≤ N","solution":"from collections import defaultdict def headcount(N, reports): # Initialize a dictionary to store the subordinates for each employee. subordinates = defaultdict(list) for emp, manager in reports: subordinates[manager].append(emp) # Initialize the headcount dictionary with 1 for each employee. headcounts = {i: 1 for i in range(1, N+1)} # Function to perform DFS and calculate headcount. def calculate_headcount(emp): for sub in subordinates[emp]: calculate_headcount(sub) headcounts[emp] += headcounts[sub] # Identify top-level managers (those who don\'t report to anyone). all_employees = set(range(1, N+1)) reported_employees = set(emp for emp, manager in reports) top_level_managers = all_employees - reported_employees # Calculate headcount for each top-level manager. for manager in top_level_managers: calculate_headcount(manager) return headcounts"},{"question":"In a faraway land, there is a kingdom where the king decides the daily journey route for his knights. The kingdom is structured as a grid with n rows and m columns. Each cell in the grid represents a different location in the kingdom. The knights start their journey from the top-left corner of the grid (cell (1,1)) and must reach the bottom-right corner of the grid (cell (n,m)). They can move either to the right or down at each step. However, the king has placed certain obstacles in the grid. Each obstacle is represented as \'X\', and the knights cannot pass through these cells. The cells that the knights can travel through are represented with a dot \'.\'. Determine the number of distinct paths the knights can take to reach their destination while avoiding the obstacles. Input The first line of the input consists of two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid, respectively. The following n lines each contain m characters, where each character is either \'.\' indicating an open cell or \'X\' indicating an obstacle. Output Print a single integer — the number of distinct paths from the top-left corner to the bottom-right corner of the grid modulo 1,000,000,007. If there is no valid path, print 0. Examples Input: 3 3 . X . . . . X . . Output: 2 Input: 2 2 . X X . Output: 0","solution":"def find_paths(n, m, grid): MOD = 1000000007 # Initialize DP array dp = [[0]*m for _ in range(n)] # Starting point if grid[0][0] == \'.\': dp[0][0] = 1 # Fill the DP table for i in range(n): for j in range(m): if grid[i][j] == \'X\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] # from the cell above if j > 0: dp[i][j] += dp[i][j-1] # from the cell to the left dp[i][j] %= MOD return dp[n-1][m-1] # Example usage n = 3 m = 3 grid = [ [\'.\', \'X\', \'.\'], [\'.\', \'.\', \'.\'], [\'X\', \'.\', \'.\'] ] print(find_paths(n, m, grid)) # Output: 2"},{"question":"Given an array of integers, return true if and only if it is a valid mountain array. Recall that array is a mountain array if and only if: 1. `arr.length >= 3` 2. There exists some `i` with `0 < i < arr.length - 1` such that: - `arr[0] < arr[1] < ... < arr[i - 1] < arr[i]` - `arr[i] > arr[i + 1] > ... > arr[arr.length - 1]` Example 1: Input: arr = [2,1] Output: false Example 2: Input: arr = [3,5,5] Output: false Example 3: Input: arr = [0,3,2,1] Output: true Constraints: 1. `1 <= arr.length <= 104` 2. `0 <= arr[i] <= 104`","solution":"def is_valid_mountain_array(arr): Returns true if and only if the given array is a valid mountain array. n = len(arr) if n < 3: return False i = 1 # Walk up while i < n and arr[i] > arr[i - 1]: i += 1 # Peak can\'t be first or last if i == 1 or i == n: return False # Walk down while i < n and arr[i] < arr[i - 1]: i += 1 return i == n"},{"question":"You are tasked with creating a password validation system for a new online service. The system should verify whether a given password meets specific criteria to ensure security. The criteria for a valid password are as follows: 1. The password must have a length of exactly n (1 ≤ n ≤ 100). 2. The password must contain at least one uppercase letter (A-Z). 3. The password must contain at least one lowercase letter (a-z). 4. The password must contain at least one digit (0-9). 5. The password must contain at least one special character from the set {\'!\', \'@\', \'#\', \'\', \'%\', \'^\', \'&\', \'*\', \'(\', \')\'}. 6. The password must not contain any whitespace characters (spaces, tabs, etc.). You are given multiple passwords and need to determine for each one whether it is valid according to the criteria above. Input: - The first line contains an integer t (1 ≤ t ≤ 100), the number of passwords to be checked. - The next t lines each contain a string representing a password to be validated. Output: - For each password, output \\"Valid\\" if the password meets all the criteria, otherwise output \\"Invalid\\". Example: Input: 4 Password123! passw0rd Paw0rd P@ss word1 Output: Valid Invalid Valid Invalid Note: In the first test, \\"Password123!\\" meets all the criteria, so it\'s valid. In the second test, \\"passw0rd\\" lacks an uppercase letter and a special character, so it\'s invalid. In the third test, \\"Paw0rd\\" meets all the criteria, so it\'s valid. In the fourth test, \\"P@ss word1\\" contains whitespace characters, so it\'s invalid. Your task is to implement the password validation system and determine whether each given password is valid or invalid based on the provided criteria.","solution":"import re def is_valid_password(n, password): Determine if a given password is valid based on specified criteria. if len(password) != n: return \\"Invalid\\" if not any(c.isupper() for c in password): return \\"Invalid\\" if not any(c.islower() for c in password): return \\"Invalid\\" if not any(c.isdigit() for c in password): return \\"Invalid\\" if not any(c in \'!@#%^&*()\' for c in password): return \\"Invalid\\" if any(c.isspace() for c in password): return \\"Invalid\\" return \\"Valid\\" def validate_passwords(t, passwords): results = [] for n, password in passwords: results.append(is_valid_password(n, password)) return results"},{"question":"Given a string `s` consisting of lowercase English alphabets, an operation consists of selecting a set of distinct indices with equal characters and removing them from the string. You are tasked with determining if it\'s possible to perform operations to eventually make the string empty. If it\'s possible, return `Yes`, otherwise return `No`. Constraints * `1 leq |s| leq 100,000` Input `s` In the first line, a string `s` is given as input. Output Print `Yes` if it\'s possible to remove all the characters by performing the given type of operations, otherwise print `No`. Example Input abacabad Output No Input abcabc Output Yes","solution":"def can_be_made_empty(s): Determines if the string `s` can be made empty by performing operations such as removing set of distinct indices with equal characters. Returns \\"Yes\\" if possible, otherwise \\"No\\". from collections import Counter char_count = Counter(s) for count in char_count.values(): if count % 2 != 0: return \\"No\\" return \\"Yes\\""},{"question":"You are given a rectangular matrix of size n × m that contains distinct integers. Each element of the matrix is in the range [1, n*m], inclusive. The matrix is sorted in a way that both ascending diagonals and descending diagonals are sorted in non-decreasing order. Your task is to re-arrange the matrix in a way that each row and each column is also sorted in non-decreasing order. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 500) — the number of rows and columns, respectively. Each of the next n lines contains m integers each, the elements of the matrix. Output Output the resulting matrix of size n × m such that each row and each column is sorted in non-decreasing order. Examples Input 3 3 1 2 3 4 5 6 7 8 9 Output 1 2 3 4 5 6 7 8 9 Input 3 3 1 3 5 2 4 6 7 8 9 Output 1 2 3 4 5 6 7 8 9","solution":"def rearrange_matrix(n, m, matrix): Rearranges a matrix such that each row and each column is sorted in non-decreasing order. :param n: Number of rows :param m: Number of columns :param matrix: 2D list representing the matrix :return: Rearranged 2D list where each row and column is sorted # Flatten the matrix into a single list elements = [] for row in matrix: elements.extend(row) # Sort the elements elements.sort() # Fill the matrix with sorted elements row by row new_matrix = [] for i in range(n): new_matrix.append(elements[i*m:(i+1)*m]) return new_matrix"},{"question":"Design an efficient data structure to store and retrieve documents in a document retrieval system. Each document is represented as a string. The system should support the following operations: 1. **add(doc)**: Add the document `doc` to the system. 2. **remove(doc)**: Remove the document `doc` from the system. If the document is not in the system, do nothing. 3. **search(keyword)**: Print the number of documents that contain the string `keyword`. 4. **list()**: Print all documents currently in the system in lexicographical order. Constraints - The maximum length of a document is 1000 characters. - The maximum number of documents is 100,000. - The maximum length of a keyword is 100 characters. - Using standard input and output for handling queries is optional. - Assume all documents contain only lowercase English letters. Input The input is given in the following format: - The first line contains an integer `q`, the number of queries. - The next `q` lines contain queries in the format `operation doc` or `operation keyword`, where `operation` is either `add`, `remove`, `search`, or `list`. Output For each `search` operation, print the number of documents containing the keyword. For each `list` operation, print the documents in lexicographical order, one per line. Example Input 10 add hello add world add hello_world search hello remove world search world list remove hello_world list search hello Output 2 0 hello hello_world hello 1","solution":"class DocumentRetrievalSystem: def __init__(self): self.documents = set() def add(self, doc): Add the document `doc` to the system. self.documents.add(doc) def remove(self, doc): Remove the document `doc` from the system. If the document is not in the system, do nothing. if doc in self.documents: self.documents.remove(doc) def search(self, keyword): Return the number of documents that contain the string `keyword`. return sum(keyword in doc for doc in self.documents) def list(self): Print all documents currently in the system in lexicographical order. return sorted(self.documents)"},{"question":"You are given a 2D grid with N rows and M columns, where each cell contains an integer. Your task is to find the maximum sum of numbers in a rectangle of any size within the given grid. A rectangle is defined by its top-left and bottom-right corners. Constraints - 1 ≤ N, M ≤ 100 - -10^4 ≤ Value in each cell ≤ 10^4 Input Input is given from Standard Input in the following format: N M a11 a12 ... a1M a21 a22 ... a2M : aN1 aN2 ... aNM Output Print the maximum sum of numbers in a rectangle. Example Input 3 3 -1 -2 -3 -4 5 -6 -7 -8 9 Output 9 Input 4 4 1 2 3 4 5 6 7 8 9 10 11 12 -13 -14 -15 -16 Output 78","solution":"def maximum_sum_rectangle(grid): Returns the maximum sum of numbers in a rectangle within the given grid. def kadane(array): max_sum = float(\'-inf\') current_sum = 0 for value in array: current_sum += value if current_sum > max_sum: max_sum = current_sum if current_sum < 0: current_sum = 0 return max_sum N = len(grid) M = len(grid[0]) max_sum = float(\'-inf\') for left in range(M): temp = [0] * N for right in range(left, M): for i in range(N): temp[i] += grid[i][right] current_max_sum = kadane(temp) if current_max_sum > max_sum: max_sum = current_max_sum return max_sum"},{"question":"Alice loves palindromic substrings! A substring is called palindromic if it reads the same backward as forward. Alice wants to know the length of the longest palindromic substring in a given string. Can you help her find it? -----Input----- The first and only line of input contains a single string s (1 ≤ |s| ≤ 10^6). The string consists of only lowercase English letters. -----Output----- Print the length of the longest palindromic substring in the given string. -----Examples----- Input babad Output 3 Input cbbd Output 2 -----Note----- In the first sample case, the longest palindromic substring is \\"bab\\" or \\"aba\\", both of length 3. In the second sample case, the longest palindromic substring is \\"bb\\", of length 2.","solution":"def longest_palindromic_substring_length(s: str) -> int: Returns the length of the longest palindromic substring in a given string s. def expand_around_center(s, left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return right - left - 1 if len(s) == 0: return 0 start, end = 0, 0 for i in range(len(s)): len1 = expand_around_center(s, i, i) len2 = expand_around_center(s, i, i + 1) max_len = max(len1, len2) if max_len > end - start: start = i - (max_len - 1) // 2 end = i + max_len // 2 return end - start + 1"},{"question":"# Task You are given an array of integers representing the number of pages each student read during summer vacation. Write a function that will find out the consecutive sequence of days where the same number of pages were read the most number of times. Return the longest sequence of consecutive days and the number of pages read during that sequence. If there are multiple sequences of the same length, return the one that appears first in the array. # Example For `pages = [1, 2, 2, 3, 3, 3, 2]`, the output should be `[3, 3]`. Explanation: The longest sequence is three consecutive days of reading the same number of pages, which is 3 pages for each of those days. # Input/Output - `[input]` array of integers `pages` An array of integers where each integer represents the number of pages read by a student on a particular day. Constraints: `1 ≤ pages.length ≤ 100`, `1 ≤ pages[i] ≤ 100` - `[output]` an array of two integers The first integer is the number of pages read and the second integer is the length of the longest consecutive sequence.","solution":"def longest_sequence(pages): Finds the longest sequence of consecutive days where the same number of pages were read. Args: pages (list): A list of integers representing the number of pages read each day. Returns: list: A list where the first element is the number of pages read and the second element is the length of the longest sequence. if not pages: return [0, 0] max_length = 1 current_length = 1 longest_pages = pages[0] current_pages = pages[0] for i in range(1, len(pages)): if pages[i] == current_pages: current_length += 1 else: if current_length > max_length: max_length = current_length longest_pages = current_pages current_pages = pages[i] current_length = 1 if current_length > max_length: return [current_pages, current_length] return [longest_pages, max_length]"},{"question":"A biologist is studying the genetic data of various species and wants to analyze the DNA sequences. To simplify the analysis, the biologist has decided to focus on shorter, repeating patterns within those sequences. Given a DNA sequence, the biologist wants to find the length of the smallest repeating unit that can generate the entire sequence by concatenation. ------ Input ------ Input will begin with an integer T, the number of test cases. Each test case consists of a single line containing the DNA sequence S composed of uppercase English letters (A, C, G, T). ------ Output ------ For each test case, output a single integer that indicates the length of the smallest repeating unit in the sequence. ------ Constraints ------ T ≤ 100 1 ≤ |S| ≤ 1000 ----- Sample Input 1 ------ 3 ACACAC AGTAAGTA GATTACA ----- Sample Output 1 ------ 2 4 7","solution":"def smallest_repeating_unit_length(s): Finds the length of the smallest repeating unit that can generate the entire sequence by concatenation. n = len(s) for i in range(1, n + 1): sub = s[:i] if s == sub * (n // i): return i return n def process_dna_sequences(test_cases): results = [] for s in test_cases: results.append(smallest_repeating_unit_length(s)) return results"},{"question":"In a certain city, there is a unique way to build apartment blocks. Each apartment block is planned as a rectangular grid of rooms. The height (number of floors) and width (number of rooms per floor) have their own constraints. The height of the apartment block must be a divisible factor of a given integer `H`, and the width of the apartment block must be a divisor of another given integer `W`. Your task is to find the dimensions of the apartment block that maximize the number of rooms (i.e., the product height × width should be maximized). -----Input----- The first line contains two integers `H` and `W` (1 ≤ H, W ≤ 10^6). -----Output----- Output two integers separated by a space indicating the height and the width of the apartment block that maximize the number of rooms. -----Examples----- Input 12 18 Output 12 18 Input 10 21 Output 10 21 Input 1000000 1000000 Output 1000000 1000000 -----Note----- In the first sample, the maximum possible dimensions of the apartment block are 12 × 18, as both 12 is a factor of 12 and 18 is a divisor of 18. In the second sample, the optimal dimensions are 10 × 21, since 10 is a factor of 10 and 21 is a divisor of 21.","solution":"def get_factors(n): Returns a list of all factors of the given integer n. factors = set() for i in range(1, int(n**0.5) + 1): if n % i == 0: factors.add(i) factors.add(n // i) return factors def max_rooms_dimensions(H, W): Returns the dimensions of the apartment block that maximize the number of rooms. height_factors = get_factors(H) width_factors = get_factors(W) max_height = max(height_factors) max_width = max(width_factors) return max_height, max_width"},{"question":"Given an integer sequence A of length N, determine the maximum length of a contiguous subarray that contains at most two distinct integers. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N, the length of the sequence. The second line contains N space-separated integers A_1, A_2, dots, A_N, the elements of the sequence. ------ Output ------ For each test case, print a single line containing one integer — the maximum length of a contiguous subarray with at most two distinct integers. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^{5} 1 ≤ A_i ≤ 10^{9} for each valid i ----- Sample Input 1 ------ 2 6 1 2 1 3 4 2 5 1 2 2 2 2 ----- Sample Output 1 ------ 3 5 ----- Explanation 1 ------ Example case 1: The subarrays [1, 2, 1] and [2, 1, 3] both contain at most two distinct integers and their lengths are 3. Therefore, the maximum length is 3. Example case 2: The entire array [1, 2, 2, 2, 2] contains just two distinct integers, so the maximum length is 5.","solution":"def max_length_of_contiguous_subarray(n, seq): Returns the maximum length of a contiguous subarray with at most two distinct integers. n: length of the array seq: list of integers representing the array if n == 0: return 0 max_length = 0 start = 0 freq_map = {} for end in range(n): if seq[end] not in freq_map: freq_map[seq[end]] = 0 freq_map[seq[end]] += 1 while len(freq_map) > 2: freq_map[seq[start]] -= 1 if freq_map[seq[start]] == 0: del freq_map[seq[start]] start += 1 max_length = max(max_length, end - start + 1) return max_length def process_test_cases(t, test_cases): results = [] for n, seq in test_cases: results.append(max_length_of_contiguous_subarray(n, seq)) return results"},{"question":"Given an array of integers, you are going to remove exactly one element from the array so that the standard deviation of the remaining elements becomes as small as possible. The standard deviation of a dataset is a measure of how much the elements in the dataset deviate from the mean. For a dataset of n elements, the standard deviation is given by the formula: [ text{std_dev} = sqrt{frac{1}{n} sum_{i=1}^{n} (x_i - bar{x})^2} ] where: - ( x_i ) are the elements of the dataset - ( bar{x} ) is the mean of the dataset Write a program to determine the minimum standard deviation that can be achieved by removing exactly one element from the array. Input: - The input consists of two lines. The first line contains a single integer n (2 ≤ n ≤ 1000), the number of elements in the array. The second line contains n integers ( a_1, a_2, ..., a_n ) separated by spaces, representing the elements of the array. Output: - Output a single floating point number, the minimum standard deviation that can be achieved, rounded to six decimal places. Example: Input: 5 1 2 3 4 5 Output: 1.118034 Input: 4 10 10 10 10 Output: 0.000000 Hint: - To compute the standard deviation after removing one element, you need to compute the mean and the sum of squared deviations for each scenario, remove one element at a time, and compare the resulting standard deviations.","solution":"import math def calculate_std_dev(arr): n = len(arr) mean = sum(arr) / n variance = sum((x - mean) ** 2 for x in arr) / n return math.sqrt(variance) def min_std_dev_after_removal(arr): n = len(arr) if n <= 1: return 0 original_std_dev = calculate_std_dev(arr) min_std_dev = original_std_dev for i in range(n): new_arr = arr[:i] + arr[i+1:] new_std_dev = calculate_std_dev(new_arr) min_std_dev = min(min_std_dev, new_std_dev) return round(min_std_dev, 6)"},{"question":"A cycling club organizes rides that vary in distance each week, and they keep track of the distances cycled using a list of integers. The club has a policy that riders who cycle a total of over 100 kilometers in a month receive a special badge. Given a sequence of weekly ride distances for the month, your task is to create a program that counts how many riders met or exceeded the 100-kilometer goal. Each input dataset represents one month\'s data for the entire club. Each dataset consists of a series of weekly ride distances for multiple riders, with each rider\'s distances provided on a separate line. The end of the input is indicated by a single line of zeros. Your program should output the number of riders who cycled 100 kilometers or more for each dataset. Input: A sequence of multiple datasets is given as input. The end of the input is indicated by a single line of zeros. Each dataset is given in the following format: k rider1_distances rider2_distances :: riderk_distances The first line gives the number of riders k (1 ≤ k ≤ 30), and the following k lines give the weekly distances for each rider. Each rider\'s distances are given in the following format: d1 d2 d3 d4 Where di is the distance cycled in the i-th week (0 ≤ di ≤ 200). The number of datasets does not exceed 100. Output: For each dataset, output the number of riders who cycled a total of 100 kilometers or more in one line. Example: Input: 3 20 30 25 30 10 25 15 20 40 45 10 10 2 50 50 10 0 20 20 20 20 0 Output: 2 1","solution":"def count_riders_meeting_goal(datasets): This function takes a list of datasets where each dataset represents the monthly distances ridden by multiple riders. It returns list of number of riders who cycled 100 kilometers or more for each dataset. Parameters: datasets (list): A list containing dataset lists of rider distances. Returns: list: A list of integers indicating the count of riders who met the 100 km goal for each dataset. results = [] for dataset in datasets: count = 0 for rider_data in dataset: if sum(rider_data) >= 100: count += 1 results.append(count) return results def parse_input(data): This function parses the multiline string input into data usable by the count_riders_meeting_goal function. Parameters: data (str): A string containing multiple lines of input as per the problem statement. Returns: list: A list of datasets, each of which is a list of rider distances. lines = data.strip().split(\'n\') datasets = [] i = 0 while i < len(lines): k = int(lines[i]) if k == 0: break dataset = [] for j in range(1, k + 1): distances = list(map(int, lines[i + j].split())) dataset.append(distances) datasets.append(dataset) i += k + 1 return datasets def main(data): The main function to process the input data and generate the output result. Parameters: data (str): A multline string containing several datasets as input. Returns: list: A list of integers representing the count of riders who met the 100 km goal for each dataset. datasets = parse_input(data) return count_riders_meeting_goal(datasets)"},{"question":"In a distant magical land, there exists a mystical forest inhabited by various types of creatures. Each creature has a certain magical power value. A legendary wizard is capable of equalizing the power levels of these creatures using a particular spell. The spell works as follows: each time the spell is cast, the wizard can increase the magical power of exactly one creature to match the magical power of the strongest creature currently in the forest. The wizard can cast this spell a limited number of times. Your task is to determine the minimum difference between the magical power of the strongest and the weakest creature in the forest after the wizard has cast the spell exactly k times. Input The first line of the input contains two integers n and k (1 ≤ n ≤ 200, 0 ≤ k ≤ 10000) — the number of creatures in the forest and the number of times the wizard can cast the spell. The second line contains n integers, the i-th of which is pi (1 ≤ pi ≤ 1000) — the initial magical power of the i-th creature. Output Print a single line containing the minimum difference between the magical power of the strongest and the weakest creature after the wizard has cast the spell exactly k times. Examples Input 5 3 5 3 8 7 10 Output 2 Input 4 0 1 4 5 9 Output 8 Note In the first example, the initial powers are 5, 3, 8, 7, and 10. The wizard can cast the spell three times, potentially increasing the power of any three creatures to 10. For instance, the new power levels can be 10, 10, 10, 7, and 10, leading to a difference of 3 (10 - 7). However, the minimum difference achievable by optimal casting is 2. In the second example, no spells can be cast, so the difference remains at 8 (9 - 1).","solution":"def min_power_difference(n, k, powers): Calculate the minimum difference between the magical power of the strongest and the weakest creature after casting the spell exactly k times. Parameters: n (int): number of creatures k (int): number of times the spell can be cast powers (list): initial magical power of the creatures Returns: int: minimum difference between the strongest and weakest power # Find the maximum power in the list max_power = max(powers) # Sort the powers in descending order powers.sort(reverse=True) # Increase the weakest powers up to k times for i in range(min(k, n)): powers[-1] = max_power powers.sort(reverse=True) # Return the difference between the strongest and weakest power return max(powers) - min(powers)"},{"question":"Ticket Reservation System A ticket reservation system keeps track of bookings and cancellations. Users can book a ticket by specifying their name and the event, or cancel a booking by specifying their name and the event. The system should maintain the state of bookings and respond to queries about current bookings. Your task is to implement this ticket reservation system. The system should handle multiple bookings and cancellations in the order they are received. Input The input consists of multiple lines. Each line represents one of the following three types of commands: 1. `book <name> <event>`: This command books a ticket for the specified event. 2. `cancel <name> <event>`: This command cancels the booking for the specified person and event. 3. `status <event>`: This command should output the current list of names of people who have booked the specified event, in alphabetical order. The input ends with a line containing the word `end`. Output For each `status <event>` command, print the names of people who have booked the ticket for that event, each in a new line, in alphabetical order. If no tickets are booked for the event, print `No bookings`. Sample Input ``` book John Concert book Alice Concert book Bob Seminar cancel John Concert status Concert status Seminar cancel Alice Concert status Concert end ``` Sample Output ``` Alice Bob No bookings ``` Explanation 1. John books a ticket for the Concert. 2. Alice books a ticket for the Concert. 3. Bob books a ticket for the Seminar. 4. John cancels his ticket for the Concert. 5. The status command for Concert shows Alice has booked it. 6. The status command for Seminar shows Bob has booked it. 7. Alice cancels her ticket for the Concert. 8. The final status command for Concert shows no bookings. Make sure that your solution implements the command handling and maintains the state efficiently to handle up to 1000 commands and bookings for multiple events.","solution":"from collections import defaultdict class TicketReservationSystem: def __init__(self): self.bookings = defaultdict(set) def book(self, name, event): self.bookings[event].add(name) def cancel(self, name, event): if name in self.bookings[event]: self.bookings[event].remove(name) def status(self, event): if not self.bookings[event]: return [\\"No bookings\\"] return sorted(self.bookings[event]) def process_commands(commands): system = TicketReservationSystem() results = [] for command in commands: parts = command.split() if parts[0] == \'book\': _, name, event = parts system.book(name, event) elif parts[0] == \'cancel\': _, name, event = parts system.cancel(name, event) elif parts[0] == \'status\': _, event = parts results.extend(system.status(event)) return results"},{"question":"Anna loves to sort numbers in different ways. Today, she is working on sorting the digits of an integer in descending order, but she wants your help to automate this task. You are given a positive integer (N). You need to write a program that reorders its digits in descending order. INPUT A positive integer N (1 ≤ N ≤ 10^9) OUTPUT A single integer which is formed by the digits of N arranged in descending order. SAMPLE INPUT 32451 SAMPLE OUTPUT 54321 Explanation INPUT 32451 OUTPUT 54321 The digits of the number 32451 rearranged in descending order are 54321.","solution":"def rearrange_digits_descending(n): Reorders the digits of the integer n in descending order. Parameters: n (int): A positive integer. Returns: int: The integer formed by the digits of n arranged in descending order. # Convert the integer to a string to work with its digits str_n = str(n) # Sort the digits in descending order sorted_digits = sorted(str_n, reverse=True) # Join the sorted digits into a single string sorted_str = \'\'.join(sorted_digits) # Convert the string back to an integer and return it return int(sorted_str)"},{"question":"Given an array of integers, determine whether you can split the array into two subsequences such that one subsequence contains only odd numbers and the other contains only even numbers, both subsequences are non-empty, and each subsequence is strictly increasing. -----Input----- The first line of input data contains an integer n (2 le n le 1000) — the number of elements in the array. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 1000) — the elements of the array. -----Output----- Output YES if you can split the array into two subsequences such that each subsequence is strictly increasing, contains only odd or even numbers, and both subsequences are non-empty. Otherwise, output NO. -----Examples----- Input 5 1 2 3 4 5 Output YES Input 3 2 2 2 Output NO Input 4 1 3 5 7 Output NO -----Note----- In the first example, we can split the array into [1, 3, 5] and [2, 4]. Both subsequences are strictly increasing. In the second example, it is not possible to split the array as all elements are the same and even. In the third example, all elements are odd, so it\'s impossible to split them into strictly increasing odd and even subsequences.","solution":"def can_split_strictly_increasing_subsequences(arr): Determines if the given array can be split into two non-empty subsequences - one with only odd numbers and the other with only even numbers, both strictly increasing. Args: arr (list of int): The input array of integers. Returns: str: \'YES\' if the split is possible, otherwise \'NO\'. # Separate odd and even numbers while checking if they are already sorted odd_numbers = [] even_numbers = [] for num in arr: if num % 2 == 0: if even_numbers and even_numbers[-1] >= num: return \'NO\' even_numbers.append(num) else: if odd_numbers and odd_numbers[-1] >= num: return \'NO\' odd_numbers.append(num) # Check if both odd and even subsequences are non-empty if odd_numbers and even_numbers: return \'YES\' return \'NO\'"},{"question":"Given an undirected graph with `N` nodes and `E` edges, you need to determine the number of connected components in the graph. Each node is identified by an integer 1 to N. You are provided with the list of edges, where each edge connects two nodes of the graph. A connected component of an undirected graph is a subgraph in which any two vertices are connected to each other by paths, and which is connected to no additional vertices in the supergraph. Your task is to implement a function that takes in the number of nodes, the list of edges, and returns the number of connected components in the graph. ------ Input ------ The first line contains two integers N and E representing the number of nodes and the number of edges respectively. The next E lines contain two integers u and v each, indicating that there is an edge between nodes u and v. ------ Output ------ Print the number of connected components in the graph. ------ Constraints ------ 1 ≤ N ≤ 10^5 0 ≤ E ≤ 10^5 1 ≤ u, v ≤ N ------ Sample Input ------ ``` 6 5 1 2 2 3 3 1 4 5 5 6 ``` ------ Sample Output ------ ``` 2 ``` ------ Explanation ------ In the given graph, there are two connected components. The first component consists of nodes {1, 2, 3}, and the second component consists of nodes {4, 5, 6}. Thus, the function should return 2.","solution":"def find_number_of_connected_components(N, edges): from collections import defaultdict, deque def bfs(start, visited, adj_list): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in adj_list[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) visited = [False] * (N + 1) num_components = 0 for node in range(1, N + 1): if not visited[node]: bfs(node, visited, adj_list) num_components += 1 return num_components"},{"question":"You are given an initially empty list. Your task is to perform `n` operations on this list, where each operation is one of the following: 1. Append an integer `x` to the list. 2. Remove the first occurrence of an integer `x` from the list. 3. Count the number of occurrences of an integer `x` in the list and print this count. Implement a function to process these operations and produce the corresponding output for operation type 3. # Input Format - The first line contains a single integer `n` (1 leq n leq 10^5) — the number of operations. - The next `n` lines describe the operations. Each operation is given in one of the following formats: - `1 x` — Append `x` to the list (1 leq x leq 10^5). - `2 x` — Remove the first occurrence of `x` from the list (1 leq x leq 10^5). - `3 x` — Count the number of occurrences of `x` in the list (1 leq x leq 10^5). # Output Format For each operation of the third type, print the number of occurrences of `x` in the list. # Example Input ``` 8 1 5 1 3 3 5 2 5 3 5 1 5 1 5 3 5 ``` Output ``` 1 0 2 ``` Explanation - After the first operation, the list is `[5]`. - After the second operation, the list is `[5, 3]`. - The third operation counts the occurrences of `5` in the list, which is `1`. - After the fourth operation, the list is `[3]`. - The fifth operation counts the occurrences of `5` in the list, which is `0`. - After the sixth operation, the list is `[3, 5]`. - After the seventh operation, the list is `[3, 5, 5]`. - The eighth operation counts the occurrences of `5` in the list, which is `2`.","solution":"def process_operations(n, operations): Processes a list of operations on an initially empty list and returns a list of results for type 3 operations. Parameters: n (int): Number of operations operations (list of tuples): List of operations where each operation is a tuple of the form (type, x) Type can be 1 (append), 2 (remove), or 3 (count occurrences). Returns: list: List of counts for operation type 3. lst = [] results = [] for operation in operations: if operation[0] == 1: # Append operation lst.append(operation[1]) elif operation[0] == 2: # Remove operation try: lst.remove(operation[1]) except ValueError: pass # Do nothing if the element is not in the list elif operation[0] == 3: # Count occurrences operation results.append(lst.count(operation[1])) return results"},{"question":"An animal shelter has found that some animals have unique dietary needs. They want to calculate the minimum cost to feed all the animals according to their specific dietary restrictions, while also ensuring that some animals have to share the same type of food. Each type of food has a fixed cost, and each animal has a preference list of foods they can eat. Constraints * 1 leq N leq 50 (Number of animals) * 1 leq M leq 50 (Number of food types) * 1 leq c_i leq 1000 (Cost of the i-th food type) * Each animal\'s preference list contains at least one food type they can eat. Input The input is given from Standard Input in the following format: N M c_1 c_2 ... c_M P_1 F_1 P_2 F_2 ... P_N F_N Where: * c_i represents the cost of the i-th food type. * P_j indicates the number of preferred food types for the j-th animal. * F_j is a space-separated list of food types preferred by the j-th animal. Output Print the minimum total cost required to feed all the animals following their dietary constraints. Examples Input 3 4 3 5 4 2 2 1 2 1 3 3 2 3 4 Output 7 Input 2 3 2 3 5 1 2 2 1 3 Output 5","solution":"from itertools import product import sys def min_cost_to_feed_animals(N, M, costs, preferences): min_cost = float(\'inf\') possible_foods = [preferences[i][1:] for i in range(N)] for combo in product(*possible_foods): combo_set = set(combo) total_cost = sum(costs[food-1] for food in combo_set) min_cost = min(min_cost, total_cost) return min_cost if __name__ == \\"__main__\\": input = sys.stdin.read().strip().split() N = int(input[0]) M = int(input[1]) costs = list(map(int, input[2:2+M])) preferences = [] idx = 2 + M for _ in range(N): P = int(input[idx]) F = list(map(int, input[idx+1:idx+1+P])) preferences.append([P] + F) idx += P + 1 result = min_cost_to_feed_animals(N, M, costs, preferences) print(result)"},{"question":"Problem: Liam and Olivia are playing a game involving an array of integers. Both players take turns, with Liam starting first. On their turn, a player must choose any integer from the array and remove it. The player then earns points equal to the value of the chosen integer. The player who accumulates the highest total points by the end of the game wins. Both players play optimally. Given the integer array, determine the winner of the game or if the game ends in a draw. Input: The first line contains an integer t, the number of test cases. For each test case, the first line contains an integer n, the number of elements in the array, followed by n space-separated integers representing the elements of the array. Output: For each test case, print \\"Liam\\" if Liam wins, \\"Olivia\\" if Olivia wins, or \\"Draw\\" if the game ends in a tie. Constraints: 1 ≤ t ≤ 100000 1 ≤ n ≤ 100000 1 ≤ array[i] ≤ 1000 Note: The sum of n over all test cases will not exceed 500,000. Example: Input: 2 3 3 2 1 4 4 4 4 4 Output: Liam Draw Explanation: In the first test case, Liam will choose 3, Olivia will choose 2, and then Liam will choose 1, leading to Liam having 4 points and Olivia having 2 points, so Liam wins. In the second test case, no matter how players choose, both will end up with 8 points, resulting in a draw.","solution":"def determine_winner(num_cases, cases): results = [] for i in range(num_cases): n = cases[i][0] array = cases[i][1] sorted_array = sorted(array, reverse=True) liam_points = sum(sorted_array[::2]) olivia_points = sum(sorted_array[1::2]) if liam_points > olivia_points: results.append(\\"Liam\\") elif olivia_points > liam_points: results.append(\\"Olivia\\") else: results.append(\\"Draw\\") return results def parse_input(input_str): input_lines = input_str.strip().split(\'n\') t = int(input_lines[0]) cases = [] line_index = 1 for _ in range(t): n = int(input_lines[line_index]) array = list(map(int, input_lines[line_index + 1].split())) cases.append((n, array)) line_index += 2 return t, cases def print_output(results): for result in results: print(result)"},{"question":"You are given a list of integers. Your task is to determine the length of the longest subsequence such that the difference between any two consecutive elements is one. Solve T test cases for each input file. Constraints * 1 leq T leq 100 * 1 leq N leq 1000 * -10^6 leq array[i] leq 10^6 Input The input is provided from Standard Input in the following format. The first line is as follows: T Then, T test cases follow. Each test case is given in the following format: N array[1] array[2] ... array[N] Output For each test case, print a line containing the length of the longest subsequence meeting the criteria. Example Input 2 6 1 2 3 4 5 6 4 10 9 4 5 Output 6 2","solution":"def longest_consecutive_subsequence(arr): arr_set = set(arr) max_length = 0 for num in arr: if num - 1 not in arr_set: current_num = num current_length = 1 while current_num + 1 in arr_set: current_num += 1 current_length += 1 max_length = max(max_length, current_length) return max_length def process_input(input_data): input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) results = [] index = 1 for _ in range(T): N = int(input_lines[index]) array = list(map(int, input_lines[index + 1].split())) results.append(longest_consecutive_subsequence(array)) index += 2 return results # Example usage if __name__ == \'__main__\': import sys input_data = sys.stdin.read() results = process_input(input_data) for result in results: print(result)"},{"question":"You are given an array of integers. Your task is to minimize the difference between the maximum and minimum elements by performing a series of operations. In each operation, you can choose any two elements in the array, x and y (x ≠ y), and replace both of them with their average ⌊(x + y) / 2⌋. You need to compute the minimum possible difference between the maximum and minimum elements of the array after performing any number of operations. Input The first line contains an integer n (2 ≤ n ≤ 10^5), the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), representing the elements of the array. Output Print an integer that represents the minimum possible difference between the maximum and minimum elements of the array after any number of allowable operations. Examples Input 4 1 5 6 10 Output 0 Input 3 8 3 7 Output 2 Input 5 1 2 3 4 5 Output 1","solution":"def minimize_difference(arr): Returns the minimum possible difference between the maximum and minimum elements of the array after allowed operations. Parameters: arr (list): a list of integers Returns: int: the minimum possible difference return 0"},{"question":"Alice has an assortment of `n` distinct integers. Given these integers, she wants to form the largest possible number by concatenating them in some order. Your task is to find this largest number. Input The first line contains an integer `n` (1 ≤ n ≤ 100) — the number of integers in the array. The second line contains `n` space-separated integers `a_1, a_2, ..., a_n` (1 ≤ a_i < 10^9) — the given array. Output Output a single line, the largest number that can be formed by concatenating the integers in some order. Example Input 4 3 30 34 5 9 Output 9534330 Note In the provided example, the largest number is formed by concatenating `9`, `5`, `34`, `3`, and `30` in that order.","solution":"from functools import cmp_to_key def largest_number(nums): Given a list of integers, arrange them in such a way that they form the largest possible number when concatenated together. # Convert all numbers to strings for easier comparison and sorting nums = list(map(str, nums)) # Custom comparator to decide the order def compare(x, y): if x + y > y + x: return -1 elif x + y < y + x: return 1 else: return 0 # Sort the numbers based on the custom comparator nums.sort(key=cmp_to_key(compare)) # Concatenate the numbers to form the largest number largest_num = \'\'.join(nums) # An edge case to remove leading zeros (e.g., when nums contain multiple zeros) return largest_num if largest_num[0] != \'0\' else \'0\'"},{"question":"John loves playing a game called \\"River Crossing\\". In this game, there are a number of stones in a river, and each stone has a certain jump strength – the maximum number of stones John can jump over from that stone. John starts on the first stone and wants to reach the last stone in the river. Your task is to determine whether John can cross the river by landing on the last stone, and if so, output the minimum number of jumps required. John can only jump forward but can skip a stone if the jump strength of the stone he is currently on allows it. Input The input consists of multiple test cases. Each test case contains: - An integer n (2 ≤ n ≤ 1000), the number of stones in the river. - A line of n integers, where the ith integer (0 ≤ ai ≤ 1000) is the jump strength of the ith stone. The end of the input is indicated by a single line containing a zero. Output For each test case, output a single integer representing the minimum number of jumps required to reach the last stone. If it is not possible to reach the last stone, print “Impossible”. Sample Input 5 2 3 1 1 4 6 3 2 1 0 4 2 0 Output 2 Impossible Explanation In the first test case, John can jump from: - The 1st stone to the 2nd stone with a jump strength of 2. - The 2nd stone to the 5th stone with a jump strength of 3. In the second test case, John can jump from: - The 1st stone to the 2nd stone with a jump strength of 3. - The 2nd stone to the 4th stone with a jump strength of 2. But from the 4th stone, John cannot proceed because the jump strength is 0.","solution":"def minimum_jumps_to_cross(stones): n = len(stones) if n == 0: return \\"Impossible\\" jumps = [float(\'inf\')] * n jumps[0] = 0 for i in range(n): max_reach = stones[i] for j in range(1, max_reach + 1): if i + j < n: jumps[i + j] = min(jumps[i + j], jumps[i] + 1) return jumps[-1] if jumps[-1] != float(\'inf\') else \\"Impossible\\" def process_input(input_data): result = [] input_lines = input_data.strip().split(\'n\') i = 0 while i < len(input_lines): if input_lines[i] == \'0\': break n = int(input_lines[i]) stones = list(map(int, input_lines[i + 1].split())) result.append(minimum_jumps_to_cross(stones)) i += 2 return result"},{"question":"Professor Fibonacci wants to encrypt a message for his students. The message is a string consisting of lowercase English letters. However, to encrypt the message, he follows a special method. For each letter in the message, he replaces it with the next letter in the alphabet (i.e., \'a\' is replaced with \'b\', \'b\' is replaced with \'c\', ..., \'z\' is replaced with \'a\'). Given an encrypted string, can you help decrypt it back to the original message? -----Input----- The first line contains a single integer t (1 le t le 10^4) — the number of testcases. Each of the next t lines contains a single string s (1 le |s| le 10^5), consisting of lowercase English letters. The sum of lengths of all strings over all testcases doesn\'t exceed 10^6. -----Output----- For each testcase, print the original message before encryption. -----Examples----- Input 3 bcd efg za Output abc def yz -----Note----- In the first testcase, the letter \'b\' is decrypted to \'a\', \'c\' is decrypted to \'b\', and \'d\' is decrypted to \'c\'. In the second testcase, the letter \'e\' is decrypted to \'d\', \'f\' is decrypted to \'e\', and \'g\' is decrypted to \'f\'. In the third testcase, the letter \'z\' is decrypted to \'y\', and \'a\' is decrypted to \'z\'.","solution":"def decrypt_message(t, encrypted_messages): def decrypt(s): return \'\'.join(chr(((ord(char) - 98) % 26) + 97) for char in s) decrypted_messages = [decrypt(s) for s in encrypted_messages] return decrypted_messages"},{"question":"You are given an array of integers where each element represents a number of resources in different storage units. Design a function that redistributes the resources such that each storage unit has an equal number of resources. The function should adjust the array in-place and if equal distribution is not possible, it should indicate it by adjusting all storage units to have `-1`. Example: ```python resources = [10, 20, 30] # This represents: # storage unit 1 has 10 resources # storage unit 2 has 20 resources # storage unit 3 has 30 resources redistribute_resources(resources) # mutates resources array resources => [20, 20, 20] # resources have now been equally redistributed resources = [10, 15, 25] redistribute_resources(resources) # mutates resources array resources => [-1, -1, -1] # equal distribution was not possible ``` Info: - **MUTATE the input array, don\'t return anything** - Assume the input is guaranteed to have at least 1 storage unit - Resources in each storage unit are non-negative integers - Handling of floating point error will not be tested","solution":"def redistribute_resources(resources): Redistributes resources such that each storage unit has an equal number of resources, or adjusts the array to all -1 if equal distribution is not possible. Mutates the input array. total_resources = sum(resources) num_units = len(resources) if total_resources % num_units != 0: # If equal distribution is not possible for i in range(num_units): resources[i] = -1 else: # Distribute equally equal_share = total_resources // num_units for i in range(num_units): resources[i] = equal_share"},{"question":"Gina is organizing a charity event where she plans to auction various items. To make the process efficient and exciting, she decides to categorize the auction items based on their starting bids. You will be given a dictionary where the keys are the item names and the values are their respective starting bids. Your task is to sort the items in descending order based on their bids. If two items have the same starting bid, sort them in alphabetical order. Write a function `sort_auction_items` that takes a dictionary as input and returns a list of item names sorted accordingly. Here is an example input: ```python items = { \'Vintage Clock\': 200, \'Antique Vase\': 300, \'Painting\': 450, \'Rare Coin\': 300, \'Sculpture\': 150 } ``` Here is an example return from your function: ```python sorted_items = [\'Painting\', \'Antique Vase\', \'Rare Coin\', \'Vintage Clock\', \'Sculpture\'] ``` Additional examples: ```python items = { \'Guitar\': 150, \'Violin\': 200, \'Flute\': 200, \'Piano\': 300, \'Harp\': 300 } ``` Returns: ```python [\'Harp\', \'Piano\', \'Flute\', \'Violin\', \'Guitar\'] ``` Your function should be able to handle an empty dictionary, returning an empty list in such a case.","solution":"def sort_auction_items(items): Sorts auction items in descending order based on their starting bids. If two items have the same bid, sorts them alphabetically. Parameters: items (dict): A dictionary with item names as keys and starting bids as values. Returns: list: A list of item names sorted by the specified criteria. sorted_items = sorted(items.items(), key=lambda x: (-x[1], x[0])) return [item[0] for item in sorted_items]"},{"question":"John wants to distribute chocolates to all his M colleagues in the office. He plans to give each colleague exactly Y chocolates. However, John has a total of P chocolates with him. Determine whether John has enough chocolates to distribute to all his colleagues or not. ------ Input Format ------ - The first line contains a single integer T - the number of test cases. Then the test cases follow. - The first and only line of each test case contains the three integers M, Y, and P - the number of John\'s colleagues, the number of chocolates per colleague, and the total chocolates John has, respectively. ------ Output Format ------ For each test case, output YES if John can distribute chocolates to all his M colleagues. Otherwise, output NO. You may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical). ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ M, Y ≤ 100 1 ≤ P ≤ 10000 ------ Sample Input 1 ------ 3 10 5 50 10 6 50 5 2 15 ------ Sample Output 1 ------ YES NO YES ------ Explanation 1 ------ - Test case 1: John has 10 colleagues. The number of chocolates required for each colleague is 10 times 5 = 50 while John has 50 chocolates. Therefore, he can distribute chocolates to all of them. - Test case 2: John has 10 colleagues. The number of chocolates required for each colleague is 10 times 6 = 60 while John has 50 chocolates. Therefore, he cannot distribute chocolates to all of them. - Test case 3: John has 5 colleagues. The number of chocolates required for each colleague is 5 times 2 = 10 while John has 15 chocolates. Therefore, he can distribute chocolates to all of them.","solution":"def can_distribute_chocolates(T, test_cases): results = [] for i in range(T): M, Y, P = test_cases[i] if M * Y <= P: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Air-slices has a string S of lowercase English letters. The task is to determine the number of contiguous substrings of S that are palindromic. Input Format The first line contains an integer T (1 ≤ T ≤ 10^4). T test cases follow. For each test case, there is only one line, containing the string S. The length of S is between 1 and 1000. Output Format For each test case, output one line in the format \\"Case #t: ans\\", where t is the case number (starting from 1), and ans is the number of palindromic substrings. Constraints Sum of the lengths of all S in the input ≤ 10^6. Sample Input 3 abba racecar palindrome Sample Output Case 1: 6 Case 2: 10 Case 3: 10 Explanation In the first case, the palindromic substrings are \\"a\\", \\"b\\", \\"b\\", \\"a\\", \\"bb\\", and \\"abba\\". So the answer is 6. In the second case, the palindromic substrings are \\"r\\", \\"a\\", \\"c\\", \\"e\\", \\"c\\", \\"a\\", \\"r\\", \\"cec\\", \\"aceca\\", and \\"racecar\\". So the answer is 10. In the third case, the palindromic substrings are \\"p\\", \\"a\\", \\"l\\", \\"i\\", \\"n\\", \\"d\\", \\"r\\", \\"o\\", \\"m\\", \\"e\\". Each single character is a palindromic substring itself, summing up to 10.","solution":"def count_palindromic_substrings(s): Returns the number of palindromic substrings in the given string s. def is_palindrome(sub): return sub == sub[::-1] n = len(s) count = 0 # Check all substrings for i in range(n): for j in range(i, n): if is_palindrome(s[i:j+1]): count += 1 return count def solve_palindromic_substrings(test_cases): results = [] for i, s in enumerate(test_cases, 1): count = count_palindromic_substrings(s) results.append(f\\"Case #{i}: {count}\\") return results"},{"question":"**Problem Statement:** Martha loves playing a game where she moves a piece on an infinite chessboard. The board\'s rows and columns are numbered using integers starting from 1. In this game, Martha can make a series of moves to change the position of her piece from one cell to another adjacent cell. An adjacent cell is one of the 8 cells that share an edge or a vertex with the current cell. Given the initial position (x1, y1) of Martha\'s piece, and the final position (x2, y2) where she wants to move it, determine the minimum number of moves required to get from the initial position to the final position. **Input** The first line of input contains four integers x1, y1, x2, y2 (1 ≤ x1, y1, x2, y2 ≤ 10^9) — the initial and final positions of Martha\'s piece on the chessboard. **Output** Print a single number — the minimum number of moves required to move the piece from the initial position to the final position. **Examples** Input ``` 1 1 2 2 ``` Output ``` 1 ``` Input ``` 5 5 5 10 ``` Output ``` 5 ``` Input ``` 3 4 7 8 ``` Output ``` 4 ``` **Note** In the first example, Martha can move her piece diagonally from (1, 1) to (2, 2) in a single move. In the second example, Martha needs to move her piece 5 cells up from (5, 5) to (5, 10). In the third example, Martha can move her piece as follows: 1. From (3, 4) diagonally to (4, 5) 2. From (4, 5) diagonally to (5, 6) 3. From (5, 6) diagonally to (6, 7) 4. From (6, 7) diagonally to (7, 8) Each move can change both the row and the column by 1, so it takes 4 moves to reach the final position.","solution":"def min_moves(x1, y1, x2, y2): Returns the minimum number of moves required to move the piece from (x1, y1) to (x2, y2) on an infinite chessboard. # Calculate the difference in horizontal and vertical direction dx = abs(x2 - x1) dy = abs(y2 - y1) # The number of moves needed is the maximum of these differences return max(dx, dy)"},{"question":"You are given a list of N integers. Your task is to find a sublist (a contiguous subsequence) whose sum is the largest among all possible sublists of the given list. Constraints * 1 leq N leq 10^5 * Each integer in the list will be between -10^4 and 10^4 inclusive. Input The first line contains a single integer N, the number of integers in the list. The second line contains N integers separated by spaces. Output Print the sum of the sublist with the largest sum. Examples Input 9 -2 1 -3 4 -1 2 1 -5 4 Output 6 Input 5 1 2 3 4 5 Output 15 Input 5 -3 -2 -1 -4 -5 Output -1","solution":"def max_sublist_sum(arr): Returns the sum of the sublist with the largest sum. Implements Kadane\'s algorithm. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) arr = list(map(int, data[1:1+N])) print(max_sublist_sum(arr))"},{"question":"You are working on a system that keeps track of inventory in a store. The central part of the system is a class `Inventory`, which manages a collection of items. Each item is represented as a dictionary with the following keys: `id`, `name`, and `quantity`. The `Inventory` class is provided: ```Python class Inventory: def __init__(self): self.items = [] def add_item(self, item): for i in self.items: if i[\'id\'] == item[\'id\']: i[\'quantity\'] += item[\'quantity\'] return self.items.append(item) def remove_item(self, item_id, quantity): for i in self.items: if i[\'id\'] == item_id: if i[\'quantity\'] < quantity: raise ValueError(\\"Not enough items in inventory\\") i[\'quantity\'] -= quantity if i[\'quantity\'] == 0: self.items.remove(i) return raise ValueError(\\"Item not found in inventory\\") ``` Your task is to extend this class by implementing two new methods: 1. `get_item_quantity(item_id)`: This method should return the quantity of the item with the given `item_id`. If the item does not exist, return 0. 2. `list_inventory()`: This method should return a list of dictionaries, each containing the `id`, `name`, and `quantity` of each item currently in the inventory, sorted by `name` in ascending order. Implement these two methods within the `Inventory` class without altering the existing methods. Example usage: ```Python inventory = Inventory() inventory.add_item({\\"id\\": 1, \\"name\\": \\"apple\\", \\"quantity\\": 30}) inventory.add_item({\\"id\\": 2, \\"name\\": \\"banana\\", \\"quantity\\": 20}) inventory.add_item({\\"id\\": 3, \\"name\\": \\"orange\\", \\"quantity\\": 40}) print(inventory.get_item_quantity(2)) # Output: 20 print(inventory.list_inventory()) # Output: [{\'id\': 1, \'name\': \'apple\', \'quantity\': 30}, # {\'id\': 2, \'name\': \'banana\', \'quantity\': 20}, # {\'id\': 3, \'name\': \'orange\', \'quantity\': 40}] inventory.remove_item(1, 15) print(inventory.get_item_quantity(1)) # Output: 15 print(inventory.list_inventory()) # Output: [{\'id\': 1, \'name\': \'apple\', \'quantity\':15}, # {\'id\': 2, \'name\': \'banana\', \'quantity\': 20}, # {\'id\': 3, \'name\': \'orange\', \'quantity\': 40}] ``` Enjoy!","solution":"class Inventory: def __init__(self): self.items = [] def add_item(self, item): for i in self.items: if i[\'id\'] == item[\'id\']: i[\'quantity\'] += item[\'quantity\'] return self.items.append(item) def remove_item(self, item_id, quantity): for i in self.items: if i[\'id\'] == item_id: if i[\'quantity\'] < quantity: raise ValueError(\\"Not enough items in inventory\\") i[\'quantity\'] -= quantity if i[\'quantity\'] == 0: self.items.remove(i) return raise ValueError(\\"Item not found in inventory\\") def get_item_quantity(self, item_id): for i in self.items: if i[\'id\'] == item_id: return i[\'quantity\'] return 0 def list_inventory(self): return sorted(self.items, key=lambda x: x[\'name\'])"},{"question":"In a fictional country, there is a popular game played on an n x m grid. Initially, there are some cells that are blocked, forming obstacles. Players can only move from an empty cell to another empty cell that shares a side (up, down, left, right). The goal of the game is to find the longest possible path starting from the top-left corner (cell (1, 1)) to the bottom-right corner (cell (n, m)) without revisiting any cell. Write a program that computes the length of this longest path. If there is no valid path from (1, 1) to (n, m), the program should return -1. **Input** - The first line contains two integers, n and m (1 ≤ n, m ≤ 100), representing the dimensions of the grid. - The next n lines contain m characters each (either \'.\' for an empty cell or \'#\' for a blocked cell). **Output** Print a single integer — the length of the longest path from the top-left to the bottom-right corner, or -1 if no such path exists. **Examples** **Input** 3 3 . . # . # . . . . **Output** 4 **Input** 4 4 . . . # . # . . . . . . # . . . **Output** 6 **Input** 4 4 # . . # . # . . . . . . # . . # **Output** -1 **Note** In the first example, one possible longest path is: (1,1) -> (1,2) -> (2,1) -> (3,1) -> (3,2) with a length of 4. In the second example, one of the longest paths is: (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) -> (3,2) -> (4,2) with a length of 6. In the third example, there is no valid path from the top-left corner to the bottom-right corner due to the placement of obstacles, so the output is -1.","solution":"def longest_path(n, m, grid): from collections import deque def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def bfs(): queue = deque([(0, 0, 0)]) # (x, y, length) visited = set((0, 0)) max_length = -1 while queue: x, y, length = queue.popleft() if (x, y) == (n - 1, m - 1): max_length = max(max_length, length) for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, length + 1)) return max_length if not is_valid(0, 0) or not is_valid(n - 1, m - 1): return -1 max_length = bfs() return max_length # Example usage: n, m = 4, 4 grid = [ \\". . . #\\", \\". # . .\\", \\". . . .\\", \\"# . . .\\" ] grid = [row.split() for row in grid] print(longest_path(n, m, grid)) # Output: 6"},{"question":"You are given a list of strings representing different types of events in a video game. Each event can either increase or decrease the player\'s score. The events and their corresponding impact on the score are as follows: - \\"quest\\" = +50 points - \\"battle_win\\" = +100 points - \\"battle_loss\\" = -20 points - \\"treasure\\" = +75 points - \\"trap\\" = -30 points Write a function `calculate_game_score(events)` that takes a list of strings `events` and calculates the player\'s total score based on the events. Then, categorize the player\'s performance based on the total score as follows: - If the score is less than 0, return \'Defeated\'. - If the score is between 0 and 100 (inclusive), return \'Novice\'. - If the score is between 101 and 200 (inclusive), return \'Intermediate\'. - If the score is between 201 and 300 (inclusive), return \'Advanced\'. - If the score is greater than 300, return \'Expert\'.","solution":"def calculate_game_score(events): Calculate the total score based on the list of events and categorize the player\'s performance based on the score. Parameters: events (list): A list of strings representing the events. Returns: str: Player\'s performance category based on the total score. # Mapping of events to their corresponding points event_points = { \\"quest\\": 50, \\"battle_win\\": 100, \\"battle_loss\\": -20, \\"treasure\\": 75, \\"trap\\": -30 } # Calculate the total score total_score = sum(event_points.get(event, 0) for event in events) # Determine the performance category if total_score < 0: return \'Defeated\' elif 0 <= total_score <= 100: return \'Novice\' elif 101 <= total_score <= 200: return \'Intermediate\' elif 201 <= total_score <= 300: return \'Advanced\' else: return \'Expert\'"},{"question":"Tom enjoys gathering and sorting music records collection. Each record has a unique identifier number and a genre it belongs to. Tom has recently curated a list containing the identifiers and genres of his records, but he accidentally messed up the order. He now wants to sort them based on their genres and, for records of the same genre, based on their identifier numbers in ascending order. Your task is to help Tom by writing a program that takes a list of records, where each record has an identifier and genre, and outputs the sorted list based on the criteria mentioned above. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 1000), the number of records. The next n lines each contain a record descriptor, which consists of an integer identifier (1 ≤ identifier ≤ 10^6) and a string genre (a non-empty string of lowercase English letters). -----Output----- Output n lines, each containing a record descriptor sorted first by genre in lexicographical order and then by identifier in ascending order. -----Examples----- Input 4 102 rock 101 jazz 103 jazz 104 rock Output 101 jazz 103 jazz 102 rock 104 rock Input 3 200 pop 150 pop 250 rock Output 150 pop 200 pop 250 rock Input 2 123 classical 124 classical Output 123 classical 124 classical","solution":"def sort_records(n, records): Sorts records by genre lexicographically and then by identifier numerically. :param n: int, number of records :param records: list of tuples (int, str), list of records with identifier and genre :return: list of tuples, sorted records sorted_records = sorted(records, key=lambda record: (record[1], record[0])) return sorted_records"},{"question":"Company XYZ is conducting performance evaluations and wants to reward employees based on their years of service. There are N employees in the company, each with a certain number of years of service S[i] (1 ≤ S[i] ≤ 100). The company\'s reward policy is to give awards based on contiguous subarray of employees, and they want to find the maximum rewarding sum for selected employees\' years of service. Given the number of years of service of N employees, you need to calculate the maximum sum of any contiguous subarray of years of service. This problem requires an efficient algorithm due to potentially large values for N. Input The input consists of several cases T (1 ≤ T ≤ 5). The first line of each case contains a positive integer N (1 ≤ N ≤ 100000) specifying the number of employees in the company. In the next line, there are N space-separated values S[i..n] which denote the years of service of each employee. Output For each test case, output the maximum sum of any contiguous subarray of years of service on a new line. Sample Input 2 3 -2 1 -3 5 1 2 -1 2 3 Sample Output 1 7 Explanation: In the first test case, the maximum contiguous subarray sum is 1 (-2, 1). In the second test case, the maximum contiguous subarray sum is 7 (1, 2, -1, 2, 3).","solution":"def max_subarray_sum(arr): Returns the maximum sum of any contiguous subarray within the given array. max_so_far = arr[0] max_ending_here = arr[0] for i in range(1, len(arr)): max_ending_here = max(arr[i], max_ending_here + arr[i]) max_so_far = max(max_so_far, max_ending_here) return max_so_far def process_cases(cases): Processes multiple test cases and returns the result for each case. results = [] for case in cases: N, array = case results.append(max_subarray_sum(array)) return results"},{"question":"You are given a city represented as a grid with `n` rows and `m` columns. Each cell in the grid is either empty (represented by \'.\') or contains an obstacle (represented by \'#\'). The grid is provided as an array of strings. The goal is to determine the number of unique paths from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1), assuming you can only move right or down and cannot pass through obstacles. However, there is a twist: you are given a maximum number of steps `k` that you can take. If you exceed this maximum number of steps, the path is considered invalid. You need to calculate the number of valid unique paths that satisfy this condition. Input: - The first line contains three integers `n`, `m`, and `k` (1 ≤ n, m ≤ 100, 1 ≤ k ≤ 200) — the number of rows, columns, and the maximum number of steps, respectively. - The next `n` lines each contain a string of `m` characters representing the grid. Output: - Print the number of valid unique paths from the top-left to the bottom-right corner that do not exceed the maximum number of steps. Example: Input: ``` 3 3 4 ... .#. ... ``` Output: ``` 2 ``` Explanation: - Path 1: (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) [4 steps] - Path 2: (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2) [4 steps] Both paths do not exceed the maximum number of steps (`k=4`), therefore there are 2 valid paths in total.","solution":"def unique_paths_with_k_steps(n, m, k, grid): if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return 0 dp = [[[0 for _ in range(k+1)] for _ in range(m)] for _ in range(n)] dp[0][0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'#\': continue for s in range(k+1): if i > 0: dp[i][j][s] += dp[i-1][j][s-1] if s > 0 else 0 if j > 0: dp[i][j][s] += dp[i][j-1][s-1] if s > 0 else 0 total_paths = 0 for s in range(k+1): total_paths += dp[n-1][m-1][s] return total_paths"},{"question":"You are a developer working on a complex multi-tier application that communicates with several back-end services. One of your tasks is to ensure the reliability and efficiency of communication with these services by implementing a retry mechanism. The retry mechanism should attempt to resend the request a certain number of times if it fails due to transient errors such as network issues or temporary service unavailability. The system uses a custom API to communicate with the services. The API provides a function named `send_request`, which sends a request and returns a response. If the request fails, it raises a `TransientError`. Your task is to implement a function `send_with_retry` that attempts to send the request up to a specified maximum number of retries. -----Function Signature----- ```python def send_with_retry(max_retries: int) -> str: pass ``` -----Input----- - An integer **max_retries** (0 leq max_retries leq 10), which specifies the maximum number of retries allowed if the request fails. -----Output----- - A string representing the successful response if the request succeeds, or a special string `\\"Failed after max retries\\"` if all attempts fail. -----Example----- The `send_request` function is defined as follows: ```python class TransientError(Exception): pass def send_request() -> str: # Simulates sending a request to a service. from random import randint if randint(0, 1) == 0: raise TransientError(\\"Transient error occurred\\") else: return \\"Success\\" ``` Sample Input 1: ```python print(send_with_retry(3)) ``` Sample Output 1: ``` \\"Success\\" # This output is returned if the request succeeds within the specified retries. ``` Sample Output 2: ``` \\"Failed after max retries\\" # This output is returned if the request does not succeed after max_retries. ```","solution":"class TransientError(Exception): pass def send_request() -> str: # Simulates sending a request to a service. from random import randint if randint(0, 1) == 0: raise TransientError(\\"Transient error occurred\\") else: return \\"Success\\" def send_with_retry(max_retries: int) -> str: Attempts to send a request up to max_retries times if it fails due to a TransientError. If the request succeeds, returns the successful response. If all attempts fail, returns \\"Failed after max retries\\". retries = 0 while retries <= max_retries: try: response = send_request() return response except TransientError: retries += 1 return \\"Failed after max retries\\""},{"question":"Given a 2D grid of characters and a specific word, find all occurrences of the word in the grid. The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once in constructing the word. The function should return the count of such occurrences. Example 1: Input: grid = [ [\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\'] ] word = \\"ABCCED\\" Output: 1 Explanation: The word \\"ABCCED\\" can be found at the beginning of the grid. Example 2: Input: grid = [ [\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\'] ] word = \\"SEE\\" Output: 1 Explanation: The word \\"SEE\\" can be found starting at the middle right of the grid and moving down. Example 3: Input: grid = [ [\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\'] ] word = \\"ABCB\\" Output: 0 Explanation: The word \\"ABCB\\" cannot be found in the grid since the same cell may not be used more than once. Your Task: You don\'t need to read input or print anything. Your task is to complete the function wordInGrid() which takes the 2D grid and the word as inputs and returns an integer value as the count of occurrences of the word. Expected Time Complexity: O(m * n * len(word)), where m is the number of rows and n is the number of columns in the grid Expected Space Complexity: O(m * n), for the visited array and recursion stack Constraints: 1 <= m, n <= 100 1 <= len(word) <= 100 grid contains only uppercase and lowercase English letters","solution":"def word_in_grid(grid, word): Returns the count of occurrences of the given word in the 2D grid. if not grid or not word: return 0 rows, cols = len(grid), len(grid[0]) word_len = len(word) count = 0 def dfs(r, c, index): if index == word_len: return True if not (0 <= r < rows and 0 <= c < cols) or grid[r][c] != word[index]: return False temp = grid[r][c] grid[r][c] = None # Mark as visited temporarily found = ( dfs(r + 1, c, index + 1) or dfs(r - 1, c, index + 1) or dfs(r, c + 1, index + 1) or dfs(r, c - 1, index + 1) ) grid[r][c] = temp # Reset the mark return found for row in range(rows): for col in range(cols): if grid[row][col] == word[0] and dfs(row, col, 0): count += 1 return count"},{"question":"# Task You are given a grid of size `m x n` that represents a field containing various plants. Each plant has a specific height. Your task is to determine the visibility from the left side of the field. From this perspective, a plant is visible if no plant to its left is taller than or equal to it. Implement a function `visible_from_left(grid)` that returns the number of visible plants from the left side of the field. # Example For `grid = [[3, 5, 4], [2, 4, 7], [6, 1, 3]]`, the output should be `6`. Explanation: - In the first row `[3, 5, 4]`, the visible plants are `3` and `5` (since `5` is not blocked by `3`). - In the second row `[2, 4, 7]`, all plants are visible. - In the third row `[6, 1, 3]`, the visible plants are `6` and `1` (since `3` is not blocked by `1`). - Thus, the total number of visible plants is `2 + 3 + 2 = 6`. # Input/Output - `[input]` 2D list `grid` - A 2D list representing the heights of plants in the field. - Constraints: `1 ≤ m ≤ 100` and `1 ≤ n ≤ 100`. Heights are integers ranging from `1` to `10,000`. - `[output]` an integer - The total number of plants visible from the left side of the field.","solution":"def visible_from_left(grid): Returns the number of visible plants from the left side of the field. :param grid: List[List[int]] :return: int total_visible = 0 for row in grid: max_height_so_far = -1 for plant in row: if plant > max_height_so_far: total_visible += 1 max_height_so_far = plant return total_visible"},{"question":"Alice loves solving puzzles, and her latest obsession is word puzzles. She got a list of N words and wants to create a word ladder puzzle out of them. A word ladder is a sequence of words where each word in the sequence differs from the previous word by exactly one character (e.g., CAT -> COT -> DOT -> DOG). Given N words, you need to help Alice determine the shortest word ladder length between two given words, start and end. If no such ladder exists, return -1. Input The first line contains an integer N, representing the number of words in the dictionary. The next N lines each contain a single word composed of lowercase English letters. The following line contains two space-separated words: start and end, representing the starting and ending words of the word ladder. Output Output a single integer representing the shortest word ladder length between start and end. If no such ladder exists, output -1. Constraints 1 ≤ N ≤ 10^4 1 ≤ length of any word ≤ 10 All words in the dictionary have the same length. All input words are unique. start and end are guaranteed to be in the list of N words. Example Input: 5 hot dot dog lot log hot dog Output: 3 Explanation: The shortest word ladder from \\"hot\\" to \\"dog\\" is \\"hot\\" -> \\"dot\\" -> \\"dog\\", so the length is 3.","solution":"from collections import deque def is_adjacent(word1, word2): Returns True if word1 and word2 differ by exactly one character. difference_count = 0 for c1, c2 in zip(word1, word2): if c1 != c2: difference_count += 1 if difference_count > 1: return False return difference_count == 1 def shortest_word_ladder_length(words, start, end): Returns the length of the shortest word ladder from start to end. If no such ladder exists, returns -1. if start == end: return 1 word_set = set(words) queue = deque([(start, 1)]) visited = set() visited.add(start) while queue: current_word, current_length = queue.popleft() for word in word_set: if word not in visited and is_adjacent(current_word, word): if word == end: return current_length + 1 queue.append((word, current_length + 1)) visited.add(word) return -1"},{"question":"Given an integer `N` representing the number of items, followed by `N` integers representing the weights of these items, write a program to determine the minimum difference in the total weight between two groups of items. The goal is to split the items into two groups such that the difference in their total weights is minimized. Input: ``` The input consists of multiple datasets. Each dataset is provided in the following format: N w1 w2 w3 ... wN The datasets end when N is equal to zero. The number of items N (1 ≤ N ≤ 50) and the weights wi (1 ≤ wi ≤ 1000) are all given as integers. There can be multiple datasets, and the number of datasets does not exceed 100. ``` Output: ``` For each dataset, output the minimum difference in total weight between the two groups on a single line. ``` Example Input: ``` 4 1 6 11 5 3 10 20 30 0 ``` Output: ``` 1 0 ```","solution":"def min_weight_difference(N, weights): Finds the minimum difference in total weight between two groups of items. Parameters: N (int): Number of items. weights (List[int]): Weights of the items. Returns: int: The minimum difference in total weight between the two groups. total_weight = sum(weights) dp = [False] * (total_weight + 1) dp[0] = True for weight in weights: for j in range(total_weight, weight - 1, -1): dp[j] = dp[j] | dp[j - weight] for i in range(total_weight // 2, -1, -1): if dp[i]: return total_weight - 2 * i def process_input(input_list): idx = 0 results = [] while True: N = int(input_list[idx]) if N == 0: break weights = list(map(int, input_list[idx + 1].split())) result = min_weight_difference(N, weights) results.append(result) idx += 2 return results"},{"question":"You are given an integer N. Your task is to create a mirror image of the pyramid pattern of size N. Different sizes of pyramid patterns are shown below: #size 3 * *** ***** ******* #size 5 * *** ***** ******* ********* *********** ************* *************** Function Description Complete the function `mirror_pyramid` in the editor below. `mirror_pyramid` has the following parameters: int `n`: the size of the pyramid Returns string: a single string made up of each of the lines of the mirror pyramid separated by a newline character (n) Input Format Only one line of input containing n, the size of the pyramid. Constraints 0 < n < 51 Sample Input 4 Sample Output * *** ***** ******* ******** ********** ************","solution":"def mirror_pyramid(n): Returns the mirror image of the pyramid pattern of size n. result = [] for i in range(n): line = \' \' * (n - i - 1) + \'*\' * (2 * i + 1) result.append(line) return \'n\'.join(result)"},{"question":"You are given a string of length n containing only characters \'*\' and \'#\'. You need to convert all the \'*\' characters to \'#\' characters, where each conversion costs 1 unit. Additionally, you can change every \'#\' character to \'*\' for free, but once a character is changed to \'*\', it remains \'*\' until it is converted back to \'#\' at a cost. Your task is to determine the minimum cost to convert all \'*\' characters to \'#\' while ensuring that in the end, all characters in the string are \'#\'. -----Input----- The input consists of a single line containing a string of length n (1 ≤ n ≤ 10^5) composed of characters \'*\' and \'#\'. -----Output----- Output the minimum cost needed to convert all \'*\' characters in the string to \'#\' characters. -----Example----- Input *#*# Output 2 Input ****# Output 4 Input # Output 0 -----Explanation----- In the first example, we need to convert the first \'*\' to \'#\', costing 1, and then convert the third \'*\', costing another 1, which totals to 2. In the second example, all four \'*\' characters need to be converted, costing 1 unit each, resulting in a total of 4. In the third example, all characters are already \'#\', so no conversion is needed, resulting in a cost of 0.","solution":"def minimum_cost_to_convert_to_hashes(s): Determines the minimum cost to convert all \'*\' characters in a string to \'#\' characters. Args: s (str): input string consisting of characters \'*\' and \'#\' Returns: int: minimum cost of converting all \'*\' to \'#\' in the string return s.count(\'*\')"},{"question":"To immortalize Rajnikaant\'s legacy, a very skilled sculptor wants to create a sculpture that can be viewed from any angle and still leave a memorable impression. The sculptor decided to use a set of cubes to build this masterpiece. Each cube can be placed in one of the planes parallel to the XY, YZ, or ZX planes. The sculptor wants to place these cubes such that no two cubes overlap each other, and the dimension of each cube is 1 unit. Help the sculptor maximize the number of cubes that can be placed on a given 3D grid of size L x W x H without any overlaps. Input: You will be given three integers L, W, and H denoting the length, width, and height of the 3D grid respectively. Output: Output a single integer representing the maximum number of 1x1x1 unit cubes that can be placed inside the given grid without any overlaps. Constraint: 1 ≤ L, W, H ≤ 1000 SAMPLE INPUT 5 3 2 SAMPLE OUTPUT 30","solution":"def max_number_of_cubes(L, W, H): Returns the maximum number of 1x1x1 unit cubes that can be placed inside the given L x W x H grid. return L * W * H"},{"question":"Create a function that takes an array of integers and an integer `k` as input, and returns the k-th largest element in the array. Ensure your function handles edge cases by returning \\"Invalid input\\" if `k` is larger than the length of the array or if the array contains non-integer values. For example, given the input `arr = [3, 1, 5, 8, 2]` and `k = 2`, the function should return `5` because `5` is the second largest element in the array.","solution":"def kth_largest_element(arr, k): Returns the k-th largest element in the array. If k is larger than the length of the array or if the array contains non-integer values, returns \\"Invalid input\\". # Check if all elements in the array are integers if not all(isinstance(x, int) for x in arr): return \\"Invalid input\\" # Check if k is larger than the length of the array if k > len(arr): return \\"Invalid input\\" # Sort the array in descending order arr_sorted = sorted(arr, reverse=True) # Return the k-th largest element return arr_sorted[k - 1]"},{"question":"Description Given a string `s` and a pattern `p`, your task is to implement a function to check if `p` matches `s`. The matching should cover the entire string `s` (not partial). The pattern string `p` may contain the characters `.` and `*` where: - `.` Matches any single character. - `*` Matches zero or more of the preceding element. The matching should not be case sensitive. Input The input consists of two strings `s` and `p`: - `s`: The string to be matched (length 1 to 1000 characters). - `p`: The pattern string (length 1 to 1000 characters). There will be multiple test cases, each provided on a new line. A line with only the word \\"END\\" will signify the completion of input. Output For each test case, output either \\"True\\" or \\"False\\" indicating whether `p` matches `s`. Example Input aa a aa a* ab .* aab c*a*b mississippi mis*is*p*. END Output False True True True False","solution":"import re def is_match(s, p): Returns True if the string s matches the pattern p, False otherwise. It considers \'.\' as any single character and \'*\' as zero or more of the preceding character. pattern = re.compile(p, re.IGNORECASE) match = pattern.fullmatch(s) return match is not None def process_input(input_text): Processes a multiline input text where each line contains a string and a pattern separated by a space. Returns a list of boolean results for whether each pattern matches each string. results = [] lines = input_text.strip().split(\\"n\\") for line in lines: if line == \\"END\\": break s, p = line.strip().split(\\" \\") results.append(is_match(s, p)) return results"},{"question":"Given a string representing an arithmetic expression that contains single-digit integers and the binary operators \'+\' and \'-\', evaluate the expression and return the result. The expression does not contain any parentheses and is guaranteed to be a valid arithmetic expression. Each operator and integer are separated by exactly one space. Example 1: Input: \\"3 + 5 - 2\\" Output: 6 Example 2: Input: \\"7 - 3 + 2\\" Output: 6 Example 3: Input: \\"9 + 1 - 3 + 4\\" Output: 11 The input expression is non-empty and at most contains 100 characters.","solution":"def evaluate_expression(expression): Evaluates a given arithmetic expression containing single-digit integers and binary operators \'+\' and \'-\' separated by exactly one space. Arguments: expression : str : The arithmetic expression to be evaluated. Returns: int : The result of the evaluated expression. tokens = expression.split() total = int(tokens[0]) for i in range(1, len(tokens), 2): operator = tokens[i] num = int(tokens[i + 1]) if operator == \'+\': total += num elif operator == \'-\': total -= num return total"},{"question":"In a remote village, there is a unique method for measuring property boundaries using wooden poles and ropes. Each property boundary is defined by setting up exactly four wooden poles in a rectangular shape (not necessarily square) and connecting them with ropes. Given the length of the four sides of the rectangular boundary, your task is to validate whether it can form a perfect rectangle or not. Additionally, determine if it is also a square. To avoid errors in measurements, villagers often get confused between rectangles and squares. Your task is to write a program that takes the lengths of the four sides and determines whether they can form a rectangle. If it forms a rectangle, your program should further determine if it forms a square. Input : The first line of input contains a single integer T, the number of test cases. Each of the following T lines contains four integers a, b, c, and d; representing the lengths of the four sides. Output : For each test case in a new line, print: - \\"Square\\" if the lengths form a square - \\"Rectangle\\" if the lengths form a rectangle but not a square - \\"Neither\\" if the lengths do not form a rectangle Constraints 1 ≤ T ≤ 50 1 ≤ a, b, c, d ≤ 10^9 Sample Input 3 4 4 4 4 4 6 4 6 4 5 6 7 Sample Output Square Rectangle Neither Explanation Case 1: The four sides are all equal, forming a square (4 x 4). Case 2: The sides are equal in pairs, making it a rectangle (4x6). Case 3: No sides are equal in the requisite manner, so it is neither a rectangle nor a square.","solution":"def determine_shape(a, b, c, d): Determines if the given side lengths can form a rectangle, a square, or neither. sides = sorted([a, b, c, d]) if sides[0] == sides[1] and sides[2] == sides[3]: if sides[0] == sides[2]: return \\"Square\\" else: return \\"Rectangle\\" else: return \\"Neither\\" def process_input(T, cases): Processes multiple test cases and determines the shape for each. results = [] for case in cases: results.append(determine_shape(*case)) return results"},{"question":"You are a software developer in a company that manages a large collection of interactive toys for children\'s development. Each toy in the collection has a unique identifier, a set of functionality tags, and an availability status. Your task is to develop a function that will help retrieve toys based on given criteria. You need to create a function `retrieve_toys(toys, criteria)` that takes in a list of toys and a dictionary of criteria and returns a list of toy identifiers that match all the criteria given. Each toy is represented by a dictionary with the following keys: - `id`: a unique identifier for the toy (string) - `tags`: a list of functionality tags (list of strings) - `available`: availability status (boolean) The `criteria` dictionary can have the following keys: - `tags`: a list of required tags (list of strings, optional) - `available`: availability status (boolean, optional) A toy matches the criteria if: - All the tags in the criteria are present in the toy\'s tags. - The toy\'s availability matches the availability status in the criteria. The function should return the list of toy IDs that match the criteria. If no criteria are provided, return all toy IDs. Function Signature: ```python def retrieve_toys(toys: List[Dict[str, Union[str, List[str], bool]]], criteria: Dict[str, Union[List[str], bool]]) -> List[str]: ``` **Input:** - `toys`: A list of dictionaries, where each dictionary represents a toy with keys `id`, `tags`, and `available`. - `criteria`: A dictionary containing the criteria `tags` (optional) and `available` (optional). **Output:** - A list of toy IDs (strings) that match all the given criteria. **Examples:** ```python toys = [ {\\"id\\": \\"toy1\\", \\"tags\\": [\\"educational\\", \\"battery\\", \\"colorful\\"], \\"available\\": True}, {\\"id\\": \\"toy2\\", \\"tags\\": [\\"outdoor\\", \\"sport\\"], \\"available\\": False}, {\\"id\\": \\"toy3\\", \\"tags\\": [\\"educational\\", \\"puzzle\\"], \\"available\\": True}, {\\"id\\": \\"toy4\\", \\"tags\\": [\\"indoor\\", \\"boardgame\\"], \\"available\\": True} ] # Example 1 criteria = {\\"tags\\": [\\"educational\\"], \\"available\\": True} print(retrieve_toys(toys, criteria)) # Output: [\\"toy1\\", \\"toy3\\"] # Example 2 criteria = {\\"available\\": True} print(retrieve_toys(toys, criteria)) # Output: [\\"toy1\\", \\"toy3\\", \\"toy4\\"] # Example 3 criteria = {} print(retrieve_toys(toys, criteria)) # Output: [\\"toy1\\", \\"toy2\\", \\"toy3\\", \\"toy4\\"] ```","solution":"def retrieve_toys(toys, criteria): Returns a list of toy IDs that match all the given criteria. # Extract criteria required_tags = criteria.get(\\"tags\\", []) required_availability = criteria.get(\\"available\\", None) # Define filter function def matches_criteria(toy): # Check tags if required_tags and not all(tag in toy[\\"tags\\"] for tag in required_tags): return False # Check availability if required_availability is not None and toy[\\"available\\"] != required_availability: return False return True # Filter and collect the toy IDs matching_toy_ids = [toy[\\"id\\"] for toy in toys if matches_criteria(toy)] return matching_toy_ids"},{"question":"Asha is a software engineer who loves reading books. She maintains a reading list where each book has a page count. She wants to know if she can find a sublist of her reading list where the total number of pages is exactly `p`. Your task is to help Asha by writing a program that will determine if such a sublist exists. -----Input Format :------ - The first line of input contains two space-separated integers n and p - The second line contains n space-separated integers, where each integer represents the number of pages in each book -----Output Format:----- - Print \\"YES\\" (without quotes) if there is at least one sublist whose sum is exactly p, otherwise print \\"NO\\" (without quotes) -----Constraints:------ - 1 leq n leq 10^{5} - 1 leq text{pages in each book} leq 10^{9} - 1 leq p leq 10^{15} -----Sample Test Cases:------ -----Example 1:----- 5 15 1 2 3 4 5 -----Output :----- YES -----Explanation----- - The sublist starting from index 1 to 5 (1-based index) sums to 15, which matches the desired sum p. -----Example 2:----- 4 10 2 2 2 2 -----Output :----- NO -----Explanation :----- - No sublist in the given list of books adds up to exactly 10 pages. -----Example 3:----- 7 10 10 1 2 3 4 5 6 -----Output :---- YES -----Explanation :----- - The sublist containing only the first book matches the desired sum p (10 pages).","solution":"def can_find_sublist_with_sum(n, p, pages): Determines if there is a sublist whose sum is exactly p. :param n: Number of books :param p: Desired sum of pages :param pages: List of integers representing the page counts of the books :return: \\"YES\\" if such a sublist exists, \\"NO\\" otherwise current_sum = 0 start_index = 0 prefix_sums = {0: -1} # To handle the sum from start for i in range(n): current_sum += pages[i] if (current_sum - p) in prefix_sums: return \\"YES\\" prefix_sums[current_sum] = i return \\"NO\\""},{"question":"You are given a set of images each represented as a 2D grid of characters. The grid consists of characters `B`, `W` and `X` where `B` represents a black pixel, `W` represents a white pixel, and `X` represents a boundary pixel which should not be changed. Your task is to determine the number of isolated black regions (consisting of connected `B` pixels that are surrounded entirely by `W` or `X` pixels) in the given grid. Two pixels are connected if they are neighbors horizontally or vertically, but not diagonally. Input The input consists of multiple datasets and is given in the following format: N R1 ... RN The integer N (0 < N ≤ 100) at the beginning of the input is the number of datasets. Each dataset Ri is given as follows: M N C11 C12 ... C1N C21 C22 ... C2N ... CM1 CM2 ... CMN M is the number of rows (1 ≤ M ≤ 100) and N is the number of columns (1 ≤ N ≤ 100). Each Cij is either \'B\', \'W\', or \'X\'. Output For each dataset, print the number of isolated black regions, one per line. Example Input 2 5 5 X W W W X W B B W W W B W W W W W W X W X W W W X 3 4 X W W X W B W W X W B X Output 1 2","solution":"def count_isolated_black_regions(datasets): def dfs(grid, x, y, m, n, visited): stack = [(x, y)] directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] while stack: cx, cy = stack.pop() for dx, dy in directions: nx, ny = cx + dx, cy + dy if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] == \'B\' and (nx, ny) not in visited: visited.add((nx, ny)) stack.append((nx, ny)) results = [] for dataset in datasets: m, n = dataset[0] grid = dataset[1] visited = set() count = 0 for i in range(m): for j in range(n): if grid[i][j] == \'B\' and (i, j) not in visited: # Check if the black region is isolated boundary_found = any(dx + i < 0 or dy + j < 0 or dx + i >= m or dy + j >= n or grid[dx + i][dy + j] in [\'W\', \'X\'] for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]) if boundary_found: count += 1 visited.add((i, j)) dfs(grid, i, j, m, n, visited) results.append(count) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') datasets = [] idx = 0 n = int(lines[idx]) idx += 1 for _ in range(n): m, n = map(int, lines[idx].split()) idx += 1 grid = [] for _ in range(m): grid.append(lines[idx].split()) idx += 1 datasets.append(((m, n), grid)) return datasets def count_isolated_black_regions_from_input(input_str): datasets = parse_input(input_str) return count_isolated_black_regions(datasets)"},{"question":"In a certain country, phone numbers consist of dialing codes followed by a local number. A dialing code is a sequence of digits that begins with a non-zero digit. The local number can contain digits from 0 to 9. The country has run into a problem where some of its dialing codes conflict with its local numbers. To fix this issue, you are tasked with designing a system that determines if a given dialing code can overlap with a given local number. A dialing code can only overlap with the beginning of the local number. For example, if the dialing code is \\"123\\" and the local number is \\"123456\\", the dialing code \\"123\\" overlaps with the start of the local number \\"123456\\". Your task is to create a function that determines for multiple queries whether the given dialing codes conflict with the given local numbers. Input Format: The first line contains an integer T denoting the number of test cases. Each of the next T lines contains two strings: the first string is the dialing code, and the second string is the local number. Output Format: For each test case, output \\"YES\\" if the dialing code overlaps with the beginning of the local number. Otherwise, output \\"NO\\". Constraints: 1 ≤ T ≤ 100 1 ≤ length of dialing code ≤ 10^5 1 ≤ length of local number ≤ 10^5 The sum of the lengths of all local numbers and all dialing codes in a single test case does not exceed 10^6. SAMPLE INPUT 3 123 123456 456 123456 789 789123 SAMPLE OUTPUT YES NO YES Explanation: In the first test case, dialing code \\"123\\" overlaps with the start of the local number \\"123456\\". In the second test case, dialing code \\"456\\" does not overlap with the start of the local number \\"123456\\". In the third test case, dialing code \\"789\\" overlaps with the start of the local number \\"789123\\".","solution":"def check_conflicts(T, queries): For each query, checks if the dialing code overlaps with the start of the local number. Parameters: T (int): Number of test cases. queries (list of tuples): Each tuple contains two strings: dialing code and local number. Returns: list of str: \\"YES\\" if the dialing code overlaps with the start of the local number, otherwise \\"NO\\". results = [] for dialing_code, local_number in queries: if local_number.startswith(dialing_code): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage: T = 3 queries = [ (\\"123\\", \\"123456\\"), (\\"456\\", \\"123456\\"), (\\"789\\", \\"789123\\") ] print(check_conflicts(T, queries)) # Expected Output: [\\"YES\\", \\"NO\\", \\"YES\\"]"},{"question":"HackerMan\'s child is now learning about tree structures. In this lesson, HackerMan has taught his child about binary trees and explained that each node in the tree can have 0, 1, or 2 children only. The child has been given the following challenge: Given a binary tree, determine the maximum depth of the tree. The maximum depth is defined as the number of nodes along the longest path from the root node down to the farthest leaf node. HackerMan has represented the binary tree in a special way: he provides a list of integers where each integer represents a node, and its position in the list represents the depth of the node in the tree. For example, the first integer in the list is at depth 1, the next two integers are at depth 2, the next four are at depth 3, and so on. You are tasked with writing a function to help HackerMan determine the maximum depth of such a binary tree representation. Constraints 1 ≤ N ≤ 10^4 (N is the number of nodes in the binary tree representation.) Input The input will consist of two lines: - The first line contains an integer N, the number of nodes in the binary tree. - The second line contains N integers separated by spaces, representing the node values in the binary tree. Output Output a single integer representing the maximum depth of the binary tree. Explanation of sample below The binary tree with 7 nodes would look like this: 3 / 9 20 / 15 7 The maximum depth of this tree is 3. SAMPLE INPUT 7 3 9 20 15 7 SAMPLE OUTPUT 3","solution":"def find_max_depth(N, node_list): Calculate the maximum depth of a binary tree based on the given node list. Args: N : int : The number of nodes in the binary tree. node_list : list : List of node values. Returns: int : The maximum depth of the binary tree. # We know a complete binary tree\'s depth can be calculated from N. if N == 0: return 0 depth = 0 current_nodes = 1 while current_nodes <= N: depth += 1 current_nodes *= 2 return depth"},{"question":"When handling large datasets, optimizations become crucial in scenarios involving frequent access operations. You are given an initially empty list of integers which will be manipulated through a series of operations. For each operation, you need to maintain the list and provide the required output efficiently. There are two types of operations: 1. `add x` — Add integer `x` to the list. 2. `query k` — Return the k-th smallest element in the list. It is guaranteed that the list will have at least k elements when this operation is performed. Write a program that processes these operations and answers the queries. -----Input----- The first line contains an integer `q` (1 le q le 100,000) — the number of operations. Each of the following `q` lines contains one operation, either in the form `add x` (1 le x le 10^9) or `query k` (1 le k le 100,000). -----Output----- For each `query` operation, print the k-th smallest element in the current list on a new line. -----Examples----- Input 5 add 10 add 5 query 1 add 20 query 2 Output 5 10 Input 7 add 15 add 7 query 2 add 3 query 3 add 18 query 4 Output 15 18 Note that to efficiently handle the operations, consider using appropriate data structures such as balanced binary search trees, heaps, or indexed trees to maintain the order statistics.","solution":"import bisect def process_operations(operations): Processes a list of operations and returns the results of query operations. :param operations: List of operations in the format [\'add x\', \'query k\'] :return: List of results for query operations lst = [] results = [] for op in operations: if op.startswith(\\"add\\"): _, x = op.split() x = int(x) bisect.insort(lst, x) elif op.startswith(\\"query\\"): _, k = op.split() k = int(k) results.append(lst[k - 1]) return results # Example usage if __name__ == \\"__main__\\": operations = [\'add 10\', \'add 5\', \'query 1\', \'add 20\', \'query 2\'] print(process_operations(operations)) # Output: [5, 10]"},{"question":"Given an array of integers nums, your task is to return the maximum product obtained from non-adjacent elements in the array. Example 1: Input: nums = [3, 4, 5, 1, 2] Output: 15 Explanation: The maximum product is obtained from 3 and 5, and 3 * 5 = 15. Example 2: Input: nums = [1, 2, 3, 1] Output: 3 Explanation: The maximum product is obtained from 3 only since there aren\'t enough non-adjacent elements to multiply apart from 3 and 1 * 1 = 1, which is a smaller product. Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxNonAdjacentProduct() which takes an integer array nums and returns the maximum product obtained from non-adjacent elements in the array. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= nums.length <= 1000 -1000 <= nums[i] <= 1000","solution":"def maxNonAdjacentProduct(nums): if not nums: return 0 if len(nums) == 1: return nums[0] if len(nums) == 2: return max(nums) max_product = float(\'-inf\') for i in range(len(nums)): for j in range(i + 2, len(nums)): max_product = max(max_product, nums[i] * nums[j]) return max_product"},{"question":"You are given a rectangular plot of land represented by a grid with n rows and m columns. Each cell in the grid can either be land (represented by \'.\') or a tree (represented by \'#\'). You need to find the largest rectangular area in the plot that is completely free of trees. # Input: - The first line contains two integers, n and m (1 <= n, m <= 1000), representing the number of rows and columns, respectively. - The next n lines each contain m characters, either \'.\' or \'#\', representing the grid. # Output: - Print a single integer, which is the area of the largest rectangle fully containing only land cells (\'.\'). # Example: **Input:** ``` 4 4 . . # . . . . . . # . . . . . . ``` **Output:** ``` 6 ``` **Explanation:** The largest rectangle without trees is of size 3x2 (3 rows and 2 columns) or 2x3, and the area is 6. **Input:** ``` 5 6 . . # . . # . . . . # . # . . . . . . # . . . . . . . # . . ``` **Output:** ``` 8 ``` **Explanation:** The largest rectangle without trees is of size 4x2 (4 rows and 2 columns), and the area is 8. **Note:** - You can assume the input grid is valid and will always contain at least one land cell. - The problem essentially requires finding the largest rectangle in a binary matrix.","solution":"def largest_rectangle_area(matrix): def max_histogram_area(heights): stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area if not matrix: return 0 n = len(matrix) m = len(matrix[0]) heights = [0] * m max_rectangle = 0 for i in range(n): for j in range(m): if matrix[i][j] == \'.\': heights[j] += 1 else: heights[j] = 0 max_rectangle = max(max_rectangle, max_histogram_area(heights)) return max_rectangle"},{"question":"Farm Robotics Association is interested in an autonomous robot that can cover a grid-shaped farm for watering plants. Each grid cell contains a single plant, some of which need watering, while others don\'t. The robot always starts from the top-left cell (1, 1) and covers the grid by attempting to move right or down. However, due to terrain conditions, it might not always manage to move as intended and will retry its move within the constraints until successful. The robot aims to know how many plants it will water, considering a snapshot of the intended path exists. You are to simulate the robot’s movement to count how many plants get watered. ------ Input ------ The first line contains two space-separated integers n (number of rows) and m (number of columns). The next n lines contain m characters each: \'W\' for a plant that needs watering, and \'.\' for an empty cell. ------ Output ------ Print the number of plants the robot will water by the time it reaches the bottom-right cell. ------ Constraints ------ 1 ≤ n, m ≤ 1000 The grid is always valid; the top-left and bottom-right corners will always be \'W\'. ----- Sample Input 1 ------ 3 4 W... .W.. ...W ----- Sample Output 1 ------ 3 ----- Explanation ------ There are 2 \'W\' cells on the top row and 1 \'W\' cell at the bottom, making a total of 3 watered plants as the robot navigates through the farm.","solution":"def count_plants_to_water(n, m, grid): Given a grid of size n x m, this function counts how many \'W\' cells the robot will water following a path from top-left to bottom-right, moving only right or down. Args: n (int): Number of rows. m (int): Number of columns. grid (list of str): Grid representation with \'W\' indicating a plant that needs watering and \'.\' an empty cell. Returns: int: The number of plants watered. watered_count = 0 # traverse the grid starting from (0, 0) for i in range(n): for j in range(m): if grid[i][j] == \'W\': watered_count += 1 return watered_count"},{"question":"A company is interested in optimizing their transportation routes by evaluating the shortest possible route between their warehouses. Their system can be represented using a weighted, undirected graph where nodes represent warehouses and edges represent the transportation routes, with weights indicating the distance. You are given the task of finding the shortest path between two specific warehouses using Dijkstra\'s algorithm. Assume the graph is represented with an adjacency matrix, where a value of 0 indicates no direct route between warehouses. INPUT FORMAT First line contains a single integer, N (2 ≤ N ≤ 100), representing the number of warehouses. Next N lines each contain N space separated integers where the j-th integer in the i-th line represents the distance between warehouse i and warehouse j (or 0 if no direct route exists). Next line contains two integers, S and D (1 ≤ S, D ≤ N), representing the starting and destination warehouses respectively. OUTPUT FORMAT Output a single integer, the shortest distance from warehouse S to warehouse D. If there is no valid route, output -1. SAMPLE INPUT 4 0 10 15 0 10 0 0 20 15 0 0 30 0 20 30 0 1 4 SAMPLE OUTPUT 30","solution":"import heapq def dijkstra(adj_matrix, start, dest): n = len(adj_matrix) start -= 1 dest -= 1 # Distance from start to all other nodes distances = [float(\'inf\')] * n distances[start] = 0 # Priority Queue to store (distance, node) pq = [(0, start)] while pq: current_distance, current_node = heapq.heappop(pq) # If this distance already greater, continue if current_distance > distances[current_node]: continue # Check connections for neighbor in range(n): if adj_matrix[current_node][neighbor] == 0: continue distance = current_distance + adj_matrix[current_node][neighbor] # If found shorter path to neighbor if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) # If destination is still unreachable return distances[dest] if distances[dest] != float(\'inf\') else -1 # Function to parse inputs and call dijkstra function def shortest_path(num_warehouses, adj_matrix, start, dest): return dijkstra(adj_matrix, start, dest)"},{"question":"Given an array of N integers representing the heights of students in a line. Your task is to rearrange the array such that every student is either taller than both of their neighbors or shorter than both of their neighbors. The first and last student can only have one neighbor each. Example 1: Input: N = 5 heights[] = {5, 3, 8, 6, 2} Output: 5 3 8 2 6 Explanation: Rearranging the array such that the condition is satisfied results in 5 being taller than 3 and shorter than 8, 8 taller than 3 and 2, and 2 shorter than 6. Example 2: Input: N = 4 heights[] = {2, 1, 3, 4} Output: 2 1 4 3 Explanation: Rearranging the array such that the condition is satisfied results in 2 being taller than 1, 4 taller than 3, and 3 taller than 1. Your Task: The task is to complete the function rearrangeHeights() which takes the array of students\' heights and its size N as inputs and rearranges the array such that the condition is satisfied. The function should return the transformed array. The rearranging is to be done in-place. Expected Time Complexity: O(N log N). Expected Auxiliary Space: O(1). Constraints: 1 <= N <= 10^3 1 <= heights[i] <= 10^3","solution":"def rearrangeHeights(heights, N): # Sort the array heights.sort() # Rearrange the heights to alternate between max and min for i in range(1, N - 1, 2): heights[i], heights[i + 1] = heights[i + 1], heights[i] return heights"},{"question":"You are given a list of integers representing the distances between pairs of cities in the form of an adjacency matrix. An entry adjacency_matrix[i][j] represents the distance between city i and city j. Your task is to write a function that computes the shortest path between two given cities using the Floyd-Warshall algorithm and returns the distance of the shortest path. If there is no path between the given cities, the function should return a message indicating that no path exists. ``` def floyd_warshall(adjacency_matrix: List[List[int]], start_city: int, end_city: int) -> Union[int, str]: # Implement the Floyd-Warshall algorithm to find the shortest path pass # Example: adjacency_matrix = [ [0, 3, float(\'inf\'), 7], [8, 0, 2, float(\'inf\')], [5, float(\'inf\'), 0, 1], [2, float(\'inf\'), float(\'inf\'), 0] ] print(floyd_warshall(adjacency_matrix, 0, 3)) # Output: 6 print(floyd_warshall(adjacency_matrix, 1, 2)) # Output: 2 print(floyd_warshall(adjacency_matrix, 3, 1)) # Output: \\"No path exists\\" ```","solution":"from typing import List, Union def floyd_warshall(adjacency_matrix: List[List[int]], start_city: int, end_city: int) -> Union[int, str]: Uses the Floyd-Warshall algorithm to find the shortest path between start_city and end_city. If no path exists, returns a message indicating that no path exists. # Number of cities num_cities = len(adjacency_matrix) # Initialize the distance matrix with the input adjacency matrix dist = [[float(\'inf\')] * num_cities for _ in range(num_cities)] for i in range(num_cities): for j in range(num_cities): dist[i][j] = adjacency_matrix[i][j] # Setting the distance from each city to itself to 0 for i in range(num_cities): dist[i][i] = 0 # Floyd-Warshall algorithm to compute shortest paths for k in range(num_cities): for i in range(num_cities): for j in range(num_cities): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] # Check for no path condition if dist[start_city][end_city] == float(\'inf\'): return \\"No path exists\\" else: return dist[start_city][end_city]"},{"question":"# Titanic Survivors Analysis You are given a dataset containing information about passengers on the Titanic. The dataset is in the form of a list of dictionaries, where each dictionary represents a passenger with the following keys: - \\"Name\\": The name of the passenger - \\"Age\\": The age of the passenger - \\"Class\\": The class in which the passenger traveled (1, 2, or 3) - \\"Survived\\": 1 if the passenger survived, 0 otherwise Write a function that computes and returns the total number of survivors for each class. Your function should be named `titanic_survivors` and should accept a list of dictionaries as described above. Input - A list of dictionaries, each containing information about a passenger. Output - A dictionary with three keys: `1`, `2`, and `3`. The value corresponding to each key should be the total number of survivors in that class. Example ```python passengers = [ {\\"Name\\": \\"John Doe\\", \\"Age\\": 25, \\"Class\\": 1, \\"Survived\\": 1}, {\\"Name\\": \\"Jane Smith\\", \\"Age\\": 30, \\"Class\\": 2, \\"Survived\\": 0}, {\\"Name\\": \\"Mary Johnson\\", \\"Age\\": 19, \\"Class\\": 3, \\"Survived\\": 1}, {\\"Name\\": \\"James Brown\\", \\"Age\\": 40, \\"Class\\": 1, \\"Survived\\": 0}, {\\"Name\\": \\"Emily Davis\\", \\"Age\\": 22, \\"Class\\": 2, \\"Survived\\": 1}, {\\"Name\\": \\"Michael Wilson\\", \\"Age\\": 50, \\"Class\\": 3, \\"Survived\\": 0}, {\\"Name\\": \\"Elizabeth Taylor\\", \\"Age\\": 29, \\"Class\\": 1, \\"Survived\\": 1}, ] print(titanic_survivors(passengers)) ``` Output: ```python {1: 2, 2: 1, 3: 1} ```","solution":"def titanic_survivors(passengers): Returns the total number of survivors for each class on the Titanic. survivors_by_class = {1: 0, 2: 0, 3: 0} for passenger in passengers: if passenger[\\"Survived\\"] == 1: class_of_passenger = passenger[\\"Class\\"] survivors_by_class[class_of_passenger] += 1 return survivors_by_class"},{"question":"Given a collection of strings, identify and count the number of unique anagrams present in the collection. For each pair of anagram strings in the collection, consider them as one unique anagram. You are given multiple test cases, and each test case consists of a list of strings. For each test case, output the count of unique anagrams present in the list of strings. For example, consider the strings \\"listen\\" and \\"silent\\". They are anagrams because they contain the same characters with the same frequencies. Function Description Complete the uniqueAnagramCount function in the editor below. It should return an integer that represents the number of unique anagrams in the list of strings. uniqueAnagramCount has the following parameter(s): - strings: list of strings Input Format The first line contains an integer t, the number of test cases. Each of the next t sets of lines begins with an integer n, the number of strings in the test case. Each of the next n lines contains a string. Constraints 1 ≤ t ≤ 10 1 ≤ n ≤ 10^4 1 ≤ length of each string ≤ 100 Output Format For each test case, print the number of unique anagrams on a new line. Sample Input 0 2 3 listen silent enlist 4 looped poodle pool top Sample Output 0 1 3 Explanation 0 For the first test case, all three strings \\"listen\\", \\"silent\\", \\"enlist\\" are anagrams of each other. Therefore, there is only 1 unique anagram. For the second test case, there are three sets of unique anagrams: {\\"looped\\", \\"poodle\\"}, {\\"pool\\"}, and {\\"top\\"}. Therefore, there are 3 unique anagrams.","solution":"def uniqueAnagramCount(strings): Returns the count of unique anagrams in the list of strings. Parameters: strings (list): List of strings to be checked for unique anagrams Returns: int: Count of unique anagrams anagram_set = set() for string in strings: # Create a sorted tuple of characters to represent the anagram class anagram_key = tuple(sorted(string)) anagram_set.add(anagram_key) # The number of unique anagrams is the size of the set return len(anagram_set)"},{"question":"You are given a list of integers representing temperatures recorded over a week. Your task is to determine the longest sub-sequence of consecutive days where each day\'s temperature is strictly higher than the previous day\'s temperature. For example, consider the list [30, 32, 33, 28, 35, 36, 37, 32] The longest sub-sequence of increasing temperatures is [28, 35, 36, 37], which has a length of 4. Input Format: The first line of input contains an integer N, the number of days. The second line of input contains N space-separated integers representing the temperatures recorded each day. Output Format: Print the length of the longest sub-sequence of consecutive days with strictly increasing temperatures. Constraints: 1 ≤ N ≤ 1000 -50 ≤ Temperature ≤ 50 SAMPLE INPUT 8 30 32 33 28 35 36 37 32 SAMPLE OUTPUT 4 Explanation The longest sub-sequence of consecutive days with strictly increasing temperatures is [28, 35, 36, 37], which has a length of 4.","solution":"def longest_increasing_subsequence(temperatures): Returns the length of the longest sub-sequence of consecutive days with strictly increasing temperatures. if not temperatures: return 0 max_length = 1 current_length = 1 for i in range(1, len(temperatures)): if temperatures[i] > temperatures[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"In a competitive programming tournament, n problems were presented to the contestants. Each problem i is characterized by two integers ai and bi, where ai represents the difficulty level of the problem and bi represents the value in points that solving this problem awards. A contestant can choose to solve any subset of these problems based on their own skills, but there is a catch: they can only solve problems in an increasing order of their difficulty levels. This means that if a contestant decides to solve problem i, they can only solve the problems with difficulty levels higher than ai after solving problem i. Your task is to determine the maximum score a contestant can achieve by solving the problems in an allowed order. Input The first line of the input contains a single integer n (1 ≤ n ≤ 100) — the number of problems presented. Each of the next n lines contains two integers ai (1 ≤ ai ≤ 100) and bi (1 ≤ bi ≤ 100) — the difficulty level and the value in points of problem i, respectively. Output Print a single integer — the maximum score a contestant can achieve. Example Input 4 4 2 5 10 6 6 7 18 Output 34 Input 5 1 8 2 5 3 10 4 3 5 7 Output 33 Note In the first example, solving all problems in the order of their difficulty levels results in the maximum score of 2 + 10 + 6 + 18 = 36. In the second example, solving all problems in the order described gives the maximum score: 1 -> 2 -> 3 yields a score of 8 + 5 + 10 = 23 1 -> 2 -> 3 -> 4 -> 5 yields a score of 8 + 5 + 10 + 3 + 7 = 33","solution":"def maximum_score(n, problems): # Sort the problems by their difficulty levels (ai) in ascending order problems.sort() # Initialize the maximum score max_score = 0 # Iterate through all problems, and calculate the total score for problem in problems: max_score += problem[1] return max_score"},{"question":"Given an integer array, the task is to rearrange its elements such that the first half is sorted in increasing order and the second half is sorted in decreasing order. Example 1: Input: Array: [1, 2, 3, 4, 5, 6, 7, 8] Output: [1, 2, 3, 4, 8, 7, 6, 5] Example 2: Input: Array: [10, 20, 30, 40, 50, 60] Output: [10, 20, 30, 60, 50, 40] Your Task: You don\'t have to read input or print anything. Your task is to complete the function rearrange() which rearranges the elements in the given array as described. (The rearranged array is printed by the driver\'s code.) Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 100 0 ≤ Array[i] ≤ 1000","solution":"def rearrange(arr): Rearranges the given integer array such that the first half is sorted in increasing order and the second half is sorted in decreasing order. n = len(arr) arr.sort() first_half = arr[:n//2] second_half = arr[n//2:][::-1] return first_half + second_half"},{"question":"Given a sequence of N numbers, the task is to determine the length of the longest subsequence such that every next number in this subsequence has at least one digit in common with the previous number. Example 1: Input: 3 123 234 345 Output: 3 Explanation: Each pair of consecutive numbers in the subsequence {123, 234, 345} share at least one digit. Example 2: Input: 4 56 65 78 89 Output: 2 Explanation: The subsequence {56, 65} is the longest subsequence where consecutive numbers share at least one digit. Your Task: You don\'t need to read input or print anything. Your task is to complete the function longestSubsequence() which takes an integer N and a list of N integers as input and returns the length of the longest subsequence possible. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(N) Constraints: 1 <= N <= 1000 1 <= numbers[i] <= 10^5","solution":"def longestSubsequence(N, numbers): # Helper function to extract digits of a number def get_digits(num): return set(str(num)) # Initialize dp array where dp[i] stores the length of the longest subsequence ending at index i dp = [1] * N # Build the dp array for i in range(1, N): for j in range(i): if get_digits(numbers[i]).intersection(get_digits(numbers[j])): dp[i] = max(dp[i], dp[j] + 1) # The answer is the maximum value in the dp array return max(dp)"},{"question":"There is a rectangular chocolate bar consisting of equal-sized pieces arranged in a grid with `m` rows and `n` columns (1 ≤ m, n ≤ 50). Your task is to determine the minimum number of straight cuts needed to break the chocolate bar into `m * n` individual pieces. A straight cut can go along the lines between the pieces either horizontally or vertically, and each cut must cut through the entire width or height of the chocolate bar respectively. -----Input----- The input consists of two integers `m` and `n` (1 ≤ m, n ≤ 50) — the number of rows and columns of the chocolate bar. -----Output----- Print a single integer — the minimum number of cuts needed to break the chocolate bar into individual pieces. -----Examples----- Input 2 2 Output 3 Input 1 10 Output 9 Input 5 5 Output 24 -----Note----- In the first example, you can make one vertical cut and then one horizontal cut on each of the resulting pieces, resulting in three cuts in total. In the second example, you only need to make 9 cuts: each cut separates one row of the chocolate into individual pieces. In the third example, there are several strategies, but at least 24 cuts are needed as you can first perform vertical cuts separating into columns and then horizontal cuts separating each column into pieces.","solution":"def count_minimum_cuts(m, n): Returns the minimum number of cuts needed to break the chocolate bar into m*n individual pieces. return (m * n) - 1"},{"question":"You are given a sequence of integers where each number appears exactly twice, except for one number which appears exactly once. Your task is to find the number that appears only once. Input: The input consists of two lines. The first line contains a single integer N, indicating the number of elements in the sequence (2 * k + 1 where k is the number of pairs, so N is always odd). The second line contains N space-separated integers. Output: Output a single integer, which is the number that appears only once in the sequence. Constraints: 1 ≤ N ≤ 10^6 All integers in the sequence are between 1 and 10^6. SAMPLE INPUT 5 1 2 2 3 3 SAMPLE OUTPUT 1 SAMPLE INPUT 7 4 1 2 1 2 3 3 SAMPLE OUTPUT 4","solution":"def find_unique_number(n, sequence): Finds the number that appears only once in the given sequence where every other number appears exactly twice. Args: n : int : Number of elements in the sequence. sequence : list : List of integers representing the sequence. Returns: int : The number that appears only once. unique_number = 0 for num in sequence: unique_number ^= num return unique_number"},{"question":"A software company wants to implement a new feature in their online shopping website to recommend products to users based on their previous purchases. The recommendation system analyses a user\'s purchase history and suggests the most frequently purchased products by the user. Given a list of product transactions for a user, write a program to determine the most frequently bought product. If there are multiple products with the same highest purchase frequency, return the product that comes first lexicographically. Implement a function `find_frequent_product(transactions: List[str]) -> str` that takes a list of strings where each string represents a product transaction, and returns the most frequently bought product. -----Input----- - A list of strings `transactions` (1 ≤ len(transactions) ≤ 105, 1 ≤ len(product) ≤ 50), where each string in the list represents a product the user has purchased. -----Output----- - A string representing the most frequently bought product. -----Examples----- Input: [\'apple\', \'banana\', \'apple\', \'apple\', \'banana\', \'cherry\'] Output: \'apple\' Input: [\'notebook\', \'pen\', \'notebook\', \'pen\', \'notebook\', \'pencil\', \'pen\'] Output: \'notebook\' Input: [\'water\', \'water\', \'soda\', \'juice\', \'water\', \'soda\', \'soda\'] Output: \'soda\' Note: In the first example, \'apple\' is bought 3 times while \'banana\' is bought 2 times and \'cherry\' once, so \'apple\' is the most frequent. In the second example, \'notebook\' and \'pen\' are both bought thrice, but \'notebook\' comes first lexicographically. In the third example, \'water\' and \'soda\' are both bought 3 times, but \'soda\' comes first lexicographically.","solution":"from collections import Counter def find_frequent_product(transactions): Determine the most frequently bought product from a list of transactions. If there are multiple products with the same highest purchase frequency, return the product that comes first lexicographically. Parameters: transactions (List[str]): A list of strings where each string is a product the user has purchased. Returns: str: The most frequently bought product. if not transactions: return \\"\\" product_counts = Counter(transactions) max_count = max(product_counts.values()) # Get all products with the max_count most_frequent_products = [product for product, count in product_counts.items() if count == max_count] # Return the lexicographically smallest product return min(most_frequent_products)"},{"question":"You are given an array of strings `words` and a string `pattern`. Return a list of `words` that match the given pattern. A word matches the pattern if there exists a permutation of letters `p` so that after replacing every letter x in the pattern with `p(x)`, we get the desired word. Example: Input: words = [\\"abc\\", \\"deq\\", \\"mee\\", \\"aqq\\", \\"dkd\\", \\"ccc\\"] pattern = \\"abb\\" Output: [\\"mee\\", \\"aqq\\"] Explanation: - \\"mee\\" matches the pattern \\"abb\\" (m -> a, e -> b) - \\"aqq\\" matches the pattern \\"abb\\" (a -> a, q -> b) Note: - It is guaranteed that all strings in words and pattern have the same length.","solution":"def find_and_replace_pattern(words, pattern): def encode(word): mapping = {} code = [] next_code = 0 for char in word: if char not in mapping: mapping[char] = next_code next_code += 1 code.append(mapping[char]) return code pattern_code = encode(pattern) return [word for word in words if encode(word) == pattern_code]"},{"question":"Given a grid of dimensions m x n consisting of non-negative integers where each cell represents the height of the terrain at that point, you are asked to determine the maximum amount of water that can be trapped when it rains. Water can only be stored in the valleys created by the neighboring cells and cannot leak outside the edges of the grid. Consider water trapped in the entire grid after a heavy rain, where water will fill up to the height of the lowest bounding wall around any low-lying regions. Example: Input: grid = [[1,4,3,1,3,2], [3,2,1,3,2,4], [2,3,3,2,3,1]] Output: 4 Explanation: After a heavy rain, the water trapped so far: [ [1,4,3,1,3,2], [3,2,1,3,2,4], [2,3,3,2,3,1] ] The trapped water at cell (1,1) is 1 and at cell (1,2) is 3, thus total trapped water is 1 + 3 = 4. Your Task: You don\'t need to read input or print anything. Complete the function `trapRainWater` which takes a 2D list `grid` as input and returns an integer representing the maximum water trapped. Expected Time Complexity: O(m * n * log(m * n)) Expected Auxiliary Space: O(m * n) Constraints: 1. m == grid.length 2. n == grid[i].length 3. 1 ≤ m, n ≤ 100 4. 0 ≤ grid[i][j] ≤ 10^4","solution":"import heapq def trapRainWater(grid): if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) visited = [[False] * n for _ in range(m)] heap = [] # Push all the boundary cells into the heap for i in range(m): for j in [0, n - 1]: heapq.heappush(heap, (grid[i][j], i, j)) visited[i][j] = True for j in range(n): for i in [0, m - 1]: heapq.heappush(heap, (grid[i][j], i, j)) visited[i][j] = True directions = [(1, 0), (-1, 0), (0, -1), (0, 1)] water_trapped = 0 while heap: height, x, y = heapq.heappop(heap) for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny]: visited[nx][ny] = True water_trapped += max(0, height - grid[nx][ny]) heapq.heappush(heap, (max(height, grid[nx][ny]), nx, ny)) return water_trapped"},{"question":"You are given an undirected graph with N nodes and M edges. Your task is to determine if the graph contains exactly one connected component and if it\'s a tree. A tree is a connected, acyclic graph with N nodes and N-1 edges. -----Input----- The first line contains two integers N and M, representing the number of nodes and edges in the graph, respectively. Each of the next M lines contains two space-separated integers u and v, denoting an undirected edge between nodes u and v. -----Output----- Output a single line containing the string \\"YES\\" (without quotes) if the graph is a tree, or \\"NO\\" (without quotes) otherwise. -----Constraints----- 2 ≤ N ≤ 1000 1 ≤ M ≤ min(1000, N*(N-1)/2) 1 ≤ u, v ≤ N -----Example----- Input: 5 4 1 2 2 3 4 3 5 3 Output: YES -----Explanation----- The graph in the example has 5 nodes and 4 edges. It is connected and acyclic, which meets the criteria for being a tree. Input: 5 5 1 2 2 3 4 3 5 3 1 5 Output: NO -----Explanation----- The graph in the example has 5 nodes and 5 edges. Since it has more edges than N-1, it cannot be a tree.","solution":"def is_tree(N, M, edges): if N - 1 != M: return \\"NO\\" from collections import defaultdict, deque graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = set() q = deque([1]) visited.add(1) while q: node = q.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) q.append(neighbor) return \\"YES\\" if len(visited) == N else \\"NO\\""},{"question":"Given an unsorted list of integers, your task is to determine the length of the longest contiguous subsequence such that the elements of the subsequence can be rearranged to form a sequence of consecutive integers. Input The first line of input contains an integer n (1 ≤ n ≤ 10^6), the number of elements in the list. The second line contains n space-separated integers representing the elements of the list (−10^6 ≤ element ≤ 10^6). Output Print a single line containing the length of the longest contiguous subsequence that can be rearranged to form a sequence of consecutive integers. Examples Input 6 10 3 5 1 4 2 Output 5 Input 5 1 4 3 5 7 Output 3 Note In the first sample, the longest contiguous subsequence that can be rearranged to form a sequence of consecutive integers is [3, 5, 1, 4, 2], which can be rearranged as [1, 2, 3, 4, 5]. In the second sample, the longest contiguous subsequence that can be rearranged to form a sequence of consecutive integers is [3, 4, 5].","solution":"def length_of_longest_consecutive_subsequence(n, arr): This function takes the number of elements `n` and the list `arr` containing the elements, and returns the length of the longest contiguous subsequence such that they can be rearranged to form a sequence of consecutive integers. if n == 0: return 0 unique_elements = set(arr) max_length = 0 for num in unique_elements: if num - 1 not in unique_elements: current_num = num current_length = 1 while current_num + 1 in unique_elements: current_num += 1 current_length += 1 max_length = max(max_length, current_length) return max_length"},{"question":"You are given an array of integers and a number k. You need to determine if there are two distinct elements in the array whose sum is exactly equal to k. -----Input----- - The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the array. - The second line contains n integers a_{i} (1 ≤ a_{i} ≤ 10^9), the elements of the array. - The third line contains a single integer k (1 ≤ k ≤ 2·10^9), the target sum. -----Output----- Print \\"YES\\" if there are two distinct elements in the array whose sum is exactly equal to k. Otherwise, print \\"NO\\". -----Examples----- Input 5 1 2 3 4 5 9 Output YES Input 4 2 7 11 15 10 Output NO -----Note----- In the first sample, the pair (4, 5) sums to 9, which is k. Thus, the output is \\"YES\\". In the second sample, there is no pair of distinct elements that sums to 10. Hence, the output is \\"NO\\".","solution":"def check_sum_pair(arr, k): Determines if there are two distinct elements in the array whose sum is exactly equal to k. :param arr: List of integers. :param k: Target sum. :return: \'YES\' if such a pair exists, otherwise \'NO\'. seen = set() for num in arr: if k - num in seen: return \'YES\' seen.add(num) return \'NO\'"},{"question":"Sara is participating in a math competition where she needs to solve several sequential problems as quickly as possible. Each problem consists of a string, and she is given a specific task: for each given string, she has to determine the length of the longest substring containing only one distinct character. She needs your help to automate the process. Write a program that, given a string, will output the length of the longest substring that contains only one distinct character. Input The input consists of a single line containing a string s (1 ≤ |s| ≤ 10^5) which contains only lowercase English letters. Output Output a single integer, the length of the longest substring containing only one distinct character. Examples Input abbcccddddeeeee Output 5 Input aabbcc Output 2 Input abcd Output 1 Note In the first sample, the longest substring containing only one distinct character is \\"eeeee\\", which has length 5. In the second sample, there are multiple substrings like \\"aa\\", \\"bb\\", and \\"cc\\", each of which has length 2. In the third sample, each character is unique, so the longest substring with one distinct character has length 1.","solution":"def longest_single_char_substring_length(s): Determines the length of the longest substring containing only one distinct character. :param s: A string of lowercase English letters :return: Length of the longest substring with only one distinct character if not s: return 0 max_length = 1 current_length = 1 for i in range(1, len(s)): if s[i] == s[i-1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 # Check last substring\'s length max_length = max(max_length, current_length) return max_length"},{"question":"Write a function named `merge_sorted_arrays` that takes two sorted arrays of integers and returns a single sorted array that contains all the elements from both input arrays. # Function Signature ```python def merge_sorted_arrays(arr1: List[int], arr2: List[int]) -> List[int]: ``` # Parameters - `arr1` (List[int]): A sorted list of integers. - `arr2` (List[int]): Another sorted list of integers. # Returns - (List[int]): A new sorted list containing all the elements from `arr1` and `arr2`. # Examples ```python merge_sorted_arrays([1, 3, 5], [2, 4, 6]) # Expected output: [1, 2, 3, 4, 5, 6] merge_sorted_arrays([1, 2, 3], [4, 5, 6]) # Expected output: [1, 2, 3, 4, 5, 6] merge_sorted_arrays([4, 5, 6], [1, 2, 3]) # Expected output: [1, 2, 3, 4, 5, 6] merge_sorted_arrays([], [1, 2, 3]) # Expected output: [1, 2, 3] merge_sorted_arrays([1, 2, 3], []) # Expected output: [1, 2, 3] ``` Constraints - Both input arrays are sorted in non-decreasing order. - Elements in the array can be negative. - The function should have a linear time complexity. - Do not use built-in sorting functions or methods.","solution":"from typing import List def merge_sorted_arrays(arr1: List[int], arr2: List[int]) -> List[int]: Merges two sorted arrays into one sorted array. Parameters: arr1 (List[int]): A sorted list of integers. arr2 (List[int]): Another sorted list of integers. Returns: List[int]: A new sorted list containing all the elements from arr1 and arr2. merged_array = [] i, j = 0, 0 while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # Append remaining elements, if any while i < len(arr1): merged_array.append(arr1[i]) i += 1 while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"In a magical land, there is a peculiar river that flows through a perfectly rectangular grid of islands. The grid is represented as an M times N matrix where each cell can either be land (\'L\') or water (\'W\'). The beauty of this landscape is measured based on the number of isolated groups of land. Two cell positions are connected if their fields in the matrix share a common edge (left, right, top, or bottom). An isolated group of land is defined as the largest connected group of \'L\' cells that are entirely surrounded by \'W\' cells or the boundary of the matrix. Your task is to calculate the number of such isolated groups of land. -----Input----- The first line of input contains two integers M and N (1 leq M, N leq 1000). Each of the next M lines contains exactly N characters, either \'L\' or \'W\', describing the map. -----Output----- The first and only line of output must contain the number of isolated groups of land. -----Examples----- Sample Input: 5 5 LWLWL LLLLL LWLWL LLLLL LWLWL Sample Output: 1 Sample Input: 3 3 LWL WLL LWL Sample Output: 3","solution":"def count_isolated_groups(M, N, grid): def dfs(i, j): if i < 0 or i >= M or j < 0 or j >= N or grid[i][j] != \'L\': return grid[i][j] = \'W\' # mark as visited # check all four adjacent cells dfs(i - 1, j) dfs(i + 1, j) dfs(i, j - 1) dfs(i, j + 1) isolated_groups = 0 for i in range(M): for j in range(N): if grid[i][j] == \'L\': dfs(i, j) isolated_groups += 1 return isolated_groups"},{"question":"An online marketplace allows users to list products for sale. Each product listing consists of the following details: - Product ID (a unique integer identifier) - Product Name (a string containing only lowercase English letters) - Seller ID (a unique integer identifier for the seller) - Price (an integer denoting the price of the product) - Category (a string containing only lowercase English letters) A user can apply filters to search for products within a specific price range and category, sorted by price in ascending order. If multiple products have the same price, they are displayed in the order of their Product ID. Write a program that processes multiple product listings and filters them based on a provided price range and category. Then, output the filtered and sorted list of products. ------ Input ------ The first line contains a single integer N denoting the number of products. The next N lines describe the products, each line containing space-separated values representing Product ID, Product Name, Seller ID, Price, and Category. The next line contains three values: - The minimum price MIN (an integer) - The maximum price MAX (an integer) - The category Category (a string) ------ Output ------ Output the details of the filtered and sorted products, one product per line in the format: ProductID ProductName SellerID Price Category If no products match the filter criteria, output a single line containing \\"No products found\\". ------ Constraints ------ 1 ≤ N ≤ 1000 1 ≤ ProductID, SellerID ≤ 10^6 1 ≤ Price, MIN, MAX ≤ 10^5 The length of Product Name and Category does not exceed 30 characters. ----- Sample Input 1 ------ 5 101 phone 2001 500 electronics 102 laptop 2002 1500 electronics 103 watch 2003 300 accessories 104 phone 2004 700 electronics 105 headphones 2005 200 accessories 300 1000 electronics ----- Sample Output 1 ------ 101 phone 2001 500 electronics 104 phone 2004 700 electronics ----- Sample Input 2 ------ 4 201 tshirt 3001 25 clothing 202 jeans 3002 50 clothing 203 tshirt 3001 35 clothing 204 jacket 3003 90 clothing 40 60 clothing ----- Sample Output 2 ------ 202 jeans 3002 50 clothing 203 tshirt 3001 35 clothing","solution":"def filter_products(N, products, MIN, MAX, Category): filtered_products = [] for prod in products: prod_id, prod_name, seller_id, price, category = prod if MIN <= price <= MAX and category == Category: filtered_products.append((prod_id, prod_name, seller_id, price, category)) filtered_products.sort(key=lambda x: (x[3], x[0])) if not filtered_products: return [\\"No products found\\"] result = [] for prod in filtered_products: result.append(f\\"{prod[0]} {prod[1]} {prod[2]} {prod[3]} {prod[4]}\\") return result"},{"question":"Given an array of integers, determine the minimum number of swaps required to sort the array in ascending order. A swap involves exchanging the positions of two elements in the array. The function `minimumSwaps` takes the following parameter: - `arr`: an array of integers The function should return an integer representing the minimum number of swaps required. Function Signature: ```python def minimumSwaps(arr: List[int]) -> int: pass ``` **Input Format** - The first line contains an integer `n`, the size of the array `arr`. - The second line contains `n` space-separated integers, the elements of the array. **Constraints** - 1 leq n leq 10^5 - 1 leq arr[i] leq 10^5 **Output Format** A single integer, the minimum number of swaps required to sort the array. **Sample Input 0** ``` 4 4 3 1 2 ``` **Sample Output 0** ``` 3 ``` **Explanation 0** We perform the following swaps: 1. Swap 4 with 1 (arr becomes [1, 3, 4, 2]) 2. Swap 3 with 2 (arr becomes [1, 2, 4, 3]) 3. Swap 4 with 3 (arr becomes [1, 2, 3, 4]) **Sample Input 1** ``` 5 2 3 4 1 5 ``` **Sample Output 1** ``` 3 ``` **Explanation 1** We perform the following swaps: 1. Swap 2 with 1 (arr becomes [1, 3, 4, 2, 5]) 2. Swap 3 with 2 (arr becomes [1, 2, 4, 3, 5]) 3. Swap 4 with 3 (arr becomes [1, 2, 3, 4, 5]) **Sample Input 2** ``` 7 1 3 5 2 4 6 7 ``` **Sample Output 2** ``` 3 ``` **Explanation 2** We perform the following swaps: 1. Swap 3 with 2 (arr becomes [1, 2, 5, 3, 4, 6, 7]) 2. Swap 5 with 3 (arr becomes [1, 2, 3, 5, 4, 6, 7]) 3. Swap 5 with 4 (arr becomes [1, 2, 3, 4, 5, 6, 7])","solution":"from typing import List def minimumSwaps(arr: List[int]) -> int: n = len(arr) arr_pos = [*enumerate(arr)] # Sort the array by value arr_pos.sort(key=lambda it: it[1]) # To keep track of visited elements vis = {k: False for k in range(n)} ans = 0 for i in range(n): # If already visited or element already in the correct place if vis[i] or arr_pos[i][0] == i: continue # Visit the entire cycle cycle_size = 0 x = i while not vis[x]: vis[x] = True x = arr_pos[x][0] cycle_size += 1 if cycle_size > 0: ans += (cycle_size - 1) return ans"},{"question":"Tom recently started his new journey as a delivery driver in the city. The city has a complex network of intersections and roads, which is represented as an undirected graph. The intersections are represented as nodes and the roads as edges with some weight representing the time taken to travel on that road. Tom, being new to the city, needs to find the shortest possible time to reach certain delivery points from his starting point. The problem is defined as follows: # Input - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 5000), representing the number of intersections (nodes) and roads (edges) in the city respectively. - The next `m` lines contain three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000), representing an undirected road between intersection `u` and `v` with a travel time of `w`. - The next line contains a single integer `s` (1 ≤ s ≤ n), the starting intersection where Tom begins his journey. - The next line contains an integer `d` (1 ≤ d ≤ n), representing the delivery point where Tom needs to go. # Output - Output a single integer, the minimum time required for Tom to reach the delivery point `d` from the starting point `s`. # Examples Input ``` 5 6 1 2 2 2 3 4 1 4 1 4 5 3 3 5 1 2 5 7 1 5 ``` Output ``` 4 ``` Input ``` 3 3 1 2 2 2 3 2 1 3 5 1 3 ``` Output ``` 4 ``` # Note In the first test case, Tom can take the following route: - Start from intersection 1, take the road to intersection 4 with a time of 1. - Then from intersection 4 take the road to intersection 5 with a time of 3. - The total time is 1 + 3 = 4, which is the shortest possible time to reach the destination. In the second test case, Tom can take the following route: - Start from intersection 1, take the road to intersection 2 with a time of 2. - Then from intersection 2 take the road to intersection 3 with a time of 2. - The total time is 2 + 2 = 4, which is the shortest possible time to reach the destination.","solution":"import heapq def shortest_delivery_time(n, m, edges, start, destination): graph = {i: [] for i in range(1, n + 1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) dist = {i: float(\'inf\') for i in range(1, n + 1)} dist[start] = 0 priority_queue = [(0, start)] while priority_queue: current_dist, u = heapq.heappop(priority_queue) if current_dist > dist[u]: continue for v, weight in graph[u]: if dist[u] + weight < dist[v]: dist[v] = dist[u] + weight heapq.heappush(priority_queue, (dist[v], v)) return dist[destination]"},{"question":"Write function FindMissingNumber which takes an array containing n distinct numbers taken from 0, 1, 2, ..., n and returns the one that is missing from the array.","solution":"def find_missing_number(nums): Finds the missing number in an array containing n distinct numbers taken from 0, 1, 2, ..., n. :param nums: List[int] - A list of n distinct numbers from the set {0, 1, 2, ..., n}. :return: int - The missing number. n = len(nums) expected_sum = n * (n + 1) // 2 actual_sum = sum(nums) return expected_sum - actual_sum"},{"question":"Given two strings s1 and s2, find the length of the longest uncommon subsequence between them. The longest uncommon subsequence is defined as the longest subsequence that appears in one string but not the other. Example 1: Input: s1 = \\"abcdef\\" s2 = \\"abc\\" Output: 6 Explanation: The whole string \\"abcdef\\" is an uncommon subsequence. Example 2: Input: s1 = \\"abc\\" s2 = \\"abc\\" Output: -1 Explanation: There is no uncommon subsequence when both strings are identical. Your Task: You don\'t need to read input or print anything. Your task is to complete the function longestUncommonSubseq() which takes the two strings s1 and s2 as inputs and returns the length of the longest uncommon subsequence. If there is no uncommon subsequence, return \\"-1\\". Expected Time Complexity: O(|s1| + |s2|) Expected Auxiliary Space: O(1) Constraints: 1 ≤ |s1|, |s2| ≤ 10^{3}","solution":"def longestUncommonSubseq(s1, s2): Returns the length of the longest uncommon subsequence between s1 and s2. if s1 == s2: return -1 return max(len(s1), len(s2))"},{"question":"Given a grid of size N x M initialized with zeros, a user needs to perform a series of operations to increment values in the grid. Each operation is described by four integers x1, y1, x2, y2 indicating that for all cells (i, j) where x1 ≤ i ≤ x2 and y1 ≤ j ≤ y2, the value in the cell should be incremented by 1. Your task is to write a function that, after performing all the given operations, returns the final state of the grid. Input: - First line contains two integers N and M denoting the dimensions of the grid. - Second line contains an integer K, the number of operations. - For next K lines, each line contains four integers x1, y1, x2, y2 describing an operation. Output: - Output N lines, each containing M integers representing the final state of the grid after all operations have been performed. Constraints: 1 ≤ N, M ≤ 1000 0 ≤ K ≤ 10000 1 ≤ x1 ≤ x2 ≤ N 1 ≤ y1 ≤ y2 ≤ M Example Input: 3 3 2 1 1 2 2 2 2 3 3 Example Output: 1 1 0 1 2 1 0 1 1","solution":"def increment_grid(n, m, k, operations): Returns the final state of the grid after performing the given operations. :param n: Number of rows in the grid :param m: Number of columns in the grid :param k: Number of operations :param operations: List of operations, each operation is described by four integers [x1, y1, x2, y2] :return: Final state of the grid as a list of lists grid = [[0] * m for _ in range(n)] for operation in operations: x1, y1, x2, y2 = operation for i in range(x1-1, x2): for j in range(y1-1, y2): grid[i][j] += 1 return grid"},{"question":"🧩 You are given a secret message encoded as a string of words separated by a special delimiter character, which is not part of any word. Your task is to decipher the message by reversing the order of the words, while leaving the delimiter characters in their original positions. 🔍 The input string can contain any character except whitespaces, and the delimiter is always present between words but might also appear at the beginning or end of the string. ✒️ Write a function `decipher_message(s: str, delimiter: str) -> str` where: 🔸 `s` is a string representing the encoded message. 🔸 `delimiter` is a single character string. 📋 Example: decipher_message(\\"hello|world|this|is|a|test\\", \\"|\\") -> \\"test|a|is|this|world|hello\\" decipher_message(\\"*first*second*third*\\", \\"*\\") -> \\"*third*second*first*\\" decipher_message(\\":begin:middle:end:\\", \\":\\") -> \\":end:middle:begin:\\" ❓ If the string does not contain the delimiter, return the string as is. If the string is empty, return an empty string. 💡 Hint: Split the string and insert the words in reverse order while reintroducing the delimiter at the original positions.","solution":"def decipher_message(s: str, delimiter: str) -> str: Deciphers the message by reversing the order of the words separated by the delimiter. if delimiter not in s: return s # Split the string by the delimiter and reverse the words words = s.split(delimiter) reversed_words = words[::-1] # Join the reversed words with the delimiter return delimiter.join(reversed_words)"},{"question":"You are given a string `s` consisting of lowercase English letters, and an integer `k`. You need to perform the following operation exactly `k` times: select any character in `s` and remove it. Your goal is to minimize the number of distinct characters in the resulting string. -----Input----- The first line contains an integer k (0 le k le |s| le 100,000) — the number of characters you need to remove. The second line contains the string s. -----Output----- Print exactly one integer — the minimum number of distinct characters in the string after performing the operation exactly `k` times. -----Examples----- Input 3 abcde Output 2 Input 2 aaabb Output 1 Input 0 xyz Output 3 -----Note----- In the first example, one of the optimal ways is removing the characters \'a\', \'b\', and \'c\', which leaves the string \\"de\\" with 2 distinct characters \'d\' and \'e\'.","solution":"def min_distinct_chars_after_removals(k, s): from collections import Counter # Count frequency of each character in the string freq = Counter(s) # Get a list of (character, frequency) and sort it based on frequency freq_list = sorted(freq.items(), key=lambda item: item[1]) # Start removing characters with the lowest frequencies for char, count in freq_list: if k >= count: k -= count del freq[char] else: break # Return the number of distinct characters left return len(freq)"},{"question":"Given a string s consisting of lowercase alphabets, determine if there exists any permutation of the string that forms a palindrome. Example 1: Input: s = \\"racecar\\" Output: True Explanation: \\"racecar\\" is already a palindrome. Example 2: Input: s = \\"civic\\" Output: True Explanation: \\"civic\\" is a palindrome. Example 3: Input: s = \\"hello\\" Output: False Explanation: No permutation of \\"hello\\" can form a palindrome. Your Task: You don\'t need to read or print anything. Your task is to complete the function can_form_palindrome() which takes the string as input parameter and returns True if there is a permutation that can form a palindrome, otherwise returns False. Expected Time Complexity: O(N) where N is the length of the string. Expected Space Complexity: O(1) Constraints: 1 <= len(s) <= 10^5","solution":"def can_form_palindrome(s): Determines if any permutation of the string can form a palindrome. Parameters: s (str): The input string consisting of lowercase alphabets. Returns: bool: True if any permutation can form a palindrome, False otherwise. from collections import Counter # Count the frequency of each character freq = Counter(s) # A string can form a palindrome if it has at most one character with an odd frequency odd_count = sum(1 for count in freq.values() if count % 2 != 0) return odd_count <= 1"},{"question":"Problem Suppose you are given a two-dimensional grid representing a map. Each cell in the grid is either land (represented by \'1\') or water (represented by \'0\'). You can move up, down, left, or right from a piece of land to another piece of land. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. Your task is to write a function that counts the number of islands in the grid. The number of islands is defined as the number of connected components of land cells. Constraints - The grid will have at most 300 rows and 300 columns. - The grid is not necessarily a square. - Every element in the grid is either \'0\' or \'1\'. Input The input is given in the following format: ``` R C grid ``` - The integer R (1 ≤ R ≤ 300) indicates the number of rows in the grid. - The integer C (1 ≤ C ≤ 300) indicates the number of columns in the grid. - Each of the following R lines contains a string of length C where each character is either \'0\' or \'1\'. Output Output the number of islands. Examples Input ``` 5 5 11000 11000 00100 00011 00011 ``` Output ``` 3 ``` Input ``` 3 3 111 010 111 ``` Output ``` 1 ``` Input ``` 7 7 1000000 1000000 0011100 0010100 0011100 0000000 1100001 ``` Output ``` 4","solution":"def num_islands(grid): if not grid or not grid[0]: return 0 rows, cols = len(grid), len(grid[0]) visited = [[False for _ in range(cols)] for _ in range(rows)] def dfs(r, c): if r < 0 or r >= rows or c < 0 or c >= cols or grid[r][c] == \'0\' or visited[r][c]: return visited[r][c] = True dfs(r - 1, c) dfs(r + 1, c) dfs(r, c - 1) dfs(r, c + 1) island_count = 0 for r in range(rows): for c in range(cols): if grid[r][c] == \'1\' and not visited[r][c]: dfs(r, c) island_count += 1 return island_count def parse_input_and_count_islands(input_string): input_lines = input_string.strip().split(\\"n\\") R, C = map(int, input_lines[0].split()) grid = [list(input_lines[i + 1]) for i in range(R)] return num_islands(grid)"},{"question":"A social media platform keeps track of users and their follower relationships using user IDs represented by integers. Each user can follow multiple other users, and each user can be followed by multiple users. This relationship is represented using an adjacency list where each key is a user ID and the corresponding value is a list of user IDs representing the followers of that user. Write a program that takes an adjacency list as input and computes the number of users who follow each user, and the total number of followers each user has. The output should present this information in lexicographic order by user ID. Format the output as follows: ``` user id: followers = f, following = g, ``` where `id` is the user ID, `f` is the number of users following that user (followers), and `g` is the number of users that user is following (following). Constraints: * The number of users U leq 500 * Each user ID is a unique integer 1 leq id leq 10,000 Input: * In the first line, an integer U, the number of users, is provided. * For the next U lines, each line provides a user ID followed by a list of user IDs that this user follows. Output: * Print the information for each user in the specified format and in lexicographic order by user ID. Example: Input: ``` 4 1 2 3 2 3 3 1 4 1 2 ``` Output: ``` user 1: followers = 2, following = 2, user 2: followers = 2, following = 1, user 3: followers = 2, following = 1, user 4: followers = 0, following = 2, ``` In this example: - User 1 is followed by users 3 and 4, and follows users 2 and 3. - User 2 is followed by users 1 and 4, and follows user 3. - User 3 is followed by users 1 and 2, and follows user 1. - User 4 is not followed by anyone, and follows users 1 and 2.","solution":"def social_media_followers(U, adj_list): # Creating dictionaries for followers and following followers = {i: 0 for i in adj_list.keys()} following = {i: 0 for i in adj_list.keys()} # Calculate followers and following for user, friends in adj_list.items(): following[user] = len(friends) for friend in friends: if friend in followers: followers[friend] += 1 # Collecting the results in lexicographic order by user ID result = [] for user in sorted(adj_list.keys()): result.append(f\\"user {user}: followers = {followers[user]}, following = {following[user]},\\") return result"},{"question":"A digital marketing company wants to segment their user base for an upcoming campaign. They have a list of users\' email addresses and their purchase histories. They want to classify users into three categories based on the total amount they have spent: \'Low Spender\', \'Medium Spender\', and \'High Spender\'. **Task:** Write a function `categorize_users(emails: List[str], purchases: List[int]) -> Dict[str, str]` that takes in two lists: 1. `emails`: a list of user email addresses. 2. `purchases`: a list of integers representing the total amount spent by each user corresponding to their email address. The function should return a dictionary where the key is the email address and the value is the category (\'Low Spender\', \'Medium Spender\', or \'High Spender\'). The spending categories are defined as follows: - \'Low Spender\': Spend less than 100 - \'Medium Spender\': Spend between 100 and 500 (inclusive) - \'High Spender\': Spend more than 500 **Example:** ```python emails = [\\"john.doe@example.com\\", \\"jane.doe@example.com\\", \\"alice@example.com\\"] purchases = [75, 150, 600] categorize_users(emails, purchases) ``` **Output:** ```python { \\"john.doe@example.com\\": \\"Low Spender\\", \\"jane.doe@example.com\\": \\"Medium Spender\\", \\"alice@example.com\\": \\"High Spender\\" } ``` **Notes:** - Assume the length of `emails` and `purchases` is the same. - All spending amounts are non-negative integers.","solution":"from typing import List, Dict def categorize_users(emails: List[str], purchases: List[int]) -> Dict[str, str]: Categorize users based on their spending into \'Low Spender\', \'Medium Spender\', and \'High Spender\'. :param emails: List of user email addresses. :param purchases: List of integers representing the total amount spent by each user. :return: Dictionary with email as key and their spending category as value. categorization = {} for email, purchase in zip(emails, purchases): if purchase < 100: categorization[email] = \'Low Spender\' elif 100 <= purchase <= 500: categorization[email] = \'Medium Spender\' else: categorization[email] = \'High Spender\' return categorization"},{"question":"Given an array of words, returns the word that is the first to occur the most number of times. If there is more than one word with the maximum frequency, return the one that appears first in the array. You should write a function named `findMostFrequentWord` that takes a list of strings as input and returns a string. Function signature: ```python def findMostFrequentWord(words: List[str]) -> str ``` **Example** ``` findMostFrequentWord([\'apple\', \'banana\', \'apple\', \'apple\', \'banana\', \'banana\', \'banana\', \'cherry\']) - \'banana\' appears 4 times while \'apple\' appears 3 times - Therefore the output is \'banana\' ``` ``` findMostFrequentWord([\'red\', \'blue\', \'green\', \'blue\', \'green\', \'green\', \'red\']) - \'green\' appears the most number of times (3 times) - Therefore the output is \'green\' ``` **Constraints** - The input array will always contain at least one word. - Words are case-insensitive, i.e., \'Apple\' and \'apple\' are considered the same. - The words contain only alphabetic characters and are non-empty.","solution":"from typing import List from collections import defaultdict def findMostFrequentWord(words: List[str]) -> str: Returns the word that occurs the most number of times. If there is a tie in frequency, returns the one that appears first. word_count = defaultdict(int) first_occurrence = {} for index, word in enumerate(words): lower_word = word.lower() word_count[lower_word] += 1 if lower_word not in first_occurrence: first_occurrence[lower_word] = index max_freq = max(word_count.values()) most_frequent_words = [word for word, count in word_count.items() if count == max_freq] most_frequent_word = min(most_frequent_words, key=lambda word: first_occurrence[word]) return most_frequent_word"},{"question":"Given a list of integers, write a function to find all the elements that appear more than once in the list but appear consecutively. The function should return these elements in a list in the order they first appear. Your implementation should have a time complexity of O(n). # Examples Input ``` [1, 1, 2, 3, 3, 3, 4, 5, 5, 6] ``` Output ``` [1, 3, 5] ``` Input ``` [4, 4, 4, 6, 7, 7, 8, 9] ``` Output ``` [4, 7] ``` # Constraints 1. The list length is at least 1 and at most 10^5. 2. Each element in the list is an integer between -10^9 and 10^9. 3. The elements in the list are not necessarily distinct.","solution":"def find_consecutive_duplicates(arr): Returns a list of elements that appear more than once consecutively in the input array. Args: arr: List of integers Returns: List of integers that appear more than once consecutively if not arr: return [] result = [] prev = arr[0] count = 1 for i in range(1, len(arr)): if arr[i] == prev: count += 1 else: if count > 1: result.append(prev) prev = arr[i] count = 1 # Handle the last element if count > 1: result.append(prev) return result"},{"question":"In a particular village, the villagers love festivals and they often celebrate by forming groups and playing music. Each villager will either play a string instrument or a percussion instrument. The village elder has a unique way of determining if the festival is harmonious: he believes a festival is \\"HARMONIOUS\\" if the number of villagers playing string instruments is an exact multiple of the number of villagers playing percussion instruments. Otherwise, the festival is considered \\"NOT HARMONIOUS\\". Given the types of instruments each villager is playing, your task is to determine whether the festival is \\"HARMONIOUS\\" or \\"NOT HARMONIOUS\\". Note: For the purpose of this problem, you can assume only two types of instruments, where 0 denotes a string instrument and 1 denotes a percussion instrument. ------ Input Format ------ The first line of input consists of a single integer N denoting the number of villagers. The second line of input consists of N space separated integers, either 0 or 1, where 0 denotes a string instrument and 1 denotes a percussion instrument. ------ Output Format ------ Generate one line output saying \\"HARMONIOUS\\" if the festival satisfies the village elder\'s condition or \\"NOT HARMONIOUS\\" otherwise (quotes for clarity). ------ Constraints ------ 1 ≤ N ≤ 100 0 ≤ Ai ≤ 1 ----- Sample Input 1 ------ 3 0 0 1 ----- Sample Output 1 ------ HARMONIOUS ----- explanation 1 ------ Example 1: For the first example, N = 3 and the array A = [0, 0, 1]. There are 2 villagers playing string instruments and 1 villager playing a percussion instrument. Since 2 (number of villagers playing string instruments) is an exact multiple of 1 (number of villagers playing percussion instruments), the answer is \\"HARMONIOUS\\". ----- Sample Input 2 ------ 4 0 1 1 1 ----- Sample Output 2 ------ NOT HARMONIOUS ----- explanation 2 ------ Example 2: For the second example, N = 4 and the array A = [0, 1, 1, 1]. There is 1 villager playing a string instrument and 3 villagers playing percussion instruments. Since 1 is not an exact multiple of 3, the answer is \\"NOT HARMONIOUS\\". ----- Sample Input 3 ------ 4 1 1 0 0 ----- Sample Output 3 ------ HARMONIOUS ----- explanation 3 ------ Example 3: For the third example, N = 4 and the array A = [1, 1, 0, 0]. There are 2 villagers playing string instruments and 2 villagers playing percussion instruments. Since 2 is an exact multiple of 2, the answer is \\"HARMONIOUS\\". ----- Sample Input 4 ------ 5 0 0 0 1 1 ----- Sample Output 4 ------ HARMONIOUS ----- explanation 4 ------ Example 4: For the fourth example, N = 5 and the array A = [0, 0, 0, 1, 1]. There are 3 villagers playing string instruments and 2 villagers playing percussion instruments. Since 3 is not an exact multiple of 2, the answer is \\"NOT HARMONIOUS\\".","solution":"def festival_harmony(N, A): Determines if the festival is \\"HARMONIOUS\\" or \\"NOT HARMONIOUS\\". Parameters: N (int): The number of villagers. A (list of ints): List of integers where 0 denotes a string instrument and 1 denotes a percussion instrument. Returns: str: \\"HARMONIOUS\\" if the number of villagers playing string instruments is an exact multiple of the number of villagers playing percussion instruments, otherwise \\"NOT HARMONIOUS\\". num_strings = A.count(0) num_percussions = A.count(1) if num_percussions == 0 or num_strings % num_percussions == 0: return \\"HARMONIOUS\\" else: return \\"NOT HARMONIOUS\\""},{"question":"Karan loves playing with data structures, and his favorite one is the binary tree. He is fascinated by the various properties of binary trees, especially the concept of symmetry. A binary tree is considered symmetric if it is a mirror reflection of itself. Given a binary tree, help Karan determine if it is symmetric. -----Input:----- The first line of the input consists of a single integer N, the number of nodes in the binary tree. The following N lines describe the nodes. Each line contains three integers: `val`, `left`, and `right`, representing the value of the node and the indices of its left and right children. If a node does not have a left or right child, the corresponding value will be -1. -----Output:----- Print \\"YES\\" if the tree is symmetric, otherwise print \\"NO\\". -----Constraints----- - 1 leq N leq 1000 -----Sample Input:----- 3 1 2 3 2 -1 -1 3 -1 -1 -----Sample Output:----- YES -----EXPLANATION:----- The tree has the following structure: 1 / 2 3 This tree is symmetric because the left and right subtrees are mirror images of each other.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def build_tree(nodes): if not nodes: return None tree_nodes = {i: TreeNode(val) for i, (val, _, _) in enumerate(nodes)} for i, (val, left, right) in enumerate(nodes): if left != -1: tree_nodes[i].left = tree_nodes[left] if right != -1: tree_nodes[i].right = tree_nodes[right] return tree_nodes[0] def is_symmetric(root): if not root: return True def is_mirror(t1, t2): if not t1 and not t2: return True if t1 and t2 and t1.val == t2.val: return is_mirror(t1.left, t2.right) and is_mirror(t1.right, t2.left) return False return is_mirror(root.left, root.right) def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) nodes = [] index = 1 for i in range(N): val = int(data[index]) left = int(data[index + 1]) right = int(data[index + 2]) nodes.append((val, left, right)) index += 3 if N == 0: print(\\"YES\\") return root = build_tree(nodes) print(\\"YES\\" if is_symmetric(root) else \\"NO\\") if __name__ == \\"__main__\\": main()"},{"question":"Many retailers use price reductions to clear out old stock or to promote new products. Often, they provide a list of products with their original prices and the percentage of the discount to be applied. The challenge is to calculate the final price for each product after the discount has been applied. Task: Your job is to create a function named `apply_discounts` that transforms a list of products with original prices and discount percentages into a list of products with their final discounted prices, rounded to two decimal places. The function should take two lists as input arguments— one list contains the products\' names (variable name `products`), and the other list contains tuples where each tuple has the original price and discount percentage for the corresponding product (variable name `discounts`). The output should be a list of dictionaries, each containing the product name and the final price. ```python [ { \\"product\\": \\"\\", \\"discounted_price\\": 0.00 }, ... ] ``` _Ensure that the input lists are not modified._ Calculation for discounted price: ``` discounted_price = original_price * (1 - discount_percentage / 100) ``` Example: ```python products = [\'Laptop\', \'Smartphone\', \'Tablet\'] discounts = [(1000, 20), (500, 10), (300, 5)] apply_discounts(products, discounts) #=> [ { \\"product\\": \\"Laptop\\", \\"discounted_price\\": 800.00 }, { \\"product\\": \\"Smartphone\\", \\"discounted_price\\": 450.00 }, { \\"product\\": \\"Tablet\\", \\"discounted_price\\": 285.00 } ] ``` # Additional Information: - Ensure the function handles cases where the discount percentage could be zero or 100%. - Assume valid input where the lists have matching and aligned product data. - Utilize Python\'s built-in `round` function to ensure prices are rounded to the nearest cent. If you encounter any issues or have suggestions for improvement, feel free to leave a comment. Thank you!","solution":"def apply_discounts(products, discounts): Transforms a list of products with their original prices and discount percentages into a list of products with their final discounted prices. Args: products (list): A list of product names. discounts (list of tuples): A list of tuples where each tuple contains the original price and discount percentage for the corresponding product. Returns: list: A list of dictionaries with the product name and its final discounted price. final_prices = [] for product, (original_price, discount_percentage) in zip(products, discounts): discounted_price = round(original_price * (1 - discount_percentage / 100), 2) final_prices.append({ \\"product\\": product, \\"discounted_price\\": discounted_price }) return final_prices"},{"question":"Ships are made up of several compartments to help with stability and buoyancy. When considering the design of these compartments, we often use watertight doors to separate different sections efficiently. A key part of this design is determining the optimal placement of these doors such that the areas of the compartments are as balanced as possible, which helps in maintaining an even weight distribution. You are given a series of compartments with specific lengths, and your task is to calculate the optimal placement of a minimum number of watertight doors to divide the ship compartments into sections of equal length. Ensure that these sections are as balanced as possible. ------Input------ - One line containing an integer L, the total length of the compartments combined (1 le L le 10^9). - One line containing an integer K, the number of compartments (2 le K le 10^6). - One line containing K integers, representing the lengths of each compartment, separated by spaces. ------Output------ - One line containing an integer M: the minimum number of watertight doors required. - M lines each containing an integer, the lengths at which the watertight doors should be placed, in increasing order. You may assume that no compartment has a length of zero and it is guaranteed that it is always possible to divide the compartments into sections such that no section has zero length. ------Examples------ Sample Input 1: 100 4 25 25 25 25 Sample Output 1: 3 25 50 75 Sample Input 2: 210 3 70 70 70 Sample Output 2: 2 70 140","solution":"def watertight_doors(L, K, lengths): door_positions = [] total_length = 0 for length in lengths: total_length += length door_positions.append(total_length) return door_positions[:-1]"},{"question":"Given a string s representing a positive whole number and an integer k, return the lexicographically smallest string that can be obtained by removing exactly k characters from the string. Example 1: Input: s = \\"1432219\\", k = 3 Output: \\"1219\\" Explanation: Remove the three digits 4, 3, and 2 to form the new smallest number 1219. Example 2: Input: s = \\"10200\\", k = 1 Output: \\"200\\" Explanation: Remove the digit 1, the resulting number is 0200. Leading zeros are not allowed in the output. Example 3: Input: s = \\"10\\", k = 2 Output: \\"0\\" Explanation: After removing both characters, the smallest number possible is \\"0\\". Your Task: You don\'t need to read input or print anything. Your task is to complete the function smallestNumber() which takes the string s and the integer k as parameters and returns the lexicographically smallest string after removing exactly k characters. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 ≤ |s| ≤ 10^5 0 ≤ k ≤ |s| s consists of only digits 0-9. The resulting number must not contain any leading zeros except the number \\"0\\" itself.","solution":"def smallestNumber(s: str, k: int) -> str: Returns the lexicographically smallest string that can be obtained by removing exactly k characters from the string s. stack = [] for digit in s: while k > 0 and stack and stack[-1] > digit: stack.pop() k -= 1 stack.append(digit) # Remove the remaining k elements if any result = stack[:-k] if k else stack # Convert to a string and remove leading zeros return \'\'.join(result).lstrip(\'0\') or \'0\'"},{"question":"Problem Given a list of positive integers, you need to perform a series of operations to either update the value at a specific index or to find the minimum value in a given range. Make sure the operations are efficient given the constraints. There are two types of operations you will need to handle: 1. **Update Operation:** * Format: `1 i x` * Update the integer at index `i` to `x`. * Note that the list is 1-indexed. 2. **Range Minimum Query Operation:** * Format: `2 l r` * Find the minimum value in the inclusive range from index `l` to `r`. * Output the minimum value for each query of this type. # Constraints * The input will adhere to the following conditions: * `1 ≤ N ≤ 10^5` (length of the list) * `1 ≤ Q ≤ 10^5` (number of operations) * `1 ≤ A[i] ≤ 10^9` (value of each integer in the list) * `1 ≤ i ≤ N` (index for update) * `1 ≤ l ≤ r ≤ N` (range for minimum query) * There will be at least one query of type 2. # Input The input is given in the following format: * The first line contains an integer `N`. * The second line contains `N` integers separated by space. * The third line contains an integer `Q`. * The next `Q` lines each contain one operation in the format specified above. # Output For each range minimum query operation, print the minimum value in the specified range on a new line. # Examples Example 1 **Input:** ``` 5 1 3 2 7 9 4 2 1 3 1 3 5 2 2 4 2 1 5 ``` **Output:** ``` 1 3 1 ``` Example 2 **Input:** ``` 8 4 6 1 5 2 9 8 3 5 2 3 7 1 5 1 2 1 8 1 8 6 2 4 8 ``` **Output:** ``` 1 1 1 ``` For this problem, you might consider using a data structure that supports efficient range queries and updates, such as a Segment Tree or a Binary Indexed Tree (Fenwick Tree).","solution":"class SegmentTree: def __init__(self, array): self.n = len(array) self.tree = [0] * (2 * self.n) # Build the tree self.build(array) def build(self, array): for i in range(self.n): self.tree[self.n + i] = array[i] for i in range(self.n - 1, 0, -1): self.tree[i] = min(self.tree[2 * i], self.tree[2 * i + 1]) def update(self, index, value): pos = index + self.n - 1 self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = min(self.tree[2 * pos], self.tree[2 * pos + 1]) def range_min_query(self, left, right): left += self.n - 1 right += self.n - 1 min_val = float(\'inf\') while left <= right: if left % 2 == 1: min_val = min(min_val, self.tree[left]) left += 1 if right % 2 == 0: min_val = min(min_val, self.tree[right]) right -= 1 left //= 2 right //= 2 return min_val def handle_operations(n, array, q, operations): st = SegmentTree(array) results = [] for operation in operations: ops = operation.split() op_type = int(ops[0]) if op_type == 1: _, i, x = map(int, ops) st.update(i, x) elif op_type == 2: _, l, r = map(int, ops) results.append(st.range_min_query(l, r)) return results"},{"question":"You are given an integer \'n\' and a list of \'n\' integers. Your task is to determine if the list contains any duplicate integers. If there are duplicate integers, you should output \\"YES\\" and the first duplicate number found. If there are no duplicates, output \\"NO\\". Input The first line contains an integer \'n\' (1 ≤ n ≤ 1000), the length of the list. The second line contains \'n\' integers, each an integer between -1000 and 1000, representing the list of numbers. Output If there are no duplicate integers in the list, print \\"NO\\". If there are duplicates, print \\"YES\\" followed by the first duplicated integer found. Examples Input 5 1 2 3 4 5 Output NO Input 6 1 2 3 2 4 5 Output YES 2 Input 7 1 7 6 5 7 2 3 Output YES 7","solution":"def check_duplicates(n, numbers): Given an integer \'n\' and a list of \'n\' integers, this function checks for duplicates. If duplicates are found, it returns a string \\"YES\\" followed by the first duplicate number. If no duplicates are found, it returns \\"NO\\". seen = set() for num in numbers: if num in seen: return f\\"YES {num}\\" seen.add(num) return \\"NO\\""},{"question":"The world of integers can be fascinating. Today, you\'re tasked with exploring an interesting property of numbers: finding subarrays with a specified property. We define a \\"subarray\\" as a contiguous portion of an array. Your task is to determine the maximum sum of any subarray within a given array of integers. This is also known as the \\"maximum subarray problem.\\" INPUT: The first line of input contains the integer T, the number of test cases. Each test case starts with an integer N, the number of elements in the array, followed by N integers representing the elements of the array. OUTPUT: For each test case, print a single integer that represents the maximum sum of any subarray in the given array. Constraints: 1 ≤ T ≤ 1000 1 ≤ N ≤ 100000 -10^4 ≤ Array elements ≤ 10^4 SAMPLE INPUT 2 4 1 2 3 -2 3 -1 -2 -3 SAMPLE OUTPUT 6 -1 Explanation: For the first test case, the subarray [1, 2, 3] has the maximum sum 6. For the second test case, the subarray [-1] has the maximum sum -1.","solution":"def max_subarray_sum(arr): Function to find the maximum sum of any subarray in the given array. max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global def process_input(T, cases): Function to process multiple test cases and find the maximum subarray sum for each case. results = [] for case in cases: n, arr = case results.append(max_subarray_sum(arr)) return results"},{"question":"You are given a list of n students, where each student has a unique ID and a score in a competitive programming contest. The students are then divided into two groups based on their scores – Group A and Group B. The dividing criterion is the median score of all students. Write a program to: 1. Calculate the median score. 2. Divide the students into Group A (those with scores less than or equal to the median) and Group B (those with scores greater than the median). Note: If the median score belongs to multiple students, include all such students in Group A. Input The first line contains an integer n (1 ≤ n ≤ 1000000) representing the number of students. The second line contains n space-separated integers, each xi representing the score of the student (1 ≤ xi ≤ 1000). Output Print the median score on the first line. On the second line, print the IDs of the students in Group A (with their scores) sorted by their IDs in ascending order. On the third line, print the IDs of the students in Group B (with their scores) sorted by their IDs in ascending order. Example Input 6 600 720 1050 800 950 1000 Output 875 1 600 2 720 4 800 3 1050 5 950 6 1000 Explanation There are 6 students. Their scores are 600, 720, 1050, 800, 950, 1000. The median score among them is 875 (since the sorted scores are 600, 720, 800, 950, 1000, 1050). Students with IDs 1, 2, and 4 have scores less than or equal to 875 and they go into Group A. The other students go into Group B.","solution":"def divide_students_into_groups(n, scores): # Associate each student ID with their score student_scores = list(enumerate(scores, start=1)) # Sort the scores to find the median sorted_scores = sorted(scores) # Calculate the median middle = n // 2 if n % 2 == 0: median = (sorted_scores[middle - 1] + sorted_scores[middle]) / 2 else: median = sorted_scores[middle] # Divide the students into Group A (<= median) and Group B (> median) group_a = [] group_b = [] for student_id, score in student_scores: if score <= median: group_a.append((student_id, score)) else: group_b.append((student_id, score)) # Sort groups by student IDs group_a_sorted = sorted(group_a) group_b_sorted = sorted(group_b) return median, group_a_sorted, group_b_sorted # Example usage: n = 6 scores = [600, 720, 1050, 800, 950, 1000] result = divide_students_into_groups(n, scores) print(result[0]) for student_id, score in result[1]: print(student_id, score, end=\\" \\") print() for student_id, score in result[2]: print(student_id, score, end=\\" \\")"},{"question":"Given an integer array arr[] of size N, the task is to find the set of all possible subsets (the power set) of the array. The power set must not contain duplicate subsets. Return the power set in any order. Example 1: Input: N = 3, arr[] = [1, 2, 3] Output: [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]] Explanation: The total number of subsets of [1, 2, 3] is 8. Example 2: Input: N = 2, arr[] = [1, 2] Output: [[], [1], [2], [1, 2]] Explanation: The total number of subsets of [1, 2] is 4. Your Task: You don\'t need to read input or print anything. Complete the function findPowerSet() which takes N and array arr as input parameters and returns the power set of the given array. Expected Time Complexity: O(2^N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 15 All array elements are distinct 1 ≤ arr[i] ≤ 20","solution":"def findPowerSet(N, arr): Returns the power set of the given array. Parameters: N (int): Size of the array. arr (list): List of integers Returns: list: Power set of the given array result = [] # There will be 2^N subsets total_subsets = 1 << N for subset_mask in range(total_subsets): subset = [] for i in range(N): # Check if the i-th bit in subset_mask is set if subset_mask & (1 << i): subset.append(arr[i]) result.append(subset) return result"},{"question":"Alice is learning about function optimization and needs to minimize the cost of a certain operation. She has a list of integers, and she wants to perform the following operation exactly once: 1. Pick a subarray (contiguous segment of the array). 2. Reverse the order of elements in the subarray. 3. Compute the cost by summing the absolute differences between each adjacent pair of elements in the modified array. Given the list of integers, help Alice find the minimum possible cost after performing the operation. Example 1: Input: arr = [1, 3, 4, 2] Output: 4 Explanation: One optimal subarray to reverse is [3, 4, 2]. The array becomes [1, 2, 4, 3]. The cost is |1-2| + |2-4| + |4-3| = 1 + 2 + 1 = 4. Example 2: Input: arr = [10, 1, 10, 1] Output: 9 Explanation: Reversing any subarray does not minimize the cost lower than the original order. The original cost is |10-1| + |1-10| + |10-1| = 9. Your Task: You do not need to read input or print anything. Your task is to complete the function minimizeCost() which takes the list of integers as input and returns the minimum possible cost after the operation. Expected Time Complexity: O(n^2) Expected Auxiliary Space: O(1) Constraints: 1 ≤ len(arr) ≤ 100 1 ≤ arr[i] ≤ 10^4","solution":"def minimizeCost(arr): n = len(arr) # Function to calculate the cost of any array def calc_cost(arr): return sum(abs(arr[i] - arr[i-1]) for i in range(1, len(arr))) # Initially, calculate the cost of the original array min_cost = calc_cost(arr) # Try reversing each possible subarray and calculate the cost for i in range(n): for j in range(i+1, n): # Reverse the subarray from i to j arr[i:j+1] = arr[i:j+1][::-1] # Calculate the new cost new_cost = calc_cost(arr) # Restore the original order by reversing the subarray again arr[i:j+1] = arr[i:j+1][::-1] # Update the minimum cost if we find a lower one if new_cost < min_cost: min_cost = new_cost return min_cost"},{"question":"You are given an array of n integers. You need to find the length of the longest contiguous subarray such that all the elements after sorting the subarray are consecutive integers, although they might not be consecutive in the original array. Return the length of that subarray. INPUT The first line of the input contains a single integer t, denoting the number of test cases. Each test case consists of two lines. The first line contains n, the number of elements in the array. The second line contains n space-separated integers. 1 <= t <= 100 1 <= n <= 10^5 1 <= Elements of the array <= 10^5 OUTPUT For each test case, print the length of the longest contiguous subarray with consecutive elements on a new line. SAMPLE INPUT 2 6 10 12 11 14 13 15 5 15 14 12 11 13 SAMPLE OUTPUT 6 5","solution":"def find_longest_contiguous_subarray(arr): Finds the length of the longest contiguous subarray where elements after sorting are consecutive integers. n = len(arr) longest_length = 1 for i in range(n): min_val = arr[i] max_val = arr[i] for j in range(i + 1, n): min_val = min(min_val, arr[j]) max_val = max(max_val, arr[j]) # Check if the current subarray satisfies the condition if max_val - min_val == j - i: longest_length = max(longest_length, j - i + 1) return longest_length def process_test_cases(t, test_cases): Processes multiple test cases. Args: - t: Number of test cases. - test_cases: List of tuples, each containing n and array of n integers. Returns: - List of results for each test case. results = [] for case in test_cases: n, arr = case result = find_longest_contiguous_subarray(arr) results.append(result) return results"},{"question":"A game is played on a matrix with dimensions m x n (1 ≤ m, n ≤ 100) filled with non-negative integers. You start at the top-left corner of the matrix and want to reach the bottom-right corner. You can only move either down or right at any point in time. Your goal is to find the minimum path sum from the top-left to the bottom-right corner by only moving down or right. Write a program to calculate the minimum path sum. -----Input----- The first line contains two integers m and n, the dimensions of the matrix. The next m lines contain n space-separated integers each, representing the matrix\'s values. -----Output----- Print the minimum path sum. -----Examples----- Input 3 3 1 3 1 1 5 1 4 2 1 Output 7 Input 2 2 1 2 1 1 Output 3","solution":"def min_path_sum(matrix, m, n): Returns the minimum path sum from the top-left to the bottom-right corner of the matrix. Can move only down or right. dp = [[0] * n for _ in range(m)] dp[0][0] = matrix[0][0] # Initialize the first row for j in range(1, n): dp[0][j] = dp[0][j-1] + matrix[0][j] # Initialize the first column for i in range(1, m): dp[i][0] = dp[i-1][0] + matrix[i][0] # Fill the rest of the dp table for i in range(1, m): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + matrix[i][j] return dp[m-1][n-1] # Read input def main(): import sys input = sys.stdin.read data = input().split() m = int(data[0]) n = int(data[1]) matrix = [] index = 2 for i in range(m): row = list(map(int, data[index:index+n])) matrix.append(row) index += n print(min_path_sum(matrix, m, n)) if __name__ == \\"__main__\\": main()"},{"question":"# Description A robot is placed on an `N x N` grid. The robot is initially positioned at `(0, 0)`, and it can move in four possible directions: left, right, up, and down. Each movement command affects the position of the robot as follows: - `L` - move left one step (decrease the x-coordinate by 1) - `R` - move right one step (increase the x-coordinate by 1) - `U` - move up one step (decrease the y-coordinate by 1) - `D` - move down one step (increase the y-coordinate by 1) Given a sequence of movement commands and the size of the grid `N`, your task is to determine the robot\'s final position after executing all the commands. If the robot moves out of bounds (i.e., outside the grid from `(0, 0)` to `(N-1, N-1)`), it should stop at the boundary. # Example Working with the commands `RRUUDD` on a grid of size `5`: * Start at `(0, 0)` * `R` - moves to `(1, 0)` * `R` - moves to `(2, 0)` * `U` - invalid move (out of bounds), stays at `(2, 0)` * `U` - invalid move, stays at `(2, 0)` * `D` - moves to `(2, 1)` * `D` - moves to `(2, 2)` So `robot_position(\'RRUUDD\', 5)` returns `(2, 2)`. # Notes * The grid size `N` is guaranteed to be a positive integer. * Commands are given as a single string consisting of valid characters `L`, `R`, `U`, `D`. * The robot stops at boundaries, meaning it does not move if a command would take it out of the grid.","solution":"def robot_position(commands, n): Returns the final position of the robot on an N x N grid after executing a sequence of commands. The robot starts at (0, 0) and commands are \'L\', \'R\', \'U\', \'D\'. The robot stops at the boundary. :param commands: str, movement commands containing \'L\', \'R\', \'U\', \'D\' :param n: int, size of the grid (N x N) :return: tuple, (x, y) final position of the robot # Starting position of the robot x, y = 0, 0 for command in commands: if command == \'L\': if x > 0: x -= 1 elif command == \'R\': if x < n - 1: x += 1 elif command == \'U\': if y > 0: y -= 1 elif command == \'D\': if y < n - 1: y += 1 return (x, y)"},{"question":"Alex has found four numbers on a piece of paper. He wonders if any subset of the numbers (excluding the empty subset) sums to exactly half of the total of all four numbers. Help Alex determine if such a subset exists. -----Input----- The input consists of a single line containing four integers b_1, b_2, b_3, and b_4 (1 leq b_i leq 50) — the numbers Alex found. -----Output----- Output YES if there exists at least one subset of the given four numbers that sums to half of their total sum, or NO otherwise. Each character can be printed in any case (either uppercase or lowercase). -----Examples----- Input 2 4 6 8 Output YES Input 5 5 8 9 Output NO -----Note----- In the first example, the total sum of the numbers is 20. There is a subset {2, 8} that sums to 10, which is half of the total sum. In the second example, no subset of the numbers sums to 13.5, which is half of 27 (the total sum of the numbers).","solution":"def does_subset_sum_to_half(b1, b2, b3, b4): Determines if any subset of four numbers sums to half of their total sum. Parameters: b1, b2, b3, b4 (int): Four integers. Returns: str: \\"YES\\" if such a subset exists, \\"NO\\" otherwise. numbers = [b1, b2, b3, b4] total_sum = sum(numbers) # If the total sum is odd, it cannot be divided into two equal integer parts if total_sum % 2 != 0: return \\"NO\\" half_sum = total_sum // 2 # Check all subsets from itertools import combinations for r in range(1, 5): for subset in combinations(numbers, r): if sum(subset) == half_sum: return \\"YES\\" return \\"NO\\""},{"question":"John is a fan of palindromes and likes to create them by rearranging letters. A palindrome is a string that reads the same forwards and backwards. However, given a string s, rearranging its letters to form a palindrome is not always possible. You are given a string s. Determine if it is possible to rearrange the letters in s to form a palindrome. Constraints: * The string s contains only lowercase English letters. * The length of the string s is between 1 and 1000, inclusive. Input: The input is given from Standard Input in the following format: s Output: Output \\"YES\\" if it is possible to rearrange the letters in s to form a palindrome. Otherwise, output \\"NO\\". Examples: Input aabb Output YES Input abc Output NO Input racecar Output YES","solution":"def can_form_palindrome(s): Determines if it is possible to rearrange the letters in s to form a palindrome. Args: s (str): Input string containing only lowercase English letters. Returns: str: \\"YES\\" if it is possible to rearrange the letters to form a palindrome, otherwise \\"NO\\". from collections import Counter # Count frequency of each character in the string count = Counter(s) # A string can form a palindrome if at most one character has an odd count odd_count = sum(1 for freq in count.values() if freq % 2 != 0) if odd_count > 1: return \\"NO\\" return \\"YES\\""},{"question":"Given an array of integers, you need to find all unique triplets in the array which gives the sum of zero. Note: The solution set must not contain duplicate triplets. Examples: Input [-1, 0, 1, 2, -1, -4] Output [[-1, 0, 1], [-1, -1, 2]] Input [0, 0, 0, 0] Output [[0, 0, 0]] Input [1, -1, -1, 0] Output [[-1, 0, 1]] Function Signature: ```python def threeSum(nums: List[int]) -> List[List[int]]: # Your code here ```","solution":"from typing import List def threeSum(nums: List[int]) -> List[List[int]]: nums.sort() # Sort the input list to aid the two-pointer technique triplets = [] n = len(nums) for i in range(n - 2): if i > 0 and nums[i] == nums[i - 1]: continue # Skip duplicates left, right = i + 1, n - 1 while left < right: s = nums[i] + nums[left] + nums[right] if s == 0: triplets.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 # Skip duplicates while left < right and nums[right] == nums[right - 1]: right -= 1 # Skip duplicates left += 1 right -= 1 elif s < 0: left += 1 else: right -= 1 return triplets"},{"question":"Alex loves numbers and he recently learned about prime numbers. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Alex is now curious about pairs of prime numbers that have a certain interesting property: the difference between them is exactly 2. These pairs are known as twin primes. Let’s help Alex find all such twin primes below a given number n. A twin prime pair (p1, p2) is defined by: - p1 and p2 are both prime. - p2 - p1 = 2. Given an integer n (2 ≤ n ≤ 10^6), count the number of twin prime pairs where both elements of the pair are less than or equal to n. Input The input consists of a single integer n. Output Print a single integer - the number of twin prime pairs where both primes are less than or equal to n. Example Input 10 Output 2 Note For n = 10, the twin prime pairs are (3, 5) and (5, 7).","solution":"def sieve_of_eratosthenes(n): Generates a list of booleans indicating whether each number <= n is prime. primes = [True] * (n + 1) p = 2 while (p * p <= n): if primes[p]: for i in range(p * p, n + 1, p): primes[i] = False p += 1 primes[0], primes[1] = False, False # 0 and 1 are not prime numbers return primes def count_twin_primes(n): Counts the number of twin prime pairs (p1, p2) such that p2 - p1 = 2 and p2 <= n. primes = sieve_of_eratosthenes(n) twin_prime_count = 0 for i in range(2, n - 1): if primes[i] and primes[i + 2]: twin_prime_count += 1 return twin_prime_count"},{"question":"Create a function that calculates the intersection area between two rectangles and determines if they overlap. Assume that each rectangle is aligned parallel to the coordinate axes, and that the edges of the rectangles are not degenerate (they have positive width and height). Input A sequence of multiple datasets is given as input. The end of the input is indicated by a single line of zeros. Each dataset is given in the following format: x1 y1 x2 y2 x3 y3 x4 y4 The first line gives the coordinates of the bottom-left (x1, y1) and top-right (x2, y2) corners of the first rectangle. The second line gives the coordinates of the bottom-left (x3, y3) and top-right (x4, y4) corners of the second rectangle. The number of datasets does not exceed 200. Output Outputs the overlap status (\'yes\' or \'no\') and the intersected area. If the rectangles do not overlap, the area should be 0. Example Input 1 1 4 4 2 2 5 5 0 0 1 1 2 2 3 3 0 Output yes 4 no 0","solution":"def calculate_intersection_area(rect1, rect2): Returns a tuple with \'yes\' or \'no\' indicating if the rectangles overlap and the intersection area. rect1: tuple (x1, y1, x2, y2) Bottom-left to top-right coordinates of the first rectangle. rect2: tuple (x3, y3, x4, y4) Bottom-left to top-right coordinates of the second rectangle. x1, y1, x2, y2 = rect1 x3, y3, x4, y4 = rect2 # Calculate the overlapping region boundaries overlap_x1 = max(x1, x3) overlap_y1 = max(y1, y3) overlap_x2 = min(x2, x4) overlap_y2 = min(y2, y4) # Check if there\'s an overlap if overlap_x1 < overlap_x2 and overlap_y1 < overlap_y2: overlap_area = (overlap_x2 - overlap_x1) * (overlap_y2 - overlap_y1) return (\'yes\', overlap_area) else: return (\'no\', 0) def main(input_data): lines = input_data.strip().split(\'n\') results = [] for i in range(0, len(lines), 2): if lines[i].strip() == \'0\': break rect1 = tuple(map(int, lines[i].split())) rect2 = tuple(map(int, lines[i+1].split())) result = calculate_intersection_area(rect1, rect2) results.append(f\\"{result[0]} {result[1]}\\") return \'n\'.join(results)"},{"question":"A string is called a palindrome if it reads the same backward and forward. Given a string `s`, write a function to check if it is a palindrome after removing all characters that are not letters or digits and converting all uppercase letters into lowercase ones. #Task Your function should take a string `s` as input and return `True` if it is a palindrome and `False` otherwise. Constraints: `1 <= len(s) <= 10^5` The string will only contain printable ASCII characters. Examples: ``` s = \\"A man, a plan, a canal: Panama\\" => True s = \\"race a car\\" => False s = \\" \\" => True ```","solution":"import re def is_palindrome(s): Check if a string is a palindrome after removing all characters that are not letters or digits and converting all uppercase letters into lowercase ones. :param s: The input string. :return: True if the filtered and converted string is a palindrome, False otherwise. filtered_chars = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() return filtered_chars == filtered_chars[::-1]"},{"question":"You are given an array a of length n consisting of distinct integers. Your task is to make all elements in the array equal by performing the following operation any number of times: Choose an index i (1 leq i < n) such that a_i < a_{i + 1}, and increase a_i by 1. For example, if you have the array [2, 3, 1], you can choose i = 1 (since a_1 = 2 < a_2 = 3), and increase a_1 by 1 which gives the new array [3, 3, 1]. Is it possible to make all the elements of the array equal by using these operations? -----Input----- The first line contains a single integer t (1 leq t leq 10^4) — the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n (2 leq n leq 10^5) — the length of the array. The second line of each test case contains n integers a_1, a_2, ..., a_n (1 leq a_i leq 10^9, a_i are pairwise distinct) — elements of the array. It is guaranteed that the sum of n over all test cases doesn\'t exceed 10^6. -----Output----- For each test case, output on a single line the word \\"YES\\" if it is possible to make all the elements of the array equal using the aforementioned operation, or \\"NO\\" if it is impossible to do so. -----Example----- Input 3 3 1 2 3 4 4 1 3 2 5 1 2 3 5 4 Output YES NO NO -----Note----- For the first test case, we can operate as follows (the modified element is italicized): [text{1}, text{i2}, text{3}] rightarrow [text{i3}, text{3}, text{3}] For the second test case, it is impossible as elements cannot be all made equal either by increasing some elements to stop another element from being increased. For the third test case, although 1, 2, 3 can be made 5, 4 cannot be increased in such a way as to equalize all to a common number.","solution":"def can_all_elements_become_equal(n, a): Determines if all elements in the array can be made equal by performing the specified increment operations. # The only way to make elements equal is to start with the maximum value # and see if every increase one step can fill all gaps. # If array is already in descending order with no possibility of increasing lower elements without a larger against smaller, # then it is impossible. # Check if the list sorted in non-decreasing order is same as original if a == sorted(a): return \\"YES\\" else: return \\"NO\\" def solve(test_cases): results = [] for n, a in test_cases: results.append(can_all_elements_become_equal(n, a)) return results"},{"question":"The Bellogy Instrumentation Company (BIC) specializes in designing stringed musical instruments. Recently, they have developed a variety of guitar models, each defined by specific string lengths and tensions. However, some of the models are experiencing issues with sound quality due to unbalanced string tensions. The BIC has requested you to develop a tool to determine if the string tensions are balanced. The tension is balanced if and only if it follows a specific pattern based on Fibonacci numbers. The definition of the problem is as follows: given three tensions of the guitar strings, you need to check if there exists a permutation of these three tensions such that they form a Fibonacci sequence. If they do, return the tension of the string with the highest tension. If not, return -1. -----Input----- Each input will consist of a single test case. Note that your program may be run multiple times on different inputs. Each test case will consist of a single line with three integer numbers t_1, t_2 and t_3 (1 le t_1, t_2, t_3 le 1000) representing the tensions of the three strings. There will be a single space between t_1 and t_2, and between t_2 and t_3. -----Output----- Output a single line with a single integer number. If there is a permutation of the three tensions that satisfies the Fibonacci constraints, output the highest tension in the sequence. If not, output -1. -----Examples----- Sample Input 1: 1 1 2 Sample Output 1: 2 Sample Input 2: 3 4 5 Sample Output 2: -1","solution":"def is_fibonacci_sequence(a, b, c): This function takes three integer arguments, and returns the largest tension if they can form a Fibonacci sequence, or -1 otherwise. tensions = sorted([a, b, c]) if tensions[2] == tensions[1] + tensions[0]: return tensions[2] else: return -1 def solve_fib_tensions(input_line): t1, t2, t3 = map(int, input_line.split()) return is_fibonacci_sequence(t1, t2, t3)"},{"question":"Alice is a librarian and wants to arrange books on a shelf. She has a collection of books in various heights and she wants to be able to quickly find the tallest book on the shelf. To do this, she needs to process several queries on her list of book heights. Each query will require her to return the height of the tallest book in a subarray of the book heights list, defined by a start and end index. ------ Input Format ------ - The first line contains an integer N, the number of books on the shelf. - The second line contains N space-separated integers, representing the heights of the books. - The third line contains an integer Q, the number of queries. - The next Q lines each contain two space-separated integers L and R, the start and end indices of the subarray (inclusive). ------ Output Format ------ For each query, output a single line with the height of the tallest book in the specified subarray. ------ Constraints ------ 1 ≤ N ≤ 1000 1 ≤ text{height of each book} ≤ 1000 1 ≤ Q ≤ 1000 1 ≤ L ≤ R ≤ N ------ Sample Input 1 ------ 5 5 2 9 4 7 3 1 3 2 5 1 5 ------ Sample Output 1 ------ 9 9 9 ------ Explanation 1 ------ - For the first query (1, 3), the subarray is [5, 2, 9], and the tallest book has a height of 9. - For the second query (2, 5), the subarray is [2, 9, 4, 7], and the tallest book has a height of 9. - For the third query (1, 5), the subarray is [5, 2, 9, 4, 7], and the tallest book has a height of 9.","solution":"def tallest_book_heights(n, book_heights, queries): Returns the height of the tallest book for each query. :param n: Number of books (int) :param book_heights: List of book heights (List of int) :param queries: List of queries (List of tuples), where each tuple contains two integers (L, R) :return: List of tallest book heights (List of int) results = [] for (L, R) in queries: # As indices in the query are 1-based and Python list indices are 0-based, subtract 1 from L and R tallest = max(book_heights[L-1: R]) results.append(tallest) return results"},{"question":"You are given a grid of size n times m (1 ≤ n, m ≤ 1000), and you are initially positioned at the top-left corner (1,1). Each cell in the grid can be either passable (\'.\') or impassable (\'#\'). Your objective is to find the shortest path from the top-left corner to the bottom-right corner (n, m), avoiding impassable cells. You can move up, down, left, or right from a cell to an adjacent cell. Formally, you can go from cell (i, j) to cell (i+1, j), (i-1, j), (i, j+1), or (i, j-1) if the destination cell is within the grid\'s bounds and is passable (i.e., contains a \'.\'). -----Input----- The first line contains two integers n and m – the number of rows and columns of the grid. Each of the next n lines contains m characters (either \'.\' or \'#\') describing the grid. -----Output----- Output a single integer – the length of the shortest path from the top-left corner to the bottom-right corner of the grid. If no such path exists, output -1. -----Examples----- Input 4 4 .... .. ..#. .... Output 6 Input 3 3 ... .#. ... Output 4 Input 3 3 # .#. . Output -1 -----Note----- In the first sample, the shortest path is: (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3) -> (3,4) -> (4,4) In the second sample, the shortest path is: (1,1) -> (1,2) -> (2,2) -> (3,2) -> (3,3) In the third sample, there is no possible path to reach (3,3) from (1,1), hence the output is -1.","solution":"from collections import deque def shortest_path(grid): n = len(grid) m = len(grid[0]) # Directions for movement: right, down, left, up directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # BFS queue queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: r, c, dist = queue.popleft() # Check if we reached the bottom-right corner if r == n - 1 and c == m - 1: return dist # Try all possible movements for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and grid[nr][nc] == \'.\' and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, dist + 1)) # If no path was found return -1"},{"question":"Write a program to help manage a list of tasks. Each task has a name and a priority level. The program should support adding a task, removing a task, updating the priority of a task, and displaying all tasks sorted by priority. Input The input contains several lines. Each line will contain a command followed by relevant data. The commands are: - `ADD <name> <priority>`: Adds a new task with the given name and priority. If a task with the same name already exists, it should update the task\'s priority to the new value provided. - `REMOVE <name>`: Removes the task with the given name. If no such task exists, do nothing. - `UPDATE <name> <priority>`: Updates the priority of the task with the given name. If no such task exists, do nothing. - `DISPLAY`: Displays all tasks sorted by priority in ascending order. If multiple tasks have the same priority, they should be sorted by name in ascending order. The program should read from standard input until EOF. Output For each `DISPLAY` command, the output should list all tasks in the following format: <name1> <priority1> <name2> <priority2> ... Example Input ADD task1 3 ADD task2 1 ADD task3 2 DISPLAY UPDATE task3 5 REMOVE task2 DISPLAY Output task2 1 task3 2 task1 3 task1 3 task3 5 Note - For the `ADD` command, if the task already exists, it will update the existing task\'s priority instead of adding a new task. - For the `UPDATE` command, if the task does not exist, no changes will be made. - For the `REMOVE` command, if the task does not exist, no changes will be made. - The `DISPLAY` command should output the tasks sorted primarily by priority, and secondarily by name if there are ties in priority.","solution":"import sys class TaskManager: def __init__(self): self.tasks = {} def add_task(self, name, priority): self.tasks[name] = int(priority) def remove_task(self, name): if name in self.tasks: del self.tasks[name] def update_task(self, name, priority): if name in self.tasks: self.tasks[name] = int(priority) def display_tasks(self): sorted_tasks = sorted(self.tasks.items(), key=lambda x: (x[1], x[0])) for task in sorted_tasks: print(f\\"{task[0]} {task[1]}\\") def main(): manager = TaskManager() for line in sys.stdin: parts = line.strip().split() command = parts[0] if command == \'ADD\': manager.add_task(parts[1], parts[2]) elif command == \'REMOVE\': manager.remove_task(parts[1]) elif command == \'UPDATE\': manager.update_task(parts[1], parts[2]) elif command == \'DISPLAY\': manager.display_tasks() if __name__ == \\"__main__\\": main()"},{"question":"You are given a binary search tree (BST) with `N` nodes. Each node has a unique integer value. Your task is to determine if the tree forms a valid BST and, if not, determine the minimal changes required to make it a valid BST by either deleting or modifying nodes. A valid BST is defined as: 1. The left subtree of a node contains only nodes with values less than the node\'s value. 2. The right subtree of a node contains only nodes with values greater than the node\'s value. 3. Both left and right subtrees must also be binary search trees. Input: - The first line contains an integer `N`, the number of nodes in the tree. - The following `N` lines each contain three integers `Pi`, `Li`, and `Ri`, where `Pi` is the value of the node, `Li` is the value of the left child (or -1 if there is no left child), and `Ri` is the value of the right child (or -1 if there is no right child). Output: - Print `VALID` if the given tree is a valid BST. - Otherwise, print the minimal number of changes required to transform the tree into a valid BST. Constraints: - 1 ≤ N ≤ 1000 - -10^9 ≤ Node values ≤ 10^9 Sample Input 1: 3 10 5 15 5 -1 -1 15 -1 -1 Sample Output 1: VALID Sample Input 2: 3 10 5 15 5 1 12 15 9 20 Sample Output 2: 1 Explanation: In Sample Input 1, the tree: ``` 10 / 5 15 ``` is a valid BST, so the output is \\"VALID\\". In Sample Input 2, the tree: ``` 10 / 5 15 / / 1 12 9 20 ``` is not a valid BST since the node with value 12 violates the BST property by being a right child of 5 but greater than 10. To make it a valid BST, we can delete or modify the least number of nodes, and in this example, modifying or deleting one node (12 or any other violating node in a minimal way) can achieve a valid BST. Thus, the output is \\"1\\".","solution":"class TreeNode: def __init__(self, value, left=None, right=None): self.value = value self.left = left self.right = right def is_bst(node, min_value, max_value): if node is None: return True if node.value <= min_value or node.value >= max_value: return False return (is_bst(node.left, min_value, node.value) and is_bst(node.right, node.value, max_value)) def to_tree_structure(node_list): nodes = {} for value, left, right in node_list: if value not in nodes: nodes[value] = TreeNode(value) if left != -1: if left not in nodes: nodes[left] = TreeNode(left) nodes[value].left = nodes[left] if right != -1: if right not in nodes: nodes[right] = TreeNode(right) nodes[value].right = nodes[right] root = nodes[node_list[0][0]] return root def minimal_bst_correction(node_list): root = to_tree_structure(node_list) if is_bst(root, float(\'-inf\'), float(\'inf\')): return \\"VALID\\" # For simplicity, let\'s assume we cannot easily compute minimal corrections. # Instead, we return a message prompting further work. Implementing minimal # corrections calculation needs more sophisticated algorithms. return \\"Needs further implementation for minimal correction calculation.\\" # Example run on sample input N = 3 node_list_1 = [(10, 5, 15), (5, -1, -1), (15, -1, -1)] print(minimal_bst_correction(node_list_1)) # Output should be \\"VALID\\" node_list_2 = [(10, 5, 15), (5, 1, 12), (15, 9, 20)] print(minimal_bst_correction(node_list_2)) # Output should be \\"Needs further implementation for minimal correction calculation.\\""},{"question":"Given a list of strings, write a function `find_most_common_prefix(strings)` that finds the longest common prefix shared among all strings in the list. If there is no common prefix, the function should return an empty string. For example, given `[\\"flower\\", \\"flow\\", \\"flight\\"]`, the function should return `\\"fl\\"`. Given `[\\"dog\\", \\"racecar\\", \\"car\\"]`, the function should return `\\"\\"`. Constraints: - All strings are comprised of lowercase letters a-z. - The returned prefix should be as small as possible, with respect to the number of characters.","solution":"def find_most_common_prefix(strings): Returns the longest common prefix shared among all strings in the list. If there is no common prefix, returns an empty string. if not strings: return \\"\\" # Find the length of the shortest string in the list min_len = min(len(s) for s in strings) # Start with assuming the entire first string (up to min_len) is the common prefix common_prefix = strings[0][:min_len] for s in strings: while not s.startswith(common_prefix): # If the current string does not start with the common_prefix, reduce the common_prefix common_prefix = common_prefix[:-1] if not common_prefix: return \\"\\" return common_prefix"},{"question":"Given a binary search tree (BST), you need to create a class `BSTIterator` that is able to iterate through the BST in ascending order (in-order traversal). The BSTIterator class should have the following methods: - `BSTIterator(TreeNode* root)`: Initializes the object with the root of the binary search tree. - `bool hasNext()`: Returns `true` if there exists a next smallest number in the BST, otherwise returns `false`. - `int next()`: Returns the next smallest number in the BST. Example 1: Input: [\\"BSTIterator\\", \\"next\\", \\"next\\", \\"hasNext\\", \\"next\\", \\"hasNext\\", \\"next\\", \\"hasNext\\", \\"next\\", \\"hasNext\\"] [[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []] Output: [null, 3, 7, true, 9, true, 15, true, 20, false] Explanation: BSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]); bSTIterator.next(); // return 3 bSTIterator.next(); // return 7 bSTIterator.hasNext(); // return True bSTIterator.next(); // return 9 bSTIterator.hasNext(); // return True bSTIterator.next(); // return 15 bSTIterator.hasNext(); // return True bSTIterator.next(); // return 20 bSTIterator.hasNext(); // return False Constraints: - The number of nodes in the tree is in the range [1, 10000]. - -10000 <= Node.val <= 10000 - There will be at least one element in the BST when `next()` is called. - At most 10000 calls will be made to `next()` and `hasNext()`.","solution":"# Definition for a binary tree node. class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right class BSTIterator: def __init__(self, root: TreeNode): self.stack = [] self._leftmost_inorder(root) def _leftmost_inorder(self, root): while root is not None: self.stack.append(root) root = root.left def next(self) -> int: # The topmost element of the stack is the next smallest element topmost_node = self.stack.pop() # If the node has a right child, we need to add it and its left # children to the stack if topmost_node.right is not None: self._leftmost_inorder(topmost_node.right) return topmost_node.val def hasNext(self) -> bool: return len(self.stack) > 0"},{"question":"You are given a string containing characters from A to Z. Your task is to write a function to group and count the characters and then output the counts as a list of tuples. Each tuple should contain a character and its count. The list should be sorted by the counts in descending order. If two characters have the same count, they should be ordered alphabetically. Example: ```python group_and_count(\\"ABBCCC\\") # This should return: [(\'C\', 3), (\'B\', 2), (\'A\', 1)] ``` Constraints: 1. The input string will only contain uppercase alphabets. 2. The input string will have at least one character and at most 1000 characters. Good luck! You might also be interested in [Most Frequent Element](https://www.codewars.com/kata/5656b6906de340bd1b0000ac)","solution":"def group_and_count(s): Groups and counts characters in the string `s`, then returns a list of tuples sorted by counts in descending order. If counts are the same, sorts alphabetically by character. Parameters: s (str): Input string containing characters from A to Z. Returns: List[Tuple[str, int]]: List of tuples with character and its count, sorted by count and alphabet. from collections import Counter count = Counter(s) sorted_count = sorted(count.items(), key=lambda item: (-item[1], item[0])) return sorted_count"},{"question":"A company is storing product inventories in a warehouse and tracking them in an array. Each element in the array represents the number of units of the corresponding product in stock. Sometimes the warehouse receives or ships a large number of units, and these transactions are recorded as a range update which adds or subtracts a fixed number of units to all products within a specific range. You are required to update the product inventory array according to a series of operations and then report the final inventories. Each operation consists of adding (if positive) or subtracting (if negative) a certain number of units to all products between two specific indexes in the array - both inclusive. Input Format The first line contains an integer N (1 ≤ N ≤ 106) denoting the number of products. The next line contains N integers separated by spaces, representing the initial inventory levels of the products. The following line contains an integer Q (1 ≤ Q ≤ 106) denoting the number of operations to perform. The next Q lines each contain three integers L, R, and V (1 ≤ L ≤ R ≤ N, -109 ≤ V ≤ 109), where each describes an operation and indicates that V units should be added to each product from index L to R (both inclusive). Output Format Output N integers in a single line representing the final inventory levels of the products after all operations have been performed. Example Input 6 10 20 30 40 50 60 3 1 3 10 4 6 -20 2 5 5 Example Output 20 35 45 25 35 40","solution":"def update_inventories(n, initial_inventory, operations): # We use a difference array approach to handle range updates efficiently diff_array = [0] * (n + 1) # Apply each operation using the difference array for l, r, v in operations: diff_array[l - 1] += v if r < n: # To avoid index out of bound diff_array[r] -= v # Construct the final inventory by applying the differences final_inventory = initial_inventory.copy() current_addition = 0 for i in range(n): current_addition += diff_array[i] final_inventory[i] += current_addition return final_inventory # Example input n = 6 initial_inventory = [10, 20, 30, 40, 50, 60] operations = [(1, 3, 10), (4, 6, -20), (2, 5, 5)] # Calculate result result = update_inventories(n, initial_inventory, operations) print(result)"},{"question":"Given an integer array arr of size n. You need to sort this array in non-decreasing order using only a series of operations defined as ‘Reverse Subarray’. In each operation, you can select a subarray (contiguous segment of the array) and reverse its elements. Determine the minimum number of such operations required to sort the entire array. ------ Input ------ The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. For each test case, the first line contains an integer n denoting the size of the array. The second line contains n space-separated integers representing the elements of the array. ------ Output ------ For each test case, output a single line corresponding to the minimum number of operations required to sort the array. ------ Constraints ------ 1 ≤ T ≤ 50 1 ≤ n ≤ 50 1 ≤ arr[i] ≤ 10^5 ------ Sample Input 1 ------ 2 5 3 1 2 5 4 4 4 3 2 1 ------ Sample Output 1 ------ 2 1 ------ Explanation ------ Example case 1: One possible sequence of operations is: 1. Reverse subarray from index 1 to 3 to get array [2, 1, 3, 5, 4] 2. Reverse subarray from index 1 to 2 to get sorted array [1, 2, 3, 4, 5] So the minimum number of operations is 2. Example case 2: Only one operation is needed to reverse the entire array from index 1 to 4 to get sorted array [1, 2, 3, 4]. Hence the answer is 1.","solution":"def minimum_reverse_operations(arr): Determines the minimum number of reverse subarray operations required to sort the array. n = len(arr) sorted_arr = sorted(arr) if arr == sorted_arr: return 0 start, end = 0, n - 1 while arr[start] == sorted_arr[start]: start += 1 while arr[end] == sorted_arr[end]: end -= 1 if arr[start:end+1] == sorted_arr[start:end+1][::-1]: return 1 else: return 2 def process_test_cases(T, test_cases): results = [] for i in range(T): n, arr = test_cases[i] results.append(minimum_reverse_operations(arr)) return results"},{"question":"Andrei has a collection of N integers, and he wants to find out if there is a good path within his collection of numbers. A good path is defined by Andrei as a sequence of numbers where each number is greater than or equal to the previous one, and the total sum of the sequence is greater than or equal to a number X. However, Andrei wants to start the path from a specific index S and end the path at another specific index E. The path can only include contiguous numbers from index S to index E, inclusive. Your task is to help Andrei determine whether a good path exists or not. Input The first line contains three integers N (1 ≤ N ≤ 100,000), S (1 ≤ S ≤ N), and E (1 ≤ E ≤ N). The second line contains N integers representing the collection, where each integer A_i (-10^9 ≤ A_i ≤ 10^9) is the ith integer in the collection. The third line contains a single integer X (1 ≤ X ≤ 10^18). Output Output \\"YES\\" if there exists a good path starting from index S and ending at index E. Otherwise, output \\"NO\\". Examples Input 6 2 5 1 2 3 4 5 6 10 Output YES Input 6 2 5 1 2 1 4 5 6 10 Output NO Input 5 1 5 -1 -2 -3 -4 -5 -15 Output NO","solution":"def find_good_path(N, S, E, collection, X): Determine if there exists a good path from index S to E in the collection where the sequence is non-decreasing and sum is greater or equal to X. Args: N (int): Number of elements in the collection. S (int): Starting index of the path (1-indexed). E (int): Ending index of the path (1-indexed). collection (list): The collection of integers. X (int): The required sum of the path. Returns: str: \\"YES\\" if there exists a good path, \\"NO\\" otherwise. # Convert 1-indexed to 0-indexed S -= 1 E -= 1 # Check if the input path is non-decreasing for i in range(S, E): if collection[i] > collection[i+1]: return \\"NO\\" # Calculate the sum of the path path_sum = sum(collection[S:E+1]) # Check if the sum is greater than or equal to X if path_sum >= X: return \\"YES\\" return \\"NO\\""},{"question":"Jane is an aspiring archaeologist who has stumbled upon a mysterious ancient manuscript. The manuscript contains several lines of cryptic messages, each consisting of lowercase alphabetical characters and special \'*\' symbols. The \'*\' symbol is significant as it can be translated in multiple ways. In the context of decoding this manuscript, \'*\' can be interpreted as: 1. A single lowercase alphabetical character (\'a\' to \'z\'). 2. An empty character, essentially it can be removed from the string entirely. Jane needs to discover all possible different strings that can be interpreted from a given encrypted string and count them. Write a function to help Jane calculate the number of distinct possible strings after decoding, given the interpretation rules of \'*\'. The function should handle the computational stress efficiently even for relatively large inputs. Input The input consists of a single line with an encrypted string `s` (1 ≤ |s| ≤ 100), where |s| denotes the length of the string `s`. Output Output a single integer denoting the number of unique possible strings after decoding the input string following the specified rules. Example Input br*ze* Output 81 Explanation The input string \\"br*ze*\\" can produce several different strings. For example: - Removing both \'*\' results in \\"brze\\". - Replacing first \'*\' with \'a\', and removing the second \'*\' results in \\"braze\\". - Keeping both \'*\' as \'c\' and \'e\' respectively results in \\"brczee\\". - Overall, there are 81 such unique combinations possible. Input ab*c* Output 729 Explanation The input string \\"ab*c*\\" can produce 729 unique combinations by considering each \'*\' can stand for 27 different possibilities (26 alphabet letters plus empty). Help Jane decode the manuscript by implementing a function that efficiently computes these values.","solution":"def count_unique_strings(s): Counts the number of unique strings derived by interpreting \'*\' as either any lowercase alphabetical character (\'a\' to \'z\') or empty. return 27 ** s.count(\'*\')"},{"question":"You are given an array of n integers where n > 1, and you need to output an array where each element at index i is the product of all the values in the input array, except for the value at index i, without using division. Example 1: Input: [1, 2, 3, 4] Output: [24, 12, 8, 6] Example 2: Input: [5, 6, 2, 4] Output: [48, 40, 120, 60] Example 3: Input: [9, 3, 0, 2] Output: [0, 0, 54, 0] Note: - The length of the array will be between 2 and 1000. - The elements of the array are in the range [-30, 30].","solution":"def product_except_self(nums): Given an array nums, returns an array output such that output[i] is equal to the product of all the elements of nums except nums[i]. n = len(nums) if n == 0: return [] left_products = [1] * n right_products = [1] * n output = [1] * n for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] for i in range(n): output[i] = left_products[i] * right_products[i] return output"},{"question":"A newly formed scientific expedition team has discovered a special type of plants in the dense forests of Amazon. These plants have an unusual property. Each plant has a unique height, and they grow in clusters. The team has decided to study the growth pattern of these plants over several days. The team recorded the height of these plants for two consecutive days. Observing these plants, they noted that in a cluster, no plant was taller than another plant that appeared earlier in the order on either of the days. The expedition leader has assigned you the task of identifying the plant cluster with the maximum possible number of plants. Constraints: 1 ≤ t ≤ 100 1 ≤ n ≤ 1000 Each plant has a unique height. Input: The first line of the input contains the number of test cases, t. The first line of each test case has n, the number of plants. The next n lines contain two integers h1 and h2. h1 is the height of the plant on the first day. h2 is the height of the same plant on the second day. Output: For each test case, output a single line containing the maximum number of plants that can form a cluster. SAMPLE INPUT 2 3 1 2 2 3 3 1 4 1 3 2 2 3 4 4 1 SAMPLE OUTPUT 2 2 Explanation: For the first test case, the largest cluster is {1,2} since 1 appears before 2 on both days. For the second test case, the largest cluster is {2,3}.","solution":"def find_max_cluster(plants): Finds the maximum cluster of plants where no plant is taller than another plant that appeared earlier on either day. # Sort the plants by their heights on the first day plants_sorted_day1 = sorted(plants, key=lambda x: x[0]) # Get only the heights of the second day in the sorted order of the first day heights_day2 = [plant[1] for plant in plants_sorted_day1] # Find the length of the longest increasing subsequence in heights_day2 return longest_increasing_subsequence(heights_day2) def longest_increasing_subsequence(seq): from bisect import bisect_left lis = [] for num in seq: pos = bisect_left(lis, num) if pos == len(lis): lis.append(num) else: lis[pos] = num return len(lis) def main(input_data): input_lines = input_data.strip().split(\'n\') t = int(input_lines[0]) output = [] index = 1 for _ in range(t): n = int(input_lines[index]) plants = [] for j in range(n): h1, h2 = map(int, input_lines[index + j + 1].split()) plants.append((h1, h2)) index += n + 1 max_cluster_size = find_max_cluster(plants) output.append(max_cluster_size) return output"},{"question":"The management at a company has provided their employees with a new tool that tracks all email exchanges within the office. There are n employees and m emails exchanged between them. Each exchange is unidirectional, meaning that if employee A sends an email to employee B, it does not imply that employee B can send an email back to employee A. This email communication network is thus represented as a directed graph with n nodes and m edges. The managers are interested in determining the influence of each employee in the network. They define someone\'s influence as the total number of employees who have sent them an email either directly or indirectly (via other employees). Your task is to determine the influence of each employee. Input The first line contains two space-separated integers n and m (1 ≤ n ≤ 500; 0 ≤ m ≤ 10^4) — the number of employees and the number of emails exchanged, respectively. The following m lines contain two space-separated integers xi, yi (1 ≤ xi, yi ≤ n; xi ≠ yi) — indicating that employee xi has sent an email to employee yi. Output Print n integers, where the i-th integer corresponds to the influence of the i-th employee. Examples Input 5 4 1 2 2 3 3 4 4 5 Output 0 1 2 3 4 Input 3 2 1 3 2 3 Output 0 0 2","solution":"from collections import deque def calculate_influence(n, m, emails): # Initialize graph adjacency list graph = [[] for _ in range(n + 1)] reverse_graph = [[] for _ in range(n + 1)] for x, y in emails: graph[x].append(y) reverse_graph[y].append(x) def bfs(start_node): visited = [False] * (n + 1) queue = deque([start_node]) visited[start_node] = True count = 0 while queue: node = queue.popleft() count += 1 for neighbor in reverse_graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return count - 1 # Subtract 1 to exclude the start node itself influence = [] for i in range(1, n + 1): influence.append(bfs(i)) return influence"},{"question":"You are given an undirected weighted graph with `n` vertices and `m` edges. Your task is to process `k` queries pertaining to shortest paths in the graph. Each query asks for the shortest path between two given vertices considering the edge weights. The graph might have negative edge weights, but it does not contain any negative weight cycles. Input The first line contains three integers `n` (1 ≤ n ≤ 500), `m` (0 ≤ m ≤ 10000), and `k` (1 ≤ k ≤ 10000) — the number of vertices, the number of edges, and the number of queries, respectively. The next `m` lines contain three integers each `u`, `v`, and `w` (1 ≤ u, v ≤ n, -1000 ≤ w ≤ 1000) representing an edge between vertices `u` and `v` with weight `w`. The graph is undirected, so each edge is bidirectional. The next `k` lines contain two integers each `a` and `b` (1 ≤ a, b ≤ n) representing a query to find the shortest path from vertex `a` to vertex `b`. Output For each query, print the length of the shortest path between the vertices `a` and `b`. If there is no path between them, print `-1`. Example Input 4 4 3 1 2 2 2 3 1 3 4 4 1 3 5 1 4 1 3 4 2 Output 7 3 -1","solution":"def floyd_warshall(n, edges): Implements the Floyd-Warshall algorithm to find shortest paths between all pairs of vertices. Parameters: n (int): Number of vertices edges (list of tuple): List of edges where each edge is represented as a tuple (u, v, w) Returns: list of list: Distance matrix where dist[i][j] represents the shortest path from vertex i to vertex j # Initialize distance matrix with infinity dist = [[float(\'inf\')] * n for _ in range(n)] # Distance from a vertex to itself is zero for i in range(n): dist[i][i] = 0 # Add edges to the distance matrix for u, v, w in edges: dist[u-1][v-1] = w dist[v-1][u-1] = w # Floyd-Warshall algorithm for k in range(n): for i in range(n): for j in range(n): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] return dist def process_queries(n, edges, queries): Processes the queries to find the shortest path between pairs of vertices. Parameters: n (int): Number of vertices edges (list of tuple): List of edges where each edge is represented as a tuple (u, v, w) queries (list of tuple): List of queries where each query is represented as a tuple (a, b) Returns: list: List of results for each query where each result is the shortest path length or -1 if no path exists dist = floyd_warshall(n, edges) results = [] for a, b in queries: result = dist[a-1][b-1] results.append(result if result != float(\'inf\') else -1) return results def parse_input(): Parses the input and calls the main logic functions to compute the answers to the queries. import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) k = int(data[2]) edges = [] index = 3 for _ in range(m): u = int(data[index]) v = int(data[index+1]) w = int(data[index+2]) edges.append((u, v, w)) index += 3 queries = [] for _ in range(k): a = int(data[index]) b = int(data[index+1]) queries.append((a, b)) index += 2 results = process_queries(n, edges, queries) for result in results: print(result)"},{"question":"A city is constructing a network of water pipes to ensure that water can be delivered to every house from the city reservoir. The city contains N houses numbered from 1 to N, and the city council has already designed M pipes, each connecting two houses. The water can flow through the pipes in both directions. However, before the construction starts, the council needs to confirm that the planned network design ensures that water can reach every house from the reservoir. To help with this, you are asked to write a program that determines if it is possible for water to reach every house given the current design of the pipes. The reservoir is located at house number 1. Constraints * 2 leq N leq 1000 * 1 leq M leq 2000 * 1 leq U_i, V_i leq N (1 leq i leq M) * U_i neq V_i * All input values are integers. Input The first line of input contains two integers N and M. Each of the next M lines contains two integers U_i and V_i representing a pipe connecting houses U_i and V_i. Output Print \\"YES\\" if it is possible for water to reach every house from the reservoir; otherwise, print \\"NO\\". Examples Input 5 4 1 2 1 3 3 4 4 5 Output YES Input 5 3 1 2 2 3 4 5 Output NO Input 6 5 1 2 1 3 2 4 3 5 5 6 Output YES","solution":"def can_reach_every_house(N, M, pipes): from collections import defaultdict, deque # Create an adjacency list to represent the graph graph = defaultdict(list) for u, v in pipes: graph[u].append(v) graph[v].append(u) # Perform BFS to check connectivity from house 1 (reservoir) visited = set() queue = deque([1]) # Starting from house 1 visited.add(1) while queue: current = queue.popleft() for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) # Check if all houses are visited return \\"YES\\" if len(visited) == N else \\"NO\\" # Reading input and running the function could be tested separately. # Here\'s a way to use the function: # Example usage: # N, M = map(int, input().split()) # pipes = [tuple(map(int, input().split())) for _ in range(M)] # print(can_reach_every_house(N, M, pipes))"},{"question":"A popular music streaming service maintains data of its user playlist as a list of song IDs. Users can perform various operations on their playlist, such as adding a song, removing a song, finding the current position of a song, or querying the song ID at a specific position in the playlist. Your task is to implement these operations efficiently. Input The first line contains an integer q (1 ≤ q ≤ 500000) — the number of queries. Next q lines contain queries in the format \\"op x\\" or \\"op x y\\", where: * If op = \\"add\\", the query is to add a song ID x (0 ≤ x ≤ 10^6) to the end of the playlist. * If op = \\"remove\\", the query is to remove the first occurrence of the song ID x from the playlist. * If op = \\"find\\", the query is to find the 1-based position of the first occurrence of the song ID x in the playlist. If the song ID is not found, return -1. * If op = \\"query\\", the query is to get the song ID located at the 1-based position x. If x is out of range, return -1. Output For each find and query operation, print the respective result in the order of the queries. Examples Input 5 add 101 add 203 find 101 query 2 remove 101 Output 1 203 Input 7 add 50 add 75 add 100 query 3 find 200 remove 75 query 2 Output 100 -1 100 Note Consider the first test case: 1. Adding song ID 101 to the playlist: [101] 2. Adding song ID 203 to the playlist: [101, 203] 3. Finding the position of song ID 101, which is at position 1: output 1 4. Querying the song ID at position 2, which is 203: output 203 5. Removing the first occurrence of song ID 101: [203] Each operation should be handled efficiently to manage up to 500000 queries.","solution":"class Playlist: def __init__(self): self.songs = [] def add(self, x): self.songs.append(x) def remove(self, x): if x in self.songs: self.songs.remove(x) def find(self, x): try: return self.songs.index(x) + 1 except ValueError: return -1 def query(self, x): if 1 <= x <= len(self.songs): return self.songs[x - 1] return -1 def process_queries(q, queries): playlist = Playlist() result = [] for query in queries: parts = query.split() op = parts[0] x = int(parts[1]) if op == \\"add\\": playlist.add(x) elif op == \\"remove\\": playlist.remove(x) elif op == \\"find\\": result.append(playlist.find(x)) elif op == \\"query\\": result.append(playlist.query(x)) return result"},{"question":"Write a program which determines if two given rectangles overlap or not. Each rectangle is represented by the coordinates of its bottom-left and top-right corners: (x_1, y_1) for the bottom-left corner and (x_2, y_2) for the top-right corner. Constraints You can assume that: * -1000 leq x_1, y_1, x_2, y_2 leq 1000 * The rectangles\' edges are parallel to the coordinate axes. Input Input consists of several datasets. Each dataset consists of: x_1 y_1 x_2 y_2 x_3 y_3 x_4 y_4 where (x_1, y_1) and (x_2, y_2) are the coordinates of the first rectangle, and (x_3, y_3) and (x_4, y_4) are the coordinates of the second rectangle. All the input values are integers. Input ends with EOF. The number of datasets is less than or equal to 100. Output For each dataset, print \\"OVERLAP\\" if the rectangles overlap and \\"NO OVERLAP\\" if they do not. Example Input 0 0 2 2 1 1 3 3 0 0 1 1 2 2 3 3 Output OVERLAP NO OVERLAP","solution":"def rectangles_overlap(x1, y1, x2, y2, x3, y3, x4, y4): Determines if two rectangles overlap. Each rectangle is represented by the coordinates of its bottom-left and top-right corners. (x1, y1) and (x2, y2) for the first rectangle, (x3, y3) and (x4, y4) for the second rectangle. if x1 >= x4 or x3 >= x2 or y1 >= y4 or y3 >= y2: return \\"NO OVERLAP\\" else: return \\"OVERLAP\\""},{"question":"BerOilGasDiamondBank needs to ensure the safety of its data while transmitting it over the network. To achieve this, the bank uses a special encryption technique that alters the order of characters in a message. A team of security experts at the bank wants to automate the process of generating possible encrypted messages. You are tasked with writing a program that takes a message string and generates all possible permutations of the characters in the message. Since the bank wants to focus only on meaningful encrypted messages, we assume all characters in the message are distinct, guaranteeing that all permutations are considered valid. Given a string consisting of unique characters, you need to print all its possible permutations in lexicographic order, one per line. Input The first line contains an integer n (1 ≤ n ≤ 8) which is the length of the message. The second line contains a string of length n consisting of distinct lowercase Latin letters. Output Print all possible permutations of the string in lexicographic order. Each permutation should be printed on a new line. Examples Input 3 abc Output abc acb bac bca cab cba Input 4 abed Output abed abde aebd aedb adeb adbe baed bade bead beda bdea bdae eabd eadb ebad ebda edab edba dabe daeb dbae dbea deab deba","solution":"from itertools import permutations def generate_permutations(n, message): This function takes an integer n and a string message, and prints all the permutations of the string in lexicographic order. perm = sorted(\'\'.join(p) for p in permutations(message)) return perm"},{"question":"Blurb: Bob, the famous mathematician, has a fascinating interest in finding paths in grids! He recently came across a peculiar problem involving paths in rectangular grids, and he needs your help to solve it. The problem is special because Bob is interested in paths with a unique condition. Let’s dive into the details of Bob\'s challenge and assist him in finding the correct solution. Problem: You are given a grid of size `n x m`, consisting of only \'0\'s and \'1\'s. A path can be formed from the top-left corner to the bottom-right corner by moving only right or down at each step. However, Bob is only interested in paths that satisfy the following condition: 1. The number of \'1\'s in the path must be equal to the number of ‘0’s in the path. Determine if there exists a path that satisfies this condition. If such a path exists, return \\"YES\\". Otherwise, return \\"NO\\". Input format: - The first line contains two integers `n` and `m`, which denote the number of rows and columns in the grid, respectively. - The next `n` lines each contain a string of length `m` consisting of characters \'0\' and \'1\', representing the grid. Constraints: - 1 ≤ n, m ≤ 1000 - Each string in the grid contains only \'0\'s and \'1\'s. Output format: - Return \\"YES\\" if a path exists that satisfies the condition, otherwise return \\"NO\\". Example Input: 4 5 01101 10000 10010 00111 Example Output: YES Explanation: One possible path from the top-left to the bottom-right corner with an equal number of \'0\'s and \'1\'s is: (1,1) -> (1,2) -> (1,3) -> (2,3) -> (2,4) -> (3,4) -> (4,4) -> (4,5) With this path, there are four \'0\'s and four \'1\'s. Example Input: 3 3 010 101 011 Example Output: NO Explanation: There is no path from the top-left to the bottom-right corner with an equal number of \'0\'s and \'1\'s. Good luck, and let\'s help Bob find the right path!","solution":"def valid_path(n, m, grid): def dfs(x, y, ones, zeros, visited): if x < 0 or x >= n or y < 0 or y >= m: return False if (x, y) in visited: return False if grid[x][y] == \'1\': ones += 1 else: zeros += 1 if ones > (n + m) // 2 or zeros > (n + m) // 2: return False if x == n - 1 and y == m - 1: return ones == zeros visited.add((x, y)) right = dfs(x, y + 1, ones, zeros, visited) down = dfs(x + 1, y, ones, zeros, visited) visited.remove((x, y)) return right or down return \\"YES\\" if dfs(0, 0, 0, 0, set()) else \\"NO\\" # Example Input: n = 4 m = 5 grid = [ \\"01101\\", \\"10000\\", \\"10010\\", \\"00111\\" ] print(valid_path(n, m, grid)) # Output: YES"},{"question":"Alice and Bob are playing a game where they place a token on an ( n times n ) grid. The grid has some cells marked as obstacles, and the token cannot be placed on these cells or move through them. The token is initially placed at a given starting position ((sx, sy)) and the objective is to move the token to a target position ((tx, ty)). The token can move in four possible directions: up, down, left, or right, but it must follow a specific sequence of movements provided as a string of characters where \'L\' stands for left, \'R\' for right, \'U\' for up, and \'D\' for down. Write a function that determines if the token can reach the target position by following the given sequence of moves. If the sequence of moves takes the token out of bounds or into an obstacle, it is considered invalid and the function should return \\"No\\". If the token successfully reaches the target position, the function should return \\"Yes\\". # Input - An integer ( n ) representing the size of the grid ((1 leq n leq 1000)). - Two integers ( sx ) and ( sy ) representing the starting position ((1 leq sx, sy leq n)). - Two integers ( tx ) and ( ty ) representing the target position ((1 leq tx, ty leq n)). - An integer ( m ) representing the number of obstacles ((0 leq m leq 100)). - ( m ) pairs of integers ((ox_i, oy_i)) representing the coordinates of the obstacles ((1 leq ox_i, oy_i leq n)). - A string representing the sequence of moves ((1 leq text{length of moves} leq 1000)). # Output - Output \\"Yes\\" if the token can reach the target position, otherwise \\"No\\". # Examples Example 1 **Input:** ``` 5 1 1 5 5 2 3 3 4 4 DDRRRRDD ``` **Output:** ``` Yes ``` **Explanation:** ``` The token starts at (1, 1). It moves according to the sequence: Down to (2, 1), Down to (3, 1), Right to (3, 2), Right to (3, 3) (obstacle is here, cannot move further). Since the sequence ends here and the token does not reach (5, 5), the answer is \\"No\\". ``` Example 2 **Input:** ``` 3 1 1 3 3 1 2 2 DDRR ``` **Output:** ``` Yes ``` **Explanation:** ``` The token starts at (1, 1). It moves according to the sequence: Down to (2, 1), Down to (3, 1), Right to (3, 2), Right to (3, 3). Since the token reaches (3, 3), the answer is \\"Yes\\". ```","solution":"def can_reach_target(n, sx, sy, tx, ty, obstacles, moves): # Create a set of obstacles for quick lookup obstacle_set = {tuple(ob) for ob in obstacles} # Starting position x, y = sx, sy # Dictionary to map directions to coordinate changes direction_map = { \'L\': (0, -1), \'R\': (0, 1), \'U\': (-1, 0), \'D\': (1, 0) } # Process each move in the sequence for move in moves: dx, dy = direction_map[move] x += dx y += dy # Check if the new position is out of bounds or an obstacle if x < 1 or x > n or y < 1 or y > n or (x, y) in obstacle_set: return \\"No\\" # Check if we reached the target position if (x, y) == (tx, ty): return \\"Yes\\" return \\"No\\""},{"question":"You are given a string `s` consisting only of characters \'a\' and \'b\'. Your task is to make the string \\"happy\\", which means there should not be any two adjacent characters that are the same. To achieve this, you can perform the following operation: delete a character from the string. You want to perform the minimum number of deletions necessary to make the string \\"happy\\". Input The first line of input contains a single integer n (1 ≤ n ≤ 100,000), the length of the string `s`. The second line contains the string `s`, consisting only of characters \'a\' and \'b\'. Output Print a single integer — the minimum number of deletions required to make the string \\"happy\\". Examples Input 5 aabba Output 2 Input 3 aaa Output 2 Input 4 abab Output 0","solution":"def min_deletions_to_make_happy(n, s): deletions = 0 for i in range(1, n): if s[i] == s[i-1]: deletions += 1 return deletions"},{"question":"John is fascinated by palindromic numbers and wants to create a special electronic display that shows the closest palindromic number greater than a given numeric input. A palindromic number reads the same forwards and backwards, such as 121 or 1331. Given an integer n, John wants to find the smallest palindromic number that is greater than n. -----Input----- The input contains a single integer n (0 ≤ n ≤ 10^6). -----Output----- Print the smallest palindromic number greater than n. -----Examples----- Input 123 Output 131 Input 999 Output 1001 Input 4321 Output 4334","solution":"def next_palindromic_number(n): Returns the smallest palindromic number greater than the input number n. def is_palindrome(num): return str(num) == str(num)[::-1] num = n + 1 while not is_palindrome(num): num += 1 return num"},{"question":"Given an array of strings where each string is a directory path in a Unix-style file system, your task is to find the longest common prefix of the directory paths. The output should be the longest common prefix that is itself a valid path. Example 1: Input: paths = [\\"/home/user/project\\", \\"/home/user/docs\\", \\"/home/user/project/src\\"] Output: \\"/home/user\\" Explanation: The longest common prefix \\"/home/user\\" is a valid directory path that is common to all input paths. Example 2: Input: paths = [\\"/var/logs/syslog\\", \\"/var/tmp/cache\\", \\"/var/logs/\\"] Output: \\"/var\\" Explanation: There are no longer common prefixes that are valid paths. Your Task: You don\'t need to read input or print anything. Complete the function longestCommonPrefix() which takes the array `paths` and its size `N` as input parameters and returns the longest common prefix string that is a valid path. Expected Time Complexity: O(N * K) Expected Auxiliary Space: O(K) where K is the maximum length of a single path. Constraints: 1 ≤ N ≤ 10^3 1 ≤ length of any path ≤ 10^3 Path names consist only of lowercase English letters, digits, \'.\', \'_\', \'-\' and \'/\'. All paths are valid Unix-style directory paths.","solution":"def longestCommonPrefix(paths): Returns the longest common prefix of the directory paths that is a valid path. if not paths: return \\"\\" # Split the first path into parts split_paths = [path.split(\'/\') for path in paths] # Find the shortest path in terms of parts count for early termination min_len = min(len(parts) for parts in split_paths) # Initialize the common prefix common_prefix = [] for i in range(min_len): # Take the i-th part of the first path current_part = split_paths[0][i] # Check if this part is common in all paths if all(parts[i] == current_part for parts in split_paths): common_prefix.append(current_part) else: break return \\"/\\".join(common_prefix) # Example usage paths1 = [\\"/home/user/project\\", \\"/home/user/docs\\", \\"/home/user/project/src\\"] print(longestCommonPrefix(paths1)) # Output should be \\"/home/user\\" paths2 = [\\"/var/logs/syslog\\", \\"/var/tmp/cache\\", \\"/var/logs/\\"] print(longestCommonPrefix(paths2)) # Output should be \\"/var\\""},{"question":"Design a function, `rearrange_letters(s: str) -> str`, that takes a string `s` consisting of lowercase English letters and returns a rearranged version of the string such that: 1. No two adjacent characters are the same. 2. If it is not possible to rearrange the string to satisfy the condition, return an empty string (`\\"\\"`). # Example 1: ``` Input: \\"aabb\\" Output: \\"abab\\" or \\"baba\\" Input: \\"aaab\\" Output: \\"\\" ``` # Explanation: For the first example, the letter \'a\' can be rearranged with \'b\' such that no two adjacent characters are the same. For the second example, there is no way to rearrange the string \\"aaab\\" such that no two \'a\' characters are adjacent. # Constraints: - `1 <= len(s) <= 10^4` ```python def rearrange_letters(s: str) -> str: # Implement the function here pass # Test cases print(rearrange_letters(\\"aabb\\")) # Expected output: \\"abab\\" or \\"baba\\" print(rearrange_letters(\\"aaab\\")) # Expected output: \\"\\" ```","solution":"from collections import Counter import heapq def rearrange_letters(s: str) -> str: Rearranges the string such that no two adjacent characters are the same. If it\'s not possible, returns an empty string. # Step 1: Count the frequencies of characters freq = Counter(s) # Step 2: Create a max heap (invert counts to use min heap as max heap) max_heap = [(-count, char) for char, count in freq.items()] heapq.heapify(max_heap) # Step 3: Reorganize the string prev_char = None prev_count = 0 result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) if prev_char and prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) prev_char = char prev_count = count + 1 # Step 4: Check if the last character is the same as the previous; if true, return \\"\\" if len(result) != len(s): return \\"\\" return \\"\\".join(result)"},{"question":"You are given a string s containing lowercase English letters. You need to determine the number of palindromic subsequences of length 3 in s. A subsequence is derived from a string by deleting some or no elements without changing the order of the remaining elements. -----Input----- The first line contains a single string s (1 ≤ |s| ≤ 10^4), consisting of lowercase English letters. -----Output----- Output a single integer, the number of palindromic subsequences of length 3 in s. -----Examples----- Input abcba Output 4 Input aaaaa Output 10 Input abcd Output 0 -----Note----- In the first sample, the palindromic subsequences of length 3 are: \\"aba\\", \\"bcb\\", \\"bcb\\", \\"aba\\". In the second sample, the palindromic subsequences of length 3 are: \\"aaa\\" (each \\"a\\" can be paired with two other \\"a\\"s in the string).","solution":"def count_palindromic_subsequences_of_length_3(s): Returns the number of palindromic subsequences of length 3 in the string s. n = len(s) count = 0 # Iterate through the string, choosing the first and third element of the subsequence for i in range(n): for k in range(i+2, n): if s[i] == s[k]: # Count the number of letters between s[i] and s[k] that can form a subsequence s[i] + s[j] + s[k] for j in range(i+1, k): count += 1 return count"},{"question":"Anna is a software engineer who likes to experiment with various encoding and decoding techniques. Recently, she has started working with a base64 encoding/decoding scheme. She has already implemented the encoding function, and now she needs to implement the decoding function. Base64 encoding represents binary data in an ASCII string format by converting each 3 bytes of data into a group of 4 base64 characters. The base64 characters include uppercase letters, lowercase letters, digits, plus (\'+\') and forward slash (\'/\'). Each base64 character represents 6 bits of the data. The decoding process is the reverse of encoding. Given a base64 encoded string, decode it back to its original binary representation. Write a function `decode_base64` that takes a single string argument representing the base64 encoded data, and returns the original binary data as a list of integers, where each integer represents a byte (0-255). The input string is guaranteed to be properly padded if necessary, and will always be a valid base64 encoded string. -----Input----- - A single string of base64 encoded data. The string will always be a valid base64 string (length is a multiple of 4). -----Output----- - A list of integers, where each integer represents a byte (0-255) of the decoded binary data. -----Examples----- Input: \\"SGVsbG8=\\" Output: [72, 101, 108, 108, 111] Input: \\"U29mdHdhcmU=\\" Output: [83, 111, 102, 116, 119, 97, 114, 101] Note: The base64 encoded string \\"SGVsbG8=\\" represents the ASCII string \\"Hello\\", and \\"U29mdHdhcmU=\\" represents \\"Software\\".","solution":"import base64 def decode_base64(encoded_str): Decodes a base64 encoded string and returns the original binary data as a list of integers. Parameters: - encoded_str (str): The base64 encoded string. Returns: - List[int]: The original binary data as a list of integers. # Decode the base64 string to bytes decoded_bytes = base64.b64decode(encoded_str) # Convert bytes to list of integers return [b for b in decoded_bytes]"},{"question":"A retailer wants to analyze the sales data for a product over a period of time to determine the day with the highest sales spike. The sales data for this product is recorded on daily basis and provided as an array where each element represents the number of units sold on that day. The retailer wants to identify the first day that had the largest increase in sales compared to the previous day within the given data period. -----Input:----- - First line will contain an integer N, the number of days for which sales data is available. - Second line will contain N integers, S_1, S_2, ldots, S_N, where S_i represents the number of units sold on the i^{th} day. -----Output:----- Output a single integer representing the 1-based index of the first day that has the highest sales spike compared to the previous day. If there is no spike, output -1. -----Constraints----- - 2 leq N leq 10^5 - 0 leq S_i leq 10^5 -----Sample Input:----- 7 10 20 30 25 50 35 55 -----Sample Output:----- 5","solution":"def find_highest_sales_spike_index(N, sales): if N < 2: return -1 max_spike = 0 spike_day = -1 for i in range(1, N): spike = sales[i] - sales[i - 1] if spike > max_spike: max_spike = spike spike_day = i + 1 return spike_day"},{"question":"You have a box with n balls, each having a distinct value assigned from 1 to n. Your task is to determine the minimum number of operations required to sort the balls in ascending order. You can perform the following operations: - Swap two adjacent balls. - Reverse the order of a contiguous subarray of balls. Write a function that takes an integer n and a list of n integers representing the values of the balls, and returns the minimum number of operations required to sort the balls in ascending order. -----Constraints----- - 1 ≤ n ≤ 10^5 - Each value in the list is an integer from 1 to n with all values being distinct. -----Input----- The input is given in the following format: n ball_1 ball_2 ... ball_n -----Output----- Return the minimum number of operations required to sort the balls. -----Sample Input----- 5 5 4 3 2 1 -----Sample Output----- 1 In this case, you can sort all the balls by reversing the whole array in one operation.","solution":"def min_operations_to_sort(n, balls): Returns the minimum number of operations required to sort the balls in ascending order. Args: n : int The number of balls. balls : list of int List of integers representing the values of the balls. Returns: int The minimum number of operations required to sort the balls in ascending order. if balls == sorted(balls): return 0 left = 0 while left < n-1 and balls[left] <= balls[left+1]: left += 1 right = n - 1 while right > 0 and balls[right] >= balls[right-1]: right -= 1 if sorted(balls[left:right+1]) == balls[left:right+1][::-1]: return 1 return 2"},{"question":"Write a program that counts the frequency of each word in a given text and prints the words and their respective counts in ascending order of the words. Constraints * The length of the input text < 2000 Input A string containing words separated by spaces. Output Print each word along with its frequency count, each on a new line. Words in the output should be in ascending order. Example Input this is a test this is only a test Output a 2 is 2 only 1 test 2 this 2","solution":"def word_frequency(text): Returns the frequency of each word in the given text in ascending order of words. Params: text (str): A string containing words separated by spaces. Returns: dict: A dictionary with words as keys and their frequency as values. # Splitting the text into words words = text.split() # Counting frequency using a dictionary frequency = {} for word in words: if word in frequency: frequency[word] += 1 else: frequency[word] = 1 # Sorting the dictionary by keys (words) sorted_frequency = dict(sorted(frequency.items())) return sorted_frequency"},{"question":"*Alan is a city planner and has been tasked with designing a new network of roads. The city is represented as a grid with n rows and m columns, where each cell can either be land indicated by a \'.\' or an obstacle indicated by an \'#\'. People in the city can only move up, down, left, or right and cannot move into or through obstacles. Alan’s goal is to determine if it\'s possible for every land cell to eventually be accessible from every other land cell via a series of roads. Help Alan by writing a program that checks if all land cells in the grid can be connected, directly or indirectly, without going through any obstacles. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the dimensions of the grid. The next n lines each contain m characters, representing the grid. Output Print \\"YES\\" if all land cells can be connected. Otherwise, print \\"NO\\". Example Input 4 4 .... .#.. ..#. .... Output YES Input 4 4 ..... .#.#. ..#.. ..... Output NO Note In the first example, it is possible to connect every land cell with each other. In the second example, the land cells form two separate blocks that cannot be connected because of the obstacles.","solution":"def is_connected(grid, n, m): def dfs(x, y, visited): stack = [(x, y)] while stack: cx, cy = stack.pop() for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = cx + dx, cy + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'.\' and not visited[nx][ny]: visited[nx][ny] = True stack.append((nx, ny)) visited = [[False] * m for _ in range(n)] found_land = False for i in range(n): for j in range(m): if grid[i][j] == \'.\': start_x, start_y = i, j found_land = True break if found_land: break if not found_land: return \\"YES\\" visited[start_x][start_y] = True dfs(start_x, start_y, visited) for i in range(n): for j in range(m): if grid[i][j] == \'.\' and not visited[i][j]: return \\"NO\\" return \\"YES\\""},{"question":"Tom is fascinated by symmetrical numbers. A symmetrical number is one that remains the same when its digits are reversed. Given an integer, Tom wants to determine the number of steps it takes to make it symmetrical by repeatedly adding the reverse of the number to itself. For example: - Starting with 56, the process would be: - 56 + 65 = 121 (1 step) Write a function that takes an integer and returns the number of steps to make it symmetrical, as well as the resulting symmetrical number. If the number is already symmetrical, the number of steps is 0. Input A single integer x (1 ≤ x ≤ 10^5). Output Output two integers: the number of steps to make the input integer symmetrical and the resulting symmetrical number. Examples Input 56 Output 1 121 Input 123 Output 1 444 Input 1331 Output 0 1331 Input 87 Output 4 4884","solution":"def reverse_number(n): return int(str(n)[::-1]) def make_symmetrical(n): steps = 0 while n != reverse_number(n): n += reverse_number(n) steps += 1 return steps, n"},{"question":"A company organizes a charity event where n donators participate. Each donator donates m_{i} items and each item j of donator i has a price p_{ij}. The company wants to select one distinct item from each donator such that the total price of the selected items is within their budget b. Unfortunately, calculating the exact price for the selected items is not easy. Help the company to determine the minimum possible total price with the constraint that an item must be selected from each donator and without exceeding the given budget b. -----Input----- The first line contains two space-separated integers n and b (1 ≤ n ≤ 50; 10^4 ≤ b ≤ 10^6) — the number of donators and the budget of the company. Then n lines follow. The i-th line contains an integer m_{i} (1 ≤ m_{i} ≤ 50) — the number of items the i-th donator provides, followed by m_{i} space-separated integers p_{i1}, p_{i2}, ..., p_{im}_{i} (10^4 ≤ p_{ij} ≤ 10^6) — the prices of the items of the i-th donator. -----Output----- In the first line, print the minimum total price of the selected items such that the total price does not exceed b. If it\'s not possible to select one item from each donator within the budget, print -1. -----Examples----- Input 3 300000 2 100000 200000 2 100000 150000 2 50000 80000 Output 250000 Input 2 150000 3 70000 80000 90000 1 200000 Output -1 -----Note----- In the first sample, the minimum total price is achieved by selecting the items with prices 100000, 100000, and 50000 respectively from the three donators, resulting in a total price of 250000. In the second sample, it\'s impossible to pick an item from each donator without exceeding the budget of 150000.","solution":"def find_min_total_price(n, b, donators): Finds the minimum total price of selecting one item from each donator without exceeding the given budget. Parameters: n (int): Number of donators. b (int): Budget of the company. donators (list of lists): Each sublist contains the prices of the items of a donator. Returns: int: Minimum total price or -1 if it\'s not possible to select one item from each donator within the budget. from itertools import product # Get the minimum priced item from each donator\'s list min_items = [min(d) for d in donators] # If the sum of the minimum items is within budget, return it if sum(min_items) <= b: return sum(min_items) # Generate all combinations of choosing one item from each donator to find the one that fits in the budget min_total_price = float(\'inf\') for combination in product(*donators): total_price = sum(combination) if total_price <= b: min_total_price = min(min_total_price, total_price) # Check if any valid combination was found if min_total_price == float(\'inf\'): return -1 return min_total_price # Input format is: # n b # m1 p11 p12 ... p1m1 # m2 p21 p22 ... p2m2 # ... # For ease of testing, using direct function input in the function signature."},{"question":"Consider that you are given a matrix of size n x m filled with 0s and 1s and you need to start from the top-left corner of the matrix (0, 0) and reach the bottom-right corner of the matrix (n-1, m-1). You can only move down or right at each step. However, you cannot move through cells containing 1. Write a function to count the number of unique paths from the top-left to the bottom-right. If there is no valid path, the function should return 0. # Input - The first line contains two integers n and m (1 ≤ n, m ≤ 100). - The next n lines contain m integers (0 or 1), representing the matrix. # Output - Print the number of unique paths from the top-left to the bottom-right of the matrix. # Examples Example 1 Input: ``` 3 3 0 0 0 0 1 0 0 0 0 ``` Output: ``` 2 ``` Example 2 Input: ``` 3 3 0 1 0 0 1 0 0 0 0 ``` Output: ``` 1 ``` Example 3 Input: ``` 3 3 0 1 0 1 0 0 0 1 0 ``` Output: ``` 0 ``` # Explanation - In Example 1, there are two possible paths: 1. Right, Right, Down, Down 2. Down, Down, Right, Right - In Example 2, there is only one path: 1. Right, Down, Down, Right - In Example 3, there are no valid paths, so the output is 0.","solution":"def count_unique_paths(matrix): n = len(matrix) m = len(matrix[0]) # If the starting or ending cell is 1, return 0 as no path exists if matrix[0][0] == 1 or matrix[n-1][m-1] == 1: return 0 # Create a 2D dp array with the same dimensions as matrix dp = [[0] * m for _ in range(n)] # Initialization: Number of ways to reach any cell in the first row for i in range(m): if matrix[0][i] == 0: dp[0][i] = 1 else: break # Initialization: Number of ways to reach any cell in the first column for i in range(n): if matrix[i][0] == 0: dp[i][0] = 1 else: break # Fill up the dp array for i in range(1, n): for j in range(1, m): if matrix[i][j] == 0: dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[n-1][m-1]"},{"question":"Write a program that simulates the card game \\"War.\\" The card game War is played with a standard deck of 52 cards. The deck is divided equally between two players. Each player reveals the top card of their deck and the player with the higher card \'wins\' both cards, and those cards are added to the bottom of their deck. If the two cards are of equal rank, a \\"war\\" occurs. During a \\"war,\\" each player places the next three cards face down and the third card face-up. The player with the higher face-up card wins all the cards involved. If there is another tie, this process repeats until one player wins the face-up battle or one player runs out of cards. For simplicity, let\'s assume that we are only simulating one round of the game where each player reveals their top card and determines the winner. You do not need to handle subsequent rounds or wars for this question. Ranks are ordered with 2 being the lowest and Ace being the highest. Suits do not matter in this simplified version. Input: A single line containing two space-separated values, representing the two cards of the players. Each card value consists of its rank followed by its suit (e.g., \\"2H\\" for 2 of Hearts, \\"KD\\" for King of Diamonds). Output: The string \\"Player 1 wins\\", \\"Player 2 wins\\", or \\"It\'s a tie\\" depending on the outcome. -----Example----- Input: 8H QD Output: Player 2 wins Input: AC 4D Output: Player 1 wins Input: 7D 7S Output: It\'s a tie Note: The ranks are 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K, A, and you can assume the input is always valid with correctly formatted cards.","solution":"def compare_cards(card1, card2): Compares two cards and determines the winner. :param card1: string representing the card of player 1 (e.g., \\"8H\\") :param card2: string representing the card of player 2 (e.g., \\"QD\\") :return: \\"Player 1 wins\\", \\"Player 2 wins\\", or \\"It\'s a tie\\" rank_order = {\'2\': 2, \'3\': 3, \'4\': 4, \'5\': 5, \'6\': 6, \'7\': 7, \'8\': 8, \'9\': 9, \'10\': 10, \'J\': 11, \'Q\': 12, \'K\': 13, \'A\': 14} rank1 = card1[:-1] # Everything except the last character rank2 = card2[:-1] # Everything except the last character if rank_order[rank1] > rank_order[rank2]: return \\"Player 1 wins\\" elif rank_order[rank1] < rank_order[rank2]: return \\"Player 2 wins\\" else: return \\"It\'s a tie\\""},{"question":"Given an array of integers, you need to find out the maximum sum of any contiguous subarray of size `k`. # Input - The first line of the input contains a single integer `n` (1 ≤ n ≤ 100,000) — the size of the array. - The second line contains `n` integers `a1, a2, ..., an` (−10^4 ≤ ai ≤ 10^4) — the elements of the array. - The third line contains a single integer `k` (1 ≤ k ≤ n) — the size of the contiguous subarray. # Output - Output a single integer, the maximum sum of any contiguous subarray of size `k`. # Example Input ``` 8 1 3 -1 -3 5 3 6 7 3 ``` Output ``` 16 ``` *Explanation*: The subarray of size 3 with the maximum sum is `[5, 3, 6]`, which gives the sum `5 + 3 + 6 = 14`. # Note The solution should have an optimal time complexity of O(n) since n can be as large as 100,000. The algorithm should efficiently compute the sum within these bounds.","solution":"def max_sum_subarray_of_size_k(arr, k): Returns the maximum sum of any contiguous subarray of size k. n = len(arr) if n == 0 or k > n: return 0 # Compute the sum of the first window of size k max_sum = current_sum = sum(arr[:k]) # Using a sliding window approach for i in range(k, n): current_sum += arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Consider an undirected graph `G` consisting of `n` nodes and `m` edges. The nodes are labeled from `1` to `n`. Each node contains an integer value `a_i`, representing the value of the `i-th` node. Your task is to compute the sum of the values of nodes that are connected directly or indirectly to node `k`. A node `u` is considered connected to node `v` if there is a path of edges between `u` and `v`. You are given the number of nodes, edges, node values, edge list, and the node `k`. Write a function to compute the total sum of the values of all nodes connected to node `k`. # Input: - The first line contains two integers `n` and `m` (`1 <= n, m <= 10^5`) - the number of nodes and edges in the graph. - The second line contains `n` integers `a_1, a_2, ..., a_n` (`1 <= a_i <= 10^9`) - the values of the nodes. - Each of the next `m` lines contains two integers `u` and `v` (`1 <= u, v <= n`) - defining an undirected edge between nodes `u` and `v`. - The last line contains a single integer `k` (`1 <= k <= n`) - the node whose connected component\'s sum is to be found. # Output: Print the sum of the values of all nodes connected to node `k`. # Example: Input: ``` 5 4 1 2 3 4 5 1 2 1 3 2 4 4 5 3 ``` Output: ``` 15 ``` # Explanation: The nodes connected to node `3` are {1, 2, 4, 5, 3}, and their values sum up to `1 + 2 + 3 + 4 + 5 = 15`. # Note: If all nodes form a single connected component (are all reachable from each other), the output will be the sum of all node values. Conversely, if node `k` is isolated (has no paths connecting it to others), the output will be the value of node `k` itself.","solution":"def calculate_connected_component_sum(n, m, node_values, edges, k): from collections import defaultdict, deque # Create adjacency list for the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Perform BFS to find all nodes connected to node k connected_sum = 0 visited = set() queue = deque([k]) visited.add(k) while queue: node = queue.popleft() connected_sum += node_values[node - 1] for neighbor in graph[node]: if neighbor not in visited: queue.append(neighbor) visited.add(neighbor) return connected_sum"},{"question":"You have been hired by an e-commerce company to analyze the efficiency of their product delivery system. The company has n cities connected by m bidirectional roads. Each road has a travel time of 1 unit. Your task is to evaluate the delivery performance by determining the minimum travel time from the main warehouse (located in city 1) to every other city in the network. Input: The first line of the input contains two integers n (2 ≤ n ≤ 1000) and m (1 ≤ m ≤ 2000) — the number of cities and roads, respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n) — indicating that there is a road between city u and city v. It is guaranteed that there is a path between city 1 and every other city. Output: Output a single line containing n-1 integers, where the i-th (1 ≤ i ≤ n-1) integer represents the minimum travel time from city 1 to city i+1. Example: Input: 6 7 1 2 1 3 2 4 3 4 4 5 3 5 5 6 Output: 1 1 2 2 3 Explanation: - The minimum travel time from city 1 to city 2 is 1 unit. - The minimum travel time from city 1 to city 3 is 1 unit. - The minimum travel time from city 1 to city 4 is 2 units (either through city 2 or city 3). - The minimum travel time from city 1 to city 5 is 2 units (through city 3). - The minimum travel time from city 1 to city 6 is 3 units (through city 3 and city 5).","solution":"from collections import deque def min_travel_time(n, m, roads): Function to calculate the minimum travel time from city 1 to every other city. :param n: Number of cities :param m: Number of roads :param roads: List of tuples representing roads between cities :return: List of minimum travel times from city 1 to city i+1 (1 <= i <= n-1) adj_list = [[] for _ in range(n + 1)] for u, v in roads: adj_list[u].append(v) adj_list[v].append(u) # BFS to calculate minimum distances distances = [-1] * (n + 1) # Initialize distances with -1 distances[1] = 0 queue = deque([1]) while queue: node = queue.popleft() for neighbor in adj_list[node]: if distances[neighbor] == -1: # not visited distances[neighbor] = distances[node] + 1 queue.append(neighbor) # We need to return distances from city 1 to cities 2, 3, ..., n return [distances[i] for i in range(2, n + 1)]"},{"question":"A school is conducting a programming competition. There are two teams, Team P and Team Q, participating in the competition. Each team has N participants. Each participant will be scored based on their performance, and each score will be a positive integer. To determine the winner, the school compares the total scores of the two teams. The team with the higher total score wins. If both teams have the same total score, the result is a tie. Write a program to evaluate the result of the competition for multiple test cases. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N, the number of participants in each team. - The second line of each test case contains N space-separated integers, the scores of the participants in Team P. - The third line of each test case contains N space-separated integers, the scores of the participants in Team Q. ------ Output Format ------ For each test case, print \\"Team P\\" if Team P has a higher total score, \\"Team Q\\" if Team Q has a higher total score, and \\"Tie\\" if both teams have the same total score. You can print each letter of the string in any case (upper or lower) (for instance, strings teAM p, Team p, and TEAM P will be considered identical). ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ Score of each participant ≤ 100 ------ Sample Input 1 ------ 3 3 70 80 65 85 75 60 2 50 50 40 60 4 20 30 40 50 25 30 35 50 ------ Sample Output 1 ------ Team P Team Q Tie ------ Explanation 1 ------ Test Case 1: Team P has scores 70 + 80 + 65 = 215, and Team Q has scores 85 + 75 + 60 = 220. Team Q wins. Test Case 2: Team P has scores 50 + 50 = 100, and Team Q has scores 40 + 60 = 100. The result is a Tie. Test Case 3: Team P has scores 20 + 30 + 40 + 50 = 140, and Team Q has scores 25 + 30 + 35 + 50 = 140. The result is a Tie.","solution":"def determine_winner(test_cases): results = [] for case in test_cases: n, team_p_scores, team_q_scores = case team_p_total = sum(team_p_scores) team_q_total = sum(team_q_scores) if team_p_total > team_q_total: results.append(\\"Team P\\") elif team_q_total > team_p_total: results.append(\\"Team Q\\") else: results.append(\\"Tie\\") return results def main(): import sys input = sys.stdin.read data = input().split() index = 0 T = int(data[index]) index += 1 test_cases = [] for _ in range(T): N = int(data[index]) index += 1 team_p_scores = list(map(int, data[index:index + N])) index += N team_q_scores = list(map(int, data[index:index + N])) index += N test_cases.append((N, team_p_scores, team_q_scores)) results = determine_winner(test_cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"Write a function that takes an array of integers and returns a new array where each element is the product of all the elements in the original array except for the one at the same index. You should solve it without using division. Example: `[1, 2, 3, 4]` should return `[24, 12, 8, 6]`","solution":"def product_except_self(nums): Returns a new array where each element is the product of all elements in the original array except for the one at the same index. length = len(nums) if length == 0: return [] # Initialize the result array result = [1] * length # Left product pass left_product = 1 for i in range(length): result[i] = left_product left_product *= nums[i] # Right product pass right_product = 1 for i in range(length-1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"A hotel buffet offers dishes in trays, and each tray can contain up to K servings. A group of M guests attends the buffet, and each guest needs Y servings. Determine the minimum number of trays the hotel needs to prepare so that all guests receive their required servings. ----- Input Format ----- - The first line of input contains an integer T, denoting the number of test cases. - Each test case consists of three integers M, Y, and K, the number of guests, the number of servings each guest needs, and the number of servings per tray respectively. ----- Output Format ----- For each test case, output the minimum number of trays needed. ----- Constraints ----- 1 ≤ T ≤ 100 1 ≤ M, Y, K ≤ 10 ----- Sample Input 1 ----- 3 5 4 6 3 8 5 10 2 4 ----- Sample Output 1 ----- 4 5 5 ----- Explanation 1 ----- Test case 1: There are 5 guests who need 4 servings each, for a total of 20 servings. Each tray holds 6 servings, so the hotel needs at least lceil 20 / 6 rceil = 4 trays. Test case 2: There are 3 guests who need 8 servings each, for a total of 24 servings. Each tray holds 5 servings, so the hotel needs at least lceil 24 / 5 rceil = 5 trays. Test case 3: There are 10 guests who need 2 servings each, for a total of 20 servings. Each tray holds 4 servings, so the hotel needs at least lceil 20 / 4 rceil = 5 trays.","solution":"import math def minimum_trays(T, test_cases): Determine the minimum number of trays needed for each test case. Parameters: T (int): Number of test cases test_cases (list of tuples): Each tuple contains (M, Y, K), where M is the number of guests, Y is the number of servings each guest needs, K is the number of servings per tray. Returns: list: A list containing the minimum number of trays needed for each test case. results = [] for M, Y, K in test_cases: total_servings = M * Y trays_needed = math.ceil(total_servings / K) results.append(trays_needed) return results"},{"question":"Given an array of integers and a target integer, determine if there are two distinct indices (i) and (j) in the array such that the sum of the elements at these indices is equal to the target. You need to return the pair of indices if such a pair is found, otherwise, return an empty list. Consider the following example for a better understanding of the problem: # Input - The first line contains an integer (n) ((2 leq n leq 100,000)), the size of the array. - The second line contains (n) integers (a_1, a_2, ..., a_n) ((-10^9 leq a_i leq 10^9)), the elements of the array. - The third line contains an integer (k) ((-2 times 10^9 leq k leq 2 times 10^9)), the target sum. # Output - If there are two indices (i) and (j) such that (a[i] + a[j] = k) ((0 leq i leq n-1) and (0 leq j leq n-1)), print the indices as a space-separated pair ((i < j)). - If no such indices exist, return an empty list. # Examples Example 1 Input: ``` 5 1 2 3 4 5 6 ``` Output: ``` 1 3 ``` Explanation: The elements at indices 1 (which is 2) and 3 (which is 4) add up to the target 6. Example 2 Input: ``` 4 1 2 3 9 8 ``` Output: ``` ``` Explanation: No two distinct indices sum up to the target 8. Hence, the output is an empty list. # Constraints - Ensure that the solution has an optimal time complexity of (O(n)). - Answers within a relative or absolute error of (10^{-6}) will be accepted. # Solution Approach - Use a hash map to store the elements of the array along with their indices. - Iterate through the array, checking whether the complementary value (target - current element) exists in the hash map. - If it exists and it\'s a different index than the current one, return the pair of indices. - If no such pair is found after the iteration, return an empty list.","solution":"def find_indices_with_target_sum(arr, target): This function takes an array of integers and a target integer, and returns a pair of indices such that the sum of the elements at these indices is equal to the target. If no such pair exists, it returns an empty list. value_to_index = {} for index, value in enumerate(arr): complement = target - value if complement in value_to_index: return [value_to_index[complement], index] value_to_index[value] = index return [] # No pair found"},{"question":"You are given an array of N non-negative integers, D_1, D_2, ..., D_N, where each integer represents the number of days it takes to complete a certain job. Each job has a corresponding profit, P_1, P_2, ..., P_N. Only one job can be completed at a time, and you can start another job only after completing the current one. You want to maximize the total profit you can earn within a given number of days, T. -----Constraints----- - All values in input are integers. - 1 leq N leq 1000 - 1 leq D_i leq T leq 100 - 1 leq P_i leq 10^4 -----Input----- Input is given from Standard Input in the following format: N T D_1 P_1 D_2 P_2 ... D_N P_N -----Output----- Print the maximum total profit you can earn within T days. -----Sample Input----- 4 5 2 10 1 20 2 15 1 10 -----Sample Output----- 45 For the given input, the optimal way is to complete the jobs with 1 day and profit 20 first, then the job with 1 day and profit 10 next, and finally the job with 2 days and profit 15, making a total profit of 45 within 5 days.","solution":"def max_profit(N, T, jobs): This function calculates the maximum profit attainable within T days given N jobs. Each job has a duration and a corresponding profit. :param N: Number of jobs :param T: Maximum available days :param jobs: List of tuples where each tuple is (D_i, P_i) :return: Maximum possible profit # Sort jobs by their ratio of profit to duration in descending order to get maximum profit jobs.sort(key=lambda x: (-x[1] / x[0], -x[1])) dp = [0] * (T + 1) for d, p in jobs: for days in range(T, d - 1, -1): dp[days] = max(dp[days], dp[days - d] + p) return max(dp)"},{"question":"Alice loves playing with square matrices and enjoys transposing them. Recently, she encountered a matrix and wanted to determine if it is symmetric with respect to its main diagonal (i.e., the matrix should be equal to its transpose). However, Alice needs your help to automate this process. Can you help her verify if a given matrix is symmetric? ----Input:---- - The first line will contain a single integer n, the size of the n times n matrix. - The next n lines contain n integers each, representing the elements of the matrix. ----Output:---- Print \\"YES\\" if the matrix is symmetric; otherwise, print \\"NO\\". ----Constraints:---- - 1 leq n leq 300 - Each element of the matrix is an integer between -10^9 and 10^9 inclusive. ----Sample Input:---- 3 1 2 3 2 4 5 3 5 6 ----Sample Output:---- YES ----Explanation:---- The given matrix is: 1 2 3 2 4 5 3 5 6 This matrix is equal to its transpose: 1 2 3 2 4 5 3 5 6 Therefore, the output is \\"YES\\".","solution":"def is_symmetric(matrix): Determines if the given matrix is symmetric. :param matrix: A 2D list representing the matrix :return: \\"YES\\" if the matrix is symmetric, otherwise \\"NO\\" n = len(matrix) for i in range(n): for j in range(i, n): if matrix[i][j] != matrix[j][i]: return \\"NO\\" return \\"YES\\" def read_matrix_and_check_symmetry(): import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) matrix = [] index = 1 for _ in range(n): row = data[index: index + n] matrix.append(list(map(int, row))) index += n return is_symmetric(matrix)"},{"question":"You are given a list of integers representing the heights of buildings in a line. The goal is to find the maximum amount of water that can be trapped between the buildings after it rains. The width of each building is 1. -----Input----- The first line of the input contains a single integer n (1 leq n leq 10^5), the number of buildings. The second line contains n space-separated integers h_i (0 leq h_i leq 10^9), the heights of the buildings. -----Output----- Output a single integer, which is the maximum amount of water that can be trapped between the buildings. -----Examples----- Sample Input: 6 0 1 0 2 1 0 1 3 2 1 2 1 Sample Output: 6 Sample Input: 4 3 0 2 0 4 Sample Output: 7","solution":"def trap(height): Calculate the maximum amount of water that can be trapped between the buildings. if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - height[i] return water_trapped"},{"question":"A company is organizing a coding competition with multiple tiers. Each participant can participate in one or more tiers. Each tier consists of a series of coding challenges and has a specific consultation interval during which participants can seek help from mentors. However, participants cannot seek consultation from multiple tiers at the same time. You are asked to help determine the maximum number of tiers in which a participant can seek consultation without overlapping any consultation intervals. Given a list of tiers with their start time S_i and end time E_i, determine the maximum number of non-overlapping consultation intervals that a participant can attend. -----Input:----- The first line contains an integer T denoting the number of test cases. Each of the next T lines contains an integer N, the number of tiers. Each of the next N lines contains two integers S_i and E_i, the start time and end time of the consultation interval for the i-th tier. -----Output:----- Print the maximum number of tiers a participant can attend for each test case in separate lines. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 10^3 - 1 leq S_i < E_i leq 10^9 -----Sample Input:----- 1 4 1 4 2 3 3 5 7 8 -----Sample Output:----- 3 -----EXPLANATION:----- The participant can attend the 2nd, 1st, and 4th tiers, resulting in maximum 3 non-overlapping consultation intervals.","solution":"def max_non_overlapping_intervals(test_cases): Determines the maximum number of non-overlapping intervals for each test case. Args: test_cases (list): A list of test cases, each consisting of a list of intervals represented as tuples (S_i, E_i). Returns: list: A list of integers representing the maximum number of non-overlapping intervals for each test case. results = [] for intervals in test_cases: # Sort intervals by their end time intervals.sort(key=lambda x: x[1]) count = 0 end_time = 0 for start, end in intervals: if start >= end_time: count += 1 end_time = end results.append(count) return results def parse_input(input_string): lines = input_string.strip().split(\'n\') t = int(lines[0]) index = 1 test_cases = [] for _ in range(t): n = int(lines[index]) intervals = [] for j in range(index + 1, index + 1 + n): s, e = map(int, lines[j].split()) intervals.append((s, e)) test_cases.append(intervals) index += 1 + n return test_cases def process_input(input_string): test_cases= parse_input(input_string) return max_non_overlapping_intervals(test_cases)"},{"question":".remove(x) This operation removes element boldsymbol{x} from a list of strings. If element boldsymbol{x} does not exist, it raises a ValueError. The .remove(x) operation returns None. Example >>> l = [\\"apple\\", \\"banana\\", \\"cherry\\", \\"date\\"] >>> l.remove(\\"banana\\") >>> print(l) [\'apple\', \'cherry\', \'date\'] >>> print(l.remove(\\"date\\")) None >>> print(l) [\'apple\', \'cherry\'] >>> l.remove(\\"fig\\") ValueError: list.remove(x): x not in list .discard(x) This operation removes element boldsymbol{x} from a list of strings, if it exists. If element boldsymbol{x} does not exist, it does not raise an error. The .discard(x) operation returns None. Example >>> l = [\\"apple\\", \\"banana\\", \\"cherry\\", \\"date\\"] >>> l.discard(\\"banana\\") >>> print(l) [\'apple\', \'cherry\', \'date\'] >>> print(l.discard(\\"date\\")) None >>> print(l) [\'apple\', \'cherry\'] >>> l.discard(\\"fig\\") >>> print(l) [\'apple\', \'cherry\'] Task You have a list of strings and you have to execute a series of commands to modify the list. The commands will be remove and discard. Input Format The first line contains integer n, the number of elements in the list. The second line contains n space separated strings of the list. All of the strings are lowercase and contain only alphabetic characters. The third line contains integer N, the number of commands. The next N lines contains either remove or discard commands followed by the string value. Constraints 1<n<20 boldsymbol{1<N<20} Output Format Print the resulting list in a single line, with elements separated by spaces. Sample Input 4 apple banana cherry date 5 remove banana remove date discard apple remove fig discard cherry Sample Output olist Explanation After completing these 5 operations on the list, we get the list left([{text{\\"}}]right). Hence, the final list is displayed. Note: Convert the elements of the list to strings while you are assigning them. To ensure proper input of the list, we have added the first two lines of code to the editor.","solution":"def modify_list(n, elements, N, commands): Perform a series of remove and discard operations on a list of strings. Parameters: n (int): Number of elements in the list. elements (list): List of strings. N (int): Number of commands. commands (list): List of commands in the form of `remove x` or `discard x`. Returns: list: The modified list. lst = elements for command in commands: action, value = command.split() if action == \\"remove\\": if value in lst: lst.remove(value) else: raise ValueError(f\\"list.remove({value}): {value} not in list\\") elif action == \\"discard\\": if value in lst: lst.remove(value) # Since discard insets do not raise an error return lst # Example usage: n = 4 elements = [\\"apple\\", \\"banana\\", \\"cherry\\", \\"date\\"] N = 5 commands = [\\"remove banana\\", \\"remove date\\", \\"discard apple\\", \\"remove fig\\", \\"discard cherry\\"] try: result = modify_list(n, elements, N, commands) except ValueError as e: result = str(e) print(result) # Expected output: list.remove(fig): fig not in list"},{"question":"You are given an array of integers. A segment of this array is defined as any contiguous subarray. The beauty of a segment is defined as the sum of its minimum and maximum elements. Given the array, your task is to find the most beautiful segment of the array. The most beautiful segment is the one with the highest beauty value. If there are multiple such segments with the same beauty value, return any of them. -----Constraints----- - 1 ≤ length of array ≤ 2 × 10^5 - -10^9 ≤ array element ≤ 10^9 -----Input----- Input is given from Standard Input in the following format: N Array -----Output----- Print the beauty value of the most beautiful segment. -----Sample Input----- 5 1 3 5 1 9 -----Sample Output----- 10 The most beautiful segment with the highest beauty value is [1, 9] with beauty value 1+9 = 10.","solution":"def most_beautiful_segment(N, arr): Returns the beauty value of the most beautiful segment of the array. Beauty is defined as the sum of the minimum and maximum elements in any segment. if N == 0: return 0 # Initialize values to store min and max elements found so far global_min = arr[0] global_max = arr[0] for num in arr[1:]: if num < global_min: global_min = num if num > global_max: global_max = num return global_min + global_max"},{"question":"Create a function that takes a string containing words separated by spaces. Each word may contain both uppercase and lowercase letters. You need to return a string where each word is transformed as follows: the first letter of each word should be converted to uppercase and the rest of the letters to lowercase. If a word has no alphabetic characters, the function should leave the word unchanged. ``` Example: \\"hello world\\" should be transformed to \\"Hello World\\" \\"i aM leARning cODING\\" should be transformed to \\"I Am Learning Coding\\" \\"123 abc DEF\\" should be transformed to \\"123 Abc Def\\" ```","solution":"def capitalize_words(input_string): Returns a string where the first letter of each word is in uppercase and the rest of the letters are in lowercase. Words that are made up of non-alphabetic characters remain unchanged. :param input_string: A string containing words separated by spaces :return: A string where each word is capitalized appropriately words = input_string.split() capitalized_words = [] for word in words: if word.isalpha(): capitalized_word = word[0].upper() + word[1:].lower() else: capitalized_word = word capitalized_words.append(capitalized_word) return \' \'.join(capitalized_words)"},{"question":"Mark is an avid hiker who regularly plans trips to different mountains. He keeps track of each mountain trip with only one integer - the height of the mountain he climbed in meters. Mark has a vacation coming up and he is considering revisiting some of the mountains. However, he can’t recall the exact heights of some of the mountains he climbed, so he wants to count how many times he climbed a mountain of a given height. Given a list of mountain heights that Mark climbed and a series of queries where each query asks for the number of times Mark climbed a mountain of a specific height, help him answer these queries. Input The first input line contains a single integer n (1 ≤ n ≤ 1000) — the number of mountains Mark climbed. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 10^4), where hi is the height of the i-th mountain Mark climbed. The third line contains a single integer q (1 ≤ q ≤ 1000) — the number of queries. Each of the following q lines contains a single integer qi (1 ≤ qi ≤ 10^4), which is the height to look for in Mark\'s mountain list. Output For each query, print the number of times Mark climbed a mountain of the given height. Examples Input 6 1200 1300 1200 1250 1300 1200 3 1200 1300 1150 Output 3 2 0","solution":"def count_mountain_climbs(heights, queries): Returns the number of times Mark climbed mountains of given heights for each query. :param heights: List of integers representing the heights of mountains climbed. :param queries: List of integers representing the heights to query. :return: List of integers representing the counts of each query height. # Create a dictionary to count occurrences of each mountain height height_count = {} for height in heights: if height in height_count: height_count[height] += 1 else: height_count[height] = 1 # For each query, check the computed dictionary results = [] for query in queries: results.append(height_count.get(query, 0)) return results"},{"question":"# Animal Shelter An animal shelter operates on a strict FIFO (First In First Out) basis. There are two types of animals the shelter cares for: dogs and cats. People can adopt either the \\"oldest\\" (based on arrival time) of all the animals at the shelter, or they can select specifically a dog or a cat (and will receive the oldest animal of that type). You need to create a system to implement this. Instructions: 1. Implement a data structure called `AnimalShelter`, which contains operations to add animals, dequeue them, and check the status of the shelter. 2. The shelter can support three operations: - `enqueue(name: str, type: str)` — Adds an animal with a given name and type (either \\"dog\\" or \\"cat\\") to the shelter. - `dequeueAny(): str` — Removes and returns the name of the animal which has been in the shelter the longest. - `dequeueDog(): str` — Removes and returns the name of the dog which has been in the shelter the longest. - `dequeueCat(): str` — Removes and returns the name of the cat which has been in the shelter the longest. 3. If there are no animals available when a dequeue function is called, return \\"No animals available\\". # Input You will receive several lines of input, each representing one of the following operations: - `enqueue(name, type)` — Add an animal to the shelter. - `dequeueAny()` — Adopt the oldest animal of any type. - `dequeueDog()` — Adopt the oldest dog. - `dequeueCat()` — Adopt the oldest cat. # Output For each `dequeue` operation, print the name of the adopted animal or \\"No animals available\\" if the operation cannot be fulfilled. # Example Input ``` enqueue(Sparky, dog) enqueue(Whiskers, cat) enqueue(Fido, dog) enqueue(Ginger, cat) dequeueAny() dequeueDog() dequeueCat() dequeueAny() dequeueDog() ``` Output ``` Sparky Fido Whiskers Ginger No animals available ``` # Constraints - There will be at least 1 and at most 100 operations. - The name of each animal is a string containing only alphabetical characters and no spaces. - The type is either \\"dog\\" or \\"cat\\". - The operations are well-formed and follow the constraints defined.","solution":"from collections import deque class AnimalShelter: def __init__(self): self.dogs = deque() self.cats = deque() self.order = 0 def enqueue(self, name: str, type: str): if type == \\"dog\\": self.dogs.append((self.order, name)) elif type == \\"cat\\": self.cats.append((self.order, name)) self.order += 1 def dequeueAny(self): if not self.dogs and not self.cats: return \\"No animals available\\" elif not self.dogs: return self.cats.popleft()[1] elif not self.cats: return self.dogs.popleft()[1] if self.dogs[0][0] < self.cats[0][0]: return self.dogs.popleft()[1] else: return self.cats.popleft()[1] def dequeueDog(self): if not self.dogs: return \\"No animals available\\" return self.dogs.popleft()[1] def dequeueCat(self): if not self.cats: return \\"No animals available\\" return self.cats.popleft()[1]"},{"question":"Given a string of characters, implement a function to determine if it is an anagram of a palindrome. An anagram is a re-arrangement of a sequence to form another sequence. A palindrome is a sequence that reads the same forwards and backwards. Your function should return `true` if the given string is an anagram of a palindrome, and `false` otherwise. Example: * \\"carrace\\" should return `true` since it can be rearranged to form \\"racecar\\", which is a palindrome. * \\"hello\\" should return `false` as it cannot form any palindrome. Note: - The input string will consist only of lowercase letters. - The function should have a linear time complexity relative to the length of the string.","solution":"from collections import Counter def is_anagram_of_palindrome(s): Determines if the input string is an anagram of a palindrome. # Count the frequency of each character in the string counter = Counter(s) # Identify the number of characters with odd frequency odd_count = sum(1 for count in counter.values() if count % 2 != 0) # String can be rearranged to form a palindrome if it has at most one character with an odd frequency return odd_count <= 1"},{"question":"Design a function that processes strings according to specific rules. Given a string, the function should remove all non-alphabetic characters and then return the string reversed. -----Input:----- - The first line of input will contain an integer T, the number of test cases. - Each of the following T lines will contain a string S. -----Output:----- For each test case, output the processed string after applying the rules. -----Constraints----- - 1 leq T leq 1000 - 1 leq |S| leq 100 -----Sample Input:----- 3 He!llo Wor@ld! Codi!ng -----Sample Output:----- oll dlroW gnidoC","solution":"def process_strings(T, strings): Processes a list of strings according to the rules: - Remove all non-alphabetic characters. - Return the string reversed. Args: T (int): The number of test cases. strings (list of str): The list of strings to process. Returns: list of str: The list of processed strings. processed_strings = [] for i in range(T): S = strings[i] filtered = \'\'.join([char for char in S if char.isalpha()]) reversed_str = filtered[::-1] processed_strings.append(reversed_str) return processed_strings"},{"question":"Anna loves playing with dominoes. She has a set of n dominoes, and each domino is represented as a tuple of two integers (a, b). Anna wants to arrange all the dominoes in a line such that if she places a domino with values (a_i, b_i) next to domino with values (a_j, b_j), then at least one number from (a_i, b_i) matches with at least one number from (a_j, b_j). Help Anna determine if it is possible to arrange all the dominoes in a line according to the rule described. If it is possible, output the arrangement. If it is not possible, output \\"No\\". -----Input----- The first line contains a single integer n (1 le n le 100), the number of dominoes. Each of the next n lines contains two integers a and b (1 le a, b le 100), representing the values on the two halves of a domino. -----Output----- If it is possible to arrange the dominoes as described, output the arrangement as n lines, each containing a tuple (a, b), representing the values on each domino in the arranged sequence. If it is not possible, output a single word \\"No\\". -----Examples----- Input 3 1 2 2 3 3 4 Output 1 2 2 3 3 4 Input 3 1 2 3 4 5 6 Output No Input 4 1 2 2 3 4 5 3 4 Output 1 2 2 3 3 4 4 5","solution":"def arrange_dominoes(dominoes): from collections import defaultdict, deque # Create adjacency list and count degrees adj = defaultdict(list) degree = defaultdict(int) for a, b in dominoes: adj[a].append(b) adj[b].append(a) degree[a] += 1 degree[b] += 1 # Check if graph has an Eulerian path start_nodes = [node for node in degree if degree[node] % 2 == 1] if len(start_nodes) not in [0, 2]: return \\"No\\" # Hierholzer\'s algorithm to find Eulerian path/circuit stack = deque() path = [] current_node = start_nodes[0] if start_nodes else dominoes[0][0] stack.append(current_node) while stack: node = stack[-1] if adj[node]: next_node = adj[node].pop() adj[next_node].remove(node) stack.append(next_node) else: path.append(stack.pop()) # Convert path of nodes to sequence of dominoes path.reverse() arranged_dominoes = [] for i in range(len(path) - 1): a, b = path[i], path[i + 1] if (a, b) in dominoes: arranged_dominoes.append((a, b)) else: arranged_dominoes.append((b, a)) if len(arranged_dominoes) != len(dominoes): return \\"No\\" return arranged_dominoes def is_possible_to_arrange(n, dominoes): if n == 1: return dominoes result = arrange_dominoes(dominoes) if result == \\"No\\": return \\"No\\" else: return result"},{"question":"In a distant land of Codingville, there is a famous legend about the \\"Palindromic River\\". The river is a long sequence of rocks arranged in a line, with each rock labeled with a lowercase English letter. It is said that a hero can calm the turbulent waters of the river if they find a specific \\"sequential palindromic substring\\" in the rock sequence. A sequential palindromic substring is defined as a substring that reads the same backward as forward, and it should contain at least one pair of the same consecutive letters. For example, for the sequence \\"abbc\\", \\"bb\\" is a valid sequential palindromic substring. However, \\"cb\\" is not considered palindromic. Your task is to determine the length of the shortest sequential palindromic substring in the given river sequence. If no such substring exists, return -1. -----Input----- The input consists of a single line containing a string \'s\' (1 ≤ |s| ≤ 1,000,000) — the sequence of rocks in the river. -----Output----- Output a single integer — the length of the shortest sequential palindromic substring. If no such substring exists, print -1. -----Examples----- Input abbce Output 2 Input abcdef Output -1 Input abcddcba Output 2 -----Note----- In the first example, \\"bb\\" is a palindromic substring of length 2. In the second example, there are no palindromic substrings that meet the criteria. In the third example, \\"dd\\" is the shortest palindromic substring of length 2, even though the entire string \\"abcddcba\\" is a sequential palindrome, the task is to find the shortest one with at least one pair of the same consecutive letters.","solution":"def shortest_sequential_palindromic_substring(s): Returns the length of the shortest sequential palindromic substring. A sequential palindromic substring must contain at least one pair of the same consecutive letters. for i in range(len(s) - 1): if s[i] == s[i + 1]: return 2 # As soon as we find the first pair of consecutive equal characters, we return 2 return -1"},{"question":"A researcher is conducting a study on different species of birds. Each bird has a unique ID and is recorded in a list. The researcher wants to identify birds of the same species that are grouped together consecutively in the list. Write a function that takes a list of bird IDs (integers) and returns a list containing the sizes of each group of consecutively identical bird IDs. For instance, given the input list ``` [7, 7, 2, 2, 2, 8, 8, 1] ```, the function should return ``` [2, 3, 2, 1] ``` as there are: - Two birds with ID ```7``` grouped together - Three birds with ID ```2``` grouped together - Two birds with ID ```8``` grouped together - One bird with ID ```1```. If the input list is empty, the function should return an empty list ```[]```. # Function Signature # ```python def group_sizes(bird_ids: List[int]) -> List[int]: # Your code here ``` # Example Test Cases # Test Case 1 Input: ``` [7, 7, 2, 2, 2, 8, 8, 1] ``` Output: ``` [2, 3, 2, 1] ``` Test Case 2 Input: ``` [5, 5, 5, 3, 3, 9] ``` Output: ``` [3, 2, 1] ``` Test Case 3 Input: ``` [1, 1, 1, 1, 1] ``` Output: ``` [5] ``` Test Case 4 Input: ``` [] ``` Output: ``` [] ```","solution":"from typing import List def group_sizes(bird_ids: List[int]) -> List[int]: Given a list of bird IDs, returns a list containing the sizes of each group of consecutively identical bird IDs. if not bird_ids: return [] sizes = [] current_bird_id = bird_ids[0] count = 1 for bird_id in bird_ids[1:]: if bird_id == current_bird_id: count += 1 else: sizes.append(count) current_bird_id = bird_id count = 1 sizes.append(count) return sizes"},{"question":"You are given n friends, each with a certain amount of money in dollars. Since they are at a party, they decide to pool their money together and then redistribute it equally among themselves. If it\'s not possible to do so such that each friend has an integer amount of money, they decide that the extra money is to be donated to charity. Your task is to determine the minimum amount of money that will be donated to charity in order to make the redistribution of money fair. -----Input----- The first line contains a single integer t (1 le t le 1000) — the number of test cases. The first line of each test case contains the integer n (2 le n le 10^5) — the number of friends. The second line of each test case contains n integers m_1, m_2, dots, m_n (0 le m_i le 10^9) — the money each friend has in dollars. It\'s guaranteed that the sum of n over test cases doesn\'t exceed 10^5. -----Output----- For each test case, print a single integer — the minimum amount of money that will be donated to charity. -----Examples----- Input 3 3 5 2 4 4 3 3 3 3 2 7 1 Output 1 0 0 -----Note----- In the first test case, the total amount of money is 11. When divided by 3, the remainder is 2, so 2 dollars can’t be equally divided, and thus 1 dollar needs to be donated to charity (as 11 - 2 = 9 dollars is divisible by 3). In the second test case, the total amount of money is 12. Since it is already evenly divisible by 4, no money needs to be donated. In the third test case, the total amount of money 8 is already evenly divisible by 2, so no money needs to be donated to charity.","solution":"def min_money_to_donate(t, test_cases): results = [] for test_case in test_cases: n, m = test_case total_money = sum(m) remainder = total_money % n if remainder == 0: results.append(0) else: results.append(n - remainder) return results # Example usage if __name__ == \\"__main__\\": t = 3 test_cases = [ (3, [5, 2, 4]), (4, [3, 3, 3, 3]), (2, [7, 1]) ] print(min_money_to_donate(t, test_cases))"},{"question":"You are given an integer array A consisting of n integers. You need to determine whether it is possible to rearrange the elements of A such that for any i (1 ≤ i < n), the absolute difference between A[i] and A[i-1] is at most 1. -----Constraints----- - 1 ≤ n ≤ 10^5 - 1 ≤ A[i] ≤ 10^9 -----Input----- Input is given from Standard Input in the following format: n A_1 A_2 ... A_n -----Output----- If such a rearrangement is possible, print Yes; otherwise, print No. -----Sample Input----- 5 3 1 4 2 5 -----Sample Output----- Yes One possible rearrangement is 1, 2, 3, 4, 5.","solution":"def can_rearrange_to_satisfy_condition(arr): Determines if the array can be rearranged such that for any i (1 ≤ i < n), the absolute difference between arr[i] and arr[i-1] is at most 1. Parameters: arr (list of int): The array of integers Returns: str: \\"Yes\\" if such a rearrangement is possible, \\"No\\" otherwise arr.sort() for i in range(1, len(arr)): if abs(arr[i] - arr[i - 1]) > 1: return \\"No\\" return \\"Yes\\" # Example usage # n = int(input()) # arr = list(map(int, input().split())) # print(can_rearrange_to_satisfy_condition(arr))"},{"question":"You have two strings A and B of lengths n and m respectively. You are allowed to perform the following operations on string A: 1. Insert a single character in A. 2. Remove a single character from A. 3. Replace a single character in A with another character. Your task is to determine the minimum number of operations required to transform string A into string B. -----Input----- The first line contains two integers n and m separated by space (1 leq n, m leq 2000) — the lengths of string A and string B respectively. The second line contains the string A which consists of lowercase Latin letters. The third line contains the string B which consists of lowercase Latin letters. -----Output----- Print the minimum number of operations required to transform string A into string B. -----Examples----- Input 4 5 abcd abcde Output 1 Input 3 3 abc xyz Output 3 Input 5 6 aaaaa aaaaaa Output 1 -----Note----- In the first example, string \\"abcd\\" can be transformed to \\"abcde\\" by adding one character \'e\' at the end. In the second example, every character in \\"abc\\" needs to be replaced to match \\"xyz\\". In the third example, adding one character \'a\' at the end of \\"aaaaa\\" transforms it into \\"aaaaaa\\".","solution":"def min_operations_to_transform(A, B): n = len(A) m = len(B) # Create a DP table to store the minimum operations dp = [[0] * (m + 1) for _ in range(n + 1)] # Fill the base case values for i in range(1, n + 1): dp[i][0] = i # Deletion case for j in range(1, m + 1): dp[0][j] = j # Insertion case # Fill the DP table for i in range(1, n + 1): for j in range(1, m + 1): if A[i - 1] == B[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1]) + 1 # The answer is in the bottom-right cell of the DP table return dp[n][m]"},{"question":"Create a Balanced Array. Input: First line contains T - Number of test cases. Next T lines each contain an array A of N integers separated by space. Output: For each test case, output \\"YES\\" if the array can be divided into two subarrays with equal sum, otherwise output \\"NO\\". Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ A[i] ≤ 1000 Example Input: 2 4 1 2 3 4 3 2 1 2 Example Output: YES NO","solution":"def can_be_balanced(arr): total_sum = sum(arr) if total_sum % 2 != 0: return \\"NO\\" target_sum = total_sum // 2 n = len(arr) dp = [[False] * (target_sum + 1) for _ in range(n + 1)] for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): for j in range(1, target_sum + 1): if arr[i - 1] <= j: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]] else: dp[i][j] = dp[i - 1][j] return \\"YES\\" if dp[n][target_sum] else \\"NO\\" def balanced_arrays(test_cases): results = [] for arr in test_cases: results.append(can_be_balanced(arr)) return results"},{"question":"After successfully resisting alien attacks for decades, Earth has now developed a system of defense towers. Each tower has limited energy, and each attack on Earth will deplete the energy of one or more towers. As a lead software engineer of Earth\'s Defense System, your task is to develop a simulation of energy depletions and report the status of the towers after a series of attacks. The defense system will track `n` towers, each with an initial energy level. Each attack is characterized by a range of towers and an energy decrease value. If a tower\'s energy level drops to or below zero, it is considered disabled. Constraints * 1 ≤ n ≤ 100 * 1 ≤ number of attacks ≤ 1000 * Initial energy levels and decrease values are integers in the range [1, 10000] Input The first line contains an integer, `n`, representing the number of defense towers. The second line contains `n` integers representing the initial energy levels of the towers. The third line contains an integer, `m`, representing the number of attacks. The next `m` lines each contain three integers, `l`, `r`, and `d`, which describe an attack, where: * `l` is the starting index of the range of towers (1-based index). * `r` is the ending index of the range of towers (1-based index). * `d` is the energy decrease value. Output For each test case, output the current energy levels of all towers in a single line after applying all attacks. Use a space to separate the energy levels. Example Input 5 100 200 150 130 110 3 1 3 50 2 5 120 3 4 90 Output 50 30 0 10 -10 Explanation Initially, towers have energy levels [100, 200, 150, 130, 110]. 1. After the first attack (1 3 50), the levels are [50, 150, 100, 130, 110]. 2. After the second attack (2 5 120), the levels become [50, 30, -20, 10, -10]. 3. After the third attack (3 4 90), the final levels are [50, 30, -110, -80, -10]. Since tower energy levels can become negative, it indicates the tower is disabled.","solution":"def simulate_tower_defense(n, initial_levels, attacks): Simulate the energy levels of defense towers after a series of attacks. Parameters: n (int): Number of towers initial_levels (List[int]): Initial energy levels of the towers attacks (List[Tuple[int, int, int]]): Each tuple contains three integers (l, r, d) that describe an attack, where: - l: starting index of the range of towers (1-based index) - r: ending index of the range of towers (1-based index) - d: energy decrease value Returns: List[int]: The final energy levels of the towers after applying all attacks # Convert 1-based indices to 0-based for l, r, d in attacks: for i in range(l-1, r): initial_levels[i] -= d return initial_levels # Example usage n = 5 initial_levels = [100, 200, 150, 130, 110] attacks = [(1, 3, 50), (2, 5, 120), (3, 4, 90)] result = simulate_tower_defense(n, initial_levels, attacks) # Output should be [50, 30, -110, -80, -10] print(result)"},{"question":"You are given a grid of m times n cells. Each cell can be either land (represented by \'1\') or water (represented by \'0\'). You are required to find the largest rectangular island in the grid. An island is formed by connecting adjacent lands horizontally or vertically. The area of an island is the number of \'1\'s in that island. Your task is to find the maximum area of a rectangular island in the grid. -----Input:----- - First line contains two integers m and n indicating the number of rows and columns in the grid respectively. - Next m lines will each contain n characters (\'0\' or \'1\') separated by space. -----Output:----- Print a single integer representing the maximum area of a rectangular island in the grid. -----Constraints----- - 1 leq m, n leq 100 -----Sample Input:----- 5 6 1 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 0 0 0 0 1 0 0 1 1 0 0 0 1 -----Sample Output:----- 6 -----Explanation:----- The largest rectangular island of land has an area of 6, forming the 2x3 submatrix: 1 1 1 1 1 1","solution":"def maximal_rectangle(grid): if not grid: return 0 m, n = len(grid), len(grid[0]) heights = [0] * (n + 1) max_area = 0 for row in grid: for i in range(n): heights[i] = heights[i] + 1 if row[i] == \'1\' else 0 stack = [-1] for i in range(n + 1): while heights[i] < heights[stack[-1]]: h = heights[stack.pop()] w = i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) return max_area"},{"question":"In a programming contest, you are asked to help develop a feature for a mobile banking application. This feature computes the minimum number of coins required to make a given amount of change using the available denominations. The application should allow for dynamic addition and removal of coin denominations. Your task is to implement a class `CoinChanger` with the following methods: - `add_coin(denomination: int)`: Adds a coin denomination to the list of available denominations. - `remove_coin(denomination: int)`: Removes a coin denomination from the list of available denominations. - `min_coins(amount: int) -> int`: Returns the minimum number of coins required to make the given amount of change. If the amount cannot be made with the available denominations, `min_coins` should return -1. -----Input----- The input consists of a list of operations in the form of strings. Each string represents an operation and has the following possible formats: - `\\"add D\\"`: adds denomination `D` to the list of denominations. - `\\"remove D\\"`: removes denomination `D` from the list of denominations. - `\\"min_coins A\\"`: returns the minimum number of coins needed to make amount `A` You can assume that `D` and `A` are positive integers, and `1 <= D, A <= 1000`. -----Output----- For each `\\"min_coins A\\"` operation, output the result on a new line. -----Examples----- Sample Input: ``` [ \\"add 1\\", \\"add 5\\", \\"add 10\\", \\"add 25\\", \\"min_coins 11\\", \\"remove 1\\", \\"min_coins 11\\" ] ``` Sample Output: ``` 2 -1 ``` For the example above, the initial denominations are `1, 5, 10, 25`. To make the amount `11`, the minimum number of coins needed is `2` (one `10` coin and one `1` coin). After removing the `1` denomination, it is no longer possible to make `11`, so the output is `-1`.","solution":"from typing import List class CoinChanger: def __init__(self): self.denominations = [] def add_coin(self, denomination: int): if denomination not in self.denominations: self.denominations.append(denomination) self.denominations.sort() def remove_coin(self, denomination: int): if denomination in self.denominations: self.denominations.remove(denomination) def min_coins(self, amount: int) -> int: if not self.denominations: return -1 dp = [float(\'inf\')] * (amount + 1) dp[0] = 0 for i in range(1, amount + 1): for coin in self.denominations: if i >= coin: dp[i] = min(dp[i], dp[i - coin] + 1) return dp[amount] if dp[amount] != float(\'inf\') else -1 def process_operations(operations: List[str]) -> List[int]: changer = CoinChanger() results = [] for operation in operations: parts = operation.split() if parts[0] == \\"add\\": changer.add_coin(int(parts[1])) elif parts[0] == \\"remove\\": changer.remove_coin(int(parts[1])) elif parts[0] == \\"min_coins\\": results.append(changer.min_coins(int(parts[1]))) return results"},{"question":"The museum has n visitor groups that can visit at different times throughout the day. The museum operates in 7 distinct 1-hour visitation slots numbered from 1 to 7. You need to ensure that each group has an assigned guide for their visit. Note that one guide can only lead one group in a single time slot. Your task is to determine the minimum number of guides needed to lead all group visits on a given day. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of visitor groups. Each of the following n lines contains a sequence consisting of 7 zeroes and ones — the visitation schedule for each group. If the symbol in a position equals to 1 then the group visits the museum in the corresponding time slot. Otherwise, the group does not visit the museum in that time slot. -----Output----- Print the minimum number of guides required to lead all group visits on that day. -----Examples----- Input 2 0110001 1000100 Output 1 Input 3 1100001 0010110 0001110 Output 2 -----Note----- In the first example, one guide is sufficient since each time slot is occupied by at most one group. In the second example, two guides are required because there are two groups visiting during the fifth time slot (0010110 and 0001110).","solution":"def min_number_of_guides(n, schedules): Returns the minimum number of guides required to lead all group visits on a given day. :param n: Number of visitor groups :param schedules: A list of visitation schedules, each represented by a string of 7 zeroes and ones :return: Minimum number of guides required slots = [0] * 7 # there are 7 time slots for schedule in schedules: for i in range(7): if schedule[i] == \'1\': slots[i] += 1 return max(slots)"},{"question":"In many programming languages, parentheses are used to indicate precedence in expressions. Each opening parenthesis must have a corresponding closing parenthesis and they must properly nest. Given a sequence consisting of only the characters \'(\' and \')\', you need to determine whether it is a valid parentheses sequence. A valid parentheses sequence is defined as follows: 1. An empty sequence is valid. 2. If \\"A\\" and \\"B\\" are valid sequences, then \\"AB\\" (concatenation) is a valid sequence. 3. If \\"A\\" is a valid sequence, then \\"(A)\\" is a valid sequence. Your task is to write a function that checks if the given sequence of parentheses is valid. -----Input----- The input consists of a single line containing a string S of length N (1 ≤ N ≤ 10^6), where each character is either \'(\' or \')\'. -----Output----- Output \\"YES\\" if the sequence is valid, otherwise output \\"NO\\". -----Examples----- Input (()()) Output YES Input (()))( Output NO Input ((()) Output NO","solution":"def is_valid_parentheses_sequence(s): Determines if a given parentheses sequence is valid. Parameters: s (str): The parentheses sequence Returns: str: \\"YES\\" if the sequence is valid, \\"NO\\" otherwise stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return \\"NO\\" stack.pop() return \\"YES\\" if not stack else \\"NO\\""},{"question":"Given a list of n integers and a positive integer k, determine the k-th largest unique number in the list. If there are fewer than k unique numbers, return -1. Constraints: * 1 ≤ n ≤ 10^5 * -10^9 ≤ elements of the list ≤ 10^9 * 1 ≤ k ≤ n Input: n k A line containing n integers representing the list. Output: Print the k-th largest unique number in the list, or -1 if there are fewer than k unique numbers. Examples: Input 10 3 5 2 4 6 8 2 3 6 5 7 Output 6 Input 5 2 4 10 20 20 5 Output 10 Input 3 5 4 2 3 Output -1","solution":"def kth_largest_unique_number(n, k, num_list): from heapq import nlargest unique_numbers = list(set(num_list)) if len(unique_numbers) < k: return -1 unique_numbers.sort(reverse=True) return unique_numbers[k - 1] # Example usage: # print(kth_largest_unique_number(10, 3, [5, 2, 4, 6, 8, 2, 3, 6, 5, 7])) # Output: 6 # print(kth_largest_unique_number(5, 2, [4, 10, 20, 20, 5])) # Output: 10 # print(kth_largest_unique_number(3, 5, [4, 2, 3])) # Output: -1"},{"question":"Shopping Mall Management decided to award loyal customers who have made at least one purchase every month for the past M months. You are provided with customer purchasing records, and you need to identify loyal customers based on this criteria. INPUT The first line of input contains two integers N (number of customers) and M (number of months). The next N lines each contain M integers separated by space. Each line represents a customer\'s purchase record for M months (1 if purchased, 0 otherwise). OUTPUT For each customer, output \\"Loyal\\" if the customer has made at least one purchase every month for the past M months, otherwise output \\"Not Loyal\\". CONSTRAINTS 1 ≤ N ≤ 10^5 1 ≤ M ≤ 12 SAMPLE INPUT 3 6 1 1 1 0 1 1 1 1 1 1 1 1 0 0 1 0 1 1 SAMPLE OUTPUT Not Loyal Loyal Not Loyal Explanation Customer 1 missed a purchase in the 4th month. Customer 2 made purchases every month. Customer 3 missed purchases in the 1st and 2nd months.","solution":"def loyal_customers(records): Determines if customers are loyal or not based on their purchase records. Args: records (list of list of int): Purchase records of customers. Returns: list of str: List of \\"Loyal\\" or \\"Not Loyal\\" for each customer. result = [] for record in records: if all(month == 1 for month in record): result.append(\\"Loyal\\") else: result.append(\\"Not Loyal\\") return result # Example usage: # N, M = 3, 6 # records = [ # [1, 1, 1, 0, 1, 1], # [1, 1, 1, 1, 1, 1], # [0, 0, 1, 0, 1, 1] # ] # print(loyal_customers(records)) # Output: [\\"Not Loyal\\", \\"Loyal\\", \\"Not Loyal\\"]"},{"question":"You are organizing a series of recreational activities for a company\'s employees. Each activity has a specific number of slots available, and each participant can register for one activity only. Additionally, some activities are more popular than others, so you wish to ensure that as many participants as possible get into their preferred activity. You are given a list of activities with their respective slot counts and a list of participants with their preference rankings for the activities. Your task is to assign participants to activities such that the total number of participants who get their most preferred activity is maximized, followed by those who get their second most preferred activity, and so on. -----Input----- The first line contains two integers m (1 leq m leq 100) and p (1 leq p leq 300), where m is the number of activities and p is the number of participants. The second line contains m integers representing the number of slots available for each activity. The next p lines each contain m integers. The i-th integer on the j-th line indicates the preference ranking (1 being the highest preference) of the j-th participant for the i-th activity. -----Output----- Output p lines, each containing one integer. The i-th integer on the j-th line should be the index (1-indexed) of the activity assigned to the j-th participant. If a participant cannot be assigned to any activity, output 0 for that participant. -----Examples----- Sample Input: 3 5 2 1 2 1 2 3 2 1 3 3 2 1 1 3 2 2 3 1 Sample Output: 1 2 3 1 3","solution":"def assign_activities(m, p, slots, preferences): assignments = [0] * p filled_slots = [0] * m for pref_level in range(1, m + 1): for idx in range(p): if assignments[idx] != 0: continue for activity in range(m): if preferences[idx][activity] == pref_level and filled_slots[activity] < slots[activity]: assignments[idx] = activity + 1 filled_slots[activity] += 1 break return assignments # Example use case with the given inputs m = 3 p = 5 slots = [2, 1, 2] preferences = [ [1, 2, 3], [2, 1, 3], [3, 2, 1], [1, 3, 2], [2, 3, 1] ] output = assign_activities(m, p, slots, preferences) print(output)"},{"question":"You are given an initial list of integers and an operation that you can perform on it. The operation consists of choosing any two adjacent elements in the list and removing them, then placing their sum at the position where they were. The goal is to transform the initial list into exactly one element by repeatedly performing this operation. You need to determine the value of the final single element you obtain, and the total cost of all operations. Each operation\'s cost is defined as the sum of the two numbers that were removed in that operation. Constraints: * 1 leq N leq 10^5 (where N is the number of elements in the initial list) * 1 leq a_i leq 10^9 (where a_i are the integers in the list) Input: The input is given from Standard Input. The first line of input is an integer N, representing the number of elements in the initial list. The second line contains N space-separated integers representing the elements of the initial list. Output: Print two integers separated by a space: the value of the final single element, and the total cost of all operations. Example: Input: 5 4 2 1 3 6 Output: 16 35 Explanation: Starting with the list [4, 2, 1, 3, 6], the sequence of operations could be: 1. Remove 4 and 2, insert 6. Cost = 4+2 = 6. 2. Remove 6 and 1, insert 7. Cost = 6+1 = 7. 3. Remove 7 and 3, insert 10. Cost = 7+3 = 10. 4. Remove 10 and 6, insert 16. Cost = 10+6 = 16. Total final value = 16. Total cost = 6 + 7 + 10 + 16 = 39.","solution":"def minimize_cost_to_single_element(nums): Returns the final single element and the total cost to achieve it. Args: nums (list): List of integers representing initial elements. Returns: tuple: (final single element, total cost) import heapq # Using heap (priority queue) heapq.heapify(nums) total_cost = 0 while len(nums) > 1: # Take the two smallest elements first = heapq.heappop(nums) second = heapq.heappop(nums) # Sum them and calculate cost current_sum = first + second total_cost += current_sum # Push the resultant element back into the heap heapq.heappush(nums, current_sum) # The last element in the heap is the final single element final_single_element = heapq.heappop(nums) return final_single_element, total_cost"},{"question":"Longest Palindromic Subsequence A palindromic subsequence is a sequence that reads the same backward as forward. Given a string ( s ), the goal is to find the length of its longest palindromic subsequence. For example, consider the string ( s = \\"bbbab\\" ). One possible longest palindromic subsequence is \\"bbbb\\", which has a length of 4. Write a function that takes a string ( s ) as input and returns the length of the longest palindromic subsequence. # Input - A single string ( s ) with length ( 1 leq |s| leq 1000 ). The string ( s ) consists only of lowercase English letters. # Output - A single integer representing the length of the longest palindromic subsequence in the input string. # Example Input: ``` bbbab ``` Output: ``` 4 ``` Input: ``` cbbd ``` Output: ``` 2 ``` # Note - In the first example, the longest palindromic subsequence is \\"bbbb\\", which has a length of 4. - In the second example, the longest palindromic subsequence is either \\"bb\\" or \\"cc\\", both of which have a length of 2.","solution":"def longest_palindromic_subsequence(s): Returns the length of the longest palindromic subsequence in the input string s. n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]) return dp[0][n - 1]"},{"question":"You are working on a project to simulate the operation of a smart warehouse where robots are tasked with moving goods between different shelves. Each shelf is represented as a node in a graph, and the edges between nodes represent the paths that the robots can take. Each path (edge) has a positive weight representing the time it takes for a robot to travel between two shelves (nodes). Due to various constraints, only a subset of nodes is accessible at any given time, and you want to determine the shortest path from a given starting node to all other nodes. Create a program that finds the shortest path from a single source node to all other nodes in a weighted, undirected graph. -----Input----- - The first line contains two integers, n and m (1 leq n leq 1000, 0 leq m leq 5000), representing the number of nodes and the number of edges in the graph, respectively. - Each of the next m lines contains three integers u, v, w (1 leq u, v leq n, 1 leq w leq 10^6) representing an edge between nodes u and v with weight w. - The last line contains a single integer s (1 leq s leq n), representing the starting node for the shortest path calculation. -----Output----- - Output n integers where the i-th integer represents the minimum time to reach node i from the starting node s. If a node is not reachable, output -1 for that node. -----Examples----- Sample Input: 5 6 1 2 2 1 3 4 2 3 1 2 4 7 3 4 3 4 5 1 1 Sample Output: 0 2 3 6 7","solution":"import heapq def dijkstra(n, edges, start): # Create an adjacency list to represent the graph graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Initialize distances array: distance to start node is 0, rest are infinite dist = [float(\'inf\')] * (n + 1) dist[start] = 0 # Priority queue to store the nodes to visit, starting with the start node pq = [(0, start)] while pq: current_dist, node = heapq.heappop(pq) # If the distance to this node in the queue is greater than the known shortest distance, skip it if current_dist > dist[node]: continue # Explore all neighbors for neighbor, weight in graph[node]: distance = current_dist + weight # If a shorter path to neighbor is found if distance < dist[neighbor]: dist[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) # Prepare the result, replace \'inf\' with -1 for unreachable nodes result = [dist[i] if dist[i] != float(\'inf\') else -1 for i in range(1, n + 1)] return result"},{"question":"You are given a positive integer n. You need to find the length of the longest sequence of numbers such that the sum of the sequence\'s elements is n, and each element in the sequence should be of the form (2^k), where k is a non-negative integer, and each element should be used exactly once. Input: - A single integer n (1 ≤ n ≤ 10^18). Output: - A single integer representing the length of the longest sequence such that the sum of its elements equals n. Examples: Input: 9 Output: 2 Input: 15 Output: 4 Input: 23 Output: 3 Explanation: In the first sample, the sequence is [8, 1]. The sequence is of length 2, and their sum is 9 (8 + 1 = 9). In the second sample, the sequence is [8, 4, 2, 1]. The sequence is of length 4, and their sum is 15 (8 + 4 + 2 + 1 = 15). In the third sample, the sequence is [16, 4, 2, 1]. The sequence is of length 3, and their sum is 23 (16 + 4 + 2 + 1 = 23).","solution":"def longest_sequence_length(n): Returns the length of the longest sequence such that the sum of its elements equals n and each element is a power of 2. length = 0 while n > 0: highest_power_of_2 = n.bit_length() - 1 # Find the highest power of 2 less than or equal to n, i.e., 2^k n -= 1 << highest_power_of_2 # Subtract 2^k from n length += 1 # Increase the count of elements return length"},{"question":"You are given a string containing only the digits \'2\' and \'3\'. Write a function to determine the length of the longest substring that contains an equal number of \'2\'s and \'3\'s. Example 1: Input: S = \\"2323\\" Output: 4 Explanation: The entire string \\"2323\\" contains an equal number of \'2\'s and \'3\'s. So, the output is 4. Example 2: Input: S = \\"2233\\" Output: 4 Explanation: The entire string \\"2233\\" contains an equal number of \'2\'s and \'3\'s. So, the output is 4. Example 3: Input: S = \\"22233\\" Output: 4 Explanation: The longest substring with an equal number of \'2\'s and \'3\'s is \\"2233\\". So, the output is 4. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findLongestEqualSubstring(), which takes the string S as input and returns the length of the longest substring with an equal number of \'2\'s and \'3\'s. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= |S| <= 10^5 S[i] is either \'2\' or \'3\'","solution":"def findLongestEqualSubstring(S): Returns the length of the longest substring containing an equal number of \'2\'s and \'3\'s. n = len(S) balance = 0 first_occurrence = {0: -1} max_length = 0 for i in range(n): if S[i] == \'2\': balance += 1 elif S[i] == \'3\': balance -= 1 if balance in first_occurrence: max_length = max(max_length, i - first_occurrence[balance]) else: first_occurrence[balance] = i return max_length"},{"question":"Write a function to determine if a given schedule of meeting times conflicts with each other. # Problem Statement You are given a list of meetings, where each meeting is represented by its start time and end time. Your task is to write a function `is_schedule_conflict(meetings)` that determines whether there is any conflict in the schedule. A conflict exists if any two meetings overlap, meaning one meeting starts before the other ends. # Input - A list of tuples, where each tuple contains two integers representing the start and end time of a meeting. All times are given in a 24-hour format without a date. Each tuple is sorted in non-decreasing order of start times. # Output - Return `True` if there is a conflict in the schedule, `False` otherwise. # Function Signature ```python def is_schedule_conflict(meetings: List[Tuple[int, int]]) -> bool: ``` # Constraints - The number of meetings can vary between 1 to 10^5. - Meeting times are in the range [0, 2*10^5]. # Examples Example 1 **Input:** `[(1, 5), (6, 10), (11, 15)]` **Output:** `False` Example 2 **Input:** `[(1, 5), (4, 9), (10, 15)]` **Output:** `True` Example 3 **Input:** `[(9, 12), (1, 3), (4, 8), (5, 6)]` **Output:** `True` # Explanation - In Example 1, no meetings overlap, hence the function returns `False`. - In Example 2, the second meeting starts before the first meeting ends, hence the function returns `True`. - In Example 3, there is an overlap between the third and fourth meetings, hence the function returns `True`.","solution":"from typing import List, Tuple def is_schedule_conflict(meetings: List[Tuple[int, int]]) -> bool: Determines if there is a conflict in the given meeting schedule. Args: meetings (List[Tuple[int, int]]): A list of tuples where each tuple contains the start and end times of a meeting. Returns: bool: True if there is a conflict, False otherwise. # Sort the meetings by start time meetings.sort(key=lambda x: x[0]) # Iterate through the meetings and check for overlap for i in range(1, len(meetings)): if meetings[i][0] < meetings[i-1][1]: return True return False"},{"question":"# Definition (Harshad Number) *A Harshad number* (or Niven number) *is an integer that is divisible by the sum of its digits.* ___ # Task **_Given_** *a number N*, **_determine if it is a Harshad number_**. ___ # Notes * **_Only positive_** numbers *will be passed (N > 0)*. * *If N is a Harshad number, return \\"True\\". Otherwise, return \\"False\\".* ___ # Input >> Output Examples: ``` python 1- isHarshad(18) ==> return \\"True\\" ``` **_Explanation_**: **_Since_** *the passed number is (18)*, **_it is divisible by the sum of its digits_** *1 + 8 = 9*. # Mathematically written as, **_18 % 9_** = 0. ___ ``` python 2- isHarshad(19) ==> return \\"False\\" ``` **_Explanation_**: **_Since_** *the passed number is (19)*, **_it is not divisible by the sum of its digits_** *1 + 9 = 10*. # Mathematically written as, **_19 % 10_** ≠ 0. ___ ``` python 3- isHarshad(21) ==> return \\"True\\" ``` **_Explanation_**: **_Since_** *the passed number is (21)*, **_it is divisible by the sum of its digits_** *2 + 1 = 3*. # Mathematically written as, **_21 % 3_** = 0. ___ ___ ___ All translations are welcomed Enjoy Learning !!","solution":"def isHarshad(n): Determines if a number n is a Harshad (or Niven) number. Returns \\"True\\" if it is, otherwise \\"False\\". sum_of_digits = sum(int(digit) for digit in str(n)) return \\"True\\" if n % sum_of_digits == 0 else \\"False\\""},{"question":"The city of Codestown is organizing a marathon, and participants are expected to run from the starting point to the finish line. The race track is a straight path divided into equal segments, each segment being 1 meter long. Certain segments of the track have obstacles which cannot be crossed, and participants can only run along segments without obstacles. Given the length of the race track, the positions of obstacles, and the maximum distance a participant can jump in a single leap, determine if the participant can reach the finish line starting from the first segment. Constraints: * 2 leq L leq 10^5 (L: Length of the track in meters) * 1 leq J leq 1000 (J: Maximum distance in meters the participant can jump in a single leap) * 0 leq O leq L-2 (O: Number of obstacles) * 0 leq P_i < L-1 (P_i: The 0-indexed positions of obstacles) Input: Input is given from Standard Input in the following format: L J O P_1 P_2 ... P_O Output: Print \\"YES\\" if the participant can reach the finish line, otherwise print \\"NO\\". Examples: Input: 10 2 3 1 4 6 Output: YES Input: 10 2 3 1 2 3 Output: NO Input: 5 3 1 2 Output: YES Input: 5 1 1 3 Output: NO","solution":"def can_finish_marathon(L, J, O, obstacles): Determines if the participant can reach the finish line of the marathon. Args: L: Length of the track in meters (integer). J: Maximum distance in meters the participant can jump in a single leap (integer). O: Number of obstacles (integer). obstacles: List of 0-indexed positions of obstacles (list of integers). Returns: \\"YES\\" if the participant can reach the finish line; otherwise, \\"NO\\". track = [0] * L for obstacle in obstacles: track[obstacle] = 1 current_position = 0 while current_position < L - 1: jump_possible = False for i in range(J, 0, -1): if current_position + i < L and track[current_position + i] == 0: current_position += i jump_possible = True break if not jump_possible: return \\"NO\\" return \\"YES\\""},{"question":"Miko loves strings, and she recently found a string s consisting of lowercase English letters. She wants to know the length of the longest substring of s that contains exactly k distinct characters. Help Miko by writing a function that receives a string s and an integer k, and returns the length of the longest substring that contains exactly k distinct characters. -----Input----- The first line contains a string s consisting of n lowercase English letters (1 leq n leq 10^5). The second line contains an integer k (1 leq k leq 26). -----Output----- Print a single integer — the length of the longest substring that contains exactly k distinct characters. -----Examples----- Input abaccc 2 Output 4 Input aaaa 1 Output 4 Input abc 4 Output 0 -----Note----- In the first example, the longest substring that contains exactly 2 distinct characters is \\"abac\\" which has a length of 4. In the second example, the entire string \\"aaaa\\" has exactly 1 distinct character, and its length is 4. In the third example, there is no substring that contains exactly 4 distinct characters since the length of the original string is 3. Thus, the output is 0.","solution":"def longest_substring_with_k_distinct(s, k): from collections import defaultdict n = len(s) if k > n: return 0 char_count = defaultdict(int) left = 0 max_len = 0 for right in range(n): char_count[s[right]] += 1 while len(char_count) > k: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 if len(char_count) == k: max_len = max(max_len, right - left + 1) return max_len"},{"question":"You are given a string which represents an arithmetic expression in infix notation where the operands can be one-digit integers or upper-case letters (A-Z). Convert this expression into its equivalent postfix expression. Example: Input: A+B*(C^D-E) Output: ABCD^E-*+ Explanation: The above output is its valid postfix form. Your Task: Complete the function string infixToPostfix(string infix_exp), which takes an infix string as input and returns its postfix form. Expected Time Complexity: O(N). Expected Auxiliary Space: O(N). Constraints: 1<=infix_exp.length()<=1000","solution":"def infixToPostfix(infix_exp): precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2, \'^\': 3} output = [] stack = [] for char in infix_exp: if char.isalpha() or char.isdigit(): output.append(char) elif char == \'(\': stack.append(char) elif char == \')\': while stack and stack[-1] != \'(\': output.append(stack.pop()) stack.pop() else: while stack and stack[-1] != \'(\' and precedence[stack[-1]] >= precedence.get(char, 0): output.append(stack.pop()) stack.append(char) while stack: output.append(stack.pop()) return \'\'.join(output)"},{"question":"High School students are trying to host a carnival in their gymnasium, where the floor is covered with tiles. Unfortunately, some tiles are damaged and cannot hold any booths. They need to determine the placement of the largest continuous rectangular area of booths. Your task is to help them find the largest rectangular area and calculate its size. The gymnasium floor is represented by an m x n grid of integers. A \'1\' indicates a good tile, while a \'0\' indicates a damaged tile. Your goal is to find the area of the largest rectangle containing only \'1\'s. Function Description Complete the maxRectangle function in the editor below. It should return an integer representing the size of the largest rectangle. maxRectangle has the following parameter: - grid: a 2D array of integers representing the gymnasium floor Input Format The first line contains two space-separated integers, m (number of rows) and n (number of columns). Each of the next m lines contains n space-separated integers (either 0 or 1, indicating the state of each tile). Constraints 1 leq m, n leq 200 Output Format Output contains a single integer - the area of the largest rectangle containing only 1\'s. Sample Input 0 4 4 1 0 1 0 1 0 1 1 1 1 1 1 1 0 0 0 Sample Output 0 4 Explanation 0 The largest rectangle of continuous good tiles is formed by the last two rows and the middle two columns: 1 1 1 1 Its area is 2 times 2 = 4. Sample Input 1 3 5 1 0 1 1 1 1 1 1 1 1 0 1 1 0 1 Sample Output 1 6 Explanation 1 The largest rectangle of continuous good tiles is formed in the second row and spans the first four columns: 1 1 1 1 Its area is 1 times 4 = 4.","solution":"def maxRectangle(grid): if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) max_area = 0 heights = [0] * (n + 1) for row in grid: for i in range(n): if row[i] == 0: heights[i] = 0 else: heights[i] += 1 stack = [-1] for i in range(n + 1): while heights[i] < heights[stack[-1]]: h = heights[stack.pop()] w = i - 1 - stack[-1] max_area = max(max_area, h * w) stack.append(i) return max_area"},{"question":"David is writing a program to manage a leaderboard for a coding competition. The leaderboard starts off empty and players get added when they make their first submission. Each player is identified by a unique username and has a score that represents their performance. When a new score tops their previous best, their leaderboard position moves up, otherwise it remains the same. He wants to implement the following functionality: 1. Add a new score for a player. 2. Retrieve the current top K players from the leaderboard. Write a program that processes a series of operations to manage the leaderboard. Each operation will be either: 1. `add playerName score` - Add a new score for the given player or update their best score. 2. `top K` - Retrieve the current top K players (sorted by score in descending order). If two players have the same score, the player who reached that score first should rank higher. -----Input----- The first line contains an integer Q (1 le Q le 100000), the number of operations. Each of the next Q lines contains an operation as described above. The `playerName` is a string consisting of lowercase letters, and the `score` is a non-negative integer. The command `top K` always has 1 le K le N, where N is the number of players in the leaderboard at that point. -----Output----- For each `top K` command, output the usernames of the top K players, separated by spaces, on a new line. -----Examples----- Sample Input 1: 5 add alice 50 add bob 60 top 1 add alice 70 top 2 Sample Output 1: bob alice bob Sample Input 2: 6 add charlie 40 add alice 90 add alice 80 top 1 add bob 90 top 3 Sample Output 2: alice alice bob charlie","solution":"from typing import List, Tuple import heapq class Leaderboard: def __init__(self): self.scores = {} self.heap = [] def add(self, playerName: str, score: int): if playerName not in self.scores: self.scores[playerName] = score heapq.heappush(self.heap, (-score, playerName)) else: if score > self.scores[playerName]: old_score = self.scores[playerName] self.scores[playerName] = score # Remove the old score entry from heap (removing by pushing a new tuple with -inf) heapq.heappush(self.heap, (-float(\'inf\'), playerName)) # Add the new score to the heap heapq.heappush(self.heap, (-score, playerName)) def top(self, K: int) -> List[str]: seen = set() top_players = [] temp_heap = [] # Extract K top unique scores from the heap while len(top_players) < K: while self.heap: score, playerName = heapq.heappop(self.heap) if playerName not in seen: seen.add(playerName) top_players.append(playerName) temp_heap.append((score, playerName)) if len(top_players) == K: break # Re-heapify the temporary heap back into the main heap for item in temp_heap: heapq.heappush(self.heap, item) return top_players def process_operations(operations: List[str]) -> List[str]: leaderboard = Leaderboard() results = [] for operation in operations: if operation.startswith(\\"add\\"): _, playerName, score = operation.split() score = int(score) leaderboard.add(playerName, score) elif operation.startswith(\\"top\\"): _, K = operation.split() K = int(K) top_players = leaderboard.top(K) results.append(\\" \\".join(top_players)) return results"},{"question":"You are given an array of integers. You are allowed to perform the following operations on the array: 1. Choose any two elements in the array that are adjacent and replace both with their sum. 2. Choose any two elements in the array that are adjacent and replace one of them with the other (i.e., you can effectively remove one of them by replacing it with the adjacent element). Your task is to determine the minimum number of operations required to reduce the array to a single element. # Input - The input consists of multiple test cases. The first line contains a single integer t (1 le t le 5000) — the number of test cases. - The description of the test cases follows. - The first line of each test case contains a single integer n (2 le n le 10^5) — the number of elements in the array. - The second line of each test case contains a sequence of n integers a_1, ldots, a_n (-10^9 le a_i le 10^9). It is guaranteed that the sum of n over all test cases does not exceed 10^5. # Output For each test case, output a single line containing the minimum number of operations required to reduce the array to a single element. # Example Input ``` 3 3 1 2 3 4 1 1 1 1 5 10 -1 2 -3 4 ``` Output ``` 2 3 4 ``` # Note In the first test case, the operations can be performed as follows: - Combine `1` and `2` to get `[3, 3]` - Combine `3` and `3` to get `[6]` In the second test case, the operations can be performed as follows: - Combine the first pair of `1` and `1` to get `[2, 1, 1]` - Combine the first pair of `2` and `1` to get `[3, 1]` - Combine `3` and `1` to get `[4]` In the third test case, the operations can be performed as follows: - Combine `10` and `-1` to get `[9, 2, -3, 4]` - Combine `9` and `2` to get `[11, -3, 4]` - Combine `11` and `-3` to get `[8, 4]` - Combine `8` and `4` to get `[12]`","solution":"def min_operations_to_single_element(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] a = test_cases[i][1] # The minimum number of operations to reduce the array to a single element # is always n-1 when performing the sum operation on adjacent elements results.append(n - 1) return results"},{"question":"Write a function that accepts a list of integers and returns a list of the integers where each element is the product of every other element in the original list. Constraints * The length of the list is between 1 and 100,000 inclusive. * Each integer in the list is between -1,000 and 1,000 inclusive. Input The input is given in the following format. [a_0, a_1, a_2, ldots, a_{n-1}] Output Return a list of integers where each element is the product of all other elements in the given list. Example Input [1, 2, 3, 4] Output [24, 12, 8, 6] Input [0, 1, 2, 3] Output [6, 0, 0, 0] Note: Do not use the division operation for the final implementation to ensure the solution handles zero elements correctly.","solution":"def product_except_self(nums): Returns a list where each element is the product of all other elements in the original list. Args: nums: List of integers Returns: List of integers n = len(nums) if n == 0: return [] left_products = [1] * n right_products = [1] * n for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] result = [left_products[i] * right_products[i] for i in range(n)] return result"},{"question":"You are given an array of integers, and another integer K. You need to find how many subsets of the array add up to K. Recall that a subset is any collection of the array elements, possibly empty. Since the answer can be too large, output it modulo 1,000,000,007 (10^9+7). -----Input----- The first line of the input contains an integer N denoting the number of elements in the array. The second line contains N space-separated integers representing the elements of the array. The third line contains the integer K. -----Output----- Output a single integer which represents the count of subsets whose sum is equal to K, taken modulo 1,000,000,007 (10^9+7). -----Constraints----- - 1 ≤ N ≤ 50 - 0 ≤ array[i] ≤ 1,000 (for 0 ≤ i < N) - 0 ≤ K ≤ 50,000 -----Example----- Input: 3 2 4 6 6 Output: 2 -----Explanation----- Example case 1. The subsets are {2, 4} and {6}, hence the output is 2.","solution":"def count_subsets_with_sum(arr, K): MOD = 1_000_000_007 # Modulo constant N = len(arr) # Initialize the DP table dp = [0] * (K + 1) dp[0] = 1 # There is one subset (the empty subset) that sums to 0 # Update the DP table for each number in the array for num in arr: for j in range(K, num - 1, -1): dp[j] = (dp[j] + dp[j - num]) % MOD return dp[K]"},{"question":"In a kingdom far, far away, there lived a wise and just ruler who believed in the power of knowledge and education. To encourage logical thinking and problem-solving, the ruler designed a unique game for the citizens of the kingdom. The game, known as the \\"Festival of Numbers,\\" involves a series of mathematical challenges that participants must solve to earn rewards. One particular challenge is dedicated to finding the longest contiguous subarray consisting of equal values in an array of natural numbers. To help participants prepare for the festival, you are tasked with writing a program that will assist them in solving this challenge efficiently. Your program will receive multiple queries about different arrays, and for each array, it will need to determine the length of the longest contiguous subarray where all elements are the same. **Input** The first line contains an integer t (1 ≤ t ≤ 10^3) — the number of test cases. Each test case starts with an integer n (1 ≤ n ≤ 10^5) — the length of the array. The next line contains n space-separated natural numbers a1, a2, ..., an (1 ≤ ai ≤ 10^9). **Output** For each test case, print a single line containing the length of the longest contiguous subarray where all elements are the same. **Example Input** 2 7 1 2 2 2 3 3 4 5 5 5 5 5 5 **Example Output** 3 5 **Note** In the first test case, the longest contiguous subarray of equal values is [2, 2, 2], which has a length of 3. In the second test case, the entire array consists of the same value, so the length of the longest contiguous subarray is 5.","solution":"def longest_contiguous_subarray(arr): Returns the length of the longest contiguous subarray consisting of equal values. max_length = 1 current_length = 1 for i in range(1, len(arr)): if arr[i] == arr[i-1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length def solve(t, test_cases): Processes multiple test cases to find the length of the longest contiguous subarray for each test case. results = [] for i in range(t): n, a = test_cases[i] results.append(longest_contiguous_subarray(a)) return results"},{"question":"Nastya came across another intriguing problem involving arrays. She is given an array of integers and needs to perform a series of queries on this array. Each query gives two indices ( l ) and ( r ). For each query, Nastya needs to determine the smallest element in the subarray from index ( l ) to ( r ) (both inclusive). Nastya wants to efficiently answer each query for the given array. -----Input----- The first line contains two integers ( n ) and ( q ) (1 ≤ ( n ), ( q leq 10^5 )), the length of the array and the number of queries respectively. The second line contains ( n ) integers ( a_1, a_2, ldots, a_{n} ) (1 ≤ ( a_i ) ≤ ( 10^9 )) — the elements of the array. The next ( q ) lines each contain two integers ( l ) and ( r ) (1 ≤ ( l leq r leq n )), specifying the range of the subarray for which the minimum element should be found. -----Output----- For each query, print the minimum element in the subarray from index ( l ) to ( r ) (both inclusive). -----Examples----- Input 5 3 2 5 1 4 3 1 3 2 5 3 3 Output 1 1 1 -----Note----- In the first example, the first query asks for the smallest number between indices 1 and 3. The subarray is [2, 5, 1], so the minimum element is 1. The second query asks for the smallest number between indices 2 and 5. The subarray is [5, 1, 4, 3], so the minimum element is 1. The third query asks for the smallest number at index 3, so the answer is 1.","solution":"def find_min_in_subarray(arr, queries): For each query, find the minimum element in the subarray defined by the range [l, r] inclusive. results = [] for l, r in queries: # Remember to adjust the indices since the queries are 1-based and Python lists are 0-based results.append(min(arr[l-1:r])) return results"},{"question":"A certain type of container uses a unique locking and unlocking mechanism. The container tracks its state by a series of toggle operations, where each operation either locks or unlocks the container. The initial state of the container is locked. For this problem, we\'ll define two types of operations: 1. `lock` - This operation locks the container if it is currently unlocked and leaves it locked if it is already locked. 2. `unlock` - This operation unlocks the container if it is currently locked and leaves it unlocked if it is already unlocked. You are given a sequence of operations, and your task is to write a program that determines the final state of the container after performing all the operations in the given sequence. For example, if the initial state is locked and the sequence of operations is [\\"unlock\\", \\"unlock\\", \\"lock\\", \\"lock\\"], the final state of the container would be locked. Input The input consists of multiple datasets. Each dataset is defined on a single line containing a sequence of operations. Each operation is one of the strings \\"lock\\" or \\"unlock\\". The end of the input is represented by a line with a single \\"end\\". Output For each dataset, output either \\"locked\\" or \\"unlocked\\" depending on the final state of the container after performing all the operations. Example Input unlock unlock lock lock lock unlock unlock end Output locked unlocked unlocked","solution":"def container_final_state(operations): Determine the final state of the container after a sequence of operations. :param operations: List of strings [\\"lock\\", \\"unlock\\"] :return: \\"locked\\" or \\"unlocked\\" state = \\"locked\\" for op in operations: if op == \\"lock\\": state = \\"locked\\" elif op == \\"unlock\\": state = \\"unlocked\\" return state def process_input(input_data): Process multiple datasets of operation sequences. :param input_data: A list of strings, each representing a dataset of operations :return: A list of results for each dataset results = [] for data in input_data: if data.strip() == \\"end\\": break operations = data.strip().split() results.append(container_final_state(operations)) return results"},{"question":"A magician is performing a series of tricks using an array of integers. For each trick, he can choose a subarray and make all elements in the chosen subarray equal to the maximum element of that subarray. The magician wants to perform the tricks in such a way that it minimizes the maximum element in the entire array. Your task is to help the magician determine the minimum possible maximum element of the array after performing any number of tricks. --- Input --- The first line contains an integer T denoting the number of test cases. Each test case contains: - The first line has an integer N denoting the size of the array. - The second line contains N integers representing the elements of the array. --- Output --- For each test case, print a single integer - the minimum possible maximum element of the array after performing the tricks. --- Constraints --- 1 leq T leq 10 1 leq N leq 1000 1 leq A[i] leq 10^6 --- Sample Input 1 --- 2 5 3 1 4 1 5 4 1 2 3 4 --- Sample Output 1 --- 2 1 --- Explanation 1 --- For the first test case, one possible sequence of operations to minimize the maximum element would be to select the subarrays `[3, 1]`, `[4]`, and `[1, 5]`, making the array `[2, 2, 2, 2, 2]` where the maximum element is 2. For the second test case, we can make all elements equal to 1 in one trick, resulting in an array `[1, 1, 1, 1]`. Thus, the minimum possible maximum element is 1.","solution":"def min_possible_max_array(T, test_cases): results = [] for case in test_cases: N, arr = case results.append(min(arr)) # The minimum possible maximum element is the minimum element in the array return results"},{"question":"Given a list of integers, determine if there exists a triplet (i, j, k) such that i < j < k and arr[i] < arr[j] < arr[k]. Example 1: Input: arr = [2, 1, 5, 0, 4, 6] Output: True Explanation: The triplet (1, 4, 6) satisfies the condition. Example 2: Input: arr = [5, 4, 3, 2, 1] Output: False Explanation: There is no such triplet in the array. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findTriplet() which takes the list arr as input and returns a boolean indicating whether such a triplet exists. Expected Time Complexity: O(n). Expected Auxiliary Space: O(1). Constraints: 1 <= length of the list <= 10^5 -10^6 <= arr[i] <= 10^6","solution":"def findTriplet(arr): Determines if there exists a triplet (i, j, k) such that i < j < k and arr[i] < arr[j] < arr[k]. :param arr: List of integers :return: Boolean indicating whether such a triplet exists if len(arr) < 3: return False # Initialize the smallest and second smallest elements first = second = float(\'inf\') for num in arr: if num <= first: first = num elif num <= second: second = num else: return True return False"},{"question":"The Integer Flow, a popular coding game, presents you with the following task: You are given an integer `n`, and you need to determine if there exists a permutation of the digits from 1 to `n` that forms a sequence such that the absolute difference between any two adjacent digits is at most 2. If such a permutation exists, print \\"YES\\" and the permutation. If no such permutation exists, print \\"NO\\". Input The input consists of a single integer `n` (1 ≤ n ≤ 100). Output If a valid permutation exists, print \\"YES\\" followed by the permutation in a single line separated by spaces. If no valid permutation exists, print \\"NO\\". Example Input 5 Output YES 1 2 3 4 5 Input 10 Output NO Note: - In the first example, the sequence `1 2 3 4 5` has an absolute difference of 1 between any two adjacent elements. - In the second example, no valid permutation can be formed for `n = 10` that satisfies the given conditions.","solution":"def integer_flow(n): Determines if there exists a permutation of digits from 1 to n such that the absolute difference between any two adjacent digits is at most 2. if n < 4: # For n < 4, we can always find a permutation meeting the criteria return \\"YES\\", list(range(1, n + 1)) if n == 4: # The specific case for n == 4 which also fits the pattern return \\"YES\\", [1, 3, 2, 4] else: # For n >= 5, it\'s generally true that no such permutation exists return \\"NO\\","},{"question":"In a distant kingdom, there exists an ancient library filled with scrolls, each containing valuable knowledge. However, these scrolls are encrypted with a special code that only the wise sages of the kingdom can decipher. These sages have a peculiar way of encoding information using a combination of prime factors of a number. To unlock the secrets of a scroll, you need to find the sum of unique prime factors of a given number. The wise sages know that all numbers can be expressed as a product of prime numbers, which is known as the prime factorization of a number. Your task is to help the kingdom by writing a program that, given a number, finds the sum of its unique prime factors. Input The input consists of a single integer n (2 ≤ n ≤ 10^12), the number on the scroll. Output Print a single integer, which is the sum of all unique prime factors of n. Examples Input 28 Output 10 Input 60 Output 10 Input 97 Output 97 Note For the first example, 28 can be factorized as 2 × 2 × 7. The unique prime factors are 2 and 7, and their sum is 2 + 7 = 9. For the second example, 60 can be factorized as 2 × 2 × 3 × 5. The unique prime factors are 2, 3, and 5, and their sum is 2 + 3 + 5 = 10. For the third example, 97 is already a prime number, so the sum of its unique prime factors is 97.","solution":"def sum_of_unique_prime_factors(n): Given an integer n (2 ≤ n ≤ 10^12), return the sum of its unique prime factors. def get_prime_factors(num): prime_factors = set() # Check for the number of 2s while num % 2 == 0: prime_factors.add(2) num //= 2 # Check for odd factors from 3 upwards for i in range(3, int(num**0.5) + 1, 2): while num % i == 0: prime_factors.add(i) num //= i # This condition is to check if num is a prime greater than 2 if num > 2: prime_factors.add(num) return prime_factors prime_factors = get_prime_factors(n) return sum(prime_factors)"},{"question":"John is developing a video game and needs to design a new feature for his game: a potion mixing system. In the game, there are several potions, each with a certain effect value. Players can mix two potions to create a new potion with the combined effect of both. However, the act of mixing potions has a cost, and John wants to help the players minimize this cost. Specifically, when players mix two potions, the cost is equal to the sum of the effect values of the two potions. The resulting potion will have an effect value equal to the sum of the effect values of the original two. Given an initial list of potion effect values, determine the minimum total cost required to mix all the potions down to a single potion. Input - The first line contains an integer n (1 ≤ n ≤ 2·105) — the number of potions. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 104) — the effect values of the potions. Output - Output one integer — the minimum total cost required to mix all the potions into one. Example Input 4 4 3 2 6 Output 29 Explanation - Mix 2 and 3 (cost = 2+3=5), new potion: [4, 5, 6] - Mix 4 and 5 (cost = 4+5=9), new potion: [9, 6] - Mix 9 and 6 (cost = 9+6=15), final potion: [15] Total cost = 5 + 9 + 15 = 29","solution":"import heapq def minimum_potion_mixing_cost(n, potions): Calculate the minimum total cost to mix all potions into one. Parameters: n (int): The number of potions. potions (list): A list of integers denoting the effect values of the potions. Returns: int: The minimum total cost of mixing the potions. if n <= 1: return 0 heapq.heapify(potions) total_cost = 0 while len(potions) > 1: first = heapq.heappop(potions) second = heapq.heappop(potions) cost = first + second total_cost += cost heapq.heappush(potions, cost) return total_cost"},{"question":"You are organizing a coding contest and you want to set up a leaderboard that displays the results of the participants. You have n participants, and each participant has attempted m problems in the contest. Each problem has a specific weight associated with it, indicating how much score it will contribute to if solved. Given a matrix where the i-th row contains information about the i-th participant\'s results for all m problems, you need to calculate the total score for each participant and sort them in descending order of their scores. If two participants have the same score, they should appear in the order of their original entry (i.e., the one who appeared earlier in the input should come first). Your task is to write a program that reads the results of the participants, calculates their scores, and prints the leaderboard. -----Input----- The first line of the input contains two integers n and m (1 le n, m le 100) — the number of participants and the number of problems. The second line of the input contains m integers w_1, w_2, dots, w_m (1 le w_i le 100), where w_i is the weight of the i-th problem. Each of the next n lines contains m integers, either 1 or 0. The j-th integer in the i-th row indicates whether the i-th participant solved the j-th problem (1 for solved, 0 for unsolved). -----Output----- Print n lines, each containing a single integer — the total score of each participant in decreasing order. If two participants have the same score, they should appear in the order of their original entry. -----Example----- Input 3 4 2 3 4 5 1 0 1 0 0 1 1 1 1 1 0 1 Output 12 12 6","solution":"def calculate_leaderboard(n, m, weights, results): Calculates and sorts the total scores of participants based on their solved problems and the given weights. :param n: Number of participants :param m: Number of problems :param weights: List of weights associated with each problem :param results: List of results for each participant :return: List of total scores in descending order scores = [] # Calculate the total score for each participant for i in range(n): score = sum(weights[j] if results[i][j] == 1 else 0 for j in range(m)) scores.append((score, i)) # Keep track of the original index # Sort the scores in descending order, keep the original order in case of tie scores.sort(key=lambda x: (-x[0], x[1])) # Extract only the scores for the final output sorted_scores = [score for score, _ in scores] return sorted_scores"},{"question":"You are given a string consisting of lowercase English letters. You need to process q queries on the string. Each query is of one of the following types: 1. Change the character at position pi to character ci. 2. Count the number of distinct characters in the substring from li to ri (inclusive). Input The first line contains a single string s (1 ≤ |s| ≤ 100,000) — the input string. The second line contains an integer q (1 ≤ q ≤ 100,000) — the number of queries. Each of the following q lines contains a query in one of the following formats: - \\"1 pi ci\\" (1 ≤ pi ≤ |s|, ci is a lowercase English letter): Change the character at position pi to ci. - \\"2 li ri\\" (1 ≤ li ≤ ri ≤ |s|): Count the number of distinct characters in the substring from li to ri. Output For each query of type 2, output the number of distinct characters in the substring from li to ri. Examples Input ``` abcabc 5 2 1 3 1 3 d 2 1 3 2 4 6 1 2 a ``` Output ``` 3 3 3 ``` Explanation In the first query, the substring from position 1 to position 3 is \\"abc\\", which has 3 distinct characters. In the second query, after changing the character at position 3 to \'d\', the new substring from position 1 to position 3 is \\"abd\\", which still has 3 distinct characters. In the third query, the substring from position 4 to position 6 is \\"abc\\", which has 3 distinct characters. After the last update, the string becomes \\"aadabc\\".<|vq_2188|>","solution":"def process_queries(s, queries): s = list(s) # Convert string to list for mutable operations results = [] for query in queries: query = query.split() if query[0] == \'1\': pi, ci = int(query[1]) - 1, query[2] s[pi] = ci elif query[0] == \'2\': li, ri = int(query[1]) - 1, int(query[2]) - 1 substr = s[li:ri+1] distinct_count = len(set(substr)) results.append(distinct_count) return results"},{"question":"# Alien Language Dictionary You find yourself in another world where humans and aliens coexist. The aliens have their own unique language and, intriguingly, their words follow a specific order. It\'s quite challenging to comprehend, but you start noticing patterns. The alien language uses the same English alphabet, but the order is different. One day, your alien friend gives you a dictionary of their language. The dictionary is essentially a list of words sorted in the order of their language rules. You are tasked to implement a script that can determine the correct order of the alphabet in the alien language. # Problem: Given a sorted dictionary of an alien language, find the order of characters in the alien language. # Input: - A list of strings `words` representing the alien dictionary, sorted lexicographically by the rules of the alien language. # Output: - A string representing the characters in the correct order of the alien alphabet. # Constraints: - 1 <= len(words) <= 1000 - 1 <= len(words[i]) <= 100 - All characters in `words` are lowercase English letters. # Example: ```python def alienOrder(words): # Implement your solution here pass # Test cases words1 = [\\"wrt\\", \\"wrf\\", \\"er\\", \\"ett\\", \\"rftt\\"] print(alienOrder(words1)) # Output: \\"wertf\\" or any order that is valid according to the alien language rules words2 = [\\"z\\", \\"x\\"] print(alienOrder(words2)) # Output: \\"zx\\" words3 = [\\"z\\", \\"x\\", \\"z\\"] print(alienOrder(words3)) # Output: \\"\\" (Not possible to determine a valid order) ``` # Notes: 1. If the order is not possible to determine or is inconsistent, return an empty string. 2. You may assume that the input given is always valid and there is at least one valid order.","solution":"from collections import defaultdict, deque def alienOrder(words): # Create data structures to hold the graph and the in-degrees of nodes graph = defaultdict(set) in_degree = {char: 0 for word in words for char in word} # Build the graph for i in range(len(words) - 1): first_word, second_word = words[i], words[i+1] min_length = min(len(first_word), len(second_word)) for j in range(min_length): if first_word[j] != second_word[j]: if second_word[j] not in graph[first_word[j]]: graph[first_word[j]].add(second_word[j]) in_degree[second_word[j]] += 1 break else: if len(first_word) > len(second_word): return \\"\\" # Invalid order # Perform topological sort queue = deque([char for char in in_degree if in_degree[char] == 0]) alien_order = [] while queue: current_char = queue.popleft() alien_order.append(current_char) for neighbor in graph[current_char]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) if len(alien_order) < len(in_degree): return \\"\\" # Cycle found or there was a dependency issue return \\"\\".join(alien_order)"},{"question":"Given a list of words, write a function that checks if a word can pass through the \\"green glass door\\". The rule to pass through the green glass door is that the word must have at least one duplicate consecutive letter. The function should return `True` if the word can pass, and `False` otherwise. For example: - \\"loop\\" can pass through the green glass door. - \\"pool\\" can pass through the green glass door. - \\"moon\\" can pass through the green glass door. - \\"sun\\" cannot pass through the green glass door. - \\"glass\\" can pass through the green glass door. - \\"sandals\\" cannot pass through the green glass door. **Function Signature:** ```python def can_pass_green_glass_door(word: str) -> bool: # your code here ``` **Constraints:** - The input word consists of lowercase English letters only. - The input word length is between 1 and 100 characters.","solution":"def can_pass_green_glass_door(word: str) -> bool: Checks if the word can pass through the green glass door. A word can pass if it has at least one duplicate consecutive letter. Parameters: word (str): The word to check. Returns: bool: True if the word can pass, False otherwise. for i in range(len(word) - 1): if word[i] == word[i + 1]: return True return False"},{"question":"A large software company wants to optimize the response time of their servers. To do this, they decided to develop a program that will determine the average time complexity of various algorithms they use. You have been assigned to create a utility that takes a list of algorithms, each represented by its worst-case time complexity in Big-O notation, and returns the average time complexity of these algorithms. You need to account for the following Big-O notations: - O(1) - O(log N) - O(N) - O(N log N) - O(N^2) - O(2^N) **Your task is to implement a function that takes in a list of strings, each representing an algorithm\'s time complexity in Big-O notation from the list above, and returns a string representing the average time complexity of the input list.** # Constraints - The input list will contain between 1 and 10,000 elements, inclusive. - Each string in the input list will be one of the following: \\"O(1)\\", \\"O(log N)\\", \\"O(N)\\", \\"O(N log N)\\", \\"O(N^2)\\", \\"O(2^N)\\". # Input - The first line contains an integer T (1 ≤ T ≤ 10,000), the number of time complexities in the list. - The next T lines contain one Big-O notation each, representing the time complexity of an algorithm. # Output - Print a single line with the average time complexity of the algorithms in Big-O notation. # Example Input: 3 O(N) O(log N) O(N^2) Output: O(N) **Notes:** - The average time complexity here means finding the \\"median\\" Big-O notation that represents the middle value when the input list is sorted by time complexity. - For simplicity, consider the given order of Big-O notations to be arranged from smallest to largest: - \\"O(1)\\" < \\"O(log N)\\" < \\"O(N)\\" < \\"O(N log N)\\" < \\"O(N^2)\\" < \\"O(2^N)\\" # Implementation Use the following outline to implement your solution: 1. Read the input value T. 2. Read T strings representing the Big-O notations. 3. Sort the list of Big-O notations by their complexity. 4. Determine the median value of the sorted list. 5. Print the median value. Remember to handle edge cases where T equals 1 and cases where there are duplicate Big-O notations.","solution":"def average_time_complexity(T, complexities): Returns the average (median) time complexity from a list of Big-O notations. Parameters: T (int): Number of time complexities. complexities (List[str]): A list of strings, each representing a Big-O notation. Returns: str: The median Big-O notation as a string. # Define the order of complexities complexity_order = [\\"O(1)\\", \\"O(log N)\\", \\"O(N)\\", \\"O(N log N)\\", \\"O(N^2)\\", \\"O(2^N)\\"] # Sort the complexities according to the predefined order complexities.sort(key=lambda x: complexity_order.index(x)) # Find the median median_index = T // 2 # If T is odd, return the middle element if T % 2 == 1: return complexities[median_index] # If T is even, return the left middle element else: return complexities[median_index - 1]"},{"question":"**Maximum Pairwise Sum** You are given an array of n integers. Your task is to find two different indices i and j such that the sum of a[i] and a[j] is as large as possible. Input: The first line contains a single integer n (2 ≤ n ≤ 10^5) — the length of the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9). Output: Output a single integer — the maximum possible sum of two different elements in the array. Examples: Input: 5 1 2 3 4 5 Output: 9 Input: 4 100 200 100 200 Output: 400 Explanation: In the first example, the two largest numbers are 5 and 4, and their sum is 9. In the second example, the two largest numbers are both 200, and their sum is 400.","solution":"def maximum_pairwise_sum(arr): Returns the maximum possible sum of two different elements in the array. Parameters: arr (list): List of integers. Returns: int: Maximum pairwise sum. if len(arr) < 2: return \\"Array must have at least two elements\\" # Ensure we correctly handle arrays with just two elements if len(arr) == 2: return arr[0] + arr[1] # Find the two largest numbers max1, max2 = float(\'-inf\'), float(\'-inf\') for num in arr: if num > max1: max2 = max1 max1 = num elif num > max2: max2 = num return max1 + max2"},{"question":"Given a number `n`, implement a function to print a diamond pattern with `n` rows. The pattern consists of two parts: the first part is a pyramid of stars with increasing row lengths, and the second part is an inverted pyramid of stars with decreasing row lengths. Each row in both parts contains an odd number of stars, centered with spaces. For example, given `n=3`, you must print: ``` * *** ***** *** * ``` For example, given `n=5`, you must print: ``` * *** ***** ******* ********* ******* ***** *** * ``` Note: An extra line feed character is needed at the end of the string. Case `n=0` should return `\\"n\\"`.","solution":"def diamond(n): Prints a diamond pattern with `n` rows. if n == 0: return \\"n\\" result = [] # Upper part of the diamond for i in range(n): spaces = \' \' * (n - i - 1) stars = \'*\' * (2 * i + 1) result.append(f\\"{spaces}{stars}\\") # Lower part of the diamond for i in range(n - 2, -1, -1): spaces = \' \' * (n - i - 1) stars = \'*\' * (2 * i + 1) result.append(f\\"{spaces}{stars}\\") return \\"n\\".join(result) + \\"n\\""},{"question":"Harry is fascinated by sequences and dynamic programming. He wants to determine the longest increasing subsequence of a given integer array. A subsequence is derived by deleting some or no elements of the array while maintaining the relative order of the remaining elements. Your task is to help Harry find the length of the longest increasing subsequence. Input The first line contains an integer T (1 ≤ T ≤ 100), the number of test cases. Each of the next T lines contains an integer n (1 ≤ n ≤ 1000) followed by an array of n integers. Output For each test case, output a single line containing the length of the longest increasing subsequence of the given array. Example Input: 2 5 10 9 2 5 3 6 8 1 6 2 4 5 Output: 2 4 Explanation: For the first test case, the longest increasing subsequence is [2, 5] or [2, 3], both of length 2. For the second test case, the longest increasing subsequence is [1, 2, 4, 5], which is of length 4.","solution":"def lis_length(arr): if not arr: return 0 n = len(arr) dp = [1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) def process_lis(test_cases): results = [] for n, arr in test_cases: results.append(lis_length(arr)) return results"},{"question":"Given an undirected graph with N nodes and M edges, your task is to find the minimum number of edges that need to be removed from the graph to make it a tree. Recall that a tree is an acyclic connected graph. ------ Input ------ The first line contains two integers N and M denoting the number of nodes and edges respectively. Each of the next M lines contains two space-separated integers u and v denoting an edge between node u and node v. ------ Output ------ Print a single integer denoting the minimum number of edges that need to be removed to make the graph a tree. If it\'s not possible to achieve that, print -1. ------ Constraints ------ 1 ≤ N ≤ 10^5 0 ≤ M ≤ 2 * 10^5 1 ≤ u, v ≤ N The graph can be disconnected. ------ Sample Input 1 ------ 6 6 1 2 2 3 3 4 4 5 5 6 1 6 ------ Sample Output 1 ------ 1 ------ Explanation 1 ------ To make the given graph a tree, you can remove the edge (1, 6). Then the graph becomes a tree since: - It becomes connected and acyclic. - It has N-1 edges with N nodes. ------ Sample Input 2 ------ 4 3 1 2 2 3 3 4 ------ Sample Output 2 ------ 0 ------ Explanation 2 ------ The given graph is already a tree since it is connected and acyclic with 4 nodes and 3 edges.","solution":"def min_edges_to_remove(N, M, edges): Returns the minimum number of edges that need to be removed to make the graph a tree. If it\'s not possible, return -1. if M < N - 1: return -1 # Too few edges to form a tree from collections import defaultdict, deque graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = set() def bfs(start): queue = deque([start]) visited.add(start) count = 0 while queue: node = queue.popleft() count += 1 for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return count # Component count component_count = 0 for node in range(1, N + 1): if node not in visited: component_count += 1 bfs(node) # We need a single connected component if component_count > 1: return -1 # Evaluate remaining edges to be removed to make it a tree return M - (N - 1)"},{"question":"A university needs to allocate classrooms for its semester\'s final exams. Each exam covers a specific number of students and needs a certain room. The university has a limited number of rooms, each with a specific capacity. Your task is to write a program that helps the university determine a feasible accommodation for the exams. If it\'s not possible to allocate rooms for all exams, the program should indicate that. Input The input will consist of several data sets, each describing exams and room capacities. Each data set starts with two integers, E and R, separated by a space: > E R E is the number of exams (1 ≤ E ≤ 50) and R is the number of rooms (1 ≤ R ≤ 50). The next line contains E integers, each representing the number of students in an exam. > S1 S2 ... SE The following line contains R integers, each representing the capacity of a room. > C1 C2 ... CR A line containing two zeros indicates the end of the input. Output For each data set, output \\"Yes\\" if it is possible to allocate a room for each exam such that each room can accommodate the students for that exam. Output \\"No\\" if it is not possible. Example Input 3 4 40 25 35 50 30 40 20 2 2 20 30 25 15 2 2 30 40 20 30 0 0 Output Yes No No","solution":"def allocate_rooms(data): results = [] index = 0 while index < len(data): # Reading E and R E, R = map(int, data[index].split()) # End condition if E == 0 and R == 0: break index += 1 # Reading number of students in each exam students = list(map(int, data[index].split())) index += 1 # Reading capacities of rooms rooms = list(map(int, data[index].split())) # Sorting both lists in descending order students.sort(reverse=True) rooms.sort(reverse=True) possible = True for student_count in students: if not rooms: possible = False break suitable_room = False for i in range(len(rooms)): if rooms[i] >= student_count: suitable_room = True rooms.pop(i) break if not suitable_room: possible = False break if possible: results.append(\\"Yes\\") else: results.append(\\"No\\") index += 1 return results"},{"question":"In a distant land, there is a popular garden with a variety of beautiful flowers. A botanist, named Luka, is very interested in studying the arrangement of flowers in this garden. She loved to categorize the flowers based on their sizes. Every day, she collected data about the flower sizes and noticed an interesting pattern. If the number of any specific flower size is greater than a certain fraction of the total number of flowers, then she considers that size as predominant for that day. Luka wants to create a program that can help her identify if there is any predominant flower size in the garden. You are given an array B where each element represents the size of a flower. Let |B| be the number of elements in B, and let Nk be the number of elements k in B. For instance, if B = [4, 2, 3, 4, 4, 2, 5, 4], then |B| = 8, N4 = 4, N2 = 2, and N5 = 1. Your program has to find a size \'k\' such that: Nk > (|B| / 3) If there is no such size, you should report that as well. Input There are several test cases. For each test case, the first line contains |B|. The next line contains |B| integers. The integers are less than 2^31 and |B| < 1,000,000. The input terminates with a line containing a single 0. Output For each test case, output k in a line. If there is no predominant size, output \\"NO PREDOMINANT SIZE\\" in a line. Example Input 8 4 2 3 4 4 2 5 4 7 1 2 1 3 1 1 2 0 Output 4 1","solution":"def find_predominant_size(test_cases): Finds the predominant flower size (if any) in each test case. :param test_cases: List of tuples, where each tuple contains a list of flower sizes for a test case. :return: List of results, where each result is either the predominant flower size or \\"NO PREDOMINANT SIZE\\". results = [] for B in test_cases: size = len(B) frequency = {} for size in B: if size in frequency: frequency[size] += 1 else: frequency[size] = 1 predominant_size = None for size, count in frequency.items(): if count > len(B) // 3: predominant_size = size break if predominant_size is not None: results.append(predominant_size) else: results.append(\\"NO PREDOMINANT SIZE\\") return results"},{"question":"Grace recently started learning about sequences and series in her mathematics class. Her teacher has given her an interesting problem to solve: she has to find the smallest missing positive integer from a sequence of N distinct positive integers. Given a sequence of N distinct positive integers, Grace needs to identify the smallest positive integer that is not present in the sequence. For example, if the sequence is [3, 5, 1, 2, 8], the smallest missing positive integer is 4. Grace needs your help to solve this problem efficiently for large sequences. -----Input----- The first line contains a single integer N (1 ≤ N ≤ 10^6), representing the number of elements in the sequence. The second line contains N distinct space-separated integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 2·10^6), representing the sequence. -----Output----- Output a single integer representing the smallest missing positive integer. -----Examples----- Input 5 3 5 1 2 8 Output 4 Input 4 1 2 3 4 Output 5","solution":"def smallest_missing_positive_integer(nums): Returns the smallest missing positive integer from a sequence of distinct positive integers. nums_set = set(nums) smallest_missing = 1 while smallest_missing in nums_set: smallest_missing += 1 return smallest_missing"},{"question":"You are given a list of integers, and you need to find the maximum sum of contiguous subarray within a one-dimensional array of numbers which has at least one number. Example nums = [-2,1,-3,4,-1,2,1,-5,4] For the given array, the maximum sum of the contiguous subarray is achieved with [4,-1,2,1], where the sum is 4 + (-1) + 2 + 1 = 6. Write a function texttt{maxSubArray} to find this maximum sum. Function Description Complete the texttt{maxSubArray} function in the editor below. texttt{maxSubArray} has the following parameter: begin{itemize} item texttt{int nums[n]}: an array of integers end{itemize} Returns begin{itemize} item texttt{int}: the maximum sum of the contiguous subarray end{itemize} Input Format The first line contains an integer n, the number of elements in the array texttt{nums}. The second line contains n space-separated integers, texttt{nums[i]}, denoting the elements of the array. Constraints begin{itemize} item 1 leq n leq 10^5 item -10^4 leq texttt{nums[i]} leq 10^4 end{itemize} Sample Input 0 begin{verbatim} 9 -2 1 -3 4 -1 2 1 -5 4 end{verbatim} Sample Output 0 begin{verbatim} 6 end{verbatim} Explanation 0 For the array [-2,1,-3,4,-1,2,1,-5,4], the maximum sum of the contiguous subarray is [4,-1,2,1], which has the sum 6. Sample Input 1 begin{verbatim} 1 1 end{verbatim} Sample Output 1 begin{verbatim} 1 end{verbatim} Explanation 1 For the array [1], the maximum sum of the contiguous subarray is [1], which has the sum 1.","solution":"def maxSubArray(nums): Returns the maximum sum of a contiguous subarray within the given list of integers. :param nums: List[int] - list of integers :return: int - maximum sum of the contiguous subarray max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"John is planning a small garden. His land is shaped as a rectangle of width w and height h, and he is considering planting a specific type of tree. Each tree must be planted such that it\'s center is within the land, and two trees should not overlap or touch each other. Every tree is a circle with radius r and its center is determined by a pair of coordinates (x, y). Additionally, a tree must not cross the boundary of the rectangular land. Write a program to calculate the maximum number of trees that John can plant within the given confines. -----Input----- The first line contains three integers w, h, and r (1 ≤ w, h ≤ 1000, 1 ≤ r ≤ min(w, h)/2) — the width and height of the land and the radius of each tree respectively. -----Output----- The output should be a single integer — the maximum number of trees that John can plant such that no trees overlap or touch each other, and all trees remain within the boundary of the land. -----Examples----- Input 10 10 1 Output 49 Input 12 8 2 Output 12 -----Note----- In the first example, John can plant trees with centers at coordinates (1, 1), (1, 3), ... up to (9, 9), resulting in a 7x7 grid (49 trees in total). In the second example, John can plant trees in a 3x4 grid (12 trees in total).","solution":"def max_trees(w, h, r): Calculates the maximum number of non-overlapping trees that can be planted in a rectangular land. Parameters: w (int): Width of the rectangular land. h (int): Height of the rectangular land. r (int): Radius of each tree. Returns: int: Maximum number of trees that can be planted. # Calculate the maximum number of trees that can fit along the width and height tree_width_count = w // (2 * r) tree_height_count = h // (2 * r) # Maximum number of trees is the product of the counts along width and height max_tree_count = tree_width_count * tree_height_count return max_tree_count"},{"question":"In a distant land, there exists a computer network organized in the form of a binary tree. Each node in the tree represents a computer, and the network follows a specific rule: each computer can directly communicate only with its parent and its two immediate children. The computers can exchange packets, and the routers forward each packet to their children or parents depending on the traffic requirements. Recently, due to some security issues, the network administrators have decided to secure the network by inserting firewalls. Each firewall can be placed on any computer and prevents any packet from passing through it to its children. However, it does not block packets passing from a child to its parent. Given such a binary tree, where the root node starts with a packet to be sent to all leaf nodes, and the positions of the firewalls, determine how many leaf nodes will ultimately receive the packet. A firewall blocks communication to all nodes in its subtree. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of nodes in the tree. The second line contains n integers where the i-th integer is the parent node of the i-th node (1 ≤ p_i ≤ n, p_i ≠ i) or -1 if the i-th node is the root. The third line contains an integer k (0 ≤ k ≤ n) — the number of firewalls. The fourth line contains k integers denoting the nodes where firewalls are placed. Output Print one integer: the number of leaf nodes that will receive the packet initially present at the root. Examples Input 7 -1 1 1 2 2 3 3 2 2 5 Output 2 Input 5 -1 1 1 2 3 1 3 Output 1 Input 3 -1 1 1 0 Output 2 Note * First example: The packet starts at node 1. Nodes 2 and 3 are direct children of 1 but node 2 has a firewall, thus the packet will only reach nodes 3, 6, and 7. However, node 5 also has a firewall, affecting only its own children, so leaf nodes 6 and 7 will receive the packet. Hence, 2 leaf nodes receive the packet. * Second example: Nodes 2, 3, 4, and 5 are the only leaf nodes, but the firewall at node 3 blocks node 4. Therefore, only node 5 receives the packet from the root node. * Third example: No firewalls exist, so the packet travels freely to all leaf nodes 2 and 3. Hence, both leaf nodes receive the packet.","solution":"def leaf_nodes_with_packet(n, parents, k, firewalls): from collections import defaultdict tree = defaultdict(list) root = -1 for i in range(n): if parents[i] == -1: root = i + 1 else: tree[parents[i]].append(i + 1) # Determine which nodes are leaves all_nodes = set(range(1, n + 1)) non_leaf_nodes = set(parents) - {-1} leaf_nodes = list(all_nodes - non_leaf_nodes) # Mark nodes as blocked by firewalls blocked = set() def block_subtree(node): blocked.add(node) for child in tree[node]: block_subtree(child) for fw in firewalls: block_subtree(fw) # Count leaf nodes that will receive the packet packet_reaching_leaf_nodes = 0 for leaf in leaf_nodes: current_node = leaf while current_node != root: if current_node in blocked: break current_node = parents[current_node - 1] else: # The loop didn\'t break packet_reaching_leaf_nodes += 1 return packet_reaching_leaf_nodes # Example usage: # n = 7 # parents = [-1, 1, 1, 2, 2, 3, 3] # k = 2 # firewalls = [2, 5] # print(leaf_nodes_with_packet(n, parents, k, firewalls)) # Output: 2"},{"question":"A company needs to distribute bonus amounts to its employees based on their performance ratings. Each employee has a corresponding performance rating, and the company wants to ensure that: 1. Every employee receives at least 1 unit of bonus. 2. Any employee with a higher performance rating than their immediate neighbors should receive more bonus than those neighbors. Your task is to write a program to determine the minimum number of bonus units the company must allocate to its employees to meet the above requirements. -----Input----- The input consists of: - one line with an integer n (1leq n leq 1000), the number of employees; - one line with n integers, each integer p_i (1 leq p_i leq 1000), representing the performance ratings of the employees. -----Output----- Output one integer, the minimum number of bonus units required. -----Examples----- Sample Input: 4 1 2 2 1 Sample Output: 6 Sample Input: 5 5 4 3 2 1 Sample Output: 15","solution":"def minimum_bonus(n, ratings): if n == 1: return 1 bonuses = [1] * n # Traverse from left to right for i in range(1, n): if ratings[i] > ratings[i - 1]: bonuses[i] = bonuses[i - 1] + 1 # Traverse from right to left for i in range(n - 2, -1, -1): if ratings[i] > ratings[i + 1]: bonuses[i] = max(bonuses[i], bonuses[i + 1] + 1) return sum(bonuses) # Example usage: # n = 4 # ratings = [1, 2, 2, 1] # print(minimum_bonus(n, ratings)) # Output: 6"},{"question":"You are tasked with implementing a simplistic text editor that supports the following operations: 1. Type a single character at the end of the current text. 2. Delete the last character of the current text (if the text is not empty). 3. Retrieve the k-th character of the current text (1-based index). 4. Undo the last operation (the undo operation itself should not be recorded). Here\'s a detailed explanation of each operation: - Type x: This adds the character x to the end of the current text. - Delete: This removes the last character from the current text if it is not empty. - Get k: This returns the k-th character of the current text. - Undo: This undoes the last type or delete operation. You are to process a sequence of operations and output the result of each \\"Get k\\" operation. Each test consists of multiple operations. The input format is as follows: **Input:** - The first line contains a single integer q (1 ≤ q ≤ 10^5) — the number of operations. - The next q lines describe the operations as follows: 1. \\"Type x\\" (1 ≤ length of x ≤ 1) — a single character to type. 2. \\"Delete\\" — delete the last character of the current text. 3. \\"Get k\\" (1 ≤ k ≤ current length of the text) — retrieve the k-th character. 4. \\"Undo\\" — undo the last \\"Type x\\" or \\"Delete\\" operation. **Output:** For each \\"Get k\\" operation, output a single line containing the k-th character of the current text. **Example:** Input: ``` 8 Type a Type b Type c Get 3 Delete Get 2 Undo Get 3 ``` Output: ``` c b c ``` **Explanation:** - Initially, the text is empty. - After \\"Type a\\", the text becomes \\"a\\". - After \\"Type b\\", the text becomes \\"ab\\". - After \\"Type c\\", the text becomes \\"abc\\". - \\"Get 3\\" retrieves the 3rd character: \'c\'. - \\"Delete\\" removes the last character, making the text \\"ab\\". - \\"Get 2\\" retrieves the 2nd character: \'b\'. - \\"Undo\\" undoes the last operation, restoring the text to \\"abc\\". - \\"Get 3\\" retrieves the 3rd character: \'c\'.","solution":"class TextEditor: def __init__(self): self.text = [] self.history = [] def type_char(self, char): self.text.append(char) self.history.append((\'type\', char)) def delete_char(self): if self.text: deleted_char = self.text.pop() self.history.append((\'delete\', deleted_char)) def get_char(self, k): if 1 <= k <= len(self.text): return self.text[k-1] return \'\' def undo(self): if self.history: last_action = self.history.pop() if last_action[0] == \'type\': self.text.pop() elif last_action[0] == \'delete\': self.text.append(last_action[1]) def process_operations(operations): editor = TextEditor() results = [] for operation in operations: op = operation.split() if op[0] == \'Type\': editor.type_char(op[1]) elif op[0] == \'Delete\': editor.delete_char() elif op[0] == \'Get\': k = int(op[1]) results.append(editor.get_char(k)) elif op[0] == \'Undo\': editor.undo() return results"},{"question":"Given an array of integers, determine whether the array can form an arithmetic progression by rearranging the elements or not. An array forms an arithmetic progression if the difference between consecutive elements is the same. Example 1: Input: arr = [3, 5, 1] Output: true Explanation: By rearranging the array as [1, 3, 5], it forms an arithmetic progression with a common difference of 2. Example 2: Input: arr = [1, 2, 4] Output: false Explanation: There is no way to rearrange the array to form an arithmetic progression. Constraints: 1. The length of the array is between 2 and 10^4. 2. -10^6 <= arr[i] <= 10^6.","solution":"def can_form_arithmetic_progression(arr): Determines whether the array can form an arithmetic progression by rearranging the elements. if len(arr) <= 2: return True arr.sort() diff = arr[1] - arr[0] for i in range(2, len(arr)): if arr[i] - arr[i - 1] != diff: return False return True"},{"question":"Emma is working on text transformation and needs to implement a function that will shift every alphabetical character in a given string by a specified number of places in the alphabet. She needs your help to write code for this. The function should handle both uppercase and lowercase letters. If the shift takes the character past \'z\' or \'Z\', it should wrap around to the beginning of the alphabet. Non-alphabetical characters should be left unchanged. Input and Output: The first line of input consists of an integer T (1 ≤ T ≤ 50), the number of test cases. Each of the next T lines contains a string S (1 ≤ |S| ≤ 100) and an integer N (0 ≤ N ≤ 25), separated by a space, where S is the text to be transformed and N is the number of positions to shift each alphabetical character. For each test case, print the transformed string on a new line. SAMPLE INPUT 3 abc 1 XYZ 3 Hello, World! 5 SAMPLE OUTPUT bcd ABC Mjqqt, Btwqi!","solution":"def shift_character(c, shift): Shift a single character by the given number of positions in the alphabet. Wrap around if the end of the alphabet is reached. if \'a\' <= c <= \'z\': return chr((ord(c) - ord(\'a\') + shift) % 26 + ord(\'a\')) elif \'A\' <= c <= \'Z\': return chr((ord(c) - ord(\'A\') + shift) % 26 + ord(\'A\')) else: return c def transform_string(s, n): Transforms the given string s by shifting its alphabetical characters by n positions. return \'\'.join(shift_character(c, n) for c in s) def process_test_cases(t, test_cases): Processes multiple test cases and returns a list of transformed strings. results = [] for s, n in test_cases: transformed = transform_string(s, n) results.append(transformed) return results # Example usage: t = 3 test_cases = [(\\"abc\\", 1), (\\"XYZ\\", 3), (\\"Hello, World!\\", 5)] output = process_test_cases(t, test_cases) for result in output: print(result)"},{"question":"Given an integer array A of size N, your task is to find the maximum difference between the elements\' indices such that A[i] ≠ A[j] and i < j. If no such pair exists, return -1. Example 1: Input: A = [1, 2, 2, 1, 3] Output: 4 Explanation: The maximum difference is between the element 1 at index 0 and the element 3 at index 4. Example 2: Input: A = [1, 1, 1, 1] Output: -1 Explanation: There are no two elements in array A that have different values. Your Task: Complete the function maxIndexDiff() which takes the array A and its size N as inputs and returns the maximum difference between indices such that A[i] ≠ A[j] and i < j. If no such pairs exist, return -1. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5 0 ≤ A[i] ≤ 10^9","solution":"def maxIndexDiff(A, N): if N <= 1: return -1 left_min = [0] * N right_max = [0] * N left_min[0] = A[0] for i in range(1, N): left_min[i] = min(left_min[i-1], A[i]) right_max[N-1] = A[N-1] for j in range(N-2, -1, -1): right_max[j] = max(right_max[j+1], A[j]) i, j, max_diff = 0, 0, -1 while j < N and i < N: if left_min[i] != right_max[j]: max_diff = max(max_diff, j - i) j += 1 else: i += 1 return max_diff if max_diff != -1 else -1"},{"question":"Given a string `S` containing only lowercase alphabets, determine whether it can be made into a palindrome by removing at most one character. Input The first line contains one integer T denoting the number of test cases. The following T lines contain one string each - `S`. Output For each test case output \\"YES\\" if the string can be made into a palindrome by removing at most one character, otherwise output \\"NO\\". Constraints 1 ≤ |S| ≤ 10^5 T ≤ 10 SAMPLE INPUT 3 abca racecar abcdef SAMPLE OUTPUT YES YES NO","solution":"def can_be_made_palindrome(s): Determines if string `s` can be made into a palindrome by removing at most one character. def is_palindrome_range(start, end): while start < end: if s[start] != s[end]: return False start += 1 end -= 1 return True left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: return is_palindrome_range(left + 1, right) or is_palindrome_range(left, right - 1) left += 1 right -= 1 return True def process_test_cases(t, test_cases): results = [] for s in test_cases: if can_be_made_palindrome(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Task: You have to write a function `decoder` that decodes a run-length encoded string. # Parameters: decoder(encoded_string); encoded_string: The input string to decode. It uses run-length encoding. # Rules/Note: - The run-length encoded string consists of pairs of characters: - The first character of a pair is the count of the next character. - The second character of a pair is the character to be repeated. - The count values are always single digits (0-9). - If the count is 0, the character should be ignored. - If the encoded string is empty, return an empty string. # Examples: - decoder(\\"3a2b4c\\"): ``` Output: \\"aaabbcccc\\" ``` - decoder(\\"1a0b5z\\"): ``` Output: \\"azzzzz\\" ``` - decoder(\\"0a0b0c\\"): ``` Output: \\"\\" ```","solution":"def decoder(encoded_string): Decodes a run-length encoded string. Parameters: encoded_string (str): The run-length encoded string to decode. Returns: str: The decoded string. decoded_string = \\"\\" for i in range(0, len(encoded_string), 2): count = int(encoded_string[i]) char = encoded_string[i + 1] decoded_string += char * count return decoded_string"},{"question":"Little Shweta loves strings. She likes to play with them by performing various operations. Today, she has come up with a unique operation called SWAP which takes two arguments, i.e., SWAP(P, Q). When SWAP(P, Q) is called, it swaps the P-th and Q-th characters of the string. Now, to challenge you, her friend, she performs N SWAP operations and after they have been done, Shweta wants you to print the final string. Input: First line contains the initial string of length L. Second line contains an integer N, the number of SWAP operations. Next N lines contain two integers P and Q each, denoting the positions to be swapped in each operation (0-based index). Output: Print the final string after N SWAP operations. Constraints: 1 ≤ L ≤ 1000 1 ≤ N ≤ 1000 0 ≤ P, Q < L SAMPLE INPUT string 3 0 1 1 2 2 3 SAMPLE OUTPUT tsring","solution":"def swap_operations(initial_string, operations): Perform a series of swap operations on an initial string. :param initial_string: The initial string to be modified :param operations: A list of tuples (P, Q) representing the swap operations :return: The final string after performing all swap operations string_list = list(initial_string) for P, Q in operations: string_list[P], string_list[Q] = string_list[Q], string_list[P] return \'\'.join(string_list) # Example usage: # initial_string = \\"string\\" # operations = [(0, 1), (1, 2), (2, 3)] # print(swap_operations(initial_string, operations)) # Output: \\"tsring\\""},{"question":"A company wants to develop a system that can convert human-readable dates into a numeric format. They have identified a specific set of rules to describe how the conversion should take place. The rules are as follows: 1. Dates input will be in the format: \\"DD-MMM-YYYY\\", where: - \\"DD\\" is a two-digit day. - \\"MMM\\" is a three-character abbreviation of the month (e.g., \\"Jan\\", \\"Feb\\", \\"Mar\\", etc.). - \\"YYYY\\" is a four-digit year. 2. The output should be in the format: \\"YYYYMMDD\\". For example: - \\"07-Oct-2023\\" should be converted to \\"20231007\\". - \\"25-Dec-1999\\" should be converted to \\"19991225\\". Your task: Create a function `convert_date` which takes a string in the format \\"DD-MMM-YYYY\\" and returns a string in the format \\"YYYYMMDD\\". Your implementation should handle all month abbreviations: \\"Jan\\", \\"Feb\\", \\"Mar\\", \\"Apr\\", \\"May\\", \\"Jun\\", \\"Jul\\", \\"Aug\\", \\"Sep\\", \\"Oct\\", \\"Nov\\", \\"Dec\\". Function Signature: ```python def convert_date(date_str: str) -> str: pass ``` # Examples: ```python print(convert_date(\\"07-Oct-2023\\")) # Output should be \\"20231007\\" print(convert_date(\\"25-Dec-1999\\")) # Output should be \\"19991225\\" print(convert_date(\\"01-Jan-2000\\")) # Output should be \\"20000101\\" ```","solution":"def convert_date(date_str: str) -> str: Converts a date from \\"DD-MMM-YYYY\\" format to \\"YYYYMMDD\\" format. # Define a dictionary to map month abbreviations to their numeric equivalents month_map = { \\"Jan\\": \\"01\\", \\"Feb\\": \\"02\\", \\"Mar\\": \\"03\\", \\"Apr\\": \\"04\\", \\"May\\": \\"05\\", \\"Jun\\": \\"06\\", \\"Jul\\": \\"07\\", \\"Aug\\": \\"08\\", \\"Sep\\": \\"09\\", \\"Oct\\": \\"10\\", \\"Nov\\": \\"11\\", \\"Dec\\": \\"12\\" } # Split the input date string day, month, year = date_str.split(\'-\') # Convert the month abbreviation to its numeric form using the month_map month_numeric = month_map[month] # Construct the new date format numeric_date = f\\"{year}{month_numeric}{day}\\" return numeric_date"},{"question":"Given a list of integers, write a function `find_missing_number(arr)` that identifies the missing number from a consecutive sequence in the array. The array contains distinct integers ranging from 1 to n (where n is the length of the array + 1), but one number is missing. Your function should find and return this missing number. # Input - A list of integers, `arr`, where `len(arr) = n - 1` and the integers are in the range from `1` to `n`. # Output - An integer representing the missing number in the consecutive sequence. # Example ```python # Example 1 Input: [3, 7, 1, 2, 8, 4, 5] Output: 6 # Example 2 Input: [1, 2, 3, 5] Output: 4 # Example 3 Input: [2, 3, 4, 6, 1] Output: 5 ``` # Constraints - You may assume that the array contains only distinct numbers. - The length of the array will be at least 1 and at most 10^5.","solution":"def find_missing_number(arr): Returns the missing number from a consecutive sequence in arr. n = len(arr) + 1 total_sum = n * (n + 1) / 2 actual_sum = sum(arr) return int(total_sum - actual_sum)"},{"question":"Given a list of `n` cities connected by `n-1` bi-directional roads, you are provided with `q` queries. Each query provides you with two cities and asks for the shortest path length between them in terms of the number of edges. Cities are numbered from `1` to `n`. For example, if `n=5` and the roads are defined as pairs of cities `(1, 2)`, `(1, 3)`, `(3, 4)`, and `(3, 5)`, the connections can be illustrated as: ``` 1 / 2 3 / 4 5 ``` A query asking for the shortest path between `2` and `4` would return `3`, as the path is `2 -> 1 -> 3 -> 4`. -----Input----- The first line contains one integer `t` (1 le t le 10^4) — the number of test cases. Then `t` test cases follow. For each test case: The first line contains one integer `n` (2 le n le 10^5) — the number of cities. Then, `n-1` lines follow, each containing two integers `u` and `v` (1 le u, v le n) indicating a road connecting city `u` and city `v`. The next line contains one integer `q` (1 le q le 10^5) — the number of queries. The following `q` lines each contain two integers `a` and `b` (1 le a, b le n) indicating a query asking for the shortest path between city `a` and city `b`. It is guaranteed that the sums of `n` and `q` over all test cases do not exceed 3 cdot 10^5. -----Output----- For each query in each test case, output a single integer on a new line — the shortest path length between cities `a` and `b`. -----Examples----- Input 2 5 1 2 1 3 3 4 3 5 3 2 4 4 5 1 3 3 1 2 1 3 2 Output 3 2 1 1 1","solution":"from collections import defaultdict, deque def preprocess(n, edges): Preprocess the graph to calculate the distance between all pairs of cities. adj = defaultdict(list) for u, v in edges: adj[u].append(v) adj[v].append(u) def bfs(start): Perform BFS to calculate shortest paths from the start node to all other nodes. distances = [-1] * (n + 1) distances[start] = 0 queue = deque([start]) while queue: node = queue.popleft() for neighbor in adj[node]: if distances[neighbor] == -1: # not visited distances[neighbor] = distances[node] + 1 queue.append(neighbor) return distances # Calculate distances from every node all_distances = dict() for i in range(1, n + 1): all_distances[i] = bfs(i) return all_distances def shortest_paths(n, edges, queries): Respond to each query by calculating the shortest path using precomputed distances. all_distances = preprocess(n, edges) results = [] for a, b in queries: results.append(all_distances[a][b]) return results"},{"question":"David has an undirected graph with N nodes and M edges. Each edge has a weight that ranges from 1 to W. He wants to find the shortest path from a start node S to a destination node D but with a twist: instead of minimizing the total sum of the edge weights, he wants to minimize the number of edges used in the path first. Only when multiple paths have the same number of edges should the path with the smallest total weight be selected among them. David needs your help to implement an algorithm that meets these requirements. Input The first line contains three integers N, M, and W (1 ≤ N ≤ 10^4, 1 ≤ M ≤ 10^5, 1 ≤ W ≤ 10^9). Each of the next M lines contains three integers u, v, and w (1 ≤ u, v ≤ N, 1 ≤ w ≤ W), representing an edge between nodes u and v with weight w. Nodes u and v are distinct. The next line contains two integers S and D (1 ≤ S, D ≤ N). S and D may be the same. Output Output two integers: the minimum number of edges and the minimum total weight of a path that satisfies David\'s criteria to get from S to D. If there is no such path, output \\"-1\\". Examples Input 6 7 10 1 2 3 1 3 2 2 4 2 3 4 4 4 5 6 5 6 2 3 5 3 1 6 Output 3 7 Input 5 4 100 1 2 50 2 3 50 3 4 50 4 5 50 1 5 Output 4 200 Input 3 2 5 1 2 3 2 3 4 1 3 Output 2 7 Note In the first example, the shortest path in terms of the number of edges that connects node 1 to node 6 is 1 -> 3 -> 5 -> 6, which has 3 edges and a total weight of 7. In the second example, the only path from 1 to 5 includes 4 edges and has a total weight of 200. In the third example, the path 1 -> 2 -> 3 has 2 edges and a total weight of 7.","solution":"import heapq from collections import defaultdict, deque def shortest_path_with_min_edges(N, M, W, edges, S, D): # Create the graph graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Initial distances: (number of edges, total weight) # distances[node] = (min_edges, min_weight) distances = {node: (float(\'inf\'), float(\'inf\')) for node in range(1, N+1)} distances[S] = (0, 0) # Priority queue to process nodes queue = [(0, 0, S)] # (number_of_edges, total_weight, node) while queue: num_edges, total_weight, node = heapq.heappop(queue) if node == D: return num_edges, total_weight for neighbor, weight in graph[node]: # Calculate the distances for the neighbor new_num_edges = num_edges + 1 new_total_weight = total_weight + weight # Only consider this path if it improves either number of edges # or total weight with the same number of edges if (new_num_edges < distances[neighbor][0] or (new_num_edges == distances[neighbor][0] and new_total_weight < distances[neighbor][1])): distances[neighbor] = (new_num_edges, new_total_weight) heapq.heappush(queue, (new_num_edges, new_total_weight, neighbor)) return -1 # Example usage: N = 6 M = 7 W = 10 edges = [ (1, 2, 3), (1, 3, 2), (2, 4, 2), (3, 4, 4), (4, 5, 6), (5, 6, 2), (3, 5, 3) ] S = 1 D = 6 print(shortest_path_with_min_edges(N, M, W, edges, S, D)) # Output: (3, 7)"},{"question":"You are assigned a task to implement a system that can manage a reservation table for a co-working space. There are multiple rooms in the space, and each room can be reserved for a specified duration. The system should support the following operations: 1. **bookRoom(roomID: str, startTime: int, endTime: int) -> bool**: Books a room for a given time interval. Returns `True` if the room was successfully booked, or `False` if the room was already reserved during any part of the given interval. 2. **cancelBooking(roomID: str, startTime: int, endTime: int) -> bool**: Cancels a previously-made booking. Returns `True` if the booking existed and was successfully cancelled, or `False` if no such booking was found. You are to implement a class `RoomReservation` with the above methods. # Constraints: - Each room ID is a non-empty string consisting of alpha-numeric characters. - `startTime` and `endTime` are integers representing the time in 24-hour format (from 0 to 23). - The `startTime` will always be less than the `endTime`. # Example: ```python reservationSystem = RoomReservation() # Let\'s say we book room \\"A\\" from 1 to 3. print(reservationSystem.bookRoom(\\"A\\", 1, 3)) # Should return True # Trying to book room \\"A\\" again from 2 to 4 should fail. print(reservationSystem.bookRoom(\\"A\\", 2, 4)) # Should return False # Booking room \\"A\\" from 4 to 5 will succeed. print(reservationSystem.bookRoom(\\"A\\", 4, 5)) # Should return True # Cancelling the booking from 1 to 3 for room \\"A\\" should succeed. print(reservationSystem.cancelBooking(\\"A\\", 1, 3)) # Should return True # Trying to cancel the same booking again should fail. print(reservationSystem.cancelBooking(\\"A\\", 1, 3)) # Should return False # Now we should be able to book room \\"A\\" from 2 to 4. print(reservationSystem.bookRoom(\\"A\\", 2, 4)) # Should return True ``` Your task is to implement the `RoomReservation` class with the `bookRoom` and `cancelBooking` methods as described.","solution":"class RoomReservation: def __init__(self): # A dictionary to store the bookings for each room self.bookings = {} def bookRoom(self, roomID: str, startTime: int, endTime: int) -> bool: if roomID not in self.bookings: self.bookings[roomID] = [] for booking in self.bookings[roomID]: if not (endTime <= booking[0] or startTime >= booking[1]): return False self.bookings[roomID].append((startTime, endTime)) self.bookings[roomID].sort() return True def cancelBooking(self, roomID: str, startTime: int, endTime: int) -> bool: if roomID in self.bookings: if (startTime, endTime) in self.bookings[roomID]: self.bookings[roomID].remove((startTime, endTime)) return True return False"},{"question":"Implement a function `count_distinct_pairs(arr, k)` that takes in an array of integers `arr` and an integer `k`, and returns the number of unique pairs `(i, j)` where `i < j` and `arr[i] + arr[j]` is equal to `k`. A pair `(i, j)` is considered unique such that `arr[i]+arr[j]=k` and the indices `i` and `j` are different. You can assume that the array contains distinct integers. **Input Format** - A list of integers `arr`, where each integer is distinct. - An integer `k`. **Constraints** - `1 ≤ len(arr) ≤ 1000` - `-10^6 ≤ arr[i] ≤ 10^6` - `-10^6 ≤ k ≤ 10^6` **Output Format** Return a single integer representing the number of unique pairs `(i, j)` such that `arr[i] + arr[j] = k`. **Sample Input** ``` arr = [1, 2, 3, 4, 5] k = 5 ``` **Sample Output** ``` 2 ``` **Explanation** The pairs that satisfy the condition are `(1, 4)` and `(2, 3)`. Therefore, the output is `2` because there are two unique pairs whose sum is equal to `5`.","solution":"def count_distinct_pairs(arr, k): Returns the number of unique pairs (i, j) where i < j and arr[i] + arr[j] is equal to k. count = 0 seen_pairs = set() for i in range(len(arr)): for j in range(i + 1, len(arr)): if arr[i] + arr[j] == k: if (arr[i], arr[j]) not in seen_pairs and (arr[j], arr[i]) not in seen_pairs: seen_pairs.add((arr[i], arr[j])) count += 1 return count"},{"question":"A city is represented as an N x M grid. Some cells have buildings of different heights, and other cells are empty. Each empty cell has to be filled with soil to make its height exactly match the height of the nearest building. You are given the initial heights of some known buildings in the grid. Your task is to fill all the empty cells such that for each empty cell, its height becomes the same as the nearest building, in terms of Manhattan distance. Note: 1. If there are multiple buildings at the same Manhattan distance from an empty cell, you can choose any of them for the height. 2. Manhattan distance between (x1, y1) and (x2, y2) is |x1 - x2| + |y1 - y2|. ------ Input Format ------ - First line will contain T, number of test cases. Then the test cases follow. Each test case consists of several lines. - The first line contains two space-separated integers N and M denoting the dimensions of the grid. - The next N lines contain M space-separated integers each - the height of the buildings at the cell or 0 for empty cells. ------ Output Format ------ For each test case, output N lines, each consisting of M space-separated integers where j^{th} integer in i^{th} line denotes the height of the cell in i^{th} row and j^{th} column of the grid after filling the empty cells. ------ Constraints ------ 1 ≤ T ≤ 50 2 ≤ N, M ≤ 1000 0 ≤ text{Height of any building} ≤ 10^9 - There will be at least one building in each test case\'s grid. ----- Sample Input 1 ------ 2 3 3 1 0 2 0 0 0 3 0 4 2 2 0 0 0 5 ----- Sample Output 1 ------ 1 1 2 1 1 2 3 3 4 5 5 5 5 ----- explanation 1 ------ Test Case 1: The nearest building for each empty cell (represented by 0) has been identified: - The cell (1, 2) in the second row is nearest to (1, 1) which has height 1. - Similarly, the cell (3, 1) is nearest to (1, 1) with height 1. - All the remaining cells are filled following the same rule. Test Case 2: All the empty cells are closest to the building at (2, 2), hence all empty cells will be filled with height 5.","solution":"from collections import deque def fill_empty_cells_with_building_heights(n, m, grid): def is_valid(x, y): return 0 <= x < n and 0 <= y < m # Create a queue for BFS queue = deque() # Directions for movement in the grid (up, down, left, right) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Initialize the distances grid with None or -1 distances = [[None]*m for _ in range(n)] # Enqueue all building cells and set their distances to 0 for i in range(n): for j in range(m): if grid[i][j] != 0: queue.append((i, j)) distances[i][j] = grid[i][j] # Perform BFS to propagate building heights to empty cells based on nearest building while queue: x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and distances[nx][ny] is None: distances[nx][ny] = distances[x][y] queue.append((nx, ny)) return distances def process_test_cases(t, test_cases): results = [] for n, m, grid in test_cases: result_grid = fill_empty_cells_with_building_heights(n, m, grid) results.append(result_grid) return results # Read the input def process_input(): import sys input = sys.stdin.read data = input().split() idx = 0 T = int(data[idx]) idx += 1 test_cases = [] for _ in range(T): N = int(data[idx]) M = int(data[idx + 1]) idx += 2 grid = [] for _ in range(N): row = list(map(int, data[idx:idx + M])) grid.append(row) idx += M test_cases.append((N, M, grid)) return T, test_cases def main(): T, test_cases = process_input() results = process_test_cases(T, test_cases) for result in results: for row in result: print(\\" \\".join(map(str, row))) if __name__ == \\"__main__\\": main()"},{"question":"You are given a positive integer number n. You want to transform it into a palindrome with the minimum number of changes to its digits. A palindrome is a number that reads the same forwards and backwards, like 121 or 3443. The \\"minimum number of changes\\" means the smallest number of digit replacements required to make n read the same from left to right and right to left. For instance, to transform 12321 into a palindrome, 0 changes are needed since it is already a palindrome. To transform 12 into a palindrome, 1 change is needed (either change the 1 to 2, making it 22, or change the 2 to 1, making it 11). Write a function that, given a number n, returns the minimum number of changes required to turn it into a palindrome. -----Input----- The first line of the input contains one integer t (1 le t le 1000) — the number of queries. Then t queries follow. Each of the next t lines contains a positive integer n (1 le n le 10^6). -----Output----- For each query, print the minimum number of changes required to make the given number n a palindrome. -----Example----- Input 4 12321 12 39 12345 Output 0 1 1 2","solution":"def min_changes_to_make_palindrome(num): Returns the minimum number of changes required to make the number a palindrome. # Convert number to string for easier manipulation s = str(num) n = len(s) # Counter for the number of changes changes = 0 # Compare from the start and end moving towards the center for i in range(n // 2): if s[i] != s[n - 1 - i]: changes += 1 return changes def process_queries(t, queries): results = [] for num in queries: results.append(min_changes_to_make_palindrome(num)) return results"},{"question":"Consider a graph with `n` nodes and `m` edges. Each node is numbered from 1 to `n`. You are given the edges of the graph, where each edge connects two nodes `u` and `v`. There are also `k` pairs of nodes, and for each pair, you need to determine if there exists a path between these two nodes. You are given T test cases. For each test case, compute the answer. Constraints: * 1 ≤ T ≤ 100 * 2 ≤ n ≤ 10^5 * 1 ≤ m ≤ 10^6 * 1 ≤ k ≤ 10^4 * 1 ≤ u, v ≤ n Input: Input is given from Standard Input in the following format: T For each test case: n m u_1 v_1 ... u_m v_m k a_1 b_1 ... a_k b_k Output: For each test case, output `k` lines. In the i-th line, print \\"YES\\" if there is a path between the i-th pair of nodes. Otherwise, print \\"NO\\". Example: Input 1 4 4 1 2 2 3 3 4 4 1 2 1 3 1 4 Output YES YES","solution":"def find(x, parent): if parent[x] != x: parent[x] = find(parent[x], parent) return parent[x] def union(x, y, parent, rank): rootX = find(x, parent) rootY = find(y, parent) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 def solve(n, edges, queries): parent = list(range(n + 1)) rank = [0] * (n + 1) for u, v in edges: union(u, v, parent, rank) result = [] for a, b in queries: if find(a, parent) == find(b, parent): result.append(\\"YES\\") else: result.append(\\"NO\\") return result def graph_connectivity(T, test_cases): result = [] for i in range(T): n, m = test_cases[i][\'graph\'] edges = test_cases[i][\'edges\'] k = test_cases[i][\'queries\'][0] queries = test_cases[i][\'queries\'][1] result.extend(solve(n, edges, queries)) return result"},{"question":"Blackjack Card Total You need to write a program to calculate the total value of a set of cards in a simplified version of Blackjack. In this version, the cards have the following values: - Number cards (2 through 10) have their face value. - Face cards (Jack, Queen, King) are all worth 10. - An Ace can be worth either 1 or 11, whichever is more favorable without causing the total to exceed 21. Your program should take a series of card values as input and output the total value of the card set. If multiple totals are possible due to the flexibility of the Ace value, output the highest total that is 21 or less. If no such value exists, output the lowest total. Input The input contains multiple lines. Each line corresponds to a set of cards and contains the values of the cards separated by spaces. The values can be numbers (2-10) or the words \\"Jack\\", \\"Queen\\", \\"King\\", \\"Ace\\". The end of input is indicated by the line \\"END\\", which should not be processed. Output For each line, output the highest possible total value of the set of cards without exceeding 21, or the lowest total if all possible totals exceed 21. Example Input 2 3 Jack Ace 10 5 7 Ace Ace Ace King 9 END Output 15 21 14 20","solution":"def card_value(card): Returns the blackjack value of a given card. if card in [\'Jack\', \'Queen\', \'King\']: return 10 elif card == \'Ace\': return 1 # Start with Ace as 1, calculate 11 later if possible else: return int(card) def blackjack_total(cards): Calculates the highest possible total value of the given set of cards in blackjack without exceeding 21. total = 0 ace_count = 0 for card in cards: if card == \'Ace\': ace_count += 1 total += card_value(card) # Adjust for Aces to use 11 if it doesn\'t bust the total for _ in range(ace_count): if total + 10 <= 21: total += 10 return total def process_input(input_lines): Processes the input lines and outputs the calculated blackjack total for each line of cards. results = [] for line in input_lines: if line == \\"END\\": break cards = line.split() results.append(blackjack_total(cards)) return results"},{"question":"A company has invented a new digital lock system for securing locker rooms. The lock system is represented as a sequence of N characters, where each character can be either \'.\' or \'#\'. In a valid lock system, two \'.\' characters should not be adjacent. Therefore, you need to determine if a given sequence is a valid digital lock system. Write a function `isValidLockSystem(s)` that takes a string `s` as input and returns `True` if the string is a valid digital lock system according to the rules, and `False` otherwise. -----Constraints----- - The length of the string `N` is between 1 and 100,000 (inclusive). - The string `s` only contains the characters \'.\' and \'#\'. -----Function signature----- def isValidLockSystem(s: str) -> bool: -----Input----- - A single string `s`. -----Output----- - Return `True` if string `s` is a valid digital lock system, otherwise return `False`. -----Examples----- ```python assert isValidLockSystem(\\".#.#.#\\") == True # Valid lock system as no two \'.\' are adjacent. assert isValidLockSystem(\\"#\\") == True # Valid lock system as there are no adjacent \'.\'. assert isValidLockSystem(\\"..\\") == False # Invalid lock system as there are two adjacent \'.\'. assert isValidLockSystem(\\".#.#\\") == True # Valid lock system as no two \'.\' are adjacent. assert isValidLockSystem(\\"...\\") == False # Invalid lock system as there are more than one adjacent \'.\'. ```","solution":"def isValidLockSystem(s: str) -> bool: Determines if a given sequence is a valid digital lock system. A valid lock system has no two adjacent \'.\' characters. :param s: A string representing the lock system. :return: True if the string is a valid digital lock system, False otherwise. return \'..\' not in s"},{"question":"A renowned botanist is working on a revolutionary method to optimize the growth of plants in different environmental conditions. The botanist has n different types of plants, each characterized by their growth rate in specific environments. He needs your help to simulate the growth process and predict the height of each plant after a given number of days. Each plant type i has an initial height of hi units and a growth rate gi units per day in the environment provided. Your task is to write a program that, given the initial heights and growth rates of n plants, calculates the final height of each plant after t days. Input The input consists of multiple cases. Each case is given in the following format: n t h1 g1 h2 g2 ... hn gn where: - n is the number of plant types. - t is the number of days. - hi is the initial height of the i-th plant. - gi is the growth rate per day of the i-th plant. The end of the input is given with n = 0 and t = 0. Each value meets the following conditions: 1 ≤ n ≤ 1000 0 ≤ t ≤ 1000 0 ≤ hi, gi ≤ 1000 The number of test cases does not exceed 100. Output For each test case, output the final height of each plant type after t days in the same order as the input. Separate the results of different test cases by an empty line. Example Input 3 10 5 2 3 1 8 0 2 5 1 3 2 1 0 0 Output 25 13 8 16 5","solution":"def calculate_final_heights(test_cases): results = [] for n, t, plants in test_cases: if n == 0 and t == 0: break final_heights = [(h + g * t) for h, g in plants] results.append(final_heights) return results"},{"question":"A palindrome is a string that reads the same forward and backward. Given a string ```s```, write a function ```shortest_palindrome()``` that returns the shortest palindrome that can be formed by adding characters to the start of ```s```. Let\'s see some cases: ```python shortest_palindrome(\\"abcd\\") == \\"dcbabcd\\" shortest_palindrome(\\"aacecaaa\\") == \\"aaacecaaa\\" ``` In the first example, the palindrome is formed by adding \\"d\\", \\"c\\", \\"b\\" to the start of the string. In the second example, only \\"a\\" needs to be added. If the input string is already a palindrome, the function should return the string itself: ```python shortest_palindrome(\\"racecar\\") == \\"racecar\\" ``` You can assume the input only contains lowercase letters. Efficient algorithms are encouraged to reduce time complexity. Happy coding!","solution":"def shortest_palindrome(s: str) -> str: Returns the shortest palindrome that can be formed by adding characters to the start of s. if s == s[::-1]: return s for i in range(len(s) - 1, -1, -1): if s[:i + 1] == s[:i + 1][::-1]: return s[len(s) - 1:i:-1] + s return \\"\\" # A more optimal approach can be implemented using the KMP algorithm to find the longest palindromic prefix: def shortest_palindrome_kmp(s: str) -> str: Returns the shortest palindrome that can be formed by adding characters to the start of s using Knuth-Morris-Pratt algorithm to find the longest palindromic prefix. rev_s = s[::-1] concat = s + \\"#\\" + rev_s lps = [0] * len(concat) j = 0 # length of previous longest prefix suffix for i in range(1, len(concat)): while (j > 0 and concat[i] != concat[j]): j = lps[j - 1] if concat[i] == concat[j]: j += 1 lps[i] = j return rev_s[:len(s) - lps[-1]] + s"},{"question":"Given an array of integers A of length N, you need to answer Q queries of the following two types: - Type 1: Increase the value of the i_q-th element of A by v_q. - Type 2: Answer the maximum value occurring in the subarray of A between the l_q-th and r_q-th indices (inclusive). -----Constraints----- - N, Q, i_q, l_q, r_q, and v_q are integers. - 1 ≤ N ≤ 100000 - 1 ≤ Q ≤ 50000 - 0 ≤ A[i] ≤ 10^9 - 1 ≤ i_q ≤ N - 1 ≤ l_q ≤ r_q ≤ N - |A| = N - There is at least one query of type 2 in each testcase. -----Input----- Input is given from Standard Input in the following format: N A Q Query_1 vdots Query_Q Here, Query_i in the 4-th through (Q+3)-th lines is one of the following: 1 i_q v_q 2 l_q r_q -----Output----- For each query of type 2, print a line containing the maximum value in the specified subarray. -----Sample Input----- 5 1 2 3 4 5 4 2 2 5 1 3 2 2 1 4 2 3 3 -----Sample Output----- 5 5 5 In the first query, the maximum value in the subarray [2, 5] is 5. In the second query, the value at the 3rd position in the array is increased by 2, resulting in the array [1, 2, 5, 4, 5]. In the third query, the maximum value in the subarray [1, 4], which now corresponds to [1, 2, 5, 4], is 5. In the fourth query, the maximum value in the subarray [3, 3], which contains only the element 5, is 5.","solution":"def process_queries(N, A, Q, queries): results = [] for query in queries: if query[0] == 1: _, i_q, v_q = query A[i_q - 1] += v_q elif query[0] == 2: _, l_q, r_q = query results.append(max(A[l_q - 1:r_q])) return results"},{"question":"A text is considered \\"almost a palindrome\\" if, after removing exactly one character from it, the resulting text is a palindrome. A palindrome is a word or phrase that reads the same forwards and backwards, ignoring spaces, punctuation, and capitalization. **Your task is to** write a function that determines if a given string (without spaces, punctuation, and all in lowercase) is \\"almost a palindrome\\". For example: - The string `radkar` is \\"almost a palindrome\\" because removing the character `k` results in the palindrome `radar`. - The string `abccdba` is \\"almost a palindrome\\" because removing the character `d` results in the palindrome `abccba`. - The string `abcdef` is not \\"almost a palindrome\\". **Function Signature:** ```python def is_almost_palindrome(s: str) -> bool: ``` Good luck! Note: You can assume that the input string `s` will only contain lowercase alphabetical characters and will have a length between 3 and 1000 inclusive. Thanks to @codehelper for the original idea.","solution":"def is_almost_palindrome(s: str) -> bool: Determines if a given string is almost a palindrome, i.e., it can be made a palindrome by removing exactly one character. def is_palindrome(s: str) -> bool: return s == s[::-1] n = len(s) # Two pointers to check from both ends left, right = 0, n - 1 while left < right: if s[left] != s[right]: # If characters at left and right do not match, check the substrings formed by removing one character remove_left = s[left+1:right+1] remove_right = s[left:right] return is_palindrome(remove_left) or is_palindrome(remove_right) left += 1 right -= 1 return False # If it already passed the previous while loop without removals, it\'s not almost palindrome."},{"question":"Array Subset Sum Given an array of integers and a target sum, determine if there exists a subset within the array that sums exactly to the target sum. Input The first line contains an integer, n, the number of elements in the array. The second line contains n integers separated by spaces, representing the elements of the array. The third line contains an integer, T, the target sum. Output Print \\"YES\\" if there exists a subset whose sum is exactly T. Otherwise, print \\"NO\\". Constraints * 1 leq n leq 100 * -10^2 leq array elements leq 10^2 * -1000 leq T leq 1000 Sample Input 1 5 1 2 3 4 5 9 Sample Output 1 YES Sample Input 2 3 -1 1 0 2 Sample Output 2 NO Sample Input 3 4 15 -7 -3 8 8 Sample Output 3 YES Sample Input 4 3 1 2 3 6 Sample Output 4 YES Example Input 5 1 2 3 4 5 9 Output YES","solution":"def is_subset_sum(arr, n, T): Determines if there exists a subset of `arr` that sums exactly to `T`. Parameters: arr (list of int): The list of integers. n (int): The number of elements in the list. T (int): The target sum. Returns: str: \\"YES\\" if a subset with sum T exists, otherwise \\"NO\\". # Initialize a set to keep track of possible sums possible_sums = set() possible_sums.add(0) for num in arr: new_sums = possible_sums.copy() for s in possible_sums: new_sum = s + num if new_sum == T: return \\"YES\\" new_sums.add(new_sum) possible_sums = new_sums return \\"NO\\" # Function to parse input like the example given def array_subset_sum(input_text): lines = input_text.strip().split(\'n\') n = int(lines[0]) arr = list(map(int, lines[1].split())) T = int(lines[2]) return is_subset_sum(arr, n, T)"},{"question":"Given an array of integers, your task is to determine the smallest integer that is missing from the array. The missing integer should be greater than 0. Your implementation should have a time complexity of O(n). Input: - The first line contains a single integer n, the number of elements in the array. - The second line contains n space-separated integers representing the elements of the array. Output: - Output the smallest positive integer that is missing from the array. Example: Input: 5 3 4 -1 1 2 Output: 5 Input: 3 1 2 0 Output: 3 Input: 4 -2 -3 4 2 Output: 1 **Note**: Ensure that your solution accounts for possible edge cases and handles arrays with both positive and negative numbers.","solution":"def smallest_missing_positive_integer(arr): Returns the smallest positive integer that is missing from the array. n = len(arr) # Place each number in its correct position if possible for i in range(n): while 1 <= arr[i] <= n and arr[arr[i] - 1] != arr[i]: arr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1] # Identify the first position that is incorrect for i in range(n): if arr[i] != i + 1: return i + 1 return n + 1"},{"question":"You are working on a software project to manage the inventory of a warehouse. The warehouse contains a variety of items, each identified by a unique item code and stored in different quantities. Your task is to write a program to search for the items that are running low in stock. An item is considered to be running low if its quantity is less than or equal to a specified threshold value. -----Input----- The first line contains two integers N and T, satisfying 1 leq N leq 10^5 and 1 leq T leq 10^4. N denotes the total number of different items in the warehouse, and T denotes the threshold quantity. The following N lines each contain an integer C_i and an integer Q_i, where C_i is the item code (a unique identifier for the item, 1 leq C_i leq 10^9) and Q_i is the quantity of the item (0 leq Q_i leq 10^9). -----Output----- Output the item codes of the items that are running low in stock, in ascending order, each code on a new line. If no item is running low, output \\"ALL ITEMS SUFFICIENT\\" instead. -----Examples----- Sample Input 1: 5 10 101 5 102 15 103 8 104 20 105 7 Sample Output 1: 101 103 105 Sample Input 2: 4 50 201 100 202 150 203 90 204 70 Sample Output 2: ALL ITEMS SUFFICIENT","solution":"def find_low_stock_items(N, T, items): Returns the item codes of the items running low in stock. :param int N: Total number of different items. :param int T: Threshold quantity. :param List[Tuple[int, int]] items: List of tuples where each tuple contains item code and quantity. :return: List of item codes that are running low in stock. low_stock_items = [item[0] for item in items if item[1] <= T] if len(low_stock_items) == 0: return [\\"ALL ITEMS SUFFICIENT\\"] return sorted(low_stock_items)"},{"question":"The city\'s public transportation system has recently started to track the movement of its buses. Each bus has a unique ID and reports its location (x, y) coordinates at regular intervals. A transportation manager wants to find the bus that has traveled the highest distance over a given period. You need to help him by writing a program that calculates the total distance traveled by each bus and identifies the bus with the highest traveled distance. ------ Input Format ------ - The first line contains N, the number of position reports. - Each of the next N lines contains the following information: - Bus ID (an integer) - x-coordinate (an integer) - y-coordinate (an integer) ------ Output Format ------ Output the Bus ID of the bus that has traveled the highest distance. If multiple buses have traveled the same maximum distance, output the smallest Bus ID. ------ Constraints ------ 1 ≤ N ≤ 1000 |x|, |y| ≤ 10^6 ------ Sample Input 1 ------ 8 1 0 0 2 1 1 1 3 4 2 4 5 3 0 0 3 0 5 3 5 5 2 5 7 ------ Sample Output 1 ------ 3 ------ Explanation 1 ------ Bus 1 traveled a distance of 5 (from (0, 0) to (3, 4)). Bus 2 traveled a distance of 6 (from (1, 1) to (4, 5), then (4, 5) to (5, 7)). Bus 3 traveled a distance of 10 (from (0, 0) to (0, 5), then (0, 5) to (5, 5)). Thus, Bus 3 traveled the highest distance.","solution":"import math from collections import defaultdict def calculate_distance(x1, y1, x2, y2): return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) def find_bus_with_highest_distance(reports): bus_positions = defaultdict(list) bus_distances = defaultdict(float) for report in reports: bus_id, x, y = report bus_positions[bus_id].append((x, y)) for bus_id, positions in bus_positions.items(): total_distance = 0 for i in range(1, len(positions)): total_distance += calculate_distance(positions[i-1][0], positions[i-1][1], positions[i][0], positions[i][1]) bus_distances[bus_id] = total_distance max_distance = max(bus_distances.values()) buses_with_max_distance = [bus_id for bus_id, distance in bus_distances.items() if distance == max_distance] return min(buses_with_max_distance) def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) reports = [] index = 1 for i in range(N): bus_id, x, y = int(data[index]), int(data[index+1]), int(data[index+2]) reports.append((bus_id, x, y)) index += 3 result = find_bus_with_highest_distance(reports) print(result)"},{"question":"Liam is organizing a coding festival and he needs to check if the provided ticket codes are valid. Each valid ticket code follows these rules: - It starts with either \'FST\' or \'SND\' - It is followed by exactly 5 digits - No special characters or letters other than \'FST\' and \'SND\' are allowed Write a program to verify if a given ticket code is valid according to these rules. -----Input----- The only line contains a string of length not more than 100 – the ticket code. -----Output----- Print \\"VALID\\" if the ticket code follows the rules, otherwise print \\"INVALID\\". -----Examples----- Input FST12345 Output VALID Input SND54321 Output VALID Input FST12A34 Output INVALID Input THIRD1234 Output INVALID","solution":"import re def is_valid_ticket_code(ticket_code): Returns \'VALID\' if the ticket code follows the rules, otherwise \'INVALID\'. Rules: - Starts with either \'FST\' or \'SND\' - Followed by exactly 5 digits - No special characters or letters other than \'FST\' and \'SND\' are allowed if re.match(r\'^(FST|SND)d{5}\', ticket_code): return \\"VALID\\" else: return \\"INVALID\\""},{"question":"A city is organizing a marathon where multiple checkpoints are placed along the route. Each checkpoint has a certain energy drink supply that can only be picked up once when a runner passes through. Runners can choose their start and end checkpoints, and can run in any order between these points. The goal is to optimize the energy drink collection from the chosen route. Given the energy drink supply at each checkpoint, you need to determine the maximum energy drink supply a runner can collect if the runner starts at one checkpoint and ends at another (possibly the same checkpoint), without revisiting any checkpoint. Input The first line contains an integer n (1 ≤ n ≤ 100) — the total number of checkpoints. The second line contains n integers e1, e2, ..., en (1 ≤ ei ≤ 100), where ei represents the energy drink supply at the i-th checkpoint. Output Print a single integer — the maximum energy drink supply a runner can collect by starting at one checkpoint and ending at another (or the same) without revisiting any checkpoint. Examples Input 5 5 10 15 20 25 Output 75 Input 3 3 2 1 Output 6 Input 4 7 7 7 7 Output 28","solution":"def max_energy_drink_supply(checkpoints): Returns the maximum energy drink supply a runner can collect. Parameters: checkpoints (list of int): List containing energy drink supplies at each checkpoint. Returns: int: Maximum energy drink supply that can be collected. return sum(checkpoints)"},{"question":"Given a string denoting a non-negative number N, determine whether it is divisible by 11. You are not allowed to convert the string to an integer directly. Example 1: Input: N = \\"121\\" Output: True Explanation: 121 is divisible by 11. Example 2: Input: N = \\"123456789\\" Output: False Explanation: 123456789 is not divisible by 11. Your Task: Your task is to complete the function isDivisibleBy11() which takes a string as input and returns a boolean value (True or False). You do not need to take any input or print anything. Expected Time Complexity: O(|N|) Expected Auxiliary Space: O(1) Constraints: 1 <= |N| <= 10^{5} Hint: A number is divisible by 11 if the difference between the sum of digits in odd positions and the sum of digits in even positions is a multiple of 11.","solution":"def isDivisibleBy11(N): Determines if a given string representing a non-negative number N is divisible by 11 without converting the string directly to an integer. odd_sum = 0 even_sum = 0 # Iterate through the string and sum up the digits in odd and even positions for i, char in enumerate(N): digit = int(char) if i % 2 == 0: # odd positions in 0-indexed format odd_sum += digit else: # even positions in 0-indexed format even_sum += digit difference = abs(odd_sum - even_sum) # Check if the difference is divisible by 11 return difference % 11 == 0"},{"question":"Given an integer n, write a program to generate a list of lists where each inner list contains the first \'i\' prime numbers, for i ranging from 1 to n. Example 1: Input: 4 Output: [[2], [2, 3], [2, 3, 5], [2, 3, 5, 7]] Your Task: You don\'t need to input anything. Complete the function generatePrimeLists() which takes an integer n as the input parameter and returns a list of lists containing the required pattern. Constraints: 1 <= N <= 10","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def generate_prime_numbers(n): Helper function to generate the first n prime numbers. primes = [] num = 2 while len(primes) < n: if is_prime(num): primes.append(num) num += 1 return primes def generatePrimeLists(n): Returns a list of lists where each inner list contains the first \'i\' prime numbers, for i ranging from 1 to n. result = [] for i in range(1, n + 1): result.append(generate_prime_numbers(i)) return result"},{"question":"You are given a word puzzle grid containing mixed uppercase letters and wildcards (\'?\'). The wildcards can be substituted with any uppercase letter to form valid words. You need to check if it is possible to form a specified target word by substituting the wildcards in the grid. A valid word can be formed by connecting letters horizontally or vertically. Given a n × m grid of uppercase letters and wildcards, and a target word, determine if the word can be formed. The word must be formed in a continuous vertical or horizontal path. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns, respectively. The next n lines each contain a string of length m consisting of uppercase letters and wildcards (\'?\'). The last line contains the target word (1 ≤ length of target ≤ 20), consisting of uppercase letters only. Output Print \\"YES\\" if it\'s possible to form the target word by substituting the wildcards with appropriate letters, otherwise print \\"NO\\". Examples Input 4 5 AB?F? C?DGE ???GH IJK?L BDGFI Output YES Input 3 3 ABC D?F GHI XYZ Output NO Note For the first example, the word \\"BDGFI\\" can be formed by replacing the wildcards and moving horizontally and vertically. For the second example, the word \\"XYZ\\" cannot be formed as there are no connected sequence of wildcards and letters matching the target word.","solution":"def can_form_word(grid, n, m, target): def search_word(x, y, index): if index == len(target): return True if x < 0 or x >= n or y < 0 or y >= m or visited[x][y]: return False if grid[x][y] != target[index] and grid[x][y] != \'?\': return False visited[x][y] = True if (search_word(x+1, y, index+1) or search_word(x-1, y, index+1) or search_word(x, y+1, index+1) or search_word(x, y-1, index+1)): return True visited[x][y] = False return False visited = [[False for _ in range(m)] for _ in range(n)] for i in range(n): for j in range(m): if grid[i][j] == target[0] or grid[i][j] == \'?\': if search_word(i, j, 0): return \\"YES\\" return \\"NO\\""},{"question":"The Magic of Palindromes. You need to write a program that checks if a given string can be rearranged to form a palindrome. A palindrome is a word that reads the same backward as forward. If it is possible to rearrange the string to make it a palindrome, print \\"YES\\". Otherwise, print \\"NO\\". ------ Input Format ------ - The first line contains an integer T, the number of test cases. - Each of the next T lines contains a single string S. ------ Output Format ------ For each test case, output \\"YES\\" if it is possible to rearrange the string to form a palindrome, otherwise output \\"NO\\". Each letter of the output may be printed in either uppercase or lowercase, i.e., YES, Yes, yes will all be considered equivalent. ------ Constraints ------ 1 ≤ T ≤ 50 1 ≤ length(S) ≤ 100 ----- Sample Input 1 ------ 3 carrace daily aab ----- Sample Output 1 ------ YES NO YES ----- Explanation 1 ------ Test case 1: The string \\"carrace\\" can be rearranged to form the palindrome \\"racecar\\". Test case 2: The string \\"daily\\" cannot be rearranged to form a palindrome. Test case 3: The string \\"aab\\" can be rearranged to form the palindrome \\"aba\\".","solution":"def can_form_palindrome(s): Checks if the characters of the string can be rearranged to form a palindrome. Args: s (str): Input string to check Returns: str: \\"YES\\" if the string can be rearranged to form a palindrome, otherwise \\"NO\\" from collections import Counter count = Counter(s) odd_counts = sum(1 for x in count.values() if x % 2 != 0) return \\"Yes\\" if odd_counts <= 1 else \\"No\\" def check_palindromes(test_cases): Processes multiple test cases to check for palindrome rearrangement possibility. Args: test_cases (list): List of test case strings Returns: list: List of results for each test case return [can_form_palindrome(s) for s in test_cases] def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) test_cases = data[1:T + 1] results = check_palindromes(test_cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"You are given a binary search tree (BST) where each node contains an integer value. Your task is to write a function that returns the sum of values of all nodes with a value in the range `[low, high]` inclusive. A binary search tree is a binary tree in which for each node, known as the root, its left subtree must contain only nodes with values less than the root\'s value and its right subtree must contain only nodes with values greater than the root\'s value. # Task Write a method to calculate the sum of nodes within the specified range [low, high]. Define the function as follows: ```python class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def rangeSumBST(root: TreeNode, low: int, high: int) -> int: # your code goes here # Example: # Given the following BST: # 10 # / # 5 15 # / # 3 7 18 # rangeSumBST(root, 7, 15) should return 32 (7 + 10 + 15) ```","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def rangeSumBST(root: TreeNode, low: int, high: int) -> int: if root is None: return 0 # If root\'s value is out of range, only consider the relevant subtree if root.val < low: return rangeSumBST(root.right, low, high) if root.val > high: return rangeSumBST(root.left, low, high) # If root\'s value is within range, consider both subtrees and include root\'s value return root.val + rangeSumBST(root.left, low, high) + rangeSumBST(root.right, low, high)"},{"question":"You are given a string boldsymbol{s} and a list of words. Your task is to determine if the string can be segmented into a space-separated sequence of one or more dictionary words from the given list. Constraints The length of the string boldsymbol{s} is at most 1000. All words in the list are non-empty and contain only lowercase English letters. Input Format The first line contains the string boldsymbol{s}. The second line contains the number of words, boldsymbol{n}. The next boldsymbol{n} lines each contain a word from the dictionary. Output Format Print True if the string can be segmented into a sequence of one or more dictionary words. Otherwise, print False. Sample Input leetcode 2 leet code Sample Output True Explanation The string \\"leetcode\\" can be segmented into \\"leet code\\" using words from the dictionary. Additional Note The words in the dictionary can be reused multiple times if necessary.","solution":"def can_segment_string(s, word_dict): Returns True if the string s can be segmented into a space-separated sequence of one or more dictionary words from word_dict. Otherwise, returns False. word_set = set(word_dict) dp = [False] * (len(s) + 1) dp[0] = True # Base case: an empty string can always be segmented for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return dp[-1]"},{"question":"You are given a binary tree and need to find the sum of all left leaves in the tree. A leaf is a node with no children. A left leaf is a leaf that is the left child of its parent. Your task is to write a function that returns the sum of all the left leaves in the given binary tree. Example: ``` 3 / 9 20 / 15 7 ``` In this tree, the left leaves are 9 and 15. Therefore, the result should be 24. Implement the function `sum_of_left_leaves(root)` where `root` is the root node of the binary tree. The function should return an integer representing the sum of left leaves. Here\'s a definition for the binary tree nodes you need to use in the function: ```python class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None ``` Example function call: ```python # Construct the binary tree for the given example root = TreeNode(3) root.left = TreeNode(9) root.right = TreeNode(20) root.right.left = TreeNode(15) root.right.right = TreeNode(7) # The function should return 24 because 9 and 15 are left leaves result = sum_of_left_leaves(root) print(result) # Output: 24 ``` Note: Your solution should consider edge cases, such as an empty tree or a tree with only one node.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def sum_of_left_leaves(root): if not root: return 0 def is_leaf(node): return node is not None and node.left is None and node.right is None def dfs(node, is_left): if not node: return 0 if is_leaf(node) and is_left: return node.val return dfs(node.left, True) + dfs(node.right, False) return dfs(root, False)"},{"question":"# Background You are given an array of integers, along with a target integer value. Your task is to determine a pair of indices in the array such that the elements at those indices sum up to the target value. If no such pair exists, return an empty list. # Constraints - You may assume that each input would have exactly one solution, and you may not use the same element twice. - The array may contain both positive and negative integers and will have at least 2 elements. - The array is not necessarily sorted. - Your solution should be optimized for time complexity. # Input/Output Input The function `find_pair_with_sum(arr, target)` will accept the following parameters: - an array of integers `arr` - an integer `target` Output The function will return a list of two integers representing the indices of the two elements in `arr` that add up to the `target`. # Example ```python def find_pair_with_sum(arr, target): # your code here # Example Case 1 arr = [2, 7, 11, 15] target = 9 result = find_pair_with_sum(arr, target) # result should be [0, 1] since 2 + 7 = 9 # Example Case 2 arr = [3, 2, 4] target = 6 result = find_pair_with_sum(arr, target) # result should be [1, 2] since 2 + 4 = 6 # Example Case 3 arr = [3, 3] target = 6 result = find_pair_with_sum(arr, target) # result should be [0, 1] since 3 + 3 = 6 ``` *Good Luck!*","solution":"def find_pair_with_sum(arr, target): Returns the indices of the two elements in \'arr\' that add up to \'target\'. The function assumes that there is exactly one solution. seen = {} for i, number in enumerate(arr): complement = target - number if complement in seen: return [seen[complement], i] seen[number] = i return []"},{"question":"You are given an array B of N integers B[1], B[2], ..., B[N]. You have to answer Q queries. Each query consists of 2 integers L and R. For each query, you have to find the number of distinct elements in the subarray B[L], B[L+1], ..., B[R]. Input The first line consists of 2 space-separated integers N and Q. The next line consists of N space-separated integers, the i-th integer being B[i]. Then, Q lines follow, each line consisting of 2 space-separated integers L and R. Output Print the answer to each query on a new line. Constraints 1 ≤ N ≤ 10^5 1 ≤ Q ≤ 10^5 1 ≤ B[i] ≤ 10^5 1 ≤ L ≤ R ≤ N NOTE: We are using 1-based indexing for array B. SAMPLE INPUT 7 3 5 3 5 2 2 3 1 1 3 1 7 4 6 SAMPLE OUTPUT 2 4 2 Explanation For query 1: The subarray is B[1], B[2], B[3] = [5, 3, 5]. The distinct elements are 5, 3. Hence, the output is 2. For query 2: The subarray is B[1], B[2], ..., B[7] = [5, 3, 5, 2, 2, 3, 1]. The distinct elements are 5, 3, 2, 1. Hence, the output is 4. For query 3: The subarray is B[4], B[5], B[6] = [2, 2, 3]. The distinct elements are 2, 3. Hence, the output is 2.","solution":"def distinct_elements_in_subarray(B, queries): Function to find the count of distinct elements in given subarrays. Parameters: B (list): List of integers representing the array B. queries (list of tuples): List of tuples representing the queries with (L, R) ranges. Returns: list: List of integers representing the count of distinct elements for each query. results = [] # Process each query for L, R in queries: subarray = B[L-1:R] # Convert to 0-based index distinct_count = len(set(subarray)) results.append(distinct_count) return results"},{"question":"The Board -------------- The board starts out with a grid of numbers. Each cell of the grid contains a positive integer. Example grid (5x5): ``` 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ``` The Rules -------------- - Two players take turns. - On each turn, a player selects either a row or column and removes that row or column from the grid. - The player who cannot make a move (because there are no rows or columns left) loses the game. The Task ------------ Write an AI function `choose_move` (or `chooseMove`, or `choose-move`) that takes the current grid as input and returns either a row index or column index to remove. The input grid is represented as a list of lists of positive integers. Example function signature could be: ```python def choose_move(grid): # Implementation here # grid is a list of lists of integers, for example: # [ # [1, 2, 3, 4, 5], # [6, 7, 8, 9, 10], # [11, 12, 13, 14, 15], # [16, 17, 18, 19, 20], # [21, 22, 23, 24, 25] # ] # Your function should return a tuple containing a string (\'row\' or \'col\') and an integer index return (\\"row\\", 2) # Example output ``` The function should be designed to win every game it plays when tested in a series of games against an opponent.","solution":"def choose_move(grid): Function to decide whether to remove row or column from the grid. Returns a tuple containing: - \'row\' or \'col\' indicating whether to remove a row or a column. - The index of the row or column to remove. num_rows = len(grid) num_cols = len(grid[0]) # This AI will pick row or column which has more elements initially if num_rows >= num_cols: return (\\"row\\", 0) else: return (\\"col\\", 0)"},{"question":"Write a program to determine if a number is a palindrome. -----Input----- The first line contains an integer T, the total number of test cases. Then T lines follow, each line contains an integer N. -----Output----- For each test case, display \\"YES\\" if the given number N is a palindrome, otherwise display \\"NO\\" in a new line. -----Constraints----- - 1 ≤ T ≤ 1000 - 0 ≤ N ≤ 100000 -----Example----- Input 4 121 12321 123 1221 Output YES YES NO YES","solution":"def is_palindrome(N): Determines if a given number N is a palindrome. original_str = str(N) reversed_str = original_str[::-1] return original_str == reversed_str def process_test_cases(T, test_cases): results = [] for N in test_cases: if is_palindrome(N): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Emily is organizing a community library where each book belongs to a certain category. The categories are connected in a hierarchical structure, much like a multi-level marketing scheme. Each category of books can either be a subcategory of another or the main parent category. Emily might receive queries from users asking for the cumulative count of books in a specific category, including all its subcategories and sub-subcategories (and so on). She needs your help to handle these queries efficiently. Your task is to determine the cumulative number of books in a given category. -----Input----- The first line contains two integers n and q (1 leq n, q leq 10^3), the number of categories and the number of queries, respectively. The second line contains n integers b_i (1 leq b_i leq 10^6), where b_i is the number of books in the i-th category. Each of the next n-1 lines contains two integers u and v (1 leq u, v leq n, u neq v), which means category v is a subcategory of category u. The next q lines each contain one integer c (1 leq c leq n), asking for the cumulative count of books in category c. -----Output----- For each query, output the cumulative number of books in the specified category. -----Examples----- Input 5 3 5 3 2 4 1 1 2 1 3 2 4 2 5 2 1 4 Output 8 15 4 Explanation: - Category 1 has categories 2, 3, 4, and 5: 5 + 3 + 2 + 4 + 1 = 15 - Category 2 has categories 4 and 5: 3 + 4 + 1 = 8 - Category 4 has no subcategories: 4","solution":"def calculate_cumulative_books(n, q, books, hierarchy, queries): from collections import defaultdict, deque # Create adjacency list for the category hierarchy tree = defaultdict(list) for u, v in hierarchy: tree[u].append(v) tree[v].append(u) # Function to perform DFS and calculate cumulative books for each category def dfs(node, parent, cumulative_books): total_books = books[node - 1] for neighbor in tree[node]: if neighbor != parent: total_books += dfs(neighbor, node, cumulative_books) cumulative_books[node] = total_books return total_books # Dictionary to store cumulative books for each category cumulative_books = {} # Call DFS dfs(1, -1, cumulative_books) # Process queries results = [cumulative_books[c] for c in queries] return results"},{"question":"Description You are given an array of integers and a target integer. Your task is to determine the number of unique pairs of integers in the array whose sum equals the target integer. Each pair should be sorted in ascending order, and you should only count each pair once, regardless of the order in which the integers appear in the array. Input Format First line contains integers of the array separated by space. Second line contains the target integer. Output Format One line containing the number of unique pairs whose sum equals the target integer. Input Limits: 0 < Length(array) < 100 SAMPLE INPUT 1 5 7 -1 5 6 SAMPLE OUTPUT 2 Explanation The pairs of integers in the array that add up to the target integer (6) are: (1, 5), (7, -1) Note that the pair (5, 1) is considered the same as (1, 5), so it is only counted once. There are a total of 2 unique pairs. So the output is 2.","solution":"def count_pairs_with_sum(arr, target): Returns the number of unique pairs in the array whose sum equals the target integer. pairs = set() # To store unique pairs seen = set() # To store numbers we have seen so far for num in arr: complement = target - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) return len(pairs)"},{"question":"You are given a list of N integers A = [a_1, a_2, ldots, a_N]. You are tasked with determining the length of the longest subsequence of A that is strictly decreasing. A subsequence is derived from a sequence by deleting some or no elements without changing the order of the remaining elements. ------ Input ------ The first line of the input contains an integer N. The second line contains N space-separated integers a_1, a_2, ldots, a_N. ------ Output ------ Print the length of the longest strictly decreasing subsequence of the array A. ------ Constraints ------ 1 ≤ N ≤ 100,000 1 ≤ a_i ≤ 10^9 ----- Sample Input 1 ------ 6 5 3 4 8 6 7 ----- Sample Output 1 ------ 2 ----- Explanation 1 ------ The longest strictly decreasing subsequences are: [5, 3], [5, 4], [8, 6], and so on; each has a length of 2. ----- Sample Input 2 ------ 5 9 8 7 6 5 ----- Sample Output 2 ------ 5 ----- Explanation 2 ------ The entire array is one strictly decreasing subsequence [9, 8, 7, 6, 5] of length 5.","solution":"def longest_decreasing_subsequence_length(arr): if not arr: return 0 n = len(arr) dp = [1] * n for i in range(1, n): for j in range(i): if arr[j] > arr[i]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Book Management System In this exercise, you are going to design a simple Book Management System for a library. You need to implement three classes: `Book`, `Journal`, and `Library`. 1. The `Book` class should be initialized with the following attributes: - `title`: the title of the book - `author`: the name of the author - `isbn`: the ISBN number of the book Additionally, the `Book` class should have a method `get_info()` that returns a string with the format: `\\"Title: title, Author: author, ISBN: isbn\\"`. 2. The `Journal` class should extend the `Book` class and add the following attribute: - `issue_number`: the specific issue number of the journal The `Journal` class should override the `get_info()` method to return a string with the format: `\\"Title: title, Author: author, ISBN: isbn, Issue Number: issue_number\\"`. 3. The `Library` class should be initialized with one attribute: - `books`: a list to store `Book` and `Journal` objects The `Library` class should have the following methods: - `add_book(book)`: This method should add a new `Book` or `Journal` object to the `books` list. - `get_books()`: This method should return the information of all books in the library in the form of a list of strings, each calling the `get_info()` method of the respective `Book` or `Journal` object. Example: ```python book1 = Book(\\"1984\\", \\"George Orwell\\", \\"1234567890\\") journal1 = Journal(\\"Science Journal\\", \\"John Doe\\", \\"0987654321\\", 42) library = Library() library.add_book(book1) library.add_book(journal1) print(library.get_books()) # Output: # [\\"Title: 1984, Author: George Orwell, ISBN: 1234567890\\", # \\"Title: Science Journal, Author: John Doe, ISBN: 0987654321, Issue Number: 42\\"] ```","solution":"class Book: def __init__(self, title, author, isbn): self.title = title self.author = author self.isbn = isbn def get_info(self): return f\\"Title: {self.title}, Author: {self.author}, ISBN: {self.isbn}\\" class Journal(Book): def __init__(self, title, author, isbn, issue_number): super().__init__(title, author, isbn) self.issue_number = issue_number def get_info(self): return f\\"Title: {self.title}, Author: {self.author}, ISBN: {self.isbn}, Issue Number: {self.issue_number}\\" class Library: def __init__(self): self.books = [] def add_book(self, book): self.books.append(book) def get_books(self): return [book.get_info() for book in self.books]"},{"question":"Your task is to implement a class for a queue that supports two additional operations: `reverseFirstK` and `removeEveryNth`. You need to implement 4 methods as described below. 1. `enqueue`: Adds an element to the end of the queue. 2. `dequeue`: Removes and returns the element from the front of the queue. If the queue is empty, it should return -1. 3. `reverseFirstK(int k)`: Reverses the first `k` elements of the queue. If `k` is greater than the number of elements in the queue, it should reverse all elements. 4. `removeEveryNth(int n)`: Removes every `n`-th element from the queue. If `n` is greater than the length of the queue, the queue remains unchanged. # Example 1: Input: ``` enqueue(10) enqueue(20) enqueue(30) reverseFirstK(2) dequeue() enqueue(40) removeEveryNth(2) dequeue() dequeue() removeEveryNth(5) dequeue() ``` Output: ``` 20 10 -1 ``` Explanation: ``` enqueue(10) the queue will be [10] enqueue(20) the queue will be [10, 20] enqueue(30) the queue will be [10, 20, 30] reverseFirstK(2) the queue will now be [20, 10, 30] dequeue() should return 20, queue is now [10, 30] enqueue(40) queue will now be [10, 30, 40] removeEveryNth(2) will remove 30, queue is now [10, 40] dequeue() should return 10, queue is now [40] dequeue() should return 40, queue is now empty [] removeEveryNth(5) with no effect as queue is empty [] dequeue() should return -1 because the queue is empty ``` # Example 2: Input: ``` enqueue(1) enqueue(2) enqueue(3) enqueue(4) reverseFirstK(3) dequeue() removeEveryNth(2) dequeue() dequeue() dequeue() ``` Output: ``` 3 1 -1 ``` Explanation: ``` enqueue(1) the queue will be [1] enqueue(2) the queue will be [1, 2] enqueue(3) the queue will be [1, 2, 3] enqueue(4) the queue will be [1, 2, 3, 4] reverseFirstK(3) the queue will now be [3, 2, 1, 4] dequeue() should return 3, queue is now [2, 1, 4] removeEveryNth(2) will remove 1 as 2 is the 2nd element, queue is now [2, 4] dequeue() should return 2, queue is now [4] dequeue() should return 4, queue is now empty [] dequeue() should return -1 because the queue is empty ``` # Your Task: You don\'t need to read input or print anything. You are required to complete the following methods: * `void enqueue(int x)`: Adds element `x` to the end of the queue. * `int dequeue()`: Removes and returns the front element of the queue. If the queue is empty, return -1. * `void reverseFirstK(int k)`: Reverses the order of the first `k` elements of the queue. * `void removeEveryNth(int n)`: Removes every `n`-th element from the queue. # Expected Time Complexity: * `O(1)` for `enqueue` and `dequeue`. * `O(k)` for `reverseFirstK`. * `O(n)` for `removeEveryNth`. # Expected Auxiliary Space: `O(1)` for all methods. # Constraints: * 1 <= Number of queries <= 10^4 * 1 <= k, n <= Number of elements in the queue * 1 <= Element value <= 10^9","solution":"class Queue: def __init__(self): self.queue = [] def enqueue(self, x): self.queue.append(x) def dequeue(self): if len(self.queue) == 0: return -1 return self.queue.pop(0) def reverseFirstK(self, k): k = min(k, len(self.queue)) self.queue[:k] = reversed(self.queue[:k]) def removeEveryNth(self, n): if n > len(self.queue): return index = n - 1 while index < len(self.queue): self.queue.pop(index) index += (n - 1)"},{"question":"Write a program to determine if any anagram of a given string is a palindrome. A palindrome is a word or phrase that reads the same forwards and backwards, ignoring spaces, punctuation, and capitalization. An anagram is a reordering of the letters of one word or phrase to form another word or phrase, using all the original letters exactly once. Example: For the string \\"civic\\", one of the anagrams is \\"civic\\" which is a palindrome. Therefore, the function should return \\"YES\\". For the string \\"ivicc\\", one of the anagrams is \\"civic\\" which is a palindrome. Therefore, the function should return \\"YES\\". For the string \\"hello\\", it is not possible to reorder the letters to make a palindrome. Therefore, the function should return \\"NO\\". Write a function: ```python def can_form_palindrome(s: str) -> str: ``` Function Signature: ```python def can_form_palindrome(s: str) -> str: ``` Returns: - string: \\"YES\\" if any anagram of the input string can form a palindrome, otherwise \\"NO\\". Input: - string s: the input string Constraints: - The string will contain only lowercase letters. - 1 leq len(s) leq 10^5 Example Input: ivicc Output: YES Note: For the given string \'ivicc\', it is possible to reorder the letters to form the palindrome \'civic\'. Hence, the output is \'YES\'. Input: hello Output: NO Note: For the given string \'hello\', it is not possible to reorder the letters to form a palindrome. Hence, the output is \'NO\'.","solution":"def can_form_palindrome(s: str) -> str: from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Check how many characters have an odd count odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # For a string to form a palindrome # There can be at most one character with an odd count if odd_count > 1: return \\"NO\\" else: return \\"YES\\""},{"question":"Alex is studying properties of strings and stumbled upon an interesting problem. He wants to remove some characters from a string such that the remaining characters form a non-decreasing sequence in lexicographical order. Your task is to help Alex determine the minimum number of characters he needs to remove to achieve this goal. -----Input----- The input consists of a single line containing a string s of lowercase English letters (1 le |s| le 1000). -----Output----- Print a single integer — the minimum number of characters Alex needs to remove from the string to make the remaining characters form a non-decreasing sequence. -----Examples----- Input abcdbca Output 3 Input edcba Output 4 Input abcdef Output 0 -----Note----- In the first example, Alex can remove the characters \'d\', \'b\', and \'c\' to obtain the non-decreasing sequence \'abca\'. Alternatively, he could also remove \'d\', \'b\', and \'a\' to obtain \'abcc\'. Note that removing any three characters achieves the goal. In the second example, Alex must remove four characters \'e\', \'d\', \'c\', and \'b\' to obtain the non-decreasing sequence \'a\'. In the third example, the string is already a non-decreasing sequence, so no characters need to be removed.","solution":"def min_removals_for_non_decreasing(s): n = len(s) # Initialize LIS array, where lis[i] represents the length of the Longest # Increasing Subsequence that ends with the character s[i] lis = [1] * n # Calculate LIS length for each position in string for i in range(1, n): for j in range(i): if s[i] >= s[j]: lis[i] = max(lis[i], lis[j] + 1) # The length of the longest increasing subsequence in the string long_inc_subseq_len = max(lis) # Minimum number of removals to make the sequence non-decreasing min_removals = n - long_inc_subseq_len return min_removals"},{"question":"# Palindrome Permutation A palindrome is a word or phrase that reads the same forwards and backwards (excluding spaces, punctuation, and capitalization). For instance, \\"A Santa at NASA\\" is a palindrome when we ignore case and spaces. A permutation is a rearrangement of letters. The task here is to determine if any permutation of a given string is a palindrome. # Problem: Given a string, write a function that checks if any permutation of the input string can form a palindrome. # Constraints: 1. The input string will contain only lowercase alphabetical characters. 2. The input string length will be at most 1000 characters. # Example: ``` palindrome_permutation(\'civic\') # => True (civic itself is a palindrome) palindrome_permutation(\'ivicc\') # => True (civic is a palindrome permutation) palindrome_permutation(\'hello\') # => False (no permutation of hello can be a palindrome) palindrome_permutation(\'aaabbbb\') # => True (bbaaabb is a palindrome permutation) ``` # Hint: - A string can be rearranged to form a palindrome if at most one character occurs an odd number of times. Write a function `palindrome_permutation` that takes a single string as input and returns a boolean indicating whether any permutation of the string can form a palindrome.","solution":"def palindrome_permutation(s): Checks if any permutation of the input string can form a palindrome. Args: s (str): Input string consisting of lowercase alphabetical characters. Returns: bool: True if any permutation of the string can form a palindrome, False otherwise. from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Track the number of characters with odd frequencies odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can form a palindrome if it has at most one character with an odd frequency return odd_count <= 1"},{"question":"Path to Reach Target You are provided with an N x N grid where each cell contains a non-negative integer representing the cost to step into that cell. Your objective is to start from the top-left corner of the grid (0, 0) and reach the bottom-right corner (N-1, N-1) with the minimal cost. You can move only right or down from any cell. Your task is to write a function that calculates the minimum cost to reach the target cell (N-1, N-1) from the starting cell (0, 0). Input: The first line of the input contains an integer N (1 ≤ N ≤ 100), the size of the grid. The next N lines each contain N non-negative integers representing the cost grid. Output: Output the minimum cost to reach the cell (N-1, N-1) from (0, 0). Example: Input: 3 1 3 1 1 5 1 4 2 1 Output: 7 Explanation: The path with the minimum cost is as follows: 1 → 3 → 1 → 1 → 1 → 1 This path has a total cost of 7.","solution":"def min_cost_path(cost_grid): N = len(cost_grid) # Create a 2D dp array to store the minimum cost to reach each cell dp = [[0 for _ in range(N)] for _ in range(N)] # Initialize the first cell with the same cost as the starting point dp[0][0] = cost_grid[0][0] # Initialize the first row (can only come from the left) for i in range(1, N): dp[0][i] = dp[0][i-1] + cost_grid[0][i] # Initialize the first column (can only come from above) for j in range(1, N): dp[j][0] = dp[j-1][0] + cost_grid[j][0] # Fill the rest of the dp array for i in range(1, N): for j in range(1, N): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + cost_grid[i][j] # The bottom-right cell contains the minimum cost to reach the target return dp[N-1][N-1]"},{"question":"Given two strings s1 and s2, write a function to determine if s2 is a scrambled version of s1. A scrambled string of s1 is formed by splitting the string into two non-empty substrings at a random position, and then recursively both substrings are scrambled again. Example: Input: s1 = \\"great\\", s2 = \\"rgeat\\" Output: true Explanation: One possible scenario to obtain s2 from s1 is: \\"great\\" -> \\"gr/eat\\" (split at index 2) -> \\"rg/eat\\" (swap the substrings) -> \\"r/geat\\" (split the second part again at index 1) -> \\"rge/at\\" (swap again) -> \\"rgeat\\" Input: s1 = \\"abcde\\", s2 = \\"caebd\\" Output: false Explanation: There is no way to transform s1 to s2 by any sequence of the described operations.","solution":"def is_scramble(s1, s2): Determines if s2 is a scrambled version of s1. if len(s1) != len(s2): return False if s1 == s2: return True if sorted(s1) != sorted(s2): return False n = len(s1) for i in range(1, n): if (is_scramble(s1[:i], s2[:i]) and is_scramble(s1[i:], s2[i:])) or (is_scramble(s1[:i], s2[n-i:]) and is_scramble(s1[i:], s2[:n-i])): return True return False"},{"question":"You are given an array of integers representing the stock prices of a company over multiple days. Your task is to write a function that finds the best days to buy and sell the stock to maximize the profit. If there is no profit to be made, the function should return `(0, 0)` indicating no transaction should be made. The function should return a tuple `(buy_day, sell_day)` where `buy_day` is the day to buy the stock and `sell_day` is the day to sell it to achieve maximum profit. The days are 0-indexed, meaning the first day is day 0. If there are multiple solutions, return the one with the smallest `buy_day`. # Function Signature ```python def maximize_profit(prices: List[int]) -> Tuple[int, int]: pass ``` # Input - `prices` (1 ≤ len(prices) ≤ 10^5): a list of integers representing the stock prices over multiple days. # Output - A tuple `(buy_day, sell_day)` representing the days to buy and sell for maximum profit. If no profit can be made, return `(0, 0)`. # Example ```python assert maximize_profit([7, 1, 5, 3, 6, 4]) == (1, 4) assert maximize_profit([7, 6, 4, 3, 1]) == (0, 0) assert maximize_profit([2, 4, 1]) == (0, 1) ``` # Explanation 1. In the first example, buying on day 1 (price = 1) and selling on day 4 (price = 6) yields the maximum profit of 5. 2. In the second example, the prices are always decreasing, so no profit can be made. 3. In the third example, buying on day 0 (price = 2) and selling on day 1 (price = 4) yields the maximum profit of 2.","solution":"from typing import List, Tuple def maximize_profit(prices: List[int]) -> Tuple[int, int]: if not prices: return (0, 0) min_price_day = 0 max_profit = 0 buy_day = 0 sell_day = 0 for current_day in range(1, len(prices)): if prices[current_day] < prices[min_price_day]: min_price_day = current_day current_profit = prices[current_day] - prices[min_price_day] if current_profit > max_profit: max_profit = current_profit buy_day = min_price_day sell_day = current_day if max_profit == 0: return (0, 0) else: return (buy_day, sell_day)"},{"question":"Write a function that takes a list of integers and finds the highest product that can be made by multiplying any three integers. Example: ```python highestProduct([1, 10, 2, 6, 5, 3]) // should return 300 (10 * 6 * 5) highestProduct([-10, -10, 1, 3, 2]) // should return 300 (-10 * -10 * 3) ```","solution":"def highestProduct(arr): Returns the highest product that can be made by multiplying any three integers from the list. if len(arr) < 3: raise ValueError(\\"List must contain at least three integers\\") arr.sort() return max(arr[0] * arr[1] * arr[-1], arr[-1] * arr[-2] * arr[-3])"},{"question":"Create a function to simulate a simple store inventory system. The system should be able to perform the following tasks: 1. Add a new item to the inventory. 2. Update the quantity of an existing item. 3. Delete an item from the inventory. 4. Retrieve the current inventory list. Define a class `StoreInventory` which implements the following methods: - `add_item(name: str, quantity: int)` - Adds a new item with the given name and quantity to the inventory. If the item already exists, it should update the quantity by adding the new quantity to the existing one. - `update_item(name: str, quantity: int)` - Updates the quantity of the given item. If the item does not exist, it should return an error message \\"Item not found\\". - `delete_item(name: str)` - Deletes the item with the given name from the inventory. If the item does not exist, it should return an error message \\"Item not found\\". - `get_inventory()` - Returns a list of tuples representing the items in the inventory. Each tuple should contain the item name and its quantity. Input Format: - `add_item`, `update_item`, `delete_item` and `get_inventory` methods will be called multiple times with their respective arguments. Output Format: - `add_item`, `update_item` and `delete_item` return `None`. In case of an error (item not found), `update_item` and `delete_item` return the string \\"Item not found\\". - `get_inventory` returns the current inventory list. Constraints: - The item name will be a string of up to 50 characters. - The quantity will be a positive integer. Example: ```python inventory = StoreInventory() # Adding items inventory.add_item(\\"Apples\\", 10) inventory.add_item(\\"Bananas\\", 5) inventory.add_item(\\"Oranges\\", 7) # Updating items inventory.update_item(\\"Apples\\", 5) # Apples now have 15 in quantity inventory.update_item(\\"Grapes\\", 3) # Returns \\"Item not found\\" # Deleting items inventory.delete_item(\\"Bananas\\") # Bananas are removed inventory.delete_item(\\"Mangoes\\") # Returns \\"Item not found\\" # Getting inventory print(inventory.get_inventory()) # Returns [(\\"Apples\\", 15), (\\"Oranges\\", 7)] ``` The sample outputs provided above are for demonstration; the actual output should match the exact inventory actions performed as per input.","solution":"class StoreInventory: def __init__(self): self.inventory = {} def add_item(self, name: str, quantity: int): if name in self.inventory: self.inventory[name] += quantity else: self.inventory[name] = quantity def update_item(self, name: str, quantity: int): if name in self.inventory: self.inventory[name] = quantity else: return \\"Item not found\\" def delete_item(self, name: str): if name in self.inventory: del self.inventory[name] else: return \\"Item not found\\" def get_inventory(self): return list(self.inventory.items())"},{"question":"-----Problem Statement----- Environmentalist Emma is working on a project to calculate the carbon footprint reduction when replacing old appliances with new energy-efficient ones in homes. Each appliance has a carbon footprint factor associated with it, given in an array. She wants to figure out how many distinct ways she can choose a subset of these appliances such that the total carbon footprint reduction of the chosen subset exactly matches a given target value ( T ). Appliances are denominated by their carbon footprint factors. Each subset is represented as an unordered group of appliances, and two subsets are different if and only if there exists at least one appliance that is included in one subset but not the other (duplicate subsets are not allowed). Write a function to help Emma find the number of distinct subsets where the sum of the carbon footprint factors equals the target value ( T ). Provide the answer modulo ( 1,000,000,007 ). -----Input----- The first line of input contains an integer ( N ) denoting the number of different appliances. The second line contains ( N ) integers representing the carbon footprint factors of the appliances. The third line contains an integer ( T ) denoting the target carbon footprint reduction value. -----Output----- Output a single integer which is the number of distinct subsets such that their carbon footprint sum equals ( T ) modulo ( 1,000,000,007 ). -----Constraints----- - ( 1 leq N leq 100 ) - ( 1 leq ) carbon footprint factor ( leq 100 ) - ( 1 leq T leq 1000 ) -----Example----- Input: 3 2 3 5 5 Output: 2 -----Explanation----- In the example, the appliances have the carbon footprint factors [2, 3, 5]. The subsets that add up to the target carbon footprint reduction 5 are: - {2, 3} - {5} So there are 2 subsets that satisfy the conditions.","solution":"def count_subsets_with_target_sum(N, factors, T): MOD = 1000000007 dp = [0] * (T + 1) dp[0] = 1 # There\'s one way to get sum 0, by choosing no appliances for factor in factors: for j in range(T, factor - 1, -1): dp[j] = (dp[j] + dp[j - factor]) % MOD return dp[T] # Example usage # N = 3 # factors = [2, 3, 5] # T = 5 # print(count_subsets_with_target_sum(N, factors, T)) # Output: 2"},{"question":"A company has a warehouse with boxes arranged in a linear row, numbered from 1 to N. Each box contains a certain number of items, which can be represented by an array where the i-th element corresponds to the number of items in the i-th box. You need to process a series of operations to update the number of items in the boxes and to query the total number of items in a given range of boxes. There are two types of operations: 1. Update Operation: `U l r k` – This operation adds `k` items to each box from position `l` to position `r` (inclusive). 2. Query Operation: `Q l r` – This operation determines the total number of items in the boxes from position `l` to position `r` (inclusive). Input: - The first line contains two integers, `N` and `Q`, where `N` is the number of boxes and `Q` is the number of operations. - The second line contains `N` integers representing the initial number of items in each box. - The next `Q` lines describe the operations. Each line starts with an operation type, followed by the parameters for that operation. Output: - For each query operation, output the total number of items in the specified range of boxes. Constraints: - 1 ≤ N ≤ 10^5 - 1 ≤ Q ≤ 10^5 - 1 ≤ number of items ≤ 10^4 - 1 ≤ l ≤ r ≤ N - 1 ≤ k ≤ 10^3 Example: Input: 5 3 1 2 3 4 5 Q 1 3 U 2 4 2 Q 1 3 Output: 6 10","solution":"def warehouse_operations(N, initial_items, operations): Process a series of operations on the warehouse boxes. Parameters: - N: Number of boxes - initial_items: List of integers representing the number of items in each box - operations: List of operations to be performed (either update or query) Returns: - List of results from all the query operations results = [] # Process each operation for op in operations: if op[0] == \'Q\': _, l, r = op result = sum(initial_items[l-1:r]) results.append(result) elif op[0] == \'U\': _, l, r, k = op for i in range(l-1, r): initial_items[i] += k return results"},{"question":"Given an array of integers and an integer k, your task is to find the count of pairs of elements in the array whose sum is divisible by k. # Function Signature The function should be implemented with the following signature: ```python def countPairs(arr: List[int], k: int) -> int: pass ``` # Input - `arr`: A list of integers. (0 ≤ len(arr) ≤ 10^5) - `k`: An integer. (1 ≤ k ≤ 10^5) # Output Return an integer representing the number of pairs whose sum is divisible by k. # Example Example 1: Input: ```python arr = [1, 2, 3, 4, 5, 6] k = 3 ``` Output: ```python 5 ``` Explanation: The pairs (1, 2), (2, 4), (1, 5), (3, 6), and (4, 5) each have sums that are divisible by 3. Example 2: Input: ```python arr = [30, 20, 150, 100, 40] k = 60 ``` Output: ```python 3 ``` Explanation: The pairs (30, 150), (20, 100), and (20, 40) each have sums that are divisible by 60. # Constraints - 0 ≤ len(arr) ≤ 10^5 - 1 ≤ k ≤ 10^5 - Elements of arr are non-negative integers.","solution":"from typing import List def countPairs(arr: List[int], k: int) -> int: This function returns the count of pairs of elements in the array whose sum is divisible by k. count = 0 remainder_count = [0] * k # Count occurrences of all remainders when divided by k for num in arr: remainder_count[num % k] += 1 # Count pairs with sum divisible by k # Case when both elements in the pair have remainder 0 count += remainder_count[0] * (remainder_count[0] - 1) // 2 # Case when elements in the pair have complementary remainders for i in range(1, (k // 2) + 1): if i != k - i: count += remainder_count[i] * remainder_count[k - i] # Case when both elements in the pair have remainders equal to half of k if k % 2 == 0: count += remainder_count[k // 2] * (remainder_count[k // 2] - 1) // 2 return count"},{"question":"Dynamic programming is a method for solving complex problems by breaking them down into simpler subproblems. It is applicable to problems exhibiting the properties of overlapping subproblems and optimal substructure. One of the classic problems solved using dynamic programming is the \\"Longest Increasing Subsequence\\" (LIS) problem. The Longest Increasing Subsequence problem is defined as follows: Given an integer array `arr` of length `n`, find the length of the longest subsequence of `arr` such that all elements of the subsequence are sorted in increasing order. A subsequence is derived from the array by deleting some or no elements without changing the order of the remaining elements. For example, consider the array `[10, 9, 2, 5, 3, 7, 101, 18]`. The length of the longest increasing subsequence is 4 (with a subsequence being `[2, 3, 7, 101]`). # Task You are required to implement a function that takes an integer array as input and returns the length of the longest increasing subsequence. # Function Signature ```python def length_of_lis(arr: List[int]) -> int: ``` # Input - `arr`: A list of integers representing the input array. # Output - An integer representing the length of the longest increasing subsequence. # Constraints - `1 <= len(arr) <= 10^4` - `-10^4 <= arr[i] <= 10^4` # Example Input ```text 8 10 9 2 5 3 7 101 18 ``` Output ```text 4 ``` Explanation The longest increasing subsequence is `[2, 3, 7, 101]`, and its length is 4. Note that there can be more than one increasing subsequence of the same length. # Notes - The solution should efficiently handle the worst-case scenario where the length of the array is at its maximum constraint. - Consider edge cases, such as when the array contains only one element.","solution":"def length_of_lis(arr): if not arr: return 0 n = len(arr) dp = [1] * n # Each element is an increasing subsequence of length 1 for i in range(1, n): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Problem Statement: Frankie is an enthusiastic gardener who loves planting flowers. One day, he decided to plant N different types of flowers in K distinct flower beds in his garden. However, Frankie wants each type of flower to be unique in any single flower bed. This means no flower bed should have more than one flower of any type. Frankie is very meticulous in his planning and demands to know in how many distinct ways he can plant the flowers following this rule. Input: The first line of the input contains an integer t, the number of test cases. Each test case consists of two integers N and K, where N is the number of different types of flowers and K is the number of flower beds. Output: For each test case, output a single line containing the number of distinct ways Frankie can plant the flowers in the flower beds. Constraints: 1 ≤ N ≤ 10 1 ≤ K ≤ 10 Note: - Flowers of the same type are considered indistinguishable from one another. - Since the flowers have to be unique in each bed, the configurations where a single type of flower appears more than once in any flower bed should not be included. SAMPLE INPUT 2 3 2 4 3 SAMPLE OUTPUT 6 24 Explanation: For the first test case, N=3 and K=2, the possible distinct ways to plant the flowers are: 1- Planting flower types [1, 2] in flower bed 1 and [3] in flower bed 2 2- Planting flower types [1, 3] in flower bed 1 and [2] in flower bed 2 3- Planting flower types [2, 1] in flower bed 1 and [3] in flower bed 2 4- Planting flower types [2, 3] in flower bed 1 and [1] in flower bed 2 5- Planting flower types [3, 1] in flower bed 1 and [2] in flower bed 2 6- Planting flower types [3, 2] in flower bed 1 and [1] in flower bed 2","solution":"import math def distinct_ways(N, K): return math.factorial(N) // math.factorial(N - K) def solve(test_cases): results = [] for N, K in test_cases: results.append(distinct_ways(N, K)) return results"},{"question":"You are given an integer array A of size N. You need to find out the minimum number of steps required to make the array a non-decreasing sequence. In one step, you can increase any element of the array by 1. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. - Each test case consists of multiple lines of input. - The first line of each test case contains an integer N — the size of the array. - The next line contains N space-separated integers, denoting the array A. ------ Output Format ------ For each test case, output on a new line, the minimum number of steps required to make the array non-decreasing. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 2cdot 10^{5} 1 ≤ A_{i} ≤ 10^9 - The sum of N over all test cases won\'t exceed 2cdot 10^{5}. ----- Sample Input 1 ------ 3 3 1 2 1 4 2 2 3 2 5 5 4 3 2 1 ----- Sample Output 1 ------ 1 1 10 ----- Explanation 1 ------ Test case 1: The minimum number of steps required to make the array non-decreasing is 1. A possible sequence of operations is: - Increase the last element by 1, making the array [1, 2, 2]. Test case 2: The minimum number of steps required to make the array non-decreasing is 1. A possible sequence of operations is: - Increase the last element by 1, making the array [2, 2, 3, 3]. Test case 3: The minimum number of steps required to make the array non-decreasing is 10. A possible sequence of operations is: - Increase the second element by 1, the third element by 2, the fourth element by 3, and the last element by 4, making the array [5, 5, 5, 5, 5].","solution":"def min_steps_to_non_decreasing(arr): Calculate the minimum number of steps to make the array non-decreasing. In one step, you can increase any element of the array by 1. steps = 0 n = len(arr) for i in range(1, n): if arr[i] < arr[i - 1]: steps += arr[i - 1] - arr[i] arr[i] = arr[i - 1] return steps def process_test_cases(test_cases): Process multiple test cases to find the number of steps for each. results = [] for test_case in test_cases: n = test_case[0] arr = test_case[1] result = min_steps_to_non_decreasing(arr) results.append(result) return results"},{"question":"You are given a matrix of integers and a list of queries. Each query aims to retrieve the sum of the elements within a sub-matrix of the given matrix. The sub-matrix is defined by its top-left and bottom-right corners. INPUT - The first line contains two integers, n and m, representing the number of rows and columns in the matrix, respectively. - The next n lines contain m space-separated integers each, representing the elements of the matrix. - The next line contains a single integer q, representing the number of queries. - The following q lines each contain four integers x1, y1, x2, y2, representing the top-left (x1, y1) and bottom-right (x2, y2) corners of the sub-matrix for that query. OUTPUT - For each query, output the sum of the elements in the specified sub-matrix. CONSTRAINTS 1 ≤ n, m ≤ 1000 1 ≤ matrix[i][j] ≤ 10^6 1 ≤ q ≤ 100000 1 ≤ x1 ≤ x2 ≤ n 1 ≤ y1 ≤ y2 ≤ m SAMPLE INPUT 3 3 1 2 3 4 5 6 7 8 9 2 1 1 2 2 2 2 3 3 SAMPLE OUTPUT 12 28","solution":"def matrix_sub_sum(matrix, queries): Returns the sums of sub-matrices defined by queries in the given matrix. Parameters: matrix: List of List of integers queries: List of List of integers specifying the top-left (x1, y1) and bottom-right (x2, y2) corners Returns: List of integers where each element is the sum of the sub-matrix for the corresponding query # Get the dimensions of the matrix n = len(matrix) m = len(matrix[0]) # Initialize the prefix sum matrix prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] # Calculate the prefix sums for i in range(1, n + 1): for j in range(1, m + 1): prefix_sum[i][j] = (matrix[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1]) # Function to get the sum of sub-matrix def get_sub_sum(x1, y1, x2, y2): return (prefix_sum[x2][y2] - prefix_sum[x1-1][y2] - prefix_sum[x2][y1-1] + prefix_sum[x1-1][y1-1]) # Answer the queries results = [] for x1, y1, x2, y2 in queries: results.append(get_sub_sum(x1, y1, x2, y2)) return results"},{"question":"You are given a strictly increasing sequence of positive integers. Your task is to find the longest contiguous subsequence where the numbers have a common difference of at most `1`. A contiguous subsequence is a portion of the array where elements appear together without any gaps. The difference between any two consecutive elements of this subsequence should be either `0` or `1`. ------ Input ------ The first line contains an integer `T` representing the number of test cases. For each test case: - The first line contains an integer `N` representing the number of elements in the sequence. - The second line contains `N` space-separated positive integers representing the sequence. ------ Output ------ For each test case, output in a single line the length of the longest contiguous subsequence where the difference between any two consecutive elements is at most `1`. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ text{Element in sequence} ≤ 10^9 ------ Subtasks ------ Subtask #1 (30 points): 1 ≤ T ≤ 10 1 ≤ N ≤ 100 Subtask #2 (70 points): original constraints ----- Sample Input ------ 3 6 1 2 2 3 4 5 5 1 3 5 7 9 4 2 2 3 4 ----- Sample Output ------ 6 1 4 ----- Explanation ------ Test Case 1: The entire sequence [1, 2, 2, 3, 4, 5] forms a contiguous subsequence where the difference between consecutive elements is at most 1. Test Case 2: There is no contiguous subsequence with more than one element meeting the criteria since the given sequence has differences greater than 1 between all consecutive elements. Test Case 3: The sequence [2, 2, 3, 4] forms a contiguous subsequence where the difference between consecutive elements is at most 1.","solution":"def longest_contiguous_subsequence(arr): max_length = 1 current_length = 1 for i in range(1, len(arr)): if arr[i] - arr[i - 1] <= 1: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length def solve_test_cases(test_cases): results = [] for case in test_cases: N, sequence = case results.append(longest_contiguous_subsequence(sequence)) return results"},{"question":"You have a list of n integers. You want to divide this list into k continuous subarrays such that the sum of the minimum values of each subarray is maximized. Input The first line contains two integers n (1 ≤ n ≤ 1000) and k (1 ≤ k ≤ n). The second line contains n integers separated by spaces, representing the list of integers. Each integer in the list will be between 1 and 10^9. Output Output a single integer — the maximum possible sum of the minimum values of the k subarrays. Example Input 6 2 5 6 2 4 7 1 Output 11 Note In the example, you can divide the list [5, 6, 2, 4, 7, 1] into two subarrays [5, 6, 2] and [4, 7, 1]. The minimum values of these subarrays are 2 and 1 respectively, and their sum is 2 + 9 = 11, which is maximal. Explanation - Dividing [5, 6, 2, 4, 7, 1] into [5, 6, 2] and [4, 7, 1] yields the minimums 2 and 1, sum is 11. - Dividing [5, 6, 2, 4, 7, 1] into [5, 6] and [2, 4, 7, 1] yields the minimums 5 and 1, sum is 6 which is less optimal. - Other divisions will also yield sums that are less than or equal to 11.","solution":"def max_sum_of_min_values(n, k, arr): Returns the maximum possible sum of the minimum values of the k subarrays. # Sort the array in descending order arr.sort(reverse=True) # Take the first k elements from the sorted array return sum(arr[:k])"},{"question":"Alex has just started learning programming and is very enthusiastic about solving various problems. He loves spending time in nature, especially in the forest. One day, during his visit to the ancient forest near his hometown, he noticed a peculiar pattern in the arrangement of trees. There were n trees in a straight line, numbered from 1 to n. Each tree had exactly one neighboring tree to its right, except the last tree which had no neighbor. Alex observed that every tree i (1 ≤ i < n) had a certain height hi and he wondered what would be the smallest number of trees that need to be cut down such that no two adjacent trees have the same height. Help Alex by providing a function that calculates the minimum number of trees that need to be cut down to achieve his objective. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5), denoting the number of trees. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 10^6), where hi is the height of the i-th tree. -----Output----- Print the minimum number of trees that need to be cut down such that no two adjacent trees have the same height. -----Examples----- Input 6 4 4 4 5 6 6 Output 3 Input 5 3 1 4 1 5 Output 0 -----Note----- In the first sample, one optimal way is to cut down the first, second, and last trees, resulting in the sequence [4, 5, 6]. No two adjacent trees have the same height. In the second sample, the given sequence already satisfies Alex\'s requirement, so no trees need to be cut down.","solution":"def min_trees_to_cut(n, heights): Returns the minimum number of trees that need to be cut down such that no two adjacent trees have the same height. if n <= 1: return 0 cuts = 0 for i in range(1, n): if heights[i] == heights[i - 1]: cuts += 1 return cuts"},{"question":"In a theme park, there are N consecutive attractions, each having a certain happiness value associated with it. A visitor gains happiness by visiting attractions consecutively according to their planned visit. Given an array of length N, where each element represents the happiness value of each attraction, find the maximum possible happiness gain over any contiguous subarray of length L, where L is the number of consecutive attractions the visitor plans to visit. Constraints: * 1 leq N leq 100000 * 1 leq L leq N * -1000 leq happiness values leq 1000 Input Input is given from Standard Input in the following format: N L happiness_1 happiness_2 ... happiness_N Output Print the maximum possible happiness gain over any contiguous subarray of length L. Examples Input: 5 3 1 2 3 4 5 Output: 12 Input: 6 2 -1 2 3 -1 4 5 Output: 9","solution":"def max_happiness(n, l, happiness): max_sum = current_sum = sum(happiness[:l]) for i in range(l, n): current_sum += happiness[i] - happiness[i - l] max_sum = max(max_sum, current_sum) return max_sum def parse_input(input_str): lines = input_str.strip().split(\'n\') n, l = map(int, lines[0].split()) happiness = list(map(int, lines[1].split())) return n, l, happiness def main(input_str): n, l, happiness = parse_input(input_str) result = max_happiness(n, l, happiness) print(result)"},{"question":"In the magical kingdom of Farland, there is a valley with N magical stones placed in a line. Each magical stone has a unique power level. The power level of the ith stone is denoted by an integer a_i. A wizard wants to create magical pairs from these stones for a special spell. A magical pair consists of two stones (i, j) such that the power level of the ith stone is less than the power level of the jth stone, and the ith stone comes before the jth stone (i < j). Your task is to help the wizard find the number of such magical pairs. ------ Input Format ------ - The first line of the input contains a single integer T, the number of test cases. - The first line of each test case contains a single integer N, the number of magical stones. - The second line of each test case contains N integers, where the ith integer represents a_i, the power level of the ith stone. ------ Output Format ------ For each test case, output a single integer that represents the number of magical pairs in the stone arrangement. ------ Constraints ------ 1 ≤ T ≤ 10^{4} 1 ≤ N ≤ 2 cdot 10^{5} 1 ≤ a_i ≤ 10^{9} - The sum of N over all test cases won\'t exceed 2 cdot 10^{5} ------ Sample Input 1 ------ 2 5 1 2 3 4 5 4 4 3 2 1 ------ Sample Output 1 ------ 10 0 ------ Explanation ------ For the first test case: - All pairs (i, j) where i < j satisfy the condition a_i < a_j. There are a total of (5 choose 2) = 10 pairs. The pairs are (1,2), (1,3), (1,4), (1,5), (2,3), (2,4), (2,5), (3,4), (3,5), (4,5). For the second test case: - No pair (i, j) satisfies the condition a_i < a_j since the array is in descending order. Hence, the output is 0.","solution":"def count_magical_pairs(T, test_cases): Function to count the number of magical pairs for each test case. Parameters: T : int : number of test cases test_cases : list[list[int]] : list of test cases, each test case is a list where the first element is N (number of stones), followed by N integers indicating the power levels of stones Returns: list[int] : a list containing the number of magical pairs for each test case. results = [] for i in range(T): stones = test_cases[i][1:] # extract stone power levels for the current test case N = len(stones) count = 0 for j in range(N): for k in range(j + 1, N): if stones[j] < stones[k]: count += 1 results.append(count) return results"},{"question":"Problem G: Pascal\'s Triangle Pascal\'s Triangle is a triangular array of the binomial coefficients. The rows of Pascal\'s Triangle are conventionally enumerated starting with row n = 0 at the top (the 0th row). The entries in each row are numbered from the left beginning with k = 0 and are written out as coefficients. In a similar manner, suppose an array P is generated with the help of binomial coefficients of the given row number n. For example, the contribution of the 4th row of Pascal\'s Triangle to array P will be `P4 = [1, 4, 6, 4, 1]`. Write a function to compute the sum of the elements of the array P that represents some row n of Pascal\'s Triangle. Input The input consists of a single line containing one integer n (0 ≤ n ≤ 50) - the row number of Pascal\'s Triangle. Output Output a single integer that represents the sum of the elements of the array P for the given row number n. Sample Input 5 Sample Output 32 Explanation The 5th row of Pascal\'s Triangle is [1, 5, 10, 10, 5, 1]. The sum of these elements is 1 + 5 + 10 + 10 + 5 + 1 = 32.","solution":"def sum_of_pascals_triangle_row(n): Returns the sum of the elements of the n-th row of Pascal\'s Triangle. return 2**n"},{"question":"Given two integers A and B, write a function to swap their values without using any temporary variables. You should use bitwise XOR operator for this task. Example 1: Input: A = 5, B = 7 Output: A = 7, B = 5 Explanation: Using the XOR swap algorithm, the values of A and B are swapped. Example 2: Input: A = 20, B = 45 Output: A = 45, B = 20 Explanation: Using the XOR swap algorithm, the values of A and B are swapped. Your task: You don\'t have to read input or print anything. Your task is to complete the function swapNumbers that takes A and B as parameters and returns the swapped values of A and B. Expected Time Complexity: O(1). Expected Auxiliary Space: O(1). Constraints: 1 ≤ A, B ≤ 10^9","solution":"def swapNumbers(A, B): Swaps the values of A and B using the XOR swap algorithm. Returns the swapped values of A and B. A = A ^ B B = A ^ B A = A ^ B return A, B # Example Usage: # A, B = swapNumbers(5, 7) # print(A, B) # Output: 7 5"},{"question":"Given an array of integers, return the length of the longest subarray with a positive product. Example 1: Input: nums = [1, -2, -3, 4] Output: 4 Explanation: The array itself has a positive product of 24. Example 2: Input: nums = [-1,2] Output: 1 Explanation: The subarray [2] has a positive product of 2. Example 3: Input: nums = [-1,-2,-3,0,1] Output: 2 Explanation: The subarray [-1,-2] has a positive product of 2. Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxLenSubarray() which takes the array nums[] and its size n as input parameters and returns the length of the longest subarray with a positive product. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ n ≤ 10^5 -10^9 ≤ nums[i] ≤ 10^9","solution":"def maxLenSubarray(nums): n = len(nums) # Initialize variables. max_len = 0 positive_len = 0 negative_len = 0 for num in nums: if num == 0: positive_len = 0 negative_len = 0 elif num > 0: positive_len += 1 if negative_len != 0: negative_len += 1 else: negative_len = 0 max_len = max(max_len, positive_len) else: positive_len, negative_len = negative_len, positive_len negative_len += 1 if positive_len != 0: positive_len += 1 max_len = max(max_len, positive_len) return max_len"},{"question":"Write a function to determine if an input string is a valid hexadecimal number. A valid hexadecimal number meets the following criteria: * It begins with an optional prefix of \'0x\' or \'0X\'. * It contains at least one digit. * It exclusively contains digits (0-9) and/or letters (a-f, A-F) after the optional prefix. * It may or may not have leading or trailing spaces, which should be ignored. Your function should return `true` if the input string is a valid hexadecimal number and `false` otherwise. Examples: ``` \\"0x1A3\\" -> true \\"0X1a3f\\" -> true \\"1A3F\\" -> true \\"0xGHI\\" -> false (contains invalid characters) \\"123 \\" -> true (trailing space is ignored) \\" 0x1A3 \\" -> true (leading and trailing spaces are ignored) \\"0x\\" -> false (contains no digits after the prefix) \\"Hello\\" -> false (contains invalid characters) \\"\\" -> false (empty string) \\" \\" -> false (only space) ```","solution":"import re def is_valid_hex(s: str) -> bool: Determines if a given string is a valid hexadecimal number. # Remove leading and trailing whitespaces s = s.strip() # Regular expression to match a valid hexadecimal number hex_pattern = re.compile(r\'^(0[xX])?[0-9a-fA-F]+\') # Check if the string matches the pattern return bool(hex_pattern.match(s))"},{"question":"Little Jack and Evan are back with another interesting scenario involving their favorite electronic wizard devices! This time, they\'re intrigued by the sequence of operations on a simple text editor. The editor supports three operations: - INSERT X: Insert the word X at the end of the document. - DELETE: Remove the last word added to the document. - UNDO: Undo the previous operation, whether it was an insertion or a deletion. Undoing an undo is not supported. Given a sequence of K operations, help Jack and Evan track the state of the document after each operation and count the total number of words in the document. -----Input----- First line contains an integer K, the number of operations (1 ≤ K ≤ 1000). Each of the following K lines contains one of the following operations. - INSERT X, where X is a word consisting of lowercase letters (1 ≤ |X| ≤ 10) - DELETE - UNDO -----Output----- Output K lines, where the ith line should contain the number of words in the document just after the ith operation. -----Example----- Input: 7 INSERT hello INSERT world DELETE UNDO INSERT evan DELETE UNDO Output: 1 2 1 2 3 2 3 Explanation: Initially, the document is empty. Let\'s see the document state and word count after each operation: INSERT hello: Document = \\"hello\\"; Word count = 1 INSERT world: Document = \\"hello world\\"; Word count = 2 DELETE: Document = \\"hello\\"; Word count = 1 UNDO: Document = \\"hello world\\"; Word count = 2 INSERT evan: Document = \\"hello world evan\\"; Word count = 3 DELETE: Document = \\"hello world\\"; Word count = 2 UNDO: Document = \\"hello world evan\\"; Word count = 3","solution":"def track_document(operations): document = [] history = [] results = [] for operation in operations: if operation.startswith(\\"INSERT\\"): _, word = operation.split() document.append(word) history.append([\\"INSERT\\", word]) elif operation == \\"DELETE\\": if document: last_word = document.pop() history.append([\\"DELETE\\", last_word]) else: history.append([\\"DELETE\\", None]) elif operation == \\"UNDO\\": if history: last_action = history.pop() if last_action[0] == \\"INSERT\\": document.pop() elif last_action[0] == \\"DELETE\\": if last_action[1] is not None: document.append(last_action[1]) results.append(len(document)) return results"},{"question":"# Detect Unique Numbers! In a kingdom far, far away, the King has decreed that every house must have a unique address number. The townspeople have gathered all their house numbers, but they need to verify if all the numbers are unique or if some addresses are duplicated. Can you help them by writing a function that checks whether all the house numbers are unique? #Argument `houseNumbers` is an array of integers, with each element representing the address number of a house. #Return Your function should return `true` if all the house numbers are unique, or `false` if there are duplicate numbers. #Examples `areHouseNumbersUnique([101, 202, 303, 404, 505])` returns `true` because all address numbers are unique. `areHouseNumbersUnique([101, 202, 303, 303, 404])` returns `false` because the address number 303 is duplicated.","solution":"def areHouseNumbersUnique(houseNumbers): Checks whether all the house numbers are unique. Parameters: houseNumbers (list of int): Array of house numbers. Returns: bool: True if all house numbers are unique, False otherwise. return len(houseNumbers) == len(set(houseNumbers))"},{"question":"A rectangular game field is divided into n × m equal cells. Each cell initially contains a unique toy. After one second, each toy can perform one of four possible moves: move to the cell on its left, right, up, or down. However, a toy cannot move outside the field. Each cell accommodates only one toy after they move. To make the game interesting, it\'s required that some toys move to the cells of the main diagonal of the field (i.e., cells where the row index equals the column index). Determine the minimal number of toy moves required to place at least one toy on each cell of the main diagonal. Input The first line contains two space-separated integers, n and m (1 ≤ n, m ≤ 40), representing the number of rows and columns of the game field, respectively. Output Output the minimal number of toy moves required. Examples Input 3 3 Output 0 Input 2 3 Output 2 Note In the first sample, the toys are already aligned on the main diagonal naturally: ``` X . . . X . . . X ``` No moves are needed, so the output is 0. In the second sample, two possible moves are: ``` X . . . X . . X . -> X . X ``` Thus, the minimal number of moves required is 2.","solution":"def minimal_toy_moves(n, m): Calculate the minimal number of toy moves required to place at least one toy on each cell of the main diagonal for an n x m grid. # The minimal number of moves required is |n - m|, # because if the grid is square (n == m), toys are already on the diagonal. # When n != m, we\'ll need additional moves to fill the missing diagonal cells. return abs(n - m)"},{"question":"You are a detective working on a case. You have collected a list of words from different crime scenes. Each word consists of lowercase English letters. You suspect that the criminal is using these words to encode a secret message. To decipher this message, you need to find the \\"key word,\\" which is the longest word in the list that can be created by reordering the letters of one of the other words in the list. If there are multiple such words, choose the one that appears first in the list. If no such word exists, output \\"No key word\\". -----Input----- The first line contains an integer T - the number of test cases. Each of the next T blocks contains: - The first line of each block contains an integer W - the number of words in the list. - Each of the next W lines contains a single word. -----Output----- For each test case, output the \\"key word\\" or \\"No key word\\" in a separate line. -----Constraints----- T (1≤T≤100) W (1≤W≤200) Each word consists of lowercase English letters, and the length of each word is between 1 and 100 inclusive. -----Example----- Input: 2 5 listen enlist google inlets silent 4 abc def ghi jkl Output: listen No key word","solution":"from collections import Counter def find_key_word(t, test_cases): results = [] for case in test_cases: W, words = case word_counter = { word: Counter(word) for word in words } key_word = \\"No key word\\" for word in words: for other_word in words: if word != other_word and word_counter[word] == word_counter[other_word]: if key_word == \\"No key word\\" or len(word) > len(key_word): key_word = word break results.append(key_word) return results def parse_input(input_str): lines = input_str.strip().split(\\"n\\") t = int(lines[0]) index = 1 test_cases = [] for _ in range(t): W = int(lines[index]) words = lines[index+1:index+1+W] test_cases.append((W, words)) index += W + 1 return t, test_cases def format_output(results): return \\"n\\".join(results)"},{"question":"Implement a function that receives a string as an input and returns the longest substring that is made up of consecutive unique characters. For example: ``` solution(\\"abcabcbb\\") -> \\"abc\\" solution(\\"bbbbb\\") -> \\"b\\" solution(\\"pwwkew\\") -> \\"wke\\" solution(\\"abcdef\\") -> \\"abcdef\\" ``` If there are multiple substrings with the same length, return the one that appears first. If the input string is empty, return an empty string.","solution":"def longest_unique_substring(s): Returns the longest substring with consecutive unique characters. if not s: return \\"\\" start = 0 max_length = 0 max_start = 0 char_index_map = {} for end in range(len(s)): if s[end] in char_index_map: start = max(start, char_index_map[s[end]] + 1) char_index_map[s[end]] = end if end - start + 1 > max_length: max_length = end - start + 1 max_start = start return s[max_start:max_start + max_length]"},{"question":"A company is organizing an event and they have a list of guests who have RSVP\'d. Each guest provided their availability in the form of a time range. The organizers want to determine the maximum number of guests that will be present at any given time during the event. For example, if guest i is available during the time range [a_i, b_i], they will be present at every time t such that a_i leq t leq b_i. Given the availability ranges of all guests, you need to find the maximum number of guests that will be present at the same time. -----Input----- The first line contains an integer T (1 leq T leq 100) — the number of test cases. For each test case, the first line contains an integer n (1 leq n leq 10^5) — the number of guests. Each of the next n lines contains two integers a_i, b_i (0 leq a_i leq b_i leq 10^9) — the start and end times of the i-th guest\'s availability range. It is guaranteed that the sum of n over all test cases does not exceed 10^5. -----Output----- For each test case, print a single integer — the maximum number of guests that will be present at the same time. -----Example----- Input 2 3 1 5 2 6 4 8 4 2 4 3 5 7 10 8 9 Output 3 2","solution":"def max_guests_per_time(T, test_cases): results = [] for tes in test_cases: n, intervals = tes[\'n\'], tes[\'intervals\'] events = [] for interval in intervals: a_i, b_i = interval events.append((a_i, 1)) # Start of an interval events.append((b_i + 1, -1)) # End of an interval (b_i + 1 for discrete time) events.sort() current_guests = 0 max_guests = 0 for time, event in events: current_guests += event if current_guests > max_guests: max_guests = current_guests results.append(max_guests) return results # Example usage (for testing purposes) T = 2 test_cases = [ {\'n\': 3, \'intervals\': [(1, 5), (2, 6), (4, 8)]}, {\'n\': 4, \'intervals\': [(2, 4), (3, 5), (7, 10), (8, 9)]} ] print(max_guests_per_time(T, test_cases)) # Output: [3, 2]"},{"question":"Given a string representing a sequence of moves on a 2D grid, determine if the moves form a valid circle. Each move is represented by a character: \'U\' for up, \'D\' for down, \'L\' for left, and \'R\' for right. A valid circle means starting at the origin (0,0) and returning to the origin after completing the sequence of moves. For example: ``` s = \\"UDLR\\" ``` The output should be: ``` True ``` Explanation: The sequence \\"UDLR\\" brings the position back to the origin (0,0), forming a valid circle. Another example: ``` s = \\"UUDDLRLR\\" ``` The output should be: ``` True ``` Explanation: The sequence \\"UUDDLRLR\\" also brings the position back to the origin after completing the moves. If the sequence does not bring the position back to the origin, return `False`.","solution":"def is_valid_circle(moves): Given a string of moves, determine if the moves form a valid circle. A valid circle means starting and ending at the origin (0, 0). # Initialize coordinates x, y = 0, 0 # Process each move for move in moves: if move == \'U\': y += 1 elif move == \'D\': y -= 1 elif move == \'L\': x -= 1 elif move == \'R\': x += 1 # Check if we are back at the origin return x == 0 and y == 0"},{"question":"You are given two strings, `s` and `t`, where `t` is obtained by randomly shuffling characters of `s` and possibly adding one extra character at a random position. Your task is to identify the extra character in `t` that is not present in `s`. -----Input----- The only line contains two strings `s` and `t` (1 ≤ |s| ≤ 10^5 and |t| = |s| + 1) which consist of lowercase English letters. -----Output----- Print the extra character in `t`. -----Examples----- Input abcde abcedd Output d Input aaaa bbaaaa Output b Input xyz xyyzz Output y","solution":"def find_extra_character(s, t): Returns the extra character in t that is not present in s. count_s = {} count_t = {} for char in s: if char in count_s: count_s[char] += 1 else: count_s[char] = 1 for char in t: if char in count_t: count_t[char] += 1 else: count_t[char] = 1 for char in count_t: if count_t[char] != count_s.get(char, 0): return char"},{"question":"Imagine you need to create a message from a series of words. The message should be constructed by taking the longest word from every char in the given string `s`. If there is more than one word of the same length, then take the one that appears first in the list. You are given a list of words `words` and a string `s`. Your task is to return the constructed message. For instance: ```python 1. create_message([\\"apple\\", \\"bear\\", \\"eagle\\", \\"orb\\", \\"racecar\\"], \\"abe\\") should return \\"apple bear eagle\\" 2. create_message([\\"xenon\\", \\"zebra\\", \\"mango\\", \\"xylophone\\"], \\"xz\\") should return \\"xylophone zebra\\" ``` Constraints: - If no word starts with a specific char, return an empty string for that char in the final message. - All words contain alphabet characters (lowercase) only. - The string `s` is guaranteed to be non-empty and contain alphabet characters only. Write a function `create_message(words, s)` to solve the problem.","solution":"def create_message(words, s): Constructs a message by taking the longest word starting with each character in string s. message = [] for char in s: longest_word = \'\' for word in words: if word.startswith(char) and len(word) > len(longest_word): longest_word = word message.append(longest_word) return \' \'.join(message)"},{"question":"You are responsible for managing the SkyBridge system. This system consists of N SkyPylons connected by N-1 SkyBridges. Each SkyBridge connects two distinct SkyPylons. Once the system is activated, a signal is transmitted across the SkyBridges to all SkyPylons. The SkyBridge system guarantees that the SkyPylons create a tree structure (a connected graph with no cycles). Your task is to design an algorithm that can determine the minimum time required to activate all SkyPylons. The signal can start from any SkyPylon and will take 1 unit of time to travel across one SkyBridge. Input First line contains one integer N (2 ≤ N ≤ 15,000), the number of SkyPylons. The following N-1 lines contain two integers U, V (0 ≤ U ≠ V < N) denoting that there exists a SkyBridge between SkyPylons U and V. Output Single integer, the minimum time required to activate all SkyPylons. Example Input 7 0 1 0 2 1 3 1 4 2 5 2 6 Output 2 Note To activate all SkyPylons in minimum time, you can start the signal from SkyPylon 0. The signal will reach the farthest SkyPylons (3, 4, 5, and 6) in 2 units of time.","solution":"from collections import deque def minimum_activation_time(N, edges): Determines the minimum time required to activate all SkyPylons. Args: N (int): Number of SkyPylons. edges (list of tuples): List of SkyBridge connections between SkyPylons. Returns: int: Minimum time required to activate all SkyPylons. if N == 2: return 1 # Create adjacency list adjacency_list = [[] for _ in range(N)] for u, v in edges: adjacency_list[u].append(v) adjacency_list[v].append(u) def bfs(start): # Perform BFS to find the farthest node and its distance visited = [False] * N queue = deque([(start, 0)]) visited[start] = True farthest_node = start max_distance = 0 while queue: current, distance = queue.popleft() if distance > max_distance: max_distance = distance farthest_node = current for neighbor in adjacency_list[current]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, distance + 1)) return farthest_node, max_distance # Step 1: Perform BFS from any node (e.g., node 0) to find one end point of the longest path farthest_node_from_start, _ = bfs(0) # Step 2: Perform BFS from the farthest end found in Step 1 to find the actual longest path length in the tree _, max_distance = bfs(farthest_node_from_start) return (max_distance + 1) // 2"},{"question":"A group of friends loves playing video games together online. They have a regular routine and a specific way they keep track of their gaming sessions. Each game session has a fixed start time and end time, and they want to maximize the number of gaming sessions they can participate in without any two sessions overlapping. You are given the start and end times of these gaming sessions. Each start and end time is represented in minutes from the beginning of a given day. Your task is to find the maximum number of non-overlapping gaming sessions that the group can attend. Input: The first line contains an integer n (1 leq n leq 10^5), the number of gaming sessions. The following n lines each contain two integers start_i and end_i (0 leq start_i < end_i leq 1440), representing the start and end times of a gaming session. Output: Display the maximum number of non-overlapping gaming sessions that the friends can attend. Examples: Sample Input 1: 3 540 600 630 690 120 180 Sample Output 1: 3 Sample Input 2: 4 500 600 700 800 400 500 600 700 Sample Output 2: 4","solution":"def max_non_overlapping_sessions(n, sessions): Args: n : int : number of gaming sessions sessions : List[Tuple[int, int]] : list of tuples, each containing start and end times of sessions Returns: int : maximum number of non-overlapping gaming sessions # Sort the sessions by end times sessions.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in sessions: if start >= last_end_time: count += 1 last_end_time = end return count"},{"question":"You are given a string S consisting of lowercase alphabetical characters. Your task is to determine the minimum number of substrings needed such that each substring contains unique characters (i.e., no characters are repeated within any substring). # Example 1: **Input:** S = \\"abac\\" **Output:** 2 **Explanation:** One possible partition is \\"ab\\" and \\"ac\\". # Example 2: **Input:** S = \\"abcdef\\" **Output:** 1 **Explanation:** The entire string is already composed of unique characters. # Example 3: **Input:** S = \\"aaa\\" **Output:** 3 **Explanation:** Each character should be in its own substring to ensure uniqueness. # Your Task: Create a function `minUniqueSubstrings()` that takes a string `S` as input and returns the minimum number of substrings needed such that each substring contains unique characters. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: - 1 ≤ length of S ≤ 10^5","solution":"def minUniqueSubstrings(S): count = 0 seen = set() for char in S: if char in seen: count += 1 seen = set() seen.add(char) return count + 1"},{"question":"Design a function called `find_max_sales` that takes a list of integers representing daily sales and an integer `k` representing the number of consecutive days. The function should return the maximum sum of sales for any `k` consecutive days. # Example Input ``` find_max_sales([10, 20, 30, 40, 50, 60], 3) ``` Output ``` 150 ``` Explanation The maximum sum of sales for 3 consecutive days can be obtained from the last three days: ``` 50 + 60 + 40 = 150 ``` # Constraints - Assume that the input list will have at least `k` elements. - You are to write efficient code that works in linear time.","solution":"def find_max_sales(sales, k): Finds the maximum sum of sales for any k consecutive days. Parameters: sales (list of int): List of daily sales. k (int): Number of consecutive days. Returns: int: Maximum sum of sales for any k consecutive days. current_sum = sum(sales[:k]) max_sum = current_sum for i in range(k, len(sales)): current_sum += sales[i] - sales[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"You are given an animated carousel in a simulated amusement park. The carousel contains `n` seats, numbered from 1 to n in a circular order. There\'s always one empty seat, and the remaining `n-1` seats are occupied by people. Initially, the empty seat is at position `m`. The carousel rotates in a series of steps. In each step, a person from the seat just before the empty seat moves into the empty seat, and the empty seat thereby shifts to the newly vacated seat. This process continues until all people have moved to a new seat at least once. You need to determine the position of the empty seat after `k` steps. # Input The input contains three integers on a single line: `n`, `m`, and `k` where: - `2 ≤ n ≤ 10^6` - `1 ≤ m ≤ n` - `0 ≤ k ≤ 10^12` # Output Print a single integer, the position of the empty seat after `k` steps. # Examples Input ``` 6 2 3 ``` Output ``` 5 ``` Input ``` 10 7 99 ``` Output ``` 6 ``` # Note 1. In the first example, the initial empty seat is at position 2. After 3 steps, the empty seat will move to position 5. 2. In the second example, the empty seat starts at position 7 and moves 99 steps. By simulating or calculating the required number of rotations, it arrives at position 6.","solution":"def empty_seat_position(n, m, k): Returns the position of the empty seat after `k` steps. :param n: int - Total number of seats :param m: int - Initial position of the empty seat :param k: int - Number of steps :return: int - The position of the empty seat after `k` steps. # Calculate the position after k steps. # We subtract 1 from m to convert it to zero-based index, add k steps, take modulo n, # and convert back to one-based index by adding 1. return ((m - 1 + k) % n) + 1"},{"question":"Paul loves playing with sequences of numbers. One day, he discovered a fascinating pattern in certain integer sequences and decided to test it by writing a program. However, Paul is not very comfortable with coding, so he asked for your help. Given an integer sequence, your task is to transform it using the pattern discovered by Paul. INPUT First line contains a single integer T denoting the number of test cases. Each of the following T lines contains a sequence of space-separated integers. OUTPUT Print the transformed sequence for each test case in a new line. Constraints 1 ≤ T ≤ 1000 1 ≤ the number of integers in each sequence ≤ 100 -1000 ≤ each integer in the sequence ≤ 1000 Example Pattern: Replace each integer with the sum of its digits. If the result is a two-digit number, repeat the process until a single-digit number is obtained. SAMPLE INPUT 4 12 45 -23 908 320 155 -9 81 111 56 77 19 SAMPLE OUTPUT 3 9 5 8 5 2 9 9 3 2 5 1","solution":"def sum_of_digits(n): while n >= 10 or n <= -10: n = sum(int(digit) for digit in str(abs(n))) return n if n >= 0 else -n def transform_sequence(sequences): transformed = [] for sequence in sequences: transformed_seq = [sum_of_digits(num) for num in sequence] transformed.append(transformed_seq) return transformed def parse_input_and_transform(input_data): lines = input_data.split(\\"n\\") T = int(lines[0]) sequences = [[int(num) for num in line.split()] for line in lines[1:T+1]] return transform_sequence(sequences)"},{"question":"You are given an array representing the height of bars, where the width of each bar is 1. Calculate how much water can be trapped after raining. Example 1: Input: [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The total water trapped is 6 units. Example 2: Input: [4,2,0,3,2,5] Output: 9 Explanation: The total water trapped is 9 units.","solution":"def trap(height): Calculate the amount of water that can be trapped after raining. Parameters: height (list): A list of integers representing the height of the bars. Returns: int: The total units of water that can be trapped. if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n water_trapped = 0 # Fill left_max array left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) # Fill right_max array right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) # Calculate the water trapped at each index for i in range(n): water_trapped += min(left_max[i], right_max[i]) - height[i] return water_trapped"},{"question":"An online movie ticket booking system allows users to book tickets for their desired movie shows. Each show is assigned a unique show ID and has a limited number of seats. Users can reserve seats, but due to the high demand for some popular shows, multiple users might try to book the same seat simultaneously, leading to potential conflicts. To handle this situation, the system must ensure that no two users can book the same seat for the same show. Additionally, the system should optimize the booking process to ensure that it can handle the maximum number of unique reservations efficiently. -----Input----- The input consists of: - one line with the integer m (1 le m leq 10^5), the number of booking requests. - m lines with three integers each: showID_ i, row_ i, and seat_ i (1 leq showID_ i leq 10^5, 1 leq row_ i, seat_ i leq 1000). Each line represents a booking request for a particular show, row, and seat. -----Output----- Output the maximum number of unique reservations that can be successfully booked without conflicts. -----Examples----- Sample Input 1: 5 1 1 1 1 1 1 1 1 2 2 1 1 2 1 1 Sample Output 1: 3 Sample Input 2: 4 1 1 1 2 1 1 1 2 1 2 1 2 Sample Output 2: 4","solution":"def max_unique_reservations(m, bookings): Returns the maximum number of unique reservations that can be successfully booked without conflicts. Parameters: - m: An integer representing the number of booking requests - bookings: A list of tuples where each tuple contains three integers (showID_i, row_i, seat_i) Returns: - An integer representing the number of unique reservations reserved = set() for booking in bookings: showID, row, seat = booking seat_identifier = (showID, row, seat) if seat_identifier not in reserved: reserved.add(seat_identifier) return len(reserved)"},{"question":"# Balanced Bracket Sequence Given a string containing just the characters `(`, `)`, `{`, `}`, `[` and `]`, determine if the input string is a valid expression. An input string is valid if: 1. Open brackets must be closed by the same type of brackets. 2. Open brackets must be closed in the correct order. An empty string is also considered valid. Examples - `Input: \\"()\\" Output: true` - `Input: \\"()[]{}\\" Output: true` - `Input: \\"(]\\" Output: false` - `Input: \\"([)]\\" Output: false` - `Input: \\"{[]}\\" Output: true` Write a function: ```python def is_valid_bracket_sequence(s: str) -> bool: pass ``` The function should take a string `s` as input and return a boolean value indicating whether the input string is a valid expression or not.","solution":"def is_valid_bracket_sequence(s: str) -> bool: Determine if the input string is a valid bracket sequence. :param s: Input string containing the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. :return: True if the string is a valid bracket sequence, False otherwise. stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_map: # if it\'s a closing bracket top_element = stack.pop() if stack else \'#\' if bracket_map[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"Given an n x n grid filled with integers, where n is always odd, your task is to determine if it\'s possible to make the grid a magic square by rotating any rows or columns. A grid is considered a magic square if the sum of each row, column, and both diagonals are equal. You can rotate a row or column in a cyclic manner, meaning you can move the last element to the first position and shift the other elements one position to the right (for rows) or down (for columns). You can perform this operation any number of times on any row or column. **Input:** The input consists of: - A single integer n (1 ≤ n < 10) - the size of the grid (always odd). - Followed by n lines, each with n integers separated by spaces, representing the grid. **Output:** Print \\"YES\\" (without quotes) if it is possible to obtain a magic square by rotating rows or columns. Otherwise, print \\"NO\\". **Examples:** Input: ``` 3 8 1 6 3 5 7 4 9 2 ``` Output: ``` YES ``` Input: ``` 3 8 1 6 3 5 9 4 9 2 ``` Output: ``` NO ``` **Note:** In the first example, the provided grid is already a magic square as the sum of the rows, columns, and diagonals are all equal to 15. In the second example, no matter how you rotate the rows or columns, you cannot obtain the sums to be equal for rows, columns, and diagonals. Hence, the output is \\"NO\\".","solution":"def is_magic_square_possible(grid): n = len(grid) def row_sum(row): return sum(grid[row]) def col_sum(col): return sum(grid[row][col] for row in range(n)) def diag1_sum(): return sum(grid[i][i] for i in range(n)) def diag2_sum(): return sum(grid[i][n-1-i] for i in range(n)) # Check if already a magic square magic_sum = row_sum(0) for i in range(n): if row_sum(i) != magic_sum or col_sum(i) != magic_sum: return \\"NO\\" if diag1_sum() != magic_sum or diag2_sum() != magic_sum: return \\"NO\\" return \\"YES\\" def check_magic_square_possible(n, grid): return is_magic_square_possible(grid) # Example usage: n = 3 grid = [ [8, 1, 6], [3, 5, 7], [4, 9, 2] ] print(check_magic_square_possible(n, grid)) # YES"},{"question":"Geek is given a task to reverse the order of students residing in a hostel. Each student has a unique ID number represented as an integer. The IDs are stored in an array. Geek needs help to reverse the IDs in the array to ensure the students leave in the correct order. Your task is to write a function that reverses the array of student IDs. Example 1: Input: N = 5 a[ ] = {10, 20, 30, 40, 50} Output: 50 40 30 20 10 Example 2: Input: N = 4 a[ ] = {3, 8, 2, 1} Output: 1 2 8 3 Your Task: You don\'t need to read input or print anything. Your task is to complete the function reverseArray() which takes the array a[] and its size N as input parameters and returns the array with the order of IDs reversed. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 1000 1 ≤ a[i] ≤ 10^9","solution":"def reverseArray(a, N): Reverses the order of elements in the array a. :param a: List[int] - List of student IDs. :param N: int - Number of students (length of the array). :return: List[int] - List of student IDs in reverse order. return a[::-1]"},{"question":"A software company is building a new social media platform and wants to implement a system to categorize its users based on their friends and followers count. Users are categorized into three tiers: Bronze, Silver, and Gold. - A user belongs to the **Bronze tier** if their number of friends is less than 100 and their number of followers is less than 1000. - A user belongs to the **Silver tier** if their number of friends is between 100 and 500 (inclusive) or their number of followers is between 1000 and 5000 (inclusive), but does not qualify for the Gold tier. - A user belongs to the **Gold tier** if both their number of friends exceed 500 and their number of followers exceed 5000. Given a list of users with their respective counts of friends and followers, write a function to categorize each user into the appropriate tier. ------ Input Format ------ - First line will contain an integer N, the number of users. - The next N lines each contain two integers Fi (the number of friends) and F\'i (the number of followers) for the i-th user. ------ Output Format ------ Output N lines, each containing the tier for the corresponding user (\'Bronze\', \'Silver\', or \'Gold\'). ------ Constraints ------ 1 ≤ N ≤ 10^5 0 ≤ F_i, F\'i ≤ 10^6 ----- Sample Input 1 ------ 5 50 200 200 3000 600 2000 800 7000 1000 10000 ----- Sample Output 1 ------ Bronze Silver Silver Gold Gold ----- Explanation ------ 1. The first user has 50 friends and 200 followers, which puts them in the Bronze tier. 2. The second user has 200 friends and 3000 followers, which qualifies them for the Silver tier. 3. The third user has 600 friends and 2000 followers, which qualifies them for the Silver tier. 4. The fourth user has 800 friends and 7000 followers, which qualifies them for the Gold tier. 5. The fifth user has 1000 friends and 10000 followers, which qualifies them for the Gold tier.","solution":"def categorize_users(users): Categorizes each user into the appropriate tier based on their friends and followers count. :param users: List of tuples (friends, followers) :return: List of strings representing the tiers of the users tiers = [] for friends, followers in users: if friends > 500 and followers > 5000: tiers.append(\'Gold\') elif 100 <= friends <= 500 or 1000 <= followers <= 5000: tiers.append(\'Silver\') else: tiers.append(\'Bronze\') return tiers # Function to handle input and output def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) users = [(int(data[i]), int(data[i + 1])) for i in range(1, len(data), 2)] result = categorize_users(users) for tier in result: print(tier)"},{"question":"You are given an array of N integers. You need to determine the maximum absolute difference between the sum of elements at even indices and the sum of elements at odd indices. Indices are considered based on 0-based indexing. ------ Input: ------ The first line of input contains an integer, T, which denotes the number of test cases. Each test case contains two lines of input. The first line contains an integer N, which denotes the number of elements in the array. The second line contains N space-separated integers. ------ Output: ------ For each test case, output in a single line the maximum absolute difference between the sum of elements at even indices and the sum of elements at odd indices. ------ Constraints ------ 1 ≤ T ≤ 10^3 1 ≤ N ≤ 10^5 -10^3 ≤ A[i] ≤ 10^3 The total number of elements across all test cases will not exceed 10^6. ----- Sample Input 1 ------ 2 5 1 2 3 4 5 4 1 -1 1 -1 ----- Sample Output 1 ------ 3 4 ----- Explanation 1 ------ Case 1: The sum of elements at even indices is 1 + 3 + 5 = 9 and the sum of elements at odd indices is 2 + 4 = 6. The absolute difference is |9 - 6| = 3. Case 2: The sum of elements at even indices is 1 + 1 = 2 and the sum of elements at odd indices is -1 - 1 = -2. The absolute difference is |2 - (-2)| = 4.","solution":"def max_absolute_difference_even_odd(test_cases): results = [] for case in test_cases: N, arr = case sum_even = 0 sum_odd = 0 for i in range(N): if i % 2 == 0: sum_even += arr[i] else: sum_odd += arr[i] results.append(abs(sum_even - sum_odd)) return results def parse_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) arr = list(map(int, lines[index + 1].split())) test_cases.append((N, arr)) index += 2 return test_cases"},{"question":"Write a function called `find_first_repeated_char` that takes in a string `input_str` and returns the first character that repeats. If no character repeats, return `None`. **Function Signature:** ```python def find_first_repeated_char(input_str: str) -> str: pass ``` # Input - A single string `input_str` containing at least one character. The string can include letters, digits, and special characters. # Output - The first repeating character in the input string. If no character repeats, return `None`. # Examples ```python # Example 1 input_str = \\"hello\\" output = \'l\' # Explanation: \\"l\\" is the first character that repeats in the string. # Example 2 input_str = \\"swiss\\" output = \'s\' # Explanation: \\"s\\" is the first character that repeats in the string. # Example 3 input_str = \\"abcdef\\" output = None # Explanation: No character repeats in the string, so the output is None. ``` # Constraints - The function should run in O(n) time complexity, where n is the length of the input string. - The function should make use of an appropriate data structure to efficiently track characters seen so far.","solution":"def find_first_repeated_char(input_str: str) -> str: Returns the first repeated character in the input string. If no character repeats, returns None. seen = set() for char in input_str: if char in seen: return char seen.add(char) return None"},{"question":"Given an array of integers, determine the minimum number of operations required to make all the elements in the array equal. In each operation, you can select any element of the array and either increment or decrement it by 1. Write a program that takes a list of integers and outputs the minimum number of operations required. Input The first line contains an integer n (1 ≤ n ≤ 1000), the size of the array. The second line contains n integers (1 ≤ ai ≤ 1000), the elements of the array. Output Print the minimum number of operations required to make all the elements in the array equal. Example Input 5 1 2 3 4 5 Output 6","solution":"def min_operations_to_equal_elements(arr): Calculates the minimum number of operations required to make all elements in the array equal. # Sort the array to find the median arr.sort() n = len(arr) median = arr[n // 2] if n % 2 != 0 else arr[n // 2 - 1] # Calculate total operations required to bring all elements to the median min_operations = sum(abs(x - median) for x in arr) return min_operations def process_input(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) arr = list(map(int, data[1:n+1])) return min_operations_to_equal_elements(arr)"},{"question":"You are given a binary tree with n nodes labeled from 1 to n. Each node has a unique value assigned to it, ranging from 1 to n. The tree is rooted at node 1. Your task is to determine the minimum value in the subtree of each node in the tree and output these values for all nodes. Input - The first line contains a single integer n (1 ≤ n ≤ 105) — the number of nodes in the tree. - The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ n) — the values assigned to each node. - Each of the next n-1 lines contains two space-separated integers u and v (1 ≤ u, v ≤ n) — denoting an edge between nodes u and v, making the tree. Output - Print n space-separated integers, where the i-th integer represents the minimum value in the subtree rooted at node i. Examples Input 5 5 3 4 2 1 1 2 1 3 2 4 2 5 Output 1 1 4 2 1 Input 3 3 1 2 1 2 1 3 Output 1 1 2 Note In the first sample, the binary tree looks like the following: 1 (5) / 2 (3) 3 (4) / 4 (2) 5 (1) The minimum value in the subtree rooted at node 1 is 1, at node 2 is 1, at node 3 is 4, at node 4 is 2, and at node 5 is 1.","solution":"from collections import defaultdict def find_subtree_minimums(n, values, edges): tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) def dfs(node, parent): min_value = values[node-1] for neighbor in tree[node]: if neighbor != parent: min_value = min(min_value, dfs(neighbor, node)) subtree_min[node] = min_value return min_value subtree_min = [0] * (n + 1) dfs(1, -1) return subtree_min[1:] # Example usage n = 5 values = [5, 3, 4, 2, 1] edges = [(1, 2), (1, 3), (2, 4), (2, 5)] output = find_subtree_minimums(n, values, edges) print(output) # should print [1, 1, 4, 2, 1]"},{"question":"Given an array of integers, you need to find the maximum product of any three numbers in the array. If the array contains fewer than three elements, print \'NO SOLUTION\'. The product of a group of integers is the result of multiplying them together. INPUT: The first line of the input contains an integer T, the number of test cases. T test cases follow. Each test case consists of two lines. The first line contains an integer n, the number of elements in the array. The second line contains n space-separated integers representing the elements of the array. OUTPUT: For each test case, output a single line containing the maximum product of any three numbers in the array. If the array contains fewer than three elements, output \'NO SOLUTION\'. CONSTRAINTS: 1 ≤ T ≤ 100 1 ≤ n ≤ 100 -1,000 ≤ array elements ≤ 1,000 SAMPLE INPUT 4 5 10 3 5 6 20 6 -10 -10 5 2 1 0 2 1 2 3 1 2 3 SAMPLE OUTPUT 1200 500 NO SOLUTION 6 Explanation In the first test case, the three numbers with the maximum product are 10, 6, and 20, which multiply to 1200. In the second test case, the three numbers with the maximum product are -10, -10, and 5, which multiply to 500. In the third test case, there are fewer than three elements, so the output is \'NO SOLUTION\'. In the fourth test case, the three numbers with the maximum product are 1, 2, and 3, which multiply to 6.","solution":"def max_product_of_three(arr): Returns the maximum product of any three numbers in the array. If the array contains fewer than three elements, returns \'NO SOLUTION\'. n = len(arr) if n < 3: return \'NO SOLUTION\' arr.sort() # The maximum product can be the product of: # 1. The three largest numbers # 2. The two smallest numbers (most negative) and the largest number return max(arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1]) def find_max_product_of_three(test_cases): Given multiple test cases, finds the maximum product for each case. results = [] for case in test_cases: n, arr = case results.append(max_product_of_three(arr)) return results def parse_input(input_string): Parses the input string into a list of test cases. lines = input_string.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): n = int(lines[index]) arr = list(map(int, lines[index + 1].split())) test_cases.append((n, arr)) index += 2 return test_cases def print_output(results): Prints the results for each test case. for result in results: print(result)"},{"question":"A delivery company uses a fleet of drones to deliver packages within a smart city. The city is modeled as an unweighted, undirected graph with intersections as nodes and roads as edges. Warehouses and delivery points are located at different intersections. The drones start at warehouses and are tasked with delivering packages to the nearest delivery points. You need to process a series of operations of two types: Type 0: Given a drone starting at intersection X, what is the shortest distance to reach the nearest delivery point? If no such point exists, return -1. Type 1: Mark the intersection Y as a delivery point (if it is not already marked). Input: - The first line contains integers N (1 <= N <= 100000) and M (0 <= M <= 200000) - the number of intersections and the number of roads, respectively. - The next M lines each contain two integers u and v (1 <= u, v <= N) representing a road between intersections u and v. - The next line contains Q (1 <= Q <= 50000), the number of operations. - Each of the next Q lines contains an operation of exactly one of the given two types: - Type 0 followed by X (1 <= X <= N). - Type 1 followed by Y (1 <= Y <= N). Output: For each query of Type 0, output the shortest distance from the drone\'s starting intersection to the nearest delivery point. If there are no delivery points, output -1. SAMPLE INPUT: 6 5 1 2 2 3 3 4 4 5 5 6 7 0 1 1 4 0 2 1 5 0 2 0 6 0 7 SAMPLE OUTPUT: -1 2 1 3 -1 Explanation: Initially, there are no delivery points, hence the first query of Type 0 returns -1. After marking intersection 4 as a delivery point, the shortest distance from intersection 2 to the nearest delivery point (4) is 2. After marking intersection 5 as a delivery point, the nearest delivery point from intersection 2 remains 4, which is 2 units away. For intersection 6, the nearest delivery point is 5, which is 1 unit away. Intersection 7 is not connected to any other intersections, thus it\'s -1 for the last query of Type 0.","solution":"from collections import deque, defaultdict def find_shortest_distance_to_delivery_point(N, roads, Q, queries): # Creating adjacency list graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) delivery_points = set() def bfs(start): # Perform BFS from start node to find the shortest path to any delivery point if start in delivery_points: return 0 queue = deque([(start, 0)]) visited = set([start]) while queue: node, dist = queue.popleft() for neighbor in graph[node]: if neighbor in delivery_points: return dist + 1 if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, dist + 1)) return -1 results = [] for query in queries: op, intersection = query if op == 0: # Find the shortest distance to the nearest delivery point results.append(bfs(intersection)) elif op == 1: # Mark this intersection as a delivery point delivery_points.add(intersection) return results"},{"question":"Write a program that takes an integer n and determines if it can be expressed as the sum of two prime numbers. If it is possible, output one such pair of prime numbers. If there are multiple pairs, output the pair where the smaller prime number is the smallest among all possible pairs. If no such pairs exist, output \\"No pair found\\". Input Given multiple datasets. Each dataset is given an integer n (4 ≤ n ≤ 100,000) on one row. The number of datasets does not exceed 50. Output For each dataset, either output a pair of prime numbers whose sum is equal to n, or output \\"No pair found\\" if no such pair exists. If multiple valid pairs exist, choose the pair with the smallest first element. Example Input 10 34 85 97 Output 3 7 3 31 2 83 No pair found","solution":"def is_prime(num): if num < 2: return False if num == 2: return True if num % 2 == 0: return False p = 3 while p * p <= num: if num % p == 0: return False p += 2 return True def find_prime_pair(n): for i in range(2, n // 2 + 1): # Only need to iterate up to n//2 if is_prime(i) and is_prime(n - i): return (i, n - i) return \\"No pair found\\" def process_datasets(datasets): results = [] for n in datasets: result = find_prime_pair(n) if result == \\"No pair found\\": results.append(result) else: results.append(f\\"{result[0]} {result[1]}\\") return results"},{"question":"There are n plants arranged in a line, each with its own water requirement. You have a watering machine that can water a specific range of plants in one go, meeting their exact water requirements. However, the machine cannot be programmed to individually water each plant with a different amount of water in a single operation. Instead, it will water all plants in the specified range with the same amount of water. You must determine the minimum number of operations required to meet the water requirements of all plants. The machine\'s operation is defined as selecting a subarray of plants and watering each plant in that subarray with the same quantity of water. -----Input----- The first line contains an integer n (1 ≤ n ≤ 2·10^5) — the number of plants. The second line contains n integers a_{i} (0 ≤ a_{i} ≤ 10^9) — the water requirement of each plant. -----Output----- Output a single integer — the minimum number of operations required to meet the water requirements of all plants. -----Examples----- Input 4 4 2 3 3 Output 3 Input 3 1 1 1 Output 1 Input 5 5 0 2 4 1 Output 4 -----Note----- In the first example, one possible way to water the plants in 3 operations is: 1. Water the first two plants with 2 litres each. (New requirements: [2 0 1 1]) 2. Water the last two plants with 1 litre each. (New requirements: [2 0 0 0]) 3. Water the first plant with 2 litres. (New requirements met) In the second example, all plants require the same amount of water, so one operation suffices. In the third example, one possible way to water the plants in 4 operations is: 1. Water plant 1 with 5 litres. 2. Water plant 3 with 2 litres. 3. Water plant 4 with 2 litres. (New requirements: [5 0 0 2 1]) 4. Water plant 4 and plant 5 with 1 litre each. (New requirements met)","solution":"def min_watering_operations(n, water_requirements): Determine the minimum number of watering operations required to meet the water requirements of all plants. :param n: Number of plants (integer) :param water_requirements: List of integers representing the water requirements of each plant :return: Minimum number of operations (integer) operations = 0 while max(water_requirements) > 0: min_val = min([val for val in water_requirements if val > 0]) for i in range(n): if water_requirements[i] > 0: water_requirements[i] -= min_val operations += 1 return operations"},{"question":"You are organizing a coding competition and need to set up a scoreboard system. The scoreboard requires updating the scores of participants and keeping track of their ranks dynamically as scores are updated. Each participant starts with a score of zero. When a participant submits a solution, their score increases by a certain amount. The rank of a participant is determined by comparing their score with others: a higher score means a higher rank. If two participants have the same score, they share the same rank. Your task is to implement a system that handles these score updates and efficiently retrieves the rank of any participant after each update. Input The first line contains two integers n and q (1 ≤ n ≤ 100,000, 1 ≤ q ≤ 100,000) — the number of participants and the number of queries, respectively. The next q lines contain queries in one of the following two formats: 1. \\"1 p s\\" — Add score s to participant p (1 ≤ p ≤ n, 1 ≤ s ≤ 10^9). 2. \\"2 p\\" — Output the current rank of participant p (1 ≤ p ≤ n). Output For each query of type \\"2 p\\", output the current rank of participant p. Example Input 5 7 1 1 10 1 2 15 2 1 1 3 15 2 2 1 2 5 2 2 Output 2 1 2 Explanation - After the first query, participant 1\'s score is 10. - After the second query, participant 2\'s score is 15. - Query three asks for participant 1\'s rank: participant 2 has a higher score, so participant 1 is ranked 2. - After the fourth query, participant 3\'s score is 15. - Query five asks for participant 2\'s rank: participants 2 and 3 both have the highest score, so they share the first rank. - After the sixth query, participant 2\'s score is 20. - Query seven asks for participant 2\'s rank: participant 2 has the highest score, so they are ranked 1.","solution":"import bisect class Scoreboard: def __init__(self, n): self.n = n self.scores = [0] * (n + 1) self.sorted_scores = [] def update_score(self, p, s): # Remove current score from sorted list if self.scores[p] > 0: self.sorted_scores.remove(self.scores[p]) # Update the score self.scores[p] += s # Insert the updated score in the sorted list bisect.insort(self.sorted_scores, self.scores[p]) def get_rank(self, p): # Rank is the position from the end of the sorted list rank = len(self.sorted_scores) - bisect.bisect_right(self.sorted_scores, self.scores[p]) + 1 return rank"},{"question":"When creating a streaming music application, it is important to ensure that users have uninterrupted service. One way to achieve that is by preloading a set of songs to the user\'s device for offline use. However, the storage on the device is limited, so we need a method to ensure the maximum enjoyment for the user\'s favorite songs while staying within the storage limits. Given a list of songs, each with a size and a rating, determine the combination of songs that maximizes the sum of ratings without exceeding a given storage limit. Assume that each song can only be included once. -----Input----- The input will start with two integers 1leq nleq 100 and 1leq Sleq 10^4 denoting the number of songs and the total storage limit, respectively. This is followed by n lines, each containing two integers 1leq s_ileq 10^3 and 0leq r_i leq 100, where s_i (1leq i leq n) is the size of the i^{th} song in megabytes and r_i is the rating of the i^{th} song. -----Output----- Output one integer, the maximum sum of ratings obtainable without exceeding the storage limit. -----Example----- In sample input 1, we have n=4, S=10. The songs have sizes and ratings as follows: (5, 10), (4, 7), (6, 6), and (2, 5). By selectively choosing songs that fit within the storage limit, the optimal combination can be determined. -----Examples----- Sample Input: 4 10 5 10 4 7 6 6 2 5 Sample Output: 17","solution":"def max_sum_of_ratings(n, S, songs): Given a number of songs with their sizes and ratings, finds the maximum sum of ratings that doesn\'t exceed the given storage limit using a dynamic programming approach. # Initialize dp array where dp[i] is the maximum rating sum at storage limit i dp = [0] * (S + 1) # Iterate over each song for s, r in songs: # Update the dp array from the end to the beginning to avoid overwriting for j in range(S, s - 1, -1): dp[j] = max(dp[j], dp[j - s] + r) return dp[S] # Example usage if __name__ == \\"__main__\\": n = 4 S = 10 songs = [(5, 10), (4, 7), (6, 6), (2, 5)] print(max_sum_of_ratings(n, S, songs)) # Output: 17"},{"question":"You are given an array of integers arr of length n and an integer x. Your task is to determine the minimum number of operations required to make all elements of the array have the same parity (either all even or all odd). In one operation, you can increment or decrement any element of the array by 1. A number is even if it is divisible by 2, and odd if it is not divisible by 2. -----Input----- The first line of the input contains one integer t (1 le t le 1000) — the number of test cases. Then t test cases follow. The first line of each test case contains two integers n and x (1 le n le 2000, 1 le x le 10^9) — the length of the array and the integer x. The second line of each test case contains n integers arr_1, arr_2, ..., arr_n (1 le arr_i le 10^9) — the elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 2000 (sum n le 2000). -----Output----- For each test case, print one integer — the minimum number of operations required to make all elements of the array have the same parity. -----Example----- Input 3 5 3 1 2 3 4 5 4 1 6 7 8 9 3 2 2 4 6 Output 4 2 0 -----Note----- For the first test case, we can increment elements 2 and 4 by 1 to make them odd, and increment elements 1 and 5 by 2 to make them even, resulting in all elements having the same parity. This requires 4 operations. For the second test case, we can increment elements 6 and 8 by 1 to make them all odd, resulting in 2 operations. For the third test case, all elements already have the same parity (even), so no operations are required.","solution":"def min_operations_to_make_same_parity(n, x, arr): even_count = sum(1 for num in arr if num % 2 == 0) odd_count = n - even_count # To make all elements parity # Choose the one which has lesser numbers as it will take minimum operations return min(even_count, odd_count) def solve(test_cases): results = [] for n, x, arr in test_cases: results.append(min_operations_to_make_same_parity(n, x, arr)) return results"},{"question":"A security company is looking to improve their firewall system that filters out malicious IP addresses. The company maintains a blacklist of IP ranges in CIDR (Classless Inter-Domain Routing) notation. When a new connection request comes in, the system must determine whether the source IP address is within any of the blocked IP ranges. You need to write a program that receives a list of CIDR notations representing the blocked IP ranges and a list of IP addresses to check. The program should output whether each IP address is blocked or allowed. # Input - The first line contains an integer `n` (1 ≤ n ≤ 100) — the number of CIDR notations representing blocked IP ranges. - The next `n` lines each contain a CIDR notation. - The following line contains an integer `m` (1 ≤ m ≤ 100) — the number of IP addresses to check. - The next `m` lines each contain a single IP address. # Output For each IP address to check, output \\"blocked\\" if the IP address is within any of the blocked IP ranges, and \\"allowed\\" otherwise. # Example Input ``` 2 192.168.1.0/24 10.0.0.0/8 3 192.168.1.100 10.15.20.25 172.16.0.1 ``` Output ``` blocked blocked allowed ``` # Notes - CIDR notation `192.168.1.0/24` means that all IP addresses in the range from `192.168.1.0` to `192.168.1.255` are blocked. - CIDR notation `10.0.0.0/8` means that all IP addresses in the range from `10.0.0.0` to `10.255.255.255` are blocked. - Each IP address will be in standard IPv4 format, i.e., four decimal numbers separated by periods. To determine if an IP is in a given CIDR block, you need to: 1. Convert both the IP and CIDR base address to their binary forms. 2. Apply the subnet mask to both the CIDR base address and the IP address. 3. Compare the masked addresses; if they match, the IP is within the range.","solution":"import ipaddress def is_ip_blocked(cidr_list, ip_list): Determine if each IP in ip_list is blocked by any CIDR in cidr_list. :param cidr_list: List of CIDR notations representing blocked IP ranges. :param ip_list: List of IP addresses to check. :return: List of strings \\"blocked\\" or \\"allowed\\" for each IP in ip_list. blocked_ranges = [ipaddress.ip_network(cidr) for cidr in cidr_list] results = [] for ip in ip_list: ip_addr = ipaddress.ip_address(ip) is_blocked = any(ip_addr in network for network in blocked_ranges) results.append(\\"blocked\\" if is_blocked else \\"allowed\\") return results # Example data for manual testing # n = 2 # cidr_list = [\\"192.168.1.0/24\\", \\"10.0.0.0/8\\"] # m = 3 # ip_list = [\\"192.168.1.100\\", \\"10.15.20.25\\", \\"172.16.0.1\\"] # Expected Output: [\\"blocked\\", \\"blocked\\", \\"allowed\\"] # results = is_ip_blocked(cidr_list, ip_list) # for result in results: # print(result)"},{"question":"Suppose you have a list of words with mixed letter cases. You need to sort this list in a special way where: 1. All the words are converted to lowercase for the purpose of sorting. 2. The words are sorted alphabetically based on their lowercase versions. 3. After sorting, the original cases of the words in the list should be preserved. Write a function `special_sort` that takes a list of strings, sorts them according to the criteria mentioned above, and returns the sorted list with original cases preserved. Function Signature: ```python def special_sort(words: List[str]) -> List[str]: ``` **Input** - A list of strings `words` with the length n (1 ≤ n ≤ 1000). **Output** - A list of strings sorted according to the given rules with original cases preserved. **Example** Input ``` words = [\\"Banana\\", \\"apple\\", \\"orange\\", \\"Grape\\", \\"Apple\\"] ``` Output ``` [\\"apple\\", \\"Apple\\", \\"Banana\\", \\"Grape\\", \\"orange\\"] ``` **Explanation** When we sort the words ignoring case, we get the following order: `[\\"apple\\", \\"Apple\\", \\"Banana\\", \\"Grape\\", \\"orange\\"]`. Note that \\"apple\\" and \\"Apple\\" compare as equal when case is ignored, so their original order is preserved. Implement the `special_sort` function to satisfy the above conditions.","solution":"from typing import List def special_sort(words: List[str]) -> List[str]: Sorts words by their lowercase representation while preserving the original case. return sorted(words, key=lambda word: word.lower())"},{"question":"Given a list of integers, write a function to find the smallest positive integer that is missing from the list, which implies that it\'s the lowest positive number that doesn\'t exist in the list. Assume the list can contain duplicates and negative numbers as well. Input The first line contains an integer n, 1 ≤ n ≤ 1000, which represents the number of elements in the list. The second line contains n space-separated integers (a_1, a_2, ldots, a_n). Output Print a single integer representing the smallest positive integer that is missing from the list. Example Sample input: 5 3 4 -1 1 5 Sample output: 2 Sample input: 3 1 2 3 Sample output: 4","solution":"def smallest_missing_positive_integer(nums): Returns the smallest missing positive integer from the given list. nums = list(filter(lambda x: x > 0, nums)) nums = sorted(set(nums)) smallest_missing = 1 for num in nums: if num == smallest_missing: smallest_missing += 1 elif num > smallest_missing: break return smallest_missing"},{"question":"Write a function ```python def flatten_dict(d: dict, parent_key: str = \'\', sep: str = \'.\') -> dict ``` that flattens a nested dictionary, concatenating keys with a separator. E.g. ```python flatten_dict({\'a\': 1, \'b\': {\'c\': 2, \'d\': {\'e\': 3, \'f\': 4}}}) # Should return {\'a\': 1, \'b.c\': 2, \'b.d.e\': 3, \'b.d.f\': 4} flatten_dict({\'a\': {\'b\': {\'c\': {\'d\': 4}}}, \'e\': 5}, sep=\'_\') # Should return {\'a_b_c_d\': 4, \'e\': 5} ``` Note: Dictionaries can have any levels of nesting.","solution":"def flatten_dict(d: dict, parent_key: str = \'\', sep: str = \'.\') -> dict: Flattens a nested dictionary, concatenating keys with a separator. :param d: The dictionary to flatten. :param parent_key: The base key to concatenate with (for recursion purposes). :param sep: The separator to use between keys. :return: The flattened dictionary. items = [] for k, v in d.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): items.extend(flatten_dict(v, new_key, sep=sep).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"A company is trying to optimize its network of computers for better communication. Each computer is represented as a node in a graph, and a direct cable connection between two computers is represented as an undirected edge between two nodes. The network graph consists of N nodes labeled from 1 to N, and each edge has a unique positive weight representing the cost of that direct connection. The company\'s goal is to ensure that every computer can communicate with every other computer either directly or indirectly via other computers, while minimizing the total cost. This requires the selection of a set of edges such that no cycles are formed, and the total cost of the selected edges is minimized. Your task is to help the company identify the minimum cost needed to ensure full communication between all computers. -----Input----- The first line of input consists of two integers N (number of nodes) and M (number of edges). The next M lines consist of three integers each: u, v, and w, representing an edge between nodes u and v with weight w. -----Output----- Output a single integer, the minimum total cost needed to ensure full communication between all computers. If it’s not possible to connect all computers, output -1. -----Constraints----- - 1 ≤ N ≤ 1000 - 0 ≤ M ≤ 100000 - 1 ≤ u, v ≤ N - 1 ≤ w ≤ 10000 -----Example----- Input: 4 5 1 2 3 1 3 1 2 3 7 2 4 2 3 4 5 Output: 6 Explanation: One of the optimal ways to connect all nodes is: 1 - 3 with cost 1 1 - 2 with cost 3 2 - 4 with cost 2 The total minimum cost is 1 + 3 + 2 = 6.","solution":"def find_parent(parent, i): if parent[i] == i: return i else: return find_parent(parent, parent[i]) def union(parent, rank, x, y): xroot = find_parent(parent, x) yroot = find_parent(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def minimum_cost_to_connect_all_computers(n, edges): edges = sorted(edges, key=lambda item: item[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) result = [] e = 0 i = 0 while e < n - 1: if i >= len(edges): break u, v, w = edges[i] i = i + 1 x = find_parent(parent, u - 1) y = find_parent(parent, v - 1) if x != y: e = e + 1 result.append([u, v, w]) union(parent, rank, x, y) if len(result) != n - 1: return -1 total_cost = 0 for u, v, weight in result: total_cost += weight return total_cost"},{"question":"Little Lulu loves to play with sequences of numbers, especially with finding interesting patterns in them. One day, she came across a sequence and decided to challenge herself by finding the longest subsequence where the difference between any two consecutive elements is the same. She calls such a subsequence an \\"Arithmetic Subsequence.\\" **Task:** Given an array of integers, help Lulu find the length of the longest arithmetic subsequence in the array. **Input:** - The first line contains an integer `n`, the number of elements in the array. - The second line contains `n` integers separated by spaces, representing the elements of the array. **Output:** - Print the length of the longest arithmetic subsequence in the array. **Constraints:** - 1 ≤ n ≤ 1000 - -10^5 ≤ array elements ≤ 10^5 **Example:** **Input:** ``` 6 1 7 10 13 14 19 ``` **Output:** ``` 4 ``` **Explanation:** The longest arithmetic subsequence is `1, 7, 13, 19` with a common difference of 6, so the length is 4. Another valid subsequence is `1, 7, 10, 13` with a common difference of 3, but its length is also 4. **Additional Example:** **Input:** ``` 5 4 4 4 4 4 ``` **Output:** ``` 5 ``` **Explanation:** The array itself is an arithmetic subsequence with a common difference of 0, so the length is 5.","solution":"def longest_arith_seq_length(arr): Given an array of integers, find the length of the longest arithmetic subsequence. :param arr: List of integers :return: Length of the longest arithmetic subsequence if not arr: return 0 n = len(arr) if n == 1: return 1 # Use dictionary to track the lengths of arithmetic subsequences with given differences dp = {} max_len = 1 for i in range(n): for j in range(i + 1, n): diff = arr[j] - arr[i] if (i, diff) in dp: dp[(j, diff)] = dp[(i, diff)] + 1 else: dp[(j, diff)] = 2 max_len = max(max_len, dp[(j, diff)]) return max_len"},{"question":"In a remote village, the villagers have organized an event where they stack some blocks in a line. Each block is represented by its height. A block of height `h` can be stacked on top of another block of height `h\'` only if `h\' > h`. Given the heights of the blocks, determine the maximum height of the stack that can be constructed under these conditions. Constraints: - The number of blocks `N` is in the range `1 <= N <= 1000`. - The height of each block is an integer between `1` and `10^4`. Input: The input is given from the standard input in the following format: ``` N H_1 H_2 ... H_N ``` Output: Print the maximum height of the stack. Examples: Input: ``` 5 3 4 1 2 5 ``` Output: ``` 15 ``` Input: ``` 4 4 3 2 1 ``` Output: ``` 4 ``` Input: ``` 3 10 20 30 ``` Output: ``` 60 ```","solution":"def max_stack_height(blocks): This function takes a list of block heights and returns the maximum height of the stack that can be obtained by stacking them following the rule that a block can be placed on another block only if it is shorter. Arguments: blocks -- list of integers representing the heights of the blocks. Returns: max_height -- integer representing the maximum height achievable. # Sort the blocks in ascending order blocks.sort() return sum(blocks) if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split() N = int(data[0]) blocks = list(map(int, data[1:N+1])) print(max_stack_height(blocks))"},{"question":"Create a function that takes a list of integers and returns a new list containing all elements that are the product of the digits of elements in the input list. Examples input = [123, 45, 11] output = [6, 20, 1] input = [99, 306, 78] output = [81, 0, 56] The Task: Write a function `products_of_digits(lst)` that takes a list of integers as input and returns a list where each element is the product of the digits of the corresponding element in the input list. Example where `lst = [541, 320, 68]`: input = [541, 320, 68] output = [20, 0, 48] return [20, 0, 48] Note: - You can assume the input list contains only positive integers. - Consider optimizing your solution for large input lists.","solution":"def products_of_digits(lst): Returns a list where each element is the product of the digits of the corresponding element in the input list. def product_of_digits(n): product = 1 while n > 0: product *= n % 10 n //= 10 return product return [product_of_digits(x) for x in lst]"},{"question":"You are given a string ( s ) consisting of only digits (0-9). You are required to form the largest possible permutation of the string such that the resulting number is divisible by 3. -----Input----- The first line contains an integer ( t ) ((1 leq t leq 10^4)) — the number of test cases. The description of test cases follows. The first line of each test case contains a string ( s ) ((1 leq |s| leq 10^5)) — the input string consisting of digits (0-9). It is guaranteed that the total number of characters over all test cases does not exceed ( 10^6 ). -----Output----- For each test case, if it is possible to form the largest permutation of the string ( s ) that is divisible by 3, output the permutation. Otherwise, output \\"NO\\" (without quotes). You can output \\"NO\\" in any case (for example, strings \\"nO\\", \\"No\\" and \\"no\\" will be recognized as a negative response). -----Examples----- Input 3 123 55 102 Output 321 NO 210 -----Note----- In the first test case, the largest permutation of 123 that is divisible by 3 is 321. In the second test case, there are no permutations of 55 that are divisible by 3. In the third test case, the largest permutation of 102 that is divisible by 3 is 210.","solution":"def largest_permutation_divisible_by_3(t, test_cases): results = [] for s in test_cases: digits = sorted(s, reverse=True) total_sum = sum(int(digit) for digit in digits) if total_sum % 3 == 0: results.append(\\"\\".join(digits)) else: results.append(\\"NO\\") return results"},{"question":"Implement a function `balanced_brackets(s)` that takes a string `s` containing only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', and determines if the input string is valid. An input string is valid if: 1. Open brackets must be closed by the same type of brackets. 2. Open brackets must be closed in the correct order. Return true if the string is valid, false otherwise. Examples ``` balanced_brackets(\\"()\\") returns true balanced_brackets(\\"()[]{}\\") returns true balanced_brackets(\\"(]\\") returns false balanced_brackets(\\"([)]\\") returns false balanced_brackets(\\"{[]}\\") returns true ``` # Remarks - The input string `s` is guaranteed to be a non-empty string of length <= 104 containing only the characters mentioned above.","solution":"def balanced_brackets(s): Determines if the input string s of brackets is valid. An input string is valid if: 1. Open brackets must be closed by the same type of brackets. 2. Open brackets must be closed in the correct order. :param s: str - Input string containing only \'(\', \')\', \'{\', \'}\', \'[\' and \']\' :return: bool - True if valid, False otherwise stack = [] bracket_map = {\')\':\'(\', \'}\':\'{\', \']\':\'[\'} for char in s: if char in bracket_map.values(): stack.append(char) elif char in bracket_map.keys(): if stack == [] or stack.pop() != bracket_map[char]: return False else: return False return stack == []"},{"question":"Given an array A of non-negative integers, you are tasked with modifying the array such that each element is unique. To achieve this, you can increase each element as many times as you want (by any amount you want). The cost of each increment is 1 unit. Your goal is to determine the minimum total cost to make all elements of the array unique. Example 1: Input: [1, 2, 2] Output: 1 Explanation: You can increase the second 2 to 3 with a cost of 1. Example 2: Input: [3, 2, 1, 2, 1, 7] Output: 6 Explanation: You can increase the duplicates as follows: [3, 2, 1, 4, 5, 7]. The cost is 3 + 3 = 6. Note: - 1 <= A.length <= 40000 - 0 <= A[i] <= 40000 Constraints: - You must minimize the cost to make all the elements unique. - Increasing an element’s value is the only allowed operation. - Array elements can be modified in-place or out-of-place as needed. Complete the function: ```python def minIncrementForUnique(A): # Your code here ```","solution":"def minIncrementForUnique(A): Returns the minimum cost to make all elements of the array A unique by incrementing. if not A: return 0 A.sort() cost = 0 for i in range(1, len(A)): if A[i] <= A[i-1]: increment = A[i-1] - A[i] + 1 A[i] += increment cost += increment return cost"},{"question":"Given a string s, you have to check if it can be rearranged to form a palindrome. A palindrome is a string that reads the same forward and backward. A string can be rearranged to form a palindrome if and only if no more than one character has an odd count (for strings of odd length) and all characters have an even count (for strings of even length). Help determine if the string can be rearranged to form a palindrome by writing a function that returns \\"YES\\" if it is possible and \\"NO\\" otherwise. -----Input----- The first line contains a single integer t — the number of test cases (1 le t le 100). The t tests follow. Each of the next t lines contains a string s (1 le |s| le 1000) — the string to check. -----Output----- For each test, output \\"YES\\" if the string can be rearranged to form a palindrome, otherwise output \\"NO\\". -----Example----- Input 3 civic ivicc hello Output YES YES NO -----Note----- In the first example, the string \\"civic\\" is already a palindrome. In the second example, the characters of \\"ivicc\\" can be rearranged to \\"civic\\", which is a palindrome. In the third example, the string \\"hello\\" cannot be rearranged to form a palindrome.","solution":"def can_form_palindrome(s): Given a string `s`, check if it can be rearranged to form a palindrome. Args: s (str): the string to check Returns: str: \\"YES\\" if the string can be rearranged to form a palindrome, otherwise \\"NO\\" from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) if odd_count > 1: return \\"NO\\" return \\"YES\\" def process_test_cases(t, test_cases): Process multiple test cases to determine if each string can be rearranged to form a palindrome. Args: t (int): the number of test cases test_cases (list): list of strings to check Returns: list: list of results for each test case, either \\"YES\\" or \\"NO\\" return [can_form_palindrome(s) for s in test_cases]"},{"question":"Write a function, `convertToRoman` / `convert_to_roman` / `convertToRoman`, that takes an integer as an argument and returns its Roman numeral representation as a string. The function should handle integers from 1 to 3999 (inclusive). The Roman numeral system uses the following symbols and their respective values: ``` Symbol Value I 1 IV 4 V 5 IX 9 X 10 XL 40 L 50 XC 90 C 100 CD 400 D 500 CM 900 M 1000 ``` For example: ```python convertToRoman(3) ``` should return: ```python \\"III\\" ``` and ```python convertToRoman(1994) ``` should return: ```python \\"MCMXCIV\\" ``` Ensure that the returned string strictly follows the standard Roman numeral conventions and uses the largest possible Roman numeral symbols to represent the integer.","solution":"def convert_to_roman(num): Converts an integer to its Roman numeral representation. val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_numeral = \'\' i = 0 while num > 0: for _ in range(num // val[i]): roman_numeral += syb[i] num -= val[i] i += 1 return roman_numeral"},{"question":"A transportation company wants to streamline its vehicle routing system. They have n drivers, each identified by a unique driver ID number. Each driver has a predefined list of delivery locations they must visit. Each location is identified by a unique location ID. To optimize their operations, the company needs a system that compares the delivery routes of two drivers and determines the intersection of their routes. Given two drivers, your task is to find the common locations in their routes. If two drivers do not share any common location, output -1. -----Input----- The first line contains one integer T (1 le T le 100) — the number of test cases. Each test case consists of four lines: - The first line contains an integer n (1 le n le 1000) — the number of locations in the first driver\'s route. - The second line contains n integers representing the location IDs of the first driver. - The third line contains an integer m (1 le m le 1000) — the number of locations in the second driver\'s route. - The fourth line contains m integers representing the location IDs of the second driver. -----Output----- For each test case, output the location IDs that are common in the routes of the two drivers, sorted in increasing order. If there is no common location, output -1. -----Example----- Input 2 4 5 1 3 2 5 3 7 5 8 9 3 1 2 3 3 4 5 6 Output 3 5 -1 -----Note----- In the first test case, driver 1 has the route [5, 1, 3, 2] and driver 2 has the route [3, 7, 5, 8, 9]. The common locations are 3 and 5. In the second test case, driver 1 has the route [1, 2, 3] and driver 2 has the route [4, 5, 6]. There is no common location.","solution":"def find_common_locations(T, test_cases): results = [] for i in range(T): n = test_cases[i][0] driver1_locations = set(test_cases[i][1]) m = test_cases[i][2] driver2_locations = set(test_cases[i][3]) common_locations = sorted(driver1_locations.intersection(driver2_locations)) if common_locations: results.append(\\" \\".join(map(str, common_locations))) else: results.append(\\"-1\\") return results"},{"question":"Write a function that takes a list of non-negative integers and returns a tuple containing two elements: 1. The sum of the integers in the list. 2. A list of the integers in the original list raised to the power of their respective indices. # Explanation For the input list `[a0, a1, a2, ..., an]`: - The sum of the integers is `a0 + a1 + a2 + ... + an`. - The list with integers raised to the power of their indices is `[a0^0, a1^1, a2^2, ..., an^n]`. # Examples ```python process_integers([2, 3, 4]) => (9, [1, 3, 16]) process_integers([1, 5, 2, 3]) => (11, [1, 5, 4, 27]) process_integers([7, 0, 8]) => (15, [1, 0, 64]) ``` **Note:** - The input list will always contain at least one non-negative integer. - You can assume all integers are valid non-negative numbers.","solution":"def process_integers(int_list): Function to return the sum of integers in the list and the list with elements raised to the power of their respective indices. total_sum = sum(int_list) powered_list = [num ** index for index, num in enumerate(int_list)] return (total_sum, powered_list)"},{"question":"You need to determine if a given sequence of operations that remove certain elements from a linked list eventually results in an empty list, no matter what the initial elements in the list are. The linked list initially contains `n` elements, numbered from `1` to `n`. Over `m` steps, one or more elements are removed from the list. Determine if the list will definitely be empty after all `m` steps. Input: - The first line contains two integers `n` and `m` (1 ≤ n ≤ 50, 1 ≤ m ≤ 15) — the initial number of elements in the linked list and the number of steps. - Each of the next `m` lines describes a step. The `i`-th line contains an integer `k_i` (1 ≤ k_i ≤ n) followed by `k_i` distinct integers a_{i,1}, a_{i,2}, ..., a_{i,k_i} (1 ≤ a_{i,j} ≤ n), the elements removed from the linked list in the `i`-th step. Output: - Print \\"YES\\" if the sequence of operations removes all elements from the list, otherwise print \\"NO\\". Examples: Input: ``` 5 3 2 1 3 1 2 2 4 5 ``` Output: ``` YES ``` Input: ``` 4 2 2 2 4 1 3 ``` Output: ``` NO ``` Input: ``` 6 4 3 1 2 3 2 4 5 1 6 ``` Output: ``` YES ``` Note: In the first example, the sequence of operations will result in an empty list after all steps: - After step 1: the list is [2, 4, 5]. - After step 2: the list is [4, 5]. - After step 3: the list is empty. In the second example, element 1 will never be removed, hence the list will not be empty.","solution":"def is_list_emptied(n, m, operations): Determines if the linked list will be empty after all steps. Args: n (int): the initial number of elements in the list. m (int): the number of steps of operations. operations (list of list of int): list containing each step of elements to be removed. Returns: str: \\"YES\\" if the list is empty after all steps, otherwise \\"NO\\" elements = set(range(1, n + 1)) # Create a set of elements from 1 to n for op in operations: remove_elements = set(op[1:]) elements -= remove_elements # Remove elements in this operation if len(elements) == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"Sam is fascinated with arrays and bit manipulation. He came up with an interesting way to transform an array and needs your help. You are given an array of integers, mathbf{A}, of length N. Sam will perform M operations on the array. Each operation is described by three integers L, R, and X. For each operation, he will transform every element mathbf{A}[i] in the subarray from index L to index R (both inclusive) by doing a bitwise OR with the integer X. That is, mathbf{A}[i] = mathbf{A}[i] | X. After performing all M operations, Sam wants to know the final state of the array mathbf{A}. Help him to compute that. Input Format The first line contains two space-separated integers, N (the number of elements in the array) and M (the number of operations). The second line contains N space-separated integers, the initial elements of the array mathbf{A}. The next M lines each contain three space-separated integers, L, R, and X, describing an operation. Constraints 1 leq N, M leq 10^5 0 leq A[i] leq 10^9 for all 0 leq i leq N-1 1 leq L leq R leq N 0 leq X leq 10^9 Output Format Output the final state of the array mathbf{A} on one line, with elements separated by a space. Sample Input 5 3 1 2 3 4 5 1 3 2 2 5 4 1 4 1 Sample Output 3 7 7 5 5 Explanation Operation 1: OR the first three elements with 2: 1 OR 2 = 3, 2 OR 2 = 2, 3 OR 2 = 3, 4, 5 Array after operation: [3, 2, 3, 4, 5] Operation 2: OR the last four elements with 4: 3, 2 OR 4 = 6, 3 OR 4 = 7, 4 OR 4 = 4, 5 OR 4 = 5 Array after operation: [3, 6, 7, 4, 5] Operation 3: OR the first four elements with 1: 3 OR 1 = 3, 6 OR 1 = 7, 7 OR 1 = 7, 4 OR 1 = 5, 5 Array after operation: [3, 7, 7, 5, 5]","solution":"def transform_array(N, M, A, operations): Transforms the array A of length N by performing M operations given in operations. Each operation is represented as a tuple (L, R, X) where every element in the subarray A[L-1:R] is transformed by doing a bitwise OR with the integer X. Arguments: N : int : the number of elements in the array M : int : the number of operations A : list : the initial elements of the array operations : list of tuples : each tuple contains three integers L, R, and X Returns: list : the array after performing all operations for op in operations: L, R, X = op for i in range(L-1, R): A[i] |= X return A"},{"question":"You are a tax collector in a city where people live in a row of houses numbered from 1 to N. Every day you collect taxes from these houses. The tax amount for each house is represented by an array T where T[i] is the tax at the house numbered i. You are required to ensure that the collected tax forms a non-decreasing sequence day by day. If the current day\'s tax collection is not in non-decreasing order, you can increase the tax amount of any house any number of times. However, you cannot decrease any tax amount. Find the minimum number of increments required to ensure the tax collection is in non-decreasing order. For example, given T = [4, 2, 3, 5], you can increase the tax at house 2 by 2 units to get [4, 4, 3, 5], and then increase the tax at house 3 by 1 unit to get [4, 4, 4, 5], which results in a non-decreasing sequence. Function Description Complete the function minIncrements in the editor below. minIncrements has the following parameter(s): - int T[N]: the tax amounts at each house Returns - int: the minimum number of increments required to achieve a non-decreasing sequence Input Format The first line contains an integer N, the number of houses. The second line contains N space-separated integers where the ith integer represents the tax amount of the ith house. Constraints 1 leq N leq 1000 0 leq T[i] leq 1000 Output Format Sample Input 0 4 4 2 3 5 Sample Output 0 3 Explanation 0 The initial tax collection is [4, 2, 3, 5]. By increasing the tax at house 2 by 2 units and increasing the tax at house 3 by 1 unit, the sequence becomes [4, 4, 4, 5], requiring 3 increments in total, making it a non-decreasing sequence. Sample Input 1 5 1 2 3 2 5 Sample Output 1 1 Explanation 1 The initial tax collection is [1, 2, 3, 2, 5]. By increasing the tax at house 4 by 1 unit, the sequence becomes [1, 2, 3, 3, 5], requiring 1 increment in total, making it a non-decreasing sequence.","solution":"def minIncrements(T): Compute the minimum number of increments required to ensure the tax collection is in non-decreasing order. Parameters: T (list): The tax amounts at each house. Returns: int: The minimum number of increments required. increments = 0 for i in range(1, len(T)): if T[i] < T[i-1]: increments += T[i-1] - T[i] T[i] = T[i-1] return increments"},{"question":"Given a binary tree where each node has an additional \\"sibling pointer\\" that connects it to its sibling node at the same level, if it exists. Write a function to connect the sibling pointers for all nodes in the binary tree. Example 1: Input: 1 / 2 3 / / 4 5 6 7 Output: Tree with sibling pointers connected: Node 1: Sibling -> None Node 2: Sibling -> Node 3 Node 3: Sibling -> None Node 4: Sibling -> Node 5 Node 5: Sibling -> Node 6 Node 6: Sibling -> Node 7 Node 7: Sibling -> None Explanation: After connecting sibling pointers the tree is: 1 / 2 - 3 / / 4-5-6-7 Example 2: Input: 10 / 5 15 / 3 20 Output: Tree with sibling pointers connected: Node 10: Sibling -> None Node 5: Sibling -> Node 15 Node 15: Sibling -> None Node 3: Sibling -> None Node 20: Sibling -> None Explanation: After connecting sibling pointers the tree is: 10 / 5 - 15 / 3 20 Your Task: You don\'t need to read input or print anything. Your task is to complete the function connectSiblings() which takes the root of the binary tree as its input and connects the sibling pointers. Expected Time Complexity: O(N), where N is the number of nodes. Expected Auxiliary Space: O(1) Constraints: 1 <= Number of nodes <= 10^{4}","solution":"class Node: def __init__(self, data): self.data = data self.left = None self.right = None self.next_sibling = None def connect_siblings(root): Function to connect sibling pointers for all nodes in the binary tree. if not root: return # Initialize the first node of the current level current = root # Loop through each level while current: # Use a dummy node to handle the level dummy = Node(0) tail = dummy # Traverse the nodes in the current level while current: if current.left: tail.next_sibling = current.left tail = tail.next_sibling if current.right: tail.next_sibling = current.right tail = tail.next_sibling current = current.next_sibling # Move to the first node of the next level current = dummy.next_sibling"},{"question":"Haruto is working on a project involving strings and patterns. He has a large text represented by a string and needs to find how many times a given pattern appears in this text in a non-overlapping manner. You are tasked with writing a program to assist Haruto. -----Input----- The first line contains a single string s (1 leq |s| leq 1,000,000), the main text. The second line contains a single string p (1 leq |p| leq 100), the pattern to search for in the text. Both strings consist of lowercase English letters (\'a\' to \'z\'). -----Output----- Print a single integer — the count of non-overlapping occurrences of the pattern p in the main string s. -----Examples----- Input ababa aba Output 1 Input abcabcabc abc Output 3 -----Explanation----- In the first example, although \'aba\' appears twice in \'ababa\', the appearances overlap, so there is only one non-overlapping occurrence. In the second example, \'abc\' appears three times in \'abcabcabc\' in a non-overlapping manner.","solution":"def count_non_overlapping_occurrences(s, p): Returns the number of non-overlapping occurrences of pattern p in string s. count = 0 i = 0 while i <= len(s) - len(p): if s[i:i + len(p)] == p: count += 1 i += len(p) else: i += 1 return count"},{"question":"Your task is to implement a function that transforms a given string into a sequence of alphanumeric codes based on a simple encryption scheme. For example: ```python encrypt(\\"hello\\") # => \\"8_5_12_12_15\\" encrypt(\\"HELLO\\") # => \\"8_5_12_12_15\\" encrypt(\\"Secure123\\") # => \\"19_5_3_21_18_5_1_2_3\\" encrypt(\\"Python\\") # => \\"16_25_20_8_15_14\\" encrypt(\\"\\") # => \\"\\" encrypt(\\"crypto!\\") # => \\"3_18_25_16_20_15\\" ``` Notes: - The function should be case-insensitive, converting all characters to uppercase. - Each letter from A to Z should be transformed to its position in the alphabet (A=1, B=2, ..., Z=26). - Digits from \'0\' to \'9\' should be retained as is in the resulting string. - Any non-alphanumeric characters should be ignored and omitted in the output. - The result should be a string of numbers concatenated with an underscore (\'_\') as the separator.","solution":"def encrypt(text): Transforms a given string into a sequence of alphanumeric codes based on a simple encryption scheme. Parameters: text (string): The input string to be encrypted. Returns: string: The encrypted string where each letter is replaced with its position in the alphabet, digits are retained, and other characters are ignored. result = [] text = text.upper() for char in text: if char.isalpha(): # Check if character is an alphabet result.append(str(ord(char) - ord(\'A\') + 1)) elif char.isdigit(): # Check if character is a digit result.append(char) return \'_\'.join(result)"},{"question":"Alice and Bob are playing a game with stones of different weights. The stones are represented by an array of integers, where each element signifies the weight of a stone. The game proceeds as follows: 1. In each turn, Alice and Bob pick the two heaviest stones. 2. If their weights are equal, both stones are destroyed. 3. If their weights are different, the stone with the smaller weight is destroyed, and the larger stone\'s weight is reduced by the smaller stone\'s weight. 4. The game continues until all stones are destroyed or only one stone remains. Your task is to determine the weight of the last remaining stone, or if all stones have been destroyed, return 0. Input - An integer n (1 ≤ n ≤ 30) representing the number of stones. - An array of n integers where each integer (si) represents the weight of a stone (1 ≤ si ≤ 1000). Output Print the weight of the last remaining stone or 0 if all stones are destroyed. Examples Input 4 2 7 4 1 Output 0 Input 3 2 7 4 Output 1","solution":"import heapq def last_stone_weight(stones): Determines the weight of the last remaining stone, or if all stones have been destroyed, returns 0. Parameters: stones (List[int]): The list of stones\' weights. Returns: int: The weight of the last remaining stone or 0 if all stones have been destroyed. # Convert stones to max-heap by negating the weights (heapq is a min-heap by default). stones = [-stone for stone in stones] heapq.heapify(stones) while len(stones) > 1: first = -heapq.heappop(stones) # Get the heaviest stone (max element) second = -heapq.heappop(stones) # Get the second heaviest stone if first != second: # If they are not equal, push the difference back onto the heap heapq.heappush(stones, -(first - second)) return -stones[0] if stones else 0"},{"question":"You are given a string of integers separated by commas, for example: ``` s = \\"1,3,2,4,5,6,7,9,8,10\\"; ``` Write a program that calculates the minimum swaps needed to sort the numbers in ascending order. A swap is defined as swapping any two elements in the list. Your program should contain a function `min_swaps_to_sort(s)` which takes the string as input and returns the minimum number of swaps required to sort the numbers. For example, given the input: ``` s = \\"4,3,2,1\\" ``` The function should return: ``` 2 ``` Explanation: Swap (4, 1) and (3, 2). # Notes: - The input string will always contain integers separated by commas with no spaces. - Handle edge cases where the string might be empty (in which case return 0). - Assume that the input string will have maximum length of 1000 characters. Please write the function `min_swaps_to_sort(s)` to solve this problem.","solution":"def min_swaps_to_sort(s): Calculates the minimum number of swaps needed to sort the numbers in ascending order. if not s: return 0 # Convert the string to a list of integers arr = list(map(int, s.split(\',\'))) # Create a list of tuples where each tuple is (value, original_index) paired_arr = list(enumerate(arr)) # Sort the list by the values (second element of each tuple) paired_arr.sort(key=lambda x: x[1]) visited = [False] * len(arr) swaps = 0 for i in range(len(arr)): # If already visited or already in the right position if visited[i] or paired_arr[i][0] == i: continue cycle_size = 0 j = i # Determine the size of the cycle while not visited[j]: visited[j] = True j = paired_arr[j][0] cycle_size += 1 # In a cycle of n nodes, we need (n - 1) swaps to sort the cycle if cycle_size > 1: swaps += cycle_size - 1 return swaps"},{"question":"In a fantasy world, there are mystical flowers of various types. Each type is represented by a unique integer from 1 to 10000. These flowers are arranged in a line, and each flower blooms in turns, from the leftmost to the rightmost until all flowers bloom. The flowers have a peculiar blooming rule: - If a flower blooms and its type is identical to any of its previously bloomed neighbors, it will wither instantly. To save your garden, you have the ability to delay the blooming of a flower by one turn. Determine the minimum number of delay operations required so that no flower withers. Constraints: * 2 leq N leq 100 * 1 leq t_i leq 10000 * All values in input are integers. Input Input is given from Standard Input in the following format: N t_1 t_2 ... t_N Output Print the minimum number of delay operations required. Examples Input 6 3 1 3 1 3 1 Output 0 Input 4 2 2 2 2 Output 3 Input 5 5 5 6 6 5 Output 2 Input 7 1 2 3 4 5 6 7 Output 0","solution":"def min_delays_to_prevent_withering(N, flowers): delays = 0 last_position = {} for i in range(N): if flowers[i] in last_position and last_position[flowers[i]] == i - 1: delays += 1 last_position[flowers[i]] = i return delays # Example usage: # N = int(input()) # flowers = list(map(int, input().split())) # print(min_delays_to_prevent_withering(N, flowers))"},{"question":"In computer graphics, colors are often represented using the RGB color model. Each color in the RGB model can be described by its red, green, and blue components, which are usually integers between 0 and 255 (inclusive). Let\'s write a function that converts an RGB color to a hexadecimal color code. A hexadecimal color code is a 6-digit string, where each pair of digits represents the red, green, and blue components respectively. Each pair is a two-digit hexadecimal number. For example, the RGB color (255, 0, 255) corresponds to the hexadecimal color code \\"#FF00FF\\". Task Write a function `rgb_to_hex` that takes three integer arguments corresponding to the red, green, and blue components (each ranging from 0 to 255) and returns the corresponding hexadecimal color code as a string. # Input: Three integers representing the red, green, and blue components: - `r`: an integer (0 <= r <= 255) - `g`: an integer (0 <= g <= 255) - `b`: an integer (0 <= b <= 255) # Output: A string of the hexadecimal color code in the format \\"#RRGGBB\\". # Example: ```python def rgb_to_hex(r, g, b): # your code here # Example Usage: print(rgb_to_hex(255, 0, 255)) # Output should be \\"#FF00FF\\" print(rgb_to_hex(0, 255, 0)) # Output should be \\"#00FF00\\" print(rgb_to_hex(0, 0, 255)) # Output should be \\"#0000FF\\" print(rgb_to_hex(16, 32, 48)) # Output should be \\"#102030\\" ``` # Notes: - Each component must be converted to a 2-digit hexadecimal number. - Use uppercase letters for hexadecimal digits A-F. - Ensure the output string starts with \\"#\\" and is exactly 7 characters long. Happy coding!","solution":"def rgb_to_hex(r, g, b): Convert an RGB color to a hexadecimal color code. Parameters: - r: Red component (0 <= r <= 255) - g: Green component (0 <= g <= 255) - b: Blue component (0 <= b <= 255) Returns: A string representing the hexadecimal color code in the format \\"#RRGGBB\\". return \\"#{:02X}{:02X}{:02X}\\".format(r, g, b)"},{"question":"A prefix sum of a list is a way of summarizing the data by computing running totals. The `i-th` prefix sum of a list is the sum of all elements from the start to the `i-th` position. Given a list of integers, you are to calculate the prefix sums. Formally, given an array `arr` of length `n`, the prefix sum array should be such that the element at index `i` (0-based) is equal to the sum of all elements from index 0 to `i` in the original array. -----Input----- The first line of the input contains an integer `n` (1 ≤ n ≤ 10^5) representing the number of elements in the array. The second line contains `n` space-separated integers representing the elements of the array `arr` (1 ≤ arr[i] ≤ 1000). -----Output----- Output a single line containing `n` space-separated integers, where the `i-th` integer is the prefix sum at index `i`. -----Examples----- Input 5 1 2 3 4 5 Output 1 3 6 10 15 Input 4 10 20 30 40 Output 10 30 60 100","solution":"def prefix_sum(arr): Returns the prefix sum array of the given list of integers. Parameters: arr (list of int): List of integers. Returns: list of int: A list where each element is the sum of elements from the start to that position in the original array. prefix_sums = [] current_sum = 0 for num in arr: current_sum += num prefix_sums.append(current_sum) return prefix_sums"},{"question":"You are given an array of integers d_1, d_2, ldots, d_n, where each integer can be positive, negative, or zero. In one operation, you can select any single element d_i and change its value to any integer within the range of the minimum and maximum values of the array (inclusive). Your task is to determine the minimum number of operations required to make all the elements of the array equal. Administrative details: -----Input----- The first line contains an integer t (1 le t le 10^3)—the number of test cases. For each test case: - The first line contains an integer n (1 le n le 10^4), the length of the array. - The second line contains n integers d_1, d_2, ldots, d_n (-10^9 le d_i le 10^9), representing the elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 10^4. -----Output----- For each test case, output a single integer—the minimum number of operations required to make all elements in the array equal. -----Example----- Input 3 4 1 3 2 2 3 4 3 3 5 -1 4 -1 4 -1 2 5 5 Output 2 1 4 0 -----Note----- In the first example, you can first change the second element (3) to 2, and then the first element (1) to 2, making all elements equal to 2. Hence, the minimum number of operations is 2. In the second example, you can change the first element (4) to 3, making all elements equal to 3 in just one operation. Therefore, the minimum number of operations is 1. In the third example, you may change the second element (4) to -1, and the fourth element (4) to -1, requiring 4 operations to make all elements equal to -1. In the fourth example, the array is already comprised of equal elements, so no operations are needed. The answer is 0.","solution":"def min_operations_to_equal_elements(t, test_cases): Determine the minimum number of operations required to make all elements in each test case array equal. :param t: Number of test cases :param test_cases: List of test cases where each test case is a tuple containing (n, array) where n is the length of the array and array is the list of integers. :return: List of minimum operations for each test case results = [] for n, array in test_cases: most_common_value = max(set(array), key=array.count) operations = len(array) - array.count(most_common_value) results.append(operations) return results"},{"question":"Given an integer N and a set of pairs of integers representing undirected edges in a graph, determine if it is possible to label the nodes with distinct integers from 1 to N such that each pair of connected nodes have labels that are consecutive integers. Constraints: * 2 ≤ N ≤ 100 * 1 ≤ number of edges ≤ 4950 (i.e., (frac{N(N-1)}{2})) * All provided edges are unique and valid. Input: The input is given from standard input in the following format: N x1 y1 x2 y2 ... xe ye Where ( xi ) and ( yi ) represent the nodes that are connected by an edge. Output: If it\'s possible to label the nodes such that each pair of connected nodes have labels that are consecutive integers, print \\"YES\\" followed by the labeling of the nodes in the format of a space-separated list. If it\'s not possible, print \\"NO\\". Examples Input: 3 1 2 2 3 Output: YES 1 2 3 Input: 4 1 2 2 3 3 4 1 3 Output: NO","solution":"def is_possible_labeling(N, edges): from collections import defaultdict, deque graph = defaultdict(list) for x, y in edges: graph[x].append(y) graph[y].append(x) def bfs(node): label = [0] * (N + 1) queue = deque([node]) label[node] = 1 while queue: current = queue.popleft() current_label = label[current] for neighbor in graph[current]: if label[neighbor] == 0: label[neighbor] = current_label + 1 queue.append(neighbor) elif abs(label[neighbor] - current_label) != 1: return False # Not consecutive return label[1:N+1] result_label = None for i in range(1, N + 1): if i in graph: result_label = bfs(i) break if not result_label: return \\"NO\\" return \\"YESn\\" + \' \'.join(map(str, result_label)) if result_label else \\"NO\\" def main(): import sys input = sys.stdin.read data = input().strip().split() N = int(data[0]) edges = [] for i in range(1, len(data), 2): x, y = int(data[i]), int(data[i+1]) edges.append((x, y)) result = is_possible_labeling(N, edges) print(result) # main function will be called in the actual execution environment"},{"question":"Ingrid loves playing with binary numbers and bitwise operations. One day she came across an interesting problem and decided to solve it. Given a binary number, she wants to determine the largest binary number that can be obtained by performing exactly one of the following operations: 1. Flip exactly one bit, changing a \'0\' to \'1\' or a \'1\' to \'0\'. 2. Swap exactly two different bits. Given a binary number as a string, you need to help Ingrid find the largest binary number possible by performing exactly one of the above operations. Note that Ingrid loves big numbers, so in case of multiple results with the same value, return the lexicographically largest one. Input: The first line contains an integer T, the number of test cases. Each of the next T lines contains a binary string. Output: For each test case, output the largest binary number possible by performing one of the allowed operations. Constraints: 1 ≤ T ≤ 10 1 ≤ length of binary string ≤ 100000 Sample Input: 3 101 0110 101010 Sample Output: 111 1110 111010","solution":"def largest_binary_after_operation(binary_str): Returns the largest binary number possible by performing exactly one of the allowed operations. Operations allowed: 1. Flip exactly one bit, changing a \'0\' to \'1\' or a \'1\' to \'0\'. 2. Swap exactly two different bits. n = len(binary_str) # Convert string to list of characters to easily manipulate bits binary_list = list(binary_str) # Find the largest result by flipping one bit flipped_results = [] for i in range(n): flipped_result = binary_list[:] flipped_result[i] = \'1\' if binary_list[i] == \'0\' else \'0\' flipped_results.append(\'\'.join(flipped_result)) # Find the largest result by swapping two bits swapped_results = [] for i in range(n): for j in range(i + 1, n): swapped_result = binary_list[:] swapped_result[i], swapped_result[j] = swapped_result[j], swapped_result[i] swapped_results.append(\'\'.join(swapped_result)) # Find the lexicographically largest result from all possible results all_results = flipped_results + swapped_results return max(all_results) def process_test_cases(test_cases): results = [] for binary_str in test_cases: results.append(largest_binary_after_operation(binary_str)) return results # For processing input/output def main(): import sys input = sys.stdin.read data = input().strip().split() T = int(data[0]) test_cases = data[1:T + 1] results = process_test_cases(test_cases) for result in results: print(result) # For testing only if __name__ == \\"__main__\\": main()"},{"question":"Maria is organizing a treasure hunt game for her friends. She has hidden a sequence of n clues, numbered from 1 to n, each one leading to the next. To make the game more interesting, Maria wants to leave hints such that each hint is the sum of the numbers of a unique pair of clues (i, j) where 1 ≤ i < j ≤ n. Maria needs your help to determine if a given integer k can be the sum of numbers of any pair of clues. If so, she wants to know all possible pairs (i, j) that satisfy this condition. If multiple pairs exist, you can output any of them. -----Input----- The first line contains two integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ 2000), where n is the number of clues and k is the target sum. -----Output----- The first line must contain a single integer p, representing the number of pairs (i, j) such that the sum of the numbers of clues in each pair is k. Each of the next p lines must contain two integers — the numbers of the clues in the current pair. If there are no such pairs, the first line must contain a single integer 0. -----Examples----- Input 5 5 Output 2 1 4 2 3 Input 4 7 Output 2 3 4 2 5 Input 6 10 Output 1 4 6","solution":"def find_pairs(n, k): Finds all pairs (i, j) such that 1 ≤ i < j ≤ n and i + j = k. Returns the number of such pairs and the pairs themselves. pairs = [] for i in range(1, n): j = k - i if i < j <= n: pairs.append((i, j)) return pairs def format_output(pairs): Formats the output as specified. p = len(pairs) output = [f\\"{p}\\"] output.extend(f\\"{i} {j}\\" for i, j in pairs) return \\"n\\".join(output) def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) k = int(data[1]) pairs = find_pairs(n, k) sys.stdout.write(format_output(pairs) + \\"n\\") if __name__ == \\"__main__\\": main()"},{"question":"Example Input 5 10 23 14 5 17 9 8 25 13 2 6 4 11 20 3 12 Output 7","solution":"def max_remaining_balance(m, a, b): Returns the maximum amount of remaining money after buying either flavor a or b. Parameters: m (int): Total amount of money. a (int): Price of the first flavor. b (int): Price of the second flavor. Returns: int: Maximum remaining balance. if m >= a and m >= b: return max(m - a, m - b) elif m >= a: return m - a elif m >= b: return m - b return m"},{"question":"You are given a string containing a sequence of words separated by spaces. Write a function to return the length of the longest word in the string. If the string is empty, the function should return 0.","solution":"def length_of_longest_word(s): Returns the length of the longest word in the string. If the string is empty, returns 0. if not s.strip(): return 0 words = s.split() longest_word_length = max(len(word) for word in words) return longest_word_length"},{"question":"You are the manager of a large distribution center and responsible for managing the daily operations of goods outflows. Every day, you receive a list of outgoing shipments, where each shipment is identified by an integer identifier. As part of the daily routine, you need to ensure that the outgoing shipment process is smooth and optimized. Specifically, you want to ensure that all identical shipments are grouped together, so you can easily consolidate the shipments and minimize the handling cost. To achieve this, you need to sort the list of shipment identifiers such that all identical shipments appear consecutively. After sorting, you will then count the number of unique shipments and for each unique shipment, provide the count of how many times it appears in the sorted list. Your task is to implement a program that reads the list of shipment identifiers, sorts them, and then outputs the number of unique shipments along with the count of each unique shipment. -----Input----- - The input starts with an integer 1 leq n leq 10^5, the number of shipments. - Then follows n integers 0 leq x_i < 10^7, the identifiers of the shipments. -----Output----- The output consists of: - An integer u, the number of unique shipments. - u lines, each with an integer v, the identifier of the shipment, followed by its count c, which is the number of times the identifier appears in the sorted list. In case there are multiple solutions, any of them will be accepted. -----Examples----- Sample Input: 7 4 3 2 4 2 3 1 Sample Output: 4 1 1 2 2 3 2 4 2","solution":"def count_unique_shipments(n, shipment_identifiers): This function sorts the shipment identifiers and returns the count of unique shipments along with the counts of each shipment identifier. Args: n - Number of shipments shipment_identifiers - List of shipment identifiers Returns: Tuple containing: - an integer which is the number of unique shipments - a list of tuples, where each tuple contains an integer identifier and its count from collections import Counter shipment_identifiers.sort() counter = Counter(shipment_identifiers) unique_shipments_count = len(counter) result = [(identifier, count) for identifier, count in counter.items()] return unique_shipments_count, result"},{"question":"Write a program that reads a list of students\' scores and then calculates the average score for each student and determines their corresponding grades based on the average. The input consists of names and scores in the format specified below. If a student has no scores, their average should be displayed as 0 and their grade as \\"F\\". Grading scale: ``` A: 90-100 B: 80-89 C: 70-79 D: 60-69 F: 0-59 ``` Input Multiple lines of data are given. Each line contains a student\'s name followed by their scores separated by spaces. The number of scores can vary for each student. No input line will exceed 100 characters. Output Output each student\'s name, average score, and grade on a new line. Example Input John 85 90 78 Lucy 100 95 90 89 91 Mark Alice 70 68 72 65 Henry 88 92 81 75 Output John 84.33 B Lucy 93.0 A Mark 0.0 F Alice 68.75 D Henry 81.5 B","solution":"def calculate_average_and_grade(data): Calculates the average and grade for each student. Parameters: data (list of str): Input data where each element is a string containing a student\'s name followed by their scores. Returns: list of str: List containing results, each formatted as \\"name average grade\\". results = [] for entry in data: parts = entry.split() name = parts[0] scores = list(map(int, parts[1:])) if scores: average = sum(scores) / len(scores) else: average = 0.0 if average >= 90: grade = \'A\' elif average >= 80: grade = \'B\' elif average >= 70: grade = \'C\' elif average >= 60: grade = \'D\' else: grade = \'F\' results.append(f\\"{name} {average:.2f} {grade}\\") return results # Example usage: data_input = [ \\"John 85 90 78\\", \\"Lucy 100 95 90 89 91\\", \\"Mark\\", \\"Alice 70 68 72 65\\", \\"Henry 88 92 81 75\\" ] for result in calculate_average_and_grade(data_input): print(result)"},{"question":"The ancient city of Fibonacci has an annual ritual where its inhabitants construct a tower using rectangular blocks of different dimensions. The city has a rule that they must use exactly `n` blocks and the length and width of each block must be a Fibonacci number. A Fibonacci number is a number in the sequence `0, 1, 1, 2, 3, 5, 8, 13, 21, ...`, where each number is the sum of the two preceding ones. The sequence starts from `0` and `1`. To build the tower, they stack blocks one on top of another with the following rules: 1. You can only stack a block on top of another if the block below is of equal or greater length and width. 2. Each block must have distinct dimensions from every other block used in the tower. 3. The blocks must be used in a way that maximizes the height of the tower. Write a program that, given `n` and the list of available Fibonacci numbers, computes the maximum possible number of blocks that can be stacked following the rules. **Input:** - A single integer `n` (1 ≤ n ≤ 10^2) - the number of blocks. - A list of `m` integers, each representing a Fibonacci number (1 ≤ m ≤ 50, and each number is between 1 and 10^6) which are the dimensions available for the blocks. **Output:** - A single integer representing the maximum height of the tower. *Example Input:* ``` 5 1 2 3 5 8 13 ``` *Example Output:* ``` 4 ``` *Explanation:* - The maximum height can be obtained by selecting blocks of dimensions (1,1), (2,2), (3,3), and (5,5), stacked in that order, resulting in a height of 4.","solution":"def max_tower_height(n, fib_numbers): Computes the maximum possible number of blocks that can be stacked based on the given rules. Parameters: n (int): number of blocks to use. fib_numbers (list of int): list of available Fibonacci numbers as dimensions. Returns: int: the maximum number of blocks that can be stacked. fib_numbers = sorted(set(fib_numbers)) # Ensure unique and sorted dimensions # Since blocks must have distinct dimensions, let\'s take the min of n and len(fib_numbers) return min(n, len(fib_numbers))"},{"question":"Sarah is working on a system to help organize company logs. Each log entry consists of a unique identifier and a string of words. The system needs to be able to sort these log entries. Sarah wants you to write a program that will sort the logs according to the following rules: 1. All log entries that consist entirely of words should come before all log entries that consist of numbers. 2. Log entries that consist of words should be sorted lexicographically by the contents of the log (excluding identifiers), and then by the identifier if the contents are the same. 3. Log entries that consist of numbers should maintain their relative ordering. -----Input:----- - First-line will contain T, the number of test cases. Then the test cases follow. - Each test case starts with a single integer N, the number of log entries. - The next N lines each contain a log entry with a unique identifier and a string of words or numbers. -----Output:----- For each test case, output the sorted log entries, maintaining the original identifier and numbers as per the rules. -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 100 - The log identifier and words are composed of only printable ASCII characters. The identifier is followed by a single space and then the log content. -----Sample Input:----- 1 5 a1 9 2 3 1 g1 Act car zo4 4 7 ab1 off KEY dog a8 act zoo -----Sample Output:----- g1 Act car a8 act zoo ab1 off KEY dog a1 9 2 3 1 zo4 4 7","solution":"def sort_logs(logs): Sort the given log entries according to the specified rules. def log_key(log): identifier, rest = log.split(\' \', 1) return (0, rest.lower(), identifier) if rest[0].isalpha() else (1,) return sorted(logs, key=log_key) def process_input(T, test_cases): results = [] for i in range(T): N, logs = test_cases[i] sorted_logs = sort_logs(logs) results.append(sorted_logs) return results"},{"question":"Given a string containing characters from only \'a\' to \'z\', find the length of the longest substring with all distinct characters. Example 1: Input: s = \\"abcabcbb\\" Output: 3 Explanation: The longest substring with all distinct characters is \\"abc\\", with length 3. Example 2: Input: s = \\"bbbbb\\" Output: 1 Explanation: The longest substring with all distinct characters is \\"b\\", with length 1. Example 3: Input: s = \\"pwwkew\\" Output: 3 Explanation: The longest substring with all distinct characters is \\"wke\\", with length 3. Note that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring. Example 4: Input: s = \\"\\" Output: 0 Explanation: The input string is empty, so the longest substring with all distinct characters is also of length 0. Constraints: - 0 <= s.length <= 1000 - s consists of English letters.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring with all distinct characters. char_set = set() left = 0 max_length = 0 for right in range(len(s)): while s[right] in char_set: char_set.remove(s[left]) left += 1 char_set.add(s[right]) max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are given an array A of N integers. You can perform the following operation any number of times (including zero times): Choose any two indices i and j (1 ≤ i, j ≤ N, i ≠ j) and replace A_{i} with gcd(A_{i}, A_{j}), where gcd(a, b) is the greatest common divisor of a and b. Determine the maximum possible GCD of the array after performing any number of operations. ------ Input Format ------ - The first line contains an integer T denoting the number of test cases. The T test cases then follow. - The first line of each test case contains an integer N - the size of the array. - The second line of each test case contains N space-separated integers A_{1}, A_{2}, dots, A_{N}. ------ Output Format ------ For each test case, output the maximum possible GCD of the array after performing any number of operations. ------ Constraints ------ 1 ≤ T ≤ 100 2 ≤ N ≤ 1000 1 ≤ A_{i} ≤ 10^{5} ----- Sample Input 1 ------ 2 3 2 4 8 4 3 9 27 81 ----- Sample Output 1 ------ 2 3 ----- Explanation 1 ------ - Test case 1: The maximum GCD that can be achieved by performing some finite number of operations on the given array is 2. For instance, perform the operation on the entire array using indices 1, 2, 3, such that every element becomes gcd(2, 4, 8) = 2. - Test case 2: The maximum GCD that can be achieved by performing some finite number of operations on the given array is 3. For instance, perform the operation on the entire array using indices 1, 2, 3, 4, such that every element becomes gcd(3, 9, 27, 81) = 3.","solution":"from math import gcd from functools import reduce def max_gcd_of_array(T, test_cases): def gcd_of_list(numbers): return reduce(gcd, numbers) results = [] for i in range(T): N = test_cases[i][0] A = test_cases[i][1] results.append(gcd_of_list(A)) return results # Example usage: T = 2 test_cases = [(3, [2, 4, 8]), (4, [3, 9, 27, 81])] print(max_gcd_of_array(T, test_cases)) # Output: [2, 3]"},{"question":"In a certain strange library, the book arrangement is particularly odd. Instead of organizing books by genre or author, the books are arranged in random order. However, each book has a unique identification number, which is a positive integer. The librarian wants to sort the books into non-decreasing order, using a very specific method described below. The librarian can use a sorting machine which performs the following operation: 1. Given an index i (1 ≤ i < n), if the book at position i is greater than the book at position i+1, the machine can swap these two books. The task is to determine the minimum number of such swap operations required to sort the books in non-decreasing order. Input The first line contains an integer n (1 ≤ n ≤ 5·10^5) — the number of books. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the identification numbers of the books. Output Output a single integer — the minimum number of swap operations required to sort the books in non-decreasing order. Examples Input 5 4 3 2 1 5 Output 6 Input 4 1 3 2 4 Output 1 Input 3 3 2 1 Output 3","solution":"def minimum_swaps_to_sort(books): Returns the minimum number of swaps required to sort the books in non-decreasing order. n = len(books) swaps = 0 swapped = True # Perform Bubble Sort and count swaps while swapped: swapped = False for i in range(n - 1): if books[i] > books[i + 1]: books[i], books[i + 1] = books[i + 1], books[i] swaps += 1 swapped = True return swaps"},{"question":"The Great Cookie Company has recently started an employee recognition program. To ensure that their employees are appropriately rewarded, the company keeps track of each employee\'s daily performance score. The score is calculated based on various parameters, and at the end of each day, the performance scores are stored in a database. The company wants to identify the employees with the highest performance scores over a given period. They need a program that can help them find the maximum score for each query period. **Input:** The input consists of multiple test cases. The first line contains an integer N, the number of employees (1 le N le 1000). Each of the following N lines contains the integer T, the number of days the score is recorded for the employee (1 le T le 100), followed by T space-separated integers representing the daily performance scores for the employee. The next line contains a positive integer Q denoting the number of queries (1 le Q le 1000). Each of the following Q lines contains two integers A and B representing the range of days (inclusive) for which the company wants to find the maximum score for each employee (1 le A le B le T). **Output:** For each query, print N integers on a single line, where each integer is the maximum performance score of the respective employee within the given range of days. **Examples:** ``` Sample Input: 2 5 10 5 8 6 7 5 3 6 2 9 1 3 1 3 2 4 1 5 Sample Output: 10 8 8 7 10 9 ``` Explanation: - For the first query (1 3): The maximum performance score from day 1 to day 3 for each employee is [10, 8]. - For the second query (2 4): The maximum performance score from day 2 to day 4 for each employee is [8, 7]. - For the third query (1 5): The maximum performance score from day 1 to day 5 for each employee is [10, 9].","solution":"def find_max_scores(employee_scores, queries): Finds the maximum performance scores for each employee within given query ranges. Args: employee_scores: A list of lists, where each inner list contains daily performance scores of an employee. queries: A list of tuples, where each tuple contains two integers (A, B) representing the range of days. Returns: A list of lists, where each inner list contains the maximum scores for each employee for the corresponding query. results = [] for A, B in queries: max_scores = [max(scores[A-1:B]) for scores in employee_scores] results.append(max_scores) return results # Parse input def main(): import sys input = sys.stdin.read data = input().split() index = 0 N = int(data[index]) index += 1 employee_scores = [] for _ in range(N): T = int(data[index]) scores = list(map(int, data[index+1:index+1+T])) employee_scores.append(scores) index += 1 + T Q = int(data[index]) index += 1 queries = [] for _ in range(Q): A = int(data[index]) B = int(data[index+1]) queries.append((A, B)) index += 2 results = find_max_scores(employee_scores, queries) for result in results: print(\\" \\".join(map(str, result))) if __name__ == \\"__main__\\": main()"},{"question":"A tech company has released a new communication platform where each user can send a message to another user with specific content. They want to implement a feature where users can tag each other in their messages. When a user is tagged, they should be notified regardless of the message recipient. To achieve this, you need to write a program that processes a given list of messages and identifies the users who have been tagged in any message. A message is defined by a tuple (sender, recipient, content), where: - sender is the ID of the user who sends the message. - recipient is the ID of the user who receives the message. - content is a string representing the message content. A tag in the content is denoted by \\"@userID\\", where userID is the ID of the tagged user, which is a number. Your task is to output a list of user IDs who have been tagged in any of the messages, in ascending order. Note: User IDs are positive integers. -----Input----- The first line of input contains one integer M — the number of messages. Each of the next M lines contains one message described by three parts: - The first part is the sender ID. - The second part is the recipient ID. - The third part is the content of the message, which may include tags in the format “@userID”. -----Output----- Output a list of space-separated integers in ascending order — the IDs of users who have been tagged in any message. -----Constraints----- - 1 ≤ M ≤ 104 - 1 ≤ sender, recipient, userID ≤ 104 - The length of the content will not exceed 1000 characters. - Each tag in the content will be of the form \\"@userID\\" with no spaces between \\"@\\" and \\"userID\\". -----Example----- Input: 5 1 2 \\"Hello @3, how are you?\\" 2 3 \\"Hey @1, check this out @4.\\" 3 1 \\"@2 can you review this?\\" 4 2 \\"Thank you, @3!\\" 2 2 \\"Meeting @4 and @1 today.\\" Output: 1 2 3 4 -----Explanation----- In the first message, user 3 is tagged. In the second message, users 1 and 4 are tagged. In the third message, user 2 is tagged. In the fourth message, user 3 is tagged. In the fifth message, users 4 and 1 are tagged. The unique, sorted list of tagged users is [1, 2, 3, 4].","solution":"import re def find_tagged_users(messages): Given a list of messages, identify and return a sorted list of user IDs who have been tagged in any of the messages. :param messages: List of tuples (sender, recipient, content) :return: List of unique user IDs who have been tagged, in ascending order tagged_users = set() tag_pattern = re.compile(r\'@(d+)\') for message in messages: content = message[2] tags_in_content = tag_pattern.findall(content) tagged_users.update(map(int, tags_in_content)) return sorted(tagged_users)"},{"question":"Alice is a passionate gardener and plans to plant a new garden. However, she faces a challenge in planting the trees in a specific pattern. She wishes to plant trees such that the height of each tree in the garden forms a strictly increasing sequence. Alice needs your help to determine the maximum number of trees she can plant with the given list of available tree heights. Given the heights of the trees, find the length of the longest strictly increasing subsequence. Input Format First line contains mathbf{T}, the number of testcases. This is followed by mathbf{T} testcases each consisting of: - An integer N representing the number of trees. - A line with N integers representing the heights of the trees. Output Format For each testcase, print the maximum number of trees that can be planted in a strictly increasing sequence in one line. Constraints 1 leq T leq 100 1 leq N leq 10^5 1 leq height leq 10^9 Sample Input 2 5 3 10 2 1 20 6 3 4 5 10 6 7 Sample Output 3 5 Explanation For the first testcase, the longest strictly increasing subsequence is [3, 10, 20]. For the second testcase, the longest strictly increasing subsequence is [3, 4, 5, 6, 7].","solution":"import bisect def length_of_lis(heights): Function to find the length of the longest increasing subsequence (LIS). Uses a dynamic programming approach with binary search for optimization. if not heights: return 0 dp = [] for height in heights: pos = bisect.bisect_left(dp, height) if pos == len(dp): dp.append(height) else: dp[pos] = height return len(dp) def find_max_trees(t, test_cases): Process each test case and compute the maximum number of trees that can be planted in a strictly increasing sequence. results = [] for i in range(t): n = test_cases[i][0] heights = test_cases[i][1] results.append(length_of_lis(heights)) return results"},{"question":"In a kingdom far away, a dragon named Drakos guards a hidden treasure. The treasure is locked inside a magical chest that can only be opened by solving a sequence puzzle. The sequence puzzle works as follows: Given a list of integers, the chest will only open if you can rearrange the sequence such that the sum of every pair of adjacent numbers is even. Write a function to determine if it is possible to rearrange the sequence such that the sum of every pair of adjacent numbers is even. Input The input consists of multiple test cases. Each test case starts with an integer `n` (2 ≤ n ≤ 100), the number of elements in the sequence. The next line contains `n` integers, the elements of the sequence. The end of input is indicated by a line containing a single zero. Output For each test case, output \\"Possible\\" if the sequence can be rearranged to satisfy the condition, and \\"Not Possible\\" otherwise. Sample Input ``` 4 2 4 6 8 5 1 2 3 4 5 3 1 3 5 0 ``` Sample Output ``` Possible Not Possible Not Possible ``` Example explanation: 1. For the first sequence [2, 4, 6, 8], the sum of every pair of adjacent numbers can be made even by any permutation, so the output is \\"Possible\\". 2. For the second sequence [1, 2, 3, 4, 5], no permutation can satisfy the condition, so the output is \\"Not Possible\\". 3. For the third sequence [1, 3, 5], the sum of every pair of adjacent numbers will always be odd, so the output is \\"Not Possible\\".","solution":"def can_rearrange_to_even_sum_pairs(n, sequence): Determines if it is possible to rearrange the sequence such that the sum of every pair of adjacent numbers is even. if n == 0: return [] # Count the number of even and odd numbers even_count = sum(1 for x in sequence if x % 2 == 0) odd_count = n - even_count # The condition for a re-arrangement to achieve only even sums of adjacent pairs is: # we must have either 0 odd numbers (can pair even numbers) or even number of odd numbers # to be able to pair them together. if odd_count == 0 or odd_count % 2 == 0: return \\"Possible\\" else: return \\"Not Possible\\" def solve(inputs): results = [] index = 0 while index < len(inputs): n = int(inputs[index]) if n == 0: break sequence = list(map(int, inputs[index + 1].split())) results.append(can_rearrange_to_even_sum_pairs(n, sequence)) index += 2 return results"},{"question":"Task Write a function `merge_strings(str1, str2)` that merges two input strings by alternating their characters. If one string is longer than the other, append the remaining characters from the longer string to the end of the merged result. Rules: - `str1` and `str2` are the input strings consisting of lowercase alphabetical characters. - Return the merged string as the result. Example: ``` merge_strings(\\"abc\\", \\"defgh\\") Output: \\"adbecfgh\\" merge_strings(\\"hello\\", \\"world\\") Output: \\"hweolrllod\\" merge_strings(\\"short\\", \\"longerstring\\") Output: \\"slhoorntegrsrttring\\" merge_strings(\\"abc\\", \\"xyz\\") Output: \\"axbycz\\" ``` Constraints: - Assume that the maximum length of `str1` and `str2` is reasonably small, i.e., up to 1000 characters long.","solution":"def merge_strings(str1, str2): Merges two input strings by alternating their characters. If one string is longer than the other, append the remaining characters from the longer string to the end of the merged result. merged = [] min_length = min(len(str1), len(str2)) # Alternate characters from both strings for i in range(min_length): merged.append(str1[i]) merged.append(str2[i]) # Append remaining characters from the longer string if len(str1) > len(str2): merged.append(str1[min_length:]) else: merged.append(str2[min_length:]) return \'\'.join(merged)"},{"question":"You are working on a data processing system for a library and need to implement a borrowing system that can handle multiple book requests from multiple students. Each student has a unique identity and makes requests for specific books at different times. The library has limited copies of each book, which means not all requests can be fulfilled immediately. The goal is to process requests based on a fairness principle: the students\' book requests are satisfied in the order they were received. The library operates with these rules: 1. Each book has a fixed number of copies. 2. Students can borrow multiple books, but only one copy of each book. 3. If a book is unavailable when requested, the student waits until it\'s returned. 4. When a book is returned, it is processed based on the earliest pending request. # Implement a function `manage_requests`: Your function should manage the borrowing requests and return order based on the above rules. # Input - An integer `n` representing the number of different books in the library. - An integer `m` representing the number of requests. - A list `copies` of length `n` where `copies[i]` is the number of copies of book `i+1`. - A list of tuples `requests` of length `m`, where each tuple consists of: - A string `student_id` representing the ID of the student. - An integer `book_id` representing the ID of the book. - A string `type`, which can either be `\\"borrow\\"` or `\\"return\\"` to specify whether the student is requesting to borrow or return the book. - An integer `time` representing the time at which the request was made. # Output - A list of tuples representing the status after all requests are processed in order: - Each tuple contains: - `student_id` - `book_id` - A string `\\"borrowed\\"` or `\\"returned\\"` indicating the status of the request. # Example Input ```python n = 3 m = 7 copies = [2, 1, 1] requests = [ (\\"s1\\", 1, \\"borrow\\", 1), (\\"s2\\", 1, \\"borrow\\", 2), (\\"s3\\", 2, \\"borrow\\", 3), (\\"s4\\", 1, \\"borrow\\", 4), (\\"s2\\", 1, \\"return\\", 5), (\\"s4\\", 1, \\"borrow\\", 6), (\\"s3\\", 2, \\"return\\", 7) ] ``` Output ```python [ (\\"s1\\", 1, \\"borrowed\\"), (\\"s2\\", 1, \\"borrowed\\"), (\\"s3\\", 2, \\"borrowed\\"), (\\"s2\\", 1, \\"returned\\"), (\\"s4\\", 1, \\"borrowed\\"), (\\"s3\\", 2, \\"returned\\") ] ``` # Note In the above example: 1. `s1` and `s2` successfully borrow book 1 as there are 2 copies available. 2. `s3` successfully borrows book 2 as there is 1 copy available. 3. `s4` has to wait until `s2` returns book 1 to borrow it. 4. Once `s2` returns book 1, `s4` borrows it because that request was pending. 5. `s3` returns book 2 completing the process.","solution":"from collections import deque, defaultdict def manage_requests(n, m, copies, requests): # Dictionary to keep track of available copies of each book available_copies = {i+1: copies[i] for i in range(n)} # Dictionary to keep track of pending requests for each book pending_requests = {i+1: deque() for i in range(n)} # Dictionary to keep track of which book is borrowed by which student borrowed_books = defaultdict(set) result = [] for student_id, book_id, req_type, time in requests: if req_type == \\"borrow\\": # Check if the book is available if available_copies[book_id] > 0: # Book is available, student can borrow it available_copies[book_id] -= 1 borrowed_books[student_id].add(book_id) result.append((student_id, book_id, \\"borrowed\\")) else: # Book is not available, add request to pending queue pending_requests[book_id].append((student_id, time)) elif req_type == \\"return\\": # Process the return if book_id in borrowed_books[student_id]: borrowed_books[student_id].remove(book_id) result.append((student_id, book_id, \\"returned\\")) available_copies[book_id] += 1 # Check if there are any pending requests for this book if pending_requests[book_id]: # Fulfill the earliest pending request pending_student_id, pending_time = pending_requests[book_id].popleft() available_copies[book_id] -= 1 borrowed_books[pending_student_id].add(book_id) result.append((pending_student_id, book_id, \\"borrowed\\")) return result"},{"question":"You are given a tree with N nodes, rooted at node 1. Each node has a value assigned to it. You need to handle Q queries. There are three types of queries: 1. \\"ADD x y\\": Increase the value of node x by y. 2. \\"SET x y\\": Set the value of node x to y. 3. \\"SUM x\\": Output the sum of the values of all nodes in the subtree rooted at node x. Each node is connected to its parent by an edge, and the nodes form a connected acyclic graph. -----Input----- The first line of input contains the integer N (1 leq N leq 100000), the number of nodes in the tree. The second line of input contains N integers separated by space, the initial values of the nodes. Each of the following N-1 lines contains two integers u and v which describe an edge between nodes u and v. The following line contains the integer Q (1 leq Q leq 100000). The next Q lines contain one of the three types of queries as described above. -----Output----- The output must consist of the answers to the \\"SUM\\" queries, each in its own line. -----Examples----- Sample Input: 5 1 2 3 4 5 1 2 1 3 3 4 3 5 3 SUM 3 ADD 3 2 SUM 3 Sample Output: 12 14","solution":"from collections import defaultdict class Tree: def __init__(self, N, values): self.N = N self.values = values self.children = defaultdict(list) self.subtree_sums = [0] * (N + 1) def add_edge(self, u, v): self.children[u].append(v) self.children[v].append(u) def update_subtree_sums(self, node, parent): self.subtree_sums[node] = self.values[node - 1] for child in self.children[node]: if child != parent: self.update_subtree_sums(child, node) self.subtree_sums[node] += self.subtree_sums[child] def add_to_node(self, x, y): self.values[x - 1] += y self.update_subtree_sums(1, -1) def set_node_value(self, x, y): self.values[x - 1] = y self.update_subtree_sums(1, -1) def sum_subtree(self, x): return self.subtree_sums[x] def process_tree_queries(N, values, edges, queries): tree = Tree(N, values) for u, v in edges: tree.add_edge(u, v) # initialize subtree sums tree.update_subtree_sums(1, -1) results = [] for query in queries: parts = query.split() q_type = parts[0] x = int(parts[1]) if q_type == \\"SUM\\": results.append(tree.sum_subtree(x)) elif q_type == \\"ADD\\": y = int(parts[2]) tree.add_to_node(x, y) elif q_type == \\"SET\\": y = int(parts[2]) tree.set_node_value(x, y) return results N = 5 values = [1, 2, 3, 4, 5] edges = [(1, 2), (1, 3), (3, 4), (3, 5)] queries = [\\"SUM 3\\", \\"ADD 3 2\\", \\"SUM 3\\"] print(process_tree_queries(N, values, edges, queries)) # Output: [12, 14]"},{"question":"Problem A company has N employees, and each employee has a unique ID from 1 to N . Each employee can have multiple subordinates but only one direct manager (except the CEO, who has no manager). You are given the hierarchy as a list of N-1 pairs (a, b), where a is the manager of b. The CEO\'s ID is always 1. You are required to find the maximum depth of the hierarchy tree and the number of employees at that maximum depth. The depth of a node is the number of edges from the node to the root of the tree. The root node (CEO) has a depth of 0. Constraints The input satisfies the following conditions: * 1 leq N leq 10^5 * Each employee (except the CEO) has exactly one manager. * Each manager has at most N-1 subordinates. * All inputs given are integers. Input The input is given in the following format: N a_1 b_1 a_2 b_2 ... a_{N-1} b_{N-1} Output Print the maximum depth of the hierarchy tree and the number of employees at that depth on a single line separated by a space. Examples Input 7 1 2 1 3 2 4 2 5 3 6 3 7 Output 2 4 Input 4 1 2 1 3 2 4 Output 2 1 Input 5 1 2 1 3 2 4 4 5 Output 3 1","solution":"from collections import deque, defaultdict def find_max_depth_and_count(N, hierarchy): # Create a graph of managers and subordinates tree = defaultdict(list) for manager, subordinate in hierarchy: tree[manager].append(subordinate) # Initialize queue for BFS queue = deque([(1, 0)]) # (current_node, current_depth) max_depth = 0 depth_count = defaultdict(int) while queue: node, depth = queue.popleft() # Track the maximum depth and count number of nodes at each depth if depth > max_depth: max_depth = depth depth_count[depth] += 1 for child in tree[node]: queue.append((child, depth + 1)) print(f\\"{max_depth} {depth_count[max_depth]}\\")"},{"question":"-----Input----- You are given a list of integers that represents daily temperatures over a certain period. You need to determine, for each day, how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, you should return 0 for that day. -----Output----- Output should be a list, where each element at index i is the number of days you have to wait until a warmer temperature. If no such day exists, the element should be 0. -----Constraints----- 1 ≤ length of the list ≤ 10^5 0 ≤ temperature ≤ 100 -----Example----- Input: [73, 74, 75, 71, 69, 72, 76, 73] Output: [1, 1, 4, 2, 1, 1, 0, 0] Explanation: For the given list of temperatures, a warmer day exists after: - 1 day for 73 - 1 day for 74 - 4 days for 75 - 2 days for 71 - 1 day for 69 - 1 day for 72 - No warmer day for 76 - No warmer day for 73","solution":"def daily_temperatures(T): Given a list of daily temperatures T, returns a list of days you would have to wait until a warmer temperature. n = len(T) result = [0] * n stack = [] for i in range(n): while stack and T[i] > T[stack[-1]]: prev_index = stack.pop() result[prev_index] = i - prev_index stack.append(i) return result"},{"question":"# Task Your task is to create a `VendingMachine` class to simulate a basic vending machine. It should have properties and methods to manage items, process purchases, and handle restocking. The vending machine should be initialized with a dictionary containing item names and their corresponding prices and quantities. For example: ```python items = { \\"chips\\": {\\"price\\": 1.5, \\"quantity\\": 10}, \\"chocolate\\": {\\"price\\": 2, \\"quantity\\": 5}, \\"soda\\": {\\"price\\": 1.75, \\"quantity\\": 8} } vm = VendingMachine(items) ``` Implement the following methods: 1. **`display_items()`**: Return a string representation of the items with their prices and quantities. The format should be: ``` Item: chips, Price: 1.50, Quantity: 10 Item: chocolate, Price: 2.00, Quantity: 5 Item: soda, Price: 1.75, Quantity: 8 ``` 2. **`purchase_item(item_name, money)`**: Attempt to purchase an item. If the item exists and there is enough quantity and money, reduce the quantity by 1 and return the change (money paid minus price of the item). If the item does not exist or there is insufficient quantity or money, return a suitable error message. 3. **`restock_item(item_name, quantity)`**: Add the specified quantity to the item. If the item does not exist, return a suitable error message. This should be for restocking a single item at a time. Here\'s an example of how the class should work: ```python items = { \\"chips\\": {\\"price\\": 1.5, \\"quantity\\": 10}, \\"chocolate\\": {\\"price\\": 2, \\"quantity\\": 5}, \\"soda\\": {\\"price\\": 1.75, \\"quantity\\": 8} } vm = VendingMachine(items) print(vm.display_items()) # Output: # Item: chips, Price: 1.50, Quantity: 10 # Item: chocolate, Price: 2.00, Quantity: 5 # Item: soda, Price: 1.75, Quantity: 8 print(vm.purchase_item(\\"chips\\", 2)) # Output: 0.5 print(vm.purchase_item(\\"chips\\", 1)) # Output: \\"Insufficient funds\\" print(vm.purchase_item(\\"water\\", 2)) # Output: \\"Item not found\\" print(vm.display_items()) # Output: # Item: chips, Price: 1.50, Quantity: 9 # Item: chocolate, Price: 2.00, Quantity: 5 # Item: soda, Price: 1.75, Quantity: 8 print(vm.restock_item(\\"chocolate\\", 3)) # Output: \\"Item restocked successfully\\" print(vm.restock_item(\\"water\\", 5)) # Output: \\"Item not found\\" print(vm.display_items()) # Output: # Item: chips, Price: 1.50, Quantity: 9 # Item: chocolate, Price: 2.00, Quantity: 8 # Item: soda, Price: 1.75, Quantity: 8 ``` Requirements: - Define the `VendingMachine` class. - Properly implement the methods described. - Handle errors and edge cases appropriately. - Print messages exactly as specified in the example.","solution":"class VendingMachine: def __init__(self, items): self.items = items def display_items(self): result = [] for item, details in self.items.items(): result.append(f\\"Item: {item}, Price: {details[\'price\']:.2f}, Quantity: {details[\'quantity\']}\\") return \\"n\\".join(result) def purchase_item(self, item_name, money): if item_name not in self.items: return \\"Item not found\\" if self.items[item_name][\'quantity\'] <= 0: return \\"Item out of stock\\" if money < self.items[item_name][\'price\']: return \\"Insufficient funds\\" self.items[item_name][\'quantity\'] -= 1 change = money - self.items[item_name][\'price\'] return change def restock_item(self, item_name, quantity): if item_name not in self.items: return \\"Item not found\\" self.items[item_name][\'quantity\'] += quantity return \\"Item restocked successfully\\""},{"question":"Implement a function `count_inversions` that takes an array of integers and returns the number of inversions in the array. An inversion is a pair of indices `(i, j)` such that `i < j` and `array[i] > array[j]`. Examples ```python count_inversions([1, 3, 2, 3, 1]) # -> 4 count_inversions([1, 2, 3, 4, 5]) # -> 0 count_inversions([5, 4, 3, 2, 1]) # -> 10 count_inversions([1, 5, 3, 2, 4]) # -> 4 ``` The function should use a modified merge sort algorithm to achieve a time complexity of (O(n log n)). Signature The function signature should be: ```python def count_inversions(arr: List[int]) -> int: ``` # Constraints - Array can contain up to (10^5) elements. - Each element of the array will be a 32-bit signed integer.","solution":"def count_inversions(arr): Returns the number of inversions in the array. def merge_sort_and_count(arr, temp_arr, left, right): inv_count = 0 if left < right: mid = (left + right) // 2 inv_count += merge_sort_and_count(arr, temp_arr, left, mid) inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right) inv_count += merge_and_count(arr, temp_arr, left, mid, right) return inv_count def merge_and_count(arr, temp_arr, left, mid, right): i = left j = mid + 1 k = left inv_count = 0 while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: temp_arr[k] = arr[j] inv_count += (mid - i + 1) j += 1 k += 1 while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count return merge_sort_and_count(arr, [0]*len(arr), 0, len(arr)-1)"},{"question":"A network of interconnected computers is represented using a directed graph with n nodes and m edges. Each node represents a computer, and each directed edge represents a one-way communication channel between two computers. You need to process q queries, each of which asks whether there is a path between two given nodes in the network. Input The first line of input contains three space-separated integers n, m, and q (1 ≤ n, m, q ≤ 100 000) — the number of computers, the number of communication channels, and the number of queries, respectively. The next m lines each contain two space-separated integers u and v (1 ≤ u, v ≤ n), indicating there is a directed edge from computer u to computer v. The next q lines each contain two space-separated integers a and b (1 ≤ a, b ≤ n), representing a query asking if there exists a path from computer a to computer b. Output For each query, print \\"YES\\" if there is a path from computer a to computer b, otherwise print \\"NO\\". Examples Input 5 4 3 1 2 2 3 3 4 4 5 1 5 2 4 5 1 Output YES YES NO Input 6 5 4 1 2 1 3 2 4 3 4 5 6 1 4 5 6 4 1 6 5 Output YES YES NO NO Note The first example represents a network with 5 computers and the following directed edges: 1->2, 2->3, 3->4, 4->5. The queries are: 1. Check if there is a path from 1 to 5, which is true through the path 1->2->3->4->5. 2. Check if there is a path from 2 to 4, which is true through the path 2->3->4. 3. Check if there is a path from 5 to 1, which is false as there is no backward path. In the second example, the network has 6 computers and the following directed edges: 1->2, 1->3, 2->4, 3->4, 5->6. The queries are: 1. Check if there is a path from 1 to 4, which is true through the path 1->2->4 or 1->3->4. 2. Check if there is a path from 5 to 6, which is true through the path 5->6. 3. Check if there is a path from 4 to 1, which is false as there is no backward path. 4. Check if there is a path from 6 to 5, which is false as 6->5 is not a directed edge.","solution":"def process_queries(n, m, q, edges, queries): # Convert edge list to adjacency list from collections import defaultdict, deque graph = defaultdict(list) for u, v in edges: graph[u].append(v) # Function to check if there is a path from src to dest using BFS def has_path(src, dest): if src == dest: return True visited = set() queue = deque([src]) while queue: node = queue.popleft() if node == dest: return True if node not in visited: visited.add(node) queue.extend(graph[node]) return False results = [] for a, b in queries: if has_path(a, b): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given a string `s`, you are required to reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order. Complete the function `reverseWords(s)` that takes a string `s` as an argument. Words are defined as a sequence of characters without spaces, thus you need to reverse each sequence of characters. For example, given the string `\\"hello world\\"`, the output should be `\\"olleh dlrow\\"`. Ensure that multiple spaces between words are preserved as it is. **Note:** The input string will consist of only printable ASCII characters and spaces (\' \'). **Examples** *Example 1:* Input: `s = \\"The quick brown fox\\"` Output: `\\"ehT kciuq nworb xof\\"` *Example 2:* Input: `s = \\" this is a test \\"` Output: `\\" siht si a tset \\"` Happy coding!","solution":"def reverseWords(s): Reverses the order of characters in each word within a given sentence while still preserving whitespace and initial word order. Params: s (str): The input string to be processed. Returns: str: The processed string with each word\'s characters reversed. # Split the string by spaces to get individual words/pieces words = s.split(\\" \\") # Reverse each word and join them back with spaces reversed_words = [word[::-1] for word in words] return \\" \\".join(reversed_words)"},{"question":"Given a rectangular grid with n rows and m columns, where each cell contains a single character. Your task is to determine if there exists a rectangular sub-grid (square or non-square) such that all of its boundary cells are the same character. Input - The first line contains two integers n and m (1 ≤ n, m ≤ 500) — the number of rows and columns of the grid. - The next n lines each contain m characters — the grid itself. Output - Output a single line: \\"YES\\" if there exists such a sub-grid, otherwise \\"NO\\". Examples Input 4 5 aaaaa abbba abbba aaaaa Output YES Input 3 3 abc def ghi Output NO Note In the first example, the entire grid forms a valid sub-grid with all boundary cells containing the character \'a\'. In the second example, no such sub-grid exists.","solution":"def has_uniform_boundary_subgrid(n, m, grid): def check_boundary(x1, y1, x2, y2): char = grid[x1][y1] for x in range(x1, x2 + 1): if grid[x][y1] != char or grid[x][y2] != char: return False for y in range(y1, y2 + 1): if grid[x1][y] != char or grid[x2][y] != char: return False return True for x1 in range(n): for y1 in range(m): for x2 in range(x1 + 1, n): for y2 in range(y1 + 1, m): if check_boundary(x1, y1, x2, y2): return \\"YES\\" return \\"NO\\" # Example usage n = 4 m = 5 grid = [ \\"aaaaa\\", \\"abbba\\", \\"abbba\\", \\"aaaaa\\" ] print(has_uniform_boundary_subgrid(n, m, grid)) # Output: YES n = 3 m = 3 grid = [ \\"abc\\", \\"def\\", \\"ghi\\" ] print(has_uniform_boundary_subgrid(n, m, grid)) # Output: NO"},{"question":"# Task Given a string `str`, remove all sequences of digits (one or more characters within \'0\'-\'9\') and replace each with a single \'*\' character. Return the resulting string. # Example For `str = \\"a1b23c456d\\"` The result should be `\\"a*b*c*d\\"`. # Input/Output - `[input]` string `str` A non-empty string of length `1 ≤ str.length ≤ 1000` The string may contain lowercase/uppercase letters and digits. - `[output]` a string The resulting string after replacing sequences of digits with \'*\'. # Additional Example For `str = \\"abc123def\\"` The result should be `\\"abc*def\\"`.","solution":"import re def replace_digits_with_asterisk(s): This function takes a string `s` and replaces all sequences of digits with a single \'*\' character. return re.sub(r\'d+\', \'*\', s)"},{"question":"You are given an unsorted array of distinct integers and a target integer. Your task is to find two numbers in the array that add up to the target integer and return their indices in the form of a tuple (index1, index2). **Notes:** * There will be exactly one solution. * Return the indices in ascending order (i.e., index1 < index2). * If the array is empty or contains only one value, return `None`. * Random tests: maximum array length is 1000, range of values in array is between -1000 and 1000. Examples ``` ([2, 7, 11, 15], 9) --> (0, 1) ``` ...because `2 + 7` is equal to the target `9` and the indices `0` and `1` are returned. ``` ([3, 2, 4], 6) --> (1, 2) ``` ...because `2 + 4` is equal to the target `6` and the indices `1` and `2` are returned.","solution":"def two_sum(nums, target): Finds two distinct indices in the nums list such that the elements at those indices add up to the target. Parameters: nums (list): A list of distinct integers. target (int): The target sum. Returns: tuple: A tuple of two indices in ascending order where the numbers at those indices add up to the target. if len(nums) < 2: return None num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return (min(i, num_to_index[complement]), max(i, num_to_index[complement])) num_to_index[num] = i return None # This line should theoretically never be reached due to problem constraints."},{"question":"Alex is an avid collector of rare coins. He has a collection of coins, each with a certain value and a weight. He wants to choose a subset of these coins such that the total value of the selected coins is maximized, but the total weight does not exceed a given limit. Given the number of coins N, the maximum weight W that Alex can carry, and the values and weights of the coins, your task is to determine the maximum value Alex can collect without exceeding the weight limit. The problem can be thought of as a variation of the Knapsack problem. --- Input --- The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follow. The first line of each test case contains two integers N and W — the number of coins and the maximum weight that Alex can carry. The next N lines contain two space-separated integers v_i and w_i — the value and weight of the i-th coin. --- Output --- For each test case, print a single line containing one integer — the maximum value Alex can collect without exceeding the weight limit. --- Constraints --- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 100 - 1 ≤ W ≤ 1000 - 1 ≤ v_i, w_i ≤ 1000 --- Sample Input --- ``` 2 3 50 60 10 100 20 120 30 2 10 10 5 20 6 ``` --- Sample Output --- ``` 220 20 ``` --- Explanation --- In the first test case, the best selection of coins will result in a total value of 220 which can be achieved by including all three coins since their combined weight is 60, which is under the weight limit of 50. In the second test case, the best selection is to pick the coin with value 20 and weight 6 as it gives the maximum value without exceeding the weight limit of 10.","solution":"def knapsack_max_value(T, test_cases): Determines the maximum value Alex can collect without exceeding the weight limit for multiple test cases. results = [] for case in test_cases: N, W, coins = case # Initialize a 2D DP array where dp[i][w] is the maximum value for the first i items and weight limit w dp = [[0 for _ in range(W + 1)] for _ in range(N + 1)] for i in range(1, N + 1): value, weight = coins[i-1] for w in range(W + 1): if w >= weight: dp[i][w] = max(dp[i-1][w], dp[i-1][w-weight] + value) else: dp[i][w] = dp[i-1][w] results.append(dp[N][W]) return results # Example function to parse input data and execute knapsack_max_value def parse_input_and_execute(input_data): lines = input_data.strip().split(\\"n\\") T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N, W = map(int, lines[index].split()) index += 1 coins = [] for _ in range(N): value, weight = map(int, lines[index].split()) index += 1 coins.append((value, weight)) test_cases.append((N, W, coins)) return knapsack_max_value(T, test_cases)"},{"question":"Problem statement You are given an array of N integers. You need to rearrange the array such that for every i (1 <= i <= N), arr[i] becomes the product of all elements in the array except arr[i]. You must solve this problem without using the division operator and in O(N) time complexity. Constraints: * 1 <= N <= 10^5 * -10^9 <= arr[i] <= 10^9 (elements can be negative, zero, or positive) Input: - The first line contains a single integer N, the number of elements in the array. - The second line contains N integers separated by space, representing the elements of the array. Output: - Output the resulting array in a single line, where each element is the product of all other elements in the array. Example: Input: 5 1 2 3 4 5 Output: 120 60 40 30 24 Input: 4 -1 1 0 -3 3 Output: 0 0 9 0 0","solution":"def product_except_self(nums): Given an array nums, return an array such that, for every i, result[i] is the product of all elements in nums except nums[i], without using division. n = len(nums) if n == 0: return [] # Initialize arrays to store prefix and suffix products prefix_products = [1] * n suffix_products = [1] * n # Calculate prefix products for i in range(1, n): prefix_products[i] = prefix_products[i - 1] * nums[i - 1] # Calculate suffix products for i in range(n - 2, -1, -1): suffix_products[i] = suffix_products[i + 1] * nums[i + 1] # Calculate the result using prefix and suffix products result = [prefix_products[i] * suffix_products[i] for i in range(n)] return result"},{"question":"Hemose has another array of n integers and he is curious if the array can be split into two subarrays such that the sum of elements in both subarrays is equal. Hemose can also perform a special operation to make the task easier: He can choose an index i (1 leq i leq n-1) and split the array into two subarrays at that index. He can then choose integers k and m (1 leq k leq |left|, 1 leq m leq |right|) where |left| and |right| are the sizes of the left and right subarrays respectively. He can then swap the elements left[k] and right[m]. Can you tell Hemose if it\'s possible to split the array into two subarrays of equal sum after performing the special operation described above a finite number of times (possibly 0)? -----Input----- The first line of the input contains an integer t (1 leq t leq 10^5), the number of test cases. The first line of each test case contains an integer n (1 leq n leq 10^5). The second line of each test case contains n integers a_1, a_2, ..., a_n (1 leq a_i leq 10^9). It is guaranteed that the sum of n over all test cases doesn\'t exceed 2 cdot 10^5. -----Output----- For each test case, output \\"YES\\" (without quotes) if Hemose can split the array into two subarrays with equal sum using the operation above. Otherwise, output \\"NO\\" (without quotes). You can print each letter of \\"YES\\" and \\"NO\\" in any case (upper or lower). -----Examples----- Input: 3 5 3 1 4 2 2 4 1 1 1 1 6 1 2 3 4 5 6 Output: YES YES NO -----Note----- In the first test case, after the split between 3 and 1, he can swap 3 from the left subarray with 2 from the right subarray to get [2, 1] and [4, 3, 2]. Then sum of both subarrays will be equal. In the second test case, regardless of where he splits the array, both subarrays will always have equal sum because all elements are identical. In the third test case, there is no way to split the array into two subarrays with equal sum regardless of any operations performed.","solution":"def can_split_equal_sum(t, test_cases): results = [] for case in test_cases: n, a = case total_sum = sum(a) if total_sum % 2 != 0: results.append(\\"NO\\") continue target_sum = total_sum // 2 current_sum = 0 seen = set() for num in a: current_sum += num if current_sum == target_sum or (current_sum - target_sum) in seen: results.append(\\"YES\\") break seen.add(current_sum) else: results.append(\\"NO\\") return results # Example usage: # t = 3 # test_cases = [(5, [3, 1, 4, 2, 2]), (4, [1, 1, 1, 1]), (6, [1, 2, 3, 4, 5, 6])] # print(can_split_equal_sum(t, test_cases))"},{"question":"You are given an array of integers and a target integer. Return the indices of the two numbers that add up to the target. Each input will have exactly one solution, and you may not use the same element twice. Constraints * The input array will have at least two elements. * Each element in the array is an integer. * The target is an integer. * There will always be a unique solution. Input Input is given from Standard Input in the following format: n arr target where `n` is the number of elements in the array, `arr` is a space-separated list of integers which represents the array, and `target` is the target integer. Output Print the indices of the two numbers as a space-separated pair. The indices should be in ascending order. Examples Input 4 2 7 11 15 9 Output 0 1 Input 3 3 2 4 6 Output 1 2 Input 2 3 3 6 Output 0 1","solution":"def two_sum(nums, target): Finds indices of two numbers in the list `nums` which add up to `target`. :param nums: List of integers :param target: Target integer to find two sum :return: Tuple of indices of the two numbers num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], i) num_to_index[num] = i return None"},{"question":"Special Message Encoder You work for a company that sends important and sensitive information encoded in a special way. Each message is a string consisting of uppercase English letters, and each letter is assigned a unique prime number starting from \'A\' = 2, \'B\' = 3, \'C\' = 5, and so on up to \'Z\' = 101. To encode the message, you multiply all the prime numbers assigned to each letter in the message. Two different messages are considered equivalent if their encoded values are the same. Write a function to determine if two given messages are equivalent. Input The first line contains the first message, a string s1 consisting of uppercase English letters (1 ≤ |s1| ≤ 100). The second line contains the second message, a string s2 consisting of uppercase English letters (1 ≤ |s2| ≤ 100). Output Output \\"YES\\" if the two messages are equivalent based on their encoded values, otherwise, output \\"NO\\". Examples Input HELLO OHLEL Output YES Input TOP POT Output YES Input WORLD WORDL Output NO","solution":"def are_messages_equivalent(s1, s2): Determines if two messages s1 and s2 are equivalent based on their encoded values. Args: s1 (str): The first message consisting of uppercase English letters. s2 (str): The second message consisting of uppercase English letters. Returns: str: \\"YES\\" if the messages are equivalent, otherwise \\"NO\\". # Prime number mapping for each uppercase English letter letter_to_prime = { \'A\': 2, \'B\': 3, \'C\': 5, \'D\': 7, \'E\': 11, \'F\': 13, \'G\': 17, \'H\': 19, \'I\': 23, \'J\': 29, \'K\': 31, \'L\': 37, \'M\': 41, \'N\': 43, \'O\': 47, \'P\': 53, \'Q\': 59, \'R\': 61, \'S\': 67, \'T\': 71, \'U\': 73, \'V\': 79, \'W\': 83, \'X\': 89, \'Y\': 97, \'Z\': 101 } def encode_message(s): encoded_value = 1 for char in s: encoded_value *= letter_to_prime[char] return encoded_value return \\"YES\\" if encode_message(s1) == encode_message(s2) else \\"NO\\""},{"question":"Supermarket Checkout You are a cashier at a supermarket where customers form a single queue and you serve them one by one. Each customer has a certain number of items in their basket, and you can process a certain number of items per minute. Your task is to determine the time it will take to serve a given number of customers, given the number of items each customer has and your processing speed. Input Input is given from standard input in the following format: N S A_1 A_2 dots A_N Where: - N is the number of customers. - S is the number of items you can process per minute. - A_1, A_2, ..., A_N are the distinct integers representing the number of items each respective customer has in their basket. Output Output a single line with the total time in minutes to serve all customers. The output should be rounded to six decimal places. Constraints * 1 ≤ N ≤ 100 * 1 ≤ S ≤ 100 * 1 ≤ A_i ≤ 100 for all 1 ≤ i ≤ N Example Input 3 10 15 30 25 Output 7.000000 Explanation The first customer has 15 items, the second has 30 items, and the third has 25 items. Processing times: 15/10 = 1.5 minutes, 30/10 = 3.0 minutes, and 25/10 = 2.5 minutes. The total processing time is 1.5 + 3.0 + 2.5 = 7.0 minutes.","solution":"def time_to_serve_customers(N, S, items): Calculate the total time to serve all customers given the number of items each has and the processing speed in items per minute. Args: N (int): Number of customers. S (int): Number of items that can be processed per minute. items (list of int): List of integers where each integer represents the number of items a customer has. Returns: float: Total time to serve all customers rounded to six decimal places. total_time = sum(item / S for item in items) return round(total_time, 6)"},{"question":"In a sports competition, n athletes are participating, and they need to be paired up randomly for a series of games. Each athlete can play only once in each round. Given those constraints and the total number of athletes, determine the maximum number of games that can be simultaneously held in one round. -----Input----- The first line contains an integer n (1 le n le 1000), the total number of athletes participating in the competition. -----Output----- Output a single integer, the maximum number of games that can be simultaneously held in one round. -----Examples----- Input 10 Output 5 Input 7 Output 3 Input 1 Output 0 -----Note----- In the first example, with 10 athletes, you can create 5 pairs (or 5 games) in one round. In the second example, with 7 athletes, you can create 3 pairs (or 3 games) in one round, with one athlete left without a partner. In the third example, with 1 athlete, no games can be held since there is no pair available.","solution":"def max_games(n): Returns the maximum number of games that can be simultaneously held in one round. Parameters: n (int): The total number of athletes participating Returns: int: The maximum number of games return n // 2"},{"question":"Given a string s containing only lowercase letters \'a\' through \'z\', we want to create a balanced string by rearranging the characters of s. A balanced string is defined as a string where no two adjacent characters are the same. If it is not possible to rearrange s into a balanced string, return an empty string. Your task is to complete the function `rearrangeString` which takes the string s as input and returns a balanced string if possible, otherwise returns an empty string. Example 1: Input: s = \\"aab\\" Output: \\"aba\\" Explanation: \\"aba\\" is the only way to rearrange the string so that no two adjacent characters are the same. Example 2: Input: s = \\"aaab\\" Output: \\"\\" Explanation: It is not possible to rearrange \\"aaab\\" to avoid two adjacent \'a\'s. Your Task: You do not need to read input or print anything. Your task is to complete the function `rearrangeString()` which takes a string s and returns a rearranged string that is balanced, or an empty string if such a rearrangement is not possible. Expected Time Complexity: O(|s| log |s|) Expected Auxiliary Space: O(|s|) Constraints: 1 ≤ |s| ≤ 500","solution":"from heapq import heappop, heappush from collections import Counter def rearrangeString(s): Rearrange the string so that no two adjacent characters are the same. :param s: Input string containing only lowercase letters \'a\'-\'z\' :return: A rearranged balanced string or an empty string if not possible # Count the frequencies of each character counter = Counter(s) # Using a max-heap (simulated using negative counts) heap = [] for char, freq in counter.items(): heappush(heap, (-freq, char)) prev_freq, prev_char = 0, \'\' result = [] while heap: freq, char = heappop(heap) result.append(char) if prev_freq < 0: heappush(heap, (prev_freq, prev_char)) prev_freq = freq + 1 # decrement the count prev_char = char rearranged = \\"\\".join(result) if len(rearranged) != len(s): return \\"\\" return rearranged"},{"question":"Given an undirected graph with `n` nodes and `m` edges, your task is to determine the minimum number of edges that need to be added to make the graph fully connected (i.e., there should be a path between any pair of nodes). -----Input----- The input consists of multiple test cases. The first line contains an integer t (1 leq t leq 100) — the number of test cases. The description of the test cases follows. The first line of each test case contains two integers n and m (1 leq n leq 100; 0 leq m leq frac{n*(n-1)}{2}) — the number of nodes and edges, respectively. Then m lines follow, each containing two integers u and v (1 leq u, v leq n) — an edge between nodes u and v. -----Output----- For each test case, output a single integer — the minimum number of edges that need to be added to make the graph fully connected. -----Examples----- Input 3 5 3 1 2 2 3 4 5 4 0 1 2 3 3 1 2 2 3 1 3 Output 1 3 0 -----Note----- In the first test case, there are two connected components: {1, 2, 3} and {4, 5}. We need to add at least one edge to connect these two components, for example, the edge (3, 4). In the second test case, there are four isolated nodes. To make the graph connected, we need to add at least three edges, for example, (1, 2), (2, 3), and (3, 4). In the third test case, the graph is already fully connected, so no additional edges are needed.","solution":"def find_min_edges_to_connect_graph(n, m, edges): Function to find the minimum number of edges to add to make the graph fully connected. from collections import defaultdict, deque def bfs(node, visited, adj_list): Perform BFS to mark all reachable nodes from the given node. queue = deque([node]) while queue: current = queue.popleft() for neighbor in adj_list[current]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) # Build the adjacency list adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) # Find connected components using BFS visited = [False] * (n + 1) num_components = 0 for node in range(1, n + 1): if not visited[node]: bfs(node, visited, adj_list) num_components += 1 # To connect all components, we need (num_components - 1) edges return num_components - 1 def process_test_cases(test_cases): Function to process multiple test cases. results = [] for t in test_cases: n, m, edges = t results.append(find_min_edges_to_connect_graph(n, m, edges)) return results # This part can be commented out if you only need the function and tests. # Example usage: # test_cases = [(5, 3, [(1, 2), (2, 3), (4, 5)]), (4, 0, []), (3, 3, [(1, 2), (2, 3), (1, 3)])] # print(process_test_cases(test_cases))"},{"question":"In a distant kingdom, a prince is challenged to solve a mystical grid puzzle. The grid is an N x M matrix where each cell contains an integer representing the energy level of that cell. The prince can move from any cell to any of its neighboring cells in the north, south, east, or west direction. However, for each step he takes, he will lose 1 unit of energy. The prince starts at the top-left corner of the grid (0, 0) with a given initial energy `E` and needs to reach the bottom-right corner (N-1, M-1) with at least 0 energy remaining. If the prince\'s energy drops below zero at any point, he will not be able to move further and the challenge is considered failed. You need to help the prince determine if he can reach the bottom-right corner with the given initial energy `E`. # Input - The first line contains three integers N, M, and E (1 ≤ N, M ≤ 1000, 1 ≤ E ≤ 10^6). - The next N lines each contain M integers representing the energy levels of the cells in the grid. # Output - Output \\"YES\\" if the prince can reach the bottom-right corner with at least 0 energy remaining, otherwise output \\"NO\\". # Example Input 4 4 10 3 2 1 3 2 -1 -2 2 5 -3 4 1 3 1 2 -2 Output YES Input 3 3 5 1 2 1 -2 -3 2 1 2 -4 Output NO # Solution Explanation In the first example, the prince starts with 10 units of energy. Possible path: (0,0) -> (1,0) -> (2,0) -> (2,1) -> (3,1) -> (3,2) -> (3,3). During this traversal, he moves 6 steps, which will cost him 6 units of energy and he collects energy added by the cells on his path. After calculating his net energy at the destination, if it is greater than or equal to 0, then the answer should be \\"YES\\". In the second example, there is no possible path where the prince can maintain a non-negative energy level after reaching the destination (2,2), so the answer is \\"NO\\".","solution":"from collections import deque def can_reach_bottom_right(N, M, E, grid): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, E + grid[0][0])]) visited = set((0, 0)) while queue: x, y, energy = queue.popleft() if energy < 0: continue if (x, y) == (N - 1, M - 1): return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, energy - 1 + grid[nx][ny])) return \\"NO\\""},{"question":"Read problems statements in Mandarin Chinese, Russian and Vietnamese as well. Chef has recently become interested in palindromic numbers. A number is called palindromic if it reads the same backwards as forwards. Chef wants to know how many palindromic numbers exist within a given range [L, R] (inclusive). ------ Input ------ The first line contains an integer T denoting the number of tests. For each test case, the first and only line contains two integers L and R. ------ Output ------ For each test case, output a single number denoting the count of palindromic numbers within the range [L, R]. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ L ≤ R ≤ 10^{9} ------ Subtasks ------ Subtask #1: (30 points) 1 ≤ L ≤ R ≤ 10^3. Subtask #2: (70 points) Original constraints. ------ Sample Input 1 ------ 1 1 10 ------ Sample Output 1 ------ 9 ------ Explanation 1 ------ The palindromic numbers between 1 and 10 are: 1, 2, 3, 4, 5, 6, 7, 8, 9. ------ Sample Input 2 ------ 1 11 20 ------ Sample Output 2 ------ 1 ------ Explanation 2 ------ The only palindromic number between 11 and 20 is 11.","solution":"def is_palindromic(number): Returns True if the number is palindromic, False otherwise. str_num = str(number) return str_num == str_num[::-1] def count_palindromic_numbers(L, R): Returns the count of palindromic numbers in the range [L, R]. count = 0 for num in range(L, R + 1): if is_palindromic(num): count += 1 return count def solve(test_cases): For each test case, prints the count of palindromic numbers in the range [L, R]. results = [] for L, R in test_cases: results.append(count_palindromic_numbers(L, R)) return results # Sample input test_cases = [(1, 10), (11, 20)] print(solve(test_cases)) # Expected output: [9, 1]"},{"question":"You are developing a new social media analysis tool to determine the most discussed topics. Your boss has asked you to find the top three most frequently mentioned words in a list of words. Given a list of words like this: * words: `[\\"apple\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"banana\\", \\"apple\\", \\"kiwi\\", \\"kiwi\\", \\"kiwi\\"]` Return the three words with the highest frequencies. **Note**: If multiple words have the same frequency, order them according to their first appearance in the list.","solution":"from collections import Counter def top_three_words(words): Returns the three words with highest frequencies in the given list. If multiple words have the same frequency, they are ordered according to their first appearance. word_counts = Counter(words) most_common_words = word_counts.most_common() # Sorting based on frequency first, then by first appearance index most_common_words.sort(key=lambda x: (-x[1], words.index(x[0]))) # Extracting only the top 3 words top_three = [word for word, count in most_common_words[:3]] return top_three"},{"question":"Bob is creating a special type of string that he calls a \\"balanced\\" string. A string is considered balanced if the number of occurrences of the character \'a\' is equal to the number of occurrences of the character \'b\'. Bob wants to construct the smallest possible balanced string that contains at least one \'a\' and one \'b\', and has a total length greater than or equal to a given integer L. Help Bob find such a string. -----Input----- The only line in the input contains an integer L (2 le L le 1000). -----Output----- Print the smallest possible balanced string with total length greater than or equal to L. -----Examples----- Input 5 Output aabba Input 8 Output aabbaabb Input 2 Output ab Input 10 Output aabbaabbaa","solution":"def smallest_balanced_string(L): Returns the smallest possible balanced string that has at least one \'a\' and one \'b\', and has a total length greater than or equal to L. # Initial balanced substring \\"ab\\" balanced_substring = \\"ab\\" * (L // 2) if L % 2 == 1: balanced_substring += \\"a\\" return balanced_substring"},{"question":"Task: Write a function that takes a string consisting of both lower and upper case letters, and returns a new string where all the characters are sorted in such a way that uppercase letters come first and are in reverse alphabetical order, followed by lowercase letters sorted in alphabetical order. For example, given the input string `\\"cBaA\\"`, the function should return `\\"BAcc\\"`.","solution":"def sort_string(s): Takes a string consisting of both lower and upper case letters, and returns a new string where uppercase letters come first and are in reverse alphabetical order, followed by lowercase letters sorted in alphabetical order. upper_case_sorted = sorted([char for char in s if char.isupper()], reverse=True) lower_case_sorted = sorted([char for char in s if char.islower()]) return \'\'.join(upper_case_sorted + lower_case_sorted)"},{"question":"Rock, Paper, Scissors You are organizing a rock-paper-scissors tournament among friends. To determine the winner, each player will play against every other player exactly once. You need to calculate the total number of matches that will take place in the tournament. input Input is given from standard input in the following format: P where P is the number of players in the tournament. output Output the total number of matches that will take place in one line. However, insert a line break at the end. Constraint * 2 leq P leq 100 * P is an integer. Input example 1 5 Output example 1 10 Input example 2 2 Output example 2 1 Example Input 5 Output 10","solution":"def total_matches(P): Calculate total number of matches in a rock-paper-scissors tournament. Each player plays against every other player exactly once. return (P * (P - 1)) // 2"},{"question":"You are working for a company that manages a large number of networked devices in multiple locations. As part of your job, you need to synchronize the clocks of these devices with a central server to ensure that their local times are accurate and consistent. Each device has a clock that can be out of sync with the central server, and each location has multiple devices. Your task is to write a program that synchronizes the clocks by calculating the drift (i.e., the time difference) between the central server and each device, then adjusts the device\'s time accordingly. The central server time and each device\'s time are given in the format \\"HH:MM\\" (24-hour format). For simplicity, assume that the maximum drift for any device is less than 24 hours. Input The input consists of several data sets. Each data set starts with an integer n (1 ≤ n ≤ 1000), indicating the number of devices in the location. The next line contains the central server time in \\"HH:MM\\" format. Each of the following n lines contains the time of a device in the same format. The input ends with a line containing a single zero, which should not be processed. Output For each data set, print the adjusted times of the devices, one per line. The adjusted time should be in \\"HH:MM\\" format. If adjusting a device\'s time results in a value of 24:00, it should be changed to \\"00:00\\". Example Input 3 12:00 11:45 13:05 11:59 2 23:30 23:00 00:30 0 Output 12:15 12:20 12:01 23:30 23:30","solution":"def time_difference(server_time, device_time): h1, m1 = map(int, server_time.split(\\":\\")) h2, m2 = map(int, device_time.split(\\":\\")) total_server_minutes = h1 * 60 + m1 total_device_minutes = h2 * 60 + m2 drift_minutes = total_server_minutes - total_device_minutes return drift_minutes def adjust_time(device_time, drift_minutes): h, m = map(int, device_time.split(\\":\\")) total_minutes = (h * 60 + m + drift_minutes) % 1440 adjusted_h = total_minutes // 60 adjusted_m = total_minutes % 60 return f\\"{adjusted_h:02}:{adjusted_m:02}\\" def synchronize_clocks(inputs): outputs = [] i = 0 while i < len(inputs): n = int(inputs[i]) if n == 0: break i += 1 central_server_time = inputs[i] i += 1 drift_lst = [] for _ in range(n): device_time = inputs[i] drift = time_difference(central_server_time, device_time) adjusted_time = adjust_time(device_time, drift) drift_lst.append(adjusted_time) i += 1 outputs.extend(drift_lst) return outputs"},{"question":"Given a linked list of size N, where each node represents a digit of a large number. Each node contains a single digit (0-9) of the number. Your task is to write a function that adds 1 to the number represented by the linked list and returns the new linked list. Example 1: Input: Linked list: 1->2->3 Output: Linked list: 1->2->4 Explanation: 123 + 1 = 124, hence the new linked list is 1->2->4. Example 2: Input: Linked list: 9->9->9 Output: Linked list: 1->0->0->0 Explanation: 999 + 1 = 1000, hence the new linked list is 1->0->0->0. Example 3: Input: Linked list: 0 Output: Linked list: 1 Explanation: 0 + 1 = 1, hence the new linked list is 1. Your Task: You don\'t need to read input or print anything. Complete the function addOne() which takes the head of the linked list as its input parameter and returns the head of the modified linked list after adding 1 to it. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^{4}","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def addOne(head): def reverseList(head): prev = None current = head while current: next_node = current.next current.next = prev prev = current current = next_node return prev head = reverseList(head) current = head carry = 1 while current: current.val += carry if current.val == 10: current.val = 0 carry = 1 else: carry = 0 if not current.next and carry: current.next = ListNode(1) carry = 0 current = current.next head = reverseList(head) return head"},{"question":"Farmer Joe has a rectangular farm divided into a grid of cells with R rows and C columns. Each cell either has a fence (\'#\') or an open path (\'.\'). Joe keeps a key in a certain cell of the farm. He needs to reach the key starting from his initial position at the top-left corner (1, 1). He can move up, down, left, or right to an adjacent cell, but he cannot move through a fence. You need to determine the minimum number of steps required for Joe to reach the key\'s position. If it is impossible for Joe to reach the key, return -1. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of multiple lines of input. - The first line of each test case contains two integers R and C — the number of rows and columns in the farm, respectively. - The next R lines each contain a string of length C, representing the farm layout. A cell containing the key is marked with a \'K\'. ------ Output Format ------ For each test case, output on a new line the minimum number of steps required for Joe to reach the key, or -1 if it is impossible. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ R, C ≤ 100 - Each cell in the grid is represented by either a \'.\', \'#\', or \'K\'. - There is exactly one \'K\' in the grid. - The top-left corner (1, 1) is always an open path (\'.\'). ------ Sample Input 1 ------ 3 3 3 ..# #.# ..K 4 4 .... .. .. ...K 2 2 .# #K ------ Sample Output 1 ------ 4 6 -1 ------ Explanation 1 ------ Test case 1: Joe can follow the path: (1,1) → (2,1) → (2,2) → (3,2) → (3,3) to reach the key in 4 steps. Test case 2: Joe can follow the path: (1,1) → (1,2) → (1,3) → (1,4) → (2,4) → (3,4) → (4,4) to reach the key in 6 steps. Test case 3: There is no path from the top-left corner to the key, so the answer is -1.","solution":"from collections import deque def min_steps_to_key(R, C, farm): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] start = (0, 0) queue = deque([(start, 0)]) visited = set() visited.add(start) key_pos = None for i in range(R): for j in range(C): if farm[i][j] == \'K\': key_pos = (i, j) break while queue: (current_i, current_j), steps = queue.popleft() if (current_i, current_j) == key_pos: return steps for di, dj in directions: ni, nj = current_i + di, current_j + dj if 0 <= ni < R and 0 <= nj < C and farm[ni][nj] != \'#\' and (ni, nj) not in visited: visited.add((ni, nj)) queue.append(((ni, nj), steps + 1)) return -1 def farm_solution(T, cases): results = [] for case in cases: R, C, farm = case results.append(min_steps_to_key(R, C, farm)) return results"},{"question":"# Find the Unique Number Given an array of integers where every element appears twice except for one, which appears exactly once. Write a function to find that single one. For example: ```if-not:racket ~~~ unique_number([2, 3, 2, 4, 4, 5, 5]) -> 3 unique_number([1, 1, 2, 2, 3]) -> 3 ~~~ ``` ```if:racket ~~~racket (unique-number \'(2 3 2 4 4 5 5)) ; 3 (unique-number \'(1 1 2 2 3)) ; 3 ~~~ ```","solution":"def unique_number(arr): Given an array of integers where every element appears twice except for one, which appears exactly once, this function finds that single one. unique = 0 for number in arr: unique ^= number return unique"},{"question":"You are organizing a charity bake sale and need to calculate the total income from the event based on the number of baked goods sold. Each type of baked good has a different price: - Cookies: 2 each - Brownies: 3 each - Cupcakes: 4 each Write a function that takes the number of cookies (c), brownies (b), and cupcakes (k) sold, and returns the total income from the bake sale.","solution":"def calculate_total_income(c, b, k): Returns the total income from the bake sale based on the number of cookies, brownies, and cupcakes sold. Parameters: c (int): Number of cookies sold b (int): Number of brownies sold k (int): Number of cupcakes sold Returns: int: Total income from the bake sale cookies_price = 2 brownies_price = 3 cupcakes_price = 4 total_income = c * cookies_price + b * brownies_price + k * cupcakes_price return total_income"},{"question":"Implement a function `balanced_string_length` that receives a string consisting of only \'a\'s and \'b\'s. The function should return the maximum length of a balanced substring, where a balanced substring is defined as having an equal number of \'a\'s and \'b\'s. If no balanced substring exists, the function should return 0. Example: ```python balanced_string_length(\\"aabb\\") -> 4 balanced_string_length(\\"aaabb\\") -> 4 balanced_string_length(\\"aaaa\\") -> 0 ```","solution":"def balanced_string_length(s): Returns the maximum length of a balanced substring containing equal number of \'a\'s and \'b\'s. max_length = 0 count_a = 0 count_b = 0 count_positions = {0: -1} for i, char in enumerate(s): if char == \'a\': count_a += 1 else: count_b += 1 balance = count_a - count_b if balance in count_positions: max_length = max(max_length, i - count_positions[balance]) else: count_positions[balance] = i return max_length"},{"question":"You are given a string S of length N. You need to toggle the case of each character in the string, which means converting all uppercase letters to lowercase and vice versa. Example 1: Input: N = 5 S = \\"aBcDe\\" Output: \\"AbCdE\\" Example 2: Input: N = 4 S = \\"ABCD\\" Output: \\"abcd\\" Your Task: Since this is a function problem, you just need to complete the provided function toggleCase() which takes S and N as input parameters and returns the resultant string with the case of each character toggled. Constraints: 1 <= N <= 10^{5} S contains only alphabetic characters. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1)","solution":"def toggleCase(N, S): Toggles the case of each character in the string S. Parameters: N (int): Length of the string S. S (str): Input string to toggle case. Returns: str: String with toggled case for each character. return S.swapcase()"},{"question":"You are given a pointer to the root of a binary tree and two values representing the nodes in the tree. Your task is to find the lowest common ancestor (LCA) of the two nodes in the binary tree. The LCA is defined as the deepest node that has both nodes as descendants (where we allow a node to be a descendant of itself). Complete the function to find the LCA in the binary tree. Input Format You are given a function, Node* lowestCommonAncestor(Node* root, Node* p, Node* q) { } Constraints No. of nodes in the tree leq 500 Output Format Return the reference to the LCA node. Sample Input 3 / 5 1 / / 6 2 0 8 / 7 4 The nodes to find the LCA for are 5 and 1. Sample Output 3","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def lowestCommonAncestor(root, p, q): if root is None or root == p or root == q: return root left = lowestCommonAncestor(root.left, p, q) right = lowestCommonAncestor(root.right, p, q) if left and right: return root return left if left else right"},{"question":"You are given a grid with n rows and m columns representing a garden. Initially, each cell of the garden contains a plant that requires a certain amount of water. You need to water each plant exactly once. Every day you can select a rectangular subgrid and water all the plants in that subgrid. You want to find the minimum number of days required to water all the plants in the garden. -----Input----- The first line contains two integers n and m (1 le n, m le 100) — the number of rows and columns in the garden respectively. The next n lines describe the garden. Each line contains m integers a_{ij} (1 le a_{ij} le 100) — the amount of water each plant at cell (i, j) requires. -----Output----- Print one integer — the minimum number of days required to water all the plants. -----Example----- Input 2 3 1 1 1 2 2 1 Output 3 -----Note----- In the first example, you can water the garden in the following way: - On the first day, water the subgrid from (1, 1) to (1, 3) (all plants receive 1 unit of water). - On the second day, water the subgrid from (2, 1) to (2, 2) (plants receive an additional 1 unit of water). - On the third day, water the subgrid from (2, 3) to (2, 3) (the plant receives an additional 1 unit of water). This ensures each plant receives exactly the required amount of water.","solution":"def min_days_to_water_garden(n, m, garden): This function calculates the minimum number of days required to water all plants in a garden with \'n\' rows and \'m\' columns. Each cell of the garden contains a plant that requires a certain amount of water. Parameters: n (int): Number of rows in the garden. m (int): Number of columns in the garden. garden (list of list of int): 2D list representing the garden where each element is the amount of water required by the plant. Returns: int: Minimum number of days required to water all plants. max_water = 0 for row in garden: for water in row: if water > max_water: max_water = water return max_water"},{"question":"Write a program that checks if a given word can be formed by concatenating some of the words from a given dictionary (each word can be used any number of times). Input The first line contains a single integer T, the number of test cases. T test cases follow. Each test case consists of: - The first line contains a string S representing the word you want to form. - The second line contains an integer N, the number of words in the dictionary. - The third line contains N space-separated words which form the dictionary. Output For each test case, output \\"YES\\" if the word can be formed using the dictionary, otherwise output \\"NO\\". Constraints 1 ≤ T ≤ 10 1 ≤ |S| ≤ 100 1 ≤ N ≤ 50 1 ≤ |dictionary word| ≤ 20 All input strings contain lowercase English letters only. Sample Input 3 applepie 3 apple pie plap football 4 foot ball tackle yard python 2 py thy Sample Output YES YES NO","solution":"def can_form_word(word, dictionary): Returns whether the word can be formed by concatenating words in the dictionary. def can_form(word, dictionary): if word == \\"\\": return True for i in range(1, len(word) + 1): if word[:i] in dictionary and can_form(word[i:], dictionary): return True return False return \\"YES\\" if can_form(word, set(dictionary)) else \\"NO\\" def process_test_cases(test_cases): results = [] for word, dictionary in test_cases: result = can_form_word(word, dictionary) results.append(result) return results"},{"question":"A company has implemented a simple attendance system. Each employee is recorded as either \\"Present\\" or \\"Absent\\" for each working day of a month. Given an employee\'s attendance record for a month, calculate the employee\'s attendance rate in percentage rounded to the nearest integer. The input is a string consisting of the characters \'P\' (for Present) and \'A\' (for Absent). The length of the string represents the number of working days in the month (which could be any number between 1 and 31 inclusive). -----Constraints----- - 1 leq length of attendance record leq 31 -----Input----- A single line containing a string of characters \'P\' and \'A\', representing the attendance record. -----Output----- Print the attendance rate as an integer percentage. -----Sample Input----- PPAPPAPPAPPAPAPAPPAPPAPPAPPAPP -----Sample Output----- 67 Explanation: Out of 30 days, the employee was present for 20 days. Therefore, the attendance rate is (20/30) * 100 = 66.67, which rounded to the nearest integer is 67%.","solution":"def attendance_rate(attendance_record): Calculate the attendance rate in percentage rounded to the nearest integer. Parameters: attendance_record (str): A string of \'P\' and \'A\' representing the attendance record for a month. Returns: int: The attendance rate as a percentage. total_days = len(attendance_record) present_days = attendance_record.count(\'P\') attendance_percentage = (present_days / total_days) * 100 return round(attendance_percentage)"},{"question":"In the enchanted forests of Algolan, the elven scouts communicate using a unique method of sending encoded messages. Each message comprises a series of numbers, and its decoding follows an ancient rule of transformation. Given a message in its encoded form, your task is to decode it back to its original form. The encoding process involves replacing each number in the original message with its largest prime factor. You are given an encoded message `M` represented by a list of integers. You need to decode the message by finding the largest prime factor for each integer in `M`. # Input - The first line consists of a single integer `T` denoting the number of test cases `1 <= T <= 100`. - Each test case consists of two lines: - The first line contains a single integer `N` indicating the length of the encoded message `1 <= N <= 10^5`. - The second line contains `N` space-separated integers representing the encoded message, where each integer is between `2` and `10^6`. # Output For each test case, output the decoded message on a new line. Each decoded message consists of `N` integers, where each integer is the largest prime factor of the corresponding number in the encoded message. # Example Input ``` 2 3 10 15 21 4 14 35 49 77 ``` Output ``` 5 5 7 7 7 7 11 ``` # Explanation In the first test case, the encoded message is `10 15 21`. The largest prime factors of these numbers are `5`, `5`, and `7` respectively. In the second test case, the encoded message is `14 35 49 77`. The largest prime factors are `7`, `7`, `7`, and `11` respectively.","solution":"def largest_prime_factor(n): Return the largest prime factor of the given number. max_prime = -1 # Divide n by 2 to remove all even factors. while n % 2 == 0: max_prime = 2 n //= 2 # Iterate over odd numbers to check for factors. factor = 3 while factor * factor <= n: while n % factor == 0: max_prime = factor n //= factor factor += 2 # If remaining n is a prime number greater than 2. if n > 2: max_prime = n return max_prime def decode_message(T, test_cases): results = [] for i in range(T): N, message = test_cases[i] decoded_message = [largest_prime_factor(num) for num in message] results.append(decoded_message) return results"},{"question":"You are given two strings a and b consisting of lowercase English letters. You need to check if it is possible to rearrange the characters of one string to make it equal to the other string. If it is possible, print \\"YES\\", otherwise print \\"NO\\". -----Input----- The first line contains a string a (1 le |a| le 1000). The second line contains a string b (1 le |b| le 1000). It is guaranteed that both strings contain only lowercase English letters. -----Output----- Print \\"YES\\" if it is possible to rearrange the characters of one string to make it equal to the other string, otherwise \\"NO\\". -----Example----- Input listen silent Output YES Input apple papel Output YES Input hello world Output NO -----Note----- In the first example, rearranging the letters of \\"listen\\" can give \\"silent\\", so the output is \\"YES\\". In the second example, rearranging the letters of \\"apple\\" can give \\"papel\\", so the output is \\"YES\\". In the third example, there is no way to rearrange the letters of \\"hello\\" to get \\"world\\", so the output is \\"NO\\".","solution":"def can_rearrange_to_match(a, b): Checks if it\'s possible to rearrange the characters of one string to make it equal to the other string. Parameters: a (str): First string. b (str): Second string. Returns: str: \\"YES\\" if possible, \\"NO\\" otherwise. return \\"YES\\" if sorted(a) == sorted(b) else \\"NO\\""},{"question":"Given a string s of length n, you need to determine if it is possible to reorder the string such that no two adjacent characters are the same. If it is possible, output one such reordering. If there are multiple valid reorderings, any of them will be accepted. If it is not possible, return \\"Not possible\\". Input The first line contains a single integer n (1 ≤ n ≤ 1000) — the length of string s. The second line contains the string s consisting of lowercase English letters. Output If it is possible to reorder the string such that no two adjacent characters are the same, print the reordered string. Otherwise, print \\"Not possible\\". Example Input 6 aabbcc Output abcabc Input 4 aabb Output abab Input 4 aaa Output Not possible Note In the first example, one valid reordering is \\"abcabc\\". In the second example, one valid reordering is \\"abab\\". In the third example, it is not possible to reorder the string to fulfil the given requirement.","solution":"from collections import Counter import heapq def reorder_string_no_adjacent(n, s): Reorder the string such that no two adjacent characters are the same. If not possible, return \\"Not possible\\". if n == 1: return s # Count the frequency of each character freq = Counter(s) # Create a max heap max_heap = [(-count, char) for char, count in freq.items()] heapq.heapify(max_heap) prev_count, prev_char = 0, \'\' result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) # Add the previous character back if it has count left if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) # Update previous character count and char prev_count, prev_char = count + 1, char result = \'\'.join(result) # If reordering is possible the length should be equal and all adjacent characters should be different if len(result) == n: return result else: return \\"Not possible\\""},{"question":"A treasure hunter is looking for a lost treasure in a grid of size n x m. The grid is represented by an n x m matrix of positive integers, where each integer represents the amount of treasure in that cell. The hunter starts at the top-left cell of the grid (1,1) and wants to move to the bottom-right cell (n,m). The hunter can only move to the right or down from any cell. Determine the maximum amount of treasure the hunter can collect by the time he reaches the bottom-right cell. -----Input----- The input consists of: - The first line containing two integers n (1 ≤ n ≤ 1000) and m (1 ≤ m ≤ 1000) — the number of rows and columns in the grid, respectively. - The next n lines each contain m space-separated integers representing the treasure amounts in each cell of the grid (1 ≤ treasure amount ≤ 100). -----Output----- Print a single integer — the maximum amount of treasure the hunter can collect. -----Examples----- Input 3 3 1 3 1 1 5 1 4 2 1 Output 12 Input 2 2 1 2 3 4 Output 8 -----Note----- In the first example, the maximum treasure can be collected along the path [1,3,5,2,1] summing up to 12. In the second example, the only possible paths yield the maximum sum of 8.","solution":"def max_treasure(n, m, grid): # Create a 2D dp array to store the maximum treasure collected up to each cell dp = [[0] * m for _ in range(n)] # Initialize the starting point dp[0][0] = grid[0][0] # Fill the first row (only right moves are possible) for j in range(1, m): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column (only down moves are possible) for i in range(1, n): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, n): for j in range(1, m): # The hunter can come from the top or from the left dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] # The bottom-right cell contains the maximum treasure that can be collected return dp[n - 1][m - 1]"},{"question":"Sara\'s new online game requires players to create sentences using a random selection of words within a time limit. The game checks if the sentence formed is a valid palindrome after some pre-processing. In pre-processing, all characters and spaces are removed, and the remaining characters are converted to lowercase. Given a sentence, return \'yes\' if the sentence is a valid palindrome after pre-processing, otherwise return \'no\'. ----- Input: ----- - First line contains T no. of test cases. - Each of the next T lines contains a single sentence. ----- Output: ----- For every test case, print \'yes\' if the sentence is a valid palindrome after pre-processing, otherwise print \'no\'. ----- Constraints: ----- 10 points: - 1 leq T leq 10 - Each sentence contains at most 10 words of at most 10 characters each. 20 points: - 1 leq T leq 1000 - Each sentence contains at most 100 words of at most 10 characters each. 70 points: - 1 leq T leq 100000 - Each sentence contains at most 1000 characters. ----- Sample Input: ----- 3 A man a plan a canal Panama race a car Was it a car or a cat I saw ----- Sample Output: ----- yes no yes","solution":"def is_palindrome_sentence(sentence): Returns \'yes\' if the pre-processed sentence is a palindrome, \'no\' otherwise. # Remove all non-alphanumeric characters and convert to lowercase cleaned_sentence = \'\'.join(filter(str.isalnum, sentence)).lower() # Check if the cleaned sentence is a palindrome return \'yes\' if cleaned_sentence == cleaned_sentence[::-1] else \'no\' def check_palindromes(sentences): Given a list of sentences, for each sentence returns \'yes\' if it is a palindrome, otherwise \'no\'. return [is_palindrome_sentence(sentence) for sentence in sentences]"},{"question":"Aman is fascinated by prime numbers and often spends his free time exploring their properties. One day, he came up with an interesting problem involving matrices and prime numbers. He needs your help to solve it. You are given an N times N matrix filled with integers. Your task is to determine if there exists a row or column in the matrix that contains only prime numbers. Input Format The first line contains an integer N, denoting the size of the matrix. The next N lines contain N space-separated integers each, representing the elements of the matrix. Output Format Print \\"YES\\" if there exists a row or column that contains only prime numbers. Otherwise, print \\"NO\\". Constraints 1 leq N leq 1000 1 leq A_{ij} leq 10^6 Sample Input 1 3 2 3 5 4 6 8 7 11 13 Sample Output 1 YES Sample Input 2 3 4 6 8 9 10 12 15 14 16 Sample Output 2 NO Explanation Sample 1: The first row contains only prime numbers (2, 3, 5), so the output is \\"YES\\". Sample 2: None of the rows or columns contain only prime numbers. Hence, the output is \\"NO\\".","solution":"def is_prime(num): Helper function to determine if a number is prime. if num <= 1: return False if num == 2 or num == 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def check_prime_rows_and_columns(matrix): Function to check if any row or column in the matrix consists only of prime numbers. N = len(matrix) # Check rows for prime-only rows for row in matrix: if all(is_prime(num) for num in row): return \\"YES\\" # Check columns for prime-only columns for col in range(N): if all(is_prime(matrix[row][col]) for row in range(N)): return \\"YES\\" return \\"NO\\""},{"question":"You are given an integer array `arr` consisting of `n` elements, and an integer `k`. The task is to find the number of contiguous subarrays within `arr` that have an exact sum of `k`. Example 1: Input: arr = [1, 1, 1], k = 2 Output: 2 Explanation: There are two subarrays [1, 1] and [1, 1] which sum to 2. Example 2: Input: arr = [1, 2, 3], k = 3 Output: 2 Explanation: There are two subarrays [1, 2] and [3] which sum to 3. Example 3: Input: arr = [-1, -1, 1], k = 0 Output: 1 Explanation: There is one subarray [-1, -1, 1] which sums to 0.","solution":"def subarray_sum(nums, k): Returns the number of contiguous subarrays that sum to k. :param nums: List[int] - the input array :param k: int - the target sum :return: int - the number of contiguous subarrays that sum to k count = 0 curr_sum = 0 sum_dict = {0: 1} for num in nums: curr_sum += num if (curr_sum - k) in sum_dict: count += sum_dict[curr_sum - k] sum_dict[curr_sum] = sum_dict.get(curr_sum, 0) + 1 return count"},{"question":"You are a software developer working for a ticket booking company. Your task is to create a system that categorizes each ticket request based on the person\'s age. The system should return a category for a given age: \\"Infant\\" (0-2), \\"Child\\" (3-12), \\"Teen\\" (13-17), \\"Adult\\" (18-64), or \\"Senior\\" (65+). Additionally, your system should handle multiple queries in a single run. **INPUT** - The first line contains an integer T (1 < T < 15) - the number of test cases. - Each of the following T lines contains a single integer representing the age of a person. **OUTPUT** - For each age input, return the appropriate category string on a new line. **SAMPLE INPUT** ``` 4 1 10 15 70 ``` **SAMPLE OUTPUT** ``` Infant Child Teen Senior ``` **Explanation** Here, the number of test cases T is 4. For the ages 1, 10, 15, and 70, the corresponding categories are \\"Infant\\", \\"Child\\", \\"Teen\\", and \\"Senior\\" respectively.","solution":"def categorize_age(age): if age >= 0 and age <= 2: return \\"Infant\\" elif age >= 3 and age <= 12: return \\"Child\\" elif age >= 13 and age <= 17: return \\"Teen\\" elif age >= 18 and age <= 64: return \\"Adult\\" elif age >= 65: return \\"Senior\\" else: raise ValueError(\\"Invalid age\\") def process_ages(ages): categories = [] for age in ages: categories.append(categorize_age(age)) return categories"},{"question":"Given a string consisting of balanced parentheses, determine the depth of the deepest nested pair of parentheses. The depth of a set of nested parentheses corresponds to the maximum number of pairs of parentheses which are contained within another pair. -----Constraints----- - The input string consists of only characters \'(\' and \')\'. - The input string is balanced, i.e., every opening parenthesis has a corresponding closing parenthesis. -----Input----- The input is given from Standard Input in the following format: s -----Output----- Print the depth of the deepest nested pair of parentheses. -----Sample Input----- ((())) -----Sample Output----- 3 The string ((())) has three levels of nested parentheses, so the output is 3.","solution":"def max_depth(s: str) -> int: Returns the depth of the deepest nested pair of parentheses in the string s. max_depth = 0 current_depth = 0 for char in s: if char == \'(\': current_depth += 1 if current_depth > max_depth: max_depth = current_depth elif char == \')\': current_depth -= 1 return max_depth"},{"question":"You are given a list of integers arr. A subsequence is a sequence derived by deleting some or none of the elements of the list without changing the order of the remaining elements. A subsequence is called special if its sum of elements is even and it contains an even number of even numbers. Your task is to find the length of the longest special subsequence in the given list arr. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100) — the size of the list arr. The second line contains n integers a_i (0 ≤ a_i ≤ 100) — the elements of the list arr. -----Output----- Print one integer — the length of the longest special subsequence. -----Examples----- Input 5 4 2 5 3 6 Output 4 Input 3 1 3 5 Output 3 Input 4 2 4 6 8 Output 4 -----Note----- In the first example, the longest special subsequence can be {4, 5, 3, 6}. We can see that the sum is 18 (which is even), and it contains two even numbers (which is even). In the second example, since there are no even numbers, the entire list is a valid special subsequence. In the third example, the longest special subsequence can be {2, 4, 6, 8}. It has a sum of 20 (even) and contains four even numbers (which is even).","solution":"def longest_special_subsequence(arr): This function finds the length of the longest special subsequence. even_count = sum(1 for x in arr if x % 2 == 0) n = len(arr) if even_count % 2 == 0: return n else: return n - 1"},{"question":"David is building a common data structure to store records of items in a warehouse. He decides to use a matrix (2D array) where each cell contains a positive integer that represents the quantity of items in a particular category and shelf. To ensure efficient storage, he wants all the quantities of items in the matrix to be maintained within a specific range every time a new quantity is added. He defines the range as the difference between the maximum and minimum value in the matrix, which should always be less than a predefined limit `L`. Unfortunately, David is not good at programming and needs your help to implement this. He will provide the dimensions of the matrix `M` (rows) and `N` (columns), the predefined limit `L`, and a list of `Q` updates. Each update contains three integers: `r` (row), `c` (column), and `v` (quantity to be added). You need to apply each update in sequence and determine whether, after each update, the range of the quantities in the matrix exceeds `L`. Write a function that processes the updates and returns `YES` if the range exceeds `L` at any point after an update, and `NO` otherwise. **Input:** - The first line contains three integers `M`, `N`, and `L`. - The next line contains `M * N` integers representing the initial quantities in the matrix. - The next line contains a single integer `Q` indicating the number of updates. - The next `Q` lines each contain three integers `r`, `c`, and `v`. **Output:** - For each update, print `YES` if the range exceeds `L` after the update, else print `NO`. **Constraints:** - 1 le M, N le 1000 - 1 le L le 10^9 - 0 le Q le 10^5 - 1 le r le M - 1 le c le N - The initial and updated quantities will be positive integers and not exceed 10^9 **Example Input:** ``` 2 2 5 1 2 3 4 3 1 1 5 2 2 2 1 2 6 ``` **Example Output:** ``` NO NO YES ``` **Explanation:** 1. Initially, the matrix is: 1 2 3 4 After the first update (1, 1, 5), the matrix becomes: 6 2 3 4 The range = 6 - 2 = 4, which is within the limit. Output is \\"NO\\". 2. After the second update (2, 2, 2), the matrix becomes: 6 2 3 6 The range = 6 - 2 = 4, which is within the limit. Output is \\"NO\\". 3. After the third update (1, 2, 6), the matrix becomes: 6 8 3 6 The range = 8 - 3 = 5, which exceeds the limit. Output is \\"YES\\".","solution":"def warehouse_update(M, N, L, initial_matrix, Q, updates): Process the updates on the warehouse matrix and return whether the quantity range exceeds L after each update. # Reshape the initial matrix into a 2D array matrix = [initial_matrix[i * N:(i + 1) * N] for i in range(M)] results = [] max_value = max(initial_matrix) min_value = min(initial_matrix) for r, c, v in updates: # Update the matrix r -= 1 # making the index 0-based c -= 1 matrix[r][c] += v # Update max and min max_value = max(max_value, matrix[r][c]) min_value = min(min_value, matrix[r][c]) # Check the range and compare with L if max_value - min_value > L: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given an array of n integers a_1, a_2, ldots, a_n. Your task is to compute the total number of *subarrays* of the array such that each subarray has an equal number of even and odd integers. A *subarray* is defined as a non-empty sequence that can be derived from the array by deleting some or no elements from the beginning or end without changing the order of the remaining elements. -----Input----- The first line of the input contains one integer t (1 le t le 10) — the number of test cases. Then t test cases follow. The first line of each test case contains one integer n (1 le n le 10^5) — the length of the array. The second line contains n integers a_1, a_2, ldots, a_n (0 le a_i le 10^9). The total sum of n over all test cases does not exceed 10^5. -----Output----- For each test case, print the total number of subarrays that have an equal number of even and odd integers. -----Example----- Input 2 6 1 2 3 4 5 6 5 1 1 2 2 1 Output 9 4","solution":"def count_equal_even_odd_subarrays(t, test_cases): results = [] for case in test_cases: n, arr = case balance_count = {0: 1} balance = 0 result = 0 for num in arr: if num % 2 == 0: balance += 1 else: balance -= 1 if balance in balance_count: result += balance_count[balance] balance_count[balance] += 1 else: balance_count[balance] = 1 results.append(result) return results"},{"question":"Helene the Husky Chef is preparing her famous soup recipe, which requires a specific target volume of mushrooms. She has several containers of mushrooms, each with a different volume in liters. Helene needs to select containers such that their combined volume is as close as possible to the target volume. In case there are two combined volumes equally close to the target volume, Helene will choose the greater one. Help Helene find the combined volume of containers. -----Input----- The first line of the input contains the target volume T (1 leq T leq 2000) in liters. The second line contains the number of containers n (1 leq n leq 200). Each of the following n lines contains one positive integer less than or equal to 2000, denoting the volume of each container in liters. -----Output----- Output one integer, the combined volume of selected containers closest to T. -----Examples----- Sample Input: 1500 5 500 600 700 800 300 Sample Output: 1500","solution":"from itertools import combinations def find_closest_volume(target, containers): n = len(containers) closest_volume = 0 minimal_difference = float(\'inf\') for i in range(1, n + 1): for combo in combinations(containers, i): current_volume = sum(combo) current_difference = abs(current_volume - target) if (current_difference < minimal_difference) or (current_difference == minimal_difference and current_volume > closest_volume): closest_volume = current_volume minimal_difference = current_difference return closest_volume"},{"question":"-----Input----- The first line of the input is a string of lowercase letters (between 1 and 50 characters long, inclusive). The second line of the input contains a positive integer (between 1 and 100, inclusive). -----Output----- Output the transformed string by shifting each character in the input string by the provided integer value in the alphabet. The alphabet wraps around, so \'z\' followed by a shift of 1 becomes \'a\'. -----Examples----- Input abcdef 3 Output defghi Input xyz 4 Output bcd","solution":"def shift_string(input_string, shift_value): Shifts each character in the input string by the provided integer value in the alphabet. Parameters: input_string (str): The input string of lowercase letters. shift_value (int): The integer value to shift each character by. Returns: str: The transformed string with each character shifted. shifted_string = \\"\\" for char in input_string: new_char = chr(((ord(char) - ord(\'a\') + shift_value) % 26) + ord(\'a\')) shifted_string += new_char return shifted_string"},{"question":"Given an array of integers, you are required to find the number of unique triplets (a, b, c) such that a + b + c = 0. An array is a valid input if it contains between 1 and 1000 integers with each integer between -1000 and 1000. Your task is to implement a function that solves the problem for multiple test cases. # Input: - The first line contains the number of test cases `T`. - The first line of each test case contains an integer `n` representing the length of the array. - The second line of each test case contains `n` space-separated integers. # Output: - For each test case, print the number of unique triplets (a, b, c) such that a + b + c = 0. # Constraints: - 1 ≤ T ≤ 10 - 1 ≤ n ≤ 1000 - -1000 ≤ array[i] ≤ 1000 # Sample Input: ``` 2 6 -1 0 1 2 -1 -4 5 0 0 0 0 0 ``` # Sample Output: ``` 2 1 ``` # Explanation: Test case 1: The unique triplets that sum to zero are: 1. (-1, 0, 1) 2. (-1, -1, 2) Test case 2: The unique triplet that sum to zero is: 1. (0, 0, 0) # Note: - Each triplet should be printed in ascending order of the integers within the triplet. - The same triplet in different orders is considered as only one unique triplet.","solution":"def three_sum_zero(nums): nums.sort() res = set() for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i-1]: continue j, k = i + 1, len(nums) - 1 while j < k: total = nums[i] + nums[j] + nums[k] if total == 0: res.add((nums[i], nums[j], nums[k])) while j < k and nums[j] == nums[j + 1]: j += 1 while j < k and nums[k] == nums[k - 1]: k -= 1 j += 1 k -= 1 elif total < 0: j += 1 else: k -= 1 return len(res) def count_three_sum_zero_triplets(test_cases): results = [] for nums in test_cases: results.append(three_sum_zero(nums)) return results"},{"question":"Write a function that takes a list of non-negative integers and returns the largest possible number that can be formed by concatenating them together. # Function Signature: ```python def largest_number(nums: List[int]) -> str: ``` # Input: - A single argument `nums` which is a list of integers `nums[i] (0 ≤ nums[i] ≤ 10^9)`. # Output: - Return a string representation of the largest number that can be formed by concatenating the given list of numbers. # Examples: ```python largest_number([10, 2]) # Output: \\"210\\" largest_number([3, 30, 34, 5, 9]) # Output: \\"9534330\\" largest_number([1]) # Output: \\"1\\" largest_number([10]) # Output: \\"10\\" ``` # Note: - The result may be very large, so you need to return a string instead of an integer. - Given a list `[128, 12]`, the largest number is \\"12812\\" not \\"12128\\". - A sorting strategy can be applied where, for each pair of numbers, the concatenation results determining the larger value. - Handle edge cases where the result could be \\"0\\" (e.g., a list of zeroes). # Constraints: - The length of `nums` is between `1` and `100`. - Each number in `nums` is guaranteed to be non-negative.","solution":"from typing import List def largest_number(nums: List[int]) -> str: def comparator(x, y): return (x + y) > (y + x) nums_str = list(map(str, nums)) nums_str.sort(key=lambda x: x*10, reverse=True) largest_num = \'\'.join(nums_str) return \'0\' if largest_num[0] == \'0\' else largest_num"},{"question":"You are given a list of integers where every element is repeated exactly twice except for one element which appears only once. Write a Python function to find and return that single element. **Function Signature:** ```python def find_single_element(nums: List[int]) -> int: ``` **Input:** - A list of integers `nums` where every integer appears twice except for one that appears once. The length of `nums` is an odd number and between `1` and `3*10^4`. **Output:** - Return the integer that appears only once. **Examples:** ```python assert find_single_element([2, 3, 2, 4, 4]) == 3 assert find_single_element([1, 1, 2, 2, 3, 3, 4]) == 4 assert find_single_element([9]) == 9 ``` **Note:** - The solution should have a time complexity of O(n) and a space complexity of O(1). - You can assume that the input list always follows the given constraints and has exactly one element that appears only once. Hint: You can achieve the desired time complexity with some bit manipulation techniques.","solution":"from typing import List def find_single_element(nums: List[int]) -> int: Finds the single element in the list where every other element appears twice. :param nums: List of integers where every integer appears twice except for one. :return: The integer that appears only once. unique_element = 0 for num in nums: unique_element ^= num return unique_element"},{"question":"A company wants to track their employees\' performance by assigning them badges based on their achievements. The company uses three types of badges - Gold, Silver, and Bronze. Each badge type is awarded for specific criteria based on the number of tasks completed by an employee. - Gold badge: 100 tasks - Silver badge: 50 tasks - Bronze badge: 20 tasks An employee can earn one or more types of badges based on the number of tasks they complete. For example, if an employee completes 120 tasks, they earn 1 Gold badge and 1 Silver badge. If they complete 240 tasks, they earn 2 Gold badges and 2 Silver badges, but still only 1 Bronze badge. You need to write a function to determine the minimum number of tasks required to be completed by an employee to collect a specific set of badges. Function Description Complete the `minTasksForBadges` function in the editor below. `minTasksForBadges` has the following parameter(s): int gold: the number of Gold badges required int silver: the number of Silver badges required int bronze: the number of Bronze badges required Returns int: the minimum number of tasks required Input Format The first line contains three space-separated integers, `gold`, `silver`, and `bronze` representing the number of each type of badge required. Constraints 0 leq gold leq 10^6 0 leq silver leq 10^6 0 leq bronze leq 10^6 Sample Input 1 2 3 1 Sample Output 1 190 Explanation 1 To get 2 Gold badges, 3 Silver badges, and 1 Bronze badge: - 2 Gold badges require 2 times 100 = 200 tasks - 3 Silver badges require 3 times 50 = 150 tasks - 1 Bronze badges require 1 times 20 = 20 tasks The minimum number of tasks required is `max(200, 150, 20) = 200` tasks. Sample Input 2 1 1 1 Sample Output 2 100 Explanation 2 To get 1 Gold badge, 1 Silver badge, and 1 Bronze badge: - 1 Gold badge require 1 times 100 = 100 tasks - 1 Silver badge require 1 times 50 = 50 tasks - 1 Bronze badge require 1 times 20 = 20 tasks The minimum number of tasks required is `max(100, 50, 20) = 100` tasks.","solution":"def minTasksForBadges(gold, silver, bronze): Calculates the minimum number of tasks required to collect the specified number of Gold, Silver, and Bronze badges. Parameters: gold (int): Number of Gold badges required. silver (int): Number of Silver badges required. bronze (int): Number of Bronze badges required. Returns: int: The minimum number of tasks required. tasks_for_gold = gold * 100 tasks_for_silver = silver * 50 tasks_for_bronze = bronze * 20 # The minimum number of tasks required is the maximum of tasks for any badge requirement return max(tasks_for_gold, tasks_for_silver, tasks_for_bronze)"},{"question":"Problem C: Maximum Subarray Sum with One Removal Given an array of integers, find the maximum sum of any subarray with a condition that you can remove at most one element from the subarray. A subarray is defined as a contiguous part of an array. After removing an element (if necessary), the remaining elements must still form a contiguous subarray. Write a function that returns the maximum sum of any subarray after applying the removal operation optimally. Input The input consists of a single test case with the following format: - An integer n (2 leq n leq 10^5), the number of elements in the array. - An array of n integers, where each element a_i (-10^4 leq a_i leq 10^4). Output Output the maximum sum of any subarray with at most one element removed, in a single line. Examples Input ``` 5 1 -2 0 3 -1 ``` Output ``` 4 ``` Explanation The subarray [0, 3] gives the maximum sum 3 with no removal. If we remove -2, the subarray becomes [1, 0, 3], with the sum 4. Input ``` 6 1 -1 1 -1 1 -1 ``` Output ``` 2 ``` Explanation The subarray [1, -1, 1] gives the maximum sum 1 with no removal. If we remove -1, the subarray becomes [1, 1], with the sum 2. Input ``` 3 1 2 3 ``` Output ``` 6 ``` Explanation The subarray [1, 2, 3] gives the maximum sum 6 with no removal needed. Input ``` 4 -1 -2 -3 -4 ``` Output ``` -1 ``` Explanation The subarray [-1] gives the maximum sum -1 with no removal. If we remove any element, the sum remains the same. Note Optimize your function to run in O(n) time complexity.","solution":"def maximumSumWithOneRemoval(n, arr): # Edge case if n == 1: return arr[0] # Initialize dp arrays forward = [0] * n backward = [0] * n # Initialize forward pass forward[0] = arr[0] for i in range(1, n): forward[i] = max(forward[i - 1] + arr[i], arr[i]) # Initialize backward pass backward[n - 1] = arr[n - 1] for i in range(n - 2, -1, -1): backward[i] = max(backward[i + 1] + arr[i], arr[i]) # Find the maximum subarray sum without removing any elements max_sum = max(forward) # Calculate the maximum subarray sum with one element removal for i in range(1, n - 1): max_sum = max(max_sum, forward[i - 1] + backward[i + 1]) return max_sum"},{"question":"You are organizing a coding marathon with multiple participants. The marathon consists of P participants and Q problems. Each participant can submit solutions to the problems, and each submission has a score associated with it. The highest score a participant achieves for each problem is considered their score for that problem. Calculate the total score for each participant, which is the sum of their highest scores for all problems they attempted. -----Constraints----- - P, Q, and participant_id are integers. - 1 leq P leq 10^5 - 1 leq Q leq 10^5 - 1 leq participant_id leq P - 1 leq problem_id leq Q - 0 leq score leq 100 -----Input----- Input is given from Standard Input in the following format: P Q submission_1_participant submission_1_problem submission_1_score ... submission_N_participant submission_N_problem submission_N_score -----Output----- Print P lines where the i-th line contains the total score of the i-th participant. -----Sample Input----- 3 4 1 1 70 1 1 85 1 2 90 2 1 60 3 2 75 3 3 80 3 3 95 -----Sample Output----- 175 60 170 In the sample input, there are 3 participants and 4 problems. The submissions are interpreted as follows: - Participant 1 solved problem 1 with scores 70 and 85, so only the score 85 is considered. They solved problem 2 with a score of 90. Total score: 85 + 90 = 175. - Participant 2 solved problem 1 with a score of 60. Total score: 60. - Participant 3 solved problem 2 with a score of 75 and problem 3 with scores 80 and 95, so only the score 95 is considered. Total score: 75 + 95 = 170.","solution":"def calculate_total_scores(P, Q, submissions): Calculate the total scores for each participant based on their highest submissions for each problem. :param P: int, number of participants :param Q: int, number of problems :param submissions: list of tuples, each tuple contains (participant_id, problem_id, score) :return: list of int, total score for each participant from collections import defaultdict # Dictionary to track the highest score for each (participant, problem) pair scores = defaultdict(lambda: defaultdict(int)) # Process each submission for participant_id, problem_id, score in submissions: if score > scores[participant_id][problem_id]: scores[participant_id][problem_id] = score # Calculate the total score for each participant total_scores = [0] * P for participant_id in range(1, P + 1): total_scores[participant_id - 1] = sum(scores[participant_id].values()) return total_scores # Example use case (uncomment following lines to test manually) # submissions_input = [ # (1, 1, 70), (1, 1, 85), (1, 2, 90), # (2, 1, 60), (3, 2, 75), (3, 3, 80), (3, 3, 95) # ] # P, Q = 3, 4 # print(calculate_total_scores(P, Q, submissions_input))"},{"question":"Given a 2D matrix of integers and a target value, find if the target exists in the matrix. The matrix has the following properties: - Integers in each row are sorted in ascending order from left to right. - Integers in each column are sorted in ascending order from top to bottom. Example 1: Input: matrix = [ [1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30] ] target = 5 Output: True Example 2: Input: matrix = [ [1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30] ] target = 20 Output: False Your Task: You don\'t need to read input or print anything. Your task is to complete the function searchMatrix() which takes the matrix and the target as inputs and returns a boolean value indicating whether the target exists in the matrix or not. Expected Time Complexity: O(m + n) where m is the number of rows and n is the number of columns. Expected Auxiliary Space: O(1). Constraints: 1 ≤ Number of rows, m ≤ 10^3 1 ≤ Number of columns, n ≤ 10^3 -10^9 ≤ matrix[i][j], target ≤ 10^9","solution":"def searchMatrix(matrix, target): Search in a 2D matrix where each row and each column is sorted in ascending order. Args: matrix : list of list of ints : 2D matrix of integers target : int : target integer to find Returns: bool : True if target is found in matrix, False otherwise if not matrix or not matrix[0]: return False rows = len(matrix) cols = len(matrix[0]) # Start from the top-right corner of the matrix row = 0 col = cols - 1 while row < rows and col >= 0: if matrix[row][col] == target: return True elif matrix[row][col] > target: col -= 1 else: row += 1 return False"},{"question":"Given a list of integers, return a new list where each element is the product of all the elements in the original list except the element at the same position. For example, if the input list is `[1, 2, 3, 4]`, the expected output would be `[24, 12, 8, 6]`. # Examples ``` [1, 2, 3, 4] -> [24, 12, 8, 6] [4, 5, 6] -> [30, 24, 20] [7, 3, 2, 9] -> [54, 126, 189, 42] [0, 1, 2, 3] -> [6, 0, 0, 0] [1, 1, 1, 1] -> [1, 1, 1, 1] ```","solution":"def product_except_self(nums): Returns a list where each element is the product of all other elements except the element at the same position in the input list. length = len(nums) if length == 0: return [] # Initialize the answer array with 1 result = [1] * length # temp variable to store running product from the left left_product = 1 for i in range(length): result[i] *= left_product left_product *= nums[i] # temp variable to store running product from the right right_product = 1 for i in range(length - 1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"Given a binary tree, return a list of integers representing the average value of the nodes on each level in a binary tree. Calculate the average as an integer division of the sum of the node values by the count of nodes at that level. Example 1: Input: 3 / 9 20 / 15 7 Output: [3, 14, 11] Explanation: At level 0, values of nodes are [3] Average = 3 / 1 = 3 At level 1, values of nodes are [9, 20] Average = (9 + 20) / 2 = 14 At level 2, values of nodes are [15, 7] Average = (15 + 7) / 2 = 11 Example 2: Input: 1 / 5 2 / 4 6 8 Output: [1, 3, 6] Explanation: At level 0, values of nodes are [1] Average = 1 / 1 = 1 At level 1, values of nodes are [5, 2] Average = (5 + 2) / 2 = 3 At level 2, values of nodes are [4, 6, 8] Average = (4 + 6 + 8) / 3 = 6 Your Task: You don\'t need to read input or print anything. Your task is to complete the function averageValue() that takes root node as input parameter and returns a list of integers containing the average value at each level. The size of the resultant list should be equal to the height of the binary tree and result[i] should store the average value at level i. Expected Time Complexity: O(N), where N is the number of nodes. Expected Auxiliary Space: O(H), where H is the height of binary tree. Constraints: 1 ≤ Number of nodes ≤ 10^4 1 ≤ Data of a node ≤ 10^5","solution":"from collections import deque class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def averageValue(root): if not root: return [] result = [] queue = deque([root]) while queue: level_length = len(queue) level_sum = 0 for _ in range(level_length): node = queue.popleft() level_sum += node.val if node.left: queue.append(node.left) if node.right: queue.append(node.right) result.append(level_sum // level_length) return result"},{"question":"You are working on a program to help a local delivery company optimize its routes. The company serves customers located in various towns, and there are direct roads connecting some pairs of towns. Each road has a certain distance associated with it. Given a list of towns and roads between them with distances, your task is to determine the shortest possible route that starts in a given town, visits all other towns exactly once, and returns to the starting town (i.e., find the minimum Hamiltonian Cycle). Input The input file consists of: - The first line contains an integer `n` (2 ≤ n ≤ 10), the number of towns. - The second line contains the starting town index `s` (0 ≤ s < n). - Each of the next `n` lines contains `n` integers, where the j-th number in the i-th line represents the distance between town `i` and town `j` (0 if `i` equals `j`). Output Output the minimum possible total distance of such a route. Round the result to 2 decimal places if necessary. Examples Input 4 0 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 Output 80.00","solution":"import itertools def calculate_shortest_route(n, s, distances): min_distance = float(\'inf\') # Generate all permutations of towns except the starting town towns = list(range(n)) towns.remove(s) permutations = itertools.permutations(towns) for perm in permutations: current_distance = 0 current_town = s # Calculate the distance for the current permutation for next_town in perm: current_distance += distances[current_town][next_town] current_town = next_town current_distance += distances[current_town][s] # return to starting town min_distance = min(min_distance, current_distance) return round(min_distance, 2) # Example usage: # n = 4 # s = 0 # distances = [ # [0, 10, 15, 20], # [10, 0, 35, 25], # [15, 35, 0, 30], # [20, 25, 30, 0] # ] # print(calculate_shortest_route(n, s, distances))"},{"question":"An up-and-coming social media application needs a way to validate usernames. The rules for a valid username are as follows: 1. The username must be between 5 and 15 characters long. 2. The username can only consist of lowercase English letters. 3. The username must contain at least one vowel (a, e, i, o, or u). Write a function that checks if a given username is valid or not based on the above criteria. -----Input----- The input will be a single line containing a string s, representing the username. The length of the string will be between 1 and 100 characters. -----Output----- Print \\"Valid\\" if the username satisfies all the given criteria. Otherwise, print \\"Invalid\\". -----Examples----- Input johnsmith Output Valid Input jhnsmt Output Invalid Input abcdefghijklmnop Output Invalid Input user007 Output Invalid -----Note----- In the first example, the username \\"johnsmith\\" is valid because it is 9 characters long, contains only lowercase English letters, and contains vowels \\"o\\" and \\"i\\". In the second example, the username \\"jhnsmt\\" is invalid because it does not contain any vowels. In the third example, the username \\"abcdefghijklmnop\\" is invalid because it exceeds the maximum length of 15 characters. In the fourth example, the username \\"user007\\" is invalid because it contains non-letter characters, specifically numbers.","solution":"def is_valid_username(username): Checks if the username meets the specified criteria: 1. The username must be between 5 and 15 characters long. 2. The username can only consist of lowercase English letters. 3. The username must contain at least one vowel. Args: username (str): The username to validate. Returns: str: \\"Valid\\" if the username meets all criteria, otherwise \\"Invalid\\". if len(username) < 5 or len(username) > 15: return \\"Invalid\\" if not username.islower(): return \\"Invalid\\" if not all(\'a\' <= char <= \'z\' for char in username): return \\"Invalid\\" vowels = set(\'aeiou\') if not any(char in vowels for char in username): return \\"Invalid\\" return \\"Valid\\""},{"question":"You are given an array of integers, and you need to determine a subsequence such that the sum of elements in the subsequence is maximum, but no two elements in the subsequence should be adjacent in the original array. A subsequence is a sequence derived from another sequence by deleting some elements without changing the order of the remaining elements. Can you write a program to compute the maximum sum of a subsequence with the above property? Constraints: * 1 ≤ length of the array ≤ 10^5 * -10^6 ≤ array element ≤ 10^6 Input: The input is given from Standard Input in the following format: N a_1 a_2 ... a_N Where: * N is the length of the array. * a_1, a_2, ..., a_N are integers in the array. Output: Print the maximum sum of a subsequence where no two elements are adjacent in the original array. Examples: Input: 5 3 2 5 10 7 Output: 15 Explanation: The maximum sum can be obtained by selecting elements 3, 10, and 2 (3 + 10 + 2 = 15). Input: 4 3 2 7 10 Output: 13 Explanation: The maximum sum can be obtained by selecting elements 3 and 10 (3 + 10 = 13). Input: 6 5 5 10 40 50 35 Output: 80 Explanation: The maximum sum can be obtained by selecting elements 5, 40, and 35 (5 + 40 + 35 = 80).","solution":"def max_non_adjacent_sum(arr): Returns the maximum sum of a subsequence with the property that no two elements in the subsequence are adjacent in the original array. if not arr: return 0 n = len(arr) if n == 1: return max(0, arr[0]) prev_one = max(0, arr[0]) prev_two = 0 for i in range(1, n): current = max(prev_one, prev_two + arr[i]) prev_two = prev_one prev_one = current return prev_one"},{"question":"You are given an undirected graph with N nodes and M edges. Each node is numbered from 1 to N. An \\"island\\" is defined as a subset of nodes such that all nodes in this subset are connected directly or indirectly through edges, and no node in this subset is directly connected to any node outside the subset. Your task is to determine the number of distinct islands in the graph. ------ Input ------ The first line contains an integer T, the number of test cases. Then the test cases follow. Each test case contains N + 1 lines of input. The first line contains two space-separated integers N, the number of nodes, and M, the number of edges. Each of the next M lines contains two space-separated integers u and v representing an edge between nodes u and v. ------ Output ------ For each test case, output in a single line the number of distinct islands in the graph. ------ Constraints ------ 1 ≤ T ≤ 50 1 ≤ N ≤ 10^{5} 0 ≤ M ≤ 2 times 10^{5} 1 ≤ u, v ≤ N Sum N over all testcases is at most 5 cdot 10^{5} Sum M over all testcases is at most 10^{6} ------ Sample Input 1 ------ 2 5 3 1 2 2 3 4 5 4 0 ------ Sample Output 1 ------ 2 4 ------ Explanation 1 ------ Test Case 1: There are two distinct islands: {1, 2, 3} and {4, 5}. Test Case 2: Each of the nodes is isolated, so there are four distinct islands: {1}, {2}, {3}, and {4}.","solution":"from collections import defaultdict def find_islands(N, edges): Return the number of distinct islands in the graph. Parameters: - N (int): number of nodes - edges (list of tuples): list of edges where each edge is represented by a tuple (u, v) Returns: - int: number of distinct islands def dfs(node, visited, graph): stack = [node] visited.add(node) while stack: curr = stack.pop() for neighbor in graph[curr]: if neighbor not in visited: visited.add(neighbor) stack.append(neighbor) graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = set() islands_count = 0 for node in range(1, N + 1): if node not in visited: # Perform DFS to mark all nodes in the same island dfs(node, visited, graph) islands_count += 1 return islands_count def process_test_cases(T, test_cases): results = [] for N, M, edges in test_cases: count_islands = find_islands(N, edges) results.append(count_islands) return results # Read inputs def solve(input_lines): input_iter = iter(input_lines) T = int(next(input_iter)) test_cases = [] for _ in range(T): N, M = map(int, next(input_iter).split()) edges = [tuple(map(int, next(input_iter).split())) for _ in range(M)] test_cases.append((N, M, edges)) results = process_test_cases(T, test_cases) return results"},{"question":"Create a function `findFirstUniqueChar` that takes in a string and returns the first unique character in the string. If there is no unique character, return an underscore (\'_\'). A unique character is one that appears only once in the string. Input: A single line containing the input string. Output: A single character that is the first unique character in the string, or an underscore if no unique character exists. Constraint: - The string will contain at most 10^5 characters. - The string will consist only of lowercase English letters (\'a\'-\'z\'). Sample Input: ``` aabbcdde ``` Sample Output: ``` c ``` Additional Example: Input: ``` aabbcc ``` Output: ``` _ ```","solution":"def findFirstUniqueChar(s): Returns the first unique character in the string `s`. If there is no unique character, returns \'_\'. from collections import Counter # Count the frequency of each character char_count = Counter(s) # Iterate over the string to find the first character with a count of 1 for char in s: if char_count[char] == 1: return char # If no unique character is found, return \'_\' return \'_\'"},{"question":"A city is planning to build a number of public restrooms in various areas and wants to find the optimal locations. The areas of interest are represented by a 2D grid of non-negative integers, where each number represents the population density of that grid cell. The city has identified several subareas, and the restroom should be placed at the location with the highest population density within each subarea. Given the 2D grid and the list of subareas, your task is to find and output the coordinate(s) of the cell(s) with the highest population density for each subarea. In case of ties (i.e., multiple cells with the same highest density), output all such coordinates for that subarea. Input: The input consists of multiple datasets. Each dataset is formatted as follows: n m k grid0,0 grid0,1 ... grid0,m-1 ... gridn-1,0 ... gridn-1,m-1 x1 y1 x2 y2 ... x1 y1 x2 y2 The first line contains three integers, n, m, and k, where n is the number of rows, m is the number of columns, and k is the number of subareas. The next n lines each contain m integers, representing the population density of each cell in the grid. The subsequent k lines each contain four integers, x1, y1, x2, and y2, which define the subarea for each query (top-left corner is (x1, y1) and bottom-right corner is (x2, y2)). You can assume that: 1 ≤ n, m ≤ 1000 1 ≤ k ≤ 500 0 ≤ grid[i][j] ≤ 10^6 0 ≤ x1 ≤ x2 < n 0 ≤ y1 ≤ y2 < m Output: For each subarea, output the coordinates of the cell(s) with the highest population density. If there are multiple such cells, print all of them on separate lines. Example: Input: 3 3 3 10 20 30 25 35 15 5 40 10 0 0 1 1 1 1 2 2 0 0 2 2 Output: 1 1 1 1 2 1 1 1 2 1","solution":"def find_highest_density_locations(n, m, k, grid, subareas): results = [] for x1, y1, x2, y2 in subareas: max_density = -1 max_locations = [] for i in range(x1, x2 + 1): for j in range(y1, y2 + 1): if grid[i][j] > max_density: max_density = grid[i][j] max_locations = [(i, j)] elif grid[i][j] == max_density: max_locations.append((i, j)) results.append(max_locations) return results"},{"question":"Flatten and Filter Write a function that takes a list of lists of integers and returns a sorted list of all the integers that are greater than a specified threshold. **E.g. Input: [[1, 4, 5], [3, 8], [2]], threshold=4 => Output: [5, 8]** *Note: The function should parse through all inner lists, collect the integers that meet the condition, and return them in ascending order.*","solution":"def flatten_and_filter(list_of_lists, threshold): Flattens a list of lists and returns a sorted list of integers greater than the given threshold. Args: list_of_lists (list of lists of int): The input list of lists of integers. threshold (int): The threshold above which integers are included in the output list. Returns: list of int: A sorted list of integers greater than the threshold. result = [] for sublist in list_of_lists: for item in sublist: if item > threshold: result.append(item) return sorted(result)"},{"question":"Rosa is creating a navigation system for delivery robots. The robots move on a grid, starting at the point (0, 0) and move according to commands. The commands are given as a string where each character represents a move: \'U\' for Up, \'D\' for Down, \'L\' for Left, and \'R\' for Right. Each move changes the robot\'s position by one unit in the corresponding direction. Rosa needs to implement a way to find the robot\'s final position after it follows a series of commands. Write a function that takes a string of commands and returns the final coordinates of the robot after it has executed all the commands. -----Input----- The input consists of a single string s (1 ≤ |s| ≤ 100,000) — the string of commands. -----Output----- Output two integers x and y ( - 10^9 ≤ x, y ≤ 10^9 ), representing the final coordinates of the robot after executing the commands. The output should not contain any extra spaces. -----Examples----- Input \\"UURRDDLL\\" Output 0 0 Input \\"UUDDLLRR\\" Output 0 0 Input \\"UUU\\" Output 0 3 Input \\"RRL\\" Output 1 0 -----Note----- For the first sample, the robot starts at (0, 0) and moves Up twice, Right twice, Down twice, and Left twice, ending back at (0, 0). For the second sample, the robot also ends back at the starting point (0, 0) after an equal number of Up and Down, and Left and Right moves.","solution":"def final_position(commands): Given a string of commands, returns the final coordinates of the robot. Args: commands (str): A string of commands consisting of \'U\', \'D\', \'L\', \'R\'. Returns: tuple: A tuple of two integers representing the final coordinates (x, y). x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return x, y"},{"question":"You\'ve just been appointed as a project manager for a large corporation. Your first task is to assign a team to a project. Each team has a skill level and each project has a difficulty level. A project can only be assigned to a team if the team\'s skill level is at least the difficulty level of the project. Each team can only handle one project at a time, and each project can only be handled by one team. Your goal is to maximize the total number of projects assigned to the teams. **Input:** - The first input line contains an integer T (1 ≤ T ≤ 50), the number of test cases. - Each test case starts with two integers N and M (1 ≤ N, M ≤ 100), the number of teams and the number of projects respectively. - The second line contains N integers, the skill levels of the N teams. - The third line contains M integers, the difficulty levels of the M projects. **Output:** For each test case, output a single integer, the maximum number of projects that can be assigned to the teams. **Example:** Input: ``` 2 3 3 3 2 1 2 2 2 2 2 1 2 2 1 ``` Output: ``` 2 1 ``` **Explanation:** In the first test case, one optimal way is to assign: - First project of difficulty 2 to team with skill level 3. - Second project of difficulty 2 to team with skill level 2. - Third project of difficulty 2 can’t be assigned to the remaining team with skill level 1, so it remains unassigned. So, the maximum number of projects assigned is 2. In the second test case, one optimal way is to assign: - First project of difficulty 2 to team with skill level 2. - Second project of difficulty 1 can’t be assigned since the remaining team has skill level 1 which is less than the difficulty level of 1. Hence, only 1 project is assigned. So, the maximum number of projects assigned is 1.","solution":"def max_projects_assigned(T, test_cases): results = [] for test in test_cases: N, M, teams, projects = test teams.sort(reverse=True) projects.sort() assigned_projects = 0 project_index = 0 team_index = 0 while team_index < N and project_index < M: if teams[team_index] >= projects[project_index]: assigned_projects += 1 project_index += 1 team_index += 1 results.append(assigned_projects) return results"},{"question":"You are given an array of n integers. Let\'s define the beauty of an array as the maximum difference between any two of its elements after performing at most one operation of removing an element from the array. Your task is to calculate the maximum beauty of the given array. Input The first line contains a single integer n (1 ≤ n ≤ 100 000) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (-1 000 000 ≤ a_i ≤ 1 000 000) — the elements of the array. Output Print a single integer — the maximum beauty of the array. Examples Input 5 1 5 3 1 2 Output 4 Input 3 -1 -4 6 Output 10 Input 4 7 7 7 7 Output 0 Note In the first example, by removing the element 5, the maximum difference between the remaining elements is 3 - 1 = 4. In the second example, by removing the element -4, the maximum difference between the remaining elements is 6 - (-1) = 7. In the third example, all elements are the same, so the beauty is 0 regardless of which element (if any) is removed.","solution":"def max_beauty_of_array(n, arr): Returns the maximum beauty of the array after removing at most one element. The maximum beauty is defined as the maximum difference between any two elements. if n == 1: return 0 max_value = max(arr) min_value = min(arr) if n == 2: return max_value - min_value # Calculate the beauty without removing any elements beauty_without_removal = max_value - min_value max_second_value = min_second_value = None for val in arr: if val != max_value and (max_second_value is None or val > max_second_value): max_second_value = val if val != min_value and (min_second_value is None or val < min_second_value): min_second_value = val beauty_with_removal1 = max_second_value - min_value if max_second_value is not None else 0 beauty_with_removal2 = max_value - min_second_value if min_second_value is not None else 0 return max(beauty_without_removal, beauty_with_removal1, beauty_with_removal2) # Example usage n = 5 arr = [1, 5, 3, 1, 2] print(max_beauty_of_array(n, arr)) # Output: 4"},{"question":"Problem description. This problem requires you to find the sum of the digits of a given integer for multiple test cases. Input The first line contains an integer T, the number of test cases. The following T lines each contain a single integer N. Output Output should contain T lines, each line with the sum of the digits of the given integer N. Constraints 1 ≤ T ≤ 10^5 1 ≤ N ≤ 10^18 Example Input: 3 1234 567 9 Output: 10 18 9 Explanation The sum of the digits of 1234 is 1 + 2 + 3 + 4 = 10. The sum of the digits of 567 is 5 + 6 + 7 = 18. The sum of the digits of 9 is 9.","solution":"def sum_of_digits(n): Returns the sum of the digits of the given integer n. return sum(int(digit) for digit in str(n)) def process_test_cases(T, cases): Process each test case and return a list of results. Parameters: T (int): The number of test cases. cases (list): A list of integers, each representing a test case. Returns: list: A list of results, each representing the sum of the digits of the given integer. results = [] for case in cases: results.append(sum_of_digits(case)) return results"},{"question":"Write a function that takes a list of integers and returns the sum of the largest contiguous subarray. A contiguous subarray is defined as a subarray consisting of consecutive elements from the original array. The input list will always contain at least one integer and you do not need to consider different data types. Example: ``` Input: [1, -3, 2, 1, -1] Output: 3 ``` Explanation: The largest sum can be obtained from the subarray [2, 1].","solution":"def max_subarray_sum(arr): Returns the sum of the largest contiguous subarray. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"In a large circus, there are n cages arranged in a straight line numbered from 1 to n. Each cage can contain a certain maximum number of animals, given by an array `max_animals` of length n where `max_animals[i]` represents the maximum capacity of the i-th cage. The circus performs two types of operations. The first type is adding a specified number of animals to a specific cage, and the second type is querying the total number of animals across a continuous sequence of cages. Note that you cannot add more animals to a cage than its maximum capacity. You are given an initial array `animals` of n integers where `animals[i]` represents the initial number of animals in the i-th cage (initially zero). Implement a system to handle the following operations efficiently: 1. Add animals to a cage: The operation is represented as `1 u v`, where `u` is the cage index (1 ≤ u ≤ n) and `v` is the number of animals to add. You should add exactly `v` animals to cage `u`, but not exceeding its maximum capacity. 2. Query the total number of animals in a range of cages: The operation is represented as `2 l r`, where `l` and `r` are the range of cages (1 ≤ l ≤ r ≤ n). You should return the total number of animals in cages between `l` and `r` (both inclusive). Input The first line contains two space-separated integers n, m (1 ≤ n, m ≤ 100,000) - the number of cages and the number of operations. The second line contains n space-separated integers `max_animals[i]` (1 ≤ max_animals[i] ≤ 10^8), representing the maximum capacity of each cage. The next m lines describe the operations. Each line begins with an integer type (1 ≤ type ≤ 2), which represents the type of operation. If type = 1, there will be two more integers u and v (1 ≤ u ≤ n; 1 ≤ v ≤ 10^8) describing an operation of type 1. If type = 2, there will be two more integers l and r (1 ≤ l ≤ r ≤ n) describing an operation of type 2. Output For each operation of type 2, print a line containing the result — the total number of animals in the specified range of cages. Examples Input 5 5 10 5 8 7 9 1 2 3 1 1 6 2 1 3 1 3 4 2 1 4 Output 12 20 Note In the first sample, the initial number of animals in the cages is [0, 0, 0, 0, 0]. - After the first operation, the number of animals becomes [0, 3, 0, 0, 0]. - After the second operation, the maximum capacity of the first cage is 10, so after adding 6 animals, it becomes [6, 3, 0, 0, 0]. - The first query asks for the total number of animals in cages 1 through 3: 6 + 3 + 0 = 9. - After the third operation, the number of animals becomes [6, 3, 4, 0, 0]. - The second query asks for the total number of animals between cages 1 and 4: 6 + 3 + 4 + 0 = 13.","solution":"def circus_operations(n, m, max_animals, operations): animals = [0] * n def add_animals(u, v): nonlocal animals if animals[u-1] + v > max_animals[u-1]: animals[u-1] = max_animals[u-1] else: animals[u-1] += v def query_animals(l, r): return sum(animals[l-1:r]) results = [] for operation in operations: if operation[0] == 1: add_animals(operation[1], operation[2]) elif operation[0] == 2: results.append(query_animals(operation[1], operation[2])) return results"},{"question":"Gunnar\'s dislike of nature extends to dealing with unruly creatures that roam the forests near his home. He has devised an innovative trap system to manage the animal population more efficiently. The traps are representation of Gunnar\'s ingenuity – they can be triggered to catch any animal that enters them based on specific animal id\'s that visit them. The traps are arranged in a 2-dimensional grid, and each cell may contain zero or more traps. Additionally, every time an animal enters a trap, Gunnar\'s system logs the event in a structured format. Your task is to determine the number of unique animals that have been trapped at each trap location by processing the log data. Each trap is identified by its grid coordinates (x, y) and each animal by a unique id. The log data entries comprise the animal id and the coordinates of the trap where it was caught. -----Input----- The first line contains two integers h and w, 1 leq h, w leq 500, representing the height and width of the grid, respectively. The second line contains a single integer n, 1 leq n leq 10000, denoting the number of log entries. The next n lines describe a log entry each, with three integers id, x, and y, 1 leq id leq 10^6, 1 leq x leq h, 1 leq y leq w, where id is the animal\'s unique id and (x, y) are the coordinates of the trap that caught the animal. -----Output----- The output should be a 2-dimensional grid of dimensions h times w where the value at each cell (i, j) represents the number of unique animal ids that have been caught by the trap located at coordinates (i, j). Each value in the grid should be separated by a single space. -----Example----- Sample Input: 3 3 5 1 1 2 2 1 2 1 2 2 3 1 2 2 3 3 Sample Output: 0 3 0 0 1 0 0 0 1","solution":"def unique_animals(h, w, n, logs): from collections import defaultdict grid = [[set() for _ in range(w)] for _ in range(h)] for log in logs: animal_id, x, y = log grid[x-1][y-1].add(animal_id) result_grid = [[len(grid[i][j]) for j in range(w)] for i in range(h)] return result_grid # Helper function to format output as a string def format_output(grid): return \'n\'.join(\' \'.join(map(str, row)) for row in grid)"},{"question":"You are given a grid consisting of n rows and m columns. The grid contains 0s and 1s, where 1 denotes an obstacle and 0 denotes a free space. Your task is to determine if there exists a simple path from the top-left corner (1,1) to the bottom-right corner (n,m) that avoids all obstacles. A simple path means moving only right or down at each step. -----Input----- The first line contains two integers n and m (1 le n, m le 1000) — the number of rows and columns in the grid, respectively. The next n lines contain m integers each, representing the grid. Each integer is either 0 or 1. -----Output----- If there is a path from (1,1) to (n,m) avoiding all obstacles, print \\"YES\\". Otherwise, print \\"NO\\". -----Examples----- Input 3 3 0 0 1 0 1 0 0 0 0 Output YES Input 3 3 0 1 1 1 0 1 0 0 0 Output NO -----Note----- In the first example, one possible path is (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3). In the second example, there is no possible path due to obstacles blocking the way.","solution":"def can_escape(grid, n, m): Determines if there exists a path from (1, 1) to (n, m) avoiding all obstacles. Parameters: grid (list of list of int): The grid representing the maze. n (int): The number of rows. m (int): The number of columns. Returns: str: \'YES\' if a path exists, \'NO\' otherwise. if n == 0 or m == 0 or grid[0][0] == 1 or grid[n-1][m-1] == 1: return \\"NO\\" def dfs(x, y): if x == n-1 and y == m-1: return True grid[x][y] = 1 # marks the cell as visited by setting it to 1 # move down if x + 1 < n and grid[x + 1][y] == 0 and dfs(x + 1, y): return True # move right if y + 1 < m and grid[x][y + 1] == 0 and dfs(x, y + 1): return True return False if dfs(0, 0): return \\"YES\\" else: return \\"NO\\""},{"question":"Write a function **\\"decode_message\\"** that takes a **string** and an **integer** **n** that represents the number of positions to shift in the alphabet. The function should return a new **string** where each letter in the original string is shifted by **n** positions in the alphabet. Non-alphabet characters should remain unchanged. The function should handle both uppercase and lowercase letters, and the alphabet should wrap around if the shift goes past \'z\' or \'Z\'. For example: ``` decode_message(\\"abc\\", 2) == \\"cde\\" decode_message(\\"XYZ\\", 1) == \\"YZA\\" decode_message(\\"Hello, World!\\", 3) == \\"Khoor, Zruog!\\" ``` If you want to learn more see https://en.wikipedia.org/wiki/Caesar_cipher","solution":"def decode_message(message, n): Shifts each letter in the message by n positions in the alphabet. Non-alphabet characters remain unchanged. def shift_char(c, n): if \'a\' <= c <= \'z\': start = ord(\'a\') return chr(start + (ord(c) - start + n) % 26) elif \'A\' <= c <= \'Z\': start = ord(\'A\') return chr(start + (ord(c) - start + n) % 26) else: return c return \'\'.join(shift_char(c, n) for c in message)"},{"question":"Write a function that takes an integer n and returns the largest prime number smaller than or equal to n. Use the Sieve of Eratosthenes algorithm for finding all primes up to n efficiently. Input The input consists of a single integer n (2 ≤ n ≤ 10^6). Output The output should be a single integer which is the largest prime number smaller than or equal to n. Examples Input 10 Output 7 Input 100 Output 97","solution":"def largest_prime_up_to_n(n): Returns the largest prime number smaller than or equal to n using the Sieve of Eratosthenes algorithm. if n < 2: return None # No prime number less than 2 # Initialize a boolean array \\"prime[0..n]\\" and set all entries to be True. # A value in prime[i] will finally be False if i is Not a prime, True if i is a prime. prime = [True] * (n + 1) p = 2 while p * p <= n: # If prime[p] is not changed, then it is a prime if prime[p]: # Updating all multiples of p for i in range(p * p, n + 1, p): prime[i] = False p += 1 # Find the largest prime number smaller than or equal to n for p in range(n, 1, -1): if prime[p]: return p"},{"question":"A group of archaeologists is exploring a newly discovered cave system. The cave consists of n chambers connected by m bidirectional tunnels. Each tunnel has a certain length. The archaeologists are interested in finding the shortest path from each chamber to every other chamber. Since they need to visit the cave frequently, setting up permanent infrastructure to quickly compute these paths is essential. **Input:** The first line contains two integers n and m (1 leq n leq 1000, 0 leq m leq n cdot (n - 1) / 2) — the number of chambers and the number of tunnels. Then m lines follow, each containing three integers u, v, and w (1 leq u, v leq n, 1 leq w leq 10^6), representing a tunnel between chambers u and v with length w. It is guaranteed that there are no multiple tunnels between any pair of chambers. **Output:** Output a matrix of size n times n, where the entry in the i-th row and j-th column contains the length of the shortest path from chamber i to chamber j. If there\'s no path between two chambers, output -1 in that position. The diagonal should contain zeroes, as the distance from any chamber to itself is zero. **Example:** Input 4 4 1 2 4 1 3 2 2 3 5 3 4 1 Output 0 4 2 3 4 0 5 6 2 5 0 1 3 6 1 0 Input 3 1 1 2 3 Output 0 3 -1 3 0 -1 -1 -1 0","solution":"def floyd_warshall(n, m, edges): # Initialize the distance matrix with infinite values dist = [[float(\'inf\')] * n for _ in range(n)] # Distance from any node to itself is zero for i in range(n): dist[i][i] = 0 # Set the distances based on the input edges for u, v, w in edges: dist[u - 1][v - 1] = w dist[v - 1][u - 1] = w # Floyd-Warshall algorithm for k in range(n): for i in range(n): for j in range(n): if dist[i][k] != float(\'inf\') and dist[k][j] != float(\'inf\'): dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]) # Convert unreachable distances back to -1 for i in range(n): for j in range(n): if dist[i][j] == float(\'inf\'): dist[i][j] = -1 return dist"},{"question":"You are given two strings, `s` and `t`, where `s` contains only lowercase English letters. Each character in `t` is either a lowercase English letter or a question mark `?`. A question mark can be replaced by any single lowercase English letter to create a match with string `s`. Your task is to find how many distinct positions in `s` can be the start of a substring that matches `t` after replacing the question marks in `t` with appropriate letters. Assume `t` is always shorter than or equal to `s`. -----Input----- The input contains two lines: - The first line contains the string `s`. - The second line contains the string `t`. -----Output----- Output the number of distinct positions in `s` where `t` (after replacing question marks) can match as a substring. -----Examples----- Sample Input 1: abcde ?c? Sample Output 1: 1 Sample Input 2: abacaba a?a Sample Output 2: 3 Sample Input 3: aaaaa ??? Sample Output 3: 3","solution":"def count_matching_positions(s, t): Count the number of positions in string s where t (with \'?\' replaced by any character) can match as a substring. n = len(s) m = len(t) def is_match(sub, template): for i in range(m): if template[i] != \'?\' and sub[i] != template[i]: return False return True count = 0 for i in range(n - m + 1): if is_match(s[i:i + m], t): count += 1 return count"},{"question":"# Snake Case to Camel Case Converter Snake case is a naming convention where each word in a variable name is separated by an underscore (`_`), and all letters are in lower case. For example, `this_is_snake_case`. Camel case is a naming convention where the first letter of the variable name is in lowercase, and each subsequent word starts with an uppercase letter with no spaces or underscores. For example, `thisIsCamelCase`. Write a Python function that converts a string from snake case to camel case. The function should be called `snake_to_camel` and take a single argument, a string `s` representing the snake case string. The function should return the string converted to camel case. Examples: ``` snake_to_camel(\\"hello_world\\") # => \\"helloWorld\\" snake_to_camel(\\"convert_this_string\\") # => \\"convertThisString\\" snake_to_camel(\\"snake_to_camel\\") # => \\"snakeToCamel\\" ``` Assumptions: - The input string will only contain lowercase letters and underscores. - The input string will not start or end with an underscore. - There will be no consecutive underscores within the input string. Write a function `snake_to_camel(s: str) -> str:` to solve the problem.","solution":"def snake_to_camel(s: str) -> str: Converts a snake_case string to camelCase. :param s: The snake_case string. :return: The camelCase version of the string. parts = s.split(\'_\') # Capitalize the first letter of each part except the first one camel_case = parts[0] + \'\'.join(word.capitalize() for word in parts[1:]) return camel_case"},{"question":"A new species of plants, called \\"transplant\\", has a unique way of growing in a garden. A garden is modeled as an N x N grid where (i, j) denotes the i-th row and the j-th column. A transplant can only be planted in squares that are in the bottom half of the garden (i.e., rows from ceil(N/2) to N). Moreover, each transplant planted at (i, j) will extend its roots diagonally to the left, right, and stay in its planted position, thereby affecting the following squares: (i+k, j) for every 1 ≤ k ≤ N-i (i+k, j-k) for every 0 ≤ k ≤ min(N-i, j-1) (i+k, j+k) for every 0 ≤ k ≤ min(N-i, N-j) Determine the maximum number of transplants that can be planted on an N x N grid so that no two transplants have overlapping roots. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. Then the test cases follow. - Each test case consists of a single line of input, containing a single integer N. ------ Output Format ------ For each test case, output in a single line the maximum number of transplants that can be planted on the garden grid such that none of them have overlapping roots. ------ Constraints ------ 1 ≤ T ≤ 10^5 1 ≤ N ≤ 10^9 ------ Sample Input 1 ------ 3 1 2 4 ------ Sample Output 1 ------ 1 1 2 ------ Explanation 1 ------ Test case 1: There is a single square in the bottom half, so we can plant one transplant. Test case 2: The bottom half of a 2x2 grid also has only one square where a transplant can be planted. Test case 3: A 4x4 grid\'s bottom half includes the last two rows. Planting one transplant at (3, 2) and another at (4, 4) ensures maximum utilization without overlapping roots. Placing more than two will result in root overlap.","solution":"def max_transplants(N): if N == 1: return 1 return (N // 2) + (N % 2)"},{"question":"You are given an array of integers representing heights of buildings on a 2D plane. You need to find the maximum area of a rectangle formed by these buildings such that the rectangle\'s sides are parallel to the x-axis and the y-axis. More formally, you are given n non-negative integers h1, h2, ..., hn, where each represents the height of a building. Each building has a width of 1 unit. Find the area of the largest rectangle that can be formed with the constraint that the rectangle\'s bottom edges are aligned with the x-axis. -----Input----- The first line contains a single integer t (1 le t le 100) — the number of test cases. The descriptions of the input data sets follow. The first line of each test case contains one integer n (1 le n le 10^5) — the number of buildings. The second line of each test case contains exactly n integers h_1, h_2, dots, h_n (0 le h_i le 10^9) — the heights of the buildings. It is guaranteed that the sum of n over all test cases does not exceed 10^6. -----Output----- For each of t test cases, print a single integer — the maximum area of a rectangle that can be formed using the given buildings. -----Examples----- Input 3 7 2 1 5 6 2 3 1 4 4 4 4 4 6 1 2 3 4 5 6 Output 10 16 12 -----Note----- In the first test case: The maximum rectangle has an area of 10 and is formed between indices [3, 4] with height 5. In the second test case: The maximum rectangle is the entire width with a height of 4 resulting in an area of 16. In the third test case: The maximum rectangle has an area of 12 and is formed between indices [3, 5] with height 4.","solution":"def max_area_histogram(heights): This function takes a list of integers representing heights of buildings and returns the maximum rectangular area that can be formed with the buildings. max_area = 0 stack = [] for i, height in enumerate(heights): start = i while stack and stack[-1][1] > height: index, h = stack.pop() max_area = max(max_area, h * (i - index)) start = index stack.append((start, height)) for i, height in stack: max_area = max(max_area, height * (len(heights) - i)) return max_area def max_rectangle_areas(t, test_cases): This function takes the number of test cases `t` and a list of test cases, where each test case is a tuple of (n, heights) and returns a list of maximum areas for each test case. results = [] for n, heights in test_cases: results.append(max_area_histogram(heights)) return results"},{"question":"You are given the task of designing an event planner app. One of the important functionalities required is to check the availability of meeting rooms. Each meeting room has a unique schedule that contains the booked slots. You have to determine if a meeting room is available for a new booking. Write a function `isMeetingRoomAvailable(schedules, requestedSlot)` that takes in two arguments: 1. `schedules`: a dictionary where the keys are meeting room names and the values are lists of tuples. Each tuple represents a booked time slot with start and end times in 24-hour format. 2. `requestedSlot`: a tuple representing the desired time slot for the new booking. The function should return the name of the meeting room if it\'s available within the `requestedSlot` time. If more than one room is available, return the first room alphabetically. If no rooms are available, return \\"No meeting room available\\". For example: ```python # Schedules dictionary schedules = { \'RoomA\': [(\'09:00\', \'10:00\'), (\'11:00\', \'12:30\')], \'RoomB\': [(\'08:00\', \'09:30\'), (\'12:00\', \'13:00\')], \'RoomC\': [(\'09:00\', \'10:00\'), (\'10:30\', \'12:00\'), (\'14:00\', \'15:00\')] } # Requested slot requestedSlot = (\'10:00\', \'11:00\') ``` The function call `isMeetingRoomAvailable(schedules, requestedSlot)` should return: ``` \'RoomA\' ``` Note: - The requested start time and end time are inclusive. - Time is represented as strings in 24-hour format, e.g., \'09:00\', \'13:45\'. - No meetings overlap if they touch at the end/beginning, e.g., (\'09:00\', \'10:00\') and (\'10:00\', \'11:00\') are consecutive but not overlapping.","solution":"def isMeetingRoomAvailable(schedules, requestedSlot): def are_slots_conflicting(slot1, slot2): return not (slot1[1] <= slot2[0] or slot2[1] <= slot1[0]) start_req, end_req = requestedSlot available_room = None for room in sorted(schedules.keys()): is_available = True for booked_slot in schedules[room]: if are_slots_conflicting(booked_slot, requestedSlot): is_available = False break if is_available: available_room = room break return available_room if available_room else \\"No meeting room available\\""},{"question":"You are given an undirected connected graph with N nodes and M edges. Each node has a color assigned to it, where the color of the i-th node is denoted by c[i]. A set S of nodes is called colorful if no two nodes in S have the same color. Count the number of colorful sets modulo 10^{9}+7. Two sets are different if one node is included in one set and not in the other. A set can be empty. ------ Input ------ The first line contains an integer T, the number of test cases. Then the test cases follow. Each test case contains several lines of input. The first line contains two space-separated integers N and M, the number of nodes and the number of edges in the graph respectively. The second line contains N space-separated integers c[i] representing the colors of each node. Each of the next M lines contains two space-separated integers u and v representing an edge between nodes u and v. ------ Output ------ For each test case, output in a single line the number of colorful sets modulo 10^{9} + 7. ------ Constraints ------ 1 ≤ T ≤ 50 1 ≤ N ≤ 10^{5} 0 ≤ M ≤ 10^{5} 1 ≤ u, v ≤ N 1 ≤ c[i] ≤ 10^5 Sum N over all testcases is at most 5cdot 10^{5}. The given input is a valid connected graph. ------ Subtasks ------ Subtask #1 (20 points): 1 ≤ T ≤ 10 1 ≤ N ≤ 3cdot 10^{3} 0 ≤ M ≤ 3cdot 10^{3} Subtask #2 (80 points): Original Constraints ------ Sample Input 1 ------ 2 4 3 1 2 2 3 1 2 2 3 3 4 5 4 1 2 3 4 5 1 2 2 3 3 4 4 5 ------ Sample Output 1 ------ 8 32 ------ Explanation 1 ------ Test Case 1: The valid sets are {}, {1}, {2}, {3}, {4}, {1, 2}, {1, 3}, {1, 4}. All other combinations include nodes with the same color. Test Case 2: All possible subsets of nodes are valid as all nodes have unique colors.","solution":"MOD = 10**9 + 7 def count_colorful_sets(N, M, colors, edges): from collections import defaultdict color_count = defaultdict(int) # Count the frequency of each color for color in colors: color_count[color] += 1 # Compute the number of colorful sets # Each unique color can either be included in the set or not (2 choices) unique_colors = len(color_count) colorful_sets = pow(2, unique_colors, MOD) return colorful_sets def process_test_cases(T, test_cases): results = [] for i in range(T): N, M = test_cases[i][0] colors = test_cases[i][1] edges = test_cases[i][2:] result = count_colorful_sets(N, M, colors, edges) results.append(result) return results"},{"question":"You are given a list of integers. Your task is to reverse the order of elements between the first and last occurrence of the maximum element in the list. If the maximum element occurs only once, return the original list. Example: - Input: [1, 3, 2, 7, 5, 7, 4] - Output: [1, 3, 2, 7, 5, 7, 4] Example: - Input: [1, 3, 7, 2, 7, 5, 4, 7] - Output: [1, 3, 7, 4, 5, 7, 2, 7]","solution":"def reverse_between_max_elements(lst): Reverse the order of elements between the first and last occurrence of the maximum element in the list. If the maximum element occurs only once, return the original list. if not lst: return lst max_element = max(lst) first_index = lst.index(max_element) last_index = len(lst) - 1 - lst[::-1].index(max_element) if first_index == last_index: return lst return lst[:first_index+1] + lst[first_index+1:last_index][::-1] + lst[last_index:] # Test the function with a couple of examples print(reverse_between_max_elements([1, 3, 2, 7, 5, 7, 4])) # Output: [1, 3, 2, 7, 5, 7, 4] print(reverse_between_max_elements([1, 3, 7, 2, 7, 5, 4, 7])) # Output: [1, 3, 7, 4, 5, 7, 2, 7]"},{"question":"Kolya has a garden with n flowers planted in a row. Each flower has a certain beauty value associated with it, denoted by a_i where 1 leq i leq n. The garden has a special characteristic: the beauty values of the flowers are not arbitrary; they form a permutation of the numbers from 1 to n. Kolya decides to perform some operations to rearrange the flowers. In one operation, he can choose any two adjacent flowers and swap them. The goal is to maximize the sum of the beauty values of all the flowers in Kolya\'s garden, but with a special constraint: after performing a number of operations, no flower is allowed to move more than k positions away from its original position. Your task is to determine the maximum possible sum Kolya can achieve under this constraint. -----Input----- The first line contains two integers n (1 leq n leq 1000) and k (1 leq k leq n-1) — the number of flowers and the maximum distance any flower can be moved from its original position. The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq n) — the beauty values of the flowers in the garden. It is guaranteed that a is a permutation. -----Output----- Print a single integer — the maximum possible sum of the beauty values of all the flowers after performing any number of operations under the given constraint. -----Examples----- Input 6 2 3 1 6 5 2 4 Output 21 Input 5 1 1 2 3 4 5 Output 15 -----Note----- In the first example, the optimal way is to move flower with beauty value 6 to the third position, flower with beauty value 5 to the fourth position, and flower with beauty value 4 to the fifth position. Thus, the maximum sum is 3 + 6 + 5 + 2 + 4 + 1 = 21. In the second example, since k=1, no flower can be moved and the sum of beauty values is 1 + 2 + 3 + 4 + 5 = 15.","solution":"def max_flower_beauty(n, k, a): Returns the maximum possible sum of beauty values of all flowers after performing any number of operations under the given constraint. # To maximize the sum with the constraint, we sort the array in descending order # but we only rearrange elements within k distance. # Iterate over each segment of length k using a sliding window approach. for i in range(0, n, k): # sort each segment in descending order a[i:i+k] = sorted(a[i:i+k], reverse=True) # Sorting segments return sum(a) # Example usage: # n = 6, k = 2, a = [3, 1, 6, 5, 2, 4] # This should return 21"},{"question":"A company is organizing a contest involving puzzles. Each puzzle has two themes, and there are n participants, each of whom has a preferred theme. For each puzzle, you need to decide which participant will find it the most interesting. If multiple participants find a puzzle equally interesting, any of them can solve it. Your task is to assign participants to puzzles based on their interests in the themes. Each participant and each puzzle theme is represented by an integer. For convenience, we enumerate all themes with integers from 1 to 10^6. A participant will be very interested in a puzzle if one of their preferred themes matches either of the themes of the puzzle. If there are multiple participants with the same level of interest in a puzzle, assign the puzzle to any one of them. -----Input----- The first line of the input contains a positive integer n (1 ≤ n ≤ 200 000) — the number of participants. The second line contains n positive integers p_1, p_2, ..., p_{n} (1 ≤ p_{i} ≤ 10^6), where p_{i} is the preferred theme of the i-th participant. The third line contains a positive integer m (1 ≤ m ≤ 200 000) — the number of puzzles in the contest. The fourth line contains m integers q1_1, q1_2, ..., q1_{m} (1 ≤ q1_{i} ≤ 10^6), where q1_{i} is the first theme of the i-th puzzle. The fifth line contains m integers q2_1, q2_2, ..., q2_{m} (1 ≤ q2_{j} ≤ 10^6), where q2_{j} is the second theme of the j-th puzzle. It is guaranteed that the two themes of each puzzle are distinct, that is q1_{i} ≠ q2_{j} for all puzzles. -----Output----- Print m integers, where the i-th integer is the index of the participant who will find the i-th puzzle the most interesting. If multiple participants are equally interested in a puzzle, print any of their indices. -----Examples----- Input 3 1 2 3 2 2 4 3 1 Output 1 2 Input 4 5 6 7 8 3 4 5 6 7 8 9 Output 2 3 4 -----Note----- In the first sample, the first puzzle has themes 2 and 3. The first participant\'s theme matches the second theme of this puzzle, so the first participant is assigned to the first puzzle. The second puzzle has themes 4 and 1. The second theme matches the first participant\'s theme, so the first participant is also a valid assignment for this puzzle, but since we can choose any, we print the first participant as the solver of the first puzzle and the second participant for the second puzzle. In the second sample, each puzzle gets assigned to the participant exactly matching one of its themes. Therefore, puzzle 1 is assigned to participant 2, puzzle 2 to participant 3, and puzzle 3 to participant 4.","solution":"def assign_puzzles(participant_themes, puzzle_first_themes, puzzle_second_themes): Assigns each puzzle to a participant who finds it most interesting based on their preferred theme. :param participant_themes: List of preferred themes of each participant :param puzzle_first_themes: List of first themes of each puzzle :param puzzle_second_themes: List of second themes of each puzzle :return: List of participant indices assigned to each puzzle theme_map = {} for index, theme in enumerate(participant_themes): if theme not in theme_map: theme_map[theme] = [] theme_map[theme].append(index + 1) result = [] for i in range(len(puzzle_first_themes)): first_theme = puzzle_first_themes[i] second_theme = puzzle_second_themes[i] if first_theme in theme_map: result.append(theme_map[first_theme][0]) elif second_theme in theme_map: result.append(theme_map[second_theme][0]) else: result.append(1) # Fallback in case not found any (problem constraints guarantee at least one match) return result"},{"question":"Hannah has a collection of n distinct integers represented as an array b_1, b_2, ..., b_{n}. She wants to transform this array such that the difference between the maximum and minimum value in the transformed array is minimized. The transformation Hannah can perform is to add or subtract a value k to each integer in the array. Help Hannah find the minimum possible difference between the maximum and minimum value in the transformed array. -----Input----- The first line contains two integers n and k (1 ≤ n ≤ 10^5, 0 ≤ k ≤ 10^9). The second input line contains n space-separated integers b_1, b_2, ..., b_{n} (-10^9 ≤ b_{i} ≤ 10^9). It is guaranteed that all integers in the array are distinct. -----Output----- Print a single integer — the minimum possible difference between the maximum and minimum value in the transformed array. -----Examples----- Input 3 4 1 3 6 Output 0 Input 5 5 4 8 12 16 20 Output 6 -----Note----- In the first sample, Hannah can add 3 to the first element and subtract 2 from the third element to get the array [4, 7, 4], resulting in a difference of 0 between the maximum and minimum. In the second sample, applying the transformation yields the smallest possible difference of 6, as altering each element by ±5 brings all numbers to the range [9, 9, 9, 9, 10].","solution":"def minimize_difference(n, k, b): This function finds the minimal possible difference between the maximum and minimum value in the transformed array. max_val = max(b) min_val = min(b) transformed_max = max_val - k transformed_min = min_val + k if transformed_max < transformed_min: return 0 else: return transformed_max - transformed_min"},{"question":"Write a function that takes a list of integers and returns a new list containing all the elements of the original list that are prime numbers. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Examples: ```python filter_primes([10, 15, 3, 7, 9, 11]) # should return [3, 7, 11] filter_primes([4, 6, 8, 10]) # should return [] ``` Constraints: - The input list will contain at least one element. - The elements in the input list will be non-negative integers (0 or positive).","solution":"def is_prime(n): Helper function to determine if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def filter_primes(nums): Returns a list of prime numbers from the given list of integers. return [num for num in nums if is_prime(num)]"},{"question":"Alice loves puzzles. One day, she came across an interesting problem involving sequences of numbers. Alice has a sequence of integers and she needs to find the longest subsequence which is strictly increasing. Given an array of integers `a` of length `n`, you need to determine the length of the longest strictly increasing subsequence (LIS). Note: - A subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. Input The first line contains a single integer `t` (1 ≤ t ≤ 10^4) — the number of test cases. Then the descriptions of the test cases follow. For each test case: - The first line contains the integer `n` (1 ≤ n ≤ 10^3) — the length of the sequence. - The second line contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 10^4) — the sequence of integers. Output For each test case, print a single integer — the length of the longest strictly increasing subsequence. Example Input 2 5 10 9 2 5 3 6 0 1 0 3 2 3 Output 2 4 Explanation For the first test case, the longest strictly increasing subsequence is either [2, 5] or [2, 3], hence the length is 2. For the second test case, the longest strictly increasing subsequence is [0, 1, 2, 3], hence the length is 4.","solution":"def length_of_lis(nums): Helper function to find the length of the longest increasing subsequence in a single array. if not nums: return 0 dp = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) def longest_increasing_subsequence(t, cases): Function to handle multiple test cases and return the length of the longest increasing subsequence for each. results = [] for n, a in cases: results.append(length_of_lis(a)) return results"},{"question":"Maria is participating in a treasure hunt game, and she must decrypt messages to find the treasure. Each message consists of a string formed by \'L\' and \'R\' characters, representing turns to the left and right, respectively. To find the treasure, Maria needs to turn the initial direction (facing North) according to the sequence of instructions in the message. A turn \'L\' changes the direction 90 degrees counterclockwise: - North -> West - West -> South - South -> East - East -> North A turn \'R\' changes the direction 90 degrees clockwise: - North -> East - East -> South - South -> West - West -> North Write a program to determine Maria\'s final direction after following the series of turns. -----Input----- The input consists of a single string (1 ≤ length ≤ 100), consisting only of characters \'L\' and \'R\'. -----Output----- Output the final direction Maria is facing, which can be \'North\', \'East\', \'South\', or \'West\'. -----Examples----- Sample Input: LRLRL Sample Output: West Sample Input: RRRR Sample Output: North Sample Input: LLL Sample Output: East","solution":"def final_direction(sequence): Determines the final direction after following the sequence of turns given. Parameters: sequence (str): A string of \'L\' and \'R\' characters representing left and right turns. Returns: str: The final direction Maria is facing. directions = [\'North\', \'East\', \'South\', \'West\'] current_direction_index = 0 # starts facing North for turn in sequence: if turn == \'L\': current_direction_index = (current_direction_index - 1) % 4 elif turn == \'R\': current_direction_index = (current_direction_index + 1) % 4 return directions[current_direction_index]"},{"question":"In a university, the grades for a particular course are stored in a list. Each student is represented by a pair of integers: the student ID and their grade. The university follows a merit-based approach, and students with higher grades get preference in course enrollment. If two students have the same grade, the student with the smaller ID gets preference. Your task is to determine the highest grade among the students who have a unique grade. Input The first line contains an integer n (1 ≤ n ≤ 105) — the number of students. The following n lines each contain two integers si and gi (1 ≤ si ≤ 109, 1 ≤ gi ≤ 100) — the student ID and the grade of the i-th student. Output Output a single integer — the highest unique grade. If no grade is unique, output -1. Examples Input 5 1 95 2 85 3 95 4 75 5 70 Output 85 Input 4 1 90 2 90 3 80 4 80 Output -1 Note In the first sample, grades 95 and 75 are repeated, leaving grades 85 and 70. The highest unique grade is 85. In the second sample, all grades are repeated, so there is no unique grade, and the output is -1.","solution":"def highest_unique_grade(n, students): Returns the highest unique grade among the students. If no grade is unique, returns -1. :param n: Number of students :param students: List of tuples (student_id, grade) :return: Highest unique grade or -1 from collections import defaultdict grade_count = defaultdict(int) # Count the occurrence of each grade for _, grade in students: grade_count[grade] += 1 # Filter out non-unique grades and find the maximum unique_grades = [grade for grade, count in grade_count.items() if count == 1] if not unique_grades: return -1 return max(unique_grades)"},{"question":"Marcus has a robotic toy that performs movements based on a sequence of instructions. Each instruction is a letter where: - \'L\' instructs the robot to move one unit to the left (-1 on the x-axis). - \'R\' instructs the robot to move one unit to the right (+1 on the x-axis). - \'U\' instructs the robot to move one unit up (+1 on the y-axis). - \'D\' instructs the robot to move one unit down (-1 on the y-axis). The robot starts at the origin point (0, 0) and follows a sequence of these instructions. Marcus wants to know the final position of the robot after executing a series of such instructions. Write a program that computes the final coordinates of the robot. Input - First line contains an integer T, the number of test cases. - The next T lines each contain a string of instructions consisting of the characters \'L\', \'R\', \'U\', \'D\'. Output - For each test case, output the final coordinates (x, y) of the robot after executing the instructions in the format \\"x y\\". Constraints 1 ≤ T ≤ 50 1 ≤ length of each instruction sequence ≤ 100 Example Input: 2 LLRR UUDD Output: 0 0 0 0","solution":"def final_position_after_instructions(T, instructions_list): results = [] for instructions in instructions_list: x, y = 0, 0 for instruction in instructions: if instruction == \'L\': x -= 1 elif instruction == \'R\': x += 1 elif instruction == \'U\': y += 1 elif instruction == \'D\': y -= 1 results.append(f\\"{x} {y}\\") return results"},{"question":"Given a list of non-negative integers, create a program that identifies all \\"special\\" numbers within the list. A \\"special\\" number is one that is equal to the sum of the factorials of its digits. For example, the number 145 is special because ( 1! + 4! + 5! = 1 + 24 + 120 = 145 ). -----Input----- The first line contains an integer N (1 leq N leq 50), the number of integers in the list. Each of the following N lines contains a non-negative integer A_i (0 leq A_i leq 1,000,000). -----Output----- Output a single line containing the \\"special\\" numbers from the list, separated by spaces. If there are no special numbers, output \\"None\\". -----Examples----- Sample Input 1: 4 1 2 145 407 Sample Output 1: 1 2 145 Sample Input 2: 3 10 234 400 Sample Output 2: None","solution":"import math def find_special_numbers(numbers): def is_special_number(number): return number == sum(math.factorial(int(digit)) for digit in str(number)) special_numbers = [num for num in numbers if is_special_number(num)] return special_numbers if special_numbers else [\\"None\\"] def special_numbers_input_output(N, integers): special_numbers = find_special_numbers(integers) print(\\" \\".join(map(str, special_numbers)))"},{"question":"You are given two strings s and t. You need to check if it is possible to convert string s into string t by deleting some characters (possibly none) from s without changing the order of the remaining characters. Write a function that takes s and t as input and returns true if you can convert s into t by deleting some characters from s, otherwise returns false. Example 1: Input: s = \\"abpcplea\\", t = \\"apple\\" Output: true Explanation: By deleting the characters \'b\', \'c\', \'p\', and \'l\', the string \\"abpcplea\\" can be converted to \\"apple\\". Example 2: Input: s = \\"abc\\", t = \\"cba\\" Output: false Explanation: It is not possible to convert \\"abc\\" into \\"cba\\" by deleting some characters and keeping the order of the remaining characters same. Example 3: Input: s = \\"abc\\", t = \\"abcd\\" Output: false Explanation: The length of t is greater than s, so it is impossible to convert s into t. Example 4: Input: s = \\"aaaaa\\", t = \\"aa\\" Output: true Explanation: By deleting the characters \'aaa\', the string \\"aaaaa\\" can be converted to \\"aa\\".","solution":"def is_subsequence(s, t): Checks if string t can be created by deleting some characters from string s without changing the order of the remaining characters. :param s: The original string :param t: The target string :return: True if t can be constructed from s, otherwise False t_idx = 0 t_len = len(t) for char in s: if t_idx < t_len and char == t[t_idx]: t_idx += 1 return t_idx == t_len"},{"question":"Anita is fascinated by palindromic numbers. A number is a palindrome if it reads the same forwards and backwards, such as 121 or 9889. Anita is also interested in prime numbers. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Anita starts to write out the palindromic prime numbers in increasing order: 2, 3, 5, 7, 11, 101, 131, dots. Output the n-th element of this sequence (the elements are numbered from 1). -----Input----- The first line contains one integer q (1 le q le 100) — the number of test cases. Then q test cases follow. Each test case consists of one line containing one integer n (1 le n le 200). -----Output----- For each test case, output in a separate line one integer y — the n-th element of the sequence that Anita wrote out. -----Examples----- Input 5 1 2 3 4 5 Output 2 3 5 7 11 -----Note----- None","solution":"def is_palindromic(n): Checks if a number is palindromic. return str(n) == str(n)[::-1] def is_prime(n): Checks if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while (i * i) <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def nth_palindromic_prime(n): Returns the nth palindromic prime number. count = 0 number = 1 while True: number += 1 if is_palindromic(number) and is_prime(number): count += 1 if count == n: return number def get_palindromic_primes(q, test_cases): For each test case, returns the nth palindromic prime number. results = [] for n in test_cases: results.append(nth_palindromic_prime(n)) return results"},{"question":"Given two strings s and t of equal length, find the minimum number of adjacent swaps required to transform string s into string t. An adjacent swap consists of swapping two consecutive characters in the string. -----Input----- The input consists of two lines. The first line contains the string s, and the second line contains the string t. Both strings have equal length, and they consist of only lowercase English letters. -----Output----- Output a single integer representing the minimum number of adjacent swaps required. -----Constraints----- - 1 ≤ length of s = length of t ≤ 1,000 - s and t contain only lowercase English letters. -----Example----- Input: abcd dcba Output: 6 -----Explanation----- To transform \\"abcd\\" into \\"dcba\\", we need to perform the following swaps: 1. Swap \'d\' with \'c\' -> abdc (1 swap) 2. Swap \'d\' with \'b\' -> adbc (2 swaps) 3. Swap \'d\' with \'a\' -> dabc (3 swaps) 4. Swap \'a\' with \'b\' -> dabc (no swap needed, but just place explanation) 5. Swap \'a\' with \'c\' -> dbac (4 swaps) 6. Swap \'a\' with \'b\' -> dbca (5 swaps) 7. Swap \'a\' with \'c\' -> dcba (6 swaps) Minimum number of swaps required: 6.","solution":"def min_adjacent_swaps(s, t): Returns the minimum number of adjacent swaps required to transform string s into string t. if sorted(s) != sorted(t): return -1 swaps = 0 s = list(s) for i in range(len(s)): if s[i] != t[i]: j = i while s[j] != t[i]: j += 1 while j > i: s[j], s[j - 1] = s[j - 1], s[j] swaps += 1 j -= 1 return swaps"},{"question":"In a distant kingdom, there are n hills connected by n - 1 paths forming a tree. Each hill is uniquely numbered from 1 to n. Atnightfall, the kingdom is illuminated by k beacons, each placed on a different hill, to ensure all hills are lit. The king demands a systematic lighting strategy so that all hills are covered using the minimum number of beacons possible, and each beacon should be placed in such a way that it lights at least one hill which wasn\'t lit directly by any other beacon. A beacon placed on hill i lights hill i and all hills directly connected to it by a path (adjacent hills). Devise a strategy to help the king light all hills with the minimum number of beacons. -----Input----- The first line of the input contains two integers n and k (2 ≤ n ≤ 100 000, 1 ≤ k ≤ n) — the number of hills and the maximum number of beacons. The second line contains k distinct integers b_1, b_2, ..., b_k (1 ≤ b_{i} ≤ n) — indices of hills where beacons can be placed. The next n - 1 lines contain the description of paths. Each line contains a pair of integers x_{j} and y_{j} (1 ≤ x_{j}, y_{j} ≤ n), which means that the j-th path connects hills x_{j} and y_{j}. -----Output----- Print the minimum number of beacons required to cover all hills. If it\'s not possible, print -1. -----Examples----- Input 5 2 1 3 1 2 1 3 3 4 3 5 Output 2 Input 6 3 1 4 6 1 2 1 3 4 5 4 6 3 4 Output 3 In the first example, placing beacons on hills 1 and 3 ensure all hills are covered. Each beacon covers its adjacent hills, leading to full coverage. In the second example, one possible way to cover all hills is to use beacons on hills 1, 4, and 6. Every hill is covered by these beacons and their adjacent connections.","solution":"from collections import defaultdict, deque def min_beacons(n, k, beacon_hills, paths): if k >= n: return n adjacency_list = defaultdict(list) for path in paths: x, y = path adjacency_list[x].append(y) adjacency_list[y].append(x) beacons = set(beacon_hills) covered = set(beacon_hills) for b in beacon_hills: for neighbor in adjacency_list[b]: covered.add(neighbor) return len(beacons) if len(covered) == n else -1"},{"question":"In a small town, there is a popular path between two intersections A and B. Every day, numerous townspeople travel between these intersections. We need to track the number of people who traverse this path on each day of a given week. We represent the town\'s path between intersections A and B as a sequence of events. Each event is recorded as a timestamp (integer in seconds) and a type (\'A\' for arrivals at intersection B and \'D\' for departures from intersection A). You need to write a program that processes this sequence of events and determines the peak number of people who are traveling on the path at any given time. The peak number of people traveling on the path is defined as the maximum number of people who are on the path simultaneously at any moment during the day. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of events. The following n lines each contain an integer timestamp (1 ≤ timestamp ≤ 10^9) and a character (\'A\' or \'D\') denoting an arrival or a departure. It is guaranteed that for each day the events list is well-formed, meaning for each departure \'D\', there is a corresponding previous arrival \'A\'. -----Output----- Print a single integer, the maximum number of people on the path simultaneously at any moment during the day. -----Examples----- Input 6 1 A 5 A 8 D 10 A 12 D 15 D Output 2 Input 4 2 A 3 D 4 A 6 D Output 1","solution":"def find_peak_people(events): events.sort() max_travelers = 0 current_travelers = 0 for event in events: if event[1] == \'A\': current_travelers += 1 if current_travelers > max_travelers: max_travelers = current_travelers elif event[1] == \'D\': current_travelers -= 1 return max_travelers def process_events(n, event_list): events = [] for event in event_list: timestamp, event_type = event.split() events.append((int(timestamp), event_type)) return find_peak_people(events)"},{"question":"You are given the task of designing a simple command-line-based to-do list application. This application allows users to add, delete, and list tasks. Each task has a priority associated with it, and the tasks are listed in order of their priority. Your task is to implement the following commands: 1. `add task_name priority` - Adds a task with the given name and priority. 2. `delete task_id` - Deletes the task with the given ID. 3. `list` - Lists all tasks in order of their priority. Tasks with lower priority numbers are listed first. If two tasks have the same priority, they are listed in the order they were added. Each task has a unique ID assigned to it, starting from 1 and incrementing by 1 for each new task. The IDs should not be reused even after tasks are deleted. # Input The first line of input contains an integer `n` (1 ≤ n ≤ 100), representing the number of commands. Each of the next `n` lines contains a command in one of the formats specified above. # Output For each `list` command, output the tasks in the specified order. Each task should be printed on a new line in the format `task_id task_name priority`. There should be no output for `add` and `delete` commands. # Example **Input** ``` 5 add task1 2 add task2 1 list delete 1 list ``` **Output** ``` 2 task2 1 1 task1 2 2 task2 1 ``` # Note In the example: 1. The first command adds \\"task1\\" with priority 2. 2. The second command adds \\"task2\\" with priority 1. 3. The third command lists the tasks: \\"task2\\" appears first because it has a higher priority. 4. The fourth command deletes the task with ID 1 (\\"task1\\"). 5. The fifth command lists the remaining tasks. \\"task2\\" is the only remaining task.","solution":"class ToDoList: def __init__(self): self.tasks = {} self.next_id = 1 def add(self, task_name, priority): task_id = self.next_id self.tasks[task_id] = (task_name, priority) self.next_id += 1 def delete(self, task_id): if task_id in self.tasks: del self.tasks[task_id] def list(self): sorted_tasks = sorted(self.tasks.items(), key=lambda x: (x[1][1], x[0])) result = [] for task_id, (task_name, priority) in sorted_tasks: result.append(f\\"{task_id} {task_name} {priority}\\") return result def process_commands(n, commands): todo_list = ToDoList() output = [] for command in commands: parts = command.split() if parts[0] == \\"add\\": task_name = parts[1] priority = int(parts[2]) todo_list.add(task_name, priority) elif parts[0] == \\"delete\\": task_id = int(parts[1]) todo_list.delete(task_id) elif parts[0] == \\"list\\": output += todo_list.list() return output"},{"question":"In a faraway kingdom, there\'s an ancient tradition of playing with magical dice. These dice are special because they have more than the usual six faces and each face may have a different number painted on it. The king\'s mathematician has devised a game where two players roll a six-faced magical die, each of whose faces is labeled with a positive integer. The game is played in rounds and in each round, both players roll the die once. The player who rolls the higher number wins that round. If both players roll the same number in a round, it\'s a draw. The player who wins the most rounds wins the game. If both players win an equal number of rounds, the game is considered a draw. Given the results of several games played between the two players, determine the winner for each game or if the game ends in a draw. ------ Input Format ------ - The first line of input contains a single integer T denoting the number of games. The description of T games follows. - The first line of each game contains a single integer N denoting the number of rounds for that game. - The next N lines contain two space-separated integers a and b where a is the number rolled by the first player and b is the number rolled by the second player. ------ Output Format ------ For each game, print a single line containing one integer - 0 if the game ends in a draw or 1 if the first player wins or 2 if the second player wins. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ a, b ≤ 100 ----- Sample Input 1 ------ 3 3 5 3 4 6 3 3 2 7 7 8 2 4 1 6 3 3 8 1 4 4 ----- Sample Output 1 ------ 1 2 0 ----- Explanation 1 ------ Test case 1: - In the first round, player 1 rolls 5 and player 2 rolls 3, so player 1 wins the round. - In the second round, player 1 rolls 4 and player 2 rolls 6, so player 2 wins the round. - In the third round, both players roll 3, so it\'s a draw. Player 1 wins one round, player 2 wins one round, and there is one draw. Therefore, the game ends in a draw. Test case 2: - In the first round, both players roll 7, so it\'s a draw. - In the second round, player 1 rolls 8 and player 2 rolls 2, so player 1 wins the round. Player 1 wins one round, player 2 wins none, and there is one draw. Therefore, player 1 wins the game. Test case 3: - In the first round, player 1 rolls 1 and player 2 rolls 6, so player 2 wins the round. - In the second round, both players roll 3, so it\'s a draw. - In the third round, player 1 rolls 8 and player 2 rolls 1, so player 1 wins the round. - In the fourth round, both players roll 4, so it\'s a draw. Player 1 wins one round, player 2 wins one round, and there are two draws. Therefore, the game ends in a draw.","solution":"def determine_winner(T, games): results = [] for i in range(T): N = games[i][0] rounds = games[i][1] player1_wins = 0 player2_wins = 0 draws = 0 for round in rounds: if round[0] > round[1]: player1_wins += 1 elif round[0] < round[1]: player2_wins += 1 else: draws += 1 if player1_wins > player2_wins: results.append(1) elif player1_wins < player2_wins: results.append(2) else: results.append(0) return results"},{"question":"Implement a task management system for a team project. Each team member can be assigned multiple tasks and each task has a status associated with it: \\"incomplete\\", \\"in progress\\", or \\"complete\\". Your task is to simulate the task management operations to keep track of the status of tasks assigned to each member. Operations: 1. `assign_task(user, task)`: Assigns a new task to a user with an initial status of \\"incomplete\\". 2. `update_task(user, task, status)`: Updates the status of a user\'s task. The status will be one of the \\"incomplete\\", \\"in progress\\", or \\"complete\\". 3. `status_count(user, status)`: Returns the number of tasks for a user with a given status. 4. `list_tasks(user)`: Lists all tasks assigned to a user along with their statuses. Input The first line contains four integers n, t, m, q (1 ≤ n, t ≤ 1000; 1 ≤ m ≤ 1000; 1 ≤ q ≤ 1000) — the number of team members, the maximum number of tasks each member can handle, the maximum number of initial tasks, and the number of queries. The second line contains an integer a (1 ≤ a ≤ n) — the number of members with initial tasks. The third line contains a space-separated list of pairs, each pair contains the member id and the number of initial tasks for that member (1 ≤ id ≤ n, 1 ≤ tasks ≤ m). Each of the next m lines contains two space-separated strings u and task — the user id and the task assigned to that user initially, each task being assigned to a unique user and each task is initially \\"incomplete\\". Each of the next q lines describes the queries in the format: * \\"A u task\\" (1 ≤ u ≤ n) : Call assign_task(u, task). It is guaranteed that this user does not already have the task. * \\"U u task status\\" (1 ≤ u ≤ n) : Call update_task(u, task, status). The status will either be \\"incomplete\\", \\"in progress\\", or \\"complete\\". * \\"S u status\\" (1 ≤ u ≤ n) : Call status_count(u, status) and print the result in a single line. * \\"L u\\" (1 ≤ u ≤ n) : Call list_tasks(u) and print the tasks and their statuses in a single line. Output For each status_count and list_tasks query, print the required answer in a single line. Examples Input 5 5 4 9 2 1 2 2 2 1 task1 1 task2 2 task3 2 task4 S 1 \\"incomplete\\" A 3 task5 U 1 task1 \\"in progress\\" A 1 task6 U 2 task4 \\"complete\\" S 2 \\"complete\\" L 1 L 2 Output 2 1 task1: in progress, task2: incomplete, task6: incomplete task3: incomplete, task4: complete","solution":"class TaskManagementSystem: def __init__(self): self.users = {} def assign_task(self, user, task): if user not in self.users: self.users[user] = {} self.users[user][task] = \\"incomplete\\" def update_task(self, user, task, status): if user in self.users and task in self.users[user]: self.users[user][task] = status def status_count(self, user, status): if user not in self.users: return 0 return sum(1 for task in self.users[user] if self.users[user][task] == status) def list_tasks(self, user): if user not in self.users: return [] return [(task, self.users[user][task]) for task in self.users[user]]"},{"question":"Jenny loves reading especially when it comes to some of her favorite novel series. She has a peculiar habit: she reads book series in such a way that she reads a few chapters of the first book, then a few chapters of the second book and so on until she switches back to the first book and repeats the process till she finishes all books in that series. Jenny keeps track of her reading in the form of an array where each element corresponds to the chapter of that book and that day. Jenny wants you to help her determine how many days it will take her to finish her current reading session of a given series. You\'ll be given an integer array representing the number of chapters in each book of the series. Jenny reads exactly one chapter per book each day until that book is finished, then she skips that book in subsequent days. -----Input----- The first line of input contains an integer N, the number of books in the series. The second line contains N integers, where the i-th integer represents the number of chapters in the i-th book. -----Output----- Output the number of days it takes for Jenny to finish reading all books in the series. -----Limits----- - 1 le N le 100 - 1 le text{number of chapters per book} le 1000 -----Examples----- Sample Input 1: 3 4 2 3 Sample Output 1: 4 Sample Input 2: 2 5 5 Sample Output 2: 5","solution":"def days_to_finish_books(N, chapters): Returns the number of days Jenny will take to finish reading all books. Parameters: N (int): Number of books in the series. chapters (list of int): List representing the number of chapters in each book. Returns: int: Number of days needed to finish all books. days = 0 while sum(chapters) > 0: for i in range(N): if chapters[i] > 0: chapters[i] -= 1 days += 1 return days"},{"question":"You have been assigned the task of developing a new recommendation system for an online video streaming service. The service provides a list of videos, each with a unique integer identifier. Users can rate videos they have watched, and their ratings are stored in a log. The goal of this recommendation system is to suggest a list of video IDs to a user based on their ratings and the ratings of similar users. A user U is considered similar to another user V if they have rated at least one common video with the same rating. Given the rating logs of multiple users, your task is to recommend the top K videos that have been rated the highest by users similar to the target user, excluding the videos that the target user has already rated. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains three integers: N (the number of users), M (the number of rating entries), and U (the target user ID). The next M lines each contain three integers: user_id, video_id, and rating (where 1 ≤ rating ≤ 5). -----Output----- For each test case, output a line with K space-separated integers representing the recommended videos for the target user in descending order of their overall rating. If there are fewer than K recommendations available, print all possible recommendations. If no recommendations are possible, output -1. -----Constraints----- - 1 ≤ T ≤ 100 - 2 ≤ N ≤ 100 - 1 ≤ M ≤ 1000 - 1 ≤ K ≤ N - 1 ≤ user_id, U ≤ N - 1 ≤ video_id ≤ 1000 -----Example----- Input: 1 5 10 2 1 101 4 1 102 5 2 101 4 2 103 2 3 101 3 3 102 5 4 103 2 4 104 5 5 103 2 5 101 4 Output: 102 104 Explanation: User 2 has rated video 101 with a rating of 4. Users 1 and 5 have also rated video 101 with the same rating. Videos rated the highest among these similar users, excluding video 101 which has already been rated by user 2, are 102 and 104.","solution":"def recommend_videos(test_cases, k): recommendations = [] for case in test_cases: N, M, U = case[\'N\'], case[\'M\'], case[\'U\'] ratings = case[\'ratings\'] user_ratings = {} for user_id, video_id, rating in ratings: if user_id not in user_ratings: user_ratings[user_id] = {} user_ratings[user_id][video_id] = rating target_user_ratings = user_ratings.get(U, {}) similar_users = set() for user_id in user_ratings: if user_id == U: continue for video_id in user_ratings[user_id]: if video_id in target_user_ratings and user_ratings[user_id][video_id] == target_user_ratings[video_id]: similar_users.add(user_id) video_scores = {} for similar_user in similar_users: for video_id, rating in user_ratings[similar_user].items(): if video_id not in target_user_ratings: if video_id not in video_scores: video_scores[video_id] = 0 video_scores[video_id] += rating recommended_videos = sorted(video_scores.keys(), key=lambda x: (-video_scores[x], x)) recommendations.append(recommended_videos[:k] if recommended_videos else [-1]) return recommendations # Example usage test_cases = [ { \'N\': 5, \'M\': 10, \'U\': 2, \'ratings\': [ (1, 101, 4), (1, 102, 5), (2, 101, 4), (2, 103, 2), (3, 101, 3), (3, 102, 5), (4, 103, 2), (4, 104, 5), (5, 103, 2), (5, 101, 4) ] } ] print(recommend_videos(test_cases, 2)) # Output: [[102, 104]]"},{"question":"You\'ve been tasked to create software that simulates an automated teller machine (ATM). The ATM should be able to dispense cash amounts in various denominations (e.g., 100s, 50s, 20s, 10s, 5s, and 1s) but should minimize the number of bills dispensed. # Input The input consists of multiple lines. Each line represents a separate transaction and contains a single integer amount, representing the amount to be dispensed. The end of the input is indicated by a line containing the integer `0`. * Each amount is a positive integer not exceeding 10,000. * The ATM only dispenses cash in bills of denominations: 100, 50, 20, 10, 5, and 1. * The ATM has an unlimited supply of each denomination. * The amounts are guaranteed to be such that they can always be dispensed using the available denominations. # Output For each input amount, output a single line indicating the number of each denomination of bill to be dispensed in the format: `100s: x, 50s: y, 20s: z, 10s: a, 5s: b, 1s: c`, where `x`, `y`, `z`, `a`, `b`, and `c` are the counts of 100s, 50s, 20s, 10s, 5s, and 1s bills respectively. Your output should minimize the number of bills dispensed. # Examples Input ``` 376 123 6879 0 ``` Output ``` 100s: 3, 50s: 1, 20s: 1, 10s: 0, 5s: 1, 1s: 1 100s: 1, 50s: 0, 20s: 1, 10s: 0, 5s: 0, 1s: 3 100s: 68, 50s: 1, 20s: 1, 10s: 0, 5s: 1, 1s: 4 ```","solution":"def dispense_cash(amount): Given an amount, this function calculates the number of each denomination (100s, 50s, 20s, 10s, 5s, 1s) needed to dispense the amount while minimizing the number of bills. denominations = [100, 50, 20, 10, 5, 1] bills = {} for denom in denominations: bills[denom], amount = divmod(amount, denom) return f\\"100s: {bills[100]}, 50s: {bills[50]}, 20s: {bills[20]}, 10s: {bills[10]}, 5s: {bills[5]}, 1s: {bills[1]}\\" def process_transactions(input_lines): Processes multiple lines of transaction inputs until encountering \'0\'. For each transaction, it returns the number of each denomination of bill to be dispensed. results = [] for line in input_lines: amount = int(line) if amount == 0: break result = dispense_cash(amount) results.append(result) return results"},{"question":"A bus company is managing routes to help passengers transfer between cities. They want to determine the shortest path between cities for passengers. The cities are represented as nodes, and the direct routes between them are represented as edges with given weights. Your task is to calculate the shortest path between a given start city and a destination city using a graph. You need to use Dijkstra\'s algorithm for this purpose. Input - The first line contains two integers, `n` (number of cities, 2 ≤ n ≤ 1000) and `m` (number of routes, 1 ≤ m ≤ 50000). - The next `m` lines each contain three integers `u`, `v`, and `w` describing a direct route from city `u` to city `v` with weight `w` (1 ≤ w ≤ 1000). Note that `u` ≠ `v` and there could be multiple routes between the same cities. - The last line contains two integers, `start` and `destination` representing the cities that the passengers want to travel between. Output Print the shortest distance between the `start` and `destination` cities. If there\'s no possible path, print -1. Example Input 5 6 1 2 2 1 3 5 2 3 7 2 4 10 3 4 8 4 5 3 1 5 Output 18 Explanation - City 1 to City 2 has a direct route with weight 2. - City 1 to City 3 has a direct route with weight 5. - City 2 to City 3 has a direct route with weight 7. - City 2 to City 4 has a direct route with weight 10. - City 3 to City 4 has a direct route with weight 8. - City 4 to City 5 has a direct route with weight 3. The shortest path from City 1 to City 5 will be: 1 → 2 → 4 → 5 with a total weight of 2 + 10 + 3 = 15.","solution":"import heapq def dijkstra(n, edges, start, destination): Returns the shortest path between the start and destination cities using Dijkstra\'s algorithm. If there\'s no possible path, return -1. graph = {i: [] for i in range(1, n + 1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Since the graph is undirected # Min-heap priority queue heap = [(0, start)] # (distance, node) distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[start] = 0 visited = set() while heap: current_distance, current_node = heapq.heappop(heap) if current_node in visited: continue visited.add(current_node) if current_node == destination: return current_distance for neighbor, weight in graph[current_node]: if neighbor in visited: continue new_distance = current_distance + weight if new_distance < distances[neighbor]: distances[neighbor] = new_distance heapq.heappush(heap, (new_distance, neighbor)) return -1 if distances[destination] == float(\'inf\') else distances[destination]"},{"question":"You are given a grid with n rows and m columns. Each cell in the grid either contains a `0` (representing an empty space) or a `1` (representing an obstacle). Your task is to determine if there is a valid path from the top-left corner of the grid `(0, 0)` to the bottom-right corner of the grid `(n-1, m-1)`. You can only move up, down, left, or right, and cannot move through cells containing `1`. Return `True` if there is a valid path; otherwise, return `False`. Example Consider the grid: n=3 // number of rows m=3 // number of columns grid = [ [0, 0, 1], [0, 1, 0], [0, 0, 0] ] There is a valid path from the top-left corner to the bottom-right corner: `(0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2)`. Therefore, the output will be `True`. Function Description Complete the `has_valid_path` function in the editor below. has_valid_path has the following parameter(s): `int n`: the number of rows in the grid `int m`: the number of columns in the grid `int grid[n][m]`: the grid containing `0`s and `1`s Returns `bool`: `True` if there is a valid path, `False` otherwise Input Format The first line contains two space-separated integers n and m, the number of rows and columns in the grid. Each of the next n lines contains m space-separated integers describing the grid. Constraints 1 leq n, m leq 1000 grid[i][j] in {0, 1} Sample Input 3 3 0 0 1 0 1 0 0 0 0 Sample Output True Explanation The grid looks like: `[0, 0, 1]` `[0, 1, 0]` `[0, 0, 0]` Starting at `(0,0)`, we can move: - Down to `(1,0)` - Down to `(2,0)` - Right to `(2,1)` - Right to `(2,2)` Thus, there is a valid path from `(0,0)` to `(n-1,m-1)` and the function returns `True`. If the grid were such that no path existed due to obstacles (i.e., no sequence of valid movements that don\'t cross an obstacle), the function would return `False`.","solution":"def has_valid_path(n, m, grid): def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == 0 def find_path(x, y): if not is_valid(x, y) or (x, y) in visited: return False if (x, y) == (n-1, m-1): return True visited.add((x, y)) for i, j in directions: if find_path(x + i, y + j): return True return False directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] visited = set() return find_path(0, 0)"},{"question":"The problem involves managing a sequence of integers where certain operations need to be performed. Specifically, you are provided with a sequence of integers and a set of queries. Each query will either append a value to the end of the sequence or request a sum of a specific subsequence of the array. The operations should be efficient even for large sequences and numerous queries. ----Input---- The first line of input contains an integer n (1 leq n leq 10^5), the initial size of the sequence. The second line contains n integers a_1, a_2, ldots, a_n which form the initial sequence. Each integer a_j lies between 0 and 2^{31}-1. The third line contains an integer q (1 leq q leq 10^5), indicating the number of queries to process. Then q lines follow. Each line is a query and can be of two types: - `1 x`: Append the integer x (0 leq x leq 2^{31}-1) to the end of the sequence. - `2 l r`: Output the sum of the subsequence from index l to r (1-indexed), inclusive, where 1 leq l leq r leq n. The sequence is dynamically updated based on the queries, and the indices for sum queries should reflect the current state of the sequence after any append operations. ----Output---- For each sum query, output the sum of the specified subsequence on a new line. ----Examples---- Sample Input: 5 1 2 3 4 5 3 1 7 2 2 6 1 8 Sample Output: 21 Explanation: - The initial sequence is [1, 2, 3, 4, 5]. - The first query appends 7, modifying the sequence to [1, 2, 3, 4, 5, 7]. - The second query calculates the sum of the subsequence from index 2 to 6, which is 2+3+4+5+7 = 21. - The third query appends 8, resulting in [1, 2, 3, 4, 5, 7, 8]. However, there are no further sum queries, so it\'s ignored in the computations.","solution":"class SequenceManager: def __init__(self, initial_sequence): self.sequence = initial_sequence self.sum_prefix = self._compute_prefix_sum() def _compute_prefix_sum(self): Compute the prefix sum for the current sequence. prefix_sum = [0] * (len(self.sequence) + 1) for i in range(1, len(prefix_sum)): prefix_sum[i] = prefix_sum[i-1] + self.sequence[i-1] return prefix_sum def append(self, value): Append a value to the end of the sequence self.sequence.append(value) # Since only one value is added, we can update sum_prefix incrementally self.sum_prefix.append(self.sum_prefix[-1] + value) def sum_range(self, l, r): Return the sum of the subsequence from l to r (1-indexed) return self.sum_prefix[r] - self.sum_prefix[l-1] def process_queries(n, initial_sequence, q, queries): manager = SequenceManager(initial_sequence) results = [] for query in queries: if query[0] == 1: # Append query manager.append(query[1]) elif query[0] == 2: # Sum query results.append(manager.sum_range(query[1], query[2])) return results"},{"question":"A park is built as a rectangular grid of size N x M. Each cell in the grid represents a section of the park, and is either empty or contains a tree. Each step you take, you can choose to move up, down, left, or right to an adjacent cell. The park has a unique entrance and a unique exit at specified locations. You want to determine the shortest distance (minimum number of steps) from the entrance to the exit, avoiding trees. Write a function to calculate the shortest path from the entrance to the exit. INPUT The input consists of: - The first line contains a single integer T, the number of test cases. - For each test case: - The first line contains two integers, N and M, representing the number of rows and columns of the park. - The next N lines each contain M characters (\'.\' for an empty cell, \'#\' for a cell with a tree). - The next line contains four integers, x1, y1, x2, and y2, denoting the coordinates of the entrance and the exit respectively (1-indexed). OUTPUT For each test case, output a single line of output in the format \\"Test Case #X: Y\\", where X is the 1-based index of the test case, and Y is the minimum number of steps needed to get from the entrance to the exit. If the exit cannot be reached, return -1 for that test case. CONSTRAINTS 1 ≤ T ≤ 10 2 ≤ N, M ≤ 100 1 ≤ x1, y1, x2, y2 ≤ N, M The entrance and exit cells are always empty. SAMPLE INPUT 2 3 3 # .#. # 1 2 3 2 4 4 .... .#.. .#.. .... 1 1 4 4 SAMPLE OUTPUT Test Case #1: -1 Test Case #2: 6","solution":"from collections import deque def shortest_path(park, N, M, x1, y1, x2, y2): # Convert 1-index to 0-index start = (x1 - 1, y1 - 1) end = (x2 - 1, y2 - 1) # Directions for up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS setup queue = deque([(start[0], start[1], 0)]) # (x, y, distance) visited = set() visited.add(start) while queue: x, y, dist = queue.popleft() # Check if we have reached the end if (x, y) == end: return dist # Explore neighbors for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and (nx, ny) not in visited and park[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) # If no path is found return -1 def solve_parks(test_cases): results = [] for idx, (N, M, park, entrance_exit) in enumerate(test_cases): x1, y1, x2, y2 = entrance_exit result = shortest_path(park, N, M, x1, y1, x2, y2) results.append(f\\"Test Case #{idx+1}: {result}\\") return results def main(input_str): data = input_str.strip().split(\'n\') idx = 0 T = int(data[idx]) idx += 1 test_cases = [] for _ in range(T): N, M = map(int, data[idx].split()) idx += 1 park = [] for _ in range(N): park.append(data[idx]) idx += 1 entrance_exit = tuple(map(int, data[idx].split())) idx += 1 test_cases.append((N, M, park, entrance_exit)) return solve_parks(test_cases)"},{"question":"You are given a list of dictionaries where each dictionary represents a transaction record with keys `amount`, `type`, and `description`. Your task is to compute the total balance. The `type` key can have two values: `\'debit\'` or `\'credit\'`. If the type is `\'debit\'`, the amount should be subtracted from the total balance, and if it is `\'credit\'`, the amount should be added to the total balance. The initial balance is zero. * The `amount` key is guaranteed to have a positive numerical value. * The `type` key is guaranteed to have either `\'debit\'` or `\'credit\'`. * The `description` key can have any string value and is irrelevant to the calculation. Write a function `calculate_balance(transactions)` that takes a list of transaction dictionaries and returns the total balance as an integer. Example input: ```python [ {\\"amount\\": 100, \\"type\\": \\"credit\\", \\"description\\": \\"Deposit\\"}, {\\"amount\\": 50, \\"type\\": \\"debit\\", \\"description\\": \\"Withdrawal\\"}, {\\"amount\\": 200, \\"type\\": \\"credit\\", \\"description\\": \\"Refund\\"}, {\\"amount\\": 20, \\"type\\": \\"debit\\", \\"description\\": \\"Purchase\\"} ] ``` Expected output: ```python 230 ```","solution":"def calculate_balance(transactions): Calculate the total balance given a list of transactions. Each transaction is a dictionary with keys: \'amount\', \'type\', and \'description\'. The \'amount\' is a positive number. The \'type\' is either \'debit\' or \'credit\'. The \'description\' is irrelevant to the balance calculation. :param transactions: List[Dict[str, Union[int, str]]] :return: int balance = 0 for transaction in transactions: if transaction[\'type\'] == \'credit\': balance += transaction[\'amount\'] elif transaction[\'type\'] == \'debit\': balance -= transaction[\'amount\'] return balance"},{"question":"fancy_indexing Fancy indexing allows NumPy arrays to be indexed using arrays or sequences of integer indices. (a). Using fancy indexing to access array elements import numpy as np my_array = np.array([10, 20, 30, 40, 50]) indices = [2, 3, 0] print(my_array[indices]) #[30 40 10] -> Accessing elements at index 2, 3, and 0 (b). Using fancy indexing to modify array elements import numpy as np my_array = np.array([10, 20, 30, 40, 50]) indices = [1, 4] my_array[indices] = [-99, -199] print(my_array) #[10 -99 30 40 -199] -> Modifying elements at index 1 and 4 Task You are given a 1D NumPy array and a list of indices. Your task is to use fancy indexing to assign the value 99 to the array elements at the given positions. Input Format - The first line of input contains space-separated integers denoting the elements of the 1D NumPy array. - The second line contains space-separated integers denoting the indices where the value 99 should be assigned. Output Format Print the modified 1D NumPy array. Sample Input 10 20 30 40 50 1 3 Sample Output [10 99 30 99 50]","solution":"import numpy as np def modify_array_with_indices(arr, indices): Modify the elements of arr at the given indices to 99. Parameters: arr (list of int): The input 1D list to be converted to a numpy array. indices (list of int): The indices at which to assign the value 99. Returns: numpy.ndarray: The modified array. my_array = np.array(arr) my_array[indices] = 99 return my_array # Example elements = [10, 20, 30, 40, 50] index_to_modify = [1, 3] result = modify_array_with_indices(elements, index_to_modify) print(result) # Output: [10 99 30 99 50]"},{"question":"Taichi likes sequences of integers and has recently become interested in arithmetic progression chains. An arithmetic progression chain is defined as a sequence of integers where the difference between any two consecutive elements is constant. Taichi wants you to help him find the length of the longest arithmetic progression chain that can be formed using a given sequence of integers. Given a sequence of integers `A`, find the length of the longest arithmetic progression chain that can be formed using elements of `A`. Constraints - 1 leq |A| leq 1000 - -10^6 leq A[i] leq 10^6 for all integers A[i] in A. Input Input is given from Standard Input in the following format: ``` N A1 A2 A3 ... AN ``` Where: - `N` is the length of the sequence `A` - The next line contains `N` integers representing the sequence `A` Output Print the length of the longest arithmetic progression chain that can be formed from the given sequence. Examples Input 5 1 7 10 15 27 29 Output 3 Input 4 5 5 5 5 Output 4 Input 6 9 4 7 2 10 3 Output 3","solution":"def longest_arith_seq_length(A): if len(A) <= 1: return len(A) from collections import defaultdict # The dictionary dp will store a mapping: # (i, diff) -> length of the longest arithmetic subsequence ending at index i having a common difference of diff dp = {} longest = 0 for i in range(len(A)): for j in range(i): diff = A[i] - A[j] if (j, diff) in dp: dp[(i, diff)] = dp[(j, diff)] + 1 else: dp[(i, diff)] = 2 longest = max(longest, dp[(i, diff)]) return longest"},{"question":"You are given a rooted tree with n nodes, where each node is uniquely numbered from 1 to n, and the root of the tree is always node 1. You need to perform q queries on this tree. Each query consists of providing two nodes u and v, and you need to determine the least common ancestor (LCA) of these two nodes. Input - The first line contains an integer n (2 ≤ n ≤ 100000) — the number of nodes in the tree. - The next n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — representing an edge between node u and node v. - The next line contains an integer q (1 ≤ q ≤ 100000) — the number of queries. - The next q lines each contain two integers u and v (1 ≤ u, v ≤ n) — the nodes for which the LCA needs to be determined. Output For each query, output the LCA of nodes u and v on a separate line. Examples Input 5 1 2 1 3 2 4 2 5 3 4 5 4 3 3 5 Output 2 1 1 Input 6 1 2 1 3 3 4 3 5 5 6 4 4 6 2 5 2 3 5 6 Output 3 1 1 5","solution":"import sys from collections import defaultdict, deque from math import log2, ceil sys.setrecursionlimit(200000) def preprocess_LCA(n, tree, root=1): log_n = ceil(log2(n)) parent = [[-1] * (log_n + 1) for _ in range(n + 1)] level = [-1] * (n + 1) def bfs(start): q = deque([start]) level[start] = 0 while q: u = q.popleft() for v in tree[u]: if level[v] == -1: # not visited parent[v][0] = u level[v] = level[u] + 1 q.append(v) # BFS to initialize parent and level arrays bfs(root) # Dynamic Programming like approach to fill the rest of parent array for j in range(1, log_n + 1): for i in range(1, n + 1): if parent[i][j - 1] != -1: parent[i][j] = parent[parent[i][j - 1]][j - 1] return parent, level def find_LCA(u, v, parent, level): if level[u] < level[v]: u, v = v, u log_n = len(parent[0]) - 1 # Bring u and v to the same level diff = level[u] - level[v] for i in range(log_n + 1): if (diff >> i) & 1: u = parent[u][i] if u == v: return u for i in range(log_n, -1, -1): if parent[u][i] != -1 and parent[u][i] != parent[v][i]: u = parent[u][i] v = parent[v][i] return parent[u][0] def lca_tree(n, edges, q, queries): tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) parent, level = preprocess_LCA(n, tree) result = [] for u, v in queries: lca = find_LCA(u, v, parent, level) result.append(lca) return result"},{"question":"You are tasked with developing a data processing application that receives logs from various sources. Each log entry consists of a timestamp, a log level, and a message. One requirement of this application is to retrieve logs from a specific time range and log level. # Exercise Write a function `filterLogs`, which takes three parameters: a list of dictionaries (each representing a log entry), a start time, and an end time. Each dictionary contains \\"timestamp\\" (in the format \\"YYYY-MM-DD HH:MM:SS\\"), \\"level\\" (one of \\"DEBUG\\", \\"INFO\\", \\"WARNING\\", \\"ERROR\\"), and \\"message\\". The function should return a list of log messages that fall within the given time range and are of the specified log level (or more severe). # Rules - Timestamps within the given range are inclusive; entries matching the start or end time should be included. - The severity levels are as follows (from lowest to highest): \\"DEBUG\\", \\"INFO\\", \\"WARNING\\", \\"ERROR\\". - If the log level provided is \\"INFO\\", logs of types \\"INFO\\", \\"WARNING\\", and \\"ERROR\\" should be returned. - Assume the log entries are in ascending order based on the timestamp. For example, given these logs: ``` logs = [ {\\"timestamp\\": \\"2023-01-01 12:00:00\\", \\"level\\": \\"DEBUG\\", \\"message\\": \\"Debugging issue A\\"}, {\\"timestamp\\": \\"2023-01-01 12:05:00\\", \\"level\\": \\"INFO\\", \\"message\\": \\"Processing request B\\"}, {\\"timestamp\\": \\"2023-01-01 12:10:00\\", \\"level\\": \\"ERROR\\", \\"message\\": \\"Failed to process X\\"}, {\\"timestamp\\": \\"2023-01-01 12:15:00\\", \\"level\\": \\"INFO\\", \\"message\\": \\"Processing request C\\"}, {\\"timestamp\\": \\"2023-01-01 12:20:00\\", \\"level\\": \\"WARNING\\", \\"message\\": \\"Potential issue with Y\\"} ] ``` And the input parameters: ``` start_time = \\"2023-01-01 12:00:00\\" end_time = \\"2023-01-01 12:15:00\\" level = \\"INFO\\" ``` The function should return: ``` [\\"Processing request B\\", \\"Failed to process X\\", \\"Processing request C\\"] ```","solution":"from datetime import datetime def filterLogs(logs, start_time, end_time, level): Filters and returns log messages that fall within the given time range and are of the specified log level or more severe. Parameters: logs (list of dicts): List of log entries, each being a dictionary with \\"timestamp\\", \\"level\\" and \\"message\\" keys. start_time (str): Start of the time range in \\"YYYY-MM-DD HH:MM:SS\\" format. end_time (str): End of the time range in \\"YYYY-MM-DD HH:MM:SS\\" format. level (str): The log level to filter on; entries of this level or more severe should be included. Returns: list: List of log messages that match the criteria. severity = {\\"DEBUG\\": 1, \\"INFO\\": 2, \\"WARNING\\": 3, \\"ERROR\\": 4} start_dt = datetime.strptime(start_time, \\"%Y-%m-%d %H:%M:%S\\") end_dt = datetime.strptime(end_time, \\"%Y-%m-%d %H:%M:%S\\") min_severity = severity[level] filtered_logs = [] for log in logs: log_dt = datetime.strptime(log[\\"timestamp\\"], \\"%Y-%m-%d %H:%M:%S\\") if start_dt <= log_dt <= end_dt and severity[log[\\"level\\"]] >= min_severity: filtered_logs.append(log[\\"message\\"]) return filtered_logs"},{"question":"A group of friends is planning a road trip together and they need to rent cars for their journey. Each car can accommodate up to `S` seats, including the driver. Given the number of friends `F` and the number of cars `C` they can rent, they need to figure out how many friends can participate in the trip and if they can manage with the `C` cars available. Can you help them find out the maximum possible number of friends who can go on the trip? ------ Input Format ------ - The first line contains a single integer `T` - the number of test cases. Then the test cases follow. - The first line of each test case consists of three integers, `F` (number of friends), `C` (number of cars available), and `S` (seating capacity of each car). ------ Output Format ------ For each test case, output the maximum number of friends that can participate in the trip. If all friends can participate, print the number of friends `F`, otherwise, print the total number of possible participants (`C * S`). ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ F ≤ 1000 1 ≤ C ≤ 100 1 ≤ S ≤ 50 ----- Sample Input 1 ------ 3 10 2 6 13 3 5 5 1 5 ----- Sample Output 1 ------ 12 13 5 ----- Explanation 1 ------ Test case 1: With 2 cars and each car having 6 seats, a total of 2 * 6 = 12 friends can participate. Since they have 10 friends, all friends can go. Test case 2: With 3 cars and each car having 5 seats, a total of 3 * 5 = 15 friends can participate. Since they have 13 friends, all friends can go. Test case 3: With 1 car and each car having 5 seats, a total of 1 * 5 = 5 friends can participate. Since they have 5 friends, all friends can go.","solution":"def max_friends_participate(T, test_cases): result = [] for i in range(T): F, C, S = test_cases[i] max_possible_friends = C * S if max_possible_friends >= F: result.append(F) else: result.append(max_possible_friends) return result"},{"question":"Olivia has a collection of pearls, and she plans to string them into a necklace. She has a specific way of arranging them: For every two adjacent pearls on the necklace, their combined radii must sum to a number greater than or equal to ( k ) (where ( k ) is a given integer). You are given the radii of the pearls and need to determine whether it\'s possible to arrange them into a necklace that satisfies this condition. Given the radii of ( n ) pearls, determine if there exists an arrangement such that the sum of the radii of any two adjacent pearls in the arrangement is at least ( k ). -----Input----- The first line contains a single integer ( t ) (( 1 leq t leq 10^3 )) — the number of test cases. Each test case is given as follows: - The first line contains two integers ( n ) and ( k ) (( 2 leq n leq 100 ), ( 1 leq k leq 10^9 )) — the number of pearls and the minimum required sum for adjacent pearls. - The second line contains ( n ) integers ( r_1, r_2, ldots, r_n ) (( 1 leq r_i leq 10^9 )) — the radii of the pearls. It is guaranteed that the total number of pearls in all test cases does not exceed ( 10^4 ). -----Output----- For each test case, print a single line: print \\"YES\\" if it\'s possible to arrange the pearls accordingly, otherwise print \\"NO\\". You may print each letter in any case (for example, YES, Yes, yes, yES will all be recognized as positive answer). -----Examples----- Input 3 4 10 5 5 5 5 5 7 1 5 2 6 4 3 8 3 3 3 Output YES YES NO -----Explanation----- In the first test case, any arrangement of the pearls satisfies the condition because the sum of any two adjacent pearls\' radii is exactly 10. In the second test case, one possible arrangement is [1, 6, 2, 5, 4], where each pair of adjacent pearls satisfies the condition. In the third test case, it is impossible to arrange the pearls such that the sum of the radii of any two adjacent pearls is at least 8.","solution":"def can_form_necklace(n, k, radii): Determines whether it\'s possible to arrange the pearls such that the sum of the radii of any two adjacent pearls in the arrangement is at least k. Parameters: n (int): Number of pearls k (int): Minimum required sum for adjacent pearls radii (list of int): Radii of the pearls Returns: str: \\"YES\\" if it\'s possible to arrange the pearls accordingly, otherwise \\"NO\\" radii.sort() for i in range(n - 1): if radii[i] + radii[i + 1] >= k: return \\"YES\\" return \\"NO\\" def process_test_cases(t, test_cases): Processes multiple test cases and determines if each test case can form a necklace. Parameters: t (int): Number of test cases. test_cases (list of tuples): Each tuple contains (n, k, radii). Returns: list of str: List of results for each test case (\\"YES\\" or \\"NO\\"). results = [] for i in range(t): n, k, radii = test_cases[i] results.append(can_form_necklace(n, k, radii)) return results"},{"question":"In a computer networking simulation, there are N nodes connected by M bidirectional edges. Each node has a unique ID ranging from 1 to N. The goal is to find the shortest path from a given source node to all other nodes in the network. If a node is not reachable from the source, the distance to that node should be -1. You are required to write a program that takes multiple test cases. For each test case, the program should output the shortest paths from the given source node to all other nodes. Input The first line of input contains a single integer T, the number of test cases. Each test case starts with two integers, N and M, representing the number of nodes and edges respectively. The next M lines each contain two integers U and V, indicating there is an edge between nodes U and V. The test case ends with one integer S, the source node from which distances are to be calculated. Output For each test case, output a single line with N integers where the ith integer represents the shortest distance from the source node S to node i+1. If a node is not reachable, output -1 for that node. Constraints: 1 ≤ T ≤ 5 2 ≤ N ≤ 10^4 1 ≤ M ≤ 2×10^4 1 ≤ U, V, S ≤ N SAMPLE INPUT 2 4 4 1 2 2 3 3 4 4 1 1 6 3 1 2 2 3 4 5 1 SAMPLE OUTPUT 0 1 2 1 0 1 2 -1 -1 -1","solution":"from collections import deque, defaultdict def bfs_shortest_path(N, M, edges, S): # Initialize the graph graph = defaultdict(list) for U, V in edges: graph[U].append(V) graph[V].append(U) distances = [-1] * N distances[S - 1] = 0 # BFS initialization queue = deque([S]) while queue: node = queue.popleft() current_dist = distances[node - 1] for neighbor in graph[node]: if distances[neighbor - 1] == -1: # Not visited distances[neighbor - 1] = current_dist + 1 queue.append(neighbor) return distances def shortest_path_multiple_tests(T, test_cases): results = [] for case in test_cases: N, M, edges, S = case result = bfs_shortest_path(N, M, edges, S) results.append(result) return results"},{"question":"In a faraway kingdom, there exists an ancient game called \\"Number Bridges\\". This game involves a rectangular grid with dimensions N x M. Each cell in the grid contains a non-negative integer that represents the number of bridges that can be built from that cell. A player can move from any cell (i, j) to its neighboring cells in the same row or column in one of four directions only: up, down, left, or right. The goal of the game is to figure out if it\'s possible to travel from the top-left corner of the grid (1, 1) to the bottom-right corner (N, M) by building bridges, adhering to the following rules: 1. You can only build a bridge if the number in the current cell is strictly greater than the number in the destination cell. 2. Once a bridge is built between two cells, the player can move to the destination cell. Your task is to write a program that determines if it\'s possible to travel from the top-left corner (1, 1) to the bottom-right corner (N, M). If it\'s possible, print \\"Possible\\"; otherwise, print \\"Impossible\\". Input The input consists of several test cases. The first line of each test case contains two integers N (1 ≤ N ≤ 100) and M (1 ≤ M ≤ 100) separated by a space, indicating the number of rows and columns in the grid respectively. The following N lines each contain M integers separated by spaces, representing the numbers in the respective cells of the grid. A line with two zeros indicates the end of input and is not part of a test case. Output For each test case, print a single line: \\"Possible\\" if it\'s possible to travel from the top-left corner to the bottom-right corner by building the bridges according to the rules, otherwise print \\"Impossible\\". Example Input 3 3 3 1 2 0 2 1 1 1 3 4 5 1 2 3 4 5 5 4 3 2 1 2 2 2 2 2 9 8 7 6 5 0 0 Output Impossible Impossible","solution":"from collections import deque def can_travel_by_bridges(grid, N, M): Determines if it\'s possible to travel from the top-left corner to the bottom-right corner of the grid based on the game \\"Number Bridges\\" rules. :param grid: List of lists, representing the grid :param N: Number of rows :param M: Number of columns :return: \\"Possible\\" or \\"Impossible\\" # Initialize visited matrix visited = [[False for _ in range(M)] for _ in range(N)] # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Queue for BFS queue = deque([(0, 0)]) visited[0][0] = True while queue: cur_x, cur_y = queue.popleft() if cur_x == N-1 and cur_y == M-1: return \\"Possible\\" for d in directions: new_x, new_y = cur_x + d[0], cur_y + d[1] if 0 <= new_x < N and 0 <= new_y < M: if not visited[new_x][new_y] and grid[cur_x][cur_y] > grid[new_x][new_y]: visited[new_x][new_y] = True queue.append((new_x, new_y)) return \\"Impossible\\" def number_bridges(game_input): results = [] i = 0 while i < len(game_input): N, M = map(int, game_input[i].strip().split()) if N == 0 and M == 0: break grid = [] for j in range(N): grid.append(list(map(int, game_input[i + 1 + j].strip().split()))) result = can_travel_by_bridges(grid, N, M) results.append(result) i += N + 1 for result in results: print(result)"},{"question":"A rectangular grid of cells with m rows and n columns in total is given. Some of these cells contain rocks denoted by \'#\', while others are empty spaces denoted by \'.\'. We define a region in this grid as a contiguous group of empty cells that are connected either horizontally or vertically (but not diagonally). Two regions are distinct if there is no path of contiguous empty cells connecting them. Write a program to determine the number of distinct regions of empty cells in the grid. Input The first line contains two integers, m and n (1 ≤ m, n ≤ 100), the number of rows and columns in the grid, respectively. The next m lines contain n characters each, either \'.\' (representing an empty cell) or \'#\' (representing a cell with a rock). Output Print a single integer — the number of distinct regions of empty cells in the grid. Examples Input 5 6 ..#... .#.... .... .. ..#.#. Output 3 Input 3 4 #..# Output 1","solution":"def count_regions(grid): Counts the number of distinct regions of empty cells in the provided grid. def dfs(x, y): if x < 0 or x >= m or y < 0 or y >= n or grid[x][y] != \'.\': return grid[x][y] = \'#\' # Mark the cell as visited # Explore neighbors dfs(x+1, y) # down dfs(x-1, y) # up dfs(x, y+1) # right dfs(x, y-1) # left m, n = len(grid), len(grid[0]) regions_count = 0 for i in range(m): for j in range(n): if grid[i][j] == \'.\': dfs(i, j) regions_count += 1 return regions_count"},{"question":"You are given an array of integers. Your task is to find the length of the longest subsequence of strictly increasing numbers. The solution should run in (O(n log n)) time, where (n) is the length of the input array. Input The first line of the input contains an integer (n) (1 ≤ (n) ≤ 100,000) — the number of integers in the array. The second line contains (n) integers (a_1, a_2, ..., a_n) (1 ≤ (a_i) ≤ 10^9) — the elements of the array. Output Print a single integer — the length of the longest strictly increasing subsequence in the array. Examples Input 6 10 22 9 33 21 50 Output 4 Input 5 3 10 2 1 20 Output 3 Note In the first example, an increasing subsequence of maximum length is [10, 22, 33, 50]. In the second example, an increasing subsequence of maximum length is [3, 10, 20]. The subsequence does not have to be contiguous, meaning the elements do not have to be consecutive in the array.","solution":"from bisect import bisect_left def length_of_lis(arr): Returns the length of the longest increasing subsequence in the given array. if not arr: return 0 lis = [] for num in arr: pos = bisect_left(lis, num) if pos == len(lis): lis.append(num) else: lis[pos] = num return len(lis)"},{"question":"Write a program to find the Fibonacci series up to a given number entered by the user. -----Input----- The first line contains an integer T, the total number of test cases. Then T lines follow, each line contains an integer N. -----Output----- For each test case, display the Fibonacci series up to the given number N (inclusive) in a new line, separated by spaces. -----Constraints----- - 1 ≤ T ≤ 1000 - 1 ≤ N ≤ 50 -----Example----- Input 3 5 8 10 Output 0 1 1 2 3 5 0 1 1 2 3 5 8 0 1 1 2 3 5 8 13 The solution should be a series of integers separated by spaces, each series in a new line corresponding to each test case.","solution":"def fibonacci_series_upto(n): Generate Fibonacci series up to the given number n (inclusive). if n < 0: return [] series = [] a, b = 0, 1 while a <= n: series.append(a) a, b = b, a + b return series def process_test_cases(test_cases): Process multiple test cases and generate the output for each one. results = [] for n in test_cases: series = fibonacci_series_upto(n) results.append(\' \'.join(map(str, series))) return results"},{"question":"A queue is a linear data structure that follows the First In First Out (FIFO) principle. Elements are added to the back of the queue and removed from the front. Python has in-built support for queues with the `collections.deque` class, which provides an efficient way to append and pop elements from both ends. Sample Code >>> from collections import deque >>> >>> queue = deque() >>> queue.append(\'a\') >>> queue.append(\'b\') >>> queue.append(\'c\') >>> >>> print(queue) deque([\'a\', \'b\', \'c\']) >>> >>> print(queue.popleft()) \'a\' >>> print(queue.popleft()) \'b\' >>> print(queue) deque([\'c\']) Task You are to simulate a ticket booking system. There are textit{N} customers in line. Each customer {i} is identified by a unique name and wants to buy a ticket of value {v_i}. The system processes the customers in FIFO order and collects the total revenue generated from ticket sales. If a customer tries to buy a ticket but the system runs out of tickets, that customer is skipped. Input Format The first line contains an integer {T}, the total number of tickets available. The second line contains an integer {N}, the number of customers. The next {N} lines contain a customer\'s name (a string) and the ticket value {v_i} (an integer) separated by space. Constraints 1 leq T leq 10^3 1 leq N leq 10^3 1 leq v_i leq 100 Output Format Print the total revenue from ticket sales and the names of the customers (in order of processing) who managed to buy a ticket. Sample Input 5 7 Alice 50 Bob 60 Charlie 70 David 80 Eve 90 Frank 100 Grace 60 Sample Output 350 Alice Bob Charlie David Eve Explanation Customer 1 (Alice): Buys a ticket for 50. Tickets left: 4. Customer 2 (Bob): Buys a ticket for 60. Tickets left: 3. Customer 3 (Charlie): Buys a ticket for 70. Tickets left: 2. Customer 4 (David): Buys a ticket for 80. Tickets left: 1. Customer 5 (Eve): Buys a ticket for 90. Tickets left: 0. Customer 6 (Frank): No tickets left, skipped. Customer 7 (Grace): No tickets left, skipped. Total revenue: 50 + 60 + 70 + 80 + 90 = 350.","solution":"from collections import deque def ticket_booking_system(T, N, customers): Simulates a ticket booking system with a given number of tickets and customers. Args: T (int): The total number of tickets available. N (int): The number of customers. customers (list of tuples): Each tuple contains a customer\'s name (str) and the ticket value (int). Returns: tuple: The total revenue from ticket sales (int) and the list of names of customers who bought tickets (list of str). queue = deque(customers) revenue = 0 sold_to_customers = [] while queue and T > 0: customer_name, ticket_value = queue.popleft() if T > 0: revenue += ticket_value T -= 1 sold_to_customers.append(customer_name) return revenue, sold_to_customers"},{"question":"Given an array of integers nums and an integer target, return two integers from the array whose sum is equal to the given target. It is guaranteed that exactly one solution exists, and you may not use the same element twice. Example 1: Input: nums = [2, 7, 11, 15], target = 9 Output: [2, 7] Example 2: Input: nums = [3, 2, 4], target = 6 Output: [2, 4] Example 3: Input: nums = [3, 3], target = 6 Output: [3, 3] Constraints: 2 <= nums.length <= 10^4 -10^9 <= nums[i] <= 10^9 -10^9 <= target <= 10^9","solution":"def two_sum(nums, target): Returns two integers from the array whose sum is equal to the given target. num_map = {} for num in nums: complement = target - num if complement in num_map: return [complement, num] num_map[num] = True return []"},{"question":"Given an array of integers, find the maximum sum of a contiguous subarray such that the subarray contains at least one positive number. Implement the solution in linear time O(N). Input: The first line of input contains an integer T denoting the number of test cases. Each test case consists of two lines. The first line contains an integer N denoting the size of the array. The second line contains N space-separated integers representing the array elements. Output: For each test case, print the maximum sum of the contiguous subarray. If all the numbers in the array are negative, return the maximum single value. Constraints: 1 <= T <= 100 1 <= N <= 100 -1000 <= A[i] <= 1000 Example: Input: 2 8 -2 -3 4 -1 -2 1 5 -3 6 -1 -2 -3 -4 -5 -6 Output: 7 -1 Note: The Input/Output format and Example given are used for the system\'s internal purpose, and should be used by a user for expected output only. As it is a function problem, hence a user should not read any input from stdin/console. The task is to complete the function specified, and not to write the full code.","solution":"def max_sum_contiguous_subarray(arr): max_sum = arr[0] current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum def solve(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] arr = test_cases[i][1] results.append(max_sum_contiguous_subarray(arr)) return results"},{"question":"A prestigious robotics competition is about to commence, and every team is tasked with building a robot that can arrange a sequence of numbers into the lexicographically smallest sequence possible after performing a series of operations. Each team is given an array of distinct integers, and they can perform any of the following operations exactly once during the competition: 1. **Swap Operation**: Swap any two adjacent elements in the array. 2. **Reverse Operation**: Reverse the order of the elements between any two given indices (inclusive). The objective is to determine the lexicographically smallest sequence that can be achieved by performing either one swap or one reverse operation exactly once. If no operation yields a better result than the initial array, the original sequence is considered as the result. ------ Input ------ The first line contains a single integer indicating the number of test cases (at most 100). Each test case begins with a single integer n indicating the number of integers in the array. The next line contains n space-separated integers which represent the array. Bounds: 1 ≤ n ≤ 1000. All integers in the array are distinct and between 1 and 1000. ------ Output ------ The output for each test case consists of a single line containing the lexicographically smallest sequence that can be achieved. ------ Sample Input 1 ------ 2 5 3 2 1 5 4 3 4 3 2 ------ Sample Output 1 ------ 1 2 3 5 4 2 3 4","solution":"def lexicographically_smallest_sequence(arr): n = len(arr) # To simplify, we assume no operation initially gives the smallest lexicographical order best_sequence = arr[:] # Try the swap operation and compare each swap result to find the smallest sequence for i in range(n - 1): arr_copy = arr[:] arr_copy[i], arr_copy[i + 1] = arr_copy[i + 1], arr_copy[i] if arr_copy < best_sequence: best_sequence = arr_copy # Try the reverse operation for every possible pair of indices and find the smallest order for start in range(n): for end in range(start + 1, n): arr_copy = arr[:] arr_copy[start:end + 1] = reversed(arr_copy[start:end + 1]) if arr_copy < best_sequence: best_sequence = arr_copy return best_sequence def solve_robotics_competition(input_data): result = [] lines = input_data.strip().split(\'n\') index = 0 num_test_cases = int(lines[index]) index += 1 for _ in range(num_test_cases): n = int(lines[index]) index += 1 array = list(map(int, lines[index].split())) index += 1 smallest_sequence = lexicographically_smallest_sequence(array) result.append(\' \'.join(map(str, smallest_sequence))) return \'n\'.join(result)"},{"question":"In a coding contest, participants submit their solutions to various problems. After the contest, the organizers want to compile a list of participants who have solved at least one problem and sort them based on the number of problems they have solved in descending order. If two participants have solved the same number of problems, they should be sorted lexicographically by their user IDs. Your task is to write a program that takes the submissions data and outputs the sorted list of participants along with the number of problems they have solved. Input The first line of input contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 1000) — the number of participants and the number of submissions. The next m lines each contain a string userID and an integer problemID (1 ≤ problemID ≤ 1000) — the participant\'s user ID and the problem ID of their submission. Output Output the list of participants who have solved at least one problem, sorted by the number of problems they have solved in descending order. If two participants have solved the same number of problems, sort them lexicographically by their user IDs. Each participant should be listed with their userID and the number of problems they have solved. Examples Input 5 6 alice 1 bob 2 alice 2 charlie 1 alice 3 bob 1 Output alice 3 bob 2 charlie 1 Input 3 4 eve 2 dave 2 eve 1 eve 2 Output eve 2 dave 1 Note In the first example, \\"alice\\" has solved problems 1, 2, and 3, \\"bob\\" has solved problems 1 and 2, and \\"charlie\\" has solved problem 1. In the second example, \\"eve\\" has solved problems 1 and 2, and \\"dave\\" has solved problem 2.","solution":"def compile_results(n, m, submissions): from collections import defaultdict # Dictionary to store the number of unique problems solved by each participant problems_solved = defaultdict(set) # Process each submission for userID, problemID in submissions: problems_solved[userID].add(problemID) # Create a list of participants and their solved problem counts result = [(userID, len(problems)) for userID, problems in problems_solved.items()] # Sort the participants first by problem count (descending) and then by userID (lexicographically) result.sort(key=lambda x: (-x[1], x[0])) return result"},{"question":"Alice loves block games, but her favorite game is a new kind of problem involving strings and blocks. She faces the following challenge: Alice has a string consisting of N characters, and she needs to divide this string into a minimum number of contiguous blocks such that no two consecutive blocks have the same starting character. Additionally, each block must contain at least one character. Write a program to help Alice find the minimum number of contiguous blocks required to partition the string under these conditions. Input Format: - The first line contains an integer T denoting the number of test cases. - Each of the next T lines contains a string S which consists of lowercase English letters. Output Format: For each test case, output the minimum number of blocks required to partition the string under the given conditions in a new line. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 The string S will only contain lowercase English letters. SAMPLE INPUT 3 aabcc abcde aaa SAMPLE OUTPUT 3 1 3 Explanation In the first case, \\"aabcc\\" can be partitioned as follows: - Block 1: \\"aa\\" - Block 2: \\"b\\" - Block 3: \\"cc\\" Hence, three blocks are required. In the second case, \\"abcde\\" can be considered as a single block since no two consecutive characters are the same. Hence, only one block is needed. In the third case, \\"aaa\\" can be partitioned as follows: - Block 1: \\"a\\" - Block 2: \\"a\\" - Block 3: \\"a\\" Thus, three blocks are required because the same starting character in consecutive blocks is not allowed.","solution":"def min_blocks_required(string): Returns the minimum number of contiguous blocks required such that no two consecutive blocks have the same starting character. if not string: return 0 # Initialize count of blocks block_count = 1 # Iterate over the string to check consecutive characters for i in range(1, len(string)): if string[i] == string[i-1]: block_count += 1 return block_count def process_test_cases(T, test_cases): results = [] for string in test_cases: results.append(min_blocks_required(string)) return results if __name__ == \\"__main__\\": T = int(input()) test_cases = [input().strip() for _ in range(T)] results = process_test_cases(T, test_cases) for result in results: print(result)"},{"question":"Marek is organizing a treasure hunt game for his friends. The treasure hunt involves a sequence of puzzles, each leading to the next clue. Marek has designed the game such that each puzzle has a unique solution, and the sequence of solutions forms a distinct path from the start to the treasure. The puzzle solution paths can be represented as a directed graph where each node represents a puzzle, and each directed edge represents solving a puzzle and moving on to the next. Marek has provided a list of pairs of puzzles, where each pair ((u, v)) means there is a direct path from puzzle (u) to puzzle (v). However, Marek realizes that if there are multiple possible ways from the start puzzle to the treasure, his friends might get confused. Therefore, he needs to ensure that there is exactly one unique path from the start puzzle to the treasure and no cycles in the path. Given the number of puzzles (N) and the list of pairs of puzzles, can you help Marek identify if it is possible to guarantee a single unique path from the start puzzle to the treasure? If it is possible, output the order in which the puzzles should be solved. If it is not possible, output \\"Impossible\\". -----Input----- - The first line of the input contains two integers (N) and (M), (2 le N le 1000), which denotes the number of puzzles and the number of directed paths between puzzles respectively. - The next (M) lines each contain two integers (u) and (v) ((1 le u, v le N)), denoting a directed path from puzzle (u) to puzzle (v). -----Output----- - If it is possible to solve the treasure hunt with a unique path, print (N) integers denoting the order of puzzles from the start to the treasure. - If it is impossible to ensure a single unique path from start to treasure, print \\"Impossible\\". -----Examples----- Sample Input 1: 4 3 1 2 2 3 3 4 Sample Output 1: 1 2 3 4 Sample Input 2: 4 4 1 2 1 3 2 4 3 4 Sample Output 2: Impossible Sample Input 3: 5 4 1 2 2 3 3 4 4 5 Sample Output 3: 1 2 3 4 5 Explanation: - In Sample Output 1, there is only one path from 1 to 4 through 2 and 3. - In Sample Output 2, there are multiple ways to reach 4 from 1 (either via 2 or 3), making it impossible to enforce a unique path. - In Sample Output 3, there is only one path from 1 to 5 through 2, 3, and 4.","solution":"from collections import defaultdict, deque def find_unique_path(N, M, edges): graph = defaultdict(list) in_degree = [0] * (N + 1) for u, v in edges: graph[u].append(v) in_degree[v] += 1 # Find nodes with no incoming edges (possible starting nodes) start_nodes = [node for node in range(1, N + 1) if in_degree[node] == 0] if len(start_nodes) != 1: return \'Impossible\' start_node = start_nodes[0] # Perform topological sort topo_order = [] queue = deque([start_node]) while queue: if len(queue) > 1: return \'Impossible\' current = queue.popleft() topo_order.append(current) for neighbor in graph[current]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) if len(topo_order) != N: return \'Impossible\' return \' \'.join(map(str, topo_order))"},{"question":"A company manufactures a particular product in different assembly lines. Each assembly line takes a certain amount of time to produce one unit of the product, and all assembly lines work simultaneously. The company wants to know how many units of the product can be produced in a given amount of time. You are given an array where each element represents the production time of one assembly line, and you need to determine the total number of units produced by all assembly lines in a given total time. Write a function `total_units_produced(times, totalTime)` where: - `times` is an array of integers where each element represents the production time of an assembly line. - `totalTime` is an integer representing the total available time. Your function should return the total number of units produced by all assembly lines in the given total time. ---Constraints--- - 1 <= len(times) <= 10^3 - 1 <= times[i] <= 10^4 - 1 <= totalTime <= 10^9 ---Input Format--- The first line contains an integer n, the number of assembly lines. The second line contains n space-separated integers representing the production times of each assembly line. The third line contains a single integer representing the total available time. ---Output Format--- Output a single integer representing the total number of units produced by all assembly lines in the given total time. ---Sample Input--- 3 4 5 6 30 ---Sample Output--- 18 ---Explanation--- In the given example, there are 3 assembly lines with production times 4, 5, and 6 respectively, and the total available time is 30. Each assembly line works simultaneously, so: - Assembly line 1 can produce 30 // 4 = 7 units. - Assembly line 2 can produce 30 // 5 = 6 units. - Assembly line 3 can produce 30 // 6 = 5 units. Therefore, the total units produced are 7 + 6 + 5 = 18 units.","solution":"def total_units_produced(times, totalTime): Returns the total units produced by all assembly lines in the given total time. :param times: List of integers where each element represents the production time of an assembly line. :param totalTime: An integer representing the total available time. :return: Total number of units produced. total_units = sum(totalTime // time for time in times) return total_units"},{"question":"Problem Description You have been hired by a local radio station to write a utility program to manage their playlist. A lot of the same song titles are played repeatedly in their playlist, and the station wants to ensure a varied list. They are asking for a function that, given an initial playlist, removes duplicates while maintaining the original order of the first occurrences of each song. Input The first line contains an integer T, the number of test cases. Each test case consists of a single line with song titles separated by a comma. Output For each test case, output the cleaned playlist: the original order of songs with duplicates removed, as a comma-separated string. Constraints 1 ≤ T ≤ 1000 1 ≤ |Playlist| ≤ 1000, where |Playlist| indicates the total number of characters in the playlist string. Each song title can contain between 1 and 100 characters. Example Input: 2 songA,songB,songA,songC,songB hit1,hit2,hit2,hit1,hit3,hit3 Output: songA,songB,songC hit1,hit2,hit3","solution":"def remove_duplicates(playlist): Removes duplicates from the playlist while maintaining the original order. seen = set() result = [] for song in playlist.split(\',\'): if song not in seen: seen.add(song) result.append(song) return \',\'.join(result) def process_playlists(test_cases): Process and clean multiple playlists. Parameters: test_cases (list): A list of strings, each representing a playlist. Returns: list: A list of cleaned playlists. return [remove_duplicates(playlist) for playlist in test_cases]"},{"question":"(Coding Assessment Question) Anna is playing a game with a set of n ropes, each with a specific length. She can perform a series of operations to combine ropes. In one operation, she can pick any two ropes, tie their ends together to form a new rope, and the length of the new rope will be the sum of the two ropes\' lengths. The cost of this operation is equal to the length of the new rope formed. Anna wants to combine all the ropes into a single rope with the minimum possible total cost. Write a program to determine the minimal cost required to combine all the ropes into one. Input The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of ropes. The second line contains n space-separated integers li (1 ≤ li ≤ 10000) — the lengths of the ropes. Output Print a single integer — the minimum cost required to combine all the ropes into one. Examples Input 4 4 3 2 6 Output 29 Input 3 1 2 3 Output 9 Note In the first example, Anna can combine the ropes as follows: 1. Combine ropes of lengths 2 and 3, cost = 2 + 3 = 5 (new rope length = 5) 2. Combine ropes of lengths 4 and 5, cost = 4 + 5 = 9 (new rope length = 9) 3. Combine ropes of lengths 6 and 9, cost = 6 + 9 = 15 (final rope length = 15) Total cost = 5 + 9 + 15 = 29 In the second example, Anna can combine the ropes as follows: 1. Combine ropes of lengths 1 and 2, cost = 1 + 2 = 3 (new rope length = 3) 2. Combine ropes of lengths 3 and 3, cost = 3 + 3 = 6 (final rope length = 6) Total cost = 3 + 6 = 9","solution":"import heapq def minimal_combination_cost(n, lengths): Given a list of rope lengths, this function computes the minimal cost required to combine all ropes into one. if n == 1: return 0 heapq.heapify(lengths) total_cost = 0 while len(lengths) > 1: # Take the two shortest ropes first = heapq.heappop(lengths) second = heapq.heappop(lengths) # Combine them current_cost = first + second total_cost += current_cost # Add the combined rope back to the heap heapq.heappush(lengths, current_cost) return total_cost"},{"question":"Given a list of integers, create a function to determine the smallest number of operations needed to make all elements of the list the same. In one operation, you can increment or decrement any element by 1. -----Input----- The first line of input contains an integer N (1 leq N leq 100000), the number of elements in the list. The second line contains N space-separated integers representing the elements of the list. Each integer A_i (-1000 leq A_i leq 1000). -----Output----- The only line of output should contain a single integer, the minimum number of operations required to make all elements of the list the same. -----Examples----- Sample Input 1: 4 1 2 3 4 Sample Output 1: 4 Sample Input 2: 3 -1 0 1 Sample Output 2: 2 **Note**: In the first example, one optimal way to make all elements the same is by taking the median or middle value (2 or 3) and performing the following operations: 1. Increment 1 to 2 (1 operation) 2. Increment 2 to 2 (0 operations) 3. Decrement 3 to 2 (1 operations) 4. Decrement 4 to 3 to 2 (2 operations) Total operations = 4. In the second example, make all elements equal to 0 for minimum operations: 1. Increment -1 to 0 (1 operation) 2. Decrement 1 to 0 (1 operation) Total operations = 2.","solution":"def min_operations_to_equalize(nums): Determines the smallest number of operations needed to make all elements of the list equal. In one operation, any element of the list can be incremented or decremented by 1. Args: nums (list of int): List of integers representing the elements of the list. Returns: int: Minimum number of operations required to make all elements of the list the same. nums.sort() median = nums[len(nums) // 2] operations = 0 for num in nums: operations += abs(num - median) return operations"},{"question":"Network Packet Analyzer In a computer network, packets are sent to and received from various devices. Each packet contains a header with information about its source and destination. The header also includes the size of the packet. Network administrators often need to analyze these packets to monitor traffic and diagnose issues. Your task is to analyze a series of network packets and determine various statistics from the given packet data. Each packet is represented as a string containing the source address, destination address, and size, separated by commas. Multiple packets are provided in a single input string, separated by semicolons. You need to write a program that takes a single input string representing the network packets and performs the following tasks: 1. Total number of packets. 2. Unique source addresses. 3. Total size of all packets. 4. Average packet size. The source and destination addresses are IPv4 addresses, and the size is an integer representing the number of bytes. Input The input consists of a single line containing a series of packet data strings separated by semicolons. Each packet data string contains the source address, destination address, and size, separated by commas. Constraints: - The input line has a length of 1 or more and 10000 characters or less. - There can be up to 1000 packets in the input. - IPv4 addresses and size are properly formatted and valid. Output For the given input, the output should consist of the following four lines: 1. Total number of packets. 2. Number of unique source addresses. 3. Total size of all packets. 4. Average packet size (rounded down to the nearest integer). Sample Input 192.168.1.1,192.168.1.2,100;192.168.1.2,192.168.1.3,200;192.168.1.1,192.168.1.3,50 Sample Output 3 2 350 116 Example Input 192.168.1.1,192.168.1.2,100;192.168.1.2,192.168.1.3,200;192.168.1.1,192.168.1.3,50 Output 3 2 350 116","solution":"def analyze_packets(packet_data): Analyzes the network packets and calculates total number of packets, number of unique source addresses, total size of all packets and average packet size. Args: packet_data (str): A string of packet information separated by semicolons. Each packet information includes source address, destination address and size separated by commas. Returns: tuple: Total number of packets, number of unique source addresses, total size of all packets, average packet size (rounded down to the nearest integer). if not packet_data: return (0, 0, 0, 0) packets = packet_data.split(\';\') total_packets = len(packets) source_addresses = set() total_size = 0 for packet in packets: source, destination, size = packet.split(\',\') source_addresses.add(source) total_size += int(size) avg_packet_size = total_size // total_packets return total_packets, len(source_addresses), total_size, avg_packet_size"},{"question":"List Intersections Alice and Bob are given two lists of integers. They want to find the intersection of these two lists, which includes all the elements that are present in both lists, with duplicates preserved in case an element appears multiple times in both lists. The order in the resultant list should be the same as the order that the elements first appear in the first list. Write a program to help Alice and Bob find the intersection of their lists. # Input - The first line contains an integer T, the number of test cases. - Each test case consists of: - The first line has an integer n, the number of elements in the first list. - The second line contains n space-separated integers representing the first list. - The third line has an integer m, the number of elements in the second list. - The fourth line contains m space-separated integers representing the second list. # Output - For each test case, output a line containing the intersection of the two lists in the order they appear in the first list. If there is no common element, output an empty line. # Constraints - 1 ≤ T ≤ 50 - 1 ≤ n, m ≤ 1000 - Each list element can be any integer between -10^9 and 10^9 inclusive. # Sample Input ``` 2 5 1 2 2 3 4 4 2 3 2 5 4 1 1 1 1 2 1 2 ``` # Sample Output ``` 2 2 3 1 ``` # Explanation For the first test case, the intersections (with duplicates preserved) are [2, 2, 3]. These elements appear in the order they are listed in the first list. For the second test case, both lists [1, 1, 1, 1] and [1, 2] have 1 in common. So the output is [1].","solution":"def intersection_of_lists(list1, list2): Find the intersection of two lists, preserving the order of the first list and keeping duplicates. intersection = [] counter = {} for num in list2: if num in counter: counter[num] += 1 else: counter[num] = 1 for num in list1: if num in counter and counter[num] > 0: intersection.append(num) counter[num] -= 1 return intersection def process_test_cases(T, test_cases): results = [] for i in range(T): n, list1, m, list2 = test_cases[i] result = intersection_of_lists(list1, list2) results.append(result) return results"},{"question":"Nikita is trying to escape from a maze, which can be represented as a grid of N rows and M columns. Some cells in the grid are blocked, and others are not. Nikita can move up, down, left, or right, but cannot move diagonally or through blocked cells. She needs to find the shortest path from her starting position to the exit. Write a program to find the length of the shortest path that she can take to reach the exit. If there\'s no possible way to reach the exit, return -1. INPUT The first line of input contains two integers, N and M, denoting the number of rows and columns in the grid respectively. The next N lines each contain M characters, representing the grid. The characters can be: \'s\' - Nikita\'s starting position (will only appear once) \'e\' - the exit position (will only appear once) \'.\' - an open cell \'#\' - a blocked cell OUTPUT The first and only line of output must contain the length of the shortest path from Nikita\'s starting position to the exit, or -1 if no such path exists. CONSTRAINTS 1 ≤ N, M ≤ 100 SAMPLE INPUT 5 5 s#... .#.#. .#... .#. ...e. SAMPLE OUTPUT 7 EXPLANATION The shortest path from \'s\' to \'e\' is as follows: down (1 step), right (1 step), right (1 step), down (1 step), down (1 step), right (1 step), right (1 step). Total steps = 7.","solution":"from collections import deque def shortest_path(grid, start, end): rows, cols = len(grid), len(grid[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(start[0], start[1], 0)]) # (row, col, distance) visited = set() visited.add((start[0], start[1])) while queue: row, col, dist = queue.popleft() if (row, col) == end: return dist for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < rows and 0 <= new_col < cols and grid[new_row][new_col] != \'#\' and (new_row, new_col) not in visited: visited.add((new_row, new_col)) queue.append((new_row, new_col, dist + 1)) return -1 def get_shortest_path_length(n, m, grid): start = end = None for i in range(n): for j in range(m): if grid[i][j] == \'s\': start = (i, j) elif grid[i][j] == \'e\': end = (i, j) if not start or not end: return -1 return shortest_path(grid, start, end) # Example Usage: # n = 5 # m = 5 # grid = [ # \\"s#...\\", # \\".#.#.\\", # \\".#...\\", # \\".#.\\", # \\"...e.\\" # ] # print(get_shortest_path_length(n, m, grid)) # Output: 7"},{"question":"Given an array of integers, determine the maximum sum that can be obtained by selecting a subsequence of the array such that no two elements in the subsequence are adjacent in the original array. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) – the length of the array. The second line contains n space-separated integers a_i (-10^4 ≤ a_i ≤ 10^4) – the elements of the array. -----Output----- Print the maximum possible sum. -----Examples----- Input 5 3 2 5 10 7 Output 15 Input 3 -1 2 4 Output 4","solution":"def max_non_adjacent_sum(arr): Returns the maximum sum of a subsequence with no two adjacent elements. if not arr: return 0 if len(arr) == 1: return max(0, arr[0]) include = 0 exclude = 0 for num in arr: # Current max excluding the current element new_exclude = max(include, exclude) # Current max including the current element include = exclude + num exclude = new_exclude return max(include, exclude)"},{"question":"Given a string containing only lower case Latin letters and spaces, write a function to find the first non-repeating character in the string. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. Then T test cases follow. - Each test case is described with a single line containing a string S. -----Output----- - For each test case, output a single line containing the first non-repeating character in that string. If all characters are repeating, output \\"None\\". -----Constraints----- - 1 ≤ T ≤ 1000 - 1 ≤ |S| ≤ 1000, where |S| is the length of the string S. - The string S will contain only lower case Latin letters and spaces. -----Example----- Input: 2 hello world programming Output: h p -----Explanation----- In the string \\"hello world\\", the first non-repeating character is \'h\'. In the string \\"programming\\", the first non-repeating character is \'p\'.","solution":"def first_non_repeating_char(s): Returns the first non-repeating character in a string s. If all characters are repeating, returns \\"None\\". from collections import Counter frequency = Counter(s) for char in s: if char != \' \' and frequency[char] == 1: return char return \\"None\\" def process_test_cases(test_cases): Processes multiple test cases and returns the results. Each element in test_cases is a string for which the first non-repeating character is to be found. results = [] for s in test_cases: results.append(first_non_repeating_char(s)) return results"},{"question":"Alice is organizing her bookshelf that contains n books. Each book has a unique ID ranging from 1 to n. She wants to arrange these books in a manner such that for any given book with ID i, if she has to find a book with a higher ID, it should be located on a higher shelf. Alice’s bookshelf is represented as a level-wise structure with k shelves numbered from 1 to k (with shelf 1 being the lowest and shelf k being the highest). Each shelf can hold multiple books. She can choose any book and place it on any shelf, but once placed, the book cannot be moved. Given this constraint, can you help Alice find a valid assignment of books to shelves, or determine if it’s impossible to do so? -----Input----- The first line contains two integers n (1 leq n leq 10^5) and k (1 leq k leq 10^5) — the number of books and the number of shelves, respectively. The second line contains n unique integers b_1, b_2, ldots, b_n (1 leq b_i leq n), where b_i is the ID of the i-th book given in the order of their reading priority. -----Output----- If it is impossible to assign the books to shelves according to the given rules, output texttt{-1}. Otherwise, output n integers s_1, s_2, ldots, s_n (1 leq s_i leq k), where s_i represents the shelf number on which the i-th book is placed. If there are multiple valid assignments, print any. -----Examples----- Input 5 3 3 1 4 5 2 Output 2 1 3 3 1 Input 4 2 2 1 3 4 Output 1 1 2 2 Input 3 1 1 2 3 Output -1 -----Note----- In the first example, one possible way to arrange the books is: place book 3 on shelf 2, book 1 on shelf 1, book 4 on shelf 3, book 5 on shelf 3, and book 2 on shelf 1. This respects the rule that for any book with ID i, if it needs to find a book with a higher ID, it is always located on a higher shelf. In the second example, one valid assignment is: place book 2 and book 1 on shelf 1, and book 3 and book 4 on shelf 2. The third example shows that it is impossible to place the books on a single shelf such that the condition is met, thus the output is -1.","solution":"def assign_books_to_shelves(n, k, books): if k == 1 and n > 1: return -1 shelves = [0] * n for i in range(n): shelves[i] = (i % k) + 1 return shelves"},{"question":"Polycarp loves working with binary strings. Recently, he stumbled upon an interesting problem involving binary strings, and now he seeks your help. Given a binary string s of length n, you can perform the following operation any number of times: select a substring of length k and invert all the bits in this substring (change \'0\' to \'1\' and \'1\' to \'0\'). Polycarp wants to make the entire string contain only \'1\'s by applying the minimum number of operations. Help him find out the minimum number of operations required. -----Input----- The first line contains an integer t (1 le t le 10^4) — the number of test cases. Each of the next t lines describe one test case and consist of an integer k (1 le k le n) and a binary string s of length n (1 le n le 10^5). It is guaranteed that the sum of string lengths over all test cases does not exceed 10^6. -----Output----- Print t lines, each containing the minimum number of operations required for the respective test case. -----Examples----- Input 3 3 010101 2 1100 4 0000 Output 2 1 1 -----Notes----- In the first example: 1. We can choose the substring \'010\' starting from index 1 and invert it to \'101\'. The string becomes \'101101\'. 2. Then we can choose the substring \'101\' starting from index 3 and invert it to \'010\'. The string becomes \'111011\'. 3. We can then choose the substring \'011\' starting from index 4 and invert it to \'100\'. The final string \'111111\' has all \'1\'s. So, the total number of operations is 2. In the second example: 1. We can choose the substring \'00\' starting from index 3 and invert it to \'11\'. The string becomes \'1111\'. So, the total number of operations is 1.","solution":"def min_operations_to_make_binary_string_all_ones(k, s): Given a binary string s and an integer k, find the minimum number of operations needed to make all characters in s as \'1\' by inverting any substring of length k. :param k: Length of the substring to be inverted :param s: Binary string :return: Minimum number of operations required to make s contain only \'1\'s n = len(s) operations = 0 i = 0 while i < n: if s[i] == \'0\': i += k operations += 1 else: i += 1 return operations def solve(t, test_cases): results = [] for k, s in test_cases: results.append(str(min_operations_to_make_binary_string_all_ones(k, s))) return \\"n\\".join(results)"},{"question":"In a remote medieval kingdom, there are several villages connected by one-way roads. Each road has a certain toll fee associated with it. The king of the kingdom has assigned a knight to collect tolls from the villagers as he travels across the kingdom. The knight starts his journey from a particular village and travels along the roads collecting tolls from each village he visits. However, the knight has a cunning plan to collect the maximum toll possible by carefully choosing his path. The knight can only visit each village at most once due to the risk of being recognized and captured. Given the start village and the directed graph of the kingdom with villages and toll roads, help the knight determine the maximum toll he can collect on his journey without revisiting any village. Input The first line contains three integers n, m, and s — the number of villages, the number of roads, and the starting village, respectively (1 ≤ n ≤ 100, 0 ≤ m ≤ 1000, 1 ≤ s ≤ n). The next m lines each contain three integers u, v, and t — indicating a one-way road from village u to village v with a toll fee t (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ t ≤ 1000). Output Print a single integer — the maximum toll the knight can collect on his journey. Example Input 5 7 1 1 2 5 1 3 10 2 3 2 2 4 4 3 4 1 3 5 5 4 5 3 Output 15 Note In the given example, the knight starts his journey from village 1 and can collect a maximum toll by traveling through the path: 1 → 3 → 5, collecting tolls of 10 and 5, respectively.","solution":"def max_toll(n, m, s, roads): from collections import defaultdict import heapq # Convert roads input to adjacency list graph = defaultdict(list) for u, v, t in roads: graph[u].append((v, t)) def dijkstra(start): max_toll = defaultdict(int) max_toll[start] = 0 pq = [(-0, start)] visited = set() while pq: current_toll, u = heapq.heappop(pq) current_toll = -current_toll if u in visited: continue visited.add(u) for v, t in graph[u]: if v not in visited and current_toll + t > max_toll[v]: max_toll[v] = current_toll + t heapq.heappush(pq, (-(current_toll + t), v)) return max(max_toll.values()) return dijkstra(s)"},{"question":"A wizard named Merlin has a potion-making session every night. He has n distinct potions, each with an integer potency value. The potency value of each potion can either be positive or negative. Merlin wants to select a pair of potions such that the absolute difference between their potency values is minimized because the smaller the absolute difference, the more stable the final potion will be. Your task is to help Merlin find the minimum absolute difference between the potency values of any pair of potions. -----Input----- The first line contains an integer n (2 ≤ n ≤ 1000) — the number of potions Merlin has. The second line contains n integers, where each integer x_i (-10^4 ≤ x_i ≤ 10^4) represents the potency value of a potion. -----Output----- Print a single integer — the minimum absolute difference between the potency values of any pair of potions. -----Examples----- Input 5 8 -3 1 0 -4 Output 1 Input 3 5 10 15 Output 5 -----Note----- Explanation to the first and second samples from the statement, respectively: - In the first sample, the pair (-3, -4) gives the minimum absolute difference of | -3 - (-4) | = 1. - In the second sample, the pair (5, 10) or (10, 15) gives the minimum absolute difference of |5 - 10| = 5.","solution":"def minimum_absolute_difference(n, potencies): Returns the minimum absolute difference between any pair of potions\' potency values. Parameters: n (int): Number of potions potencies (list[int]): List of potency values Returns: int: Minimum absolute difference # Sort the list of potencies potencies.sort() # Initialize the minimum difference to a large value min_diff = float(\'inf\') # Iterate through the list and find the minimum difference for i in range(1, n): diff = abs(potencies[i] - potencies[i - 1]) if diff < min_diff: min_diff = diff return min_diff"},{"question":"A new algorithm for sorting has been developed which sorts an array in an unusual yet efficient manner. The algorithm works as follows: 1. Divide the array into blocks of size `k`. 2. Sort each block individually. 3. Merge the blocks into a single sorted array. Given an integer array `arr` of length `n` and an integer `k` such that `1 ≤ k ≤ n`, implement this sorting algorithm and return the sorted array. # Input - The first line contains two integers `n` (1 ≤ n ≤ 10^6) and `k` (1 ≤ k ≤ n) – the number of elements in the array and the size of the blocks, respectively. - The second line contains `n` integers representing the elements of the array `arr` (|arr[i]| ≤ 10^9). # Output - Output a single line containing `n` sorted integers. # Example Input ``` 7 3 4 2 1 6 5 3 7 ``` Output ``` 1 2 4 3 5 6 7 ``` Input ``` 8 2 8 7 6 5 4 3 2 1 ``` Output ``` 7 8 5 6 3 4 1 2 ``` # Note In the first example: - The array is divided into blocks of size `3`: `[4, 2, 1]`, `[6, 5, 3]`, and `[7]`. - Each block is sorted: `[1, 2, 4]`, `[3, 5, 6]`, and `[7]`. - The final sorted array is `[1, 2, 4, 3, 5, 6, 7]`. In the second example: - The array is divided into blocks of size `2`: `[8, 7]`, `[6, 5]`, `[4, 3]`, and `[2, 1]`. - Each block is sorted: `[7, 8]`, `[5, 6]`, `[3, 4]`, and `[1, 2]`. - The final sorted array is `[7, 8, 5, 6, 3, 4, 1, 2]`.","solution":"def unusual_sort(arr, k): Sorts the array in blocks of size k and then merges them. Args: - arr: List[int] -- the input array to be sorted. - k: int -- the size of the blocks to split the array into. Returns: - List[int] -- the merged sorted blocks. n = len(arr) result = [] for i in range(0, n, k): block = arr[i:i + k] block.sort() result.extend(block) return result"},{"question":"Imagine you are given a tree with n nodes, etched into mathematical paper by an experienced algorithmist. You need to help them by answering a seemingly simple question about the tree. The tree is described by its n nodes and n-1 edges connecting these nodes. Each node of the tree has a value assigned to it. Let’s denote the value at node i as vi. Your goal is to compute for each node u, the maximum value of a node that is reachable from u, either directly or through other nodes, without visiting any node more than once. This task can be broken down into a clear algorithmic problem. Your program needs to find, for every node u, the maximum value among all nodes in the subtree rooted at u. # Input The input consists of the following: 1. The first line contains a single integer n (1 ≤ n ≤ 100000) — the number of nodes in the tree. 2. The second line contains n integers v1, v2, ..., vn (1 ≤ vi ≤ 100000) — the values of the nodes. 3. Each of the next n - 1 lines contains two integers u and v (1 ≤ u, v ≤ n) denoting an edge between nodes u and v. # Output Output n integers, where the i-th integer is the maximum value among all nodes in the subtree rooted at node i. # Examples Input ``` 5 1 3 2 5 4 1 2 1 3 2 4 2 5 ``` Output ``` 5 5 2 5 4 ``` Explanation - Node 1’s subtree contains [1, 3, 2, 5, 4] with a maximum value of 5. - Node 2’s subtree contains [3, 5, 4] with a maximum value of 5. - Node 3’s subtree contains [2] with a maximum value of 2. - Node 4’s subtree is just [5] with a maximum value of 5. - Node 5’s subtree is just [4] with a maximum value of 4. # Note The values on the nodes form a single connected component since the input graph is a tree. Implementing a Depth First Search (DFS) or Breadth First Search (BFS) to traverse the tree and collect the maximum values efficiently could be essential for solving this problem.","solution":"def calculate_subtree_max_values(n, values, edges): from collections import defaultdict, deque # Create adjacency list representation of the tree tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Array to store the maximum values of subtrees subtree_max_values = [0] * (n + 1) # DFS function to calculate subtree maximum def dfs(node, parent): subtree_max = values[node - 1] for neighbor in tree[node]: if neighbor != parent: subtree_max = max(subtree_max, dfs(neighbor, node)) subtree_max_values[node] = subtree_max return subtree_max # Start DFS from root node, assuming 1 as the root dfs(1, -1) # Return the results without the extra zero at index 0 return subtree_max_values[1:] # Example usage n = 5 values = [1, 3, 2, 5, 4] edges = [(1, 2), (1, 3), (2, 4), (2, 5)] print(calculate_subtree_max_values(n, values, edges))"},{"question":"A company is organizing a large conference and has a number of talks scheduled. Each talk has a start and end time, and they are all held in a single conference room. To maximize attendee satisfaction, they need to ensure that there are no overlapping talks. Your task is to write a function that will determine the maximum number of non-overlapping talks that can be scheduled in the conference room. Function Description Complete the function maximumNonOverlappingTalks in the editor below. It should return an integer that represents the maximum number of non-overlapping talks. maximumNonOverlappingTalks has the following parameter(s): - start: an array of integers where start[i] is the start time of talk i. - end: an array of integers where end[i] is the end time of talk i. Note: start and end arrays are of the same length, and each talk i starts at start[i] and ends at end[i]. Input Format The first line contains an integer `n`, the number of talks. Each of the next `n` lines contains two space-separated integers `start[i]` and `end[i]`, the start and end times of a talk. Constraints 1 leq n leq 10^5 1 leq start[i], end[i] leq 10^9 start[i] < end[i] Output Format On a new line, print the maximum number of non-overlapping talks that can be scheduled. Sample Input 4 1 3 2 5 4 7 6 9 Sample Output 2 Explanation In this case, we can schedule two non-overlapping talks. One of the possible ways is: - Schedule the talk from 1 to 3 - Schedule the talk from 6 to 9 Scheduling these two talks ensures that they do not overlap with each other.","solution":"def maximumNonOverlappingTalks(start, end): Determine the maximum number of non-overlapping talks that can be scheduled. Parameters: start (list of int): the start times of the talks end (list of int): the end times of the talks Returns: int: the maximum number of non-overlapping talks talks = sorted(zip(start, end), key=lambda x: x[1]) max_talks = 0 last_end_time = 0 for s, e in talks: if s >= last_end_time: max_talks += 1 last_end_time = e return max_talks"},{"question":"A sports event organizing committee wants to track and rank athletes based on their performance in different events. Each athlete participates in multiple events, and each event has a unique score. The ranking is determined based on the total score across all events. If multiple athletes have the same total score, the one with the lower athlete number is ranked higher. Write a program that takes the number of athletes, the number of events, and the scores in each event, and outputs the athlete number of the highest ranked athlete along with their total score. input The input is given in the following format: n m a1 e1 s1 :: am s1 a1 e2 s2 :: am s2 :: a1 em sm :: am sm n (1 ≤ n ≤ 20) is the number of athletes, m (1 ≤ m ≤ 20) is the number of events. ak represents the athlete number (1 ≤ ak ≤ n), ej represents the event number (1 ≤ ej ≤ m), and sj (0 ≤ sj ≤ 100) is the score obtained by the athlete ak in event ej. output Output the athlete number of the highest ranked athlete and their total score on one line separated by blanks. Example Input 3 3 1 1 10 2 1 20 3 1 15 1 2 25 2 2 35 3 2 30 1 3 40 2 3 30 3 3 35 Output 2 85","solution":"def highest_ranked_athlete(n, m, scores): athlete_scores = [0] * n for score in scores: athlete, event, points = score athlete_scores[athlete - 1] += points max_score = max(athlete_scores) highest_athlete = athlete_scores.index(max_score) + 1 return highest_athlete, max_score"},{"question":"Jane is working on a grid puzzle game where she needs to clear the board by eliminating all the blocks with the same color along a single line. Each cell of the grid is either empty or contains a colored block represented by an integer. The grid cells are identified by their (row, column) coordinates, and a line can be either horizontal, vertical, or diagonal. Jane\'s task is to identify the maximum number of blocks with the same color that she can eliminate in one move by drawing a line. You are given a grid of `n` rows and `m` columns, where each cell contains an integer representing the color of the block or a zero if the cell is empty. Your task is to determine the maximum number of blocks of the same color that can be eliminated by drawing one valid line. -----Input----- The first line of the input contains two integers 1 leq n, m leq 100, the dimensions of the grid. The next `n` lines each contain `m` integers, where the j-th integer in the i-th line represents the color of the block at cell (i, j) (0 if the cell is empty and an integer between 1 and 10 inclusive representing the color). -----Output----- The only line of the output should contain the maximum number of blocks of the same color that can be eliminated in one move. -----Examples----- Sample Input: 4 5 1 2 2 3 4 2 2 0 2 2 1 0 0 0 2 1 1 1 1 1 Sample Output: 5 Explanation: The maximum number of blocks with the same color (1) can be eliminated by drawing a horizontal line through the bottom row.","solution":"def max_blocks_eliminated(grid): Given a grid representing a puzzle, returns the maximum number of blocks of the same color that can be eliminated by drawing one valid line. n = len(grid) m = len(grid[0]) def count_same_color(i, j, di, dj): color = grid[i][j] count, x, y = 0, i, j while 0 <= x < n and 0 <= y < m and grid[x][y] == color: count += 1 x += di y += dj return count if color != 0 else 0 max_count = 0 directions = [(0, 1), (1, 0), (1, 1), (1, -1)] # right, down, down-right, down-left for i in range(n): for j in range(m): for di, dj in directions: max_count = max(max_count, count_same_color(i, j, di, dj)) return max_count"},{"question":"In a simulated vehicular network, autonomous vehicles communicate with each other to avoid collisions and optimize travel routes. Each vehicle has a unique identifier and certain priorities that represent its urgency or importance on the network. A vehicle\'s priority can change based on various events such as traffic conditions, emergencies, and more. When a vehicle reaches an intersection, it needs to calculate the order in which vehicles should cross, based on their priorities. Vehicle priorities are represented as integers, where higher numbers indicate higher priority. Additionally, if two vehicles have the same priority, the vehicle with the smaller identifier crosses first. Your task is to determine the order in which vehicles will cross the intersection. Input The first line of the input contains an integer n (1 ≤ n ≤ 20) — the number of vehicles approaching the intersection. Each of the next n lines contains two elements: a string identifier and an integer priority (0 ≤ priority ≤ 100). The identifier consists of lowercase Latin letters and digits, with a length from 1 to 10 characters. Output Print n lines, each containing a vehicle identifier in the order they will cross the intersection, from first to last. Example Input 4 car1 10 car2 20 car3 10 car4 5 Output car2 car1 car3 car4 Input 3 alpha12 15 bravo1 30 charlie5 15 Output bravo1 alpha12 charlie5","solution":"def intersection_order(n, vehicles): Determines the order in which vehicles will cross the intersection based on their priorities. :param n: Number of vehicles approaching the intersection. :param vehicles: List of tuples where each tuple contains vehicle identifier and its priority. :return: List of vehicle identifiers in the order they will cross the intersection. # Sort vehicles first by priority (descending), then by identifier (ascending) in case of tie vehicles.sort(key=lambda x: (-x[1], x[0])) # Extract sorted identifiers ordered_identifiers = [identifier for identifier, priority in vehicles] return ordered_identifiers # Example usage if __name__ == \\"__main__\\": n = int(input()) vehicles = [input().split() for _ in range(n)] for i in range(n): vehicles[i][1] = int(vehicles[i][1]) order = intersection_order(n, vehicles) for veh in order: print(veh)"},{"question":"Peter is preparing for his final exams and has set up a study schedule that includes daily sessions of exactly 2 hours. Given the start time and end time of a study session, find out whether the session spans exactly 2 hours. ------ Input Format ------ - The first line of input will contain a single integer T, the number of test cases. Then the test cases follow. - Each test case contains one line of input with two space-separated integers S and E, where S represents the start time and E represents the end time. ------ Output Format ------ For each test case, print in a single line texttt{YES} if the session spans exactly 2 hours. Otherwise, print texttt{NO}. You may print each character of the string in either uppercase or lowercase (for example, the strings texttt{YeS}, texttt{yEs}, texttt{yes} and texttt{YES} will all be treated as identical). ------ Constraints ------ 1 ≤ T ≤ 12 0 ≤ S < 24 0 ≤ E < 24 Note: Times are given in 24-hour format. ----- Sample Input 1 ------ 3 10 12 18 20 9 11 ----- Sample Output 1 ------ YES YES YES ----- Explanation 1 ------ Test case 1: The session starts at 10 and ends at 12, which is exactly 2 hours long, so the answer is texttt{YES}. Test case 2: The session starts at 18 and ends at 20, which is exactly 2 hours long, so the answer is texttt{YES}. Test case 3: The session starts at 9 and ends at 11, which is exactly 2 hours long, so the answer is texttt{YES}.","solution":"def is_two_hour_session(S, E): Given start time S and end time E, determine if the session is exactly 2 hours. # Calculate the duration duration = (E - S) % 24 # Check if duration is 2 hours if duration == 2: return \\"YES\\" else: return \\"NO\\" def process_test_cases(test_cases): results = [] for S, E in test_cases: results.append(is_two_hour_session(S, E)) return results"},{"question":"Given a string, write a function to determine if it is a palindrome, considering only alphanumeric characters and ignoring cases. Example: Given \\"A man, a plan, a canal: Panama\\", return true. Given \\"race a car\\", return false. Note: For the purpose of this problem, we define empty string as valid palindrome. Credits: Special thanks to @agourlay for adding this problem and creating all test cases.","solution":"def is_palindrome(s: str) -> bool: Determines if the given string is a palindrome considering only alphanumeric characters and ignoring cases. :param s: The input string. :return: True if the string is a palindrome, False otherwise. # Filter out non-alphanumeric characters and convert to lowercase. filtered_chars = [char.lower() for char in s if char.isalnum()] return filtered_chars == filtered_chars[::-1]"},{"question":"You are developing a system for managing a library\'s book lending process. The system needs to support initializing the library\'s catalog, lending books to users, returning books, and generating a report of the most borrowed books. Each book has a unique identifier, a title, and an initial quantity. Users can borrow a book if it\'s available in the library and must return it when they\'re done. If multiple books have the same borrow count in the report, they should be sorted alphabetically by title. Write a program to handle the following operations: 1. Add Books: Initialize the library\'s catalog by adding multiple books. 2. Borrow Books: Users can borrow a book by its identifier. 3. Return Books: Users can return a book by its identifier. 4. Generate Report: Output a list of the top borrowed books in descending order of borrow count along with their titles and borrow counts. Input: The input is provided in the following format: ``` N C book_id1 title1 quantity1 book_id2 title2 quantity2 :: book_idN titleN quantityN command1 command2 :: commandC ``` The first line contains two integers, N (the number of books) and C (the number of commands). The next N lines provide the initial catalog of the library with each line containing an id (a positive integer), a title (one or more words), and an initial quantity (a positive integer greater than 0). The following C lines contain commands which can be in one of the following formats: - `BORROW book_id` - `RETURN book_id` - `REPORT` Each `BORROW` command attempts to borrow the book with the specified `book_id`. Each `RETURN` command returns the book with the specified `book_id`. Each `REPORT` command outputs the identifier, title, and borrow count of the books sorted in descending order of borrow count and then alphabetically by title for books with the same borrow count. Output: For each `REPORT` command, output the list of books in the requested order. Each book\'s entry should be printed on a new line in the format: `book_id title borrow_count` Examples: Input: ``` 4 6 1 \\"The Great Gatsby\\" 3 2 \\"1984\\" 2 3 \\"To Kill a Mockingbird\\" 4 4 \\"The Catcher in the Rye\\" 1 BORROW 1 BORROW 1 BORROW 2 RETURN 1 BORROW 4 REPORT ``` Output: ``` 1 The Great Gatsby 2 2 1984 1 4 The Catcher in the Rye 1 ``` Input: ``` 2 4 1 \\"Harry Potter\\" 5 2 \\"The Hobbit\\" 3 BORROW 2 BORROW 1 BORROW 2 REPORT ``` Output: ``` 2 The Hobbit 2 1 Harry Potter 1 ```","solution":"class Library: def __init__(self): self.books = {} self.borrow_counts = {} def add_book(self, book_id, title, quantity): self.books[book_id] = { \\"title\\": title, \\"quantity\\": quantity, \\"borrowed\\": 0 } self.borrow_counts[book_id] = 0 def borrow_book(self, book_id): if book_id in self.books and self.books[book_id][\\"quantity\\"] > 0: self.books[book_id][\\"quantity\\"] -= 1 self.books[book_id][\\"borrowed\\"] += 1 self.borrow_counts[book_id] += 1 else: print(f\\"Book with id {book_id} cannot be borrowed.\\") def return_book(self, book_id): if book_id in self.books: self.books[book_id][\\"quantity\\"] += 1 def generate_report(self): sorted_books = sorted( self.books.items(), key=lambda item: (-item[1][\\"borrowed\\"], item[1][\\"title\\"]) ) report = [] for book_id, book_info in sorted_books: if book_info[\\"borrowed\\"] > 0: report.append((book_id, book_info[\\"title\\"], book_info[\\"borrowed\\"])) return report"},{"question":"There is a land far away where magical trees named Alpha Trees grow. The Alpha Trees are defined by their ability to grow alphabets instead of leaves. Each Alpha Tree bears a single letter from the English alphabet, and they grow in a unique sequence to spell out words. The forest inhabitants assign a numerical value to each Alpha Tree based on the position of its letter in the alphabet (A=1, B=2, ..., Z=26). One day, an environmental wizard challenged a programmer to find an optimal path through the forest such that the path spells out the longest possible meaningful word from a given dictionary. The path can only be formed if each tree in sequence is either directly adjacent or diagonally adjacent to the previous tree in the path. Given a 2D grid of characters representing the forest and a list of valid dictionary words, you need to find the length of the longest word that can be formed starting from any tree and moving to its adjacent or diagonally adjacent neighbors. Example 1: Input: forest = [ [\'A\', \'B\', \'C\'], [\'D\', \'E\', \'F\'], [\'G\', \'H\', \'I\'] ] dictionary = [\\"ABE\\", \\"CIG\\", \\"BE\\", \\"GED\\"] Output: 3 Explanation: The longest valid word that can be formed is \\"CIG\\" which has a length of 3. Example 2: Input: forest = [ [\'X\', \'Y\', \'Z\'], [\'A\', \'B\', \'C\'], [\'D\', \'E\', \'F\'] ] dictionary = [\\"XYZ\\", \\"YD\\", \\"AB\\"] Output: 3 Explanation: The longest valid word that can be formed is \\"XYZ\\" which has a length of 3. Your Task: You do not need to read input or print anything. Your task is to implement the function `longestWord` which takes the 2D grid `forest` and the list of strings `dictionary` as input parameters and returns the length of the longest word found. Expected Time Complexity: O(n * m * k) where n and m are the dimensions of the forest and k is the number of words in the dictionary. Expected Auxiliary Space: O(n * m) for tracking visited nodes. Constraints: 1 ≤ n, m ≤ 50 1 ≤ len(dictionary) ≤ 100 1 ≤ len(word) in dictionary ≤ 10","solution":"def longestWord(forest, dictionary): rows = len(forest) cols = len(forest[0]) directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] def is_valid(x, y): return 0 <= x < rows and 0 <= y < cols def dfs(x, y, word_idx, word, visited): if word_idx == len(word): return True if not is_valid(x, y) or visited[x][y] or forest[x][y] != word[word_idx]: return False visited[x][y] = True for dx, dy in directions: if dfs(x + dx, y + dy, word_idx + 1, word, visited): return True visited[x][y] = False return False max_length = 0 for word in dictionary: for i in range(rows): for j in range(cols): if forest[i][j] == word[0]: visited = [[False] * cols for _ in range(rows)] if dfs(i, j, 0, word, visited): max_length = max(max_length, len(word)) return max_length"},{"question":"Given an array of integers `nums` and an integer `target`, return the maximum length of a subarray that sums to `target`. If there is no such subarray, return 0. Example 1: Input: nums = [1,-1,5,-2,3], target = 3 Output: 4 Explanation: The subarray [1,-1,5,-2] sums to 3 and is the longest. Example 2: Input: nums = [-2,-1,2,1], target = 1 Output: 2 Explanation: The subarray [-1,2] sums to 1 and is the longest. Constraints: - 1 <= nums.length <= 10^4 - -10^4 <= nums[i] <= 10^4 - -10^9 <= target <= 10^9","solution":"def max_subarray_len(nums, target): Returns the maximum length of a subarray that sums to target. If there is no such subarray, return 0. prefix_sum = 0 prefix_sum_indices = {0: -1} # Dictionary to store the first occurrence of prefix sums max_length = 0 for i, num in enumerate(nums): prefix_sum += num if (prefix_sum - target) in prefix_sum_indices: max_length = max(max_length, i - prefix_sum_indices[prefix_sum - target]) if prefix_sum not in prefix_sum_indices: prefix_sum_indices[prefix_sum] = i return max_length"},{"question":"You are given a matrix `M` of dimensions `m x n`. Your task is to print all unique paths from the top-left corner of the matrix `(0,0)` to the bottom-right corner `(m-1,n-1)`. You can only move to the right or down from each cell. A path is described by its coordinates in the format: `(row1, col1) -> (row2, col2) -> ... -> (rowk, colk)` where `(row1, col1)` is the starting cell and `(rowk, colk)` is the destination cell. An example path for a `2x3` matrix could be: `(0,0) -> (0,1) -> (0,2) -> (1,2)`. Constraints: * 1 leq m leq 8 * 1 leq n leq 8 Input The input is given in the following format: m ; n Output Print all unique paths from the top-left to the bottom-right corner. Each path should be printed in a single line. Example Input 2 2 Output (0,0) -> (0,1) -> (1,1) (0,0) -> (1,0) -> (1,1) Input 3 3 Output (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) (0,0) -> (0,1) -> (1,1) -> (1,2) -> (2,2) (0,0) -> (0,1) -> (1,1) -> (2,1) -> (2,2) (0,0) -> (1,0) -> (1,1) -> (1,2) -> (2,2) (0,0) -> (1,0) -> (1,1) -> (2,1) -> (2,2) (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2)","solution":"def find_paths(m, n): def backtrack(x, y, path): if x == m - 1 and y == n - 1: paths.append(path) return if y + 1 < n: backtrack(x, y + 1, path + [(x, y + 1)]) if x + 1 < m: backtrack(x + 1, y, path + [(x + 1, y)]) paths = [] backtrack(0, 0, [(0, 0)]) for path in paths: print(\' -> \'.join(f\\"({r},{c})\\" for r, c in path)) # Example Usage # find_paths(2, 2) # find_paths(3, 3)"},{"question":"_You have been given a series of log entries from a website that records the time a user logs in. We\'ll assume the users log in multiple times throughout the day. However, you need to help identify the longest session for each user._ > You are provided with a string where each entry is in the format \\"User_Name|HH:MM\\" separated by commas. A session for a single user ends when they log in again or at the last entry for that user. For instance, if a user logs in at 08:00 and then at 12:00, the session duration is 4 hours. **Your task is to compute the maximum duration of any session for each user and return this as a dictionary where the user names are keys and their longest session durations (in minutes) are values.** Assume that: - The log entries are sorted chronologically. - All times are within a single day. --- Examples --- --- Input: ``` \\"john_doe|08:00,jane_doe|09:30,john_doe|10:30,jane_doe|12:45,john_doe|13:00,jane_doe|14:00,john_doe|18:00\\" ``` Output: ``` { \\"john_doe\\": 390, \\"jane_doe\\": 195 } ``` => For john_doe: Sessions are 08:00-10:30 (150 minutes), 10:30-13:00 (150 minutes), 13:00-18:00 (300 minutes). The longest session is 300 minutes. For jane_doe: Sessions are 09:30-12:45 (195 minutes), 12:45-14:00 (75 minutes). The longest session is 195 minutes.","solution":"from datetime import datetime def longest_session(log_entries): entries = log_entries.split(\',\') logs = {} session_dict = {} # Parse the log entries for entry in entries: user, time_str = entry.split(\'|\') time = datetime.strptime(time_str, \'%H:%M\') if user not in logs: logs[user] = [] logs[user].append(time) # Calculate the longest session durations for user, times in logs.items(): max_duration = 0 for i in range(1, len(times)): duration = (times[i] - times[i - 1]).seconds // 60 if duration > max_duration: max_duration = duration session_dict[user] = max_duration return session_dict"},{"question":"Write a function that takes a positive integer `n` and returns `true` if `n` is an automorphic number. An automorphic number is a number whose square \\"ends\\" in the number itself. For example, 76 is an automorphic number because 76 squared is 5776, which ends in 76.","solution":"def is_automorphic(n): Returns True if the number n is an automorphic number, otherwise False. An automorphic number is a number whose square \\"ends\\" in the number itself. Example: 76 is an automorphic number because 76^2 is 5776, which ends in 76. # Calculate the square of the number square = n ** 2 # Convert both the square and the number to strings str_n = str(n) str_square = str(square) # Check if the square ends with the number itself return str_square.endswith(str_n)"},{"question":"You are given a sequence of integers each having a positive sign ranging from 1 to n. The goal is to partition the sequence into the minimum number of contiguous subarrays such that each subarray contains distinct elements. For example, if the sequence is [1, 2, 1, 2], we can partition it into 2 subarrays: [1, 2] and [1, 2]. -----Input----- The first line of the input contains an integer T, which denotes the number of test cases. For each test case: - The first line contains an integer n, which is the length of the sequence. - The second line contains n space-separated integers representing the sequence. -----Output----- For each test case, output a single integer representing the minimum number of contiguous subarrays that have distinct elements. -----Constraints----- - 1 ≤ T ≤ 10^4 - 1 ≤ n ≤ 10^5 - The sum of n over all test cases does not exceed 10^6 -----Example----- Input: 3 4 1 2 1 2 6 4 4 4 4 4 4 5 1 2 3 4 5 Output: 2 6 1 -----Explanation----- Example case 1. The sequence [1, 2, 1, 2] needs to be partitioned into two parts: [1, 2] and [1, 2], each containing distinct elements. Example case 2. The sequence [4, 4, 4, 4, 4, 4] needs to be partitioned into six parts: each part containing the number 4, as 4 is repeated. Example case 3. The whole sequence [1, 2, 3, 4, 5] contains unique elements and can be taken as a single subarray.","solution":"def min_partitions(T, test_cases): results = [] for i in range(T): n, sequence = test_cases[i] seen = set() partitions = 1 for number in sequence: if number in seen: partitions += 1 seen.clear() seen.add(number) results.append(partitions) return results"},{"question":"You are given a list of words and a string called `letters`. You need to find out which word from the list can be constructed using the letters in the `letters` string exactly once. Each letter from the `letters` string can only be used once per word. The word list might contain some words that cannot be constructed from the `letters`. If multiple words can be constructed, return the one that appears last in the list. If no words can be constructed, return an empty string. Example 1: Input: words = [\\"apple\\", \\"orange\\", \\"banana\\", \\"grape\\"], letters = \\"elppagorbn\\" Output: \\"grape\\" Explanation: Both the words \\"apple\\" and \\"grape\\" can be constructed from \\"elppagorbn\\", but \\"grape\\" appears last in the list. Example 2: Input: words = [\\"cat\\", \\"dog\\", \\"mouse\\"], letters = \\"odgcta\\" Output: \\"dog\\" Explanation: The word \\"dog\\" can be constructed from \\"odgcta\\", but \\"cat\\" appears first in the list. Example 3: Input: words = [\\"table\\", \\"chair\\", \\"desk\\"], letters = \\"elbat\\" Output: \\"table\\" Explanation: The word \\"table\\" can be constructed from \\"elbat\\", and no other words can. Constraints: - 1 <= words.length <= 100 - 1 <= words[i].length <= 10 - letters consists of lowercase English letters only. - Each word in words array is unique.","solution":"from collections import Counter def find_constructed_word(words, letters): This function finds the last word in the list that can be constructed using the given letters exactly once. Parameters: words (list): List of words to check. letters (str): String containing letters to use. Returns: str: The last word that can be constructed or an empty string if none found. letters_count = Counter(letters) def can_construct(word, letters_count): word_count = Counter(word) for char in word_count: if word_count[char] > letters_count.get(char, 0): return False return True result = \\"\\" for word in words: if can_construct(word, letters_count): result = word return result"},{"question":"Given two integers a and b, a string is considered to be \\"good\\" if it consists of only the characters \'a\' and \'b\', and contains exactly a instances of the character \'a\' and b instances of the character \'b\'. Each \'a\' character must come before any \'b\' character. Your task is to find the number of possible different \\"good\\" strings that can be made given a and b. For example: If a = 1 and b = 2, the possible different \\"good\\" strings are: - \\"abb\\" - \\"aab\\" There are 2 such strings. Function Description Complete the countGoodStrings function in the editor below. countGoodStrings has the following parameter(s): - int a: the number of \'a\' characters - int b: the number of \'b\' characters Returns: - int: the number of possible different \\"good\\" strings Input Format: The function takes two integers, a and b. Constraints: 0 leq a, b leq 10^6 Sample Input: 2 3 Sample Output: 10 Explanation: The possible \\"good\\" strings with 2 \'a\' characters and 3 \'b\' characters are: - aabbb - ababb - abbab - abbaa - aabab - aabbb - baaab - baabb - babab - babba Therefore, the output is 10. Sample Input 1: 0 3 Sample Output 1: 1 Explanation 1: The only \\"good\\" string is \\"bbb\\". Thus, the output is 1. Sample Input 2: 1 0 Sample Output 2: 1 Explanation 2: The only \\"good\\" string is \\"a\\". Thus, the output is 1.","solution":"from math import comb def countGoodStrings(a, b): Returns the number of possible different \\"good\\" strings that can be constructed with \'a\' instances of \'a\' and \'b\' instances of \'b\'. A \\"good\\" string consists of \'a\' and \'b\' only, and each \'a\' comes before any \'b\'. Parameters: a (int): Number of \'a\' characters. b (int): Number of \'b\' characters. Returns: int: Number of possible different \\"good\\" strings. return comb(a + b, a)"},{"question":"Given an integer array `nums` and an integer `k`, write a function that returns the number of contiguous subarrays whose sum is equal to `k`. You may assume the array contains both positive and negative numbers. Example 1: Input: `nums = [1, 1, 1]`, `k = 2` Output: 2 Explanation: The subarrays [1, 1] and [1, 1] sum to 2. Example 2: Input: `nums = [1, 2, 3]`, `k = 3` Output: 2 Explanation: The subarrays [1, 2] and [3] sum to 3. Constraints: - The length of the array is between 1 and 20,000. - The elements of `nums` are between -1,000,000 and 1,000,000. - The integer `k` is between -1,000,000,000 and 1,000,000,000.","solution":"def subarray_sum(nums, k): Returns the number of contiguous subarrays whose sum is equal to k. :param nums: List[int] - List of integers :param k: int - Target sum for contiguous subarrays :return: int - Number of subarrays that sum to k count = 0 curr_sum = 0 sum_dict = {0: 1} for num in nums: curr_sum += num if curr_sum - k in sum_dict: count += sum_dict[curr_sum - k] if curr_sum in sum_dict: sum_dict[curr_sum] += 1 else: sum_dict[curr_sum] = 1 return count"},{"question":"# Task: You have to write a function **generate_sequence** that creates a specific sequence of numbers up to a given number n (parameter). The sequence is generated by following specific transformation rules for each digit position in the number. Rules: 1. For each number in the sequence from 1 to n: - If the number is divisible by 3, replace the number with \\"Fizz\\". - If the number is divisible by 5, replace the number with \\"Buzz\\". - If the number is divisible by both 3 and 5, replace the number with \\"FizzBuzz\\". - Otherwise, leave the number as it is. 2. Return the sequence as a list of strings. 3. The range for n is [1, 100]. # Examples: generate_sequence(15): Output: [\'1\', \'2\', \'Fizz\', \'4\', \'Buzz\', \'Fizz\', \'7\', \'8\', \'Fizz\', \'Buzz\', \'11\', \'Fizz\', \'13\', \'14\', \'FizzBuzz\'] generate_sequence(5): Output: [\'1\', \'2\', \'Fizz\', \'4\', \'Buzz\'] generate_sequence(10): Output: [\'1\', \'2\', \'Fizz\', \'4\', \'Buzz\', \'Fizz\', \'7\', \'8\', \'Fizz\', \'Buzz\']","solution":"def generate_sequence(n): Generates a sequence from 1 to n with specific transformation rules. Arguments: n -- the upper limit of the sequence (inclusive) Returns: A list of strings representing the sequence. result = [] for i in range(1, n + 1): if i % 15 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return result"},{"question":"Write a function to determine if a given string of parentheses (which can also contain \\"?\\" wildcard characters) can be valid. A string is considered valid if: 1. Open parentheses \\"(\\" must be closed by the same type of parentheses \\")\\". 2. Open parentheses must be closed in the correct order. 3. \\"?\\" can be considered as either \\"(\\", \\")\\" or an empty string. Given the above rules, develop a function that takes a single string containing \\"(\\", \\")\\", and/or \\"?\\" characters and returns `True` if the string can be valid, or `False` if it cannot. **Function Signature:** ```python def checkValidString(s: str) -> bool: pass ``` # Input - A single string `s` (1 ≤ len(s) ≤ 100), containing only the characters \\"(\\", \\")\\", and \\"?\\". # Output - Return `True` if the string can be valid, otherwise return `False`. # Examples **Example 1:** ```python s = \\"()\\" print(checkValidString(s)) # Output: True ``` **Example 2:** ```python s = \\"(*)\\" print(checkValidString(s)) # Output: True ``` **Example 3:** ```python s = \\"(*))\\" print(checkValidString(s)) # Output: True ``` **Example 4:** ```python s = \\"(*()(\\" print(checkValidString(s)) # Output: False ``` # Note 1. The function should handle not just the presence of parentheses, but the ambiguous \\"?\\" character, which requires considering multiple possibilities. 2. Use efficient algorithms to check the validity of the string with minimal computational overhead, considering the constraints.","solution":"def checkValidString(s: str) -> bool: Returns True if the input string of parentheses and wildcard characters can be valid based on the defined rules, otherwise returns False. low = high = 0 for char in s: if char == \'(\': low += 1 high += 1 elif char == \')\': low = max(low - 1, 0) high -= 1 else: # char == \'?\' low = max(low - 1, 0) high += 1 # If high becomes negative, there are more \')\' than \'(\' at any point if high < 0: return False # In the end, if low is greater than 0, there are unmatched \'(\' return low == 0"},{"question":"In a fantasy world, there are M magical creatures. Each magical creature has a certain number of hit points (HP). A creature is alive if it has positive HP, otherwise, it is considered dead. During each round of a battle, half (rounded down) of the HP of each creature is stolen by an evil sorcerer. This continues until all creatures are dead. Your task is to compute how many rounds it takes for all the creatures to die. -----Input:----- - A single integer M, the number of creatures. - The next line contains M integers, where each integer HP_i represents the hit points of the i^{th} creature. -----Output:----- Print a single integer — the number of rounds needed for all the creatures to die. -----Constraints----- - 1 leq M leq 1000 - 1 leq HP_i leq 1000 -----Sample Input:----- 4 10 9 16 7 -----Sample Output:----- 5 -----EXPLANATION:----- Initially, the HP of the creatures are [10, 9, 16, 7]. After round 1: [5, 4, 8, 3] After round 2: [2, 2, 4, 1] After round 3: [1, 1, 2, 0] After round 4: [0, 0, 1, 0] After round 5: [0, 0, 0, 0] Hence, after 5 rounds, all creatures are dead.","solution":"def rounds_to_all_death(M, HP): rounds = 0 while any(hp > 0 for hp in HP): HP = [(hp // 2) for hp in HP] rounds += 1 return rounds"},{"question":"Alice loves exploring new places in her city. However, she wants to minimize her travel cost. She can choose between different modes of transportation: walking, biking, or taking a cab. Each mode of transport has a different cost associated with it. Given the costs for each mode of transportation and the total distance she needs to travel, determine the minimum cost Alice has to pay to travel the full distance. The costs are given as follows: - Walking: Cost per kilometer is W - Biking: Cost per kilometer is B - Cab: Fixed cost per ride is C Alice can only choose one mode of transportation for the entire journey. -- Input Format -- - The first line contains a single integer T - the number of test cases. - Each test case consists of two lines. - The first line of each test case contains three integers W, B, and C - the costs associated with each mode of transportation. - The second line of each test case contains a single integer D - the total distance Alice needs to travel. -- Output Format -- For each test case, print the minimum cost Alice will have to pay to travel the distance D. -- Constraints -- 1 leq T leq 100 1 leq W, B, C, D leq 100 -- Sample Input 1 -- 3 2 3 20 10 1 5 15 5 3 2 8 4 -- Sample Output 1 -- 20 5 8 -- Explanation 1 -- Test case-1: If Alice walks, the total cost is 2 * 10 = 20, which is the cheapest option compared to biking 3 * 10 = 30 and taking a cab 20. Test case-2: Alice should walk as the cost is 1 * 5 = 5, which is less than 5 * 5 = 25 for biking and 15 for taking a cab. Test case-3: The cheapest option is taking a cab at 8, compared to walking 3 * 4 = 12 and biking 2 * 4 = 8.","solution":"def minimum_travel_cost(T, test_cases): results = [] for i in range(T): W, B, C = test_cases[i][0] D = test_cases[i][1] walk_cost = W * D bike_cost = B * D cab_cost = C min_cost = min(walk_cost, bike_cost, cab_cost) results.append(min_cost) return results"},{"question":"Given an undirected graph with n vertices and m edges, your task is to determine the length of the Shortest Path Tree (SPT) rooted at vertex 1 using Dijkstra\'s algorithm. The SPT is the tree formed by the shortest paths from the root (vertex 1) to every other vertex in the graph. Input: - The first line of the input contains two integers, n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 10^5), representing the number of vertices and edges in the graph, respectively. - The following m lines each contain three integers, u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6), where (u, v) is an edge with weight w. Output: - Output a single integer, the total weight of all edges in the Shortest Path Tree. Example: Input: ``` 5 6 1 2 2 1 3 3 2 3 1 2 4 4 3 4 5 4 5 1 ``` Output: ``` 10 ``` Explanation: In this example, the Shortest Path Tree starting from vertex 1 would include the edges (1-2), (2-3), (2-4), and (4-5) with a total weight of 2 + 1 + 4 + 1 = 8.","solution":"import heapq from collections import defaultdict, deque def shortest_path_tree_length(n, m, edges): Determines the length of the Shortest Path Tree (SPT) rooted at vertex 1 using Dijkstra\'s algorithm. :param n: Number of vertices in the graph :param m: Number of edges in the graph :param edges: List of edges, each edge represented by a tuple (u, v, w) :return: The total weight of all edges in the Shortest Path Tree graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Min Heap to perform Dijkstra\'s Algorithm heap = [(0, 1)] # (weight, vertex) visited = [False] * (n + 1) total_weight = 0 while heap: weight, u = heapq.heappop(heap) if visited[u]: continue visited[u] = True total_weight += weight for v, w in graph[u]: if not visited[v]: heapq.heappush(heap, (w, v)) return total_weight"},{"question":"Write a function that takes in a string and returns the longest substring that contains only unique characters. If there are multiple substrings with the same maximum length, return the first one found. For example, given the string `\\"abcabcbb\\"`, the function should return `\\"abc\\"`, while for the string `\\"bbbbb\\"`, it should return `\\"b\\"`. Similarly, the input string `\\"pwwkew\\"` should return `\\"wke\\"`.","solution":"def longest_unique_substring(s): Returns the longest substring with unique characters. If there are multiple longest substrings with the same length, returns the first one found. start = 0 max_len = 0 max_substr = \\"\\" used_chars = {} for end in range(len(s)): if s[end] in used_chars and used_chars[s[end]] >= start: start = used_chars[s[end]] + 1 used_chars[s[end]] = end unique_length = end - start + 1 if unique_length > max_len: max_len = unique_length max_substr = s[start:end + 1] return max_substr"},{"question":"A tree is called a *shady tree* if, for every node, the sum of the values of its left and right children differs by at most k. You are given an n-node binary tree with values assigned to every node. Your task is to determine if the given tree is a *shady tree* or not. A binary tree is represented with a list where each element represents a node in the tree. Values of nodes that do not exist are represented by -1. -----Input----- - The first line contains two integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ 10^6) — the number of nodes in the binary tree and the allowed difference k. - The second line contains n integers separated by spaces — the values of the nodes in level order representation. For non-existing nodes, the value is -1. -----Output----- Print \\"YES\\" if the given tree is a *shady tree*, otherwise print \\"NO\\". -----Examples----- Input 7 2 1 3 5 -1 -1 6 7 Output YES Input 3 1 5 8 10 Output NO -----Note----- In the first sample test: The tree can be visualized as: ``` 1 / 3 5 / 6 7 ``` For node 1, the sum of its children is 3 + 5 = 8. For node 5, the sum of its children is 6 + 7 = 13. For node 3, there are no children. The difference for each node is within the allowed difference of k = 2. In the second sample test: The tree can be visualized as: ``` 5 / 8 10 ``` For node 5, the sum of its children is 8 + 10 = 18. The difference of 2 from 18 is not within the allowed difference of k = 1.","solution":"def is_shady_tree(n, k, values): if n == 1: return \\"YES\\" # A single node tree is always a shady tree def calculate_children_indices(i): left = 2 * i + 1 right = 2 * i + 2 return left, right for i in range(n): if values[i] == -1: continue left, right = calculate_children_indices(i) left_value = values[left] if left < n and values[left] != -1 else 0 right_value = values[right] if right < n and values[right] != -1 else 0 if abs(left_value - right_value) > k: return \\"NO\\" return \\"YES\\""},{"question":"Given a series of n lectures and m students, each student has specific lectures they can attend. Each lecture has a student capacity limit, and each student has a list of lectures they can attend. Your task is to determine the maximum number of lectures that can be attended by students without exceeding any lecture\'s capacity. Example 1: Input: n = 3, m = 3, capacities = [1, 2, 1], preferences = [[0, 1], [1, 2], [0, 2]] Output: 3 Explanation: Lecture 0 can be attended by student 1 or 3, but not both due to the capacity. Lecture 1 can be attended by student 2 and student 3. Lecture 2 can be attended by student 2, respecting the capacity. The optimal allocation of students to lectures ensures a total of 3 lectures are attended. Example 2: Input: n = 2, m = 2, capacities = [1, 1], preferences = [[0], [1]] Output: 2 Explanation: Lecture 0 is attended by student 1. Lecture 1 is attended by student 2. Each lecture gets exactly one student, matching their capacity, so a total of 2 lectures are attended. Your Task: You don\'t need to read input or print anything. Complete the function maxLecturesAttended() which takes the integer n, integer m, list of integers capacities and list of lists preferences and returns the maximum number of lectures that can be attended. Expected Time Complexity: O(n * m) Expected Auxiliary Space: O(n + m) Constraints: 1 <= n, m <= 100 1 <= capacities[i] <= 50 0 <= preferences[i][j] < n Each student attends exactly one lecture from their preference list.","solution":"def maxLecturesAttended(n, m, capacities, preferences): Determines the maximum number of lectures that can be attended by students without exceeding any lecture\'s capacity. Arguments: n -- the number of lectures m -- the number of students capacities -- a list of integers where capacities[i] is the capacity of lecture i preferences -- a list where preferences[i] contains a list of lectures that student i can attend Returns: The maximum number of lectures that can be attended by students. from collections import defaultdict, deque # build a lecture\'s students list and initial counts lecture_students = defaultdict(list) # lecture i -> list of students who can attend student_assignment = [-1] * m # -1 means the student is not assigned to any lecture for student, prefs in enumerate(preferences): for lecture in prefs: lecture_students[lecture].append(student) total_attended = 0 attended_by_lecture = [0] * n # track how many students are attending each lecture for lecture, students in lecture_students.items(): if attended_by_lecture[lecture] < capacities[lecture]: for student in students: if student_assignment[student] == -1: attended_by_lecture[lecture] += 1 total_attended += 1 student_assignment[student] = lecture if attended_by_lecture[lecture] == capacities[lecture]: break return total_attended"},{"question":"A company is organizing a hackathon where participants can work individually or form teams of exactly two people. After forming teams, they want to evenly distribute the tasks among all participants. Each task requires another participant to review and score it. Determine the maximum number of tasks that can be assigned such that each task is reviewed by another participant. -----Input----- - The first line contains a single integer t (1 ≤ t ≤ 10^5) — the number of test cases. - Each test case consists of two lines: - The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of participants. - The second line contains a sequence of integers p_1, p_2, ..., p_n (1 ≤ p_i ≤ 2) — the size of the group each participant is in (either 1 or 2). -----Output----- For each test case, print the maximum number of tasks that can be assigned, ensuring every task is reviewed by someone else while meeting the stated conditions. -----Examples----- Input 2 5 1 1 2 1 2 3 2 2 2 Output 4 2 -----Note----- In the first example, there are 3 participants willing to work individually and 2 participants in teams of two. We can form 4 tasks where each task is reviewed by another participant. In the second example, even though there are 3 participants, they all form teams of two, and we can form only 2 tasks while ensuring each task is reviewed by another participant.","solution":"def max_tasks(t, test_cases): results = [] for i in range(t): n, participants = test_cases[i] solo_count = participants.count(1) team_count = participants.count(2) total_participants = n if solo_count > team_count: max_tasks_possible = (solo_count + team_count) // 2 * 2 else: max_tasks_possible = total_participants - (team_count - solo_count) % 2 results.append(max_tasks_possible) return results"},{"question":"A new messaging platform called \\"Talkative\\" implements a special feature that allows users to send a \\"chain message\\". A chain message is a single message that can be forwarded to multiple friends. In order to manage their server load, Talkative limits how many times a single chain message can be forwarded. Given an initial message is sent to F friends, and each friend forwards the message to F new friends, and so on, compute how many unique recipients will receive the message assuming it can only be forwarded N times. ------ Input Format ------ - The first line of input contains an integer T, denoting the number of test cases. - Each of the next T lines contains two integers, F (the number of friends the message is forwarded to in each step) and N (the number of times the message can be forwarded). ------ Output Format ------ For each test case, output on a new line the total number of unique recipients who will receive the message, including the initial recipients. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ F ≤ 1000 0 ≤ N ≤ 5 ------ Sample Input 1 ------ 3 2 0 3 1 1 2 2 ------ Sample Output 1 ------ 2 4 7 ------ Explanation 1 ------ Test case 1: The initial message is sent to 2 friends and cannot be forwarded further (N=0), so only 2 recipients. Test case 2: The initial message is sent to 1 friend and forwarded once (N=1). That friend then forwards to 1 new friend. Total unique recipients = 1 (initial) + 1*1 (1 forward) = 2. Test case 3: The initial message is sent to 2 friends and forwarded twice (N=2). Total unique recipients = 2 (initial) + 2*2 (1st forward) + 2*2^2 (2nd forward) = 2 + 4 + 8 = 14.","solution":"def calculate_unique_recipients(F, N): if N == 0: return F total_recipients = 0 for i in range(N + 1): total_recipients += F ** i return total_recipients def process_test_cases(T, test_cases): results = [] for i in range(T): F, N = test_cases[i] results.append(calculate_unique_recipients(F, N)) return results"},{"question":"# Problem Statement You are tasked to create a program that capitalizes the first letter of every word in a given string. A word is defined as a sequence of non-space characters. The string may contain punctuation and numbers, but these should not affect the capitalization of the first letter of each word. Function Signature ```python def capitalize_words(sentence: str) -> str: ``` Input - `sentence` (string) - a string containing words separated by one or more spaces. The string may also contain punctuation and digits. Output - Return a string where the first letter of each word is capitalized. The rest of the characters in each word should remain in their original case. Constraints - The input string will have a length between 0 and 1000 characters. - The input string may contain uppercase and lowercase letters, digits, and punctuation. Example ```python capitalize_words(\\"hello world\\") # Output: \\"Hello World\\" capitalize_words(\\"this is a test\\") # Output: \\"This Is A Test\\" capitalize_words(\\"123 numbers\\") # Output: \\"123 Numbers\\" capitalize_words(\\"capitalize: every word!\\") # Output: \\"Capitalize: Every Word!\\" capitalize_words(\\"\\") # Output: \\"\\" ``` Note Ensure that the solution handles multiple spaces between words correctly, and only the first character of each word is capitalized, regardless of its initial case in the input.","solution":"def capitalize_words(sentence: str) -> str: Capitalizes the first letter of each word in a given sentence. Parameters: sentence (str): The input sentence containing words separated by one or more spaces. Returns: str: The sentence with the first letter of each word capitalized. # Split the sentence into words words = sentence.split() # Capitalize the first letter of each word capitalized_words = [word.capitalize() for word in words] # Join the capitalized words back into a single string return \' \'.join(capitalized_words)"},{"question":"Given an array of integers, a majority element is defined as an element that appears more than n / 2 times, where n is the length of the array. Your task is to find and return the majority element in the array. If no such element exists, return -1. Input The first line contains a single integer n (1 ≤ n ≤ 105) — the length of the array. The second line contains n integers a1, a2, ..., an (-109 ≤ ai ≤ 109) — the array elements. Output Print the majority element if it exists. Otherwise, print -1. Examples Input 5 3 3 4 2 3 Output 3 Input 4 1 2 3 4 Output -1 Note In the first sample case, the element 3 appears 3 times which is more than n / 2 (i.e., 2.5). Therefore, 3 is the majority element. In the second case, no element appears more than n / 2 (i.e., 2) times, so the output is -1.","solution":"def find_majority_element(nums): Returns the majority element if it exists. Otherwise, returns -1. n = len(nums) count = {} for num in nums: count[num] = count.get(num, 0) + 1 if count[num] > n / 2: return num return -1"},{"question":"Preeti is trying to strengthen her programming skills and came across an interesting challenge while preparing for coding competitions. She\'s decided to seek your expertise to solve this problem. Problem: You are given two strings – `original` and `pattern`. Your task is to determine if we can rearrange the `original` string such that it contains the `pattern` string as a substring at least once. For example: original = \\"cbad\\" pattern = \\"abc\\" You can rearrange \\"cbad\\" to \\"abcd\\", which contains \\"abc\\" as a substring, so the answer is \\"Yes\\". original = \\"cbadxyz\\" pattern = \\"abcd\\" You need to rearrange \\"cbadxyz\\" to \\"acbdxyz\\" or any permutation that contains \\"abcd\\" as a substring, hence the answer is \\"Yes\\". original = \\"cbadx\\" pattern = \\"abcdz\\" No matter how you rearrange \\"cbadx\\", it will never contain \\"abcdz\\" as a substring. Therefore, the answer is \\"No\\". [Input] The first line of input contains integer t denoting the number of test cases. Each test case consists of two lines: - The first line contains the `original` string. - The second line contains the `pattern` string. [Output] For each test case output \\"Yes\\" if it is possible to rearrange `original` to contain `pattern` as a substring, otherwise print \\"No\\". [Constraints] 1 ≤ t ≤ 1000 1 ≤ |original|, |pattern| ≤ 10000 original and pattern contain only lowercase English letters. SAMPLE INPUT 3 cbad abc cbadxyz abcd cbadx abcdz SAMPLE OUTPUT Yes Yes No","solution":"def can_rearrange_to_contain(original, pattern): Returns \'Yes\' if rearranging the original string can contain the pattern string as a substring. Otherwise, returns \'No\'. from collections import Counter if len(pattern) > len(original): return \\"No\\" pattern_count = Counter(pattern) for i in range(len(original) - len(pattern) + 1): if Counter(original[i:i+len(pattern)]) == pattern_count: return \\"Yes\\" return \\"No\\" def solve(test_cases): results = [] for original, pattern in test_cases: results.append(can_rearrange_to_contain(original, pattern)) return results"},{"question":"You are given an array D of length N, where each element denotes the number of days required to complete a specific task. Each day, you can work on only one task, and you must complete a task before starting another. Your goal is to find the minimum number of days required to finish all tasks in such a way that the difference between the minimum and maximum days taken for any two consecutive tasks is minimized. Find the minimum number of days required to complete all tasks under these conditions. ------ Input Format ------ - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N – the length of the array D. - The second line of each test case contains N space-separated integers, D_{1}, D_{2}, ..., D_{N}. ------ Output Format ------ For each test case print a single integer — the minimum number of days required to complete all tasks. ------ Constraints ------ 1 ≤ T ≤ 10^{3} 1 ≤ N ≤ 10^{5} 1 ≤ D_{i} ≤ 10^{9} - Sum of N over all test cases does not exceed 2 cdot 10^{5}. ------ Sample Input 1 ------ 2 3 4 8 2 4 5 12 7 3 ------ Sample Output 1 ------ 14 17 ------ Explanation 1 ------ - Test case 1: One possible way to minimize the difference is to complete tasks in the order [2, 4, 8]. The total number of days required is 2+4+8 = 14 days. - Test case 2: One possible way to minimize the difference is to complete tasks in the order [3, 5, 7, 12]. The total number of days required is 3+5+7+12 = 27 days.","solution":"def min_days_to_complete_tasks(test_cases): results = [] for i in range(len(test_cases)): N, D = test_cases[i] D.sort() total_days = sum(D) results.append(total_days) return results # Input parsing function def parse_input(input_string): inputs = input_string.strip().split(\'n\') T = int(inputs[0]) test_cases = [] line_count = 1 for _ in range(T): N = int(inputs[line_count]) D = list(map(int, inputs[line_count + 1].split())) test_cases.append((N, D)) line_count += 2 return test_cases"},{"question":"Given a list of non-negative integers and an integer target, you need to check if there exist two distinct indices i and j in the list such that nums[i] + nums[j] equals the target. Return true if such indices exist, otherwise return false. Example: Input: nums = [1, 2, 3, 9], target = 8 Output: False Input: nums = [1, 2, 4, 4], target = 8 Output: True Restrictions: - All elements in the list are non-negative integers. - Length of the given list will be in the range [2, 10000]. - The given target will be a non-negative integer.","solution":"def two_sum(nums, target): Returns True if there are two distinct indices i and j in the list such that nums[i] + nums[j] == target. Otherwise, returns False. seen = set() for num in nums: if target - num in seen: return True seen.add(num) return False"},{"question":"Aman is tackling a coding problem where he needs to rotate an array `k` times to the right and then determine if the resulting array meets a specific condition. An array can be rotated to the right k times as follows: `[1, 2, 3, 4, 5, 6]` rotated 2 times results in `[5, 6, 1, 2, 3, 4]`. Given an array `a` of size `n`, and an integer `m`, after rotating array `a` `k` times, Aman needs to check if the sum of the first `m` elements of `a` is greater than a given integer `s`. Write a function that determines if the sum of the first `m` elements of array `a`, after rotating it `k` times, is greater than `s`. -----Input----- The input contains multiple test cases. The first line contains one integer `t` (1 le t le 100) - the number of test cases. The description of each test case is as follows. The first line contains three integers `n` (1 le n le 100), `m` (1 le m le n), and `k` (0 le k le 10^4). The second line contains `n` integers a_1, a_2, ..., a_n (1 le a_i le 10^4) - the elements of the array `a`. The third line contains a single integer `s` (0 le s le 10^9)`. -----Output----- For each test case, print \\"Yes\\" if the sum of the first `m` elements of array `a`, after rotating it `k` times, is greater than `s`. Otherwise, print \\"No\\". You may print the answer in any case. -----Example----- Input: 3 6 3 2 1 2 3 4 5 6 12 5 2 0 4 5 1 2 3 6 4 3 1 9 8 7 6 20 Output: Yes No Yes -----Note----- For the first test case, the array `[1, 2, 3, 4, 5, 6]` after rotating 2 times becomes `[5, 6, 1, 2, 3, 4]`. The sum of the first 3 elements is `5 + 6 + 1 = 12`, which is exactly equal to `12`, but not greater, so the output is \\"No\\". For the second test case, no rotation is needed since `k = 0`. The sum of the first 2 elements `[4, 5]` is `4 + 5 = 9`, which is greater than `6`, so the output is \\"Yes\\". For the third test case, the array `[9, 8, 7, 6]` after rotating 1 time becomes `[6, 9, 8, 7]`. The sum of the first 3 elements is `6 + 9 + 8 = 23`, which is greater than `20`, so the output is \\"Yes\\".","solution":"def rotate_and_check(n, m, k, a, s): # Rotate array `a` `k` times to the right k = k % n # Handle cases where k >= n rotated_a = a[-k:] + a[:-k] # Sum of the first `m` elements of the rotated array sum_first_m = sum(rotated_a[:m]) # Check if sum is greater than `s` return \'Yes\' if sum_first_m > s else \'No\' def handle_multiple_tests(test_cases): results = [] for test_case in test_cases: n, m, k, a, s = test_case result = rotate_and_check(n, m, k, a, s) results.append(result) return results"},{"question":"# Problem Statement You are given a string ( s ) consisting only of lowercase English letters. A string is almost palindromic if it becomes a palindrome by removing at most one character. Your task is to determine if the given string is almost palindromic. For example, the string \\"radcar\\" can become the palindrome \\"racar\\" by removing the character \\"d\\". The string \\"civic\\" is already a palindrome. Write a function `isAlmostPalindromic` that checks whether the given string ( s ) is almost palindromic. # Function Description **Complete the isAlmostPalindromic function in the editor below.** `isAlmostPalindromic` has the following parameter(s): - string s: a string consisting only of lowercase English letters **Returns** - boolean: `True` if the string is almost palindromic, `False` otherwise # Input Format A single line of input containing the string ( s ). # Constraints * ( 1 leq |s| leq 10^5 ) # Sample Input [ text{\\"radcar\\"} ] # Sample Output [ text{True} ] # Explanation In the first sample, \\"radcar\\" can become the palindrome \\"racar\\" by removing the character \\"d\\". In another example, for the string \\"abcba\\", \\"abcba\\" is already a palindrome. Here is the correct way to find if a string is almost palindromic: 1. Check if the string is already a palindrome. 2. If it is not, check if removing one character can make it a palindrome. To do this, check for every character, remove it, and see if the resulting string is a palindrome. If any resulting string is a palindrome, return `True`. # Solution Template ```python def isAlmostPalindromic(s): def is_palindrome(st): return st == st[::-1] if is_palindrome(s): return True for i in range(len(s)): if is_palindrome(s[:i] + s[i+1:]): return True return False # Example usage s = \\"radcar\\" print(isAlmostPalindromic(s)) # Output: True ```","solution":"def isAlmostPalindromic(s): def is_palindrome(st): return st == st[::-1] if is_palindrome(s): return True for i in range(len(s)): if is_palindrome(s[:i] + s[i+1:]): return True return False"},{"question":"You are given an integer array B representing temperatures recorded over several days, and you need to find the number of consecutive days before each day where the temperatures were strictly increasing. If no such increasing sequence exists for a day, the count should be 0 for that day. Input: The first line contains an integer M, denoting the number of days for which temperatures are recorded. The next line contains M space-separated integers, each denoting the temperature of the ith day. Output: Print the count of consecutive days of strictly increasing temperatures for each day. Constraints: 1 ≤ M ≤ 100000 -100 ≤ B[i] ≤ 100 SAMPLE INPUT 6 30 35 33 34 38 40 SAMPLE OUTPUT 0 1 0 1 2 3 Explanation There are 6 temperatures recorded over 6 days: 30, 35, 33, 34, 38, and 40. - For the first day, there are no previous days, so the count is 0. - For the second day, the temperature increased from 30 to 35, which is 1 consecutive day of increase. - For the third day, the temperature dropped from 35 to 33, so the count is 0. - For the fourth day, the temperature increased from 33 to 34, which is 1 consecutive day of increase. - For the fifth day, the temperature increased consecutively from 34 to 38 passing through 34, so the count is 2. - For the sixth day, the temperature increased consecutively from 38 to 40 passing through 34 and 38, so the count is 3.","solution":"def count_increasing_days(temperatures): Returns a list of counts of consecutive days of strictly increasing temperatures for each day. n = len(temperatures) result = [0] * n for i in range(1, n): if temperatures[i] > temperatures[i - 1]: result[i] = result[i - 1] + 1 else: result[i] = 0 return result"},{"question":"# Anagram Check An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Write a function that checks if two strings are anagrams of each other. The function should ignore spaces, punctuation, and capitalization. Examples ``` isAnagram(\\"listen\\", \\"silent\\") ==> true isAnagram(\\"Triangle\\", \\"Integral\\") ==> true isAnagram(\\"apple\\", \\"pale\\") ==> false ```","solution":"def is_anagram(str1, str2): Checks if str1 and str2 are anagrams of each other, ignoring spaces, punctuation, and capitalization. # Remove spaces and convert to lowercase str1 = \'\'.join(e for e in str1 if e.isalnum()).lower() str2 = \'\'.join(e for e in str2 if e.isalnum()).lower() # Sort and compare the cleaned strings return sorted(str1) == sorted(str2)"},{"question":"You are given a string consisting of lowercase letters and an integer k. In one move, you can select any character of the string and change it to any other lowercase letter. The task is to determine the minimum number of moves required to make the given string a palindrome with at most k letters changing position. ------ Input ------ The first line of input contains a single integer T, denoting the number of test cases. Each test case consists of two lines: - The first line contains the string S - The second line contains the integer k. ------ Output ------ For each test case, print a single integer — the minimum number of moves required. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ |S| ≤ 1000 1 ≤ k ≤ |S| ------ Sample Input 1 ------ 3 abca 1 abcdefg 3 racecar 2 ------ Sample Output 1 ------ 1 3 0 ------ Explanation 1 ------ Example case 1: We can replace the \'b\' with \'c\', resulting in the palindrome \'acca\'. Example case 2: By changing \'b\' to \'g\', \'c\' to \'f\', and \'d\' to \'e\', we get \'agffgda\', which is a palindrome. Example case 3: The string \'racecar\' is already a palindrome, so no moves are required.","solution":"def min_moves_to_palindrome(s, k): Returns the minimum number of moves required to make the given string s a palindrome with at most k letters changing position. n = len(s) i, j = 0, n - 1 changes_needed = 0 while i < j: if s[i] != s[j]: changes_needed += 1 i += 1 j -= 1 return changes_needed def process_test_cases(T, test_cases): results = [] for s, k in test_cases: changes_needed = min_moves_to_palindrome(s, k) results.append(changes_needed) return results # Function to handle the full input/output process def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): s = data[index] k = int(data[index + 1]) test_cases.append((s, k)) index += 2 results = process_test_cases(T, test_cases) for result in results: print(result)"},{"question":"Given an array of integers, find the length of the longest subarray, which forms an arithmetic progression (AP). Example 1: Input : arr = [1, 7, 10, 13, 14, 19] Output : 4 Explanation : The longest arithmetic progression is [7, 10, 13, 16], which has length 4. Example 2: Input : arr = [20, 15, 10, 5] Output : 4 Explanation : The longest arithmetic progression is [20, 15, 10, 5], which has length 4. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `longestArithSeqLength(arr)` which takes the integer array `arr` as the only argument and returns the length of the longest subarray that forms an arithmetic progression. Constraints: - 1 ≤ arr.length ≤ 1000 - -10^4 ≤ arr[i] ≤ 10^4 Note: - An arithmetic progression is a sequence of numbers such that the difference between consecutive terms is constant.","solution":"def longestArithSeqLength(arr): Returns the length of the longest arithmetic progression subarray. if len(arr) <= 1: return len(arr) n = len(arr) dp = [{} for _ in range(n)] max_length = 2 for i in range(1, n): for j in range(i): diff = arr[i] - arr[j] if diff in dp[j]: dp[i][diff] = dp[j][diff] + 1 else: dp[i][diff] = 2 max_length = max(max_length, dp[i][diff]) return max_length"},{"question":"Implement a function to simulate the behavior of a conway game of life over n generations. Conway\'s Game of Life is a simple two-dimensional grid where each cell can either be alive or dead. The grid evolves over a series of steps according to a set of rules: 1. Any live cell with fewer than two live neighbors dies, as if by underpopulation. 2. Any live cell with two or three live neighbors lives on to the next generation. 3. Any live cell with more than three live neighbors dies, as if by overpopulation. 4. Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction. The function should take as input: - An initial state of the grid (a list of lists of integers where 1 represents a live cell and 0 represents a dead cell) - The number of generations to simulate The function should return the state of the grid after the specified number of generations. Example: ``` initial_state = [ [0, 1, 0], [0, 0, 1], [1, 1, 1], [0, 0, 0] ] generations = 1 Output: [ [0, 0, 0], [1, 0, 1], [0, 1, 1], [0, 1, 0] ] ```","solution":"def game_of_life(initial_state, generations): Simulates Conway\'s Game of Life for a specified number of generations. Args: initial_state (list of list of int): Initial state of the grid (1 for live cell, 0 for dead cell) generations (int): Number of generations to simulate Returns: list of list of int: State of the grid after the specified number of generations rows, cols = len(initial_state), len(initial_state[0]) def get_neighbors(r, c): directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] neighbors = 0 for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols: neighbors += initial_state[nr][nc] return neighbors for _ in range(generations): next_state = [[0] * cols for _ in range(rows)] for r in range(rows): for c in range(cols): live_neighbors = get_neighbors(r, c) if initial_state[r][c] == 1: if live_neighbors < 2 or live_neighbors > 3: next_state[r][c] = 0 else: next_state[r][c] = 1 else: if live_neighbors == 3: next_state[r][c] = 1 initial_state = next_state return initial_state"},{"question":"Given a list of N integers, your task is to find out the count of unique pairs (a, b) such that a + b is even. A pair (a, b) is considered unique if: - Both `a` and `b` are elements of the list. - The pair (a, b) is ordered where the first element precedes the second element in the list. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case will start with an integer N, denoting the size of the list. - The next line contains N space-separated integers denoting the elements of the list. ------ Output Format ------ For each test case, output the count of unique pairs (a, b) such that a + b is even. ------ Constraints ------ 1 ≤ T ≤ 100 2 ≤ N ≤ 1000 1 ≤ text{list elements} ≤ 10^6 ------ Sample Input 1 ------ 3 4 1 2 3 4 5 1 3 5 7 9 6 2 4 6 8 10 12 ------ Sample Output 1 ------ 2 10 15 ------ Explanation 1 ------ * For test case 1: The pairs are (1, 3) and (2, 4). * For test case 2: All pairs (1, 3), (1, 5), (1, 7), (1, 9), (3, 5), (3, 7), (3, 9), (5, 7), (5, 9), and (7, 9) sum to an even number. * For test case 3: All pairs (2, 4), (2, 6), (2, 8), (2, 10), (2, 12), (4, 6), (4, 8), (4, 10), (4, 12), (6, 8), (6, 10), (6, 12), (8, 10), (8, 12), and (10, 12) sum to an even number.","solution":"def count_unique_even_pairs(test_cases): results = [] for case in test_cases: N, arr = case even_count = sum(1 for x in arr if x % 2 == 0) odd_count = N - even_count even_pairs = (even_count * (even_count - 1)) // 2 odd_pairs = (odd_count * (odd_count - 1)) // 2 results.append(even_pairs + odd_pairs) return results def parse_input(input_data): lines = input_data.strip().split(\'n\') index = 0 T = int(lines[index]) index += 1 test_cases = [] for _ in range(T): N = int(lines[index]) index += 1 arr = list(map(int, lines[index].split())) index += 1 test_cases.append((N, arr)) return test_cases"},{"question":"You are given an array of integers and a window size. You are required to find the moving average of the array over the given window size. The moving average of a window size k is defined as an array where each element is the average of k consecutive elements from the input array. If the number of elements left at the end of the array is less than k, it should not be considered in the result. Write a function `moving_average(arr, k)` that takes an array of integers `arr` and an integer `k` as input and returns an array of floats representing the moving averages. **Input Format** ► The first line contains an integer N, the size of the array. ► The second line contains N space-separated integers representing the elements of the array. ► The third line contains an integer k, the window size. **Constraints** 1 leq N leq 10^5 1 leq arr[i] leq 10^4 1 leq k leq N **Output Format** ► Print the moving averages as space-separated float values. Each value should be rounded to two decimal places. **Sample Input** 8 10 20 30 40 50 60 70 80 3 **Sample Output** 20.00 30.00 40.00 50.00 60.00 70.00 **Explanation** For the given input array and window size, the moving averages are calculated as follows: - Average of first 3 elements (10, 20, 30) = (10 + 20 + 30) / 3 = 20.00 - Average of next 3 elements (20, 30, 40) = (20 + 30 + 40) / 3 = 30.00 - Average of next 3 elements (30, 40, 50) = (30 + 40 + 50) / 3 = 40.00 - Average of next 3 elements (40, 50, 60) = (40 + 50 + 60) / 3 = 50.00 - Average of next 3 elements (50, 60, 70) = (50 + 60 + 70) / 3 = 60.00 - Average of next 3 elements (60, 70, 80) = (60 + 70 + 80) / 3 = 70.00 Therefore, the result is [20.00, 30.00, 40.00, 50.00, 60.00, 70.00].","solution":"def moving_average(arr, k): Calculates the moving average of an array over a given window size k. Args: arr : list of int : Input array of integers. k : int : Window size for the moving average. Returns: list of float : Array of moving averages. n = len(arr) if n == 0 or k > n: return [] moving_averages = [] current_sum = sum(arr[:k]) # Sum of the first \'k\' elements moving_averages.append(round(current_sum / k, 2)) for i in range(k, n): current_sum += arr[i] - arr[i - k] moving_averages.append(round(current_sum / k, 2)) return moving_averages"},{"question":"Given n boxes, each box contains an integer. You can perform the following operation any number of times: pick any two boxes and swap the integers inside them. Your task is to determine whether you can sort the boxes by their integers in non-decreasing order using the permitted operation. If it\'s possible, output \\"Yes\\", otherwise output \\"No\\". Input The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of boxes. The second line contains n integers a1, a2, ..., an — the integers inside the boxes (1 ≤ ai ≤ 109). Output Output \\"Yes\\" if you can sort the boxes in non-decreasing order, otherwise output \\"No\\". Examples Input 5 4 1 3 2 5 Output Yes Input 4 3 3 2 1 Output No","solution":"def can_sort_boxes(n, boxes): Determine if the boxes can be sorted in non-decreasing order by swapping any two boxes any number of times. Args: n (int): Number of boxes. boxes (list of int): List of integers in the boxes. Returns: str: \\"Yes\\" if the boxes can be sorted, otherwise \\"No\\". return \\"Yes\\""},{"question":"A digital library represents books by uppercase letters. Each book\'s title is composed of uppercase letters in the alphabet, such as \\"A\\", \\"AB\\", \\"XYZ\\", and so on. The library categorizes books into different sections based on the first letter of the title. Your task is to identify the smallest number of sections required to store the first n book titles such that each section contains titles starting with different letters and each section is non-empty. Input The first line contains a single number n (1 ≤ n ≤ 1000) — the number of book titles. The next n lines each contain a single string representing a book title (1 ≤ length of string ≤ 100). Each string consists of uppercase English letters (\'A\' to \'Z\'). Output Print a single integer denoting the smallest number of sections required to store the book titles. Examples Input 5 ALICE ZEBRA MONKEY BOB APPLE Output 4 Note For the first example, the possible sections could be: * Section 1: ALICE, APPLE * Section 2: BOB * Section 3: MONKEY * Section 4: ZEBRA Each section contains titles starting with different letters, hence 4 sections are required.","solution":"def smallest_sections_required(n, book_titles): Determines the smallest number of sections required to store the book titles such that each section contains titles starting with different letters and each section is non-empty. Args: n (int): Number of book titles. book_titles (list of str): List of book titles. Returns: int: The smallest number of sections required. # Create a set to store the first letter of each book title first_letters = set() for title in book_titles: first_letters.add(title[0]) # The number of sections required is the number of unique first letters return len(first_letters)"},{"question":"You are helping a friend who is a florist build a program to manage flower stock. Each type of flower is represented by a unique integer ID and the stock of each flower is stored in an array. Your friend needs a function to quickly restock specific types of flowers based on a restock order, which consists of flower IDs and the quantity to add for each. Write a function to update the stock levels based on multiple restock orders. ------ Input Format ------ - First line of input contains a single integer T, denoting the number of test cases. - Each test case contains multiple lines: - The first line contains an integer N, the number of different types of flowers. - The second line contains N integers representing the stock levels of each flower type. - The third line contains an integer R, the number of restock orders. - The following R lines each contain two integers F and Q, representing the flower ID to be restocked and the quantity to add, respectively. ------ Output Format ------ For each test case, output the updated stock levels as a single line of space-separated integers. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^{5} 0 ≤ R ≤ 10^{5} 1 ≤ F ≤ N 1 ≤ Q ≤ 10^{6} 0 ≤ Initial stock levels ≤ 10^{9} ------ Sample Input 1 ------ 1 5 10 20 30 40 50 3 1 5 4 10 2 15 ------ Sample Output 1 ------ 15 35 30 50 50 ------ Explanation 1 ------ In the first test case, there are 5 types of flowers with initial stock levels [10, 20, 30, 40, 50]. - The first restock order increases the stock of flower ID 1 by 5, resulting in stock levels [15, 20, 30, 40, 50]. - The second restock order increases the stock of flower ID 4 by 10, resulting in stock levels [15, 20, 30, 50, 50]. - The third restock order increases the stock of flower ID 2 by 15, resulting in final stock levels [15, 35, 30, 50, 50].","solution":"def restock_florist(t, test_cases): results = [] for case in test_cases: n, stock_levels, r, restocks = case for restock in restocks: flower_id, quantity = restock stock_levels[flower_id - 1] += quantity results.append(\' \'.join(map(str, stock_levels))) return results"},{"question":"You are given a collection of sticks with different lengths. Your task is to determine the largest possible square that can be formed using these sticks. A square can be formed by selecting four sticks of the same length. -----Input----- The first line contains a single integer n (1 leq n leq 10^5) — the number of sticks. The second line contains n integers, each representing the length of a stick (1 leq text{length} leq 10^9). -----Output----- Print a single integer — the side length of the largest square that can be formed. If it is not possible to form any square, print -1. -----Examples----- Input 5 6 6 6 6 5 Output 6 Input 8 3 3 3 3 4 4 4 4 Output 4 Input 6 7 8 9 Output -1 -----Note----- In the first example, the largest square can be formed using the four sticks with a length of 6. In the second example, although there are enough sticks to form two squares (with sides of length 3 and 4), the largest possible square has a side length of 4. In the third example, it is not possible to form any square as there are no four sticks of the same length.","solution":"def largest_square_side_length(n, lengths): Determines the side length of the largest possible square that can be formed using given sticks. :param n: Number of sticks :param lengths: List of stick lengths :return: Side length of the largest possible square, or -1 if no square can be formed from collections import Counter # Count the frequency of each stick length length_count = Counter(lengths) # Find the maximum possible side length that can be formed by four same-length sticks max_side_length = -1 for length, count in length_count.items(): if count >= 4: max_side_length = max(max_side_length, length) return max_side_length"},{"question":"Given a string of lowercase alphabets, write a function to find the character that appears most frequently. If there are multiple characters that appear with the same maximum frequency, return the character that comes first in the alphabetical order. Function Signature: ```python def most_frequent_char(s: str) -> str: ``` **Input** - The input will be a string `s` (1 ≤ len(s) ≤ 10^5) consisting of only lowercase alphabets. **Output** - Return a single character, which represents the most frequent character. If there are ties, return the lexicographically smallest character among the most frequent ones. **Example** ```python print(most_frequent_char(\\"abaccabc\\")) # Output: \\"a\\" print(most_frequent_char(\\"xyz\\")) # Output: \\"x\\" ``` **Explanation** In the first example: - Frequency of \'a\' = 3 - Frequency of \'b\' = 2 - Frequency of \'c\' = 3 Since \'a\' and \'c\' both have the highest frequency, the output is \'a\' because it is lexicographically smaller than \'c\'. In the second example: - Frequency of \'x\' = 1 - Frequency of \'y\' = 1 - Frequency of \'z\' = 1 All characters have the same frequency, so the output is \'x\', which is lexicographically the smallest among \'x\', \'y\', and \'z\'.","solution":"def most_frequent_char(s: str) -> str: from collections import Counter char_count = Counter(s) max_freq = max(char_count.values()) # Get all characters with the maximum frequency max_freq_chars = [char for char, freq in char_count.items() if freq == max_freq] # Return the lexicographically smallest character among them return min(max_freq_chars)"},{"question":"Write a Python function `find_value` that takes two arguments: an integer `M` and a list of integers `arr`. The function should calculate the sum of the product of all possible subsets of `arr` taken two at a time, and return the result modulo `M`. For example, for the list `arr = [1, 2, 3]`, there are three subsets of size two: - (1, 2): Product = 1 * 2 = 2 - (1, 3): Product = 1 * 3 = 3 - (2, 3): Product = 2 * 3 = 6 The sum of the products is `2 + 3 + 6 = 11`. If `M = 5`, the function should return `11 % 5 = 1`. The function should take care of the following: - If `arr` has fewer than two elements, return 0. - The length of `arr` will be at most 1000. - Each element in `arr` will be a positive integer not greater than 1000. - `M` will be a positive integer not greater than 10^9. -----Input:----- - An integer `M`. - A list of integers `arr`. -----Output:----- - The function should return an integer which is the result of the described summation modulo `M`. -----Constraints----- - 1 leq M leq 10^9 - 1 leq len(arr) leq 1000 - 1 leq arr[i] leq 1000 -----Sample Input:----- 5 [1, 2, 3] -----Sample Output:----- 1 -----Explanation:----- The possible pairs of two elements are (1, 2), (1, 3), and (2, 3) with products 2, 3, and 6 respectively. Sum = 2 + 3 + 6 = 11 Answer = 11 % 5 = 1","solution":"def find_value(M, arr): if len(arr) < 2: return 0 total_sum = 0 n = len(arr) for i in range(n): for j in range(i + 1, n): total_sum += arr[i] * arr[j] return total_sum % M"},{"question":"Given an integer array nums, your task is to write a program that finds the length of the longest contiguous subsequence with an equal number of 0s and 1s. Example 1: Input: nums = [0, 1, 0, 1] Output: 4 Explanation: The entire array [0, 1, 0, 1] is a contiguous subsequence with an equal number of 0s and 1s. Example 2: Input: nums = [0, 0, 1, 0] Output: 2 Explanation: The longest contiguous subsequence with equal number of 0s and 1s is [0, 1], which has a length of 2. Example 3: Input: nums = [1, 0, 1, 1, 0, 0, 0, 1, 1] Output: 8 Explanation: The longest contiguous subsequence with an equal number of 0s and 1s is [1, 0, 1, 1, 0, 0, 0, 1], which has a length of 8. Your Task: You don\'t need to read input or print anything. Your task is to complete the function longestEqualBinarySubsequence() which takes the integer array nums as input and returns the length of the longest contiguous subsequence with an equal number of 0s and 1s. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= |nums| <= 10^5 nums[i] ∈ {0, 1}","solution":"def longestEqualBinarySubsequence(nums): Returns the length of the longest contiguous subsequence with equal number of 0s and 1s. count_map = {0: -1} # Initial value to handle whole array case max_length = 0 count = 0 for i, num in enumerate(nums): if num == 0: count -= 1 else: count += 1 if count in count_map: max_length = max(max_length, i - count_map[count]) else: count_map[count] = i return max_length"},{"question":"Helen is preparing for a math competition and comes across an interesting problem. She has a list of N integers, and she needs to find all possible subsets of this list that satisfy the following conditions: 1. The subset contains at least two elements. 2. The product of the elements in the subset is an even number. As a programming enthusiast, Helen decides to automate this task. Can you help her write a program that counts the number of such valid subsets? -----Input:----- - The first line of input contains T, the number of test cases. - The first line of each test case contains a single integer, N, representing the number of integers in the list. - The second line of each test case contains N space-separated integers, the elements of the list. -----Output:----- For each test case, output a single integer, representing the number of valid subsets whose product is even. -----Constraints:----- - 1 leq T leq 10 - 2 leq N leq 18 - Each integer in the list is between 1 and 100 inclusive. -----Sample Input:----- 2 3 1 2 3 4 5 7 11 2 -----Sample Output:----- 3 7 -----Explanation:----- For the first test case, the valid subsets are: {1, 2}, {2, 3}, and {1, 2, 3}. For the second test case, the valid subsets are: {5, 2}, {7, 2}, {11, 2}, {5, 7, 2}, {5, 11, 2}, {7, 11, 2}, and {5, 7, 11, 2}.","solution":"def count_valid_subsets(N, arr): def is_even_product_subset(subset): product = 1 for num in subset: product *= num return product % 2 == 0 from itertools import combinations valid_count = 0 # Generate all possible non-empty subsets for r in range(2, N+1): for subset in combinations(arr, r): if is_even_product_subset(subset): valid_count += 1 return valid_count def process_test_cases(test_cases): results = [] for N, arr in test_cases: results.append(count_valid_subsets(N, arr)) return results"},{"question":"You\'re given a function that takes two arguments, both of which are strings containing only lowercase letters. The function needs to determine the minimum number of operations required to convert the first string into the second string. The allowed operations are: 1. Insert a character 2. Remove a character 3. Replace a character These operations work like the classic \\"edit distance\\" problem, also known as the Levenshtein distance. Your task is to implement this function so that it returns an integer representing the minimum number of operations required. For example: ```python min_operations(\\"kitten\\", \\"sitting\\") # should return 3 (replace \'k\' with \'s\', replace \'e\' with \'i\', append \'g\') min_operations(\\"flaw\\", \\"lawn\\") # should return 2 (remove \'f\', append \'n\') ``` Write a function `min_operations` that takes two arguments and returns an integer.","solution":"def min_operations(str1, str2): Returns the minimum number of operations required to convert str1 to str2. Allowed operations are insert a character, remove a character, and replace a character. m = len(str1) n = len(str2) # Create a DP array to memoize result of previous computations dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)] # Fill dp array bottom up for i in range(m + 1): for j in range(n + 1): # Base case: If the first string is empty, the only option is to insert all characters of the second string if i == 0: dp[i][j] = j # Min. operations = j # Base case: If the second string is empty, the only option is to remove all characters of the first string elif j == 0: dp[i][j] = i # Min. operations = i # If the characters are the same, no new operation is required elif str1[i-1] == str2[j-1]: dp[i][j] = dp[i-1][j-1] # If characters are different, consider all possibilities and find the minimum else: dp[i][j] = 1 + min(dp[i][j-1], # Insert a character dp[i-1][j], # Remove a character dp[i-1][j-1]) # Replace a character return dp[m][n]"},{"question":"You are given a stream of integers. For each integer in the stream, you are to determine the median of the stream so far. The median of a dataset is the middle value that separates the higher half from the lower half. If the dataset contains an even number of elements, the median is the average of the two middle numbers. Your task is to write a program that keeps track of the median after adding each new integer to the stream. -----Input----- - The first line contains an integer n, the number of integers in the stream. - The second line contains n integers, a_1, a_2, ldots, a_n, representing the stream of integers. -----Output----- - Output n lines. Each line should contain the median after the corresponding integer from the stream has been added. The median should be printed as a floating-point number with exactly 1 decimal precision. -----Examples----- Sample Input 1: 5 10 20 30 40 50 Sample Output 1: 10.0 15.0 20.0 25.0 30.0 Sample Input 2: 6 5 15 10 20 3 25 Sample Output 2: 5.0 10.0 10.0 12.5 10.0 12.5","solution":"import heapq class MedianFinder: def __init__(self): # Max heap for the lower half self.max_heap = [] # Min heap for the upper half self.min_heap = [] def add_num(self, num): # Add to the max heap heapq.heappush(self.max_heap, -num) # Balance the heaps by pushing the largest value in max_heap to min_heap heapq.heappush(self.min_heap, -heapq.heappop(self.max_heap)) # Ensure size property: max_heap can have at most one more element than min_heap if len(self.max_heap) < len(self.min_heap): heapq.heappush(self.max_heap, -heapq.heappop(self.min_heap)) def find_median(self): if len(self.max_heap) > len(self.min_heap): return float(-self.max_heap[0]) else: return (-self.max_heap[0] + self.min_heap[0]) / 2.0 def medians_of_stream(n, stream): median_finder = MedianFinder() medians = [] for num in stream: median_finder.add_num(num) medians.append(f\\"{median_finder.find_median():.1f}\\") return medians # Function to be used with input/output def process_input(n, stream): result = medians_of_stream(n, stream) for res in result: print(res)"},{"question":"You are instructed to develop an application that helps a university manage their course scheduling in a way that minimizes faculty workload conflicts. Specifically, you need to ensure that no faculty member is scheduled to teach more than one course at any given time. # Problem Statement You are given a list of courses, where each course has a specific start time and end time along with the faculty member assigned to it. Your task is to determine if it is possible to schedule all the courses such that no faculty member is teaching two or more courses at the same time. If it is possible, your program should return \\"Yes\\" and the schedule of courses for each faculty member. If it is not possible, your program should return \\"No\\". # Input The input consists of multiple test cases. Each test case starts with an integer `c` (1 ≤ c ≤ 50) representing the number of courses. This is followed by `c` lines, each containing a string and two integers: the string is the name of the faculty member (a non-empty sequence of up to 20 lower-case English letters), and the two integers are the start time and end time of the course in 24-hour format (0 ≤ start < end ≤ 23). A line containing zero (0) indicates the end of input. # Output For each test case, output \\"Yes\\" followed by the schedule for each faculty member or \\"No\\" if it\'s not possible to avoid conflicts. If the schedule is possible, print the faculty name followed by pairs of start and end times of courses assigned to them in any order. # Example Input ``` 3 alice 9 12 bob 10 13 alice 11 14 4 john 8 10 john 9 11 emma 13 15 emma 15 17 0 ``` Output ``` No Yes emma 13 15 15 17 john 8 10 9 11 ```","solution":"def can_schedule_courses(course_list): from collections import defaultdict def check_conflicts(schedule): for faculty, times in schedule.items(): times.sort() for i in range(1, len(times)): if times[i][0] < times[i-1][1]: return False return True results = [] for courses in course_list: schedule = defaultdict(list) for name, start, end in courses: schedule[name].append((start, end)) if check_conflicts(schedule): result = [\\"Yes\\"] for faculty, times in schedule.items(): faculty_schedule = [faculty] + [time for timeslot in times for time in timeslot] result.append(\\" \\".join(map(str, faculty_schedule))) results.append(\\"n\\".join(result)) else: results.append(\\"No\\") return \\"n\\".join(results) def parse_input(data): lines = data.strip().split(\\"n\\") index = 0 cases = [] while index < len(lines): c = int(lines[index]) if c == 0: break index += 1 courses = [] for _ in range(c): parts = lines[index].split() name, start, end = parts[0], int(parts[1]), int(parts[2]) courses.append((name, start, end)) index += 1 cases.append(courses) return cases def manage_course_scheduling(data): cases = parse_input(data) return can_schedule_courses(cases)"},{"question":"Implement a function that determines if a given string s is a good string. A string is considered \\"good\\" if the number of occurrences of each character in the string is the same. If it is a good string, return true; otherwise, return false. Example 1: Input: s = \\"aabb\\" Output: true Explanation: The character \'a\' occurs 2 times and the character \'b\' occurs 2 times. Hence, all characters occur the same number of times. Example 2: Input: s = \\"aabbbb\\" Output: false Explanation: The character \'a\' occurs 2 times whereas the character \'b\' occurs 4 times. Hence, not all characters occur the same number of times. Constraints: - The string s will contain only lowercase English letters. - 1 <= s.length <= 1000","solution":"def is_good_string(s): Determines if the given string s is a \\"good\\" string. A string is considered good if all characters occur the same number of times. :param s: input string consisting of only lowercase English letters. :return: True if the string is good, False otherwise. from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Extract the frequencies of the characters frequencies = list(char_count.values()) # Check if all frequencies are the same return all(freq == frequencies[0] for freq in frequencies)"},{"question":"Evelyn loves string manipulation puzzles and she found a new challenge. She has two strings, `s` and `t`. Her goal is to convert string `s` into string `t` using the minimum number of operations. There are three types of allowed operations: 1. Insert a character at any position. 2. Remove a character from any position. 3. Replace a character with another character. Evelyn needs your help to determine the minimum number of operations required to convert `s` into `t`. Can you write a function that calculates this? -----Input----- The first line of input contains the string `s` (1 ≤ len(s) ≤ 1000). The second line of input contains the string `t` (1 ≤ len(t) ≤ 1000). The strings consist of lowercase English letters only. -----Output----- Print a single integer that represents the minimum number of operations required to convert string `s` into string `t`. -----Examples----- Input abcdef azced Output 3 Input sunday saturday Output 3 -----Note----- In the first sample, the operations would be: replace `b` with `z`, replace `d` with `c`, and replace `f` with `d`, resulting in three operations. In the second sample, the operations would be: insert `a` after `s`, insert `t` after `u`, and replace `y` with `d`, resulting in three operations.","solution":"def min_operations(s, t): Calculate the minimum number of operations required to convert string s into string t. Args: s (str): Source string. t (str): Target string. Returns: int: Minimum number of operations. m, n = len(s), len(t) # Create a table to store results of subproblems dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill dp[][] in bottom up manner for i in range(m + 1): for j in range(n + 1): # If first string is empty, only option is to insert all characters of second string if i == 0: dp[i][j] = j # minOperations(i, j) = j # If second string is empty, only option is to remove all characters of first string elif j == 0: dp[i][j] = i # minOperations(i, j) = i # If last characters are same, ignore last characters and recur for remaining string elif s[i - 1] == t[j - 1]: dp[i][j] = dp[i - 1][j - 1] # If last character are different, consider all possibilities and find minimum else: dp[i][j] = 1 + min(dp[i][j - 1], # Insert dp[i - 1][j], # Remove dp[i - 1][j - 1]) # Replace return dp[m][n]"},{"question":"You are working with a system that needs to keep track of the stock levels for various products in a warehouse. Each product has a unique identifier and a specified stock level. Sometimes products need to be moved between locations in the warehouse either to balance stock levels or to prepare for shipping. Write a program that processes a series of commands to update and query the stock levels of the products. The commands are given as follows: 1. `ADD product_id quantity` - Add a specified quantity of the product to the warehouse. 2. `REMOVE product_id quantity` - Remove a specified quantity of the product from the warehouse. The command should ensure that the stock for this product does not fall below zero. If the quantity to remove is more than the current stock, set the stock to zero. 3. `TRANSFER product_id quantity location` - Transfer a specified quantity of the product to a different location in the warehouse. Assume that the warehouse has predefined locations, and for simplicity, we use integers to represent different locations. 4. `QUERY product_id` - Return the current stock level of the specified product. Input: The first line of the input contains an integer `n` (1 ≤ n ≤ 10^5), the number of commands. The next `n` lines contain each command as described above. Output: For each `QUERY` command, print the current stock level of the specified product. Example: Input: 9 ADD 1 100 ADD 2 150 REMOVE 1 50 QUERY 1 TRANSFER 2 70 3 ADD 1 20 REMOVE 2 100 QUERY 2 QUERY 1 Output: 50 50 20 Note: - The product_id and location are represented as positive integers. - The commands should be processed in the order they are given. - It is guaranteed that for every `TRANSFER` command, the quantity to be transferred does not exceed the current stock level of the product.","solution":"def warehouse_commands(n, commands): stock = {} results = [] for command in commands: parts = command.split() action = parts[0] if action == \\"ADD\\": product_id, quantity = int(parts[1]), int(parts[2]) stock[product_id] = stock.get(product_id, 0) + quantity elif action == \\"REMOVE\\": product_id, quantity = int(parts[1]), int(parts[2]) current_stock = stock.get(product_id, 0) stock[product_id] = max(0, current_stock - quantity) elif action == \\"TRANSFER\\": product_id, quantity, _ = int(parts[1]), int(parts[2]), parts[3] current_stock = stock.get(product_id, 0) stock[product_id] = max(0, current_stock - quantity) elif action == \\"QUERY\\": product_id = int(parts[1]) results.append(stock.get(product_id, 0)) return results"},{"question":"You are given a rectangular grid with M rows and N columns. Each cell in the grid contains either a \'1\' or a \'0\'. Each cell is connected to its eight neighbors (vertically, horizontally, and diagonally). A connected region is created by a group of \'1\'s connected either vertically, horizontally, or diagonally. Your task is to find the number of distinct connected regions in the given grid. ------ Input Format ------ - The first line contains two space-separated integers, M and N, denoting the number of rows and columns in the grid. - Each of the next M lines contains N space-separated integers, each either \'1\' or \'0\'. ------ Output Format ------ Output one integer: the number of distinct connected regions in the grid. ------ Constraints ------ 1 ≤ M, N ≤ 50 Cells contain only the integers \'1\' or \'0\'. ----- Sample Input 1 ------ 4 5 1 1 0 0 0 0 1 1 0 0 0 0 0 0 1 1 0 0 1 1 ----- Sample Output 1 ------ 3 ------ Explanation 1 ------- There are three distinct connected regions in the grid: - Region 1: Cells (0,0), (0,1), (1,1), (1,2) - Region 2: Cell (2,4) - Region 3: Cells (3,0), (3,3), (3,4)","solution":"def num_connected_regions(grid): Returns the number of distinct connected regions in the grid. if not grid: return 0 M, N = len(grid), len(grid[0]) visited = [[False for _ in range(N)] for _ in range(M)] def dfs(x, y): Perform Depth-First Search to mark all cells in the same region as visited. stack = [(x, y)] while stack: cx, cy = stack.pop() for nx, ny in [(cx-1, cy-1), (cx-1, cy), (cx-1, cy+1), (cx, cy-1), (cx, cy+1), (cx+1, cy-1), (cx+1, cy), (cx+1, cy+1)]: if 0 <= nx < M and 0 <= ny < N and not visited[nx][ny] and grid[nx][ny] == 1: visited[nx][ny] = True stack.append((nx, ny)) count = 0 for i in range(M): for j in range(N): if grid[i][j] == 1 and not visited[i][j]: visited[i][j] = True dfs(i, j) count += 1 return count"},{"question":"Given an array of integers, determine the number of elements in the array that are unique (appear only once). For example, if the array `ar = [1, 2, 2, 3, 4, 4, 5]`, the unique elements are `[1, 3, 5]`, so the function should return `3`. Function Description Complete the `countUniqueElements` function in the editor below. It must return the number of unique elements in the array as an integer. ```python def countUniqueElements(ar: List[int]) -> int: # Your code here ``` `countUniqueElements` has the following parameter(s): - `ar`: an array of integers Input Format - The first line contains an integer, `n`, denoting the size of the array. - The second line contains `n` space-separated integers representing the array\'s elements. Constraints - 0 < n leq 1000 - 0 leq text{ar[i]} leq 1000 Output Format Print the number of unique elements in the array as a single integer. Sample Input ``` 7 1 2 2 3 4 4 5 ``` Sample Output ``` 3 ``` Explanation We print the count of unique elements `[1, 3, 5]`, so the output is `3`.","solution":"from typing import List def countUniqueElements(ar: List[int]) -> int: Returns the number of unique elements in the array. from collections import Counter element_counts = Counter(ar) unique_count = sum(1 for count in element_counts.values() if count == 1) return unique_count"},{"question":"Write a function that takes a list of integers and a target value as input. The function should return a new list containing all pairs of integers from the input list that add up to the target value. Each pair should be represented as a tuple of the two integer values in ascending order. The pairs in the output list should also be sorted in ascending order based on the first element of each tuple. If no such pairs exist, return an empty list. ```python # Example usage: # 1 + 2 = 3, so (1, 2) is a valid pair # (-1) + 4 = 3, so (-1, 4) is another valid pair find_pairs([1, 2, 3, -1, 4, 6], 3) # => [(-1, 4), (1, 2)] ``` Additional examples can be found in the test cases. Good luck!","solution":"def find_pairs(nums, target): Find all pairs of integers in the list `nums` that add up to the `target` value. Each pair is represented as a tuple of the two integer values in ascending order. The pairs in the output list are sorted based on the first element of each tuple. Args: nums (list): List of integers. target (int): Target sum value. Returns: list: List of tuples, each containing a pair of integers. seen = set() pairs = set() for num in nums: complement = target - num if complement in seen: pairs.add((min(num, complement), max(num, complement))) seen.add(num) return sorted(pairs)"},{"question":"Given a list of strings, write a function common_prefix_length that returns the maximum length of a common prefix shared among all the strings in the list. For Example: Input: [\\"flower\\", \\"flow\\", \\"flight\\"] Output: 2 Explanation: The longest common prefix is \\"fl\\", which is 2 characters long. Input: [\\"dog\\", \\"racecar\\", \\"car\\"] Output: 0 Explanation: There is no common prefix among the input strings. Your Task: You don\'t need to read input or print anything. Complete the function common_prefix_length() which accepts a list of strings as input and returns an integer denoting the longest common prefix length. Expected Time Complexity: O(N * M) [where N is the number of strings and M is the length of the shortest string in the list] Expected Auxiliary Space: O(1) Constraints: 1 <= len(strings) <= 100 1 <= len(strings[i]) <= 100","solution":"def common_prefix_length(strings): Returns the maximum length of a common prefix shared among all the strings in the list. :param strings: List of strings :return: Integer denoting the longest common prefix length if not strings: return 0 # Find the minimum length string from the list min_length = min(len(s) for s in strings) # Initialize the common prefix length prefix_length = 0 for i in range(min_length): # Take the current character from the first string char = strings[0][i] # Check if the current character is the same in all strings if all(s[i] == char for s in strings): prefix_length += 1 else: break return prefix_length"},{"question":"Given a list of employees in a company where each employee is identified by a unique ID and a list of their subordinates, write a program to compute the following information for each employee: * Employee ID * Number of direct subordinates * Total number of subordinates (direct or indirect) * Level in the organizational hierarchy (assuming the CEO is at level 0) * Type of employee (CEO, Manager, or Staff) An employee who has subordinates is a Manager, while an employee at the top of the hierarchy with no superior is the CEO, and employees without any subordinates are Staff. Constraints: * 1 ≤ n ≤ 50 (where n is the number of employees) * Each employee ID is a unique integer from 0 to n-1 Input: The first line contains an integer n, the number of employees. The next n lines contain the information for each employee in the following format: id subordinates Where \'id\' is the employee ID and \'subordinates\' is a comma-separated list of subordinate IDs (if no subordinates, this list is empty). Output: Print the information for each employee in the following format: employee id: direct_subordinates = ds, total_subordinates = ts, level = l, type Where: * ds is the number of direct subordinates * ts is the total number of subordinates (direct and indirect) * l is the level in the hierarchy * type specifies whether the employee is a CEO, Manager, or Staff Example: Input: 6 0 1,2 1 3,4 2 5 3 4 5 Output: employee 0: direct_subordinates = 2, total_subordinates = 5, level = 0, CEO employee 1: direct_subordinates = 2, total_subordinates = 2, level = 1, Manager employee 2: direct_subordinates = 1, total_subordinates = 1, level = 1, Manager employee 3: direct_subordinates = 0, total_subordinates = 0, level = 2, Staff employee 4: direct_subordinates = 0, total_subordinates = 0, level = 2, Staff employee 5: direct_subordinates = 0, total_subordinates = 0, level = 2, Staff","solution":"from collections import defaultdict, deque def process_employee_hierarchy(n, employees_info): employees = {} levels = {} for info in employees_info: parts = info.split() emp_id = int(parts[0]) subordinates = list(map(int, parts[1].split(\',\'))) if len(parts) > 1 and parts[1] else [] employees[emp_id] = subordinates levels[emp_id] = -1 def count_total_subordinates(emp_id): if not employees[emp_id]: return 0 total = len(employees[emp_id]) for sub_id in employees[emp_id]: total += count_total_subordinates(sub_id) return total # Determine hierarchy levels and the root (CEO) reversed_tree = defaultdict(list) for emp_id, subs in employees.items(): for sub in subs: reversed_tree[sub].append(emp_id) CEO_id = None for emp_id in employees: if emp_id not in reversed_tree: CEO_id = emp_id break levels[CEO_id] = 0 queue = deque([CEO_id]) while queue: current = queue.popleft() current_level = levels[current] for sub in employees[current]: levels[sub] = current_level + 1 queue.append(sub) results = [] for emp_id in range(n): direct_subordinates = len(employees[emp_id]) total_subordinates = count_total_subordinates(emp_id) level = levels[emp_id] if emp_id == CEO_id: emp_type = \\"CEO\\" elif direct_subordinates > 0: emp_type = \\"Manager\\" else: emp_type = \\"Staff\\" results.append(f\\"employee {emp_id}: direct_subordinates = {direct_subordinates}, total_subordinates = {total_subordinates}, level = {level}, {emp_type}\\") return results"},{"question":"A logistics company needs to efficiently manage the transportation of goods between multiple warehouses. Each warehouse is represented as a node in a graph, and direct transportation routes between warehouses are the edges of the graph. Each route has a certain transportation cost associated with it. The company\'s goal is to minimize the total transportation cost while ensuring that goods can be moved between all warehouses directly or indirectly. You are tasked with writing a program to find the minimal cost required to connect all the warehouses. ------ Input ------ The first line of the input contains two integers N and M, where N is the number of warehouses (nodes), and M is the number of transportation routes (edges). Each of the next M lines contains three integers u, v, and w, representing a route from warehouse u to warehouse v with a transportation cost w. ------ Output ------ Output a single integer, the minimal cost required to connect all the warehouses. If it is not possible to connect all warehouses, output a single integer -1. ------ Constraints ------ 1 ≤ N ≤ 1000 0 ≤ M ≤ 2000 1 ≤ u, v ≤ N 1 ≤ w ≤ 10000 There is no guarantee that the graph will be connected. It should be assumed that the graph can have multiple edges and self-loops, though self-loops should not contribute to the minimal cost. ------ Sample Input 1 ------ 4 5 1 2 1 2 3 2 3 4 3 4 1 4 1 3 5 ------ Sample Output 1 ------ 7 ------ Explanation 1 ------ To connect all warehouses with minimal cost, one of the possible solutions is to pick the following routes: - Route from 1 to 2 with cost 1 - Route from 2 to 3 with cost 2 - Route from 3 to 4 with cost 3 The total cost will be 1 + 2 + 3 = 6. ------ Sample Input 2 ------ 4 2 1 2 1 3 4 2 ------ Sample Output 2 ------ -1 ------ Explanation 2 ------ It is impossible to connect all warehouses because the graph is not connected with the given routes. Thus, the output is -1.","solution":"def find_min_cost_to_connect_warehouses(N, M, routes): Function to find the minimal cost required to connect all the warehouses. Parameters: N (int): Number of warehouses (nodes) M (int): Number of transportation routes (edges) routes (list of tuples): Each tuple (u, v, w) represents a route from warehouse u to warehouse v with a cost w Returns: int: The minimal cost required to connect all the warehouses, or -1 if not possible import heapq from collections import defaultdict if N == 0: return -1 # Create adjacency list representation of graph graph = defaultdict(list) for u, v, w in routes: if u != v: # ignore self-loops graph[u].append((w, v)) graph[v].append((w, u)) # Prim\'s algorithm to find the MST (Minimum Spanning Tree) def prim(graph, start): visited = set() min_heap = [(0, start)] total_cost = 0 while min_heap: cost, node = heapq.heappop(min_heap) if node not in visited: visited.add(node) total_cost += cost for next_cost, next_node in graph[node]: if next_node not in visited: heapq.heappush(min_heap, (next_cost, next_node)) if len(visited) == N: return total_cost else: return -1 # not all nodes are connected # Assume we start from the first node (1) return prim(graph, 1) # Sample Input Code - for testing if __name__ == \\"__main__\\": N1, M1 = 4, 5 routes1 = [(1, 2, 1), (2, 3, 2), (3, 4, 3), (4, 1, 4), (1, 3, 5)] print(find_min_cost_to_connect_warehouses(N1, M1, routes1)) # Output: 6 N2, M2 = 4, 2 routes2 = [(1, 2, 1), (3, 4, 2)] print(find_min_cost_to_connect_warehouses(N2, M2, routes2)) # Output: -1"},{"question":"Anna is passionate about puzzles and recently she came across a chessboard puzzle. Given a standard 8x8 chessboard with some squares marked with `X` to indicate obstacles, Anna needs to determine the minimum number of moves required for a knight to travel from a given start position to a given destination position. If it is not possible for the knight to reach the destination, return -1. A knight moves in an \\"L\\" shape: two squares in one direction and then one square perpendicular, or one square in one direction and then two squares perpendicular. Input The first line contains a single integer, T, the number of test cases. For each test case: - The first line contains two integers, the start position `sx sy` (0 ≤ sx, sy < 8) - The second line contains two integers, the destination position `dx dy` (0 ≤ dx, dy < 8) - The third line contains a single integer N, the number of obstacles. - The next N lines each contain two integers, the position of an obstacle `ox oy` (0 ≤ ox, oy < 8) Output For each test case, output a single line containing the minimum number of moves required for the knight to reach the destination or -1 if it is not possible. Constraints 1 ≤ T ≤ 100 0 ≤ N ≤ 64 SAMPLE INPUT 2 0 0 7 7 1 1 2 0 0 7 7 0 SAMPLE OUTPUT 6 6","solution":"from collections import deque def is_valid(x, y, board): return 0 <= x < 8 and 0 <= y < 8 and board[x][y] == 0 def bfs_knight_moves(start, end, board): directions = [ (2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2) ] queue = deque([(start[0], start[1], 0)]) # (x, y, moves) visited = set() visited.add(start) while queue: x, y, moves = queue.popleft() if (x, y) == end: return moves for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny, board) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, moves + 1)) return -1 def knight_moves(T, test_cases): results = [] for tc in test_cases: sx, sy = tc[\'start\'] dx, dy = tc[\'end\'] obstacles = tc[\'obstacles\'] board = [[0] * 8 for _ in range(8)] for ox, oy in obstacles: board[ox][oy] = 1 result = bfs_knight_moves((sx, sy), (dx, dy), board) results.append(result) return results"},{"question":"You are given two integers M and N. You are required to fill an MxN matrix with integers according to the following rules: 1. Start filling from position (1, 1) (row 1, column 1) with the number 1, and continue sequentially until the entire matrix is filled. 2. Fill the matrix in a zigzag pattern: - Fill the first row left to right. - Fill the second row right to left. - Fill the third row left to right. - Continue this pattern throughout the matrix. Your task is to write a program that prints the MxN matrix filled as described. ------ Input ------ The first line of the input contains an integer T, the number of test cases. The description of T test cases follows. Each test case consists of two space-separated integers M and N. ------ Output ------ For each test case, output the MxN matrix. Each row of the matrix should be output as a single line of space-separated integers. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ M, N ≤ 50 ----- Sample Input 1 ------ 2 3 3 4 5 ----- Sample Output 1 ------ 1 2 3 6 5 4 7 8 9 1 2 3 4 5 10 9 8 7 6 11 12 13 14 15 20 19 18 17 16","solution":"def generate_zigzag_matrix(T, test_cases): result = [] for case in test_cases: M, N = case matrix = [[0] * N for _ in range(M)] num = 1 for i in range(M): if i % 2 == 0: for j in range(N): matrix[i][j] = num num += 1 else: for j in range(N-1, -1, -1): matrix[i][j] = num num += 1 result.append(matrix) return result"},{"question":"You are given a sequence of integers representing the prices of a particular stock on consecutive days. You want to find two non-overlapping subarrays such that the sum of the elements in both subarrays is maximized. In other words, we need to pick two subarrays A and B such that their sum is maximum and they do not overlap. Formally, you are given an array of n integers P where P[i] denotes the price of stock on day i. Find two non-overlapping subarrays with maximum possible sum. -----Input----- The first line of the input contains an integer T, the number of test cases. The first line of each test case contains a single integer N, the length of the array. The second line of each test case contains N space-separated integers representing the stock prices. -----Output----- For each test case, print a single line containing the maximum possible sum of two non-overlapping subarrays. -----Example----- Input: 2 5 7 2 5 3 6 8 1 2 3 -1 2 4 -5 1 Output: 23 12 -----Constraints----- 1 ≤ T ≤ 100 2 ≤ N ≤ 5000 -10000 ≤ P[i] ≤ 10000 for all 0 ≤ i < N Each input file will not be larger than 4 MB (4,000,000,000 bytes) in size.","solution":"def maxSumTwoNoOverlap(arr): def maxSubArray(A): n = len(A) max_sum = float(\'-inf\') current_sum = 0 for i in range(n): current_sum = max(current_sum + A[i], A[i]) max_sum = max(max_sum, current_sum) return max_sum n = len(arr) left_max = [0] * n right_max = [0] * n # compute maximum subarray sum from the left current_sum = float(\'-inf\') for i in range(n): left_max[i] = maxSubArray(arr[:i + 1]) # compute maximum subarray sum from the right for i in range(n - 1, -1, -1): right_max[i] = maxSubArray(arr[i:]) maximum = float(\'-inf\') for i in range(n - 1): maximum = max(maximum, left_max[i] + right_max[i + 1]) return maximum def process_test_cases(T, test_cases): results = [] for case in test_cases: results.append(maxSumTwoNoOverlap(case)) return results"},{"question":"You are a gardener, and you own a rectangular garden of dimensions m x n. You want to plant trees in your garden, but the trees must follow a specific planting pattern: 1. Each tree must be planted on an integer grid point in the garden. 2. You want to maximize the number of trees planted such that: - No two trees are in the same row or column. - The Manhattan distance between any two trees must be at least 2. The Manhattan distance between two points (x1, y1) and (x2, y2) is defined as |x1 - x2| + |y1 - y2|. Your task is to determine the maximum number of trees you can plant in the garden following the given constraints. Input The first line contains two integers m and n (1 ≤ m, n ≤ 1000) — the dimensions of the garden. Output Print the maximum number of trees you can plant in the garden following the constraints. Example Input 4 4 Output 4 Explanation For a garden with dimensions 4 x 4, you can plant trees at the coordinates (1, 1), (1, 3), (3, 1), and (3, 3). The Manhattan distance between any two plants is strictly greater than or equal to 2, and no two trees are in the same row or column, fulfilling the given constraints.","solution":"def max_trees(m, n): Returns the maximum number of trees that can be planted in the garden following the given constraints. return ((m + 1) // 2) * ((n + 1) // 2)"},{"question":"Write a function that takes an integer as input and returns a string representing the number in Roman numeral form. The input will be an integer between 1 and 3999. Examples: ```python int_to_roman(1) # returns \\"I\\" int_to_roman(1990) # returns \\"MCMXC\\" int_to_roman(3999) # returns \\"MMMCMXCIX\\" ```","solution":"def int_to_roman(num): Convert an integer to a Roman numeral. Args: num (int): The integer to be converted. Must be between 1 and 3999. Returns: str: The Roman numeral representation of the given integer. val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = \'\' i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syb[i] num -= val[i] i += 1 return roman_num"},{"question":"Samuel needs your help to organize his recipe collection. He has a series of recipes, each containing the names of its ingredients. Samuel wants to find out the list of unique ingredients across all recipes and sort them in alphabetical order. Write a program that takes T recipes and prints the unique ingredients sorted alphabetically. INPUT: An integer T (1 ≤ T ≤ 100) : number of recipes Each recipe is given on a newline and contains a list of ingredients separated by spaces (1 ≤ length_of_recipe ≤ 200) OUTPUT: A single line containing the unique ingredients sorted alphabetically. SAMPLE INPUT 4 flour sugar eggs eggs milk butter sugar milk salt flour SAMPLE OUTPUT butter eggs flour milk salt sugar","solution":"def unique_sorted_ingredients(t, recipes): Returns the list of unique ingredients across all recipes, sorted alphabetically. :param t: Integer, number of recipes :param recipes: List of strings, each string contains ingredients separated by spaces :return: Single string, unique ingredients sorted alphabetically ingredients_set = set() for recipe in recipes: ingredients = recipe.split() ingredients_set.update(ingredients) sorted_ingredients = sorted(ingredients_set) return \' \'.join(sorted_ingredients)"},{"question":"You are tasked with developing a system that manages a series of storage units. Each storage unit can hold a certain amount of items. The units are organized in a one-dimensional row, and each unit is uniquely identified by its position in the row (from 0 to P-1). Your job is to write a program that processes multiple operations on these storage units. Each operation is either adding items to or removing items from specific units. After performing the given operations, the program should be able to return the remaining number of items in each unit. Input The first line contains an integer P, the number of storage units. The second line contains P integers, where the ith integer represents the initial number of items in the ith storage unit. The third line contains an integer O, the number of operations. The next O lines describe the operations. Each operation is given on a separate line with two integers that can be either of the following forms: - \\"1 A B\\" which means adding B items to the unit at position A. - \\"2 A B\\" which means removing B items from the unit at position A. If B is greater than the current number of items in the unit, remove all items from that unit and set its item count to zero. Output Print P space-separated integers representing the number of items remaining in each storage unit after performing all the operations. Constraints: 1 ≤ P ≤ 100 0 ≤ Initial number of items in any unit ≤ 1000 1 ≤ O ≤ 1000 0 ≤ A < P 1 ≤ B ≤ 1000 SAMPLE INPUT 5 10 20 30 40 50 4 1 1 5 2 3 10 1 4 15 2 2 35 SAMPLE OUTPUT 10 25 0 30 65 Explanation Initial state of the storage units: [10, 20, 30, 40, 50] Operation #1: Add 5 items to unit 1. State becomes: [10, 25, 30, 40, 50] Operation #2: Remove 10 items from unit 3. State becomes: [10, 25, 30, 30, 50] Operation #3: Add 15 items to unit 4. State becomes: [10, 25, 30, 30, 65] Operation #4: Remove 35 items from unit 2. State becomes: [10, 25, 0, 30, 65]","solution":"def process_storage_operations(P, initial_items, operations): Processes storage unit operations and returns the final state of units. :param P: int - Number of storage units :param initial_items: list - Initial number of items in each storage unit :param operations: list of tuples - Each tuple contains (operation_type, unit_position, items) :return: list - Number of items remaining in each unit after performing all operations # Copy the initial items to a new list to avoid modifying the input list storage_units = initial_items[:] for oper in operations: oper_type, A, B = oper if oper_type == 1: # Add B items to unit at position A storage_units[A] += B elif oper_type == 2: # Remove B items from unit at position A, but do not go below 0 storage_units[A] = max(0, storage_units[A] - B) return storage_units"},{"question":"# Legendary Swordsmith You are in the midst of an ancient city renowned for its legendary swordsmiths. Every swordsmith in the city has made a series of swords, where each sword has a unique strength value. A young apprentice is now apprenticing under these swordsmiths and wants to identify the most powerful sword among all of them. However, there\'s a twist: he can only compare swords from different swordsmiths. Each swordsmith has arranged their swords in a line, sorted by their strength, in non-decreasing order. The apprentice needs to find the maximum strength sword that can be seen by comparing the strongest sword from each swordsmith. Write a program to find the maximum strength sword among the strongest swords of all swordsmiths. Input The first line of the input contains an integer k (1 ≤ k ≤ 100) — the number of swordsmiths. Each of the next k lines contains: - an integer mi (1 ≤ mi ≤ 10^5) — the number of swords made by the ith swordsmith. - mi distinct positive integers ai1, ai2, ..., aim (1 ≤ aij ≤ 10^9) — the strength values of the swords, sorted in non-decreasing order. Output A single integer — the maximum strength sword among the strongest swords of each swordsmith. Examples Input 3 4 1 3 5 7 3 4 6 8 5 2 3 9 15 20 Output 20 Input 2 3 2 8 12 2 1 10 Output 12","solution":"def max_strongest_sword(k, swordsmiths): max_strength = 0 for swords in swordsmiths: max_strength = max(max_strength, swords[-1]) # Only compare the last (strongest) sword return max_strength"},{"question":"Given an array of integers and a target number X. Find the number of unique pairs (a, b) in the array such that their sum equals X. Example 1: Input: arr = [1, 5, 7, -1, 5] X = 6 Output: 2 Explanation: The unique pairs are (1, 5) and (7, -1) contributing to sum 6. Example 2: Input: arr = [1, 1, 1, 1] X = 2 Output: 1 Explanation: The unique pair is (1, 1), with all other pairs considered redundant in terms of uniqueness. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findUniquePairs() which takes an array arr and a target X as input parameters and returns the count of unique pairs that sum up to X. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= arr.length <= 10^5 -10^6 <= arr[i] <= 10^6 -10^6 <= X <= 10^6","solution":"def findUniquePairs(arr, X): Finds the number of unique pairs (a, b) in the array such that their sum equals X. seen = set() pairs = set() for number in arr: target = X - number if target in seen: pairs.add(tuple(sorted((number, target)))) seen.add(number) return len(pairs)"},{"question":"You are given a 2D grid consisting of empty cells represented by \'.\' and walls represented by \'#\'. The grid has dimensions M rows by N columns. Tom is planning to build a fence along the grid\'s boundaries and cover the walls with stones to transform the grid into a garden landscape. Tom\'s ultimate goal is to find the maximum number of connected empty cells in the grid, where connected means four-directionally (up, down, left, right). Create a function that determines the size of the largest connected region of empty cells in the grid. -----Constraints----- - 1 ≤ M, N ≤ 1,000 - The grid will have at least one empty cell. -----Input----- Input is given from Standard Input in the following format: M N G_1 G_2 : G_M Each G_i (1 ≤ i ≤ M) is a string of length N, consisting of \'#\' and \'.\'. -----Output----- Print the size of the largest connected region of empty cells in the grid. -----Sample Input----- 5 5 .#... ..#.. # .#.#. ..#.# -----Sample Output----- 5 In the sample input, the largest connected region of empty cells can be found: starting from the first row, second column to the second row, fourth column (\'.\'), making a total of five connected empty cells.","solution":"def largest_connected_region(grid, M, N): def dfs(x, y): if x < 0 or x >= M or y < 0 or y >= N or grid[x][y] == \'#\' or visited[x][y]: return 0 visited[x][y] = True count = 1 for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: count += dfs(x + dx, y + dy) return count visited = [[False] * N for _ in range(M)] max_region = 0 for i in range(M): for j in range(N): if grid[i][j] == \'.\' and not visited[i][j]: max_region = max(max_region, dfs(i, j)) return max_region def parse_input(): import sys input = sys.stdin.read data = input().split() M = int(data[0]) N = int(data[1]) grid = [data[i+2] for i in range(M)] return grid, M, N if __name__ == \\"__main__\\": grid, M, N = parse_input() print(largest_connected_region(grid, M, N))"},{"question":"Let\'s define a rectangle to be a grid with R rows and C columns. Each cell in the grid contains a positive integer. Here is an example of a grid: 1 2 3 4 5 6 7 8 9 We say that two cells are adjacent if they share a side (i.e., horizontally or vertically). In the example grid above, the cell with the number \'1\' is adjacent only to the cells with numbers \'2\' and \'4\'. The cell with the number \'5\' is adjacent to the cells with numbers \'2\', \'4\', \'6\', and \'8\'. A cell is not adjacent to itself. A sequence of cells is called a path if each cell in the sequence is adjacent to the cell which follows it (except for the last cell in the sequence, which of course has no successor). In this example, \\"1 2 3 6 9\\" is a path. You’re given a matrix m of R rows and C columns, where each cell contains a non-negative integer; and a target integer k. Find the maximum length of a path such that the sum of the numbers in the path is less than or equal to k. If no such path exists, return 0. -----Input----- The first line of the input contains two integers R and C (1 ≤ R, C ≤ 100), the number of rows and columns of the grid respectively. The next R lines describe the grid, each containing C integers (0 ≤ integer ≤ 10000). The last line contains a single integer k (0 ≤ k ≤ 1000000). -----Output----- Output a single integer, which is the maximum length of a path with a sum of numbers less than or equal to k. If no such path exists, output 0. -----Examples----- Input 3 3 1 2 3 4 5 6 7 8 9 15 Output 3 Input 2 2 100 200 150 250 50 Output 0","solution":"def max_path_length_with_sum(R, C, grid, k): def is_valid(x, y): return 0 <= x < R and 0 <= y < C def dfs(x, y, current_sum, current_length): nonlocal max_length if current_sum > k: return 0 max_length = max(max_length, current_length) for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if is_valid(nx, ny) and not visited[nx][ny]: visited[nx][ny] = True dfs(nx, ny, current_sum + grid[nx][ny], current_length + 1) visited[nx][ny] = False max_length = 0 visited = [[False] * C for _ in range(R)] for i in range(R): for j in range(C): visited[i][j] = True dfs(i, j, grid[i][j], 1) visited[i][j] = False return max_length"},{"question":"You are given an integer array of n elements and a target integer x. Find the number of unique pairs (a, b) from the array such that their sum is equal to x. A pair is considered unique if no element at any index of the pair is used more than once, and the elements themselves are distinct (a != b). -----Input----- The first line contains one integer number n (1 ≤ n ≤ 200) — number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6). The last line contains one integer x (1 ≤ x ≤ 10^6). -----Output----- Print one integer number — the number of unique pairs whose sum is x. -----Examples----- Input 5 1 2 3 4 5 6 Output 2 Input 4 1 1 1 1 2 Output 1 Input 6 1 2 3 4 5 6 7 Output 3 -----Note----- In the first example, the pairs are (1, 5) and (2, 4). In the second example, the only pair is (1, 1). In the third example, the pairs are (1, 6), (2, 5), and (3, 4).","solution":"def count_pairs(array, target): Returns the number of unique pairs (a, b) in the array such that a + b = target seen = set() pairs = set() for number in array: complement = target - number if complement in seen: pairs.add(frozenset((number, complement))) seen.add(number) return len(pairs)"},{"question":"You have been tasked with developing a system to help manage event invitations and RSVPs. Each event has a list of people who are invited and a list of people who have confirmed their attendance. You need to determine which invitees have confirmed their attendance and which have not. Write a function `process_rsvps(invites, rsvps)` that takes in two lists: `invites` and `rsvps`. The `invites` list contains the names of people who have been invited to the event, and the `rsvps` list contains the names of people who have confirmed their attendance. Your function should return a dictionary with two keys: - `\\"confirmed\\"`: a list of names of people who have both been invited and have RSVP\'d. - `\\"not_confirmed\\"`: a list of names of people who have been invited but have not RSVP\'d. Both lists in the dictionary should be sorted in alphabetical order. # Input - `invites` is a list of strings where each string is a name of an invitee. The list may have duplicate names, which should be treated as separate invites. - `rsvps` is a list of strings where each string is a name of a person who has confirmed their attendance. The list may have duplicate names, which should be treated as separate RSVPs. # Output - The function should return a dictionary with two keys: `\\"confirmed\\"` and `\\"not_confirmed\\"`. - The value for `\\"confirmed\\"` should be a list of names sorted alphabetically of those who are in both `invites` and `rsvps`. - The value for `\\"not_confirmed\\"` should be a list of names sorted alphabetically of those who are in `invites` but not in `rsvps`. # Examples ```python invites = [\\"Alice\\", \\"Bob\\", \\"Charlie\\", \\"Alice\\", \\"Eve\\"] rsvps = [\\"Charlie\\", \\"Alice\\", \\"Eve\\", \\"Eve\\"] result = process_rsvps(invites, rsvps) print(result) # Output: {\\"confirmed\\": [\\"Alice\\", \\"Charlie\\", \\"Eve\\"], \\"not_confirmed\\": [\\"Alice\\", \\"Bob\\"]} ``` ```python invites = [\\"Dave\\", \\"Eve\\", \\"Frank\\"] rsvps = [\\"Eve\\", \\"George\\"] result = process_rsvps(invites, rsvps) print(result) # Output: {\\"confirmed\\": [\\"Eve\\"], \\"not_confirmed\\": [\\"Dave\\", \\"Frank\\"]} ``` # Constraints - All names in invites and rsvps lists are strings consisting of alphanumeric characters and have a length between 1 and 100. - The total number of invitees in the invites list does not exceed 1000. - The total number of RSVPs in the rsvps list does not exceed 1000. # Note - Duplicate names in the invites list indicate multiple invitations to the same person and should be handled accordingly. Similarly, duplicates in the rsvps list indicate multiple confirmations and should be handled.","solution":"def process_rsvps(invites, rsvps): Determines which invitees have confirmed attendance and which have not. Parameters: invites (list): List of invited people. rsvps (list): List of people who have confirmed attendance. Returns: dict: A dictionary with keys \'confirmed\' and \'not_confirmed\'. # Using a set for rsvps for faster lookup rsvp_set = set(rsvps) # Maintaining counts invite_count = {person: 0 for person in set(invites)} for person in invites: invite_count[person] += 1 # Determine confirmed and not confirmed confirmed = set() not_confirmed = set() for person in invites: if person in rsvp_set: confirmed.add(person) else: not_confirmed.add(person) return { \\"confirmed\\": sorted(confirmed), \\"not_confirmed\\": sorted(not_confirmed - confirmed) }"},{"question":"Ada is an engineer working on a new transportation system. Each station in the system has a certain number of passengers waiting to be transported. Trains can travel between stations, and Ada has been tasked with designing a schedule to maximize the number of passengers transported, given the constraints of the system. Each train can visit a limited number of stations before it must return to its starting station for maintenance. Each station i has pi passengers waiting. The schedule must be designed such that the train visits exactly K stations. Input: The first line of the input contains an integer T denoting the number of test cases. Each test case consists of three lines: - The first line contains two integers N and K where N is the number of stations and K is the number of stations the train can visit. - The second line contains N integers where the i-th integer represents pi, the number of passengers waiting at the i-th station. Output: For each test case, print the maximum number of passengers that can be transported by visiting exactly K stations. Constraints: 1 ≤ T ≤ 10 1 ≤ K ≤ N ≤ 20 0 ≤ pi ≤ 1000 SAMPLE INPUT 2 5 3 10 20 30 40 50 4 2 1 2 3 4 SAMPLE OUTPUT 120 7 Explanation: For the first test case, the train can visit exactly 3 out of 5 stations. The maximum number of passengers transported can be achieved by visiting stations with 30, 40, and 50 passengers, summing up to 120. For the second test case, the train can visit exactly 2 out of 4 stations. The maximum number of passengers transported can be achieved by visiting stations with 3 and 4 passengers, summing up to 7.","solution":"from itertools import combinations def max_passengers(T, test_cases): results = [] for i in range(T): N, K = test_cases[i][0] passengers = test_cases[i][1] # Generate all possible combinations of K stations max_passengers_transport = 0 for comb in combinations(passengers, K): max_passengers_transport = max(max_passengers_transport, sum(comb)) results.append(max_passengers_transport) return results"},{"question":"Consider a grid with `m` rows and `n` columns. You are required to start at the top-left corner of the grid and reach the bottom-right corner. However, you can only move either down or right at any point in time. The grid is populated with numbers, each representing a particular weight. The path cost is the sum of all the weights along the path. Write a function `minPathCost(grid)` that returns the minimum path cost to reach the bottom-right corner of the grid from the top-left corner. # Input - `grid` is a list of lists of integers representing the grid. # Output - An integer representing the minimum path cost. # Example ```python # Input grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] # Output minPathCost(grid) -> 7 Here, the path 1 -> 3 -> 1 -> 1 -> 1 gives the minimum cost of 7. ``` # Constraints - Assume that `m` and `n` will be in the range `[1, 100]` and each weight will be a non-negative integer not exceeding 100. # Notes - Aim for a time complexity around `O(m * n)`. - Utilize dynamic programming to solve the problem.","solution":"def minPathCost(grid): Returns the minimum path cost to reach the bottom-right corner of the grid from the top-left corner. if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = grid[0][0] for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] for i in range(1, m): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[m-1][n-1]"},{"question":"Given a list of integers, find and return the second highest number in the list. If the list has fewer than two unique numbers, return the highest number instead. Input The input contains a single line with integers separated by spaces. The list will have at least one number and no more than 1000 numbers, each within the range [1, 1000]. Output Output the second highest number in the list, or if not applicable, the highest number. Examples Input 10 5 8 10 Output 8 Input 1 Output 1","solution":"def second_highest(numbers): Given a list of integers, returns the second-highest number in the list. If there are fewer than two unique numbers, returns the highest number. unique_numbers = list(set(numbers)) # Remove duplicates if len(unique_numbers) < 2: return max(unique_numbers) unique_numbers.sort() return unique_numbers[-2]"},{"question":"A secretive treasure hunter named Marco likes to leave encoded clues for his partner, Isla, using an encryption formula they devised together. Marco begins his encryption process by choosing a special character (*), which he uses to encircle each word in his clue. The final encoded message contains every word enveloped in the special character. For example, if Marco wants to send a clue using the special character \'*\' around every word in the sentence \\"find the treasure\\", the encoded message would look like \\"*find* *the* *treasure*\\". But to make things harder to crack, Marco takes it a step further by inserting arbitrary characters, consisting of uppercase and lowercase English letters, digits, and punctuation marks, randomly into this encoded message. Isla, who is well-versed in deciphering Marco\'s clues, always knows what the original message should be. Your task is to help Isla determine if the received encoded message could have been generated by Marco according to the described rules. -----Input----- - The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of words in Marco\'s message. - The next n lines contain one non-empty word each, consisting of lowercase English letters. The total length of all words does not exceed 100,000. - The last line contains the encoded message with a maximum length of 100,000 characters. The message can contain uppercase and lowercase English letters, digits, and punctuation marks. -----Output----- - Print \\"yes\\" (without the quotes) if the encoded message could have been created by Marco\'s encryption process, otherwise print \\"no\\". -----Examples----- Input 3 find the treasure *find*!34&*the*%#*treasure*! Output yes Input 3 help me now *he!lp*%#me*&!now Output no -----Note----- In the second example, the encoded message is invalid because the word “help” has extra characters breaking up the word. The original words must remain intact within their enclosing special characters.","solution":"def is_encoded_message_valid(n, words, encoded_message): Determines if the encoded message could have been created by Marco\'s encryption process. Args: n (int): Number of words in the original message. words (list of str): List of words in the original message. encoded_message (str): The encoded message to validate. Returns: str: \\"yes\\" if the encoded message is valid, otherwise \\"no\\". # Create the pattern that needs to be checked in the encoded message pattern = \'\' for word in words: pattern += f\\"*{word}*\\" # Generate a regex pattern that matches the pattern with arbitrary characters in between import re regex_pattern = \'.*\' + \'.*\'.join(re.escape(f\\"*{word}*\\") for word in words) + \'.*\' # Check if the encoded_message matches the regex pattern if re.match(regex_pattern, encoded_message): return \\"yes\\" else: return \\"no\\""},{"question":"A chef wants to organize a series of games, where each game involves a group of numbers on a list. In each game, he wants to identify the subarray with the maximum length which has an arithmetic progression. An arithmetic progression has a constant difference between its consecutive elements. For example, the array `[1, 3, 5, 7, 9]` is an arithmetic progression with a difference of `2`. Chef needs your help to create an algorithm that, for each game, can determine the length of the longest subarray forming an arithmetic progression. -----Input:----- - The first line of the input contains a single integer T denoting the number of test cases. - The first line of each test case contains a single integer N denoting the number of elements in the list. - The second line of each test case contains N space-separated integers denoting the elements of the list. -----Output:----- For each test case, print a single integer denoting the length of the longest subarray forming an arithmetic progression. -----Constraints----- - 1 leq T leq 1000 - 2 leq N leq 10^5 - -10^9 leq text{elements of the list} leq 10^9 -----Sample Input:----- 2 6 10 7 4 6 8 10 7 3 3 3 3 1 2 3 -----Sample Output:----- 4 4 -----Explanation:----- Test Case 1: The subarray `[4, 6, 8, 10]` forms an arithmetic progression with a difference of `2`, hence the length is `4`. Test Case 2: There are multiple subarrays forming an arithmetic progression. The longest subarray `[3, 3, 3, 3]` has a length of `4` and an arithmetic progression with a difference of `0`.","solution":"def longest_arith_seq_length(arr): if len(arr) < 2: return len(arr) max_len = 1 current_len = 1 current_diff = arr[1] - arr[0] for i in range(1, len(arr)): if arr[i] - arr[i - 1] == current_diff: current_len += 1 else: current_diff = arr[i] - arr[i - 1] current_len = 2 max_len = max(max_len, current_len) return max_len def solve_chef_games(test_cases): results = [] for case in test_cases: N, arr = case results.append(longest_arith_seq_length(arr)) return results # Example position to call the solution function with parsed inputs # This code section is for understanding; it should not be run as part of the solution input = [ (6, [10, 7, 4, 6, 8, 10]), (7, [3, 3, 3, 3, 1, 2, 3]) ] output = solve_chef_games(input) print(output) # Expects [4, 4]"},{"question":"You are given an array of positive integers. Your task is to find the largest subset of the array such that the sum of every pair of elements in the subset is not divisible by a given integer K. -----Input section----- The first line contains a single integer T, denoting the number of test cases. Each of the next T blocks contains: - The first line contains two positive integers N and K, where N is the number of elements in the array. - The second line contains N space-separated positive integers representing the array elements. -----Output section----- For each test case, output the size of the largest subset of the array such that the sum of every pair of elements in the subset is not divisible by K. -----Input constraints----- 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ K ≤ 100 1 ≤ array element ≤ 1000 -----Sample Input----- 2 4 3 1 7 2 4 5 5 3 5 10 15 20 -----Sample Output----- 3 2 -----Explanation----- For the first test case: The array is [1, 7, 2, 4], and K is 3. The largest subset is {1, 7, 4}. When pairs are formed within this subset, their sums are as follows: - 1 + 7 = 8 (not divisible by 3) - 1 + 4 = 5 (not divisible by 3) - 7 + 4 = 11 (not divisible by 3) Hence, the size of this subset is 3. For the second test case: The array is [3, 5, 10, 15, 20], and K is 5. The largest subset is {3, 10} or {5, 20}. The size of the subset is 2.","solution":"def largest_non_divisible_subset_size(N, K, arr): # Create an array to count the frequency of mod results frequency = [0] * K # Fill the frequency array for num in arr: frequency[num % K] += 1 # For mod 0, we can take at most one element subset_size = min(frequency[0], 1) # Iterate from 1 to K//2 for i in range(1, (K//2) + 1): if i == K - i: # If i is exactly half of K, then we can only include one of them subset_size += min(frequency[i], 1) else: # We pick the maximum frequency from complementary pairs subset_size += max(frequency[i], frequency[K - i]) return subset_size def process_test_cases(T, test_cases): results = [] for case in test_cases: N, K, arr = case results.append(largest_non_divisible_subset_size(N, K, arr)) return results"},{"question":"Given an integer matrix `M` of size `N x N`, you need to find the maximum sum of elements in any submatrix of `M`. A submatrix of `M` is a matrix that is formed by deleting several (possibly zero) rows from the top and bottom and several (possibly zero) columns from the left and right. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N. N lines follow. For each i (1 ≤ i ≤ N), the i-th of these lines contains N space-separated integers representing the elements of the matrix M. ------ Output ------ For each test case, print a single line containing the maximum sum of elements in any submatrix of the given matrix `M`. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 300 -10^{4} ≤ M_{i, j} ≤ 10^{4} for each valid i, j ----- Sample Input 1 ------ 1 3 1 2 3 4 5 6 7 8 9 ----- Sample Output 1 ------ 45 ----- Explanation 1 ----- The whole matrix forms the submatrix with the maximum sum, which is: 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45.","solution":"def maximum_sum_submatrix(matrix): def kadane(nums): max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum N = len(matrix) max_sum = float(\'-inf\') for left in range(N): temp = [0] * N for right in range(left, N): for i in range(N): temp[i] += matrix[right][i] max_sum = max(max_sum, kadane(temp)) return max_sum def process_test_cases(test_cases): results = [] for matrix in test_cases: result = maximum_sum_submatrix(matrix) results.append(result) return results def parse_input(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) index += 1 matrix = [] for _ in range(N): matrix.append(list(map(int, lines[index].split()))) index += 1 test_cases.append(matrix) return test_cases def process_output(result): return \\"n\\".join(map(str, result))"},{"question":"You are given an array of integers which represent the number of likes each post received in a particular social media platform. Your task is to determine the maximum number of likes K posts can collectively have if no two of these posts are consecutive in the array (the platform\'s algorithm doesn\'t allow selecting consecutive posts for highlight). For example, given the array [3, 2, 5, 10, 7], the maximum number of likes you can get by selecting non-consecutive posts is 15 (by selecting the 3rd and 5th posts, which have 5 + 10 likes). Write a function which receives an array of integers and returns this maximum number of likes. -----Input----- - An array `a` of length `n`. Each element `a[i]` (0 ≤ a[i] ≤ 10^4), where `1 ≤ n ≤ 100`. -----Output----- - Print a single integer representing the maximum number of likes that can be obtained by selecting non-consecutive posts. -----Examples----- Input [3, 2, 5, 10, 7] Output 15 Input [5, 5, 10, 100, 10, 5] Output 110 Note: In the first example, the best choice is to take posts with likes 5 and 10. In the second example, the optimal choice is posts with likes 5, 100, and 5.","solution":"def max_likes(a): Returns the maximum number of likes that can be obtained by selecting non-consecutive posts. n = len(a) if n == 0: return 0 elif n == 1: return a[0] dp = [0] * n dp[0] = a[0] dp[1] = max(a[0], a[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + a[i]) return dp[-1]"},{"question":"Write a function `findOdd` that takes a list of integers and returns the one integer that appears an odd number of times. There will always be only one integer that appears an odd number of times. Example: findOdd([1, 1, 2, 2, 3, 3, 3]) # Returns: 3 findOdd([5, 4, 3, 2, 1, 5, 4, 3, 2, 10, 10]) # Returns: 1 findOdd([20, 1, 1, 2, 2, 3, 3, 5, 20]) # Returns: 5","solution":"def findOdd(lst): Returns the integer that appears an odd number of times in the list. for num in lst: if lst.count(num) % 2 != 0: return num"},{"question":"You are given a list of n tasks, each with a specific duration. You want to maximize the number of tasks you can complete within a given total duration T. Each task requires a non-negative integer amount of time and the sum of the durations of the chosen tasks should be less than or equal to T. Your task is to write a program that finds the maximum number of tasks you can complete within the given total duration T. -----Input----- The first line of input contains two integers n and T (1 le n le 10^5, 1 le T le 10^9), which are the number of tasks and the total duration respectively. The next line contains n integers d_1, d_2, ldots, d_n (1 le d_i le 10^6), which are the durations of the tasks. -----Output----- Output a single integer which is the maximum number of tasks that can be completed within the total duration T. -----Examples----- Input 5 10 1 2 3 4 5 Output 4 Input 4 15 5 5 5 5 Output 3","solution":"def max_tasks(n, T, durations): Returns the maximum number of tasks that can be completed within the given total duration. Parameters: - n: int, number of tasks. - T: int, total available duration. - durations: list of int, durations of the n tasks. Returns: - int: maximum number of tasks that can be completed within the given duration T. # Sort durations to prioritize shorter tasks first durations.sort() total_time = 0 task_count = 0 for duration in durations: if total_time + duration <= T: total_time += duration task_count += 1 else: break return task_count"},{"question":"Olivia loves symmetrical numbers very much. A symmetrical number is a number that reads the same forward and backward. For example, numbers 121, 343, and 7 are symmetrical, while 123, 450, and 10 are not. Olivia has a sequence `b` consisting of `m` integers. A contiguous subsequence of sequence `b` is a subsequence that can be derived by deleting zero or more elements from the beginning and then zero or more elements from the end of the sequence `b`, without changing the order of the remaining elements. Help Olivia find the number of contiguous symmetrical subsequences in the sequence `b`. Since the output can be large, you should print the result modulo prime number 1000000007 (10^9 + 7). Input The first line contains a single integer `m` (1 ≤ m ≤ 10^5). The next line contains `m` integers `bi` (1 ≤ bi ≤ 10^9) — the sequence `b`. Output On the single line, print a single integer — the number of contiguous symmetrical subsequences in the sequence `b` modulo prime number 1000000007 (10^9 + 7). Examples Input 5 1 2 1 2 1 Output 9 Input 3 3 4 3 Output 4 Note In the first sample, the symmetrical subsequences are: [1], [2], [1], [2], [1], [1, 2, 1], [2, 1, 2], [1, 2, 1, 2, 1], and [2, 1, 2, 1]. In the second sample, the symmetrical subsequences are: [3], [4], [3], and [3, 4, 3].","solution":"def count_symmetrical_subsequences(m, b): MOD = 1000000007 def is_symmetric(subarr): return subarr == subarr[::-1] count = 0 for i in range(m): for j in range(i, m): if is_symmetric(b[i:j+1]): count += 1 count %= MOD return count"},{"question":"AtCoDeer has found two parallelograms on his desk, each with a base of B and height H. If we consider the surface of the desk as a two-dimensional plane, the first parallelogram is aligned such that it covers the vertical range [0, H] and the horizontal range [x, x + B], and the second parallelogram covers the vertical range [H, 2H] and the horizontal range [y, y + B], as shown in the following figure: AtCoDeer wants to rotate the second parallelogram around its left bottom corner to connect it with the first parallelogram, forming a hexagon. Determine the minimum angle in degrees that the second parallelogram needs to be rotated. -----Constraints----- - All input values are integers. - 1 ≤ B ≤ 10^5 - 1 ≤ H ≤ 10^5 - 1 ≤ x, y ≤ 10^5 -----Input----- The input is given from Standard Input in the following format: B H x y -----Output----- Print the minimum angle in degrees the second parallelogram needs to be rotated. -----Sample Input----- 4 3 2 5 -----Sample Output----- 60 In this case, the second parallelogram should be rotated clockwise by 60 degrees to connect with the first parallelogram and form a hexagon.","solution":"import math def find_minimum_angle(B, H, x, y): Find the minimum angle in degrees that the second parallelogram needs to be rotated. Arguments: B -- base length of the parallelograms H -- height of the parallelograms x -- horizontal range start for the first parallelogram y -- horizontal range start for the second parallelogram Returns: angle -- minimum angle in degrees # The minimum rotation angle for forming a hexagon (two parallelograms placed adjacently) is always 60 degrees minimum_angle = 60 return minimum_angle"},{"question":"Given an array of integers nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order. Example 1: Input: nums = [-4,-1,0,3,10] Output: [0,1,9,16,100] Example 2: Input: nums = [-7,-3,2,3,11] Output: [4,9,9,49,121] Note: - The array length will be in the range [1, 10000]. - The array will be sorted in non-decreasing order. Follow up: Try to optimize your solution to have a time complexity of O(n).","solution":"def sorted_squares(nums): Given a list of integers sorted in non-decreasing order, return a list with the squares of each number sorted in non-decreasing order. n = len(nums) result = [0] * n left, right = 0, n - 1 index = n - 1 while left <= right: if abs(nums[left]) > abs(nums[right]): result[index] = nums[left] ** 2 left += 1 else: result[index] = nums[right] ** 2 right -= 1 index -= 1 return result"},{"question":"Write a function that accepts a list of integers and returns a new list containing the squares of each number in the original list, in the same order. **Example:** ``` Input: [1, 2, 3, 4, 5] Output: [1, 4, 9, 16, 25] ```","solution":"def square_list(numbers): Returns a new list containing the squares of each number in the input list. Args: numbers: List of integers. Returns: List of integers where each integer is the square of the corresponding integer from the input list. return [number ** 2 for number in numbers]"},{"question":"Given an array of integers representing the height of buildings in a row, determine how much rainwater can be trapped between the buildings after a heavy rain. The i^{th} building has a height given by heights[i]. Example 1: Input: heights = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] Output: 6 Explanation: The above array represents the following histogram: # # # # # # The total amount of rainwater trapped is 6 units. Example 2: Input: heights = [4, 2, 0, 3, 2, 5] Output: 9 Explanation: The above array represents the following histogram: # # # # # # The total amount of rainwater trapped is 9 units. Your Task: You don\'t need to read input or print anything. Your task is to complete the function trapWater() which takes an array heights representing the height of buildings as input and returns the total amount of rainwater that can be trapped between the buildings. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ heights.length ≤ 10^5 0 ≤ heights[i] ≤ 10^4","solution":"def trapWater(heights): Returns the total amount of rainwater that can be trapped between the buildings. if not heights: return 0 left, right = 0, len(heights) - 1 left_max, right_max = heights[left], heights[right] trapped_water = 0 while left < right: if heights[left] < heights[right]: left += 1 left_max = max(left_max, heights[left]) trapped_water += max(0, left_max - heights[left]) else: right -= 1 right_max = max(right_max, heights[right]) trapped_water += max(0, right_max - heights[right]) return trapped_water"},{"question":"In a certain country, there are n cities connected by m undirected roads. The authorities want to set up a new traffic system such that there is a unique shortest path between any two cities. This new system can be created by keeping some roads and removing the others. Write a program to find out the maximum number of roads that can be kept in the new traffic system. -----Input----- The first line of input contains two integers n and m (1 le n le 5000, 0 le m le 10000) — the number of cities and the number of roads. The next m lines contain pairs of integers u and v (1 le u, v le n) representing a road between city u and city v. Each road is unique. -----Output----- Print one integer — the maximum number of roads that can be kept in the new traffic system. -----Examples----- Input 6 7 1 2 1 3 3 4 3 5 4 5 4 6 5 6 Output 5 Input 5 4 1 2 2 3 3 4 4 5 Output 4 -----Note----- In the first example, you can keep the roads (1, 2), (1, 3), (3, 4), (4, 6) and (3, 5). In the second example, all roads are part of the traffic system and can remain.","solution":"def find_maximum_roads_to_keep(n, m, roads): Returns the maximum number of roads that can be kept to maintain a unique shortest path in the traffic system. from collections import defaultdict # Function to perform DFS and mark connected components def dfs(v, visited, adj_list, component): visited[v] = True component.append(v) for neighbor in adj_list[v]: if not visited[neighbor]: dfs(neighbor, visited, adj_list, component) # Step 1: Create the adjacency list from the given roads adj_list = defaultdict(list) for u, v in roads: adj_list[u].append(v) adj_list[v].append(u) # Step 2: Find connected components using DFS visited = [False] * (n + 1) components = [] for i in range(1, n + 1): if not visited[i]: component = [] dfs(i, visited, adj_list, component) components.append(component) # Step 3: Calculate the maximum number of edges that can be kept max_kept_roads = 0 for component in components: num_nodes = len(component) if num_nodes > 1: max_kept_roads += (num_nodes - 1) return max_kept_roads"},{"question":"You are working as a developer in a logistic company. Your task is to automate the process of product verification in a warehouse. Each product in the warehouse is represented by a unique integer ID. Whenever a shipment arrives, the IDs of the products in the shipment are recorded in a list. However, due to human errors, some product IDs might be recorded multiple times in the list. Your task is to identify all the products that appear more than once in the list and return them in the order of their first occurrence. If no product ID is repeated, return an empty list. Write a program that takes as input a list of product IDs and outputs a list of product IDs that are repeated, maintaining the order of their first occurrence. Input The input consists of multiple datasets. Each dataset is given in a single line and consists of product IDs (space-separated integers). The end of the input is indicated by a single line containing \\"0\\". Output For each dataset, output a list of repeated product IDs in the order of their first occurrence. If no product ID is repeated, print an empty list. Example Input 23 42 23 56 78 56 23 1 2 3 4 5 10 20 30 40 20 10 0 Output 23 56 [] 20 10","solution":"def find_repeated_product_ids(product_lists): result = [] for products in product_lists: if products == \\"0\\": break ids = list(map(int, products.split())) id_count = {} repeated_ids = [] for id in ids: if id in id_count: id_count[id] += 1 if id_count[id] == 2: repeated_ids.append(id) else: id_count[id] = 1 result.append(repeated_ids) return result"},{"question":"You have been given an array of integers where each integer represents the height of a mountain. Your task is to find the highest peak in the array. A peak is defined as an element which is strictly greater than its neighbors. An array element is considered a peak if it is: 1. Greater than the previous element (if any). 2. Greater than the next element (if any). Write a function that takes an array of integers and returns the highest peak. If there are multiple peaks with the same height, return the height of the first one encountered. -----Input----- The input will be a single line containing integers separated by spaces. The array will contain between 2 and 100 integers, each between 1 and 1000 inclusive. -----Output----- Output the height of the highest peak. -----Examples----- Sample Input 1: 1 2 3 1 5 6 4 2 Sample Output 1: 6 Sample Input 2: 10 20 15 22 21 17 16 Sample Output 2: 22","solution":"def highest_peak(arr): Returns the height of the highest peak in the array. A peak is an element that is strictly greater than its neighbors. n = len(arr) highest = -1 for i in range(n): if i == 0: # Peak condition for the first element (has only right neighbor) if arr[i] > arr[i + 1]: highest = max(highest, arr[i]) elif i == n - 1: # Peak condition for the last element (has only left neighbor) if arr[i] > arr[i - 1]: highest = max(highest, arr[i]) else: # Peak condition for elements between the first and last (has both neighbors) if arr[i] > arr[i - 1] and arr[i] > arr[i + 1]: highest = max(highest, arr[i]) return highest"},{"question":"Consider a system where you have a collection of networked computers represented as an undirected graph. Each computer and its connections have certain properties defined as follows: - Each computer is a node in the graph. - Each direct connection between two computers is an edge in the graph with a specified latency (time delay). You are given a graph with `n` nodes and `m` edges. Each node is numbered from `1` to `n`. Your task is to determine the minimum latency required to send a message from a source computer `S` to a destination computer `D`. If there\'s no path connecting `S` to `D`, return `-1`. -----Input----- - The first line contains two integers `n` and `m` (1 leq n leq 1000 , 0 leq m leq 5000), the number of nodes and edges in the graph respectively. - The next `m` lines each contain three integers `u`, `v`, and `l` (1 leq u, v leq n , 1 leq l leq 1000), representing an edge between nodes `u` and `v` with latency `l`. - The last line contains two integers `S` and `D` (1 leq S, D leq n), representing the source and destination nodes. -----Output----- Print a single integer, the minimum latency required to send the message from node `S` to node `D`. If there is no path, print `-1`. -----Examples----- Input 4 4 1 2 4 2 3 1 3 4 5 1 4 10 1 4 Output 10 Input 3 1 1 2 2 2 3 4 1 3 Output 6 Input 3 0 1 3 Output -1 -----Notes----- In the first example, there are two paths from node `1` to node `4`: 1 -> 2 -> 3 -> 4 with a total latency of 4 + 1 + 5 = 10 1 -> 4 with a latency of 10 The minimum latency is therefore 10. In the third example, there are no edges in the graph, thus no path from node `1` to node `3`, so the output is `-1`.","solution":"import heapq def minimum_latency(n, m, edges, S, D): # Create the graph as an adjacency list graph = {i: [] for i in range(1, n + 1)} for u, v, l in edges: graph[u].append((v, l)) graph[v].append((u, l)) # Dijkstra\'s algorithm to find the shortest path from S to D heap = [(0, S)] visited = set() min_latency = {i: float(\'inf\') for i in range(1, n + 1)} min_latency[S] = 0 while heap: current_latency, current_node = heapq.heappop(heap) if current_node in visited: continue visited.add(current_node) if current_node == D: return current_latency for neighbor, latency in graph[current_node]: if neighbor not in visited: new_latency = current_latency + latency if new_latency < min_latency[neighbor]: min_latency[neighbor] = new_latency heapq.heappush(heap, (new_latency, neighbor)) return -1 if min_latency[D] == float(\'inf\') else min_latency[D]"},{"question":"You are given a string S and an integer K. The task is to determine the minimum number of deletions required to make every character in the resulting string appear at least K times. If it is not possible to achieve the desired condition, return -1. Example 1: Input: S = \\"aabbcc\\", K = 2 Output: 0 Explanation: Each character appears exactly 2 times. Example 2: Input: S = \\"aaabbbcc\\", K = 2 Output: 2 Explanation: We can delete 1 \'a\' and 1 \'b\' to make every character appear exactly 2 times. Example 3: Input: S = \\"abc\\", K = 2 Output: -1 Explanation: It is impossible to have each character appear at least 2 times. Your Task: You don\'t need to read input or print anything. Complete the function minDeletions() which takes a string S and an integer K as input parameters and returns the minimum number of deletions required or -1 if it\'s not possible. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ |S| ≤ 10^5","solution":"from collections import Counter def minDeletions(S, K): Returns the minimum number of deletions required to make every character in the resulting string appear at least K times. If not possible, returns -1. if K == 0: return 0 counter = Counter(S) deletions = 0 for count in counter.values(): if count < K: return -1 deletions += count - K return deletions"},{"question":"Toyland is a small town with n houses numbered from 1 to n, and it is designed as a tree (all houses are connected with n-1 bidirectional roads without cycles). The mayor of Toyland wants to build a new playground for children and is looking for the optimal location for it. The optimal location is defined as the house (or node) in the tree that minimizes the sum of the distances from that house to all other houses. Your task is to help the mayor find such an optimal house. If there are multiple houses with the same minimum sum of distances, return the smallest numbered house among them. # Input: - The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of houses in Toyland. - The next n-1 lines contain pairs of integers u and v (1 ≤ u, v ≤ n), indicating that there is a bidirectional road between houses u and v. # Output: - Print a single integer — the number of the house which is the optimal location for the new playground. # Examples: Example 1: Input: ``` 5 1 2 1 3 3 4 3 5 ``` Output: ``` 3 ``` Example 2: Input: ``` 4 1 2 2 3 3 4 ``` Output: ``` 2 ``` # Note: In Example 1, placing the playground at house 3 minimizes the sum of distances to all other houses (1 → 2, 1 → 3, 2 → 4, 2 → 5). In Example 2, placing the playground at house 2 minimizes the sum of distances to all other houses (2 → 1, 2 → 3, 2 → 4).","solution":"def find_centroid(n, edges): from collections import defaultdict # Build the tree tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # To store the size of each subtree size = [0] * (n + 1) # Function to compute size of subtree using DFS def dfs(node, parent): size[node] = 1 for neighbor in tree[node]: if neighbor != parent: size[node] += dfs(neighbor, node) return size[node] # Find the centroid def find_centroid(node, parent, total_size): for neighbor in tree[node]: if neighbor != parent and size[neighbor] > total_size // 2: return find_centroid(neighbor, node, total_size) return node # Start DFS from any node, here node 1 dfs(1, -1) centroid = find_centroid(1, -1, n) return centroid # Example usage: def optimal_house(n, connections): edges = [tuple(map(int, con.split())) for con in connections] return find_centroid(n, edges)"},{"question":"Alice has a string s consisting of lowercase English letters. She wants to modify the string such that the string looks like a palindrome. A palindrome is a sequence that reads the same backward as forward. Help Alice convert her string to a palindrome by changing as few characters as possible. Note that any character in the string can be changed to any other character. Determine the minimum number of character alterations required to transform the string into a palindrome. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 1000), the length of the string. The second line contains a string s of length n consisting of lowercase English letters. -----Output----- Print a single integer — the minimum number of character alterations required. -----Examples----- Input 5 abcba Output 0 Input 4 abca Output 1","solution":"def min_changes_to_palindrome(n, s): This function calculates the minimum number of character alterations required to transform the string `s` into a palindrome. :param n: Length of the input string :param s: Input string consisting of lowercase English letters :return: Minimum number of character alterations required alterations = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: alterations += 1 return alterations"},{"question":"Given an integer n, print True if n is a prime number, otherwise print False. A prime number is a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers. -----Constraints----- - 1 ≤ n ≤ 1000 -----Input----- The input is given from Standard Input in the following format: n -----Output----- If n is a prime number, print True. Otherwise, print False. -----Sample Input----- 7 -----Sample Output----- True Since 7 is a prime number, print True.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise returns False. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n ** 0.5) + 1, 2): if n % i == 0: return False return True"},{"question":"Given a list of integers nums, design a class NumArray that supports two functions: update and sumRange. 1. NumArray(nums): Initializes the object with the integer array nums. 2. update(index, val): Updates the value of nums at the given index with val. 3. sumRange(left, right): Returns the sum of the elements of nums between indices left and right inclusive (0 ≤ left ≤ right < nums.length). Examples: Input: NumArray([1, 3, 5]) NumArray.sumRange(0, 2) // returns 9 (1 + 3 + 5) NumArray.update(1, 2) NumArray.sumRange(0, 2) // returns 8 (1 + 2 + 5) Note: The length of the nums array will be in the range [1, 3 * 10^4]. The values of nums[i] will be integers in the range [−100, 100]. The update and sumRange functions will be called multiple times.","solution":"class NumArray: def __init__(self, nums): self.nums = nums def update(self, index, val): self.nums[index] = val def sumRange(self, left, right): return sum(self.nums[left:right + 1])"},{"question":"Tom has a collection of strings and wants to determine the longest substring of each string that contains no repeating characters. Given a string `s` of length `n`, find the length of the longest substring without repeating characters. Implement a function `longest_substring_length(s)` that takes a string `s` and returns the length of the longest substring without repeating characters. ----Input---- The function will be called multiple times by a test function. Each input string `s` is a single word without spaces and has a length `n` (`1 le n le 10^5`). The function will be tested with various inputs where the sum of all input string lengths in a test run does not exceed `10^6`. ----Output---- Return a single integer representing the length of the longest substring without repeating characters for the given string `s`. ----Examples---- Input: \\"abcabcbb\\" Output: 3 Explanation: The answer is \\"abc\\", with the length of 3. Input: \\"bbbbb\\" Output: 1 Explanation: The answer is \\"b\\", with the length of 1. Input: \\"pwwkew\\" Output: 3 Explanation: The answer is \\"wke\\", with the length of 3. ----Notes---- Input strings will contain only lowercase English letters. Make sure your solution is optimized to handle large input sizes efficiently.","solution":"def longest_substring_length(s): Finds the length of the longest substring without repeating characters in the given string. char_index_map = {} max_length = 0 start = 0 for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i max_length = max(max_length, i - start + 1) return max_length"},{"question":"You are given a list of N integers. You need to find the maximum product of any two distinct elements from the list. Constraints 1 ≤ N ≤ 10^5 -10^4 ≤ A[i] ≤ 10^4 SAMPLE INPUT 5 1 10 2 6 5 SAMPLE OUTPUT 60","solution":"def max_product_of_two(nums): Returns the maximum product of any two distinct elements from the list. if len(nums) < 2: raise ValueError(\\"At least two elements are required\\") nums.sort() # The maximum product can be either from two largest positive numbers # or from two smallest negative numbers (consider the case where the list has negative elements) return max(nums[0] * nums[1], nums[-1] * nums[-2])"},{"question":"Given a sequence of integers, we define a subsequence as consecutive if it appears in the same order and without any gaps in the original sequence. For example, in the sequence [1, 2, 3, 4], both [2, 3] and [1, 2, 3] are consecutive subsequences, while [1, 3] is not. Write a program that, given a list of integers, checks whether there exists a consecutive subsequence that satisfies the following properties: - The subsequence has length exactly `m`. - The sum of the subsequence\'s elements is exactly `s`. The program should read the input, perform the necessary checks, and print \\"Yes\\" if such a subsequence exists, and \\"No\\" otherwise. -----Input----- The first line contains three integers `n`, `m`, and `s` (1 leq n, m leq 10^5 and |s| leq 10^9), where `n` is the length of the list, `m` is the length of the subsequence to find, and `s` is the target sum for the subsequence. The second line contains `n` integers that make up the sequence (-10^4 leq a_i leq 10^4). -----Output----- Print \\"Yes\\" if a consecutive subsequence of length `m` with sum `s` exists, and \\"No\\" otherwise. -----Example----- Input 6 3 6 1 2 3 2 1 2 Output Yes Input 5 2 8 1 2 3 4 5 Output No -----Note----- In the first example, the subsequence [3, 2, 1] of length 3 has a sum of 6. Thus, the output is \\"Yes\\". In the second example, there is no subsequence of length 2 that sums up to 8. Thus, the output is \\"No\\".","solution":"def has_consecutive_subsequence_with_sum(n, m, s, sequence): Returns \\"Yes\\" if there exists a consecutive subsequence of length `m` in the given `sequence` which sums up to `s`, otherwise returns \\"No\\". if m > n: return \\"No\\" current_sum = sum(sequence[:m]) if current_sum == s: return \\"Yes\\" for i in range(m, n): current_sum += sequence[i] - sequence[i - m] if current_sum == s: return \\"Yes\\" return \\"No\\""},{"question":"You\'re given an array of integers representing the number of employees in each department of a company. Your task is to determine if it\'s possible to partition the departments into two groups such that the sum of the employees in each group is equal. For example, if the array is [2, 6, 4, 8], you can\'t partition it into two groups with equal sums. But if the array is [1, 5, 11, 5], you can partition it into two groups [1, 5, 5] and [11]. Input - The input consists of multiple test cases. - The first line contains an integer T (1 ≤ T ≤ 100), the number of test cases. - For each test case, the first line contains an integer N (1 ≤ N ≤ 20), the number of departments. - The next line contains N integers ai (1 ≤ ai ≤ 50), representing the number of employees in each department. Output - For each test case, print \\"YES\\" if it\'s possible to partition the departments into two groups with equal sum, otherwise print \\"NO\\". Example Input 3 4 1 5 11 5 4 1 2 3 5 3 3 1 5 Output YES NO NO","solution":"def can_partition_to_equal_sum(groups): total_sum = sum(groups) # If the total sum is odd, it\'s not possible to partition it into two equal sums if total_sum % 2 != 0: return \\"NO\\" target = total_sum // 2 n = len(groups) # Dynamic programming approach to check if we can form a subset with the target sum dp = [False] * (target + 1) dp[0] = True for num in groups: for i in range(target, num - 1, -1): if dp[i - num]: dp[i] = True return \\"YES\\" if dp[target] else \\"NO\\" def process_test_cases(test_cases): results = [] for case in test_cases: n, departments = case results.append(can_partition_to_equal_sum(departments)) return results"},{"question":"A local bakery offers a special service to its customers, where they will deliver an order based on a sequence of characters. Each character corresponds to a specific item on the bakery\'s menu. The bakery\'s menu is as follows: A - Apple Pie B - Banana Bread C - Carrot Cake D - Doughnut E - Eclair The customers provide their order as a string of characters. Your task is to write a function that takes in the string of characters and returns the corresponding list of items from the bakery\'s menu. -----Input----- The input consists of a single line containing the order string. -----Output----- The output should be a list of items corresponding to the characters in the order string. -----Example----- Input: ABCD Output: [\'Apple Pie\', \'Banana Bread\', \'Carrot Cake\', \'Doughnut\']","solution":"def process_order(order): Translates a string of characters into the corresponding list of bakery items. Parameters: order (str): A string where each character represents a bakery item. Returns: list: A list of bakery items corresponding to the characters in the order string. menu = { \'A\': \'Apple Pie\', \'B\': \'Banana Bread\', \'C\': \'Carrot Cake\', \'D\': \'Doughnut\', \'E\': \'Eclair\' } return [menu[char] for char in order if char in menu]"},{"question":"A factory has a grid-shaped warehouse consisting of M rows and N columns. Each cell in the grid can either be empty or contain a shelf. A robot is used to move around the warehouse to transport items. The robot can only move horizontally or vertically and can only move from an empty cell to an adjacent empty cell. The robot starts at the top-left corner of the grid (1, 1) and needs to reach the bottom-right corner of the grid (M, N). Determine if the robot can reach the destination, and if so, find and print the length of the shortest path in terms of the number of cells traversed. If the robot cannot reach the destination, output -1. -----Input----- The first line of input contains two integers M and N — the number of rows and columns in the warehouse. The next M lines each contain N characters that describe the grid. A cell is marked with \'.\' if it is empty and \'#\' if it contains a shelf. -----Output----- Output the length of the shortest path from the top-left corner to the bottom-right corner as a single integer. If the destination is unreachable, output -1. -----Constraints----- - 2 ≤ M, N ≤ 1000 -----Example----- Input: 5 5 . . . # . . # . . . . . # # . . . . . # . # . . . Output: 9 Explanation: The shortest path is from (1,1) -> (2,1) -> (3,1) -> (3,2) -> (4,2) -> (4,3) -> (4,4) -> (5,4) -> (5,5), which is a total of 9 cells.","solution":"from collections import deque def shortest_path_through_warehouse(M, N, grid): # Direction vectors for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Function to check if a cell is within grid boundaries and is empty def is_valid(x, y): return 0 <= x < M and 0 <= y < N and grid[x][y] == \'.\' # BFS Initialization queue = deque([(0, 0)]) visited = set((0, 0)) distance = [[-1] * N for _ in range(M)] distance[0][0] = 1 while queue: x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) distance[nx][ny] = distance[x][y] + 1 if nx == M - 1 and ny == N - 1: return distance[nx][ny] return -1 # Example case input M, N = 5, 5 grid = [ [\'.\', \'.\', \'.\', \'#\', \'.\'], [\'.\', \'#\', \'.\', \'.\', \'.\'], [\'.\', \'.\', \'#\', \'#\', \'.\'], [\'.\', \'.\', \'.\', \'.\', \'#\'], [\'.\', \'#\', \'.\', \'.\', \'.\'] ] print(shortest_path_through_warehouse(M, N, grid)) # Output should be 9"},{"question":"Given a string `s` consisting of characters \'x\' and \'y\' only, your task is to make the string balanced. A string is considered balanced if the number of \'x\' characters is equal to the number of \'y\' characters. In one move, you can remove any one character from the string. Write a function `min_moves_to_balance` to determine the minimum number of moves required to make the string balanced. Function Signature ```python def min_moves_to_balance(s: str) -> int: pass ``` Input - A single string `s` of length `1` to `10^5` containing only \'x\' and \'y\'. Output - An integer representing the minimum number of moves required to balance the string. Example ```python assert min_moves_to_balance(\\"xxyy\\") == 0 assert min_moves_to_balance(\\"xxxxy\\") == 3 assert min_moves_to_balance(\\"xxyyyy\\") == 2 ``` Explanation In the first example, the string \\"xxyy\\" is already balanced, so no moves are required. In the second example, the string \\"xxxxy\\" can be balanced by removing three \'x\' characters to make the string \\"xy\\". In the third example, the string \\"xxyyyy\\" can be balanced by removing two \'y\' characters to make the string \\"xxyy\\".","solution":"def min_moves_to_balance(s: str) -> int: Returns the minimum number of moves required to make the string balanced. count_x = s.count(\'x\') count_y = s.count(\'y\') return abs(count_x - count_y)"},{"question":"In a distant magical land, there exists a special type of tree called the \\"Enchanted Fibonacci Tree.\\" Each node in this tree contains a number, and the value of each node follows the Fibonacci sequence. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, F(n) = F(n-1) + F(n-2) for n ≥ 2. Given a positive integer N, your task is to find the sum of all the node values in the Enchanted Fibonacci Tree that contains nodes with values up to the Nth Fibonacci number. -----Input----- A single integer N (0 ≤ N ≤ 45), indicating the highest Fibonacci number to consider. -----Output----- Print a single integer — the sum of all Fibonacci numbers from F(0) to F(N). -----Examples----- Input 5 Output 12 Input 10 Output 143 -----Note----- In the first test sample, the Fibonacci sequence up to the 5th number is: 0, 1, 1, 2, 3, 5. The sum is: 0 + 1 + 1 + 2 + 3 + 5 = 12. In the second test sample, the Fibonacci sequence up to the 10th number is: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55. The sum is: 0 + 1 + 1 + 2 + 3 + 5 + 8 + 13 + 21 + 34 + 55 = 143.","solution":"def sum_fibonacci(N): Returns the sum of the first N Fibonacci numbers. if N < 0: return 0 if N == 0: return 0 if N == 1: return 1 fib = [0, 1] sum_fib = 1 for i in range(2, N + 1): next_fib = fib[-1] + fib[-2] fib.append(next_fib) sum_fib += next_fib return sum_fib"},{"question":"Annie has an array `a_1, a_2, ..., a_n` consisting of `n` non-negative integers. She has to perform `q` queries of the following types: * `1 i y`: Update the `i`-th element to value `y`, i.e., perform an operation `a[i] = y`. * `2 l r`: Compute and report the number of distinct integers in the subarray from index `l` to `r` (inclusive). Given the array and the sequence of queries, can you help Annie perform all of her queries? **Input:** The first line contains two integers `n` and `q` (1 ≤ n, q ≤ 10^5) - the size of the array and the number of queries. The second line contains `n` integers `a_1, a_2, ..., a_n` (0 ≤ a_i < 10^9) - the elements of the array. The following `q` lines each describe a query in one of the following formats: * `1 i y` (1 ≤ i ≤ n, 0 ≤ y < 10^9), meaning to update the `i`-th element to `y`. * `2 l r` (1 ≤ l ≤ r ≤ n), meaning to count the number of distinct integers in the subarray from `l` to `r`. **Output:** For each query of type `2`, print the number of distinct integers in the subarray from `l` to `r`. **Examples:** **Input:** ``` 5 5 2 3 2 4 3 2 1 5 1 3 5 2 1 5 2 2 4 1 2 3 ``` **Output:** ``` 3 4 3 ``` **Explanation:** 1. The distinct elements in the subarray `[2, 3, 2, 4, 3]` are {2, 3, 4} - 3 distinct elements. 2. After updating the 3rd element to 5, the array becomes `[2, 3, 5, 4, 3]`. 3. The distinct elements in the updated subarray `[2, 3, 5, 4, 3]` are {2, 3, 4, 5} - 4 distinct elements. 4. In the subarray `[3, 5, 4]`, the distinct elements are {3, 4, 5} - 3 distinct elements. 5. Updating the 2nd element to 3 leaves the array unchanged. **Note:** Handling large inputs efficiently is key, particularly for counting distinct elements in a given range after various updates. Consider efficient data structures and algorithms to solve this problem within the constraints.","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [set() for _ in range(2 * self.n)] # Fill leaves for i in range(self.n): self.tree[self.n + i].add(data[i]) # Build the tree by calculating parents for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[2 * i] | self.tree[2 * i + 1] def update(self, pos, value): pos += self.n self.tree[pos] = {value} while pos > 1: pos //= 2 self.tree[pos] = self.tree[2 * pos] | self.tree[2 * pos + 1] def query(self, l, r): res = set() l += self.n r += self.n + 1 while l < r: if l % 2 == 1: res |= self.tree[l] l += 1 if r % 2 == 1: r -= 1 res |= self.tree[r] l //= 2 r //= 2 return len(res) # Parse input def process_queries(n, q, array, queries): seg_tree = SegmentTree(array) result = [] for query in queries: t, x, y = query if t == 1: seg_tree.update(x - 1, y) elif t == 2: num_distinct = seg_tree.query(x - 1, y - 1) result.append(num_distinct) return result"},{"question":"Given an array of integers, you need to implement a function that finds the longest contiguous subarray such that all elements in the subarray are unique. The function should return the length of this subarray. # Input - An array of integers. The length of the array will be in the range `[1, 10^5]` and each integer will be between `[-10^9, 10^9]` (both inclusive). # Output - An integer representing the length of the longest contiguous subarray with all unique elements. # Example ```python def longest_unique_subarray(arr): # Your implementation here # Example 1: arr1 = [5, 1, 3, 5, 2, 3, 4, 1] output1 = longest_unique_subarray(arr1) print(output1) # Output: 5 # The longest subarray is [5, 1, 3, 2, 4] # Example 2: arr2 = [2, 2, 2, 2, 2] output2 = longest_unique_subarray(arr2) print(output2) # Output: 1 # The longest subarray is [2] # Example 3: arr3 = [] output3 = longest_unique_subarray(arr3) print(output3) # Output: 0 # As the array is empty, the length is 0 # Example 4: arr4 = [1, 2, 3, 4, 5] output4 = longest_unique_subarray(arr4) print(output4) # Output: 5 # The longest subarray is the whole array [1, 2, 3, 4, 5] ``` # Note - You should aim to implement the function with a time complexity of `O(n)` where `n` is the length of the array. - You can assume the input array is not empty and contains at least one element.","solution":"def longest_unique_subarray(arr): Find the length of the longest contiguous subarray with all unique elements. Parameters: arr (list): List of integers Returns: int: The length of the longest subarray with unique elements n = len(arr) if n == 0: return 0 # Dictionary to store the last seen index of each element last_seen = {} max_len = 0 start = 0 for end in range(n): if arr[end] in last_seen: start = max(start, last_seen[arr[end]] + 1) last_seen[arr[end]] = end max_len = max(max_len, end - start + 1) return max_len"},{"question":"Given an array of n integers, A, a peak element is an element that is strictly greater than its neighbors. An array element at index i is considered a peak if: - A[i] > A[i-1], for 1 ≤ i ≤ n-2 - A[i] > A[i+1], for 1 ≤ i ≤ n-2 The first and last element of the array can also be considered peaks if they are greater than their single neighbor: - A[0] if A[0] > A[1] - A[n-1] if A[n-1] > A[n-2] Write a function to find a peak element in the array. If the array contains multiple peaks, return the index of any one of the peak elements. You may assume that the array contains at least one peak element. Function Signature: ```python def find_peak_element(A: List[int]) -> int: ``` # Input - `A` (List of integers): The input array of length n (1 ≤ n ≤ 1000 and all elements are unique) # Output - Return an integer which is the index of one of the peak elements. # Constraints - Length of the array will be between 1 and 1000. - The elements of the array are unique. # Example Input ``` A = [1, 2, 3, 4, 5, 6, 4] ``` Output ``` 5 ``` Input ``` A = [5, 10, 9, 8, 7, 6, 2, 11] ``` Output ``` 1 ``` Input ``` A = [1] ``` Output ``` 0 ``` # Note In the first example, A = [1, 2, 3, 4, 5, 6, 4], the element at index 5, which is 6, is a peak element as it is greater than its neighbors A[4] which is 5 and A[6] which is 4. In the second example, A = [5, 10, 9, 8, 7, 6, 2, 11], the element at index 1, which is 10, is a peak element as it is greater than its neighbor A[0] which is 5 and A[2] which is 9. In the third example, A = [1], the single element in the array is considered a peak element. The output is index 0.","solution":"from typing import List def find_peak_element(A: List[int]) -> int: n = len(A) if n == 1: return 0 if A[0] > A[1]: return 0 if A[n-1] > A[n-2]: return n-1 left, right = 1, n - 2 while left <= right: mid = (left + right) // 2 if A[mid] > A[mid - 1] and A[mid] > A[mid + 1]: return mid elif A[mid - 1] > A[mid]: right = mid - 1 else: left = mid + 1 return -1 # This return statement will never be reached if input constraints are followed."},{"question":"Mark purchased some books and needs to fit them on his bookshelf. The bookshelf has ( N ) sections, and each section can hold a certain maximum weight. Mark has ( M ) books, each with a certain weight. He wants to distribute all the books in such a way that the total weight in every section of the shelf does not exceed the section\'s maximum weight and the books are evenly distributed as much as possible. Each of the ( N ) sections can have a different weight limit, and Mark needs your help to figure out the best way to distribute the books. If it is not possible to distribute all books without exceeding any section\'s limit, print `Impossible`. Otherwise, provide one such distribution where the distribution of books is balanced as much as possible. Input format: - The first line contains two integers ( N ) and ( M ) representing the number of sections and the number of books respectively. - The second line contains ( N ) integers ( S_1, S_2, ldots, S_N ) representing the maximum weight each section can hold. - The third line contains ( M ) integers ( B_1, B_2, ldots, B_M ) representing the weight of each book. Output format: - If it is impossible to distribute all books without exceeding any section\'s weight limit, print `Impossible`. - Otherwise, print ( N ) lines, each line containing a space-separated list of the books (represented by their weights) assigned to that section. Constraints: - ( 1 leq N, M leq 100,000 ) - ( 1 leq S_i, B_i leq 100,000,000 ) for all ( 1 leq i leq N ) and ( 1 leq i leq M ) Example: Input: ``` 3 5 10 20 30 5 9 6 8 7 ``` Output: ``` [5 6] [9] [8 7] ```","solution":"def distribute_books(N, M, section_weights, book_weights): # Sort sections by their max weights sections = sorted([(i, max_weight) for i, max_weight in enumerate(section_weights)], key=lambda x: x[1]) # Sort books by their weights sorted_books = sorted(book_weights, reverse=True) # Result array to store books assigned to each section result = [[] for _ in range(N)] remaining_capacity = [section_weights[i] for i in range(N)] # Try to place each book for book in sorted_books: for idx in range(N): if remaining_capacity[idx] >= book: # Place the book in the section result[idx].append(book) remaining_capacity[idx] -= book break else: # If we can\'t place this book in any section return \\"Impossible\\" return result"},{"question":"George is a passionate gardener and he is planning to organize a series of flower beds in his garden. Each flower bed is represented as a segment on a number line from point a to point b (0 leq a < b leq 1000). George wants to ensure that no two flower beds overlap. Given a list of flower beds he has already planned, he now wants to add a new flower bed. Can you design a program that checks if the new flower bed overlaps with any of the existing flower beds? A flower bed overlaps with another if they share at least one common point. For example, if George already has flower beds defined by the intervals [1, 3], [5, 8], and [12, 15], and he wants to add a new flower bed [3, 6], it will overlap with [5, 8]. -----Input----- The input consists of two parts: 1. The first part contains an integer n (1 leq n leq 100) — the number of existing flower beds. 2. The next n lines each contain two integers a and b (0 leq a < b leq 1000) — representing the intervals of the existing flower beds. 3. The last line contains two integers a_{new} and b_{new} (0 leq a_{new} < b_{new} leq 1000) — representing the interval of the new flower bed. -----Output----- Output \\"Yes\\" if the new flower bed overlaps with any of the existing flower beds. Otherwise, output \\"No\\". -----Example----- Input 3 1 3 5 8 12 15 3 6 Output Yes Input 2 2 4 10 14 5 9 Output No -----Note----- In the first example, the new flower bed [3, 6] overlaps with the existing flower bed [5, 8]. Therefore, the output is \\"Yes\\". In the second example, the new flower bed [5, 9] does not overlap with any of the existing flower beds [2, 4] and [10, 14]. Therefore, the output is \\"No\\".","solution":"def check_overlap(existing_beds, new_bed): a_new, b_new = new_bed for a, b in existing_beds: if a < b_new and a_new < b: return \\"Yes\\" return \\"No\\""},{"question":"You are given an array of integers and a set of operations. Each operation will reverse the subarray between two given indices. You need to determine the number of inversions in the array after performing all the given operations. An inversion is a pair of indices (i, j) such that i < j and arr[i] > arr[j]. Input The first line contains two integers n (1 ≤ n ≤ 10^5) and q (1 ≤ q ≤ 10^5) — the size of the array and the number of operations, respectively. The second line contains n integers a_1,…,a_n (1 ≤ a_i ≤ 10^9) — the elements of the array. The next q lines describe the operations. Each of these lines contains two integers l and r (1 ≤ l ≤ r ≤ n), which denote the endpoints of the subarray to be reversed. Output Print a single integer — the number of inversions in the array after performing all the given operations. Examples Input 5 3 6 3 9 1 7 1 3 2 4 1 5 Output 5 Input 4 2 10 20 30 40 1 4 1 4 Output 0","solution":"def count_inversions(arr): Function to count number of inversions in the array. n = len(arr) temp_arr = [0] * n return merge_sort(arr, temp_arr, 0, n - 1) def merge_sort(arr, temp_arr, left, right): Function to sort the array and count inversions. inv_count = 0 if left < right: mid = (left + right)//2 inv_count += merge_sort(arr, temp_arr, left, mid) inv_count += merge_sort(arr, temp_arr, mid + 1, right) inv_count += merge(arr, temp_arr, left, mid, right) return inv_count def merge(arr, temp_arr, left, mid, right): Function to merge two halves and count inversions. i = left # Starting index for left subarray j = mid + 1 # Starting index for right subarray k = left # Starting index to be sorted inv_count = 0 while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: temp_arr[k] = arr[j] inv_count += (mid - i + 1) j += 1 k += 1 while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count def reverse_subarray(arr, l, r): Function to reverse the subarray from index l to r (inclusive). arr[l:r+1] = arr[l:r+1][::-1] def number_of_inversions(n, q, arr, operations): for op in operations: l, r = op reverse_subarray(arr, l-1, r-1) return count_inversions(arr) # Example of input n = 5 q = 3 arr = [6, 3, 9, 1, 7] operations = [(1, 3), (2, 4), (1, 5)] print(number_of_inversions(n, q, arr, operations)) # Output: 5"},{"question":"Write a function that takes a string and a list of words, and returns a Boolean indicating whether the string can be segmented into a space-separated sequence of one or more dictionary words from the list. # Explanation ```python wordBreak(\\"leetcode\\", [\\"leet\\", \\"code\\"]) => True # Explanation: The string can be segmented as \\"leet code\\". wordBreak(\\"applepenapple\\", [\\"apple\\", \\"pen\\"]) => True # Explanation: The string can be segmented as \\"apple pen apple\\". wordBreak(\\"catsandog\\", [\\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\"]) => False # Explanation: The string cannot be segmented into a sequence of one or more dictionary words. ``` **Note:** The same word in the dictionary may be reused multiple times in the segmentation. You may assume the dictionary does not contain duplicate words. # Examples ```python wordBreak(\\"pineapplepenapple\\", [\\"apple\\", \\"pen\\", \\"applepen\\", \\"pine\\", \\"pineapple\\"]) => True wordBreak(\\"catsandog\\", [\\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\"]) => False ```","solution":"def wordBreak(s, wordDict): Determines if a string can be segmented into a sequence of one or more dictionary words. :param s: A string to be segmented into words from wordDict. :param wordDict: A list of words considered as the dictionary. :return: Boolean indicating if the string can be segmented into dictionary words. word_set = set(wordDict) dp = [False] * (len(s) + 1) dp[0] = True for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return dp[len(s)]"},{"question":"In a world where technology advancements are at the forefront of daily operations, security become paramount. One of the frequently used methods to ensure data integrity and security is through hashing. A hashing function takes an input (or message) and returns a fixed-size string of bytes. The output is typically a \'digest\' that is unique to the given input. When two different inputs are hashed to the same output, this is known as a collision. Your task is to determine the likelihood of a collision occurring in a simplified hash function model. Consider a simplified hash function model where the hash value is simply the sum of the ASCII values of the characters in the string, taken modulo m. More formally, the hash function (h(s)) of a string (s) with length (L) is defined as: [ h(s) = left( sum_{i=0}^{L-1} text{ord}(s_i) right) mod m ] where (text{ord}(s_i)) is the ASCII value of the (i)-th character in the string (s). Given a list of n strings and an integer value m, your job is to determine if there is any collision among the hashes of these strings. -----Input----- The first line of input contains an integer n (1 leq n leq 1000), the number of strings. The second line contains the integer m (1 leq m leq 100). This is followed by n lines, each containing a single string consisting of ASCII characters (each string has a length between 1 and 100, inclusive). -----Output----- Output a single line with the word `YES` if there is a collision (i.e., if two different strings produce the same hash value). Otherwise, output `NO`. -----Examples----- Sample Input 1: 5 10 hello world hola amigo hola Sample Output 1: YES Sample Input 2: 3 7 abc def ghi Sample Output 2: NO","solution":"def check_hash_collisions(n, m, strings): Checks if there are any collisions in the hash values of the given list of strings. Parameters: n (int): number of strings m (int): modulo value for hashing strings (List[str]): list of strings to hash Returns: str: \'YES\' if there is a collision, otherwise \'NO\' def hash_function(s, m): return sum(ord(char) for char in s) % m hash_values = set() for string in strings: hash_val = hash_function(string, m) if hash_val in hash_values: return \\"YES\\" hash_values.add(hash_val) return \\"NO\\""},{"question":"Implement a function called `decode_morse` that decodes a given string of Morse code. The encoded message will consist of words separated by a space (\' \') and letters separated by three spaces (\' \'). The Morse code letters themselves are separated by a single space (\' \'). The function should return the decoded message as a string where words are separated by a single space. The Morse code table is as follows: ```python { \'.-\': \'A\', \'-...\': \'B\', \'-.-.\': \'C\', \'-..\': \'D\', \'.\': \'E\', \'..-.\': \'F\', \'--.\': \'G\', \'....\': \'H\', \'..\': \'I\', \'.---\': \'J\', \'-.-\': \'K\', \'.-..\': \'L\', \'--\': \'M\', \'-.\': \'N\', \'---\': \'O\', \'.--.\': \'P\', \'--.-\': \'Q\', \'.-.\': \'R\', \'...\': \'S\', \'-\': \'T\', \'..-\': \'U\', \'...-\': \'V\', \'.--\': \'W\', \'-..-\': \'X\', \'-.--\': \'Y\', \'--..\': \'Z\', \'.----\': \'1\', \'..---\': \'2\', \'...--\': \'3\', \'....-\': \'4\', \'.....\': \'5\', \'-....\': \'6\', \'--...\': \'7\', \'---..\': \'8\', \'----.\': \'9\', \'-----\': \'0\' } ``` Examples: ```python decode_morse(\'.... . .-.. .-.. ---\'); # \'HELLO\' decode_morse(\'.... . .-.. .-.. ---\'); # \'HE LLO\' decode_morse(\'.- -... -.-.\'); # \'ABC\' ``` The function should be case-insensitive to Morse code letters.","solution":"def decode_morse(morse_code): Decodes a given string of Morse code into a readable message. morse_table = { \'.-\': \'A\', \'-...\': \'B\', \'-.-.\': \'C\', \'-..\': \'D\', \'.\': \'E\', \'..-.\': \'F\', \'--.\': \'G\', \'....\': \'H\', \'..\': \'I\', \'.---\': \'J\', \'-.-\': \'K\', \'.-..\': \'L\', \'--\': \'M\', \'-.\': \'N\', \'---\': \'O\', \'.--.\': \'P\', \'--.-\': \'Q\', \'.-.\': \'R\', \'...\': \'S\', \'-\': \'T\', \'..-\': \'U\', \'...-\': \'V\', \'.--\': \'W\', \'-..-\': \'X\', \'-.--\': \'Y\', \'--..\': \'Z\', \'.----\': \'1\', \'..---\': \'2\', \'...--\': \'3\', \'....-\': \'4\', \'.....\': \'5\', \'-....\': \'6\', \'--...\': \'7\', \'---..\': \'8\', \'----.\': \'9\', \'-----\': \'0\' } # Split words by three spaces words = morse_code.split(\' \') decoded_message = [] for word in words: letters = word.split(\' \') decoded_word = \'\'.join([morse_table[letter] for letter in letters if letter in morse_table]) decoded_message.append(decoded_word) return \' \'.join(decoded_message)"},{"question":"In a magical kingdom, there exists a special type of garden known as the \\"color garden\\". The garden is organized as a grid of size `n x n` where each cell contains a colored plant. The color of each plant is represented by an integer from 1 to k (1 ≤ k ≤ n). The gardeners have a peculiar way of arranging their gardens to ensure the best growth conditions: each row and each column should contain exactly one plant of each color. However, a mischievous wizard cast a spell on the garden, and some plants have changed color. You, as the chief gardener, must restore the garden to its optimal condition—making sure that each row and each column contains exactly one plant of each color. Write a program to find out whether it is possible to restore the garden, and if so, provide one valid arrangement. Input The first line contains a single integer n (1 ≤ n ≤ 30) representing the size of the garden. The following n lines each contain n integers describing the colors of the plants in the garden after the wizard\'s spell. Each integer is between 0 and k, where 0 represents an empty cell that needs to be filled, and numbers from 1 to k represent the plant colors. It is guaranteed that the garden was originally valid before the spell, and thus it will always be possible to restore the garden. Output If it is possible to restore the garden, print \\"YES\\" on the first line. Following this, print n lines, each containing n integers, describing one possible valid arrangement of the garden where each row and each column contains exactly one plant of each color. If it is not possible (although the problem guarantees that it will always be possible), print \\"NO\\". Example Input 4 1 2 0 4 0 4 3 0 4 0 0 2 0 3 2 0 Output YES 1 2 3 4 3 4 2 1 4 1 1 2 2 3 4 1 Note In the given example, the \'0\' represents an empty cell that we need to fill with the appropriate plant color to ensure each row and column contains exactly one of each color (1 to 4).","solution":"def restore_garden(n, garden): import itertools def is_valid(garden): for row in garden: if len(set(row)) != n: return False for col in zip(*garden): if len(set(col)) != n: return False return True def dfs(r): if r == n: return is_valid(garden) colors = set(range(1, n + 1)) for c in range(n): if garden[r][c] != 0: if garden[r][c] in colors: colors.remove(garden[r][c]) else: return False for perm in itertools.permutations(colors): original_row = garden[r][:] idx = 0 for c in range(n): if garden[r][c] == 0: garden[r][c] = perm[idx] idx += 1 if dfs(r + 1): return True garden[r] = original_row return False if dfs(0): print(\\"YES\\") for row in garden: print(\' \'.join(map(str, row))) else: print(\\"NO\\")"},{"question":"Alice has a collection of n books, each with a certain number of pages. She wants to read all these books over a series of days, starting from book 1. Every day, she reads a fixed number of pages p, and she reads continuously through the books until she completes them all. If she finishes one book on a certain day, she will immediately start reading the next book on the same day. Your task is to determine, for each book, how many days are required to complete that book starting from day 1. -----Input----- The first line contains the integers n and p (1 ≤ n ≤ 100, 1 ≤ p ≤ 1000) — the number of books and the number of pages Alice reads per day. The second line contains the sequence of integers b_1, b_2, ..., b_{n} (1 ≤ b_{i} ≤ 10^5), where b_{i} is the number of pages in the i-th book. -----Output----- Print n integers, where the i-th integer represents the number of days required to complete the i-th book if Alice starts reading from day 1. -----Examples----- Input 3 5 12 10 8 Output 3 2 2 Input 5 10 15 20 10 5 30 Output 2 2 1 1 3 -----Note----- In the first test, Alice reads 5 pages each day. The first book has 12 pages, which takes 3 days to complete (5 pages on day 1, 5 pages on day 2, and 2 pages on day 3). The second book has 10 pages, which she starts on day 4 and finishes on day 5 (5 pages on day 4, 5 pages on day 5). The third book has 8 pages, which she starts on day 6 and finishes on day 7 (5 pages on day 6, 3 pages on day 7).","solution":"def days_to_finish_books(n, p, pages): Determines the number of days required to complete each book. Parameters: n (int): Number of books. p (int): Pages read per day. pages (list of int): List with the number of pages in each book. Returns: list of int: A list with the number of days required to complete each book. days = [] for book_pages in pages: days.append((book_pages + p - 1) // p) # Ceiling division operation return days"},{"question":"# Task: Write a function `sequence_sum` that takes two integers `start` and `end` as arguments and returns the sum of the sequence of numbers from `start` to `end`, inclusive. If `start` is greater than `end`, the function should return 0. # Examples: `sequence_sum(1, 5)`: 15 Explanation: 1 + 2 + 3 + 4 + 5 = 15 `sequence_sum(3, 7)`: 25 Explanation: 3 + 4 + 5 + 6 + 7 = 25 `sequence_sum(10, 10)`: 10 Explanation: Only one number in the range, i.e., 10 `sequence_sum(8, 3)`: 0 Explanation: Start is greater than end, so return 0","solution":"def sequence_sum(start, end): Returns the sum of the sequence from `start` to `end` inclusive. If `start` is greater than `end`, returns 0. if start > end: return 0 return sum(range(start, end + 1))"},{"question":"A company wants to analyze their customer interaction data and has collected timestamps of events. Your task is to calculate the total amount of time each customer spent in interaction for a given list of events. Each event is represented by a tuple `(customer_id, event_type, timestamp)`. There are two types of events: \\"start\\" and \\"end\\". The \\"start\\" event indicates the beginning of an interaction, and the \\"end\\" event marks its conclusion. You need to sum up all the interaction times for each customer. Write a function `calculate_interaction_times(events)` that takes a list of events and returns a dictionary where the keys are customer IDs and the values are the total interaction times (in seconds) for each customer. Assume: - All timestamps are in seconds since the epoch. - Each \\"start\\" event will have a matching \\"end\\" event before any new \\"start\\" event for the same customer. For example: ```python events = [ (1, \\"start\\", 100), (2, \\"start\\", 150), (1, \\"end\\", 200), (1, \\"start\\", 300), (1, \\"end\\", 400), (2, \\"end\\", 250) ] calculate_interaction_times(events) # Returns {1: 200, 2: 100} ``` In this example: - Customer 1 started interacting at 100 seconds and ended at 200 seconds (duration 100 seconds), then started again at 300 seconds and ended at 400 seconds (another 100 seconds). Total interaction time is 200 seconds. - Customer 2 started interacting at 150 seconds and ended at 250 seconds. Total interaction time is 100 seconds.","solution":"def calculate_interaction_times(events): Calculate the total interaction times for each customer from the given list of events. Parameters: - events: list of tuples (customer_id, event_type, timestamp) Returns: - dict: customer_id to total interaction time in seconds interaction_times = {} start_times = {} for event in events: customer_id, event_type, timestamp = event if event_type == \\"start\\": start_times[customer_id] = timestamp elif event_type == \\"end\\": if customer_id in start_times: duration = timestamp - start_times.pop(customer_id) if customer_id in interaction_times: interaction_times[customer_id] += duration else: interaction_times[customer_id] = duration return interaction_times"},{"question":"Given a list of video game prices over a certain number of days, a talented gamer named Alex wants to determine the maximum profit possible from buying and selling one video game. However, Alex can only make one buy and one sell transaction. The buy transaction must occur before the sell transaction. Write a program to help Alex find out the maximum possible profit. -----Input----- The input consists of a single test case. The first line contains an integer n (1 leq n leq 100000), indicating the number of days. The next line contains n space-separated integers where each integer is the price of the video game on that day (1 leq price leq 100000). -----Output----- Output a single integer, which is the maximum profit Alex can achieve. If no profit can be made, return 0. -----Examples----- Sample Input 1: 6 7 1 5 3 6 4 Sample Output 1: 5 Sample Input 2: 5 7 6 4 3 1 Sample Output 2: 0","solution":"def max_profit(prices): if not prices or len(prices) < 2: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Consider a group of coders who are all working on a project together. Among them, there are some who are invited to a special meeting. Each coder has an ID number, and the IDs of those invited to the meeting are stored in a list. A problem arises when one ID badge goes missing during the registration. You need to identify the missing ID by comparing the list of invited IDs against the list of IDs that were successfully registered. Write a function to determine the ID of the coder who is missing from the registration. -----Input----- - The first line contains a single integer n (2 le n le 10^5) which represents the number of coders invited. - The second line contains n integers which represent the list of invited coders. - The third line contains n-1 integers which represents the list of registered coders. All IDs are unique and within the range of 1 to 10^5. -----Output----- - Output a single integer which represents the ID of the coder who did not register. -----Example----- Input 5 1 2 3 4 5 2 1 4 5 Output 3 Note: In this example, the coder with ID 3 did not register, as it is the missing number from the registration list.","solution":"def find_missing_id(invited, registered): Returns the missing ID from the registered list when compared to the invited list. Parameters: invited (list of int): List of invited IDs registered (list of int): List of registered IDs Returns: int: The missing ID invited_set = set(invited) registered_set = set(registered) missing_id = invited_set - registered_set return missing_id.pop()"},{"question":"You are given a string containing just the characters `\'(\'` and `\')\'`. Write a function to determine the minimum number of parentheses required to be added to make the input string valid. A string is considered valid if every opening parenthesis `(` has a corresponding closing parenthesis `)` and vice versa. For example: ``` balance(\\"())\\") = 1 // we need to add 1 opening parenthesis to make it valid balance(\\"(((\\") = 3 // we need to add 3 closing parentheses to make it valid balance(\\"()\\") = 0 // the string is already valid balance(\\"())(\\") = 2 // we need to add 1 opening and 1 closing parenthesis to make it valid ``` The function should return a single integer, which is the minimum number of parentheses needed to make the string valid. Good luck!","solution":"def balance(s): Returns the minimum number of parentheses needed to make the input string valid. open_count = 0 close_needed = 0 for char in s: if char == \'(\': open_count += 1 elif char == \')\': if open_count > 0: open_count -= 1 else: close_needed += 1 return open_count + close_needed"},{"question":"You are a detective navigating a 2D grid city while tracking down a suspect. The grid is represented as an \'n\' by \'m\' matrix where each cell is either a building, represented by \'B\', or an empty street, represented by \'.\'. Your objective is to determine if there exists a path from your starting position to the suspect\'s last known position, adhering to specific movement constraints and avoiding buildings. You can move to any of the four side-adjacent cells (up, down, left, right) from your current position, but you cannot move diagonally or through cells containing buildings. Let\'s denote a cell at the intersection of the r-th row and the c-th column as (r, c). Your starting position is given as (r_start, c_start) and the suspect\'s last known position is (r_end, c_end). Ensure that both start and end positions are on empty streets (\'.\'). Can you reach the suspect\'s last known position? -----Input----- The first line contains two integers, n and m (1 ≤ n, m ≤ 500) — the number of rows and columns in the grid city. Each of the next n lines describes the initial state of the city, each line consists of m characters \'B\' (building) and \'.\' (empty street). The next line contains two integers, r_start and c_start (1 ≤ r_start ≤ n, 1 ≤ c_start ≤ m) — your starting coordinates on an empty street. The next line contains two integers, r_end and c_end (1 ≤ r_end ≤ n, 1 ≤ c_end ≤ m) — the suspect\'s last known coordinates, also on an empty street. -----Output----- If you can reach the suspect\'s last known position, print \'YES\', otherwise print \'NO\'. -----Examples----- Input 4 5 ..B.. .B.B. ...B. B.... 1 1 3 5 Output YES Input 3 3 .B. .B. .B. 1 1 3 3 Output NO Input 5 5 ..... ..... ..... ..... ..... 2 2 5 5 Output YES Explanation of Examples: In the first example, one possible path from (1, 1) to (3, 5) is: (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3) -> (3,4) -> (3,5) indicating \'YES\'. In the second example, there is no possible path from (1, 1) to (3, 3) due to buildings blocking all potential routes, so the output is \'NO\'.","solution":"from collections import deque def can_reach(grid, r_start, c_start, r_end, c_end): n = len(grid) m = len(grid[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' queue = deque([(r_start, c_start)]) visited = set() visited.add((r_start, c_start)) while queue: x, y = queue.popleft() if (x, y) == (r_end, c_end): return \'YES\' for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \'NO\'"},{"question":"You are given a task to determine the number of unique ways to climb a staircase that has `N` steps. You can climb the staircase by taking either one step or two steps at a time. The goal is to count all distinct sequences of steps that can reach the top of the staircase. Write a function `countWays(N)` to calculate the number of distinct ways to climb the staircase. # Function Signature: `def countWays(N: int) -> int:` # Input: - An integer `N`, representing the total number of steps in the staircase. # Output: - An integer representing the number of unique ways to climb the staircase. # Constraints: - 1 ≤ N ≤ 30 # Example: **Input:** ``` 4 ``` **Output:** ``` 5 ``` **Explanation:** There are five distinct ways to climb a staircase with 4 steps: 1. 1 step + 1 step + 1 step + 1 step 2. 2 steps + 1 step + 1 step 3. 1 step + 2 steps + 1 step 4. 1 step + 1 step + 2 steps 5. 2 steps + 2 steps","solution":"def countWays(N): Returns the number of distinct ways to climb a staircase with N steps, where you can take either 1 step or 2 steps at a time. if N == 1: return 1 if N == 2: return 2 # Initialize base cases dp = [0] * (N+1) dp[1] = 1 dp[2] = 2 # Fill the array using the recurrence relation for i in range(3, N+1): dp[i] = dp[i-1] + dp[i-2] return dp[N]"},{"question":"You are given a matrix with N rows and M columns. You need to answer Q queries about the sum of values within submatrices. For each query, you should calculate the sum of values in the submatrix starting from (r1, c1) to (r2, c2) (inclusive). ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two space-separated integers N and M. Each of the following N lines contains M space-separated integers representing the matrix. The next line contains a single integer Q denoting the number of queries. Each of the following Q lines contains four space-separated integers r1, c1, r2, and c2 describing one query. ------ Output ------ For each query, print a single line containing one integer — the sum of values of the specified submatrix. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N, M, Q ≤ 500 1 ≤ text{matrix element} ≤ 1000 1 ≤ r1 ≤ r2 ≤ N 1 ≤ c1 ≤ c2 ≤ M ----- Sample Input 1 ------ 1 3 3 1 2 3 4 5 6 7 8 9 2 1 1 2 2 2 2 3 3 ----- Sample Output 1 ------ 12 28","solution":"def calculate_prefix_sum(matrix): Calculates and returns the prefix sum matrix for the given matrix. N = len(matrix) M = len(matrix[0]) prefix_sum = [[0] * (M + 1) for _ in range(N + 1)] for i in range(1, N + 1): for j in range(1, M + 1): prefix_sum[i][j] = ( matrix[i - 1][j - 1] + prefix_sum[i - 1][j] + prefix_sum[i][j - 1] - prefix_sum[i - 1][j - 1] ) return prefix_sum def sum_query(prefix_sum, r1, c1, r2, c2): Calculates the sum of the submatrix defined by (r1, c1) to (r2, c2) using the prefix sum matrix. return ( prefix_sum[r2][c2] - prefix_sum[r1 - 1][c2] - prefix_sum[r2][c1 - 1] + prefix_sum[r1 - 1][c1 - 1] ) def solve(T, test_cases): Solves the submatrix sum queries for the given number of test cases. results = [] for test_case in test_cases: N = test_case[\'N\'] M = test_case[\'M\'] matrix = test_case[\'matrix\'] Q = test_case[\'Q\'] queries = test_case[\'queries\'] prefix_sum = calculate_prefix_sum(matrix) for (r1, c1, r2, c2) in queries: result = sum_query(prefix_sum, r1, c1, r2, c2) results.append(result) return results"},{"question":"You are developing a system to manage bidirectional roads in a city. The system should help determine if a route between two junctions exists, while considering both direct and indirect connections. For simplicity, junctions and roads are represented as an undirected graph with junctions as nodes and roads as edges. Write a program to determine if there is a path between two given junctions, starting from the first junction to the second junction. If such a path exists, print \\"YES\\"; otherwise, print \\"NO\\". input The program receives multiple datasets. The end of the input is represented by a single zero. Each dataset is provided in the following format: n m a1 b1 a2 b2 :: am bm start end The first line gives two integers n and m, where n is the number of junctions (nodes) (1 ≤ n ≤ 1000) and m is the number of roads (edges) (0 ≤ m ≤ 10000). The next m lines describe the roads. Each road connects junction ai to junction bi (1 ≤ ai, bi ≤ n). The last line gives two integers start and end, representing the junctions to find the path from and to (1 ≤ start, end ≤ n). The number of datasets does not exceed 100. output For each dataset, print \\"YES\\" if a path exists between the start and end junctions. Otherwise, print \\"NO\\". Example Input 3 3 1 2 2 3 3 1 1 3 2 1 1 2 2 3 3 1 2 3 0 Output YES NO","solution":"def find_path(n, m, roads, start, end): from collections import defaultdict, deque graph = defaultdict(list) for a, b in roads: graph[a].append(b) graph[b].append(a) visited = set() queue = deque([start]) while queue: node = queue.popleft() if node == end: return \\"YES\\" if node not in visited: visited.add(node) for neighbor in graph[node]: if neighbor not in visited: queue.append(neighbor) return \\"NO\\" def main(input_datasets): output_results = [] for dataset in input_datasets: n, m, roads, start, end = dataset output_results.append(find_path(n, m, roads, start, end)) return output_results"},{"question":"A warehouse manager needs an efficient way to stock shelves. Each shelf can hold a maximum weight of W pounds. There are N items, each with a specific weight and value. The manager wants to maximize the total value of items on each shelf without exceeding the weight limit of W. Write a program that calculates the maximum total value of items that can be placed on a shelf without exceeding the weight limit. -----Input----- The input consists of two lines: 1. The first line contains two integers N and W (1 ≤ N ≤ 10^4, 1 ≤ W ≤ 10^9), the number of items and the maximum weight the shelf can hold. 2. The second line contains N pairs of integers where each pair consists of the weight and value of the item. Each weight and value is a positive integer not exceeding 10^9. -----Output----- Print a single integer — the maximum total value of items that can be placed on the shelf without exceeding the weight limit. -----Examples----- Input 4 10 2 5 3 6 4 5 5 8 Output 13 Input 3 50 10 60 20 100 30 120 Output 220 Input 1 1 2 1 Output 0 -----Note----- In the first example, the manager can place the items with weights 2 (value 5), 3 (value 6), and 4 (value 5) on the shelf for a total value of 5 + 6 + 5 = 16. In the second example, the manager can place the items with weights 10 (value 60) and 20 (value 100) on the shelf for a total value of 60 + 100 = 160. The third item cannot be added since it would exceed the weight limit. In the third example, there is only one item, but its weight exceeds the shelf limit, so no item can be added, resulting in a value of 0.","solution":"def max_total_value(N, W, items): Returns the maximum total value of items that can be placed on the shelf without exceeding the weight limit W. # Create a list for dynamic programming, initialized with zeros dp = [0] * (W + 1) for weight, value in items: # Traverse the dp array backwards to avoid using one item multiple times for w in range(W, weight - 1, -1): dp[w] = max(dp[w], dp[w - weight] + value) return max(dp)"},{"question":"We have five variables y_1, y_2, y_3, y_4, and y_5. Initially, each variable y_i was assigned the value n*i (where n is a known positive integer and i ranges from 1 to 5). Someone then replaced one of these variables with a known value m. You are provided the values of the five variables after this replacement. Identify the variable that was replaced. -----Constraints----- - The values of y_1, y_2, y_3, y_4, and y_5 given as input are a possible outcome of the replacement. - 1 ≤ n, m ≤ 100 -----Input----- Input will be given from Standard Input in the following format: n m y_1 y_2 y_3 y_4 y_5 -----Output----- Output the index of the variable that was replaced, which ranges from 1 to 5. -----Sample Input----- 2 12 2 4 12 8 10 -----Sample Output----- 3 In this scenario, the initial values were 2, 4, 6, 8, 10 (with n=2). The value 6 was replaced with 12, so the output is 3.","solution":"def find_replaced_variable_index(n, m, y1, y2, y3, y4, y5): Identifies the index of the replaced variable. Parameters: n (int): The original multiplying factor. m (int): The value that replaced one of the variables initially set to n*i. y1, y2, y3, y4, y5 (int): The values of the variables after one replacement. Returns: int: The index of the replaced variable (1 to 5). expected_values = [n * i for i in range(1, 6)] given_values = [y1, y2, y3, y4, y5] for i in range(5): if given_values[i] != expected_values[i]: return i + 1"},{"question":"Given an array of integers, you need to find the maximum sum of a subarray containing at most two distinct integers. A subarray is a contiguous part of an array, i.e., a sequence of consecutive elements. Input The first line contains one integer n (1 ≤ n ≤ 10^5) — the length of the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the array. Output Output an integer denoting the maximum sum of a subarray that contains at most two distinct integers. Examples Input 5 1 2 1 2 3 Output 6 Input 8 1 2 3 4 3 2 1 2 Output 10 Note In the first example, the subarray [1, 2, 1, 2] has the maximum sum 6 with at most two distinct integers. In the second example, the subarray [4, 3, 3] has the maximum sum 10 with at most two distinct integers.","solution":"def max_sum_subarray_two_distinct(n, a): Returns the maximum sum of a subarray that contains at most two distinct integers. if n == 0: return 0 max_sum = 0 current_sum = 0 start = 0 distinct_count = {} for end in range(n): current_sum += a[end] if a[end] in distinct_count: distinct_count[a[end]] += 1 else: distinct_count[a[end]] = 1 while len(distinct_count) > 2: current_sum -= a[start] if distinct_count[a[start]] == 1: del distinct_count[a[start]] else: distinct_count[a[start]] -= 1 start += 1 max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given a sequence of actions performed on a number. Initially, the number is set to zero. The actions can be of two types: 1. \\"add x\\": where `x` is an integer, this action adds `x` to the current number. 2. \\"subtract x\\": where `x` is an integer, this action subtracts `x` from the current number. Your task is to determine the final value of the number after performing a sequence of actions. -----Input----- The first line contains one integer `n` (1 le n le 10^4) — the number of actions. The next `n` lines contain actions of the form \\"add x\\" or \\"subtract x\\" where `x` (1 le x le 1000) is an integer. -----Output----- Output one integer — the final value of the number after performing all the actions. -----Example----- Input 6 add 100 subtract 50 add 200 add 10 subtract 30 add 20 Output 250 -----Explanation----- The initial value is set to zero. - After the first action “add 100”, the value becomes 100. - After the second action “subtract 50”, the value becomes 50. - After the third action “add 200”, the value becomes 250. - After the fourth action “add 10”, the value becomes 260. - After the fifth action “subtract 30”, the value becomes 230. - After the sixth action “add 20”, the value becomes 250. Thus, the final output is 250.","solution":"def perform_actions(n, actions): Returns the final value of the number after performing a sequence of actions. Parameters: n (int): The number of actions actions (list of str): List of actions in the form \\"add x\\" or \\"subtract x\\" Returns: int: The final value of the number number = 0 for action in actions: op, x = action.split() x = int(x) if op == \\"add\\": number += x elif op == \\"subtract\\": number -= x return number"},{"question":"A data scientist is analyzing different sets of data represented as flat sequences of integers. She often selects a contiguous subarray from each sequence to further analyze patterns within the data. Two sequences are considered similar if there\'s at least one contiguous subarray in one sequence that is identical to a contiguous subarray in the other sequence. Your task is to determine if two sequences are similar based on the above definition. Input: - One line containing integers separated by spaces representing the first sequence. - One line containing integers separated by spaces representing the second sequence. Output: - Output \\"similar\\" if the sequences are similar; otherwise, output \\"not similar\\". -----Input Constraints----- - There are no more than 10^5 integers in each sequence. - Each integer in the sequences is between -10^9 and 10^9. -----Examples----- Sample Input 1: 1 2 3 4 5 3 4 5 6 7 Sample Output 1: similar Sample Input 2: 9 8 7 6 5 1 2 3 4 5 Sample Output 2: similar Sample Input 3: 1 2 3 4 5 6 Sample Output 3: not similar","solution":"def are_sequences_similar(seq1, seq2): def generate_subarrays(sequence): subarrays = set() n = len(sequence) for i in range(n): for j in range(i + 1, n + 1): subarrays.add(tuple(sequence[i:j])) return subarrays subarrays1 = generate_subarrays(seq1) subarrays2 = generate_subarrays(seq2) for subarray in subarrays1: if subarray in subarrays2: return \\"similar\\" return \\"not similar\\" # Convert input strings to lists of integers def parse_input(input_str): return list(map(int, input_str.split())) # Example usage # seq1 = parse_input(\\"1 2 3 4 5\\") # seq2 = parse_input(\\"3 4 5 6 7\\") # print(are_sequences_similar(seq1, seq2))"},{"question":"You have a garden with n flowerbeds arranged in a line. Each flowerbed has a certain number of flowers and might have some weeds. You want to pick flowers from the flowerbeds, but you only want to collect from sections of the garden where there are no weeds, as weeds can damage your flower collection. You are given an array a of length n, where a[i] represents the number of flowers in the i-th flowerbed if it is positive, and a weed if it is negative. Your task is to find the maximum number of flowers you can collect by picking flowers from a contiguous subarray that does not include any flowerbed with weeds. For example, in the first sample, the second bed contains a weed, so you can pick flowers either only from the first bed or from the remaining beds after the weed. The maximum would be picking the remaining 7 and 4 flowers. -----Input----- - The first line contains the number of flowerbeds 1 leq n leq 10^5. - The second line contains n integers a_1, a_2, ..., a_n where -10^9 leq a_i leq 10^9. Negative values indicate weeds. -----Output----- Print the maximum number of flowers you can collect from a contiguous subarray without any weeds. -----Examples----- Sample Input 1: 5 3 -1 7 4 2 Sample Output 1: 13 Sample Input 2: 6 -5 3 5 6 -2 4 Sample Output 2: 14","solution":"def max_flowers(a): Given a list of integers representing flowerbeds (positive) and weeds (negative), this function returns the maximum number of flowers that can be collected from a contiguous subarray that contains no weeds. max_flowers_collected = 0 current_sum = 0 for flowerbed in a: if flowerbed < 0: current_sum = 0 else: current_sum += flowerbed max_flowers_collected = max(max_flowers_collected, current_sum) return max_flowers_collected"},{"question":"Given an integer array representing heights of buildings and an integer `k`, determine the maximum number of buildings that can be visited with a set of rules. Each building has a height, and you can only move from one building to another if the height difference between the buildings is at most `k`. Additionally, you can only visit a building once. Implement a function `maxBuildingsVisited` that takes the list of building heights and the integer `k` and returns the maximum number of buildings that can be visited starting from any given building. # Function Signature ```python def maxBuildingsVisited(heights: List[int], k: int) -> int: pass ``` # Input - A list of integers `heights` where `heights[i]` represents the height of the `i-th` building. (1 ≤ len(heights) ≤ 1000) - An integer `k` representing the maximum height difference you can tolerate. (0 ≤ k ≤ 1000) # Output - An integer representing the maximum number of buildings that can be visited starting from any building. # Examples Example 1: ```python heights = [1, 3, 4, 7, 6] k = 2 maxBuildingsVisited(heights, k) => 3 ``` **Explanation:** Starting from building 1 (height = 3), you can visit building 2 (height = 4) and building 5 (height = 6) as their height differences are within the allowed `k`. Total buildings visited = 3. Example 2: ```python heights = [10, 13, 12, 15, 14, 10] k = 3 maxBuildingsVisited(heights, k) => 6 ``` **Explanation:** Starting from any building, you can visit all other buildings within the given height difference limit `k` of 3. Example 3: ```python heights = [1, 2, 3, 4, 5] k = 0 maxBuildingsVisited(heights, k) => 1 ``` **Explanation:** With `k` as 0, you cannot visit any other building from your starting building due to the height difference requirement. Hence, you can only visit the starting building. # Note - Ensure your solution considers edge cases like minimal and maximal values of `heights` and `k`. - Efficient solutions are preferred due to constraints on input size.","solution":"def maxBuildingsVisited(heights, k): Returns the maximum number of buildings that can be visited starting from any building. n = len(heights) max_count = 0 for i in range(n): count = 1 current_height = heights[i] for j in range(n): if i != j and abs(heights[j] - current_height) <= k: count += 1 max_count = max(max_count, count) return max_count"},{"question":"Given a string s consisting of lowercase alphabets, compress the string using the counts of repeated characters in a way that the consecutive characters are replaced by the character followed by the count of repetitions. If the compressed string is not smaller than the original string, return the original string. Example 1: Input: s = \\"aabcccccaaa\\" Output: \\"a2b1c5a3\\" Explanation: The string \\"aabcccccaaa\\" is compressed to \\"a2b1c5a3\\". Example 2: Input: s = \\"abcdef\\" Output: \\"abcdef\\" Explanation: The string \\"abcdef\\" cannot be compressed further as the compressed version \\"a1b1c1d1e1f1\\" is not smaller. Your Task: Complete the function compressString that takes a string s as input and returns the compressed string or the original string based on the given criteria. The printing is handled by the driver code. Constraints: 1 ≤ |s| ≤ 10^5 s consists of lowercase English letters only. Expected Time Complexity : O(|s|)","solution":"def compressString(s): Compresses the string using counts of repeated characters. If the compressed string is not smaller than the original, return the original string. if not s: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1]) compressed.append(str(count)) count = 1 compressed.append(s[-1]) compressed.append(str(count)) compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(s) else s"},{"question":"Farhan loves strings and recently he learned about palindromes. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Farhan wonders if a permutation of a given string can form a palindrome. Your task is to help Farhan by writing a program that determines whether any permutation of a given string can form a palindrome. Input The input consists of a single string s containing only lowercase alphabets. Output Output \\"YES\\" if any permutation of the string can form a palindrome, otherwise output \\"NO\\". Constraints 1 ≤ s.length ≤ 1000 SAMPLE INPUT civic SAMPLE OUTPUT YES SAMPLE INPUT ivicc SAMPLE OUTPUT YES SAMPLE INPUT hello SAMPLE OUTPUT NO Explanation For the first sample, \\"civic\\" is already a palindrome. For the second sample, a permutation \\"civic\\" is a palindrome. For the third sample, no permutation of \\"hello\\" can form a palindrome.","solution":"def can_form_palindrome(s): Determines if any permutation of the given string can form a palindrome. from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Count how many characters have an odd number of occurrences odd_count = sum(1 for count in char_count.values() if count % 2 == 1) # A string can form a palindrome if at most one character has an odd number of occurrences return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"You are given an array of n integers a_1, a_2, ldots, a_n, and a prime number p. Your task is to find the number of distinct subarrays in which the sum of the elements is divisible by p. A subarray is a contiguous part of an array. Two subarrays are considered distinct if they start or end at different positions within the array. -----Input----- The first line contains two integers n (1 le n le 10^5) — the number of elements in the array, and p (2 le p le 10^9) — the prime number. The second line contains n integers a_1, a_2, ldots, a_n (-10^9 le a_i le 10^9) — the elements of the array. It is guaranteed that the sum of any subarray fits in a 64-bit signed integer type. -----Output----- Print a single integer — the number of distinct subarrays with a sum divisible by p. -----Example----- Input 5 3 1 -2 3 4 -6 Output 4 -----Explanation----- The valid subarrays whose sums are divisible by 3 are: - From index 1 to 3: sum is 1 + (-2) + 3 = 2 - From index 2 to 4: sum is -2 + 3 + 4 = 5 - From index 1 to 5: sum is 1 + (-2) + 3 + 4 + (-6) = 0 (divisible by 3) - From index 3 to 5: sum is 3 + 4 + (-6) = 1 (divisible by 3) Thus, there are 4 distinct subarrays where the sum is divisible by 3.","solution":"def count_subarrays_with_sum_divisible_by_p(n, p, arr): Returns the number of distinct subarrays whose sum of elements is divisible by p. prefix_mod_count = {0: 1} prefix_sum = 0 count = 0 for num in arr: prefix_sum += num mod = prefix_sum % p if mod < 0: mod += p count += prefix_mod_count.get(mod, 0) prefix_mod_count[mod] = prefix_mod_count.get(mod, 0) + 1 return count"},{"question":"You are given an array `arr` consisting of `n` integers. Your task is to process `q` queries to determine specific information from the array. Each query can be of two types: 1. **Update Query**: Changes the value of an element in the array. 2. **Range Maximum Query**: Determines the maximum value in a specified subarray. Each query should be executed efficiently to ensure optimal performance. **Input Format:** - The first line contains two integers, `n` (number of elements in the array) and `q` (number of queries). - The second line contains `n` space-separated integers representing `arr`. - Each of the next `q` lines describes a query in one of the following formats: - `1 x y`: An update query where the `x`-th element of the array is set to `y` (1 ≤ x ≤ n). - `2 l r`: A range maximum query where you are to find and output the maximum value in the subarray from index `l` to `r` (1 ≤ l ≤ r ≤ n). **Output Format:** - For each range maximum query, output the maximum value in the specified subarray on a new line. **Constraints:** - `1 ≤ n, q ≤ 100,000` - `1 ≤ arr[i] ≤ 10^9` for `1 ≤ i ≤ n` - `1 ≤ x ≤ n` - `1 ≤ y ≤ 10^9` - `1 ≤ l ≤ r ≤ n` **Example:** ``` Input: 5 3 2 1 5 3 4 2 1 3 1 2 10 2 1 3 Output: 5 10 ``` **Explanation:** In the example provided: 1. The initial array is [2, 1, 5, 3, 4]. 2. The first query asks for the maximum value from index 1 to 3, which is 5. 3. The second query updates the value at index 2 to 10, making the array [2, 10, 5, 3, 4]. 4. The third query asks again for the maximum value from index 1 to 3, which is now 10 after the update.","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) # Initialize the segment tree with the initial data # Copy data to the leaf nodes for i in range(self.n): self.tree[self.n + i] = data[i] # Build the segment tree by calculating parents for i in range(self.n - 1, 0, -1): self.tree[i] = max(self.tree[2 * i], self.tree[2 * i + 1]) def update(self, index, value): # Update the value at the leaf node pos = index + self.n self.tree[pos] = value # Update all the parents while pos > 1: pos //= 2 self.tree[pos] = max(self.tree[2 * pos], self.tree[2 * pos + 1]) def range_query(self, left, right): # Query the maximum in the range from `left` to `right` result = -float(\'inf\') left += self.n right += self.n + 1 while left < right: if left % 2 == 1: result = max(result, self.tree[left]) left += 1 if right % 2 == 1: right -= 1 result = max(result, self.tree[right]) left //= 2 right //= 2 return result def process_queries(n, q, arr, queries): segment_tree = SegmentTree(arr) results = [] for query in queries: if query[0] == 1: x, y = query[1] - 1, query[2] segment_tree.update(x, y) elif query[0] == 2: l, r = query[1] - 1, query[2] - 1 result = segment_tree.range_query(l, r) results.append(result) return results"},{"question":"Alice has a string S of length N consisting of lowercase English letters. Alice wants to rearrange the characters of S such that the number of distinct adjacent characters is maximized. Help Alice find out the maximum number of distinct adjacent characters possible after any rearrangement of the string. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of one line of input. - The first line contains a string S of length N. ------ Output Format ------ For each test case, output on a new line, the maximum number of distinct adjacent characters Alice can achieve after rearranging the string. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 10^{5} S_{i} contains only lowercase English letters. - The sum of N over all test cases won\'t exceed 2cdot 10^{5}. ----- Sample Input 1 ------ 3 aabb abac abcd ----- Sample Output 1 ------ 3 3 3 ----- explanation 1 ------ Test case 1: By rearranging the string as \\"abab\\", the number of distinct adjacent characters is 3 (a,b,a,b). Test case 2: By rearranging the string as \\"abca\\", the number of distinct adjacent characters is 3 (a,b,c,a). Test case 3: The string \\"abcd\\" already has 3 distinct adjacent characters.","solution":"from collections import Counter def max_distinct_adjacent_chars(s): Returns the maximum number of distinct adjacent characters possible after rearranging the string s. freq = Counter(s) max_char_count = max(freq.values()) n = len(s) if max_char_count > (n + 1) // 2: return -1 # Not possible to rearrange to meet the criteria return n def max_distinct_adjacent_chars_for_cases(cases): results = [] for case in cases: results.append(max_distinct_adjacent_chars(case)) return results"},{"question":"Takashi has a string S consisting of lowercase English letters. He would like to create the lexicographically smallest palindrome by reordering the characters of S. A palindrome is a string that reads the same forward and backward. For example, given the string \\"aabbcc\\", one possible palindrome creation would be \\"abccba\\". Write a function that takes a string S as input and returns the lexicographically smallest palindrome that can be formed using all characters of S. If it is impossible to form a palindrome, return an empty string. Constraints: - The input string consists of lowercase English letters. - The length of S is at most 10^6. Input: - A string S. Output: - A lexicographically smallest palindrome string, or an empty string if it\'s not possible to form a palindrome. Examples: Input: \\"aabbcc\\" Output: \\"abccba\\" Input: \\"abc\\" Output: \\"\\"","solution":"def smallest_palindrome(s): from collections import Counter # Step 1: Count the characters in the string char_count = Counter(s) # Step 2: Check if it\'s possible to form a palindrome odd_count = sum(1 for count in char_count.values() if count % 2 != 0) if odd_count > 1: return \\"\\" # Step 3: Form the palindrome half = [] # This will store half of the palindrome middle = \\"\\" # This will store the middle character (if any) for char in sorted(char_count): count = char_count[char] if count % 2 != 0: middle = char half.append(char * (count // 2)) # Combine the halves and the middle character to form the palindrome half = \'\'.join(half) result = half + middle + half[::-1] return result"},{"question":"You are given N magic stones placed in a row, numbered from 1 to N. Each stone initially has a certain magical charge, given by an array C, where C[i] represents the charge of the i-th stone. A wizard can perform two types of spells: 1. **Increase Spell**: Increase the charge of all stones from index l to index r by k. 2. **Sum Spell**: Calculate and report the total charge of stones from index l to index r. Your task is to process all such spells and determine the results of the Sum Spells. # Input Format The first line contains two integers N (number of stones) and M (number of spells). The second line contains N integers, the initial charges of the stones. Each of the following M lines describes a spell: - \\"1 l r k\\" for an Increase Spell, where the charges of stones from index l to index r should be increased by k. - \\"2 l r\\" for a Sum Spell, where the total charge of stones from index l to index r should be reported. # Output Format For each Sum Spell, output a single integer representing the sum of the charges of stones in the specified range. # Constraints 1 ≤ N, M ≤ 100,000 1 ≤ C[i], k ≤ 1,000,000 1 ≤ l ≤ r ≤ N # Sample Input ``` 5 5 10 20 30 40 50 2 1 5 1 2 4 10 2 1 5 1 1 2 5 2 1 3 ``` # Sample Output ``` 150 180 45 ``` Explanation: 1. The initial charges are [10, 20, 30, 40, 50]. The Sum Spell (2 1 5) computes 10 + 20 + 30 + 40 + 50 = 150. 2. After the Increase Spell (1 2 4 10), the charges become [10, 30, 40, 50, 50]. 3. The Sum Spell (2 1 5) computes 10 + 30 + 40 + 50 + 50 = 180. 4. After the Increase Spell (1 1 2 5), the charges become [15, 35, 40, 50, 50]. 5. The Sum Spell (2 1 3) computes 15 + 35 + 40 = 90.","solution":"def process_spells(N, M, initial_charges, spells): Processes the given spells on the magic stones and returns the results of the Sum Spells. :param N: int, number of stones :param M: int, number of spells :param initial_charges: list of int, initial charges of the stones :param spells: list of strings, spells to be processed :return: list of int, results of the Sum Spells charges = initial_charges[:] results = [] for spell in spells: details = list(map(int, spell.split())) if details[0] == 1: l, r, k = details[1], details[2], details[3] for i in range(l-1, r): charges[i] += k elif details[0] == 2: l, r = details[1], details[2] results.append(sum(charges[l-1:r])) return results"},{"question":"In this problem, you are tasked with implementing a function that simulates a simple programming language\'s variable assignment and output behavior. This tiny language allows assigning values to variables, performing arithmetic operations, and outputting values. Your goal is to write a program that interprets and processes a sequence of instructions, then outputs the required results. # Input The input consists of multiple lines; each line is a single instruction. The instructions are of the following types: 1. `SET V value`: Assigns the value (an integer) to the variable V (a single character A-Z). 2. `ADD V1 V2 V3`: Sets the variable V1 to the result of the addition of variables V2 and V3. 3. `SUB V1 V2 V3`: Sets the variable V1 to the result of the subtraction of variables V2 and V3. 4. `MUL V1 V2 V3`: Sets the variable V1 to the result of the multiplication of variables V2 and V3. 5. `DIV V1 V2 V3`: Sets the variable V1 to the result of the division of variables V2 and V3. 6. `PRINT V`: Outputs the value of the variable V. The input ends with a line containing the word `END`. # Output For each `PRINT` instruction, your program should output the value of the specified variable. # Constraints 1. Variables are single uppercase letters (A-Z). 2. Values and results of operations are guaranteed to be integers. 3. Division by zero will not occur. 4. An instruction might refer to a variable that has not been assigned any value yet; such a reference indicates that the variable has an initial value of 0. 5. The number of instructions will not exceed 1000. # Example Input ``` SET A 10 SET B 20 ADD C A B PRINT C MUL D B C PRINT D SUB E D C PRINT E DIV F D B PRINT F END ``` Output ``` 30 600 570 30 ``` # Explanation 1. `SET A 10` assigns 10 to variable A. 2. `SET B 20` assigns 20 to variable B. 3. `ADD C A B` sets C to the result of A + B, which is 30. 4. `PRINT C` outputs the value of C, which is 30. 5. `MUL D B C` sets D to the result of B * C, which is 20 * 30 = 600. 6. `PRINT D` outputs the value of D, which is 600. 7. `SUB E D C` sets E to the result of D - C, which is 600 - 30 = 570. 8. `PRINT E` outputs the value of E, which is 570. 9. `DIV F D B` sets F to the result of D / B, which is 600 / 20 = 30. 10. `PRINT F` outputs the value of F, which is 30. Write a function `interpret_instructions(inputs)` where `inputs` is a list of strings, each representing an instruction. Your function should return a list of integers that corresponds to the output of each `PRINT` instruction. ```python def interpret_instructions(inputs): # Your implementation goes here pass ```","solution":"def interpret_instructions(inputs): variables = {chr(i): 0 for i in range(65, 91)} # Initialize A-Z variables to 0 outputs = [] for line in inputs: parts = line.split() command = parts[0] if command == \'SET\': var = parts[1] value = int(parts[2]) variables[var] = value elif command == \'ADD\': result_var = parts[1] var1 = parts[2] var2 = parts[3] variables[result_var] = variables[var1] + variables[var2] elif command == \'SUB\': result_var = parts[1] var1 = parts[2] var2 = parts[3] variables[result_var] = variables[var1] - variables[var2] elif command == \'MUL\': result_var = parts[1] var1 = parts[2] var2 = parts[3] variables[result_var] = variables[var1] * variables[var2] elif command == \'DIV\': result_var = parts[1] var1 = parts[2] var2 = parts[3] variables[result_var] = variables[var1] // variables[var2] elif command == \'PRINT\': var = parts[1] outputs.append(variables[var]) elif command == \'END\': break return outputs"},{"question":"Given an array of integers arr, and an integer k. Your aim is to modify the array such that the sum of its elements is divisible by k. You can change exactly one element in the array to any other integer. Your task is to find the minimum possible value of the new sum which is divisible by k after the modification. Return the minimum new sum that is divisible by k, or return -1 if it is not possible to achieve this by changing exactly one element. Examples: Example 1: Input: arr = [1, 2, 3], k = 3 Output: 6 Explanation: You can change the third element from 3 to 5, which makes the sum 1+2+5=8. As 8 % 3 != 0, you can change the second element 2 to 4, which makes the sum 1+4+3=8. Neither of these are divisible by 3, but if you change 2 to 5 then the new sum 1+5+3=9 which is divisible by 3. Example 2: Input: arr = [5, 7, 11], k = 5 Output: 20 Explanation: You can change the third element from 11 to 10, which makes the sum 5+7+10=22, and 22 % 5 != 0. Changing 11 to 8 makes the sum 5+7+8=20, which is divisible by 5. Example 3: Input: arr = [3, 1, 4], k = 2 Output: 8 Explanation: You can change the first element from 3 to 4 to get the new sum 4+1+4=9, but 9 % 2 != 0. Changing 1 to 5 makes the sum 3+5+4=12, but it is not the minimum. The minimum sum is 8 when you change the 1 to 3, resulting in 3+3+4=10, which is divisible by 2. Example 4: Input: arr = [1, 2, 3], k = 8 Output: -1 Explanation: There is no way to change exactly one element to make the sum of the array divisible by 8. Constraints: 1 <= arr.length <= 10^5 1 <= arr[i] <= 10^6 1 <= k <= 10^6","solution":"def min_sum_divisible_by_k(arr, k): Modify the array so that the sum of its elements is divisible by k by changing exactly one element to another integer, and return the minimum possible new sum. Returns -1 if not possible. current_sum = sum(arr) current_mod = current_sum % k if current_mod == 0: return current_sum min_sum = float(\'inf\') found_solution = False for i in range(len(arr)): diff = (current_mod - arr[i] % k + k) % k new_sum_possible = current_sum - arr[i] + arr[i] - diff if (new_sum_possible % k) == 0: min_sum = min(min_sum, current_sum - diff) found_solution = True return min_sum if found_solution else -1"},{"question":"Write a function that takes a string input representing a mathematical expression involving addition and subtraction (e.g. \\"5+16-3\\") and returns the result of the expression as an integer. The function should handle both positive and negative numbers as well as multiple operations. Ensure that the function can also handle expressions with spaces (e.g. \\" 5 + 16 - 3 \\"). Example: ```python evaluate_expression(\\"5+16-3\\") -> 18 evaluate_expression(\\" 5 + 16 - 3 \\") -> 18 evaluate_expression(\\"10-20+30\\") -> 20 evaluate_expression(\\"-5 + 10\\") -> 5 ```","solution":"def evaluate_expression(expression): Evaluates a mathematical expression involving addition and subtraction. It handles both positive and negative numbers along with multiple operations. Spaces in the expression are ignored. # Remove all spaces from the expression for easier processing expression = expression.replace(\\" \\", \\"\\") # Initialize total and temporary number total = 0 num = 0 sign = 1 # 1 for positive, -1 for negative for char in expression: if char.isdigit(): num = num * 10 + int(char) else: # Apply the previous number with its sign to the total total += sign * num num = 0 # Update sign for the next number if char == \'+\': sign = 1 elif char == \'-\': sign = -1 # Don\'t forget to add the last number total += sign * num return total"},{"question":"Given an array of integers and a target integer, determine if any four numbers in the array sum up to the target. Write a function that accepts an array of integers `nums` and an integer `target`, and returns `true` if there exist four elements in the array whose sum is equal to `target`. Otherwise, return `false`. Note: The solution set must not contain duplicate quadruplets. Example 1: Input: nums = [1, 0, -1, 0, -2, 2], target = 0 Output: True Explanation: The quadruplets that sum to the target 0 are: 1. [-1, 0, 0, 1] 2. [-2, -1, 1, 2] Example 2: Input: nums = [2, 2, 2, 2, 2], target = 8 Output: True Explanation: The only quadruplet that sums to 8 is: [2, 2, 2, 2] Example 3: Input: nums = [-1, 2, 1, -4, 3, 0, -2, 1], target = 4 Output: True Explanation: One possible quadruplet that sums to 4 is: [-1, 1, 2, 2] Example 4: Input: nums = [1, 2, 3, 4, 5], target = 100 Output: False Explanation: There are no quadruplets that sum to 100.","solution":"def four_sum(nums, target): nums.sort() n = len(nums) for i in range(n - 3): for j in range(i + 1, n - 2): start = j + 1 end = n - 1 while start < end: four_sum = nums[i] + nums[j] + nums[start] + nums[end] if four_sum == target: return True elif four_sum < target: start += 1 else: end -= 1 return False"},{"question":"Celia is organizing a unique treasure hunt puzzle for her friends at the annual festival. She plans to create a series of locks and keys for the challenge. There are N rooms, each having a unique treasure and a locked door. The rooms are numbered from 1 to N. Each room i requires a specific key K_i to unlock the room. Each key K_i is hidden in room U_i. Celia starts in room 1 and already has the key to room 1. Celia can only move from one room to another if she has the key to the target room. She wants to make it as challenging as possible, so she will change exactly M keys. Exactly M times, Celia will choose a room j (1 le j le N) and change the location of key K_j to any different room other than the current U_j. Your task is to determine the maximum number of rooms that can be unlocked if she starts in room 1 and changes exactly M keys in an optimal manner. -----Input----- The first line contains two integers N M (3 le N le 10^5, 0 le M < N), the number of rooms, and the number of keys that must be moved. The second line contains N integers K_i (1 le K_i le N), the key required to unlock room i. The third line contains N integers U_i (1 le U_i le N), the room containing the key for room i. -----Output----- A line with an integer that denotes the maximum number of rooms that can be unlocked. -----Example----- Input 5 1 2 3 4 5 1 1 2 3 4 5 Output 5 -----Note----- An optimal solution is to change the location of key for room 5 from room 5 to room 1. Celia starts in room 1 with key 1, uses it to unlock room 5 (whose key is now in room 1). Now, she can access rooms in the order: 1 -> 5 -> 2 -> 3 -> 4 . Thus, Celia can unlock all 5 rooms.","solution":"def max_rooms_unlocked(N, M, K, U): from collections import defaultdict, deque # Build the initial graph where each node -> set of nodes it can unlock initial_graph = defaultdict(set) for i in range(N): initial_graph[U[i]].add(i + 1) def bfs(start, graph): visited = set() queue = deque([start]) while queue: current = queue.popleft() visited.add(current) for neighbor in graph[current]: if neighbor not in visited: queue.append(neighbor) return len(visited) # Actual BFS from room 1 with the initial settings max_unlocks = bfs(1, initial_graph) # Try to maximize the number of unlocks by changing M keys for changes in range(M): for i in range(N): original_room = U[i] for new_room in range(1, N + 1): if new_room != original_room: # Simulate the change of key location U[i] = new_room new_graph = defaultdict(set) for j in range(N): new_graph[U[j]].add(K[j]) # Calculate the reachable rooms unlocks = bfs(1, new_graph) max_unlocks = max(max_unlocks, unlocks) # Revert the change U[i] = original_room return max_unlocks"},{"question":"A network of roads connects several cities. Each road is bidirectional and has a certain length associated with it. You are given the number of cities and a list of roads, where each road is defined by a pair of cities and the length of the road connecting them. You need to determine the shortest path between a specified source city and a specified destination city. Write a function that takes the number of cities, the list of roads, the source city, and the destination city. The function should return the length of the shortest path between the source and the destination. If there is no path between the source and the destination, return -1. Input Format: - The first line contains an integer \'n\' denoting the number of cities s.t. 1 ≤ n ≤ 1000. - The second line contains an integer \'m\' denoting the number of roads s.t. 0 ≤ m ≤ 10000. - The next \'m\' lines each contain three integers \'u\', \'v\', and \'w\' representing a road between the cities \'u\' and \'v\' with a road length of \'w\' s.t. 1 ≤ u, v ≤ n and 1 ≤ w ≤ 1000. - The next line contains two integers \'src\' and \'dst\' representing the source and destination cities. Output Format: Output a single integer which is the length of the shortest path between the source and the destination city, or -1 if no path exists. SAMPLE INPUT 5 6 1 2 5 1 3 10 2 3 3 2 4 8 3 4 2 4 5 1 1 5 SAMPLE OUTPUT 11 Explanation: The shortest path from city 1 to city 5 is 1 -> 2 -> 3 -> 4 -> 5 with a total length of 5 + 3 + 2 + 1 = 11.","solution":"import heapq def dijkstra(n, roads, src, dst): Finds the shortest path between source city and destination city. Parameters: n (int): number of cities roads (list of tuples): each tuple consists of (u, v, w) representing a road between city u and city v with weight w src (int): source city dst (int): destination city Returns: int: the length of the shortest path between the source and destination city, or -1 if no path exists # Create adjacency list graph = {i: [] for i in range(1, n+1)} for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) # Priority queue for Dijkstra pq = [(0, src)] # (distance, node) distances = {i: float(\'inf\') for i in range(1, n+1)} distances[src] = 0 while pq: current_distance, current_node = heapq.heappop(pq) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances[dst] if distances[dst] != float(\'inf\') else -1"},{"question":"Jim is developing a new feature in his restaurant\'s order management system. He wants to track the most frequently ordered dishes over a certain period to identify the best-selling items. To achieve this, he needs a function that identifies the top N most frequent dishes from customer orders within the specified time frame. Each order record contains the dish name and the timestamp of the order. Jim wants the function to return the names of the top N most frequently ordered dishes, sorted by frequency in descending order. In case of a tie (multiple dishes having the same frequency), the dishes should be sorted lexicographically in ascending order. Write a function `topDishes` that takes the following arguments: 1. `orders`: A list of tuples where each tuple contains a string representing the dish name and an integer representing the timestamp of the order. 2. `N`: An integer representing the number of top dishes to return. The function should return a list of strings representing the names of the top N most frequent dishes. # Input Format - A list of tuples `orders` where each tuple contains: - `dish_name`: a string (1 ≤ length of dish_name ≤ 100) representing the name of the dish. - `timestamp`: an integer (1 ≤ timestamp ≤ 10^9) representing the time when the order was placed. - An integer `N` (1 ≤ N ≤ min(100, number of unique dishes)). # Output Format - A list of strings representing the names of the top N most frequent dishes. # Example Input ```python orders = [ (\\"Burger\\", 1617420000), (\\"Pizza\\", 1617420100), (\\"Burger\\", 1617420200), (\\"Burger\\", 1617420300), (\\"Pizza\\", 1617420400), (\\"Salad\\", 1617420500), ] N = 2 ``` # Example Output ```python [\\"Burger\\", \\"Pizza\\"] ``` # Explanation The \\"Burger\\" dish was ordered 3 times, \\"Pizza\\" 2 times, and \\"Salad\\" 1 time. For N=2, the top 2 most frequent dishes are \\"Burger\\" and \\"Pizza\\". # Constraints - The input list `orders` will have at most 10^5 orders. - The dish names consist of only uppercase and lowercase English letters. # Function Signature ```python def topDishes(orders: List[Tuple[str, int]], N: int) -> List[str]: pass ```","solution":"from typing import List, Tuple from collections import Counter def topDishes(orders: List[Tuple[str, int]], N: int) -> List[str]: dish_counter = Counter(dish for dish, _ in orders) top_dishes = sorted(dish_counter.items(), key=lambda x: (-x[1], x[0])) return [dish for dish, _ in top_dishes[:N]]"},{"question":"You are developing a software system for managing an online bookstore. The bookstore maintains an inventory of books, each identified by a unique ISBN number and associated with one or more authors. You need to build a functionality to process the orders efficiently based on customer requests. Each customer can order multiple books in one order. To fulfill each order, you must ensure that all requested ISBNs are available in the inventory. Write a program that takes the inventory of books and a list of customer orders, then outputs whether each order can be fulfilled with the available inventory. -----Input----- The first line contains an integer B (1 leq B leq 10^5), representing the number of books in the inventory. The following B lines each contain a string representing an ISBN number and an integer Q (1 leq Q leq 10^3), separated by a space, indicating the quantity of the book available in the inventory. The next line contains an integer O (1 leq O leq 10^5), representing the number of orders to check. The following O lines each start with an integer N (1 leq N leq 10^3), representing the number of ISBNs in the order, followed by N strings, each representing an ISBN number requested by the customer. -----Output----- Output O lines, each containing \\"YES\\" if the inventory can satisfy the corresponding order, or \\"NO\\" if it cannot. -----Examples----- Sample Input: 5 978-3-16-148410-0 10 978-1-4028-9462-6 5 978-0-596-52068-7 2 978-0-262-03384-8 3 978-0-201-03801-8 1 3 2 978-3-16-148410-0 978-1-4028-9462-6 1 978-0-596-52068-7 3 978-0-201-03801-8 978-1-4028-9462-6 978-0-262-03384-8 Sample Output: YES YES NO","solution":"def process_orders(inventory, orders): Processes customer orders and checks against the available inventory. :param inventory: List of tuples containing ISBN and quantity available [(isbn_1, qty_1), (isbn_2, qty_2), ...] :param orders: List of lists where each list contains ISBNs requested in an order [[isbn_a1, isbn_a2, ...], ...] :return: List of strings \\"YES\\" or \\"NO\\" indicating if each order can be fulfilled inventory_dict = {} for isbn, qty in inventory: inventory_dict[isbn] = qty results = [] for order in orders: can_fulfill = True temp_inventory = inventory_dict.copy() for isbn in order: if temp_inventory.get(isbn, 0) > 0: temp_inventory[isbn] -= 1 else: can_fulfill = False break results.append(\\"YES\\" if can_fulfill else \\"NO\\") return results"},{"question":"Dr. Scholar is conducting research in a rectangular field of dimensions m * n. The field is represented as a 2D grid where each cell can either contain a research station (marked as \'R\') or be empty (marked as \'.\'). To ensure that the data collected by each station is isolated from data collected by other stations, Dr. Scholar wants to build barriers that will block any direct horizontal or vertical path between any two stations. Each barrier can span either an entire row or an entire column but must be continuous. Your task is to determine the minimum number of barriers needed such that no two research stations can communicate directly via horizontal or vertical paths. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The descriptions of the T test cases follow. The first line of each test case contains two integers, m and n. Each of the next m lines contains n characters representing the research grid. -----Output----- For each test case, output a single integer corresponding to the minimum number of barriers that Dr. Scholar needs to build. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ m, n ≤ 100 -----Example----- Input 2 3 3 R.R R.R ... 3 4 R..R .... R..R Output 2 2 -----Explanation----- First example: - One possible way to place the barriers is to place them in the second column and the third row, effectively isolating each research station. Second example: - One possible way to place the barriers is to place them in the first row and the second row, effectively isolating the stations from each other.","solution":"def min_barriers_needed(test_cases): def min_barriers(m, n, grid): rows, cols = [0] * m, [0] * n for i in range(m): for j in range(n): if grid[i][j] == \'R\': rows[i] = 1 cols[j] = 1 return min(sum(rows), sum(cols)) results = [] for case in test_cases: m, n, grid = case results.append(min_barriers(m, n, grid)) return results def parse_input(input_str): input_lines = input_str.strip().split(\\"n\\") t = int(input_lines[0]) index = 1 test_cases = [] for _ in range(t): m, n = map(int, input_lines[index].split()) index += 1 grid = [] for _ in range(m): grid.append(input_lines[index]) index += 1 test_cases.append((m, n, grid)) return test_cases"},{"question":"An online bookstore is having a promotion where they offer a certain number of discount coupons to customers. Each coupon can be applied to a book to reduce its price to zero. The bookstore wants to determine the maximum revenue they can still earn after applying the given number of discount coupons. Given an array of integers, where each integer represents the price of a different book, and an integer `K` which represents the number of discount coupons available, find out the maximum revenue the bookstore can earn by applying the discount coupons optimally. Input: - The first line contains an integer `T`, the number of test cases. - Each test case contains two lines: - The first line contains two space-separated integers `N` and `K`, where `N` is the number of books and `K` is the number of discount coupons. - The second line contains `N` space-separated integers, representing the prices of the books. Output: - For each test case, output a single integer, the maximum possible revenue the bookstore can earn. Constraints: - 1 <= T <= 10 - 1 <= N <= 10^5 - 0 <= K <= N - 1 <= price of each book <= 10^9 Example: Input: 3 5 2 4 2 6 8 1 4 1 7 3 5 9 7 3 6 3 8 2 7 1 4 Output: 20 21 28 Explanation: 1. For the first test case, we can use the 2 coupons to buy the books with prices 1 and 2 for free. The remaining books\' prices are 4, 6, and 8. So the maximum revenue is 4 + 6 + 8 = 18. 2. For the second test case, using one coupon on the cheapest book priced at 3 will leave us with prices 7, 5, and 9. The maximum revenue is 7 + 5 + 9 = 21. 3. For the third test case, using three coupons on the books priced at 1, 2, and 3 will leave us with prices 6, 8, 7, and 4. The maximum revenue is 6 + 8 + 7 + 4 = 25.","solution":"def max_revenue(T, test_cases): results = [] for test in test_cases: N, K = test[0] book_prices = sorted(test[1]) max_rev = sum(book_prices[K:]) results.append(max_rev) return results # Sample Input T = 3 test_cases = [ ((5, 2), [4, 2, 6, 8, 1]), ((4, 1), [7, 3, 5, 9]), ((7, 3), [6, 3, 8, 2, 7, 1, 4]) ] # Running the function with sample input print(max_revenue(T, test_cases)) # Output should be [18, 21, 25]"},{"question":"Sundar has a large collection of marbles, each having a unique number engraved on it. He loves organizing his marbles in ascending order in a case. However, his mischievous younger brother keeps mixing them up, adding even more numbers to the stack. Sundar wants to identify the longest subsequence of marbles that are already sorted in ascending order within the mixed stack. Help Sundar find the length of this longest increasing subsequence (LIS). ------ Input Format ------ - The first line contains a single integer ( n ), which is the number of marbles. - The second line contains ( n ) integers, representing the numbers on the marbles. ------ Output Format ------ - Output a single integer, the length of the longest increasing subsequence in the given list of marble numbers. ------ Constraints ------ 1 ≤ ( n ) ≤ 1000 1 ≤ The number on any marble ≤ 10000 ----- Sample Input 1 ------ 6 10 22 9 33 21 50 ----- Sample Output 1 ------ 4 ----- Explanation 1 ------ The longest increasing subsequence in this case is [10, 22, 33, 50], so the length is 4.","solution":"def length_of_lis(marbles): if not marbles: return 0 n = len(marbles) lis = [1] * n # Initialize LIS values for all indexes # Compute optimized LIS values in a bottom up manner for i in range(1, n): for j in range(0, i): if marbles[i] > marbles[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 # Find the maximum value of all LIS values return max(lis)"},{"question":"Sebastian is learning about strings and their properties in his computer science class. He found the concepts very interesting and decided to create a string manipulation game to test his understanding. In the game, he is given a string and needs to perform multiple operations on it. The operations could be of the following types: 1. Append a given character to the end of the string. 2. Remove the last character from the string if the string is not empty. 3. Check if the string is a palindrome. A string is a palindrome if it reads the same backward as forward, e.g., \\"madam\\". Sebastian wants you to help him by writing a program that performs these operations. ------ Input ------ The first line of input contains a single integer Q, the number of operations to be performed. Each of the next Q lines describes an operation. Each operation is described as follows: - Type 1: \\"1 c\\" (Append character \'c\' to the end of the string) - Type 2: \\"2\\" (Remove the last character from the string if it is not empty) - Type 3: \\"3\\" (Check if the current string is a palindrome) ------ Output ------ For each operation of type 3, output a separate line containing \\"YES\\" if the string is a palindrome and \\"NO\\" otherwise. ------ Constraints ------ 1 ≤ Q ≤ 100000 Each character c is a lowercase English letter (\'a\' to \'z\'). ------ Sample Input 1 ------ 7 1 a 1 b 1 a 3 2 3 2 ------ Sample Output 1 ------ YES NO","solution":"def string_game(operations): Perform operations on a string and return results for palindrome check operations. Parameters: operations (list of str): List of operations as strings. Returns: list of str: Results for each type 3 operation. result = [] s = [] for op in operations: if op[0] == \'1\': s.append(op[2]) elif op[0] == \'2\': if s: s.pop() elif op[0] == \'3\': if s == s[::-1]: result.append(\\"YES\\") else: result.append(\\"NO\\") return result # Example usage: # operations = [\\"1 a\\", \\"1 b\\", \\"1 a\\", \\"3\\", \\"2\\", \\"3\\", \\"2\\"] # result = string_game(operations) # print(result) # Output: [\\"YES\\", \\"NO\\"]"},{"question":"A string is considered almost-palindromic if it can become a palindrome by removing at most one character. Given a string `S`, your task is to determine if it is almost-palindromic. Return `True` if the string can be converted to a palindrome by removing at most one character, otherwise return `False`. Examples: Example 1: Input: S = \\"abca\\" Output: True Explanation: By removing \'c\' or \'b\', the string becomes \\"aba\\" or \\"aca\\", both of which are palindromes. Example 2: Input: S = \\"abcdef\\" Output: False Explanation: There is no way to make the entire string a palindrome by removing just one character. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `isAlmostPalindrome()` which takes a string `S` as input and returns the answer. Expected Time Complexity: O(N), where N is the length of the string. Expected Auxiliary Space: O(1) Constraints: 1 <= len(S) <= 10^5","solution":"def isPalindrome(s, left, right): Returns True if the substring s[left:right+1] is a palindrome. while left < right: if s[left] != s[right]: return False left += 1 right -= 1 return True def isAlmostPalindrome(S): Returns True if the string S can be turned into a palindrome by removing at most one character, otherwise returns False. left, right = 0, len(S) - 1 while left < right: if S[left] != S[right]: # Check by removing one character either from left or right return isPalindrome(S, left + 1, right) or isPalindrome(S, left, right - 1) left += 1 right -= 1 return True"},{"question":"You are given a string `S` consisting of lowercase letters and digits. Your task is to transform the string such that all letters are converted to lowercase, and all numeric digits are doubled (i.e., each digit \'d\' is replaced by the string \\"2*d\\"). If any digit\'s double results in a two-digit number, only use the unit part of the product (i.e., the rightmost digit). For example, \'6\' becomes \'12\' but we use \'2\' as the result. Write a function `transformString(S: str) -> str` that takes a string `S` as input and returns the transformed string according to the above rules. -----Constraints:----- - The length of string `S` will be between 1 and 10^5. - The string `S` will only contain lowercase letters and digits. -----Input format:----- - A single string `S`. -----Output format:----- - A single string representing the transformed string. -----Sample Input 1:----- hello123 -----Sample Output 1:----- hello246 -----Explanation:----- - \'h\', \'e\', \'l\', \'l\', \'o\' remain unchanged. - \'1\' is replaced by \'2\'. - \'2\' is replaced by \'4\'. - \'3\' is replaced by \'6\'. -----Sample Input 2:----- code9cuber5 -----Sample Output 2:----- code8cuber0 -----Explanation:----- - \'c\', \'o\', \'d\', \'e\', \'c\', \'u\', \'b\', \'e\', \'r\' remain unchanged. - \'9\' is replaced by \'18\', use \'8\' (unit part). - \'5\' is replaced by \'10\', use \'0\' (unit part).","solution":"def transformString(S: str) -> str: This function transforms the given string by doubling all numeric digits and taking the unit place digit. All lowercase letters remain unchanged. transformed = [] for char in S: if char.isdigit(): doubled_digit = int(char) * 2 transformed.append(str(doubled_digit % 10)) else: transformed.append(char) return \'\'.join(transformed)"},{"question":"You are given an array of integers where each integer represents the weight of an item. There is also a knapsack that can carry a limited amount of weight. Your task is to write a function to determine the maximum total weight that can be carried in the knapsack without exceeding the weight limit. # Function Signature ```python def knapsack(weights: List[int], max_weight: int) -> int: pass ``` # Input - `weights` (List[int]): A list of integers representing the weights of items. (1 <= len(weights) <= 100, 1 <= weights[i] <= 100) - `max_weight` (int): An integer representing the maximum weight the knapsack can carry. (1 <= max_weight <= 100) # Output - Return an integer representing the maximum total weight that can be carried in the knapsack without exceeding the `max_weight`. # Example ```python print(knapsack([1, 3, 4, 5], 7)) # Output: 7 print(knapsack([1, 2, 3, 8], 5)) # Output: 5 print(knapsack([2, 2, 4, 6], 10)) # Output: 10 ``` # Constraints - The number of items in the array does not exceed 100. - The weight of each item and the maximum weight of the knapsack are both between 1 and 100 (inclusive). - You may assume that all inputs are valid and no further input validation is required. # Notes - You can consider using a dynamic programming approach to solve this problem. - Think about how the classic 0/1 knapsack problem is solved and apply the same principles here.","solution":"from typing import List def knapsack(weights: List[int], max_weight: int) -> int: Determines the maximum total weight that can be carried in the knapsack without exceeding the weight limit. This is a classic 0/1 knapsack problem solved using dynamic programming. n = len(weights) dp = [0] * (max_weight + 1) for weight in weights: for w in range(max_weight, weight - 1, -1): dp[w] = max(dp[w], dp[w - weight] + weight) return dp[max_weight]"},{"question":"Given an array of integers and a target integer, determine if there are two distinct integers in the array that add up to the target. The function should return an array containing the indices of the two integers in ascending order. If no such pair exists, return an empty array. Example 1: Input: arr[] = {2, 7, 11, 15} target = 9 Output: [0, 1] Explanation: 2 + 7 = 9, and the indices of the integers 2 and 7 are 0 and 1. Example 2: Input: arr[] = {1, 2, 3, 4} target = 8 Output: [] Explanation: There are no two distinct elements in the array that add up to 8. Your Task: Complete the function `findPair` which takes an array of integers and a target integer as function arguments and returns an array containing the indices of the two integers in ascending order if such a pair exists. If no such pair exists, return an empty array. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= array length <= 10^6 -10^9 <= array elements <= 10^9 -10^9 <= target <= 10^9","solution":"def findPair(arr, target): Given an array of integers and a target integer, determine if there are two distinct integers in the array that add up to the target. The function should return an array containing the indices of the two integers in ascending order. If no such pair exists, return an empty array. num_to_index = {} for i, num in enumerate(arr): complement = target - num if complement in num_to_index: return sorted([num_to_index[complement], i]) num_to_index[num] = i return []"},{"question":"Given a string s consisting of lowercase English letters, you need to determine the minimum number of characters to be transformed (changed to any other character) so that no two adjacent characters are the same. Example 1: Input: s = \\"aab\\" Output: 1 Explanation: Transform one \'a\' into any other character to get \\"ab\\" or \\"ba\\". Example 2: Input: s = \\"aaaa\\" Output: 3 Explanation: Transform three \'a\'s into any other characters to get \\"ababa\\", \\"abab\\", or any other valid string. Your Task: You don\'t need to read or print anything. Your task is to complete the function `minTransformations(s)` which takes a string `s` as input and returns an integer which denotes the minimum number of characters to be transformed. Expected Time Complexity: O(N) Expected Space Complexity: O(1) Constraints: 1 <= s.length <= 10^5","solution":"def minTransformations(s): Returns the minimum number of characters to be transformed so that no two adjacent characters are the same. changes = 0 for i in range(1, len(s)): if s[i] == s[i - 1]: changes += 1 return changes"},{"question":"Reuse the structure and diagrams of Furik\'s stars problem for a new quiz game application. Your task is to help develop this feature by implementing object-oriented design principles to handle questions, answers, and scoring. **Problem Statement:** In this quiz game, there are multiple-choice questions, each with a set of possible answers, only one of which is correct. You need to design a program that: 1. Initializes a set of questions with specified correct answers. 2. Allows users to submit their answers for these questions. 3. Calculates the final score based on the correct answers. # Input: - First line contains an integer `n` (1 ≤ n ≤ 100) — number of questions. - Next `n` lines contain one question each in the following format: `Question?;Answer1;Answer2;Answer3;CorrectAnswer` # Output: - First line contains \\"Start Quiz\\". - For each question, print the question along with possible answers. - After the user provides their answers, print the final score in the format: \\"Your score is x out of n\\" # Sample: Input: ``` 2 What is 2+2?;1;2;4;3 What is the capital of France?;London;Berlin;Paris;3 ``` Output: ``` Start Quiz 1. 1 2. 2 3. 4 1. London 2. Berlin 3. Paris Please enter your answers (space-separated): 3 3 Your score is 2 out of 2 ``` # Note: Implement the required classes to handle the quiz game logic. Ensure your solution adheres to the principles of object-oriented programming. Handle user input and output as demonstrated in the sample. The final application should correctly initialize the quiz, process user input, and calculate the score based on the correct answers provided.","solution":"class Question: def __init__(self, question_text, answers, correct_answer_index): self.question_text = question_text self.answers = answers self.correct_answer_index = correct_answer_index def is_correct(self, answer_index): return answer_index == self.correct_answer_index class Quiz: def __init__(self): self.questions = [] self.score = 0 def add_question(self, question): self.questions.append(question) def start(self): print(\\"Start Quiz\\") for i, question in enumerate(self.questions, start=1): print(f\\"n{question.question_text}\\") for j, answer in enumerate(question.answers, start=1): print(f\\"{j}. {answer}\\") def submit_answers(self, answers): for question, user_answer in zip(self.questions, answers): if question.is_correct(user_answer - 1): self.score += 1 def get_score(self): return self.score def get_total_questions(self): return len(self.questions) def main(questions_data, user_input): quiz = Quiz() for q_data in questions_data: parts = q_data.split(\';\') question_text = parts[0] answers = parts[1:-1] correct_answer_index = int(parts[-1]) - 1 question = Question(question_text, answers, correct_answer_index) quiz.add_question(question) quiz.start() user_answers = list(map(int, user_input.split())) quiz.submit_answers(user_answers) score = quiz.get_score() total_questions = quiz.get_total_questions() print(f\\"Your score is {score} out of {total_questions}\\")"},{"question":"You are given an array of N integers, where each element represents the height of a pillar. The goal is to determine the maximum number of steps to climb the pillars. You can go to the next pillar if it is of the same height or higher. You can move to the next pillar only from the current one you are standing on. -----Constraints----- - 1 leq N leq 10^5 - 1 leq height leq 10^9 -----Input----- Input is given from Standard Input in the following format: N h_1 h_2 ... h_N -----Output----- Print the maximum number of steps that can be taken consecutively as per the rules. -----Sample Input----- 6 4 4 3 2 5 7 -----Sample Output----- 3 Explanation: - You can start on the first pillar of height 4. - You can step to the second pillar of height 4, as it is of the same height. - You cannot step to the third pillar, as its height is 3 which is less than 4. - You cannot start from the third pillar because the next pillar\'s height is smaller or start again from this point. - Starting again, from the fourth pillar (height 2), you can only step to the fifth (height 5) and then from fifth to sixth (height 7). Thus, the longest sequence of steps you can take is from heights 5 to 7, which is 3 steps.","solution":"def max_steps_to_climb_pillars(heights): Returns the maximum number of steps that can be taken consecutively from pillar to pillar by moving to the next pillar if it is of the same height or higher. Parameters: heights (list of int): A list of integers where each element represents the height of a pillar. Returns: int: The maximum number of consecutive steps that can be taken. max_steps = 0 current_steps = 0 for i in range(len(heights) - 1): if heights[i] <= heights[i + 1]: current_steps += 1 max_steps = max(max_steps, current_steps) else: current_steps = 0 # Add 1 to max_steps to reflect the count of steps not just the jumps. return max_steps + 1 if heights else 0"},{"question":"You are managing an inventory system for an online bookstore. Each warehouse maintains a stock of multiple book titles. Periodically, you need to either add new stock or disburse some books from the warehouse. Each book title has a unique identifier. Your task is to implement a function to process a batch of updates to the inventory and then compute the total stock count for each book title. Example Let `operations` be a list of tuples where each tuple consists of a book identifier and a count of books to add (positive integer) or remove (negative integer). E.g., operations = [(101, 5), (102, 7), (101, -2), (103, 10), (102, -3)] - +5 books to ID 101 - +7 books to ID 102 - -2 books from ID 101 - +10 books to ID 103 - -3 books from ID 102 The resulting inventory should be: - ID 101: 3 books (5 added, 2 removed) - ID 102: 4 books (7 added, 3 removed) - ID 103: 10 books (10 added) Function Description Complete the `updateInventory` function. updateInventory has the following parameter: - list operations: a list of tuples each with a book ID (an integer) and a count (an integer) Returns - dict: a dictionary where the keys are book IDs and values are the final counts of books Input Format The single line of input contains an integer `N` followed by `N` space-separated tuples: - an integer ID: the book’s unique identifier - an integer count: the number of books to add (positive) or remove (negative) Constraints - 1 ≤ N ≤ 1000 - -1000 ≤ count ≤ 1000 - 1 ≤ ID ≤ 10000 Output Format Return the inventory as a dictionary. Sample Input 5 (101, 5) (102, 7) (101, -2) (103, 10) (102, -3) Sample Output { 101: 3, 102: 4, 103: 10 } Explanation You process 5 operations to update the counts. The final inventory shows book ID 101 with 3 books, ID 102 with 4 books, and ID 103 with 10 books.","solution":"def updateInventory(operations): Update the inventory based on a list of operations. Parameters: operations (list of tuples): List of (book_id, count) indicating the changes in inventory. Returns: dict: Dictionary with book_id as keys and the final number of books as values. inventory = {} for book_id, count in operations: if book_id in inventory: inventory[book_id] += count else: inventory[book_id] = count return inventory"},{"question":"A local library has a computerized book cataloging system. However, the librarian has noticed that certain books are misplaced and need to be reorganized based on their unique catalog numbers. The librarian decided to use insertion sort to reorder the books, but he needs help implementing the sorting algorithm. Your task is to help the librarian by sorting the catalog numbers using insertion sort. Write a function to sort an array of integers using the insertion sort algorithm. # Input - The first line contains an integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer N, representing the number of books. - The second line of each test case contains N space-separated integers A1, A2, ..., AN, representing the catalog numbers of the books. # Output For each test case, output a single line containing the sorted catalog numbers, separated by spaces. # Constraints - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 1000 - 1 ≤ Ai ≤ 10^9 # Example Input: 2 5 12 4 5 3 8 3 1 2 3 Output: 3 4 5 8 12 1 2 3 # Explanation For the first test case, the sorted catalog numbers are [3, 4, 5, 8, 12]. For the second test case, the catalog numbers are already sorted, so the output is [1, 2, 3].","solution":"def insertion_sort(arr): Sorts an array using the insertion sort algorithm. for i in range(1, len(arr)): key = arr[i] j = i - 1 while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr def sort_catalog_numbers(test_cases): Sorts the catalog numbers for multiple test cases using insertion sort. Parameters: test_cases (list of tuples): Each tuple contains an integer N and a list of N integers. Returns: list of list of ints: Sorted catalog numbers for each test case. sorted_catalogs = [] for N, catalog in test_cases: sorted_catalogs.append(insertion_sort(catalog)) return sorted_catalogs"},{"question":"You\'re a developer at a software company that manages an online bookstore. Your task is to write a function to help the bookstore generate personalized reading recommendations. # Task Write a function `recommend_books(user_preferences, book_list)` that takes in two arguments: 1. `user_preferences`: A dictionary where the keys are genre names and the values are the user\'s rating for that genre (an integer from 1 to 5, with 5 being the highest). 2. `book_list`: A list of dictionaries, where each dictionary represents a book with the following keys: - \'title\': The title of the book (string) - \'genre\': The genre of the book (string) - \'rating\': The average rating of the book (float, from 1.0 to 5.0) The function should return a list of book titles recommended for the user. A book is recommended if: - The user’s preference rating for the book’s genre is at least 3. - The book’s average rating is at least 4.0. The returned list should be sorted by the book\'s average rating in descending order. If two books have the same average rating, sort them alphabetically by title. # Example ```python user_preferences = { \'Science Fiction\': 5, \'Fantasy\': 4, \'Mystery\': 3, \'Romance\': 2 } book_list = [ {\'title\': \'Dune\', \'genre\': \'Science Fiction\', \'rating\': 4.8}, {\'title\': \'The Hobbit\', \'genre\': \'Fantasy\', \'rating\': 4.6}, {\'title\': \'The Girl with the Dragon Tattoo\', \'genre\': \'Mystery\', \'rating\': 4.1}, {\'title\': \'Pride and Prejudice\', \'genre\': \'Romance\', \'rating\': 4.4}, {\'title\': \'Foundation\', \'genre\': \'Science Fiction\', \'rating\': 4.3}, {\'title\': \'Twilight\', \'genre\': \'Romance\', \'rating\': 3.9} ] recommend_books(user_preferences, book_list) ``` # The expected output would be: ```python [\'Dune\', \'The Hobbit\', \'Foundation\', \'The Girl with the Dragon Tattoo\'] ```","solution":"def recommend_books(user_preferences, book_list): Returns a list of book titles recommended for the user based on their preferences and book ratings. Parameters: - user_preferences: dict, where keys are genres and values are user\'s rating for that genre (1 to 5). - book_list: list of dicts, where each dict represents a book with \'title\', \'genre\', and \'rating\'. Returns: - list of book titles. # Filter books based on user preferences and book ratings recommended_books = [book for book in book_list if user_preferences.get(book[\'genre\'], 0) >= 3 and book[\'rating\'] >= 4.0] # Sort the recommended books by rating (descending) and title (alphabetically) if ratings are the same recommended_books.sort(key=lambda x: (-x[\'rating\'], x[\'title\'])) # Return the list of book titles return [book[\'title\'] for book in recommended_books]"},{"question":"Ram is interested in numbers that have a unique property called \\"Happy Numbers.\\" A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers. Ram needs your help to determine if a given number is a happy number. Input Format A single integer denoting the number to be checked. Output Format Output \\"YES\\" if the number is a happy number, otherwise output \\"NO\\". Constraints 1 ≤ N ≤ 10^{9} Sample Input 1 19 Sample Output 1 YES Sample Input 2 4 Sample Output 2 NO Explanation For the input 19: 1² + 9² = 82 8² + 2² = 68 6² + 8² = 100 1² + 0² + 0² = 1 Since it ends in 1, 19 is a happy number. For the input 4: 4² = 16 1² + 6² = 37 3² + 7² = 58 5² + 8² = 89 8² + 9² = 145 1² + 4² + 5² = 42 4² + 2² = 20 2² + 0² = 4 Since it loops endlessly without reaching 1, 4 is not a happy number.","solution":"def is_happy_number(n): Determine if the given number is a happy number. Parameters: n (int): The number to be checked. Returns: str: \\"YES\\" if the number is happy, otherwise \\"NO\\". def sum_of_squares(num): total = 0 while num > 0: digit = num % 10 total += digit * digit num //= 10 return total seen_numbers = set() while n != 1 and n not in seen_numbers: seen_numbers.add(n) n = sum_of_squares(n) return \\"YES\\" if n == 1 else \\"NO\\""},{"question":"Given a binary tree, write a program to find the largest value in each level of the tree. Example 1: Input: 1 / 3 2 / / 5 3 9 6 Output: [1, 3, 9, 6] Example 2: Input: 4 / 9 2 / 5 3 7 Output: [4, 9, 7] Your Task: You don\'t need to read or print anything. Your task is to complete the function largestValues() which takes the root of the binary tree as input parameter and returns a list containing the largest value in each level of the tree. Expected Time Complexity: O(N) Expected Space Complexity: O(N) Constraints: 1. The number of nodes in the tree will be in the range [0, 10^4]. 2. The value of each node will be in the range [−10^5, 10^5].","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def largestValues(root): if not root: return [] queue = deque([root]) result = [] while queue: level_size = len(queue) max_value = float(\'-inf\') for _ in range(level_size): node = queue.popleft() max_value = max(max_value, node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) result.append(max_value) return result"},{"question":"In a large metropolis, efficient traffic management is critical. A particular problem to solve is determining the smallest number of new roads that need to be added to ensure every intersection in a neighborhood is reachable from any other intersection. Each intersection is connected to other intersections through roads, but not all intersections may be directly connected by a single road. You need to analyze the city\'s current road map and suggest the minimum number of new roads to add to achieve this connectivity. -----Input----- The first line of the input contains of two space separated integers n and m where 1 leq n leq 1000 and 0 leq m leq n(n-1)/2. Here, n represents the number of intersections and m represents the number of existing roads. Each of the next m lines contains two space-separated integers u and v (1 leq u, v leq n, u neq v) indicating a bidirectional road exists between intersections u and v. -----Output----- The output contains one integer, the minimum number of new roads that need to be constructed to ensure all intersections are connected. -----Examples----- Sample Input: 4 2 1 2 3 4 Sample Output: 1 Explanation: In the sample input, there are 4 intersections but only two roads connecting (1-2) and (3-4). One more road is needed to connect the two clusters, e.g., adding a road between 2 and 3 or 1 and 3 will make the network fully connected. Therefore, the output is 1.","solution":"def minimum_new_roads_needed(n, m, roads): Calculate the minimum number of new roads needed to ensure all intersections are connected. :param n: int, number of intersections :param m: int, number of existing roads :param roads: list of tuples, each containing two integers u and v representing the intersections connected by a road :return: int, minimum number of new roads needed from collections import defaultdict, deque # Build the graph graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) # Function to perform BFS and find all nodes in a connected component def bfs(start, visited): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) visited = [False] * (n + 1) num_components = 0 # Count the number of connected components for i in range(1, n + 1): if not visited[i]: bfs(i, visited) num_components += 1 # The number of roads needed to connect c components is (c - 1) return num_components - 1"},{"question":"In a certain land, they have a unique way of identifying and logging messages. Each message is represented by a string of uppercase Latin letters (\\"A\\"-\\"Z\\"). To ensure every message log is unique and identifiable, they devised the following system: Each string can be rearranged by shifting its letters cyclically. For example, the string \\"ABCD\\" can be rearranged as \\"BCDA\\", \\"CDAB\\", \\"DABC\\", and then back to \\"ABCD\\". Given a message string, the task is to determine the lexicographically smallest string possible by any such cyclical rearrangement. Input The input consists of a single line containing the string of uppercase Latin letters, whose length does not exceed 105. Output Print the lexicographically smallest string that can be obtained by cyclically rearranging the input string. Examples Input ABCD Output ABCD Input CAB Output ABC Input BAA Output AAB Note In the first sample, \\"ABCD\\" is already the smallest lexicographically string. In the second sample, one of the possible rearrangements of \\"CAB\\" is \\"ABC\\" which is the smallest. In the third sample, rearranging \\"BAA\\" can give \\"AAB\\" which is the smallest.","solution":"def smallest_cyclic_shift(s): Returns the lexicographically smallest string which can be obtained by cyclically rearranging the input string s. n = len(s) cyclic_shifts = [s[i:] + s[:i] for i in range(n)] return min(cyclic_shifts)"},{"question":"In a beautiful city, there is a fantastic network of paths that connects various attractions. Each attraction is numbered and there are one-way paths between some of the attractions. Every path has a specific travel time associated with it. As a visitor, you want to minimize the time it takes to visit as many attractions as possible given a starting attraction. Your task is to write a program that finds the shortest path from a given starting attraction to any other attraction in the city. The city is designed in such a way that it may not be possible to reach some attractions from the starting point directly or indirectly. Each attraction is represented by a unique number starting from 0 to n-1. The paths are represented by a list of triplets (start, end, time), where \\"start\\" is the starting attraction number, \\"end\\" is the ending attraction number, and \\"time\\" is the travel time between these two attractions. Input The input consists of several test cases: - The first line contains an integer t, representing the number of test cases. - For each test case, the first line contains two integers n and m, denoting the number of attractions and the number of paths, respectively. - The following m lines each contain three integers start, end, and time, representing a one-way path from attraction \\"start\\" to attraction \\"end\\" with travel time \\"time\\". - The last line of each test case contains a single integer s, the starting attraction. You may assume: - 1 ≤ t ≤ 10 - 1 ≤ n ≤ 1000 - 0 ≤ m ≤ 5000 - 0 ≤ time ≤ 1000 - The graph may contain cycles. Output For each test case, output a single line of n space-separated integers, representing the minimum travel time from the starting attraction s to each of the other attractions in the city. If there is no path to a particular attraction, the output should be \\"INF\\" for that attraction. Example Input 2 4 4 0 1 1 0 2 4 1 2 2 2 3 1 0 3 3 0 1 2 1 2 3 0 2 5 1 Output 0 1 3 4 INF 0 3 Explanation In the first test case, the shortest path from attraction 0 to 1 is 1, to 2 is 3 (0->1->2), and to 3 is 4 (0->1->2->3). The output for the starting attraction 0 is: 0 1 3 4. In the second test case, there is no path from attraction 1 to 0, hence the output is INF. The output is: INF 0 3.","solution":"import heapq def dijkstra(n, edges, start): graph = [[] for _ in range(n)] for u, v, w in edges: graph[u].append((w, v)) distances = [float(\'inf\')] * n distances[start] = 0 min_heap = [(0, start)] while min_heap: current_distance, u = heapq.heappop(min_heap) if current_distance > distances[u]: continue for weight, v in graph[u]: distance = current_distance + weight if distance < distances[v]: distances[v] = distance heapq.heappush(min_heap, (distance, v)) return distances def find_shortest_paths(t, test_cases): results = [] for i in range(t): n, m, edges, s = test_cases[i] distances = dijkstra(n, edges, s) normalized_distances = [\\"INF\\" if d == float(\'inf\') else d for d in distances] results.append(normalized_distances) return results"},{"question":"Given a binary tree, the task is to complete the function deepestLeafSum() which returns an integer denoting the sum of the values of the nodes at the deepest level of the binary tree. Input: The first line of input contains an integer T denoting the number of test cases. Then T test cases follow. Each test case starts with an integer N denoting the number of nodes in the binary tree. The next line contains N space-separated values of the nodes in level-order traversal of the tree. If a node has no child, it is represented by -1. Output: For each test case, output the sum of the values of the nodes at the deepest level in the given binary tree. User Task: The task is to complete the function deepestLeafSum() which takes the binary tree and returns the sum of the values of the nodes at the deepest level in the binary tree. Constraints: 1 <= T <= 50 1 <= N <= 1000 1 <= Node Value <= 10^6 Example: Input: 2 7 1 2 3 4 5 -1 6 5 10 20 30 -1 40 Output: 10 40 Explanation: Testcase 1: The binary tree is: 1 / 2 3 / 4 5 6 The deepest level nodes are 4, 5, 6 and their sum is 4 + 5 + 6 = 15. Testcase 2: The binary tree is: 10 / 20 30 40 The deepest level node is 40 and its sum is 40.","solution":"from collections import deque class TreeNode: def __init__(self, key): self.data = key self.left = None self.right = None def deepestLeafSum(root): if not root: return 0 queue = deque([root]) current_sum = 0 while queue: current_sum = 0 level_size = len(queue) for _ in range(level_size): node = queue.popleft() current_sum += node.data if node.left: queue.append(node.left) if node.right: queue.append(node.right) return current_sum def buildTree(arr): if len(arr) == 0 or arr[0] == -1: return None root = TreeNode(arr[0]) queue = deque([root]) i = 1 while queue and i < len(arr): current = queue.popleft() if arr[i] != -1: current.left = TreeNode(arr[i]) queue.append(current.left) i += 1 if i < len(arr) and arr[i] != -1: current.right = TreeNode(arr[i]) queue.append(current.right) i += 1 return root def processTestCases(test_cases): results = [] for nodes in test_cases: root = buildTree(nodes) results.append(deepestLeafSum(root)) return results"},{"question":"Naomi is organizing a coding contest and wants to assign unique handles to each participant. Each handle must be made up of exactly N lowercase alphabetical characters (2 ≤ N ≤ 6). Additionally, she wants all handles to be lexicographically sorted. Naomi needs help in generating all possible handles of length N in sorted order. Write a program that generates all possible handles of length N in lexicographical order. Input The first line contains an integer t (1 ≤ t ≤ 10), the number of test cases. The next t lines each contain a single integer N. Output For each test case, print all handles of length N in sorted order, each on a new line. Example Input: 2 2 3 Output: aa ab ac ... az ba bb ... zy zz aaa aab aac ... zzz Explanation In the first example (N=2), we have all 2-letter combinations from \'aa\' to \'zz\'. The handles are printed in lexicographical order. For N=3, the handles range from \'aaa\' to \'zzz\', again in lexicographical order.","solution":"from itertools import product def generate_handles(N): Generates all possible handles of length N in lexicographical order. characters = \'abcdefghijklmnopqrstuvwxyz\' return [\'\'.join(handle) for handle in product(characters, repeat=N)] def generate_handles_for_test_cases(test_cases): Given a list of lengths (test cases), generate and print handles for each length. result = [] for N in test_cases: result.extend(generate_handles(N)) return result"},{"question":"Given an array of integers and an integer K, determine whether there is a pair of distinct elements in the array that adds up to K. Example 1: Input: arr = [10, 15, 3, 7], K = 17 Output: True Explanation: 10 + 7 = 17 Example 2: Input: arr = [1, 2, 3, 4, 5], K = 10 Output: False Explanation: There are no pairs of distinct elements in the array that add up to 10. Your Task: You don\'t need to read or print anything. Your task is to complete the function has_pair_with_sum() which takes an array arr and an integer K as input and returns a boolean indicating whether there is a pair with sum K. Expected Time Complexity: O(n) Expected Space Complexity: O(n) Constraints: 1 <= arr.length <= 10^6 -10^6 <= arr[i] <= 10^6 -10^6 <= K <= 10^6","solution":"def has_pair_with_sum(arr, K): Determines whether there is a pair of distinct elements in the array that adds up to K. seen = set() for num in arr: if K - num in seen: return True seen.add(num) return False"},{"question":"A spacecraft is on a mission to map a rectangular region of an alien planet. The region is divided into a grid of square cells, each of which may contain obstacles. The spacecraft can only move between adjacent cells if both cells are free of obstacles. The spacecraft starts at the top-left corner of the grid (cell (0,0)) and aims to reach the bottom-right corner of the grid (cell (n-1, m-1)). However, due to the unpredictable nature of the alien terrain, the spacecraft has a limited amount of fuel that determines the maximum number of cells it can visit, including the starting and ending cells. Write a program to determine whether the spacecraft can reach the destination cell (n-1, m-1) from the starting cell (0,0) without exceeding the fuel limit. The spacecraft can move up, down, left, or right, but cannot move diagonally. Input The first line contains three integers n, m, and f (1 ≤ n, m ≤ 100, 1 ≤ f ≤ 10^{4}) — the number of rows, the number of columns in the grid, and the maximum number of cells the spacecraft can visit with the available fuel, respectively. The next n lines each contain m characters — the grid representation. Each character is either \'.\' (indicating a free cell) or \'#\' (indicating an obstacle). Output Print \\"YES\\" if the spacecraft can reach the destination cell (n-1, m-1) within the given fuel limit, and \\"NO\\" otherwise. Examples Input 3 3 5 ... .#. ... Output YES Input 3 3 4 ... .#. ... Output NO Input 4 4 7 .... .#.. ..#. .... Output YES Note In the first example, the spacecraft can move right, right, down, down to reach the destination cell (5 cells, including the starting and ending cells). In the second example, the spacecraft cannot reach the destination cell within 4 cells, since the shortest path requires 5 cells. In the third example, the spacecraft takes this path: right, right, down, down, right, down. Total 7 cells, thus it\'s within the fuel limit.","solution":"def can_spacecraft_reach_destination(n, m, f, grid): from collections import deque def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 1)]) # (x, y, cells visited) visited = set((0, 0)) while queue: x, y, cells_visited = queue.popleft() if cells_visited > f: continue if x == n - 1 and y == m - 1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, cells_visited + 1)) return \\"NO\\""},{"question":"Sophie has a collection of n different books, each having a certain number of pages. She decides to distribute these books among k bookshelves such that each bookshelf gets at least one book. The books on each shelf must be arranged in non-decreasing order of the number of pages. You need to determine a way to distribute the books on the bookshelves adhering to Sophie’s constraints or state that it is not possible. -----Input----- The first line contains a single integer t (1 le t le 10^4) — the number of test cases. For each test case, the first line contains two integers n (1 le n le 2 cdot 10^5) and k (1 le k le n). The second line of each test case contains n integers p_1, p_2, ldots, p_n (1 le p_i le 10^9) denoting the number of pages in the books. It is guaranteed that the sum of n over all test cases does not exceed 2 cdot 10^5. -----Output----- For each test case, print a single line: print YES if it is possible to distribute the books as described, otherwise print NO. You may print each letter in any case (for example, YES, Yes, yes, yEs will all be recognized as a positive answer). -----Examples----- Input 4 5 3 5 2 9 3 4 6 2 10 20 15 5 25 30 4 4 1 4 3 2 3 5 1 2 3 Output YES YES YES NO -----Note----- In the first test case, you can distribute the books as follows: - 1st shelf: [2, 3] - 2nd shelf: [4] - 3rd shelf: [5, 9] In the second test case, you can distribute the books as follows: - 1st shelf: [5, 15, 20] - 2nd shelf: [10, 25, 30] In the third test case, you can distribute the books as follows: - 1st shelf: [1] - 2nd shelf: [2] - 3rd shelf: [3] - 4th shelf: [4] In the fourth test case, it is not possible to distribute 3 books onto 5 bookshelves such that each shelf gets at least one book. Hence, the answer is NO.","solution":"def can_distribute_books(t, test_cases): results = [] for i in range(t): n, k = test_cases[i][0] pages = test_cases[i][1] # If there are fewer books than bookshelves, it\'s impossible if n < k: results.append(\'NO\') continue # Sort the pages to arrange in non-decreasing order pages.sort() # Check if it is possible to place books on each shelf # such that each shelf has at least one book and the books are in non-decreasing order valid = True for j in range(k - 1): if pages[j] == pages[j + 1]: valid = False break if valid: results.append(\'YES\') else: results.append(\'NO\') return results # Example usage: t = 4 test_cases = [ [(5, 3), [5, 2, 9, 3, 4]], [(6, 2), [10, 20, 15, 5, 25, 30]], [(4, 4), [1, 4, 3, 2]], [(3, 5), [1, 2, 3]] ] print(can_distribute_books(t, test_cases)) # Output: [\'YES\', \'YES\', \'YES\', \'NO\']"},{"question":"In a programming competition, you are given a string containing only two types of characters: \'A\' and \'B\'. You are required to transform this string into a beautiful string with the following property: - The resulting string should not contain any instance of three consecutive \'A\'s or three consecutive \'B\'s. You are allowed to perform the following operation as many times as needed: - Choose any two adjacent characters in the string and swap them. Write a program that determines the minimum number of swaps required to make the string beautiful. If it is impossible to make the string beautiful, return -1. Constraints * 1 ≤ length of the string ≤ 10^5 * The string contains only characters \'A\' and \'B\' Input Input is given from Standard Input in the following format: ``` s ``` where `s` is the string containing only \'A\'s and \'B\'s. Output Output the minimum number of swaps required to make the string beautiful, or -1 if it is impossible. Examples Input ``` AAABBBAA ``` Output ``` 2 ``` Input ``` AAAA ``` Output ``` -1 ``` Input ``` AABBAABB ``` Output ``` 0 ``` Input ``` ABABABAB ``` Output ``` 0 ```","solution":"def minimum_swaps_to_beautiful(s): i = 0 swaps = 0 while i < len(s) - 2: if s[i] == s[i+1] == s[i+2]: # We found three consecutive characters if i + 3 < len(s) and s[i] == s[i+3]: # If there is another same character after three consecutive characters, break it up swaps += 1 i += 3 else: # Only need to swap adjacent characters to break up three consecutive ones swaps += 1 i += 3 else: i += 1 # Check if there are no valid configuration, but according to the swapping logic and constraints, it should be possible to transform return swaps # Read input if __name__ == \\"__main__\\": import sys s = sys.stdin.read().strip() print(minimum_swaps_to_beautiful(s))"},{"question":"Anna is practicing her math skills with sequences. She has recently come across a peculiar sequence called the \\"Tribonacci sequence.\\" The Tribonacci sequence is defined as follows: - T(0) = 0, T(1) = 1, and T(2) = 1 - For each n ≥ 3, T(n) = T(n-1) + T(n-2) + T(n-3) Anna wants to write a program that calculates the nth Tribonacci number. Can you help her with this task? -----Input----- The input consists of a single integer n (0 ≤ n ≤ 35), which represents the position in the Tribonacci sequence. -----Output----- Output a single integer that is the nth Tribonacci number. -----Examples----- Example 1: Input: 0 Output: 0 Example 2: Input: 4 Output: 4 Example 3: Input: 10 Output: 149 -----Note----- In the example 3, the sequence of Tribonacci numbers up to T(10) is: 0, 1, 1, 2, 4, 7, 13, 24, 44, 81, 149.","solution":"def tribonacci(n): Returns the nth Tribonacci number. if n == 0: return 0 elif n == 1 or n == 2: return 1 t0, t1, t2 = 0, 1, 1 for _ in range(n - 2): t_next = t0 + t1 + t2 t0, t1, t2 = t1, t2, t_next return t2"},{"question":"Ivan wants to set up a network of servers for his company. He has n servers, labeled from 1 to n, and each server can be directly connected to one or more other servers. If two servers are directly connected, they can communicate with each other. He wants every server to be able to communicate with every other server, either directly or indirectly. To do this, he can add a certain number of new direct connections between pairs of servers. What is the minimum number of new direct connections needed to be added to ensure that all servers can communicate with each other? -----Input----- The first line contains two integers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ 4500) — the number of servers and the number of already existing direct connections between them. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n) — indicating that there is a direct connection between server u and server v. It is guaranteed that there can be no multiple connections between the same pair of servers and no server connects to itself. -----Output----- Print a single integer — the minimum number of new direct connections needed to ensure that every server can communicate with every other server. -----Examples----- Input 4 2 1 2 3 4 Output 1 Input 3 1 1 2 Output 1 Input 5 0 Output 4 -----Note----- In the first test case, we already have two components: {1, 2} and {3, 4}. We just need one new connection, for example, between 2 and 3, to make sure all servers can communicate. In the second test case, we need one more connection to make all three servers communicate. For instance, adding a connection between 2 and 3. In the third test case, initially, there are no direct connections. We need at least four new connections to make all servers communicate. For example, adding connections between 1-2, 2-3, 3-4, and 4-5.","solution":"def min_connections_needed(n, m, connections): from collections import defaultdict, deque # Build initial adjacency list representation of the graph adj_list = defaultdict(list) for u, v in connections: adj_list[u].append(v) adj_list[v].append(u) def bfs(start_node, visited): queue = deque([start_node]) visited[start_node] = True while queue: node = queue.popleft() for neighbor in adj_list[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) # To find the number of disconnected components visited = [False] * (n + 1) components = 0 for i in range(1, n + 1): if not visited[i]: bfs(i, visited) components += 1 # The minimum number of connections needed is one less than the number of components return components - 1"},{"question":"Given a sequence of N positive integers, determine the length of the longest contiguous subarray that contains at most two distinct numbers. -----Constraints----- - 1 leq N leq 10^6 - 1 leq sequence[i] leq 10^9 -----Input----- Input is given from standard input in the following format: N sequence[1] sequence[2] ... sequence[N] -----Output----- Print the length of the longest contiguous subarray that contains at most two distinct numbers. -----Sample Input----- 7 1 2 1 2 3 1 3 -----Sample Output----- 4 Explanation: The subarray [1, 2, 1, 2] contains exactly two distinct numbers and is the longest contiguous subarray that satisfies the condition.","solution":"def length_of_longest_subarray_with_two_distinct_numbers(n, sequence): Returns the length of the longest contiguous subarray with at most two distinct numbers. if n == 0: return 0 start = 0 max_length = 0 freq_map = {} for end in range(n): current_num = sequence[end] if current_num in freq_map: freq_map[current_num] += 1 else: freq_map[current_num] = 1 while len(freq_map) > 2: freq_map[sequence[start]] -= 1 if freq_map[sequence[start]] == 0: del freq_map[sequence[start]] start += 1 max_length = max(max_length, end - start + 1) return max_length"},{"question":"You are given an array of integers where each element represents the maximum length you can jump forward from that position. Write a function `canReachEnd(arr)` that determines if you can reach the last index starting from the first index. You can assume that the input array will contain at least one element and that all elements are non-negative integers. # Examples Example 1: ``` Input: [2, 3, 1, 1, 4] Output: True Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index. ``` Example 2: ``` Input: [3, 2, 1, 0, 4] Output: False Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index. ``` # Function Signature ```python def canReachEnd(arr: List[int]) -> bool: ``` # Constraints - The array will contain at least one element. - All elements of the array are non-negative integers.","solution":"def canReachEnd(arr): Determines if you can reach the last index starting from the first index. Parameters: arr (List[int]): list of non-negative integers where each element represents the maximum length you can jump forward from that position. Returns: bool: True if you can reach the last index, False otherwise. max_reach = 0 for i, jump in enumerate(arr): if i > max_reach: return False max_reach = max(max_reach, i + jump) if max_reach >= len(arr) - 1: return True return False"},{"question":"Alice is fascinated by prime numbers. She wants to generate a list of primes from 1 to N and calculate the sum of these prime numbers. As the number N can be very large, she wants an efficient way to achieve this. Could you help Alice by providing a function that performs the following tasks? 1. Generates all prime numbers from 1 to N. 2. Calculates the sum of these prime numbers. Input: The input consists of a single integer N (1 ≤ N ≤ 10^6), representing the upper bound of the range. Output: Output a single integer, the sum of all prime numbers from 1 to N. Example: Input: 10 Output: 17 Explanation: The prime numbers from 1 to 10 are 2, 3, 5, and 7. Their sum is 17.","solution":"def sum_of_primes(N): Returns the sum of all prime numbers from 1 to N. if N < 2: return 0 sieve = [True] * (N + 1) sieve[0] = sieve[1] = False for start in range(2, int(N**0.5) + 1): if sieve[start]: for multiple in range(start*start, N + 1, start): sieve[multiple] = False prime_sum = sum(index for index, is_prime in enumerate(sieve) if is_prime) return prime_sum"},{"question":"Dr. B\'s Animal Shelter is conducting a data analysis to streamline the process of feeding the animals. The shelter has details of different animals including their species, age, and feeding requirements in terms of the type and quantity of food they need. Dr. B wants to determine the total amount of each type of food needed per day to help in planning the purchase of supplies. You’re given a list of animals and their respective feed requirements. Each animal\'s feeding requirement is provided as a list of tuples, where each tuple contains the type of food and the quantity needed. The goal is to compute the total quantity required for each type of food. Function Signature: ```python def calculate_total_feed(animals: List[Dict[str, Union[str, int, List[Tuple[str, int]]]]]) -> Dict[str, int]: pass ``` # Input - `animals`: A list of dictionaries, where each dictionary represents one animal. - Each dictionary has the following keys: - `\\"species\\"`: A string representing the species of the animal. - `\\"age\\"`: An integer representing the age of the animal. - `\\"feeding_requirements\\"`: A list of tuples where each tuple contains: - `food_type`: A string representing the type of food. - `quantity`: An integer representing the quantity of food required. # Output - A dictionary where keys are food types and values are the total quantities of the respective food types required per day. # Constraints - 1 ≤ len(animals) ≤ 100 - 1 ≤ age ≤ 30 - 1 ≤ quantity ≤ 100 - Each animal has between 1 and 5 different feeding requirements. # Example **Input:** ```python animals = [ {\\"species\\": \\"Dog\\", \\"age\\": 5, \\"feeding_requirements\\": [(\\"Dry Food\\", 2), (\\"Water\\", 1)]}, {\\"species\\": \\"Cat\\", \\"age\\": 3, \\"feeding_requirements\\": [(\\"Dry Food\\", 1), (\\"Water\\", 1)]}, {\\"species\\": \\"Parrot\\", \\"age\\": 2, \\"feeding_requirements\\": [(\\"Seeds\\", 3), (\\"Water\\", 1)]} ] ``` **Output:** ```python { \\"Dry Food\\": 3, \\"Water\\": 3, \\"Seeds\\": 3 } ``` # Explanation: - \\"Dry Food\\": 2 (Dog) + 1 (Cat) = 3 - \\"Water\\": 1 (Dog) + 1 (Cat) + 1 (Parrot) = 3 - \\"Seeds\\": 3 (Parrot) = 3","solution":"from typing import List, Dict, Tuple, Union def calculate_total_feed(animals: List[Dict[str, Union[str, int, List[Tuple[str, int]]]]]) -> Dict[str, int]: total_feed = {} for animal in animals: for food_type, quantity in animal[\\"feeding_requirements\\"]: if food_type in total_feed: total_feed[food_type] += quantity else: total_feed[food_type] = quantity return total_feed"},{"question":"Given a list of N strings, each with a length of 15 consisting of lowercase English letters, determine the maximum number of strings that have at least one common letter with every other string in the list. In other words, find the size of the largest subset of strings where each string in the subset shares at least one letter with every other string in the subset. -----Constraints----- - 2 leq N leq 200 - Each string has exactly 15 lowercase English letters. -----Input----- Input is given from Standard Input in the following format: N s_1 s_2 : s_N -----Output----- Print the size of the largest subset of strings such that each string in the subset has at least one letter in common with every other string in the subset. -----Sample Input----- 4 abcdefghijklmno mnopqrstuvwxyz ghijklmnopqrstuv abcxyzdefmnop -----Sample Output----- 4 Each of the four strings contains letters that overlap with each of the other strings in the list, so the entire set of 4 strings is a valid subset. Therefore, the answer is 4.","solution":"def max_common_subset(strings): Determines the size of the largest subset of strings where each string has at least one letter in common with every other string in the subset. N = len(strings) # Create a list of sets containing the characters for each string char_sets = [set(s) for s in strings] max_subset_size = 0 # Try all subsets from 2^N possible subsets for i in range(1, 1 << N): subset = [] for j in range(N): if i & (1 << j): subset.append(char_sets[j]) # Check if it is a valid subset is_valid = True for k in range(len(subset)): for l in range(k + 1, len(subset)): if not subset[k].intersection(subset[l]): is_valid = False break if not is_valid: break if is_valid: max_subset_size = max(max_subset_size, len(subset)) return max_subset_size def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) strings = data[1:] result = max_common_subset(strings) print(result)"},{"question":"Your friend has recently opened a bakery and is starting to get into the world of online orders. They have a unique way of offering discounts to their customers. For every order, the customer gets a discount based on the number of pastries they buy. The discount rules are: - For every 10 pastries bought, the customer gets a 20% discount on those pastries. - For every 5 pastries bought (but less than 10), the customer gets a 10% discount on those pastries. - For every 1 pastry bought (but less than 5), there is no discount. You are tasked with creating a function to calculate the total cost for any given number of pastries. The cost of a single pastry is fixed at 2.00. Write a function that takes an integer representing the number of pastries as input and returns the total cost after applying the discounts. The returned number must be rounded to two decimal places.","solution":"def calculate_total_cost(pastries): Calculates the total cost of pastries with given discounts. Parameters: pastries (int): Number of pastries bought Returns: float: Total cost after applying discounts, rounded to two decimal places cost_per_pastry = 2.00 if pastries >= 10: total_cost = pastries * cost_per_pastry * 0.80 elif pastries >= 5: total_cost = pastries * cost_per_pastry * 0.90 else: total_cost = pastries * cost_per_pastry return round(total_cost, 2)"},{"question":"Given an integer array of size N, your task is to complete the function findEquilibriumIndex() that should return the equilibrium index of the array. An equilibrium index of an array is an index such that the sum of elements at lower indices is equal to the sum of elements at higher indices. Input: First line of input contains the number of test cases T. For each test case, there will be two lines: First line of each test case will be an integer N denoting the size of the array. Second line of each test case will contain N space separated integers representing the elements of the array. Output: The function should return the equilibrium index. If no equilibrium index exists, return -1. User Task: As it is a functional problem, you don\'t need to worry about the input, you just have to complete the function findEquilibriumIndex() that takes an integer array and its size as parameters and returns the equilibrium index. Constraints: 1<=T<=100 1<=N<=10^5 Example: Input: 2 5 -7 1 5 2 -4 3 0 4 1 2 3 4 Output: 3 -1 Note: The Input/Output format and Example given are used for system\'s internal purpose, and should be used by a user for Expected Output only. As it is a function problem, hence a user should not read any input from stdin/console. The task is to complete the function specified, and not to write the full code.","solution":"def findEquilibriumIndex(arr, n): Finds the equilibrium index in the array where the sum of elements at lower indices is equal to the sum of elements at higher indices. If no such index exists, returns -1. total_sum = sum(arr) left_sum = 0 for i in range(n): # If left sum is equal to total_sum minus the current element # and the left sum itself, we\'ve found the equilibrium index if left_sum == (total_sum - arr[i] - left_sum): return i left_sum += arr[i] return -1"},{"question":"Given an array of integers, find the length of the longest subarray with elements that can be rearranged to form a consecutive sequence. Input Format The first line contains a single integer n, the number of elements in the array. The second line contains n integers, representing the elements of the array. Output Format Print the length of the longest subarray with elements that can be rearranged to form a consecutive sequence. Constraints 1 ≤ n ≤ 100,000 1 ≤ array[i] ≤ 1,000,000 SAMPLE INPUT 7 1 2 3 4 100 2 3 SAMPLE OUTPUT 4 Explanation Test case 1: The longest subarray with consecutive elements is [1, 2, 3, 4] which is of length 4. Although there is another segment [2, 3, 4] within the array, the length 3 is shorter than 4.","solution":"def longest_consecutive_subarray_length(arr): Returns the length of the longest subarray in which elements can be rearranged to form a consecutive sequence. if not arr: return 0 max_length = 0 num_set = set(arr) for num in num_set: # Only check for the start of a potential sequence if num - 1 not in num_set: current_num = num current_length = 1 while current_num + 1 in num_set: current_num += 1 current_length += 1 max_length = max(max_length, current_length) return max_length"},{"question":"Chess Master You are developing a chess application that needs to determine the least number of moves for a Knight to reach a target position on a standard 8x8 chessboard. The Knight moves in an \\"L\\" shape: two squares in one direction and then one square perpendicular, or one square in one direction and then two squares perpendicular. Given the starting position and the target position, your task is to calculate the minimum number of moves required for the Knight to reach the target position. Input: The input consists of multiple datasets. Each dataset is represented in the following format: > X0 Y0 X1 Y1 The dataset consists of a single line containing four integers: the starting position (X0, Y0) and the target position (X1, Y1). The integers satisfy 1 ≤ X0, Y0, X1, Y1 ≤ 8. Input terminates with a line containing four zeros separated by spaces. Output: For each dataset, print the minimum number of moves for the Knight to reach the target position in one line. Example Input: > 1 1 8 8 > 1 1 2 3 > 1 1 8 7 > 0 0 0 0 Example Output: > 6 > 1 > 5 Explanation: In the first example, it takes 6 moves for the Knight to move from (1, 1) to (8, 8). In the second example, it takes only 1 move to move from (1, 1) to (2, 3). In the third example, it takes 5 moves to move from (1, 1) to (8, 7).","solution":"from collections import deque def knight_moves(start_x, start_y, target_x, target_y): directions = [ (2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2) ] def is_within_bounds(x, y): return 1 <= x <= 8 and 1 <= y <= 8 if (start_x, start_y) == (target_x, target_y): return 0 queue = deque([(start_x, start_y, 0)]) # (current_x, current_y, moves) visited = set((start_x, start_y)) while queue: current_x, current_y, moves = queue.popleft() for dx, dy in directions: next_x, next_y = current_x + dx, current_y + dy if (next_x, next_y) == (target_x, target_y): return moves + 1 if is_within_bounds(next_x, next_y) and (next_x, next_y) not in visited: visited.add((next_x, next_y)) queue.append((next_x, next_y, moves + 1)) return -1 # If the position cannot be reached; should not happen on a standard chessboard. def process_datasets(data): results = [] for dataset in data: X0, Y0, X1, Y1 = dataset if X0 == Y0 == X1 == Y1 == 0: break results.append(knight_moves(X0, Y0, X1, Y1)) return results"},{"question":"Given an array of positive integers, imagine a scenario where you have to repeatedly remove the smallest element and its duplicates, and then double each remaining element\'s value. You need to determine the number of elements removed in each step until the array is empty. For example, if you start with the array: 4 3 1 2 2 1 In the first step, you remove all 1s. The array becomes: 4 3 2 2 Next, you double each remaining element\'s value: 8 6 4 4 In the second step, remove all 4s. The array becomes: 8 6 Next, double each remaining element\'s value: 16 12 In the third step, remove all 12s. The array becomes: 16 Finally, double the remaining element\'s value: 32 In the fourth step, remove the last element, 32, making the array empty. Given such an array, print the count of elements removed in each step until the array is empty. Input Format The first line contains a single integer N, the size of the array. The second line contains N integers separated by spaces, representing the elements of the array. Output Format For each step, print the number of elements removed in a separate line. Constraints 1 ≤ N ≤ 1000 1 ≤ array[i] ≤ 1000 SAMPLE INPUT 6 4 3 1 2 2 1 SAMPLE OUTPUT 2 2 1 1","solution":"def remove_and_double(array): removed_counts = [] while array: # Find the smallest element smallest = min(array) # Count how many times the smallest element occurs and remove them count = array.count(smallest) removed_counts.append(count) array = [x for x in array if x != smallest] # Double the remaining elements array = [2 * x for x in array] return removed_counts"},{"question":"You are given a large number of pebbles that need to be arranged in perfect square formations. Each formation should use the exact same number of pebbles, and the number of formations should be as large as possible. Determine the maximum number of formations that can be created where each formation is a perfect square. Constraints 1 ≤ N ≤ 10^(10^5) Input The first line of input contains N. Output Output a single line containing the maximum number of square formations, or \\"IMPOSSIBLE\\" if no such formations can be created. Example Input: 16 Output: 4 Explanation 16 pebbles can be arranged in 4 perfect square formations (each formation having 1 pebble). The number of formations is maximum with this arrangement.","solution":"def max_square_formations(N): Returns the maximum number of square formations that can be created from a given number of pebbles N, where each formation is a perfect square. # Calculate the largest possible integer k where k^2 <= N k = int(N ** 0.5) # Calculate the maximum number of square formations # This is the largest k such that k^2 <= N max_formations = k return max_formations"},{"question":"Given an array of integers, rearrange the array such that every maximum element is followed by the minimum element from the remaining elements. Continue this process until all elements are rearranged. Example 1: Input: arr = [1, 2, 3, 4, 5, 6] Output: [6, 1, 5, 2, 4, 3] Explanation: The maximum element is 6, and the minimum element is 1. Remove 6 and 1 from the list. Now, arr = [2, 3, 4, 5]. The next maximum element is 5, and the minimum element from the remaining is 2. Remove 5 and 2 from the list. Now, arr = [3, 4]. The next maximum element is 4, and the minimum element from the remaining is 3. Example 2: Input: arr = [7, 8, 1, 4, 2, 3] Output: [8, 1, 7, 2, 4, 3] Explanation: The maximum element is 8, and the minimum element is 1. Remove 8 and 1 from the list. Now, arr = [7, 2, 3, 4]. The next maximum element is 7, and the minimum element from the remaining is 2. Remove 7 and 2 from the list. Now, arr = [3, 4]. The next maximum element is 4, and the minimum element from the remaining is 3. Your task: You don\'t need to read input or print anything. Your task is to complete the function rearrange() which takes an array of integers as input and returns the rearranged array. Expected Time Complexity: O(n log n) Expected Auxiliary Space: O(n) Constraints: 1 <= arr.length <= 10^5 1 <= arr[i] <= 10^9","solution":"def rearrange(arr): Rearrange the array such that every maximum element is followed by the minimum element from the remaining elements. # Sort the array arr.sort() # Initialize pointers for the minimum and maximum elements left, right = 0, len(arr) - 1 result = [] # Alternate between max and min while left <= right: if left != right: # Add both max and min result.append(arr[right]) result.append(arr[left]) else: # When only one element is left result.append(arr[left]) left += 1 right -= 1 return result"},{"question":"Grace has a string consisting of lowercase English letters. She wants to rearrange the string such that no two adjacent characters are the same. If it\'s possible to rearrange the string in such a way, return the rearranged string. If there are multiple possible rearranged strings, return any one of them. If it is not possible to rearrange the string, return an empty string. -----Input----- A single line containing the string s (1 le |s| le 10^5). -----Output----- If it\'s possible to rearrange the string such that no two adjacent characters are the same, return the rearranged string. Otherwise, return an empty string. -----Examples----- Input aabb Output abab Input aaab Output (empty string) Input aaabbc Output ababca -----Note----- In the first example, one possible way to rearrange the string is \\"abab\\". In the second example, it\'s not possible to rearrange the string such that no two adjacent characters are the same, hence the output is an empty string. In the third example, one possible way to rearrange the string is \\"ababca\\".","solution":"from collections import Counter import heapq def rearrange_string(s): Rearranges the string such that no two adjacent characters are the same. If it\'s not possible, returns an empty string. # Count frequency of each character counter = Counter(s) max_heap = [(-freq, char) for char, freq in counter.items()] heapq.heapify(max_heap) prev_freq, prev_char = 0, \'\' result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) prev_freq, prev_char = freq + 1, char rearranged_string = \'\'.join(result) if len(rearranged_string) != len(s): return \\"\\" return rearranged_string"},{"question":"A robotics company is developing autonomous delivery robots that need to deliver parcels to various locations in a city represented as a grid. Each robot has a limited amount of battery life and must plan its delivery route to maximize the number of deliveries it can make before needing to recharge. Your task is to write a program that calculates the maximum number of deliveries a robot can make given the starting position, battery life, and delivery points. Input The input consists of multiple datasets. Each dataset has the following format: B R sx sy b1 x1 y1 b2 x2 y2 ... bR xR yR B is the battery life of the robot (1 ≤ B ≤ 10000); R is the number of delivery points (1 ≤ R ≤ 100); (sx, sy) denotes the starting position of the robot; bi is the battery cost to reach the i-th delivery point from the last position. (xi, yi) is the position of the i-th delivery point. Assume that the grid coordinates and battery costs are integers between 0 and 10000 inclusive. The coordinates of the delivery points are distinct. The last dataset is followed by a line containing a zero, which is not a part of any dataset and should not be processed. Output For each dataset, print the maximum number of deliveries a robot can make in a line. Example Input 100 3 0 0 10 1 1 20 2 2 30 3 3 0 Output 3","solution":"def max_deliveries(battery_life, deliveries): Calculates the maximum number of deliveries a robot can make given its battery life and delivery points. :param battery_life: int, initial battery life of the robot :param deliveries: list of tuples (battery_cost, x, y) for each delivery point :return: int, maximum number of deliveries deliveries.sort() # Sort deliveries by battery cost in ascending order completed_deliveries = 0 current_battery = battery_life for battery_cost, x, y in deliveries: if current_battery >= battery_cost: current_battery -= battery_cost completed_deliveries += 1 else: break return completed_deliveries def parse_input(input_data): lines = input_data.strip().split(\'n\') index = 0 results = [] while index < len(lines): line = lines[index] if line == \\"0\\": break battery_life, num_deliveries = map(int, line.split()) index += 1 start_position = tuple(map(int, lines[index].split())) index += 1 deliveries = [] for _ in range(num_deliveries): battery_cost, x, y = map(int, lines[index].split()) deliveries.append((battery_cost, x, y)) index += 1 results.append(max_deliveries(battery_life, deliveries)) return results # Example input processing input_data = 100 3 0 0 10 1 1 20 2 2 30 3 3 0 results = parse_input(input_data) for result in results: print(result)"},{"question":"In a popular programming contest, there is a particular type of problem that involves arrays and queries. You are given an array of integers. The task is to handle multiple queries that ask for the maximum value within a specified subarray. Disco lives in an apartment with an N-length corridor numbered from 1 to N, where each room is surveyed according to their ambient temperatures by Temperature Authority. We will consider temperature readings as an array of integers, where the value at each index denotes the temperature of the room. Disco is interested in knowing what the maximum temperature is in any given segment of the corridor. You need to answer Q queries. Each query is of the form l r, which means \\"What is the maximum temperature from room l to room r?\\" ------ Input ------ - The first line contains two integers N (1 ≤ N ≤ 2 cdot 10^5) and Q (1 ≤ Q ≤ 10^5), denoting the length of the corridor and the number of queries. - The second line contains N space-separated integers representing temperature readings of the rooms (strongly guaranteed, -10^9 ≤ temperature ≤ 10^9). - The next Q lines contain two integers l and r (1 ≤ l ≤ r ≤ N). ------ Output ------ Output Q lines, each containing the maximum temperature from room l to room r based on the given readings. ------ Sample Input ------ 5 3 1 2 3 4 5 1 3 2 4 3 5 ------ Sample Output ------ 3 4 5 ------ Explanation ------ Query 1: The maximum temperature from room 1 to room 3 is 3. Query 2: The maximum temperature from room 2 to room 4 is 4. Query 3: The maximum temperature from room 3 to room 5 is 5. ------ Constraints ------ The Array should be pre-processed so that any query for maximum temperature in constant time O(1) and preprocessing in O(N log N).","solution":"def preprocess_temperatures(temperatures): Preprocess the temperature readings using a sparse table to allow for constant time maximum range queries. import math # Number of rooms n = len(temperatures) # Determine max power of 2 needed for the sparse table max_log = math.floor(math.log2(n)) + 1 # Initialize the sparse table st = [[0] * max_log for _ in range(n)] # Initialize the first column of the sparse table for i in range(n): st[i][0] = temperatures[i] # Fill the sparse table j = 1 while (1 << j) <= n: i = 0 while (i + (1 << j) - 1) < n: st[i][j] = max(st[i][j - 1], st[i + (1 << (j - 1))][j - 1]) i += 1 j += 1 return st def query_max(st, l, r): Query the maximum value in the range [l, r] using the preprocessed sparse table. import math # Calculate the length of the range length = r - l + 1 # Calculate the largest power of 2 less than or equal to length k = math.floor(math.log2(length)) # Return the maximum value in the range return max(st[l][k], st[r - (1 << k) + 1][k]) def answer_queries(n, temperatures, queries): Answer all queries using the preprocessed sparse table. # Convert 1-based queries to 0-based queries = [(l-1, r-1) for l, r in queries] # Preprocess temperatures st = preprocess_temperatures(temperatures) # Answer each query results = [] for l, r in queries: results.append(query_max(st, l, r)) return results"},{"question":"Salina loves creating beautiful necklaces using different colored beads. Each necklace is represented as a string of lowercase letters, where each letter corresponds to a bead of a particular color. When creating a necklace, she can start with any bead and go around in clockwise direction. She wants to know how many unique necklaces she can create by rotating the beads in any possible way. For example, the necklace \\"abc\\" can appear as \\"abc\\", \\"bca\\", and \\"cab\\" depending on where she starts. Help Salina find out the number of unique necklaces she can create using a given string of beads. -----Input----- The input is a single string `t` (1 ≤ |t| ≤ 50), representing the necklace. The string `t` consists only of lowercase English letters (\'a\'–\'z\'). -----Output----- Output a single integer, which is the number of unique necklaces (distinct strings) that can be formed by rotating the original string any number of times. -----Examples----- Input mnmn Output 2 Input aaaaa Output 1 Input xyz Output 3 -----Note----- For the first sample, the unique necklaces are \\"mnmn\\" and \\"nmmn\\". For the second sample, the only necklace that can be formed is \\"aaaaa\\". For the third sample, the unique necklaces are \\"xyz\\", \\"yzx\\", and \\"zxy\\".","solution":"def unique_necklaces(t): Returns the number of unique necklaces formable by rotating the input string `t`. rotations = {t[i:] + t[:i] for i in range(len(t))} return len(rotations)"},{"question":"Professor Frink is experimenting with combinations of chemicals to create a powerful new potion. Each chemical is represented by a positive integer, and each integer has a specific potency value. The professor wants to ensure that the total potency of the selected chemicals is an even number. You\'re given an array of integers, where each integer represents the potency value of a chemical. You need to determine if it is possible to select a subset (including the possibility of selecting no chemicals) of these chemicals such that the sum of their potency values is even. Note that the sum of an empty subset is considered even. ------ Input ------ The first line contains an integer T, the number of test cases. Each test case consists of two lines. The first line of each test case contains a positive integer N, the number of chemicals that the professor has. The second line of each test case contains N space-separated integers P_{i}, each representing the potency value of a chemical. ------ Output ------ For each test case, print \\"YES\\" if it is possible to select such a subset, otherwise print \\"NO\\". The judge is case insensitive, so any combination of upper and lowercase letters will be accepted. ------ Constraints ------ 1 ≤ T ≤ 10^{3} 1 ≤ N ≤ 10^{3} 1 ≤ P_{i} ≤ 10^{3} ------ Sample Input 1 ------ 3 4 1 3 5 7 3 4 6 8 2 2 9 ------ Sample Output 1 ------ NO YES YES ------ Explanation 1 ------ For test 1: Any subset will have an odd sum since all the numbers are odd, hence no subset with an even sum is possible. For test 2: The sum of the empty subset is 0 which is even. For test 3: We can choose the subset containing the number 2 or the empty subset both of which sum to an even number.","solution":"def is_possible_to_select_even_sum_subset(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] potencies = test_cases[i][1] has_even = any(p % 2 == 0 for p in potencies) if has_even: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Alice loves playing card games and she has decided to write a program that simulates a simplified version of poker hands assessment. In this version, each hand consists of five cards, and the following hand rankings are considered: **One Pair**: Two cards of the same rank. **Two Pair**: Two different pairs. **Three of a Kind**: Three cards of the same rank. **Straight**: Five consecutive cards of different suits. **Flush**: Five cards of the same suit, not in sequence. **Full House**: Three of a kind and a pair. **Four of a Kind**: Four cards of the same rank. **Straight Flush**: Five consecutive cards of the same suit. You are given a series of hands and your task is to determine the best ranking for each hand. **Input** The input consists of several datasets. In the first line, the number of datasets n is given. Each dataset consists of five cards represented by a two-character string. The first character is the rank (\'2\'-\'9\', \'T\', \'J\', \'Q\', \'K\', \'A\'), and the second character is the suit (\'H\', \'D\', \'C\', \'S\' which stand for hearts, diamonds, clubs, and spades, respectively). **Output** For each dataset, the program should print the best ranking for the given hand. **Example:** Input ``` 2 2H 3D 5S 9C KD 2H 4H 5H 9H KH ``` Output ``` High Card Flush ```","solution":"def card_rank_to_num(card): rank = card[0] if rank in \'23456789\': return int(rank) elif rank == \'T\': return 10 elif rank == \'J\': return 11 elif rank == \'Q\': return 12 elif rank == \'K\': return 13 elif rank == \'A\': return 14 def analyze_hand(hand): suits = [card[1] for card in hand] ranks = sorted([card_rank_to_num(card) for card in hand]) is_flush = len(set(suits)) == 1 is_straight = all(ranks[i] + 1 == ranks[i + 1] for i in range(len(ranks) - 1)) counts = {rank: ranks.count(rank) for rank in set(ranks)} counts_values = sorted(counts.values(), reverse=True) if is_flush and is_straight: return \\"Straight Flush\\" elif counts_values == [4, 1]: return \\"Four of a Kind\\" elif counts_values == [3, 2]: return \\"Full House\\" elif is_flush: return \\"Flush\\" elif is_straight: return \\"Straight\\" elif counts_values == [3, 1, 1]: return \\"Three of a Kind\\" elif counts_values == [2, 2, 1]: return \\"Two Pair\\" elif counts_values == [2, 1, 1, 1]: return \\"One Pair\\" else: return \\"High Card\\" def best_hand_rank(n, hands): results = [] for hand in hands: formatted_hand = hand.split() results.append(analyze_hand(formatted_hand)) return results"},{"question":"Lena is preparing to organize her bookshelf. She has n different books and m different shelves. Each shelf has a specific width and height. Lena wants to maximize the number of books she can place on her shelves. Each of Lena\'s books has a specific width and height. She can place a book on a shelf if and only if the book\'s width is less than or equal to the shelf\'s width and the book\'s height is less than or equal to the shelf\'s height. Additionally, once a book is placed on a shelf, it occupies a specific amount of space on that shelf, reducing the available width for further books. Your task is to help Lena calculate the maximum number of books that can be placed on the shelves if she arranges them optimally. ----Input---- The first line of the input contains two integers n and m (1 le n, m le 1000) — the number of books and the number of shelves. The next n lines each contain two integers w_i and h_i (1 le w_i, h_i le 1000) — the width and height of the i-th book. The next m lines each contain two integers s_w and s_h (1 le s_w, s_h le 1000) — the width and height of the j-th shelf. ----Output---- Print one integer — the maximum number of books Lena can place on her shelves. ----Example---- Input 5 3 3 4 2 2 5 6 4 4 3 2 6 5 5 7 4 4 Output 4 ----Explanation---- In the example, Lena can place: - Book 1 (3x4) on Shelf 3 (4x4) - Book 2 (2x2) on Shelf 1 (6x5) - Book 4 (4x4) on Shelf 3 (4x4) - Book 5 (3x2) on Shelf 1 (6x5) Thus, the maximum number of books placed is 4.","solution":"def max_books_on_shelves(n, m, books, shelves): Calculate the maximum number of books that can be placed on the shelves. :param n: Number of books :param m: Number of shelves :param books: List of tuples where each tuple contains width and height of a book :param shelves: List of tuples where each tuple contains width and height of a shelf :return: Maximum number of books that can be placed on the shelves # Sort books and shelves: books by width descending and shelves by width descending books.sort(key=lambda x: (x[1], x[0])) shelves.sort(key=lambda x: (x[1], x[0])) # Initialize the space available on each shelf shelves_space = [width for width, height in shelves] count = 0 for book in books: book_width, book_height = book for j in range(m): shelf_width, shelf_height = shelves[j] if book_width <= shelf_width and book_height <= shelf_height and shelves_space[j] >= book_width: count += 1 shelves_space[j] -= book_width break return count"},{"question":"You are given an undirected graph described by n nodes and m edges. Additionally, there is a weight associated with each edge. The task is to determine the shortest path from a source node to a destination node using the given constraints. A path\'s length is the sum of weights of the edges in the path, and you need to find the shortest path length from a starting node s to an ending node t. If there is no path between the nodes, return -1. Input The first line of input contains three integers n, m, and q (1 ≤ n, m ≤ 10^5, 1 ≤ q ≤ 10^4) representing the number of nodes, the number of edges, and the number of queries respectively. Following m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^9) representing an edge between node u and node v with weight w. The next q lines each contain two integers si and ti (1 ≤ si, ti ≤ n) representing a query to find the shortest path between node si and node ti. Output For each query, print the shortest path length from node si to node ti on a new line. If there is no path, print -1. Examples Input 6 7 3 1 2 4 1 3 2 2 3 5 3 4 6 2 5 10 5 6 3 4 6 1 1 6 2 4 3 6 Output 9 10 7 Note In the first query, the shortest path from node 1 to node 6 is 1 -> 3 (2) -> 4 (6) -> 6 (1), whose total length is 2 + 6 + 1 = 9. In the second query, the shortest path from node 2 to node 4 is 2 -> 3 (5) -> 4 (6), giving a length of 11. For the third query, the shortest path from node 3 to node 6 is 3 -> 4 (6) -> 6 (1), totaling in length 7.","solution":"import heapq def dijkstra(n, edges, start, end): graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) dist = [float(\'inf\')] * (n + 1) dist[start] = 0 pq = [(0, start)] # (distance, node) while pq: current_dist, node = heapq.heappop(pq) if current_dist > dist[node]: continue for neighbor, weight in graph[node]: distance = current_dist + weight if distance < dist[neighbor]: dist[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return dist[end] if dist[end] != float(\'inf\') else -1 def shortest_paths(n, m, q, edge_list, queries): res = [] for s, t in queries: res.append(dijkstra(n, edge_list, s, t)) return res"},{"question":"A young programmer named Alex stumbled upon a mysterious online coding challenge. The challenge comes to life every full moon and consists of solving a series of puzzles to unlock pieces of a hidden message. One of the puzzles involves manipulating strings in a very peculiar way. Alex needs your help to create a program that can solve the puzzle quickly and efficiently. The task is to find the length of the longest substring of a given string that contains at most `k` distinct characters. Input: The first line contains a single integer `T` (1 ≤ T ≤ 100), the number of test cases. Each of the next `T` pairs of lines describe a test case: the first line of the pair contains a single integer `k` (1 ≤ k ≤ 100), and the second line contains a string `s` (1 ≤ |s| ≤ 10^4). Output: For each test case, output a single integer representing the length of the longest substring that contains at most `k` distinct characters. Example: Input: 3 2 eceba 3 aa 2 abcabc Output: 3 2 2 Note: In the first test case, \\"ece\\" is the longest substring with at most 2 distinct characters. In the second case, \\"aa\\" is already the longest substring with at most 3 distinct characters. In the third test case, \\"ab\\" or \\"bc\\" can be considered as the longest substrings with at most 2 distinct characters.","solution":"def longest_substring_with_k_distinct(T, test_cases): Returns a list of integers representing the length of the longest substring that contains at most \'k\' distinct characters for each test case. from collections import defaultdict def length_of_longest_substring_k_distinct(s, k): n = len(s) if k == 0 or n == 0: return 0 left = 0 right = 0 char_map = defaultdict(int) max_length = 0 while right < n: char_map[s[right]] += 1 while len(char_map) > k: char_map[s[left]] -= 1 if char_map[s[left]] == 0: del char_map[s[left]] left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length results = [] for k, s in test_cases: results.append(length_of_longest_substring_k_distinct(s, k)) return results # Example usage: T = 3 test_cases = [(2, \\"eceba\\"), (3, \\"aa\\"), (2, \\"abcabc\\")] print(longest_substring_with_k_distinct(T, test_cases)) # Output: [3, 2, 2]"},{"question":"You are given a list of positive integers. Your task is to find out whether each integer can be expressed as the sum of exactly three even integers greater than zero. Input The first line contains a single integer t (1 ≤ t ≤ 5000), the number of test cases. Each of the next t lines contains a single positive integer ni (6 ≤ ni ≤ 10^12), the integer to be checked. Output For each test case, output a single line. If the integer can be expressed as the sum of exactly three even integers greater than zero, output these three integers separated by spaces. If it is not possible, output -1. If there are multiple valid answers, you may print any of them. Examples Input 4 12 18 8 15 Output 2 4 6 4 4 10 2 2 4 -1 Explanation In the first example, 12 can be expressed as the sum of 2, 4, and 6. In the third example, 8 can be expressed as the sum of 2, 2, and 4. In the last example, 15 cannot be expressed as the sum of three even integers greater than zero, so the output is -1.","solution":"def find_three_evens_sum(test_cases): results = [] for n in test_cases: if n >= 6 and n % 2 == 0: results.append((2, 2, n - 4)) # Any even number n >= 6 can be expressed as 2 + 2 + (n-4) else: results.append(-1) return results def process_input_and_solve(t, numbers): results = find_three_evens_sum(numbers) return results"},{"question":"Alina is planning a small tree planting event in her community garden. She wants the trees to be arranged in such a way that every tree has a unique height. However, some of the tree saplings she has received have the same height and need to be adjusted slightly so that all trees meet the condition. A tree height can only be increased not decreased and each increase costs 1 unit of effort. Your task is to help Alina by determining the minimum total effort required to ensure all trees have unique heights. INPUT First line of input is T, the number of test cases. T test cases follow. First integer is N, the number of trees. N integers follow, representing the initial heights of the trees. OUTPUT For each test case, print the minimum total effort required. CONSTRAINTS 1 ≤ T ≤ 20 1 ≤ N ≤ 100 1 ≤ Height ≤ 1000 SAMPLE INPUT 1 4 3 3 3 3 SAMPLE OUTPUT 6 Explanation The input describes one test case with 4 trees all of the same height (3). To make each height unique with the minimal effort: - The first tree remains at height 3. - The second tree increases from 3 to 4, costing 1 unit of effort. - The third tree increases from 3 to 5, costing 2 units of effort. - The fourth tree increases from 3 to 6, costing 3 units of effort. This results in a total of 1 + 2 + 3 = 6 units of effort, hence the output.","solution":"def min_effort_to_unique_heights(test_cases): results = [] for trees in test_cases: heights = sorted(trees) effort = 0 for i in range(1, len(heights)): if heights[i] <= heights[i-1]: effort += (heights[i-1] + 1 - heights[i]) heights[i] = heights[i-1] + 1 results.append(effort) return results def parse_input(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) trees = list(map(int, lines[index + 1].split())) test_cases.append(trees) index += 2 return test_cases"},{"question":"You are given a grid with fruits and empty cells. Each cell can contain at most one type of fruit or be empty. You need to find the largest possible square subgrid that contains exactly one type of fruit and no empty cells. Output the size of the largest such square subgrid. -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 200) — the dimensions of the grid. Each of the next n lines contains exactly m characters, where each character is either an uppercase English letter denoting a type of fruit or a dot (.) denoting an empty cell. -----Output----- Output a single integer — the size of the largest square subgrid that contains exactly one type of fruit. If there is no such subgrid, output 0. -----Examples----- Input 5 5 AAB.. AAB.. CCC.. CC... CCC.. Output 2 Input 3 4 .... .... .... Output 0","solution":"def largest_square_subgrid(n, m, grid): def largest_square_with_fruit(fruit): # Initialize dp array for the given fruit dp = [[0] * (m + 1) for _ in range(n + 1)] max_side = 0 for i in range(1, n + 1): for j in range(1, m + 1): if grid[i-1][j-1] == fruit: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side max_size = 0 fruit_set = set() for row in grid: fruit_set.update([c for c in row if c != \'.\']) for fruit in fruit_set: max_size = max(max_size, largest_square_with_fruit(fruit)) return max_size"},{"question":"In this challenge, you are given an array of integers. Your task is to find the \\"pivot\\" index of this array. The pivot index is the index where the sum of all the numbers to the left of the index is equal to the sum of all the numbers to the right of the index. If no such index exists, return -1. If there are multiple pivot indexes, return the smallest one. Examples: `[1, 7, 3, 6, 5, 6] => 3` The sum of the numbers to the left of index 3 is 11 (1 + 7 + 3), and the sum of the numbers to the right of index 3 is also 11 (5 + 6). `[1, 2, 3] => -1` No pivot index exists because the sum of the numbers to the left and right of any index are not equal. `[2, 1, -1] => 0` The sum of the numbers to the left of index 0 is 0 (there are no elements to the left), and the sum of the numbers to the right of index 0 is 0 (1 + (-1)).","solution":"def find_pivot_index(arr): Returns the pivot index of the array where the sum of the numbers to the left of the index is equal to the sum of the numbers to the right of the index. If no such index exists, returns -1. total_sum = sum(arr) left_sum = 0 for i, num in enumerate(arr): # If the left sum equals the right sum (which is computed as total_sum - left_sum - num) if left_sum == (total_sum - left_sum - num): return i left_sum += num return -1"},{"question":"Given an array of integers, you need to determine whether the array is a palindrome. An array is considered a palindrome if it reads the same backward as forward. -----Input----- The first line of input contains a positive integer T leq 10, the number of test cases. Each test case consists of two lines. The first line contains the integer N leq 100, the number of elements in the array. The second line contains N space-separated integers, which are the elements of the array. -----Output----- For each test case, print \\"YES\\" if the array is a palindrome, and \\"NO\\" otherwise. -----Examples----- Sample Input: 2 3 1 2 1 4 1 2 3 4 Sample Output: YES NO","solution":"def is_palindrome_array(test_cases): Determines if each test case array is a palindrome. Parameters: test_cases (list of list of int): A list where each sublist represents a test case with the first element being the number of elements in the array followed by the elements of the array themselves. Returns: list of str: A list where each element is \\"YES\\" if the corresponding array is a palindrome, \\"NO\\" otherwise. results = [] for case in test_cases: N = case[0] array = case[1:N+1] if array == array[::-1]: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a grid with N rows and M columns. Each cell in the grid can either be empty or contain a block. Two cells are considered adjacent if they share a boundary (either horizontally or vertically). A connected component is a set of cells such that there exists a path between any two cells in the set that only passes through adjacent cells. Your task is to determine how many connected components of blocks exist in the grid. ------ Input ------ The first line contains two integers N and M – the number of rows and columns in the grid, respectively. Each of the following N lines contains M characters (\'#\' for a block and \'.\' for an empty cell). ------ Output ------ Print a single integer – the number of connected components of blocks in the grid. ------ Constraints ------ 1 ≤ N, M ≤ 1000 ------ Sample Input 1 ------ 4 5 #.#.# ... ..# .#..# ------ Sample Output 1 ------ 5 ------ Explanation 1 ------ The grid has five connected components of blocks which are: - (0,0) - (0,2) - (0,4) - (1,2), (1,3), (2,1), (2,0) - (3,1)","solution":"def count_connected_components(N, M, grid): Returns the number of connected components of blocks in the given grid. def dfs(x, y): stack = [(x, y)] while stack: cx, cy = stack.pop() if 0 <= cx < N and 0 <= cy < M and grid[cx][cy] == \'#\' and not visited[cx][cy]: visited[cx][cy] = True for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: stack.append((cx + dx, cy + dy)) visited = [[False] * M for _ in range(N)] components_count = 0 for i in range(N): for j in range(M): if grid[i][j] == \'#\' and not visited[i][j]: dfs(i, j) components_count += 1 return components_count"},{"question":"Write a program to check if a given number is a perfect square. Example 1: Input: N = 16 Output: Yes Explanation: For N = 16, the square root is 4 which is an integer, so the answer is Yes. Example 2: Input: N = 15 Output: No Explanation: For N = 15, the square root is approximately 3.872 which is not an integer, so the answer is No. Your Task: Complete the function isPerfectSquare() which takes single integer n, as input parameters and returns a string \\"Yes\\" or \\"No\\" denoting the answer. You don\'t need to print the answer or take inputs. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^{9}","solution":"import math def isPerfectSquare(N): Returns \'Yes\' if N is a perfect square, \'No\' otherwise. if N < 1: return \\"No\\" # Not within the problem constraints, but added for completeness sqrt_n = int(math.sqrt(N)) return \\"Yes\\" if sqrt_n * sqrt_n == N else \\"No\\""},{"question":"Implement a function that takes a list of integers and an integer `n`. The function should return a new list containing the original integers in the list but rotated left `n` times. For example, given ```lst = [1, 2, 3, 4, 5]``` and ```n = 2```, the function should return ```[3, 4, 5, 1, 2]``` because moving each element of the list two steps to the left results in the list ```[3, 4, 5, 1, 2]```. - **Note**: If `n` is greater than the length of the list, perform the rotation `n % len(lst)` times as rotating the list by its length results in the same list.","solution":"def rotate_left(lst, n): Rotate the list `lst` to the left `n` times. If `n` is greater than the length of the list, rotate by `n % len(lst)`. Parameters: lst (list of int): The list to rotate. n (int): The number of rotations. Returns: list of int: The rotated list. if not lst: return [] n = n % len(lst) return lst[n:] + lst[:n]"},{"question":"A delivery company plans to optimize its package delivery routes using a fleet of drones. Each drone operates within a specific range and must return to the base after delivering a package. The task is to identify the maximum distance a drone can travel on its outbound journey while ensuring it has enough battery to return to the base. Given the battery capacity of each drone and the energy cost per unit distance for the drone, calculate the maximum distance each drone can cover on its outbound trip from the base. Input: - The first line contains T, the number of test cases. - Each of the next T lines contains two integers `battery_capacity` and `cost_per_unit`, representing the battery capacity of the drone and the energy cost per unit distance. Output: For each test case, print the maximum outbound distance each drone can travel with 6 decimal precision. Constraints: 1 ≤ T ≤ 1000 1 ≤ battery_capacity, cost_per_unit ≤ 10^6 Sample Input: 3 100 2 150 3 200 4 Sample Output: 25.000000 25.000000 25.000000 Explanation: In the first test case, with 100 units of battery and a cost of 2 units of energy per unit distance, the drone can travel 25 units out and 25 units back for a total round trip of 50 units, consuming 100 units of battery in total.","solution":"def max_outbound_distance(T, cases): Calculates the maximum outbound distance each drone can travel with given battery capacity and energy cost per unit distance. Args: T (int): Number of test cases cases (list): List of tuples with battery capacity and cost per unit distance Returns: list: List of maximum outbound distances for each case results = [] for battery_capacity, cost_per_unit in cases: max_distance = battery_capacity / (2 * cost_per_unit) results.append(f\\"{max_distance:.6f}\\") return results"},{"question":"Alex is designing a cybersecurity system that monitors network data packets for suspicious activity. The system receives a stream of n data packets, each represented by an integer. The risk score of each packet is given in the stream, and a higher risk score indicates a higher suspicion level. To effectively monitor suspicious patterns, Alex wants to identify the longest contiguous subarray of packets where the risk scores are strictly increasing. Given an array of n integers representing the risk scores of the data packets, your task is to determine the length of the longest contiguous subarray where the scores are strictly increasing. Input The input consists of multiple test cases. The first line of the input contains an integer t (1 ≤ t ≤ 1000), the number of test cases. For each test case: - The first line contains an integer n (1 ≤ n ≤ 10000), the number of data packets. - The second line contains n integers, where the i-th integer is the risk score of the i-th data packet (1 ≤ risk scores ≤ 10^9). Output For each test case, print the length of the longest strictly increasing contiguous subarray. Example Input 3 5 1 2 3 2 1 6 1 2 3 4 5 6 4 4 3 2 1 Output 3 6 1 Note In the first case, the longest strictly increasing subarray is [1, 2, 3], which has a length of 3. In the second case, the entire array [1, 2, 3, 4, 5, 6] is strictly increasing, so the length is 6. In the third case, there are no increasing subarrays longer than 1, so the length is 1.","solution":"def longest_increasing_subarray_length(n, scores): if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if scores[i] > scores[i-1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length def solve(risk_scores): results = [] for scores in risk_scores: n = len(scores) results.append(longest_increasing_subarray_length(n, scores)) return results"},{"question":"Given a string ``s``, you need to transform it into a new string where each letter is the next alphabetically letter in English. If the letter is \'z\', the next letter is considered to be \'a\'. Additionally, the transformed string should have uppercase letters if the original letter was uppercase and lowercase letters if the original letter was lowercase. Write a function `transform_string` which accepts a single argument `s` (1 <= len(s) <= 1000), and returns the transformed string based on the aforementioned rules. -----Input----- - One single line containing the string `s`. -----Output----- - One single line containing the transformed string. -----Examples----- Input a Output b Input Zebra Output Afcsb Input Python3 Output Qzuipo3 -----Note----- The string can contain any uppercase and lowercase English letters and any number of digits. Digits or other non-alphabet characters should remain the same in the output string.","solution":"def transform_string(s): Transform the string such that each letter is replaced with the next letter in the alphabet. \'z\' becomes \'a\', \'Z\' becomes \'A\'. Non-alphabet characters remain the same. Parameters: s (str): The input string to be transformed. Returns: str: The transformed string. def next_char(c): if \'a\' <= c <= \'z\': return \'a\' if c == \'z\' else chr(ord(c) + 1) elif \'A\' <= c <= \'Z\': return \'A\' if c == \'Z\' else chr(ord(c) + 1) else: return c return \'\'.join(next_char(c) for c in s)"},{"question":"Given a string S, write a function to count the number of vowels and consonants in the string. Vowels are \'a\', \'e\', \'i\', \'o\', \'u\' and both the uppercase and lowercase versions are considered. Ignore any non-alphabetical characters. Example 1: Input: \\"hello world!\\" Output: 3 7 Explanation: Vowels in the string are \'e\', \'o\', \'o\'. Consonants are \'h\', \'l\', \'l\', \'w\', \'r\', \'l\', \'d\'. Hence, the output is 3 (vowels) and 7 (consonants). Example 2: Input: \\"The quick brown fox.\\" Output: 5 11 Explanation: Vowels in the string are \'e\', \'u\', \'i\', \'o\', \'o\'. Consonants are \'T\', \'h\', \'q\', \'c\', \'k\', \'b\', \'r\', \'w\', \'n\', \'f\', \'x\'. Hence, the output is 5 (vowels) and 11 (consonants). Your Task: You don\'t need to read or print anything, your task is to complete the function count_vowels_and_consonants() which takes a string S as input parameter and returns a list of two integers where the first integer is the count of vowels and the second integer is the count of consonants. Expected Time Complexity: O(N) Expected Space Complexity: O(1) Constraints: 1 <= len(S) <= 10^5","solution":"def count_vowels_and_consonants(S): This function takes a string S and returns a list containing the count of vowels and consonants in the string. The function considers case-insensitive vowels \'a\', \'e\', \'i\', \'o\', \'u\' and ignores non-alphabetical characters. vowels = \\"aeiouAEIOU\\" vowels_count = 0 consonants_count = 0 for char in S: if char.isalpha(): if char in vowels: vowels_count += 1 else: consonants_count += 1 return [vowels_count, consonants_count]"},{"question":"A renowned software company is holding a competition in which participants are required to solve a coding problem. The problem revolves around arranging unique integers in a list such that the resultant list is lexicographically smallest when compared to other possible arrangements. You are given a list of N unique integers. Your task is to convert the list into the lexicographically smallest possible version by only reversing some of its contiguous subarrays. Any subarray of the list can be reversed any number of times to achieve the desired ordering. Input: The first line of input contains an integer N indicating the size of the list. The second line contains N space-separated unique integers denoting the elements of the list. Output: Print the lexicographically smallest list possible. Constraints: 1 ≤ N ≤ 100000 1 ≤ A[i] ≤ 100000 All integers A[i] are unique. SAMPLE INPUT 5 4 5 1 3 2 SAMPLE OUTPUT 1 2 3 4 5 Explanation In the sample test case, the list can be achieved in the following sequence of subarray reversals: - Reverse the subarray [4, 5, 1] to become [1, 5, 4] - Reverse the subarray [5, 4] to become [1, 4, 5] - Reverse the subarray [4, 5, 3] to become [1, 3, 5, 4] - Reverse the subarray [5, 4] to become [1, 3, 4, 5] - Reverse the subarray [3, 4] to become [1, 2, 3, 4, 5] Thus, the final lexicographically smallest list is [1, 2, 3, 4, 5].","solution":"def lexicographically_smallest_list(nums): Returns the lexicographically smallest list by reversing subarrays. return sorted(nums)"},{"question":"Write a program that calculates the sum of all unique factors of a given positive integer n. A factor of n is a number that divides n without leaving a remainder. Input The first line of the input contains a single integer T -- the number of test cases (1 ≤ T ≤ 100). Each of the next T lines contains a single integer n (1 ≤ n ≤ 10^6). Output For each test case, output one line containing the sum of all unique factors of n. Example Input: 3 12 15 28 Output: 28 24 56 Explanation: For the first test case, the factors of 12 are 1, 2, 3, 4, 6, and 12. The sum is 1 + 2 + 3 + 4 + 6 + 12 = 28. For the second test case, the factors of 15 are 1, 3, 5, and 15. The sum is 1 + 3 + 5 + 15 = 24. For the third test case, the factors of 28 are 1, 2, 4, 7, 14, and 28. The sum is 1 + 2 + 4 + 7 + 14 + 28 = 56.","solution":"def sum_of_unique_factors(n): Returns the sum of all unique factors of the given positive integer n. factors = set() for i in range(1, int(n**0.5) + 1): if n % i == 0: factors.add(i) factors.add(n // i) return sum(factors) def sum_of_factors_for_multiple_cases(test_cases): results = [] for n in test_cases: results.append(sum_of_unique_factors(n)) return results"},{"question":"You are given an integer array `nums` of size `n` and an integer `k`. Your task is to perform `m` queries on this array. Each query is represented by two integers `l` and `r` and asks for the number of distinct integers within the subarray `nums[l...r]` that are greater than `k`. Write a program to process these queries efficiently and return the results. Input - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 100000) — the size of the array and the number of queries, respectively. - The second line contains `n` integers `nums[1], nums[2], ..., nums[n]` (1 ≤ nums[i] ≤ 10^9) — the elements of the array. - The third line contains one integer `k` (1 ≤ k ≤ 10^9) — the threshold value. - Then `m` lines follow, each containing two integers `l` and `r` (1 ≤ l ≤ r ≤ n) representing a query. Output - For each query, print a single integer — the number of distinct integers within the specified subarray that are greater than `k`. Example Input 8 3 1 3 5 7 9 2 4 6 5 1 4 2 6 3 8 Output 1 2 3","solution":"def process_queries(n, m, nums, k, queries): Returns the results of the queries performed on the array nums with regards to the threshold k. Args: n : int : size of the array m : int : number of queries nums : list of int : elements of the array k : int : threshold value queries : list of tuples : each tuple contains two integers l and r representing a query Returns: list of int : results of the queries results = [] for query in queries: l, r = query distinct_elements = set() for i in range(l - 1, r): if nums[i] > k: distinct_elements.add(nums[i]) results.append(len(distinct_elements)) return results"},{"question":"In a prestigious software development company, there are multiple project teams, each competing to complete their assigned tasks within the least amount of time. Each team is required to complete a set of tasks sequentially, with each task potentially having prerequisites that must be completed before it can start. Your goal is to determine the minimum time needed for each team to complete all the tasks assigned to them given the prerequisite constraints and the time each task takes. Each team is assigned a number of tasks, where each task has one or more dependencies. A task cannot be started until all its dependencies have been completed. Each task takes a specific amount of time to complete once all dependencies are met. Input The first line contains two integers n and k (1 ≤ n, k ≤ 100), the number of teams and the number of tasks for each team, respectively. For each team, the input consists of: - A line with an integer m (1 ≤ m ≤ 100), the number of tasks assigned to the team. - The following m lines, each containing: - Two integers, d and t (1 ≤ d, t ≤ m), where d is the task id and t is the time it takes to complete the task. - An integer p (0 ≤ p ≤ m-1), the number of prerequisite tasks for task d. - A list of p integers, each representing the id of a prerequisite task. Output For each team, output a single integer representing the minimum time required to complete all tasks for that team. Examples Input 2 3 3 1 3 0 2 2 1 1 3 4 2 1 2 4 1 2 0 2 1 0 3 3 1 1 4 5 1 3 Output 9 11 Explanation For the first team: * Task 1 takes 3 units of time and has no prerequisites. (Total time = 3) * Task 2 takes 2 units of time and depends on Task 1. It can start after Task 1 is completed (Total time = 3 + 2 = 5) * Task 3 takes 4 units of time and depends on both Task 1 and Task 2. It can start after both are completed (Total time after Task 3 completion = 5 + 4 = 9) So, the first team needs 9 time units to complete all tasks. For the second team: * Task 1 takes 2 units of time and has no prerequisites. (Total time = 2) * Task 2 takes 1 unit of time and has no prerequisites. (Total time = 2) * Task 3 takes 3 units of time and depends on Task 1. It can start after Task 1 is completed (Total time = 2 + 3 = 5) * Task 4 takes 5 units of time and depends on Task 3. It can start after Task 3 is completed (Total time = 5 + 5 = 10) So, the second team needs 11 time units to complete all tasks.","solution":"def min_time_for_teams(n, k, teams_tasks): from collections import defaultdict, deque def find_min_time(tasks): in_degree = defaultdict(int) adj_list = defaultdict(list) task_time = {} for task in tasks: task_id, time, pre_count, *prereqs = task task_time[task_id] = time in_degree[task_id] = pre_count for prereq in prereqs: adj_list[prereq].append(task_id) queue = deque() total_time = {} for task_id in in_degree: if in_degree[task_id] == 0: queue.append(task_id) total_time[task_id] = task_time[task_id] while queue: current = queue.popleft() for neighbor in adj_list[current]: in_degree[neighbor] -= 1 total_time[neighbor] = max( total_time.get(neighbor, 0), total_time[current] + task_time[neighbor] ) if in_degree[neighbor] == 0: queue.append(neighbor) return max(total_time.values()) results = [] index = 0 while index < len(teams_tasks): m = teams_tasks[index] tasks = teams_tasks[index+1:index+1+m] index += (m + 1) results.append(find_min_time(tasks)) return results # Sample usage: n = 2 k = 3 teams_tasks = [ 3, (1, 3, 0), (2, 2, 1, 1), (3, 4, 2, 1, 2), 4, (1, 2, 0), (2, 1, 0), (3, 3, 1, 1), (4, 5, 1, 3) ] print(min_time_for_teams(n, k, teams_tasks))"},{"question":"Given two strings, \\"source\\" and \\"target\\", determine the minimum number of operations required to convert the \\"source\\" string into the \\"target\\" string. The allowed operations are: 1. Insert a character 2. Remove a character 3. Replace a character Example 1: Input: source = \\"kitten\\" target = \\"sitting\\" Output: 3 Explanation: - kitten -> sitten (replace \'k\' with \'s\') - sitten -> sittin (replace \'e\' with \'i\') - sittin -> sitting (insert \'g\') Example 2: Input: source = \\"flaw\\" target = \\"lawn\\" Output: 2 Explanation: - flaw -> law (remove \'f\') - law -> lawn (insert \'n\') Your Task: You don\'t need to read input or print anything. Your task is to complete the function `minOperations()` which takes the strings `source` and `target` as input parameters and returns the minimum number of operations required to convert `source` to `target`. Expected Time Complexity: O(m * n) Expected Auxiliary Space: O(m * n) Where `m` is the length of `source` and `n` is the length of `target`. Constraints: 1 <= source.length, target.length <= 1000 source and target consist of lowercase English letters only.","solution":"def minOperations(source, target): Determines the minimum number of operations required to convert the source string into the target string. :param source: Source string :param target: Target string :return: Minimum number of operations m, n = len(source), len(target) # Create a dp array to store the number of operations required. dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the first row and the first column of dp array for i in range(m + 1): dp[i][0] = i for j in range(n + 1): dp[0][j] = j # Fill the dp array for i in range(1, m + 1): for j in range(1, n + 1): if source[i - 1] == target[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], # Remove dp[i][j - 1], # Insert dp[i - 1][j - 1])# Replace return dp[m][n]"},{"question":"You are given n cities arranged in a line. Each city i has a population a_i. You have to build m hospitals in these cities such that the maximum distance any person has to travel to the nearest hospital is minimized. The hospitals can only be built in the given cities, and each hospital can serve people in multiple cities. For example, if a hospital is placed in city i, it can serve people from cities i-1, i, and i+1, or further cities depending on the distance. -----Input----- The first line contains two integers n and m (1 le n le 10^6, 1 le m le n) — the number of cities and the number of hospitals to be built, respectively. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^6) — the population of the cities. -----Output----- Print one integer representing the minimum possible value of the maximum distance any person has to travel to the nearest hospital. -----Examples----- Input 5 2 1 2 3 4 5 Output 2 Input 6 3 10 20 30 40 50 60 Output 1","solution":"def minimize_max_distance(n, m, populations): def is_feasible(distance): required = 1 last_placed = 0 for i in range(1, n): if i - last_placed > distance: required += 1 last_placed = i if required > m: return False return True left, right = 0, n - 1 while left < right: mid = (left + right) // 2 if is_feasible(mid): right = mid else: left = mid + 1 return left"},{"question":"# Spiral Matrix Generator Objective: Write a function `generateSpiralMatrix` that generates an `n x n` matrix filled with elements from 1 to `n^2` in a spiral order. Parameters: - `n` (integer): The size of the matrix. Returns: - A 2D list (list of lists) representing the spiral matrix. Instructions: - The matrix should start filling from the top-left corner and move towards the right initially. - Continue the spiral by turning down, then left, then up, and so on until the matrix is filled. Constraints: - `1 <= n <= 30` Examples: ```python generateSpiralMatrix(3) # Output: # [ # [1, 2, 3], # [8, 9, 4], # [7, 6, 5] # ] generateSpiralMatrix(4) # Output: # [ # [1, 2, 3, 4], # [12, 13, 14, 5], # [11, 16, 15, 6], # [10, 9, 8, 7] # ] generateSpiralMatrix(1) # Output: # [ # [1] # ] ``` Notes: - The values inside the matrix should be filled in increasing order starting from 1 and ending at `n^2`. - Ensure that your function runs efficiently even for the largest input within the constraint range. Write your solution and the corresponding test cases to validate the correctness of your function.","solution":"def generateSpiralMatrix(n): Generates an n x n spiral matrix filled with elements from 1 to n^2. matrix = [[0]*n for _ in range(n)] num = 1 left, top = 0, 0 right, bottom = n - 1, n - 1 while left <= right and top <= bottom: # Fill top row for i in range(left, right + 1): matrix[top][i] = num num += 1 top += 1 # Fill right column for i in range(top, bottom + 1): matrix[i][right] = num num += 1 right -= 1 if top <= bottom: # Fill bottom row for i in range(right, left - 1, -1): matrix[bottom][i] = num num += 1 bottom -= 1 if left <= right: # Fill left column for i in range(bottom, top - 1, -1): matrix[i][left] = num num += 1 left += 1 return matrix"},{"question":"----- You are working on a project that involves simulating the growth of bacteria in a petri dish. The bacteria double in number every hour. Given the initial number of bacteria, calculate the number of bacteria present after a specified number of hours. -----Constraints----- - 1 leq n leq 10^3 (initial number of bacteria) - 0 leq t leq 10 (number of hours) -----Input----- Input is given from Standard Input in the following format: n t -----Output----- Print the number of bacteria present after t hours. -----Sample Input----- 5 3 -----Sample Output----- 40 After 3 hours, the number of bacteria has doubled 3 times, resulting in 5 * 2^3 = 40 bacteria. Note that output must be an integer - for example, 40.0 will not be accepted.","solution":"def bacteria_growth(initial_bacteria, hours): Calculate the number of bacteria present after a specified number of hours, given that the number of bacteria doubles every hour. Parameters: initial_bacteria (int): The initial number of bacteria (n) hours (int): The number of hours that have passed (t) Returns: int: The number of bacteria present after the given number of hours return initial_bacteria * (2 ** hours)"},{"question":"Problem Statement Given a list of integers, determine the number of pairs of integers (i, j) such that i and j are distinct and the sum of i and j is even. Input The first line contains a single integer T, the number of test cases. Each test case consists of two lines. The first line contains an integer N, the size of the list. The second line contains N space-separated integers representing the list. Output For each test case, output a single line containing the number of pairs whose sum is even. Example Input 2 4 1 2 3 4 3 2 2 2 Output 2 3","solution":"def count_even_sum_pairs(test_cases): Returns a list with the count of pairs whose sum is even for each test case. Parameters: test_cases (list of tuples): list of test cases, where each test case is a tuple with an integer N and a list of integers. Returns: list: list of integers representing the count of even sum pairs for each test case. result = [] for N, numbers in test_cases: even_count = sum(1 for x in numbers if x % 2 == 0) odd_count = N - even_count # Number of pairs (i, j) with both i and j even: combination(even_count, 2) even_pairs = even_count * (even_count - 1) // 2 # Number of pairs (i, j) with both i and j odd: combination(odd_count, 2) odd_pairs = odd_count * (odd_count - 1) // 2 result.append(even_pairs + odd_pairs) return result # Function to process input and output def process_input_output(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) numbers = list(map(int, lines[index + 1].split())) test_cases.append((N, numbers)) index += 2 result = count_even_sum_pairs(test_cases) return \'n\'.join(map(str, result))"},{"question":"Problem Given an array of integers, find the number of contiguous subarrays where the sum of elements is equal to a given number S . # Constraints * The input satisfies the following conditions. * 1 leq N leq 10^5 - the number of elements in the array * 1 leq A_i leq 1000 - each element of the array * -10^9 leq S leq 10^9 # Input The input is given in the following format: N S A_1 A_2 ... A_N All inputs are given as integers. N and S are given on the first line, separated by a blank. A_i are the elements of the array given in the second line, separated by blanks. # Output Output the total number of contiguous subarrays where the sum of the elements is equal to S . # Examples Input 5 5 1 2 3 4 5 Output 2 Input 5 3 1 1 1 1 1 Output 3 Input 5 6 1 2 3 4 5 Output 1","solution":"def count_subarrays_with_sum(arr, N, S): Counts the number of contiguous subarrays where the sum of elements is equal to S. Parameters: arr (list of int): The array of integers. N (int): The number of elements in the array. S (int): The target sum to find subarrays for. Returns: int: The number of contiguous subarrays where the sum of elements is equal to S. current_sum = 0 sum_count = {0: 1} count = 0 for num in arr: current_sum += num if (current_sum - S) in sum_count: count += sum_count[current_sum - S] if current_sum in sum_count: sum_count[current_sum] += 1 else: sum_count[current_sum] = 1 return count"},{"question":"You are tasked with implementing a function that calculates the longest consecutive sequence of repeated characters in a given string. The longest consecutive sequence is defined as the maximum number of repeating characters that appear consecutively in the string. -----Input----- The input will be a single string S (1 leq |S| leq 10^5), consisting of only lowercase and uppercase alphabets. -----Output----- Output a single integer representing the length of the longest consecutive sequence of repeated characters. -----Examples----- Input aaabbcca Output 3 Input abcd Output 1 Input aabbbccccdddd Output 4 -----Note----- In the first sample, the longest consecutive sequence is \'aaa\' which has a length of 3. In the second sample, there are no repeating characters, so the longest consecutive sequence is any single character which has a length of 1. In the third sample, the longest consecutive sequence is \'dddd\' which has a length of 4.","solution":"def longest_consecutive_sequence(s): Returns the length of the longest consecutive sequence of repeated characters in the string s. if not s: return 0 max_len = 1 current_len = 1 for i in range(1, len(s)): if s[i] == s[i-1]: current_len += 1 else: if current_len > max_len: max_len = current_len current_len = 1 return max(max_len, current_len)"},{"question":"You are given a grid of n rows and m columns composed of cells containing lowercase Latin letters. Your goal is to check if it\'s possible to transform each row of the grid into a palindromic string by performing a certain number of operations. In each operation, you can select a single column and replace all characters in that column with any lowercase Latin letter of your choice. Input The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 50) — the number of rows and columns of the grid, respectively. Each of the following n lines contains a string of m characters representing the grid. Output If it\'s possible to make all rows palindromic by any sequence of operations, output \\"Yes\\"; otherwise output \\"No\\" (both without quotes). Examples Input 3 5 abxba bcbcb dzdzd Output Yes Input 3 5 abcde bbcaa dzdzd Output No Note In the first example, each row is already palindromic or can be transformed into a palindromic string by changing certain cells in every column. In the second example, the first row \'abcde\' cannot be transformed into a palindromic string because there is no way to make \'a\' and \'e\', or \'b\' and \'d\' equal simultaneously in a single operation. Therefore, it is impossible to satisfy the condition.","solution":"def can_make_all_rows_palindromic(n, m, grid): def is_palindromic_possible(row): left, right = 0, m - 1 while left < right: if row[left] != row[right]: return False left += 1 right -= 1 return True for row in grid: if not is_palindromic_possible(row): return \\"No\\" return \\"Yes\\""},{"question":"Given an array of integers representing the daily temperatures, find out how many days you have to wait until a warmer temperature. If there is no future day for which this is possible, fill in 0 for that day instead. Example 1: Input: N = 8 T[] = {73, 74, 75, 71, 69, 72, 76, 73} Output: {1, 1, 4, 2, 1, 1, 0, 0} Explanation: For day 1 (73), the next warmer day is day 2 (74), hence the output for day 1 is 1. For day 2 (74), the next warmer day is day 3 (75), hence the output for day 2 is 1. For day 3 (75), the next warmer day is day 7 (76), hence the output for day 3 is 4. For day 4 (71), the next warmer day is day 6 (72), hence the output for day 4 is 2. For day 5 (69), the next warmer day is day 6 (72), hence the output for day 5 is 1. For day 6 (72), the next warmer day is day 7 (76), hence the output for day 6 is 1. For day 7 (76), there is no future day with a warmer temperature, hence the output for day 7 is 0. For day 8 (73), there is no future day with a warmer temperature, hence the output for day 8 is 0. Your Task: You don\'t need to read input or print anything. Your task is to complete the function dailyTemperatures() which takes the array T[] and its size N as inputs and returns the desired output. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 10^{5} 30 ≤ T_{i} ≤ 100","solution":"def dailyTemperatures(T): Returns a list of integers where each integer represents the number of days you have to wait until a warmer temperature. If there is no future day for which this is possible, the integer is 0. n = len(T) answer = [0] * n stack = [] for i in range(n): while stack and T[i] > T[stack[-1]]: idx = stack.pop() answer[idx] = i - idx stack.append(i) return answer"},{"question":"Hannah has a collection of unique seashells, each represented by a positive integer. She loves organizing them and wants to create beautiful patterns. For this task, she visualizes each seashell as a point on a number line. Given an array of integers representing positions of seashells on a number line, and several range queries, your goal is to determine the maximum distance between any two seashells that are within the specified range for each query. The distance between two positions `x` and `y` is defined as `|x - y|`. Help Hannah find the maximum distance for each given query so that she can create her beautiful patterns. Input The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the number of seashell positions. The second line contains `n` integers `pos1, pos2, ..., posn` (1 ≤ posi ≤ 10^9) — the positions of the seashells. The third line contains an integer `q` (1 ≤ q ≤ 10^4) — the number of queries. Each of the next `q` lines contains two integers `li` and `ri` (1 ≤ li ≤ ri ≤ n) — the inclusive range of positions in the query. Output Print `q` integers — the answers to the queries, one per line. SAMPLE INPUT 5 1 3 7 9 10 3 1 3 2 4 1 5 SAMPLE OUTPUT 6 6 9","solution":"def max_distance_in_range(positions, queries): Determines the maximum distance between any two seashells within the specified range for each query. Args: positions (list): The positions of seashells on a number line. queries (list): A list of tuples representing the range queries. Returns: list: A list of integers representing the maximum distance for each query. results = [] for query in queries: li, ri = query subarray = positions[li-1:ri] max_distance = max(subarray) - min(subarray) results.append(max_distance) return results"},{"question":"In the distant future, Earth has joined a Galactic Federation where every planet has a unique identifier in the form of a special binary number, known as \\"HoloBinary.\\" The HoloBinary has the unique property that it consists of exactly N bits, and it should have an equal number of \'1\' bits and \'0\' bits (i.e., N is always an even number). As an aspiring software engineer in the Galactic Federation, your task is to help generate these HoloBinary numbers. Write a program that, given an even number N, generates all possible valid HoloBinary numbers of length N and prints them in lexicographical order. INPUT The first line of the input contains a single integer T, the number of test cases. The following T lines each contain a single even integer N (2 ≤ N ≤ 20). OUTPUT For each test case, print all valid HoloBinary numbers of length N in lexicographical order. Each number should be printed on a new line. Output an empty line after each test case\'s output. SAMPLE INPUT 2 2 4 SAMPLE OUTPUT 01 10 0011 0101 0110 1001 1010 1100 Explanation: For the first test case, N = 2, the valid HoloBinary numbers are \\"01\\" and \\"10\\". For the second test case, N = 4, the valid HoloBinary numbers are \\"0011\\", \\"0101\\", \\"0110\\", \\"1001\\", \\"1010\\", and \\"1100\\". Note that the output for each test case is lexicographically sorted.","solution":"from itertools import combinations def generate_holobinaries(N): Generate all valid HoloBinary numbers of length N (even integer) half = N // 2 holobinaries = set() for comb in combinations(range(N), half): binary = [\'0\'] * N for index in comb: binary[index] = \'1\' holobinaries.add(\'\'.join(binary)) return sorted(holobinaries) def process_test_cases(T, cases): results = [] for N in cases: holobinaries = generate_holobinaries(N) results.append(\\"n\\".join(holobinaries)) return \\"nn\\".join(results)"},{"question":"Alice is organizing a charity event, and she wants to ensure that all invitees are connected so they can form a network of contributors. For the event, Alice has N guests, indexed from 0 to N-1. She has a list of M connections indicating pairs of guests who know each other. Each guest can, directly or indirectly, be connected through mutual acquaintances. Your task is to determine if every guest is connected to every other guest either directly or indirectly. If it is true, print \\"Connected\\". Otherwise, print \\"Not Connected\\". Input: - The first line contains the number of test cases, T. - For each test case: - The first line contains two integers, N and M, the number of guests and the number of connections respectively. - The next M lines each contain two integers u and v, indicating that guest u and guest v know each other. Output: - For each test case, print \\"Connected\\" if all guests are indirectly connected, otherwise print \\"Not Connected\\". SAMPLE INPUT 2 3 2 0 1 1 2 4 2 0 1 2 3 SAMPLE OUTPUT Connected Not Connected Explanation: Test Case 1 - Guest 0 knows guest 1, and guest 1 knows guest 2. So, guest 0 is indirectly connected to guest 2. Hence, all guests are connected. Test Case 2 - Guest 0 knows guest 1 and guest 2 knows guest 3. There is no connection between guests 1 and 2, so guests 0 and 3 are not connected. Therefore, the guests are not all connected.","solution":"def check_connection(test_cases): results = [] def dfs(node, graph, visited): visited[node] = True for neighbor in graph[node]: if not visited[neighbor]: dfs(neighbor, graph, visited) for N, M, connections in test_cases: graph = [[] for _ in range(N)] for u, v in connections: graph[u].append(v) graph[v].append(u) visited = [False] * N dfs(0, graph, visited) if all(visited): results.append(\\"Connected\\") else: results.append(\\"Not Connected\\") return results def process_input(inputs): lines = inputs.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N, M = map(int, lines[index].split()) connections = [] for i in range(M): u, v = map(int, lines[index + i + 1].split()) connections.append((u, v)) test_cases.append((N, M, connections)) index += M + 1 return check_connection(test_cases)"},{"question":"You are given an undirected graph with n vertices and m edges. Each vertex has a value associated with it. Your task is to find the maximum value sum possible for a connected subgraph containing exactly k vertices. A subgraph is said to be connected if there exists a path between every pair of vertices in this subgraph. -----Input----- The first line contains two numbers n (2 ≤ n ≤ 100) and m (1 ≤ m ≤ 1000) — the number of vertices and the number of edges. The second line contains n integers v_1, v_2, ..., v_n (1 ≤ v_i ≤ 10^6) — the values of the vertices. Then m lines follow, each containing two integers u and v (1 ≤ u, v ≤ n) — representing an edge between vertices u and v. The last line contains one integer k (1 ≤ k ≤ n) — the number of vertices in the subgraph. -----Output----- Print the maximum sum of values possible for a connected subgraph containing exactly k vertices. If no such subgraph exists, print -1. -----Examples----- Input 5 4 1 2 3 4 5 1 2 1 3 1 4 4 5 3 Output 10 Input 3 3 10 20 30 1 2 2 3 1 3 2 Output 50 Input 4 2 5 2 8 6 1 2 3 4 3 Output -1","solution":"def max_value_connected_subgraph(n, m, values, edges, k): from itertools import combinations import networkx as nx # Create a graph using networkx G = nx.Graph() G.add_edges_from(edges) # Check if the subgraph with k nodes is connected def is_connected_subgraph(sub): subgraph = G.subgraph(sub) return nx.is_connected(subgraph) # Generate all combinations of k nodes all_combinations = combinations(range(n), k) max_sum = -1 for combo in all_combinations: if is_connected_subgraph(combo): subgraph_sum = sum(values[i] for i in combo) if subgraph_sum > max_sum: max_sum = subgraph_sum return max_sum # Example usage n = 5 m = 4 values = [1, 2, 3, 4, 5] edges = [(1, 2), (1, 3), (1, 4), (4, 5)] k = 3 # Convert edges from 1-based to 0-based edges = [(u - 1, v - 1) for u, v in edges] print(max_value_connected_subgraph(n, m, values, edges, k)) # the output should be 10"},{"question":"You are given a string consisting of lowercase English letters. Your task is to check if it\'s possible to delete some characters from this string (possibly zero) so that the remaining string is a palindrome. If it is possible, print \\"YES\\". Otherwise, print \\"NO\\". Input The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the following t lines contains a single string s (1 ≤ |s| ≤ 100) consisting of lowercase English letters. Output For each test case, print \\"YES\\" if it\'s possible to delete some characters from the string so that the remaining string is a palindrome, otherwise print \\"NO\\". Examples Input 5 ab aa racecar palindrome a Output YES YES YES NO YES Note For the first example, you can delete one character \'b\' to achieve the palindrome \'a\'. For the second example, the string \'aa\' is already a palindrome. For the third example, the string \'racecar\' is already a palindrome. For the fourth example, it is not possible to delete any characters to make the string \'palindrome\' a palindrome. For the fifth example, a single character string is always a palindrome.","solution":"def can_form_palindrome(s): Checks if it\'s possible to delete some characters from the string s (possibly zero) so that the remaining string is a palindrome. :param s: str - Input string :return: str - \\"YES\\" if it\'s possible, otherwise \\"NO\\" return \\"YES\\" if s == s[::-1] else \\"YES\\" if any(s[:i] + s[i+1:] == (s[:i] + s[i+1:])[::-1] for i in range(len(s))) else \\"NO\\" def check_palindromes(test_cases): Checks each string in the list of test_cases if it\'s possible to delete some characters to form a palindrome. :param test_cases: list of str - list of input strings :return: list of str - \\"YES\\" or \\"NO\\" for each test case return [can_form_palindrome(s) for s in test_cases]"}]'),A={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},F={class:"search-container"},C={class:"card-container"},Y={key:0,class:"empty-state"},j=["disabled"],P={key:0},z={key:1};function R(s,e,u,m,a,r){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",F,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>a.searchQuery=o),placeholder:"Search..."},null,512),[[y,a.searchQuery]]),a.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>a.searchQuery="")}," ✕ ")):l("",!0)]),t("div",C,[(n(!0),i(_,null,w(r.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),r.displayedPoems.length===0?(n(),i("div",Y,' No results found for "'+h(a.searchQuery)+'". ',1)):l("",!0)]),r.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...o)=>r.loadMore&&r.loadMore(...o))},[a.isLoading?(n(),i("span",z,"Loading...")):(n(),i("span",P,"See more"))],8,j)):l("",!0)])}const D=d(A,[["render",R],["__scopeId","data-v-81ccbd9e"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"deepseek/6.md","filePath":"deepseek/6.md"}'),L={name:"deepseek/6.md"},G=Object.assign(L,{setup(s){return(e,u)=>(n(),i("div",null,[x(D)]))}});export{B as __pageData,G as default};
