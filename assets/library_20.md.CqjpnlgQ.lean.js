import{_ as c,o as n,c as r,a as t,m as f,t as h,C as p,M as b,U as _,f as l,F as v,p as w,e as y,q}from"./chunks/framework.B1z0IdBH.js";const x={name:"PoemCard",props:{poem:{type:Object,required:!0}}},k={class:"poem-container"},T={class:"review"},C={class:"review-title"},R={class:"review-content"};function I(i,e,u,d,s,a){return n(),r("div",k,[t("div",T,[t("div",C,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),f(h(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",R,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),f(h(u.poem.solution),1)])])])}const F=c(x,[["render",I],["__scopeId","data-v-20f77006"]]),A=JSON.parse(`[{"question":"Write a function to convert a binary string to an integer. The function should take a binary string as input and return the corresponding integer. The binary string does not contain any spaces or leading zeros. My input is a binary string '101010'.","solution":"def binary_to_integer(binary_string): Converts a binary string to an integer. Args: binary_string (str): A string containing a binary number. Returns: int: The integer representation of the binary string. return int(binary_string, 2)"},{"question":"Write a function to determine if a non-empty binary search tree (BST) contains a pair of numbers whose sum equals a given number \`k\`.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def findTarget(root, k): Returns True if there exist two elements in the BST such that their sum is equal to k, otherwise returns False. if not root: return False def inorder_traverse(node, elements): if not node: return inorder_traverse(node.left, elements) elements.append(node.val) inorder_traverse(node.right, elements) elements = [] inorder_traverse(root, elements) l, r = 0, len(elements) - 1 while l < r: s = elements[l] + elements[r] if s == k: return True elif s < k: l += 1 else: r -= 1 return False"},{"question":"Write a function to flatten a nested list of integers using recursion.","solution":"def flatten(nested_list): Flattens a nested list of integers. Args: nested_list (list): The nested list to flatten. Returns: list: The flattened list. flattened_list = [] for element in nested_list: if isinstance(element, list): flattened_list.extend(flatten(element)) else: flattened_list.append(element) return flattened_list"},{"question":"Write a function to implement the \`string.ascii_letters\`, \`string.digits\`, and \`string.punctuation\` constants from the \`string\` module in Python. You should create custom functions \`ascii_letters()\`, \`digits()\`, and \`punctuation()\` that return all letters (both lowercase and uppercase), all digits (0-9), and all punctuation characters respectively. Use a character range for the letters and digits, and a predefined string for the punctuation.","solution":"def ascii_letters(): Returns a string of all ASCII letters (both lowercase and uppercase). return ''.join(chr(i) for i in range(65, 91)) + ''.join(chr(i) for i in range(97, 123)) def digits(): Returns a string of all digits (0-9). return ''.join(chr(i) for i in range(48, 58)) def punctuation(): Returns a string of all punctuation characters. return \\"!\\"#%&'()*+,-./:;<=>?@[]^_\`{|}~\\""},{"question":"Write a function to search for a target value in a sorted and rotated array using binary search. The array was originally sorted in increasing order before it was rotated. The function should return the index of the target if it is found, otherwise -1. Assume the array does not contain duplicate values.","solution":"def search_rotated_array(arr, target): Searches for a target value in a sorted and rotated array using binary search. :param arr: List[int] - The sorted and rotated array with unique values. :param target: int - The target value to search for. :return: int - The index of the target value if found, otherwise -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 # Check if we found the target if arr[mid] == target: return mid # Determine the sorted side if arr[left] <= arr[mid]: # Left side is sorted if arr[left] <= target < arr[mid]: right = mid - 1 else: left = mid + 1 else: # Right side is sorted if arr[mid] < target <= arr[right]: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a function to find the sum of all even numbers between 1 and N (inclusive). What should be the approach to solve this problem with consideration of time and space complexity?","solution":"def sum_of_even_numbers(N): Returns the sum of all even numbers between 1 and N (inclusive). m = N // 2 return m * (m + 1)"},{"question":"Write a function to find the next greatest number made from the digits of a given number. If no such number exists, return -1. For example, given the number 1234, the next greatest number with the same digits is 1243. If the number is 4321, there is no greater number possible with those digits, so the function should return -1.","solution":"def next_greater_number(n): digits = list(str(n)) # Step 1: Identify the pivot point where digits[i] < digits[i+1] i = len(digits) - 2 while i >= 0 and digits[i] >= digits[i + 1]: i -= 1 if i == -1: return -1 # No greater number is possible # Step 2: Find the smallest digit on right side which is greater than digits[i] j = len(digits) - 1 while digits[j] <= digits[i]: j -= 1 # Step 3: Swap the digits[i] and digits[j] digits[i], digits[j] = digits[j], digits[i] # Step 4: Reverse the digits after the pivot digits = digits[:i+1] + digits[i+1:][::-1] # Convert list of digits back to integer return int(''.join(digits))"},{"question":"Write a function to calculate the difference between two dates.","solution":"from datetime import datetime def date_difference(date1, date2, date_format=\\"%Y-%m-%d\\"): Returns the difference between two dates in days. Args: date1 (str): The first date as a string. date2 (str): The second date as a string. date_format (str): The format of the input dates. Default is \\"%Y-%m-%d\\". Returns: int: The difference in days between date1 and date2. d1 = datetime.strptime(date1, date_format) d2 = datetime.strptime(date2, date_format) return abs((d2 - d1).days)"},{"question":"Write a function to find the maximum value of the absolute difference between any two elements in an array of integers. The function should return the maximum absolute difference.","solution":"def max_absolute_difference(arr): Returns the maximum value of the absolute difference between any two elements in the array. if not arr or len(arr) < 2: return 0 min_value = float('inf') max_value = float('-inf') for num in arr: if num < min_value: min_value = num if num > max_value: max_value = num return abs(max_value - min_value)"},{"question":"Write a function to remove duplicates from an array and return the new array in O(n) time complexity and O(1) space complexity.","solution":"def remove_duplicates(arr): Removes duplicates from sorted array \`arr\` in O(n) time and O(1) space. Returns the array in place with no extra space used. Args: arr (list): A list of integers sorted in non-decreasing order Returns: list: The list with duplicates removed in place. if not arr: return arr write_index = 1 for i in range(1, len(arr)): if arr[i] != arr[i - 1]: arr[write_index] = arr[i] write_index += 1 return arr[:write_index]"},{"question":"Write a function to convert an integer to its hexadecimal representation as a string. The function should handle both positive and negative integers. For negative integers, you should use two's complement representation in hexadecimal.","solution":"def int_to_hex(n): Converts an integer to its hexadecimal representation as a string. Handles both positive and negative integers using two's complement. if n >= 0: return hex(n) else: return hex((1 << 32) + n)"},{"question":"Write a function to determine and return the root of a binary search tree using the Morris traversal algorithm with Python.","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key def morris_traversal_find_root(root): Determines and returns the root of a binary search tree using the Morris traversal algorithm. current = root while current: # If there is no left subtree, move to the right subtree if not current.left: current = current.right else: # Find the inorder predecessor of current pre = current.left while pre.right and pre.right is not current: pre = pre.right # If the right subtree of the inorder predecessor of current is null, # then establish a temporary link and move to the left subtree if not pre.right: pre.right = current current = current.left else: # If the right subtree is already linked to current, remove the link # and move to the right subtree pre.right = None current = current.right # After Morris Traversal, current becomes None when traversal is done # The root of the BST remains unchanged and is the function argument \`root\` return root"},{"question":"Write a function to evaluate a simple arithmetic expression in prefix notation. Prefix notation, also known as Polish notation, is where the operator is placed before the operands. For example, the expression \\"- + 3 * 5 2\\" would be evaluated as -((3 + (5 * 2)) = -13","solution":"def evaluate_prefix(expression): Evaluates a simple arithmetic expression in prefix notation. Parameters: expression (str): The arithmetic expression in prefix notation. Returns: int/float: The evaluated result of the prefix expression. stack = [] # Split the expression to work with each part tokens = expression.split()[::-1] # Reverse the tokens for right-to-left evaluation. for token in tokens: if token in '+-*/': # Pop two operands from stack operand1 = stack.pop() operand2 = stack.pop() # Perform the operation if token == '+': result = operand1 + operand2 elif token == '-': result = operand1 - operand2 elif token == '*': result = operand1 * operand2 elif token == '/': result = operand1 / operand2 # Push the result back onto the stack stack.append(result) else: # Assume token is a number; convert it to int or float and push onto stack stack.append(float(token) if '.' in token else int(token)) # The final item on the stack is the result return stack[0]"},{"question":"Write a function to check if a string contains only unique characters. If it does, return \`True\`; otherwise, return \`False\`.","solution":"def has_unique_characters(s): Returns True if the string s contains only unique characters, otherwise False. return len(s) == len(set(s))"},{"question":"Write a function to find the maximum sum of a path from the root to a leaf in a binary tree. The path can start from any node and end at any leaf node.","solution":"class TreeNode: def __init__(self, value = 0, left = None, right = None): self.value = value self.left = left self.right = right def max_path_sum(root): Find the maximum sum of a path from the root to any leaf node in the binary tree. :param root: The root node of the binary tree. :return: The maximum sum from root to any leaf. def helper(node): if not node: return float('-inf') if not node.left and not node.right: return node.value left_sum = helper(node.left) right_sum = helper(node.right) return node.value + max(left_sum, right_sum) return helper(root)"},{"question":"Write a function to sort an array using the insertion sort algorithm. The function should take an array of integers as input and return the sorted array. Insertion sort iterates through the array, comparing each element with the ones before it and inserting it into its correct position. The function should use a loop to iterate through the array and nested loops to compare and swap elements as needed.","solution":"def insertion_sort(arr): Sorts an array of integers using the insertion sort algorithm. Parameters: arr (list): List of integers. Returns: list: Sorted list of integers. for i in range(1, len(arr)): key = arr[i] j = i - 1 # Move elements of arr[0..i-1] that are greater than key, to one position ahead # of their current position while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"Write a function to find the longest common prefix among a list of strings. The function should return the longest common prefix string via recursion. If there is no common prefix, return an empty string \\"\\". The list of strings can contain both empty strings and strings of varying lengths.","solution":"def longest_common_prefix_rec(strings): Finds the longest common prefix among a list of strings using recursion. if not strings: return \\"\\" # Helper function that finds common prefix between two strings def common_prefix(str1, str2): min_length = min(len(str1), len(str2)) for i in range(min_length): if str1[i] != str2[i]: return str1[:i] return str1[:min_length] def recursive_helper(strings, low, high): if low == high: return strings[low] else: mid = (low + high) // 2 left_prefix = recursive_helper(strings, low, mid) right_prefix = recursive_helper(strings, mid+1, high) return common_prefix(left_prefix, right_prefix) return recursive_helper(strings, 0, len(strings) - 1)"},{"question":"Write a function to reverse a string in Python. What should be the function's signature and what should it do?","solution":"def reverse_string(s: str) -> str: Returns the reversed string of the input string s. return s[::-1]"},{"question":"Write a function to reverse a string \`s\` in Python. Here's a sample string: \`s = \\"hello world\\"\`.","solution":"def reverse_string(s): Returns the reversed version of the input string s. return s[::-1]"},{"question":"Write a function to flatten a list of lists into a single list. The function should handle lists with varying levels of nesting.","solution":"def flatten_list(nested_list): Flattens a nested list into a single list. flat_list = [] def flatten(sublist): for item in sublist: if isinstance(item, list): flatten(item) else: flat_list.append(item) flatten(nested_list) return flat_list"},{"question":"Write a function to convert a Binary Search Tree (BST) into a sorted doubly linked list in-place. The function should return the head of the sorted doubly linked list. Each node in the doubly linked list should have a reference to both its next and previous node. Additionally, if the tree has only one node, return the node itself as the head.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right class DoublyLinkedListNode: def __init__(self, val=0, prev=None, next=None): self.val = val self.prev = prev self.next = next def bst_to_doubly_linked_list(root: TreeNode) -> DoublyLinkedListNode: if not root: return None head = None prev = None def in_order_traversal(node): nonlocal head, prev if not node: return in_order_traversal(node.left) new_node = DoublyLinkedListNode(node.val) if prev: prev.next = new_node new_node.prev = prev else: head = new_node prev = new_node in_order_traversal(node.right) in_order_traversal(root) return head"},{"question":"Write a function to print a 2D array using nested loops.","solution":"def print_2d_array(array): Prints the 2D array in a formatted way. for row in array: for item in row: print(item, end=' ') print()"},{"question":"Write a function to find the maximum number in a list without using built-in functions max() or any other sorting method.","solution":"def find_maximum(numbers): Returns the maximum number in a list of numbers without using built-in functions like max() or sorted(). if not numbers: # Check for empty list raise ValueError(\\"The list is empty\\") maximum_number = numbers[0] for number in numbers[1:]: if number > maximum_number: maximum_number = number return maximum_number"},{"question":"Write a function to implement the round robin scheduling algorithm for process scheduling. The function should take in a list of processes and a quantum (time slice) as input, and return the order in which the processes will execute.","solution":"def round_robin_scheduling(processes, quantum): Implements the round robin scheduling algorithm and returns the order in which the processes will be executed. Args: processes (list of tuples): A list where each tuple contains the process name and its burst time [(str, int), ...] quantum (int): The time slice each process is allowed to run before switching to the next. Returns: list of str: The order in which the processes are executed. process_queue = processes.copy() execution_order = [] while process_queue: process_name, burst_time = process_queue.pop(0) if burst_time <= quantum: execution_order.append(process_name) else: execution_order.append(process_name) process_queue.append((process_name, burst_time - quantum)) return execution_order"},{"question":"Write a function to check if an array of strings contains a palindrome. If it does, return the palindrome, otherwise return a message indicating no palindrome was found.","solution":"def is_palindrome(s): Helper function to check if a string is a palindrome. return s == s[::-1] def find_palindrome(strings): Returns the first palindrome from the list of strings if any. If no palindrome is found, returns a message indicating no palindrome was found. for s in strings: if is_palindrome(s): return s return \\"No palindrome found\\""},{"question":"Write a function to find the second maximum number in a list of integers. If the list does not contain a second maximum number, return \`None\`.","solution":"def second_maximum(lst): Returns the second maximum number in a list of integers. If the list does not contain a second maximum number, returns None. if len(lst) < 2: return None first_max = second_max = float('-inf') for num in lst: if num > first_max: second_max = first_max first_max = num elif first_max > num > second_max: second_max = num return second_max if second_max != float('-inf') else None"},{"question":"Write a function to return the second maximum number in an array. If there is no second maximum number, return None.","solution":"def second_maximum(nums): Returns the second maximum number in an array. If there is no second maximum number, returns None. if len(nums) < 2: return None first_max = second_max = float('-inf') for num in nums: if num > first_max: second_max = first_max first_max = num elif first_max > num > second_max: second_max = num return second_max if second_max != float('-inf') else None"},{"question":"Write a function to compute the length of a string recursively.","solution":"def recursive_length(s): Returns the length of a string s using a recursive approach. if s == \\"\\": return 0 else: return 1 + recursive_length(s[1:])"},{"question":"Write a function to rotate an array to the left by \`k\` steps. The rotation should be done in-place, meaning the array should be modified directly without using extra space for another array.","solution":"def rotate_left_in_place(nums, k): Rotates the elements of array nums to the left by k steps in-place. :param nums: List[int] - The array to be rotated. :param k: int - The number of steps to rotate the array. n = len(nums) k = k % n # To handle if k is greater than the length of the array # Reverse the first part reverse(nums, 0, k - 1) # Reverse the second part reverse(nums, k, n - 1) # Reverse the whole array reverse(nums, 0, n - 1) def reverse(nums, start, end): Helper function to reverse elements in the array nums from index start to index end. :param nums: List[int] - The array to be reversed. :param start: int - The starting index. :param end: int - The ending index. while start < end: nums[start], nums[end] = nums[end], nums[start] start += 1 end -= 1"},{"question":"Write a function to filter out unwanted characters from a string based on a provided pattern.","solution":"def filter_unwanted_characters(string, pattern): Filters out characters from the string that are not in the given pattern. :param string: The input string to be filtered. :param pattern: The string containing allowed characters. :return: A new string composed of only the characters present in the pattern. return ''.join([char for char in string if char in pattern])"},{"question":"Write a function to find the maximum element in an array. What is its time complexity?","solution":"def find_maximum(arr): Returns the maximum element in an array. :param arr: List of numbers :return: Maximum number in the list if not arr: raise ValueError(\\"Array cannot be empty\\") max_element = arr[0] for num in arr: if num > max_element: max_element = num return max_element # The time complexity of this function is O(n), where n is the number of elements in the array."},{"question":"Write a function to find the contiguous subarray within an array (containing at least one number) which has the largest product.","solution":"def max_product_subarray(nums): if not nums: return 0 current_max = current_min = global_max = nums[0] for num in nums[1:]: if num < 0: current_max, current_min = current_min, current_max current_max = max(num, current_max * num) current_min = min(num, current_min * num) global_max = max(global_max, current_max) return global_max"},{"question":"Write a function to sum numbers from 1 to n, but only include numbers that are multiples of 3 or 5.","solution":"def sum_multiples_of_3_or_5(n): Returns the sum of all numbers from 1 to n that are multiples of 3 or 5. return sum(i for i in range(1, n + 1) if i % 3 == 0 or i % 5 == 0)"},{"question":"Write a function to simulate a coin toss. The function should accept an integer \`n\` as input and return a list of \`n\` coin toss results, where each result is either 'H' for Heads or 'T' for Tails. The function should use a random number generator to decide the outcome of each coin toss.","solution":"import random def simulate_coin_toss(n): Simulate n coin tosses. Parameters: n (int): The number of coin tosses to simulate. Returns: list: A list of n results, where each result is 'H' for Heads or 'T' for Tails. results = [] for _ in range(n): if random.random() < 0.5: results.append('H') else: results.append('T') return results"},{"question":"Write a function to calculate the sum of the Fibonacci sequence up to a given number n. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones. The function should return the sum of all numbers in the Fibonacci sequence up to n.","solution":"def fibonacci_sum(n): Calculate the sum of the Fibonacci sequence up to a given number n. if n < 0: return 0 a, b = 0, 1 total = a while b <= n: total += b a, b = b, a + b return total"},{"question":"Write a function to implement bubble sort in a linked list.","solution":"class Node: def __init__(self, data): self.data = data self.next = None class LinkedList: def __init__(self): self.head = None def append(self, data): if not self.head: self.head = Node(data) else: current = self.head while current.next: current = current.next current.next = Node(data) def to_list(self): elements = [] current = self.head while current: elements.append(current.data) current = current.next return elements def bubble_sort(self): if not self.head: return swapped = True while swapped: swapped = False current = self.head while current and current.next: if current.data > current.next.data: current.data, current.next.data = current.next.data, current.data swapped = True current = current.next"},{"question":"Write a function to calculate the total number of subsets of a given set that sum up to a specific target. The function should take two parameters: a list of integers representing the set and an integer representing the target sum. The function should return the total number of subsets that sum up to the target.","solution":"def count_subsets(nums, target): Return the number of subsets of \`nums\` that sum up to \`target\`. def dfs(i, current_sum): if i == len(nums): return 1 if current_sum == target else 0 # Count subsets including nums[i] include_count = dfs(i + 1, current_sum + nums[i]) # Count subsets excluding nums[i] exclude_count = dfs(i + 1, current_sum) return include_count + exclude_count return dfs(0, 0)"},{"question":"Write a function to find the longest increasing subsequence (LIS) in an input list. The function should return the length of the longest increasing subsequence.","solution":"def length_of_LIS(nums): Returns the length of the longest increasing subsequence in the given list of numbers. if not nums: return 0 # lis[i] represents the length of the longest increasing subsequence # that ends with the element nums[i] lis = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: lis[i] = max(lis[i], lis[j] + 1) return max(lis)"},{"question":"Write a function to find the number of occurrence of a given number in the array. How can I program this efficiently?","solution":"def count_occurrences(arr, num): Returns the number of occurrences of num in the array arr. return arr.count(num)"},{"question":"Write a function to valid a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.","solution":"def is_valid_parentheses(s): Checks if the input string containing just '(', ')', '{', '}', '[' and ']' is valid. A string is valid if all brackets are closed in the correct order. stack = [] mapping = {')': '(', '}': '{', ']': '['} for char in s: if char in mapping: top_element = stack.pop() if stack else '#' if mapping[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"Write a function to calculate the minimum time required to travel from one node to any of the three nearest neighbors in a triangular grid. Each node in the grid has coordinates (x, y) and its neighbors are the nodes at (x+1, y), (x, y+1), and (x+1, y+1).","solution":"def minimum_travel_time(x, y): Calculates the minimum travel time to any of the nearest neighbors in a triangular grid. Each node has neighbors at (x+1, y), (x, y+1), and (x+1, y+1). The distance between any two directly connected nodes is 1 unit. Parameters: x (int): x-coordinate of the current node y (int): y-coordinate of the current node Returns: int: minimum travel time to reach any of the nearest neighbors # Since all neighbors are at a distance of 1 unit, the minimum travel time is always 1 return 1"},{"question":"Write a function to check if two given numeric strings are rotationally equivalent. Rotationally equivalent strings are strings that can be obtained one from the other by rotating a segment of one string to the other end. For instance, \\"abcde\\" and \\"deabc\\" both contain the same characters.","solution":"def are_rotationally_equivalent(str1, str2): Check if two given numeric strings are rotationally equivalent. if len(str1) != len(str2): return False combined = str1 + str1 return str2 in combined"},{"question":"Write a function to reverse the case of all letters in a given string. If the input string is empty, return \\"Empty String\\".","solution":"def reverse_case(s): Reverses the case of all letters in the given string. If the input string is empty, returns 'Empty String'. if not s: return \\"Empty String\\" return ''.join([ch.lower() if ch.isupper() else ch.upper() for ch in s])"},{"question":"Write a function to check if a given number is a perfect square. Answer in Python.","solution":"import math def is_perfect_square(num): Returns True if num is a perfect square, False otherwise. if num < 0: return False sqrt_num = math.isqrt(num) return sqrt_num * sqrt_num == num"},{"question":"Write a function to check if two strings are rotations of each other. For example, if the strings are \\"abcd\\" and \\"dabc\\", it returns True because \\"dabc\\" is a rotation of \\"abcd\\". However, if the strings are \\"abcd\\" and \\"dcba\\", it should return False.","solution":"def are_rotations(s1, s2): Check if two strings are rotations of each other. Args: s1 (str): The first string. s2 (str): The second string. Returns: bool: True if one string is a rotation of the other, False otherwise. if len(s1) != len(s2): return False combined = s1 + s1 return s2 in combined"},{"question":"Write a function to find the minimum number of swaps required to sort an array. The function should take an array as input and return the minimum number of swaps needed.","solution":"def min_swaps_to_sort(arr): Returns the minimum number of swaps required to sort the array. n = len(arr) arr_pos = [*enumerate(arr)] arr_pos.sort(key=lambda it: it[1]) visited = {k: False for k in range(n)} answer = 0 for i in range(n): if visited[i] or arr_pos[i][0] == i: continue cycle_size = 0 x = i while not visited[x]: visited[x] = True x = arr_pos[x][0] cycle_size += 1 if cycle_size > 0: answer += (cycle_size - 1) return answer"},{"question":"Write a function to convert a number from base 10 (decimal) to base 2 (binary).","solution":"def decimal_to_binary(n): Converts a decimal number to its binary representation. Parameters: - n: int, the decimal number to convert; n should be a non-negative integer. Returns: - str: the binary representation of the decimal number as a string. if n == 0: return \\"0\\" binary = \\"\\" while n > 0: binary = str(n % 2) + binary n //= 2 return binary"},{"question":"Write a function to return the Nth Fibonacci number using an iterative approach.","solution":"def fibonacci(n): Returns the Nth Fibonacci number using an iterative approach. if n <= 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a function to check if a given list of integers contains any duplicates. Given the list is in ascending order, you should implement the function in Python using a method that takes less than O(n log n) time complexity and has fewer than O(n) space complexity.","solution":"def has_duplicates(lst): Check if a given list of integers contains any duplicates. Assumes the list is in ascending order. :param lst: List of integers in ascending order :return: True if there are duplicates, False otherwise for i in range(1, len(lst)): if lst[i] == lst[i - 1]: return True return False"},{"question":"Write a function to calculate the maximum sum of elements within a given subarray of length \`k\` within an array \`nums\`.","solution":"def max_sum_subarray(nums, k): Returns the maximum sum of elements within a subarray of length k. :param nums: List of integers. :param k: Length of the subarray. :return: Maximum sum of the subarray of length k. if len(nums) < k: return None # Not enough elements for the subarray to exist max_sum = current_sum = sum(nums[:k]) for i in range(k, len(nums)): current_sum = current_sum - nums[i - k] + nums[i] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function to traverse three binary trees (t1, t2, and t3) and return their inorder traversal results.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def inorder_traversal(root): Performs an inorder traversal of a binary tree and returns the values in a list. if root is None: return [] result = [] def traverse(node): if node: traverse(node.left) result.append(node.val) traverse(node.right) traverse(root) return result def inorder_traversals(t1, t2, t3): Given three binary trees t1, t2, and t3, returns a tuple containing their inorder traversal results. return (inorder_traversal(t1), inorder_traversal(t2), inorder_traversal(t3))"},{"question":"Write a function to find the maximum product of any two elements in an array. The function should handle arrays with both positive and negative integers, ensuring that the maximum product can be positive or negative based on the values in the array.","solution":"def max_product_of_two_elements(arr): Returns the maximum product of any two elements in the array. if len(arr) < 2: raise ValueError(\\"Array should have at least two elements\\") # Initialize the two largest and two smallest values max1, max2 = float('-inf'), float('-inf') min1, min2 = float('inf'), float('inf') for num in arr: # Update the largest values if num > max1: max2 = max1 max1 = num elif num > max2: max2 = num # Update the smallest values if num < min1: min2 = min1 min1 = num elif num < min2: min2 = num # Calculate the maximum product of two elements in the array return max(max1 * max2, min1 * min2)"},{"question":"Write a function to calculate the sum of all even numbers in an array without using any loops or standard library functions like \`sum()\` or \`reduce()\`.","solution":"def sum_even_numbers(arr): Returns the sum of all even numbers in the given array. if not arr: return 0 first, *rest = arr if first % 2 == 0: return first + sum_even_numbers(rest) else: return sum_even_numbers(rest)"},{"question":"Write a function to calculate the sum of all even numbers between two given numbers in an inclusive manner.","solution":"def sum_of_evens(start, end): Returns the sum of all even numbers between start and end, inclusive. return sum(number for number in range(start, end + 1) if number % 2 == 0)"},{"question":"Write a function to find the maximum number in a list using the Synchronous Generator (Asyncio Generator) in Python.","solution":"import asyncio async def async_max(numbers): Returns the maximum number in a list using asynchronous generators. max_num = None for number in numbers: if max_num is None or number > max_num: await asyncio.sleep(0) # Simulate asynchronous processing max_num = number return max_num"},{"question":"Write a function to sort an array of integers in ascending order using the quicksort algorithm. The function should take an array of integers and its length as parameters, and return the sorted array. Ensure that the function is efficient and handles various edge cases, such as empty arrays or arrays with duplicate values.","solution":"def quicksort(arr, low=0, high=None): Sorts an array of integers in ascending order using the quicksort algorithm. Parameters: arr (list): A list of integers to be sorted. low (int): The starting index of the array segment to sort. high (int): The ending index of the array segment to sort. Returns: list: The sorted array. if high is None: high = len(arr) - 1 if low < high: pivot_index = partition(arr, low, high) quicksort(arr, low, pivot_index - 1) quicksort(arr, pivot_index + 1, high) return arr def partition(arr, low, high): Picks the last element as pivot, places the pivot element at its correct position, and places all elements smaller than the pivot to its left and all elements greater to its right. Parameters: arr (list): A list of integers to be sorted. low (int): The starting index of the array segment to sort. high (int): The ending index of the array segment to sort. Returns: int: The index position of the pivot. pivot = arr[high] i = low - 1 for j in range(low, high): if arr[j] <= pivot: i += 1 arr[i], arr[j] = arr[j], arr[i] arr[i + 1], arr[high] = arr[high], arr[i + 1] return i + 1"},{"question":"Write a function to check if a given string has only lowercase letters.","solution":"def is_all_lowercase(s): Checks if the given string s contains only lowercase letters. Parameters: s (str): The string to check. Returns: bool: True if all characters in s are lowercase letters, False otherwise. for char in s: if not char.islower(): return False return True"},{"question":"Write a function to reverse a singly linked list. In the function, only the nodes themselves can be changed. The head pointer can not be passed as a parameter.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head: ListNode) -> ListNode: Reverses a singly linked list and returns the new head of the reversed list. The nodes themselves are changed, and the head pointer can not be passed as a parameter. prev = None current = head while current is not None: next_node = current.next # temporarily store the next node current.next = prev # reverse the current node's pointer prev = current # move the prev pointer one step ahead current = next_node # move to the next node in the original list return prev"},{"question":"Write a function to find the contiguous subarray within a one-dimensional array of numbers which has the largest sum. This problem is commonly known as Kadane's algorithm. Can you provide an implementation in Python?","solution":"def max_subarray_sum(nums): Finds the contiguous subarray within a one-dimensional array of numbers which has the largest sum. This uses Kadane's algorithm. :param nums: List of integers :return: Integer representing the largest sum if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to check if a number is prime or not. Assume the function will receive a natural number as input and return a boolean value (True if it’s a prime, False otherwise).","solution":"def is_prime(n): Returns True if n is a prime number, False otherwise. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True"},{"question":"Write a function to calculate the sum of all elements in a given list. You should use recursion to achieve this.","solution":"def recursive_sum(lst): Returns the sum of all elements in a given list using recursion. if len(lst) == 0: return 0 else: return lst[0] + recursive_sum(lst[1:])"},{"question":"Write a function to implement the Quick Sort algorithm in Python. Quick Sort is a divide-and-conquer algorithm. It works by selecting a 'pivot' element from the array and partitioning the other elements into two sub-arrays, according to whether they are less than or greater than the pivot. The sub-arrays are then recursively sorted. This can be done in-place, requiring small additional amounts of memory to perform the sorting.","solution":"def quick_sort(arr): Sorts the array in-place using the Quick Sort algorithm. def partition(low, high): pivot = arr[high] i = low - 1 for j in range(low, high): if arr[j] <= pivot: i += 1 arr[i], arr[j] = arr[j], arr[i] arr[i + 1], arr[high] = arr[high], arr[i + 1] return i + 1 def quick_sort_recursive(low, high): if low < high: pi = partition(low, high) quick_sort_recursive(low, pi - 1) quick_sort_recursive(pi + 1, high) quick_sort_recursive(0, len(arr) - 1) return arr"},{"question":"Write a function to calculate the maximum number of unique characters that can be contained in a substring of a given string, ensuring that no character repeats more than once in the substring.","solution":"def max_unique_chars_substring(s): Returns the maximum number of unique characters in any substring of the given string s, ensuring that no character repeats more than once in the substring. max_len = 0 start = 0 char_index = {} for end in range(len(s)): if s[end] in char_index and char_index[s[end]] >= start: start = char_index[s[end]] + 1 char_index[s[end]] = end max_len = max(max_len, end - start + 1) return max_len"},{"question":"Write a function to find the sum of the digits of the largest number in a list of non-negative integers.","solution":"def sum_of_digits_of_largest_number(numbers): This function takes a list of non-negative integers and returns the sum of the digits of the largest number in the list. if not numbers: return 0 largest_number = max(numbers) return sum(int(digit) for digit in str(largest_number))"},{"question":"Write a function to check if a given list of strings contains duplicate elements. If it does, return the first duplicate element encountered. If there are no duplicates, return 'No duplicates found'. Write a Python function to accomplish this.","solution":"def find_first_duplicate(strings): Returns the first duplicate element in the given list of strings. If no duplicate is found, returns 'No duplicates found.' :param strings: list of strings to check for duplicates :return: first duplicate string or 'No duplicates found.' seen = set() for string in strings: if string in seen: return string seen.add(string) return 'No duplicates found'"},{"question":"Write a function to sort a list of integers in ascending order using the bubble sort algorithm in Python. What is the time complexity of this algorithm?","solution":"def bubble_sort(arr): Sorts a list of integers in ascending order using the bubble sort algorithm. :param arr: List of integers to be sorted. :return: Sorted list of integers in ascending order. n = len(arr) for i in range(n): swapped = False for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] swapped = True if not swapped: break return arr # Time Complexity of Bubble Sort: O(n^2)"},{"question":"Write a function to score a string against a dictionary of terms. The function should take in a string and a dictionary of terms (where the keys are the terms and the values are the corresponding scores), and return the accumulated score of the string based on the dictionary.","solution":"def score_string(s, terms): Scores the string s based on the dictionary of terms where keys are the terms and values are the scores. Parameters: s (str): The input string to be scored. terms (dict): A dictionary where keys are terms (substrings to look for) and values are the scores for those terms. Returns: int: The accumulated score of the string based on the terms dictionary. score = 0 for term, value in terms.items(): if term in s: score += value return score"},{"question":"Write a function to compute the factorial of a given number \`n\`. The function should be optimized for large values of \`n\`.","solution":"import math def factorial(n): Returns the factorial of the given non-negative integer n. Uses math.factorial for optimized large number calculation. if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") return math.factorial(n)"},{"question":"Write a function to find the most frequent integer in an array of integers. If there are multiple integers with the same highest frequency, return the smallest one among them. If the array is empty, return -1.","solution":"def most_frequent_integer(arr): Finds the most frequent integer in the array. If there are multiple integers with the same highest frequency, returns the smallest one among them. If the array is empty, returns -1. if not arr: return -1 frequency = {} for num in arr: frequency[num] = frequency.get(num, 0) + 1 max_freq = max(frequency.values()) most_frequent = min(key for key, value in frequency.items() if value == max_freq) return most_frequent"},{"question":"Write a function to determine if a given list of integers contains duplicates. Your function should return \`True\` if there are any duplicate integers and \`False\` otherwise. The function should have a time complexity of O(n) where n is the number of integers in the list. Additionally, the function should use O(n) additional space.","solution":"def contains_duplicates(numbers): Returns True if the list 'numbers' contains any duplicates, otherwise False. seen = set() for number in numbers: if number in seen: return True seen.add(number) return False"},{"question":"Write a function to merge two dictionaries by adding the values of common keys. If a key is present in one dictionary but not the other, it should be included intact.","solution":"def merge_dictionaries(dict1, dict2): Merge two dictionaries by adding the values of common keys. If a key is present in one dictionary but not the other, it should be included intact. merged_dict = dict1.copy() # Start with all keys and values from dict1 for key, value in dict2.items(): if key in merged_dict: merged_dict[key] += value # Add values for keys present in both dictionaries else: merged_dict[key] = value # Add keys and values from dict2 not in dict1 return merged_dict"},{"question":"Write a function to find the second smallest element in a given array without sorting it.","solution":"def second_smallest(arr): Returns the second smallest element in the given array. If array length is less than 2, returns None. if len(arr) < 2: return None first = second = float('inf') for num in arr: if num < first: second = first first = num elif first < num < second: second = num if second == float('inf'): return None else: return second"},{"question":"Write a function to solve the N-Queens problem using backtracking. The function should take the size of the board as input and return a list of all possible solutions for placing N non-attacking queens on an N×N chessboard.","solution":"def solve_n_queens(n): Solve the N-Queens problem and return all possible solutions. :param n: The size of the chessboard (n x n) :return: A list of solutions, where each solution is represented as a list of strings. Each string represents a row of the chessboard, with 'Q' indicating a queen and '.' indicating an empty space. def backtrack(row, diagonals, anti_diagonals, cols, current_board): # If we've reached the last row, it means we have a valid solution if row == n: result.append([\\"\\".join(row) for row in current_board]) return for col in range(n): current_diagonal = row - col current_anti_diagonal = row + col if col in cols or current_diagonal in diagonals or current_anti_diagonal in anti_diagonals: continue # Add the queen to the board cols.add(col) diagonals.add(current_diagonal) anti_diagonals.add(current_anti_diagonal) current_board[row][col] = 'Q' # Move to the next row backtrack(row + 1, diagonals, anti_diagonals, cols, current_board) # Remove the queen from the board (backtrack) cols.remove(col) diagonals.remove(current_diagonal) anti_diagonals.remove(current_anti_diagonal) current_board[row][col] = '.' result = [] empty_board = [['.' for _ in range(n)] for _ in range(n)] backtrack(0, set(), set(), set(), empty_board) return result"},{"question":"Write a function to find the smallest number in a list using recursion. The function should take a list of integers and an index as parameters, and it should return the smallest number in the range from the beginning of the list to the index provided.","solution":"def find_smallest_rec(arr, index): Returns the smallest number in the list up to the given index using recursion. # Base case: if the list has only one element or index is 0, return the element if index == 0: return arr[0] # Get the smallest number in the rest of the array up to the previous index previous_min = find_smallest_rec(arr, index - 1) # Return the smaller value between the current element and the previously found minimum return min(previous_min, arr[index])"},{"question":"Write a function to convert the case of all characters in a given string.","solution":"def convert_case(s): Converts the case of all characters in the given string. Uppercase characters are converted to lowercase and lowercase characters are converted to uppercase. :param s: Input string :return: String with converted case characters return s.swapcase()"},{"question":"Write a function to find the maximum frequency of a character in a given string.","solution":"def max_char_frequency(s): Returns the maximum frequency of a character in the given string s. if not s: return 0 char_count = {} for char in s: char_count[char] = char_count.get(char, 0) + 1 return max(char_count.values())"},{"question":"Write a function to reverse a string in Python. You should not use any built-in string reversal functions or slicing. You should iterate backwards through the string and construct the reversed string manually.","solution":"def reverse_string(s): Reverses the input string manually without using built-in reversal functions or slicing. reversed_str = [] for i in range(len(s) - 1, -1, -1): reversed_str.append(s[i]) return ''.join(reversed_str)"},{"question":"Write a function to check if a given number is a power of 2. If the number is a power of 2, the function should return \`true\`, otherwise it should return \`false\`. For example, 4 (2^2) is a power of 2, but 5 is not.","solution":"def is_power_of_two(n): Returns True if n is a power of 2, otherwise False. if n <= 0: return False return (n & (n - 1)) == 0"},{"question":"Write a function to identify the most frequently occurring element in an array. If there is more than one such element, the function should return the one that appears first in the array.","solution":"def most_frequent_element(arr): Returns the most frequently occurring element in an array. If there is more than one such element, returns the one that appears first. element_count = {} max_count = 0 most_frequent = None for element in arr: if element in element_count: element_count[element] += 1 else: element_count[element] = 1 if element_count[element] > max_count or (element_count[element] == max_count and arr.index(element) < arr.index(most_frequent)): max_count = element_count[element] most_frequent = element return most_frequent"},{"question":"Write a function to traverse a 2D boolean array and print all the indices where the value is \`true\`.","solution":"def find_true_indices(matrix): Returns a list of tuples representing the indices (i, j) where the value is True in the given 2D boolean matrix. true_indices = [] for i in range(len(matrix)): for j in range(len(matrix[i])): if matrix[i][j]: true_indices.append((i, j)) return true_indices"},{"question":"Write a function to reverse a string in Python. The function should also ensure that the reversed string maintains the case of each character and only reverses alphabetic characters while ignoring non-alphabetic characters.","solution":"def reverse_string(s): Reverses the input string such that only alphabetic characters are reversed and non-alphabetic characters remain in their original positions. The case of the characters should be maintained. # Extract the alphabetic characters alpha_chars = [c for c in s if c.isalpha()] # Reverse the list of alphabetic characters alpha_chars.reverse() # Initialize a list to build the final reversed string result = [] alpha_index = 0 # Iterate over input string and construct the reversed version for char in s: if char.isalpha(): result.append(alpha_chars[alpha_index]) alpha_index += 1 else: result.append(char) # Join the list into a string and return return ''.join(result)"},{"question":"Write a function to find the index of the maximum value in an array.","solution":"def find_max_index(arr): Returns the index of the maximum value in the array. If the array is empty, returns None. if not arr: return None max_index = 0 for i in range(1, len(arr)): if arr[i] > arr[max_index]: max_index = i return max_index"},{"question":"Write a function to print the elements in a 2D array. How can I achieve this in Python?","solution":"def print_2d_array(array): Prints the elements of a 2D array in row-wise fashion. for row in array: print(' '.join(map(str, row)))"},{"question":"Write a function to generate the nth Fibonacci number in Python. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones. The sequence looks like this: 0, 1, 1, 2, 3, 5, 8, 13, ...","solution":"def fibonacci(n): Returns the nth Fibonacci number. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones. if n <= 0: return 0 elif n == 1: return 1 a, b = 0, 1 for i in range(2, n+1): a, b = b, a + b return b"},{"question":"Write a function to calculate the sum of elements in an array that are sorted in ascending order. If the array is empty, the function should return 0.","solution":"def sum_sorted_array(arr): Returns the sum of elements in an array if the array is sorted in ascending order. If the array is not sorted or is empty, the function returns 0. if not arr: # Check if array is empty return 0 if arr != sorted(arr): # Check if array is not sorted in ascending order return 0 return sum(arr)"},{"question":"Write a function to remove duplicates from a sorted linked list. The function should return the head of the modified list.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def remove_duplicates_from_sorted_list(head): Removes duplicates from a sorted linked list and returns the head of the modified list. :param head: ListNode, the head of the sorted linked list :return: ListNode, the head of the modified linked list without duplicates if not head: return head current = head while current and current.next: if current.val == current.next.val: current.next = current.next.next else: current = current.next return head"},{"question":"Write a function to implement the classic game of Rock, Paper, Scissors in Python. The function should take two parameters: \`player1_move\` and \`player2_move\`, which can be ' Rock ', ' Paper ', or ' Scissors '. The function should return the result of the game, which can be ' Player 1 wins ', ' Player 2 wins ', or ' It is a tie '!","solution":"def rock_paper_scissors(player1_move, player2_move): Determines the result of a Rock, Paper, Scissors game. Parameters: player1_move (str): Move of player 1 (should be 'Rock', 'Paper', or 'Scissors') player2_move (str): Move of player 2 (should be 'Rock', 'Paper', or 'Scissors') Returns: str: Result of the game ('Player 1 wins', 'Player 2 wins', or 'It is a tie!') winning_combinations = { 'Rock': 'Scissors', 'Scissors': 'Paper', 'Paper': 'Rock' } if player1_move == player2_move: return \\"It is a tie!\\" elif winning_combinations[player1_move] == player2_move: return \\"Player 1 wins\\" else: return \\"Player 2 wins\\""},{"question":"Write a function to find the maximum sum of a subarray within a given array of integers. Implement your function using Kadane's Algorithm, which is efficient with a time complexity of O(n).","solution":"def max_subarray_sum(arr): Finds the maximum sum of a subarray within a given array of integers. :param arr: List[int] - List of integers :return: int - Maximum sum of the subarray if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to perform matrix addition.","solution":"def add_matrices(matrix1, matrix2): Adds two matrices element-wise. Parameters: matrix1 (list of list of int/float): The first matrix to add. matrix2 (list of list of int/float): The second matrix to add. Returns: list of list of int/float: The resulting matrix after addition. Raises: ValueError: If the dimensions of the two matrices do not match. # Check if the dimensions of the matrices match if len(matrix1) != len(matrix2) or any(len(row1) != len(row2) for row1, row2 in zip(matrix1, matrix2)): raise ValueError(\\"Matrices must have the same dimensions\\") # Adding corresponding elements of the two matrices return [[elem1 + elem2 for elem1, elem2 in zip(row1, row2)] for row1, row2 in zip(matrix1, matrix2)]"},{"question":"Write a function to find the maximum profit in a list of stock prices. The function should take a list of integers representing the stock prices at different times and return the maximum profit that could be made by buying and selling once. For example, given the list [7, 1, 5, 3, 6, 4], the maximum profit would be 5 (buy at 1 and sell at 6).","solution":"def max_profit(prices): Returns the maximum profit that can be achieved from a list of stock prices by buying and selling once. :param prices: List[int] - The list of stock prices :return: int - The maximum profit if not prices: return 0 min_price = prices[0] max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Write a function to calculate the factorial of a given number using recursion. The function should handle edge cases such as negative inputs and inputs that exceed the maximum stack depth. Ensure your function is well-commented and tests are provided to validate its correctness.","solution":"def factorial(n): Calculates the factorial of a given number n using recursion. Parameters: n (int): The number for which to calculate the factorial. Returns: int: The factorial of the number n. Raises: ValueError: If n is negative, as factorial is not defined for negative numbers. RecursionError: To handle the cases where n exceeds the stack depth limit. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0 or n == 1: return 1 try: return n * factorial(n - 1) except RecursionError: raise RecursionError(\\"Recursion depth limit exceeded\\")"},{"question":"Write a function to find the maximum element in a doubly linked list.","solution":"class Node: def __init__(self, data): self.data = data self.next = None self.prev = None class DoublyLinkedList: def __init__(self): self.head = None def append(self, data): new_node = Node(data) if not self.head: self.head = new_node return last_node = self.head while last_node.next: last_node = last_node.next last_node.next = new_node new_node.prev = last_node def max_element(self): if not self.head: return None max_val = self.head.data current = self.head.next while current: if current.data > max_val: max_val = current.data current = current.next return max_val"},{"question":"Write a function to find the maximum sum of a subarray in a given array of integers. This is a classic problem known as the \\"Maximum Subarray Problem.\\" For example, given the array \`[-2, 1, -3, 4, -1, 2, 1, -5, 4]\`, the function should return \`6\`, which is the sum of the subarray \`[4, -1, 2, 1]\`.","solution":"def max_subarray_sum(nums): Finds the maximum sum of a subarray in a given array of integers. :param nums: List[int], the input array of integers :return: int, the maximum sum of a subarray if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to insert an element into a binary search tree in Python.","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def insert_into_bst(root, value): Inserts a value into the Binary Search Tree (BST) rooted at 'root' and returns the root node. if root is None: return TreeNode(value) if value < root.value: root.left = insert_into_bst(root.left, value) else: root.right = insert_into_bst(root.right, value) return root"},{"question":"Write a function to determine the character that appears most frequently in a given string. If multiple characters have the same highest frequency, return all of them in any order. The function should be case-insensitive and ignore non-alphabetic characters.","solution":"from collections import Counter def most_frequent_characters(s): Determine the character(s) that appear most frequently in a given string. The function is case-insensitive and ignores non-alphabetic characters. Args: s (str): The input string. Returns: list: A list of the most frequent character(s) in lowercase. s = s.lower() filtered_chars = [char for char in s if char.isalpha()] char_count = Counter(filtered_chars) if not char_count: return [] max_freq = max(char_count.values()) most_frequent_chars = [char for char, count in char_count.items() if count == max_freq] return most_frequent_chars"},{"question":"Write a function to remove duplicates from an array in-place using Python. The function should take an array of integers and return the length of the array after duplicates have been removed. The order of elements can be changed and the function should not use any extra space.","solution":"def remove_duplicates(nums): Removes duplicates from an array in-place. Args: nums (list): The input list of integers. Returns: int: The length of the array after removing duplicates. if not nums: return 0 write_index = 1 for read_index in range(1, len(nums)): if nums[read_index] != nums[read_index - 1]: nums[write_index] = nums[read_index] write_index += 1 return write_index"},{"question":"Write a function to calculate the maximum product of any contiguous subarray. You are given an array of integers that may contain both positive and negative numbers.","solution":"def max_product_subarray(nums): Returns the maximum product of any contiguous subarray. if not nums: return 0 max_product = current_max = current_min = nums[0] for num in nums[1:]: if num < 0: current_max, current_min = current_min, current_max current_max = max(num, current_max * num) current_min = min(num, current_min * num) max_product = max(max_product, current_max) return max_product"},{"question":"Write a function to multiply two matrices A and B and store the result in matrix C.","solution":"def matrix_multiply(A, B): Multiplies two matrices A and B and returns the result as matrix C. Parameters: A (list of list of int): Matrix A B (list of list of int): Matrix B Returns: list of list of int: Resultant matrix C after multiplying A and B # Number of rows and columns in A and B rows_A = len(A) cols_A = len(A[0]) rows_B = len(B) cols_B = len(B[0]) # Ensure the number of columns in A is equal to the number of rows in B if cols_A != rows_B: raise ValueError(\\"Number of columns in A must be equal to the number of rows in B\\") # Initialize resultant matrix C with zeros C = [[0 for _ in range(cols_B)] for _ in range(rows_A)] # Perform matrix multiplication for i in range(rows_A): for j in range(cols_B): for k in range(cols_A): C[i][j] += A[i][k] * B[k][j] return C"},{"question":"Write a function to check if a given string is rotationaly equivalent to another string. Two strings are considered rotationally equivalent if one string can be rotated to get the other. For example, \\"waterbottle\\" can be rotated to become \\"erbottlewat\\".","solution":"def is_rotationally_equivalent(s1, s2): Check if string s1 is rotationally equivalent to string s2. if len(s1) != len(s2): return False return s2 in (s1 + s1)"},{"question":"Write a function to check if a number is prime and then use this function to find all prime numbers less than a given number N.","solution":"def is_prime(num): Check if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def primes_less_than(N): Find all prime numbers less than a given number N. return [num for num in range(2, N) if is_prime(num)]"},{"question":"Write a function to create a right-angled triangle pattern using stars (*). The function should take an integer \`n\` as input and print a right-angled triangle pattern with \`n\` rows. Each row should have one more star than the previous row, forming a pyramid-like shape.","solution":"def right_angled_triangle(n): Prints a right-angled triangle pattern with n rows. Each row i (where 1 <= i <= n) contains i stars (*). for i in range(1, n + 1): print('*' * i)"},{"question":"Write a function to generate the first n Fibonacci numbers without using recursion.","solution":"def generate_fibonacci(n): Generates the first n Fibonacci numbers without using recursion. Parameters: n (int): The number of Fibonacci numbers to generate. Returns: list: A list containing the first n Fibonacci numbers. if n <= 0: return [] fibonacci_sequence = [0, 1] for i in range(2, n): next_fib = fibonacci_sequence[-1] + fibonacci_sequence[-2] fibonacci_sequence.append(next_fib) return fibonacci_sequence[:n]"},{"question":"Write a function to count the number of islands in a given 2D binary grid. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are surrounded by water.","solution":"def num_islands(grid): Returns the number of islands in the given 2D binary grid. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. if not grid: return 0 rows, cols = len(grid), len(grid[0]) visited = [[False]*cols for _ in range(rows)] def dfs(r, c): if r < 0 or r >= rows or c < 0 or c >= cols or grid[r][c] == '0' or visited[r][c]: return visited[r][c] = True dfs(r - 1, c) dfs(r + 1, c) dfs(r, c - 1) dfs(r, c + 1) island_count = 0 for r in range(rows): for c in range(cols): if grid[r][c] == '1' and not visited[r][c]: island_count += 1 dfs(r, c) return island_count"},{"question":"Write a function to generate a Fibonacci sequence of a given length using an iterative approach. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the previous two. For example, the first six numbers of the Fibonacci sequence are 0, 1, 1, 2, 3, 5. How would you implement this in Python?","solution":"def fibonacci_sequence(length): Generates a Fibonacci sequence of a given length using an iterative approach. Parameters: length (int): The length of the Fibonacci sequence to generate. Returns: list: A list containing the Fibonacci sequence of the specified length. if length <= 0: return [] if length == 1: return [0] if length == 2: return [0, 1] fib_sequence = [0, 1] for _ in range(2, length): next_value = fib_sequence[-1] + fib_sequence[-2] fib_sequence.append(next_value) return fib_sequence"},{"question":"Write a function to convert a given decimal number to its binary representation. However, the output should be as a string where '0's and '1's are reversed. That is, if the binary representation of a number is '1010', the output should be '0101'.","solution":"def decimal_to_reversed_binary(n): Converts a given decimal number to its binary representation and returns the reversed binary string. # Make sure n is a non-negative integer if n < 0: raise ValueError(\\"The input must be a non-negative integer.\\") binary_representation = bin(n)[2:] # Get binary representation without '0b' prefix reversed_binary_representation = ''.join('1' if b == '0' else '0' for b in binary_representation) return reversed_binary_representation"},{"question":"Write a function to sort the elements of a list in ascending order using Python. The function should take a list of integers as input and return a new list with the elements sorted in ascending order.","solution":"def sort_list(lst): Sorts the elements of the list 'lst' in ascending order. Parameters: lst (list): A list of integers Returns: list: A new list with the elements sorted in ascending order return sorted(lst)"},{"question":"Write a function to count the number of binary strings of length n where the number of 1's is equal to the number of 0's.","solution":"from math import comb def count_balanced_binary_strings(n): Returns the number of binary strings of length n where the number of 1's is equal to the number of 0's. :param n: Length of the binary string :return: Number of balanced binary strings # If n is not even, it's not possible to have an equal number of 1's and 0's if n % 2 != 0: return 0 # The number of balanced binary strings of length n is given by the binomial coefficient C(n, n//2) return comb(n, n // 2)"},{"question":"Write a function to generate a Fibonacci sequence up to a certain number of terms. Ensure that your function avoids redundant calculations using memoization.","solution":"def fibonacci_sequence(n): Generates a list containing the Fibonacci sequence up to n terms using memoization. memo = {0: 0, 1: 1} def fib_memo(m): if m not in memo: memo[m] = fib_memo(m - 1) + fib_memo(m - 2) return memo[m] return [fib_memo(i) for i in range(n)]"},{"question":"Write a function to check if all the leaves in a binary tree are at the same level. Explanation of the task can be found here: https://www.geeksforgeeks.org/check-all-leaf-nodes-are-at-same-level/","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def check_leaves_at_same_level(root): Returns True if all leaves in the binary tree are at the same level, False otherwise. def check_leaves(root, level, leaf_levels): if root is None: return True # If this is a leaf node if not root.left and not root.right: # If it's the first leaf, note its level if len(leaf_levels) == 0: leaf_levels.append(level) # If it's not the first leaf, compare its level with first leaf's level return level == leaf_levels[0] # Check the left and right subtree return check_leaves(root.left, level + 1, leaf_levels) and check_leaves(root.right, level + 1, leaf_levels) # List to store the level of first encountered leaf leaf_levels = [] return check_leaves(root, 0, leaf_levels)"},{"question":"Write a function to find the maximum sum of a contiguous subarray of size \`k\` in an array of integers.","solution":"def max_sum_subarray(arr, k): Returns the maximum sum of a contiguous subarray of size k. :param arr: List[int] - the array of integers :param k: int - the size of the subarray :return: int - the maximum sum of the contiguous subarray of size k if len(arr) < k or k <= 0: return 0 # Calculate the sum of the first 'k' elements max_sum = current_sum = sum(arr[:k]) # Slide the window over the array for i in range(k, len(arr)): current_sum = current_sum - arr[i - k] + arr[i] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function to print the elements of a list in reverse order without using any built-in functions or methods like \`reverse()\` or slicing. You should also handle the case where the list might be empty.","solution":"def print_reverse_list(lst): Prints the elements of a list in reverse order. if not lst: # handle empty list case return for i in range(len(lst)-1, -1, -1): print(lst[i])"},{"question":"Write a function to find the common elements in two lists.","solution":"def find_common_elements(list1, list2): Returns a list of common elements in two given lists. The result list contains unique elements. set1 = set(list1) set2 = set(list2) common_elements = set1 & set2 return list(common_elements)"},{"question":"Write a function to reverse a string in Python. Please provide a concise implementation that does not involve slicing or explicit looping constructs like \`for\` or \`while\`.","solution":"def reverse_string(s): Reverses the input string s. return ''.join(reversed(s))"},{"question":"Write a function to find the highest repeated number in a list. If there is no repeated number, return -1.","solution":"from collections import Counter def highest_repeated_number(nums): Returns the highest repeated number in the list. If no number is repeated, returns -1. if not nums: return -1 counter = Counter(nums) repeated = {num: count for num, count in counter.items() if count > 1} if not repeated: return -1 return max(repeated.keys())"},{"question":"Write a function to convert a string to a sentence that describes the number of occurrences of each unique character in the string.","solution":"def describe_string(s): Converts a string to a sentence describing the number of occurrences of each unique character. from collections import Counter count = Counter(s) parts = [f\\"{v} occurrences of '{k}'\\" if v > 1 else f\\"{v} occurrence of '{k}'\\" for k, v in count.items()] return \\", \\".join(parts)"},{"question":"Write a function to reverse a string in Python. How about reversing it in place, using slicing, and using recursion?","solution":"def reverse_in_place(s): Reverses a string in place using a list for mutable operations. lst = list(s) left, right = 0, len(lst) - 1 while left < right: lst[left], lst[right] = lst[right], lst[left] left += 1 right -= 1 return ''.join(lst) def reverse_slicing(s): Reverses a string using slicing. return s[::-1] def reverse_recursion(s): Reverses a string using recursion. if len(s) <= 1: return s return s[-1] + reverse_recursion(s[:-1])"},{"question":"Write a function to create a new Radix tree and insert a word into it. A Radix tree is a space-optimized trie data structure where nodes with single children are merged with their parent node. The Radix tree has properties of both tries and binary search trees.","solution":"class RadixTreeNode: def __init__(self, key=\\"\\"): self.key = key self.children = {} self.is_end_of_word = False class RadixTree: def __init__(self): self.root = RadixTreeNode() def insert(self, word): node = self.root while word: for child in node.children: prefix_length = self._longest_common_prefix(word, child) if prefix_length > 0: if prefix_length < len(child): self._split_node(node, child, prefix_length) word = word[prefix_length:] node = node.children[child[:prefix_length]] break else: node.children[word] = RadixTreeNode(word) node = node.children[word] word = \\"\\" node.is_end_of_word = True def _longest_common_prefix(self, str1, str2): length = min(len(str1), len(str2)) for i in range(length): if str1[i] != str2[i]: return i return length def _split_node(self, parent, child_key, split_length): child_node = parent.children.pop(child_key) split_key = child_key[:split_length] remaining_key = child_key[split_length:] split_node = RadixTreeNode(split_key) split_node.children[remaining_key] = child_node parent.children[split_key] = split_node"},{"question":"Write a function to calculate the number of ways to partition a given integer into sum of positive integers not greater than \`m\`. The function should be optimized for large numbers and consider memoization to avoid redundant calculations.","solution":"def partition_count(n, m, memo=None): Returns the number of ways to partition n into sum of positive integers not greater than m. Parameters: n (int): The integer to partition. m (int): The maximum integer in the partition. memo (dict): Memoization dictionary to avoid redundant calculations. Returns: int: The number of ways to partition n. if n == 0: return 1 if n < 0 or m == 0: return 0 if memo is None: memo = {} if (n, m) in memo: return memo[(n, m)] # Count the partitions by including m and by excluding m result = partition_count(n - m, m, memo) + partition_count(n, m - 1, memo) memo[(n, m)] = result return result"},{"question":"Write a function to calculate the minimum path sum in a two-dimensional array.","solution":"def min_path_sum(grid): Calculate the minimum path sum for a 2D grid. :param grid: List[List[int]] - a 2D array of integers :return: int - the minimum path sum from top-left to bottom-right if not grid or not grid[0]: return 0 rows, cols = len(grid), len(grid[0]) # Initialize the dp table dp = [[0] * cols for _ in range(rows)] # Starting point dp[0][0] = grid[0][0] # Fill the first row for c in range(1, cols): dp[0][c] = dp[0][c-1] + grid[0][c] # Fill the first column for r in range(1, rows): dp[r][0] = dp[r-1][0] + grid[r][0] # Fill the rest of the dp table for r in range(1, rows): for c in range(1, cols): dp[r][c] = min(dp[r-1][c], dp[r][c-1]) + grid[r][c] return dp[-1][-1]"},{"question":"Write a function to reverse a string using the two-pointer technique in Python. The function should handle both uppercase and lowercase letters.","solution":"def reverse_string(s): Reverse a given string using the two-pointer technique. Parameters: s (str): The string to be reversed. Returns: str: The reversed string. # Convert the string to a list to manipulate it since strings are immutable in Python s_list = list(s) # Initialize two pointers left, right = 0, len(s_list) - 1 # Swap characters until the pointers meet in the middle while left < right: s_list[left], s_list[right] = s_list[right], s_list[left] left += 1 right -= 1 # Convert the list back to a string return ''.join(s_list)"},{"question":"Write a function to calculate the total cost of an order given the quantity of items ordered and the price per item. Additionally, the function should check if a discount applies based on the quantity ordered. For every 10 items ordered, a discount of 5% is applied. The function should return the total cost after applying the discount (if applicable).","solution":"def calculate_total_cost(quantity, price_per_item): Calculates the total cost of an order given the quantity of items and the price per item. A 5% discount is applied for every 10 items ordered. Args: - quantity (int): The number of items ordered. - price_per_item (float): The price of a single item. Returns: - float: The total cost after applying the discount (if applicable). if quantity <= 0 or price_per_item <= 0: return 0.0 discount_rate = (quantity // 10) * 0.05 discount_multiplier = 1 - discount_rate total_cost = quantity * price_per_item * discount_multiplier return total_cost"},{"question":"Write a function to take two integer inputs and return their sum along with their sum modulo 2 (even or odd).","solution":"def sum_and_parity(a, b): Returns the sum of a and b, and the parity of their sum (even or odd). Parity is represented as a string 'even' or 'odd'. total = a + b parity = 'even' if total % 2 == 0 else 'odd' return total, parity"},{"question":"Write a function to find the nth Fibonacci number using recursion in Python. The function should have a parameter \`n\` which represents the position of the Fibonacci number in the sequence. The function should cache the results of previous calculations to optimize the recursive function for large \`n\` values.","solution":"def fibonacci(n, cache=None): Returns the nth Fibonacci number using recursion and caching. if cache is None: cache = {} if n in cache: return cache[n] if n <= 0: return 0 elif n == 1: return 1 else: result = fibonacci(n-1, cache) + fibonacci(n-2, cache) cache[n] = result return result"},{"question":"Write a function to flatten a nested dictionary, where the keys of sub-dictionaries are concatenated with the parent key using \\"_\\". The function should take a dictionary as input and return the flattened dictionary. For example, given the dictionary \`{\\"a\\": 1, \\"b\\": {\\"c\\": 2, \\"d\\": {\\"e\\": 3}}}\`, the function should return \`{\\"a\\": 1, \\"b_c\\": 2, \\"b_d_e\\": 3}\`.","solution":"def flatten_dict(d, parent_key='', sep='_'): Flattens a nested dictionary where the keys of sub-dictionaries are concatenated with the parent key using a specified separator. items = [] for k, v in d.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): items.extend(flatten_dict(v, new_key, sep=sep).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"Write a function to simulate a basic Blackjack game. How should the function be designed, and what rules should it include?","solution":"import random def card_value(card): if card in ['J', 'Q', 'K']: return 10 elif card == 'A': return 11 else: return int(card) def adjust_for_ace(hand): while sum(hand) > 21 and 11 in hand: hand[hand.index(11)] = 1 return hand def blackjack(): deck = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'] * 4 random.shuffle(deck) player_hand = [deck.pop(), deck.pop()] dealer_hand = [deck.pop(), deck.pop()] player_hand = [card_value(card) for card in player_hand] dealer_hand = [card_value(card) for card in dealer_hand] player_hand = adjust_for_ace(player_hand) dealer_hand = adjust_for_ace(dealer_hand) while sum(player_hand) < 21: player_hand.append(card_value(deck.pop())) player_hand = adjust_for_ace(player_hand) while sum(dealer_hand) < 17: dealer_hand.append(card_value(deck.pop())) dealer_hand = adjust_for_ace(dealer_hand) player_total = sum(player_hand) dealer_total = sum(dealer_hand) if player_total > 21: return \\"Dealer wins\\" elif dealer_total > 21 or player_total > dealer_total: return \\"Player wins\\" elif dealer_total > player_total: return \\"Dealer wins\\" else: return \\"Tie\\""},{"question":"Write a function to reverse a string without using the built-in reverse() method or slicing. Also, ensure that the function handles Unicode characters correctly.","solution":"def reverse_string(s): Reverses a string without using the built-in reverse() method or slicing. Handles Unicode characters correctly. reversed_str = \\"\\" for char in s: reversed_str = char + reversed_str return reversed_str"},{"question":"Write a function to remove duplicates from an array in Python.","solution":"def remove_duplicates(arr): Returns a list consisting of the unique elements from the input array. The order of the elements in the resulting list will be the same as their first occurrence in the input array. seen = set() result = [] for item in arr: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Write a function to calculate the nth Fibonacci number using an iterative approach. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. Your function should efficiently handle large values of n.","solution":"def fibonacci(n): Calculates the nth Fibonacci number using iterative approach. Parameters: n (int): The position in Fibonacci sequence to calculate. Returns: int: The nth Fibonacci number. if n <= 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a function to compute the Fibonacci sequence up to a given number. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. For example, if the input is 5, the function should return the sequence [0, 1, 1, 2, 3, 5]. If the input is 8, the function should return the sequence [0, 1, 1, 2, 3, 5, 8, 13].","solution":"def fibonacci(n): Returns the Fibonacci sequence up to the given number n. if n < 0: return \\"Invalid input\\" sequence = [] a, b = 0, 1 while a <= n: sequence.append(a) a, b = b, a + b return sequence"},{"question":"Write a function to calculate the sum of all numbers from 1 to n using recursion. Also, ensure that your function handles negative inputs by returning \\"Invalid Input\\".","solution":"def sum_to_n(n): Returns the sum of all numbers from 1 to n using recursion. Handles negative inputs by returning \\"Invalid Input\\". if n < 1: return \\"Invalid Input\\" elif n == 1: return 1 else: return n + sum_to_n(n - 1)"},{"question":"Write a function to return true if two strings are the same when all non-alphanumeric characters are removed. The function should ignore case sensitivity.","solution":"import re def are_equal_ignore_non_alphanumeric(str1, str2): Returns True if two strings are equal when all non-alphanumeric characters are removed and case is ignored. Parameters: str1 (str): The first string. str2 (str): The second string. Returns: bool: True if the processed strings are equal, False otherwise. # Remove non-alphanumeric characters and convert to lower case processed_str1 = re.sub(r'[^a-zA-Z0-9]', '', str1).lower() processed_str2 = re.sub(r'[^a-zA-Z0-9]', '', str2).lower() # Compare the processed strings return processed_str1 == processed_str2"},{"question":"Write a function to compute the number of paths in a binary tree where the sum of the numbers along the paths equals a given target value. The path does not need to start or end at the root, and it can only move in one direction (i.e., from parent to child).","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def path_sum(root, target_sum): Returns the number of paths in the binary tree where the sum of the numbers along the paths equals the target value. def dfs(node, current_sum): if not node: return 0 current_sum += node.val prefix_count = path_count.get(current_sum - target_sum, 0) # Update the path_count with the current_sum path_count[current_sum] = path_count.get(current_sum, 0) + 1 # Traverse the left and right subtree result = prefix_count + dfs(node.left, current_sum) + dfs(node.right, current_sum) # Remove the current_sum from the path_count when moving to another branch path_count[current_sum] -= 1 return result path_count = {0: 1} return dfs(root, 0)"},{"question":"Write a function to find the second largest element in an array. If there is no second largest element, return \`None\`.","solution":"def second_largest_element(arr): Returns the second largest element in an array. If there is no second largest element, return None. if len(arr) < 2: return None first, second = float('-inf'), float('-inf') for num in arr: if num > first: second = first first = num elif first > num > second: second = num return second if second != float('-inf') else None"},{"question":"Write a function to find the maximum product of two integers in a given array. The array will not be empty and will contain at least two integers. The function should return the maximum product of any two distinct elements in the array.","solution":"def max_product_of_two(arr): Returns the maximum product of two distinct integers in the given array. if len(arr) < 2: raise ValueError(\\"The array must contain at least two integers.\\") max1 = float('-inf') max2 = float('-inf') min1 = float('inf') min2 = float('inf') for num in arr: if num >= max1: max2 = max1 max1 = num elif num > max2: max2 = num if num <= min1: min2 = min1 min1 = num elif num < min2: min2 = num return max(max1 * max2, min1 * min2)"},{"question":"Write a function to validate if a given string is a palindrome, considering only alphanumeric characters (ignoring cases) and ignoring spaces, punctuation, and other non-alphanumeric characters.","solution":"def is_palindrome(s): Validate if a given string is a palindrome, considering only alphanumeric characters (ignoring cases). Args: s (str): The input string. Returns: bool: True if the string is a palindrome, False otherwise. # Filter out non-alphanumeric characters and convert to lowercase filtered_chars = [char.lower() for char in s if char.isalnum()] # Check if the filtered string is the same forwards and backwards return filtered_chars == filtered_chars[::-1]"},{"question":"Write a function to find the nth smallest number in a list of integers. The function should handle both positive and negative numbers. The input list can vary in size, and it may contain duplicate elements. Additionally, explain the time complexity of your solution.","solution":"def nth_smallest_number(lst, n): Returns the nth smallest number in the list lst. if not (1 <= n <= len(lst)): raise ValueError(\\"n must be between 1 and the length of the list\\") return sorted(lst)[n - 1] # Time Complexity: O(N log N) where N is the length of the list because it uses sorting."},{"question":"Write a function to check if a given binary tree is a perfect binary tree. A binary tree is considered perfect if all the leaf nodes are at the same level and every parent node has exactly two children.","solution":"class Node: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def is_perfect_binary_tree(root): Check if a given binary tree is a perfect binary tree. def find_depth(node): depth = 0 current = node while current: depth += 1 current = current.left return depth def is_perfect(node, depth, level=0): if node is None: return True if node.left is None and node.right is None: return depth == level + 1 if node.left is None or node.right is None: return False return (is_perfect(node.left, depth, level + 1) and is_perfect(node.right, depth, level + 1)) d = find_depth(root) return is_perfect(root, d)"},{"question":"Write a function to calculate the nth Fibonacci number in Python. The function should be optimized using memoization.","solution":"def fibonacci(n, memo=None): Returns the nth Fibonacci number using memoization. if memo is None: memo = {} if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo) return memo[n]"},{"question":"Write a function to generate the nth Fibonacci number using an iterative approach in Python. The function should be named \`fibonacci_iterative\` and should take a single argument, \`n\`, which represents the position in the Fibonacci sequence.","solution":"def fibonacci_iterative(n): Returns the nth Fibonacci number using an iterative approach. Parameters: n (int): The position in the Fibonacci sequence to generate. Returns: int: The nth Fibonacci number. if n <= 0: raise ValueError(\\"n should be a positive integer.\\") elif n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 for _ in range(2, n): a, b = b, a + b return b"},{"question":"Write a function to check if a binary string is a binary palindrome. A binary palindrome is a string that reads the same backward as forward and consists only of the characters '0' and '1'.","solution":"def is_binary_palindrome(binary_string): Checks if a given binary string is a palindrome. Args: binary_string (str): A string consisting of characters '0' and '1'. Returns: bool: True if the string is a binary palindrome, False otherwise. return binary_string == binary_string[::-1]"},{"question":"Write a function to convert a Roman numeral to an integer. The function should handle cases from 1 to 3999.","solution":"def roman_to_int(s: str) -> int: Convert a Roman numeral to an integer. Handles cases from 1 to 3999. # Define roman numeral to integer mapping roman_to_int_map = { 'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000 } # Initialize the integer result number = 0 length = len(s) for i in range(length): # Get the value of current roman numeral character current_val = roman_to_int_map[s[i]] # Determine if we add or subtract the current value if i < length - 1 and current_val < roman_to_int_map[s[i + 1]]: number -= current_val else: number += current_val return number"},{"question":"Write a function to print the elements of a list in reverse order.","solution":"def print_reverse(lst): Prints the elements of the list in reverse order. Parameters: lst (list): A list of elements to be printed in reverse order. for element in reversed(lst): print(element)"},{"question":"Write a function to print a given list of numbers in reverse order.","solution":"def reverse_list(numbers): Returns the list of numbers in reverse order. return numbers[::-1]"},{"question":"Write a function to traverse a binary tree and print all the nodes in pre-order, in-order, and post-order.","solution":"class Node: def __init__(self, key): self.left = None self.right = None self.val = key def preorder_traversal(root): Pre-order traversal of a binary tree result = [] def traverse(node): if node: result.append(node.val) traverse(node.left) traverse(node.right) traverse(root) return result def inorder_traversal(root): In-order traversal of a binary tree result = [] def traverse(node): if node: traverse(node.left) result.append(node.val) traverse(node.right) traverse(root) return result def postorder_traversal(root): Post-order traversal of a binary tree result = [] def traverse(node): if node: traverse(node.left) traverse(node.right) result.append(node.val) traverse(root) return result"},{"question":"Write a function to enumerate the first N Fibonacci numbers with a time complexity of O(N).","solution":"def fibonacci(n): Returns the first N Fibonacci numbers. if n <= 0: return [] fib_numbers = [0, 1] for i in range(2, n): fib_numbers.append(fib_numbers[-1] + fib_numbers[-2]) return fib_numbers[:n]"},{"question":"Write a function to reverse a string without using the built-in \`str[::-1]\` slicing method. Instead, use recursion to reverse the string. The function should handle any string input and return the reversed string.","solution":"def reverse_string_recursively(s): Returns the reversed string using recursion. if len(s) == 0: return s else: return s[-1] + reverse_string_recursively(s[:-1])"},{"question":"Write a function to remove duplicates from a sorted array in place and return the new length of the array. Do not allocate extra space for another array; you must do this by modifying the input array in place with O(1) extra memory.","solution":"def remove_duplicates(nums): Removes duplicates from a sorted array in place and returns the new length of the array. if not nums: return 0 write_index = 1 # Start writing from the second element for i in range(1, len(nums)): if nums[i] != nums[i - 1]: nums[write_index] = nums[i] write_index += 1 return write_index"},{"question":"Write a function to convert a decimal number to a binary string without using built-in conversion functions.","solution":"def decimal_to_binary(n): Converts a decimal number to a binary string without using built-in conversion functions. if n == 0: return \\"0\\" elif n < 0: raise ValueError(\\"Negative numbers are not supported.\\") binary_str = \\"\\" while n > 0: remainder = n % 2 binary_str = str(remainder) + binary_str n = n // 2 return binary_str"},{"question":"Write a function to create a bloom filter in Python.","solution":"import hashlib class BloomFilter: def __init__(self, size, hash_count): self.size = size self.hash_count = hash_count self.bit_array = [0] * size def add(self, item): for i in range(self.hash_count): digest = self._hash(item, i) self.bit_array[digest % self.size] = 1 def __contains__(self, item): for i in range(self.hash_count): digest = self._hash(item, i) if self.bit_array[digest % self.size] == 0: return False return True def _hash(self, item, seed): h = hashlib.md5(item.encode('utf-8')) h.update(str(seed).encode('utf-8')) return int(h.hexdigest(), 16)"},{"question":"Write a function to calculate the factorial of a number in Python. The function should be able to handle numbers from 0 to 10. If the input number is less than 0 or greater than 10, the function should return an error message.","solution":"def factorial(n): Returns the factorial of a number n. Handles numbers from 0 to 10. If the input number is less than 0 or greater than 10, returns an error message. if not isinstance(n, int): return \\"Error: Input must be an integer.\\" if n < 0 or n > 10: return \\"Error: Input must be between 0 and 10 inclusive.\\" if n == 0: return 1 # 0! is 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a function to implement QuickSort on an array of integers efficiently.","solution":"def quicksort(arr): Sorts an array of integers using the quicksort algorithm. if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"Write a function to check if a given string \`s\` is a palindrome. A palindrome is a string that reads the same backward as forward (e.g., \\"racecar\\", \\"madam\\"). You are not allowed to use any built-in functions or slicing to reverse the string.","solution":"def is_palindrome(s): Checks if the given string s is a palindrome. n = len(s) for i in range(n // 2): if s[i] != s[n - i - 1]: return False return True"},{"question":"Write a function to find the number of unique integers in a list. You should avoid using any built-in functions or libraries for this task.","solution":"def count_unique_integers(nums): Returns the count of unique integers in the list nums. unique_nums = [] for num in nums: if num not in unique_nums: unique_nums.append(num) return len(unique_nums)"},{"question":"Write a function to find the missing number in an array containing distinct numbers in the range from 1 to n+1, where n is the size of the array.","solution":"def find_missing_number(arr): Finds the missing number in an array containing distinct numbers in the range from 1 to n+1, where n is the size of the array. :param arr: List of distinct integers in the range 1 to n+1 :return: The missing number in the range n = len(arr) total_sum = (n + 1) * (n + 2) // 2 # Sum of first n+1 natural numbers actual_sum = sum(arr) # Sum of elements in the array return total_sum - actual_sum"},{"question":"Write a function to find the minimum element in a sorted and rotated array without duplicates. The function should take an array as input and return the minimum element. The array is sorted in ascending order before it was rotated.","solution":"def find_min_in_rotated_sorted_array(arr): Finds the minimum element in a sorted and rotated array without duplicates. Parameters: arr (list): A list of integers representing the rotated sorted array. Returns: int: The minimum element in the array. if not arr: raise ValueError(\\"Array should not be empty\\") left, right = 0, len(arr) - 1 while left < right: mid = (left + right) // 2 if arr[mid] > arr[right]: left = mid + 1 else: right = mid return arr[left]"},{"question":"Write a function to find the maximum element in an array using a divide and conquer approach. The function should be implemented in Python and should be efficient in terms of time complexity.","solution":"def find_max(arr): Returns the maximum element in an array using a divide and conquer approach. return find_max_recursive(arr, 0, len(arr) - 1) def find_max_recursive(arr, low, high): # Base case: Only one element if low == high: return arr[low] # Find the middle point mid = (low + high) // 2 # Recursively find the maximum element in both halves left_max = find_max_recursive(arr, low, mid) right_max = find_max_recursive(arr, mid + 1, high) # Return the maximum of both halves return max(left_max, right_max)"},{"question":"Write a function to extract all the numbers from a given string that are within parentheses, separate them into pairs based on the parentheses nesting level, and return the pairs as a list. Each pair should be a tuple containing two strings: the first string is the inner number, and the second string is the outer number. The function should ignore numbers that are not enclosed within parentheses or that are not within a pair of parentheses.","solution":"import re def extract_pairs(string): Extracts and returns pairs of numbers from the given string based on their nesting within parentheses. Each pair is a tuple containing two strings: the first string is the inner number, and the second string is the outer number. Parameters: string (str): The input string containing numbers and parentheses. Returns: list: A list of tuples containing pairs of numbers. pairs = [] # Using regular expressions to find all matches of nested parentheses with numbers matches = re.findall(r'((d+))((d+))', string) for match in matches: pairs.append((match[0], match[1])) return pairs"},{"question":"Write a function to calculate the total number of possible outcomes in a group stage of a football tournament where each match results in a win for one of the two teams. Each team plays against every other team in the group exactly once. How would you approach this problem with a mathematical formula?","solution":"def total_possible_outcomes(n): Calculates the total number of possible outcomes in a group stage of a football tournament with n teams, where each match results in a win for one of the two teams. :param n: int - the number of teams :return: int - the total number of possible outcomes number_of_matches = (n * (n - 1)) // 2 total_outcomes = 2 ** number_of_matches return total_outcomes"},{"question":"Write a function to calculate the factorials of numbers from 0 to n in an efficient way. Factorials are defined by n! = n * (n - 1) * (n - 2) * ... * 1, with 0! = 1. The function should return a list of these factorials. Additionally, ensure that each factorial is computed only once and stored for potential future use, optimizing for repeated queries.","solution":"def factorial_sequence(n): Returns a list of factorials from 0 to n. The function computes each factorial only once and stores it. if n < 0: raise ValueError(\\"Input should be a non-negative integer\\") # Initialize the result list with the base case factorials = [1] * (n + 1) for i in range(1, n + 1): factorials[i] = factorials[i-1] * i return factorials"},{"question":"Write a function to calculate the area of a rectangle. The function should accept the length and width of the rectangle as parameters and return the area. The length and width should be validated to ensure they are positive numbers. If either the length or width is not a positive number, the function should raise a ValueError with an appropriate error message.","solution":"def calculate_rectangle_area(length, width): Calculates the area of a rectangle given its length and width. Both length and width must be positive numbers. :param length: positive number representing the length of the rectangle :param width: positive number representing the width of the rectangle :return: area of the rectangle :raises ValueError: if either length or width is not a positive number if length <= 0: raise ValueError(\\"Length must be a positive number.\\") if width <= 0: raise ValueError(\\"Width must be a positive number.\\") return length * width"},{"question":"Write a function to validate a hexadecimal color code. A hexadecimal color code is a string that starts with a \\"#\\" symbol followed by either 3 or 6 hexadecimal characters (0-9, A-F, a-f).","solution":"import re def is_valid_hex_color(code): Validates whether the given string is a valid hexadecimal color code. A hexadecimal color code must start with a \\"#\\" symbol followed by either 3 or 6 characters which can be digits (0-9) or letters (A-F, a-f). Parameters: code (str): The color code to validate. Returns: bool: True if it is a valid hexadecimal color code, False otherwise. if code is None: return False pattern = re.compile(r'^#([0-9A-Fa-f]{3}|[0-9A-Fa-f]{6})') return bool(pattern.match(code))"},{"question":"Write a function to calculate the sum of all even numbers in a given list. However, if the list contains a number divisible by 5, stop the summation process and return the current sum. If no such number is in the list, return the sum of all even numbers.","solution":"def sum_even_numbers_with_stop(nums): Returns the sum of all even numbers in the list \`nums\`. If a number divisible by 5 is encountered, the summation stops and the current sum is returned. current_sum = 0 for num in nums: if num % 5 == 0: break if num % 2 == 0: current_sum += num return current_sum"},{"question":"Write a function to clean text data that includes removing spaces, punctuation, and numbers, and converting all characters to lowercase. The function should also handle common contractions (like \\"don't\\", \\"isn't\\", \\"can't\\") to expand them as \\"do not\\", \\"is not\\", \\"can not\\".","solution":"import re def clean_text(data): Cleans the input text data by: 1. Expanding common contractions 2. Removing punctuation 3. Removing numbers 4. Converting all characters to lowercase 5. Removing extraneous spaces # Dictionary of common contractions and their expansions contractions = { \\"don't\\": \\"do not\\", \\"isn't\\": \\"is not\\", \\"can't\\": \\"can not\\", \\"won't\\": \\"will not\\", \\"i'm\\": \\"i am\\", \\"you're\\": \\"you are\\", \\"we're\\": \\"we are\\", \\"they're\\": \\"they are\\", \\"it's\\": \\"it is\\", \\"that's\\": \\"that is\\", \\"there's\\": \\"there is\\", \\"can't\\": \\"can not\\", \\"couldn't\\": \\"could not\\", \\"wouldn't\\": \\"would not\\", \\"shouldn't\\": \\"should not\\", \\"haven't\\": \\"have not\\", \\"hasn't\\": \\"has not\\", # Add more contractions and expansions as needed } # Step 1: Expand contractions for contraction, expansion in contractions.items(): data = re.sub(contraction, expansion, data, flags=re.IGNORECASE) # Step 2: Remove punctuation and numbers data = re.sub(r'[^ws]', '', data) data = re.sub(r'd+', '', data) # Step 3: Convert to lowercase data = data.lower() # Step 4: Remove extraneous spaces data = re.sub(r's+', ' ', data).strip() return data"},{"question":"Write a function to multiply two matrices. Matrix multiplication is a process where we multiply rows of the first matrix by columns of the second matrix. The function should handle cases where the number of columns in the first matrix does not match the number of rows in the second matrix, throwing an appropriate error. Return the resulting matrix if the multiplication is successful.","solution":"def matrix_multiply(mat1, mat2): Multiplies two matrices mat1 and mat2. The number of columns in mat1 must equal the number of rows in mat2. Parameters: - mat1 (list of lists of int/float): The first matrix. - mat2 (list of lists of int/float): The second matrix. Returns: - result (list of lists of int/float): The resulting matrix after multiplication. # Validate if mat1 and mat2 can be multiplied if len(mat1[0]) != len(mat2): raise ValueError(\\"The number of columns in the first matrix must equal the number of rows in the second matrix.\\") result = [[0 for _ in range(len(mat2[0]))] for _ in range(len(mat1))] # Perform matrix multiplication for i in range(len(mat1)): for j in range(len(mat2[0])): for k in range(len(mat2)): result[i][j] += mat1[i][k] * mat2[k][j] return result"},{"question":"Write a function to find the nth element from the end of a linked list using Python.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def nth_from_end(head, n): Returns the nth element from the end of a linked list. :param head: ListNode, the head of the linked list :param n: int, the 1-based position from the end of the list :return: int, the value of the nth node from the end first = head second = head # Move first pointer n steps ahead for _ in range(n): if first is None: return None # Out of range first = first.next # Now move both first and second pointers until first reaches the end while first: first = first.next second = second.next return second.value if second else None"},{"question":"Write a function to solve the N-Queens puzzle.","solution":"def solve_n_queens(n): def is_not_under_attack(row, col): return not (cols[col] or hills[row - col] or dales[row + col]) def place_queen(row, col): queens.add((row, col)) cols[col] = 1 hills[row - col] = 1 # \\"hill\\" diagonals dales[row + col] = 1 # \\"dale\\" diagonals def remove_queen(row, col): queens.remove((row, col)) cols[col] = 0 hills[row - col] = 0 dales[row + col] = 0 def add_solution(): solution = [] for _, col in sorted(queens): solution.append('.' * col + 'Q' + '.' * (n - col - 1)) output.append(solution) def backtrack(row=0): for col in range(n): if is_not_under_attack(row, col): place_queen(row, col) if row + 1 == n: add_solution() else: backtrack(row + 1) remove_queen(row, col) cols = [0] * n hills = [0] * (2 * n - 1) dales = [0] * (2 * n - 1) queens = set() output = [] backtrack() return output"},{"question":"Write a function to perform a binary search on a sorted array to find if a given target value exists in the array.","solution":"def binary_search(arr, target): Performs a binary search on a sorted array to find if a given target value exists in the array. Parameters: arr (list): A sorted list of elements. target (int, float): The target value to search for in the array. Returns: bool: True if the target exists in the array, False otherwise. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return True elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return False"},{"question":"Write a function to calculate the area of a circle given its radius. The function should handle the case where the radius is not a positive number by raising an exception.","solution":"import math def circle_area(radius): Calculates the area of a circle given its radius. Raises an exception if the radius is not positive. Args: radius (float): The radius of the circle. Returns: float: The area of the circle. Raises: ValueError: If the radius is not a positive number. if radius <= 0: raise ValueError(\\"Radius must be a positive number\\") return math.pi * radius ** 2"},{"question":"Write a function to check if a given string is a valid permutation of a palindrome. A string is a palindrome if it reads the same backward as forward. For example, \\"civic\\", \\"radar\\", and \\"level\\" are palindromes. A permutation of a palindrome is a string that can be rearranged to form a palindrome. For example, \\"ivicc\\", \\"adarar\\", and \\"level\\" are valid permutations of \\"civic\\", \\"radar\\", and \\"level\\", respectively.","solution":"def is_permutation_of_palindrome(s): Check if the given string is a valid permutation of a palindrome. Args: s: A string to check. Returns: bool: True if the string is a valid permutation of a palindrome, False otherwise. # Cleaning the string: removing spaces and converting to lower case s = s.replace(' ', '').lower() # Using a dictionary to count the occurrences of each character char_count = {} for char in s: char_count[char] = char_count.get(char, 0) + 1 # A string can form a palindrome if at most one character has an odd count odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1"},{"question":"Write a function to find the maximum number of correct pairs between two vectors of integers. A correct pair is defined as two numbers ( x ) and ( y ) from the two vectors where ( x = y cdot 2 ).","solution":"def count_correct_pairs(vec1, vec2): Returns the maximum number of correct pairs between two vectors of integers. A correct pair is defined as two numbers x and y from the two vectors where x = y * 2. vec1_counts = {} for x in vec1: if x in vec1_counts: vec1_counts[x] += 1 else: vec1_counts[x] = 1 count_pairs = 0 for y in vec2: double_y = y * 2 if double_y in vec1_counts and vec1_counts[double_y] > 0: count_pairs += 1 vec1_counts[double_y] -= 1 return count_pairs"},{"question":"Write a function to identify the most frequent character in a given string.","solution":"def most_frequent_character(s): Returns the most frequent character in a given string. If there are multiple characters with the same highest frequency, return any one of them. frequency = {} for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 most_frequent = max(frequency, key=frequency.get) return most_frequent"},{"question":"Write a function to calculate the value of the Nth Fibonacci number using memoization in Python. The function should be efficient and use a dictionary to store previously computed Fibonacci numbers to avoid recalculating them.","solution":"def fibonacci_memo(n, memo=None): Returns the Nth Fibonacci number using memoization. if memo is None: memo = {} if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci_memo(n - 1, memo) + fibonacci_memo(n - 2, memo) return memo[n]"},{"question":"Write a function to find the middle element of a singly linked list using a two-pointer approach (slow and fast pointer).","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def find_middle(head): Finds the middle element of a singly linked list using the slow and fast pointer approach. Parameters: head (ListNode): The head node of the singly linked list. Returns: ListNode: The middle node of the linked list. If the list is empty, returns None. if not head: return None slow = head fast = head while fast and fast.next: slow = slow.next fast = fast.next.next return slow"},{"question":"Write a function to count the number of non-empty substrings in a given string that can be formed using the characters of the original string exactly once.","solution":"def count_unique_char_substrings(s): Returns the count of non-empty substrings that can be formed using the characters of the original string exactly once. n = len(s) unique_substrings_count = 0 # We use a set to track the unique characters for i in range(n): unique_chars = set() for j in range(i, n): if s[j] in unique_chars: break unique_chars.add(s[j]) unique_substrings_count += 1 return unique_substrings_count"},{"question":"Write a function to print the first n prime numbers.","solution":"def first_n_primes(n): Returns a list of the first n prime numbers. if n < 1: return [] primes = [] candidate = 2 # The first candidate for a prime number while len(primes) < n: is_prime = True for prime in primes: if candidate % prime == 0: is_prime = False break if is_prime: primes.append(candidate) candidate += 1 return primes"},{"question":"Write a function to find the k-th smallest element in an array using Python. The function should be efficient and handle cases where the array contains duplicate elements.","solution":"import heapq def kth_smallest(arr, k): Returns the k-th smallest element in the array. if k < 1 or k > len(arr): raise ValueError(\\"k is out of the range of the array length\\") return heapq.nsmallest(k, arr)[-1]"},{"question":"Write a function to print the n-th Fibonacci number using an iterative approach.","solution":"def fibonacci(n): Returns the n-th Fibonacci number using an iterative approach. if n <= 0: return 0 elif n == 1: return 1 a, b = 0, 1 for i in range(2, n+1): a, b = b, a + b return b"},{"question":"Write a function to find the frequency of the most frequent element in an array of integers.","solution":"def most_frequent_element_frequency(arr): Returns the frequency of the most frequent element in the array. if not arr: return 0 element_frequency = {} for element in arr: if element in element_frequency: element_frequency[element] += 1 else: element_frequency[element] = 1 max_frequency = max(element_frequency.values()) return max_frequency"},{"question":"Write a function to determine the minimum number of steps required to convert a given string into a palindrome string by only allowing the substitution of a character at a time. A palindrome string reads the same backward as forward.","solution":"def min_steps_to_palindrome(s): Returns the minimum number of steps required to convert a string into a palindrome by substituting characters. n = len(s) steps = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: steps += 1 return steps"},{"question":"Write a function to find the second largest number in a list of integers. If the list contains less than two unique numbers, return None. For example, given the list [1, 2, 2, 3, 4], the function should return 3.","solution":"def second_largest(nums): Returns the second largest unique number in a list of integers. If the list contains less than two unique numbers, return None. unique_nums = list(set(nums)) # Remove duplicates if len(unique_nums) < 2: return None # Less than two unique numbers unique_nums.sort(reverse=True) # Sort the numbers in descending order return unique_nums[1] # Return the second largest number"},{"question":"Write a function to calculate the total sum of all elements in a two-dimensional array.","solution":"def sum_2d_array(arr): Returns the total sum of all elements in a two-dimensional array. Parameters: arr (list of list of int): A 2D array. Returns: int: The sum of all elements in the array. total_sum = 0 for row in arr: for element in row: total_sum += element return total_sum"},{"question":"Write a function to find the sum of all the even numbers in a given list of integers. The function should be implemented in Python and utilize the built-in \`sum()\` function along with a generator expression to filter out even numbers. The function should return the sum of all even numbers in the list.","solution":"def sum_of_even_numbers(numbers): Returns the sum of all even numbers in the given list. Parameters: numbers (list of int): The list of integers to be processed. Returns: int: The sum of all even numbers in the list. return sum(num for num in numbers if num % 2 == 0)"},{"question":"Write a function to remove duplicates from an array and return the new array.","solution":"def remove_duplicates(arr): Removes duplicate elements from an array and returns the new array. return list(dict.fromkeys(arr))"},{"question":"Write a function to find the maximum profit from at most two non-overlapping subarray transactions from a list of daily transaction prices. The function should return the maximum profit.","solution":"def maxProfit(prices): Returns the maximum profit from at most two non-overlapping subarray transactions. if not prices: return 0 n = len(prices) # Initialize the dp arrays profit1 = [0] * n profit2 = [0] * n # Calculate the maximum profit for the first transaction min_price = prices[0] for i in range(1, n): min_price = min(min_price, prices[i]) profit1[i] = max(profit1[i-1], prices[i] - min_price) # Calculate the maximum profit for the second transaction max_price = prices[n-1] for i in range(n-2, -1, -1): max_price = max(max_price, prices[i]) profit2[i] = max(profit2[i+1], max_price - prices[i]) # Calculate the maximum profit by summing up the two profits max_profit = 0 for i in range(n): max_profit = max(max_profit, profit1[i] + profit2[i]) return max_profit"},{"question":"Write a function to retrieve the maximum sum of a subarray of a given array that contains at least one element.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a subarray that contains at least one element. if not arr: # If the array is empty, return 0 return 0 current_sum = max_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function to find the number of nodes in a binary tree.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def count_nodes(root): Returns the number of nodes in a binary tree. if root is None: return 0 left_count = count_nodes(root.left) right_count = count_nodes(root.right) return 1 + left_count + right_count"},{"question":"Write a function to convert an integer to its string representation without using the built-in \`str()\` function.","solution":"def int_to_str(n): Converts an integer to its string representation without using str(). if n == 0: return '0' is_negative = n < 0 n = abs(n) string_rep = [] while n > 0: string_rep.append(chr(n % 10 + ord('0'))) n //= 10 if is_negative: string_rep.append('-') return ''.join(string_rep[::-1])"},{"question":"Write a function to reverse a string in Python. You should include a docstring that explains what the function does, and utilize the function with some test cases to verify its correctness.","solution":"def reverse_string(s): Reverses the given string s. Parameters: s (str): The string to be reversed. Returns: str: The reversed string. return s[::-1]"},{"question":"Write a function to check if a given string is a palindrome. A string is a palindrome if it reads the same backward as forward. For example, \\"racecar\\" and \\"level\\" are palindromes. Implement a function in Python.","solution":"def is_palindrome(s): Checks if the given string s is a palindrome. # Remove spaces and convert to lowercase for uniformity s = s.replace(\\" \\", \\"\\").lower() # Check if the string is equal to its reverse return s == s[::-1]"},{"question":"Write a function to convert all the characters in a string to lowercase. You can perform this conversion in-place without using any temporary storage.","solution":"def to_lowercase(s): Converts all characters of the string s to lowercase. s_list = list(s) for i in range(len(s_list)): if 'A' <= s_list[i] <= 'Z': s_list[i] = chr(ord(s_list[i]) + 32) return ''.join(s_list)"},{"question":"Write a function to find the first recurring character in a given string. If no character repeats, return an empty string.","solution":"def first_recurring_character(s): Find the first recurring character in a given string. If no character repeats, return an empty string. seen = set() for char in s: if char in seen: return char seen.add(char) return \\"\\""},{"question":"Write a function to calculate the sum of two numbers, a and b, and print the result.","solution":"def sum_and_print(a, b): Calculates the sum of a and b, and prints the result. result = a + b print(result) return result"},{"question":"Write a function to calculate the sum of elements in an array. However, the function should only consider elements that are divisible by a given divisor. If no such elements exist, the function should return -1.","solution":"def sum_of_divisibles(arr, divisor): Returns the sum of elements in the array that are divisible by the given divisor. If no such elements exist, return -1. Parameters: arr (list): List of integers divisor (int): The divisor to check divisibility against Returns: int: Sum of elements divisible by divisor or -1 if no such elements exist divisible_elements = [x for x in arr if x % divisor == 0] if not divisible_elements: return -1 return sum(divisible_elements)"},{"question":"Write a function to calculate the sum of elements in a three-dimensional array.","solution":"def sum_3d_array(array): Returns the sum of elements in a three-dimensional array. total = 0 for subarray2d in array: for subarray1d in subarray2d: for element in subarray1d: total += element return total"},{"question":"Write a function to find the minimum element in a sorted and rotated array. The array is sorted in ascending order before being rotated. Your solution should handle duplicates and be efficient.","solution":"def find_min_in_rotated_sorted_array(arr): Finds the minimum element in a sorted and rotated array. Handles duplicates efficiently. if not arr: return None low, high = 0, len(arr) - 1 while low < high: mid = (low + high) // 2 if arr[mid] > arr[high]: low = mid + 1 elif arr[mid] < arr[high]: high = mid else: # arr[mid] == arr[high] high -= 1 return arr[low]"},{"question":"Write a function to rearrange items in a list by moving items to render a sequence of uppercase letters followed by a sequence of lowercase letters.","solution":"def rearrange_list(items): Rearranges items in the list to have uppercase letters followed by lowercase letters. Args: items (list of str): List of strings to be rearranged. Returns: list of str: List rearranged with uppercase letters followed by lowercase letters. uppercase_letters = [item for item in items if item.isupper()] lowercase_letters = [item for item in items if item.islower()] return uppercase_letters + lowercase_letters"},{"question":"Write a function to create a sequential list of integers from a given start value to an end value, inclusive. The function should also allow for an optional step parameter to specify the difference between consecutive elements in the sequence.","solution":"def create_sequence(start, end, step=1): Generates a list of integers from start to end, inclusive, with an optional step. if step == 0: raise ValueError(\\"Step cannot be zero.\\") seq = [] if start <= end: i = start while i <= end: seq.append(i) i += step else: i = start while i >= end: seq.append(i) i -= step return seq"},{"question":"Write a function to implement a stack that supports push, pop, and min in constant time. How can you achieve this in your design?","solution":"class MinStack: Stack data structure that supports push, pop, and retrieving the minimum element in constant time. def __init__(self): self.stack = [] self.min_stack = [] def push(self, val): self.stack.append(val) if not self.min_stack or val <= self.min_stack[-1]: self.min_stack.append(val) def pop(self): if not self.stack: return None val = self.stack.pop() if val == self.min_stack[-1]: self.min_stack.pop() return val def get_min(self): if not self.min_stack: return None return self.min_stack[-1]"},{"question":"Write a function to check if a number is a prime number. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Make sure your function handles edge cases and returns the correct(boolean) value.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False if n == 2: return True # 2 is the only even prime number if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True"},{"question":"Write a function to split a string into a list of words reverse the list and then join them back into a string.","solution":"def reverse_words(sentence): Splits a string into a list of words, reverses the list, and then joins them back into a string. words = sentence.split() reversed_words = words[::-1] return ' '.join(reversed_words)"},{"question":"Write a function to flatten a nested list of integers using recursion. The function should take a list as an argument, where the list can contain integers or other lists. The flattened list should be returned in a standard list format.","solution":"def flatten_list(nested_list): Flattens a nested list of integers using recursion. Args: nested_list (list): A list which can contain integers or other lists. Returns: list: A flattened list containing all integers. flattened = [] for element in nested_list: if isinstance(element, list): flattened.extend(flatten_list(element)) else: flattened.append(element) return flattened"},{"question":"Write a function to generate all possible subsets of a given set of unique integers. The function should return a list of lists, where each inner list represents a possible subset. The subsets should be generated in lexicographical order and include the empty set.","solution":"def subsets(nums): Generate all possible subsets of a given set of unique integers. Parameters: nums (List[int]): List of unique integers. Returns: List[List[int]]: A list of lists where each inner list represents a possible subset. nums.sort() # Ensure the input is sorted for lexicographical order result = [] def backtrack(start, path): result.append(path) for i in range(start, len(nums)): backtrack(i + 1, path + [nums[i]]) backtrack(0, []) return result"},{"question":"Write a function to find the maximum value in an array of numbers.","solution":"def find_max(arr): Returns the maximum value in an array of numbers. if not arr: raise ValueError(\\"The array is empty\\") max_value = arr[0] for num in arr: if num > max_value: max_value = num return max_value"},{"question":"Write a function to calculate the length of the longest prefix that is also a suffix in a given string. This function should be efficient and handle edge cases, such as when the input string is empty or contains only one character.","solution":"def longest_prefix_suffix(s: str) -> int: Calculate the length of the longest prefix which is also a suffix. This function uses the KMP (Knuth-Morris-Pratt) partial match table (or LPS array). :param s: The input string :return: The length of the longest prefix which is also a suffix n = len(s) if n == 0: return 0 # LPS Array lps = [0] * n length = 0 # length of the previous longest prefix suffix i = 1 while i < n: if s[i] == s[length]: length += 1 lps[i] = length i += 1 else: if length != 0: length = lps[length - 1] else: lps[i] = 0 i += 1 return lps[n - 1]"},{"question":"Write a function to retrieve the nth Fibonacci number using Python. The function should be efficient and utilize memoization to improve performance.","solution":"def fibonacci(n, memo={}): Returns the nth Fibonacci number using memoization. if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n]"},{"question":"Write a function to find all the maximum numbers in a list and return them in a new list. If there is only one maximum number, return a list containing that one number. If the list is empty, return an empty list. If all numbers in the list are the same, return a list containing that number.","solution":"def find_all_maximum_numbers(numbers): Returns a list of all maximum numbers in the input list. - If the list is empty, returns an empty list. - If all numbers in the list are the same, returns a list containing that number. if not numbers: return [] max_num = max(numbers) return [num for num in numbers if num == max_num]"},{"question":"Write a function to find the intersection of two sets represented as arrays in Python.","solution":"def intersection_of_arrays(arr1, arr2): Returns the intersection of two arrays as a list. Parameters: arr1 (list): First list of elements. arr2 (list): Second list of elements. Returns: list: The intersection of the two lists. set1 = set(arr1) set2 = set(arr2) intersection = set1.intersection(set2) return list(intersection)"},{"question":"Write a function to calculate the factorial length of a number in Python. The factorial length of a number is defined as the number of digits in the factorial of the given number. For example, the factorial of 5 is 120, and the number of digits in 120 is 3, so the factorial length of 5 is 3.","solution":"import math def factorial_length(n): Returns the number of digits in the factorial of the given number n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") factorial = math.factorial(n) return len(str(factorial))"},{"question":"Write a function to generate all unique permutations of a given string. The function should return a list of all possible permutations, considering that the input string may contain duplicate characters.","solution":"from itertools import permutations def unique_permutations(s): Generates all unique permutations of a given string. Parameters: s (str): The input string which may contain duplicate characters. Returns: list: A list of all unique permutations of the input string. # Use a set to handle duplicates return list(set([''.join(p) for p in permutations(s)]))"},{"question":"Write a function to calculate the minimum number of coins needed to make a given amount from a given list of coin denominations. This function should be efficient and handle large inputs well.","solution":"def min_coins(coins, amount): Returns the minimum number of coins needed to make the given amount using the provided list of coin denominations. If it's not possible to make the amount with the given denominations, returns -1. # Initialize the array to store the minimum coins needed for each amount dp = [float('inf')] * (amount + 1) dp[0] = 0 # Base case: No coins are needed to make the amount 0 for coin in coins: for x in range(coin, amount + 1): dp[x] = min(dp[x], dp[x - coin] + 1) return dp[amount] if dp[amount] != float('inf') else -1"},{"question":"Write a function to create a new list of strings, where each string is the concatenation of the corresponding strings from two input lists.","solution":"def concatenate_lists(list1, list2): Returns a new list where each string is the concatenation of the corresponding strings from two input lists. Parameters: list1 (list of str): The first list of strings. list2 (list of str): The second list of strings. Returns: list of str: A new list with concatenated strings. if len(list1) != len(list2): raise ValueError(\\"The input lists must have the same length\\") return [str1 + str2 for str1, str2 in zip(list1, list2)]"},{"question":"Write a function to sort the elements of a given list in descending order without using the built-in sort() function or any other sorting function. You should implement your own sorting algorithm.","solution":"def sort_descending(lst): Sorts the elements of the given list in descending order without using built-in sort function. # Implementing bubble sort algorithm n = len(lst) for i in range(n): for j in range(0, n-i-1): if lst[j] < lst[j+1]: lst[j], lst[j+1] = lst[j+1], lst[j] return lst"},{"question":"Write a function to remove all duplicates from an array, and return the new length of the array after removing duplicates. The function should also rearrange the array in such a way that the elements that appear only once in the original array should be moved to the beginning of the array in the order of their first appearance. Elements that appear more than once should be removed from the array.","solution":"def remove_duplicates(arr): Removes all duplicates from the array and returns the new length of the array. The unique elements are moved to the beginning of the array in their order of first appearance. from collections import Counter # Count the occurrences of each element counts = Counter(arr) # Keep only elements that appear once in their order of first appearance unique_elements = [element for element in arr if counts[element] == 1] # Modify the original array to store only the unique elements at the beginning for i in range(len(unique_elements)): arr[i] = unique_elements[i] return len(unique_elements)"},{"question":"Write a function to filter a list of numbers based on a given condition using Python. The function should take two arguments: a list of numbers and a condition function that returns a boolean value. The condition function will be passed each number in the list and should return True if the number meets the condition, and False otherwise. The function should return a new list containing only the numbers that meet the condition.","solution":"def filter_numbers(numbers, condition): Filters a list of numbers based on a given condition. Parameters: - numbers: list of numbers - condition: function that takes a number and returns a boolean Returns: - list of numbers that meet the condition return [number for number in numbers if condition(number)]"},{"question":"Write a function to find the number of unique elements in an array. The array may contain integers, and can have any length. Output should be an integer representing the count of unique elements.","solution":"def count_unique_elements(arr): Returns the number of unique elements in the array. :param arr: List of elements. :return: Integer representing the count of unique elements. return len(set(arr))"},{"question":"Write a function to solve the FizzBuzz problem in Python. The function should take an integer \`n\` as input and return a list of strings representing the FizzBuzz sequence up to \`n\`. For multiples of three, the function should append \\"Fizz\\" to the list. For multiples of five, it should append \\"Buzz\\". For numbers that are multiples of both three and five, it should append \\"FizzBuzz\\". Otherwise, it should append the number itself as a string.","solution":"def fizzbuzz(n): Generates the FizzBuzz sequence up to n. Parameters: n (int): The upper limit of the sequence. Returns: list: A list of strings representing the FizzBuzz sequence. result = [] for i in range(1, n+1): if i % 3 == 0 and i % 5 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return result"},{"question":"Write a function to find the length of a linked list.","solution":"class Node: def __init__(self, data): self.data = data self.next = None def linked_list_length(head): Returns the length of the linked list. Args: head (Node): The head node of the linked list. Returns: int: The length of the linked list. current = head count = 0 while current is not None: count += 1 current = current.next return count"},{"question":"Write a function to calculate the sum of Fibonacci numbers up to a given maximum value. The function should be able to handle large values efficiently.","solution":"def sum_fibonacci_up_to_max(max_value): Calculate the sum of Fibonacci numbers up to a given maximum value. :param max_value: int - The maximum value for Fibonacci sequence. :return: int - The sum of Fibonacci numbers less than or equal to the max_value. if max_value < 1: return 0 a, b = 0, 1 total_sum = 0 while a <= max_value: total_sum += a a, b = b, a + b return total_sum"},{"question":"Write a function to find the second largest number in a given list of integers. If the list is empty or contains only one unique number, return \`None\` as there is no second largest number.","solution":"def second_largest(numbers): Returns the second largest number in a list of integers. If the list is empty or contains only one unique number, return None. if len(numbers) < 2: return None unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return None unique_numbers.sort() return unique_numbers[-2]"},{"question":"Write a function to find the first repeated element in an array of integers. If no element is repeated, return -1. The function should have a time complexity of O(n) and a space complexity of O(n).","solution":"def first_repeated_element(arr): Returns the first repeated element in an array of integers. If no element is repeated, returns -1. Parameters: arr (list): The input array of integers. Returns: int: The first repeated element, or -1 if no element is repeated. seen = set() for element in arr: if element in seen: return element seen.add(element) return -1"},{"question":"Write a function to reverse a string and then compare it with the original string to check if it's a palindrome. **Please provide complete code.**","solution":"def is_palindrome(s): Checks if the given string s is a palindrome. Args: s (str): The string to check. Returns: bool: True if s is a palindrome, False otherwise. reversed_s = s[::-1] return s == reversed_s"},{"question":"Write a function to calculate the nth fibonacci number in Python. The function should use recursion to solve the problem. You are expected to handle large numbers efficiently.","solution":"def fibonacci(n, memo={}): Returns the nth Fibonacci number using recursion with memoization. if n in memo: return memo[n] if n <= 0: return 0 if n == 1: return 1 memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo) return memo[n]"},{"question":"Write a function to calculate the sum of a given list of numbers. The function should take a list as an input and return the sum of its elements.","solution":"def sum_list(numbers): Returns the sum of the elements in the list. Parameters: numbers (list): A list of numbers Returns: int/float: Sum of the elements of the list return sum(numbers)"},{"question":"Write a function to replace all occurrences of a given string with another string in a given text. If the given string is empty or not found, return the original text unchanged.","solution":"def replace_string(text, to_replace, replacement): Replaces all occurrences of \`to_replace\` with \`replacement\` in \`text\`. If \`to_replace\` is empty or not found, returns the original \`text\`. if not to_replace: return text return text.replace(to_replace, replacement)"},{"question":"Write a function to find the second smallest number in a given list of integers. The function should return the value of the second smallest number. If the list has less than two unique numbers, the function should return None.","solution":"def second_smallest(numbers): Returns the second smallest number in a list of integers. If the list has less than two unique numbers, it returns None. unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return None unique_numbers.sort() return unique_numbers[1]"},{"question":"Write a function to convert a binary number (given as an integer) to its hexadecimal representation as a string.","solution":"def binary_to_hex(binary_number): Converts a binary number (given as an integer) to its hexadecimal representation as a string. Parameters: binary_number (int): Binary number to convert Returns: str: Hexadecimal representation of the binary number # Convert the integer binary number to a string containing binary digits binary_str = str(binary_number) # Convert binary string to an integer decimal_number = int(binary_str, 2) # Convert the decimal number to a hexadecimal string hexadecimal_number = hex(decimal_number) # Remove the '0x' prefix from the hexadecimal number return hexadecimal_number[2:].upper()"},{"question":"Write a function to reverse a linked list between two given positions, m and n. The function should take the head of the linked list and two integers m and n as input parameters. The function should not modify the values of the nodes in the list, only the links between them.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverseBetween(head, m, n): if not head or m == n: return head dummy = ListNode(0) dummy.next = head prev = dummy # Move prev to the node just before the reversal start point for _ in range(m - 1): prev = prev.next # Start reversing from here reverse_start = prev.next then = reverse_start.next for _ in range(n - m): reverse_start.next = then.next then.next = prev.next prev.next = then then = reverse_start.next return dummy.next"},{"question":"Write a function to print prime numbers between two given numbers using the Sieve of Eratosthenes algorithm.","solution":"def sieve_of_eratosthenes(start, end): Returns a list of prime numbers between 'start' and 'end' using the Sieve of Eratosthenes algorithm. if start > end: return [] # Initialize a boolean array that represents whether each number is prime sieve = [True] * (end + 1) sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers p = 2 while p * p <= end: if sieve[p]: for i in range(p * p, end + 1, p): sieve[i] = False p += 1 # Collect prime numbers in the range [start, end] primes = [num for num in range(start, end + 1) if sieve[num]] return primes"},{"question":"Write a function to swap the elements in a given array.","solution":"def swap_elements(arr, index1, index2): Swaps the elements at index1 and index2 positions in the given array. Parameters: arr (list): The input list whose elements need to be swapped. index1 (int): The first index. index2 (int): The second index. Returns: list: The list with swapped elements. if index1 >= len(arr) or index2 >= len(arr) or index1 < 0 or index2 < 0: raise IndexError(\\"Index out of bounds\\") arr[index1], arr[index2] = arr[index2], arr[index1] return arr"},{"question":"Write a function to generate a list of all divisors of a given number. The function should be named \`find_divisors\` and take an integer \`num\` as its input parameter. The function should return a list of all divisors of \`num\`, including 1 and \`num\` itself. If \`num\` is less than or equal to 0, the function should return an empty list.","solution":"def find_divisors(num): Generates a list of all divisors of a given number. Parameters: num (int): The number to find divisors of. Returns: list: A list of all divisors of num. if num <= 0: return [] divisors = [] for i in range(1, num + 1): if num % i == 0: divisors.append(i) return divisors"},{"question":"Write a function to find a peak element in an array. A peak element is one which is not smaller than its neighbors. For corner elements, we need to consider only one neighbor. For Example: In array {1, 3, 20, 4, 1, 0}, 20 is a peak element because it is greater than its neighbors 3 and 4.","solution":"def find_peak(arr): Find a peak element in the array. A peak element is an element that is greater than or equal to its neighbors. n = len(arr) if n == 0: return None if n == 1: return arr[0] for i in range(n): # Check for corner elements if i == 0 and arr[i] >= arr[i+1]: return arr[i] elif i == n-1 and arr[i] >= arr[i-1]: return arr[i] # Check for non-corner elements elif arr[i] >= arr[i-1] and arr[i] >= arr[i+1]: return arr[i] # Example usage print(find_peak([1, 3, 20, 4, 1, 0])) # Output should be 20"},{"question":"Write a function to compute the Fibonacci sequence using an iterative approach in Python.","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n <= 0: return \\"Input should be a positive integer.\\" elif n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 for _ in range(2, n): a, b = b, a + b return b"},{"question":"Write a function to return the two unique numbers in an array where every other number appears exactly twice.","solution":"def find_unique_numbers(nums): Finds and returns the two unique numbers in an array where every other number appears exactly twice. # Step 1: XOR all the numbers. The result will be the XOR of the two unique numbers because XOR of a number with itself is 0. xor_result = 0 for num in nums: xor_result ^= num # Step 2: Find any set bit in the xor_result. This bit is set in one unique number and not in the other. set_bit = xor_result & -xor_result # Step 3: Use the set bit to divide all numbers into two groups and XOR each group to find the unique numbers. unique1, unique2 = 0, 0 for num in nums: if num & set_bit: unique1 ^= num else: unique2 ^= num return unique1, unique2"},{"question":"Write a function to return the square root of a number without using any in-built method (i.e., do not use \`Math.sqrt()\`). You can use only basic arithmetic operations (+, -, *, /).","solution":"def sqrt(number, precision=0.00001): Returns the square root of a number using binary search method. Args: - number: int or float, the number to find the square root of. - precision: float, the precision of the calculation. if number < 0: raise ValueError(\\"Cannot compute square root of negative numbers\\") if number == 0 or number == 1: return number start, end = 0, number while start <= end: mid = (start + end) / 2 square = mid * mid if abs(square - number) <= precision: return mid elif square < number: start = mid else: end = mid"},{"question":"Write a function to implement the Depth-First Search (DFS) algorithms on a graph using a stack. You are given a graph represented as an adjacency list, where \`graph\` is a dictionary where the keys are nodes and the values are lists of adjacent nodes.","solution":"def dfs(graph, start): Implements Depth-First Search (DFS) on a graph using a stack. Args: graph (dict): A dictionary representing the adjacency list of the graph. start: The starting node for the DFS traversal. Returns: list: A list of nodes visited in the order they were visited. visited = set() stack = [start] result = [] while stack: node = stack.pop() if node not in visited: visited.add(node) result.append(node) # Add nodes to stack in reverse order to maintain traversal order stack.extend(reversed(graph.get(node, []))) return result"},{"question":"Write a function to calculate the sum of numbers from 1 to n using a for loop.","solution":"def sum_of_numbers(n): Returns the sum of numbers from 1 to n using a for loop. Parameters: n (int): The upper limit of the range to sum. Returns: int: The sum of numbers from 1 to n. total = 0 for i in range(1, n + 1): total += i return total"},{"question":"Write a function to check if a given string is a palindrome using a basic iterative approach in Python.","solution":"def is_palindrome(s): Returns True if the given string s is a palindrome, False otherwise. # Remove all non-alphanumeric characters and convert to lowercase. s = ''.join(char.lower() for char in s if char.isalnum()) # Check if the string reads the same forwards and backwards. return s == s[::-1]"},{"question":"Write a function to reverse a string without using the built-in reverse method. You can use any other string manipulation methods available in Python. Additionally, the function should handle large strings efficiently.","solution":"def reverse_string(s): Returns the reversed string of the input s. return s[::-1]"},{"question":"Write a function to find the missing number in an array that contains numbers from 1 to n with one number missing. The function should operate in O(n) time and use constant O(1) extra space. One way to solve this is to calculate the expected sum of the first n natural numbers using the formula n(n+1)/2. Subtract the sum of the numbers in the array from this expected sum to find the missing number. Implement this solution.","solution":"def find_missing_number(arr): Finds the missing number in a list of numbers from 1 to n. Args: arr (list): List of integers from 1 to n with one number missing. Returns: int: The missing number. n = len(arr) + 1 # Since one number is missing expected_sum = n * (n + 1) // 2 actual_sum = sum(arr) return expected_sum - actual_sum"},{"question":"Write a function to implement a recursive Binary Search in Python. Initialize your function with the function name \`binary_search\`. The function should take three parameters: \`arr\` (the sorted array where the search is to be performed), \`low\` (the start index of the array), and \`high\` (the end index of the array). The function should return the index of the element if it is present in the array, else return -1.","solution":"def binary_search(arr, low, high, x): Recursive implementation of binary search. Parameters: arr : list A list where the search is to be performed, sorted in ascending order. low : int The starting index of the array segment to be searched. high : int The ending index of the array segment to be searched. x : int The element to search for in the array. Returns: int: The index of element x in array if present, else -1. if high >= low: mid = (high + low) // 2 if arr[mid] == x: return mid elif arr[mid] > x: return binary_search(arr, low, mid - 1, x) else: return binary_search(arr, mid + 1, high, x) else: return -1"},{"question":"Write a function to check if a given array is a valid heap in a specific order.","solution":"def is_valid_heap(arr, min_heap=True): Checks if the given array is a valid heap. Parameters: arr (list): List of elements to be checked min_heap (bool): True if checking for a min-heap, False if checking for a max-heap Returns: bool: True if the array represents a valid heap, False otherwise def compare(parent, child): if min_heap: return parent <= child else: return parent >= child n = len(arr) for i in range((n // 2) - 1, -1, -1): if 2 * i + 1 < n and not compare(arr[i], arr[2 * i + 1]): return False if 2 * i + 2 < n and not compare(arr[i], arr[2 * i + 2]): return False return True"},{"question":"Write a function to detect a cycle in a directed graph. You can represent the graph using an adjacency list.","solution":"def is_cyclic(graph): Detects if there's a cycle in a directed graph. :param graph: Dictionary where keys are nodes and values are lists of adjacent nodes. :return: Boolean value indicating whether the graph contains a cycle. def dfs(node): if node in visited: return False if node in rec_stack: return True rec_stack.add(node) for adjacent in graph.get(node, []): if dfs(adjacent): return True rec_stack.remove(node) visited.add(node) return False visited = set() rec_stack = set() for node in graph: if dfs(node): return True return False"},{"question":"Write a function to find the unique elements in a list.","solution":"def unique_elements(lst): Returns a list of unique elements in the given list. Parameters: lst (list): A list of elements. Returns: list: A list containing only the unique elements from lst. return list(set(lst))"},{"question":"Write a function to support user inputs for a tic-tac-toe game. The function should take three arguments: the size of the board (n), the symbol for the first player (s1), and the symbol for the second player (s2). The function should then repeatedly prompt the user to enter the row and column positions for their moves, check if the positions are valid and not already taken, and update the board. The function should continue until the game is won or all positions are filled (draw).","solution":"def tic_tac_toe(n, s1, s2): Function to support user inputs for a tic-tac-toe game. Args: n (int): Size of the board (nxn). s1 (str): Symbol for the first player. s2 (str): Symbol for the second player. def check_win(board, symbol): # Check rows and columns for i in range(n): if all([board[i][j] == symbol for j in range(n)]) or all([board[j][i] == symbol for j in range(n)]): return True # Check diagonals if all([board[i][i] == symbol for i in range(n)]) or all([board[i][n-i-1] == symbol for i in range(n)]): return True return False def print_board(board): for row in board: print(\\" | \\".join(row)) print(\\"-\\" * (n * 3 - 1)) board = [[' ' for _ in range(n)] for _ in range(n)] total_moves = n * n player_symbols = [s1, s2] current_player = 0 move_count = 0 while move_count < total_moves: print_board(board) player = player_symbols[current_player] print(f\\"Player {player}'s turn.\\") while True: try: row = int(input(f\\"Enter row (0 to {n-1}): \\")) col = int(input(f\\"Enter column (0 to {n-1}): \\")) if 0 <= row < n and 0 <= col < n and board[row][col] == ' ': board[row][col] = player break else: print(\\"Invalid move. Cell is either occupied or out of bounds. Try again.\\") except ValueError: print(\\"Invalid input. Please enter numbers within the valid range.\\") move_count += 1 if check_win(board, player): print_board(board) print(f\\"Player {player} wins!\\") return current_player = 1 - current_player # Switch players print_board(board) print(\\"It's a draw!\\")"},{"question":"Write a function to return the nth number in the Fibonacci sequence using recursion. Can you also provide an example of how to call this function?","solution":"def fibonacci(n): Returns the nth number in the Fibonacci sequence using recursion. if n <= 0: return 0 elif n == 1: return 1 else: return fibonacci(n-1) + fibonacci(n-2) # Example of how to call this function # Example: To get the 5th number in the Fibonacci sequence # print(fibonacci(5))"},{"question":"Write a function to sort a given dictionary by its values in descending order. If two values are the same, sort by the keys in ascending order. Return the sorted dictionary.","solution":"def sort_dict_by_values(d): Sorts the dictionary by its values in descending order. If two values are the same, sorts by the keys in ascending order. Returns the sorted dictionary. return dict(sorted(d.items(), key=lambda item: (-item[1], item[0]))) # Example usage # sorted_dict = sort_dict_by_values({'a': 2, 'b': 3, 'c': 1, 'd': 2}) # print(sorted_dict) # Expected Output: {'b': 3, 'a': 2, 'd': 2, 'c': 1}"},{"question":"Write a function to print the binary representation of a given number. The function should take an integer as input and output the binary representation of that integer using a stack data structure.","solution":"class Stack: def __init__(self): self.items = [] def is_empty(self): return self.items == [] def push(self, item): self.items.append(item) def pop(self): return self.items.pop() def peek(self): return self.items[-1] def decimal_to_binary(num): Convert a given integer to its binary representation using a stack. stack = Stack() if num == 0: return '0' n = abs(num) while n > 0: rem = n % 2 stack.push(rem) n = n // 2 binary_representation = \\"\\" if num < 0: binary_representation = \\"-\\" while not stack.is_empty(): binary_representation += str(stack.pop()) return binary_representation"},{"question":"Write a function to check if a given string is a valid credit card number. A valid credit card number follows the Luhn algorithm.","solution":"def luhn_check(card_number): Check if a given string is a valid credit card number using the Luhn algorithm. def digits_of(n): return [int(d) for d in str(n)] digits = digits_of(card_number) odd_digits = digits[-1::-2] even_digits = digits[-2::-2] checksum = sum(odd_digits) for d in even_digits: checksum += sum(digits_of(d * 2)) return checksum % 10 == 0"},{"question":"Write a function to find the maximum profit from buying and selling a stock on different days. You can only make at most one transaction (i.e., buy one and sell one share of the stock). The function should take an array of stock prices where prices[i] is the price of the stock on day i. If no profit can be made, return 0.","solution":"def max_profit(prices): This function takes a list of stock prices and returns the maximum profit that can be achieved by buying and selling one share of the stock on different days. if not prices: return 0 min_price = float('inf') max_profit = 0 for price in prices: if price < min_price: min_price = price current_profit = price - min_price if current_profit > max_profit: max_profit = current_profit return max_profit"},{"question":"Write a function to count the numbers in an array that are greater than 10 and have both their first and last digits as even numbers.","solution":"def count_special_numbers(arr): Return the count of numbers in the array that are greater than 10 and have both their first and last digits as even numbers. def is_even_digit(digit): return digit in {'0', '2', '4', '6', '8'} def first_last_digits_even(num): num_str = str(num) return is_even_digit(num_str[0]) and is_even_digit(num_str[-1]) count = 0 for num in arr: if num > 10 and first_last_digits_even(num): count += 1 return count"},{"question":"Write a function to read a file line-by-line and return a list of lines.","solution":"def read_lines_from_file(file_path): Reads a file line-by-line and returns a list of lines. Parameters: file_path (str): Path to the file to be read. Returns: list: A list containing lines from the file. lines = [] try: with open(file_path, 'r') as file: lines = file.readlines() except FileNotFoundError: raise FileNotFoundError(f\\"The file at {file_path} was not found.\\") return [line.rstrip('n') for line in lines]"},{"question":"Write a function to find the longest palindromic substring in a given string. A palindrome is a string that reads the same backward as forward. A substring is a contiguous sequence of characters within a string.","solution":"def longest_palindromic_substring(s): Finds the longest palindromic substring in a given string. if not s: return \\"\\" def expand_around_center(left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] longest = \\"\\" for i in range(len(s)): palindrome_odd = expand_around_center(i, i) palindrome_even = expand_around_center(i, i + 1) longest = max(longest, palindrome_odd, palindrome_even, key=len) return longest"},{"question":"Write a function to perform a binary search on a sorted array. The function should return the index of the target value if found in the array, otherwise return -1. Here is a Python function that attempts to implement this, but it contains an error. Your task is to find the error and correct it.","solution":"def binary_search(arr, target): Perform a binary search on a sorted array. Parameters: arr (list): The sorted array to search. target: The value to search for in the array. Returns: int: The index of the target value if found, otherwise -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a function to calculate the minimum number of coins required to make up a given amount using dynamic programming. The function should take an array of coin denominations and an amount, and return the minimum number of coins needed. If it is not possible to make up the amount using the given coins, the function should return -1.","solution":"def min_coins(coins, amount): Returns the minimum number of coins needed to make up the given amount using the available coin denominations. If it is not possible to make up the amount, returns -1. # Initialize the list for storing the minimum coins needed for each amount dp = [float('inf')] * (amount + 1) dp[0] = 0 # Base case: 0 coins are needed to make the amount 0 # Iterate over each coin in the coin denominations for coin in coins: for x in range(coin, amount + 1): dp[x] = min(dp[x], dp[x - coin] + 1) return dp[amount] if dp[amount] != float('inf') else -1"},{"question":"Write a function to calculate the sum of all positive divisors of a given number, excluding the number itself. For example, if the input number is 15, the function should return 1 + 3 + 5 = 9. How can I implement this in Python?","solution":"def sum_of_positive_divisors(n): Returns the sum of all positive divisors of a given number n, excluding itself. Parameters: n (int): The input number Returns: int: Sum of all positive divisors of n excluding n if n < 1: raise ValueError(\\"Input must be a positive integer\\") divisors_sum = 0 for i in range(1, n): if n % i == 0: divisors_sum += i return divisors_sum"},{"question":"Write a function to find the longest common prefix of two strings.","solution":"def longest_common_prefix(str1, str2): Returns the longest common prefix of two strings. if not str1 or not str2: return \\"\\" min_length = min(len(str1), len(str2)) for i in range(min_length): if str1[i] != str2[i]: return str1[:i] return str1[:min_length]"},{"question":"Write a function to print the nth element of a list in Python.","solution":"def get_nth_element(lst, n): Returns the nth element of the list. if n < 0 or n >= len(lst): raise IndexError(\\"Index out of range\\") return lst[n]"},{"question":"Write a function to sort a list of integers in ascending order using the Bubble Sort algorithm. Explain each step of your function.","solution":"def bubble_sort(arr): Sorts a list of integers in ascending order using the Bubble Sort algorithm. n = len(arr) for i in range(n): # Track if any swaps are made swapped = False for j in range(0, n - i - 1): # Compare the adjacent elements if arr[j] > arr[j + 1]: # Swap if the element found is greater than the next element arr[j], arr[j + 1] = arr[j + 1], arr[j] swapped = True # If no elements were swapped, the list is already sorted if not swapped: break return arr"},{"question":"Write a function to determine the tallest building in a given floor plan. The floor plan is represented as a 2D list where 0s represent empty spaces and 1s represent buildings. The function should return the height of the tallest building.","solution":"def tallest_building(floor_plan): Determines the height of the tallest building in the given floor plan. Parameters: floor_plan (list of lists of int): A 2D list where 0s represent empty spaces, and 1s represent building parts. Returns: int: The height of the tallest building. if not floor_plan or not floor_plan[0]: return 0 rows = len(floor_plan) cols = len(floor_plan[0]) tallest = 0 for col in range(cols): height = 0 for row in range(rows): if floor_plan[row][col] == 1: height += 1 tallest = max(tallest, height) return tallest"},{"question":"Write a function to find the maximum subarray sum using Kadane's Algorithm. Implement the function in Python and ensure it returns the maximum sum found. If the array contains only negative numbers, return the maximum single element in the array.","solution":"def max_subarray_sum(arr): Finds the maximum subarray sum using Kadane's Algorithm. if not arr: # handle empty array case return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to implement the symmetric difference in Python.","solution":"def symmetric_difference(set1, set2): Returns the symmetric difference of two sets. The symmetric difference is defined as the set of elements which are in either of the sets but not in their intersection. Args: set1: First set set2: Second set Returns: A new set containing the symmetric difference of the given sets. return set1.symmetric_difference(set2)"},{"question":"Write a function to find the maximum sum of a subarray in a given array of integers, with the constraint that the subarray must contain at least one positive integer. There could be multiple positive integers in the array.","solution":"def max_subarray_with_positive(arr): Returns the maximum sum of a subarray that contains at least one positive integer. max_sum = float('-inf') current_sum = 0 has_positive = any(x > 0 for x in arr) for num in arr: current_sum += num if current_sum > max_sum: max_sum = current_sum if current_sum < 0: current_sum = 0 return max_sum if has_positive else None"},{"question":"Write a function to find the length of the longest palindromic subsequence in a given string. A palindromic subsequence is a sequence that appears the same forward and backward.","solution":"def longest_palindromic_subsequence(s): Returns the length of the longest palindromic subsequence in a given string. n = len(s) dp = [[0 for j in range(n)] for i in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1]"},{"question":"Write a function to add two polynomials represented by two linked lists, where each node in the list represents a term of the polynomial. Each node contains the coefficient and the exponent of the term. The polynomials are sorted in non-decreasing order by exponent. The function should return the head of the linked list representing the sum of the two polynomials.","solution":"class ListNode: def __init__(self, coeff=0, exp=0, next=None): self.coeff = coeff self.exp = exp self.next = next def add_polynomials(poly1, poly2): Adds two polynomials represented by two linked lists and returns the head of the resulting polynomial. Parameters: poly1 (ListNode): Head node of the first polynomial linked list. poly2 (ListNode): Head node of the second polynomial linked list. Returns: ListNode: Head node of the resulting polynomial linked list. dummy = ListNode() tail = dummy while poly1 is not None and poly2 is not None: if poly1.exp < poly2.exp: tail.next = ListNode(poly1.coeff, poly1.exp) poly1 = poly1.next elif poly1.exp > poly2.exp: tail.next = ListNode(poly2.coeff, poly2.exp) poly2 = poly2.next else: sum_coeff = poly1.coeff + poly2.coeff if sum_coeff != 0: tail.next = ListNode(sum_coeff, poly1.exp) poly1 = poly1.next poly2 = poly2.next if tail.next: tail = tail.next while poly1 is not None: tail.next = ListNode(poly1.coeff, poly1.exp) poly1 = poly1.next tail = tail.next while poly2 is not None: tail.next = ListNode(poly2.coeff, poly2.exp) poly2 = poly2.next tail = tail.next return dummy.next"},{"question":"Write a function to compute the factorial of a given number using Python's \`reduce\` function.","solution":"from functools import reduce def factorial(n): Returns the factorial of a given number n using reduce. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0: return 1 return reduce(lambda x, y: x * y, range(1, n + 1))"},{"question":"Write a function to determine if a given array of strings can be rearranged to form a palindrome. A string can be rearranged to form a palindrome if at most one character has an odd frequency, and all other characters have even frequencies.","solution":"from collections import Counter def can_form_palindrome(arr): Returns true if the given array of strings can be rearranged to form a palindrome. counter = Counter() for string in arr: counter.update(string.lower()) odd_count = sum(1 for count in counter.values() if count % 2 != 0) return odd_count <= 1"},{"question":"Write a function to recursively sum up all the elements in a multi-dimensional array using Python.","solution":"def recursive_sum(arr): Recursively sums all the elements in a multi-dimensional array. total = 0 for element in arr: if isinstance(element, list): total += recursive_sum(element) else: total += element return total"},{"question":"Write a function to print the nodes of a binary tree in order of increasing depth, level by level.","solution":"from collections import deque class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key def level_order_traversal(root): Prints the nodes of a binary tree in order of increasing depth, level by level. if not root: return [] result = [] queue = deque([root]) while queue: level_size = len(queue) level = [] for _ in range(level_size): node = queue.popleft() level.append(node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) result.append(level) return result"},{"question":"Write a function to reverse an array without using any additional memory or data structures.","solution":"def reverse_array(arr): Reverses the array in place without using additional memory. start = 0 end = len(arr) - 1 while start < end: # Swap the elements arr[start], arr[end] = arr[end], arr[start] start += 1 end -= 1 return arr"},{"question":"Write a function to calculate the factorial of a number using recursion in Python. Here is a Python function that supposed to calculate the factorial of number \`n\`, but it contains some logical errors. Your task is to correct the errors and explain the logic behind each step.","solution":"def factorial(n): Returns the factorial of n using recursion. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") elif n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Write a function to determine if a variable is a dictionary. In Python.","solution":"def is_dict(variable): Checks if the given variable is a dictionary. Args: variable : any type The variable to check. Returns: bool True if the variable is a dictionary, False otherwise. return isinstance(variable, dict)"},{"question":"Write a function to calculate the factorial of a number. However, this function should also keep track of the number of recursive calls made to calculate the factorial. The function should return the factorial of the number along with the count of recursive calls.","solution":"def factorial_with_recursion_count(n, call_count=0): Returns the factorial of n and the count of recursive calls made. if n == 0 or n == 1: return (1, call_count + 1) else: factorial, call_count = factorial_with_recursion_count(n-1, call_count + 1) return (n * factorial, call_count)"},{"question":"Write a function to convert all the characters in a string to uppercase using Python.","solution":"def to_uppercase(s): Converts all characters in the string to uppercase. Parameters: s (str): The input string. Returns: str: The input string with all characters converted to uppercase. return s.upper()"},{"question":"Write a function to find the maximum sum of a contiguous subsequence in an array of integers. The function should return the maximum sum.","solution":"def max_subarray_sum(arr): Finds the maximum sum of a contiguous subsequence in the given array. :param arr: List of integers :return: Maximum sum of contiguous subsequence if not arr: return 0 # As a convention, if the array is empty, return 0. # Initialize variables to store the maximum sum and the current subarray sum. max_sum = current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function to count the number of times a specific substring appears in a string. Also, make sure to handle case sensitivity, e.g., \\"hello\\" and \\"Hello\\" should be considered different substrings.","solution":"def count_substring(main_string, sub_string): Returns the number of times the sub_string appears in main_string. Case sensitive. Arguments: main_string: The string in which to search. sub_string: The string to search for. Returns: int: The count of sub_string appearances. return main_string.count(sub_string)"},{"question":"Write a function to find the maximum value in a list of integers using the linear search algorithm.","solution":"def find_max(arr): Returns the maximum value in a list of integers using linear search. if not arr: raise ValueError(\\"The list is empty\\") max_val = arr[0] for num in arr: if num > max_val: max_val = num return max_val"},{"question":"Write a function to calculate the sum of two variables.","solution":"def sum_of_two(a, b): Returns the sum of a and b. return a + b"},{"question":"Write a function to identify the maximum number of consecutive occurrences of the same character in a given string. For example, in the string \\"aaabbcccddddd\\", the maximum number of consecutive occurrences of the same character is 5 (for the character 'd').","solution":"def max_consecutive_occurrences(s): Returns the maximum number of consecutive occurrences of the same character in a given string. if not s: return 0 max_count = 1 current_count = 1 for i in range(1, len(s)): if s[i] == s[i-1]: current_count += 1 else: max_count = max(max_count, current_count) current_count = 1 return max(max_count, current_count)"},{"question":"Write a function to verify if a user has access to a resource based on a specific permission level.","solution":"def has_access(user_permission_level: int, resource_permission_level: int) -> bool: Checks if a user has access to a resource based on their permission level. Args: user_permission_level (int): The permission level of the user. resource_permission_level (int): The required permission level to access the resource. Returns: bool: True if user has access, False otherwise. return user_permission_level >= resource_permission_level"},{"question":"Write a function to solve the 0/1 Knapsack problem using dynamic programming in Python. The 0/1 Knapsack problem involves selecting items with maximum total value without exceeding a given capacity. Each item can either be taken once or not taken at all.","solution":"def knapsack(values, weights, capacity): n = len(values) dp = [[0 for _ in range(capacity + 1)] for _ in range(n + 1)] for i in range(1, n + 1): for w in range(1, capacity + 1): if weights[i-1] <= w: dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1]) else: dp[i][w] = dp[i-1][w] return dp[n][capacity]"},{"question":"Write a function to check if a string contains only alphabetic characters and是否有中文字符可以一起判断。","solution":"def is_alpha_and_contains_chinese(s: str) -> bool: Checks if the string contains only alphabetic characters and includes any Chinese characters. Args: s (str): The string to be checked. Returns: bool: True if the string contains only alphabetic characters and includes Chinese characters, False otherwise. contains_chinese = any('u4e00' <= char <= 'u9fff' for char in s) is_alpha = all(char.isalpha() for char in s) return is_alpha and contains_chinese"},{"question":"Write a function to count the number of bits in a binary number that are set (i.e., have a value of 1). This function should take an integer as input and return the count of set bits.","solution":"def count_set_bits(n): Returns the number of bits that are set (i.e., have a value of 1) in the binary representation of the given integer. count = 0 while n > 0: count += n & 1 n >>= 1 return count"},{"question":"Write a function to check if a given string is a validISBN-10 number.","solution":"def is_valid_isbn10(isbn): Check if a given string is a valid ISBN-10 number. if len(isbn) != 10: return False total = 0 for i in range(10): if isbn[i] == 'X': value = 10 if i == 9 else -1 else: value = ord(isbn[i]) - ord('0') if value < 0 or value > 10: return False total += value * (10 - i) return total % 11 == 0"},{"question":"Write a function to calculate the sum of all even numbers in a list. How can we efficiently solve this problem using Python?","solution":"def sum_of_even_numbers(numbers): Returns the sum of all even numbers in the input list. :param numbers: List of integers :return: Integer sum of all even numbers return sum(num for num in numbers if num % 2 == 0)"},{"question":"Write a function to evaluate a postfix expression (also known as Reverse Polish Notation). The expression is a string of tokens where each token is either an integer or an operator (+, -, *, /). Operands are pushed onto a stack, and operators are applied to the operands popped from the stack.","solution":"def evaluate_postfix(expression): Evaluates a postfix expression (Reverse Polish Notation). Parameters: - expression (str): The postfix expression to evaluate, where tokens are space-separated. Returns: - int: The result of the postfix evaluation. stack = [] tokens = expression.split() for token in tokens: if token.isdigit() or (token[0] == '-' and token[1:].isdigit()): # Check if token is an integer stack.append(int(token)) else: operand2 = stack.pop() operand1 = stack.pop() if token == '+': result = operand1 + operand2 elif token == '-': result = operand1 - operand2 elif token == '*': result = operand1 * operand2 elif token == '/': result = int(operand1 / operand2) # Use integer division stack.append(result) return stack[0]"},{"question":"Write a function to shuffle a deck of cards represented as a list of strings. The function should shuffle the cards in place using the Fisher-Yates (aka Knuth) shuffle algorithm. The output should be a shuffled list of cards.","solution":"import random def shuffle_deck(deck): Shuffles the deck of cards in place using the Fisher-Yates shuffle algorithm. Parameters: deck (list): List of cards represented as strings. Returns: None: The deck is shuffled in place. n = len(deck) for i in range(n-1, 0, -1): j = random.randint(0, i) deck[i], deck[j] = deck[j], deck[i]"},{"question":"Write a function to calculate the total number of non-empty substrings that can be formed from a given string.","solution":"def count_non_empty_substrings(s): Returns the total number of non-empty substrings that can be formed from the given string. n = len(s) return (n * (n + 1)) // 2"},{"question":"Write a function to return the indices of all peak elements in a given one-dimensional array. A peak element is defined as any element that is greater than or equal to its neighbors.","solution":"def find_peak_indices(arr): Returns the indices of all peak elements in the given array. A peak element is greater than or equal to its neighbors. Parameters: arr (list): A list of integers. Returns: list: A list of indices of peak elements. if not arr: return [] n = len(arr) peak_indices = [] for i in range(n): if (i == 0 or arr[i] >= arr[i - 1]) and (i == n - 1 or arr[i] >= arr[i + 1]): peak_indices.append(i) return peak_indices"},{"question":"Write a function to compute the nth Fibonacci number in Python using dynamic programming. Can you provide a step-by-step solution?","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n <= 0: raise ValueError(\\"Input should be a positive integer\\") elif n == 1: return 0 elif n == 2: return 1 fib = [0, 1] for i in range(2, n): fib.append(fib[-1] + fib[-2]) return fib[-1]"},{"question":"Write a function to calculate the sum of numbers in a list using Python. I would like to understand the function step by step.","solution":"def sum_of_numbers(numbers): Returns the sum of all numbers in the list. :param numbers: List of numbers :return: Sum of numbers total = 0 for number in numbers: total += number return total"},{"question":"Write a function to calculate the sum of a specific range of numbers in a list. For example, if you have a list [1, 2, 3, 4, 5] and you want to calculate the sum of numbers from index 1 to 3, the function should return 9 (2 + 3 + 4).","solution":"def sum_range(numbers, start, end): Calculate the sum of a specific range of numbers in a list, from index 'start' to 'end' inclusive. :param numbers: List of numbers. :param start: Starting index of the range. :param end: Ending index of the range. :return: Sum of the numbers in the specified range. if start < 0 or end >= len(numbers) or start > end: raise ValueError(\\"Invalid range specified\\") return sum(numbers[start:end + 1])"},{"question":"Write a function to find the mode(s) of an array of numbers. The mode is the number that appears most frequently in the array. If there are multiple numbers that appear equally and most frequently, return all of them as modes.","solution":"from collections import Counter def find_modes(numbers): Returns the mode(s) of the given array of numbers. If there are multiple numbers that appear equally and most frequently, return all of them. :param numbers: List of numbers :return: List of mode(s) if not numbers: return [] count = Counter(numbers) max_frequency = max(count.values()) modes = [key for key, value in count.items() if value == max_frequency] return modes"},{"question":"Write a function to print all integers from 1 to n in ascending order, but with a twist: for multiples of 3 print \\"Fizz\\", for multiples of 5 print \\"Buzz\\", and for multiples of both 3 and 5, print \\"FizzBuzz\\". If the number is not a multiple of 3 or 5, print the number itself.","solution":"def fizz_buzz(n): Prints integers from 1 to n with the following rules: - Prints \\"Fizz\\" for multiples of 3. - Prints \\"Buzz\\" for multiples of 5. - Prints \\"FizzBuzz\\" for multiples of both 3 and 5. - Prints the number itself if it is not a multiple of 3 or 5. result = [] for i in range(1, n+1): if i % 3 == 0 and i % 5 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return result"},{"question":"Write a function to solve the following problem: given an integer array \`nums\` and an integer target, return the indices of the two numbers such that they add up to the target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.","solution":"def two_sum(nums, target): Find the indices of two numbers in nums such that they add up to the target. :param nums: List of integers. :param target: The target sum. :return: A list containing the indices of the two numbers. num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index"},{"question":"Write a function to return the number of steps required to reach the target number using the least steps. Assume the numbers on the number line do not loop (i.e., there is no wrap-around behavior).","solution":"def min_steps_to_target(start, target): Returns the minimum number of steps to reach the target number from the start number on a number line. Assumes steps in either direction (positive or negative) are equally allowed. return abs(target - start)"},{"question":"Write a function to find a person by name in a list of dictionaries. Each dictionary represents a person with keys for 'name' and 'age'. The function should return the first dictionary where the 'name' key matches the input name. If no dictionary is found with that name, the function should return \\"Person not found\\".","solution":"def find_person_by_name(people, name): Finds a person by name in a list of dictionaries. Args: people (list): List of dictionaries, each containing 'name' and 'age'. name (str): The name of the person to search for. Returns: dict or str: The first dictionary with the matching 'name', or \\"Person not found\\" if no match is found. for person in people: if person.get('name') == name: return person return \\"Person not found\\""},{"question":"Write a function to detect if a string has all unique characters. The function should return True if all characters in the string are unique, otherwise False. If the string contains more than 128 characters, the function should return False immediately. This is because there are only 128 unique ASCII characters.","solution":"def has_all_unique_characters(string): Check if a string has all unique characters. :param string: str, input string to check :return: bool, True if all characters are unique, else False if len(string) > 128: return False char_set = set() for char in string: if char in char_set: return False char_set.add(char) return True"},{"question":"Write a function to sort a given array in ascending order.","solution":"def sort_array(arr): Returns the sorted array in ascending order. return sorted(arr)"},{"question":"Write a function to find the maximum subarray sum in the given array. The function should operate in O(n) complexity, preferably using Kadane's algorithm.","solution":"def max_subarray_sum(arr): Returns the sum of the maximum subarray in the given array. Uses Kadane's algorithm to find the maximum subarray sum in O(n) time complexity. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function to get all the free memory using the psutil library in Python.","solution":"import psutil def get_free_memory(): Returns the amount of free memory in bytes. memory_info = psutil.virtual_memory() return memory_info.free"},{"question":"Write a function to find the smallest element in a 2D array.","solution":"def find_smallest_element(matrix): Returns the smallest element in a 2D array. if not matrix or not matrix[0]: raise ValueError(\\"The matrix must be non-empty\\") smallest = float('inf') for row in matrix: for element in row: if element < smallest: smallest = element return smallest"},{"question":"Write a function to check if a given integer is a power of three. A number is a power of three if it can be expressed as 3^k where k is a non-negative integer.","solution":"def is_power_of_three(n): Returns True if the given integer n is a power of three, otherwise False. if n <= 0: return False while n % 3 == 0: n //= 3 return n == 1"},{"question":"Write a function to count the number of occurrences of a specific integer in an array of integers.","solution":"def count_occurrences(arr, target): Counts the number of occurrences of target integer in the array arr. count = 0 for num in arr: if num == target: count += 1 return count"},{"question":"Create a function that takes an array and a number as a parameter. The function should return the sum of the array elements that are greater than the given number.","solution":"def sum_greater_than(arr, num): Returns the sum of the array elements that are greater than the given number. Parameters: arr (list): List of numbers. num (int or float): The number to compare against. Returns: int or float: Sum of elements greater than the given number. return sum(x for x in arr if x > num)"},{"question":"Create a function that takes an integer as input and returns the sum of all its digits. If the input is negative, return the sum of the digits ignoring the negative sign.","solution":"def sum_of_digits(n): Returns the sum of all digits of the integer n. If n is negative, the negative sign is ignored. n = abs(n) # Ignore the negative sign if present return sum(int(digit) for digit in str(n)) # Convert to string to iterate over digits"},{"question":"Create a function that receives an integer list as an argument and returns a list that only contains elements which are greater than the average of the input list. The function should handle any list size, and the average should be calculated accurately to two decimal places.","solution":"def above_average(numbers): Returns a list of elements from the input list that are greater than the average of the input list. if not numbers: return [] average = round(sum(numbers) / len(numbers), 2) result = [num for num in numbers if num > average] return result"},{"question":"Create a function that inputs a list of integers, and returns the sum of every third element of the list.","solution":"def sum_every_third(lst): Returns the sum of every third element of the list. return sum(lst[i] for i in range(2, len(lst), 3))"},{"question":"Create a function that takes a list of integers as input and returns the sum of all even numbers in the list. If the number at any index is divisible by 5, you should skip adding it to the sum. If there are no even numbers or the list is empty, return 0. How should I approach this problem in Python?","solution":"def sum_of_even_numbers(lst): Returns the sum of all even numbers in the list that are not divisible by 5. if not lst: return 0 return sum(num for num in lst if num % 2 == 0 and num % 5 != 0)"},{"question":"Create a function that takes in a string and returns the count of uppercase vowels in the string.","solution":"def count_uppercase_vowels(s): Returns the count of uppercase vowels in the given string. vowels = {'A', 'E', 'I', 'O', 'U'} return sum(1 for char in s if char in vowels)"},{"question":"Create a function that accepts a variable number of arguments and returns their sum. If no arguments are provided, the function should return 0. This function should also ensure that only numeric arguments are added together.","solution":"def sum_numbers(*args): Returns the sum of all numeric arguments. If no arguments are provided, it returns 0. Only numeric arguments are included in the sum. return sum(arg for arg in args if isinstance(arg, (int, float)))"},{"question":"Create a function that calculates the sum of all even numbers between two integers, inclusive. The function should only consider even numbers and ignore any odd numbers in between. If the first number is greater than the second, the function should return -1.","solution":"def sum_even_numbers(a, b): Calculates the sum of all even numbers between two integers a and b, inclusive. If a > b, the function returns -1. if a > b: return -1 if a % 2 != 0: a += 1 if b % 2 != 0: b -= 1 sum_even = 0 for number in range(a, b + 1, 2): sum_even += number return sum_even"},{"question":"Create a function that takes in a list of values and returns True if all elements in the list are even, and False otherwise.","solution":"def all_even(lst): Returns True if all elements in the list are even, otherwise returns False. return all(x % 2 == 0 for x in lst)"},{"question":"Create a function that prints each word in a sentence in a new line but also counts and returns the total number of words in the sentence. The sentence can contain words separated by spaces, and you should handle multiple spaces between words.","solution":"def print_words_and_count(sentence): Prints each word in a new line and returns the total number of words in the sentence. Ignores multiple spaces between words. words = sentence.split() for word in words: print(word) return len(words)"},{"question":"Create a function that takes a string as input and returns the length of the longest common subsequence (LCS) between the input string and its reverse.","solution":"def longest_common_subsequence(s): Returns the length of the longest common subsequence (LCS) between the input string and its reverse. # Reverse the input string rev_s = s[::-1] n = len(s) # Create a 2D array to store the lengths of LCS dp = [[0] * (n + 1) for _ in range(n + 1)] # Fill the 2D array for i in range(1, n + 1): for j in range(1, n + 1): if s[i - 1] == rev_s[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # The length of the longest common subsequence is in dp[n][n] return dp[n][n]"},{"question":"Create a function that takes an array of integers, and returns the sum of all unique elements in the array. A unique element is defined as an element that appears only once in the array.","solution":"def sum_of_unique_elements(arr): Returns the sum of all unique elements in the array. Unique elements are those which appear exactly once. from collections import Counter element_count = Counter(arr) unique_sum = sum(key for key, count in element_count.items() if count == 1) return unique_sum"},{"question":"Create a function that adds an element and its frequency counter to a dictionary. If the element already exists in the dictionary, increment its frequency count. If the element does not exist, add it to the dictionary with a frequency count of 1.","solution":"def add_element_to_freq_dict(freq_dict, element): Adds an element and its frequency counter to a dictionary. If the element already exists in the dictionary, increment its frequency count. If the element does not exist, add it to the dictionary with a frequency count of 1. Parameters: freq_dict (dict): The dictionary to update. element: The element to add or update in the dictionary. Returns: dict: The updated dictionary with the element's frequency count updated. if element in freq_dict: freq_dict[element] += 1 else: freq_dict[element] = 1 return freq_dict"},{"question":"Create a function that accepts two integers and returns their sum, but with a twist. The function should also print out the operation it's performing (in this case, addition) before it returns the result. Add comments above your function to explain what each section of the code does.","solution":"def add_with_print(a, b): Prints the operation and returns the sum of a and b. Parameters: a (int): The first integer. b (int): The second integer. Returns: int: The sum of a and b. # Print the addition operation print(f\\"Adding {a} and {b}\\") # Return the sum of a and b return a + b"},{"question":"Create a function that takes in two arrays of the same length and returns a new array containing the sum of the two input arrays' corresponding elements.","solution":"def sum_arrays(arr1, arr2): Takes in two arrays of the same length and returns a new array containing the sum of the two input arrays' corresponding elements. if len(arr1) != len(arr2): raise ValueError(\\"Input arrays must have the same length\\") return [arr1[i] + arr2[i] for i in range(len(arr1))]"},{"question":"Create a function that takes an array of integers and returns a new array with each element multiplied by 2.","solution":"def multiply_by_two(arr): Returns a new array with each element in the original array multiplied by 2. Parameters: arr (list of int): The array of integers to be multiplied. Returns: list of int: A new array with each element multiplied by 2. return [x * 2 for x in arr]"},{"question":"Create a function that takes a list of integers and returns a new list with the integers sorted in ascending order. Use Python as the programming language.","solution":"def sort_integers(int_list): Returns a new list with the integers sorted in ascending order. return sorted(int_list)"},{"question":"Create a function that takes a list of strings and returns a list of words that have a length greater than or equal to a specified minimum length.","solution":"def filter_words_by_length(words, min_length): Filters the words in the list that have a length greater than or equal to min_length. Parameters: words (list): A list of strings. min_length (int): The minimum length of the words to be included in the output list. Returns: list: A list of words with length greater than or equal to min_length. return [word for word in words if len(word) >= min_length]"},{"question":"Create a function that takes a list of integers and returns a tuple containing the sum and the product of all the numbers in the list.","solution":"def sum_and_product(numbers): Returns a tuple containing the sum and the product of all the numbers in the list. if not numbers: return (0, 0) total_sum = sum(numbers) total_product = 1 for num in numbers: total_product *= num return (total_sum, total_product)"},{"question":"Create a function that takes a single integer as an input and returns its Fibonacci sequence value. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the previous two. For example, the first five numbers in the sequence are 0, 1, 1, 2, 3. How can we achieve this in Python?","solution":"def fibonacci(n): Returns the Fibonacci sequence value at the n-th position (0-indexed). Parameters: n (int): The position in the Fibonacci sequence (0-indexed). Returns: int: The Fibonacci sequence value at the nth position. if n < 0: return \\"Input should be a non-negative integer.\\" if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for i in range(2, n+1): a, b = b, a+b return b"},{"question":"Create a function that takes an integer \`n\` as input and prints \\"Hello World\\" \`n\` times.","solution":"def print_hello_world(n): Prints \\"Hello World\\" n times. for _ in range(n): print(\\"Hello World\\")"},{"question":"Create a function that receives a list of integers and returns a tuple with the sum of elements, the average, the minimum value, and the maximum value.","solution":"def list_statistics(numbers): Given a list of integers, returns a tuple containing: - the sum of the elements - the average of the elements - the minimum value in the list - the maximum value in the list :param numbers: List[int] :return: Tuple[int, float, int, int] if not numbers: # handling empty list return (0, 0.0, None, None) total = sum(numbers) avg = total / len(numbers) min_val = min(numbers) max_val = max(numbers) return (total, avg, min_val, max_val)"},{"question":"Create a function that transforms a string into the Morse code equivalent. Each character in the string should be converted to its corresponding Morse code, separated by spaces. For example, the string \\"hello\\" should be converted to \\".... . .-.. .-.. ---\\". The Morse code for the characters 'a' through 'z' are provided in the dictionary below.","solution":"MORSE_CODE_DICT = { 'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..' } def string_to_morse(string): Transforms a string into the Morse code equivalent. :param string: String to be converted (lowercase expected) :return: Morse code representation of the string return ' '.join(MORSE_CODE_DICT[char] for char in string if char in MORSE_CODE_DICT)"},{"question":"Create a function that checks if a given number is a perfect square (e.g., 9, 16, 25, 36, etc.). If the number is a perfect square, return \`True\`, otherwise, return \`False\`.","solution":"def is_perfect_square(n): Checks if a given number n is a perfect square. Parameters: n (int): The number to check. Returns: bool: True if n is a perfect square, False otherwise. if n < 0: return False root = int(n**0.5) return root * root == n"},{"question":"Create a function that generates a list of all possible substrings from a given string in Python. A substring is a contiguous segment of a string. For example, for the input \\"abc\\", the function should return [\\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", \\"abc\\"].","solution":"def generate_substrings(s): Returns a list of all possible substrings of the given string. Args: s (str): The input string. Returns: list: A list of all possible substrings of the input string. substrings = [] for i in range(len(s)): for j in range(i + 1, len(s) + 1): substrings.append(s[i:j]) return substrings"},{"question":"Create a function that returns the middle index of an array. If the array has an even number of elements, return the lower middle index.","solution":"def middle_index(arr): Returns the middle index of the array. If the array has an even number of elements, returns the lower middle index. return (len(arr) - 1) // 2"},{"question":"Create a function that calculates the factorial of a number. The function should handle large numbers efficiently by using a loop. Additionally, include a check function to validate the correctness of the factorial function with provided data points.","solution":"def factorial(n): Returns the factorial of the given number n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") result = 1 for i in range(2, n + 1): result *= i return result def check_factorial(): Validates the correctness of the factorial function with known data points. known_values = { 0: 1, 1: 1, 2: 2, 3: 6, 4: 24, 5: 120, 6: 720, 7: 5040, 8: 40320, 9: 362880, 10: 3628800 } for n, expected in known_values.items(): assert factorial(n) == expected, f\\"Factorial of {n} should be {expected}\\" print(\\"All test cases passed.\\")"},{"question":"Create a function that determines if a given number is a prime number or not, and print the results. If the number is not a prime number, then find and print the smallest prime factor of the number. If the number is a prime number, then print a message indicating that the number is prime.","solution":"def is_prime(n): Determines if a number n is a prime number. If n is not a prime number, return the smallest prime factor. If n is a prime number, return 'Prime'. Returns None for numbers less than 2 as they are not considered prime numbers. if n < 2: return None if n == 2: return 'Prime' if n % 2 == 0: return 2 max_divisor = int(n**0.5) + 1 for d in range(3, max_divisor, 2): if n % d == 0: return d return 'Prime'"},{"question":"Create a function that accepts an array of numbers and returns a new array with all the even numbers at the end while maintaining the relative order among the numbers.","solution":"def move_evens_to_end(arr): Returns a new array with all the even numbers at the end while maintaining the relative order among the numbers. even_numbers = [x for x in arr if x % 2 == 0] odd_numbers = [x for x in arr if x % 2 != 0] return odd_numbers + even_numbers"},{"question":"Create a function that determines the maximum value between two numbers without using any comparison or conditional operators.","solution":"def max_value(a, b): Determines the maximum value between two numbers without using any comparison or conditional operators. Returns the maximum value. return (a + b + abs(a - b)) // 2"},{"question":"Create a function that takes an integer \`n\` and returns the smallest even number greater than or equal to \`n\`. If \`n\` is already even, return \`n\`. If \`n\` is odd, return the next even number.","solution":"def smallest_even_number(n): Returns the smallest even number greater than or equal to n. If n is already even, return n. If n is odd, return the next even number. if n % 2 == 0: return n else: return n + 1"},{"question":"Create a function that takes an array of integers as input and returns the index of the first occurrence of the largest number in the array. If there are multiple occurrences of the largest number, return the index of the first occurrence.","solution":"def index_of_largest(arr): Returns the index of the first occurrence of the largest number in the array. If there are multiple occurrences of the largest number, it returns the index of the first occurrence. :param arr: List of integers :return: Integer index of the first occurrence of the largest number if not arr: return -1 # If the list is empty, return -1 largest_num = max(arr) return arr.index(largest_num)"},{"question":"Create a function that takes a string as an argument and returns the string with the first and last characters removed.","solution":"def remove_first_and_last_characters(s): Returns the string with the first and last characters removed. If the string has fewer than 2 characters, returns an empty string. if len(s) < 2: return \\"\\" return s[1:-1]"},{"question":"Create a function that takes in one parameter: an array of numbers \`nums\`. The function should return the maximum sum of a contiguous subarray within the \`nums\` array. This is a classic problem known as the \\"Maximum Subarray Problem\\".","solution":"def max_subarray_sum(nums): Returns the maximum sum of a contiguous subarray within the nums array. if not nums: return 0 current_max = nums[0] global_max = nums[0] for num in nums[1:]: current_max = max(num, current_max + num) global_max = max(global_max, current_max) return global_max"},{"question":"Create a function that can calculate the sum of all numbers from 1 to n using recursion. Additionally, the function should be able to handle large numbers efficiently. To make this a challenge, you should use a technique to store intermediate results to avoid redundant computations.","solution":"def sum_to_n(n, memo={}): Returns the sum of all numbers from 1 to n using recursion and memoization. if n in memo: return memo[n] if n == 1: return 1 result = n + sum_to_n(n - 1, memo) memo[n] = result return result"},{"question":"Create a function that takes an integer as an input and returns a new integer that is the reverse of the input. If the input is negative, the function should return an error message. The function should also handle large integers efficiently. Consider Python as the primary language.","solution":"def reverse_integer(n): Returns the reverse of the given integer if it is non-negative. If the integer is negative, returns an error message. if n < 0: return \\"Error: Negative numbers are not allowed\\" reversed_num = int(str(n)[::-1]) return reversed_num"},{"question":"Create a function that takes two strings, s1 and s2, and returns true if s1 can be rotated to match s2 and false otherwise.","solution":"def can_rotate_to_match(s1, s2): Returns True if s1 can be rotated to match s2, otherwise returns False. if len(s1) != len(s2): return False return s2 in (s1 + s1)"},{"question":"Create a function that takes two integers as parameters and returns the sum of all integers between and including them. For example, if the function is given the numbers 1 and 4, it should return 10 (1 + 2 + 3 + 4).","solution":"def sum_between(a, b): Returns the sum of all integers between and including a and b. if a > b: a, b = b, a return sum(range(a, b + 1))"},{"question":"Create a function that takes an integer as a parameter and returns a string with all the consecutive numbers in the range of 1 to the provided integer, separated by a hyphen and sorted in ascending order. For example, if the input is 10, the function should return the string \\"1-2-3-4-5-6-7-8-9-10\\".","solution":"def consecutive_numbers(n): Returns a string with all consecutive numbers from 1 to n, separated by hyphens. return '-'.join(str(i) for i in range(1, n + 1))"},{"question":"Create a function that takes a string as input and returns a new string in which each character is repeated once.","solution":"def repeat_characters(input_string): This function takes a string as input and returns a new string with each character repeated once. return ''.join([char * 2 for char in input_string])"},{"question":"Create a function that checks if a string contains all unique characters. You can assume that the input string only contains lowercase letters a-z.","solution":"def has_unique_characters(s): Returns True if the string 's' contains all unique characters, False otherwise. Assumes that the input string only contains lowercase letters a-z. return len(set(s)) == len(s)"},{"question":"Create a function that takes an array of integers as input and returns the number of pairs whose sum is divisible by 3.","solution":"def count_pairs_divisible_by_three(arr): Returns the count of pairs in the array whose sum is divisible by 3. count = 0 n = len(arr) for i in range(n): for j in range(i + 1, n): if (arr[i] + arr[j]) % 3 == 0: count += 1 return count"},{"question":"Create a function that takes in a variable number of arguments and returns a list of those arguments.","solution":"def collect_args(*args): Returns a list of all received arguments. return list(args)"},{"question":"Create a function that takes two input strings, strips any extra spaces, converts them to uppercase, and then checks if one string is a substring of the other. The function should return True if the converted strings match exactly, or if one is a substring of the other, and False otherwise.","solution":"def check_substring(str1, str2): This function takes two input strings, strips any extra spaces, converts them to uppercase, and checks if one string is a substring of the other. Returns True if one is a substring of the other or they match exactly, and False otherwise. clean_str1 = str1.strip().upper() clean_str2 = str2.strip().upper() return clean_str1 == clean_str2 or clean_str1 in clean_str2 or clean_str2 in clean_str1"},{"question":"Create a function that takes a string as input and returns a new string with all the vowels in uppercase and all the consonants in lowercase. Please provide a detailed explanation of your code solution.","solution":"def transform_string(s): Transforms the input string such that all vowels are in uppercase and all consonants are in lowercase. Parameters: s (str): The input string to be transformed. Returns: str: The transformed string with vowels in uppercase and consonants in lowercase. vowels = \\"aeiou\\" result = [] for char in s: if char.lower() in vowels: result.append(char.upper()) else: result.append(char.lower()) return ''.join(result)"},{"question":"Create a function that takes an array and returns an array of all its subsets, including the empty set and the array itself. The function should avoid using any built-in methods or properties that directly generate subsets. Instead, it should generate subsets using array manipulation techniques.","solution":"def generate_subsets(arr): Returns an array of all subsets of the given array. result = [] def backtrack(start, path): # Append current subset to the result result.append(path) # Generate all possible subsets starting with each element for i in range(start, len(arr)): backtrack(i + 1, path + [arr[i]]) backtrack(0, []) return result"},{"question":"Create a function that takes two integer lists as inputs, multiplies the elements of the same positions together, and returns a new list with the results.","solution":"def multiply_lists(list1, list2): Multiplies the elements of the same positions in two lists and returns a new list with the results. Assumes the two lists are of the same length. Args: list1 (list of int): The first list of integers. list2 (list of int): The second list of integers. Returns: list of int: A new list containing the products of the corresponding elements. return [a * b for a, b in zip(list1, list2)]"},{"question":"Create a function that takes a positive integer N as input, and prints the Nth Fibonacci number. The function should have a time complexity of O(log N) and a space complexity of O(1).","solution":"def fibonacci(n): Returns the Nth Fibonacci number where n is a positive integer. Uses matrix exponentiation to achieve O(log N) time complexity. if n <= 0: return 0 elif n == 1: return 1 def matrix_mult(A, B): Multiplies two 2x2 matrices A and B return [[A[0][0] * B[0][0] + A[0][1] * B[1][0], A[0][0] * B[0][1] + A[0][1] * B[1][1]], [A[1][0] * B[0][0] + A[1][1] * B[1][0], A[1][0] * B[0][1] + A[1][1] * B[1][1]]] def matrix_pow(mat, power): Performs matrix exponentiation of mat to the power of power result = [[1, 0], [0, 1]] # Identity Matrix base = mat while power: if power % 2 == 1: result = matrix_mult(result, base) base = matrix_mult(base, base) power //= 2 return result # The transformation matrix T = [[1, 1], [1, 0]] # Find the (n-1)th power of the transformation matrix T_n_minus_1 = matrix_pow(T, n-1) # The Nth fibonacci number is the top left element of the resultant matrix return T_n_minus_1[0][0]"},{"question":"Create a function that determines the longest consecutive subsequence in a given sequence of integers and returns the length of this longest subsequence. For example, in the sequence [1, 9, 3, 10, 4, 20, 2], the longest consecutive subsequence is [1, 2, 3, 4] with a length of 4. This function should be able to handle sequences of varying lengths and may contain negative numbers.","solution":"def longest_consecutive_subsequence(nums): Returns the length of the longest consecutive subsequence in the list nums. Parameters: nums (List[int]): A list of integers. Returns: int: Length of the longest consecutive subsequence. if not nums: return 0 nums_set = set(nums) longest_streak = 0 for num in nums: if num - 1 not in nums_set: current_num = num current_streak = 1 while current_num + 1 in nums_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Create a function that calculates the sum of all numbers in a given list. If the list contains any non-numeric values, they should be ignored. How can this be done in Python?","solution":"def sum_numeric_values(lst): Returns the sum of all numeric values in the given list. Non-numeric values are ignored. total = 0 for item in lst: if isinstance(item, (int, float)): total += item return total"},{"question":"Create a function that takes three parameters, and returns their sum.","solution":"def sum_three_numbers(a, b, c): Returns the sum of a, b, and c. return a + b + c"},{"question":"Create a function that can identify the most frequent element in a list and return it. If there are multiple elements with the same highest frequency, return all of them in the order they first appeared.","solution":"from collections import Counter def most_frequent_elements(lst): Returns the most frequent element(s) in a list. If there are multiple elements with the same highest frequency, it returns all of them in the order they first appeared. if not lst: return [] freq_counter = Counter(lst) max_freq = max(freq_counter.values()) most_frequent = [] for element in lst: if freq_counter[element] == max_freq and element not in most_frequent: most_frequent.append(element) return most_frequent"},{"question":"Create a function that will generate all Armstrong numbers within a given range of positive integers. The function should return a list of these numbers. An Armstrong number of three digits is an integer such that the sum of the cubes of its digits is equal to the number itself. For example, 153 is an Armstrong number since 1^3 + 5^3 + 3^3 = 153.","solution":"def get_armstrong_numbers_in_range(start, end): Returns a list of Armstrong numbers within the given range (inclusive). An Armstrong number of three digits is an integer such that the sum of the cubes of its digits is equal to the number itself. def is_armstrong_number(num): digits = [int(d) for d in str(num)] return num == sum(d ** 3 for d in digits) return [num for num in range(start, end + 1) if is_armstrong_number(num)]"},{"question":"Create a function that returns a list of squares of all odd numbers in a given list of integers.","solution":"def squares_of_odd_numbers(numbers): Returns a list of squares of all odd numbers in the given list of integers. return [num ** 2 for num in numbers if num % 2 != 0]"},{"question":"Create a function that takes a vector of integers as input and returns a vector of strings as output. The function should convert each integer in the vector to its corresponding Roman numeral representation. The function should handle integers in the range 1 to 1000 inclusive.","solution":"def int_to_roman(num): Convert an integer to a Roman numeral. Args: num (int): The integer to be converted. Range is 1 to 1000. Returns: str: The Roman numeral representation of the input integer. val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = '' i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syb[i] num -= val[i] i += 1 return roman_num def vector_to_roman(vector): Convert a vector of integers to a vector of Roman numerals. Args: vector (list): A list of integers. Returns: list: A list of the Roman numeral representations of the integers in the vector. return [int_to_roman(num) for num in vector]"},{"question":"Create a function that returns \\"Hello!\\" when called.","solution":"def say_hello(): Returns the string \\"Hello!\\". return \\"Hello!\\""},{"question":"Create a function that takes two positive integers n1 and n2 as arguments and returns True if the sum of the digits of n1 is less than or equal to the sum of the digits of n2, and False otherwise.","solution":"def compare_digit_sums(n1, n2): Returns True if the sum of the digits of n1 is less than or equal to the sum of the digits of n2, and False otherwise. sum_n1 = sum(int(digit) for digit in str(n1)) sum_n2 = sum(int(digit) for digit in str(n2)) return sum_n1 <= sum_n2"},{"question":"Create a function that returns the factorial of a number recursively in Python. The function should handle the case where the input number is negative by returning an appropriate error message.","solution":"def factorial(n): Returns the factorial of a number n recursively. Handles negative inputs by returning an appropriate error message. if n < 0: return \\"Error: Negative input not allowed.\\" elif n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Create a function that takes two lists as input and returns a new list containing only the common elements between the two lists.","solution":"def common_elements(list1, list2): Returns a list of common elements between list1 and list2. return list(set(list1) & set(list2))"},{"question":"Create a function that accepts two parameters and returns the larger of the two. If the two numbers are the same, return any of the two.","solution":"def max_of_two(a, b): Returns the larger of the two numbers. If the two numbers are the same, return any of the two. return a if a >= b else b"},{"question":"Create a function that takes in a list of strings as input and returns the string with the largest length. If there are multiple strings with the same maximum length, return the first one encountered in the list. If the list is empty, return an empty string.","solution":"def longest_string(strings): Returns the string with the largest length from the list of strings. If there are multiple strings with the same maximum length, returns the first one encountered. If the list is empty, returns an empty string. if not strings: return \\"\\" max_length = 0 longest_str = \\"\\" for s in strings: if len(s) > max_length: max_length = len(s) longest_str = s return longest_str"},{"question":"Create a function that converts a given string into a list of comment blocks in Python. Each comment block is a string that starts with a hash (#) and spans to the end of the line. You should ignore any leading and trailing whitespace, and remove empty strings from the resulting list.","solution":"def string_to_comment_blocks(input_string): Converts a given string into a list of comment blocks in Python. Each comment block starts with a hash (#) and spans to the end of the line. The function ignores any leading and trailing whitespace and removes empty strings. Args: input_string (str): The input string to be converted into comment blocks. Returns: list: A list of comment blocks. # Split the input string by lines lines = input_string.split('n') # Create a list of comment blocks comment_blocks = ['# ' + line.strip() for line in lines if line.strip()] return comment_blocks"},{"question":"Create a function that checks if all the numbers in a list are integers and returns True if they are, and False otherwise.","solution":"def all_integers(lst): Checks if all the numbers in a list are integers. Parameters: lst (list): The list to check. Returns: bool: True if all elements are integers, False otherwise. return all(isinstance(x, int) for x in lst)"},{"question":"Create a function that takes an integer n as a parameter and returns the sum of all integers from 1 to n using iteration.","solution":"def sum_upto_n(n): Returns the sum of all integers from 1 to n using iteration. total = 0 for i in range(1, n + 1): total += i return total"},{"question":"Create a function that takes the number of sides of a polygon and returns the area of the polygon. The function should assume that the polygon is regular (all sides and angles are equal).","solution":"import math def area_of_polygon(n, s): Returns the area of a regular polygon with n sides, each of length s. :param n: Number of sides :param s: Length of each side :return: Area of the polygon if n < 3: raise ValueError(\\"Polygon must have at least 3 sides\\") # Area formula for a regular polygon area = (n * s ** 2) / (4 * math.tan(math.pi / n)) return area"},{"question":"Create a function that takes two numbers as input and returns their sum. If the sum is even, return the sum multiplied by 2. If the sum is odd, return the sum as is.","solution":"def custom_add(a, b): Takes two numbers as input and returns their sum. If the sum is even, returns the sum multiplied by 2. If the sum is odd, returns the sum as is. sum_ = a + b if sum_ % 2 == 0: return sum_ * 2 else: return sum_"},{"question":"Create a function that accepts three arguments: a list of integers, a start index, and an end index. The function should return the count of integers within the specified range that are multiples of both 5 and 7.","solution":"def count_multiples_of_5_and_7(numbers, start, end): Returns the count of integers within the specified range that are multiples of both 5 and 7. Parameters: - numbers (list of int): List of integers - start (int): Start index of the range (inclusive) - end (int): End index of the range (exclusive) Returns: - int: Count of multiples of both 5 and 7 within the specified range count = 0 for i in range(start, end): if numbers[i] % 35 == 0: count += 1 return count"},{"question":"Create a function that takes a string and returns the longest palindrome that can be formed by inserting characters at the end of the string. For example, given the string \\"dog\\", it should return \\"dogod\\".","solution":"def longest_palindrome(s): Returns the longest palindrome that can be formed by inserting characters at the end of the string. def is_palindrome(s): return s == s[::-1] if is_palindrome(s): return s n = len(s) for i in range(n): if is_palindrome(s[i:]): prefix = s[:i] return s + prefix[::-1] return s"},{"question":"Create a function that calculates Fibonacci sequence up to n terms using an iterative approach in Python. Also, write a brief explanation of the code.","solution":"def fibonacci_sequence(n): Returns a list containing the Fibonacci sequence up to n terms. if n <= 0: return [] elif n == 1: return [0] sequence = [0, 1] while len(sequence) < n: next_value = sequence[-1] + sequence[-2] sequence.append(next_value) return sequence # Explanation: # 1. Check if n is 0 or negative, return an empty list. # 2. If n is 1, return a list with only the first Fibonacci number which is [0]. # 3. Start with the first two Fibonacci numbers [0, 1]. # 4. Use a while loop to generate the next Fibonacci numbers until the list contains n terms. # 5. Append the next Fibonacci number by summing the last two numbers in the list. # 6. Return the sequence containing n Fibonacci terms."},{"question":"Create a function that returns a list of Fibonacci numbers up to a given number 'n' using recursion.","solution":"def fibonacci_up_to_n(n, current_sequence=[0, 1]): Returns a list of Fibonacci numbers up to a given number 'n' using recursion. if current_sequence[-1] >= n: if current_sequence[-1] > n: return current_sequence[:-1] return current_sequence next_fib = current_sequence[-1] + current_sequence[-2] current_sequence.append(next_fib) return fibonacci_up_to_n(n, current_sequence)"},{"question":"Create a function that uses list comprehension to return a list of all prime numbers less than 100.","solution":"def is_prime(n): Helper function to check if a number n is a prime number. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def primes_less_than_100(): Returns a list of all prime numbers less than 100 using list comprehension. return [n for n in range(2, 100) if is_prime(n)]"},{"question":"Create a function that takes a list of strings and returns a new list containing the first character of each string in the input list. Additionally, if the first character is 'a' or 'A', the function should add the index of that string in the input list to the output list.","solution":"def first_char_with_index(input_list): Returns a list containing the first character of each string in the input list. If the first character is 'a' or 'A', the index of that string in the input list is added to the output list. result = [] for idx, string in enumerate(input_list): if string: first_char = string[0] result.append(first_char) if first_char.lower() == 'a': result.append(idx) return result"},{"question":"Create a function that takes a list of numbers and returns the list with each element multiplied by 2. For example, given the list \`[1, 2, 3]\`, the function should return \`[2, 4, 6]\`.","solution":"def double_list(numbers): Takes a list of numbers and returns the list with each element multiplied by 2. :param list numbers: List of numbers :return: List of numbers where each element is multiplied by 2 :rtype: list return [n * 2 for n in numbers]"},{"question":"Create a function that uses binary search to find a target value in a sorted list. If the target is found, return the index of the target in the list; otherwise, return -1. Ensure that your function handles cases where the target is not in the list or when the list is empty.","solution":"def binary_search(arr, target): Perform a binary search on a sorted list to find the index of the target. Parameters: arr (list): A sorted list of elements to search. target: The element to search for in the list. Returns: int: The index of the target element if found, otherwise -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Create a function that takes a list of integers and returns a new list with the elements sorted in ascending order and then remove duplicates.","solution":"def sort_and_remove_duplicates(lst): Returns a new list with elements sorted in ascending order and duplicates removed. return sorted(set(lst))"},{"question":"Create a function that takes two strings as input and return the longer string if they are not equal. If the strings are equal, return an empty string.","solution":"def compare_strings(str1, str2): Compares two strings and returns the longer one. If they are equal, returns an empty string. if str1 == str2: return \\"\\" return str1 if len(str1) > len(str2) else str2"},{"question":"Create a function that checks if all elements in a list are even numbers. Write a Python function named \`is_all_even\` that takes a list of integers as its parameter. The function should return \`True\` if every number in the list is even, and \`False\` otherwise. Include a simple check function to verify your solution.","solution":"def is_all_even(numbers): Returns True if all elements in the list are even numbers. Returns False otherwise. for num in numbers: if num % 2 != 0: return False return True"},{"question":"Create a function that takes a string as input and returns a new string with all duplicate characters removed. The order of the characters in the output should be the same as the original. You should not use any data structures other than strings. You should also optimize for time complexity.","solution":"def remove_duplicates(input_string): Returns a new string with all duplicate characters removed. The order of characters in the output will be the same as the original. seen = \\"\\" result = \\"\\" for char in input_string: if char not in seen: result += char seen += char return result"},{"question":"Create a function that takes a list of integers and removes all duplicates. The function should return a new list without duplicates.","solution":"def remove_duplicates(numbers): Takes a list of integers and removes all duplicates. Parameters: numbers (list of int): List of integers. Returns: list of int: A new list without duplicates. return list(dict.fromkeys(numbers))"},{"question":"Create a function that finds the longest sequence of consecutive ones in a binary string.","solution":"def longest_consecutive_ones(binary_string): Returns the length of the longest sequence of consecutive ones in a binary string. current_count = 0 max_count = 0 for char in binary_string: if char == '1': current_count += 1 max_count = max(max_count, current_count) else: current_count = 0 return max_count"},{"question":"Create a function that takes in two arrays of integers and returns true if the second array is a rotation of the first array, otherwise returns false. A rotation of an array means that the array has been shifted to the right by a number of positions.","solution":"def is_rotation(arr1, arr2): Returns True if arr2 is a rotation of arr1, otherwise returns False. if len(arr1) != len(arr2): return False concatenated = arr1 + arr1 return ' '.join(map(str, arr2)) in ' '.join(map(str, concatenated))"},{"question":"Create a function that takes a string as input and returns the count of each character in the string along with its case.","solution":"from collections import Counter def count_characters(s): Returns a dictionary with the count of each character in the string, including case sensitivity. return dict(Counter(s))"},{"question":"Create a function that takes a list as input and returns another list where the elements at even indices are sorted in ascending order, while the elements at odd indices remain unchanged.","solution":"def sort_even_indices(lst): Sorts the elements at even indices in ascending order while keeping the elements at odd indices unchanged. # Extract elements at even indices even_index_elements = [lst[i] for i in range(0, len(lst), 2)] # Sort those elements sorted_even_index_elements = sorted(even_index_elements) # Place sorted elements back into their positions sorted_list = lst[:] for idx, element in zip(range(0, len(lst), 2), sorted_even_index_elements): sorted_list[idx] = element return sorted_list"},{"question":"Create a function that takes a list of integers and returns a list containing the reversed order of those numbers. If the input list is empty, the function should return an empty list.","solution":"def reverse_list(lst): Returns a list with the elements of lst in reversed order. If lst is empty, returns an empty list. return lst[::-1]"},{"question":"Create a function that takes in an array of integers and returns the median of the array. The function should be able to handle both sorted and unsorted arrays, and should work efficiently for large arrays.","solution":"def find_median(arr): Returns the median of the array. Parameters: arr (list of int): The list of integers for which the median is to be found. Returns: float: The median value. # Sorting the array first arr_sorted = sorted(arr) n = len(arr_sorted) # If the length of the array is odd, return the middle element if n % 2 == 1: return arr_sorted[n // 2] # If the length of the array is even, return the average of the two middle elements else: mid1, mid2 = arr_sorted[n // 2 - 1], arr_sorted[n // 2] return (mid1 + mid2) / 2"},{"question":"Create a function that checks if the sum of the lengths of all strings in an array is greater than or equal to a given integer n. The function should return true if the condition is met, and false otherwise.","solution":"def is_sum_of_lengths_greater_or_equal(strings, n): Check if the sum of the lengths of all strings in the array is greater than or equal to n. :param strings: List of strings :param n: Integer to compare the sum of lengths with :return: True if the sum of lengths is greater than or equal to n, False otherwise total_length = sum(len(s) for s in strings) return total_length >= n"},{"question":"Create a function that prints all permutations of a given string. The function should take one parameter: a string. The permutations should be printed in lexicographic (alphabetical) order.","solution":"from itertools import permutations def print_permutations(s): Prints all permutations of the given string in lexicographic order. perm = sorted([''.join(p) for p in permutations(s)]) for p in perm: print(p)"},{"question":"Create a function that checks if a given graph is bipartite or not. A bipartite graph is a graph whose vertices can be colored using two colors such that no two adjacent vertices share the same color.","solution":"from collections import deque def is_bipartite(graph): Checks if the given graph is bipartite. The graph is represented as an adjacency list where graph[i] contains the list of nodes that node i is connected to. Parameters: graph (List[List[int]]): Adjacency list of the graph. Returns: bool: True if the graph is bipartite, False otherwise. n = len(graph) color = [-1] * n # -1 indicates that the node hasn't been colored yet. for start in range(n): if color[start] == -1: # This node hasn't been colored; perform BFS for this component. queue = deque([start]) color[start] = 0 # Start coloring with 0. while queue: node = queue.popleft() for neighbor in graph[node]: if color[neighbor] == -1: # If the neighbor hasn't been colored color[neighbor] = 1 - color[node] # Color with opposite color queue.append(neighbor) elif color[neighbor] == color[node]: # If neighbor is colored with same color return False return True"},{"question":"Create a function that converts a given string from snake_case to CamelCase.","solution":"def snake_to_camel(snake_str): Converts a given string from snake_case to CamelCase. components = snake_str.split('_') return ''.join(x.title() for x in components)"},{"question":"Create a function that takes in a list of integers and returns a list of strings representing the integers in binary format. Each string in the output list should be left-padded to ensure all binary representations have the same length, with leading zeroes as necessary. The padding length is determined by the number of bits required to represent the highest integer in the list.","solution":"def integers_to_binary(nums): Converts a list of integers to a list of binary strings, left-padded with zeroes to match the length of the longest binary representation. Args: nums (list of int): List of integers to convert. Returns: list of str: List of binary string representations of the integers. if not nums: return [] # Find the maximum number to determine the necessary length in bits max_num = max(nums) max_length = max_num.bit_length() # Convert each number to binary and left-pad with zeroes to match max_length return [bin(num)[2:].zfill(max_length) for num in nums]"},{"question":"Create a function that takes a string as input and returns a string where each character is replaced by the character that is two places ahead of it in the alphabet. If the character is a uppercase letter, keep it as uppercase, and similarly for lowercase letters. Non-alphabetical characters should not be changed.","solution":"def shift_characters(s): Takes a string and returns a string with each character shifted two places ahead in the alphabet. Non-alphabet characters remain unchanged. def shift_char(c): if 'a' <= c <= 'z': return chr(((ord(c) - ord('a') + 2) % 26) + ord('a')) elif 'A' <= c <= 'Z': return chr(((ord(c) - ord('A') + 2) % 26) + ord('A')) else: return c return ''.join(shift_char(c) for c in s)"},{"question":"Create a function that returns a string that says \\"Hello, World!\\".","solution":"def hello_world(): Returns a string that says 'Hello, World!'. return \\"Hello, World!\\""},{"question":"Create a function that will split a given string by a specified separator and return the parts as a list. For instance, if the string is \\"apple,banana,cherry\\" and the separator is \\",\\", it should return \`[\\"apple\\", \\"banana\\", \\"cherry\\"]\`. The function should handle cases where the separator is not found in the string, in which case it returns a list containing the original string as the only element.","solution":"def split_string(input_string, separator): Splits the input_string by the given separator and returns the parts as a list. Args: input_string (str): The string to be split. separator (str): The character to split the string by. Returns: list: A list of parts after splitting the input_string by the separator. return input_string.split(separator)"},{"question":"Create a function that accepts two parameters, \`a\` and \`b\`. The function should return the sum, difference, product, andquotient of \`a\` and \`b\` as separate return values.","solution":"def operations(a, b): Returns the sum, difference, product, and quotient of a and b. sum_val = a + b diff_val = a - b prod_val = a * b if b != 0: quot_val = a / b else: quot_val = None return sum_val, diff_val, prod_val, quot_val"},{"question":"Create a function that takes an array of integers as input and returns an array containing the second largest and second smallest numbers from the input array.","solution":"def second_largest_and_smallest(arr): Returns an array containing the second largest and second smallest numbers from the input array. if len(arr) < 2: raise ValueError(\\"Array must contain at least two unique numbers\\") unique_numbers = list(set(arr)) if len(unique_numbers) < 2: raise ValueError(\\"Array must contain at least two unique numbers\\") unique_numbers.sort() second_smallest = unique_numbers[1] second_largest = unique_numbers[-2] return [second_smallest, second_largest]"},{"question":"Create a function that takes in a string, and returns True if all the words in the string are unique, and False otherwise.","solution":"def all_unique_words(s): Returns True if all words in the string are unique, False otherwise. Parameters: s (str): The input string. Returns: bool: True if all words are unique, False otherwise. words = s.split() return len(words) == len(set(words))"},{"question":"Create a function that takes a list of integers and returns a list of the integers that are divisible by 3. Use list comprehension to achieve this.","solution":"def divisible_by_three(numbers): Returns a list of integers from the input list that are divisible by 3. Args: numbers (list): A list of integers. Returns: list: A list of integers divisible by 3. return [num for num in numbers if num % 3 == 0]"},{"question":"Create a function that returns the Nth Fibonacci number. Your solution should be optimized for large N values.","solution":"def fibonacci(n): Returns the Nth Fibonacci number using an optimized iterative approach. if n <= 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Create a function that generates all possible combination of N bits, where each bit can be either 0 or 1.","solution":"def generate_bit_combinations(N): Generates all possible combinations of N bits. if N == 0: return [\\"\\"] smaller_combinations = generate_bit_combinations(N-1) return [\\"0\\" + combination for combination in smaller_combinations] + [\\"1\\" + combination for combination in smaller_combinations]"},{"question":"Create a function that returns the first occurrence of a duplicated substring in a given string using Python. If no duplication occurs, the function should return an empty string.","solution":"def first_duplicated_substring(s): Returns the first occurrence of a duplicated substring in a given string \`s\`. If no duplication occurs, returns an empty string. n = len(s) seen = set() for length in range(1, n): # Try all possible substring lengths for i in range(n - length + 1): substr = s[i:i + length] if substr in seen: return substr seen.add(substr) return \\"\\""},{"question":"Create a function that takes a 2D list (list of lists) and a target value. The function should return the indices of all occurrences of the target value in the 2D list.","solution":"def find_indices_2d(matrix, target): Returns the list of indices of all occurrences of the target value in the 2D list. Each index is represented as a tuple (row, column). Args: matrix (list of lists): The 2D list to search within. target: The value to search for in the 2D list. Returns: list of tuples: A list of tuples where each tuple represents the row and column index of an occurrence of the target value. indices = [] for i, row in enumerate(matrix): for j, value in enumerate(row): if value == target: indices.append((i, j)) return indices"},{"question":"Create a function that can take a string of text, remove any duplicate characters, and then return the result as a new string.","solution":"def remove_duplicates(text): Removes duplicate characters from the text and returns a new string. seen = set() result = [] for char in text: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Create a function that generates all unique combinations of a list of numbers using a backtracking algorithm. The function should be named \`generateCombinations\` and should take two parameters: a list of unique integers \`nums\` and an integer \`k\`. The function should return all possible combinations of length \`k\` from the list \`nums\` without repetition.","solution":"def generateCombinations(nums, k): def backtrack(start, combination): if len(combination) == k: result.append(list(combination)) return for i in range(start, len(nums)): combination.append(nums[i]) backtrack(i + 1, combination) combination.pop() result = [] backtrack(0, []) return result"},{"question":"Create a function that searches through a nested dictionary and returns the value of a specified key. If the key exists at multiple levels, the function should return all values associated with that key. The function should handle dictionaries with mixed types of values (integers, strings, lists, nested dictionaries, etc.).","solution":"def search_nested_dict(data, target_key): Searches through a nested dictionary and returns a list of values of the specified target_key. :param data: Dictionary to search through :param target_key: Target key to search for in the dictionary :return: List of values associated with the target_key result = [] def search(data, target_key): if isinstance(data, dict): for key, value in data.items(): if key == target_key: result.append(value) if isinstance(value, dict): search(value, target_key) elif isinstance(value, list): for item in value: if isinstance(item, dict): search(item, target_key) search(data, target_key) return result"},{"question":"Create a function that finds the maximum sum of continuous sub-array within a given array of integers.","solution":"def max_subarray_sum(arr): Finds the maximum sum of a continuous sub-array within a given array of integers. if not arr: return 0 max_ending_here = max_so_far = arr[0] for num in arr[1:]: max_ending_here = max(num, max_ending_here + num) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Create a function that calculates the median of a list of numbers. The median is the middle value in a sorted list of numbers. If the list has an even number of elements, the median is the average of the two middle numbers. For example, the median of [3, 1, 2, 4, 5] is 3, and for [3, 1, 4, 2] it is (2 + 3) / 2 = 2.5.","solution":"def median(numbers): Returns the median of a list of numbers. :param numbers: List of numerical values :return: Median value sorted_numbers = sorted(numbers) n = len(sorted_numbers) if n % 2 == 1: return sorted_numbers[n // 2] else: mid1 = sorted_numbers[n // 2 - 1] mid2 = sorted_numbers[n // 2] return (mid1 + mid2) / 2"},{"question":"Create a function that takes a list of integers as a parameter and returns the list of integers with their values in descending order.","solution":"def sort_descending(lst): Takes a list of integers and returns the list sorted in descending order. return sorted(lst, reverse=True)"},{"question":"Create a function that takes a list of numbers and returns the largest number in the list. If the list is empty, return None. If the list contains only one element, return that element.","solution":"def find_largest(numbers): Returns the largest number in the list. If the list is empty, return None. If the list contains only one element, return that element. if not numbers: return None return max(numbers)"},{"question":"Create a function that checks if a string contains the word \\"hello\\" ignoring case sensitivity.","solution":"def contains_hello(s): Check if the input string contains the word \\"hello\\" ignoring case sensitivity. return \\"hello\\" in s.lower()"},{"question":"Create a function that accepts an integer \`n\` and returns the \`n-th\` Fibonacci number using dynamic programming.","solution":"def fibonacci(n): Returns the n-th Fibonacci number using dynamic programming. if n < 0: raise ValueError(\\"Input should be a non-negative integer\\") if n == 0: return 0 if n == 1: return 1 fib = [0, 1] for i in range(2, n + 1): fib.append(fib[-1] + fib[-2]) return fib[n]"},{"question":"Create a function that returns the maximum sum of a contiguous subarray using Kadane's algorithm. Also, return the start and end indices of this subarray.","solution":"def max_subarray_sum(nums): Returns the maximum sum of a contiguous subarray using Kadane's algorithm. Also, returns the start and end indices of this subarray. :param nums: List[int] - A list of integers. :return: Tuple(int, int, int) - The maximum sum and the start and end indices of the subarray. max_sum = float('-inf') current_sum = 0 start_index = 0 end_index = 0 temp_start = 0 for i in range(len(nums)): current_sum += nums[i] if current_sum > max_sum: max_sum = current_sum start_index = temp_start end_index = i if current_sum < 0: current_sum = 0 temp_start = i + 1 return max_sum, start_index, end_index"},{"question":"Create a function that identifies the common elements between two input lists in Python. The function should take two lists as arguments and return a list of common elements. If there are no common elements, the function should return an empty list.","solution":"def common_elements(list1, list2): Returns a list of common elements between list1 and list2. return list(set(list1) & set(list2))"},{"question":"Create a function that takes an array of integers and returns an array of strings. Each element in the output array should be a string representation of the corresponding integer from the input array, indexed at 1 (i.e., the first element is at index 1, the second element is at index 2, etc.).","solution":"def integer_to_string_list(arr): Takes an array of integers and returns an array of strings. Each element in the output array should be a string representation of the corresponding integer from the input array, indexed at 1. :param arr: list of integers :return: list of strings return [str(num) for num in arr]"},{"question":"Create a function that takes a string as input and returns the number of unique characters in that string. The function should ignore case sensitivity (e.g., \\"Hello\\" and \\"hello\\" should be considered the same).","solution":"def unique_char_count(s): Returns the number of unique characters in the input string, ignoring case. return len(set(s.lower()))"},{"question":"Create a function that takes in two parameters, \`num_students\` and \`num_classes\`, and returns the number of students per class. If the division is not even, round the result down to the nearest whole number.","solution":"def students_per_class(num_students, num_classes): Returns the number of students per class, rounding down if necessary. return num_students // num_classes"},{"question":"Create a function that takes a string and outputs a dictionary with two keys: 'vowels' and 'consonants'. The function should count the number of vowels and consonants in the string. Vowels are 'a', 'e', 'i', 'o', 'u' (both lowercase and uppercase). Consonants are all alphabetic characters that are not vowels. The function should be case-insensitive.","solution":"def count_vowels_consonants(s): Returns a dictionary with the count of vowels and consonants in the input string. Args: s (str): Input string. Returns: dict: A dictionary with keys 'vowels' and 'consonants' and their respective counts. vowels_set = set('aeiouAEIOU') vowels_count = 0 consonants_count = 0 for char in s: if char.isalpha(): if char in vowels_set: vowels_count += 1 else: consonants_count += 1 return {'vowels': vowels_count, 'consonants': consonants_count}"},{"question":"Create a function that takes two parameters: a list of integers and a target sum. The function should return a list containing all the pairs of numbers from the input list that add up to the target sum. For example, if the function receives the list \`[2, 3, 5, 7, -1]\` and the target sum is \`8\`, it should return \`[(2, 6), (3, 5)]\`.","solution":"def find_pairs_with_sum(numbers, target): Returns a list of all pairs of numbers from the input list that add up to the target sum. :param numbers: List of integers :param target: Target sum :return: List of tuples, each containing a pair of numbers that add up to the target sum result = [] seen = set() for number in numbers: complement = target - number if complement in seen: result.append((complement, number)) seen.add(number) return result"},{"question":"Create a function that takes an integer \`n\` as input and returns the sum of the squares of the first \`n\` natural numbers. The function should be efficient and avoid unnecessary computations.","solution":"def sum_of_squares(n): Returns the sum of the squares of the first n natural numbers. # Using the formula for the sum of squares of the first n natural numbers. return n * (n + 1) * (2 * n + 1) // 6"},{"question":"Create a function that classifies square numbers from an array","solution":"import math def classify_square_numbers(arr): Takes an array of integers and returns a list of booleans where True indicates that the number at that position is a perfect square, and False otherwise. def is_square(n): if n < 0: return False root = int(math.sqrt(n)) return root * root == n return [is_square(num) for num in arr]"},{"question":"Create a function that takes a binary number as a string input and returns its decimal equivalent as an integer.","solution":"def binary_to_decimal(binary_str): Converts a binary number (as a string) to its decimal equivalent. decimal_number = int(binary_str, 2) return decimal_number"},{"question":"Create a function that takes in an array of integers as input and returns the second smallest unique integer in the array. If the array does not have a second smallest unique integer, return \`null\`.","solution":"def second_smallest_unique(arr): Returns the second smallest unique integer in the array. If the array does not have a second smallest unique integer, return None. unique_elements = list(set(arr)) if len(unique_elements) < 2: return None unique_elements.sort() return unique_elements[1] # Example usage: # arr = [4, 3, 4, 2, 1] # second_smallest_unique(arr) # should return 2"},{"question":"Create a function that takes in a list of integers and returns a list of the sums of adjacent elements. For example, given the input [1, 2, 3, 4], the function should return [3, 5, 7] because 1+2=3, 2+3=5, and 3+4=7.","solution":"def sum_adjacent_elements(lst): Returns a list of the sums of adjacent elements in the input list. return [lst[i] + lst[i + 1] for i in range(len(lst) - 1)]"},{"question":"Create a function that takes two arrays, arr1 and arr2, as parameters. The function should find the first element that is common to both arrays. If there is no common element, the function should return -1.","solution":"def find_first_common_element(arr1, arr2): Returns the first common element between two arrays. If no common element is found, returns -1. set_arr2 = set(arr2) # Convert arr2 to set for O(1) lookup times for element in arr1: if element in set_arr2: return element return -1"},{"question":"Create a function that accepts an array of integers and returns the product of the first and last elements in the array. If the array is empty, return 0. If the array has only one element, return that element.","solution":"def product_first_last(arr): Returns the product of the first and last elements in the array. If the array is empty, return 0. If the array has only one element, return that element. if len(arr) == 0: return 0 if len(arr) == 1: return arr[0] return arr[0] * arr[-1]"},{"question":"Create a function that takes two arrays as input, where one array contains the prices of goods and the other array contains the quantities of each good sold. Both arrays have the same length. The function should then calculate the total revenue generated by these sales, assuming that the revenue for a single item is the product of its price and quantity. The function should return the total revenue as a float.","solution":"def total_revenue(prices, quantities): Calculates the total revenue generated by sales of goods. :param prices: A list of floats representing the prices of goods. :param quantities: A list of integers representing the quantities sold. :return: The total revenue as a float. total = 0.0 for price, quantity in zip(prices, quantities): total += price * quantity return total"},{"question":"Create a function that takes two integers, a and b, and returns the sum of all integers between a and b (inclusive). If a is greater than b, return a message indicating that the sum cannot be calculated.","solution":"def sum_integers_between(a, b): Returns the sum of all integers between a and b (inclusive). If a is greater than b, returns a message indicating that the sum cannot be calculated. if a > b: return \\"Sum cannot be calculated because a is greater than b.\\" return sum(range(a, b + 1))"},{"question":"Create a function that reverses the order of words in a given sentence, while maintaining the original order of the letters within each word. For example, if the input is \\"Hello world\\", the output should be \\"world Hello\\".","solution":"def reverse_words(sentence): Reverses the order of words in a given sentence. Parameters: sentence (str): A sentence whose words need to be reversed. Returns: str: The sentence with words in reversed order. words = sentence.split() reversed_sentence = ' '.join(reversed(words)) return reversed_sentence"},{"question":"Create a function that takes a string as input and reverses the words in the string. The function should also reverse the individual characters in each word, so that both the order of the words and the order of the characters in each word are reversed. The function should ignore any whitespace and return the reversed string preserves the original white spaces.","solution":"def reverse_words_and_characters(s): This function takes a string, reverses the order of the words, and also reverses the characters in each word, while preserving the original whitespaces. Parameters: - s (str): The input string to reverse Returns: - str: The reversed string if not s: return s # Identify the words and reverse them words = s.split()[::-1] reversed_words = [word[::-1] for word in words] # Preserve the whitespaces by iterating through the original string result = [] word_idx = 0 chars_added = 0 for char in s: if char.isspace(): result.append(char) else: # Add character from the reversed words result.append(reversed_words[word_idx][chars_added]) chars_added += 1 if chars_added == len(reversed_words[word_idx]): word_idx += 1 chars_added = 0 return ''.join(result)"},{"question":"Create a function that slices a list based on a given index and length. The function should return a new list containing the elements from the original list starting from the index up to (but not including) the index plus the given length.","solution":"def slice_list(lst, start, length): Returns a new list containing elements from the original list \`lst\` starting from the index \`start\` up to (but not including) \`start + length\`. Parameters: lst (list): The original list. start (int): The starting index for the slice. length (int): The number of elements to include in the slice. Returns: list: A list containing the sliced elements. return lst[start:start + length]"},{"question":"Create a function that returns the number of words in a given string. The function should filter out any non-alphabetic characters and should only count words separated by spaces.","solution":"import re def count_words(text): Returns the number of words in a given string. Filters out any non-alphabetic characters and counts words separated by spaces. Parameters: text (str): The input string. Returns: int: The number of words in the input string. # Replace non-alphabetic characters with spaces, then split by spaces and filter out empty strings words = re.sub(r'[^A-Za-zs]', ' ', text).split() return len(words)"},{"question":"Create a function that takes a list of integers and a target integer as parameters and returns a list of all indices of the target integer in the input list. If the target integer is not found, return an empty list. Use Python.","solution":"def find_indices(lst, target): Returns a list of all indices of target in lst. return [index for index, value in enumerate(lst) if value == target]"},{"question":"Create a function that takes two arrays of integers arr1 and arr2. The function should return a new array that contains the product of each corresponding element from arr1 and arr2, i.e., arr1[0] * arr2[0], arr1[1] * arr2[1], ..., and so on. Assume both arrays have the same length.","solution":"def multiply_arrays(arr1, arr2): Returns a new array that contains the product of each corresponding element from arr1 and arr2. Assumes both arrays have the same length. return [a * b for a, b in zip(arr1, arr2)]"},{"question":"Create a function that returns the second highest number in an array of integers. If the array has less than two unique elements, return \`None\`.","solution":"def second_highest(numbers): Returns the second highest number in an array of integers. If the array has less than two unique elements, return None. unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return None unique_numbers.sort(reverse=True) return unique_numbers[1]"},{"question":"Create a function that multiplies two matrices. The matrices can have any number of rows and columns. However, the number of columns in the first matrix must match the number of rows in the second matrix. Here is how the function should work: \`multiply_matrices(matrix1, matrix2)\`, where \`matrix1\` and \`matrix2\` are lists of lists, with each inner list representing a row of the matrix. The function should return the product of the two matrices, or \`None\` if the matrices cannot be multiplied due to dimension mismatch.","solution":"def multiply_matrices(matrix1, matrix2): Multiplies two matrices if the number of columns in matrix1 equals the number of rows in matrix2. Parameters: matrix1 (list of list of int/float): First matrix. matrix2 (list of list of int/float): Second matrix. Returns: list of list of int/float: The result of matrix multiplication, or None if dimensions are mismatched. if len(matrix1[0]) != len(matrix2): return None result = [[0 for _ in range(len(matrix2[0]))] for _ in range(len(matrix1))] for i in range(len(matrix1)): for j in range(len(matrix2[0])): for k in range(len(matrix2)): result[i][j] += matrix1[i][k] * matrix2[k][j] return result"},{"question":"Create a function that generates a list containing all binary numbers with \`n\` bits that have **at least** \`k\` bits set to \`1\`. The function should return the list of these binary numbers in ascending order.","solution":"def generate_binary_numbers(n, k): Generates a list containing all binary numbers with n bits that have at least k bits set to 1. Parameters: n (int): Number of bits in the binary numbers. k (int): Minimum number of set bits (1s) in the binary numbers. Returns: List[str]: List of binary numbers in ascending order that meet the criteria. results = [] for i in range(2 ** n): binary_str = bin(i)[2:].zfill(n) if binary_str.count('1') >= k: results.append(binary_str) return results"},{"question":"Create a function that takes a list of integers and returns the one that appears an odd number of times. If there are multiple integers that appear an odd number of times, return **any** one of them. If there is no integer that appears an odd number of times, return \`-1\`.","solution":"def find_odd_occurrence(nums): Returns an integer that appears an odd number of times in the list nums. If multiple integers appear an odd number of times, return any one of them. If no integer appears an odd number of times, return -1. frequency = {} for num in nums: frequency[num] = frequency.get(num, 0) + 1 for num, count in frequency.items(): if count % 2 != 0: return num return -1"},{"question":"Create a function that returns the factorial of a given number. I want to keep the function simple and clear.","solution":"def factorial(n): Returns the factorial of the given number n. if n == 0: return 1 else: result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Create a function that is able to append and delete elements from an array.","solution":"def modify_array(arr, operation, element=None): Modify the array based on the operation provided. Parameters: arr (list): The list to modify. operation (str): The operation to perform, either \\"append\\" or \\"delete\\". element: The element to append if the operation is \\"append\\". Default is None. Returns: list: The modified list. if operation == \\"append\\" and element is not None: arr.append(element) elif operation == \\"delete\\" and element is not None: if element in arr: arr.remove(element) return arr"},{"question":"Create a function that takes an integer as input and returns the next prime number greater than the input integer. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. For example, the next prime number after 10 is 11. If the input number is already prime, the function should return the next prime number.","solution":"def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def next_prime(n): Returns the next prime number greater than the input integer. candidate = n + 1 while not is_prime(candidate): candidate += 1 return candidate"},{"question":"Create a function that takes a list of integers and returns the sum of all numbers in the list that are divisible by 5.","solution":"def sum_of_numbers_divisible_by_5(numbers): Returns the sum of all numbers in the list that are divisible by 5. Parameters: numbers (list): A list of integers. Returns: int: Sum of numbers divisible by 5. return sum(number for number in numbers if number % 5 == 0)"},{"question":"Create a function that takes two arguments (an array of integers and a target sum) and returns the first pair of numbers that sum up to the target number. If no pair exists, return null.","solution":"def find_pair_with_sum(arr, target): Finds the first pair of numbers in the array that sum up to the target. seen_numbers = {} for number in arr: complement = target - number if complement in seen_numbers: return (complement, number) seen_numbers[number] = True return None"},{"question":"Create a function that converts a decimal number to its binary representation. The function should handle negative numbers, and it should also handle very large numbers. Additionally, the function should be efficient and use bit manipulation techniques to ensure fast computation.","solution":"def decimal_to_binary(n): Convert a decimal number to its binary representation. Handles negative numbers and large numbers efficiently using bit manipulation techniques. if n == 0: return \\"0\\" is_negative = n < 0 n = abs(n) result = [] while n > 0: result.append(str(n % 2)) n = n // 2 if is_negative: result.append('-') return ''.join(reversed(result))"},{"question":"Create a function that takes a string of text and replaces all the words 'hello' and 'world' with 'hi' and 'planet'. Use regular expressions to accomplish this task.","solution":"import re def replace_hello_world(input_text): Replaces all occurrences of 'hello' with 'hi' and 'world' with 'planet' using regular expression. Parameters: input_text (str): The string of text to process. Returns: str: The processed string with replacements made. # Replace 'hello' with 'hi' result_text = re.sub(r'bhellob', 'hi', input_text, flags=re.IGNORECASE) # Replace 'world' with 'planet' result_text = re.sub(r'bworldb', 'planet', result_text, flags=re.IGNORECASE) return result_text"},{"question":"Create a function that takes in two lists, \`list1\` and \`list2\`, and returns a new list containing the elements that are common to both lists. The function should also ensure that the elements in the resulting list are sorted in ascending order.","solution":"def common_elements_sorted(list1, list2): Returns a sorted list of elements that are common to both list1 and list2. common_elements = list(set(list1) & set(list2)) common_elements.sort() return common_elements"},{"question":"Create a function that returns the sum of all numbers in a deeply nested array. The function should handle arrays with any level of nesting and sum all the numbers, regardless of how deeply they are nested.","solution":"def sum_nested_array(arr): Returns the sum of all numbers in a deeply nested array. total = 0 def helper(sub_array): nonlocal total for item in sub_array: if isinstance(item, list): helper(item) elif isinstance(item, (int, float)): total += item helper(arr) return total"},{"question":"Create a function that takes two parameters: an array of integers \`arr\` and an integer \`target\`. The function should return the sum of all \`target\` numbers in the array \`arr\`. If the \`target\` number does not exist in the array, the function should return 0.","solution":"def sum_of_target_numbers(arr, target): Returns the sum of all target numbers in the array arr. If the target number does not exist in the array, the function returns 0. Parameters: arr (list of int): The array of integers. target (int): The target number to sum. Returns: int: The sum of all target numbers in arr, or 0 if target is not found. return sum(x for x in arr if x == target)"},{"question":"Create a function that processes a list of numbers and returns the maximum value found in the list. The twist is that this function must not use any built-in max() function or any comparison operators (like <, >, <=, >=). It should only use bitwise operations and arithmetic operations to find the maximum value.","solution":"def find_max(arr): Returns the maximum value from arr using only bitwise and arithmetic operations. Assumes arr is a non-empty list of integers. def get_max(x, y): Returns the maximum of x and y using only bitwise and arithmetic operations. diff = x - y k = diff >> 31 return x - (diff & k) max_value = arr[0] for num in arr: max_value = get_max(max_value, num) return max_value"},{"question":"Create a function that takes in a string and returns a new string with the first letter of each word capitalized. The function should ignore any leading spaces and also handle multiple spaces between words.","solution":"def capitalize_words(sentence): Takes a string and returns a new string with the first letter of each word capitalized. return ' '.join(word.capitalize() for word in sentence.split())"},{"question":"Create a function that takes a string 's' and returns a string with all the duplicates characters removed while maintaining the original order of the characters.","solution":"def remove_duplicates(s): Returns a string with all the duplicate characters removed while maintaining the original order of the characters. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Create a function that capitalizes the first letter of each word in a given string, regardless of how many spaces or hyphens are present. Additionally, ensure that any additional spaces or hyphens are removed, so that all words are connected seamlessly.","solution":"def capitalize_and_clean(s: str) -> str: Capitalizes the first letter of each word in a given string and removes spaces and hyphens. words = s.replace('-', ' ').split() cleaned_words = [word.capitalize() for word in words] return ''.join(cleaned_words)"},{"question":"Create a function that takes a list of integers as input and returns the second smallest element in the list.","solution":"def second_smallest(numbers): Returns the second smallest element in a list of integers. :param numbers: List of integers :return: The second smallest integer in the list if len(numbers) < 2: raise ValueError(\\"List must contain at least two elements.\\") unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: raise ValueError(\\"List must contain at least two unique elements.\\") unique_numbers.sort() return unique_numbers[1]"},{"question":"Create a function that determines if a given number is a \\"perfect square\\" created by consecutive multiples of a single number \`n\`. For example, if \`n\` is 2, then the number could be 2, 4, 8, 16, etc. If \`n\` is 3, then it could be 3, 6, 12, 24, etc. The function should return \`true\` if the number is a \\"perfect square\\" created by consecutive multiples of \`n\`, and \`false\` otherwise.","solution":"def is_perfect_square_from_n(n, number): Determines if a given number is a \\"perfect square\\" created by consecutive multiples of \`n\`. Parameters: n (int): the base number. number (int): the number to check. Returns: bool: True if the number is a perfect square from consecutive multiples of \`n\`, False otherwise. if n <= 0 or number <= 0: return False current_multiple = n while current_multiple <= number: if current_multiple == number: return True current_multiple *= 2 return False"},{"question":"Create a function that counts the number of unique characters in a string and returns their counts. The function should work for both upper and lower case letters, treating them as distinct characters (e.g., 'A' and 'a' should be counted separately).","solution":"def count_unique_characters(s): Returns a dictionary with the count of unique characters in the string \`s\`, treating upper and lower case letters as distinct. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count"},{"question":"Create a function that takes three parameters: an integer, a string, and a list. The function should check if the integer is within the range of indices of the list, and if the character at that index in the string matches the corresponding element in the list. If both conditions are met, the function should return True; otherwise, False. Additionally, the function should handle cases where the indices are out of range and where the character does not match.","solution":"def check_conditions(index, string, lst): Checks if the integer index is within the range of list's indices and whether the character at that index in the string matches the corresponding element in the list. Args: index (int): The index to be checked. string (str): The string whose character is to be checked. lst (list): The list whose element is to be checked. Returns: bool: True if the index is valid and the character matches the list element, otherwise False. if 0 <= index < len(lst) and 0 <= index < len(string): return string[index] == lst[index] return False"},{"question":"Create a function that generates a list of prime numbers up to a given number n using the Sieve of Eratosthenes algorithm. The Sieve of Eratosthenes is an ancient algorithm used to find all prime numbers up to any given limit.","solution":"def sieve_of_eratosthenes(n): Generates a list of all prime numbers up to the given number n using the Sieve of Eratosthenes algorithm. Parameters: n (int): The upper limit up to which to look for prime numbers. Returns: list: A list of prime numbers up to n (inclusive) if n is greater than or equal to 2, else an empty list. if n < 2: return [] sieve = [True] * (n + 1) sieve[0] = False sieve[1] = False for p in range(2, int(n**0.5) + 1): if sieve[p] == True: for multiple in range(p * p, n + 1, p): sieve[multiple] = False return [p for p, is_prime in enumerate(sieve) if is_prime]"},{"question":"Create a function that takes two integers as input and returns the sum of their squares. What should the function be named and what programming language should we use?","solution":"def sum_of_squares(a, b): Returns the sum of the squares of a and b. return a**2 + b**2"},{"question":"Create a function that takes a list of strings and returns a new list containing only the strings that have a length greater than 2.","solution":"def filter_strings_by_length(strings): Returns a new list containing only the strings with a length greater than 2. Parameters: strings (list of str): List of strings to be filtered. Returns: list of str: List of strings with length greater than 2. return [s for s in strings if len(s) > 2]"},{"question":"Create a function that takes an array of colors represented as RGB values and returns an array of colors represented as hexadecimal values.","solution":"def rgb_to_hex(rgb_list): Converts a list of RGB color values to their hexadecimal representation. Parameters: rgb_list (list): A list of RGB tuples. Each tuple contains three integers corresponding to the red, green, and blue components. Each integer should be in the range 0-255. Returns: list: A list of hexadecimal color strings. def rgb_to_hex_single(rgb): return '#{:02x}{:02x}{:02x}'.format(rgb[0], rgb[1], rgb[2]) return [rgb_to_hex_single(rgb) for rgb in rgb_list]"},{"question":"Create a function that outputs the sum of all the even numbers in a given list. The function should be efficient and avoid unnecessary computations.","solution":"def sum_of_evens(lst): Returns the sum of all even numbers in the provided list. return sum(num for num in lst if num % 2 == 0)"},{"question":"Create a function that takes a string of DNA bases, represented as a string of characters ('A', 'T', 'C', 'G'), and returns the complement of the DNA strand.","solution":"def dna_complement(dna): Takes a string of DNA bases ('A', 'T', 'C', 'G') and returns the complement string. A <-> T and C <-> G complement = {'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C'} return ''.join(complement[base] for base in dna)"},{"question":"Create a function that converts a hexadecimal (base 16) number to its decimal (base 10) equivalent. The function should take a string representing a hexadecimal number and return the corresponding decimal number as an integer.","solution":"def hex_to_decimal(hex_string): Converts a hexadecimal number (as a string) to its decimal equivalent. Parameters: hex_string (str): The hexadecimal number as a string. Returns: int: The decimal equivalent of the hexadecimal number. return int(hex_string, 16)"},{"question":"Create a function that scrambles the characters in a given string. You will need to write a Python function that takes a string as input and returns a new string where the characters are in a random order, but the frequency of each character (how many times it appears) should remain the same.","solution":"import random def scramble_string(s): Returns a scrambled version of the input string with the same character frequencies. s_list = list(s) random.shuffle(s_list) return ''.join(s_list)"},{"question":"Create a function that returns the sum of all positive even numbers in an array. If the array has no positive even numbers, the function should return 0.","solution":"def sum_positive_even_numbers(arr): Returns the sum of all positive even numbers in the array. If there are no positive even numbers, returns 0. return sum(x for x in arr if x > 0 and x % 2 == 0)"},{"question":"Create a function that checks if a string is a rotation of another string in Python. For example, \\"rotation\\" is a rotation of \\"tationro\\".","solution":"def is_rotation(str1, str2): Checks if str2 is a rotation of str1. if len(str1) != len(str2): return False return str2 in (str1 + str1)"},{"question":"Create a function that transforms a given word or phrase into a pig latin version. The function should take a string input and output the pig latin version of the input. For example, if the input is \\"hello\\", the output should be \\"ellohay\\". Also, handle multiple words separated by spaces and ensure the first letter remains capitalized if it was in the original word.","solution":"def pig_latin_transform(text): Transforms a given word or phrase into a pig latin version. def pig_latin_word(word): if word[0].lower() in 'aeiou': return word + 'way' else: return word[1:] + word[0] + 'ay' words = text.split() transformed_words = [] for word in words: transformed_word = pig_latin_word(word) if word[0].isupper(): transformed_word = transformed_word.capitalize() transformed_words.append(transformed_word) return ' '.join(transformed_words)"},{"question":"Create a function that accepts a list of integers and returns the sum of the numbers. The function should capture and handle any potential exceptions that may arise during the execution.","solution":"def sum_of_integers(int_list): Returns the sum of the integers in the list. If an exception occurs, returns None. try: total = sum(int_list) except Exception as e: return None return total"},{"question":"Create a function that takes a single string argument and returns true if the string is a palindrome (reads the same backward as forward) and false otherwise.","solution":"def is_palindrome(s): Returns true if the string s is a palindrome, false otherwise. # Removing any non-alphabetical characters and converting to lowercase cleaned_s = ''.join(char.lower() for char in s if char.isalnum()) return cleaned_s == cleaned_s[::-1]"},{"question":"Create a function that takes in a list of integers as an argument and returns a list containing the first and last elements of the original list.","solution":"def first_and_last_elements(input_list): Returns a list containing the first and last elements of the input_list. If the input_list is empty, returns an empty list. If the input_list has only one element, returns a list containing that single element twice. if len(input_list) == 0: return [] if len(input_list) == 1: return [input_list[0], input_list[0]] return [input_list[0], input_list[-1]]"},{"question":"Create a function that takes two string parameters and returns their lexicographical (dictionary) order.","solution":"def lexicographical_order(str1, str2): Compares two strings and returns their order in lexicographical (dictionary) format. If str1 comes before str2, returns (str1, str2) Otherwise, returns (str2, str1) if str1 < str2: return (str1, str2) else: return (str2, str1)"},{"question":"Create a function that takes a string and returns the number of vowels in it. Define the vowels as aeiou and Aeiou.","solution":"def count_vowels(input_string): Returns the number of vowels in the input string. Vowels are defined as: aeiouAEIOU Parameters: input_string (str): The string to count vowels in. Returns: int: The number of vowels in the input string. vowels = 'aeiouAEIOU' return sum(1 for char in input_string if char in vowels)"},{"question":"Create a function that accepts an array of integers (as input) and returns the integer with the highest absolute value. If the array is empty, return \`None\`.","solution":"def max_absolute_value(arr): Returns the integer with the highest absolute value from the list. If the list is empty, returns None. if not arr: # Check if the list is empty return None return max(arr, key=abs)"},{"question":"Create a function that takes a list of integers as an argument and returns the list sorted in ascending order. The function should use the built-in sort() method of the list, but the list should be sorted in descending order before it is passed to the sort() method. To achieve this, the function should reverse the order of the list before sorting.","solution":"def sort_list_in_ascending_order(lst): Takes a list of integers, reverses it, sorts it in ascending order and returns the sorted list. lst.reverse() lst.sort() return lst"},{"question":"Create a function that converts a string into a list of words, where each word is separated by spaces.","solution":"def string_to_words(s): Converts a string into a list of words, where each word is separated by spaces. Parameters: s (str): The input string. Returns: list: A list of words. return s.split()"},{"question":"Create a function that returns the minimum value in an array of numbers. If the array is empty, return \`None\`.","solution":"def find_minimum(arr): Returns the minimum value in an array of numbers. If the array is empty, returns None. if len(arr) == 0: return None return min(arr)"},{"question":"Create a function that accepts an integer array and returns the sum of the squares of the array's elements. If the array is empty, return 0. The function should handle both positive and negative numbers.","solution":"def sum_of_squares(arr): Returns the sum of the squares of the array's elements. If the array is empty, return 0. Parameters: arr (list of int): The array of integers Returns: int: The sum of the squares of the array's elements return sum(x**2 for x in arr)"},{"question":"Create a function that calculates the factorial of a given number using both Recursive and Iterative methods. Provide comments in your code to explain each step.","solution":"def factorial_recursive(n): Calculates the factorial of a given number n using recursion. if n == 0: return 1 else: return n * factorial_recursive(n - 1) def factorial_iterative(n): Calculates the factorial of a given number n using iteration. result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Create a function that takes an integer \`n\` and returns a string of the first \`n\` Fibonacci numbers separated by commas. For example, if \`n\` is 5, the function should return \\"0,1,1,2,3\\".","solution":"def fibonacci_sequence(n): Returns a string of the first n Fibonacci numbers separated by commas. :param n: integer, number of Fibonacci numbers to generate :return: a comma-separated string of the first n Fibonacci numbers if n <= 0: return \\"\\" fibonacci_numbers = [] a, b = 0, 1 for _ in range(n): fibonacci_numbers.append(str(a)) a, b = b, a + b return \\",\\".join(fibonacci_numbers)"},{"question":"Create a function that determines the simplest path through a grid with obstacles. The grid is represented as a 2D array where 0 represents open spaces and 1 represents obstacles. The function should return the number of steps required to reach the bottom right corner from the top left corner. You can only move right or down. If there's no path from the start to the end, return -1.","solution":"from collections import deque def min_steps_through_grid(grid): Determines the minimum number of steps to reach the bottom-right corner of the grid from the top-left corner. The grid is represented as a 2D list where 0 represents open spaces and 1 represents obstacles. Returns the number of steps required or -1 if there's no path. if not grid or not grid[0] or grid[0][0] == 1 or grid[-1][-1] == 1: return -1 m, n = len(grid), len(grid[0]) directions = [(0, 1), (1, 0)] # right, down queue = deque([(0, 0)]) steps = 0 while queue: for _ in range(len(queue)): x, y = queue.popleft() if x == m - 1 and y == n - 1: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] == 0: queue.append((nx, ny)) grid[nx][ny] = 1 # Mark as visited steps += 1 return -1"},{"question":"Create a function that calculates the factorial of a number using a stack to implement a recursive algorithm. The function should accept an integer as input and return the factorial of that number. If the input is not a non-negative integer, the function should return an error message.","solution":"def factorial_stack(n): if not isinstance(n, int) or n < 0: return \\"Error: Input must be a non-negative integer.\\" stack = [n] result = 1 while stack: current = stack.pop() if current > 1: result *= current stack.append(current - 1) return result"},{"question":"Create a function that takes two lists of integers and returns a list containing the minimum value between the corresponding elements of the input lists.","solution":"def min_elementwise(list1, list2): Returns a list containing the minimum values between the corresponding elements of list1 and list2. If the lists are of different lengths, it considers only the elements up to the length of the shorter list. return [min(a, b) for a, b in zip(list1, list2)]"},{"question":"Create a function that takes a string representing a DNA sequence and returns the reverse complement of the DNA sequence. The DNA sequence consists of the characters 'A', 'T', 'C', and 'G', where 'A' pairs with 'T' and 'C' pairs with 'G'.","solution":"def reverse_complement(dna_sequence): Returns the reverse complement of the given DNA sequence. Parameters: dna_sequence (str): A string representing the original DNA sequence consisting of 'A', 'T', 'C', and 'G'. Returns: str: The reverse complement DNA sequence. complement = {'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C'} # Compute the complement of the sequence complement_sequence = [complement[base] for base in dna_sequence] # Reverse the complement sequence reverse_complement_sequence = ''.join(complement_sequence)[::-1] return reverse_complement_sequence"},{"question":"Create a function that checks if a given parameter is a palindrome.","solution":"def is_palindrome(s): Returns True if the given string s is a palindrome, False otherwise. # A palindrome reads the same forwards and backwards # Converting the string to lower case and removing non-alphanumeric characters filtered_s = ''.join(char.lower() for char in s if char.isalnum()) return filtered_s == filtered_s[::-1]"},{"question":"Create a function that takes two integer numbers as arguments and returns the maximum of the two. Additionally, add a docstring to explain what the function does.","solution":"def max_of_two(a, b): Returns the maximum of two integer numbers a and b. return a if a > b else b"},{"question":"Create a function that generates the first N numbers in the Fibonacci sequence. The function should return the sequence as a list. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones. The function should handle cases where N is less than or equal to zero by returning an empty list.","solution":"def fibonacci_sequence(N): Generate the first N numbers in the Fibonacci sequence. Parameters: N (int): The length of the Fibonacci sequence to generate. Returns: list: A list containing the first N numbers in the Fibonacci sequence. Returns an empty list if N is less than or equal to zero. if N <= 0: return [] fib_sequence = [] a, b = 0, 1 for _ in range(N): fib_sequence.append(a) a, b = b, a + b return fib_sequence"},{"question":"Create a function that takes a number as input and returns a reversed version of the number. If the reversed number is negative, return the negative reversed version. If the input number is 0, return 0. How can I achieve this in Python?","solution":"def reverse_number(n): Returns the reversed version of the input number. If the reversed number is negative, it returns the negative reversed version. If the input number is 0, it returns 0. negative = n < 0 n = abs(n) reversed_num = int(str(n)[::-1]) return -reversed_num if negative else reversed_num"},{"question":"Create a function that takes a square matrix as an argument and returns a new matrix that contains the same elements. However, the returned matrix should be reversed in both rows and columns.","solution":"def reverse_matrix(matrix): Takes a square matrix and returns a new matrix that is reversed in both rows and columns. Parameters: matrix (list of list of int): A square matrix. Returns: list of list of int: The reversed matrix. return [row[::-1] for row in matrix[::-1]]"},{"question":"Create a function that takes an integer n and returns the nth Fibonacci number in Python. The Fibonacci sequence starts with F(0) = 0, F(1) = 1 and F(n) = F(n-1) + F(n-2) for n > 1.","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n < 0: raise ValueError(\\"Input should be a non-negative integer\\") if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Create a function that generates a list of all prime numbers less than a given number 'n' efficiently.","solution":"def generate_primes(n): Returns a list of all prime numbers less than n using the Sieve of Eratosthenes algorithm. if n <= 2: return [] sieve = [True] * n sieve[0] = sieve[1] = False for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n, start): sieve[multiple] = False return [num for num in range(n) if sieve[num]]"},{"question":"Create a function that takes two parameters, an array of strings and a number, and returns the number of strings in the array that are longer than the given number.","solution":"def count_strings_longer_than(arr, n): Returns the number of strings in the array that are longer than the given number n. return len([s for s in arr if len(s) > n])"},{"question":"Create a function that takes a string as input and returns the string with the first letter of each word capitalized. Ensure that if a word contains only one letter, it is also capitalized. For example, if the input is \\"hello world\\", the output should be \\"Hello World\\". If the input is \\"a\\", the output should be \\"A\\".","solution":"def capitalize_each_word(s): Returns the string with the first letter of each word capitalized. return ' '.join(word.capitalize() for word in s.split())"},{"question":"Create a function that checks whether a given number is a palindrome. A number is considered a palindrome if the sequence of digits reads the same backward as forward (without considering leading zeros).","solution":"def is_palindrome_number(n): Check if the given number is a palindrome. A number is considered a palindrome if the sequence of digits reads the same backward as forward. Parameters: n (int): The number to check. Returns: bool: True if the number is a palindrome, False otherwise. # Convert the number to a string to check for palindrome properties str_n = str(n) # Check if the string reads the same forwards and backwards return str_n == str_n[::-1]"},{"question":"Create a function that takes a string as input and returns the string in reverse order without using any built-in string reverse methods. You should handle both uppercase and lowercase letters, as well as any special characters, including spaces.","solution":"def reverse_string(s): Returns the input string reversed without using any built-in reverse methods. reversed_s = \\"\\" for char in s: reversed_s = char + reversed_s return reversed_s"},{"question":"Create a function that takes a list of integers and returns the maximum number of unique integers in any contiguous subarray of size \`k\`.","solution":"def max_unique_integers(nums, k): Returns the maximum number of unique integers in any contiguous subarray of size k. if len(nums) < k: return 0 max_unique = 0 current_window = set() counter = {} # Initialize the first window for i in range(k): counter[nums[i]] = counter.get(nums[i], 0) + 1 if counter[nums[i]] == 1: current_window.add(nums[i]) max_unique = len(current_window) # Slide the window for i in range(k, len(nums)): # Remove the element going out of the window outgoing = nums[i - k] counter[outgoing] -= 1 if counter[outgoing] == 0: current_window.remove(outgoing) # Add the new element coming into the window incoming = nums[i] counter[incoming] = counter.get(incoming, 0) + 1 if counter[incoming] == 1: current_window.add(incoming) max_unique = max(max_unique, len(current_window)) return max_unique"},{"question":"Create a function that takes two arguments, a list of integers and a target integer, and returns the indices of the two numbers such that they add up to the target.","solution":"def two_sum(nums, target): Returns indices of the two numbers in the list that add up to the target. Parameters: nums (list): List of integers target (int): The target integer Returns: list: Indices of the two numbers that add up to the target lookup = {} for i, num in enumerate(nums): diff = target - num if diff in lookup: return [lookup[diff], i] lookup[num] = i return None"},{"question":"Create a function that generates an HTML list (ul and li tags) based on an array of strings. The function should add each string as a list item in the ul. The function should also check if the string contains a specific tag (e.g., \\"urgent\\") and then wrap the entire list item with a <strong> tag if it contains the tag.","solution":"def generate_html_list(items, tag='urgent'): Generates an HTML list (ul and li tags) based on an array of strings. Each string is added as a list item in the ul. If the string contains a specified tag, the list item is wrapped with a <strong> tag. Parameters: - items: List of strings - tag: A specific tag to look for in the strings Returns: - A string representing the HTML list html_list = [\\"<ul>\\"] for item in items: if tag in item: html_list.append(f\\"<li><strong>{item}</strong></li>\\") else: html_list.append(f\\"<li>{item}</li>\\") html_list.append(\\"</ul>\\") return \\"n\\".join(html_list)"},{"question":"Create a function that takes an array of integers and a frequency limit as parameters. The function should shuffle the array so that no two adjacent elements are the same. If it is impossible to shuffle the array under the given constraints, the function should return \`false\`.","solution":"from collections import Counter import heapq def shuffle_no_adjacent(arr, freq_limit): counter = Counter(arr) max_heap = [(-count, num) for num, count in counter.items()] heapq.heapify(max_heap) prev_count, prev_num = 0, None result = [] while max_heap: count, num = heapq.heappop(max_heap) result.append(num) # Push the previous element back into the heap if it's frequency is non-zero. if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_num)) # Update the previous element to current. prev_count, prev_num = count + 1, num if len(result) != len(arr): return False return result"},{"question":"Create a function that implements the quicksort algorithm in Python. Typically used to sort lists. It should work with both positive and negative integers, and strings.","solution":"def quicksort(arr): Sorts the input array using the quicksort algorithm. Parameters: arr (list): The list of elements to be sorted. Returns: list: The sorted list. if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"Create a function that takes two lists of integers and prints the indices of elements in both lists that are the same and print them in ascending order.","solution":"def print_matching_indices(list1, list2): Prints the indices of elements in both lists that are the same and print them in ascending order. matching_indices = [i for i, (x, y) in enumerate(zip(list1, list2)) if x == y] for index in sorted(matching_indices): print(index)"},{"question":"Create a function that will print out all the numbers from 1 to n in a specified range (inclusive). For example, if the range is specified as 10 to 20 and n is 15, it should print the numbers from 10 to 20, but only the first 15 of them.","solution":"def print_numbers_in_range(start, end, n): Prints out all the numbers from start to end in a specified range (inclusive). Only the first n numbers in the range will be printed. for i in range(start, end + 1): if i - start < n: print(i) else: break"},{"question":"Create a function that takes two lists of numbers, each containing three elements, and returns a single list containing the sums of the corresponding elements, modulo 2.","solution":"def sum_lists_modulo2(list1, list2): Takes two lists of numbers, each containing three elements, and returns a single list containing the sums of the corresponding elements, modulo 2. if len(list1) != 3 or len(list2) != 3: raise ValueError(\\"Both lists must contain exactly three elements.\\") result = [(x + y) % 2 for x, y in zip(list1, list2)] return result"},{"question":"Create a function that generates a random line number from a given text file. The function should throw an exception if the file is empty.","solution":"import random def random_line_number(file_path): Returns a random line number from the given text file. :param file_path: Path to the text file :raises ValueError: If the file is empty :return: A random line number (1-based index) with open(file_path, 'r') as file: lines = file.readlines() if not lines: raise ValueError(\\"The file is empty\\") return random.randint(1, len(lines))"},{"question":"Create a function that takes a string as an input and returns the longest substring that is a palindrome. The function should handle cases with multiple palindromic substrings of the same maximum length and return only the first encountered. For example, the input \\"abccdba\\" should return \\"ccdbac\\".","solution":"def longest_palindrome(s): def expand_around_center(left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] longest = \\"\\" for i in range(len(s)): # Check for odd-length palindromes centered at i odd_palindrome = expand_around_center(i, i) if len(odd_palindrome) > len(longest): longest = odd_palindrome # Check for even-length palindromes centered between i and i + 1 even_palindrome = expand_around_center(i, i + 1) if len(even_palindrome) > len(longest): longest = even_palindrome return longest"},{"question":"Create a function that generates a Fibonacci sequence of a given length, and returns it as a list. The function should be optimized to handle large Fibonacci numbers efficiently.","solution":"def fibonacci_sequence(n): Generates a Fibonacci sequence of length n. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fib_sequence = [0, 1] for _ in range(2, n): fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"Create a function that takes an integer \`N\` as input and returns a list of tuples. Each tuple contains three integers: the current number \`i\`, the running sum of numbers from 0 to \`i\`, and the running product of numbers from 1 to \`i\`.","solution":"def generate_running_sum_and_product(N): Returns a list of tuples, each containing (i, running_sum, running_product). running_sum: Sum of numbers from 0 to i. running_product: Product of numbers from 1 to i. result = [] running_sum = 0 running_product = 1 for i in range(N + 1): running_sum += i running_product = running_product * i if i > 0 else 1 # handle the case when i == 0 result.append((i, running_sum, running_product)) return result"},{"question":"Create a function that accepts an array of integers and returns the second byte of the third integer in the array. Use the integer data type, not the byte data type. What if the third integer is not available in the array?","solution":"def second_byte_of_third_integer(arr): Returns the second byte of the third integer in the given array. Returns None if the third integer is not available in the array. Parameters: arr (list of int): A list of integers. Returns: int or None: The second byte of the third integer if available, otherwise None. if len(arr) < 3: return None third_integer = arr[2] second_byte = (third_integer >> 8) & 0xFF return second_byte"},{"question":"Create a function that takes a list and a list of indices as input and returns a new list containing the elements from the original list at the specified indices.","solution":"def elements_at_indices(original_list, indices): Returns a new list containing the elements from the original list at the specified indices. :param original_list: List of elements :param indices: List of indices :return: List of elements at the specified indices return [original_list[idx] for idx in indices]"},{"question":"Create a function that takes a list of integers and returns a tuple containing the sum of all the even numbers and the product of all the odd numbers in the list. If there are no even numbers, the sum of even numbers should be 0. If there are no odd numbers, the product of odd numbers should be 1 (since multiplying by 1 does not change the product).","solution":"def sum_of_evens_and_product_of_odds(lst): Takes a list of integers and returns a tuple containing the sum of all even numbers and the product of all odd numbers in the list. sum_evens = 0 product_odds = 1 for num in lst: if num % 2 == 0: sum_evens += num else: product_odds *= num return (sum_evens, product_odds)"},{"question":"Create a function that takes a list of integers as an argument. The function should return a new list with each element multiplied by 3.","solution":"def multiply_by_three(lst): Returns a list with each element in the input list multiplied by 3. Parameters: lst (list): List of integers. Returns: list: List of integers where each element is multiplied by 3. return [x * 3 for x in lst]"},{"question":"Create a function that receives an integer \`n\` as input and returns the least common multiple (LCM) of all numbers from 1 to \`n\`.","solution":"from math import gcd def lcm(a, b): Return the least common multiple of a and b. return a * b // gcd(a, b) def lcm_range(n): Return the least common multiple of all numbers from 1 to n. if n <= 0: raise ValueError(\\"Input must be a positive integer\\") result = 1 for i in range(1, n + 1): result = lcm(result, i) return result"},{"question":"Create a function that takes a string of text and returns the count of all unique words that appear in the text, ignoring case and punctuation. For instance, the text \\"Hello, world! World hello.\\" should return \`2\` as there are two unique words: \\"hello\\" and \\"world\\".","solution":"import re from collections import Counter def count_unique_words(text): Returns the count of unique words in the given text, ignoring case and punctuation. Args: text (str): The text to analyze. Returns: int: The count of unique words. # Remove punctuation and convert to lowercase words = re.findall(r'bw+b', text.lower()) # Get unique words using Counter unique_words = Counter(words).keys() return len(unique_words)"},{"question":"Create a function that takes in two lists and returns a new list with elements that are unique to each list.","solution":"def unique_elements(list1, list2): Returns a list of elements that are unique to each of the two input lists. set1 = set(list1) set2 = set(list2) unique_to_list1 = set1 - set2 unique_to_list2 = set2 - set1 return list(unique_to_list1 | unique_to_list2)"},{"question":"Create a function that takes an integer as input and returns the number of even digits in the integer.","solution":"def count_even_digits(n: int) -> int: Returns the count of even digits in the integer n. # Convert the integer to a string to iterate over each character digits = str(abs(n)) # Use absolute value to handle negative numbers count = 0 # Iterate over each character in the string representation of the number for digit in digits: if int(digit) % 2 == 0: count += 1 return count"},{"question":"Create a function that generates an array of the first 50 Fibonacci numbers.","solution":"def generate_fibonacci_50(): Generate an array of the first 50 Fibonacci numbers. fib_array = [0, 1] while len(fib_array) < 50: fib_array.append(fib_array[-1] + fib_array[-2]) return fib_array"},{"question":"Create a function that uses lambda expressions to return the square of a number.","solution":"def square_number(): Returns a lambda function that calculates the square of a given number. return lambda x: x * x"},{"question":"Create a function that finds the maximum and minimum values of an array of integers. Write the function in Python.","solution":"def find_max_min(arr): Returns the maximum and minimum values of an array of integers. :param arr: List of integers :return: Tuple containing the maximum and minimum values if not arr: raise ValueError(\\"Array is empty\\") max_val = max(arr) min_val = min(arr) return max_val, min_val"},{"question":"Create a function that takes a string s as an argument and returns a new string that is a reverse copy of the original string s. You are not allowed to use Python's built-in reverse functions or slicing methods. Additionally, you must implement this function using only basic Python data structures (string, list, etc.) and Python control structures (if, elif, else, for, while, etc.).","solution":"def reverse_string(s): Takes a string s and returns a new string that is a reverse copy of s. reversed_str = \\"\\" for i in range(len(s) - 1, -1, -1): reversed_str += s[i] return reversed_str"},{"question":"Create a function that takes in three integer parameters: \`a\`, \`b\`, and \`c\`. The function should print out the sum of all three integers.","solution":"def sum_of_three(a, b, c): Prints the sum of a, b, and c. total = a + b + c print(total) return total # Returning the value for testing purposes"},{"question":"Create a function that converts a binary string to a decimal number. The function \`binary_string_to_decimal\` takes a string that only contains the characters '0' and '1' and returns the decimal equivalent of this binary string as an integer. The function should return \`-1\` if the input string is not a valid binary string.","solution":"def binary_string_to_decimal(binary_string): Converts a binary string (only containing '0' and '1') to a decimal number. Returns -1 if the input is not a valid binary string. # Check if the input string is a valid binary string if not all(char in '01' for char in binary_string): return -1 # Convert binary string to decimal try: decimal_number = int(binary_string, 2) return decimal_number except ValueError: return -1"},{"question":"Create a function that can take in a variable number of arguments and return the sum of all arguments. You should also handle the case where no arguments are passed in.","solution":"def sum_all(*args): Returns the sum of all arguments. If no arguments are passed, return 0. return sum(args)"},{"question":"Create a function that filters out prime numbers from a list and returns a new list containing only the composite numbers. In Python, how can I write a function named \`filter_primes\` that accomplishes this task?","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def filter_primes(numbers): Filters out prime numbers from a list and returns a new list containing only composite numbers. return [n for n in numbers if not is_prime(n)]"},{"question":"Create a function that takes a list of strings as input and returns a new list containing only the strings that start with a specific letter. For instance, if the list is \`['apple', 'banana', 'grape', 'peach', 'avocado']\` and the letter is 'a', the function should return \`['apple', 'avocado']\`.","solution":"def filter_strings_by_first_letter(strings, letter): Filters a list of strings returning only those that start with the specified letter. :param strings: List of strings to filter :param letter: Letter that filtered strings should start with :return: List of strings starting with the specified letter return [string for string in strings if string.startswith(letter)]"},{"question":"Create a function that takes two integers, \`M\` and \`N\`, and returns the list of prime numbers between \`M\` and \`N\` (inclusive). The function should efficiently find prime numbers and handle edge cases, such as when \`M\` is greater than \`N\`.","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def find_primes(M, N): Returns a list of prime numbers between M and N (inclusive). if M > N: return [] primes = [] for i in range(M, N + 1): if is_prime(i): primes.append(i) return primes"},{"question":"Create a function that takes a positive integer as an argument and returns a list of its factors.","solution":"def get_factors(n): Returns a list of factors of the positive integer n. if n < 1: raise ValueError(\\"Input must be a positive integer.\\") factors = [] for i in range(1, n + 1): if n % i == 0: factors.append(i) return factors"},{"question":"Create a function that generates a Fibonacci sequence for a given number of elements.","solution":"def fibonacci_sequence(n): Returns a list containing the Fibonacci sequence with n elements. :param n: Number of elements in the Fibonacci sequence to generate. :return: List of n Fibonacci numbers. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] sequence = [0, 1] for i in range(2, n): sequence.append(sequence[-1] + sequence[-2]) return sequence"},{"question":"Create a function that should output the sum of every nth number from a given start number to an end number, inclusive. For example, the sum of every 3rd number from 5 to 20 would be 54 (5 + 11 + 17 + 23). The function should return this sum.","solution":"def sum_every_nth(start, end, n): Returns the sum of every nth number from start to end inclusive. total = 0 for i in range(start, end + 1): if (i - start) % n == 0: total += i return total"},{"question":"Create a function that takes a list of dictionaries as an input and return a new list with the dictionaries sorted by a specific key.","solution":"def sort_dicts_by_key(dicts_list, key): Takes a list of dictionaries and returns a new list with the dictionaries sorted by the specified key. If the key does not exist in a dictionary, that dictionary will be sorted to the end of the list. :param dicts_list: List of dictionaries to be sorted. :param key: The key to sort the dictionaries by. :return: A new list of dictionaries sorted by the specified key. return sorted(dicts_list, key=lambda x: x.get(key, float('inf')))"},{"question":"Create a function that multiplies two matrices. Assuming both matrices are 2D lists (list of lists) and have the compatible dimensions for multiplication. For example, a 2x3 matrix (list of two lists with three elements each) can be multiplied by a 3x2 matrix (list of three lists with two elements each).","solution":"def matrix_multiply(A, B): Multiplies two matrices A and B. :param A: A 2D list representing matrix A :param B: A 2D list representing matrix B :return: The result of the matrix multiplication A * B as a 2D list # Number of rows in A num_rows_A = len(A) # Number of columns in A (also number of rows in B) num_cols_A = len(A[0]) # Number of columns in B num_cols_B = len(B[0]) # Initialize the result matrix with zeros result = [[0] * num_cols_B for _ in range(num_rows_A)] # Perform the matrix multiplication for i in range(num_rows_A): for j in range(num_cols_B): for k in range(num_cols_A): result[i][j] += A[i][k] * B[k][j] return result"},{"question":"Create a function that takes a string as input and returns a list containing each word in the string, excluding any punctuation marks.","solution":"import re def split_words(input_string): Returns a list containing each word in the input string, excluding any punctuation marks. # Use regex to find all words ignoring punctuation marks words = re.findall(r'bw+b', input_string) return words"},{"question":"Create a function that takes in a string and returns the string with the first half and the second half reversed. If the string's length is odd, the extra character should be placed at the beginning of the reversed string.","solution":"def reverse_halves(s): Returns the string with the first half and the second half reversed. If the string's length is odd, the extra character is placed at the beginning of the reversed string. mid = len(s) // 2 if len(s) % 2 == 0: first_half, second_half = s[:mid], s[mid:] else: first_half, second_half = s[:mid+1], s[mid+1:] return second_half + first_half"},{"question":"Create a function that takes in three parameters. The first parameter is an array that contains a series of numbers. The second parameter is the starting index of the subarray, and the third parameter is the ending index of the subarray. The function should return the sum of the numbers within the specified range of indices.","solution":"def sum_subarray(arr, start_idx, end_idx): Returns the sum of the numbers in the array from start_idx to end_idx inclusive. Parameters: arr (list of int): The array containing the numbers. start_idx (int): The starting index of the subarray. end_idx (int): The ending index of the subarray. Returns: int: The sum of the numbers within the specified range of indices. return sum(arr[start_idx:end_idx + 1])"},{"question":"Create a function that takes three integers as arguments, where the first two integers (x and y) must be strictly less than 10. The function is designed to perform subtraction.","solution":"def subtract(x, y, z): Subtracts y and z from x. All three arguments x, y, z are integers, where x and y must be strictly less than 10. if x >= 10 or y >= 10: raise ValueError(\\"The first two integers must be strictly less than 10.\\") return x - y - z"},{"question":"Create a function that calculates the total price of an order, including tax. The function should take the subtotal of the order and the tax rate as parameters and return the total price. The tax rate should be a floating-point number between 0 and 1.","solution":"def calculate_total_price(subtotal, tax_rate): Calculates the total price of an order including tax. :param subtotal: The subtotal of the order (pre-tax amount). :param tax_rate: The tax rate as a floating-point number (e.g., 0.07 for 7% tax). :return: The total price including tax. if not (0 <= tax_rate <= 1): raise ValueError(\\"The tax rate must be a floating-point number between 0 and 1.\\") return subtotal + (subtotal * tax_rate)"},{"question":"Create a function that returns the nth smallest element in a list. The list can contain integers and can be of any length. The function should be efficient and handle large lists.","solution":"def nth_smallest_element(lst, n): Returns the nth smallest element in the list. Parameters: lst (list): The list from which to find the nth smallest element. n (int): The position (1-based) of the smallest element to find. Returns: int: The nth smallest element in the list. if not lst: raise ValueError(\\"List is empty\\") if n < 1 or n > len(lst): raise ValueError(\\"n is out of bounds\\") sorted_lst = sorted(lst) return sorted_lst[n-1]"},{"question":"Create a function that takes an integer array and returns the minimum value and the index position of that minimum value in the array. If there are multiple occurrences of the minimum value, return the index of the first occurrence.","solution":"def find_min_and_index(arr): Returns the minimum value and the index position of that minimum value in the array. If there are multiple occurrences of the minimum value, returns the index of the first occurrence. :param arr: List[int], a list of integers :return: Tuple[int, int], the minimum value and the index of the first occurrence of that minimum value if not arr: raise ValueError(\\"Array must not be empty\\") min_value = arr[0] min_index = 0 for index, value in enumerate(arr): if value < min_value: min_value = value min_index = index return (min_value, min_index)"},{"question":"Create a function that takes a list of integers as input and returns the maximum sum of a contiguous subarray. This function should implement Kadane's algorithm efficiently.","solution":"def max_subarray_sum(nums): Returns the maximum sum of a contiguous subarray using Kadane's algorithm. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that takes an array of unique integers and returns the second smallest integer in the array. If the array does not contain at least two unique integers, the function should return \`None\`.","solution":"def second_smallest(arr): Returns the second smallest integer in the array or None if not possible. if len(arr) < 2: return None # Initialize the first and second smallest first_smallest = second_smallest = float('inf') for num in arr: if num < first_smallest: second_smallest, first_smallest = first_smallest, num elif first_smallest < num < second_smallest: second_smallest = num # Check if we found a second smallest number return second_smallest if second_smallest != float('inf') else None"},{"question":"Create a function that determines if a given number is a perfect square. A perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, 1, 4, 9, and 16 are perfect squares while 3 and 14 are not. You must not use the built-in \`sqrt()\`, \`pow()\`, or any other mathematical functions to check for a perfect square. Instead, use a loop to determine if there exists an integer \`i\` such that \`i * i\` equals the given number. If such an \`i\` exists, the function should return \`true\`; otherwise, it should return \`false\`.","solution":"def is_perfect_square(n): Determines if the given number is a perfect square. Args: n (int): The number to check. Returns: bool: True if n is a perfect square, False otherwise. if n < 0: return False i = 0 while i * i <= n: if i * i == n: return True i += 1 return False"},{"question":"Create a function that takes a string as an input and checks if the string is a palindrome, meaning it reads the same backward as forward.","solution":"def is_palindrome(s): Checks if the given string is a palindrome. :param s: The input string. :return: True if the string is a palindrome, False otherwise. # Removing case sensitivity and spaces for uniformity s = ''.join(e for e in s if e.isalnum()).lower() return s == s[::-1]"},{"question":"Create a function that takes a number as an input and returns its binary representation, but with a prefix '0b' and a suffix '_bin' to indicate that it's a binary string. For example, if the input is 5, the output should be '0b101_bin'.","solution":"def to_custom_binary(n): Converts an integer n to a binary string with '0b' prefix and '_bin' suffix. Parameters: n (int): The number to be converted to binary. Returns: str: The custom binary representation of the number. return f\\"0b{bin(n)[2:]}_bin\\""},{"question":"Create a function that takes in an array of integers as input and returns a new array where each element is the sum of the elements in the original array up to and including that index. For example, if the input array is [1, 2, 3, 4], the output should be [1, 3, 6, 10]. Additionally, write a second function that takes this new array and calculates the average of all the elements.","solution":"def cumulative_sum(arr): Returns an array where each element is the cumulative sum of the elements in the original array up to and including that index. result = [] total = 0 for num in arr: total += num result.append(total) return result def average(arr): Returns the average of the elements in the array. if len(arr) == 0: return 0 return sum(arr) / len(arr)"},{"question":"Create a function that identifies the smallest prime number greater than a given number. For example, if the input number is 11, the function should return 13 as it is the smallest prime number greater than 11.","solution":"import math def is_prime(n): Check if the given number n is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def smallest_prime_greater_than(n): Returns the smallest prime number greater than the given number n. candidate = n + 1 while not is_prime(candidate): candidate += 1 return candidate"},{"question":"Create a function that takes two parameters: an array of integers and a single integer called the \\"target.\\" The function should return a tuple containing two integers, where the first integer is the count of numbers in the array that are smaller than the target, and the second integer is the count of numbers that are larger than the target.","solution":"def count_smaller_and_larger(arr, target): Returns a tuple with the count of numbers in the array that are smaller than the target, and the count of numbers that are larger than the target. Parameters: arr (list of ints): The array of integers. target (int): The target integer. Returns: tuple: A tuple containing two integers. smaller_count = 0 larger_count = 0 for num in arr: if num < target: smaller_count += 1 elif num > target: larger_count += 1 return (smaller_count, larger_count)"},{"question":"Create a function that inserts a new key-value pair into a dictionary, only if the key does not already exist in the dictionary. If the key already exists, do nothing.","solution":"def insert_if_not_exists(dictionary, key, value): Inserts a key-value pair into the dictionary only if the key does not already exist. Args: dictionary (dict): The dictionary to be modified. key: The key to be inserted. value: The value to be associated with the key. Returns: dict: The updated dictionary. if key not in dictionary: dictionary[key] = value return dictionary"},{"question":"Create a function that converts British pounds to US dollars using the current exchange rate. The function should take an amount in British pounds and return the equivalent amount in US dollars. Assume the current exchange rate is 1 pound = 1.35 USD.","solution":"def pounds_to_usd(pounds): Converts British pounds to US dollars using the current exchange rate of 1 pound = 1.35 USD. Parameters: pounds (float): The amount in British pounds. Returns: float: The equivalent amount in US dollars. exchange_rate = 1.35 return pounds * exchange_rate"},{"question":"Create a function that takes a 2D array as input and returns a 1D array containing the elements of the 2D array in a specific order. The order should be such that the elements are first read from the top-left corner of the 2D array and move right, then move down the next column from right to left, and repeat until all elements are read.","solution":"def zigzag_convert(matrix): Convert a 2D array into a 1D array in a zigzag order. Starting from the top-left corner and moving right on the first row, then down the next column from right to left, and repeating until all elements are read. result = [] if not matrix: return result rows, cols = len(matrix), len(matrix[0]) for i in range(rows): if i % 2 == 0: # Left to right on even-indexed rows result.extend(matrix[i]) else: # Right to left on odd-indexed rows result.extend(matrix[i][::-1]) return result"},{"question":"Create a function that concatenates the first n elements of a list into a single string, with each element separated by a hyphen. If n is greater than the length of the list, return the entire list concatenated in the same manner.","solution":"def concatenate_elements(lst, n): Concatenates the first n elements of a list into a single string, with each element separated by a hyphen. Parameters: lst (list): List of elements to concatenate n (int): Number of elements to concatenate Returns: str: Concatenated string with elements separated by a hyphen # If n is greater than the length of the list, use the length of the list instead n = min(n, len(lst)) # Join the first n elements of the list with hyphens return '-'.join(map(str, lst[:n]))"},{"question":"Create a function that identifies the most common character in a given string. If there are multiple characters with the same highest frequency, return a list of these characters sorted in alphabetical order.","solution":"from collections import Counter def most_common_char(s): Identifies the most common character(s) in the given string. If there are multiple characters with the same highest frequency, return a list of these characters sorted in alphabetical order. if not s: return [] # Count the frequency of each character counter = Counter(s) max_freq = max(counter.values()) # Find all characters with the highest frequency most_common_chars = [char for char, freq in counter.items() if freq == max_freq] return sorted(most_common_chars)"},{"question":"Create a function that takes two lists as input, list1 and list2, and returns a list that represents the union of the two lists. The union of two sets or lists should contain all the elements that are present in either of the sets/lists, without duplicates.","solution":"def union_lists(list1, list2): Returns a list that represents the union of the two input lists. The union contains all the elements that are present in either of the lists, without duplicates. # Using set to remove duplicates and get the union return list(set(list1) | set(list2))"},{"question":"Create a function that takes an integer as a parameter and returns the list of all divisors of that number, excluding the number itself.","solution":"def divisors(n): Returns the list of all divisors of n, excluding n itself. Parameters: n (int): The number for which to find the divisors. Returns: List[int]: A list of divisors of n. if n <= 0: return [] result = [i for i in range(1, n) if n % i == 0] return result"},{"question":"Create a function that takes in an array of integers and finds the two numbers that sum up to a given target and returns their indices.","solution":"def two_sum(nums, target): Returns indices of the two numbers such that they add up to the target. num_to_index = {} for index, number in enumerate(nums): difference = target - number if difference in num_to_index: return [num_to_index[difference], index] num_to_index[number] = index return None"},{"question":"Create a function that takes a list of integers and returns a new list where each element is the sum of the elements of the original list up to that index. In other words, the new list should be a prefix sum array of the input list.","solution":"def prefix_sum(arr): Takes a list of integers and returns a new list where each element is the sum of the elements of the original list up to that index. :param arr: List of integers :return: Prefix sum array if not arr: return [] prefix_sum_array = [arr[0]] for i in range(1, len(arr)): prefix_sum_array.append(prefix_sum_array[-1] + arr[i]) return prefix_sum_array"},{"question":"Create a function that will return true if all elements in a given list are sorted in ascending order. If not, return false.","solution":"def is_sorted_ascending(lst): Returns True if all elements in the list are sorted in ascending order, otherwise returns False. return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))"},{"question":"Create a function that takes an integer as an input and returns a string with the integer value translated to a binary string, enclosed in \\"db\\" at the beginning and the end. The binary string should not include the \\"0b\\" prefix that Python adds to its binary literals.","solution":"def int_to_db_binary(n): Convert an integer to a binary string enclosed in 'db'. Args: - n (int): The integer to be converted. Returns: - str: The binary representation of the input integer, enclosed in 'db'. binary_string = bin(n)[2:] # Convert to binary and remove '0b' prefix return f\\"db{binary_string}db\\""},{"question":"Create a function that takes a dictionary as input and returns a list of tuples, where each tuple contains a key-value pair from the dictionary. For example, the dictionary {'a': 1, 'b': 2} should return [('a', 1), ('b', 2)].","solution":"def dict_to_tuples(d): Converts a dictionary into a list of tuples where each tuple is a key-value pair. Args: d (dict): The dictionary to be converted. Returns: list: A list of tuples containing key-value pairs from the dictionary. return list(d.items())"},{"question":"Create a function that takes two numbers as input and returns a list of all even numbers between them, inclusive. If the first number is greater than the second number, the function should still return the even numbers between them in ascending order. If there are no even numbers between the two, the function should return an empty list.","solution":"def even_numbers_between(a, b): Returns a list of even numbers between a and b, inclusive. If there are no even numbers between them, returns an empty list. if a > b: a, b = b, a even_numbers = [num for num in range(a, b + 1) if num % 2 == 0] return even_numbers"},{"question":"Create a function that returns a list of even numbers from a given list of numbers.","solution":"def even_numbers(input_list): Returns a list of even numbers from the provided list. Parameters: input_list (list): A list of integers. Returns: list: A list containing the even numbers from the input list. return [num for num in input_list if num % 2 == 0]"},{"question":"Create a function that takes a list of integers and returns a new list where each element is the square of the original number. The function should be implemented in Python.","solution":"def square_elements(input_list): Takes a list of integers and returns a new list where each element is the square of the original number. :param input_list: List of integers :return: List of squared integers return [x**2 for x in input_list]"},{"question":"Create a function that takes a string argument and returns the first non-repeating character. If all characters repeat, the function should return -1. For example, \\"google\\" should return 'l'.","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the string \`s\`. If all characters repeat, returns -1. char_count = {} # Count occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find and return the first non-repeating character for char in s: if char_count[char] == 1: return char return -1"},{"question":"Create a function that rearranges an array so that all elements that are not divisible by three are moved to the front of the array, while maintaining the original order of these elements. After that, all the remaining elements (divisible by three) are moved to the back of the array, also maintaining their original order.","solution":"def rearrange_array(arr): Rearrange the array such that all elements not divisible by three are moved to the front while maintaining their original order, followed by elements divisible by three. not_divisible_by_three = [x for x in arr if x % 3 != 0] divisible_by_three = [x for x in arr if x % 3 == 0] return not_divisible_by_three + divisible_by_three"},{"question":"Create a function that transforms a given string into a new string with all uppercase letters, but only if the original string is at least 5 characters long. If the string is shorter than 5 characters, the function should return an error message.","solution":"def transform_string(s): Transforms the string 's' into uppercase if its length is at least 5 characters. Returns an error message if the string is shorter than 5 characters. if len(s) < 5: return \\"Error: String is too short.\\" return s.upper()"},{"question":"Create a function that takes a string as input and returns the number of distinct characters in the string, ignoring case sensitivity. For example, the string \\"HelloWorld\\" should return 7 because there are 7 distinct characters if we ignore case sensitivity.","solution":"def distinct_characters_count(s): Returns the number of distinct characters in the string, ignoring case sensitivity. return len(set(s.lower()))"},{"question":"Create a function that takes an array of integers and returns the number of elements that are greater than the previous element. This function should be efficient and handle large arrays.","solution":"def count_elements_greater_than_previous(arr): Returns the number of elements greater than the previous element. Parameters: arr (list): A list of integers. Returns: int: The count of elements greater than the previous element. if not arr: return 0 count = 0 for i in range(1, len(arr)): if arr[i] > arr[i - 1]: count += 1 return count"},{"question":"Create a function that takes a string \`s\` as input and returns a string where all vowels are reversed. Vowels are 'a', 'e', 'i', 'o', and 'u' (case-insensitive). The function should be able to handle both lower and upper case letters, and should ignore non-letter characters.","solution":"def reverse_vowels(s): Returns a string where all the vowels in the input string \`s\` are reversed. Vowels are considered case-insensitively and non-letter characters are ignored. vowels = 'aeiouAEIOU' s_list = list(s) left, right = 0, len(s) - 1 while left < right: if s_list[left] not in vowels: left += 1 continue if s_list[right] not in vowels: right -= 1 continue s_list[left], s_list[right] = s_list[right], s_list[left] left += 1 right -= 1 return ''.join(s_list)"},{"question":"Create a function that takes a list of integers as an argument and returns the factorial of the provided list of integers using recursion. The function should iterate over the provided list of integers, calculate the factorial for each integer and also consider the factorial of all the elements present so far in the list.","solution":"def factorial(n): Returns the factorial of a given number n. if n == 0 or n == 1: return 1 else: return n * factorial(n - 1) def list_factorials(lst): Returns a list where each element is the factorial of all the elements present so far in the list. result = [] for i in range(len(lst)): temp_product = 1 for j in range(i + 1): temp_product *= factorial(lst[j]) result.append(temp_product) return result"},{"question":"Create a function that takes in a list of numbers and returns a new list where all the numbers have been raised to the power of 3.","solution":"def cube_list(numbers): Takes a list of numbers and returns a new list with each number raised to the power of 3. Parameters: numbers (list): A list of numbers. Returns: list: A new list with each number raised to the power of 3. return [number ** 3 for number in numbers]"},{"question":"Create a function that returns True if all elements in a given list of numbers are less than the specified threshold, and False otherwise.","solution":"def all_less_than(numbers, threshold): Returns True if all elements in the given list are less than the specified threshold. :param numbers: List of numbers :param threshold: The threshold value :return: True if all elements are less than threshold, False otherwise return all(n < threshold for n in numbers)"},{"question":"Create a function that takes an integer as an argument and returns the sum of all the even numbers between 0 and the given integer (exclusive). For example, if the input integer is 10, the function should return the sum of 2, 4, 6, and 8. If the input integer is 5, the function should return 2 because the only even number between 0 and 5 is 2.","solution":"def sum_even_numbers(n): Returns the sum of all even numbers between 0 and n (exclusive). return sum(i for i in range(n) if i % 2 == 0)"},{"question":"Create a function that toggles the case of each character in a given string. If the string contains any digits, it should ignore them and only toggle the case of alphabetic characters. Digits and special characters should remain unchanged.","solution":"def toggle_case(s): Toggles the case of each character in the given string. Ignores digits and special characters. Args: s (str): The input string Returns: str: The string with toggled cases for alphabetic characters result = [] for char in s: if char.isalpha(): if char.islower(): result.append(char.upper()) else: result.append(char.lower()) else: result.append(char) return ''.join(result)"},{"question":"Create a function that generates a random list of 500 unique integers between 1 and 1000.","solution":"import random def generate_random_unique_list(): Generates a random list of 500 unique integers between 1 and 1000. return random.sample(range(1, 1001), 500)"},{"question":"Create a function that takes three parameters and returns the largest of the three. If the largest number is a multiple of 3, return a string stating that the largest number is \\"Divisible by 3\\". Otherwise, return the largest number itself.","solution":"def largest_of_three(a, b, c): Returns the largest of the three numbers. If the largest number is divisible by 3, it returns a string \\"Divisible by 3\\". largest = max(a, b, c) if largest % 3 == 0: return \\"Divisible by 3\\" else: return largest"},{"question":"Create a function that checks if all the alphabets in a string are characters of the English alphabet. The function should return true if all characters are alphabet letters, otherwise it should return false. The function should ignore any non-alphabet characters.","solution":"def all_alphabets_are_letters(s): Checks if all the alphabet characters in the string are English alphabet letters. Parameters: s (str): Input string to check. Returns: bool: True if all alphabet characters are English alphabet letters, False otherwise. for char in s: if char.isalpha() and not char.isascii(): return False return True"},{"question":"Create a function that takes a string as input and returns the first character that appears more than once in the string. If no character repeats, the function should return an empty string. The function should be case-sensitive, meaning 'A' and 'a' are considered different characters.","solution":"def first_repeated_char(s): Returns the first character that appears more than once in the string. If no character repeats, returns an empty string. Case-sensitive. :param s: Input string :return: First repeated character or empty string seen = set() for char in s: if char in seen: return char seen.add(char) return ''"},{"question":"Create a function that takes a list of integers as an input. It should return a list of lists, where each sublist contains consecutive integers from the input list. For example, if the input is [1, 2, 3, 5, 6, 8, 9], the output should be [[1, 2, 3], [5, 6], [8, 9]]. This function should ignore all non-consecutive integers that are not part of any continuous sequence.","solution":"def find_consecutive_sequences(nums): Given a list of integers, this function returns a list of lists where each sublist contains consecutive integers from the input list. if not nums: return [] result = [] current_sequence = [nums[0]] for i in range(1, len(nums)): if nums[i] == nums[i - 1] + 1: current_sequence.append(nums[i]) else: result.append(current_sequence) current_sequence = [nums[i]] result.append(current_sequence) return result"},{"question":"Create a function that checks whether a given integer N is a prime number. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. To help clarify, you should write a Python function named \`is_prime(N)\`. Your function should return \`True\` if N is a prime number and \`False\` otherwise. Additionally, you need to include a simple check mechanism to verify that your function works correctly with a few example inputs.","solution":"def is_prime(N): Returns True if the given integer N is a prime number, and False otherwise. if N <= 1: return False if N == 2: return True if N % 2 == 0: return False for i in range(3, int(N**0.5) + 1, 2): if N % i == 0: return False return True"},{"question":"Create a function that takes an integer \`n\`, and returns the sum of the squares of all even numbers from 0 to \`n\`. Ensure your function is efficient.","solution":"def sum_of_squares_of_evens(n): Returns the sum of the squares of all even numbers from 0 to n. return sum(i**2 for i in range(0, n+1, 2))"},{"question":"Create a function that generates a list of Fibonacci numbers up to a given number n. The function should use a recursive approach to generate the list. Additionally, the function should handle edge cases such as when n is less than or equal to 0.","solution":"def fibonacci_recursive(n, a=0, b=1, fib_list=None): Generates a list of Fibonacci numbers up to a given number n using recursion. :param n: The up to limit for the Fibonacci sequence. :param a: The first number in the Fibonacci sequence. :param b: The second number in the Fibonacci sequence. :param fib_list: The list to store the Fibonacci sequence. :return: A list of Fibonacci numbers up to n. if fib_list is None: fib_list = [] if n <= 0: return fib_list if a >= n: return fib_list fib_list.append(a) return fibonacci_recursive(n, b, a + b, fib_list)"},{"question":"Create a function that takes in a list of numbers and returns a new list where each number is increased by an increment of 1.","solution":"def increment_list(numbers): Takes a list of numbers and returns a new list with each number incremented by 1. return [number + 1 for number in numbers]"},{"question":"Create a function that takes in two parameters, a string and an integer, and returns a new string where the original string has been repeated 'n' times, where 'n' is the integer parameter. If the integer is negative, return an empty string.","solution":"def repeat_string(s, n): Returns a new string where the original string \`s\` has been repeated \`n\` times. If \`n\` is negative, return an empty string. if n < 0: return \\"\\" return s * n"},{"question":"Create a function that takes a list of integers and returns the sum of the largest and smallest numbers in the list. The function should handle cases where the list is empty or contains only one element, and it should raise a ValueError if any non-integer elements are found.","solution":"def sum_of_largest_and_smallest(nums): Returns the sum of the largest and smallest numbers in the list. Raises ValueError if the list contains non-integer elements. If the list is empty, return 0. If the list contains only one element, return that element twice. if not all(isinstance(num, int) for num in nums): raise ValueError(\\"List contains non-integer elements\\") if not nums: return 0 if len(nums) == 1: return nums[0] * 2 return min(nums) + max(nums)"},{"question":"Create a function that returns the number of words in a given sentence.","solution":"def count_words(sentence): Returns the number of words in the given sentence. if not sentence: return 0 # Split the sentence by whitespace to get the words words = sentence.split() return len(words)"},{"question":"Create a function that takes a string and returns a new string with each character repeated twice. For example, \`double_chars('abc')\` should return \`'aabbcc'\`.","solution":"def double_chars(s): Returns a new string with each character in the input string repeated twice. return ''.join([char * 2 for char in s])"},{"question":"Create a function that takes in a list of numbers and returns the maximum sum of a subarray within the list. Use Kadane's Algorithm.","solution":"def max_subarray_sum(nums): Returns the maximum sum of a subarray within the list nums using Kadane's Algorithm. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that , given a list of integers, returns a list of tuples containing the integer and its square. The function should handle various list lengths, including empty lists. The solution should be dynamic and efficient enough to handle large lists.","solution":"def integer_and_squares(lst): Returns a list of tuples containing each integer and its square. Parameters: lst (list): A list of integers Returns: list: A list of tuples where each tuple contains an integer and its square return [(x, x ** 2) for x in lst]"},{"question":"Create a function that takes in a dictionary of pairs, and returns a dictionary with the same pairs as keys, but the values as the keys, and the values of those pairs as the values.","solution":"def swap_dict_pairs(d): Takes a dictionary d and returns a new dictionary with keys and values swapped. Parameters: d (dict): The dictionary to have its keys and values swapped. Returns: dict: A new dictionary with keys and values swapped. return {v: k for k, v in d.items()}"},{"question":"Create a function that takes two input strings and combines them into one.","solution":"def combine_strings(str1, str2): Takes two input strings and combines them into one. return str1 + str2"},{"question":"Create a function that can find all the unique words in a given sentence and return them as a list. Words are defined as sequences of characters separated by spaces. For example, the input \\"Hello world hello\\" should return \`['Hello', 'world']\`.","solution":"def unique_words(sentence): Returns a list of unique words in a given sentence. words = sentence.split() unique = [] seen = set() for word in words: if word not in seen: unique.append(word) seen.add(word) return unique"},{"question":"Create a function that takes a list of integers and returns the product of the numbers that are either the smallest, second smallest, largest, or second largest in the list.","solution":"def special_product(nums): Returns the product of the smallest, second smallest, largest, and second largest numbers in the input list. Parameters: nums (list of int): List of integers. Returns: int: The product of the special numbers. if len(nums) < 4: raise ValueError(\\"List must contain at least four numbers.\\") nums_sorted = sorted(nums) smallest = nums_sorted[0] second_smallest = nums_sorted[1] second_largest = nums_sorted[-2] largest = nums_sorted[-1] product = smallest * second_smallest * second_largest * largest return product"},{"question":"Create a function that takes in a list of integers and returns a new list where each element is the sum of all elements except the current one.","solution":"def sum_except_current(lst): Returns a new list where each element is the sum of all elements except the current one. Parameters: lst (list): A list of integers Returns: list: A new list where each element is the sum of all elements in the input list except the current one total_sum = sum(lst) return [total_sum - x for x in lst]"},{"question":"Create a function that takes two integer arguments and returns their sum, but only if both integers are even numbers. If either of the integers is odd, return a message stating \\"Both numbers must be even.\\"","solution":"def add_if_even(a, b): Returns the sum of a and b if both are even, else returns a message. if a % 2 == 0 and b % 2 == 0: return a + b else: return \\"Both numbers must be even.\\""},{"question":"Create a function that generates the longest possible palindrome by inserting the minimum number of characters at the beginning of the input string.","solution":"def min_insert_palindrome(s): Generate the longest possible palindrome by inserting the minimum number of characters at the beginning of the input string. Args: s (str): The input string. Returns: str: The palindrome string by inserting the minimum number of characters. if s == s[::-1]: return s # Create a temporary string to perform an operation to find the shortest prefix rev_s = s[::-1] concat = s + \\"#\\" + rev_s lps = [0] * len(concat) for i in range(1, len(concat)): j = lps[i - 1] while j > 0 and concat[i] != concat[j]: j = lps[j - 1] if concat[i] == concat[j]: j += 1 lps[i] = j # Get the characters to add at the start add_part = rev_s[:len(s) - lps[-1]] return add_part + s"},{"question":"Create a function that takes in an array of integers. Your function should determine if the array contains any duplicates, and return the duplicates as a new array. If there are no duplicates, it should return an empty array.","solution":"def find_duplicates(arr): Returns a list of duplicates in the given array. Parameters: arr (list): A list of integers. Returns: list: A list containing duplicates, empty if none. seen = set() duplicates = set() for num in arr: if num in seen: duplicates.add(num) else: seen.add(num) return list(duplicates)"},{"question":"Create a function that takes a list of numbers as an argument and returns the highest two numbers in the list.","solution":"def highest_two_numbers(numbers): Returns the highest two numbers from the provided list. :param numbers: List of integers :return: Tuple containing the highest two numbers if not numbers: raise ValueError(\\"The list cannot be empty.\\") if len(numbers) < 2: raise ValueError(\\"The list must contain at least two numbers.\\") first, second = float('-inf'), float('-inf') for number in numbers: if number > first: second = first first = number elif number > second: second = number return (first, second)"},{"question":"Create a function that does not return anything, accepts an integer as input parameter, and does not return any value. The function should print the string \\"The number is [number]\\" followed by the input integer value and the letter 's' if the integer is greater than 1, or the letter 't' if the integer is exactly 1.","solution":"def print_number_description(number): Prints the description of the number. If the number is greater than 1, it prints \\"The number is [number]s\\". If the number is exactly 1, it prints \\"The number is 1t\\". if number == 1: print(f\\"The number is {number}t\\") else: print(f\\"The number is {number}s\\")"},{"question":"Create a function that takes three integers as arguments and prints the sum of the arguments. Also, include an error handling mechanism to ensure that the inputs are indeed integers.","solution":"def print_sum(a, b, c): Prints the sum of three integers a, b, and c. Includes error handling to check if the inputs are integers. try: a = int(a) b = int(b) c = int(c) except ValueError: print(\\"All inputs must be integers\\") return result = a + b + c print(result) return result"},{"question":"Create a function that assigns a number to an event and calls the function with an event argument.","solution":"def get_event_number(event): Returns a number based on the event string. Known event numbers: - 'start': 1 - 'stop': 2 - 'pause': 3 - 'resume': 4 Any other event returns 0. event_mapping = { 'start': 1, 'stop': 2, 'pause': 3, 'resume': 4 } return event_mapping.get(event, 0)"},{"question":"Create a function that returns the first and last characters of a given string. If the string has only one character, return that character twice. If the string is empty, return an empty string.","solution":"def first_and_last(s): Returns a string containing the first and last character of the input string s. If the string has only one character, returns that character twice. If the string is empty, returns an empty string. :param s: str - input string :return: str - string with first and last characters or special conditions handled if len(s) == 0: return \\"\\" elif len(s) == 1: return s * 2 else: return s[0] + s[-1]"},{"question":"Create a function that determines if a given string is a palindrome, meaning it reads the same backward as forward, and return a boolean value true or false. Also, ensure the function is case-insensitive, specifically, converting all input strings to lowercase or uppercase before checking for palindrome status.","solution":"def is_palindrome(s): Determines if the given string is a palindrome. Args: s: str Returns: bool: True if the string is a palindrome, False otherwise. # Convert the string to lowercase s = s.lower() # Remove non-alphanumeric characters s = ''.join(char for char in s if char.isalnum()) # Check if the string reads the same backward and forward return s == s[::-1]"},{"question":"Create a function that takes a string, 's', as input and returns a new string where all the characters are equal and repeated n times. If n is less than 1, the function should return an empty string.","solution":"def repeat_chars(s, n): Returns a new string where all characters in s are equal and repeated n times. If n is less than 1, returns an empty string. if n < 1: return \\"\\" return ''.join(c * n for c in s)"},{"question":"Create a function that takes in a string and returns the string with numbers removed.","solution":"import re def remove_numbers(input_string): Removes all numerical digits from the input string. result = re.sub(r'd', '', input_string) return result"},{"question":"Create a function that takes two strings as input and returns the number of characters that are different between them. For example, if the two strings are \\"apple\\" and \\"apples\\", the function should return 1 because there is only one character that differs ('s' in the second string).","solution":"def count_different_characters(str1, str2): Returns the number of characters that are different between two strings. # Ensure inputs are strings if not isinstance(str1, str) or not isinstance(str2, str): raise ValueError(\\"Both inputs must be strings\\") # Initialize the difference counter diff_counter = abs(len(str1) - len(str2)) # Iterate through the shortest string for i in range(min(len(str1), len(str2))): if str1[i] != str2[i]: diff_counter += 1 return diff_counter"},{"question":"Create a function that takes a number as an argument and checks if the number is a palindrome (i.e. reads the same forwards and backwards). The function should return True or False accordingly.","solution":"def is_palindrome(number): Returns True if the given number is a palindrome, False otherwise. num_str = str(number) return num_str == num_str[::-1]"},{"question":"Create a function that takes an array of integers and returns the index of a target number if it is found in the array, and -1 if it is not found. The function should use a binary search algorithm. Here is the signature: \`int binary_search(int arr[], int n, int target);\`","solution":"def binary_search(arr, n, target): Perform a binary search to find the target in the array. :param arr: List of integers :param n: Number of elements in the array :param target: The target integer to find :return: Index of the target if found, otherwise -1 left, right = 0, n - 1 while left <= right: mid = left + (right - left) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Create a function that takes in a list of integers, and returns a new list containing the squares of all even numbers from the original list. The application of the square operation to negative even numbers should be considered as applying to their absolute values.","solution":"def square_even_numbers(lst): Takes a list of integers and returns a new list of the squares of all even numbers. The square operation is applied to the absolute values of negative even numbers. return [abs(x)**2 for x in lst if x % 2 == 0]"},{"question":"Create a function that accepts a list of integers and returns the list sorted in ascending order using a specific sorting algorithm of your choice. Please provide the implementation in Python.","solution":"def bubble_sort(arr): Sorts a list of integers in ascending order using bubble sort algorithm. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Create a function that takes two parameters, an integer and a list. The function should check if the integer is present in the list and return True if it is, and False otherwise.","solution":"def is_integer_in_list(num, lst): Returns True if num is in lst, else False. return num in lst"},{"question":"Create a function that takes two arguments, both of which will be numbers. Your function will return \\"Fizz\\" if the first number is a multiple of the second number. Otherwise, itreturns the first number. If the second number is 0, your function should return \\"Error\\".","solution":"def fizz_or_number(x, y): Returns \\"Fizz\\" if x is a multiple of y, otherwise returns x. If y is 0, returns \\"Error\\". if y == 0: return \\"Error\\" elif x % y == 0: return \\"Fizz\\" else: return x"},{"question":"Create a function that takes a string as input and returns a dictionary representing the frequency of each character in the string, including spaces and punctuation. The dictionary should have characters as keys and their frequencies as values. Additionally, the function should ignore the case of characters, meaning 'A' and 'a' should be counted as the same.","solution":"def character_frequency(s): Returns a dictionary representing the frequency of each character in the string, ignoring case. freq_dict = {} for char in s: char = char.lower() # Ignore case if char in freq_dict: freq_dict[char] += 1 else: freq_dict[char] = 1 return freq_dict"},{"question":"Create a function that checks if a given string contains any special characters or not. The function should return \`true\` if the string contains at least one special character, and \`false\` otherwise. Special characters include: ~!@#%^&*()_+\`{}|:\\"<>?","solution":"import re def contains_special_characters(s): Returns True if the given string contains any special characters, otherwise False. Special characters include: ~!@#%^&*()_+\`{}|:\\"<>? special_characters_pattern = re.compile(r'[~!@#%^&*()_+-=\`{}|:\\"<>?]') return bool(special_characters_pattern.search(s))"},{"question":"Create a function that takes as input a list of numbers and returns the largest negative number in the list. If there are no negative numbers, the function should return None.","solution":"def largest_negative(numbers): Returns the largest negative number in the list. If there are no negative numbers, returns None. Args: numbers (list of int/float): The list of numbers. Returns: int/float/None: The largest negative number or None if no negative numbers are found. negatives = [num for num in numbers if num < 0] return max(negatives) if negatives else None"},{"question":"Create a function that takes a list of integers and returns the number of even numbers in the list. How should the function be structured?","solution":"def count_even_numbers(nums): Returns the number of even numbers in the list. Parameters: nums (list): A list of integers. Returns: int: The count of even integers in the list. return len([num for num in nums if num % 2 == 0])"},{"question":"Create a function that takes in an integer \`n\` and returns a string containing the numbers from 1 to \`n\` inclusive, separated by commas. If \`n\` is less than 1, the function should return an empty string.","solution":"def generate_numbers_string(n): Generate a string of numbers from 1 to n inclusive, separated by commas. Parameters: n (int): The upper limit of the numbers in the string. Returns: str: A string of numbers from 1 to n, separated by commas. For n < 1, returns an empty string. if n < 1: return \\"\\" return \\",\\".join(map(str, range(1, n + 1)))"},{"question":"Create a function that takes a list of integers and returns the sum of their squares. The function should be named \`sum_of_squares\`. Assume that the input list contains non-negative integers.","solution":"def sum_of_squares(nums): Returns the sum of the squares of a list of non-negative integers. return sum(x ** 2 for x in nums)"},{"question":"Create a function that takes an integer \`n\` and returns the prime factors of \`n\` as a tuple, sorted from the smallest to the largest. For example, for the input \`n=12\`, the function should return \`(2, 2, 3)\` since \`12 = 2 * 2 * 3\`.","solution":"def prime_factors(n): Returns the prime factors of the given integer \`n\` as a tuple, sorted from the smallest to the largest. i = 2 factors = [] while i * i <= n: while (n % i) == 0: factors.append(i) n //= i i += 1 if n > 1: factors.append(n) return tuple(factors)"},{"question":"Create a function that takes two arrays as input. It should calculate the dot product of these two arrays if they have compatible dimensions. If they do not, the function should return an error message stating that the operation cannot be performed due to incompatible dimensions.","solution":"def dot_product(arr1, arr2): Return the dot product of two arrays if they have compatible dimensions. If not, return an error message. if len(arr1) != len(arr2): return \\"Error: Incompatible dimensions\\" return sum(a * b for a, b in zip(arr1, arr2))"},{"question":"Create a function that takes two lists as input and returns a new list containing the elements that are common to both input lists. Ensure that the function is case-insensitive when comparing string elements and that duplicates are removed from the resulting list.","solution":"def common_elements(list1, list2): Returns a list containing the elements that are common to both input lists, ignoring case and without duplicates. # Create sets from both lists with all elements in lowercase set1 = set(item.lower() for item in list1) set2 = set(item.lower() for item in list2) # Find the intersection of both sets common_set = set1.intersection(set2) # Return the sorted list of the common elements return sorted(list(common_set))"},{"question":"Create a function that takes an integer as input and returns the binary representation of that integer in a string format. You should not use any built-in binary conversion functions or methods.","solution":"def integer_to_binary_string(n): Converts an integer to its binary representation in string format. Parameters: n (int): The integer to convert. Returns: str: The binary representation of the integer. if n == 0: return \\"0\\" is_negative = n < 0 if is_negative: n = -n binary_digits = [] while n > 0: binary_digits.append(str(n % 2)) n = n // 2 if is_negative: return '-' + ''.join(reversed(binary_digits)) else: return ''.join(reversed(binary_digits))"},{"question":"Create a function that calculates and returns the sum of all the elements in a given 2D array. Ensure the function can handle arrays of varying sizes.","solution":"def sum_2d_array(arr): Returns the sum of all the elements in a given 2D array. :param arr: List[List[int]] - A 2D array of integers :return: int - The sum of all elements in the 2D array total_sum = 0 for row in arr: for element in row: total_sum += element return total_sum"},{"question":"Create a function that takes a string and a character as input. Write a function that counts the number of occurrences of the input character in the string. The function should also handle case sensitivity (i.e., it should count 'A' and 'a' as different characters).","solution":"def count_occurrences(input_string, char): Returns the number of occurrences of char in the input_string, considering case sensitivity. :param input_string: string, the string in which to count occurrences of char :param char: string, the character whose occurrences in input_string are to be counted :return: int, the number of occurrences of char in input_string if len(char) != 1: raise ValueError(\\"The 'char' parameter should be a single character.\\") return input_string.count(char)"},{"question":"Create a function that takes a string as input and returns a new string where the characters are shuffled randomly. How can I achieve this using Python?","solution":"import random def shuffle_string(s): Returns a new string where the characters of the input string s are shuffled randomly. s_list = list(s) random.shuffle(s_list) return ''.join(s_list)"},{"question":"Create a function that takes two integers as input and returns the sum of all prime numbers between the two integers (inclusive). If either of the input integers is less than 2, the function should return a default value of -1. Otherwise, return the sum of all prime numbers found. If the range does not contain any prime numbers, return 0.","solution":"def is_prime(n): Helper function to determine if a number is prime. if n < 2: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def sum_primes_between(a, b): Returns the sum of all prime numbers between a and b (inclusive). If either a or b is less than 2, returns -1. if a < 2 or b < 2: return -1 start = min(a, b) end = max(a, b) prime_sum = sum(x for x in range(start, end + 1) if is_prime(x)) return prime_sum"},{"question":"Create a function that takes a text file and returns its contents as a string. Write the function in Python.","solution":"def read_file(file_path): Reads the contents of a text file and returns it as a string. :param file_path: Path to the text file :return: Contents of the text file as a string with open(file_path, 'r') as file: return file.read()"},{"question":"Create a function that checks if a string is a palindrome, ignoring case and non-alphanumeric characters. A palindrome reads the same backward as forward, considering only alphanumeric characters and ignoring cases. For example, \\"A man, a plan, a canal: Panama\\" is a palindrome, but \\"race a car\\" is not.","solution":"import re def is_palindrome(s): Checks if the given string is a palindrome, ignoring case and non-alphanumeric characters. Args: s (str): The string to check. Returns: bool: True if the string is a palindrome, False otherwise. filtered_str = re.sub(r'[^A-Za-z0-9]', '', s).lower() return filtered_str == filtered_str[::-1]"},{"question":"Create a function that formats a list of numbers into a string with commas.","solution":"def format_with_commas(numbers): Formats a list of numbers into a string with commas separating the numbers. Args: numbers (list of int): The list of numbers to be formatted. Returns: str: A string with the numbers separated by commas. return ', '.join(map(str, numbers))"},{"question":"Create a function that takes a matrix of numbers and an integer as an input. The function should return a new matrix where the elements of the original matrix are shifted right by the given integer. The right shift means that the elements should be shifted to the right within their respective rows. If the shift count exceeds the number of columns in the matrix, the excess should wrap around to the beginning of the row.","solution":"def shift_matrix_right(matrix, shift): This function shifts the elements of the given matrix to the right by the given shift count. num_rows = len(matrix) num_cols = len(matrix[0]) # Normalize shift count if it exceeds the number of columns shift = shift % num_cols if num_cols == 0 or shift == 0: return matrix shifted_matrix = [] for row in matrix: shifted_row = row[-shift:] + row[:-shift] shifted_matrix.append(shifted_row) return shifted_matrix"},{"question":"Create a function that checks whether a given number is a power of 2. A power of 2 is a number that can be expressed as 2 raised to a non-negative integer. For example, 1, 2, 4, 8 are powers of 2 but 3, 5, 7 are not.","solution":"def is_power_of_2(n): Checks whether a given number n is a power of 2. Parameters: n (int): The number to check. Returns: bool: True if n is a power of 2, False otherwise. if n <= 0: return False return (n & (n - 1)) == 0"},{"question":"Create a function that takes a string as input and returns the output string with any repeating characters removed. The function should only keep one instance of each character in the order they first appear.","solution":"def remove_repeats(input_string): Returns a string with all repeating characters removed, keeping only the first instance of each character. seen = set() output_string = [] for char in input_string: if char not in seen: seen.add(char) output_string.append(char) return ''.join(output_string)"},{"question":"Create a function that can accept a callback function, and a time in milliseconds. The function should execute the provided callback after the specified time.","solution":"import time def execute_after_delay(callback, delay_ms): Executes the provided callback after the specified delay in milliseconds. :param callback: The callback function to be executed. :param delay_ms: The delay in milliseconds before execution. time.sleep(delay_ms / 1000.0) callback()"},{"question":"Create a function that takes an array as a parameter and returns the frequency of the most occurring item in the array. If there is a tie for the most occurring item, return the frequency of the item that appears first in the array.","solution":"def most_frequent_item_count(array): Returns the frequency of the most occurring item in the array. If there is a tie, returns the frequency of the item that appears first. if not array: return 0 frequency_dict = {} for item in array: if item in frequency_dict: frequency_dict[item] += 1 else: frequency_dict[item] = 1 most_frequent_item = None highest_frequency = 0 for item in array: if frequency_dict[item] > highest_frequency: highest_frequency = frequency_dict[item] most_frequent_item = item return highest_frequency"},{"question":"Create a function that takes a list of integers as input and returns the length of the longest continuous subsequence with an alternating sum. The alternating sum of a sequence is the sum of its elements, considering the first element as positive and the subsequent elements as alternatingly positive and negative.","solution":"def longest_alternating_subsequence(nums): Returns the length of the longest continuous subsequence with an alternating sum. An alternating sum is calculated as the sum of its elements switching between positive and negative. :param nums: List of integers :type nums: List[int] :return: Length of the longest such subsequence :rtype: int if not nums: return 0 max_len = 1 # there's at least one element, so min_len is 1 current_len = 1 for i in range(1, len(nums)): # Check for alternating sum pattern if (nums[i-1] > 0 and nums[i] < 0) or (nums[i-1] < 0 and nums[i] > 0): current_len += 1 else: max_len = max(max_len, current_len) current_len = 1 return max(max_len, current_len)"},{"question":"Create a function that takes two arrays as an argument and returns a new array where each element is the product of corresponding elements in the two arrays.","solution":"def multiply_arrays(arr1, arr2): Takes two arrays as arguments and returns a new array where each element is the product of corresponding elements in the two arrays. Args: arr1 (list of int/float): First input array. arr2 (list of int/float): Second input array. Returns: list of int/float: Array containing the products of corresponding elements. Raises: ValueError: If the input arrays have different lengths. if len(arr1) != len(arr2): raise ValueError(\\"Input arrays must have the same length\\") return [x * y for x, y in zip(arr1, arr2)]"},{"question":"Create a function that takes the radius of a circle as input and calculates its circumference and area using the formulas C = 2 * π * r and A = π * r^2. Use the math module for π.","solution":"import math def circle_metrics(radius): Returns the circumference and area of a circle given its radius. circumference = 2 * math.pi * radius area = math.pi * radius ** 2 return circumference, area"},{"question":"Create a function that converts an array of binary codes into a string of characters. Each binary code represents a character in ASCII. For example, the array [\\"01000001\\", \\"01101100\\", \\"01100101\\"] should return \\"Acp\\".","solution":"def binary_array_to_string(binary_array): Converts an array of binary codes into a string of characters. Parameters: binary_array (list of str): List containing binary representations of ASCII characters. Returns: str: A string formed by converting each binary code to its corresponding character. return ''.join(chr(int(binary_code, 2)) for binary_code in binary_array)"},{"question":"Create a function that takes two integers as parameters and returns the sum of the squares of both integers mod 100.","solution":"def sum_of_squares_mod_100(a, b): Returns the sum of the squares of a and b, modulo 100. return (a ** 2 + b ** 2) % 100"},{"question":"Create a function that takes a string as input and returns a new string with all the vowels capitalized. Vowels include 'a', 'e', 'i', 'o', and 'u' (both uppercase and lowercase). The function should consider 'y' as a vowel only if it is at the end of the word.","solution":"def capitalize_vowels(word): Takes a string as input and returns a new string with all the vowels 'a', 'e', 'i', 'o', and 'u' capitalized. Vowel 'y' is capitalized only if it is at the end of the word. vowels = 'aeiou' new_string = '' for i in range(len(word)): char = word[i] if char.lower() in vowels: new_string += char.upper() elif char.lower() == 'y' and i == len(word) - 1: new_string += char.upper() else: new_string += char return new_string"},{"question":"Create a function that can generate unique passwords based on the given specifications. The function should accept three parameters: password length, character set, and the number of passwords to generate. The function should return a list of unique passwords.","solution":"import random def generate_passwords(length, charset, num_passwords): Generates a list of unique passwords based on given length, character set, and number of passwords. Args: length (int): Length of each password. charset (str): A string representing the set of characters to be used in passwords. num_passwords (int): Number of unique passwords to generate. Returns: List[str]: A list of unique passwords. passwords = set() while len(passwords) < num_passwords: password = ''.join(random.choice(charset) for _ in range(length)) passwords.add(password) return list(passwords) # Example usage: # print(generate_passwords(6, 'abcdefghijklmnopqrstuvwxyz', 5))"},{"question":"Create a function that generates and returns a list of the first N even numbers.","solution":"def generate_even_numbers(n): Generate and return a list of the first N even numbers. Parameters: n (int): The number of even numbers to generate. Returns: list: A list containing the first N even numbers. return [2 * i for i in range(n)]"},{"question":"Create a function that takes two integer arguments, the \`n\` in \`logn(n)\`, and \`m\`, then returns the value of \`2^m ^ 3^(m-1) ^ ... ^ 2^1\` which is equal to \`(2^m) * (2^(m-1)) * ... * (2^1)\`. In other words, multiply \`2^m\` \`m\` times, then multiply \`3^(m-1)\` \`m-1\` times, and so on until \`2^1\` is multiplied once.","solution":"def compute_series(n, m): Computes the value of (2^m) * (2^(m-1)) * ... * (2^1). result = 1 for i in range(1, m + 1): result *= 2**i return result"},{"question":"Create a function that takes in a list of integers and returns the frequency of each integer in the list. The function should be implemented in Python.","solution":"def count_frequencies(lst): Returns a dictionary with each integer in the list as keys and their frequency as values. frequency_dict = {} for number in lst: if number in frequency_dict: frequency_dict[number] += 1 else: frequency_dict[number] = 1 return frequency_dict"},{"question":"Create a function that converts a given decimal number to its equivalent in a specified base. The base can be any integer between 2 and 16, inclusive. The function should return the result as a string containing the digits and letters of the base, where digits are represented by the numbers 0-9 and letters are represented by A-F.","solution":"def decimal_to_base(number, base): Converts a given decimal number to its equivalent in the specified base. :param number: The decimal number to convert. :param base: The base to convert to, which can be any integer between 2 and 16 (inclusive). :return: The number in the specified base, as a string. if base < 2 or base > 16: raise ValueError(\\"Base must be between 2 and 16, inclusive.\\") if number == 0: return \\"0\\" digits = \\"0123456789ABCDEF\\" result = \\"\\" while number > 0: result = digits[number % base] + result number //= base return result"},{"question":"Create a function that accepts an array as a parameter and returns the first occurring even number in the array. If there is no even number in the array, the function should return -1.","solution":"def first_even_number(arr): Returns the first occurring even number in the array. If there is no even number, returns -1. for num in arr: if num % 2 == 0: return num return -1"},{"question":"Create a function that checks if two strings are anagrams (contain the same characters in different order) and return true if they are, false otherwise.","solution":"def are_anagrams(str1, str2): Returns True if str1 and str2 are anagrams, False otherwise. # Anagrams must be of the same length if len(str1) != len(str2): return False # Sort the strings and compare return sorted(str1) == sorted(str2)"},{"question":"Create a function that takes in two strings, \`str1\` and \`str2\`, and returns the number of characters that are common between them.","solution":"def common_characters_count(str1, str2): Returns the number of characters that are common between str1 and str2. count = 0 str1_chars = list(str1) str2_chars = list(str2) for char in str1_chars: if char in str2_chars: count += 1 str2_chars.remove(char) # Avoid counting duplicate characters from str2 return count"},{"question":"Create a function that takes an array of integers and returns the sum of all elements in the array. If the array is empty, the function should return 0. How would you implement this in Python?","solution":"def sum_array(arr): Returns the sum of all elements in the array. If the array is empty, returns 0. return sum(arr)"},{"question":"Create a function that converts a decimal number \`num\` to its binary representation as a string. For example, if the input number is 13, the function should return \\"1101\\".","solution":"def decimal_to_binary(num): Converts a decimal number to its binary representation as a string. :param num: The decimal number to convert. :return: The binary representation of the decimal number as a string. if num == 0: return \\"0\\" binary_str = '' while num > 0: binary_str = str(num % 2) + binary_str num = num // 2 return binary_str"},{"question":"Create a function that takes a string of words and returns a new string with words in reverse order.","solution":"def reverse_words(sentence): Takes a string of words and returns a new string with words in reverse order. Parameters: sentence (str): A string of words. Returns: str: A new string with the words in reverse order. words = sentence.split() reversed_words = words[::-1] reversed_sentence = ' '.join(reversed_words) return reversed_sentence"},{"question":"Create a function that takes three arguments: a list, and an element to add to that list. The function should then create a new list that consists of the elements in the original list, plus the new element, at the end of the original list.","solution":"def add_element_to_list(lst, element): Takes a list and an element, returns a new list with the element added at the end. return lst + [element]"},{"question":"Create a function that generates and prints the Fibonacci sequence up to a given number. The function should also return the count of even numbers in the Fibonacci sequence. Provision for a check function to test the function with different inputs.","solution":"def generate_fibonacci_and_count_evens(n): Generates Fibonacci sequence up to a given number \`n\`. Returns the count of even numbers in the Fibonacci sequence. fib_sequence = [] a, b = 0, 1 while a <= n: fib_sequence.append(a) a, b = b, a + b even_count = len([num for num in fib_sequence if num % 2 == 0]) return fib_sequence, even_count"},{"question":"Create a function that takes a string as input and returns a string uppercased.","solution":"def uppercase_string(s): Takes a string input and returns it in uppercase. return s.upper()"},{"question":"Create a function that takes a list of integers as input and returns the integer that appears most frequently in the list.","solution":"def most_frequent_int(int_list): Returns the integer that appears most frequently in the list. If multiple integers have the same highest frequency, the smallest one is returned. if not int_list: return None frequency_dict = {} for num in int_list: frequency_dict[num] = frequency_dict.get(num, 0) + 1 most_frequent = None max_frequency = 0 for num, frequency in frequency_dict.items(): if frequency > max_frequency or (frequency == max_frequency and num < most_frequent): most_frequent = num max_frequency = frequency return most_frequent"},{"question":"Create a function that takes a string and returns a capitalize letter, and every other letter to be lower case in a string. For example, if the input string is \\"abcdefg\\", the output should be \\"AbCdEfG\\".","solution":"def capitalize_alternate(s): Takes a string and returns a new string with alternating capitalization starting with uppercase. result = [] for i, char in enumerate(s): if i % 2 == 0: result.append(char.upper()) else: result.append(char.lower()) return ''.join(result)"},{"question":"Create a function that takes a list of integers and returns a new list containing the squares of each integer in the input list. The function should also handle any potential errors that may occur during the execution.","solution":"def square_list(lst): Returns a new list containing the squares of each integer in the input list. if not isinstance(lst, list): raise TypeError('Input should be a list') new_lst = [] for item in lst: if not isinstance(item, int): raise ValueError('All items in the list should be integers') new_lst.append(item**2) return new_lst"},{"question":"Create a function that takes an array of integers as input. The function should return an array where the elements at even indices are sorted in ascending order, while the elements at odd indices remain unchanged.","solution":"def sort_even_indices(input_list): Takes an array of integers and returns an array where the elements at even indices are sorted in ascending order, while the elements at odd indices remain unchanged. even_indices_values = sorted([input_list[i] for i in range(0, len(input_list), 2)]) output_list = input_list[:] even_index = 0 for i in range(len(output_list)): if i % 2 == 0: output_list[i] = even_indices_values[even_index] even_index += 1 return output_list"},{"question":"Create a function that takes two arrays as input and swaps their elements. The function should return a tuple of the modified arrays.","solution":"def swap_arrays(a, b): Swaps the elements of two arrays and returns a tuple of the modified arrays. Parameters: a (list): First list to swap elements with the second list. b (list): Second list to swap elements with the first list. Returns: tuple: A tuple containing the two lists with their elements swapped. swapped_a = b[:] swapped_b = a[:] return (swapped_a, swapped_b)"},{"question":"Create a function that takes two lists of integers as input. Each list contains unique elements. Return a new list that contains the common elements between the two lists. If there are no common elements, return an empty list.","solution":"def common_elements(list1, list2): Returns a list that contains the common elements between list1 and list2. If there are no common elements, returns an empty list. return [element for element in list1 if element in list2]"},{"question":"Create a function that computes the nth Fibonacci number in Python using recursion. Also, implement error handling to manage cases when the input is less than 0 or is not an integer.","solution":"def fibonacci(n): Computes the nth Fibonacci number using recursion. Raises ValueError if n is not a non-negative integer. if not isinstance(n, int): raise ValueError(\\"Input must be an integer.\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0: return 0 if n == 1: return 1 return fibonacci(n - 1) + fibonacci(n - 2)"},{"question":"Create a function that sums all the numbers in a given list. If the input list is empty, the function should return 0.","solution":"def sum_list(numbers): Returns the sum of all numbers in the given list. If the input list is empty, returns 0. return sum(numbers)"},{"question":"Create a function that receives a string \`s\` and an integer \`n\`. The function should return \`True\` if \`s\` contains exactly \`n\` distinct characters, and \`False\` otherwise. You should also handle cases where \`n\` is either less than 0 or greater than the total number of distinct characters in \`s\`.","solution":"def has_n_distinct_characters(s, n): Returns True if the string \`s\` contains exactly \`n\` distinct characters, and False otherwise. Handles cases where \`n\` is less than 0 or greater than the total number of distinct characters in \`s\`. if n < 0: return False distinct_characters = set(s) return len(distinct_characters) == n"},{"question":"Create a function that checks if a string is a palindrome, which reads the same backward as forward. You should return \`true\` if the string is a palindrome, and \`false\` otherwise.","solution":"def is_palindrome(s: str) -> bool: Returns True if the given string is a palindrome, otherwise returns False. # Normalize the string by removing non-alphanumeric characters and converting to lower case. normalized_str = ''.join(char.lower() for char in s if char.isalnum()) # Check if the normalized string is equal to its reverse return normalized_str == normalized_str[::-1]"},{"question":"Create a function that generates a list of Fibonacci numbers up to a given limit. The function should take an integer \`n\` as an argument and return a list of Fibonacci numbers that are less than or equal to \`n\`.","solution":"def fibonacci_up_to(n): Generates a list of Fibonacci numbers up to a given limit n. Parameters: n (int): The upper limit for the Fibonacci numbers. Returns: List[int]: A list of Fibonacci numbers less than or equal to n. if n < 0: return [] fibs = [0, 1] while True: next_fib = fibs[-1] + fibs[-2] if next_fib > n: break fibs.append(next_fib) return fibs[:-1] if fibs[-1] > n else fibs"},{"question":"Create a function that rotates an array to the right by n positions. The rotation should be in-place, meaning no extra space should be used for another array. The function should also handle cases where n is greater than the length of the array by rotating it the appropriate number of times (i.e., n mod length of array).","solution":"def rotate_array_in_place(arr, n): Rotates the elements of arr to the right by n positions in place. :param arr: List of elements to be rotated :param n: Number of positions to rotate the array if not arr: return arr n = n % len(arr) # Ensure n is within the bounds of the array length # Reverse the entire array arr.reverse() # Reverse the first n elements arr[:n] = reversed(arr[:n]) # Reverse the remaining elements arr[n:] = reversed(arr[n:])"},{"question":"Create a function that takes a list of integers as input and returns a new list where each integer is squared. If the input list is empty, the function should return an empty list.","solution":"def square_list(int_list): Takes a list of integers and returns a new list where each integer is squared. Parameters: int_list (list): A list of integers. Returns: list: A new list where each integer has been squared. return [x**2 for x in int_list]"},{"question":"Create a function that takes an integer and prints out all the divisors of the number in ascending order. The function should also handle the case where the input number is negative by converting it to positive before printing the divisors.","solution":"def print_divisors(n): Prints all divisors of a given integer n in ascending order. If n is negative, it takes the absolute value of n. n = abs(n) divisors = [i for i in range(1, n + 1) if n % i == 0] for divisor in divisors: print(divisor) # Example usage: # print_divisors(-12) would print: # 1 # 2 # 3 # 4 # 6 # 12"},{"question":"Create a function that compares the two lists and returns a list with all elements in the second list that are not present in the first list. This function will use list comprehension for efficiency.","solution":"def list_difference(list1, list2): Returns a list with all elements in list2 that are not present in list1. Args: list1 -- The first list. list2 -- The second list. Returns: A list containing elements that are in list2 but not in list1. return [element for element in list2 if element not in list1]"},{"question":"Create a function that takes an input string and returns the URL encoded version of the string. URL encoding replaces special characters with their respective hexadecimal values. For example, the space character is replaced with a '+', and the ampersand '&' is replaced with '%26'.","solution":"import urllib.parse def url_encode(input_string): Returns the URL encoded version of the input string. return urllib.parse.quote(input_string)"},{"question":"Create a function that takes an integer as input and returns a list of its prime factors. The function should return the prime factors in ascending order, and each prime factor should appear in the list as many times as it divides the number.","solution":"def prime_factors(n): Returns a list of the prime factors of n in ascending order. Each prime factor appears in the list as many times as it divides n. factors = [] divisor = 2 while n > 1: while n % divisor == 0: factors.append(divisor) n //= divisor divisor += 1 return factors"},{"question":"Create a function that calculates the average of a given list of numbers. The function should handle both single and multiple numeric input types, as well as 'None' values in the list.","solution":"def average(numbers): Returns the average of a list of numbers, ignoring None values. if not numbers: return None valid_numbers = [num for num in numbers if num is not None] if not valid_numbers: return None return sum(valid_numbers) / len(valid_numbers)"},{"question":"Create a function that takes a number N as input and returns 0 if the sum of the digits of N is divisible by 3, or 1 if it is not. For example, if N = 123, the sum of its digits is 1 + 2 + 3 = 6, which is divisible by 3, so the function should return 0.","solution":"def sum_of_digits_divisible_by_3(N): Returns 0 if the sum of the digits of N is divisible by 3, otherwise returns 1. sum_of_digits = sum(int(digit) for digit in str(N)) return 0 if sum_of_digits % 3 == 0 else 1"},{"question":"Create a function that takes a list of integers as input and returns the second largest number in the list. If the list has duplicates, the function should only consider unique elements. If the list has less than 2 unique elements, the function should return \`None\`.","solution":"def second_largest(nums): Returns the second largest number in the list after removing duplicates. If the list has less than 2 unique elements, returns None. unique_nums = list(set(nums)) if len(unique_nums) < 2: return None unique_nums.sort(reverse=True) return unique_nums[1]"},{"question":"Create a function that takes a string and returns the longest sequence of repeated characters in that string.","solution":"def longest_repeated_sequence(s): Returns the longest sequence of repeated characters in the string s. if not s: return \\"\\" max_count = 1 current_count = 1 max_char = s[0] current_char = s[0] for i in range(1, len(s)): if s[i] == s[i-1]: current_count += 1 else: if current_count > max_count: max_count = current_count max_char = current_char current_count = 1 current_char = s[i] if current_count > max_count: max_count = current_count max_char = current_char return max_char * max_count"},{"question":"Create a function that checks if a given string is a valid Python identifier. A Python identifier is defined as a string that follows the rules for variable naming in Python. It must start with a letter or underscore, and only contain letters, digits, and underscores.","solution":"def is_valid_identifier(identifier): Checks if the provided string is a valid Python identifier. An identifier is valid if it: - Starts with a letter (a-z, A-Z) or an underscore (_) - Consists of letters, digits (0-9), or underscores Parameters: identifier (str): The string to check. Returns: bool: True if the string is a valid identifier, False otherwise. if not identifier: return False if not (identifier[0].isalpha() or identifier[0] == '_'): return False for char in identifier[1:]: if not (char.isalnum() or char == '_'): return False return True"},{"question":"Create a function that takes two lists of numbers, and returns a new list containing the sum of corresponding elements from the two lists. If the lists are of unequal length, the function should handle this gracefully by ignoring the extra elements in the longer list.","solution":"def sum_lists(list1, list2): Returns a new list containing the sum of corresponding elements from list1 and list2. If the lists are of unequal length, the extra elements in the longer list are ignored. return [a + b for a, b in zip(list1, list2)]"},{"question":"Create a function that takes a 2D list (matrix) of integers as an input and returns the middle value of the list when the flattened list is sorted. If the list is empty or of an odd length, return None.","solution":"def middle_sorted_value(matrix): Returns the middle value of the sorted, flattened matrix, excluding if empty or odd length. # Flatten the matrix flattened = [item for sublist in matrix for item in sublist] # Check if flattened list is empty or has odd length if not flattened or len(flattened) % 2 != 0: return None # Sort the flattened list flattened.sort() # Find the middle index and return the middle value middle_index = len(flattened) // 2 return flattened[middle_index]"},{"question":"Create a function that returns the Fibonacci sequence up to the nth term using recursion. The function should be efficient and handle large values of n without causing a stack overflow error.","solution":"def fibonacci(n, memo={}): Returns the nth term of the Fibonacci sequence using recursion and memoization. if n in memo: return memo[n] if n <= 0: return 0 elif n == 1: return 1 memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo) return memo[n] def fibonacci_sequence(n): Returns the fibonacci sequence up to the nth term. return [fibonacci(i) for i in range(n)]"},{"question":"Create a function that takes an array of integers as input and returns the largest integer in the array. If the array is empty, return null. Ensure the function is efficient and handles edge cases appropriately.","solution":"def largest_integer(arr): Returns the largest integer in the array. If the array is empty, returns None. if not arr: return None return max(arr)"},{"question":"Create a function that checks if a given year is a leap year or not. A leap year is exactly divisible by 4 except for century years (years ending with 00). The century year is a leap year only if it is perfectly divisible by 400.","solution":"def is_leap_year(year): Returns True if the given year is a leap year, otherwise False. if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): return True return False"},{"question":"Create a function that takes two integers n and k and returns the sum of all numbers from 1 to n that are divisible by k.","solution":"def sum_divisible_by_k(n, k): Returns the sum of all numbers from 1 to n that are divisible by k. total = 0 for i in range(1, n + 1): if i % k == 0: total += i return total"},{"question":"Create a function that takes a string and returns a new string containing only the vowels from the original string, in the same order they appear.","solution":"def extract_vowels(s): Takes a string and returns a new string containing only the vowels from the original string, in the same order they appear. vowels = \\"aeiouAEIOU\\" return ''.join([char for char in s if char in vowels])"},{"question":"Create a function that performs DFS on a binary tree without using recursion. You can use stacks to achieve this. The function should take a binary tree as an input, and it should return a list of nodes visited in DFS order. Also, implement this function for a tree with nodes having integer values and a basic structure.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def dfs_non_recursive(root): Perform DFS on a binary tree without using recursion. Args: - root (TreeNode): The root node of the binary tree Returns: - List[int]: List of nodes visited in DFS order if not root: return [] stack = [root] result = [] while stack: node = stack.pop() result.append(node.value) # push right child first so that left is processed first if node.right: stack.append(node.right) if node.left: stack.append(node.left) return result"},{"question":"Create a function that accepts two parameters: a string \`input_str\` and a character \`char_to_find\`. The function should return \`True\` if \`char_to_find\` is present at any position in the string \`input_str\`, and \`False\` otherwise. Implement a docstring that describes the function's purpose and parameters.","solution":"def contains_char(input_str, char_to_find): Checks if a given character is present in the provided string. Parameters: input_str (str): The string to search within. char_to_find (str): The character to search for in the input string. Returns: bool: True if char_to_find is present in input_str, False otherwise. return char_to_find in input_str"},{"question":"Create a function that takes an array of integers, counts the prime numbers in the array, and returns that count. Ensure to handle the case where the array may contain negative numbers and zeros.","solution":"def is_prime(n): if n <= 1: return False if n == 2: return True if n % 2 == 0: return False p = 3 while p * p <= n: if n % p == 0: return False p += 2 return True def count_primes(arr): return sum(1 for x in arr if is_prime(x))"},{"question":"Create a function that takes two lists of integers and returns the list that contains the most elements that add up to the target value. If both lists have the same number of elements that sum up to the target, return the first list. If neither list meets the criteria, return an empty list.","solution":"def find_list_with_most_elements_sum_to_target(list1, list2, target): Returns the list that contains the most elements that sum up to the target value. If both lists have the same number of elements that sum up to the target, return the first list. If neither list meets the criteria, return an empty list. count1 = sum(1 for x in list1 if x == target) count2 = sum(1 for x in list2 if x == target) if count1 > count2: return list1 elif count2 > count1: return list2 else: return list1 if count1 > 0 else []"},{"question":"Create a function that takes a list of integers and returns a new list containing the cumulative sum of each element in the input list. The function should also handle empty lists and lists with negative numbers.","solution":"def cumulative_sum(lst): Returns a list containing the cumulative sums of the input list. result = [] current_sum = 0 for number in lst: current_sum += number result.append(current_sum) return result"},{"question":"Create a function that takes an array of integers, \`arr\`, and an integer \`n\`, and return the total number of elements less than \`n\` in the \`arr\`.","solution":"def count_elements_less_than(arr, n): Returns the total number of elements in the array arr that are less than n. count = 0 for element in arr: if element < n: count += 1 return count"},{"question":"Create a function that takes a list and returns a new list with all the duplicate elements removed. The function should use a set to store unique elements.","solution":"def remove_duplicates(input_list): Returns a new list with duplicates removed from the input list. Args: input_list (list): The list from which to remove duplicates. Returns: list: A new list with duplicates removed. return list(set(input_list))"},{"question":"Create a function that takes in two integers a and b, and two pointers to integers pA and pB, and swaps the values of a and b through the pointers. How would you implement this in C?","solution":"def swap(a, b, pA, pB): Swaps the values of a and b using pA and pB as pointers. pA and pB are lists that contain the values of a and b respectively. temp = pA[0] pA[0] = pB[0] pB[0] = temp"},{"question":"Create a function that adds two binary numbers, represented as strings, and returns their sum, also as a string. In your solution, consider both positive and negative numbers, and ensure that your function can handle large binary numbers, up to 10^6 digits in length.","solution":"def add_binary(a, b): Add two binary numbers represented as strings, and return the sum as a binary string. This function assumes both a and b are valid binary strings. # Convert binary strings to integers int_a = int(a, 2) int_b = int(b, 2) # Add the integers int_sum = int_a + int_b # Convert the sum back to a binary string binary_sum = bin(int_sum)[2:] return binary_sum"},{"question":"Create a function that takes in two integer lists A and B, and returns the list that contains the most unique elements. If both lists have the same number of unique elements, return the first list.","solution":"def list_with_most_unique_elements(A, B): Returns the list that contains the most unique elements. If both lists have the same number of unique elements, returns the first list. if len(set(A)) > len(set(B)): return A elif len(set(A)) < len(set(B)): return B else: return A"},{"question":"Create a function that takes two integer lists as input parameters. The function should merge these two lists into one sorted list and return the sorted result.","solution":"def merge_and_sort_lists(list1, list2): Merges two lists and returns a sorted list. Parameters: list1 (list): First list of integers. list2 (list): Second list of integers. Returns: list: Sorted merged list. merged_list = list1 + list2 merged_list.sort() return merged_list"},{"question":"Create a function that takes a string and returns the first non-repeating character in the string. If all characters are repeating, return an empty string. Consider case sensitivity.","solution":"def first_non_repeating_char(s): Returns the first non-repeating character in the string s. If all characters are repeating, returns an empty string. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 for char in s: if char_count[char] == 1: return char return \\"\\""},{"question":"Create a function that takes a list of words and returns a new list where all the words are concatenated into a single string, separated by spaces.","solution":"def concatenate_words(words): Concatenates a list of words into a single string separated by spaces. Args: words (list of str): List of words to concatenate. Returns: str: The concatenated string of words separated by spaces. return ' '.join(words)"},{"question":"Create a function that accepts two number arrays and merge them in a sorted manner.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into one sorted array. result = [] i, j = 0, 0 while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: result.append(arr1[i]) i += 1 else: result.append(arr2[j]) j += 1 # Append remaining elements of arr1 while i < len(arr1): result.append(arr1[i]) i += 1 # Append remaining elements of arr2 while j < len(arr2): result.append(arr2[j]) j += 1 return result"},{"question":"Create a function that swaps the elements of two arrays at given positions and returns the modified arrays. Ensure that the function can handle arrays of any size and positions varying within the bounds of the arrays.","solution":"def swap_elements(arr1, pos1, arr2, pos2): Swaps the elements of two arrays at given positions and returns the modified arrays. Parameters: arr1 (list): The first array. pos1 (int): The position of the element to swap in the first array. arr2 (list): The second array. pos2 (int): The position of the element to swap in the second array. Returns: tuple: The modified arrays (arr1, arr2). if not (0 <= pos1 < len(arr1) and 0 <= pos2 < len(arr2)): raise ValueError(\\"Positions are out of the bounds of the arrays.\\") arr1[pos1], arr2[pos2] = arr2[pos2], arr1[pos1] return arr1, arr2"},{"question":"Create a function that takes in a list of integers, removes duplicates, and returns a new list with only the unique numbers.","solution":"def remove_duplicates(numbers): Takes in a list of integers, removes duplicates, and returns a new list with only the unique numbers. return list(set(numbers))"},{"question":"Create a function that accepts a string parameter and returns the number of unique characters in the string, ignoring case sensitivity. For example, the string \\"HelloWorld\\" should return 7.","solution":"def count_unique_characters(s): Returns the number of unique characters in the string, ignoring case sensitivity. return len(set(s.lower()))"},{"question":"Create a function that generates a list of Fibonacci numbers up to a given limit. The function should also allow the user to specify whether they want to include zero as the first element of the list.","solution":"def generate_fibonacci(limit, include_zero=True): Generates a list of Fibonacci numbers up to a given limit. If include_zero is True, 0 will be the first element of the list. Parameters: limit (int): The upper bound of the largest Fibonacci number in the list. include_zero (bool): Whether to include 0 as the first element. Returns: list: A list of Fibonacci numbers up to the given limit. if limit <= 0: return [] fibonacci_list = [0, 1] if include_zero else [1, 1] while True: next_fib = fibonacci_list[-1] + fibonacci_list[-2] if next_fib > limit: break fibonacci_list.append(next_fib) return fibonacci_list"},{"question":"Create a function that takes two arrays as input and returns a new array containing all the unique elements that are present in either of the input arrays but not in their intersection.","solution":"def unique_elements_in_either_but_not_both(arr1, arr2): Takes two arrays as input and returns a new array containing all the unique elements that are present in either of the input arrays but not in their intersection. set1 = set(arr1) set2 = set(arr2) unique_in_arr1 = set1 - set2 unique_in_arr2 = set2 - set1 result = list(unique_in_arr1.union(unique_in_arr2)) return result"},{"question":"Create a function that takes a string \`s\` and an integer \`k\`, and returns the length of the longest substring of \`s\` that contains at most \`k\` distinct characters.","solution":"def longest_substring_with_k_distinct(s, k): Returns the length of the longest substring of \`s\` that contains at most \`k\` distinct characters. if k == 0 or not s: return 0 left = 0 right = 0 max_len = 0 char_map = {} while right < len(s): char = s[right] if char in char_map: char_map[char] += 1 else: char_map[char] = 1 while len(char_map) > k: left_char = s[left] char_map[left_char] -= 1 if char_map[left_char] == 0: del char_map[left_char] left += 1 max_len = max(max_len, right - left + 1) right += 1 return max_len"},{"question":"Create a function that takes two arrays of integers as input and returns the maximum element from each array. If either array is empty, return None for that array.","solution":"def max_elements(arr1, arr2): Returns the maximum element from each array. If either array is empty, return None for that array. max1 = max(arr1) if arr1 else None max2 = max(arr2) if arr2 else None return max1, max2"},{"question":"Create a function that takes two integers as input: \`x\` and \`y\`. The function should return the result of \`x\` raised to the power of \`y\`. Additionally, the function should handle cases where \`y\` is a negative number and return the correct result.","solution":"def power(x, y): Returns x raised to the power of y. Handles both positive and negative exponents. return x ** y"},{"question":"Create a function that takes a character as input and prints the ASCII value of the character.","solution":"def char_to_ascii(char): Returns the ASCII value of the input character. return ord(char)"},{"question":"Create a function that implements a merge sort algorithm to sort an array of integers in ascending order. Include error handling for cases where the provided input is not an array or is an empty array. Additionally, provide a sample test case to verify the correctness of your merge sort implementation.","solution":"def merge_sort(arr): Sorts an array of integers in ascending order using the merge sort algorithm. Includes error handling for non-iterable or empty inputs. if not isinstance(arr, list): raise TypeError(\\"Input must be an array\\") if len(arr) == 0: raise ValueError(\\"Input array must not be empty\\") if len(arr) == 1: return arr def merge(left, right): sorted_array = [] while left and right: if left[0] <= right[0]: sorted_array.append(left.pop(0)) else: sorted_array.append(right.pop(0)) sorted_array.extend(left if left else right) return sorted_array mid = len(arr) // 2 left = merge_sort(arr[:mid]) right = merge_sort(arr[mid:]) return merge(left, right)"},{"question":"Create a function that generates a list of prime numbers between 1 and 50. Each prime number should appear only once in the list. How can you achieve this in Python?","solution":"def generate_primes(): Generates a list of prime numbers between 1 and 50. primes = [] for num in range(2, 51): is_prime = True for i in range(2, int(num**0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Create a function that transforms a given string by replacing each character with its ASCII value and then concatenating them together. For example, the string \\"hello\\" should be transformed to \\"104101108108111\\".","solution":"def transform_string_to_ascii(s): Transforms a given string by replacing each character with its ASCII value and concatenating them together. Parameters: s (str): input string Returns: str: transformed string with concatenated ASCII values return ''.join(str(ord(char)) for char in s)"},{"question":"Create a function that calculates the average of the first n elements in an array of integers. If n is greater than the length of the array, the function should return the average of all available elements. If the array is empty, the function should return 0.","solution":"def average_of_first_n_elements(arr, n): Returns the average of the first n elements in the array. If n is greater than the length of the array, returns the average of all elements. If the array is empty, returns 0. if not arr: return 0 actual_n = min(n, len(arr)) return sum(arr[:actual_n]) / actual_n"},{"question":"Create a function that takes an integer array as an input and returns the length of the longest subarray with a sum of zero. If no such subarray exists, return -1.","solution":"def longest_subarray_with_sum_zero(arr): Returns the length of the longest subarray with a sum of zero. If no such subarray exists, returns -1. sum_map = {} max_len = 0 curr_sum = 0 for i in range(len(arr)): curr_sum += arr[i] if arr[i] == 0 and max_len == 0: max_len = 1 if curr_sum == 0: max_len = i + 1 if curr_sum in sum_map: max_len = max(max_len, i - sum_map[curr_sum]) else: sum_map[curr_sum] = i return max_len if max_len != 0 else -1"},{"question":"Create a function that takes in a list of positive integers and returns a new list where each number is converted to a string.","solution":"def convert_to_strings(lst): Converts each number in the list to a string. Parameters: lst (list): List of positive integers Returns: list: List of strings return [str(num) for num in lst]"},{"question":"Create a function that takes a list of integers and returns a new list containing the length of each integer if it is a palindrome and 0 otherwise.","solution":"def is_palindrome(n): Checks if an integer n is a palindrome. s = str(n) return s == s[::-1] def palindrome_lengths(lst): Takes a list of integers and returns a new list containing the length of each integer if it is a palindrome and 0 otherwise. result = [] for number in lst: if is_palindrome(number): result.append(len(str(number))) else: result.append(0) return result"},{"question":"Create a function that generates a square wave with numpy.","solution":"import numpy as np def generate_square_wave(t, freq, amplitude=1.0, offset=0.0): Generates a square wave given time values, frequency, amplitude, and offset. Parameters: t (numpy.ndarray): The time values at which to evaluate the square wave. freq (float): The frequency of the square wave. amplitude (float, optional): The amplitude of the square wave. Default is 1.0. offset (float, optional): The offset or vertical shift of the square wave. Default is 0.0. Returns: numpy.ndarray: The square wave values corresponding to the given time values. return amplitude * np.sign(np.sin(2 * np.pi * freq * t)) + offset"},{"question":"Create a function that takes in a list of numbers and returns a new list where each element is the sum of its index and the value at that index. Elaborate the code and ensure the function is well-commented.","solution":"def sum_index_and_value(numbers): Takes a list of numbers and returns a new list where each element is the sum of its index and the value at that index. Parameters: - numbers (list): A list of numbers. Returns: - list: A new list with each element being the sum of its index and the value at that index. # Iterate over the list with enumerate to get both index and value return [index + value for index, value in enumerate(numbers)]"},{"question":"Create a function that takes a string and a character as input and returns the first occurrence of the character in the string. If the character is not found, return -1.","solution":"def find_first_occurrence(s, char): Returns the index of the first occurrence of the character in the string. If the character is not found, returns -1. for idx, c in enumerate(s): if c == char: return idx return -1"},{"question":"Create a function that finds the shortest path from the top-left corner to the bottom-right corner of an m x n 2D grid. You can only move either down or right at any point in time. The function should return the number of unique paths.","solution":"def unique_paths(m, n): Finds the number of unique paths from the top-left corner to the bottom-right corner of an m x n 2D grid. You can only move either down or right at any point in time. :param m: Number of rows :param n: Number of columns :return: Number of unique paths # Create a 2D grid initialized to 1 for the first row and column dp = [[1]*n for _ in range(m)] # Start from cell (1, 1) and calculate the number of ways to reach each cell for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] # The bottom-right corner will have the number of unique paths return dp[-1][-1]"},{"question":"Create a function that takes an array of integers, and returns a new array that is a deep copy of the input array.","solution":"def deep_copy_array(arr): Returns a deep copy of the input array. return [item for item in arr]"},{"question":"Create a function that takes an integer as an input and prints each digit of the integer in reverse order.","solution":"def print_digits_reverse(n): Prints each digit of the integer n in reverse order. Parameters: n (int): The input integer. # Convert the integer to a string to easily access each digit int_str = str(n) # Handle the case for negative numbers if int_str[0] == '-': int_str = int_str[1:] print('-', end='') # Print each digit in reverse order for digit in reversed(int_str): print(digit, end='') # Print a newline at the end print()"},{"question":"Create a function that checks if a number n is divisible by 3. If it is, print \\"Number is divisible by 3\\", otherwise print \\"Number is not divisible by 3\\". Then, test your function by providing it with various values of n.","solution":"def check_divisible_by_3(n): Checks if the number n is divisible by 3 and returns the corresponding message. if n % 3 == 0: return \\"Number is divisible by 3\\" else: return \\"Number is not divisible by 3\\""},{"question":"Create a function that takes in a list of integers and returns a new list with the integers sorted in increasing order. You cannot use any built-in Python sorting functions or libraries. Instead, implement the sorting algorithm from scratch. Please use the Bubble Sort algorithm for this task.","solution":"def bubble_sort(arr): Sorts a list of integers in increasing order using the Bubble Sort algorithm. Parameters: arr (list): A list of integers. Returns: list: A new list with the integers sorted in increasing order. n = len(arr) sorted_arr = arr.copy() for i in range(n): for j in range(0, n-i-1): if sorted_arr[j] > sorted_arr[j+1]: sorted_arr[j], sorted_arr[j+1] = sorted_arr[j+1], sorted_arr[j] return sorted_arr"},{"question":"Create a function that checks if a given string is a palindrom in Python. A string is considered a palindrome if it reads the same backward as forward.","solution":"def is_palindrome(s): Checks if a given string s is a palindrome. Parameters: s (str): The string to be checked. Returns: bool: True if s is a palindrome, False otherwise. # Remove any non-alphanumeric characters and convert the string to lower case cleaned_s = ''.join(char.lower() for char in s if char.isalnum()) # Check if the cleaned string is equal to its reverse return cleaned_s == cleaned_s[::-1]"},{"question":"Create a function that takes a list of integers, and returns a list of integers where each integer is the original integer plus 1.","solution":"def increment_list(numbers): Takes a list of integers and returns a list where each integer is incremented by 1. Args: numbers (list): A list of integers. Returns: list: A list of integers, each incremented by 1. return [number + 1 for number in numbers]"},{"question":"Create a function that calculates the average of a list of numbers using Python. The list may contain integers or floats. The function should handle an empty list by returning None.","solution":"def average(numbers): Returns the average of a list of numbers. If the list is empty, return None. if not numbers: return None return sum(numbers) / len(numbers)"},{"question":"Create a function that takes in a list of tuples, where each tuple represents a point in a 2D space. The function should return a new list of tuples, where each tuple is the result of adding a constant value to the x and y coordinates of the original tuple.","solution":"def add_constant_to_points(points, constant): Adds a constant value to both x and y coordinates of each tuple in a list of points. Parameters: points (list of tuples): The original list of points (x, y). constant (int or float): The constant value to add to the x and y coordinates. Returns: list of tuples: The new list of points with the constant added to each coordinate. return [(x + constant, y + constant) for x, y in points]"},{"question":"Create a function that can accept an array of integers and return the length of the array.","solution":"def array_length(arr): Returns the length of the array arr. return len(arr)"},{"question":"Create a function that takes an integer as input and returns the sum of all numbers from 1 to that integer, inclusive. Write a Python function called \`sum_up_to_n\`.","solution":"def sum_up_to_n(n): Returns the sum of all numbers from 1 to n, inclusive. if n < 1: return 0 return sum(range(1, n+1))"},{"question":"Create a function that takes two lists as parameters, and returns the intersection of these two lists, which includes elements that appear in both lists. The solution should account for duplicate elements and return each element only once in the result. Additionally, the output list should be sorted in ascending order.","solution":"def list_intersection(list1, list2): Returns the intersection of list1 and list2, including elements that appear in both lists only once, and sorted in ascending order. # Convert lists to sets to find the intersection and remove duplicates set1 = set(list1) set2 = set(list2) # Find the intersection intersection = set1 & set2 # Convert the intersection back to a list and sort it result = sorted(intersection) return result"},{"question":"Create a function that generates a greeting message based on the user's name. If no name is provided, it should default to a generic greeting. The function should be able to handle both string and None inputs for the name parameter.","solution":"def generate_greeting(name=None): Generates a greeting message based on the user's name. If no name is provided, it defaults to a generic greeting. :param name: the name of the user (str or None) :return: greeting message (str) if name: return f\\"Hello, {name}!\\" else: return \\"Hello there!\\""},{"question":"Create a function that takes an integer list and returns the minimum value found in the list.","solution":"def find_minimum(values): Returns the minimum value in the list of integers. Args: values (list): A list of integers. Returns: int: The minimum integer in the list. Raises: ValueError: If the list is empty. if not values: raise ValueError(\\"The list is empty.\\") return min(values)"},{"question":"Create a function that accepts a list of strings as an argument, then returns a new list containing all possible permutations of the strings in the original list. The permutations should be strings concatenated together. For example, if the input list is [\\"abc\\", \\"def\\"], the output should be [\\"abcdef\\", \\"adbecf\\", \\"afbecd\\", \\"abdecf\\", \\"abeucf\\", \\"abfecd\\", \\"adbecf\\", \\"adeucf\\", \\"adfeb\\", \\"adfucb\\", ...].","solution":"from itertools import permutations def string_permutations(lst): Returns a list of all possible permutations of the strings in the input list. Each permutation is a concatenated string. :param lst: List of strings :return: List of concatenated string permutations if not lst: return [] perm = permutations(lst) return [''.join(p) for p in perm]"},{"question":"Create a function that takes an array of integers and returns the most frequent element in the array. If there is a tie (more than one element has the same highest frequency), return the smallest of the tied elements.","solution":"def most_frequent_element(arr): Returns the most frequent element in the array. If there is a tie, return the smallest of the tied elements. from collections import Counter if not arr: return None # Get the frequency count of each element count = Counter(arr) # Find the maximum frequency max_frequency = max(count.values()) # Get the elements with the highest frequency most_frequent_elements = [k for k, v in count.items() if v == max_frequency] # Return the smallest of the most frequent elements return min(most_frequent_elements)"},{"question":"Create a function that converts an integer to its roman numeral representation. Roman numerals are represented by combinations of letters from the Latin alphabet.","solution":"def int_to_roman(num): Converts an integer to its Roman numeral representation. Parameters: num (int): The integer to convert. Returns: str: The Roman numeral representation of the integer. value_to_roman = [ (1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'), (100, 'C'), (90, 'XC'), (50, 'L'), (40, 'XL'), (10, 'X'), (9, 'IX'), (5, 'V'), (4, 'IV'), (1, 'I') ] roman_numeral = \\"\\" for value, symbol in value_to_roman: while num >= value: roman_numeral += symbol num -= value return roman_numeral"},{"question":"Create a function that converts a string of digits into a list of integers","solution":"def string_to_int_list(s): Converts a string of digits into a list of integers. Args: s (str): A string of digits. Returns: List[int]: A list of integers. return [int(char) for char in s]"},{"question":"Create a function that takes in an array of integers and returns a sorted array.","solution":"def sort_array(arr): Takes in an array of integers and returns a sorted array. return sorted(arr)"},{"question":"Create a function that checks if a number is within a given range \`10..20\`. If it is, return the number; otherwise, return \`None\`.","solution":"def is_within_range(number): Check if the number is within the range 10 to 20 (inclusive). Parameters: number (int): The number to check. Returns: int or None: The number if it is within the range, otherwise None. if 10 <= number <= 20: return number return None"},{"question":"Create a function that outputs the result of a binary search algorithm.","solution":"def binary_search(arr, target): Performs binary search on sorted array arr to find the target. :param arr: List[int] - sorted list of integers :param target: int - integer value to search for :return: int - the index of target in arr if found, otherwise -1 low, high = 0, len(arr) - 1 while low <= high: mid = (low + high) // 2 if arr[mid] == target: return mid elif arr[mid] < target: low = mid + 1 else: high = mid - 1 return -1"},{"question":"Create a function that accepts a string as input and uses recursion to generate all possible combinations of the characters in the string. For example, if the input is \`\\"abc\\"\`, the function should return a list of all possible combinations such as \`\\"abc\\"\`, \`\\"acb\\"\`, \`\\"bac\\"\`, ..., and \`\\"cba\\"\`.","solution":"def generate_combinations(s): Generates all possible combinations of characters in the input string using recursion. Args: s (str): The input string. Returns: list: A list of all possible combinations of the characters in the string. if len(s) == 0: return [\\"\\"] else: smaller_combinations = generate_combinations(s[1:]) char = s[0] result = [] for combination in smaller_combinations: for i in range(len(combination) + 1): new_combination = combination[:i] + char + combination[i:] if new_combination not in result: # Remove duplicates result.append(new_combination) return result"},{"question":"Create a function that determines whether a given list can be split into two subsets such that the sum of elements in both subsets is equal.","solution":"def can_partition(nums): Determines whether the given list can be split into two subsets such that the sum of elements in both subsets is equal. Args: nums: List of integers Returns: bool: True if list can be partitioned into two subsets with equal sum, otherwise False total_sum = sum(nums) # If the total sum is odd, it cannot be partitioned into two equal subsets if total_sum % 2 != 0: return False target = total_sum // 2 # DP array to keep track of possible sums dp = [False] * (target + 1) dp[0] = True for num in nums: # Traverse backwards to prevent recomputing indices multiple times within the same iteration for i in range(target, num - 1, -1): dp[i] = dp[i] or dp[i - num] return dp[target]"},{"question":"Create a function that takes in an integer and finds the factorial of that number. If the number is negative, return \\"Factorial is not defined for negative numbers.\\"","solution":"def factorial(n): Finds the factorial of the given non-negative integer n. If n is negative, returns a message indicating factorial is not defined for negative numbers. if n < 0: return \\"Factorial is not defined for negative numbers.\\" elif n == 0 or n == 1: return 1 else: result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Create a function that formats a string sentence into a valid HTML sentence. The function takes a string as input and returns the string wrapped in \`<p>\` tags. If the string is empty or only contains whitespace, the function should return an empty string.","solution":"def format_html_sentence(sentence): Wraps the given string in <p> tags if it is not empty or only whitespace. Returns an empty string otherwise. if sentence.strip(): return f'<p>{sentence.strip()}</p>' else: return ''"},{"question":"Create a function that interlaces two input strings into a single string. The function should take two string arguments and return a new string that contains the characters of both input strings alternately. If one string is longer than the other, append the remaining characters of the longer string to the result.","solution":"def interlace_strings(str1, str2): Interlaces two input strings into a single string. If one string is longer, append the remaining characters of the longer string to the result. Args: str1 (str): The first input string. str2 (str): The second input string. Returns: str: The interlaced string. result = [] len1, len2 = len(str1), len(str2) min_len = min(len1, len2) # Alternately add characters from both strings for i in range(min_len): result.append(str1[i]) result.append(str2[i]) # Append remaining characters from the longer string if len1 > len2: result.append(str1[min_len:]) elif len2 > len1: result.append(str2[min_len:]) return ''.join(result)"},{"question":"Create a function that takes an integer as an argument and returns a list of integers from 1 to the given number (inclusive).","solution":"def generate_sequence(n): Returns a list of integers from 1 to n (inclusive). :param n: The end number of the sequence (inclusive). :type n: int :return: A list of integers from 1 to n. :rtype: list if n < 1: return [] return list(range(1, n + 1))"},{"question":"Create a function that takes two parameters, \`array-one\` and \`array-two\`, and returns a new array with elements that are the intersection of these two arrays. The function should ensure that the elements in the resulting array maintain the ordering of their first occurrence in \`array-one\`.","solution":"def intersect_arrays(array_one, array_two): Returns a new array with elements that are the intersection of array_one and array_two, maintaining the ordering of their first occurrence in array_one. intersection = [element for element in array_one if element in array_two] return intersection"},{"question":"Create a function that prints the Fibonacci sequence up to a given number \`n\`. The function should take an integer \`n\` as input and print the Fibonacci numbers up to \`n\`. A Fibonacci sequence is a series of numbers where a number is the addition of the last two numbers, starting with 0 and 1. The sequence starts like this: 0, 1, 1, 2, 3, 5, 8, 13, ...","solution":"def fibonacci_sequence(n): Prints the Fibonacci sequence up to a given number n. fib_seq = [] a, b = 0, 1 while a <= n: fib_seq.append(a) a, b = b, a + b return fib_seq"},{"question":"Create a function that generates a balanced binary search tree (BST) from a sorted array of integers. The elements in the array should be placed in the BST such that for any given node, the values in its left subtree are less than the node's value, and the values in its right subtree are greater than the node's value. Ensure the BST is perfectly balanced, meaning all leaf nodes are at the same depth or at most one level apart.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def sorted_array_to_bst(nums): Convert a sorted array to a balanced binary search tree (BST). Args: nums: List[int] - a sorted array of integers. Returns: TreeNode - the root node of the balanced BST. if not nums: return None mid = len(nums) // 2 root = TreeNode(nums[mid]) root.left = sorted_array_to_bst(nums[:mid]) root.right = sorted_array_to_bst(nums[mid + 1:]) return root"},{"question":"Create a function that takes a string and returns the string with all vowels removed. The function should handle both upper and lower case vowels.","solution":"def remove_vowels(input_string): Returns a string with all vowels removed. Handles both upper and lower case vowels. :param input_string: The string from which vowels need to be removed. :return: A string with all vowels removed. vowels = \\"aeiouAEIOU\\" return ''.join([char for char in input_string if char not in vowels])"},{"question":"Create a function that takes an array of integers as an input and returns an array where all the duplicates in the original array are removed while preserving the order of their first occurrence.","solution":"def remove_duplicates(arr): This function takes an array of integers as input and returns an array where all duplicates in the original array are removed, preserving the order of their first occurrence. seen = set() result = [] for num in arr: if num not in seen: seen.add(num) result.append(num) return result"},{"question":"Create a function that takes two arguments, a list of integers and a target sum, and returns True if any two numbers in the list add up to the target sum, and False otherwise.","solution":"def has_pair_with_sum(numbers, target): Returns True if there are any two numbers in 'numbers' that add up to 'target', otherwise False. seen = set() for number in numbers: if target - number in seen: return True seen.add(number) return False"},{"question":"Create a function that takes a string as an argument and returns the number of vowels contained in the string, regardless of case.","solution":"def count_vowels(s): Returns the number of vowels contained in the string s, regardless of case. vowels = 'aeiouAEIOU' return sum(1 for char in s if char in vowels)"},{"question":"Create a function that checks whether a string contains a pattern that repeats itself. The repetition can be of any length, but it must be the same throughout the string.","solution":"def has_repeated_pattern(s): Checks whether the string s contains a pattern that repeats itself. length = len(s) for i in range(1, length // 2 + 1): if length % i == 0: pattern = s[:i] repeated = pattern * (length // i) if repeated == s: return True return False"},{"question":"Create a function that takes a list of tuples as an argument. Each tuple contains two integers. The function should return the sum of the second element of each tuple.","solution":"def sum_of_second_elements(tuples_list): Takes a list of tuples and returns the sum of the second element of each tuple. :param tuples_list: List of tuples, where each tuple contains two integers. :return: Sum of the second elements of each tuple. return sum(t[1] for t in tuples_list)"},{"question":"Create a function that takes a list of integers as input and returns a new list where each element is the square of the original element. Floats in the input list should be squared as well and the function should return a list of floats, rounding the squared values to two decimal places.","solution":"def square_elements(input_list): Returns a new list where each element is the square of the original element. Floats in the input list are squared and the function returns a list of floats, rounding the squared values to two decimal places. Parameters: input_list (list): A list of integers and/or floats. Returns: list: A list of squared values rounded to two decimal places. return [round(x**2, 2) for x in input_list]"},{"question":"Create a function that checks if all the numbers in a list are even. If so, return \`True\`. Otherwise, return \`False\`.","solution":"def all_even(numbers): Returns True if all numbers in the list are even, otherwise returns False. for num in numbers: if num % 2 != 0: return False return True"},{"question":"Create a function that takes an integer as input and returns the factorial of that number using Python.","solution":"def factorial(n): Returns the factorial of a given number n. If n is 0 or 1, the function returns 1. For other positive integers, it returns the product of all positive integers up to n. :param n: an integer, the number to calculate the factorial of :return: the factorial of n if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Create a function that takes in a list of integers as a parameter. The function should return the list with the first and last elements swapped. If the list is empty or contains only one element, it should return the list as is.","solution":"def swap_first_last(lst): Swaps the first and last elements of the list. If the list is empty or contains only one element, it returns the list as is. Parameters: lst (list): The list of integers. Returns: list: The list with the first and last elements swapped. if len(lst) <= 1: return lst # Swap the first and last elements lst[0], lst[-1] = lst[-1], lst[0] return lst"},{"question":"Create a function that will take an integer and return the number of times the digit '1' appears in that number. For example, if the number is 141, the function should return 2.","solution":"def count_ones(n): Returns the number of times the digit '1' appears in the integer n. Parameters: n (int): The input integer Returns: int: Count of '1' digits return str(n).count('1')"},{"question":"Create a function that obtains the factorial of a given number. Additionally, make sure your function handles exceptions when a negative number or zero or a non-integer is passed. The function should return the factorial for positive integers.","solution":"def factorial(n): Returns the factorial of a given non-negative integer n. Raises a ValueError if n is negative, zero, or not an integer. if not isinstance(n, int): raise ValueError(\\"Factorial is only defined for integers.\\") if n < 1: raise ValueError(\\"Factorial is only defined for positive integers.\\") result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Create a function that takes in a list of integers and returns a list of all possible permutations of the integers. The function should be efficient and handle large input sizes. Additionally, the function should not duplicate any permutations in the output.","solution":"from itertools import permutations def all_permutations(lst): Returns a list of all unique permutations of the input list of integers. return list(set(permutations(lst)))"},{"question":"Create a function that takes a string as input and returns a dictionary where keys are the unique characters in the string and values are their corresponding ASCII values. If the string is empty, the function should return an empty dictionary.","solution":"def string_to_ascii_dict(s): Returns a dictionary with unique characters in the string as keys and their corresponding ASCII values as values. return {char: ord(char) for char in set(s)}"},{"question":"Create a function that takes an input list of integers and returns the sum of its even-indexed elements but subtracts the sum of its odd-indexed elements. If the list is empty, the function should return 0. If the list contains only one element, the function should return that element. If the list contains more than one element, the function should perform the operation as described above.","solution":"def sum_even_subtract_odd(lst): Returns the sum of the even-indexed elements minus the sum of the odd-indexed elements. if not lst: return 0 return sum(lst[i] if i % 2 == 0 else -lst[i] for i in range(len(lst)))"},{"question":"Create a function that takes a string as input and returns true if the string is a valid parentheses sequence, otherwise return false. A valid parentheses sequence means that every opening parenthesis '(' has a matching closing parenthesis ')'.","solution":"def is_valid_parentheses_sequence(s: str) -> bool: Returns True if the input string s is a valid parentheses sequence, otherwise False. stack = [] for char in s: if char == '(': stack.append('(') elif char == ')': if not stack: return False stack.pop() return not stack"},{"question":"Create a function that takes a list of integers and an integer N as an input, and return the N largest numbers from the list in descending order. If the input list is empty or the length of the list is less than N, then return the list of all elements in descending order.","solution":"def n_largest_numbers(lst, N): Returns the N largest numbers from the list in descending order. If the input list is empty or the length of the list is less than N, return the list of all elements in descending order. if not lst or len(lst) < N: return sorted(lst, reverse=True) return sorted(lst, reverse=True)[:N]"},{"question":"Create a function that takes an integer as an argument and determines whether or not it is divisible by 3. If it is divisible by 3, return True; otherwise, return False.","solution":"def is_divisible_by_3(n): Checks if a number n is divisible by 3. return n % 3 == 0"},{"question":"Create a function that checks if a given binary search tree (BST) is height-balanced. A binary search tree is considered height-balanced if the height difference between the left and right subtree of any node is not more than 1. Furthermore, both left and right subtrees must also be balanced.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_balanced(root): Checks if a binary tree is height-balanced. :param root: TreeNode :return: bool def check_height(node): if not node: return 0, True left_height, left_balanced = check_height(node.left) right_height, right_balanced = check_height(node.right) current_height = 1 + max(left_height, right_height) is_current_balanced = ( left_balanced and right_balanced and abs(left_height - right_height) <= 1 ) return current_height, is_current_balanced _, balanced = check_height(root) return balanced"},{"question":"Create a function that counts the number of vowels (a, e, i, o, u) in a given string. It should take a string as input and return the count as an integer. The function should be case-insensitive.","solution":"def count_vowels(s): Returns the count of vowels in the given string s. The function is case-insensitive. vowels = 'aeiou' s = s.lower() return sum(1 for char in s if char in vowels)"},{"question":"Create a function that converts a number into its English word representation.","solution":"def number_to_words(num): if num == 0: return \\"Zero\\" less_than_20 = [\\"\\", \\"One\\", \\"Two\\", \\"Three\\", \\"Four\\", \\"Five\\", \\"Six\\", \\"Seven\\", \\"Eight\\", \\"Nine\\", \\"Ten\\", \\"Eleven\\", \\"Twelve\\", \\"Thirteen\\", \\"Fourteen\\", \\"Fifteen\\", \\"Sixteen\\", \\"Seventeen\\", \\"Eighteen\\", \\"Nineteen\\"] tens = [\\"\\", \\"\\", \\"Twenty\\", \\"Thirty\\", \\"Forty\\", \\"Fifty\\", \\"Sixty\\", \\"Seventy\\", \\"Eighty\\", \\"Ninety\\"] thousands = [\\"\\", \\"Thousand\\", \\"Million\\", \\"Billion\\"] def helper(n): if n == 0: return \\"\\" elif n < 20: return less_than_20[n] + \\" \\" elif n < 100: return tens[n // 10] + \\" \\" + helper(n % 10) else: return less_than_20[n // 100] + \\" Hundred \\" + helper(n % 100) res = [] for i in range(len(thousands)): if num % 1000 != 0: res.append(helper(num % 1000) + thousands[i] + \\" \\") num //= 1000 return ''.join(res[::-1]).strip()"},{"question":"Create a function that takes two parameters: a list of integers and a target sum. The function should return true if there exists a pair in the list that adds up to the target sum, and false otherwise.","solution":"def has_pair_with_sum(numbers, target_sum): Returns True if there are two distinct elements in \`numbers\` that add up to \`target_sum\`, otherwise False. seen = set() for number in numbers: complement = target_sum - number if complement in seen: return True seen.add(number) return False"},{"question":"Create a function that takes two strings, a \`base_string\` and a \`char_to_replace\`, and replaces all occurrences of \`char_to_replace\` in \`base_string\` with a new string \`replacement_string\`.","solution":"def replace_character(base_string, char_to_replace, replacement_string): Replaces all occurrences of char_to_replace in base_string with replacement_string. Args: - base_string (str): The original string. - char_to_replace (str): The character to be replaced. - replacement_string (str): The string to replace the character with. Returns: - str: Modified string with replacements. if len(char_to_replace) != 1: raise ValueError(\\"char_to_replace must be a single character.\\") return base_string.replace(char_to_replace, replacement_string)"},{"question":"Create a function that takes two integers as parameters and returns the maximum of the two. If the first integer is greater than or equal to the second integer, the function should return the first integer. Otherwise, it should return the second integer.","solution":"def maximum(a, b): Returns the maximum of a and b. If a is greater than or equal to b, returns a. Otherwise, returns b. if a >= b: return a else: return b"},{"question":"Create a function that takes a list of integers as input and returns the number of negative integers in the list.","solution":"def count_negative_numbers(numbers): Returns the number of negative integers in the list. Parameters: numbers (list of int): The list of integers to check. Returns: int: The number of negative integers in the list. return len([num for num in numbers if num < 0])"},{"question":"Create a function that takes in any number of integer arguments and returns their sum. How can you implement this function in Python?","solution":"def sum_integers(*args): Returns the sum of any number of integer arguments. Parameters: - *args: variable number of integer arguments Returns: - int: sum of the arguments return sum(args)"},{"question":"Create a function that generates a responsive grid layout using CSS Grid with a dynamic number of columns based on the width of the viewport. The function should also allow for specifying the number of rows and the gap between grid items.","solution":"def generate_grid_css(num_columns, num_rows, gap): Generate a responsive grid layout using CSS Grid with a dynamic number of columns, specified number of rows, and gap between grid items. Parameters: - num_columns: int - the number of columns in the grid - num_rows: int - the number of rows in the grid - gap: str - the gap between grid items (e.g., \\"10px\\", \\"1rem\\") Returns: - str: A string containing the CSS for the grid layout. css_template = f .grid-container {{ display: grid; grid-template-columns: repeat(auto-fit, minmax({num_columns}px, 1fr)); grid-template-rows: repeat({num_rows}, auto); gap: {gap}; width: 100%; }} .grid-item {{ background-color: #f3f4f6; border: 1px solid #ddd; padding: 10px; box-sizing: border-box; }} return css_template"},{"question":"Create a function that takes a database cursor and a list of integers (representing item IDs) as input and returns a dictionary mapping each item ID to its corresponding item name. The function should also handle cases where certain item IDs do not exist in the database and return a message indicating that.","solution":"def get_item_names(cursor, item_ids): Given a database cursor and a list of item IDs, returns a dictionary mapping each item ID to its corresponding item name. If an item ID does not exist in the database, it returns a message indicating that. Args: cursor: A database cursor object. item_ids: A list of integers representing item IDs. Returns: A dictionary where keys are item IDs and values are item names or error messages. result = {} for item_id in item_ids: cursor.execute(\\"SELECT name FROM items WHERE id = %s\\", (item_id,)) row = cursor.fetchone() if row: result[item_id] = row['name'] else: result[item_id] = f\\"Item ID {item_id} does not exist\\" return result"},{"question":"Create a function that takes a string input and outputs a list of all substrings of the input string. The substrings should be returned in lexicographical order. If an empty string is input, the function should return an empty list.","solution":"def substrings_in_lexicographical_order(s): Return all substrings of the input string in lexicographical order. Parameters: s (str): The input string. Returns: List[str]: A list of substrings in lexicographical order. substrings = [] n = len(s) for i in range(n): for j in range(i+1, n+1): substrings.append(s[i:j]) substrings.sort() return substrings"},{"question":"Create a function that finds the running total sum of a list of integers and returns the final sum.","solution":"def running_total_sum(numbers): Returns the running total sum of a list of integers and returns the final sum. :param numbers: List of integers. :return: The final sum. running_sum = 0 for number in numbers: running_sum += number return running_sum"},{"question":"Create a function that takes a string as input and returns the string reversed. If the string is超过10 characters, return the reversed string with the first 10 characters in uppercase. If the string is less than or equal to 10 characters, return the reversed string in lowercase.","solution":"def reverse_string(input_str): Reverses the input string. If the reversed string has more than 10 characters, the first 10 characters are converted to uppercase. If it is less than or equal to 10 characters, the entire reversed string is converted to lowercase. Parameters: input_str (str): The string to be reversed and modified. Returns: str: The processed reversed string. reversed_str = input_str[::-1] if len(reversed_str) > 10: modified_str = reversed_str[:10].upper() + reversed_str[10:] else: modified_str = reversed_str.lower() return modified_str"},{"question":"Create a function that generates a list of prime numbers up to a given number \`n\`, using the Sieve of Eratosthenes algorithm.","solution":"def sieve_of_eratosthenes(n): Generates a list of prime numbers up to a given number n using the Sieve of Eratosthenes algorithm. if n < 2: return [] sieve = [True] * (n + 1) sieve[0] = sieve[1] = False for p in range(2, int(n**0.5) + 1): if sieve[p]: for multiple in range(p * p, n + 1, p): sieve[multiple] = False return [number for number, is_prime in enumerate(sieve) if is_prime]"},{"question":"Create a function that takes in a list of integers as input and returns a new list containing only the integers that are greater than 10 and divisible by at least one of the numbers in a given divisor list. The divisor list will always have at least one number.","solution":"def filter_numbers(nums, divisors): Filters and returns a list of integers that are greater than 10 and divisible by at least one of the numbers in divisors. Parameters: nums (list): The list of integers to filter. divisors (list): The list of divisors. Returns: list: A list of filtered integers. return [num for num in nums if num > 10 and any(num % divisor == 0 for divisor in divisors)]"},{"question":"Create a function that takes an integer as input and returns the binary representation of that integer as a string. The function should handle both positive and negative integers.","solution":"def int_to_binary(n): Returns the binary representation of an integer as a string. Handles both positive and negative integers. if n == 0: return \\"0\\" elif n > 0: return bin(n)[2:] else: return \\"-\\" + bin(abs(n))[2:]"},{"question":"Create a function that takes a 2D array and applies a filter operation on it, returning the result.","solution":"def filter_2d_array(arr, filter_function): Applies the filter_function on each element of the 2D array 'arr'. Parameters: arr (list of lists): The 2D array to be filtered filter_function (function): The filter function to apply Returns: list of lists: The filtered 2D array return [[filter_function(element) for element in row] for row in arr]"},{"question":"Create a function that takes in two lists of equal length and returns a dictionary where the keys are the elements from the first list and the values are the corresponding elements from the second list.","solution":"def lists_to_dict(keys, values): Given two lists of equal length, returns a dictionary where the keys are the elements from the first list and the values are the corresponding elements from the second list. Args: keys (list): The list of keys. values (list): The list of values. Returns: dict: A dictionary mapping keys to values. if len(keys) != len(values): raise ValueError(\\"Both lists must have the same length.\\") return dict(zip(keys, values))"},{"question":"Create a function that calculates the sum of two binary strings and returns the result as a binary string. You can assume that the input strings are non-empty and contain only the characters '0' and '1'. The function should handle cases where the input strings might have different lengths.","solution":"def add_binary(a, b): Returns the sum of two binary strings as a binary string. max_len = max(len(a), len(b)) # Pad the shorter string with leading zeros a = a.zfill(max_len) b = b.zfill(max_len) carry = 0 result = [] for i in range(max_len - 1, -1, -1): sum = int(a[i]) + int(b[i]) + carry carry = sum // 2 result.append(str(sum % 2)) if carry: result.append('1') return ''.join(result[::-1])"},{"question":"Create a function that takes a list of integers as its input and returns a new list where the integers are sorted in ascending order. The function should also remove any duplicate integers from the sorted list.","solution":"def unique_sorted_list(numbers): Returns a sorted list with unique integers from the input list. return sorted(set(numbers))"},{"question":"Create a function that takes one argument: an integer \`n >= 0\`. The function returns the nearest even number to \`n\`.","solution":"def nearest_even(n): Returns the nearest even number to \`n\`. if n % 2 == 0: return n else: return n - 1 if n % 2 != 0 else n + 1"},{"question":"Create a function that takes a positive integer as input and returns the smallest positive integer that is a multiple of both the input number and a given divisor.","solution":"def smallest_common_multiple(n, divisor): Returns the smallest positive integer that is a multiple of both the input number \`n\` and the \`divisor\`. def gcd(x, y): while y: x, y = y, x % y return x def lcm(x, y): return x * y // gcd(x, y) return lcm(n, divisor)"},{"question":"Create a function that takes a string as input and returns its ASCII values. For example, if the input is \\"test\\", the function should return [116, 101, 115, 116].","solution":"def string_to_ascii(s): Converts a string to a list of ASCII values for each character in the string. Parameters: s (str): Input string. Returns: List[int]: List of ASCII values. return [ord(char) for char in s]"},{"question":"Create a function that takes as input (a, b) represent the lengths of the sides of a right-angled triangle. The function should return the length of the hypotenuse of the triangle.","solution":"import math def hypotenuse(a, b): Returns the length of the hypotenuse of a right-angled triangle with sides length a and b. return math.sqrt(a**2 + b**2)"},{"question":"Create a function that takes two strings, a paragraph and a word, as parameters and returns the frequency of the word in the paragraph.","solution":"def word_frequency(paragraph, word): Returns the frequency of the word in the paragraph. Parameters: paragraph (str): The paragraph to search within. word (str): The word to search for. Returns: int: The frequency of the word in the paragraph. from collections import Counter import re # Normalize and split the paragraph into words words = re.findall(r'bw+b', paragraph.lower()) # Count frequency of each word word_count = Counter(words) # Return the frequency of the given word, defaulting to 0 if not found return word_count[word.lower()]"},{"question":"Create a function that takes three points (x1, y1, x2, y2, x3, y3) as input and returns the area of the triangle formed by these points.","solution":"def triangle_area(x1, y1, x2, y2, x3, y3): Calculate the area of a triangle given its vertices (x1, y1), (x2, y2), (x3, y3). The formula used is the determinant-based formula: Area = 0.5 * abs(x1*(y2 - y3) + x2*(y3 - y1) + x3*(y1 - y2)) area = 0.5 * abs(x1*(y2 - y3) + x2*(y3 - y1) + x3*(y1 - y2)) return area"},{"question":"Create a function that checks if a list of strings contains any anagrams of each other. Two strings are considered anagrams if they contain the same characters in any order. For example, \\"listen\\" and \\"silent\\" are anagrams.","solution":"def contains_anagrams(strings): Returns True if the list of strings contains any anagrams of each other, otherwise False. sorted_strings = [''.join(sorted(s)) for s in strings] return len(sorted_strings) != len(set(sorted_strings))"},{"question":"Create a function that can take a word from the user and return the number of vowels present in the word. In Python, how would you solve this?","solution":"def count_vowels(word): Returns the number of vowels present in the given word. Parameters: word (str): The input word. Returns: int: The number of vowels in the word. vowels = \\"aeiouAEIOU\\" return sum(1 for char in word if char in vowels)"},{"question":"Create a function that converts a string to a nested dictionary. The dictionary should mimic the structure of the string provided, where each nested structure is enclosed by square brackets '[]'.","solution":"def string_to_nested_dict(s): Converts a string with nested brackets into a nested dictionary. Parameters: s (str): The input string with nested brackets. Returns: dict: The nested dictionary representation of the input string. def parse(s): result = {} stack = [] current = result key = None for char in s: if char == '[': new_dict = {} if key is not None: current[key] = new_dict stack.append(current) current = new_dict key = None elif char == ']': current = stack.pop() elif char == ',': key = None else: if key is None: key = char current[key] = None return result return parse(s)"},{"question":"Create a function that accepts two parameters, \`a\` and \`b\`, which are positive integers. The function should return a new string that combines the two integers into a single string in ascending order, without any repetition of digits. For example, if \`a = 123\` and \`b = 345\`, the function should return \`\\"12345\\"\`. If \`a = 112\` and \`b = 417\`, the function should return \`\\"112347\\"\`. Assume that both integers are non-negative.","solution":"def combine_integers(a, b): Combines two positive integers into a single string in ascending order without any repetition of digits. # Convert integers to strings str_a = str(a) str_b = str(b) # Combine the strings and convert to a set to remove duplicates combined_set = set(str_a + str_b) # Sort the set to get the digits in ascending order sorted_digits = sorted(combined_set) # Join the sorted digits into a single string result = ''.join(sorted_digits) return result"},{"question":"Create a function that takes in a list of integers and returns the sum of the even numbers in the list modulo 10. If there are no even numbers, the function should return 0.","solution":"def sum_even_mod_10(lst): Returns the sum of even numbers in the list modulo 10. If there are no even numbers, returns 0. even_sum = sum(x for x in lst if x % 2 == 0) return even_sum % 10 if even_sum != 0 else 0"},{"question":"Create a function that takes an array of integers and returns a new array where each element is the exponents of 2 (powers of 2) for the corresponding elements in the input array.","solution":"def powers_of_two(arr): Takes an array of integers and returns a new array where each element is 2 raised to the power of the corresponding element in the input array. return [2 ** x for x in arr]"},{"question":"Create a function that generates a list of all numbers in the range 1 to 100000 that are divisible by 3, 5, or 7.","solution":"def divisible_by_3_5_7(): Returns a list of all numbers in the range from 1 to 100000 that are divisible by 3, 5, or 7. return [i for i in range(1, 100001) if i % 3 == 0 or i % 5 == 0 or i % 7 == 0]"},{"question":"Create a function that takes in a list of integers and returns a new list with all the prime numbers from the original list. A prime number is a number greater than 1 that has no positive divisors other than 1 and itself.","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5)+1, 2): if n % i == 0: return False return True def filter_primes(numbers): Given a list of integers, return a new list with all the prime numbers from the original list. return [num for num in numbers if is_prime(num)]"},{"question":"Create a function that takes two integers as arguments and returns the sum of their last digits. If the number is negative, consider the absolute value of the number as well.","solution":"def sum_last_digits(a, b): Returns the sum of the last digits of two integers a and b, considering the absolute value of the numbers. last_digit_a = abs(a) % 10 last_digit_b = abs(b) % 10 return last_digit_a + last_digit_b"},{"question":"Create a function that generates an HTML unordered list (\`<ul>\`) of in list items (\`<li>\`) from an array of strings. Each list item should contain the text of the string from the array. Additionally, if an array contains multiple strings but is empty, an error message should be returned.","solution":"def generate_html_list(items): Generates an HTML unordered list from an array of strings. :param items: List of strings :return: HTML string of unordered list if not items: return \\"Error: The list is empty.\\" ul = \\"<ul>n\\" for item in items: ul += f\\" <li>{item}</li>n\\" ul += \\"</ul>\\" return ul"},{"question":"Create a function that takes a list of integers as input and returns a new list where all elements are multiplied by a given factor and then shuffled to create a random order.","solution":"import random def multiply_and_shuffle(lst, factor): Returns a new list where all elements of the input list 'lst' are multiplied by 'factor' and then shuffled to create a random order. if not isinstance(lst, list) or not all(isinstance(x, int) for x in lst) or not isinstance(factor, int): raise ValueError('Invalid input: lst should be a list of integers and factor should be an integer.') multiplied_lst = [x * factor for x in lst] random.shuffle(multiplied_lst) return multiplied_lst"},{"question":"Create a function that takes a string of text and adds an exclamation mark at the end if it doesn't already end with one. If the text is empty, return an empty string.","solution":"def add_exclamation(text): Add an exclamation mark to the end of the string if it doesn't already end with one. If the string is empty, return an empty string. :param text: The input text string. :return: The input string with an exclamation mark at the end if necessary. if not text: return \\"\\" if not text.endswith('!'): return text + '!' return text"},{"question":"Create a function that takes two parameters, name and age, and returns a string that says: \\"Hello, my name is [name] and I am [age] years old.\\"","solution":"def introduce(name, age): Returns a string that introduces a person with their name and age. return f\\"Hello, my name is {name} and I am {age} years old.\\""},{"question":"Create a function that takes two sorted arrays and returns a sorted array containing all the elements that appear in both arrays (intersection). The function should run in O(n + m) time complexity, where n and m are the lengths of the two arrays respectively. Additionally, the function should not use any extra space for the output array.","solution":"def intersection_sorted_arrays(arr1, arr2): Finds the intersection of two sorted arrays. Parameters: arr1 (list): First sorted array. arr2 (list): Second sorted array. Returns: list: Sorted array of elements that appear in both arr1 and arr2. i, j = 0, 0 result = [] while i < len(arr1) and j < len(arr2): if arr1[i] == arr2[j]: if len(result) == 0 or result[-1] != arr1[i]: result.append(arr1[i]) i += 1 j += 1 elif arr1[i] < arr2[j]: i += 1 else: j += 1 return result"},{"question":"Create a function that calculates and returns the Fibonacci sequence for a given number using recursion. The Fibonacci sequence is defined such that each number is the sum of the two preceding ones, usually starting with 0 and 1. For example, the first six numbers of the Fibonacci sequence are: 0, 1, 1, 2, 3, 5.","solution":"def fibonacci_recursive(n): Returns the Fibonacci sequence for a given number n using recursion. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] else: seq = fibonacci_recursive(n - 1) seq.append(seq[-1] + seq[-2]) return seq"},{"question":"Create a function that calculates the sum of all numbers up to a specified number.","solution":"def sum_up_to(n): Returns the sum of all numbers from 1 to n. If n is 0 or negative, the function returns 0. if n <= 0: return 0 return n * (n + 1) // 2"},{"question":"Create a function that will sum the digits of a number (N), given as a string, and return the result.","solution":"def sum_of_digits(n): Returns the sum of the digits of the number represented by the string n. return sum(int(digit) for digit in n)"},{"question":"Create a function that takes an integer as input and returns a new integer that is the reverse of the input integer. If the input integer is negative, the output should also be negative, and the function should handle large integers efficiently.","solution":"def reverse_integer(n): Returns the integer that is the reverse of the input integer n. Parameters: n (int): The input integer to be reversed. Returns: int: The reversed integer, maintaining the sign. sign = -1 if n < 0 else 1 reversed_str = str(abs(n))[::-1] reversed_int = int(reversed_str) return sign * reversed_int"},{"question":"Create a function that takes three parameters, all of which should be integers, and returns the sum of those integers. If any of the parameters are not integers, the function should return an error message \\"All parameters must be integers.\\"","solution":"def sum_integers(a, b, c): Returns the sum of three integers a, b, and c. If any parameter is not an integer, returns an error message. if not all(isinstance(i, int) for i in [a, b, c]): return \\"All parameters must be integers.\\" return a + b + c"},{"question":"Create a function that takes a list of integers as input and returns the smallest even number and the largest odd number in the list. If there is no even or odd number in the list, return \`None\` for that value. The function should return these values in a tuple.","solution":"def find_smallest_even_largest_odd(numbers): Returns the smallest even number and the largest odd number in the list. If there is no even or odd number, returns None for that value. :param numbers: List of integers :return: Tuple (smallest_even, largest_odd) smallest_even = None largest_odd = None for num in numbers: if num % 2 == 0: if smallest_even is None or num < smallest_even: smallest_even = num else: if largest_odd is None or num > largest_odd: largest_odd = num return smallest_even, largest_odd"},{"question":"Create a function that checks if a given string represents a valid JSON object. If it does, return the parsed JSON object. If it doesn't, return an error message.","solution":"import json def validate_json(json_string): Validates if a string is a valid JSON object. If valid, returns the parsed JSON object. Otherwise, returns an error message. Parameters: - json_string (str): The JSON string to validate. Returns: - dict or list: The parsed JSON object if valid. - str: Error message if invalid. try: return json.loads(json_string) except json.JSONDecodeError: return \\"Invalid JSON object\\""},{"question":"Create a function that will accept two arguments - a list of numbers and a target number. The function should return the index of the target number in the list. If the target number is not in the list, return -1.","solution":"def find_index(nums, target): Returns the index of the target number in the list nums. If the target is not in the list, return -1. try: return nums.index(target) except ValueError: return -1"},{"question":"Create a function that takes a list of integers and returns the same list with all duplicate values removed. You should preserve the order in which the elements appeared in the original list.","solution":"def remove_duplicates(lst): Removes duplicates from the list while preserving the order of elements. seen = set() unique_list = [] for item in lst: if item not in seen: unique_list.append(item) seen.add(item) return unique_list"},{"question":"Create a function that takes in five numbers as parameters and returns their average. Implement this function using a loop and the concept of a running total.","solution":"def average_of_five_numbers(a, b, c, d, e): Returns the average of five numbers using a loop and a running total. numbers = [a, b, c, d, e] total = 0 for number in numbers: total += number average = total / len(numbers) return average"},{"question":"Create a function that takes a list of integers and returns a list of tuples, where each tuple represents the frequency of each integer in the list. For example, given the list \`[1, 2, 2, 3, 3, 3]\`, the function should return \`[(1, 1), (2, 2), (3, 3)]\`.","solution":"from collections import Counter def frequency_tuples(lst): Returns a list of tuples representing the frequency of each integer in the input list. frequency_counts = Counter(lst) return sorted(frequency_counts.items())"},{"question":"Create a function that sorts an array of non-negative integers using the Bubble Sort algorithm. Finally, display the sorted array. Bubble Sort is a simple sorting algorithm that repeatedly steps through the list to be sorted, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted.","solution":"def bubble_sort(arr): Sorts an array of non-negative integers using the Bubble Sort algorithm. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr # Example usage: sorted_array = bubble_sort([64, 34, 25, 12, 22, 11, 90]) print(sorted_array) # Output: [11, 12, 22, 25, 34, 64, 90]"},{"question":"Create a function that accepts a list of positive integers and returns the total sum of those integers. Your function should also check if all the numbers in the list are even. If all numbers are even, return the sum multiplied by 2; otherwise, return the sum as it is.","solution":"def sum_even_check(lst): Returns the sum of numbers in lst. If all numbers are even, returns the sum multiplied by 2. total_sum = sum(lst) if all(num % 2 == 0 for num in lst): return total_sum * 2 return total_sum"},{"question":"Create a function that takes a list of integers and return a list of strings where each string is the integer converted to a string. Use Python.","solution":"def convert_integers_to_strings(integers): Takes a list of integers and returns a list of strings where each string is the integer converted to a string. Parameters: integers (list): A list of integers. Returns: list: A list of strings. return [str(num) for num in integers]"},{"question":"Create a function that takes an integer \`n\`, and returns the sum of the first \`n\` positive integers. The function should use recursion to achieve this.","solution":"def sum_recursive(n): Returns the sum of the first n positive integers using recursion. if n == 1: return 1 return n + sum_recursive(n-1)"},{"question":"Create a function that takes a list of integers as input and returns the sum of all the positive integers in the list. Here is an array list of integers: [1, -2, 4, -3, 5, -6, 7, 8]","solution":"def sum_of_positives(lst): Returns the sum of all positive integers in the list. Parameters: lst (list): List of integers. Returns: int: Sum of positive integers. return sum(x for x in lst if x > 0)"},{"question":"Create a function that takes a string as an input and returns the character that appears the most times in the string. If there are multiple characters with the same highest frequency, return the first one encountered.","solution":"def most_frequent_char(s): Returns the character that appears the most times in the string s. If there are multiple characters with the same highest frequency, returns the first one encountered. if not s: return None freq_dict = {} for char in s: if char in freq_dict: freq_dict[char] += 1 else: freq_dict[char] = 1 most_frequent = max(freq_dict, key=freq_dict.get) return most_frequent"},{"question":"Create a function that takes an integer \`n\` and returns a list of integers from 1 to \`n\` that are divisible by 3 or 5, and are even.","solution":"def divisible_by_3_or_5_even(n): Returns a list of integers from 1 to n that are divisible by either 3 or 5 and are even. return [i for i in range(1, n + 1) if (i % 3 == 0 or i % 5 == 0) and i % 2 == 0]"},{"question":"Create a function that takes a list of integers and returns a list of their squares. The function should also handle negative numbers and ensure that the output list is sorted in ascending order.","solution":"def sorted_squares(nums): Given a list of integers, return a new list containing the squares of each number sorted in ascending order. Args: nums (list of int): List of integers. Returns: list of int: Sorted list of squared integers. squared = [x ** 2 for x in nums] squared.sort() return squared"},{"question":"Create a function that takes a single string as an argument and returns a string with the characters in reverse order. If the string is more than 10 characters long, return it reversed and in uppercase, otherwise return it reversed but still lowercase. If the string is exactly 10 characters long, reverse it but still keep it in lowercase.","solution":"def reverse_string(s): Returns a string with the characters in reverse order. If the string is more than 10 characters long, returns it reversed and in uppercase. Otherwise, returns it reversed but in lowercase. reversed_str = s[::-1] if len(s) > 10: return reversed_str.upper() else: return reversed_str.lower()"},{"question":"Create a function that generates a Fibonacci sequence of a given length using recursion in Python.","solution":"def fibonacci_sequence(n): Generates the Fibonacci sequence of length n using recursion. def fibonacci(num): if num <= 1: return num else: return fibonacci(num - 1) + fibonacci(num - 2) return [fibonacci(i) for i in range(n)]"},{"question":"Create a function that takes in a list of strings, and counts how many strings have at least one lowercase letter and one uppercase letter.","solution":"def count_mixed_case_strings(strings): Counts how many strings in the list have at least one lowercase letter and one uppercase letter. Args: strings (list of str): The input list of strings. Returns: int: The count of strings with at least one lowercase and one uppercase letter. count = 0 for s in strings: has_upper = any(c.isupper() for c in s) has_lower = any(c.islower() for c in s) if has_upper and has_lower: count += 1 return count"},{"question":"Create a function that takes two strings as input and returns the longest common subsequence (LCS) between them. The LCS is the longest sequence of characters that appear left-to-right (but not necessarily in a contiguous block) in both strings. If no common subsequence other than the empty string exists, the function should return an empty string.","solution":"def longest_common_subsequence(str1, str2): Returns the longest common subsequence between str1 and str2. m, n = len(str1), len(str2) dp = [[\\"\\" for _ in range(n+1)] for _ in range(m+1)] for i in range(1, m+1): for j in range(1, n+1): if str1[i-1] == str2[j-1]: dp[i][j] = dp[i-1][j-1] + str1[i-1] else: dp[i][j] = max(dp[i-1][j], dp[i][j-1], key=len) return dp[m][n]"},{"question":"Create a function that calculates the sum of all numbers in a given list. How can you handle this task if the list contains non-numeric data types?","solution":"def sum_numeric_values(lst): Returns the sum of all numeric values in the provided list. Non-numeric values are ignored. Args: lst (list): A list containing numeric and/or non-numeric values. Returns: int or float: The sum of all numeric values in the list. return sum(item for item in lst if isinstance(item, (int, float)))"},{"question":"Create a function that checks if a given string starts with and ends with the same character.","solution":"def starts_and_ends_with_same_char(s): Check if the string \`s\` starts and ends with the same character. Args: s (str): The string to check. Returns: bool: True if the string starts and ends with the same character, False otherwise. if len(s) == 0: return False return s[0] == s[-1]"},{"question":"Create a function that counts the total number of even digits in a given integer. For example, if the input is 12345, the function should return 2 because there are two even digits in the number (2 and 4).","solution":"def count_even_digits(n): Returns the count of even digits in the given integer n. # Ensure n is treated as a positive number for iteration over digits n = abs(n) # Convert the number to string to iterate over digits digits = str(n) # Counter for even digits even_count = 0 # Iterate over each digit and check if it is even for digit in digits: if int(digit) % 2 == 0: even_count += 1 return even_count"},{"question":"Create a function that takes in an integer, and returns whether or not that number is a prime number. A prime number is a number that is divisible only by 1 and itself. For example, 2, 3, 5, 7 are prime numbers, but 4, 6, 8, 9, 10 are not.","solution":"def is_prime(n): Returns True if \`n\` is a prime number, otherwise False. A prime number is a natural number greater than 1 that is not divisible by any number other than 1 and itself. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True"},{"question":"Create a function that finds the maximum sum of any contiguous subarray of a given array. This is known as Kadane's Algorithm.","solution":"def max_subarray_sum(arr): Finds the maximum sum of any contiguous subarray within a given array using Kadane's Algorithm. Parameters: arr (list): A list of integers. Returns: int: The maximum sum of any contiguous subarray. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that receives two parameters, both of nonzero length and both consisting solely of integers. The function should return true if the two lists are equal.two lists are considered equal if they have the same length and the same elements in the same order.","solution":"def are_lists_equal(list1, list2): Returns True if both lists are equal (same length and same elements in the same order), False otherwise. return list1 == list2"},{"question":"Create a function that takes two arguments, a town and a list of towns, and returns \`true\` if the town is in the list of towns, and \`false\` otherwise.","solution":"def is_town_in_list(town, towns_list): Returns True if the town is in the towns_list, otherwise returns False. Parameters: town (str): The name of the town to check. towns_list (list): A list of town names. Returns: bool: True if the town is in the list, False otherwise. return town in towns_list"},{"question":"Create a function that takes a string as input and returns the count of vowels in it. Consider 'aeiou' as vowels and they can appear in both uppercase and lowercase. Also, count 'y' as a vowel if it's at the end of the string.","solution":"def count_vowels(s): Returns the count of vowels in the given string. Vowels are 'a', 'e', 'i', 'o', 'u' in both uppercase and lowercase. 'y' is also considered as a vowel if it appears at the end of the string. vowels = 'aeiouAEIOU' count = 0 for char in s: if char in vowels: count += 1 if s and s[-1].lower() == 'y': count += 1 return count"},{"question":"Create a function that takes an integer as an input and calculates its factorial. You should also check if the entered number is a non-negative integer before calculating the factorial. If the number is negative, return an appropriate error message. If the number is a non-negative integer, calculate and return the factorial.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. If n is negative, returns an appropriate error message. if not isinstance(n, int): return \\"Input must be an integer.\\" if n < 0: return \\"Error: Input must be a non-negative integer.\\" if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Create a function that takes a string and reverses the order of the characters without modifying the characters themselves. For example, reversing \\"hello\\" should yield \\"olleh\\".","solution":"def reverse_string(s): Reverses the order of characters in the string s. return s[::-1]"},{"question":"Create a function that , given an integer array, finds and prints the maximum sum of any subarray that can be formed using elements from the array. The subarray may be contiguous or non-contiguous.","solution":"def max_subarray_sum(arr): Given an integer array, this function finds the maximum sum of any subarray that can be formed using elements from the array. The subarray may be contiguous or non-contiguous. if not arr: return 0 max_sum = arr[0] current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Create a function that generates a list of even numbers between two given numbers (inclusive).","solution":"def generate_even_numbers(start, end): Returns a list of even numbers between start and end (inclusive). return [num for num in range(start, end + 1) if num % 2 == 0]"},{"question":"Create a function that takes in a dictionary of dictionaries, each representing a family member's details including name, age, and favorite color. The function should return a dictionary where the keys are the favorite colors and the values are lists of names of family members who share that favorite color.","solution":"def group_by_favorite_color(family_dict): Groups family members by their favorite colors. Args: family_dict (dict): A dictionary of dictionaries containing family member details. Returns: dict: A dictionary where keys are favorite colors and values are lists of names sharing that color. color_groups = {} for member, details in family_dict.items(): color = details['favorite_color'] if color not in color_groups: color_groups[color] = [] color_groups[color].append(details['name']) return color_groups"},{"question":"Create a function that takes a list of integers as input and returns a new list where each element is the sum of the original element and its index in the list.","solution":"def add_elements_with_indices(lst): Returns a new list where each element is the sum of the original element and its index. Parameters: lst (list): A list of integers. Returns: list: A new list where each element is the sum of the original element and its index. return [value + index for index, value in enumerate(lst)]"},{"question":"Create a function that takes an integer \`N\` as input and returns the sum of all prime numbers less than or equal to \`N\`. For example, if \`N\` is 10, the function should return the sum of 2, 3, 5, and 7, which is 17.","solution":"def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def sum_of_primes(N): Returns the sum of all prime numbers less than or equal to N. total = 0 for num in range(2, N+1): if is_prime(num): total += num return total"},{"question":"Create a function that takes an integer argument and prints out the \\"FizzBuzz\\" series for numbers from 1 to the argument. \\"Fizz\\" should print for multiples of 3, \\"Buzz\\" for multiples of 5, and \\"FizzBuzz\\" for multiples of both 3 and 5.","solution":"def fizzbuzz(n): Prints the FizzBuzz series from 1 to n. Multiples of 3 print \\"Fizz\\" Multiples of 5 print \\"Buzz\\" Multiples of both 3 and 5 print \\"FizzBuzz\\" Otherwise prints the number. result = [] for i in range(1, n + 1): if i % 3 == 0 and i % 5 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return result"},{"question":"Create a function that accepts two integer arguments and returns the maximum of the two numbers. The function should be named \`find_maximum\`. If the numbers are equal, it should return that number.","solution":"def find_maximum(a, b): Returns the maximum of the two numbers a and b. If the numbers are equal, returns that number. return a if a > b else b"},{"question":"Create a function that takes no parameters and will return the current year.","solution":"import datetime def current_year(): Returns the current year. return datetime.datetime.now().year"},{"question":"Create a function that determines the availability of a resource based on its current state, ordering history, and customer preferences. The function should return a boolean value indicating whether the resource is available to be rented.","solution":"def is_resource_available(current_state, ordering_history, customer_preferences): Determines the availability of a resource based on its current state, ordering history, and customer preferences. Parameters: - current_state (dict): Dictionary containing the current state of the resource. - ordering_history (list): List containing the past ordering history of the resource. - customer_preferences (dict): Dictionary containing the preferences of the customer. Returns: - bool: True if the resource is available to be rented, False otherwise. # Check if the resource is currently available if not current_state.get('available', False): return False # Check the ordering history for availability issues if 'last_order' in ordering_history and ordering_history['last_order']['status'] != 'completed': return False # Match customer preferences with the resource for key, value in customer_preferences.items(): if current_state.get(key) != value: return False return True"},{"question":"Create a function that accepts a list of integers as input and returns a new list with the numbers sorted in ascending order. You are not allowed to use the built-in sort function.","solution":"def sort_integers(lst): Accepts a list of integers as input and returns a new list with the numbers sorted in ascending order using the bubble sort algorithm. n = len(lst) sorted_list = lst.copy() for i in range(n): for j in range(0, n-i-1): if sorted_list[j] > sorted_list[j+1]: sorted_list[j], sorted_list[j+1] = sorted_list[j+1], sorted_list[j] return sorted_list"},{"question":"Create a function that takes a list of strings as an argument. Each string in the list represents a line of a poem. The function should return a new list of strings where each string is the reverse of its corresponding string in the input list, preserving the tragectory of the poem (i.e., not changing the order of the lines).","solution":"def reverse_poem_lines(poem): Takes a list of strings, where each string is a line of a poem. Returns a new list of strings where each string is the reverse of its corresponding string in the input list. return [line[::-1] for line in poem]"},{"question":"Create a function that returns the minimum number of swaps to sort an array in ascending order by swapping elements with their adjacent elements...","solution":"def min_swaps_to_sort(nums): Returns the minimum number of swaps to sort the array in ascending order by swapping adjacent elements. def count_inversions(arr): count = 0 def merge_sort(arr): nonlocal count if len(arr) > 1: mid = len(arr) // 2 left_half = arr[:mid] right_half = arr[mid:] merge_sort(left_half) merge_sort(right_half) i = j = k = 0 while i < len(left_half) and j < len(right_half): if left_half[i] <= right_half[j]: arr[k] = left_half[i] i += 1 else: arr[k] = right_half[j] count += len(left_half) - i j += 1 k += 1 while i < len(left_half): arr[k] = left_half[i] i += 1 k += 1 while j < len(right_half): arr[k] = right_half[j] j += 1 k += 1 merge_sort(arr) return count return count_inversions(nums[:])"},{"question":"Create a function that takes two parameters: a string and an integer. The function should divide the string into chunks of a given length equal to the integer value. If the string is not evenly divisible by the integer, the last chunk should be filled with a specified character.","solution":"def chunk_string(s, n, fill_char='*'): Divide the string s into chunks of length n. If the string is not evenly divisible by n, fill the last chunk with the specified fill_char. Parameters: - s: input string - n: length of each chunk - fill_char: character to fill the last chunk if necessary Returns: A list of string chunks. chunks = [s[i:i+n] for i in range(0, len(s), n)] if len(chunks[-1]) < n: chunks[-1] = chunks[-1].ljust(n, fill_char) return chunks"},{"question":"Create a function that takes a string and returns true if the string contains any duplicate characters and false otherwise.","solution":"def has_duplicates(s): Returns True if the string contains any duplicate characters, False otherwise. seen = set() for char in s: if char in seen: return True seen.add(char) return False"},{"question":"Create a function that takes in a list of integers and returns the sum of their absolute values. For example, if the input list is [-1, 2, -3, 4], the function would return 10, since the sum of the absolute values is 1 + 2 + 3 + 4.","solution":"def sum_of_absolute_values(lst): Returns the sum of absolute values of the integers in the list. Parameters: lst (list): A list of integers Returns: int: Sum of the absolute values of the integers in the list return sum(abs(x) for x in lst)"},{"question":"Create a function that takes an integer \`n\` as input and returns a list of all prime numbers less than or equal to \`n\`. You should use the Sieve of Eratosthenes algorithm for this task.","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers less than or equal to n. Uses the Sieve of Eratosthenes algorithm. if n < 2: return [] # Initialize a list of boolean values representing primality is_prime = [True] * (n + 1) is_prime[0], is_prime[1] = False, False # 0 and 1 are not prime numbers p = 2 while (p * p <= n): if is_prime[p]: # Updating all multiples of p to not prime for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 # Collect all prime numbers prime_numbers = [p for p in range(n + 1) if is_prime[p]] return prime_numbers"},{"question":"Create a function that takes a number as input and returns its factorial, but only if the number is a prime. If the number is not a prime, the function should return \\"Input is not a prime number\\".","solution":"def is_prime(n): Helper function that checks if a number is prime. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def factorial(n): Helper function that calculates the factorial of a number. if n == 0 or n == 1: return 1 return n * factorial(n - 1) def prime_factorial(n): Returns the factorial of a number if it is prime, otherwise returns 'Input is not a prime number'. if is_prime(n): return factorial(n) else: return \\"Input is not a prime number\\""},{"question":"Create a function that has a single parameter, x, and that returns the string \\"Hello, x!\\" where x is the value of the parameter. The function should be able to handle any input value for x, and should return \\"Hello, !!\\" if no value is passed to the function.","solution":"def greet(x=\\"!\\"): Returns the greeting message \\"Hello, x!\\" where x is the value of the parameter. If no value is passed to the function, it returns \\"Hello, !!\\". return f\\"Hello, {x}!\\""},{"question":"Create a function that provides the minimum value from a given list of integers. How can I solve this problem in Python?","solution":"def find_minimum_value(numbers): Returns the minimum value from a given list of integers. If the list is empty, returns None. if not numbers: return None return min(numbers)"},{"question":"Create a function that takes an array of integers and a target value. The function should return the index of the first element in the array that is greater than the target value, or -1 if no such element exists.","solution":"def first_greater_than(arr, target): Returns the index of the first element in arr that is greater than target. Returns -1 if no such element exists. for index, value in enumerate(arr): if value > target: return index return -1"},{"question":"Create a function that takes in four integer arguments (a, b, c, d) and generates an array of the 4 integers. Sort the array in ascending order and return it.","solution":"def sort_four_integers(a, b, c, d): Takes four integer arguments and returns a sorted list of these integers in ascending order. return sorted([a, b, c, d])"},{"question":"Create a function that takes a list of tuples as input. Each tuple contains two integers. The function should return a new list of tuples, where each tuple contains the sum of the two integers and the difference of the two integers. The sum and the difference should be calculated and stored in separate tuples within the returned list.","solution":"def sum_and_difference(pairs): Given a list of tuples, where each tuple contains two integers, returns a new list of tuples. Each tuple in the new list contains the sum and the difference of the two integers in the corresponding input tuple. :param pairs: List of tuples, where each tuple contains two integers. :return: List of tuples, where each tuple contains (sum, difference). result = [] for a, b in pairs: result.append((a + b, a - b)) return result"},{"question":"Create a function that takes an integer as input and returns the sum of its digits. However, if the input is negative, the function should return the sum with a negative sign. For example, -123 should return -6.","solution":"def sum_of_digits(n): Returns the sum of the digits of an integer n. If n is negative, the result is also negative. str_n = str(abs(n)) sum_digits = sum(int(digit) for digit in str_n) return sum_digits if n >= 0 else -sum_digits"},{"question":"Create a function that takes an array of integers and returns the indices of two numbers such that they add up to a specific target.","solution":"def two_sum(nums, target): This function takes an array of integers and a target integer, and returns indices of two numbers in the array such that they add up to the target. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return None"},{"question":"Create a function that takes two arguments: a string and an integer. The function should return a list of tuples, where each tuple contains a character from the string and its corresponding index in the string. The list should be sorted in ascending order based on the characters' ASCII values.","solution":"def sorted_char_with_index(s, n): Given a string \`s\` and an integer \`n\`, returns a list of tuples where each tuple contains a character from the string and its corresponding index in the string. The list is sorted in ascending order based on the characters' ASCII values. result = [(char, idx) for idx, char in enumerate(s)] result.sort(key=lambda x: x[0]) return result"},{"question":"Create a function that takes a list of strings and returns a dictionary. The dictionary should have the string as the key and the length of the string as the value.","solution":"def strings_to_length_dict(string_list): Takes a list of strings and returns a dictionary where the keys are the strings and the values are the lengths of those strings. return {s: len(s) for s in string_list}"},{"question":"Create a function that takes a string as input and returns the string with all vowels capitalized and all consonants in lower case. For example, if the input string is \\"Hello World!\\", the function should return \\"hElLo wOrld!\\". How can this be done in Python?","solution":"def capitalize_vowels(input_string): Returns the input string with all vowels capitalized and all consonants in lower case. Parameters: input_string (str): The string to be transformed. Returns: str: The transformed string with vowels capitalized and consonants in lower case. vowels = 'aeiouAEIOU' result = '' for char in input_string: if char in vowels: result += char.upper() else: result += char.lower() return result"},{"question":"Create a function that prints the Fibonacci sequence up to a given number. The function should take a single parameter, which is the maximum value of the sequence. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. The function should stop adding numbers to the sequence once it reaches or exceeds the maximum value.","solution":"def fibonacci_sequence(max_value): Prints the Fibonacci sequence up to a given number. Parameters: max_value (int): The maximum value of the sequence. if max_value < 0: return [] sequence = [] a, b = 0, 1 while a <= max_value: sequence.append(a) a, b = b, a + b return sequence"},{"question":"Create a function that sorts a list of strings in Python using the merge sort algorithm. Additionally, write a docstring to describe what your function does and explain its parameters.","solution":"def merge_sort(lst): Sorts a list of strings in ascending order using the merge sort algorithm. Parameters: lst (list of str): The list of strings to be sorted. Returns: list of str: The sorted list of strings. if len(lst) <= 1: return lst # Find the middle point to divide the array into two halves mid = len(lst) // 2 # Call merge_sort recursively on both halves left_half = merge_sort(lst[:mid]) right_half = merge_sort(lst[mid:]) # Merge the two halves return merge(left_half, right_half) def merge(left, right): Merges two sorted lists into one sorted list. Parameters: left (list of str): The left half of the list. right (list of str): The right half of the list. Returns: list of str: The merged and sorted list. merged = [] left_index, right_index = 0, 0 # Compare each element and merge into new list while left_index < len(left) and right_index < len(right): if left[left_index] <= right[right_index]: merged.append(left[left_index]) left_index += 1 else: merged.append(right[right_index]) right_index += 1 # If there are remaining elements in either list, add them to merged list merged.extend(left[left_index:]) merged.extend(right[right_index:]) return merged"},{"question":"Create a function that takes a string as input and returns the string in reverse order. But if the string is already reversed, the function should return the original string. You should use recursion to solve this problem.","solution":"def reverse_string(s): Returns the reverse of the input string s unless the string is already reversed, in which case it returns the original string. def is_palindrome(s): return s == s[::-1] def reverse_recursive(s): if s == \\"\\": return s return s[-1] + reverse_recursive(s[:-1]) reversed_s = reverse_recursive(s) if is_palindrome(s): return s return reversed_s"},{"question":"Create a function that can flatten a nested dictionary where the values are integers. The function should return a flattened dictionary with unique keys and the corresponding summed values.","solution":"def flatten_and_sum_dict(d, parent_key='', sep='.'): Flattens a nested dictionary where the values are integers, returning a flattened dictionary with unique keys and summed values. Parameters: d (dict): The dictionary to flatten. parent_key (str): The base key to use for flattening. sep (str): The separator to use between keys. Returns: dict: A flattened dictionary with summed values. items = {} for k, v in d.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): items.update(flatten_and_sum_dict(v, new_key, sep=sep)) else: items[new_key] = items.get(new_key, 0) + v return items"},{"question":"Create a function that calculates the factorial of a given number. The function should be efficient, handle large numbers, and be capable of returning the result as a string due to the potential size of the output for large factorials.","solution":"def factorial(n): Calculates the factorial of a given number n. Returns the result as a string. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0 or n == 1: return \\"1\\" result = 1 for i in range(2, n + 1): result *= i return str(result)"},{"question":"Create a function that filters a list of integers and returns a new list containing only the numbers that are divisible by either 3 or 5. Ensure that the function handles both positive and negative integers gracefully. How would you write this function in C#?","solution":"def filter_divisible_by_3_or_5(numbers): Returns a list of numbers that are divisible by either 3 or 5. :param numbers: List of integers :return: List of integers divisible by either 3 or 5 return [num for num in numbers if num % 3 == 0 or num % 5 == 0]"},{"question":"Create a function that generates a hash value for a given input string. The hash value should be a 32-bit integer. You are allowed to use any library or built-in functions to assist in generating the hash.","solution":"import hashlib def generate_hash(input_string): Generates a 32-bit hash value for the given input string. # Use MD5 hash function (outputs 128-bit), then take the first 32 bits hash_object = hashlib.md5(input_string.encode()) full_hash = hash_object.hexdigest() return int(full_hash[:8], 16)"},{"question":"Create a function that takes two integers as parameters and returns the greatest common divisor (GCD) of the two numbers. The function should be efficient and use the Euclidean algorithm to find the GCD. The Euclidean algorithm is based on the principle that the GCD of two numbers also divides their difference.","solution":"def gcd(a, b): Returns the greatest common divisor (GCD) of a and b using the Euclidean algorithm. while b != 0: a, b = b, a % b return abs(a)"},{"question":"Create a function that takes in two lists of integers \`A\` and \`B\`, and returns a list containing the sum of pairs from the lists. For example, if \`A = [1, 2, 3]\` and \`B = [4, 5, 6]\`, the function should return \`[5, 7, 9]\`. If the lists are of unequal lengths, the function should handle the situation gracefully, starting from the longest list and ignoring the remaining elements in the shorter list.","solution":"def sum_pairs(A, B): Returns a list containing the sum of pairs from the input lists A and B. If the lists are of unequal lengths, the remaining elements of the longer list will be ignored. min_length = min(len(A), len(B)) return [A[i] + B[i] for i in range(min_length)]"},{"question":"Create a function that takes a single argument, an integer, and returns the sum of all positive divisors of the integer. For example, if the input is 6, the function should return 12 because the divisors of 6 are 1, 2, 3, and 6, and their sum is 12. If the input is 12, the function should return 28 because the divisors of 12 are 1, 2, 3, 4, 6, and 12, and their sum is 28.","solution":"def sum_of_divisors(n): Returns the sum of all positive divisors of the integer n. if n <= 0: return 0 divisors_sum = 0 for i in range(1, n + 1): if n % i == 0: divisors_sum += i return divisors_sum"},{"question":"Create a function that generates a visual representation of the sum of two complex numbers. The function should accept two complex numbers as input, calculate their sum, and display the result graphically using matplotlib, with one complex number plotted in red and the other in blue. The plot should include labels for both complex numbers, the axis labels \\"Re (Real Part)\\" and \\"Im (Imaginary Part)\\", and a title \\"Sum of Two Complex Numbers\\". The sum of the two complex numbers should be plotted as a gray dashed line.","solution":"import matplotlib.pyplot as plt def visualize_complex_sum(c1, c2): Generates a visual representation of the sum of two complex numbers. Parameters: c1 (complex): The first complex number. c2 (complex): The second complex number. Returns: None # Calculate the sum of the two complex numbers sum_c = c1 + c2 # Create a new plot plt.figure() # Plot c1 in red plt.scatter([c1.real], [c1.imag], color='red', label=f'Red: c1={c1}') # Plot c2 in blue plt.scatter([c2.real], [c2.imag], color='blue', label=f'Blue: c2={c2}') # Plot the sum as a gray dashed line plt.plot([0, sum_c.real], [0, sum_c.imag], 'k--', color='gray', label=f'Sum: {sum_c}') # Add axis labels plt.xlabel('Re (Real Part)') plt.ylabel('Im (Imaginary Part)') # Add a title plt.title('Sum of Two Complex Numbers') # Add a legend plt.legend() # Show the plot plt.grid() plt.axhline(0, color='black',linewidth=0.5) plt.axvline(0, color='black',linewidth=0.5) plt.show()"},{"question":"Create a function that takes in a string and returns a new string where the first and last characters of the original string are swapped. If the string has only one character, return the string as is. If the string is empty, return an empty string.","solution":"def swap_first_last(s): Returns a new string where the first and last characters are swapped. If the string has one character, return it as is, and if it's empty, return an empty string. if len(s) == 0: return s elif len(s) == 1: return s else: return s[-1] + s[1:-1] + s[0]"},{"question":"Create a function that separates even and odd numbers from a given list and returns them in two separate lists. The function should handle an empty list gracefully and should return two empty lists if the input list is empty. The function should also handle type checking, ensuring that all elements are indeed numbers (either int or float). If an element is not a number, it should be skipped.","solution":"def separate_even_odd(numbers): Separates even and odd numbers from a given list and returns them in two separate lists. Parameters: numbers (list): A list of numbers (int or float). Returns: tuple: A tuple containing two lists - the first list has even numbers, and the second list has odd numbers. even_numbers = [] odd_numbers = [] for number in numbers: if isinstance(number, (int, float)): if number % 2 == 0: even_numbers.append(number) else: odd_numbers.append(number) return even_numbers, odd_numbers"},{"question":"Create a function that accepts a variable number of arguments, each of which is a string. The function should return a dictionary where the keys are the unique strings from the arguments and the values are the counts of how many times each string appears.","solution":"def count_strings(*args): Returns a dictionary where the keys are unique strings from the arguments and the values are the counts of how many times each string appears. string_count = {} for arg in args: if arg in string_count: string_count[arg] += 1 else: string_count[arg] = 1 return string_count"},{"question":"Create a function that sums up all the even numbers in a given list and returns the sum, but exclude any numbers that are multiples of 3.","solution":"def sum_even_not_multiple_of_three(numbers): Sums up all the even numbers in a given list that are not multiples of 3. Parameters: numbers (list): List of integers. Returns: int: Sum of even numbers that are not multiples of 3. return sum(num for num in numbers if num % 2 == 0 and num % 3 != 0)"},{"question":"Create a function that takes in a list of integers and returns the two most frequent elements in the list. If there are more than two elements with the same frequency, return all of them.","solution":"from collections import Counter def two_most_frequent(lst): Returns a list of the two most frequent elements in the input list. If there are more than two elements with the same frequency, return all of them. if not lst: return [] frequency = Counter(lst) most_common = frequency.most_common() if len(most_common) <= 2: return [elem for elem, count in most_common] first, second, *rest = most_common max_count1 = first[1] max_count2 = second[1] result = [first[0], second[0]] for elem, count in rest: if count == max_count2: result.append(elem) else: break return result"},{"question":"Create a function that takes an integer allocated to variable \`i\`, and checks if \`i\` is divisible by 2, 3, and 5 without any remainder.","solution":"def is_divisible_by_2_3_5(i): Check if the integer i is divisible by 2, 3, and 5 without remainder. Parameters: i (int): The integer to check. Returns: bool: True if i is divisible by 2, 3, and 5, False otherwise. return i % 2 == 0 and i % 3 == 0 and i % 5 == 0"},{"question":"Create a function that reverse the order of words in a given string and also reverse each word. For example, the string \\"hello world\\" should be transformed into \\"olleh dlrow\\".","solution":"def reverse_words_and_order(s): Reverses the order of words in a given string and also reverse each word. :param s: str, input string :return: str, transformed string # Split the string into words words = s.split() # Reverse each word and the order of words reversed_words = [word[::-1] for word in words] reversed_order_and_words = ' '.join(reversed_words) return reversed_order_and_words"},{"question":"Create a function that takes two strings as input and determines if they are both palindromes and prints \\"Both are palindromes\\" if they are, otherwise it prints \\"At least one is not a palindrome\\".","solution":"def are_both_palindromes(str1, str2): Determines if both input strings are palindromes. def is_palindrome(s): return s == s[::-1] if is_palindrome(str1) and is_palindrome(str2): print(\\"Both are palindromes\\") else: print(\\"At least one is not a palindrome\\")"},{"question":"Create a function that takes two integers as input and returns their sum. However, this function should handle negatives and positives, including zeros.","solution":"def sum_integers(a, b): Returns the sum of two integers a and b. This function handles positive, negative, and zero values. return a + b"},{"question":"Create a function that checks if any permutation of a given string can form a palindrome.","solution":"def can_form_palindrome(s): Checks if any permutation of the given string can form a palindrome. A string can be permuted to form a palindrome if at most one character has an odd count. from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1"},{"question":"Create a function that removes duplicates from an array.","solution":"def remove_duplicates(arr): Removes duplicates from an array. Parameters: arr (list): A list of elements including possible duplicates. Returns: list: A list with duplicates removed. return list(set(arr))"},{"question":"Create a function that takes a string and returns the string with all the words reversed but the order of the words remains the same.","solution":"def reverse_words_in_string(s): Returns the string with all the words reversed but the order of the words remains the same. words = s.split() reversed_words = [word[::-1] for word in words] return ' '.join(reversed_words)"},{"question":"Create a function that takes a string as input and returns the longest subsequence that contains no repeating characters. This is known as the \\"Longest Substring Without Repeating Characters\\" problem.","solution":"def longest_substring_no_repeating_chars(s): Returns the longest substring without repeating characters. char_index_map = {} longest_substr = \\"\\" start = 0 for end, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = end if len(longest_substr) < (end - start + 1): longest_substr = s[start:end + 1] return longest_substr"},{"question":"Create a function that prompts the user to enter a username and password, and checks if the entered username and password match predefined values. If they do, the function should return \\"Login successful\\". If they don, the function should return \\"Login failed\\". The function should allow the user to enter the username and password up to three times before displaying a final message indicating the number of attempts left. If the user enters the correct credentials, the function should terminate after successful login.","solution":"def login_system(predefined_username, predefined_password): Prompts the user to enter a username and password and checks if they match the predefined values. The user gets up to three attempts. :param predefined_username: str, the correct username :param predefined_password: str, the correct password :return: str, \\"Login successful\\" or \\"Login failed\\" attempts = 3 while attempts > 0: username = input(\\"Enter username: \\") password = input(\\"Enter password: \\") if username == predefined_username and password == predefined_password: return \\"Login successful\\" else: attempts -= 1 if attempts == 0: return \\"Login failed\\" print(f\\"Login failed. You have {attempts} attempts left.\\")"},{"question":"Create a function that returns the nth Fibonacci number in Python. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. The sequence starts with 0, 1, 1, 2, 3, 5, 8, 13, and so on. Ensure your function is efficient, especially for large n.","solution":"def fibonacci(n): Returns the nth Fibonacci number. The sequence starts with fibonacci(0) = 0, fibonacci(1) = 1. if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Create a function that takes in a list of integers, \`nums\`, and returns the sum of all prime numbers in the list. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. For example, 2, 3, 5, 7, 11, and 13 are all prime numbers. If there are no prime numbers in the list, the function should return 0.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n == 2: return True # 2 is the only even prime number if n % 2 == 0: return False for i in range(3, int(n ** 0.5) + 1, 2): if n % i == 0: return False return True def sum_of_primes(nums): Returns the sum of all prime numbers in the list. If there are no prime numbers, returns 0. return sum(num for num in nums if is_prime(num))"},{"question":"Create a function that takes a single parameter, an integer, and returns True if the integer is a power of two and False otherwise. A number is considered a power of two if there exists an integer \`n\` such that \`2^n\` equals the number. For example, 1, 2, 4, 8, 16, etc., are all powers of two.","solution":"def is_power_of_two(n): Returns True if n is a power of two, otherwise False. if n <= 0: return False return (n & (n - 1)) == 0"},{"question":"Create a function that returns the maximum number in a list. The function should iterate through the list only once, using a loop, and updates a variable to keep track of the maximum number found so far.","solution":"def find_maximum(numbers): Returns the maximum number in a list. if not numbers: raise ValueError(\\"List is empty\\") max_number = numbers[0] for number in numbers[1:]: if number > max_number: max_number = number return max_number"},{"question":"Create a function that generates all prime numbers up to a given limit. How would you implement this efficiently in Python?","solution":"def generate_primes(limit): Generates all prime numbers up to a given limit. if limit < 2: return [] sieve = [True] * (limit + 1) sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers for start in range(2, int(limit ** 0.5) + 1): if sieve[start]: for multiple in range(start*start, limit + 1, start): sieve[multiple] = False return [num for num, is_prime in enumerate(sieve) if is_prime]"},{"question":"Create a function that simulates the behavior of the \`ant\` function from the provided snippet. The function should take three arguments: \`x\`, \`y\`, and \`z\`. It should return the sum of these three values. However, the function should also log each step of the calculation to the console for debugging purposes.","solution":"def ant(x, y, z): Returns the sum of x, y, and z. Logs each step of the calculation. Parameters: x (int or float): The first number to add. y (int or float): The second number to add. z (int or float): The third number to add. Returns: int or float: The sum of x, y, and z. step1 = x + y print(f\\"Step 1: {x} + {y} = {step1}\\") result = step1 + z print(f\\"Step 2: {step1} + {z} = {result}\\") return result"},{"question":"Create a function that returns the sum of numbers less than a given number that are divisible by 3 or 5.","solution":"def sum_multiples_of_3_or_5(less_than): Returns the sum of numbers less than a given number that are divisible by 3 or 5. return sum(x for x in range(less_than) if x % 3 == 0 or x % 5 == 0)"},{"question":"Create a function that will return the nth Fibonacci number in Python. Think about performance improvements, as this function might be called frequently.","solution":"def fibonacci(n): Returns the nth Fibonacci number. Uses an iterative approach for performance improvement. if n <= 0: raise ValueError(\\"n must be a positive integer\\") elif n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 for _ in range(2, n): a, b = b, a + b return b"},{"question":"Create a function that takes two arrays of integers as inputs. The function should return the sum of the minimum elements from each pair of corresponding arrays.","solution":"def sum_of_minimum_elements(arr1, arr2): Returns the sum of the minimum elements from each pair of corresponding arrays. The function assumes both arrays have the same length. if len(arr1) != len(arr2): raise ValueError(\\"Both arrays must have the same length\\") return sum(min(a1, a2) for a1, a2 in zip(arr1, arr2))"},{"question":"Create a function that takes two integers as input and returns the greater of the two.","solution":"def greater(a, b): Returns the greater of the two integers a and b. return a if a > b else b"},{"question":"Create a function that takes two lists of integers, \`list1\` and \`list2\`, and returns a new list containing the sum of the integers at corresponding positions in both lists. If the lists are of unequal length, append zeros to the shorter list to ensure all positions have a corresponding integer to add.","solution":"def sum_lists(list1, list2): Takes two lists of integers and returns a new list containing the sum of the integers at corresponding positions in both lists. If the lists are of unequal length, appends zeros to the shorter list to ensure all positions have corresponding integers to add. max_length = max(len(list1), len(list2)) list1.extend([0] * (max_length - len(list1))) list2.extend([0] * (max_length - len(list2))) return [list1[i] + list2[i] for i in range(max_length)]"},{"question":"Create a function that takes a single parameter, an integer \`n\`, and returns the sum of all the even numbers from 0 to \`n\` inclusive. For example, if \`n\` is 10, the function should return 30 because 0 + 2 + 4 + 6 + 8 + 10 = 30.","solution":"def sum_even_numbers(n): Returns the sum of all even numbers from 0 to n inclusive. return sum(i for i in range(n + 1) if i % 2 == 0)"},{"question":"Create a function that takes two parameters, an array of integers and a target integer, and returns the number of integers within the array that are less than the target. For example, if the target integer is 5 and the array is [1, 2, 3, 4, 5, 6, 7], the function should return 4 because there are four numbers less than 5.","solution":"def count_less_than(arr, target): Returns the number of integers in the array that are less than the target. return len([x for x in arr if x < target])"},{"question":"Create a function that takes a list of integers and returns the length of the longest continuous subarray that can be formed where the sum of the elements in the subarray is equal to its length.","solution":"def longest_subarray_with_sum_equal_to_length(nums): Returns the length of the longest continuous subarray where the sum of the elements is equal to its length. max_length = 0 for start in range(len(nums)): current_sum = 0 for end in range(start, len(nums)): current_sum += nums[end] if current_sum == (end - start + 1): max_length = max(max_length, (end - start + 1)) return max_length"},{"question":"Create a function that takes a string as an input and returns the number of words in the string. Assume a word is defined as any sequence of characters separated by spaces. For example, calling the function with the argument \\"Hello World\\" should return 2, as there are two words in the string.","solution":"def count_words(s): Returns the number of words in the string s. A word is defined as any sequence of characters separated by spaces. words = s.split() return len(words)"},{"question":"Create a function that accepts two numbers as inputs and returns the difference between them.","solution":"def difference(a, b): Returns the difference between a and b. return a - b"},{"question":"Create a function that performs matrix multiplication for two given 2D lists (matrices). The function should handle matrices of any size as long as they are compatible for multiplication (i.e., the number of columns in the first matrix is equal to the number of rows in the second matrix). Assume the input matrices do not contain any invalid data (i.e., all elements are integers and the matrices are properly defined).","solution":"def matrix_multiply(A, B): Multiplies two matrices A and B and returns the resulting matrix. A must have the same number of columns as the number of rows in B. # Number of rows in A rows_A = len(A) # Number of columns in A / number of rows in B cols_A = len(A[0]) # Number of columns in B cols_B = len(B[0]) # Initialize the result matrix with zeros result = [[0 for _ in range(cols_B)] for _ in range(rows_A)] # Perform matrix multiplication for i in range(rows_A): for j in range(cols_B): for k in range(cols_A): result[i][j] += A[i][k] * B[k][j] return result"},{"question":"Create a function that takes an integer as an argument and returns an array of its digits in reverse order. For instance, if the input is 12345, the output should be [5, 4, 3, 2, 1].","solution":"def reverse_digits(n): Returns the digits of the integer n in reverse order as a list. return [int(digit) for digit in str(n)][::-1]"},{"question":"Create a function that checks if a number is a perfect number. A perfect number is a positive integer that is equal to the sum of its proper divisors, excluding itself. For example, 6 is a perfect number because its divisors are 1, 2, and 3, and 1 + 2 + 3 = 6. Your solution should include a check function with provided data points to verify its correctness.","solution":"def is_perfect_number(n): Checks if the number n is a perfect number. A perfect number is a positive integer that is equal to the sum of its proper divisors, excluding itself. :param n: Integer to check :return: True if n is a perfect number, False otherwise if n <= 1: return False divisors_sum = sum(i for i in range(1, n) if n % i == 0) return divisors_sum == n"},{"question":"Create a function that generates all possible subsets of a given set. For example, for the set {1, 2, 3}, the subsets would be { }, {1}, {2}, {3}, {1, 2}, {1, 3}, {2, 3}, {1, 2, 3}.","solution":"from itertools import chain, combinations def generate_subsets(input_set): Generates all possible subsets of the given set. Parameters: input_set (set): The input set to generate subsets for. Returns: list: A list of subsets, each subset is represented as a set. # Convert the input set to a list input_list = list(input_set) # Generate subsets using combinations subsets = list(chain.from_iterable(combinations(input_list, r) for r in range(len(input_list) + 1))) # Convert each tuple to a set subsets = [set(subset) for subset in subsets] return subsets"},{"question":"Create a function that accepts three integers as parameters and returns the largest of the three numbers. If any of the numbers is not an integer, return a string \\"Invalid Input\\".","solution":"def largest_of_three(a, b, c): Returns the largest of the three numbers if all are integers, otherwise returns \\"Invalid Input\\". if not all(isinstance(i, int) for i in [a, b, c]): return \\"Invalid Input\\" return max(a, b, c)"},{"question":"Create a function that takes in an array of integers and returns a string representation of the array in reverse order.","solution":"def reverse_array(arr): Returns a string representation of the array in reverse order. Parameters: arr (list): List of integers. Returns: str: String representation of the reversed array. return str(arr[::-1])"},{"question":"Create a function that takes an integer and returns the number of 1 bits in the binary representation of the integer. Use as much self-documentation as you can. Your function should also handle negative numbers by treating their binary representation as that from a 32-bit integer.","solution":"def count_one_bits(n): Returns the number of 1 bits in the binary representation of a given integer. Treat negative numbers using their binary representation as that from a 32-bit integer. Args: n : int : the integer whose 1 bits are to be counted. Returns: int : the number of 1 bits in the binary representation of the given integer. # Handle negative numbers with 32-bit binary representation if n < 0: n = n & 0xFFFFFFFF binary_representation = bin(n) return binary_representation.count('1')"},{"question":"Create a function that takes an array of integers, array of booleans, and a boolean as input. The function should return an array of integers. The returned array should include only the integers from the input array that correspond to \`True\` values in the boolean array if the boolean argument is \`True\`, or to \`False\` values in the boolean array if the boolean argument is \`False\`.","solution":"def filter_by_bool(int_array, bool_array, filter_bool): Filters an array of integers based on a corresponding array of booleans and a boolean value indicating which booleans to filter for. Args: int_array (list of int): The array of integers to filter. bool_array (list of bool): The array of booleans indicating which elements to filter. filter_bool (bool): The boolean value indicating which booleans to filter for. Returns: list of int: The filtered array of integers. if len(int_array) != len(bool_array): raise ValueError(\\"Both input arrays must have the same length\\") return [int_array[i] for i in range(len(int_array)) if bool_array[i] == filter_bool]"},{"question":"Create a function that will check if a number is even or odd and return a string indicating the result.","solution":"def even_or_odd(n): Returns 'Even' if n is even, otherwise returns 'Odd'. if n % 2 == 0: return \\"Even\\" else: return \\"Odd\\""},{"question":"Create a function that takes an array and returns a string that represents the array as a formatted list. Each item in the array should be enclosed in parentheses and separated by a comma and a space.","solution":"def format_array_to_string(arr): Takes an array and returns a string with each item enclosed in parentheses and separated by a comma and a space. Args: arr (list): A list of items Returns: str: A formatted string with each item enclosed in parentheses return ', '.join(f'({item})' for item in arr)"},{"question":"Create a function that identifies whether a given string is a palindrome. A palindrome is a string that reads the same backward as forward. For example, 'radar' and 'madam' are palindromes. Ensure your function is efficient and handles edge cases, such as with empty strings or strings with single characters.","solution":"def is_palindrome(s): Returns True if the string s is a palindrome, False otherwise. s = s.lower() # Consider case insensitivity return s == s[::-1]"},{"question":"Create a function that will take two positive integers as parameters and return the number of HCF (Highest Common Factor) combinations between the two numbers. If the HCF is a prime number, return the prime factorization of that HCF as a list of its prime factors. If the HCF is not a prime number, return the HCF in its simplest form as a list of its factors.","solution":"from math import gcd def prime_factors(n): Returns the prime factors of a number n as a list. factors = [] # Check for smallest factors first i = 2 while i * i <= n: while (n % i) == 0: factors.append(i) n //= i i += 1 if n > 1: factors.append(n) return factors def hcf_factors(a, b): Returns the HCF and its decomposition based on whether the HCF is a prime number or not. hcf = gcd(a, b) factors = prime_factors(hcf) if len(factors) == 1: # HCF is prime return (hcf, factors) else: # HCF is composite: list its factors return (hcf, [i for i in range(1, hcf + 1) if hcf % i == 0])"},{"question":"Create a function that multiplies all elements in a list by 2 and returns the new list. If the list is empty, return an empty list. Can you also handle cases where the list contains non-numeric values?","solution":"def multiply_by_two(lst): Multiplies all elements in a list by 2 and returns the new list. If the list is empty, returns an empty list. If the list contains non-numeric values, those values are ignored. Parameters: lst (list): List of elements to be multiplied. Returns: list: New list with numeric elements multiplied by 2. if not lst: return [] return [x * 2 for x in lst if isinstance(x, (int, float))]"},{"question":"Create a function that checks if a word exists in a list, and if it does, return its index. If it doesn't exist, return -1. The function should be as efficient as possible.","solution":"def find_word(word_list, word): Checks if a word exists in a list and returns its index if it does. Returns -1 if it doesn't exist. Args: word_list (list): List of words to check. word (str): The word to find in the list. Returns: int: The index of the word if it exists in the list, -1 otherwise. try: return word_list.index(word) except ValueError: return -1"},{"question":"Create a function that parses a given URL and returns its protocol. For example, if the URL is \\"http://example.com\\", the function should return \\"http\\".","solution":"def get_protocol(url): Parses the given URL and returns its protocol. :param url: str - The URL to parse. :return: str - The protocol of the URL. return url.split(\\"://\\")[0]"},{"question":"Create a function that takes a string as an argument and returns the most frequently occurring letter in that string. For instance, if the input string is \\"hello world\\", the function should return \\"l\\".","solution":"from collections import Counter def most_frequent_letter(s): Returns the most frequently occurring letter in the string s. In case of a tie, return the letter that comes first lexicographically. s = s.replace(\\" \\", \\"\\").lower() if not s: return None letter_counts = Counter(s) most_frequent = max(letter_counts.items(), key=lambda x: (x[1], -ord(x[0]))) return most_frequent[0]"},{"question":"Create a function that generates all prime numbers up to a given number n. The function should be efficient and use a sieve algorithm to achieve this. Implement the function in Python.","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers up to and including n using the Sieve of Eratosthenes algorithm. if n < 2: return [] sieve = [True] * (n + 1) sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n + 1, start): sieve[multiple] = False return [num for num in range(2, n + 1) if sieve[num]]"},{"question":"Create a function that will add two integers and return the result.","solution":"def add_two_integers(a, b): Returns the sum of two integers a and b. return a + b"},{"question":"Create a function that takes a list of integers \`arr\` and an integer \`n\` as parameters. The function should insert the integer \`n\` at the beginning of the list \`arr\` and return the updated list. Additionally, the function should handle cases where \`n\` is a prime number special case: if \`n\` is a prime number, insert it at the end of the list instead of the beginning.","solution":"def is_prime(num): Helper function to determine if a number is prime. Returns True if num is prime, False otherwise. if num <= 1: return False for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True def insert_special(arr, n): Inserts the integer n at the beginning of the list arr. If n is a prime number, inserts n at the end of the list instead. Returns the updated list. if is_prime(n): arr.append(n) else: arr.insert(0, n) return arr"},{"question":"Create a function that takes two lists as input and returns the list that has the maximum sum of elements. If both lists have the same sum, return the first list.","solution":"def list_with_max_sum(list1, list2): Returns the list with the maximum sum of elements. If both lists have the same sum, returns the first list. sum1 = sum(list1) sum2 = sum(list2) if sum1 >= sum2: return list1 else: return list2"},{"question":"Create a function that accepts two dictionaries as input and returns their union. The union of two dictionaries is a dictionary that contains all the keys and values from both dictionaries. If a key is present in both dictionaries, the value from the second dictionary should be taken.","solution":"def union_dicts(dict1, dict2): Returns the union of two dictionaries. If a key is present in both, the value from the second dictionary will be used. Parameters: - dict1: First dictionary - dict2: Second dictionary Returns: - A dictionary containing the union of dict1 and dict2 merged_dict = dict1.copy() merged_dict.update(dict2) return merged_dict"},{"question":"Create a function that rearranges an array such that it is divided into two arrays, where each element is greater than the corresponding element in the other array. Specifically, the first array should contain every element at even indices from the original array, and the second array should contain every element at odd indices from the original array. The function should return these two arrays as a tuple.","solution":"def rearrange_array(arr): Rearranges the input array into two arrays. The first array contains elements at even indices, and the second array contains elements at odd indices of the original array. Parameters: arr (list): The input array to be rearranged. Returns: tuple: A tuple containing two lists. even_index_array = arr[0::2] odd_index_array = arr[1::2] return (even_index_array, odd_index_array)"},{"question":"Create a function that takes a 2D array (list of lists) and returns the sum of all the elements in the array, ignoring any negative numbers.","solution":"def sum_non_negative_elements(matrix): Returns the sum of all non-negative elements in a 2D array (list of lists). total_sum = 0 for row in matrix: for element in row: if element >= 0: total_sum += element return total_sum"},{"question":"Create a function that takes in a list of integers and returns a new list containing only elements that appear twice in the input list. The order of the elements in the output list should be the same as their first occurrence in the input list.","solution":"def find_elements_appearing_twice(nums): Returns a list of elements that appear exactly twice in the input list. from collections import Counter num_counter = Counter(nums) result = [num for num in nums if num_counter[num] == 2] return list(dict.fromkeys(result))"},{"question":"Create a function that takes three numbers as input. The function should return the largest among them.","solution":"def find_largest(a, b, c): Returns the largest number among a, b, and c. return max(a, b, c)"},{"question":"Create a function that finds the maximum sum of a subarray of a given array of integers. For example, the input array is \`[1, -3, 2, 1, -1]\`, and the function should return \`3\`, as the subarray \`[2, 1]\` has the maximum sum.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a subarray within the given array of integers. if not arr: return 0 max_sum = float('-inf') current_sum = 0 for num in arr: current_sum += num if current_sum > max_sum: max_sum = current_sum if current_sum < 0: current_sum = 0 return max_sum"},{"question":"Create a function that takes a list of numbers and returns the maximum and minimum numbers from the list.","solution":"def find_max_min(numbers): Returns a tuple containing the maximum and minimum numbers from the list. if not numbers: raise ValueError(\\"The list should not be empty.\\") max_num = max(numbers) min_num = min(numbers) return (max_num, min_num)"},{"question":"Create a function that generates a Fibonacci sequence up to the nth number using an iterative approach. The Fibonacci sequence is a series of numbers in which each number is the sum of the two preceding ones, usually starting with 0 and 1.","solution":"def fibonacci(n): Generates a Fibonacci sequence up to the nth number using an iterative approach. Parameters: n (int): The length of the Fibonacci sequence to generate. Returns: list: A list containing the Fibonacci sequence up to the nth number. if n <= 0: return [] # Return an empty list for non-positive n sequence = [0, 1] for _ in range(2, n): sequence.append(sequence[-1] + sequence[-2]) return sequence[:n]"},{"question":"Create a function that takes a list of integers as input and returns the product of all unique elements in the list. For example, given the input list [1, 2, 2, 3, 4], the function should return 24 because the unique elements are 1, 3, and 4.","solution":"def product_of_unique_elements(lst): Returns the product of all unique elements in the list. :param lst: List of integers :return: Product of unique elements from collections import Counter counter = Counter(lst) unique_elements = [item for item, count in counter.items() if count == 1] product = 1 for elem in unique_elements: product *= elem return product"},{"question":"Create a function that takes two arrays and outputs the elements that are common in both arrays. The function should be efficient and work well with large arrays.","solution":"def common_elements(array1, array2): Returns a list of elements that are common in both array1 and array2. # Convert both arrays to sets for efficient lookup and intersection set1 = set(array1) set2 = set(array2) # Use set intersection to find common elements common_set = set1.intersection(set2) # Convert the set back to a list common_list = list(common_set) return common_list"},{"question":"Create a function that takes three arguments: an integer \`number\`, a starting value \`start\`, and an ending value \`end\`. The function should return a new list where each element is calculated by the formula \`element = start * number + end\` for \`number\` in the range from 0 to the length of the list minus one. Verify the correctness of your function using specific test cases.","solution":"def transform_list(length, start, end): Returns a list where each element is calculated by the formula: element = start * number + end for number in the range from 0 to length-1. Arguments: length -- the length of the list start -- the starting value to be multiplied end -- the ending value to be added Returns: A list of transformed elements. return [start * number + end for number in range(length)]"},{"question":"Create a function that can print out all elements from a given list in reverse order. The function should also handle the case where the list is empty or contains only one element.","solution":"def reverse_print(lst): Prints all elements from the given list in reverse order. Handles the case where the list is empty or contains only one element. for elem in reversed(lst): print(elem)"},{"question":"Create a function that takes a string representing the path of a file and returns the file extension. The function should handle both absolute and relative file paths and should return the file extension after the last period in the file name, ignore any periods in the directory names.","solution":"import os def get_file_extension(file_path): Returns the file extension for a given file path. Parameters: file_path (str): The file path as a string. Returns: str: The file extension or an empty string if there is no extension. # Split the path into base name and extension _, file_extension = os.path.splitext(file_path) # Remove the leading dot from the extension return file_extension[1:] if file_extension else ''"},{"question":"Create a function that returns the maximum value between two numbers.","solution":"def max_value(a, b): Returns the maximum value between a and b. return a if a > b else b"},{"question":"Create a function that takes in a list of strings, and returns the longest string in the list that is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward. If there are multiple longest palindromes, return any one of them. If the list is empty or contains no palindromes, return an empty string.","solution":"def longest_palindromic_string(string_list): Returns the longest palindrome in the list. If no palindrome is found or list is empty, returns an empty string. def is_palindrome(s): return s == s[::-1] longest_palindrome = \\"\\" for s in string_list: if is_palindrome(s) and len(s) > len(longest_palindrome): longest_palindrome = s return longest_palindrome"},{"question":"Create a function that can return the name of the browser if it's Chrome or Firefox. If it is not Chrome or Firefox, return \\"Unknown\\"","solution":"def browser_name(browser): Returns the name of the browser if it's Chrome or Firefox. If it is not Chrome or Firefox, return 'Unknown'. if browser in [\\"Chrome\\", \\"Firefox\\"]: return browser return \\"Unknown\\""},{"question":"Create a function that takes an array of integers as an argument and returns the array sorted in either ascending or descending order based on the first element of the array. If the first element is even, the array should be sorted in ascending order; if the first element is odd, the array should be sorted in descending order.","solution":"def custom_sort(arr): Returns the array sorted in either ascending or descending order based on the first element of the array. If the first element is even, the array is sorted in ascending order. If the first element is odd, the array is sorted in descending order. if not arr: return arr # Return the empty array if input array is empty if arr[0] % 2 == 0: return sorted(arr) else: return sorted(arr, reverse=True)"},{"question":"Create a function that generates a list of prime numbers up to a given maximum value. The function should take an integer \`n\` as its argument, where \`n\` represents the maximum number to search for prime numbers. The function should return a list of all prime numbers less than \`n\`.","solution":"def generate_primes(n): Returns a list of all prime numbers less than n. if n <= 2: return [] primes = [] is_prime = [True] * n for number in range(2, n): if is_prime[number]: primes.append(number) for multiple in range(number * number, n, number): is_prime[multiple] = False return primes"},{"question":"Create a function that returns the last element of an array using a stack data structure in Python. The array can contain both integers and strings.","solution":"def get_last_element_from_stack(arr): Returns the last element of an array using a stack data structure. stack = [] for element in arr: stack.append(element) if stack: return stack[-1] else: return None"},{"question":"Create a function that takes a string as input and determines if it's a valid palindrome. A palindrome reads the same backward as forward. For instance, \\"radar\\" is a palindrome.","solution":"def is_palindrome(s): Checks if the input string s is a palindrome. # Normalize the string by removing non-alphanumeric characters and converting to lower case cleaned = ''.join(c.lower() for c in s if c.isalnum()) # Check if the cleaned string reads the same backward as forward return cleaned == cleaned[::-1]"},{"question":"Create a function that takes a string and an integer as parameters and returns the string repeated the specified number of times. If the integer is less than or equal to 0, the function should return an empty string. Ensure the function handles the case where the input string might be empty as well.","solution":"def repeat_string(s, n): Repeats the string \`s\` \`n\` times. If \`n\` is less than or equal to 0, returns an empty string. if n <= 0: return \\"\\" return s * n"},{"question":"Create a function that checks if a given string is a valid integer. The function should return \`True\` if the string can be converted to an integer, and \`False\` otherwise. Consider that leading and trailing spaces are acceptable. However, the string should not contain any characters other than spaces, digits, and a single optional negative sign at the beginning.","solution":"def is_valid_integer(s): Checks if a given string is a valid integer. Parameters: s (str): The string to check. Returns: bool: True if the string can be converted to an integer, False otherwise. # Trim leading and trailing spaces s = s.strip() # Check if empty string after trimming if not s: return False # Check if the string is a valid integer if s[0] == '-': return s[1:].isdigit() return s.isdigit()"},{"question":"Create a function that takes two lists of integers and returns a list of integers that appears in both lists, but without any duplicates in the result.","solution":"def intersection(lst1, lst2): Returns a list containing the integers that appear in both lst1 and lst2 without duplicates. return list(set(lst1) & set(lst2))"},{"question":"Create a function that calculates and returns the sum of all numbers in a list. If the list is empty, the function should return \`0\`. For example, for the list \`[3, 1, 4]\`, the function should return \`8\`.","solution":"def sum_list(numbers): Returns the sum of all numbers in the list. If the list is empty, returns 0. return sum(numbers)"},{"question":"Create a function that takes in a list of integers and returns the sum of the integers at even indices. For example, if the input list is \`[10, 20, 30, 40, 50]\`, the function should return \`90\` because \`10\` (at index 0) and \`30\` (at index 2) are at even indices and their sum is \`40\`.","solution":"def sum_even_index_elements(lst): Returns the sum of the integers at even indices in the input list. Parameters: lst (list of int): The input list of integers. Returns: int: The sum of the integers at even indices. return sum(lst[i] for i in range(len(lst)) if i % 2 == 0)"},{"question":"Create a function that accepts an array of integers and returns the maximum sum of a contiguous subarray within the array. This is known as Kadane's Algorithm. Can you write a Python function to implement this?","solution":"def max_subarray_sum(arr): Implements Kadane's Algorithm to find the maximum sum of a contiguous subarray. Parameters: arr (list of int): The input array of integers Returns: int: The maximum sum of a contiguous subarray if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that takes a list of integers as an argument and returns a new list with all the negative numbers removed. The function should also filter out duplicates and sort the remaining positive numbers in ascending order.","solution":"def filter_and_sort_positives(numbers): Takes a list of integers and returns a new list with all negative numbers removed, duplicates filtered out, and the remaining numbers sorted in ascending order. # Remove negative numbers and filter out duplicates by converting to a set positive_numbers = {num for num in numbers if num >= 0} # Convert the set back to a sorted list sorted_positives = sorted(positive_numbers) return sorted_positives"},{"question":"Create a function that generates Fibonacci numbers up to n using a generator. A Fibonacci sequence is a series of numbers where a number is the addition of the last two numbers, starting with 0 and 1.","solution":"def fibonacci_generator(n): Generates Fibonacci numbers up to n. Parameters: n (int): The upper limit of the Fibonacci sequence (inclusive). Yields: int: The next Fibonacci number in the sequence up to n. a, b = 0, 1 while a <= n: yield a a, b = b, a + b"},{"question":"Create a function that generates a random list of integers between a specified range. The function should take three parameters: the length of the list (n), the lower bound of the range (low), and the upper bound of the range (high). The function should return a list of n random integers, where each integer is between low and high (inclusive).","solution":"import random def generate_random_list(n, low, high): Generates a random list of integers. Parameters: n (int): The length of the list. low (int): The lower bound of the range. high (int): The upper bound of the range. Returns: list: A list of n random integers between low and high (inclusive). return [random.randint(low, high) for _ in range(n)]"},{"question":"Create a function that takes a list of integers and returns a list of tuples containing the original integer and its square.","solution":"def list_of_squares(lst): Takes a list of integers and returns a list of tuples containing the original integer and its square. return [(x, x ** 2) for x in lst]"},{"question":"Create a function that takes as input a string and returns the URL-encoded version of that string.","solution":"import urllib.parse def url_encode(input_string): Returns the URL-encoded version of the input string. return urllib.parse.quote(input_string)"},{"question":"Create a function that accepts a list of numbers and returns the result of the list elements added up. The function only adds up elements that are greater than zero.","solution":"def sum_positive_numbers(numbers): Returns the sum of all positive numbers in the list. Parameters: numbers (list of int/float): List of numbers to be summed. Returns: int/float: Sum of all positive numbers in the list. return sum(filter(lambda x: x > 0, numbers))"},{"question":"Create a function that takes a string \`s\` as input and returns the longest palindromic substring of \`s\`. A palindrome is a string that reads the same backward as forward.","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in the given string s. def expand_around_center(s, left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] if not s: return \\"\\" longest = \\"\\" for i in range(len(s)): # Check for odd length palindromes odd_palindrome = expand_around_center(s, i, i) if len(odd_palindrome) > len(longest): longest = odd_palindrome # Check for even length palindromes even_palindrome = expand_around_center(s, i, i + 1) if len(even_palindrome) > len(longest): longest = even_palindrome return longest"},{"question":"Create a function that takes a string as input and returns a dictionary containing the frequency of each character in the string. The dictionary keys are characters, and the values are their respective frequency counts.","solution":"def character_frequency(s): Takes a string as input and returns a dictionary containing the frequency of each character in the string. frequency_dict = {} for char in s: if char in frequency_dict: frequency_dict[char] += 1 else: frequency_dict[char] = 1 return frequency_dict"},{"question":"Create a function that takes an integer input \`n\` and generates a prime number sequence up to \`n\`. The function should append each prime number to an array. The function should return the array of prime numbers in ascending order.","solution":"def generate_primes(n): Generates a list of prime numbers up to n (inclusive). Args: n (int): The upper limit up to which primes are generated. Returns: List[int]: A list of prime numbers up to n. if n < 2: return [] primes = [] for num in range(2, n + 1): is_prime = True for divisor in range(2, int(num ** 0.5) + 1): if num % divisor == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Create a function that accepts a list of integers and returns a new list where each element in the new list is the sum of the corresponding elements in the input list, but with each element being mirrored over the number 10. In other words, each element in the new list should be (element * 2) - 10. For example, if the input list is [2, 3, 4], the output should be [-6, -4, -2], because ((2 * 2) - 10) = -6, ((3 * 2) - 10) = -4, and ((4 * 2) - 10) = -2.","solution":"def mirror_over_10(input_list): Accepts a list of integers and returns a new list where each element is mirrored over 10. Mirroring over 10 means each element in the new list should be (element * 2) - 10. return [x * 2 - 10 for x in input_list]"},{"question":"Create a function that takes a list, a string, and a number as arguments and returns the list with the string repeated 'n' times appended to the original list.","solution":"def append_repeated_string(lst, string, n): Takes a list, a string, and a number as arguments and returns the list with the string repeated 'n' times appended to the original list. Parameters: lst (list): The original list. string (str): The string to be repeated and appended. n (int): The number of times the string should be repeated. Returns: list: The modified list with the repeated string appended. return lst + [string] * n"},{"question":"Create a function that takes an array \`nums\` of n positive integers and returns \\"true\\" if there exist three elements a, b, and c in \`nums\` such that a * b * c == k and a, b, c are positive integers.","solution":"def check_product_exists(nums, k): Check if there exist three distinct elements a, b, and c in nums such that a * b * c == k. Parameters: - nums: List[int] -- a list of integers - k: int -- the target product Returns: - bool -- True if there exist three elements a, b, and c in nums such that a * b * c == k, otherwise False. if len(nums) < 3: return False n = len(nums) nums.sort() for i in range(n - 2): if nums[i] == 0: continue product = nums[i] left, right = i + 1, n - 1 while left < right: current_product = product * nums[left] * nums[right] if current_product == k: return True elif current_product < k: left += 1 else: right -= 1 return False"},{"question":"Create a function that generates the first N numbers in a Fibonacci sequence.","solution":"def fibonacci_sequence(n): Generates the first N numbers in the Fibonacci sequence. :param n: The number of Fibonacci numbers to generate :type n: int :return: A list containing the first N numbers in the Fibonacci sequence :rtype: list of int if n <= 0: return [] fib_sequence = [0, 1] while len(fib_sequence) < n: fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence[:n]"},{"question":"Create a function that takes two arrays of equal length and returns an array of the same length where each element is the product of corresponding elements from the input arrays.","solution":"def elementwise_product(arr1, arr2): Returns an array where each element is the product of corresponding elements from arr1 and arr2. Parameters: arr1 (list of int/float): First input array. arr2 (list of int/float): Second input array. Returns: list of int/float: Resultant array with element-wise products. if len(arr1) != len(arr2): raise ValueError(\\"Input arrays must have the same length.\\") return [a * b for a, b in zip(arr1, arr2)]"},{"question":"Create a function that takes two parameters, \`int a\` and \`int b\`, and returns the greatest common divisor (GCD) of \`a\` and \`b\`. Use the Euclidean algorithm.","solution":"def gcd(a, b): Returns the greatest common divisor (GCD) of a and b using the Euclidean algorithm. while b != 0: a, b = b, a % b return a"},{"question":"Create a function that accepts an integer array and reverses its elements. The function should be generic and able to handle arrays of any numeric type.","solution":"from typing import List, Union def reverse_array(arr: List[Union[int, float]]) -> List[Union[int, float]]: Reverse the elements of the given array. Parameters: arr (List[Union[int, float]]): The input array consisting of integers or floats. Returns: List[Union[int, float]]: The reversed array. return arr[::-1]"},{"question":"Create a function that takes in a string and returns the number of times the substring \\"hello\\" appears in it. The function should be case-insensitive and should also count overlapping occurrences.","solution":"import re def count_hello_substrings(s): Returns the number of times the substring \\"hello\\" (case-insensitive) appears in the input string s. Overlapping occurrences are counted. pattern = re.compile(r'(?i)(?=hello)') return len(pattern.findall(s))"},{"question":"Create a function that takes two numbers as input and returns true if they are equal, and false if they are not.","solution":"def are_numbers_equal(a, b): Returns True if both numbers are equal, else returns False. return a == b"},{"question":"Create a function that takes two arguments, an array of integers and a target sum. The function should return a list of all possible subsets of the array where the sum of elements in each subset equals the target sum.","solution":"from typing import List def find_subsets(arr: List[int], target: int) -> List[List[int]]: Returns all subsets of the array where the sum of elements equals the target sum. result = [] def backtrack(start, current_subset, current_sum): if current_sum == target: result.append(list(current_subset)) return for i in range(start, len(arr)): if current_sum + arr[i] > target: continue current_subset.append(arr[i]) backtrack(i + 1, current_subset, current_sum + arr[i]) current_subset.pop() backtrack(0, [], 0) return result"},{"question":"Create a function that takes in a natural language instruction describing a task and utterances. Utterances are natural language responses that in turn direct a robot or AI system to perform tasks. The function should generate and return a structured version of the instruction and utterances, breaking them down into task steps and user inputs.","solution":"import re def parse_instructions(instruction, utterances): Parses a natural language instruction and corresponding utterances into a structured format. tasks = [] user_inputs = [] # Split instruction into tasks based on sentence end punctuations task_steps = re.split(r'[.!?]', instruction) task_steps = [task.strip() for task in task_steps if task.strip()] # Assume utterances correspond to user inputs in the same order for utterance in utterances: user_inputs.append(utterance) # Structure the tasks and user inputs into a single dictionary for i, task in enumerate(task_steps): if i < len(user_inputs): tasks.append({ \\"task\\": task, \\"user_input\\": user_inputs[i] }) else: # In case there are more tasks than user inputs, fill remaining tasks with None tasks.append({ \\"task\\": task, \\"user_input\\": None }) return tasks"},{"question":"Create a function that processes a list of strings and return the list sorted alphabetically by the first character of each string. If two strings start with the same character, sort them by their original positions in the list. Here is an example list that needs to be sorted: \`[\\"banana\\", \\"apple\\", \\"cherry\\", \\"apricot\\"]\`.","solution":"def sort_by_first_char(strings): Sorts a list of strings alphabetically by the first character of each string. If two strings start with the same character, their original order is preserved. Parameters: strings (list): A list of strings to sort. Returns: list: A list of strings sorted by the first character. return sorted(strings, key=lambda x: (x[0], strings.index(x)))"},{"question":"Create a function that takes an integer as an argument and returns the string representation of the integer, but if the integer is negative, it should return the string representation of its absolute value.","solution":"def int_to_string(n): Returns the string representation of the integer n. If n is negative, returns the string representation of its absolute value. return str(abs(n))"},{"question":"Create a function that takes two integers as arguments. If the first integer is greater than the second one, return the first one. Otherwise, return the second one. Use Python, but feel free to explain your thought process.","solution":"def compare_and_return(a, b): Compares two integers and returns the greater one. If the first integer (a) is greater than the second one (b), returns a. Otherwise, returns b. return a if a > b else b"},{"question":"Create a function that takes two integers, x and y, and returns the sum of all numbers that are divisible by either x or y within the range from 1 to 10000. How can we achieve this using Python?","solution":"def sum_divisible_by_x_or_y(x, y): Returns the sum of all numbers divisible by either x or y within the range from 1 to 10000. :param x: First divisor :param y: Second divisor :return: Sum of all numbers divisible by either x or y within the range from 1 to 10000 return sum(i for i in range(1, 10001) if i % x == 0 or i % y == 0)"},{"question":"Create a function that converts a string to a palindrome by appending characters to the end of it. The function should return the shortest possible palindrome.","solution":"def make_palindrome(s): Converts a string s to a palindrome by appending characters to the end of it. Returns the shortest possible palindrome. # Helper function to check if a string is palindrome def is_palindrome(string): return string == string[::-1] # Check for smallest suffix that can be added to make string a palindrome for i in range(len(s)): if is_palindrome(s[i:]): return s + s[:i][::-1] return s # This case won't realistically occur with valid input since any single character string is a palindrome # Test the function sample_input = \\"race\\" print(make_palindrome(sample_input)) # Expected Output: \\"racecar\\""},{"question":"Create a function that accepts two parameters: a list of integers and an integer target. The function should return the index of the target in the list if found; otherwise, return -1. This function should not use any built-in methods like \`index()\`, \`find()\`, or \`search()\`. Instead, implement the functionality using a loop to go through the list.","solution":"def find_index(lst, target): Returns the index of the target in the list if found; otherwise, returns -1. for i, value in enumerate(lst): if value == target: return i return -1"},{"question":"Create a function that takes a string s consisting of digits '0' through '9'. The function should slide a window of size w across the string and sum up the digits within each window.","solution":"def sliding_window_sum(s, w): Returns a list of sums of digits within each window of size w as it slides across the string s. Parameters: s (str): A string consisting of digits '0' through '9'. w (int): The size of the sliding window. Returns: list: List of integers representing the sums of digits within each window. if not s or w <= 0 or w > len(s): return [] result = [] for i in range(len(s) - w + 1): window_sum = sum(int(digit) for digit in s[i:i+w]) result.append(window_sum) return result"},{"question":"Create a function that takes two strings, pattern and text, as input. The function should return a list of starting indices where the pattern can be found in the text.","solution":"def find_pattern_indices(pattern, text): Returns a list of starting indices where the pattern is found in the text. indices = [] pattern_length = len(pattern) text_length = len(text) for i in range(text_length - pattern_length + 1): if text[i:i + pattern_length] == pattern: indices.append(i) return indices"},{"question":"Create a function that takes two strings as input and returns the string that is the most frequent in a given list of strings. If both strings are equally frequent, return the first string that appears in the list.","solution":"def most_frequent_string(str1, str2, string_list): Returns the string that is the most frequent in the given list. If both strings are equally frequent, return the first string that appears in the list. count_str1 = string_list.count(str1) count_str2 = string_list.count(str2) if count_str1 > count_str2: return str1 elif count_str2 > count_str1: return str2 # If both count_str1 and count_str2 are equal, return the first one that appears in the list. for s in string_list: if s == str1 or s == str2: return s"},{"question":"Create a function that takes two numbers, \`a\` and \`b\`, and returns their product.","solution":"def multiply(a, b): Returns the product of a and b. return a * b"},{"question":"Create a function that takes a string and returns a new string with all the characters in reverse order. The function should be named \`reverse_string\` and should take a single string argument.","solution":"def reverse_string(s): Returns the string with characters in reverse order. Args: s (str): The input string. Returns: str: The reversed string. return s[::-1]"},{"question":"Create a function that takes a string and returns the length of the longest increasing substring, where an increasing substring is defined as one where each character is greater than the previous character.","solution":"def longest_increasing_substring(s): Returns the length of the longest increasing substring in the given string s. if not s: return 0 max_length = 1 current_length = 1 for i in range(1, len(s)): if s[i] > s[i-1]: current_length += 1 else: if current_length > max_length: max_length = current_length current_length = 1 return max(max_length, current_length)"},{"question":"Create a function that takes an integer as an input and returns True if the number is prime and False otherwise. A number is considered prime if it is greater than 1 and has no divisors other than 1 and itself. For example, 2, 3, 5, 7, 11, 13, 17, 19, 23, and 29 are prime numbers. How would you write such a function?","solution":"def is_prime(n): Determines whether the given integer is a prime number. Parameters: n (int): The number to check for primality. Returns: bool: True if the number is prime, False otherwise. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True"},{"question":"Create a function that takes an integer as an input and determines whether it is a prime number or not. If the integer is a prime number, it should return True; otherwise, it should return False. Additionally, the function should also check if the input integer is even or odd. If the integer is even, return \\"The number is even and not a prime.\\" If the integer is odd and not a prime, return \\"The number is odd and not a prime.\\" If the integer is odd and a prime, return \\"The number is odd and a prime.\\"","solution":"def check_prime_and_even_odd(number): Checks if the given number is prime, and whether it is even or odd. Returns: - \\"The number is even and not a prime.\\" if the number is even and not a prime. - \\"The number is odd and not a prime.\\" if the number is odd and not a prime. - \\"The number is odd and a prime.\\" if the number is odd and a prime. if number <= 1: if number % 2 == 0: return \\"The number is even and not a prime.\\" else: return \\"The number is odd and not a prime.\\" if number % 2 == 0: return \\"The number is even and not a prime.\\" for i in range(3, int(number**0.5) + 1, 2): if number % i == 0: return \\"The number is odd and not a prime.\\" return \\"The number is odd and a prime.\\""},{"question":"Create a function that generates and prints a Fibonacci sequence up to a given number. The function should also print the sum of the even-valued terms.","solution":"def fibonacci_up_to(n): Generates and prints the Fibonacci sequence up to a given number n. Also prints the sum of the even-valued terms in the sequence. sequence = [] a, b = 0, 1 sum_even = 0 while a <= n: sequence.append(a) if a % 2 == 0: sum_even += a a, b = b, a + b print(\\"Fibonacci sequence up to\\", n, \\":\\", sequence) print(\\"Sum of even-valued terms:\\", sum_even) return sequence, sum_even"},{"question":"Create a function that takes a matrix of integers (represented as a list of lists), and return the sum of all the elements in the matrix.","solution":"def sum_matrix(matrix): Returns the sum of all the elements in the matrix. :param matrix: List of lists of integers :return: Integer sum of all the elements in the matrix return sum(sum(row) for row in matrix)"},{"question":"Create a function that takes a string as input and changes all the letters to their opposite case.","solution":"def swap_case(s): Returns a string with all letters converted to their opposite case. return s.swapcase()"},{"question":"Create a function that examines an array of integers and determines whether there is any element in the array that appears more times than the value of the element itself. If such an element exists, the function should return the element's value as a string. If no such element exists, the function should return the string \\"-1\\".","solution":"def find_element_with_more_appearances(arr): Examines an array of integers and determines if there is any element in the array that appears more times than the value of the element itself. If such an element exists, returns the element's value as a string. If no such element exists, returns the string \\"-1\\". Parameters: arr (list[int]): The input array of integers. Returns: str: The element's value as a string if it meets the condition, otherwise \\"-1\\". from collections import Counter counter = Counter(arr) for num, count in counter.items(): if count > num: return str(num) return \\"-1\\""},{"question":"Create a function that generates a list of all possible combinations of a given list of elements. Each combination should be of size 2. The function should also ensure that no combination is repeated and that the order of elements within each combination does not matter.","solution":"from itertools import combinations def generate_combinations(elements): Generates a list of all possible combinations of a given list of elements, where each combination is of size 2. Args: elements (list): a list of elements. Returns: list: a list of tuples, each containing a combination of two elements. return list(combinations(elements, 2))"},{"question":"Create a function that takes a list of integers and returns the sum of all the numbers that are greater than 100.","solution":"def sum_greater_than_100(numbers): Returns the sum of all numbers in the list that are greater than 100. return sum(num for num in numbers if num > 100)"},{"question":"Create a function that takes 2 strings, s1 and s2, as input and returns a string that is the concatenation of both strings with a space in between. For example, if s1 = \\"Hello\\" and s2 = \\"World\\", the function should return \\"Hello World\\". However, if only one string is provided, the function should return that string as is.","solution":"def concatenate_strings(s1, s2=\\"\\"): Concatenates two strings with a space in between. If only one string is provided, returns that string. Args: s1 (str): The first string. s2 (str): The second string, default is an empty string. Returns: str: The concatenated string or the single provided string. if s1 and s2: return f\\"{s1} {s2}\\" return s1 + s2"},{"question":"Create a function that takes a list of strings and returns a new list with all the duplicate strings removed. The returned list should maintain the original order of the first occurrence of each unique string.","solution":"def remove_duplicates(string_list): Removes duplicate strings from the input list while maintaining the original order of their first occurrence. Args: string_list (list): A list of strings. Returns: list: A new list with duplicates removed. seen = set() result = [] for string in string_list: if string not in seen: seen.add(string) result.append(string) return result"},{"question":"Create a function that takes three integer parameters and returns the maximum of the three numbers.","solution":"def max_of_three(a, b, c): Returns the maximum of three integers a, b, and c. return max(a, b, c)"},{"question":"Create a function that takes an array and a target sum as input. The function should return True if any three elements in the array sum up to the target, and False otherwise.","solution":"def three_sum(arr, target): Returns True if any three elements in the array sum up to the target, and False otherwise. arr.sort() n = len(arr) for i in range(n - 2): left, right = i + 1, n - 1 while left < right: total = arr[i] + arr[left] + arr[right] if total == target: return True elif total < target: left += 1 else: right -= 1 return False"},{"question":"Create a function that checks if a number is prime. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. How can you implement this function?","solution":"def is_prime(n): Checks if a number n is prime. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True"},{"question":"Create a function that checks if a given string is a valid palindrome, ignoring spaces and case sensitivity.","solution":"def is_palindrome(s): Checks if a given string is a valid palindrome, ignoring spaces and case sensitivity. Arguments: s : str : input string Returns: bool : True if the string is a palindrome, False otherwise # Normalize the string: remove spaces and convert to lower case normalized_str = ''.join(char.lower() for char in s if char.isalnum()) # Check if the normalized string is equal to its reverse return normalized_str == normalized_str[::-1]"},{"question":"Create a function that takes two integers as input and returns their sum. In Python.","solution":"def add(a, b): Returns the sum of a and b. return a + b"},{"question":"Create a function that takes an integer as a parameter and prints the sum of all numbers from 1 to n.","solution":"def sum_up_to(n): Returns the sum of all numbers from 1 to n. return sum(range(1, n+1))"},{"question":"Create a function that generates the Fibonacci sequence up to a given number of elements. The function should be written in Python, and it should return a list containing the sequence. The function should also include error handling to ensure that the input is a non-negative integer.","solution":"def generate_fibonacci(n): Generates the Fibonacci sequence up to n elements. Parameters: n (int): Number of elements in the Fibonacci sequence to generate. Must be a non-negative integer. Returns: list: A list containing the first n elements of the Fibonacci sequence. if not isinstance(n, int): raise ValueError(\\"Input must be a non-negative integer.\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0: return [] elif n == 1: return [0] fib_sequence = [0, 1] for i in range(2, n): fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"Create a function that takes an integer as an argument and returns a string representation of that integer. If the integer is negative, the string should start with a hyphen. If the integer is positive, the string should not have a leading zero if the number has more than one digit.","solution":"def int_to_str(n): Returns the string representation of an integer. If the integer is negative, the string starts with a hyphen. If the integer is positive, the string does not have leading zeros. return str(n)"},{"question":"Create a function that computes the sum of two lists of numbers. If the lists are of different lengths, the extra elements in the longer list are ignored.","solution":"def sum_lists(list1, list2): Computes the sum of two lists of numbers. If the lists are of different lengths, the extra elements in the longer list are ignored. return [a + b for a, b in zip(list1, list2)]"},{"question":"Create a function that takes two parameters, an array and a target integer. The function should return the indices of the two numbers such that they add up to the target. If no two numbers sum up to the target, return [-1, -1]. The function should use a hash map for efficient lookups.","solution":"def two_sum(nums, target): Returns the indices of the two numbers that add up to the target. If no such numbers exist, returns [-1, -1]. Args: nums (list): A list of integers. target (int): The target sum. Returns: list: A list of two integers representing the indices of the numbers adding up to the target. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return [-1, -1]"},{"question":"Create a function that takes a string as an argument and returns the # of words in that string. Don't count punctuation or special characters as words.","solution":"import re def count_words(s): Returns the number of words in the string s. words = re.findall(r'bw+b', s) return len(words)"},{"question":"Create a function that checks if a given string is a palindrome. A palindrome is a string that reads the same backwards as forwards. Your function should ignore non-alphanumeric characters and be case-insensitive.","solution":"def is_palindrome(s: str) -> bool: Checks if the given string is a palindrome, ignoring non-alphanumeric characters and case. # Normalize the string: remove non-alphanumeric characters and convert to lowercase filtered_chars = [char.lower() for char in s if char.isalnum()] # Check if the filtered characters form a palindrome return filtered_chars == filtered_chars[::-1]"},{"question":"Create a function that determines whether the sum of two integers is a palindrome or not. A palindrome is a number that reads the same forward and backward. For instance, 121, 1331, 12321 are palindromes. The function should take two integers as input parameters and output a boolean value indicating whether their sum is a palindrome or not.","solution":"def is_palindrome_sum(a, b): Determines whether the sum of two integers is a palindrome. Parameters: a (int): The first integer. b (int): The second integer. Returns: bool: True if the sum of the integers is a palindrome, False otherwise. total = a + b total_str = str(total) return total_str == total_str[::-1]"},{"question":"Create a function that identifies and returns all words that contain both uppercase and lowercase letters from a given string. You should ignore any words that consist entirely of special characters or digits. For example, the string \\"Hello world! This is test@123.\\" should return \`['world', 'This']\`.","solution":"import re def find_mixed_case_words(text): Returns a list of words that contain both uppercase and lowercase letters from the given string. words = text.split() mixed_case_words = [] for word in words: if re.search(r'[a-z]', word) and re.search(r'[A-Z]', word) and re.search(r'[a-zA-Z]', word): if word.isalpha(): mixed_case_words.append(word) else: cleaned_word = ''.join(filter(str.isalpha, word)) if re.search(r'[a-z]', cleaned_word) and re.search(r'[A-Z]', cleaned_word): mixed_case_words.append(cleaned_word) return mixed_case_words"},{"question":"Create a function that takes an array of integers and returns a new array containing only the integers that are even. Use a list comprehension for this task.","solution":"def filter_even_numbers(arr): Returns a new array containing only the even integers from the given array. return [x for x in arr if x % 2 == 0]"},{"question":"Create a function that takes a list of numbers as input and returns a new list with elements at even indices and their squares.","solution":"def even_index_squares(numbers): Takes a list of numbers and returns a new list containing only the elements at even indices, squared. return [num**2 for i, num in enumerate(numbers) if i % 2 == 0]"},{"question":"Create a function that calculates the sum of all divisors of a given number \`n\` (excluding \`n\` itself). If the sum of the divisors is a prime number, return \`True\`; otherwise, return \`False\`.","solution":"import math def is_prime(num): if num <= 1: return False for i in range(2, int(math.sqrt(num)) + 1): if num % i == 0: return False return True def sum_of_divisors(n): Returns the sum of all divisors of n excluding n itself. total_sum = 0 for i in range(1, n): if n % i == 0: total_sum += i return total_sum def sum_divisors_is_prime(n): Calculates the sum of all divisors of n (excluding n itself). If the sum is a prime number, returns True; otherwise, returns False. sum_divisors = sum_of_divisors(n) return is_prime(sum_divisors)"},{"question":"Create a function that finds the first occurrence of a substring within a string and returns its index, or -1 if the substring is not found.","solution":"def find_substring(s, sub): Returns the index of the first occurrence of the substring 'sub' in the string 's', or -1 if the substring is not found. try: return s.index(sub) except ValueError: return -1"},{"question":"Create a function that takes a fixed-length array of integers as input and returns the integer that appears most frequently in the array. If there is a tie, return the smallest number. If the array is empty, return -1.","solution":"from collections import Counter def most_frequent_number(arr): Returns the integer that appears most frequently in the array. If there's a tie, returns the smallest number. If the array is empty, returns -1. if not arr: return -1 count = Counter(arr) most_common = count.most_common() max_frequency = most_common[0][1] candidates = [num for num, freq in most_common if freq == max_frequency] return min(candidates)"},{"question":"Create a function that calculates the final price of an item after applying a given discount percentage. However, the discount should only apply if the item's original price is greater than a certain threshold. If the original price is less than or equal to the threshold, no discount should be applied.","solution":"def calculate_discounted_price(original_price, discount_percentage, threshold): Calculate the final price after applying a discount if the original price is greater than the threshold. Parameters: original_price (float): The original price of the item. discount_percentage (float): The discount percentage to be applied. threshold (float): The price threshold that determines if the discount is applied. Returns: float: The final price after the discount is applied if applicable, otherwise the original price. if original_price > threshold: discount = original_price * (discount_percentage / 100) final_price = original_price - discount else: final_price = original_price return final_price"},{"question":"Create a function that takes an integer array as a parameter and reverses the elements in the array without using any additional arrays or built-in reverse functions. The function should change the original array in place.","solution":"def reverse_array(arr): Reverses the elements of the array in place. start = 0 end = len(arr) - 1 while start < end: arr[start], arr[end] = arr[end], arr[start] start += 1 end -= 1"},{"question":"Create a function that sums all numbers in a nested list using Python. You should use a recursive approach. The function should return the total sum of all numbers present in the nested list structure.","solution":"def sum_nested_list(nested_list): Returns the total sum of all numbers present in the nested list structure. :param nested_list: List containing integers and/or other nested lists :return: int total_sum = 0 for element in nested_list: if isinstance(element, list): total_sum += sum_nested_list(element) else: total_sum += element return total_sum"},{"question":"Create a function that takes two strings as input and returns the concatenation of both strings if the second string does not contain any vowels. Otherwise, return the second string repeated twice. If both strings are empty, return an empty string.","solution":"def concat_or_repeat(str1, str2): Concatenate str1 and str2 if str2 contains no vowels. Otherwise, return str2 repeated twice. If both strings are empty, return an empty string. vowels = 'aeiouAEIOU' if not str2: return str1 # If str2 is empty, return str1. if any(char in vowels for char in str2): return str2 * 2 # If str2 contains any vowels, return str2 repeated twice. else: return str1 + str2 # If str2 does not contain any vowels, concatenate str1 and str2."},{"question":"Create a function that takes a list of tuples, each representing an interval \`([start_time], duration)\`, and returns a list of tuples representing the non-overlapping merged intervals. The intervals are sorted by start time. If \`mergeOverlapping\` is \`False\`, return the intervals as they are, without merging or sorting.","solution":"def merge_intervals(intervals, mergeOverlapping=True): Takes a list of tuples, each representing an interval ([start_time], duration), and returns a list of tuples representing the non-overlapping merged intervals. Parameters: intervals (list): A list of tuples (start_time, duration) mergeOverlapping (bool): If False, return the intervals as they are, without merging or sorting. Returns: list: A list of tuples representing the merged or original intervals. if not mergeOverlapping: return intervals sorted_intervals = sorted(intervals, key=lambda x: x[0]) merged_intervals = [] for interval in sorted_intervals: if not merged_intervals or merged_intervals[-1][0] + merged_intervals[-1][1] <= interval[0]: merged_intervals.append(interval) else: merged_intervals[-1] = (merged_intervals[-1][0], max(merged_intervals[-1][1], interval[0] + interval[1] - merged_intervals[-1][0])) return merged_intervals"},{"question":"Create a function that checks if a number is even.","solution":"def is_even(number): Returns True if the number is even, False otherwise. return number % 2 == 0"},{"question":"Create a function that takes a string as an input and returns the string with all vowels (a, e, i, o, u) removed. You should not use built-in string manipulation tools like \`replace()\` or \`strip()\`, but instead approach it by iterating through the string and checking each character.","solution":"def remove_vowels(input_str): Returns the input string with all vowels (a, e, i, o, u) removed. Args: input_str (str): The input string from which vowels will be removed. Returns: str: The string with all vowels removed. vowels = \\"aeiouAEIOU\\" result = [] for char in input_str: if char not in vowels: result.append(char) return ''.join(result)"},{"question":"Create a function that takes two arguments: an integer array of \`n\` positive integers, where \`n\` is between 1 and 10000, and a positive integer \`k\`. Return the smallest subarray sum that is divisible by \`k\`. If no such subarray exists, return -1.","solution":"def smallest_subarray_sum_divisible_by_k(arr, k): Returns the smallest subarray sum that is divisible by k. If no such subarray exists, return -1. n = len(arr) min_length = float('inf') for start in range(n): sub_sum = 0 for end in range(start, n): sub_sum += arr[end] if sub_sum % k == 0: min_length = min(min_length, end - start + 1) return min_length if min_length != float('inf') else -1"},{"question":"Create a function that takes an integer as input and prints out its binary representation. How can I write this function in Python?","solution":"def int_to_binary(n): Given an integer n, return its binary representation as a string. if n >= 0: return bin(n)[2:] # Using bin() function and removing '0b' prefix else: return '-' + bin(n)[3:] # Handling negative numbers # Example usage: int_to_binary(10) should return '1010'"},{"question":"Create a function that takes a string as input and returns a dictionary. The dictionary should contain the count of each vowel (lowercase and uppercase) in the string. If the string does not contain any vowels, the function should return an empty dictionary.","solution":"def count_vowels(input_string): Returns a dictionary with the counts of each vowel (both lowercase and uppercase) in the input string. vowels = \\"aeiouAEIOU\\" vowel_counts = {} for char in input_string: if char in vowels: vowel_counts[char] = vowel_counts.get(char, 0) + 1 return vowel_counts"},{"question":"Create a function that converts a given decimal number into its binary representation as a string, without using in-built conversion functions. The function should handle both positive and negative integers, and return the string representation of its binary equivalent. Additionally, the function should handle zero as well.","solution":"def decimal_to_binary(n): Convert a given decimal number into its binary representation as a string. if n == 0: return \\"0\\" is_negative = n < 0 n = abs(n) binary_rep = \\"\\" while n > 0: binary_rep = str(n % 2) + binary_rep n = n // 2 if is_negative: binary_rep = \\"-\\" + binary_rep return binary_rep"},{"question":"Create a function that takes a string as input and returns the number of unique substrings in the string that are of zero length.","solution":"def count_zero_length_substrings(s): Returns the number of unique zero-length substrings in the input string which is always 1. return 1"},{"question":"Create a function that takes two positive integers and returns their greatest common divisor (GCD). The function should be implemented using the recursive Euclidean algorithm. The Euclidean algorithm is based on the principle that the GCD of two numbers also divides their difference.","solution":"def gcd(a, b): Returns the greatest common divisor (GCD) of two positive integers a and b using the recursive Euclidean algorithm. if b == 0: return a else: return gcd(b, a % b)"},{"question":"Create a function that takes an integer as input and returns the number of 1 bits in its binary representation. The function should also handle negative integers. Consider that in Python, negative integers are represented using two's complement. How can we solve this problem considering this representation?","solution":"def count_one_bits(n): Returns the number of 1 bits in the binary representation of the given integer n. Handles negative integers using two's complement representation. if n < 0: # Calculate the two's complement binary representation for a negative number # In 32 bits. n = (1 << 32) + n return bin(n).count('1')"},{"question":"Create a function that takes two positive integers, a and b, and returns the number of common factors between a and b.","solution":"def common_factors(a, b): Returns the number of common factors between two positive integers a and b. def factors(n): return set(i for i in range(1, n + 1) if n % i == 0) factors_a = factors(a) factors_b = factors(b) return len(factors_a & factors_b)"},{"question":"Create a function that takes an integer array and return the sum of elements within a given range (start and end indices). The function should handle cases where the start index is greater than the end index by returning null. If the range is out of bounds, it should return null.","solution":"def sum_in_range(arr, start, end): Returns the sum of elements within the specified range [start, end]. If start is greater than end or if indices are out of bounds, return None. :param arr: List[int] - the input array :param start: int - the start index :param end: int - the end index :return: int or None - the sum of elements in the range or None for invalid input if start > end: return None if start < 0 or end >= len(arr): return None return sum(arr[start:end + 1])"},{"question":"Create a function that translates numbers into words. For example, the function should convert the number 345 into the word string \\"three hundred forty-five\\".","solution":"def number_to_words(num): Convert a number into words. if not (0 <= num < 1000): return \\"Number out of range\\" below_20 = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen'] tens = ['', '', 'twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety'] if num < 20: return below_20[num] if num < 100: return tens[num // 10] + ('' if num % 10 == 0 else '-' + below_20[num % 10]) return below_20[num // 100] + ' hundred' + ('' if num % 100 == 0 else ' ' + number_to_words(num % 100))"},{"question":"Create a function that handles a user input command 'command' which can be 'start', 'stop', 'restart', or 'status'. If the command is 'start', the function should return 'Server starting...'. If the command is 'stop', the function should return 'Server stopping...'. If the command is 'restart', the function should return 'Server restarting...'. For any other command, the function should return 'Unknown command'.","solution":"def handle_command(command): Handle a user command to 'start', 'stop', 'restart', or 'status'. Parameters: command (str): The command to handle. Returns: str: The response based on the command. if command == 'start': return 'Server starting...' elif command == 'stop': return 'Server stopping...' elif command == 'restart': return 'Server restarting...' elif command == 'status': return 'Server status: running' else: return 'Unknown command'"},{"question":"Create a function that simulates rolling a five-sided die 5000 times and count how many times each face appears.","solution":"import random def roll_five_sided_die(num_rolls=5000): Simulates rolling a five-sided die 'num_rolls' times and counts the occurrences of each face value. Returns a dictionary with the face values (1 to 5) as keys and the counts as values. counts = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0} for _ in range(num_rolls): roll = random.randint(1, 5) counts[roll] += 1 return counts"},{"question":"Create a function that finds the Fibonacci sequence using an iterative approach.","solution":"def fibonacci(n): Returns the first n numbers in the Fibonacci sequence using an iterative approach. if n <= 0: return [] elif n == 1: return [0] fib_sequence = [0, 1] for i in range(2, n): fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"Create a function that returns the first two distinct numbers from a given list of integers. If the list contains fewer than two distinct numbers, return all the distinct numbers available.","solution":"def first_two_distinct_numbers(lst): Returns the first two distinct numbers from a given list of integers. If the list contains fewer than two distinct numbers, returns all the distinct numbers available. distinct_numbers = [] seen = set() for number in lst: if number not in seen: distinct_numbers.append(number) seen.add(number) if len(distinct_numbers) == 2: break return distinct_numbers"},{"question":"Create a function that takes an integer as input and returns its hexadecimal representation as a string. Ensure the hexadecimal string is properly formatted with a '0x' prefix and includes uppercase letters for the hexadecimal digits A, B, C, D, E, and F.","solution":"def int_to_hex(n): Converts an integer to its hexadecimal representation as a string. The hexadecimal string includes a '0x' prefix and uses uppercase letters. if not isinstance(n, int): raise ValueError(\\"Input must be an integer\\") return hex(n).upper()"},{"question":"Create a function that takes an integer as a parameter and checks whether the integer is a palindrome. If the integer is a palindrome, return True; otherwise, return False. A palindrome number is a number that remains the same when its digits are reversed.","solution":"def is_palindrome(n): Returns True if n is a palindrome; otherwise, returns False. n_str = str(n) return n_str == n_str[::-1]"},{"question":"Create a function that solves the Tower of Hanoi puzzle. The function should take three parameters: the number of disks, the source rod, the auxiliary rod, and the destination rod. The function should print each step of the process.","solution":"def tower_of_hanoi(n, source, auxiliary, destination): Solves the Tower of Hanoi puzzle and prints each step. Parameters: - n: The number of disks. - source: The name of the source rod. - auxiliary: The name of the auxiliary rod. - destination: The name of the destination rod. if n == 1: print(f\\"Move disk 1 from {source} to {destination}\\") return tower_of_hanoi(n-1, source, destination, auxiliary) print(f\\"Move disk {n} from {source} to {destination}\\") tower_of_hanoi(n-1, auxiliary, source, destination)"},{"question":"Create a function that generates the nth Fibonacci number, then explain how you arrived at your solution.","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n <= 0: raise ValueError(\\"n must be a positive integer\\") elif n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 for _ in range(2, n): a, b = b, a + b return b"},{"question":"Create a function that takes a list of integers, and returns the sum of all the integers in the list. If the list is empty, return 0. Use Python as the programming language.","solution":"def sum_of_list(numbers): Returns the sum of all integers in the list. If the list is empty, returns 0. return sum(numbers)"},{"question":"Create a function that takes in two integers as parameters, and returns true if they are equal, false otherwise. Also, if the integers are not equal, the function should print to the console the difference between the two numbers. How can this be accomplished in Python?","solution":"def compare_and_get_difference(a, b): Returns True if a and b are equal, otherwise False. Also prints the difference between a and b if they are not equal. if a == b: return True else: print(f\\"The difference between {a} and {b} is {abs(a - b)}\\") return False"},{"question":"Create a function that generates all possible combinations of a given list of integers, including duplicates. For example, given the list [1, 2, 2], it should return [[], [1], [1, 2], [1, 2, 2], [2], [2, 2], [1, 2], [1, 2, 2]].","solution":"from itertools import combinations def generate_combinations(lst): Generate all possible combinations of a given list of integers, including duplicates. all_combinations = [] for i in range(len(lst) + 1): for comb in combinations(lst, i): all_combinations.append(list(comb)) return all_combinations"},{"question":"Create a function that can parse a string and return an array of words. The string can contain multiple words separated by different whitespace characters (spaces, tabs, newlines, etc.).","solution":"def parse_string(input_string): Parses the input string and returns a list of words. Words are defined as sequences of characters separated by whitespace characters (spaces, tabs, newlines, etc.). Parameters: input_string (str): The string to be parsed. Returns: List[str]: A list of words found in the input string. return input_string.split()"},{"question":"Create a function that accepts an integer and checks whether the integer is divisible by 3 or 5. If it is, return 'Fizz' if it's divisible by 3, 'Buzz' if it's divisible by 5, and 'FizzBuzz' if it's divisible by both 3 and 5.","solution":"def fizz_buzz(n): Checks whether the integer n is divisible by 3, 5, or both. Returns: 'Fizz' if n is divisible by 3 but not 5. 'Buzz' if n is divisible by 5 but not 3. 'FizzBuzz' if n is divisible by both 3 and 5. The number itself if none of the above conditions are met. if n % 3 == 0 and n % 5 == 0: return 'FizzBuzz' elif n % 3 == 0: return 'Fizz' elif n % 5 == 0: return 'Buzz' else: return n"},{"question":"Create a function that converts a binary number to a decimal number. Write the function in Python.","solution":"def binary_to_decimal(binary_number): Converts a binary number (given as a string) to a decimal number. return int(binary_number, 2)"},{"question":"Create a function that takes two integers a and b. The function should add the integers and return the sum. If either a or b is not an integer, return an error message.","solution":"def add_integers(a, b): Adds two integers a and b. Parameters: a (int): First integer b (int): Second integer Returns: int: The sum of a and b if both are integers str: Error message if either a or b is not an integer if not isinstance(a, int) or not isinstance(b, int): return \\"Error: Both inputs must be integers\\" return a + b"},{"question":"Create a function that takes a string, a starting index, and an ending index as arguments and returns a substring of the string that is between the starting and ending index. Keep in mind that the ending index is not inclusive.","solution":"def substring(s, start, end): Returns a substring of the string s that is between the starting (inclusive) and ending (exclusive) index. return s[start:end]"},{"question":"Create a function that checks if a given integer is a power of two. The function should take an integer as input and return True if the integer is a power of two, and False otherwise. For example, 1, 2, 4, 8, 16, 32 are powers of two, while 3, 5, 7, 10, 15 are not.","solution":"def is_power_of_two(n): Checks if a given integer is a power of two. Args: n (int): The integer to check. Returns: bool: True if the integer is a power of two, False otherwise. if n <= 0: return False return (n & (n - 1)) == 0"},{"question":"Create a function that will take an string and return the most occurring character in it. If there are multiple characters with the same highest frequency, return the first one encountered in the string.","solution":"def most_occurring_char(s): Returns the most occurring character in the string s. If there are multiple characters with the same highest frequency, return the first one encountered in the string. from collections import Counter if not s: return None counter = Counter(s) most_common_char, _ = counter.most_common(1)[0] return most_common_char"},{"question":"Create a function that takes a string, *str*, and returns a new string that contains the elements of the string in reverse order.","solution":"def reverse_string(s): Returns the string s in reverse order. return s[::-1]"},{"question":"Create a function that can take a string as an input and returns a dictionary where the keys are the characters in the string and the values are the counts of those characters.","solution":"def count_characters(s): Returns a dictionary where the keys are the characters in the string \`s\` and the values are the counts of those characters. :param s: Input string :type s: str :return: Dictionary with character counts :rtype: dict counts = {} for char in s: if char in counts: counts[char] += 1 else: counts[char] = 1 return counts"},{"question":"Create a function that generates a list of Fibonacci sequence numbers up to a given number \`n\`. The function should return a list where each element is a Fibonacci number less than or equal to \`n\`. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the previous two. For example, if the input is \`n = 10\`, the output should be \`[0, 1, 1, 2, 3, 5, 8]\`.","solution":"def fibonacci_up_to_n(n): Generate a list of Fibonacci sequence numbers up to a given number n. Parameters: n (int): The upper limit for Fibonacci numbers Returns: list: A list of Fibonacci numbers less than or equal to n if n < 0: return [] fib_list = [0, 1] while True: next_fib = fib_list[-1] + fib_list[-2] if next_fib > n: break fib_list.append(next_fib) # If n is 0, return [0] return fib_list if n > 0 else [0]"},{"question":"Create a function that takes a list of integers and prints each element on a new line using Python.","solution":"def print_elements(elements): Takes a list of integers and prints each element on a new line. for elem in elements: print(elem)"},{"question":"Create a function that takes a list of numbers and returns the list sorted in ascending order. You should not use the built-in sort function or any other sorting algorithms like bubble sort, insertion sort, merge sort, etc. Instead, use any other sorting algorithm that you want to implement.","solution":"def shell_sort(arr): Sorts a list of numbers in ascending order using Shell sort algorithm. n = len(arr) gap = n // 2 while gap > 0: for i in range(gap, n): temp = arr[i] j = i while j >= gap and arr[j - gap] > temp: arr[j] = arr[j - gap] j -= gap arr[j] = temp gap //= 2 return arr"},{"question":"Create a function that takes a string and returns the first non-repeating character. If there is no non-repeating character, return None. The function should be case-sensitive, meaning it will treat 'a' and 'A' as distinct characters.","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in a string s. If there is no non-repeating character, returns None. char_count = {} # Count the frequency of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first character with a frequency of 1 for char in s: if char_count[char] == 1: return char return None"},{"question":"Create a function that takes three arguments and returns the sum of these three arguments. For simplicity, let's assume the three arguments will always be integers.","solution":"def sum_of_three(a, b, c): Returns the sum of three integers a, b, and c. return a + b + c"},{"question":"Create a function that takes an array of numbers as input and returns the product of all the numbers in the array. The function should also handle the case where the array is empty by returning 1 (since the product of no numbers is conventionally considered 1).","solution":"def product_of_array(arr): Returns the product of all the numbers in the array. If the array is empty, returns 1. if not arr: return 1 product = 1 for num in arr: product *= num return product"},{"question":"Create a function that determines whether an integer is a power of two. If it is, the function should return true; otherwise, it should return false.","solution":"def is_power_of_two(n): Determines whether an integer is a power of two. Args: n (int): The integer to check. Returns: bool: True if n is a power of two, False otherwise. if n <= 0: return False return (n & (n - 1)) == 0"},{"question":"Create a function that takes a string and reverses the string. Here's an example input: \\"hello\\". Here's what the output should be for this input: \\"olleh\\". Your response should be in Python.","solution":"def reverse_string(s): Returns the reversed version of the input string s. return s[::-1]"},{"question":"Create a function that takes in a list of integers and returns the sum of the cubes of all the integers in the list.","solution":"def sum_of_cubes(lst): Returns the sum of the cubes of all the integers in the list. Parameters: lst (list): A list of integers Returns: int: The sum of the cubes of the integers return sum(x**3 for x in lst)"},{"question":"Create a function that prints the first N natural numbers using Recursion.","solution":"def print_natural_numbers(n, current=1): Prints the first N natural numbers using recursion. :param n: The number of natural numbers to print. :param current: The current number to be printed. (Default is 1) if current > n: return print(current) print_natural_numbers(n, current + 1)"},{"question":"Create a function that determines if a number is even or odd. If it's even, print \\"even\\", and if it's odd, print \\"odd\\". The function should take one parameter - an integer. You might also want to provide error handling in case the user input is not an integer.","solution":"def check_even_odd(number): Determines if the given number is even or odd. Parameters: number (int): The number to check. Returns: str: \\"even\\" if the number is even, \\"odd\\" if the number is odd. Raises: ValueError: If the input is not an integer. if not isinstance(number, int): raise ValueError(\\"Input must be an integer.\\") if number % 2 == 0: return \\"even\\" else: return \\"odd\\""},{"question":"Create a function that takes a string as input and returns the string with all characters in uppercase. Convert all characters in lowercase in the string using Python.","solution":"def to_uppercase(input_string): Returns the input string with all characters converted to uppercase. return input_string.upper()"},{"question":"Create a function that can convert a binary number to its corresponding decimal value. The function should output the decimal value as an integer. Ensure the function works with binary numbers provided as strings.","solution":"def binary_to_decimal(binary_str): Converts a binary number (given as a string) to its corresponding decimal value. Parameters: binary_str (str): A string representation of a binary number. Returns: int: The decimal representation of the binary number. return int(binary_str, 2)"},{"question":"Create a function that takes an integer as input and returns its absolute value.","solution":"def absolute_value(n): Returns the absolute value of the input integer n. return abs(n)"},{"question":"Create a function that generates all possible permutations of a given list of integers. The function should return a list of all permutations.","solution":"from itertools import permutations def generate_permutations(nums): Generates all possible permutations of a given list of integers. Args: nums (list): A list of integers. Returns: list: A list of all permutations, where each permutation is represented as a list. return [list(p) for p in permutations(nums)]"},{"question":"Create a function that takes a list of integers, \`nums\`, and an integer \`target\`, and returns a list \`result\` such that \`result[i]\` is the minimum number of operations required to make \`<nums[i], target>\` a pair, where an operation is defined as incrementing or decrementing \`nums[i]\`.","solution":"def min_operations(nums, target): Returns a list where each element is the minimum number of operations required to make the corresponding element in \`nums\` equal to the \`target\`. :param nums: List of integers :param target: Integer target value :return: List of minimum number of operations return [abs(x - target) for x in nums]"},{"question":"Create a function that accepts two arrays of integers and returns a new array containing only the distinct elements that appear in both arrays.","solution":"def find_common_elements(arr1, arr2): Returns a new array containing only the distinct elements that appear in both arrays. return list(set(arr1).intersection(arr2))"},{"question":"Create a function that returns \\"Fizz\\" if an integer is divisible by 3, \\"Buzz\\" if it is divisible by 5, and \\"FizzBuzz\\" if it is divisible by both 3 and 5. If it is not divisible by either, return the number itself. You can solve this using a simple if-else condition but please also describe it using a multi-step process for better understanding.","solution":"def fizzbuzz(n): Returns \\"Fizz\\" if n is divisible by 3, \\"Buzz\\" if n is divisible by 5, \\"FizzBuzz\\" if n is divisible by both 3 and 5, otherwise returns the number itself. if n % 3 == 0 and n % 5 == 0: return \\"FizzBuzz\\" elif n % 3 == 0: return \\"Fizz\\" elif n % 5 == 0: return \\"Buzz\\" else: return n"},{"question":"Create a function that takes two arguments: a string and an integer. The function should return the string after removing all occurrences of the specified character from the string. For example, if the function iscalled with the string \\"hello world\\" and the character \\"l\\", it should return \\"heo word\\".","solution":"def remove_character(string, char): Removes all occurrences of 'char' from 'string'. Parameters: string (str): The input string. char (str): The character to be removed. Returns: str: The string after removing the specified character. return string.replace(char, \\"\\")"},{"question":"Create a function that takes a string and returns a new string in which every other character is capitalized, starting with the first character.","solution":"def alternate_capitalization(s): Returns a new string in which every other character is capitalized, starting with the first character. :param s: String input :return: New string with alternate capitalization result = [] for i, char in enumerate(s): if i % 2 == 0: result.append(char.upper()) else: result.append(char.lower()) return ''.join(result)"},{"question":"Create a function that takes two parameters: \`list1\` and \`list2\`. Both \`list1\` and \`list2\` are lists of integers. Your function should return a new list containing only the elements that appear in both \`list1\` and \`list2\` without duplicates.","solution":"def common_elements(list1, list2): Returns a list of elements that appear in both list1 and list2 without duplicates. return list(set(list1) & set(list2))"},{"question":"Create a function that takes a single argument \`threshold\` and returns the \`threshold\` itself if \`threshold\` is above a certain \\"safety limit\\", otherwise returns the square of the \`threshold\`. If the input \`threshold\` is below zero, throw an error message. The safety limit is defined as 50.","solution":"def process_threshold(threshold): Returns the threshold itself if it is above the safety limit of 50. Otherwise, returns the square of the threshold. Raises a ValueError if the threshold is below zero. if threshold < 0: raise ValueError(\\"Threshold cannot be below zero.\\") elif threshold > 50: return threshold else: return threshold ** 2"},{"question":"Create a function that takes a list of integers and returns a new list containing only the even numbers from the original list. Initialize this function with the list \`[1, 2, 3, 4, 5, 6, 7, 8]\`. Then, write a unit test to verify that your function works correctly.","solution":"def filter_even_numbers(numbers): Returns a new list containing only the even numbers from the original list. return [num for num in numbers if num % 2 == 0] # Initialize with the given list filtered_list = filter_even_numbers([1, 2, 3, 4, 5, 6, 7, 8])"},{"question":"Create a function that displays all prime numbers between n and m (inclusive). The function should be named \`displayPrimes\` and take two integer parameters, \`n\` and \`m\`. The function should print all the prime numbers between \`n\` and \`m\`.","solution":"def displayPrimes(n, m): Displays all prime numbers between n and m (inclusive). def is_prime(x): if x <= 1: return False for i in range(2, int(x**0.5) + 1): if x % i == 0: return False return True for num in range(n, m + 1): if is_prime(num): print(num)"},{"question":"Create a function that takes two lists as input and returns a set containing the common elements between the two lists.","solution":"def common_elements(list1, list2): Returns a set containing the common elements between two lists. return set(list1).intersection(set(list2))"},{"question":"Create a function that takes two arguments, a string and a substring, and returns \`True\` if the substring is found at the end of the string, and \`False\` otherwise. The function should be case-sensitive.","solution":"def ends_with(main_string, sub_string): Returns True if the sub_string is found at the end of main_string, False otherwise. The comparison is case-sensitive. return main_string.endswith(sub_string)"},{"question":"Create a function that takes a list of integers representing the strengths of different heroes and returns the index of the hero with the maximum strength.","solution":"def strongest_hero(strengths): Returns the index of the hero with the maximum strength. :param strengths: List of integers representing the strengths of different heroes. :return: Index of the hero with the maximum strength. if not strengths: raise ValueError(\\"The list of strengths cannot be empty\\") return strengths.index(max(strengths))"},{"question":"Create a function that takes a string representing a fully qualified domain name (FQDN) and returns the top two levels of the domain. For example, for the input \\"example.co.uk\\", the function should return \\"co.uk\\".","solution":"def get_top_two_levels(domain): Returns the top two levels of the given fully qualified domain name (FQDN). Args: domain (str): A fully qualified domain name. Returns: str: The top two levels of the domain. parts = domain.split('.') return '.'.join(parts[-2:])"},{"question":"Create a function that takes a string as input and returns the reverse of the string. Additionally, handle the case where the input might be \`None\`. If the input is \`None\`, the function should return an empty string \`''\`. Both uppercase and lowercase letters should be preserved. Also, all non-alphabetical characters should be disregarded when reversing the string.","solution":"def reverse_string(input_string): Returns the reverse of the input string, ignoring non-alphabetical characters. If the input is None, returns an empty string. if input_string is None: return '' reverse_result = ''.join([ch for ch in reversed(input_string) if ch.isalpha()]) return reverse_result"},{"question":"Create a function that takes a list of words and returns a new list with the words in reverse order. The function should be efficient and work with large lists of words.","solution":"def reverse_words(words): Takes a list of words and returns a new list with the words in reverse order. :param words: list of words to be reversed :return: list of words in reverse order # Efficiency is key, so we will use slicing which is very fast in Python return words[::-1]"},{"question":"Create a function that takes in a list of numbers and returns the average of those numbers as an integer.","solution":"def average(numbers): Returns the average of a list of numbers as an integer. :param numbers: List of numbers :return: Integer average of the numbers if not numbers: return 0 return sum(numbers) // len(numbers)"},{"question":"Create a function that takes an integer as an input and checks if the number is negative or not.","solution":"def is_negative(number): Returns True if the number is negative, otherwise False. return number < 0"},{"question":"Create a function that takes two lists of integers as parameters and returns a list of integers that contain both numbers appearing in both lists. The function should ensure that the dupplicates are removed from the final list.","solution":"def intersection_of_lists(list1, list2): Returns a list containing numbers that appear in both input lists without duplicates. set1 = set(list1) set2 = set(list2) intersection = list(set1 & set2) return intersection"},{"question":"Create a function that takes two matrices, A and B, as inputs and returns their dot product. If the matrices cannot be dotted due to incompatible dimensions, return an error message.","solution":"import numpy as np def dot_product(A, B): Returns the dot product of matrices A and B. If incompatible dimensions, return 'Incompatible matrices for dot product'. try: product = np.dot(A, B) return product except ValueError: return \\"Incompatible matrices for dot product\\""},{"question":"Create a function that takes in a string of lowercase English letters and returns a string with all the vowels removed. How would you implement this in Python?","solution":"def remove_vowels(input_string): Removes all the vowels from the input string. Parameters: input_string (str): The string from which vowels will be removed. Returns: str: The input string without vowels. vowels = \\"aeiou\\" return ''.join([char for char in input_string if char not in vowels])"},{"question":"Create a function that generates a sequence of Fibonacci numbers up to a given limit. The function should return a list of the sequence. For example, fib_sequence(10) should return [0, 1, 1, 2, 3, 5, 8].","solution":"def fib_sequence(limit): Generates a sequence of Fibonacci numbers up to a given limit. :param limit: The upper bound to which Fibonacci numbers are generated (non-inclusive). :return: A list of Fibonacci numbers up to the given limit. if limit <= 0: return [] sequence = [0, 1] while True: next_value = sequence[-1] + sequence[-2] if next_value >= limit: break sequence.append(next_value) return sequence"},{"question":"Create a function that takes two lists of numbers and multiplies corresponding elements. If the lists are of different lengths, pad the shorter list with zeros until both lists are of equal length. Then, return the resulting list of products.","solution":"def multiply_lists(list1, list2): Multiplies corresponding elements of two lists. If the lists are of different lengths, pad the shorter list with zeros. Args: list1: First list of numbers. list2: Second list of numbers. Returns: A list of products of corresponding elements. # Find the maximum length of the two lists max_length = max(len(list1), len(list2)) # Pad the shorter list with zeros list1.extend([0] * (max_length - len(list1))) list2.extend([0] * (max_length - len(list2))) # Multiply corresponding elements of the lists result = [list1[i] * list2[i] for i in range(max_length)] return result"},{"question":"Create a function that takes a list of numbers and returns the most frequent number in the list. If there are multiple most frequent numbers, return all of them in a list. If the list is empty, return an empty list.","solution":"from collections import Counter def most_frequent(numbers): Returns the most frequent number(s) in the list. If there are multiple numbers with the same highest frequency, returns all of them in a list. If the input list is empty, returns an empty list. :param numbers: List of integers :return: List of most frequent integer(s) if not numbers: return [] number_counts = Counter(numbers) max_count = max(number_counts.values()) most_frequent_numbers = [num for num, count in number_counts.items() if count == max_count] return most_frequent_numbers"},{"question":"Create a function that takes two lists and returns a new list containing only the elements from the first list that are also present in the second list.","solution":"def intersect_lists(list1, list2): Returns a new list containing only the elements from list1 that are also present in list2. return [element for element in list1 if element in list2]"},{"question":"Create a function that takes string as an input and returns true if the string represents a valid floating-point number and false otherwise. How should I approach this task?","solution":"def is_valid_float(string): Returns True if the string represents a valid floating-point number, False otherwise. try: float(string) return True except ValueError: return False"},{"question":"Create a function that converts a given string to title case. Title case means the first letter of each word is capitalized, and the rest are in lowercase. For example, 'hello world' would become 'Hello World'. Make sure your function handles multiple spaces between words correctly.","solution":"def to_title_case(s): Converts a given string to title case. Title case means the first letter of each word is capitalized, and the rest are in lowercase. Multiple spaces between words are handled correctly. # Split the string into words, ignoring multiple spaces words = s.split() # Capitalize the first letter of each word and make the rest lowercase title_cased_words = [word.capitalize() for word in words] # Join the words with a single space title_cased_string = ' '.join(title_cased_words) return title_cased_string"},{"question":"Create a function that takes two integer arrays as input and merges them into a single sorted array. The function should remove any duplicate elements in the merged array.","solution":"def merge_and_sort_arrays(arr1, arr2): Merges two integer arrays into a single sorted array without duplicates. :param arr1: List[int] - First integer array :param arr2: List[int] - Second integer array :return: List[int] - Merged and sorted array without duplicates combined_set = set(arr1).union(set(arr2)) sorted_list = sorted(combined_set) return sorted_list"},{"question":"Create a function that calculates the factorial of a number. The function should be able to handle inputs up to 20. Factorial of a non-negative integer n is the product of all positive integers less than or equal to n. For example, the factorial of 5 (5!) is 5 * 4 * 3 * 2 * 1 = 120.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. The function can handle inputs up to 20. Parameters: n (int): A non-negative integer. Returns: int: The factorial of n. if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Create a function that takes an integer \`n\` and returns the product of all the even numbers from 2 to \`n\`. If \`n\` is less than 2, the function should return 0.","solution":"def product_of_evens(n): Returns the product of all even numbers from 2 to n. If n is less than 2, returns 0. if n < 2: return 0 product = 1 has_evens = False for i in range(2, n+1): if i % 2 == 0: product *= i has_evens = True return product if has_evens else 0"},{"question":"Create a function that takes the input as a list of elements. If the element is a string, reverse it; otherwise, convert it to a string and then reverse it.","solution":"def reverse_elements(elements): Takes a list of elements. If the element is a string, reverse it; otherwise, convert it to a string and then reverse it. return [str(element)[::-1] for element in elements]"},{"question":"Create a function that determines the second smallest number in an array. If the array has fewer than two unique elements, the function should return None.","solution":"def second_smallest(nums): Returns the second smallest unique number in the array, or None if there are fewer than two unique numbers. unique_nums = sorted(set(nums)) if len(unique_nums) < 2: return None return unique_nums[1]"},{"question":"Create a function that takes as an argument a list of words and returns a new list of words that are palindromes.","solution":"def find_palindromes(words): Returns a list of words that are palindromes from the given list. :param words: List of words :return: List of palindrome words return [word for word in words if word == word[::-1]]"},{"question":"Create a function that takes a string as an argument and returns a new string where the characters in the string are shuffled randomly, using the Fisher-Yates shuffle algorithm.","solution":"import random def shuffle_string(s): Returns a string where the characters are shuffled randomly using the Fisher-Yates shuffle algorithm. s_list = list(s) n = len(s_list) for i in range(n-1, 0, -1): j = random.randint(0, i) s_list[i], s_list[j] = s_list[j], s_list[i] return ''.join(s_list)"},{"question":"Create a function that takes two arguments, an integer \`n\` and a string \`s\`, and returns \`s\` repeated \`n\` times.","solution":"def repeat_string(n, s): Repeats the string s, n times. Parameters: n (int): The number of times to repeat the string. s (string): The string to be repeated. Returns: string: The string repeated n times. return s * n"},{"question":"Create a function that determines whether a number is even or odd without using any conditional statements or arithmetic operations (\`%\`, \`/\`, \`+\`, \`-\`), and without using any bitwise operations that involve shifting or masks (such as \`&\`, \`|\`, \`^\`, \`~\`, \`>>\`, \`<<\`). How can we achieve this using only basic arithmetic operations?","solution":"def is_even(n): # Using only basic arithmetic operations if not isinstance(n, int): raise ValueError(\\"The input must be an integer.\\") if n & 1 == 0: return True else: return False"},{"question":"Create a function that takes two strings: a sentence and a substring. The function should return the number of times the substring appears in the sentence, ignoring case sensitivity and considering overlapping occurrences.","solution":"def count_substring(sentence, substring): Returns the number of times the substring appears in the sentence, ignoring case sensitivity and considering overlapping occurrences. sentence = sentence.lower() substring = substring.lower() count = start = 0 while True: start = sentence.find(substring, start) + 1 if start > 0: count += 1 else: return count"},{"question":"Create a function that accepts two parameters, and if both are integers and positive, print an array of length 10. Populate this array such that the first value is 1, and each subsequent value is the result of adding the previous value and a random integer between 1 and 10 (inclusive). The function should accept two parameters: the count and the seed for the random number generator.","solution":"import random def generate_random_array(count, seed): Generate an array of length \`count\`. The first value is 1, and each subsequent value is the sum of the previous value and a random integer between 1 and 10, inclusive. The randomness is determined by \`seed\`. Parameters: - count (int): Length of the array to generate. - seed (int): Seed for the random number generator. Returns: - list: Generated array if input parameters are valid, else an empty list. if not isinstance(count, int) or not isinstance(seed, int) or count <= 0: return [] random.seed(seed) result = [1] for _ in range(count - 1): result.append(result[-1] + random.randint(1, 10)) return result"},{"question":"Create a function that finds the sum of a list of numbers using the recursive approach.","solution":"def recursive_sum(numbers): Returns the sum of a list of numbers using recursion. Parameters: numbers (list): A list of numbers Returns: int/float: Sum of the numbers if not numbers: return 0 return numbers[0] + recursive_sum(numbers[1:])"},{"question":"Create a function that takes an integer n and outputs an array with all the integers in the range [0, n] where the integer can be expressed as the sum of two squares. To implement this, utilize the established theorems that relate to expressing integers as the sum of two squares.","solution":"import math def is_sum_of_two_squares(n): Returns True if the integer n can be expressed as the sum of two squares. for i in range(int(math.sqrt(n)) + 1): j = math.sqrt(n - i * i) if j == int(j): return True return False def sum_of_two_squares_range(n): Returns a list of integers in the range [0, n] that can be expressed as the sum of two squares. result = [] for i in range(n + 1): if is_sum_of_two_squares(i): result.append(i) return result"},{"question":"Create a function that takes a list of strings and returns a new list where each string is concatenated with its reversed version. For example, if the input list is \`['hello', 'world']\`, the output should be \`['helloworld', 'worldhello']\`.","solution":"def concatenate_with_reverse(strings): Returns a new list where each string in the input list is concatenated with its reversed version. Args: strings (list of str): List of strings to be concatenated with their reversed versions. Returns: list of str: List of concatenated strings. return [s + s[::-1] for s in strings]"},{"question":"Create a function that takes an array of integers and returns an array of the same length where each element is the sum of the digits of the corresponding element in the input array. For example, if the input array is [123, 45, 678], the output array should be [6, 9, 21], since 1+2+3=6, 4+5=9, and 6+7+8=21.","solution":"def sum_of_digits_array(arr): Takes an array of integers and returns an array where each element is the sum of the digits of the corresponding element in the input array. def sum_of_digits(n): return sum(int(digit) for digit in str(n)) return [sum_of_digits(num) for num in arr]"},{"question":"Create a function that checks if the input is a palindrome. A palindrome is a word, number, sequence, or other types of characters that reads the same forward and backward.","solution":"def is_palindrome(s): Returns True if the input string s is a palindrome, False otherwise. # Normalize the string by removing non-alphanumeric characters and converting to lower case. normalized_str = ''.join(char.lower() for char in s if char.isalnum()) # Check if the normalized string reads the same forward and backward. return normalized_str == normalized_str[::-1]"},{"question":"Create a function that takes in a string and returns its reverse. The function should handle special characters and numbers.","solution":"def reverse_string(s): Returns the reverse of the input string s. return s[::-1]"},{"question":"Create a function that generates a list of prime numbers up to a given limit. The function should be efficient and return the list of prime numbers in ascending order. For example, calling this function with the limit 30 should return \`[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\`.","solution":"def generate_primes(limit): Generates a list of prime numbers up to a given limit. Args: limit (int): The upper bound for prime numbers to be generated. Returns: list: A list of prime numbers in ascending order. if limit < 2: return [] primes = [] sieve = [True] * (limit + 1) sieve[0] = sieve[1] = False # 0 and 1 are not primes for num in range(2, limit + 1): if sieve[num]: primes.append(num) for multiple in range(num*num, limit + 1, num): sieve[multiple] = False return primes"},{"question":"Create a function that takes a string and returns the length of the longest palindrome prefix of the string. For example, for the input string \\"ababa\\", the function should return 5 because the entire string is a palindrome. For another input, \\"abcba\\", the function should return 3 (the substring \\"abcba\\"). For strings like \\"racecar\\", \\"racecar\\" is a palindrome, so it returns the whole length. For \\"madam\\", it should return 5 since \\"madam\\" is a palindrome.","solution":"def longest_palindrome_prefix(s): Returns the length of the longest palindrome prefix of the string s. :param s: Input string :return: Length of the longest palindrome prefix def is_palindrome(sub): return sub == sub[::-1] for i in range(len(s), 0, -1): if is_palindrome(s[:i]): return i return 0"},{"question":"Create a function that takes a list of strings. The function should return the longest palindrome in the list of strings. If there are multiple palindromes with the same maximum length, return the first one encountered. If the list is empty or contains no palindromes, return an empty string.","solution":"def longest_palindrome(strings): Returns the longest palindrome in the list of strings. If there are multiple palindromes with the same maximum length, return the first one encountered. If there are no palindromes, return an empty string. :param strings: List of strings :return: The longest palindrome string or an empty string if no palindromes are found def is_palindrome(s): return s == s[::-1] longest = \\"\\" for s in strings: if is_palindrome(s) and len(s) > len(longest): longest = s return longest"},{"question":"Create a function that checks if a given string is a palindrome. A palindrome is a word, phrase, number, or other sequences of characters which reads the same backward as forward. Here is the function signature: def is_palindrome(s): # Code here","solution":"def is_palindrome(s): Checks if the given string is a palindrome. Args: s (str): The string to check. Returns: bool: True if the string is a palindrome, False otherwise. # Remove non-alphanumeric characters and convert to lowercase cleaned_s = ''.join(char.lower() for char in s if char.isalnum()) # Check if the cleaned string is equal to its reverse return cleaned_s == cleaned_s[::-1]"},{"question":"Create a function that takes in the coordinates of two points, A and B, and returns the distance between them. The distance should be calculated using the Euclidean distance formula. The function should return the distance as a floating-point number.","solution":"import math def euclidean_distance(point_a, point_b): Returns the Euclidean distance between two points A and B. Parameters: point_a (tuple): Coordinates of point A (x1, y1). point_b (tuple): Coordinates of point B (x2, y2). Returns: float: The Euclidean distance between point A and point B. x1, y1 = point_a x2, y2 = point_b distance = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) return distance"},{"question":"Create a function that takes in a list of indices and returns a list of unique values [x, y, z, ...] for which each of the lists are not empty: x = [0], y = [3], z = [4]. Note: The indices can only give integer values and are not sorted.","solution":"def get_unique_indices(indices): Takes a list of indices and returns a list of unique values for non-empty lists. Parameters: indices (list): A list of integer indices. Returns: list: A list of unique values. return list(set(indices))"},{"question":"Create a function that accepts any number of keyword arguments and prints each key-value pair to the console. The function should also include the ability to filter out any pairs where the value is an empty string or \`None\`.","solution":"def print_filtered_kwargs(**kwargs): Prints each key-value pair from kwargs where the value is not an empty string or None. for key, value in kwargs.items(): if value is not None and value != \\"\\": print(f\\"{key}: {value}\\")"},{"question":"Create a function that reverses each string in the list, but keep the order of the strings in the list the same.","solution":"def reverse_strings_in_list(strings): Reverses each string in the given list, but keeps the order of the list the same. :param strings: List[str] - A list of strings :return: List[str] - A list with each string reversed return [s[::-1] for s in strings]"},{"question":"Create a function that identifies and returns all the prime numbers less than a given limit.","solution":"def primes_less_than(limit): Returns a list of all prime numbers less than the given limit. if limit <= 2: return [] primes = [] for num in range(2, limit): is_prime = True for i in range(2, int(num**0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Create a function that takes in two lists of integers and returns a sorted list of all unique elements that appear in exactly one of the input lists.","solution":"def unique_elements(list1, list2): Takes two lists of integers and returns a sorted list of unique elements that appear in exactly one of the input lists. set1 = set(list1) set2 = set(list2) unique_in_list1 = set1.difference(set2) unique_in_list2 = set2.difference(set1) result = list(unique_in_list1.union(unique_in_list2)) result.sort() return result"},{"question":"Create a function that takes an integer number and returns a new string where the digits are sorted in descending order. If the number is negative, return \\"Invalid Input\\". For example, if the input is \`-485\`, the function should return \`\\"854\\"\`.","solution":"def sort_digits_desc(num): Takes an integer number and returns a new string where the digits are sorted in descending order. If the number is negative, returns \\"Invalid Input\\". if num < 0: return \\"Invalid Input\\" # Convert the number to a string, sort the digits in descending order and join them back return ''.join(sorted(str(num), reverse=True))"},{"question":"Create a function that returns the nth Fibonacci number using an iterative approach. The function should be efficient and handle large values of n without using recursion.","solution":"def fibonacci(n): Returns the nth Fibonacci number using an iterative approach. :param n: The position in the Fibonacci sequence. :type n: int :return: The nth Fibonacci number. :rtype: int if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Create a function that takes an integer as input and returns a list containing the individual digits of the integer. For example, if the input is 12345, the output should be [1, 2, 3, 4, 5].","solution":"def digitize(n): Returns a list containing the individual digits of the integer n. return [int(digit) for digit in str(n)]"},{"question":"Create a function that accepts a string, checks if it is a palindrome or not, and if it is, reverses it.","solution":"def check_and_reverse_palindrome(s): Checks if the given string is a palindrome. If it is, returns the reversed string. Otherwise, returns the original string indicating it is not a palindrome. Parameters: s (str): the input string Returns: str: the reversed string if input is a palindrome, otherwise the original string if s == s[::-1]: return s[::-1] return s"},{"question":"Create a function that takes an integer as an input and returns its factorial. If the input is negative, the function should return \\"Invalid input\\". If the input is 0, the function should return 1.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. Returns \\"Invalid input\\" if n is negative. if n < 0: return \\"Invalid input\\" elif n == 0: return 1 else: result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Create a function that takes in two strings of text as input and returns the number of unique common words between the two strings.","solution":"def common_unique_words(str1, str2): Returns the number of unique common words between two strings. # Split strings into words and convert to sets to get unique words words_set1 = set(str1.split()) words_set2 = set(str2.split()) # Find the intersection of both sets to get common unique words common_words = words_set1.intersection(words_set2) # Return the count of common unique words return len(common_words)"},{"question":"Create a function that takes an integer \`n\` as an argument and returns a list of all prime numbers less than \`n\` using the Sieve of Eratosthenes algorithm. The function should be efficient and handle large values of \`n\`.","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers less than \`n\`. sieve = [True] * n sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n, start): sieve[multiple] = False return [num for num, is_prime in enumerate(sieve) if is_prime]"},{"question":"Create a function that takes two integers as arguments and returns the greater of the two. If both integers are the same, return \\"Equal\\".","solution":"def greater_of_two(a, b): Returns the greater of two integers a and b. If both integers are the same, returns 'Equal'. if a > b: return a elif b > a: return b else: return \\"Equal\\""},{"question":"Create a function that determines whether a given list of numbers is sorted in ascending order.","solution":"def is_sorted(lst): Determines whether the given list of numbers is sorted in ascending order. Parameters: lst (list): List of numbers to be checked. Returns: bool: True if the list is sorted in ascending order, False otherwise. return all(lst[i] <= lst[i+1] for i in range(len(lst) - 1))"},{"question":"Create a function that takes two strings, s1 and s2, as parameters and checks if they are anagrams, meaning they contain the same characters in any order.","solution":"def are_anagrams(s1, s2): Check if two strings are anagrams of each other. Args: s1 (str): First string. s2 (str): Second string. Returns: bool: True if the strings are anagrams, False otherwise. return sorted(s1) == sorted(s2)"},{"question":"Create a function that takes a list of integers as input and returns a new list where each integer is multiplied by a factor of 2.","solution":"def multiply_by_two(numbers): Returns a new list where each integer from the input list is multiplied by 2. Parameters: numbers (list): A list of integers Returns: list: A list of integers, each multiplied by 2 return [number * 2 for number in numbers]"},{"question":"Create a function that takes a string as input and returns a string where each word is capitalized and the first letter after any non-letter character is also capitalized.","solution":"def capitalize_words(s): Returns a new string where each word is capitalized and the first letter after any non-letter character is also capitalized. result = [] capitalize_next = True for char in s: if not char.isalpha(): capitalize_next = True result.append(char) else: if capitalize_next: result.append(char.upper()) capitalize_next = False else: result.append(char.lower()) return ''.join(result)"},{"question":"Create a function that takes in three integers as parameters and returns the greatest common divisor (GCD) of these three integers.","solution":"import math def gcd_of_three(a, b, c): Returns the greatest common divisor (GCD) of three integers a, b, and c. return math.gcd(math.gcd(a, b), c)"},{"question":"Create a function that converts a binary string to a decimal number.","solution":"def binary_to_decimal(binary_str): Converts a binary string to a decimal number. Parameters: binary_str (str): A string representing a binary number. Returns: int: The decimal representation of the binary number. return int(binary_str, 2)"},{"question":"Create a function that counts the number of ways a target sum can be achieved using a list of integers. The list may contain non-unique positive integers. You can use each element of the list as many times as needed.","solution":"def count_ways(nums, target): Given a list of integers and a target sum, returns the number of ways the target sum can be achieved using elements from the list. Elements can be used multiple times. # Initialize a list to store the number of ways to achieve each sum ways = [0] * (target + 1) # There's exactly one way to get a total of 0: Use 0 elements. ways[0] = 1 # Iterate through all possible sums from 1 to target for i in range(1, target + 1): for num in nums: if i >= num: ways[i] += ways[i - num] return ways[target]"},{"question":"Create a function that calculates and returns the sum of the squares of the first n natural numbers. The function should be named \`sum_of_squares\` and take a single argument \`n\`. The sum of the squares is calculated as (1^2 + 2^2 + 3^2 + ldots + n^2). Use this formula: ( frac{n(n + 1)(2n + 1)}{6} ).","solution":"def sum_of_squares(n): Returns the sum of the squares of the first n natural numbers. The sum of the squares is calculated as: 1^2 + 2^2 + 3^2 + ... + n^2 Args: n (int): The number of natural numbers to sum the squares of. Returns: int: The sum of the squares of the first n natural numbers. return n * (n + 1) * (2 * n + 1) // 6"},{"question":"Create a function that takes a list of numbers as input and returns a list with all duplicates removed while maintaining the original order of the list.","solution":"def remove_duplicates(nums): Returns a list with duplicates removed while maintaining original order. seen = set() result = [] for num in nums: if num not in seen: seen.add(num) result.append(num) return result"},{"question":"Create a function that takes a list of integers and returns a list of their squares. Can you provide an example of how to use this function with a specific list?","solution":"def square_list(numbers): Returns a list containing the squares of the integers in the input list. :param numbers: List of integers :return: List of integers where each integer is the square of the corresponding integer in the input list return [number ** 2 for number in numbers] # Example usage: # input_list = [1, 2, 3, 4, 5] # result = square_list(input_list) # print(result) # Output: [1, 4, 9, 16, 25]"},{"question":"Create a function that takes an array and returns the first element of the array if the array is not empty. If the array is empty, the function should return a default value of \\"No elements\\".","solution":"def get_first_element(arr): Returns the first element of the array if it is not empty. If the array is empty, returns \\"No elements\\". if arr: return arr[0] else: return \\"No elements\\""},{"question":"Create a function that takes a sentence and returns the frequency of each word in the sentence. The function should handle punctuation and should treat \\"word\\" as case-insensitive. You should also return the word with the highest frequency and its count.","solution":"import re from collections import Counter def word_frequency(sentence): Returns a dictionary with the frequency of each word in the sentence. Also returns the word with the highest frequency and its count. # Normalize the sentence: remove punctuation and convert to lowercase sentence = re.sub(r'[^ws]', '', sentence).lower() # Split the sentence into words words = sentence.split() # Get the frequency count of each word freq = Counter(words) # Find the word with the highest frequency if freq: highest_freq_word, highest_freq_count = freq.most_common(1)[0] else: highest_freq_word, highest_freq_count = None, None return freq, (highest_freq_word, highest_freq_count)"},{"question":"Create a function that takes a list in python and sorts it in ascending order without using the built-in \`sort()\` method or \`sorted()\` function. Implement your own sorting algorithm. You are allowed to use any comparison and swapping techniques.","solution":"def custom_sort(arr): Sorts the given list in ascending order using bubble sort algorithm. Args: arr (list): A list of elements to be sorted. Returns: list: A new list sorted in ascending order. n = len(arr) # Bubble Sort algorithm for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: # Swap if the element found is greater # than the next element arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Create a function that takes an integer as an argument and returns the factorial of the integer, but it should use recursion instead of loops.","solution":"def factorial(n): Returns the factorial of a non-negative integer n using recursion. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") elif n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Create a function that generates a list of prime numbers up to a given limit using the Sieve of Eratosthenes algorithm. Then, provide a brief explanation of how the algorithm works and how the function is implemented.","solution":"def sieve_of_eratosthenes(limit): Generates a list of prime numbers up to a given limit using the Sieve of Eratosthenes algorithm. Parameters: limit (int): The upper boundary of the range to find primes within, inclusive. Returns: list: A list of prime numbers up to the given limit. if limit < 2: return [] # Create a boolean array \\"prime[0..n]\\" and initialize all entries as true. # A value in prime[i] will finally be false if i is Not a prime, else true. prime = [True for _ in range(limit+1)] p = 2 while p * p <= limit: # If prime[p] is not changed, then it is a prime if prime[p]: # Updating all multiples of p to not prime for i in range(p * p, limit+1, p): prime[i] = False p += 1 # Collecting all prime numbers prime_numbers = [p for p in range(2, limit+1) if prime[p]] return prime_numbers"},{"question":"Create a function that takes in an array of integers and returns the most frequently occurring number.","solution":"from collections import Counter def most_frequent_number(arr): Returns the most frequently occurring number in the array. If there are multiple numbers with the same highest frequency, returns any one of them. if not arr: return None count = Counter(arr) most_common = count.most_common(1)[0] return most_common[0]"},{"question":"Create a function that returns the nth Fibonacci number. The function should be able to handle large values of n efficiently. One way to do this is to use memoization to store previously computed Fibonacci numbers. What is memoization and how can it be applied to this function?","solution":"def fibonacci(n, memo={}): Returns the nth Fibonacci number using memoization. if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo) return memo[n]"},{"question":"Create a function that takes two strictly increasing lists of positive integers. It should return the smallest integer that is common to both lists. The lists may contain duplicates, but the common integers should only be counted once.","solution":"def find_smallest_common_element(list1, list2): Finds the smallest integer that is common to both strictly increasing lists. # Convert lists to sets to remove duplicates and enable set operations set1, set2 = set(list1), set(list2) # Find the intersection of both sets common_elements = set1.intersection(set2) # Return the smallest element from the intersection set return min(common_elements) if common_elements else None"},{"question":"Create a function that checks if a given number is prime. You must also provide test cases for your function.","solution":"def is_prime(n): Checks if a given number n is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True"},{"question":"Create a function that takes an array of integers and returns a new array of length n+1 where the last element is always the sum of the previous elements in the array.","solution":"def append_sum(arr): Returns a new array which is the same as the input array but with an additional element which is the sum of all the elements in the input array. Parameters: arr (list of int): Input array of integers. Returns: list of int: New array with an additional element at the end which is the sum of the input array elements. total_sum = sum(arr) new_array = arr + [total_sum] return new_array"},{"question":"Create a function that takes in a list of boolean values and returns the number of Ture values. Use Python.","solution":"def count_true(boolean_list): Returns the number of True values in the boolean_list. Parameters: boolean_list (list): A list of boolean values. Returns: int: The number of True values in the list. return boolean_list.count(True)"},{"question":"Create a function that takes a single string as input and returns a new string where every character in the input string is converted to uppercase. The function should not use any built-in string methods like upper() or to_uppercase(). Instead, you should implement the conversion manually using ASCII values.","solution":"def to_uppercase_manual(s): Converts each character in the input string to uppercase without using built-in string methods. uppercase_string = \\"\\" for char in s: # Check if the char is in the range of 'a' to 'z' if 'a' <= char <= 'z': # Convert to uppercase by subtracting 32 uppercase_string += chr(ord(char) - 32) else: # Append the character as is if it is not lowercase uppercase_string += char return uppercase_string"},{"question":"Create a function that takes a list of integers as input and returns the maximum sum of any sub-array of the array. This is a famous problem known as Kadane's Algorithm.","solution":"def max_sub_array(nums): Returns the maximum sum of any sub-array of the input list using Kadane's Algorithm. if not nums: raise ValueError(\\"The input list cannot be empty\\") max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that takes an integer as input and returns the integer reversed. However, if the integer contains any even digits, the function should return \\"Error: Contains even digits\\". If the integer contains only odd digits, the function should return the reversed integer.","solution":"def reverse_if_odd_digits_only(n): Returns the reversed integer if it contains only odd digits. Otherwise, returns 'Error: Contains even digits'. str_n = str(n) # Check for even digits for ch in str_n: if int(ch) % 2 == 0: return \\"Error: Contains even digits\\" # Reverse the integer reversed_str_n = str_n[::-1] return int(reversed_str_n)"},{"question":"Create a function that takes an integer as input and returns the product of all the digits in the integer. If the integer has any non-digit characters, return -1. For example, the product of all digits in the number 123 is 6 (1*2*3).","solution":"def product_of_digits(n): Returns the product of all the digits in the integer n. If the integer has any non-digit characters, returns -1. # Convert the number to string to check each character str_n = str(n) # Initialize product to 1 product = 1 # Iterate through each character in the string representation of the number for char in str_n: if char.isdigit(): product *= int(char) else: return -1 return product"},{"question":"Create a function that takes an array of integers and returns the integer that has the highest frequency in the array. If there are multiple integers with the same highest frequency, return the smallest one. If the array is empty, return -1.","solution":"from collections import Counter def highest_freq_integer(arr): Returns the integer with the highest frequency in the array. If there is a tie, returns the smallest integer. If the array is empty, returns -1. if not arr: return -1 # Count the frequency of each integer in the array count = Counter(arr) # Find the integer with the highest frequency max_freq = max(count.values()) # Find all integers with the highest frequency candidates = [k for k, v in count.items() if v == max_freq] # Return the smallest integer among the candidates return min(candidates)"},{"question":"Create a function that draws a zigzag pattern. The pattern should be created using the \\"#\\" symbol and have three levels of depth.","solution":"def draw_zigzag(height): Draws a zigzag pattern with three levels of depth. The pattern is created using the \\"#\\" symbol. if height < 3: return \\"\\" pattern = [] for i in range(height): if i % 3 == 0: pattern.append(\\"# \\") elif i % 3 == 1: pattern.append(\\" # \\") else: pattern.append(\\" # \\") return \\"n\\".join(pattern)"},{"question":"Create a function that returns a list of all prime factors of a given number. Prime factors are the prime numbers that multiply together to give the original number. For example, the prime factors of 12 are 2, 2, and 3 since 2 * 2 * 3 = 12.","solution":"def prime_factors(n): Returns a list of all prime factors of the given number n. factors = [] # Check for number of 2s that divide n while n % 2 == 0: factors.append(2) n = n // 2 # n must be odd at this point, start checking for odd factors for i in range(3, int(n**0.5) + 1, 2): while n % i == 0: factors.append(i) n = n // i # If n is still a prime number and greater than 2 if n > 2: factors.append(n) return factors"},{"question":"Create a function that takes a string of space-separated integers and returns a string that represents the sum of these numbers sequentially.","solution":"def sequential_sum(input_string): Takes a string of space-separated integers and returns a string that represents the sum of these numbers sequentially. numbers = list(map(int, input_string.split())) result = [] running_sum = 0 for number in numbers: running_sum += number result.append(str(running_sum)) return ' '.join(result)"},{"question":"Create a function that takes in an integer and returns a string that explains whether that number is \\"Even\\", \\"Odd\\", \\"Positive\\", \\"Negative\\", or \\"Zero\\". You can use any programming language of your choice.","solution":"def describe_number(n: int) -> str: Returns a string that describes whether the number is \\"Even\\", \\"Odd\\", \\"Positive\\", \\"Negative\\", or \\"Zero\\". if n == 0: return \\"Zero\\" elif n > 0: if n % 2 == 0: return \\"Positive Even\\" else: return \\"Positive Odd\\" else: if n % 2 == 0: return \\"Negative Even\\" else: return \\"Negative Odd\\""},{"question":"Create a function that takes an array of integers as input and returns an array of strings where each string is the description of the count of consecutive identical elements in the input array. For example, if the input is \`[1, 1, 2, 2, 3, 1, 1]\`, the output should be \`['2 x 1', '2 x 2', '1 x 3', '2 x 1']\`.","solution":"def count_consecutive_elements(arr): Takes an array of integers as input and returns an array of strings describing the count of consecutive identical elements. Parameters: arr (list of int): Input array of integers. Returns: list of str: Descriptions of consecutive identical elements. if not arr: return [] result = [] count = 1 current = arr[0] for i in range(1, len(arr)): if arr[i] == current: count += 1 else: result.append(f\\"{count} x {current}\\") current = arr[i] count = 1 result.append(f\\"{count} x {current}\\") return result"},{"question":"Create a function that takes a single string argument and returns its length as an integer.","solution":"def string_length(s): Returns the length of the string s. return len(s)"},{"question":"Create a function that finds the first missing positive integer in an array of integers. The array is not sorted and can contain duplicates. The function should return the smallest positive integer that does not appear in the array.","solution":"def first_missing_positive(nums): Returns the first missing positive integer in an unsorted list of integers. if not nums: return 1 nums_set = set(nums) smallest_positive = 1 while smallest_positive in nums_set: smallest_positive += 1 return smallest_positive"},{"question":"Create a function that calculates the factorial of a given number n using recursion. Also, handle the scenario where the input is not a non-negative integer by raising an appropriate exception. If the input is a very large number, provide a mechanism to handle it gracefully (e.g., by using an arbitrary-precision arithmetic library if available in your language).","solution":"import math def factorial(n): Returns the factorial of a given non-negative integer n using recursion. If n is not a non-negative integer, raises a ValueError. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0: return 1 else: return n * factorial(n - 1)"},{"question":"Create a function that checks if a given string contains the substring \\"hello\\". If it does, return \\"Hello, World!\\", otherwise return \\"Goodbye, World!\\".","solution":"def check_hello_substring(s): Checks if the input string contains the substring 'hello'. If it does, return 'Hello, World!', otherwise return 'Goodbye, World!'. if 'hello' in s: return \\"Hello, World!\\" else: return \\"Goodbye, World!\\""},{"question":"Create a function that takes in two strings and returns the index where the second string (B) matches the beginning of the first string (A). If there is no match, return -1. For example, matchString(\\"hello world\\", \\"world\\") should return 6.","solution":"def matchString(A, B): Returns the index where second string (B) matches the beginning of the first string (A). If there is no match, returns -1. Parameters: A (str): The string in which to search. B (str): The string to search for in A. Returns: int: The index of the match or -1 if no match is found. index = A.find(B) return index if index != -1 else -1"},{"question":"Create a function that takes in a string from user input and checks if all characters of the string are unique i.e., no two characters in the string are the same. The function should return \`True\` if all characters are unique, and \`False\` otherwise.","solution":"def is_unique(string): Checks if all characters in the given string are unique. :param string: The string to check. :return: True if all characters are unique, False otherwise. return len(string) == len(set(string))"},{"question":"Create a function that takes a float number as input and returns the closest integer using Python's built-in round function. How would you handle cases where the float is exactly halfway between two integers?","solution":"def closest_integer(num): Returns the closest integer to the given float number. If the number is exactly halfway between two integers, it rounds to the nearest even integer. return round(num)"},{"question":"Create a function that finds all the prime numbers in a given list of integers. A prime number is an integer greater than 1 that has no positive divisors other than 1 and itself.","solution":"def is_prime(n): Determines if a given number n is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def find_primes(arr): Returns a list of all prime numbers in the given list arr. return [x for x in arr if is_prime(x)]"},{"question":"Create a function that will reverse a given string in Go. Provide a detailed explanation of the code.","solution":"def reverse_string(s): Reverses the given string s and returns the reversed string. return s[::-1]"},{"question":"Create a function that takes two lists, \`list1\` and \`list2\`, as input and returns a list containing the intersection of the two lists. The intersection should only include unique elements present in both lists. Additionally, the returned list should be sorted in ascending order.","solution":"def intersection(list1, list2): Returns a sorted list containing the unique intersection of the two input lists. # Find unique elements present in both lists intersected_set = set(list1).intersection(set(list2)) # Convert to list and sort the elements in ascending order sorted_intersection = sorted(intersected_set) return sorted_intersection"},{"question":"Create a function that takes as input two strings \`str1\` and \`str2\`. The function should return a new string that is the concatenation of \`str1\` and the reverse of \`str2\`. If \`str1\` is empty, it should return the reverse of \`str2\`.","solution":"def concat_with_reverse(str1, str2): Returns a concatenation of str1 and the reverse of str2. If str1 is empty, returns the reverse of str2. return str1 + str2[::-1]"},{"question":"Create a function that takes a list of numbers as input and returns a new list containing the same numbers, but with each number multiplied by 2.","solution":"def double_numbers(numbers): Takes a list of numbers and returns a new list with each number doubled. Args: numbers (list): A list of numbers. Returns: list: A new list with each number multiplied by 2. return [num * 2 for num in numbers]"},{"question":"Create a function that generates and prints all numbers from 1 to n, where n is a positive integer input by the user. The function should not use any loops. Instead, use recursion to achieve this.","solution":"def print_numbers(n): Recursively prints numbers from 1 to n def _print_recursive(current, target): if current > target: return print(current) _print_recursive(current + 1, target) if n > 0: _print_recursive(1, n) else: raise ValueError(\\"Input must be a positive integer\\")"},{"question":"Create a function that takes a string and calculates its numerical value by treating each character as its ASCII value and then summing these values. Write a Python implementation of this function and discuss its time complexity.","solution":"def string_value(s): Takes a string and calculates its numerical value by summing the ASCII values of its characters. :param s: Input string :return: Sum of ASCII values of the characters in the string return sum(ord(char) for char in s) # Time Complexity: O(n), where n is the length of the string, # since we need to iterate through each character in the string exactly once."},{"question":"Create a function that calculates the area of a circle given the radius. What language would you choose and why?","solution":"import math def calculate_circle_area(radius): Calculates the area of a circle given the radius. Parameters: radius (float): The radius of the circle Returns: float: The area of the circle if radius < 0: raise ValueError(\\"Radius cannot be negative\\") return math.pi * (radius ** 2)"},{"question":"Create a function that accepts an array of integers, calculates the sum of the values, and then provides an output that includes the sum and the average of the array.","solution":"def sum_and_average(arr): Returns a tuple containing the sum and average of the array of integers. :param arr: List of integers :return: Tuple (sum, average) if not arr: return (0, 0.0) total_sum = sum(arr) average = total_sum / len(arr) return (total_sum, average)"},{"question":"Create a function that checks if a list is sorted in increasing order. If the list is sorted in increasing order, the function should return \`True\`; otherwise, return \`False\`. Additionally, provide a piece of code that demonstrates the usage and testing of the function with different inputs, including edge cases.","solution":"def is_sorted_increasing(lst): Returns True if the list is sorted in increasing order, else returns False. return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))"},{"question":"Create a function that takes in a string as a parameter and returns a list of words from the string, where each word has been reversed. The function should ignore any punctuations and numbers in the string. A word is defined as any sequence of alphanumeric characters.","solution":"import re def reverse_words(input_str): Takes an input string, removes punctuation and numbers, and returns a list of words where each word has been reversed. Args: input_str (str): Input string containing words. Returns: List[str]: List of reversed words. # Remove punctuations and numbers, and split by any whitespace cleaned_str = re.sub(r'[^a-zA-Zs]', '', input_str) words = cleaned_str.split() # Reverse each word and return the list of reversed words reversed_words = [word[::-1] for word in words] return reversed_words"},{"question":"Create a function that replaces all occurrences of a specific substring within a given string with another substring in Python. You should also update the function to handle overlapping occurrences as well.","solution":"def replace_substring(main_string, old_sub, new_sub): Replaces all occurrences of a specific substring within a given string with another substring, handling overlapping occurrences as well. if not old_sub: raise ValueError(\\"The substring to be replaced cannot be empty.\\") result = [] i = 0 while i < len(main_string): # Check if the substring starting from the current index matches old_sub if main_string[i:i+len(old_sub)] == old_sub: result.append(new_sub) i += len(old_sub) else: result.append(main_string[i]) i += 1 return ''.join(result)"},{"question":"Create a function that determines whether or not a given number is prime. A prime number has no divisors other than 1 and itself. The function should take an integer as input and return a boolean indicating whether the number is prime or not.","solution":"def is_prime(n): Determine if the given number n is prime. A prime number has no divisors other than 1 and itself. :param n: The number to check. :return: True if n is prime, else False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True"},{"question":"Create a function that takes a non-empty list of integers and returns the most commonly occurrence value.","solution":"from collections import Counter def most_common_occurrence(lst): Returns the most commonly occurring value in the list. :param lst: List of integers :return: The integer that occurs most commonly in the list if not lst: raise ValueError(\\"List cannot be empty\\") count = Counter(lst) return count.most_common(1)[0][0]"},{"question":"Create a function that takes an array of integers and returns the length of the longest subsequence.","solution":"def longest_subsequence_length(arr): Returns the length of the longest increasing subsequence in the given array. if not arr: return 0 # Initialize dp array where each element is 1 dp = [1] * len(arr) # Fill dp array using dynamic programming approach for i in range(1, len(arr)): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) # Example usage # print(longest_subsequence_length([10, 9, 2, 5, 3, 7, 101, 18])) # Output: 4"},{"question":"Create a function that takes a list of integers and returns a new list containing only the first half of the input list. If the input list has an odd number of elements, the function should return the first half rounded down to the nearest whole number. For example, if the input list has 7 elements, the function should return the first 3 elements.","solution":"def first_half(lst): Returns the first half of the input list. If the list has an odd number of elements, the function returns the first half rounded down to the nearest whole number. middle_index = len(lst) // 2 return lst[:middle_index]"},{"question":"Create a function that takes in two integers, a and b, and returns the result of a raised to the power of b. However, instead of using the built-in power function, implement this using recursion.","solution":"def power(a, b): Returns the result of a raised to the power of b using recursion. if b == 0: return 1 return a * power(a, b - 1)"},{"question":"Create a function that takes two arrays of integers as input and returns a list containing the minimum and maximum values between the two arrays.","solution":"def find_min_max(arr1, arr2): Returns the minimum and maximum values between two arrays. :param arr1: List of integers :param arr2: List of integers :return: List containing the minimum and maximum values combined = arr1 + arr2 return [min(combined), max(combined)]"},{"question":"Create a function that takes a list of integers as input and returns a list of boolean values indicating whether each integer is even.","solution":"def is_even_list(int_list): Takes a list of integers and returns a list of boolean values indicating whether each integer is even. Args: int_list (list): A list of integers. Returns: list: A list of boolean values corresponding to whether each integer is even. return [x % 2 == 0 for x in int_list]"},{"question":"Create a function that takes two parameters, a start date and an end date, and returns the number of days between them, inclusive.","solution":"from datetime import datetime def days_between_inclusive(start_date, end_date): Returns the number of days between start_date and end_date, inclusive. Both start_date and end_date are strings in 'YYYY-MM-DD' format. start = datetime.strptime(start_date, \\"%Y-%m-%d\\") end = datetime.strptime(end_date, \\"%Y-%m-%d\\") delta = end - start return delta.days + 1"},{"question":"Create a function that takes in a list of integers, removes duplicates, and then sorts the list in ascending order. The function should return the sorted list without duplicates.","solution":"def remove_duplicates_and_sort(lst): Removes duplicates from the list and sorts it in ascending order. Parameters: lst (list of int): The input list of integers. Returns: list of int: The sorted list without duplicates. return sorted(set(lst))"},{"question":"Create a function that takes in a string and returns a new string with unique characters from the input string, maintaining their original order.","solution":"def unique_characters(s): Returns a new string with unique characters from the input string, maintaining their original order. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Create a function that takes a list of strings and a string representing a separator. The function should return a string where each element of the list is separated by the given separator.","solution":"def join_strings(string_list, separator): Joins a list of strings using the given separator. Parameters: string_list (list): A list of strings. separator (str): A string used to separate each element of the list. Returns: str: The joined string with elements separated by separator. return separator.join(string_list)"},{"question":"Create a function that converts a string to its corresponding ASCII values and then encrypts it using a shift cipher with a key. The shift cipher (also known as a Caesar cipher) shifts the characters of the string by the key value.","solution":"def ascii_shift_cipher(string, key): Converts a string to its ASCII values and then encrypts it using a shift cipher with a key. Parameters: string (str): The input string to be encrypted. key (int): The number of positions to shift each ASCII value. Returns: str: The encrypted string. encrypted_chars = [(chr((ord(char) + key) % 256)) for char in string] return ''.join(encrypted_chars)"},{"question":"Create a function that takes an array of integers and returns a new array where each element is the product of all other elements except the one at that index. How can we achieve this without using division in Python?","solution":"def product_except_self(nums): Returns a new array where each element is the product of all other elements except the one at that index. This implementation does not use division. length = len(nums) answer = [1] * length # Generate prefix products prefix_product = 1 for i in range(length): answer[i] = prefix_product prefix_product *= nums[i] # Generate suffix products and combine with prefix products suffix_product = 1 for i in range(length-1, -1, -1): answer[i] *= suffix_product suffix_product *= nums[i] return answer"},{"question":"Create a function that will return the product of an array of numbers. There will be at least one number in the array, and no zeroes. The array can contain one or more negative numbers. The function should be able to handle large arrays of numbers efficiently.","solution":"def product_of_array(numbers): Returns the product of an array of numbers. :param numbers: List[int] - A list of integers :return: int - The product of the integers in the list product = 1 for number in numbers: product *= number return product"},{"question":"Create a function that takes a string and returns a new string with all repeated characters removed. If characters are repeated consecutively or non-consecutively, they should all be removed. For example, if the input string is \\"aabcccb\\", the output should be \\"abc\\".","solution":"def remove_repeated_chars(s): Removes all repeated characters from the input string, whether they appear consecutively or non-consecutively. Parameters: s (str): The input string Returns: str: A new string with all repeated characters removed seen = {} result = [] for char in s: if char in seen: seen[char] = False # Mark the character as repeated else: seen[char] = True for char in s: if seen[char]: result.append(char) return ''.join(result)"},{"question":"Create a function that takes a list of words and returns a new list with each word capitalized.","solution":"def capitalize_words(words): Takes a list of words and returns a new list with each word capitalized. :param words: List of words to be capitalized :return: List of capitalized words return [word.capitalize() for word in words]"},{"question":"Create a function that can read a list of integers, remove any duplicates, and then find the second smallest number in the list. If there are no duplicates or the list has only one element, the function should return \`None\`. Write the function \`find_second_smallest(numbers)\`.","solution":"def find_second_smallest(numbers): Returns the second smallest number from a list of integers with unique elements. If the list has duplicates removed and has less than two elements, returns None. if not numbers: return None unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return None unique_numbers.sort() return unique_numbers[1]"},{"question":"Create a function that takes a list of integers, and prints each number in the list.","solution":"def print_numbers(numbers): Takes a list of integers and prints each number in the list. for number in numbers: print(number)"},{"question":"Create a function that finds the nth Fibonacci number. The function should be efficient and handle large values of n.","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n <= 0: raise ValueError(\\"n should be a positive integer\\") elif n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 for _ in range(3, n + 1): a, b = b, a + b return b"},{"question":"Create a function that takes a string, and a marker character. Your function should return all of the text before the marker appears. If the marker does not appear, it should return the entire string. Use Python.","solution":"def text_before_marker(text, marker): Returns all the text before the marker appears. If the marker does not appear, it returns the entire string. Parameters: text (str): The input string. marker (str): The marker character. Returns: str: The text before the marker. marker_index = text.find(marker) if marker_index != -1: return text[:marker_index] return text"},{"question":"Create a function that takes an array of integers and returns a new array containing only the even numbers from the original array. For example, the function should return an array with even numbers [2, 4, 6, 8] for an input array of [1, 2, 3, 4, 5, 6, 7, 8].","solution":"def filter_even_numbers(arr): Returns a new array containing only the even numbers from the original array. Parameters: arr (list): List of integers. Returns: list: List of even integers. return [num for num in arr if num % 2 == 0]"},{"question":"Create a function that takes an integer as an input and returns the factorial of the integer. The factorial of a number is the product of all positive integers less than or equal to that number. For example, the factorial of 5 (denoted as 5!) is 5 * 4 * 3 * 2 * 1 = 120. The function should handle cases where the input is 0, in which case the factorial is defined as 1 (0! = 1).","solution":"def factorial(n): Returns the factorial of a non-negative integer n. If n is 0, returns 1. if n < 0: raise ValueError(\\"Negative integers do not have factorials\\") result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Create a function that prints the Fibonacci sequence up to a specified range (n).","solution":"def fibonacci(n): Prints the Fibonacci sequence up to n elements. if n <= 0: return [] sequence = [0, 1] while len(sequence) < n: sequence.append(sequence[-1] + sequence[-2]) return sequence[:n]"},{"question":"Create a function that filters out unwanted words from a sentence based on a given list of unwanted words. For instance, if the sentence is \\"I love programming but C is a good language.\\" and the unwanted words are [\\"C\\", \\"good\\"], the function should return \\"I love programming but is a language.\\".","solution":"def filter_unwanted_words(sentence, unwanted_words): Returns the sentence after removing any words that are in the unwanted_words list. Parameters: sentence (str): The input sentence. unwanted_words (list): A list of words to be removed from the sentence. Returns: str: The sentence with unwanted words removed. words = sentence.split() filtered_words = [word for word in words if word not in unwanted_words] filtered_sentence = ' '.join(filtered_words) return filtered_sentence"},{"question":"Create a function that takes an array of integers as input and returns a new array that contains the square of each integer in the input array. The function should also remove any duplicates from the array.","solution":"def square_and_remove_duplicates(arr): Returns a new array containing the square of each integer in the input array, with duplicates removed. squares = {x**2 for x in arr} return list(squares)"},{"question":"Create a function that takes a string as an input. The function is supposed to replace all occurrences of 'a' with 'b' and all occurrences of 'b' with 'a'. However, if the string contains three consecutive 'a's or 'b's, then no replacement should be made. The function should return the modified string.","solution":"def replace_a_and_b(s): Replaces all occurrences of 'a' with 'b' and all occurrences of 'b' with 'a' in the string, unless the string contains three consecutive 'a's or 'b's, in which case no replacement is made. Args: s (str): The input string. Returns: str: The modified string or the original string if three consecutive 'a's or 'b's are found. if 'aaa' in s or 'bbb' in s: return s return s.replace('a', '#').replace('b', 'a').replace('#', 'b')"},{"question":"Create a function that checks if a given number is within a certain range, including the endpoints. The function should take three parameters: the number to check (\`Num\`), the starting point of the range (\`Start\`), and the endpoint of the range (\`End\`). Bonus points if the function can handle negative numbers and decimal numbers as well.","solution":"def is_in_range(Num, Start, End): Returns True if Num is within the range [Start, End], inclusive. Otherwise, returns False. return Start <= Num <= End"},{"question":"Create a function that takes a numerical list and returns the sum of its elements.","solution":"def sum_list(numbers): Returns the sum of all elements in the list. Args: numbers (list of int or float): A list of numerical values. Returns: int or float: The sum of the list elements. return sum(numbers)"},{"question":"Create a function that takes a string as an input and divides the string into a list of words. The function should ignore spaces and return a list where each word is a separate element.","solution":"def divide_into_words(input_string): Takes a string as input and returns a list of words in the string. Parameters: input_string (str): The input string to be divided into words. Returns: list: A list of words. return input_string.split()"},{"question":"Create a function that takes an integer and returns a new integer formed only by the odd digits found in the original number.","solution":"def extract_odd_digits(n): Returns a new integer formed only by the odd digits found in the original number n. odd_digits = [digit for digit in str(abs(n)) if int(digit) % 2 != 0] return int(''.join(odd_digits)) if odd_digits else 0"},{"question":"Create a function that calculates the factorial of a non-negative integer. If the input is negative, the function should return an error message as the factorial is not defined for negative numbers.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. If n is negative, returns an error message. if n < 0: return \\"Error: Factorial is not defined for negative numbers.\\" elif n == 0 or n == 1: return 1 else: result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Create a function that takes a list of strings and returns a new list containing only the strings that have an even number of characters.","solution":"def even_length_strings(strings): Returns a list containing only the strings with an even number of characters. Parameters: strings (list of str): A list of strings. Returns: list of str: A list of strings with even number of characters. return [s for s in strings if len(s) % 2 == 0]"},{"question":"Create a function that will check if a given integer is divisible by both 3 and 5. If it is, return the string \\"FizzBuzz\\". If it's only divisible by 3, return \\"Fizz\\". If it's only divisible by 5, return \\"Buzz\\". If it's not divisible by either, return the number itself as a string.","solution":"def fizz_buzz(n): Checks if a given integer is divisible by both 3 and 5, by 3 only, by 5 only, or neither. Args: n: int - The integer to check. Returns: str - \\"FizzBuzz\\" if divisible by both 3 and 5, \\"Fizz\\" if divisible by 3 only, \\"Buzz\\" if divisible by 5 only, or the number itself as a string otherwise. if n % 3 == 0 and n % 5 == 0: return \\"FizzBuzz\\" elif n % 3 == 0: return \\"Fizz\\" elif n % 5 == 0: return \\"Buzz\\" else: return str(n)"},{"question":"Create a function that displays the message \\"Hello, world!\\" every time it is called. In addition, the function must be able to handle a variable number of arguments.","solution":"def display_message(*args): Displays the message 'Hello, world!' every time it is called. Can handle a variable number of arguments. print(\\"Hello, world!\\") return \\"Hello, world!\\" # Adding a return statement to facilitate testing. # Note: Normally display functions won't return anything as they just perform I/O operations. # The return here is purely for testing purposes to validate the output string."},{"question":"Create a function that takes a list of numbers and returns a new list where each element is the sum of consecutive pairs in the original list. For example, given the list \`[1, 2, 3, 4]\`, the function should return \`[3, 5, 7]\`.","solution":"def sum_of_consecutive_pairs(numbers): Returns a new list where each element is the sum of consecutive pairs in the original list. :param numbers: List of numbers :return: List with sum of consecutive pairs return [numbers[i] + numbers[i+1] for i in range(len(numbers) - 1)]"},{"question":"Create a function that takes an integer as input and outputs the sum of its digits. The function should return an integer.","solution":"def sum_of_digits(n): Returns the sum of the digits of the input integer n. If n is negative, consider only its absolute value. return sum(int(digit) for digit in str(abs(n)))"},{"question":"Create a function that takes a list of numbers as input and returns the sum of the squares of all the numbers in the list. If the input list is empty, the function should return \`None\`. If the list contains any non-numeric elements, the function should ignore these elements and continue with the calculation.","solution":"def sum_of_squares(numbers): Returns the sum of squares of all numeric elements in the list. If the list is empty, returns None. :param numbers: list of elements :return: sum of squares of numeric elements or None if not numbers: return None sum_squares = 0 for num in numbers: if isinstance(num, (int, float)): sum_squares += num ** 2 return sum_squares if sum_squares else None"},{"question":"Create a function that generates a Fibonacci sequence with memoization to improve performance.","solution":"def fibonacci(n, memo={}): Generates the nth Fibonacci number with memoization. :param n: The position in the Fibonacci sequence. :param memo: Dictionary to store previously computed Fibonacci numbers. :return: The nth Fibonacci number. if n in memo: return memo[n] if n <= 0: return 0 elif n == 1: return 1 else: memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n] def generate_fibonacci_sequence(n): Generates a Fibonacci sequence up to the nth term. :param n: The number of terms in the Fibonacci sequence to generate. :return: The Fibonacci sequence up to the nth term. return [fibonacci(i) for i in range(n)]"},{"question":"Create a function that generates a binary string of length \`n\` that represents the binary equivalent of a sum of bitwise AND and bitwise OR operations on two integers \`a\` and \`b\`. The function should take the integers \`a\`, \`b\`, and the length \`n\` as inputs and return the resulting binary string.","solution":"def generate_binary_string(a, b, n): Returns a binary string of length n that represents the binary equivalent of the sum of the bitwise AND and bitwise OR of two integers a and b. Parameters: a (int): First integer. b (int): Second integer. n (int): Length of the resulting binary string. Returns: str: Binary string of length n. and_result = a & b or_result = a | b sum_result = and_result + or_result binary_str = bin(sum_result)[2:].zfill(n) return binary_str[:n]"},{"question":"Create a function that checks if a given positive integer is a perfect square without using any string conversions, floating-point arithmetic, or bitwise operations. How should the function handle edge cases?","solution":"def is_perfect_square(n): Returns True if n is a perfect square, False otherwise. if n < 1: return False left, right = 1, n while left <= right: mid = (left + right) // 2 squared = mid * mid if squared == n: return True elif squared < n: left = mid + 1 else: right = mid - 1 return False"},{"question":"Create a function that generates a random string of length n.","solution":"import string import random def generate_random_string(n): Generates a random string of length n consisting of uppercase, lowercase letters and digits. if n <= 0: return \\"\\" characters = string.ascii_letters + string.digits random_string = ''.join(random.choice(characters) for _ in range(n)) return random_string"},{"question":"Create a function that takes a list of integers and returns the sum of the elements. However, the function should only sum elements that are greater than a specified threshold. The sum of elements should be calculated in such a way that if the threshold is not met or if the list is empty, the function should return 0.","solution":"def sum_above_threshold(lst, threshold): Returns the sum of elements in the list that are greater than the specified threshold. If the list is empty or no element is greater than the threshold, returns 0. :param lst: List of integers :param threshold: Specified threshold (integer) :return: Sum of elements greater than the threshold return sum(x for x in lst if x > threshold) if lst else 0"},{"question":"Create a function that takes in two parameters: a string \`s\` and an integer \`n\`. The function should rotate the characters in the string \`s\` to the right by \`n\` positions and return the new string. If \`n\` is greater than the length of the string, you should rotate the characters by \`n % len(s)\` positions instead. If \`n\` is zero, the original string should be returned unchanged. The function should handle both uppercase and lowercase letters, as well as non-alphabetic characters.","solution":"def rotate_string(s, n): Rotates the characters in the string \`s\` to the right by \`n\` positions. Parameters: s (str): the input string n (int): the number of positions to rotate Returns: str: the rotated string if len(s) == 0: return s n = n % len(s) # Normalize n if it's greater than the length of the string return s[-n:] + s[:-n]"},{"question":"Create a function that takes an array of integers and returns the sum of all even numbers in the array. (In Python)","solution":"def sum_of_even_numbers(arr): Returns the sum of all even numbers in the array. Parameters: arr (list): A list of integers. Returns: int: The sum of all even numbers in the list. return sum(x for x in arr if x % 2 == 0)"},{"question":"Create a function that takes an input list and summarises it as a single output string. Each element in the list should be represented in the output string as follows: \\"(\\" + element + \\")\\".","solution":"def summarise_list(elements): Takes a list of elements and summarises it as a single output string where each element is represented like \\"(element)\\". Parameters: elements (list): A list of elements to summarise. Returns: str: A string summarising the list. return ''.join(f\\"({element})\\" for element in elements)"},{"question":"Create a function that takes a string as input and returns its reversed version using recursion.","solution":"def reverse_string_recursive(s): Returns the reversed version of the input string using recursion. if len(s) == 0: return s else: return reverse_string_recursive(s[1:]) + s[0]"},{"question":"Create a function that takes three parameters: a list of integers, the number of times to rotate the list, and the size of the list. The function should rotate the list to the right by the given number of times. If the number of rotations exceeds the size of the list, the function should handle the over-rotation efficiently. Analyze the time and space complexity of your code.","solution":"def rotate_list(nums, k, n): Rotates the list nums to the right by k times. Parameters: nums (list): The list of integers to rotate. k (int): The number of times to rotate the list. n (int): The size of the list. Returns: list: The rotated list. if n == 0 or k <= 0: return nums k = k % n # Handle rotations greater than the size of the list return nums[-k:] + nums[:-k]"},{"question":"Create a function that takes a list of integers, an integer value \`target\`, and an integer \`k\`. Return True if there exist two numbers in the list such that the sum of the two numbers is equal to \`target\` and one of the numbers is \`k\`. Otherwise, return False.","solution":"def find_with_sum_and_k(nums, target, k): Checks if there exist two numbers in the list such that the sum of the two numbers is equal to target and one of the numbers is k. Parameters: nums (list of int): List of integers to check. target (int): The target sum. k (int): One of the numbers to be checked. Returns: bool: True if such a pair exists, False otherwise. num_set = set(nums) for num in nums: if num != k: if target - num == k: return True return False"},{"question":"Create a function that checks if a number is ARMSTRONG. An ARMSTRONG number is a number that is the sum of its own digits each raised to the power of the number of digits. For example, 153 is an ARMSTRONG number because 1^3 + 5^3 + 3^3 = 153. How can you implement this in Python?","solution":"def is_armstrong_number(n): Returns True if n is an Armstrong number, False otherwise. # Convert number to string to easily iterate over digits digits = str(n) number_of_digits = len(digits) # Compute sum of digits each raised to the power of number of digits sum_of_powers = sum(int(digit) ** number_of_digits for digit in digits) # Check if the sum of powers is equal to the number itself return sum_of_powers == n"},{"question":"Create a function that takes in a list of integers and returns the sum of the list. However, the twist is that the list can contain nested lists as well. For example, [1, [2, 3], 4, [5, [6, 7]]] should return 28 using recursion.","solution":"def sum_nested_list(lst): Sums all elements in a list that may contain nested lists. total = 0 for element in lst: if isinstance(element, list): total += sum_nested_list(element) else: total += element return total"},{"question":"Create a function that generates a list of prime numbers up to a given number \`n\` using the Sieve of Eratosthenes algorithm. The function should return the list of prime numbers in ascending order.","solution":"def sieve_of_eratosthenes(n): Generates a list of prime numbers up to a given number n using the Sieve of Eratosthenes algorithm. Args: n (int): The upper limit of the range to look for prime numbers. Returns: list: A list of prime numbers up to n. if n < 2: return [] primes = [True] * (n + 1) p = 2 while (p * p <= n): if primes[p] == True: for i in range(p * p, n + 1, p): primes[i] = False p += 1 prime_numbers = [p for p in range(2, n + 1) if primes[p]] return prime_numbers"},{"question":"Create a function that generates all possible substrings of a given string \`str\`. The function should return a list of all these substrings, ensuring each substring is unique. Additionally, sort the list of substrings alphabetically.","solution":"def generate_substrings(s: str): Generates all possible unique substrings of the given string \`s\` and returns them in alphabetical order. substrings = set() for i in range(len(s)): for j in range(i + 1, len(s) + 1): substrings.add(s[i:j]) return sorted(substrings)"},{"question":"Create a function that expects an array of integers and returns the highest product possible by multiplying three numbers from the array. The array may contain negative numbers, zero, and positive numbers. The function should handle all edge cases and return the correct result.","solution":"def highest_product_of_three_numbers(arr): Returns the highest product possible by multiplying three numbers from the array. if len(arr) < 3: raise ValueError(\\"Array must contain at least three numbers\\") arr.sort() max_product = max(arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1]) return max_product"},{"question":"Create a function that takes in a list and a value, and returns a new list with the value appended to the end of the list. If the list is already empty, create a new list with the value as its only element.","solution":"def append_value(lst, value): Appends the value to the end of the list. If the list is empty, creates a new list with the value as the only element. Parameters: lst (list): The list to append the value to. value: The value to append to the list. Returns: list: The list with the value appended. if lst is None: lst = [] lst.append(value) return lst"},{"question":"Create a function that takes a variable number of arguments and prints each argument on a new line.","solution":"def print_arguments(*args): Takes a variable number of arguments and prints each on a new line. for arg in args: print(arg)"},{"question":"Create a function that takes two parameters: an integer \`n\` and a list \`lst\`. The function should return a new list where each element is the sum of the first \`n\` elements in the input list \`lst\`. If \`n\` is greater than the length of \`lst\`, the function should return the sum of all elements in the list.","solution":"def sum_first_n_elements(n, lst): Sums the first n elements of the list lst. If n is greater than the length of the list, sum all elements of the list. Args: n (int): The number of elements to sum. lst (list of int): The list of elements. Returns: list: A new list where the element is the sum of the first n elements. if n > len(lst): return [sum(lst)] else: return [sum(lst[:n])]"},{"question":"Create a function that generates all possible permutations of a given string. Your function should include the necessary imports and be self-contained. Ensure that the function is well-documented and sanitized to handle edge cases.","solution":"from itertools import permutations def generate_permutations(s): Generates all possible permutations of the given string. :param s: The input string :return: A list containing all permutations of the string # If the input string is empty, return an empty list if not s: return [] # If the input string has one character, return a list with that character if len(s) == 1: return [s] # Generate permutations perms = [''.join(p) for p in permutations(s)] return perms"},{"question":"Create a function that outputs the numbers from 0 to 12 in hexadecimal format. The function should use a loop to iterate through the numbers and print them in hexadecimal.","solution":"def print_hexadecimal_numbers(): Prints numbers from 0 to 12 in hexadecimal format. for num in range(13): print(hex(num))"},{"question":"Create a function that takes a list of integers, squares each number, and returns the new list.","solution":"def square_list(numbers): Takes a list of integers, squares each number, and returns the new list. return [n ** 2 for n in numbers]"},{"question":"Create a function that takes an array of numbers and returns the number that appears most frequently in the array. If there are multiple numbers with the same highest frequency, the function should return the smallest one among them. If the array is empty, the function should return \`None\`.","solution":"def most_frequent_number(arr): Returns the number that appears most frequently in the array. If there are multiple numbers with the same highest frequency, the function should return the smallest one among them. If the array is empty, the function should return None. if not arr: return None from collections import Counter counter = Counter(arr) max_freq = max(counter.values()) most_frequent = [num for num, freq in counter.items() if freq == max_freq] return min(most_frequent)"},{"question":"Create a function that takes an array of integers and returns the length of the longest increasing subsequence in the array. Note: A subsequence is increasing if the elements strictly increase from left to right.","solution":"def length_of_lis(nums): Returns the length of the longest increasing subsequence. if not nums: return 0 # Initialize DP array dp = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Create a function that accepts a list of numbers and return the sum and the average of the list.","solution":"def sum_and_average(numbers): Returns the sum and the average of a list of numbers. Parameters: numbers (list): List of numbers. Returns: tuple: Sum and average of the numbers. if not numbers: return (0, 0) total_sum = sum(numbers) average = total_sum / len(numbers) return total_sum, average"},{"question":"Create a function that takes an odd integer \`n\` as an argument and returns a list containing the first \`n\` Fibonacci numbers where the numbers are odd.","solution":"def odd_fibonacci_numbers(n): Returns a list of the first n odd Fibonacci numbers. if n <= 0 or n % 2 == 0: raise ValueError(\\"Input must be a positive odd integer\\") odd_fibs = [] a, b = 1, 1 while len(odd_fibs) < n: if a % 2 != 0: odd_fibs.append(a) a, b = b, a + b return odd_fibs"},{"question":"Create a function that takes an array of numbers and returns the sum of the squares of each number. For example, if the array is [1, 2, 3, 4], the function should return 30 (1^2 + 2^2 + 3^2 + 4^2 = 30).","solution":"def sum_of_squares(arr): Returns the sum of the squares of each number in the array. return sum(x ** 2 for x in arr)"},{"question":"Create a function that takes an array as input and returns the first non-repeated character in the array. If there are no non-repeated characters, return -1.","solution":"def first_non_repeated_character(arr): Returns the first non-repeated character in the array. If there are no non-repeated characters, returns -1. char_count = {} # First pass: count occurrences of each character for char in arr: char_count[char] = char_count.get(char, 0) + 1 # Second pass: find the first non-repeated character for char in arr: if char_count[char] == 1: return char return -1"},{"question":"Create a function that takes a string as input and returns a list of substrings that are separated by spaces. In Python, you can do this by splitting the string at each space. Also, each substring should be stripped of leading and trailing whitespace characters.","solution":"def split_and_trim(input_string): Splits the input string by spaces and trims leading and trailing whitespace from each substring. Parameters: input_string (str): The string to split. Returns: list: A list of trimmed substrings. return [substring.strip() for substring in input_string.split()]"},{"question":"Create a function that takes a list of numbers and returns the sum of all the even numbers in the list. You need to include comments within the function to explain each line of code.","solution":"def sum_of_even_numbers(numbers): Returns the sum of all even numbers in the given list of numbers. # Initialize the sum to 0 total = 0 # Iterate through each number in the list for num in numbers: # Check if the number is even if num % 2 == 0: # Add the even number to total total += num # Return the final sum of even numbers return total"},{"question":"Create a function that takes a string as input and returns a reversed version of the string. Can you walk me through the steps to create this function?","solution":"def reverse_string(s): Returns the reversed version of the input string s. return s[::-1]"},{"question":"Create a function that takes a number and a string,并向每个字符数组成的整数相加。如果字符串是 \\"234\\"，那么每个字符应该是被解释为 2, 3, 和 4。同时，函数需要将这个整数与输入的数字进行相加。例如，如果输入的数字是 5，那么结果应该是 234 + 5 = 239。","solution":"def add_string_number_and_integer(number, string_number): Adds an integer represented by string_number and the given number. Parameters: number (int): The integer to be added. string_number (str): A string representing an integer. Returns: int: The sum of the integer represented by string_number and the given number. integer_from_string = int(string_number) return number + integer_from_string"},{"question":"Create a function that takes an integer \`n\` and returns the minimum number of coins required to make change for \`n\` using coins of denominations 1, 5, and 10. Assume that the value of \`n\` will not be negative.","solution":"def min_coins(n): Returns the minimum number of coins required to make change for n using denominations 1, 5, and 10. coins = 0 coins += n // 10 n %= 10 coins += n // 5 n %= 5 coins += n return coins"},{"question":"Create a function that returns the maximum sum of a subarray within a given array. The function should also throw an error if the input is not an array or if the array contains no elements.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a subarray within the given array. Throws an error if the input is not an array or if the array is empty. if not isinstance(arr, list): raise TypeError(\\"Input must be an array\\") if len(arr) == 0: raise ValueError(\\"Array cannot be empty\\") max_sum = current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Create a function that can calculate the Euclidean distance between two points in 2D space. The points are provided as tuples of coordinates (x, y). Ensure to check the validity of the input before performing any calculation.","solution":"import math def euclidean_distance(point1, point2): Calculate the Euclidean distance between two points in 2D space. :param point1: A tuple representing the first point (x1, y1). :param point2: A tuple representing the second point (x2, y2). :return: The Euclidean distance between the two points. if not (isinstance(point1, tuple) and isinstance(point2, tuple)): raise TypeError(\\"Both points must be tuples.\\") if not (len(point1) == 2 and len(point2) == 2): raise ValueError(\\"Both points must be 2D tuples.\\") x1, y1 = point1 x2, y2 = point2 if not (isinstance(x1, (int, float)) and isinstance(y1, (int, float))): raise TypeError(\\"Coordinates of point1 must be integers or floats.\\") if not (isinstance(x2, (int, float)) and isinstance(y2, (int, float))): raise TypeError(\\"Coordinates of point2 must be integers or floats.\\") return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)"},{"question":"Create a function that checks if a 2D list (matrix) is symmetric. A symmetric matrix is one where the transpose of the matrix is equal to the original matrix. The function should return \`True\` if the matrix is symmetric, otherwise it returns \`False\`.","solution":"def is_symmetric(matrix): Checks if a 2D list (matrix) is symmetric. A matrix is symmetric if it is equal to its transpose. Parameters: matrix (list of list of int): The 2D matrix to check. Returns: bool: True if the matrix is symmetric, False otherwise. rows = len(matrix) for i in range(rows): for j in range(rows): if matrix[i][j] != matrix[j][i]: return False return True"},{"question":"Create a function that implements the Merge Sort algorithm.","solution":"def merge_sort(arr): Function that implements the Merge Sort algorithm. It recursively splits the array into halves and merges the sorted halves. Args: arr (list): List of elements to be sorted. Returns: list: A new sorted list. if len(arr) <= 1: return arr # Finding the midpoint of the array to split it into halves mid = len(arr) // 2 # Recursively splitting and sorting both halves left_half = merge_sort(arr[:mid]) right_half = merge_sort(arr[mid:]) # Merging the sorted halves return merge(left_half, right_half) def merge(left, right): Helper function to merge two sorted halves. Args: left (list): Sorted left half. right (list): Sorted right half. Returns: list: A merged and sorted list. sorted_array = [] i = j = 0 # Merging the two sorted halves by comparing elements while i < len(left) and j < len(right): if left[i] < right[j]: sorted_array.append(left[i]) i += 1 else: sorted_array.append(right[j]) j += 1 # Adding the remaining elements from both halves sorted_array.extend(left[i:]) sorted_array.extend(right[j:]) return sorted_array"},{"question":"Create a function that checks for anagrams. An anagram is a word that is spelled the same way backwards or forwards, e.g., \\"racecar\\" and \\"madam\\".","solution":"def is_anagram(word): Checks if a word is an anagram (reads the same forwards and backwards). word = word.lower().replace(\\" \\", \\"\\") return word == word[::-1]"},{"question":"Create a function that takes an array of integers, and returns the sum of all the positive integers in the array. What should the function do if the array is empty? What should it do with negative numbers?","solution":"def sum_positive_integers(arr): Returns the sum of all positive integers in the input array. If the array is empty, returns 0. Ignores negative numbers and zeros. return sum(x for x in arr if x > 0)"},{"question":"Create a function that adds the squares of two numbers and returns the result.","solution":"def add_squares(a, b): Returns the sum of the squares of a and b. return a**2 + b**2"},{"question":"Create a function that takes a string \`s\` and return a new string where every vowel (a, e, i, o, u) is replaced by the next consonant in the alphabet. For example, 'a' is replaced by 'b', 'e' is replaced by 'f', and so on. The function should handle both uppercase and lowercase vowels and ensure that all other characters remain unchanged.","solution":"def replace_vowels(s): Replaces every vowel in the string s with the next consonant in the alphabet. Handles both uppercase and lowercase vowels. vowel_map = { 'a': 'b', 'e': 'f', 'i': 'j', 'o': 'p', 'u': 'v', 'A': 'B', 'E': 'F', 'I': 'J', 'O': 'P', 'U': 'V' } return ''.join(vowel_map[char] if char in vowel_map else char for char in s)"},{"question":"Create a function that returns the nth Fibonacci number in Python. Additionally, the function should handle cases where the input is negative or non-integer, and raise appropriate exceptions.","solution":"def fibonacci(n): Returns the nth Fibonacci number. Raises ValueError if n is negative or not an integer. if not isinstance(n, int): raise ValueError(\\"Input must be an integer.\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Create a function that adds one to a list of numbers to increment each element in the list. Also, the function should handle any potential errors that may come up, such as if the input is not a list or if the list contains non-integer elements.","solution":"def increment_elements(input_list): Increment each element of the input list by one. Handles errors for non-list inputs and lists with non-integer elements. Parameters: input_list (list): A list containing integers. Returns: list: A list with each element incremented by one or a string indicating an error. if not isinstance(input_list, list): return \\"Input is not a list\\" try: return [x + 1 for x in input_list] except TypeError: return \\"List contains non-integer elements\\""},{"question":"Create a function that accepts an array of numbers and returns a new array containing all the even numbers from the original array.","solution":"def filter_even_numbers(arr): Returns a list of even numbers from the given array. Parameters: arr (list): A list of integers. Returns: list: A list of even integers. return [num for num in arr if num % 2 == 0]"},{"question":"Create a function that generates a random UUID (Universally Unique Identifier) of the version 4. A UUID version 4 is a randomUUID as specified in RFC 4122.","solution":"import uuid def generate_uuid4(): Generates a random UUID version 4. return str(uuid.uuid4())"},{"question":"Create a function that takes in a list of strings as an argument and returns a new list containing the lengths of the strings in the input list, but only if the string length is greater than 5.","solution":"def filter_lengths(strings): Returns a list containing the lengths of the strings in the input list, but only if the string length is greater than 5. return [len(s) for s in strings if len(s) > 5]"},{"question":"Create a function that accepts an integer as input and returns a list of its proper divisors. A proper divisor of a number is a divisor that is strictly less than the number itself. For example, the proper divisors of 12 are 1, 2, 3, 4, and 6.","solution":"def proper_divisors(n): Returns a list of proper divisors of the integer n. if n <= 1: return [] divisors = [] for i in range(1, n): if n % i == 0: divisors.append(i) return divisors"},{"question":"Create a function that takes a string as input and returns the length of the longest common subsequence between that string and its reverse. For example, given the string \\"abcde\\", the function should return 1, because the longest common subsequence between \\"abcde\\" and \\"edcba\\" is just the single character 'e'.","solution":"def longest_common_subsequence_with_reverse(s): Returns the length of the longest common subsequence between the input string and its reverse. n = len(s) rev_s = s[::-1] # Create a DP table dp = [[0] * (n + 1) for _ in range(n + 1)] # Fill the DP table for i in range(1, n + 1): for j in range(1, n + 1): if s[i-1] == rev_s[j-1]: dp[i][j] = dp[i-1][j-1] + 1 else: dp[i][j] = max(dp[i-1][j], dp[i][j-1]) # The length of the longest common subsequence will be in dp[n][n] return dp[n][n]"},{"question":"Create a function that takes in a list of strings and returns a new list containing only the strings that start with the letter 'a'. How can this be done in Python?","solution":"def filter_strings_starting_with_a(strings): Takes a list of strings and returns a new list containing only the strings that start with the letter 'a'. :param strings: List of strings :return: List of strings starting with 'a' return [string for string in strings if string.startswith('a')]"},{"question":"Create a function that takes a string of English text and converts it to Pig Latin. How would you do it in Python?","solution":"def to_pig_latin(text): Converts a string of English text to Pig Latin. Parameters: text (str): The input string in English. Returns: str: The converted string in Pig Latin. vowels = 'aeiou' words = text.split() pig_latin_words = [] for word in words: first_letter = word[0].lower() if first_letter in vowels: pig_latin_word = word + 'way' else: for i, char in enumerate(word): if char.lower() in vowels: pig_latin_word = word[i:] + word[:i] + 'ay' break else: pig_latin_word = word + 'ay' if word[0].isupper(): pig_latin_word = pig_latin_word.capitalize() pig_latin_words.append(pig_latin_word) return ' '.join(pig_latin_words)"},{"question":"Create a function that takes a string and returns a vector of strings that contain all possible subsequences of the original string in chronological order, excluding any empty subsequences.","solution":"def subsequences(s): Returns a list of all possible non-empty subsequences of the given string in chronological order. from itertools import chain, combinations # Generate all non-empty subsequences using itertools subsequences = [''.join(subseq) for length in range(1, len(s) + 1) for subseq in combinations(s, length)] return subsequences"},{"question":"Create a function that rotates a 2D array (matrix) 90 degrees clockwise. The function should return the rotated matrix.","solution":"def rotate_matrix(matrix): Rotates a 2D matrix 90 degrees clockwise. :param matrix: List[List[int]] - The 2D matrix to be rotated :return: List[List[int]] - The rotated 2D matrix if not matrix or not matrix[0]: return matrix rows = len(matrix) cols = len(matrix[0]) rotated = [[0] * rows for _ in range(cols)] for i in range(rows): for j in range(cols): rotated[j][rows - 1 - i] = matrix[i][j] return rotated"},{"question":"Create a function that swaps elements in an array. This function should take an array and two indices as input parameters and swap the elements at those indices.","solution":"def swap_elements(arr, index1, index2): Swaps elements in the array \`arr\` at the provided \`index1\` and \`index2\`. Parameters: arr (list): The list whose elements need to be swapped. index1 (int): The index of the first element to swap. index2 (int): The index of the second element to swap. Returns: list: The array with the elements swapped. # Swap the elements arr[index1], arr[index2] = arr[index2], arr[index1] return arr"},{"question":"Create a function that finds the length of the longest subarray with contiguous elements in a list while ensuring that all elements in the subarray are within a given range [L, R].","solution":"def longest_subarray_within_range(arr, L, R): Finds the length of the longest subarray with contiguous elements while ensuring all elements in the subarray are within the range [L, R]. :param arr: List of integers :param L: Lower bound of the range :param R: Upper bound of the range :return: Length of the longest subarray n = len(arr) max_len = 0 current_len = 0 for num in arr: if L <= num <= R: current_len += 1 max_len = max(max_len, current_len) else: current_len = 0 return max_len"},{"question":"Create a function that takes two numbers and returns the largest number that is a divisor of both numbers, also known as the greatest common divisor (GCD).","solution":"import math def gcd(a, b): Returns the greatest common divisor of a and b. return math.gcd(a, b)"},{"question":"Create a function that accepts two parameters. The first parameter is the number of columns (n_cols), and the second parameter is the number of rows (n_rows). The function should return a nested list filled with sequential numbers from 1 up to and including n_cols * n_rows. The sequential numbers should be placed in the nested list in a column-major order (i.e., first all the elements of the first column, then the second column, and so on).","solution":"def create_column_major_matrix(n_cols, n_rows): Creates a nested list filled with sequential numbers from 1 up to and including n_cols * n_rows. The numbers are placed in the nested list in a column-major order. :param n_cols: Number of columns :param n_rows: Number of rows :return: Nested list with column-major ordering of numbers matrix = [[0] * n_cols for _ in range(n_rows)] num = 1 for col in range(n_cols): for row in range(n_rows): matrix[row][col] = num num += 1 return matrix"},{"question":"Create a function that outputs each alphanumeric character followed by a new line, using ASCII values.","solution":"def print_alphanumeric_ascii(): Prints each alphanumeric character (0-9, a-z, A-Z) followed by their ASCII value on a new line in the format 'character: ASCII'. for char in range(48, 58): # 0-9 print(f\\"{chr(char)}: {char}\\") for char in range(65, 91): # A-Z print(f\\"{chr(char)}: {char}\\") for char in range(97, 123): # a-z print(f\\"{chr(char)}: {char}\\")"},{"question":"Create a function that returns an integer that is the sum of the multiples of 3 or 5 below a given number. For example, the given function sum_multiples_of_3_or_5(10) should return 23 (3 + 5 + 6 + 9).","solution":"def sum_multiples_of_3_or_5(n): Returns the sum of the multiples of 3 or 5 below a given number n. return sum(i for i in range(n) if i % 3 == 0 or i % 5 == 0)"},{"question":"Create a function that takes a string and returns counts of uppercase, lowercase, digits, and special characters. I need this function to be implemented in Python.","solution":"def count_chars(s): Returns a dictionary with counts of uppercase, lowercase, digits, and special characters in the given string. counts = { 'uppercase': 0, 'lowercase': 0, 'digits': 0, 'special': 0 } for char in s: if char.isupper(): counts['uppercase'] += 1 elif char.islower(): counts['lowercase'] += 1 elif char.isdigit(): counts['digits'] += 1 else: counts['special'] += 1 return counts"},{"question":"Create a function that generates a Fibonacci sequence in a list. The function should take an integer as input (the length of the Fibonacci sequence) and return a list containing the Fibonacci sequence of that length.","solution":"def fibonacci_sequence(n): Generates a list containing the Fibonacci sequence up to the n-th element. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fib_seq = [0, 1] while len(fib_seq) < n: fib_seq.append(fib_seq[-1] + fib_seq[-2]) return fib_seq"},{"question":"Create a function that takes in a string and determines if it is a palindrome. A palindrome is a word, phrase, number, or other sequences of characters which reads the same backward as forward, ignoring spaces, punctuation, and capitalization. How would you implement this in Python?","solution":"import re def is_palindrome(s): Determine if the provided string is a palindrome. This function ignores spaces, punctuation, and capitalization. # Remove non-alphanumeric characters and convert to lowercase cleaned_string = re.sub(r'[^a-zA-Z0-9]', '', s).lower() # Compare the cleaned string with its reverse return cleaned_string == cleaned_string[::-1]"},{"question":"Create a function that takes in a list of integers, squares each integer, and returns a new list containing those squares. For example, if the input list is [1, 2, 3], the output should be [1, 4, 9].","solution":"def square_list(int_list): Squares each integer in the list and returns a new list containing those squares. Parameters: int_list (list of int): A list of integers to be squared. Returns: list of int: A new list with each integer squared. return [x**2 for x in int_list]"},{"question":"Create a function that calculates the sum of the first N natural numbers. The function should take an integer N as input and use a loop to calculate the sum. Then, create a main function that calls this sum function with a specific value of N (for example, 10). Finally, print the result.","solution":"def sum_of_natural_numbers(N): Returns the sum of the first N natural numbers. total = 0 for i in range(1, N + 1): total += i return total def main(): Calls the sum_of_natural_numbers function with a specific value of N and prints the result. N = 10 result = sum_of_natural_numbers(N) print(f\\"The sum of the first {N} natural numbers is: {result}\\")"},{"question":"Create a function that takes a list of integers and returns the count of numbers that are greater than a given threshold. For this problem, use Python as the programming language.","solution":"def count_greater_than(lst, threshold): Returns the count of numbers in the list that are greater than the given threshold. Parameters: - lst: List of integers. - threshold: Integer threshold. Returns: - Integer count of numbers greater than threshold. return sum(1 for x in lst if x > threshold)"},{"question":"Create a function that finds the smallest positive integer missing from a given array of integers. The function should be able to handle negative numbers and zeros. For example, given the array \`[-1, 2, 0, 3, -2, 5]\`, the function should return 1 since 1 is the smallest positive integer missing from the array.","solution":"def find_smallest_missing_positive(arr): Returns the smallest positive integer missing from a given array of integers. arr = set(arr) smallest_missing = 1 while smallest_missing in arr: smallest_missing += 1 return smallest_missing"},{"question":"Create a function that takes in a string and returns the result of converting that string to reversed uppercase. For example, if the input is \\"hello\\", the function should return \\"OLLEH\\".","solution":"def reverse_uppercase(s): Returns the reversed string in uppercase. return s[::-1].upper()"},{"question":"Create a function that accepts an array input containing numbers and returns the second smallest number in the array.","solution":"def second_smallest(numbers): Returns the second smallest number in the array. if len(numbers) < 2: raise ValueError(\\"Array must contain at least two elements\\") first_min = float('inf') second_min = float('inf') for num in numbers: if num < first_min: second_min = first_min first_min = num elif first_min < num < second_min: second_min = num if second_min == float('inf'): raise ValueError(\\"Array must contain at least two unique elements\\") return second_min"},{"question":"Create a function that takes two parameters - a name and an age. Verify if the provided age is a number and if it's a positive integer. If both conditions are true, return the message: \\"Hello, [name]! You are [age] years old.\\" If the age is not a number or it's a negative integer, return the message: \\"Invalid age input.\\"","solution":"def greet(name, age): Returns a greeting message incorporating the name and age if age is a positive integer. Otherwise, returns an error message. if isinstance(age, int) and age >= 0: return f\\"Hello, {name}! You are {age} years old.\\" else: return \\"Invalid age input.\\""},{"question":"Create a function that generates the nth Fibonacci number using recursion. The function should be efficient, even for large values of n.","solution":"def fibonacci(n, memo={}): Returns the nth Fibonacci number using recursion with memoization. if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n]"},{"question":"Create a function that takes a string as input and returns a boolean value indicating whether the string is a valid email address. A valid email address contains characters from the set [a-z A-Z 0-9], contains exactly one '@' symbol, and has a domain extension that is at least two characters long. The function should return True if the string is a valid email address, and False otherwise.","solution":"import re def is_valid_email(email): Checks if the provided string is a valid email address. A valid email address: - Contains characters from the set [a-z A-Z 0-9 . _ -] - Contains exactly one '@' symbol - Has a domain extension that is at least two characters long Args: email (str): The email address to validate. Returns: bool: True if the email address is valid, False otherwise. pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}' return re.match(pattern, email) is not None"},{"question":"Create a function that takes an integer \`n\` as input and returns a list of integers from 1 to \`n\` in reverse order. The function should also include error handling for non-integer inputs.","solution":"def reverse_list(n): Returns a list of integers from 1 to n in reverse order if n is a positive integer. If n is not an integer or is a non-positive integer, an error message is returned. if not isinstance(n, int) or n <= 0: return \\"Error: Input must be a positive integer.\\" return list(range(n, 0, -1))"},{"question":"Create a function that takes a string as input and returns the string converted to uppercase. Write a Python code snippet for this.","solution":"def to_uppercase(s): Converts the input string to uppercase. Parameters: s (str): The string to be converted to uppercase. Returns: str: The uppercase version of the input string. return s.upper()"},{"question":"Create a function that takes a list of integers as input and returns a dictionary where the keys are the integers from the list and the values are True if the integer is odd and False if even.","solution":"def odd_even_dict(lst): Takes a list of integers and returns a dictionary where each integer is a key and the value is True if the integer is odd and False if the integer is even. return {i: i % 2 != 0 for i in lst}"},{"question":"Create a function that finds the middle element in an array of numbers.","solution":"def find_middle_element(arr): Returns the middle element of the array. If the array length is even, it returns the element just before the exact middle. if len(arr) == 0: raise ValueError(\\"Array cannot be empty\\") middle_index = (len(arr) - 1) // 2 return arr[middle_index]"},{"question":"Create a function that takes in a string, inverts it, and returns the inverted string. For example, the function should return \\"olleh\\" given \\"hello\\".","solution":"def invert_string(s): Returns the inverted (reversed) string of s. return s[::-1]"},{"question":"Create a function that takes in a string of text and finds all occurrences of a specific character. The function should return a dictionary where the keys are the occurrences of this character and the values are lists of the indices where these occurrences are found.","solution":"def find_char_occurrences(text, char): Finds all occurrences of a specific character in the given text. Args: text (str): The string of text to search within. char (str): The character to find occurrences of. Returns: dict: A dictionary where the keys are occurrences of the character and the values are lists of the indices where these occurrences are found. if not char or len(char) != 1: raise ValueError(\\"The character to find must be a single character.\\") occurrences = {} indices = [index for index, c in enumerate(text) if c == char] for idx, occ in enumerate(indices, start=1): occurrences[occ] = indices[:idx] return occurrences"},{"question":"Create a function that removes duplicate elements from a list in Python. The function should take a list as input and return a new list with all duplicates removed. Ensure that the order of elements in the original list is preserved.","solution":"def remove_duplicates(input_list): Removes duplicate elements from a list while preserving the order of elements. :param input_list: List of elements that may contain duplicates :return: A new list with duplicates removed, preserving the original order seen = set() result = [] for item in input_list: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Create a function that takes a string as input and returns a new string with the characters in reverse order. Using Python syntax, solve this problem.","solution":"def reverse_string(s): Takes a string as input and returns a new string with the characters in reverse order. return s[::-1]"},{"question":"Create a function that takes a number and returns the sum of all even numbers between 1 and the given number.","solution":"def sum_of_evens(n): Returns the sum of all even numbers between 1 and the given number n (inclusive). return sum(x for x in range(1, n + 1) if x % 2 == 0)"},{"question":"Create a function that takes in a string as input and returns the length of the shortest word in the string.","solution":"def length_of_shortest_word(s): Returns the length of the shortest word in the string \`s\`. words = s.split() if not words: return 0 shortest_length = min(len(word) for word in words) return shortest_length"},{"question":"Create a function that takes an array and a target value, and returns the first index at which the target value is found in the array, or -1 if the target is not present.","solution":"def find_index(arr, target): Finds the first index of the target in the array. If the target is not found, returns -1. Args: arr (list): The array to search through. target: The value to find in the array. Returns: int: The first index of the target in the array, or -1 if not found. for index, value in enumerate(arr): if value == target: return index return -1"},{"question":"Create a function that identifies elements in an array that are not present in another array and returns their indices.","solution":"def find_missing_indices(array1, array2): Identifies elements in array1 that are not present in array2 and returns their indices. Parameters: array1 (list): The first array/list in which to find missing elements. array2 (list): The second array/list to check against. Returns: list: A list of indices of elements in array1 that are not present in array2. return [index for index, value in enumerate(array1) if value not in array2]"},{"question":"Create a function that returns an array \`a of size n×n\`. \`a[i][j] = glasses_count[i][j]\` if \`i = j\` or \`i < j\`, otherwise, \`a[i][j] = glasses_count[i][j] + glasses_count[j][i]\`.","solution":"def create_glasses_matrix(glasses_count): Creates a matrix where a[i][j] = glasses_count[i][j] if i = j or i < j, otherwise, a[i][j] = glasses_count[i][j] + glasses_count[j][i]. Parameters: glasses_count (list of lists of int): Input matrix of size n x n Returns: list of lists of int: Resultant matrix of size n x n n = len(glasses_count) result = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): if i <= j: result[i][j] = glasses_count[i][j] else: result[i][j] = glasses_count[i][j] + glasses_count[j][i] return result"},{"question":"Create a function that can find the absolute value of an integer without using the built-in abs() function.","solution":"def absolute_value(n): Returns the absolute value of an integer n without using the built-in abs() function. return n if n >= 0 else -n"},{"question":"Create a function that checks if a given string contains a valid email address.","solution":"import re def is_valid_email(email): Checks if the given string is a valid email address. email_regex = re.compile( r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+' ) return bool(email_regex.match(email))"},{"question":"Create a function that takes an array of numbers as input and returns an array where each element is the product of all other elements in the array, except for the element at the same index. The solution should run in O(n) time complexity.","solution":"def product_except_self(nums): Given an array nums, return an array such that each element at index 'i' of the array is the product of all the numbers in the original array except nums[i]. The solution runs in O(n) time complexity. :param nums: List[int] - input array of numbers :return: List[int] - output array where each element is the product of all other elements n = len(nums) if n == 0: return [] # Initialize the arrays to store the products left_products = [1] * n right_products = [1] * n output = [1] * n # Calculate left products for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] # Calculate right products for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] # Calculate the output array for i in range(n): output[i] = left_products[i] * right_products[i] return output"},{"question":"Create a function that takes two arguments, a list and a number. The function should append the number to the end of the list and return the list.","solution":"def append_to_list(lst, number): Appends the given number to the end of the list and returns the list. Parameters: lst (list): The list to which the number will be appended. number (int, float, etc.): The number to append to the list. Returns: list: The list with the number appended. lst.append(number) return lst"},{"question":"Create a function that takes a string and returns a new string with each character's case reversed. For example, if the input is \\"Python\\", the output should be \\"pYTHON\\".","solution":"def reverse_case(s): Takes a string and returns a new string with each character's case reversed. return s.swapcase()"},{"question":"Create a function that takes an array of integers and returns a new array containing only the odd numbers from the original array. How would you implement this in Python?","solution":"def filter_odd_numbers(arr): Returns a new array containing only the odd numbers from the original array. return [num for num in arr if num % 2 != 0]"},{"question":"Create a function that takes two integers \`a\` and \`b\` as arguments and returns a string representing the fraction in its simplest form. If either \`a\` or \`b\` is zero, the function should return an appropriate error message indicating division by zero or invalid input.","solution":"from fractions import Fraction def simplest_fraction(a, b): Returns the fraction a/b in its simplest form as a string. If either a or b is zero, returns an appropriate error message. if b == 0: return \\"Error: division by zero\\" if a == 0: return \\"Error: numerator is zero\\" fraction = Fraction(a, b).limit_denominator() return f\\"{fraction.numerator}/{fraction.denominator}\\""},{"question":"Create a function that takes an array of integers, each representing the number of cookies in a jar on a given day, and calculates the average number of cookies eaten per day. If any day's count is negative, the function should return -1 as an error indicator. If the array is empty, the function should return 0.","solution":"def average_cookies(cookies): Returns the average number of cookies eaten per day. If any day's count is negative, returns -1 as an error indicator. If the array is empty, returns 0. if any(cookie < 0 for cookie in cookies): return -1 if not cookies: return 0 return sum(cookies) / len(cookies)"},{"question":"Create a function that takes a string as input and returns a string in which the words are sorted based on their first letter. If two words have the same first letter, sort them based on their length.","solution":"def sort_words_by_first_letter(input_string): Sorts words in a string based on their first letter and if two words have the same first letter, sort them by their length. words = input_string.split() words.sort(key=lambda word: (word[0].lower(), len(word))) return \\" \\".join(words)"},{"question":"Create a function that takes a string 's' as input and returns the string with all the characters converted to their ASCII values.","solution":"def string_to_ascii(s): Takes a string 's' and returns a string with all the characters converted to their ASCII values. return ' '.join(str(ord(char)) for char in s)"},{"question":"Create a function that scrambles multiples of 3 and sticks them at the beginning of the array. All other numbers should be left in their original order. For example, given the array [7, 3, 5, 9, 4, 6], the function should return [9, 6, 3, 7, 5, 4].","solution":"import random def scramble_and_sort_multiples_of_3(arr): Scrambles (shuffles) the multiples of 3 in the input array and moves them to the beginning, keeping non-multiples of 3 in their original order. Args: arr (list): List of integers. Returns: list: Modified list with scrambled multiples of 3 at the beginning. multiples_of_3 = [x for x in arr if x % 3 == 0] non_multiples_of_3 = [x for x in arr if x % 3 != 0] random.shuffle(multiples_of_3) return multiples_of_3 + non_multiples_of_3"},{"question":"Create a function that takes a string as input and returns a new string with the first two characters of the input string repeated at the end.","solution":"def repeat_first_two_chars(s): Adds the first two characters of the input string 's' to its end. If 's' has less than two characters, the function will return 's' repeated twice. if len(s) < 2: return s * 2 return s + s[:2]"},{"question":"Create a function that accepts two parameters (an array and a number). The function should return the indices in which the number appears within the array, but only if it appears more than once. If the number appears only once or does not appear at all, the function should return an empty array.","solution":"def find_indices(array, number): Given an array and a number, return the indices where the number appears more than once, or an empty array if it does not or appears only once. indices = [i for i, x in enumerate(array) if x == number] return indices if len(indices) > 1 else []"},{"question":"Create a function that takes a list of strings and returns a new list containing elements that are common to all the strings in the input list. How can you implement this efficiently in Python?","solution":"def common_elements(lists): Returns a list of elements that are common to all the strings in the input list. # Convert each string to a set of characters sets = [set(s) for s in lists] # Find the intersection of all sets common_chars = set.intersection(*sets) # Convert the resulting set back to a sorted list return sorted(list(common_chars))"},{"question":"Create a function that takes a list of integers and returns a new list containing only the even numbers from the original list. For example, if the input list is \`[1, 2, 3, 4, 5, 6]\`, the output should be \`[2, 4, 6]\`.","solution":"def filter_even_numbers(numbers): Takes a list of integers and returns a list of only the even numbers. return [num for num in numbers if num % 2 == 0]"},{"question":"Create a function that takes a list of strings and returns the string with the most characters. if there are multiple strings with the same maximum length, return the first one encountered.","solution":"def longest_string(strings): Returns the string with the most characters in the given list of strings. If there are multiple strings with the same maximum length, return the first one encountered. Parameters: strings (list): A list of strings. Returns: str: The string with the most characters. if not strings: return \\"\\" max_length = -1 longest = \\"\\" for string in strings: if len(string) > max_length: max_length = len(string) longest = string return longest"},{"question":"Create a function that takes an integer as input and returns a string reading the number in English words.","solution":"def number_to_words(n): Converts an integer n to its English words representation. if n == 0: return \\"zero\\" under_20 = ['','one','two','three','four','five','six','seven','eight','nine','ten', 'eleven','twelve','thirteen','fourteen','fifteen','sixteen','seventeen', 'eighteen','nineteen'] tens = ['','', 'twenty','thirty','forty','fifty','sixty','seventy','eighty','ninety'] thousands = ['','thousand','million','billion'] def helper(num): if num == 0: return '' elif num < 20: return under_20[num] + ' ' elif num < 100: return tens[num // 10] + ' ' + helper(num % 10) else: return under_20[num // 100] + ' hundred ' + helper(num % 100) result = '' for i in range(len(thousands)): if n % 1000 != 0: result = helper(n % 1000) + thousands[i] + ' ' + result n //= 1000 return result.strip()"},{"question":"Create a function that takes in a list of integers as a parameter and returns the sum of the two largest elements in the list. The function should handle edge cases, such as empty or self-referencing lists. Edge cases involve complex situations that are rare or unusual. In this case, an empty list should return None.","solution":"def sum_two_largest(numbers): Returns the sum of the two largest elements in the list. If the list is empty or contains fewer than two elements, return None. if len(numbers) < 2: return None first, second = float('-inf'), float('-inf') for num in numbers: if num > first: second = first first = num elif num > second: second = num return first + second"},{"question":"Create a function that generates pairs of numbers (i, j) such that 1 <= i, j <= 100 and i + j = 100. The function should return these pairs as a list of tuples. Each tuple should contain one pair of numbers. For example, (1, 99), (2, 98), ..., (99, 1).","solution":"def generate_pairs(): Generates pairs of numbers (i, j) such that 1 <= i, j <= 100 and i + j = 100. Returns these pairs as a list of tuples. pairs = [(i, 100 - i) for i in range(1, 101) if 100 - i >= 1] return pairs"},{"question":"Create a function that finds the intersection of two lists in Python, but ensure that the function only includes unique elements in the result. Additionally, provide a piece of advice on how to handle multiple edges cases that may occur during the implementation of the function.","solution":"def find_intersection(list1, list2): Returns a list containing the intersection of list1 and list2, with only unique elements. set1 = set(list1) set2 = set(list2) intersection = set1 & set2 # Intersection of sets return list(intersection)"},{"question":"Create a function that takes an array and a target value, and returns the index of the target value in the array. If the target is not found, return -1.","solution":"def find_target_index(arr, target): Returns the index of the target value in the array. If the target is not found, returns -1. try: return arr.index(target) except ValueError: return -1"},{"question":"Create a function that converts the first letter of a string to uppercase and the rest of the string to lowercase, then returns the modified string. You will need to handle any potential edge cases, such as if the input is an empty string or contains non-alphabetic characters.","solution":"def capitalize_first_letter(s): Converts the first letter of the string to uppercase and the rest to lowercase. Args: s (str): The input string. Returns: str: The modified string with the first letter capitalized and the rest in lowercase. if not s: return s return s[0].upper() + s[1:].lower()"},{"question":"Create a function that takes in a string, and reverses the case of all the alphabetic characters in the string. For example, if the input is \\"Hello World!\\", the output should be \\"hELLO wORLD!\\".","solution":"def reverse_case(s): Reverses the case of all the alphabetic characters in the string. Parameters: s (str): The input string. Returns: str: The string with reversed case for all the alphabetic characters. return ''.join([char.lower() if char.isupper() else char.upper() for char in s])"},{"question":"Create a function that takes a list of integers and returns a new list with the integers sorted in descending order. The function should not use any built-in sorting functions or libraries. Instead, implement a sorting algorithm of your choice.","solution":"def sort_descending(lst): Sorts a list of integers in descending order using bubble sort. n = len(lst) for i in range(n): for j in range(0, n-i-1): if lst[j] < lst[j+1]: lst[j], lst[j+1] = lst[j+1], lst[j] return lst"},{"question":"Create a function that takes a list of words and returns a new list with the words in reverse order.","solution":"def reverse_words(words): Returns a new list with the words in reverse order. Args: words (list): A list of words. Returns: list: A new list containing the words in reverse order. return words[::-1]"},{"question":"Create a function that takes two positive numbers \`a\` and \`b\` as input and returns the Greatest Common Divisor (GCD) of the two numbers. You must implement the function using the Euclidean algorithm, which is an efficient method for computing the greatest common divisor (gcd) of two numbers, the largest number that divides both of them without leaving a remainder.","solution":"def gcd(a, b): Returns the greatest common divisor (GCD) of a and b using the Euclidean algorithm. while b != 0: a, b = b, a % b return a"},{"question":"Create a function that takes an array of integers, and returns the sum of the integers in the array. If the array is empty, the function should return 0. Additionally, the function should handle cases where the array contains both positive and negative integers. Explain each step of your solution using comments in the code.","solution":"def sum_of_integers(arr): Returns the sum of the integers in the array. If the array is empty, returns 0. Parameters: arr (list of int): The array of integers to sum. Returns: int: The sum of the integers in the array. # Check if the array is empty and return 0 if true if not arr: return 0 # Initialize sum variable to 0 total_sum = 0 # Loop through each integer in the array and add it to the total sum for num in arr: total_sum += num return total_sum"},{"question":"Create a function that checks if a given number is a perfect square and returns the nearest smaller perfect square if it's not. If the number is already a perfect square, return -1 to indicate no smaller perfect square exists for non-square numbers.","solution":"import math def nearest_smaller_perfect_square(n): Check if the given number is a perfect square. If not, return the nearest smaller perfect square. If it is a perfect square, return -1. Parameters: n (int): The number to be checked. Returns: int: The nearest smaller perfect square or -1 if the number is a perfect square. if n < 0: raise ValueError(\\"Number must be non-negative\\") root = int(math.sqrt(n)) if root * root == n: return -1 else: return root * root"},{"question":"Create a function that formats a given date string into a more readable format. The function should take a string in the format \\"YYYY-MM-DD\\" and return a string in the format \\"Month DD, YYYY\\".","solution":"def format_date(date_string): Formats a date string from \\"YYYY-MM-DD\\" to \\"Month DD, YYYY\\". Parameters: date_string (str): A date string in the format \\"YYYY-MM-DD\\". Returns: str: The formatted date string in the format \\"Month DD, YYYY\\". import datetime # Parse the string into a date object date_obj = datetime.datetime.strptime(date_string, \\"%Y-%m-%d\\") # Format the date object into the desired string format formatted_date = date_obj.strftime(\\"%B %d, %Y\\") return formatted_date"},{"question":"Create a function that can take an integer as input and return its factorial in Python. Please provide a solution with detailed explanation.","solution":"def factorial(n): Returns the factorial of a given integer n. Factorial of a non-negative integer n is the product of all positive integers less than or equal to n. For n = 0 or n = 1, the factorial is 1. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Create a function that returns the maximum value among three numbers.","solution":"def max_of_three(a, b, c): Returns the maximum value among three numbers. return max(a, b, c)"},{"question":"Create a function that can validate an email address.","solution":"import re def validate_email(email): Validates if the given email address is in the correct format. # Define the regex for a valid email address regex = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+' # Use the re module to match the email with the regex if re.match(regex, email): return True else: return False"},{"question":"Create a function that takes a string containing only parentheses. The function should returns the maximum depth of nested parentheses. The depth of a sequence is the maximum number of commas in a row it contains. For example, (((), )) has a maximum depth of 2, while ()() has a maximum depth of 1.","solution":"def max_parentheses_depth(s): Returns the maximum depth of nested parentheses in the string s. max_depth = 0 current_depth = 0 for char in s: if char == '(': current_depth += 1 if current_depth > max_depth: max_depth = current_depth elif char == ')': current_depth -= 1 return max_depth"},{"question":"Create a function that takes a list of numbers as input and returns the largest number in the list. If the list is empty, the function should return \`None\`. Here is a code snippet that attempts to solve this problem but contains an error.","solution":"def find_largest_number(nums): Returns the largest number in the list \`nums\`. If the list \`nums\` is empty, returns None. if not nums: return None return max(nums)"},{"question":"Create a function that takes a word and splits it into two halves. If the word has an odd number of characters, the extra character should be included in the second half.","solution":"def split_word(word): Splits the word into two halves. If the word has an odd number of characters, the extra character will be included in the second half. Parameters: word (str): The word to be split Returns: tuple: A tuple containing the two halves of the word midpoint = (len(word) + 1) // 2 return word[:midpoint], word[midpoint:]"},{"question":"Create a function that reverses a string. You must reverse the string without using the built-in reverse function, slicing, or any other method that directly reverses the string. Instead, you must implement the reversal logic using loops. Additionally, you are not allowed to use any additional data structures like arrays or lists. You must solve this using only string operations and variables.","solution":"def reverse_string(s): Reverses a string without using built-in reverse functions, slicing, or additional data structures like arrays or lists. reversed_str = '' for char in s: reversed_str = char + reversed_str return reversed_str"},{"question":"Create a function that takes two sorted lists of integers and returns a list containing the intersection of these lists.","solution":"def intersect_sorted_lists(list1, list2): Returns the intersection of two sorted lists. intersection = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] < list2[j]: i += 1 elif list1[i] > list2[j]: j += 1 else: intersection.append(list1[i]) i += 1 j += 1 return intersection"},{"question":"Create a function that will take an integer array as input and return the maximum element in the array. If the array is empty, the function should return \`None\`.","solution":"def find_max_element(arr): Returns the maximum element in the array. If the array is empty, returns None. if not arr: return None else: return max(arr)"},{"question":"Create a function that takes a list of integers and returns the maximum possible sum of any non-empty subarray of consecutive elements. The function should handle edge cases where the input list might be empty or contain only negative numbers.","solution":"def max_subarray_sum(nums): Returns the maximum possible sum of any non-empty subarray of consecutive elements. if not nums: # Edge case: empty list return 0 max_ending_here = max_so_far = nums[0] for num in nums[1:]: max_ending_here = max(num, max_ending_here + num) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Create a function that takes a string s and an integer n as arguments and returns the nth repeated character of the string.","solution":"def nth_repeated_char(s, n): Returns the nth repeated character of the string s. :param s: Input string :param n: The occurrence rank of the repeated character :return: The nth repeated character or None if it doesn't exist char_count = {} # Count the occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find repeated characters repeated_chars = [char for char in s if char_count[char] > 1] # Filter unique characters from the repeated list keeping order seen = set() result = [] for char in repeated_chars: if char not in seen: seen.add(char) result.append(char) # Return the nth repeated character if it exists if len(result) >= n: return result[n - 1] return None"},{"question":"Create a function that takes a list of numbers and returns a dictionary where the keys are the numbers in the list and the values are their corresponding square roots. Use Python.","solution":"import math def calculate_square_roots(numbers): Returns a dictionary where keys are the numbers from the list and values are their corresponding square roots. :param numbers: List of numbers :return: Dictionary with numbers as keys and their square roots as values return {number: math.sqrt(number) for number in numbers}"},{"question":"Create a function that takes an array of integers and returns the length of the longest increasing subsequence (LIS) in that array. The LIS is the longest increasing subsequence in an array where the elements are in strictly increasing order. For example, the LIS in the array [10, 9, 2, 5, 3, 7, 101, 18] is [2, 3, 7, 101].","solution":"def length_of_lis(nums): Returns the length of the longest increasing subsequence in the given array. :param nums: List of integers :return: Length of the longest increasing subsequence if not nums: return 0 dp = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Create a function that returns an array or list containing elements of the Fibonacci sequence. The function should take a single integer argument \`n\` representing the number of elements in the sequence to generate. For example, if \`n\` is 5, the function should return \`[0, 1, 1, 2, 3]\`. In case \`n\` is less than or equal to 0, the function should return an empty list.","solution":"def fibonacci(n): Returns a list containing the first n elements of the Fibonacci sequence. Parameters: n (int): The number of elements to generate. Returns: list: A list containing the first n elements of the Fibonacci sequence. if n <= 0: return [] fib_sequence = [0, 1] while len(fib_sequence) < n: fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence[:n]"},{"question":"Create a function that returns 100 \\"Hello World\\" messages using Python.","solution":"def generate_hello_world_messages(): Returns a list of 100 \\"Hello World\\" messages. return [\\"Hello World\\"] * 100"},{"question":"Create a function that takes a list of names and returns a dictionary where the keys are the names and the values are the lengths of the names.","solution":"def names_to_lengths(names): Returns a dictionary where the keys are the names and the values are the lengths of the names. :param names: List of names :type names: list :return: Dictionary of names and their lengths :rtype: dict return {name: len(name) for name in names}"},{"question":"Create a function that reverses a string without using any built-in string manipulation functions or slicing. The function should take a single string as an argument and return the reversed string.","solution":"def reverse_string(s): Reverses a given string without using any built-in string manipulation functions or slicing. reversed_s = \\"\\" for char in s: reversed_s = char + reversed_s return reversed_s"},{"question":"Create a function that takes an integer as input and returns a list of its prime factors. For example, if the input is 8, the output should be [2, 2, 2].","solution":"def prime_factors(n): Returns a list of prime factors of the given integer n. factors = [] # Check for number of 2s while n % 2 == 0: factors.append(2) n = n // 2 # Check for odd factors from 3 onwards for i in range(3, int(n**0.5) + 1, 2): while n % i == 0: factors.append(i) n = n // i # If n is a prime number greater than 2 if n > 2: factors.append(n) return factors"},{"question":"Create a function that takes two lists as input and returns the intersection of the two lists. The function should handle cases where the lists are of different lengths and may contain duplicate values.","solution":"def intersection(list1, list2): Returns the intersection of two lists. Each element in the intersection should appear as many times as it shows in both lists. list1_counts = {} list2_counts = {} # Count occurrences in list1 for item in list1: if item in list1_counts: list1_counts[item] += 1 else: list1_counts[item] = 1 # Count occurrences in list2 for item in list2: if item in list2_counts: list2_counts[item] += 1 else: list2_counts[item] = 1 # Calculate intersection intersection_list = [] for item in list1_counts: if item in list2_counts: min_count = min(list1_counts[item], list2_counts[item]) intersection_list.extend([item] * min_count) return intersection_list"},{"question":"Create a function that takes two arguments: a string and a dictionary. The function should search the string for each key in the dictionary and return a dictionary where each key is the key from the input dictionary and the value is True if the key is found in the string, and False otherwise.","solution":"def search_string_keys(string, dictionary): Searches the string for each key in the dictionary. Parameters: string (str): The string to search within. dictionary (dict): The dictionary containing keys to search for in the string. Returns: dict: A dictionary where each key is the key from the input dictionary and the value is True if the key is found in the string, and False otherwise. result = {} for key in dictionary.keys(): result[key] = key in string return result"},{"question":"Create a function that takes an array of strings and returns an array with the strings sorted based on the length of each string from longest to shortest.","solution":"def sort_strings_by_length(strings): Sorts an array of strings by the length of each string from longest to shortest. :param strings: List of strings to be sorted :return: List of strings sorted by length from longest to shortest return sorted(strings, key=len, reverse=True)"},{"question":"Create a function that takes an integer as an input and returns a list containing all the even numbers from the input number up to 100, but only if these even numbers are also divisible by either 3 or 5. I also require the function to handle cases where the input is less than 1 or greater than 100, and return an appropriate error message in such cases.","solution":"def find_even_divisible_numbers(n): Returns a list of even numbers from n to 100 that are divisible by 3 or 5. If n is less than 1 or greater than 100, returns an appropriate error message. if n < 1 or n > 100: return \\"Input should be between 1 and 100, inclusive.\\" result = [] for i in range(n, 101): if i % 2 == 0 and (i % 3 == 0 or i % 5 == 0): result.append(i) return result"},{"question":"Create a function that formats a given integer to a string with leading zeros. The function should take two parameters: the integer to be formatted and the desired length of the resulting string. The function should ensure that the integer is represented as a string with the specified length, padding with leading zeros if necessary. If the integer is already longer than the desired length, it should be truncated to fit.","solution":"def format_with_leading_zeros(number, length): Formats the given integer 'number' to a string with leading zeros to reach 'length'. If the integer is longer than the desired length, it gets truncated to fit. Parameters: number (int): The integer to be formatted. length (int): The desired length of the resulting string. Returns: str: The formatted string representation of the integer. str_number = str(number) if len(str_number) > length: return str_number[-length:] else: return str_number.zfill(length)"},{"question":"Create a function that performs element-wise multiplication of two arrays of integers and returns the result as a new array.","solution":"def elementwise_multiplication(arr1, arr2): Perform element-wise multiplication of two arrays of integers. Parameters: arr1 (list of int): First list of integers. arr2 (list of int): Second list of integers. Returns: list of int: Result of element-wise multiplication. Raises: ValueError: If the input arrays are not of the same length. if len(arr1) != len(arr2): raise ValueError(\\"Input arrays must have the same length\\") return [a * b for a, b in zip(arr1, arr2)]"},{"question":"Create a function that takes an array of integers and returns a new array with all duplicates removed, preserving the original order of the elements.","solution":"def remove_duplicates(arr): Returns a new array with all duplicates removed, preserving the original order of the elements. seen = set() result = [] for num in arr: if num not in seen: seen.add(num) result.append(num) return result"},{"question":"Create a function that calculates the total cost of a meal split among a group of people. The function should accept the total meal cost and the number of people splitting the meal. The function should return the amount each person should pay. Additionally, implement a check function with provided data points to verify the correctness of your solution.","solution":"def split_meal_cost(total_cost, number_of_people): Calculates the cost per person when a total meal cost is split among a group of people. Parameters: total_cost (float): The total cost of the meal. number_of_people (int): The number of people splitting the meal. Returns: float: The amount each person should pay. if number_of_people <= 0: raise ValueError(\\"Number of people must be greater than zero.\\") return total_cost / number_of_people"},{"question":"Create a function that returns the maximum total profit given a list of daily stock prices and the ability to perform multiple transactions (buying and selling are allowed but you cannot have multiple transactions simultaneously).","solution":"def max_profit(prices): Returns the maximum total profit given a list of daily stock prices where buying and selling are allowed but no multiple transactions are simultaneous. :param prices: List of daily stock prices :return: Maximum possible profit if not prices: return 0 max_profit = 0 for i in range(1, len(prices)): if prices[i] > prices[i-1]: max_profit += prices[i] - prices[i-1] return max_profit"},{"question":"Create a function that takes an array of integers and prints all the elements of the array in reverse order using recursion.","solution":"def print_reverse(arr, index=None): Prints all the elements of the array arr in reverse order using recursion. :param arr: List of integers :param index: Current index to print, initially None to start from the last element if index is None: index = len(arr) - 1 if index < 0: return print(arr[index]) print_reverse(arr, index - 1)"},{"question":"Create a function that checks if a given array can be partitioned into two subsets such that the sum of elements in both subsets is equal. This is known as a \\"Partition Equal Subset Sum\\" problem.","solution":"def can_partition(nums): Determines if the given array can be partitioned into two subsets with equal sum. :param nums: List of non-negative integers :return: Boolean indicating whether the array can be partitioned into two subsets of equal sum total_sum = sum(nums) # If total sum is odd, it cannot be partitioned into two equal subsets if total_sum % 2 != 0: return False target = total_sum // 2 n = len(nums) # Initialize a boolean dp array dp = [False] * (target + 1) dp[0] = True for num in nums: for i in range(target, num - 1, -1): dp[i] = dp[i] or dp[i - num] return dp[target]"},{"question":"Create a function that takes two integers and a boolean value as inputs and returns the result of the boolean expression \\"and\\" if the boolean is True and \\"or\\" if the boolean is False. The integers can be any valid integers.","solution":"def boolean_expression(a, b, use_and): Returns the result of the boolean expression 'and' if use_and is True, and 'or' if use_and is False. if use_and: return a and b else: return a or b"},{"question":"Create a function that takes an array of integers and returns the minimum number of steps required to make any two numbers in the array equal. In a single step, you can add any digit from 0 to 9 to any number in the array. The function should return -1 if it's not possible to make any two numbers equal through addition.","solution":"def min_steps_to_equal(arr): Returns the minimum number of steps required to make any two numbers in the array equal by adding any digit from 0 to 9 to any number in the array. Returns -1 if it's not possible to do so. if len(arr) < 2: return -1 counts = {} for num in arr: counts[num] = counts.get(num, 0) + 1 for key in counts: if counts[key] > 1: return 0 return -1"},{"question":"Create a function that takes a string as input and returns the string with all the characters reversed. For example, if the input is \\"hello\\", the output should be \\"olleh\\".","solution":"def reverse_string(s): Returns the input string s reversed. return s[::-1]"},{"question":"Create a function that takes an array of integers as an argument and returns an array of strings. Each string in the returned array should describe whether each integer in the input array is even or odd.","solution":"def even_or_odd(arr): This function takes an array of integers as an argument and returns an array of strings indicating whether each integer is 'even' or 'odd'. result = [] for num in arr: if num % 2 == 0: result.append('even') else: result.append('odd') return result"},{"question":"Create a function that accepts two parameters: \`start_number\` and \`end_number\`. The function should return a list of every second number in the range, inclusively, between \`start_number\` and \`end_number\` (inclusive).","solution":"def every_second_number(start_number, end_number): Returns a list of every second number from start_number to end_number, inclusive. return list(range(start_number, end_number + 1, 2))"},{"question":"Create a function that calculates the Fibonacci number at a given position in the series, using recursion.","solution":"def fibonacci(n): Returns the Fibonacci number at position n using recursion. if n <= 0: return 0 elif n == 1: return 1 else: return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Create a function that calculates the sum of all prime numbers between two given positive integers, \`start\` and \`end\`.","solution":"def is_prime(n): Returns True if n is a prime number, else False. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def sum_of_primes(start, end): Returns the sum of all prime numbers between start and end (inclusive). total = 0 for num in range(start, end + 1): if is_prime(num): total += num return total"},{"question":"Create a function that can determine if a given string of parentheses is balanced. A string is considered balanced if each type of opening parenthesis '(' has a corresponding closing parenthesis ')' and vice versa. The string can contain any combination of parentheses: '()', '[]', '{}'.","solution":"def is_balanced(s): Determines if a given string of parentheses is balanced. Args: s (str): The string containing parentheses. Returns: bool: True if the string is balanced, False otherwise. stack = [] mapping = {')': '(', ']': '[', '}': '{'} for char in s: if char in mapping.values(): stack.append(char) elif char in mapping.keys(): if stack == [] or mapping[char] != stack.pop(): return False else: continue return stack == []"},{"question":"Create a function that takes in a string and returns a new string where each character in the original string is converted to its ASCII value. The ASCII values should be separated by a space.","solution":"def string_to_ascii(s): Converts each character in the string to its ASCII value, separated by a space. return ' '.join(str(ord(char)) for char in s)"},{"question":"Create a function that takes a string and returns an array containing each character as an element in the array. Split the string on each space character and then each word in the array should be reversed. For example, if the input string is \\"Hello World\\", the output should be [\\"olleH\\", \\"dlroW\\"].","solution":"def split_and_reverse(string): Takes a string, splits it by spaces into words, and returns a list of words with each word reversed. Parameters: string (str): The input string Returns: list: A list of reversed words words = string.split(' ') reversed_words = [word[::-1] for word in words] return reversed_words"},{"question":"Create a function that accepts two parameters, an array of integers and a target integer. The function should return the indices of the two numbers such that they add up to the target.","solution":"def two_sum(nums, target): Returns the indices of two numbers in the array such that they add up to the target. Args: nums: List[int] - List of integers. target: int - Target sum. Returns: List[int] - List with two indices. num_to_index = {} for index, num in enumerate(nums): difference = target - num if difference in num_to_index: return [num_to_index[difference], index] num_to_index[num] = index return None # return None if no such pair is found"},{"question":"Create a function that simplifies a mathematical expression represented as a string. The expression includes numbers, parentheses, and basic arithmetic operations (+, -, *, /). The simplified result is returned as a string. For example, if the input is \\"(3+2)*5\\", the output should be \\"25\\".","solution":"def simplify_expression(expression): Simplifies a mathematical expression given as a string. return str(eval(expression))"},{"question":"Create a function that takes an integer N as an input and returns the sum of all the numbers from 0 to N (inclusive). This function should be efficient and work well with large values of N.","solution":"def sum_to_n(N): Returns the sum of all the numbers from 0 to N (inclusive). Parameters: N (int): The input integer. Returns: int: The sum of all the numbers from 0 to N. return N * (N + 1) // 2"},{"question":"Create a function that returns the count of distinct characters in a string. For example, if the input is \\"apple\\", the function should return 4, since there are 4 distinct characters: 'a', 'p', 'l', 'e'. If the input is \\"hello\\", it should return 4 as well since 'l' is repeated.","solution":"def count_distinct_characters(s): Returns the count of distinct characters in the string s. return len(set(s))"},{"question":"Create a function that checks whether a given number is prime. Implement this function, and then use it to check if the numbers 2, 3, 4, and 5 are prime.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False if n == 2: return True # 2 is the one even prime number if n % 2 == 0: return False sqrt_n = int(n**0.5) + 1 for i in range(3, sqrt_n, 2): if n % i == 0: return False return True # Checking if the functions works for numbers 2, 3, 4, and 5 results = {num: is_prime(num) for num in [2, 3, 4, 5]} results"},{"question":"Create a function that takes a list of strings and returns the strings that contain the substring 'hello' and also have a length greater than 5.","solution":"def filter_strings_with_hello(strings): Takes a list of strings and returns the strings that contain the substring 'hello' and also have a length greater than 5. Parameters: strings (list of str): List of strings to filter Returns: list of str: The filtered list of strings return [s for s in strings if 'hello' in s and len(s) > 5]"},{"question":"Create a function that returns all possible subsets of a given integer array, including the empty set. The function should be able to handle arrays of varying sizes and data types. The function should also be optimized for performance.","solution":"from itertools import combinations def all_subsets(arr): Returns all possible subsets of the given array, including the empty set. Parameters: arr (list): A list of integers or other data types. Returns: list of lists: A list containing all subsets of the input array. subsets = [] for r in range(len(arr) + 1): for combo in combinations(arr, r): subsets.append(list(combo)) return subsets"},{"question":"Create a function that takes in a list of integers as its parameter and returns a list containing the squares of every element in the input list. The function should be named \`list_of_squares\`.","solution":"def list_of_squares(numbers): Takes a list of integers and returns a list containing the squares of every element in the input list. :param numbers: List[int] - List of integers :return: List[int] - List of squared integers return [x**2 for x in numbers]"},{"question":"Create a function that takes as input a 3x3 matrix and returns the sum of the elements in the diagonal from the top left to the bottom right.","solution":"def sum_diagonal(matrix): Returns the sum of the elements in the diagonal from the top left to the bottom right of a 3x3 matrix. return matrix[0][0] + matrix[1][1] + matrix[2][2]"},{"question":"Create a function that indentifies the largest number in a 2D array.","solution":"def find_largest_number(matrix): This function takes a 2D array (list of lists) and returns the largest number in the 2D array. :param matrix: List[List[int]] :return: int if not matrix or not all(matrix): raise ValueError(\\"Input matrix must be a non-empty 2D array.\\") largest = matrix[0][0] for row in matrix: for element in row: if element > largest: largest = element return largest"},{"question":"Create a function that takes an array of integers and returns the length of the longest contiguous subarray that sums to a given target value.","solution":"def longest_subarray_with_sum(arr, target): Returns the length of the longest contiguous subarray that sums to the given target. :param arr: List of integers :param target: Target summation value :return: Length of the longest contiguous subarray sum_dict = {0: -1} current_sum = 0 max_length = 0 for i, num in enumerate(arr): current_sum += num if current_sum - target in sum_dict: max_length = max(max_length, i - sum_dict[current_sum - target]) if current_sum not in sum_dict: sum_dict[current_sum] = i return max_length"},{"question":"Create a function that generates a Fibonacci sequence in Python. The function should allow the user to specify the length of the sequence. Also, handle cases where the user might input an invalid length or a negative length.","solution":"def generate_fibonacci_sequence(length): Generates a Fibonacci sequence of a specified length. Parameters: length (int): The length of the Fibonacci sequence to be generated. Returns: list: A list containing the Fibonacci sequence of the specified length. In case of invalid or negative length, returns an empty list. if not isinstance(length, int) or length <= 0: return [] sequence = [] a, b = 0, 1 for _ in range(length): sequence.append(a) a, b = b, a + b return sequence"},{"question":"Create a function that takes a number as an input and returns its corresponding Roman numeral. The function should handle numbers in the range of 1 to 2000.","solution":"def int_to_roman(num): Convert an integer to a Roman numeral. The function handles numbers between 1 and 2000 (inclusive). if not 1 <= num <= 2000: raise ValueError(\\"Number out of range. Must be between 1 and 2000.\\") val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syms = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_numeral = \\"\\" i = 0 while num > 0: for _ in range(num // val[i]): roman_numeral += syms[i] num -= val[i] i += 1 return roman_numeral"},{"question":"Create a function that generates the first N Fibonacci numbers. Here, N is a positive integer. Implement a Python function that should return these Fibonacci numbers in a list.","solution":"def generate_fibonacci(N): Generates the first N Fibonacci numbers. Parameters: N (int): The number of Fibonacci numbers to generate. N must be a positive integer. Returns: list: A list containing the first N Fibonacci numbers. if N <= 0: raise ValueError(\\"N must be a positive integer\\") fib_sequence = [0, 1] if N == 1: return [0] elif N == 2: return fib_sequence for i in range(2, N): next_fib = fib_sequence[-1] + fib_sequence[-2] fib_sequence.append(next_fib) return fib_sequence[:N]"},{"question":"Create a function that takes a string parameter and returns the number of capital letters in the string.","solution":"def count_capital_letters(s): Returns the number of capital letters in the string s. return sum(1 for char in s if char.isupper())"},{"question":"Create a function that checks if a string is a valid representation of a number in a specified radix (base) and returns True if it is, and False otherwise. The radix can be any integer from 2 to 36.","solution":"def is_valid_number_in_radix(number_str, radix): Checks if the string \`number_str\` is a valid number in the given \`radix\`. try: int(number_str, radix) return True except ValueError: return False"},{"question":"Create a function that generates a list of Fibonacci numbers up to a given limit. The function should take two parameters: the limit and a boolean indicating whether to include the limit in the sequence if it is a Fibonacci number. The function should return a list of Fibonacci numbers up to the given limit.","solution":"def fibonacci_up_to(limit, include_limit=False): Generates a list of Fibonacci numbers up to a given limit. Parameters: limit (int): The upper limit for the Fibonacci sequence. include_limit (bool): If True, includes the limit in the sequence if it is a Fibonacci number. Returns: list: A list of Fibonacci numbers up to the given limit. if limit < 0: return [] fib_sequence = [0, 1] while True: next_fib = fib_sequence[-1] + fib_sequence[-2] if next_fib > limit: break fib_sequence.append(next_fib) if not include_limit and fib_sequence and fib_sequence[-1] == limit: fib_sequence.pop() return fib_sequence"},{"question":"Create a function that multiplies a given number by a constant, which is 5.","solution":"def multiply_by_constant(number, constant=5): Multiplies the given number by the constant (default is 5). Args: number (int, float): The number to be multiplied. constant (int, float): The constant to multiply with, default is 5. Returns: int, float: The result of the multiplication. return number * constant"},{"question":"Create a function that takes a number as input and returns True if it's an Armstrong number, False otherwise. An Armstrong number is an n-digit number that is equal to the sum of its own digits each raised to the power of n.","solution":"def is_armstrong_number(n): Returns True if number n is an Armstrong number, False otherwise. num_str = str(n) num_digits = len(num_str) armstrong_sum = sum(int(digit) ** num_digits for digit in num_str) return armstrong_sum == n"},{"question":"Create a function that takes two lists as arguments and returns the intersection of the two lists. By intersection, I mean the values that appear in both lists. Make sure the function handles cases where the lists may contain duplicate values.","solution":"def intersection(lst1, lst2): Returns the intersection of two lists. Intersection means the values that appear in both lists. set1 = set(lst1) set2 = set(lst2) return list(set1.intersection(set2))"},{"question":"Create a function that sums the digits of a given integer. If the integer is negative, sum the digits of the absolute value of the integer. For example, given the integer \`-123\`, the function should return \`6\` because the digits are 1, 2, and 3.","solution":"def sum_of_digits(n): Returns the sum of the digits of a given integer. If the integer is negative, the function uses the absolute value of the integer. return sum(int(digit) for digit in str(abs(n)))"},{"question":"Create a function that takes two arguments (a list of integers and a target sum), and returns the indices of the two numbers such that they add up to the target sum. Assume that each input will have exactly one solution, and elements cannot be used more than once. You may return the answer in any order.","solution":"def two_sum(nums, target): Returns the indices of the two numbers such that they add up to the target sum. :param nums: List of integers :param target: Target sum :return: List of two indices num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index"},{"question":"Create a function that takes two lists of integers and returns a new list containing the common elements of both lists, sorted in ascending order. The function should also remove any duplicate elements from the resulting list.","solution":"def common_elements(list1, list2): Returns a list of common elements from list1 and list2, sorted in ascending order. Duplicates are removed in the resulting list. # Using set intersection to get common elements common_set = set(list1) & set(list2) # Converting the set to a sorted list return sorted(common_set)"},{"question":"Create a function that determines if the elements of an array are sorted in non-decreasing order. The function should check for both ascending and non-decreasing (which includes equal elements next to each other) order. The function should return True if the array is sorted in either of the two stated orders, otherwise, it should return False.","solution":"def is_sorted(arr): Determines if the elements of the array are sorted in non-decreasing order. Args: arr (list): A list of elements to be checked Returns: bool: True if the array is sorted in non-decreasing order, otherwise False return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1))"},{"question":"Create a function that takes a list of file paths as an argument and returns the list of file paths that need to be copied to a backup folder for synchronization. File paths that are already in the backup folder should not be considered for copying.","solution":"def files_to_backup(file_paths, backup_folder): Returns a list of file paths that need to be copied to a backup folder. File paths that are already in the backup folder are excluded. Parameters: - file_paths: List of file paths to check. - backup_folder: The backup folder path. Returns: - List of file paths that need to be copied to the backup folder. files_to_copy = [] for path in file_paths: if not path.startswith(backup_folder): files_to_copy.append(path) return files_to_copy"},{"question":"Create a function that allows you to add an event listener to any HTML DOM element. The function should take at least three arguments: the DOM object, the event type you want to listen for (\\"click\\", \\"mouseover\\", etc.), and the callback function that will be executed when the event occurs.","solution":"def add_event_listener(dom_element, event_type, callback): Adds an event listener to a specified DOM element. :param dom_element: The DOM element to which the event listener should be added. :param event_type: The type of event to listen for (\\"click\\", \\"mouseover\\", etc.). :param callback: The function that will be executed when the event occurs. def _impl_add_event_listener(dom_element, event_type, callback): dom_element.addEventListener(event_type, callback) # Check for required attributes if hasattr(dom_element, 'addEventListener'): _impl_add_event_listener(dom_element, event_type, callback) else: raise ValueError(\\"The provided DOM element doesn't support addEventListener.\\")"},{"question":"Create a function that takes a list of integers and returns the sum of the absolute values of all the integers in the list, multiplied by the sign of the product of all the integers. If the product of all the integers is 0, the function should return 0, regardless of the absolute values. If the list is empty, the function should return None.","solution":"def sum_abs_mult_sign(nums): Given a list of integers, returns the sum of the absolute values of all the integers in the list, multiplied by the sign of the product of all the integers. If the product is 0, returns 0. If the list is empty, returns None. if not nums: return None product = 1 for num in nums: product *= num if product == 0: return 0 abs_sum = sum(abs(num) for num in nums) sign = 1 if product > 0 else -1 return abs_sum * sign"},{"question":"Create a function that calculates the number of non-overlapping occurrences of a substring within a given string. The function should be case-insensitive. For example, if the substring is 'abc' and the string is 'Abcabc', the function should return 2.","solution":"import re def count_substring_occurrences(string, substring): Returns the number of non-overlapping occurrences of a substring within a given string, case-insensitive. pattern = re.compile(re.escape(substring), re.IGNORECASE) return len(pattern.findall(string))"},{"question":"Create a function that takes a string as input and returns the longest palindromic prefix of the string. A palindromic prefix is a prefix that when reversed, matches the rest of the string. For example, \\"abba\\" is a palindromic prefix of \\"abcba\\".","solution":"def longest_palindromic_prefix(s): Returns the longest palindromic prefix of the string s. for i in range(len(s), 0, -1): prefix = s[:i] if prefix == prefix[::-1]: return prefix return \\"\\""},{"question":"Create a function that checks if a given string contains any duplicate characters. The string will only contain lowercase alphabetic characters.","solution":"def has_duplicate_characters(s): Returns True if the string s contains any duplicate characters, otherwise False. return len(s) != len(set(s))"},{"question":"Create a function that receives a list of integers, sorts them in descending order, and returns the top 3 largest numbers. If the list contains less than 3 numbers, it should return all the numbers sorted in descending order.","solution":"def top_three_largest_numbers(numbers): Returns the top 3 largest numbers from the list sorted in descending order. If the list contains less than 3 numbers, returns all numbers sorted in descending order. sorted_numbers = sorted(numbers, reverse=True) return sorted_numbers[:3]"},{"question":"Create a function that checks whether an integer is negative, positive or zero. If the integer is negative, return \\"Negative\\"; if the integer is positive, return \\"Positive\\"; and if the integer is zero, return \\"Zero\\".","solution":"def check_integer_sign(num): Checks whether an integer is negative, positive or zero. Parameters: num (int): The integer to check. Returns: str: \\"Negative\\" if num is negative, \\"Positive\\" if num is positive, \\"Zero\\" if num is zero. if num < 0: return \\"Negative\\" elif num > 0: return \\"Positive\\" else: return \\"Zero\\""},{"question":"Create a function that checks if all numbers in a list are even. If not, the function should return the first odd number it finds. If all numbers are even, it should return \\"All numbers are even\\".","solution":"def check_even_numbers(lst): Checks if all numbers in the list are even. Returns the first odd number found if any, else \\"All numbers are even\\". for number in lst: if number % 2 != 0: return number return \\"All numbers are even\\""},{"question":"Create a function that takes in a list of integers and a target integer. The function should return the number of pairs in the list that sum up to the target. If no pair sums up to the target, the function should return 0.","solution":"def count_pairs_with_sum(nums, target): Returns the number of pairs in the list that sum up to the target. Args: nums (list of int): List of integers. target (int): Target sum. Returns: int: Number of pairs that sum up to the target. count = 0 seen = {} for num in nums: complement = target - num if complement in seen: count += seen[complement] if num in seen: seen[num] += 1 else: seen[num] = 1 return count"},{"question":"Create a function that takes a dictionary of string keys and integer values. The function should return a new dictionary where each key-value pair is doubled. That is, the value for each key in the new dictionary should be twice the value of the corresponding key in the input dictionary.","solution":"def double_values(d): Given a dictionary d with string keys and integer values, returns a new dictionary with each value doubled. return {k: v * 2 for k, v in d.items()}"},{"question":"Create a function that takes a string as input and outputs the frequency of each character in the string. If the character is a digit or special character, it should be ignored and not counted in the output.","solution":"def char_frequency(s): Returns the frequency of each alphabetic character in the string s, ignoring digits and special characters. frequency = {} for char in s: if char.isalpha(): char = char.lower() if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"Create a function that returns the maximum value from either a given array of integers or a number.","solution":"def max_value(input_data): Returns the maximum value, whether the input is a single number or a list of numbers. Args: input_data: A number or a list of numbers. Returns: The maximum value found. if isinstance(input_data, list): return max(input_data) else: return input_data"},{"question":"Create a function that takes two numbers and returns the largest number.","solution":"def find_largest(a, b): Returns the largest number between a and b. return a if a > b else b"},{"question":"Create a function that takes in an integer \`n\`. The function should return the sum of all even numbers from 0 to n (inclusive).","solution":"def sum_even(n): Returns the sum of all even numbers from 0 to n (inclusive). return sum(i for i in range(0, n+1) if i % 2 == 0)"},{"question":"Create a function that calculates the difference between two numbers.","solution":"def difference(a, b): Returns the difference between a and b. return a - b"},{"question":"Create a function that takes an integer and returns the sum of all numbers from 1 to that integer. How can we use recursion to achieve this?","solution":"def sum_to_n(n): Returns the sum of all numbers from 1 to n using recursion. if n <= 0: return 0 return n + sum_to_n(n-1)"},{"question":"Create a function that checks if a given integer is a perfect square. A perfect square is an integer that is the square of another integer. For example, 1, 4, 9, and 16 are perfect squares, while 2, 3, and 5 are not. Write a function in Python that takes an integer as input and returns \`True\` if the integer is a perfect square, and \`False\` otherwise. Ensure that the function handles both positive and negative integers, and returns \`False\` for negative numbers since they cannot be perfect squares.","solution":"import math def is_perfect_square(n): Returns True if n is a perfect square, False otherwise. A perfect square is an integer that is the square of another integer. if n < 0: return False sqrt_n = math.isqrt(n) return sqrt_n * sqrt_n == n"},{"question":"Create a function that takes a non-empty, sorted array of integers and a target integer. Return the index of the target in the array if the target is present in the array, and return -1 otherwise. Assume that the input array is sorted in non-decreasing order. You should implement the binary search algorithm to solve this problem.","solution":"def binary_search(arr, target): Returns the index of target in arr if present, otherwise returns -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Create a function that takes in a list of strings and returns the length of the string with the most words. Words in the strings are separated by spaces. For example, the list [\\"hello world\\", \\"hello there\\", \\"hi\\"] should return 2 because the first string has the most words (2 words).","solution":"def length_of_most_words(strings): Returns the length of the string with the most words. Arguments: strings -- List of strings Returns: Integer representing number of words in the string with the most words if not strings: # If the list is empty, return 0 return 0 max_words = 0 for string in strings: word_count = len(string.split()) if word_count > max_words: max_words = word_count return max_words"},{"question":"Create a function that takes an integer as input and returns the reverse of that integer. If the reversed integer overflows, return 0. An integer overflows if it is outside the range [-2^31, 2^31 - 1].","solution":"def reverse_integer(x): Reverses the digits of an integer x. If the reversed integer overflows, returns 0. The overflow range is beyond [-2^31, 2^31 - 1]. INT_MIN, INT_MAX = -2**31, 2**31 - 1 # Handle negative numbers by using a flag and taking absolute value neg_flag = -1 if x < 0 else 1 x *= neg_flag # Reverse the digits reversed_num = int(str(x)[::-1]) * neg_flag # Check for overflow if reversed_num < INT_MIN or reversed_num > INT_MAX: return 0 return reversed_num"},{"question":"Create a function that duplicates the elements of a list. For example, doubling the list [1, 2, 3] should return [1, 1, 2, 2, 3, 3]. You should use recursion to solve this problem. How would you approach this using Python?","solution":"def duplicate_elements(lst): Duplicates each element of the given list using recursion. if not lst: return [] return [lst[0], lst[0]] + duplicate_elements(lst[1:])"},{"question":"Create a function that generates the Fibonacci sequence up to the nth term. The sequence should be returned as an array.","solution":"def fibonacci(n): Returns the Fibonacci sequence up to the nth term. :param n: The number of terms in the Fibonacci sequence to generate. :type n: int :return: A list containing the Fibonacci sequence up to the nth term. :rtype: list if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] sequence = [0, 1] for i in range(2, n): sequence.append(sequence[-1] + sequence[-2]) return sequence"},{"question":"Create a function that reads and writes to a file using Python. The function should read from a file and append the read content to the end of the same file. The function should handle potential file-related errors and should be able to handle any text file.","solution":"def read_and_append(filename): Reads the content from the given file and appends the read content to the end of the file. Handles potential file-related errors. Args: filename: str - The path to the file to be read and appended. Raises: FileNotFoundError: If the specified file does not exist. IOError: If an error occurs during file reading or writing. try: with open(filename, 'r') as file: content = file.read() with open(filename, 'a') as file: file.write(content) except FileNotFoundError as fnf_error: print(f\\"Error: {fnf_error}\\") except IOError as io_error: print(f\\"Error: {io_error}\\")"},{"question":"Create a function that accepts two parameters: a string (text) and an integer (num). The function should return the string text repeated num times. If num is less than 1, the function should return an empty string.","solution":"def repeat_string(text, num): Returns the string 'text' repeated 'num' times. If 'num' is less than 1, returns an empty string. Parameters: text (str): The string to be repeated. num (int): Number of times to repeat the string. Returns: str: The repeated string. if num < 1: return \\"\\" return text * num"},{"question":"Create a function that takes a string as a parameter and prints each character in the string in reverse order. How would you implement this function in Python?","solution":"def reverse_string_characters(s): Prints each character of the string s in reverse order, each on a new line. for char in reversed(s): print(char)"},{"question":"Create a function that adds a new node to a binary search tree (BST). The function should take three parameters: the root of the BST, the value of the new node to be added, and a boolean indicating whether the new node should be added as the left child or the right child. If the child position is not specified, the new node should be added based on the value, ensuring it follows the BST property.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def add_node(root, value, left_child=None): Adds a new node to the binary search tree. Parameters: root (TreeNode): The root of the binary search tree. value (int): The value of the new node to be added. left_child (bool or None): Indicates whether to add the new node as a left (True) or right (False) child. If None, the value will be added following the BST property. Returns: TreeNode: The root of the binary search tree after the node is added. if root is None: return TreeNode(value) if left_child is not None: if left_child: root.left = TreeNode(value) else: root.right = TreeNode(value) else: if value < root.value: if root.left is None: root.left = TreeNode(value) else: add_node(root.left, value) else: if root.right is None: root.right = TreeNode(value) else: add_node(root.right, value) return root"},{"question":"Create a function that finds the first repeating element in a list. If no element is repeated, return -1.","solution":"def first_repeating_element(lst): Returns the first repeating element in a list. If no element is repeated, returns -1. seen = set() for elem in lst: if elem in seen: return elem seen.add(elem) return -1"},{"question":"Create a function that counts the number of objects with a specific attribute value in a given list of Python objects. I also need this function to handle cases where the attribute may be \`None\` or \`NoneType\`.","solution":"def count_objects_with_attribute(objects, attribute, value): Counts the number of objects in the list 'objects' where the given 'attribute' is equal to the specified 'value'. Handles cases where the attribute may be None or NoneType. :param objects: List of objects to check :param attribute: Attribute to check in each object :param value: Value to check the attribute against :return: Number of objects with the specified attribute value count = 0 for obj in objects: if getattr(obj, attribute, None) == value: count += 1 return count"},{"question":"Create a function that takes an array of integers and returns the sum of all the negative integers in the array. If there are no negative integers, the function should return 0.","solution":"def sum_of_negatives(arr): Returns the sum of all negative integers in the array. If there are no negative integers, returns 0. return sum(x for x in arr if x < 0)"},{"question":"Create a function that takes in two sorted arrays and returns the merged sorted array. The arrays can have different sizes.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into one sorted array. Args: arr1: List[int] - First sorted array. arr2: List[int] - Second sorted array. Returns: List[int] - Merged sorted array. merged_array = [] i, j = 0, 0 while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 while i < len(arr1): merged_array.append(arr1[i]) i += 1 while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"Create a function that calculates the factorial of a given number using recursion. Additionally, demonstrate how to call this function and handle cases where the input is not a non-negative integer.","solution":"def factorial(n): Returns the factorial of a given non-negative integer n using recursion. Raises ValueError if the input is not a non-negative integer. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Create a function that returns the result of a^b mod p using modular exponentiation. The function should avoid large intermediate results that could cause overflow or excessive computation time. To achieve this, use the properties of modular arithmetic to optimize the calculation.","solution":"def modular_exponentiation(a, b, p): Returns the result of (a^b) mod p using modular exponentiation. result = 1 a = a % p while b > 0: if b % 2 == 1: # If b is odd, multiply a with result result = (result * a) % p b = b >> 1 # Divide b by 2 a = (a * a) % p # Square the base return result"},{"question":"Create a function that validates a date string in the format \\"YYYY-MM-DD\\". The function should check if the date is a valid date according to the Gregorian calendar and return \`True\` if the date is valid, and \`False\` otherwise.","solution":"import datetime def validate_date(date_string): Validates if the date string is in the format \\"YYYY-MM-DD\\" and is a valid date according to the Gregorian calendar. Args: date_string (str): The date string to validate. Returns: bool: True if the date is valid, False otherwise. try: datetime.datetime.strptime(date_string, '%Y-%m-%d') return True except ValueError: return False"},{"question":"Create a function that generates all possible subsets of a given list of integers. The function should return a list of lists, where each inner list represents a possible subset.","solution":"def generate_subsets(nums): Generates all possible subsets of a given list of integers. :param nums: List of integers :return: List of lists, each representing a possible subset subsets = [[]] for num in nums: subsets += [curr + [num] for curr in subsets] return subsets"},{"question":"Create a function that converts a given string to snake case. In snake case, words are lowercase and separated by underscores. For example, \\"Hello World\\" should be converted to \\"hello_world\\".","solution":"def to_snake_case(s): Converts a given string to snake case. Parameters: s (str): The input string. Returns: str: The string in snake case. return '_'.join(s.lower().split())"},{"question":"Create a function that takes in a list of numbers and returns the sum of all even numbers in the list. If there are no even numbers, the function should return 0. Provide examples of how to use this function.","solution":"def sum_of_even_numbers(numbers): Returns the sum of all even numbers in the list. If there are no even numbers, returns 0. :param numbers: List of integers :return: Sum of all even integers in the list return sum(num for num in numbers if num % 2 == 0)"},{"question":"Create a function that sorts a list of strings in Python using a radix sort algorithm. Radix sort works by sorting the strings digit by digit starting from the least significant digit to the most significant digit. For simplicity, assume that the strings are composed of digits and lowercase letters only. The sorting should be case-sensitive.","solution":"def radix_sort_strings(arr): Sorts a list of strings using radix sort algorithm. Assumes strings are composed of digits and lowercase letters only. if not arr: return [] max_length = max(len(s) for s in arr) # Perform counting sort for each digit from least significant to most significant for digit_index in range(max_length - 1, -1, -1): buckets = [[] for _ in range(36)] for string in arr: # Extract character at the current digit_index, pad with '0' if string is short char = string[digit_index] if digit_index < len(string) else '0' # Determine index for bucket: 0-9 for '0'-'9' and 10-35 for 'a'-'z' if char.isdigit(): index = ord(char) - ord('0') else: index = ord(char) - ord('a') + 10 buckets[index].append(string) # Flatten the list of buckets back into arr arr = [string for bucket in buckets for string in bucket] return arr"},{"question":"Create a function that reads a file and counts the number of occurrences of each word in the file. Return the counts in a dictionary where the keys are the words and the values are the counts. Assume that the file has one word per line and that there are no punctuation marks.","solution":"def count_word_occurrences(file_path): Reads a file and counts the number of occurrences of each word. Returns a dictionary where keys are words and values are the counts. Assumes the file has one word per line. word_counts = {} with open(file_path, 'r') as file: for line in file: word = line.strip() if word in word_counts: word_counts[word] += 1 else: word_counts[word] = 1 return word_counts"},{"question":"Create a function that takes a string of alphabets as input and returns the string with all the consonants in uppercase and all the vowels in lowercase. You should also include a main function to test your function with several strings.","solution":"def transform_string(input_str): This function takes a string of alphabets as input and returns the string with all the consonants in uppercase and all the vowels in lowercase. Parameters: input_str (str): The input string containing alphabets Returns: str: The transformed string with consonants in uppercase and vowels in lowercase vowels = 'aeiouAEIOU' result = '' for char in input_str: if char in vowels: result += char.lower() else: result += char.upper() return result def main(): # Main function to test transform_string function with several strings test_strings = [ \\"alphabet\\", \\"hello world\\", \\"PYTHON\\", \\"Testing123\\", \\"vowelsAndConsonants\\", ] for s in test_strings: print(f\\"Original: {s} -> Transformed: {transform_string(s)}\\") if __name__ == \\"__main__\\": main()"},{"question":"Create a function that takes a list of integers and returns the sum of the elements that are greater than 5.","solution":"def sum_greater_than_five(numbers): Returns the sum of elements in the list that are greater than 5. Parameters: numbers (list): A list of integers. Returns: int: The sum of integers greater than 5. return sum(num for num in numbers if num > 5)"},{"question":"Create a function that takes a list of integers and returns the sum of all the elements. If the list contains any non-integer elements, the function should handle them gracefully and return an error message.","solution":"def sum_of_elements(lst): Returns the sum of all integers in the list. If the list contains any non-integer elements, returns an error message. if not all(isinstance(x, int) for x in lst): return \\"Error: List contains non-integer elements\\" return sum(lst)"},{"question":"Create a function that takes a list of integers as input, calculates the sum of these integers, and then finds the largest integer in the list.","solution":"def sum_and_max(nums): Returns the sum of integers in the list and the largest integer in the list. total_sum = sum(nums) if nums: max_num = max(nums) else: max_num = None return total_sum, max_num"},{"question":"Create a function that finds the index of the element with the maximum value in a sorted array. The function should also return the value of that element. If the array is empty, the function should return an error message. The function should handle both even and odd length arrays, as well as any array where the maximum value is not necessarily at the end or beginning of the array.","solution":"def find_max_index_and_value(arr): Returns the index and value of the maximum element in a sorted array. If the array is empty, returns an error message. Assumes the input array is sorted (in non-decreasing order). if not arr: return \\"Error: The array is empty\\" max_value = arr[-1] max_index = len(arr) - 1 return max_index, max_value"},{"question":"Create a function that calculates the sum and average of a list of numbers in Python. The function should return the sum and the average of the list. You can assume that the list is not empty.","solution":"def sum_and_average(numbers): Returns the sum and average of a list of numbers. Parameters: numbers (list): A list of numbers (int or float). Returns: tuple: A tuple containing the sum and average of the list. total_sum = sum(numbers) average = total_sum / len(numbers) return total_sum, average"},{"question":"Create a function that takes an integer n as input and returns a string that represents the binary equivalent of n, but with each bit separated by a space for better readability. For example, for input 5, the function should return the string \\"1 0 1\\".","solution":"def spaced_binary(n): Returns a string that represents the binary equivalent of n, but with each bit separated by a space for better readability. binary_str = bin(n)[2:] # Convert to binary and strip the '0b' prefix spaced = ' '.join(binary_str) # Join each character with a space return spaced"},{"question":"Create a function that checks if a given array can be partitioned into two subsets such that the sum of elements in both subsets is equal. This is known as the \\"Partition Equal Subset Sum\\" problem. The function should return \`true\` if it's possible, otherwise \`false\`.","solution":"def can_partition(nums): Determines if the given list of numbers can be partitioned into two subsets with equal sum. total_sum = sum(nums) # If the total sum is odd, it's not possible to partition into two equal subsets if total_sum % 2 != 0: return False target_sum = total_sum // 2 n = len(nums) # DP array to store whether a certain sum can be achieved or not dp = [False] * (target_sum + 1) dp[0] = True # we can always achieve 0 sum by taking no elements # Iterate through the numbers, updating the dp array for num in nums: for i in range(target_sum, num - 1, -1): dp[i] = dp[i] or dp[i - num] return dp[target_sum]"},{"question":"Create a function that takes a list of tuples as an input, where each tuple contains two integers. Implement a function to compare the tuples based on the sum of the integers in each tuple. The function should return a new list of tuples sorted in descending order of their sums.","solution":"def sort_tuples_by_sum(tuples_list): Sorts a list of tuples in descending order based on the sum of the integers in each tuple. :param tuples_list: List of tuples, where each tuple contains two integers :return: List of tuples sorted in descending order based on their sums return sorted(tuples_list, key=lambda x: x[0] + x[1], reverse=True)"},{"question":"Create a function that takes in a string and returns a new string as output that has been 'defanged' or replaced with periods. The function should replace all instances of the character 'a' with '.', while preserving the case of the letters and maintaining the original order of the other characters in the string.","solution":"def defang_string(input_string): Takes a string and replaces all instances of 'a' with '.' retaining the order of other characters. :param input_string: str: The input string to be defanged. :return: str: The defanged string with 'a' replaced with '.'. return input_string.replace('a', '.')"},{"question":"Create a function that returns an array containing the first \`n\` Fibonacci numbers. The Fibonacci sequence starts with two 1s, and each subsequent number is the sum of the preceding two. For example, for \`n = 10\`, the function should return \`[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\`.","solution":"def fibonacci(n): Returns an array containing the first \`n\` Fibonacci numbers. Parameters: n (int): The number of Fibonacci numbers to generate. Returns: list: A list containing the first \`n\` Fibonacci numbers. if n <= 0: return [] elif n == 1: return [1] fib_sequence = [1, 1] while len(fib_sequence) < n: fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"Create a function that takes a list of binary strings and returns a list of the same binary strings, but with the first bit of each string changed to '1'.","solution":"def change_first_bit_to_one(binary_strings): Takes a list of binary strings and returns a list of the same binary strings, but with the first bit of each string changed to '1'. if not all(isinstance(s, str) and set(s).issubset({'0', '1'}) for s in binary_strings): raise ValueError(\\"All elements in the list must be binary strings\\") return ['1' + s[1:] if s else s for s in binary_strings]"},{"question":"Create a function that takes a list of numbers as an argument and returns a new list where each element is the factorial of the corresponding element in the input list.","solution":"from math import factorial def list_factorials(numbers): Returns a list where each element is the factorial of the corresponding element in the input list. :param numbers: List of numbers. :return: List of factorials of the given numbers. return [factorial(num) for num in numbers]"},{"question":"Create a function that identifies whether a given number is even, odd, or prime. If the number is even, return \\"Even\\". If the number is odd, return \\"Odd\\". If the number is prime, return \\"Prime\\". A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.","solution":"def check_number_type(n): Identifies whether a given number is even, odd, or prime. Returns \\"Even\\" if the number is even, \\"Odd\\" if the number is odd, and \\"Prime\\" if the number is prime. if n <= 1: return \\"Odd\\" if n % 2 != 0 else \\"Even\\" if n == 2: return \\"Prime\\" if n % 2 == 0: return \\"Even\\" # Check if n is prime for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return \\"Odd\\" return \\"Prime\\""},{"question":"Create a function that sorts an array of integers in ascending order. Solve this problem using Python.","solution":"def sort_array(arr): Returns the array sorted in ascending order. return sorted(arr)"},{"question":"Create a function that evaluates the prefix expression (also known as Polish notation) and returns its value. The prefix expression is a notation method where the operator is placed before the operands. You should handle binary operators (^, '*', '/', '+', '-',就会出现这些情况).","solution":"def evaluate_prefix(expression): Evaluates a given prefix expression and returns its value. stack = [] # Split the expression into tokens tokens = expression.split() # Reverse the list to start scanning from the right tokens = tokens[::-1] # Define operators with corresponding lambda functions operators = { '^': lambda x, y: x ** y, '*': lambda x, y: x * y, '/': lambda x, y: x / y, '+': lambda x, y: x + y, '-': lambda x, y: x - y, } for token in tokens: if token in operators: # Pop the last two elements from the stack operand1 = stack.pop() operand2 = stack.pop() # Apply the operator and push the result onto the stack result = operators[token](operand1, operand2) stack.append(result) else: # Convert the token to a number and push it onto the stack stack.append(float(token) if '.' in token else int(token)) # The final result should be the only element left in the stack return stack.pop()"},{"question":"Create a function that takes a list of unique integers as its input and returns a list of all possible subsets of the given set, including the empty set. How can you solve this problem and verify its correctness?","solution":"from itertools import chain, combinations def get_all_subsets(s): Returns all possible subsets of a set of unique integers including the empty set. return list(chain.from_iterable(combinations(s, r) for r in range(len(s)+1)))"},{"question":"Create a function that returns the current Unix timestamp in milliseconds. In Python, how would this be done? You do not need to worry about errors in this problem.","solution":"import time def current_unix_timestamp_millis(): Returns the current Unix timestamp in milliseconds. return int(time.time() * 1000)"},{"question":"Create a function that reads a file named \\"input.txt\\" and prints its contents line by line. The function should handle the case where the file does not exist or is empty.","solution":"def read_file_and_print(): Reads a file named 'input.txt' and prints its contents line by line. Handles the case where the file does not exist or is empty. try: with open('input.txt', 'r') as file: lines = file.readlines() if not lines: print(\\"The file is empty.\\") for line in lines: print(line.strip()) except FileNotFoundError: print(\\"The file 'input.txt' does not exist.\\")"},{"question":"Create a function that finds the minimum element in a given list of integers. You may use any programming language you are comfortable with.","solution":"def find_minimum(lst): Finds and returns the minimum element in a given list of integers. Parameters: lst (list of int): List of integers Returns: int: Minimum element in the list if not lst: raise ValueError(\\"The list is empty\\") return min(lst)"},{"question":"Create a function that takes a string as an argument and returns the string with all vowels removed. You should consider both uppercase and lowercase vowels ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U').","solution":"def remove_vowels(s): Removes all vowels from the input string. Parameters: s (str): The input string. Returns: str: The input string with all vowels removed. vowels = \\"aeiouAEIOU\\" return ''.join(char for char in s if char not in vowels)"},{"question":"Create a function that takes in 2 arrays/list of integers and checks if the arrays contain a common integer.","solution":"def has_common_element(arr1, arr2): Checks if two arrays contain a common integer. :param arr1: List[int] - First list of integers :param arr2: List[int] - Second list of integers :return: bool - True if there is at least one common integer, False otherwise set1 = set(arr1) set2 = set(arr2) return not set1.isdisjoint(set2)"},{"question":"Create a function that takes a list of integers and returns the sum of all positive integers in the list. Only consider integers greater than zero as positive.","solution":"def sum_of_positive_integers(numbers): Returns the sum of all positive integers in the given list. Args: numbers (list of int): List of integers. Returns: int: Sum of all positive integers in the list. return sum(num for num in numbers if num > 0)"},{"question":"Create a function that takes a string in the format \\"user1|user2|user3\\" and separates the users into a list. The users can be separated by either a '|' or a ' ' (space). The function should return the list of users.","solution":"def separate_users(user_string): Takes a string in the format \\"user1|user2 user3\\" and separates the users into a list. The users can be separated by either a '|' or a ' ' (space). :param user_string: string containing users separated by '|' or ' ' :return: list of users if not user_string: return [] user_list = user_string.replace('|', ' ').split() return user_list"},{"question":"Create a function that takes a sentence as a parameter and returns the most frequent word in that sentence. If there are multiple words with the same highest frequency, return all such words as a list. If the sentence is empty, return an empty list.","solution":"def most_frequent_words(sentence): Returns the most frequent word(s) in the given sentence. If there are multiple words with the same highest frequency, returns all such words as a list. If the sentence is empty, returns an empty list. if not sentence: return [] words = sentence.split() word_count = {} for word in words: word_count[word] = word_count.get(word, 0) + 1 max_frequency = max(word_count.values()) most_frequent = [word for word, count in word_count.items() if count == max_frequency] return most_frequent"},{"question":"Create a function that adds an integer (n) to each element in a list called \\"my_list\\", then return the modified list.","solution":"def add_to_each(my_list, n): Adds an integer n to each element in the list my_list. :param my_list: List of integers :param n: Integer to add to each element in my_list :return: New list with n added to each element return [x + n for x in my_list]"},{"question":"Create a function that generates the nth Fibonacci number in Python, where n is a positive integer. The function should handle large values of n efficiently by using memoization.","solution":"def fibonacci(n, memo={}): Returns the nth Fibonacci number using memoization. if n in memo: return memo[n] if n <= 2: return 1 memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n]"},{"question":"Create a function that takes a string as input and returns a list of all the words in the string. Assume that words are separated by spaces.","solution":"def extract_words(string): Returns a list of words from the input string. return string.split()"},{"question":"Create a function that finds the sum of all positive integer divisors of a given number. The function should take an integer as input and return the sum of all its positive divisors, excluding the number itself. For example, for the number 12, the divisors (excluding 12) are 1, 2, 3, 4, and 6, and their sum is 16.","solution":"def sum_of_divisors(n): Returns the sum of all positive divisors of n, excluding n itself. if n <= 0: return 0 divisors_sum = 0 for i in range(1, n): if n % i == 0: divisors_sum += i return divisors_sum"},{"question":"Create a function that takes two integers as input, performs addition, and returns the result.","solution":"def add(a, b): Returns the sum of a and b. return a + b"},{"question":"Create a function that calculates the total mark of a student from their individual marks in different subjects. The function should accept a dictionary where the keys are subject names and the values are the marks obtained. The function should return the total mark. Additionally, include error handling to ensure that the dictionary is not empty and that all values are non-negative integers.","solution":"def calculate_total_marks(marks): Calculate the total marks of a student from their individual marks in different subjects. :param marks: Dictionary where keys are subject names and the values are the marks obtained. :return: Total marks if valid; raises ValueError if the marks dictionary is empty or contains invalid marks. if not marks: raise ValueError(\\"The marks dictionary cannot be empty.\\") total = 0 for subject, mark in marks.items(): if not isinstance(mark, int) or mark < 0: raise ValueError(f\\"The mark for {subject} must be a non-negative integer.\\") total += mark return total"},{"question":"Create a function that takes a list of dictionaries and returns a new list containing only the dictionaries where the 'age' key has a value greater than 30.","solution":"def filter_age_greater_than_30(dicts_list): Filters the dictionaries in the provided list where the 'age' key has a value greater than 30. Parameters: dicts_list (list): A list of dictionaries. Returns: list: A list of dictionaries where the 'age' key has a value greater than 30. return [d for d in dicts_list if 'age' in d and d['age'] > 30]"},{"question":"Create a function that takes two integers as input and returns the maximum difference between any two elements in the array. For example, given the array [10, 9, 4, 5, 4, 8, 6], the maximum difference can be found between 10 and 4, which is 6. Another example is the array [7, 9, 5, 6, 3, 2], where the maximum difference can be found between 9 and 2, which is 7. **Note:** The function should have a time complexity of linear or better, and it must handle negative numbers as well.","solution":"def max_difference(arr): Returns the maximum difference between any two elements in the array. if not arr or len(arr) < 2: return 0 min_val = float('inf') max_val = float('-inf') for num in arr: if num < min_val: min_val = num if num > max_val: max_val = num return max_val - min_val"},{"question":"Create a function that takes in an integer \`n\` and returns a sorted list of all positive integers that evenly divide \`n\` without leaving a remainder. The list should include 1 and \`n\` itself.","solution":"def divisors(n): Returns a sorted list of all positive integers that evenly divide n without leaving a remainder. The list includes 1 and n itself. if n < 1: raise ValueError(\\"Input must be a positive integer\\") return sorted([i for i in range(1, n + 1) if n % i == 0])"},{"question":"Create a function that takes in two strings and returns a new string that is the result of alternating characters from the two input strings. If one string is longer than the other, append the remaining characters of the longer string to the result.","solution":"def alternate_strings(str1, str2): Returns a new string by alternating characters from the two input strings. If one string is longer, append the remaining characters of the longer string. result = [] len1, len2 = len(str1), len(str2) for i in range(min(len1, len2)): result.append(str1[i]) result.append(str2[i]) if len1 > len2: result.append(str1[len2:]) else: result.append(str2[len1:]) return ''.join(result)"},{"question":"Create a function that checks if a given number is a perfect square. If it is, return the number. If not, return the closest perfect square. If there are two equally close perfect squares, return the lower one.","solution":"import math def closest_perfect_square(n): Checks if a given number is a perfect square. If it is, return the number. If not, return the closest perfect square. If there are two equally close perfect squares, return the lower one. if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") sqrt_n = int(math.sqrt(n)) # Check if n is already a perfect square perfect_square = sqrt_n * sqrt_n if perfect_square == n: return n # Check the two closest perfect squares next_perfect_square = (sqrt_n + 1) * (sqrt_n + 1) # Determine which of the two perfect squares is closer if abs(perfect_square - n) <= abs(next_perfect_square - n): return perfect_square else: return next_perfect_square"},{"question":"Create a function that takes a list of integers and returns the sum of all numbers in the list. If the list is empty, the function should return 0. Make sure to include a docstring that explains the purpose of the function.","solution":"def sum_list(numbers): Returns the sum of all numbers in the given list of integers. If the list is empty, returns 0. Parameters: numbers (list of int): A list containing integers. Returns: int: The sum of all integers in the list, or 0 if the list is empty. return sum(numbers)"},{"question":"Create a function that takes a list of integers and returns a new list where each integer is replaced by its frequency in the original list.","solution":"def frequencies(nums): Returns a list where each integer is replaced by its frequency in the original list. from collections import Counter count = Counter(nums) return [count[num] for num in nums]"},{"question":"Create a function that accepts a dictionary as an argument and returns another dictionary with the keys and values reversed. For instance, if the input is {'a': 1, 'b': 2, 'c': 3}, the output should be {1: 'a', 2: 'b', 3: 'c'}.","solution":"def reverse_dict(input_dict): Returns a dictionary with keys and values reversed. Args: input_dict (dict): The input dictionary. Returns: dict: A dictionary with keys and values reversed. return {v: k for k, v in input_dict.items()}"},{"question":"Create a function that takes in a string \`input_str\` and two integers \`a\` and \`b\`. The function should return a boolean indicating whether the characters in \`input_str\` between the indices \`a\` and \`b\` (inclusive) are palindromic. A palindromic string reads the same from left to right and right to left.","solution":"def is_palindromic_substring(input_str, a, b): Returns True if the substring of \`input_str\` from index \`a\` to \`b\` (inclusive) is a palindrome. substring = input_str[a:b+1] return substring == substring[::-1]"},{"question":"Create a function that takes two integers as input and returns their Euclidean distance.","solution":"import math def euclidean_distance(x, y): Returns the Euclidean distance between two integers x and y. return math.sqrt((x - y) ** 2)"},{"question":"Create a function that plots a graph of a given polynomial given its coefficients. The function should take a list of coefficients as a parameter and plot the graph using the matplotlib library in Python. The coefficients are in descending order, i.e., the first coefficient is for the highest degree term and the last coefficient is for the constant term.","solution":"import matplotlib.pyplot as plt import numpy as np def plot_polynomial(coefficients): Plots a polynomial graph given its coefficients. Parameters: coefficients (list): List of polynomial coefficients in descending order of powers # Generate x values x = np.linspace(-10, 10, 400) # Generate polynomial y values y = np.polyval(coefficients, x) # Plotting the polynomial plt.plot(x, y, label=f\\"Polynomial: {coefficients}\\") plt.xlabel(\\"x\\") plt.ylabel(\\"y\\") plt.title('Polynomial Graph') plt.legend() plt.grid(True) plt.show()"},{"question":"Create a function that takes a list of integers and returns the sum of all numbers that appear more than once in the list. If no number appears more than once, the function should return 0.","solution":"def sum_of_repeated_numbers(nums): Returns the sum of integers that appear more than once in the list. If no number appears more than once, returns 0. from collections import Counter count = Counter(nums) return sum(num for num, cnt in count.items() if cnt > 1)"},{"question":"Create a function that takes two arguments a and b, and returns the sum of all numbers in the range between a and b (inclusive). Use Python.","solution":"def sum_range(a, b): Returns the sum of all numbers in the range between a and b (inclusive). if a > b: a, b = b, a # Ensure a is less than or equal to b return sum(range(a, b + 1))"},{"question":"Create a function that takes a string as input and returns the string with all special characters removed.","solution":"import re def remove_special_characters(s): Remove all special characters from the input string. return re.sub(r'[^A-Za-z0-9 ]+', '', s)"},{"question":"Create a function that takes in two integers and returns the nearest common ancestor (NCA) for both the integers, given they are both part of a Binary Search Tree (BST). How can you solve this problem by first finding the path from the root to each node?","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def find_path(root, path, k): if root is None: return False path.append(root) if root.val == k: return True if ((root.left != None and find_path(root.left, path, k)) or (root.right != None and find_path(root.right, path, k))): return True path.pop() return False def find_nearest_common_ancestor(root, n1, n2): path1 = [] path2 = [] if (not find_path(root, path1, n1) or not find_path(root, path2, n2)): return None i = 0 while (i < len(path1) and i < len(path2)): if path1[i].val != path2[i].val: break i += 1 return path1[i-1].val"},{"question":"Create a function that will accept an array of integers and return the count of positive numbers and the count of negative numbers separately.","solution":"def count_positive_and_negative(numbers): Returns a tuple with the count of positive numbers and the count of negative numbers in the given list. Args: numbers (list of int): The list of integers to be evaluated. Returns: tuple: A tuple where the first element is the count of positive numbers and the second element is the count of negative numbers. positive_count = sum(1 for number in numbers if number > 0) negative_count = sum(1 for number in numbers if number < 0) return positive_count, negative_count"},{"question":"Create a function that returns the first \\"n\\" prime numbers as a list. The function should be optimized for performance.","solution":"def get_first_n_primes(n): Returns the first 'n' prime numbers as a list. if n <= 0: return [] primes = [] candidate = 2 while len(primes) < n: is_prime = True for prime in primes: if candidate % prime == 0: is_prime = False break if is_prime: primes.append(candidate) candidate += 1 return primes"},{"question":"Create a function that checks whether a given number is prime. If the number is prime, return the number itself; if not, return the smallest prime factor. If the number is less than 2, return -1.","solution":"def is_prime_or_smallest_prime_factor(n): Checks whether a given number is prime. If the number is prime, return the number itself; if not, return the smallest prime factor. If the number is less than 2, return -1. if n < 2: return -1 if n == 2: return 2 if n % 2 == 0: return 2 for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return i return n"},{"question":"Create a function that takes two integers as input and returns their sum. If the sum is greater than 100, return the sum, otherwise return the result of the sum minus 10.","solution":"def custom_sum(a, b): Returns the sum of a and b. If the sum is greater than 100, returns the sum. Otherwise, returns the result of the sum minus 10. total = a + b if total > 100: return total else: return total - 10"},{"question":"Create a function that takes a list of integers as an input and returns the sum of all the numbers in the list. Can you also include error handling if the input is not a list of integers?","solution":"def sum_of_list(numbers): Returns the sum of all the integers in the list. Raises a TypeError if input is not a list or contains non-integer elements. if not isinstance(numbers, list): raise TypeError(\\"Input must be a list.\\") if not all(isinstance(num, int) for num in numbers): raise TypeError(\\"All elements in the list must be integers.\\") return sum(numbers)"},{"question":"Create a function that takes two strings as an argument and return their concatenation. In Python, what is the most efficient way to concatenate two strings using a function?","solution":"def concatenate_strings(str1, str2): Returns the concatenation of str1 and str2. return str1 + str2"},{"question":"Create a function that implements the Insertion Sort algorithm in Python. Please provide the code for this function.","solution":"def insertion_sort(arr): Sorts an array using the insertion sort algorithm. Args: arr (list): A list of elements to be sorted. Returns: list: The sorted list. for i in range(1, arr.__len__()): key = arr[i] j = i - 1 while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"Create a function that returns the nth Fibonacci number in Python. The function should be efficient and avoid recalculating the Fibonacci numbers for smaller values that have already been calculated. To achieve this, use memoization.","solution":"def fibonacci(n, memo={}): Returns the nth Fibonacci number using memoization. if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n]"},{"question":"Create a function that takes a list of integers and returns the duplicates in this list, without repeating duplicates. Please ensure the function is efficient and concise. You can assume the input list contains integers only.","solution":"def find_duplicates(nums): Returns a list of duplicates in the input list 'nums' without repeating duplicates. seen = set() duplicates = set() for num in nums: if num in seen: duplicates.add(num) seen.add(num) return list(duplicates)"},{"question":"Create a function that takes a dictionary representing a menu with lunch items and their prices, and a budget amount. The function should return a list of the lunch items that can be purchased without exceeding the budget. If an item cannot be purchased, it should not be included in the result.","solution":"def affordable_lunch_items(menu, budget): Returns a list of lunch items that can be purchased without exceeding the given budget. Parameters: menu (dict): A dictionary where keys are lunch items and values are their prices. budget (float): The budget amount. Returns: list: A list of lunch items that can be purchased within the budget. return [item for item, price in menu.items() if price <= budget]"},{"question":"Create a function that takes two arrays as input and returns an array containing the elements that are common to both input arrays. The order of the elements in the output array does not matter.","solution":"def common_elements(array1, array2): Returns a list containing the elements that are common to both input arrays. The order of the elements in the output list does not matter. return list(set(array1) & set(array2))"},{"question":"Create a function that takes two lists as input parameters. The function should return a new list that contains the sum of corresponding elements from the two input lists.","solution":"def sum_of_corresponding_elements(list1, list2): Returns a list that contains the sum of corresponding elements from list1 and list2. Parameters: list1 (list): The first list of numbers. list2 (list): The second list of numbers. Returns: list: A new list containing the summed elements. if len(list1) != len(list2): raise ValueError(\\"Both lists must have the same length.\\") return [a + b for a, b in zip(list1, list2)]"},{"question":"Create a function that can encrypt a string using a Caesar cipher. The function should take in a string and an integer key, and return the string with all alphabetic characters shifted by the key. Non-alphabetic characters should remain unchanged.","solution":"def caesar_cipher(text, key): Encrypts the given text using a Caesar cipher with the specified key. encrypted_text = [] for char in text: if char.isalpha(): shift = key % 26 if char.islower(): encrypted_text.append(chr((ord(char) - ord('a') + shift) % 26 + ord('a'))) else: encrypted_text.append(chr((ord(char) - ord('A') + shift) % 26 + ord('A'))) else: encrypted_text.append(char) return ''.join(encrypted_text)"},{"question":"Create a function that takes an integer \`n\` and returns a boolean indicating whether \`n\` is a power of two.","solution":"def is_power_of_two(n): Returns whether the given integer n is a power of two. :param n: integer to check :return: True if n is a power of two, False otherwise if n <= 0: return False return (n & (n - 1)) == 0"},{"question":"Create a function that generates a random string of a given length where each character is a letter from A to Z.","solution":"import random import string def generate_random_string(length): Generates a random string of a given length where each character is a letter from A to Z. Parameters: length (int): The length of the random string to generate. Returns: str: A random string of the given length. return \\"\\".join(random.choice(string.ascii_uppercase) for _ in range(length))"},{"question":"Create a function that takes an integer as an argument and returns its reverse. If the reversed integer is less than -2^31 or greater than 2^31 - 1, return 0. If the integer is 0, return 0.","solution":"def reverse_integer(x): Reverses the digits of an integer x. Returns the reversed integer or 0 if it overflows. INT_MIN, INT_MAX = -2**31, 2**31 - 1 # Handle negative numbers by using a flag negative = x < 0 if negative: x = -x # Reverse the integer reversed_x = 0 while x != 0: reversed_x = reversed_x * 10 + x % 10 x //= 10 # Apply the negative sign if needed if negative: reversed_x = -reversed_x # Check for 32-bit signed integer overflow if reversed_x < INT_MIN or reversed_x > INT_MAX: return 0 return reversed_x"},{"question":"Create a function that takes an array and a value. The function should remove the first occurrence of the value from the array and return the modified array.","solution":"def remove_first_occurrence(arr, value): Removes the first occurrence of value from the array. Parameters: arr (list): The list from which to remove the value. value: The value to remove from the array. Returns: list: The modified list with the first occurrence of value removed. if value in arr: arr.remove(value) return arr"},{"question":"Create a function that checks if a given string contains a valid email address. In your solution, consider the basic components of an email address: starts with alphanumeric characters (including underscores and hyphens), followed by the '@' symbol, then a domain name followed by a top-level domain. The domain name can have multiple levels separated by dots.","solution":"import re def is_valid_email(email): Return True if the email address is valid, otherwise return False. # Regular expression to check the structure of an email address email_regex = re.compile( r\\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}\\" ) return re.match(email_regex, email) is not None"},{"question":"Create a function that calculates the sum of all prime numbers up to a given number n, using Python. How can I make this function efficient?","solution":"def is_prime(num): Returns True if num is a prime number, otherwise False. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def sum_of_primes(n): Returns the sum of all prime numbers up to and including n. return sum(num for num in range(2, n + 1) if is_prime(num))"},{"question":"Create a function that takes an array of integers and returns a new array containing only the even numbers from the original array. The function should be efficient and use list comprehension for filtering the array.","solution":"def filter_even_numbers(arr): Returns a list containing only the even numbers from the input list. Parameters: arr (list): A list of integers. Returns: list: A list of even integers. return [x for x in arr if x % 2 == 0]"},{"question":"Create a function that converts a string to a number, handling both integer and floating-point numbers. The function should also check if the input is a valid number.","solution":"def convert_to_number(s): Tries to convert a string to either an integer or a floating-point number. If the conversion is not possible, raises a ValueError. Parameters: s (str): The string to be converted. Returns: int or float: The converted number. try: # First, try to convert to an integer return int(s) except ValueError: pass try: # If it fails, try to convert to a float return float(s) except ValueError: pass # If both conversions fail, raise an error raise ValueError(f\\"Cannot convert '{s}' to a number.\\")"},{"question":"Create a function that takes two lists of integers as input and returns True if the two lists have the same elements in any order and False otherwise.","solution":"def have_same_elements(list1, list2): Returns True if the two lists have the same elements in any order, otherwise False. return sorted(list1) == sorted(list2)"},{"question":"Create a function that takes an array of integers as input and replaces each element of the array with its index. For example, if the input array is [12, 34, 56], the output should be [0, 1, 2].","solution":"def replace_with_index(arr): Replaces each element of the input list with its index. Parameters: arr (list): List of integers. Returns: list: List where each element is replaced by its index. return [i for i in range(len(arr))]"},{"question":"Create a function that takes a list of dictionaries, where each dictionary represents a student's grades and details (e.g., name, age, grades for different subjects). The function should calculate and return a list of dictionaries, where each dictionary has the student's name, age, and their average grade in all subjects.","solution":"def calculate_average_grades(students): Takes a list of dictionaries representing students' details including their grades. Returns a list of dictionaries with each student's name, age, and their average grade. :param students: List[Dict[str, any]] :return: List[Dict[str, any]] result = [] for student in students: # Extracting grades excluding non-grade fields grades = [value for key, value in student.items() if isinstance(value, (int, float)) and key not in ['name', 'age']] average_grade = sum(grades) / len(grades) if grades else 0 result.append({ 'name': student['name'], 'age': student['age'], 'average_grade': average_grade }) return result"},{"question":"Create a function that takes in a string as a parameter and returns a string with all the even-indexed characters of the original string (0-indexed) removed. For example, if the input string is \\"hello\\", the output should be \\"el\\".","solution":"def remove_even_indexed_characters(s): Returns a string with all the even-indexed characters removed. return \\"\\".join([char for index, char in enumerate(s) if index % 2 != 0])"},{"question":"Create a function that takes in a list of integers and returns the length of the longest consecutive subsequence. A consecutive subsequence is a sequence of numbers where each number is one more than the previous number, and the subsequence cannot be broken. For example, in the list [1, 2, 4, 5, 6, 7, 8], the longest consecutive subsequence would be [1, 2, 4, 5, 6, 7, 8], with a length of 7.","solution":"def longest_consecutive_subsequence(nums): Returns the length of the longest consecutive subsequence in the given list of integers. if not nums: return 0 nums = set(nums) max_length = 0 for num in nums: if num - 1 not in nums: # check if it's the start of a sequence current_num = num current_length = 1 while current_num + 1 in nums: current_num += 1 current_length += 1 max_length = max(max_length, current_length) return max_length"},{"question":"Create a function that takes a list of strings as input and returns a list of lists, where each sublist contains strings that can be formed by rotating the strings in the input list by a certain number of positions to the right. For example, if the input list is [\\"abc\\", \\"def\\", \\"ghi\\"], the output should be [[\\"abc\\", \\"bca\\", \\"cab\\"], [\\"def\\", \\"efd\\", \\"fde\\"], [\\"ghi\\", \\"hig\\", \\"igh\\"]]. Assume that all strings in the input list are of the same length.","solution":"def rotate_string(s, n): Rotates a string s to the right by n positions. return s[-n:] + s[:-n] def rotate_strings(input_list): Returns a list of lists, where each sublist contains rotated versions of the strings from the input list. result = [] if not input_list: return result length_of_string = len(input_list[0]) for s in input_list: rotations = [rotate_string(s, i) for i in range(length_of_string)] result.append(rotations) return result"},{"question":"Create a function that takes an integer, say n, and returns the value of the nth Fibonacci number using recursion.","solution":"def fibonacci(n): Returns the nth Fibonacci number using recursion. if n <= 0: raise ValueError(\\"n must be a positive integer.\\") elif n == 1: return 0 elif n == 2: return 1 else: return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Create a function that takes in a positive integer as an argument and returns a list of all the Fibonacci numbers less than that integer. The function should also return the sum of these Fibonacci numbers.","solution":"def fibonacci_numbers_and_sum(n): Returns a list of all Fibonacci numbers less than the input integer n, as well as the sum of these Fibonacci numbers. if n <= 0: return [], 0 fib_list = [] a, b = 0, 1 while a < n: fib_list.append(a) a, b = b, a + b return fib_list, sum(fib_list)"},{"question":"Create a function that takes a list of integers and returns a list of all possible subsets of that list with a given length using Python. Here length refers to the number of elements in each subset. You need to use recursion to solve this problem.","solution":"def subsets_with_length(lst, length, start=0, current=None): Generate all possible subsets of given length from the list. Args: lst (list): The list of integers. length (int): The length of subsets to generate. start (int): The starting index for the current subset. current (list): The current subset being generated. Returns: list: A list of subsets with the given length. if current is None: current = [] if length == 0: return [current] if start == len(lst): return [] # Include the current element and recurse with_current = subsets_with_length(lst, length - 1, start + 1, current + [lst[start]]) # Exclude the current element and recurse without_current = subsets_with_length(lst, length, start + 1, current) return with_current + without_current"},{"question":"Create a function that prints out a multiplication table for a given number n. The function should be in Python.","solution":"def multiplication_table(n): Prints out a multiplication table for a given number n. for i in range(1, 11): print(f\\"{n} * {i} = {n*i}\\")"},{"question":"Create a function that checks if two numbers are relatively prime. Given two integers \`num1\` and \`num2\`, write a function \`are_relatively_prime(num1, num2)\` that returns \`True\` if the two numbers are relatively prime, meaning they have no common divisors other than 1. Otherwise, it should return \`False\`.","solution":"import math def are_relatively_prime(num1, num2): Returns True if num1 and num2 are relatively prime, otherwise False. Two numbers are relatively prime if their greatest common divisor is 1. return math.gcd(num1, num2) == 1"},{"question":"Create a function that takes two parameters, a list of integers and a target integer. The function should sum all the integers in the list that are less than the target integer.","solution":"def sum_less_than_target(numbers, target): Returns the sum of all integers in the 'numbers' list that are less than the 'target' integer. return sum(num for num in numbers if num < target)"},{"question":"Create a function that takes a string as input and prints a truncated version of the string. The truncated version should display the first 10 characters of the string followed by an ellipsis if the string is longer than 10 characters. If the string is 10 characters or less, the function should return the string as is. You will also need to implement a unit test to verify that the function behaves as expected.","solution":"def truncate_string(input_string): Returns the truncated version of the input string. If the input string is longer than 10 characters, it returns the first 10 characters followed by an ellipsis. If the input string is 10 characters or less, it returns the string as is. if len(input_string) > 10: return input_string[:10] + '...' else: return input_string"},{"question":"Create a function that takes a list of numbers as an argument and returns a new list where all even numbers are replaced with their squares.","solution":"def square_evens(numbers): Returns a new list where all even numbers in the input list are replaced with their squares. :param numbers: List of integers :return: List of integers with even numbers squared return [x ** 2 if x % 2 == 0 else x for x in numbers]"},{"question":"Create a function that determines if a given integer is a \\"five-eastern\\" number. A \\"five-eastern\\" number is defined as a number that consists only of the digits 5 and cannot be divisible by 3. Note that 0 is considered a valid digit in this context. For the input, assume that the number is less than 1000.","solution":"def is_five_eastern(n): Determines if a given integer is a \\"five-eastern\\" number. A \\"five-eastern\\" number contains only the digit 5 and cannot be divisible by 3. :param n: The integer to check, expected to be less than 1000. :return: True if the number is a \\"five-eastern\\" number, False otherwise. str_n = str(n) # Check if the number contains only the digit '5' if all(char == '5' for char in str_n): # Check if the number is not divisible by 3 if n % 3 != 0: return True return False"},{"question":"Create a function that checks if a list is ordered in ascending order. How would you implement this in Python?","solution":"def is_ordered_ascending(lst): Checks if the provided list is ordered in ascending order. Parameters: lst (list): List of elements to be checked. Returns: bool: True if the list is in ascending order, False otherwise. return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))"},{"question":"Create a function that generates a Fibonacci sequence up to a given number \`n\`, where \`n\` is the maximum value of any number in the sequence. The sequence should be generated iteratively.","solution":"def fibonacci_sequence(n): Generates a Fibonacci sequence up to a given number n. :param n: int - the maximum value of any number in the sequence :return: list - the Fibonacci sequence up to the given number n if n < 0: return [] sequence = [] a, b = 0, 1 while a <= n: sequence.append(a) a, b = b, a + b return sequence"},{"question":"Create a function that takes in the number of rows and columns of a 2D array, and returns an array filled with the number of prime numbers in each column.","solution":"import sympy def count_primes_in_columns(rows, cols): Returns an array filled with the number of prime numbers in each column of a 2D array of given rows and columns. array = [] # Create 2D array with sympy primes iterator_primes = iter(sympy.primerange(0, 10**6)) # big enough range to generate required primes for r in range(rows): array.append([next(iterator_primes) for c in range(cols)]) # Count primes in each column primes_count = [0] * cols for c in range(cols): for r in range(rows): primes_count[c] += 1 if sympy.isprime(array[r][c]) else 0 return primes_count"},{"question":"Create a function that prints \\"Hello, world!\\" and returns \\"Done\\".","solution":"def hello_world(): Prints \\"Hello, world!\\" and returns \\"Done\\". print(\\"Hello, world!\\") return \\"Done\\""},{"question":"Create a function that takes two parameters, an array of integers and a target integer. The function should return the number of elements in the array that are greater than the target integer.","solution":"def count_greater_than_target(array, target): Returns the number of elements in the array that are greater than the target integer. Parameters: array (list of int): The list of integers to be checked. target (int): The target integer. Returns: int: The count of elements greater than the target integer. count = 0 for number in array: if number > target: count += 1 return count"},{"question":"Create a function that , when called, prints \\"Hello, World!\\" to the console and returns the string \\"Hello, World!\\".","solution":"def hello_world(): Prints and returns 'Hello, World!'. message = \\"Hello, World!\\" print(message) return message"},{"question":"Create a function that takes two strings, \`str1\` and \`str2\`, as arguments and returns the number of positions where the characters in two strings are the same.","solution":"def count_matching_positions(str1, str2): Returns the number of positions where characters in two strings are the same. If the strings are of different lengths, the comparison is done up to the length of the shorter string. count = 0 min_length = min(len(str1), len(str2)) for i in range(min_length): if str1[i] == str2[i]: count += 1 return count"},{"question":"Create a function that takes a string and outputs a list where each element in the list is a pair of the form (character, number), where the number is the number of times the character appears in the string. The string will consist of lowercase and uppercase letters.","solution":"def char_frequency(s): Returns a list of tuples where each tuple contains a character and its frequency in the input string. :param s: Input string consisting of lowercase and uppercase letters :return: List of tuples (character, frequency) frequency_dict = {} for char in s: if char in frequency_dict: frequency_dict[char] += 1 else: frequency_dict[char] = 1 return list(frequency_dict.items())"},{"question":"Create a function that takes in a list of integers and returns the maximum sum of any subarray. You need to handle negative numbers as well.","solution":"def max_subarray_sum(nums): Returns the maximum sum of any subarray within the input list of integers. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that identifies if all to getY unique elements in the input array are present in columns of a given 2D list. The function should return \`true\` if all unique elements are present in any single column, and \`false\` otherwise.","solution":"def are_all_unique_elements_in_columns(unique_elements, matrix): Returns True if all unique elements are present in any single column of the matrix, else False. Args: unique_elements (list): List of unique elements to look for in columns. matrix (list of lists): 2D list representing the matrix. Returns: bool: True if all unique elements are present in any column, False otherwise. unique_set = set(unique_elements) num_rows = len(matrix) num_cols = len(matrix[0]) if matrix else 0 for col in range(num_cols): col_elements = set(matrix[row][col] for row in range(num_rows)) if unique_set.issubset(col_elements): return True return False"},{"question":"Create a function that finds the maximum sum of a subarray of a given array. This subarray must contain at least one element.","solution":"def max_subarray_sum(nums): Finds the maximum sum of a subarray of a given array. This subarray must contain at least one element. if not nums: return 0 max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Create a function that calculates the factorial of a given number. The function should take an integer as an input and return the factorial of that number. Ensure that you handle edge cases such as negative numbers and zero. The factorial of a non-negative integer n is the product of all positive integers less than or equal to n.","solution":"def factorial(n): Returns the factorial of a given non-negative integer n. For negative integers, raises a ValueError. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") elif n == 0: return 1 else: result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Create a function that takes a number as a parameter and determines the next Fibonacci number after the given number. For example, if the given number is 5, the next Fibonacci number is 8. If the given number is 13, the next Fibonacci number is 21.","solution":"def next_fibonacci(n): Determines the next Fibonacci number after the given number n. if n < 0: return \\"Invalid input: n must be a non-negative integer.\\" a, b = 0, 1 while b <= n: a, b = b, a + b return b"},{"question":"Create a function that takes a string \`s\` and an integer \`n\` as parameters. The function should return \`True\` if the string \`s\` contains exactly \`n\` occurrences of the character 'a' and \`False\` otherwise. If the string's length is less than \`n\`, the function should return \`False\`.","solution":"def has_n_occurrences_of_a(s, n): Returns True if the string s contains exactly n occurrences of the character 'a', False otherwise. Also returns False if the string length is less than n. if len(s) < n: return False return s.count('a') == n"},{"question":"Create a function that finds the longest increasing subsequence (LIS) in a list of integers. The function should return the length of the LIS.","solution":"def length_of_lis(nums): Finds the length of the longest increasing subsequence in a list of integers. :param nums: List of integers :return: Length of the longest increasing subsequence if not nums: return 0 # Initialize the DP array with 1s dp = [1] * len(nums) # Fill the DP array for i in range(len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) # The longest increasing subsequence length return max(dp)"},{"question":"Create a function that takes in a string. The function will then convert all lowercase alphabets to uppercase and vice versa.","solution":"def swap_case(s): Takes a string and returns a new string where all lowercase alphabets are converted to uppercase and vice versa. Args: s: str - Input string Returns: str - String with swapped case return s.swapcase()"},{"question":"Create a function that will remove all whitespace from a string, including spaces, tabs, newlines, etc.","solution":"def remove_whitespace(s): Removes all whitespace characters from the input string. This includes spaces, tabs, newlines, and other whitespace characters. return ''.join(s.split())"},{"question":"Create a function that calculates the sum of all numbers in an array, ignoring any even numbers. Here is a Python function to help you get started.","solution":"def sum_odd_numbers(arr): Returns the sum of all odd numbers in the array, ignoring even numbers. Parameters: arr (list): A list of integers Returns: int: Sum of odd numbers return sum(x for x in arr if x % 2 != 0)"},{"question":"Create a function that checks if a number is prime. If the number is prime, print a message saying \\"The number is prime.\\" If the number is not prime, print a message saying \\"The number is not prime.\\" For example, for the number 5, the function should print \\"The number is prime.\\" For the number 4, it should print \\"The number is not prime.\\"","solution":"def is_prime(n): Checks if a number is prime. Prints a message stating whether the number is prime or not. if n <= 1: print(\\"The number is not prime.\\") return False for i in range(2, int(n**0.5) + 1): if n % i == 0: print(\\"The number is not prime.\\") return False print(\\"The number is prime.\\") return True"},{"question":"Create a function that takes three integer arguments: hour, minute, and second. The function should return the total number of seconds since midnight.","solution":"def time_to_seconds(hour, minute, second): Converts the given time (hour, minute, second) into seconds since midnight. Parameters: - hour (int): The hour part of the time. - minute (int): The minute part of the time. - second (int): The second part of the time. Returns: - int: The total number of seconds since midnight. total_seconds = hour * 3600 + minute * 60 + second return total_seconds"},{"question":"Create a function that returns the greatest common divisor (GCD) of two numbers \`a\` and \`b\`. The function should work for both positive and negative integers, and should handle the case where \`b\` is zero, which should return \`a\`.","solution":"def gcd(a, b): Returns the greatest common divisor (GCD) of two numbers a and b. while b != 0: a, b = b, a % b return abs(a)"},{"question":"Create a function that takes a string as input. The function should check if the string is a palindrome, ignoring case and non-alphanumeric characters. A palindrome is a string that reads the same forward and backward. The function should return \`True\` if the string is a palindrome and \`False\` otherwise.","solution":"import re def is_palindrome(s): Check if the input string is a palindrome, ignoring case and non-alphanumeric characters. Parameters: s (str): The input string. Returns: bool: True if the string is a palindrome, False otherwise. # Remove non-alphanumeric characters and convert to lower case filtered_s = re.sub(r'[^A-Za-z0-9]', '', s).lower() # Check if the filtered string is equal to its reverse return filtered_s == filtered_s[::-1]"},{"question":"Create a function that takes a positive integer and returns a list of Fibonacci numbers up to that integer (inclusive). The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones.","solution":"def fibonacci_up_to(n): Returns a list of Fibonacci numbers up to a given number n (inclusive). if n < 0: raise ValueError(\\"Input should be a positive integer.\\") fib_sequence = [] a, b = 0, 1 while a <= n: fib_sequence.append(a) a, b = b, a + b return fib_sequence"},{"question":"Create a function that takes in a string of text and returns the number of words in the string. A word is defined as a sequence of characters separated by spaces. You should handle any amount of leading, trailing, and duplicate spaces between words.","solution":"def count_words(text): Returns the number of words in the given string. A word is defined as a sequence of characters separated by spaces. The function handles leading, trailing, and duplicate spaces. # Split text by white spaces and remove empty strings words = text.split() return len(words)"},{"question":"Create a function that takes an array of integers and returns the first repeating element. If there is no repeating element, return -1.","solution":"def first_repeating_element(arr): Returns the first repeating element in the array. If there is no repeating element, returns -1. seen = set() for num in arr: if num in seen: return num seen.add(num) return -1"},{"question":"Create a function that takes a single string argument and returns a new string with every occurrence of a space replaced by the character '%20'. This is commonly known as URL encoding.","solution":"def url_encode(s): Returns a string where each space character is replaced by '%20'. return s.replace(' ', '%20')"},{"question":"Create a function that removes duplicates from a list in Python and returns the remaining elements. The function should be efficient and handle large lists.","solution":"def remove_duplicates(lst): Removes duplicates from a list and returns the remaining elements. Args: - lst (List): A list of elements which may contain duplicates. Returns: - List: A list without duplicate elements. return list(dict.fromkeys(lst))"},{"question":"Create a function that takes a string as input and returns a new string with only the characters that appear at odd indices in the original string. For example, if the input string is \\"hello\\", the output should be \\"el\\". Remember that Python indexing starts at 0, so the first character is at index 0, the second at index 1, and so on.","solution":"def characters_at_odd_indices(input_string): Returns a new string with only the characters that appear at odd indices in the original string. Parameters: input_string (str): The original string. Returns: str: A new string with characters that appear at odd indices. return input_string[1::2]"},{"question":"Create a function that removes duplicates from a given list, returning a new list with only unique elements.","solution":"def remove_duplicates(input_list): Removes duplicates from the input list and returns a new list with only unique elements. :param input_list: List of elements that may contain duplicates. :returns: A list with unique elements from the input_list. return list(set(input_list))"},{"question":"Create a function that takes an integer \`n\` and returns a circular array that contains from 1 to n, with each element appearing exactly once in the array. The circular array should be such that the element coming after the last element is the first element, and vice versa.","solution":"def create_circular_array(n): Creates a circular array containing elements from 1 to n. Args: n (int): The number till which the elements should be populated. Returns: list of int: A circular array with elements from 1 to n. if n <= 0: return [] # Return an empty array if n is less than or equal to 0 return [i for i in range(1, n + 1)]"},{"question":"Create a function that takes three parameters: a string \`s\`, an integer \`n\`, and a character \`c\`. The function should return the number of occurrences of the character \`c\` in the substring of \`s\` that starts at the beginning and ends at the \`n\`-th character (inclusive). If \`n\` is greater than the length of the string, consider the entire string.","solution":"def count_occurrences(s, n, c): Returns the number of occurrences of character c in the substring of s that starts at the beginning and ends at the n-th character (inclusive). If n is greater than the length of the string, the entire string is considered. substring = s[:n+1] # n+1 to include the n-th character return substring.count(c)"},{"question":"Create a function that takes a string as input and returns a new string where each word has its characters in reverse order. The function should ignore punctuation and only reverse the characters of actual words.","solution":"def reverse_words_in_string(s): Returns a new string where each word has its characters in reverse order. def reverse_word(word): return word[::-1] words = s.split() reversed_words = [reverse_word(word) for word in words] return ' '.join(reversed_words)"},{"question":"Create a function that checks if a number is prime or not. Implement the function in Python.","solution":"def is_prime(n): Checks if a number n is a prime number. Parameters: n (int): The number to check for primality. Returns: bool: True if n is a prime number, False otherwise. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True"},{"question":"Create a function that checks if a number is a perfect square. If the number is perfect square, then return True. If not, return False. For instance, 16 is a perfect square (since 4*4 = 16) and 14 is not (since there is no integer that when squared equals 14).","solution":"import math def is_perfect_square(num): Checks if a number is a perfect square. Parameters: - num: The number to check. Returns: - True if the number is a perfect square, False otherwise. if num < 0: return False # Negative numbers cannot be perfect squares sqrt_num = math.isqrt(num) return sqrt_num * sqrt_num == num"},{"question":"Create a function that takes a tuple as an argument and returns a new tuple with the elements in reverse order. The solution should be written in Python.","solution":"def reverse_tuple(input_tuple): Returns a new tuple with the elements in reverse order. :param input_tuple: tuple : Input tuple to be reversed :return: tuple : New tuple with the elements in reverse order return input_tuple[::-1]"},{"question":"Create a function that takes a list of strings, reverse the order of each string, and then join them with a specific character. For instance, given a list \`['hello', 'world']\` and a separator \`'-'\`, the function should return \`'olleh-worl'\`. If the list is empty, it should return an empty string. If the separator is an empty string, use no separator when joining the strings.","solution":"def reverse_join(lst, sep): Reverses each string in the list and then joins them with a specified separator. Parameters: lst (list): List of strings to be reversed. sep (str): Separator to join the reversed strings. Returns: str: Joined reversed strings with the specified separator. # First, reverse each string in the list. reversed_strings = [s[::-1] for s in lst] # Then, join the reversed strings with the specified separator. result = sep.join(reversed_strings) return result"},{"question":"Create a function that returns the Fibonacci sequence up to the n-th term. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1.","solution":"def fibonacci(n): Returns the Fibonacci sequence up to the n-th term. if n <= 0: return [] sequence = [0] if n > 1: sequence.append(1) for i in range(2, n): sequence.append(sequence[-1] + sequence[-2]) return sequence"},{"question":"Create a function that takes in two parameters, an integer n and a string s, and returns the longest substring of s that contains exactly n distinct characters.","solution":"def longest_substring_with_n_distinct_chars(n, s): Returns the longest substring of s that contains exactly n distinct characters. from collections import defaultdict char_count = defaultdict(int) left = 0 max_len = 0 max_substr = \\"\\" for right in range(len(s)): char_count[s[right]] += 1 while len(char_count) > n: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 if len(char_count) == n: current_len = right - left + 1 if current_len > max_len: max_len = current_len max_substr = s[left:right+1] return max_substr"},{"question":"Create a function that takes a list of integers as input and returns a list of strings where each string is \\"Even\\" for even numbers and \\"Odd\\" for odd numbers.","solution":"def even_or_odd(lst): Takes a list of integers and returns a list of strings \\"Even\\" or \\"Odd\\" depending on whether each integer is even or odd. return [\\"Even\\" if x % 2 == 0 else \\"Odd\\" for x in lst]"},{"question":"Create a function that takes three parameters: a string, a character, and an integer \\"n\\". The function will return a boolean value indicating whether the character appears at least \\"n\\" times in the string. The string will be at most 200 characters long, and \\"n\\" will be a positive integer.","solution":"def char_appears_n_times(s, char, n): Returns True if the character appears at least n times in the string s, otherwise returns False. :param s: str - The string in which to count character occurrences. :param char: str - The character to count in the string. :param n: int - The number of times the character should appear at minimum. :return: bool - True if the character appears at least n times in the string, otherwise False. if not isinstance(s, str) or not isinstance(char, str) or not isinstance(n, int): raise TypeError(\\"Invalid input types.\\") if len(char) != 1: raise ValueError(\\"char must be a single character.\\") if n <= 0: raise ValueError(\\"n must be a positive integer.\\") return s.count(char) >= n"},{"question":"Create a function that returns the sum of an arbitrary number of integers.","solution":"def sum_of_integers(*args): Returns the sum of an arbitrary number of integers. Parameters: *args (int): An arbitrary number of integer arguments. Returns: int: The sum of the provided integers. return sum(args)"},{"question":"Create a function that takes a list and returns a new list containing only the elements that appear exactly once in the original list.","solution":"def unique_elements(lst): Returns a list containing only the elements that appear exactly once in the original list. from collections import Counter count = Counter(lst) return [elem for elem in lst if count[elem] == 1]"},{"question":"Create a function that takes a list of integers as input and returns whether the sum of the elements is even or odd.","solution":"def sum_is_even_or_odd(numbers): Returns 'even' if the sum of the elements in the list is even, 'odd' otherwise. total_sum = sum(numbers) if total_sum % 2 == 0: return 'even' else: return 'odd'"},{"question":"Create a function that takes an integer as an input and returns the sum of all even numbers up to that integer, not including the integer itself if it's even.","solution":"def sum_of_evens(n): Returns the sum of all even numbers up to the integer \`n\` (exclusive). return sum(i for i in range(0, n) if i % 2 == 0)"},{"question":"Create a function that takes a string as input and returns the string with the first and last characters removed. The function must handle cases where the input string has a length of 1 or less, and both cases should return an empty string as a result.","solution":"def remove_first_and_last_character(s): Removes the first and last character from the input string. If the string length is 1 or less, return an empty string. if len(s) <= 1: return \\"\\" return s[1:-1]"},{"question":"Create a function that takes a list of integers and returns the number of times the maximum value appears in the list.","solution":"def count_max_occurrences(numbers): Returns the number of times the maximum value appears in the list of integers. :param numbers: List of integers :return: The number of occurrences of the maximum value if not numbers: return 0 max_value = max(numbers) return numbers.count(max_value)"},{"question":"Create a function that takes an integer as an argument and returns its reverse. If the number is negative, return its absolute value reversed. If the reversed number overflows, return 0. What should be the approach to solve this problem?","solution":"def reverse_integer(x): Reverses an integer. If negative, returns the reversed absolute value. If the reversed integer overflows 32-bit signed integer range, returns 0. # Handle the sign and use absolute value for reversing sign = -1 if x < 0 else 1 x = abs(x) # Reverse the digits reversed_num = 0 while x != 0: pop = x % 10 x //= 10 # Check for overflow before actual multiplication and addition if reversed_num > (2**31 - 1) // 10 or (reversed_num == (2**31 - 1) // 10 and pop > 7): return 0 reversed_num = reversed_num * 10 + pop return sign * reversed_num"},{"question":"Create a function that takes in two parameters: an array of numbers and a target number.","solution":"def two_sum(nums, target): Returns the indices of the two numbers that add up to the target. Parameters: nums (list): A list of integers. target (int): The target sum. Returns: list: The indices of the two numbers. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return [] # Return an empty list if no two numbers add up to the target"},{"question":"Create a function that takes an array of integers and returns the maximum product of any three numbers in the array. Can you demonstrate how to solve this using a strategy that involves sorting the array and then considering potential combinations?","solution":"def maximum_product_of_three(nums): Returns the maximum product of any three numbers in the array. Arguments: nums -- array of integers Returns: maximum product of any three numbers # Sort the array in ascending order nums.sort() # Maximum product can be either from the three largest positive numbers # or from two smallest negative numbers and the largest positive number max_product = max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1]) return max_product"},{"question":"Create a function that will take an integer as an argument and return a list of all prime numbers less than the given integer. A prime number is a number that has exactly two distinct positive divisors: 1 and itself. For example, the first few prime numbers are 2, 3, 5, 7, 11, and so on.","solution":"def primes_less_than(n): Returns a list of all prime numbers less than n. if n <= 2: return [] primes = [] for num in range(2, n): is_prime = True for i in range(2, int(num**0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Create a function that takes a single string as an argument and returns a dictionary where the keys are the characters in the string, and the values are the number of occurrences of each character.","solution":"def char_count(s): Returns a dictionary where the keys are the characters from the string, and the values are the number of occurrences of each character. count_dict = {} for char in s: if char in count_dict: count_dict[char] += 1 else: count_dict[char] = 1 return count_dict"},{"question":"Create a function that returns a list of the first 'n' even numbers starting from 0.","solution":"def first_n_even_numbers(n): Returns a list of the first 'n' even numbers starting from 0. return [2 * i for i in range(n)]"},{"question":"Create a function that returns the sum of all even numbers in a list using a loop.","solution":"def sum_of_even_numbers(numbers): Returns the sum of all even numbers in the list. total = 0 for number in numbers: if number % 2 == 0: total += number return total"},{"question":"Create a function that searches for a specific value within an array of integers, using the Binary Search algorithm. The function should outputs the index of the first occurrence of the value, or -1 if the value is not found.","solution":"def binary_search(arr, target): Performs binary search on the sorted array to find the target value. Returns the index of the first occurrence of the target value, or -1 if the target is not found. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] < target: left = mid + 1 elif arr[mid] > target: right = mid - 1 else: # To find the first occurrence, we move left while mid > left and arr[mid - 1] == target: mid -= 1 return mid return -1"},{"question":"Create a function that changes the value of an integer at a specified index in an array and returns the updated array. If the index is out of bounds, return an error message. Here is the given function below.","solution":"def update_value_at_index(arr, index, value): Updates the value of an integer at a specified index in an array. Parameters: arr (list of int): The array of integers index (int): The index at which to update the value value (int): The new value to set at the specified index Returns: list of int: The updated array or str: Error message if index is out of bounds if index < 0 or index >= len(arr): return \\"Error: Index out of bounds\\" arr[index] = value return arr"},{"question":"Create a function that will count the number of duplicate characters in a string. For example, the string \\"Hello World\\" should return 1 because there is one duplicate character ('l').","solution":"def count_duplicate_characters(s): Counts the number of characters that appear more than once in the input string. Args: s (str): Input string. Returns: int: Number of duplicate characters. char_count = {} s = s.lower() # Convert to lowercase to handle case insensitivity for char in s: if char.isalpha(): # Count only alphabet characters if char in char_count: char_count[char] += 1 else: char_count[char] = 1 duplicate_count = sum(1 for count in char_count.values() if count > 1) return duplicate_count"},{"question":"Create a function that takes as input a binary number, converts it to a decimal number, and returns the decimal result.","solution":"def binary_to_decimal(binary): Converts a binary number (given as a string) to a decimal number. Args: binary (str): A string representing a binary number (contains only '0' and '1'). Returns: int: The decimal representation of the binary number. return int(binary, 2)"},{"question":"Create a function that takes two ASCII strings and returns the longest string that contains all characters from both strings in descending order of their ASCII values.","solution":"def merge_and_sort_desc(str1, str2): Takes two ASCII strings and returns the longest string that contains all characters from both strings in descending order of their ASCII values. combined_string = str1 + str2 sorted_string = ''.join(sorted(combined_string, reverse=True)) return sorted_string"},{"question":"Create a function that checks if a user's password meets certain criteria: at least 8 characters long, contains at least one uppercase, one lowercase, one digit, and one special character.","solution":"import re def is_valid_password(password): Check if the provided password meets the following criteria: - At least 8 characters long - Contains at least one uppercase letter - Contains at least one lowercase letter - Contains at least one digit - Contains at least one special character Args: password (str): The password to check. Returns: bool: True if the password meets all the criteria, False otherwise. if len(password) < 8: return False if not re.search(r'[A-Z]', password): return False if not re.search(r'[a-z]', password): return False if not re.search(r'd', password): return False if not re.search(r'[W_]', password): return False return True"},{"question":"Create a function that identifies the prime factors of a given number and returns them in ascending order. The function should take an integer as input and return a list of prime factors.","solution":"def prime_factors(n): Returns a list of prime factors of the given number n in ascending order. factors = [] # Start with the smallest prime number divisor = 2 while n >= divisor: if n % divisor == 0: factors.append(divisor) n = n // divisor else: divisor += 1 return factors"},{"question":"Create a function that takes a non-empty integer array and reverses its elements. The function should return the reversed array. For example, for the input array \`[1, 2, 3, 4, 5]\`, the function should return \`[5, 4, 3, 2, 1]\`.","solution":"def reverse_array(arr): Reverses the elements of a non-empty integer array. Parameters: arr (list of int): The array to be reversed. Returns: list of int: The reversed array. return arr[::-1]"},{"question":"Create a function that takes an array of integers and returns a new array containing only the elements that are multiples of 3 and have a length of 3 when converted to strings.","solution":"def filter_multiples_of_3_with_length_3(arr): Takes an array of integers and returns a new array containing only the elements that are multiples of 3 and have a length of 3 when converted to strings. Parameters: arr (list of int): The input list of integers. Returns: list of int: A new list containing the filtered elements. return [i for i in arr if i % 3 == 0 and len(str(abs(i))) == 3]"},{"question":"Create a function that takes a string as input and returns the string with an exclamation mark appended to the end of the string.","solution":"def add_exclamation_mark(s): Returns the string s with an exclamation mark appended to the end. return s + '!'"},{"question":"Create a function that generates an oriented binary string of a specified length 'n' such that no three consecutive characters are '1's. For example, for n=3, a valid output could be \\"010\\" or \\"001\\".","solution":"def generate_oriented_binary(n): if n == 0: return \\"\\" elif n == 1: return \\"0\\" elif n == 2: return \\"01\\" a = \\"01\\" b = \\"001\\" for i in range(3, n + 1): temp = a + '0' + a a, b = b, temp return b[:n]"},{"question":"Create a function that takes an array \`arr\` and an integer \`k\`, and returns the \`k\`th largest element in the array.","solution":"def kth_largest(arr, k): Returns the k-th largest element in the array. Parameters: arr (list): List of integers. k (int): The position of the largest element to find. Returns: int: The k-th largest element in the array. if k <= 0 or k > len(arr): raise ValueError(\\"k must be within the range of the array length\\") return sorted(arr, reverse=True)[k - 1]"},{"question":"Create a function that generates and prints a Fibonacci sequence up to \`n\` numbers.","solution":"def fibonacci_sequence(n): Generates and returns a list containing the Fibonacci sequence up to n numbers. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] sequence = [0, 1] for i in range(2, n): sequence.append(sequence[-1] + sequence[-2]) return sequence"},{"question":"Create a function that outputs the count and percentage of each unique value in a given list.","solution":"from collections import Counter def count_and_percentage(input_list): Returns a dictionary where the keys are the unique values in the list and the values are tuples of the count and percentage of each unique value. n = len(input_list) counts = Counter(input_list) result = {key: (count, (count / n) * 100) for key, count in counts.items()} return result"},{"question":"Create a function that takes in a list of integers and returns the sum of all the numbers in the list. If the list is empty, the function should return 0. If there are any non-integer values in the list, the function should raise a ValueError. How should I approach this problem in Python?","solution":"def sum_list(numbers): Returns the sum of all integers in the list. Raises ValueError if any element in the list is not an integer. If the list is empty, returns 0. :param numbers: List of integers :return: Sum of integers in the list :raises ValueError: If any element in the list is not an integer if not all(isinstance(x, int) for x in numbers): raise ValueError(\\"All elements in the list must be integers.\\") return sum(numbers)"},{"question":"Create a function that replaces certain words in a string with asterisks. The function should be called \`mask_words\` and take two arguments: \`text\` (the original string) and \`words\` (a list of words to be replaced). The function should return a new string where all occurrences of the words in the \`words\` list are replaced with asterisks of the same length. For example, if the input \`text\` is \\"Hello world\\" and \`words\` is [\\"world\\"], the output should be \\"Hello ***\\".","solution":"def mask_words(text, words): Replaces all occurrences of the words in the \`words\` list within \`text\` with asterisks of the same length. Parameters: text (str): The original string. words (list): A list of words to be replaced. Returns: str: The modified string with specified words replaced by asterisks. for word in words: text = text.replace(word, '*' * len(word)) return text"},{"question":"Create a function that takes a list of integers and returns a new list with all the duplicate numbers removed. Ensure that the returned list maintains the original order of the numbers as they appeared in the input list.","solution":"def remove_duplicates(nums): Removes duplicates from the given list of integers while maintaining the original order. Parameters: nums (List[int]): A list of integers. Returns: List[int]: A new list with duplicates removed. seen = set() result = [] for num in nums: if num not in seen: seen.add(num) result.append(num) return result"},{"question":"Create a function that , given a positive integer \`n\`, returns the sum of all positive integers up to \`n\`. That is, return the sum (1 + 2 + 3 + ldots + n). For example, if the input is 3, the function should return 6.","solution":"def sum_up_to_n(n): Returns the sum of all positive integers up to n. :param n: A positive integer :return: Sum of all positive integers up to n return n * (n + 1) // 2"},{"question":"Create a function that implements a generic algorithm to merge two sorted arrays into a single sorted array. Can you write this function in Python?","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into a single sorted array. Parameters: arr1 (list): First sorted array. arr2 (list): Second sorted array. Returns: list: Merged sorted array. merged_array = [] i, j = 0, 0 # Traverse both arrays and insert smaller value from arr1 or arr2 into merged_array while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # Store remaining elements of arr1 while i < len(arr1): merged_array.append(arr1[i]) i += 1 # Store remaining elements of arr2 while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"Create a function that takes a string as input and returns its length in words, where a word is defined as a sequence of characters separated by one or more spaces. The function should ignore leading and trailing spaces and also count only unique words.","solution":"def count_unique_words(text): Returns the number of unique words in the input text. A word is defined as a sequence of characters separated by one or more spaces. Leading and trailing spaces are ignored. # Split the text into words based on spaces words = text.strip().split() # Remove duplicate words and return the count of unique words unique_words = set(words) return len(unique_words)"},{"question":"Create a function that can eat arbitrary parameters in Python. How can we achieve this using decorators?","solution":"def arbitrary_params_decorator(func): Decorator to allow a function to accept arbitrary parameters. def wrapper(*args, **kwargs): return func(*args, **kwargs) return wrapper @arbitrary_params_decorator def example_function(*args, **kwargs): Example function to demonstrate the decorator. Prints args and kwargs. return args, kwargs"},{"question":"Create a function that takes in an array and a target number. The function should return \`true\` if any two elements in the array sum up to the target number, and \`false\` otherwise.","solution":"def has_pair_with_sum(arr, target): Returns True if there are any two elements in the array that sum up to the target number, False otherwise. seen = set() for number in arr: if target - number in seen: return True seen.add(number) return False"},{"question":"Create a function that takes two integers as parameters and returns their sum. However, if either of the integers is divisible by 7, the function should return their product instead. If both integers are divisible by 7, the function should return 0.","solution":"def special_sum(a, b): Returns the sum of a and b. If either a or b is divisible by 7, returns their product instead. If both a and b are divisible by 7, returns 0. if a % 7 == 0 and b % 7 == 0: return 0 elif a % 7 == 0 or b % 7 == 0: return a * b else: return a + b"},{"question":"Create a function that takes in a single argument - a list of integers. The function should return the maximum product of any three numbers in the list.","solution":"def max_product_of_three(nums): Returns the maximum product of any three numbers in the list. if len(nums) < 3: raise ValueError(\\"Array should have at least three elements\\") nums.sort() return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"Create a function that accepts two integer parameters (\`a\`, \`b\`) and returns an array containing all the numbers that are divisible by \`a\` or \`b\` within the range of 1 to 100 (inclusive). The function should be efficient and handle edge cases appropriately.","solution":"def divisible_by_a_or_b(a, b): Returns a list of numbers that are divisible by a or b within the range of 1 to 100 (inclusive). if a <= 0 or b <= 0: raise ValueError(\\"Parameters 'a' and 'b' must be positive integers.\\") result = [] for number in range(1, 101): if number % a == 0 or number % b == 0: result.append(number) return result"},{"question":"Create a function that takes a list of integers as input, \\"[1,2,3,4,5,6,7,8,9]\\", and returns the sum of the integers.","solution":"def sum_of_list(lst): Returns the sum of a list of integers. Args: lst (list of int): A list of integers. Returns: int: The sum of the integers in the list. return sum(lst)"},{"question":"Create a function that takes an integer as an input and unit of measurement (\\"m\\" for meters, \\"cm\\" for centimeters, or \\"ft\\" for feet) and returns the measurement converted to centimeters.","solution":"def convert_to_cm(value, unit): Converts a measurement to centimeters. Parameters: value (int): The value to convert. unit (str): The unit of the value (\\"m\\", \\"cm\\", or \\"ft\\"). Returns: float: The converted value in centimeters. if unit == \\"m\\": return value * 100 elif unit == \\"cm\\": return value elif unit == \\"ft\\": return value * 30.48 else: raise ValueError(\\"Unsupported unit provided\\")"},{"question":"Create a function that takes an integer input and returns the sum of the squares of all the even numbers in its digits. For example, for the number 1234, the function should return 4 (2^2 + 4^2 = 4 + 16 = 20).","solution":"def sum_of_even_squares(n): Returns the sum of the squares of all the even numbers in the digits of the input integer. Args: n (int): The input integer. Returns: int: The sum of squares of even digits. # Ensure n is a positive number n = abs(n) sum_squares = 0 while n > 0: digit = n % 10 if digit % 2 == 0: sum_squares += digit ** 2 n //= 10 return sum_squares"},{"question":"Create a function that takes a string and returns a list of characters that appear exactly once in the string. The function should ignore case sensitivity and consider only alphabets.","solution":"def unique_characters(s): Returns a list of characters that appear exactly once in the string. Ignores case sensitivity and considers only alphabets. from collections import Counter s = s.lower() s = ''.join(filter(str.isalpha, s)) counts = Counter(s) return [char for char, count in counts.items() if count == 1]"},{"question":"Create a function that takes an integer as an input and returns its binary equivalent as a string. If the input integer is 0, the function should return \\"0\\". However, if the input is not an integer, the function should return an error message indicating that the input must be an integer.","solution":"def int_to_binary(n): Returns the binary equivalent of the integer n as a string. If the input is not an integer, returns an error message. if not isinstance(n, int): return \\"Error: Input must be an integer\\" return bin(n)[2:] if n != 0 else \\"0\\""},{"question":"Create a function that takes a string as an input and returns the reversed string. Additionally, ensure the function maintains the case of each letter and punctuation as they were in the initial string.","solution":"def reverse_string(s): Returns the reversed string while maintaining the case and punctuation. return s[::-1]"},{"question":"Create a function that takes a list of integers and returns the smallest integer in the list. If the list is empty or contains non-integer values, the function should return None. Use the provided data points to test your function.","solution":"def find_smallest_integer(lst): Returns the smallest integer in the list. If the list is empty or contains non-integer values, returns None. if not lst or any(type(x) is not int for x in lst): return None return min(lst)"},{"question":"Create a function that takes as input an array of integers and returns a string describing the content of the array. If the input array is empty, the function should return an empty string.","solution":"def describe_array(arr): Takes as input an array of integers and returns a string describing the content of the array. If the input array is empty, returns an empty string. if not arr: return \\"\\" description = [] positive_count = sum(1 for x in arr if x > 0) negative_count = sum(1 for x in arr if x < 0) zero_count = arr.count(0) if positive_count > 0: description.append(f\\"{positive_count} positive number{'s' if positive_count > 1 else ''}\\") if negative_count > 0: description.append(f\\"{negative_count} negative number{'s' if negative_count > 1 else ''}\\") if zero_count > 0: description.append(f\\"{zero_count} zero{'s' if zero_count > 1 else ''}\\") return \\", \\".join(description)"},{"question":"Create a function that takes an array of integers and returns the sum of all of the numbers in the array. For example, for the input array \`[1, 2, 3, 4, 5]\`, the function should return \`15\`.","solution":"def sum_array(arr): Returns the sum of all the numbers in the array. :param arr: List of integers :return: Integer sum of the elements in the array return sum(arr)"},{"question":"Create a function that takes two arguments, \`n\` and \`k\`, and returns the sum of all even Fibonacci numbers not exceeding \`n\`. The Fibonacci sequence starts with \`F(1) = 1\` and \`F(2) = 1\`, and for \`F(n) > 2\`, \`F(n) = F(n-1) + F(n-2)\`. Ensure \`n\` is a positive integer.","solution":"def sum_even_fibonacci(n, k): Returns the sum of all even Fibonacci numbers not exceeding n. Parameters: n (int): The upper limit of the Fibonacci sequence to consider. k (int): A dummy parameter (for compatibility with the question). Returns: int: The sum of all even Fibonacci numbers not exceeding n. if n < 1: return 0 fib1, fib2 = 1, 1 sum_even = 0 while fib2 <= n: if fib2 % 2 == 0: sum_even += fib2 fib1, fib2 = fib2, fib1 + fib2 return sum_even"},{"question":"Create a function that takes in an integer \`n\` and returns the sum of all integers between 1 and \`n\` (inclusive). In Python, the function can be defined as \`def sum_of_integers(n):\`. How can you implement this?","solution":"def sum_of_integers(n): Returns the sum of all integers between 1 and n (inclusive). :param n: int - The upper limit of the range. :return: int - The sum of all integers from 1 to n. return sum(range(1, n+1))"},{"question":"Create a function that takes an integer \`n\` and returns the sum of the first \`n\` even Fibonacci numbers. The Fibonacci sequence is a sequence of numbers where each number after the first two is the sum of the two preceding ones, usually starting with 0 and 1. Even Fibonacci numbers are those that are divisible by 2.","solution":"def sum_even_fibonacci_numbers(n): Returns the sum of the first \`n\` even Fibonacci numbers. if n <= 0: return 0 # Initialize Fibonacci numbers a, b = 0, 1 sum_even_fibs = 0 count_even_fibs = 0 while count_even_fibs < n: # Calculate next Fibonacci number a, b = b, a + b if a % 2 == 0: sum_even_fibs += a count_even_fibs += 1 return sum_even_fibs"},{"question":"Create a function that takes in two sorted arrays (arr1 and arr2) and merges them into a single sorted array in ascending order. The function should be efficient in terms of time complexity. What is your approach?","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into a single sorted array in ascending order. :param arr1: List[int] - First sorted array :param arr2: List[int] - Second sorted array :returns: List[int] - Merged sorted array merged_array = [] i, j = 0, 0 # Traverse both arrays and append smaller element to the merged array while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # Append any remaining elements from arr1 or arr2 while i < len(arr1): merged_array.append(arr1[i]) i += 1 while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"Create a function that checks if a binary tree is height balanced. A binary tree is considered balanced if the height of the left and right subtree of any node differ by no more than 1.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def is_balanced(root): Check if a binary tree is height balanced. def check_height(node): if not node: return 0, True left_height, is_left_balanced = check_height(node.left) right_height, is_right_balanced = check_height(node.right) current_height = max(left_height, right_height) + 1 is_current_balanced = is_left_balanced and is_right_balanced and abs(left_height - right_height) <= 1 return current_height, is_current_balanced _, result = check_height(root) return result"},{"question":"Create a function that takes a string input and returns the corresponding integer value of the input string. The function should handle negative integers and floating-point numbers.","solution":"def string_to_number(s): Converts a string input to its corresponding integer value. Handles negative integers and floating-point numbers. try: value = float(s) return int(value) except ValueError: raise ValueError(f\\"Cannot convert '{s}' to a number.\\")"},{"question":"Create a function that takes an immutable array and a value to append to the array. Since arrays are immutable in certain programming languages (like Erlang), and you cannot change the existing one, the function should return a new array with the value appended to the original one.","solution":"def append_to_immutable_array(array, value): Takes an immutable array and a value, returns a new array with the value appended to the original array. return array + (value,)"},{"question":"Create a function that receives two parameters, a URL string and a set of parameters to be added to the URL. The function should return the fully formed URL with all the parameters appended to it as a query string.","solution":"from urllib.parse import urlencode, urlparse, urlunparse, parse_qs, ParseResult def add_params_to_url(url, params): Adds the given parameters to the URL. Parameters: - url (str): The base URL. - params (dict): The parameters to add. Returns: - str: The complete URL with the parameters. url_parts = urlparse(url) query = parse_qs(url_parts.query) query.update(params) new_query = urlencode(query, doseq=True) new_url = ParseResult( scheme=url_parts.scheme, netloc=url_parts.netloc, path=url_parts.path, params=url_parts.params, query=new_query, fragment=url_parts.fragment ).geturl() return new_url"},{"question":"Create a function that returns the first character of a string. If the string is empty, return an empty string.","solution":"def get_first_character(s): Returns the first character of the string s. If the string is empty, returns an empty string. if not s: return \\"\\" return s[0]"},{"question":"Create a function that finds the number of distinct prime factors for a given number. The function takes an integer as input and returns the count of distinct prime factors. Assume the input number is always a positive integer greater than 1.","solution":"def count_distinct_prime_factors(n): Returns the count of distinct prime factors of a given number n. distinct_primes = set() divisor = 2 while n > 1: while n % divisor == 0: distinct_primes.add(divisor) n //= divisor divisor += 1 return len(distinct_primes)"},{"question":"Create a function that takes an array as a parameter and returns the sum of all even numbers in the array. The solution should be efficient and concise.","solution":"def sum_of_even_numbers(arr): Returns the sum of all even numbers in the array. Args: arr (list): List of integers. Returns: int: Sum of all even numbers in the list. return sum(x for x in arr if x % 2 == 0)"},{"question":"Create a function that takes an array of integers as an argument and returns the sum of the squares of those integers. The function name should be \`sum_of_squares\`.","solution":"def sum_of_squares(arr): Returns the sum of the squares of the given integers in arr. Parameters: arr (list): A list of integers. Returns: int: The sum of the squares of the integers. return sum(x ** 2 for x in arr)"},{"question":"Create a function that takes a list of numbers as input and returns the second largest number in the list. If the list has fewer than two unique numbers, return -1.","solution":"def second_largest(numbers): Returns the second largest number in the list. If the list has fewer than two unique numbers, return -1. unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return -1 unique_numbers.sort(reverse=True) return unique_numbers[1]"},{"question":"Create a function that takes a string s and an integer n as parameters, and returns the n-th character of the string s.","solution":"def nth_character(s, n): Returns the n-th character of the string s. Parameters: s (str): The input string. n (int): The position of the character to return, 0-based index. Returns: str: The n-th character of the string s. Raises: IndexError: If n is out of range of the string s indices. return s[n]"},{"question":"Create a function that takes an array of numbers and returns the array with the numbers sorted in ascending order and then filter out the numbers below 10.","solution":"def sort_and_filter(arr): Sorts the array in ascending order and filters out numbers below 10. :param arr: list of integers :return: list of integers sorted and filtered sorted_arr = sorted(arr) filtered_arr = [num for num in sorted_arr if num >= 10] return filtered_arr"},{"question":"Create a function that takes an integer as an argument and returns the sum of all integers from 1 to n (inclusive). For example, if the input is 5, the function should return 15 because 1 + 2 + 3 + 4 + 5 = 15.","solution":"def sum_of_integers(n): Returns the sum of all integers from 1 to n (inclusive). return n * (n + 1) / 2"},{"question":"Create a function that takes an input string and returns the reverse of that string along with the count of vowels in the string. The function should also handle both uppercase and lowercase vowels.","solution":"def reverse_string_and_count_vowels(input_string): Returns the reverse of the input string along with the count of vowels (both lowercase and uppercase). Parameters: input_string (str): The string to be reversed and counted for vowels. Returns: tuple: A tuple containing the reversed string and the count of vowels. vowels = \\"aeiouAEIOU\\" reversed_string = input_string[::-1] vowel_count = sum(1 for char in input_string if char in vowels) return reversed_string, vowel_count"},{"question":"Create a function that generates a string containing a random word using Python. The word should be chosen from a list of predefined words, and each word should be of length between 3 to 6 characters.","solution":"import random def generate_random_word(): Returns a random word from a predefined list of words where each word length is between 3 to 6 characters. words_list = [\\"apple\\", \\"grape\\", \\"melon\\", \\"berry\\", \\"peach\\", \\"tarot\\", \\"cherry\\", \\"lemon\\", \\"lime\\", \\"plum\\"] return random.choice([word for word in words_list if 3 <= len(word) <= 6])"},{"question":"Create a function that takes a string as input and returns the number of unique words in the string. Words are defined as sequences of characters separated by whitespace. The function should be case-sensitive, meaning \\"Hello\\" and \\"hello\\" should be considered as different words.","solution":"def count_unique_words(input_string): Returns the number of unique words in the input string. Words are case-sensitive and defined as sequences of characters separated by whitespace. words = input_string.split() unique_words = set(words) return len(unique_words)"},{"question":"Create a function that takes in a single integer \`n\` as an argument and returns the sum of all positive integers less than or equal to \`n\`. For example, if the input is 5, the function should return 15 because 1 + 2 + 3 + 4 + 5 = 15.","solution":"def sum_positive_integers(n): Returns the sum of all positive integers less than or equal to n. if n < 1: return 0 return sum(range(1, n+1))"},{"question":"Create a function that takes a list of integers and returns the integer that appears an odd number of times. If there are no odd occurrences, return -1.","solution":"def find_odd_occurrence(nums): Takes a list of integers and returns the integer that appears an odd number of times. If there are no odd occurrences, returns -1. counter = {} for num in nums: if num in counter: counter[num] += 1 else: counter[num] = 1 for num, count in counter.items(): if count % 2 != 0: return num return -1"},{"question":"Create a function that takes an integer as input and returns its binary representation as a string in reverse order.","solution":"def reverse_binary_representation(n): Returns the binary representation of an integer n in reverse order as a string. # Get the binary representation of the absolute value of n, omitting the '0b' prefix binary_rep = bin(n if n >= 0 else -n)[2:] # Return the reversed binary representation as a string return binary_rep[::-1]"},{"question":"Create a function that will take a list of numbers as an argument and return a new list containing only the even numbers from the original list. How would you write this in Python?","solution":"def filter_even_numbers(lst): Returns a list of even numbers from the given list of numbers. Args: lst: List of integers. Returns: A list containing only the even integers from lst. return [num for num in lst if num % 2 == 0]"},{"question":"Create a function that takes a list of integers and returns the sum of all the in-range elements, where the range is defined as 5 to 10.","solution":"def sum_in_range(lst): Returns the sum of all the in-range elements (5 to 10 inclusive) in the list. return sum(x for x in lst if 5 <= x <= 10)"},{"question":"Create a function that generates a Fibonacci sequence up to a given number n, using recursion.","solution":"def fibonacci_sequence(n): Generates the Fibonacci sequence up to the n-th element using recursion. Args: n (int): The number of elements in the Fibonacci sequence to generate. Returns: List[int]: The Fibonacci sequence up to the n-th element. if n == 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] else: seq = fibonacci_sequence(n - 1) return seq + [seq[-1] + seq[-2]]"},{"question":"Create a function that takes two lists as arguments and returns a dictionary that is the intersection of both lists, meaning the dictionary should only contain keys that are present in both lists and have the same corresponding values in both lists. The function should handle cases where the lists contain non-integer values and not just integers.","solution":"def intersect_dicts(list1, list2): Returns a dictionary containing the intersection of the two lists, with keys that are present in both lists and have the same corresponding values. dict1 = {k:v for k, v in enumerate(list1)} dict2 = {k:v for k, v in enumerate(list2)} intersection = {} for k in dict1: if k in dict2 and dict1[k] == dict2[k]: intersection[k] = dict1[k] return intersection"},{"question":"Create a function that takes a dictionary (or object) as input and returns a copy of that dictionary with all null values removed.","solution":"def remove_null_values(dictionary): Removes all key-value pairs from the dictionary where the value is None. Parameters: dictionary (dict): The input dictionary. Returns: dict: A new dictionary with all None values removed. return {k: v for k, v in dictionary.items() if v is not None}"},{"question":"Create a function that takes a list as a parameter and returns the last element of that list. If the list is empty, return None.","solution":"def get_last_element(input_list): Returns the last element of the input list. If the list is empty, returns None. if not input_list: return None return input_list[-1]"},{"question":"Create a function that takes in a list of numbers and returns the median of the numbers. The function should handle any size list of integers.","solution":"def median(numbers): Returns the median of a list of numbers. if not numbers: raise ValueError(\\"The list is empty\\") sorted_numbers = sorted(numbers) n = len(sorted_numbers) if n % 2 == 1: return sorted_numbers[n // 2] else: mid1, mid2 = n // 2 - 1, n // 2 return (sorted_numbers[mid1] + sorted_numbers[mid2]) / 2"},{"question":"Create a function that identifies whether a given positive integer is a perfect square. A perfect square is an integer that is the square of an integer. For example, 16 is a perfect square because it is 4 squared. Your function should return \`true\` if the integer is a perfect square, and \`false\` otherwise. You should not use any built-in math functions like \`Math.sqrt()\` for this task.","solution":"def is_perfect_square(n): Determines if a given positive integer is a perfect square. :param n: The integer to be checked. :return: True if n is a perfect square, otherwise False. if n < 1: return False left, right = 1, n while left <= right: mid = (left + right) // 2 if mid * mid == n: return True elif mid * mid < n: left = mid + 1 else: right = mid - 1 return False"},{"question":"Create a function that converts a small number into a binary string representation. The function should take a single argument that is a small number and return a string that represents its binary form. Make sure to handle support for at least the smallest 16-bit number.","solution":"def to_binary_string(number): Converts a small number into its binary string representation. Supports at least a 16-bit number range (-32768 to 32767). :param number: Integer number to be converted to binary :return: Binary string representation of the input number if not -(2**15) <= number < 2**15: raise ValueError(\\"Number out of supported 16-bit range\\") return bin(number)[2:] if number >= 0 else '-' + bin(number)[3:]"},{"question":"Create a function that takes a list of integers and returns a new list with all the negative numbers removed.","solution":"def remove_negatives(lst): Returns a list with all negative numbers removed from the input list. Parameters: lst (list of int): The input list of integers. Returns: list of int: A new list with negative numbers removed. return [num for num in lst if num >= 0]"},{"question":"Create a function that generates a DNA sequence of a specified length by randomly choosing DNA bases (A, T, C, G). The function should also ensure that the sequence has at least one occurrence of each base.","solution":"import random def generate_dna_sequence(length): Generates a DNA sequence of the specified length by randomly choosing DNA bases (A, T, C, G). Ensures that the sequence has at least one occurrence of each base. :param length: Length of the desired DNA sequence. :return: A DNA sequence string. if length < 4: raise ValueError(\\"The length must be at least 4 to include all bases.\\") # Initializing the sequence with one of each base (A, T, C, G) sequence = ['A', 'T', 'C', 'G'] # Generating the rest of the sequence with random choices of bases random_bases = random.choices(\\"ATCG\\", k=length-4) sequence.extend(random_bases) # Shuffling to ensure randomness and distribution of bases random.shuffle(sequence) return ''.join(sequence)"},{"question":"Create a function that will return duplicates from a given list of integers. A duplicate is an integer that appears more than once in the list. The function should be optimized for performance and should return the duplicates in the order they first appear in the list.","solution":"def find_duplicates(nums): Returns a list of duplicates from the given list of integers. Args: nums (list): A list of integers. Returns: List[int]: A list containing the duplicates in the order they first appear. seen = set() duplicates = [] for num in nums: if num in seen: if num not in duplicates: duplicates.append(num) else: seen.add(num) return duplicates"},{"question":"Create a function that finds the missing number in an array of integers from 1 to n (inclusive), where exactly one number is missing. The array is sorted in ascending order.","solution":"def find_missing_number(arr): Finds the missing number in a sorted array of integers from 1 to n. The array is expected to have exactly one missing number. Args: arr (list of int): Sorted list of integers from 1 to n with exactly one number missing. Returns: int: The missing number. n = len(arr) + 1 expected_sum = n * (n + 1) // 2 actual_sum = sum(arr) return expected_sum - actual_sum"},{"question":"Create a function that returns an array of numbers with the Fibonacci sequence, up to and including a maximum number n.","solution":"def fibonacci_up_to_n(n): Returns a list of Fibonacci numbers up to and including the maximum number n. if n < 0: return [] fib_sequence = [0, 1] if n == 0: return [0] while True: next_fib = fib_sequence[-1] + fib_sequence[-2] if next_fib > n: break fib_sequence.append(next_fib) return fib_sequence"},{"question":"Create a function that takes a string and returns a list of all characters in the string that are repeated more than once. The list should not contain duplicates of the repeated characters and should be sorted in ascending order.","solution":"def repeated_characters(s): Returns a sorted list of characters that are repeated more than once in the input string. from collections import Counter char_count = Counter(s) repeated_chars = [char for char, count in char_count.items() if count > 1] return sorted(repeated_chars)"},{"question":"Create a function that takes an array of integers, sorts it in ascending order, and then removes any duplicate elements. The function should return the unique, sorted array.","solution":"def unique_sorted_array(arr): This function takes an array of integers, sorts it in ascending order, and removes any duplicate elements. The function returns the unique, sorted array. Parameters: arr (list): A list of integers. Returns: list: A unique, sorted list of integers. return sorted(set(arr))"},{"question":"Create a function that takes a list and rotates it to the right by one position. If the list is already empty, return an empty list. If the list has only one element, return the list unchanged.","solution":"def rotate_right(lst): Rotates the input list to the right by one position. Parameters: lst (list): The list to be rotated. Returns: list: The rotated list. if len(lst) <= 1: return lst return [lst[-1]] + lst[:-1]"},{"question":"Create a function that takes a list of integers and returns a new list containing only the integers that appear more than once.","solution":"def find_duplicates(nums): Returns a list of integers that appear more than once in the given list. :param nums: List of integers. :return: List of integers appearing more than once. from collections import Counter count = Counter(nums) return [num for num, freq in count.items() if freq > 1]"},{"question":"Create a function that takes in two strings and returns a single string that is the concatenation of the two input strings, but with an additional space in between. They are guaranteed to be non-empty strings.","solution":"def concatenate_with_space(str1, str2): Concatenates two strings with a space in between. return f\\"{str1} {str2}\\""},{"question":"Create a function that takes in a list of strings and returns a new list with the strings sorted in reverse order. Additionally, convert all the strings to lower case before sorting them.","solution":"def sort_strings_reverse(strings): Takes in a list of strings and returns a new list with the strings sorted in reverse order. The strings are converted to lower case before sorting. return sorted([s.lower() for s in strings], reverse=True)"},{"question":"Create a function that converts a decimal number to hexadecimal using bitwise operations. How would you write this function in Python?","solution":"def decimal_to_hexadecimal(n): Converts a decimal number to hexadecimal string using bitwise operations. Args: n (int): Decimal number to convert. Returns: str: Hexadecimal representation of the decimal number. if n == 0: return \\"0\\" hex_digits = \\"0123456789ABCDEF\\" hex_string = \\"\\" while n > 0: remainder = n & 15 # Get the last 4 bits of n hex_string = hex_digits[remainder] + hex_string # Convert remainder to hex digit n >>= 4 # Right-shift n by 4 bits return hex_string"},{"question":"Create a function that converts a string into a base64 encoded string. then, write a function that decodes a base64 encoded string back into the original string.","solution":"import base64 def encode_base64(input_string): Encodes a given string into a base64 encoded string. Args: input_string (str): The string to be encoded. Returns: str: The base64 encoded string. # Convert the string to bytes bytes_input = input_string.encode('utf-8') # Encode the bytes to base64 encoded_bytes = base64.b64encode(bytes_input) # Convert the base64 bytes back to string encoded_string = encoded_bytes.decode('utf-8') return encoded_string def decode_base64(encoded_string): Decodes a base64 encoded string back into the original string. Args: encoded_string (str): The base64 encoded string to be decoded. Returns: str: The original decoded string. # Convert the base64 string to bytes encoded_bytes = encoded_string.encode('utf-8') # Decode the base64 bytes original_bytes = base64.b64decode(encoded_bytes) # Convert the bytes back to string original_string = original_bytes.decode('utf-8') return original_string"},{"question":"Create a function that takes in a 2D array of integers and returns the maximum and minimum values found in the 2D array.","solution":"def find_max_min(matrix): Takes a 2D array of integers and returns the maximum and minimum values. :param matrix: List[List[int]] :return: Tuple(int, int) -> (max_value, min_value) if not matrix or not matrix[0]: return None, None max_value = matrix[0][0] min_value = matrix[0][0] for row in matrix: for value in row: if value > max_value: max_value = value if value < min_value: min_value = value return max_value, min_value"},{"question":"Create a function that takes an array of integers and returns the length of the longest subarray consisting of equal elements.","solution":"def longest_equal_subarray(arr): Returns the length of the longest subarray consisting of equal elements. if not arr: return 0 max_length = 1 current_length = 1 current_element = arr[0] for i in range(1, len(arr)): if arr[i] == current_element: current_length += 1 else: current_element = arr[i] current_length = 1 if current_length > max_length: max_length = current_length return max_length"},{"question":"Create a function that takes a list of integers as an argument and returns a new list that contains the indices of the original list elements that are even numbers.","solution":"def even_indices(lst): Returns a list of indices of the even numbers in the input list. Args: lst (list of int): A list of integers. Returns: list of int: A list containing indices of even numbers in the input list. return [index for index, number in enumerate(lst) if number % 2 == 0]"},{"question":"Create a function that takes two parameters: \`a\` (an integer representing the side length of a square) and \`b\` (an integer representing the side length of a rectangle). The function should return the area of the square if \`a\` is greater than \`b\`, and the area of the rectangle if \`a\` is less than or equal to \`b\`. If \`a\` is equal to \`b\`, the function should return the area of both shapes combined.","solution":"def calculate_area(a, b): Returns the area of the square if a > b, the area of the rectangle if a < b, or the combined area of both shapes if a == b. if a > b: return a ** 2 elif a < b: return a * b else: # a == b return (a ** 2) + (a * b)"},{"question":"Create a function that returns the string of the longest contiguous substring with no repeated characters from a given string. If there are multiple substrings of the same maximum length, return the first such substring in the given string. For example, \`maxUniqueSubSatring(\\"abcabcbb\\")\` should return \`\\"abc\\"\`, and \`maxUniqueSubSatring(\\"bbbbb\\")\` should return \`\\"b\\"\`.","solution":"def maxUniqueSubstring(s): Returns the longest contiguous substring with no repeated characters from the given string. max_len = 0 start = 0 max_start = 0 char_index_map = {} for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i if i - start + 1 > max_len: max_len = i - start + 1 max_start = start return s[max_start:max_start + max_len]"},{"question":"Create a function that takes a string of characters and returns how many times the substring \\"cat\\" appears in the string, case-insensitively, and considering overlapping occurrences. For example, the string \\"catcat\\" should return 2.","solution":"import re def count_cat_occurrences(s): Returns the count of overlapping occurrences of the substring \\"cat\\" in a given string, case-insensitively. return len(re.findall('(?=(cat))', s.lower()))"},{"question":"Create a function that takes in two string arguments, \`str1\` and \`str2\`. The function should convert both string arguments to lower case and check if they are the same. If they are the same, return True; otherwise, return False. Additionally, the function should ignore any non-alphabetic characters in the strings.","solution":"def compare_strings(str1, str2): Compare two strings ignoring case and non-alphabetic characters. Args: str1: First string to compare. str2: Second string to compare. Returns: True if the strings are the same ignoring case and non-alphabetic characters, False otherwise. import re clean_str1 = re.sub(r'[^a-zA-Z]', '', str1).lower() clean_str2 = re.sub(r'[^a-zA-Z]', '', str2).lower() return clean_str1 == clean_str2"},{"question":"Create a function that generates a random string of a specified length containing uppercase, lowercase, and digits. Also, it should ensure that the string does not contain any ambiguous characters such as 'I' and 'l' to avoid confusion.","solution":"import random import string def generate_random_string(length): Generates a random string of a specified length containing uppercase, lowercase letters, and digits. The string does not contain any ambiguous characters like 'I' and 'l'. Args: length (int): The length of the random string to generate. Returns: str: The generated random string. if length <= 0: return \\"\\" characters = string.ascii_uppercase.replace('I', '') + string.ascii_lowercase.replace('l', '') + string.digits random_string = ''.join(random.choice(characters) for _ in range(length)) return random_string"},{"question":"Create a function that calculates the factorial of a given number. Factorial of a number n, denoted as n!, is the product of all positive integers less than or equal to n. For example, 5! = 5 * 4 * 3 * 2 * 1 = 120. If the input number is 0 or less, the factorial should be considered as 0.","solution":"def factorial(n): Returns the factorial of a given number n. If the input number is 0 or less, returns 0. if n <= 0: return 0 result = 1 for i in range(1, n+1): result *= i return result"},{"question":"Create a function that generates a random SVG path string. The SVG path should be a simple circle with a blue color and a radius of 50 units. The path should include the circle's SVG syntax.","solution":"import random def generate_random_svg_circle(): Generates a random SVG path string for a blue circle with a radius of 50 units. # Generate random values for the center of the circle cx = random.randint(0, 100) cy = random.randint(0, 100) r = 50 fill = \\"blue\\" svg_circle = f'<circle cx=\\"{cx}\\" cy=\\"{cy}\\" r=\\"{r}\\" fill=\\"{fill}\\" />' return svg_circle"},{"question":"Create a function that converts RGB color to Hex color. Write the function using Python.","solution":"def rgb_to_hex(r, g, b): Convert RGB color to Hex color. The range of r, g, b is 0 to 255. if not(0 <= r <= 255 and 0 <= g <= 255 and 0 <= b <= 255): raise ValueError(\\"Color values should be in the range 0 to 255\\") return '#{0:02X}{1:02X}{2:02X}'.format(r, g, b)"},{"question":"Create a function that takes a string as an input and returns the count of unique characters in the string. Consider case sensitivity and non-alphanumeric characters as well. Your function should ignore spaces.","solution":"def count_unique_characters(s): Returns the count of unique characters in the string, ignoring spaces. # Remove spaces from the string s = s.replace(\\" \\", \\"\\") # Use a set to find unique characters unique_chars = set(s) return len(unique_chars)"},{"question":"Create a function that converts a hexadecimal number to its decimal equivalent. The function should take a string representing a hexadecimal number as input and return the decimal equivalent as an integer.","solution":"def hex_to_decimal(hex_str): Converts a hexadecimal number (given as a string) to its decimal equivalent. Args: hex_str (str): The hexadecimal number as a string. Returns: int: The decimal equivalent of the input hexadecimal number. return int(hex_str, 16)"},{"question":"Create a function that takes a string \`s\` as input and returns a new string \`t\` where all the vowels ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U') in \`s\` are replaced with '*'. The function should also ignore any trailing spaces in \`s\` and add a space between each word in the output string.","solution":"def replace_vowels_and_trim(s): Replaces all vowels in the input string s with '*' and ensures that the output string t ignores any trailing spaces, with each word separated by a single space. vowels = \\"aeiouAEIOU\\" trimmed = s.strip() words = trimmed.split() modified_words = [] for word in words: modified_word = ''.join('*' if char in vowels else char for char in word) modified_words.append(modified_word) t = ' '.join(modified_words) return t"},{"question":"Create a function that accepts 2 strings as input strings, and checks if one of the strings is a substring of the other. If it is, return true, else return false. A substring is a contiguous sequence of characters within a string. For example, \\"abc\\" is a substring of \\"abcdef\\", but \\"acd\\" is not.","solution":"def is_substring(str1, str2): Check if one of the strings is a substring of the other. Parameters: str1 (str): The first input string. str2 (str): The second input string. Returns: bool: True if one of the strings is a substring of the other, False otherwise. return str1 in str2 or str2 in str1"},{"question":"Create a function that takes two lists of integers, \`list1\` and \`list2\`, and returns a new list containing the elements that are present in either \`list1\` or \`list2\`, but not in both. The returned list should be sorted in ascending order.","solution":"def symmetric_difference(list1, list2): Returns a new sorted list containing the elements that are present in either list1 or list2, but not in both. set1 = set(list1) set2 = set(list2) symmetric_diff_set = set1.symmetric_difference(set2) return sorted(symmetric_diff_set)"},{"question":"Create a function that takes a string and returns the number of vowels in the string. The function should be case-insensitive and only count vowels from 'a' to 'z', excluding any other characters.","solution":"def count_vowels(s: str) -> int: Returns the number of vowels in the string. The function is case-insensitive and counts vowels from 'a' to 'z'. vowels = \\"aeiou\\" count = 0 for char in s.lower(): if char in vowels: count += 1 return count"},{"question":"Create a function that takes in a list of positive integers and returns a new list where each element is the product of all the numbers in the original list except the number at that index. The problem should not use division for the solution, and a solution should exist in constant space complexity (excluding the output list).","solution":"def product_except_self(nums): Returns a list where each element is the product of all integers in nums except for the element at current index. :param nums: List[int] - A list of positive integers. :return: List[int] - A list of products as described. n = len(nums) result = [1] * n # Step 1: Calculate prefix products prefix_product = 1 for i in range(n): result[i] = prefix_product prefix_product *= nums[i] # Step 2: Calculate postfix products and multiply postfix_product = 1 for i in range(n - 1, -1, -1): result[i] *= postfix_product postfix_product *= nums[i] return result"},{"question":"Create a function that takes an array of integers and returns the sum of all numbers that are positive and even. Sketch a solution in Python before providing the code.","solution":"def sum_positive_even_numbers(arr): Returns the sum of all positive even numbers in the given array. :param arr: List of integers :return: Integer sum of positive even numbers return sum(x for x in arr if x > 0 and x % 2 == 0)"},{"question":"Create a function that takes a list and returns the maximum element from the list.","solution":"def find_maximum(lst): Returns the maximum element from the list. if not lst: return None return max(lst)"},{"question":"Create a function that takes an array of strings and returns the string that appears most frequently. If there is a tie, return the string that appears first in the array.","solution":"def most_frequent_string(strings): Returns the string that appears most frequently in the array of strings. If there is a tie, returns the string that appears first in the array. from collections import Counter if not strings: return None counter = Counter(strings) most_common_count = counter.most_common(1)[0][1] most_frequent = [string for string, count in counter.items() if count == most_common_count] for string in strings: if string in most_frequent: return string # Example usage: # print(most_frequent_string([\\"apple\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"banana\\"])) # Output: \\"apple\\""},{"question":"Create a function that takes an array of integers as an argument and returns an array containing the Fibonacci sequence up to the nth element where n is the length of the input array.","solution":"def fibonacci_sequence(arr): Returns a list containing the Fibonacci sequence up to the nth element where n is the length of the input array. n = len(arr) if n == 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fib_sequence = [0, 1] for i in range(2, n): fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"Create a function that accepts two arguments (an array of integers and a target integer) and returns the indices of the two numbers in the array that add up to the target.","solution":"def two_sum(nums, target): Returns the indices of the two numbers in the array that add up to the target. Args: nums: List[int] - list of integers. target: int - target sum. Returns: List[int] - list containing the indices of the two numbers. num_to_index = {} for index, num in enumerate(nums): diff = target - num if diff in num_to_index: return [num_to_index[diff], index] num_to_index[num] = index return []"},{"question":"Create a function that takes two integers as input and returns the sum of all prime numbers between the two integers (inclusive). If the input integers are less than 2, the function should return 0.","solution":"def is_prime(n): if n <= 1: return False if n == 2: return True if n % 2 == 0: return False limit = int(n ** 0.5) + 1 for divider in range(3, limit, 2): if n % divider == 0: return False return True def sum_primes_between(a, b): Returns the sum of all prime numbers between a and b (inclusive). If the input integers are less than 2, the function returns 0. if a < 2 and b < 2: return 0 if a < 2: a = 2 if b < 2: b = 2 return sum([num for num in range(a, b + 1) if is_prime(num)])"},{"question":"Create a function that checks if a given number is a perfect square. If so, return the square root of that number; if not, return the remainder of the number divided by 4.","solution":"import math def check_perfect_square(num): Checks if the number is a perfect square. If it is, returns the square root of the number. If not, returns the remainder of the number divided by 4. square_root = math.isqrt(num) if square_root * square_root == num: return square_root else: return num % 4"},{"question":"Create a function that takes an array of numbers as input and returns the largest number in the array using Python.","solution":"def find_largest_number(numbers): Returns the largest number in an array. :param numbers: List of numbers :return: Largest number in the array if not numbers: raise ValueError(\\"The input list cannot be empty\\") return max(numbers)"},{"question":"Create a function that takes in two strings, string1 and string2, and returns a boolean value. The function should return True if string1 is a permutation of string2, otherwise return False.","solution":"def are_permutations(string1, string2): Returns True if string1 is a permutation of string2, otherwise returns False. if len(string1) != len(string2): return False return sorted(string1) == sorted(string2)"},{"question":"Create a function that finds the first even number in a list and returns it. If no even number is found, return -1.","solution":"def first_even_number(numbers): Finds the first even number in a list and returns it. If no even number is found, returns -1. :param numbers: List of integers :return: The first even number or -1 if no even number is found for number in numbers: if number % 2 == 0: return number return -1"},{"question":"Create a function that takes in a string and then tests if that string can be split into two palindromes using a minimum of one cut. A palindrome is a word that reads the same backward as forward. If the string can be split into two palindromes using a single cut, the string should be returned concatenated with itself. Otherwise, return the original string.","solution":"def is_palindrome(s): Check if a given string is a palindrome. return s == s[::-1] def split_into_two_palindromes(s): This function checks if a string can be split into two palindromes using a minimum of one cut. If possible, it returns the string concatenated with itself. Otherwise, it returns the original string. n = int(len(s)) for i in range(1, n): # Check the two substrings created by splitting at each position. if is_palindrome(s[:i]) and is_palindrome(s[i:]): return s + s return s"},{"question":"Create a function that takes in a sorted list and a target value, and uses linear search to find the index of the target value in the list.","solution":"def linear_search(sorted_list, target): This function performs a linear search to find the index of the target value in the sorted list. If the target value is not found, it returns -1. for index, value in enumerate(sorted_list): if value == target: return index return -1"},{"question":"Create a function that accepts an array of integers as a parameter and returns an array containing only the distinct (non-repeated) elements of the original array, preserving their order of appearance.","solution":"def distinct_elements(arr): Returns an array containing only the distinct (non-repeated) elements of the original array, preserving their order of appearance. seen = set() distinct = [] for num in arr: if num not in seen: seen.add(num) distinct.append(num) return distinct"},{"question":"Create a function that takes a string and returns the string with all characters replaced by their corresponding ASCII values. For example, \\"hello\\" should return \\"104101108108111\\".","solution":"def string_to_ascii(string): Returns a string with all characters replaced by their corresponding ASCII values. return ''.join(str(ord(char)) for char in string)"},{"question":"Create a function that takes an input string, reverses the order of words, and returns the reversed string. Each word in the input string is separated by exactly one space. Additionally, the function should handle any leading or trailing spaces and multiple consecutive spaces between words.","solution":"def reverse_words(input_string): Reverses the order of words in the input string. Leading and trailing spaces and multiple consecutive spaces between words are handled appropriately. Args: input_string (str): The input string to reverse the words of. Returns: str: The input string with words reversed in order. words = input_string.strip().split() reversed_words = words[::-1] return ' '.join(reversed_words)"},{"question":"Create a function that takes a string and a list of strings as parameters and returns a string that is the concatenated result of the original string and each string in the list.","solution":"def concatenate_strings(base_str, str_list): Concatenates a base string with each string in the list. Parameters: base_str (str): The original string to which other strings will be concatenated. str_list (list): A list of strings to concatenate with the base string. Returns: str: The concatenated result of the base_str and each string in the str_list. for s in str_list: base_str += s return base_str"},{"question":"Create a function that accepts an array of integers and an integer k, and return the kth largest element in the array. Assume that k is always valid (i.e., 1 <= k <= array's length).","solution":"def kth_largest(arr, k): Returns the kth largest element in the array. Parameters: arr (list): List of integers k (int): The k value where 1 <= k <= len(arr) Returns: int: The kth largest element in the array arr.sort(reverse=True) return arr[k-1]"},{"question":"Create a function that takes a string representing a binary number and converts it to a decimal number. The function should handle both integer and fractional parts of the binary number. For example, \\"101.1\\" should return 5.5.","solution":"def binary_to_decimal(binary_str): Converts a binary string (containing both integer and fractional parts) to a decimal number. Parameters: binary_str (str): A string representing a binary number (e.g., \\"101.1\\"). Returns: float: The decimal representation of the binary number. if '.' in binary_str: integer_part, fractional_part = binary_str.split('.') else: integer_part, fractional_part = binary_str, '' integer_value = int(integer_part, 2) fractional_value = 0 for i, digit in enumerate(fractional_part): fractional_value += int(digit) * (2 ** -(i + 1)) return integer_value + fractional_value"},{"question":"Create a function that takes a string as a parameter and returns a hash table (in Python, a dictionary) where the keys are the unique characters in the string and the values are the counts of how many times each character appears in the string.","solution":"def character_count(s): Returns a dictionary where keys are the unique characters in the string s and values are the counts of how many times each character appears in the string. :param s: The input string :type s: str :return: A dictionary with character counts :rtype: dict result = {} for char in s: if char in result: result[char] += 1 else: result[char] = 1 return result"},{"question":"Create a function that takes a list of strings and returns the number of times the word \\"apple\\" appears in the list. How should the function be designed to handle both cases and ignore case sensitivity?","solution":"def count_apples(word_list): This function takes a list of strings and returns the number of times the word \\"apple\\" appears, case insensitive. count = 0 for word in word_list: if word.lower() == \\"apple\\": count += 1 return count"},{"question":"Create a function that generates a Fibonacci sequence of a specified length n. The sequence should start with 0 and 1. Each subsequent number is the sum of the two preceding ones. The function should return the sequence as a list.","solution":"def generate_fibonacci(n): Generates a Fibonacci sequence of length n. Args: n (int): The length of the Fibonacci sequence to generate. Returns: List[int]: The Fibonacci sequence of length n. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] sequence = [0, 1] for _ in range(2, n): sequence.append(sequence[-1] + sequence[-2]) return sequence"},{"question":"Create a function that adds up integers from a list to find the sum.","solution":"def sum_of_integers(int_list): Returns the sum of integers in the given list. Parameters: int_list (list): List of integers to be summed up. Returns: int: Sum of integers in the list. return sum(int_list)"},{"question":"Create a function that calculates the total sales for a given month and year, using a list of sales data where each element is a dictionary containing the sale date, amount, and product details. The function should return the total sales amount for the specified month and year.","solution":"from datetime import datetime def calculate_total_sales(sales_data, year, month): Calculate the total sales for the specified month and year. Args: sales_data (list): List of dictionaries containing sale details with keys 'date' (ISO format string), 'amount' (float), and 'product' (str). year (int): The year to calculate total sales for. month (int): The month to calculate total sales for. Returns: float: The total sales amount for the specified month and year. total_sales = 0.0 for sale in sales_data: sale_date = datetime.strptime(sale['date'], \\"%Y-%m-%d\\") if sale_date.year == year and sale_date.month == month: total_sales += sale['amount'] return total_sales"},{"question":"Create a function that merges two sorted linked lists and append the result to a given linked list.","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def merge_two_sorted_lists(l1, l2): Merges two sorted linked lists and returns the head of the combined sorted linked list. dummy = ListNode(0) current = dummy while l1 and l2: if l1.val < l2.val: current.next = l1 l1 = l1.next else: current.next = l2 l2 = l2.next current = current.next if l1: current.next = l1 else: current.next = l2 return dummy.next def append_merged_lists(first_list, l1, l2): Merges two sorted linked lists and append the result to a given linked list. Returns the head of the updated linked list. merged_head = merge_two_sorted_lists(l1, l2) if not first_list: return merged_head current = first_list while current.next: current = current.next current.next = merged_head return first_list"},{"question":"Create a function that takes two arguments, a list and a value, and returns the total occurrence of the value in the list.","solution":"def count_occurrences(lst, value): Returns the total occurrence of the value in the list. :param lst: List of elements :param value: Value to count in the list :return: Total occurrences of value in lst return lst.count(value)"},{"question":"Create a function that takes an array of integers and returns the sum of all the integers in the array. Additionally, the function should handle large arrays efficiently by utilizing a divide-and-conquer approach.","solution":"def sum_array(arr): Returns the sum of all integers in a given array using a divide-and-conquer approach. Parameters: arr (list of int): An array of integers. Returns: int: The sum of all integers in the array. if not arr: return 0 def divide_and_conquer(left, right): if left == right: return arr[left] mid = (left + right) // 2 left_sum = divide_and_conquer(left, mid) right_sum = divide_and_conquer(mid + 1, right) return left_sum + right_sum return divide_and_conquer(0, len(arr) - 1)"},{"question":"Create a function that takes a 2D array and rotates it 90 degrees clockwise. The function should return the rotated 2D array.","solution":"def rotate_90_clockwise(matrix): Rotates a 2D matrix 90 degrees clockwise. if not matrix or not matrix[0]: return [] rows, cols = len(matrix), len(matrix[0]) rotated_matrix = [[0] * rows for _ in range(cols)] for r in range(rows): for c in range(cols): rotated_matrix[c][rows - 1 - r] = matrix[r][c] return rotated_matrix"},{"question":"Create a function that checks if all elements in an array are even numbers.","solution":"def are_all_elements_even(arr): Returns True if all elements in the array are even numbers, otherwise False. return all(x % 2 == 0 for x in arr)"},{"question":"Create a function that takes an integer as an input and returns the same integer as an output, but without any trailing zeros. If there are no trailing zeros, the function should return the number as is.","solution":"def remove_trailing_zeros(n): Removes trailing zeros from an integer n and returns the result. n_str = str(n).rstrip('0') return int(n_str) if n_str else 0"},{"question":"Create a function that will find the maximum subarray sum using Kadane's Algorithm. The code should be written in Python and handle any array of integers that may include negative numbers.","solution":"def max_subarray_sum(nums): Finds the maximum subarray sum using Kadane's Algorithm. :param nums: List of integers. :return: The maximum subarray sum. max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that can take an input \`n\` and return a sequence of \`n\` numbers. The function should also accept an optional boolean parameter \`reverse\` which, if \`True\`, reverses the sequence.","solution":"def generate_sequence(n, reverse=False): Generates a sequence of \`n\` numbers starting from 0. If \`reverse\` is True, the sequence is returned in reverse order. Parameters: n (int): The length of the sequence to generate. reverse (bool): If set to True, the sequence will be reversed. Returns: list: The generated sequence of numbers. sequence = list(range(n)) if reverse: sequence.reverse() return sequence"},{"question":"Create a function that reverses a string in Python. How would you structure your code to ensure it's both pythonic and efficient?","solution":"def reverse_string(s): Returns the reverse of the input string s. return s[::-1]"},{"question":"Create a function that returns the minimum number of steps required to switch from one state to another state of a Rubik's cube. A step is defined as rotating a face of the cube. The two states are represented as 1-D arrays of length 54, where each element represents a color on the Rubik's cube. The first 9 elements represent the top face, the next 9 represent the front face, and so on, in the order: top, front, right, back, bottom, left.","solution":"def min_steps_to_solve_rubiks_cube(start_state, end_state): Returns the minimum number of steps required to switch from one state to another state of a Rubik's cube. Parameters: - start_state: list of 54 integers representing the current state of the cube. - end_state: list of 54 integers representing the desired state of the cube. Note: This function uses a breadth-first search approach assuming each move alters state, but for true minimum moves, a sophisticated solver would be required. from collections import deque # Simple initial checks if start_state == end_state: return 0 # Initialize queue for BFS queue = deque([(start_state, 0)]) visited = set() visited.add(tuple(start_state)) while queue: current_state, steps = queue.popleft() # Generate all possible next states for next_state in generate_possible_moves(current_state): if next_state == end_state: return steps + 1 if tuple(next_state) not in visited: visited.add(tuple(next_state)) queue.append((next_state, steps + 1)) return -1 # should never reach here if there's a solution def generate_possible_moves(state): Placeholder function to generate all possible successor states. This would be vastly complex and involve handling all Rubik's cube legal moves. Here we need just a realistic scaffold for the unit tests setup. # In a complete implementation, this function would contain the actual logic for # transitioning between cube states with valid Rubik's cube moves. # For simplicity in this framework, we assume it can return some modified states. # Here we return empty state because actual implementation is complex. possible_states = [list(state)] # Just a placeholder to demonstrate the structure. return possible_states # Actual implementation omitted for simplicity"},{"question":"Create a function that checks for minimum occurrence of characters in a string","solution":"def min_occurrence(input_string): Returns a dictionary with characters as keys and their minimum occurrence in the string as values. char_count = {} for char in input_string: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count # Assuming we need to find the minimum occurring character from the dictionary def minimum_occurrence_character(input_string): char_count = min_occurrence(input_string) if not char_count: return None min_count = min(char_count.values()) min_chars = [char for char, count in char_count.items() if count == min_count] return min_chars"},{"question":"Create a function that generates a list of all possible unique pairs from a given list of integers. A pair is considered unique if the integers in each pair do not repeat. The order of pairs does not matter.","solution":"from itertools import combinations def unique_pairs(lst): Returns a list of all possible unique pairs from a given list of integers. Parameters: lst (list of int): The input list of integers. Returns: list of tuples: A list of unique pairs. return list(combinations(lst, 2))"},{"question":"Create a function that takes in two strings and returns their concatenation if their length is even, or their sum if their length is odd. If the strings are empty, return \\"Empty\\".","solution":"def concat_or_sum(s1, s2): Returns the concatenation of the two strings if their combined length is even, or the sum of their lengths as a string if their combined length is odd. If the strings are empty, return \\"Empty\\". if not s1 and not s2: return \\"Empty\\" combined_length = len(s1) + len(s2) if combined_length % 2 == 0: return s1 + s2 else: return str(combined_length)"},{"question":"Create a function that takes two string parameters: \`str1\` and \`str2\`. The function should return the length of the longest common subsequence (LCS) between \`str1\` and \`str2\`. A common subsequence is a sequence that appears in both strings, but not necessarily in the same order. For example, for \`str1 = \\"AGGTAB\\"\` and \`str2 = \\"GXTXAYB\\"\`, the function should return \`4\` (the LCS is \\"GTAB\\").","solution":"def longest_common_subsequence(str1, str2): Returns the length of the longest common subsequence (LCS) between str1 and str2. m, n = len(str1), len(str2) # Create a 2D array to store lengths of LCS of substrings lcs_table = [[0] * (n+1) for _ in range(m+1)] # Build the table in bottom-up fashion for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: lcs_table[i][j] = lcs_table[i - 1][j - 1] + 1 else: lcs_table[i][j] = max(lcs_table[i - 1][j], lcs_table[i][j - 1]) # lcs_table[m][n] contains the length of LCS for str1[0..m-1], str2[0..n-1] return lcs_table[m][n]"},{"question":"Create a function that generates a string of a specified length filled with a specified character.","solution":"def generate_string(length, char): Generates a string of a specified length filled with a specified character. :param length: The length of the string to be generated. :param char: The character to fill the string with. :return: The generated string of specified length filled with the specified character. return char * length"},{"question":"Create a function that accepts two strings as input and returns a new string. The new string is created by concatenating the first string with the second string and then reversing the resulting string. You should use the \`toUpperCase()\` and \`toLowerCase()\` methods on strings, and the \`reverse()\` function on arrays.","solution":"def concat_and_reverse(str1, str2): Concatenates two strings and reverses the result. concatenated_str = str1 + str2 reversed_str = concatenated_str[::-1] return reversed_str"},{"question":"Create a function that takes a string and returns the maximum allowed length of a word in the string without breaking it up. For example, if a sentence has a \\"hello world\\", and we have a limit of 5, it should return 5, as \\"hello\\" is the longest word that fits within the limit. If the limit is less than the length of any word, return the limit. If there are no words in the string, return 0.","solution":"def max_allowed_length(s, limit): Returns the maximum allowed length of a word in the string without breaking it up. words = s.split() if not words: return 0 max_length = 0 for word in words: if len(word) <= limit: max_length = max(max_length, len(word)) return max_length if max_length > 0 else limit"},{"question":"Create a function that determines if a given string is a palindrome. A palindrome is a string that reads the same backward as forward. For example, \\"madam\\" is a palindrome, but \\"hello\\" is not. Your function should handle both uppercase and lowercase letters, and should ignore spaces and punctuation.","solution":"import re def is_palindrome(s): Determines if a given string is a palindrome. A palindrome is a string that reads the same backward as forward. The function handles both uppercase and lowercase letters and ignores spaces and punctuation. # Remove non-alphanumeric characters and convert to lowercase cleaned_str = re.sub(r'[^A-Za-z0-9]', '', s).lower() # Check if the string reads the same backward as forward return cleaned_str == cleaned_str[::-1]"},{"question":"Create a function that generates the Fibonacci sequence up to the nth term. The function should return the nth Fibonacci number if n is a non-negative integer, or -1 if n is a negative number.","solution":"def fibonacci(n): Generate the Fibonacci sequence up to the nth term and return the nth Fibonacci number. Return -1 if n is a negative number. if n < 0: return -1 # First two Fibonacci numbers fib_seq = [0, 1] # Generate Fibonacci sequence up to nth term for i in range(2, n + 1): fib_seq.append(fib_seq[-1] + fib_seq[-2]) return fib_seq[n]"},{"question":"Create a function that takes an array of numbers as an argument and returns a new array containing only the numbers that are strictly greater than the immediate preceding number. In other words, find the elements in the array that are greater than the element immediately before them.","solution":"def filter_greater_than_previous(arr): Returns a new array containing only the numbers that are strictly greater than the immediate preceding number. if not arr: return [] result = [] for i in range(1, len(arr)): if arr[i] > arr[i - 1]: result.append(arr[i]) return result"},{"question":"Create a function that takes an integer argument n and returns the nth Fibonacci number. The function should also ensure that for negative inputs, it returns 'undefined' as the Fibonacci sequence is not defined for negative indices.","solution":"def fibonacci(n): Returns the nth Fibonacci number or 'undefined' for negative input. if n < 0: return 'undefined' elif n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n+1): a, b = b, a + b return b"},{"question":"Create a function that accepts two strings, \`str1\` and \`str2\`, and returns a tuple containing the common characters between the two strings, sorted in ascending order.","solution":"def common_characters(str1, str2): Returns a tuple of common characters between str1 and str2, sorted in ascending order. # Find the intersection of characters in both strings common_chars = set(str1) & set(str2) # Return a sorted tuple of the common characters return tuple(sorted(common_chars))"},{"question":"Create a function that takes two parameters: an array of positive integers and a positive integer 'n'. The function should return the 'n' smallest integers from the given array in ascending order. If 'n' is greater than the length of the array, return all elements sorted in ascending order. If the array is empty, return an empty array.","solution":"def find_n_smallest(arr, n): Returns the 'n' smallest integers from the given array in ascending order. If 'n' is greater than the length of the array, returns all elements sorted in ascending order. If the array is empty, returns an empty array. if not arr: return [] return sorted(arr)[:n]"},{"question":"Create a function that takes a string as input and returns the string reversed. Please provide a code snippet in Python.","solution":"def reverse_string(s): Returns the input string s reversed. return s[::-1]"},{"question":"Create a function that checks if a given string is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward, ignoring spaces, punctuation, and capitalization. Here's the function signature: \`def is_palindrome(s: str) -> bool:\`.","solution":"def is_palindrome(s: str) -> bool: Returns True if the given string is a palindrome, otherwise False. A palindrome reads the same backward as forward, ignoring spaces, punctuation, and capitalization. # Remove spaces and convert to lowercase cleaned_str = ''.join(char for char in s if char.isalnum()).lower() # Check if the cleaned string is equal to its reverse return cleaned_str == cleaned_str[::-1]"},{"question":"Create a function that takes two arrays as input and returns their intersection, sorted in ascending order. Each array contains distinct integers and has a length of at least one. The function should handle cases where the arrays have different lengths. The function should also handle cases where there are no common elements.","solution":"def intersection_sorted(arr1, arr2): Returns the sorted intersection of two arrays. Parameters: - arr1: List[int], a list of distinct integers - arr2: List[int], a list of distinct integers Returns: - List[int], a sorted list of integers that are present in both arr1 and arr2 # Convert lists to sets to find the intersection set1 = set(arr1) set2 = set(arr2) # Find the intersection intersection = set1.intersection(set2) # Convert the intersection to a list and sort it return sorted(list(intersection))"},{"question":"Create a function that generates a list of all prime numbers up to a given limit. The function should take one integer argument as input, which represents the upper limit (inclusive). The function should return a list of prime numbers that are less than or equal to the upper limit.","solution":"def generate_primes(upper_limit): Generate a list of all prime numbers up to a given limit. :param upper_limit: The upper limit (inclusive) for prime numbers. :return: A list of prime numbers less than or equal to the upper limit. if upper_limit < 2: return [] primes = [] for num in range(2, upper_limit + 1): is_prime = True for i in range(2, int(num**0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Create a function that takes an array and returns a dictionary where the keys are the elements of the array and the values are their indices. If an element appears multiple times in the array, all of its indices should be stored in the dictionary as a list. If the array is empty, the function should return an empty dictionary.","solution":"def array_to_dict(arr): Converts an array into a dictionary where elements are keys and their indices are the values. For elements appearing multiple times, their indices are stored as a list. Parameters: arr (list): List of elements Returns: dict: Dictionary with elements as keys and their indices as values result = {} for index, element in enumerate(arr): if element in result: result[element].append(index) else: result[element] = [index] return result"},{"question":"Create a function that accepts a list of integers and returns the sum of the integers. Write this function in Python and provide all necessary imports.","solution":"def sum_of_integers(int_list): Returns the sum of a list of integers. return sum(int_list)"},{"question":"Create a function that takes a list of strings and returns the string with the maximum length. If there are multiple strings with the maximum length, return the first one encountered. If the list is empty, return \`None\`.","solution":"def longest_string(lst): Returns the string with the maximum length from the list. If there are multiple strings with the maximum length, returns the first one encountered. If the list is empty, returns None. if not lst: return None longest = lst[0] for string in lst[1:]: if len(string) > len(longest): longest = string return longest"},{"question":"Create a function that returns the most common character in a string. If there are multiple characters with the same highest frequency, return any one of them. If the string is empty or contains only spaces, the function should return None. Also, consider the case sensitivity of letters.","solution":"from collections import Counter def most_common_character(s): Returns the most common character in the string \`s\`. If the string is empty or contains only spaces, returns None. Considers case sensitivity of letters. if not s.strip(): return None # Count the frequency of each character in the string count = Counter(s) # Find the character with the highest frequency most_common = count.most_common(1) return most_common[0][0] if most_common else None"},{"question":"Create a function that generates a list of prime numbers up to a given number n (inclusive). The function should efficiently find all prime numbers less than or equal to n.","solution":"def generate_primes(n): Generates a list of prime numbers up to the given number n (inclusive). Parameters: n (int): The upper limit for prime number generation. Returns: List[int]: A list of prime numbers up to n. if n < 2: return [] sieve = [True] * (n+1) sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n+1, start): sieve[multiple] = False return [num for num in range(n+1) if sieve[num]]"},{"question":"Create a function that returns the sum of all elements in an array using recursion.","solution":"def sum_array_recursive(arr): Returns the sum of all elements in the array using recursion. if not arr: return 0 return arr[0] + sum_array_recursive(arr[1:])"},{"question":"Create a function that takes in a binary string and returns the decimal equivalent using an iterative method to convert from binary to decimal.","solution":"def binary_to_decimal(binary_str): Converts a binary string to its decimal equivalent. Args: binary_str (str): A string representing a binary number. Returns: int: The decimal equivalent of the binary number. decimal_value = 0 length = len(binary_str) for i in range(length): # binary digit from the rightmost side digit = int(binary_str[length - 1 - i]) # add contribution of this binary digit to the decimal value decimal_value += digit * (2 ** i) return decimal_value"},{"question":"Create a function that takes three arguments: nb1, nb2, and nb3, which represent three, non-negative integers. The function should return the greatest common divisor (GCD) of nb1 and nb2. However, the GCD should only be calculated if nb3 is a prime number. If nb3 is not a prime number, the function should return 0.","solution":"def is_prime(n): Check if a number is a prime number. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False max_divisor = int(n**0.5) + 1 for d in range(3, max_divisor, 2): if n % d == 0: return False return True def gcd(a, b): Calculate the greatest common divisor of two numbers a and b. while b != 0: a, b = b, a % b return a def gcd_if_prime(nb1, nb2, nb3): Returns the GCD of nb1 and nb2 if nb3 is a prime number, otherwise returns 0. if is_prime(nb3): return gcd(nb1, nb2) return 0"},{"question":"Create a function that takes a number as an argument and returns the largest possible number that can be made from the digits of that number. For example, if the input is 123, the function should return 321. If the input is 98765, the function should return 98765. If the input is 111, the function should return 111.","solution":"def largest_possible_number(num): Returns the largest possible number that can be made from the digits of the input number. # Convert the number to a string, then to a list of digits digits = list(str(num)) # Sort the list in descending order digits.sort(reverse=True) # Join the sorted list back into a string and convert to an integer return int(''.join(digits))"},{"question":"Create a function that takes an integer as input and returns the binary string of the integer after removing any leading zeros. The binary string should be returned without any leading zeros.","solution":"def integer_to_binary_string(n): Converts an integer to a binary string without leading zeros. Parameters: n (int): the integer to be converted Returns: str: the binary string representation of the integer without leading zeros if n == 0: return '0' return bin(n)[2:]"},{"question":"Create a function that takes two lists of integers and returns a new list containing the product of corresponding elements from the two lists. If one list is shorter, the extra elements in the longer list should be multiplied by 0.","solution":"def multiply_lists(list1, list2): Returns a new list containing the product of corresponding elements from list1 and list2. If one list is shorter, the extra elements in the longer list are multiplied by 0. max_length = max(len(list1), len(list2)) result = [] for i in range(max_length): val1 = list1[i] if i < len(list1) else 0 val2 = list2[i] if i < len(list2) else 0 result.append(val1 * val2) return result"},{"question":"Create a function that calculates the sum of the digits of a given integer number. If the sum of the digits is an even number, return that sum. If the sum is an odd number, return \`False\`.","solution":"def sum_of_digits(n): Returns the sum of the digits of a given integer number if the sum is even, otherwise returns False if the sum is odd. # Convert the number to a string to iterate over each digit digits = str(abs(n)) # Calculate the sum of the digits digit_sum = sum(int(digit) for digit in digits) # Check if the sum is even if digit_sum % 2 == 0: return digit_sum else: return False"},{"question":"Create a function that computes the factorial of a number using a recursive method in Python. The function should be named \`factorial_recursive\` and it should take an integer \`n\` as its argument. The factorial of a number \`n\`, denoted as \`n!\`, is the product of all positive integers less than or equal to \`n\`.","solution":"def factorial_recursive(n): Returns the factorial of n using a recursive method. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") elif n == 0 or n == 1: return 1 else: return n * factorial_recursive(n - 1)"},{"question":"Create a function that takes in the radius of a circle and returns the area of the circle. The function should handle cases when the radius is less than or equal to zero by returning an error message.","solution":"import math def circle_area(radius): Returns the area of a circle given its radius. If the radius is less than or equal to zero, returns an error message. if radius <= 0: return \\"Error: Radius must be greater than zero.\\" return math.pi * radius ** 2"},{"question":"Create a function that finds the number of prime numbers less than a given integer n.","solution":"def count_primes(n): Returns the number of prime numbers less than a given integer n. if n <= 2: return 0 sieve = [True] * n sieve[0] = sieve[1] = False # 0 and 1 are not primes for start in range(2, int(n ** 0.5) + 1): if sieve[start]: for multiple in range(start*start, n, start): sieve[multiple] = False return sum(sieve)"},{"question":"Create a function that takes a list of strings and returns a dictionary that maps each string to its length.","solution":"def strings_to_lengths(strings): Takes a list of strings and returns a dictionary that maps each string to its length. return {string: len(string) for string in strings}"},{"question":"Create a function that returns the maximum profit from buying and selling a stock Given a list of daily prices and must buy before you sell.","solution":"def max_profit(prices): Returns the maximum profit from buying and selling a stock. You must buy before you sell. :param prices: List of daily prices of the stock. :type prices: List[int] :return: Maximum profit. :rtype: int if not prices: return 0 min_price = float('inf') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Create a function that takes in three strings and finds the longest common subsequence between them. You should return the length of the longest common subsequence.","solution":"def longest_common_subsequence(s1, s2, s3): Returns the length of longest common subsequence between three strings. m, n, o = len(s1), len(s2), len(s3) dp = [[[0 for _ in range(o+1)] for _ in range(n+1)] for _ in range(m+1)] for i in range(1, m+1): for j in range(1, n+1): for k in range(1, o+1): if s1[i-1] == s2[j-1] == s3[k-1]: dp[i][j][k] = dp[i-1][j-1][k-1] + 1 else: dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1]) return dp[m][n][o]"},{"question":"Create a function that takes a string as input and returns True if all characters in the string are alphanumeric (letters or numbers). If the string contains any special characters, it should return False. Here's an example.","solution":"def is_alphanumeric(s): Check if all characters in the given string are alphanumeric (letters or numbers). :param s: Input string :return: True if all characters are alphanumeric, False otherwise return s.isalnum()"},{"question":"Create a function that converts a string to its binary representation. The binary representation should be left-padded with zeros to ensure it is of length 8 characters.","solution":"def str_to_binary(s): Converts a string to its binary representation. Each character's binary representation is left-padded with zeros to ensure it is of length 8. Args: - s (str): The input string. Returns: - str: A string of binary representations separated by spaces. return ' '.join(format(ord(char), '08b') for char in s)"},{"question":"Create a function that calculates the factorial of a given number using recursion. The function should take an integer as input and return the factorial of that number. If the input is negative, the function should return \\"Factorial is not defined for negative numbers\\".","solution":"def factorial(n): Returns the factorial of the given number using recursion. If the input is negative, returns a message indicating that factorial is not defined for negative numbers. if n < 0: return \\"Factorial is not defined for negative numbers\\" elif n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Create a function that returns a string reversed","solution":"def reverse_string(s): Returns the reversed string of the input string s. return s[::-1]"},{"question":"Create a function that takes an integer as an input and outputs a string confirming that the number is even or odd.","solution":"def even_or_odd(number): Returns a string indicating whether the input number is even or odd. if number % 2 == 0: return \\"The number is even.\\" else: return \\"The number is odd.\\""},{"question":"Create a function that takes two lists of integers and returns a new list containing the common elements between the two input lists. The function should use list comprehension and the \`in\` keyword to find these common elements. Additionally, the resulting list should be sorted in ascending order.","solution":"def common_elements(list1, list2): Returns a sorted list of common elements between the two input lists. Parameters: list1 (list): First list of integers. list2 (list): Second list of integers. Returns: list: Sorted list of common elements. return sorted([element for element in list1 if element in list2])"},{"question":"Create a function that receives an integer as input and returns an integer containing only the odd digits from the input integer.","solution":"def extract_odd_digits(n): Returns an integer containing only the odd digits from the input integer. # Convert the input integer to a string str_n = str(n) # Initialize an empty string to store odd digits odd_digits = \\"\\" # Iterate through each character in the string for digit in str_n: # Check if the character is a digit if digit.isdigit(): # Convert the character to an integer digit_int = int(digit) # Check if the digit is odd if digit_int % 2 != 0: # Append the digit to the odd_digits string odd_digits += digit # Convert the final string of odd digits back to an integer # Return 0 if no odd digits were found return int(odd_digits) if odd_digits else 0"},{"question":"Create a function that takes two arguments: \`f1(x)\` and \`f2(x)\`, which represent two different mathematical functions. The function should return a new function that represents the composition of \`f1(x)\` and \`f2(x)\`, i.e., \`f1(f2(x))\`.","solution":"def compose(f1, f2): Returns the composition of the two functions f1 and f2. Parameters: f1 (function): The outer function f2 (function): The inner function Returns: function: A new function that represents f1(f2(x)) def composed_function(x): return f1(f2(x)) return composed_function"},{"question":"Create a function that takes a list of integers and returns a new list containing only the even numbers from the original list, but sorted in descending order. Ensure that the returned list does not have any duplicates.","solution":"def filter_and_sort_even_numbers(lst): Takes a list of integers and returns a new list containing only the even numbers, sorted in descending order, and without duplicates. unique_even_numbers = set(x for x in lst if x % 2 == 0) sorted_even_numbers = sorted(unique_even_numbers, reverse=True) return sorted_even_numbers"},{"question":"Create a function that checks if a number is prime. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Write the function and include a check function to verify its correctness with provided data points.","solution":"def is_prime(n): Returns True if the number is prime, otherwise False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True"},{"question":"Create a function that generates a list of prime numbers up to a given number. For instance, if the input is 10, the output should be [2, 3, 5, 7]. If the input is 15, the output should be [2, 3, 5, 7, 11, 13].","solution":"def generate_primes(n): Generates a list of prime numbers up to a given number n. Parameters: n (int): The upper limit for generating prime numbers. Returns: list: A list of prime numbers up to n. if n < 2: return [] primes = [] for num in range(2, n + 1): is_prime = True for i in range(2, int(num**0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Create a function that takes a list of dictionaries and returns a list of the values for a specified key.","solution":"def extract_values(dict_list, key): Extracts and returns a list of values for a specified key from a list of dictionaries. Parameters: dict_list (list): A list of dictionaries. key (str): The key whose values need to be extracted. Returns: list: A list of values corresponding to the specified key. return [d.get(key) for d in dict_list]"},{"question":"Create a function that finds the second highest number in a list. Replace the function's purpose comment with a new docstring explaining its functionality. Also, include an example in the docstring.","solution":"def second_highest(numbers): Returns the second highest number in a list. If the list has less than two unique numbers, return None. Example: >>> second_highest([1, 2, 3, 4]) 3 >>> second_highest([4, 1, 2, 2]) 2 >>> second_highest([5]) None >>> second_highest([]) None unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return None unique_numbers.sort(reverse=True) return unique_numbers[1]"},{"question":"Create a function that takes a list of integers as a parameter and returns the maximum subarray sum. A subarray is a contiguous part of the array. For example, given the list [-2, 1, -3, 4, -1, 2, 1, -5, 4], the function should return 6, as the maximum subarray sum is [4, -1, 2, 1], which sums to 6.","solution":"def max_subarray_sum(nums): Returns the maximum subarray sum for the given list of integers. Parameters: nums (list of int): The list of integers. Returns: int: The maximum subarray sum. if not nums: return 0 max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Create a function that returns the acronyms of a given string \`strInput\`. The function should return a list of acronyms, where an acronym is defined as a sequence of uppercase letters that are either preceded by a space or are at the beginning of the string.","solution":"import re def get_acronyms(strInput): Returns a list of acronyms from the given input string. An acronym is a sequence of uppercase letters that are either preceded by a space or are at the beginning of the string. return re.findall(r'b[A-Z]{2,}b', strInput)"},{"question":"Create a function that reverses a string without using in-built reverse functions. To provide an example, if the input is \\"Python\\", the output should be \\"nohtyP\\".","solution":"def reverse_string(s): Returns the reversed version of the input string s. reversed_s = \\"\\" for char in s: reversed_s = char + reversed_s return reversed_s"},{"question":"Create a function that takes a word and returns the same word with all characters shifted one to the right. The last character should move to the first position. For example, if the input is 'hello', the function should return 'o hell'. If the input is an empty string, the function should return an empty string. If the input is a single character, the function should return the same single character.","solution":"def shift_right(word): Shifts all characters in the word one position to the right. The last character becomes the first character. Parameters: word (str): The input word to be shifted Returns: str: The shifted word if len(word) <= 1: return word return word[-1] + word[:-1]"},{"question":"Create a function that takes a list of integers and returns the sum of all odd numbers greater than 5 in the list. If there are no such numbers, the function should return 0.","solution":"def sum_odd_numbers_greater_than_5(numbers): Returns the sum of all odd numbers greater than 5 in the list. If there are no such numbers, returns 0. Parameters: numbers (list of int): A list of integers Returns: int: Sum of all odd numbers greater than 5 return sum(num if num > 5 and num % 2 != 0 else 0 for num in numbers)"},{"question":"Create a function that accepts an array of integers and an integer. This function should modify the original array in place, replacing each element that is equal to the given integer with its negated value. If no element matches, the array should remain unchanged. For instance, if we call the function with the array [1, 2, -3, 4, -5, 2], and the integer 2, the function should modify the array to [-1, -2, -3, 4, -5, -2].","solution":"def negate_integers(arr, num): Modify the array in place, negating elements equal to the given number. :param arr: list of integers :param num: integer to be negated in the array for i in range(len(arr)): if arr[i] == num: arr[i] = -arr[i]"},{"question":"Create a function that takes two strings as arguments and returns a string that is the concatenation of the two strings. But, if the second string is \\"specialCase\\", the function should return the second string followed by the first string. If the second string is an empty string, the function should just return the first string.","solution":"def concatenate_strings(str1, str2): Returns the concatenation of str1 and str2. If str2 is \\"specialCase\\", returns str2 followed by str1. If str2 is an empty string, returns str1. if str2 == \\"specialCase\\": return str2 + str1 elif str2 == \\"\\": return str1 else: return str1 + str2"},{"question":"Create a function that generates a sequence of Fibonacci numbers based on a given length. The function should return the sequence as a list. The length of the sequence should be specified by the user. The length of the sequence must be a positive integer, and the sequence should start with the numbers 0 and 1.","solution":"def generate_fibonacci(n): Generates a Fibonacci sequence of length n. Parameters: n (int): The length of the Fibonacci sequence. Must be a positive integer. Returns: list: A list containing the Fibonacci sequence of length n. if n <= 0: raise ValueError(\\"The length of the sequence must be a positive integer.\\") fibonacci_sequence = [] a, b = 0, 1 for _ in range(n): fibonacci_sequence.append(a) a, b = b, a + b return fibonacci_sequence"},{"question":"Create a function that takes in an array of strings as input and pauses execution for a specified number of seconds for each string in the array. The function should pause the program for a specified duration of time for each element in the array. For example, if the input array is [\\"Hello\\", \\"World\\"] and the duration is 2 seconds, the function should pause the program for 2 seconds after printing \\"Hello\\" and then pause for 2 seconds after printing \\"World\\". How would you approach this?","solution":"import time def print_and_pause(array, duration): Pauses execution for a specified number of seconds for each string in the array. for item in array: print(item) time.sleep(duration)"},{"question":"Create a function that takes a list as an argument and returns the sum of the first and last elements of the list.","solution":"def sum_first_last(lst): Returns the sum of the first and last elements of the list. if not lst: return 0 # Assume sum is 0 if list is empty return lst[0] + lst[-1]"},{"question":"Create a function that takes a list of strings, where each string is associated with a student's name and their grades as a comma-separated string. The function should return a dictionary with student names as keys and their grades as values. Each grade should be converted to a float.","solution":"def parse_student_grades(student_list): Takes a list of strings where each string contains a student's name and their grades as a comma-separated value, and returns a dictionary with student names as keys and a list of their grades (converted to float) as values. :param student_list: List of strings, where each string is in the format \\"Name: grade1, grade2, ...\\" :return: Dictionary with student names as keys and lists of their grades as values. student_grades = {} for entry in student_list: name, grades_str = entry.split(\\": \\") grades = [float(grade) for grade in grades_str.split(\\", \\")] student_grades[name] = grades return student_grades"},{"question":"Create a function that implements stack operations in Python","solution":"class Stack: def __init__(self): self.items = [] def push(self, item): Push an item onto the stack. self.items.append(item) def pop(self): Pop the top item off the stack and return it. If the stack is empty, raise an IndexError. if self.is_empty(): raise IndexError(\\"pop from empty stack\\") return self.items.pop() def peek(self): Return the top item of the stack without removing it. If the stack is empty, raise an IndexError. if self.is_empty(): raise IndexError(\\"peek from empty stack\\") return self.items[-1] def is_empty(self): Return True if the stack is empty, False otherwise. return len(self.items) == 0 def size(self): Return the size of the stack. return len(self.items)"},{"question":"Create a function that takes two parameters: a list of strings and a target string. The function should return the index of the target string in the list, but if the target string is not found, it should return -1.","solution":"def find_string_index(lst, target): Returns the index of the target string in the list. If the target string is not found, returns -1. try: return lst.index(target) except ValueError: return -1"},{"question":"Create a function that takes no parameters and returns a string representing a 3x3 grid of asterisks '*'. The grid should be rendered as a single multi-line string with each row separated by a newline character ''.","solution":"def create_3x3_grid(): Returns a string representation of a 3x3 grid of asterisks '*'. return \\"* * *n* * *n* * *\\""},{"question":"Create a function that generates a sequence of Fibonacci numbers up to the n-th term in Python. The function should take an integer \`n\` as an argument and return a list containing the Fibonacci sequence up to the n-th term.","solution":"def fibonacci_sequence(n): Generates a sequence of Fibonacci numbers up to the n-th term. :param n: The number of terms to generate :return: A list containing the Fibonacci sequence up to the n-th term if n <= 0: return [] fib_sequence = [0, 1] while len(fib_sequence) < n: fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence[:n]"},{"question":"Create a function that takes an array of integers, and returns the product of all the elements. If the array is empty, the function should return null.","solution":"def product_of_array(arr): Returns the product of all the elements in the array. If the array is empty, returns None. if not arr: return None product = 1 for num in arr: product *= num return product"},{"question":"Create a function that calculates the volume of a sphere with a given radius. The volume of a sphere can be calculated using the formula V = (4/3) * π * r^3, where r is the radius of the sphere.","solution":"import math def sphere_volume(radius): Returns the volume of a sphere with a given radius. Parameters: radius (float): The radius of the sphere Returns: float: The volume of the sphere return (4 / 3) * math.pi * radius**3"},{"question":"Create a function that identifies the type of a triangle based on its side lengths and returns the type as a string. The function should accept three integers as arguments, each representing the length of a side of the triangle. The types of triangles are: Equilateral (all sides are equal), Isosceles (exactly two sides are equal), and Scalene (no sides are equal).","solution":"def triangle_type(a, b, c): Returns the type of triangle based on the lengths of its sides. Parameters: a (int): Length of side a b (int): Length of side b c (int): Length of side c Returns: str: The type of triangle (\\"Equilateral\\", \\"Isosceles\\", \\"Scalene\\"). if a == b == c: return \\"Equilateral\\" elif a == b or a == c or b == c: return \\"Isosceles\\" else: return \\"Scalene\\""},{"question":"Create a function that will generate a HTML drop-down list with given options. The function will accept three parameters: the \`id\` attribute of the <select> element, the \`name\` attribute of the <select> element, and a list of options to be displayed in the drop-down. The function should return a string containing the HTML code for the drop-down list.","solution":"def generate_dropdown(select_id, select_name, options_list): Returns a string containing HTML code for a drop-down list with the given options. :param select_id: The id attribute of the <select> element. :param select_name: The name attribute of the <select> element. :param options_list: A list of options to be displayed in the drop-down list. :return: A string containing the HTML code for the drop-down list. html = f'<select id=\\"{select_id}\\" name=\\"{select_name}\\">n' for option in options_list: html += f' <option value=\\"{option}\\">{option}</option>n' html += '</select>' return html"},{"question":"Create a function that takes two strings as input and returns True if they are anagrams of each other (i.e., they contain the same characters in a different order) using Python. Both strings will contain only lowercase letters.","solution":"def are_anagrams(str1, str2): Returns True if str1 and str2 are anagrams of each other, i.e., they contain the same characters in a different order. Parameters: str1 (str): The first string. str2 (str): The second string. Returns: bool: True if the strings are anagrams, False otherwise. return sorted(str1) == sorted(str2)"},{"question":"Create a function that calculates the factorial of a number using recursion and then use it to compute the factorial of 5!.","solution":"def factorial(n): Returns the factorial of a non-negative integer n using recursion. if n in (0, 1): return 1 else: return n * factorial(n - 1) # Calculate the factorial of 5 factorial_of_5 = factorial(5)"},{"question":"Create a function that calculates and returns the sum of the first \`n\` natural numbers. The function should use a simple loop to achieve this. The user should pass the value of \`n\` to the function. For example, if the user enters \`5\`, the function should return \`15\` (i.e., 1+2+3+4+5). The function should be efficient and use minimal resources. How can you implement this function?","solution":"def sum_of_natural_numbers(n): Returns the sum of the first n natural numbers. total = 0 for i in range(1, n + 1): total += i return total"},{"question":"Create a function that finds the maximum sum of a sub-array in a given array \`nums\`. The array \`nums\` can contain both positive and negative numbers. The function should handle edge cases and return the correct maximum sum. For example, for the input array [3, -2, 5, -1], the function should return 8 (sub-array from 3 to 5 is [3, -2, 5]). Provide the function signature and a general approach to solve it using Kadane’s Algorithm.","solution":"def max_subarray_sum(nums): Finds the maximum sum of a sub-array in the given array nums. Uses Kadane's Algorithm to solve the problem. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that calculates the nth fibonacci number using recursion. The function should take an integer \`n\` as input and return the nth fibonacci number. Assume that \`n\` is a non-negative integer.","solution":"def fibonacci(n): Returns the nth fibonacci number using recursion. if n <= 0: return 0 elif n == 1: return 1 else: return fibonacci(n - 1) + fibonacci(n - 2)"},{"question":"Create a function that takes an array and returns a tuple containing the maximum and minimum number in the array. The function should work with arrays of any length.","solution":"def find_max_min(arr): Returns a tuple containing the maximum and minimum number in the array. if not arr: raise ValueError(\\"Array should not be empty\\") max_val = max(arr) min_val = min(arr) return (max_val, min_val)"},{"question":"Create a function that truncates a string to a specified maximum length n. If the string is longer than n, it should be truncated to n characters. If it's less than n, it should remain unchanged. The function should handle both text with and without trailing spaces.","solution":"def truncate_string(s, n): Truncate the string s to a maximum length n. If the string is longer than n, it will be truncated to n characters. If it's shorter than n, it remains unchanged. Parameters: s (str): Input string. n (int): Maximum length of the resulting string. Returns: str: Truncated string. return s[:n]"},{"question":"Create a function that takes in a list of tuples, where each tuple contains three integers. The function should return the sum of the integers in the tuple that appears the most frequently in the list. If there are multiple tuples that appear the most frequently, return the sum of the integers in the tuple with the smallest sum.","solution":"from collections import Counter def most_common_tuple_sum(tuples_list): Given a list of tuples, each containing three integers, return the sum of the integers in the tuple that appears most frequently. If there are multiple tuples with the same maximum frequency, return the sum of integers in the tuple with the smallest sum. if not tuples_list: return 0 # Count the frequency of each tuple counter = Counter(tuples_list) # Find the maximum frequency max_frequency = max(counter.values()) # Find the tuple(s) with the maximum frequency max_frequency_tuples = [t for t, freq in counter.items() if freq == max_frequency] # Sort the tuples by sum of their elements and get the minimum sum min_sum_tuple = min(max_frequency_tuples, key=lambda t: sum(t)) # Return the sum of the elements in that tuple return sum(min_sum_tuple)"},{"question":"Create a function that returns 'hello' without using any string or array methods (like \`split()\`, \`join()\`, \`substring()\`, etc.) and without using literal strings (i.e., you cannot write \`'hello'\` directly in the code). Also, the function should not use any conditional statements (if, else).","solution":"def hello(): Returns the string 'hello' without using string literals or array methods return chr(104) + chr(101) + chr(108) + chr(108) + chr(111)"},{"question":"Create a function that accepts an integer \`n\` and returns a string representation of the symmetric triangle of the number \`n\`. The symmetric triangle is constructed by mirroring the pattern of the triangle made up of asterisks (*) with base \`2n-1\`.","solution":"def symmetric_triangle(n): Returns a string representation of the symmetric triangle of the number \`n\`. The triangle is made up of asterisks (*) and has a base of \`2n-1\`. result = [] for i in range(n): stars = '*' * (2*i + 1) result.append(stars.center(2*n - 1)) return 'n'.join(result)"},{"question":"Create a function that takes two integers \`a\` and \`b\` as input and returns the sum of all integers from \`a\` to \`b\` (inclusive). Additionally, the function should handle cases where \`a\` is greater than \`b\` by swapping the values and recalculating the sum accordingly.","solution":"def sum_in_range(a, b): Returns the sum of all integers from a to b (inclusive). Handles cases where a is greater than b by swapping the values. if a > b: a, b = b, a return sum(range(a, b + 1))"},{"question":"Create a function that checks if a given list of integers is sorted in ascending order. If the list is sorted, return \`True\`; otherwise, return \`False\`. The function should also handle any exceptions that might occur when converting strings to integers.","solution":"def is_sorted_ascending(lst): Checks if the given list of integers is sorted in ascending order. Parameters: lst (list): A list of integers or potentially invalid elements. Returns: bool: True if the list is sorted in ascending order, False otherwise. try: # Ensure all elements are integers int_lst = [int(i) for i in lst] except ValueError: return False # Check if the list is sorted return int_lst == sorted(int_lst)"},{"question":"Create a function that will take a string and return a modified string with vowels replaced by their corresponding ASCII decimal values. Let's say 'A' or 'a' should be replaced by 65, 'E' or 'e' by 69, and so on. 'I', 'i' should be replaced by 73, and 'O', 'o' should be replaced by 79, while 'U', 'u' should be replaced by 85.","solution":"def replace_vowels_with_ascii(s): Replaces vowels in the input string with their corresponding ASCII decimal values. Parameters: s (str): The input string. Returns: str: The modified string with vowels replaced by their ASCII values. vowels_to_ascii = { 'A': '65', 'a': '65', 'E': '69', 'e': '69', 'I': '73', 'i': '73', 'O': '79', 'o': '79', 'U': '85', 'u': '85' } result = [] for char in s: if char in vowels_to_ascii: result.append(vowels_to_ascii[char]) else: result.append(char) return ''.join(result)"},{"question":"Create a function that takes a list of integers as an argument and returns the sum of all numbers in the list. How can I achieve this in Python?","solution":"def sum_of_list(numbers): Returns the sum of all numbers in the list. :param numbers: List of integers :return: Integer sum of the list elements return sum(numbers)"},{"question":"Create a function that takes a string and returns a new string containing only the vowels from the original string. For example, if the input string is \\"Visual Studio Code\\", the function should return \\"uiioo\\".","solution":"def extract_vowels(input_string): Extracts and returns vowels from the input string. Parameters: input_string (str): The string from which vowels are to be extracted. Returns: str: A string containing only the vowels from the input string. vowels = \\"aeiouAEIOU\\" return ''.join([char for char in input_string if char in vowels])"},{"question":"Create a function that takes in a list of numbers and returns the sum of all the numbers in the list. Make sure your function includes error handling for invalid inputs.","solution":"def sum_of_numbers(numbers): Returns the sum of all numbers in the list. If the input is not a list or contains non-numeric elements, raises a ValueError. if not isinstance(numbers, list): raise ValueError(\\"Input must be a list.\\") if not all(isinstance(x, (int, float)) for x in numbers): raise ValueError(\\"All elements in the list must be numeric.\\") return sum(numbers)"},{"question":"Create a function that capitalizes the first letter of a given string.","solution":"def capitalize_first_letter(s): Capitalizes the first letter of the given string. if s: return s[0].upper() + s[1:] return s"},{"question":"Create a function that takes a number and returns its absolute value. How can I handle this using Python?","solution":"def absolute_value(num): Returns the absolute value of the given number. return abs(num)"},{"question":"Create a function that takes a list of integers as input and returns a new list with all the duplicates removed while maintaining the original order of the non-duplicate elements. For example, given the list \`[1, 2, 3, 2, 4, 3, 5]\`, the function should return \`[1, 4, 5]\`.","solution":"def remove_duplicates(lst): Removes all duplicates from the list lst, while maintaining the original order of the non-duplicate elements. seen = set() result = [] duplicates = set(x for x in lst if lst.count(x) > 1) for item in lst: if item not in duplicates and item not in seen: result.append(item) seen.add(item) return result"},{"question":"Create a function that takes a set of numbers as input and returns the sum of all the numbers in the set.","solution":"def sum_of_set(numbers): Returns the sum of all the numbers in the set. return sum(numbers)"},{"question":"Create a function that takes an integer as input and returns whether it is a perfect square.","solution":"def is_perfect_square(n): Returns True if n is a perfect square, otherwise False. if n < 0: return False root = int(n ** 0.5) return root * root == n"},{"question":"Create a function that accepts a variable number of integer arguments and returns the sum of those arguments. The function should be able to handle any number of arguments.","solution":"def sum_of_integers(*args): Returns the sum of the given integer arguments. Parameters: *args: Variable number of integer arguments Returns: int: Sum of the given integer arguments return sum(args)"},{"question":"Create a function that generates all possible permutations of a given string. The function should handle both lowercase and uppercase letters, as well as special characters. The function should also handle empty strings and strings of length 1.","solution":"from itertools import permutations def generate_permutations(s): Generate all possible permutations of the input string \`s\`. :param s: The input string to generate permutations for. :return: A list of all possible permutations of the input string. if not s: return [] return [''.join(p) for p in permutations(s)]"},{"question":"Create a function that accepts a string as input and converts it into a list of words. The function should split the string at each space character and return the resulting list of words.","solution":"def string_to_words(s): Splits the input string into a list of words by spaces. Args: s (str): The string to be split. Returns: List[str]: A list of words. return s.split()"},{"question":"Create a function that calculates the sum and the product of all elements in an array. The function should return both the sum and the product of the array elements as a tuple.","solution":"def sum_and_product(arr): Returns the sum and the product of all elements in the array \`arr\`. Parameters: arr (list of numbers): A list of numbers. Returns: tuple: A tuple containing the sum and the product of the array elements. total_sum = sum(arr) total_product = 1 for num in arr: total_product *= num return total_sum, total_product"},{"question":"Create a function that takes an array of integers as input, and returns a new array where each element is another array containing a pair of elements: one from the original array, and its index in the original array.","solution":"def pair_elements_with_indices(arr): Returns an array where each element is a pair: an element from the original array and its index. return [[elem, idx] for idx, elem in enumerate(arr)]"},{"question":"Create a function that calculates the sum of squares of a list of numbers using recursion in Python.","solution":"def sum_of_squares(nums): Returns the sum of the squares of a list of numbers using recursion. if not nums: return 0 return nums[0] ** 2 + sum_of_squares(nums[1:])"},{"question":"Create a function that generates the shortest palindrome that can be created by appending characters to the end of a given string. The function should take one parameter: a string \`text\`. It should return the shortest palindrome that can be formed by appending characters to the end of \`text\`.","solution":"def shortest_palindrome(text): Returns the shortest palindrome that can be created by appending characters to the end of the given text. if text == text[::-1]: return text for i in range(len(text)): if text[i:] == text[i:][::-1]: return text + text[:i][::-1]"},{"question":"Create a function that takes in a list of integers and returns a boolean value. The function should return \`True\` if there are no two integers in the list that are divisible by the same integer greater than 1 (i.e., they are coprime), and \`False\` otherwise. Make sure to handle exceptions and ensure the list contains at least two integers.","solution":"import math def are_coprime(lst): Returns True if no two integers in the list are divisible by the same integer greater than 1, and False otherwise. if len(lst) < 2: raise ValueError(\\"The list must contain at least two integers.\\") for i in range(len(lst)): for j in range(i + 1, len(lst)): if math.gcd(lst[i], lst[j]) > 1: return False return True"},{"question":"Create a function that takes an array of integers and transforms it into a nested list where each integer is wrapped inside a list.","solution":"def wrap_integers(arr): Transforms an array of integers into a nested list where each integer is wrapped inside a list. Parameters: arr (list of int): A list of integers. Returns: list of list of int: A nested list where each integer from the input list is wrapped inside a list. return [[x] for x in arr]"},{"question":"Create a function that takes as a parameter a list of integers. The function should return the second smallest number in the list. If the list has less than two elements, the function should return \`None\`.","solution":"def second_smallest(numbers): Returns the second smallest number in the list. If the list has less than two elements, returns None. if len(numbers) < 2: return None unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return None unique_numbers.sort() return unique_numbers[1]"},{"question":"Create a function that takes two arrays as parameters and returns the intersection of these two arrays. The function should also remove any duplicates from the resulting intersection.","solution":"def intersection(arr1, arr2): Returns the intersection of two arrays without duplicates. # Convert both arrays to sets to remove duplicates and to perform the intersection set1 = set(arr1) set2 = set(arr2) # Perform intersection intersection_set = set1 & set2 # Convert the set back to a list and return return list(intersection_set)"},{"question":"Create a function that takes two integers as pointers and swaps their values. What is the C function prototype to achieve this?","solution":"def swap(a, b): Swaps the values of a and b directly. return b, a"},{"question":"Create a function that takes a list of integers and returns True if the list contains a sequence of consecutive numbers, False otherwise. For example, [1, 2, 3, 4] is a consecutive sequence, but [1, 3, 5] is not.","solution":"def has_consecutive_sequence(lst): Returns True if the list contains a sequence of consecutive numbers, False otherwise. if not lst: return False sorted_lst = sorted(lst) for i in range(1, len(sorted_lst)): if sorted_lst[i] != sorted_lst[i - 1] + 1: return False return True"},{"question":"Create a function that converts a decimal number to a binary string. The function should accept a single parameter: the decimal number. The function should return the binary string representation of the decimal number. If the decimal number is 0, the function should return \\"0\\". For example, if the input is 255, the output should be \\"11111111\\". To ensure the solution works as expected, write a check function that tests the binary conversion function with various inputs, including edge cases like 0, 1, and large numbers.","solution":"def decimal_to_binary(decimal_number): Converts a decimal number to a binary string. Parameters: decimal_number (int): The decimal number to convert to binary. Returns: str: The binary string representation of the decimal number. if decimal_number == 0: return \\"0\\" return bin(decimal_number)[2:]"},{"question":"Create a function that takes in an array of integers and returns the frequency of the most frequent integer in the array. If there are multiple integers with the same highest frequency, return the highest value among them. If the array is empty, return -1.","solution":"from collections import Counter def most_frequent_frequency(arr): Returns the frequency of the most frequent integer in the array. If there are multiple integers with the same highest frequency, return the frequency of the highest value among them. If the array is empty, return -1. if not arr: return -1 count = Counter(arr) max_frequency = max(count.values()) most_frequent_values = [key for key, value in count.items() if value == max_frequency] return count[max(most_frequent_values)]"},{"question":"Create a function that checks if a matrix is symmetric.","solution":"def is_symmetric(matrix): Check if the given matrix is symmetric. Args: matrix (list of list of int): 2D list of integers representing the matrix. Returns: bool: True if the matrix is symmetric, False otherwise. n = len(matrix) # Check for square matrix for row in matrix: if len(row) != n: return False # Check symmetry for i in range(n): for j in range(n): if matrix[i][j] != matrix[j][i]: return False return True"},{"question":"Create a function that takes an integer as input and returns a list containing its hexadecimal representation as a string and its binary representation as a string. By default, the decimal number should be an 8-bit integer.","solution":"def int_to_repr(value, bits=8): Converts an integer into its hexadecimal and binary representation as strings assuming an 8-bit (default) integer format. Parameters: - value (int): The integer to convert. - bits (int): The bit size of the integer. Defaults to 8 bits. Returns: - list: A list containing the hexadecimal representation and the binary representation as strings. if bits <= 0: raise ValueError(\\"Bits must be a positive integer\\") hex_repr = hex(((1 << bits) + value) % (1 << bits))[2:].zfill(bits // 4) bin_repr = bin(((1 << bits) + value) % (1 << bits))[2:].zfill(bits) return [hex_repr, bin_repr]"},{"question":"Create a function that takes a URL as input and returns the HTML content of that URL.","solution":"import requests def get_html_content(url): Takes a URL as input and returns the HTML content of that URL. response = requests.get(url) # Check if the request was successful if response.status_code == 200: return response.text else: raise Exception(f\\"Failed to retrieve content from {url}, Status code: {response.status_code}\\")"},{"question":"Create a function that takes an integer array with unique elements.","solution":"def sum_unique_elements(arr): Returns the sum of all unique elements in the array. Parameters: arr (list of int): A list of unique integers Returns: int: The sum of the unique elements return sum(arr)"},{"question":"Create a function that takes a list of strings and returns the longest string in the list. If multiple strings have the same maximum length, return all of them in a list sorted alphabetically. If the list is empty, return an empty list.","solution":"def find_longest_strings(strings): Returns the longest strings in the list. If multiple strings have the same maximum length, return all of them in a list sorted alphabetically. If the list is empty, return an empty list. if not strings: return [] max_length = max(len(string) for string in strings) longest_strings = [string for string in strings if len(string) == max_length] return sorted(longest_strings)"},{"question":"Create a function that returns the common elements in two lists that are sorted in ascending order. The function should also remove any duplicates from the resulting list.","solution":"def common_elements(list1, list2): Returns the common elements in two sorted input lists, removing any duplicates. The result list is also sorted in ascending order. i, j = 0, 0 result = [] # Iterate through both lists while i < len(list1) and j < len(list2): if list1[i] < list2[j]: i += 1 elif list1[i] > list2[j]: j += 1 else: # Only add the element if it's not already in the result if not result or result[-1] != list1[i]: result.append(list1[i]) i += 1 j += 1 return result"},{"question":"Create a function that takes two integers as an argument and returns the greatest common divisor (GCD) of the two numbers using the Euclidean algorithm. The function should be efficient and handle large numbers.","solution":"def gcd(a, b): Returns the greatest common divisor (GCD) of two integers using the Euclidean algorithm. while b != 0: a, b = b, a % b return abs(a)"},{"question":"Create a function that takes one parameter. The parameter is a floating point number. You have to return the same floating point number rounded up to the nearest integer.","solution":"import math def round_up_to_nearest_integer(num): Returns the provided floating point number rounded up to the nearest integer. return math.ceil(num)"},{"question":"Create a function that receives two arguments, both of which are lists of integers. The function should return a list containing the result of multiplying each corresponding pair of integers from the two input lists. If the lists are of unequal lengths, the function should return a list containing only the results of the multiplication for the pairs whose counterparts exist in the both lists.","solution":"def multiply_lists(list1, list2): This function receives two lists of integers and returns a list containing the result of multiplying each corresponding pair of integers from the two input lists. If the lists are of unequal lengths, the function only processes pairs that exist in both lists. result = [a * b for a, b in zip(list1, list2)] return result"},{"question":"Create a function that reverses the characters in the words of a given sentence. This function should work for sentences containing a mix of lowercase, uppercase, and special characters.","solution":"def reverse_words_characters(sentence): Returns a sentence with each word's characters reversed. :param sentence: str - The input sentence to process :return: str - The sentence with each word's characters reversed words = sentence.split() reversed_words = [word[::-1] for word in words] return ' '.join(reversed_words)"},{"question":"Create a function that takes an array of integers and returns the majority element if it exists, otherwise returns -1. The majority element is defined as an element that appears more than ⌊n / 2⌋ times in the array where n is the number of elements in the array.","solution":"def majority_element(arr): Returns the majority element in the array if it exists, otherwise returns -1. The majority element is an element that appears more than ⌊n / 2⌋ times. count_dict = {} n = len(arr) for num in arr: if num in count_dict: count_dict[num] += 1 else: count_dict[num] = 1 for num, count in count_dict.items(): if count > n // 2: return num return -1"},{"question":"Create a function that takes in three parameters: a list of words, a target word, and a maximum number of substitutions allowed. The function should return a list of boolean values indicating whether each word in the list can be transformed into the target word by substituting at most the maximum number of allowed substitutions. Each substitution can replace any single character in the word with any other character.","solution":"def can_transform(words, target_word, max_substitutions): Determine if each word in the list can be transformed into the target word by substituting at most the given number of characters. :param words: list of words to be checked :param target_word: the word to transform into :param max_substitutions: maximum number of substitutions allowed :return: list of boolean values indicating whether each word can be transformed def is_transformable(word, target, max_sub): if len(word) != len(target): return False substitution_count = sum(1 for w, t in zip(word, target) if w != t) return substitution_count <= max_sub return [is_transformable(word, target_word, max_substitutions) for word in words]"},{"question":"Create a function that searches for all occurrences of a given integer in a two-dimensional list (matrix) and returns their positions as tuples of (rowindex, columnindex). Additionally, the function should return the count of occurrences of the given integer.","solution":"def find_occurrences(matrix, target): Searches for all occurrences of the target in a two-dimensional list (matrix) and returns their positions as tuples (rowindex, columnindex), along with the count of occurrences of the target. Parameters: matrix (list of list of int): The input 2D list (matrix). target (int): The integer to search for in the matrix. Returns: tuple: A list of positions (rowindex, columnindex) and the count of occurrences. positions = [] count = 0 for row_index, row in enumerate(matrix): for col_index, element in enumerate(row): if element == target: positions.append((row_index, col_index)) count += 1 return positions, count"},{"question":"Create a function that takes a 2D list (list of lists) and transposes it, i.e., convert rows to columns and columns to rows.","solution":"def transpose(matrix): Transposes a given 2D list (matrix). :param matrix: List of lists, where each inner list represents a row in the matrix. :return: Transposed matrix, where the rows are converted to columns and columns to rows. if not matrix: return [] # Use zip to pair elements at the same index from each row, then convert to list return [list(row) for row in zip(*matrix)]"},{"question":"Create a function that takes a list containing both integers and strings, and returns a new list where all the integers are sorted in ascending order and placed at the beginning of the list, followed by all the strings sorted in lexicographic (alphabetical) order and placed at the end of the list.","solution":"def sort_integers_and_strings(input_list): This function takes a list containing both integers and strings, sorts the integers in ascending order, sorts the strings in lexicographic order, and returns a new list where integers are placed at the beginning followed by strings. :param input_list: List of integers and strings :return: New sorted list with integers first and then strings integers = sorted([x for x in input_list if isinstance(x, int)]) strings = sorted([x for x in input_list if isinstance(x, str)]) return integers + strings"},{"question":"Create a function that takes a list of numbers and multiplies them all together. What should the function name and parameters be, and how can the function be implemented in Python?","solution":"def multiply(numbers): Multiplies all the numbers in the list together. Parameters: numbers (list of int/float): The list of numbers to multiply. Returns: int/float: The result of multiplying all the numbers together. result = 1 for num in numbers: result *= num return result"},{"question":"Create a function that takes in parameters such as length, breadth, and height for a rectangular prism and returns the volume of the prism.","solution":"def volume_of_prism(length, breadth, height): Returns the volume of a rectangular prism given its length, breadth, and height. return length * breadth * height"},{"question":"Create a function that returns the difference between the sum of odd numbers and the sum of even numbers in a provided list of integers.","solution":"def odd_even_difference(numbers): Returns the difference between the sum of odd numbers and the sum of even numbers in a list. sum_odd = sum(n for n in numbers if n % 2 != 0) sum_even = sum(n for n in numbers if n % 2 == 0) return sum_odd - sum_even"},{"question":"Create a function that takes a string consisting of words separated by spaces. The function should return a string where every word's first letter is capitalized.","solution":"def capitalize_words(s): Returns a string with the first letter of every word capitalized. return ' '.join(word.capitalize() for word in s.split())"},{"question":"Create a function that takes two integers, calculates the sum, product, and difference of the two numbers. The function should return these values in a tuple. If either of the integers is less than zero, the function should instead return a tuple containing -1 as the sum, product, and difference. If the second integer is zero, the function should return a tuple containing -2 as the sum, product, and a tuple with the first integer as an element and None as the other. For example, \`calc_values(3, 5)\` should return \`(8, 15, -2)\`, and \`calc_values(-1, 5)\` should return \`(-1, -1, -1)\`.","solution":"def calc_values(a, b): Returns a tuple containing the sum, product, and difference of a and b. If either a or b is less than zero, returns (-1, -1, -1). If b is zero, returns (-2, -2, (a, None)). if a < 0 or b < 0: return (-1, -1, -1) if b == 0: return (-2, -2, (a, None)) return (a + b, a * b, a - b)"},{"question":"Create a function that checks whether a given word is a palindrome, ignoring spaces and punctuation.","solution":"def is_palindrome(word): Checks whether a given word is a palindrome, ignoring spaces and punctuation. # Removing spaces and punctuation, and converting to lowercase cleaned_word = ''.join(char.lower() for char in word if char.isalnum()) # Checking if cleaned_word is the same as its reverse return cleaned_word == cleaned_word[::-1]"},{"question":"Create a function that takes in a list of numbers and returns the second largest number in the list. What are the possible solutions and their steps?","solution":"def second_largest(numbers): Returns the second largest unique number in the list. If there are fewer than two unique numbers, return None. if len(numbers) < 2: return None first = second = float('-inf') for num in numbers: if num > first: first, second = num, first elif first > num > second: second = num return second if second != float('-inf') else None"},{"question":"Create a function that checks if a string is a palindrome. A palindrome is a word, phrase, number, or other sequences of characters which reads the same backward as forward. Examples of palindromes include \\"madam\\", \\"racecar\\", and \\"noon\\".","solution":"def is_palindrome(s): Checks if the input string s is a palindrome. Args: s (str): The input string to check. Returns: bool: True if s is a palindrome, False otherwise. cleaned = ''.join(c.lower() for c in s if c.isalnum()) return cleaned == cleaned[::-1]"},{"question":"Create a function that checks whether a given integer is a valid chessboard square (i.e., it falls between 1 and 64 inclusive).","solution":"def is_valid_chessboard_square(n): Checks whether a given integer n is a valid chessboard square. A valid chessboard square is an integer between 1 and 64 inclusive. return 1 <= n <= 64"},{"question":"Create a function that takes a list of integers and prints each number in reverse order. Ensure that the function is well-documented with comments and handles any possible errors, such as non-integer values in the list.","solution":"def print_reversed_numbers(lst): Takes a list of integers and prints each number in reverse order. Args: lst (list): A list containing integers. Raises: ValueError: If the list contains non-integer values. if not all(isinstance(x, int) for x in lst): raise ValueError(\\"All elements in the list must be integers.\\") for num in lst: print(str(num)[::-1])"},{"question":"Create a function that takes two positive integers, and returns their Least Common Multiple (LCM). The function should handle large integers effectively.","solution":"def gcd(a, b): Helper function to compute the Greatest Common Divisor (GCD) of two numbers. while b: a, b = b, a % b return a def lcm(a, b): Returns the Least Common Multiple (LCM) of a and b. if a == 0 or b == 0: return 0 return abs(a * b) // gcd(a, b)"},{"question":"Create a function that takes a list of integers and returns a new list containing only the unique integers from the original list, in the same order they appeared.","solution":"def unique_integers(int_list): Returns a new list containing only the unique integers from the original list, in the same order they appeared. seen = set() unique_list = [] for num in int_list: if num not in seen: seen.add(num) unique_list.append(num) return unique_list"},{"question":"Create a function that takes a list of integers and returns a list of -1s. The function should be named \\"list_of_negatives\\" and should accept a parameter \\"num_list\\" which is the list of integers.","solution":"def list_of_negatives(num_list): Takes a list of integers and returns a list of -1s of the same length. Parameters: num_list (list): A list of integers. Returns: list: A list of -1s of the same length as num_list. return [-1] * len(num_list)"},{"question":"Create a function that converts a string into a list of its characters, but only includes characters that appear at least twice in the string. Duplicate characters should not be added more than once to the list.","solution":"def characters_appearing_twice(string): Returns a list of characters that appear at least twice in the given string. Each character will only appear once in the result list, irrespective of the times it appears in the input string. :param string: The input string to check for duplicate characters. :return: A list of unique characters that appear at least twice in the string. from collections import Counter counter = Counter(string) return [char for char, count in counter.items() if count >= 2]"},{"question":"Create a function that returns the smallest number that is evenly divisible by all numbers from 1 to 20.","solution":"import math def lcm(a, b): Returns the least common multiple of a and b. return abs(a*b) // math.gcd(a, b) def smallest_multiple(n): Returns the smallest positive number that is evenly divisible by all numbers from 1 to n. result = 1 for i in range(1, n+1): result = lcm(result, i) return result # The function to get the smallest number that is evenly divisible by all numbers from 1 to 20 def smallest_multiple_1_to_20(): return smallest_multiple(20)"},{"question":"Create a function that calculates the factorial of a number using a Stack data structure in Python.","solution":"def factorial_with_stack(n): Calculates the factorial of a number using a stack data structure. :param n: The number to calculate the factorial of. :return: The factorial of the number n. if n == 0: return 1 stack = [] result = 1 # Push numbers onto the stack for i in range(1, n+1): stack.append(i) # Pop numbers from the stack and multiply to get the factorial while stack: result *= stack.pop() return result"},{"question":"Create a function that reverses a string in Python. You should also handle cases where the input might not be a string, and provide an appropriate error message in such cases.","solution":"def reverse_string(s): Reverses the given string. If the input is not a string, an appropriate error message is returned. if not isinstance(s, str): return \\"Input must be a string\\" return s[::-1]"},{"question":"Create a function that takes in three parameters: an array of integers, the length of the array, and a target sum. The function should return True if there is a subset of the array that adds up to the target sum, False otherwise.","solution":"def is_subset_sum(arr, n, target_sum): Returns True if there is a subset of the array arr of length n that adds up to target_sum. # Initialize a 2D list dp where dp[i][j] will be True if there is # a subset of arr[0..i-1] with sum equal to j dp = [[False for _ in range(target_sum + 1)] for _ in range(n + 1)] # If sum is 0, then answer is True for i in range(n + 1): dp[i][0] = True # Fill the subset table in a bottom up manner for i in range(1, n + 1): for j in range(1, target_sum + 1): if j < arr[i - 1]: dp[i][j] = dp[i - 1][j] else: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]] return dp[n][target_sum]"},{"question":"Create a function that returns \\"Fizz\\" or \\"Buzz\\" based on the value passed. If the number is divisible by 3, it should return \\"Fizz\\". If the number is divisible by 5, it should return \\"Buzz\\". If the number is divisible by both 3 and 5, it should return \\"FizzBuzz\\". If the number is not divisible by either, it should return the number as it is.","solution":"def fizz_buzz(n): Returns 'Fizz' if the number is divisible by 3, 'Buzz' if the number is divisible by 5, 'FizzBuzz' if the number is divisible by both 3 and 5, otherwise returns the number itself. if n % 3 == 0 and n % 5 == 0: return \\"FizzBuzz\\" elif n % 3 == 0: return \\"Fizz\\" elif n % 5 == 0: return \\"Buzz\\" else: return n"},{"question":"Create a function that calculates the sum of even numbers in a list. Write the function in Python.","solution":"def sum_of_even_numbers(numbers): Returns the sum of even numbers in the given list. :param numbers: List of integers :return: Sum of even integers in the list return sum(num for num in numbers if num % 2 == 0)"},{"question":"Create a function that takes two parameters. The first parameter is a list of integers and the second parameter is an integer. The function returns True if the second parameter is present in the first parameter and False otherwise.","solution":"def contains(numbers, target): Checks if target integer is present in the numbers list. Parameters: numbers (list): A list of integers. target (int): The integer to find in the list. Returns: bool: True if target is found in list, False otherwise. return target in numbers"},{"question":"Create a function that checks if the number is divisible by 3, 5, or 7. If it is, return \\"divisible\\". Otherwise, return \\"not divisible\\".","solution":"def check_divisibility(num): Checks if the number is divisible by 3, 5, or 7. Returns 'divisible' if true, otherwise 'not divisible'. if num % 3 == 0 or num % 5 == 0 or num % 7 == 0: return \\"divisible\\" else: return \\"not divisible\\""},{"question":"Create a function that takes two vectors of integers as input and returns true if the vector A is a subset of vector B, otherwise it returns false. A vector A is considered a subset of vector B if all elements of A exist in B, with possible repetitions.","solution":"def is_subset(vector_a, vector_b): Returns True if vector_a is a subset of vector_b, otherwise False. vector_b_dict = {} for item in vector_b: if item in vector_b_dict: vector_b_dict[item] += 1 else: vector_b_dict[item] = 1 for item in vector_a: if item in vector_b_dict and vector_b_dict[item] > 0: vector_b_dict[item] -= 1 else: return False return True"},{"question":"Create a function that can take a string as input and return the frequency of each character in the string. The function should ignore case and consider only alphabetic characters.","solution":"def character_frequency(s): Returns a dictionary with the frequency of each alphabetic character in the input string, ignoring case. s = s.lower() frequency = {} for char in s: if char.isalpha(): if char not in frequency: frequency[char] = 1 else: frequency[char] += 1 return frequency"},{"question":"Create a function that checks if a given word is a palindrome. A palindrome is a word that appears the same backward as forward. The function should consider ignores cases and spaces.","solution":"def is_palindrome(word): Checks if a given word is a palindrome. This function ignores case and spaces. cleaned_word = ''.join(e for e in word if e.isalnum()).lower() return cleaned_word == cleaned_word[::-1]"},{"question":"Create a function that returns the current date and time.","solution":"from datetime import datetime def get_current_datetime(): Returns the current date and time. return datetime.now()"},{"question":"Create a function that takes an array of integers and returns the minimum and maximum values in an object. The results should be rounded to two decimal places.","solution":"def find_min_max(arr): Takes an array of integers and returns an object with the minimum and maximum values rounded to two decimal places. if not arr: return {\\"min\\": None, \\"max\\": None} min_val = round(min(arr), 2) max_val = round(max(arr), 2) return {\\"min\\": min_val, \\"max\\": max_val}"},{"question":"Create a function that takes a dictionary with keys as class names and values as lists of student names. The function should return a new dictionary where the keys are the class names and the values are lists of student names sorted in alphabetical order. If a class has no students, the key should still be present with an empty list as its value.","solution":"def sort_students_by_class(class_students): Takes a dictionary with class names as keys and lists of student names as values, and returns a new dictionary with the class names as keys and the list of students sorted alphabetically. :param class_students: dict, keys are class names and values are lists of student names :return: dict, keys are class names and values are sorted lists of student names sorted_class_students = {class_name: sorted(students) for class_name, students in class_students.items()} return sorted_class_students"},{"question":"Create a function that takes an integer \`n\` as input and returns a list containing the square of each number from 1 to \`n\`.","solution":"def generate_squares(n): Returns a list containing the square of each number from 1 to n. Parameters: n (int): The upper limit of numbers to be squared. Returns: list: A list of squares of numbers from 1 to n. return [i**2 for i in range(1, n+1)]"},{"question":"Create a function that takes a string as input and returns the reverse of the string. If the input string is empty or contains only whitespace, the function should return an empty string. If the input contains any non-alphabetical characters, the function should ignore them and only reverse the alphabetical characters.","solution":"def reverse_string(s: str) -> str: Returns the reverse of the input string s, ignoring non-alphabetical characters. If the input string is empty or contains only whitespace, it returns an empty string. if not s.strip(): return \\"\\" alphabets = [char for char in s if char.isalpha()] reversed_alphabets = reversed(alphabets) return ''.join(reversed_alphabets)"},{"question":"Create a function that can go through the rows and columns of two numpy arrays and add them together with the same principles as vector addition. Using broadcasting if necessary.","solution":"import numpy as np def add_arrays(arr1, arr2): Adds two numpy arrays element-wise using broadcasting if necessary. Parameters: arr1 (numpy.array): First input array. arr2 (numpy.array): Second input array. Returns: numpy.array: Element-wise sum of arr1 and arr2. return np.add(arr1, arr2)"},{"question":"Create a function that takes a string as a parameter and returns the number of vowels in the string. The function should consider 'a', 'e', 'i', 'o', 'u', and sometimes 'y' as vowels depending on the context. For this problem, treat 'y' as a vowel always. How can I implement this function in Python?","solution":"def count_vowels(s): Returns the number of vowels in the string s. Treats 'a', 'e', 'i', 'o', 'u', and 'y' as vowels. vowels = \\"aeiouy\\" return sum(1 for char in s.lower() if char in vowels)"},{"question":"Create a function that prints the odd numbers in a given range.","solution":"def print_odd_numbers(start, end): Prints the odd numbers in the given range [start, end]. for num in range(start, end + 1): if num % 2 != 0: print(num)"},{"question":"Create a function that takes a string and a target substring. The function should return a list of tuples, each containing the start and end indices of the target substring in the original string. If the target substring is not found, the function should return an empty list.","solution":"def find_substring_indices(string, target): Returns a list of tuples, each containing the start and end indices of the target substring in the original string. Params: string (str): The original string to search within. target (str): The target substring to find within the string. Returns: list of tuples: A list of (start, end) indices of the target substring in the original string. Returns an empty list if the target substring is not found. if not target: return [] result = [] len_target = len(target) index = string.find(target) while index != -1: result.append((index, index + len_target)) index = string.find(target, index + 1) return result"},{"question":"Create a function that can convert any given date string into a timestamp. The function should handle various date formats including but not limited to \\"YYYY-MM-DD\\", \\"MM/DD/YYYY\\", \\"DD-MM-YYYY\\", \\"DD/MM/YYYY\\". The function should return the timestamp in Unix time format (number of seconds since 1970-01-01 00:00:00 UTC).","solution":"from datetime import datetime import time def date_to_timestamp(date_str): Converts a date string in various formats to a Unix timestamp. Supported formats are: \\"YYYY-MM-DD\\" \\"MM/DD/YYYY\\" \\"DD-MM-YYYY\\" \\"DD/MM/YYYY\\" Parameters: date_str (str): Date string in one of the supported formats. Returns: int: Unix timestamp. date_formats = [ \\"%Y-%m-%d\\", \\"%m/%d/%Y\\", \\"%d-%m-%Y\\", \\"%d/%m/%Y\\" ] for fmt in date_formats: try: dt = datetime.strptime(date_str, fmt) return int(time.mktime(dt.timetuple())) except ValueError: continue raise ValueError(\\"Date format not supported.\\")"},{"question":"Create a function that takes an integer \`n\` and returns the smallest number that is greater than \`n\` and contains the same digits. If no such number exists, return \`-1\`.","solution":"def next_greater_number_with_same_digits(n): Returns the smallest number that is greater than n and contains the same digits. If no such number exists, returns -1. digits = list(str(n)) length = len(digits) # Find the first digit from the right that is smaller than the digit next to it for i in range(length - 2, -1, -1): if digits[i] < digits[i + 1]: break else: # If no such digit is found, all digits are in non-ascending order return -1 # Find the smallest digit on the right of 'i' and greater than digits[i] for j in range(length - 1, i, -1): if digits[j] > digits[i]: # Swap the found digits digits[i], digits[j] = digits[j], digits[i] break # Reverse the digits to the right of 'i' to get the smallest possible number digits = digits[:i + 1] + digits[i + 1:][::-1] result = int(''.join(digits)) return result"},{"question":"Create a function that takes a list of lists of integers and returns the list of integers that are present in every sublist.","solution":"def common_elements(list_of_lists): Returns a list of integers that are present in every sublist. if not list_of_lists: return [] # Start with the set of the first sublist common_set = set(list_of_lists[0]) for lst in list_of_lists[1:]: common_set.intersection_update(lst) return list(common_set)"},{"question":"Create a function that takes three parameters: an array of integers, a target integer, and a function that modifies a number. The function should return an array where each element is the result of applying the modification function to the target integer if it is present in the array, or to the original integer if the target is not present.","solution":"def modify_array(arr, target, modify_func): This function takes an array of integers, a target integer, and a function that modifies a number. It returns an array where each element is the result of applying the modification function to the target integer if it is present in the array, or to the original integer if the target is not present. :param arr: List[int] - The input array of integers :param target: int - The target integer :param modify_func: function - The modification function to apply :return: List[int] - The modified array if target in arr: return [modify_func(x) for x in arr] else: return arr"},{"question":"Create a function that reverses the last \`n\` characters of a given string \`s\` and keep the rest of the characters in their original order. If \`n\` is greater than the length of the string \`s\`, reverse the entire string.","solution":"def reverse_last_n(s, n): Reverses the last n characters of the string s. If n is greater than the length of string s, reverse the entire string. Parameters: s (str): The input string. n (int): The number of characters to reverse from the end of the string. Returns: str: The resulting string with the last n characters reversed. if n <= 0: return s # If n is zero or negative, return the original string. if n >= len(s): return s[::-1] return s[:-n] + s[-n:][::-1]"},{"question":"Create a function that takes in a sorted list of integers and returns a list of lists, where each sublist contains consecutive integers from the sorted list.","solution":"def group_consecutive_numbers(sorted_list): Takes a sorted list of integers and returns a list of lists, where each sublist contains consecutive integers from the sorted list. if not sorted_list: # Return an empty list if the input list is empty return [] result = [] current_group = [sorted_list[0]] for number in sorted_list[1:]: if number == current_group[-1] + 1: current_group.append(number) else: result.append(current_group) current_group = [number] result.append(current_group) return result"},{"question":"Create a function that can extract substrings from a given string using a start and end index. The function should return the extracted substring.","solution":"def extract_substring(s, start, end): Returns the substring from start index to end index (exclusive) of the string s. return s[start:end]"},{"question":"Create a function that calculates the sum of all divisors of a number except itself. I.e., find the sum of proper divisors of a number.","solution":"def sum_of_proper_divisors(n): Returns the sum of all proper divisors of n (divisors excluding n itself). if n <= 1: return 0 divisors_sum = 1 # 1 is a proper divisor of every number greater than 1 # To find divisors, iterate up to the square root of n for i in range(2, int(n**0.5) + 1): if n % i == 0: divisors_sum += i if i != n // i: divisors_sum += n // i return divisors_sum"},{"question":"Create a function that calculates and returns the Fahrenheit equivalent of a given Celsius temperature.","solution":"def celsius_to_fahrenheit(celsius): Converts a Celsius temperature to Fahrenheit. :param celsius: Temperature in Celsius :return: Temperature in Fahrenheit return (celsius * 9/5) + 32"},{"question":"Create a function that takes two strings as input and returns the longer string. If both strings have the same length, return the first string.","solution":"def longer_string(str1, str2): Returns the longer of two strings. If both strings have the same length, returns the first string. if len(str1) >= len(str2): return str1 else: return str2"},{"question":"Create a function that checks if the given argument is even or odd, and returns the appropriate string.","solution":"def even_or_odd(number): Returns \\"even\\" if the number is even, and \\"odd\\" if the number is odd. if number % 2 == 0: return \\"even\\" else: return \\"odd\\""},{"question":"Create a function that checks if a number is a perfect square. If it is, return \\"perfect square\\", otherwise return \\"not perfect square\\".","solution":"import math def check_perfect_square(num): Checks if a number is a perfect square. Parameters: num (int): The number to check. Returns: str: \\"perfect square\\" if the number is a perfect square, otherwise \\"not perfect square\\". if num < 0: return \\"not perfect square\\" root = math.isqrt(num) if root * root == num: return \\"perfect square\\" else: return \\"not perfect square\\""},{"question":"Create a function that generates and prints the first \`n\` Fibonacci numbers. The Fibonacci sequence is a series of numbers in which each number is the sum of the two preceding ones, usually starting with 0 and 1. For example, the first six Fibonacci numbers are 0, 1, 1, 2, 3, 5. What's a good way to write this function?","solution":"def generate_fibonacci(n): Generates the first n Fibonacci numbers. if n <= 0: return [] elif n == 1: return [0] fibonacci_sequence = [0, 1] while len(fibonacci_sequence) < n: fibonacci_sequence.append(fibonacci_sequence[-1] + fibonacci_sequence[-2]) return fibonacci_sequence"},{"question":"Create a function that takes in a string, and returns a list of all the characters that appear more than once in the string.","solution":"def find_repeated_characters(s): Returns a list of all characters that appear more than once in the string s. Parameters: s (str): The input string Returns: list: A list of repeated characters from collections import Counter counter = Counter(s) return [char for char, count in counter.items() if count > 1]"},{"question":"Create a function that takes a string of text, encodes it in Base64, and then stores it in an environment variable for later use. The environment variable should be accessible within the same process or session.","solution":"import base64 import os def encode_and_store_in_env(text, env_var_name): Encodes the given text in Base64 and stores it in an environment variable. Args: text (str): The text to be encoded. env_var_name (str): The name of the environment variable to store the encoded text. Returns: None encoded_text = base64.b64encode(text.encode('utf-8')).decode('utf-8') os.environ[env_var_name] = encoded_text"},{"question":"Create a function that takes two lists as input, one for keys and one for values, and returns a dictionary. The function should handle cases where the lists are of different lengths by filling the gaps with a default value. If keys list length is greater, fill the gaps with 'None'; if values list length is greater, fill the gaps with an empty string.","solution":"def lists_to_dict(keys, values): Given two lists, one of keys and one of values, return a dictionary. If keys list is longer, fill the remaining keys with None. If values list is longer, fill the remaining values with an empty string. if len(keys) > len(values): values += [None] * (len(keys) - len(values)) elif len(values) > len(keys): keys += [''] * (len(values) - len(keys)) return dict(zip(keys, values))"},{"question":"Create a function that takes a string and an integer n, and return a new string which is the concatenation of the input string n times. Function signature: string repeatString(string s, int n)","solution":"def repeatString(s, n): Returns a new string which is the concatenation of the input string \`s\` repeated \`n\` times. Parameters: s (str): The input string to be repeated. n (int): The number of times to repeat the input string. Returns: str: The concatenated string resulting from repeating \`s\` \`n\` times. return s * n"},{"question":"Create a function that takes an integer as input and returns a list of all possible subsets of the integer. In this context, subsets are defined as all possible combinations of elements in the list of the integer. For example, the subsets of the integer 5 would be [1, 2, 3, 4, 5], [1, 2, 3], [1, 2, 4], [1, 2, 5], [1, 3, 4], [1, 3, 5], [1, 4, 5], [2, 3, 4], [2, 3, 5], [2, 4, 5], [3, 4, 5], [1, 2], [1, 3], [1, 4], [1, 5], [2, 3], [2, 4], [2, 5], [3, 4], [3, 5], [4, 5], [1], [2], [3], [4], [5], and [] (the empty set).","solution":"def find_subsets(n): Returns all possible subsets of the integer n, where the subsets are combinations of elements from 1 to n. from itertools import combinations # Create list of elements from 1 to n elements = list(range(1, n + 1)) # Generate all subsets all_subsets = [] for r in range(len(elements) + 1): for subset in combinations(elements, r): all_subsets.append(list(subset)) return all_subsets"},{"question":"Create a function that accepts two strings as parameters and returns a string containing only the distinct characters found in both strings, keeping the order they appear in the first string. For example, if the first string is \\"hello\\" and the second string is \\"world\\", the function should return \\"low\\" since 'l' and 'o' are the only characters present in both strings.","solution":"def find_distinct_common_chars(str1, str2): Returns a string containing only the distinct characters found in both str1 and str2, keeping the order they appear in the first string. common_chars = [char for char in str1 if char in str2] distinct_common_chars = [] seen_chars = set() for char in common_chars: if char not in seen_chars: distinct_common_chars.append(char) seen_chars.add(char) return ''.join(distinct_common_chars)"},{"question":"Create a function that takes an array of integers and returns the maximum sum of a contiguous subarray. This function will be used in a real-world scenario where we need to find the most profitable period from a stream of daily profit data. Can you provide a function for this?","solution":"def max_subarray_sum(arr): Finds the maximum sum of a contiguous subarray within a given array. :param arr: List of integers :return: Maximum sum of a contiguous subarray if not arr: return 0 max_sum = current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Create a function that takes two arrays of equal length and returns a new array that is the result of element-wise subtraction of the second array from the first array. Ensure that the function also checks if the arrays are of equal length before proceeding with the subtraction, and returns an error message if they are not equal in length.","solution":"def elementwise_subtraction(arr1, arr2): Returns a new array that is the result of element-wise subtraction of arr2 from arr1. Checks if the arrays are of equal length before performing the subtraction. if len(arr1) != len(arr2): return \\"Error: Arrays are not of equal length\\" return [a - b for a, b in zip(arr1, arr2)]"},{"question":"Create a function that takes two arrays of integers as arguments and returns an array containing the common elements between both arrays. The function should avoid duplicate elements and maintain the order of the first occurrence in the arrays.","solution":"def common_elements(arr1, arr2): Returns a list containing the common elements between both input arrays without duplicates and maintains the order of the first occurrence in the arrays. # Create sets for both arrays to filter common elements set1 = set(arr1) set2 = set(arr2) # Intersect the two sets to get common elements common_set = set1 & set2 # Return a list of common elements maintaining the order of the first occurrence common_list = [ele for ele in arr1 if ele in common_set] return list(dict.fromkeys(common_list)) # Remove duplicates while maintaining order"},{"question":"Create a function that takes in three parameters: a string, an integer, and another integer. The function should return the substring of the input string that starts from the index specified by the first integer parameter and ends at the index specified by the second integer parameter (inclusive). If the second integer parameter is greater than the length of the string, the function should return the substring from the start of the string up to and including the index specified by the second integer parameter. If the first integer parameter is negative or the second integer parameter is smaller than the first, the function should return an empty string.","solution":"def substring_with_indices(s, start, end): Returns the substring of the input string that starts from the index specified by the first integer parameter and ends at the index specified by the second integer parameter (inclusive). If the second integer parameter is greater than the length of the string, return the substring from the start of the string up to and including the index specified by the second integer parameter. If the first integer parameter is negative or the second integer parameter is smaller than the first, return an empty string. if start < 0 or end < start: return \\"\\" if end >= len(s): return s[start:] return s[start:end+1]"},{"question":"Create a function that converts a given string to a list of words. The words in the resulting list should be in reverse order.","solution":"def reverse_words(s): Converts a given string to a list of words in reverse order. return s.split()[::-1]"},{"question":"Create a function that takes a list of integers as an argument and returns the sum of the squares of all the even numbers in the list. The solution should be implemented in Python and handle a list with a minimum length of 2.","solution":"def sum_of_squares_of_even_numbers(numbers): Returns the sum of the squares of all the even numbers in the list. Args: numbers (list): List of integers Returns: int: Sum of the squares of even numbers if len(numbers) < 2: raise ValueError(\\"The list must contain at least 2 integers\\") return sum(num ** 2 for num in numbers if num % 2 == 0)"},{"question":"Create a function that calculates the mean of two numerical values. For example, the mean of 10 and 20 should be 15. Define this function with clear parameters and return the output of the function when called with the numbers 10 and 20.","solution":"def mean(a, b): Returns the mean of a and b. return (a + b) / 2 # Example usage result = mean(10, 20) result"},{"question":"Create a function that receives a string and returns the length of the longest substring without repeating characters. For example, for the string \\"abcabcbb\\", the function should return 3, because the longest substring without repeating characters is \\"abc\\". If the input string is empty, the function should return 0.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. :param s: input string :return: length of the longest substring without repeating characters if not s: return 0 char_map = {} max_len = 0 start = 0 for end, char in enumerate(s): if char in char_map and char_map[char] >= start: start = char_map[char] + 1 char_map[char] = end max_len = max(max_len, end - start + 1) return max_len"},{"question":"Create a function that reverses a string. Implement the function in Python.","solution":"def reverse_string(s): Returns the reversed version of the input string s. return s[::-1]"},{"question":"Create a function that generates a comma-separated string of numbers from 1 to n.","solution":"def generate_numbers(n): Returns a comma-separated string of numbers from 1 to n. return ','.join(str(i) for i in range(1, n + 1))"},{"question":"Create a function that takes a string of parentheses and determines whether the parentheses are valid. A string of parentheses is considered valid if every opening parenthesis \\"(\\" has a corresponding closing parenthesis \\")\\" and the pairs of parentheses are properly nested.","solution":"def is_valid_parentheses(s): Determines whether the given string of parentheses is valid. A string of parentheses is valid if: 1. Every opening parenthesis \\"(\\" has a corresponding closing parenthesis \\")\\", and 2. The pairs of parentheses are properly nested. :param s: String consisting of parentheses :return: Boolean value indicating if the parentheses are valid stack = [] for char in s: if char == '(': stack.append(char) elif char == ')': if not stack: return False stack.pop() return not stack"},{"question":"Create a function that rotates a given string by a specified number of characters to the left. If the number of characters to rotate is greater than the length of the string, the function should return the reversed string. If the string is empty, the function should return an empty string.","solution":"def rotate_string(s, n): Rotates the given string s by n characters to the left. If n is greater than the length of the string, returns the reversed string. If the string is empty, returns an empty string. if not s: return \\"\\" length = len(s) if n >= length: return s[::-1] return s[n:] + s[:n]"},{"question":"Create a function that takes an integer array and returns a new array that contains the same elements, but sorted in descending order. The function should be able to handle arrays of any size, and should not use any built-in sorting functions except for those specifically designed for sorting integers.","solution":"def sort_desc(arr): Sort the array in descending order without using the built-in sort function. Parameters: arr (list): A list of integers. Returns: list: A new list with elements sorted in descending order. # Implementing bubble sort to sort in descending order n = len(arr) sorted_arr = arr[:] for i in range(n): for j in range(0, n-i-1): if sorted_arr[j] < sorted_arr[j+1]: sorted_arr[j], sorted_arr[j+1] = sorted_arr[j+1], sorted_arr[j] return sorted_arr"},{"question":"Create a function that takes in two parameters: a list of integers and a target integer. You need to loop through the list to find and print all indices of the integer that matches the target integer provided.","solution":"def find_indices(lst, target): Returns a list of indices where the target integer is found in the list. :param lst: List of integers :param target: Target integer :return: List of indices indices = [] for i, num in enumerate(lst): if num == target: indices.append(i) return indices"},{"question":"Create a function that takes an array of integers and returns the number of odd numbers in the array.","solution":"def count_odd_numbers(arr): Returns the number of odd numbers in the array. count = 0 for num in arr: if num % 2 != 0: count += 1 return count"},{"question":"Create a function that takes a string as input and returns True if the string contains the substring \\"leet\\" and False otherwise. However, the \\"leet\\" substring can also be spelled in a case-insensitive manner. That is, \\"leet\\", \\"LEET\\", \\"LeEt\\", etc., should all return True.","solution":"def contains_leet(input_string): Returns True if the input string contains the substring \\"leet\\" in a case-insensitive manner. Otherwise, returns False. return 'leet' in input_string.lower()"},{"question":"Create a function that takes an integer list, removes the duplicates, and preserves the order of the unique elements in the list. Use Python.","solution":"def remove_duplicates(lst): Returns a list with duplicates removed, preserving the order of the unique elements. seen = set() unique_lst = [] for item in lst: if item not in seen: unique_lst.append(item) seen.add(item) return unique_lst"},{"question":"Create a function that accepts a 2D list (matrix) as an input and returns the transpose of the matrix. The transpose of a matrix is obtained by swapping rows with columns.","solution":"def transpose(matrix): Returns the transpose of the given 2D list (matrix). Parameters: matrix (list of list of int): 2D list representing the matrix to be transposed. Returns: list of list of int: The transposed matrix. return list(map(list, zip(*matrix)))"},{"question":"Create a function that takes an integer as an argument and returns a list of its factors. The factors should be returned as a list. For example, the factors of 24 are 1, 2, 3, 4, 6, 8, 12, and 24.","solution":"def factors(n): Returns a list of factors of the given integer n. result = [] for i in range(1, n + 1): if n % i == 0: result.append(i) return result"},{"question":"Create a function that takes in a list of numbers and returns their sum. Let's say I have a list of numbers and I want to get their total sum. How would I do that in Python?","solution":"def list_sum(numbers): Returns the sum of all numbers in the list. Args: numbers (list of int/float): The list of numbers to sum. Returns: int/float: The sum of all numbers in the list. return sum(numbers)"},{"question":"Create a function that takes in a list and returns the maximum sum of any contiguous subarray within the list. This is a classic problem known as the Kadane's algorithm.","solution":"def max_subarray_sum(arr): Returns the maximum sum of any contiguous subarray within the list. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that takes two lists of integers and returns a list of their intersection, ensuring the result is sorted and free of duplicates. Additionally, write a check function to test the correctness of your solution with provided data points.","solution":"def intersection_sorted_unique(list1, list2): Returns a sorted list containing the unique intersection of the two lists. # Convert both lists to sets to remove duplicates and find the intersection set1 = set(list1) set2 = set(list2) intersection = set1.intersection(set2) # Convert the intersection set back to a list and sort it result = sorted(intersection) return result"},{"question":"Create a function that prompts the user to input a sentence and then removes all characters except letters (a-z, A-Z). All other characters, including spaces, punctuation, and digits, should be removed from the sentence.","solution":"def remove_non_letters(sentence): Remove all characters from the sentence except letters (a-z, A-Z). return ''.join(char for char in sentence if char.isalpha())"},{"question":"Create a function that calculates the factorial of a given non-negative integer using a recursive approach. The function should be named \`calculate_factorial\` and take a single argument \`n\`, which represents the number for which the factorial is to be calculated.","solution":"def calculate_factorial(n): Returns the factorial of a given non-negative integer n using a recursive approach. if n < 0: raise ValueError(\\"n must be a non-negative integer\\") if n == 0 or n == 1: return 1 return n * calculate_factorial(n - 1)"},{"question":"Create a function that accepts a string of text and returns the length of the shortest word in the text. Assume that the length is measured in terms of characters.","solution":"def length_of_shortest_word(text): Returns the length of the shortest word in the given text. Args: text (str): A string of text containing multiple words. Returns: int: The length of the shortest word. words = text.split() if not words: return 0 shortest_length = min(len(word) for word in words) return shortest_length"},{"question":"Create a function that takes a string as input and returns a boolean indicating whether the string is palindromic or not. The function should ignore case and spaces, and it should also handle non-alphanumeric characters.","solution":"import re def is_palindrome(s): Returns whether the given string is a palindrome, ignoring case, spaces, and non-alphanumeric characters. Parameters: s (str): Input string to check. Returns: bool: True if the string is a palindrome, False otherwise. # Normalize the string: remove non-alphanumeric characters and convert to lowercase cleaned_s = re.sub(r'[^a-zA-Z0-9]', '', s).lower() # Check if the cleaned string is equal to its reverse return cleaned_s == cleaned_s[::-1]"},{"question":"Create a function that returns the nth node from the end of a linked list without using the length of the list.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def nth_from_end(head: ListNode, n: int) -> ListNode: Returns the nth node from the end of a linked list. slow = fast = head for _ in range(n): if not fast: return None fast = fast.next while fast: slow = slow.next fast = fast.next return slow"},{"question":"Create a function that returns the product of all elements in a list if any element is even, and the sum of all elements if all elements are odd.","solution":"def product_or_sum(lst): Returns the product of all elements in the list if any element is even, and the sum of all elements if all elements are odd. Parameters: lst (list): A list of integers. Returns: int: The product if any element is even, otherwise the sum. if any(x % 2 == 0 for x in lst): product = 1 for num in lst: product *= num return product else: return sum(lst)"},{"question":"Create a function that generates a sequence of Fibonacci numbers up to a specified maximum value.","solution":"def fibonacci_up_to(max_value): Generates a list of Fibonacci numbers up to a specified maximum value. Parameters: max_value (int): The maximum value up to which Fibonacci numbers are generated. Returns: list: A list of Fibonacci numbers up to the specified maximum value. if max_value < 0: return [] fib_sequence = [0, 1] while True: next_value = fib_sequence[-1] + fib_sequence[-2] if next_value > max_value: break fib_sequence.append(next_value) return fib_sequence if max_value > 0 else [0]"},{"question":"Create a function that takes a string as input and returns the string with the same characters but in reverse order.","solution":"def reverse_string(s): Returns the reverse of the input string s. return s[::-1]"},{"question":"Create a function that takes two sorted lists, \`listA\` and \`listB\`, and returns a new list containing the intersection of these two lists, i.e., the elements that are present in both lists. The function should return the result in ascending order.","solution":"def intersection_sorted_lists(listA, listB): Returns a list containing the intersection of listA and listB in ascending order. # Use two pointers to traverse both lists pointerA = 0 pointerB = 0 result = [] while pointerA < len(listA) and pointerB < len(listB): if listA[pointerA] < listB[pointerB]: pointerA += 1 elif listA[pointerA] > listB[pointerB]: pointerB += 1 else: if not result or result[-1] != listA[pointerA]: # Avoid duplicates in the result result.append(listA[pointerA]) pointerA += 1 pointerB += 1 return result"},{"question":"Create a function that takes a pathname as an argument and returns the basename of the pathname without the file extension.","solution":"import os def basename_without_extension(pathname): Returns the basename of the pathname without the file extension. base = os.path.basename(pathname) # get the basename with extension name, _ = os.path.splitext(base) # split the name and the extension return name"},{"question":"Create a function that takes a dictionary as input and returns a new dictionary that contains the same keys as the original dictionary, but with all values converted to their opposite cases. If a value is not a string, ignore that key-value pair.","solution":"def convert_values_to_opposite_case(input_dict): Takes a dictionary as input and returns a new dictionary with the same keys but with all string values converted to their opposite cases. Non-string values are ignored. Parameters: input_dict (dict): The input dictionary Returns: dict: A new dictionary with values converted to opposite cases return {key: (value.swapcase() if isinstance(value, str) else value) for key, value in input_dict.items() if isinstance(value, str)}"},{"question":"Create a function that takes two parameters: \`a\` and \`b\` which are tuples of integers. The function should return a new tuple where each element is the maximum between the corresponding elements of \`a\` and \`b\`. If the tuples are of unequal lengths, the function should return a tuple containing the results up to the length of the shorter tuple.","solution":"def max_tuples(a, b): Returns a tuple where each element is the maximum between the corresponding elements of \`a\` and \`b\`. If the tuples have unequal lengths, the function returns a tuple with the length of the shorter tuple. # Determine the length of the shorter tuple min_length = min(len(a), len(b)) # Generate the new tuple with max values return tuple(max(a[i], b[i]) for i in range(min_length))"},{"question":"Create a function that returns the maximum value from a list of integers or floats.","solution":"def find_maximum(numbers): Returns the maximum value from a list of integers or floats. if not numbers: raise ValueError(\\"The list is empty\\") return max(numbers)"},{"question":"Create a function that takes an integer n and returns the nth Fibonacci number. The function should be efficient and should not use recursion due to the high time complexity associated with recursive solutions. Consider upper limit of n to be around 50. You can use iterative methods for better performance.","solution":"def fibonacci(n): Returns the nth Fibonacci number. Parameters: n (int): The position of the Fibonacci number to be returned. Returns: int: The nth Fibonacci number. if n <= 0: raise ValueError(\\"The input must be a positive integer\\") elif n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 for i in range(2, n): a, b = b, a + b return b"},{"question":"Create a function that takes a list of integers and returns the product of all the negative numbers in the list.","solution":"def product_of_negatives(nums): Returns the product of all negative numbers in the list nums. If no negative numbers are found, returns 1. product = 1 has_negatives = False for num in nums: if num < 0: product *= num has_negatives = True return product if has_negatives else 1"},{"question":"Create a function that accepts two inputs (two arrays of integers) as arguments and return a single array of integers that represents the intersection of these two arrays. The intersection should contain only elements that appear in both arrays and should not contain any duplicates. The function should be efficient in its implementation.","solution":"def array_intersection(arr1, arr2): Returns the intersection of two arrays, removing duplicates. # Using set intersection to find common elements and remove duplicates return list(set(arr1) & set(arr2))"},{"question":"Create a function that takes in a string and returns the number of occurrences of a specific character in the string.","solution":"def count_character_occurrences(string, char): Returns the number of occurrences of a specific character in the string. Parameters: string (str): The string to search within. char (str): The character to count in the string. Returns: int: The number of occurrences of the character in the string. if not isinstance(string, str) or not isinstance(char, str) or len(char) != 1: raise ValueError(\\"The inputs must be a string and a single character.\\") return string.count(char)"},{"question":"Create a function that takes an integer value and returns True if the integer is even, and False if it is odd.","solution":"def is_even(n): Returns True if n is an even number, otherwise False. return n % 2 == 0"},{"question":"Create a function that takes an integer as a parameter and returns a list of integers that represent the prime factors of the given integer. The function should also include an optional parameter 'sort' that defaults to False. If 'sort' is True, the list of prime factors should be returned in ascending order. If 'sort' is False, the list should be returned in the order they were found.","solution":"def prime_factors(n, sort=False): Returns a list of prime factors of the given integer \`n\`. If \`sort\` is True, the list is returned in ascending order, otherwise in the order they were found. factors = [] d = 2 while n > 1: while n % d == 0: factors.append(d) n /= d d += 1 if sort: factors.sort() return factors"},{"question":"Create a function that takes an integer array and returns true if the array is monotonic, otherwise false. An array is monotonic if it is either entirely non-increasing or non-decreasing.","solution":"def is_monotonic(array): Returns True if the given array is monotonic (either entirely non-increasing or non-decreasing). Otherwise, returns False. if not array or len(array) == 1: return True increasing = decreasing = True for i in range(1, len(array)): if array[i] > array[i - 1]: decreasing = False if array[i] < array[i - 1]: increasing = False return increasing or decreasing"},{"question":"Create a function that compares two arrays and returns a boolean indicating whether they are identical. However, the comparison should be case-insensitive if one array contains strings and the other does not.","solution":"def compare_arrays(arr1, arr2): Compares two arrays and returns a boolean indicating whether they are identical. The comparison should be case-insensitive if one array contains strings and the other does not. def normalize(item): if isinstance(item, str): return item.lower() return item if len(arr1) != len(arr2): return False for i in range(len(arr1)): if normalize(arr1[i]) != normalize(arr2[i]): return False return True"},{"question":"Create a function that compares two lists of integers and returns a new list containing only the elements that are present in both lists. The returned list should also be sorted in ascending order.","solution":"def common_elements(list1, list2): Returns a sorted list containing elements that are present in both list1 and list2. common_set = set(list1).intersection(set(list2)) return sorted(list(common_set))"},{"question":"Create a function that takes a string and returns the string with all the characters in reverse order. However, the characters in each word should remain in their original order.","solution":"def reverse_words_order(s): Returns the input string with the words' order reversed, but the characters in each word remain in their original order. For example: reverse_words_order(\\"Hello World\\") -> \\"World Hello\\" words = s.split() reversed_words = words[::-1] return ' '.join(reversed_words)"},{"question":"Create a function that takes two arguments: a list of numbers and an integer \`n\`. The function should return a new list containing the \`n\` smallest numbers from the input list. The returned list should be sorted in ascending order. If \`n\` is greater than the number of elements in the input list, return all elements of the list sorted in ascending order.","solution":"def n_smallest_numbers(lst, n): Returns a list of the n smallest numbers from the input list, sorted in ascending order. Parameters: lst (list): A list of numbers. n (int): The number of smallest elements to return. Returns: list: A list containing the n smallest numbers from lst, sorted in ascending order. return sorted(lst)[:n]"},{"question":"Create a function that takes two numbers as input and returns their sum. Also, write a simple test case to check if the function works correctly.","solution":"def add_numbers(a, b): Returns the sum of a and b. return a + b"},{"question":"Create a function that would return only unique strings from an array, preserving the order of the initial array. For example, if the input array is \`[\\"apple\\", \\"orange\\", \\"banana\\", \\"apple\\", \\"kiwi\\"]\`, the output should be \`[\\"orange\\", \\"banana\\", \\"kiwi\\"]\`.","solution":"def unique_strings(strings): Returns a list of unique strings, preserving the order of the initial list. :param strings: List of strings :return: List of strings with duplicates removed, preserving order seen = set() result = [] for string in strings: if string not in seen: seen.add(string) result.append(string) return [s for s in result if strings.count(s) == 1]"},{"question":"Create a function that will take in a dictionary of student grades and a threshold percentage. The function will return a list of all students who have a scored above the threshold percentage.","solution":"def students_above_threshold(grades, threshold): Returns a list of students who scored above the threshold percentage. Args: grades (dict): Dictionary with student names as keys and their grades as values. threshold (float): Threshold percentage. Returns: List[str]: List of student names who scored above the threshold. return [student for student, grade in grades.items() if grade > threshold]"},{"question":"Create a function that , given a string, returns the first word and last word of the string. If there are no words, return \\"No words found.\\" If the string contains only one word, return that word twice. For example, if the input string is \\"hello world,\\" the function should return \\"hello world\\". If the input string is \\"hello,\\" the function should return \\"hello hello\\". If the string is only whitespace, the function should return \\"No words found.\\"","solution":"def first_and_last_words(s): Returns the first and last words of the string. If there are no words, returns \\"No words found.\\" If the string contains only one word, returns that word twice. words = s.split() if len(words) == 0: return \\"No words found.\\" elif len(words) == 1: return words[0] + \\" \\" + words[0] else: return words[0] + \\" \\" + words[-1]"},{"question":"Create a function that finds the minimum depth of a binary tree. The function should return the minimum depth from the root to the nearest leaf node. If the tree is empty, return 0. Note that a leaf node is a node with no children.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def min_depth(root): Returns the minimum depth of a binary tree. if not root: return 0 if not root.left and not root.right: return 1 if not root.left: return min_depth(root.right) + 1 if not root.right: return min_depth(root.left) + 1 return min(min_depth(root.left), min_depth(root.right)) + 1"},{"question":"Create a function that takes an integer \`n\` as an argument and returns \`n\` if it's not zero, and returns 1 if \`n\` is zero.","solution":"def check_and_return(n): Returns n if n is not zero; returns 1 if n is zero. return n if n != 0 else 1"},{"question":"Create a function that takes a string as input and returns 'water' if 'water' is a substring, otherwise return 'no water'. Please provide a proper solution.","solution":"def check_for_water(input_string): Returns 'water' if 'water' is a substring of the input string, otherwise returns 'no water'. if 'water' in input_string: return 'water' else: return 'no water'"},{"question":"Create a function that takes two integers as input and returns the sum of all odd numbers between them, including both integers if they are odd. The function should work correctly regardless of whether the first number is greater than the second or vice versa.","solution":"def sum_of_odds_between(a, b): Returns the sum of all odd numbers between a and b, inclusive. if a > b: a, b = b, a return sum(x for x in range(a, b + 1) if x % 2 != 0)"},{"question":"Create a function that accepts a string 's' and returns the number of occurrences of each character in the string. The function should ignore case sensitivity and include non-alphanumeric characters.","solution":"from collections import Counter def count_character_occurrences(s): Returns the number of occurrences of each character in the string. The function is case insensitive and includes non-alphanumeric characters. s = s.lower() return Counter(s)"},{"question":"Create a function that takes in a two-dimensional array as an argument and returns a one-dimensional array containing the elements of the two-dimensional array in a flattened form. The function should also handle nested arrays of varying depths.","solution":"def flatten(arr): Recursively flattens a two-dimensional array of varying depths into a one-dimensional array. Parameters: arr (list): A multi-dimensional list of elements. Returns: list: A flattened one-dimensional list of elements. result = [] def flatten_helper(sub_arr): for elem in sub_arr: if isinstance(elem, list): flatten_helper(elem) else: result.append(elem) flatten_helper(arr) return result"},{"question":"Create a function that generates a list of prime numbers up to a specified integer. The function should take an integer as its argument and return a list of all prime numbers less than or equal to that integer. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.","solution":"def generate_primes(n): Returns a list of prime numbers up to and including n. if n < 2: return [] primes = [] for num in range(2, n+1): is_prime = True for i in range(2, int(num**0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Create a function that finds the most frequently occurring element in a list. If there are multiple elements with the same maximum frequency, return the one that first appears in the list.","solution":"def most_frequent_element(lst): Returns the most frequently occurring element in the list. If there are multiple elements with the same frequency, returns the one that appears first in the list. if not lst: return None frequency = {} max_count = 0 max_element = lst[0] for element in lst: frequency[element] = frequency.get(element, 0) + 1 if frequency[element] > max_count: max_count = frequency[element] max_element = element elif frequency[element] == max_count and lst.index(element) < lst.index(max_element): max_element = element return max_element"},{"question":"Create a function that calculates the factorial of a number using recursion. The function should handle large numbers efficiently and use memoization to avoid recalculating previously computed factorials. The function should also be able to handle negative numbers and return an appropriate error message.","solution":"def factorial(n, memo={}): Returns the factorial of a non-negative integer n using recursion with memoization. Handles negative numbers by returning an appropriate error message. if n < 0: return \\"Error: factorial is not defined for negative numbers\\" if n in memo: return memo[n] if n == 0 or n == 1: memo[n] = 1 else: memo[n] = n * factorial(n - 1, memo) return memo[n]"},{"question":"Create a function that takes a string and returns the string with each word capitalized. For example, if the input string is \\"hello world\\", the function should return \\"Hello World\\".","solution":"def capitalize_words(s): Returns the string with each word capitalized. Args: s (str): The input string. Returns: str: The input string with each word capitalized. return ' '.join(word.capitalize() for word in s.split())"},{"question":"Create a function that converts an infix expression to a postfix expression using the Shunting Yard algorithm.","solution":"def infix_to_postfix(expression): Converts an infix expression to a postfix expression using the Shunting Yard algorithm. precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3} output = [] operators = [] for char in expression: if char.isalnum(): # If the character is an operand, add it to the output output.append(char) elif char == '(': # If the character is '(', push it to the stack operators.append(char) elif char == ')': # If the character is ')', pop and output from the stack until '(' is encountered while operators and operators[-1] != '(': output.append(operators.pop()) operators.pop() # Remove '(' from the stack else: # Character is an operator while (operators and operators[-1] in precedence and precedence[char] <= precedence[operators[-1]]): output.append(operators.pop()) operators.append(char) while operators: # Pop all the operators remaining in the stack output.append(operators.pop()) return ''.join(output)"},{"question":"Create a function that processes an array of integers and returns the largest prime number in the array. If there are no prime numbers in the array, the function should return -1.","solution":"def is_prime(n): Returns true if n is a prime number, otherwise false. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False max_divisor = int(n**0.5) + 1 for d in range(3, max_divisor, 2): if n % d == 0: return False return True def largest_prime(arr): Returns the largest prime number in the array. If there are no prime numbers, returns -1. primes = [num for num in arr if is_prime(num)] return max(primes) if primes else -1"},{"question":"Create a function that returns a list of unique integers from an array.","solution":"def unique_integers(arr): Given an array of integers, returns a list of unique integers. return list(set(arr))"},{"question":"Create a function that takes two lists of integers and returns a list containing the common integers between them.","solution":"def common_integers(list1, list2): Returns a list containing the common integers between list1 and list2. return list(set(list1) & set(list2))"},{"question":"Create a function that finds the longest common prefix in a list of strings. If there is no common prefix, the function should return an empty string.","solution":"def longest_common_prefix(strs): Returns the longest common prefix among a list of strings. If there is no common prefix, returns an empty string. if not strs: return \\"\\" # Start with the prefix being the first string prefix = strs[0] for string in strs: while not string.startswith(prefix): prefix = prefix[:-1] if not prefix: return \\"\\" return prefix"},{"question":"Create a function that , given two points in a 2D space, calculates the Euclidean distance between them. The function should be named \`calculateDistance\` and take two tuples representing the coordinates of the points. Each tuple contains the x and y coordinates of a point. The function should return the Euclidean distance between the two points. The Euclidean distance is calculated using the formula: √((x2-x1)² + (y2-y1)²).","solution":"import math def calculateDistance(point1, point2): Returns the Euclidean distance between two points in 2D space. x1, y1 = point1 x2, y2 = point2 distance = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) return distance"},{"question":"Create a function that returns an array with the first and last elements removed.","solution":"def remove_first_and_last_elements(arr): Returns a new list with the first and last elements removed. Parameters: arr (list): The list from which the first and last elements will be removed. Returns: list: A new list with the first and last elements removed. if len(arr) <= 2: return [] return arr[1:-1]"},{"question":"Create a function that takes a positive integer as its parameter and returns True if the integer is a palindrome (meaning it reads the same backward as forward) and False otherwise.","solution":"def is_palindrome(n): Returns True if the integer n is a palindrome, otherwise False. A palindrome is a number that reads the same backward as forward. Parameters: n (int): A positive integer to check if it is a palindrome. Returns: bool: True if n is a palindrome, False otherwise. str_n = str(n) return str_n == str_n[::-1]"},{"question":"Create a function that takes an input list and returns a new list with all the elements in the input list sorted in descending order.","solution":"def sort_descending(lst): Returns a new list with all the elements sorted in descending order. return sorted(lst, reverse=True)"},{"question":"Create a function that takes in a string and returns the number of times the substring \\"cat\\" appears in the string. The function should be case-sensitive.","solution":"def count_cat_occurrences(string): Returns the number of times the substring 'cat' appears in the string. The function is case-sensitive. return string.count('cat')"},{"question":"Create a function that accepts two lists of integers and returns a list that contains the common elements of both lists, sorted in ascending order. If there are no common elements, return an empty list. Do not use Python's in-built list methods (append, sort, etc.) for sorting.","solution":"def common_elements(list1, list2): Returns a list of common elements in both lists, sorted in ascending order. # Find common elements using a set-based approach common_set = set(list1).intersection(set(list2)) # Implementing a basic sorting algorithm (Bubble Sort) common_list = list(common_set) for i in range(len(common_list)): for j in range(0, len(common_list) - i - 1): if common_list[j] > common_list[j + 1]: common_list[j], common_list[j + 1] = common_list[j + 1], common_list[j] return common_list"},{"question":"Create a function that returns the second highest number in an array. If there is no such number, return the highest number. If the array has less than two elements, return None.","solution":"def second_highest(nums): Returns the second highest number in an array. If there is no such number, returns the highest number. If the array has less than two elements, return None. if len(nums) < 2: return None unique_nums = list(set(nums)) unique_nums.sort(reverse=True) if len(unique_nums) < 2: return unique_nums[0] return unique_nums[1]"},{"question":"Create a function that takes two input lists of positive integers and returns a new list where the elements from both lists are interleaved. The function should maintain the order of elements as they appear in the original lists.","solution":"def interleave_lists(list1, list2): Returns a new list where the elements from both input lists are interleaved. If the lists have different lengths, the remaining elements from the longer list will be added at the end. Parameters: list1 (list): First list of positive integers. list2 (list): Second list of positive integers. Returns: list: New list with elements interleaved from list1 and list2. interleaved_list = [] len1, len2 = len(list1), len(list2) max_len = max(len1, len2) for i in range(max_len): if i < len1: interleaved_list.append(list1[i]) if i < len2: interleaved_list.append(list2[i]) return interleaved_list"},{"question":"Create a function that receives a string n and returns a count of all alphanumeric characters in it, ignoring special characters and spaces. How would you do this in Python?","solution":"def count_alphanumeric_characters(s): Returns the count of all alphanumeric characters in the string s. Parameters: s (str): The input string Returns: int: The count of alphanumeric characters in the input string return sum(c.isalnum() for c in s)"},{"question":"Create a function that takes in two parameters: an array of integers and an integer \`k\`. The function should return a list of all the indices of elements in the array that are greater than \`k\`. If no elements in the array are greater than \`k\`, return an empty list. The list returned should be sorted in ascending order.","solution":"def find_indices_greater_than_k(arr, k): Returns a list of indices of elements in \`arr\` that are greater than \`k\`. If no elements are greater than \`k\`, returns an empty list. The list returned is sorted in ascending order. Parameters: arr (list): A list of integers. k (int): The integer to compare elements in \`arr\` against. Returns: list: A list of indices of elements in \`arr\` that are greater than \`k\`. return [i for i, num in enumerate(arr) if num > k]"},{"question":"Create a function that takes in a number \`n\` and returns the sum of the first \`n\` Fibonacci numbers. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. For example, the first few Fibonacci numbers are 0, 1, 1, 2, 3, 5, ...","solution":"def sum_first_n_fibonacci(n): Returns the sum of the first n Fibonacci numbers. if n <= 0: return 0 a, b = 0, 1 total = a for _ in range(1, n): total += b a, b = b, a + b return total"},{"question":"Create a function that receives a positive integer as input and returns the sum of all the numbers less than this input that are divisible by either 3 or 5. Make sure the function handles any input within the range of a standard integer in Python (the range of x such that -sys.maxsize - 1 < x < sys.maxsize).","solution":"def sum_divisible_by_3_or_5(n): Returns the sum of all numbers less than n that are divisible by 3 or 5. If n is less than or equal to 0, returns 0. if n <= 0: return 0 return sum(i for i in range(1, n) if i % 3 == 0 or i % 5 == 0)"},{"question":"Create a function that returns the first item in the list that is divisible by 5. If no item is divisible by 5, then return 'No items divisible by 5'.","solution":"def first_divisible_by_5(lst): Returns the first item in the list that is divisible by 5. If no item is divisible by 5, returns 'No items divisible by 5'. for item in lst: if item % 5 == 0: return item return 'No items divisible by 5'"},{"question":"Create a function that identifies if the number 5 is in an array and return true or false accordingly.","solution":"def contains_five(arr): Returns True if the number 5 is in the array, False otherwise. return 5 in arr"},{"question":"Create a function that checks the validity of a given IPv4 address. The function should take a string as input and return a boolean indicating whether the IP address is valid or not.","solution":"def is_valid_ipv4(ip): Returns True if the input string is a valid IPv4 address, otherwise returns False. parts = ip.split('.') if len(parts) != 4: return False for part in parts: if not part.isdigit(): return False num = int(part) if num < 0 or num > 255: return False return True"},{"question":"Create a function that takes a list of integers and returns the most frequently occurring integer. If there is a tie, return the smallest integer among those with the highest frequency. This solution should run in O(n log n) time complexity.","solution":"from collections import Counter def most_frequent_integer(nums): Returns the most frequently occurring integer in the list nums. If there is a tie, returns the smallest integer among those with the highest frequency. :param nums: List of integers :return: Integer if not nums: return None # Handle edge case of empty list count = Counter(nums) most_common = count.most_common() max_freq = most_common[0][1] candidates = [num for num, freq in most_common if freq == max_freq] return min(candidates)"},{"question":"Create a function that generates a random password of a given length. The password should include at least one uppercase letter, one lowercase letter, and one digit. You can use any Python library you prefer for randomness.","solution":"import random import string def generate_password(length): Generates a random password of a given length. The password includes at least one uppercase letter, one lowercase letter, and one digit. if length < 3: raise ValueError(\\"Password length should be at least 3\\") # Generate one character of each required type password_chars = [ random.choice(string.ascii_uppercase), # Uppercase letter random.choice(string.ascii_lowercase), # Lowercase letter random.choice(string.digits) # Digit ] # Fill the rest of the password length with random characters while len(password_chars) < length: password_chars.append(random.choice(string.ascii_letters + string.digits)) # Shuffle to ensure the characters are in random order random.shuffle(password_chars) return ''.join(password_chars)"},{"question":"Create a function that takes in a string and returns the shortest palindrome that can be made by appending characters to the end of the string. The function should work for any input string, including empty strings and strings that are already palindromes.","solution":"def shortest_palindrome(s): Returns the shortest palindrome that can be made by appending characters to the end of the string. def is_palindrome(s): return s == s[::-1] if is_palindrome(s): return s for i in range(len(s)): if is_palindrome(s[i:]): return s + s[:i][::-1] # In case the entire string needs to be reversed and appended return s + s[::-1]"},{"question":"Create a function that takes two parameters: a string and a number. The function should return a new string that repeats the original string the specified number of times.","solution":"def repeat_string(s, n): Returns a new string that repeats the original string s, n times. :param s: The string to repeat. :param n: The number of times to repeat the string. :return: The repeated string. return s * n"},{"question":"Create a function that takes three parameters: a list of integers, a target sum, and a target length. The function should return all unique combinations of integers from the list that add up to the target sum and consist of exactly the target length.","solution":"from typing import List def combination_sum(nums: List[int], target: int, length: int) -> List[List[int]]: Returns all unique combinations of integers from the input list that add up to the target sum and consist of exactly the target length. def backtrack(start, current_comb, current_sum): if len(current_comb) > length: return if current_sum > target: return if len(current_comb) == length and current_sum == target: combinations.append(list(current_comb)) return for i in range(start, len(nums)): current_comb.append(nums[i]) backtrack(i + 1, current_comb, current_sum + nums[i]) current_comb.pop() combinations = [] nums.sort() # Optional: not necessary for correctness but helps in pruning the tree backtrack(0, [], 0) return combinations"},{"question":"Create a function that takes an array of numbers and returns the sum of all the positive numbers in the array. How would you solve this problem using Python with the given requirements?","solution":"def sum_of_positive_numbers(numbers): Returns the sum of all positive numbers in the array. :param numbers: List of numbers :return: Sum of positive numbers return sum(num for num in numbers if num > 0)"},{"question":"Create a function that takes a list of strings and returns a copy of the list where each string is replaced with its corresponding string from another list if the string in the first list exists as a key in a dictionary mapping. If a string does not have a corresponding key, it remains unchanged.","solution":"def replace_strings(original_list, mapping): Replaces each string in original_list with its corresponding string from the mapping dictionary if it exists. :param original_list: List of strings to be replaced :param mapping: Dictionary with strings to be replaced as keys and their replacements as values :return: List with replaced strings return [mapping.get(item, item) for item in original_list]"},{"question":"Create a function that accepts two lists of integers and computes the sum of elements in the first list that correspond to the even indices in the second list.","solution":"def sum_corresponding_even_indices(list1, list2): Computes the sum of elements in list1 that correspond to the even indices in list2. Parameters: list1 (list of int): A list of integers. list2 (list of int): Another list of integers. Returns: int: The sum of elements in list1 that correspond to the even indices in list2. if len(list1) != len(list2): raise ValueError(\\"Both lists must be of the same length\\") total_sum = 0 for i in range(len(list2)): if i % 2 == 0: total_sum += list1[i] return total_sum"},{"question":"Create a function that takes a string \`s\` as input and returns the frequency of each character in \`s\`. If the frequency of a character is 1, it should not be counted. Treat the string as case-sensitive.","solution":"def char_frequencies(s): Returns a dictionary with characters as keys and their respective frequencies as values, excluding characters with a frequency of 1. freq_dict = {} for char in s: if char in freq_dict: freq_dict[char] += 1 else: freq_dict[char] = 1 return {char: freq for char, freq in freq_dict.items() if freq > 1}"},{"question":"Create a function that takes an integer as input and returns the integer with its bits reversed. For example, if the input is 4 (binary 100), the function should return 6 (binary 110).","solution":"def reverse_bits(num): Reverses the bits of an integer and returns the resulting integer. Args: num (int): The input integer. Returns: int: The integer with reversed bits. # Convert number to binary string, remove the '0b' prefix binary_str = bin(num)[2:] # Reverse the binary string reversed_binary_str = binary_str[::-1] # Convert the reversed binary string back to integer reversed_num = int(reversed_binary_str, 2) return reversed_num"},{"question":"Create a function that checks if a number is a prime number or not. If it is prime, return \\"This number is prime.\\" Otherwise, return \\"This number is not prime.\\"","solution":"def is_prime(n): Checks if a number n is prime. Parameters: n (int): The number to check for primeness. Returns: str: A message indicating whether n is prime or not. if n <= 1: return \\"This number is not prime.\\" if n == 2: return \\"This number is prime.\\" if n % 2 == 0: return \\"This number is not prime.\\" i = 3 while i * i <= n: if n % i == 0: return \\"This number is not prime.\\" i += 2 return \\"This number is prime.\\""},{"question":"Create a function that generates a list of the first N Fibonacci numbers, where N is a positive integer. If N is 0, the function should return an empty list. If N is 1, the function should return a list containing only the first Fibonacci number [0]. The function should handle large values of N efficiently and use memoization to avoid redundant calculations.","solution":"def fibonacci_sequence(n): Generates a list of the first N Fibonacci numbers. Parameters: n (int): The number of Fibonacci numbers to generate. Returns: list: A list containing the first N Fibonacci numbers. if n == 0: return [] elif n == 1: return [0] fib = [0, 1] for _ in range(2, n): fib.append(fib[-1] + fib[-2]) return fib"},{"question":"Create a function that takes a string containing a list of words separated by spaces and returns a new string with the words in reverse order.","solution":"def reverse_words(sentence): Returns a new string with the words in the given sentence in reverse order. words = sentence.split() reversed_words = words[::-1] return ' '.join(reversed_words)"},{"question":"Create a function that checks if a given string contains only non-letter characters.","solution":"def contains_only_non_letters(s): Returns True if the string contains only non-letter characters, otherwise False. return all(not char.isalpha() for char in s)"},{"question":"Create a function that takes two lists of integers and returns a new list that is the result of concatenating the second list onto the first list without any duplicates.","solution":"def concatenate_and_remove_duplicates(list1, list2): Concatenates list2 onto list1 and removes duplicates. combined_list = list1 + list2 return list(dict.fromkeys(combined_list))"},{"question":"Create a function that generates all possible permutations of a given list and returns them as a list of lists. For example, if the input list is [1, 2, 3], the function should return [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]].","solution":"from itertools import permutations def generate_permutations(lst): Generates all possible permutations of a given list. Args: lst (list): The list of elements to permute. Returns: list of lists: A list containing all permutations of the input list. return [list(p) for p in permutations(lst)]"},{"question":"Create a function that checks if a given string is a palindrome. A palindrome is a string that reads the same backward as forward, such as \\"madam\\" or \\"racecar\\". The function should be case-insensitive and ignore spaces. For example, \\"A man a plan a canal Panama\\" is a palindrome if we consider case-insensitivity and ignore spaces.","solution":"def is_palindrome(s): Returns True if the given string is a palindrome, ignoring case and spaces. # Remove spaces and convert to lowercase cleaned_s = ''.join(s.split()).lower() # Check if the cleaned string is equal to its reverse return cleaned_s == cleaned_s[::-1]"},{"question":"Create a function that generates a list of the first \`n\` Fibonacci numbers. The function should consider the first two Fibonacci numbers to be 0 and 1, respectively.","solution":"def fibonacci(n): Generates a list of the first n Fibonacci numbers. Args: n (int): The number of Fibonacci numbers to generate. Returns: list: A list containing the first n Fibonacci numbers. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fib_sequence = [0, 1] while len(fib_sequence) < n: fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"Create a function that returns the number of times a substring appears in a string, regardless of case. For example, if we call the function with the parameters \\"Hello\\", \\"o\\", the function should return 1. If we call it with the parameters \\"Hello\\", \\"O\\", the function should also return 1. If we call it with the parameters \\"Hello\\", \\"llo\\", the function should return 1. However, if we call it with the parameters \\"Hello\\", \\"world\\", the function should return 0. The function should work for large strings and substrings efficiently. You can use Python for this coding question.","solution":"def count_substring_occurrences(main_str, sub_str): Returns the number of times sub_str appears in main_str, regardless of case. main_str_lower = main_str.lower() sub_str_lower = sub_str.lower() return main_str_lower.count(sub_str_lower)"},{"question":"Create a function that converts all the letters in a given text to uppercase.","solution":"def to_uppercase(text): Converts all the letters in the given text to uppercase. :param text: The input string to convert :return: The converted string with all letters in uppercase return text.upper()"},{"question":"Create a function that takes a string as input and returns the reverse of that string. The function should handle any string input and should utilize a stack data structure to perform the reversal. Ensure the function is named \`reverseString\` and is implemented in Python.","solution":"def reverseString(s): Returns the reverse of the input string using a stack data structure. stack = [] for char in s: stack.append(char) reversed_string = \\"\\" while stack: reversed_string += stack.pop() return reversed_string"},{"question":"Create a function that identifies the smallest and largest numbers in an array along with their positions. Your function should return a dictionary where the keys \\"min\\" and \\"max\\" contain arrays with the minimum number, its position, the maximum number, and its position respectively. For an empty or null array, return an object with the key \\"error\\" set to \\"Array is empty or null\\".","solution":"def find_min_max(arr): Returns a dictionary with the smallest and largest numbers and their positions in the array. The dictionary has keys \\"min\\" and \\"max\\" with the corresponding arrays [number, position]. If the input array is null or empty, returns {\\"error\\": \\"Array is empty or null\\"}. if arr is None or len(arr) == 0: return {\\"error\\": \\"Array is empty or null\\"} min_num = min(arr) max_num = max(arr) min_pos = arr.index(min_num) max_pos = arr.index(max_num) return { \\"min\\": [min_num, min_pos], \\"max\\": [max_num, max_pos] }"},{"question":"Create a function that takes a string and returns the number of words in the sentence. A word is defined as a group of characters separated by spaces. Assume that the sentence does not contain any punctuation or other special characters.","solution":"def count_words(sentence): Returns the number of words in the given sentence. A word is defined as a group of characters separated by spaces. words = sentence.split() return len(words)"},{"question":"Create a function that takes a string \`str\` as input and returns the string with all the vowels removed.","solution":"def remove_vowels(s): Removes all vowels from the input string s. Parameters: s (str): Input string from which vowels need to be removed. Returns: str: String with all vowels removed. vowels = 'aeiouAEIOU' return ''.join(char for char in s if char not in vowels)"},{"question":"Create a function that will compute the square root of a given non-negative integer using the Newton-Raphson method (also known as Heron's method). The function should take a non-negative integer as input and return the square root, also as an integer, rounded down to the nearest whole number. If the input is not a non-negative integer, the function should return None.","solution":"def newton_sqrt(x): Compute the square root of a given non-negative integer using the Newton-Raphson method. Parameters: x (int): A non-negative integer Returns: int: The square root of x, rounded down to the nearest whole number, or None if input is invalid if not isinstance(x, int) or x < 0: return None if x == 0: return 0 guess = x while True: next_guess = (guess + x // guess) // 2 if next_guess >= guess: return guess guess = next_guess"},{"question":"Create a function that checks if a given number is a perfect cube. For a number to be a perfect cube, there exists an integer k such that \`k^3 = n\`. The function should return \`True\` if \`n\` is a perfect cube, and \`False\` otherwise.","solution":"def is_perfect_cube(n): Check if a given number n is a perfect cube. if n < 0: n = -n k = round(n ** (1/3)) return k**3 == n"},{"question":"Create a function that takes an integer array and a target number as inputs, and uses the Quick Sort algorithm to sort the array and then searches for the target number in the sorted array. If the target is found, return its index; otherwise, return -1.","solution":"def quick_sort(arr): Quick Sort algorithm implementation. if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quick_sort(left) + middle + quick_sort(right) def binary_search(arr, target): Binary Search algorithm implementation. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1 def sort_and_search(arr, target): Sort the array using Quick Sort and search the target using Binary Search. sorted_arr = quick_sort(arr) return binary_search(sorted_arr, target)"},{"question":"Create a function that takes two inputs, a string and an integer, and returns the string repeated the number of times specified by the integer. If the integer is not positive, the function should return an empty string.","solution":"def repeat_string(s, n): Returns the string \`s\` repeated \`n\` times. If \`n\` is not positive, returns an empty string. if n > 0: return s * n return \\"\\""},{"question":"Create a function that takes a string as input and returns the string with all characters removed that are not letters (either uppercase or lowercase). How can this be achieved in Python?","solution":"def remove_non_letters(s): Removes all characters from the input string that are not letters (A-Z, a-z). Parameters: s (str): Input string Returns: str: String with non-letter characters removed return ''.join(filter(str.isalpha, s))"},{"question":"Create a function that takes a string as input and returns the string with all vowels capitalized. For example, if the input is \\"hello world\\", the output should be \\"hEllO wOrld\\" given that vowels are \\"a\\", \\"e\\", \\"i\\", \\"o\\", \\"u\\" (both lowercase and uppercase). Vowels in the input string that are already capitalized should remain capitalized.","solution":"def capitalize_vowels(s): Returns the input string with all vowels capitalized. Parameters: s (str): The input string. Returns: str: The modified string with all vowels capitalized. vowels = \\"aeiouAEIOU\\" result = '' for char in s: if char in vowels: result += char.upper() else: result += char return result"},{"question":"Create a function that takes a string and returns a list of words separated by spaces.","solution":"def split_into_words(string): Takes a string and returns a list of words separated by spaces. return string.split()"},{"question":"Create a function that takes an array of integers and returns an array with each element multiplied by its corresponding index.","solution":"def multiply_by_index(arr): Returns an array where each element is the product of the original element and its index. return [value * index for index, value in enumerate(arr)]"},{"question":"Create a function that calculates the prime factors of a number. The function should return a list of prime factors, not including duplicates, and sorted in ascending order.","solution":"def prime_factors(n): Returns a sorted list of unique prime factors of the given number n. i = 2 factors = set() while i * i <= n: if n % i: i += 1 else: n //= i factors.add(i) if n > 1: factors.add(n) return sorted(factors)"},{"question":"Create a function that takes as input a list of integers and returns a new list where each element is the sum of adjacent elements from the input list. For example, if the input list is [1, 2, 3, 4], the output should be [3, 5, 7].","solution":"def sum_adjacent_elements(lst): Takes a list of integers and returns a new list where each element is the sum of adjacent elements from the input list. Args: lst (list of int): The input list of integers. Returns: list of int: A new list with each element being the sum of adjacent elements from the input list. if not lst or len(lst) < 2: return [] return [lst[i] + lst[i + 1] for i in range(len(lst) - 1)]"},{"question":"Create a function that takes an integer as an input, then prints out whether it is divisible by 3 or not. If the number is divisible by 3, the function should return \`True\`, otherwise, it should return \`False\`.","solution":"def is_divisible_by_3(number): Checks whether the given number is divisible by 3 or not. Parameters: number (int): The integer to check for divisibility by 3. Returns: bool: True if the number is divisible by 3, False otherwise. return number % 3 == 0"},{"question":"Create a function that generates the nth Fibonacci number. The Fibonacci sequence is a series of numbers in which each number is the sum of the two preceding ones, usually starting with 0 and 1. For example, the first several numbers in the Fibonacci sequence are 0, 1, 1, 2, 3, 5, 8, 13, 21, and so on. Implement the function using recursion.","solution":"def fibonacci(n): Returns the nth Fibonacci number using recursion. if n == 0: return 0 elif n == 1: return 1 else: return fibonacci(n - 1) + fibonacci(n - 2)"},{"question":"Create a function that restructures a dictionary from a list of tuples. Each tuple contains three elements: a key, a subkey, and a value. The function should convert this into a nested dictionary structure in Python. If a tuple with the same key and subkey already exists, the value should be updated with the new value. If it doesn't exist, it should be added to the nested dictionary. Finally, the function should return the nested dictionary.","solution":"def restructure_dict(tuples_list): Convert a list of tuples (key, subkey, value) into a nested dictionary. Args: tuples_list (list): List of tuples where each tuple contains (key, subkey, value) Returns: dict: Nested dictionary with keys and subkeys. nested_dict = {} for key, subkey, value in tuples_list: if key not in nested_dict: nested_dict[key] = {} nested_dict[key][subkey] = value return nested_dict"},{"question":"Create a function that takes an integer as an input and returns a string that is the binary representation of the number. The function should also convert the binary string into a list of integers, where each integer represents a bit (0 or 1). The function should handle numbers from 0 to 255.","solution":"def integer_to_binary_representation(n): Converts an integer to a binary string representation and then to a list of integers. Args: n (int): An integer between 0 and 255 inclusive. Returns: List[int]: A list of integers representing the binary bits of the input integer. if not (0 <= n <= 255): raise ValueError(\\"Input must be between 0 and 255 inclusive.\\") binary_str = bin(n)[2:].zfill(8) return [int(bit) for bit in binary_str]"},{"question":"Create a function that takes a list of positive integers and returns the smallest integer that can be formed by using any combination of these numbers. For example, if the input is [3, 30, 34, 5, 9], the smallest number that can be formed is 3033459.","solution":"from itertools import permutations def smallest_combination(nums): Returns the smallest integer that can be formed by using any combination of the list of integers. # Convert all numbers to strings for comparison str_nums = list(map(str, nums)) # Generate all permutations of the numbers permuted_numbers = map(\\"\\".join, permutations(str_nums)) # Find the minimum number return min(permuted_numbers, key=int)"},{"question":"Create a function that accepts an integer and returns a boolean indicating whether the integer is an even number. An even number is an integer that is exactly divisible by 2 and has a remainder of zero when divided by 2.","solution":"def is_even(n): Returns True if n is an even number, otherwise returns False. An even number is an integer that is exactly divisible by 2. return n % 2 == 0"},{"question":"Create a function that will return the sum of numbers within a given list. The list could contain both positive and negative integers, as well as floating point numbers. The function should be robust to handle the case where the list is empty, returning 0 in such a situation.","solution":"def sum_of_list(numbers): Returns the sum of numbers in the list. If the list is empty, returns 0. return sum(numbers)"},{"question":"Create a function that reverses the order of words in a given string. The function should also handle any leading, trailing, and multiple consecutive spaces between words correctly. For example, the input string \\" python programming language \\" should return \\"language programming python\\".","solution":"def reverse_words(s): Reverses the order of words in a given string, handling leading, trailing, and multiple consecutive spaces. Args: s (str): The input string with words to reverse. Returns: str: A string with the words in reverse order. # Split the string by spaces while removing extra spaces and reverse the list of words words = s.strip().split() reversed_words = ' '.join(reversed(words)) return reversed_words"},{"question":"Create a function that calculates the sum of all elements in a given 2D array. The array is represented as a list of lists in Python. Each inner list represents a row in the 2D array. The function should handle an array of any size.","solution":"def sum_2d_array(array): Calculate the sum of all elements in a given 2D array. Args: array (list of list of int/float): The 2D array represented as a list of lists. Returns: int/float: The sum of all elements in the 2D array. total_sum = 0 for row in array: total_sum += sum(row) return total_sum"},{"question":"Create a function that toggles the case of each character in a given string. For example, if the input is \\"Coding\\", the output should be \\"cODING\\".","solution":"def toggle_case(s): Toggles the case of each character in the given string s. return ''.join([char.lower() if char.isupper() else char.upper() for char in s])"},{"question":"Create a function that takes an integer as input and returns a boolean value indicating whether the number is a power of two. A number is a power of two if it can be expressed as 2 raised to the power of some integer n.","solution":"def is_power_of_two(n): Returns True if the input integer n is a power of two, otherwise False. Parameters: n - integer to be checked Return: boolean - True if n is a power of two, else False if n < 1: return False return (n & (n - 1)) == 0"},{"question":"Create a function that determines if a given binary string (representing a bitwise AND operation result) can be represented as a single bit.","solution":"def is_single_bit(binary_string): Determines if the given binary string can be represented as a single bit (either '0' or '1'). :param binary_string: Input binary string :return: True if the binary string can be represented as a single bit, False otherwise return binary_string in ('0', '1')"},{"question":"Create a function that takes two arguments, both of which are lists of numbers, and returns a new list that contains only the elements that are common to both input lists. In the returned list, each element should appear only once, even if it appears multiple times in the input lists.","solution":"def common_elements(list1, list2): Returns a list of elements that are common to both list1 and list2. Each element in the returned list appears only once. return list(set(list1).intersection(list2))"},{"question":"Create a function that takes a DataFrame and returns a new DataFrame with the first BeautifulSoup object it finds in each row. If the BeautifulSoup object is not found, it should return NaN in that row. Assume the DataFrame contains text data that you need to parse.","solution":"import pandas as pd from bs4 import BeautifulSoup import numpy as np def extract_first_soup(df): This function takes a DataFrame and returns a new DataFrame with the first BeautifulSoup object found in each row. If a BeautifulSoup object is not found, it returns NaN in that row. def find_first_soup(row): # Parse the row with BeautifulSoup soup = BeautifulSoup(row, 'html.parser') # Find the first tag first_tag = soup.find(True) # If a tag is found, return its string representation, otherwise return NaN return str(first_tag) if first_tag else np.nan # Apply the function to each row in the DataFrame and return the result as a new DataFrame return df.applymap(find_first_soup)"},{"question":"Create a function that checks if a number is a perfect square. If it is, return the square root of that number, otherwise, return the number itself.","solution":"import math def check_perfect_square(num): Checks if a number is a perfect square. If it is, return the square root of that number, otherwise, return the number itself. if num < 0: return num sqrt_num = math.isqrt(num) if sqrt_num * sqrt_num == num: return sqrt_num else: return num"},{"question":"Create a function that takes a string and returns a new string with each character's ASCII value incremented by 1.","solution":"def increment_ascii(input_string): Returns a new string with each character's ASCII value incremented by 1. return ''.join(chr(ord(char) + 1) for char in input_string)"},{"question":"Create a function that calculates the area of a triangle given its base and height. Write the function in Python.","solution":"def triangle_area(base, height): Calculates the area of a triangle given its base and height. Parameters: base (float): The base of the triangle height (float): The height of the triangle Returns: float: The area of the triangle return 0.5 * base * height"},{"question":"Create a function that takes a string input and returns the reverse of the string. For example, \`reverse_string(\\"hello\\")\` should return \`\\"olleh\\"\`.","solution":"def reverse_string(s): Takes a string input and returns the reverse of the string. return s[::-1]"},{"question":"Create a function that takes a string as input and returns the number of words in the string. Words are defined as sequences of characters separated by whitespace. If the input string is empty, the function should return 0.","solution":"def count_words(s): Returns the number of words in the input string s. Words are defined as sequences of characters separated by whitespace. if not s.strip(): return 0 return len(s.split())"},{"question":"Create a function that takes a list of integers and an integer \`k\` as input and returns the \`k\` smallest integers from the given list. The integers in the returned list should be sorted in ascending order.","solution":"def k_smallest_numbers(lst, k): Returns the k smallest integers from the given list sorted in ascending order. Parameters: lst (list): The list of integers. k (int): The number of smallest integers to return. Returns: list: The k smallest integers in ascending order. if k <= 0: return [] sorted_lst = sorted(lst) return sorted_lst[:k]"},{"question":"Create a function that performs logical operations on two input integers using their binary representations. Specifically, it should check if the two integers have the same parity. Parity refers to whether the number of 1s in their binary representation is even or odd (even parity if the count of 1s is even, odd parity if the count of 1s is odd).","solution":"def have_same_parity(a, b): Returns True if the two input integers have the same parity (same count of 1s in their binary representation being even or odd), otherwise returns False. def parity(number): return bin(number).count('1') % 2 return parity(a) == parity(b)"},{"question":"Create a function that takes in a list of strings and returns a new list containing the length of each string. For example, if the input list is [\\"hello\\", \\"world\\", \\"goodbye\\"], the output list would be [5, 5, 5].","solution":"def string_lengths(strings): Takes a list of strings and returns a list with the lengths of each string. :param strings: List of strings :return: List of integers representing the lengths of each string return [len(string) for string in strings]"},{"question":"Create a function that takes in an integer \`n\` and returns the sum of the first \`n\` Fibonacci numbers. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1.","solution":"def sum_fibonacci(n): Calculate the sum of the first n Fibonacci numbers. Parameters: n (int): The number of Fibonacci numbers to sum up. Returns: int: The sum of the first n Fibonacci numbers. if n <= 0: return 0 fib_sequence = [0, 1] while len(fib_sequence) < n: next_fib = fib_sequence[-1] + fib_sequence[-2] fib_sequence.append(next_fib) return sum(fib_sequence[:n])"},{"question":"Create a function that generates a sequence of numbers based on then argument passed. If the parameter n is negative, the function should generate a sequence of numbers from n to 0. If n is a positive integer, it should generate a sequence of numbers from 1 to n. The function should return the generated sequence as a string. For example, if n is 5, the output should be \\"1 2 3 4 5\\". If n is -3, the output should be \\"-3 -2 -1 0\\". If n is 0, the output should be \\"0\\".","solution":"def generate_sequence(n): Generates a sequence of numbers based on the argument passed. If n is negative, generates a sequence from n to 0. If n is positive, generates a sequence from 1 to n. If n is 0, returns \\"0\\". Args: n (int): The boundary of the sequence. Returns: str: The generated sequence as a string. if n == 0: return \\"0\\" elif n > 0: return \\" \\".join(map(str, range(1, n + 1))) else: return \\" \\".join(map(str, range(n, 1)))"},{"question":"Create a function that takes in a list of integers and an integer \`k\`, and returns the \`k\` smallest elements from the list. The function should work correctly even if \`k\` is greater than the length of the list (\`k > len(list)\`). In such cases, return all elements in the list sorted in ascending order.","solution":"def k_smallest_elements(lst, k): Returns the k smallest elements from the list. If k is greater than the length of the list, returns all the elements sorted in ascending order. if k >= len(lst): return sorted(lst) else: return sorted(lst)[:k]"},{"question":"Create a function that takes a list of numbers as input and returns the largest number in the list. However, if the list contains any negative numbers, the function should return the negative number closest to zero (i.e., the least negative value). If the list is empty, the function should return None.","solution":"def process_numbers(num_list): Takes a list of numbers as input and returns the largest number in the list. However, if the list contains any negative numbers, the function returns the negative number closest to zero. If the list is empty, returns None. if not num_list: return None negative_numbers = [num for num in num_list if num < 0] if negative_numbers: return max(negative_numbers) return max(num_list)"},{"question":"Create a function that takes in a string and returns a bool value indicating whether the string is a palindrome or not. A palindrome is a string that reads the same both forwards and backwards, ignoring case and non-alphanumeric characters.","solution":"import re def is_palindrome(s): Checks if the given string is a palindrome. A palindrome reads the same forwards and backwards, ignoring case and non-alphanumeric characters. Parameters: s (str): The input string. Returns: bool: True if the string is a palindrome, False otherwise. # Removing non-alphanumeric characters and converting to lower case cleaned = re.sub(r'[^a-zA-Z0-9]', '', s).lower() # Checking if the cleaned string is equal to its reverse return cleaned == cleaned[::-1]"},{"question":"Create a function that takes in an array of integers, and returns the second largest number. How would you approach this problem?","solution":"def second_largest(nums): Return the second largest number in the array nums. if len(nums) < 2: raise ValueError(\\"Array must contain at least two elements\\") # Initialize the two largest values first_largest = second_largest = float('-inf') for num in nums: if num > first_largest: second_largest = first_largest first_largest = num elif first_largest > num > second_largest: second_largest = num if second_largest == float('-inf'): raise ValueError(\\"Array must contain at least two distinct elements\\") return second_largest"},{"question":"Create a function that can take in two parameters - a sorted list and a target value, and return the index of the target value. If the target value is not in the list, return -1. Use binary search.","solution":"def binary_search(sorted_list, target): Returns the index of the target value in the sorted list using binary search. If the target value is not in the list, returns -1. left, right = 0, len(sorted_list) - 1 while left <= right: mid = (left + right) // 2 if sorted_list[mid] == target: return mid elif sorted_list[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Create a function that takes an array of integers and returns the maximum sum of a contiguous subarray. This is a variation of Kadane's Algorithm problem, where we aim to find the subarray with the largest sum, potentially containing positive and negative integers.","solution":"def max_subarray_sum(nums): Returns the maximum sum of a contiguous subarray. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that takes a string representing a decimal number and returns the binary representation of that number, as a string.","solution":"def decimal_to_binary(decimal_str): Converts a decimal number (given as a string) to its binary representation. Parameters: decimal_str (str): A string representing a decimal number. Returns: str: The binary representation of the decimal number. decimal_number = int(decimal_str) return bin(decimal_number)[2:]"},{"question":"Create a function that takes a list of dictionaries and returns a new list with dictionaries that have specific keys.","solution":"def filter_dicts(dict_list, required_keys): Filters a list of dictionaries to include only those that have all the specified keys. :param dict_list: List of dictionaries. :param required_keys: List of keys that must be present in the dictionaries. :return: List of dictionaries that contain all the required keys. return [d for d in dict_list if all(key in d for key in required_keys)]"},{"question":"Create a function that prints the first 'n' Fibonacci numbers. The function should take a single integer 'n' as input and print the first 'n' Fibonacci numbers. Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones.","solution":"def print_fibonacci(n): Prints the first 'n' Fibonacci numbers. if n <= 0: return [] fibonacci_sequence = [] a, b = 0, 1 for _ in range(n): fibonacci_sequence.append(a) a, b = b, a + b return fibonacci_sequence"},{"question":"Create a function that , given a list of integers, returns the index of the first occurrence of a number that is both even and greater than 10. If no such number exists, return -1.","solution":"def find_even_greater_than_10(nums): Returns the index of the first occurrence of a number that is both even and greater than 10. If no such number exists, returns -1. :param nums: List of integers. :return: Index of the first even number greater than 10, or -1 if none exist. for index, num in enumerate(nums): if num > 10 and num % 2 == 0: return index return -1"},{"question":"Create a function that returns the most frequent value in a list. If there are multiple most frequent values, return all of them in the order they appear in the input list.","solution":"from collections import Counter def most_frequent(lst): Returns the most frequent value(s) in the list. If there are multiple most frequent values, returns all of them in the order they appear in the input list. if not lst: return [] count = Counter(lst) max_frequency = max(count.values()) most_freq_elems = [item for item in lst if count[item] == max_frequency] # Removing duplicates while maintaining order result = [] seen = set() for item in most_freq_elems: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Create a function that takes a string of space-separated numbers and returns a new string with the numbers sorted in descending order.","solution":"def sort_numbers_desc(s): Takes a string of space-separated numbers and returns a new string with the numbers sorted in descending order. # Split the input string into a list of numbers (as strings) numbers = s.split() # Convert the list of strings to a list of integers numbers = list(map(int, numbers)) # Sort the list of integers in descending order numbers.sort(reverse=True) # Convert the sorted list of integers back to a list of strings sorted_numbers_str = list(map(str, numbers)) # Join the list of strings into a single space-separated string and return it return ' '.join(sorted_numbers_str)"},{"question":"Create a function that takes a string of parentheses and determines if it's balanced. The string is guaranteed to contain only parentheses. A string is considered balanced if every opening parenthesis has a corresponding closing parenthesis in the correct order. Your solution should be efficient and easy to understand.","solution":"def is_balanced_parentheses(s): This function determines if a string of parentheses is balanced. A string is considered balanced if every opening parenthesis has a corresponding closing parenthesis in the correct order. stack = [] for char in s: if char == '(': stack.append(char) elif char == ')': if len(stack) == 0: return False stack.pop() return len(stack) == 0"},{"question":"Create a function that checks if a given input is a palindrome. If it is, return true. If not, return false. Additionally, the function should ignore non-alphanumeric characters and be case-insensitive.","solution":"def is_palindrome(input_str): Checks if the given input is a palindrome, ignoring non-alphanumeric characters and case-insensitive. Parameters: input_str (str): The input string to be checked. Returns: bool: True if the input string is a palindrome, False otherwise. import re cleaned_str = re.sub(r'[^A-Za-z0-9]', '', input_str).lower() return cleaned_str == cleaned_str[::-1]"},{"question":"Create a function that takes two lists as input, where each list contains pairs of elements. The function should return a new list containing pairs where each pair is maximally paired according to the alignment of elements in both lists. For example, if the elements in the corresponding positions of both lists are equal, then they are considered maximally paired. If the elements in the corresponding positions of both lists are not equal, then the pair containing the larger element is retained.","solution":"def maximize_pairing(list1, list2): Takes two lists of pairs and returns a new list containing pairs where each pair is maximally paired. if len(list1) != len(list2): raise ValueError(\\"Both lists must be of the same length\\") result = [] for pair1, pair2 in zip(list1, list2): maximized_pair = ( max(pair1[0], pair2[0]), max(pair1[1], pair2[1]) ) result.append(maximized_pair) return result"},{"question":"Create a function that accepts a list of integers as input. The function should return a new list with each element rounded to the nearest multiple of 10.","solution":"def round_to_nearest_10(lst): Rounds each element in the list to the nearest multiple of 10. Parameters: lst (list): A list of integers. Returns: list: A new list with integers rounded to the nearest multiple of 10. return [round(x / 10) * 10 for x in lst]"},{"question":"Create a function that , given two lists \`lst1\` and \`lst2\`, returns a new list containing the elements that are common to both lists. The function should be case-sensitive and return the common elements in the order they first appear in \`lst1\`. If there are no common elements, the function should return an empty list.","solution":"def common_elements(lst1, lst2): Returns a list containing the elements that are common to both lst1 and lst2. The elements in the resulting list are ordered as they first appear in lst1. The comparison is case-sensitive. common = [element for element in lst1 if element in lst2] return common"},{"question":"Create a function that utilizes the dictionary data structure to count the number of occurrences of each character in a given string and return a dictionary with the character as the key and its occurrence as the value.","solution":"def count_characters(s): Returns a dictionary with the character as the key and its occurrence as the value. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count"},{"question":"Create a function that takes in a string and a list of characters to remove from the string. Return the new string without those characters.","solution":"def remove_characters(input_string, chars_to_remove): Removes all occurrences of the characters specified in chars_to_remove from input_string. Args: input_string (str): The original string. chars_to_remove (list): The list of characters to remove from the string. Returns: str: The modified string with specified characters removed. return ''.join(c for c in input_string if c not in chars_to_remove)"},{"question":"Create a function that takes two arrays of integers as input and returns their sum. The function should handle multi-dimensional arrays and return the sum of all elements in both arrays.","solution":"import numpy as np def sum_arrays(arr1, arr2): Returns the sum of all elements in the two input arrays. Parameters: arr1 (array-like): First input array. arr2 (array-like): Second input array. Returns: int: The sum of all elements in both input arrays. return np.sum(arr1) + np.sum(arr2)"},{"question":"Create a function that takes an integer list as a parameter and returns the maximum value in the list. If the list is empty, the function should return -1.","solution":"def max_value(lst): Returns the maximum value in the list. If the list is empty, returns -1. if not lst: return -1 return max(lst)"},{"question":"Create a function that takes a sorted list of integers without duplicates and returns a set of all possible subsets of these integers. The function should handle negative integers and empty list as well.","solution":"def subsets(nums): Returns a set of all possible subsets of the sorted list of integers \`nums\`. result = [[]] for num in nums: result += [curr + [num] for curr in result] # Convert list of lists to a set of tuples for immutability and set operations return set(tuple(sorted(subset)) for subset in result)"},{"question":"Create a function that checks if a string \`s\` contains a valid JSON object and returns \`true\` if it does, otherwise \`false\`. Ensure your function works efficiently with both small and large strings.","solution":"import json def is_valid_json(s): Checks if the provided string s is a valid JSON object. Args: s (str): The string to be checked. Returns: bool: True if s is a valid JSON object, False otherwise. try: json.loads(s) return True except ValueError: return False"},{"question":"Create a function that reverses the characters in each word of a given string, but keeps the order of the words unchanged. The function should ignore non-alphabetic characters and maintain them in their original positions.","solution":"def reverse_characters_in_words(s): Reverses the characters in each word of a given string, but keeps the order of the words unchanged. The function should ignore non-alphabetic characters and maintain them in their original positions. def reverse_word(word): chars = list(word) left, right = 0, len(chars) - 1 while left < right: while left < right and not chars[left].isalpha(): left += 1 while left < right and not chars[right].isalpha(): right -= 1 if left < right: chars[left], chars[right] = chars[right], chars[left] left += 1 right -= 1 return ''.join(chars) words = s.split(' ') reversed_words = [reverse_word(word) for word in words] return ' '.join(reversed_words)"},{"question":"Create a function that converts humidity from percentage to grams per cubic meter (g/m³). The formula to convert percentage to grams per cubic meter is: grams per cubic meter = percentage * 2.58","solution":"def humidity_to_grams_per_cubic_meter(percentage): Converts humidity from percentage to grams per cubic meter (g/m³). Parameters: percentage (float): Relative humidity percentage. Returns: float: Humidity in grams per cubic meter (g/m³). return percentage * 2.58"},{"question":"Create a function that will take in an array of integers and return the sum of all the even numbers in the array. If there are no even numbers, return 0. Additionally, the function should ignore negative numbers and numbers not in the range [0, 100].","solution":"def sum_of_even_numbers(arr): Returns the sum of all even numbers in the array that are within the range [0, 100]. Ignores negative numbers and numbers not in the specified range. return sum(num for num in arr if num % 2 == 0 and 0 <= num <= 100)"},{"question":"Create a function that calculates the area of a circle given its diameter. The function should be named \`calculateCircleArea\` and take a single parameter, \`diameter\`.","solution":"import math def calculateCircleArea(diameter): Calculates the area of a circle given its diameter. :param diameter: The diameter of the circle. :return: The area of the circle. radius = diameter / 2 area = math.pi * (radius ** 2) return area"},{"question":"Create a function that checks if a given string is a palindrome outside a specific substring. For example, after removing everything except the letters a, b, and c from the string \\"abcba123\\", the remaining string \\"abcba\\" is a palindrome.","solution":"def is_palindrome_outside_specific_substring(s, chars=\\"abc\\"): Checks if a given string is a palindrome when considering only specified characters. Parameters: s (str): The input string to check. chars (str): A string containing the characters to consider. Returns: bool: True if the filtered string is a palindrome, False otherwise. filtered_string = ''.join([char for char in s if char in chars]) return filtered_string == filtered_string[::-1]"},{"question":"Create a function that iterates through a dictionary and prints all keys and their corresponding values.","solution":"def print_dict_contents(d): Iterates through the dictionary and prints all keys and their corresponding values. for key, value in d.items(): print(f\\"{key}: {value}\\")"},{"question":"Create a function that takes an array of integers, reverses the order of elements and returns the reversed array. You should reverse the elements in-place (i.e., without creating a new array).","solution":"def reverse_array(arr): Reverses the order of elements in the array in-place. Parameters: arr (list of int): The array to be reversed. Returns: list of int: The reversed array. left, right = 0, len(arr) - 1 while left < right: arr[left], arr[right] = arr[right], arr[left] left += 1 right -= 1 return arr"},{"question":"Create a function that takes a list of integers and returns the third largest number in the list. If the list does not have a third largest unique number, return None.","solution":"def third_largest(nums): Returns the third largest unique number in a list of integers. If the list does not have a third largest unique number, return None. unique_nums = list(set(nums)) if len(unique_nums) < 3: return None unique_nums.sort(reverse=True) return unique_nums[2]"},{"question":"Create a function that takes in a number as a parameter and returns the number of distinct prime factors of that number.","solution":"def count_distinct_prime_factors(n): Returns the number of distinct prime factors of n. if n < 2: return 0 count = 0 i = 2 while i * i <= n: if n % i == 0: count += 1 while n % i == 0: n //= i i += 1 if n > 1: count += 1 return count"},{"question":"Create a function that takes two lists of integers, \`list1\` and \`list2\`, and returns a new list that is the concatenation of \`list1\` and \`list2\`. Ensure the function handles large lists efficiently and maintains the order of elements from both lists.","solution":"def concatenate_lists(list1, list2): Returns the concatenation of two lists, list1 and list2. return list1 + list2"},{"question":"Create a function that checks if a given string contains any duplicate characters. The function should return True if there are duplicates and False otherwise.","solution":"def has_duplicate_characters(s): Returns True if the string s contains any duplicate characters, False otherwise. seen = set() for char in s: if char in seen: return True seen.add(char) return False"},{"question":"Create a function that accepts a dictionary and returns a new dictionary with all the values doubled.","solution":"def double_values(input_dict): Returns a new dictionary with all the values doubled. return {k: v * 2 for k, v in input_dict.items()}"},{"question":"Create a function that takes a list of integers and returns a new list of integers sorted in a specific order. The function should_accept an additional parameter \`direction\` to determine whether the sorting should be in ascending or descending order. The function call \`sort_numbers([5, 3, 9, 1, 10], 'ascending')\` should return \`[1, 3, 5, 9, 10]\`, and the function call \`sort_numbers([5, 3, 9, 1, 10], 'descending')\` should return \`[10, 9, 5, 3, 1]\`.","solution":"def sort_numbers(numbers, direction): Sorts a list of integers in ascending or descending order based on the direction provided. Parameters: numbers (list of int): List of integers to sort. direction (str): 'ascending' or 'descending' to determine the sort order. Returns: list of int: Sorted list of integers. if direction == 'ascending': return sorted(numbers) elif direction == 'descending': return sorted(numbers, reverse=True) else: raise ValueError(\\"direction must be 'ascending' or 'descending'\\")"},{"question":"Create a function that takes a string and returns a new string that is the reverse of the input string. Also, ensure the function skips any non-alphabetic characters when reversing the string.","solution":"def reverse_alphabetic(input_str): Returns a new string that is the reverse of the input string but only includes alphabetic characters. Non-alphabetic characters are ignored. # Filter only alphabetic characters and reverse the list reversed_alpha_chars = [char for char in input_str if char.isalpha()][::-1] # Placeholder for the result list result = [] # Iterator for the reversed alphabetic characters alpha_iter = iter(reversed_alpha_chars) # Reconstruct the string with non-alphabetic characters in original positions for char in input_str: if char.isalpha(): result.append(next(alpha_iter)) else: result.append(char) return ''.join(result)"},{"question":"Create a function that generates a Fibonacci sequence up to a given number n. The function should return the sequence as an array.","solution":"def fibonacci_sequence(n): Generates a Fibonacci sequence up to a given number n. Returns the sequence as a list. if n <= 0: return [] elif n == 1: return [0] seq = [0, 1] while True: next_value = seq[-1] + seq[-2] if next_value >= n: break seq.append(next_value) return seq"},{"question":"Create a function that takes in two integers and returns the smallest number. If the two numbers are equal, return one of them.","solution":"def find_smallest(a, b): Returns the smallest of the two integers provided. If both integers are equal, returns one of them. return a if a < b else b"},{"question":"Create a function that converts the first letter of a string to uppercase and the rest to lowercase. For example, input 'goodMorning' should return 'Goodmorning'.","solution":"def capitalize_first_letter(s): Converts the first letter of the string to uppercase and the rest of the letters to lowercase. Parameters: s (str): input string Returns: str: formatted string with the first letter uppercase and the rest lowercase if not s: return s return s[0].upper() + s[1:].lower()"},{"question":"Create a function that takes a sorted array of integers and removes all duplicates, returning an array containing only unique elements in the same order.","solution":"def remove_duplicates(sorted_array): Removes duplicates from a sorted array and returns an array of unique elements. :param sorted_array: List of sorted integers with possible duplicates. :return: List of unique integers in the same order. if not sorted_array: return [] unique_array = [sorted_array[0]] for num in sorted_array[1:]: if num != unique_array[-1]: unique_array.append(num) return unique_array"},{"question":"Create a function that takes in an array of integers and returns a new list containing only the even numbers. Additionally, the function should sort the returned list in ascending order. If there are no even numbers in the input array, the function should return an empty list.","solution":"def even_sorted(nums): Returns a sorted list containing only the even numbers from the input list 'nums'. If there are no even numbers, returns an empty list. evens = [num for num in nums if num % 2 == 0] return sorted(evens)"},{"question":"Create a function that generates the Fibonacci sequence up to a given number n. The sequence should include all numbers that are less than or equal to n.","solution":"def fibonacci_up_to_n(n): Generates a list of Fibonacci numbers up to a given number n. This list will include all numbers that are less than or equal to n. if n < 0: return [] sequence = [] a, b = 0, 1 while a <= n: sequence.append(a) a, b = b, a + b return sequence"},{"question":"Create a function that takes in two numbers and compares them. If the first number is greater than the second number, return 1. If the first number is less than the second number, return -1. If the two numbers are equal, return 0.","solution":"def compare_numbers(a, b): Compares two numbers and returns: - 1 if a > b - -1 if a < b - 0 if a == b if a > b: return 1 elif a < b: return -1 else: return 0"},{"question":"Create a function that takes a string and returns the count of vowels and consonants in the string.","solution":"def count_vowels_consonants(s): Returns a tuple containing the count of vowels and consonants in the string. vowels = 'AEIOUaeiou' s = s.replace(\\" \\", \\"\\") # remove spaces vowel_count = sum(1 for char in s if char in vowels) consonant_count = sum(1 for char in s if char.isalpha() and char not in vowels) return vowel_count, consonant_count"},{"question":"Create a function that takes in a list of integers and returns a tuple containing the total number of even and odd numbers in the list. For example, given the list [1, 2, 3, 4, 5], the function should return (2, 3) because 2 even numbers (2, 4) and 3 odd numbers (1, 3, 5) are present.","solution":"def count_even_odd(numbers): Returns a tuple containing the count of even and odd numbers in the input list. :param numbers: List of integers :return: Tuple (count_of_even_numbers, count_of_odd_numbers) even_count = sum(1 for number in numbers if number % 2 == 0) odd_count = sum(1 for number in numbers if number % 2 != 0) return (even_count, odd_count)"},{"question":"Create a function that takes an array of integers and returns the sum of the integers. The function should work for both positive and negative numbers. Also, handle the case where the array is empty and return 0.","solution":"def sum_of_integers(arr): Returns the sum of the integers in the array. If the array is empty, returns 0. return sum(arr)"},{"question":"Create a function that extracts the last N elements from a list in Python.","solution":"def extract_last_n_elements(lst, n): Extracts the last n elements from the list. Parameters: lst (list): The list to extract elements from. n (int): The number of elements to extract from the end of the list. Returns: list: A list containing the last n elements from the input list. if n <= 0: return [] return lst[-n:]"},{"question":"Create a function that takes an array as an argument and returns a new array containing only the unique elements from the original array. The returned array should maintain the order in which the elements first appeared in the original array.","solution":"def unique_elements(arr): Returns a new array containing only the unique elements from the original array, maintaining the order of their first appearance. seen = set() unique_arr = [] for item in arr: if item not in seen: seen.add(item) unique_arr.append(item) return unique_arr"},{"question":"Create a function that inverts a given string, which means that the function should take a string as an argument and return the string in reverse order.","solution":"def invert_string(s): Returns the given string in reverse order. return s[::-1]"},{"question":"Create a function that accepts two parameters: \`a\` and \`b\`. The function should return \`a\` divided by \`b\`. If \`b\` is zero, the function should raise a \`ZeroDivisionError\`.","solution":"def divide(a, b): Returns the result of dividing \`a\` by \`b\`. If \`b\` is zero, raises a ZeroDivisionError. if b == 0: raise ZeroDivisionError(\\"Division by zero is not allowed.\\") return a / b"},{"question":"Create a function that calculates the sum of all integers from 1 to \`n\`. How would you implement this in Python and measure its performance for different values of \`n\`?","solution":"def sum_integers(n): Returns the sum of all integers from 1 to n. return n * (n + 1) // 2 import time def measure_performance(n): Measures the performance of the sum_integers function for a given n. start_time = time.time() result = sum_integers(n) end_time = time.time() return result, end_time - start_time"},{"question":"Create a function that checks if a given string is a palindrome, considering only alphanumeric characters and ignoring cases. A string is considered a palindrome when it reads the same backward as forward.","solution":"def is_palindrome(s): Checks if the given string is a palindrome, considering only alphanumeric characters and ignoring cases. Params: s (str): The input string to be checked. Returns: bool: True if the input string is a palindrome, False otherwise. # Filter out non-alphanumeric characters and convert to lowercase filtered_chars = [char.lower() for char in s if char.isalnum()] # Check if the filtered string is equal to its reverse return filtered_chars == filtered_chars[::-1]"},{"question":"Create a function that generates a dynamic HTML form with fields based on the provided data. The function should accept a list of dictionaries, where each dictionary represents a field with keys 'type', 'label', and optionally 'options'. The function should output a string containing the HTML code for the form.","solution":"def generate_html_form(fields): Generates a dynamic HTML form based on the provided fields. :param fields: List of dictionaries, where each dictionary contains: - 'type': The type of the input field (e.g., 'text', 'select', 'radio') - 'label': The label of the input field - 'options': (Optional) List of options for 'select' or 'radio' types :return: A string containing the HTML code for the form. form_html = '<form>n' for field in fields: field_type = field.get('type') label = field.get('label') options = field.get('options', []) if field_type == 'text': form_html += f' <label>{label}:</label>n' form_html += ' <input type=\\"text\\">n' elif field_type == 'select': form_html += f' <label>{label}:</label>n' form_html += ' <select>n' for option in options: form_html += f' <option value=\\"{option}\\">{option}</option>n' form_html += ' </select>n' elif field_type == 'radio': form_html += f' <label>{label}:</label><br>n' for option in options: form_html += f' <input type=\\"radio\\" name=\\"{label}\\" value=\\"{option}\\"> {option}<br>n' form_html += '<br>n' form_html += '</form>' return form_html"},{"question":"Create a function that takes a string (text) as input and returns a dictionary that contains the frequency of each unique character in the string. Use Python to implement the solution.","solution":"def character_frequency(text): Takes a string (text) as input and returns a dictionary that contains the frequency of each unique character in the string. frequency = {} for char in text: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"Create a function that validates if a given email address is in the correct format using Python. The function should return \`True\` if the email is valid and \`False\` otherwise.","solution":"import re def validate_email(email): Validates if the given email address is in the correct format. Returns True if the email is valid, and False otherwise. email_regex = re.compile( r\\"(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+)\\" ) return bool(email_regex.match(email))"},{"question":"Create a function that takes a list of integers as input and returns a list containing the differences between consecutive elements in the input list. If the input list is empty or contains only one element, the function should return an empty list.","solution":"def differences(nums): Given a list of integers, returns a list containing the differences between consecutive elements. :param nums: List of integers :return: List of differences between consecutive elements if len(nums) < 2: return [] return [nums[i + 1] - nums[i] for i in range(len(nums) - 1)]"},{"question":"Create a function that generates a Fibonacci sequence based on the length of a user input. The function should take an integer as an argument, which represents the number of elements in the sequence. The function should return a list containing the Fibonacci sequence up to that number of elements. For example, if the input is 5, the output should be [0, 1, 1, 2, 3].","solution":"def fibonacci_sequence(n): Returns a list of the first n elements in the Fibonacci sequence. Parameters: n (int): the number of elements in the Fibonacci sequence to generate. Returns: List[int]: a list containing the first n elements of the Fibonacci sequence. if n <= 0: return [] sequence = [0, 1] for i in range(2, n): sequence.append(sequence[-1] + sequence[-2]) return sequence[:n]"},{"question":"Create a function that calculates the area of a circle given its radius. The area of a circle is given by the formula A = πr^2, where A is the area and r is the radius.","solution":"import math def circle_area(radius): Returns the area of a circle given its radius. The area is calculated using the formula A = πr^2. return math.pi * radius ** 2"},{"question":"Create a function that takes two parameters: an array of positive integers (values), and a maximum sum (max_sum). The function should return the total number of unique pairs (values[i], values[j]) in the array such that their sum is less than or equal to max_sum. Make sure to account for all possible pairs, including those where i == j.","solution":"def count_pairs(values, max_sum): Returns the total number of unique pairs (i, j) such that values[i] + values[j] <= max_sum. n = len(values) count = 0 for i in range(n): for j in range(i, n): if values[i] + values[j] <= max_sum: count += 1 return count"},{"question":"Create a function that takes two integers as input and returns the maximum value between them.","solution":"def maximum(a, b): Returns the maximum value between a and b. return a if a > b else b"},{"question":"Create a function that takes a set of points (x, y) and returns the angle of rotation needed to align the x-axis with the line connecting the first and last points. The angle should be measured in degrees.","solution":"import math def rotation_angle(points): Returns the angle of rotation needed to align the x-axis with the line connecting the first and last points in the set. The angle is measured in degrees. Parameters: points (list of tuples): A list of (x, y) points. Returns: float: The angle in degrees. if len(points) < 2: raise ValueError(\\"At least two points are required to determine the rotation angle.\\") (x1, y1) = points[0] (x2, y2) = points[-1] # Calculate the difference in coordinates delta_x = x2 - x1 delta_y = y2 - y1 # Calculate the angle in radians angle_radians = math.atan2(delta_y, delta_x) # Convert the angle to degrees angle_degrees = math.degrees(angle_radians) return angle_degrees"},{"question":"Create a function that takes an integer \`n\` as input, generates all possible strings of length \`n\` that are composed of uppercase letters \`A-Z\`, and returns these strings in a list. However, the function should only include strings where the sum of the ASCII values of the characters is even. You can assume that \`n\` will be a positive integer.","solution":"import itertools def generate_even_ascii_strings(n): Generates all possible strings of length n composed of uppercase letters (A-Z) where the sum of ASCII values of the characters is even. Args: n (int): Length of the strings to be generated. Returns: List[str]: A list of strings of length n where the sum of ASCII values is even. if n <= 0: return [] letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' possible_combinations = itertools.product(letters, repeat=n) even_ascii_strings = [] for comb in possible_combinations: ascii_sum = sum(ord(char) for char in comb) if ascii_sum % 2 == 0: even_ascii_strings.append(''.join(comb)) return even_ascii_strings"},{"question":"Create a function that takes a 2D list of integers, where each inner list represents a row of a matrix, and returns the transpose of that matrix as a new 2D list.","solution":"def transpose_matrix(matrix): Returns the transpose of the given 2D list (matrix). if not matrix: return [] return [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]"},{"question":"Create a function that takes in two arguments. The first is a list of numbers, and the second is an integer value. The function should return the sum of the numbers in the list raised to the power of the integer value.","solution":"def sum_of_powers(numbers, power): Returns the sum of each number in the list raised to the specified power. :param numbers: list of numbers :param power: integer value :return: sum of each number in the list raised to the power return sum(number ** power for number in numbers)"},{"question":"Create a function that accepts an integer array of any size and returns a list of the unique values in the array along with their counts. For example, if the input array is [2, 2, 2, 3, 3, 5], the function should return [(2, 3), (3, 2), (5, 1)].","solution":"from collections import Counter def unique_counts(arr): Accepts an integer array and returns a list of tuples, each containing a unique value and its count. counter = Counter(arr) return list(counter.items())"},{"question":"Create a function that reverses a string in python. For example if the string is \\"hello\\", the function should return \\"olleh\\".","solution":"def reverse_string(s): Returns the reverse of the input string s. return s[::-1]"},{"question":"Create a function that takes an array of numbers and multiply each element by a factor of 10. The function should return the new array.","solution":"def multiply_by_ten(arr): Takes an array of numbers and multiplies each element by a factor of 10. Returns the new array. return [x * 10 for x in arr]"},{"question":"Create a function that takes a string and an integer n as parameters and returns the character that appears at the nth index in the string. If n is out of bounds, return an error message.","solution":"def char_at_index(s, n): Returns the character at the nth index in the string s. If n is out of bounds, returns an error message. :param s: String to check :param n: Index position to retrieve the character from :return: Character at nth position or error message if n is out of bounds if n < 0 or n >= len(s): return \\"Index out of bounds\\" return s[n]"},{"question":"Create a function that takes an array of numbers as input and returns an array containing the product of all elements except the element at the current index, without using division. It should have linear time complexity and constant space complexity (excluding the input and output arrays).","solution":"def product_except_self(nums): Returns an array such that each element is the product of all the elements of nums except nums[i]. Assumes input array nums contains at least two elements. length = len(nums) result = [1] * length # Step 1: Calculate prefix products left_product = 1 for i in range(length): result[i] = left_product left_product *= nums[i] # Step 2: Calculate suffix products and multiply with prefix products right_product = 1 for i in range(length - 1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"Create a function that takes a string \`s\` as input and returns the string with all HTML entities replaced by their corresponding characters.","solution":"import html def decode_html_entities(s): Returns the string \`s\` with all HTML entities replaced by their corresponding characters. return html.unescape(s)"},{"question":"Create a function that calculates the total cost of a product including tax. The function should take the base price, the tax rate as input and return the total price.","solution":"def calculate_total_cost(base_price, tax_rate): Calculates the total cost of a product including tax. Parameters: base_price (float): The base price of the product. tax_rate (float): The tax rate as a percentage (e.g., 20 for 20%). Returns: float: The total price including tax. return base_price * (1 + tax_rate / 100)"},{"question":"Create a function that identifies the second largest number in a list. If the second largest number does not exist (because the list has less than two distinct elements), return \`None\`. The function should be optimized for performance and should handle large lists efficiently.","solution":"def second_largest(nums): Returns the second largest number in a list. If the second largest number does not exist, return None. first = second = None for n in nums: if first is None or n > first: first, second = n, first elif n != first and (second is None or n > second): second = n return second"},{"question":"Create a function that takes in two lists, and returns True if there is any overlap in the elements of both lists, otherwise returns False. How can this be done in Python?","solution":"def has_overlap(list1, list2): Returns True if there is any overlap in the elements of list1 and list2, otherwise returns False. return bool(set(list1) & set(list2))"},{"question":"Create a function that calculates the area of a triangle based on the lengths of its three sides. The function should return the area of the triangle rounded to 2 decimal places. If the input sides cannot form a valid triangle, the function should return -1.","solution":"import math def calculate_triangle_area(a, b, c): Calculates the area of a triangle using Heron's formula. Returns the area rounded to 2 decimal places. If the sides do not form a valid triangle, returns -1. if a + b <= c or b + c <= a or c + a <= b: return -1 # Semi-perimeter s = (a + b + c) / 2 # Area calculation using Heron's formula area = math.sqrt(s * (s - a) * (s - b) * (s - c)) return round(area, 2)"},{"question":"Create a function that converts a given string into an integer, provided the string represents a valid integer. If the string is not a valid integer, the function should return None.","solution":"def string_to_int(s): Converts a string to an integer if it is a valid integer representation. If the string is not a valid integer, returns None. :param s: The string to be converted :return: The integer representation of the string if valid, otherwise None try: return int(s) except ValueError: return None"},{"question":"Create a function that returns an array of the first \`n\` Fibonacci numbers. The first two Fibonacci numbers are 0 and 1, and each subsequent number is the sum of the two preceding ones.","solution":"def fibonacci(n): Returns an array of the first n Fibonacci numbers. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fibs = [0, 1] for i in range(2, n): fibs.append(fibs[i-1] + fibs[i-2]) return fibs"},{"question":"Create a function that takes a string as an input and returns a list containing all the unique characters in the string. The characters should be returned in the order they first appear in the string.","solution":"def unique_characters(s): Returns a list of unique characters in the order they first appear in the given string s. seen = set() unique_chars = [] for char in s: if char not in seen: seen.add(char) unique_chars.append(char) return unique_chars"},{"question":"Create a function that will find the most frequent occurrence of a word in a text passage and return it along with its frequency.","solution":"def most_frequent_word(text): Finds the most frequent occurrence of a word in text. Returns a tuple (word, frequency). import re from collections import Counter # Remove punctuation and make lower case words = re.findall(r'bw+b', text.lower()) word_counts = Counter(words) if not word_counts: return None, 0 most_common_word, frequency = word_counts.most_common(1)[0] return most_common_word, frequency"},{"question":"Create a function that generates a list of Fibonacci numbers up to a given limit. The function should be recursive and implement Tail Recursion Optimization if possible. Tail Recursion Optimization is a technique to convert a recursive function into an iterative one to improve performance.","solution":"def fibonacci_tail_recursive(limit, a=0, b=1, fibo_list=None): Generate a list of Fibonacci numbers up to a given limit using tail recursion. Parameters: - limit: int, the upper limit for the Fibonacci sequence values. - a: int, the first preceding element in the Fibonacci sequence (initially 0). - b: int, the second preceding element in the Fibonacci sequence (initially 1). - fibo_list: list, the accumulating list of Fibonacci numbers (initially None). Returns: - List of Fibonacci numbers up to the given limit. if fibo_list is None: fibo_list = [a, b] if b > limit: return fibo_list[:-1] # Remove last element since it exceeds the limit return fibonacci_tail_recursive(limit, b, a + b, fibo_list + [a + b])"},{"question":"Create a function that checks if a given number is a power of 2. The function should return \`True\` if the number is a power of 2, and \`False\` otherwise.","solution":"def is_power_of_2(n): Checks if the given number n is a power of 2. Parameters: n (int): The number to check. Returns: bool: True if n is a power of 2, False otherwise. if n <= 0: return False return (n & (n - 1)) == 0"},{"question":"Create a function that takes two lists of integers, list1 and list2 respectively, and returns the list that contains more elements. If both lists have the same number of elements, return an empty list.","solution":"def compare_lists(list1, list2): Compares two lists and returns the one with more elements. If both lists have the same number of elements, returns an empty list. if len(list1) > len(list2): return list1 elif len(list2) > len(list1): return list2 else: return []"},{"question":"Create a function that generates a list of numbers from 1 to 10 and prints each number on a new line. How can you achieve this using both function definition and function call in Python?","solution":"def print_numbers(): Generates a list of numbers from 1 to 10 and prints each number on a new line. numbers = list(range(1, 11)) for number in numbers: print(number) # Call the function to observe the prints print_numbers()"},{"question":"Create a function that returns an array of all strings in the input array that contain at least one vowel. A vowel is any of the characters 'a', 'e', 'i', 'o', 'u' (both lowercase and uppercase).","solution":"def strings_with_vowels(arr): Returns an array of all strings in the input array that contain at least one vowel. vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'} def contains_vowel(s): return any(char in vowels for char in s) return [s for s in arr if contains_vowel(s)]"},{"question":"Create a function that takes an integer as input and returns whether the number is even or odd without using the modulus operator (%).","solution":"def is_even_or_odd(n): Determines if a number n is even or odd without using the modulus operator. Returns \\"even\\" if the number is even, \\"odd\\" if the number is odd. if n & 1: return \\"odd\\" else: return \\"even\\""},{"question":"Create a function that takes in a single parameter, an integer array that contains only 0s and 1s, and returns the length of the longest sequence of 1s in the array. For example, if the array is [0, 1, 0, 1, 1, 1, 0, 0, 1] the function should return 3.","solution":"def longest_sequence_of_ones(arr): Returns the length of the longest sequence of 1s in the array. max_count = 0 current_count = 0 for num in arr: if num == 1: current_count += 1 max_count = max(max_count, current_count) else: current_count = 0 return max_count"},{"question":"Create a function that converts a given string to a list of tuples, where each tuple contains two elements: the original character and its ASCII value. The function should ignore any non-alphabetic characters and only consider uppercase and lowercase letters.","solution":"def string_to_ascii_tuples(input_string): Converts a given string to a list of tuples, where each tuple contains a character and its ASCII value, ignoring non-alphabetic characters. Args: input_string (str): The string to convert. Returns: List[Tuple[str, int]]: A list of tuples with each character and its ASCII value. return [(char, ord(char)) for char in input_string if char.isalpha()]"},{"question":"Create a function that takes an integer \`n\` as input and returns a list containing the first \`n\` numbers in the Fibonacci sequence, but with each number squared..","solution":"def fibonacci_squared(n): Returns a list containing the first n numbers in the Fibonacci sequence, each squared. if n <= 0: return [] fib_sequence = [0, 1] for i in range(2, n): fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) fib_squared = [x**2 for x in fib_sequence[:n]] return fib_squared"},{"question":"Create a function that takes in a number as an input and outputs the string \\"Positive\\" if the number is positive, \\"Negative\\" if the number is negative, and \\"Zero\\" if the number is zero.","solution":"def number_sign(num): Returns 'Positive' if num is positive, 'Negative' if num is negative, and 'Zero' if num is zero. if num > 0: return \\"Positive\\" elif num < 0: return \\"Negative\\" else: return \\"Zero\\""},{"question":"Create a function that takes an array of integers and a target sum. The function should return the number of distinct pairs in the array that add up to the target sum. The function should use the two-pointer technique for finding the pairs.","solution":"def two_pointer_pairs_with_sum(arr, target): Returns the number of distinct pairs in the array that add up to the target sum using the two-pointer technique. arr.sort() # Sort the array to use two-pointer technique left, right = 0, len(arr) - 1 count = 0 seen_pairs = set() while left < right: current_sum = arr[left] + arr[right] if current_sum == target: if (arr[left], arr[right]) not in seen_pairs: seen_pairs.add((arr[left], arr[right])) count += 1 left += 1 right -= 1 elif current_sum < target: left += 1 else: right -= 1 return count"},{"question":"Create a function that takes a string as input and returns the count of unique characters in it, ignoring case and considering only alphabetic characters. How should the solution handle efficiently handle large strings?","solution":"def count_unique_characters(s): Returns the count of unique alphabetic characters in the string s, ignoring case. Non-alphabetic characters are ignored. s = s.lower() # Convert the string to lower case to ignore case unique_chars = set() # Use a set to store unique characters for char in s: if char.isalpha(): # Consider only alphabetic characters unique_chars.add(char) return len(unique_chars) # Function to handle efficiently large strings using itertools from itertools import islice def count_unique_characters_large_string(s): Returns the count of unique alphabetic characters in the string s, ignoring case. Non-alphabetic characters are ignored. Handles large strings efficiently. s = (char.lower() for char in s) # Convert characters to lower case using generator unique_chars = set() # Use a set to store unique characters for char in s: if char.isalpha(): # Consider only alphabetic characters unique_chars.add(char) return len(unique_chars)"},{"question":"Create a function that returns a list of unique values from a given list, preserving the order of their first appearance.","solution":"def unique_preserve_order(lst): Returns a list of unique values, preserving the order of their first appearance. Args: lst: List of values (can be of any type that is hashable). Returns: List of unique values in the order of their first appearance. seen = set() unique_list = [] for item in lst: if item not in seen: seen.add(item) unique_list.append(item) return unique_list"},{"question":"Create a function that takes an integer as an input and returns a string that describes the number of digits in the integer. Write a Python function that accomplishes this.","solution":"def describe_number_of_digits(n): Returns a description of the number of digits in the integer n. Handles both positive and negative integers. num_digits = len(str(abs(n))) return f\\"The number {n} has {num_digits} digits.\\""},{"question":"Create a function that takes an array of numbers and returns the sum of all even-indexed elements multiplied by the sum of all odd-indexed elements.","solution":"def sum_even_odd_indexed(arr): Returns the sum of all even-indexed elements multiplied by the sum of all odd-indexed elements. Parameters: arr (list of int/float): A list of numbers. Returns: int/float: The product of the sum of all even-indexed elements and the sum of all odd-indexed elements. sum_even = sum(arr[i] for i in range(0, len(arr), 2)) sum_odd = sum(arr[i] for i in range(1, len(arr), 2)) return sum_even * sum_odd"},{"question":"Create a function that takes a boolean and a number then returns the number if the boolean is true, otherwise it returns 0.","solution":"def return_if_true(flag, number): Returns the number if flag is True, otherwise returns 0. Parameters: flag (bool): The boolean flag. number (int/float): The number to return if flag is True. Returns: int/float: The number if flag is True, otherwise 0. if flag: return number else: return 0"},{"question":"Create a function that takes three arguments: a list of numbers \`nums\`, an integer \`x\`, and another integer \`y\`. The function should return \`True\` if any number in \`nums\` is divisible by both \`x\` and \`y\`, and \`False\` otherwise.","solution":"def is_divisible(nums, x, y): Checks if any number in nums is divisible by both x and y. :param nums: List of integers. :param x: Integer to check divisibility. :param y: Integer to check divisibility. :return: True if any number in nums is divisible by both x and y, otherwise False. for num in nums: if num % x == 0 and num % y == 0: return True return False"},{"question":"Create a function that takes a list of strings and returns a new list containing only the strings that start with the letter 'A' or 'E'. If there are no strings that start with 'A' or 'E', return an empty list.","solution":"def filter_strings(strings): Returns a list of strings that start with 'A' or 'E'. return [s for s in strings if s.startswith('A') or s.startswith('E')]"},{"question":"Create a function that can parse a configuration file in a simple text format and extract specific data. The text format can contain key-value pairs separated by equal signs, comments starting with a hash (#), and sections enclosed in angle brackets.","solution":"def parse_config(config_str): Parses a configuration string and returns a dictionary of sections with key-value pairs. Args: config_str (str): Configuration string. Returns: dict: A dictionary with sections as keys and dictionaries of key-value pairs as values. config_data = {} lines = config_str.splitlines() current_section = None for line in lines: line = line.strip() if not line or line.startswith('#'): continue elif line.startswith('<') and line.endswith('>'): current_section = line[1:-1].strip() if current_section not in config_data: config_data[current_section] = {} else: if '=' in line and current_section is not None: key, value = map(str.strip, line.split('=', 1)) config_data[current_section][key] = value return config_data"},{"question":"Create a function that takes in a string and returns the number of unique characters in the string, ignoring case sensitivity. Also, the function should handle any Unicode characters.","solution":"def unique_characters_count(s): Returns the number of unique characters in the string, ignoring case sensitivity. The function also handles Unicode characters. s = s.lower() unique_chars = set(s) return len(unique_chars)"},{"question":"Create a function that takes an array and returns the sum of all numbers in the array that are less than 10. If the array is empty or contains no numbers less than 10, the function should return 0.","solution":"def sum_less_than_10(numbers): Returns the sum of all numbers in the array that are less than 10. If the array is empty or contains no numbers less than 10, returns 0. return sum(num for num in numbers if num < 10)"},{"question":"Create a function that extracts the most frequent elements from a list of numbers and returns them as a list, with the frequency count in descending order. If there are multiple elements with the same highest frequency, include all of them in the result. If the list is empty, return an empty list.","solution":"from collections import Counter def most_frequent_elements(numbers): Extracts the most frequent elements from a list of numbers and returns them as a list, with the frequency count in descending order. If there are multiple elements with the same highest frequency, include all of them in the result. If the list is empty, return an empty list. if not numbers: return [] frequency_count = Counter(numbers) max_frequency = max(frequency_count.values()) most_frequent = [num for num, freq in frequency_count.items() if freq == max_frequency] return most_frequent"},{"question":"Create a function that takes a list of integers in Python and returns the sum of all the even numbers in the list. If the list is empty or contains no even numbers, return 0.","solution":"def sum_of_evens(numbers): Returns the sum of all even numbers in the list. If the list is empty or contains no even numbers, returns 0. return sum(num for num in numbers if num % 2 == 0)"},{"question":"Create a function that finds the first duplicate element in a given array of integers. If there is no duplicate, the function should return -1. The function should be efficient and work in O(n) time complexity using a hash map for storage.","solution":"def first_duplicate(arr): Finds the first duplicate element in a given array of integers. If there is no duplicate, returns -1. seen = set() for num in arr: if num in seen: return num seen.add(num) return -1"},{"question":"Create a function that takes two integers, \`a\` and \`b\`, as arguments and returns the sum of all the numbers between \`a\` and \`b\` (inclusive), if both numbers are positive and \`b\` is greater than or equal to \`a\`.","solution":"def sum_between(a, b): Returns the sum of all integers between a and b (inclusive) if both are positive and b >= a. if a > 0 and b >= a: return sum(range(a, b + 1)) return 0"},{"question":"Create a function that takes an array of integers and returns the second last (penultimate) element in the array. If the array has less than two elements, return -1.","solution":"def second_last_element(arr): Returns the second last element in the array. If the array has less than two elements, returns -1. if len(arr) < 2: return -1 return arr[-2]"},{"question":"Create a function that takes a list of integers as input and returns a new list containing the XOR of each pair of adjacent elements.","solution":"def xor_adjacent_pairs(numbers): Takes a list of integers and returns a new list containing the XOR of each pair of adjacent elements. :param numbers: List of integers :return: List of integers where each element is the XOR of each pair of adjacent elements. if not numbers or len(numbers) == 1: return [] result = [] for i in range(len(numbers) - 1): result.append(numbers[i] ^ numbers[i + 1]) return result"},{"question":"Create a function that returns the factorial of a number, but only for non-negative integers. If the input is a negative integer, the function should return -1.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. If n is a negative integer, returns -1. if n < 0: return -1 elif n == 0 or n == 1: return 1 else: result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Create a function that takes a list of local time zones (as strings, e.g., \\"America/New_York\\") and converts each time zone to Coordinated Universal Time (UTC). The function should print the converted time in each local time zone along with the total number of hours and minutes offset from UTC.","solution":"from datetime import datetime import pytz def convert_to_utc(timezones): Convert each local timezone to UTC and print the converted time, along with the total number of hours and minutes offset from UTC. Args: - timezones (list): List of timezone strings (e.g., \\"America/New_York\\") for tz in timezones: local_time = datetime.now(pytz.timezone(tz)) utc_time = local_time.astimezone(pytz.utc) offset = local_time.utcoffset() total_offset_hours = offset.total_seconds() // 3600 total_offset_minutes = (offset.total_seconds() % 3600) // 60 print(f\\"Local time in {tz}: {local_time.strftime('%Y-%m-%d %H:%M:%S')}\\") print(f\\"UTC time: {utc_time.strftime('%Y-%m-%d %H:%M:%S')}\\") print(f\\"Offset from UTC: {int(total_offset_hours)} hours and {int(total_offset_minutes)} minutes\\")"},{"question":"Create a function that takes an array of integers as an argument and returns the sum of all the integers in the array. Use recursion to solve this problem.","solution":"def recursive_sum(arr): Returns the sum of all the integers in the array using recursion. if len(arr) == 0: return 0 return arr[0] + recursive_sum(arr[1:])"},{"question":"Create a function that accepts a list of integers and returns the sum of all prime numbers in the list. If there are no prime numbers, the function should return 0.","solution":"def is_prime(num): Checks if a given number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num ** 0.5) + 1, 2): if num % i == 0: return False return True def sum_of_primes(numbers): Returns the sum of all prime numbers in the given list. If there are no prime numbers, returns 0. return sum(num for num in numbers if is_prime(num))"},{"question":"Create a function that generates a string of comma-separated numbers. For example, the function should return \\"1,2,3,4,5\\".","solution":"def generate_comma_separated_numbers(n): Generates a string of comma-separated numbers from 1 to n. Parameters: n (int): The upper limit of the range (inclusive). Returns: str: A string of comma-separated numbers from 1 to n. return ','.join(str(i) for i in range(1, n + 1))"},{"question":"Create a function that converts a given string to HTML entities.","solution":"def convert_to_html_entities(input_str): Converts special characters in a given string to HTML entities. html_entities = { '&': '&amp;', '<': '&lt;', '>': '&gt;', '\\"': '&quot;', \\"'\\": '&#39;', } return ''.join(html_entities.get(c, c) for c in input_str)"},{"question":"Create a function that takes in a string and returns the string with all occurrences of a given substring removed. For example, given the string \\"Hello World\\" and the substring \\"o\\", the function should return \\"Hell Wrld\\". The function should handle multiple occurrences of the substring and varying lengths of the substring.","solution":"def remove_substring(s, sub): Remove all occurrences of the substring 'sub' from the string 's'. Args: s (str): The input string. sub (str): The substring to be removed. Returns: str: The input string with all occurrences of the substring removed. return s.replace(sub, \\"\\")"},{"question":"Create a function that checks if a number is even or odd without using the modulus operator.","solution":"def is_even(number): Returns True if the number is even, otherwise returns False. This function does not use the modulus operator. return (number & 1) == 0"},{"question":"Create a function that takes a date and time value and outputs it as a string in the following format: \\"Month, Day, Year, Hour:Minute:Second AM/PM\\".","solution":"from datetime import datetime def format_datetime(dt): Formats a given datetime object into the string format \\"Month, Day, Year, Hour:Minute:Second AM/PM\\". Args: - dt (datetime): The datetime object to format. Returns: - str: The formatted datetime string. return dt.strftime(\\"%B, %d, %Y, %I:%M:%S %p\\")"},{"question":"Create a function that accepts a string as a parameter and returns the length of the string. Implement this function using recursion.","solution":"def recursive_strlen(s): Returns the length of the string s using recursion. if s == \\"\\": return 0 else: return 1 + recursive_strlen(s[1:])"},{"question":"Create a function that , given a value and an array, returns the index of the element that is closest to the given value. If there are two elements that are equally close to the value, return the index of the smaller one.","solution":"def find_closest_index(value, array): Returns the index of the element in the array that is closest to the given value. If there are two elements that are equally close, the smaller index is returned. Parameters: value (int or float): The value to compare the array elements with. array (list of int or float): The array of numbers to search. Returns: int: The index of the element closest to the value. if not array: raise ValueError(\\"Array must not be empty\\") closest_index = 0 min_distance = abs(array[0] - value) for i in range(1, len(array)): distance = abs(array[i] - value) if distance < min_distance or (distance == min_distance and i < closest_index): closest_index = i min_distance = distance return closest_index"},{"question":"Create a function that takes in a string and returns the reversed string. However, the function should not use any built-in string reversing functions like reverse() or slicing. The string contains only alphabetic characters and spaces.","solution":"def reverse_string(s): Returns the reversed string. reversed_chars = [] for char in s: reversed_chars.insert(0, char) return ''.join(reversed_chars)"},{"question":"Create a function that takes a string as input and returns a substring consisting of alternating characters from the original string. For example, if the input is \\"example\\", the function should return \\"exaex\\".","solution":"def alternating_substring(s): Returns a substring consisting of alternating characters from the original string. return s[0::2]"},{"question":"Create a function that returns a string containing all characters from the first string that are not present in the second string.","solution":"def remove_chars_not_in_second(s1, s2): Returns a string containing all characters from s1 that are not present in s2. return ''.join([char for char in s1 if char not in s2])"},{"question":"Create a function that takes in two strings, str1 and str2. The function should return True if str2 is a rotation of str1, and False otherwise. A string rotation means that str2 can be obtained by rotating str1. For example, if str1 = \\"abcde\\" and str2 = \\"deabc\\", then str2 is a rotation of str1.","solution":"def is_rotation(str1, str2): Returns True if str2 is a rotation of str1, False otherwise. if len(str1) != len(str2): return False return str2 in str1 + str1"},{"question":"Create a function that takes two parameters, \` apprehension\` and \` fear\`, and returns \`fear\` if it's greater than 10, otherwise it returns \`apprehension\`.","solution":"def decide_emotion(apprehension, fear): Returns \`fear\` if it is greater than 10, otherwise returns \`apprehension\`. if fear > 10: return fear else: return apprehension"},{"question":"Create a function that takes two inputs, an integer and a list of integers. The function should return True if the integer is present in the list, and False otherwise.","solution":"def is_integer_in_list(n, lst): Returns True if the integer n is present in the list lst, otherwise False. return n in lst"},{"question":"Create a function that takes an integer array as input and returns the length of the longest continuous subarray where all elements are unique. For example, given the array [1, 2, 3, 4, 3, 2, 1], the function should return 4 because the longest subarray with unique elements is [2, 3, 4, 3].","solution":"def longest_unique_subarray(arr): Returns the length of the longest continuous subarray with all unique elements. max_length = 0 start_index = 0 seen = {} for end_index, value in enumerate(arr): if value in seen and seen[value] >= start_index: start_index = seen[value] + 1 seen[value] = end_index max_length = max(max_length, end_index - start_index + 1) return max_length"},{"question":"Create a function that takes two integers as input and returns the product of the two integers, rounded down to the nearest integer (floor division).","solution":"def integer_product_floor(a, b): Returns the product of a and b, rounded down to the nearest integer. return a * b"},{"question":"Create a function that takes two numbers as parameters and returns the result of a bitwise XOR operation on them. The function should be named \`calculate_xor\` and should have two parameters, \`num1\` and \`num2\`.","solution":"def calculate_xor(num1, num2): Returns the result of a bitwise XOR operation on num1 and num2. return num1 ^ num2"},{"question":"Create a function that generates the nth Fibonacci number. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. Write a function that takes an integer n as input and returns the nth Fibonacci number.","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n < 0: raise ValueError(\\"Input cannot be negative\\") if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Create a function that reads a user's input until they enter the word \\"quit\\".","solution":"def read_until_quit(): Reads user input until the word 'quit' is entered. Returns all entered words except 'quit' in a list. result = [] while True: user_input = input(\\"Enter input (type 'quit' to stop): \\") if user_input.lower() == 'quit': break result.append(user_input) return result"},{"question":"Create a function that takes a list of integers and returns the sum of the squares of the elements at odd indices.","solution":"def sum_of_squares_odd_indices(lst): Returns the sum of the squares of elements at odd indices in the list. Parameters: lst (list): List of integers. Returns: int: Sum of the squares of elements at odd indices. return sum(lst[i]**2 for i in range(1, len(lst), 2))"},{"question":"Create a function that takes a list as an input and returns a new list with the elements reversed. Do not reverse the list in-place, meaning create a new list and return it with the original list intact.","solution":"def reverse_list(input_list): Returns a new list with the elements of the input list reversed. The original list remains unchanged. :param input_list: List of elements to be reversed :return: A new list with the elements reversed return input_list[::-1]"},{"question":"Create a function that takes an integer \`n\` as a parameter and returns the sum of all integers from 1 to \`n\` that are multiples of a specified divisor \`d\`. For example, if \`n\` is 20 and the divisor is 3, the function should return the sum of 3, 6, 9, 12, 15, and 18.","solution":"def sum_of_multiples(n, d): Returns the sum of all integers from 1 to n that are multiples of d. Parameters: - n: int, the upper limit of the range. - d: int, the divisor. Returns: - int, the sum of all multiples of d from 1 to n. return sum(i for i in range(1, n + 1) if i % d == 0)"},{"question":"Create a function that calculates the factorial of a number using iterative approach. Then, implement tests for this function to确保其正确性。 You should write these tests in Python. Elaborate on the implementation of your function and tests.","solution":"def factorial(n): Returns the factorial of a non-negative integer n using an iterative approach. Raises ValueError if n is negative. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Create a function that takes a list of integers and returns the sum of all the even numbers in the list. If there are no even numbers, return 0. Write the function using Python.","solution":"def sum_of_even_numbers(numbers): Returns the sum of all even numbers in the list. If there are no even numbers, returns 0. return sum(num for num in numbers if num % 2 == 0)"},{"question":"Create a function that takes an array of integers and rotates the array to the right by \`k\` positions. The function should handle cases where \`k\` is greater than the length of the array. In such cases, the function should perform the rotation as if \`k\` is equivalent to \`k % array length\`. For example, an array of length 5 rotated by 10 positions should be the same as rotating it by 5 positions.","solution":"def rotate_array(arr, k): Rotates the array to the right by k positions. Parameters: arr (list): The array to rotate. k (int): Number of positions to rotate the array. Returns: list: The rotated array. n = len(arr) if n == 0: return arr k = k % n # Handle cases where k is greater than the length of the array return arr[-k:] + arr[:-k]"},{"question":"Create a function that takes a string as input and returns a list of all substrings of length 2.","solution":"def substrings_of_length_2(s): Returns a list of all substrings of length 2 of the input string s. return [s[i:i+2] for i in range(len(s)-1)]"},{"question":"Create a function that will reverse a string using recursion. How can you ensure that the function handles strings with special characters and spaces?","solution":"def reverse_string(s): Recursively reverses a given string. if len(s) == 0: return s else: return s[-1] + reverse_string(s[:-1])"},{"question":"Create a function that takes an array of integers as input and returns an array where each element is the product of the elements in the input array except the element at the current index. The function should not use division and should operate in linear time. How can you achieve this?","solution":"def product_except_self(nums): Given an array nums of n integers where n > 1, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i]. length = len(nums) output = [1] * length # Calculate left products left_product = 1 for i in range(length): output[i] = left_product left_product *= nums[i] # Calculate right products and combine with left products right_product = 1 for i in range(length - 1, -1, -1): output[i] *= right_product right_product *= nums[i] return output"},{"question":"Create a function that multiplies all the elements in a given list by a specified number and returns the resulting list.","solution":"def multiply_elements(lst, multiplier): Multiplies all the elements in the list by the specified multiplier and returns the resulting list. :param lst: List of numbers :param multiplier: Number by which each element in the list will be multiplied :return: A new list with elements multiplied by the multiplier return [element * multiplier for element in lst]"},{"question":"Create a function that takes a list of tuples as an argument and sort the list based on the second element of each tuple. The function should be able to handle tuples with varying lengths, ignoring the extra values in those tuples. The sorting should be done in ascending order.","solution":"def sort_tuples_by_second_element(lst): Sorts a list of tuples based on the second element of each tuple in ascending order. return sorted(lst, key=lambda x: x[1] if len(x) > 1 else float('inf'))"},{"question":"Create a function that takes two strings as its arguments. If they contain the same characters in any order, the function should return true; otherwise, it should return false. Consider that the inputs will consist only of lowercase letters.","solution":"def are_anagrams(s1, s2): Returns True if the two strings contain the same characters in any order, otherwise False. return sorted(s1) == sorted(s2)"},{"question":"Create a function that takes in a list of integers and returns a new list that is a sorted version of the input list.","solution":"def sort_list(input_list): Returns a new list that is a sorted version of the input list. Parameters: input_list (list): The list of integers to be sorted. Returns: list: A sorted version of the input list. return sorted(input_list)"},{"question":"Create a function that takes a list of integers, deletes all odd numbers, and returns the remaining numbers in the list.","solution":"def remove_odds(lst): Removes all odd numbers from the given list of integers. Parameters: lst (list): A list of integers. Returns: list: A list with only even numbers. return [num for num in lst if num % 2 == 0]"},{"question":"Create a function that pads a string with specified number of characters to both sides. The function should take three parameters: the string to be padded, the target length of the resulting string, and the character used for padding. If the string is already as long or longer than the target length, it should remain unchanged.","solution":"def pad_string(s, target_length, pad_char): Pads the input string s with pad_char to both sides until the string reaches target_length. If the string is already as long or longer than the target length, it remains unchanged. Parameters: s (str): The string to be padded. target_length (int): The target length of the resulting string. pad_char (str): The character used for padding. Returns: str: The padded string or the original string if it is already long enough. # Check if padding is needed if len(s) >= target_length: return s # Calculate total padding required total_padding = target_length - len(s) # Divide padding equally left_padding = total_padding // 2 right_padding = total_padding - left_padding # Apply the padding return pad_char * left_padding + s + pad_char * right_padding"},{"question":"Create a function that takes three integers as input arguments, and returns which of the numbers is the largest. If all numbers are the same, return a message stating that they are equal.","solution":"def find_largest(a, b, c): Returns the largest of three numbers. If all numbers are equal, returns a message stating they are equal. if a == b == c: return \\"All numbers are equal\\" elif a >= b and a >= c: return a elif b >= a and b >= c: return b else: return c"},{"question":"Create a function that counts the frequency of each character in a given string. The function should ignore cases and return a dictionary with characters as keys and their counts as values.","solution":"from collections import Counter def count_char_frequency(string): Returns a dictionary with the frequency of each character in the given string. Characters are treated case-insensitively. string = string.lower() return dict(Counter(string))"},{"question":"Create a function that calculates the sum of numbers in a given array that are greater than a specified threshold. The function should take an array of numbers and a threshold value as arguments and return the sum of numbers greater than the threshold.","solution":"def sum_above_threshold(numbers, threshold): Returns the sum of numbers in the list that are greater than the specified threshold. Args: numbers: List of numbers. threshold: A threshold number. Returns: Sum of numbers greater than the threshold. return sum(number for number in numbers if number > threshold)"},{"question":"Create a function that takes two parameters: \`start\` and \`end\`. The function should return a list of numbers from \`start\` to \`end\` (inclusive) that are divisible by both 3 and 5. For example, if \`start\` is 0 and \`end\` is 25, the function should return \`[0, 15, 30]\`.","solution":"def divisible_by_3_and_5(start, end): Returns a list of numbers from start to end (inclusive) that are divisible by both 3 and 5. return [i for i in range(start, end + 1) if i % 3 == 0 and i % 5 == 0]"},{"question":"Create a function that converts a given dictionary into a JSON string. How can I achieve this in Python?","solution":"import json def dict_to_json(dictionary): Converts a given dictionary to a JSON string. Parameters: dictionary (dict): The dictionary to be converted to JSON string. Returns: str: The JSON string representation of the dictionary. return json.dumps(dictionary)"},{"question":"Create a function that implements the quicksort algorithm in Python. Quicksort is a divide-and-conquer algorithm that works by selecting a 'pivot' element from the array and partitioning the other elements into two sub-arrays, according to whether they are less than or greater than the pivot. The sub-arrays are then recursively sorted. Write a function \`quicksort(arr)\` that takes a list of numbers and returns the sorted list using the quicksort algorithm.","solution":"def quicksort(arr): Implements the quicksort algorithm to sort a list of numbers. Parameters: arr (list): The list of numbers to be sorted. Returns: list: The sorted list of numbers. if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"Create a function that takes in two parameters, an array of integers and a target sum, and returns all possible pairs of numbers from the array that add up to the target sum.","solution":"def find_pairs_with_sum(arr, target_sum): Finds all pairs of numbers in the given array that add up to the target sum. Parameters: arr (list of int): The array of integers. target_sum (int): The target sum. Returns: list of tuple: A list of tuples, each containing a pair of numbers that add up to the target sum. pairs = [] seen = set() for number in arr: complement = target_sum - number if complement in seen: pairs.append((complement, number)) seen.add(number) return pairs"},{"question":"Create a function that takes in an array and a target number as parameters, and returns an array of all indices of elements that are equal to the target number in the input array. If the target is not found, the function should return an empty array.","solution":"def find_indices(arr, target): Returns a list of indices of elements in 'arr' that are equal to 'target'. Parameters: - arr: List of elements - target: The element to find in arr Returns: List of indices where elements in arr equals target. return [index for index, value in enumerate(arr) if value == target]"},{"question":"Create a function that reads a file, reverses its contents, and then writes the reversed contents back to another file.","solution":"def reverse_file_contents(input_filepath, output_filepath): Reads the contents of the input file, reverses it, and writes the reversed contents to the output file. Parameters: - input_filepath: str, path to the input file. - output_filepath: str, path to the output file. with open(input_filepath, 'r') as infile: contents = infile.read() reversed_contents = contents[::-1] with open(output_filepath, 'w') as outfile: outfile.write(reversed_contents)"},{"question":"Create a function that takes in an integer array and returns an array that is symmetric around the median of the input array. The resulting array should be arranged such that the median is in the center, and numbers are symmetrically arranged on either side of it. If the array has an odd number of elements, the median will naturally be in the center; if the array has an even number of elements, the leftmost element of the median pair will be considered the median.","solution":"def make_symmetric_array(arr): Takes in an integer array and returns an array that is symmetric around the median of the input array. n = len(arr) arr_sorted = sorted(arr) if n % 2 == 0: median_index = n // 2 - 1 else: median_index = n // 2 symmetric_array = [] for i in range(n // 2 + 1): if median_index - i >= 0: symmetric_array.append(arr_sorted[median_index - i]) if median_index + i < n and i != 0: symmetric_array.append(arr_sorted[median_index + i]) return symmetric_array"},{"question":"Create a function that takes an integer as an input and returns the sum of its divisors, excluding 1 and the number itself. If the sum of the divisors is greater than the number, return \\"Abundant Number\\", otherwise, return \\"Not Abundant Number\\".","solution":"def sum_of_divisors(n): Returns the sum of the divisors of n (excluding 1 and n itself). If the sum of the divisors is greater than n, returns \\"Abundant Number\\", otherwise returns \\"Not Abundant Number\\". if n <= 1: return \\"Not Abundant Number\\" sum_divisors = 0 for i in range(2, n): if n % i == 0: sum_divisors += i if sum_divisors > n: return \\"Abundant Number\\" else: return \\"Not Abundant Number\\""},{"question":"Create a function that removes all non-digit characters from the input string. For example, if the input is \`\\"abc123\`\\", the output should be \`\\"123\\"\`. If the input is \`\\"def456ghi789\\"\`, the output should be \`\\"456789\\"\`.","solution":"def remove_non_digits(input_string): Removes all non-digit characters from the input string and returns the result. Parameters: input_string (str): The string from which non-digit characters will be removed. Returns: str: A string containing only the digit characters from the input string. return ''.join(char for char in input_string if char.isdigit())"},{"question":"Create a function that takes a string and a character as input, and returns the count of occurrences of the character in the string. The function should be case-sensitive.","solution":"def count_occurrences(s, char): Returns the count of occurrences of the character in the string. The function is case-sensitive. :param s: The input string :param char: The character to count in the string :return: The count of occurrences of the character in the string return s.count(char)"},{"question":"Create a function that takes an array of integers as input, representing a time series data, and returns the moving average of the data. The moving average is calculated over a sliding window of a fixed size, given as an input parameter to the function.","solution":"def moving_average(time_series, window_size): Returns the moving average of the given time series data over the specified window size. :param time_series: List of integers representing the time series data. :param window_size: Integer representing the size of the moving average window. :return: List of floats representing the moving average. if window_size <= 0: raise ValueError(\\"Window size must be positive and greater than zero\\") if window_size > len(time_series): raise ValueError(\\"Window size must be less than or equal to the length of the time series\\") averages = [] for i in range(len(time_series) - window_size + 1): window = time_series[i:i + window_size] averages.append(sum(window) / window_size) return averages"},{"question":"Create a function that calculates the total number of pairs of shoes a person can make from a given list of shoes. The function should take an integer \`n\` representing the number of pairs of shoes in the list and return the total number of pairs that can be made. Each pair should consist of two shoes with different colors. The list is represented by an array where each element is an object with a property \`color\` denoting the color of the shoe.","solution":"from collections import Counter def count_pairs(shoes): Returns the total number of pairs that can be made from a list of shoes. Each shoe is represented as a dictionary with a 'color' key. :param shoes: list of dictionaries, where each dictionary represents a shoe with a color property. :return: total number of unique pairs of shoes. if not shoes: return 0 color_count = Counter(shoe['color'] for shoe in shoes) # Counting pairs, which only feasible if there's more than one shoe with different colors. total_pairs = sum(min(count, len(shoes) - count) for count in color_count.values()) // 2 return total_pairs"},{"question":"Create a function that generates prime numbers up to a given limit N. The function should return a list of all prime numbers less than or equal to N. Ensure that the function uses a method to efficiently filter non-prime numbers.","solution":"def generate_primes(N): Generates prime numbers up to a given limit N using the Sieve of Eratosthenes method. Args: N (int): The upper limit to generate prime numbers up to. Returns: List[int]: A list of all prime numbers less than or equal to N. if N < 2: return [] sieve = [True] * (N + 1) sieve[0] = sieve[1] = False p = 2 while (p * p <= N): if (sieve[p] == True): for i in range(p * p, N + 1, p): sieve[i] = False p += 1 prime_numbers = [p for p in range(N + 1) if sieve[p]] return prime_numbers"},{"question":"Create a function that takes two integers as input and returns the sum of their digits. For example, if the input integers are 123 and 456, the function should return the sum of their digits (1+2+3 + 4+5+6 = 21).","solution":"def sum_of_digits(a, b): Returns the sum of the digits of the two input integers a and b. digit_sum = 0 for digit in str(a) + str(b): if digit.isdigit(): digit_sum += int(digit) return digit_sum"},{"question":"Create a function that takes a list of integers and returns the sum of the squares of those integers, but only for those integers that are greater than 0 and less than 100.","solution":"def sum_of_squares(lst): Returns the sum of the squares of the integers in lst that are greater than 0 and less than 100. return sum(x**2 for x in lst if 0 < x < 100)"},{"question":"Create a function that finds the n-th Fibonacci number in Python. The function should take an integer \`n\` as its parameter and return the \`n-th\` Fibonacci number. Remember to handle the base cases where \`n\` is 0 or 1 separately and ensure that the function is efficient.","solution":"def fibonacci(n): Returns the n-th Fibonacci number. if n < 0: raise ValueError(\\"Fibonacci number is not defined for negative indices.\\") elif n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Create a function that takes two strings as arguments and returns their concatenation in reversed order. For example, if the function receives \\"abc\\" and \\"def\\", it should return \\"fedcba\\".","solution":"def concatenate_and_reverse(str1, str2): Concatenates two strings and returns the result in reversed order. Parameters: str1 (string): The first string to concatenate. str2 (string): The second string to concatenate. Returns: string: The concatenated string in reversed order. concatenated_str = str1 + str2 return concatenated_str[::-1]"},{"question":"Create a function that takes in two parameters, an array of numbers and a target sum. The function should return true if any two numbers in the array add up to the target sum, otherwise false.","solution":"def has_pair_with_sum(numbers, target): Returns true if any two numbers in the array add up to the target sum, otherwise false. seen = set() for number in numbers: if (target - number) in seen: return True seen.add(number) return False"},{"question":"Create a function that takes a string as input and returns the number of words in the string. In Python, use the \`split()\` method to separate the words in the string.","solution":"def count_words(input_string): Returns the number of words in the input string. Args: input_string (str): The string to count words in. Returns: int: The number of words in the input string. words = input_string.split() return len(words)"},{"question":"Create a function that reads a string from input and then prints \\"Yay\\" if the length of the string is zero, and \\"Nay\\" otherwise. Write the function in Python.","solution":"def check_string_length(input_string): Prints 'Yay' if the length of the input_string is zero, otherwise prints 'Nay'. if len(input_string) == 0: print(\\"Yay\\") else: print(\\"Nay\\")"},{"question":"Create a function that calculates the sum of even-indexed elements in a list. The function should take a list of integers as input and return the sum of the elements at even indices (0, 2, 4, ...).","solution":"def sum_even_indexed_elements(lst): Returns the sum of elements at even indices in the list. return sum(lst[i] for i in range(0, len(lst), 2))"},{"question":"Create a function that takes a string and returns the frequency of each character in the string, ignoring case and spaces.","solution":"def character_frequency(s): Takes a string and returns the frequency of each character, ignoring case and spaces. frequency = {} for char in s.lower(): if char != ' ': if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"Create a function that takes two integers, a and b, as input and returns the sum of their absolute differences without using multiplication, division, or the absolute value function. Additionally, handle both positive and negative integers.","solution":"def sum_of_abs_diff(a, b): Returns the sum of the absolute differences of the two integers a and b. def abs_diff(x, y): return x - y if x >= y else y - x return abs_diff(a, b)"},{"question":"Create a function that takes a string as input and returns a new string with each character in the original string reversed. The function should handle both uppercase and lowercase letters and ignore non-alphabetic characters.","solution":"def reverse_alphabetic_characters(input_string): Returns a new string with each alphabetic character in the original string reversed. Non-alphabetic characters are ignored. # Extract only the alphabetic characters and reverse them reversed_chars = [char for char in input_string if char.isalpha()][::-1] # Replace alphabetic characters in the original string with the reversed ones output_list = [] reverse_index = 0 for char in input_string: if char.isalpha(): output_list.append(reversed_chars[reverse_index]) reverse_index += 1 else: output_list.append(char) return ''.join(output_list)"},{"question":"Create a function that takes an array of integers and returns the maximum difference between any two elements in the array. The solution should be optimized to run in linear time, i.e., O(n) complexity.","solution":"def max_difference(arr): Returns the maximum difference between any two elements in the array. if not arr or len(arr) < 2: return 0 min_element = arr[0] max_diff = arr[1] - arr[0] for i in range(1, len(arr)): if arr[i] - min_element > max_diff: max_diff = arr[i] - min_element if arr[i] < min_element: min_element = arr[i] return max_diff if max_diff > 0 else 0"},{"question":"Create a function that takes a string of numbers and returns the sum of those numbers. If a non-numeric character is encountered, the function should ignore it and continue processing the remaining characters in the string.","solution":"def sum_of_numbers(s): Returns the sum of all numeric characters in the string s. Non-numeric characters are ignored. total = 0 for char in s: if char.isdigit(): total += int(char) return total"},{"question":"Create a function that checks if two given strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters in the same frequency, but the order of characters is different. For example, \\"listen\\" and \\"silent\\" are anagrams.","solution":"def are_anagrams(str1, str2): Checks if two strings are anagrams. Anagrams are defined as strings that contain the same characters with the same frequency, but possibly in a different order. Args: str1 (str): The first string. str2 (str): The second string. Returns: bool: True if the strings are anagrams, False otherwise. return sorted(str1) == sorted(str2)"},{"question":"Create a function that takes two lists, \`list1\` and \`list2\`, and returns a new list that contains only the elements that are common to both \`list1\` and \`list2\`, but without duplicates. Also, return the list sorted in ascending order.","solution":"def common_elements(list1, list2): Returns a new list containing elements that are common to both list1 and list2 without duplicates, sorted in ascending order. common_set = set(list1) & set(list2) return sorted(common_set)"},{"question":"Create a function that takes a list of numbers, cycles through them in a rotating fashion. The first element becomes the last element, and each element becomes the previous element. The function should then return the modified list.","solution":"def rotate_list(lst): Rotates elements of a list to the right. The first element becomes the last element, and each element shifts one place to the left. Parameters: lst (list): A list of numbers. Returns: list: The rotated list. if not lst: return lst return [lst[-1]] + lst[:-1]"},{"question":"Create a function that finds the intersection of two lists.","solution":"def list_intersection(list1, list2): Returns the intersection of list1 and list2. return list(set(list1) & set(list2))"},{"question":"Create a function that takes a string of digits as input and returns the sum of the digits at even positions in the string. Positioning starts from 1.","solution":"def sum_even_position_digits(s): Returns the sum of the digits at even positions in the string. Positioning starts from 1. Args: s (str): A string of digits. Returns: int: The sum of the digits at even positions. return sum(int(s[i]) for i in range(1, len(s), 2))"},{"question":"Create a function that takes a list of tuples as an input, each tuple containing two elements. The function should return a new list containing the sum of each pair of elements from the tuples.","solution":"def sum_of_pairs(pairs): Takes a list of tuples, where each tuple contains two elements. Returns a list with the sum of the pair elements from each tuple. return [a + b for a, b in pairs]"},{"question":"Create a function that takes a string and a list of strings, and returns a list of the strings from the list that are substrings of the given string, maintaining their original order.","solution":"def find_substrings_in_list(main_string, lst): This function takes a main string and a list of strings, and returns a list of the strings from the list that are substrings of the given string, maintaining their original order. return [s for s in lst if s in main_string]"},{"question":"Create a function that prompts the user to enter an integer. If the user enters a non-integer value, the function should prompt them to enter the value again. The function should continue to prompt until a valid integer is entered. Once a valid integer is entered, the function should return the value.","solution":"def get_integer_input(prompt=\\"Please enter an integer: \\"): Prompts the user to enter an integer. If a non-integer is entered, it will continue to prompt. Returns: int: The valid integer entered by the user. while True: try: user_input = int(input(prompt)) return user_input except ValueError: print(\\"Invalid input. Please enter a valid integer.\\")"},{"question":"Create a function that takes an integer as input and returns the sum of all integers less than the input number that are multiples of 3 or 5. For example, if the input number is 20, the function should return the sum of 3, 5, 6, 9, 10, 12, 15, and 18.","solution":"def sum_of_multiples(n): Returns the sum of all integers less than n that are multiples of 3 or 5. return sum(i for i in range(n) if i % 3 == 0 or i % 5 == 0)"},{"question":"Create a function that takes a string as an argument and returns the string with all uppercase letters converted to lowercase and all lowercase letters converted to uppercase. Make sure to handle any non-alphabetic characters gracefully, without causing errors.","solution":"def swap_case(s): Takes a string and returns a new string with all uppercase letters converted to lowercase and all lowercase letters converted to uppercase. :param s: Input string :return: String with cases swapped return s.swapcase()"},{"question":"Create a function that accepts a string containing the number of steps to the left or right you must take to reach a specific point, represented by the characters 'L' and 'R' for left and right respectively. Determine if it is possible to reach the end of the string by following the given directions. If it is possible, return 'SUCCESS' otherwise return 'FAILURE'.","solution":"def determine_success(steps): Determines if it is possible to reach the end of the string following the given directions ('L' for left and 'R' for right). Parameters: steps (str): A string containing 'L' and 'R' representing the steps. Returns: str: 'SUCCESS' if it is possible to reach the end, otherwise 'FAILURE' position = 0 # Starting position for step in steps: if step == 'L': position -= 1 elif step == 'R': position += 1 # The end of the journey is considered successful if the final position is zero if position == 0: return 'SUCCESS' else: return 'FAILURE'"},{"question":"Create a function that converts a string representation of an IP address \\"192.168.1.0/24\\" into a list of IP addresses that are part of that subnet. The function should also handle cases where the subnet mask is less than or equal to 24. That is, the IP address could be either an IPv4 address or a CIDR notation. For example, both \\"192.168.1.0/24\\" and \\"192.168.1.0\\" should produce the same list of IP addresses. The function should return the list of IP addresses as strings.","solution":"import ipaddress def generate_ip_list(ip_network_str): Converts a string representation of an IP address with or without CIDR notation into a list of IP addresses that are part of that subnet. Arguments: ip_network_str -- str, IP address in dotted decimal format with or without CIDR notation Returns: list of str -- List of IP addresses belonging to the subnet if '/' not in ip_network_str: ip_network_str += '/32' ip_network = ipaddress.IPv4Network(ip_network_str, strict=False) return [str(ip) for ip in ip_network.hosts()]"},{"question":"Create a function that takes a string as input and returns the frequency of each character in the string using a dictionary. characters should be case sensitive. For example, the string \\"Hello World\\" should have 'H' and 'h' counted as different characters.","solution":"def char_frequency(s): Returns a dictionary containing the frequency of each character in the string s. frequency = {} for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"Create a function that prints out the first n natural numbers in Python.","solution":"def print_first_n_natural_numbers(n): Prints out the first n natural numbers. Args: n (int): The number of natural numbers to print. Returns: List of the first n natural numbers. return [i for i in range(1, n+1)]"},{"question":"Create a function that takes a variable input and returns the output as an integer. If the input cannot be converted to an integer, the function should return None. Additionally, if the input is a list of elements, the function should attempt to convert each element in the list to an integer. If any element cannot be converted, the function should return None. Otherwise, it should return the list of integers.","solution":"def convert_to_integer(input_variable): Converts the input variable to an integer if possible. If the input variable is a list, it attempts to convert each element to an integer. If any element in the list cannot be converted, it returns None. Parameters: input_variable: Can be of any type, including a list of elements. Returns: An integer, a list of integers, or None if conversion is not possible. try: if isinstance(input_variable, list): return [int(element) for element in input_variable] else: return int(input_variable) except (ValueError, TypeError): return None"},{"question":"Create a function that detects and returns the duplicate nodes in a singly linked list. If there are no duplicate nodes, return an empty list.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def find_duplicates(head): Detects and returns the duplicate nodes in a singly linked list. If there are no duplicate nodes, returns an empty list. if not head: return [] current = head seen = set() duplicates = set() while current: if current.val in seen: duplicates.add(current.val) else: seen.add(current.val) current = current.next return list(duplicates)"},{"question":"Create a function that determines the number of occurrences of an element in an array. The function should take an array and an element as input and return the count of occurrences of that element in the array. If the element is not found, the function should return -1.","solution":"def count_occurrences(arr, elem): Returns the count of occurrences of \`elem\` in the array \`arr\`. If the element is not found, return -1. if elem in arr: return arr.count(elem) else: return -1"},{"question":"Create a function that takes a list of integers and returns the two largest numbers in the list. If the list has less than two numbers, return an empty list instead.","solution":"def two_largest_numbers(nums): Returns the two largest numbers in the list. If the list has less than two numbers, return an empty list. if len(nums) < 2: return [] first, second = float('-inf'), float('-inf') for num in nums: if num > first: second = first first = num elif num > second and num != first: second = num return [first, second]"},{"question":"Create a function that takes a single integer input and returns the factorial of that number in Python. The function should be named \`calculate_factorial\`.","solution":"def calculate_factorial(n): Returns the factorial of the integer n. If n is 0, returns 1 as 0! is 1. if n == 0: return 1 elif n < 0: raise ValueError(\\"The input must be a non-negative integer.\\") factorial = 1 for i in range(1, n + 1): factorial *= i return factorial"},{"question":"Create a function that takes a list of integers and returns a new list containing only those integers that are greater than 10. You can assume that the input list will not be empty.","solution":"def filter_greater_than_ten(int_list): Returns a new list containing only the integers greater than 10 from the input list. Parameters: int_list (list): List of integers to filter. Returns: list: A new list containing only integers greater than 10. return [num for num in int_list if num > 10]"},{"question":"Create a function that takes an integer as an argument and returns its multiplication table in a string format. The multiplication table should include numbers from 1 to 10.","solution":"def multiplication_table(n): Returns the multiplication table for the given integer n from 1 to 10. table = [] for i in range(1, 11): table.append(f\\"{n} * {i} = {n * i}\\") return \\"n\\".join(table)"},{"question":"Create a function that generates a random password containing both uppercase and lowercase letters, numbers, and special characters. The function should be named \`generate_password\` and take two parameters: \`length\` (the desired length of the password) and \`num_special_chars\` (the number of special characters the password should contain). Implement the function using Python.","solution":"import random import string def generate_password(length, num_special_chars): Generates a random password containing upper and lower case letters, numbers, and special characters. Parameters: length (int): The desired length of the password. num_special_chars (int): The number of special characters the password should contain. Returns: str: The generated password. if num_special_chars > length: raise ValueError(\\"Number of special characters cannot exceed the total length.\\") special_chars = string.punctuation letters_and_digits = string.ascii_letters + string.digits password_chars = random.choices(special_chars, k=num_special_chars) password_chars += random.choices(letters_and_digits, k=length - num_special_chars) random.shuffle(password_chars) return ''.join(password_chars)"},{"question":"Create a function that takes a list of integers as input and returns a tuple containing the smallest and largest numbers in the list.","solution":"def find_min_max(numbers): Returns a tuple containing the smallest and largest numbers in the list. :param numbers: List of integers :return: Tuple (min, max) if not numbers: raise ValueError(\\"The list must not be empty\\") return (min(numbers), max(numbers))"},{"question":"Create a function that takes in an array of integers and returns a new array containing only the even numbers from the original array. Additionally, the returned array should be sorted in ascending order. How can this be implemented in Python?","solution":"def filter_and_sort_evens(arr): Returns a new array containing only the even numbers from the original array, sorted in ascending order. :param arr: List of integers :return: List of even integers sorted in ascending order return sorted([x for x in arr if x % 2 == 0])"},{"question":"Create a function that takes in a list of numbers and returns the difference between the largest and smallest number in the list. This function should be able to handle an empty list by returning 0.","solution":"def difference_max_min(numbers): Returns the difference between the largest and smallest number in the list. If the list is empty, return 0. if not numbers: return 0 return max(numbers) - min(numbers)"},{"question":"Create a function that takes an array of integers and returns the minimum absolute difference between any two elements in the array.","solution":"def min_absolute_difference(arr): Returns the minimum absolute difference between any two elements in the array. if len(arr) < 2: raise ValueError(\\"Array must contain at least two elements\\") arr.sort() min_diff = float('inf') for i in range(len(arr) - 1): diff = abs(arr[i] - arr[i + 1]) if diff < min_diff: min_diff = diff return min_diff"},{"question":"Create a function that generates and returns a list of prime numbers up to a given upper limit. The function should be optimized to handle large values efficiently.","solution":"def generate_primes(upper_limit): Generates a list of prime numbers up to a given upper limit. Args: upper_limit (int): The upper limit up to which to generate prime numbers. Returns: List[int]: A list of prime numbers up to the upper limit. if upper_limit < 2: return [] sieve = [True] * (upper_limit + 1) sieve[0] = sieve[1] = False for start in range(2, int(upper_limit**0.5) + 1): if sieve[start]: for multiples in range(start*start, upper_limit + 1, start): sieve[multiples] = False return [num for num, is_prime in enumerate(sieve) if is_prime]"},{"question":"Create a function that takes a list of integers as input and returns the maximum sum of a contiguous subarray within the list. You can use Kadane's algorithm for this task. Also, write a piece of code to test this function with the list [1, -3, 2, 1, -1] and print out the result.","solution":"def max_subarray_sum(nums): Returns the maximum sum of a contiguous subarray within the list of integers using Kadane's algorithm. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global # Example usage example_list = [1, -3, 2, 1, -1] print(max_subarray_sum(example_list)) # Output should be 3"},{"question":"Create a function that takes an array as input and rotates it to the left by one position. If the array is empty or has only one element, return the array as is.","solution":"def rotate_left_by_one(arr): Rotates the array to the left by one position. If the array is empty or has only one element, it returns the array as is. Parameters: arr (list): The input list. Returns: list: The list rotated to the left by one position. if len(arr) <= 1: return arr return arr[1:] + [arr[0]]"},{"question":"Create a function that takes two arguments, both of which are lists. The function should merge the two lists and remove any duplicates. The merged list should be sorted in ascending order.","solution":"def merge_and_sort_lists(list1, list2): Merges two lists, removes duplicates, and sorts the resulting list in ascending order. merged_list = list(set(list1 + list2)) merged_list.sort() return merged_list"},{"question":"Create a function that returns the nth element of a list. If the nth element is out of bounds, return the default value. Also, include error handling for non-numeric nth values.","solution":"def get_nth_element(lst, n, default=None): Returns the nth element of a list. If the nth element is out of bounds, return the default value. Also, includes error handling for non-numeric nth values. Parameters: lst (list): The list from which to get the nth element n (int): The index of the element to get default: The value to return if the index is out of bounds or if n is not numeric Returns: The nth element of the list or the default value if not isinstance(n, int): return default try: return lst[n] except IndexError: return default"},{"question":"Create a function that takes in a list of integers as an argument and returns a new list with all even numbers removed. You must write a unit test for it as well.","solution":"def remove_even_numbers(lst): Returns a new list with all even numbers removed. :param lst: List of integers :return: List of integers with even numbers removed return [num for num in lst if num % 2 != 0]"},{"question":"Create a function that will return the number of times a certain value appears in a list.","solution":"def count_occurrences(lst, value): Returns the number of times the value appears in the list. Parameters: lst: list - list of elements value: any type - value to count in the list Returns: int - the number of occurrences of value in the list return lst.count(value)"},{"question":"Create a function that takes a list of strings and returns a new list containing only the strings that have an odd number of characters. Ensure that the returned list maintains the original order of the input list.","solution":"def odd_length_strings(strings): Returns a list of strings that have an odd number of characters. Args: - strings (list of str): The input list of strings. Returns: - list of str: A list of strings with odd number of characters. return [s for s in strings if len(s) % 2 != 0]"},{"question":"Create a function that returns the length of the longest continuous subarray where the difference between the maximum and minimum values is less than or equal to a given number, k.","solution":"def longest_subarray(nums, k): Returns the length of the longest continuous subarray where the difference between the maximum and minimum values is less than or equal to k. from collections import deque if not nums: return 0 max_deque = deque() min_deque = deque() left = 0 max_length = 0 for right in range(len(nums)): while max_deque and nums[right] > nums[max_deque[-1]]: max_deque.pop() while min_deque and nums[right] < nums[min_deque[-1]]: min_deque.pop() max_deque.append(right) min_deque.append(right) while nums[max_deque[0]] - nums[min_deque[0]] > k: if max_deque[0] == left: max_deque.popleft() if min_deque[0] == left: min_deque.popleft() left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"Create a function that takes two integers as input and returns their bitwise XOR result.","solution":"def bitwise_xor(a, b): Returns the bitwise XOR of a and b. return a ^ b"},{"question":"Create a function that takes two parameters, \`a\` and \`b\`, and returns the sum of all numbers between \`a\` and \`b\` (inclusive), but only for numbers that are multiples of 3 or 5.","solution":"def sum_multiples_of_3_or_5(a, b): Returns the sum of all numbers between a and b (inclusive) that are multiples of 3 or 5. return sum(x for x in range(a, b + 1) if x % 3 == 0 or x % 5 == 0) # Optional: Example usage # print(sum_multiples_of_3_or_5(1, 10)) # Should output 33 (3 + 5 + 6 + 9 + 10)"},{"question":"Create a function that takes two lists of integers as parameters and returns a list containing the elements that are common to both lists, sorted in ascending order. The function should also ensure that the resulting list contains no duplicates.","solution":"def common_elements(list1, list2): Returns a list of common elements from two lists, sorted in ascending order without duplicates. # Convert lists to sets to remove duplicates and find intersection common_set = set(list1).intersection(set(list2)) # Convert the set to a sorted list common_list = sorted(list(common_set)) return common_list"},{"question":"Create a function that takes two arrays of numbers and returns a new array containing the numbers that are common to both arrays. The function should be efficient and handle large inputs.","solution":"def common_elements(arr1, arr2): Returns a new array containing the numbers that are common to both arr1 and arr2. set1 = set(arr1) set2 = set(arr2) common = set1.intersection(set2) return list(common)"},{"question":"Create a function that reads a CSV file using Python and returns the data in a dictionary format, where each row in the CSV becomes a dictionary with column names as keys.","solution":"import csv def read_csv_to_dict(file_path): Reads a CSV file and returns the data in dictionary format. Parameters: file_path (str): The path to the CSV file. Returns: list of dict: A list of dictionaries where each dictionary represents a row in the CSV file. with open(file_path, mode='r', newline='') as csvfile: reader = csv.DictReader(csvfile) return [row for row in reader]"},{"question":"Create a function that counts the number of duplicate elements in an array and returns a dictionary where the keys are the duplicate elements and the values are their frequencies.","solution":"def count_duplicates(arr): Returns a dictionary where the keys are the duplicate elements and the values are their frequencies. freq = {} # Establish a frequency dictionary for all elements for elem in arr: if elem in freq: freq[elem] += 1 else: freq[elem] = 1 # Filter out elements that are not duplicates duplicates = {key: value for key, value in freq.items() if value > 1} return duplicates"},{"question":"Create a function that determines if a number is a Fibonacci number. A Fibonacci number is a number that appears in the Fibonacci sequence, where each number is the sum of the two preceding ones, usually starting with 0 and 1.","solution":"import math def is_fibonacci_number(n): Determines if a number is a Fibonacci number. A number n is a Fibonacci number if and only if one or both of: 5*n^2 + 4 5*n^2 - 4 is a perfect square. if n < 0: return False def is_perfect_square(x): s = int(math.isqrt(x)) return s * s == x return is_perfect_square(5 * n * n + 4) or is_perfect_square(5 * n * n - 4)"},{"question":"Create a function that reads a string from the user, converts it to uppercase, and then checks if the string contains all distinct characters. The function should return the string in uppercase if all characters are distinct and None if they are not.","solution":"def process_string(input_string): Reads a string, converts it to uppercase, and checks if all characters are distinct. Returns the string in uppercase if all characters are distinct, otherwise None. upper_string = input_string.upper() if len(set(upper_string)) == len(upper_string): return upper_string else: return None"},{"question":"Create a function that checks if a given string is a palindrome under case-insensitive comparison. If the string is a palindrome, return true. If not, return false.","solution":"def is_palindrome(s): Returns True if the given string is a palindrome under case-insensitive comparison, otherwise False. # Normalize the string to lowercase normalized_str = s.lower() # Compare the normalized string with its reverse return normalized_str == normalized_str[::-1]"},{"question":"Create a function that takes an array of integers and returns an array with all repetitions removed. The function should not modify the original array.","solution":"def remove_repetitions(arr): Returns a list with all repetitions removed from the input array. return list(dict.fromkeys(arr))"},{"question":"Create a function that takes in two parameters: \`n\` and \`m\`. The function should determine if a number is a power of \`m\` using the given number \`n\`. If \`n\` is a power of \`m\`, the function should return the exponent as an integer. Otherwise, it should return -1.","solution":"def is_power_of_m(n, m): Determines if n is a power of m and returns the exponent if true, otherwise returns -1. if n < 1 or m <= 1: return -1 exponent = 0 current = 1 while current < n: current *= m exponent += 1 if current == n: return exponent else: return -1"},{"question":"Create a function that calculates the area of a triangle given its base and height. The function should return the area as a float. If the input base or height is less than or equal to zero, the function should return -1.0, indicating invalid input.","solution":"def calculate_triangle_area(base, height): Returns the area of a triangle given its base and height. If the base or height is less than or equal to 0, returns -1.0. if base <= 0 or height <= 0: return -1.0 return 0.5 * base * height"},{"question":"Create a function that takes an integer and returns the count of its divisors. A divisor is an integer that divides the given number without leaving a remainder.","solution":"def count_divisors(n): Returns the count of divisors of the given integer n. if n < 1: raise ValueError(\\"Input must be a positive integer.\\") count = 0 for i in range(1, n + 1): if n % i == 0: count += 1 return count"},{"question":"Create a function that checks if a given string is a palindrome. A palindrome is a string that reads the same backward as forward, e.g., \\"radar\\". The function should return \`true\` if the string is a palindrome and \`false\` otherwise. The function should be case-insensitive.","solution":"def is_palindrome(s): Checks if the given string is a palindrome. Args: s (str): The string to check. Returns: bool: True if the string is a palindrome, False otherwise. s = s.lower() # Make the string case-insensitive return s == s[::-1]"},{"question":"Create a function that generates and returns a grid of numbers. The function should take two parameters: the number of rows and the number of columns. Each cell in the grid should contain a sequence of numbers starting from 1 up to the product of the number of rows and columns. The sequence should wrap around within each row.","solution":"def generate_grid(rows, cols): Generates a grid of numbers with given rows and columns. Each cell in the grid contains a sequence of numbers starting from 1 up to the product of rows and columns. Args: rows (int): Number of rows in the grid. cols (int): Number of columns in the grid. Returns: List[List[int]]: A 2D list representing the grid. grid = [] num = 1 for r in range(rows): row = [] for c in range(cols): row.append(num) num += 1 grid.append(row) return grid"},{"question":"Create a function that takes a string and returns the total occurrences of each character in the string. The function should ignore spaces and be case-insensitive.","solution":"from collections import Counter def char_count(s): Returns a dictionary with the total occurrences of each character in the string. The function ignores spaces and is case-insensitive. s = s.replace(\\" \\", \\"\\").lower() return dict(Counter(s))"},{"question":"Create a function that takes as input an array of temperatures (in Celsius) and returns an array of temperatures converted to Fahrenheit. The conversion formula to convert from Celsius to Fahrenheit is (F = C times frac{9}{5} + 32).","solution":"def celsius_to_fahrenheit(temperatures): Converts a list of temperatures from Celsius to Fahrenheit. Parameters: temperatures (list of float): List of temperatures in Celsius. Returns: list of float: List of temperatures in Fahrenheit. return [c * 9/5 + 32 for c in temperatures]"},{"question":"Create a function that provides the nth Fibonacci number using both iterative and recursive methods. Compare the efficiency of both methods.","solution":"def fibonacci_iterative(n): Returns the nth Fibonacci number using the iterative method. if n < 0: raise ValueError(\\"Input should be a non-negative integer.\\") a, b = 0, 1 for _ in range(n): a, b = b, a + b return a def fibonacci_recursive(n): Returns the nth Fibonacci number using the recursive method. if n < 0: raise ValueError(\\"Input should be a non-negative integer.\\") if n == 0: return 0 if n == 1: return 1 return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2)"},{"question":"Create a function that returns the sum of all elements in a list. The function should handle the case where the list is empty.","solution":"def sum_list(lst): Returns the sum of all elements in a list. If the list is empty, returns 0. return sum(lst)"},{"question":"Create a function that converts a Roman numeral to an integer. Roman numerals are represented by seven different symbols: I, V, X, L, C, D, and M. The value of each symbol is 1, 5, 10, 50, 100, 500, and 900, respectively, and a symbol's value increases from left to right. However, if a smaller numeral appears to the left of a larger numeral, it is intended to be subtracted from the larger numeral. For example, IV is intended to represent 4, and IX is intended to represent 9.","solution":"def roman_to_integer(s: str) -> int: Convert a Roman numeral to an integer. Args: s (str): The Roman numeral string Returns: int: The equivalent integer roman_values = { 'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000 } total = 0 previous_value = 0 for char in reversed(s): current_value = roman_values[char] if current_value >= previous_value: total += current_value else: total -= current_value previous_value = current_value return total"},{"question":"Create a function that takes in a string s and returns the minimum number of deletions required to make the string a palindrome.","solution":"def min_deletions_to_palindrome(s): Returns the minimum number of deletions required to make the string s a palindrome. n = len(s) def lcs(x, y): m = len(x) dp = [[0] * (m + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, m + 1): if x[i - 1] == y[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][m] rev_s = s[::-1] lcs_length = lcs(s, rev_s) return n - lcs_length"},{"question":"Create a function that takes a single integer as input and returns a new integer that is the reverse of the input integer without using any built-in functions for reversing strings or numbers. Additionally, handle negative numbers and zeros.","solution":"def reverse_integer(n): Returns the integer that is the reverse of the input integer n. reversed_number = 0 negative = n < 0 n = abs(n) while n != 0: reversed_number = reversed_number * 10 + n % 10 n = n // 10 return -reversed_number if negative else reversed_number"},{"question":"Create a function that takes in an array and an integer N as input, and returns the Nth largest element in the array.","solution":"def nth_largest(arr, N): Returns the Nth largest element in the array. if N > len(arr) or N <= 0: raise ValueError(\\"N is out of range\\") sorted_arr = sorted(arr, reverse=True) return sorted_arr[N-1]"},{"question":"Create a function that takes an array of integers and returns a new array containing only the even numbers from the original array. Use Python programming language.","solution":"def filter_even_numbers(arr): Returns a list containing only the even numbers from the given array. return [num for num in arr if num % 2 == 0]"},{"question":"Create a function that implements a one-pass solution to find the majority element in an array of integers. The function should have a time complexity of O(n) and should not use any extra space.","solution":"def majority_element(nums): Finds the majority element in an array of integers. A majority element is an element that makes up more than half of the items in the list. Boyer-Moore Voting Algorithm is used here to achieve O(n) time complexity and O(1) space complexity. :param nums: List[int] - the input array of integers :return: int - the majority element count = 0 candidate = None for num in nums: if count == 0: candidate = num count += 1 if num == candidate else -1 return candidate"},{"question":"Create a function that receives a list of integers as its argument and returns a new list where each element is double the corresponding element in the input list.","solution":"def double_elements(input_list): Returns a list where each element is double the corresponding element in the input list. Parameters: input_list (list): A list of integers. Returns: list: A new list with elements doubled. return [element * 2 for element in input_list]"},{"question":"Create a function that takes a list of integers as input and returns two values: the sum of list elements and the sum of their squares.","solution":"def sum_and_sum_of_squares(nums): Returns the sum of the list elements and the sum of their squares. :param nums: List of integers :return: Tuple (sum of elements, sum of their squares) total_sum = sum(nums) total_sum_of_squares = sum(x**2 for x in nums) return total_sum, total_sum_of_squares"},{"question":"Create a function that mimics the behavior of the built-in \`map()\` function in Python. The \`my_map()\` function should take a function and a list as parameters and return a new list with the function applied to each element of the input list.","solution":"def my_map(func, lst): Mimics the behavior of Python's built-in map() function. Parameters: func (function): A function that will be applied to each element of the list. lst (list): A list of elements. Returns: list: A new list with the function applied to each element of the input list. return [func(element) for element in lst]"},{"question":"Create a function that takes a list of numbers as an input and returns the second largest number in the list if it exists. If the second largest number does not exist (i.e., the list has less than two unique numbers), the function should return \`None\`.","solution":"def second_largest(numbers): Returns the second largest number in the list if it exists. If the list has less than two unique numbers, returns None. if not numbers or len(numbers) < 2: return None unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return None unique_numbers.sort(reverse=True) return unique_numbers[1]"},{"question":"Create a function that takes in a date string in the format \\"YYYY-MM-DD\\" and returns the corresponding day of the year. For example, the date \\"2023-01-01\\" would return 1, and \\"2023-12-31\\" would return 365.","solution":"def day_of_year(date_string): Returns the corresponding day of the year for a given date string in format \\"YYYY-MM-DD\\". from datetime import datetime # Parse the input date string date_object = datetime.strptime(date_string, '%Y-%m-%d') # Calculate the day of the year day_of_year = date_object.timetuple().tm_yday return day_of_year"},{"question":"Create a function that takes a positive integer as input and returns it reversed. For example, if the input is 1234, the function should return 4321. Also, ensure that the function throws an error if the input is not a positive integer.","solution":"def reverse_integer(n): Returns the reversed integer of a positive integer n. Throws a ValueError if the input is not a positive integer. if not isinstance(n, int) or n <= 0: raise ValueError(\\"Input must be a positive integer\\") return int(str(n)[::-1])"},{"question":"Create a function that takes in two strings and decide if a new string can be formed by taking characters from the second string in the same order that they appear in the first string. For example, if \`s1=\\"abc\\"\` and \`s2=\\"abcatgda\\"\`, the function should return \`true\` because \`s2\` contains \`s1\` in the same order.","solution":"def can_form_string(s1, s2): Determines if s1 can be formed by characters in s2 in the same order. :param s1: First string. :param s2: Second string. :return: True if s1 can be formed from s2, otherwise False. # Create an iterator from s2 it = iter(s2) # Check if all characters in s1 can be found in the iterator in the same order return all(char in it for char in s1)"},{"question":"Create a function that generates all possible subsets of a set and returns them as a list of lists. The function should be efficient and handle large sets.","solution":"def generate_subsets(s): Generates all possible subsets of a set. Parameters: s (set): A set of elements. Returns: list: A list of lists, where each list is a subset of the original set. list_s = list(s) subsets = [] num_subsets = 1 << len(list_s) # 2^n possible subsets for i in range(num_subsets): subset = [list_s[j] for j in range(len(list_s)) if (i & (1 << j))] subsets.append(subset) return subsets"},{"question":"Create a function that receives a list of integers, and returns the count of positive odd numbers in the list.","solution":"def count_positive_odd_numbers(numbers): Returns the count of positive odd numbers in the given list of integers. Parameters: numbers (list of int): The list of integers to be checked. Returns: int: The count of positive odd numbers in the list. return sum(1 for num in numbers if num > 0 and num % 2 != 0)"},{"question":"Create a function that accepts two lists of equal length and returns a new list containing the maximum values from each pair of corresponding elements from the input lists.","solution":"def max_elements(list1, list2): Returns a list containing the maximum values from each pair of corresponding elements from the input lists. Args: list1: First list of numbers. list2: Second list of numbers. Returns: A new list with the maximum values from each pair of elements. if len(list1) != len(list2): raise ValueError(\\"Both lists must have the same length.\\") return [max(a, b) for a, b in zip(list1, list2)]"},{"question":"Create a function that will search through a list of strings (global_dir) and find all strings that start with a certain character 'prefix'. Once found, append these strings to the 'found_strings' list. Return the 'found_strings' list when you're done.","solution":"def find_strings_with_prefix(global_dir, prefix): Searches through a list of strings and finds all strings that start with a given prefix. Args: global_dir (list of str): List of strings to search through. prefix (str): The prefix to search for. Returns: list of str: List of strings that start with the given prefix. found_strings = [] for string in global_dir: if string.startswith(prefix): found_strings.append(string) return found_strings"},{"question":"Create a function that takes two strings as input and returns the number of differing characters between them. If the strings are of unequal length, the comparison will only occur for the length of the shorter string. For example, if the strings are \\"abc\\" and \\"abef\\", the function should return 2, as only the first two characters differ.","solution":"def count_differences(str1, str2): Returns the number of differing characters between two strings. Comparison occurs only up to the length of the shorter string. min_length = min(len(str1), len(str2)) differences = 0 for i in range(min_length): if str1[i] != str2[i]: differences += 1 return differences"},{"question":"Create a function that repeatedly filters out all the numbers that contain the digit '5' from a list of numbers and returns the final result list. The function should stop iterating when the length of the resulting list is 5. If a number is '0', it should be excluded from the result list.","solution":"def filter_numbers(numbers): Filters out numbers containing the digit '5' and returns a list with up to 5 numbers, excluding '0'. def contains_digit_five(number): return '5' in str(number) result = [] for number in numbers: if len(result) == 5: break if not contains_digit_five(number) and number != 0: result.append(number) return result"},{"question":"Create a function that takes a list and an integer \`n\` as parameters and returns a list containing every \`n\`th element from the original list. For example, if the input list is \`[1, 2, 3, 4, 5, 6, 7, 8, 9]\` and \`n=3\`, the function should return \`[1, 4, 7]\`.","solution":"def every_nth_element(lst, n): Returns a list containing every nth element from the original list. Parameters: lst (list): The input list. n (int): The step size to select elements. Returns: list: A list containing every nth element. return lst[::n]"},{"question":"Create a function that takes an integer \`n\` as input and returns the sum of the first \`n\` odd numbers. For example, if \`n\` is 3, the function should return the sum of the first three odd numbers, which are 1, 3, and 5.","solution":"def sum_of_first_n_odds(n): Returns the sum of the first \`n\` odd numbers. Parameters: n (int): The number of first odd numbers to sum. Returns: int: The sum of the first \`n\` odd numbers. return n * n"},{"question":"Create a function that calculates the Fibonacci sequence up to a given number \`n\`. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones.","solution":"def fibonacci(n): Returns a list containing the Fibonacci sequence up to n elements. if n <= 0: return [] if n == 1: return [0] if n == 2: return [0, 1] sequence = [0, 1] while len(sequence) < n: sequence.append(sequence[-1] + sequence[-2]) return sequence"},{"question":"Create a function that reverses the order of words in a given string. For example, if \\"The quick brown fox\\" is passed to the function, it should return \\"fox brown quick The\\".","solution":"def reverse_words(s): Reverses the order of words in the given string. Args: s (str): The original string with words to be reversed. Returns: str: The string with the order of words reversed. return ' '.join(s.split()[::-1])"},{"question":"Create a function that generates a sequence of numbers starting at 1 and incrementally adds 1 to reach the given number \`n\`. If the number is not provided, the sequence should iterate until 100. The function should return the complete sequence.","solution":"def generate_sequence(n=100): Generates a sequence of numbers starting at 1 and incrementally adds 1 to reach the given number n. If n is not provided, the sequence will iterate until 100. Parameters: n (int): The end number of the sequence (inclusive). Returns: List[int]: A list containing the sequence of numbers. return list(range(1, n + 1))"},{"question":"Create a function that generates the nth Fibonacci number. The function should be efficient and capable of handling large values of n, up to 10^9. The function should use a technique that does not involve direct recursion or an array to store intermediate results.","solution":"def fibonacci(n): Generate the nth Fibonacci number using matrix exponentiation. This approach is efficient and can handle large values of n. def matrix_mult(A, B): Multiplies two 2x2 matrices A and B. return [ [A[0][0] * B[0][0] + A[0][1] * B[1][0], A[0][0] * B[0][1] + A[0][1] * B[1][1]], [A[1][0] * B[0][0] + A[1][1] * B[1][0], A[1][0] * B[0][1] + A[1][1] * B[1][1]], ] def matrix_pow(M, power): Raises the 2x2 matrix M to the power \`power\` using exponentiation by squaring. result = [[1, 0], [0, 1]] # Identity matrix while power > 0: if power % 2 == 1: result = matrix_mult(result, M) M = matrix_mult(M, M) power //= 2 return result if n == 0: return 0 elif n == 1: return 1 F = [[1, 1], [1, 0]] result = matrix_pow(F, n-1) return result[0][0]"},{"question":"Create a function that takes two lists of integers, and returns a list of integers that are common to both lists, without any duplicates.","solution":"def common_elements(list1, list2): Returns a list of integers that are common to both list1 and list2, without any duplicates. return list(set(list1) & set(list2))"},{"question":"Create a function that takes two parameters, an array and a number. The function should return all the indices of the array where the number is found. If the number is not found, the function should return an empty array.","solution":"def find_indices(arr, num): Returns all indices of the array where the number is found. If the number is not found, returns an empty array. Parameters: arr (list): The array to search through. num (int/float): The number to search for in the array. Returns: list: A list of indices where the number is found. indices = [] for i, value in enumerate(arr): if value == num: indices.append(i) return indices"},{"question":"Create a function that takes an integer as input and returns the binary representation of that integer.","solution":"def to_binary(n): Returns the binary representation of n as a string. if n >= 0: return bin(n)[2:] else: return '-' + bin(n)[3:]"},{"question":"Create a function that takes an integer and converts it to a binary string. The resulting string should have leading zeros appended so that the string is at least 8 characters long. If the integer is larger than what can be represented with 8 bits, it should be truncated to fit within 8 bits.","solution":"def int_to_padded_bin(num): Converts an integer to a binary string with at least 8 characters, including leading zeros. If the integer is larger than what can be represented with 8 bits (i.e., > 255), it truncates the string to fit within 8 bits. Args: num (int): The integer to convert to a binary string. Returns: str: The binary string representation of the integer, padded to be at least 8 characters long. bin_str = bin(num & 0b11111111)[2:] # Mask num to 8 bits and convert to binary string. return bin_str.zfill(8)"},{"question":"Create a function that takes in a number and returns the sum of its digits. To solve this problem, you should also write a test function to ensure that the function is working correctly.","solution":"def sum_of_digits(number): Returns the sum of the digits of a number. Parameters: number (int): The input number. Returns: int: The sum of the digits. Example: sum_of_digits(123) -> 6 (1 + 2 + 3) return sum(int(digit) for digit in str(abs(number)))"},{"question":"Create a function that takes an integer as an argument and returns a string of digits in reverse order.","solution":"def reverse_digits(number): Takes an integer as an argument and returns a string of its digits in reverse order. return str(number)[::-1]"},{"question":"Create a function that takes two lists of integers and return their sum as a new list. 각 두 개의 정수 리스트가 주어졌을 때 그들의 합을 새로운 리스트로 반환하는 함수를 만들다.","solution":"def sum_lists(list1, list2): Takes two lists of integers and returns their sum as a new list. The sum is calculated element-wise, and if the lists are of different lengths, the extra elements of the longer list are appended to the result. # Determine the length of the shorter list. min_length = min(len(list1), len(list2)) # Start with the element-wise sum of the two lists. result = [list1[i] + list2[i] for i in range(min_length)] # Append the remainder of the longer list to the result. if len(list1) > min_length: result.extend(list1[min_length:]) elif len(list2) > min_length: result.extend(list2[min_length:]) return result"},{"question":"Create a function that finds the second smallest element in an array of integers. If the array has less than two unique elements, the function should return -1.","solution":"def second_smallest(arr): Finds the second smallest element in an array of integers. If the array has less than two unique elements, return -1. # Remove duplicates unique_elements = list(set(arr)) # Check if there are at least two unique elements if len(unique_elements) < 2: return -1 # Sort the unique elements unique_elements.sort() # Return the second smallest element return unique_elements[1]"},{"question":"Create a function that implements a stack data structure in Python. Th stack should support the following operations: push, pop, peek, and is_empty. Implement these operations using Python's list to simulate the stack.","solution":"class Stack: def __init__(self): self.items = [] def push(self, item): self.items.append(item) def pop(self): if not self.is_empty(): return self.items.pop() return None # Return None if the stack is empty def peek(self): if not self.is_empty(): return self.items[-1] return None # Return None if the stack is empty def is_empty(self): return len(self.items) == 0"},{"question":"Create a function that takes an array of integers and returns the maximum sum of any contiguous subarray. You should also return the starting and ending indices of this subarray. If there are multiple subarrays with the same maximum sum, return the one that starts first.","solution":"def max_subarray(arr): Finds the maximum sum of any contiguous subarray along with the starting and ending indices of this subarray. Parameters: arr (list): List of integers. Returns: tuple: (maximum sum, starting index, ending index) max_so_far = float('-inf') max_ending_here = 0 start = 0 end = 0 s = 0 for i in range(len(arr)): max_ending_here += arr[i] if max_ending_here > max_so_far: max_so_far = max_ending_here start = s end = i if max_ending_here < 0: max_ending_here = 0 s = i + 1 return max_so_far, start, end"},{"question":"Create a function that accepts an integer \`n\` and return the integer with digits in reverse order. For example, if the input is \`123\`, the function should return \`321\`.","solution":"def reverse_digits(n): Returns the integer n with its digits in reverse order. is_negative = n < 0 n = abs(n) reversed_n = int(str(n)[::-1]) return -reversed_n if is_negative else reversed_n"},{"question":"Create a function that adds all even numbers in a given list. If there are no even numbers, throw an exception.","solution":"def add_even_numbers(nums): Returns the sum of all even numbers in the given list \`nums\`. Raises a ValueError if no even numbers are found. even_numbers = [num for num in nums if num % 2 == 0] if not even_numbers: raise ValueError(\\"No even numbers found in the list\\") return sum(even_numbers)"},{"question":"Create a function that takes a string as input, and returns a reversed string. The function should also handle cases where the string contains special characters and spaces. For instance, reversing the string \\"Hello, World!\\" should return \\"dlroW ,olleH\\".","solution":"def reverse_string(input_string): Returns the reversed string of the input string. return input_string[::-1]"},{"question":"Create a function that returns the \`n\`th prime number using the Sieve of Eratosthenes algorithm. The function should be named \`getNthPrime\` and take an integer \`n\` as its argument. The function should return the \`n\`th prime number.","solution":"def getNthPrime(n): Returns the \`n\`th prime number using the Sieve of Eratosthenes algorithm. if n < 1: return None # Return None for non-positive inputs # Estimating the upper bound for the nth prime using the prime number approximation import math if n < 6: upper_bound = 15 else: upper_bound = int(n * (math.log(n) + math.log(math.log(n)))) sieve = [True] * (upper_bound + 1) p = 2 while p * p <= upper_bound: if sieve[p]: for i in range(p * p, upper_bound + 1, p): sieve[i] = False p += 1 primes = [] for p in range(2, upper_bound + 1): if sieve[p]: primes.append(p) return primes[n-1] if n <= len(primes) else None"},{"question":"Create a function that can generate a list of prime numbers up to and including a given number n. Additionally, the function should be able to handle large numbers efficiently.","solution":"def generate_primes(n): Returns a list of all prime numbers up to and including n. Parameters: n (int): The upper limit for the prime numbers list (inclusive). Returns: list: A list of prime numbers up to and including n. if n < 2: return [] sieve = [True] * (n + 1) sieve[0] = sieve[1] = False p = 2 while p * p <= n: if sieve[p]: for i in range(p * p, n + 1, p): sieve[i] = False p += 1 return [p for p in range(n + 1) if sieve[p]]"},{"question":"Create a function that checks if the last character of the string is 'd' or not.","solution":"def ends_with_d(string): Checks if the last character of the string is 'd'. Args: string (str): The string to be checked. Returns: bool: True if the string ends with 'd', False otherwise. return string.endswith('d')"},{"question":"Create a function that takes a 2D vector of integers and returns a vector of the second elements from each sub-vector. If a sub-vector has less than two elements, return -1 for that position in the output.","solution":"def get_second_elements(vectors): Returns a list where each element is the second element of the corresponding input vector. If the input vector has less than two elements, returns -1 for that position. result = [] for vector in vectors: if len(vector) < 2: result.append(-1) else: result.append(vector[1]) return result"},{"question":"Create a function that will take a list of items and return a string containing the items with ' OR ' and ' AND ' connecting them and the last item with ' AND ' before it.","solution":"def combine_items(items): Combines a list of items into a string with ' OR ' and ' AND '. Parameters: items (list): A list of strings to combine. Returns: str: A string with items combined as per the required rules. if not items: return \\"\\" elif len(items) == 1: return items[0] else: return ' OR '.join(items[:-1]) + ' AND ' + items[-1]"},{"question":"Create a function that takes no parameters and prints a checkerboard pattern using '*' and ' ' characters. The checkerboard should have dimensions of 8x8.","solution":"def print_checkerboard(): Prints an 8x8 checkerboard pattern using '*' and ' ' characters. for row in range(8): for col in range(8): if (row + col) % 2 == 0: print('*', end='') else: print(' ', end='') print()"},{"question":"Create a function that takes two strings as inputs and returns the sum of their corresponding ASCII values.","solution":"def sum_ascii_values(str1, str2): Takes two strings as inputs and returns the sum of their corresponding ASCII values. return sum(ord(char) for char in str1) + sum(ord(char) for char in str2)"},{"question":"Create a function that takes a list of floating-point numbers and returns a new list containing the square of each number in the original list. The function should be efficient and avoid unnecessary computations or data structures.","solution":"def square_list(numbers): Returns a list of squares of the given floating-point numbers. Args: numbers (list): List of floating-point numbers. Returns: list: List of squares of the given numbers. return [x**2 for x in numbers]"},{"question":"Create a function that takes two parameters, \`n\` (number of sides of a polygon) and \`r\` (radius of the circle that inscribes the polygon). The function should return the perimeter of the polygon. The perimeter is calculated as the sum of all the sides of the polygon. The number of sides of the polygon is \`n\`, and each side is equal to \`2 * r * sin(Pi / n)\`. Given that \`r = 1\`, you also need to account for the possibility where \`n\` is either less than or equal to 2, in which case the function should return \`0\`.","solution":"import math def perimeter_of_polygon(n, r): Returns the perimeter of a regular polygon with 'n' sides inscribed in a circle of radius 'r'. If n <= 2, returns 0 as a polygon can't have less than 3 sides. if n <= 2: return 0 side_length = 2 * r * math.sin(math.pi / n) perimeter = n * side_length return perimeter"},{"question":"Create a function that takes a list of integers as an input and returns a new list where each integer is decremented by 1, but only if it's even. The function should be named \`decrement_even_numbers\` and the input list is named \`numbers\`. The function should handle any list of integers, including empty lists and lists with no even numbers.","solution":"def decrement_even_numbers(numbers): This function takes a list of integers and returns a new list where each even integer is decremented by 1. Odd integers remain unchanged. return [(n - 1) if n % 2 == 0 else n for n in numbers]"},{"question":"Create a function that takes a string (str) as input and returns a new string which is the reverse of input string.","solution":"def reverse_string(input_str): Returns the reverse of the input string. return input_str[::-1]"},{"question":"Create a function that takes an integer and returns the least number of steps required to reach 1 using a dynamic programming approach. The steps can only be either subtracting 1, dividing by 3, or dividing by 4.","solution":"def min_steps_to_one(n): Returns the least number of steps required to reach 1, using the operations: subtract 1, divide by 3, or divide by 4. if n <= 0: raise ValueError(\\"Input must be a positive integer.\\") dp = [float('inf')] * (n + 1) dp[1] = 0 # Base case: 0 steps needed to reach 1 from 1 for i in range(2, n + 1): dp[i] = dp[i - 1] + 1 # Subtract 1 step if i % 3 == 0: dp[i] = min(dp[i], dp[i // 3] + 1) # Divide by 3 step if i % 4 == 0: dp[i] = min(dp[i], dp[i // 4] + 1) # Divide by 4 step return dp[n]"},{"question":"Create a function that takes two strings as input, compares their lengths, and returns the string with the greater length. If both strings have the same length, the function should return a message indicating that. Use string manipulation techniques to solve this problem.","solution":"def compare_string_lengths(str1, str2): Compares two strings and returns the one with the greater length. If both strings have the same length, returns a message indicating that. if len(str1) > len(str2): return str1 elif len(str1) < len(str2): return str2 else: return \\"Both strings have the same length\\""},{"question":"Create a function that takes a string as an argument and returns a list of all characters that occur more than once. If no characters match this criteria, it should return an empty list. The function should not be case-sensitive.","solution":"def characters_occur_more_than_once(s): Returns a list of all characters that occur more than once in the given string, case-insensitive. Parameters: s (str): Input string. Returns: List[str]: List of characters that occur more than once. # Convert the string to lower case s = s.lower() # Create a dictionary to count occurrences of each character char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Create a list of characters that occur more than once result = [char for char, count in char_count.items() if count > 1] return result"},{"question":"Create a function that checks if a sequence of numbers is strictly decreasing by a constant difference. For example, a sequence of numbers like 8, 5, 2, -1 is strictly decreasing by a difference of 3. The function should return True if the sequence is strictly decreasing by a constant difference, and False otherwise. The function should also handle cases where the sequence has duplicates or non-integer values.","solution":"def is_strictly_decreasing_by_constant(sequence): Returns True if the sequence is strictly decreasing by a constant difference, False otherwise. Handles non-integer values and duplicates by considering only the strict decreasing order. if len(sequence) < 2: return True common_diff = sequence[0] - sequence[1] for i in range(1, len(sequence) - 1): if sequence[i] - sequence[i + 1] != common_diff: return False return True"},{"question":"Create a function that returns the sum of all numbers in a given list of integers. If the list is empty, return 0. What's the overall complexity of this function?","solution":"def sum_of_list(numbers): Returns the sum of all numbers in a given list of integers. If the list is empty, it returns 0. return sum(numbers) # The overall time complexity of this function is O(n), # where n is the number of elements in the list."},{"question":"Create a function that finds the maximum sum of a continuous subarray within a one-dimensional array of integers. This is known as Kadane's Algorithm.","solution":"def max_subarray_sum(nums): Finds the maximum sum of a continuous subarray within the given list of integers. Args: nums (list): A list of integers. Returns: int: The maximum sum of the continuous subarray. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that takes a list of integers and returns a new list containing the sum of each pair of consecutive integers in the original list. If the original list is empty or contains only one element, return an empty list.","solution":"def sum_consecutive_pairs(lst): Takes a list of integers and returns a new list containing the sum of each pair of consecutive integers. If the list is empty or contains only one element, returns an empty list. Parameters: lst (list): A list of integers. Returns: list: A new list containing the sum of each pair of consecutive integers. if len(lst) < 2: return [] result = [] for i in range(len(lst) - 1): result.append(lst[i] + lst[i + 1]) return result"},{"question":"Create a function that takes a string and makes each vowel in the string uppercase. The function should leave the consonants unchanged. How can this be done in Python?","solution":"def uppercase_vowels(s): Converts all vowels in the string to uppercase, leaving consonants unchanged. :param s: String input :return: String with vowels in uppercase vowels = 'aeiou' result = ''.join([char.upper() if char in vowels else char for char in s]) return result"},{"question":"Create a function that takes a string as a parameter and returns the second last character of the string. If the string is shorter than two characters, return an empty string.","solution":"def second_last_character(s): Returns the second last character of the string s. If the string is shorter than two characters, returns an empty string. if len(s) < 2: return \\"\\" return s[-2]"},{"question":"Create a function that returns \`True\` if the given string is a palindrome and \`False\` otherwise. A palindrome is a string that reads the same backward as forward, ignoring spaces, punctuation, and capitalization.","solution":"import string def is_palindrome(s): Returns True if the string s is a palindrome, and False otherwise. A palindrome reads the same backward as forward, ignoring spaces, punctuation, and capitalization. # Normalize the string: remove punctuations, spaces and convert to lowercase translator = str.maketrans('', '', string.punctuation + ' ') normalized_s = s.translate(translator).lower() # Check if the normalized string is equal to its reverse return normalized_s == normalized_s[::-1]"},{"question":"Create a function that takes in a natural number and performs an operation on it to produce a larger number. The operation should be such that when the result is divided by 7, the remainder is the same as the original number. For example, if the input number is 3, the function should return 21, because 21 mod 7 = 3. If the input is 5, the function should return 35, because 35 mod 7 = 5.","solution":"def produce_larger_number(n): Takes a natural number n and returns a larger number such that when the result is divided by 7, the remainder is the same as the original number. return n * 7"},{"question":"Create a function that takes in a list of lists of integers, where each inner list represents a row in a 2D array. The function should return the sum of all the integers in the 2D array.","solution":"def sum_2d_array(array): Returns the sum of all the integers in a 2D array. Parameters: array (list of lists of int): The 2D array to sum up. Returns: int: The sum of all integers in the array. return sum(sum(row) for row in array)"},{"question":"Create a function that calculates the minimum number of coins required to make change for a given amount. The function should take three parameters: the total amount, a list of coin denominations, and the minimum number of coins needed so far (initially 0). The function will be called recursively until the total amount is 0. If the total amount becomes negative, the function should return infinity to indicate that the change cannot be made with the given denominations. If the total amount is exactly 0, the function should return the minimum number of coins needed so far. Otherwise, it should return the minimum of the current minimum coins needed or the result of subtracting each coin denomination from the total amount and adding 1 to the minimum coins needed for each subtraction.","solution":"def min_coins(total_amount, denominations, min_coins_so_far=0): if total_amount < 0: return float('inf') if total_amount == 0: return min_coins_so_far result = float('inf') for coin in denominations: result = min(result, min_coins(total_amount - coin, denominations, min_coins_so_far + 1)) return result"},{"question":"Create a function that takes two integers as input and returns the minimum among them. You need to implement this without using any built-in functions.","solution":"def minimum(a, b): Returns the minimum of two integers a and b without using any built-in functions. if a < b: return a else: return b"},{"question":"Create a function that takes a list of integers and returns a new list containing only the integers that are greater than a given number.","solution":"def filter_greater_than(numbers, threshold): Returns a new list containing only the integers from the input list that are greater than the given threshold. :param numbers: List of integers :param threshold: Integer to compare the elements of the list against :return: Filtered list return [num for num in numbers if num > threshold]"},{"question":"Create a function that takes a string of numbers separated by spaces and returns a list of the numbers with each number incremented by 1. The function should handle any valid integer values and ignore any non-integer values.","solution":"def increment_numbers(input_string): Takes a string of numbers separated by spaces and returns a list of the numbers with each number incremented by 1. Ignores any non-integer values. :param input_string: str :return: list of ints result = [] for item in input_string.split(): try: number = int(item) result.append(number + 1) except ValueError: pass # Ignore non-integer values return result"},{"question":"Create a function that checks if the given string is a palindrome after removing all non-alphanumeric characters and converting all characters to lowercase. A string is considered a palindrome if it reads the same backward as forward, ignoring spaces, punctuation, and capitalization.","solution":"import re def is_palindrome(s): Checks if the given string s is a palindrome after removing all non-alphanumeric characters and converting all characters to lowercase. s = re.sub(r'[^a-zA-Z0-9]', '', s).lower() return s == s[::-1]"},{"question":"Create a function that takes a list of integers and returns the difference between the sum of the even numbers and the sum of the odd numbers in the list. The function should return 0 if the list is empty.","solution":"def sum_even_odd_difference(numbers): Returns the difference between the sum of the even numbers and the sum of the odd numbers in the list. The function returns 0 if the list is empty. sum_even = sum(n for n in numbers if n % 2 == 0) sum_odd = sum(n for n in numbers if n % 2 != 0) return sum_even - sum_odd"},{"question":"Create a function that takes a positive integer \`n\` as an input and returns \`true\` if \`n\` is a perfect square and \`false\` otherwise. A perfect square is an integer that is the square of an integer. For example, 16 is a perfect square because it is 4^2 (4 squared is 16), but 14 is not a perfect square.","solution":"import math def is_perfect_square(n): Returns True if n is a perfect square, otherwise False. if n < 0: return False sqrt_n = int(math.sqrt(n)) return sqrt_n * sqrt_n == n"},{"question":"Create a function that checks if all elements in a given list are greater than a specified number. For example, if the list is [3, 6, 9, 12, 15] and the specified number is 5, the function should return True since all elements in the list are greater than 5. If any number is less than or equal to the specified number, the function should return False.","solution":"def all_elements_greater_than(lst, num): Checks if all elements in the list are greater than the specified number. Parameters: lst (list): The list of numbers to check. num (int): The number to compare with. Returns: bool: True if all elements in the list are greater than num, False otherwise. return all(x > num for x in lst)"},{"question":"Create a function that takes two parameters, an integer and a boolean, and returns a string. If the boolean is true, return the integer as a binary string. If the boolean is false, return the integer as an octal string.","solution":"def int_to_string(num, to_binary): Converts an integer to a binary or octal string representation based on the value of to_binary. :param num: Integer to be converted. :param to_binary: Boolean flag indicating the conversion type. :return: String representation of the integer in binary if to_binary is True, otherwise in octal. if to_binary: return bin(num)[2:] else: return oct(num)[2:]"},{"question":"Create a function that takes an integer \`n\` as input and returns the sum of all numbers from 1 to \`n\` (inclusive) that are divisible by 3 or 5.","solution":"def sum_divisible_by_3_or_5(n): Returns the sum of all numbers from 1 to n (inclusive) that are divisible by 3 or 5. return sum(x for x in range(1, n + 1) if x % 3 == 0 or x % 5 == 0)"},{"question":"Create a function that finds the largest palindrome within a given string. The function should return the largest palindrome substring. If no palindrome is found, return an empty string.","solution":"def largest_palindrome_substring(s): def is_palindrome(sub): return sub == sub[::-1] max_len = 0 longest_palindrome = \\"\\" for i in range(len(s)): for j in range(i, len(s)): substr = s[i:j+1] if is_palindrome(substr) and len(substr) > max_len: max_len = len(substr) longest_palindrome = substr return longest_palindrome"},{"question":"Create a function that takes in an integer and returns a string representation of the integer reversed. Additionally, the function should handle negative numbers and should include a functionality to remove any leading zeros from the reversed string.","solution":"def reverse_integer(n): Reverses the digits of an integer and returns as a string without leading zeros. For negative numbers, the minus sign is preserved. if n == 0: return '0' is_negative = n < 0 n = abs(n) reversed_str = str(n)[::-1].lstrip('0') if is_negative: return f\\"-{reversed_str}\\" else: return reversed_str"},{"question":"Create a function that multiplies a given number by a multiplier that is randomly generated. The function should repeat this operation 20 times and collect the results in a list. The multiplier should be restricted within the range of 1 to 5. For each operation, print the original number, the randomly generated multiplier, and the result. Return the list of results.","solution":"import random def multiply_with_random(num): Multiplies the given number by a random multiplier between 1 and 5. Repeats the operation 20 times and returns a list of results. Prints the original number, the random multiplier, and the result each time. results = [] for _ in range(20): multiplier = random.randint(1, 5) result = num * multiplier print(f\\"Original number: {num}, Multiplier: {multiplier}, Result: {result}\\") results.append(result) return results"},{"question":"Create a function that generates a list of n numbers, where each number is the sum of the squares of its digits. For example, if n = 5, the list should be [1, 1, 1, 1, 1]. If n = 10, the list should be [1, 1, 1, 1, 1, 1, 1, 1, 1, 1].","solution":"def sum_of_squares(n): Generates a list of n numbers, where each number is the sum of the squares of its digits. For this specific task request, since the aim is to have the same numbers repeated, the value being repeated will be 1 and returned as a list of length n. :param n: Length of the list to generate :return: List of n numbers where each value is 1 return [1] * n"},{"question":"Create a function that checks if a string is a palindrome. I want the function to be case-insensitive and to ignore non-alphanumeric characters.","solution":"import re def is_palindrome(s): Checks if a string is a palindrome, ignoring case and non-alphanumeric characters. # Remove non-alphanumeric characters and convert to lowercase cleaned_s = re.sub(r'[^a-zA-Z0-9]', '', s).lower() # Check if the cleaned string is equal to its reverse return cleaned_s == cleaned_s[::-1]"},{"question":"Create a function that generates a list of Fibonacci numbers up to a specified number \`n\`. The function should only include Fibonacci numbers that are less than or equal to \`n\`. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the previous two.","solution":"def generate_fibonacci(n): Generates a list of Fibonacci numbers less than or equal to n. Parameters: n (int): The maximum value for Fibonacci numbers Returns: list: A list of Fibonacci numbers less than or equal to n fib_sequence = [] a, b = 0, 1 while a <= n: fib_sequence.append(a) a, b = b, a + b return fib_sequence"},{"question":"Create a function that accepts three arguments: a start time, an end time, and an interval time. The function should return True if any given point in the interval between the start time and end time matches the provided interval time, using 24-hour format.","solution":"def is_interval_match(start_time, end_time, interval_time): Checks if the interval time matches any point between the start time and end time, using 24-hour format. Arguments: start_time (str): Start time in HH:MM format. end_time (str): End time in HH:MM format. interval_time (str): Interval time in HH:MM format. Returns: bool: True if interval_time matches any point between start_time and end_time, False otherwise. from datetime import datetime, timedelta # Convert strings to datetime objects start = datetime.strptime(start_time, \\"%H:%M\\") end = datetime.strptime(end_time, \\"%H:%M\\") interval = datetime.strptime(interval_time, \\"%H:%M\\") if start >= end: # handle cases where end time is on the next day end += timedelta(days=1) current = start while current < end: if current.time() == interval.time(): return True current += timedelta(minutes=1) # move one minute forward return False"},{"question":"Create a function that accepts an array of integers and returns the second maximum number in the array.","solution":"def second_maximum(nums): Returns the second maximum number in the array nums. if len(nums) < 2: raise ValueError(\\"Array must contain at least two elements\\") first_max = second_max = float('-inf') for num in nums: if num > first_max: second_max = first_max first_max = num elif num > second_max and num != first_max: second_max = num if second_max == float('-inf'): raise ValueError(\\"Array does not contain a second maximum distinct number\\") return second_max"},{"question":"Create a function that will generate a random color in RGB format.","solution":"import random def generate_random_color_rgb(): Generates a random color in RGB format. Returns: tuple: A tuple containing three integers representing the RGB values. r = random.randint(0, 255) g = random.randint(0, 255) b = random.randint(0, 255) return (r, g, b)"},{"question":"Create a function that converts a given string into a zigzag pattern.","solution":"def convert_to_zigzag(s, num_rows): Converts a string to a zigzag pattern on a given number of rows. Args: s (str): The input string to be converted. num_rows (int): The number of rows in the zigzag pattern. Returns: str: The string read row by row in the zigzag pattern. if num_rows == 1 or num_rows >= len(s): return s # Create a list of strings for each row rows = [''] * num_rows current_row, step = 0, 1 for char in s: rows[current_row] += char # Change direction when you hit the top or bottom row if current_row == 0: step = 1 elif current_row == num_rows - 1: step = -1 current_row += step # Concatenate all rows to get the final string return ''.join(rows)"},{"question":"Create a function that takes in a sentence and returns a list of words in that sentence. The function should ignore case, and handle special characters and punctuation marks by treating them as part of the preceding word.","solution":"def extract_words(sentence): Returns a list of words in the sentence, ignoring case and treating special characters and punctuation marks as part of the preceding word. import re # Remove leading and trailing whitespace and convert to lowercase sentence = sentence.strip().lower() # Split the sentence into words using a regex that considers punctuation a word character words = re.findall(r\\"[a-zA-Z0-9]+['-]?[a-zA-Z0-9]*\\", sentence) return words"},{"question":"Create a function that takes an integer n and returns a tuple of two integers, the first being the sum of odd numbers up to n and the second being the sum of even numbers up to n. The sum must be included in the range from 1 to n (inclusive).","solution":"def sum_odd_and_even(n): Returns a tuple of two integers: - The sum of odd numbers up to n (inclusive) - The sum of even numbers up to n (inclusive) Args: n (int): The upper limit up to which the sums are calculated. Returns: tuple: A tuple containing two integers (sum_of_odds, sum_of_evens). sum_of_odds = sum(i for i in range(1, n+1) if i % 2 != 0) sum_of_evens = sum(i for i in range(1, n+1) if i % 2 == 0) return (sum_of_odds, sum_of_evens)"},{"question":"Create a function that takes three parameters: \`name\`, \`age\`, and \`gender\`. The function should return a string that describes the person in a polite manner. If \`age\` is less than 0, return an error message saying the age is invalid. If \`gender\` is not one of the predefined values (\\"Male\\", \\"Female\\", \\"Other\\"), return an error message saying the gender is invalid.","solution":"def describe_person(name, age, gender): Returns a descriptive string about a person based on their name, age, and gender. Args: name (str): The name of the person. age (int): The age of the person. gender (str): The gender of the person, must be \\"Male\\", \\"Female\\", or \\"Other\\". Returns: str: A polite description of the person or an error message if inputs are invalid. if age < 0: return \\"Error: Age is invalid.\\" if gender not in [\\"Male\\", \\"Female\\", \\"Other\\"]: return \\"Error: Gender is invalid.\\" return f\\"{name} is a {age}-year-old {gender}.\\""},{"question":"Create a function that takes a list of integers as input and returns a new list with all the even numbers removed. How can you achieve this in Python?","solution":"def remove_even_numbers(lst): Returns a new list with all the even numbers removed. Parameters: lst (list): A list of integers. Returns: list: A list of integers with all the even numbers removed. return [num for num in lst if num % 2 != 0]"},{"question":"Create a function that will find and return the first repeating element in an array. If no repeating element is found, return -1. How would you approach this in Python?","solution":"def first_repeating_element(arr): Returns the first repeating element in the given array. If no repeating element is found, returns -1. seen = set() for item in arr: if item in seen: return item seen.add(item) return -1"},{"question":"Create a function that takes an array as input and returns the smallest element in the array. If the array is empty, the function should return a specific error message.","solution":"def find_smallest(arr): Returns the smallest element in the array. If the array is empty, returns an error message. if not arr: return \\"Error: Array is empty\\" return min(arr)"},{"question":"Create a function that takes in a integer and returns the larger of the two input. If the input is not an integer, raise a ValueError.","solution":"def larger(a, b): Returns the larger of the two input integers. If either input is not an integer, raises a ValueError. if not isinstance(a, int) or not isinstance(b, int): raise ValueError(\\"Both inputs must be integers\\") return a if a > b else b"},{"question":"Create a function that takes an array, a target value, and returns the index of the target value if it is found in the array, or -1 if it is not found.","solution":"def find_index(arr, target): Returns the index of the target value in the array. If the target value is not found, returns -1. try: return arr.index(target) except ValueError: return -1"},{"question":"Create a function that takes the name of a file and opens it as an input file. The function should read the contents of the file and return the entire file as a string.","solution":"def read_file_contents(filename): Opens and reads the contents of the file and returns it as a string. Parameters: filename (str): The name of the file to read. Returns: str: The contents of the file. with open(filename, 'r') as file: contents = file.read() return contents"},{"question":"Create a function that reverses the order of words in a given string sentence and then reverses each word in the reversed order. For example, for the input \\"Hello World\\", the function should return \\"dlroW olleH\\". Make sure to handle any leading, trailing, and multiple spaces between words.","solution":"def reverse_words_and_order(sentence): Reverses the order of words in the given sentence and then reverses each word. Parameters: sentence (str): The input sentence to be reversed. Returns: str: The sentence with reversed order of words and each word reversed. words = sentence.strip().split() reversed_words = [word[::-1] for word in words] return ' '.join(reversed_words[::-1])"},{"question":"Create a function that takes the weekly sales data for a company as a list of sales figures and calculates the average sale per week. If the data is not available (i.e., the list is empty), return -1.","solution":"def average_sale_per_week(sales_data): Returns the average sale per week from the sales data. If the sales data list is empty, returns -1. Args: sales_data (list): A list of weekly sales figures (floats or ints). Returns: float: The average sale per week or -1 if the sales_data list is empty. if not sales_data: return -1 return sum(sales_data) / len(sales_data)"},{"question":"Create a function that takes a JSON object representing a tree and returns a new JSON object with the tree's nodes sorted by their depth (i.e., the distance from the root node). The sorting should be stable, meaning that nodes at the same depth should maintain their original order.","solution":"def sort_tree_by_depth(tree): Sort the nodes of a tree represented as a JSON object by their depth, maintaining stable sorting. :param tree: JSON object representing the tree :return: JSON object with nodes sorted by their depth def traverse(node, depth, nodes_by_depth): if depth not in nodes_by_depth: nodes_by_depth[depth] = [] nodes_by_depth[depth].append(node['value']) for child in node.get('children', []): traverse(child, depth + 1, nodes_by_depth) nodes_by_depth = {} traverse(tree, 0, nodes_by_depth) # Flatten the dictionary maintaining the order of depths and within each depth level sorted_nodes = [] for depth in sorted(nodes_by_depth.keys()): sorted_nodes.extend(nodes_by_depth[depth]) return sorted_nodes"},{"question":"Create a function that takes an array of strings and returns the longest string in it. If there are multiple strings of the same maximum length, return all of them in an array. If the input array is empty, return \`None\`.","solution":"def longest_strings(strings): Takes an array of strings and returns the longest string in it. If there are multiple strings with the same maximum length, return all of them in an array. If the input array is empty, return None. if not strings: return None max_length = max(len(s) for s in strings) longest = [s for s in strings if len(s) == max_length] return longest if len(longest) > 1 else longest[0]"},{"question":"Create a function that takes a list of numbers and returns a list of the indices where the numbers are greater than a given threshold.","solution":"def get_indices_above_threshold(numbers, threshold): Returns a list of indices where the elements in the list 'numbers' are greater than 'threshold'. :param numbers: List of numbers :param threshold: The threshold value :return: List of indices return [i for i, num in enumerate(numbers) if num > threshold]"},{"question":"Create a function that outputs all Fibonacci numbers up to a certain limit. The function should take a single integer as input and return a list of Fibonacci numbers that are less than or equal to that limit.","solution":"def fibonacci_up_to_limit(limit): Return a list of Fibonacci numbers that are less than or equal to the given limit. Parameters: limit (int): The upper limit for the Fibonacci numbers. Returns: list: A list of Fibonacci numbers less than or equal to the limit. if limit < 0: return [] fibonacci_numbers = [] a, b = 0, 1 while a <= limit: fibonacci_numbers.append(a) a, b = b, a + b return fibonacci_numbers"},{"question":"Create a function that generates a string that contains all the numbers from 1 to n (inclusive) separated by commas. For example, if n=5, the function should return \\"1,2,3,4,5\\".","solution":"def generate_number_string(n): Generates a string that contains all the numbers from 1 to n (inclusive) separated by commas. Parameters: n (int): The maximum number to include in the string. Returns: str: A string containing numbers from 1 to n separated by commas. return ','.join(map(str, range(1, n+1)))"},{"question":"Create a function that takes a string as input and returns the reversed version of the string using slicing.","solution":"def reverse_string(s): Returns the reversed version of the input string s using slicing. return s[::-1]"},{"question":"Create a function that takes a 2D array (list of lists) and returns the sum of all odd numbers in the array.","solution":"def sum_of_odds(matrix): Returns the sum of all odd numbers in the 2D array (list of lists). Args: matrix (list of lists): A 2D list containing integers. Returns: int: The sum of all odd numbers in the matrix. return sum(cell for row in matrix for cell in row if cell % 2 != 0)"},{"question":"Create a function that returns the sum of all numbers in a list that are greater than a specified threshold. If the list is empty or all numbers are below the threshold, the function should return None.","solution":"def sum_greater_than(numbers, threshold): Returns the sum of all numbers in a list that are greater than a specified threshold. If the list is empty or all numbers are below the threshold, the function returns None. if not numbers: return None filtered_numbers = [num for num in numbers if num > threshold] if not filtered_numbers: return None return sum(filtered_numbers)"},{"question":"Create a function that calculates the factorial of a given non-negative integer. The function should raise a \`TypeError\` if the input is not an integer or a \`ValueError\` if the input is a negative integer.","solution":"def factorial(n): Returns the factorial of a given non-negative integer n. Raises a TypeError if the input is not an integer or a ValueError if the input is a negative integer. if not isinstance(n, int): raise TypeError(\\"Input must be an integer\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Create a function that takes two arguments, an array of integers and a single integer value. The function should determine if the single integer exists in the array and return its index. If the integer does not exist in the array, return -1.","solution":"def find_index(arr, value): Returns the index of the value in the array if it exists, otherwise returns -1. if value in arr: return arr.index(value) else: return -1"},{"question":"Create a function that takes in two integers \`a\` and \`b\`, and return their greatest common divisor (GCD). The function should use the Euclidean algorithm to find the GCD.","solution":"def gcd(a, b): Returns the greatest common divisor (GCD) of two integers a and b using the Euclidean algorithm. while b != 0: a, b = b, a % b return abs(a)"},{"question":"Create a function that determines if a given number ( n ) is a multiple of any number from a predefined list of divisors. The function should return \`True\` if ( n ) is a multiple of at least one number in the list, and \`False\` otherwise.","solution":"def is_multiple_of_any(n, divisors): Determines if the given number n is a multiple of any number from the list of divisors. :param n: The number to be checked. :param divisors: A list of divisors. :return: True if n is a multiple of at least one number in the list, False otherwise. return any(n % divisor == 0 for divisor in divisors)"},{"question":"Create a function that converts a given number into its binary representation and return the binary string without '0b' prefix and leading/trailing zeros. For example, convert_to_binary(10) should return '1010'.","solution":"def convert_to_binary(n): Converts a number to its binary representation without '0b' prefix and leading/trailing zeros. if n == 0: return '0' return bin(n)[2:]"},{"question":"Create a function that calculates the factorial of a number using iterative approach in Python. The function should take an integer as input and return the factorial of that number. The factorial of a non-negative integer n is the product of all positive integers less than or equal to n.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. Raises ValueError if the input is negative. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Create a function that sorts an array using the Selection sort algorithm. A brief explanation of the algorithm would be appreciated, along with the function implementation.","solution":"def selection_sort(arr): Sorts an array using the selection sort algorithm. Args: arr (list): The list of elements to be sorted. Returns: list: The sorted list. n = len(arr) for i in range(n): # Assume the ith element is the smallest min_index = i # Check the rest of the array for a smaller element for j in range(i+1, n): if arr[j] < arr[min_index]: min_index = j # Swap the found minimum element with the ith element arr[i], arr[min_index] = arr[min_index], arr[i] return arr"},{"question":"Create a function that takes a string as input and returns a new string where all the vowels are capitalized. the function should also check if the input string is a palindrome, and if it is, return the reversed version of the string instead.","solution":"def capitalize_vowels_or_reverse_if_palindrome(s): Takes a string as input and returns a new string where all the vowels are capitalized. If the input string is a palindrome, return the reversed version of the string instead. vowels = 'aeiou' s_lower = s.lower() if s_lower == s_lower[::-1]: return s[::-1] result = ''.join([char.upper() if char in vowels else char for char in s]) return result"},{"question":"Create a function that takes in a string and returns the string capitalized.","solution":"def capitalize_string(s): Returns the input string capitalized. return s.capitalize()"},{"question":"Create a function that generates the nth Fibonacci number. The sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones. How can you compute the nth Fibonacci number in Python efficiently?","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n < 0: raise ValueError(\\"Input should be a non-negative integer\\") elif n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Create a function that finds the maximum subarray sum using Kadane's algorithm. The function should handle both positive and negative numbers in the array. Return the maximum sum of any contiguous subarray. If the array is empty, return 0.","solution":"def max_subarray_sum(nums): Returns the maximum sum of any contiguous subarray using Kadane's algorithm. If the input array is empty, returns 0. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that takes in a list of numbers and returns the sum of all even numbers plus the sum of all odd numbers, separately. Return the result as a tuple with two elements: the first element being the sum of even numbers and the second element being the sum of odd numbers.","solution":"def sum_even_odd(numbers): Takes a list of numbers and returns a tuple (sum of even numbers, sum of odd numbers). even_sum = 0 odd_sum = 0 for number in numbers: if number % 2 == 0: even_sum += number else: odd_sum += number return (even_sum, odd_sum)"},{"question":"Create a function that can take two lists of strings, list1 and list2, as input and return a list of strings that are common to both lists. The function should ignore case sensitivity and return the results in a sorted list.","solution":"def find_common_elements(list1, list2): Returns a sorted list of strings that are common to both input lists, ignoring case sensitivity. set1 = {s.lower() for s in list1} set2 = {s.lower() for s in list2} common_elements = set1 & set2 return sorted(common_elements)"},{"question":"Create a function that sums up all the integers in a given list.","solution":"def sum_list(numbers): Returns the sum of all integers in the list. :param numbers: List of integers :return: Sum of all integers return sum(numbers)"},{"question":"Create a function that calculates the sum of all numbers in a given list. The function should be able to handle lists of varying lengths and data types.","solution":"def sum_of_list(nums): Returns the sum of all numbers in the given list. Parameters: nums (list): The input list containing numbers. Returns: int/float: The sum of all numbers in the list. if not all(isinstance(n, (int, float)) for n in nums): raise ValueError(\\"All elements in the list must be numbers\\") return sum(nums)"},{"question":"Create a function that takes a dictionary as an input and returns a new dictionary with the keys and values switched.","solution":"def invert_dict(d): Takes a dictionary d as an input and returns a new dictionary with the keys and values switched. return {v: k for k, v in d.items()}"},{"question":"Create a function that takes two parameters: a list of integers and a target integer. The function should return the indices of the two numbers such that they add up to the target. If no two numbers add up to the target, return [-1, -1]. If the input list contains duplicate values, the function should always return the indices of the first occurrence of the numbers that add up to the target.","solution":"def two_sum(nums, target): Returns the indices of the two numbers in nums such that they add up to the target. If no such numbers exist, returns [-1, -1]. If there are duplicates, returns the indices of the first occurrence. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return [-1, -1]"},{"question":"Create a function that accepts a list of numbers and returns the product of the smallest and largest numbers in the list.","solution":"def product_of_smallest_and_largest(numbers): Accepts a list of numbers and returns the product of the smallest and largest numbers in the list. if not numbers: raise ValueError(\\"The list cannot be empty.\\") smallest = min(numbers) largest = max(numbers) return smallest * largest"},{"question":"Create a function that takes an array of integers and returns a new array where every element at an even index is replaced with the square of the original element, and every element at an odd index is replaced with the triple of the original element.","solution":"def transform_array(arr): Transforms the input array such that every element at an even index is replaced with the square of the original element, and every element at an odd index is replaced with the triple of the original element. return [x**2 if i % 2 == 0 else x * 3 for i, x in enumerate(arr)]"},{"question":"Create a function that takes in a dictionary and returns the key with the maximum value. If there are multiple keys with the maximum value, return the key that comes first in alphabetical order.","solution":"def max_dict_key(d): Returns the key with the maximum value in the dictionary. If there are multiple keys with the maximum value, returns the key that comes first in alphabetical order. :param d: Dictionary to evaluate :return: Key with the maximum value if not d: return None max_value = max(d.values()) max_keys = [key for key, value in d.items() if value == max_value] return min(max_keys)"},{"question":"Create a function that takes a positive integer as an argument and returns the sum of its digits. If the number is negative, the function should return the sum of the absolute value of its digits.保湿","solution":"def sum_of_digits(n): Returns the sum of the digits of the absolute value of the integer n. return sum(int(digit) for digit in str(abs(n)))"}]`),P={name:"App",components:{PoemCard:F},data(){return{searchQuery:"",visibleCount:4,poemsData:A,isLoading:!1}},computed:{filteredPoems(){const i=this.searchQuery.trim().toLowerCase();return i?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(i)||e.solution&&e.solution.toLowerCase().includes(i)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(i=>setTimeout(i,1e3)),this.visibleCount+=4,this.isLoading=!1}}},N={class:"search-container"},z={class:"card-container"},j={key:0,class:"empty-state"},E=["disabled"],L={key:0},S={key:1};function W(i,e,u,d,s,a){const m=p("PoemCard");return n(),r("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",N,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>s.searchQuery=o),placeholder:"Search..."},null,512),[[_,s.searchQuery]]),s.searchQuery?(n(),r("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>s.searchQuery="")}," ✕ ")):l("",!0)]),t("div",z,[(n(!0),r(v,null,w(a.displayedPoems,(o,g)=>(n(),y(m,{key:g,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),r("div",j,' No results found for "'+h(s.searchQuery)+'". ',1)):l("",!0)]),a.hasMorePoems?(n(),r("button",{key:0,class:"load-more-button",disabled:s.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[s.isLoading?(n(),r("span",S,"Loading...")):(n(),r("span",L,"See more"))],8,E)):l("",!0)])}const D=c(P,[["render",W],["__scopeId","data-v-9bce570d"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"library/20.md","filePath":"library/20.md"}'),H={name:"library/20.md"},M=Object.assign(H,{setup(i){return(e,u)=>(n(),r("div",null,[q(D)]))}});export{B as __pageData,M as default};
