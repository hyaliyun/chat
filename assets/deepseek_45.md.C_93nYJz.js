import{_ as d,o as n,c as i,a as t,m as c,t as l,C as g,M as b,U as y,f as h,F as w,p as _,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const q={name:"PoemCard",props:{poem:{type:Object,required:!0}}},T={class:"poem-container"},k={class:"review"},I={class:"review-title"},O={class:"review-content"};function E(s,e,u,m,r,a){return n(),i("div",T,[t("div",k,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(l(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",O,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(l(u.poem.solution),1)])])])}const N=d(q,[["render",E],["__scopeId","data-v-08995ec1"]]),A=JSON.parse('[{"question":"Write a program to analyze weather data and predict potential weather changes. The weather data consists of daily temperature, humidity, wind speed, and precipitation measurements collected over a period of time. Each day’s data is provided as a timestamp followed by the four measurements. Your task is to identify if there is a potential for significant temperature change in the next three days. A significant temperature change is defined as a temperature change greater than or equal to 5 degrees Celsius. Input The input consists of multiple datasets followed by a line containing a single zero. Each dataset represents the weather data for a particular period and is formatted as follows: m timestamp1 temperature1 humidity1 wind_speed1 precipitation1 timestamp2 temperature2 humidity2 wind_speed2 precipitation2 ... timestampm temperaturem humiditym wind_speedm precipitationm The first line is the number of days, m, which satisfies 4 ≤ m ≤ 365. Subsequent m lines contain the timestamp (a string in \\"YYYY-MM-DD\\" format), temperature (an integer), humidity (an integer in percentage), wind speed (an integer in km/h), and precipitation (an integer in mm). The temperature values should fall between -50 to 50 degrees Celsius. Output For each dataset, output \\"1\\" if there is at least one instance where the temperature changes by 5 degrees or more within any three consecutive days. Output \\"0\\" otherwise. Each number must be in a separate line without any other characters. Example Input 5 2023-01-01 10 60 15 3 2023-01-02 12 65 20 2 2023-01-03 15 70 10 0 2023-01-04 17 75 25 1 2023-01-05 12 60 30 3 4 2023-02-01 5 55 10 1 2023-02-02 4 50 15 0 2023-02-03 6 52 20 1 2023-02-04 11 45 25 2 0 Output 1 1","solution":"def analyze_weather_data(datasets): results = [] for dataset in datasets: temperatures = [day[1] for day in dataset] significant_change = 0 for i in range(len(temperatures) - 2): if abs(temperatures[i+2] - temperatures[i]) >= 5: significant_change = 1 break results.append(significant_change) return results def parse_input(input_data): datasets = [] current_dataset = [] for line in input_data: if line == \\"0\\": if current_dataset: datasets.append(current_dataset) break elif line.strip().isdigit(): if current_dataset: datasets.append(current_dataset) current_dataset = [] else: parts = line.split() timestamp = parts[0] temperature = int(parts[1]) humidity = int(parts[2]) wind_speed = int(parts[3]) precipitation = int(parts[4]) current_dataset.append((timestamp, temperature, humidity, wind_speed, precipitation)) return datasets def main(input_data): datasets = parse_input(input_data) results = analyze_weather_data(datasets) for result in results: print(result) # Example usage: input_data = [ \\"5\\", \\"2023-01-01 10 60 15 3\\", \\"2023-01-02 12 65 20 2\\", \\"2023-01-03 15 70 10 0\\", \\"2023-01-04 17 75 25 1\\", \\"2023-01-05 12 60 30 3\\", \\"4\\", \\"2023-02-01 5 55 10 1\\", \\"2023-02-02 4 50 15 0\\", \\"2023-02-03 6 52 20 1\\", \\"2023-02-04 11 45 25 2\\", \\"0\\" ] main(input_data)"},{"question":"A common problem in competitive programming is finding the longest common subsequence (LCS) between two sequences. In computer science, the LCS problem is the problem of finding the longest subsequence common to two sequences. A subsequence is a sequence that appears in the same relative order but not necessarily contiguously. You are tasked with finding the length of the longest common subsequence between two given strings. Input The first line of input contains an integer T that denotes the number of test cases to follow. Each test case consists of two strings on separate lines, both composed of lowercase English letters. Output For each test case, output a single integer denoting the length of the longest common subsequence of the given two strings. Constraints 1 ≤ T ≤ 10 1 ≤ length of each string ≤ 1000 SAMPLE INPUT 2 abcde ace abc def SAMPLE OUTPUT 3 0 Explanation For the first test case, the longest common subsequence of \\"abcde\\" and \\"ace\\" is \\"ace\\" which has a length of 3. For the second test case, there is no common subsequence between \\"abc\\" and \\"def\\", so the length is 0.","solution":"def lcs_length(str1, str2): Returns the length of the longest common subsequence of str1 and str2. n = len(str1) m = len(str2) # Initialize the DP table dp = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[n][m] def solve_lcs(test_cases): Solves multiple test cases for the LCS problem. results = [] for str1, str2 in test_cases: results.append(lcs_length(str1, str2)) return results"},{"question":"You are given a sequence of words and a pattern. Your task is to write a program that determines if the words follow the same pattern. Each word in the pattern corresponds to a unique word in the sequence and vice versa. # Input The input consists of multiple test cases. N --- Pattern Sequence0 Sequence1 ... SequenceN-1 - N is the number of sequences. - Each Pattern is a string consisting of lowercase letters. - Each Sequencei gives a sequence of words separated by spaces. # Output For each Sequencei, output \\"true\\" if the sequence of words follows the given pattern, otherwise output \\"false\\". # Constraints - 1 ≤ N ≤ 50 - 1 ≤ length of Pattern ≤ 50 - 1 ≤ number of words in Sequencei ≤ 50 - 1 ≤ length of each word ≤ 50 # Example Input ``` 3 abba dog cat cat dog dog cat cat fish aaaa dog dog dog dog ``` Output ``` true false true ``` # Explanation 1. In the first sequence \\"dog cat cat dog\\", the pattern \\"abba\\" maps to words \\"dog\\" -> \\"a\\", \\"cat\\" -> \\"b\\", \\"cat\\" -> \\"b\\", \\"dog\\" -> \\"a\\", which is correct. 2. In the second sequence \\"dog cat cat fish\\", the pattern \\"abba\\" does not match because \\"fish\\" does not map to \\"a\\". 3. In the third sequence \\"dog dog dog dog\\", the pattern \\"aaaa\\" is followed correctly by the sequence where every word \\"dog\\" corresponds to \\"a\\".","solution":"def word_pattern(pattern, sequence): words = sequence.split() if len(pattern) != len(words): return \\"false\\" char_to_word = {} word_to_char = {} for p, w in zip(pattern, words): if p not in char_to_word: if w in word_to_char: return \\"false\\" char_to_word[p] = w word_to_char[w] = p else: if char_to_word[p] != w: return \\"false\\" return \\"true\\" def process_input(n, pattern, sequences): results = [] for sequence in sequences: results.append(word_pattern(pattern, sequence)) return results"},{"question":"You are given a string that represents a sequence of digits. Your task is to determine how many times the digit `7` appears in the string and print the count. Constraints - The string `s` consists of digits only (0-9). - The length of the string `s` is between 1 and 100. Input Input is given from Standard Input in the following format: `s` Output Print a single integer: the number of times the digit `7` appears in the string. Examples Input `1234567` Output `1` Input `7070707070707` Output `7`","solution":"def count_sevens(digit_string): Returns the number of times the digit \'7\' appears in the input digit string. return digit_string.count(\'7\') # Reading input from standard input is required as per the task if __name__ == \\"__main__\\": import sys input_string = sys.stdin.read().strip() print(count_sevens(input_string))"},{"question":"A company named \\"DataStruct Corp.\\" specializes in manufacturing and selling different kinds of ropes. Each rope is represented by a series of \'+\' and \'-\' characters indicating different sections of the rope. To maximize the profit, the company tries to cut the rope into smaller pieces such that the number of continuous \'+\' sections in each piece is maximized. You\'ve recently been hired to help in the cutting process. Your task is to find the maximum number of continuous \'+\' sections in each cut piece for a given rope. Input The first line of input consists of T, the number of test cases. Each of the next T lines consist of a binary string representation of a rope, containing only the characters \'+\' and \'-\'. Output For each test case, output a single number denoting the maximum number of continuous \'+\' sections in any piece of the given rope. Constraints 1 ≤ T ≤ 50 1 ≤ |rope| ≤ 100000 Example Input: 3 ++--+--++-+++ ++++++++++++++ +----+-++-+-+-+ Output: 2 14 2 Explanation Example case 1: The given rope is \\"++--+--++-+++\\". The maximum number of continuous \'+\' sections in any piece of this rope is 2 (either \\"++\\" from the beginning segment or \\"++\\" from the second-to-last segment). Example Case 2: The given rope is \\"++++++++++++++\\". There are no \'-\' characters, so the entire rope is a single piece containing 14 continuous \'+\' sections. Example Case 3: The given rope is \\"+----+-++-+-+-+\\". The longest continuous \'+\' sections that can be found in any piece of this rope is 2 segments (either from \\"++\\").","solution":"def max_continuous_plus_sections(ropes): Returns the maximum number of continuous \'+\' sections in any piece of each rope. :param ropes: List of strings where each string represents a rope with \'+\' and \'-\' characters. :return: List of integers where each integer is the maximum number of continuous \'+\' sections in each rope. result = [] for rope in ropes: max_section = 0 current_section = 0 for char in rope: if char == \'+\': current_section += 1 if current_section > max_section: max_section = current_section else: current_section = 0 result.append(max_section) return result"},{"question":"A school wants to organize a multi-round spelling competition. Each round of the competition has a list of words, and each word can be marked as either correctly spelled or incorrectly spelled. Your task is to find out how many words were spelled correctly in each round. You are given multiple rounds of competitions, and for each round, a list of results (accurate or inaccurate) for each word spelled during that round. **Input:** The first line contains an integer R representing the number of rounds. Each round starts with an integer W representing the total number of words in that round. This is followed by W lines, each containing the word and its result (\\"correct\\" or \\"incorrect\\"). **Output:** For each round, print the number of correctly spelled words. **Constraints:** 1 ≤ R ≤ 50 1 ≤ W ≤ 100 Each word will be a non-empty string containing only lowercase English letters. The result will be either \\"correct\\" or \\"incorrect\\". **Sample Input:** ``` 2 5 apple correct banana incorrect cherry correct date correct elderberry incorrect 3 grape correct kiwi incorrect lemon correct ``` **Sample Output:** ``` 3 2 ``` **Explanation:** In the first round, there are 5 words. \\"apple\\", \\"cherry\\", and \\"date\\" are spelled correctly, so the output for the first round is 3. In the second round, there are 3 words. \\"grape\\" and \\"lemon\\" are spelled correctly, so the output for the second round is 2.","solution":"def count_correctly_spelled_words(rounds): Given the number of rounds and the results of each word in each round, return the number of correctly spelled words for each round. Parameters: - rounds: List of tuples, where the first element is an integer representing the number of words in that round, and the second element is a list of tuples where each tuple contains a word and its result (\\"correct\\" or \\"incorrect\\") Returns: - List of integers representing the count of correctly spelled words for each round correct_counts = [] for round_info in rounds: W, results = round_info correct_count = sum(1 for word, result in results if result == \\"correct\\") correct_counts.append(correct_count) return correct_counts def parse_input(input_string): lines = input_string.strip().split(\'n\') R = int(lines[0]) index = 1 rounds = [] for _ in range(R): W = int(lines[index]) results = [] for i in range(W): word, result = lines[index + 1 + i].split() results.append((word, result)) rounds.append((W, results)) index += W + 1 return rounds"},{"question":"Masha needs to organize her library. She has n books, each with a distinct integer identifier from 1 to n. Masha wants to arrange them on a single shelf such that the sum of the differences between the identifiers of adjacent books is maximized. For instance, if n=4 and the books are arranged as [1, 4, 2, 3], the sum of the differences between adjacent identifiers is |1-4| + |4-2| + |2-3| = 3 + 2 + 1 = 6. Your task is to determine the maximum possible sum of differences between the identifiers of adjacent books when they are arranged optimally on the shelf. Input The input consists of a single integer n (2 ≤ n ≤ 10^5) — the total number of books. Output Output the maximum sum of differences between the identifiers of adjacent books when they are arranged optimally. Example Input 4 Output 8 Explanation When n=4, one way to arrange the books that results in the maximum sum of differences is [1, 4, 2, 3], leading to the following differences: |1-4| + |4-2| + |2-3| = 3 + 2 + 1 = 6. The optimal arrangement results in a sum of 8 differences, demonstrated by the order [1, 4, 2, 3] or [3, 1, 4, 2].","solution":"def max_sum_diffs(n): Returns the maximum possible sum of differences between adjacent book identifiers when they are arranged optimally. # The maximum sum of differences between adjacent elements can be calculated directly # without building the sequence. # The optimal strategy involves alternating large and small values. # For n = 4, a sample sequence like [1, 4, 2, 3] can be transformed into: # 1, n, n-2, n-4, ..., 2, 1, n-1, n-3, n-5, ... sum_diffs = 2 * (n - 1) return sum_diffs"},{"question":"Alice loves puzzles involving sequences and number manipulation. She recently came across an interesting challenge and needs your help to solve it. Given an array of integers, Alice wants to create a new array by performing specific operations. The new array should be derived from the original array as follows: 1. If the current element is divisible by the next element, the corresponding element in the new array should be the division of the two numbers. 2. If the current element is not divisible by the next element, the new array should contain the sum of these two numbers instead. 3. The operation should be performed for every two consecutive elements in the array. Your task is to help Alice generate this new array based on the given rules. For example, given an array ([8, 4, 3, 6) as shown below: ``` Index 1: 8 and next element 4 -> Since 8 is divisible by 4, 8 / 4 = 2. Index 2: 4 and next element 3 -> Since 4 is not divisible by 3, 4 + 3 = 7. Index 3: 3 and next element 6 -> Since 3 is not divisible by 6, 3 + 6 = 9. ``` Thus, the resulting new array is ([2, 7, 9). Input The input begins with an integer N, representing the number of elements in the array (2 ≤ N ≤ 100,000). The next line contains N integers representing the elements of the array A_i (1 ≤ A_i ≤ 1,000,000). Output Output N-1 integers, each separated by a single space, representing the new array derived from the original array as per the given rules. Examples Input ``` 4 8 4 3 6 ``` Output ``` 2 7 9 ``` Input ``` 3 10 15 20 ``` Output ``` 25 35 ``` Note Explanation for the first sample input: - 8 is divisible by 4, so the first element in the new array is 8 / 4 = 2. - 4 is not divisible by 3, so the second element in the new array is 4 + 3 = 7. - 3 is not divisible by 6, so the third element in the new array is 3 + 6 = 9.","solution":"def generate_new_array(arr): Generate a new array according to the rules described: - If the current element is divisible by the next element, store the division result. - Otherwise, store the sum of the two elements. Parameters: arr (list): Input array of integers Returns: list: New array after processing n = len(arr) result = [] for i in range(n - 1): if arr[i] % arr[i + 1] == 0: result.append(arr[i] // arr[i + 1]) else: result.append(arr[i] + arr[i + 1]) return result"},{"question":"You are given an integer n. Your task is to find the number of ways you can represent n as the sum of two or more consecutive positive integers. Input A single line with a positive integer n (1 ≤ n ≤ 10^9). Output A single number, denoting the number of ways to represent n as the sum of two or more consecutive positive integers. Examples Input 15 Output 3 Input 9 Output 2 Note For the first example, 15 can be represented as the sum of consecutive numbers in three ways: - 1 + 2 + 3 + 4 + 5 - 4 + 5 + 6 - 7 + 8 For the second example, 9 can be represented as: - 2 + 3 + 4 - 4 + 5","solution":"def count_consecutive_sum_ways(n): Returns the number of ways to represent n as the sum of two or more consecutive positive integers. count = 0 k = 1 while (k * (k + 1)) // 2 < n: if (n - (k * (k + 1)) // 2) % (k + 1) == 0: count += 1 k += 1 return count"},{"question":"Matrix Spiral Order Traversal Given an MxN matrix of integers, write a function to return all elements of the matrix in spiral order starting from the top-left element. # Input - First line contains two integers, `M` and `N` representing the number of rows and columns in the matrix respectively. - Next `M` lines contain `N` integers each representing the elements of the matrix. # Output - A single line containing the elements of the matrix in spiral order. # Constraints - 1 ≤ M, N ≤ 100 - -1000 ≤ matrix[i][j] ≤ 1000 # Example **Input:** ``` 3 3 1 2 3 4 5 6 7 8 9 ``` **Output:** ``` 1 2 3 6 9 8 7 4 5 ``` **Input:** ``` 4 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ``` **Output:** ``` 1 2 3 4 8 12 16 15 14 13 9 5 6 7 11 10 ``` Write a function `spiralOrder(matrix: List[List[int]]) -> List[int]` to solve the problem.","solution":"from typing import List def spiralOrder(matrix: List[List[int]]) -> List[int]: Returns the elements of the matrix in spiral order starting from the top-left element. result = [] if not matrix: return result top, bottom, left, right = 0, len(matrix) - 1, 0, len(matrix[0]) - 1 while top <= bottom and left <= right: # Traverse from left to right for i in range(left, right + 1): result.append(matrix[top][i]) top += 1 # Traverse downwards for i in range(top, bottom + 1): result.append(matrix[i][right]) right -= 1 if top <= bottom: # Traverse from right to left for i in range(right, left - 1, -1): result.append(matrix[bottom][i]) bottom -= 1 if left <= right: # Traverse upwards for i in range(bottom, top - 1, -1): result.append(matrix[i][left]) left += 1 return result"},{"question":"John is a fan of sequence problems and his teacher gave him an intriguing challenge. The challenge involves generating a special sequence of numbers based on certain rules and finding the Nth number in that sequence. The sequence is defined as follows: - Start with two initial numbers: 1 and 2. - For every subsequent number, if the number is odd, the next number is obtained by multiplying it by 3 and adding 1. - If the number is even, the next number is obtained by dividing it by 2. John needs your help to write a program that can calculate the Nth number in the sequence. INPUT The input consists of a single integer N, where 1 ≤ N ≤ 10^6, indicating the position in the sequence that John wants to find. OUTPUT Output a single integer, the Nth number in the sequence. CONSTRAINTS 1 ≤ N ≤ 10^6 SAMPLE INPUT 5 SAMPLE OUTPUT 16","solution":"def find_nth_number_in_sequence(N): Returns the Nth number in the special sequence defined by: - Start with 1 and 2. - If the number is odd, the next number is obtained by multiplying it by 3 and adding 1. - If the number is even, the next number is obtained by dividing it by 2. # Sequence starts with 1 and 2 sequence = [1, 2] while len(sequence) < N: last_number = sequence[-1] if last_number % 2 == 0: next_number = last_number // 2 else: next_number = last_number * 3 + 1 sequence.append(next_number) return sequence[N - 1]"},{"question":"Lena is working on a project where she needs to design a menu for a set of drinks. Each drink on the menu must have a unique price, and Lena wants to ensure that all prices are within a specific range and that the total number of price choices does not exceed a given limit. The drinks are given in pairs, where each pair represents the minimum and maximum price acceptable for that drink. Lena will determine the set of unique prices she can utilize for the drinks such that each drink can be purchased at a price within its given range. The objective is to maximize the number of drinks that can have their prices set while maintaining uniqueness and staying within the specified range of prices. Given the ranges for the prices and the maximum limit on the number of price choices, help Lena determine the maximum number of drinks that can be priced uniquely and provide the set of prices used. Input The first line contains two integers n (1 ≤ n ≤ 2000) and L (1 ≤ L ≤ 2000) — the number of drinks and the maximum number of unique price choices Lena can utilize, respectively. Each of the following n lines contains two integers li and ri (1 ≤ li ≤ ri ≤ 10^9) — the minimum and maximum price for the i-th drink. Output The first line should contain the maximum number of drinks that can be priced uniquely. The second line should contain the set of prices used in any order to achieve the maximum number of drinks. If there are multiple sets with the same maximum number of drinks, print any of them. Examples Input 3 5 1 5 2 6 8 11 Output 3 2 3 9 Input 4 3 1 2 4 5 3 7 6 8 Output 3 1 4 7 Note In the first example, Lena can use the prices 2, 3, and 9 to cover all three drinks. In the second example, Lena can use the prices 1, 4, and 7 to cover the first, second, and third drinks. The fourth drink cannot be covered without exceeding the limit on the number of unique price choices.","solution":"def max_drinks(n, L, price_ranges): Determines the maximum number of drinks that can be priced uniquely within the specified limits. :param n: Number of drinks :param L: Maximum number of unique price choices :param price_ranges: List of tuples where each tuple contains the minimum and maximum price for each drink :return: Tuple containing the maximum number of drinks and the set of prices used price_ranges.sort(key=lambda x: x[1]) selected_prices = [] used_prices_set = set() for li, ri in price_ranges: for price in range(li, ri+1): if price not in used_prices_set: selected_prices.append(price) used_prices_set.add(price) break if len(selected_prices) == L: break return (len(selected_prices), selected_prices)"},{"question":"In a mystical garden, there are n flowers lined up in a row. Each flower has a specific magic value associated with it. A flower can be described as \\"special\\" if its magic value is greater than the magic value of each of its neighboring flowers. Your task is to help the gardener determine the number of such special flowers in the garden. Input The first line of the input contains a single integer n (3 ≤ n ≤ 100) — the number of flowers in the garden. The second line contains n integers separated by spaces, where the i-th integer represents the magic value of the i-th flower. The magic values are distinct integers in the range from 1 to 1000. Output Output a single integer — the number of special flowers in the garden. Examples Input 5 3 1 4 5 2 Output 1 Note In the example above, the flower with magic value 5 is the only special flower because it is greater than its neighboring flowers with magic values 4 and 2.","solution":"def count_special_flowers(n, magic_values): Returns the number of special flowers in the garden. A flower is special if its magic value is greater than the magic value of each of its neighboring flowers. special_count = 0 for i in range(1, n - 1): if magic_values[i] > magic_values[i - 1] and magic_values[i] > magic_values[i + 1]: special_count += 1 return special_count"},{"question":"A secure vault is protected by a password consisting of lowercase alphabetic characters only. However, the vault\'s security system only accepts passwords of at least 3 characters and up to 50 characters in length. One notable property of a valid password is that its reverse string must also be a valid password in the list of acceptable passwords. Alex has access to all n valid passwords accepted by the vault\'s system. He needs to determine the longest password among the provided list that has this palindromic property. A palindrome is a string that reads the same backward as forward. Write a program that reads the list of acceptable passwords and outputs the longest password possessing the palindromic property. If multiple passwords have the same length, the lexicographically smallest one should be selected. Input The first line contains a single integer n (1 ≤ n ≤ 10^5), indicating the number of acceptable passwords. Each of the following n lines contains a password, which is a string composed only of lowercase alphabetic characters, with lengths ranging from 3 to 50. Output Print the longest password from the list that is a palindrome. If multiple longest palindromes exist, print the lexicographically smallest one. If no such password exists, print \\"NO PALINDROME\\". Examples Input 5 abc aba abccba xyz pddp Output abccba Input 4 racecar rotor abc bca Output racecar Input 3 abc def ghi Output NO PALINDROME","solution":"def find_longest_palindromic_password(n, passwords): Finds the longest palindromic password from a list of passwords. If multiple passwords have the same length, the lexicographically smallest one will be selected. Parameters ---------- n : int The number of acceptable passwords. passwords : list of str List containing the passwords. Returns ------- str The longest palindromic password or \\"NO PALINDROME\\" if no such password exists. longest_palindrome = \\"\\" for password in passwords: if password == password[::-1]: if len(password) > len(longest_palindrome) or ( len(password) == len(longest_palindrome) and password < longest_palindrome ): longest_palindrome = password return longest_palindrome if longest_palindrome else \\"NO PALINDROME\\""},{"question":"Write a program to find the longest sequence of consecutive integers that can be placed in an x-by-y grid (where x and y are both positive integers). Each sequence starts at 1. Valid consecutive sequences must be placed either horizontally, vertically, or diagonally without re-using any cell. SAMPLE INPUT 3 3 SAMPLE OUTPUT 9 Explanation The longest sequence of consecutive integers is from 1 to 9, filling each cell in a 3-by-3 grid. The sequence can be: 1 2 3 4 5 6 7 8 9","solution":"def longest_consecutive_sequence(x, y): Returns the longest sequence of consecutive integers that can be placed in an x-by-y grid. return x * y"},{"question":"An online bookstore wants to optimize its recommendation system for users based on the genre of books they have purchased previously. They define a \\"reading journey\\" as an uninterrupted sequence of book purchases, where the genre of each book in the sequence is the same. Your task is to determine the length of the longest \\"reading journey\\" in a user\'s book purchase history. Constraints * 1 leq n leq 100000 * The genres are represented as integers between 1 and 100. * `books` is a list of integers representing the genres of n books purchased sequentially. Input Input is given from Standard Input in the following format: n books Output Print the length of the longest \\"reading journey\\". Examples Input 7 1 2 2 3 3 3 1 Output 3 Input 5 4 4 4 4 4 Output 5 Input 10 1 2 2 2 3 3 1 1 1 1 Output 4","solution":"def longest_reading_journey(n, books): Returns the length of the longest reading journey. if n == 0: return 0 max_journey = 1 current_journey = 1 for i in range(1, n): if books[i] == books[i - 1]: current_journey += 1 else: max_journey = max(max_journey, current_journey) current_journey = 1 max_journey = max(max_journey, current_journey) return max_journey"},{"question":"You have been given a list of integers. Your task is to determine the minimum number of operations required to make all elements of the list equal. In one operation, you can add or subtract 1 to any element in the list. Input The first line contains an integer n (1 ≤ n ≤ 105), the number of elements in the list. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109), representing the elements of the list. Output Print a single integer, the minimum number of operations required to make all elements equal. Example Input 5 1 2 3 4 5 Output 6 Input 3 2 2 2 Output 0 Explanation In the first example, we can make all elements equal to 3 with the following operations: ``` 1 -> 3 (2 operations) 2 -> 3 (1 operation) 4 -> 3 (1 operation) 5 -> 3 (2 operations) ``` Thus, the total number of operations is 2 + 1 + 1 + 2 = 6.","solution":"def min_operations_to_equalize(lst): Given a list of integers, this function returns the minimum number of operations required to make all elements of the list equal. One operation consists of either adding or subtracting 1 from any element in the list. if not lst: # handle empty list return 0 # Step 1: Find the median, as moving all elements to the median requires the minimum operations lst_sorted = sorted(lst) n = len(lst) median = lst_sorted[n // 2] if n % 2 != 0 else lst_sorted[n // 2 - 1] # Step 2: Compute the total operations needed to make all elements equal to the median operations = sum(abs(x - median) for x in lst) return operations"},{"question":"Lucas is a software developer who often needs to compare different versions of software. Each version is represented as a string with numbers separated by dots (e.g., \\"1.0.23\\", \\"1.2.3.0\\", \\"1.2.13\\"). Comparing these versions manually is tedious, so he wants to automate the comparison process. Given two version strings, write a function to compare them. Return 1 if the first version is greater, -1 if the second version is greater, and 0 if both versions are equal. The versions are non-negative integers, and they do not have leading zeros. Input: The input consists of multiple test cases. Each test case contains two version strings V1 and V2 separated by space. Output: For each test case, output a single integer: 1, -1, or 0, representing the comparison result. Constraints: 1 ≤ Number of test cases ≤ 100 1 ≤ Length of each version string ≤ 1000 SAMPLE INPUT 2 1.0.33 1.0.27 0.1 1.1 SAMPLE OUTPUT 1 -1","solution":"def compare_versions(v1, v2): Compares two version strings v1 and v2. Returns: 1 if v1 > v2 -1 if v1 < v2 0 if v1 == v2 parts1 = [int(part) for part in v1.split(\'.\')] parts2 = [int(part) for part in v2.split(\'.\')] # Compare the corresponding parts len1, len2 = len(parts1), len(parts2) for i in range(max(len1, len2)): p1 = parts1[i] if i < len1 else 0 p2 = parts2[i] if i < len2 else 0 if p1 > p2: return 1 elif p1 < p2: return -1 return 0"},{"question":"Consider an array of integers `a` of length `n`. You are allowed to perform any number of operations on the array. In each operation, choose any two elements `a_i` and `a_j` (1 ≤ i < j ≤ n) and set both of them to their arithmetic mean: `a_i = a_j = (a_i + a_j) / 2`. Your task is to determine the maximum possible integer value that can be achieved in the array after performing any number of these operations. Input The first line contains a single integer `n` (2 ≤ n ≤ 10^5) — the length of the array. The second line contains `n` integers `a_1, a_2, ..., a_n` (1 ≤ a_i ≤ 10^9) — the elements of the array. Output Print a single integer — the maximum possible value in the array after performing any number of operations. Examples Input 5 1 2 3 4 5 Output 5 Input 3 10 100 1000 Output 1000 Input 4 6 7 8 9 Output 9 Explanation In the first example, the initial array is `[1, 2, 3, 4, 5]`. One of the possible sequences of operations is: - Choose a_1 = 1 and a_2 = 2. After setting them to their arithmetic mean, the array becomes `[1.5, 1.5, 3, 4, 5]`. - Choose a_1 = 1.5 and a_3 = 3. After setting them to their arithmetic mean, the array becomes `[2.25, 1.5, 2.25, 4, 5]`. - Choose a_1 = 2.25 and a_4 = 4. After setting them to their arithmetic mean, the array becomes `[3.125, 1.5, 2.25, 3.125, 5]`. - ... Regardless of the sequence of operations, the largest integer that can remain in the array is the maximum element of the initial array, which is 5.","solution":"def max_possible_value_after_operations(n, arr): Returns the maximum possible integer value that can be achieved in the array after performing any number of operations. return max(arr)"},{"question":"Sara is a spy who needs to encode her secret messages before sending them to her agency. She uses a unique encoding scheme where each letter of her message is swapped with another based on a given key string. The key string is a permutation of the characters \'a\' to \'z\', and each character in the original message is replaced with the corresponding character in the key. For example, if the key string is `zabcdefghijklmnopqrstuvwxy`, then \'a\' will be replaced by \'z\', \'b\' by \'a\', \'c\' by \'b\', and so on. Given a key string and a list of messages, your task is to encode each message using the key and return the encoded messages. INPUT First line will contain the key string of length 26, representing the permutation of \'a\' to \'z\'. Next line will contain T, the number of messages to encode. Next T lines will contain a string M, each representing the message Sara needs to encode. OUTPUT You have to output T lines, i^th line containing the encoded i^th message. CONSTRAINTS T ≤ 10^5 |M| ≤ 10^5 per message All characters in input messages and the key consist of only lowercase Latin characters (\'a\'-\'z\'). The key string will always be a valid permutation of \'a\' to \'z\'. SAMPLE INPUT zabcdefghijklmnopqrstuvwxy 2 hello world SAMPLE OUTPUT gdkkn vnqkc","solution":"def encode_messages(key, messages): Encode messages based on the given key string. :param key: A string of length 26, representing permutation of \'a\' to \'z\'. :param messages: A list of messages to encode. :return: A list of encoded messages. # Creating a translation table based on the provided key translation_table = str.maketrans(\'abcdefghijklmnopqrstuvwxyz\', key) # Encoding each message using the translation table encoded_messages = [message.translate(translation_table) for message in messages] return encoded_messages # Sample usage of the function key = \\"zabcdefghijklmnopqrstuvwxy\\" messages = [\\"hello\\", \\"world\\"] encoded_messages = encode_messages(key, messages) for encoded_message in encoded_messages: print(encoded_message)"},{"question":"**Question: Theft on the High Seas** — A group of pirate ships have just discovered a treasure stash and they are eager to split it among their ships. Unfortunately, this process of dividing and distributing has always caused trouble among the crew, especially since some ships are faster and others can carry more loot. The pirate fleet consists of n ships, each with a certain speed and capacity. Every night, the pirates can move numerous chests of treasure to and from the ships, constrained by the capacities and speeds of the involved ships. However, they do not want to create predictable travel routes that are easy to ambush, so they want to ensure the paths are well-guarded and optimal. Your mission is to calculate the maximum number of treasure chests that can be distributed across the fleet such that no single ship is left out and the treasure remains as balanced as possible given the constraints of speed and capacity. Input The first line of input contains a single integer n (1 ≤ n ≤ 1000) — the number of ships in the fleet. The following n lines each contain two space-separated integers: speed_i and capacity_i (1 ≤ speed_i, capacity_i ≤ 10^5), representing the speed and capacity of the i-th ship. Output Output a single integer indicating the maximum number of treasure chests that can be distributed across the fleet, ensuring a balanced distribution. Example: Input 3 10 100 20 150 30 200 Output 450 Input 5 15 100 25 120 35 130 20 140 10 90 Output 580 Note In the first example, the three ships have capacities totaling 450, so the maximum number of chests that can be distributed is 450. In the second example, the fleet has five ships with a total capacity of 580, and thus the maximum number of treasure chests that can be distributed is 580.","solution":"def max_treasure_chests(n, ships): Calculates the maximum number of treasure chests that can be distributed across the fleet. Args: n (int): The number of ships. ships (list of tuples): Each tuple contains two integers representing the speed and the capacity of the ship. Returns: int: The maximum number of treasure chests that can be distributed. total_capacity = sum(capacity for speed, capacity in ships) return total_capacity"},{"question":"Calvin the gardener is creating a path with square tiles in a garden. Each tile can be either black or white. Calvin has a line of n tiles that are initially all white. Every day, Calvin chooses exactly one tile to color black. Calvin aims to create the longest possible contiguous sequence of black tiles. Given the initial line of white tiles and the number of days t, determine the maximum possible length of a contiguous sequence of black tiles Calvin can achieve by choosing which tiles to color each day. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of tiles. The second line contains an integer t (1 ≤ t ≤ 1000) — the number of days Calvin has to color tiles. Output Print a single number — the maximum length of a contiguous sequence of black tiles Calvin can achieve. Examples Input 10 5 Output 5 Input 15 7 Output 7 Input 7 10 Output 7 Note In the first sample, Calvin can color any 5 contiguous tiles and achieve a sequence of 5 black tiles. In the second sample, Calvin can color any 7 contiguous tiles and achieve a sequence of 7 black tiles. In the third sample, since Calvin has more days than tiles, he can color all tiles black, achieving a sequence of 7 black tiles.","solution":"def max_contiguous_black_tiles(n, t): Returns the maximum possible length of a contiguous sequence of black tiles Calvin can achieve. return min(n, t)"},{"question":"A company is organizing a coding competition where each participant must solve a series of problems in a limited amount of time. Each problem takes a different amount of time to solve, and the company wants to ensure that each participant has enough time to solve as many problems as possible within the competition\'s time limit. Given a list of the time each problem takes and the total time allowed for the competition, your goal is to determine the maximum number of problems a participant can solve within the given time limit. Input The first line contains a single integer T (1 ≤ T ≤ 100) — the number of test cases. For each test case, the first line contains two integers n and t (1 ≤ n ≤ 100, 1 ≤ t ≤ 10000) — the number of problems and the total time allowed for the competition. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the time each problem takes to solve. Output For each test case, print the maximum number of problems that a participant can solve within the given time limit. Example Input 3 4 10 2 2 3 4 5 20 4 2 8 5 1 3 7 5 5 5 Output 3 5 1 Explanation In the first test case, the participant can solve the first three problems within 10 minutes (2 + 2 + 3 = 7 minutes). Solving the fourth problem would exceed the time limit. In the second test case, the participant can solve all five problems within 20 minutes (4 + 2 + 8 + 5 + 1 = 20 minutes). In the third test case, the participant can solve at most one problem within 7 minutes. Solving any of the problems takes 5 minutes, and solving two problems would exceed the time limit.","solution":"def max_problems_solved(T, test_cases): results = [] for i in range(T): n, t = test_cases[i][0] problems = test_cases[i][1] problems.sort() total_time = 0 solved_count = 0 for problem_time in problems: if total_time + problem_time <= t: total_time += problem_time solved_count += 1 else: break results.append(solved_count) return results"},{"question":"In a magical forest, there exists a variety of fruit trees where each type of fruit tree produces fruit only once in its lifetime. When a fruit tree produces fruit, it may produce between 1 and M fruits. Every fruit tree has a unique age at which it produces fruit, which is always an integer from 1 to N. The forest keepers want to gather as much fruit as possible on a given day by planting new trees and waiting for them to produce fruit. They have devised a plan to plant exactly K fruit trees and want to know the minimal and maximal number of fruits they can gather on a given day when all the trees have matured and produced their fruits. Given the possible age ranges and the fruit production ranges, determine the minimal and maximal total number of fruits that the forest keepers can gather when planting exactly K trees. Input The input consists of three integers N, M, and K (1 ≤ N, M, K ≤ 1000). Output Print two space-separated integers representing the minimum and maximum number of fruits the forest keepers can gather from exactly K trees. Examples Input 5 10 7 Output 7 70 Input 3 5 4 Output 4 20 Note In the first example, the minimal number of fruits can be gathered by planting 7 trees each producing 1 fruit, resulting in 7 fruits. The maximum number of fruits can be gathered by planting 7 trees each producing 10 fruits, resulting in 70 fruits. In the second example, the minimal number of fruits can be gathered by planting 4 trees each producing 1 fruit, which results in 4 fruits. The maximum number of fruits can be gathered by planting 4 trees each producing 5 fruits, which results in 20 fruits.","solution":"def minimal_maximal_fruits(N, M, K): Given the range of ages N, the range of fruits M and the number of trees K planted, this function returns the minimal and maximal number of fruits that the K trees can produce. Parameters: N (int): The possible age range (1 to N). M (int): The possible fruit production range (1 to M). K (int): The number of trees planted. Returns: tuple: A tuple containing two elements, minimal and maximal number of fruits. min_fruits = K # Each tree produces the minimal amount of fruits (1). max_fruits = K * M # Each tree produces the maximal amount of fruits (M). return min_fruits, max_fruits # Examples print(minimal_maximal_fruits(5, 10, 7)) # Expected output: (7, 70) print(minimal_maximal_fruits(3, 5, 4)) # Expected output: (4, 20)"},{"question":"John and his friends love to play a game called EtherQuest. In this game, they have to fight various monsters. Each monster requires a different amount of energy to defeat. John and his friends have K units of total energy. They want to defeat as many monsters as possible without exhausting their total energy. Given the number of available monsters and their respective energy requirements, determine the maximum number of monsters they can defeat without exceeding the total available energy. Input The first line contains two integers N and K (1 ≤ N ≤ 1000, 1 ≤ K ≤ 1000) — the number of monsters and the total units of energy available. The second line contains N space-separated integers Ei (1 ≤ Ei ≤ 1000) — the energy required to defeat each monster. Output In one line output the maximum number of monsters that John and his friends can defeat without exceeding the total available energy. Examples Input 5 50 10 20 30 40 50 Output 2 Input 6 25 5 5 5 5 5 5 Output 5","solution":"def max_monsters_defeated(n, k, energies): Determines the maximum number of monsters that can be defeated without exceeding the given total energy, k. Args: n (int): Number of monsters. k (int): Total units of energy available. energies (list of int): Energy required to defeat each monster. Returns: int: Maximum number of monsters that can be defeated. # Sort the energy requirements energies.sort() defeated_monsters = 0 total_energy = 0 for energy in energies: if total_energy + energy <= k: total_energy += energy defeated_monsters += 1 else: break return defeated_monsters"},{"question":"Given an integer array `nums` of size `n`, your task is to find a subarray of `nums` such that the sum of the elements in this subarray is the closest to a given integer `k`. The subarray should have at least one element. If there are multiple subarrays with sums equally close to `k`, return the one with the smallest length. If there is still a tie, return the first occurring one. Your solution should be efficient enough to handle large inputs within reasonable time limits. Input The first line of input contains a single integer T denoting the number of test cases. The first line of each test case contains two space-separated integers `n` and `k` denoting the size of the array and the target sum respectively. The second line of each test case contains `n` space-separated integers, which are the elements of the array `nums`. Output For each test case, output a single line containing the sum of the subarray that is the closest to the given integer `k`. Constraints: 1 ≤ T ≤ 100 1 ≤ n ≤ 10^3 -10^4 ≤ nums[i] ≤ 10^4 Example Input 2 5 3 -1 2 1 -4 5 4 10 2 3 7 -6 Output 3 10 Explanation Test case 1: The subarray [2, 1] has a sum of 3, which is closest to the given integer 3. Test case 2: The subarray [2, 3, 7, -6] has a sum of 6 or the subarray [2, 3, 7] has a sum of 12. The subarray [2, 3, 7] has a sum of 10, which is exactly equal to the given integer 10. However, [2, 3, 7, -6] has a sum of 6 which is closest to 10. Comparing [2, 3, 7] provides the closest valid subarray sum.","solution":"def closest_subarray_sum(n, k, nums): closest_sum = float(\'inf\') closest_len = float(\'inf\') result_sum = 0 for i in range(n): current_sum = 0 for j in range(i, n): current_sum += nums[j] if abs(current_sum - k) < abs(closest_sum - k) or (abs(current_sum - k) == abs(closest_sum - k) and (j - i + 1) < closest_len): closest_sum = current_sum closest_len = j - i + 1 result_sum = closest_sum return result_sum def process_input(T, test_cases): results = [] for i in range(T): n, k, nums = test_cases[i] results.append(closest_subarray_sum(n, k, nums)) return results"},{"question":"You are given an integer array `arr` and two integers `k` and `m`. Your task is to determine if there exists a subset of the array `arr` such that the sum of the subset\'s elements is exactly `k`. Additionally, you are required to verify if all the elements of this subset are distinct and each element appears no more than `m` times in the original array. Input - The first line contains two space-separated integers `n` and `k` (1 ≤ n ≤ 100, 0 ≤ k ≤ 10000), where `n` is the number of elements in the array and `k` is the target sum. - The second line contains the integer `m` (1 ≤ m ≤ 1000), representing the maximum frequency an element can appear in the subset. - The third line contains `n` space-separated integers `arr[i]` (-1000 ≤ arr[i] ≤ 1000), representing the elements of the array. Output Print \\"YES\\" if such a subset exists, otherwise print \\"NO\\". Examples Input 5 9 2 3 34 4 12 5 Output YES Input 3 10 1 3 3 3 Output NO Input 4 0 1 1 2 -1 -2 Output YES","solution":"def can_form_subset(arr, k, m): Determines if there exists a subset of arr such that: 1. The sum of the subset\'s elements is exactly k. 2. All elements of this subset are distinct and each element appears no more than m times in the original array. from itertools import combinations # Generate power set of arr n = len(arr) for r in range(1, n + 1): for subset in combinations(arr, r): if sum(subset) == k and all(subset.count(x) == 1 for x in subset) and all(arr.count(x) <= m for x in subset): return \\"YES\\" return \\"NO\\""},{"question":"Dave is an astronomy enthusiast who loves to study planets and stars. He has a telescope that allows him to observe a celestial grid of size N x M. Each cell in the grid contains a number representing the brightness of that part of the sky. Dave wants to find out what is the maximum brightness he can observe in any contiguous rectangular subgrid and how many such subgrids have that maximum brightness. Input: The first line contains two integers, N and M, the dimensions of the grid. Each of the next N lines contains M space-separated integers representing the brightness values in the grid. Output: Output two integers. The first integer is the maximum brightness of any contiguous rectangular subgrid. The second integer is the number of such subgrids with that maximum brightness. Since the number can be large, output it modulo 10^9+7. Constraints: 1 ≤ N, M ≤ 100 1 ≤ brightness value ≤ 1000 SAMPLE INPUT 3 3 1 2 3 4 5 6 7 8 9 SAMPLE OUTPUT 45 1 Explanation The maximum brightness is achieved by the entire grid (1+2+3+4+5+6+7+8+9 = 45). There is only one subgrid with this maximum brightness.","solution":"def max_brightness_subgrid(N, M, grid): MOD = 10**9 + 7 max_brightness = -float(\'inf\') count = 0 dp = [[0]*(M+1) for _ in range(N+1)] for i in range(1, N+1): for j in range(1, M+1): dp[i][j] = grid[i-1][j-1] + dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1] for i1 in range(1, N+1): for j1 in range(1, M+1): for i2 in range(i1, N+1): for j2 in range(j1, M+1): curr_sum = dp[i2][j2] - dp[i1-1][j2] - dp[i2][j1-1] + dp[i1-1][j1-1] if curr_sum > max_brightness: max_brightness = curr_sum count = 1 elif curr_sum == max_brightness: count += 1 count %= MOD return max_brightness, count"},{"question":"In a country called Techland, there are N cities connected by M bidirectional roads. Each road has a travel time associated with it. The government of Techland wants to implement a new policy where each city needs to have an equal amount of travel time to each other city. A city is considered balanced if the sum of travel times from that city to all other cities is equal. Your task is to determine if there is a possible way to redistribute the travel times on the roads such that every city becomes balanced, or if it is impossible. You are given the number of cities and the travel times of each road. Can you redistribute the travel times and achieve a balanced configuration for all cities? Input: The first line contains two integers N and M (2 ≤ N ≤ 500, 1 ≤ M ≤ 10^4) — the number of cities and the number of roads respectively. The next M lines each contain three integers u, v, t (1 ≤ u, v ≤ N, 1 ≤ t ≤ 10^6) — representing a road between city u and city v with travel time t. Output: Output \\"YES\\" if it is possible to balance the travel times, or \\"NO\\" if it is not possible. Examples: Input: 3 3 1 2 1 2 3 1 3 1 1 Output: YES Input: 4 6 1 2 2 2 3 2 3 4 2 4 1 2 1 3 5 2 4 1 Output: NO","solution":"def is_balanced(N, M, roads): Determine if we can redistribute travel times to make every city balanced. from collections import defaultdict # Creating a graph representation with a dictionary of lists graph = defaultdict(list) for u, v, t in roads: graph[u].append((v, t)) graph[v].append((u, t)) # Compute the total travel time from each city to every other city total_travel_time = [0] * (N + 1) for u in range(1, N + 1): for v, t in graph[u]: total_travel_time[u] += t # Check if all cities have the same total travel time expected_time = total_travel_time[1] for i in range(2, N + 1): if total_travel_time[i] != expected_time: return \\"NO\\" return \\"YES\\""},{"question":"You are given an m x n grid of characters \'A\' through \'Z\'. This grid represents a crossword puzzle board where each cell contains exactly one letter. You need to determine if a given word can be placed in the grid according to the following rules: 1. The word can be placed left-to-right or top-to-bottom. 2. The word must fit within the grid. 3. Cells containing the letters of the word must be either empty (i.e., \'.\') or contain the correct corresponding letter already present in the grid. 4. All adjacent horizontal and vertical cells outside the word\'s placement must either be empty or out of bounds. Write a function that checks if the word can be placed on the board. Function Signature: ```python def can_place_word(board: List[List[str]], word: str) -> bool: pass ``` # Input - A list of lists of characters `board` of dimensions m x n (1 ≤ m, n ≤ 20; \'A\' ≤ board[i][j] ≤ \'Z\' or \'.\' indicates empty cell). - A string `word` (1 ≤ len(word) ≤ 50) consisting of uppercase English letters. # Output - Return `True` if the word can be placed on the board, `False` otherwise. # Example ```python board = [ [\'A\', \'.\', \'.\', \'D\'], [\'B\', \'.\', \'.\', \'E\'], [\'C\', \'.\', \'.\', \'F\'], [\'.\', \'.\', \'.\', \'.\'] ] word = \\"ABC\\" assert can_place_word(board, word) == True board = [ [\'A\', \'B\', \'C\', \'D\'], [\'.\', \'B\', \'.\', \'E\'], [\'C\', \'.\', \'C\', \'F\'], [\'.\', \'.\', \'.\', \'Z\'] ] word = \\"ABCD\\" assert can_place_word(board, word) == False ``` # Explanation In the first example, the word \\"ABC\\" can be placed in either the first column or the last row. In the second example, the word cannot be placed horizontally in any row due to mismatches.","solution":"def can_place_word(board, word): m, n = len(board), len(board[0]) def can_place(i, j, word, direction): word_len = len(word) if direction == \'horizontal\': if j + word_len > n: return False for k in range(word_len): if board[i][j + k] != \'.\' and board[i][j + k] != word[k]: return False # Check boundaries before the word\'s start if j > 0 and board[i][j - 1] != \'.\': return False # Check boundaries after the word\'s end if j + word_len < n and board[i][j + word_len] != \'.\': return False # Check boundaries above and below the word\'s placement for k in range(word_len): if i > 0 and board[i - 1][j + k] != \'.\': return False if i < m - 1 and board[i + 1][j + k] != \'.\': return False elif direction == \'vertical\': if i + word_len > m: return False for k in range(word_len): if board[i + k][j] != \'.\' and board[i + k][j] != word[k]: return False # Check boundaries before the word\'s start if i > 0 and board[i - 1][j] != \'.\': return False # Check boundaries after the word\'s end if i + word_len < m and board[i + word_len][j] != \'.\': return False # Check boundaries to the left and right of the word\'s placement for k in range(word_len): if j > 0 and board[i + k][j - 1] != \'.\': return False if j < n - 1 and board[i + k][j + 1] != \'.\': return False return True for i in range(m): for j in range(n): if can_place(i, j, word, \'horizontal\') or can_place(i, j, word, \'vertical\'): return True return False"},{"question":"Given an integer n, find the smallest n-digit number such that the sum of its digits is divisible by a given integer k. Input The input is given in the following format. n k The input meets the following constraints: 1 ≤ n ≤ 100 1 ≤ k ≤ 500 Output Print the smallest n-digit number whose sum of digits is divisible by k on the first line. Examples Input 2 4 Output 13 Input 3 5 Output 104","solution":"def smallest_n_digit_number(n, k): Returns the smallest n-digit number whose sum of digits is divisible by k. def digit_sum(x): return sum(int(d) for d in str(x)) # The smallest n-digit number is 10**(n-1) start = 10**(n-1) end = 10**n # End is 10**n because it is the smallest (n+1)-digit number for number in range(start, end): if digit_sum(number) % k == 0: return number return -1 # In case there is no such number"},{"question":"In a distant land, there exists a magical forest with n magical trees, each with an integer height. The forest guardians want to perform a special ritual that requires selecting a continuous segment of the trees such that the sum of the heights in this segment is exactly k. However, the guardians realize that sometimes it might not be possible to find such a segment. In this case, they want to know the minimum number of trees that must be removed from anywhere in the forest to make it possible to find a continuous segment with the sum of heights equal to k. Input The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9), the number of trees and the required sum of the heights for the segment, respectively. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 10^6), the heights of the trees. Output Output a single integer — the minimum number of trees that need to be removed to make it possible to find a continuous segment of trees whose heights sum exactly to k, or -1 if it is impossible even after removing any number of trees. Examples Input 5 12 1 2 3 4 5 Output 0 Input 4 7 1 2 3 5 Output 1 Input 3 10 3 3 3 Output -1 Note In the first example, the segment [3, 4, 5] has a sum of 12, so no trees need to be removed. In the second example, it\'s not possible to find a continuous segment with a sum of 7, but if we remove the tree with height 5, the segment [2, 3] will have a sum of 5, so the answer is 1. In the third example, even if we remove any tree, we cannot find a segment with a sum of 10, so the output is -1.","solution":"def min_removals_to_sum_k(n, k, heights): current_sum = 0 sum_indices = {0: -1} min_removals = float(\'inf\') for i in range(n): current_sum += heights[i] if (current_sum - k) in sum_indices: min_removals = min(min_removals, i - sum_indices[current_sum - k]) sum_indices[current_sum] = i return min_removals if min_removals != float(\'inf\') else -1 def process_input(n, k, heights): result = min_removals_to_sum_k(n, k, heights) if result == -1: # Special case handling to find minimum trees to remove. for i in range(n): for j in range(i + 1, n + 1): if sum(heights[:i] + heights[j:]) >= k and min_removals_to_sum_k(n - (j - i), k, heights[:i] + heights[j:]) != -1: return j - i return -1 return 0"},{"question":"You are given a sequence of integers. Find the length of the longest contiguous subsequence where all the integers are the same. Input Input consists of two lines. The first line contains a single integer n (1 ≤ n ≤ 1000), the number of elements in the sequence. The second line contains n integers, the elements of the sequence separated by a space. Output Output a single integer, the length of the longest contiguous subsequence where all the integers are the same. Examples Input 10 1 2 2 2 3 3 4 4 4 4 Output 4 Input 6 5 5 5 5 5 5 Output 6","solution":"def longest_contiguous_subsequence_length(n, sequence): Finds the length of the longest contiguous subsequence where all the integers are the same. Args: n : int : Number of elements in the sequence sequence : list of int : The elements of the sequence Returns: int : The length of the longest contiguous subsequence where all the integers are the same if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if sequence[i] == sequence[i-1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"A museum has a series of rooms connected by doors, represented as an undirected graph where each node is a room and each edge is a door. The museum wants to place guards in such a way that every room is either directly guarded by a guard or is adjacent to a room with a guard. Your task is to determine the minimum number of guards needed. A room can be considered guarded either if a guard is stationed in it or if any of its adjacent rooms have a guard. # Input - The first line contains an integer `T` (1 ≤ T ≤ 100), the number of test cases. - For each test case: - The first line contains two integers, `N` (1 ≤ N ≤ 100) and `M` (0 ≤ M ≤ 4950), where `N` is the number of rooms and `M` is the number of doors. - The next `M` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ N), representing an undirected edge (door) between rooms `u` and `v`. # Output For each test case, output the minimum number of guards needed on a single line. # Example Input ``` 2 4 4 1 2 2 3 3 4 4 1 3 2 1 2 2 3 ``` Output ``` 2 1 ``` Explanation - In the first test case, the minimum number of guards required is 2. You can place them in rooms 1 and 3, which will cover all rooms. - In the second test case, the minimum number of guards required is 1. You can place a guard in room 2, which will cover all rooms.","solution":"def minimum_guards(T, test_cases): def vertex_cover(adj_list, N): if N == 0: return 0 visited = [False] * N cover_count = 0 for u in range(N): if not visited[u]: for v in adj_list[u]: if not visited[v]: visited[u] = visited[v] = True cover_count += 1 break return cover_count results = [] for case in test_cases: N, M, edges = case adj_list = [[] for _ in range(N)] for u, v in edges: adj_list[u-1].append(v-1) adj_list[v-1].append(u-1) guards_needed = vertex_cover(adj_list, N) results.append(guards_needed) return results"},{"question":"You are given a string S containing only lowercase alphabets and an integer K. Your task is to replace exactly K characters in the string such that the resulting string has the longest possible substring that contains only one distinct character. Constraints * 1 leq |S| leq 5 times 10^5 * 1 leq K leq |S| * S consists of only lowercase English letters. Input Input is given from Standard Input in the following format: S K Output Print the length of the longest possible substring with only one distinct character after replacing exactly K characters. Examples Input abbac 2 Output 4 Input aabccdee 1 Output 3","solution":"def longest_substring_with_one_distinct_char(S, K): n = len(S) max_len = 0 for i in range(26): char_to_try = chr(i + ord(\'a\')) left = 0 changes = 0 for right in range(n): if S[right] != char_to_try: changes += 1 while changes > K: if S[left] != char_to_try: changes -= 1 left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"Given a dataset of product reviews, each review contains an identifier, a product name, and the review text. For the purpose of this problem, each product belongs to one of four categories: 1 for Electronics, 2 for Home Appliances, 3 for Books, and 4 for Clothing. You can download the training set of reviews from the following link: http://example.com/train.zip. This archive contains four directories named \\"1\\", \\"2\\", \\"3\\", \\"4\\". Directory named \\"1\\" contains reviews on Electronics, directory \\"2\\" contains reviews on Home Appliances, directory \\"3\\" contains reviews on Books, and directory \\"4\\" contains reviews on Clothing. Each review corresponds to exactly one file from some directory. All reviews have the following format: the first line contains the review identifier, the second line contains the product name, and all subsequent lines contain the review text. The review identifier is only used for distinguishing between reviews and doesn\'t provide any further information. You need to write a program that should classify a given review into one of the four categories based on the training set. It is guaranteed that all reviews given as input to your program correspond to one of the four categories of the training set. Input The first line contains integer id (0 ≤ id ≤ 106) — the review identifier. The second line contains the name of the product. The third and the subsequent lines contain the text of the review. It is guaranteed that the size of any given review will not exceed 15 kilobytes. The tests for this problem are divided into 10 groups. Reviews of groups 1 and 2 are taken from the training set, but their identifiers will not match the identifiers specified in the training set. Groups from the 3rd to the 10th are roughly sorted by the author in ascending order of difficulty (these groups contain reviews which aren\'t present in the training set). Output Print an integer from 1 to 4, inclusive — the number of the category the given review corresponds to. Example Input ``` 123 Smart Watch This smartwatch has a great display and battery life but lacks some advanced features present in other models. ``` Output ``` 1 ``` Explanation: The review is about a smartwatch, indicating it belongs to the Electronics category.","solution":"from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.naive_bayes import MultinomialNB import os import zipfile import requests from io import BytesIO # Define paths to the dataset directories URL = \'http://example.com/train.zip\' CATEGORIES = [\'Electronics\', \'Home Appliances\', \'Books\', \'Clothing\'] # Function to download and extract the training data def download_and_extract(url): response = requests.get(url) with zipfile.ZipFile(BytesIO(response.content)) as thezip: thezip.extractall() # Function to load training data def load_training_data(): texts, labels = [], [] for idx, category in enumerate(CATEGORIES): path = f\\"{idx + 1}\\" for filename in os.listdir(path): with open(os.path.join(path, filename), \'r\', encoding=\'utf-8\') as f: lines = f.readlines() review_text = \' \'.join(line.strip() for line in lines[2:]) texts.append(review_text) labels.append(idx + 1) return texts, labels # Function to preprocess the text data def preprocess_and_train(texts, labels): vectorizer = TfidfVectorizer(stop_words=\'english\') X_train = vectorizer.fit_transform(texts) model = MultinomialNB() model.fit(X_train, labels) return vectorizer, model # Function to predict the category of a new review def predict_category(review_text, vectorizer, model): X_new = vectorizer.transform([review_text]) prediction = model.predict(X_new) return prediction[0] # Main function to classify a given review def classify_review(review_id, product_name, review_text): # Download and load training data download_and_extract(URL) texts, labels = load_training_data() # Preprocess and train model vectorizer, model = preprocess_and_train(texts, labels) # Predict the category of new review prediction = predict_category(review_text, vectorizer, model) return prediction"},{"question":"You are given a list of integers that represents the number of pages read by N students in a reading contest. Each student has read a certain number of pages. The contest organizers want to find the average number of pages read per student. However, any student who has read less than 10 pages is disqualified and should not be included in the average calculation. Write a program that computes the average number of pages read per student for those students who read at least 10 pages. If no student qualifies, the program should print \\"No Qualifying Students\\". Constraints * All values in the input are integers. * 1 ≤ N ≤ 100 * 0 ≤ Number of pages read by each student ≤ 1000 Input Input is given from Standard Input in the following format: N a1 a2 a3 ... aN Where `N` is the number of students and `a1 a2 a3 ... aN` are the number of pages read by each student. Output Print the average number of pages read per student (to one decimal place) for those who read at least 10 pages. If no student qualifies, print `No Qualifying Students`. Examples Input 5 15 20 5 8 30 Output 21.7 Input 3 5 6 7 Output No Qualifying Students","solution":"def calculate_average_pages(N, pages): Returns the average number of pages read per student who read at least 10 pages. If no such student exists, return the string \\"No Qualifying Students\\". :param N: Number of students :param pages: List of integers representing the pages each student read :return: The average number of pages or \\"No Qualifying Students\\" qualifying_pages = [page for page in pages if page >= 10] if not qualifying_pages: return \\"No Qualifying Students\\" average_pages = sum(qualifying_pages) / len(qualifying_pages) return round(average_pages, 1)"},{"question":"Given two strings s1 and s2, write a function that determines if s2 is a scrambled string of s1. A scrambled string is formed by recursively scrambling the substrings of a string. Definition: 1. If a string is equal to itself, then it is a scrambled string. 2. If a string can be divided into two non-empty substrings at some index, and one of the following conditions is satisfied, then it is a scrambled string: * The two substrings are scrambled strings of their corresponding substrings in the other string. * The two substrings are scrambled strings of the swapped version of the corresponding substrings in the other string. Input - Two strings, s1 and s2, with the length of s1 and s2 being equal and between 1 to 30. Output - A boolean value `true` if s2 is a scrambled string of s1, `false` otherwise. Example Input great eatgr Output true Input abcde caebd Output false","solution":"def is_scramble(s1, s2): Determine if s2 is a scrambled string of s1. if s1 == s2: return True if sorted(s1) != sorted(s2): return False n = len(s1) for i in range(1, n): if (is_scramble(s1[:i], s2[:i]) and is_scramble(s1[i:], s2[i:])) or (is_scramble(s1[:i], s2[-i:]) and is_scramble(s1[i:], s2[:-i])): return True return False"},{"question":"A company distributes rewards to its employees based on their performance scores. Each employee gets a unique positive integer performance score. The number of rewards given to each employee is based on the following rules: 1. Each employee must get at least one reward. 2. Employees with a higher performance score than their adjacent employees must receive more rewards than their adjacent employees. Given an array of integers where each integer represents the performance score of an employee, determine the minimum number of rewards the company must give out. Input Format: - A single line of space-separated integers representing the performance scores of the employees. Output Format: - A single integer representing the minimum number of rewards required. Sample Input 1: 1 2 2 Sample Output 1: 4 Sample Input 2: 3 2 1 Sample Output 2: 6 Sample Input 3: 1 2 3 1 0 Sample Output 3: 9","solution":"def min_rewards(scores): n = len(scores) rewards = [1] * n # Step 1: Give each employee at least one reward # Step 2: Traverse from left to right, and adjust rewards for i in range(1, n): if scores[i] > scores[i - 1]: rewards[i] = rewards[i - 1] + 1 # Step 3: Traverse from right to left, and adjust rewards for j in range(n - 2, -1, -1): if scores[j] > scores[j + 1]: rewards[j] = max(rewards[j], rewards[j + 1] + 1) return sum(rewards)"},{"question":"In a network of computers, some pairs of computers are directly connected through a cable. The network can be represented as an undirected graph, with computers as nodes and cables as edges. Evaluate the network structure to identify the longest possible path within the network, where the length of a path is defined as the number of edges on the path. Given that the network can have cycles and it is not necessarily connected (i.e., there can be multiple disconnected subgraphs within the network): Write a program to identify the longest path in the network. # Input The input is given in the following format: ``` N M u1 v1 u2 v2 ... uM vM ``` - N represents the number of computers (1 <= N <= 10^5). - M represents the number of direct connections (0 <= M <= 2 * 10^5). - Each of the next M lines contains two integers `ui` and `vi`, representing a direct connection between computers `ui` and `vi`. # Output Output a single integer that denotes the length of the longest path in the network. # Example Input ``` 4 3 1 2 2 3 3 4 ``` Output ``` 3 ``` Input ``` 5 4 1 2 1 3 3 4 4 5 ``` Output ``` 4 ``` Explanation In the first example, the longest path is `1-2-3-4`, which consists of 3 edges. In the second example, the longest path is `1-3-4-5`, which consists of 4 edges.","solution":"from collections import defaultdict, deque def find_farthest_node(start_node, adj_list): visited = set() q = deque([(start_node, 0)]) # (node, distance) farthest_node = start_node max_distance = 0 visited.add(start_node) while q: current_node, distance = q.popleft() if distance > max_distance: farthest_node = current_node max_distance = distance for neighbor in adj_list[current_node]: if neighbor not in visited: visited.add(neighbor) q.append((neighbor, distance + 1)) return farthest_node, max_distance def longest_path(N, M, edges): if M == 0: return 0 adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) # Any node as starting point of first BFS start_node = edges[0][0] # First BFS to find a farthest node farthest_node, _ = find_farthest_node(start_node, adj_list) # Second BFS to find the longest path from the farthest node found _, max_distance = find_farthest_node(farthest_node, adj_list) return max_distance"},{"question":"You are given a string s consisting of lowercase English letters. A substring is considered \\"nice\\" if it contains at least one vowel and one consonant. Your task is to find the length of the longest nice substring in the given string. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the string. The second line contains a string s of length n consisting of lowercase English letters. Output Print the length of the longest nice substring in the given string. If no such substring exists, print 0. Note: The vowels are \'a\', \'e\', \'i\', \'o\', \'u\'. Examples Input 10 abcdeffghi Output 10 Input 6 aaaaaa Output 0","solution":"def longest_nice_substring(n, s): Finds the length of the longest \\"nice\\" substring in the given string. A substring is considered \\"nice\\" if it contains at least one vowel and one consonant. Parameters: n (int): Length of the string s. s (str): Given string consisting of lowercase English letters. Returns: int: Length of the longest \\"nice\\" substring. If no such substring exists, returns 0. vowels = {\'a\', \'e\', \'i\', \'o\', \'u\'} longest_nice_len = 0 for start in range(n): has_vowel = False has_consonant = False for end in range(start, n): if s[end] in vowels: has_vowel = True else: has_consonant = True if has_vowel and has_consonant: longest_nice_len = max(longest_nice_len, end - start + 1) return longest_nice_len"},{"question":"Sarah is designing a new password validation system for her company\'s internal applications. She has come up with the following requirements for a valid password: 1) It must be at least 8 characters long. 2) It must contain at least one uppercase letter. 3) It must contain at least one lowercase letter. 4) It must contain at least one digit. 5) It must not contain any spaces. Given a list of passwords, write a program to determine whether each password is valid or not based on the above criteria. Input: The first line contains an integer T (1 ≤ T ≤ 10^4) denoting the number of test cases. Each of the next T lines contains a single string representing a password. Output: For each input password, print \\"VALID\\" if the password meets all the criteria, otherwise print \\"INVALID\\". SAMPLE INPUT 5 Password123 1234abcd Pa ssword PASSWORD1 validPWD1 SAMPLE OUTPUT VALID INVALID INVALID INVALID VALID","solution":"import re def is_valid_password(password): Checks if the given password is valid based on the specified criteria. if len(password) < 8: return \\"INVALID\\" if not re.search(r\'[A-Z]\', password): return \\"INVALID\\" if not re.search(r\'[a-z]\', password): return \\"INVALID\\" if not re.search(r\'d\', password): return \\"INVALID\\" if \' \' in password: return \\"INVALID\\" return \\"VALID\\" def check_passwords(passwords): Determines the validity of each password in the list. return [is_valid_password(password) for password in passwords] # Example usage: # T = 5 # passwords = [\\"Password123\\", \\"1234abcd\\", \\"Pa ssword\\", \\"PASSWORD1\\", \\"validPWD1\\"] # results = check_passwords(passwords) # results would be [\\"VALID\\", \\"INVALID\\", \\"INVALID\\", \\"INVALID\\", \\"VALID\\"]"},{"question":"You are given a string `s` consisting of lowercase English letters and you need to perform a series of operations to transform it into a palindrome. A palindrome is a string that reads the same forward and backward. To transform the string into a palindrome, you are allowed to do the following operation as many times as necessary: * Select any single character in the string and remove it. The cost of the operation is the 1-indexed position of the character in the original string, i.e., if you remove the character at the first position, the cost is 1, if you remove the character at the second position, the cost is 2, and so on. Write a function `min_palindrome_cost(s)` that returns the minimum cost required to transform the given string `s` into a palindrome. If the string is already a palindrome, the cost should be 0. # Function Signature ```python def min_palindrome_cost(s: str) -> int: ``` # Input - `s`: A string consisting of lowercase English letters (1 ≤ len(s) ≤ 10^5). # Output - Return an integer representing the minimum cost required to transform the string into a palindrome. # Example ```python assert min_palindrome_cost(\\"abca\\") == 4 assert min_palindrome_cost(\\"racecar\\") == 0 assert min_palindrome_cost(\\"abcde\\") == 15 ``` # Note In the first example, \\"abca\\" can be transformed into \\"aca\\" by removing the second character at a cost of 2, and then \\"aca\\" is a palindrome. In the third example, to turn \\"abcde\\" into a palindrome, we could remove \'a\' (1), \'b\' (2), \'c\' (3) and \'d\' (4), making \'e\' the palindrome. The cost here is 1+2+3+4 = 10. The function should be implemented efficiently to handle large strings within the given constraints.","solution":"def min_palindrome_cost(s: str) -> int: Returns the minimum cost required to transform the given string s into a palindrome. n = len(s) def is_palindrome(t): return t == t[::-1] if is_palindrome(s): return 0 dp = [[0] * n for _ in range(n)] for length in range(2, n+1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = dp[i+1][j-1] else: dp[i][j] = min(dp[i+1][j] + (i+1), dp[i][j-1] + (j+1)) return dp[0][n-1]"},{"question":"You are given an undirected graph consisting of n vertices and m edges. Each vertex is labeled with a unique integer from 1 to n. Each edge connects a pair of vertices. You have to determine if it is possible to color each vertex of the graph using exactly two colors (let\'s say color 1 and color 2) in such a way that no two adjacent vertices have the same color. Input The first line contains one integer t (1 ≤ t ≤ 100) – the number of test cases. Each test case is represented by several lines. For each test case: - The first line contains two integers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ n*(n-1)/2) – the number of vertices and edges, respectively. - The next m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v) representing an edge between vertices u and v. It is guaranteed that there are no duplicate edges and no self-loops. Output For each test case, print \\"YES\\" if the graph can be colored as described, otherwise print \\"NO\\". Example Input 3 3 3 1 2 2 3 3 1 4 2 1 2 3 4 5 0 Output NO YES YES Note In the first test case, the graph forms a triangle, which cannot be colored with two colors such that no two adjacent vertices have the same color. In the second test case, we can color vertices 1 and 2 with color 1, and vertices 3 and 4 with color 2, achieving the required coloring. In the third test case, there are no edges, so any coloring is valid.","solution":"def is_bipartite(graph, n): Checks if a graph is bipartite. color = [-1] * n def bfs(start): queue = [start] color[start] = 1 while queue: u = queue.pop(0) for v in graph[u]: if color[v] == -1: color[v] = 1 - color[u] queue.append(v) elif color[v] == color[u]: return False return True for i in range(n): if color[i] == -1: if not bfs(i): return False return True def solve(test_cases): results = [] for case in test_cases: n, m, edges = case graph = [[] for _ in range(n)] for u, v in edges: graph[u-1].append(v-1) graph[v-1].append(u-1) if is_bipartite(graph, n): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Chef loves to chop vegetables. He has a knife with a very sharp edge and he uses it to cut a string of vegetables, which is represented as a string of lowercase English letters. Every time Chef cuts, he can split the string into two parts such that each part is a valid English word. A valid English word is defined as any non-empty substring of the original string. Chef wants to know how many unique ways he can cut the string into exactly two valid parts. Input The input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. The description of the test cases follows. Each of the next t lines contains a single test case, consisting of a non-empty string s of lowercase English letters (1 ≤ |s| ≤ 100). It is guaranteed that the sum of the lengths of all strings over all test cases does not exceed 10^5. Output For each test case, print a single integer: the number of unique ways Chef can split the string into exactly two valid parts. Example Input 3 apple banana cheese Output 4 5 5 Note For the first test case, Chef can split \\"apple\\" into the following unique pairs of valid parts: - (\\"a\\", \\"pple\\") - (\\"ap\\", \\"ple\\") - (\\"app\\", \\"le\\") - (\\"appl\\", \\"e\\") For the second test case, Chef can split \\"banana\\" into the following unique pairs of valid parts: - (\\"b\\", \\"anana\\") - (\\"ba\\", \\"nana\\") - (\\"ban\\", \\"ana\\") - (\\"bana\\", \\"na\\") - (\\"banan\\", \\"a\\") For the third test case, Chef can split \\"cheese\\" into the following unique pairs of valid parts: - (\\"c\\", \\"heese\\") - (\\"ch\\", \\"eese\\") - (\\"che\\", \\"ese\\") - (\\"chee\\", \\"se\\") - (\\"chees\\", \\"e\\")","solution":"def count_unique_splits(strings): For each string in the list, returns the number of unique ways to split it into two non-empty valid parts. results = [] for s in strings: # The number of unique splits of a string `s` of length n is (n-1) results.append(len(s) - 1) return results"},{"question":"You are working on a project that involves reading through sensor data logs. Each log line contains a timestamp, a sensor ID, and a reading from the sensor. The timestamps in the log are not necessarily in order. Your task is to write a program that reads the sensor data log and calculates the average reading for each sensor. The log lines are given in the following format: ``` timestamp sensor_id reading ``` - `timestamp` is a string in the format `YYYY-MM-DDTHH:MM:SSZ` (e.g., `2023-02-25T14:07:00Z`). - `sensor_id` is an integer representing the sensor\'s identifier. - `reading` is a floating-point number representing the sensor\'s reading. Your program should output the average reading for each sensor ID in ascending order of sensor IDs. If a sensor ID does not have any readings, it should not appear in the output. # Input The input consists of multiple lines. Each line contains a timestamp, a sensor ID, and a reading separated by spaces. The input is terminated by EOF (end of file). # Output For each sensor ID, output the sensor ID followed by the average reading to two decimal places. # Examples Input ``` 2023-02-25T14:07:00Z 1 23.5 2023-02-25T14:07:05Z 2 27.0 2023-02-25T14:07:10Z 1 24.5 2023-02-25T14:07:15Z 2 26.0 2023-02-25T14:07:20Z 3 30.0 ``` Output ``` 1 24.00 2 26.50 3 30.00 ``` Input ``` 2023-02-26T10:00:00Z 5 12.0 2023-02-26T10:02:00Z 3 15.0 ``` Output ``` 3 15.00 5 12.00 ``` --- **Note**: Ensure your solution does not use any inbuilt functionalities to calculate the average directly but rather manually. Use of dictionaries or similar data structures to store and compute the values is encouraged to handle multiple sensor IDs efficiently.","solution":"def calculate_average_readings(log_data): Calculates the average reading for each sensor ID from the sensor log data. :param log_data: List of strings, each string being a log line in the format \\"timestamp sensor_id reading\\" :return: List of tuples, each tuple containing a sensor ID and its average reading, sorted by sensor ID from collections import defaultdict # Dictionary to store sum and count of readings for each sensor_id sensor_data = defaultdict(lambda: [0, 0]) for line in log_data: _, sensor_id, reading = line.split() sensor_id = int(sensor_id) reading = float(reading) sensor_data[sensor_id][0] += reading # sum of readings sensor_data[sensor_id][1] += 1 # count of readings # Calculating average and sorting by sensor ID result = [(sensor_id, round(total / count, 2)) for sensor_id, (total, count) in sensor_data.items()] result.sort() return result # Sample log data for manual testing log_data = [ \\"2023-02-25T14:07:00Z 1 23.5\\", \\"2023-02-25T14:07:05Z 2 27.0\\", \\"2023-02-25T14:07:10Z 1 24.5\\", \\"2023-02-25T14:07:15Z 2 26.0\\", \\"2023-02-25T14:07:20Z 3 30.0\\", ] # Manual test call print(calculate_average_readings(log_data)) # Expected output: [(1, 24.00), (2, 26.50), (3, 30.00)]"},{"question":"Alice has recently got interested in mathematics, especially prime numbers. She was given a sequence of integers and was asked to find the largest prime number in the sequence. However, Alice is a beginner and needs your help to solve this problem. Input The first line contains an integer n (1 ≤ n ≤ 105), representing the number of elements in the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the elements of the sequence. Output Print a single integer — the largest prime number in the sequence. If there is no prime number in the sequence, print -1. Examples Input 5 1 2 3 4 5 Output 5 Input 4 10 14 22 35 Output -1 Input 6 17 29 1 8 31 37 Output 37","solution":"def is_prime(num): Returns True if num is a prime number, otherwise False. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def largest_prime_in_sequence(n, sequence): Returns the largest prime number in the given sequence. If there are no prime numbers, returns -1. largest_prime = -1 for number in sequence: if is_prime(number) and number > largest_prime: largest_prime = number return largest_prime"},{"question":"Vasya has a fridge with several types of food items, and he wants to organize them optimally in multiple rectangular boxes such that each box can only hold items of the same height. Given the heights of the food items, Vasya wants to minimize the number of boxes needed to store all the food items. Each box can hold any number of items as long as their heights are the same, but the number of boxes used should be minimized. Input The first input line contains an integer n (1 ≤ n ≤ 1000) — the number of food items. The second line contains n space-separated integers representing the heights of the food items. Each height is an integer between 1 and 1000. Output Print the minimum number of boxes needed to store all the food items. Examples Input 6 1 2 2 3 3 3 Output 3 Input 5 4 4 4 4 4 Output 1 Note In the first example, the optimal way to organize the food items is to use three boxes: one for the food items of height 1, another for the two food items of height 2, and the last one for the three food items of height 3. In the second example, all food items have the same height, so only one box is needed.","solution":"def min_boxes_needed(n, heights): Given the number of food items and their heights, returns the minimum number of boxes needed to store all the food items. :param n: int : number of food items :param heights: list : list of food item heights :return: int : minimum number of boxes needed # Using a set to find unique heights unique_heights = set(heights) # The number of unique heights corresponds to the number of boxes needed return len(unique_heights)"},{"question":"Max is studying the behavior of letters in a string. He wants to know whether any letter in a given string can be removed to create a palindrome. A palindrome is a string that reads the same forward and backward. Your task is to determine if it is possible to remove exactly one letter from the given string to make it a palindrome. Input: The input consists of a single line containing a string s (1 ≤ |s| ≤ 100). The string consists only of lowercase English letters. Output: Print \\"YES\\" if it is possible to remove exactly one letter to make the string a palindrome. Otherwise, print \\"NO\\". Examples Input abca Output YES Input abc Output NO Input aa Output YES","solution":"def can_remove_one_char_to_make_palindrome(s): def is_palindrome(st): return st == st[::-1] n = len(s) for i in range(n): if is_palindrome(s[:i] + s[i+1:]): return \\"YES\\" return \\"NO\\""},{"question":"A city is arranging a marathon event and needs your help to manage the water stations along the marathon route. The marathon route is represented as a straight line with the starting point at the beginning of the line and the finish point at the end. There are \'n\' water stations placed along the route. You are given the positions of these water stations on the line. The organizers want to ensure that every runner has access to water at regular intervals during the marathon. To achieve this, they need to find the maximum distance between any two consecutive water stations along the route. Input The first line of the input contains an integer n (2 ≤ n ≤ 100), which represents the number of water stations. The second line contains n integers, representing the positions of the water stations on the marathon route. Output Print a single integer — the maximum distance between any two consecutive water stations. Examples Input 5 1 4 7 10 14 Output 4 Input 3 5 10 15 Output 5 Note In the first example, the water stations are at 1, 4, 7, 10, and 14. The maximum distance between two consecutive water stations is 4 (between positions 10 and 14). In the second example, the water stations are at 5, 10, and 15. The maximum distance between two consecutive water stations is 5 (between positions 10 and 15).","solution":"def max_distance_between_water_stations(n, positions): Returns the maximum distance between any two consecutive water stations. Parameters: n (int): number of water stations. positions (list of int): the positions of the water stations on the marathon route. Returns: int: the maximum distance between any two consecutive water stations. positions.sort() max_distance = 0 for i in range(1, n): max_distance = max(max_distance, positions[i] - positions[i-1]) return max_distance"},{"question":"You are tasked with building a portion of a search engine to process queries more efficiently. Given a list of documents, each containing a sequence of words, and a list of queries, your task is to determine how many times each query word appears in each document. For each query and each document, output the number of times the query word appears in the document in a tabulated format. # Input - The first line contains an integer `d` (1 ≤ d ≤ 1000) — the number of documents. - The next `d` lines each contain a document, which is a sequence of words (each word consists of lowercase English letters). - The line after the documents contains an integer `q` (1 ≤ q ≤ 1000) — the number of queries. - The next `q` lines each contain a single query word. # Output - For each document and each query word, output the number of times the query word appears in the document in the format: `doc_i query_j count`, where: - `doc_i` is the index of the document (1-based index), - `query_j` is the query word, - `count` is the number of times the query word appears in the document. # Examples Input ``` 3 this is a test document another document with different words one more document to test queries 2 test document ``` Output ``` 1 test 1 1 document 1 2 test 0 2 document 1 3 test 1 3 document 1 ``` Input ``` 2 hello world hello world of code 3 hello world code ``` Output ``` 1 hello 2 1 world 1 1 code 0 2 hello 0 2 world 1 2 code 1 ``` # Constraints - Each document will contain at most 1000 words. - Each query word has at most 20 characters. - Consider the provided documents and queries are efficient enough to be processed without timing out given the constraints.","solution":"def count_query_occurrences(docs, queries): results = [] for doc_idx, doc in enumerate(docs, start=1): words = doc.split() word_count = {word: words.count(word) for word in set(words)} for query in queries: count = word_count.get(query, 0) results.append(f\\"{doc_idx} {query} {count}\\") return results def process_input_output(input_data): lines = input_data.strip().split(\'n\') d = int(lines[0]) docs = lines[1:d + 1] q = int(lines[d + 1]) queries = lines[d + 2:d + 2 + q] return count_query_occurrences(docs, queries) # Example usage: # input_data = \\"2nhello world hellonworld of coden3nhellonworldncoden\\" # print(process_input_output(input_data))"},{"question":"Given a list of integers, return a new list that only contains the elements that appear more than once in the original list, sorted in ascending order. If no such elements exist, return an empty list. Constraints * 1 ≤ n ≤ 1000 * 1 ≤ ai ≤ 10000 Input The first line contains an integer n, the number of elements in the list. The second line contains n space-separated integers. Output A list of integers that appear more than once in the input list, sorted in ascending order. Examples Input 8 4 5 6 4 6 7 8 5 Output 4 5 6 Input 5 1 2 3 4 5 Output","solution":"def find_duplicates(nums): Given a list of integers, return a new list that only contains the elements that appear more than once in the original list, sorted in ascending order. from collections import Counter count = Counter(nums) duplicates = [num for num, freq in count.items() if freq > 1] return sorted(duplicates)"},{"question":"Tom is studying cryptography and has come across a new encoding method involving shifting the characters of a string. He has a string \'text\' that consists of lowercase English letters and a positive integer \'shift\' value. The encoding method shifts each character in \'text\' forward in the alphabet by \'shift\' positions, wrapping around from \'z\' to \'a\' when necessary. For example, with a shift value of 3, \'a\' becomes \'d\', \'b\' becomes \'e\', and \'z\' becomes \'c\'. Tom needs your help to implement the encoding function. Given the string \'text\' and the integer \'shift\', encode the string using the described method and return the encoded string. Input The first line contains a string \'text\' of length n. The second line contains an integer \'shift\' (0 ≤ shift ≤ 25). The length of \'text\' is within the range from 1 to 105. Output Print the encoded string. Examples Input hello 3 Output khoor Input abcxyz 5 Output fghcde Note In the first sample, each character is shifted 3 positions forward in the alphabet: \'h\' -> \'k\', \'e\' -> \'h\', \'l\' -> \'o\', \'l\' -> \'o\', and \'o\' -> \'r\'. In the second sample, each character is shifted 5 positions forward in the alphabet: \'a\' -> \'f\', \'b\' -> \'g\', \'c\' -> \'h\', \'x\' -> \'c\', \'y\' -> \'d\', and \'z\' -> \'e\'.","solution":"def encode_text(text, shift): Encodes the given text by shifting each character forward by \'shift\' positions in the alphabet. encoded_chars = [] for char in text: # Calculate the new character, wrapping around if necessary new_char = chr((ord(char) - ord(\'a\') + shift) % 26 + ord(\'a\')) encoded_chars.append(new_char) return \'\'.join(encoded_chars)"},{"question":"Alice is an avid gardener and loves arranging flowers in her garden. She has a rectangular garden of size n x m (n rows and m columns). Each cell in the garden can contain one type of flower or be empty. The flowers in Alice\'s garden are represented by distinct uppercase letters (\'A\' to \'Z\'), and the empty cells are represented by dots (\'.\'). Alice wants to create a new pattern by rotating the garden 90 degrees clockwise k times. Your task is to write a program that outputs the garden\'s arrangement after k rotations. Each 90 degrees clockwise rotation transforms the cell at position (i, j) in the original garden to position (j, n-1-i) in the new garden. Input The first line contains integers n and m - the number of rows and columns in the garden, respectively (1 ≤ n, m ≤ 1000). The next n lines contain m characters each, representing the initial arrangement of flowers and empty cells in the garden. The last line contains the integer k (0 ≤ k ≤ 1000000000) - the number of 90 degrees clockwise rotations. Output Output the garden\'s arrangement after k rotations. Example Input 4 3 ABC DEF GHI JKL 1 Output JGD KHE LIF Input 4 3 ABC DEF GHI JKL 3 Output CBA FED IHG LKJ Input 4 3 ABC DEF GHI JKL 4 Output ABC DEF GHI JKL Note In the first example, the garden is rotated 1 time (90 degrees clockwise), resulting in the following arrangement: ``` JGD KHE LIF ``` In the second example, the garden is rotated 3 times (270 degrees clockwise), resulting in the following arrangement: ``` CBA FED IHG LKJ ``` In the third example, the garden is rotated 4 times (360 degrees), which returns it to the original arrangement: ``` ABC DEF GHI JKL ```","solution":"def rotate_90_degrees(garden, n, m): return [[garden[n - 1 - i][j] for i in range(n)] for j in range(m)] def rotate_garden(n, m, garden, k): k = k % 4 # Since 4 rotations result in the same pattern for _ in range(k): garden = rotate_90_degrees(garden, n, m) n, m = m, n return garden"},{"question":"You are given a string `s`. Your task is to determine whether `s` can be converted into a valid palindrome by removing at most one character. A string is called a palindrome if it reads the same backward as forward. Input The input is a single line containing a string `s` (1 ≤ |s| ≤ 100,000), consisting of lowercase English letters. Output Output \\"YES\\" if the string can be transformed into a palindrome by removing at most one character. Otherwise, output \\"NO\\". Examples Input abca Output YES Input aaaa Output YES Input abc Output NO","solution":"def valid_palindrome(s): Determine if a string can be converted into a palindrome by removing at most one character. def is_palindrome_range(st, i, j): return all(st[k] == st[j - k + i] for k in range(i, (j + i) // 2 + 1)) left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: return \\"YES\\" if is_palindrome_range(s, left + 1, right) or is_palindrome_range(s, left, right - 1) else \\"NO\\" left += 1 right -= 1 return \\"YES\\""},{"question":"You are given `n` rows of dominoes, each row containing `m` dominoes which are represented as a list of `m` integers. The value of each domino is an integer from `1` to `k`. Your objective is to determine if it is possible to combine the rows such that each integer value from `1` to `k` appears exactly once in each vertical stack of `n` dominoes. In other words, you need to check if it is possible to rearrange each row\'s order independently, in such a way that values in each column after rearranging are all distinct. Input: - The first line contains three integers: `n`, `m`, and `k` (1 ≤ n, m, k ≤ 100) — representing the number of rows, the number of dominoes in each row, and the range of the integer values in the dominoes. - The following `n` lines each contain `m` integers, representing the value of the dominoes in each row. Output: - Print \\"YES\\" if it is possible to combine rows such that each column contains all distinct values from `1` to `k`. Otherwise, print \\"NO\\". Example: Input: ``` 3 3 3 1 2 3 2 3 1 3 1 2 ``` Output: ``` YES ``` In the above example, it is possible to rearrange the rows to form the following columns: ``` 1 2 3 2 3 1 3 1 2 ``` Each column contains all values from `1` to `3` exactly once. Thus, the output is \\"YES\\".","solution":"def is_possible_to_combine_dominoes(n, m, k, rows): from itertools import permutations # Verify if each row contains unique values from 1 to k for row in rows: if len(set(row)) != len(row) or any(value > k or value < 1 for value in row): return \\"NO\\" # Create all possible row permutations columns = list(zip(*rows)) for permutation in permutations(rows): permuted_columns = list(zip(*permutation)) # Check if each column in permuted columns contains unique values if all(len(set(column)) == len(column) for column in permuted_columns): return \\"YES\\" return \\"NO\\""},{"question":"A company is planning a team-building event and wants to organize a set of activities for their employees. Each activity can accommodate a specific maximum number of participants and comes with a certain cost. The company has a fixed budget and a requirement that every employee must participate in exactly one activity. Given the number of employees, the budget, and the details of each activity, determine if it is possible to organize the event such that all employees are accommodated within the given budget. You need to answer whether it is possible or not for multiple test cases. Input The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case starts with three integers n, b, and k (1 ≤ n ≤ 1000, 1 ≤ b ≤ 10^9, 1 ≤ k ≤ 100) — the number of employees, the budget, and the number of different activities respectively. Then follow k lines, each containing two integers ci and ai (1 ≤ ci ≤ 1000000, 1 ≤ ai ≤ 1000) — the cost and the maximum number of participants for the i-th activity. Output For each test case, print \\"Yes\\" if it is possible to accommodate all employees within the budget, otherwise print \\"No\\". Example Input 3 10 1000 3 150 5 200 10 300 5 4 500 2 200 2 300 3 50 100 1 1000 100 Output Yes No No","solution":"def can_accommodate_employees(num_cases, cases): results = [] for case in cases: n, b, k, activities = case possible = False for cost, max_participants in activities: if max_participants >= n and b >= cost: possible = True break results.append(\\"Yes\\" if possible else \\"No\\") return results # Example usage: if __name__ == \\"__main__\\": t = 3 cases = [ (10, 1000, 3, [(150, 5), (200, 10), (300, 5)]), (4, 500, 2, [(200, 2), (300, 3)]), (50, 100, 1, [(1000, 100)]), ] results = can_accommodate_employees(t, cases) for result in results: print(result)"},{"question":"Given an undirected graph validated as acyclic and connected, it\'s a tree with n nodes rooted at node 1. Each node is assigned a unique value v_i. We are to perform multiple queries on this tree, each query requiring us to report the highest value found along the path from node u to node v. Constraints: * 1 leq n leq 10^5: Number of nodes in the tree. * 1 leq v_i leq 10^9: Value associated with each node. * 1 leq q leq 10^4: Number of queries. * 1 leq u, v leq n: Nodes between which we have to find the path for the query. Input The input consists of multiple lines: 1. The first line contains an integer n representing the number of nodes. 2. The second line contains n space-separated integers representing the values assigned to the nodes from v_1 to v_n. 3. The next n-1 lines each contain two integers, representing an edge between two nodes in the tree. 4. The next line contains an integer q representing the number of queries. 5. The next q lines each contain two integers u and v representing a query to find the highest value along the path from node u to node v. Output For each query, output a single integer representing the highest value found along the path from node u to node v. Examples Input 5 7 2 5 3 8 1 2 1 3 2 4 2 5 3 4 5 3 5 1 5 Output 8 8 8 Input 4 10 20 30 40 1 2 1 3 1 4 2 2 4 3 4 Output 40 40","solution":"def highest_value_in_path(n, values, edges, queries): from collections import deque, defaultdict import sys sys.setrecursionlimit(10**6) # Build the tree from edges graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Prepare a parent and depth table for each node parent = [-1] * (n + 1) depth = [-1] * (n + 1) path_max = [values[i] for i in range(n)] def dfs(v, p, d): parent[v] = p depth[v] = d path_max[v-1] = values[v-1] # store self value as initial path max for neighbor in graph[v]: if neighbor == p: continue dfs(neighbor, v, d + 1) path_max[v-1] = max(path_max[v-1], path_max[neighbor-1]) # Initialize DFS from root node dfs(1, -1, 0) # Function to get LCA and path maximum def get_path_max(u, v): if depth[u] < depth[v]: u, v = v, u max_val = -1 while depth[u] > depth[v]: max_val = max(max_val, values[u - 1]) u = parent[u] while u != v: max_val = max(max_val, values[u - 1], values[v - 1]) u, v = parent[u], parent[v] max_val = max(max_val, values[u - 1]) return max_val results = [] for u, v in queries: results.append(get_path_max(u, v)) return results"},{"question":"Harry is organizing a book fair and wants to arrange books in alphabetical order. He has n books, each with a title consisting of lowercase English letters. Harry\'s goal is to create up to m groups of books, such that within each group, the titles are sorted alphabetically. Additionally, the sizes of the groups should be balanced as much as possible, i.e., the difference in the number of books between the largest and smallest group should be minimized. Your task is to help Harry achieve this goal by determining the maximum possible size difference between the groups. Input The first line contains two integers n (1 ≤ n ≤ 1000) and m (1 ≤ m ≤ n) – the number of books and the number of groups, respectively. The second line contains n strings, each string representing a book title. The length of each string is between 1 and 1000 characters. Output Print a single integer, representing the maximum possible difference in the number of books between the largest and smallest group when the books are divided into up to m groups in alphabetical order. Example Input 5 3 apple orange banana peach grape Output 1 Input 7 2 cat dog elephant bear antelope zebra lion Output 2 Note In the first example, we can divide the books into 3 groups as follows: [\\"apple\\", \\"banana\\"], [\\"grape\\", \\"orange\\"], [\\"peach\\"]. The group sizes are 2, 2, and 1, so the maximum difference is 1. In the second example, we can divide the books into 2 groups as follows: [\\"antelope\\", \\"bear\\", \\"cat\\", \\"dog\\"], [\\"elephant\\", \\"lion\\", \\"zebra\\"]. The group sizes are 4 and 3, so the maximum difference is 1. However, the best possible division to minimize the difference would be [\\"antelope\\", \\"bear\\", \\"cat\\"], [\\"dog\\", \\"elephant\\", \\"lion\\", \\"zebra\\"]. Here the group sizes are 3 and 4, so the maximum difference remains 2.","solution":"import math def max_group_size_difference(n, m, book_titles): This function calculates the maximum possible size difference between the largest and smallest group when the books are divided into up to m groups in alphabetical order. book_titles.sort() # Sort books alphabetically if m >= n: return 0 # Each book can be its own group # Minimum books in each group base_size = n // m # Number of groups that will have an extra book groups_with_extra_book = n % m largest_size = base_size + 1 if groups_with_extra_book > 0 else base_size smallest_size = base_size return largest_size - smallest_size"},{"question":"Consider an array of integers, nums, where a sliding window of size k is moving from the left of the array to the right. You need to find the maximum value in each window as it slides through the array. For instance, if the array is [1,3,-1,-3,5,3,6,7] and k is 3, the answer would be [3,3,5,5,6,7] because: - The first window is [1,3,-1] and the maximum value is 3. - The second window is [3,-1,-3] and the maximum value is 3. - The third window is [-1,-3,5] and the maximum value is 5. - The fourth window is [-3,5,3] and the maximum value is 5. - The fifth window is [5,3,6] and the maximum value is 6. - The sixth window is [3,6,7] and the maximum value is 7. Write a function, `maxSlidingWindow(nums, k)`, that returns an array of the maximum values in each window. Constraints - 1 ≤ nums.length ≤ 10^5 - -10^4 ≤ nums[i] ≤ 10^4 - 1 ≤ k ≤ nums.length Input - nums: an array of integers - k: an integer representing the size of the sliding window Output - An array of integers representing the maximum values in each window as it slides through the array. Examples Input nums = [1,3,-1,-3,5,3,6,7] k = 3 Output [3,3,5,5,6,7] Input nums = [1, -1] k = 1 Output [1, -1] Input nums = [9, 11] k = 2 Output [11] Input nums = [4, -2] k = 2 Output [4]","solution":"from collections import deque def maxSlidingWindow(nums, k): Returns an array of the maximum values in each window of size k sliding through the array nums. if not nums or k == 0: return [] result = [] deq = deque() for i in range(len(nums)): # Remove elements not within the sliding window if deq and deq[0] < i - k + 1: deq.popleft() # Remove elements smaller than the current element from the deque while deq and nums[deq[-1]] < nums[i]: deq.pop() # Add the current element at the end of the deque deq.append(i) # Add the max value to the result list if i >= k - 1: result.append(nums[deq[0]]) return result"},{"question":"There is a garden grid represented by a 2D array of integers. Each cell in the array contains a non-negative integer which represents the cost of stepping on that cell. You want to plan a path from the top-left corner of the grid (0,0) to the bottom-right corner (n-1, m-1) such that the sum of the costs of the cells along the path is minimized. You can only move either down or right at any point in time. Your task is to determine the minimum cost to reach the bottom-right corner of the grid. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two integers N and M, denoting the number of rows and columns in the grid respectively. Each of the next N lines contains M space-separated integers, representing the cost of each cell in the grid. Output For each test case, output a single line containing the minimum cost to reach the bottom-right corner of the grid. Constraints 1 ≤ T ≤ 10 1 ≤ N, M ≤ 100 0 ≤ cost of each cell ≤ 1000 Example Input: 2 3 3 1 3 1 1 5 1 4 2 1 2 2 1 2 1 1 Output: 7 3 Explanation Example Case 1: The path with minimal cost is 1 → 3 → 1 → 1 → 1 with a total cost of 7. Example Case 2: The path with minimal cost is 1 → 2 → 1 with a total cost of 3.","solution":"def min_cost_path(grid): Returns the minimum cost to reach the bottom-right corner of the grid. n = len(grid) m = len(grid[0]) # Create a 2D array to store the minimum path cost up to each cell dp = [[0] * m for _ in range(n)] dp[0][0] = grid[0][0] for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][m-1] def solve_min_cost_path(t, test_cases): results = [] for case in test_cases: n, m = case[0] grid = case[1] results.append(min_cost_path(grid)) return results"},{"question":"In a farming simulation game, players can plant crops in a row of n slots. Each slot can either be empty or have exactly one crop growing in it. At every time step, if there are adjacent free slots next to a mature crop, the adjacent slots will be filled with new crops. A crop matures in m days, at which point it can begin to spread. The objective is to determine the minimum number of days required to fully populate the row of slots with crops. The row of slots is given as a string of length n where: - \'E\' represents an empty slot. - \'C\' represents a slot with a mature crop. Input The first line contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 50), representing the number of slots and the days required for a crop to mature, respectively. The second line contains a string of length n representing the initial state of the row. Output Print one integer: the minimum number of days required to fully populate the row with crops. Examples Input 7 2 EEC-CEC Output 4 Input 10 3 E-CE-CCEEE Output 6 Note In the first example, the initial state is EEC-CEC. After 2 days the mature crops will start affecting adjacent empty slots. By day 4, all slots will be filled. In the second example, starting from E-CE-CCEEE, and given that crops mature in 3 days, you\'ll require 6 days to fully populate the row.","solution":"def min_days_to_fully_populate(n, m, row): left_most_index = row.find(\'C\') right_most_index = row.rfind(\'C\') if left_most_index == -1: # no crops initially return float(\'inf\') max_distance_to_mature_crop = max(left_most_index, n - right_most_index - 1) max_fill_time = max_distance_to_mature_crop + m return max_fill_time # Example usage n = 7 m = 2 row = \\"EECCECE\\" print(min_days_to_fully_populate(n, m, row)) # Output: 4 n = 10 m = 3 row = \\"EEC-ECCEEE\\" print(min_days_to_fully_populate(n, m, row)) # Output: 6"},{"question":"A sequence of lowercase English letters is \\"stable\\" if every letter in the sequence appears the same number of times. For example: - \\"aabbcc\\" is stable because all letters appear exactly twice. - \\"aabbccc\\" is not stable because \'c\' appears three times whereas \'a\' and \'b\' appear two times. Given a string, determine if it is stable or not. Write a function `is_stable(s: str) -> bool` that takes a string `s` as input and returns `True` if the string is stable and `False` otherwise. # Constraints: - 1 ≤ len(s) ≤ 100 - The string `s` contains only lowercase English letters. # SAMPLE INPUT 1: ``` \\"aabbcc\\" ``` # SAMPLE OUTPUT 1: ``` True ``` # SAMPLE INPUT 2: ``` \\"aabbccc\\" ``` # SAMPLE OUTPUT 2: ``` False ``` # SAMPLE INPUT 3: ``` \\"abcabc\\" ``` # SAMPLE OUTPUT 3: ``` True ``` # SAMPLE INPUT 4: ``` \\"aabb\\" ``` # SAMPLE OUTPUT 4: ``` True ```","solution":"def is_stable(s: str) -> bool: from collections import Counter # Count the frequency of each character counter = Counter(s) # Get the set of frequency values frequency_set = set(counter.values()) # String is stable if all characters have the same frequency return len(frequency_set) == 1"},{"question":"Python recently introduced a function called `random.sample()`, which is used to get a list of random elements from a given list. Write a function `generate_unique_randoms(L, n)` that accepts a list `L` and an integer `n` and returns a new list containing exactly `n` unique random elements from `L`. Your implementation should meet the following criteria: 1. If `n` is greater than the length of `L`, return an empty list. 2. If there are duplicates in the list `L`, treat them as separate individual elements. 3. Use Python\'s `random.sample()` function to select `n` unique elements from the list `L`. Ensure the function call within your implementation if necessary. 4. The order of elements in the output list should match the order they were selected by `random.sample()`. Input: - A list `L` (1 ≤ len(L) ≤ 10^6) - An integer `n` (1 ≤ n ≤ 10^6) Output: - A list containing `n` unique random elements from `L`, or an empty list if `n` is greater than the length of `L`. Example: Input: [\'apple\', \'banana\', \'cherry\', \'date\', \'fig\', \'grape\'], 3 [\'apple\', \'banana\', \'apple\', \'cherry\'], 2 [], 1 [\'apple\', \'banana\', \'cherry\'], 4 Output: [\'date\', \'cherry\', \'grape\'] [\'banana\', \'cherry\'] [] [] Explanation: In the first case, three random fruits are selected from the provided list. In the second case, two random fruits are selected from the list that contains duplicates. In the third case, since the input list is empty, the function correctly returns an empty list. In the fourth case, the requested number of unique random elements exceeds the length of the list, so the function returns an empty list.","solution":"import random def generate_unique_randoms(L, n): Returns a list of n unique random elements from the given list L. if n > len(L): return [] return random.sample(L, n)"},{"question":"We have a matrix of integers with dimensions N x M (N rows and M columns). You can perform two types of operations on this matrix: 1. Swap any two columns of the matrix. 2. Rotate each element of a row one step to the right (the rightmost element goes to the first position). You need to determine the minimum sum of the first row that can be achieved after performing the above operations any number of times. Input: - The first line of input contains an integer T denoting the number of test cases. - For each test case, the first line contains two space-separated integers N and M. - Each of the next N lines contains M space-separated integers representing the elements of the matrix. Output: - For each test case, output the minimum sum of the first row that can be obtained after performing the operations. Constraints: 1 ≤ T ≤ 10 1 ≤ N, M ≤ 50 1 ≤ matrix[i][j] ≤ 1000 Example: Input: 2 2 3 3 1 2 6 5 4 3 3 1 2 3 4 5 6 7 8 9 Output: 6 6 Explanation: In the first test case, by rotating the second row and swapping columns, achieve: 1 2 3 5 4 6 So, the minimum sum of the first row (achieved after rotations and swaps) is 6. In the second test case, by rotating the rows and swapping columns, achieve: 1 2 3 5 6 4 8 9 7 So, the minimum sum of the first row (achieved after rotations and swaps) is 6.","solution":"def min_first_row_sum(test_cases): results = [] for case in test_cases: N, M = case[\'dimensions\'] matrix = case[\'matrix\'] # Since we\'re only concerned with the first row, get the first row. first_row = matrix[0] # Getting the minimum in each column by looking at all rows in that column for col in range(M): min_in_col = min(matrix[row][col] for row in range(N)) first_row[col] = min_in_col # The minimal possible sum for the first row after optimal rotations and swaps results.append(sum(sorted(first_row)[:M])) return results # Input parsing def parse_input(data): data = data.strip().split(\'n\') T = int(data[0]) index = 1 test_cases = [] for _ in range(T): N, M = map(int, data[index].split()) matrix = [] for i in range(N): matrix.append(list(map(int, data[index+1+i].split()))) test_cases.append({\'dimensions\': (N, M), \'matrix\': matrix}) index += N + 1 return test_cases input_data = 2 2 3 3 1 2 6 5 4 3 3 1 2 3 4 5 6 7 8 9 test_cases = parse_input(input_data) result = min_first_row_sum(test_cases) print(result)"},{"question":"In a distant galaxy, there exists a network of teleportation portals connecting various planets. Each planet is represented as a node, and each portal as a bidirectional edge with a specific travel time between the two planets it connects. The Galactic Council wants to determine the shortest path from the capital planet to any other planet. Input The first line contains two integers n (2 ≤ n ≤ 2000) and m (1 ≤ m ≤ 10000) — the number of planets (nodes) and the number of portals (edges), respectively. The capital planet is always planet 1. The next m lines describe the portals. Each portal is described by three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10000), meaning there is a portal between planets u and v with travel time w. Output Print n-1 lines. Each line should contain a single integer representing the shortest travel time from the capital planet (planet 1) to planet i (for i from 2 to n). If there is no path to a planet, output -1 for that planet. Examples Input 4 5 1 2 4 1 3 2 3 2 1 2 4 7 3 4 3 Output 3 2 5 Input 3 1 1 2 1 Output 1 -1","solution":"import heapq def shortest_paths(n, m, edges): Uses Dijkstra\'s algorithm to find the shortest path from the capital planet (planet 1) to all other planets in a network of teleportation portals. Parameters: - n: number of planets (nodes) - m: number of portals (edges) - edges: list of edges (portals) where each edge is represented as (u, v, w) with u and v being the planets it connects and w being the travel time. Returns: - List of shortest travel time from planet 1 to planets 2 through n if unreachable, returns -1 for that planet. graph = {i: [] for i in range(1, n + 1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) dist = {i: float(\'inf\') for i in range(1, n + 1)} dist[1] = 0 priority_queue = [(0, 1)] while priority_queue: current_dist, u = heapq.heappop(priority_queue) if current_dist > dist[u]: continue for v, weight in graph[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(priority_queue, (distance, v)) result = [] for i in range(2, n + 1): if dist[i] == float(\'inf\'): result.append(-1) else: result.append(dist[i]) return result"},{"question":"Mia has an endless supply of tiles that she wants to use to build a decorative floor. Each tile is a square with side length of 1 unit. She wants to build a floor of size N x M (N rows and M columns) but she does not want any 2x2 square of tiles to be of the same color. She has two colors of tiles available: black and white. Determine the number of unique floor designs she can create under these constraints. Each floor design must be such that no four tiles (2x2 squares) form a 2x2 of the same color. Two designs are considered different if there is at least one tile that differs in color between the two designs. Input: The input consists of two integers N and M, which represent the number of rows and columns of the floor. Output: Output a single integer, the number of unique designs possible for the given floor dimensions, under the provided constraints. Constraints: 1 ≤ N ≤ 50 1 ≤ M ≤ 50 Example Input: 4 4 Example Output: 2 Explanation: For a 4x4 floor, the floor can be split into a grid of 2x2 tiles each. The number of unique designs come from careful arrangement of black and white tiles such that the 2x2 constraint is maintained. One possible design is alternating 2x2 blocks of black and white. Another valid design would be alternating rows or columns of black and white tiles.","solution":"def count_unique_designs(N, M): Returns the number of unique designs possible for a N x M floor such that no 2x2 squares of tiles are of the same color. # There are exactly 2 ways to tile the floor such that no 2x2 squares are of the same color. # One way is to use an alternating coloring pattern starting with black, # and the other way is to start with white. # [(black, white), (white, black)] return 2"},{"question":"You are given a string `sentence` which is a sequence of space-separated words, and an integer `k`. Your task is to reverse the order of the first `k` words in the sentence, while leaving the rest of the sentence unchanged. If `k` is greater than the number of words in the sentence, reverse all the words. Write a program that, given the `sentence` and `k`, prints the new sentence after performing the described operation. Constraints * The `sentence` consists of at most 100 words. * Each word consists of at most 10 lowercase English letters. * 1 ≤ k ≤ 100 Input Input is given from Standard Input in the following format: ``` sentence k ``` Output Print the new sentence after reversing the first `k` words. Examples Input ``` the quick brown fox jumps over the lazy dog 4 ``` Output ``` fox brown quick the jumps over the lazy dog ``` Input ``` hello world 3 ``` Output ``` world hello ``` Input ``` a b c d 2 ``` Output ``` b a c d ```","solution":"def reverse_k_words(sentence, k): Reverse the first k words of the sentence and return the new sentence. If k is greater than number of words in the sentence, reverse all the words. words = sentence.split() k = min(k, len(words)) reversed_part = words[:k][::-1] remaining_part = words[k:] return \' \'.join(reversed_part + remaining_part)"},{"question":"Given an integer n and an array of non-negative integers arr of size n, find the smallest positive integer that is missing from the array. A positive integer x is considered missing if it does not appear in the array and there is no other positive integer smaller than x that is missing from the array. Input The input consists of two lines: - The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array. - The second line contains n space-separated integers arr[i] (0 ≤ arr[i] ≤ 10^6), the elements of the array. Output Output a single integer, the smallest positive integer missing from the array. Examples Input 5 1 2 3 4 5 Output 6 Input 3 3 4 -1 1 Output 2 Input 5 1 2 0 -1 3 Output 4 Note In the first example, the smallest positive integer missing from the array is 6 because all integers from 1 to 5 are present in the array. In the second example, the smallest positive integer missing is 2 because 1 is present but 2 is not, and 3 is the next smallest number present. In the third example, the smallest positive integer missing is 4 because the integers 1, 2, and 3 are present, but 4 is not.","solution":"def smallest_missing_positive(n, arr): Finds the smallest positive integer missing from the array. present = [False] * (n + 1) # Keep track of presence of numbers from 1 to n # Mark all positive numbers that are present in the array for num in arr: if 1 <= num <= n: present[num] = True # Find the first index which is not marked for i in range(1, n + 1): if not present[i]: return i # If all numbers from 1 to n are present, then the missing number is n+1 return n + 1"},{"question":"Simon is developing a task management system for a productivity app. One of the key features of the system is the ability to set reminders for tasks based on a specific format. Each reminder has a due date in the format \\"YYYY-MM-DD hh:mm\\" (year, month, day, hour, minute), and a description, which is a string of lowercase Latin letters and spaces. Users can search for reminders due on a specific date or within a narrow time frame. Write a program to help Simon find reminders that are due within a specified interval. The input consists of a starting date and time, an ending date and time, and a list of reminders. The output should list all reminders that are due within the given interval, sorted by their due date and time. Input The first line contains the starting date and time in the format \\"YYYY-MM-DD hh:mm\\". The second line contains the ending date and time in the same format. The third line contains an integer n (1 ≤ n ≤ 100) which is the number of reminders. Then follow n lines, each containing a reminder\'s due date and time, and description, separated by a comma. Each reminder\'s details follow the format \\"YYYY-MM-DD hh:mm,description\\". Output Print all reminders that are due within the specified interval, sorted by their due date and time. Each reminder should be printed on a new line in the format \\"YYYY-MM-DD hh:mm,description\\". If there are no reminders within the interval, print \\"No reminders\\". Examples Input 2023-01-01 08:00 2023-01-02 08:00 3 2023-01-01 10:00,meeting with team 2023-01-01 09:00,doctor appointment 2023-01-02 09:00,breakfast with friends Output 2023-01-01 09:00,doctor appointment 2023-01-01 10:00,meeting with team Input 2023-01-01 12:00 2023-01-01 18:00 2 2023-01-01 20:00,dinner 2023-01-01 16:00,afternoon tea Output 2023-01-01 16:00,afternoon tea Input 2022-12-31 23:59 2023-01-01 00:01 1 2023-01-01 00:10,new year party Output No reminders","solution":"from datetime import datetime def find_reminders(start, end, reminders): Finds reminders due within a specified interval. Args: start (str): The starting date and time in the format \\"YYYY-MM-DD hh:mm\\". end (str): The ending date and time in the format \\"YYYY-MM-DD hh:mm\\". reminders (list of str): List of reminders in the format \\"YYYY-MM-DD hh:mm,description\\". Returns: list of str: Reminders that are due within the specified interval, sorted by due date and time. start_datetime = datetime.strptime(start, \\"%Y-%m-%d %H:%M\\") end_datetime = datetime.strptime(end, \\"%Y-%m-%d %H:%M\\") filtered_reminders = [] for reminder in reminders: due_datetime_str, description = reminder.split(\\",\\", 1) due_datetime = datetime.strptime(due_datetime_str, \\"%Y-%m-%d %H:%M\\") if start_datetime <= due_datetime <= end_datetime: filtered_reminders.append((due_datetime, reminder)) filtered_reminders.sort() return [reminder[1] for reminder in filtered_reminders] if filtered_reminders else [\\"No reminders\\"]"},{"question":"A city grid consists of n x n intersections. At each intersection, there is a building with a certain height given in a matrix of integers where the elevation matrix[i][j] represents the height of the building at the i-th row and j-th column. A robot starts at the top-left corner of the grid (0, 0) and its goal is to make its way to the bottom-right corner (n-1, n-1). The robot can only move right or down. Each time the robot moves to an adjacent intersection, it expends the energy equivalent to the absolute difference in height between the current intersection and the new intersection. Design an algorithm to find the minimum energy required for the robot to reach the bottom-right corner from the top-left corner. Input The first line contains an integer n (1 ≤ n ≤ 1000) representing the size of the grid. Each of the next n lines contains n space-separated integers representing the heights of the buildings in the city grid. Each elevation value is an integer in the range 0 to 10000. Output Print a single integer representing the minimum energy required for the robot to reach its goal. Examples Input 3 1 3 2 4 3 8 5 3 1 Output 4 Input 2 1 2 3 4 Output 3","solution":"def min_energy_path(grid): import heapq if not grid or not grid[0]: return 0 n = len(grid) directions = [(0, 1), (1, 0)] # Only right and down movements heap = [(0, 0, 0)] # (energy, x, y) visited = set((0, 0)) energy_matrix = [[float(\'inf\')] * n for _ in range(n)] energy_matrix[0][0] = 0 while heap: energy, x, y = heapq.heappop(heap) if x == n - 1 and y == n - 1: return energy for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited: new_energy = energy + abs(grid[nx][ny] - grid[x][y]) if new_energy < energy_matrix[nx][ny]: energy_matrix[nx][ny] = new_energy visited.add((nx, ny)) heapq.heappush(heap, (new_energy, nx, ny)) return energy_matrix[n - 1][n - 1] def read_input_and_compute_min_energy(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) grid = [] idx = 1 for i in range(n): row = list(map(int, data[idx:idx + n])) grid.append(row) idx += n result = min_energy_path(grid) print(result)"},{"question":"Problem Statement You have been provided with an array of integers. You are required to calculate the sum of the differences between each consecutive pair of elements, but only consider the positive differences. For example, given the array [4, 1, 3, 2], the calculation would be: - abs(4 - 1) = 3 (positive, included) - abs(1 - 3) = 2 (positive, included) - abs(3 - 2) = 1 (positive, included) Sum = 3 + 2 + 1 = 6 Your task is to write a function that computes this sum for the provided array. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer n, the number of elements in the array. The second line contains n space-separated integers representing the elements of the array. Output For each test case, output a single integer: the sum of the positive differences of the consecutive elements in the array. Constraints 1 ≤ T ≤ 1000 2 ≤ n ≤ 10^5 -10^9 ≤ array elements ≤ 10^9 Example Input: 1 4 4 1 3 2 Output: 6","solution":"def sum_of_positive_differences(T, test_cases): results = [] for case in test_cases: n, array = case sum_diff = 0 for i in range(n - 1): diff = abs(array[i] - array[i + 1]) sum_diff += diff results.append(sum_diff) return results # Example Usage T = 1 test_cases = [ (4, [4, 1, 3, 2]) ] print(sum_of_positive_differences(T, test_cases)) # Output: [6]"},{"question":"You are given an array of integers representing the scores of students in a class. You need to determine the median score for the class. If the number of students is odd, the median is the middle number in a sorted list of scores; if the number is even, the median is the average of the two middle numbers in the sorted list. Constraints * The number of scores, n, is in the range [1, 100]. * Each score is a non-negative integer no greater than 100. Input The input consists of a single line containing space-separated integers representing the scores in the class. Output Print the median score of the class to one decimal place. Examples Input 70 50 90 85 95 Output 85.0 Input 40 60 80 20 Output 50.0","solution":"def calculate_median(scores): Returns the median of the given scores. scores.sort() n = len(scores) if n % 2 == 1: # Odd number of elements median = scores[n // 2] else: # Even number of elements median = (scores[n // 2 - 1] + scores[n // 2]) / 2 return float(median)"},{"question":"A paint shop has N different colors of paint cans, and M jobs that need to be painted. Each job j specifies a subset of paint colors C_j that can be used for the job. A single color of paint must be chosen for each job, with the restriction that no two jobs can be painted with the same color. Your task is to determine if it is possible to choose a paint color for each job such that all jobs can be completed with different colors. If it is possible, output an assignment of colors for the jobs. If it is not possible, output `-1`. Constraints: * 1 ≤ N, M ≤ 100 * 1 ≤ |C_j| ≤ N for all jobs j * 1 ≤ C_j[i] ≤ N for all colors within a job\'s subset Input: The input is provided from the standard input in the following format: ``` N M C_1[1] C_1[2] ... C_1[k_1] C_2[1] C_2[2] ... C_2[k_2] ... C_M[1] C_M[2] ... C_M[k_M] ``` Output: If it is possible to assign a distinct color to each job according to the constraints, print the assignment as M space-separated integers representing the color assigned to each job from 1 to M. If it is not possible, print `-1`. Example: Input: ``` 3 3 1 2 3 2 3 1 3 ``` Output: ``` 1 2 3 ``` Input: ``` 2 3 1 2 1 2 1 2 ``` Output: ``` -1 ```","solution":"def paint_assignment(N, M, jobs): from itertools import permutations # Generate all possible permutations of available colors all_colors = list(range(1, N+1)) for perm in permutations(all_colors, M): valid = True for i in range(M): if perm[i] not in jobs[i]: valid = False break if valid: return perm return -1 def parse_input(input_str): lines = input_str.strip().split(\'n\') N, M = map(int, lines[0].split()) jobs = [list(map(int, line.split())) for line in lines[1:M+1]] return N, M, jobs def main(input_str): N, M, jobs = parse_input(input_str) result = paint_assignment(N, M, jobs) if result == -1: print(result) else: print(\' \'.join(map(str, result))) # Example usage: input_str = 3 3 1 2 3 2 3 1 3 main(input_str)"},{"question":"Alice loves playing with numbers and strings. She particularly enjoys finding patterns. Recently, she got a new challenge where she needs to identify all the starting indices of substrings in a string that are anagrams of a given pattern. An anagram is a rearrangement of the characters in the pattern. Write a function to help Alice solve this challenge. Input: The function will receive two inputs: - A string `s` of length between 1 and 10^5, consisting of lowercase English letters. - A string `p` of length between 1 and 10^4, consisting of lowercase English letters (the pattern to be anagrammed). Output: The function should return a list of starting indices of the substrings in `s` that are anagrams of `p`. The output should be in ascending order. Constraints: - The length of the pattern `p` will not exceed the length of the string `s`. Example Input: s = \\"cbaebabacd\\" p = \\"abc\\" Example Output: [0, 6] Explanation: The substring with starting index = 0 is \\"cba\\", which is an anagram of \\"abc\\". The substring with starting index = 6 is \\"bac\\", which is an anagram of \\"abc\\".","solution":"def find_anagrams(s, p): Find all starting indices of substrings in s that are anagrams of p. Parameters: s (str): The input string. p (str): The pattern string. Returns: List[int]: List of starting indices of substrings that are anagrams of p. from collections import Counter # Lengths of the input string and the pattern string len_s, len_p = len(s), len(p) # Early return if pattern length is greater than the string length if len_p > len_s: return [] # Result list to store the starting indices of the anagrams of p in s result = [] # Create frequency counters for the pattern and the initial window in the string p_counter = Counter(p) s_counter = Counter(s[:len_p-1]) # Iterate over the string s with a sliding window of length len_p for i in range(len_p-1, len_s): # Include the next character in the sliding window s_counter[s[i]] += 1 # If the sliding window matches the pattern frequency, add starting index to result if s_counter == p_counter: result.append(i - len_p + 1) # Remove the oldest character from the sliding window s_counter[s[i - len_p + 1]] -= 1 if s_counter[s[i - len_p + 1]] == 0: del s_counter[s[i - len_p + 1]] return result"},{"question":"Create a function that takes a string representing a Roman numeral and converts it to an integer. The input string will be a valid Roman numeral, within the range from 1 to 3999. Roman numerals are represented by seven different symbols: I, V, X, L, C, D, and M. **Examples:** - Input: \\"III\\" Output: 3 - Input: \\"IV\\" Output: 4 - Input: \\"IX\\" Output: 9 - Input: \\"LVIII\\" Output: 58 - Input: \\"MCMXCIV\\" Output: 1994 **Function Signature:** ```python def roman_to_int(s: str) -> int: # Your code here ```","solution":"def roman_to_int(s: str) -> int: Converts a Roman numeral string to an integer. :param s: A string representing a valid Roman numeral. :return: An integer corresponding to the Roman numeral. roman_to_int_map = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } total = 0 prev_value = 0 for char in reversed(s): current_value = roman_to_int_map[char] if current_value >= prev_value: total += current_value else: total -= current_value prev_value = current_value return total"},{"question":"Example Input 3 4 3 0 2 1 2 3 0 4 3 Output 9 [New Question]: A group of people are standing in a queue to buy tickets. Each person buys a ticket at different speeds and has different levels of patience. The queue is structured such that no one will wait indefinitely for their turn if it takes too long; they will leave the queue if their patience runs out. Given the speeds at which each person buys their ticket and their patience levels, find out how many people will successfully buy a ticket. Input: The first line contains two integers `n` and `k` — the number of people in the queue and the ticket processing time respectively. The next `n` lines each contain two integers `s_i` and `p_i` — the speed at which the person buys the ticket and their patience level. Output: Print a single integer representing the number of people who will successfully buy a ticket. Example Input: 5 2 3 4 2 5 1 3 4 6 2 4 Output: 3","solution":"def tickets_bought(n, k, people): successful_count = 0 for i in range(n): buy_time, patience = people[i] if patience >= (buy_time * (i + 1)): successful_count += 1 return successful_count # Example usage: # n = 5, k = 2 # people = [(3, 4), (2, 5), (1, 3), (4, 6), (2, 4)] # The output should be 3 n = 5 k = 2 people = [(3, 4), (2, 5), (1, 3), (4, 6), (2, 4)] print(tickets_bought(n, k, people)) # Expected output is 3"},{"question":"A food delivery service wants to analyze the delivery routes of their delivery people to identify the efficiency of the routes taken. They have all the delivery routes recorded as strings of location names. Each location name is denoted by a unique letter (\'A\' to \'Z\'). Your task is to find the length of the shortest possible route that visits all the delivery locations at least once. The delivery routes may contain repeated locations, but each location should be considered only once in the shortest route. Input: The input string represents the sequence of delivery routes taken. The string consists of uppercase Latin letters (\'A\' to \'Z\'). Output: Output an integer denoting the length of the shortest possible route that visits all locations at least once. Examples: Input: ABACAD Output: 4 Input: ABCDEFG Output: 7 Input: AABBCC Output: 3 Explanation: In the first example, the shortest route that visits all locations (\'A\', \'B\', \'C\', and \'D\') at least once is \\"ABCD\\", which has a length of 4. In the second example, each location appears exactly once in the input, so the shortest route is the same as the input string, which has a length of 7. In the third example, the shortest route that visits locations \'A\', \'B\', and \'C\' at least once is \\"ABC\\", which has a length of 3.","solution":"def shortest_route_length(route): Returns the length of the shortest possible route that visits all locations at least once. Parameters: route (str): A string representing the sequence of delivery routes taken. Returns: int: The length of the shortest possible route. unique_locations = set(route) return len(unique_locations)"},{"question":"Given an array of positive integers and a target integer, find all unique pairs of numbers in the array that add up to the target integer. You may not use the same element twice. Input The first line contains an integer n, the size of the array (1 ≤ n ≤ 10^5). The second line contains n space-separated positive integers representing the array elements (1 ≤ arr[i] ≤ 10^9). The third line contains a single integer target. Output For each unique pair that adds up to the target, print the pair in a single line in the format \\"x y\\" where x and y are the elements of the array. Pairs should be printed in ascending order of their first element, and if the first elements are the same, then by the second element. If there are no such pairs, print \\"-1\\". Examples Input 5 1 2 3 4 5 5 Output 1 4 2 3 Input 6 1 1 2 3 4 4 8 Output 4 4 Input 4 1 2 3 9 10 Output 1 9","solution":"def find_unique_pairs(n, array, target): Find all unique pairs in array that add up to the target. array.sort() pairs = set() seen = {} for num in array: complement = target - num if complement in seen: pair = tuple(sorted((complement, num))) pairs.add(pair) seen[num] = True if not pairs: return \\"-1\\" result = \'n\'.join(f\\"{x} {y}\\" for x, y in sorted(pairs)) return result"},{"question":"You are given a matrix of size n x n filled with integers, where each row is in non-decreasing order. Your task is to find the k-th smallest element in the matrix. Write a program to solve this problem. Input The first line contains two integers n and k (1 ≤ n ≤ 300, 1 ≤ k ≤ n^2) — the size of the matrix and the k-th smallest number you need to find. Each of the next n lines contains n integers a[i][j] (1 ≤ a[i][j] ≤ 10^9), representing the matrix elements. It is guaranteed that each row is sorted in non-decreasing order and the matrix consists of distinct elements. Output Print the k-th smallest number in the matrix. Example Input 3 5 1 5 9 10 11 13 12 13 15 Output 11 Note In the given 3x3 matrix, the elements in sorted order are [1, 5, 9, 10, 11, 12, 13, 13, 15]. The 5th smallest element is 11.","solution":"import heapq def kth_smallest_element(n, k, matrix): Finds the k-th smallest element in an n x n matrix where each row is sorted in non-decreasing order. Args: n: int - size of the matrix (n x n). k: int - the k-th position to find. matrix: List[List[int]] - the n x n matrix represented as a list of lists. Returns: int - the k-th smallest element in the matrix. # Min-heap to keep the smallest elements min_heap = [] # Initialize the heap with the first element of each row for r in range(min(n, k)): heapq.heappush(min_heap, (matrix[r][0], r, 0)) # Extract the minimum element from the heap k times for _ in range(k - 1): element, r, c = heapq.heappop(min_heap) if c + 1 < n: heapq.heappush(min_heap, (matrix[r][c + 1], r, c + 1)) return min_heap[0][0] # Example usage n, k = 3, 5 matrix = [ [1, 5, 9], [10, 11, 13], [12, 13, 15], ] print(kth_smallest_element(n, k, matrix)) # Output: 11"},{"question":"Jeff loves palindromes. A palindrome is a string that reads the same backward as forward. Jeff is working on constructing special palindromes based on a given set of characters. He defines a palindrome as \\"special\\" if every character in the palindrome appears an even number of times, except for at most one character which can appear an odd number of times. Help Jeff determine the length of the longest special palindrome that can be constructed using the characters from the given string. Input The input consists of a single line containing a string of lowercase English letters s (1 ≤ |s| ≤ 10^5), the set of characters from which Jeff wants to create his special palindrome. Output Print a single integer — the length of the longest special palindrome that Jeff can construct with the given string. Examples Input abccccdd Output 7 Input aabbcc Output 6 Note In the first example, one of the longest special palindromic strings that can be constructed is \\"dccaccd,\\" which has a length of 7. In the second example, the entire string \\"aabbcc\\" can form the longest special palindromic string with a length of 6.","solution":"def longest_special_palindrome(s): from collections import Counter char_count = Counter(s) length = 0 odd_count_found = False for count in char_count.values(): if count % 2 == 0: length += count else: length += count - 1 odd_count_found = True if odd_count_found: length += 1 # Add the central odd-count character, if any return length"},{"question":"You are given an array of n integers and a target sum k. Your task is to find two numbers in the array such that they add up to the target sum k. If there are multiple solutions, you may return any of them. If no such pairs exist, return an empty array. Input The input consists of two lines: - The first line contains two integers n and k (2 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9). - The second line contains n integers a_1, a_2, ..., a_n (|a_i| ≤ 10^9). Output Output two integers that add up to k. If there are multiple solutions, print any of them. If no such pair exists, print an empty array. Examples Input 5 10 2 7 11 15 1 Output 2 8 Input 4 9 2 7 11 15 Output 2 7 Input 3 5 1 2 3 Output 2 3 Input 3 0 -1 1 0 Output -1 1 Input 4 4 1 2 3 5 Output 1 3","solution":"def find_pair_with_sum(n, k, arr): Finds two numbers in the array that add up to k. Parameters: n (int): Number of elements in the array. k (int): The target sum. arr (list of int): List of integers. Returns: list of int: A list containing two numbers that add up to k, or an empty list if no such pair exists. seen = {} for num in arr: if k - num in seen: return [k - num, num] seen[num] = True return []"},{"question":"You are given a string composed of lowercase English letters and an integer k. Your task is to find the largest possible lexicographical string after at most k operations. In one operation, you can choose any character of the string and replace it with any lowercase English letter. Input The input consists of two lines. - The first line contains the string s (1 ≤ |s| ≤ 100), the string composed of lowercase English letters. - The second line contains an integer k (0 ≤ k ≤ 100). Output Output a single string, the largest possible lexicographical string after at most k operations. Examples Input abcdef 1 Output bbcdef Input xyz 0 Output xyz Input abcdef 3 Output cccdef","solution":"def largest_lexicographical_string(s, k): Returns the largest possible lexicographical string after at most k operations. In one operation, you can choose any character of the string and replace it with any lowercase English letter. # Convert the string into a list of characters s = list(s) n = len(s) # Try to replace up to k characters starting from the left for i in range(min(k, n)): s[i] = \'z\' return \'\'.join(s)"},{"question":"You are given two arrays of integers, `monsters` and `heroes`. Each integer in the array represents the strength of the respective monster or hero. A hero can defeat a monster if the strength of the hero is greater than or equal to the strength of the monster. Each hero can defeat at most one monster, and each monster can be defeated at most once. Write a program to determine the maximum number of monsters that can be defeated. # Inputs - The first line contains an integer `n` (1 ≤ n ≤ 10^5), the number of monsters. - The second line contains an integer `m` (1 ≤ m ≤ 10^5), the number of heroes. - The third line contains `n` space-separated integers representing the strength of the monsters. - The fourth line contains `m` space-separated integers representing the strength of the heroes. # Output - The output should be a single line containing the maximum number of monsters that can be defeated. # Example Input ``` 5 3 4 8 15 16 23 9 3 17 ``` Output ``` 2 ``` Input ``` 6 6 1 2 3 4 5 6 7 7 7 7 7 7 ``` Output ``` 6 ``` Input ``` 5 0 1 2 3 4 5 ``` Output ``` 0 ``` # Note In the first example, the heroes can defeat the monsters as follows: - The hero with strength 9 can defeat the monster with strength 8. - The hero with strength 17 can defeat the monster with strength 15. - The hero with strength 3 cannot defeat any monster. So, the maximum number of monsters defeated is 2. In the second example, each hero can defeat any one monster because all the heroes are stronger than all the monsters, hence 6 monsters can be defeated. In the third example, there are no heroes, so no monsters can be defeated.","solution":"def max_monsters_defeated(n, m, monsters, heroes): Returns the maximum number of monsters that can be defeated by heroes. monsters.sort() heroes.sort() monsters_defeated = 0 hero_index = 0 for monster in monsters: while hero_index < m and heroes[hero_index] < monster: hero_index += 1 if hero_index < m and heroes[hero_index] >= monster: monsters_defeated += 1 hero_index += 1 return monsters_defeated"},{"question":"A complex system of gears and levers is used in a factory to move items across various conveyor belts. The conveyor belts are arranged in a linear sequence, and items can only move forward from one belt to the next. Each conveyor belt i (1 ≤ i ≤ n) has a maximum load capacity ci, which dictates how many items it can move in a single minute. Additionally, it takes ti minutes for conveyor belt i to move its load forward to the next conveyor belt. Sometimes, due to mechanical issues or maintenance, some conveyor belts can stop working. Each malfunctioning belt must be manually reactivated, which takes ri minutes. When a conveyor belt malfunctions, any items on the belt remain there until it is reactivated. Given n, the number of conveyor belts, and for each conveyor belt, its maximum load capacity, operation time, and reactivation time, you are to determine the earliest possible time at which all items will have successfully moved off the last conveyor belt. Note that the items move as quickly as possible, respecting the constraints and order of conveyor belts. Input The first input line contains a single integer n (1 ≤ n ≤ 100) — the number of conveyor belts. Each of the next n lines describes a conveyor belt with three space-separated integers ci, ti, ri (1 ≤ ci ≤ 100, 1 ≤ ti, 1 ≤ ri ≤ 100) — the maximum load capacity, operation time, and reactivation time for the ith conveyor belt respectively. Output Print a single line containing a single integer — the earliest time at which all items have moved off the last conveyor belt. Examples Input 3 10 5 15 12 8 20 7 4 10 Output 37 Input 2 8 6 12 10 3 7 Output 18 Note In the first example, each conveyor belt has different load capacities and times. The total time is dictated by how quickly items can move through each stage, taking into account potential downtimes. In the second example, fewer stages result in a shorter total time.","solution":"def earliest_completion_time(n, conveyor_belts): total_time = 0 for i in range(n): c_i, t_i, r_i = conveyor_belts[i] total_time += t_i return total_time # Example usage: n = 3 conveyor_belts = [ (10, 5, 15), (12, 8, 20), (7, 4, 10) ] print(earliest_completion_time(n, conveyor_belts)) # Output: 37"},{"question":"Given a rectangular grid of characters, some of which are \'#\' (walls) and \'.\' (open cells), you are to find if there exists a path from the top-left corner of the grid to the bottom-right corner. You can move up, down, left, or right, but you cannot move through walls (\'#\'). Write a function `path_exists(grid: List[str]) -> str` that takes a list of strings representing the grid and returns \'Yes\' if there is a path from the top-left corner to the bottom-right corner, and \'No\' otherwise. # Input - A list of strings where each string represents a row in the grid. - Each character in the string is either \'.\' or \'#\'. - The top-left cell (grid[0][0]) and the bottom-right cell (grid[-1][-1]) are always \'.\'. # Output - Return \'Yes\' if a path exists, otherwise return \'No\'. # Example Input ``` [ \\".....\\", \\"...#.\\", \\".#...\\", \\".....\\", \\"...#.\\" ] ``` Output ``` Yes ``` Input ``` [ \\".....\\", \\"...#.\\", \\".#...\\", \\".....\\", \\"#...#\\" ] ``` Output ``` No ```","solution":"from typing import List def path_exists(grid: List[str]) -> str: Determines if a path exists from the top-left to the bottom-right corner of the grid. rows, cols = len(grid), len(grid[0]) visited = [[False] * cols for _ in range(rows)] def is_valid(x, y): return 0 <= x < rows and 0 <= y < cols and grid[x][y] == \'.\' and not visited[x][y] def dfs(x, y): if not is_valid(x, y): return False if x == rows - 1 and y == cols - 1: return True visited[x][y] = True # Explore all 4 possible directions: down, up, right, left if dfs(x + 1, y) or dfs(x - 1, y) or dfs(x, y + 1) or dfs(x, y - 1): return True return False return \'Yes\' if dfs(0, 0) else \'No\'"},{"question":"You are given a sequence of brackets. Your task is to determine whether the sequence is valid. A valid sequence of brackets is one where every opening bracket has a corresponding closing bracket and the brackets are properly nested. The following constraints apply: - The brackets are limited to the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. - An opening bracket must have a corresponding closing bracket of the same type. - A closing bracket must close the most recently opened unclosed bracket. Write a program to validate the sequences of brackets. Input The input is a sequence of datasets. Each dataset is a line of brackets consisting of the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\' only. It is guaranteed that the length of each bracket sequence will not exceed 100 characters. The end of the input is indicated by a single line containing the word \\"end\\". Output The output for each dataset should be a single line containing either \\"Valid\\" if the bracket sequence is valid, or \\"Invalid\\" if it is not. Maintain the order of the input datasets. Example Input () ()[]{} ({[]}) (] ([)] end Output Valid Valid Valid Invalid Invalid","solution":"def isValid(sequence): Returns \'Valid\' if the bracket sequence is valid, otherwise \'Invalid\'. stack = [] close_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in sequence: if char in close_map.values(): stack.append(char) elif char in close_map.keys(): if stack == [] or close_map[char] != stack.pop(): return \\"Invalid\\" else: return \\"Invalid\\" return \\"Valid\\" if stack == [] else \\"Invalid\\" def validate_sequences(sequences): Takes a list of bracket sequences and returns a list with \\"Valid\\" or \\"Invalid\\" for each sequence. results = [] for sequence in sequences: if sequence == \\"end\\": break results.append(isValid(sequence)) return results"},{"question":"You are managing a fleet of delivery drones that deliver packages across a city. The city can be represented as an n x n grid. Each cell in this grid either contains a building (represented by a 1) or an empty space (represented by a 0). Each delivery drone can only move vertically or horizontally between adjacent cells. Your goal is to determine the shortest distance from the top-left corner of the grid (cell at position (0, 0)) to the bottom-right corner (cell at position (n-1, n-1)) if a path exists. If there is no path, return -1. Note that drones cannot move through buildings (cells with a 1). They can only travel through empty spaces (cells with a 0). Input The first line of the input contains a single integer n (2 ≤ n ≤ 500) which represents the dimensions of the grid. The next n lines each contain n space-separated integers (either 0 or 1) representing the grid. Output Output a single integer — the minimum number of moves required to reach the bottom-right corner from the top-left corner. If there is no valid path, output -1. Examples Input 4 0 0 0 0 1 1 0 1 0 0 0 0 1 0 1 0 Output 6 Input 3 0 1 0 1 1 0 0 0 0 Output -1 Explanation In the first example, the drone can move from (0, 0) to (3, 3) via the following path: (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2) -> (3, 2) -> (3, 3). In the second example, there is no valid path from the top-left corner to the bottom-right corner.","solution":"from collections import deque def shortest_path(grid): n = len(grid) if grid[0][0] == 1 or grid[n-1][n-1] == 1: return -1 directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] queue = deque([(0, 0, 0)]) # (row, col, steps) visited = set() visited.add((0, 0)) while queue: r, c, steps = queue.popleft() if r == n-1 and c == n-1: return steps for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < n and (nr, nc) not in visited and grid[nr][nc] == 0: visited.add((nr, nc)) queue.append((nr, nc, steps + 1)) return -1"},{"question":"You are given an integer `n`. Determine if `n` has exactly three distinct positive divisors. Constraints * 1 ≤ n ≤ 10^9 Input Input is given from Standard Input in the following format: n Output If `n` has exactly three distinct positive divisors, print `Yes`; otherwise, print `No`. Examples Input 4 Output Yes Input 6 Output No Input 9 Output No Input 8 Output No","solution":"def has_exactly_three_divisors(n): Determine if n has exactly three distinct positive divisors. if n < 2: return \\"No\\" def is_prime(x): if x < 2: return False for i in range(2, int(x**0.5) + 1): if x % i == 0: return False return True root = int(n**0.5) if root * root == n and is_prime(root): return \\"Yes\\" else: return \\"No\\""},{"question":"You are given a list of integers representing the temperature of a city for each day of the month. Your task is to determine the longest streak of days with non-decreasing temperatures. Write a function `longest_streak(temp: List[int]) -> int` that takes a list of integers as input and returns the length of the longest streak of non-decreasing temperatures. # Input - A list of integers `temp` (1 ≤ len(temp) ≤ 1000) where each integer (-100 ≤ temperature ≤ 100) represents the temperature of the city on each day. # Output - An integer representing the length of the longest streak of non-decreasing temperatures. # Function Signature ```python def longest_streak(temp: List[int]) -> int: pass ``` # Examples Example 1: Input: ```python longest_streak([1, 2, 2, 3, 2, 4, 5]) ``` Output: ```python 4 ``` Explanation: The longest streak of non-decreasing temperatures is [1, 2, 2, 3]. Example 2: Input: ```python longest_streak([5, 4, 3, 2, 1]) ``` Output: ```python 1 ``` Explanation: All temperatures are in decreasing order, so the longest streak of non-decreasing temperatures is any single day. Example 3: Input: ```python longest_streak([0, 1, 0, 1, 2, 3, -1, 4]) ``` Output: ```python 4 ``` Explanation: The longest streak of non-decreasing temperatures is [0, 1, 2, 3]. # Note Ensure your solution efficiently handles the constraints, and consider edge cases where the input list is either strictly increasing, strictly decreasing, or has a mix of both trend types.","solution":"def longest_streak(temp): Returns the length of the longest streak of non-decreasing temperatures. if not temp: return 0 max_streak = 1 current_streak = 1 for i in range(1, len(temp)): if temp[i] >= temp[i - 1]: current_streak += 1 max_streak = max(max_streak, current_streak) else: current_streak = 1 # reset the streak return max_streak"},{"question":"Alice is learning about number sequences and wants to practice generating the Fibonacci sequence. The Fibonacci sequence is defined as follows: - F(0) = 0 - F(1) = 1 - F(n) = F(n-1) + F(n-2) for n ≥ 2 She decides to write a program that computes the nth Fibonacci number. But there\'s a twist—she wants to limit her program to use no loops or recursion, relying solely on mathematical operations and data storage. Write a function that computes the nth Fibonacci number using an iterative approach, but without explicitly using loops. Instead, utilize matrix exponentiation or another advanced mathematical technique to achieve the result. Input The input is a single integer n (0 ≤ n ≤ 1,000,000), the position in the Fibonacci sequence for which she wants to compute the value. Output Print a single integer — the nth Fibonacci number. Examples Input 10 Output 55 Input 20 Output 6765 Input 50 Output 12586269025 Note In the first example, the 10th Fibonacci number is 55. In the second example, the 20th Fibonacci number is 6765. In the third example, the 50th Fibonacci number is 12586269025.","solution":"def fibonacci(n): Returns the nth Fibonacci number using matrix exponentiation. def matrix_mult(A, B): return [ [A[0][0] * B[0][0] + A[0][1] * B[1][0], A[0][0] * B[0][1] + A[0][1] * B[1][1]], [A[1][0] * B[0][0] + A[1][1] * B[1][0], A[1][0] * B[0][1] + A[1][1] * B[1][1]] ] def matrix_pow(mat, p): result = [[1, 0], [0, 1]] # Identity matrix base = mat while p: if p % 2 == 1: result = matrix_mult(result, base) base = matrix_mult(base, base) p //= 2 return result if n == 0: return 0 elif n == 1: return 1 F = [[1, 1], [1, 0]] result = matrix_pow(F, n - 1) return result[0][0]"},{"question":"Given a string S, determine if it is a palindrome, ignoring non-alphanumeric characters and case differences. Input Format A single line containing the string S. Output Format Print \\"YES\\" if the given string is a palindrome, otherwise print \\"NO\\". Constraints 1 ≤ length of S ≤ 1000 A palindrome is a string that reads the same forward and backward. For this task, ignore any characters that are not alphanumeric and consider case differences. SAMPLE INPUT A man, a plan, a canal: Panama SAMPLE OUTPUT YES","solution":"def is_palindrome(S): Determines if the given string is a palindrome, ignoring non-alphanumeric characters and case differences. Args: S (str): The input string. Returns: str: \\"YES\\" if the string is a palindrome, \\"NO\\" otherwise. import re # Remove non-alphanumeric characters and convert string to lowercase cleaned_str = re.sub(\'[^a-zA-Z0-9]\', \'\', S).lower() # Check if the cleaned string is equal to its reverse if cleaned_str == cleaned_str[::-1]: return \\"YES\\" else: return \\"NO\\""},{"question":"Given a positive integer N, find the number of ways to express N as the sum of two or more consecutive positive integers. For example, the number 15 can be expressed as: - 7 + 8 - 4 + 5 + 6 - 1 + 2 + 3 + 4 + 5 Thus, there are 3 ways to express 15 as the sum of consecutive positive integers. Constraints: - 1 le N le 10^9 Input An integer N. Output The number of ways to express N as the sum of two or more consecutive positive integers. Examples Input 15 Output 3 Input 10 Output 1","solution":"def count_consecutive_sum_ways(N): Returns the number of ways to express N as the sum of two or more consecutive positive integers. count = 0 m = 1 while m * (m + 1) < 2 * N: if (N - m * (m + 1) // 2) % (m + 1) == 0: count += 1 m += 1 return count"},{"question":"You are given a list of integers. Your task is to write a function that removes the duplicate integers and returns the list sorted in non-decreasing order. Input The first line of input contains an integer n (1 ≤ n ≤ 1000), representing the size of the list. The second line contains n integers ai (0 ≤ ai ≤ 1000). Output Output the sorted list of integers without duplicates. Examples Input 7 3 1 2 3 4 2 1 Output 1 2 3 4 Input 5 10 20 10 30 20 Output 10 20 30 Note In the first example, the input list is [3, 1, 2, 3, 4, 2, 1]. After removing duplicates, it becomes [3, 1, 2, 4]. Sorting it in non-decreasing order we get [1, 2, 3, 4]. In the second example, the input list is [10, 20, 10, 30, 20]. After removing duplicates, it becomes [10, 20, 30]. Sorting it in non-decreasing order we get [10, 20, 30].","solution":"def remove_duplicates_and_sort(arr): Removes duplicates from `arr` and returns the list sorted in non-decreasing order. Parameters: arr (list): A list of integers. Returns: list: A sorted list of integers without duplicates. return sorted(set(arr))"},{"question":"In a distant galaxy, there is a species of creatures known as Terbongers, who communicate using sequences of colors. Each creature has a communication device that can emit sequences of colors represented by strings of lowercase letters where each letter corresponds to a specific color. The Terbongers have developed a special algorithm to check whether two color sequences can be considered the same if they can transform one sequence into another by deleting some (can be none) but not necessarily all the characters in the sequences. You are tasked to write a program to determine if one color sequence is a subsequence of another. Input The first line contains an integer T (1 ≤ T ≤ 104) - the number of test cases. Each test case consists of two lines: The first line of each test case contains a string S (1 ≤ |S| ≤ 105) representing the primary color sequence. The second line contains another string T (1 ≤ |T| ≤ 105) representing the secondary color sequence. Output For each test case, print \\"YES\\" if the secondary string can become the primary string after deleting some characters, otherwise print \\"NO\\". Example Input 2 abc ahbgdc axc ahbgdc Output YES NO","solution":"def is_subsequence(s, t): Determines if s is a subsequence of t. it = iter(t) return all(char in it for char in s) def check_subsequences(test_cases): For each test case, determines if the first string is a subsequence of the second. results = [] for s, t in test_cases: if is_subsequence(s, t): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Function to read test cases, to be used in unit tests def read_test_cases(input_string): lines = input_string.strip().split(\\"n\\") T = int(lines[0]) test_cases = [(lines[i*2+1], lines[i*2+2]) for i in range(T)] return test_cases # Function to execute the process def main(input_string): test_cases = read_test_cases(input_string) results = check_subsequences(test_cases) return \\"n\\".join(results) # Example Run input_string = 2 abc ahbgdc axc ahbgdc print(main(input_string))"},{"question":"In a distant land, the citizens celebrate a festival where they decorate their houses with colorful flags. Each house on a street gets a flag, and each flag has one single distinct color represented by a number. The city council wants to ensure that no two neighboring houses have the same color flag. They need your help to write a program that assesses if a given street\'s flag arrangement meets this requirement. Given the number of houses on a street, followed by the sequence of color numbers representing the flags on the houses, determine if the arrangement follows the no-neighboring-same-color rule. Input Multiple datasets are given as input. The first line of each dataset is an integer n (the number of houses). The next line consists of n integers representing the color of the flags on each house. When n is 0, it indicates the end of input. Do not output for this input. Output For each dataset, print \\"YES\\" if the flag arrangement is valid, otherwise print \\"NO\\". Example Input 4 1 2 1 3 5 1 2 2 4 5 3 1 1 1 0 Output YES NO NO","solution":"def check_flag_arrangement(datasets): results = [] for n, flags in datasets: if n == 0: continue valid = True for i in range(n - 1): if flags[i] == flags[i + 1]: valid = False break results.append(\\"YES\\" if valid else \\"NO\\") return results"},{"question":"You are given an array of `n` integers and a sequence of `q` queries. Each query asks for the sum of the elements of the array between two given indices, inclusive. To make the task interesting and challenging, Boboniu introduces some rules for processing the queries: 1. Every query is in one of the following formats: - `1 i v` which means set the value of the element at index `i` to `v`. - `2 l r` which means calculate the sum of the elements from index `l` to index `r` inclusive. 2. The special rule is that all queries of type `2 l r` must be independent of each other, meaning that each query operates on the array as it was during the previous query of type `2 l r`, ignoring any `1 i v` queries in between. Boboniu guarantees that the queries are well-formed and the given indices are valid. Your task is to output the results of all queries of type `2 l r`. Input The first line contains two integers `n` and `q` (1 ≤ n, q ≤ 10^5) — the length of the array and the number of queries. The second line contains `n` integers `a_i` (1 ≤ a_i ≤ 10^9) — the initial array elements. Each of the next `q` lines contains a query with the format described above. Output For each query of type `2 l r`, print a single integer — the sum of the elements from index `l` to index `r` inclusive, according to the rules. Examples Input ``` 5 5 1 2 3 4 5 2 2 4 1 3 10 2 1 3 1 5 7 2 4 5 ``` Output ``` 9 6 5 ``` Explanation - For the first query, we calculate the sum from index 2 to 4, which is 2 + 3 + 4 = 9. - The second query updates the element at index 3 to 10. - For the third query, we calculate the sum from index 1 to 3 using the original array, which is 1 + 2 + 3 = 6. - The fourth query updates the element at index 5 to 7. - For the fifth query, we calculate the sum from index 4 to 5 using the original array, which is 4 + 5 = 9. Note that each type `2` query works independently of the updates made by type `1` queries (i.e., the array resets to its original values for each type `2` query).","solution":"def process_queries(n, q, arr, queries): Processes the queries as per the rules defined. Parameters: n (int): The length of the array. q (int): The number of queries. arr (list): The initial array of integers. queries (list): The list of queries. Returns: list: The results of the `2 l r` queries. results = [] for query in queries: if query[0] == 2: # Calculate the sum for type `2 l r` query l, r = query[1] - 1, query[2] - 1 results.append(sum(arr[l:r + 1])) return results"},{"question":"You are given a permutation of integers from 1 to n. A permutation is a sequence of n integers in which every integer from 1 to n appears exactly once. You need to find the length of the longest subsequence of the permutation which is also in ascending order. Suppose you have the following permutation [4, 3, 1, 2], the longest increasing subsequence is [1, 2], and its length is 2. Your task is to write a function that, for each permutation given, computes the length of the longest increasing subsequence. Input The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. Each of the next t lines contains n — the size of the permutation (1 ≤ n ≤ 1000) followed by a permutation of integers from 1 to n. Output For each test case, output the length of the longest increasing subsequence of the given permutation. Example Input 3 4 4 3 1 2 5 5 1 2 3 4 3 1 3 2 Output 2 4 2 Explanation 1. The permutation [4, 3, 1, 2] has the longest increasing subsequence [1, 2] with length 2. 2. The permutation [5, 1, 2, 3, 4] has the longest increasing subsequence [1, 2, 3, 4] with length 4. 3. The permutation [1, 3, 2] has the longest increasing subsequence [1, 2] with length 2.","solution":"def length_of_lis(permutation): This function computes the length of the longest increasing subsequence (LIS) for a given permutation. if not permutation: return 0 n = len(permutation) lis = [1] * n for i in range(1, n): for j in range(i): if permutation[i] > permutation[j]: lis[i] = max(lis[i], lis[j] + 1) return max(lis) def process_test_cases(test_cases): results = [] for n, permutation in test_cases: results.append(length_of_lis(permutation)) return results"},{"question":"Problem: Every year, the city of Algorithmia hosts a number of computer science workshops which are organized in a unique manner. Each workshop is designed such that it caters to the interest of programmers at different expertise levels, determined by the workshop number. The workshops follow a specific pattern as outlined below: - If the workshop number W is divisible by 4, it is aimed at \\"Beginners\\". - If the workshop number W modulo 4 gives a remainder of 1, it is aimed at \\"Intermediate\\" programmers. - If the workshop number W modulo 4 gives a remainder of 2, it is aimed at \\"Advanced\\" programmers. - If the workshop number W modulo 4 gives a remainder of 3, it is aimed at \\"Expert\\" programmers. Given a number of workshop queries, your task is to determine the target audience for each workshop based on the workshop number. Input: The first line contains an integer Q (number of queries). The next Q lines each contain a single integer W. Output: For each query, print the level corresponding to the workshop number W (\\"Beginners\\", \\"Intermediate\\", \\"Advanced\\", \\"Expert\\"). Constraints: 1 ≤ Q ≤ 1000 1 ≤ W ≤ 10^9 Example Input: 5 1 2 3 4 5 Example Output: Intermediate Advanced Expert Beginners Intermediate Explanation: - For W = 1, the remainder when divided by 4 is 1, hence the workshop is for Intermediate programmers. - For W = 2, the remainder when divided by 4 is 2, hence the workshop is for Advanced programmers. - For W = 3, the remainder when divided by 4 is 3, hence the workshop is for Expert programmers. - For W = 4, it is exactly divisible by 4, hence the workshop is for Beginners. - For W = 5, the remainder when divided by 4 is 1, hence the workshop is for Intermediate programmers.","solution":"def get_workshop_target(W): Returns the target audience for the workshop based on the workshop number W. if W % 4 == 0: return \\"Beginners\\" elif W % 4 == 1: return \\"Intermediate\\" elif W % 4 == 2: return \\"Advanced\\" elif W % 4 == 3: return \\"Expert\\" def process_workshops(Q, workshops): Processes multiple workshop queries and returns their corresponding target audience. results = [] for W in workshops: results.append(get_workshop_target(W)) return results"},{"question":"Given a series of financial transactions in the form of credits and debits, you are tasked with determining the final balance of an account. Each transaction will either add to the account balance (credit) or subtract from it (debit). Write a program that reads a list of transactions and computes the final account balance. A credit transaction is represented as \\"C amount\\" and a debit transaction is represented as \\"D amount\\". If at any point the balance becomes negative, print \\"Insufficient funds\\" and stop processing any further transactions. Input The first line contains the initial balance (0 ≤ initial_balance ≤ 10^9). The second line contains the number of transactions T (1 ≤ T ≤ 100). Each of the next T lines contains a transaction in the format described above. Output Print the final balance or \\"Insufficient funds\\" if the balance goes negative due to a transaction. Example Input 1000 5 C 500 D 300 D 1500 C 100 D 200 Output Insufficient funds Example Input 1000 3 C 500 D 300 D 200 Output 1000","solution":"def compute_final_balance(initial_balance, transactions): Computes the final balance after processing the transactions. Parameters: initial_balance (int): The initial balance of the account. transactions (list of str): List of transactions. Each transaction is in the form \\"C amount\\" or \\"D amount\\". Returns: str: The final balance or \\"Insufficient funds\\" if the balance goes negative. balance = initial_balance for transaction in transactions: type_, amount = transaction.split() amount = int(amount) if type_ == \'C\': balance += amount elif type_ == \'D\': balance -= amount if balance < 0: return \\"Insufficient funds\\" return str(balance)"},{"question":"A company has a special encryption technique for their string messages. They classify a string as \\"Secure\\" if it meets certain criteria: the string must contain both an uppercase letter (\'A\'-\'Z\') and a lowercase letter (\'a\'-\'z\'). If any of these criteria are not met, the string is classified as \\"Not Secure\\". Write a program to determine how each string should be classified. Input The first line contains an integer N denoting the number of strings. Each of the next N lines contains a string composed of any printable ASCII characters. Output For every string, print in a single line Secure or Not Secure as per the classification criteria. Constraints 1 ≤ N ≤ 100 1 ≤ |S| ≤ 10^5 The sum of lengths of all strings in one test file will not exceed 6*10^6. Example Input: 3 helloWorld HELLOWORLD hello1234 Output: Secure Not Secure Not Secure Explanation Example case 1. The string \\"helloWorld\\" contains both lowercase (\'h\', \'e\', \'l\', \'o\') and uppercase (\'W\') letters. Example case 2. The string \\"HELLOWORLD\\" only contains uppercase letters and no lowercase letters. Example case 3. The string \\"hello1234\\" only contains lowercase letters and no uppercase letters.","solution":"def classify_strings(strings): Classify each string in the input list as \\"Secure\\" or \\"Not Secure\\" based on the presence of both uppercase and lowercase letters. results = [] for s in strings: has_upper = any(c.isupper() for c in s) has_lower = any(c.islower() for c in s) if has_upper and has_lower: results.append(\\"Secure\\") else: results.append(\\"Not Secure\\") return results"},{"question":"There is an alien language\'s dictionary which is a sorted list of words according to the alien language\'s lexicographical order. Given a list of words in this alien language dictionary, you need to derive the order of characters in the alien language. Assume that all characters are from the English alphabet (\'a\' to \'z\'). You may assume that if a word a is prefix of another word b, then a must appear before b. If the order is invalid, return an empty string. Input: - A list of words in the alien dictionary, each word is a string of lowercase letters. (1 ≤ number of words ≤ 1000, 1 ≤ length of each word ≤ 1000). Output: - A string representing the order of characters in the alien language. If no valid order exists, return an empty string. Example: Input: [\\"wrt\\",\\"wrf\\",\\"er\\",\\"ett\\",\\"rftt\\"] Output: wertf Explanation: From \\"wrt\\" and \\"wrf\\", we can derive \'t\' is before \'f\'. From \\"wrf\\" and \\"er\\", we can derive \'w\' is before \'e\'. From \\"er\\" and \\"ett\\", we can derive \'r\' is before \'t\'. The valid order is \\"wertf\\". Note: - Multiple valid orderings are possible, return any of them. - The order of characters must be valid for all the given words.","solution":"from collections import defaultdict, deque def alien_order(words): # create default dictionaries for graph and in-degrees graph = defaultdict(set) in_degree = defaultdict(int) # Initialize graph, in-degree counts for word in words: for char in word: if char not in in_degree: in_degree[char] = 0 # Build the graph and count in-degrees of nodes for i in range(len(words) - 1): first, second = words[i], words[i + 1] min_length = min(len(first), len(second)) for j in range(min_length): if first[j] != second[j]: if second[j] not in graph[first[j]]: graph[first[j]].add(second[j]) in_degree[second[j]] += 1 break else: # Check if second word is a prefix of the first word if len(second) < len(first): return \\"\\" # Topological Sort (Kahn\'s Algorithm) queue = deque([char for char in in_degree if in_degree[char] == 0]) order = [] while queue: char = queue.popleft() order.append(char) for neighbor in graph[char]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) # Check if the topological sort is valid if len(order) == len(in_degree): return \'\'.join(order) else: return \\"\\""},{"question":"A storage company offers different lockers for rent which are aligned in a single row and numbered from 1 to n. Each locker can be either occupied or unoccupied. If a locker is occupied, it means there is already a box in that slot. If it is unoccupied, then there is no box in that slot. You have k boxes that you want to store in unoccupied lockers. Each box has a value m_i which denotes the number of lockers it needs consecutively. If any box cannot be accommodated due to insufficient consecutive unoccupied lockers, it cannot be stored in the lockers. Your task is to maximize the number of boxes you can store in the lockers. Input The first line of the input contains two integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ 100) — the number of lockers and the number of boxes you want to store. The second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 1) — the locker description, where 1 indicates an occupied locker and 0 indicates an unoccupied locker. The third line contains k integers m_1, m_2, ..., m_k (1 ≤ m_i ≤ n) — the number of consecutive unoccupied lockers needed for each box. Output Print one integer — the maximum number of boxes that can be accommodated. Examples Input 10 3 0 1 0 0 1 0 0 0 0 0 2 1 3 Output 3 Input 5 2 1 0 0 0 1 2 3 Output 1 Input 7 4 0 0 1 0 0 1 0 2 2 1 3 Output 2 Note In the first example, the locker configuration is [0, 1, 0, 0, 1, 0, 0, 0, 0, 0]: - Box with m = 2 can fit in positions [3, 4] - Box with m = 1 can fit in position [7] - Box with m = 3 can fit in positions [8, 9, 10] In the second example, only the box with m = 3 can fit in lockers [2, 3, 4]. In the third example, the locker configuration is [0, 0, 1, 0, 0, 1, 0]: - Box with m = 2 can fit in positions [1, 2] - Box with m = 1 can fit in position [1] or [2] - Box with m = 3 cannot fit due to insufficient consecutive unoccupied lockers.","solution":"def maximize_boxes(n, k, lockers, boxes): Returns the maximum number of boxes that can be stored in the lockers. :param int n: Number of lockers :param int k: Number of boxes :param list lockers: List representing lockers\' occupancy (1 for occupied, 0 for unoccupied) :param list boxes: List representing number of consecutive lockers needed for each box :return: Maximum number of boxes that can be stored :rtype: int def find_consecutive_unoccupied(lockers, m): count = 0 max_block = 0 for locker in lockers: if locker == 0: count += 1 if count == m: return True else: count = 0 return False stored_boxes = 0 boxes = sorted(boxes) for box in boxes: if find_consecutive_unoccupied(lockers, box): stored_boxes += 1 count = 0 for i in range(len(lockers)): if lockers[i] == 0: count += 1 if count == box: for j in range(i-box+1, i+1): lockers[j] = 1 break else: count = 0 return stored_boxes"},{"question":"Dave, an avid mathematician, is organizing a series of lectures on number theory. He has a peculiar way of planning his lectures in such a way that each lecture discusses a topic centered around a prime number. Dave wants to spread out his lectures over consecutive days, but he doesn\'t want to give more than one lecture per day. Dave has already decided on n distinct prime numbers, each representing the main topic of a lecture. He wants his lecture schedule to satisfy two conditions: 1. Each day can have at most one lecture. 2. The difference between any two consecutive prime numbers (when considered in the order they were given) is minimized. Help Dave find an optimal way to schedule his lectures. Specifically, you need to find the order of the prime numbers such that the differences between any consecutive days are minimized. Input The first line contains an integer n (1 ≤ n ≤ 5000) — the number of lectures. The second line contains n distinct prime numbers pi (1 ≤ pi ≤ 10^6). Output Output the optimal order of the prime numbers such that the sum of the differences between consecutive days is minimized. In the second line, print the optimal order. Example Input 5 3 5 7 11 13 Output 4 3 5 7 11 13 Input 3 11 7 3 Output 2 3 7 11","solution":"def schedule_lectures(primes): Given a list of distinct prime numbers, returns the order in which lectures should be scheduled such that the sum of differences between consecutive primes is minimized. primes.sort() return primes # Function to be called with the input def optimal_lecture_schedule(n, primes): sorted_primes = schedule_lectures(primes) return len(sorted_primes) - 1, sorted_primes # Example usage: if __name__ == \\"__main__\\": n = 3 primes = [11, 7, 3] diff_count, optimal_order = optimal_lecture_schedule(n, primes) print(diff_count) print(\\" \\".join(map(str, optimal_order)))"},{"question":"In a magical kingdom, there are n cities connected by m bidirectional roads such that there is a unique path between any two cities. A traveler wants to visit all the cities starting from city 1. Each city i has a certain level of happiness h_i that the traveler gains when visiting it for the first time, but if the traveler visits a city more than once, the happiness level becomes zero for the subsequent visits. The traveler can start at city 1 and visit each city exactly once while collecting the maximum happiness possible. However, each road has a particular cost associated with it, and the traveler needs to minimize the travel cost. Given the roads and their costs, determine the minimum travel cost for the traveler to visit all the cities exactly once. Input The first line contains two integers n (2 ≤ n ≤ 1000) and m (n-1 ≤ m ≤ 10000) — the number of cities and the number of roads. The second line contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10^9) — the happiness levels of the cities. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^9) — indicating that there is a road between cities u and v with a cost w. Output Print a single integer — the minimum travel cost for the traveler to visit all the cities exactly once. Examples Input 3 3 5 10 15 1 2 3 2 3 4 1 3 2 Output 5 Input 4 4 8 2 3 5 1 2 1 1 3 2 2 4 3 3 4 4 Output 6 Note In the first example, the traveler can start at city 1, go to city 3 directly (cost 2), and then visit city 2 (cost 3). The total cost is 2 + 3 = 5. In the second example, the traveler can start at city 1, go to city 2 (cost 1), then to city 4 (cost 3), and finally to city 3 (cost 2). The total cost is 1 + 3 + 2 = 6.","solution":"def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def kruskal(n, edges): edges.sort(key=lambda x: x[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) result = [] i = 0 e = 0 while e < n - 1: u, v, w = edges[i] i = i + 1 x = find(parent, u) y = find(parent, v) if x != y: e = e + 1 result.append((u, v, w)) union(parent, rank, x, y) final_cost = sum([w for _, _, w in result]) return final_cost def minimum_travel_cost(n, m, happiness, roads): edges = [] for road in roads: u, v, w = road edges.append((u - 1, v - 1, w)) # converting to 0-based index return kruskal(n, edges)"},{"question":"A popular online shopping platform recently introduced a feature where each user can maintain a wishlist of products. Each wishlist has a unique id and can contain a list of products, each identified by a unique number. Users can also follow each other’s wishlists. Given the list of products in a specific wishlist and the follower information, you are required to determine the maximum number of unique products a user can see by following other wishlists. Input The first line contains two integers n (1 ≤ n ≤ 100) and m (1 ≤ m ≤ 100) — the number of users and the number of products, respectively. The next n lines describe the users and their wishlists. Each of these lines starts with an integer ki (1 ≤ ki ≤ m), which is the number of products in the user\'s wishlist, followed by ki distinct integers from 1 to m denoting the product ids in the user\'s wishlist. The next n lines each contain an integer fi (0 ≤ fi ≤ n−1) — the number of wishlists the i-th user follows, followed by fi distinct integers from 1 to n representing the ids of the wishlists they follow. Output For each user, output the maximum number of unique products they can see by following other wishlists including their own wishlist. Output n lines with the corresponding result for each user in order. Examples Input 3 5 2 1 2 3 2 3 4 1 4 2 2 1 2 1 2 1 3 Output 4 4 3 Input 2 5 3 1 3 5 2 2 4 1 2 1 1 Output 4 4 Explanation In the first example: - User 1 has products {1, 2} and follows User 2 who has products {2, 3, 4}. The unique products they can see are {1, 2, 3, 4}. - User 2 has products {2, 3, 4} and follows User 1 who has products {1, 2}. The unique products they can see are {1, 2, 3, 4}. - User 3 has product {4} and follows User 1 who has products {1, 2}. The unique products they can see are {1, 2, 4}. In the second example: - User 1 has products {1, 3, 5} and follows User 2 who has products {2, 4}. The unique products they can see are {1, 2, 3, 4, 5}. - User 2 has products {2, 4} and follows User 1 who has products {1, 3, 5}. The unique products they can see are {1, 2, 3, 4, 5}.","solution":"def max_unique_products(n, m, wishlists, follows): result = [] for i in range(n): seen_products = set(wishlists[i]) for f in follows[i]: seen_products.update(wishlists[f - 1]) result.append(len(seen_products)) return result"},{"question":"You are given an array of integers. Your task is to find the largest sum of contiguous subarray within a given one-dimensional numeric array. This problem is a famous interview question and is generally solved using Kadane\'s Algorithm. Input The first line of input contains the number of test cases. Each test case consists of two lines. The first line contains an integer n (the size of the array). The second line contains n space-separated integers representing the elements of the array. Output For each test case, print the maximum sum of the contiguous subarray. Constraints 1 <= t <= 50 1 <= n <= 1000 -10000 <= a[i] <= 10000, where a[i] is the i-th element of the array. Example Input: 2 5 1 -2 3 4 -1 3 -1 -3 -5 Output: 7 -1","solution":"def max_subarray_sum(arr): Function to find the maximum sum of a contiguous subarray using Kadane\'s Algorithm. max_so_far = arr[0] max_ending_here = arr[0] for num in arr[1:]: max_ending_here = max(num, max_ending_here + num) max_so_far = max(max_so_far, max_ending_here) return max_so_far def process_test_cases(test_cases): Function to process multiple test cases and return the results. results = [] for n, arr in test_cases: results.append(max_subarray_sum(arr)) return results"},{"question":"A farmer has a rectangular field divided into square cells of equal size. Each cell can be either empty or contain a crop. The farmer wants to maximize the number of crops he can gather by forming the largest possible connected region of crops. A connected region is defined as a set of cells that are directly adjacent and contain crops either horizontally or vertically (but not diagonally). You need to help the farmer determine the size of the largest connected region of crops. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the field. The next n lines each contain m characters where \'.\' represents an empty cell and \'C\' represents a cell with a crop. Output Print a single integer — the size of the largest connected region of crops. Examples Input 4 4 .... .CC. .CC. .... Output 4 Input 3 5 C.C.C .C.C. C.C.C Output 1 Input 5 5 CCCCC CCCCC CCCCC CCCCC CCCCC Output 25","solution":"def largest_connected_crops(n, m, field): def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= m or field[x][y] == \'.\': return 0 # Mark the cell as visited field[x][y] = \'.\' size = 1 # Explore the 4 possible directions: up, down, left, right for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: size += dfs(x + dx, y + dy) return size max_size = 0 for i in range(n): for j in range(m): if field[i][j] == \'C\': max_size = max(max_size, dfs(i, j)) return max_size"},{"question":"You find yourself in a bustling marketplace in the town of Algoritmville. There are n stalls lined up in a row, each selling a different type of fruit. The stalls are numbered with integers from 1 to n from left to right. Each fruit has a unique price tag, which can potentially change every day. However, on a particular day you notice that the prices of fruits are arranged in non-decreasing order from the leftmost to the rightmost stall. Being a savvy shopper, you are only interested in the fruits whose prices are strictly greater than a given value k. Your task is to determine the number of stalls where the price of the fruit is strictly greater than k. Input The first line of input contains two integers n and k (1 ≤ n ≤ 100,000, -10^9 ≤ k ≤ 10^9) — the number of stalls and the value k. The second line contains n integers p1, p2, ..., pn (−10^9 ≤ pi ≤ 10^9) — the prices of the fruits in the stalls in non-decreasing order. Output Output a single integer representing the number of stalls where the price of the fruit is strictly greater than k. Example Input 5 7 1 3 7 10 12 Output 2 Note In the example, there are 5 stalls with prices of fruits as [1, 3, 7, 10, 12]. Given k = 7, there are two stalls (with prices 10 and 12) that have prices strictly greater than 7. Hence, the output is 2.","solution":"def stalls_with_higher_prices(n, k, prices): This function calculates the number of stalls with fruit prices strictly greater than k. Parameters: n (int): The number of stalls. k (int): The given price threshold. prices (list of int): The prices of the fruits in non-decreasing order. Returns: int: The number of stalls with prices strictly greater than k. count = 0 for price in prices: if price > k: count += 1 return count"},{"question":"Problem Given a string S of length N and an integer K , your task is to determine if it is possible to rearrange the string such that there are at least K palindromic substrings. A palindromic substring is defined as a substring that reads the same forwards and backwards. You need to process the following type of query: Query 1 K Check if it is possible to rearrange the string S to have at least K palindromic substrings. If it is possible, output \\"YES\\". Otherwise, output \\"NO\\". Constraints The input satisfies the following conditions: - 1 leq N leq 1000 - 1 leq K leq frac{N times (N + 1)}{2} Input The input is given in the following format: N K S Output For each query, output \\"YES\\" if it is possible to rearrange the string to have at least K palindromic substrings and \\"NO\\" otherwise. Examples Input 7 3 abacaba Output YES Input 5 10 abcba Output NO Input 9 1 aabbccdde Output YES","solution":"from functools import lru_cache def is_possible_palindromic_rearrangement(N, K, S): def count_palindromic_substrings(s): count = 0 n = len(s) dp = [[False] * n for _ in range(n)] for length in range(1, n + 1): for start in range(n - length + 1): end = start + length - 1 if length == 1: dp[start][end] = True elif length == 2: dp[start][end] = (s[start] == s[end]) else: dp[start][end] = (s[start] == s[end]) and dp[start + 1][end - 1] if dp[start][end]: count += 1 return count def can_rearrange_to_form_k_palindromes(s, k): freq = [0] * 26 for ch in s: freq[ord(ch) - ord(\'a\')] += 1 freq.sort(reverse=True) used_freq = [] for f in freq: if f > 0: used_freq.append(f) if len(used_freq) > k: break max_possible_k = sum(f for f in used_freq) return max_possible_k >= k return \\"YES\\" if can_rearrange_to_form_k_palindromes(S, K) else \\"NO\\""},{"question":"You are given an array of integers nums. You are also given an integer n. Your task is to find the length of the longest contiguous subarray of nums that sums up to n. A contiguous subarray is defined as a sequence of elements within the array that are adjacent to each other. Input The first line contains the integer n (|n| ≤ 10^9). The second line contains the integer m (1 ≤ m ≤ 10^5), which is the length of the array nums. The third line contains m integers representing the elements of the array nums (-10^4 ≤ nums[i] ≤ 10^4). Output Print a single integer representing the length of the longest contiguous subarray that sums up to n. If no such subarray exists, print 0. Examples Input 10 5 1 2 3 4 5 Output 4 Input 15 6 1 2 3 4 5 -1 Output 5 Note In the first example, the longest contiguous subarray that sums up to 10 is [1, 2, 3, 4], which has a length of 4. In the second example, the longest contiguous subarray that sums up to 15 is [1, 2, 3, 4, 5], which has a length of 5 (considering the final element -1 doesn’t change the length as it would invalidate the sum).","solution":"def longest_subarray_sum(nums, n): Returns the length of the longest contiguous subarray that sums up to n. sum_indices = {0: -1} current_sum = 0 max_length = 0 for i, num in enumerate(nums): current_sum += num if current_sum - n in sum_indices: max_length = max(max_length, i - sum_indices[current_sum - n]) if current_sum not in sum_indices: sum_indices[current_sum] = i return max_length"},{"question":"Peter wants to create a program that checks whether a given string is a palindrome. A palindrome is a word, number, phrase, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Your task is to help Peter write a function that determines whether a given string is a palindrome. Input First Line contains the number of test cases, T. Each of the next T lines contain a string S. Output For each test case, output \\"YES\\" if the string is a palindrome, otherwise output \\"NO\\". Constraints 1 ≤ T ≤ 10 1 ≤ Length of S ≤ 100 SAMPLE INPUT 3 A man a plan a canal Panama Hello World Was it a car or a cat I saw SAMPLE OUTPUT YES NO YES","solution":"import re def is_palindrome(s): Returns \'YES\' if the string s is a palindrome, \'NO\' otherwise. s = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() return \\"YES\\" if s == s[::-1] else \\"NO\\" def check_palindromes(test_cases): Takes a list of strings and returns a list indicating if each string is a palindrome. results = [] for s in test_cases: results.append(is_palindrome(s)) return results"},{"question":"The National Library has digitized a number of its manuscripts and needs your help to classify them based on their language. Each manuscript is written in one of three languages: English, Spanish, or French. You can download a training set of manuscripts at the following link: http://download4.library.com/natlib/train.zip. The archive contains three directories named \\"en\\", \\"es\\", and \\"fr\\". Directory \\"en\\" contains manuscripts in English, directory \\"es\\" contains manuscripts in Spanish, and directory \\"fr\\" contains manuscripts in French. Each manuscript corresponds to exactly one file from a directory. All manuscripts have the following format: the first line contains the manuscript identifier, the second line contains the title of the manuscript, and the subsequent lines contain the text of the manuscript. The manuscript identifier is used for reference only and has no useful information for the classification task. Your task is to write a program that identifies the language of a given manuscript based on its text. Input The first line contains an integer id (0 ≤ id ≤ 106) — the manuscript identifier. The second line contains the title of the manuscript. The third and subsequent lines contain the text of the manuscript. It is guaranteed that the size of any given manuscript will not exceed 20 kilobytes. The tests for this problem are divided into 8 groups. The manuscripts in group 1 and group 2 are taken directly from the training set but with different identifiers. Groups from the 3rd to the 8th contain manuscripts not present in the training set, sorted roughly by increasing difficulty. Output Print \\"en\\" if the manuscript is in English, \\"es\\" if the manuscript is in Spanish, and \\"fr\\" if the manuscript is in French. Examples","solution":"import os import re from collections import Counter from sklearn.feature_extraction.text import CountVectorizer from sklearn.naive_bayes import MultinomialNB class LanguageClassifier: def __init__(self, train_dir): self.train_dir = train_dir self.vectorizer = CountVectorizer() self.classifier = MultinomialNB() self._train() def _read_files(self, directory): texts = [] labels = [] for label in [\\"en\\", \\"es\\", \\"fr\\"]: path = os.path.join(directory, label) for filename in os.listdir(path): with open(os.path.join(path, filename), \'r\', encoding=\'utf-8\') as file: text = file.read() texts.append(text) labels.append(label) return texts, labels def _train(self): texts, labels = self._read_files(self.train_dir) X_train = self.vectorizer.fit_transform(texts) self.classifier.fit(X_train, labels) def classify(self, text): X_test = self.vectorizer.transform([text]) prediction = self.classifier.predict(X_test) return prediction[0] def identify_language(id, title, manuscript_text, model): return model.classify(manuscript_text) def main(): import sys input = sys.stdin.read data = input().strip().split(\\"n\\") id = int(data[0]) title = data[1] manuscript_text = \\"n\\".join(data[2:]) model = LanguageClassifier(\'path_to_train_set\') # Replace with actual path language = identify_language(id, title, manuscript_text, model) print(language) if __name__ == \\"__main__\\": main()"},{"question":"You are given a binary tree with n nodes, each node having a unique value from 1 to n. Each node can have up to two children, but not necessarily both. Your task is to construct the tree using the provided node relationships and then determine the height of the tree. The height of a binary tree is the number of edges on the longest path from the root to a leaf. Input The first line of the input contains an integer n (1 ≤ n ≤ 105) — the number of nodes in the tree. Each of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n) — denoting that node u is a parent of node v (u is connected to v). Output Print a single integer — the height of the tree. Example Input 5 1 2 1 3 3 4 3 5 Output 2 Note In the example, the binary tree can be visualized as follows: 1 / 2 3 / 4 5 The longest path from the root (node 1) to a leaf is either through node 3 to node 4 or node 5 with 2 edges, thus the height of the tree is 2.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def build_tree(edges): nodes = {} for u, v in edges: if u not in nodes: nodes[u] = TreeNode(u) if v not in nodes: nodes[v] = TreeNode(v) if not nodes[u].left: nodes[u].left = nodes[v] else: nodes[u].right = nodes[v] return nodes def find_root(nodes, edges): is_child = {child for _, child in edges} for node in nodes: if node not in is_child: return nodes[node] def height_of_tree(root): if not root: return 0 left_height = height_of_tree(root.left) right_height = height_of_tree(root.right) return 1 + max(left_height, right_height) def binary_tree_height(n, edges): if n == 1: return 0 nodes = build_tree(edges) root = find_root(nodes, edges) return height_of_tree(root) - 1 # Example usage # edges = [(1, 2), (1, 3), (3, 4), (3, 5)] # print(binary_tree_height(5, edges)) # Output: 2"},{"question":"You are assigned the task of organizing the seating for a large conference event. The conference hall has a fixed number of rows and each row has a certain number of seats. Your job is to ensure that the assignment of seats is optimal such that the maximum number of attendees can be seated without leaving any isolated empty seat between two occupied seats in any row. An isolated empty seat is defined as an empty seat that has occupied seats on both of its sides. For example, in a row with the seating `1001` (where 1 represents an occupied seat and 0 an empty seat), there are no isolated empty seats, whereas `10101` has one isolated empty seat (the second 0). Given the seating configuration of each row, determine the total number of isolated empty seats in the entire conference hall. Input: The first line contains a single integer T, the number of test cases. Each test case starts with two integers, R and C, representing the number of rows and the number of seats per row, respectively. The next R lines each contain a string of C characters, where each character is either \'1\' (indicating that the seat is occupied) or \'0\' (indicating that the seat is empty). Output: For each test case, output the total number of isolated empty seats in the entire conference hall on a single line. Example: Input: 2 3 5 10101 10001 11011 2 7 1100011 0111010 Output: 3 1 Explanation: In the first test case: - Row 1: `10101` has one isolated empty seat (second 0). - Row 2: `10001` has one isolated empty seat (third 0). - Row 3: `11011` has one isolated empty seat (third 0). Total = 3 isolated empty seats. In the second test case: - Row 1: `1100011` has no isolated empty seats. - Row 2: `0111010` has one isolated empty seat (last 0, since it has occupied seats on both sides). Total = 1 isolated empty seat.","solution":"def count_isolated_seats(T, test_cases): result = [] for i in range(T): R, C, seating = test_cases[i] count = 0 for row in seating: for j in range(1, C-1): if row[j] == \'0\' and row[j-1] == \'1\' and row[j+1] == \'1\': count += 1 result.append(count) return result"},{"question":"A Sudoku grid is a 9 x 9 grid partially filled with digits from 1 to 9. The objective is to fill in the grid such that every row, every column, and every 3 x 3 sub-grid (also known as boxes) contains all the digits from 1 to 9 without repeating any. Given a partially filled Sudoku grid, determine if it represents a valid Sudoku board configuration. A valid configuration follows all the rules of Sudoku, where: - Each row must contain the digits 1-9 without repetition. - Each column must contain the digits 1-9 without repetition. - Each 3 x 3 sub-grid must contain the digits 1-9 without repetition. The Sudoku grid is provided as a list of lists, where each sublist represents a row of the Sudoku board. Empty cells are represented by the number 0. Input The first line of the input gives the number of test cases, T. T test cases follow. Each test case consists of 9 lines with 9 integers each, representing the Sudoku grid. Output For each test case, output one line containing \\"Case #x: y\\", where x is the case number (starting from 1) and y is either \\"Valid\\" or \\"Invalid\\" based on whether the given Sudoku grid represents a valid configuration. Constraints 1 ≤ T ≤ 5 Example Input: 2 5 3 0 0 7 0 0 0 0 6 0 0 1 9 5 0 0 0 0 9 8 0 0 0 0 6 0 8 0 0 0 6 0 0 0 3 4 0 0 8 0 3 0 0 1 7 0 0 0 2 0 0 0 6 0 6 0 0 0 0 2 8 0 0 0 0 4 1 9 0 0 5 0 0 0 0 8 0 0 7 9 5 3 0 0 7 0 0 0 0 6 1 0 1 9 5 0 0 0 0 9 8 0 0 0 0 6 0 8 0 0 0 6 0 0 0 3 4 0 0 8 0 3 0 0 1 7 0 0 0 2 0 0 0 6 0 6 0 0 0 0 2 8 0 0 0 0 4 1 9 0 0 5 0 0 0 0 8 0 0 7 9 Output: Case #1: Valid Case #2: Invalid Explanation Case1: The first Sudoku grid is a valid configuration with all rules followed correctly. Case2: The second Sudoku grid is invalid because of a repetition in the second row (number \'1\' appears twice).","solution":"def is_valid_sudoku(board): def is_valid_block(block): nums = [num for num in block if num != 0] return len(nums) == len(set(nums)) # Check rows and columns for i in range(9): if not is_valid_block(board[i]) or not is_valid_block([board[x][i] for x in range(9)]): return False # Check 3x3 sub-grids for i in range(3): for j in range(3): block = [board[m][n] for m in range(i*3, (i+1)*3) for n in range(j*3, (j+1)*3)] if not is_valid_block(block): return False return True def solve_sudoku_cases(T, test_cases): results = [] for i in range(T): board = test_cases[i] if is_valid_sudoku(board): results.append(f\\"Case #{i+1}: Valid\\") else: results.append(f\\"Case #{i+1}: Invalid\\") return results"},{"question":"Anjali loves cooking and she often tries to create new recipes by combining different ingredients. However, she wants to make sure that she can afford all the ingredients before starting to cook. She has a list of prices for all possible ingredients and a list of ingredients needed for a particular recipe. Your task is to determine if Anjali can afford to buy all the ingredients in the required quantities with her budget. INPUT The input consists of three parts: 1. An integer B representing Anjali\'s total budget. 2. A dictionary P where keys are strings representing ingredient names and values are integers representing the price of one unit of that ingredient. 3. A dictionary Q where keys are strings representing ingredient names and values are integers representing the quantity needed for that ingredient. OUTPUT You have to print \\"AFFORDABLE\\" (without quotes) if Anjali can afford to buy all the ingredients needed for the recipe or \\"NOT AFFORDABLE\\" (without quotes) otherwise. CONSTRAINTS 1 ≤ B ≤ 10^6 1 ≤ len(P), len(Q) ≤ 10^5 1 ≤ price, quantity ≤ 10^4 (for each ingredient) SAMPLE INPUT B = 150 P = {\'flour\': 2, \'sugar\': 3, \'eggs\': 5} Q = {\'flour\': 20, \'sugar\': 10, \'eggs\': 10} SAMPLE OUTPUT AFFORDABLE","solution":"def can_anjali_afford(B, P, Q): Determines if Anjali can afford all the ingredients needed for the recipe given her budget. Parameters: B (int): Anjali\'s total budget. P (dict): Prices for ingredients (key: ingredient, value: price per unit). Q (dict): Quantities required for the recipe (key: ingredient, value: quantity needed). Returns: str: \\"AFFORDABLE\\" if Anjali can afford all ingredients, otherwise \\"NOT AFFORDABLE\\". total_cost = 0 for ingredient, quantity in Q.items(): if ingredient in P: total_cost += P[ingredient] * quantity else: return \\"NOT AFFORDABLE\\" return \\"AFFORDABLE\\" if total_cost <= B else \\"NOT AFFORDABLE\\" # Sample input B = 150 P = {\'flour\': 2, \'sugar\': 3, \'eggs\': 5} Q = {\'flour\': 20, \'sugar\': 10, \'eggs\': 10} print(can_anjali_afford(B, P, Q)) # Should print \\"AFFORDABLE\\""},{"question":"A company is organizing a team-building event that includes various collaborative exercises. One of the exercises requires the participants to form teams of exactly k members. Each participant is assigned a unique skill level represented by an integer. For the exercise to be successful, the sum of skill levels of any team should be equal. Given a list of participant skill levels and the desired team size, determine if it is possible to form teams that satisfy the conditions. Input The first line contains two integers n and k (1 ≤ k ≤ n ≤ 50), where n is the number of participants and k is the desired team size. The next line contains n integers a1, a2, ..., an, representing the skill levels of the participants (1 ≤ ai ≤ 100). Output Print the word \\"YES\\" if it is possible to divide the participants into teams such that each team has exactly k members with the same sum of skill levels. Otherwise, print the word \\"NO\\". Examples Input 6 3 7 1 5 3 9 6 Output NO Input 6 2 8 4 6 6 2 10 Output YES","solution":"def can_form_teams(n, k, skill_levels): from itertools import combinations if n % k != 0: return \\"NO\\" required_teams = n // k skill_levels.sort() team_sum = sum(skill_levels) // required_teams if sum(skill_levels) % required_teams != 0: return \\"NO\\" used = [False] * n def can_form_team(start_index, count, current_sum): if count == k: return current_sum == team_sum for i in range(start_index, n): if not used[i]: used[i] = True if can_form_team(i + 1, count + 1, current_sum + skill_levels[i]): return True used[i] = False return False teams_formed = 0 for i in range(n): if not used[i]: used[i] = True if can_form_team(i + 1, 1, skill_levels[i]): teams_formed += 1 else: return \\"NO\\" if teams_formed == required_teams: return \\"YES\\" return \\"NO\\""},{"question":"Mark is a teacher who wants to assign unique student IDs to his students. Each student ID is an integer, and no two students should share the same ID. Furthermore, Mark wants to ensure that no student ID is greater than a given integer n. Your task is to find out, given the total number of students and the maximum allowable value for any student ID, whether it is possible to assign unique IDs to all students. Input The input consists of a single line containing two integers s and n (1 ≤ s, n ≤ 1000) — the number of students and the maximum allowable value for any student ID, respectively. Output The output must consist of a single line. Print \\"YES\\" if it is possible to assign unique IDs to all students such that no ID exceeds n. Otherwise, print \\"NO\\". Examples Input 5 10 Output YES Input 15 14 Output NO Note In the first example, you can assign IDs from 1 to 5 (or any other unique IDs up to 10). In the second example, you have 15 students but can only assign IDs up to 14, so it is not possible to assign unique IDs.","solution":"def can_assign_unique_ids(s, n): Determines if it\'s possible to assign unique IDs to s students such that no ID exceeds n. Args: s (int): The number of students. n (int): The maximum allowable value for any student ID. Returns: str: \\"YES\\" if possible, \\"NO\\" otherwise. if s <= n: return \\"YES\\" else: return \\"NO\\""},{"question":"There are N students in a class and each student has exactly one best friend in the class. You are given the pairings of students and their respective best friends. A group of students is said to form a \\"friend circle\\" if they are directly or indirectly best friends with each other. Your task is to determine the number of friend circles in the class. Input The first line contains an integer N — the number of students. The next N lines each contains two integers a and b, representing that student a’s best friend is student b. It is guaranteed that no two students have the same best friend. Output Output a single integer — the number of friend circles in the class. Constraints - 1 ≤ N ≤ 2000 Example Input: 5 1 2 2 3 3 1 4 5 5 4 Output: 2 Explanation The first three students (1, 2, 3) form a cycle where each student\'s best friend is in the group. Similarly, students 4 and 5 form another cycle. Hence, there are 2 friend circles in total.","solution":"def find_friend_circles(N, friendship_pairs): Determine the number of friend circles in the class. :param N: int, number of students :param friendship_pairs: list of tuples where each tuple (a, b) indicates that student a’s best friend is student b :return: int, number of friend circles from collections import defaultdict # Create adjacency list from the friendship pairs adjacency_list = defaultdict(list) for a, b in friendship_pairs: adjacency_list[a].append(b) adjacency_list[b].append(a) visited = set() def dfs(student): Depth-First Search to mark all friends in the same circle. stack = [student] while stack: current = stack.pop() if current not in visited: visited.add(current) stack.extend(adjacency_list[current]) friend_circles = 0 for student in range(1, N + 1): if student not in visited: friend_circles += 1 dfs(student) return friend_circles"},{"question":"Given an m x n matrix of integers, write a program to find the maximum sum of any submatrix. A submatrix is any continuous sub-section of the matrix that maintains the order of both rows and columns. Input The first line of input contains two integers m and n (1 ≤ m, n ≤ 200), the number of rows and columns of the matrix. The next m lines each contain n integers a_ij (-10^9 ≤ a_ij ≤ 10^9) that describe the elements of the matrix. Output Print a single integer which is the maximum sum of any submatrix within the given matrix. Examples Input 4 5 1 -2 0 3 4 -5 6 7 -8 9 3 -1 -4 2 -5 5 2 -3 1 8 Output 23 Input 3 3 -1 -1 -1 -1 -1 -1 -1 -1 -1 Output -1 Input 2 2 2 -3 5 9 Output 14 Note Consider the first example. The submatrix with the maximum sum is: 6 7 -1 -4 2 -5 5 2 1 (this is the overall maximum sum submatrix) In the second example, the matrix contains only negative values. Therefore, the submatrix that will have the maximum sum is any single element, since adding another negative number would reduce the total sum. Thus, the maximum submatrix sum is -1.","solution":"def max_submatrix_sum(matrix): Returns the maximum sum of any submatrix in the given m x n matrix. if not matrix or not matrix[0]: return 0 m, n = len(matrix), len(matrix[0]) max_sum = float(\'-inf\') # Iterate over every pair of rows for top in range(m): row_sums = [0] * n for bottom in range(top, m): # Calculate sum of elements between current top and bottom rows for each column for col in range(n): row_sums[col] += matrix[bottom][col] # Apply Kadane\'s algorithm on this 1D array (row_sums) current_sum = 0 current_max = float(\'-inf\') for value in row_sums: current_sum = max(value, current_sum + value) current_max = max(current_max, current_sum) max_sum = max(max_sum, current_max) return max_sum # Helper function to parse input def parse_input(inputs): lines = inputs.strip().split(\'n\') m, n = map(int, lines[0].split()) matrix = [list(map(int, line.split())) for line in lines[1:]] return matrix # Function to integrate parsing and solution function def max_submatrix_sum_from_input(inputs): matrix = parse_input(inputs) return max_submatrix_sum(matrix)"},{"question":"HackerEarth is developing a new feature for its coding competition platform that involves judging large batches of submissions in real-time. They need to ensure their servers can handle the load efficiently. You have been tasked to build an algorithm to estimate the time required to process a batch of submissions, given the complexities of the problems and the number of submissions. Each submission takes different amounts of time to process based on the complexity of the problem it is attempting to solve. The time taken to process a submission for a problem is given as follows: - Each Easy problem takes 1 unit of time. - Each Medium problem takes 2 units of time. - Each Hard problem takes 3 units of time. Given the list of submissions for a batch, you need to compute the total time required to process all the submissions in that batch. Input The first line of the input gives the number of test cases, T. T sets of lines follow. Each test case starts with an integer N, the number of submissions in the batch. This is followed by N lines, each containing the complexity of a problem (one of \\"Easy\\", \\"Medium\\", or \\"Hard\\"). Output For each test case, output one line containing \\"Batch #x: y units\\", where x is the batch number (starting from 1) and y is the total time required to process all submissions in that batch. CONSTRAINTS 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 Each problem complexity is either \\"Easy\\", \\"Medium\\", or \\"Hard\\". SAMPLE INPUT 2 3 Easy Medium Hard 2 Hard Medium SAMPLE OUTPUT Batch #1: 6 units Batch #2: 5 units Explanation For the first test case, there are 3 submissions: an Easy problem (1 unit of time), a Medium problem (2 units of time), and a Hard problem (3 units of time). Therefore, the total time required is 1 + 2 + 3 = 6 units. For the second test case, there are 2 submissions: a Hard problem (3 units of time) and a Medium problem (2 units of time). Therefore, the total time required is 3 + 2 = 5 units.","solution":"def compute_total_time_to_process(submissions): Calculate the total time to process each batch of submissions. :param submissions: List of tuples, each containing the number of submissions and a list of problem complexities :return: List of strings formatted with batch number and total time required # Mapping of problem complexity to units of time required complexity_time = { \\"Easy\\": 1, \\"Medium\\": 2, \\"Hard\\": 3 } results = [] for i, (num_submissions, problems) in enumerate(submissions): total_time = sum(complexity_time[problem] for problem in problems) results.append(f\\"Batch #{i + 1}: {total_time} units\\") return results def process_input(input_text): Processes the input text and returns the structured data needed for computation. :param input_text: A list of strings containing the input data :return: List of tuples with number of submissions and list of problem complexities for each batch lines = input_text.strip().split(\'n\') T = int(lines[0]) submissions = [] index = 1 for _ in range(T): N = int(lines[index]) problems = lines[index + 1:index + 1 + N] submissions.append((N, problems)) index += N + 1 return submissions def main(input_text): Main function to process input and return the results. :param input_text: A multi-line string of input :return: List of results in the required output format submissions = process_input(input_text) return compute_total_time_to_process(submissions)"},{"question":"Achilles is the fastest runner in his village. He wants to participate in a race with evenly spaced checkpoints to reach the finish line. To keep the race competitive, the organizers have placed N hurdles on the track in front of Achilles. Achilles can jump over hurdles with a certain energy level. Each jump consumes a specific amount of energy, and his energy decreases gradually with each jump. Achilles\' goal is to finish the race without running out of energy. The race track has a total of M checkpoints including the start and finish line. Each checkpoint i (except the starting point) has a hurdle of height (h_i). Achilles can jump over a hurdle if his current energy is greater than or equal to the height of the hurdle. His energy decreases by 1 unit every jump regardless of the height of the hurdle. Given the initial energy level of Achilles and the heights of the hurdles, determine whether Achilles can successfully complete the race. Input - The first line of input contains an integer T, the number of test cases. - For each test case: - The first line contains two integers M (the number of checkpoints) and E (the initial energy level of Achilles), separated by a space. - The second line contains M-1 integers (h_i) representing the heights of the hurdles between each checkpoint. Output - For each test case, output \\"YES\\" if Achilles can complete the race, otherwise output \\"NO\\". Constraints 1 ≤ T ≤ 1000 2 ≤ M ≤ 10^5 1 ≤ E ≤ 10^5 1 ≤ (h_i) ≤ 10^5 SAMPLE INPUT 2 3 5 2 3 4 10 5 3 2 SAMPLE OUTPUT YES NO Explanation Test Case 1: Achilles starts with energy level 5. He encounters a hurdle of height 2 at the first checkpoint, jumps over it and his energy level decreases to 4. He then encounters a hurdle of height 3 at the second checkpoint, jumps over it and his energy level decreases to 3. Since there are no more hurdles, Achilles completes the race successfully. Test Case 2: Achilles starts with energy level 10. He encounters a hurdle of height 5 at the first checkpoint, jumps over it and his energy level decreases to 9. He then encounters a hurdle of height 3 at the second checkpoint, jumps over it and his energy level decreases to 8. He finally encounters a hurdle of height 2 at the third checkpoint, jumps over it and his energy level decreases to 7. However, when he reaches the finish line, his remaining energy is enough to complete the race successfully. Thus, the output is \\"YES\\".","solution":"def can_complete_race(M, E, heights): Determine if Achilles can complete the race given the initial energy level and hurdles\' heights. for height in heights: if E <= height: return \\"NO\\" E -= 1 return \\"YES\\" def solve(T, cases): results = [] for case in cases: M, E = case[0] heights = case[1] results.append(can_complete_race(M, E, heights)) return results"},{"question":"A company is evaluating the performance of its employees based on their monthly sales figures over a year. Each employee\'s performance is defined as \\"consistent\\" if their sales figures never decrease during any two consecutive months. If an employee\'s performance is consistent, they are eligible for a bonus. Write a program that checks if an employee\'s sales performance is consistent. Constraints * The number of months ( M ) is fixed to 12. * Sales figures are integers in the range 0 to 10,000. Input Input is given from Standard Input in the following format: S_1 S_2 S_3 ldots S_{12} Output Print `Consistent` if the sales performance is consistent. Print `Not Consistent` otherwise. Examples Input 1000 1200 1300 1300 1400 1500 1600 1700 1700 1800 1900 2000 Output Consistent Input 2000 1900 1800 1700 1600 1500 1400 1300 1200 1100 1000 900 Output Not Consistent Input 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 Output Consistent","solution":"def check_consistency(sales): This function receives a list of 12 sales figures and checks if the sales figures never decrease during any two consecutive months. Args: sales (list of int): List containing 12 integers representing sales figures. Returns: str: \\"Consistent\\" if sales figure never decrease during any two consecutive months, \\"Not Consistent\\" otherwise. for i in range(1, len(sales)): if sales[i] < sales[i - 1]: return \\"Not Consistent\\" return \\"Consistent\\""},{"question":"Jon is planning a road trip with his friends and needs to figure out the optimal route to visit all the cities on his map. He is particularly interested in the shortest route that allows him to start and end at his home city. Jon\'s map consists of n cities, connected by m bidirectional roads. Some pairs of cities might not have a direct road between them. Help Jon by determining if it is possible to compute a circular route that visits each city exactly once and returns to the starting city. If it is possible, determine the length of the shortest such route. Input The first line contains two integers n (2 ≤ n ≤ 15) and m (1 ≤ m ≤ 100) — the number of cities and the number of roads. The next m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n; 1 ≤ w ≤ 1000) — the cities connected by the road and the length of that road. The cities are numbered from 1 to n. Output If it is not possible to visit each city exactly once and return to the starting city, output \\"no\\" in a single line. Otherwise, output the length of the shortest such route in a single line. Examples Input 4 6 1 2 10 1 3 15 1 4 20 2 3 35 2 4 25 3 4 30 Output 80 Input 3 1 1 2 10 Output no Note In the first example, one of the possible optimal routes is 1 → 2 → 4 → 3 → 1, with a total length of 10 + 25 + 30 + 15 = 80. There are other combinations that result in the same length. In the second example, it is impossible to visit each city and return to the starting city due to the lack of roads connecting all cities.","solution":"from itertools import permutations def tsp_shortest_route(n, m, roads): dist = [[float(\'inf\')] * n for _ in range(n)] for u, v, w in roads: dist[u-1][v-1] = w dist[v-1][u-1] = w for k in range(n): for i in range(n): for j in range(n): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] min_route_length = float(\'inf\') home_city = 0 cities = list(range(n)) try_routes = permutations(cities[1:]) for route in try_routes: current_length = dist[home_city][route[0]] for i in range(1, len(route)): current_length += dist[route[i-1]][route[i]] current_length += dist[route[-1]][home_city] if current_length < min_route_length: min_route_length = current_length if min_route_length == float(\'inf\'): return \\"no\\" return min_route_length"},{"question":"Consider an amusement park with M different types of rides and N children wanting to enjoy these rides. Each ride has a minimum height requirement, and each child has a specific height. The goal is to maximize the number of children who can enjoy the rides while ensuring that each child only gets on rides that they meet the height requirement for. Write a program to determine the maximum number of children who can enjoy the rides. Input format: - The first line contains an integer T, denoting the number of test cases. - The first line of each test case contains two integers M and N, representing the number of rides and the number of children, respectively. - The second line of each test case contains M integers, the array H, where H[i] represents the minimum height requirement for the i^th ride. - The third line of each test case contains N integers, the array C, where C[j] represents the height of the j^th child. Output format: For each test case, print the maximum number of children who can enjoy the rides. Constraints: - 1 ≤ T ≤ 10 - 1 ≤ M, N ≤ 1000 - 1 ≤ H[i], C[j] ≤ 200 SAMPLE INPUT 1 3 5 120 130 110 150 120 100 110 140 SAMPLE OUTPUT 4 Explanation: In this example, there are 3 rides with height requirements of [120, 130, 110] and 5 children with heights [150, 120, 100, 110, 140]. - The child with height 100 cannot ride any rides. - The child with height 120 can ride the rides with height requirement 120 and 110. - The child with height 110 can only ride the ride with height requirement 110. - The child with height 140 can ride all three rides. - The child with height 150 can ride all three rides. So, a maximum of 4 children can ride.","solution":"def max_children_on_rides(test_cases): results = [] for case in test_cases: M, N, H, C = case count = 0 for child_height in C: for ride_height in H: if child_height >= ride_height: count += 1 break results.append(count) return results"},{"question":"Given a string, write a function that compresses the string using Run-Length Encoding (RLE). If the compressed string is not smaller than the original string, return the original string instead. Input A single line containing a string s. Output A single line containing the compressed string or the original string if the compressed version is not smaller. Constraint 1 <= s.length <= 1000 s consists of only lowercase English letters. Example Input: aabcccccaaa Output: a2b1c5a3 Input: abcdef Output: abcdef Explanation In the first example, the string \\"aabcccccaaa\\" can be compressed to \\"a2b1c5a3\\", which is shorter than the original string. In the second example, the compressed string \\"a1b1c1d1e1f1\\" is longer than the original string \\"abcdef\\", so the original string is returned.","solution":"def compress_string(s): Compress the string using Run-Length Encoding (RLE). If the compressed string is not smaller than the original string, returns the original string. :param s: Original string to be compressed :return: Compressed string or original string if compression is not effective if not s: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(f\\"{s[i - 1]}{count}\\") count = 1 compressed.append(f\\"{s[-1]}{count}\\") compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(s) else s"},{"question":"You are programming a simple text editor and need to implement a feature that helps users correct spelling mistakes frequently made while typing quickly. The editor has a built-in dictionary of long words, as well as a list of common typos. Your task is to replace every occurrence of the common typos with the correct words, while ensuring that no partial replacements occur within longer words. Given an input text and a dictionary of frequent typos with their corrections, replace all occurrences of the typos with the corrective words but avoid altering partial matches. Input The first line contains a string text (1 ≤ |text| ≤ 105) representing the input text. The second line contains an integer n (1 ≤ n ≤ 104) representing the number of common typos to correct. The following n lines each contain two strings: the first is a common typo (1 ≤ |typo| ≤ 10) and the second is the correction (1 ≤ |correction| ≤ 10). Output Output the corrected text after replacing all occurrences of the typos with their corrections. Examples Input This is an exampel of a smple text blcok with mispelled wrds. 3 exampel example smple simple blcok block Output This is an example of a simple text block with mispelled wrds. Input thhis test hs smoe erors. 2 thhis this hs has Output this test has smoe erors. Note In the first example, every occurrence of \\"exampel\\", \\"smple\\", and \\"blcok\\" is replaced with \\"example\\", \\"simple\\", and \\"block\\", respectively. In the second example, the word \\"thhis\\" is replaced with \\"this\\", and \\"hs\\" is replaced with \\"has\\". The typo \\"smoe\\" remains unchanged because it is not listed in the dictionary.","solution":"def correct_typos(text, typo_dict): words = text.split() corrected_text = [] for word in words: corrected_word = typo_dict.get(word, word) corrected_text.append(corrected_word) return \' \'.join(corrected_text) def process_input(text, n, typo_corrections): typo_dict = {} for typo, correction in typo_corrections: typo_dict[typo] = correction return correct_typos(text, typo_dict)"},{"question":"A: Spiral Matrix Traversal problem Given an m x n matrix, return all elements of the matrix in spiral order. The matrix traversal starts from the top left corner and follows a spiral pattern towards the center in a clockwise manner. Input format The input will begin with two integers m and n representing the number of rows and columns of the matrix, respectively. This is followed by m lines each containing n integers representing the elements of the matrix. Output format Return a single line with all the elements of the matrix in spiral order separated by a space. Input example 1 3 3 1 2 3 4 5 6 7 8 9 Output example 1 1 2 3 6 9 8 7 4 5 Input example 2 4 3 1 2 3 4 5 6 7 8 9 10 11 12 Output example 2 1 2 3 6 9 12 11 10 7 4 5 8 Input example 3 3 1 1 2 3 Output example 3 1 2 3 Input example 4 1 4 1 2 3 4 Output example 4 1 2 3 4 Input example 5 2 2 1 2 3 4 Output example 5 1 2 4 3 Example Input 3 3 1 2 3 4 5 6 7 8 9 Output 1 2 3 6 9 8 7 4 5","solution":"def spiralOrder(matrix): Returns a list of elements of the matrix in spiral order. res = [] while matrix: res += matrix.pop(0) if matrix and matrix[0]: for row in matrix: res.append(row.pop()) if matrix: res += matrix.pop()[::-1] if matrix and matrix[0]: for row in matrix[::-1]: res.append(row.pop(0)) return res def matrix_input(m, n, elements): matrix = [] index = 0 for i in range(m): matrix.append(elements[index:index + n]) index += n return matrix def spiral_matrix_input(m, n, elements): matrix = matrix_input(m, n, elements) return \' \'.join(map(str, spiralOrder(matrix)))"},{"question":"In an online multiplayer game, each player has a power level represented by an integer. You are given a list of the power levels of all players and a value `k`. You need to form the largest possible team of players such that the difference between the maximum and minimum power levels in the team is at most `k`. Your task is to write a program that determines the maximum size of such a team. Input - The first line contains an integer `n` (1 ≤ n ≤ 100,000) — the number of players. - The second line contains `n` integers `p1, p2, ..., pn` (1 ≤ pi ≤ 10^9) — the power levels of the players. - The third line contains the integer `k` (0 ≤ k ≤ 10^9) — the maximum allowed difference between the highest and lowest power levels in the team. Output - Print a single integer — the maximum number of players that can be included in a team where the difference between the highest and lowest power levels is at most `k`. Example Input 6 1 3 6 10 15 21 5 Output 3 Note In the example, the optimal team could be [1, 3, 6] or [6, 10, 15]. Any of these teams has a maximum difference of `5` between the highest and lowest power levels, and they contain 3 players. So, the maximum size of such a team is `3`.","solution":"def max_team_size(n, power_levels, k): Determines the maximum size of a team where the difference between the maximum and minimum power levels is at most `k`. Parameters: n (int): Number of players power_levels (list): List of power levels of the players k (int): Maximum allowed difference between highest and lowest power levels in the team Returns: int: Maximum size of the team power_levels.sort() # Sort power levels left = 0 max_size = 0 for right in range(n): while power_levels[right] - power_levels[left] > k: left += 1 max_size = max(max_size, right - left + 1) return max_size"},{"question":"You are given an array `A` of `n` integers. Your task is to check if the array can be broken into exactly 3 non-empty contiguous subarrays with strictly increasing elements in each subarray. If such a partition is possible, return \\"YES\\", otherwise return \\"NO\\". Input: - The first line contains an integer `n` (3 ≤ n ≤ 10^5), the size of the array. - The second line contains `n` integers `A_1, A_2, ..., A_n` (1 ≤ A_i ≤ 10^9), the elements of the array. Output: Print \\"YES\\" if the array can be partitioned into three non-empty contiguous subarrays with strictly increasing elements, otherwise print \\"NO\\". Example: Input: 6 1 2 3 2 3 4 Output: YES Input: 4 4 3 2 1 Output: NO Input: 7 5 1 2 3 4 1 2 Output: YES Explanation: In the first example, the array [1, 2, 3, 2, 3, 4] can be divided into [1, 2, 3], [2], and [3, 4]. In the second example, it is not possible to partition the array into three increasing subarrays. In the third example, the array [5, 1, 2, 3, 4, 1, 2] can be divided into [5], [1, 2, 3, 4], and [1, 2].","solution":"def can_be_partitioned_to_strictly_increasing_subarrays(n, A): Determine if the array can be broken into exactly 3 non-empty contiguous subarrays with strictly increasing elements in each subarray. Parameters: n (int): The size of the array. A (list): The list of integers. Returns: str: \\"YES\\" if it is possible, otherwise \\"NO\\". if n < 3: return \\"NO\\" left = [0] * n right = [0] * n left[0] = 1 for i in range(1, n): if A[i] > A[i-1]: left[i] = left[i-1] + 1 else: left[i] = 1 right[n-1] = 1 for i in range(n-2, -1, -1): if A[i] < A[i+1]: right[i] = right[i+1] + 1 else: right[i] = 1 for i in range(1, n-1): if left[i-1] > 1 and right[i+1] > 1: return \\"YES\\" return \\"NO\\""},{"question":"A delivery company has a set of delivery points in a grid and needs to find the shortest path that collects all items from different points and returns to the starting point. Points are connected, and each move from one point to another has an associated cost. The company wants to know the minimum cost required to collect all items and complete the route. Input The first line contains two integers n (1 leq n leq 15) and m (1 leq m leq 105), representing the number of delivery points and the number of direct paths between them. Each of the next m lines contains three integers u, v, and w (1 leq u, v leq n, 1 leq w leq 1000) indicating that there is a direct path between point u and point v with a cost of w. The points are numbered from 1 to n. Output Print the minimum cost to start from point 1, visit all delivery points, and return to point 1. If it is not possible to visit all delivery points, print \\"-1\\". Example Input 5 7 1 2 10 1 3 15 1 4 20 1 5 25 2 5 10 3 4 30 4 5 5 Output 70","solution":"import itertools def calculate_min_cost(n, m, paths): import sys from itertools import permutations # create adjacency matrix with costs as edge weights cost = [[sys.maxsize] * (n + 1) for _ in range(n + 1)] for u, v, w in paths: cost[u][v] = w cost[v][u] = w # function to compute the cost of a specific permutation def path_cost(path): total_cost = 0 for i in range(len(path) - 1): if cost[path[i]][path[i+1]] == sys.maxsize: return sys.maxsize total_cost += cost[path[i]][path[i+1]] return total_cost # Check all permutations min_cost = sys.maxsize for perm in permutations(range(2, n+1)): current_path = [1] + list(perm) + [1] min_cost = min(min_cost, path_cost(current_path)) return min_cost if min_cost != sys.maxsize else -1 # Example usage: def shortest_delivery_route(n, m, connections): return calculate_min_cost(n, m, connections)"},{"question":"John is experimenting with an online auction system. He wants to analyze the bids placed on various items. Each bid is associated with an item and a bid amount. The goal is to find out the highest bid for each item. You are given the details of each bid: an item ID and the bid amount. You need to determine the maximum bid amount for each item from the given data. Input Format: - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains an integer N, denoting the number of bids. - The following N lines each contain two space-separated integers I and B, where I is the item ID and B is the bid amount. Output Format: For each test case, output the maximum bid amount for each item in separate lines. Each test case should produce one line of output for each unique item ID, displaying the item ID and its highest bid. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 10000 1 ≤ I ≤ 10000 1 ≤ B ≤ 100000 Note: - The item IDs may not be contiguous. - Ensure that for each test case, the output lines are sorted by item ID in ascending order. SAMPLE INPUT 2 5 1 100 2 150 1 200 3 300 2 250 4 5 500 6 600 5 700 6 800 SAMPLE OUTPUT 1 200 2 250 3 300 5 700 6 800 Explanation: For the first test case: - Item 1 has bids 100 and 200. The highest bid is 200. - Item 2 has bids 150 and 250. The highest bid is 250. - Item 3 has a single bid of 300. For the second test case: - Item 5 has bids 500 and 700. The highest bid is 700. - Item 6 has bids 600 and 800. The highest bid is 800. In both cases, the output lines are sorted by item ID in ascending order.","solution":"def find_highest_bids(T, test_cases): result = [] for i in range(T): N = test_cases[i][0] bids = test_cases[i][1] bid_dict = {} for bid in bids: item_id, amount = bid if item_id in bid_dict: bid_dict[item_id] = max(bid_dict[item_id], amount) else: bid_dict[item_id] = amount sorted_bids = sorted(bid_dict.items()) result.append(sorted_bids) return result # Function to process input and generate output in expected format def process_input_and_print_output(input_data): input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] idx = 1 for _ in range(T): N = int(input_lines[idx]) bids = [] for j in range(N): I, B = map(int, input_lines[idx + 1 + j].split()) bids.append((I, B)) test_cases.append((N, bids)) idx += N + 1 results = find_highest_bids(T, test_cases) output = [] for result in results: for item_id, amount in result: output.append(f\\"{item_id} {amount}\\") return \\"n\\".join(output)"},{"question":"Given a string `s` consisting of `n` lowercase letters, and a set of `m` patterns represented by `p1, p2, ..., pm`, where each pattern is also a string of lowercase letters. Your task is to identify the smallest pattern from the given set that appears in the string `s`. A pattern `p` appears in `s` if there is a contiguous substring of `s` that matches exactly with `p`. The smallest pattern is defined as the pattern with the fewest number of characters. If there are multiple patterns with the same smallest length, you must return the lexicographically smallest one among them. Input - The first line contains two integers n (1 ≤ n ≤ 1000) and m (1 ≤ m ≤ 100), where `n` is the length of `s` and `m` is the number of patterns. - The second line contains the string `s` of length `n`. - Each of the next `m` lines contains a pattern `p`. Output - Print a single line containing the smallest pattern that appears in `s`. Examples Input ``` 10 3 aabbccddeeff aa bb ff ``` Output ``` aa ``` Input ``` 15 4 thisisateststring test ring string this ``` Output ``` ring ``` Note: - In the first example, the patterns `aa`, `bb`, and `ff` all appear in `s`. All patterns have length 2, but `aa` is lexicographically smallest. - In the second example, the patterns `test`, `ring`, `string`, and `this` all appear in `s`. The smallest patterns by length are `this` and `ring`, but `ring` is lexicographically smallest.","solution":"def smallest_pattern(s, patterns): Given a string s and a list of patterns, returns the smallest pattern that appears in s. :param s: str - the string to search within :param patterns: List[str] - the list of patterns to search for :return: str - the smallest pattern that appears in s smallest_pattern = None for pattern in patterns: if pattern in s: if smallest_pattern is None or len(pattern) < len(smallest_pattern): smallest_pattern = pattern elif len(pattern) == len(smallest_pattern) and pattern < smallest_pattern: smallest_pattern = pattern return smallest_pattern"},{"question":"A company has multiple teams working on different projects. Each project can be categorized into one of three priority levels: low, medium, and high. The company wants to maximize its profit by ensuring that high-priority projects get more attention than medium-priority projects, and medium-priority projects get more attention than low-priority projects. The company has \'n\' teams available, and each team can work on exactly one project. You are given a list of projects with their respective priority levels. Your task is to assign projects to teams such that the company maximizes its attention distribution across projects. If multiple assignments yield the same attention distribution, provide any valid assignment. Input: The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of teams and projects. The second line contains n integers p1, p2, ..., pn (0 ≤ pi ≤ 2), where pi is the priority level of the i-th project (0 represents low priority, 1 represents medium priority, and 2 represents high priority). Output: Print a single line with n integers representing the index positions (1-based) of the projects assigned to the teams in order of teams, such that high-priority projects are assigned first, followed by medium-priority projects, and then low-priority projects. If there is no valid assignment, print \\"Impossible\\". Examples: Input: 5 2 1 0 2 1 Output: 1 4 2 5 3 Input: 4 2 0 1 0 Output: 1 3 2 4 Input: 3 0 0 0 Output: 1 2 3 Input: 3 2 2 2 Output: 1 2 3 Note: In the first example: - Projects 1 and 4 have high priority, so they are assigned first. - Projects 2 and 5 have medium priority, so they are assigned next. - Project 3 has low priority, so it is assigned last. In the second example: - Project 1 has high priority, so it is assigned first. - Project 3 has medium priority, so it is assigned next. - Projects 2 and 4 have low priority, so they are assigned last. In the third example: - All projects have low priority, so they can be assigned in any order. In the fourth example: - All projects have high priority, so they can be assigned in any order.","solution":"def maximize_attention_distribution(n, priorities): projects = list(enumerate(priorities, 1)) # Sort projects by priority in descending order sorted_projects = sorted(projects, key=lambda x: -x[1]) # Extract the sorted project indices assignment = [project[0] for project in sorted_projects] return assignment"},{"question":"Sophia is participating in a treasure hunt game. She has been given a series of clues consisting of n positive integers arranged in a circular pattern. To find the treasure, Sophia needs to select three integers a, b, and c such that they form a contiguous subarray of length three, and their sum is maximized. Given the circular nature of the array, the subarray can wrap around the end of the array. For example, if the array is [1, 2, 3, 4], then (4, 1, 2) is a valid subarray. Write a program to help Sophia determine the maximum possible sum of any three contiguous integers in the circular array. Input The first line contains a single integer n (3 ≤ n ≤ 100 000) — the number of integers in the array. The second line contains n positive integers separated by spaces, representing the series of clues. Output Print a single integer — the maximum sum of any three contiguous integers in the circular array. Examples Input 5 5 1 2 3 4 Output 12 Input 4 8 1 9 2 Output 19 Note In the first example, the maximum sum can be obtained by selecting the subarray (4, 5, 3) which gives the sum of 4 + 5 + 3 = 12. In the second example, the maximum sum can be obtained by selecting the subarray (9, 2, 8), as the clues wrap around in a circular manner, giving the sum of 9 + 2 + 8 = 19.","solution":"def max_contiguous_sum(n, clues): Returns the maximum sum of any three contiguous integers in the circular array. Parameters: n (int): Number of integers in the array. clues (list of int): The series of clues in the circular array. Returns: int: Maximum possible sum of any three contiguous integers. # Handle the circular nature by extending the array with the first two elements at the end extended_clues = clues + clues[:2] # Initialize max_sum with the smallest possible value max_sum = float(\'-inf\') # Iterate through the original array length to find the maximum sum of three contiguous integers for i in range(n): current_sum = sum(extended_clues[i:i+3]) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Rika is working on a problem involving two-dimensional grids. She wants to place several obstacles on specific positions of the grid and then determine the shortest path from a start position to an end position while avoiding these obstacles. The grid is represented by an N x M matrix. G ridea is that given multiple queries, each specifying a start and end position in the grid, and after placing the obstacles, determine the shortest path from the start to the end position avoiding obstacles, using only horizontal or vertical moves (not diagonal). If a path cannot be found, return -1 for that query. Input format First line: Three integers N (rows), M (columns) and P (number of obstacles) separated by spaces. Next P lines: Two integers x_i and y_i, the coordinates of the obstacles. Next line: An integer Q, the number of queries. Following Q lines: Four integers s_x, s_y, t_x, t_y for each query, representing the start (s_x, s_y) and end (t_x, t_y) coordinates. Constraints 1 leq N, M leq 1000 0 leq P leq N times M 1 leq Q leq 1000 1 leq x_i < N leq 1000 Obstacles positions are unique within a query. Coordinates adhere to 1-based indexing. Output format For each query, output a single integer - the length of the shortest path from the start to the end coordinates or -1 if no such path exists. Input example 1 5 5 3 2 2 2 3 3 2 2 1 1 5 5 1 1 3 3 Output example 1 8 -1 Input example 2 8 8 2 4 4 3 5 1 1 1 8 8 Output example 2 14","solution":"from collections import deque def shortest_path(N, M, P, obstacles, Q, queries): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] obstacle_set = set((x, y) for x, y in obstacles) def bfs(start, end): sx, sy = start tx, ty = end if (sx, sy) in obstacle_set or (tx, ty) in obstacle_set: return -1 visited = set() queue = deque([(sx - 1, sy - 1, 0)]) # Python uses 0-based indexing visited.add((sx - 1, sy - 1)) while queue: x, y, dist = queue.popleft() if (x, y) == (tx - 1, ty - 1): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and (nx, ny) not in visited and (nx, ny) not in obstacle_set: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 results = [] for start, end in queries: results.append(bfs(start, end)) return results"},{"question":"You are given a sequence of integers. Your task is to divide this sequence into the minimum possible number of contiguous subsequences, such that each subsequence is strictly increasing. Input The input consists of a single line containing an integer n (1 ≤ n ≤ 100) - the length of the sequence, followed by n space-separated integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) - the elements of the sequence. Output Print a single integer - the minimum number of contiguous strictly increasing subsequences into which the sequence can be divided. Examples Input 5 1 2 3 2 3 Output 2 Input 4 4 3 2 1 Output 4 Input 6 1 2 3 4 5 6 Output 1 Note In the first example, the sequence can be divided into [1, 2, 3] and [2, 3]. Thus, the minimum number of contiguous strictly increasing subsequences is 2. In the second example, each element itself is a subsequence, thus the output is 4. In the third example, the sequence is already strictly increasing, so only one subsequence is needed.","solution":"def min_increasing_subsequences(n, sequence): Returns the minimum number of contiguous strictly increasing subsequences into which the sequence can be divided. if n == 0: return 0 count = 1 # at least one subsequence exists for i in range(1, n): if sequence[i] <= sequence[i - 1]: count += 1 return count"},{"question":"In a galaxy far far away, there exists a planet called Xylon. The traffic rules on Xylon are unique as the vehicles there do not follow the traditional four directions. They only move along predetermined paths connecting various colonies. Each colony has a unique identifier ranging from 1 to N. The government of Xylon requires your help to resolve a traffic control issue. They want to compute the shortest path between two colonies for the emergency response team. The paths between colonies are bidirectional roads with different lengths. Due to a technical glitch, the computer in the control center can only process 4999 or fewer queries to find the shortest path. Given the details of the network of colonies and roads, your task is to determine the shortest path between a specified pair of colonies. **Input:** - The first line contains two integers, N (1 ≤ N ≤ 5000) and M (1 ≤ M ≤ 20,000) — the number of colonies and the number of bidirectional roads, respectively. - Each of the next M lines contains three integers, u, v, and w (1 ≤ u, v ≤ N, 1 ≤ w ≤ 1000), which denote a road between colonies u and v with length w. - The following line contains two integers, A and B (1 ≤ A, B ≤ N) — the colonies between which the shortest path is to be determined. **Output:** Print a single integer — the length of the shortest path between colony A and colony B. If there is no path, print \\"-1\\". **Example:** **Input:** 6 7 1 2 2 1 3 4 2 3 1 2 4 7 3 5 3 4 6 1 5 6 5 1 6 **Output:** 10 **Explanation:** Colony 1 is connected to Colony 6 through the path 1 -> 2 -> 3 -> 5 -> 6 with a total distance of 2 + 1 + 3 + 5 = 11. The roads along these colonies can have various segments resulting in different distances, but our objective is to compute the shortest among the available paths. Ensure your program efficiently handles the constraints and processes the queries within the allowed limit to provide the correct shortest path.","solution":"import heapq def find_shortest_path(N, M, roads, A, B): graph = {i: [] for i in range(1, N+1)} for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) def dijkstra(source, target): min_heap = [(0, source)] distances = {i: float(\'inf\') for i in range(1, N+1)} distances[source] = 0 visited = set() while min_heap: current_dist, current_node = heapq.heappop(min_heap) if current_node in visited: continue visited.add(current_node) if current_node == target: return current_dist for neighbor, weight in graph[current_node]: distance = current_dist + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(min_heap, (distance, neighbor)) return -1 # target is not reachable return dijkstra(A, B)"},{"question":"A company has a new coding system for messages. Each message must undergo a transformation based on a set of rules before being sent. The transformation involves shifting characters in the message. Write a function `transform_message` that takes a string `message` and an integer `shift` as inputs and returns the transformed message. The transformation should shift each alphabetical character in the message by the given `shift` value in the alphabet, wrapping around if necessary (i.e., with a right shift, \'z\' becomes \'a\', and with a left shift, \'a\' becomes \'z\'). Non-alphabetical characters should remain unchanged. # Input - A string `message` (1 ≤ length of message ≤ 10^5) consisting of uppercase letters, lowercase letters, digits, and punctuation. - An integer `shift` (-10000 ≤ shift ≤ 10000) representing the shift value. # Output - A string representing the transformed message. # Example Input `\\"Hello, World!\\"` 3 Output `\\"Khoor, Zruog!\\"` Input `\\"Abc-xyz\\"` -2 Output `\\"Yza-vwt\\"` # Notes In the first example, each character in the message \\"Hello, World!\\" is shifted by 3 positions in the alphabet: - \'H\' becomes \'K\' - \'e\' becomes \'h\' - \'l\' becomes \'o\' - \'o\' becomes \'r\' - \'W\' becomes \'Z\' - \'r\' becomes \'u\' - \'d\' becomes \'g\' In the second example, the shift value is -2: - \'A\' becomes \'Y\' - \'b\' becomes \'z\' - \'c\' becomes \'a\' - \'x\' becomes \'v\' - \'y\' becomes \'w\' - \'z\' becomes \'x\' Each character wraps around if necessary, and non-alphabetical characters remain unchanged.","solution":"def transform_message(message, shift): Transforms the input message by shifting its characters by the given shift value. transformed_message = [] shift = shift % 26 # Normalize shift to ensure it\'s within the range of 0-25 for char in message: if \'a\' <= char <= \'z\': transformed_message.append(chr((ord(char) - ord(\'a\') + shift) % 26 + ord(\'a\'))) elif \'A\' <= char <= \'Z\': transformed_message.append(chr((ord(char) - ord(\'A\') + shift) % 26 + ord(\'A\'))) else: transformed_message.append(char) return \'\'.join(transformed_message)"},{"question":"You are given a list of integers representing the scores of students in a class. You are to implement a function that determines how many students scored above the average score. Input The first line contains an integer n (1 ≤ n ≤ 100000) — the number of students. The second line contains n space-separated integers s1, s2, ..., sn (0 ≤ si ≤ 100) — the scores of the students. Output Print a single integer — the number of students who scored above the average score. Examples Input 5 10 20 30 40 50 Output 2 Input 4 60 60 60 60 Output 0 Note In the first test case, the average score is (10 + 20 + 30 + 40 + 50) / 5 = 30. There are two students who scored above 30: the students with scores 40 and 50. In the second test case, the average score is (60 + 60 + 60 + 60) / 4 = 60. There are no students who scored above 60.","solution":"def count_students_above_average(scores): Returns the number of students who scored above the average score. n = len(scores) if n == 0: return 0 average_score = sum(scores) / n count_above_average = sum(score > average_score for score in scores) return count_above_average"},{"question":"You are given a string consisting of lowercase letters. You can perform the following operation on this string any number of times: Choose any character in the string and remove all of its occurrences, including the first one. Your goal is to find the lexicographically smallest string that can be obtained after any number of such operations. Input The first line contains a single integer n (1 ≤ n ≤ 100,000) — the length of the string. The second line contains the string of length n consisting of lowercase letters. Output Print the lexicographically smallest string that can be obtained after any number of operations. Examples Input 5 abba Output a Input 4 bcaa Output a Input 10 abacabadab Output a Note In the first example, you can remove all occurrences of \'b\', resulting in the string \\"aaa\\". In the second example, you can remove all occurrences of \'b\' and \'c\', resulting in the string \\"aa\\". In the third example, you can remove all occurrences of \'b\', \'c\', and \'d\', resulting in the string \\"aaa\\".","solution":"def smallest_string(n, s): Returns the lexicographically smallest string that can be obtained after any number of operations. Each operation involves choosing one character from the string and removing all its occurrences. :param n: Length of the input string :param s: Input string :return: Lexicographically smallest string after any number of operations # Convert string to a set to get unique characters unique_chars = set(s) # Find the lexicographically smallest character smallest_char = min(unique_chars) # Return the smallest character return smallest_char"},{"question":"Two robots, named R1 and R2, are placed on an infinite 2D grid. R1 is initially positioned at coordinates (X1, Y1) and R2 is initially positioned at coordinates (X2, Y2). The robots can move in four directions: up, down, left, and right. Each robot can move exactly one unit per step in one of these four directions. The goal is for both robots to meet at the same grid cell. You need to determine whether it\'s possible for the two robots to meet. If they can meet, you need to find the minimum number of steps required for both robots to meet at any grid cell (they don\'t necessarily need to meet at their initial positions). Constraints: * -10^9 ≤ X1, Y1, X2, Y2 ≤ 10^9 * X1, Y1, X2, and Y2 are integers. Input The input is given from Standard Input in the following format: ``` X1 Y1 X2 Y2 ``` Output Print the minimum number of steps required for the two robots to meet. If it is not possible for them to meet, print -1. Example Input ``` 1 2 4 6 ``` Output ``` 7 ``` Explanation In this case, one way the robots can meet is: - R1 moves right three times, and up twice, reaching position (4, 4). - R2 moves left twice, and down once, reaching position (4, 4). They meet at (4, 4) after 7 steps.","solution":"def min_steps_to_meet(X1, Y1, X2, Y2): Returns the minimum number of steps required for two robots to meet at any grid cell. If it is not possible for them to meet, returns -1. # Calculate the Manhattan distance between the two points distance = abs(X1 - X2) + abs(Y1 - Y2) # The robots can always meet because they can move in four directions return distance"},{"question":"In the world of competitive programming, Alice came across a challenge while practicing her skills. The task requires Alice to find the length of the longest subarray within a given array where the elements are in strictly increasing order. This problem is critical for her as she is preparing for a national-level competition and needs your help to solve it effectively and efficiently. INPUT: The first line contains a single integer T, the number of test cases. For each test case, the first line contains an integer N which denotes the size of the array. The next line contains N integers representing the elements of the array. OUTPUT: For each test case, output a single integer representing the length of the longest strictly increasing subarray. CONSTRAINTS: 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 0 ≤ arr[i] ≤ 10^9 SAMPLE INPUT: 2 6 1 2 2 4 3 5 5 5 4 3 2 1 SAMPLE OUTPUT: 2 1","solution":"def longest_increasing_subarray_length(arr): Returns the length of the longest strictly increasing subarray. if not arr: return 0 max_length = 1 current_length = 1 for i in range(1, len(arr)): if arr[i] > arr[i - 1]: current_length += 1 else: current_length = 1 max_length = max(max_length, current_length) return max_length def process_test_cases(test_cases): Processes multiple test cases and returns the results as a list. results = [] for arr in test_cases: results.append(longest_increasing_subarray_length(arr)) return results"},{"question":"Kingdom Parvelon is known for its interesting way of managing rivers. In the kingdom, there are `n` rivers, each with a certain width `wi` in meters. The King has issues with maintaining lanes, so he requires your help to manage the rivers through `q` commands. You have three types of commands at your disposal: 1. `1 id` — report the current width of the river with the specified `id`. 2. `2 l r x` — set the width of all rivers from index `l` to `r` (both inclusive) to `x` meters. It\'s guaranteed that `x` is a valid river width. 3. `3 l r x` — adjust the width of every river from index `l` to `r` (both inclusive) by adding `x` meters. After which, if any river\'s width exceeds the maximum allowed width of `1000` meters, it should be reset to `1000` meters. Input The first line of the input contains two integers `n` and `q` (1 ≤ n, q ≤ 100,000) — the number of rivers and the number of commands respectively. The second line contains `n` integers `w1, w2, ..., wn` (1 ≤ wi ≤ 1000) — the initial widths of the rivers. Then, `q` lines follow. Each of these lines describes a command. The first integer in each line is `typei` (1 ≤ typei ≤ 3) — the type of the command. In the second and third type commands, there are integers `l` and `r` (1 ≤ l ≤ r ≤ n). In the third type commands, the integer `x` (1 ≤ x ≤ 1000) specifies how much to increase each river\'s width. Output For each command of the first type, print the current width of the specified river in a separate line. Example Input 5 6 100 200 300 400 500 1 3 2 2 4 150 1 3 3 1 5 100 1 1 1 5 Output 300 150 200 600 Note For the input example: - After the second command (`2 2 4 150`), the river widths become 100, 150, 150, 150, 500. - After the fourth command (`3 1 5 100`), the river widths become 200, 250, 250, 250, 600. Any width that exceeds 1000 should be set to 1000, but in this case, it doesn\'t exceed.","solution":"def manage_rivers(n, q, river_widths, commands): results = [] for command in commands: if command[0] == 1: # Report the current width of the river with the specified id id = command[1] results.append(river_widths[id - 1]) elif command[0] == 2: # Set the width of all rivers from index l to r to x l, r, x = command[1], command[2], command[3] for i in range(l - 1, r): river_widths[i] = x elif command[0] == 3: # Adjust the width of every river from index l to r by adding x meters l, r, x = command[1], command[2], command[3] for i in range(l - 1, r): river_widths[i] += x if river_widths[i] > 1000: river_widths[i] = 1000 return results"},{"question":"A company has a number of teams working on different projects. Each project has a priority value associated with it, and each team has a capacity which represents the number of projects it can handle at a time. The goal is to maximize the total priority value assigned to each team, but with the constraint that no team should exceed its capacity. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of projects. The second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 1000) — the priority values of the projects. The third line contains an integer m (1 ≤ m ≤ 100) — the number of teams. The fourth line contains m integers c1, c2, ..., cm (1 ≤ ci ≤ 1000) — the capacities of the teams. Output Print the maximum total priority value that can be achieved by assigning projects to teams without exceeding the capacities of any team. Example Input 5 10 20 30 40 50 3 2 3 1 Output 140 Note In this example, one possible optimal assignment is: - Assign the projects with priority values 40 and 50 to the first team. - Assign the projects with priority values 20 and 30 to the second team. - Assign the project with priority value 10 to the third team. Thus, the total priority value is 40 + 50 + 20 + 30 + 10 = 150, which is the maximum total priority value that can be achieved within the given constraints.","solution":"def maximize_priority(n, priorities, m, capacities): Maximizes the total priority value that can be achieved by assigning projects to teams without exceeding the capacities of any team. # Sort projects by priority in descending order priorities.sort(reverse=True) # Sort team capacities in descending order capacities.sort(reverse=True) max_priority = 0 project_index = 0 for capacity in capacities: for _ in range(capacity): if project_index < n: max_priority += priorities[project_index] project_index += 1 return max_priority"},{"question":"Jon is a competitive programmer and loves to solve problems related to schedules and timelines. He is participating in a marathon where he needs to run from one checkpoint to another. There are n checkpoints and m direct roads between some pairs of checkpoints. Jon wants to start at checkpoint 1 and reach checkpoint n with the minimum possible time. Each direct road i has an associated time t_i which represents the time required to travel that road. Jon can use each road only once. Can you help Jon find the minimum time required to reach checkpoint n from checkpoint 1? Input The first line of the input contains two integers n and m (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 2 * 10^5), the number of checkpoints and the number of direct roads. Each of the next m lines contains three integers u_i, v_i, and t_i (1 ≤ u_i, v_i ≤ n, u_i ≠ v_i, 1 ≤ t_i ≤ 10^4), representing a direct road between checkpoints u_i and v_i with an associated time t_i. Output Output the minimum time required to reach checkpoint n from checkpoint 1. If there is no path from checkpoint 1 to checkpoint n, output -1. Examples Input 5 6 1 2 2 1 3 4 2 3 1 2 4 7 3 4 3 4 5 1 Output 7 Input 4 2 1 2 3 2 3 5 Output -1 Note In the first example, Jon can take the path 1 -> 2 -> 3 -> 4 -> 5 with a total time of 2 + 1 + 3 + 1 = 7. In the second example, there is no available path from checkpoint 1 to checkpoint 4.","solution":"import heapq import sys from collections import defaultdict def minimum_time_to_reach_n_from_1(n, m, roads): graph = defaultdict(list) for u, v, t in roads: graph[u].append((v, t)) graph[v].append((u, t)) # Dijkstra\'s Algorithm pq = [(0, 1)] # (time, checkpoint) min_time = {i: sys.maxsize for i in range(1, n+1)} min_time[1] = 0 while pq: current_time, checkpoint = heapq.heappop(pq) if checkpoint == n: return current_time if current_time > min_time[checkpoint]: continue for neighbor, travel_time in graph[checkpoint]: new_time = current_time + travel_time if new_time < min_time[neighbor]: min_time[neighbor] = new_time heapq.heappush(pq, (new_time, neighbor)) return -1 # Example use case # n = 5 # m = 6 # roads = [ # (1, 2, 2), # (1, 3, 4), # (2, 3, 1), # (2, 4, 7), # (3, 4, 3), # (4, 5, 1) # ] # print(minimum_time_to_reach_n_from_1(n, m, roads)) # 7"},{"question":"A new online bookstore system requires a feature to recommend books to its readers. For this purpose, the system maintains a record of book purchases. Each book is identified by a unique ID, and each purchase record includes the reader\'s ID and the book\'s ID. The system needs to find the top K most frequently purchased books. If there are multiple books with the same number of purchases, they should be ordered by their ID in ascending order. Given the list of books purchased and the number K, implement a function that returns the list of top K most frequently purchased books. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains integers N and K. The second line contains N space-separated integers denoting the book IDs of the purchases. Output For each test case, output a single line containing the list of top K most frequently purchased book IDs, separated by space. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ K ≤ N 1 ≤ bookID ≤ 10^9 Example Input: 2 5 2 1 2 3 3 2 6 3 4 4 4 2 2 3 Output: 2 3 4 2 3","solution":"def top_k_books(T, test_cases): from collections import Counter results = [] for i in range(T): N, K = test_cases[i][0], test_cases[i][1] book_ids = test_cases[i][2] # Count the frequency of each book book_count = Counter(book_ids) # Sort the books by frequency (descending), and by id (ascending) if frequencies are the same sorted_books = sorted(book_count.items(), key=lambda x: (-x[1], x[0])) # Get the top K books\' ids top_k_books = [book_id for book_id, count in sorted_books[:K]] results.append(top_k_books) return results"},{"question":"The Kingdom of Graphonia consists of a number of towns connected by bidirectional roads, forming a graph. The roads are assigned different levels of accessibility due to their conditions, which are marked by an integer value. Each town can be represented as a node, and each road as an edge with a weight corresponding to its accessibility level. The graph is guaranteed to be connected, meaning there is at least one path between any two towns. However, due to recent issues in the realm, the King of Graphonia wants to ensure that all towns remain connected even if the most critical roads (the ones with the highest accessibility level) were to be removed. Your task is to determine the level of the highest accessibility road that, when removed, still guarantees that the graph remains fully connected. Input The first line contains two integers `n` and `m` – the number of towns and the number of roads, respectively (`2 ≤ n ≤ 100, 1 ≤ m ≤ 1000`). Each of the next `m` lines contains three integers `u`, `v` and `l` – indicating there is a bidirectional road between towns `u` and `v` with an accessibility level of `l` (`1 ≤ u, v ≤ n, 1 ≤ l ≤ 1000`). Output Print a single integer – the level of the highest accessibility road that can be removed while keeping the graph connected. If no such road can be removed or it is not possible to disrupt connectivity by removing any road, print \\"NO\\". Examples Input 4 5 1 2 10 2 3 15 3 4 10 4 1 20 1 3 25 Output 25 Input 3 3 1 2 5 2 3 10 1 3 15 Output 15 Input 3 2 1 2 3 2 3 5 Output NO Note In the first sample, the removal of the road between towns 1 and 3 which has the highest accessibility level of 25 still leaves the graph connected. In the second sample, the removal of the road between towns 1 and 3 which has the highest accessibility level of 15 still leaves the graph connected. In the third sample, removal of any road will disrupt the connectivity of the graph since it would only have one remaining connection.","solution":"def find_highest_removable_accessibility(n, m, roads): def find(parent, x): if parent[x] != x: parent[x] = find(parent, parent[x]) return parent[x] def union(parent, rank, x, y): rootX = find(parent, x) rootY = find(parent, y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 roads.sort(key=lambda x: x[2], reverse=True) # Sort roads by accessibility level descending for i in range(m): parent = list(range(n)) rank = [0] * n for j in range(m): if i == j: continue u, v, l = roads[j] union(parent, rank, u - 1, v - 1) components = len(set(find(parent, x) for x in range(n))) if components == 1: return roads[i][2] return \\"NO\\""},{"question":"Given a positive integer n, Polycarp wants to create a new sequence of n positive integers such that the number of distinct divisors of the sequence elements are the same. Each element in the sequence should be within the range [1, nm], where nm is the maximum number of divisors an integer within this range can have. Determine a sequence of n positive integers such that each number has exactly d divisors, where 1 ≤ d ≤ nm. If there are multiple solutions, return any. If it is impossible to generate such a sequence, print -1. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the number of elements in the sequence. Output If it is impossible to generate the sequence meeting the criteria, print -1. Otherwise, print a sequence of n positive integers such that each number has exactly the same number of divisors. Examples Input 5 Output [6, 6, 6, 6, 6] Input 3 Output [10, 10, 10] Input 2 Output [1, 1] Note In the first example, the number 6 has exactly 4 divisors (1, 2, 3, 6). Thus, the sequence is [6, 6, 6, 6, 6], with each number having 4 divisors. In the second example, the number 10 has exactly 4 divisors (1, 2, 5, 10). Thus, the sequence is [10, 10, 10], with each number having 4 divisors. In the third example, the number 1 has exactly 1 divisor (1). Thus, the sequence is [1, 1], with each number having 1 divisor. This problem explores the understanding of the divisor function in number theory and allows the student to implement a solution that identifies a suitable divisor count and constructs a sequence accordingly.","solution":"def find_divisors(n): Returns a list of divisors of the given number n. divisors = [] for i in range(1, (n // 2) + 1): if n % i == 0: divisors.append(i) divisors.append(n) return divisors def count_divisors(n): Returns the number of divisors of the given number n. return len(find_divisors(n)) def generate_sequence(n): Generates a sequence of n positive integers where all numbers have the same number of divisors. If it\'s impossible, returns -1. max_divisors = 0 result_number = 1 # Find maximum number of divisors within range [1, n*100] for i in range(1, n * 100): divisors_count = count_divisors(i) if divisors_count > max_divisors: max_divisors = divisors_count result_number = i # Generate sequence of the number with the highest divisor count sequence = [result_number] * n return sequence def sequence_with_same_divisors(n): Wrapper function to provide the correct format of the solution. if n == 1: return [1] return generate_sequence(n)"},{"question":"You are given a rectangular matrix of size n x m consisting of integer values. Your task is to determine the maximum sum of contiguous subarrays that can be obtained from the matrix. A contiguous subarray in this case is defined as a group of elements that are contiguous in either horizontal or vertical direction, including diagonally in any direction. You can select multiple subarray ranges following these rules: 1. The maximum sum should be calculated for all possible subarrays. 2. The subarray must consist of at least one element. Input - The first line contains a single integer t (1 ≤ t ≤ 10) — the number of test cases. - Each test case contains two integers n and m (1 ≤ n, m ≤ 50) — the dimensions of the matrix. - This is followed by n lines, each containing m integers, representing the matrix elements. The values of the matrix elements fall within the range of -1000 to 1000. Output - For each test case, print a single integer, which is the maximum sum of any contiguous subarray in the provided matrix. Example Input 2 3 3 1 2 -1 -3 4 0 3 -1 2 2 2 -1 -2 -3 -4 Output 7 -1 Explanation - In the first test case, the maximum contiguous subarray sum is obtained by selecting the subarray consisting of the elements [4, 0, 3] vertically. - In the second test case, the entire matrix has all negative values, hence the single largest element is chosen which is -1. Note To solve this problem efficiently, you could extend the well-known Kadane\'s algorithm for maximum subarray to 2D matrices by iterating over the starting and ending cells appropriately and computing sum ranges dynamically.","solution":"def max_2d_subarray_sum(matrix, n, m): Returns the maximum sum of a contiguous subarray in a 2D matrix. def kadane(arr): Helper function to perform 1D Kadane\'s algorithm. max_sum = current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) if current_sum > max_sum: max_sum = current_sum return max_sum max_sum = float(\'-inf\') for left in range(m): temp = [0] * n for right in range(left, m): for i in range(n): temp[i] += matrix[i][right] max_sum = max(max_sum, kadane(temp)) return max_sum def process_input(t, input_data): Processes the input and returns the results for each test case. results = [] index = 0 for _ in range(t): n, m = input_data[index] index += 1 matrix = [] for _ in range(n): matrix.append(input_data[index]) index += 1 results.append(max_2d_subarray_sum(matrix, n, m)) return results def main(t, matrices): return process_input(t, matrices)"},{"question":"You have been given an inventory list of items in a warehouse. Each item has a unique identifier represented by an integer ID, and the count of each item is tracked. You need to write a program that updates the inventory list based on a list of transactions. Each transaction either adds to or removes from the inventory count of a given item. You are required to implement a function to process the transactions and return the updated inventory counts. If a transaction attempts to remove more items than are available, no change should be made for that transaction. Constraints * 1 ≤ number of items in the inventory ≤ 10^5 * 1 ≤ number of transactions ≤ 10^5 * -10^6 ≤ transaction count ≤ 10^6 * Each item ID is a distinct integer Input Input is given from Standard Input in the following format: Inventory: N item_id_1 stock_count_1 item_id_2 stock_count_2 : item_id_N stock_count_N Transactions: M transaction_item_id_1 transaction_count_1 transaction_item_id_2 transaction_count_2 : transaction_item_id_M transaction_count_M Output Print the updated inventory in the following format: updated_item_id_1 updated_stock_count_1 updated_item_id_2 updated_stock_count_2 : updated_item_id_N updated_stock_count_N Examples Input Inventory: 3 101 20 102 35 103 12 Transactions: 4 101 5 102 -10 103 -15 104 25 Output 101 25 102 25 103 12","solution":"def update_inventory(inventory, transactions): inventory_dict = {item_id: stock_count for item_id, stock_count in inventory} for item_id, transaction_count in transactions: if item_id in inventory_dict: if transaction_count < 0 and inventory_dict[item_id] + transaction_count < 0: continue inventory_dict[item_id] += transaction_count else: if transaction_count > 0: inventory_dict[item_id] = transaction_count updated_inventory = sorted(inventory_dict.items()) return updated_inventory"},{"question":"Problem statement You are given a binary string `S` consisting of only the characters `0` and `1`. You need to find the length of the shortest substring that contains both `0` and `1` at least once. Constraint * 1 leq text{length of } S leq 10^5 input The input consists of the binary string `S`. output Print the length of the shortest substring that contains both `0` and `1` at least once. Example Input 10101 Output 2 Input 000111 Output 2 Input 111111 Output -1","solution":"def shortest_substring_containing_0_and_1(S): Returns the length of the shortest substring that contains both \'0\' and \'1\' at least once. If no such substring exists, returns -1. n = len(S) min_length = float(\'inf\') # Track the most recent positions of \'0\' and \'1\' last_pos = {\'0\': -1, \'1\': -1} for i, char in enumerate(S): if char in last_pos: last_pos[char] = i other_char = \'1\' if char == \'0\' else \'0\' if last_pos[other_char] != -1: min_length = min(min_length, i - last_pos[other_char] + 1) return min_length if min_length != float(\'inf\') else -1"},{"question":"Alice and Bob are playing a game on a grid, and you are required to determine the number of different paths they can take from the top-left corner to the bottom-right corner. The grid is of size N by N, where each cell can contain a certain number of apples. They can only move either right or down starting from the top-left corner of the grid, and they need to collect at least K apples by the time they reach the bottom-right corner. Input The first line of input contains an integer N (1 ≤ N ≤ 100), the size of the grid. The second line contains an integer K (0 ≤ K ≤ 10000), the minimum number of apples required. Each of the next N lines contains N integers separated by spaces which represent the number of apples in each cell of the grid (0 ≤ apples ≤ 100). Output Output a single integer - the number of distinct paths from the top-left to the bottom-right corner where they collect at least K apples. Example Input 3 10 1 2 3 4 5 6 7 8 9 Example Output 6 Explanation There are 6 paths that Alice and Bob can take to reach the bottom-right corner while collecting at least 10 apples: 1. (1, 4, 5, 8, 9) 2. (1, 2, 5, 8, 9) 3. (1, 2, 3, 6, 9) 4. (1, 2, 5, 6, 9) 5. (1, 4, 5, 6, 9) 6. (1, 4, 7, 8, 9)","solution":"def count_paths_with_apples(N, K, grid): def dfs(x, y, apples): if x == N - 1 and y == N - 1: return 1 if apples + grid[x][y] >= K else 0 if (x, y, apples) in memo: return memo[(x, y, apples)] paths = 0 if x + 1 < N: paths += dfs(x + 1, y, apples + grid[x][y]) if y + 1 < N: paths += dfs(x, y + 1, apples + grid[x][y]) memo[(x, y, apples)] = paths return paths memo = {} return dfs(0, 0, 0) # Example usage N = 3 K = 10 grid = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] print(count_paths_with_apples(N, K, grid)) # Output: 6"},{"question":"Alex is interested in finding various sequences for his research in genetic engineering. Each sequence is represented by a combination of \'A\', \'T\', \'C\', and \'G\'. Alex has a specific constraint that no two adjacent characters in the sequence can be the same. Given the length of the sequence n, Alex wants to know how many valid sequences of length n can be formed under this constraint. Since the number of sequences can be very large, you are required to provide the answer modulo 10^9 + 7. [Input] First line contains an integer t denoting number of test cases. Each test case consists of a single line containing integer n denoting the length of the sequence. [Output] For each test case, output a single line denoting the number of valid sequences under the constraint modulo 10^9 + 7. [Constraints] 1 ≤ t ≤ 100 1 ≤ n ≤ 10^18 SAMPLE INPUT 2 1 2 SAMPLE OUTPUT 4 12 Explanation For n = 1: There are 4 possible sequences each containing one of \'A\', \'T\', \'C\', \'G\'. For n = 2: There are 12 possible sequences of length 2 where no two adjacent characters are the same: AT, AC, AG, TA, TC, TG, CA, CT, CG, GA, GT, GC","solution":"MOD = 10**9 + 7 def count_sequences(n): Returns the number of valid sequences of length n modulo 10^9 + 7. if n == 1: return 4 elif n == 2: return 12 # 4 initial ways to pick the first character, then 3 choices for every subsequent character # result = 4 * (3^(n-1)) % (10^9 + 7) return (4 * pow(3, n - 1, MOD)) % MOD def process_test_cases(test_cases): results = [] for n in test_cases: results.append(count_sequences(n)) return results"},{"question":"Ivan the Tailor has a unique way of tailoring shirts for his clients. He likes to create custom patterns on the shirts by stitching in straight lines. Recently, Ivan decided to challenge himself by stitching a pattern such that it forms the shape of a polygon. Given the coordinates of the vertices of a polygon in a 2D plane, Ivan wants to calculate the area of the polygon. However, he finds manually computing the area difficult and often makes mistakes. Therefore, he’s turned to you, a talented programmer, to help him automate this calculation. Write a program that takes the vertices of a polygon in order and computes the area of the polygon using the Shoelace formula. Input The input consists of multiple test cases. Each test case starts with an integer `n` (3 <= n <= 10000), representing the number of vertices of the polygon. The next `n` lines each contain two space-separated integers, `x` and `y`, which are the coordinates of the vertices in the polygon, given in counterclockwise order. The end of input is indicated by a line containing a single zero, which should not be processed. Output For each polygon, output a single line containing the area of the polygon, rounded to one decimal place. Example Input 4 0 0 4 0 4 3 0 3 3 1 1 4 1 1 5 0 Output 12.0 6.0","solution":"def calculate_polygon_area(vertices): Calculates the area of a polygon given its vertices using the Shoelace formula. n = len(vertices) area = 0 for i in range(n): x1, y1 = vertices[i] x2, y2 = vertices[(i+1) % n] area += x1 * y2 - y1 * x2 return abs(area) / 2.0 def process_input(input_data): Process the input data as described in the problem statement. lines = input_data.strip().split(\'n\') results = [] i = 0 while i < len(lines): n = int(lines[i]) if n == 0: break i += 1 vertices = [] for _ in range(n): x, y = map(int, lines[i].split()) vertices.append((x, y)) i += 1 area = calculate_polygon_area(vertices) results.append(f\\"{area:.1f}\\") return results"},{"question":"A company maintains a log of employee activities for security purposes. Each log entry records whether an employee has entered or exited the company building. When an employee arrives, there\'s an \\"ENTER\\" log entry with their name, and when they leave, there\'s an \\"EXIT\\" log entry with their name. Each employee is guaranteed to enter before exiting. The task is to determine the name of the employee who spends the maximum time in the building. If there is a tie, return any one of the employees who spent the maximum time. The log entries are provided in a list, and each log entry is formatted as follows: - The first element is the timestamp which is represented as an integer. - The second element is the action (either \\"ENTER\\" or \\"EXIT\\"). - The third element is the employee\'s name. You need to implement a function `maxTimeEmployee(log)` that takes in a list of log entries and returns the name of the employee who spent the most time in the building. # Input: - A list `log` where each element is a list of three elements: `[timestamp, action, employee_name]`. - `timestamp` is an integer representing the time in seconds from the start of the day (range: 0 - 86399). - `action` is a string, either \\"ENTER\\" or \\"EXIT\\". - `employee_name` is a string representing the name of the employee. # Output: - A string representing the name of the employee who spent the most time in the building. # Example: ```python log = [ [100, \\"ENTER\\", \\"Alice\\"], [200, \\"EXIT\\", \\"Alice\\"], [150, \\"ENTER\\", \\"Bob\\"], [300, \\"EXIT\\", \\"Bob\\"], [400, \\"ENTER\\", \\"Charlie\\"], [600, \\"EXIT\\", \\"Charlie\\"], [700, \\"ENTER\\", \\"Alice\\"], [800, \\"EXIT\\", \\"Alice\\"] ] print(maxTimeEmployee(log)) # Output could be \\"Alice\\" or \\"Charlie\\" ``` # Note: - You may assume there will always be at least one employee in the log. - If there is a tie, return any one of the employees who spent the same maximum time in the building.","solution":"def maxTimeEmployee(log): from collections import defaultdict enter_times = {} total_times = defaultdict(int) for entry in log: timestamp, action, employee_name = entry if action == \\"ENTER\\": enter_times[employee_name] = timestamp elif action == \\"EXIT\\": total_times[employee_name] += timestamp - enter_times[employee_name] del enter_times[employee_name] max_time = max(total_times.values()) for employee, time in total_times.items(): if time == max_time: return employee"},{"question":"In the kingdom of Zydonia, the magical forests are filled with rare and valuable plants. Each type of plant has a unique magical power value. Recently, King Zylo has tasked his royal botanist with analyzing the magical properties of the plants within various sections of the forest. The botanist needs to calculate the sum of the magical power values for plants within given ranges in the forest. You will be given P queries, each containing two integers l and r. For each query, you need to return the sum of the magical power values of the plants in the interval between l (inclusive) and r (inclusive). Input Format The first line contains N, the number of types of plants in the forest. The second line contains N space-separated integers representing the magical power values of the plants. The third line contains P, the number of queries. The next P lines each contain two space-separated integers l and r as mentioned above. Output Format P lines - each containing an integer for the required query. Constraints 1 ≤ N, P ≤ 100000 0 ≤ l ≤ r ≤ N-1 The forest uses 0-based indexing, meaning that l and r range from 0 to N-1 Author: Zylo\'s Botanist SAMPLE INPUT 10 5 8 6 3 4 7 2 9 1 10 3 1 3 4 6 0 9 SAMPLE OUTPUT 17 13 55 Explanation In the first query, the sum of the magical power values of the plants from index 1 to 3 is 8 + 6 + 3 = 17. In the second query, the sum of the magical power values of the plants from index 4 to 6 is 4 + 7 + 2 = 13. In the third query, the sum of the magical power values of the plants from index 0 to 9 is the sum of all elements, which is 55.","solution":"def sum_of_magnetic_power_values(N, power_values, P, queries): Returns the sum of the magical power values for plants within given ranges. Parameters: N (int): Number of types of plants. power_values (List[int]): List of magical power values for each type of plant. P (int): Number of queries. queries (List[Tuple[int, int]]): List of tuples representing the start and end indices (inclusive) for each query. Returns: List[int]: List of results for each query. # Precompute prefix sums prefix_sums = [0] * (N + 1) for i in range(N): prefix_sums[i + 1] = prefix_sums[i] + power_values[i] # Compute the results for each query results = [] for l, r in queries: sum_value = prefix_sums[r + 1] - prefix_sums[l] results.append(sum_value) return results"},{"question":"Zuzeland is a unique city consisting of n districts and n-1 connecting roads. Each road connects two distinct districts and there exists exactly one path between any pair of districts, forming a tree structure. To maintain the infrastructure, the city is planning to install streetlights along some of these roads. A streetlight on a road provides light to both districts connected by that road. The city\'s objective is to ensure that at least m districts are illuminated by streetlights while minimizing the number of streetlights installed. Determine the minimum number of streetlights required and the roads on which they should be installed to meet the city\'s lighting needs. # Input - The first line contains two integers n and m (2 ≤ n ≤ 200000, 1 ≤ m ≤ n) — the number of districts and the minimum number of districts that need to be illuminated. - The following n-1 lines contain roads, one road per line. Each line contains two integers x_i and y_i (1 ≤ x_i, y_i ≤ n), where x_i and y_i are districts connected by the i-th road. # Output - In the first line, print the required minimal number of streetlights. - In the second line, print the indices of the roads on which the streetlights should be installed, in any order. If there are multiple answers, print any of them. # Examples Input ``` 5 3 1 2 1 3 2 4 2 5 ``` Output ``` 2 1 2 ``` Input ``` 7 4 1 2 1 3 3 4 3 5 4 6 4 7 ``` Output ``` 2 3 4 ``` Input ``` 4 2 1 2 1 3 2 4 ``` Output ``` 1 1 ```","solution":"def find_minimum_streetlights(n, m, roads): Determines the minimum number of streetlights required and the roads on which they should be installed to ensure at least m districts are illuminated. :param n: int - number of districts :param m: int - minimum number of districts that need to be illuminated :param roads: List[Tuple[int, int]] - List of tuples representing roads between districts :return: (int, List[int]) - number of streetlights required and list of road indices # Simple and optimal strategy for this tree structure is to simply put streetlights at m-1 edges num_streetlights = m - 1 # We take the first m-1 roads (1-indexed) road_indices = list(range(1, m)) return num_streetlights, road_indices # Example usage n = 5 m = 3 roads = [(1, 2), (1, 3), (2, 4), (2, 5)] num_streetlights, road_indices = find_minimum_streetlights(n, m, roads) print(num_streetlights) print(road_indices)"},{"question":"Grace is learning about sequences of numbers where each term is derived from the previous terms in a specific manner. She came across a type of sequence called the \\"Look-and-Say\\" sequence and wants to write a program to generate it. In a Look-and-Say sequence, each term is constructed by reading off the digits of the previous term, counting the number of digits in groups of the same digit. For example, the starting term is \\"1\\". The next term is generated by reading this as \\"one 1\\", hence \\"11\\". The next term is \\"21\\" (two 1s), then \\"1211\\" (one 2 followed by one 1), and so on. Your task is to help Grace by writing a program to generate the nth term of the Look-and-Say sequence given a starting term. Input The input file contains a single line with an integer n (1 ≤ n ≤ 25) which represents the position in the Look-and-Say sequence for which the term is to be generated. Output Output a single line which is the nth term of the Look-and-Say sequence starting from \\"1\\". Example Input 5 Output 111221 Explanation The sequence starts with \\"1\\", and the first five terms are: 1. 1 (the starting term) 2. 11 (\\"one 1\\") 3. 21 (\\"two 1s\\") 4. 1211 (\\"one 2, then one 1\\") 5. 111221 (\\"one 1, then one 2, then two 1s\\") The 5th term is \\"111221\\".","solution":"def look_and_say(n): Generate the nth term in the Look-and-Say sequence starting from \\"1\\". if n == 1: return \\"1\\" term = \\"1\\" for _ in range(1, n): next_term = \\"\\" i = 0 while i < len(term): count = 1 while i + 1 < len(term) and term[i] == term[i + 1]: i += 1 count += 1 next_term += str(count) + term[i] i += 1 term = next_term return term"},{"question":"You have been assigned a task to help an archaeologist decipher an ancient manuscript. The manuscript contains lines of text, each consisting of Roman numerals. Your job is to write a function that converts a given Roman numeral into its decimal (integer) form. Roman numerals are represented by the following symbols: - I = 1 - V = 5 - X = 10 - L = 50 - C = 100 - D = 500 - M = 1000 There are some additional rules for forming numbers with Roman numerals: - If smaller numbers precede larger numbers, they are subtracted. For example: IV = 4, IX = 9. - If a numeral is repeated, it is added up. For example: III = 3, XX = 20. - The numerals should form a valid Roman numeral. Your function should read multiple lines of input, each containing a single Roman numeral. For each numeral, print the corresponding integer value. Input The first line contains an integer t (1 ≤ t ≤ 100), the number of test cases. The next t lines each contain a single Roman numeral s (1 ≤ |s| ≤ 15), where |s| is the length of the Roman numeral. Output For each test case, output the corresponding integer value on a new line. Example Input 5 III IV IX LVIII MCMXCIV Output 3 4 9 58 1994 Note In the first test case, the Roman numeral III represents the number 3. In the second test case, IV represents the number 4 by subtracting 1 from 5. In the third test case, IX represents the number 9 by subtracting 1 from 10. In the fourth test case, LVIII represents 50 + 5 + 3 = 58. In the fifth test case, MCMXCIV represents 1000 + (1000 - 100) + (100 - 10) + (5 - 1) = 1994.","solution":"def roman_to_integer(roman): # Dictionary to hold Roman numeral values values = {\'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000} total = 0 prev_value = 0 # Iterate over the Roman numeral from right to left for char in reversed(roman): current_value = values[char] # If the current value is less than the previous value, subtract it from total if current_value < prev_value: total -= current_value else: total += current_value prev_value = current_value return total"},{"question":"A box of chocolates has N different types of chocolates. You can either eat exactly one type of chocolate or give away all remaining chocolates of exactly one type to your friends. How many different ways can you distribute or eat all chocolates so that no type of chocolate remains in the box after the distribution? Input: The first line contains the number of test cases T. The following T lines each contain a single integer N, which denotes the number of different types of chocolates. Output: For each test case, print the total number of ways modulo 10^5. Constraints: 1 <= T <= 1000 1 <= N <= 10^4 Example: Input: 2 1 2 Output: 1 3 Explanation: Case 1: With 1 type of chocolate, there is only 1 way to either eat or give away all chocolates. Case 2: With 2 types of chocolates, the possible ways are: - Eat type 1 then type 2 - Eat type 2 then type 1 - Give away all chocolates of either type 1 or type 2","solution":"def count_ways_to_distribute(N): Returns the number of distinct ways to distribute or eat all chocolates, so that no type of chocolate remains in the box after the distribution. The result is taken modulo 10^5. ways = 2 ** N - 1 return ways % 100000 def process_test_cases(T, test_cases): results = [] for i in range(T): N = test_cases[i] results.append(count_ways_to_distribute(N)) return results"},{"question":"In a remote village, there are n houses located on a straight line. Each house has a certain amount of gold coins stored in it. A thief wants to rob these houses, but there are some constraints: - The thief cannot rob two adjacent houses (it must skip at least one house between them). Given an array of non-negative integers representing the amount of gold coins in each house, determine the maximum amount of gold coins the thief can rob without alerting the villagers. You need to write a function `maxGoldRobbed` that takes an array of integers as input and returns the maximum amount of gold coins the thief can rob. Function Signature: ```python def maxGoldRobbed(coins: List[int]) -> int: ``` # Input - An integer n (1 ≤ n ≤ 100,000) representing the number of houses. - An array of n integers where each integer ai (0 ≤ ai ≤ 10,000) represents the amount of gold coins in each house. # Output - Return an integer representing the maximum amount of gold coins the thief can rob. # Example Example 1 Input: ``` n = 5 coins = [2, 7, 9, 3, 1] ``` Output: ``` 12 ``` Explanation: - Robbing houses with gold amounts [2, 9, 1] gives the maximum amount of 12 coins. Example 2 Input: ``` n = 4 coins = [3, 2, 5, 10] ``` Output: ``` 13 ``` Explanation: - Robbing houses with gold amounts [3, 10] gives the maximum amount of 13 coins. # Note You must solve the problem with a time complexity of O(n).","solution":"from typing import List def maxGoldRobbed(coins: List[int]) -> int: # Edge case when there are no houses if not coins: return 0 # Edge case when there is only one house elif len(coins) == 1: return coins[0] n = len(coins) # dp array to store the maximum gold robbed up to house i dp = [0] * n # Base cases dp[0] = coins[0] dp[1] = max(coins[0], coins[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + coins[i]) return dp[-1]"},{"question":"A researcher in computational biology is analyzing a DNA sequence represented as a string consisting of the characters A, C, G, and T. He wants to find the length of the shortest segment of the string that contains all four characters at least once. Given a DNA sequence, help the researcher by writing a program to find the length of the shortest such segment. Input The input consists of a single line containing a DNA sequence s of length n (1 ≤ n ≤ 10^6) made up of the characters A, C, G, and T. Output Print a single integer — the length of the shortest segment of s that contains each of the characters A, C, G, and T at least once. If no such segment exists, print -1. Example Input ACGTACGTGCAAGT Output 4 Explanation The substring \\"ACGT\\" is the shortest segment that contains all four characters A, C, G, and T at least once. Input AAAAAAA Output -1 Explanation No substring contains all four characters A, C, G, and T at least once.","solution":"def shortest_segment_with_all_chars(s): Finds the length of the shortest segment of string s that contains all four characters A, C, G, and T at least once. Parameters: s (str): DNA sequence Returns: int: Length of the shortest segment or -1 if no such segment exists. required_chars = set(\\"ACGT\\") n = len(s) if len(required_chars.intersection(s)) < 4: return -1 min_length = float(\'inf\') left = 0 current_chars = {} for right in range(n): char = s[right] if char in required_chars: if char in current_chars: current_chars[char] += 1 else: current_chars[char] = 1 while len(current_chars) == 4: min_length = min(min_length, right - left + 1) if s[left] in current_chars: current_chars[s[left]] -= 1 if current_chars[s[left]] == 0: del current_chars[s[left]] left += 1 return min_length"},{"question":"In a distant land, there are N villages connected with M bidirectional roads. Each road has a different construction cost, and you need to find the minimum cost to connect all the villages such that every village is reachable from every other village. Your task is to find the minimum cost required to construct the roads to make all the villages interconnected. Constraints * 1 le N le 10^5 * N-1 le M le 2 times 10^5 * 1 le cost of each road le 10^6 Input Input is given from Standard Input in the following format: ``` N M u_1 v_1 cost_1 u_2 v_2 cost_2 ... u_M v_M cost_M ``` Where u_i and v_i are the endpoints of the i-th road and cost_i is the cost to construct the i-th road. Output Print the minimum cost to connect all the villages. If it\'s impossible to connect all the villages, print -1. Examples Input ``` 4 5 1 2 1 1 3 4 2 3 2 3 4 3 4 1 6 ``` Output ``` 6 ``` Input ``` 3 3 1 2 1 2 3 2 1 3 4 ``` Output ``` 3 ``` Input ``` 4 2 1 2 1 3 4 2 ``` Output ``` -1 ```","solution":"def find(parent, x): if parent[x] != x: parent[x] = find(parent, parent[x]) return parent[x] def union(parent, rank, x, y): rootX = find(parent, x) rootY = find(parent, y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 def minimum_cost_to_connect_villages(n, m, roads): if n == 1: return 0 parent = list(range(n + 1)) rank = [0] * (n + 1) roads.sort(key=lambda x: x[2]) total_cost = 0 edges_used = 0 for u, v, cost in roads: if find(parent, u) != find(parent, v): union(parent, rank, u, v) total_cost += cost edges_used += 1 if edges_used == n - 1: return total_cost return -1 def process_input(input_text): input_lines = input_text.strip().split(\'n\') n, m = map(int, input_lines[0].split()) roads = [] for line in input_lines[1:]: u, v, cost = map(int, line.split()) roads.append((u, v, cost)) return n, m, roads if __name__ == \\"__main__\\": import sys input_text = sys.stdin.read() n, m, roads = process_input(input_text) print(minimum_cost_to_connect_villages(n, m, roads))"},{"question":"You are given a grid of non-negative integers representing heights of various terrain in a 2D matrix. Each cell in the matrix represents the height at that point. You need to find the perimeter of an island, where 1 represents land and 0 represents water. The island loops back onto itself and does not touch the boundaries of the grid. Assume that all cells containing 1 form one single island. Input The first line contains two integers m and n, the number of rows and columns of the matrix (1 ≤ m, n ≤ 100). Each of the next m lines contains n integers, each either 0 or 1. Output Print the perimeter of the island. Examples Input 4 4 0 1 0 0 1 1 1 0 0 1 0 0 0 0 0 0 Output 12 Input 5 5 0 0 0 0 0 0 1 1 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 Output 8","solution":"def island_perimeter(grid): Returns the perimeter of the island in the given grid. rows = len(grid) cols = len(grid[0]) perimeter = 0 for r in range(rows): for c in range(cols): if grid[r][c] == 1: # Assume each land cell contributes 4 to perimeter initially perimeter += 4 # Subtract for each adjacent land cell if r > 0 and grid[r-1][c] == 1: # Check cell above perimeter -= 2 if c > 0 and grid[r][c-1] == 1: # Check cell to the left perimeter -= 2 return perimeter"},{"question":"One day, the king decided to organize a contest in his kingdom. Each participant in the contest is given a unique positive integer ID. The king wants to reward the participants based on how special their ID is. An ID is considered special if the number of 1s in its binary representation is a prime number. Your task is to determine the number of participants with special IDs from a given range [L, R]. Input: The first line contains T, the number of test cases. Then, T lines follow. Each line contains two integers L and R. Output: For each test case, print the number of special IDs in the range [L, R]. Constraints: 1 ≤ T ≤ 10 1 ≤ L ≤ R ≤ 10^6 SAMPLE INPUT 2 5 10 11 15 SAMPLE OUTPUT 4 2 Explanation: For the first test case [5, 10]: - 5 in binary is 101 (number of 1s is 2, which is prime) - 6 in binary is 110 (number of 1s is 2, which is prime) - 7 in binary is 111 (number of 1s is 3, which is prime) - 8 in binary is 1000 (number of 1s is 1, which is not prime) - 9 in binary is 1001 (number of 1s is 2, which is prime) - 10 in binary is 1010 (number of 1s is 2, which is prime) Hence, the special IDs are 5, 6, 7, 9, and 10. The count is 5. For the second test case [11, 15]: - 11 in binary is 1011 (number of 1s is 3, which is prime) - 12 in binary is 1100 (number of 1s is 2, which is prime) - 13 in binary is 1101 (number of 1s is 3, which is prime) - 14 in binary is 1110 (number of 1s is 3, which is prime) - 15 in binary is 1111 (number of 1s is 4, which is not prime) Hence, the special IDs are 11, 12, 13, and 14. The count is 4.","solution":"import math def is_prime(n): if n < 2: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(math.sqrt(n)) + 1, 2): if n % i == 0: return False return True def count_1s_in_binary(n): return bin(n).count(\'1\') def count_special_ids(L, R): special_count = 0 for i in range(L, R + 1): if is_prime(count_1s_in_binary(i)): special_count += 1 return special_count def special_ids_count_for_cases(test_cases): results = [] for L, R in test_cases: results.append(count_special_ids(L, R)) return results"},{"question":"Given a string `S`, we can write it as the concatenation of string `A`, string `B`, and string `C`, i.e., S = A + B + C. We are interested in the case where string `A` and `C` are reverses of each other and string `B` forms a palindrome by itself. Write a function that determines if `S` can be split into strings `A`, `B`, and `C` where the above condition holds. Input A single string `S` (1 ≤ |S| ≤ 100), consisting of lowercase English letters. Output Print \\"YES\\" if there exists such a split of `S`, otherwise print \\"NO\\". Examples Input abccba Output: YES Input abcdecba Output: NO Input aabcdefedcbaa Output: YES","solution":"def is_palindrome(s): return s == s[::-1] def can_be_split(S): n = len(S) for i in range(n): for j in range(i, n): A = S[:i] B = S[i:j+1] C = S[j+1:] if A == C[::-1] and is_palindrome(B): return \\"YES\\" return \\"NO\\""},{"question":"You are given an array of integers and a set of queries. Each query consists of two integers `L` and `R`, and your task is to determine the sum of the elements in the subarray defined by the indices `L` and `R` (inclusive). The queries are 1-based indexing. Input The first line contains two integers `n` and `q` — the length of the array and the number of queries (1 ≤ n, q ≤ 100,000). The second line contains `n` integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1,000) — the elements of the array. The next `q` lines each contain two integers `L` and `R` (1 ≤ L ≤ R ≤ n) — the bounds of the query. Output For each query, output the sum of the elements in the subarray defined by `L` and `R`. Examples Input 5 3 1 2 3 4 5 1 3 2 4 1 5 Output 6 9 15 Note In the first query, the sum of elements from index 1 to 3 is 1 + 2 + 3 = 6. In the second query, the sum of elements from index 2 to 4 is 2 + 3 + 4 = 9. In the third query, the sum of elements from index 1 to 5 is 1 + 2 + 3 + 4 + 5 = 15.","solution":"def subarray_sums(n, q, array, queries): This function returns the sum of subarrays defined by the queries. Parameters: - n (int): the length of the array - q (int): the number of queries - array (list of int): the list of integers - queries (list of tuples): each tuple contains two integers representing the bounds L and R of the subarray Returns: - list of int: the sum of each subarray defined by the queries # Precompute prefix sums prefix_sums = [0] * (n + 1) for i in range(n): prefix_sums[i + 1] = prefix_sums[i] + array[i] # Process each query results = [] for L, R in queries: subarray_sum = prefix_sums[R] - prefix_sums[L - 1] results.append(subarray_sum) return results"},{"question":"Swapping Words Alice and Bob are playing a word game. They are given two words `word1` and `word2` of equal length. Their goal is to transform `word1` into `word2` by swapping any two distinct characters of `word1`. A single swap involves choosing two different indices and exchanging the characters at these positions. Write a function: ```python def can_swap_to_match(word1: str, word2: str) -> bool: ``` that takes in two strings `word1` and `word2`, each consisting of lowercase letters and of equal length, and returns a boolean value: `True` if it\'s possible to transform `word1` into `word2` by making one or more swaps, and `False` otherwise. # Inputs: - `word1` (2 ≤ len(word1) ≤ 1000): A string consisting of lowercase English letters. - `word2` (2 ≤ len(word2) ≤ 1000): A string consisting of lowercase English letters, of the same length as `word1`. # Output: - Return `True` if it\'s possible to transform `word1` into `word2` through one or more swaps, otherwise return `False`. # Examples: Example 1: `input`: ```python word1 = \\"abcd\\" word2 = \\"dcba\\" ``` `output`: ```python True ``` `explanation`: ```plaintext We can transform \\"abcd\\" to \\"dcba\\" by swapping \'a\' with \'d\' and \'b\' with \'c\'. ``` Example 2: `input`: ```python word1 = \\"aabbcc\\" word2 = \\"bbaacc\\" ``` `output`: ```python True ``` `explanation`: ```plaintext We can transform \\"aabbcc\\" to \\"bbaacc\\" by swapping \'a\' with \'b\' twice. ``` Example 3: `input`: ```python word1 = \\"abc\\" word2 = \\"def\\" ``` `output`: ```python False ``` `explanation`: ```plaintext It\'s not possible to transform \\"abc\\" into \\"def\\" because they don\'t share any common characters for swapping. ``` # Note: Ensure to handle edge cases such as: - Characters in `word1` and `word2` that are in the same positions and identical. Example: `(\\"aabb\\", \\"abab\\")` - Situations where `word1` and `word2` are already the same. Example: `(\\"abcd\\", \\"abcd\\")`","solution":"def can_swap_to_match(word1: str, word2: str) -> bool: Determines if word1 can be transformed into word2 by swapping any two distinct characters of word1 any number of times. # If the sorted characters of word1 and word2 are the same, # they can be matched by swapping any number of times. return sorted(word1) == sorted(word2)"},{"question":"You have inherited an antique clock factory that is famous for producing a variety of clocks. Each clock consists of several cogs, and each cog has a specific number of teeth. In order for a clock to function properly, the arrangement of cogs must meet certain conditions based on the number of teeth on adjacent cogs. Your task is to determine if a specific arrangement of cogs will result in a properly functioning clock. The arrangement is determined to be proper if the difference in the number of teeth between each adjacent cog is either less than or equal to a given threshold. # Input The input consists of several test cases. Each test case is formatted as follows: - A single integer `N` (1 ≤ N ≤ 1000), representing the number of cogs in the clock. - A line containing `N` integers, where the i-th integer represents the number of teeth on the i-th cog. Each integer is in the range [1, 1000]. - A single integer `D` (0 ≤ D ≤ 1000), representing the maximum allowed difference in the number of teeth between any two adjacent cogs. The input is terminated by a line containing a single zero. This line should not be processed. # Output For each test case, print \\"FUNCTIONAL\\" if the arrangement of cogs meets the condition, or \\"NON-FUNCTIONAL\\" otherwise. # Example Input ``` 5 4 6 5 8 7 3 4 1 3 7 2 2 6 1 2 3 4 5 6 1 0 ``` Output ``` FUNCTIONAL NON-FUNCTIONAL FUNCTIONAL ``` # Explanation In the first test case: - The differences between adjacent cogs are 2, 1, 3, and 1 respectively. - All differences are less than or equal to the threshold value of 3, so the output is \\"FUNCTIONAL\\". In the second test case: - The differences between adjacent cogs are 2, 4, 5, and 5 respectively. - The differences 4 and 5 exceed the threshold value of 2, so the output is \\"NON-FUNCTIONAL\\". In the third test case: - The differences between adjacent cogs are all 1, which is less than or equal to the threshold value of 1, so the output is \\"FUNCTIONAL\\".","solution":"def determine_functionality(N, cogs, D): for i in range(N-1): if abs(cogs[i] - cogs[i+1]) > D: return \\"NON-FUNCTIONAL\\" return \\"FUNCTIONAL\\" def process_input(input_data): lines = input_data.strip().split(\'n\') index = 0 results = [] while index < len(lines): if lines[index] == \'0\': break N = int(lines[index]) cogs = list(map(int, lines[index + 1].split())) D = int(lines[index + 2]) results.append(determine_functionality(N, cogs, D)) index += 3 return results"},{"question":"Write a function that takes an integer array `arr` of length `n` and an integer `target` as input, and returns all unique quadruples `[arr[a], arr[b], arr[c], arr[d]]` such that their sum is equal to `target`. Constraints * 1 ≤ n ≤ 200 * -10^3 ≤ arr[i] ≤ 10^3 * -10^4 ≤ target ≤ 10^4 Input In the first line, an integer `n` is given denoting the length of the array. In the second line, n space-separated integers are given denoting the elements of the array. In the third line, an integer `target` is given. Examples Input 5 1 0 -1 0 -2 2 0 Output -1 -1 0 1 2 2 10 -1 0 0 1 2 Input 4 1 2 3 4 5 10 Output -1 1 2 3 4 Input 4 -1 -2 -3 -4 -5 -10 Output -1 -4 1 0 1","solution":"def four_sum(arr, target): Returns all unique quadruples [arr[a], arr[b], arr[c], arr[d]] such that their sum is equal to the target. arr.sort() n = len(arr) results = set() for i in range(n): for j in range(i + 1, n): left = j + 1 right = n - 1 while left < right: total = arr[i] + arr[j] + arr[left] + arr[right] if total == target: results.add((arr[i], arr[j], arr[left], arr[right])) left += 1 right -= 1 elif total < target: left += 1 else: right -= 1 return list(results)"},{"question":"Given an integer array `arr`, construct a function `longest_increasing_subsequence` that finds the length of the longest increasing subsequence in the array. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. For example, the subsequences of `[3, 10, 2, 1, 20]` are `[3]`, `[10]`, `[2]`, `[1]`, `[20]`, `[3, 10]`, `[3, 20]`, etc. An increasing subsequence is a subsequence in which each subsequent element is greater than the preceding one. **Function Signature:** ```python def longest_increasing_subsequence(arr: List[int]) -> int: ``` **Input:** - `arr`: A list of integers where 1 ≤ len(arr) ≤ 2000, and -10^4 ≤ arr[i] ≤ 10^4. **Output:** - An integer representing the length of the longest increasing subsequence in the array. **Example:** ```python assert longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) == 4 # The longest increasing subsequence is [2, 3, 7, 101], which has a length of 4. assert longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) == 4 # The longest increasing subsequence is [0, 1, 2, 3], which has a length of 4. assert longest_increasing_subsequence([7, 7, 7, 7, 7, 7, 7]) == 1 # The longest increasing subsequence is [7], which has a length of 1. ``` **Explanation:** 1. The function should handle arrays where elements are strictly increasing, strictly decreasing, or a mix of both. 2. The function must return the length of the longest increasing subsequence. 3. Ensure the implementation can handle the edge case where `arr` consists of a single element, returning a length of 1. Develop an efficient algorithm that has a reasonable time complexity given the constraints, preferably with a dynamic programming approach.","solution":"from typing import List def longest_increasing_subsequence(arr: List[int]) -> int: Returns the length of the longest increasing subsequence in the given array. n = len(arr) if n == 0: return 0 # Initialize the dp array, each element represents the length of LIS ending at that element dp = [1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"A classic problem in combinatorics is finding the number of ways to climb a staircase with a certain number of steps (n), given that you can only take 1 or 2 steps at a time. Your task is to write a program that calculates the number of distinct ways to climb to the top of a staircase with n steps. Constraints * 1 ≤ n ≤ 45 Input * An integer n, the number of steps in the staircase. Output * An integer representing the number of distinct ways to climb the staircase. Example Input 4 Output 5 Explanation There are five ways to climb the four-step staircase: 1. 1 step + 1 step + 1 step + 1 step 2. 1 step + 1 step + 2 steps 3. 1 step + 2 steps + 1 step 4. 2 steps + 1 step + 1 step 5. 2 steps + 2 steps","solution":"def climb_stairs(n): Calculates the number of distinct ways to climb a staircase with n steps, given that you can only take 1 or 2 steps at a time. if n <= 1: return 1 dp = [0] * (n + 1) dp[0] = dp[1] = 1 for i in range(2, n + 1): dp[i] = dp[i - 1] + dp[i - 2] return dp[n]"},{"question":"You are asked to schedule several events over a period of time. Each event has a start and end time, and a weight that represents its importance. Your goal is to maximize the total weight of the events you can attend, but you cannot be in two places at the same time, meaning the events cannot overlap. Write a program to find the maximum total weight of non-overlapping events that can be scheduled. Input: The first line contains an integer n (1 ≤ n ≤ 100000) — the number of events. Each of the next n lines contains three integers start, end, and weight (1 ≤ start < end ≤ 10^9, 1 ≤ weight ≤ 10^5) representing the start time, end time, and weight of the event respectively. Output: Print a single integer representing the maximum total weight of non-overlapping events. Example: Input: 3 1 3 4 2 5 3 4 6 2 Output: 6 Explanation: Attend the first event (start=1, end=3, weight=4) and the third event (start=4, end=6, weight=2). The second event overlaps with the first event, hence it cannot be scheduled simultaneously with the first event.","solution":"from bisect import bisect_right def find_max_weight(events): # Sort events by their end time to facilitate the choice of non-overlapping events events.sort(key=lambda x: x[1]) n = len(events) # dp[i] will store the maximum weight of non-overlapping events till the ith event dp = [0] * n # Store the weight of the first event dp[0] = events[0][2] for i in range(1, n): # Option 1: Exclude the current event weight_including_current = events[i][2] # Find the latest event that doesn\'t overlap with the current event j = bisect_right([events[k][1] for k in range(i)], events[i][0]) - 1 if j != -1: weight_including_current += dp[j] # Option 2: Exclude the current event dp[i] = max(dp[i-1], weight_including_current) return dp[-1] def process_input(input_string): input_data = input_string.strip().split(\'n\') n = int(input_data[0]) events = [tuple(map(int, line.split())) for line in input_data[1:]] return find_max_weight(events)"},{"question":"You are given a number `n` and you must generate the first `n` rows of Pascal\'s Triangle. Pascal\'s Triangle is a triangular array of numbers where the entries on the edges are always `1` and each number within the triangle is the sum of the two numbers directly above it. For example, the first six rows of Pascal\'s Triangle are: ``` 1 1 1 1 2 1 1 3 3 1 1 4 6 4 1 1 5 10 10 5 1 ``` Write a program that generates Pascal\'s Triangle up to the `n`th row and prints it. # Input The input consists of a single integer `n` (1 ≤ n ≤ 25). # Output Output each of the first `n` rows of Pascal\'s Triangle on a new line. The numbers in the rows should be separated by spaces. # Example Input ``` 5 ``` Output ``` 1 1 1 1 2 1 1 3 3 1 1 4 6 4 1 ```","solution":"def generate_pascals_triangle(n): Generate the first `n` rows of Pascal\'s Triangle. if n <= 0: return [] triangle = [[1]] for row_num in range(1, n): row = [1] prev_row = triangle[row_num - 1] for j in range(1, row_num): row.append(prev_row[j - 1] + prev_row[j]) row.append(1) triangle.append(row) return triangle def print_pascals_triangle(n): Print the first `n` rows of Pascal\'s Triangle. triangle = generate_pascals_triangle(n) for row in triangle: print(\\" \\".join(map(str, row)))"},{"question":"You are given a string `s` consisting of lowercase English letters. You are to perform a series of operations on this string. Each operation consists of the following two steps: 1. Select a non-empty substring of `s`. 2. Replace the selected substring with its reverse. Your task is to determine if it is possible to transform the string `s` into a palindrome using at most `k` operations. If it is possible, return the minimum number of operations required; otherwise, return -1. A palindrome is a string that reads the same forward and backward. Input - The first line contains an integer `t` (1 ≤ t ≤ 100) — the number of test cases. - Each of the next `t` lines contains a string `s` (1 ≤ |s| ≤ 100) and an integer `k` (1 ≤ k ≤ 100). Output - For each test case, print the minimum number of operations required to transform the string `s` into a palindrome. If it is not possible within `k` operations, print `-1`. Example Input ``` 3 abcba 1 ab 1 abcd 2 ``` Output ``` 0 1 2 ``` Explanation - For the first test case, the string `s` is already a palindrome, so no operations are needed. - For the second test case, reversing the substring \\"b\\" transforms \\"ab\\" into \\"ba\\", which is a palindrome. - For the third test case, reversing \\"bc\\" transforms \\"abcd\\" into \\"adcb\\". Then, reversing \\"adbca\\" (substrings \\"abc\\" and \\"dab\\" sequentially) or reversing the full string twice (e.g., \\"abcd\\" to \\"dcba\\" and \\"dcba\\" to \\"abcd\\") may be strategies, though both take 2 operations.","solution":"def min_operations_to_palindrome(s, k): Determines the minimum number of operations required to transform the string `s` into a palindrome using at most `k` operations. If it\'s not possible, returns -1. n = len(s) left, right = 0, n - 1 operations = 0 while left < right: if s[left] != s[right]: operations += 1 left += 1 right -= 1 if operations > k: return -1 return operations def solve(test_cases): results = [] for s, k in test_cases: results.append(min_operations_to_palindrome(s, int(k))) return results def main(): t = int(input().strip()) test_cases = [] for _ in range(t): s, k = input().strip().split() test_cases.append((s, k)) results = solve(test_cases) for result in results: print(result)"},{"question":"Create a function that takes an encoded string and encodes it using the run-length encoding (RLE) technique. For those who are not familiar, run-length encoding is a form of lossless data compression where runs of data are stored as a single data value and count. For example, the string \\"AABBBCCCC\\" would be encoded as \\"2A3B4C\\". This means that the input \\"AABBBCCCC\\" has two \'A\'s, followed by three \'B\'s, followed by four \'C\'s. You have to implement the encoding function. Your function should return the encoded string. Input The input is a single string that consists of uppercase Latin letters only. The length of the string does not exceed 100 characters. Output Output the run-length encoded string. Examples Input AABBCC Output 2A2B2C Input AAABCCCCDDE Output 3A1B4C2D1E Input HELLO Output 1H1E2L1O Note In the first example, the encoded output \\"2A2B2C\\" represents that the string contains two \'A\'s, followed by two \'B\'s, followed by two \'C\'s. In the second example, the encoded output \\"3A1B4C2D1E\\" represents that the string contains three \'A\'s, followed by one \'B\', followed by four \'C\'s, followed by two \'D\'s, followed by one \'E\'. In the third example, the encoded output \\"1H1E2L1O\\" represents that the string contains one \'H\', followed by one \'E\', followed by two \'L\'s, followed by one \'O\'.","solution":"def run_length_encoding(s): Encodes the given string using run-length encoding. if not s: return \\"\\" encoding = [] count = 1 current_char = s[0] for i in range(1, len(s)): if s[i] == current_char: count += 1 else: encoding.append(f\\"{count}{current_char}\\") current_char = s[i] count = 1 encoding.append(f\\"{count}{current_char}\\") return \'\'.join(encoding)"},{"question":"You are given N strings. You are also given M instructions, each instructing you to remove a particular string from the initial set of N strings. Your task is to find the number of unique strings remaining after applying all M instructions. Constraints * Each string consists of lowercase English letters. * The length of each string is between 1 and 100 (inclusive). * 1 leq N, M leq 1000 * Each instruction corresponds to exactly one of the initial strings. Input Input is given from Standard Input in the following format: N (string_1) (string_2) ... (string_N) M (instruction_1) (instruction_2) ... (instruction_M) Output Print a single integer: the number of unique strings remaining after all instructions have been applied. Examples Input 5 apple banana cherry date apple 3 apple cherry banana Output 1 Input 6 apple banana cherry date apple banana 4 apple date mango banana Output 1","solution":"def count_remaining_strings(N, strings, M, instructions): Count the number of unique strings remaining after applying the given instructions to remove certain strings. :param N: Total number of initial strings. :param strings: List of initial strings. :param M: Number of instructions. :param instructions: List of instructions to remove certain strings. :return: Number of unique strings remaining. unique_strings = set(strings) for instr in instructions: if instr in unique_strings: unique_strings.remove(instr) return len(unique_strings)"},{"question":"You are given a string consisting of lowercase alphabets and you are required to find the character with the highest frequency. If there are multiple characters with the same highest frequency, return the character that appears first in the string. Input It consists of a single line string consisting of only lowercase alphabets. Output A single character which has the highest frequency in the string. If there are ties, return the first appearing character with the highest frequency. Example Input: examplestring Output: e","solution":"def highest_frequency_char(s): Returns the character with the highest frequency in the given string. If there are multiple characters with same highest frequency, returns the first appearing such character. if not s: return \\"\\" frequency = {} max_freq = 0 max_char = \\"\\" for char in s: frequency[char] = frequency.get(char, 0) + 1 # Check if we have a new max frequency or # If current character has the same frequency but appeared first if frequency[char] > max_freq or (frequency[char] == max_freq and max_char == \\"\\"): max_freq = frequency[char] max_char = char return max_char"},{"question":"A sequence a_1, a_2, ..., a_n is called arithmetic progression if there exists a constant d such that for all i (1 ≤ i < n), the difference a_{i+1} - a_i = d. For example, sequence [3, 6, 9, 12] is an arithmetic progression with d = 3, and sequence [10, 7, 4, 1] is an arithmetic progression with d = -3. Given an integer array of length n, determine if it can be rearranged into an arithmetic progression. Input The first line contains the integer n (1 ≤ n ≤ 100000) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the array. Output Print \\"YES\\" (without quotes) if the array can be rearranged into an arithmetic progression, otherwise print \\"NO\\". Example Input 5 7 1 10 4 13 Output YES Explanation The array can be rearranged to form the arithmetic progression [1, 4, 7, 10, 13] with d = 3. Input 3 1 3 6 Output NO Explanation No rearrangement of the array can form an arithmetic progression.","solution":"def can_form_arithmetic_progression(n, arr): if n == 1: return \\"YES\\" arr.sort() common_diff = arr[1] - arr[0] for i in range(1, n - 1): if arr[i + 1] - arr[i] != common_diff: return \\"NO\\" return \\"YES\\""},{"question":"Given a class of students, each student has a preferred learning method indicated by an integer. Students with similar learning methods will form groups wherein they can effectively maximize their project performance. The project performance of a group is defined by subtracting two integers. You are asked to form groups such that the difference between the learning method of the student with the highest method and the lowest method in each group is minimized. You\'re allowed to have groups with 1-3 students. Input The first line of the input contains the number of test cases t. The next t lines consist of n followed by n integers representing the preferred learning methods of the students. Output Your output should be a single line containing the minimum possible difference in the learning methods for the formed groups for each test case. SAMPLE INPUT 2 5 1 4 3 7 8 6 2 2 2 2 2 2 SAMPLE OUTPUT 0 0 Explanation Input Constraints are 1 ≤ t ≤ 100 1 ≤ n ≤ 100 1 ≤ preferred learning method ≤ 10000","solution":"def minimize_learning_method_difference(test_cases): results = [] for methods in test_cases: methods.sort() min_diff = float(\'inf\') for i in range(len(methods) - 1): for j in range(i + 1, min(i + 4, len(methods))): diff = methods[j] - methods[i] min_diff = min(min_diff, diff) results.append(min_diff) return results def parse_input(input_string): lines = input_string.strip().split(\\"n\\") t = int(lines[0]) test_cases = [] for i in range(1, t + 1): n, *methods = map(int, lines[i].split()) test_cases.append(methods) return test_cases, t def format_output(results): return \\"n\\".join(map(str, results))"},{"question":"You are given a directed acyclic graph (DAG) with `n` nodes and `m` edges. The nodes are labeled with integers from 1 to n. Each node `i` has a value `v[i]` associated with it. Jzzhu wants to know the sum of values along the longest path in the graph. Help him by writing a program that computes this sum. Input The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 105), denoting the number of nodes and edges, respectively. The second line contains `n` integers `v[1], v[2], ..., v[n]` (1 ≤ v[i] ≤ 1000), representing the values of the nodes. The next `m` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n), representing a directed edge from node `u` to node `v`. Output Output a single integer denoting the sum of values along the longest path in the graph. Examples Input 5 6 1 2 3 4 5 1 2 2 3 3 4 1 3 4 5 2 4 Output 15 Input 4 3 5 3 6 2 1 2 2 3 3 4 Output 16 Input 3 2 3 2 1 1 2 2 3 Output 6","solution":"from collections import defaultdict, deque def longest_path_sum(n, m, values, edges): graph = defaultdict(list) indegree = [0] * (n + 1) for u, v in edges: graph[u].append(v) indegree[v] += 1 topological_order = [] queue = deque() for i in range(1, n + 1): if indegree[i] == 0: queue.append(i) while queue: node = queue.popleft() topological_order.append(node) for neighbor in graph[node]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) dp = [0] * (n + 1) for node in topological_order: dp[node] = max(dp[node], values[node - 1]) for neighbor in graph[node]: dp[neighbor] = max(dp[neighbor], dp[node] + values[neighbor - 1]) return max(dp) # Example usage: n = 5 m = 6 values = [1, 2, 3, 4, 5] edges = [(1, 2), (2, 3), (3, 4), (1, 3), (4, 5), (2, 4)] print(longest_path_sum(n, m, values, edges)) # Output: 15"},{"question":"You are given a list of integers representing the number of steps a robot takes. A positive integer indicates that the robot moves forward that many steps, whereas a negative integer indicates that the robot moves backward that many steps. Your task is to determine the final position of the robot relative to its starting point after executing all the steps in the list. Write a program that reads a series of integers and computes the final position of the robot. Input The input consists of a single line containing a space-separated list of integers. Each integer represents a step taken by the robot, and the list can contain between 1 and 1000 integers. Each integer is in the range from -1000 to 1000. Output Output a single integer indicating the final position of the robot. Example Input 10 -3 2 -4 8 Output 13","solution":"def final_robot_position(steps): This function calculates the final position of the robot after executing all steps in the list. Parameters: steps (list of int): A list of integers representing the steps taken by the robot. Returns: int: The final position of the robot. return sum(steps)"},{"question":"You are given a rectangular board consisting of n rows and m columns of cells. Each cell can either be empty or contain an obstacle. The goal is to determine the number of distinct paths from the top-left corner of the board to the bottom-right corner. You can only move either right or down when moving from one cell to another. However, if a cell contains an obstacle, you cannot move through it. Input The first line of input contains two integers, n and m (1 ≤ n, m ≤ 1000), denoting the number of rows and columns in the board, respectively. The next n lines each contain m characters, where each character is either \'.\' (representing an empty cell) or \'#\' (representing a cell with an obstacle). Output Print a single integer, the number of distinct paths modulo (10^9 + 7). Examples Input 3 3 ... .#. ... Output 2 Input 2 2 .. #. Output 1 Note In the first example, there are two distinct paths from the top-left corner to the bottom-right corner: 1. Right, Right, Down, Down 2. Down, Down, Right, Right In the second example, there is only one distinct path: 1. Right, Down The movement to a cell with an obstacle is not possible, so it restricts the paths accordingly.","solution":"def num_paths_with_obstacles(n, m, board): MOD = 10**9 + 7 dp = [[0] * m for _ in range(n)] if board[0][0] == \'#\' or board[n-1][m-1] == \'#\': return 0 dp[0][0] = 1 for i in range(n): for j in range(m): if board[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[n-1][m-1]"},{"question":"Given two strings `s1` and `s2`, the task is to transform `s1` into `s2` using the minimum number of operations. The allowed operations are: 1. Insert a character 2. Remove a character 3. Replace a character Your task is to implement a function that computes the number of such minimum operations required to convert `s1` into `s2`. Input: - The first line contains an integer `T`, the number of test cases. - Each of the next `T` lines contains two strings `s1` and `s2`. Output: - For each test case, output a single line containing the minimum number of operations required. Constraints: 1 ≤ T ≤ 100 1 ≤ |s1|, |s2| ≤ 1000 Both `s1` and `s2` consist of lowercase English letters. Example: Input: 2 horse ros intention execution Output: 3 5 In the first example, `horse` can be transformed into `ros` in three steps: 1. Replace \'h\' with \'r\' 2. Remove \'o\' 3. Remove \'e\' In the second example, `intention` can be transformed into `execution` in five steps: 1. Insert \'e\' at the start 2. Replace \'n\' with \'x\' 3. Replace \'t\' with \'c\' 4. Replace \'i\' with \'u\' 5. Insert \'o\' at the end","solution":"def min_operations(T, cases): def edit_distance(s1, s2): m, n = len(s1), len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], # Remove dp[i][j - 1], # Insert dp[i - 1][j - 1]) # Replace return dp[m][n] results = [] for s1, s2 in cases: results.append(edit_distance(s1, s2)) return results"},{"question":"Implement a Text Editor Undo Functionality You are tasked with writing a simple text editor that supports basic text editing operations and an undo feature. The editor should process a sequence of operations and print the state of the text after each operation. The supported operations are: 1. APPEND x: Append the string `x` to the end of the current text. 2. DELETE n: Delete the last `n` characters from the current text. 3. PRINT: Print the current state of the text. 4. UNDO: Undo the last append or delete operation and revert the text to its previous state. The operations are provided in a sequence, and the editor should process each in order while maintaining the functionality as described. **Input** The first line of the input contains an integer `Q` representing the number of operations (1 ≤ Q ≤ 100). Each of the following `Q` lines contains one of the four operations described above: - `APPEND x` (1 ≤ length of x ≤ 100) - `DELETE n` (1 ≤ n ≤ length of the current text) - `PRINT` - `UNDO` The `DELETE` operation will only be given if there are enough characters to delete, and the `UNDO` operation will only be given if there is an operation that can be undone. **Output** The output should include the current state of the text after each `PRINT` operation in the sequence. **Sample Input** 7 APPEND hello PRINT APPEND world PRINT DELETE 5 PRINT UNDO PRINT **Sample Output** hello helloworld hello helloworld **Explanation** 1. The first operation is `APPEND hello`, which makes the text \\"hello\\". 2. The second operation is `PRINT`, which outputs \\"hello\\". 3. The third operation is `APPEND world`, which makes the text \\"helloworld\\". 4. The fourth operation is `PRINT`, which outputs \\"helloworld\\". 5. The fifth operation is `DELETE 5`, which removes the last 5 characters, resulting in \\"hello\\". 6. The sixth operation is `PRINT`, which outputs \\"hello\\". 7. The seventh operation is `UNDO`, which reverts the text to \\"helloworld\\". 8. The eighth operation is `PRINT`, which outputs the reverted text \\"helloworld\\".","solution":"class TextEditor: def __init__(self): self.text = \\"\\" self.history = [] def append(self, x): # Save the current state to history before appending self.history.append(self.text) self.text += x def delete(self, n): # Save the current state to history before deleting self.history.append(self.text) self.text = self.text[:-n] def print_text(self): print(self.text) def undo(self): # Revert to the last state in history if available if self.history: self.text = self.history.pop() def process_operations(operations): editor = TextEditor() for operation in operations: parts = operation.split() cmd = parts[0] if cmd == \\"APPEND\\": editor.append(\\" \\".join(parts[1:])) elif cmd == \\"DELETE\\": editor.delete(int(parts[1])) elif cmd == \\"PRINT\\": editor.print_text() elif cmd == \\"UNDO\\": editor.undo() if __name__ == \\"__main__\\": # Sample input processing for demonstration Q = int(input()) operations = [input().strip() for _ in range(Q)] process_operations(operations)"},{"question":"You are an avid reader and you have decided to organize your book collection. Each of your books is described by its weight and its value, and you wish to select some of these books to display on your bookshelf. You have a condition for the aesthetics of your bookshelf: you want the total weight of the selected books to be as close as possible to a given value W. In case multiple selections have the same total weight deviation from W, you would like to maximize the total value of the selected books. Given the number of books to choose from and the weight and value of each book, determine the total value of the selection that minimizes the weight deviation from W, and if there are ties, the selection that maximizes the total value. # Task Given the number of books and their respective weights and values, as well as the target weight W, find the maximum total value of the selected books such that their total weight is as close as possible to W. # Input Read the following input from the standard input: - The first line contains two integers N and W, where N is the number of books and W is the target total weight. - In the following N lines, each line contains two integers A_i and B_i, where A_i is the weight and B_i is the value of the i-th book. # Output Output the maximum total value of the selected books such that their total weight deviates the least from W. # Limits - All input data satisfy the following conditions: - 1 ≤ N ≤ 500 - 1 ≤ A_i ≤ 10^6 - 1 ≤ B_i ≤ 10^6 - 1 ≤ W ≤ 10^6 # Input Example ``` 5 100 20 40 50 100 30 60 10 20 60 80 ``` # Output Example ``` 200 ``` # Explanation In this example: - You can choose books with weights 50 and 30 first, summing weights to 80 which is close to 100 and gives a total value of 160. - However, choosing books with weights 30, 10, and 60 results in total weight 100 which deviates less and has the best value of 200.","solution":"def max_value_min_deviation(N, W, books): dp = [None] * (W + 1) dp[0] = 0 for weight, value in books: for current_weight in range(W, weight - 1, -1): if dp[current_weight - weight] is not None: if dp[current_weight] is None: dp[current_weight] = dp[current_weight - weight] + value else: dp[current_weight] = max(dp[current_weight], dp[current_weight - weight] + value) best_value = 0 for i in range(W + 1): if dp[i] is not None: best_value = max(best_value, dp[i]) return best_value"},{"question":"You are given a binary string s consisting of characters \'0\' and \'1\'. You need to determine the length of the longest contiguous subsequence of the string that contains an equal number of \'0\'s and \'1\'s. For example, for the string \\"11000111\\", the longest contiguous subsequence with an equal number of \'0\'s and \'1\'s is \\"100011\\", which has a length of 6. Input The first line contains one integer t (1 ≤ t ≤ 10) — the number of queries. Next t lines contain the description of queries: each line contains a binary string s (1 ≤ |s| ≤ 10^5). Output For each query, print one integer — the length of the longest contiguous subsequence of the corresponding string that contains an equal number of \'0\'s and \'1\'s. Example Input 3 11000111 10101 111000 Output 6 4 6","solution":"def longest_equal_subseq_length(s): Returns the length of the longest contiguous subsequence of the string `s` that contains an equal number of \'0\'s and \'1\'s. count_dict = {0: -1} max_length = count = 0 for i, char in enumerate(s): count += 1 if char == \'1\' else -1 if count in count_dict: max_length = max(max_length, i - count_dict[count]) else: count_dict[count] = i return max_length def process_queries(t, queries): return [longest_equal_subseq_length(query) for query in queries]"},{"question":"In a faraway land, there is a peculiar way of celebrating the New Year called the \\"Number Dance.\\" The Number Dance involves creating a special sequence of numbers based on a few rules. Given an initial number n, the sequence is generated as follows: 1. Start with the number n. 2. If the number is even, divide it by 2. 3. If the number is odd, multiply it by 3 and add 1. 4. Repeat the process with the new number to extend the sequence until you reach the number 1. Your task is to determine the length of the sequence generated from the starting number n, including the starting number and the number 1 at the end. Input The input is a single integer n (1 ≤ n ≤ 10^6) which is the starting number of the sequence. Output Output a single integer which is the length of the generated sequence. Examples Input 6 Output 9 Explanation The sequence starting from 6 is: 6, 3, 10, 5, 16, 8, 4, 2, 1. The length of this sequence is 9. Input 1 Output 1 Explanation The sequence starting from 1 is: 1. The length of this sequence is 1.","solution":"def number_dance_sequence_length(n): Returns the length of the sequence generated by the Number Dance starting from n. length = 1 while n != 1: if n % 2 == 0: n //= 2 else: n = 3 * n + 1 length += 1 return length"},{"question":"John has a bank account with an initial balance of zero, and he performs several operations on it during the day. Each operation is either a deposit or a withdrawal. However, his bank doesn\'t allow the balance to fall below zero at any time. Given a sequence of operations, determine the status of the account. Input The first line contains a single integer n (1 ≤ n ≤ 100), the number of operations. Each of the next n lines contains a single operation in one of the following forms: - \\"+x\\": a deposit of x units (1 ≤ x ≤ 100) - \\"-x\\": a withdrawal of x units (1 ≤ x ≤ 100) Output If the account balance never falls below zero during the operations, print the final balance. If at any point the balance would fall below zero, print \\"Error\\". Examples Input 3 +10 -5 +15 Output 20 Input 4 +5 -10 +20 -7 Output Error","solution":"def manage_account(operations): Determines the final status of John\'s bank account. Parameters: operations (list of str): List of operations, where each operation is in the form \'+x\' or \'-x\'. Returns: int or str: Final balance if valid, otherwise \\"Error\\". balance = 0 for operation in operations: amount = int(operation[1:]) if operation[0] == \'+\': balance += amount elif operation[0] == \'-\': if balance < amount: return \\"Error\\" balance -= amount return balance"},{"question":"Given a singly linked list of integers, your task is to write a function that reverses the nodes of the list `k` at a time and returns the modified list. The input to the function will be a linked list and an integer k. The function should reverse the nodes of the linked list `k` at a time and return the modified list. If the number of nodes is not a multiple of `k` then left-out nodes in the end should remain as it is. You are required to use the following structure for a node in the singly linked list: ```python class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next ``` # Function Signature ```python def reverseKGroup(head: ListNode, k: int) -> ListNode: ``` # Input - `head`: The head of the singly linked list. - `k`: An integer representing the number of nodes to reverse at a time. # Output - Return the head of the modified list after reversing the nodes `k` at a time. # Constraints - The length of the list is a non-negative integer. - 0 <= k <= list length. - ListNode values are between -1000 and 1000. # Example Example 1 # Input The linked list: 1 -> 2 -> 3 -> 4 -> 5, `k = 2` # Output The modified linked list: 2 -> 1 -> 4 -> 3 -> 5 Example 2 # Input The linked list: 1 -> 2 -> 3 -> 4 -> 5, `k = 3` # Output The modified linked list: 3 -> 2 -> 1 -> 4 -> 5 Explanation - In the first example, reversing `k=2` nodes, the linked list becomes: `2 -> 1 -> 4 -> 3 -> 5`. - In the second example, reversing `k=3` nodes, the linked list becomes: `3 -> 2 -> 1 -> 4 -> 5`. *Note*: You may not alter the values in the nodes, only the nodes themselves may be changed.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverseKGroup(head: ListNode, k: int) -> ListNode: if head is None or k <= 1: return head def reverse(sub_head, k): prev = None curr = sub_head for _ in range(k): if not curr: return sub_head, None # Not enough nodes to reverse curr = curr.next curr = sub_head for _ in range(k): next_node = curr.next curr.next = prev prev = curr curr = next_node return prev, curr dummy = ListNode(0) dummy.next = head prev_group_end = dummy while head: group_end = head for _ in range(k - 1): group_end = group_end and group_end.next if not group_end: break next_head = group_end.next group_end.next = None reversed_head, reversed_tail = reverse(head, k) prev_group_end.next = reversed_head head.next = next_head prev_group_end = head head = next_head return dummy.next"},{"question":"You are given a grid with N rows and M columns, where each cell contains a non-negative integer value representing the elevation of that cell. You want to determine the minimum effort required to traverse from the top-left cell (1,1) to the bottom-right cell (N,M). The effort is defined as the maximum absolute difference in elevation between two consecutive cells in your path. You can only move up, down, left, or right. Constraints: * 1 leq N, M leq 100 * 0 leq elevation of each cell ≤ 10^6 Input: The input is given from Standard Input in the following format: N M grid[1][1] grid[1][2] ... grid[1][M] grid[2][1] grid[2][2] ... grid[2][M] ... grid[N][1] grid[N][2] ... grid[N][M] Output: Print the minimum effort required to traverse from the top-left cell to the bottom-right cell. Example: Input: 3 3 1 2 2 3 8 2 5 3 5 Output: 2 Explanation: The path with the minimum effort is 1 -> 2 -> 2 -> 2 -> 5. The largest difference in consecutive elevations is |3-1| = 2. Input: 4 5 1 2 2 1 2 1 2 3 1 1 4 3 2 1 1 5 3 1 2 1 Output: 1 Explanation: The path with the minimum effort is 1 -> 2 -> 2 -> 1 -> 1 -> 1 -> 1 -> 2 -> 1. The largest difference in consecutive elevations is |2-3| = 1.","solution":"import heapq def min_effort_path(grid): def neighbors(x, y): for nx, ny in [(x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1)]: if 0 <= nx < N and 0 <= ny < M: yield nx, ny N, M = len(grid), len(grid[0]) pq = [(0, 0, 0)] # (effort, x, y) efforts = {(0, 0): 0} while pq: effort, x, y = heapq.heappop(pq) if (x, y) == (N-1, M-1): return effort for nx, ny in neighbors(x, y): new_effort = max(effort, abs(grid[nx][ny] - grid[x][y])) if (nx, ny) not in efforts or new_effort < efforts[(nx, ny)]: efforts[(nx, ny)] = new_effort heapq.heappush(pq, (new_effort, nx, ny)) def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) grid = [] index = 2 for i in range(N): grid.append([int(data[j]) for j in range(index, index + M)]) index += M result = min_effort_path(grid) print(result) if __name__ == \\"__main__\\": main()"},{"question":"Love babysitting and good with fractions? Well, here\'s a problem for you. John just got hired as a nanny and he has 3 kids to take care of: Alice, Bob, and Charlie. They each have a different cycle for when they need their naps. John noted down the nap intervals for each of the kids and now wants to find out when will they all have their naps simultaneously so that he can get a break. Given that each kid has a different napping interval, and that they all start their naps at the same time, your task is to find out the earliest time when all three kids will take their naps together again. For example, if Alice naps every 3 hours, Bob every 5 hours, and Charlie every 7 hours, they will all have their naps together again at 105 hours. INPUT The input consists of a single line containing 3 space-separated integers representing the napping intervals of Alice, Bob, and Charlie in hours. OUTPUT Output a single integer representing the earliest time (in hours) when all three kids will take their naps again simultaneously. CONSTRAINTS 1 ≤ Napping intervals ≤ 10^9 SAMPLE INPUT 3 5 7 SAMPLE OUTPUT 105","solution":"def find_earliest_nap_time(a, b, c): Returns the earliest time when all three kids will take their naps simultaneously. Args: a (int): Napping interval of Alice in hours. b (int): Napping interval of Bob in hours. c (int): Napping interval of Charlie in hours. Returns: int: Earliest time in hours when all three kids will nap together again. def gcd(x, y): while y: x, y = y, x % y return x def lcm(x, y): return x * y // gcd(x, y) # Find least common multiple of a, b, and c return lcm(lcm(a, b), c)"},{"question":"Bearland has recently discovered some mysterious artifacts that influence the inhabitants\' behaviors. Limak now has an artifact that attracts monsters from all directions towards a single point. However, the monsters will only move if there\'s a direct line to the artifact and no other monster blocks their path. There are `n` monsters in Bearland, and each of them is described by their coordinates (xi, yi). Limak can place the artifact at any point (ax, ay), but once chosen, it\'s fixed. A monster can only move towards the artifact if there is a straight, unobstructed line — vertically, horizontally, or diagonally — to the artifact. Calculate the number of monsters that will move towards the artifact if Limak chooses the optimal location for the artifact. Input The first line of the input contains an integer n (1 ≤ n ≤ 500), the number of monsters. The i-th of the next n lines contains two integers xi and yi ( - 109 ≤ xi, yi ≤ 109) — coordinates of the i-th monster. Output Print the maximum number of monsters that can move towards the artifact if Limak chooses the optimal location for the artifact. Examples Input 3 1 1 2 2 3 3 Output 3 Input 5 1 1 1 2 2 2 2 3 3 3 Output 3 Note In the first sample, all three monsters can move to any (xi, yi) position on the line they belong to since they form a diagonal line and there are no other monsters blocking their path. Thus the answer is 3. In the second sample, the optimal artifact placement might be in such a way that it attracts the maximum clustered points along an unobstructed line. The best placement could be (2,2), resulting in three monsters moving towards it.","solution":"from collections import defaultdict from math import gcd def max_monsters_towards_artifact(n, coordinates): if n == 1: return 1 max_count = 0 for i in range(n): direction_count = defaultdict(int) same_position_count = 1 for j in range(n): if i != j: dx, dy = coordinates[j][0] - coordinates[i][0], coordinates[j][1] - coordinates[i][1] if dx == 0 and dy == 0: same_position_count += 1 else: g = gcd(dx, dy) direction_count[(dx // g, dy // g)] += 1 max_direction_count = max(direction_count.values(), default=0) max_count = max(max_count, max_direction_count + same_position_count) return max_count"},{"question":"A company wants to enhance its customer support by categorizing text-based support tickets. Each ticket contains a subject line and a body of text. Your task is to write a function that takes a list of support tickets and categorizes each ticket based on the following keywords: - \\"refund\\" or \\"money\\" should categorize the ticket as \\"Billing\\". - \\"account\\" or \\"login\\" should categorize the ticket as \\"Account\\". - \\"crash\\" or \\"error\\" should categorize the ticket as \\"Technical\\". - If a ticket does not contain any of the above keywords, it should be categorized as \\"General\\". Your function should take a list of dictionaries, where each dictionary represents a support ticket with a \\"subject\\" and \\"body\\" key. The function should return a new list of dictionaries, where each dictionary includes the original support ticket with an additional \\"category\\" key indicating the ticket’s category. Function Signature: `def categorize_tickets(tickets: List[Dict[str, str]]) -> List[Dict[str, str]]:` # Input - `tickets`: a list of dictionaries, where each dictionary contains: - `\\"subject\\"`: a string representing the subject of the ticket. - `\\"body\\"`: a string representing the body of the ticket. # Output - A list of dictionaries, where each dictionary includes the original ticket data along with an additional `\\"category\\"` key. # Examples ```python tickets = [ {\\"subject\\": \\"Refund Request\\", \\"body\\": \\"I want to get my money back for an order I placed.\\"}, {\\"subject\\": \\"Login Error\\", \\"body\\": \\"I cannot log into my account.\\"}, {\\"subject\\": \\"Application Crashed\\", \\"body\\": \\"The app crashes whenever I try to open it.\\"}, {\\"subject\\": \\"Other Issue\\", \\"body\\": \\"I have an unrelated question.\\"} ] output = categorize_tickets(tickets) print(output) ``` # Expected Output ```python [ {\\"subject\\": \\"Refund Request\\", \\"body\\": \\"I want to get my money back for an order I placed.\\", \\"category\\": \\"Billing\\"}, {\\"subject\\": \\"Login Error\\", \\"body\\": \\"I cannot log into my account.\\", \\"category\\": \\"Account\\"}, {\\"subject\\": \\"Application Crashed\\", \\"body\\": \\"The app crashes whenever I try to open it.\\", \\"category\\": \\"Technical\\"}, {\\"subject\\": \\"Other Issue\\", \\"body\\": \\"I have an unrelated question.\\", \\"category\\": \\"General\\"} ] ``` # Notes - Your function should be case insensitive when checking for keywords. - You can assume that the subject and body of each ticket will only contain alphabetic characters and spaces. - The order of the tickets in the output list should be the same as in the input list. - You should avoid categorizing a single ticket under multiple categories. If a ticket contains keywords from multiple categories, use the following priority: \\"Billing\\" > \\"Account\\" > \\"Technical\\". For example, if a ticket contains keywords for both \\"Billing\\" and \\"Account\\", categorize it as \\"Billing\\".","solution":"def categorize_tickets(tickets): Categorizes each support ticket based on specific keywords. Arguments: tickets (list): A list of dictionaries where each dictionary has \'subject\' and \'body\' keys. Returns: list: A new list of dictionaries where each dictionary includes the original support ticket with an additional \'category\' key. categories = { \\"Billing\\": [\\"refund\\", \\"money\\"], \\"Account\\": [\\"account\\", \\"login\\"], \\"Technical\\": [\\"crash\\", \\"error\\"] } def get_category(ticket): subject_body = (ticket[\\"subject\\"] + \\" \\" + ticket[\\"body\\"]).lower() if any(keyword in subject_body for keyword in categories[\\"Billing\\"]): return \\"Billing\\" elif any(keyword in subject_body for keyword in categories[\\"Account\\"]): return \\"Account\\" elif any(keyword in subject_body for keyword in categories[\\"Technical\\"]): return \\"Technical\\" else: return \\"General\\" categorized_tickets = [] for ticket in tickets: category = get_category(ticket) categorized_ticket = ticket.copy() categorized_ticket[\\"category\\"] = category categorized_tickets.append(categorized_ticket) return categorized_tickets"},{"question":"Ursula is a baker who prepares a variety of cakes every day. She arranges the cakes in a row in her bakery. Each cake has a different sweetness level, represented as an integer. Ursula wants to ensure that the cakes are arranged in such a way that every cake is sweeter than the cake before it. However, she can only swap two adjacent cakes at a time to achieve this arrangement. Your task is to help Ursula find out the minimum number of adjacent swaps she needs to make the sweetness levels of the cakes sorted in strictly increasing order. Input The first line contains an integer n (2 ≤ n ≤ 100000). The second line contains n integers s1, s2, ..., sn (1 ≤ si ≤ 100000), representing the sweetness levels of the cakes in the order they are currently arranged. Output Print a single integer representing the minimum number of adjacent swaps needed to sort the sweetness levels in strictly increasing order. Examples Input 4 3 2 1 4 Output 3 Input 5 1 5 4 3 2 Output 6 Input 3 1 2 3 Output 0","solution":"def minimum_adjacent_swaps_to_sort(sweetness): Returns the minimum number of adjacent swaps needed to sort the sweetness levels in strictly increasing order. def merge_and_count(arr, temp_arr, left, mid, right): i = left j = mid + 1 k = left inv_count = 0 while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: temp_arr[k] = arr[j] inv_count += (mid - i + 1) j += 1 k += 1 while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count def merge_sort_and_count(arr, temp_arr, left, right): inv_count = 0 if left < right: mid = (left + right)//2 inv_count += merge_sort_and_count(arr, temp_arr, left, mid) inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right) inv_count += merge_and_count(arr, temp_arr, left, mid, right) return inv_count n = len(sweetness) temp_arr = [0]*n return merge_sort_and_count(sweetness, temp_arr, 0, n-1)"},{"question":"Alice and Bob are playing a game with a sequence of n integers. They both take turns playing, starting with Alice. The rules of the game are as follows: - On each turn, a player must choose a non-empty subsequence of the sequence that is strictly decreasing. - The player then removes that subsequence from the sequence. A player loses if they cannot make a move on their turn, meaning if no strictly decreasing subsequence exists. Determine the winner of the game, assuming both players play optimally. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the length of the sequence. The next line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000), representing the sequence. Output Print \\"Alice\\" (without quotes) if Alice wins, otherwise print \\"Bob\\" (without quotes). Examples Input 5 5 3 4 2 1 Output Alice Input 4 1 2 3 4 Output Bob Note In the first example, Alice can initially choose the subsequence (5, 3, 2, 1), leaving Bob no moves, so Alice wins. In the second example, since the sequence is strictly increasing, no decreasing subsequences can be chosen initially. Hence, Alice loses immediately, and Bob wins.","solution":"def determine_winner(n, sequence): Determines the winner of the game based on the given sequence. Parameters: n (int): Length of the sequence. sequence (list): List of integers representing the sequence. Returns: str: \\"Alice\\" if Alice wins, otherwise \\"Bob\\". # Check if the sequence contains at least one decreasing pair for i in range(n - 1): if sequence[i] > sequence[i + 1]: return \\"Alice\\" # If there is no decreasing pair in the entire sequence return \\"Bob\\""},{"question":"Given a list of n integers, your task is to find and print the largest possible sum of a subsequence of the list where no two elements of the subsequence are consecutive in the original list. A subsequence is derived by deleting some or no elements from the list without changing the order of the remaining elements. Input The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the number of integers in the list. The second line contains the sequence of integers a1, a2, ..., an (-1000 ≤ ai ≤ 1000), where ai is the i-th integer in the list. Output Print one integer — the largest possible sum of a subsequence with the given conditions. Examples Input 5 3 2 5 10 7 Output 15 Input 4 3 2 7 10 Output 13 Note In the first sample, the optimal subsequence is: 3, 10, giving a sum of 15. In the second sample, the optimal subsequence is: 3, 10, giving a sum of 13.","solution":"def max_non_consecutive_sum(n, nums): Returns the largest possible sum of a subsequence where no two elements are consecutive. if n == 0: return 0 if n == 1: return max(0, nums[0]) incl = max(0, nums[0]) # Maximum sum that includes the current element excl = 0 # Maximum sum that doesn\'t include the current element for i in range(1, n): new_excl = max(incl, excl) incl = excl + nums[i] excl = new_excl return max(incl, excl)"},{"question":"Your company is working on an advanced search engine. As part of this project, one of the tasks is to implement a text compression algorithm using the Run-Length Encoding (RLE) technique to handle large text data efficiently. Run-Length Encoding is a simple form of data compression where consecutive occurrences of the same character are replaced by a single character followed by a count of repeats. If a character occurs consecutively 1 time, it should not be followed by a count. For example, the string \\"aaabbcccd\\" would be encoded as \\"a3b2c3d\\". Your task is to write a program that performs Run-Length Encoding on given strings. Input The input consists of a number of strings. The first line contains an integer n (1 ≤ n ≤ 100), the number of strings to process. The following n lines each contain a single string made up of lowercase English letters (a-z). Each string has a length of at most 1000 characters. Output For each input string, output its Run-Length Encoded form on a new line. Example Input 3 aabcccccaaa abcd aaabbbaaaacccddd Output a2bc5a3 abcd a3b3a4c3d3","solution":"def run_length_encode(s): Perform Run-Length Encoding on the given string. Args: s: The input string Returns: The Run-Length Encoded string if not s: return \\"\\" encoded_string = [] count = 1 previous_char = s[0] for char in s[1:]: if char == previous_char: count += 1 else: if count > 1: encoded_string.append(f\\"{previous_char}{count}\\") else: encoded_string.append(previous_char) previous_char = char count = 1 if count > 1: encoded_string.append(f\\"{previous_char}{count}\\") else: encoded_string.append(previous_char) return \'\'.join(encoded_string) def process_strings(strings): Process a list of strings with Run-Length Encoding Args: strings: List of input strings Returns: List of encoded strings return [run_length_encode(s) for s in strings]"},{"question":"You are given an integer `n`, where `1 <= n <= 10^6`. Your task is to find the sum of all prime numbers less than or equal to `n`. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Write a function `sum_of_primes(n)` that takes an integer `n` as input and returns the sum of all prime numbers less than or equal to `n`. Constraints 1 <= n <= 10^6 SAMPLE INPUT 10 SAMPLE OUTPUT 17 Explanation: The prime numbers less than or equal to 10 are 2, 3, 5, and 7. Their sum is 2 + 3 + 5 + 7 = 17.","solution":"def sum_of_primes(n): Returns the sum of all prime numbers less than or equal to n. Uses the Sieve of Eratosthenes algorithm for finding prime numbers efficiently. if n < 2: return 0 # Initialize a boolean array to detect prime numbers sieve = [True] * (n + 1) sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers for i in range(2, int(n**0.5) + 1): if sieve[i]: for j in range(i * i, n + 1, i): sieve[j] = False # Sum up the prime numbers prime_sum = sum(i for i, is_prime in enumerate(sieve) if is_prime) return prime_sum"},{"question":"You are developing a smartphone app for monitoring water levels in a reservoir. The reservoir has a specific capacity, and you need to ensure that the water level never exceeds this capacity to avoid overflow. Your task is to create a program that simulates the water level changes over a series of days. On each day, a certain amount of water may be added to or removed from the reservoir. You need to determine the highest water level recorded during this period, without exceeding the reservoir\'s capacity. If at any point the water level exceeds the capacity, the reservoir is considered to have overflowed, and you should return -1. Input The first line contains an integer T, the number of test cases. Each test case begins with a line containing two integers C and D, the capacity of the reservoir and the number of days, respectively. Then D lines follow, each with an integer W, representing the change in water level for that day (a positive value for water added, and a negative value for water removed). Output For each test case, output the highest water level observed without exceeding the reservoir\'s capacity. If the capacity is exceeded at any point, output -1. Examples Input 3 100 5 20 -10 30 40 -20 50 4 10 15 10 40 60 3 30 40 -10 Output 80 -1 60 Explanation In the first test case, the water levels for each day are: 20, 10, 40, 80, 60. The highest water level is 80, which does not exceed the capacity. In the second test case, the water levels for each day are: 10, 25, 35, 75. On the last day, the water level exceeds the capacity, so the output is -1. In the third test case, the water levels for each day are: 30, 70, 60. The highest water level is 70, which does not exceed the capacity. However, since it only slightly exceeds the capacity before it reduces but the final required comparisons revolves around capacity hence it is -1.","solution":"def water_level_monitoring(T, test_cases): results = [] for case in test_cases: C, D, changes = case current_level = 0 highest_level = 0 overflow = False for change in changes: current_level += change if current_level > C: overflow = True break highest_level = max(highest_level, current_level) if overflow: results.append(-1) else: results.append(highest_level) return results"},{"question":"Emilia\'s favorite pastime is solving mazes, especially ones with unique challenges. She recently stumbled upon an interesting problem in a maze game and needs your help to solve it. The maze is represented as a grid of characters, where each character can be either \'.\' (denoting an empty cell), \'#\' (denoting a wall), \'S\' (denoting the starting point), or \'E\' (denoting the exit). Emilia can move up, down, left, or right but cannot move through walls. Emilia also discovered a special rule: once she enters a cell marked with \'.\', it turns into a wall (\'#\'), meaning she cannot visit the same cell more than once during her journey. The task is to determine whether Emilia can reach the exit (\'E\') from the starting point \'S\' following the given rules. Input The first line contains two integers, n and m (1 ≤ n, m ≤ 500), the number of rows and columns in the grid respectively. The following n lines contain m characters each, representing the maze. It is guaranteed that there is exactly one \'S\' and one \'E\' in the maze. Output Output \\"Yes\\" if Emilia can reach the exit, otherwise, output \\"No\\". Examples Input 5 5 S.... .#. ...#. .#. ....E Output Yes Input 3 3 S#. .#E . Output No Input 4 4 S.#. .#.# .#.E Output No Note In the first test case, Emilia can reach the exit by following the path: down, right, right, down, left, down. In the second and third test cases, there is no possible path from \'S\' to \'E\' without violating the rules.","solution":"def can_reach_exit(n, m, maze): def dfs(x, y): # If out of bounds or cell is a wall or already visited, return False if x < 0 or x >= n or y < 0 or y >= m or maze[x][y] == \'#\': return False # If it\'s the exit, return True if maze[x][y] == \'E\': return True # Mark the current cell as visited by turning it into a wall maze[x][y] = \'#\' # Explore the 4 possible directions if dfs(x + 1, y) or dfs(x - 1, y) or dfs(x, y + 1) or dfs(x, y - 1): return True return False # Find the start point start_x, start_y = -1, -1 for i in range(n): for j in range(m): if maze[i][j] == \'S\': start_x, start_y = i, j break if start_x != -1: break # Start DFS from the starting point if dfs(start_x, start_y): return \\"Yes\\" else: return \\"No\\""},{"question":"You are given an `n x n` grid of characters, where each cell contains a lowercase English letter. Your task is to find the longest vertical or horizontal palindrome within the grid. A palindrome is a sequence that reads the same forwards and backwards. Input The first line contains an integer `n` (1 ≤ n ≤ 50), the size of the grid. The following `n` lines contain `n` lowercase English letters each, representing the grid. Output Print the length of the longest vertical or horizontal palindrome. If no palindrome is found, print 0. Examples Input 4 abba cdef ghij jiih Output 4 Input 5 abcba bcbcb cdedc bcbcb abcba Output 5 Input 3 abc def ghi Output 1 Explanation In the first example, the longest palindrome is \\"abba\\" found in the first row and \\"ii\\" found in the fourth row vertically. Thus, the length of the longest palindrome is 4. In the second example, the longest palindromes are \\"abcba\\" found in the first and fifth rows and \\"bcbcb\\" found in the second and fourth rows, all of length 5. In the third example, there are no palindromes longer than a single character, so the output is 1.","solution":"def longest_palindrome(grid): def is_palindrome(s): return s == s[::-1] n = len(grid) max_len = 1 # Check rows for row in grid: for start in range(n): for end in range(start + 1, n + 1): substring = row[start:end] if is_palindrome(substring): max_len = max(max_len, end - start) # Check columns for col in range(n): for start in range(n): for end in range(start + 1, n + 1): substring = \\"\\".join(grid[row][col] for row in range(start, end)) if is_palindrome(substring): max_len = max(max_len, end - start) return max_len"},{"question":"You are given an array of integers, where the i-th element of the array represents the height of a building. You want to place a flag on top of each building such that no two adjacent buildings have flags with the same color. You have an unlimited supply of colors to choose from. Your task is to determine the minimum number of unique colors needed to paint all the flags, subject to the constraint that no two adjacent buildings have flags with the same color. Input - The first line of input contains a single integer n (1 ≤ n ≤ 10^5), the number of buildings. - The second line contains n integers h_1, h_2, …, h_n (1 ≤ h_i ≤ 10^9), the heights of the buildings. Output - Print one integer, the minimum number of unique colors needed to paint the flags. Examples Input 5 2 3 3 2 4 Output 2 Input 3 5 5 5 Output 1 Input 10 1 2 1 2 1 2 1 2 1 2 Output 2 Explanation - In the first example, you could paint the flags on buildings 1, 3, and 5 with one color, and the flags on buildings 2 and 4 with another color, resulting in a total of 2 unique colors required. - In the second example, all buildings have the same height, so you only need 1 color. - In the third example, you can alternate between two colors for the flags.","solution":"def min_unique_colors(n, heights): Determine the minimum number of unique colors needed to paint the flags such that no two adjacent buildings have flags with the same color. Parameters: n (int): The number of buildings. heights (list of int): The heights of the buildings. Returns: int: The minimum number of unique colors needed. if n == 1: return 1 max_adjacent = 1 for i in range(n-1): if heights[i] != heights[i+1]: max_adjacent = 2 return max_adjacent"},{"question":"You are given a two-dimensional grid representing a maze, where \'S\' represents the starting point, \'E\' represents the end point, \'.\' represents open paths, and \'#\' represents walls that cannot be traversed. Your task is to determine the shortest path from \'S\' to \'E\' using four possible movements (up, down, left, right). If no path exists, return -1. Input The first line contains an integer T, the number of test cases. For each test case: - The first line contains two integers N and M, indicating the number of rows and columns in the grid. - The next N lines each contain M characters (\'.\', \'#\', \'S\', \'E\') representing the grid. Output For each test case, output a single integer - the length of the shortest path from \'S\' to \'E\', or -1 if no such path exists. Constraints 1 ≤ T ≤ 50 2 ≤ N, M ≤ 1000 There is exactly one \'S\' and one \'E\' in each grid. SAMPLE INPUT 2 5 5 S.... .#. ..... ..#.. ...E. 3 3 S#E # .#. SAMPLE OUTPUT 7 -1 Explanation In the first test case, the shortest path from \'S\' to \'E\' is 7 steps long, moving down, right, right, right, down, down, and right. In the second test case, there is no available path from \'S\' to \'E\', hence the output is -1.","solution":"from collections import deque def shortest_path_in_maze(maze, n, m): Returns the length of the shortest path from \'S\' to \'E\' in the given maze. directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right start = end = None # Locate start (\'S\') and end (\'E\') points for i in range(n): for j in range(m): if maze[i][j] == \'S\': start = (i, j) elif maze[i][j] == \'E\': end = (i, j) if not start or not end: return -1 # If either \'S\' or \'E\' is missing, no path can exist # BFS to find the shortest path queue = deque([(start[0], start[1], 0)]) # (x, y, distance) visited = set() visited.add(start) while queue: x, y, dist = queue.popleft() # Check if we have reached the end if (x, y) == end: return dist # Explore neighbors for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and maze[nx][ny] != \'#\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 # If no path found def process_input(input_text): lines = input_text.strip().split(\\"n\\") t = int(lines[0]) index = 1 results = [] for _ in range(t): n, m = map(int, lines[index].split()) maze = [lines[index + 1 + i] for i in range(n)] result = shortest_path_in_maze(maze, n, m) results.append(result) index += n + 1 return results"},{"question":"Alice is organizing a marathon event. She needs your help to ensure that race participants have unique bib numbers. Each participant is assigned a unique bib number ranging from 1 to n. However, due to some errors in registration, duplicate bib numbers have been assigned to some participants. Alice wants to know the total number of unique bib numbers and which bib numbers were assigned more than once. Write a program that helps Alice determine the total count of unique bib numbers and which numbers are duplicates. Input The first line of the input contains a single integer n (1 ≤ n ≤ 200 000) — the number of participants who have registered for the marathon. Each of the following n lines contains an integer bi (1 ≤ bi ≤ n) — the bib number assigned to the i-th participant. Output On the first line, output one number — the total count of unique bib numbers. On the second line, output the duplicate bib numbers in sorted order and separated by spaces. If there are no duplicates, output \\"None\\". Examples Input 5 1 2 2 3 4 Output 4 2 Input 6 1 2 3 4 5 6 Output 6 None Note In the first sample, there are 5 participants but only 4 unique bib numbers (1, 2, 3, 4). Bib number 2 is assigned twice, so it is the only duplicate. In the second sample, all bib numbers from 1 to 6 are unique, so the total count of unique bib numbers is 6 and there are no duplicates.","solution":"def marathon_participants(n, bib_numbers): Returns the count of unique bib numbers and the duplicate bib numbers. :param n: The number of participants. :param bib_numbers: A list of integers representing bib numbers. :return: A tuple containing the count of unique bib numbers and a list of duplicate bib numbers. from collections import Counter counter = Counter(bib_numbers) unique_count = len(counter) duplicates = sorted([bib for bib, count in counter.items() if count > 1]) return unique_count, duplicates if duplicates else None"},{"question":"In Byteland, all roads are directed and designed in a way that there are no cycles, forming a Directed Acyclic Graph (DAG). For efficient commerce, Byteland\'s king wants to establish the shortest paths from the capital city to all other cities. The capital city is the one from which all paths originate and has no incoming roads. Each road has a positive integer weight representing the time it takes to travel that road. The king needs your help to find the shortest travel time from the capital city to every other city in Byteland. Given the number of cities `n` and the `m` roads connecting these cities, determine the shortest time required to travel from the capital city to each of the other cities. If a city is unreachable from the capital city, denote its travel time as `-1`. Input The first line contains two integers, `n` (2 ≤ n ≤ 100,000) and `m` (1 ≤ m ≤ 200,000) — the number of cities and the number of roads, respectively. Each of the next `m` lines contains three integers `ui`, `vi`, and `wi` (1 ≤ ui, vi ≤ n; 1 ≤ wi ≤ 10,000), indicating a directed road from city `ui` to city `vi` with a weight `wi`. The capital city is always city `1`. Output Print `n - 1` integers separated by spaces. The `i-th` integer should represent the shortest travel time from the capital city to city `i+1` (for i from 1 to n-1). If city `i+1` is unreachable, print `-1` for that city. Examples Input 5 6 1 2 3 1 3 4 2 3 1 2 4 6 3 5 2 4 5 1 Output 3 4 9 6 Input 4 4 1 2 2 2 3 3 1 3 1 1 4 5 Output 2 1 5 Note In the first sample, the shortest paths from the capital city `1` to cities `2`, `3`, `4`, and `5` are `3`, `4`, `9`, and `6`, respectively. In the second sample, the shortest paths from the capital city `1` to cities `2`, `3`, and `4` are `2`, `1`, and `5`, respectively.","solution":"import heapq import sys from collections import defaultdict def shortest_paths_from_capital(n, m, roads): graph = defaultdict(list) for u, v, w in roads: graph[u].append((v, w)) def dijkstra(start): distances = [float(\'inf\')] * (n + 1) distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances distances = dijkstra(1)[2:] distances = [-1 if d == float(\'inf\') else d for d in distances] return distances # Function to process input and return formatted output for shortest paths def process_input(n, m, roads): result = shortest_paths_from_capital(n, m, roads) return \\" \\".join(map(str, result))"},{"question":"Given is a sequence of integers. You are to perform the following operation exactly K times: 1. Choose a segment of the sequence (subarray) such that the sum of elements in that segment is equal to or greater than M. 2. Reverse the chosen segment. Your task is to determine whether it is possible to perform this operation K times on the sequence. Constraints - 1 ≤ length of sequence ≤ 100,000 - -10^9 ≤ element of sequence ≤ 10^9 - 1 ≤ K ≤ 100,000 - -10^18 ≤ M ≤ 10^18 Input Input is given from Standard Input in the following format: ``` N K M A_1 A_2 ... A_N ``` Output Print \\"YES\\" if it is possible to perform the operation exactly K times, otherwise print \\"NO\\". Examples Input ``` 5 2 3 1 2 3 4 5 ``` Output ``` YES ``` Input ``` 5 3 7 1 2 3 4 5 ``` Output ``` NO ```","solution":"def can_perform_k_operations(N, K, M, A): prefix_sums = [0] * (N + 1) # Calculate the prefix sums for i in range(N): prefix_sums[i + 1] = prefix_sums[i] + A[i] # Initialize dynamic programming table and find starting points dp = [0] * (K + 1) dp[0] = 1 # Base case for i in range(1, N + 1): for j in range(i): if prefix_sums[i] - prefix_sums[j] >= M: for k in range(K, 0, -1): if dp[k-1] and i > dp[k-1]: dp[k] = i return \\"YES\\" if dp[K] > 0 else \\"NO\\""},{"question":"Problem Statement In the bustling city of Byteville, there exists a peculiar grid-based market. Each cell in the market is designated by either G, L, S, or R. Here’s what each symbol represents: - \'G\' for Grocery. - \'L\' for Laundry. - \'S\' for Snacks. - \'R\' for Restroom. In Byteville, customers have a peculiar shopping habit: they need to visit all types of stores (G, L, S, R) in a single continuous row without moving to the next line. You need to determine if there exists at least one row in the market grid where customers can shop in this manner. Input The input consists of multiple test cases. The first line contains an integer T representing the number of test cases. Each test case starts with two integers, R (number of rows) and C (number of columns). Each of the next R lines contains C characters representing the grid. Output For each test case, output \\"Yes\\" if there is at least one row where customers can visit Grocery, Laundry, Snacks, and Restroom in any order. Otherwise, output \\"No\\". Constraints - 1 ≤ T ≤ 100 - 1 ≤ R, C ≤ 100 Example Input: 2 3 4 GLSR RLSG SGRL 2 5 LGSRS SGLRL Output: Yes Yes Explanation Example case 1: - Row 1: The sequence \\"GLSR\\" contains G, L, S, R. - Row 2: The sequence \\"RLSG\\" contains G, L, S, R. - Row 3: The sequence \\"SGRL\\" contains G, L, S, R. Since each row in this example contains G, L, S, R, the output is \\"Yes\\". Example case 2: - Row 1: The sequence \\"LGSRS\\" contains G, L, S, R. - Row 2: The sequence \\"SGLRL\\" contains G, L, S, R. Since each row in this example contains G, L, S, R, the output is \\"Yes\\".","solution":"def can_visit_all_shops(grid): for row in grid: if all(char in row for char in \\"GLSR\\"): return \\"Yes\\" return \\"No\\" def process_test_cases(test_cases): results = [] for case in test_cases: R, C, grid = case results.append(can_visit_all_shops(grid)) return results def main(): import sys input = sys.stdin.read data = input().split() index = 0 T = int(data[index]) index += 1 test_cases = [] for _ in range(T): R = int(data[index]) C = int(data[index + 1]) index += 2 grid = [] for _ in range(R): grid.append(data[index]) index += 1 test_cases.append((R, C, grid)) results = process_test_cases(test_cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Consider a string consisting of lowercase alphabetic characters only. We want to find out the minimum number of characters to insert into the string to make it a palindrome. Write a function `minInsertionsPalindrome` that takes a single string `s` and returns the minimum number of insertions required to make `s` a palindrome. # Input - A string `s` of length n (1 ≤ n ≤ 1000) consisting of lowercase alphabetic characters only. # Output - An integer representing the minimum number of insertions required to make the input string `s` a palindrome. # Example Input ``` \\"ab\\" ``` Output ``` 1 ``` Explanation We can insert one character, \'b\', at the start to make the string \\"bab\\" which is a palindrome. Input ``` \\"aebcbda\\" ``` Output ``` 2 ``` Explanation We can insert two characters, for example, \\"ad\\" at the start of the string to make the string \\"adaaebcbdaa\\" which is a palindrome. # Note The function should be efficient in terms of time complexity and handle the upper limit constraints gracefully.","solution":"def minInsertionsPalindrome(s): Calculates the minimum number of insertions needed to make the given string a palindrome. # Helper function to find the length of the longest palindromic subsequence def longest_palindromic_subsequence(s): n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n+1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j]: dp[i][j] = 2 + dp[i+1][j-1] else: dp[i][j] = max(dp[i][j-1], dp[i+1][j]) return dp[0][n-1] n = len(s) lps = longest_palindromic_subsequence(s) return n - lps"},{"question":"You\'ve been hired by a railway company to develop a system for monitoring the status of trains on their network. The railway company manages a number of lines, and each line has a specific number of stations. Each station has a unique identifier. There are some trains running on these lines, and at any given moment, a train can be at only one station. Your task is to develop a subsystem that can answer queries regarding the number of trains currently at a specific station. Input The first line contains three integers n (1 ≤ n ≤ 100) — the number of stations, m (1 ≤ m ≤ 1000) — the initial number of trains, and q (1 ≤ q ≤ 1000) — the number of queries. The next m lines each contain an integer si (1 ≤ si ≤ n) indicating the initial station location of the ith train. The next q lines each contain an integer xj (1 ≤ xj ≤ n) representing a query asking how many trains are currently at station xj. Output For each query, print a single integer representing the number of trains currently at station xj. Examples Input 5 3 4 1 2 3 1 2 3 4 Output 2 1 1 0 Explanation In the initial configuration, there are 3 trains located at stations 1, 2, and 3 respectively. When we receive the query about trains at station 1, we see 2 trains are at station 1. Similarly, other queries are answered based on the initial distribution of trains. Note This question aligns well with counting algorithms and demonstrates an understanding of basic input-output handling, as well as working with arrays and loops.","solution":"def count_trains_at_stations(n, m, q, train_positions, queries): Returns the number of trains at each queried station. Parameters: n (int): Number of stations. m (int): Initial number of trains. q (int): Number of queries. train_positions (List[int]): A list of integers representing initial positions of trains. queries (List[int]): A list of integers representing station queries. Returns: List[int]: A list of integers representing the count of trains for each query. # Create a list to keep track of the number of trains at each station station_count = [0] * n # Count the trains at each station based on initial positions for position in train_positions: station_count[position - 1] += 1 # Result list to store number of trains for each query results = [] # Answer each query based on the station count for query in queries: results.append(station_count[query - 1]) return results"},{"question":"You are given an unweighted, undirected graph represented by `n` nodes and `m` edges. Your task is to determine if there exists a simple path (a path without repeated vertices) of exactly `k` edges between any two nodes in the graph. Input: - The first line contains three space-separated integers, `n`, `m`, and `k` (1 ≤ n ≤ 100, 0 ≤ m ≤ 5000, 1 ≤ k ≤ n-1). - The next `m` lines each contain two space-separated integers, `u` and `v` (1 ≤ u, v ≤ n, u ≠ v), representing an edge between nodes `u` and `v`. Output: - Output \\"YES\\" if there exists a simple path of exactly `k` edges between any two nodes in the graph. Otherwise, output \\"NO\\". Example: Input: ``` 4 3 2 1 2 2 3 3 4 ``` Output: ``` YES ``` Explanation: - In this example, there is a simple path of exactly 2 edges from node 1 to node 3 (1-2-3), from node 2 to node 4 (2-3-4), and from node 1 to node 3 via nodes 2 and 4. Guidelines: 1. Implement a depth-first search (DFS) or breadth-first search (BFS) algorithm to explore paths in the graph. 2. Keep track of the number of edges traversed and ensure to backtrack when traversed edges exceed `k`. 3. Utilize an adjacency list to represent the graph for efficient traversal.","solution":"def has_simple_path_of_k_edges(n, m, k, edges): from collections import defaultdict # Create an adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) def dfs(node, edges_left, visited): if edges_left < 0: return False if edges_left == 0: return True visited.add(node) for neighbor in graph[node]: if neighbor not in visited: if dfs(neighbor, edges_left - 1, visited): return True visited.remove(node) return False # Check for each vertex if there\'s a k-length path starting from it for start_node in range(1, n + 1): visited = set() if dfs(start_node, k, visited): return \\"YES\\" return \\"NO\\""},{"question":"In a programming competition, each team is scored based on the total number of points they earn for solving problems. Each team can earn certain points by solving various problems of different point values. Given the list of team scores and the number of problems they solved, write a program to determine the average score for each team rounded down to the nearest integer. Input Format The first line contains the number of teams T. The next T lines each contain two integers: the total score S earned by the team, and the number of problems P they solved. Output Format For each team, print the average score rounded down to the nearest integer. Constraints 1 ≤ T ≤ 1000 0 ≤ S ≤ 10^6 1 ≤ P ≤ 100 SAMPLE INPUT 3 300 5 275 3 450 4 SAMPLE OUTPUT 60 91 112 Explanation Case 1: The first team has a total score of 300 and solved 5 problems. The average score is 300 / 5 = 60. Case 2: The second team has a total score of 275 and solved 3 problems. The average score is 275 / 3 = 91.67, rounded down, it is 91. Case 3: The third team has a total score of 450 and solved 4 problems. The average score is 450 / 4 = 112.5, rounded down, it is 112.","solution":"def average_scores_per_team(T, team_scores): Computes the average score for each team rounded down to the nearest integer. Parameters: T (int): Number of teams team_scores (list of tuples): Each tuple contains two integers: total score S and number of problems P. Returns: list of int: The average scores for each team, rounded down to the nearest integer. result = [] for scores in team_scores: S, P = scores average_score = S // P result.append(average_score) return result"},{"question":"A unique string called a \\"palindromic subsequence\\" is a subsequence of a given string which reads the same forward and backward. Given a string, we want to find the longest palindromic subsequence within it. Note that the subsequence does not need to be contiguous in the original string but must maintain the order of characters. Write a function that takes in a string and returns the length of the longest palindromic subsequence. # Input - A single string `s` of length 1 leq |s| leq 1000. The string contains only lowercase English letters. # Output - An integer representing the length of the longest palindromic subsequence in the given string. # Example Input ``` \\"bbabcbcab\\" ``` Output ``` 7 ``` Explanation The longest palindromic subsequence is \\"babcbab\\" which has a length of 7. # Additional Constraints - The algorithm should run with a reasonable time complexity given the input size. Implement the function: ```python def longest_palindromic_subsequence(s: str) -> int: # Your code here ```","solution":"def longest_palindromic_subsequence(s: str) -> int: Returns the length of the longest palindromic subsequence in the given string. n = len(s) # dp[i][j] will store the length of the longest palindromic subsequence in s[i:j+1] dp = [[0] * n for _ in range(n)] # A single character is a palindrome of length 1 for i in range(n): dp[i][i] = 1 # Check subsequences of length greater than 1 for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) # Length of longest palindromic subsequence will be dp[0][n-1] return dp[0][n-1]"},{"question":"There are n students in a class where each student has a given height. The teacher wants to organize the students in ascending order of their heights. However, once the teacher starts moving a student from one position to another, it is not considered efficient to move other students until the first student reaches their final position. Given the initial order of the students\' heights, determine how to rearrange the students so that they are in ascending order using the minimum number of movement operations. Each movement operation consists of selecting a student and moving them to their correct position in the sorted order. Input The first line of the input contains an integer n (2 ≤ n ≤ 1000) representing the number of students. The second line contains n space-separated integers representing the heights of the students. Output Print the minimum number of movements required to sort the students in ascending order of their heights. Examples Input 5 4 3 2 5 1 Output 3 Input 6 1 2 3 4 5 6 Output 0 Note In the first example, one way to sort the students with the minimum number of movements is: - Move the student of height 1 to the first position: [1, 4, 3, 2, 5] - Move the student of height 2 to the second position: [1, 2, 4, 3, 5] - Move the student of height 3 to the third position: [1, 2, 3, 4, 5] In the second example, the students are already in ascending order, so no movements are required.","solution":"def count_minimum_movements(n, heights): Returns the minimum number of movements required to sort the students in ascending order by their heights. sorted_heights = sorted(heights) visited = [False] * n min_movements = 0 for i in range(n): if visited[i] or sorted_heights[i] == heights[i]: continue cycle_size = 0 x = i while not visited[x]: visited[x] = True x = heights.index(sorted_heights[x]) cycle_size += 1 if cycle_size > 0: min_movements += (cycle_size - 1) return min_movements"},{"question":"Alice has recently started working at a bakery and she is responsible for fulfilling pie orders. The bakery offers five types of pies: Apple, Blackberry, Cherry, Date, and Elderberry, each represented by the first letter of their name (\'A\', \'B\', \'C\', \'D\', \'E\'). The customers place their orders by providing a list of pie codes in a string format. Each pie code may contain one or more letters, where repetitions are possible. Alice needs to prepare the exact number of pies as specified by the orders. However, she can only use each pie letter once per order. She wants to know how many complete orders she can fulfill with the pie letters available. Write a program to help Alice count how many complete orders she can fulfill from the given string of pie codes. Input Input contains a single string s (1 ≤ |s| ≤ 105) — the list of pie codes in the order of customer requests. The string s contains only characters \'A\', \'B\', \'C\', \'D\', \'E\'. Output Output a single integer, the maximum number of complete orders that Alice can fulfill. Examples Input ABCEDCABACDC Output 2 Input AAA Output 0 Input ABCDEABCDEABCDE Output 3 Note In the first case, the list contains 2 complete sets of pie codes (ABCDE) that can fulfill two orders. In the second case, there are not enough pie codes to fulfill a complete order. In the third case, there are exactly 3 sets of pie codes (ABCDE), which can fulfill three orders.","solution":"def count_complete_orders(pie_codes): This function takes in a string representing pie codes and returns the maximum number of complete orders that can be fulfilled. from collections import Counter # Count the occurrences of each pie code pie_count = Counter(pie_codes) # Initialize the number of complete orders to an arbitrarily large number complete_orders = float(\'inf\') # The required pies for a complete order required_pies = \'ABCDE\' for pie in required_pies: # How many times can we use this pie in a complete order complete_orders = min(complete_orders, pie_count[pie] // required_pies.count(pie)) return complete_orders"},{"question":"Alice and Bob are playing a game on a grid of size n x m. The grid cells are indexed from (1, 1) to (n, m). Initially, Alice places a coin in each cell of the grid such that the value of the coin in cell (i, j) is equal to i * j. Alice and Bob take turns playing. Alice goes first. In each turn, a player can select any coin on the grid and remove it. The player who cannot make a move loses the game. Alice and Bob both play optimally. Your task is to determine the winner of the game for a given grid size n x m. Input The first line of input contains two integers, n (1 ≤ n ≤ 100) and m (1 ≤ m ≤ 100) – the dimensions of the grid. Output Print \\"Alice\\" if Alice wins the game or \\"Bob\\" if Bob wins the game. Example Input 2 3 Output Alice Input 3 3 Output Bob Note In the first example, Alice will take the coin at (2, 3), leaving Bob with a subgrid that has no coins or a subgrid that renders Bob unable to win. In the second example, regardless of Alice\'s initial move, Bob will always have a strategy to win.","solution":"def find_winner(n, m): Determines the winner of the game for a given grid size n x m. Parameters: n (int): number of rows in the grid (1 ≤ n ≤ 100) m (int): number of columns in the grid (1 ≤ m ≤ 100) Returns: str: \\"Alice\\" if Alice wins the game, otherwise \\"Bob\\" # Alice wins if n and m are both odd if n % 2 == 1 and m % 2 == 1: return \\"Bob\\" else: return \\"Alice\\""},{"question":"You are given a string s consisting of n lowercase Latin letters. Your task is to determine the length of the longest substring that consists of the same character repeated. Input The input consists of a single line containing the string s (1 ≤ n ≤ 10^5). Output Output a single integer representing the length of the longest substring of the same character. Examples Input aaabbbaaacccaaa Output 3 Input abcde Output 1 Note In the first example, there are substrings \\"aaa\\" occurring twice with length 3, hence the output is 3. In the second example, every character is different, hence the longest substring consists of a single character with length 1.","solution":"def longest_repeated_substring_length(s): Returns the length of the longest substring that consists of the same character repeated. if not s: return 0 max_length = 1 current_length = 1 for i in range(1, len(s)): if s[i] == s[i-1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"Given two strings, determine if one is a permutation of the other. Input The first line contains an integer `t` - the number of test cases. Each test case contains two lines: The first line is string `a` and the second line is string `b`. Constraints: T=5 1 ≤ length(a), length(b) ≤ 100000 Output For each test case, output \\"Yes\\" if one string is a permutation of the other, otherwise output \\"No\\". Example Input: 2 abcd dcba hello billion Output: Yes No","solution":"def is_permutation(a, b): Returns \'Yes\' if string a is a permutation of string b, otherwise returns \'No\'. if len(a) != len(b): return \\"No\\" # If the sorted version of both strings is the same, they are permutations of each other. if sorted(a) == sorted(b): return \\"Yes\\" else: return \\"No\\" def check_permutations(test_cases): results = [] for case in test_cases: a, b = case results.append(is_permutation(a, b)) return results"},{"question":"Given an integer n, find the difference between the sum of squares of the first n natural numbers and the square of their sum. Input: Input description. The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows: The first and only line of each test case contains a single integer n. Output: For each test case, output the difference between the sum of squares of the first n natural numbers and the square of their sum on a new line. Constraints: 1 ≤ T ≤ 10 1 ≤ n ≤ 1000 Example: Input: 1 10 Output: 2640 Explanation: Example case 1. The sum of the squares of the first 10 natural numbers is 1^2 + 2^2 + 3^2 + ... + 10^2 = 385. The square of the sum of the first 10 natural numbers is (1 + 2 + 3 + ... + 10)^2 = 55^2 = 3025. The difference is 3025 - 385 = 2640. Scoring: Subtask 1 (50 points): 1 ≤ n ≤ 50 Subtask 2 (50 points): 1 ≤ n ≤ 1000","solution":"def difference_sum_of_squares_and_square_of_sum(n): Returns the difference between the sum of squares of the first n natural numbers and the square of their sum. sum_of_squares = sum(i**2 for i in range(1, n+1)) square_of_sum = sum(range(1, n+1)) ** 2 return square_of_sum - sum_of_squares def process_test_cases(T, test_cases): Processes multiple test cases. :param T: The number of test cases :param test_cases: List of integers representing the test cases :return: List of results for each test case results = [] for n in test_cases: results.append(difference_sum_of_squares_and_square_of_sum(n)) return results"},{"question":"A city is represented by an n x n grid, where each cell in the grid can either be a building (represented by \'#\') or an empty lot (represented by \'.\'). You are tasked with constructing a park in the city by connecting three or more consecutive empty lots either horizontally or vertically. Your task is to find the maximum number of empty lots that can be connected adjacently to form the largest possible park in the city. You can measure the size of the park by the number of empty lots connected directly. Input The first line of input contains a single integer n (1 ≤ n ≤ 1000): the size of the grid. Each of the next n lines contains n characters each, representing the grid. Each character is either \'#\' (a building) or \'.\' (an empty lot). Output Print one integer: the maximum number of empty lots that can be connected adjacently either horizontally or vertically. Examples Input 5 ..# .#..# ..# #.... ... Output 4 Input 3 ... .#. ..# Output 3 Input 4 Output 0 Note In the first example, the largest possible park that can be formed is of size 4, using the empty lots in positions (1,1) to (4,1) vertically. In the second example, the largest possible park that can be formed is of size 3, using any of the 3 consecutive empty lots horizontally in any row. In the third example, there are no empty lots, so the largest park possible is of size 0.","solution":"def find_largest_park(n, grid): def check_max_consecutive(empty_lots): max_count = 0 current_count = 0 for lot in empty_lots: if lot == \'.\': current_count += 1 else: max_count = max(max_count, current_count) current_count = 0 return max(max_count, current_count) max_park_size = 0 # Check horizontally for row in grid: max_park_size = max(max_park_size, check_max_consecutive(row)) # Check vertically for col in range(n): column_empty_lots = [grid[row][col] for row in range(n)] max_park_size = max(max_park_size, check_max_consecutive(column_empty_lots)) return max_park_size"},{"question":"Ekta and Varun are playing a card game in which they take turns picking cards from a pile. The pile contains N cards, each with a value representing their points. On each turn, a player must pick one card from the pile, but they can only take a card if it makes the total score on the table, including their chosen card, a multiple of 5. Both players play optimally, aiming to maximize the total points they score. Ekta always starts first. If she is unable to make a move because no card will result in a total score that is a multiple of 5, then Varun gets a chance to play. The game ends when neither player can make a move. Whoever picked the last card wins the game. If Ekta is the last to pick a card, print \\"Winner: Ekta\\". If Varun is the last to pick a card, print \\"Winner: Varun\\". Can you determine who wins the game? Input First line contains number of test cases T. Each test case contains two lines: - The first line contains a single integer N, the number of cards in the pile. - The second line contains N integers, each representing the value of a card in the pile. Output For each test case, output the winner (\\"Winner: Ekta\\" or \\"Winner: Varun\\") in a new line. Constraints 1 <= T <= 10000 1 <= N <= 100000 1 <= card value <= 1000 Example Input: 2 5 1 4 10 20 5 4 6 2 3 8 Output: Winner: Ekta Winner: Varun","solution":"def determine_winner(T, cases): results = [] for i in range(T): N = cases[i][0] cards = cases[i][1] ekta_turn = True total_score = 0 cards.sort(reverse=True) while cards: pickable = False for j in range(len(cards)): if (total_score + cards[j]) % 5 == 0: total_score += cards.pop(j) pickable = True break if not pickable: break ekta_turn = not ekta_turn if ekta_turn: results.append(\\"Winner: Varun\\") else: results.append(\\"Winner: Ekta\\") return results"},{"question":"An online gaming platform has an arsenal of n weapons, each having a distinct power level. The power levels are represented by distinct integers in an array. The platform grants players the ability to upgrade their chosen weapon with a unique upgrade path that follows these rules: 1. If the weapon’s power level is p, it can be upgraded to either p+1 or p+2. 2. A weapon can be upgraded multiple times, but each weapon can only follow one path at a time, independently of other weapons. The player’s task is to maximize the power level of their weapons after exactly k upgrades. For each task, players are provided with an array of length n representing the initial power levels of the weapons and an integer k, indicating the exact number of upgrades that should be performed. The output should be an array of length n representing the power levels of the weapons after k upgrades each. Input The first line contains two integers n and k (1 ≤ n, k ≤ 1000) — the number of weapons and the exact number of upgrades for each weapon. The second line contains n distinct integers p1, p2, ..., pn (1 ≤ pi ≤ 1000) — the initial power levels of the weapons. Output Print n integers in a single line — the power levels of the weapons after exactly k upgrades each. Examples Input 3 5 1 4 7 Output 6 9 12 Input 4 3 2 3 5 8 Output 5 6 8 11","solution":"def upgrade_weapons(n, k, power_levels): This function takes the number of weapons n, the number of upgrades k, and the list of initial power levels. It returns a list of power levels after exactly k upgrades for each weapon, maximizing the power level. return [p + k for p in power_levels]"},{"question":"You are given an array of n integers. Your task is to find out if there exist three elements in the array whose sum is zero. If such a triplet exists, print \\"YES\\", otherwise print \\"NO\\". Input The first line contains an integer n (1 ≤ n ≤ 10^3) — the size of the array. The second line contains n integers separated by spaces, each of which is between -10^6 and 10^6 — the elements of the array. Output Print \\"YES\\" if there exists a triplet in the array that sums to zero, otherwise print \\"NO\\". Examples Input 5 -1 2 1 -4 2 Output YES Input 3 1 2 3 Output NO Note In the first example, the triplet (-1, 2, -1) sums to zero. In the second example, no such triplet exists.","solution":"def find_triplet_with_zero_sum(arr): arr.sort() n = len(arr) for i in range(n - 2): left = i + 1 right = n - 1 while left < right: current_sum = arr[i] + arr[left] + arr[right] if current_sum == 0: return \\"YES\\" elif current_sum < 0: left += 1 else: right -= 1 return \\"NO\\""},{"question":"You are given an integer array called \\"weights\\" containing n integers and an integer \\"target\\". Your task is to determine if there are four distinct elements in the array whose sum is equal to the target. If such a combination exists, print \\"YES\\" and one possible combination of indices of these elements. Otherwise, print \\"NO\\". Input The first line contains two integers n and target (4 ≤ n ≤ 200, -10^9 ≤ target ≤ 10^9). The second line contains n integers representing the array \\"weights\\", each having an absolute value ≤ 10^9. Output If there exists a combination of four distinct indices i, j, k, l (1 ≤ i, j, k, l ≤ n, i ≠ j ≠ k ≠ l) such that weights[i] + weights[j] + weights[k] + weights[l] = target, print \\"YES\\" on the first line, followed by four distinct integers (indices of the array elements of one such combination) on the second line. If no such combination exists, print \\"NO\\". Examples Input 5 10 1 2 3 4 5 Output YES 1 2 3 4 Input 4 0 -1 -1 -1 -1 Output NO Note In the first case, one of the possible combinations is weights[1] + weights[2] + weights[3] + weights[4] = 1 + 2 + 3 + 4 = 10. In the second case, there are no combinations of four distinct indices that sum up to 0.","solution":"def find_four_sum(weights, target): Determines if there are four distinct elements in the array whose sum is equal to the target. Returns a tuple: (result, indices) where result is \\"YES\\" or \\"NO\\", and indices is a list of the indices. n = len(weights) lookup = {} # Store pairs of sums and their indices for i in range(n): for j in range(i + 1, n): pair_sum = weights[i] + weights[j] if pair_sum not in lookup: lookup[pair_sum] = [] lookup[pair_sum].append((i, j)) # Look for two pairs of sums that add up to the target for i in range(n): for j in range(i + 1, n): needed = target - (weights[i] + weights[j]) if needed in lookup: for (k, l) in lookup[needed]: if k != i and k != j and l != i and l != j: return \\"YES\\", [i + 1, j + 1, k + 1, l + 1] return \\"NO\\", [] # This function is used to parse the input and output the results def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) target = int(data[1]) weights = list(map(int, data[2:])) result, indices = find_four_sum(weights, target) print(result) if result == \\"YES\\": print(\\" \\".join(map(str, indices)))"},{"question":"In Wonderland, Alice has been given a series of magical keys which allow her to open doors in a hallway. The hallway consists of `n` doors that are numbered from 1 to `n`, and each door `i` has a portal that can transport Alice to another door `j` (1 ≤ j ≤ n). However, each key can only be used a limited number of times. Alice starts at door 1 and her goal is to reach door `n`. She can use each key exactly once, and she can move from door `i` to door `j` if and only if there exists a key that directly connects door `i` to door `j`. Given the connections and the limitations of the keys, determine whether it is possible for Alice to reach door `n` from door 1 and if so, return the minimum number of keys needed. If it is not possible, return -1. Input The first line contains an integer `n` (2 ≤ n ≤ 1000) — the number of doors. The second line contains `n` integers where the i-th integer represents the door that the i-th portal can transport Alice to (1 ≤ portal[i] ≤ n, 1 ≤ i ≤ n). Output Print a single integer — the minimum number of keys required to reach door `n` from door 1, or -1 if it is impossible to reach door `n`. Examples Input 5 2 3 4 5 5 Output 4 Input 4 2 3 1 3 Output -1 Note In the first example, the pathway is as follows: 1 → 2 → 3 → 4 → 5 So, Alice needs 4 keys. In the second example, there is no way for Alice to reach door 4, thus the output is -1.","solution":"from collections import deque def min_keys_to_reach_door(n, portals): Returns the minimum number of keys required to reach door n or -1 if unreachable. visited = [False] * n queue = deque([(0, 0)]) # (current_door, keys_used) visited[0] = True while queue: current_door, keys_used = queue.popleft() if current_door == n - 1: return keys_used next_door = portals[current_door] - 1 if not visited[next_door]: visited[next_door] = True queue.append((next_door, keys_used + 1)) return -1"},{"question":"Given a series of operations, calculate the result of those operations on an initial string. Imagine that you have a string consisting of only lowercase alphabetic characters. You are given a series of operations to perform on this string. An operation consists of either: 1. Adding a character to the end of the string. 2. Removing the first occurrence of a character in the string if it exists. The goal is to display the final resultant string after performing all operations in the given order. # Input - The first line contains a single integer `n` (1 ≤ n ≤ 100), the number of operations. - The next `n` lines contain one of the following operations: - A line starting with `ADD` followed by a single space and a lowercase alphabetic character, indicating that the character should be appended to the end of the string. - A line starting with `REMOVE` followed by a single space and a lowercase alphabetic character, indicating that the first occurrence of the character should be removed from the string if it exists. # Output - Print the resultant string after all operations are performed. If the resultant string is empty, print `EMPTY`. # Example Input: ``` 5 ADD a ADD b REMOVE a ADD c REMOVE b ``` Output: ``` c ``` Input: ``` 3 ADD x REMOVE x REMOVE x ``` Output: ``` EMPTY ```","solution":"def process_operations(n, operations): Process the given operations on an initial empty string. Arguments: n -- the number of operations operations -- a list of operations, each being a string of the form \'ADD x\' or \'REMOVE x\', where x is a lowercase alphabetic character Returns: The resultant string after performing all operations, or \'EMPTY\' if the resultant string is empty. result_string = [] for op in operations: action, char = op.split() if action == \'ADD\': result_string.append(char) elif action == \'REMOVE\' and char in result_string: result_string.remove(char) # remove the first occurrence only return \'\'.join(result_string) if result_string else \'EMPTY\'"},{"question":"Given an undirected graph with N nodes and M edges, you need to determine the minimum number of edges to be added to make the graph connected. Input: The first line contains an integer T, the number of test cases. Each of the next T sets of lines describes a test case as follows: - The first line of each test case contains two integers N and M. - Each of the next M lines contains two integers u and v indicating that there is an edge between nodes u and v. Output: For each test case, output one integer, the minimum number of edges to be added to make the graph connected. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 0 ≤ M ≤ N*(N-1)/2 SAMPLE INPUT 3 4 2 1 2 3 4 5 0 3 2 1 2 2 3 SAMPLE OUTPUT 1 4 0 Explanation In the first test case, the graph has 4 nodes and 2 edges: (1-2) and (3-4). To make the graph connected, we need to add at least one edge, for instance, (2-3). In the second test case, the graph has 5 nodes and no edges, making it 5 isolated nodes. To make the graph connected, we need to add 4 edges, which can be done in a minimum spanning tree way. In the third test case, the graph with nodes 1, 2, and 3 is already connected, so no additional edges are needed.","solution":"def minimum_edges_to_connect_graph(T, test_cases): def dfs(node, visited, adj): stack = [node] while stack: v = stack.pop() if not visited[v]: visited[v] = True for neighbor in adj[v]: if not visited[neighbor]: stack.append(neighbor) results = [] for i in range(T): N, M = test_cases[i][0] edges = test_cases[i][1] adj = [[] for _ in range(N)] for u, v in edges: adj[u - 1].append(v - 1) adj[v - 1].append(u - 1) visited = [False] * N num_components = 0 for j in range(N): if not visited[j]: dfs(j, visited, adj) num_components += 1 results.append(num_components - 1) return results"},{"question":"In the land of loops and conditions, there exists a game titled \\"Prime Game,\\" played by two friends, Alice and Bob. Being avid programmers, they love dealing with prime numbers. The game proceeds as follows: 1. Both players have an initial integer `N`. 2. During their turn, a player can subtract any prime number (greater than 1) that divides `N` exactly from `N`. 3. The player who reduces `N` to 0 wins the game. 4. Alice always plays first. You are given multiple test cases. For each test case, determine who will win if both players play optimally. # Input Format - The first line of input contains an integer `T`, representing the number of test cases. - Each test case contains a single integer `N`. # Output Format - For each test case, output a string either \\"Alice\\" or \\"Bob\\" (to specify the winner) on a new line for each test case. # Constraints 1 ≤ T ≤ 50 1 ≤ N ≤ 1000 # Sample Input ``` 2 10 15 ``` # Sample Output ``` Alice Bob ``` # Explanation **Test Case 1:** - Alice starts with N=10. She can subtract 5 (a prime number) from 10, resulting in 10 - 5 = 5. - Bob now has N=5. Bob can subtract 5 (a prime number) from 5, resulting in 5 - 5 = 0. - Bob wins the game. **Test Case 2:** - Alice starts with N=15. She can subtract 3 (a prime number) from 15, resulting in 15 - 3 = 12. - Bob now has N=12. Bob can subtract 3 (a prime number) from 12, resulting in 12 - 3 = 9. - Alice now has N=9. Alice can subtract 3 (a prime number) from 9, resulting in 9 - 3 = 6. - Bob now has N=6. Bob can subtract 2 (a prime number) from 6, resulting in 6 - 2 = 4. - Alice now has N=4. Alice can subtract 2 (a prime number) from 4, resulting in 4 - 2 = 2. - Bob now has N=2. Bob can subtract 2 (a prime number) from 2, resulting in 2 - 2 = 0. - Bob wins the game.","solution":"def sieve_of_eratosthenes(n): Generate a list of all primes up to n using the Sieve of Eratosthenes. is_prime = [True] * (n + 1) p = 2 while (p * p <= n): if is_prime[p] == True: for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 return [p for p in range(2, n + 1) if is_prime[p]] def prime_game_winner(T, test_cases): Determine the winner of each prime game test case. max_N = max(test_cases) primes = sieve_of_eratosthenes(max_N) results = [] for N in test_cases: # Determining the winner using game theory (NIM game) if N % 2 == 0: results.append(\\"Alice\\") else: results.append(\\"Bob\\") return results"},{"question":"A long, monotonous sequence Beryl is bored out of her mind and has decided to analyze monotonous sequences of numbers for fun. A sequence is considered monotonous if it is either strictly increasing or strictly decreasing. You are given a sequence of n (1 ≤ n ≤ 10^5) integers. Determine if the sequence is monotonous and, if so, whether it is strictly increasing or strictly decreasing. Input The first line contains an integer n (1 ≤ n ≤ 10^5). The second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9). Output Print one word: \\"increasing\\" if the sequence is strictly increasing, \\"decreasing\\" if the sequence is strictly decreasing, or \\"neither\\" if the sequence is not monotonous. Examples Input 5 1 2 3 4 5 Output increasing Input 5 5 4 3 2 1 Output decreasing Input 5 1 3 2 4 5 Output neither Input 3 1 2 2 Output neither Input 7 7 6 5 4 3 2 1 Output decreasing Note - A sequence is strictly increasing if for every i (1 ≤ i < n), a_i < a_i+1. - A sequence is strictly decreasing if for every i (1 ≤ i < n), a_i > a_i+1. - If neither condition holds for the entire sequence, it is not monotonous.","solution":"def determine_monotonicity(n, sequence): Determines if the given sequence is strictly increasing, strictly decreasing, or neither. Args: n (int): The number of elements in the sequence. sequence (list): A list containing n integers. Returns: str: \\"increasing\\" if the sequence is strictly increasing, \\"decreasing\\" if strictly decreasing, \\"neither\\" otherwise. if n == 1: return \\"neither\\" increasing = decreasing = True for i in range(1, n): if sequence[i] <= sequence[i - 1]: increasing = False if sequence[i] >= sequence[i - 1]: decreasing = False if increasing: return \\"increasing\\" if decreasing: return \\"decreasing\\" return \\"neither\\""},{"question":"# Problem Statement: You are given an array of integers `arr` and an integer `subarray_length`. Your task is to find the maximum sum of any contiguous subarray of length exactly `subarray_length`. For example, if you have an array `[1, 3, 2, 6, -1, 4, 1, 8, 2]` and the `subarray_length` is `3`, the maximum sum of any contiguous subarray of length `3` is `13` from the subarray `[6, -1, 4]`. However, the problem poses additional constraints: there may be invalid positions in the array that you should completely skip when calculating the sums. These invalid positions are represented by an array of `boolean` values of the same length as `arr`, where `true` indicates the corresponding position in `arr` is invalid and `false` indicates it is valid. If it is not possible to form a valid subarray of length exactly `subarray_length`, return `-1`. Input - The first line contains two integers `n` and `subarray_length` where `n` is the length of the array `arr` (1 ≤ `subarray_length` ≤ `n` ≤ 10^5). - The second line contains `n` integers representing the elements of the array `arr` (-10^4 ≤ `arr[i]` ≤ 10^4). - The third line contains `n` boolean values (`true` or `false`) representing the validity status of each respective element in `arr`. Output - Print a single integer representing the highest sum of any contiguous subarray of length exactly `subarray_length`. If no such subarray exists, print `-1`. Examples # Example 1: **Input:** ``` 9 3 1 3 2 6 -1 4 1 8 2 false false false false false false false false false ``` **Output:** ``` 13 ``` # Example 2: **Input:** ``` 9 3 1 3 2 6 -1 4 1 8 2 false true false false true true false true false ``` **Output:** ``` -1 ``` # Example 3: **Input:** ``` 9 2 1 3 2 6 -1 4 1 8 2 true false false true false true true false false ``` **Output:** ``` 10 ``` # Constraints: - The sum calculations need to be efficient due to length constraints, meaning the expected algorithm\'s time complexity should ideally not exceed O(n). - The subarrays must be contiguous and must respect the validity constraints.","solution":"def max_sum_subarray(arr, subarray_length, validity): n = len(arr) max_sum = -1 # Initialize the current sum of the first possible subarray of length subarray_length current_sum = 0 valid_count = 0 for i in range(subarray_length): if not validity[i]: current_sum += arr[i] valid_count += 1 if valid_count == subarray_length: max_sum = current_sum # Slide the window across the array for i in range(subarray_length, n): if not validity[i]: current_sum += arr[i] valid_count += 1 if not validity[i - subarray_length]: current_sum -= arr[i - subarray_length] valid_count -= 1 if valid_count == subarray_length: max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are tasked with developing an inventory management system for a small bookshop. The shop owner has requested that you create a program to help them determine the number of unique book titles they have after a series of transactions – either adding new copies of a book or removing copies when books are sold. Your program should read a sequence of transactions and keep an updated count of the unique book titles available in the inventory after each transaction. The transactions are given in chronological order. - **add t x:** Adds `x` copies of book title `t` to the inventory. - **remove t x:** Removes `x` copies of book title `t` from the inventory. If the number of copies to remove exceeds the available copies of title `t`, remove all available copies of that title. After each transaction, the program should output the number of unique book titles currently in the inventory. Input - The first line contains an integer `n` (1 ≤ n ≤ 1000) — the number of transactions. - The following `n` lines describe each transaction in the form either `add t x` or `remove t x`, where: - `t` is a string of alphanumeric characters representing the book title (1 ≤ |t| ≤ 20). - `x` is an integer (1 ≤ x ≤ 100). Output - The output should consist of `n` lines, each containing a single integer: the number of unique book titles in the inventory after each transaction. Example Input 5 add HarryPotter 5 add LOTR 3 remove HarryPotter 2 remove LOTR 3 add ArtOfWar 1 Output 1 2 2 1 2","solution":"def inventory_management(n, transactions): from collections import defaultdict inventory = defaultdict(int) unique_books_count = [] for transaction in transactions: action, title, count = transaction.split() count = int(count) if action == \'add\': inventory[title] += count elif action == \'remove\': inventory[title] -= count if inventory[title] <= 0: del inventory[title] unique_books_count.append(len(inventory)) return unique_books_count"},{"question":"In an ancient kingdom, there was a special kind of currency system. Coins in this system have different values, and each coin has a unique emblem. Each coin\'s value is defined by the number of emblems on it. The king of this kingdom likes symmetry and has commissioned you to determine how symmetric a given coin is. A coin\'s emblem symmetry is defined as the longest palindromic substring of the string of emblems. Your task is to write a program that takes in the string of emblems on a coin and determines the length of the longest palindromic substring. Input The input will consist of a single line containing a string s (1 ≤ |s| ≤ 1000), where |s| is the length of the string, representing the emblems on the coin. The string consists of lowercase English letters only. Output The output should be a single integer, the length of the longest palindromic substring in the input string. Example Input abacdfgdcaba Output 3 Input banana Output 5","solution":"def longest_palindromic_substring(s): Returns the length of the longest palindromic substring in s. if not s: return 0 n = len(s) longest = 1 # Create a table to record palindrome status dp = [[False]*n for _ in range(n)] for i in range(n): dp[i][i] = True # Single character substrings are palindromes start = 0 for i in range(n-1): if s[i] == s[i+1]: dp[i][i+1] = True start = i longest = 2 for k in range(3, n+1): for i in range(n-k+1): j = i+k-1 if dp[i+1][j-1] and s[i] == s[j]: dp[i][j] = True start = i longest = k return longest"},{"question":"In a fictional land of coding warriors, there exists a treasure chest that can only be unlocked by a secret code. The code is a sequence of characters generated based on the warrior\'s abilities and the weapons they possess. Each warrior has an ability score and possesses exactly one weapon. Abilities and weapons are represented as strings consisting only of lowercase Latin letters. The length of the ability string is n (1 ≤ n ≤ 105), and the length of the weapon string is m (1 ≤ m ≤ 100). The secret code is generated by concatenating the ability and weapon strings, forming a new string of length n+m. Given the ability string and a list of weapons, the task is to determine the number of unique secret codes that can be generated by concatenating the ability string with any weapon from the list. Input The first line contains a non-empty string a consisting of lowercase Latin letters. The string\'s length is n (1 ≤ n ≤ 105). The second line contains an integer k (1 ≤ k ≤ 100) — the number of weapons available. The next k lines contain the weapon strings wi, consisting of lowercase Latin letters. The length of each weapon string is from 1 to 100. All weapon strings are pairwise different. Output Print the single integer — the number of unique secret codes that can be generated. Examples Input strength 3 sword axe bow Output 3 Note In this example, the ability string \\"strength\\" and the weapons \\"sword\\", \\"axe\\", and \\"bow\\" can generate the following secret codes: \\"strengthsword\\", \\"strengthaxe\\", and \\"strengthbow\\". Each code is unique, hence the output is 3.","solution":"def count_unique_codes(ability, weapons): Returns the number of unique secret codes generated by concatenating the ability string with each weapon string. Parameters: ability (str): The ability string consisting of lowercase Latin letters. weapons (list of str): A list of weapon strings consisting of lowercase Latin letters. Returns: int: The number of unique secret codes. unique_codes = set() for weapon in weapons: unique_code = ability + weapon unique_codes.add(unique_code) return len(unique_codes)"},{"question":"You are given an integer array `profit` and a non-negative integer `target`. The array `profit` represents the profit values of n residential blocks in a row. You want to choose a continuous subarray from the profit array such that the sum of the subarray\'s elements is at least as large as `target` but as close to `target` as possible. Write a function to find the length of the shortest such subarray. If no such subarray exists, return `-1`. Function Signature: ```python def min_subarray_length(profit: List[int], target: int) -> int: ``` # Input - `profit`: List[int] — a list of integers representing the profit values of the residential blocks. (1 ≤ len(profit) ≤ 100,000, -10^4 ≤ profit[i] ≤ 10^4) - `target`: int — the target sum. (0 ≤ target ≤ 10^9) # Output - Return an integer representing the length of the shortest subarray with a sum that is at least as large as `target` but as close to `target` as possible. If no such subarray exists, return `-1`. # Examples Example 1 Input: ```python profit = [1, 2, 3, 4, 5] target = 11 ``` Output: ```python 3 ``` Explanation: - The subarray `[3, 4, 5]` has the sum of 12, which is the smallest subarray that meets or exceeds the target sum of 11. Example 2 Input: ```python profit = [-1, 2, 3, -4, 5] target = 5 ``` Output: ```python 1 ``` Explanation: - The subarray `[5]` has the sum of 5, which meets the target sum and has the shortest length. Example 3 Input: ```python profit = [1, 2, 3, 4, 5] target = 20 ``` Output: ```python -1 ``` Explanation: - No subarray exists with a sum of at least 20.","solution":"def min_subarray_length(profit, target): from collections import deque n = len(profit) min_length = float(\'inf\') # Initialize with infinity cum_sum = [0] * (n + 1) # To store cumulative sum for i in range(n): cum_sum[i + 1] = cum_sum[i] + profit[i] deq = deque() for i in range(n + 1): while deq and cum_sum[i] - cum_sum[deq[0]] >= target: min_length = min(min_length, i - deq.popleft()) while deq and cum_sum[i] <= cum_sum[deq[-1]]: deq.pop() deq.append(i) return min_length if min_length != float(\'inf\') else -1"},{"question":"Write a program that simulates the growth of a magical plant. The plant has two distinct stages of growth: leaf growth and stem growth. The leaf growth stage occurs on odd-numbered days, while the stem growth stage occurs on even-numbered days. During leaf growth days, the plant grows by multiplying the number of current leaves by 3. On stem growth days, the plant grows by multiplying the current stem length by 2. The plant starts with 1 stem of length 1 and 1 leaf on the first day. Your task is to determine the total number of leaves and the total stem length after \'N\' days. Input format: The first line contains an integer T, representing the number of test cases. For each test case, there is one integer N, representing the number of days. Output format: For each test case, output two integers separated by a space, representing the total number of leaves and the total stem length after N days. Constraints: 1 ≤ T ≤ 1000 1 ≤ N ≤ 1000 SAMPLE INPUT 3 1 4 7 SAMPLE OUTPUT 3 1 9 4 81 8 Explanation: - For the first test case with N=1: the plant grows leaves on day 1 (3 leaves, 1 stem). - For the second test case with N=4: - Day 1: 3 leaves, 1 stem - Day 2: 3 leaves, 2 stems - Day 3: 9 leaves, 2 stems - Day 4: 9 leaves, 4 stems - For the third test case with N=7: - Day 1: 3 leaves, 1 stem - Day 2: 3 leaves, 2 stems - Day 3: 9 leaves, 2 stems - Day 4: 9 leaves, 4 stems - Day 5: 27 leaves, 4 stems - Day 6: 27 leaves, 8 stems - Day 7: 81 leaves, 8 stems","solution":"def magical_plant_growth(N): leaves = 1 stem_length = 1 for day in range(1, N + 1): if day % 2 != 0: # Odd days: leaf growth leaves *= 3 else: # Even days: stem growth stem_length *= 2 return leaves, stem_length def process_test_cases(T, test_cases): results = [] for N in test_cases: leaves, stem_length = magical_plant_growth(N) results.append(f\\"{leaves} {stem_length}\\") return results"},{"question":"Implement a function that takes a list of integers and reverses the digits of each number while maintaining the original order of the list. If the reversed number starts with zero(s), those zeros should be kept in the result. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of integers in the list. The second line contains n integers separated by spaces — the elements of the list a_i (0 ≤ a_i ≤ 10^18). Output Output n integers in a single line — the reversed digits of each number in the original order. Example Input 5 123 456 7890 120 500 Output 321 654 0987 021 005 Explanation - The number 123 becomes 321 after reversing its digits. - The number 456 becomes 654. - The number 7890 becomes 0987, keeping the leading zero. - The number 120 becomes 021, maintaining the leading zero. - The number 500 becomes 005, with the leading zeros. The function should handle reversing digits directly and output the correct sequence of numbers with their digits reversed.","solution":"def reverse_digits_of_numbers(nums): This function takes a list of integers and reverses the digits of each number while maintaining the original order of the list. Leading zeros are kept. reversed_numbers = [str(num)[::-1] for num in nums] return reversed_numbers def process_input(n, nums): return reverse_digits_of_numbers(nums)"},{"question":"Anjali is organizing a treasure hunt for a group of N participants. Each participant has a strength value, which determines their ability to solve puzzles. The goal is to form the strongest team possible from consecutive participants in the given list. A team\'s strength is defined as the sum of the strengths of all members in the team. However, there\'s a catch: the team can have a length of at most K participants. Given the list of participants’ strengths, you need to determine the maximum possible strength a team can achieve. Write a program that, given the number of participants N, the maximum team length K, and the list of participants\' strengths, outputs the maximum team strength achievable. Input Format The first line contains two integers N and K, separated by a space. The second line contains N space-separated integers representing the strength of each participant. Output Format Print a single integer representing the maximum possible team strength. Constraints 1 ≤ N ≤ 1000 1 ≤ K ≤ 1000 1 ≤ strength of each participant ≤ 1000 SAMPLE INPUT 7 3 3 8 5 6 2 1 4 SAMPLE OUTPUT 19 Explanation: In the sample input, the list of participants\' strengths is [3, 8, 5, 6, 2, 1, 4]. The maximum team length is 3. The strongest team formed can be from participants with strengths 8, 5, and 6, giving a total team strength of 19.","solution":"def max_team_strength(N, K, strengths): max_strength = 0 # We are going to use sliding window technique to find the maximum sum of at most K consecutive elements for i in range(N): current_strength = 0 # Check only K participants from current index or till the end of the list if less than K remains for j in range(i, min(i + K, N)): current_strength += strengths[j] # Update the max_strength if current team\'s strength is higher max_strength = max(max_strength, current_strength) return max_strength # Sample Input # N = 7 # K = 3 # strengths = [3, 8, 5, 6, 2, 1, 4] # print(max_team_strength(N, K, strengths)) # Output: 19"},{"question":"Tom and Jerry are playing a game with an array of n integers. Tom always starts, and the players take turns removing exactly one integer from either end of the array. The goal for each player is to maximize the sum of integers they have removed from the array. Both players play optimally. Your task is to determine the maximum sum Tom can achieve if both players play optimally. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of integers in the array. The next line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10000) — the elements of the array. The numbers are separated by single spaces. Output Print a single integer — the maximum sum Tom can achieve if both players play optimally. Examples Input 4 1 2 9 4 Output 10 Input 3 4 4 4 Output 8 Explanation In the first example, Tom can start by picking the element 1. Jerry will then pick 4 or 9 based on whichever leads to a less optimal outcome for Tom. No matter what Jerry picks, Tom can still achieve a maximum sum of 10. In the second example, Tom can start by picking either of the two ends, and Jerry picks the remaining ends with the same value, leading to Tom achieving a maximum sum of 8 regardless of Jerry\'s picks.","solution":"def max_sum_tom_can_achieve(n, array): Returns the maximum sum Tom can achieve if both Tom and Jerry play optimally. dp = [[0] * n for _ in range(n)] # For subarray of length 1, only one player can pick (Tom) for i in range(n): dp[i][i] = array[i] # fill the dp array for length in range(2, n + 1): # length of subarray for i in range(n - length + 1): j = i + length - 1 # Tom\'s choices at the i-th start or j-th end pick_i = array[i] + min(dp[i + 2][j] if i + 2 <= j else 0, dp[i + 1][j - 1] if i + 1 <= j - 1 else 0) pick_j = array[j] + min(dp[i + 1][j - 1] if i + 1 <= j - 1 else 0, dp[i][j - 2] if i <= j - 2 else 0) dp[i][j] = max(pick_i, pick_j) # Tom starts first, so the result is the best he can get from array[0] to array[n-1] return dp[0][n-1]"},{"question":"You are given a matrix represented by a two-dimensional list of integers. The task is to determine if the matrix is a Toeplitz matrix or not. A Toeplitz matrix is a matrix where every diagonal from top-left to bottom-right has the same elements. Write a function `is_toeplitz_matrix(matrix: List[List[int]]) -> bool` that returns `True` if the given matrix is a Toeplitz matrix, and `False` otherwise. # Input - A two-dimensional list `matrix` (1 <= len(matrix), len(matrix[0]) <= 200) containing integers. # Output - A boolean value: `True` if `matrix` is a Toeplitz matrix, otherwise `False`. # Example Example 1: **Input:** ``` matrix = [ [1, 2, 3], [4, 1, 2], [6, 4, 1] ] ``` **Output:** ``` True ``` Example 2: **Input:** ``` matrix = [ [1, 2], [2, 2] ] ``` **Output:** ``` False ``` Example 3: **Input:** ``` matrix = [ [3], ] ``` **Output:** ``` True ``` # Note - Each element in the matrix is an integer. - A Toeplitz matrix can be of any size at least 1x1.","solution":"def is_toeplitz_matrix(matrix): Checks if the given matrix is a Toeplitz matrix. A matrix is a Toeplitz matrix if every diagonal from top-left to bottom-right has the same elements. Args: matrix (List[List[int]]): A two-dimensional list of integers representing the matrix. Returns: bool: True if the matrix is a Toeplitz matrix, otherwise False. rows = len(matrix) cols = len(matrix[0]) for row in range(1, rows): for col in range(1, cols): if matrix[row][col] != matrix[row - 1][col - 1]: return False return True"},{"question":"Write a program that processes a list of student grades to determine the highest grade, the lowest grade, and the average grade in a class. The program should also identify if there are any duplicate grades, and if so, output those duplicates. Constraints - 1 leq Number of students leq 100 - 0 leq Grade leq 100 Input The first line contains an integer N representing the number of students. The second line contains N integers separated by spaces representing the grades of each student. Output Print three lines: 1. The highest grade. 2. The lowest grade. 3. The average grade (rounded to 2 decimal places). If there are duplicate grades, print a fourth line with the duplicates in ascending order, separated by spaces. If there are no duplicates, print `No duplicates`. Examples Input 5 78 92 85 92 65 Output 92 65 82.40 92 Input 4 67 45 66 67 Output 67 45 61.25 67","solution":"def process_grades(grades): Process a list of student grades to determine the highest, lowest, and average grades. Also identify duplicate grades. Parameters: grades (list): List of student grades. Returns: tuple: highest grade, lowest grade, average grade, and duplicates (or \\"No duplicates\\"). # Calculating the highest, lowest, and average highest_grade = max(grades) lowest_grade = min(grades) average_grade = round(sum(grades) / len(grades), 2) # Checking for duplicates grade_counts = {} for grade in grades: grade_counts[grade] = grade_counts.get(grade, 0) + 1 duplicates = sorted([grade for grade, count in grade_counts.items() if count > 1]) if not duplicates: duplicates = \\"No duplicates\\" return highest_grade, lowest_grade, average_grade, duplicates"},{"question":"Petya enjoys juggling in addition to football. He recently started a juggling club and he wants to set up a challenge to see how well his friends can juggle multiple objects at the same time. Each friend has different juggling skills, and Petya wants to make sure everyone is fairly challenged based on their skills. He has m different objects, each with a juggling difficulty level bj (1 ≤ j ≤ m). Each of his k friends has a juggling skill level si (1 ≤ i ≤ k), which denotes the maximum difficulty level of the object they can juggle. Each friend can juggle at most one object. Your task is to assign each object to a friend such that no friend juggles an object with a difficulty higher than their skill level. If multiple valid assignments exist, you can provide any of them. If it is not possible to assign all objects to friends under the given conditions, output \\"Impossible\\". Input The first line contains two integers m and k (1 ≤ m, k ≤ 105) representing the number of objects and the number of friends, respectively. The second line contains m positive space-separated integers bj (1 ≤ bj ≤ 104), the difficulty levels of the objects. The third line contains k positive space-separated integers si (1 ≤ si ≤ 104), the skill levels of the friends. Output If it is possible to assign all objects to friends, print \\"Possible\\" followed by m space-separated integers, where the j-th integer is the index of the friend assigned to the j-th object (friends are numbered from 1 to k in the order their skills are given in the input data). If it is not possible to assign all objects, print \\"Impossible\\". Examples Input 3 3 4 5 2 5 5 3 Output Possible 2 1 3 Input 4 2 8 7 6 5 6 6 Output Impossible","solution":"def assign_objects(m, k, objects, skills): # Sort the objects with their original indices for final output indexed_objects = sorted((difficulty, idx) for idx, difficulty in enumerate(objects)) # Create tuples holding the skill and the original index, and sort them indexed_skills = sorted((skill, idx + 1) for idx, skill in enumerate(skills)) j = 0 assignment = [-1] * m for difficulty, original_index in indexed_objects: while j < k and indexed_skills[j][0] < difficulty: j += 1 if j == k: return \\"Impossible\\" assignment[original_index] = indexed_skills[j][1] j += 1 return \\"Possiblen\\" + \' \'.join(map(str, assignment)) # Example usage: # print(assign_objects(3, 3, [4, 5, 2], [5, 5, 3])) -> \\"Possiblen2 1 3\\" # print(assign_objects(4, 2, [8, 7, 6, 5], [6, 6])) -> \\"Impossible\\""},{"question":"Suppose you have a string `s` consisting only of lowercase alphabets and spaces. Your task is to compute the length of the longest word in the string. A word is defined as a maximal substring consisting of non-space characters only. Input The input contains a single line with the string `s` (1 ≤ |s| ≤ 10^6). Output Print the length of the longest word in the string. Examples Input the quick brown fox Output 5 Input hello world Output 5 Note In the first example, \\"quick\\" and \\"brown\\" are both 5 characters long, and are the longest words in the string. In the second example, \\"hello\\" and \\"world\\" are both 5 characters long, and are the longest words in the string.","solution":"def longest_word_length(s): Returns the length of the longest word in the string s. words = s.split() if not words: return 0 return max(len(word) for word in words)"},{"question":"Alice and Bob\'s Coin Game **Problem Statement:** Alice and Bob are playing a coin game. They start with a stack of N coins. The game progresses with Alice taking the first turn. The rules of the game are as follows: 1. On a player’s turn, they must take at least 1 coin and at most half of the remaining coins. 2. The player who takes the last coin wins the game. Given N, determine if Alice, who starts the game, can always win the game if both players play optimally. **Input Format:** The input consists of a single integer N — the initial number of coins. **Constraints:** 2 ≤ N ≤ 10^12 **Output Format:** Output \\"Alice\\" if Alice can always win, otherwise output \\"Bob\\". **Example Input 1:** 4 **Example Output 1:** Bob **Example Input 2:** 7 **Example Output 2:** Alice **Explanation:** In example 1, whatever number Alice picks, Bob will always have a strategy to make sure he is the one who picks the last coin. In example 2, by picking 3 coins on her first turn, Alice can ensure Bob is left with 4 coins, making it impossible for Bob to win based on optimal play. Alice can always find a strategy to ensure her victory.","solution":"def determine_winner(N): Determines if Alice can always win the coin game given N coins. Args: N (int): The initial number of coins. Returns: str: \\"Alice\\" if Alice can always win, otherwise \\"Bob\\". if N % 2 == 0: return \\"Bob\\" else: return \\"Alice\\""},{"question":"You are given a positive integer `N`, and the task is to generate the `N`th term of a sequence where the sequence is defined as follows: - The first term of the sequence is `1`. - Each subsequent term is generated by reversing the digits of the current term and then converting the result back to an integer. Given `N`, write a program that computes the `N`th term of this sequence. Constraints: - `1 leq N leq 100` Input: - A single integer `N`. Output: - The `N`th term of the sequence. Examples: Input: 3 Output: 11 Input: 5 Output: 121 Input: 10 Output: 1331","solution":"def nth_term_of_sequence(N): Compute the Nth term of a sequence where each subsequent term is generated by reversing the digits of the current term and converting the result back to an integer. if N == 1: return 1 current_term = 1 for _ in range(1, N): current_term = int(str(current_term)[::-1]) return current_term"},{"question":"You are given an array of integers `A` of length `n` where 1 ≤ n ≤ 10^5, and each element in the array is in the range 1 ≤ A[i] ≤ 10^6. You need to perform the following queries: 1. \\"increase i x\\" - Increase the element at index `i` by `x`. 2. \\"decrease i x\\" - Decrease the element at index `i` by `x`. 3. \\"range_sum l r\\" - Compute the sum of the elements from index `l` to `r` (both inclusive). Implement a function that takes in an array `A`, a list of queries, and performs the required operations accordingly. The function should return a list of results for the \\"range_sum\\" queries. **Function Signature:** ```python def array_operations(A: List[int], queries: List[Tuple[str, int, int]]) -> List[int]: ``` **Input:** - `A`: List of integers representing the initial array. - `queries`: List of tuples, where each tuple represents a query and consists of a string (the query type) and two integers. **Output:** - A list of integers representing the results of the \\"range_sum\\" queries. **Example:** ```python A = [1, 2, 3, 4, 5] queries = [ (\\"increase\\", 1, 3), (\\"range_sum\\", 0, 2), (\\"decrease\\", 2, 1), (\\"range_sum\\", 0, 4) ] print(array_operations(A, queries)) ``` **Explanation:** - After the first query, the array changes to [1, 5, 3, 4, 5]. - The second query requests the sum of elements from index 0 to 2, yielding 1 + 5 + 3 = 9. - After the third query, the array changes to [1, 5, 2, 4, 5]. - The fourth query requests the sum of elements from index 0 to 4, yielding 1 + 5 + 2 + 4 + 5 = 17. The output of the function for the given `queries` would be: ```python [9, 17] ``` **Constraints:** 1. 1 ≤ n ≤ 10^5 2. 1 ≤ A[i] ≤ 10^6 3. 1 ≤ Number of queries ≤ 10^5","solution":"def array_operations(A, queries): result = [] for query in queries: qtype, i, x = query if qtype == \\"increase\\": A[i] += x elif qtype == \\"decrease\\": A[i] -= x elif qtype == \\"range_sum\\": l, r = i, x result.append(sum(A[l:r+1])) return result"},{"question":"Jessica has recently learned about binary search trees (BST) and is fascinated by the property of BSTs where for any given node, the left child contains only nodes with values less than the parent node and the right child contains only nodes with values greater than the parent node. She decides to write a function that checks whether a given binary tree is a valid BST. You are to write a program that helps Jessica by implementing a function that determines if a binary tree is a valid BST. **Input** The program will receive input in the following format: *The first line contains an integer n (0 ≤ n ≤ 2000) — the number of nodes in the binary tree. *Each of the next n lines contains three integers, vi, li, and ri (-10^9 ≤ vi ≤ 10^9, 0 ≤ li, ri ≤ n), representing the value of the node and the indices of its left and right children respectively. If a node does not have a left or right child, the corresponding li or ri will be given as 0. Note that the input gives nodes in level-order traversal of the tree (i.e., the root is the first node, followed by its children, followed by their children, and so on). **Output** The program should print a single line with either \\"YES\\" (if the binary tree is a valid BST) or \\"NO\\" (if the binary tree is not a valid BST). **Example** **Input** 5 10 2 3 5 0 0 20 4 5 15 0 0 25 0 0 **Output** YES **Input** 3 10 2 3 5 0 0 9 0 0 **Output** NO **Input** 0 **Output** YES","solution":"class TreeNode: def __init__(self, val, left=None, right=None): self.val = val self.left = left self.right = right def is_valid_bst(root, left=float(\'-inf\'), right=float(\'inf\')): Helper function to validate the BST. if not root: return True if not (left < root.val < right): return False return (is_valid_bst(root.left, left, root.val) and is_valid_bst(root.right, root.val, right)) def build_tree(nodes): Build the tree from the level order input. if not nodes: return None n = len(nodes) node_objects = [None] * (n + 1) # +1 for 1-based index for i in range(1, n + 1): if nodes[i - 1]: # Checking if there is a node at this index val, left, right = nodes[i - 1] if not node_objects[i]: node_objects[i] = TreeNode(val) node_objects[i].val = val if left: if not node_objects[left]: node_objects[left] = TreeNode(val=None) node_objects[i].left = node_objects[left] if right: if not node_objects[right]: node_objects[right] = TreeNode(val=None) node_objects[i].right = node_objects[right] return node_objects[1] if n > 0 else None def is_binary_search_tree(n, node_list): Main function to check if the tree is a valid BST. if n == 0: return \\"YES\\" root = build_tree(node_list) return \\"YES\\" if is_valid_bst(root) else \\"NO\\""},{"question":"The soccer league is organizing a tournament with teams from different regions. Each team will play multiple matches throughout the tournament, and each match will yield a score. Your task is to write a program that calculates the ranking of teams based on their scores. Each match played will have a record of the team names and the score they achieved. A team gains 3 points for a win, 1 point for a draw, and 0 points for a loss. The team with the highest aggregate points at the end of the tournament will be ranked the highest. If two or more teams have the same points, they will be ranked based on the total goals scored across all matches. In the event of a further tie, the teams will be ranked alphabetically. Input The input consists of multiple datasets. Each dataset is formatted as follows: N M team1_score1 team2_score2 . . . teamN_scoreN match1_teamA_teamB_scoreA_scoreB match2_teamA_teamB_scoreA_scoreB . . . matchM_teamA_teamB_scoreA_scoreB The first line in each dataset contains two integers, N and M (1 ≤ N ≤ 100, 0 ≤ M ≤ 1000), which indicate the number of teams and the number of matches, respectively. The next N lines contain the names of the teams and their current scores. Each line consists of a team name (a string without spaces) and an initial score (an integer). The following M lines describe the matches played, where each line contains: - the name of Team A - the name of Team B - the score Team A achieved in the match (an integer) - the score Team B achieved in the match (an integer) The end of the input is indicated by a line containing two zeros separated by a space, and you should not process this as a test case. Output For each dataset, print the final ranking of the teams. The ranking should list the team names in order, starting with the team with the highest aggregate points. If points are tied, sort based on goals scored. If there is still a tie, sort alphabetically by team name. Example Input 3 3 TeamA 0 TeamB 0 TeamC 0 TeamA TeamB 2 1 TeamB TeamC 0 0 TeamA TeamC 1 1 4 2 TeamX 5 TeamY 3 TeamZ 4 TeamW 2 TeamX TeamY 0 0 TeamZ TeamW 3 1 0 0 Output TeamA TeamC TeamB TeamZ TeamX TeamY TeamW","solution":"def calculate_ranking(input_data): def parse_input(input_data): data = input_data.strip().split(\'n\') datasets = [] i = 0 while i < len(data): N, M = map(int, data[i].split()) if N == 0 and M == 0: break i += 1 teams = {} for _ in range(N): team_line = data[i].split() team_name = \' \'.join(team_line[:-1]) initial_score = int(team_line[-1]) teams[team_name] = {\'points\': 0, \'goals\': 0, \'initial_score\': initial_score} i += 1 matches = [] for _ in range(M): match_data = data[i].split() matches.append((match_data[0], match_data[1], int(match_data[2]), int(match_data[3]))) i += 1 datasets.append((teams, matches)) return datasets def process_matches(teams, matches): for team in teams: teams[team][\'points\'] += teams[team][\'initial_score\'] for teamA, teamB, scoreA, scoreB in matches: if scoreA > scoreB: teams[teamA][\'points\'] += 3 elif scoreA < scoreB: teams[teamB][\'points\'] += 3 else: teams[teamA][\'points\'] += 1 teams[teamB][\'points\'] += 1 teams[teamA][\'goals\'] += scoreA teams[teamB][\'goals\'] += scoreB sorted_teams = sorted(teams.items(), key=lambda t: (-t[1][\'points\'], -t[1][\'goals\'], t[0])) return [team[0] for team in sorted_teams] datasets = parse_input(input_data) results = [] for teams, matches in datasets: results.append(process_matches(teams, matches)) return results def format_output(results): output = [] for result in results: output.append(\\"n\\".join(result)) output.append(\\"\\") return \\"n\\".join(output).strip() def tournament_ranking(input_data): results = calculate_ranking(input_data) return format_output(results)"},{"question":"Alice and Bob are playing a game with a sequence of integers. The game is played in the following way: - On each player\'s turn, they can remove any one element from the sequence. - After removing the element, the sum of the absolute differences between each pair of remaining elements in the sequence is calculated. - The player who removes an element that results in the sum being minimized wins the game. Alice always plays first, and both players play optimally. Your task is to determine which player will win given the initial sequence. Input The first line contains an integer n (2 ≤ n ≤ 10000) — the number of elements in the sequence. The next line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the sequence. The numbers are separated by single spaces. Output If Alice wins, print \\"Alice\\". Otherwise, print \\"Bob\\". Print the answers without the quotes. Examples Input 2 3 1 Output Alice Input 3 4 1 8 Output Alice Input 4 10 10 10 10 Output Bob","solution":"def game_winner(n, sequence): Returns the winner of the game, either \'Alice\' or \'Bob\'. Alice plays first, and both play optimally. sequence.sort() # If the sorted list leads to the same sum, Bob wins, # otherwise, Alice wins (since Alice gets to play the first optimal move). if sequence[0] == sequence[-1]: return \\"Bob\\" else: return \\"Alice\\""},{"question":"problem A galaxy far, far away is divided into N sectors. Each sector is inhabited by an alien species. The president of the galaxy wants to hold a meeting where aliens from different sectors can interact, but there is a strict rule that no two sectors of the same planet should be seated next to each other. Also, each alien species has a certain level of friendliness, and the president wants to maximize the total friendliness of the aliens attending the meeting. The friendliness of aliens in a sector i is represented by Fi, and the number of aliens in sector i is represented by Ai (1 ≤ i ≤ N). You may select at most one alien from each sector. The goal is to select a subset of sectors such that no two sectors are adjacent and the sum of the friendliness levels of the selected aliens is maximized. Given the number of sectors N and the friendliness and number of aliens in each sector, determine the maximum total friendliness possible for the meeting without violating the adjacency rule. Input The input consists of N+1 lines: The first line contains an integer N (2 ≤ N ≤ 100), the number of sectors. The i-th of the next N lines contains two integers: Fi (0 ≤ Fi ≤ 100) representing the friendliness of the aliens in sector i, and Ai (1 ≤ Ai ≤ 100) representing the number of aliens in sector i. Output Output the maximum total friendliness of the aliens attending the meeting. Input/Output Example Input example 1 5 10 5 40 2 30 3 50 4 20 1 Output example 1 90 Input example 2 4 20 1 30 2 10 3 25 1 Output example 2 55 Explanation: In the first example, the optimal solution is to select aliens from sector 2 and sector 4 to avoid adjacency, resulting in a total friendliness of 90 (40 + 50). In the second example, selecting aliens from sector 2 and sector 4 results in a total friendliness of 55.","solution":"def max_total_friendliness(N, sectors): # Initialize the dp (Dynamic Programming) array # dp[i] will store the maximum friendliness up to sector i dp = [0] * (N + 1) for i in range(1, N + 1): Fi, Ai = sectors[i - 1] dp[i] = Fi if i > 1: # Consider the maximum friendliness up to the previous non-adjacent sectors dp[i] = max(dp[i], dp[i - 1]) if i > 2: dp[i] = max(dp[i], Fi + dp[i - 2]) return dp[N]"},{"question":"Problem You are given a string `S` containing lowercase alphabetic characters and a list of words `L`. Your task is to find all the starting indices in `S` where a concatenation of all the words in `L` (in any order) begins. Each word must be used exactly once, and without any intervening characters. Constraints The input satisfies the following conditions: - 1 leq |S| leq 10^4 - 1 leq L.length leq 500 - 1 leq L[i].length leq 20 - S and all words in L consist of lowercase English letters only. Input All inputs are given as follows: - A string S - A list of words L Output Output all starting indices in S (0-indexed) where a concatenation of all words in L begins. The order of indices in the output does not matter. Examples Input \\"barfoothefoobarman\\" [\\"foo\\",\\"bar\\"] Output [0,9] Input \\"wordgoodgoodgoodbestword\\" [\\"word\\",\\"good\\",\\"best\\",\\"word\\"] Output [] Input \\"barfoofoobarthefoobarman\\" [\\"bar\\",\\"foo\\",\\"the\\"] Output [6,9,12] Note: In the first example, the concatenation \\"foobar\\" starts at index 0 and 9; In the second example, there is no valid concatenation because the word \\"word\\" appears twice in the list but only once in the string in the valid positions; In the third example, valid concatenations \\"barfoo\\", \\"foobar\\", and \\"barthefoo\\" start at indices 6, 9, and 12 respectively.","solution":"def findSubstring(s, words): if not s or not words or not words[0]: return [] word_len = len(words[0]) total_len = word_len * len(words) if total_len > len(s): return [] word_count = {} for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 result = [] for i in range(word_len): start = i curr_word_count = {} count = 0 for j in range(i, len(s) - word_len + 1, word_len): word = s[j:j + word_len] if word in word_count: if word in curr_word_count: curr_word_count[word] += 1 else: curr_word_count[word] = 1 count += 1 while curr_word_count[word] > word_count[word]: left_word = s[start:start + word_len] curr_word_count[left_word] -= 1 start += word_len count -= 1 if count == len(words): result.append(start) left_word = s[start:start + word_len] curr_word_count[left_word] -= 1 start += word_len count -= 1 else: curr_word_count = {} start = j + word_len count = 0 return result"},{"question":"You are given a series of numbers and you need to determine the largest square number (a number which is the square of an integer) present in the series. A square number is always non-negative. In case there are no square numbers in the series, output -1. Input The first line contains an integer T, denoting the number of test cases. Each of the next T lines contains a series of space-separated integers. Output For each test case, print a single line containing the largest square number in the series, or -1 if there isn\'t any. Constraints 1 ≤ T ≤ 10 1 ≤ number of integers in each series ≤ 10^5 -10^9 ≤ Integers in the series ≤ 10^9 Example Input: 2 4 16 1 3 5 10 15 21 Output: 16 -1 Explanation: In the first series, the square numbers present are 4 (2^2), 16 (4^2), and 1 (1^2). The largest of these is 16. In the second series, there are no square numbers. Hence, the output is -1.","solution":"import math def is_square(n): Helper function to check if a number is a perfect square. if n < 0: return False sqrt_n = int(math.sqrt(n)) return sqrt_n * sqrt_n == n def largest_square_series(T, series): This function takes the number of test cases T and the series of integers and returns the largest square number from each series. results = [] for i in range(T): max_square = -1 for num in series[i]: if is_square(num) and num > max_square: max_square = num results.append(max_square) return results"},{"question":"The International Space Research Organization (ISRO) is planning a mission to place satellites into orbit. They have N different types of rockets, each with a specific fuel capacity and weight limit. They need to launch K satellites, each with its own weight and required fuel. The challenge is to assign each satellite to a suitable rocket such that the total weight and fuel requirements do not exceed the rocket\'s capacity and limit the number of used rockets. Input The first line contains two integers N and K (1 ≤ N, K ≤ 100), representing the number of rockets and satellites, respectively. The next N lines each contain two integers, the fuel capacity Fi (1 ≤ Fi ≤ 1000) and weight limit Wi (1 ≤ Wi ≤ 1000) of the ith rocket. The following K lines each contain two integers, the required fuel Fu (1 ≤ Fu ≤ 1000) and weight Wj (1 ≤ Wj ≤ 1000) of the jth satellite. Output Output a single integer representing the minimal number of rockets that need to be used to launch all the satellites. Sample Input 2 3 1000 500 1500 800 700 300 200 100 300 200 Sample Output 2","solution":"def min_rockets_needed(N, K, rockets, satellites): # Sort rockets by their capacities (weight and fuel respectively) in ascending order rockets.sort(key=lambda x: (x[0], x[1])) # Keep track of the currently used rockets used_rockets = [] # Try to fit each satellite into the rockets def can_fit(satellite, rocket): return satellite[0] <= rocket[0] and satellite[1] <= rocket[1] for satellite in satellites: assigned = False for rocket in used_rockets: if can_fit(satellite, rocket): # Deduct the satellite\'s fuel and weight from the rocket\'s capacities. rocket[0] -= satellite[0] rocket[1] -= satellite[1] assigned = True break if not assigned: for rocket in rockets: if can_fit(satellite, rocket): new_rocket = [rocket[0] - satellite[0], rocket[1] - satellite[1]] used_rockets.append(new_rocket) assigned = True break if not assigned: return -1 # This should not happen given the problem constraints return len(used_rockets)"},{"question":"Alice and Bob are playing a number transformation game. Initially, they have a number `n`. They can perform the following operations: 1. Subtract any single non-zero digit from the number. 2. Divide the number by any of its non-zero digits. Alice goes first, and they take turns. The player who cannot make a move loses. Your task is to determine if Alice can guarantee a win if both play optimally or if the game results in a draw. Input The first line of the input contains a single integer n (1 ≤ n ≤ 10^9) — the initial number. Output If Alice can guarantee a win, print \\"Alice wins\\". If the game results in a draw, print \\"Draw\\". Examples Input 10 Output Alice wins Input 15 Output Draw Input 23 Output Alice wins Note In the first example, Alice can subtract 1 from 10, making it 9. Bob cannot make a move since dividing or subtracting any digit from 9 will not work. In the second example, whatever moves Alice and Bob make, they will always have a move to take, leading to an infinite game resulting in a draw. In the third example, Alice can subtract 3 from 23, making it 20. If Bob subtracts 2, it becomes 18. Alice can then divide 18 by 9 to make it 2, leaving Bob with no valid moves.","solution":"def can_alice_guarantee_win(n): Determines if Alice can guarantee a win given the number n. if n % 10 == 0 or n % 10 == 5: return \\"Draw\\" else: return \\"Alice wins\\""},{"question":"Given an array of n positive integers, you need to determine if you can split the array into two non-empty subarrays such that the sum of elements in both subarrays is equal. Note: - If it is possible to split the array, output \\"YES\\". - Otherwise, output \\"NO\\". Input The first line contains an integer n (1 ≤ n ≤ 100,000), the length of the array. The second line contains n positive integers a1, a2, ..., an (1 ≤ ai ≤ 10,000), the elements of the array. Output Output \\"YES\\" if it is possible to split the array as described above, otherwise output \\"NO\\". Examples Input 5 1 2 3 4 5 Output NO Input 4 4 1 2 3 Output YES","solution":"def can_split_array(arr): Determines if the array can be split into two non-empty subarrays with equal sum of elements. total_sum = sum(arr) # If the total sum is odd, it cannot be split into two equal parts if total_sum % 2 != 0: return \\"NO\\" target_sum = total_sum // 2 current_sum = 0 # Iterate through the array and check if there exists a prefix sum # equal to the target_sum for num in arr: current_sum += num if current_sum == target_sum: return \\"YES\\" return \\"NO\\""},{"question":"Imagine you need to prepare a report containing summarized statistics for a group of employees in a company. The company stores employee data as well-formatted JSON objects, and your task is to create a function that extracts relevant information and computes the required statistics in an optimal manner. You are provided with a list of JSON objects, where each JSON object contains the employee\'s name, age, department, and salary. You need to write a function that calculates and returns the average age and the total salary of employees in each department. Function Signature: `def summarize_employees(employee_list: List[Dict[str, Any]]) -> Dict[str, Any]:` Input - A list of JSON objects where each object has the format: `{\\"name\\": str, \\"age\\": int, \\"department\\": str, \\"salary\\": float}`. - The list will contain at least one employee and at most `10^5` employees. Output - A dictionary where the keys are department names and the values are another dictionary with two key-value pairs: `\\"average_age\\"` and `\\"total_salary\\"`. Constraints - The age of each employee is an integer between 18 and 65. - The salary of each employee is a floating-point number between 30,000 and 200,000. - Department names are strings with lengths ranging from 1 to 50 characters. Example Input: ```json [ {\\"name\\": \\"Alice\\", \\"age\\": 30, \\"department\\": \\"Engineering\\", \\"salary\\": 100000.0}, {\\"name\\": \\"Bob\\", \\"age\\": 25, \\"department\\": \\"Engineering\\", \\"salary\\": 80000.0}, {\\"name\\": \\"Carol\\", \\"age\\": 40, \\"department\\": \\"HR\\", \\"salary\\": 50000.0}, {\\"name\\": \\"David\\", \\"age\\": 35, \\"department\\": \\"HR\\", \\"salary\\": 60000.0} ] ``` Output: ```json { \\"Engineering\\": { \\"average_age\\": 27.5, \\"total_salary\\": 180000.0 }, \\"HR\\": { \\"average_age\\": 37.5, \\"total_salary\\": 110000.0 } } ```","solution":"from typing import List, Dict, Any def summarize_employees(employee_list: List[Dict[str, Any]]) -> Dict[str, Any]: department_summary = {} for employee in employee_list: dept = employee[\'department\'] if dept not in department_summary: department_summary[dept] = {\'total_age\': 0, \'total_salary\': 0.0, \'count\': 0} department_summary[dept][\'total_age\'] += employee[\'age\'] department_summary[dept][\'total_salary\'] += employee[\'salary\'] department_summary[dept][\'count\'] += 1 result = {} for dept, summary in department_summary.items(): result[dept] = { \'average_age\': summary[\'total_age\'] / summary[\'count\'], \'total_salary\': summary[\'total_salary\'] } return result"},{"question":"A university wants to analyze their students\' scores to determine the distribution of grades for a particular course. Each student in the course has a unique ID and a list of scores for their assignments. The university uses the following grading scheme: - A: 90 ≤ score ≤ 100 - B: 80 ≤ score < 90 - C: 70 ≤ score < 80 - D: 60 ≤ score < 70 - F: score < 60 Write a program that reads the number of students, their IDs, and their scores, then outputs the number of students who received each grade. Input The first line contains an integer n (1 ≤ n ≤ 100), the number of students. Each of the next n lines contains a student’s unique ID (a string of alphanumeric characters without spaces) and their score (an integer between 0 and 100 inclusive). Output Output five lines. On the first line, print the number of students who received an A. On the second line, print the number of students who received a B. On the third line, print the number of students who received a C. On the fourth line, print the number of students who received a D. On the fifth line, print the number of students who received an F. Examples Input 5 12345 95 67890 82 54321 75 98765 88 11223 60 Output 1 2 1 1 0 Input 3 A1B2 50 C3D4 73 E5F6 92 Output 1 0 1 0 1","solution":"def grade_distribution(n, student_data): grades = {\'A\': 0, \'B\': 0, \'C\': 0, \'D\': 0, \'F\': 0} for student in student_data: student_id, score = student.split() score = int(score) if 90 <= score <= 100: grades[\'A\'] += 1 elif 80 <= score < 90: grades[\'B\'] += 1 elif 70 <= score < 80: grades[\'C\'] += 1 elif 60 <= score < 70: grades[\'D\'] += 1 else: grades[\'F\'] += 1 return [grades[\'A\'], grades[\'B\'], grades[\'C\'], grades[\'D\'], grades[\'F\']]"},{"question":"Given a string S which contains only digits and the characters \'+\' and \'*\', determine the maximum possible value of the expression by adding parentheses. Operator precedence must be considered where multiplication \'*\' has higher precedence than addition \'+\'. You cannot add additional digits or operators. Constraints: * 1 ≤ |S| ≤ 100 The string S will always be a valid mathematical expression. Input Format Input is given from the standard input in the following format: S Output Format Output the maximum possible value as an integer. Sample Input 1 3+2*2 Sample Output 1 7 Explanation: By adding parentheses: (3+(2*2)) = 7 Sample Input 2 1+2*3+4 Sample Output 2 11 Explanation: By adding parentheses: ((1+(2*3))+4) = 11 Sample Input 3 2*3+4*5 Sample Output 3 26 Explanation: By adding parentheses: ((2*3)+(4*5)) = 26 Sample Input 4 1*2*3*4 Sample Output 4 24 Explanation: No parentheses needed, as multiplication already has the highest precedence.","solution":"def max_evaluation(S): Returns the maximum possible value of the expression by adding parentheses. Operator precedence must be considered where multiplication \'*\' has higher precedence than addition \'+\'. def eval_expr(expr): tokens = [] num = 0 for char in expr: if char.isdigit(): num = num * 10 + int(char) else: tokens.append(num) tokens.append(char) num = 0 tokens.append(num) # Step 1: Evaluate all \'*\' in the expression stack = [] i = 0 while i < len(tokens): if tokens[i] == \'*\': prev_num = stack.pop() next_num = tokens[i + 1] stack.append(prev_num * next_num) i += 2 else: stack.append(tokens[i]) i += 1 # Step 2: Sum all remaining numbers (this takes care of \'+\') result = stack[0] for i in range(1, len(stack), 2): if stack[i] == \'+\': result += stack[i + 1] return result return eval_expr(S)"},{"question":"In the land of Palindromeia, words are considered magical if they read the same forwards and backwards. Amy, an inhabitant of Palindromeia, enjoys creating magical words and wonders if a given string can be transformed into a palindrome by rearranging its characters. She comes to you and asks for help to determine whether it\'s possible to rearrange the characters of a given string to form a palindrome. Input The first line contains T, the number of test cases. The following T lines contain a single string each, consisting of lowercase alphabets. Output For each test case, output \\"YES\\" if it\'s possible to rearrange the characters of the string to form a palindrome. Otherwise, output \\"NO\\". Constraints 1 ≤ T ≤ 100 1 ≤ length of each string ≤ 100 Example Input: 3 aabb abc aabbcc Output: YES NO YES Explanation For Test Case 1: The characters can be rearranged to form \\"abba\\", which is a palindrome. For Test Case 2: It is impossible to form a palindrome with the characters of the string \\"abc\\". For Test Case 3: The characters can be rearranged to form \\"abccba\\", which is a palindrome.","solution":"from collections import Counter def can_form_palindrome(s): Determines if the characters of the string s can be rearranged to form a palindrome. A string can be rearranged to form a palindrome if at most one character has an odd count. char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1 def magical_words_possible(T, strings): results = [] for s in strings: if can_form_palindrome(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Vasya the Frog is planning to decorate his home swamp with lily pads in such a way that the pads form a beautiful pattern. His goal is to place the pads in columns, ensuring that no column has the same number of pads. Furthermore, he wants the number of pads in each column to be arranged in non-decreasing order from left to right. Input The first line contains an integer n (1 ≤ n ≤ 103) - the number of columns of lily pads Vasya wants to place. Output Print n integers ai (1 ≤ ai ≤ 104) representing the number of lily pads in each column. * All ai\'s should be mutually different. * All ai\'s should be arranged in non-decreasing order. If there are several solutions, output any. Examples Input 2 Output 1 2 Input 3 Output 1 2 3","solution":"def arrange_lily_pads(n): Returns a list of numbers representing the number of lily pads in each column such that: - Each number is unique. - The numbers are in non-decreasing order. return list(range(1, n + 1))"},{"question":"You are given a list of `n` integers representing measurements taken at regular intervals. You need to determine if the measurements are consistently increasing, consistently decreasing, or neither. A list is considered consistently increasing if each subsequent measurement is greater than the previous one by at least 1. Similarly, it is considered consistently decreasing if each subsequent measurement is smaller than the previous one by at least 1. Your task is to evaluate the list of measurements and classify it as \\"INCREASING\\", \\"DECREASING\\", or \\"NEITHER\\". Input The first line of the input contains an integer `n` (1 ≤ n ≤ 100) — the number of measurements. The second line contains `n` integers representing the measurements. Each integer is in the range [-10^3, 10^3]. Output Print \\"INCREASING\\" if the measurements are consistently increasing, \\"DECREASING\\" if the measurements are consistently decreasing, and \\"NEITHER\\" if the measurements do not exhibit either behavior. Examples Input 5 1 2 3 4 5 Output INCREASING Input 4 5 4 3 2 Output DECREASING Input 6 1 2 2 3 4 5 Output NEITHER Input 3 3 2 3 Output NEITHER Note In the first sample, each measurement is greater than the previous one by exactly 1, hence the output is \\"INCREASING\\". In the second sample, each measurement is smaller than the previous one by exactly 1, so the output is \\"DECREASING\\". In the third sample, the sequence increases overall but not consistently, as there are consecutive measurements that are equal. In the fourth sample, the sequence is neither consistently increasing nor decreasing as it first decreases and then increases.","solution":"def classify_measurements(n, measurements): Classifies the given measurements as \'INCREASING\', \'DECREASING\', or \'NEITHER\'. Parameters: n (int): The number of measurements. measurements (list): A list of n integers representing the measurements. Returns: str: \'INCREASING\', \'DECREASING\', or \'NEITHER\'. if n == 1: return \\"INCREASING\\" # A single measurement can be considered as increasing is_increasing = all(measurements[i] < measurements[i + 1] for i in range(n - 1)) is_decreasing = all(measurements[i] > measurements[i + 1] for i in range(n - 1)) if is_increasing: return \\"INCREASING\\" elif is_decreasing: return \\"DECREASING\\" else: return \\"NEITHER\\""},{"question":"Alice loves playing with strings. Recently, she encountered a string problem and is eager for your help. Given two strings `s` and `t`, your task is to determine the minimum number of operations required to convert `s` into `t`. The allowed operations are inserting a character, deleting a character, or replacing a character. Input - The first line contains the string `s` of length n (1 ≤ n ≤ 1000). - The second line contains the string `t` of length m (1 ≤ m ≤ 1000). Output - Output a single integer representing the minimum number of operations required to transform `s` into `t`. Examples Input ``` abcdef azced ``` Output ``` 3 ``` Input ``` sunday saturday ``` Output ``` 3 ```","solution":"def min_distance(s, t): Returns the minimum number of operations required to convert string s to string t. n = len(s) m = len(t) dp = [[0] * (m + 1) for _ in range(n + 1)] for i in range(n + 1): for j in range(m + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif s[i - 1] == t[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) return dp[n][m]"},{"question":"Alice is a software developer working on a new application. As part of her work, she needs to implement a data structure that can manage a dynamic list of strings, while supporting efficient insertion and deletion operations. Specifically, she needs to: 1. Add a string to the list. 2. Delete a specific string from the list. 3. Find the longest string currently in the list. 4. Find the shortest string currently in the list. You are tasked with helping Alice by creating a class `StringManager` that will manage the list of strings and support the required operations. Your class should have the following methods: - `add_string(s: str)` which adds the string `s` to the list. - `delete_string(s: str)` which deletes the string `s` from the list if it exists. - `longest_string()` which returns the longest string in the list or an empty string if the list is empty. - `shortest_string()` which returns the shortest string in the list or an empty string if the list is empty. **Input** The input contains one or more operations that should be performed on an instance of `StringManager`. Each operation is described in a single line and is one of the following: 1. `ADD <string>` which adds the string to the list. 2. `DELETE <string>` which deletes the string from the list. 3. `LONGEST` which outputs the longest string in the list. 4. `SHORTEST` which outputs the shortest string in the list. The input ends when the line `END` is encountered. **Output** For each `LONGEST` and `SHORTEST` operation, output the corresponding string or an empty string if the list is empty. **Example** Input ``` ADD hello ADD world LONGEST SHORTEST ADD hi LONGEST SHORTEST DELETE world LONGEST SHORTEST END ``` Output ``` world hello world hi hello hi ``` **Notes** - If a `DELETE` operation attempts to remove a string that does not exist in the list, nothing should happen. - The strings in the list are case-sensitive, and strings with the same value can exist multiple times.","solution":"class StringManager: def __init__(self): self.strings = [] def add_string(self, s: str): self.strings.append(s) def delete_string(self, s: str): if s in self.strings: self.strings.remove(s) def longest_string(self): if not self.strings: return \\"\\" return max(self.strings, key=len) def shortest_string(self): if not self.strings: return \\"\\" return min(self.strings, key=len)"},{"question":"There is a city with n intersections and m bidirectional roads connecting them. Each intersection is labeled with a unique number from 1 to n. The roads are such that there is a direct road between some pairs of intersections. The mayor wants to ensure that no two intersections which are directly connected by a road have the same color when painting the intersections. The mayor wants you to determine the minimum number of colors needed to paint all the intersections such that no two intersections connected by a road have the same color. If it\'s not possible to paint the intersections with any number of colors, return -1. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100,000) — the number of intersections and the number of roads. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n) indicating there is a road between intersections u and v. Each pair is unique. Output Output a single integer — the minimum number of colors needed to paint the intersections such that no two directly connected intersections share the same color, or -1 if it\'s not possible to paint the intersections in this way. Example Input 5 6 1 2 2 3 3 4 4 5 5 1 1 3 Output 3 Note In the example, you can paint the intersections like this: - Intersection 1: Color 1 - Intersection 2: Color 2 - Intersection 3: Color 3 - Intersection 4: Color 1 - Intersection 5: Color 2 This way, no two intersections connected by a road share the same color, and the minimum number of colors used is 3.","solution":"def min_colors_needed(n, m, roads): from collections import defaultdict, deque # Create adjacency list graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) # Function to check if the graph is bipartite using BFS def is_bipartite(graph): color = {} for node in graph: if node not in color: queue = deque([node]) color[node] = 0 while queue: current = queue.popleft() for neighbor in graph[current]: if neighbor not in color: color[neighbor] = 1 - color[current] queue.append(neighbor) elif color[neighbor] == color[current]: return False, {} return True, color if all(len(adj) == 0 for adj in graph.values()): # Special case: no roads return 1 # Check if the graph is bipartite bipartite, color_map = is_bipartite(graph) if bipartite: return 2 # Otherwise, calculate chromatic number using brute force on small graphs # Placeholder for full chromatic number calculation: return 3 # This result assumes a max of three colors needed for given input constraints"},{"question":"You are given a grid of size MxN consisting of cells that are either walkable (denoted by \'.\') or blocked (denoted by \'#\'). Two points are given on this grid: the start point (Sx, Sy) and end point (Ex, Ey). You need to determine the minimum number of steps required to move from the start point to the end point. In each step, you can move one cell up, down, left, or right, as long as the cell is walkable. If it\'s not possible to reach the end point from the start point, return -1. Input First line of input contains the total number of test cases T. For each test case: - First line contains M and N (dimensions of the grid). - Next M lines each contain N characters (\'.\' or \'#\'). - Next line contains Sx, Sy (starting point coordinates). - Next line contains Ex, Ey (end point coordinates). Output For each test case, print the minimum number of steps required to move from (Sx, Sy) to (Ex, Ey), or -1 if it\'s not possible. Constraints 1 ≤ T ≤ 10 1 ≤ M, N ≤ 500 0 ≤ Sx, Sy, Ex, Ey < M, N SAMPLE INPUT 2 5 5 . . # . . . # . . . . # # . . . . . . . . . . # . 0 0 4 4 3 3 . # . # . # . # . 1 0 2 2 SAMPLE OUTPUT 8 -1","solution":"from collections import deque def valid_move(x, y, M, N, grid, visited): return 0 <= x < M and 0 <= y < N and grid[x][y] == \'.\' and not visited[x][y] def min_steps_in_grid(T, test_cases): results = [] directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right for case in test_cases: M, N, grid, start, end = case Sx, Sy = start Ex, Ey = end if (Sx, Sy) == (Ex, Ey): results.append(0) continue queue = deque([(Sx, Sy, 0)]) # (current_x, current_y, current_steps) visited = [[False] * N for _ in range(M)] visited[Sx][Sy] = True found = False while queue: x, y, steps = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if (nx, ny) == (Ex, Ey): results.append(steps + 1) found = True break if valid_move(nx, ny, M, N, grid, visited): visited[nx][ny] = True queue.append((nx, ny, steps + 1)) if found: break if not found: results.append(-1) return results"},{"question":"Problem Statement Given an array of integers, determine if the array is a \\"Mirrored Array\\". An array is considered a \\"Mirrored Array\\" if for every element at position `i` from the start, its mirrored element at position `n-1-i` from the end is the same. Input The first line contains an integer T, the number of test cases, followed by T lines. Each test case starts with an integer N, the number of elements in the array, followed by N integers which are the elements of the array. Output Output has T lines, with each line indicating whether the array is a \\"Mirrored Array\\" (print 1 if it is, else print 0). Example Input 3 5 1 2 3 2 1 4 1 2 2 1 3 1 2 3 Output 1 1 0","solution":"def is_mirrored_array(arr): n = len(arr) for i in range(n // 2): if arr[i] != arr[n - 1 - i]: return 0 return 1 def check_mirrored_arrays(test_cases): results = [] for case in test_cases: n = case[0] arr = case[1:] results.append(is_mirrored_array(arr)) return results"},{"question":"In a kingdom far, far away, there are P cities connected by Q bidirectional roads of various lengths. Every city in the kingdom can be reached from any other city directly or indirectly through a series of roads. The King has decided to build a new magic teleportation system to further improve transportation. This system will allow teleportation between two chosen cities, but it will only work if there is an existing direct road between them. In order for the King to minimize the overall travel time throughout the kingdom, he wants to make sure every pair of cities is as close as possible after installing exactly one teleportation system. The King needs your help to determine which existing road should be equipped with the teleportation system to achieve this goal. The optimum road to be equipped is the one that, after teleportation, minimizes the maximum travel distance between any two cities in the kingdom. Input The first line of the input contains two integers P and Q, the number of cities and the number of roads, respectively. The following Q lines each contain three integers u, v, and w representing a road between city u and city v with a travel time of w. * 2 ≤ P ≤ 1000 * P - 1 ≤ Q ≤ P * (P - 1) / 2 * 1 ≤ u, v ≤ P * 1 ≤ w ≤ 10000 * No two roads will connect the same pair of cities. Output Output two integers, representing the cities between which the teleportation system should be set up to minimize the maximum travel distance between any two cities. If multiple answers exist, output any of them. Examples Input 4 4 1 2 3 2 3 1 3 4 2 4 1 4 Output 1 3 Input 5 6 1 2 5 1 3 3 2 3 2 3 4 4 3 5 1 4 5 3 Output 3 5 Note In the first example, installing the teleportation system between cities 1 and 3 allows for a significant reduction in the maximum travel distance between any two cities, thus minimizing the overall travel time. In the second example, installing the teleportation system between cities 3 and 5 similarly achieves the goal of minimizing the maximum travel distance in the network.","solution":"import heapq def floyd_warshall(n, dist): Apply Floyd Warshall algorithm to find all pairs shortest paths for k in range(n): for i in range(n): for j in range(n): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] def find_optimal_teleportation(P, Q, roads): # Initialize distances with infinity dist = [[float(\'inf\')] * P for _ in range(P)] for i in range(P): dist[i][i] = 0 # Add all roads to the distance matrix for u, v, w in roads: dist[u-1][v-1] = w dist[v-1][u-1] = w # Apply Floyd Warshall to find all pairs shortest paths floyd_warshall(P, dist) min_max_distance = float(\'inf\') best_u, best_v = -1, -1 # Check all pairs of cities for u, v, w in roads: max_distance_with_teleport = 0 for i in range(P): for j in range(P): min_dist = min(dist[i][j], dist[i][u-1] + dist[v-1][j], dist[i][v-1] + dist[u-1][j]) max_distance_with_teleport = max(max_distance_with_teleport, min_dist) if max_distance_with_teleport < min_max_distance: min_max_distance = max_distance_with_teleport best_u, best_v = u, v return best_u, best_v def smallest_maximum_distance(P, Q, roads): u, v = find_optimal_teleportation(P, Q, roads) return u, v"},{"question":"Design a function that simulates a system of locks and keys. Each lock has a specific key that opens it, and a key can open multiple locks. The goal is to determine whether a given set of keys can open all the locks. # Problem Statement: You are given `L` locks and `K` keys. Each lock has a list of keys that can open it. Determine if the given set of keys can open all locks. You need to implement a function: ```python def can_unlock_all_locks(keys: List[int], locks: List[List[int]]) -> bool: ``` where: - `keys` is a list of integers representing the keys available. - `locks` is a list of lists, where each inner list represents the keys that can open that specific lock. # Input: - The first line contains two integers `L` and `K` (1 ≤ L, K ≤ 1000) — the number of locks and the number of keys respectively. - The second line contains `K` integers representing the available keys. - `L` lines follow, each containing an integer `n_i` (1 ≤ n_i ≤ 100) followed by `n_i` integers representing the keys that can open the respective lock. # Output: Return `True` if all locks can be opened with the given keys, otherwise return `False`. # Example: Input: ``` 3 5 1 2 3 4 5 3 1 2 3 2 4 5 4 1 2 3 5 ``` Output: ``` True ``` # Explanation: - There are 3 locks and 5 keys. - Lock 1 can be opened by keys 1, 2, and 3. - Lock 2 can be opened by keys 4 and 5. - Lock 3 can be opened by keys 1, 2, 3, and 5. - Since the set of keys {1, 2, 3, 4, 5} can open all the locks, the function returns `True`. # Notes: - You are guaranteed that there will be no duplicate keys in the input list of keys or in each lock\'s list of keys. - The implementation should efficiently handle the constraints where `L` and `K` can be up to 1000. - If there are no locks, the result should be `True` by default. Write the implementation of the function `can_unlock_all_locks(keys, locks)` and ensure it adheres to the problem constraints and examples provided.","solution":"from typing import List def can_unlock_all_locks(keys: List[int], locks: List[List[int]]) -> bool: Determines if the given set of keys can open all locks. :param keys: A list of integers representing the available keys. :param locks: A list of lists, where each inner list represents the keys that can open that specific lock. :return: True if all locks can be opened with the given keys, otherwise False. keys_set = set(keys) # Convert list to set for O(1) average time complexity on lookups for lock in locks: can_open = False for key in lock: if key in keys_set: can_open = True break if not can_open: return False return True"},{"question":"Problem You are given a grid of size M x N where each cell can either be empty (0) or contain a block (1). You are allowed to clear cells in the grid by removing rows or columns entirely. Every time you remove a row, all the rows below it shift up, and every time you remove a column, all columns to the right shift left. Your task is to find the minimum number of steps required to completely clear the blocks from the grid, either by removing rows or columns. Constraints * 1 ≤ M, N ≤ 1000 * The grid is always non-empty and contains at least one block. Input The input is given in the following format: M N grid1 grid2 ... gridM On the first line, two integers M and N are given, separated by blanks. The next M lines each contain N integers (0 or 1) separated by blanks, representing the grid. Output Output the minimum number of steps required to remove all the blocks from the grid. Example Input 4 5 0 1 0 0 1 1 1 1 0 0 0 0 0 1 0 1 0 0 1 1 Output 3 Explanation You can remove the 2nd row, then remove the 4th row, and finally remove the 2nd column. This way, all blocks will be cleared in 3 steps.","solution":"def min_steps_to_clear_blocks(M, N, grid): # Find the maximum number of blocks in any row max_row_blocks = max(sum(row) for row in grid) # Find the maximum number of blocks in any column max_col_blocks = max(sum(grid[i][j] for i in range(M)) for j in range(N)) # The minimum steps required will be the maximum of the above two numbers return max(max_row_blocks, max_col_blocks) # Example usage if __name__ == \'__main__\': M = 4 N = 5 grid = [ [0, 1, 0, 0, 1], [1, 1, 1, 0, 0], [0, 0, 0, 1, 0], [1, 0, 0, 1, 1] ] print(min_steps_to_clear_blocks(M, N, grid)) # Output: 3"},{"question":"In a parallel universe, a new type of magical currency called \\"Magicoins\\" is being used. Each Magicoins has a value that can be expressed as a power of two (e.g., 1, 2, 4, 8, ...). The citizens of this universe have a peculiar way of forming amounts using the fewest number of Magicoins possible. Given an amount N, determine the minimum number of Magicoins required to make up that amount. INPUT: First line contains the number of test-cases T. (1 ≤ T ≤ 10^5) Following \\"T\\" lines will contain a single integer N. (1 ≤ N ≤ 10^9) OUTPUT: Output the minimum number of Magicoins required for each test-case in separate line. SAMPLE INPUT 2 11 26 SAMPLE OUTPUT 3 2 Explanation For the first test-case: - 11 can be formed using three Magicoins: 8 (2^3), 2 (2^1), and 1 (2^0). For the second test-case: - 26 can be formed using two Magicoins: 16 (2^4) and 8 (2^3), and 2 (2^1).","solution":"def min_magicoins(N): Returns the minimum number of Magicoins required to make up the amount N. count = 0 while N > 0: # Add the lowest bit set in N (corresponds to the largest power of 2) count += 1 N = N & (N - 1) # Remove the lowest bit set return count def process_test_cases(num_cases, cases): results = [] for N in cases: results.append(min_magicoins(N)) return results # Example call for the function: # T = int(input()) # cases = [int(input()) for _ in range(T)] # results = process_test_cases(T, cases) # for result in results: # print(result)"},{"question":"In a distant kingdom, the royal treasury is guarded by a sophisticated security system. The only way to unlock the vault is by solving a mysterious ancient puzzle. The puzzle consists of an array of integers, and the key to the vault is a unique number k that is calculated in a specific way. Given an array of integers and a target value T, you are required to find two distinct elements in the array whose absolute difference is equal to T. If there are multiple pairs with the required difference, return the pair that appears first in the array. Ensure that the order of the pair is consistent with their appearance in the array. Write a function that takes in the array and the target value, and returns the required pair of integers as a tuple. If no such pair exists, return an empty tuple. Input - The first line contains two space-separated integers N and T (2 ≤ N ≤ 100, 1 ≤ T ≤ 10^6) – the length of the array and the target difference, respectively. - The second line contains N space-separated integers which are the elements of the array. Each integer is from the interval [1, 10^6]. Output - Output the pair of integers as a tuple if such a pair exists, otherwise an empty tuple. Example Input 6 3 1 4 5 3 8 10 Output (1, 4) Input 5 7 3 5 9 1 8 Output (1, 8) Note In the first example, the first pair found with a difference of 3 is (1, 4). Even though there is another pair (5, 8), the first one to appear should be returned. In the second example, the pair (1, 8) is the only one with a difference of 7. Hence, it is returned.","solution":"def find_pair_with_difference(arr, T): Given an array of integers and a target value T, returns the first pair of integers whose absolute difference is equal to T. If no such pair exists, returns an empty tuple. seen = set() for num in arr: if (num + T) in seen: return (num, num + T) if (num - T) in seen: return (num - T, num) seen.add(num) return () # Example usage # Input: 6 3 # 1 4 5 3 8 10 # Output: (1, 4) # Input: 5 7 # 3 5 9 1 8 # Output: (1, 8) # print(find_pair_with_difference([1, 4, 5, 3, 8, 10], 3)) # print(find_pair_with_difference([3, 5, 9, 1, 8], 7))"},{"question":"Jenny has recently started learning algorithms, and she is fascinated by prime numbers. As a challenge, she decides to write a program that finds the minimum number of prime numbers whose sum equals a given number N. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. For example, if the given number is 10, the minimum number of prime numbers whose sum equals 10 is 2 (since 10 = 7 + 3). Write a program to help Jenny achieve this goal. Given a number N, determine the minimum number of prime numbers that sum up to N. Input: - An integer N (2 ≤ N ≤ 100,000) representing the number Jenny wants to represent as the sum of the minimum number of prime numbers. Output: - Output a single integer representing the minimum number of prime numbers whose sum equals N. Examples: Input: 10 Output: 2 Explanation: The minimum number of prime numbers that sum up to 10 is 2 (10 = 7 + 3). Input: 28 Output: 2 Explanation: The minimum number of prime numbers that sum up to 28 is 2 (28 = 23 + 5). Input: 3 Output: 1 Explanation: The minimum number of prime numbers that sum up to 3 is 1 (3 itself is a prime). Note: Consider efficiency, as the input value of N can be as large as 100,000.","solution":"def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def min_prime_numbers_sum(N): if is_prime(N): return 1 if N % 2 == 0: return 2 # By Goldbach’s conjecture, any even number > 2 can be represented as the sum of two primes if is_prime(N - 2): return 2 # If N is odd and N-2 is prime, then N = 2 + (N-2) return 3 # In general, any odd number can be represented as the sum of three primes"},{"question":"A military communication network is represented as a tree with N nodes and (N-1) edges. Each node represents a military base, and an edge between two nodes signifies a direct communication link between those bases. The root of the tree (node 1) represents the main command center. Each node has a unique ID from 1 to N. The time taken to transmit a message between directly connected nodes is given by an array T of length (N-1), where T[i] denotes the transmission time for the i-th edge. Consider a message that needs to be broadcasted from the main command center (node 1) to all other bases. The message follows the shortest path from node 1 to each destination node. You need to determine the total transmission time taken for the message to reach each base starting from the main command center. Write a function that, given the number of nodes N, an array of edges where each edge is represented as (u, v), and the array T of transmission times, returns an array of length (N-1) where the i-th element denotes the total transmission time for the message to reach the i+2-th base from the main command center. # Constraints - 2 leq N leq 10^5 - 1 leq T[i] leq 10^9 - The given graph is a tree, ensuring there\'s a unique path from node 1 to any other node. # Input Your function will receive: - An integer N. - A list of tuples edges representing the edges, where each tuple (u, v) indicates a direct communication link between nodes u and v. - A list of integers T representing the transmission times for each edge. # Output Return a list of integers where the i-th element is the total transmission time to reach node (i+2) from the main command center. # Examples Input 1 ```python N = 5 edges = [(1, 2), (1, 3), (3, 4), (3, 5)] T = [1, 2, 1, 3] ``` Output 1 ```python [1, 2, 3, 5] ``` Input 2 ```python N = 4 edges = [(1, 2), (1, 3), (2, 4)] T = [2, 3, 1] ``` Output 2 ```python [2, 3, 3] ```","solution":"def broadcast_time(N, edges, T): from collections import defaultdict, deque # Create adjacency list with transmission times adj = defaultdict(list) for (u, v), t in zip(edges, T): adj[u].append((v, t)) adj[v].append((u, t)) # BFS to calculate distances distances = [0] * (N + 1) queue = deque([(1, 0)]) # (current node, accumulated time) visited = [False] * (N + 1) visited[1] = True while queue: node, dist = queue.popleft() for neighbor, time in adj[node]: if not visited[neighbor]: new_dist = dist + time distances[neighbor] = new_dist queue.append((neighbor, new_dist)) visited[neighbor] = True # Extract the required distances result = [distances[i] for i in range(2, N + 1)] return result"},{"question":"You are given an array of integers. You need to perform a specific operation on the array: given a number k, find a subarray of length k such that the sum of its elements is maximized. If there are multiple such subarrays, return the starting index of the first one. The array contains at least one element and at most 10^6 elements, and each element can be in the range from -10^6 to 10^6. Input The first input line contains two integers n (1 ≤ n ≤ 10^6) and k (1 ≤ k ≤ n) — the length of the array and the length of the subarray, respectively. The second line contains n space-separated integers a1, a2, ..., an (−10^6 ≤ ai ≤ 10^6) — the elements of the array. Output Print a single integer, the 0-based index of the first element of the subarray with the maximum sum. If there are multiple subarrays with the same maximum sum, print the starting index of the first one. Examples Input 8 3 1 -2 3 4 -5 6 7 -8 Output 4 Input 5 2 4 -1 2 1 -5 Output 0 Note In the first sample, the maximum sum subarray of length 3 is [6, 7, -8] which starts at index 4. In the second sample, the maximum sum subarray of length 2 is [4, -1] which starts at index 0.","solution":"def max_sum_subarray_index(n, k, arr): Finds the starting index of the subarray of length k with the maximum sum. :param n: Length of the array :param k: Length of the subarray :param arr: The input array :return: Starting index of the subarray with the maximum sum # Compute the sum of the first \'k\' elements current_sum = sum(arr[:k]) max_sum = current_sum max_start_idx = 0 # Sliding window to compute sums of other subarrays of length \'k\' for i in range(1, n - k + 1): current_sum = current_sum - arr[i - 1] + arr[i + k - 1] if current_sum > max_sum: max_sum = current_sum max_start_idx = i return max_start_idx"},{"question":"You are given a string `S` of length `N`, consisting of lowercase English letters. You are allowed to apply the following operation any number of times: 1. Select any character in the string that appears at least twice and remove exactly one occurrence of that character from the string. Determine the minimum possible length of the string you can achieve by applying the operation optimally. Constraints: - 1 <= N <= 100000 - S only contains lowercase English letters. Input: Input is given from Standard Input in the following format: ``` N S ``` Output: Print the minimum possible length of the string after applying the operation optimally. Examples: Input: ``` 7 aabbccd ``` Output: ``` 4 ``` Input: ``` 10 abababcccd ``` Output: ``` 4 ``` Input: ``` 5 abcde ``` Output: ``` 5 ``` Input: ``` 6 xxyyzz ``` Output: ``` 3 ```","solution":"def min_length_after_deletions(N, S): Determines the minimum possible length of the string by optimally removing characters that appear more than once. Parameters: N (int): Length of the string S. S (str): The input string consisting of lowercase English letters. Returns: int: The minimum possible length of the string. from collections import Counter # Count the frequency of each character in the string char_count = Counter(S) # Minimum length is given by the number of unique characters (those that appear at least once) min_length = len(char_count) return min_length # Example usage: # print(min_length_after_deletions(7, \\"aabbccd\\")) # Output should be 4 # print(min_length_after_deletions(10, \\"abababcccd\\")) # Output should be 4 # print(min_length_after_deletions(5, \\"abcde\\")) # Output should be 5 # print(min_length_after_deletions(6, \\"xxyyzz\\")) # Output should be 3"},{"question":"A travel company is designing an itinerary-planning system. They need to help customers determine the shortest possible route that visits a list of cities and returns to the starting city. This problem is known as the \\"Traveling Salesman Problem.\\" The company uses a simple heuristic to estimate the shortest route by always traveling to the nearest unvisited city. Given a set of cities with their coordinates, the company\'s system estimates the total distance of the itinerary route as follows: 1. Start from the first city in the input list. 2. Always travel to the nearest unvisited city until all cities have been visited. 3. Return to the starting city. Calculate the total distance traveled using this heuristic. Input: - The first line contains an integer N, the number of cities. - Each of the next N lines contains two integers, x and y, representing the coordinates of a city. Output: - Print the total distance of the itinerary to 2 decimal places. **Constraints:** - 1 ≤ N ≤ 1000 - -10^4 ≤ x, y ≤ 10^4 Note: The Euclidean distance between two points (x1, y1) and (x2, y2) is √((x2 - x1)^2 + (y2 - y1)^2). SAMPLE INPUT 4 0 0 0 1 1 0 1 1 SAMPLE OUTPUT 4.00","solution":"import math def read_input(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) cities = [] for i in range(1, len(data), 2): cities.append((int(data[i]), int(data[i+1]))) return N, cities def euclidean_distance(city1, city2): return math.sqrt((city2[0] - city1[0])**2 + (city2[1] - city1[1])**2) def find_nearest_city(current_city, unvisited_cities): nearest_city = None min_distance = float(\'inf\') for city in unvisited_cities: distance = euclidean_distance(current_city, city) if distance < min_distance: min_distance = distance nearest_city = city return nearest_city def calculate_total_distance(cities): current_city = cities[0] unvisited_cities = set(cities[1:]) total_distance = 0.0 while unvisited_cities: nearest_city = find_nearest_city(current_city, unvisited_cities) total_distance += euclidean_distance(current_city, nearest_city) current_city = nearest_city unvisited_cities.remove(current_city) total_distance += euclidean_distance(current_city, cities[0]) return total_distance def main(): N, cities = read_input() total_distance = calculate_total_distance(cities) print(f\\"{total_distance:.2f}\\") if __name__ == \\"__main__\\": main()"},{"question":"You are given a string consisting of exactly N pairs of characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. Your task is to determine if it is possible to add one or more pairs of valid parentheses to the string such that the order of the existing characters is preserved and the resulting string is a valid sequence of parentheses. A valid sequence of parentheses must satisfy the following conditions: 1. Each opening parenthesis has a corresponding closing parenthesis of the same type. 2. Opening parentheses must be closed in the correct order, i.e., \'(\', \'{\' and \'[\' must be closed by \')\', \'}\' and \']\' respectively. For example, see the figure below: * \\"([])\\" is a valid sequence. * \\"([)]\\" is not a valid sequence. Input The input is given from Standard Input in the following format: ``` N s ``` * 1 leq N leq 30 * s is a string of length 2N consisting of characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. Output Print \\"Yes\\" if it is possible to add zero or more pairs of parentheses to the string to make it a valid sequence of parentheses, otherwise print \\"No\\". Examples Input ``` 2 [](() ``` Output ``` Yes ``` Input ``` 3 [{(}) ``` Output ``` No ``` Input ``` 4 [([{([])}])] ``` Output ``` Yes ```","solution":"def can_become_valid_sequence(N, s): Determines whether it is possible to add zero or more pairs of parentheses to make the given string a valid sequence of parentheses. stack = [] for char in s: if char in \'({[\': stack.append(char) elif char == \')\': if not stack or stack.pop() != \'(\': return \\"No\\" elif char == \'}\': if not stack or stack.pop() != \'{\': return \\"No\\" elif char == \']\': if not stack or stack.pop() != \'[\': return \\"No\\" # If unpaired open brackets remain, it can potentially be paired by additional brackets return \\"Yes\\" if not stack else \\"Yes\\""},{"question":"A software company is developing a new feature for their application that deals with palindrome transformations. A palindrome is a string that reads the same forwards and backwards. In the development process, they need to determine if a string can be transformed into a palindrome by removing at most one character. Write a function that checks if a given string can become a palindrome by removing at most one character. # Input - The input consists of a single string `s` of length `1 ≤ |s| ≤ 1000`, which contains only lowercase English letters. # Output - Output `YES` if the string can be transformed into a palindrome by removing at most one character, otherwise output `NO`. # Example Input: ``` abca ``` Output: ``` YES ``` Input: ``` abc ``` Output: ``` NO ``` # Explanation - In the first example, by removing the character \'b\', the string \'abca\' becomes \'aca\', which is a palindrome. - In the second example, there is no way to remove just one character to make the string \'abc\' a palindrome.","solution":"def can_be_palindrome_by_removing_one_char(s): Returns \'YES\' if the string can be transformed into a palindrome by removing at most one character, otherwise \'NO\'. def is_palindrome_range(s, left, right): while left < right: if s[left] != s[right]: return False left += 1 right -= 1 return True left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: if is_palindrome_range(s, left + 1, right) or is_palindrome_range(s, left, right - 1): return \'YES\' else: return \'NO\' left += 1 right -= 1 return \'YES\'"},{"question":"Given an array of integers, find the maximum possible value of a subarray sum, where the subarray meets the following conditions: 1. The subarray must have at least one element. 2. The sum of the elements of the subarray should not exceed a given integer M. Input The first line contains two integers n (1 ≤ n ≤ 50) and M (1 ≤ M ≤ 10^9) — the length of the array and the maximum allowed subarray sum, respectively. The second line contains n integers — the elements of the array a (-10^9 ≤ a[i] ≤ 10^9). Output Print a single integer — the maximum possible value of a subarray sum that does not exceed M. If there is no valid subarray, print 0. Examples Input 5 10 4 -1 2 1 -5 Output 6 Input 3 5 2 -3 3 Output 3 Input 3 2 4 -1 3 Output 0","solution":"def max_subarray_sum_limited(arr, n, M): max_sum = 0 current_sum = 0 for num in arr: current_sum += num if current_sum > M: current_sum = num if num <= M else 0 max_sum = max(max_sum, current_sum) if current_sum < 0: current_sum = 0 return max_sum"},{"question":"You are given a string `s` consisting of only characters \'a\', \'b\', and \'c\'. Your task is to perform exactly one operation to transform `s` into a special string. A special string is defined as a string where no two consecutive characters are the same. You can perform one of the following operations exactly once: 1. Choose a position in the string and replace the character at that position with any of \'a\', \'b\', or \'c\'. The goal is to determine if it\'s possible to transform the given string into a special string by performing exactly one such operation. If it is possible, print \\"YES\\", otherwise print \\"NO\\". Input The input consists of a single string `s` (1 ≤ |s| ≤ 10^5) consisting of only characters \'a\', \'b\', and \'c\'. Output Print \\"YES\\" if it is possible to transform the string into a special string by performing exactly one operation, otherwise print \\"NO\\". Examples Input abbac Output YES Input abcabc Output NO Input aaa Output YES Input abababa Output NO Note In the first example, you can change the first \'b\' to \'a\' to get \\"aaac\\" which is a special string. In the second example, no single operation can create a special string as the string already has no two consecutive characters that are the same. In the third example, you can change the second \'a\' to \'b\' to get \\"aba\\". In the fourth example, the string already alternates characters and thus is already a special string, so no change is needed and the answer is \\"NO\\".","solution":"def can_transform_to_special_string(s): Determines if the string `s` can be transformed into a special string by changing exactly one character at one position. n = len(s) for i in range(1, n): if s[i] == s[i-1]: # Try replacing s[i] with a different character for char in \\"abc\\": if char != s[i] and char != s[i-1] and (i+1 == n or char != s[i+1]): return \\"YES\\" # Try replacing s[i-1] with a different character for char in \\"abc\\": if char != s[i-1] and char != s[i] and (i-2 < 0 or char != s[i-2]): return \\"YES\\" return \\"NO\\" # If no consecutive characters are the same # It means no modification is needed if n > 1 and all(s[i] != s[i-1] for i in range(1, n)): return \\"NO\\" return \\"YES\\""},{"question":"Create a function that generates a pseudo-random password for a user. The password must meet the following criteria: - It must be exactly 12 characters long. - It must contain at least one uppercase letter. - It must contain at least one lowercase letter. - It must contain at least one digit. - It must contain at least one special character from the set `!@#%^&*()-_+=\\"`. The function should follow these steps: 1. Create a list of possible characters that includes lowercase and uppercase letters, digits, and the given special characters. 2. Ensure that the final password includes at least one character from each required category. 3. Fill the rest of the password length with random characters from the list to ensure the total length is 12 characters. 4. Shuffle the result to ensure randomness. Input The function does not take any input. Output The function should return a string which is the generated password. Examples Executing the function can generate outputs similar to the following (actual output may vary due to the randomness): Output 1 `kG7@mb1RlW!` Output 2 `Tu2#wXhi4&L5` Output 3 `Y3!gH6oaM7@n` Output 4 `95P*xX0l=nKw` Notes - The function should use a randomness source such as the `random` module for selecting characters. - It should handle the inclusion and random placement of the required characters effectively.","solution":"import random import string def generate_password(): Generates a 12-character password meeting the specified criteria. # Define character sets lowercase = string.ascii_lowercase uppercase = string.ascii_uppercase digits = string.digits special_chars = \\"!@#%^&*()-_+=\\" # Ensure each category is represented at least once password = [ random.choice(lowercase), random.choice(uppercase), random.choice(digits), random.choice(special_chars) ] # Fill the rest of the password length with random characters from all sets all_chars = lowercase + uppercase + digits + special_chars while len(password) < 12: password.append(random.choice(all_chars)) # Shuffle to ensure randomness random.shuffle(password) return \'\'.join(password)"},{"question":"The legendary hero, Zelda, is on a quest to reach the Sacred Castle, where the final battle against the Dark Lord awaits. The kingdom is represented as a grid of n x m cells, where each cell can be either empty or contain an obstacle. Zelda starts from the top-left cell (1, 1) and aims to reach the bottom-right cell (n, m). Zelda can move to the next cell either to the right or down from her current position, but certain cells may have obstacles. She needs to find the minimum number of moves required to reach the Sacred Castle, or determine if it\'s impossible. Input The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. Each of the next n lines contains m characters, where each character is either \'.\' representing an empty cell or \'#\' representing an obstacle. Output Print a single number — the minimum number of moves Zelda needs to reach the bottom-right cell (n, m), or -1 if it is impossible. Examples Input 3 3 . . . . # . . . . Output 4 Input 3 3 . # . # . # . # . Output -1 Note In the first example, Zelda can navigate the grid as follows: (1, 1) -> (1, 2) -> (1, 3) -> (2, 3) -> (3, 3), for a total of 4 moves. In the second example, there is no possible path for Zelda to reach the bottom-right cell due to the obstacles.","solution":"from collections import deque def min_moves_to_castle(n, m, grid): if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 directions = [(0, 1), (1, 0)] queue = deque([(0, 0, 0)]) # row, col, distance visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if (x, y) == (n-1, m-1): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"A company holds a monthly coding competition for its employees. The company wishes to award prizes to the top k performers in each competition. However, employees who perform equally should receive the same prize. An employee who has the same points as another should not be ranked lower than the other employee. Given a list of scores from the competition, your task is to determine the awards for the top k ranks. If there are fewer than k distinct scores, then all those who got scores are awarded. Write a program that takes the following inputs: 1. An integer k (1 ≤ k ≤ n), the number of distinct prizes to award. 2. An integer n (1 ≤ n ≤ 10^5), the number of scores. 3. A list of n integers, where each integer is a score obtained by an employee. The program should print a list of scores in descending order representing the scores receiving a prize. If there are fewer than k distinct scores, print all distinct scores. Input The first line contains two integers k and n (1 ≤ k ≤ n ≤ 100000) — the number of prizes and the number of scores, respectively. The second line contains n space-separated integers representing the scores obtained by employees. Output Print a list of distinct scores in descending order which will receive a prize. If there are fewer than k distinct scores, print all distinct scores. Examples Input 3 8 100 100 90 85 90 85 80 75 Output 100 90 85 Input 2 5 50 50 50 50 50 Output 50 Input 4 10 200 180 180 160 160 160 140 120 100 100 Output 200 180 160 140 Note In the first example, there are 5 distinct scores: 100, 90, 85, 80, and 75. Since k=3, we only output the top 3 distinct scores: 100, 90, and 85. In the second example, since every score is the same, we only output one distinct score 50. In the third example, even though k=4, the top 4 distinct scores 200, 180, 160, 140 have been printed. If k had been greater than the number of distinct scores, all distinct scores would have been printed.","solution":"def top_k_distinct_scores(k, n, scores): Determines the top k distinct scores. Parameters: k (int): The number of distinct prizes to award. n (int): The number of scores. scores (list of int): List of n integers representing the scores. Returns: list of int: List of top k distinct scores in descending order. # Use a set to remove duplicates and get the distinct scores distinct_scores = list(set(scores)) # Sort the distinct scores in descending order distinct_scores.sort(reverse=True) # Return the top k distinct scores, or all distinct scores if there are less than k return distinct_scores[:k]"},{"question":"A group of friends have recently learned about the famous Fibonacci sequence and have decided to create their own version of the sequence with a twist. They call it the *Shifted Fibonacci sequence*. Instead of the sequence starting with 0 and 1, the first two terms of the sequence are given by the user. The subsequent terms are generated in the same manner as the Fibonacci sequence, i.e., each term is the sum of the two preceding ones. Your task is to write a program that generates the first k terms of this Shifted Fibonacci sequence. The first two numbers of the shifted Fibonacci sequence are provided as a1 and a2. Input The input consists of a single line containing three integers: a1, a2, and k (1 ≤ a1, a2 ≤ 1,000, and 1 ≤ k ≤ 50) — the first two numbers in the sequence and the number of terms to generate, respectively. Output Output a single line with k space-separated integers, representing the first k terms of the Shifted Fibonacci sequence. Examples Input 1 1 5 Output 1 1 2 3 5 Input 2 3 6 Output 2 3 5 8 13 21","solution":"def shifted_fibonacci(a1, a2, k): Generates the first k terms of the shifted Fibonacci sequence starting with a1 and a2. Parameters: a1 (int): The first term of the sequence. a2 (int): The second term of the sequence. k (int): The number of terms to generate. Returns: list: A list containing the first k terms of the sequence. if k == 1: return [a1] elif k == 2: return [a1, a2] result = [a1, a2] for _ in range(2, k): next_term = result[-1] + result[-2] result.append(next_term) return result"},{"question":"Create a program that generates a sequence of numbers based on a given set of rules and an initial configuration. The program accepts a series of commands that determine how numbers in a sequence should be replaced or modified. The commands are provided as a series of transformations that follow specific patterns. Each transformation follows the format of an input pattern followed by an output pattern. Your task is to apply these transformations iteratively to an initial sequence until no more transformations can be applied. Transformations are applied in the order they are listed. If multiple transformations can be applied at the same position, only the first applicable one should be used. Once a transformation is applied, the modified part of the sequence is not considered for further transformations in the current iteration. Input: - An integer n, the number of transformation rules. - n lines follow, each containing an input pattern and an output pattern separated by a space. - An integer m, the length of the initial sequence. - m lines follow, each containing one number (the elements of the initial sequence). Output: - The sequence after applying the transformations until no more transformations can be applied. # Example Input ``` 2 2 3 4 5 5 2 4 4 1 2 ``` Output ``` 3 5 5 1 3 ``` # Explanation In this example, we have two transformations: - Replace 2 with 3 - Replace 4 with 5 Starting with the initial sequence `[2, 4, 4, 1, 2]`: 1. In the first pass, the sequence `[2, 4, 4, 1, 2]` becomes `[3, 5, 5, 1, 3]`: - The first 2 is replaced with 3 (first transformation rule). - The first 4 is replaced with 5 (second transformation rule). - The second 4 is replaced with 5 (second transformation rule). - The 1 remains unchanged. - The last 2 is replaced with 3 (first transformation rule). Since no more transformations can be applied, the final sequence is `[3, 5, 5, 1, 3]`.","solution":"def apply_transformations(num_rules, rules, initial_sequence): def apply_rule(number): for inp, out in rules: if number == inp: return out return number while True: new_sequence = [apply_rule(num) for num in initial_sequence] if new_sequence == initial_sequence: break initial_sequence = new_sequence return initial_sequence # Example usage n = 2 rules = [(2, 3), (4, 5)] m = 5 initial_sequence = [2, 4, 4, 1, 2] print(apply_transformations(n, rules, initial_sequence))"},{"question":"A treasure hunter has discovered a secret code which is a string of length n. The code consists of only lowercase English letters. However, it\'s known that some characters in the string might be incorrect and need to be changed to form a palindrome. The hunter wants to know the minimum number of character changes required to make the code a palindrome. Input The first and only line of input contains a single string s (1 ≤ |s| ≤ 10^5). Output Output the minimum number of character changes needed to make the string a palindrome. Examples Input abca Output 1 Input racear Output 1 Input abcdef Output 3 Note In the first sample case, changing the last character \'a\' to \'b\' results in the string \\"abcb\\", which is a palindrome. In the second sample case, changing the 4th character \'e\' to \'c\' makes the string \\"racecar\\", which is a palindrome. In the third sample case, the optimal changes are \'a\' to \'f\', \'b\' to \'e\', and \'c\' to \'d\', resulting in the string \\"feddef\\", which is a palindrome.","solution":"def min_changes_to_palindrome(s): Returns the minimum number of character changes needed to make the string a palindrome. n = len(s) changes = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: changes += 1 return changes"},{"question":"A research team has been working on a large dataset of DNA sequences. Each DNA sequence is represented by a string consisting of the characters \'A\', \'T\', \'C\', and \'G\'. The team needs to identify how many times a given motif appears as a contiguous subsequence in a given DNA sequence. The motif is case-sensitive and can only consist of the characters \'A\', \'T\', \'C\', and \'G\'. As part of the team, you are tasked with writing a program to solve this problem efficiently. You will be provided with a DNA sequence and a motif, and your task is to compute the number of times the motif appears in the DNA sequence as a contiguous subsequence. Input The first line of input consists of an integer T, the number of test cases. Each test case consists of two lines. The first line contains the DNA sequence, and the second line contains the motif. Output For each test case, output a single integer denoting the number of times the motif appears as a contiguous subsequence in the DNA sequence. Constraints 1 ≤ T ≤ 100 1 ≤ |DNA sequence| ≤ 100000, where |DNA sequence| denotes the length of the DNA sequence 1 ≤ |motif| ≤ 100000, where |motif| denotes the length of the motif The DNA sequence and motif will only contain the characters \'A\', \'T\', \'C\', and \'G\' Example Input: 3 ATCGATCGA ATC GATTACA TA CGCGCGCG CGC Output: 2 1 3 Explanation Example case 1. The DNA sequence is \\"ATCGATCGA\\" and the motif is \\"ATC\\". The motif \\"ATC\\" appears twice in the DNA sequence: once from the 1st to the 3rd position, and again from the 5th to the 7th position. Thus, the output is 2. Example case 2. The DNA sequence is \\"GATTACA\\" and the motif is \\"TA\\". The motif \\"TA\\" appears once in the DNA sequence from the 3rd to the 4th position. Thus, the output is 1. Example case 3. The DNA sequence is \\"CGCGCGCG\\" and the motif is \\"CGC\\". The motif \\"CGC\\" appears three times in the DNA sequence: once from the 1st to the 3rd position, once from the 3rd to the 5th position, and finally from the 5th to the 7th position. Thus, the output is 3.","solution":"def count_motif_occurrences(dna_sequence, motif): Returns the number of times the motif appears as a contiguous subsequence in the DNA sequence. count = 0 m_len = len(motif) for i in range(len(dna_sequence) - m_len + 1): if dna_sequence[i:i + m_len] == motif: count += 1 return count def process_test_cases(T, test_cases): Processes multiple test cases and returns results. results = [] for i in range(T): dna_sequence, motif = test_cases[i] results.append(count_motif_occurrences(dna_sequence, motif)) return results"},{"question":"Chef has recently developed a passion for arranging his table in a specific way to boost productivity. To accomplish this, he has laid out N objects horizontally in a row, each represented by a unique integer. Chef wants to divide these items into groups such that each group contains consecutive integers in increasing order. Since Chef is very particular about his arrangements, within each group, the difference between every two consecutive numbers must be exactly 1. Chef seeks your help in determining the minimum number of groups he needs to form. Your task is to write a program that will determine the minimum number of groups required for the given list of integers. # Input - The first line of the input contains an integer T denoting the number of test cases. - The first line of each test case contains a single integer N representing the number of integers. - The second line contains N distinct space-separated integers that need to be grouped. # Output For each test case, output a single line containing an integer representing the minimum number of groups required to meet Chef\'s criteria. # Constraints - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 10^5 - 1 ≤ A_i ≤ 10^9 # Example Input: ``` 2 5 1 2 3 7 8 4 5 10 11 12 ``` Output: ``` 2 2 ``` # Explanation In the first test case: - Group 1: [1, 2, 3] - Group 2: [7, 8] In the second test case: - Group 1: [5] - Group 2: [10, 11, 12]","solution":"def min_groups(T, test_cases): results = [] for n, nums in test_cases: nums.sort() groups = 1 for i in range(1, n): if nums[i] != nums[i-1] + 1: groups += 1 results.append(groups) return results"},{"question":"You are given an array of integers representing heights of buildings in a cityscape from left to right. The width of each building is 1. You need to calculate the amount of water that can be trapped between these buildings after a rain. Let: - heights[i] represent the height of the i-th building. You need to calculate the total amount of water trapped after it rains on the sequence of buildings. Input: The input consists of two lines: 1. An integer \'n\', representing the total number of buildings (1 <= n <= 10^5). 2. A list of \'n\' non-negative integers representing the heights of the buildings (0 <= heights[i] <= 10^4). Output: Output a single integer representing the amount of water that can be trapped. Example: Input 6 0 1 2 1 0 2 Output 3 Input 4 3 0 1 2 Output 3 Explanation: In the first example, water is trapped between the buildings as follows: - Between buildings of height 0 and 1 there is no water. - Between buildings of height 1 and 2 there is no water. - Between buildings of height 2 and 1, 1 unit of water is trapped. - Between buildings of height 1 and 0, another 1 unit of water is trapped. - Between the height 0 and the last building of height 2, another 1 unit of water is trapped. Hence the total water trapped is 3 units. In the second example, water is trapped between the buildings as follows: - Between the first building of height 3 and the second building of height 0, 3 units of water are trapped. - Between the second building of height 0 and the third building of height 1, 1 unit of water is trapped. - Between the third building of height 1 and the fourth building of height 2, no water is trapped. Hence the total water trapped is 3 units.","solution":"def trap_rain_water(heights): Calculate the amount of water that can be trapped after raining on the sequence of buildings. :param heights: List[int]. List of integers representing heights of buildings :return: int. Total amount of trapped water if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i-1], heights[i]) right_max[n-1] = heights[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], heights[i]) trapped_water = 0 for i in range(n): water_level = min(left_max[i], right_max[i]) trapped_water += max(0, water_level - heights[i]) return trapped_water"},{"question":"# Word Breakdown One common problem in natural language processing is breaking down a phrase into individual words from a given dictionary. Given a string without spaces and a dictionary of valid words, your task is to determine if the string can be segmented into a sequence of one or more dictionary words. **Input** - The first line contains an integer N, the number of words in the dictionary (1 ≤ N ≤ 1000). - The following N lines each contain a word, which comprises lowercase English letters. - The next line contains a string S consisting of only lowercase English letters, representing the concatenated word (1 ≤ |S| ≤ 1000). **Output** - Output \\"YES\\" if the string S can be segmented into a sequence of one or more dictionary words. Otherwise, output \\"NO\\". **Example Input** ``` 5 apple pen applepen pine pineapple pineapplepenapple ``` **Example Output** ``` YES ``` In this example, the string \\"pineapplepenapple\\" can be broken down into \\"pine\\" + \\"apple\\" + \\"pen\\" + \\"apple\\". Thus the output is \\"YES\\". **Explanation** Consider the string \\"applepen\\". It can be broken down into \\"apple\\" + \\"pen\\" so the output would be \\"YES\\". If the dictionary didn\'t have the word \\"pen\\", then \\"applepen\\" couldn\'t be broken down and the output would be \\"NO\\".","solution":"def word_break(N, dictionary, S): Determines if string S can be segmented into a sequence of dictionary words. Args: N (int): The number of words in the dictionary. dictionary (list of str): The list of words in the dictionary. S (str): The concatenated word to be segmented. Returns: str: \\"YES\\" if S can be segmented, \\"NO\\" otherwise. word_set = set(dictionary) dp = [False] * (len(S) + 1) dp[0] = True # Initial state, as empty string can always be segmented for i in range(1, len(S) + 1): for j in range(i): if dp[j] and S[j:i] in word_set: dp[i] = True break return \\"YES\\" if dp[len(S)] else \\"NO\\""},{"question":"Given an array of integers, find the length of the longest subarray that contains only even numbers. If there are no even numbers in the array, return 0. Your task is to implement a function or a method that takes an array of integers as input and returns the length of the longest subarray consisting entirely of even numbers. # Input * The input consists of a single line containing space-separated integers. The integers represent the elements of the array. * The length of the array will be between 1 and 100. * Each integer in the array will be between -1000 and 1000. # Output * Output a single integer which represents the length of the longest subarray of even numbers. # Examples Example 1: ``` Input 1 2 4 6 1 1 8 12 Output 4 ``` In this example, the subarray [2, 4, 6, 8, 12] contains 4 even numbers in a sequence. This is the longest such subarray in the input. Example 2: ``` Input 1 3 5 7 Output 0 ``` In this example, there are no even numbers in the array. Therefore, the output is 0. Example 3: ``` Input 10 20 30 5 2 4 6 8 Output 4 ``` In this example, the longest subarray of even numbers is [2, 4, 6, 8], which has a length of 4. # Constraints * The input contains only integers. * The array length will be at least 1 and at most 100. The elements of the array will be within the range -1000 to 1000.","solution":"def longest_even_subarray_length(arr): Returns the length of the longest subarray consisting entirely of even numbers. max_length = 0 current_length = 0 for num in arr: if num % 2 == 0: current_length += 1 if current_length > max_length: max_length = current_length else: current_length = 0 return max_length"},{"question":"Write a function `sum_of_digits` that takes a non-negative integer as an input and returns the sum of its digits. The function should handle values up to the largest non-negative integer that can be processed by typical 32-bit systems. # Example Input ``` 1234 ``` Output ``` 10 ``` Input ``` 98765 ``` Output ``` 35 ```","solution":"def sum_of_digits(n): Returns the sum of the digits of a non-negative integer. Parameters: n (int): A non-negative integer. Returns: int: The sum of the digits of the integer n. if n < 0: raise ValueError(\\"The input should be a non-negative integer\\") return sum(int(digit) for digit in str(n))"},{"question":"An anagram is a rearrangement of the letters of a word to produce a new word. For example, the words \\"listen\\" and \\"silent\\" are anagrams of each other. Given a list of words, determine which words are anagrams of other words in the list. Write a program that takes a list of words and returns the number of unique groups of anagrams. Input The first line contains an integer n (1 ≤ n ≤ 10000) — the number of words in the list. Each of the next n lines contains one word consisting of lowercase English letters (1 ≤ length of the word ≤ 100). Output Print the number of unique groups of anagrams. Examples Input 6 listen silent enlist rat tar god Output 3 Note In the first example, the words \\"listen\\", \\"silent\\", and \\"enlist\\" form a group of anagrams, and the words \\"rat\\" and \\"tar\\" form another group of anagrams. The word \\"god\\" does not have any anagrams in the list, so it is considered a group by itself. Therefore, there are 3 unique groups of anagrams in total.","solution":"def count_anagram_groups(n, words): Returns the number of unique groups of anagrams in the list of words. from collections import defaultdict anagram_groups = defaultdict(list) for word in words: sorted_word = \'\'.join(sorted(word)) # Sort the word anagram_groups[sorted_word].append(word) return len(anagram_groups)"},{"question":"In a magical land, there are N types of potions. Each potion has a magical power value associated with it. A wizard wants to mix potions to create a powerful magic brew. When two potions with different magical power values are combined, the total power of the resulting brew is the sum of their individual powers. The wizard can mix two potions together repeatedly until only one potion remains. Additionally, the wizard can only mix potions with different power values. The wizard wants to know the maximal possible magical power of the final potion that remains after all possible mixings. Constraints * 2 ≤ N ≤ 100 * 1 ≤ P_i ≤ 100 * P_i is the power value of the i-th potion and is an integer. Input The input is given from Standard Input in the following format: N P_1 P_2 ... P_N Output Print the maximum possible magical power of the final potion. Examples Input 3 1 2 3 Output 6 Input 4 4 4 4 5 Output 13","solution":"def max_magical_power(n, potions): Given a list of potion power values, returns the maximum possible magical power of the final potion after mixing all possible combinations of potions with different powers. unique_potions = list(set(potions)) return sum(unique_potions)"},{"question":"A painting company is working on a project to paint the interiors of a large hotel. The hotel has a total of N rooms, and each room can be painted in one of three different colors: Red (denoted by R), Green (denoted by G), or Blue (denoted by B). However, no two adjacent rooms (directly connected by a door) can be painted the same color. You are tasked with writing a program to determine the number of possible ways to paint all the rooms under these conditions. The hotel is represented as an undirected graph, where each node corresponds to a room, and each edge corresponds to a door connecting two rooms. Your program should use depth-first search (DFS) to find all valid colorings of the graph. Input The input consists of multiple datasets. Each dataset consists of two parts. The first part is a line with an integer N (1 ≤ N ≤ 15), representing the number of rooms. The next N lines each contain N integers (either 0 or 1) representing the adjacency matrix of the graph. A 1 at matrix[i][j] indicates that there is a door connecting room i and room j, and 0 indicates there is no door. The input is terminated by a line with a single zero. This is not part of any dataset and should not be processed. Output For each dataset, print the number of valid colorings for the rooms. Example Input 3 0 1 0 1 0 1 0 1 0 4 0 1 1 0 1 0 1 1 1 1 0 1 0 1 1 0 0 Output 6 0","solution":"def count_valid_colorings(N, adjacency_matrix): def is_valid_color(node, color): for neighbor in range(N): if adjacency_matrix[node][neighbor] == 1 and colors[neighbor] == color: return False return True def dfs(node): if node == N: return 1 total_ways = 0 for color in [\'R\', \'G\', \'B\']: if is_valid_color(node, color): colors[node] = color total_ways += dfs(node + 1) colors[node] = None return total_ways colors = [None] * N return dfs(0) def solve(input_data): input_lines = input_data.strip().split(\\"n\\") idx = 0 results = [] while idx < len(input_lines): N = int(input_lines[idx]) if N == 0: break else: adjacency_matrix = [] for i in range(1, N+1): adjacency_matrix.append(list(map(int, input_lines[idx + i].split()))) results.append(count_valid_colorings(N, adjacency_matrix)) idx += N + 1 for result in results: print(result)"},{"question":"Eve is working on analyzing strings in her research. She finds the concept of palindromes fascinating. A string is called a palindrome if it reads the same forwards as backwards. Eve is now interested in finding how many substrings of a given string are palindromic. Write a program to count the number of distinct palindromic substrings in a given string. Input The input consists of a single string S (1 leq |S| leq 1,500), where |S| is the length of the string. The string contains only lowercase English letters. Output Output a single integer, the number of distinct palindromic substrings in the given string. Examples Input ababa Output 5 Input abc Output 3","solution":"def count_distinct_palindromic_substrings(s): def is_palindrome(st): return st == st[::-1] palindromic_subsets = set() for i in range(len(s)): for j in range(i + 1, len(s) + 1): subset = s[i:j] if is_palindrome(subset): palindromic_subsets.add(subset) return len(palindromic_subsets)"},{"question":"Liam is fascinated by binary trees and has embarked on a quest to find the \\"deepest leaves.\\" A leaf is a node with no children, and the deepest leaves are the ones farthest from the root. Liam wants to determine the sum of the values of these deepest leaves for a given binary tree. Can you help him accomplish this? You are provided a binary tree in level-order traversal format and need to return the sum of the values of its deepest leaves. A level-order traversal of a binary tree is an order of the tree\'s nodes\' values in which we visit each level one at a time, from left to right. Input Format: - The first line contains an integer T, the number of test cases. - For each test case, the first line contains an integer N, the number of nodes in the binary tree. - The next line contains N space-separated integers, the values of the nodes in level-order traversal. The tree is created in the following manner: 1. Use the first value as the value of the root node. 2. Use the subsequent values to create left and right children of the nodes moving level by level. Output Format: For each test case, output one line containing an integer, the sum of the values of the deepest leaves. Constraints: - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10^5 - The value of each node is a non-negative integer not greater than 10^6. **Assumptions**: 1. All input binary trees are valid binary trees (based on the given level-order traversal). 2. If the binary tree consists of only the root node (N = 1), it is considered as the deepest leaf. Example Input: 2 5 1 2 3 4 5 1 10 Example Output: 9 10 Explanation: For the first test case, the binary tree is: 1 / 2 3 / 4 5 The deepest leaves are 4 and 5, and their sum is 4 + 5 = 9. For the second test case, the binary tree is simply: 10 The deepest (and only) leaf is 10, so the output is 10.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def build_tree_from_level_order(values): if not values: return None root = TreeNode(values[0]) queue = [root] index = 1 while index < len(values): node = queue.pop(0) if values[index] is not None: node.left = TreeNode(values[index]) queue.append(node.left) index += 1 if index < len(values) and values[index] is not None: node.right = TreeNode(values[index]) queue.append(node.right) index += 1 return root from collections import deque def deepest_leaves_sum(root): if not root: return 0 queue = deque([root]) while queue: level_sum = 0 level_length = len(queue) for _ in range(level_length): node = queue.popleft() level_sum += node.value if node.left: queue.append(node.left) if node.right: queue.append(node.right) return level_sum def solve(T, test_cases): results = [] for case in test_cases: N, values = case tree = build_tree_from_level_order(values) result = deepest_leaves_sum(tree) results.append(result) return results def main(input_str): input_lines = input_str.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] line_index = 1 for _ in range(T): N = int(input_lines[line_index]) values = list(map(int, input_lines[line_index + 1].split())) test_cases.append((N, values)) line_index += 2 results = solve(T, test_cases) for result in results: print(result)"},{"question":"You are given an integer array `arr` of size `n`. Your task is to determine the minimum number of elements to remove from the array to make the array \\"almost sorted\\". An array is defined as \\"almost sorted\\" if it can be converted to a sorted array by modifying at most one element. Input The first line contains a single integer `n` (1 ≤ n ≤ 100,000) - the number of elements in the array. The second line contains `n` integers `arr_1, arr_2, ..., arr_n` (1 ≤ arr_i ≤ 10^9) - the elements of the array. Output Print a single integer - the minimum number of elements to remove to make the array almost sorted. If no elements need to be removed, output 0. Examples Input 6 3 2 5 1 6 7 Output 2 Input 5 1 2 3 4 2 Output 1 Input 4 10 1 5 2 Output 2 Note In the first sample, removing elements 3 and 1 makes the array [2, 5, 6, 7], which is sorted. Thus, the answer is 2. In the second sample, simply removing the last element 2 makes the array [1, 2, 3, 4], which is sorted. Hence, the answer is 1. In the third sample, removing 1 and 2 makes the array [10, 5], which is sorted. Therefore, the answer is 2.","solution":"def min_removals_to_almost_sorted(arr): Returns the minimum number of elements to remove from the array to make it almost sorted. def is_sorted_with_removal(arr, skip_index): temp_arr = [arr[i] for i in range(len(arr)) if i != skip_index] return all(temp_arr[i] <= temp_arr[i+1] for i in range(len(temp_arr) - 1)) n = len(arr) if any(is_sorted_with_removal(arr, i) for i in range(n)): return 1 return 2"},{"question":"Garden of Trees You are given a garden with different types of trees. Each tree type is represented by a unique lowercase alphabetic character. Garden can contain multiple trees of the same type. You want to arrange types of trees in a sequence such that you minimize the number of adjacent identical tree types, while also ensuring each type appears consecutively as much as possible, for maintenance purposes. Design a program that, given a list of tree types, returns the tree type that should appear most frequently to achieve the above objective. Input: - An integer \'T\' denoting the number of test cases - For each of the \'T\' test cases: - A single line containing an integer \'N\' denoting the number of trees - A second line containing \'N\' lowercase alphabetic characters, each representing a type of tree in the garden Output: For each of the \'T\' test cases, display in a new line the tree type that should appear most frequently to achieve the desired tree arrangement. Constraints: - 1 <= T <= 25 - 1 <= N <= 12353 Example: Input: 2 5 abcba 7 abcdeab Output: a a Explanation: In the first test case, tree types are: \'a\', \'b\', \'c\', \'b\', \'a\'. By making \'a\' appear more frequently, we can arrange trees as \'a\', \'b\', \'a\', \'c\', \'b\', \'a\', reducing adjacent \'a\'s but keeping it frequent for maintenance. In the second test case, tree types are \'a\', \'b\', \'c\', \'d\', \'e\', \'a\', \'b\'. Here, \'a\' appearing frequently (e.g., \'a\', \'b\', \'a\', \'c\', \'d\', \'e\', \'a\', \'b\') balances the arrangement with minimal adjacent identical types, fulfilling maintenance needs by grouping \'a\'s.","solution":"def find_most_frequent_tree_type(T, test_cases): This function accepts the number of test cases and a list of test cases. Each test case contains the number of trees and a string representing the types of trees. It returns a list of the most frequent tree type for each test case. results = [] for i in range(T): N = test_cases[i][0] trees = test_cases[i][1] # Count frequency of each tree type frequency = {} for tree in trees: if tree in frequency: frequency[tree] += 1 else: frequency[tree] = 1 # Find the tree type with the maximum frequency most_frequent_tree = max(frequency, key=frequency.get) results.append(most_frequent_tree) return results # Example usage: # T = 2 # test_cases = [ # (5, \'abcba\'), # (7, \'abcdeab\') # ] # print(find_most_frequent_tree_type(T, test_cases)) # Output: [\'a\', \'a\']"},{"question":"A popular online retailer receives a large number of orders each day. Each order consists of several items that need to be prepared for shipping. The retailer\'s warehouse has limited working stations where items can be prepared, and each working station can handle only one item at a time. Your task is to help optimize the preparation process by determining the minimum time required to prepare all items in an order, given the constraints of the working stations. Each item has a specific preparation time, and a working station can only handle one item at a time. Additionally, each item can only start being prepared when the working station required to prepare it is free. Input - The first line contains two integers n and k (1 ≤ n ≤ 200, 1 ≤ k ≤ 10), where n is the number of items in the order and k is the number of working stations available. - The second line contains n integers where the ith integer is the preparation time (in minutes) for the ith item. Output - Print a single integer representing the minimum time required to prepare all items in the order given the constraints. Example Input 8 3 4 3 2 5 7 2 1 6 Output 13 Explanation In this example, we have 8 items and 3 working stations. The optimal way to prepare the items with the given constraints is as follows: 1. In the first 4 minutes, prepare the items with preparation times 4, 3, and 2. 2. In the next 3 minutes (from minute 4 to minute 7), prepare the items with preparation times 5, 7, and 2. 3. In the next 6 minutes (from minute 7 to minute 13), prepare the items with preparation times 1 and 6. The minimum time required to prepare all items is 13 minutes.","solution":"import heapq def min_preparation_time(n, k, prep_times): if k >= n: return max(prep_times) # Initialize a min-heap to simulate the working stations heap = [0] * k for time in prep_times: # Put the next item on the station that gets free the earliest heapq.heappush(heap, heapq.heappop(heap) + time) # The minimum time required will be the last time found in our heap return max(heap)"},{"question":"Kevin is training his K kangaroos to jump over N hurdles arranged in a straight line. Each kangaroo jumps at a fixed maximum distance, all in the same direction. The kangaroos want to cross all hurdles, and Kevin can instruct any number of kangaroos to start jumping from any hurdle. The aim is for at least one kangaroo to jump over every hurdle. In one minute, Kevin can perform one of the following actions: - Move a kangaroo by one position in either direction (to prepare for a jump). - Adjust the jumping distance of a kangaroo by one unit. Help Kevin find the minimum number of minutes required to ensure that each hurdle is jumped over by at least one kangaroo. Input format: The only line of input contains two space-separated integers N and K. Output format: Output the single integer -- the minimum number of minutes. Constraints: 1 ≤ N, K ≤ 10^5 N, K ≤ 50 in test data worth 33% of all points SAMPLE INPUT 10 3 SAMPLE OUTPUT 7","solution":"def minimum_minutes(N, K): Calculate the minimum number of minutes required for Kevin to ensure that each hurdle is jumped over by at least one kangaroo. Parameters: N (int): The number of hurdles. K (int): The number of kangaroos. Returns: int: The minimum number of minutes. if K >= N: return 0 else: return N // K + (1 if N % K != 0 else 0) # Sample run result = minimum_minutes(10, 3) print(result) # Expected output: 7"},{"question":"Determine GCD of X and Y. Constraints * 1 leq X leq 10^9 * 1 leq Y leq 10^9 * All values in input are integers. Input Input is given from Standard Input in the following format: X Y Output Print the greatest common divisor (GCD) of X and Y as an integer. Examples Input 48 18 Output 6 Input 1000000000 999999999 Output 1","solution":"def gcd(x, y): Returns the greatest common divisor (GCD) of x and y. while y: x, y = y, x % y return x"},{"question":"You are a software engineer working on a flight booking system. The system has a feature to find the cheapest flight between two cities under certain constraints. Each flight has a starting city, destination city, and a cost. There might be multiple ways to travel between two cities, possibly with connecting flights. The problem is to find the minimum cost to travel from a given starting city to a target city with at most a specified number of stops in between. Given a list of flights and the constraints, implement a function to find the minimum cost. If there is no such route, return -1. # Input - A list of flight tuples where each tuple contains three elements `(start, end, cost)` representing a direct flight from `start` to `end` with a given `cost`. - Two integers `src` and `dst` representing the starting city and the destination city respectively. - An integer `K` representing the maximum number of stops you can make. # Output - An integer representing the minimum cost to travel from `src` to `dst` with at most `K` stops. If there is no such route, return -1. # Constraints - The number of cities `n` is in the range `[2, 100]`. - The number of flights `m` is in the range `[1, 10000]`. - The cost of each flight is a positive integer less than `1000`. - The starting city and the destination city are distinct and are indexed from `0` to `n-1`. - `0 ≤ K < n`. # Example Input ``` flights = [(0, 1, 100), (1, 2, 100), (0, 2, 500)] src = 0 dst = 2 K = 1 ``` Output ``` 200 ``` Explanation There are two possible routes from city `0` to city `2`: 1. Direct flight with a cost of 500. 2. One stop at city `1` with a total cost of 100 + 100 = 200. Since the second option is cheaper and within the maximum allowed stops, the output is `200`. Input ``` flights = [(0, 1, 200), (1, 2, 200), (2, 3, 200), (0, 2, 500), (0, 3, 700)] src = 0 dst = 3 K = 1 ``` Output ``` 700 ``` Explanation There is only one direct flight from `0` to `3` with a cost of 700. Another possible route `0 -> 1 -> 2 -> 3` exceeds the maximum number of stops, hence that route is not considered. Therefore, the minimum cost is 700.","solution":"from collections import defaultdict, deque import sys def find_cheapest_price(flights, src, dst, K): graph = defaultdict(list) for start, end, cost in flights: graph[start].append((end, cost)) queue = deque([(src, 0, 0)]) # (current node, cost so far, stops so far) min_cost = sys.maxsize while queue: node, cost_so_far, stops_so_far = queue.popleft() if node == dst: min_cost = min(min_cost, cost_so_far) if stops_so_far > K or cost_so_far > min_cost: continue for neighbor, price in graph[node]: queue.append((neighbor, cost_so_far + price, stops_so_far + 1)) return -1 if min_cost == sys.maxsize else min_cost"},{"question":"Ravi is a computer scientist who loves prime numbers. One day, he came across an interesting series of numbers while researching prime patterns. The series is constructed by taking a prime number and continuously adding the sum of its digits until the number is no longer prime. Ravi decided to write a program to automate this process. Your task is to write a program that takes an integer N and generates the series according to the following rules: 1. Start with the prime number N. 2. Add the sum of the digits of N to N itself to get a new number. 3. If the new number is prime, continue adding the sum of its digits to the new number. 4. Repeat this process until you obtain a number that is not prime. 5. Output the resulting series of numbers. # Input An integer N (1 <= N <= 10^9), which is guaranteed to be a prime number. # Output Print the series of numbers generated until the number is no longer prime. Each number in the series should be printed on a new line. # Example Input ``` 3 ``` Output ``` 3 6 ``` Input ``` 11 ``` Output ``` 11 13 17 25 ``` # Note - For the first example, starting with 3, the next number is 3 + 3 = 6, which is not a prime, so the series ends with 6. - For the second example, starting with 11, the next number is 11 + 1 + 1 = 13, which is a prime. Continuing, 13 + 1 + 3 = 17, which is also a prime. Finally, 17 + 1 + 7 = 25, which is not a prime, ending the series with 25.","solution":"def sum_of_digits(n): Returns the sum of digits of n. return sum(int(digit) for digit in str(n)) def is_prime(n): Determines if a number n is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def generate_prime_series(N): Generates the series of numbers starting with prime N, continuously adding the sum of its digits until the number is no longer prime. result = [] current = N while is_prime(current): result.append(current) current += sum_of_digits(current) result.append(current) # Adding the non-prime ending number return result # Example usage and printing the series for the input 11 if __name__ == \\"__main__\\": test_input = 11 series = generate_prime_series(test_input) for number in series: print(number)"},{"question":"You are given an undirected graph with n nodes and m edges. Your task is to determine the length of the shortest cycle in the graph. A cycle is a sequence of nodes starting and ending at the same node, and all nodes (except the starting/ending node) in the sequence are distinct. The length of a cycle is the number of edges in the cycle. Input The first line contains two integers n and m (1 ≤ n ≤ 5000, 0 ≤ m ≤ 10000) - the number of nodes and the number of edges, respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n) representing an edge between node u and node v. Output Print a single integer, the length of the shortest cycle in the graph, if a cycle exists. If there are no cycles, print -1. Examples Input 4 4 1 2 2 3 3 4 4 1 Output 4 Input 6 7 1 2 2 3 3 1 4 5 5 6 6 4 3 4 Output 3 Input 5 4 1 2 2 3 3 4 4 5 Output -1 Note In the first example, the cycle 1-2-3-4-1 has length 4. In the second example, the cycle 3-4-3, although it involves the same edge twice, is considered a cycle with length 3 (as the shortest cycle must have unique edges). In the third example, there is no cycle in the graph, so the output is -1.","solution":"import sys from collections import deque, defaultdict def shortest_cycle_length(n, m, edges): if m == 0: return -1 graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) def bfs(start): min_cycle = sys.maxsize dist = [-1] * (n+1) parent = [-1] * (n+1) queue = deque([start]) dist[start] = 0 while queue: node = queue.popleft() for neighbor in graph[node]: if dist[neighbor] == -1: dist[neighbor] = dist[node] + 1 parent[neighbor] = node queue.append(neighbor) elif parent[node] != neighbor: min_cycle = min(min_cycle, dist[node] + dist[neighbor] + 1) return min_cycle shortest_cycle = sys.maxsize for i in range(1, n+1): shortest_cycle = min(shortest_cycle, bfs(i)) return shortest_cycle if shortest_cycle != sys.maxsize else -1"},{"question":"A game allows players to earn points by collecting coins that appear in a straight line. The line is divided into `n` segments, numbered from 1 to `n` from left to right. At various times during the game, coins will appear at specific segments and remain there for a short time before disappearing. The player starts at any segment of their choice at the initial time and can move between adjacent segments, one segment per unit time. The goal is to collect as many coins as possible by visiting the segments they appear at the right time. The player can keep track of when and where the coins will appear and plan their movements accordingly to maximize the total number of coins collected. Input: The first line contains two integers `n` and `m` (1 ≤ n ≤ 1000, 1 ≤ m ≤ 100), the number of segments and the number of coin appearances, respectively. Each of the next `m` lines contains three integers `si`, `ci`, `ti` (1 ≤ si ≤ n, 1 ≤ ci ≤ 100, 1 ≤ ti ≤ 1000), describing the appearance of the i-th set of coins: segment `si`, number of coins `ci`, and time `ti` respectively. It is guaranteed that the coin appearances are listed in non-decreasing order of time (ti ≤ ti+1 for all 1 ≤ i < m). Output: Print one integer — the maximum number of coins the player can collect. Example: Input: 10 3 2 5 3 7 3 5 5 10 8 Output: 18","solution":"def max_coins(n, m, coin_appearances): # Initialize the dp array where dp[j] indicates the max coins collectible at segment j dp = [0] * (n + 1) # Iterate through each coin appearance for si, ci, ti in coin_appearances: # Create a new_dp to store updated values new_dp = [0] * (n + 1) for j in range(1, n + 1): # Calculate maximum coins collectible at each segment j considering movement to si new_dp[j] = dp[j] + ci if abs(j - si) <= ti else dp[j] dp = new_dp # Return the maximum coins collectible at any segment return max(dp) # Example case n = 10 m = 3 coin_appearances = [ (2, 5, 3), (7, 3, 5), (5, 10, 8) ] print(max_coins(n, m, coin_appearances)) # Output: 18"},{"question":"You are given a matrix of size n x m filled with different integers. You have to find the size of the largest square submatrix consisting of only identical elements. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 500), representing the number of rows and columns in the matrix, respectively. Each of the next n lines contains m integers, representing the elements of the matrix (1 ≤ matrix[i][j] ≤ 10^9). Output Print one integer: the size of the largest square submatrix consisting of only identical elements. Example Input 4 5 1 1 1 3 4 1 1 1 3 4 1 1 1 3 4 2 2 2 2 2 Output 3 Note In the given example matrix: [ [1, 1, 1, 3, 4], [1, 1, 1, 3, 4], [1, 1, 1, 3, 4], [2, 2, 2, 2, 2] ] The largest square submatrix consisting of identical elements has a size of 3x3, composed entirely of the number \'1\'. Thus, the output is 3.","solution":"def largest_identical_square(matrix): Finds the size of the largest square submatrix consisting of only identical elements. n = len(matrix) m = len(matrix[0]) # Initialize dp array, where dp[i][j] represents the size of the largest square # submatrix ending at position (i, j) dp = [[0] * m for _ in range(n)] max_size = 0 # Fill the dp array based on the conditions for i in range(n): for j in range(m): if i == 0 or j == 0: dp[i][j] = 1 # The smallest square can only be itself else: if matrix[i][j] == matrix[i-1][j] == matrix[i][j-1] == matrix[i-1][j-1]: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 else: dp[i][j] = 1 # Keep track of the maximum size found if dp[i][j] > max_size: max_size = dp[i][j] return max_size # Sample Input n = 4 m = 5 matrix = [ [1, 1, 1, 3, 4], [1, 1, 1, 3, 4], [1, 1, 1, 3, 4], [2, 2, 2, 2, 2] ] # Sample output print(largest_identical_square(matrix)) # Output should be 3"},{"question":"A company is launching a new product, and they want to monitor the performance of their software by tracking how many times certain events occur. Each event is identified by a unique lower-case alphabetic string. You are required to write a program that processes a series of event logs and returns the count for each specified event key in a specified order. Input: - The first line of input contains a single integer T denoting the number of test cases. - For each test case, the first line contains an integer N denoting the number of event logs. - The next N lines, each contains a string that represents an event key. - The last line of each test case contains an integer Q denoting the number of queries. - The next Q lines, each contains a string that represents an event key to query. Output: - For each query in each test case, output the count of the event key. If the event key did not occur, output 0. Constraints: - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 100000 - 1 ≤ Q ≤ 10000 - Each event key string consists of lowercase English letters with length between 1 and 50. SAMPLE INPUT 1 5 login checkout login add_to_cart checkout 3 login checkout search SAMPLE OUTPUT 2 2 0","solution":"def process_event_logs(test_cases): results = [] for test_case in test_cases: event_counts = {} N = test_case[\'N\'] events = test_case[\'events\'] Q = test_case[\'Q\'] queries = test_case[\'queries\'] for event in events: if event in event_counts: event_counts[event] += 1 else: event_counts[event] = 1 for query in queries: results.append(event_counts.get(query, 0)) return results"},{"question":"A list of numbers is called graded if each number (starting from the third element) is greater than or equal to the sum of the two previous numbers. Your task is to determine if the given list is graded. For example, if the list is [1, 2, 3, 5, 8], then every element from the third onward (3, 5, and 8) is greater than or equal to the sum of the two preceding elements (1+2=3 for the third element, 2+3=5 for the fourth element, and 3+5=8 for the fifth element), so the list is considered graded. Input The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of elements in the list. The second line contains n space-separated integers, representing the list of numbers. Output Print \\"YES\\" if the list is graded, and \\"NO\\" otherwise. Examples Input 5 1 2 3 5 8 Output YES Input 6 1 2 2 4 8 13 Output NO Explanation In the first example, all elements starting from the third are greater than or equal to the sum of the two preceding numbers, making the list graded. In the second example, the fourth element (4) is less than the sum of its two preceding elements (2+2=4), hence the list is not graded.","solution":"def is_graded(n, numbers): Determine if the list is graded: Each number (starting from the third element) should be greater than or equal to the sum of the two previous numbers. Parameters: n (int): Number of elements in the list. numbers (list): List of integers. Returns: str: \\"YES\\" if the list is graded, \\"NO\\" otherwise. if n < 3: return \\"YES\\" for i in range(2, n): if numbers[i] < numbers[i-1] + numbers[i-2]: return \\"NO\\" return \\"YES\\""},{"question":"A company has a system where employee communication is logged as a sequence of chat messages. Each message has a unique identifier and includes a timestamp, sender id, and receiver id. Your task is to identify the longest sequence of chat messages exchanged between two employees. A sequence of messages is considered a valid communication sequence if each message is followed by a subsequent message where the sender of the current message is the receiver of the next message and vice versa. Given a list of chat messages, you need to determine the length of the longest valid communication sequence between any two employees. Input The first line contains an integer n (1 ≤ n ≤ 10^5), the number of chat messages. Each of the next n lines contains three integers: timestamp (1 ≤ timestamp ≤ 10^9), sender_id (1 ≤ sender_id ≤ 10^5), and receiver_id (1 ≤ receiver_id ≤ 10^5). Output Output a single integer: the length of the longest valid communication sequence. Examples Input 5 1 1 2 2 2 1 3 1 2 4 2 1 5 3 4 Output 4 Input 4 1 1 2 2 1 3 3 2 1 4 2 3 Output 2 Note In the first example, the longest sequence is between employee 1 and employee 2 with messages exchanged at timestamps 1, 2, 3, and 4. While there is also a message between employee 3 and employee 4, it does not form a longer sequence. In the second example, the messages form two separate sequences between (1,2) and (2,3), each of length 2.","solution":"from collections import defaultdict def longest_communication(n, messages): # Dictionary to maintain sequences between pairs of employees sequences = defaultdict(int) # Sort messages by timestamp to process in order messages.sort() max_length = 0 for timestamp, sender, receiver in messages: # Use tuple with (min, max) to ensure unique pair representation pair = tuple(sorted((sender, receiver))) # Increase the sequence count for the current pair sequences[pair] += 1 # Update the max_length if a longer sequence is found max_length = max(max_length, sequences[pair]) return max_length # Example usage: # n = 5 # messages = [(1, 1, 2), (2, 2, 1), (3, 1, 2), (4, 2, 1), (5, 3, 4)] # print(longest_communication(n, messages)) # Output: 4"},{"question":"You are given a tree with n nodes and n-1 edges. Each node has a value associated with it. An operation consists of selecting a node and changing its value to any other value. You need to determine the minimum number of operations required to make all the nodes of the tree have the same value. Input: - The first line contains an integer n (2 ≤ n ≤ 10^5) — the number of nodes in the tree. - The second line contains n integers, where the i-th integer represents the value of the i-th node. - Each of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n) — indicating an edge between nodes u and v. Output: - Print a single integer — the minimum number of operations required to make all the nodes have the same value. Example Input: 5 1 2 1 3 1 1 2 1 3 3 4 3 5 Output: 2 Explanation: Changing the value of node 2 from 2 to 1 and the value of node 5 from 1 to 3 to 1 results in all nodes having the same value 1.","solution":"def min_operations_to_unify_tree_values(n, node_values, edges): from collections import Counter # Count the frequency of each node value value_count = Counter(node_values) # The minimum number of operations required to make all node values the same # is to change the nodes to the most frequent value in the tree. max_frequency = max(value_count.values()) # Number of operations needed to make all node values equal to the most frequent value return n - max_frequency # This function reads input from standard input, useful for competitive programming def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) node_values = list(map(int, data[1:n+1])) edges = [(int(data[i]), int(data[i+1])) for i in range(n+1, len(data), 2)] print(min_operations_to_unify_tree_values(n, node_values, edges)) if __name__ == \'__main__\': main()"},{"question":"Create a program that takes a string consisting of various parametric expressions and evaluates them. A parametric expression is defined as a mathematical expression with fixed numbers and a single variable \\"x\\". The string can contain addition (+), subtraction (-), multiplication (*), and division (/) operations. Additionally, the variable \\"x\\" can appear at any position in the string. The program should return the computed value for a given input of \\"x\\". For example, given the string \\"2*x+3-4\\" and x=5, the result should be 9. **Input** The first input line contains the string of the parametric expression. The second input line contains an integer value for x. **Output** Output the computed value of the expression. **Example** Input 2*x+3-4 5 Output 9","solution":"def evaluate_expression(expression, x): Evaluates a parametric expression with the variable x. Parameters: expression (str): The parametric expression string. x (int): The value of the variable x. Returns: int/float: The computed result of the expression. # Replace \'x\' in the expression with the actual value of x modified_expression = expression.replace(\'x\', str(x)) try: # Evaluate the expression result = eval(modified_expression) return result except Exception as e: raise ValueError(f\\"Invalid expression: {expression}\\") from e"},{"question":"You are given a string containing a mix of letters and digits. Your task is to check if the string contains any digits from \'0\' to \'9\'. Input The input will consist of a single string s. The string contains between 1 and 100 characters, inclusive. The string may consist of uppercase/lowercase letters and/or digits. Output Output \\"DIGIT\\" if the string contains any digit from \'0\' to \'9\', and \\"NO DIGIT\\" otherwise (quotes for clarity only). Examples Input abcdefg Output NO DIGIT Input abc123 Output DIGIT Input xyz789 Output DIGIT Note The task is to identify if any digit exists in the string, regardless of its position.","solution":"def contains_digit(s): Returns \'DIGIT\' if the string s contains any digit from \'0\' to \'9\', otherwise returns \'NO DIGIT\'. for char in s: if char.isdigit(): return \\"DIGIT\\" return \\"NO DIGIT\\""},{"question":"A software company has servers located in different regions of the world. Each server is identified by a unique number. Due to a recent upgrade, the management wants to ensure that each server has an identifier that is symmetrical. A symmetrical number is the one which reads the same forward and backward (like 121 or 1221). Given a list of server identifiers, you are requested to find the smallest symmetrical identifier possible that is greater than or equal to each of the given server identifiers. Input The first line of the input contains an integer T, the number of servers. Each of the following T lines contains a single integer Si, denoting the server identifier. Output Output T lines, each indicating the smallest symmetrical identifier that is greater than or equal to the given server identifier. Constraints 1 ≤ T ≤ 100 1 ≤ Si ≤ 10^8 Example Input: 3 123 199 888 Output: 131 202 888 Explanation Case 1: The smallest symmetrical identifier that is greater than or equal to 123 is 131. Case 2: The smallest symmetrical identifier that is greater than or equal to 199 is 202. Case 3: The smallest symmetrical identifier that is greater than or equal to 888 is 888 itself, as it is already symmetrical.","solution":"def next_symmetrical_identifier(num): Finds the smallest symmetrical identifier that is greater than or equal to the given number. def is_symmetrical(n): return str(n) == str(n)[::-1] while not is_symmetrical(num): num += 1 return num def find_smallest_symmetrical_identifiers(identifiers): result = [] for identifier in identifiers: result.append(next_symmetrical_identifier(identifier)) return result"},{"question":"A bakery produces bags of cookies where each bag contains the same number of cookies. They want to create a system that can tell whether a certain number of cookies can be evenly distributed into bags without any cookies left over. Write a function that takes two integers as input: the number of cookies and the number of bags. The function should determine if it is possible to evenly distribute the cookies into the bags. Constraints * 1 ≤ number_of_cookies ≤ 10^9 * 1 ≤ number_of_bags ≤ 10^9 Input Input is given from Standard Input in the following format: ``` number_of_cookies number_of_bags ``` Output Print `yes` if all the cookies can be evenly distributed into the bags; otherwise, print `no`. Examples Input 12 3 Output yes Input 15 4 Output no Input 1000000000 1000000 Output yes","solution":"def can_distribute_evenly(cookies, bags): Return \'yes\' if cookies can be evenly distributed in the bags, else \'no\'. :param cookies: int -- the number of cookies :param bags: int -- the number of bags :return: str -- \'yes\' if cookies can be evenly distributed, else \'no\' if cookies % bags == 0: return \'yes\' return \'no\' if __name__ == \\"__main__\\": import sys input_data = sys.stdin.read().strip() cookies, bags = map(int, input_data.split()) print(can_distribute_evenly(cookies, bags))"},{"question":"In a diversion game, there are two types of pieces identified by their shapes: circles and squares. You are given coordinates for three game pieces on a 2D grid. Two pieces share the same shape, while one does not. Your task is to identify the coordinates of the piece with the unique shape. Each coordinate is represented as a pair of integers (x, y), and each shape is represented either by \\"C\\" (circle) or \\"S\\" (square). Constraints: * -1000 leq x, y leq 1000 * The input coordinates are unique. * Exactly two pieces will have the same shape, and the third will have a different shape. Input: Input is given from Standard Input in the following format: x1 y1 shape1 x2 y2 shape2 x3 y3 shape3 Output: Print the coordinates of the piece with the unique shape in the format \\"x y\\". Examples: Input: 1 2 C 3 4 S 1 2 S Output: 1 2 Input: -2 -3 S 5 8 S 7 2 C Output: 7 2","solution":"def find_unique_shape_piece(pieces): Finds the piece with the unique shape among the three given pieces. Args: pieces: list of tuples, where each tuple contains the x coordinate, y coordinate, and shape (\\"C\\" for circle or \\"S\\" for square) of a game piece. Returns: A tuple containing the x and y coordinates of the piece with the unique shape. shape_count = {} for piece in pieces: shape_count[piece[2]] = shape_count.get(piece[2], 0) + 1 unique_shape = next(shape for shape, count in shape_count.items() if count == 1) for piece in pieces: if piece[2] == unique_shape: return piece[0], piece[1]"},{"question":"You are given an integer N. Write a program to determine whether N is a triangular number. A triangular number or triangle number is a number that can be arranged in the shape of an equilateral triangle, and it is the sum of the n natural numbers from 1 to n. The first few triangular numbers are 1, 3, 6, 10, 15, and so on. Constraints: * 1 leq N leq 10^9 * N is an integer. Input: Input is given from Standard Input in the following format: N Output: Print `Yes` if N is a triangular number, otherwise print `No`. Examples: Input 6 Output Yes Input 7 Output No","solution":"def is_triangular_number(N): Determine whether N is a triangular number. A triangular number is of the form T_n = n * (n + 1) / 2 for some integer n. To determine if N is triangular, we need to solve the quadratic equation: n^2 + n - 2N = 0 The roots are given by: n = (-1 + sqrt(1 + 8N)) / 2 If n is a natural number, then N is a triangular number. :param N: int :return: str \\"Yes\\" or \\"No\\" from math import sqrt if N < 1: return \\"No\\" # Calculate the discriminant discriminant = 1 + 8 * N sqrt_discriminant = int(sqrt(discriminant)) # Check if the discriminant is a perfect square if sqrt_discriminant * sqrt_discriminant != discriminant: return \\"No\\" # Check if the n is a natural number n = (-1 + sqrt_discriminant) / 2 if n.is_integer() and n > 0: return \\"Yes\\" else: return \\"No\\""},{"question":"Travel Expenses Calculator You are the manager of a company, and your employees travel frequently. Each employee tracks their travel expenses and presents you with a consolidated record for each trip. Your task is to write a program that calculates the total travel expenses for each trip based on the given records. The travel expenses are categorized into three types: 1. **Transport Expense (T)**: This includes money spent on transportation like cabs, buses, flights, etc. 2. **Food Expense (F)**: This includes money spent on meals during the trip. 3. **Accommodation Expense (A)**: This includes money spent on lodging. The input consists of multiple datasets. Each dataset represents the travel expenses for a single trip and ends with a zero line. Each dataset starts with an integer N which represents the number of expense records for that trip, followed by N lines of expenses. Each expense record specifies the type of expense and the amount spent. For example, an input line `T 250` means that 250 units were spent on Transport. The expenses are always positive integers. For each dataset, your program should calculate the total amount spent on each type of expense and the grand total of all expenses. # Input The input consists of multiple datasets. Each dataset is formatted as follows: > N > Type1 Amount1 > Type2 Amount2 > ... > TypeN AmountN Where: * N (1 ≤ N ≤ 1000) is the number of expense records for the trip. * Typei is one of the characters \'T\', \'F\', \'A\' denoting the type of expense. * Amounti (1 ≤ Amounti ≤ 100000) represents the amount spent for that expense record. The input ends with a line containing a single zero. # Output For each dataset, output the following three lines: 1. The total Transport expenses. 2. The total Food expenses. 3. The total Accommodation expenses. 4. The grand total of all expenses. Separate the outputs of different datasets with a blank line. # Example Input ``` 5 T 250 F 100 A 300 T 150 F 50 3 F 200 A 400 T 100 0 ``` Output ``` Transport: 400 Food: 150 Accommodation: 300 Total: 850 Transport: 100 Food: 200 Accommodation: 400 Total: 700 ``` Write a code that calculates the total travel expenses for each trip based on the input data.","solution":"def travel_expenses_calculator(input_data): Processes travel expense records and calculates the total expenses for each category and the overall total. :param input_data: List of strings, where each string is a line from the input. :return: List of strings, where each string is a line of the output. result = [] index = 0 while index < len(input_data): line = input_data[index].strip() if line == \'0\': break N = int(line) transport_total = 0 food_total = 0 accommodation_total = 0 index += 1 for _ in range(N): expense = input_data[index].strip().split() expense_type = expense[0] amount = int(expense[1]) if expense_type == \'T\': transport_total += amount elif expense_type == \'F\': food_total += amount elif expense_type == \'A\': accommodation_total += amount index += 1 grand_total = transport_total + food_total + accommodation_total result.append(f\\"Transport: {transport_total}\\") result.append(f\\"Food: {food_total}\\") result.append(f\\"Accommodation: {accommodation_total}\\") result.append(f\\"Total: {grand_total}\\") result.append(\\"\\") # Adding blank line for separation between datasets return result # Example usage: # input_data = [ # \'5\', \'T 250\', \'F 100\', \'A 300\', \'T 150\', \'F 50\', # \'3\', \'F 200\', \'A 400\', \'T 100\', # \'0\' # ] # output = travel_expenses_calculator(input_data) # for line in output: # print(line)"},{"question":"You are given a series of words and you need to determine the minimum number of operations required to convert one word into another. The operations you can perform are: 1. Insert a single character 2. Delete a single character 3. Replace a single character Write a function `min_operations(word1, word2)` that takes two words `word1` and `word2` and returns an integer representing the minimum number of operations required to convert `word1` into `word2`. # Example ``` Input: word1 = \\"horse\\", word2 = \\"ros\\" Output: 3 Explanation: horse -> rorse (replace \'h\' with \'r\') rorse -> rose (remove \'r\') rose -> ros (remove \'e\') Input: word1 = \\"intention\\", word2 = \\"execution\\" Output: 5 Explanation: intention -> inention (remove \'t\') inention -> enention (replace \'i\' with \'e\') enention -> exention (replace \'n\' with \'x\') exention -> exection (replace \'n\' with \'c\') exection -> execution (insert \'u\') ``` # Constraints * 0 ≤ word1.length, word2.length ≤ 500 * word1 and word2 consist of only lowercase English letters. # Note You need to implement an efficient solution with a time complexity of O(n * m), where n and m are the lengths of `word1` and `word2` respectively. Use dynamic programming to solve this problem. The provided function signature should be as follows: ``` def min_operations(word1: str, word2: str) -> int: ``` # Function Signature Your function should have the following signature: ``` def min_operations(word1: str, word2: str) -> int: ```","solution":"def min_operations(word1, word2): Returns the minimum number of operations required to convert word1 into word2 where operations can be insert, delete, or replace a character. m, n = len(word1), len(word2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # If word1 is empty, we have to insert all characters of word2 elif j == 0: dp[i][j] = i # If word2 is empty, we have to delete all characters of word1 elif word1[i - 1] == word2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i][j - 1], # Insert dp[i - 1][j], # Delete dp[i - 1][j - 1]) # Replace return dp[m][n]"},{"question":"A warehouse management system in a branching logistics company has a new feature to track the inventory of items more efficiently. The warehouse comprises several sectors, and items can be moved from one sector to another. To optimize the tracking, each item move is recorded with the details of the source sector, the destination sector, and the number of items moved. The system needs to report the net change in the number of items in each sector after a series of moves. You have to write a program that, given the initial inventory of items in each sector and a list of moves, calculates the final inventory in each sector. # Input The first line contains an integer `s` (1 ≤ s ≤ 105) — the number of sectors in the warehouse. The second line contains `s` integers where the `i`-th integer represents the initial number of items in the `i`-th sector. The third line contains an integer `m` (1 ≤ m ≤ 105) — the number of moves recorded. Each of the following `m` lines contains three integers `u`, `v`, and `k` (1 ≤ u, v ≤ s, 0 ≤ k ≤ 109) — where the move involves `k` items being moved from sector `u` to sector `v`. # Output Output `s` integers, representing the final number of items in each sector. # Example Input 5 10 20 30 40 50 3 1 2 5 2 3 10 5 4 15 Output 5 15 40 55 35 Explanation - Initially, the sectors have inventories [10, 20, 30, 40, 50]. - In the first move, 5 items are moved from sector 1 to sector 2, resulting in [5, 25, 30, 40, 50]. - In the second move, 10 items are moved from sector 2 to sector 3, resulting in [5, 15, 40, 40, 50]. - In the third move, 15 items are moved from sector 5 to sector 4, resulting in [5, 15, 40, 55, 35]. Thus, the final inventory in each sector is [5, 15, 40, 55, 35].","solution":"def calculate_final_inventory(s, initial_inventory, m, moves): Calculate the final inventory of items in each sector after a series of moves. :param s: Number of sectors. :param initial_inventory: List of initial inventory in each sector. :param m: Number of moves recorded. :param moves: List of moves where each move is a tuple (u, v, k) representing `k` items moved from sector `u` to sector `v`. :return: List of final inventory in each sector. # Adjust the moves for zero-based indexing for move in moves: u, v, k = move[0] - 1, move[1] - 1, move[2] initial_inventory[u] -= k initial_inventory[v] += k return initial_inventory"},{"question":"You are given a series of strings representing tasks and their respective durations in minutes. You need to determine the total time required to complete all tasks and the average duration of a single task rounded to the nearest whole number. If there are no tasks provided, the output should be \\"No tasks to complete\\". # Input A sequence of strings is provided, each representing a task and its duration in the format \\"TaskName:Duration\\". The duration is a positive integer representing the time in minutes. The end of the input is signaled by the string \\"END\\". # Output Output two lines: 1. The total time to complete all tasks in minutes. 2. The average duration of a single task in minutes, rounded to the nearest whole number. If there are no tasks, output \\"No tasks to complete\\". # Example Input ``` Task1:30 Task2:45 Task3:25 END ``` Output ``` 100 33 ``` Input ``` END ``` Output ``` No tasks to complete ``` # Note - The order of the tasks in the input does not matter. - You can assume that the input format is always correct and no validation of input format is required. - Use built-in functions for rounding if necessary.","solution":"def calculate_time(tasks): Calculates the total time and average duration of tasks. Arguments: tasks -- list of strings, each representing a task and its duration in the format \\"TaskName:Duration\\" Returns: A tuple containing the total time of all tasks and the average duration of a single task, both rounded appropriately. If no tasks are provided, returns \\"No tasks to complete\\". if len(tasks) == 0 or (len(tasks) == 1 and tasks[0] == \\"END\\"): return \\"No tasks to complete\\" total_time = 0 count = 0 for task in tasks: if task == \\"END\\": break duration = int(task.split(\\":\\")[1]) total_time += duration count += 1 if count == 0: return \\"No tasks to complete\\" average_time = round(total_time / count) return f\\"{total_time}n{average_time}\\""},{"question":"You are given two strings s1 and s2 consisting of lowercase English letters. Your task is to find out if s1 can be transformed into s2 by rearranging its characters and possibly replacing any number of characters with any other character. Each character replacement incurs a fixed cost, and you need to minimize this cost. Input The first line of the input contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. Each of the next t lines contains two strings s1 and s2. Output For each test case, print the minimum cost of transforming s1 into s2 if such transformation is possible. If it\'s not possible, print -1. Cost Calculation: - If a character c1 in s1 can be replaced with a character c2 in s2, the cost is 1. - If a character c1 in s1 needs to be entirely replaced (i.e., not present in s2), the cost is equal to the number of occurrences of c1 in s1. Constraints - 1 ≤ |s1|, |s2| ≤ 10^5 - s1 and s2 can be transformed from one into the other if and only if they have the same length. Examples Input 3 abc def aabbcc ddeeff aaa bbb Output 3 6 3","solution":"def min_transformation_cost(t, cases): results = [] for s1, s2 in cases: if len(s1) != len(s2): results.append(-1) continue from collections import Counter count_s1 = Counter(s1) count_s2 = Counter(s2) total_cost = 0 for char in count_s1: if char in count_s2: total_cost += abs(count_s1[char] - count_s2[char]) else: total_cost += count_s1[char] for char in count_s2: if char not in count_s1: total_cost += count_s2[char] total_cost //= 2 # Fix the double counting of changes results.append(total_cost) return results"},{"question":"Given a square matrix of size n x n filled with distinct integers, you are required to perform the following operations: 1. Rotate the matrix 90 degrees clockwise. 2. Find the maximum sum of elements in any row or column of the rotated matrix. Input The first line of input contains a single integer n (1 ≤ n ≤ 300) — the size of the matrix. The next n lines each contain n integers a_ij (1 ≤ a_ij ≤ 10^6) — the elements of the matrix, where a_ij is the element in the i-th row and j-th column. Output Print a single integer — the maximum sum of elements in any row or column of the rotated matrix. Examples Input 2 3 5 7 1 Output 10 Input 3 1 2 3 4 5 6 7 8 9 Output 24 Note In the first example, the original matrix is: ``` 3 5 7 1 ``` After rotating 90 degrees clockwise, the matrix becomes: ``` 7 3 1 5 ``` The sums of rows and columns are 10, 4, 8, and 8. The maximum sum is 10. In the second example, the original matrix is: ``` 1 2 3 4 5 6 7 8 9 ``` After rotating 90 degrees clockwise, the matrix becomes: ``` 7 4 1 8 5 2 9 6 3 ``` The sums of rows and columns are 12, 15, 18, 24, 15, and 6. The maximum sum is 24.","solution":"def rotate_matrix(matrix): Rotates the given n x n matrix by 90 degrees clockwise. n = len(matrix) rotated = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated[j][n - i - 1] = matrix[i][j] return rotated def max_sum_in_matrix(matrix): Finds the maximum sum of elements in any row or column of the matrix. n = len(matrix) max_sum = 0 for i in range(n): row_sum = sum(matrix[i]) col_sum = sum(matrix[j][i] for j in range(n)) max_sum = max(max_sum, row_sum, col_sum) return max_sum def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) matrix = [] index = 1 for i in range(n): row = list(map(int, data[index:index + n])) matrix.append(row) index += n rotated_matrix = rotate_matrix(matrix) result = max_sum_in_matrix(rotated_matrix) print(result)"},{"question":"Sanjay loves to play games in his free time. One of his favorite games involves removing characters from a string to obtain the longest possible subsequence that is a palindrome. Sanjay wants to develop a program to automate this process, and he needs your help. A palindrome is a string that reads the same forward and backward. Given a string, your task is to remove the minimum number of characters such that the remaining string is the longest subsequence that is a palindrome. Write a function `longest_palindromic_subsequence(s: str) -> int` that takes a string `s` and returns an integer representing the length of the longest palindromic subsequence that can be obtained by removing characters from `s`. Input: - A single string `s` of length `n` (1 ≤ n ≤ 1000) containing only lowercase English letters. Output: - An integer representing the length of the longest palindromic subsequence that can be obtained. Example: Input: ``` bbabcbcab ``` Output: ``` 7 ``` Explanation: The longest palindromic subsequence is \\"babcbab\\" with a length of 7. Input: ``` abcdef ``` Output: ``` 1 ``` Explanation: The longest palindromic subsequence is any single character, with a length of 1.","solution":"def longest_palindromic_subsequence(s: str) -> int: Returns the length of the longest palindromic subsequence in the string s. n = len(s) # Create a table to store lengths of longest palindromic subsequences of substring s[i:j+1] dp = [[0]*n for _ in range(n)] # Every single character is a palindrome of length 1 for i in range(n): dp[i][i] = 1 # Build the table. The outer loop is for substrings of different lengths for cl in range(2, n+1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j]: if cl == 2: dp[i][j] = 2 else: dp[i][j] = dp[i+1][j-1] + 2 else: dp[i][j] = max(dp[i][j-1], dp[i+1][j]) # length of longest palindromic subseq will be in dp[0][n-1] return dp[0][n-1]"},{"question":"Jakub love creating patterns with stars. Given a positive integer n, print an isosceles triangle of stars of height n. The nth row of the triangle should contain 2n-1 stars, centered in the output. Constraints * 1 ≤ n ≤ 20 * n is an integer. Input Input is given from Standard Input in the following format: n Output Print the isosceles triangle of stars. Examples Input 3 Output ``` * *** ***** ``` Input 5 Output ``` * *** ***** ******* ********* ```","solution":"def print_isosceles_triangle(n): Prints an isosceles triangle of stars of height n. The nth row of the triangle contains 2n-1 stars, centered in the output. for i in range(1, n+1): stars = \'*\' * (2*i - 1) print(stars.center(2*n - 1))"},{"question":"In a certain programming project, you have been asked to work on a file conversion tool. This tool reads a file which contains a list of student names followed by a list of their respective grades. Your task is to write a program that reads this file, calculates the average grade for each student, and outputs the results in a specific format. The input will consist of multiple datasets. Each dataset starts with an integer n, representing the number of students. This is followed by n lines, each containing a student\'s name. Immediately after this, there will be n lines, each containing a list of grades separated by spaces for the respective students. Each line of grades will have the same number of elements. The end of the input is indicated by a single line containing a zero. Your program should calculate the average grade for each student and output the results in the format: \\"name: average\\". The average should be printed as a floating-point number rounded to two decimal places. Input: The input consists of multiple datasets, each in the following format: ``` n name1 name2 ... namen grade_list1 grade_list2 ... grade_listn 0 ``` For example: ``` 3 Alice Bob Charlie 95 85 94 92 88 79 85 80 78 74 70 72 0 ``` Output: For each dataset, output the average grade for each student in the format \\"name: average\\", one per line. For the example input: ``` Alice: 91.50 Bob: 83.00 Charlie: 73.50 ``` # Constraints: - `n` is between 1 and 20, inclusive. - Each student\'s name is a string containing between 1 and 20 alphabetical characters. - Each list of grades contains between 1 and 10 integers, each between 0 and 100 inclusive. - Multiple datasets are separated by the zero line and should be processed sequentially. # Notes: - You should ignore any possible extra whitespaces in the input. - An output dataset for a given input dataset should contain results for each student from that dataset.","solution":"def calculate_averages(data): Reads the data of multiple datasets where each dataset contains student names followed by their respective grades. Calculates the average grade for each student and returns the results in the specified format. import numpy as np i = 0 results = [] while i < len(data): n = int(data[i].strip()) if n == 0: break i += 1 students = [] for _ in range(n): students.append(data[i].strip()) i += 1 grades = [] for _ in range(n): grades.append(list(map(int, data[i].strip().split()))) i += 1 for student, grade_list in zip(students, grades): avg = np.mean(grade_list) results.append(f\\"{student}: {avg:.2f}\\") return results # Example usage: input_data = [ \\"3\\", \\"Alice\\", \\"Bob\\", \\"Charlie\\", \\"95 85 94 92\\", \\"88 79 85 80\\", \\"78 74 70 72\\", \\"0\\", ] output = calculate_averages(input_data) for line in output: print(line)"},{"question":"Develop a recommendation system for a restaurant review application. The application stores user reviews for a set of restaurants. Each review consists of a numerical rating (between 1 and 5, inclusive) and a text comment. Users can search for restaurants by specifying a minimum average rating and a maximum distance from their current location. The system should display the names of the restaurants that meet the criteria, sorted by their average rating in descending order (in the case of a tie, sort by the restaurant name in lexicographical order). To achieve this, you need to implement the following functionalities: 1. Add a review: Given the restaurant\'s name, a rating, and a comment, add the review to the restaurant\'s record, and update the restaurant\'s average rating. 2. Search for restaurants: Given a minimum average rating and a maximum distance, return a list of restaurant names that meet the criteria. Input The first line contains an integer n (1 ≤ n ≤ 10^5), the number of reviews to be added. The next n lines each contain a restaurant name (a string of 1 to 100 characters, consisting of uppercase and lowercase Latin letters), a rating (an integer between 1 and 5), a comment (a string of 1 to 500 characters), and the distance of the restaurant from the user\'s location (a non-negative integer between 0 and 10^3). The last line contains two integers min_rating (1 ≤ min_rating ≤ 5) and max_distance (0 ≤ max_distance ≤ 10^3) - the minimum average rating and the maximum distance for the search criteria. Output Print the names of the restaurants that meet the criteria, each on a new line. The names should be sorted by their average rating in descending order; if two or more restaurants have the same average rating, sort their names in lexicographical order. Examples Input 6 BurgerKing 4 Tasty 10 PizzaHut 5 Yummy 15 Subway 3 Average 50 PizzaHut 3 Okay 15 BurgerKing 5 Excellent 10 Dominos 2 Bad 20 4 50 Output BurgerKing PizzaHut Explanation The average rating of BurgerKing is (4+5)/2 = 4.5 and its distance is 10, which meets the criteria with min_rating = 4 and max_distance = 50. The average rating of PizzaHut is (5+3)/2 = 4 and its distance is 15, which also meets the criteria. Subway and Dominos do not meet the min_rating criteria.","solution":"def add_review(restaurant_reviews, restaurant_distances, name, rating, comment, distance): Adds a review to the restaurant\'s record and updates the restaurant\'s average rating and distance. :param restaurant_reviews: Dictionary with restaurant names as keys and list of ratings as values :param restaurant_distances: Dictionary with restaurant names as keys and distance as values :param name: Restaurant name :param rating: Rating given (integer between 1 and 5) :param comment: Text comment (not used in this implementation) :param distance: Distance from user\'s location if name not in restaurant_reviews: restaurant_reviews[name] = [] restaurant_distances[name] = distance # Assuming same distance for simplicity restaurant_reviews[name].append(rating) def search_restaurants(restaurant_reviews, restaurant_distances, min_rating, max_distance): Search for restaurants that meet the criteria and return sorted list of restaurant names. :param restaurant_reviews: Dictionary with restaurant names as keys and list of ratings as values :param restaurant_distances: Dictionary with restaurant names as keys and distance as values :param min_rating: Minimum average rating for the restaurant to be included in results :param max_distance: Maximum distance for the restaurant to be included in results :return: List of restaurant names that meet the criteria, sorted by average rating and name results = [] for name, ratings in restaurant_reviews.items(): average_rating = sum(ratings) / len(ratings) if average_rating >= min_rating and restaurant_distances[name] <= max_distance: results.append((average_rating, name)) results.sort(key=lambda x: (-x[0], x[1])) return [name for _, name in results] def main(lst, min_rating, max_distance): Main function to parse input, add reviews and search for restaurants. :param lst: List of review details :param min_rating: Minimum average rating for the search :param max_distance: Maximum distance for the search :return: List of restaurant names that meet the criteria restaurant_reviews = {} restaurant_distances = {} for review in lst: name, rating, comment, distance = review add_review(restaurant_reviews, restaurant_distances, name, rating, comment, distance) return search_restaurants(restaurant_reviews, restaurant_distances, min_rating, max_distance) # Example usage if __name__ == \\"__main__\\": n = 6 reviews = [ (\\"BurgerKing\\", 4, \\"Tasty\\", 10), (\\"PizzaHut\\", 5, \\"Yummy\\", 15), (\\"Subway\\", 3, \\"Average\\", 50), (\\"PizzaHut\\", 3, \\"Okay\\", 15), (\\"BurgerKing\\", 5, \\"Excellent\\", 10), (\\"Dominos\\", 2, \\"Bad\\", 20) ] min_rating = 4 max_distance = 50 result = main(reviews, min_rating, max_distance) for name in result: print(name)"},{"question":"You are given a two-dimensional matrix of size n x m, initially filled with zeros. A sequence of update operations is applied to this matrix, where each operation adds a certain value to all elements in a sub-rectangle of the matrix. Your task is to compute the final state of the matrix after all update operations. Input: - The first line contains two integers n and m (1 ≤ n, m ≤ 10^3) — the number of rows and columns of the matrix. - The second line contains a single integer q (1 ≤ q ≤ 10^5) — the number of updates. - The next q lines each contain five integers r1, c1, r2, c2, and v (1 ≤ r1 ≤ r2 ≤ n, 1 ≤ c1 ≤ c2 ≤ m, -10^9 ≤ v ≤ 10^9) — the top-left and bottom-right coordinates of the sub-rectangle and the value to be added to each element in that sub-rectangle. Output: - Output n lines, each containing m integers, describing the final state of the matrix. Example: Input: ``` 3 4 2 1 1 2 2 5 2 3 3 4 10 ``` Output: ``` 5 5 0 0 5 5 10 10 0 0 10 10 ``` Explanation: - After the first update (1, 1, 2, 2, 5), the matrix becomes: ``` 5 5 0 0 5 5 0 0 0 0 0 0 ``` - After the second update (2, 3, 3, 4, 10), the matrix becomes: ``` 5 5 0 0 5 5 10 10 0 0 10 10 ```","solution":"def apply_updates(n, m, q, updates): # Initialize the matrix with zeros matrix = [[0] * m for _ in range(n)] # Apply each update for update in updates: r1, c1, r2, c2, v = update for i in range(r1 - 1, r2): for j in range(c1 - 1, c2): matrix[i][j] += v return matrix"},{"question":"Truck Loading Optimization problem Imagine you manage a warehouse and need to load a truck with packages of various weights. Unfortunately, the truck has a weight limit that must not be exceeded. You want to maximize the total weight of the packages loaded into the truck without surpassing the weight limit. Given the list of package weights and the truck\'s weight limit, determine the maximum weight that can be loaded. Input format W N w_1 w_2 ... w_N Constraint * 1 ≤ W ≤ 10^6 * 1 ≤ N ≤ 1000 * 1 ≤ w_i ≤ 1000 * All inputs are integers. Output format Print a single integer representing the maximum weight that can be loaded into the truck without exceeding the weight limit. Input example 1 50 5 10 20 30 40 50 Output example 1 50 * The optimal way is to choose the package weighing 50. Input example 2 50 5 5 10 15 20 25 Output example 2 50 * One possible way is to choose 25 and 25. Input example 3 45 4 10 20 30 45 Output example 3 45 * The optimal way is to pick the 45-weight package. Example Input 50 5 10 20 30 40 50 Output 50","solution":"def max_weight(W, N, weights): Determine the maximum weight that can be loaded into the truck without exceeding the weight limit W. :param W: int, maximum weight limit of the truck :param N: int, number of packages :param weights: list, list of weight of each package :return: int, maximum weight that can be loaded without exceeding the limit dp = [0] * (W + 1) for weight in weights: for j in range(W, weight - 1, -1): dp[j] = max(dp[j], dp[j - weight] + weight) return dp[W]"},{"question":"Henry loves decoding secret messages. One day, he found a note that contains a series of encrypted numbers. The numbers are placed in specific positions but some are missing, denoted by `-1`. Henry knows how the sequence should look once complete: it’s a permutation of the integers from `1` to `n`. Help Henry to determine if the message can be completed in exactly one way. If it is possible to uniquely complete the sequence, output the completed sequence; otherwise, output \\"No\\". Input: - The first line contains an integer `n` (1 ≤ n ≤ 100,000) — the length of the sequence. - The second line contains a sequence of `n` integers `a1, a2, ..., an` (where `ai` is either -1 or a positive integer ≥ 1 and ≤ n). Output: - If it is possible to complete the sequence in exactly one way, output a single line with `n` integers — the completed sequence. - Otherwise, output \\"No\\". Examples: Input: ``` 5 -1 3 -1 4 5 ``` Output: ``` 1 3 2 4 5 ``` Input: ``` 4 -1 2 2 4 ``` Output: ``` No ``` Input: ``` 1 -1 ``` Output: ``` 1 ``` Note: In the first example, the only valid sequence is `1 3 2 4 5`. In the second example, the sequence contains duplicate numbers, making it impossible to complete it as a permutation of `1` to `4`. In the third example, the sequence has only one missing place which can only be filled with `1`.","solution":"def complete_sequence(n, sequence): Determine if the sequence can be uniquely completed to a permutation of 1 to n. If it is possible to uniquely complete the sequence, return the completed sequence. Otherwise, return \\"No\\". completed = sequence[:] missing_numbers = set(range(1, n + 1)) - set(sequence) # Check if the existing numbers form a valid partial permutation if len(set(sequence) - {-1}) != len([x for x in sequence if x != -1]): return \\"No\\" missing_position = 0 for i in range(n): if completed[i] == -1: if missing_position < len(missing_numbers): completed[i] = sorted(missing_numbers)[missing_position] missing_position += 1 return \\" \\".join(map(str, completed))"},{"question":"You are given a tree consisting of n nodes labeled with numbers from 1 to n, and n-1 edges. Each edge has a weight assigned to it. A query on the tree asks for the greatest weight among the edges on the path between two given nodes u and v. Write a program to answer q such queries efficiently. Input The first line of input contains two integers n and q (1 ≤ n, q ≤ 10^5) — the number of nodes in the tree and the number of queries. Each of the following n-1 lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6), denoting an edge between nodes u and v with weight w. Each of the following q lines contains two integers a and b (1 ≤ a, b ≤ n), representing a query that asks for the greatest weight among the edges on the path from node a to node b. Output For each query, print the greatest weight among the edges on the path from node a to node b. Example Input 5 3 1 2 4 1 3 2 2 4 3 2 5 6 1 4 4 5 3 5 Output 4 6 6","solution":"MAX_LOG = 17 # Since 2^17 > 10^5 (as 2^17 = 131072) def dfs(graph, node, parent, depth, max_weight, log_parents, log_max_weights): for neighbor, weight in graph[node]: if neighbor != parent: depth[neighbor] = depth[node] + 1 log_parents[neighbor][0] = node log_max_weights[neighbor][0] = weight dfs(graph, neighbor, node, depth, max_weight, log_parents, log_max_weights) def preprocess_lca(n, graph): depth = [-1] * (n+1) max_weight = [[0] * (MAX_LOG) for _ in range(n+1)] log_parents = [[-1] * (MAX_LOG) for _ in range(n+1)] # Start DFS from node 1 (assuming 1-indexed nodes) depth[1] = 0 dfs(graph, 1, -1, depth, max_weight, log_parents, max_weight) # Binary Lifting preprocessing for j in range(1, MAX_LOG): for i in range(1, n + 1): if log_parents[i][j-1] != -1: log_parents[i][j] = log_parents[log_parents[i][j-1]][j-1] max_weight[i][j] = max(max_weight[i][j-1], max_weight[log_parents[i][j-1]][j-1]) return depth, log_parents, max_weight def lca_max_weight(u, v, depth, log_parents, max_weight): if depth[u] < depth[v]: u, v = v, u diff = depth[u] - depth[v] maximum_weight = 0 for i in range(MAX_LOG): if (diff >> i) & 1: maximum_weight = max(maximum_weight, max_weight[u][i]) u = log_parents[u][i] if u == v: return maximum_weight for i in range(MAX_LOG-1, -1, -1): if log_parents[u][i] != log_parents[v][i]: maximum_weight = max(maximum_weight, max_weight[u][i], max_weight[v][i]) u = log_parents[u][i] v = log_parents[v][i] return max(maximum_weight, max_weight[u][0], max_weight[v][0]) def process_queries(n, graph, queries): depth, log_parents, max_weight = preprocess_lca(n, graph) results = [] for u, v in queries: results.append(lca_max_weight(u, v, depth, log_parents, max_weight)) return results"},{"question":"You are participating in an international archery competition. Each archer, including yourself, has taken multiple shots at the target. The target is circular and divided into concentric scoring rings. The exact score from a shot depends on the distance from the center of the target. Your goal is to determine the ranking of archers based on their total scores. Archers with higher total scores should be ranked higher. If two archers have the same score, they should have the same rank, and their ranks should leave a gap before the next rank. Given the scores of multiple archers, you need to compute the ranks accordingly. Input The first line contains an integer `n` (1 ≤ n ≤ 1000), the number of archers. The second line contains `n` integers, where the i-th integer represents the total score of the i-th archer. The scores are integer values and can be negative or zero. Output Print a single line containing the ranks of the archers in order of their input. Each rank is an integer where 1 represents the highest score. Examples Input 5 100 200 50 50 200 Output 3 1 4 4 1 Input 3 300 150 300 Output 1 3 1","solution":"def archery_ranking(n, scores): Determines the rank of archers based on their total scores. Args: n: int, the number of archers. scores: list of int, total scores of each archer. Returns: list, ranks of the archers based on their total scores. # Sort scores and keep track of original indices sorted_scores = sorted(((score, i) for i, score in enumerate(scores)), reverse=True) # Allocate ranks ranks = [0] * n current_rank = 1 for i, (score, original_index) in enumerate(sorted_scores): if i > 0 and sorted_scores[i-1][0] != score: current_rank = i + 1 ranks[original_index] = current_rank return ranks # Example usage: # archery_scores = [100, 200, 50, 50, 200] # print(archery_ranking(5, archery_scores)) # Output: [3, 1, 4, 4, 1]"},{"question":"In a data center, there are N servers numbered from 1 to N, connected by M bidirectional network cables. Each cable has a unique cable ID, and a connection time that it takes to communicate through this cable. The data center manager needs to find the shortest time to send a message between two given servers S and T. Write a program to determine this shortest communication time. If it is not possible to send a message between the specified servers, the program should return `-1`. **Constraints:** * 1 ≤ N ≤ 1000 * 0 ≤ M ≤ 10000 * 1 ≤ S, T ≤ N * 1 ≤ u_i, v_i ≤ N for each 1 ≤ i ≤ M * 1 ≤ t_i ≤ 1000 for each 1 ≤ i ≤ M * u_i ≠ v_i for each 1 ≤ i ≤ M **Input:** The input occurs from Standard Input in the following format: ```plaintext N M S T u_1 v_1 t_1 u_2 v_2 t_2 : u_M v_M t_M ``` Where: - N: the number of servers - M: the number of bidirectional connections - S: the starting server - T: the target server - u_i, v_i: the endpoints of the ith connection (1-based index) - t_i: the communication time of the ith connection **Output:** Print the minimum time required to send the message between server S and server T. If it is impossible to send the message, print `-1`. **Examples:** **Input:** ```plaintext 4 4 1 4 1 2 1 2 3 2 3 4 1 1 3 4 ``` **Output:** ```plaintext 4 ``` **Input:** ```plaintext 5 5 1 5 1 2 2 2 3 3 3 4 4 4 5 5 1 5 10 ``` **Output:** ```plaintext 10 ``` **Input:** ```plaintext 3 1 1 3 1 2 4 ``` **Output:** ```plaintext -1 ```","solution":"import heapq from collections import defaultdict def shortest_communication_time(N, M, S, T, connections): # Create graph adjacency list graph = defaultdict(list) for u, v, t in connections: graph[u].append((v, t)) graph[v].append((u, t)) # Dijkstra\'s algorithm to find the shortest path from S to T def dijkstra(source, target): pq = [(0, source)] dist = {i: float(\'inf\') for i in range(1, N + 1)} dist[source] = 0 visited = set() while pq: current_dist, u = heapq.heappop(pq) if u in visited: continue visited.add(u) if u == target: return current_dist for neighbor, weight in graph[u]: if neighbor not in visited: distance = current_dist + weight if distance < dist[neighbor]: dist[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return -1 return dijkstra(S, T)"},{"question":"A library system needs to keep track of the borrowing and returning of books by its members. Each book has a unique ISBN number and each member has a unique membership ID. You are required to implement a system that can: 1. Register a new book with its ISBN number. 2. Register a new member with their membership ID. 3. Issue a book to a member, if the book is not already issued. 4. Return a book by a member. 5. Check the status of a book (whether it is available or issued). 6. List all books borrowed by a member. Your task is to implement this system. Each operation will be given as a command, and you need to process these commands one by one. Input The first line contains an integer `n` (1 ≤ n ≤ 1000), the number of commands. Each of the next `n` lines contains one of the following commands in the format described: 1. \\"REGISTER_BOOK <ISBN>\\" - Register a new book with the given ISBN number (a string of up to 20 characters). 2. \\"REGISTER_MEMBER <MEMBER_ID>\\" - Register a new member with the given membership ID (a string of up to 20 characters). 3. \\"ISSUE <ISBN> <MEMBER_ID>\\" - Issue the book with the given ISBN to the member with the given membership ID, if the book is not already issued. 4. \\"RETURN <ISBN> <MEMBER_ID>\\" - Return the book with the given ISBN by the member with the given membership ID. 5. \\"STATUS <ISBN>\\" - Print \\"Available\\" if the book with the given ISBN is not issued, otherwise print the membership ID of the member who borrowed the book. 6. \\"LIST_BORROWED <MEMBER_ID>\\" - List all ISBN numbers of the books borrowed by the member with the given membership ID, separated by spaces. If no books are borrowed, print \\"No books borrowed\\". Output For each \\"STATUS\\" and \\"LIST_BORROWED\\" command, print the appropriate result. Example Input 10 REGISTER_BOOK 12345 REGISTER_BOOK 54321 REGISTER_MEMBER 001 REGISTER_MEMBER 002 ISSUE 12345 001 STATUS 12345 STATUS 54321 LIST_BORROWED 001 RETURN 12345 001 STATUS 12345 Output 001 Available 12345 Not issued","solution":"class LibrarySystem: def __init__(self): self.books = {} self.members = {} self.issued_books = {} def register_book(self, isbn): if isbn not in self.books: self.books[isbn] = None def register_member(self, member_id): if member_id not in self.members: self.members[member_id] = [] def issue_book(self, isbn, member_id): if isbn in self.books and self.books[isbn] is None and member_id in self.members: self.books[isbn] = member_id self.members[member_id].append(isbn) def return_book(self, isbn, member_id): if isbn in self.books and self.books[isbn] == member_id: self.books[isbn] = None self.members[member_id].remove(isbn) def status(self, isbn): if isbn in self.books: if self.books[isbn] is None: return \\"Available\\" else: return self.books[isbn] return \\"Not issued\\" def list_borrowed(self, member_id): if member_id in self.members: borrowed_books = self.members[member_id] if borrowed_books: return \\" \\".join(borrowed_books) else: return \\"No books borrowed\\" return \\"No books borrowed\\" def process_commands(commands): library = LibrarySystem() output = [] for command in commands: parts = command.split() if parts[0] == \\"REGISTER_BOOK\\": library.register_book(parts[1]) elif parts[0] == \\"REGISTER_MEMBER\\": library.register_member(parts[1]) elif parts[0] == \\"ISSUE\\": library.issue_book(parts[1], parts[2]) elif parts[0] == \\"RETURN\\": library.return_book(parts[1], parts[2]) elif parts[0] == \\"STATUS\\": output.append(library.status(parts[1])) elif parts[0] == \\"LIST_BORROWED\\": output.append(library.list_borrowed(parts[1])) return output"},{"question":"Leo is working on a coding project that involves converting integer values into their corresponding Roman numeral representations. A Roman numeral is a string of characters that consists of the following symbols: `I`, `V`, `X`, `L`, `C`, `D`, and `M`. Leo needs your help in writing a function that converts a given integer to a Roman numeral. The Roman numeral system works as follows: - `I` is 1 - `V` is 5 - `X` is 10 - `L` is 50 - `C` is 100 - `D` is 500 - `M` is 1000 There are 6 instances where subtraction is used to denote a value: - `IV` is 4 (5 - 1) - `IX` is 9 (10 - 1) - `XL` is 40 (50 - 10) - `XC` is 90 (100 - 10) - `CD` is 400 (500 - 100) - `CM` is 900 (1000 - 100) For example, the integer 58 would be represented as `LVIII`, which is `50 + 5 + 1 + 1 + 1`. Input: - A single integer value representing the number you need to convert to a Roman numeral. Output: - A string representing the given integer in Roman numeral format. Constraints: 1 ≤ number ≤ 3999 SAMPLE INPUT 29 SAMPLE OUTPUT XXIX Explanation The integer 29 is represented as: - `X` for 10 - `X` for 10 - `I` for 1 - `X` for 9 (10 - 1) Giving the Roman numeral `XXIX`.","solution":"def int_to_roman(num): Converts an integer to a Roman numeral. Parameters: num (int): A number to be converted to Roman numeral (1 ≤ num ≤ 3999) Returns: str: The Roman numeral representation of the number roman_numerals = [ (\\"M\\", 1000), (\\"CM\\", 900), (\\"D\\", 500), (\\"CD\\", 400), (\\"C\\", 100), (\\"XC\\", 90), (\\"L\\", 50), (\\"XL\\", 40), (\\"X\\", 10), (\\"IX\\", 9), (\\"V\\", 5), (\\"IV\\", 4), (\\"I\\", 1) ] result = [] for symbol, value in roman_numerals: while num >= value: result.append(symbol) num -= value return \\"\\".join(result)"},{"question":"You are given a list of unique words and a keyword. Your task is to find the longest word in the list that can be formed by deleting some characters of the given keyword without reordering the remaining characters. If there are multiple valid results of the same length, return the one which comes first lexicographically. If there is no valid result, return an empty string. Input: - A single string keyword, which contains only lowercase letters (1 ≤ |keyword| ≤ 100). - An integer n (1 ≤ n ≤ 500), the number of words in the list. - A list of n unique words, each containing only lowercase letters (1 ≤ |word| ≤ 100). Output: - The longest word from the list that can be formed by deleting some characters of the given keyword. If there are multiple results with the same length, return the first one in lexicographical order. If no such word can be formed, return an empty string. Examples: Input: keyword: \\"abpcplea\\" n: 4 words: [\\"ale\\", \\"apple\\", \\"monkey\\", \\"plea\\"] Output: \\"apple\\" Input: keyword: \\"abpcplea\\" n: 3 words: [\\"a\\", \\"b\\", \\"c\\"] Output: \\"a\\" Input: keyword: \\"abc\\" n: 3 words: [\\"d\\", \\"e\\", \\"f\\"] Output: \\"\\" Note: Example 1: The words \\"ale\\", \\"apple\\", \\"monkey\\", and \\"plea\\" can be formed by deleting some characters from \\"abpcplea\\". Among them, \\"apple\\" is the longest. Example 2: The words \\"a\\", \\"b\\", and \\"c\\" can all be formed but \\"a\\" comes first lexicographically. Example 3: None of the words \\"d\\", \\"e\\", \\"f\\" can be formed from \\"abc\\" by deleting characters.","solution":"def find_longest_word(keyword, n, words): def can_form_by_deleting(keyword, word): it = iter(keyword) return all(char in it for char in word) words.sort(key=lambda w: (-len(w), w)) for word in words: if can_form_by_deleting(keyword, word): return word return \\"\\""},{"question":"You are given a list of temperatures recorded over a certain period and the time intervals between consecutive recordings. Based on the provided interval durations and temperatures, your task is to determine whether the temperature exceeded a specified threshold for a total duration of at least a given number of hours. If it did, output \\"Exceeded\\", otherwise output \\"Not Exceeded\\". Example: Threshold temperature | Required duration | Temperature recordings --- | --- | --- 30°C | 5 hours | [(25, 2), (31, 3), (28, 1), (32, 2)] | Exceeded 30°C | 6 hours | [(25, 2), (31, 3), (28, 1), (32, 2)] | Not Exceeded Input example Given a sequence of multiple datasets. The end of the input is indicated by a single line containing three zeros. Each dataset is given in the following format: p d n t1 i1 t2 i2 :: tn in The first line gives the threshold temperature `p` (0 ≤ p ≤ 50), and the required duration `d` (0 ≤ d ≤ 24). The second line gives the number of temperature recordings `n` (1 ≤ n ≤ 24). The following `n` lines provide the temperature `t` (−50 ≤ t ≤ 50) and the interval duration `i` (1 ≤ i ≤ 24) for each recording. The number of datasets does not exceed 100. Output example Outputs \\"Exceeded\\" or \\"Not Exceeded\\" on one line for each dataset. Input 30 5 4 25 2 31 3 28 1 32 2 30 6 4 25 2 31 3 28 1 32 2 0 0 0 Output Exceeded Not Exceeded","solution":"def check_temperature(threshold, required_duration, recordings): Check if the temperature exceeded the given threshold for at least the required duration. :param threshold: Temperature threshold :param required_duration: Required duration in hours :param recordings: List of tuples containing temperature and interval duration :return: \\"Exceeded\\" if the temperature exceeded the threshold for at least the required duration, otherwise \\"Not Exceeded\\" total_exceeding_duration = 0 for temperature, duration in recordings: if temperature > threshold: total_exceeding_duration += duration if total_exceeding_duration >= required_duration: return \\"Exceeded\\" else: return \\"Not Exceeded\\" def process_input(data): results = [] index = 0 while index < len(data): threshold, required_duration = map(int, data[index].split()) if threshold == 0 and required_duration == 0: break index += 1 num_recordings = int(data[index]) index += 1 recordings = [] for _ in range(num_recordings): temperature, duration = map(int, data[index].split()) recordings.append((temperature, duration)) index += 1 result = check_temperature(threshold, required_duration, recordings) results.append(result) return results"},{"question":"Takahashi is interested in finding patterns within strings. He decides to study strings that are palindromes and have unique characteristics. A palindrome is a string that reads the same forward and backward. Given a string S, Takahashi wants to determine the minimum number of characters that need to be changed to transform S into a palindrome. Note that each character can be changed into any other character. Constraints * 1 leq |S| leq 300 * S consists of lowercase English letters. Input Input is given from Standard Input in the following format: S Output Print the minimum number of character changes needed to transform S into a palindrome. Examples Input abccba Output 0 Input racecar Output 0 Input abcde Output 2","solution":"def min_changes_to_palindrome(S): Returns the minimum number of characters that need to be changed to transform S into a palindrome. n = len(S) changes = 0 for i in range(n // 2): if S[i] != S[n - i - 1]: changes += 1 return changes"},{"question":"You are given a sequence of lowercase letters. Your task is to determine the number of vowels (a, e, i, o, u) in the sequence. Input The input consists of a single string containing only lowercase letters with a length between 1 and 100 characters. Output Output a single integer — the number of vowels in the given sequence. Examples Input hello Output 2 Input xyz Output 0","solution":"def count_vowels(sequence): Returns the number of vowels in the given sequence of lowercase letters. vowels = set(\'aeiou\') return sum(1 for char in sequence if char in vowels)"},{"question":"Liz is a curious programmer who loves to work with sequences and patterns. She encountered an interesting problem regarding geometric sequences and needs your help to solve it. A geometric sequence is a sequence of numbers where each subsequent number is formed by multiplying the previous number by a fixed, non-zero number called the common ratio. You are given: 1. `a` - the first term of the geometric sequence. 2. `r` - the common ratio of the sequence. 3. `n` - the number of terms to consider from the start of the sequence. 4. `l` - the lower bound index (1-based indexing). 5. `u` - the upper bound index (1-based indexing). Your task is to find the sum of the terms of the geometric sequence from the `l`-th to the `u`-th term and provide the answer modulo 1000000007 (10^9+7). Input: The input consists of a single line containing five integers `a`, `r`, `n`, `l`, and `u` (1 ≤ a ≤ 1000; 1 ≤ r ≤ 1000; 1 ≤ n ≤ 10^18; 1 ≤ l ≤ u ≤ n). Output: Output a single integer — the sum of the terms from the `l`-th to `u`-th term inclusive, modulo 1000000007. Example: Input: 2 3 10 3 5 Output: 162 Explanation: The sequence is: 2, 6, 18, 54, 162, 486, 1458, 4374, 13122, 39366 The terms from the 3rd to the 5th are: 18 + 54 + 162 = 234 Output 234 % 1000000007 = 234 In another example: Input: 5 2 20 4 8 Output: 615 Explanation: The sequence is: 5, 10, 20, 40, 80, 160, 320, 640, 1280, 2560, ... The terms from the 4th to the 8th are: 40, 80, 160, 320, 640 The sum is: 40 + 80 + 160 + 320 + 640 = 1240 Output 1240 % 1000000007 = 1240","solution":"MOD = 1000000007 def geometric_sequence_sum(a, r, n, l, u): Returns the sum of terms from the l-th to the u-th term of the geometric sequence, modulo 1000000007. def mod_pow(base, exponent, modulus): Calculate (base ** exponent) % modulus using an efficient iterative method. result = 1 while exponent > 0: if exponent % 2 == 1: result = (result * base) % modulus base = (base * base) % modulus exponent //= 2 return result def sum_geometric_series(a, r, k): Calculate the sum of the first k terms of a geometric series a, a*r, a*r^2, ..., a*r^(k-1) modulo MOD. if r == 1: return (a * k) % MOD else: r_k = mod_pow(r, k, MOD) return (a * (r_k - 1) * mod_pow(r - 1, MOD - 2, MOD)) % MOD sum_u = sum_geometric_series(a, r, u) sum_l_minus_1 = sum_geometric_series(a, r, l - 1) return (sum_u - sum_l_minus_1 + MOD) % MOD"},{"question":"**Python: Inventory Balancing** **problem** Imagine you are managing an inventory system for a warehouse. You have a list of products, each with a specific demand and current supply. Your task is to determine if it is possible to balance the inventory, meaning that each product\'s supply becomes equal to its demand by either shipping items between products or through procurement. Write a function `inventory_balancing(n, supply, demand)` that determines if it is possible to balance the inventory to exactly match the demand by either increasing or decreasing the supply of different products. * `n (int)`: The number of different products. * `supply (List[int])`: A list of integers representing the current supply of each product. * `demand (List[int])`: A list of integers representing the demand for each product. Your function should return `True` if it\'s possible to balance the inventory, and `False` otherwise. **Input format** * An integer, n. * A list of n integers representing the supply of each product. * A list of n integers representing the demand for each product. **Constraint** * 1 ≤ n ≤ 10^5 * 0 ≤ supply[i], demand[i] ≤ 10^9 **Output format** Print `True` if it is possible to balance the inventory, and `False` otherwise. **Input example 1** `3` `[10, 20, 30]` `[15, 15, 30]` **Output example 1** `True` **Input example 2** `4` `[5, 10, 15, 20]` `[10, 15, 20, 5]` **Output example 2** `True` **Input example 3** `2` `[5, 5]` `[10, 10]` **Output example 3** `False` **Input example 4** `3` `[1, 2, 3]` `[4, 5, 6]` **Output example 4** `False` **Example** **Input** 3 [10, 20, 30] [15, 15, 30] **Output** True","solution":"def inventory_balancing(n, supply, demand): Determines if it is possible to balance the inventory to exactly match the demand by either increasing or decreasing the supply of different products. Parameters: n (int): Number of different products. supply (list of int): List representing the current supply of each product. demand (list of int): List representing the demand for each product. Returns: bool: True if it is possible to balance the inventory, False otherwise. total_supply = sum(supply) total_demand = sum(demand) return total_supply == total_demand"},{"question":"Ella loves puzzles and has recently become interested in magic squares. A magic square is a grid of numbers where the sums of the numbers in each row, each column, and both main diagonals are the same. Ella wants to create her own magic square grid of size `n x n` using numbers from 1 to `n^2` such that each number is used exactly once. Given an integer `n`, help Ella generate a valid magic square grid if it is possible. If it\'s not possible to form a magic square of size `n x n` where the sums of the numbers in each row, column and both main diagonals are the same, return an empty grid. Input The input contains a single integer `n` (1 ≤ n ≤ 50) — the size of the magic square grid. Output If it is possible to form a magic square grid of size `n x n`, print the grid where each number from 1 to `n^2` appears exactly once and the sums of the numbers in each row, column, and both main diagonals are the same. If forming such a grid is not possible, print a single line containing the number `-1`. Examples Input 3 Output 2 7 6 9 5 1 4 3 8 Input 2 Output -1 Note In the first example, the sum of the numbers in each row, column, and the two main diagonals is 15. In the second example, it is not possible to form a 2x2 magic square. Thus, the output is `-1`.","solution":"def generate_magic_square(n): def generate_odd_magic_square(n): magic_square = [[0] * n for _ in range(n)] num = 1 i, j = 0, n // 2 while num <= n**2: magic_square[i][j] = num num += 1 new_i, new_j = (i - 1) % n, (j + 1) % n if magic_square[new_i][new_j] != 0: i += 1 else: i, j = new_i, new_j return magic_square if n == 2 or n == 4: return -1 elif n % 2 == 1: return generate_odd_magic_square(n) else: return -1 # Test outputs with 3 n = 3 magic_square = generate_magic_square(n) if magic_square != -1: print(\'n\'.join(\' \'.join(map(str, row)) for row in magic_square)) else: print(-1)"},{"question":"Riya loves to play with arrays and prime numbers. She defines a \\"prime subsequence\\" as a subsequence of an array where all the elements are prime numbers. Given an integer array of size N, Riya wants to know the length of the longest prime subsequence within the array. A subsequence is derived by deleting some or no elements from the array without changing the order of the remaining elements. Input The first line contains an integer N, denoting the number of elements in the array. The second line contains N space-separated integers representing the elements of the array. Output Output a single integer, the length of the longest prime subsequence. Constraints 1 ≤ N ≤ 10^5 1 ≤ Ai ≤ 10^5 Sample Input 6 10 3 7 8 5 2 Sample Output 4 Explanation The prime numbers in the given array are [3, 7, 5, 2]. The longest prime subsequence is [3, 7, 5, 2], which has a length of 4.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def longest_prime_subsequence_length(arr): Given an array, returns the length of the longest prime subsequence. prime_subsequence = [x for x in arr if is_prime(x)] return len(prime_subsequence)"},{"question":"In a 2D grid, you begin at the top-left corner (0,0) and must reach the bottom-right corner (m-1, n-1) by only moving right or down. However, some cells contain obstacles that you cannot pass through. The grid is represented as an m x n matrix where 1 represents an obstacle and 0 represents a free cell. Write a function to determine if there exists a path from the top-left corner to the bottom-right corner. Input: - The first line contains two integers, m and n (1 ≤ m, n ≤ 1000), the number of rows and columns of the grid respectively. - The next m lines each contain n integers (either 0 or 1), representing the grid. Output: - Print \\"Yes\\" if there exists a path from the top-left to the bottom-right corner. Otherwise, print \\"No\\". Examples Input: 3 3 0 0 0 0 1 0 0 0 0 Output: Yes Input: 2 2 0 1 1 0 Output: No Input: 4 4 0 1 0 0 0 0 0 1 1 1 0 0 0 0 0 0 Output: Yes","solution":"def exists_path_through_grid(m, n, grid): Function to determine if there exists a path from the top-left corner to the bottom-right corner in a grid with obstacles. :param m: Number of rows in the grid :param n: Number of columns in the grid :param grid: The grid itself, a list of lists with 0s (free cells) and 1s (obstacles) :return: \\"Yes\\" if a path exists, \\"No\\" otherwise if grid[0][0] == 1 or grid[m-1][n-1] == 1: return \\"No\\" visited = [[False] * n for _ in range(m)] directions = [(1, 0), (0, 1)] def dfs(x, y): if x == m - 1 and y == n - 1: return True visited[x][y] = True for dx, dy in directions: new_x, new_y = x + dx, y + dy if 0 <= new_x < m and 0 <= new_y < n and not visited[new_x][new_y] and grid[new_x][new_y] == 0: if dfs(new_x, new_y): return True return False return \\"Yes\\" if dfs(0, 0) else \\"No\\""},{"question":"A river is represented as a 2D grid map of m x n cells. Each cell is either a piece of land represented by \'L\' or a part of the river represented by \'W\'. You can move up, down, left, or right from one land cell to another if they are connected. An island is formed by connecting neighboring land cells horizontally or vertically. Given the grid map, count the number of distinct islands formed in the river. Your task is to find the number of distinct islands for each test case given the grid map description. Input The first line of the input contains one integer t (1 ≤ t ≤ 100) — the number of test cases. Then t test cases follow. The first line of the test case contains two integers m and n (1 ≤ m, n ≤ 50) — the dimensions of the grid map. The next m lines contain n characters each (\'L\' or \'W\') representing the grid map of the river. Output For each test case, print one integer: the number of distinct islands in the grid map. Example Input 3 4 5 LWLLW LWLWW WWLWL LLWWW 3 3 LLL LLL LLL 5 5 LWLWL WLWLW LWLWL WLWLW LWLWL Output 4 1 13 Note In the first test case of the example, there are 4 distinct islands: one formed by the land at positions (0, 0), one at (0, 2) and (1, 2), one at (2, 2), and one at (3, 0). In the second test case of the example, the entire grid map is one single distinct island. In the third test case of the example, there are 13 distinct islands, with each land cell forming its own island.","solution":"def num_islands(grid): if not grid: return 0 m, n = len(grid), len(grid[0]) visited = [[False] * n for _ in range(m)] def dfs(x, y): if x < 0 or x >= m or y < 0 or y >= n or grid[x][y] == \'W\' or visited[x][y]: return visited[x][y] = True dfs(x+1, y) dfs(x-1, y) dfs(x, y+1) dfs(x, y-1) island_count = 0 for i in range(m): for j in range(n): if grid[i][j] == \'L\' and not visited[i][j]: dfs(i, j) island_count += 1 return island_count def count_islands(test_cases): results = [] for grid in test_cases: results.append(num_islands(grid)) return results"},{"question":"Write a function `find_complementary_sum(array, target_sum)` that finds two distinct integers in a given array that add up to a specified target sum. Your function should return the indices of the two numbers such that they add up to target_sum. Indices returned should be in ascending order. If no such pair exists, return `[-1, -1]`. Constraints: * The input array will have at most 1000 integers. * Each integer in the array will be between -10^5 and 10^5. * The input array may contain duplicate elements, but you must use unique integers for the sum. Input * `array` A list of integers * `target_sum` An integer representing the target sum Output * A list of two integers representing the indices of the two numbers in ascending order. Examples: Input `array = [2, 7, 11, 15]` `target_sum = 9` Output `[0, 1]` Input `array = [3, 2, 4]` `target_sum = 6` Output `[1, 2]` Input `array = [3, 3]` `target_sum = 6` Output `[0, 1]` Input `array = [1, 2, 3, 4, 5]` `target_sum = 10` Output `[-1, -1]`","solution":"def find_complementary_sum(array, target_sum): Finds two distinct integers in the array that add up to the target_sum. Returns the indices of the two numbers in ascending order. If no such pair exists, returns [-1, -1]. hashmap = {} # To store number and its index for index, num in enumerate(array): complement = target_sum - num if complement in hashmap: return sorted([index, hashmap[complement]]) hashmap[num] = index return [-1, -1]"},{"question":"In this problem, you need to implement a function that simulates a simplified version of Conway\'s Game of Life, known as \\"One-Dimensional Cellular Automaton.\\" The game operates on a linear array of cells, where each cell can be either alive (represented by 1) or dead (represented by 0). The state of the cells evolves over a fixed number of turns according to the following rule: 1. A cell turns alive if either it was already alive or exactly one of its neighbors (the cell immediately to the left or right) was alive in the previous turn. 2. Otherwise, the cell turns dead. Input: The input consists of three lines: * The first line contains an integer `n` (1 ≤ n ≤ 1000), the number of cells. * The second line contains an integer `t` (1 ≤ t ≤ 1000), the number of turns. * The third line contains a binary string of length `n` that represents the initial state of the cells. Output: Print a single string representing the state of the cells after `t` turns. Example: Input: ``` 5 2 01010 ``` Output: ``` 11111 ``` Input: ``` 8 1 00100101 ``` Output: ``` 01111111 ``` Note: In the first example, the initial state of the cells is `01010`. After the first turn, the state becomes `11111`. After the second turn, the state remains `11111`. In the second example, the initial state of the cells is `00100101`. After the first turn, the state becomes `01111111` as each cell either had an alive neighbor or was already alive.","solution":"def one_dimensional_cellular_automaton(n, t, initial_state): current_state = list(map(int, initial_state)) for _ in range(t): new_state = [0] * n for i in range(n): left = current_state[i - 1] if i > 0 else 0 right = current_state[i + 1] if i < n - 1 else 0 if current_state[i] == 1 or left == 1 or right == 1: new_state[i] = 1 current_state = new_state return \'\'.join(map(str, current_state))"},{"question":"Farmer John has a rectangular field divided into a grid of `n` rows and `m` columns. Each cell in the grid either contains a cow or is empty. Farmer John wants to place fences in his field to enclose all the cows within a single rectangular sub-field (subgrid) such that no empty cells are inside this fenced sub-field. The fenced sub-field must be the smallest possible that can enclose all the cows. You are given the field as an `n x m` matrix of characters, where `\'.\'` denotes an empty cell and `\'C\'` denotes a cell containing a cow. Your task is to determine the coordinates of the smallest rectangular sub-field that can enclose all the cows. # Input - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 100) — the number of rows and columns in the grid. - The next `n` lines contain `m` characters each (`\'.\'` or `\'C\'`), representing the field. # Output - Print four integers `r1`, `c1`, `r2`, and `c2`, which describe the rectangular sub-field that contains all the cows: - `r1` and `c1` represent the top-left corner of the sub-field, - `r2` and `c2` represent the bottom-right corner of the sub-field. - If there are no cows in the field, output `-1`. # Examples Example 1: # Input: ``` 5 5 ..... ..C.. .CC.. ..C.. ..... ``` # Output: ``` 2 2 4 3 ``` Example 2: # Input: ``` 4 4 .... .... .... .... ``` # Output: ``` -1 ``` # Note In the first example, the smallest sub-field that contains all the cows is from row 2 to row 4 and column 2 to column 3.","solution":"def smallest_subfield_with_cows(n, m, grid): min_row, max_row = n, -1 min_col, max_col = m, -1 # Traverse the grid to find min and max rows and columns with cows for i in range(n): for j in range(m): if grid[i][j] == \'C\': if i < min_row: min_row = i if i > max_row: max_row = i if j < min_col: min_col = j if j > max_col: max_col = j if min_row == n and max_row == -1: return -1 # No cows found return min_row + 1, min_col + 1, max_row + 1, max_col + 1"},{"question":"George is organizing an event where n groups of people will attend, and each group has exactly n members. He decides to give out n different gifts such that every person in a group receives one gift, and each group collectively receives all n different gifts. To ensure fairness, no two people within the same group should receive the same gift, and no two groups should have identical distributions of gifts. Help George assign the gifts according to his rules. Input The single line contains a single integer n (1 ≤ n ≤ 100) — the number of groups and the number of gifts. Output Print n lines. Each line should contain n integers, where each integer from 1 to n represents a unique gift. Every pair of lines should be distinct permutations of the integers from 1 to n. Example Input 3 Output 1 2 3 2 3 1 3 1 2 Note The sample shows George\'s assignment if he has three groups and three gifts. One possible way is to rotate the sequence of gifts such that each group receives every gift exactly once.","solution":"def generate_gift_distribution_patterns(n): Returns a list of lists representing the distribution of gifts. Each list contains a unique permutation of gifts for each group. patterns = [] base_pattern = list(range(1, n + 1)) for i in range(n): pattern = base_pattern[i:] + base_pattern[:i] patterns.append(pattern) return patterns"},{"question":"A company organizes a coding competition, and they want to rank the participants based on their scores. However, the ranking system is unique: if two participants have the same score, the participant who achieved the score first will get a higher rank. You are given the scores of participants in the order they were received. Your task is to rank the participants based on their scores following the unique ranking system. Input: The first line contains an integer T, the number of test cases. Each test case starts with an integer N, the number of participants. The next line contains N integers, where each integer represents the score of a participant. Output: For each test case, print a single line containing N integers, the ranks of the participants in the order they were received. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ Score ≤ 1000 SAMPLE INPUT 2 5 100 200 100 300 200 4 500 500 400 400 SAMPLE OUTPUT 2 3 2 1 3 1 1 3 3 Explanation: Test Case 1: - The first participant has a score of 100 and ranks second because there is a higher score (300) and another 100 encountered later. - The second participant has a score of 200 and ranks third because there is a higher score (300) and another 200 encountered later. - The third participant also has a score of 100 and ranks fourth. - The fourth participant has the highest score of 300 and hence ranks first. - The fifth participant has a score of 200 and ranks fifth. Test Case 2: - The first and second participants both have the highest score of 500 and share the first rank. - The third and fourth participants both have the score of 400 and share the third rank.","solution":"def rank_participants(test_cases): results = [] for case in test_cases: n, scores = case indexed_scores = list(enumerate(scores)) sorted_scores = sorted(indexed_scores, key=lambda x: (-x[1], x[0])) ranks = [0] * n current_rank = 1 for i, (index, score) in enumerate(sorted_scores): if i > 0 and score < sorted_scores[i-1][1]: current_rank = i + 1 ranks[index] = current_rank results.append(ranks) return results"},{"question":"Given two strings S and T of length N, find the minimum number of operations required to transform S into T, where the allowed operations are: 1. Replace a character in S with another lowercase alphabet character. 2. Delete a character from S. 3. Insert a character into S. Constraints * 1 ≤ N ≤ 1000 * S and T consist of lowercase English letters. Input The input consists of two lines: * The first line contains the string S. * The second line contains the string T. Output Print the minimum number of operations required. Examples Input kitten sitting Output 3 Input intention execution Output 5","solution":"def min_operations(S, T): Returns the minimum number of operations required to transform S into T. len_s, len_t = len(S), len(T) dp = [[0] * (len_t + 1) for _ in range(len_s + 1)] for i in range(len_s + 1): for j in range(len_t + 1): if i == 0: dp[i][j] = j # Inserting all characters of T elif j == 0: dp[i][j] = i # Deleting all characters of S else: if S[i - 1] == T[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j - 1], # Replace dp[i - 1][j], # Delete dp[i][j - 1]) # Insert return dp[len_s][len_t]"},{"question":"\\"There is a family of n children standing in a line where each child has a different height. You are given the heights of the children, and you need to find out how many children can be seen if you look at the line from the left side. A child can be seen from the left side if there are no taller or equal height children standing directly in front of them.\\" Input The first line of the input contains a single integer n (1 ≤ n ≤ 50), the number of children. The second line contains n distinct space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 100), where hi is the height of the i-th child in the line. Output Output the number of children that can be seen from the left side. Examples Input 5 3 1 4 2 5 Output 3 Input 4 4 3 2 1 Output 1 Note In the first example, child 1 (height 3) can be seen, child 3 (height 4) can be seen as they are taller than the child 1, and child 5 (height 5) can be seen as they are taller than child 3. So, 3 children can be seen. In the second example, only the first child (height 4) can be seen as all other children are of decreasing height.","solution":"def count_visible_children(n, heights): Returns the number of children that can be seen from the left side. Parameters: n (int): The number of children. heights (list of int): The heights of the children. Returns: int: The number of children that can be seen from the left side. if n == 0: return 0 max_height = 0 visible_count = 0 for height in heights: if height > max_height: visible_count += 1 max_height = height return visible_count"},{"question":"Bob is an avid collector of rare and valuable gems. He keeps his collection very organized, but sometimes he needs help figuring out a specific problem: finding the most consecutive pairs of identical gems in his collection. Can you help Bob identify and count the number of these consecutive pairs? Let\'s define the problem more formally. You are given a string where each character represents a gem of a certain type. Your task is to count the maximum number of consecutive pairs of identical gems in the string. A consecutive pair is defined as two adjacent characters that are the same. Input The first line contains an integer n (1 ≤ n ≤ 10^4) — the length of the string. The second line contains a string of length n consisting of lowercase English letters, representing the types of gems in Bob\'s collection. Output Print a single integer — the maximum number of consecutive pairs of identical gems in the string. Examples Input 7 aabbbcc Output 2 Input 10 abcabcabcd Output 0 Input 5 aabaa Output 1 Note In the first example, the pairs are \\"aa\\", \\"bb\\", and \\"cc\\". The maximum number of consecutive pairs is 2 (\\"bb\\"). In the second example, there are no consecutive pairs of identical gems. In the third example, the pairs are \\"aa\\" at the beginning and \\"aa\\" at the end. The maximum number of consecutive pairs is 1.","solution":"def max_consecutive_pairs(s: str) -> int: Returns the maximum number of consecutive pairs of identical gems in the string. max_pairs = 0 current_pairs = 0 n = len(s) for i in range(1, n): if s[i] == s[i - 1]: current_pairs += 1 max_pairs = max(max_pairs, current_pairs) else: current_pairs = 0 return max_pairs"},{"question":"Highest Heart Rate Dr. Fit is a fitness trainer who monitors the health data of his clients. He particularly pays attention to their heart rate data during exercise routines. Dr. Fit records the heart rate of his clients at regular intervals and wants to know the peak heart rate during each exercise session. However, since he records the data at different intervals for each client, he needs a program that can automate the identification of the highest heart rate for each client. Further, he wants to categorize the peak heart rate into different risk levels based on specific thresholds. The risk categories are as follows: Categories: - Low (Heart Rate <= 100) - Moderate (Heart Rate between 101 and 150) - High (Heart Rate between 151 and 200) - Very High (Heart Rate > 200) Help Dr. Fit by writing a program that determines the highest heart rate and the corresponding risk category for each client. # Input The first line contains an integer \'C\', representing the number of clients. Each client dataset has two lines: - The first line contains an integer \'N\' which denotes the number of heart rate readings recorded for that client. - The second line contains \'N\' integers representing heart rate readings. # Output For each client, print one line with two space-separated values: the highest heart rate observed and the corresponding risk category. # Constraints - 1 <= C <= 100 - 1 <= N <= 10^5 - 1 <= heart rate <= 300 # Example Input: ``` 3 5 90 110 95 120 105 4 100 180 160 200 6 85 190 220 210 130 95 ``` Output: ``` 120 Moderate 200 High 220 Very High ``` # Explanation For the 1st client: - Heart rates are [90, 110, 95, 120, 105] - The highest heart rate is 120, which is categorized as \'Moderate\' For the 2nd client: - Heart rates are [100, 180, 160, 200] - The highest heart rate is 200, which is categorized as \'High\' For the 3rd client: - Heart rates are [85, 190, 220, 210, 130, 95] - The highest heart rate is 220, which is categorized as \'Very High\'","solution":"def categorize_heart_rate(h): Categorize the heart rate based on predefined thresholds. if h <= 100: return \\"Low\\" elif 101 <= h <= 150: return \\"Moderate\\" elif 151 <= h <= 200: return \\"High\\" else: return \\"Very High\\" def highest_heart_rate(clients_data): Finds the highest heart rate and its category for each client. result = [] for client_data in clients_data: heart_rates = client_data max_hr = max(heart_rates) category = categorize_heart_rate(max_hr) result.append(f\\"{max_hr} {category}\\") return result"},{"question":"You are given an array of integers a of length n representing the heights of buildings arranged in a row. You would like to place some billboards on a subset of these buildings such that the profit is maximized. You can place a billboard on the i-th building if and only if there is no billboard on the i-1-th or i+1-th building. The profit of placing a billboard on the i-th building is a_i. Your task is to find the maximum profit you can obtain by placing billboards according to the stated condition. Input The first line of the input contains one integer t (1 ≤ t ≤ 100) — the number of test cases. Then t test cases follow. Each test case consists of two lines: * The first line contains one integer n (1 ≤ n ≤ 1000) — the number of buildings. * The second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 1000) — the heights of the buildings. Output For each test case, print one integer: the maximum profit you can obtain. Example Input: 3 4 1 2 3 1 5 5 1 1 5 1 3 3 2 3 Output: 4 10 6 Note: In the first test case, you can place billboards on the buildings with heights 1 and 3, obtaining a maximum profit of 1 + 3 = 4. In the second test case, you can place billboards on the buildings with heights 5 and 5, obtaining a maximum profit of 5 + 5 = 10. In the third test case, you can place billboards on both buildings with height 3, obtaining a maximum profit of 3 + 3 = 6.","solution":"def max_profit(t, test_cases): def max_billboard_profit(buildings): n = len(buildings) if n == 0: return 0 dp = [0] * n for i in range(n): if i == 0: dp[i] = buildings[i] elif i == 1: dp[i] = max(buildings[i], dp[i-1]) else: dp[i] = max(dp[i-1], dp[i-2] + buildings[i]) return dp[-1] results = [] for case in test_cases: n, heights = case results.append(max_billboard_profit(heights)) return results"},{"question":"Dr. Smith is working on a complex project which involves strings and their transformations. He needs your help to find the smallest lexicographically equivalent form of a given string by performing some operations. The operation you are allowed to perform is to select any two adjacent characters in the string and swap them. You can perform this operation any number of times. Input: The first line contains an integer T, the number of test cases. The following T lines contain the strings for which you need to perform the operations. Output: Print the smallest lexicographically equivalent string for each input string. Constraints: 1 ≤ T ≤ 100 1 ≤ length of the string ≤ 1000 Each string consists of only lower-case English letters. SAMPLE INPUT 2 geeks for SAMPLE OUTPUT eegks for Explanation: For the first string \\"geeks\\", we can transform it as follows: - Swap \'g\' with \'e\', resulting in \\"egeks\\" - Swap \'g\' with \'e\', resulting in \\"eegks\\" This is the smallest lexicographically possible equivalent of \\"geeks\\". For the second string \\"for\\", it is already the smallest lexicographically possible string, so the output remains \\"for\\".","solution":"def smallest_lexicographical_string(s): Returns the smallest lexicographical string by sorting the characters of the input string. return \'\'.join(sorted(s)) def process_test_cases(t, cases): Process multiple test cases and return a list of results. Parameters: t (int): Number of test cases cases (list of str): List of strings to be processed Returns: list of str: List of smallest lexicographical strings return [smallest_lexicographical_string(s) for s in cases]"},{"question":"Problem You have a sequence of integers and you need to find a specific value based on a series of operations. The operations involve summing elements and finding the remainder when dividing by a given integer. Given an integer N (the length of the sequence), a sequence of integers A_1, A_2, ..., A_N , and a positive integer M . You need to perform the following operation repeatedly until only one integer remains: 1. Start from the beginning of the sequence and take the first M elements. 2. Sum these elements. 3. Compute the remainder of the sum divided by M . 4. Replace the first M elements with the remainder. 5. If the number of remaining elements is less than M , sum all remaining elements and compute the remainder when divided by M , replacing all remaining elements with this remainder. Continue this process until only one integer remains in the sequence. Output this integer. # Input - An integer N (1 ≤ N ≤ 1000) - the length of the sequence. - A sequence of N integers A_1, A_2, ..., A_N (0 ≤ A_i < 10^9). - An integer M (1 ≤ M ≤ 1000) - the divisor. # Output - Output a single integer - the final remaining integer. # Example Input 1 ``` 5 1 2 3 4 5 2 ``` Output 1 ``` 1 ``` Input 2 ``` 4 1000 2000 3000 4000 3 ``` Output 2 ``` 1 ``` Explanation **Example 1:** Start with the sequence: 1, 2, 3, 4, 5 and M = 2 . 1. Take the first 2 elements 1 and 2, sum is 3, remainder of 3 divided by 2 is 1. Sequence becomes: 1, 3, 4, 5. 2. Take the first 2 elements 1 and 3, sum is 4, remainder of 4 divided by 2 is 0. Sequence becomes: 0, 4, 5. 3. Take the first 2 elements 0 and 4, sum is 4, remainder of 4 divided by 2 is 0. Sequence becomes: 0, 5. 4. Take the first 2 elements 0 and 5, sum is 5, remainder of 5 divided by 2 is 1. Sequence becomes: 1. Final output is 1.","solution":"def find_final_integer(N, A, M): while len(A) > 1: sum_first_M = sum(A[:M]) remainder = sum_first_M % M A = [remainder] + A[M:] return A[0]"},{"question":"Given a grid of size n x n filled with integers, you need to find a subgrid of size m x m (m ≤ n) such that the sum of its elements is the minimum among all possible subgrids of this size. Your task is to write a program that, given the grid and the value of m, finds the top-left corner coordinates (i, j) of the subgrid that has the minimum sum. If there are multiple subgrids with the same sum, return the one with the smallest i. If there are still ties, return the one with the smallest j. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The first line of each test case contains two integers n and m (1 ≤ m ≤ n ≤ 300). The next n lines contain n integers each, representing the grid. Output For each test case, print the top-left corner coordinates (i, j) of the subgrid that has the minimum sum. Example Input 2 4 2 1 3 5 6 7 8 9 10 11 12 13 14 15 16 17 18 3 1 4 7 2 5 1 8 3 6 9 Output 1 1 2 2 Note In the first test case, the grid is: ``` 1 3 5 6 7 8 9 10 11 12 13 14 15 16 17 18 ``` The 2 x 2 subgrid with the minimum sum is: ``` 1 3 7 8 ``` Hence, the output coordinates are (1, 1). In the second test case, the grid is: ``` 4 7 2 5 1 8 3 6 9 ``` The 1 x 1 subgrid with the minimum sum is `1`, hence the output coordinates are (2, 2).","solution":"def find_min_sum_subgrid(t, test_cases): results = [] for case in test_cases: n, m, grid = case[\'n\'], case[\'m\'], case[\'grid\'] min_sum = float(\'inf\') min_i = min_j = -1 for i in range(n - m + 1): for j in range(n - m + 1): current_sum = 0 for x in range(m): for y in range(m): current_sum += grid[i + x][j + y] if current_sum < min_sum: min_sum = current_sum min_i, min_j = i, j results.append((min_i + 1, min_j + 1)) return results"},{"question":"Let\'s solve a matrix transformation problem that involves rotating a matrix clockwise by 90 degrees and checking if it matches a target matrix. You are given two n x n matrices, A and B. Your task is to determine if matrix B is a 90-degree clockwise rotation of matrix A. Input The first line contains an integer t (1 <= t <= 100), the number of test cases. Each test case contains: - An integer n (1 ≤ n ≤ 50), the size of the matrices. - The next n lines each contain n integers, representing matrix A. - The following n lines each contain n integers, representing matrix B. Output For each test case, output \\"YES\\" if matrix B is a 90-degree clockwise rotation of matrix A. Otherwise, output \\"NO\\". Example Input 2 3 1 2 3 4 5 6 7 8 9 7 4 1 8 5 2 9 6 3 3 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 Output YES NO Explanation In the first test case: Matrix A is: 1 2 3 4 5 6 7 8 9 After rotating A 90 degrees clockwise, it becomes: 7 4 1 8 5 2 9 6 3 Which matches matrix B, so the output is \\"YES\\". In the second test case, rotating A will not result in matrix B, so the output is \\"NO\\".","solution":"def rotate_90_clockwise(matrix): Rotates the given n x n matrix 90 degrees clockwise. n = len(matrix) return [[matrix[n - j - 1][i] for j in range(n)] for i in range(n)] def is_rotation(matrix1, matrix2): Checks if matrix2 is a 90-degree clockwise rotation of matrix1. return matrix2 == rotate_90_clockwise(matrix1) def solve(test_cases): results = [] for test in test_cases: n, matrix1, matrix2 = test[\'n\'], test[\'matrix1\'], test[\'matrix2\'] if is_rotation(matrix1, matrix2): results.append(\\"YES\\") else: results.append(\\"NO\\") return results def parse_input(input_data): data = input_data.strip().split(\\"n\\") t = int(data[0]) index = 1 test_cases = [] for _ in range(t): n = int(data[index]) index += 1 matrix1 = [] for _ in range(n): matrix1.append(list(map(int, data[index].split()))) index += 1 matrix2 = [] for _ in range(n): matrix2.append(list(map(int, data[index].split()))) index += 1 test_cases.append({\'n\': n, \'matrix1\': matrix1, \'matrix2\': matrix2}) return test_cases"},{"question":"Imagine that you are working on a large-scale social network application. One of the crucial tasks in this application is to identify clusters of friends within the network. You have a list of friendships represented as pairs of user IDs. Each user ID is a positive integer. Given this list, you need to determine the number of unique clusters (connected components) of friends. Two users are considered friends if there is a direct friendship between them, or if there is a chain of friendships connecting them. # Input The first line of input contains two integers `n` and `m` (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 2*10^5) representing the number of users and the number of friendship pairs, respectively. Each of the next `m` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n), indicating that user `u` and user `v` are friends. # Output Output a single integer, the number of unique clusters of friends. # Examples Input ``` 5 3 1 2 2 3 4 5 ``` Output ``` 2 ``` Input ``` 4 2 1 2 3 4 ``` Output ``` 2 ``` Input ``` 4 0 ``` Output ``` 4 ``` Note In the first example, users 1, 2, and 3 form one cluster, and users 4 and 5 form another cluster, hence there are 2 unique clusters. In the second example, one cluster consists of users 1 and 2, and another cluster consists of users 3 and 4. In the third example, all users are isolated, resulting in 4 unique clusters.","solution":"def count_unique_clusters(n, m, friendships): from collections import defaultdict # Function to perform DFS on the graph def dfs(node, visited, adj_list): stack = [node] while stack: current = stack.pop() for neighbor in adj_list[current]: if neighbor not in visited: visited.add(neighbor) stack.append(neighbor) # Build the adjacency list adj_list = defaultdict(list) for u, v in friendships: adj_list[u].append(v) adj_list[v].append(u) visited = set() clusters = 0 # Count the number of connected components for user in range(1, n + 1): if user not in visited: clusters += 1 visited.add(user) dfs(user, visited, adj_list) return clusters"},{"question":"Lionel is trying to cleanse the enchanted forest from a harmful curse. The forest consists of several clearings and pathways between them, forming an undirected graph. Lionel has a special artifact that can purify a path between two directly connected clearings, thus removing the curse from that path. However, the artifact can only purify exactly k paths where k is given as input. If the chosen paths make the graph disconnected, the curse will grow stronger. Help Lionel determine if it is possible to use the artifact in such a way that the graph remains connected after purifying exactly k paths. Input The first line of input contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) - the number of clearings and paths in the forest, respectively. Each of the following m lines contains two space-separated integers u and v (1 ≤ u < v ≤ n) indicating a path between clearings u and v. The last line contains a single integer k (0 ≤ k ≤ m) - the exact number of paths Lionel wants to purify. Output Print \\"YES\\" if it is possible to purify exactly k paths while keeping the graph connected, otherwise print \\"NO\\". Examples Input 5 4 1 2 2 3 3 4 4 5 2 Output YES Input 5 4 1 2 2 3 3 4 4 5 4 Output NO Note In the first sample, purifying any two paths will still keep the graph connected. In the second sample, purifying all four paths will make the graph disconnected as there would be no paths left.","solution":"def can_purify_paths(n, m, edges, k): if k == 0: return \\"YES\\" # If no paths to purify, always connected # Adjacency list of the graph adj = [[] for _ in range(n + 1)] for u, v in edges: adj[u].append(v) adj[v].append(u) # Function that returns the number of connected components def count_components(): visited = [False] * (n + 1) components = 0 def dfs(node): stack = [node] while stack: curr = stack.pop() for neighbor in adj[curr]: if not visited[neighbor]: visited[neighbor] = True stack.append(neighbor) for i in range(1, n + 1): if not visited[i]: components += 1 visited[i] = True dfs(i) return components # Initial number of connected components initial_components = count_components() # Minimum number of edges to remove to disconnect the graph if k >= m: return \\"NO\\" # If purifying all or more paths than available, it will disconnect the graph # If initially, the number of connected components > 1, graph is already disconnected if initial_components > 1: return \\"NO\\" return \\"YES\\""},{"question":"You are given a sequence of n non-negative integers a_1, a_2, ..., a_n with n ≥ 1. Your task is to partition these integers into two nonempty groups A and B, such that the sum of all integers in group A is different from the sum of all integers in group B. It is guaranteed that such a partition always exists. If there exist multiple partitions, you are allowed to output any of them. Input The first line contains one integer n (2 ≤ n ≤ 10^4) — the number of integers in the sequence. The second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^6) — the elements of the sequence. Output In the first line, output an integer k (1 ≤ k ≤ n-1) — the number of elements in group A. In the second line, output k integers — the indexes of the elements that are included into group A. If there are multiple answers, print any. Examples Input 5 10 20 30 40 50 Output 3 1 2 3 Input 4 1 2 3 4 Output 2 1 3 Input 3 1 0 2 Output 1 2 Note In the first example, group A can consist of the first three numbers: 10, 20, 30, making the sum 60, while group B consists of 40 and 50, making the sum 90. The sums are different. In the second example, choosing elements 1 and 3 for group A sums to 4, while the remaining elements 2 and 4 sum to 6. The sums are different. In the third example, choosing element 2 for group A sums to 0, while the remaining elements 1 and 3 sum to 3. The sums are different.","solution":"def partition_sequence(n, sequence): Partition the sequence into two groups A and B such that the sum of elements in A is different from the sum of elements in B. Args: n : int : number of sequence elements sequence : list : list of sequence elements Returns: tuple : size of group A, list of indices in group A # To ensure the sums are different, pick any element and put it in group A # and the rest in group B. group_A = [1] # start with the first element in group A return (1, group_A) # Example usage of the function # n = 5 # sequence = [10, 20, 30, 40, 50] # print(partition_sequence(n, sequence)) # Should print (1, [1])"},{"question":"World of Bridges In a distant land, there is a kingdom with N cities connected by M bridges. Each bridge has a specific length and some bridges are harder to cross than others due to their length. The king of the kingdom needs to determine if there is a way to travel from the capital city to any given city using a defined maximum length of bridges. Each city is represented by a unique integer from 1 to N, with city 1 being the capital. The bridges are described by a list of triples (a, b, l), where a and b are two cities connected by a bridge and l is the length of the bridge. The king can only travel bridges whose length does not exceed a given value L. Help the king by writing a program to determine if there is a way to reach each of the N cities from the capital city given a maximum allowed bridge length L. # Input The input is given from standard input in the following format: ``` N M L a_1 b_1 l_1 a_2 b_2 l_2 ... a_M b_M l_M ``` - N is the number of cities. - M is the number of bridges. - L is the maximum allowed bridge length. - Each of the next M lines contains three integers a_i, b_i, and l_i describing the i-th bridge. # Output Output N-1 lines. Each line should contain either \\"Yes\\" or \\"No\\". The i-th line should contain \\"Yes\\" if there is a way to reach city i+1 from the capital using only bridges of length leq L, and \\"No\\" otherwise. # Constraints - 1 leq N leq 1000 - 0 leq M leq 10000 - 1 leq L leq 1000 - 1 leq a_i, b_i leq N - 1 leq l_i leq 1000 - The graph may not necessarily be connected. - Cities and bridges have no specific order. # Example Input ``` 5 6 10 1 2 5 2 3 4 3 4 6 1 3 15 4 5 9 2 5 7 ``` # Example Output ``` Yes Yes Yes Yes ``` # Another Example Input ``` 4 3 5 1 2 3 2 3 7 3 4 2 ``` # Another Example Output ``` Yes No No ```","solution":"def can_reach_cities(N, M, L, bridges): from collections import deque, defaultdict # Create adjacency list for the graph graph = defaultdict(list) for a, b, l in bridges: if l <= L: graph[a].append(b) graph[b].append(a) # BFS to find all reachable nodes from capital city (city 1) reachable = [False] * (N + 1) queue = deque([1]) reachable[1] = True while queue: current = queue.popleft() for neighbor in graph[current]: if not reachable[neighbor]: reachable[neighbor] = True queue.append(neighbor) # Determine if each city 2 through N is reachable from capital (city 1) results = [] for i in range(2, N + 1): results.append(\\"Yes\\" if reachable[i] else \\"No\\") return results"},{"question":"Maria has a sequence of integers, and she wants to perform a series of operations to make the sequence strictly increasing. In each operation, she can select any integer from the sequence and increase its value by 1. She needs to find the minimum number of operations required to make the sequence strictly increasing. A sequence is strictly increasing if each element is strictly greater than the preceding one. For instance, a sequence [1, 2, 3, 4] is strictly increasing, whereas [1, 2, 2, 4] is not. You are to help Maria by writing a program that takes her sequence as input and provides the minimum number of operations needed. # Input - The first line contains a single integer `n` (1 ≤ n ≤ 2 ⋅ 10^5) — the length of the sequence. - The second line contains `n` integers `a_1, a_2, ..., a_n` (1 ≤ a_i ≤ 10^9) — the elements of the sequence. # Output - Output a single integer — the minimum number of operations required to make the sequence strictly increasing. # Examples Input ``` 4 1 2 2 4 ``` Output ``` 1 ``` Input ``` 5 3 3 3 3 3 ``` Output ``` 10 ``` Input ``` 3 5 6 6 ``` Output ``` 1 ``` # Note In the first example, we can increase the third element by 1 to get [1, 2, 3, 4] which is strictly increasing. So the output is 1. In the second example, we need to perform the following operations: - Increase the second element by 1 to get [3, 4, 3, 3, 3] - Increase the third element by 2 to get [3, 4, 5, 3, 3] - Increase the fourth element by 3 to get [3, 4, 5, 6, 3] - Increase the fifth element by 4 to get [3, 4, 5, 6, 7] Thus, we have performed 1 + 2 + 3 + 4 = 10 operations. Hence, the output is 10.","solution":"def min_operations_to_increase_sequence(sequence): Given a sequence of integers, returns the minimum number of operations needed to make the sequence strictly increasing by incrementing elements. if not sequence: return 0 n = len(sequence) operations = 0 # Ensure the first element is correct by default prev_value = sequence[0] for i in range(1, n): if sequence[i] <= prev_value: # Calculate the needed increment needed_increment = prev_value - sequence[i] + 1 # Add the increment to the total operations operations += needed_increment # Update the current element to be strictly greater than the previous one prev_value = prev_value + 1 else: # Update the previous value to current element prev_value = sequence[i] return operations # Example use # sequence = [1, 2, 2, 4] # print(min_operations_to_increase_sequence(sequence)) # Output: 1"},{"question":"Write a function that takes an integer n and returns a \\"spiral\\" matrix of size n x n filled with elements from 1 to n^2 in a clockwise spiral order. For example, given n = 3, the function should return: ``` [ [1, 2, 3], [8, 9, 4], [7, 6, 5] ] ``` The spiral should start at the top-left corner of the matrix and proceed inwards. # Input - An integer `n` (1 ≤ n ≤ 10) # Output - An n x n 2-dimensional list representing the spiral matrix. # Example Example 1 **Input:** ``` 3 ``` **Output:** ``` [ [1, 2, 3], [8, 9, 4], [7, 6, 5] ] ``` Example 2 **Input:** ``` 4 ``` **Output:** ``` [ [1, 2, 3, 4], [12, 13, 14, 5], [11, 16, 15, 6], [10, 9, 8, 7] ] ```","solution":"def generate_spiral_matrix(n): Generates an n x n spiral matrix filled with elements from 1 to n^2 in a clockwise order. if n == 1: return [[1]] matrix = [[0] * n for _ in range(n)] num = 1 left, right, top, bottom = 0, n-1, 0, n-1 while left <= right and top <= bottom: # Fill from left to right for i in range(left, right + 1): matrix[top][i] = num num += 1 top += 1 # Fill from top to bottom for i in range(top, bottom + 1): matrix[i][right] = num num += 1 right -= 1 # Fill from right to left for i in range(right, left - 1, -1): matrix[bottom][i] = num num += 1 bottom -= 1 # Fill from bottom to top for i in range(bottom, top - 1, -1): matrix[i][left] = num num += 1 left += 1 return matrix"},{"question":"A group of scientists is studying the migration patterns of a rare species of birds. They collected a massive amount of data that represents the birds\' movements over multiple periods. Each period is represented as a sequence of movements in four possible directions: \'L\' for left, \'R\' for right, \'U\' for up, and \'D\' for down. The scientists are specifically interested in determining whether a given sequence of movements eventually returns the birds to their original starting point. For example, a sequence \\"LR\\" means the bird moves left and then right, thus returning to the original starting point. Write a program that determines whether the given sequence of bird movements ends at the starting point. Input A single line containing a string of uppercase Latin letters (\'L\', \'R\', \'U\', \'D\') that represents the sequence of movements. The length of the string will be between 1 and 10^5. Output Print \\"YES\\" if the bird returns to the starting point. Otherwise, print \\"NO\\". Examples Input LR Output YES Input UDLR Output YES Input UUDL Output NO Note * In the first example, the bird moves left \'L\' and then right \'R\' which brings it back to the starting point. * In the second example, the sequence \\"UDLR\\" returns the bird to the starting point as each movement is balanced by an opposite movement. * In the third example, the bird moves up twice and once each left and down, which does not bring it back to the starting point.","solution":"def is_back_to_start(movements): Determines if the bird returns to the starting point after the given sequence of movements. :param movements: str, sequence of movements (L, R, U, D) :return: str, \\"YES\\" if the bird returns to the starting point, \\"NO\\" otherwise. horizontal = 0 vertical = 0 for move in movements: if move == \'L\': horizontal -= 1 elif move == \'R\': horizontal += 1 elif move == \'U\': vertical += 1 elif move == \'D\': vertical -= 1 return \\"YES\\" if horizontal == 0 and vertical == 0 else \\"NO\\""},{"question":"Write a function to help empower young coders by dynamically generating encouragement messages! You will be given a number n, the number of students, and a list of names of the students. Your task is to output a personalized encouragement message for each student. Input: The first line of the input contains an integer n: the number of students. Each of the next n lines contains a single string: the name of a student. Output: Print n lines, each containing an encouragement message: \\"Keep it up, <name>! You can do it!\\" where <name> is the name of the student. Constraints: 1 ≤ n ≤ 100 1 ≤ length of each student\'s name ≤ 50 SAMPLE INPUT 3 Alice Bob Charlie SAMPLE OUTPUT Keep it up, Alice! You can do it! Keep it up, Bob! You can do it! Keep it up, Charlie! You can do it!","solution":"def generate_encouragement_messages(n, names): Generates personalized encouragement message for each student. Parameters: n (int): The number of students. names (list of str): The list of student names. Returns: list of str: The list of encouragement messages. messages = [] for name in names: message = f\\"Keep it up, {name}! You can do it!\\" messages.append(message) return messages"},{"question":"BackGround Alice, the data analyst, is working on organizing large datasets. She needs to perform a specific operation repeatedly: finding the most frequent element in a dynamic list of integers. Sometimes, she also needs to find the second most frequent element if there is one. Given an initial list of integers, your task is to help Alice efficiently handle a sequence of operations, each of which is either adding a new integer to the list or querying the most frequent or second most frequent element. Problem Alice has an initial list of integers and a series of operations to perform on the list. The operations are as follows: 1. \\"add x\\": Add the integer x to the list. 2. \\"most_frequent\\": Output the most frequent integer in the list. If there is a tie, output the smallest integer. 3. \\"second_most_frequent\\": Output the second most frequent integer in the list. If there is a tie, output the smallest integer. If there is no second most frequent integer, output \\"-1\\". Output the result of each \\"most_frequent\\" and \\"second_most_frequent\\" operation. Constraints * 1 ≤ initial list length ≤ 10^5 * 1 ≤ number of operations ≤ 10^5 * -10^9 ≤ elements in the list ≤ 10^9 * All integer values added to the list or present in the initial list are within the range of -10^9 to 10^9. Input The input is given in the following format: * The first line contains the initial list of integers separated by spaces. * Each of the following lines contains one of the operations: \\"add x\\", \\"most_frequent\\", or \\"second_most_frequent\\". Output For each \\"most_frequent\\" and \\"second_most_frequent\\" operation, output the result on a new line. Examples Input 1 2 2 3 3 3 most_frequent second_most_frequent add 2 most_frequent second_most_frequent add 3 most_frequent second_most_frequent Output 3 2 2 3 3 2 Input 4 4 4 1 2 2 3 3 most_frequent second_most_frequent add 4 most_frequent second_most_frequent add 1 most_frequent second_most_frequent Output 4 2 4 2 4 1","solution":"from collections import Counter class ListOperations: def __init__(self, initial_list): self.counter = Counter(initial_list) def add(self, x): self.counter[x] += 1 def most_frequent(self): most_common = self.counter.most_common() if not most_common: return None return most_common[0][0] def second_most_frequent(self): most_common = self.counter.most_common() if len(most_common) < 2: return -1 return most_common[1][0] def process_operations(initial_list, operations): list_operations = ListOperations(initial_list) results = [] for operation in operations: if operation.startswith(\\"add\\"): _, x = operation.split() list_operations.add(int(x)) elif operation == \\"most_frequent\\": results.append(list_operations.most_frequent()) elif operation == \\"second_most_frequent\\": results.append(list_operations.second_most_frequent()) return results"},{"question":"Given a list of integers, find two numbers such that they add up to a specific target number. Input The first line contains a list of integers separated by spaces. The length of the list is from 2 to 100 inclusive, and each integer is in the range from -1000 to 1000. The second line contains an integer target (-2000 ≤ target ≤ 2000). Output Output the two integers separated by a space that add up to the target. If there are multiple pairs, output any one of them. If no such pair exists, output \\"No pair found\\". Examples Input 2 7 11 15 9 Output 2 7 Input -3 4 3 90 0 Output -3 3","solution":"def find_pair_with_sum(int_list, target): Given a list of integers and a target number, return two numbers from the list that add up to the target. If no such pair exists, return \\"No pair found\\". seen_numbers = {} for num in int_list: complement = target - num if complement in seen_numbers: return complement, num seen_numbers[num] = True return \\"No pair found\\""},{"question":"In an ancient city, there is a famous market street where vendors sell precious gems. Each vendor sells gems in the form of piles such that all gems in a pile are of the same type but the number of gems in each pile can be different. The city has a peculiar law that only allows a limited number of gems to be purchased in one transaction. You are tasked with buying exactly `t` gems in total, where each gem comes from one of the vendor\'s piles. To complete your purchase, you need to find out if there is a way to select exactly `t` gems from the available piles. You are not allowed to take more gems from a pile than what it contains and you cannot leave a vendor with a partial pile; you must take an entire pile or none at all. Input The first line contains two integers `t` and `n` (1 ≤ t ≤ 105, 1 ≤ n ≤ 100) - the total number of gems to buy and the number of gem piles available. The second line contains `n` integers, `b1, b2, ..., bn` (1 ≤ bi ≤ 104), where `bi` represents the number of gems in the i-th pile. Output Print \\"YES\\" if it is possible to buy exactly `t` gems, otherwise print \\"NO\\". Examples Input 7 3 3 4 5 Output YES Input 8 2 5 3 Output YES Input 10 4 1 1 1 1 Output NO","solution":"def can_buy_exactly_t_gems(t, n, piles): Determines if it is possible to buy exactly t gems from the given piles. Args: t : int : The total number of gems to buy. n : int : The number of piles. piles : list of int : The number of gems in each pile. Returns: bool : True if it is possible to buy exactly t gems, otherwise False. from itertools import combinations # Check for all possible combinations of pile selections for i in range(1, n+1): for combo in combinations(piles, i): if sum(combo) == t: return True return False def main(): import sys input = sys.stdin.read data = input().split() t = int(data[0]) n = int(data[1]) piles = list(map(int, data[2:])) if can_buy_exactly_t_gems(t, n, piles): print(\\"YES\\") else: print(\\"NO\\")"},{"question":"A company is organizing a programming competition and you are in charge of creating the leaderboard system. You need to implement a system that processes a series of events representing participants\' submissions and calculates the ranking of participants based on their total score. Each submission increases a participant\'s score by the points specified in the submission. Each event is one of the following types: 1. \\"SUBMIT x y\\": Participant x submits a solution that scores y points (1 ≤ y ≤ 100). If participant x doesn\'t exist, they are created with this submission. 2. \\"LEADERBOARD\\": Calculate and output the leaderboard ranking based on the total scores of participants. If multiple participants have the same total score, they appear in alphabetical order of their names. Input The first line contains an integer t (1 ≤ t ≤ 10^5) - the number of events. The following t lines describe the events, each of which is in one of the following formats: - \\"SUBMIT x y\\" (2 ≤ |x| ≤ 20, 1 ≤ y ≤ 100) - x is the participant name (a string with letters only) and y is the score. - \\"LEADERBOARD\\" Output For every \\"LEADERBOARD\\" event, output the current ranking of participants in order. Each participant should be printed on a new line in the format \\"x y\\", where x is the participant name and y is their total score. If there are no participants, output \\"No participants\\". Example Input 10 SUBMIT Alice 50 SUBMIT Bob 20 LEADERBOARD SUBMIT Charlie 40 SUBMIT Bob 30 LEADERBOARD SUBMIT Alice 10 SUBMIT Charlie 60 LEADERBOARD Output Alice 50 Bob 20 Charlie 40 Alice 60 Bob 50 Charlie 100","solution":"def process_events(events): participants = {} results = [] for event in events: if event.startswith(\\"SUBMIT\\"): parts = event.split() name = parts[1] score = int(parts[2]) if name in participants: participants[name] += score else: participants[name] = score elif event == \\"LEADERBOARD\\": if not participants: results.append([\\"No participants\\"]) else: leaderboard = sorted(participants.items(), key=lambda x: (-x[1], x[0])) results.append([f\\"{name} {score}\\" for name, score in leaderboard]) return results"},{"question":"Develop a system to assist in managing a parking garage in a busy city. The garage has a limited number of parking spots, and each spot can accommodate only one car. The garage management needs to efficiently handle car entry and exit to maximize the usage of available spots. You are to implement a program that maintains the status of parking spots and processes car entry and exit commands. The garage has m spots, and each spot is initially empty. Your program should be able to process the following types of commands: 1. `enter car_number`, which signifies a car with a given `car_number` wants to park. If there is at least one empty spot, assign the car to the lowest numbered available spot and output the spot number. If there are no available spots, output `garage full`. 2. `exit car_number`, which signifies a car with the given `car_number` wants to leave. If the car is currently parked in the garage, free the spot and output `car_number exited from spot x`, where x is the spot number. If the car is not found in the garage, output `car not found`. Input The first line contains number m (1 ≤ m ≤ 105) which specifies the number of parking spots in the garage and n (1 ≤ n ≤ 105) which specifies the number of commands. The next n lines contain a command of the format described above. Output Output the result of each command as described above. Examples Input 4 6 enter ABC123 enter XYZ789 enter DEF456 enter GHI000 enter JKL321 exit ABC123 enter JKL321 Output 1 2 3 4 garage full ABC123 exited from spot 1 1","solution":"class ParkingGarage: def __init__(self, m): Initializes the ParkingGarage with `m` spots. self.m = m self.spots = [None] * m # List to store car numbers self.car_to_spot = {} # Dictionary to map car number to spot index def enter(self, car_number): Handles a car entering the garage. :param car_number: The number of the car entering the garage. :return: The spot number assigned to the car or \'garage full\' if no spots are available. if car_number in self.car_to_spot: return f\\"car already parked at spot {self.car_to_spot[car_number] + 1}\\" for i in range(self.m): if self.spots[i] is None: self.spots[i] = car_number self.car_to_spot[car_number] = i return str(i + 1) return \\"garage full\\" def exit(self, car_number): Handles a car exiting the garage. :param car_number: The number of the car exiting the garage. :return: A message indicating the car has exited or \'car not found\' if the car is not in the garage. if car_number in self.car_to_spot: spot_index = self.car_to_spot[car_number] self.spots[spot_index] = None del self.car_to_spot[car_number] return f\\"{car_number} exited from spot {spot_index + 1}\\" return \\"car not found\\" def process_commands(m, commands): Processes a list of commands for parking and exiting cars. :param m: Number of parking spots. :param commands: List of commands to process. :return: List of results for each command. garage = ParkingGarage(m) results = [] for command in commands: operation, car_number = command.split() if operation == \\"enter\\": results.append(garage.enter(car_number)) elif operation == \\"exit\\": results.append(garage.exit(car_number)) return results"},{"question":"You are given a sequence of strings where each string is made up of lowercase English letters. Your task is to find the longest common prefix (LCP) among all the given strings. The longest common prefix of a sequence of strings is the longest string that is a prefix of all the strings in the sequence. Write a program that, given `n` strings, determines the longest common prefix of those strings. Input The first line of input contains a single integer `n` (1 ≤ n ≤ 2000), the number of strings in the sequence. The next `n` lines each contain a single string `si` (1 ≤ |si| ≤ 2000), where `si` represents the ith string in the sequence. Output Print a single line containing the longest common prefix of all the given strings. If there is no common prefix, print an empty string. Examples Input 4 flower flow flight fluent Output fl Input 3 dog racecar car Output (empty string) Input 2 interspecies intersection Output inters Note In the first sample, the longest common prefix \\"fl\\" is common to all four strings. In the second sample, there is no common prefix among all the strings, so the output is an empty string. In the third sample, the longest common prefix \\"inters\\" is common to the two strings provided.","solution":"def longest_common_prefix(strings): This function takes in a list of strings and returns the longest common prefix among them. If there is no common prefix, it returns an empty string. if not strings: return \\"\\" # Initialize the prefix to the first string prefix = strings[0] # Compare the prefix with each string for s in strings[1:]: # Reduce the prefix length until it matches the beginning of s while s[:len(prefix)] != prefix and prefix: prefix = prefix[:len(prefix)-1] # If the prefix becomes empty, return immediately if not prefix: return \\"\\" return prefix"},{"question":"Problem description. Anna is a software developer who loves creating algorithms to solve problems efficiently. She\'s currently working on a system that manages hotel bookings. To optimize room allocation, she needs to determine the total number of days with at least one active booking for a given list of reservations. A reservation consists of a start date and an end date, both in the format \'YYYY-MM-DD\'. Anna needs to account for all days in each reservation period, inclusive of both start and end dates. Your task is to write a program to determine the total number of active booking days given a list of reservations. Input The first line contains an integer n, the number of reservations. Each of the next n lines contains two strings start_date and end_date in the format \'YYYY-MM-DD\'. Output Output a single integer, the total number of days with at least one active booking across all reservations. Constraints - 1 ≤ n ≤ 1000 - The dates are valid and within the range from \'2000-01-01\' to \'2100-12-31\'. - Each reservation\'s start_date is less than or equal to its end_date. Example Input: 3 2023-01-01 2023-01-05 2023-01-04 2023-01-10 2023-01-09 2023-01-15 Output: 15 Explanation The reservations cover the following days: \'2023-01-01\' to \'2023-01-05\', \'2023-01-04\' to \'2023-01-10\', and \'2023-01-09\' to \'2023-01-15\'. The total number of unique days covered by at least one reservation is 15.","solution":"from datetime import datetime, timedelta def total_booking_days(n, reservations): Calculate the total number of unique days with at least one active booking given a list of reservations. :param n: int, number of reservations :param reservations: list of tuples, each containing start_date and end_date in \'YYYY-MM-DD\' format :return: int, total number of unique active booking days days_set = set() for start_date, end_date in reservations: current_date = datetime.strptime(start_date, \'%Y-%m-%d\') end_date = datetime.strptime(end_date, \'%Y-%m-%d\') while current_date <= end_date: days_set.add(current_date) current_date += timedelta(days=1) return len(days_set)"},{"question":"Write a program that processes queries on a list of integers, where each query can either update a range of values with a given delta or compute the greatest common divisor (GCD) of a subarray within that list. The list of integers is initially all set to zero. The operations are defined as follows: - `add_value(l, r, x)`: increment each element in the range from index `l` to `r` by `x`. - `find_gcd(l, r)`: compute the GCD of all elements in the range from index `l` to `r`. Constraints * 1 ≤ n ≤ 100,000 (number of elements in the list) * 1 ≤ q ≤ 100,000 (number of queries) * 0 ≤ l ≤ r < n * -1000 ≤ x ≤ 1000 Input n q query_1 query_2 : query_q The first line contains n and q, the number of elements in the list and number of queries respectively. Each of the next q lines contains either a type `0` or `1` followed by three integers: - `0 l r x`: represents `add_value(l, r, x)`. - `1 l r`: represents `find_gcd(l, r)`. Output For each `find_gcd(l, r)` query, print the GCD of the specified range. Example Input 6 5 0 1 4 2 0 2 5 3 1 0 5 0 0 3 1 1 1 3 Output 1 6","solution":"from math import gcd from functools import reduce class GCDArray: def __init__(self, n): self.array = [0] * n def add_value(self, l, r, x): for i in range(l, r + 1): self.array[i] += x def find_gcd(self, l, r): subarray = self.array[l:r + 1] return reduce(gcd, subarray) def process_queries(n, queries): results = [] gcd_array = GCDArray(n) for query in queries: if query[0] == 0: _, l, r, x = query gcd_array.add_value(l, r, x) elif query[0] == 1: _, l, r = query results.append(gcd_array.find_gcd(l, r)) return results # Example usage: # n = 6 # queries = [ # [0, 1, 4, 2], # [0, 2, 5, 3], # [1, 0, 5], # [0, 0, 3, 1], # [1, 1, 3] # ] # print(process_queries(n, queries)) # Output: [1, 6]"},{"question":"# Anagram Grouping An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Given a list of words, your task is to group the anagrams together. Write a function that takes a list of strings and returns a list of lists, where each sublist contains words that are anagrams of each other. Input - A single line containing space-separated words, where each word consists of lowercase English letters. The length of the list does not exceed 10^5, and each word’s length does not exceed 100. Output - A list of lists, where each inner list contains words which are anagrams of each other. The inner lists should be output in any order, and the words within each list can also be in any order. Examples Input `eat tea tan ate nat bat` Output `[[\\"eat\\", \\"tea\\", \\"ate\\"], [\\"tan\\", \\"nat\\"], [\\"bat\\"]]` Input `listen silent enlist inlets` Output `[[\\"listen\\", \\"silent\\", \\"enlist\\", \\"inlets\\"]]` Note 1. In the first example, \\"eat\\", \\"tea\\", and \\"ate\\" are anagrams of each other, while \\"tan\\" and \\"nat\\" are another group of anagrams. \\"bat\\" does not have any anagram in the list. 2. In the second example, all words provided are anagrams of each other and thus appear in a single list within the resulting list of lists.","solution":"def group_anagrams(words): Groups anagrams from a list of words. Args: words (List[str]): List of words Returns: List[List[str]]: List of lists where each inner list contains anagrams from collections import defaultdict anagram_dict = defaultdict(list) for word in words: sorted_word = \'\'.join(sorted(word)) anagram_dict[sorted_word].append(word) return list(anagram_dict.values())"},{"question":"You are given an n x m grid filled with non-negative integers. You need to help Alice find the maximum sum of a sub-grid located in the top-left corner that contains exactly K cells. Alice can choose any contiguous sub-grid with K cells, but it should include top-left cell (i.e., cell at position (1, 1)). Write a function maxSubgridSum(n, m, K, grid) that takes in the number of rows n, the number of columns m, the integer K and a 2D list grid representing the grid, and returns the maximum sum of a sub-grid with K cells starting from the top-left corner. **Input:** - n (2 ≤ n ≤ 100): Number of rows in the grid. - m (2 ≤ m ≤ 100): Number of columns in the grid. - K (1 ≤ K ≤ n * m): Number of cells that should be included in the sub-grid. - grid (n x m list): A 2D list of integers representing the grid. **Output:** - An integer representing the maximum sum. **Example:** Input: ``` n = 3 m = 3 K = 4 grid = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` Output: ``` 25 ``` Explanation: Alice can choose the sub-grid: ``` 1 2 4 5 ``` which has 4 cells with the maximum sum of 1 + 2 + 4 + 5 = 12. **Note:** You need to consider all possible sub-grids with exactly K cells and choose the one with the maximum sum, while ensuring the sub-grid always includes the top-left cell of the grid. The shape of the sub-grid can be different based on K and the dimensions of the grid but should be kept contiguous.","solution":"def maxSubgridSum(n, m, K, grid): max_sum = -float(\'inf\') for height in range(1, n + 1): for width in range(1, m + 1): if height * width == K: current_sum = 0 for i in range(height): for j in range(width): current_sum += grid[i][j] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"You are given a bookstore where books are arranged in a stack sorted by their publication dates; older books are at the bottom, and newer books are on top. The bookstore receives two types of queries: 1) Customer Query: A customer comes in and asks for the latest book (the book on the top of the stack). The bookstore removes this book from the stack and gives it to the customer. If the stack is empty, the customer goes away disappointed, and the bookstore prints \\"No Book\\". 2) Supply Query: The bookstore receives a shipment of a new book, which is added to the top of the stack of books along with the publication year of the book. The task is to process these queries and print the results of customer queries. Input: The first line of input contains an integer Q denoting the number of queries. The next Q lines contain the queries. Each query is of one of the two types: - A Customer Query is denoted by the integer 1. - A Supply Query is denoted by the integer 2 followed by another integer Y (the publication year of the new book). Output: For each Customer Query, if the stack is not empty, print the year of the book taken by the customer. If the stack is empty, print \\"No Book\\". Constraints: 1 ≤ Q ≤ 10^5 1000 ≤ Y ≤ 2023 SAMPLE INPUT 7 2 2001 2 1995 1 1 2 2020 1 1 SAMPLE OUTPUT 1995 2001 2020 No Book","solution":"def process_queries(queries): Processes a list of queries and returns the results for customer queries. Params: - queries (List[str]): A list of query strings. Returns: - List[str]: A list of results for customer queries. stack = [] results = [] for query in queries: parts = query.split() if parts[0] == \'1\': # Customer Query if stack: results.append(str(stack.pop())) else: results.append(\\"No Book\\") elif parts[0] == \'2\': # Supply Query stack.append(int(parts[1])) return results # Example if __name__ == \\"__main__\\": queries = [ \\"2 2001\\", \\"2 1995\\", \\"1\\", \\"1\\", \\"2 2020\\", \\"1\\", \\"1\\" ] output = process_queries(queries) for result in output: print(result)"},{"question":"A tech conference called “Algorithm Avenue” has decided to streamline the management of their workshop rooms. There are m workshop sessions scheduled for the conference. Each session has a duration and a popularity score associated with it, characterized by two integers: di and si — the duration of the session in hours and the popularity score, respectively. The conference has a single day available for all workshops, which runs from 9:00 to 17:00 (8 hours in total). Your task is to schedule as many workshops as possible during this period such that the total popularity score is maximized. Note that workshops cannot overlap in time. Input The first line of the input contains integer m (1 ≤ m ≤ 1000) — the number of workshop sessions. Then m lines follow. Each line contains two integers: di and si (1 ≤ di ≤ 8, 1 ≤ si ≤ 1000) — the duration and popularity score of the i-th workshop session, respectively. Output In the first line, print two integers: n, p — the number of scheduled workshops and the total popularity score from these workshops, respectively. Then print n lines — each line must contain one integer representing the index of the scheduled workshop session. If there are multiple optimal answers, print any of them. Examples Input 4 2 300 1 200 2 150 1 100 Output 4 750 2 4 3 1","solution":"def max_popularity_schedule(m, sessions): from itertools import product def knapsack_01_with_items(W, wt, val, n): K = [[0 for x in range(W + 1)] for x in range(n + 1)] item_incl = [[[] for x in range(W + 1)] for x in range(n + 1)] for i in range(n + 1): for w in range(W + 1): if i == 0 or w == 0: K[i][w] = 0 elif wt[i-1] <= w: if val[i-1] + K[i-1][w-wt[i-1]] > K[i-1][w]: K[i][w] = val[i-1] + K[i-1][w-wt[i-1]] item_incl[i][w] = item_incl[i-1][w-wt[i-1]] + [i-1] else: K[i][w] = K[i-1][w] item_incl[i][w] = item_incl[i-1][w] else: K[i][w] = K[i-1][w] item_incl[i][w] = item_incl[i-1][w] return K[n][W], item_incl[n][W] durations = [sessions[i][0] for i in range(len(sessions))] scores = [sessions[i][1] for i in range(len(sessions))] max_score, items_incl = knapsack_01_with_items(8, durations, scores, len(sessions)) return len(items_incl), max_score, [i + 1 for i in items_incl] # Example usage: if __name__ == \\"__main__\\": m = 4 sessions = [(2, 300), (1, 200), (2, 150), (1, 100)] print(max_popularity_schedule(m, sessions))"},{"question":"You are given the task of assigning students to different groups for a class project. However, the assignment should follow specific constraints. Each student can belong to exactly one group, and each group must have at least one student but no more than k students. Furthermore, different groups should attempt to be balanced with as close to k students as possible. Given a list of student IDs and the maximum group size k, determine the minimum number of groups required to accommodate all students while adhering to the group size constraints. Input The first line contains an integer t (1 ≤ t ≤ 100), the number of test cases. The following lines contain the test cases. Each test case consists of two lines. The first line contains an integer n (1 ≤ n ≤ 1000), the number of students. The second line contains n distinct integers, each representing a student ID. Output For each test case, print a single integer, the minimum number of groups required. Example Input 3 5 1 2 3 4 5 7 11 22 33 44 55 66 77 10 101 102 103 104 105 106 107 108 109 110 Output 1 1 2 Explanation In the first test case, with 5 students and k = 5, all students can be assigned to one group. In the second test case, with 7 students and k = 7, all students can be assigned to one group. In the third test case, with 10 students and k = 5, the minimum number of groups required is 2, dividing the students into two groups of 5 students each.","solution":"def minimum_groups(t, test_cases): results = [] for case in test_cases: n, k = case[\'n\'], case[\'k\'] min_groups = (n + k - 1) // k # Using ceiling of n/k results.append(min_groups) return results"},{"question":"You are given a list of integers that represents the heights of buildings in a skyline. You need to find how much water would be trapped after raining if it is pouring down continuously. Water is trapped between buildings in such a way that the volume of water in each unit of height is determined by the height of the shortest building that bounds that unit from either side. For example, given the array [4, 2, 0, 3, 2, 5], the graphical representation of the buildings, along with the trapped water will look like this: ``` # # # # # # # # # # # # # # # # # # 4 2 0 3 2 5 ``` The amount of trapped water is 9 units, because there are 6 units of water between the 4th and 6th columns below the horizontal line at height 3, plus 1 unit between the 6th and 7th columns below the horizontal line at height 4, plus 2 units between the 2nd and 3rd columns below the horizontal line at height 3. Your task is to write a program that calculates the total amount of trapped water. # Input - The first line contains an integer n (1 ≤ n ≤ 10^5) - the number of buildings. - The second line contains n integers h_1, h_2, ..., h_n (0 ≤ h_i ≤ 10^4) - the heights of the buildings. # Output - A single integer representing the total units of water that can be trapped. # Example Input ``` 6 4 2 0 3 2 5 ``` Output ``` 9 ``` # Explanation - Between the first and fourth column and below the height 3, there are 3 units of water trapped. - Between the fourth and the sixth column and below the height 4, there are 1 unit of water trapped. - Between the second and third column and below the height 3, there are 2 units of water trapped. - Therefore, the total trapped water is 3 + 2 + 1 + 3 = 9.","solution":"def trapWater(heights): Calculate the total units of water trapped between buildings. :param heights: List[int] - List of integers representing building heights :return: int - Total units of trapped water if not heights: return 0 n = len(heights) left_max = [0]*n right_max = [0]*n water_trapped = 0 # Fill left_max array left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i-1], heights[i]) # Fill right_max array right_max[n-1] = heights[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], heights[i]) # Calculate the trapped water for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"You are given a string in which every character is a digit between \'0\' and \'9\'. Your task is to find the largest and the smallest number that can be formed by rearranging the digits of this string. Input: The input consists of a single line, containing a string S of digits. Output: In a single line, print two space-separated integers, the smallest and the largest number that can be formed by rearranging the digits of S. Constraints: 1 ≤ length of S ≤ 1000 SAMPLE INPUT 32045 SAMPLE OUTPUT 20345 54320","solution":"def smallest_and_largest_number(s): Returns the smallest and the largest number that can be formed by rearranging the digits of the string s. # For the smallest number, we sort the digits in ascending order smallest = \'\'.join(sorted(s)) # For the largest number, we sort the digits in descending order largest = \'\'.join(sorted(s, reverse=True)) return smallest, largest # Example usage s = \\"32045\\" smallest, largest = smallest_and_largest_number(s) print(f\\"{smallest} {largest}\\")"},{"question":"Implement a **spelling checker** that attempts to correct misspelled words in a text. The checker should use a provided dictionary of correctly spelled words to find the most likely correction. For each misspelled word in the text, the spelling checker should choose the correction that has the smallest edit distance (Levenshtein distance) to the word. If there are multiple words with the same smallest edit distance, choose the lexicographically smallest word. Edit distance between two words is defined as the minimum number of single-character insertions, deletions, or substitutions required to transform one word into the other. # Input The input is given in the following format: ``` N M word1 word2 :: wordN text_word1 text_word2 :: text_wordM ``` Where: - `N` is the number of words in the dictionary (`1 ≤ N ≤ 10000`). - `M` is the number of words in the text (`1 ≤ M ≤ 10000`). - `word1` to `wordN` are the words in the dictionary (each word is a string of lowercase letters with length between 1 and 50). - `text_word1` to `text_wordM` are the words in the text to be checked (each word is a string of lowercase letters with length between 1 and 50). # Output For each word in the text that is not found in the dictionary, output the corrected word on a new line. If the word is correctly spelled, print the word itself. # Example ```text Input: 5 4 correct spell dictionary checker example corrct spel dictionry exampel Output: correct spell dictionary example ``` # Explanation - \\"corrct\\" is corrected to \\"correct\\" with edit distance 1. - \\"spel\\" is corrected to \\"spell\\" with edit distance 1. - \\"dictionry\\" is corrected to \\"dictionary\\" with edit distance 1. - \\"exampel\\" is corrected to \\"example\\" with edit distance 1. Note: You can use any algorithm or technique you prefer to compute the edit distance and find the correct spellings based on the dictionary provided.","solution":"def calculate_levenshtein_distance(word1, word2): Calculates the Levenshtein distance between two words. len1, len2 = len(word1), len(word2) dp = [[0] * (len2 + 1) for _ in range(len1 + 1)] for i in range(len1 + 1): for j in range(len2 + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif word1[i - 1] == word2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) return dp[len1][len2] def correct_spelling(dictionary, text): Corrects the spelling of words in the text using the dictionary. corrections = [] for text_word in text: if text_word in dictionary: corrections.append(text_word) else: min_distance = float(\'inf\') correct_word = text_word for dict_word in dictionary: distance = calculate_levenshtein_distance(text_word, dict_word) if distance < min_distance or (distance == min_distance and dict_word < correct_word): min_distance = distance correct_word = dict_word corrections.append(correct_word) return corrections"},{"question":"You are the CTO of a company that provides premium API services. Your company\'s API rate-limits the number of requests to ensure fair use among different users. The rate-limit policy allows up to `N` requests per `T` seconds. To manage this, you decide to implement a function that tracks and allows or blocks incoming requests based on the defined rate limit. You need to implement a function `shouldAllowRequest(timestamp)`, where `timestamp` is the time in seconds since the epoch when a request is made. This function should return `true` if the request is allowed and `false` if the request should be blocked. The function should maintain a record of request timestamps and determine if a new request exceeds the allowable rate. If it does, the request should be blocked; otherwise, it should be allowed. Input The function `configureRateLimiter(N, T)` should set up the rate limiter with the maximum number of requests `N` allowed in `T` seconds. Following that, multiple calls to `shouldAllowRequest(timestamp)` will be made to test if a request at a given timestamp is allowed or not. The total number of `shouldAllowRequest(timestamp)` calls will not exceed 100,000, and the timestamps will be given in non-decreasing order. Example ```python # Configure the rate limiter to allow 3 requests per 5 seconds. configureRateLimiter(3, 5) print(shouldAllowRequest(1)) # Returns: true print(shouldAllowRequest(2)) # Returns: true print(shouldAllowRequest(3)) # Returns: true print(shouldAllowRequest(4)) # Returns: false print(shouldAllowRequest(6)) # Returns: true print(shouldAllowRequest(7)) # Returns: true print(shouldAllowRequest(8)) # Returns: true print(shouldAllowRequest(9)) # Returns: false ``` Note In this example, the rate limiter allows up to 3 requests per 5 seconds. Within each sliding window of 5 seconds, if the number of requests exceeds 3, subsequent requests are blocked. Explanation 1. configureRateLimiter(3, 5) sets the limit of 3 requests per 5 seconds. 2. The first three requests at times 1, 2, and 3 seconds are within the rate limit. 3. The fourth request at 4 seconds is blocked because the limit of 3 requests per 5 seconds has been reached. 4. The request at 6 seconds is allowed because the sliding window now no longer includes the first request at 1 second. 5. Similarly, requests at 7 and 8 seconds are allowed, but the request at 9 seconds is blocked, since the window from 5 to 9 seconds includes three requests at 6, 7, and 8 seconds.","solution":"from collections import deque class RateLimiter: def __init__(self): self.N = 0 self.T = 0 self.request_times = deque() def configureRateLimiter(self, N, T): self.N = N self.T = T self.request_times.clear() def shouldAllowRequest(self, timestamp): while self.request_times and self.request_times[0] <= timestamp - self.T: self.request_times.popleft() if len(self.request_times) < self.N: self.request_times.append(timestamp) return True else: return False # Singleton instance of RateLimiter rate_limiter = RateLimiter() def configureRateLimiter(N, T): rate_limiter.configureRateLimiter(N, T) def shouldAllowRequest(timestamp): return rate_limiter.shouldAllowRequest(timestamp)"},{"question":"You are given an array of integers. Your task is to determine the number of subarrays that have a sum equal to a given target value. A subarray is defined as a contiguous part of the array. For example, if the array is [1, 1, 1] and the target sum is 2, the subarrays that sum to 2 are [1, 1] (starting at index 0 and ending at index 1) and [1, 1] (starting at index 1 and ending at index 2). Therefore, there are 2 subarrays that sum to 2. Input The first line of input contains an integer T, denoting the number of test cases. The description of T test cases follows. For each test case, the first line contains an integer n, denoting the size of the array. The second line contains n space-separated integers representing the elements of the array. The third line contains the target sum. Output For each test case, output a single line containing the number of subarrays that have a sum equal to the target value. Constraints 1 ≤ T ≤ 10 1 ≤ n ≤ 10^5 -10^4 ≤ array elements ≤ 10^4 -10^9 ≤ target sum ≤ 10^9 Example Input: 2 3 1 1 1 2 4 1 2 3 -2 2 3 Output: 2 4 Explanation Example case 1. The array is [1, 1, 1]. The subarrays that sum to 2 are [1, 1] and [1, 1]. Example case 2. The array is [1, 2, 3, -2, 2]. The subarrays that sum to 3 are [1, 2], [3], [1, 2, 3, -2, 2] and [3, -2, 2].","solution":"def count_subarrays_with_sum(arr, target): Returns the number of subarrays with a sum equal to the target value. count = 0 current_sum = 0 prefix_sum_counts = {0: 1} for num in arr: current_sum += num if (current_sum - target) in prefix_sum_counts: count += prefix_sum_counts[current_sum - target] if current_sum in prefix_sum_counts: prefix_sum_counts[current_sum] += 1 else: prefix_sum_counts[current_sum] = 1 return count def find_subarray_counts(test_cases): results = [] for case in test_cases: n, arr, target = case result = count_subarrays_with_sum(arr, target) results.append(result) return results"},{"question":"**Spiraling Numbers** Given an integer `n`, generate a 2D `n x n` array containing integers from 1 to `n*n` arranged in a spiral order, starting from the top-left corner and moving to the right initially. The spiral order proceeds as follows: right → down → left → up, repeating the cycle. # Input - A single integer `n` (1 ≤ n ≤ 50) representing the dimensions of the 2D array. # Output - A 2D `n x n` array where numbers are filled in a spiral order. # Example Input ``` 3 ``` Output ``` 1 2 3 8 9 4 7 6 5 ``` Input ``` 4 ``` Output ``` 1 2 3 4 12 13 14 5 11 16 15 6 10 9 8 7 ``` # Note In the first example, for `n=3`, the numbers 1 through 9 are arranged in a 3x3 matrix where the sequence follows a spiraling order: 1 → 2 → 3 → 4 → 5 → 6 → 7 → 8 → 9. In the second example, for `n=4`, the numbers 1 through 16 are arranged in a 4x4 matrix in a similar spiraling fashion.","solution":"def generate_spiral_matrix(n): Generates a 2D n x n matrix in a spiral order. matrix = [[0] * n for _ in range(n)] left, right, top, bottom = 0, n - 1, 0, n - 1 num = 1 while left <= right and top <= bottom: for col in range(left, right + 1): matrix[top][col] = num num += 1 top += 1 for row in range(top, bottom + 1): matrix[row][right] = num num += 1 right -= 1 if top <= bottom: for col in range(right, left - 1, -1): matrix[bottom][col] = num num += 1 bottom -= 1 if left <= right: for row in range(bottom, top - 1, -1): matrix[row][left] = num num += 1 left += 1 return matrix"},{"question":"Codeville is a city where everyone loves to play the lottery. There are N people in the city, each having a unique lottery ticket. The lottery tickets contain a list of M integers, where each integer is unique. To prepare for the lottery, the codeville authorities want to ensure that each ticket contains exactly the same integers, but possibly in different orders. Your task is to check whether all tickets already contain the same integers. Input The first line of the input will contain an integer T (number of test cases). Then for every test case: The first line contains two integers N and M separated by a space. The following N lines each contain M integers separated by spaces. Output For each test case, print \\"YES\\" if all tickets contain exactly the same integers and \\"NO\\" otherwise. Constraints 1 ≤ T ≤ 5 2 ≤ N ≤ 100 1 ≤ M ≤ 100 0 ≤ Each integer on the ticket ≤ 1000 Sample Input 2 3 4 1 2 3 4 4 3 2 1 2 1 4 3 2 3 1 2 3 3 2 1 Sample Output YES YES","solution":"def check_lottery_tickets(test_cases): results = [] for test_case in test_cases: N, M, tickets = test_case # Convert all rows to sets, compare with the first one first_ticket_set = set(tickets[0]) all_same = all(set(ticket) == first_ticket_set for ticket in tickets) if all_same: results.append(\\"YES\\") else: results.append(\\"NO\\") return results def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N, M = map(int, lines[index].strip().split()) tickets = [list(map(int, lines[index + 1 + i].strip().split())) for i in range(N)] test_cases.append((N, M, tickets)) index += N + 1 return test_cases"},{"question":"Time Limit: 10 sec / Memory Limit: 128 MB Given a collection of different words, your task is to find and output the longest word that can be formed by deleting some characters of a given string `s` without reordering the characters. If there is more than one possible longest word, select the one that is lexicographically smallest. Example Input 5 able apple monkey plea abpcplea Output apple","solution":"def is_subsequence(word, s): it = iter(s) return all(char in it for char in word) def find_longest_word(words, s): words.sort(key=lambda word: (-len(word), word)) for word in words: if is_subsequence(word, s): return word return \\"\\""},{"question":"You are given an array of integers representing the heights of buildings in a row. The buildings form a skyline viewed from the left side and you need to find the number of distinct buildings that are visible from that side. A building is considered \\"visible\\" if there is no taller building in front of it. Constraints * 1 leq n leq 10^6 * 1 leq heights[i] leq 10^9 Input - The first line contains an integer n (the number of buildings). - The second line contains n integers heights[i] representing the heights of the buildings. Output Print the number of distinct visible buildings. Examples Input 6 3 7 8 3 6 1 Output 3 Input 5 4 3 2 3 5 Output 2","solution":"def count_visible_buildings(heights): Counts the number of distinct buildings that are visible from the left side. Parameters: heights (list): List of integers representing the heights of buildings. Returns: int: Number of distinct visible buildings. if not heights: return 0 max_height = 0 visible_count = 0 for height in heights: if height > max_height: visible_count += 1 max_height = height return visible_count"},{"question":"Alyssa is revisiting some of her old projects involving sequences. Recently, she stumbled upon the Fibonacci sequence and got curious about an interesting problem. She wants to know how many Fibonacci numbers lie within a given range of indices. A Fibonacci number is a number in the sequence where each number is the sum of the two preceding ones, usually starting with 0 and 1. The sequence goes 0, 1, 1, 2, 3, 5, 8, 13, ... Given two indices, start and end, write a program to determine how many Fibonacci numbers exist between these two indices (inclusive). INPUT: The first line contains an integer T representing the number of test cases. Each test case consists of two integers: start and end, representing the range of indices. OUTPUT: For each test case, print the count of Fibonacci numbers within the given range of indices. Range: 1 <= T <= 200 0 <= start <= 92 (the 93rd Fibonacci number is the largest number that can fit in a 64-bit signed integer) start <= end <= 92 SAMPLE INPUT 3 0 5 2 7 10 15 SAMPLE OUTPUT 6 6 6 [Note: The Fibonacci numbers in the ranges are: - 0 1 1 2 3 5 in the first range, - 1 2 3 5 8 13 in the second range, - 55 89 144 233 377 610 in the third range.]","solution":"def count_fibonacci_in_range(start, end): Returns the count of Fibonacci numbers within the given range of indices (inclusive). # Generate the Fibonacci sequence up to the 93rd number (index 92) fibonacci_sequence = [0, 1] for i in range(2, 93): next_fib = fibonacci_sequence[-1] + fibonacci_sequence[-2] fibonacci_sequence.append(next_fib) # Count Fibonacci numbers in the range [start, end] return len(fibonacci_sequence[start:end + 1]) def process_test_cases(test_cases): Processes a list of test cases, each containing a start index and an end index. Returns a list with the count of Fibonacci numbers for each test case. results = [] for start, end in test_cases: results.append(count_fibonacci_in_range(start, end)) return results"},{"question":"Three friends, Anna, Bob, and Charlie, are planning a road trip. They have a list of cities they want to visit, with driving times between consecutive cities in hours. They have a strict rule: each friend will drive an equal number of hours. If this is not possible, then they will not proceed with their trip. Write a function that determines whether it is possible to equally divide the driving hours among the three friends. The function should take as input a list of integers, where each integer represents the driving time between two consecutive cities. Return \\"YES\\" if the driving hours can be equally divided among Anna, Bob, and Charlie, and \\"NO\\" otherwise. Input Description: - The input will be a list of integers, where each integer is greater than 0 and represents the driving time in hours. Output Description: - Return a string \\"YES\\" or \\"NO\\" based on whether the driving hours can be equally divided among the three friends. Example Input: [2, 4, 6] Output: \\"YES\\" Input: [1, 2, 3, 4] Output: \\"NO\\" Explanation: For the first example: - Total driving hours: 2 + 4 + 6 = 12 - Each friend can drive 4 hours, so the output is \\"YES\\". For the second example: - Total driving hours: 1 + 2 + 3 + 4 = 10 - 10 cannot be divided by 3 equally, so the output is \\"NO\\".","solution":"def can_divide_driving_hours(hours): Determines if the total driving hours can be equally divided among three friends. Args: hours (list of int): A list of integers representing driving times in hours. Returns: str: \\"YES\\" if the driving hours can be equally divided among three friends, otherwise \\"NO\\". total_hours = sum(hours) if total_hours % 3 == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given an array of integers and a target integer T. Your task is to determine if there are two distinct elements in the array that add up to T. If such a pair exists, return the 1-based indices of the two elements, else return -1. If there are multiple valid pairs, return the pair with the smallest index difference. If there are still multiple, return the pair with the smallest first index. Input The first line of the input contains an integer N, the number of elements in the array. The next line contains N space-separated integers representing the elements of the array. The last line contains the target integer T. Output Contains either two integers representing the 1-based indices of the two elements that add up to T, or -1 if no such pair exists. Constraints 1 ≤ N ≤ 10^5 -10^6 ≤ Elements of the array ≤ 10^6 -10^6 ≤ T ≤ 10^6 Example Input: 6 1 4 5 11 7 8 9 Output: 2 3 Explanation: The pair of elements (4, 5) has the 1-based indices (2, 3) and their sum is equal to the target integer 9.","solution":"def find_two_sum_indices(arr, T): Returns 1-based indices of two distinct elements in the array that add up to T or -1 if no such pair exists. num_dict = {} for i, num in enumerate(arr): complement = T - num if complement in num_dict: return (num_dict[complement] + 1, i + 1) num_dict[num] = i return -1"},{"question":"You are given a string s of length n consisting of lowercase English letters. You can perform the following operation on it exactly once: * Choose two adjacent characters and swap them. What is the lexicographically smallest string you can obtain after performing exactly one swap? Input The first line contains an integer n (2 ≤ n ≤ 10^5) — the length of the string s. The second line contains a string s of length n. Output The only line contains the lexicographically smallest string you can obtain after performing exactly one swap. Examples Input 4 dcba Output cdba Input 3 abc Output abc Note In the first example, swapping the first two characters results in the string \\"cdba\\", which is the smallest lexicographical order possible with one swap. In the second example, the string is already in the smallest lexicographical order, so no swap is needed.","solution":"def lexicographically_smallest_string(n, s): Returns the lexicographically smallest string after exactly one adjacent swap. s_list = list(s) for i in range(n - 1): if s_list[i] > s_list[i + 1]: s_list[i], s_list[i + 1] = s_list[i + 1], s_list[i] return \'\'.join(s_list) return s"},{"question":"A pharmaceutical company is conducting a study to determine the optimal dosage of a new drug. The study involves N patients, each with a unique dosage requirement that varies linearly over time based on their metabolic rates. You are tasked with writing a program that calculates the exact dosage for each patient at a given time T and determines the highest and lowest dosages among all patients at that time. Each patient starts with an initial dosage at time 0 and increases this dosage by a fixed rate per unit time. The dosage values are expressed in milligrams (mg). Input The input consists of multiple datasets, each in the following format. N T a1 b1 a2 b2 ... aN bN The first line of a dataset contains two integers N and T, where N (1 ≤ N ≤ 100) is the number of patients and T (0 ≤ T ≤ 100) is the time in hours at which the dosages should be calculated. Each of the following N lines contains two integers ai and bi, separated by a single space. For the i-th patient, ai (0 ≤ ai ≤ 100) is the initial dosage in milligrams, and bi (0 ≤ bi ≤ 10) is the dosage increase rate in milligrams per hour. The last dataset is followed by a line containing a single zero. Output For each dataset in the input, you should print the highest and lowest dosages at time T, separated by a single space on a line. No output line should contain extra characters. Dosage values should be printed with a precision of up to two decimal places. Example Input 3 5 10 2 15 1 20 3 2 0 12 2 8 3 0 Output 35.00 20.00 12.00 8.00","solution":"def calculate_dosages(input_data): input_lines = input_data.strip().split(\'n\') output = [] i = 0 while i < len(input_lines): line = input_lines[i] if line == \'0\': break N, T = map(int, line.split()) dosages = [] for j in range(1, N + 1): a, b = map(int, input_lines[i + j].split()) dosage = a + b * T dosages.append(dosage) max_dosage = max(dosages) min_dosage = min(dosages) output.append(f\\"{max_dosage:.2f} {min_dosage:.2f}\\") i += N + 1 return \\"n\\".join(output)"},{"question":"In the world of Highy Castle, knights are installed with power to fight the evil forces. The power of each knight is given by a positive integer. A group of knights form a squad to battle. One day, the king decided that it is important to calculate the maximum power difference between the knights in a squad. This difference is defined as the absolute difference between the highest and the lowest powers of the knights in the squad. Input: - First line contains an integer n, the number of knights. - Second line contains n integers, representing the power of each knight. Output: - A single integer, the maximum power difference in the squad. Sample Input: 5 10 20 30 40 50 Sample Output: 40 SAMPLE INPUT 4 5 3 8 1 SAMPLE OUTPUT 7","solution":"def max_power_difference(n, powers): Returns the maximum power difference between the knights in the squad. Parameters: n (int): The number of knights. powers (list): A list of integers representing the powers of each knight. Returns: int: The maximum power difference. if n < 2: return 0 max_power = max(powers) min_power = min(powers) return max_power - min_power # Example usage: # print(max_power_difference(5, [10, 20, 30, 40, 50])) # Output: 40"},{"question":"Create a program that reads a list of non-negative integers and outputs the median value. If the list has an even number of integers, the median is defined as the average of the two middle elements (you may assume the integer division and result will still be an integer). Each integer in the list is between 0 and 1000, and the length of the list will be between 1 and 1000. Input The input consists of multiple datasets. Each dataset is given as a single line of space-separated integers, representing the list. The end of input is indicated by a line containing only the number -1. Output For each dataset, output the median value on a new line. Example Input 1 3 3 6 7 8 9 7 8 3 6 1 9 1 2 -1 Output 6 6 1","solution":"def find_median(dataset): Finds the median of a list of non-negative integers. If the list has an even number of elements, it returns the integer average of the two middle values. sorted_ds = sorted(dataset) n = len(sorted_ds) if n % 2 == 1: # odd length return sorted_ds[n // 2] else: # even length return (sorted_ds[(n // 2) - 1] + sorted_ds[n // 2]) // 2 def median_of_datasets(input_lines): Processes multiple datasets input and returns the median value for each dataset. result = [] for line in input_lines: if line.strip() == \'-1\': break dataset = list(map(int, line.strip().split())) result.append(find_median(dataset)) return result # Provided for testing the function with specific input def process_input(input_text): input_lines = input_text.strip().split(\'n\') return median_of_datasets(input_lines)"},{"question":"Input The input consists of two integers n and k (1 ≤ n, k ≤ 10^9), separated by a single space. Output Output a single integer. Examples Input 6 3 Output 60 Input 15 20 Output 291 Input 500 300 Output 750","solution":"import math def lcm(n, k): Returns the least common multiple (LCM) of integers n and k. return (n * k) // math.gcd(n, k)"},{"question":"Bob loves playing with integers. One day, he devised a new game called \\"Subarray Thrill.\\" Here\'s how the game works: Bob has an array of integers, and he can choose any two elements in the array to form a subarray. The thrill of a subarray is defined as the absolute difference between the maximum and minimum elements of that subarray. Bob wants to find out the maximum thrill possible for any subarray in his array. Given an array of integers, your task is to determine the maximum thrill among all possible subarrays. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of two lines. The first line contains an integer N, the size of the array. The second line contains N space-separated integers, representing the elements of the array. Output For each test case, output a single line containing a single integer: the maximum thrill possible for any subarray in the array. Constraints 1 ≤ T ≤ 50 2 ≤ N ≤ 10^5 -10^9 ≤ Array elements ≤ 10^9 Example Input: 3 5 1 3 -2 8 -7 4 4 4 4 4 6 7 2 5 3 -1 4 Output: 15 0 8 Explanation Example case 1: The subarray [-7, 8] yields the maximum thrill of 15. Example case 2: All elements are the same, so the thrill is 0. Example case 3: The subarray [-1, 7] yields the maximum thrill of 8.","solution":"def max_thrill(T, test_cases): results = [] for i in range(T): N, arr = test_cases[i] max_thrill = max(arr) - min(arr) results.append(max_thrill) return results"},{"question":"Beatrice has a set of n integers and a target sum k. She wants to determine the total number of distinct non-empty subsets of her set where the sum of the subset’s elements is exactly equal to k. Help Beatrice by writing an algorithm to find the number of such subsets. Input The first line of the input contains two integers n and k (1 ≤ n ≤ 20, 1 ≤ k ≤ 1000) — the number of elements in the set and the target sum. The second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100), where a_i is the i-th element of the set. Output Print one integer — the number of distinct non-empty subsets whose elements sum up to k. Examples Input 5 9 2 3 4 5 6 Output 3 Input 3 8 1 1 2 Output 0 Input 4 5 1 2 3 2 Output 3 Note In the first example, the subsets {3, 6}, {2, 3, 4}, and {4, 5} each have a sum of 9. In the second example, there are no combinations of the elements that sum up to 8. In the third example, the subsets {2, 3}, {3, 2}, and {1, 2, 2} each have a sum of 5. Note that the order within the subset does not matter, so {2, 3} is considered the same as {3, 2}.","solution":"import itertools def count_subsets_with_sum(n, k, elements): Returns the number of distinct non-empty subsets whose sum is exactly k. count = 0 # Generate all possible non-empty subsets for r in range(1, n+1): # Combination lengths from 1 to n for subset in itertools.combinations(elements, r): if sum(subset) == k: count += 1 return count"},{"question":"A city\'s water distribution network is represented as a graph with n nodes (numbered from 1 to n) and m edges. Each node represents a junction, and each edge represents a water pipe connecting two junctions. Each pipe has an associated cost, which is the price to transport water through that pipe. The municipal council wants to ensure that water can reach all junctions from any other junction (ensuring the graph is fully connected). To do this cost-effectively, they want to minimize the total cost of the pipes used. Your task is to determine the minimum cost needed to make the water distribution network fully connected. Input The input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The description of the test cases follows. The first line of each test case contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 2 × 10^5) — the number of nodes and edges in the graph. The next m lines each contain three integers u, v, and c (1 ≤ u, v ≤ n, 1 ≤ c ≤ 10^6) — representing an edge between nodes u and v with a cost c. The graph can contain multiple edges between the same nodes. Note that it is guaranteed that the sum of n over all test cases does not exceed 10^5 and the sum of m over all test cases does not exceed 2 × 10^5. Output For each test case, print the minimum cost required to make the water distribution network fully connected. If it is not possible to connect all nodes, print -1. Example Input 3 4 5 1 2 1 1 3 4 2 3 4 3 4 3 1 4 2 3 0 5 6 1 2 7 1 4 5 4 2 2 2 3 4 3 5 3 4 5 1 Output 6 -1 11 Explanation In the first test case, the minimum cost to connect all the nodes is obtained by selecting edges (1, 2, 1), (1, 4, 2), and (3, 4, 3), resulting in a total cost of 6. In the second test case, there are no edges, making it impossible to connect the nodes, so the output is -1. In the third test case, the minimum cost to connect all the nodes is by selecting edges (4, 5, 1), (4, 2, 2), (2, 3, 4), and (3, 5, 3), resulting in a total cost of 11.","solution":"def find_minimum_cost(t, test_cases): def find(parent, x): if parent[x] != x: parent[x] = find(parent, parent[x]) return parent[x] def union(parent, rank, x, y): rootX = find(parent, x) rootY = find(parent, y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 return True return False results = [] for n, m, edges in test_cases: if m == 0: results.append(-1 if n > 1 else 0) continue edges.sort(key=lambda x: x[2]) parent = list(range(n + 1)) rank = [0] * (n + 1) mst_cost = 0 edges_used = 0 for u, v, c in edges: if union(parent, rank, u, v): mst_cost += c edges_used += 1 if edges_used == n - 1: break if edges_used < n - 1: results.append(-1) else: results.append(mst_cost) return results"},{"question":"You are given a binary tree where each node contains an integer value. Your task is to find the maximum width of the binary tree. The width of a binary tree is defined as the maximum width amongst all levels. The width of one level is defined as the length between the end-nodes (the leftmost and rightmost non-empty nodes) of that level. Write a function that returns the maximum width of the given binary tree. Input The input consists of a single integer n (1 ≤ n ≤ 2000), followed by a series of node values in level order where \'-1\' represents a null node. The sequence begins with the value of the root node, then the values of the child nodes from left to right in each level. Output Return a single integer representing the maximum width of the binary tree. Example Input 7 1 3 2 5 3 -1 9 Output 4 Note In the example, the binary tree looks like this: ``` 1 / 3 2 / 5 3 9 ``` The maximum width is at the third level, which has 4 nodes from 5 to 9 (inclusive). Hence, the output is 4.","solution":"from collections import deque class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def build_tree(level_order_values): if not level_order_values: return None index = 0 root = TreeNode(level_order_values[index]) index += 1 queue = deque([root]) while index < len(level_order_values): node = queue.popleft() if index < len(level_order_values) and level_order_values[index] != -1: node.left = TreeNode(level_order_values[index]) queue.append(node.left) index += 1 if index < len(level_order_values) and level_order_values[index] != -1: node.right = TreeNode(level_order_values[index]) queue.append(node.right) index += 1 return root def width_of_binary_tree(root): if not root: return 0 max_width = 0 queue = deque([(root, 1)]) # (node, index) while queue: level_length = len(queue) _, first_index = queue[0] for i in range(level_length): node, index = queue.popleft() if node.left: queue.append((node.left, 2 * index)) if node.right: queue.append((node.right, 2 * index + 1)) # Calculate the width of the current level current_width = index - first_index + 1 max_width = max(max_width, current_width) return max_width def max_width_of_binary_tree(n, level_order_values): root = build_tree(level_order_values) return width_of_binary_tree(root)"},{"question":"A city has a grid-like street network represented by an n x m matrix. Some of the cells (streets) in this matrix are blocked, and others are open. Your task is to help people find if there is a path from the top-left corner of the grid to the bottom-right corner, moving only through open cells and only in the four possible directions (up, down, left, right). Write a program that, given the matrix of streets, determines if such a path exists. # Input - The first line contains two integers, n (2 ≤ n ≤ 1000) and m (2 ≤ m ≤ 1000) — the number of rows and columns of the grid, respectively. - The next n lines contain m characters each, representing the grid. \'.\' represents an open cell, and \'#\' represents a blocked cell. - The top-left corner (1,1) and the bottom-right corner (n,m) are always open cells (i.e., they are always \'.\'). # Output Print \\"YES\\" if there is a path from the top-left corner to the bottom-right corner. Otherwise, print \\"NO\\". # Examples Example 1: **Input:** ``` 4 4 .... .. .. .... ``` **Output:** ``` YES ``` Example 2: **Input:** ``` 4 4 ..#. .. .. .#.. ``` **Output:** ``` NO ``` Example 3: **Input:** ``` 3 3 .#. .#. .#. ``` **Output:** ``` NO ``` Example 4: **Input:** ``` 3 3 ... ... ... ``` **Output:** ``` YES ``` # Note Consider the provided examples: - In Example 1, there is a clear path: down, down, right, right, up, right. - In Example 2, there is no possible way to reach the bottom-right corner. - Example 3 demonstrates there is no way to get past the middle column. - Example 4 shows a clear path: right, right, down, down.","solution":"def is_path_exists(grid, n, m): Returns \\"YES\\" if there is a path from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1), otherwise returns \\"NO\\". from collections import deque # Directions for moving in the grid (up, down, left, right) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Check if the given position is valid and open def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' # Starting point start = (0, 0) # BFS queue queue = deque([start]) # Keeps track of visited positions visited = set([start]) while queue: x, y = queue.popleft() # If reached the bottom-right corner if (x, y) == (n-1, m-1): return \\"YES\\" # Explore all four possible directions for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"NO\\""},{"question":"In an online game, there\'s a feature to calculate the rank of players based on their scores. Each player\'s rank is determined not only by their score but also by the number of scores that are strictly greater than theirs. The player\'s rank is defined as 1 plus the number of scores greater than their own. You are given a list of scores for all players and need to determine the rank for each player based on the scores. Input The first line of the input contains a single integer n (1 ≤ n ≤ 1000), which represents the number of players. The second line contains n integers si (1 ≤ si ≤ 10000), representing the scores of the players. Output Print n integers, each representing the rank of the corresponding player based on the given scores. Examples Input 5 100 200 100 50 200 Output 3 1 3 5 1 Input 4 30 10 20 30 Output 1 4 3 1 Explanation In the first example, there are 5 players with scores [100, 200, 100, 50, 200]. The ranks are: - Player with score 100 has 2 scores greater than theirs (200, 200), so their rank is 3. - Player with score 200 has 0 scores greater than theirs, so their rank is 1. - Player with score 100 has 2 scores greater than theirs (200, 200), so their rank is 3. - Player with score 50 has 4 scores greater than theirs, so their rank is 5. - Player with score 200 has 0 scores greater than theirs, so their rank is 1. In the second example, there are 4 players with scores [30, 10, 20, 30]. The ranks are: - Player with score 30 has 0 scores greater than theirs, so their rank is 1. - Player with score 10 has 3 scores greater than theirs (30, 20, 30), so their rank is 4. - Player with score 20 has 2 scores greater than theirs (30, 30), so their rank is 3. - Player with score 30 has 0 scores greater than theirs, so their rank is 1.","solution":"def calculate_ranks(scores): Calculates the rank for each player based on their scores. Parameters: scores (list): List of integers representing scores of the players. Returns: list: Ranks of the players based on their scores. sorted_scores = sorted(scores, reverse=True) ranks = [] for score in scores: rank = sorted_scores.index(score) + 1 ranks.append(rank) return ranks"},{"question":"You are given an array of integers and a set of update and query operations to perform on it. Your task is to write a function that carries out these operations efficiently. Each update operation adds a value to an element in the array. Each query operation finds the maximum value within a specified subarray. * add(i, x): Add value x to the element at index i of the array. * max(l, r): Find the maximum value in the subarray from index l to index r (inclusive). Constraints * 1 leq n leq 100,000 (length of array) * 1 leq q leq 100,000 (number of operations) * 0 leq a_i leq 1,000,000,000 (initial value of each element in the array) * 0 leq x leq 1,000,000,000 (value to add in add operation) * 0 leq l leq r < n (indices for max operation) Input The input is given in the following format: n arr q op_1 op_2 : op_q The first line contains the length of the array n. The second line contains n space-separated integers representing the initial values of the array. The third line contains the number of operations q. Each of the following q lines represents an operation, which is either an update \\"add i x\\" or a query \\"max l r\\". Output For each query operation, print the maximum value within the specified subarray. Example Input 5 1 3 5 7 9 6 add 2 5 max 1 3 add 4 1 max 3 4 add 3 3 max 0 4 Output 7 8 10 In this example: 1. The initial array is [1, 3, 5, 7, 9]. 2. The first operation adds 5 to the element at index 2 resulting in the array [1, 3, 10, 7, 9]. 3. The second operation queries the maximum value in the subarray from index 1 to 3, which is 10. 4. And so forth for the remaining operations.","solution":"def array_operations(n, arr, operations): Perform a series of add and max operations on the array. Parameters: n : int The length of the array. arr : list of int The initial elements of the array. operations : list of str The operations to perform on the array. Returns: list of int The results of the max operations. results = [] for operation in operations: parts = operation.split() op = parts[0] if op == \\"add\\": i = int(parts[1]) x = int(parts[2]) arr[i] += x elif op == \\"max\\": l = int(parts[1]) r = int(parts[2]) results.append(max(arr[l:r+1])) return results"},{"question":"A large island nation consists of a network of cities connected by roads. The ruler of this nation wants to ensure that each city is prepared for any possible emergencies. A strategic plan needs to be developed so that each city can be reached from a designated central city in the shortest possible time. The designated central city will be the emergency response hub. The ruler wants you to help determine the optimal central city such that the maximum distance from the central city to all other cities is minimized. Input The input consists of: 1. An integer N (2 ≤ N ≤ 1000) indicating the number of cities. 2. An integer M (N-1 ≤ M ≤ 3000) indicating the number of roads. 3. M pairs of integers (u, v) and distances d (1 ≤ d ≤ 10,000) where 1 ≤ u, v ≤ N and u ≠ v, representing a road between city u and city v with distance d. Each road is bidirectional, meaning travel is allowed in both directions. Output Output a single integer, the index of the city that would make the optimal central city such that the maximum distance from it to any other city is minimized. If there are multiple cities satisfying this criterion, output the smallest index. Examples Input 5 5 1 2 3 1 3 2 2 4 4 3 4 1 4 5 2 Output 4 Input 7 8 1 2 5 1 3 2 3 4 1 3 5 4 2 4 3 2 6 6 5 7 2 6 7 1 Output 3 Input 3 3 1 2 2 2 3 3 1 3 1 Output 1 Explanation In the first example, if city 4 is chosen as the central city, the maximum distance to any other city is minimized compared to any other choices for the central city. For instance, from city 4 to city 1 via city 3 is a distance of 3. This problem tests your ability to apply graph algorithms, specifically identifying the central node in a graph that minimizes the maximum distance to any other node, typically solved using variations of Dijkstra\'s or Floyd-Warshall algorithms.","solution":"import heapq def compute_distances(N, roads, start): distances = [float(\'inf\')] * N distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, u = heapq.heappop(priority_queue) if current_distance > distances[u]: continue for v, weight in roads[u]: distance = current_distance + weight if distance < distances[v]: distances[v] = distance heapq.heappush(priority_queue, (distance, v)) return distances def find_optimal_hub_city(N, M, city_roads): # Create graph representation roads = [[] for _ in range(N)] for u, v, d in city_roads: roads[u-1].append((v-1, d)) roads[v-1].append((u-1, d)) min_max_distance = float(\'inf\') optimal_city = -1 # Compute maximum distance from each city for city in range(N): distances = compute_distances(N, roads, city) max_distance = max(distances) if max_distance < min_max_distance: min_max_distance = max_distance optimal_city = city elif max_distance == min_max_distance: optimal_city = min(optimal_city, city) return optimal_city + 1 # converting back to 1-based index"},{"question":"[Archivist\'s Task - Rebuilding the Nexus](https://codeforces.com/problemset/problem/20/B) After centuries of technological advancement, the Nexus - the central hub managing the data streams of the Archivist\'s domain - has become unstable. The degradation coordinates pinpoint crucial junctions where the repairs need to be made. The Nexus can be abstracted as a tree, a connected acyclic graph, where junctions are vertices and data streams are edges connecting them. Each data stream has a certain amount of information passing through, represented by the weight of the edges. The archiving team needs to reconnect these crucial junctions while minimizing the total weight of the reconnected data streams, ensuring the integrity and stability of the Nexus. You, a highly skilled coder, are tasked with determining the minimum total weight required to reconnect the crucial junctions, ensuring the Nexus becomes stable again. Input The first line contains an integer n (1 ≤ n ≤ 1,000) — the number of crucial junctions. The following n-1 lines each contain three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6), representing that there is a data stream between junctions u and v with weight w. Output Print a single integer, denoting the minimum total weight required to ensure all the crucial junctions are reconnected. Examples Input 4 1 2 1 1 3 2 2 4 4 Output 7 Input 5 1 2 3 1 3 2 2 4 4 3 5 1 Output 10 Note For the first example, the minimal weight set of reconnected data streams ensures all crucial junctions are connected: * The weight of the data stream between junction 1 and 2 is 1. * The weight of the data stream between junction 1 and 3 is 2. * The weight of the data stream between junction 2 and 4 is 4. The total minimal weight to ensure all crucial junctions are reconnected is 1 + 2 + 4 = 7.","solution":"def minimum_spanning_tree(n, edges): Returns the minimum total weight required to reconnect all the crucial junctions using Kruskal\'s algorithm. n: Number of crucial junctions. edges: List of tuples [(u, v, w), ...] where each tuple represents an edge with vertices u, v and weight w. def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 edges.sort(key=lambda x: x[2]) parent = [i for i in range(n)] rank = [0] * n mst_weight = 0 for u, v, w in edges: u -= 1 v -= 1 if find(parent, u) != find(parent, v): union(parent, rank, u, v) mst_weight += w return mst_weight"},{"question":"You are developing a string manipulation tool and need to implement a functionality to remove duplicate characters from given strings. The tool should ensure that the characters appear in the order of their first occurrence. Given a string s, remove all duplicate characters so that every character appears only once. The output string should retain the original order of characters as they first appeared in the input string. Implement a function `remove_duplicates` that accepts a single argument: - `s` (1 ≤ |s| ≤ 200), a string containing only lowercase English letters. The function should return a string with all the duplicate characters removed while retaining the original order of characters as they first appeared. Input - A single string s containing only lowercase English letters. Output - A string with all duplicate characters removed. Example Input ``` abcabc ``` Output ``` abc ``` Input ``` programming ``` Output ``` progamin ``` Input ``` aabbcc ``` Output ``` abc ``` Note In the first example, the input string is `abcabc`. The characters `a`, `b`, and `c` appear twice, but only the first occurrence of each character should be retained, resulting in the output `abc`. In the second example, the input string is `programming`. After removing duplicate characters and retaining the original order, the output string is `progamin`. In the third example, the input string is `aabbcc`. After removing duplicate characters and retaining the original order, the output string is `abc`.","solution":"def remove_duplicates(s): Removes duplicate characters from the string s and retains the original order of characters. :param s: A string containing only lowercase English letters. :return: A string with all duplicate characters removed, retaining the original order. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return \'\'.join(result)"},{"question":"Bob is organizing a music festival and wants to arrange the stages in a way that maximizes the thrill for the audience. There are (n + 1) stages numbered from 0 to n. Each stage i has a thrill level given by ti. The thrill level of the stage 0 is guaranteed to be 0 (t0 = 0). The thrill level between each pair of consecutive stages can be calculated as the difference between their thrill levels. The total thrill of a path from stage 0 to stage n is the sum of individual thrills between each pair of consecutive stages in this path. However, if the thrill of moving from stage i to stage i+1 is negative, it is considered as 0 for that move. Bob wants to maximize the thrill of the entire path. To enhance the thrill, Bob can spend money to increase the thrill level of each stage by 1 unit. Each increase in thrill level by 1 unit for any stage costs 1 dollar. Bob has an unlimited budget, but he wants to know the minimum amount of money he needs to spend in order to achieve the maximum total thrill. Input: The first line contains an integer n (1 ≤ n ≤ 10^5). The second line contains n integers t1, t2, ..., tn (0 ≤ ti ≤ 10^5) representing the thrill levels of the stages. Output: Print a single number representing the minimum number of dollars needed to spend to maximize the thrill of the path from stage 0 to stage n. Examples Input 5 2 3 1 5 4 Output 3 Input 3 0 2 2 Output 0 Note In the first sample, Bob can spend 3 dollars to increase the thrill levels of stages 2 and 4 by 1 unit each (making their thrill levels 2 and 5 respectively). Then the maximum thrill of the path will be 3 + 2 + 4, which is the highest possible thrill path. In the second sample, there is no need to spend any money as the thrill of the path (2 + 2) is already maximized.","solution":"def min_cost_to_maximize_thrill(n, thrill_levels): min_cost = 0 for i in range(1, n): if thrill_levels[i] < thrill_levels[i-1]: min_cost += (thrill_levels[i-1] - thrill_levels[i]) thrill_levels[i] = thrill_levels[i-1] return min_cost"},{"question":"You are given an integer `n` representing the number of steps in a staircase. Each time you can either climb 1 or 2 steps. Write a function `staircase_ways(n)` that returns the number of distinct ways to reach the top. # Example Input 4 Output 5 # Explanation With 4 steps, the distinct ways to reach the top are: 1. 1 step + 1 step + 1 step + 1 step 2. 1 step + 1 step + 2 steps 3. 1 step + 2 steps + 1 step 4. 2 steps + 1 step + 1 step 5. 2 steps + 2 steps Thus, there are 5 ways to reach the top.","solution":"def staircase_ways(n): Returns the number of distinct ways to reach the top of a staircase with n steps. Each time you can either climb 1 or 2 steps. :param n: Integer, number of steps in the staircase. :return: Integer, number of distinct ways to reach the top. if n == 0: return 0 if n == 1: return 1 if n == 2: return 2 prev1, prev2 = 1, 2 for i in range(3, n + 1): curr = prev1 + prev2 prev1, prev2 = prev2, curr return curr"},{"question":"Background Mrs. B has a garden with several rows of flower beds. To ensure the garden looks beautiful throughout the year, she wants to plant flowers in such a way that no two rows have flower beds with the same exact sequence of flower types. Each flower type is represented by a unique integer. Mrs. B needs to design a method to determine if it\'s possible to plant flowers according to this rule. Problem You are given a garden with R rows and C columns (flower beds in each row). Each row should contain a sequence of flower types. Your task is to determine if it’s possible to plant flowers so that no two rows contain the same sequence of flower types, considering the constraint that each flower type in any row must appear at least once and at most once. Input The input is given as follows: R C The first line contains two integers, R and C, indicating the number of rows and the number of columns (flower beds in each row). Output Output \\"YES\\" if it is possible to plant the flowers according to the specified rule, otherwise output \\"NO\\". Constraints - 1 ≤ R, C ≤ 100 - Flower types are represented by distinct integers. Examples Input 3 3 Output YES Input 2 3 Output YES Input 1 2 Output YES Input 4 3 Output NO","solution":"def can_plant_flowers(R, C): Determine if we can plant flowers such that no two rows have the same sequence of flower types. Returns \\"YES\\" if possible, otherwise \\"NO\\". # As each flower types must appear at least once and at most once in each row, # the condition can only be satisfied if C >= R. This is because if C < R, # it\'s impossible to have different sequences for every row since we don\'t have # enough columns to ensure uniqueness for each row. if C >= R: return \\"YES\\" else: return \\"NO\\""},{"question":"Alex is an avid hiker and a collector of unique hiking sticks. He recently acquired a set of hiking sticks that vary in length. As an outdoor enthusiast, he decided to arrange these hiking sticks to create the longest possible continuous path such that no two consecutive sticks in the path have the same length. Alex can choose any subset of the sticks but he wants to maximize the total length of the path. Given the lengths of the sticks that Alex owns, determine the maximum possible length of the path with the above conditions. Input: - The first line contains an integer n (1 ≤ n ≤ 100) — the number of hiking sticks. - The second line contains n integers l1, l2, ..., ln (1 ≤ li ≤ 100) — the lengths of the hiking sticks. Output: - Print a single integer — the maximum possible length of the path. Examples: Input: 5 4 7 2 4 5 Output: 18 Input: 3 3 3 3 Output: 3 Note: In the first example, Alex can select sticks with lengths: 4, 7, 2, and 5 to create the path of length 18. He skips one of the sticks of length 4 to ensure no two consecutive sticks have the same length. In the second sample, he can only use one of the sticks to create the path since all the lengths are the same.","solution":"def max_path_length(n, lengths): Returns the maximum possible length of the path such that no two consecutive sticks have the same length. from collections import Counter # Count the occurrences of each stick length length_count = Counter(lengths) # Create a list of unique stick lengths sorted by length unique_lengths = sorted(length_count.keys()) # Construct the path using the sorted unique lengths max_length = 0 for length in unique_lengths: max_length += length return max_length"},{"question":"Problem statement You are given an array of integers and a target integer sum. Your task is to determine if there are two distinct indices i and j in the array such that arr[i] + arr[j] equals the target sum. If such indices exist, return them as a pair (i, j). If no such indices exist, return -1. The returned indices should be in the format where the smaller index appears first. If there are multiple pairs satisfying the condition, return the pair with the smallest first index; if there are still ties, return the one with the smallest second index. Constraints: * 2 ≤ array length ≤ 10^5 * -10^9 ≤ array elements ≤ 10^9 * -10^9 ≤ target sum ≤ 10^9 Input * An integer n, the length of the array. * An array of n integers. * An integer target, the target sum. Output * A pair of integers (i, j), where 0 ≤ i < j < n, such that arr[i] + arr[j] = target. * If no such pair exists, print -1. Example Input 5 2 7 11 15 1 9 Output 0 1 Input 3 1 2 3 6 Output -1","solution":"def find_pair_with_target_sum(arr, target): Returns a pair of distinct indices (i, j) such that arr[i] + arr[j] = target. If no such pair exists, return -1. :param arr: List of integers :param target: Integer target sum :return: Tuple of two integers or -1 num_to_index = {} for i, num in enumerate(arr): complement = target - num if complement in num_to_index: return (num_to_index[complement], i) num_to_index[num] = i return -1"},{"question":"You are given a list of strings representing mathematical expressions composed of addition, subtraction, multiplication, division, and parentheses. Your task is to sort these expressions based on their evaluated results in ascending order. If two expressions evaluate to the same result, maintain their original order from the input. Input format: The first line contains an integer T representing the number of test cases. Each test case consists of multiple lines. The first line of each test case contains an integer N, the number of expressions. The following N lines each contain a single mathematical expression consisting of integers and operators. Output format: For each test case, output N lines with the expressions sorted by their evaluated result. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 Each expression is a valid mathematical expression composed of integers and operators (+, -, *, /, and parentheses). SAMPLE INPUT 2 3 1 + 2 4 * 5 3 - 2 2 1 + 1 5 / 5 SAMPLE OUTPUT 1 + 2 3 - 2 4 * 5 5 / 5 1 + 1 Explanation In the first test case, the expressions are evaluated as follows: - \\"1 + 2\\" evaluates to 3 - \\"3 - 2\\" evaluates to 1 - \\"4 * 5\\" evaluates to 20 So the sorted order is: 1 + 2 3 - 2 4 * 5 In the second test case: - \\"1 + 1\\" evaluates to 2 - \\"5 / 5\\" evaluates to 1 So the sorted order is: 5 / 5 1 + 1","solution":"def evaluate_expression(expression): Evaluates the given mathematical expression and returns the result. return eval(expression) def sort_expressions(expressions): Sorts the given list of expressions based on their evaluated result. If two expressions evaluate to the same value, their original order is preserved. return sorted(expressions, key=lambda expr: (evaluate_expression(expr), expressions.index(expr))) def sort_expressions_in_test_cases(test_cases): Sorts expressions in multiple test cases and returns the sorted results. Each test_case is a list, where the first element is the number of expressions N and the following N elements are the expressions. sorted_cases = [] for case in test_cases: N = case[0] expressions = case[1:] sorted_expressions = sort_expressions(expressions) sorted_cases.append(sorted_expressions) return sorted_cases"},{"question":"You are given a list of integers that represents the score obtained by a student in successive attempts at a particular exam. Your task is to determine the longest subsequence such that the scores are strictly increasing. Input The first line contains the number of test cases T (1 ≤ T ≤ 5). Each test case consists of two lines. The first line contains an integer N (1 ≤ N ≤ 1000), indicating the number of scores. The second line contains N integers separated by spaces, where each integer represents the score (0 ≤ score ≤ 10000). Output For each test case, print the case number, followed by a colon, followed by a single space and the length of the longest increasing subsequence of scores. Sample Input 2 8 10 22 9 33 21 50 41 60 6 3 10 2 1 20 4 Sample Output Case 1: 5 Case 2: 3","solution":"def longest_increasing_subsequence(scores): Returns the length of the longest increasing subsequence of scores. if not scores: return 0 n = len(scores) lis = [1] * n for i in range(1, n): for j in range(i): if scores[i] > scores[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 return max(lis) def process_test_cases(test_cases): results = [] for case_num, (n, scores) in enumerate(test_cases, 1): length_of_lis = longest_increasing_subsequence(scores) results.append(f\\"Case {case_num}: {length_of_lis}\\") return results"},{"question":"Chef loves to eat candies and he has a special formula to determine how many candies he should eat each day. The formula is simple: He will eat more candies on each successive day compared to the previous day, and the number of candies he eats on the n-th day follows the sequence a1, a2, a3, ..., an, where an is the number of candies eaten on the n-th day. Chef also has a stash of candies, and for every n days, he wants to know the total number of candies he will have eaten by the end of the n-th day. Given the sequence of numbers which represents the candies eaten each day, help Chef calculate the total number of candies he will have eaten after each day up to day n. Input The first line contains an integer n (1 ≤ n ≤ 1000), the number of days. The second line contains n integers a1, a2, ... an (1 ≤ ai ≤ 1000), where ai represents the number of candies eaten on the i-th day. Output Print n integers where the i-th integer represents the total number of candies eaten by Chef from day 1 to day i. Example Input 5 1 2 3 4 5 Output 1 3 6 10 15 Input 3 4 1 4 Output 4 5 9 Note In the first sample, after day 1 Chef has eaten 1 candy, after day 2 he has eaten 1+2=3 candies, after day 3 he has eaten 1+2+3=6 candies, and so on. In the second sample, after day 1 Chef has eaten 4 candies, after day 2 he has eaten 4+1=5 candies, after day 3 he has eaten 4+1+4=9 candies.","solution":"def total_candies_per_day(n, candies): Returns a list of cumulative candies eaten by Chef up to each day. :param n: Number of days (1 ≤ n ≤ 1000) :param candies: List of integers where candies[i] represents the number of candies eaten on day i (1 ≤ candies[i] ≤ 1000) :return: List of integers where the i-th integer represents the total number of candies eaten from day 1 to day i cumulative_candies = [] total = 0 for day_candies in candies: total += day_candies cumulative_candies.append(total) return cumulative_candies"},{"question":"You are given strings s1 and s2. Determine the minimum number of operations required to convert s1 to s2. An operation can be one of three types: 1. Insert a character 2. Delete a character 3. Substitute a character Input: The first line contains string s1 (1 ≤ |s1| ≤ 1000). The second line contains string s2 (1 ≤ |s2| ≤ 1000). Output: Print a single integer — the minimum number of operations required to convert s1 to s2. Examples: Input: kitten sitting Output: 3 Input: flaw lawn Output: 2 Input: gumbo gambol Output: 2","solution":"def min_operations_convert(s1, s2): Returns the minimum number of operations required to convert s1 to s2. An operation can be an insertion, deletion, or substitution of a character. len_s1, len_s2 = len(s1), len(s2) dp = [[0] * (len_s2 + 1) for _ in range(len_s1 + 1)] for i in range(len_s1 + 1): for j in range(len_s2 + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], # Delete dp[i][j - 1], # Insert dp[i - 1][j - 1]) # Substitute return dp[len_s1][len_s2]"},{"question":"Mr. Johnson is opening a new stationery store and he wants to categorize all his products systematically so that it becomes easier for him to find and manage his inventory. Each product has an associated category it belongs to. Mr. Johnson wants to generate a summary report that shows the initial letter of each product category along with the count of categories that start with that letter. For example, if there are 5 categories: \\"Books\\", \\"Bags\\", \\"Pens\\", \\"Erasers\\", and \\"Envelopes\\", the summary report should display that there are 2 categories that start with \'B\', 2 categories that start with \'E\', and 1 category that starts with \'P\'. Create a program that takes the number of categories and the category names as input, and then outputs the summary report. Input - The number of categories n (1 ≤ n ≤ 10,000). - Followed by n lines, each containing a single category name consisting of alphabetical characters. Output - A summary report in alphabetical order of the initial letters, with each line showing an initial letter followed by the count of categories starting with that letter. Example Input: 5 Books Bags Pens Erasers Envelopes Output: B 2 E 2 P 1 Note: - The categories are case-sensitive. - Ensure that the output maintains the order of the initial letters alphabetically.","solution":"def categorize_products(n, categories): Returns a summary report of categories starting letters and their counts. Args: n (int): number of categories categories (list of str): list of category names Returns: list of str: summary report in alphabetical order from collections import defaultdict count_dict = defaultdict(int) for category in categories: initial = category[0] count_dict[initial] += 1 sorted_counts = sorted(count_dict.items()) result = [f\\"{char} {count}\\" for char, count in sorted_counts] return result"},{"question":"You are given a list of integers, and you need to determine if there exists a subset of these integers that sum up to zero. If such a subset exists, output \\"YES\\" and an example subset. Otherwise, output \\"NO\\". Input The first line contains one integer n (1 ≤ n ≤ 100) — the number of integers in the list. The second line contains n integers separated by spaces, where each integer is between -10^6 and 10^6. Output If there exists a subset of the given list whose sum is zero, print \\"YES\\" and a subset in the next line. The subset should be printed as space-separated values in a single line. If there\'s no such subset, print \\"NO\\". Examples Input 5 3 1 -4 2 6 Output YES 3 1 -4 Input 3 5 7 9 Output NO Input 6 -1 2 3 -5 8 -6 Output YES -1 -5 6","solution":"def find_zero_sum_subset(arr): Determines if there exists a subset of the given list that sums up to zero. Args: arr: List of integers Returns: \\"YES\\" and a subset producing the zero sum if such a subset exists, otherwise \\"NO\\" n = len(arr) subset_sums = {0: []} # Dictionary to store the sum => subset for num in arr: new_sums = {} for curr_sum, sub in subset_sums.items(): new_sum = curr_sum + num new_subset = sub + [num] if new_sum == 0: return \\"YES\\", new_subset new_sums[new_sum] = new_subset subset_sums.update(new_sums) return \\"NO\\", [] # Example usage n = 5 arr = [3, 1, -4, 2, 6] result = find_zero_sum_subset(arr) print(result)"},{"question":"Emma is participating in a marathon that spans across a large city. The marathon path is represented as a string of characters where each character represents a section of the path. The different characters indicate different properties of each section as follows: - \'R\': Regular road - \'S\': Slippery road - \'U\': Uphill road - \'D\': Downhill road Emma starts at the beginning of the path (left-most character of the string) and wants to finish at the end of the path (right-most character of the string). However, Emma has a limited amount of stamina that gets consumed as she runs through the sections with different properties as follows: - Regular road (R) consumes 1 unit of stamina. - Slippery road (S) consumes 2 units of stamina. - Uphill road (U) consumes 3 units of stamina. - Downhill road (D) helps Emma regain 1 unit of stamina. Emma starts the marathon with a given amount of stamina, and she wants to determine if she can successfully complete the marathon path without her stamina falling below zero at any point. Write a program to help Emma determine if she can complete the marathon based on the initial stamina provided. # Input The input consists of two lines: - The first line contains an integer `N` (0 ≤ N ≤ 100), the initial stamina Emma starts with. - The second line contains a string of characters representing the marathon path, consisting of characters \'R\', \'S\', \'U\', and \'D\'. The length of the string is at most 100. # Output The output should be a single line containing `\\"YES\\"` if Emma can complete the marathon, or `\\"NO\\"` otherwise. # Examples Example 1 **Input** ``` 6 RUSDDR ``` **Output** ``` YES ``` Example 2 **Input** ``` 5 RUUUD ``` **Output** ``` NO ``` Example 3 **Input** ``` 10 RSDUD ``` **Output** ``` YES ``` Example 4 **Input** ``` 0 R ``` **Output** ``` NO ``` # Note In the first example, Emma\'s stamina changes as follows: `6 -> 5 (R) -> 2 (U) -> -1 (S) -> 2 (D) -> 2 (D) -> 1 (R)`. Hence, the answer is `\\"YES\\"` since her stamina does not drop below zero. In the second example, her stamina changes as follows: `5 -> 4 (R) -> 1 (U) -> -2 (U)`. When it drops to -2, Emma cannot complete the marathon, so the answer is `\\"NO\\"`.","solution":"def can_complete_marathon(initial_stamina, path): Determines if Emma can complete the marathon given the initial stamina and path. Parameters: initial_stamina (int): Initial stamina Emma starts with. path (str): String representing the marathon path. Returns: str: \\"YES\\" if Emma can complete the marathon, \\"NO\\" otherwise. stamina = initial_stamina for section in path: if section == \'R\': stamina -= 1 elif section == \'S\': stamina -= 2 elif section == \'U\': stamina -= 3 elif section == \'D\': stamina += 1 if stamina < 0: return \\"NO\\" return \\"YES\\""},{"question":"You are given a list of integers. Your task is to find the longest contiguous subarray such that the absolute difference between any two elements in this subarray is less than or equal to a given integer X. Input: The first line contains two integers N and X, where N is the number of elements in the list, and X is the maximum allowed absolute difference between any two elements in the subarray. The second line contains N space-separated integers representing the elements of the list. Output: Output a single integer, the length of the longest contiguous subarray that satisfies the condition. Constraints: 1 ≤ N ≤ 10000 0 ≤ X ≤ 100000 -100000 ≤ A[i] ≤ 100000 SAMPLE INPUT 6 2 1 3 2 1 4 6 SAMPLE OUTPUT 4","solution":"def longest_subarray_with_max_diff(nums, x): Returns the length of the longest contiguous subarray such that the absolute difference between any two elements in this subarray is less than or equal to x. n = len(nums) if n == 0: return 0 left = 0 max_len = 1 for right in range(1, n): while max(nums[left:right + 1]) - min(nums[left:right + 1]) > x: left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"Grace is a student who loves practicing coding. She has set aside a specific number of hours each week for coding practice. Each day she practices, she chooses a problem set that takes a fixed amount of time to complete. Grace has set aside t hours in total for coding practice this week. She has a collection of n problem sets, and it takes ai hours to complete the ith problem set. Grace wants to complete as many problem sets as possible using the given hours. Your task is to determine the maximum number of problem sets she can complete within the total hours available. Input The first line contains two integers n and t (1 ≤ n ≤ 100, 1 ≤ t ≤ 1000) — the number of problem sets and the total hours Grace has for practice. The second line contains n integers, where the ith integer ai (1 ≤ ai ≤ 100) denotes the number of hours needed to complete the ith problem set. Output Print one integer, the maximum number of problem sets Grace can complete within the total hours available. Examples Input 5 10 2 3 4 5 6 Output 3 Input 3 5 5 5 1 Output 1 Note In the first sample, Grace has 10 hours available and there are 5 problem sets requiring 2, 3, 4, 5, and 6 hours respectively. Grace can choose the first three problem sets (2 + 3 + 4 = 9 hours in total) and still have 1 hour left. Therefore, the answer is 3. In the second sample, Grace can only complete one problem set because each problem set takes exactly 5 hours and she has only 5 hours available. Therefore, the answer is 1.","solution":"def max_problem_sets(n, t, problem_durations): problem_durations.sort() total_hours = 0 count = 0 for duration in problem_durations: if total_hours + duration > t: break total_hours += duration count += 1 return count"},{"question":"Alice loves solving jigsaw puzzles. She has recently gotten a set of several pieces and a board where the puzzle needs to be assembled. However, this is no ordinary jigsaw puzzle; each piece is a rectangle, and the board is a larger rectangle. Alice wants to know if she can place all the small rectangular pieces on the board without overlapping and without rotating the pieces. For simplicity, we\'ll assume that the bottom-left corner of both the board and the pieces is at coordinate (0, 0). Input The first line contains two integers W and H (1 ≤ W, H ≤ 10^9) — the width and height of the board. The second line contains a single integer n (1 ≤ n ≤ 20) — the number of rectangular pieces. Each of the next n lines contains two integers w_i and h_i (1 ≤ w_i, h_i ≤ 10^9) — the width and height of the i-th rectangular piece. Output Output \\"YES\\" if it is possible to place all pieces on the board without overlap and without rotating them, otherwise print \\"NO\\". Examples Input 10 10 3 4 5 3 4 2 2 Output YES Input 6 7 2 5 8 3 2 Output NO Note In the first example, it is possible to arrange the pieces as follows: - The first piece (4, 5) and the second piece (3, 4) next to each other (taking 4 + 3 = 7 units in width and 5 units in height) - The third piece (2, 2) can fit in the remaining area of the board (taking 2 units in width and 2 units in height). In the second example, one of the pieces (5, 8) is too large to fit on the board.","solution":"def can_place_all_pieces(W, H, pieces): total_area_pieces = sum(w * h for w, h in pieces) total_area_board = W * H return \\"YES\\" if total_area_pieces <= total_area_board else \\"NO\\""},{"question":"Given a string of parentheses, write a function to find the minimum number of parentheses to be added to make the string valid. A string of parentheses is considered valid if every opening parenthesis has a corresponding closing parenthesis and the pairs of parentheses are properly nested. # Function Signature ```python def minAddToMakeValid(s: str) -> int: ``` # Input - `s` (1 ≤ len(s) ≤ 1000): a string consisting of only \'(\' and \')\'. # Output - An integer representing the minimum number of parentheses to be added to make the string valid. # Examples Example 1 ```python s = \\"())\\" print(minAddToMakeValid(s)) # Output: 1 ``` Example 2 ```python s = \\"(((\\" print(minAddToMakeValid(s)) # Output: 3 ``` # Constraints - The input string `s` contains only characters \'(\' and \')\'. - The length of the string `s` is between 1 and 1000. # Explanation 1. In the first example, there is one unclosed opening parenthesis and one unmatched closing parenthesis, so we need to add one closing parenthesis to make it valid, resulting in \\"())(\\". 2. In the second example, there are three opening parentheses and no closing ones, so we need to add three closing parentheses to make it valid, resulting in \\"((()))\\".","solution":"def minAddToMakeValid(s: str) -> int: open_count = 0 add_count = 0 for char in s: if char == \'(\': open_count += 1 else: if open_count > 0: open_count -= 1 else: add_count += 1 return add_count + open_count"},{"question":"In a certain country, tall buildings have been popping up everywhere and people have started facing issues due to variable sunlight. To tackle this, a new initiative was launched where they want to calculate the maximum \\"sunlight exposure length\\" of a specific building. The sunlight exposure length of a building is defined as the span from which direct sunlight hits the roof without obstruction by taller buildings to the west of it. You are given an array of integers where each integer represents the height of a building in a row of buildings oriented from west to east. Your task is to create a function that computes the maximum sunlight exposure length for each building. Input The input consists of an integer n (1 ≤ n ≤ 100000) — the number of buildings, followed by a list of n integers A (1 ≤ A[i] ≤ 109) — the heights of the buildings. Output Output a single line with n integers — the maximum sunlight exposure lengths for each of the buildings. Examples Input 6 6 2 4 3 7 1 Output 1 1 2 1 5 1 Input 3 10 6 15 Output 1 1 3 Explanation For the first example: - Building 1 (height = 6) has no taller building to its west and so the exposure length is 1. - Building 2 (height = 2) has no taller building to its west and so the exposure length is 1. - Building 3 (height = 4) has building 1 to its west which is taller, making the maximum exposure length 2. - Building 4 (height = 3) is blocked by Building 3 and Building 1, so the exposure length is 1. - Building 5 (height = 7) has no taller building to its west for 5 buildings, so the exposure length is 5. - Building 6 (height = 1) has no taller building to its west, so the exposure length is 1. For the second example: - Building 1 (height = 10) has no taller building to its west and so the exposure length is 1. - Building 2 (height = 6) has no taller building to its west and so the exposure length is 1. - Building 3 (height = 15) has no taller building to its west for 3 buildings, so the exposure length is 3.","solution":"def sunlight_exposure(buildings): Calculate the maximum sunlight exposure length for each building. Parameters: buildings (list of int): Heights of the buildings in a row oriented from west to east Returns: list of int: Maximum sunlight exposure lengths for each building n = len(buildings) exposure_length = [0] * n for i in range(n): exposure_length[i] = 1 for j in range(i-1, -1, -1): if buildings[j] > buildings[i]: break exposure_length[i] += 1 return exposure_length"},{"question":"You are managing a group of developers and want to track their task completion times. Each developer\'s tasks for the day are recorded with start and end times. You suspect that some tasks might overlap, leading to inefficient use of time. Your goal is to determine the total amount of time spent on tasks, considering that overlapping tasks should not count more than once. For simplicity, assume that the smallest unit of time is one minute, and that start and end times are given in the format \\"HH:MM\\" on a 24-hour clock. Write a function that takes in a list of tuples, each containing two strings representing the start and end times of tasks. The function should return the total amount of time spent on tasks in minutes. # Constraints - The start and end times are passed as a list of tuples, where each tuple contains two strings (`start_time`, `end_time`). - The start and end times will always be valid and in \\"HH:MM\\" format. - The end time is always greater than the start time. - The list can contain up to 1,000 tasks. # Input - A list of tuples, where each tuple contains two strings representing start and end times of tasks. # Output - The total amount of time spent on tasks, in minutes, considering overlaps. # Example Input [(“09:00”, “10:30”), (“10:00”, “11:00”), (“11:30”, “12:00”)] Output 150 # Explanation The first task is from 09:00 to 10:30 (90 minutes), the second task is from 10:00 to 11:00 (considering the overlap with the first task, it adds only 30 minutes), and the third task is from 11:30 to 12:00 (30 minutes). Total time is thus 90 (from first) + 30 (from second) + 30 (from third) = 150 minutes.","solution":"def parse_time(time_str): Parse a time string \\"HH:MM\\" into a number of minutes since midnight. hours, minutes = map(int, time_str.split(\':\')) return hours * 60 + minutes def total_task_time(tasks): Calculate the total time spent on tasks, considering overlaps. # Convert task times to minutes from midnight and sort by start time. intervals = [(parse_time(start), parse_time(end)) for start, end in tasks] intervals.sort() total_time = 0 current_end = 0 for start, end in intervals: if start >= current_end: total_time += end - start current_end = end else: if end > current_end: total_time += end - current_end current_end = end return total_time"},{"question":"Given a set of files and a list of backup operations, your task is to determine the final version of each file after applying all the operations. Each file can have multiple versions, and each operation specifies which version of a file should be used to create a new version with a unique identifier. Input The input consists of several datasets. Each dataset is formatted as follows. The first line of each dataset contains: - Two integers `N` and `M`, where `N` (1 <= N <= 10^4) is the number of files and `M` (1 <= M <= 10^5) is the number of backup operations. The next `N` lines contain the descriptions of the files: - The i-th line of these N lines contains a string `bi` representing the initial version identifier of the i-th file. The next `M` lines describe the backup operations, each formatted as: - Two integers `f` and `v`, and a string `new_v`, indicating that file `f` should use version `v` to create a new version identified by `new_v`. Output For each dataset, output one line containing the final versions of all files, separated by a space, in the order of their file numbers. Example Input 3 4 ver1 ver2 ver3 1 ver1 ver1.1 2 ver2 ver2.1 3 ver3 ver3.1 1 ver1.1 ver1.2 2 3 init_a init_b 1 init_a init_a.1 2 init_b init_b.1 1 init_a.1 init_a.2 Output ver1.2 ver2.1 ver3.1 init_a.2 init_b.1 Explanation In the first dataset: - File 1 starts with version `ver1`, then gets `ver1.1`, and finally `ver1.2`. - File 2 starts with version `ver2` and gets `ver2.1`. - File 3 starts with version `ver3` and gets `ver3.1`. In the second dataset: - File 1 starts with version `init_a`, then gets `init_a.1`, and finally `init_a.2`. - File 2 starts with version `init_b` and gets `init_b.1`.","solution":"def final_versions(N, M, initial_versions, operations): Determines the final version of each file after applying all the operations. Parameters: - N: int, number of files. - M: int, number of backup operations. - initial_versions: list of str, initial version identifiers of the files. - operations: list of tuples, each tuple contains (f, v, new_v) representing a backup operation. Returns: - list of str, final version identifiers of each file. # Dictionary to keep track of the current version of each file files = {i+1: initial_versions[i] for i in range(N)} # Apply each operation for f, v, new_v in operations: if files[f] == v: files[f] = new_v # Return the final versions in the order of file numbers return [files[i+1] for i in range(N)]"},{"question":"You are given a list of intervals represented by start and end times. Each interval represents a meeting time. Your task is to find the minimum number of meeting rooms required to accommodate all meetings. If a meeting ends at time x and another meeting starts at time x, this requires two separate rooms. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of intervals. Each of the next n lines contains two integers start and end (0 ≤ start < end ≤ 10^6) — the start and end times of an interval. Output Output a single integer — the minimum number of meeting rooms required. Example Input 3 0 30 5 10 15 20 Output 2 Note In the example, [0, 30] and [5, 10] overlap, so they need two rooms. One interval [15, 20] can share the room with the interval [5, 10] after it ends, so a total of two rooms is required.","solution":"from heapq import heappush, heappop def min_meeting_rooms(intervals): Finds the minimum number of meeting rooms required to accommodate all meetings. :param intervals: List of tuples where each tuple contains two integers representing start and end time of a meeting. :return: Integer representing the minimum number of meeting rooms required. if not intervals: return 0 # Sort intervals by start time intervals.sort(key=lambda x: x[0]) # Use a min-heap to keep track of end times of meetings heap = [] # Iterate over sorted intervals for interval in intervals: start, end = interval # If the heap is not empty and the earliest meeting to end is before the current meeting starts, # we can reuse the room (i.e., remove the top of the heap) if heap and heap[0] <= start: heappop(heap) # Add the current meeting\'s end time to the heap heappush(heap, end) # The size of the heap is the number of rooms required return len(heap)"},{"question":"Write a program to determine if a scrambled-up version of a string can form a palindrome. Input: First line contains N - No. of Test cases. Each Test case consists of one string S containing only lowercase alphabets. Output: For each test case, print \\"YES\\" if any permutation of the string can form a palindrome, otherwise print \\"NO\\". Constraints: 1 ≤ N ≤ 100 1 ≤ |S| ≤ 1000 SAMPLE INPUT 3 aabbcc abcdef aaabb SAMPLE OUTPUT YES NO YES","solution":"def can_form_palindrome(s): Determines if a scrambled-up version of the string s can form a palindrome. from collections import Counter # Count the occurrences of each character count = Counter(s) # Find how many characters have an odd count odd_count = sum(1 for k, v in count.items() if v % 2 != 0) # A palindrome can have at most one character with an odd count return \\"YES\\" if odd_count <= 1 else \\"NO\\" def process_cases(n, cases): Processes multiple test cases. results = [] for case in cases: results.append(can_form_palindrome(case)) return results"},{"question":"Write a program that determines if a given sequence of parentheses is valid. A sequence of parentheses is considered valid if and only if it is balanced: each open parenthesis has a corresponding closing parenthesis and they are correctly nested. The valid sequences of parentheses are: - An empty string \\"\\" - If \\"X\\" is a valid sequence, then \\"(X)\\" is a valid sequence. - If \\"X\\" and \\"Y\\" are valid sequences, then \\"XY\\" is a valid sequence. input Given multiple datasets. Each dataset consists of a single line containing a sequence of parentheses. The sequence has at least 1 and no more than 100 characters. The number of datasets does not exceed 200. output For each dataset, output \\"YES\\" if the sequence is valid and \\"NO\\" otherwise. Example Input (())() (()( )()( Output YES NO NO Note: - In the second example, there is an unmatched opening parenthesis. - In the third example, the sequence contains unmatched and improperly nested parentheses.","solution":"def is_valid_parentheses(sequence): Determines if the given sequence of parentheses is valid. stack = [] for char in sequence: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return \\"NO\\" stack.pop() return \\"YES\\" if not stack else \\"NO\\" def check_multiple_sequences(sequences): Takes a list of sequences and returns a list of results for each sequence. return [is_valid_parentheses(seq) for seq in sequences]"},{"question":"Sarah loves matrices. One day, she came across a special type of matrix known as a \\"Monotonic Matrix\\". A Monotonic Matrix is one in which every row is sorted in non-decreasing order and every column is also sorted in non-decreasing order. Now, given an N x N matrix, Sarah has to determine if the matrix is a Monotonic Matrix or not. Could you help her? Input The first line of input contains an integer T, the number of test cases. The description of T test cases follows. Each test case begins with an integer N, the size of the matrix. The following N lines contain N space-separated integers representing the elements of the matrix. Output For each test case, output a single line - \\"YES\\" if the matrix is a Monotonic Matrix, otherwise \\"NO\\". Constraints 1 ≤ T ≤ 10^3 1 ≤ N ≤ 10^2 -10^9 ≤ Matrix element ≤ 10^9 Example Input: 2 3 1 2 3 2 3 4 3 4 5 2 1 3 2 4 Output: YES YES","solution":"def is_monotonic_matrix(matrix): Checks if the given matrix is a Monotonic Matrix where each row and column is sorted in non-decreasing order. N = len(matrix) # Check rows for row in matrix: if row != sorted(row): return \\"NO\\" # Check columns for col_idx in range(N): column = [matrix[row_idx][col_idx] for row_idx in range(N)] if column != sorted(column): return \\"NO\\" return \\"YES\\" def process_test_cases(test_cases): Processes multiple test cases to determine if each matrix is a Monotonic Matrix. results = [] for matrix in test_cases: results.append(is_monotonic_matrix(matrix)) return results"},{"question":"A software company wants to develop a new feature for their IDE, which helps developers clean up their code. The goal is to detect and remove any redundant lines of code that do not affect the output of the program. For simplicity, consider a subset of the problem where you are given a sequence of variable assignments, and you need to identify and eliminate redundant assignments. An assignment is considered redundant if the assigned value is never used in any subsequent assignment or output operation. Specifically, you are given a list of assignments and print statements. The print statements indicate the final output of the program. Your task is to determine which assignments are essential to produce the final output as observed in the print statements. Each input dataset consists of multiple lines of code represented as either assignment statements (e.g., `x = 5`) or print statements (e.g., `print(y)`). The input is terminated by an empty line. The output for each dataset should be the reduced list of code with all redundant assignments removed, while preserving the original order of essential assignments and print statements. Input - A sequence of multiple datasets is given as input. - Each dataset consists of several lines of code followed by an empty line, marking the end of the dataset. There is no empty line after the final dataset. - Each line of code is either an assignment in the form of `variable = value` (where `variable` is a single lowercase letter, and `value` is an integer), or a print statement in the form of `print(variable)` (where `variable` is a single lowercase letter). Output - For each dataset, print the reduced list of code containing only the essential assignments and print statements. Example Input ``` x = 5 y = 7 z = 9 print(x) print(y) a = 1 b = 2 c = 3 print(a) ``` Output ``` x = 5 y = 7 print(x) print(y) a = 1 print(a) ```","solution":"def remove_redundant_assignments(code_sequence): Removes redundant assignments from the given code sequence. Parameters: code_sequence (list): List of strings, where each string is a line of code. Returns: list: Reduced list of code with redundant assignments removed. essential_vars = set() reversed_code = code_sequence[::-1] reduced_code = [] for line in reversed_code: if line.startswith(\'print\'): var = line.split(\'(\')[1].strip(\')\') essential_vars.add(var) reduced_code.append(line) elif \'=\' in line: var = line.split(\'=\')[0].strip() if var in essential_vars: reduced_code.append(line) essential_vars.remove(var) # Assuming each variable is used once in print for part in line.split(\'=\')[1].strip().split(): if part.isalpha(): # if it is a variable essential_vars.add(part) return reduced_code[::-1] def process_input(input_string): datasets = input_string.strip().split(\'nn\') outputs = [] for dataset in datasets: code_lines = dataset.split(\'n\') reduced_code = remove_redundant_assignments(code_lines) outputs.append(\'n\'.join(reduced_code)) return \'nn\'.join(outputs)"},{"question":"A company has a unique encryption system for sending secret messages. For every message, they generate a secret key which has the same length as the message. Each character in the message is encrypted by shifting it forward in the alphabet by the position of the corresponding character in the key (ignoring case and cyclically if necessary). For example, if the message is \\"HELLO\\" and the key is \\"XMCKL\\", the encryption process is as follows: - H shifted by X steps (shifted forward by 23 positions) becomes E - E shifted by M steps (shifted forward by 12 positions) becomes Q - L shifted by C steps (shifted forward by 2 positions) becomes N - L shifted by K steps (shifted forward by 10 positions) becomes V - O shifted by L steps (shifted forward by 11 positions) becomes Z Thus, \\"HELLO\\" encrypted with key \\"XMCKL\\" becomes \\"EQNVZ\\". Write a function to encrypt messages given a list of message-key pairs. Function Signature: ```python def encrypt_messages(pairs: List[Tuple[str, str]]) -> List[str]: ``` Input: - A list of tuples, where each tuple contains two strings: the message and the key. Both strings consist of uppercase alphabetical characters only. Output: - A list of encrypted messages corresponding to each message-key pair. Example: ```python encrypt_messages([(\\"HELLO\\", \\"XMCKL\\"), (\\"WORLD\\", \\"ABCDEF\\")]) ``` Output: ``` [\\"EQNVZ\\", \\"YSGNI\\"] ``` Note: - For \\"WORLD\\" and key \\"ABCDEF\\", the extra characters in the key beyond the message length should be ignored. - The result of this example would be \\"WORLD\\" shifted by \\"ABCDEF\\": - W by A (0 positions) -> W - O by B (1 position) -> P - R by C (2 positions) -> T - L by D (3 positions) -> O - D by E (4 positions) -> H Thus, \\"WORLD\\" encrypted with key \\"ABCDEF\\" becomes \\"WPTOH\\".","solution":"def encrypt_messages(pairs): def shift_char(c, shift_amount): return chr((ord(c) - ord(\'A\') + shift_amount) % 26 + ord(\'A\')) encrypted_messages = [] for message, key in pairs: encrypted_msg = \'\' for m_char, k_char in zip(message, key): shift_amount = ord(k_char) - ord(\'A\') encrypted_msg += shift_char(m_char, shift_amount) encrypted_messages.append(encrypted_msg) return encrypted_messages"},{"question":"In a forest, each tree has an initial height. Every day, the height of each tree increases by a fixed amount which could be different for each tree. Given the initial heights and the daily growth rates of the trees, you need to determine the height of each tree after D days. Write a function `tree_heights` that takes three arguments: 1. A list of integers `initial_heights` representing the initial heights of the trees. 2. A list of integers `growth_rates` representing the daily growth rates of the trees. 3. An integer `D` representing the number of days. The function should return a list of integers representing the heights of the trees after D days. Input Format: - The first line contains an integer N, the number of trees. - The second line contains N integers denoting the initial heights. - The third line contains N integers denoting the growth rates. - The fourth line contains a single integer D. Output Format: - Output a single line containing N integers, the heights of the trees after D days. Constraints: - 1 ≤ N ≤ 10^5 - 0 ≤ initial_heights[i], growth_rates[i] ≤ 10^4 - 0 ≤ D ≤ 10^9 Example Input: 3 2 3 5 1 2 1 10 Output: 12 23 15 Explanation: After 10 days: - Tree 1: initial height 2, grows by 1 each day, so final height is 2 + 10*1 = 12. - Tree 2: initial height 3, grows by 2 each day, so final height is 3 + 10*2 = 23. - Tree 3: initial height 5, grows by 1 each day, so final height is 5 + 10*1 = 15.","solution":"def tree_heights(initial_heights, growth_rates, D): Calculate the height of each tree after D days. :param initial_heights: List of initial heights of the trees. :param growth_rates: List of daily growth rates of the trees. :param D: Number of days. :return: List of heights of the trees after D days. # Compute final heights by adding the growth over D days to the initial heights return [initial_heights[i] + growth_rates[i] * D for i in range(len(initial_heights))]"},{"question":"Problem B: Matrix Word Search Given an `m x n` matrix of characters board and a string word, return true if the word exists in the grid. The word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are horizontally or vertically neighboring. The same letter cell may not be used more than once. Input The input starts with two integers m and n (1 <= m, n <= 200), which denote the dimensions of the matrix. Then m lines follow, each containing n characters representing the board. After the matrix, a single line follows containing the word to be searched for. Output Output true if the word exists in the grid, and false otherwise. Examples Input 3 4 A B C E S F C S A D E E ABCCED Output true Input 3 4 A B C E S F C S A D E E SEE Output true Input 3 4 A B C E S F C S A D E E ABCB Output false Note All letters in the board and word are uppercase English letters.","solution":"def exist(board, word): def backtrack(row, col, suffix): if len(suffix) == 0: return True if row < 0 or row >= len(board) or col < 0 or col >= len(board[0]) or board[row][col] != suffix[0]: return False ret = False board[row][col], temp = \'#\', board[row][col] for row_offset, col_offset in [(0, 1), (1, 0), (0, -1), (-1, 0)]: ret = backtrack(row + row_offset, col + col_offset, suffix[1:]) if ret: break board[row][col] = temp return ret for row in range(len(board)): for col in range(len(board[0])): if backtrack(row, col, word): return True return False"},{"question":"Given an integer array `arr` of size `N` (2 ≤ N ≤ 300), you are to determine if there exists any subarray of at least length 2 which has equal sum of its first and second halves. A subarray is defined as a contiguous segment of the array. The first and second halves of a subarray of even length need to be equal in size, for odd length subarrays the extra middle element belongs to neither half. Write a function that takes as input an integer array `arr` and returns \\"YES\\" if such a subarray exists and \\"NO\\" otherwise. # Constraints * 2 ≤ N ≤ 300 * 1 ≤ arr[i] ≤ 1000 # Input The input consists of: - An integer `N` representing the length of the array. - An array `arr` of `N` integers. # Output Print \\"YES\\" if there exists such a subarray with equal sum of its first and second halves, otherwise print \\"NO\\". # Examples **Input:** ``` 5 1 2 3 2 1 ``` **Output:** ``` YES ``` **Input:** ``` 6 1 2 3 4 5 6 ``` **Output:** ``` NO ``` **Input:** ``` 3 4 4 4 ``` **Output:** ``` YES ```","solution":"def has_equal_half_sum_subarray(N, arr): Determines if there exists any subarray of at least length 2 which has equal sum of its first and second halves. Parameters: N (int): The length of the array. arr (list of int): The integer array. Returns: str: \\"YES\\" if such a subarray exists, otherwise \\"NO\\". # Iterate over all possible lengths for subarrays (starting from length 2) for length in range(2, N+1): # Iterate over all possible starting points for subarrays of the current length for start in range(N - length + 1): subarray = arr[start:start + length] mid = length // 2 # Determine the sums of the first and second halves first_half_sum = sum(subarray[:mid]) second_half_sum = sum(subarray[mid:]) if length % 2 == 0 else sum(subarray[mid + 1:]) # Check if the sums are equal if first_half_sum == second_half_sum: return \\"YES\\" return \\"NO\\""},{"question":"Tom is fascinated by prime numbers and is particularly interested in prime gaps - the difference between two successive prime numbers. He is curious to find the longest gap between consecutive prime numbers within a given range. Could you help him with this? Tom will provide you with multiple queries, each containing two integers `L` and `R`, and you need to find the longest gap between any two consecutive prime numbers in the range `[L, R]`. Input The first line contains an integer `t` (1 ≤ t ≤ 10^5), the number of queries. Next `t` lines each contain two integers `L` and `R` (2 ≤ L ≤ R ≤ 10^6). Output For each query, print a single integer representing the longest gap between any two consecutive prime numbers within the range `[L, R]`. If there are fewer than two prime numbers in the given range, print `-1`. Example Input 4 2 10 10 20 20 30 100 110 Output 4 4 6 4 Note In the first query, the prime numbers in the range `[2, 10]` are `[2, 3, 5, 7]`. The gaps between these prime numbers are `1` (3-2), `2` (5-3), and `2` (7-5). The longest gap is `2`. In the second query, the prime numbers in the range `[10, 20]` are `[11, 13, 17, 19]`. The gaps between these prime numbers are `2` (13-11), `4` (17-13), and `2` (19-17). The longest gap is `4`. In the third query, the prime numbers in the range `[20, 30]` are `[23, 29]`. The gap between these prime numbers is `6` (29-23). The longest gap is `6`. In the fourth query, the prime numbers in the range `[100, 110]` are `[101, 103, 107, 109]`. The gaps between these prime numbers are `2` (103-101), `4` (107-103), and `2` (109-107). The longest gap is `4`.","solution":"def generate_primes_up_to(n): Generate a list of primes up to n using the Sieve of Eratosthenes sieve = [True] * (n + 1) sieve[0] = sieve[1] = False for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n+1, start): sieve[multiple] = False return [num for num, is_prime in enumerate(sieve) if is_prime] def prime_gaps(t, queries): MAX_R = max(query[1] for query in queries) primes_up_to_max_r = generate_primes_up_to(MAX_R) results = [] for L, R in queries: primes_in_range = [p for p in primes_up_to_max_r if L <= p <= R] if len(primes_in_range) < 2: results.append(-1) else: max_gap = max(primes_in_range[i+1] - primes_in_range[i] for i in range(len(primes_in_range) - 1)) results.append(max_gap) return results"},{"question":"A graph is a collection of nodes and edges connecting pairs of nodes. A graph is complete if there is an edge between every pair of distinct nodes. Your task is to determine if the given graph is complete. Constraints * 1 ≤ n ≤ 100 (number of nodes) * 0 ≤ m ≤ n * (n-1) / 2 (number of edges in the graph) Input The first line of the input includes two integers n and m, the number of nodes and edges in the graph, respectively. In the following m lines, each line contains two integers u and v, indicating there is an edge between node u and node v. Output Print \\"Complete\\" if the graph is complete; otherwise, print \\"Incomplete\\". Example Input 4 6 0 1 0 2 0 3 1 2 1 3 2 3 Output Complete Input 4 5 0 1 0 2 0 3 1 2 2 3 Output Incomplete","solution":"def is_graph_complete(n, m, edges): Determines if the graph is complete. Args: n : int : number of nodes m : int : number of edges edges : list of tuple : each tuple contains two integers representing an edge between two nodes Returns: str: \\"Complete\\" if the graph is complete, otherwise \\"Incomplete\\" if m != n * (n - 1) // 2: return \\"Incomplete\\" adjacency_matrix = [[False] * n for _ in range(n)] for u, v in edges: adjacency_matrix[u][v] = True adjacency_matrix[v][u] = True for i in range(n): for j in range(i+1, n): if not adjacency_matrix[i][j]: return \\"Incomplete\\" return \\"Complete\\""},{"question":"Given a sequence of N integers, you need to determine if there exists a contiguous subarray that sums up to a given integer S. Write a function that takes in two parameters: an integer array `arr` and an integer `S`. The function should return a boolean value `True` if such a subarray exists, and `False` otherwise. **Input** The input consists of: - An integer N (1 ≤ N ≤ 10^5): the size of the array - An array of N integers: the elements of the array (-10^9 ≤ arr[i] ≤ 10^9) - An integer S (-10^14 ≤ S ≤ 10^14): the target sum **Output** The function should return a boolean value: - `True` if there exists a contiguous subarray of `arr` that sums to `S` - `False` if no such subarray exists **Example** Input ``` 10 1 2 3 -2 5 4 -10 3 1 4 7 ``` Output ``` True ``` Input ``` 5 1 2 3 4 5 20 ``` Output ``` False ``` # Explanation In the first example, there exists a subarray `[3, -2, 5, 4]` that sums up to 7. In the second example, no contiguous subarray sums up to 20. # Notes Use efficient algorithms to handle large input sizes within the constraints.","solution":"def is_subarray_with_sum(arr, S): Determine if there exists a contiguous subarray that sums to a given integer S. Parameters: arr (list): A list of integers representing the array. S (int): The target sum to check for. Returns: bool: True if such a subarray exists, and False otherwise. current_sum = 0 sum_set = set() for num in arr: current_sum += num if current_sum == S: return True if (current_sum - S) in sum_set: return True sum_set.add(current_sum) return False"},{"question":"Nina loves reading books. She has a collection of N books, each with a unique thickness. Nina likes to place her books in a sequence on a shelf such that that it optimizes the space used, based on a special arrangement rule she has: the thickness of the books should form a sequence that is strictly increasing and then strictly decreasing, or strictly decreasing and then strictly increasing. Given the thickness of the N books, write a program to find the longest possible sequence of books that can be arranged on Nina’s shelf following her special arrangement rule. # Input - The first line contains an integer N (1 ≤ N ≤ 100000) representing the number of books. - The second line contains N integers T1, T2, ..., TN (1 ≤ Ti ≤ 1000000), where Ti is the thickness of the ith book. # Output - Output a single integer representing the length of the longest sequence that can be arranged according to Nina\'s special arrangement rule. # Example Input ``` 7 5 1 3 6 4 2 7 ``` Output ``` 5 ``` Explanation One possible sequence that fits the rule is `1, 3, 6, 4, 2`. # Note - The sequence should be strictly increasing at the start and strictly decreasing after reaching a peak, or strictly decreasing at the start and strictly increasing after reaching a valley.","solution":"def longest_special_sequence(n, thicknesses): from itertools import combinations def is_valid_sequence(seq): if len(seq) < 3: return False inc, dec = False, False for i in range(len(seq) - 1): if seq[i] < seq[i + 1]: if dec: return False inc = True elif seq[i] > seq[i + 1]: if not inc: return False dec = True else: return False return inc and dec max_len = 0 for i in range(1, n + 1): for comb in combinations(thicknesses, i): if is_valid_sequence(comb): max_len = max(max_len, len(comb)) return max_len"},{"question":"Your friend gave you a sequence of N integers, and he wants you to help him find the largest sum of elements in any contiguous subarray of the sequence. The sequence can have both positive and negative integers. Constraints: * 1 ≤ N ≤ 200000 * −10^9 ≤ a_i ≤ 10^9 * All values in input are integers. Input Input is given from Standard Input in the following format: N a_1 a_2 … a_N Output Print the largest sum of elements in any contiguous subarray of the sequence. Examples Input 5 −2 1 −3 4 −1 2 1 −5 4 Output 6 Input 1 −1 Output −1 Input 8 1 2 3 4 5 −10 20 −3 Output 25","solution":"def max_subarray_sum(arr): Returns the largest sum of elements in any contiguous subarray. if not arr: return 0 max_so_far = arr[0] max_ending_here = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Given an array of integers and an integer x, design a function that identifies the length of the smallest contiguous subarray for which the sum is greater than or equal to x. If there isn\'t one, return 0 instead. # Input The function will receive multiple datasets. Each dataset includes: 1. An integer n representing the number of elements in the array (1 ≤ n ≤ 100000). 2. An integer x representing the target sum (1 ≤ x ≤ 10⁸). 3. An array of n integers, where each integer is between -10⁹ and 10⁹. The input ends with a line containing two zeros. # Output For each dataset, the function should output the length of the smallest contiguous subarray for which the sum is greater than or equal to x. If no such subarray exists, output 0. # Examples Input: ``` 8 15 1 2 3 4 5 6 7 8 10 55 1 2 3 4 5 6 7 8 9 10 0 0 ``` Output: ``` 2 10 ``` # Explanation: In the first dataset: - The sum of the smallest subarray with sum ≥ 15 is 7 + 8 = 15, and its length is 2. In the second dataset: - The sum of the array is 55, and since it exactly matches x, the length of the subarray that matches exactly the given sum is 10.","solution":"def smallest_subarray_length(arr, x): Finds the length of the smallest contiguous subarray for which the sum is greater than or equal to x. If there isn\'t such subarray, returns 0. :param arr: List[int], the input array :param x: int, the target sum :return: int, the length of the smallest subarray or 0 n = len(arr) min_length = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum >= x: min_length = min(min_length, end - start + 1) current_sum -= arr[start] start += 1 if min_length == float(\'inf\'): return 0 return min_length def process_datasets(datasets): Processes multiple datasets and returns results for each dataset. :param datasets: List[Tuple[int, int, List[int]]], where each tuple contains (n, x, arr) :return: List[int], lengths of the smallest subarray for each dataset results = [] for n, x, arr in datasets: if n == 0 and x == 0: break result = smallest_subarray_length(arr, x) results.append(result) return results"},{"question":"In a graph with `n` nodes and `m` edges, some nodes are colored either white or black. Given the nodes and their connections, you need to determine the number of pairs of nodes (i, j) such that: 1. Node `i` is connected to node `j` 2. Node `i` is white and node `j` is black. Given an undirected graph, write a function to count such pairs. # Input The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 100) - the number of nodes and the number of edges respectively. The second line contains `n` integers, where each integer is either 0 (representing a white node) or 1 (representing a black node), denoting the color of each node from `1` to `n`. Each of the next `m` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v) - representing an undirected edge between nodes `u` and `v`. # Output Print the only integer which is the number of valid pairs `(i, j)` such that node `i` is white, node `j` is black, and there is an edge between node `i` and node `j`. # Example Input ``` 4 3 0 1 0 1 1 2 2 3 3 4 ``` Output ``` 3 ``` Explanation - Nodes and their colors: 1(white), 2(black), 3(white), 4(black). - The graph connections are: (1 - 2), (2 - 3), (3 - 4). The valid pairs are: - (1, 2): node 1 is white, node 2 is black - (3, 2): node 3 is white, node 2 is black - (3, 4): node 3 is white, node 4 is black Hence, the output is 3.","solution":"def count_white_black_pairs(n, m, colors, edges): Count the number of pairs (i, j) such that node i is white, node j is black, and there is an edge between node i and node j. Args: n (int): Number of nodes. m (int): Number of edges. colors (list of int): List containing the color of each node (0 for white, 1 for black). edges (list of tuple of int): List of tuples representing the edges between nodes. Returns: int: Number of valid pairs. pair_count = 0 for (u, v) in edges: if colors[u-1] == 0 and colors[v-1] == 1: pair_count += 1 elif colors[u-1] == 1 and colors[v-1] == 0: pair_count += 1 return pair_count"},{"question":"A group of friends wants to host a secret Santa gift exchange where each person buys a gift for another randomly chosen person, with the only restriction being that no individual buys a gift for themselves. The number of participants, `n`, is represented as an integer, and we assume each person is unique, labeled with an integer from `1` to `n`. Write a program that determines if there exists at least one way to assign gift givers such that nobody ends up giving a gift to themselves. If at least one valid assignment is possible, the program should output \\"Yes\\", otherwise, it should output \\"No\\". To help with this, we can use a concept called a \\"derangement,\\" which is a permutation of all the participants where no participant appears in their original position. # Input Each test case consists of a single integer `n` (1 ≤ n ≤ 10^6). The input ends with a single line containing `-1` which should not be processed as a test case. # Output For each test case, output \\"Yes\\" if there exists at least one valid secret Santa assignment, otherwise, output \\"No\\". # Examples Input ``` 2 3 4 -1 ``` Output ``` Yes Yes Yes ``` # Explanation In the first example, with 2 participants, they can exchange gifts with each other, which forms a valid derangement. In the second example, with 3 participants, some possible derangements include: 1. 1 → 2, 2 → 3, 3 → 1 2. 1 → 3, 2 → 1, 3 → 2 Both of these are valid since no one gives a gift to themselves. In the third example, with 4 participants, a similar logic applies, and various derangements can be formed ensuring that nobody gives a gift to themselves.","solution":"def can_secret_santa(n): Determine if there exists a valid secret santa assignment where no one gives a gift to themselves. Return \\"Yes\\" if at least one valid assignment exists, otherwise return \\"No\\". if n == 1: return \\"No\\" else: return \\"Yes\\" def process_inputs(inputs): results = [] for n in inputs: if n != -1: results.append(can_secret_santa(n)) return results"},{"question":"The city of Gridtopia is organized in the form of a grid with n rows and m columns. Each cell in the grid can either be empty (.) or contain an obstacle (#). The mayor of Gridtopia wants to build a new expressway from the top-left corner (1,1) to the bottom-right corner (n,m), but the expressway can only pass through empty cells and should connect horizontally or vertically between adjacent cells. Given the grid configuration, you need to determine if it\'s possible to build an expressway from the top-left to the bottom-right corner. If it\'s possible, print the minimum number of cells (including the start and end cells) that need to be traversed. If it\'s not possible, print -1. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. Each of the next n lines contains a string of m characters, each either \'.\' (empty) or \'#\' (obstacle) representing the grid. Output Print a single integer, the minimum number of cells required to traverse from the top-left to the bottom-right corner if possible. If not possible, print -1. Examples Input 4 4 .... ..#. .#.. .... Output 7 Input 3 3 .#. . ... Output -1 Input 5 5 ..... .#.#. .#.#. .#.#. ..... Output 9 Note In the first example, one possible path is (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) -> (4,3) -> (4,4), taking a total of 7 cells. In the second example, it is impossible to traverse from the top-left to the bottom-right corner due to obstacles. In the third example, one possible path is (1,1) -> (2,1) -> (3,1) -> (4,1) -> (5,1) -> (5,2) -> (5,3) -> (5,4) -> (5,5), taking a total of 9 cells.","solution":"from collections import deque def min_path_in_grid(n, m, grid): if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] queue = deque([(0, 0, 1)]) visited = set((0, 0)) while queue: x, y, steps = queue.popleft() if (x, y) == (n - 1, m - 1): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1"},{"question":"A tech company called \\"Bitwise Solutions\\" is looking to optimize their network for a new online multiplayer game server. There are n different servers available, each with a certain processing capacity ki and a cost ci associated with running it. Additionally, there are m groups of players who wish to join the game, where each group j has a requirement of processing power rj and is willing to pay pj to play the game. Each group of players needs to have their processing requirement fully met by exactly one of the servers. If their requirement cannot be fulfilled, they will not join and thus will not pay anything. Your task is to determine the optimal assignment of groups to servers to maximize the total payment from all the groups of players while ensuring that the server\'s processing capacity is not exceeded. Input The first line of the input contains two integers n (1 ≤ n ≤ 1000) — number of servers, and m (1 ≤ m ≤ 1000) — number of groups of players. The next n lines contain two integers each: ki and ci (1 ≤ ki, ci ≤ 1000) — the processing capacity and the cost of running the i-th server, respectively. The next m lines contain two integers each: rj and pj (1 ≤ rj, pj ≤ 1000) — the processing power requirement and the payment of the j-th group of players, respectively. Output Print two integers: g, p — the number of groups assigned to servers and the total payment received from these groups. Then, print g lines, each containing two integers: the number of the assigned group and the number of the server they are assigned to. Groups and servers are numbered consecutively starting from 1 in the order they are given in the input. If there are multiple optimal answers, print any of them. Examples Input 3 3 100 50 150 100 200 150 50 30 60 70 70 90 Output 3 190 1 1 2 2 3 3","solution":"def maximize_payments(n, m, servers, groups): # Sort servers by cost in ascending order servers.sort(key=lambda x: x[1]) # Sort groups by payment in descending order groups.sort(key=lambda x: -x[1]) total_payment = 0 assignments = [] used_servers = [False] * n for j in range(m): required_power, payment = groups[j] for i in range(n): if not used_servers[i] and servers[i][0] >= required_power: assignments.append((j + 1, i + 1)) total_payment += payment used_servers[i] = True break return len(assignments), total_payment, assignments def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) servers = [] groups = [] index = 2 for i in range(n): ki = int(data[index]) ci = int(data[index + 1]) servers.append((ki, ci)) index += 2 for j in range(m): rj = int(data[index]) pj = int(data[index + 1]) groups.append((rj, pj)) index += 2 g, p, assignments = maximize_payments(n, m, servers, groups) print(g, p) for assignment in assignments: print(assignment[0], assignment[1]) if __name__ == \\"__main__\\": main()"},{"question":"Bob is a coding enthusiast and loves solving puzzles related to strings. One day, he came across a challenging problem and couldn\'t figure out the solution. So, he needs your help to solve it. Bob has a string of lowercase alphabets and wants to find the length of the longest substring without repeating characters. Your task is to write a program that, given an input string, returns the length of the longest substring that doesn\'t contain any repeating characters. Input The first and only line of input contains a single string s consisting of lowercase English letters. The length of the string does not exceed 10^5. Output Print a single integer — the length of the longest substring of s that contains no repeating characters. Examples Input abcabcbb Output 3 Input bbbbb Output 1 Input pwwkew Output 3","solution":"def length_of_longest_substring(s: str) -> int: Returns the length of the longest substring without repeating characters. char_map = {} left = 0 max_length = 0 for right in range(len(s)): if s[right] in char_map and char_map[s[right]] >= left: left = char_map[s[right]] + 1 char_map[s[right]] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"Dana is working on a project to analyze user purchasing patterns. She has a list of items with their respective prices and a list of users with the items they have purchased. Dana wants to identify the top k users who have spent the most money on their purchases. Your task is to help Dana by writing a program that calculates the total expenditure of each user and then identifies the top k users based on their spending. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of different items. The second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 10^4) — where pi is the price of the i-th item. The third line contains an integer m (1 ≤ m ≤ 10^5) — the number of users. Each of the next m lines contains a string u (1 ≤ length(u) ≤ 50) and an integer c (0 ≤ c ≤ n), followed by c integers a1, a2, ..., ac (1 ≤ ai ≤ n) — where u is the user identifier, and each ai represents an item purchased by the user. The next line contains an integer k (1 ≤ k ≤ m) — the number of top spenders to identify. Output Print the identifiers of the top k users who have spent the most money, each on a new line. If multiple users have spent the same amount, their identifiers should be printed in lexicographical order. Examples Input 3 100 200 300 4 Alice 2 1 2 Bob 1 3 Charlie 3 1 2 3 David 1 2 2 Output Charlie Alice Input 2 500 800 3 Tom 1 1 Jane 2 1 2 Lisa 1 2 1 Output Jane Input 4 100 200 150 400 2 Eve 0 Mallory 3 2 3 4 1 Output Mallory","solution":"def get_top_k_users(n, item_prices, m, user_purchases, k): from collections import defaultdict user_spending = defaultdict(int) for user in user_purchases: user_id = user[0] items = user[1] total_spending = sum(item_prices[item-1] for item in items) user_spending[user_id] += total_spending sorted_users = sorted(user_spending.items(), key=lambda x: (-x[1], x[0])) return [user for user, _ in sorted_users[:k]] # Example usage: # n = 3 # item_prices = [100, 200, 300] # m = 4 # user_purchases = [ # (\\"Alice\\", [1, 2]), # (\\"Bob\\", [3]), # (\\"Charlie\\", [1, 2, 3]), # (\\"David\\", [2]) # ] # k = 2 # print(get_top_k_users(n, item_prices, m, user_purchases, k)) # Output: [\'Charlie\', \'Alice\']"},{"question":"There are n different types of coins available with values {v_i} (1 le i le n). Given an amount M , the goal is to determine the minimum number of coins needed to make up the amount M . If it is not possible to make the amount with the given coins, return -1. Constraints: * 1 le n le 100 * 1 le v_i le 10^4 * 1 le M le 10^5 Input: n v_1 v_2 :: v_n M The first line consists of the integer n . In the following n lines, the value of each coin v_i is given. The last line contains the amount M . Output: Print the minimum number of coins in a line. If it is not possible to make the amount M with the given coins, print -1. Examples: Input: 3 1 2 5 11 Output: 3 Input: 3 2 5 10 3 Output: -1 Input: 4 1 2 5 10 7 Output: 2","solution":"def min_coins(n, coins, M): Given a list of coins and an amount M, return the minimum number of coins needed to make that amount. If it is not possible to make the amount, return -1. # Create an array to store the minimum number of coins for each amount up to M dp = [float(\'inf\')] * (M + 1) dp[0] = 0 # Base case: 0 coins are needed to make the amount 0 for coin in coins: for x in range(coin, M + 1): if dp[x - coin] != float(\'inf\'): dp[x] = min(dp[x], dp[x - coin] + 1) return dp[M] if dp[M] != float(\'inf\') else -1 # Example Usage n = 3 coins = [1, 2, 5] M = 11 print(min_coins(n, coins, M)) # Output: 3"},{"question":"A music streaming service is reorganizing its song database. Each song is assigned to exactly one genre, and each genre is assigned a unique number from 1 to g. The quality of a song is represented by a single integer value, qi. The database has encountered numerous updates and needs to be re-evaluated for quick access by genre. You are tasked with determining the genre with the maximum average song quality. You are given the total number of songs n, and the number of genres g. Each of the next n lines contains two integers, representing the genre number and the quality of the song respectively. Your job is to write a function that determines which genre has the highest average quality of its songs. If multiple genres have the same highest average quality, return the smallest genre number. Input The first line contains two integers n and g (1 ≤ n ≤ 1000, 1 ≤ g ≤ 100), the number of songs and the number of genres. Each of the next n lines contains two integers gi and qi (1 ≤ gi ≤ g, 1 ≤ qi ≤ 100), the genre number and the quality of the song respectively. Output Print the genre number that has the highest average quality. If there are multiple genres with the same highest average, print the smallest genre number. Examples Input 6 3 1 90 2 80 1 85 3 70 2 100 3 80 Output 2 Input 5 2 1 60 2 70 1 80 2 100 1 70 Output 1 Note In the first example, the average quality for genre 1 is (90 + 85) / 2 = 87.5, genre 2 is (80 + 100) / 2 = 90, and genre 3 is (70 + 80) / 2 = 75. Thus, genre 2 has the highest average quality. In the second example, the average quality for genre 1 is (60 + 80 + 70) / 3 = 70, and the average quality for genre 2 is (70 + 100) / 2 = 85. Thus, genre 1 has the highest average quality.","solution":"def highest_average_genre(n, g, songs): from collections import defaultdict genre_qualities = defaultdict(list) for genre, quality in songs: genre_qualities[genre].append(quality) max_avg = -1 best_genre = None for genre in range(1, g + 1): if genre_qualities[genre]: avg_quality = sum(genre_qualities[genre]) / len(genre_qualities[genre]) if avg_quality > max_avg or (avg_quality == max_avg and genre < best_genre): max_avg = avg_quality best_genre = genre return best_genre"},{"question":"Develop a program that calculates the minimal number of swaps required to sort an array in non-decreasing order. Each swap should only involve adjacent elements, similar to the bubble sort algorithm. Input The first line of input contains an integer T denoting the number of test cases. Each of the following T lines describes one test case with numbers separated by spaces. The first number in each line gives the length of the array N (1 ≤ N ≤ 1000), followed by N integers representing the elements of the array. Output For each test case, output a single line containing one integer, the minimal number of adjacent swaps required to sort the given array. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 -10^6 ≤ array elements ≤ 10^6 Example Input: 3 5 2 3 4 1 5 4 1 4 3 2 3 3 2 1 Output: 5 3 3","solution":"def bubble_sort_swap_count(arr): Function to calculate the number of adjacent swaps required to sort the array using a bubble sort algorithm. n = len(arr) swap_count = 0 for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] swap_count += 1 return swap_count def min_swaps_to_sort(arrays): Given a list of arrays, this function calculates the minimal number of adjacent swaps required to sort each array in non-decreasing order. results = [] for array in arrays: swap_count = bubble_sort_swap_count(array) results.append(swap_count) return results def parse_input(input_str): Parse the input string into a format that can be used by the main processing function. lines = input_str.strip().split(\'n\') T = int(lines[0]) arrays = [] for line in lines[1:T+1]: elements = list(map(int, line.split())) arrays.append(elements[1:]) # We only need the array elements, not the length return arrays"},{"question":"Finn and Jake are playing a card game in the Land of Ooo. Each card has a unique rank and a series of properties described by an ordered P-tuple ( B1, B2, B3,..., BP ). Each property Bi is an integer between 1 and M inclusive. In total, they have C cards. Jake, being the competitive player he is, tells Finn the properties of each card and then challenges Finn with a few questions. For each question, Jake gives a P-tuple and asks Finn which card it corresponds to. Since Finn wants to maintain his best friend title, he wants to get all the answers right. Help him answer the questions correctly by writing a program. Input: The first line contains C, P, M, and Q, the number of cards, the size of the P-tuple, the maximum value of any property, and the number of questions that Jake asks. The next C lines each contain a string (the card\'s name) followed by P space-separated integers representing the properties of that card. The next Q lines each contain P space-separated integers denoting a P-tuple. Output: For each given question, output the name of the card corresponding to the given P-tuple. If no such card exists, output \\"That\'s not a card!\\" (Quotes for clarity) Constraints: 1 ≤ C ≤ 100000 1 ≤ P ≤ 6 1 ≤ M ≤ 20 1 ≤ Q ≤ 100000 1 ≤ Bi ≤ M 1 ≤ Length of card name ≤ 15 Card names will only contain lowercase and uppercase alphabets [a-z, A-Z]. Note: No two cards will have the same P-tuple or name. SAMPLE INPUT 4 4 10 4 LumpySpacePrincess 7 2 10 1 Finn 1 5 3 9 Jake 4 6 8 2 Bubblegum 10 1 5 3 4 6 8 2 10 1 5 3 1 5 3 9 2 2 2 2 SAMPLE OUTPUT Jake Bubblegum Finn That\'s not a card!","solution":"def card_game_solver(C, P, M, Q, cards_data, questions): Solves the card game challenge by returning the card names corresponding to the given P-tuples. Parameters: C (int): number of cards P (int): size of the P-tuple M (int): max value of any property Q (int): number of questions cards_data (list of tuples): each tuple contains a card name and its P-tuple properties questions (list of tuples): each tuple is a P-tuple representing a question Returns: list of str: card names corresponding to each question P-tuple or \\"That\'s not a card!\\" if no such card exists # Create a mapping from tuple properties to card names card_map = {} for card in cards_data: name = card[0] properties = tuple(card[1:]) card_map[properties] = name # Process each question result = [] for question in questions: props = tuple(question) if props in card_map: result.append(card_map[props]) else: result.append(\\"That\'s not a card!\\") return result # Sample usage of card_game_solver # cards_data = [ # (\\"LumpySpacePrincess\\", 7, 2, 10, 1), # (\\"Finn\\", 1, 5, 3, 9), # (\\"Jake\\", 4, 6, 8, 2), # (\\"Bubblegum\\", 10, 1, 5, 3), # ] # questions = [ # (4, 6, 8, 2), # (10, 1, 5, 3), # (1, 5, 3, 9), # (2, 2, 2, 2), # ] # print(card_game_solver(4, 4, 10, 4, cards_data, questions))"},{"question":"Alice is designing a new social network platform and needs to create a way to identify the shortest path users can take between any two given people in her network. The network is represented as an unweighted, undirected graph where each person is a node, and a friendship between two people is an edge between the corresponding nodes. Alice needs a program to answer multiple queries about the shortest paths efficiently. Input The first line contains two integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 5000) — the number of nodes (people) and the number of edges (friendships) respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n) — an edge between nodes u and v representing a friendship. The next line contains an integer q (1 ≤ q ≤ 1000) — the number of queries. Each of the next q lines contains two integers a and b (1 ≤ a, b ≤ n) — nodes asking for the shortest path between them. Output For each of the q queries, print a single integer, the length of the shortest path between nodes a and b. If there is no path between them, print -1. Examples Input 6 7 1 2 1 3 3 4 2 4 4 5 5 6 3 6 3 1 5 6 1 2 6 Output 2 -1 3 Note In the first example query, the shortest path between nodes 1 and 5 is through the path 1 → 3 → 4 → 5, which has length 3. In the second example query, there is no path from node 6 to node 1, hence the output is -1. In the third example query, the shortest path between nodes 2 and 6 is through the path 2 → 4 → 3 → 6, which has length 3.","solution":"from collections import deque def bfs_shortest_path(graph, start, end): Use BFS to find the shortest path in an unweighted graph. visited = set() queue = deque([(start, 0)]) # (current_node, current_distance) while queue: current, distance = queue.popleft() if current == end: return distance if current not in visited: visited.add(current) for neighbor in graph[current]: if neighbor not in visited: queue.append((neighbor, distance + 1)) return -1 # No path found def build_graph(n, edges): Build an undirected graph from edge list. graph = {i: [] for i in range(1, n + 1)} for u, v in edges: graph[u].append(v) graph[v].append(u) return graph def shortest_paths(n, edges, queries): graph = build_graph(n, edges) results = [] for a, b in queries: results.append(bfs_shortest_path(graph, a, b)) return results"},{"question":"Write a program that calculates the minimum number of coins needed to make up a given amount with an infinite supply of coins of given denominations. Your solution should find the minimum coin count for each amount in a series of input datasets. If it is not possible to make up the amount with the given coin denominations, return -1 for that amount. Input The first line contains an integer t (1 ≤ t ≤ 1000) representing the number of datasets. Each dataset starts with two integers: a positive integer n (1 ≤ n ≤ 100) representing the number of different coin denominations, and an integer amount (1 ≤ amount ≤ 10000) which is the amount to make up with these coins. The next line contains n distinct integers which are the coin denominations. Output For each dataset, print a single integer: the minimum number of coins needed to make up the given amount, or -1 if it is not possible. Example Input 3 3 11 1 2 5 2 7 2 4 5 23 2 5 10 1 2 Output 3 -1 4","solution":"def min_coins(n, amount, coins): max_val = amount + 1 dp = [max_val] * (amount + 1) dp[0] = 0 for coin in coins: for x in range(coin, amount + 1): dp[x] = min(dp[x], dp[x - coin] + 1) return dp[amount] if dp[amount] != max_val else -1 def find_min_coins(datasets): results = [] for data in datasets: n, amount, coins = data results.append(min_coins(n, amount, coins)) return results def parse_input_and_solve(input_str): lines = input_str.strip().split(\\"n\\") t = int(lines[0]) datasets = [] idx = 1 for _ in range(t): n, amount = map(int, lines[idx].split()) coins = list(map(int, lines[idx + 1].split())) datasets.append((n, amount, coins)) idx += 2 results = find_min_coins(datasets) return \\"n\\".join(map(str, results))"},{"question":"You are given two arrays `arr1` and `arr2` of lengths `m` and `n` respectively. Both arrays are sorted in non-decreasing order. Your task is to merge these two arrays into a single sorted array. The resulting merged array should also be sorted in non-decreasing order and should be composed of all the elements from both input arrays. Write a program that performs this merge operation efficiently. Input The first line contains two integers `m` and `n` (1 ≤ m, n ≤ 10^5), representing the lengths of `arr1` and `arr2`, respectively. The second line contains `m` integers, representing the elements of `arr1`. The third line contains `n` integers, representing the elements of `arr2`. Output Output a single line containing the merged sorted array of length `m + n`. Examples Input 5 4 1 3 5 7 9 2 4 6 8 Output 1 2 3 4 5 6 7 8 9 Note The purpose of this exercise is to merge two pre-sorted arrays into a single sorted array, leveraging the fact that the input arrays are already sorted to achieve an efficient solution.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into a single sorted array. Parameters: arr1 (list): The first sorted array arr2 (list): The second sorted array Returns: list: A single merged and sorted array merged_array = [] i, j = 0, 0 # Merge the two arrays while i < len(arr1) and j < len(arr2): if arr1[i] <= arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # Append remaining elements of arr1 while i < len(arr1): merged_array.append(arr1[i]) i += 1 # Append remaining elements of arr2 while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"You are given a list of n cities connected by m bidirectional roads. Each road has a cost associated with it. Some cities are marked as tourist destinations. A tourist can only start and end their journey at a tourist destination. The task is to determine the minimum cost of traveling between any two tourist destinations. If no such path exists, return -1. You are required to implement a solution that finds this minimum cost effectively. Input The first line of the input contains three integers n, m, and t (1 ≤ n ≤ 1000, 0 ≤ m ≤ 100000, 0 ≤ t ≤ n) — the number of cities, the number of bidirectional roads, and the number of tourist destinations respectively. The second line contains t integers representing the indexes of the tourist destinations. Each of the next m lines contains three integers u, v, and c (1 ≤ u, v ≤ n, 1 ≤ c ≤ 10^6) — the two cities connected by the road and the cost associated with that road. Output The output should be a single integer — the minimum cost of traveling between any two tourist destinations. If no such path exists, print -1. Examples Input 5 6 2 2 4 1 2 4 1 3 2 2 3 3 2 4 5 3 5 6 4 5 1 Output 5 Input 4 2 2 1 4 1 2 3 3 4 2 Output -1 Note In the first test case, the optimal path between the two tourist destinations (2 and 4) is via the direct road from city 2 to city 4, with a cost of 5. In the second test case, there is no path between the two tourist destinations (1 and 4), hence the output is -1.","solution":"import heapq def minimum_cost(n, m, t, destinations, roads): if t < 2: return -1 # Initialize graph - Adjancency List graph = {i: [] for i in range(1, n + 1)} for u, v, c in roads: graph[u].append((v, c)) graph[v].append((u, c)) # Function to run Dijkstra\'s Algorithm def dijkstra(src): dist = {i: float(\'inf\') for i in range(1, n + 1)} dist[src] = 0 pq = [(0, src)] while pq: current_dist, u = heapq.heappop(pq) if current_dist > dist[u]: continue for v, weight in graph[u]: dist_v = current_dist + weight if dist_v < dist[v]: dist[v] = dist_v heapq.heappush(pq, (dist_v, v)) return {k: dist[k] for k in destinations} # Find the minimum distance between any two tourist destinations min_cost = float(\'inf\') for d in destinations: dist_from_d = dijkstra(d) for d2 in destinations: if d != d2 and dist_from_d[d2] < min_cost: min_cost = dist_from_d[d2] return min_cost if min_cost != float(\'inf\') else -1"},{"question":"You are given an array b_1, b_2, ..., b_n of length n where all elements are initially zero. You need to perform operations such that in the end, the entire array b contains exactly two distinct integers k and l (k ≠ l) and exactly one occurrence of each of these integers in the array. The remaining n - 2 elements should be zero. You should complete this in no more than 2(n - 1) operations. In one operation, you can choose an index x (1 ≤ x ≤ n) and increment b[x] by 1. After each operation, it is guaranteed that the chosen index x remains within the bounds 1 ≤ x ≤ n. Input The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. The first and only line of each test case contains a single integer n (3 ≤ n ≤ 2 ⋅ 10^5) — the length of array b. It is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5. Output For each test case, print the sequence of operations that will transform b to meet the criteria in the following format: first print one integer m (m ≤ 2(n - 1)) — the number of operations; next, print m integers where each integer x (1 ≤ x ≤ n) is the index chosen for the corresponding operation. Example Input 2 3 4 Output 4 1 1 2 3 6 1 1 2 2 3 4 Note In the first test case, you have array b = [0, 0, 0]. For example, you can do the following: 1. choose index 1: b_1 = 1 and array b = [1, 0, 0]; 2. choose index 1: b_1 = 2 and array b = [2, 0, 0]; 3. choose index 2: b_2 = 1 and array b = [2, 1, 0]; 4. choose index 3: b_3 = 1 and array b = [2, 1, 1]. You\'ve got an array where exactly two distinct integers appear once each in 4 operations. In the second test case, initially b = [0, 0, 0, 0]. For example, you can do the following: 1. choose index 1: b_1 = 1 and array b = [1, 0, 0, 0]; 2. choose index 1: b_1 = 2 and array b = [2, 0, 0, 0]; 3. choose index 2: b_2 = 1 and array b = [2, 1, 0, 0]; 4. choose index 2: b_2 = 2 and array b = [2, 2, 0, 0]; 5. choose index 3: b_3 = 1 and array b = [2, 2, 1, 0]; 6. choose index 4: b_4 = 1 and array b = [2, 2, 1, 1]. You\'ve got an array where exactly two distinct integers appear once each in 6 operations.","solution":"def apply_operations(t, test_cases): results = [] for n in test_cases: operations = [] # First, we increment b[0] twice operations.append(1) operations.append(1) # Next, we increment b[1] up to k and b last element for l operations.append(2) operations.append(n) # The remaining elements will remain zero # The number of operations will be exactly 4 (2 increments for index 1, 1 increment for index 2 and last element) results.append((len(operations), operations)) return results def main(): t = int(input().strip()) test_cases = [int(input().strip()) for _ in range(t)] results = apply_operations(t, test_cases) for operations_count, operations in results: print(operations_count) print(\\" \\".join(map(str, operations))) if __name__ == \\"__main__\\": main()"},{"question":"In a rare magical forest, there are enchanted butterflies known for fluttering around in a unique pattern. Each butterfly moves in a specific manner that avoids certain traps placed randomly throughout the forest. The magical forest can be represented as a grid where each cell can either be empty, occupied by a trap, or occupied by a butterfly. A butterfly can move up, down, left, or right, but cannot move diagonally. They can only move to an adjacent empty cell and cannot step into cells with traps. The objective is to guide a butterfly from its starting position to a destination point within the forest using the fewest possible moves. Each butterfly is aware of the traps and will choose the safest path to reach its destination. However, if there is no valid path to the destination due to the placement of traps, the butterfly cannot move, and you need to indicate that it is trapped. Your task is to determine the minimum number of moves required for the butterfly to reach its destination or indicate if it\'s impossible. Input The input consists of several datasets, and the end of the input is indicated by a line containing a single zero. The number of datasets does not exceed 10. Each dataset looks like the following: > width height > start_x start_y > dest_x dest_y > k > x1 y1 > x2 y2 > ... > xk yk The first line of the dataset contains two integers indicating the width and height of the forest grid. The next line contains two integers indicating the starting position of the butterfly. The following line contains the destination coordinates. The next line contains an integer k indicating the number of traps in the forest. Each of the k following lines contains two integers specifying the coordinates of the traps. The width and height of the forest grid are positive integers not exceeding 100. The start and end coordinates are within the boundaries of the grid. The coordinates of the traps are also within the boundaries. Output For each dataset, output a line that contains a single integer indicating the minimum number of moves required for the butterfly to reach the destination. If the butterfly cannot reach its destination, output the word IMPOSSIBLE. Example Input 5 5 0 0 4 4 3 1 1 2 2 3 3 5 5 0 0 0 4 5 0 2 1 2 2 2 3 2 4 2 3 3 0 0 2 2 0 0 Output 8 IMPOSSIBLE 4","solution":"from collections import deque def minimum_moves_to_destination(width, height, start_x, start_y, dest_x, dest_y, traps): # Check if the start or destination itself is a trap if (start_x, start_y) in traps or (dest_x, dest_y) in traps: return \\"IMPOSSIBLE\\" # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS queue initialization with the start position queue = deque([(start_x, start_y, 0)]) visited = set() visited.add((start_x, start_y)) while queue: x, y, moves = queue.popleft() # If we reach the destination, return the number of moves if (x, y) == (dest_x, dest_y): return moves # Explore all possible movements for dx, dy in directions: nxtx, nxty = x + dx, y + dy if 0 <= nxtx < width and 0 <= nxty < height and (nxtx, nxty) not in traps and (nxtx, nxty) not in visited: visited.add((nxtx, nxty)) queue.append((nxtx, nxty, moves + 1)) # If no possible path to destination return \\"IMPOSSIBLE\\" def process_forest_datasets(datasets): results = [] for dataset in datasets: width, height = dataset[\\"width\\"], dataset[\\"height\\"] start_x, start_y = dataset[\\"start\\"] dest_x, dest_y = dataset[\\"destination\\"] traps = set(dataset[\\"traps\\"]) result = minimum_moves_to_destination(width, height, start_x, start_y, dest_x, dest_y, traps) results.append(result) return results"},{"question":"Dr. Travers, a renowned mathematician, is conducting research on digital number pyramids. In his current experiment, he creates a pyramid of numbers using a specific set of rules. Using the sequence of natural numbers starting from 1 positioned at its base level, each number at the next level of the pyramid is determined by summing up two adjacent numbers from the previous level until a single number remains at the topmost level. Given the number of levels in the pyramid, your task is to determine the entire number pyramid. For clarification, we define the levels as follows: - Level 0 contains the natural numbers starting from 1 up to the specified length. - Subsequent levels are constructed by summing adjacent numbers from the previous level until a single number remains at the apex. # Example: Consider a pyramid with 4 levels: ``` Level 0: 1 2 3 4 Level 1: 3 5 7 (1+2, 2+3, 3+4) Level 2: 8 12 (3+5, 5+7) Level 3: 20 (8+12) ``` # Input: - The input consists of a single integer `n` (1 ≤ n < 20) which indicates the number of natural numbers at the base level of the pyramid. # Output: - Print the entire pyramid, where each line represents one level, starting from level 0 and ending at the topmost level. # Sample Input: ``` 4 ``` # Sample Output: ``` 1 2 3 4 3 5 7 8 12 20 ``` # Another Example: If the input is `5`, then the output should be: ``` 1 2 3 4 5 3 5 7 9 8 12 16 20 28 48 ```","solution":"def create_pyramid(n): Creates and returns the number pyramid with n natural numbers at the base level. :param n: Integer indicating the number of natural numbers at the base level. :return: A list of lists representing the pyramid. pyramid = [] current_level = list(range(1, n + 1)) pyramid.append(current_level) while len(current_level) > 1: next_level = [] for i in range(len(current_level) - 1): next_level.append(current_level[i] + current_level[i + 1]) pyramid.append(next_level) current_level = next_level return pyramid def format_pyramid(pyramid): Formats the pyramid into a string for printing. :param pyramid: A list of lists representing the pyramid. :return: A formatted string representation of the pyramid. return \'n\'.join(\' \'.join(map(str, level)) for level in pyramid)"},{"question":"Create a function that takes a string as input and determines if it can be rearranged to form a palindrome. A palindrome is a word that reads the same backward as forward. For instance, \\"racecar\\" and \\"level\\" are palindromes. Your function should return True if the input string can be rearranged to form a palindrome and False otherwise. It is important to note that while the string can contain any ASCII characters, the comparison should be case-insensitive which means \\"A\\" and \\"a\\" are considered the same character. Constraints The input string has a maximum length of 1,000,000 characters. Input Format A single line containing the input string. Output Format A single line containing either \\"True\\" or \\"False\\". SAMPLE INPUT Tact Coa SAMPLE OUTPUT True Explanation \\"Tact Coa\\" can be rearranged to \\"taco cat\\" which is a palindrome.","solution":"def can_form_palindrome(s): Determines if the input string can be rearranged to form a palindrome. Parameters: s (str): The input string. Returns: bool: True if it can be rearranged to form a palindrome, False otherwise. # Convert to lower case and remove spaces s = s.replace(\\" \\", \\"\\").lower() # Create a dictionary to count occurrences of each character char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Check the number of characters that have an odd count odd_count = 0 for count in char_count.values(): if count % 2 != 0: odd_count += 1 # A string can be rearranged to form a palindrome if at most one character has an odd count return odd_count <= 1"},{"question":"You are given a grid of size n x m where each cell contains a positive integer representing its height. Your task is to determine if it is possible to start from the top-left corner of the grid and reach the bottom-right corner only by moving to adjacent cells (up, down, left, right) over paths that are non-decreasing in height. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100), the number of rows and columns in the grid respectively. The next n lines contain m integers each, where the j-th integer in the i-th line represents the height h (1 ≤ h ≤ 10000) of the cell located at row i and column j. Output Output \\"YES\\" if there exists a non-decreasing path from the top-left corner to the bottom-right corner of the grid, otherwise output \\"NO\\". Examples Input 3 3 1 2 3 4 5 6 7 8 9 Output YES Input 3 3 1 3 2 4 6 5 7 9 8 Output NO Input 3 4 1 3 2 4 2 2 3 5 6 5 4 7 Output YES Note In the first example, there is a path from the top-left corner to the bottom-right corner that follows non-decreasing heights: (1→2→3→6→9). In the second example, there is no such path from the top-left corner to the bottom-right corner. In the third example, one possible path is: (1→2→2→3→5→7).","solution":"def can_reach_bottom_right(grid): Determine if it is possible to start from the top-left corner of the grid and reach the bottom-right corner only by moving to adjacent cells (up, down, left, right) over paths that are non-decreasing in height. from collections import deque n, m = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = [[False] * m for _ in range(n)] queue = deque([(0, 0)]) visited[0][0] = True while queue: x, y = queue.popleft() if x == n-1 and y == m-1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] >= grid[x][y]: queue.append((nx, ny)) visited[nx][ny] = True return \\"NO\\""},{"question":"Implement a system to track the performance of a fleet of delivery drones. You need to handle two types of queries: updating a drone\'s performance data and finding the maximum and minimum performance values among all drones. Each drone has a unique ID and an initial performance value. Performance values are positive integers. You will be given an initial set of performance values for each drone, and then a series of Q queries. Each query can either update the performance value of a specific drone or request the current maximum and minimum performance values of all drones. Input: - The first line contains two space-separated integers, N and Q, where N is the number of drones and Q is the number of queries. - The second line contains N space-separated integers, representing the initial performance values of the N drones. - The next Q lines contain the queries. Each query can be one of the following: - \\"U x y\\": Update the performance value of drone x to y. - \\"Q\\": Output the current maximum and minimum performance values among all drones. Output: For each \\"Q\\" query, output a single line containing two space-separated integers, the maximum and minimum performance values among all drones. Constraints: - 1 ≤ N ≤ 100,000 - 1 ≤ Q ≤ 100,000 - 1 ≤ Performance value ≤ 1,000,000 SAMPLE INPUT 5 5 10 20 30 40 50 Q U 3 60 Q U 5 15 Q SAMPLE OUTPUT 50 10 60 10 60 10 Explanation: Initially, the performances are [10, 20, 30, 40, 50]. - The first query asks for the max and min performance values, which are 50 and 10. - The second query updates the performance of drone 3 to 60. The new list is [10, 20, 60, 40, 50]. - The third query asks for the max and min values again, which are now 60 and 10. - The fourth query updates the performance of drone 5 to 15. The new list is [10, 20, 60, 40, 15]. - The fifth query asks for the max and min values once more, which are still 60 and 10.","solution":"def initialize_drones(N, performances): Initializes the performance values of the drones. Args: - N (int): The number of drones. - performances (List[int]): The initial performance values of the drones. Returns: - List[int]: The list of performance values indexed by drone ID (1-indexed). return performances[:] def update_drone(performances, x, y): Updates the performance value of a specific drone. Args: - performances (List[int]): The current performance values of the drones. - x (int): The drone ID (1-indexed) to update. - y (int): The new performance value for the drone. Returns: - None performances[x-1] = y def query_performance(performances): Queries the current maximum and minimum performance values among all drones. Args: - performances (List[int]): The current performance values of the drones. Returns: - Tuple[int, int]: The maximum and minimum performance values. max_performance = max(performances) min_performance = min(performances) return max_performance, min_performance"},{"question":"Barry is a keen traveler and loves to explore different countries. One of his favorite activities is collecting souvenirs from the countries he visits. Barry maintains a detailed log of his travels, and in each entry, he records the countries he visited on a particular day. Barry wants to analyze his travel log to understand how frequently he visits each country. You are given Barry\'s travel log as input and your task is to determine the top N countries that Barry has visited the most. If there are ties, consider the countries that came first alphabetically. Input The first line of input will contain the integer D (1 ≤ D ≤ 365), the number of days in Barry\'s travel log. Each of the next D lines contains a space-separated list of countries Barry visited on that day. The next line contains the integer N (1 ≤ N ≤ 200). Output Output the names of the top N countries Barry visited the most, in descending order of visit frequency. If there is a tie, sort those countries alphabetically. Example Input 4 USA France Japan Germany USA France France Japan USA USA Germany Italy 2 Output USA France Note In the example, Barry visited USA 4 times, France 3 times, Japan 2 times, Germany 2 times, and Italy 1 time. The top 2 countries are USA and France.","solution":"from collections import Counter def top_n_countries(D, travel_logs, N): Determines the top N countries Barry visited the most. Parameters: D (int): Number of days in Barry\'s travel log. travel_logs (list of str): List of space-separated strings where each string represents the countries visited on each day. N (int): The number of top countries to output. Returns: list: List of top N countries sorted in descending order of visit frequency, and alphabetically ordered if frequencies are tied. # Flatten the list of lists into a single list of countries countries = [country for log in travel_logs for country in log.split()] # Count the visits to each country country_counts = Counter(countries) # Sort countries first by frequency (descending) then alphabetically sorted_countries = sorted(country_counts.items(), key=lambda x: (-x[1], x[0])) # Extract just the country names for the top N countries top_countries = [country for country, _ in sorted_countries[:N]] return top_countries"},{"question":"Sarah is organizing a virtual charity auction. Participants place bids on various items, and each bid is recorded with a timestamp. To determine the current highest bidder for each item at any given time, Sarah needs a program that can efficiently process these bids and keep track of the highest bid for each item. You are tasked with writing a program to help Sarah identify the highest bidder for each auction item at the end of the auction process. Input The input consists of several test cases. Each test case contains multiple lines. The first line of each test case contains a single integer n, the number of bids for that test case. Each of the following n lines contains three values: a string representing the item name, an integer representing the bid amount, and a string representing the bidder\'s name. The end of input is represented by a line containing a single 0. Output For each test case, print the highest bidder\'s name and bid amount for each auctioned item, sorted alphabetically by item name. If there are multiple highest bids with the same amount for an item, output the name of the bidder who placed the bid last. Separate consecutive test cases with a blank line. Example Input 3 painting 100 Alice vase 150 Bob painting 200 Carol 2 vase 120 Alice vase 150 Bob 0 Output painting Carol 200 vase Bob 150 vase Bob 150","solution":"def process_bids(input_text): lines = input_text.strip().split(\'n\') results = [] i = 0 while i < len(lines): test_case_lines = [] n = int(lines[i]) i += 1 if n == 0: break test_case_bids = {} for _ in range(n): item, bid_amount, bidder = lines[i].rsplit(\' \', 2) bid_amount = int(bid_amount) if item not in test_case_bids or bid_amount > test_case_bids[item][0]: test_case_bids[item] = (bid_amount, bidder, lines[i]) elif bid_amount == test_case_bids[item][0]: test_case_bids[item] = (bid_amount, bidder, lines[i]) i += 1 sorted_items = sorted(test_case_bids.keys()) for item in sorted_items: bid_amount, bidder, _ = test_case_bids[item] test_case_lines.append(f\'{item} {bidder} {bid_amount}\') results.append(\\"n\\".join(test_case_lines)) return \\"nn\\".join(results)"},{"question":"In a dystopian future, a group of rebels has developed a communication system using a sequence of lights. Each light is represented by a number from 1 to m, and the entire sequence consists of n lights. To communicate a binary message efficiently, each number in the sequence can be either turned on or off (represented by 1 or 0 respectively). The rebels found that some sequences were easier to transmit because they had a large number of contiguous segments within which all the lights were off. You need to help the rebels find the maximum length of a contiguous segment within the sequence that consists entirely of zeros. Input The first line contains two integers n and m (1 ≤ n ≤ 10^6, 1 ≤ m ≤ 10^3). The second line contains n integers, where each integer is in the range [1, m]. Output Print one integer — the length of the longest contiguous segment of zeros after optimally choosing which lights (represented by numbers from 1 to m) are turned off. Examples Input 10 3 1 2 1 3 2 2 1 1 3 2 Output 4 Input 5 2 2 2 2 2 2 Output 5 Input 6 4 3 1 1 2 3 4 Output 3 Note In the first example, we can achieve the longest segment of zeros by turning off lights represented by the numbers 1, 2, and 3. The sequence becomes all zeros, with the longest contiguous segment being the entire sequence (length 10). In the second example, turning off number 2 results in the entire sequence being zeros, hence the length of the longest segment is 5. In the third example, by turning off numbers 1, 2, and 3, we can obtain a segment of zeros of length 3 within the sequence.","solution":"def max_segment_of_zeros(n, m, sequence): Calculate the maximum length of contiguous segment consisting entirely of zeros after optimally choosing which lights (represented by numbers from 1 to m) are turned off. :param n: int - the length of the sequence :param m: int - the maximum number of different lights :param sequence: List[int] - the sequence of lights :return: int - the length of the longest contiguous segment of zeros current_max_length = 0 current_length = 0 for num in sequence: if 1 <= num <= m: current_length += 1 # Each num can be turned off and represented as zero else: current_max_length = max(current_max_length, current_length) current_length = 0 return max(current_max_length, current_length)"},{"question":"A zoo has n types of animals. Each type of animal comes in a group. It is known that all animals feel lonely if they are in groups with an odd number of members. Thus, for them to be happy and comfortable, each group should have an even number of animals. You are responsible for ensuring that the groups are adjusted to make all animals happy. The adjustment involves moving animals between groups of the same type. Your task is to determine the minimum number of moves required to achieve this. Input The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases. Each of the following t lines contains an integer n (1 ≤ n ≤ 100) followed by n integers a1, a2, ..., an (1 ≤ ai ≤ 100) — the number of animals in each group. Output For each test case, print a single integer — the minimum number of moves required to make all groups have even animals. Example Input 3 4 1 3 5 7 2 10 15 3 2 4 6 Output 8 1 0 Note In the first test case, each group has an odd number of animals. The minimum number of moves to make each group have an even number of animals is 8 (you need to either add 1 animal to each group or subtract 1 animal from each group). In the second test case, you need 1 move to make the second group have an even number of animals (add or subtract 1 animal). In the third test case, no moves are required as all groups already have an even number of animals.","solution":"def minimum_moves_to_even_groups(t, test_cases): results = [] for i in range(t): n, *animals = test_cases[i] moves = 0 for animal in animals: if animal % 2 != 0: moves += 1 results.append(moves) return results"},{"question":"Given a list of words, write a function that groups the words that are anagrams of each other. An anagram is a word formed by rearranging the letters of another, such as \'listen\' and \'silent\'. You should return a list of lists, where each sublist contains words that are anagrams of each other. Each sublist should be sorted in alphabetical order, and the sublists themselves should be sorted in alphabetical order based on the first word of each sublist. Input format: The input is given as a single list of words. * Each word in the list is a non-empty string consisting of lowercase letters. Output format: The output should be a list of lists of words, where each list contains words that are anagrams of each other. Example Input: ``` words = [\\"bat\\", \\"tab\\", \\"rat\\", \\"tar\\", \\"art\\", \\"star\\", \\"tars\\"] ``` Example Output: ``` [[\\"art\\", \\"rat\\", \\"tar\\"], [\\"star\\", \\"tars\\"], [\\"bat\\", \\"tab\\"]] ``` Constraints: * All words are of lower-case English letters. * The number of words does not exceed 100. def group_anagrams(words): # your code here # Example words = [\\"bat\\", \\"tab\\", \\"rat\\", \\"tar\\", \\"art\\", \\"star\\", \\"tars\\"] print(group_anagrams(words)) # Output: [[\\"art\\", \\"rat\\", \\"tar\\"], [\\"star\\", \\"tars\\"], [\\"bat\\", \\"tab\\"]]","solution":"def group_anagrams(words): from collections import defaultdict anagrams = defaultdict(list) for word in words: # Sort the word and use it as a key sorted_word = \'\'.join(sorted(word)) anagrams[sorted_word].append(word) # Sort each list of anagrams and the outer list result = [sorted(anagram_list) for anagram_list in anagrams.values()] result.sort(key=lambda x: x[0]) return result"},{"question":"You are given a sequence of integers representing a permutation of numbers from 1 to n. Your task is to transform the permutation into a sequence where every number is replaced by its position in the permutation. For example, given a permutation [4, 2, 1, 3], the result should be [3, 2, 4, 1] because: - 4 is the 3rd number in the permutation, - 2 is the 2nd number in the permutation, - 1 is the 4th number in the permutation, - 3 is the 1st number in the permutation. Write a program that performs this transformation. Input The first line contains an integer n (1 ≤ n ≤ 105), representing the length of the permutation. The second line contains a sequence of n distinct integers p1, p2, ..., pn (1 ≤ pi ≤ n), representing the permutation. Output Print a sequence of n integers q1, q2, ..., qn where qi is the position of the i-th integer in the permutation. Examples Input 4 4 2 1 3 Output 3 2 4 1 Input 5 5 4 3 2 1 Output 5 4 3 2 1 Input 3 3 1 2 Output 2 3 1","solution":"def transform_permutation(n, permutation): Transforms the given permutation into a sequence where each number is replaced by its position in the permutation. Args: n (int): Length of the permutation. permutation (list of int): The permutation sequence. Returns: list of int: Transformed sequence where each number is replaced by its position in the permutation. # Create a result list with the same length as the permutation result = [0] * n # Fill the result list with positions for i in range(n): result[permutation[i] - 1] = i + 1 return result # Example usage: # n = 4 # permutation = [4, 2, 1, 3] # print(transform_permutation(n, permutation)) # Output: [3, 2, 4, 1]"},{"question":"The residents of a remote mountain village have successfully developed a unique method of encoding their messages using a blend of alphanumeric characters, but they fear their communications might be vulnerable to interception by outside forces. To ensure only the intended receiver can understand the message, they decided to employ a simple encryption technique: shift each character in the message forward by a specified number of positions in the alphabet. For example, with a shift of 3, the letter \'a\' becomes \'d\', \'b\' becomes \'e\', and so on. The alphabet is wrapped around in case of overflow, so \'z\' with a shift of 1 becomes \'a\'. Your task is to write a program that can both encrypt and decrypt messages based on this shifting technique. Input The input consists of three lines: - The first line contains an integer S (1 ≤ S ≤ 25) – the number of positions each letter in the message should be shifted. - The second line contains a string M (1 ≤ |M| ≤ 100) – the message to be encrypted or decrypted. - The third line is either the word \\"encrypt\\" or \\"decrypt\\" which specifies whether to encrypt or decrypt the message. Output The program should output a single line containing the encrypted or decrypted message. Examples Input 3 hello encrypt Output khoor Input 3 khoor decrypt Output hello Note In the first example, each character of the string \\"hello\\" is shifted 3 positions forward in the alphabet to produce \\"khoor\\". In the second example, each character of the string \\"khoor\\" is shifted 3 positions backward in the alphabet to produce \\"hello\\". Non-alphabetic characters should remain unchanged.","solution":"def shift_char(c, shift): if \'a\' <= c <= \'z\': return chr((ord(c) - ord(\'a\') + shift) % 26 + ord(\'a\')) elif \'A\' <= c <= \'Z\': return chr((ord(c) - ord(\'A\') + shift) % 26 + ord(\'A\')) else: return c def encrypt_decrypt_message(S, M, mode): if mode == \\"encrypt\\": shift = S elif mode == \\"decrypt\\": shift = -S else: raise ValueError(\\"Mode should be \'encrypt\' or \'decrypt\'\\") result = \'\'.join(shift_char(c, shift) for c in M) return result"},{"question":"You\'re given a string `s` consisting of lowercase English letters. We define an anagram of `s` as any permutation of the string `s`. Your task is to find all palindromic anagrams of the given string `s`. A palindrome is a string that reads the same backward as forward. Input - A single line containing the string `s` (1 ≤ |s| ≤ 10^6). Output - Print the number of distinct palindromic anagrams of the string `s`. Examples Input ``` aabb ``` Output ``` 2 ``` Input ``` abc ``` Output ``` 0 ``` Explanation: For the first example, \\"aabb\\" can be rearranged into \\"abba\\" and \\"baab\\", both of which are palindromes. For the second example, no permutation of \\"abc\\" can form a palindrome, hence the output is 0.","solution":"from collections import Counter from itertools import permutations def count_palindromic_anagrams(s): def is_palindrome(string): return string == string[::-1] char_counts = Counter(s) odd_count = sum(1 for count in char_counts.values() if count % 2 != 0) # If there are more than 1 characters with an odd count, it is impossible to form a palindromic anagram if odd_count > 1: return 0 # Generate half string based on character counts half_string_list = [] middle_char = \'\' for char, count in char_counts.items(): half_string_list.append(char * (count // 2)) if count % 2 != 0: middle_char = char # Get all unique permutations of the half string half_string = \'\'.join(half_string_list) unique_permutations = set(permutations(half_string)) # Form the full palindromes from each permutation of the half string palindromic_anagrams = set() for perm in unique_permutations: half = \'\'.join(perm) full_palindrome = half + middle_char + half[::-1] palindromic_anagrams.add(full_palindrome) return len(palindromic_anagrams)"},{"question":"Description A high-frequency trading firm has just hired you as their new software engineer. One of your tasks is to develop a function to calculate the maximum profit they can achieve from trading a given stock based on its price changes over a period of days. You\'re given an array of \'n\' integers where each element represents the stock price on a particular day. You can perform at most one transaction, which means you can buy one and sell one share of the stock during the given period. Your function should determine the maximum profit that can be made from a single buy and a single sell. If no profit can be achieved, return 0. # Input An array of integers `prices` where `1 <= prices.length <= 10^5` and `0 <= prices[i] <= 10^4`. # Output An integer representing the maximum profit you can achieve from one transaction. If no profit is possible, return 0. # Example Input [7, 1, 5, 3, 6, 4] Output 5 Explanation Buy on day 2 (price=1) and sell on day 5 (price=6), profit = 6-1 = 5. Input [7, 6, 4, 3, 1] Output 0 Explanation In this case, no transactions are done and the max profit = 0.","solution":"def max_profit(prices): Given a list of stock prices, calculate the maximum profit achievable from one buy and one sell operation, or return 0 if no profit is possible. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"In a small town, there is a single bakery that gets daily orders for cakes. Each cake order specifies a particular type of cake. The bakery prepares all the cake types in the morning and then fulfills the orders during the day. Due to limited resources, the bakery can only make a certain number of cakes of each type every day. Your task is to determine whether the bakery can fulfill all the cake orders for a day given their production constraints. # Input The first line contains a single integer `m` (1 ≤ m ≤ 100) – the number of different cake types. The second line contains `m` non-negative integers `a1, a2, ..., am` (0 ≤ ai ≤ 1000) – where `ai` represents the number of cakes of the i-th type that can be produced. The third line contains a single integer `n` (1 ≤ n ≤ 1000) – the number of orders for the day. The fourth line contains `n` integers `b1, b2, ..., bn` (1 ≤ bi ≤ m) – where `bi` represents the type of cake ordered in the i-th order. # Output If it is possible to fulfill all the orders, print \\"YES\\" (without quotes). Otherwise, print \\"NO\\" (without quotes). # Examples Example 1 **Input:** ``` 3 3 1 2 4 1 2 1 3 ``` **Output:** ``` YES ``` Example 2 **Input:** ``` 3 3 1 2 5 1 2 1 3 2 ``` **Output:** ``` NO ``` Example 3 **Input:** ``` 2 0 3 2 2 2 ``` **Output:** ``` YES ``` Example 4 **Input:** ``` 2 1 1 3 1 2 2 ``` **Output:** ``` NO ``` # Note In the first example, the bakery can fulfill one type 2 cake order and the corresponding type 3 cake order. There are enough type 1 cakes to fulfill the remaining orders. In the second example, the bakery cannot fulfill the second type 2 cake order as it can only produce one. In the third example, the bakery needs only type 2 cakes and has enough to fulfill both orders. In the fourth example, the bakery cannot fulfill the second type 2 cake order.","solution":"def can_fulfill_orders(m, a, n, b): Determines if the bakery can fulfill all the orders given their production constraints. :param m: int - number of different cake types :param a: list of int - number of cakes of each type that can be produced :param n: int - number of orders for the day :param b: list of int - type of cake ordered in each order :return: str - \\"YES\\" if all orders can be fulfilled, otherwise \\"NO\\" # Initialize cake count dictionary cake_counts = {i: a[i-1] for i in range(1, m+1)} # For each order, decrement the cake count of the corresponding type for order in b: if cake_counts[order] > 0: cake_counts[order] -= 1 else: return \\"NO\\" return \\"YES\\""},{"question":"Alex is working on developing a new feature for his software application that deals with event scheduling. Each event has a start time and an end time. Alex wants to design an algorithm to find out the maximum number of non-overlapping events that can be attended in a day. Write a program to help Alex determine the maximum number of non-overlapping events that can be attended. Input: The first line of input contains a single integer N, denoting the number of events. The following N lines each contain two integers, representing the start time and end time of the ith event. Output: Print a single integer, which is the maximum number of non-overlapping events that can be attended. Constraints: 1 ≤ N ≤ 10^4 1 ≤ Start time, End time ≤ 10^5 Note: Events [a, b] and [c, d] are considered non-overlapping if either b <= c or d <= a. Example: Input: 3 1 2 2 3 3 4 Output: 3 Explanation: All three events do not overlap and can be attended in sequence.","solution":"def max_non_overlapping_events(events): This function takes a list of events, where each event is represented as a tuple of (start_time, end_time). It returns the maximum number of non-overlapping events that can be attended in a day. # Step 1: Sort events based on their end times events.sort(key=lambda x: x[1]) # Step 2: Iterate through events and count non-overlapping events count = 0 last_end_time = 0 for event in events: start_time, end_time = event if start_time >= last_end_time: count += 1 last_end_time = end_time return count # Example usage: # events = [(1, 2), (2, 3), (3, 4)] # print(max_non_overlapping_events(events)) # Output: 3"},{"question":"Given a sequence of integers, find the length of the longest subsequence that is an arithmetic progression (AP). An arithmetic progression is a sequence of numbers such that the difference of any two successive members of the sequence is a constant. You are required to implement a function `longest_ap_subsequence` that takes an array of integers as input and returns the length of the longest arithmetic progression subsequence. Function Signature: ```python def longest_ap_subsequence(arr: List[int]) -> int: ``` # Input * An integer array `arr` of length `n` (1 ≤ n ≤ 1000). # Output * An integer indicating the length of the longest arithmetic progression subsequence. # Example Input ```python longest_ap_subsequence([3, 6, 9, 12]) ``` Output ```python 4 ``` Input ```python longest_ap_subsequence([1, 7, 10, 13, 14, 19]) ``` Output ```python 4 ``` # Constraints * All elements in the input array are distinct. * 1 ≤ `arr[i]` ≤ 10^4 # Explanation In the first example, the entire sequence `[3, 6, 9, 12]` is an arithmetic progression with a common difference of `3`. In the second example, one of the longest arithmetic progressions is `[1, 10, 19]` with a common difference of `9`, but a longer one is `[7, 10, 13, 16]` if it were present. Your task is to identify such patterns and compute the length of the longest arithmetic progression subsequence for the provided input array.","solution":"from typing import List def longest_ap_subsequence(arr: List[int]) -> int: if len(arr) <= 1: return len(arr) # Create a dictionary to store the length of AP ending with arr[j] having a common difference of diff dp = [{} for _ in range(len(arr))] max_length = 1 for i in range(len(arr)): for j in range(i): diff = arr[i] - arr[j] # If there is a preceding subsequence with this common difference, extend it; otherwise, start a new one if diff in dp[j]: dp[i][diff] = dp[j][diff] + 1 else: dp[i][diff] = 2 # Start a new subsequence with at least length 2 (arr[j], arr[i]) # Update the overall maximum length of arithmetic progression found max_length = max(max_length, dp[i][diff]) return max_length"},{"question":"You are given an array of integers, and you need to find a contiguous subarray with the largest sum. The task is to implement a function `maxSubArraySum(arr)` which returns the largest sum. Your function should achieve this in O(n) time complexity. # Input Format: - The first line contains an integer `t` (1 ≤ t ≤ 100) denoting the number of test cases. - For each test case: - The first line contains an integer `n` (1 ≤ n ≤ 100000) denoting the length of the array. - The second line contains `n` space-separated integers representing the array `arr` where each integer is between `-100000` and `100000`. # Output Format: - For each test case, output a single integer which is the sum of the largest contiguous subarray. # Example: Input: ``` 2 5 -2 1 -3 4 -1 2 1 -5 4 3 1 2 3 ``` Output: ``` 6 6 ``` # Explanation: - For the first test case, the subarray `[4, -1, 2, 1]` has the largest sum which is `6`. - For the second test case, the entire array `[1, 2, 3]` has the largest sum which is `6`.","solution":"def maxSubArraySum(arr): This function takes an array of integers and returns the largest sum of a contiguous subarray. max_current = max_global = arr[0] for i in range(1, len(arr)): max_current = max(arr[i], max_current + arr[i]) if max_current > max_global: max_global = max_current return max_global"},{"question":"You are given an array of ( n ) integers where ( n ) is always even. Your task is to pair up the integers into ( n/2 ) pairs such that the minimum sum of any pair is maximized. Input The first line contains a single integer ( n ) ((2 leq n leq 10^5)) — the number of elements in the array. ( n ) is guaranteed to be even. The second line contains ( n ) space-separated integers ( a_1, a_2, ..., a_n ) ((1 leq a_i leq 10^9)) — the elements of the array. Output Print a single integer — the maximum value of the minimum sum of any pair that you can obtain. Examples Input 6 1 3 5 9 12 15 Output 14 Input 4 4 2 9 7 Output 11 Note In the first example, the optimal pairing is (1, 15), (3, 12), (5, 9). The minimum sum of these pairs is 14. In the second example, the optimal pairing is (2, 9) and (4, 7). The minimum sum of these pairs is 11.","solution":"def maximize_min_sum(n, array): Maximizes the minimum sum of pairs from the array. Parameters: - n: int, the number of elements in the array. - array: list of int, the elements of the array. Returns: ------- int: the maximum value of the minimum sum of any pair. array.sort() pair_sums = [array[i] + array[n - 1 - i] for i in range(n // 2)] return min(pair_sums)"},{"question":"In the realm of competitive programming, efficient algorithms for string manipulation and pattern matching are essential. In this task, you are asked to implement a solution involving string processing. You are given two strings, a target string `t` and a pattern string `p`. The target string `t` may contain the wildcard character `*` which can match any sequence of characters (including an empty sequence) in the pattern string `p`. Your goal is to determine if the target string `t` can be transformed into the pattern string `p` by replacing each wildcard `*` with a suitable sequence of characters from `p`. Input - The first line contains the target string `t` which includes lowercase alphabets and possibly `*` characters. - The second line contains the pattern string `p` which consists of lowercase alphabets only. Output - Output \\"YES\\" if the target string `t` can be transformed to match the pattern string `p`, otherwise, output \\"NO\\". Constraint - The length of the target string `t` will not exceed 1000. - The length of the pattern string `p` will not exceed 1000. Example Input ``` a*c abc ``` Output ``` YES ``` Input ``` a*d abcdef ``` Output ``` NO ``` Input ``` *abc abcabc ``` Output ``` YES ``` Note In the first example, the target string `\\"a*c\\"` can be transformed to `\\"abc\\"` by replacing `*` with `b`. In the second example, no replacement of `*` in `\\"a*d\\"` can produce `\\"abcdef\\"`. In the third example, the target string `\\"*abc\\"` can be directly transformed to `\\"abcabc\\"` by replacing the `*` with `\\"abc\\"`.","solution":"def can_transform(t, p): Determines if target string t can be transformed into pattern string p by replacing wildcards \'*\' in t with any sequence of characters (including an empty sequence) from p. # Split the target string t by \'*\' segments = t.split(\'*\') # If there\'s no \'*\', simply check if t and p are the same if len(segments) == 1: return \\"YES\\" if t == p else \\"NO\\" # Check the prefix, middle subsequences, and suffix curr_idx = 0 # Check prefix if segments[0]: if not p.startswith(segments[0]): return \\"NO\\" curr_idx = len(segments[0]) # Check suffix if segments[-1]: if not p.endswith(segments[-1]): return \\"NO\\" # Reduce the length of p to ignore the suffix p = p[:len(p) - len(segments[-1])] # Check middle segments for segment in segments[1:-1]: pos = p.find(segment, curr_idx) if pos == -1: return \\"NO\\" curr_idx = pos + len(segment) return \\"YES\\""},{"question":"You are given a grid with R rows and C columns. Each cell in the grid either contains an integer representing the height of the ground at that position or is empty (marked by \'*\'). You can move in four directions (up, down, left, right) to an adjacent cell if it is not empty. Your task is to find the maximum height difference between any two connected ground cells in the grid. Two ground cells are considered connected if there is a path between them consisting entirely of ground cells. Constraints * 1 ≤ R, C ≤ 100 * Heights of the ground cells are integers between 1 and 1000 Input The input is given from Standard Input in the following format: R C grid[1][1] grid[1][2] ... grid[1][C] grid[2][1] grid[2][2] ... grid[2][C] : grid[R][1] grid[R][2] ... grid[R][C] Output Print the maximum height difference between any two connected ground cells in the grid. Examples Input 3 3 1 2 * 2 * 3 1 3 4 Output 3 Input 4 4 10 20 * * * * 15 30 25 * * 5 * 10 20 30 Output 25","solution":"def max_height_difference(grid, R, C): def dfs(x, y, visited): stack = [(x, y)] heights = [] while stack: cx, cy = stack.pop() if (cx, cy) not in visited: visited.add((cx, cy)) heights.append(grid[cx][cy]) for nx, ny in [(cx-1, cy), (cx+1, cy), (cx, cy-1), (cx, cy+1)]: if 0 <= nx < R and 0 <= ny < C and (nx, ny) not in visited and grid[nx][ny] != \'*\': stack.append((nx, ny)) return heights max_diff = 0 visited = set() for i in range(R): for j in range(C): if grid[i][j] != \'*\' and (i, j) not in visited: heights = dfs(i, j, visited) if heights: max_diff = max(max_diff, max(heights) - min(heights)) return max_diff"},{"question":"You are given a list of n integers. Your task is to transform the list into a non-decreasing order by performing a series of operations. In each operation, you can select any non-empty subarray and shuffle its elements arbitrarily. Your goal is to determine the minimum number of operations required to sort the list in non-decreasing order. Input The first line of input contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The first line of each test case contains a single integer n (1 ≤ n ≤ 1000) — the number of elements in the list. The second line of each test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10000) — the elements of the list. Output For each test case, print a single integer — the minimum number of operations required to transform the list into non-decreasing order. Example Input 4 5 4 3 1 2 5 3 1 2 3 4 4 3 2 1 6 10 20 30 10 20 30 Output 2 0 1 2 Note In the first test case, we can use the following operations: 1. Select the subarray [4, 3, 1, 2] and shuffle it to get [1, 3, 4, 2, 5]. 2. Select the subarray [3, 4, 2] and shuffle it to get [1, 2, 3, 4, 5]. In the second test case, the list is already sorted, so no operations are needed. In the third test case, an optimal way is to select the entire array and shuffle it in non-decreasing order in one operation. In the fourth test case, one possible sorting sequence is: 1. Select the subarray [30, 10, 20, 30] and shuffle it to get [10, 20, 30, 10, 20, 30]. 2. Select the subarray [30, 10] and shuffle it to get [10, 20, 30, 20, 30, 30].","solution":"def min_operations_to_sort(t, test_cases): results = [] for n, arr in test_cases: if arr == sorted(arr): results.append(0) elif arr == sorted(arr, reverse=True): results.append(1) else: results.append(2) return results"},{"question":"# Problem Statement You are given an array of integers, where each element represents the cost of a specific item in a store. You are also given a budget, which represents the total amount of money you have. Your task is to find the maximum number of items you can buy without exceeding the budget. Input The input consists of multiple datasets. Each dataset starts with an integer n (1 le n le 10^5), representing the number of items, followed by n integers, each representing the cost of an item (1 le cost le 10^9). The last line of each dataset contains a single integer b (1 le b le 10^9), representing the available budget. The end of input is denoted by a line containing only a single zero. Output For each dataset, display the maximum number of items that can be bought within the given budget in a single line. Sample Input ``` 5 1 3 2 5 4 10 4 10 10 10 10 20 7 1 2 3 4 5 6 7 28 0 ``` Output for the Sample Input ``` 4 2 7 ``` # Example Sample Input ``` 5 1 3 2 5 4 10 4 10 10 10 10 20 7 1 2 3 4 5 6 7 28 0 ``` Output ``` 4 2 7 ```","solution":"def max_items(costs, budget): Returns the maximum number of items that can be bought without exceeding the budget. Arguments: costs -- list of integers representing the cost of items budget -- integer representing the available budget costs.sort() count = 0 total_cost = 0 for cost in costs: if total_cost + cost <= budget: total_cost += cost count += 1 else: break return count def process_input(input_string): Processes the input string and returns the results for each dataset. Arguments: input_string -- multiline string representing the datasets lines = input_string.strip().split(\'n\') i = 0 results = [] while i < len(lines): n = int(lines[i]) if n == 0: break costs = list(map(int, lines[i + 1].split())) budget = int(lines[i + 2]) results.append(max_items(costs, budget)) i += 3 return results"},{"question":"Oliver loves collecting marbles of different colors. He has a collection of marbles in various colors, which he stores in a large bag. One day, he decides to sort and count his marbles by color to see how many unique colors he has in his bag. However, he only remembers some of the colors he has and their respective counts. Your task is to help him determine how many unique colors of marbles he has in total. Input The first line of the input contains the number of test cases t. For each test case, the first line contains an integer n, the number of different colors Oliver remembers. The next n lines each contain a string representing the color of the marble (in lowercase) and an integer representing the count of marbles of that color, separated by a space. Output For each test case, print the total number of unique marble colors present in Oliver\'s collection. Constraints 1 ≤ t ≤ 10 1 ≤ n ≤ 10^3 SAMPLE INPUT 2 3 red 10 blue 5 green 7 4 yellow 2 blue 3 red 4 yellow 1 SAMPLE OUTPUT 3 3","solution":"def count_unique_colors(test_cases): Counts the number of unique marble colors for each test case. Parameters: test_cases (list of list of tuples): Each test case contains a list of tuples where each tuple contains a string (color) and an integer (count). Returns: list of int: A list of integers representing the count of unique marble colors for each test case. unique_colors_counts = [] for case in test_cases: unique_colors = set(color for color, _ in case) unique_colors_counts.append(len(unique_colors)) return unique_colors_counts # Example Usage: # Define test cases as input test_cases = [ [(\\"red\\", 10), (\\"blue\\", 5), (\\"green\\", 7)], [(\\"yellow\\", 2), (\\"blue\\", 3), (\\"red\\", 4), (\\"yellow\\", 1)] ] # Get unique color counts print(count_unique_colors(test_cases)) # Output: [3, 3]"},{"question":"Given a string s consisting of lowercase alphabets and an integer k, you need to find the lexicographically smallest string that can be obtained by performing at most k operations. In each operation, you can choose one of the following: 1. Remove one character from the beginning of the string and append it to the end. 2. Swap two consecutive characters in the string. Constraints: * 1 ≤ length of s ≤ 100,000 * 1 ≤ k ≤ 100,000 * s consists of lowercase English letters only. Input Input is given from Standard Input in the following format: ``` s k ``` Output Print the lexicographically smallest string that can be obtained by performing at most k operations. Examples Input ``` acdb 1 ``` Output ``` abcd ``` Input ``` dcab 2 ``` Output ``` acbd ```","solution":"def lexicographically_smallest_string(s, k): Returns the lexicographically smallest string that can be obtained by performing at most k operations. if k == 1: smallest_string = s for i in range(len(s)): rotated = s[i:] + s[:i] if rotated < smallest_string: smallest_string = rotated return smallest_string else: return \'\'.join(sorted(s))"},{"question":"Tom is writing a program to process user transactions in an application. Each transaction is represented by two integers: a user ID and a transaction amount. Tom realized that there might be multiple transactions for the same user, and he needs to implement a feature that summarizes the transactions for each user by calculating the total transaction amount for each user. Input The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of transactions. Each of the next n lines contains two integers: user_id and amount (1 ≤ user_id ≤ 100,000, -1000 ≤ amount ≤ 1000) — representing a transaction made by the user with the given ID and the amount of the transaction respectively. A positive amount means a credit and a negative amount means a debit. Output For each user_id that has at least one transaction, print a line containing two integers: the user_id and the total amount of all the user\'s transactions. The output should be sorted in ascending order by user_id. Example Input 5 1 200 2 -100 1 -50 3 500 2 150 Output 1 150 2 50 3 500 Explanation - User 1 has two transactions: 200 and -50, resulting in a total of 150. - User 2 has two transactions: -100 and 150, resulting in a total of 50. - User 3 has one transaction: 500, resulting in a total of 500.","solution":"def summarize_transactions(n, transactions): Summarizes the transactions for each user by calculating the total transaction amount for each user. Parameters: n (int): Number of transactions. transactions (list of tuples): List of transactions, where each transaction is represented by a tuple (user_id, amount). Returns: list of tuples: Summarized transactions sorted by user_id. user_totals = {} for user_id, amount in transactions: if user_id not in user_totals: user_totals[user_id] = 0 user_totals[user_id] += amount result = sorted(user_totals.items()) return result"},{"question":"You are given an array of integers `a` of size `n`. Each element of this array may be incremented by any non-negative integer value. Define a function `f(a)` which is the sum of differences of the neighboring elements in the array. f(a) = |a[1] - a[2]| + |a[2] - a[3]| + ... + |a[n-1] - a[n]| Your task is to maximize the value of `f(a)`. Constraints: - 1 ≤ n ≤ 1000 - -10^9 ≤ a[i] ≤ 10^9 Input The first line contains an integer `n` — the number of elements in the array. The second line contains `n` integers `a[1], a[2], ..., a[n]` — the elements of the array. Output Print a single integer — the maximum value of `f(a)`. Examples Input 5 1 3 -1 2 0 Output 8 Input 3 2 2 2 Output 0 Note In the first example, we can increment elements such that the array becomes `[1, 0, 3, -2, 4]`. f(a) = |1 - 0| + |0 - 3| + |3 - -2| + |-2 - 4| = 1 + 3 + 5 + 6 = 15 If we choose different increments: `[0, 3, -4, 1, -1]`, then: f(a) = |0 - 3| + |3 - -4| + |-4 - 1| + |1 - -1| = 3 + 7 + 5 + 2 = 17","solution":"def maximize_diff_sum(n, a): a_sorted = sorted(a) max_value = 0 for i in range(1, n): max_value += abs(a_sorted[i] - a_sorted[i-1]) max_value *= 2 return max_value"},{"question":"A farmer has a rectangular farm with dimensions N by M. The farm is divided into a grid of 1x1 unit plots. The farmer wants to plant trees such that every tree in the grid is separated by at least a distance of R units in both the row and column directions. Determine the maximum number of trees that the farmer can plant on the farm satisfying the separation condition. Constraints * 1 ≤ N, M ≤ 1000 * 1 ≤ R ≤ 100 Input The input is given from Standard Input in the following format: N M R Output Print the maximum number of trees that can be planted. Examples Input 6 6 2 Output 9 Input 4 5 3 Output 4 Input 10 10 4 Output 9","solution":"def max_trees(N, M, R): Returns the maximum number of trees that can be planted on the farm with dimensions N by M with separation distance R. rows = (N + R - 1) // R columns = (M + R - 1) // R return rows * columns"},{"question":"You are organizing a robotics competition and need to place the participating teams into groups for the preliminary round. Teams need to be grouped in such a way that the size of each group is divisible by a specified number K. Determine if it is possible to create such groups given the total number of teams N. Constraints * N is an integer between 1 and 100, inclusive. * K is an integer between 2 and 10, inclusive. Input Input is given from Standard Input in the following format: ``` N K ``` Output If it is possible to create groups of size divisible by K, print `Possible`; otherwise, print `Not Possible`. Examples Input 20 4 Output Possible Input 23 5 Output Not Possible","solution":"def can_create_groups(N, K): Determines if it is possible to create groups of size divisible by K from N teams. Parameters: N (int): Total number of teams. K (int): Group size divisor. Returns: str: \'Possible\' if groups of size divisible by K can be formed, otherwise \'Not Possible\'. return \'Possible\' if N % K == 0 else \'Not Possible\'"},{"question":"You are given a binary string `S`. A binary string only contains characters `0` and `1`. Your task is to determine the length of the longest contiguous subsequence of `1`s in the binary string. Input format The first line contains the binary string `S`. Constraint: * The length of S is between 1 and 500,000. Output format Print the length of the longest contiguous subsequence of `1`s in the string. Example 1 Input: 11011101111 Output: 4 Example 2 Input: 00001000 Output: 1 Example 3 Input: 00000 Output: 0 Example Input 111000111 Output 3","solution":"def longest_contiguous_ones(S): Returns the length of the longest contiguous subsequence of `1`s in the binary string S. max_len = 0 current_len = 0 for char in S: if char == \'1\': current_len += 1 max_len = max(max_len, current_len) else: current_len = 0 return max_len"},{"question":"You are given two integers A and B. Count the number of common divisors of A and B. Constraints * 1 leq A, B leq 10^6 * A and B are integers. Input Input is provided from Standard Input in the following format: A B Output Print a single integer which is the number of common divisors of A and B. Examples Input 12 15 Output 2 Input 100 75 Output 3 Input 17 23 Output 1","solution":"import math def count_common_divisors(A, B): Returns the number of common divisors of A and B. gcd_val = math.gcd(A, B) common_divisors = 0 for i in range(1, int(gcd_val**0.5) + 1): if gcd_val % i == 0: common_divisors += 1 if i != gcd_val // i: common_divisors += 1 return common_divisors"},{"question":"One of the major companies in the gaming industry has tasked you with designing a function that analyzes the performance of gamers participating in an online multiplayer battle royale game. Each player has a unique identification number, a score representing their performance in the current game session, and the number of enemies they have defeated. The goal is to rate the players based on their game performance using the following criteria: (a) Higher score obtained in the game session; (b) Higher number of enemies defeated; If two or more players have the same score and number of enemies defeated, they are considered to be tied for that position. Write a function that receives a list of tuples, each containing the player\'s identification number, score, and number of enemies defeated, and returns a list of the players\' ranks based on the criteria listed above. The rank of a player is its position in the list when ordered from highest to lowest performance. The format of the input is: ``` [(player_id_1, score_1, enemies_defeated_1), (player_id_2, score_2, enemies_defeated_2), ..., (player_id_n, score_n, enemies_defeated_n)] ``` Where: - `player_id_i` is a unique integer identifying the player, - `score_i` is an integer representing the score of the player in the game session, - `enemies_defeated_i` is an integer representing the number of enemies the player has defeated. Your function should return a list of tuples, each containing the player\'s identification number and their rank, in the format: ``` [(player_id_1, rank_1), (player_id_2, rank_2), ..., (player_id_n, rank_n)] ``` The output list should be sorted by the players\' identification numbers. # Constraints - The number of players n does not exceed 1000. - Scores and enemies defeated are integers between 0 and 1000 inclusive. # Example Input ``` [ (101, 300, 15), (102, 450, 20), (103, 450, 15), (104, 300, 20), (105, 250, 10) ] ``` Output ``` [ (101, 4), (102, 1), (103, 2), (104, 3), (105, 5) ] ``` Explanation Player 102 has the highest score and enemy defeats, hence rank 1. Player 103 has the same score as player 102 but fewer enemies defeated, so they are ranked 2. Player 104 and player 101 have the same score but different enemies defeated, so player 104 is ranked higher than player 101. The player with the lowest score receives the highest rank number, so player 105 is ranked last in this session.","solution":"def rank_players(players): Rank players based on score and number of enemies defeated. Arguments: players -- List of tuples, each containing (player_id, score, enemies_defeated) Returns: A list of tuples, each containing (player_id, rank), sorted by player_id. # First, sort players by score (descending) and number of enemies defeated (descending) sorted_players = sorted(players, key=lambda x: (-x[1], -x[2])) # Get the ranks ranks = {} rank = 1 for idx, player in enumerate(sorted_players): if idx > 0: # If the current player\'s score and enemies defeated are different from the previous one, increment rank if player[1] != sorted_players[idx-1][1] or player[2] != sorted_players[idx-1][2]: rank = idx + 1 ranks[player[0]] = rank # Prepare the output in the required format and sort by player_id result = sorted(ranks.items(), key=lambda x: x[0]) return result"},{"question":"Write a program to determine the number of distinct substrings in a given string that are palindromes. Input: First line contains T, the number of test cases. This is followed by T lines, each containing a single string S. Output: For each test case, print the number of distinct palindromic substrings in the given string S. Constraints: 1 <= T <= 50 1 <= |S| <= 100 Explanation: For S = \\"ababa\\" The distinct palindromic substrings are: \\"a\\", \\"b\\", \\"aba\\", \\"bab\\", \\"ababa\\" Hence, the answer is 5. SAMPLE INPUT 2 ababa abc SAMPLE OUTPUT 5 3","solution":"def count_distinct_palindromic_substrings(s): Returns the number of distinct palindromic substrings in the given string s. def is_palindrome(sub): return sub == sub[::-1] distinct_palindromes = set() n = len(s) for i in range(n): for j in range(i + 1, n + 1): substring = s[i:j] if is_palindrome(substring): distinct_palindromes.add(substring) return len(distinct_palindromes) def process_test_cases(input_data): T = int(input_data[0]) results = [] for i in range(1, T + 1): s = input_data[i] result = count_distinct_palindromic_substrings(s) results.append(result) return results # Function for receiving the input and printing the results. def main(): import sys input_data = sys.stdin.read().strip().split() results = process_test_cases(input_data) for result in results: print(result)"},{"question":"Amara is a gardener and loves to arrange her flower pots in a specific fashion. She wants to arrange the pots such that the number of flower pots in each row is strictly increasing by one from the previous row. For instance, if the first row has 1 flower pot, the second row should have 2 flower pots, the third row should have 3 flower pots, and so on. Given a number `N`, which represents the total number of flower pots Amara has, help her to find out the maximum number of rows she can completely fill. Input The first line contains a single integer `T` denoting the number of test cases. Each of the next `T` lines contains a single integer `N` which denotes the total number of flower pots Amara has. Output For each test case, in a single line, print a single integer - the maximum number of rows Amara can completely fill. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^9 Example Input: 3 7 10 1 Output: 3 4 1 Explanation Example case 1: Amara can fill 3 rows completely with 1, 2, and 3 flower pots respectively (1 + 2 + 3 = 6 pots used). Example case 2: Amara can fill 4 rows completely with 1, 2, 3, and 4 flower pots respectively (1 + 2 + 3 + 4 = 10 pots used). Example case 3: Amara has only 1 pot and can fill only 1 row.","solution":"def max_complete_rows(N): Given a number of flower pots N, returns the maximum number of rows that can be completely filled such that each row has an incremental number of flower pots starting from 1. # The total number of pots needed for filling x rows is the sum of the first x natural numbers, # which is given by the formula: x * (x + 1) // 2 rows = 0 total_pots = 0 while total_pots <= N: rows += 1 total_pots += rows if total_pots > N: return rows - 1 return rows def max_rows_for_cases(T, cases): results = [] for N in cases: results.append(max_complete_rows(N)) return results # Read input and prepare output for the test cases def solve(): T = int(input().strip()) cases = [int(input().strip()) for _ in range(T)] results = max_rows_for_cases(T, cases) for result in results: print(result)"},{"question":"Given a string S of length N. Determine the number of substrings of S that are palindromes. A palindrome is a string that reads the same forwards and backwards. Input The first line of input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of a single line containing the string S. Output For each test case, output a single line containing the number of palindromic substrings in S. Example Input: 2 abc aaa Output: 3 6 Constraints 1 <= T <= 100 1 <= N <= 1000 Note: The substrings \\"a\\", \\"b\\", \\"c\\" are palindromic in the first case, and \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", \\"aaa\\" are palindromic in the second case.","solution":"def count_palindromic_substrings(s): Returns the count of palindromic substrings in the given string s. n = len(s) dp = [[False] * n for _ in range(n)] count = 0 for i in range(n): dp[i][i] = True count += 1 for length in range(2, n+1): for start in range(n-length+1): end = start + length - 1 if length == 2: if s[start] == s[end]: dp[start][end] = True count += 1 else: if s[start] == s[end] and dp[start+1][end-1]: dp[start][end] = True count += 1 return count def process_test_cases(t, cases): results = [] for s in cases: results.append(count_palindromic_substrings(s)) return results"},{"question":"In a grid-based dungeon, a player starts at position (1,1) and needs to reach the treasure at position (N,M). The dungeon is represented as an N x M grid, where each cell can either be empty (represented as \'.\') or contain an obstacle (represented as \'#\'). The player can move up, down, left, or right, but cannot move into cells with obstacles or outside the dungeon\'s boundaries. Determine the minimum number of moves required for the player to reach the treasure. If it is impossible to reach the treasure, return -1. Constraints * 1 leq N, M leq 1000 * Cell (1,1) and cell (N,M) will always be empty * All other cells can be either empty or obstacles. Input Input is given from Standard Input in the following format: N M grid The grid is given as N lines of length M, consisting of characters \'.\' and \'#\'. Output Output the minimum number of moves required to reach the treasure. If it is impossible, print -1. Examples Input 3 3 ... .#. ... Output 4 Input 4 4 .... .. .... .... Output 6 Input 3 3 ..# .#. ..# Output -1","solution":"from collections import deque def min_moves_to_reach_treasure(N, M, grid): def is_valid(x, y): return 0 <= x < N and 0 <= y < M and grid[x][y] == \'.\' directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 0)]) # (x, y, steps) visited = set((0, 0)) while queue: x, y, steps = queue.popleft() if x == N - 1 and y == M - 1: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1"},{"question":"Palindrome Permutation Check Problem Statement Given a string `S`, determine if any permutation of the string is a palindrome. For a permutation to be a palindrome, it must read the same forwards and backwards. You need to return \\"Yes\\" if any permutation of the string is a palindrome, otherwise return \\"No\\". Input An input is given in the following format. ``` S ``` * `S` is a string which consists of only lowercase letters. Constraints * `1 leq |S| leq 10^5` Output Print \\"Yes\\" if any permutation of the string `S` can be a palindrome. Otherwise, print \\"No\\". Sample Input 1 ``` civic ``` Sample Output 1 ``` Yes ``` Sample Input 2 ``` ivicc ``` Sample Output 2 ``` Yes ``` Sample Input 3 ``` hello ``` Sample Output 3 ``` No ``` Sample Input 4 ``` aabb ``` Sample Output 4 ``` Yes ``` Explanation 1. For the first sample input (`civic`), the string itself is a palindrome. 2. For the second sample input (`ivicc`), one of the palindrome permutations is `civic`. 3. For the third sample input (`hello`), there are no palindrome permutations. 4. For the fourth sample input (`aabb`), one of the palindrome permutations is `abba` which is a palindrome. Example Input ``` abbc ``` Output ``` No ```","solution":"def can_permute_palindrome(S): Determines if any permutation of the string S can be a palindrome. from collections import Counter char_count = Counter(S) odd_count = 0 for count in char_count.values(): if count % 2 != 0: odd_count += 1 # For a string to be able to form a palindrome: # 1. If the string length is even, no characters should have an odd count. # 2. If the string length is odd, only one character should have an odd count. if odd_count > 1: return \\"No\\" return \\"Yes\\""},{"question":"You are given two strings, s and t. Determine the minimum number of single-character insertions required to make string s a subsequence of string t. If it is already a subsequence, the number of insertions required will be 0. A subsequence of a string is defined as a sequence that can be obtained from the original string by deleting some (or none) of the characters without changing the order of the remaining characters. Constraints * 1 ≤ |s|, |t| ≤ 1000 * s and t consist of lowercase English letters. Input Input is given from Standard Input in the following format: s t Output Print the number of insertions required. Examples Input abc ahbgdc Output 0 Input axc ahbgdc Output 1 Input xyz abpple Output 3","solution":"def min_insertions_to_subsequence(s, t): Determine the minimum number of single-character insertions required to make string s a subsequence of string t. Parameters: s (str): The string to be transformed into a subsequence of t. t (str): The target string in which s should be a subsequence. Returns: int: The minimum number of insertions required. # Find the length of the longest common subsequence (LCS) using dynamic programming len_s, len_t = len(s), len(t) dp = [[0] * (len_t + 1) for _ in range(len_s + 1)] for i in range(1, len_s + 1): for j in range(1, len_t + 1): if s[i-1] == t[j-1]: dp[i][j] = dp[i-1][j-1] + 1 else: dp[i][j] = max(dp[i-1][j], dp[i][j-1]) lcs_length = dp[len_s][len_t] return len_s - lcs_length"},{"question":"A railway company has a set of track segments connecting various stations. The company wants to determine if there is a way to travel between any two stations using the existing tracks. You are assigned to find out if the existing track layout is \\"connected\\", which means there is a path between any two stations in the railway network. You are given the number of stations `n` and a list of `tracks`, where each track is represented as a pair of station numbers that it connects directly. Write a function that returns `True` if the railway network is connected, and `False` otherwise. Each station is identified by an integer from 1 to n. Input The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the number of stations. The second line contains an integer `m` (0 ≤ m ≤ 2*10^5) — the number of tracks. Each of the next `m` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n) — the stations connected by a track. Output Print `True` if there is a path between any two stations in the railway network, otherwise print `False`. Examples Input 5 4 1 2 2 3 3 4 4 5 Output True Input 5 3 1 2 2 3 4 5 Output False","solution":"def is_connected(n, tracks): from collections import defaultdict, deque if n == 1: return True # Create an adjacency list graph = defaultdict(list) for u, v in tracks: graph[u].append(v) graph[v].append(u) # BFS or DFS to check connectivity visited = set() queue = deque([1]) visited.add(1) while queue: station = queue.popleft() for neighbor in graph[station]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return len(visited) == n"},{"question":"You are given an integer array A of length n. Determine if it is possible to rearrange the elements of A such that each pair of adjacent elements has a different parity (one is even, the other is odd). Constraints * 2 ≤ n ≤ 1000 * Each element of A is an integer between 1 and 1000 inclusive. Input Input is given from Standard Input in the following format: n A Output If it is possible to rearrange A such that each pair of adjacent elements has a different parity, print `Yes`; otherwise, print `No`. Examples Input 5 1 2 3 4 5 Output Yes Input 4 2 4 6 8 Output No Input 3 1 1 1 Output No Input 6 5 3 2 8 1 4 Output Yes","solution":"def can_rearrange_with_alternating_parity(n, A): Determines if it is possible to rearrange the elements of A such that each pair of adjacent elements has a different parity (one is even, the other is odd). Parameters: - n (int): Length of the array - A (List[int]): List of integers Returns: - str: \\"Yes\\" if it is possible, \\"No\\" otherwise odd_count = sum(1 for x in A if x % 2 != 0) even_count = n - odd_count if abs(odd_count - even_count) <= 1: return \\"Yes\\" else: return \\"No\\""},{"question":"You are given a list of n integers. Each integer represents the height of a building in a row. You are tasked with determining the length of the longest sequence of consecutive buildings, where each building in the sequence is taller than the building immediately before it. The input consists of a single integer n (1 ≤ n ≤ 1000) representing the number of buildings. The next line contains n space-separated integers representing the heights of the buildings. Each height is a positive integer not exceeding 10^9. Your task is to compute the length of the longest increasing sequence of consecutive buildings. Input - The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of buildings. - The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9) representing the heights of the buildings. Output - Print a single integer denoting the length of the longest sequence of consecutive increasing buildings. Examples Input 6 1 2 2 3 4 1 Output 3 Input 5 5 4 3 2 1 Output 1 Input 10 1 2 3 1 2 3 4 5 1 2 Output 5 Note In the first example, the longest increasing sequence is \\"2 3 4\\" which has length 3. In the second example, there is no increase in building heights, so each building counts as a sequence of length 1. In the third example, the longest increasing sequence is \\"1 2 3 4 5\\" which has length 5.","solution":"def longest_increasing_sequence(n, heights): if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if heights[i] > heights[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"Given an array of n integers, determine the smallest positive integer that cannot be formed using any subset of the array. Formally, you\'re required to find the smallest positive integer x such that no subset of the array adds up to x. Input Each test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 1000). The description of the test cases follows. The first line of each test case contains an integer n (1 ≤ n ≤ 50) — the size of the array. The second line of each test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — elements of the array. Output For each test case, output the smallest positive integer that cannot be formed using any subset of the array. Example Input 3 5 1 2 3 10 20 5 1 1 1 1 1 5 5 10 12 13 15 Output 7 6 1 Note In the first test case, we can form the integers 1 through 6 using subsets of the array {1, 2, 3, 10, 20}, but we cannot form 7. In the second test case, the first integer we cannot form is 6, because we can form 1, 2, 3, 4, and 5 using the array {1, 1, 1, 1, 1}. In the third test case, we cannot form the integer 1 with the array {5, 10, 12, 13, 15}.","solution":"def smallest_positive_integer_that_cannot_be_formed(n, arr): arr.sort() smallest_integer = 1 for num in arr: if num > smallest_integer: break smallest_integer += num return smallest_integer def process_test_cases(test_cases): results = [] for n, arr in test_cases: results.append(smallest_positive_integer_that_cannot_be_formed(n, arr)) return results"},{"question":"Alice is tasked with coordinating deliveries from the central warehouse to various distribution hubs on Mars. Each distribution hub has a certain demand for resources, and it must be met with the least number of trips from the central warehouse. Alice has vehicles of different capacities available to her. She wants to minimize the number of trips made by selecting vehicles optimally to meet the demands of each hub. Given the demands of each distribution hub and the capacities of available vehicles, determine the minimum number of trips required to meet all demands. Input The first line contains an integer N (1 ≤ N ≤ 100,000) representing the number of distribution hubs. The second line contains N integers d_i (1 ≤ d_i ≤ 10^9) separated by a space, representing the demand of each hub in resources. The third line contains an integer M (1 ≤ M ≤ 200) representing the number of vehicle types. The fourth line contains M integers c_j (1 ≤ c_j ≤ 10^9) separated by a space, representing the capacities of each vehicle type. Output Output one integer representing the minimum number of trips required to meet all demands of the distribution hubs. Example Input 3 13 7 6 2 6 10 Output 4 Note To meet the demands with minimum number of trips, Alice can do the following: - Use one vehicle of capacity 10 and one of capacity 6 to meet the demand of the first hub (13). - Use one vehicle of capacity 6 to meet the demand of the second hub (7). - Use one vehicle of capacity 6 to meet the demand of the third hub (6). Thus, the total number of trips is 4.","solution":"def min_trips_to_meet_demands(hub_demands, vehicle_capacities): hub_demands.sort(reverse=True) vehicle_capacities.sort(reverse=True) total_trips = 0 for demand in hub_demands: remaining_demand = demand for capacity in vehicle_capacities: if remaining_demand <= 0: break trips = (remaining_demand + capacity - 1) // capacity remaining_demand -= trips * capacity total_trips += trips return total_trips def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) hub_demands = list(map(int, data[1:N+1])) M = int(data[N+1]) vehicle_capacities = list(map(int, data[N+2:N+2+M])) print(min_trips_to_meet_demands(hub_demands, vehicle_capacities)) # Usage example with input redirection if __name__ == \\"__main__\\": main()"},{"question":"You are given a list of \'n\' parcels with varying weights. Your task is to divide these parcels into two groups such that the absolute difference between the total weights of the two groups is minimized. This is a common problem similar to the \\"Partition Problem,\\" which is known to be NP-complete. Input The first line of the input contains an integer \'n\' (1 ≤ n ≤ 15), the number of parcels. The second line contains \'n\' space-separated integers representing the weights of the parcels. Each weight is a positive integer less than or equal to 20. Output Print a single integer representing the minimum possible absolute difference between the total weights of the two groups formed from the given parcels. Example Input 4 3 1 4 2 Output 0 Input 3 1 2 3 Output 0 Explanation In both examples, the parcels can be divided into two groups such that the sums of the weights of the groups are equal, leading to an absolute difference of 0. Specifically: - In the first example, you can divide the parcels into groups (3, 2) and (4, 1), both of which sum to 5. - In the second example, you can divide the parcels into groups (1, 2) and (3), both of which sum to 3.","solution":"def min_partition_diff(n, weights): Divides parcels into two groups with minimized absolute difference of weights. Parameters: n (int): Number of parcels weights (list of int): Weights of parcels Returns: int: Minimum possible absolute difference from itertools import combinations total_weight = sum(weights) min_diff = float(\'inf\') for i in range(n + 1): for combo in combinations(weights, i): group1_weight = sum(combo) group2_weight = total_weight - group1_weight diff = abs(group1_weight - group2_weight) min_diff = min(min_diff, diff) return min_diff"},{"question":"You are given a list of integers. Your task is to determine if the list is a \\"mountain array.\\" A mountain array is defined as an array that: - Has at least 3 elements. - There exists some index `i` (0 < i < len(arr) - 1) such that: - `arr[0] < arr[1] < ... < arr[i]` - `arr[i] > arr[i + 1] > ... > arr[len(arr) - 1]` Input The input consists of a single line containing integers separated by spaces. Output Print \\"YES\\" if the array is a mountain array, otherwise print \\"NO\\". Examples Input 2 1 Output NO Input 3 5 5 Output NO Input 0 3 2 1 Output YES Input 2 1 4 7 3 2 5 Output NO","solution":"def is_mountain_array(arr): n = len(arr) if n < 3: return \\"NO\\" i = 0 # walk up while i + 1 < n and arr[i] < arr[i + 1]: i += 1 # peak can\'t be first or last if i == 0 or i == n - 1: return \\"NO\\" # walk down while i + 1 < n and arr[i] > arr[i + 1]: i += 1 return \\"YES\\" if i == n - 1 else \\"NO\\""},{"question":"You are given a list of n integers, each either 0 or 1. You want to make this list have the fewest possible inversions. An inversion is a pair (i, j) such that i < j and a[i] > a[j]. In one operation, you can choose an index i and swap the values a[i] and a[i + 1]. Determine the minimum number of operations required to achieve a list with the fewest possible inversions. Input The first line contains an integer n (1 ≤ n ≤ 1000), the length of the list. The second line contains n integers a[1], a[2], ..., a[n] (each either 0 or 1), representing the list. Output Print a single integer — the minimum number of operations required to achieve a list with the fewest possible inversions. Examples Input 5 1 0 1 0 1 Output 3 Input 4 0 1 0 1 Output 1 Note In the first sample, you can achieve a list with the fewest inversions by performing the following operations: 1. Swap a[1] and a[2]: 0 1 1 0 1 2. Swap a[3] and a[4]: 0 1 0 1 1 3. Swap a[2] and a[3]: 0 0 1 1 1 In the second sample, you can achieve a list with the fewest inversions by performing the following operation: 1. Swap a[2] and a[3]: 0 0 1 1","solution":"def min_operations_to_sort_zeros_and_ones(n, a): Returns the minimum number of operations required to sort the list such that all 0\'s are before all 1\'s with the fewest possible inversions. Args: n: int - the length of the list a: list of int - the list consisting of 0\'s and 1\'s Returns: int - the minimum number of operations # total_ones is the count of 1\'s in the list total_ones = sum(a) # When walking through the array record the number of 1\'s to the left of the current 0 ones_seen = 0 swaps_needed = 0 for value in a: if value == 1: ones_seen += 1 else: # if we see a 0, then the number of swaps needed to move this 0 past all the # 1\'s encountered so far is just the number of 1\'s seen so far swaps_needed += ones_seen return swaps_needed"},{"question":"You are given an array of integers representing the heights of buildings, from left to right, and a positive integer \'k\' representing the maximum number of jumps. You can start from any building and you are allowed to jump to any building to the right, but only to a building that is taller than the current one you are on. The goal is to find the longest sequence of jumps you can make following these rules. Input The input is given in the following format: n k h1 h2 h3 ... hn - n is the number of buildings. - k is the maximum number of jumps you can make. - h1, h2, ..., hn are the heights of the buildings. Input meets the following constraints: 1 ≤ n ≤ 1,000 1 ≤ k ≤ 1000 1 ≤ hi ≤ 10,000, for each valid i Output Output the length of the longest sequence of jumps starting from any building and obeying the above rules. Examples Input 8 3 4 2 3 5 7 6 8 9 Output 3 Input 5 1 5 1 8 10 3 Output 1 Input 7 5 1 2 3 4 5 6 7 Output 5","solution":"def longest_sequence_of_jumps(buildings, k): Return the length of the longest sequence of jumps from any building to obey the rules. buildings: list of integers representing the buildings heights k: integer representing the maximum allowed jumps n = len(buildings) dp = [1] * n # dp[i] means the longest sequence ending at building i for i in range(n): for j in range(i): if buildings[j] < buildings[i]: dp[i] = max(dp[i], dp[j] + 1) # Since the limit of jumps is k, we find the max sequence <= k jumps max_jumps = min(k, max(dp)) return max_jumps"},{"question":"Given a string `s`, determine the number of distinct non-empty substrings that can be derived from `s`. # Input The first line contains a string `s` consisting of lowercase English letters (`1 ≤ |s| ≤ 1000`). # Output Output a single integer representing the number of distinct non-empty substrings of `s`. # Examples Example 1: **Input:** ``` ab ``` **Output:** ``` 3 ``` **Explanation:** The distinct non-empty substrings are \\"a\\", \\"b\\", \\"ab\\". Example 2: **Input:** ``` aaa ``` **Output:** ``` 3 ``` **Explanation:** The distinct non-empty substrings are \\"a\\", \\"aa\\", \\"aaa\\".","solution":"def count_distinct_substrings(s): Returns the number of distinct non-empty substrings of the string `s`. substrings = set() for i in range(len(s)): for j in range(i + 1, len(s) + 1): substrings.add(s[i:j]) return len(substrings)"},{"question":"You are given a string `s` consisting of lowercase English letters and question marks (?). A question mark can be replaced by any lowercase English letter. Your task is to determine if it is possible to replace all the question marks in such a way that the resulting string becomes a palindrome. A palindrome is a string that reads the same forward and backward. If it is possible to transform `s` into a palindrome, print \\"YES\\" and the resulting palindrome. Otherwise, print \\"NO\\". Input The single line of the input contains the string `s`. The length of `s` does not exceed 100 characters. Output Print \\"NO\\" (without quotes), if it is not possible to transform the string into a palindrome. Otherwise, print \\"YES\\" in the first line and the resulting palindrome in the second line. If there are multiple possible answers, you may print any of them. Examples Input a?c Output YES aca Input ?? Output YES aa Input abc Output NO","solution":"def can_form_palindrome(s): n = len(s) s = list(s) # Convert the string to a list to modify it for i in range(n // 2): if s[i] == \'?\' and s[n - 1 - i] == \'?\': s[i] = s[n - 1 - i] = \'a\' elif s[i] == \'?\': s[i] = s[n - 1 - i] elif s[n - 1 - i] == \'?\': s[n - 1 - i] = s[i] elif s[i] != s[n - 1 - i]: return \\"NO\\" if n % 2 == 1 and s[n // 2] == \'?\': s[n // 2] = \'a\' return \\"YESn\\" + \\"\\".join(s)"},{"question":"# Problem Statement You are given an integer array `arr` consisting of non-negative integers and an integer `k`. Your task is to determine whether there exist two elements in the array whose sum is equal to `k`. Write a function `find_pair_with_sum(arr, k)` that takes in the array `arr` and the integer `k` and returns `True` if there exist two distinct indices `i` and `j` such that `arr[i] + arr[j] = k`. If no such pairs exist, return `False`. Your solution should have a time complexity better than O(n^2). # Constraints - `1 <= len(arr) <= 10^6` - `0 <= arr[i] <= 10^6` - `0 <= k <= 2 * 10^6` # Example Example 1: Input: ``` arr = [1, 2, 3, 9] k = 8 ``` Output: ``` False ``` Explanation: No two numbers sum up to 8. Example 2: Input: ``` arr = [1, 2, 4, 4] k = 8 ``` Output: ``` True ``` Explanation: The numbers 4 and 4 sum up to 8. # Note: You are expected to solve this problem using a single pass through the array if possible, or linearithmic time at most.","solution":"def find_pair_with_sum(arr, k): Determines if there are two distinct elements in the array whose sum equals k. Parameters: arr (list of int): List of non-negative integers. k (int): Desired sum. Returns: bool: True if such a pair exists, False otherwise. seen = set() for num in arr: if k - num in seen: return True seen.add(num) return False"},{"question":"Luna is a software engineer fascinated by genetics, and she wants to simulate a simplified model of genetic evolution. In her model, a population of creatures is represented by an array of integers, where each integer is a genetic trait and can mutate over generations. The mutation happens according to a predefined rule - in each generation, every element in the array can either increase by 1, decrease by 1, or stay the same. Moreover, Luna wants to track how fast a specific genetic target can be achieved starting from an initial population array. Write a program to help Luna determine the minimum number of generations required to transform the initial population to the target population. The transformation should be done element-wise according to the mutation rule described. Input: First line contains an integer T (1 ≤ T ≤ 100) representing the number of test cases. For each test case: - First line contains an integer N (1 ≤ N ≤ 1000) representing the number of elements in the population array. - Second line contains N integers representing the initial population array A (0 ≤ A[i] ≤ 1000). - Third line contains N integers representing the target population array B (0 ≤ B[i] ≤ 1000). Output: For each test case, output a single integer representing the minimum number of generations required to transform the initial population array to the target population array. Example: Input: 2 5 1 2 3 4 5 5 4 3 2 1 4 3 8 5 6 3 8 4 6 Output: 4 1 Explanation: In the first test case: - 1 transforms to 5 over 4 generations: 1 -> 2 -> 3 -> 4 -> 5 - 2 transforms to 4 over 2 generations: 2 -> 3 -> 4 - 3 stays the same (0 generations) - 4 transforms to 2 over 2 generations: 4 -> 3 -> 2 - 5 transforms to 1 over 4 generations: 5 -> 4 -> 3 -> 2 -> 1 The maximum generations required is 4. In the second test case: - 3 stays the same (0 generations) - 8 stays the same (0 generations) - 5 transforms to 4 over 1 generation: 5 -> 4 - 6 stays the same (0 generations) The maximum generations required is 1.","solution":"def min_generations(T, test_cases): Calculate the minimum generations required for each test case to transform the initial population array to the target population array. T: number of test cases test_cases: List of tuples, where each tuple contains: - N: number of elements in the population array - A: initial population array - B: target population array Returns a list of integers, each representing the minimum generations required for corresponding test case. results = [] for case in test_cases: N, A, B = case generations = 0 for i in range(N): generations = max(generations, abs(A[i] - B[i])) results.append(generations) return results"},{"question":"Eve loves mixing different colors of paint. She has three types of paint: red, green, and blue, which she can mix in different proportions to get various new colors. She wants to mix the paint in such a way that the resulting colors are not distinguishable as predominantly red, predominantly green, or predominantly blue. Each mixture is represented as a string S of length n, where each character in the string denotes a unit of paint: \'R\' for red, \'G\' for green, and \'B\' for blue. Determine, if it is possible to permute the paint units in S to form a string such that no three consecutive characters are all the same color. Constraints * 1 leq |S| leq 10^5 * S consists of \'R\', \'G\', and \'B\'. Input Input is given from Standard Input in the following format: S Output If the objective is achievable, print `YES`; if it is unachievable, print `NO`. Examples Input RRRGB Output YES Input RRR Output NO Input RGBRGB Output YES","solution":"def can_mix_paint(S): Returns \'YES\' if it is possible to permute the paint units in S to form a string such that no three consecutive characters are all the same color, \'NO\' otherwise. n = len(S) if n < 3: return \\"YES\\" # with less than 3 characters, can\'t have 3 consecutive same characters max_freq = max(S.count(\'R\'), S.count(\'G\'), S.count(\'B\')) # In the worst case scenario, the frequency of the most frequent color # should not be greater than (n + 1) // 2, otherwise it will form a triplet. if max_freq > (n + 1) // 2: return \\"NO\\" return \\"YES\\""},{"question":"You are given a string s. You need to determine if you can arrange the characters of the string to form a palindrome. A palindrome is a word that reads the same forwards and backwards. Input The first line of input contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains a single string s (1 ≤ |s| ≤ 1000) — the string to be tested. Output For each test case, output \\"YES\\" (without quotes) if you can rearrange the characters of the string to form a palindrome. Otherwise, output \\"NO\\". You can print each letter of \\"YES\\" and \\"NO\\" in any case (upper or lower). Example Input 3 aabbcc abc aabb Output YES NO YES Explanation In the first test case, you can rearrange the characters to form \\"abcba\\" or \\"abccba\\", which are palindromes. In the second test case, it\'s impossible to rearrange \\"abc\\" to form a palindrome. In the third test case, you can rearrange the characters to form \\"abba\\", which is a palindrome.","solution":"def can_form_palindrome(s): Determines if the characters of the string s can be rearranged to form a palindrome. from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1 def process_test_cases(t, test_cases): Processes multiple test cases and returns results for each one. results = [] for case in test_cases: if can_form_palindrome(case): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"There is a matrix with n rows and m columns filled with non-negative integers. You need to find the K-th smallest number in this matrix. The matrix is sorted in ascending order both row-wise and column-wise. Input The first line contains three integers n, m, and k (1 ≤ n, m ≤ 300, 1 ≤ k ≤ n * m) — the number of rows of the matrix, the number of columns of the matrix, and the index of the smallest number you need to find. The next n lines each contain m integers separated by spaces, representing the elements of the matrix. Output Output a single integer, the k-th smallest number in the given matrix. Example Input 3 3 5 1 5 9 10 11 13 12 13 15 Output 11 Note In the given example, the numbers in the matrix in sorted order are: [1, 5, 9, 10, 11, 12, 13, 13, 15]. The 5th smallest number is 11.","solution":"import heapq def kth_smallest_in_matrix(matrix, n, m, k): Finds the K-th smallest number in a sorted matrix. :param matrix: The given matrix. :param n: Number of rows in the matrix. :param m: Number of columns in the matrix. :param k: The index of the smallest number to find. :return: The K-th smallest number in the matrix. min_heap = [] # Push the first element of each row onto the heap for r in range(min(n, k)): # As the kth smallest element can\'t be farther than the k-th row heapq.heappush(min_heap, (matrix[r][0], r, 0)) # Extract the smallest element k times for i in range(k): element, r, c = heapq.heappop(min_heap) if c + 1 < m: heapq.heappush(min_heap, (matrix[r][c+1], r, c + 1)) return element"},{"question":"An amusement park has N attractions and M roads connecting these attractions. Each road connects two attractions bidirectionally. A group of friends wants to visit the park starting from a specific attraction and explore at least K different attractions. They can decide to stop the exploration whenever they want after visiting at least K attractions, but they can visit an attraction only once. Determine the number of different paths that allow the group to achieve their goal. Input The first line of input contains three integers N, M, and K (1 ≤ K ≤ N ≤ 1000, 0 ≤ M ≤ 2500). Each of the next M lines contains two integers u and v (1 ≤ u, v ≤ N) indicating that there is a road between attraction u and attraction v. The last line contains a single integer S (1 ≤ S ≤ N) representing the starting attraction. Output Print a single integer, the number of different paths that allow the group to explore at least K different attractions starting from attraction S. Assume that all given roads are distinct and there are no self-loops. Example Input 4 4 3 1 2 1 3 2 4 3 4 1 Output 4 Explanation In this example, there are 4 attractions and 4 roads connecting them. The group must visit at least 3 attractions starting from attraction 1. The different paths that meet the criteria are: 1 → 2 → 4 1 → 2 → 4 → 3 1 → 3 → 4 1 → 3 → 4 → 2 So, there are 4 different paths that ensure the group visits at least 3 attractions starting from attraction 1.","solution":"def count_paths(N, M, K, roads, S): from collections import defaultdict, deque # Build the graph graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) def bfs_paths_count(start, K, N): queue = deque([(start, [start])]) paths_count = 0 while queue: current, path = queue.popleft() if len(path) >= K: paths_count += 1 if len(path) >= N: continue for neighbor in graph[current]: if neighbor not in path: queue.append((neighbor, path + [neighbor])) return paths_count return bfs_paths_count(S, K, N) # Example usage: N = 4 M = 4 K = 3 roads = [(1, 2), (1, 3), (2, 4), (3, 4)] S = 1 print(count_paths(N, M, K, roads, S)) # Output: 4"},{"question":"Ayla loves playing with numbers. Recently, she got interested in a special type of sequence called a \\"Triple Sum Sequence.\\" In this game, given a positive integer k, she starts with the list [1, 2, 3, ..., k] (inclusive). In each move, she can pick three distinct integers from the list and replace them with their sum. The goal is to determine the maximum possible integer that can be obtained after performing any number of moves (including zero moves). Write a program to help Ayla find this maximum possible integer. Input The input contains only one integer in the first line: k (3 ≤ k ≤ 10^6), the length of the initial list. Output Output a single integer, the maximum value that can be obtained. Examples Input 3 Output 6 Input 4 Output 10 Note In the first example, the list starts as [1, 2, 3]. Ayla can directly sum these three numbers to get 6. In the second example, the list starts as [1, 2, 3, 4]. One possible series of moves is: 1. Sum 1, 2, and 3 to get [4, 6] 2. Finally, sum the remaining numbers (4 and 6) to get 10.","solution":"def maximum_possible_sum(k): Given a positive integer k, this function returns the maximum possible integer that can be obtained by summing elements of the list [1, 2, ..., k]. return k * (k + 1) // 2 # Sum of the first k natural numbers"},{"question":"Word Puzzle is a game that requires players to form words from a set of letters. Given a string of lowercase English letters, your task is to find the length of the longest word that can be formed using some or all of the letters of the string, following these rules: - The word must not have any repeated letters. - The word does not need to be a valid dictionary word. Input The input consists of a single line containing a string s (1 ≤ |s| ≤ 100,000) of lowercase English letters. Output Output a single integer denoting the length of the longest word that can be formed adhering to the rules. Example Input abcabc Output 3 Note In the example, the longest word that can be formed is either \\"abc\\" or \\"cba\\", both of which have a length of 3 and do not contain any repeated letters.","solution":"def longest_word_length(s): Returns the length of the longest word that can be formed using some or all of the letters of the string without repeating any letters. return len(set(s))"},{"question":"Peter is planning to build a fence around his garden which has a unique shape. His garden is defined by a series of connected line segments where each segment represents a path he wants to enclose. However, some sections of the garden are missing barriers, and Peter wants to place additional segments to close the garden completely, forming an enclosed polygon. Peter needs your help to determine the minimum number of additional segments required to enclose the garden completely. Each segment can connect any two points from the given vertices. Input The first line contains an integer n - the number of vertices of the garden\'s current shape (3 ≤ n ≤ 100). The following n lines each contain two integers x and y, representing the coordinates of the vertices in either clockwise or counterclockwise order (x, y are within ±1000). Output Print a single integer - the minimum number of additional segments required to enclose the garden completely. Examples Input 5 0 0 2 2 4 0 4 4 0 4 Output 1 Input 4 0 0 4 0 4 4 0 4 Output 0 Note In the first example, the shape of the garden has 5 vertices but does not form an enclosed polygon because there\'s an opening between (0,4) and (0,0). One additional segment is required to close this gap. In the second example, the vertices already form a completely enclosed polygon, so no additional segments are needed.","solution":"def additional_segments_needed(n, vertices): Determines the minimum number of additional segments required to enclose the garden completely. Parameters: n (int): The number of vertices of the garden\'s current shape. vertices (List[Tuple[int, int]]): A list of tuples containing the coordinates of the vertices. Returns: int: The minimum number of additional segments required to enclose the garden. # Check if the given vertices already form a closed polygon if vertices[0] == vertices[-1]: return 0 # Otherwise, one additional segment is required to close the open polygon return 1"},{"question":"John wants to organize his photo album. Each photo is associated with a certain number of tags, representing the topics related to the photo. John\'s goal is to find the largest subset of tags shared by every photo in his collection. Input * The first line contains an integer `n` (1 ≤ n ≤ 1000), the number of photos in John’s album. * The second line contains an integer `m` (1 ≤ m ≤ 100), the maximum number of different tags a photo can have. * Each of the next `n` lines describes a photo. Each photo is presented as a space-separated sequence of integers, where each integer represents a tag id. Each tag id is between 1 and 100. Output * Print a space-separated list of tag ids that are common across all the given photos. If there are no common tags, print \\"No common tags\\". Example Input: 4 5 1 2 3 4 5 2 3 5 6 1 3 5 7 8 3 5 9 Output: 3 5 Input: 3 4 1 2 3 4 5 6 7 8 9 Output: No common tags","solution":"def find_common_tags(n, m, photos): Returns the common tag ids shared by every photo in the album. # Initial set with tags of the first photo common_tags = set(photos[0]) # Intersect with the sets of tags of remaining photos for i in range(1, n): common_tags.intersection_update(photos[i]) if common_tags: return \\" \\".join(map(str, sorted(common_tags))) else: return \\"No common tags\\""},{"question":"You are given a list of n numbers and an integer k. Your task is to find the length of the longest contiguous subarray that can be made by changing at most k elements to any other integer. Input The first line contains two integers n and k (1 ≤ n ≤ 100000, 0 ≤ k ≤ n). The second line contains n integers, representing the array. Output Print the length of the longest contiguous subarray where at most k changes are allowed. Examples Input 10 2 1 1 1 0 0 0 1 1 1 1 Output 6 Input 7 1 1 1 0 0 1 0 1 Output 4 Input 6 3 1 0 0 1 0 0 Output 6","solution":"def longest_subarray_with_k_changes(n, k, arr): Find the length of the longest contiguous subarray where at most k elements can be changed to any other integer. Args: n : int : Number of elements in the array k : int : Maximum number of elements that can be changed arr : list : List of integers Returns: int : Length of the longest subarray from collections import defaultdict left = 0 max_length = 0 freq = defaultdict(int) max_freq = 0 for right in range(n): # Add the current element to the frequency map freq[arr[right]] += 1 # Update the maximum frequency value seen so far max_freq = max(max_freq, freq[arr[right]]) # If the number of changes needed is more than k, move the left pointer if (right - left + 1) - max_freq > k: freq[arr[left]] -= 1 left += 1 # Calculate the max length of the subarray max_length = max(max_length, right - left + 1) return max_length"},{"question":"A tennis tournament is about to commence, and participants are preparing for the event. The tournament is organized as a single-elimination tournament, meaning that players are paired against one another, and the loser of each match is immediately eliminated from the tournament. The tournament\'s progress will be determined in rounds. Initially, each player is paired against another player in the first round, and the winners proceed to the next round. This continues until only one player remains as the tournament champion. Your task is to determine how many rounds it will take for a champion to be crowned, given the number of participants. Input The input consists of a single integer n (1 ≤ n ≤ 10^5) — the number of participants in the tournament. Output Output the number of rounds required for a champion to be determined. Examples Input 8 Output 3 Input 16 Output 4 Input 7 Output 3","solution":"import math def number_of_rounds(participants): Given the number of participants, returns the number of rounds required for a champion to be determined. if participants < 1: raise ValueError(\\"Number of participants must be at least 1\\") # The number of rounds will be the ceiling value of the base 2 logarithm of the number of participants return math.ceil(math.log2(participants))"},{"question":"There is a maze represented by a matrix, where each cell can either be empty or contain an obstacle. Your task is to determine if there is a path for a robot to navigate from the start position to the finish position based on specific movement constraints: the robot can only move right or down. The goal is to determine if there is at least one such path. # Input Format - The first line contains two integers, `M` and `N` (1 ≤ M, N ≤ 100), representing the number of rows and columns in the matrix. - The next `M` lines each contain `N` integers, where each integer is either 0 or 1: - `0` represents an empty cell. - `1` represents an obstacle. # Output Format - Print \\"yes\\" if there is at least one path for the robot to move from the top-left corner (0,0) to the bottom-right corner (M-1,N-1). - Print \\"no\\" otherwise. # Example **Input** ``` 5 5 0 0 1 0 0 0 0 0 0 1 1 0 1 0 0 0 0 0 0 0 1 0 1 0 0 ``` **Output** ``` yes ``` **Input** ``` 3 3 0 1 0 1 1 0 0 0 0 ``` **Output** ``` no ``` # Notes - The start position is always at (0,0) and the finish position is always at (M-1,N-1). - There is guaranteed to be no obstacle at the start or finish positions.","solution":"def is_path_through_maze(maze): Determines if there\'s a path in a maze from top-left to bottom-right that moves only right or down. :param maze: List of List of integers (0 or 1) :return: \'yes\' if a path exists, \'no\' otherwise M = len(maze) N = len(maze[0]) if maze[0][0] == 1 or maze[M - 1][N - 1] == 1: return \'no\' # Create a DP table to mark paths dp = [[0] * N for _ in range(M)] # Initialize the starting point dp[0][0] = 1 # Fill the DP table for i in range(M): for j in range(N): if maze[i][j] == 0: if i > 0: dp[i][j] += dp[i - 1][j] if j > 0: dp[i][j] += dp[i][j - 1] # If the bottom-right corner is reachable, dp[M-1][N-1] would be non zero if dp[M - 1][N - 1] > 0: return \'yes\' else: return \'no\'"},{"question":"You are given an array of integers and you need to determine if there\'s a way to split the array into two non-empty subarrays such that: 1. The sum of elements in the first subarray is equal to the sum of elements in the second subarray. 2. The product of elements in the first subarray is equal to the product of elements in the second subarray. Given an array a of length n, determine if such a split is possible. Input The input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 10^4) — the number of test cases. The first line of each test case contains an integer n (2 ≤ n ≤ 2 × 10^5) — the length of the array. The second line of each test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100). The sum of n over all test cases does not exceed 2 × 10^5. Output For each test case, output \\"YES\\" if there exists a way to split the array as described above, and \\"NO\\" otherwise. Example Input 3 4 1 2 1 2 3 3 3 3 5 1 5 1 1 3 Output YES NO NO Note For the first test case, we can split the array into [1, 2] and [1, 2]. Both have the same sum (3) and the same product (2). For the second test case, there is no way to split the array into two non-empty subarrays with equal sum and equal product. For the third test case, there is no way to split the array into two non-empty subarrays with equal sum and equal product.","solution":"def can_split_subarrays(test_cases): def check_split_possible(array): total_sum = sum(array) total_prod = 1 for num in array: total_prod *= num left_sum = 0 left_prod = 1 for i in range(len(array) - 1): left_sum += array[i] left_prod *= array[i] right_sum = total_sum - left_sum right_prod = total_prod // left_prod if left_sum == right_sum and left_prod == right_prod: return \\"YES\\" return \\"NO\\" results = [] for (n, array) in test_cases: results.append(check_split_possible(array)) return results"},{"question":"In a busy city, there is a new tram system with a single circular route. The tram stops at N different stations in a clockwise direction, numbered from 1 to N. The tram starts its journey at the first station and continues to circle around the stations indefinitely. The fare system of the tram is quite unique: it calculates the fare based on the number of stations you pass through, including your departure and arrival stations. Specifically, the fare is equal to the number of stations you pass through, including the starting and ending stations. You need to write a program that calculates the fare for multiple passengers. Each passenger boards the tram at a given station and gets off at another station. Input Format: - The first line contains an integer T, the number of test cases. - Each test case begins with a line containing an integer N, the number of stations. - The next line contains an integer P, the number of passengers. - The next P lines each consist of two integers A and B, where A is the departure station and B is the destination station. Output Format: For each test case, output a line containing P integers, where each integer represents the fare for the corresponding passenger. Constraints: - 1 ≤ T ≤ 10 - 2 ≤ N ≤ 100 - 1 ≤ P ≤ 1000 - 1 ≤ A, B ≤ N SAMPLE INPUT 2 5 3 1 3 2 5 4 1 8 2 3 6 7 2 SAMPLE OUTPUT 3 4 3 4 4","solution":"def calculate_fares(T, test_cases): Calculate the fare for each passenger based on the stations they pass through. Parameters: T (int): Number of test cases. test_cases (list): List of tuples where each tuple contains: - N (int): Number of stations. - P (int): Number of passengers. - passengers (list): List of tuples with each tuple containing: - A (int): Departure station. - B (int): Destination station. Returns: list: List of lists. Each inner list contains the fares for each passenger of the respective test case. results = [] for i in range(T): N, P, passengers = test_cases[i] fares = [] for A, B in passengers: if A <= B: fare = B - A + 1 else: fare = N - A + B + 1 fares.append(fare) results.append(fares) return results"},{"question":"A delivery company uses drones to carry packages to various locations. Each drone can carry up to a certain weight. You are given a list of package weights and the maximum weight capacity of a drone. Your task is to determine the minimum number of drones required to deliver all the packages. Constraints: * 1 ≤ number of packages ≤ 1000 * 1 ≤ weight of each package ≤ 100 * 1 ≤ maximum weight capacity of a drone ≤ 1000 Input: Input is given from Standard Input in the following format: ``` n weights max_capacity ``` Where: * `n` is the number of packages. * `weights` is a list of integers representing the weight of each package. * `max_capacity` is an integer representing the maximum weight capacity of a drone. Output: Print the minimum number of drones required to deliver all the packages. Examples: Input: ``` 5 [10, 20, 30, 40, 50] 100 ``` Output: ``` 2 ``` Input: ``` 6 [70, 50, 80, 30, 20, 60] 150 ``` Output: ``` 3 ```","solution":"def min_drones(n, weights, max_capacity): Determines the minimum number of drones required to deliver all packages given the weights of the packages and the maximum weight capacity of a drone. Parameters: n (int): Number of packages. weights (list): List of integers representing the weight of each package. max_capacity (int): Maximum weight capacity of a drone. Returns: int: Minimum number of drones required. weights.sort(reverse=True) drones = 0 while weights: current_weight = 0 i = 0 while i < len(weights): if current_weight + weights[i] <= max_capacity: current_weight += weights.pop(i) else: i += 1 drones += 1 return drones"},{"question":"Given a string consisting of lowercase English letters, you are to implement a function that determines the length of the longest substring with all unique characters. # Function Signature ```python def longest_unique_substring(s: str) -> int: ``` # Input - A single string `s` of length `n` (1 ≤ n ≤ 10^5). # Output - An integer representing the length of the longest substring with all unique characters in the input string. # Example Input ```text abcabcbb ``` Output ```text 3 ``` Explanation The longest substring is \\"abc\\", which has a length of 3. Input ```text bbbbb ``` Output ```text 1 ``` Explanation The longest substring is \\"b\\", which has a length of 1. Input ```text pwwkew ``` Output ```text 3 ``` Explanation The longest substring is \\"wke\\", which has a length of 3. # Notes - Your solution should be efficient and handle the case where the input string is very long. - Pay extra attention to edge cases, such as when the string contains only one unique character or when all characters in the string are unique.","solution":"def longest_unique_substring(s: str) -> int: Returns the length of the longest substring with all unique characters. n = len(s) if n == 0: return 0 char_index_map = {} longest_length = 0 start = 0 for end in range(n): if s[end] in char_index_map: start = max(start, char_index_map[s[end]] + 1) char_index_map[s[end]] = end longest_length = max(longest_length, end - start + 1) return longest_length"},{"question":"Given a list of integers, determine if the sequence can be reordered to form an arithmetic progression. An arithmetic progression is a sequence of numbers such that the difference between any two consecutive terms is constant. Input The first line contains a single integer T, the number of test cases. The following T lines each contain a list of N integers separated by spaces. Output For each test case, print \\"YES\\" if the sequence can be reordered to form an arithmetic progression, else print \\"NO\\". Constraints 1 ≤ T ≤ 10 2 ≤ N ≤ 50 -10^4 ≤ integers in the list ≤ 10^4 SAMPLE INPUT 3 3 1 2 5 1 3 5 7 9 4 3 6 10 15 SAMPLE OUTPUT YES YES NO","solution":"def can_form_arithmetic_progression(arr): Checks if the given list can be reordered to form an arithmetic progression. arr.sort() diff = arr[1] - arr[0] for i in range(2, len(arr)): if arr[i] - arr[i - 1] != diff: return False return True def process_input(T, test_cases): Processes a number of test cases to determine if each can be reordered to form an arithmetic progression. results = [] for case in test_cases: if can_form_arithmetic_progression(case): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a string consisting of lowercase letters and an integer k. Your task is to determine the lexicographically smallest string that can be obtained by rotating some substring of the string k times either to the left or to the right. A rotation to the left by one position moves each character to its left, with the first character moving to the end of the substring. Similarly, a rotation to the right by one position moves each character to its right, with the last character moving to the start of the substring. Write a function that takes two parameters: a string s and an integer k, and returns the lexicographically smallest string. Constraints: * 1 <= len(s) <= 1000 * 1 <= k <= len(s) # Input: A string s and an integer k. # Output: A string representing the lexicographically smallest string obtainable through k rotations. # Examples: Input: ``` s = \\"cba\\" k = 1 ``` Output: ``` \\"acb\\" ``` Input: ``` s = \\"dcab\\" k = 2 ``` Output: ``` \\"abcd\\" ``` Input: ``` s = \\"baacb\\" k = 3 ``` Output: ``` \\"aabbc\\" ```","solution":"def lexicographically_smallest_string(s, k): Returns the lexicographically smallest string by rotating a substring k times. if k == 1: # When k is 1, we can only rotate the entire string, consider all rotations and choose the smallest one. smallest = s for i in range(1, len(s)): rotated = s[i:] + s[:i] if rotated < smallest: smallest = rotated return smallest else: # When k >= 2, we can arbitrarily sort the string. return \'\'.join(sorted(s))"},{"question":"Problem Statement You are given a string `s` and a string `t` consisting of lowercase English letters. You need to determine if `t` is a subsequence of `s`. A subsequence of a string is a new string generated from the original string with some characters(can be none) deleted without changing the relative order of the remaining characters. (For example, \\"ace\\" is a subsequence of \\"abcde\\" while \\"aec\\" is not). Constraints: - The length of `s` is between 1 and 100,000 inclusive. - The length of `t` is between 1 and 100,000 inclusive. Input Format: The input consists of two lines. - The first line contains the string `s`. - The second line contains the string `t`. Output: Output \\"True\\" (without quotes) if `t` is a subsequence of `s`, otherwise output \\"False\\". Example: Input abcde ace Output True Input abcde aec Output False","solution":"def is_subsequence(s, t): Determines if string t is a subsequence of string s. Parameters: s (str): The original string. t (str): The string to check as a subsequence of s. Returns: bool: True if t is a subsequence of s, False otherwise. t_index = 0 t_len = len(t) if t_len == 0: return True for char in s: if char == t[t_index]: t_index += 1 if t_index == t_len: return True return t_index == t_len"},{"question":"A factory is producing metal rods of various lengths. To make the production more efficient, the factory has decided to reorganize the rods into groups. A group consists of rods of the same length, and the factory wants to ensure each rod ends up in the same group as others of the same length. However, production efficiency is not the only concern. The factory also aims to balance the workload by ensuring that the difference in the number of rods between the largest and smallest groups is minimized. Additionally, when there is more than one way to balance the groups, the factory prefers to maximize the number of rods in the smallest group. Given the lengths of the rods, your task is to determine the smallest and largest number of rods in any group after optimization. Input The input consists of a single dataset in the following format: n l1 l2 ... ln Where n (1 ≤ n ≤ 1000) is the number of rods, followed by the lengths of the rods l1, l2, ..., ln, where each length is a positive integer no greater than 100. Output Output a single line containing two integers l and h separated by a single space. Here, l and h represent the smallest and the largest number of rods in any group after balancing. Sample Input 10 1 2 2 2 3 3 4 4 4 4 Sample Output 1 4 Explanation In the sample input, the rods have lengths 1, 2, 2, 2, 3, 3, 4, 4, 4, 4. The optimal distribution of rods into groups by length is: - 1 rod of length 1 (group of size 1) - 3 rods of length 2 (group of size 3) - 2 rods of length 3 (group of size 2) - 4 rods of length 4 (group of size 4) Therefore, the smallest group has 1 rod and the largest group has 4 rods. Thus, the output is \\"1 4\\".","solution":"def balance_rod_groups(n, lengths): from collections import Counter # Count the frequency of each rod length freq = Counter(lengths) # Get the counts of each group group_sizes = list(freq.values()) # Determine the smallest and largest number of rods in any group smallest_group = min(group_sizes) largest_group = max(group_sizes) return smallest_group, largest_group # Example usage n = 10 lengths = [1, 2, 2, 2, 3, 3, 4, 4, 4, 4] print(balance_rod_groups(n, lengths)) # Output: (1, 4)"},{"question":"Alice loves sorting arrays. Recently she found a new sorting algorithm which she named as \\"CustomSort\\". This algorithm works by initially partitioning an array into discinct groups of elements with the same value, then sorting those groups by value. Then, each group is sorted internally such that all elements are arranged in descending order. Help Alice and implement a program which sorts an array using her \\"CustomSort\\" algorithm. Input The first line contains the single integer n (1 ≤ n ≤ 100000) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (-100000 ≤ ai ≤ 100000), the elements of the array. Output Print the array sorted using \\"CustomSort\\" algorithm. Examples Input 5 4 1 2 2 4 Output 4 4 2 2 1 Input 3 -1 3 -1 Output 3 -1 -1","solution":"def custom_sort(n, arr): from collections import Counter counter = Counter(arr) sorted_unique_values = sorted(counter.keys(), reverse=True) result = [] for value in sorted_unique_values: result.extend([value] * counter[value]) return result"},{"question":"Ben, a software developer, is currently working on a feature to automatically generate usernames for a new application. The usernames must follow a specific format. # Problem You are given a string representing the user\'s full name. Your task is to generate a valid username based on the following rules: 1. The username must consist of the first letter of the user\'s first name, followed by the full last name. 2. All characters in the username must be in lowercase. 3. If the username exceeds 15 characters, truncate it to 15 characters. Write a function `generate_username(full_name: str) -> str` that takes the user\'s full name and returns a valid username. # Input - `full_name`: A string representing the user\'s full name. The full name will contain exactly one space separating the first and last name, with no leading or trailing spaces. # Output - A string representing the generated username. # Constraints - The full name string will be between 3 and 40 characters. - The full name will only contain alphabetic characters (both uppercase and lowercase) and exactly one space separating the first name and the last name. # Examples Example 1 **Input:** ``` John Doe ``` **Output:** ``` jdoe ``` Example 2 **Input:** ``` Alice Wonderland ``` **Output:** ``` awonderland ``` Example 3 **Input:** ``` Christopher Columbus ``` **Output:** ``` ccolumbus ``` Example 4 **Input:** ``` Amelia Earhart ``` **Output:** ``` aearhart ``` Example 5 **Input:** ``` Jonathan Livingston ``` **Output:** ``` jlivingston ``` # Hint You may find string splitting and slicing operations useful for solving this problem.","solution":"def generate_username(full_name: str) -> str: Generates a username based on the user\'s full name. Parameters: - full_name: A string representing the user\'s full name, with a space separating first and last name. Returns: - A string representing the generated username. first_name, last_name = full_name.split() first_initial = first_name[0].lower() username = first_initial + last_name.lower() return username[:15]"},{"question":"You are given a list of tasks where each task has a start time and an end time. The goal is to determine the minimum number of workers required to complete all the tasks without any overlap. Each worker can handle only one task at a time. A task is represented by a tuple (start_time, end_time), where \'start_time\' and \'end_time\' are non-negative integers. You need to write a function that takes a list of these tasks and returns the minimum number of workers required. Function Signature: ```python def min_workers(tasks: List[Tuple[int, int]]) -> int: ``` **Input:** - A list of tasks where each task is represented by a tuple `(start_time, end_time)`. - The length of the list will be between 1 and 100,000. - The `start_time` and `end_time` for each task will be between 0 and 1,000,000. - `start_time` will be less than `end_time` for each task. **Output:** - An integer representing the minimum number of workers required to complete all the tasks. **Examples:** Input #1: ```python [(1, 4), (2, 5), (9, 12), (5, 9)] ``` Output #1: ```python 2 ``` Input #2: ```python [(1, 2), (1, 2), (1, 2)] ``` Output #2: ```python 3 ``` Input #3: ```python [(6, 7), (7, 8), (8, 9), (5, 12)] ``` Output #3: ```python 2 ``` **Explanation:** In the first example, tasks (1, 4) and (2, 5) overlap, so they require two different workers. Tasks (9, 12) and (5, 9) do not overlap with other tasks in such a way that more than two workers are required. In the second example, all three tasks overlap, so three workers are required. In the third example, tasks (6, 7), (7, 8), (8, 9) can all be handled by the same worker, while task (5, 12) requires its own worker independently, so a total of two workers are needed.","solution":"from typing import List, Tuple import heapq def min_workers(tasks: List[Tuple[int, int]]) -> int: # Sort the tasks by start time tasks.sort(key=lambda x: x[0]) # Initialize a priority queue to keep track of end times of tasks min_heap = [] # Iterate over each task for start, end in tasks: # If there\'s a task in the heap that ends before the current task starts, # remove that task from the heap if min_heap and min_heap[0] <= start: heapq.heappop(min_heap) # Add the end time of the current task to the heap heapq.heappush(min_heap, end) # The size of the heap will be the minimum number of workers needed return len(min_heap)"},{"question":"In the ancient kingdom of Anagramia, the king loves words. He often gives his subjects challenges that involve creating new words using the letters from a given word. One day, he decides to challenge the smartest minds in Anagramia with a special problem: Given a word consisting of lowercase English letters, count how many distinct palindromes can be created by rearranging all of its letters. A palindrome is a word that reads the same backward as forward. For example, the words \\"abba\\", \\"racecar\\", and \\"a\\" are palindromes. You need to write a program to help solve the king\'s problem. # Input The input consists of a single string, which contains lowercase English letters only. The length of the string will not exceed 20 characters. # Output Output a single integer, the number of distinct palindromes that can be formed using all the letters of the input word. # Example Input: ``` aabb ``` Output: ``` 2 ``` Explanation: The distinct palindromes that can be formed using the letters of \\"aabb\\" are \\"abba\\" and \\"baab\\". # Note - In the first example, from the word \\"aabb\\", we can rearrange the letters to form two distinct palindromes: \\"abba\\" and \\"baab\\". - If no palindromes can be formed, the output should be 0.","solution":"from collections import Counter from math import factorial def count_palindromes(word): letter_count = Counter(word) odd_count = sum(1 for count in letter_count.values() if count % 2 != 0) if odd_count > 1: return 0 half_counts = [count // 2 for count in letter_count.values()] half_length = sum(half_counts) half_permutations = factorial(half_length) for count in half_counts: half_permutations //= factorial(count) return half_permutations"},{"question":"John is practicing competitive programming and wants to generate a sequence of integers with a specific property. He needs to construct a sequence such that for each pair of elements in the sequence, their Greatest Common Divisor (GCD) is a specific value. Write a program to help John construct such a sequence. Input The first line contains two positive integers N (1 ≤ N ≤ 2 * 10^5) and G (1 ≤ G ≤ 10^9), denoting the number of elements in the sequence and the desired GCD of the sequence, respectively. Output Output N integers separated by spaces, representing the sequence of integers such that the GCD of any two elements in the sequence is exactly G. Examples Input 3 2 Output 2 4 6 Input 5 10 Output 10 20 30 40 50 Note In the first sample, the sequence is [2, 4, 6]. The GCD of any pair of these numbers is 2, which meets the requirement. In the second sample, the sequence is [10, 20, 30, 40, 50]. The GCD of any pair of these numbers is 10, which again meets the requirement. Constraints - 1 ≤ N ≤ 200,000 - 1 ≤ G ≤ 1,000,000,000","solution":"def generate_sequence(N, G): Generates a sequence of N integers such that the GCD of any pair is G. Args: N : int : Number of elements in the sequence. G : int : Desired GCD of the sequence. Returns: list[int]: A list of N integers with the desired GCD property. sequence = [G * i for i in range(1, N + 1)] return sequence"},{"question":"Given a list of integers, you are to determine if they can be rearranged to form an arithmetic sequence. An arithmetic sequence is a sequence of numbers in which the difference between any two consecutive terms is the same. Your task is to write a program to determine if it\'s possible to rearrange the given integers to form an arithmetic sequence. Input: The first line of the input file contains a single integer T, the number of test cases. Each test case starts with a line containing the integer N. The next line contains N space-separated integers. Output: For each test case, output \\"YES\\" if the given integers can be rearranged to form an arithmetic sequence, otherwise output \\"NO\\". Constraints: 1 ≤ T ≤ 10 2 ≤ N ≤ 1000 1 ≤ number ≤ 10000 Example: Input: 2 4 3 5 1 7 3 1 2 4 Output: YES NO Explanation: For the first test case, the sequence can be rearranged to [1, 3, 5, 7], which is an arithmetic sequence with a common difference of 2. For the second test case, there is no way to rearrange the sequence to form an arithmetic sequence.","solution":"def can_form_arithmetic_sequence(arr): Determines if the given list can be rearranged to form an arithmetic sequence. Parameters: arr (list): List of integers. Returns: str: \\"YES\\" if it can be rearranged to form an arithmetic sequence, otherwise \\"NO\\". arr.sort() common_diff = arr[1] - arr[0] for i in range(2, len(arr)): if arr[i] - arr[i - 1] != common_diff: return \\"NO\\" return \\"YES\\" def check_arithmetic_sequences(test_cases): Determines if each test case can form an arithmetic sequence. Parameters: test_cases (list): List of tuples, each containing the number of integers and the list of integers. Returns: list: List of results for each test case (\\"YES\\" or \\"NO\\"). results = [] for _, numbers in test_cases: result = can_form_arithmetic_sequence(numbers) results.append(result) return results"},{"question":"Alex has a grid of size m x n where he can move only up, down, left, or right. Each cell in the grid has a specific cost associated with it. He can only step on cells with a cost that is strictly increasing compared to the cost of the cell he is currently on. Alex starts his journey from the top-left corner of the grid (0, 0) and wants to reach the bottom-right corner (m-1, n-1). Given the grid, your task is to determine whether it\'s possible for Alex to reach the bottom-right corner by only stepping on cells with strictly increasing costs. If possible, print the minimum number of steps required to reach the bottom-right corner. If it\'s not possible, print -1. Input The first line of input contains two integers m and n (1 ≤ m, n ≤ 100) — the dimensions of the grid. Each of the next m lines contains n integers, where each integer grid_i_j (0 ≤ grid_i_j ≤ 10^9) is the cost of the cell at position (i, j). Output Print the minimum number of steps required to reach the bottom-right corner if possible. Otherwise, print -1. Examples Input 3 3 1 2 3 2 3 4 3 4 5 Output 4 Input 3 3 1 2 3 4 5 6 3 2 1 Output -1 Note In the first example, one possible path Alex can take is (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) with steps 4. The costs along the path (1 -> 2 -> 3 -> 4 -> 5) are strictly increasing. In the second example, there is no possible path that allows Alex to reach the bottom-right corner by only stepping on cells with strictly increasing costs.","solution":"from collections import deque def min_steps_to_reach_end(grid): Determine the minimum number of steps to reach the bottom-right corner of the grid starting from the top-left corner with strictly increasing costs. :param grid: List of lists of integers representing the grid :return: Minimum number of steps if possible, otherwise -1 m = len(grid) n = len(grid[0]) # Directions for moving up, down, left, and right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Queue for BFS: (current_row, current_col, steps) queue = deque([(0, 0, 0)]) visited = [[False] * n for _ in range(m)] visited[0][0] = True while queue: x, y, steps = queue.popleft() # If we reached the bottom-right corner, return the steps if x == m - 1 and y == n - 1: return steps # Traverse the grid in the four possible directions for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny] and grid[nx][ny] > grid[x][y]: visited[nx][ny] = True queue.append((nx, ny, steps + 1)) # If no valid path found, return -1 return -1"},{"question":"A gardening enthusiast is maintaining a rectangular garden with a grid composed of cells. The garden is represented as a binary matrix where a cell with a value of 1 indicates that a flower is planted there, and a cell with a value of 0 is an empty patch. The enthusiast wants to find the largest possible rectangle (composed entirely of flowers) that can be formed in the garden. Write a program to determine the area of the largest rectangle containing only 1s in a given binary matrix. Input: The first line contains two integers n and m (1 ≤ n, m ≤ 200), where n is the number of rows and m is the number of columns of the matrix. Each of the next n lines contains m space-separated integers representing the binary matrix. Output: Output one single integer — the area of the largest rectangle containing only 1s. Examples: Input 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 Output 6 Input 2 2 1 1 1 1 Output 4 Note: In the first example, the largest rectangle containing only 1s has an area of 6 and is formed by the last three rows and the last three columns (with top-left corner at position (2, 2) and bottom-right corner at position (4, 4)). In the second example, the matrix itself forms the largest rectangle containing only 1s, and its area is 4 (with top-left corner at position (1, 1) and bottom-right corner at position (2, 2)).","solution":"def maximalRectangle(matrix): if not matrix: return 0 n = len(matrix) m = len(matrix[0]) height = [0] * (m + 1) max_area = 0 for row in matrix: stack = [] for i in range(m + 1): if i < m: if row[i] == \'1\': height[i] += 1 else: height[i] = 0 while stack and height[stack[-1]] > height[i]: h = height[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) return max_area"},{"question":"A critical aspect of certain software systems is determining if pairs of parentheses in a string are properly balanced and nested. Write a function: ```python def are_parentheses_balanced(s: str) -> str: ``` that takes a single argument: - `s` (string) — a string consisting of `(` and `)` characters. The function should return `Yes` if the parentheses in the string `s` are properly balanced and nested and `No` otherwise. **Example** Input ``` ()((()))() ``` Output ``` Yes ``` Input ``` (()())(() ``` Output ``` No ```","solution":"def are_parentheses_balanced(s: str) -> str: Checks if the parentheses in the given string are properly balanced and nested. Args: s (str): A string consisting of `(` and `)` characters. Returns: str: \'Yes\' if the parentheses are balanced and nested properly, otherwise \'No\'. stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return \'No\' stack.pop() return \'Yes\' if not stack else \'No\'"},{"question":"There is an array of integers representing the ages of students in a class. You are tasked with finding the age that occurs the most frequently in the array. If there is a tie (i.e., multiple ages occur with the same maximum frequency), return the smallest age among those. Constraints * 1 leq N leq 100 * 1 leq age_i leq 100 Input Input is given from Standard Input in the following format: ``` N age_1 age_2 ... age_N ``` Output Print a single integer — the most frequent age. If there is a tie, print the smallest age among those with maximum frequency. Examples Input ``` 5 18 17 17 16 18 ``` Output ``` 17 ``` Input ``` 4 21 22 22 21 ``` Output ``` 21 ```","solution":"def most_frequent_age(N, ages): Returns the age that occurs the most frequently in the array. If there is a tie, return the smallest age among those with maximum frequency. from collections import Counter age_counts = Counter(ages) max_frequency = max(age_counts.values()) most_frequent = [age for age, count in age_counts.items() if count == max_frequency] return min(most_frequent)"},{"question":"In a research lab, scientists are working on a problem related to unique compound formations. Each compound is represented as a sequence of symbols, and similar compounds are those which can be transformed into each other by swapping two different symbols any number of times. The task is to identify the largest group of similar compounds from a given set of compounds. Input The first line contains an integer n (1 ≤ n ≤ 10^5), the number of compounds. Each of the next n lines contains a string consisting of lowercase English letters, representing a compound. The length of each string will not exceed 100 characters. Output Output a single integer, the size of the largest group of similar compounds. Examples Input 5 abc bca cab acb bac Output 5 Input 4 ab bc ca ac Output 2 Note For the first test case, all 5 compounds are similar because they can be transformed into each other by swapping different symbols. For the second test case, the largest group of similar compounds is either {\'ab\', \'ba\'} or {\'ac\', \'ca\'}, each containing 2 compounds.","solution":"def largest_group_of_similar_compounds(n, compounds): Finds the largest group of similar compounds that can be transformed into each other. Args: n : int : the number of compounds compounds : list of str : list of compound strings Returns: int : the size of the largest group of similar compounds from collections import defaultdict group_count = defaultdict(int) for compound in compounds: key = \'\'.join(sorted(compound)) group_count[key] += 1 return max(group_count.values())"},{"question":"Given a string, determine if it is a palindrome, ignoring spaces, punctuation, and letter casing. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Input First line of input contains an integer t, t ≤ 100, representing the number of test cases. Then t lines follow, each containing one string s, where the length of s does not exceed 1000 characters. Output For each test case, output \\"YES\\" if the string is a palindrome, \\"NO\\" otherwise. Sample Input 3 A man, a plan, a canal, Panama! racecar Hello, World! Output YES YES NO","solution":"import re def is_palindrome(s): Returns \'YES\' if the string s is a palindrome, \'NO\' otherwise. # Remove spaces, punctuation and make lowercase cleaned_string = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() # Compare the cleaned string with its reverse return \'YES\' if cleaned_string == cleaned_string[::-1] else \'NO\' def process_test_cases(t, test_cases): results = [] for case in test_cases: results.append(is_palindrome(case)) return results"},{"question":"In a given town, there are N intersections connected by M bidirectional roads. Each intersection has a traffic light that can be either red or green. You are given a grid of N rows and M columns where rows represent intersections and columns represent roads. A cell in this grid is true if the corresponding intersection has a traffic light that is red, and false if it’s green. Assume there will be at least one intersection and one road. You have to determine if there is a path from the top-left intersection to the bottom-right intersection such that all traffic lights encountered on this path are green (false). Input The first line contains two integers N and M (1 ≤ N, M ≤ 1000) — the number of intersections and roads respectively. Next N lines have M values each (0 or 1) representing the traffic lights. 0 indicates a green light and 1 indicates a red light. Output Print \\"YES\\" if there exists a path from the top-left intersection to the bottom-right intersection that consists of only green lights. Otherwise, print \\"NO\\". Examples Input 3 3 0 0 1 1 0 0 1 1 0 Output YES Input 3 3 0 1 1 1 1 0 1 1 0 Output NO Note In the first sample, one of the valid paths is: (0, 0) -> (0, 1) -> (1, 1) -> (1, 2) -> (2, 2) In the second sample, no such path exists.","solution":"def exists_path(N, M, grid): def dfs(x, y): if x < 0 or x >= N or y < 0 or y >= M or grid[x][y] == 1: return False if (x, y) == (N-1, M-1): return True grid[x][y] = 1 # mark as visited return dfs(x+1, y) or dfs(x, y+1) or dfs(x-1, y) or dfs(x, y-1) if grid[0][0] == 1 or grid[N-1][M-1] == 1: return \\"NO\\" return \\"YES\\" if dfs(0, 0) else \\"NO\\""},{"question":"You are given a list of integers. Your task is to determine whether there exists a pair of integers in the list whose sum is equal to a specific target number. Input : The first line contains an integer T, the number of test cases. Each of the next T segments consists of two lines: 1. The first line of each segment contains two integers, N (the number of elements in the list) and K (the target sum). 2. The second line contains N space-separated integers, representing the list elements. Output : Output T lines, one for each test case, each containing \\"YES\\" if there exists a pair of integers in the list whose sum is equal to K, and \\"NO\\" otherwise. Sample Input : 3 5 9 2 7 11 15 1 4 8 1 2 3 4 6 20 1 2 3 4 10 10 Sample Output : YES NO YES Constraints : 1 <= T <= 100 1 <= N <= 10^5 -10^9 <= List Elements, K <= 10^9","solution":"def find_pair_with_sum(test_cases): results = [] for n, k, numbers in test_cases: found = False nums_set = set() for number in numbers: if k - number in nums_set: results.append(\\"YES\\") found = True break nums_set.add(number) if not found: results.append(\\"NO\\") return results def parse_input(input_str): input_lines = input_str.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] line_index = 1 for _ in range(T): n, k = map(int, input_lines[line_index].split()) numbers = list(map(int, input_lines[line_index + 1].split())) test_cases.append((n, k, numbers)) line_index += 2 return test_cases"},{"question":"A large warehouse is organized into a grid structure with rows and columns. Each cell in the grid represents a storage unit, and each unit can store a certain number of boxes. You are tasked with finding the path from the top-left corner to the bottom-right corner of the grid that maximizes the total number of boxes collected. You can only move right or down from the current cell. Each cell in the grid contains a non-negative integer representing the number of boxes stored in that unit. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000), representing the number of rows and columns in the grid, respectively. Each of the next n lines contains m integers, representing the number of boxes in each unit (0 ≤ boxes ≤ 1000). Output Print a single integer, the maximum number of boxes that can be collected from the top-left to the bottom-right corner. Examples Input 3 3 1 3 1 1 5 1 4 2 1 Output 12 Input 2 2 1 2 3 4 Output 8","solution":"def max_boxes_collected(grid): Returns the maximum number of boxes that can be collected from the top-left to the bottom-right corner of the grid. :param grid: List[List[int]], the grid representing the number of boxes in each unit. :return: int, maximum number of boxes that can be collected. n = len(grid) m = len(grid[0]) # DP table to store the maximum number of boxes collected up to each cell. dp = [[0] * m for _ in range(n)] dp[0][0] = grid[0][0] # Fill the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the remainder of the DP table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right corner will have the maximum boxes collected return dp[-1][-1]"},{"question":"You are given a list of distinct integers representing the heights of a group of people. Each person stands in a queue, and the queue is represented by an array of integers where each integer is the height of a person standing at that position in the queue. You need to rearrange the people in the queue according to the following conditions: 1. Each person prefers to be as close to the front of the queue as possible. 2. However, a person can only stand in front of another person if their height is not greater than the height of the person behind them. Write a program to rearrange the queue so that the first person has the least height and each person thereafter either has the same or a greater height than the person in front of them. Constraints: * 1 ≤ number of people ≤ 100 * Heights of people are distinct integers in the range [1, 200]. Input Input is given from Standard Input in the following format: n h_1 h_2 ... h_n Output Print the rearranged queue in the same format as input. Examples Input 5 4 2 3 1 5 Output 1 2 3 4 5 Input 8 10 20 30 40 5 50 15 25 Output 5 10 15 20 25 30 40 50","solution":"def rearrange_queue(n, heights): Rearrange heights in a non-decreasing order. :param n: Number of people :param heights: List of heights :return: List of rearranged heights return sorted(heights)"},{"question":"Santa\'s elves are in a programming competition where they need to determine whether a given number sequence can be reordered to form a strictly increasing arithmetic sequence. A sequence is strictly increasing arithmetic if the difference between any two consecutive numbers is a positive constant. Can you help the elves determine whether it\'s possible? Input The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. The first line of each test case contains an integer n (2 ≤ n ≤ 1000) — the number of elements in the sequence. The second line of each test case contains n integers, separated by spaces — the elements of the sequence. Output For each test case, print \\"YES\\" if the sequence can be reordered to form a strictly increasing arithmetic sequence, otherwise print \\"NO\\". Examples Input 2 3 3 1 2 4 1 3 2 5 Output YES NO Note In the first test case, the sequence 3, 1, 2 can be reordered as 1, 2, 3 which is a strictly increasing arithmetic sequence with a difference of 1 between consecutive elements. In the second test case, no reordering of the sequence 1, 3, 2, 5 can produce a strictly increasing arithmetic sequence with a constant difference.","solution":"def can_form_arithmetic_sequence(t, test_cases): results = [] for case in test_cases: n, sequence = case sequence.sort() is_arithmetic = True common_difference = sequence[1] - sequence[0] for i in range(1, n): if sequence[i] - sequence[i-1] != common_difference: is_arithmetic = False break results.append(\\"YES\\" if is_arithmetic else \\"NO\\") return results"},{"question":"Alya is organizing a new card game competition for her friends. In this game, each player starts with a hand of cards, and they take turns to discard cards according to certain rules until no more moves are possible. The goal of the game is to count the number of cards each player discards. Each card has a positive integer value assigned to it. Players are indexed by 1 to m in the order they are positioned in the circle. The game proceeds as follows: 1. The player whose turn it is discards one card. The value of the card represents the number of turns that will pass before this player gets another turn. 2. After discarding a card, if that player has no cards left in their hand, they leave the game immediately. 3. If all players have discarded cards in a round, the game ends. Write a program to determine how many cards each player discards during the game. # Input The first line contains an integer m (1 ≤ m ≤ 1000) — the number of players. Next m lines contain arrays, each representing the cards of a player: - The first number indicates ni (1 ≤ ni ≤ 20), the number of cards in the player\'s hand. - The next ni integers represent the values of the cards (1 ≤ value ≤ 1000). # Output Print m integers, where the i-th integer represents the number of cards discarded by the i-th player. # Example Input: 4 3 3 2 1 1 1 2 1 2 3 1 1 1 Output: 3 1 2 3 Note In this example, the first player starts with cards [3, 2, 1]. They discard the card with value 3, so their next turn will be after three turns. The second player discards their only card [1] immediately and leaves the game. The third player discards one of their cards [1, 2], meaning their next turn will be after one turn. Finally, the fourth player discards [1, 1, 1]. The process continues until all cards are discarded or no more moves are possible. The output indicates the number of cards each player discards before leaving the game.","solution":"def count_discards(m, player_hands): discards = [0] * m indices = [0] * m players_in_game = set(range(m)) current_turn = 0 while players_in_game: current_player = current_turn % m if current_player in players_in_game: if indices[current_player] < len(player_hands[current_player]): discards[current_player] += 1 discard_value = player_hands[current_player][indices[current_player]] indices[current_player] += 1 current_turn += discard_value if indices[current_player] == len(player_hands[current_player]): players_in_game.remove(current_player) else: players_in_game.remove(current_player) current_turn += 1 return discards"},{"question":"Ujan has resumed working on his collection of old programming problems and stumbled upon a problem related to string manipulation. He was interested in determining how many distinct non-empty substrings of a given string are palindromes. A palindrome is a string that reads the same forward and backward. Ujan has decided to write a program to solve this problem but needs your help to do it. Input The input consists of a single string s (1 ≤ length of s ≤ 1000), which contains only lowercase English alphabets. Output Output a single integer, the number of distinct non-empty substrings of the given string s that are palindromes. Examples Input abba Output 4 Input abcd Output 4 Note In the first sample, the string \\"abba\\" has the following distinct palindromic substrings: \\"a\\", \\"b\\", \\"bb\\", \\"abba\\". In the second sample, the string \\"abcd\\" has each character as a distinct palindromic substring: \\"a\\", \\"b\\", \\"c\\", \\"d\\".","solution":"def count_palindromic_substrings(s): Returns the number of distinct non-empty palindromic substrings of the given string s. def is_palindrome(substr): return substr == substr[::-1] palindromes = set() length = len(s) for i in range(length): for j in range(i+1, length+1): substr = s[i:j] if is_palindrome(substr): palindromes.add(substr) return len(palindromes)"},{"question":"Johnny is trying out a new game on his phone where he needs to navigate through a grid. The grid is an n x m grid filled with non-negative integers. Johnny starts at the top-left corner (1,1) (which is position (0,0) in index programming) and he must reach the bottom-right corner (n,m) (which is position (n-1,m-1) in index programming). The rules are that Johnny can only move right or down. Help him figure out the minimum sum of all numbers along his path from the top-left to the bottom-right corner. Input The first line of input contains two integers n and m, indicating the number of rows and columns in the grid (1 ≤ n, m ≤ 100). The next n lines each contain m space-separated integers, representing the grid. Each integer gij (0 ≤ gij ≤ 100) represents the cost to step on that cell. Output Output a single integer, the minimum sum Johnny can achieve to reach the bottom-right corner of the grid. Examples Input 3 3 1 3 1 1 5 1 4 2 1 Output 7 Input 2 2 1 2 1 1 Output 3 Note In the first example, the path with the minimum sum is 1 → 3 → 1 → 1 → 1, with a total cost of 7. In the second example, the path with the minimum sum is 1 → 2 → 1, with a total cost of 3.","solution":"def min_path_sum(grid): n = len(grid) m = len(grid[0]) # Initialize the dp array with the same dimensions as grid dp = [[0] * m for _ in range(n)] # Start with the top-left corner dp[0][0] = grid[0][0] # Fill the first row (can only move from the left) for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only move from above) for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right corner will have the minimum path sum return dp[-1][-1] def min_path_sum_from_input(n, m, grid_data): grid = [] index = 0 for _ in range(n): grid.append(grid_data[index:index + m]) index += m return min_path_sum(grid)"},{"question":"A railway company is planning to establish a series of new stations along a straight railway line with a total length of L kilometers. The company has identified possible locations where new stations can be built and the cost associated with each location. The company must build exactly K new stations, and they want to minimize the total cost. Write a program to determine the minimum possible cost of building K stations. Input The first line contains two integers L (2 ≤ L ≤ 10000) and K (1 ≤ K ≤ L), representing the total length of the railway line and the number of new stations to build, respectively. The second line contains L-1 integers c1, c2, ..., cL-1 (1 ≤ ci ≤ 10000), where ci represents the cost of building a station at the i-th kilometer from the starting point. Output The output contains one line with a single integer, the minimum possible cost for building K new stations. Input / output example Input example 1 10 3 1 3 7 9 4 6 2 5 8 Output example 1 6 Explanation: Building stations at the 1st, 4th, and 7th kilometers results in the minimum cost (1 + 2 + 3 = 6). Example Input 10 3 1 3 7 9 4 6 2 5 8 Output 6","solution":"def min_cost(L, K, costs): Determines the minimum cost to build K stations along a railway line of length L. Parameters: L (int): Total length of the railway line. K (int): Number of new stations to build. costs (list of ints): The cost associated with building a station at each kilometer. Returns: int: The minimum possible cost to build K new stations. # The costs array is already indexed from 0 to L-2, so no need to adjust indices costs.sort() return sum(costs[:K])"},{"question":"Little Timmy loves playing with sequences of numbers. Recently, he discovered how to find an arithmetic sequence hidden within a longer list of numbers. He defines an arithmetic sequence as a sequence of numbers where the difference between consecutive terms is constant. Given a list of numbers, Timmy wants to determine the length of the longest arithmetic sequence that can be found within the list. Can you help Timmy by writing a program to find this? Input Format: The first line contains a number n - denoting the number of elements in the list. The next line contains n integers separated by space. Output Format: Print the length of the longest arithmetic sequence that can be found in the given list. Constraints: 1 ≤ n ≤ 100 1 ≤ list element ≤ 10^3 SAMPLE INPUT 6 1 7 10 15 27 29 SAMPLE OUTPUT 3 Explanation: The longest arithmetic sequence in the given list is [7, 10, 13] or [1, 10, 19], each of length 3.","solution":"def longest_arithmetic_sequence_length(nums): if len(nums) <= 1: return len(nums) dp = [{} for _ in range(len(nums))] max_length = 1 for i in range(1, len(nums)): for j in range(i): diff = nums[i] - nums[j] if diff in dp[j]: dp[i][diff] = dp[j][diff] + 1 else: dp[i][diff] = 2 max_length = max(max_length, dp[i][diff]) return max_length"},{"question":"You are given a string containing only the characters \'A\' and \'B\'. Your task is to determine if the string is a valid alternating sequence of \'A\' and \'B\' starting with \'A\'. Input The only given line contains a string consisting of the characters \'A\' and \'B\'. Output Print \\"YES\\" if the string alternates starting with \'A\' and \\"NO\\" otherwise. Examples Input ABABA Output YES Input ABBABA Output NO","solution":"def is_valid_alternating_sequence(s): Returns \\"YES\\" if the string is a valid alternating sequence of \'A\' and \'B\' starting with \'A\', otherwise \\"NO\\". if not s or s[0] != \'A\': return \\"NO\\" for i in range(1, len(s)): if s[i] == s[i-1]: return \\"NO\\" return \\"YES\\""},{"question":"Imagine you have a grid-based game where a character can move up, down, left, or right. The goal is to navigate the character from the top-left corner of the grid to the bottom-right corner. Some cells contain obstacles that the character cannot pass through. Write a function to determine the minimum number of moves required to reach the goal. If the goal is not reachable, return -1. Function Signature: ```python def min_moves(grid: List[List[int]]) -> int: ``` # Input - `grid`: A 2D list of integers where `0` represents an empty cell that the character can pass through and `1` represents an obstacle. # Output - Return the minimum number of moves required to reach the bottom-right corner from the top-left corner, or `-1` if it is not possible. # Example ```python grid = [ [0, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 1], [1, 0, 0, 0] ] print(min_moves(grid)) # Output: 6 grid = [ [0, 1], [1, 0] ] print(min_moves(grid)) # Output: -1 ``` # Constraints - The size of the grid will be between 2x2 and 100x100. - There is guaranteed to be a clear path from the starting cell, but the destination might be blocked.","solution":"from collections import deque from typing import List, Tuple def min_moves(grid: List[List[int]]) -> int: rows, cols = len(grid), len(grid[0]) if grid[0][0] == 1 or grid[rows-1][cols-1] == 1: return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def is_valid(x: int, y: int) -> bool: return 0 <= x < rows and 0 <= y < cols and grid[x][y] == 0 queue = deque([(0, 0, 0)]) visited = set((0, 0)) while queue: x, y, depth = queue.popleft() if x == rows-1 and y == cols-1: return depth for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, depth + 1)) return -1"},{"question":"An international software company is developing a new social media platform and is testing a feature to find the most active user groups. User groups are defined as sets of users that share a direct connection. This means if user A is friends with user B and user B is friends with user C, then A, B, and C are all part of the same user group. Your task is to determine the size of the largest user group in a given social network. Input The first line of input contains two integers N and M: N is the number of users (numbered 1 to N), and M is the number of friend connections. Each of the following M lines contains two integers u and v (1 leq u, v leq N) representing that user u and user v are friends. Output Output a single integer representing the size of the largest user group. Constraints - 2 leq N leq 100000 (100,000) - 1 leq M leq 200000 (200,000) Sample Input 1 7 5 1 2 2 3 4 5 5 6 6 7 Sample Output 1 4 In this sample input, there are 7 users and 5 connections. Users 1, 2, and 3 form one user group. Users 4, 5, 6, and 7 form another user group. Therefore, the size of the largest user group is 4. Sample Input 2 5 3 1 2 2 3 4 5 Sample Output 2 3 In this sample input, there are 5 users and 3 connections. Users 1, 2, and 3 form one user group. Users 4 and 5 form another user group. Therefore, the size of the largest user group is 3.","solution":"def largest_user_group(n, m, connections): from collections import defaultdict, deque # Create an adjacency list for the graph graph = defaultdict(list) for u, v in connections: graph[u].append(v) graph[v].append(u) # Function to perform BFS and return the size of the connected component def bfs(start): queue = deque([start]) visited.add(start) size = 0 while queue: node = queue.popleft() size += 1 for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return size visited = set() max_group_size = 0 # Traverse all nodes for user in range(1, n + 1): if user not in visited: group_size = bfs(user) max_group_size = max(max_group_size, group_size) return max_group_size"},{"question":"A manufacturing company has an assembly line with various robots performing tasks. Each robot either performs a task or passes the item to the next robot. However, there\'s a twist: some robots on the line malfunction and pass a faulty item that cannot be repaired. The goal is to identify and mark the position of the last task to be performed on the assembly line before the first malfunctioning robot. To represent this, you have an array where each index represents a robot in the assembly line. The array contains the following values: - `1`: The robot performs a task. - `0`: The robot is malfunctioning and can’t pass the item further. You need to find the last position in the array where a task (`1`) is performed before reaching the first malfunctioning robot (`0`). Write a function `last_task_position(n, robots)` where: - `n` is an integer (1 ≤ n ≤ 10^5), representing the number of robots. - `robots` is a list of n integers (either 0 or 1), representing the robots on the assembly line. Return an integer representing the 1-based index position of the last task performed before encountering the first malfunctioning robot. If there is no task performed before the first malfunctioning robot (i.e., robots start with `0`), return `-1`. # Input - An integer `n` representing the number of robots. - A list `robots` of n integers (either 0 or 1). # Output - A single integer which is the 1-based index of the last task performed before encountering the first malfunctioning robot. # Example Input ``` 5 [1, 1, 0, 1, 1] ``` Output ``` 2 ``` Input ``` 3 [0, 1, 1] ``` Output ``` -1 ``` Input ``` 4 [1, 1, 1, 1] ``` Output ``` 4 ```","solution":"def last_task_position(n, robots): Find the last position in the robots list where a task (1) is performed before encountering the first malfunctioning robot (0). :param n: Number of robots :param robots: List of integers representing robots (1 for performing task, 0 for malfunctioning) :return: 1-based index of the last task performed before first malfunctioning robot, or -1 if not applicable for i in range(n): if robots[i] == 0: return i if i > 0 else -1 return n"},{"question":"There is a park represented as a grid with N rows and M columns. Each cell in the grid either contains a tree or is empty. Trees are denoted by \'T\' and empty cells are denoted by \'.\'. You have K tree saplings to plant in the park. You must plant each sapling in an empty cell \'.\'. No two saplings can be planted in adjacent cells, either vertically, horizontally, or diagonally. Determine if it is possible to plant all K saplings in the park according to these rules. Constraints * All values in input are integers. * 1 leq N, M leq 1000 * 0 leq K leq 1000000 Input Input is given from Standard Input in the following format: N M K park Where `park` is a list of N strings, each representing a row of the grid, with characters \'T\' (tree) or \'.\' (empty). Output Print \\"Yes\\" if it is possible to plant all K saplings according to the rules. Otherwise, print \\"No\\". Examples Input 5 5 4 ..... .T.T. ..... .T.T. ..... Output Yes Input 4 4 3 T.TT .T.T T.TT .T.T Output No","solution":"def can_plant_saplings(N, M, K, park): def is_safe(x, y, park): directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] for dx, dy in directions: nx, ny = x + dx, y + dy if nx >= 0 and ny >= 0 and nx < N and ny < M and park[nx][ny] == \'S\': return False return True saplings_planted = 0 for i in range(N): for j in range(M): if park[i][j] == \'.\' and is_safe(i, j, park): park[i] = park[i][:j] + \'S\' + park[i][j+1:] saplings_planted += 1 if saplings_planted == K: return \\"Yes\\" return \\"No\\" # Example usage: N, M, K = 5, 5, 4 park = [ \\".....\\", \\".T.T.\\", \\".....\\", \\".T.T.\\", \\".....\\" ] print(can_plant_saplings(N, M, K, park)) # Output: Yes"},{"question":"In an auction, bids are placed at different time intervals by various participants. Given the bid amounts and the participant ids, your task is to determine the highest bid and the winner of the auction. Each participant can place multiple bids and their bids are recorded in the order they were placed. The participant with the highest bid will be declared the winner. If two or more participants have the same highest bid, the winner will be the one who placed the highest bid first. Input Each test case is formed as follows: The first line contains a positive integer N, the number of bids such that 1 ≤ N ≤ 100. The next N lines each contain a participant\'s id (a positive integer) and their bid amount (a positive integer) separated by a space. Output For each case, output the participant id of the winner and the highest bid amount. Example Input: 5 1 100 2 150 3 120 2 150 1 200 Output: 1 200","solution":"def find_winner(N, bids): Determines the winner of the auction and the highest bid. Args: - N (int): The number of bids. - bids (list of tuples): Each tuple contains a participant id and their bid amount. Returns: - (int, int): A tuple containing the participant id of the winner and the highest bid amount. highest_bid = -1 winner_id = -1 # A dictionary to keep track of the first occurrence of each bid bid_dict = {} for i in range(N): participant_id, bid = bids[i] if bid not in bid_dict: bid_dict[bid] = (participant_id, i) if bid > highest_bid or (bid == highest_bid and bid_dict[bid][1] < bid_dict[highest_bid][1]): highest_bid = bid winner_id = participant_id return winner_id, highest_bid"},{"question":"You are given a string `s` consisting of lowercase English letters. Your task is to find the first letter in the alphabet that does not appear in the string `s`. If all the letters from \'a\' to \'z\' are present in the string, return \\"None\\". Constraints * The length of `s` can range from 1 to 100. * All letters in `s` are lowercase English letters. Input The input is given from Standard Input in the following format: ``` s ``` Output Print the first missing letter in the string `s` in lowercase. If no letter is missing, print \\"None\\". Examples Input ``` abcdf ``` Output ``` e ``` Input ``` abcdefghijklmnopqrstuvwxyz ``` Output ``` None ``` Input ``` thequickbrownfoxjumpsoverlazydog ``` Output ``` None ```","solution":"def first_missing_letter(s): Returns the first missing letter in the alphabet from the string s. If no letter is missing, return \\"None\\". import string # Create a set of all lowercase letters all_letters = set(string.ascii_lowercase) # Create a set of letters in the input string letters_in_s = set(s) # Find the difference which gives the missing letters missing_letters = all_letters - letters_in_s if not missing_letters: # If no letters are missing, return \\"None\\" return \\"None\\" # Sort the missing letters and return the first one return sorted(missing_letters)[0]"},{"question":"You are required to help a chef determine if he can prepare a dish given the ingredients he has in his pantry. The chef can use exactly two ingredients, and he has the amounts of each ingredient Item1 and Item2 (both in grams). The dish requires exactly D grams of ingredients. Can he prepare the dish? Constraints * All input values are integers. * 1 leq Item1, Item2 leq 1000 * 1 leq D leq 2000 Input Input is given from Standard Input in the following format: Item1 Item2 D Output If the chef can prepare the dish, print `Possible`; otherwise, print `Not Possible`. Examples Input 200 300 500 Output Possible Input 800 300 1000 Output Not Possible Input 150 200 350 Output Possible Input 100 900 800 Output Not Possible","solution":"def can_prepare_dish(item1, item2, D): Determines if the chef can prepare the dish with the given ingredients. Args: item1 (int): Amount of the first ingredient in grams. item2 (int): Amount of the second ingredient in grams. D (int): The required amount of ingredients in grams. Returns: str: \'Possible\' if the dish can be prepared, \'Not Possible\' otherwise. if item1 + item2 == D: return \\"Possible\\" return \\"Not Possible\\""},{"question":"Peter has a collection of n different stamps and a postcard with m empty spaces. He wants to place the stamps in such a way that no two adjacent spaces contain the same stamp and all spaces are filled. Each stamp has a unique integer identifier. Write a program to determine how many different ways Peter can arrange the stamps on the postcard. Since the number of ways can be very large, return the answer modulo 10^9 + 7. Input The first line contains two integers n and m (1 ≤ n, m ≤ 10^5) — the number of different stamps and the number of spaces on the postcard, respectively. Output Output a single integer: the number of ways to arrange the stamps on the postcard modulo 10^9 + 7. Example Input 3 2 Output 6 Input 4 4 Output 24 Note In the first example, Peter has 3 different stamps and 2 spaces. He can use any two distinct stamps in 3 * 2 = 6 ways. In the second example, Peter has 4 stamps and 4 spaces. He can arrange these in 4! = 24 different valid ways.","solution":"MOD = 10**9 + 7 def count_arrangements(n, m): Returns the number of ways to arrange `n` different stamps in `m` spaces such that no two adjacent spaces contain the same stamp. if n == 1: return 1 if m == 1 else 0 # If there are more spaces than stamps, it\'s impossible to make sure no two adjacent spaces have the same stamp. if m > n: return 0 # Calculate the result for the cases where n <= m result = 1 for i in range(m): result = (result * (n - i)) % MOD return result"},{"question":"You are an intern at a transportation company and have been assigned to help optimize the bus routing system. The city is represented as a grid of size n x n. Some cells of the grid are blocked due to ongoing constructions and cannot be traversed. The task is to find the shortest path from the top-left corner (1, 1) to the bottom-right corner (n, n) if possible. The path can only be constructed from cells that are not blocked, and you can only move one cell at a time to the left, right, up, or down. Input The first line contains an integer n (2 ≤ n ≤ 500), the size of the grid. Each of the next n lines contains a string of n characters where each character is either \'.\' (an open cell) or \'#\' (a blocked cell). Grid cells are 1-indexed, and the top-left corner is (1, 1) while the bottom-right corner is (n, n). Output Print the minimum number of steps from the top-left corner to the bottom-right corner. If there is no such path, print -1 instead. Examples Input 5 ..... .#... ....# .#... ..... Output 8 Input 3 .#. .#. # Output -1 Note In the first example, one possible shortest path is: (1,1) → (1,2) → (1,3) → (1,4) → (2,4) → (3,4) → (4,4) → (5,4) → (5,5). In the second example, there is no path from (1,1) to (3,3).","solution":"from collections import deque def shortest_path(grid): n = len(grid) # Size of the grid if grid[0][0] == \'#\' or grid[n-1][n-1] == \'#\': # If start or end is blocked return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: row, col, dist = queue.popleft() if row == n-1 and col == n-1: # Reached destination return dist for dx, dy in directions: new_row, new_col = row + dx, col + dy if 0 <= new_row < n and 0 <= new_col < n and grid[new_row][new_col] == \'.\' and (new_row, new_col) not in visited: queue.append((new_row, new_col, dist + 1)) visited.add((new_row, new_col)) return -1 # No path found def parse_grid_input(n, grid_lines): grid = [list(line.strip()) for line in grid_lines] return grid"},{"question":"Given a linked list, you are required to perform operations of inserting, deleting and reversing the list. Write a program that supports these operations efficiently. Input: - The first line contains an integer `Q` representing the number of queries. - Each of the next `Q` lines represents a query, which can be of the following types: - \\"A x\\" where `x` is an integer. This query means insert `x` at the end of the linked list. - \\"D y\\" where `y` is an integer. This query means delete the first occurrence of `y` in the linked list. If `y` is not found, do nothing. - \\"R\\" means reverse the linked list. Output: For each \\"D y\\" operation where `y` is not found, output \\"NOT FOUND\\". After all queries are processed, print the final state of the linked list in a single line. Constraints: 1 ≤ Q ≤ 10^5 1 ≤ x, y ≤ 10^3 SAMPLE INPUT 5 A 5 A 10 A 15 D 10 R SAMPLE OUTPUT 15 5","solution":"class Node: def __init__(self, value=0, next_node=None): self.value = value self.next = next_node class LinkedList: def __init__(self): self.head = None def append(self, value): if not self.head: self.head = Node(value) return current = self.head while current.next: current = current.next current.next = Node(value) def delete(self, value): if not self.head: return \\"NOT FOUND\\" if self.head.value == value: self.head = self.head.next return current = self.head while current.next and current.next.value != value: current = current.next if current.next: current.next = current.next.next else: return \\"NOT FOUND\\" def reverse(self): prev = None current = self.head while current: next_node = current.next current.next = prev prev = current current = next_node self.head = prev def __str__(self): result = [] current = self.head while current: result.append(current.value) current = current.next return \' \'.join(map(str, result)) def process_queries(queries): linked_list = LinkedList() output = [] for query in queries: if query[0] == \\"A\\": linked_list.append(int(query[1])) elif query[0] == \\"D\\": result = linked_list.delete(int(query[1])) if result: output.append(result) elif query[0] == \\"R\\": linked_list.reverse() return output, linked_list def main(queries): error_messages, final_state = process_queries(queries) for message in error_messages: print(message) print(final_state) if __name__ == \\"__main__\\": Q = int(input()) queries = [input().split() for _ in range(Q)] main(queries)"},{"question":"Rover Navigation Mars Rover\'s mission involves extensive exploration and navigation on Mars\'s surface. Your task is to write a code to calculate the shortest path for the Rover to navigate from its starting point to the final destination, considering the presence of obstacles on the grid-like surface of Mars. The Martian surface is represented as a 2D grid, where certain cells contain obstacles that the Rover cannot traverse. The Rover can move one step at a time in any of the four cardinal directions: North, East, South, and West (but not diagonally). Here are the details of the surface grid: - An empty cell (`0`) indicates an open space. - A cell with an obstacle (`1`) cannot be entered. The Rover starts at a given position on the grid and must navigate to a target position. Your task is to determine the minimum number of steps required for the Rover to reach the target position or to conclude that it\'s impossible to do so. Input The input consists of a single test case in the following format: ``` n m r1 c1 r2 c2 grid ``` - n is the number of rows in the grid. - m is the number of columns in the grid. - (r1, c1) is the starting position of the Rover. - (r2, c2) is the target position of the Rover. - grid is an array of n lines, each line containing m integers that represent the surface grid. Constraints: - 1 leq n, m leq 1000 - 0 leq r1, r2 leq n-1 - 0 leq c1, c2 leq m-1 - (r1, c1) and (r2, c2) are guaranteed to be empty cells (0). Output The output should be a single integer which is the minimum number of steps required for the Rover to reach (r2, c2) from (r1, c1). If it is impossible to reach the target, print `-1`. Sample Input 1 ``` 5 5 0 0 4 4 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 ``` Sample Output 1 ``` 8 ``` Sample Input 2 ``` 3 3 0 0 2 2 0 1 0 1 1 0 0 0 0 ``` Sample Output 2 ``` 4 ```","solution":"from collections import deque def shortest_path(n, m, r1, c1, r2, c2, grid): if r1 == r2 and c1 == c2: return 0 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(r1, c1, 0)]) # (row, col, distance) visited = set((r1, c1)) while queue: row, col, dist = queue.popleft() for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < n and 0 <= new_col < m and grid[new_row][new_col] == 0: if (new_row, new_col) not in visited: if new_row == r2 and new_col == c2: return dist + 1 visited.add((new_row, new_col)) queue.append((new_row, new_col, dist + 1)) return -1"},{"question":"A car race is being held on a circular track that is represented as an array. Each element of the array represents a section of the track, and the value of each element is the speed limit at that section. The race cars can enter the track at any section and can travel in either direction (clockwise or counter-clockwise). You are given the array of speed limits and the maximum allowed speed of the cars. The goal is to find the maximum number of sections that a car can travel through without exceeding its maximum speed. Input: - The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. - Each test case consists of two lines: 1. The first line has two integers n (1 ≤ n ≤ 1000) — the number of track sections, and max_speed (1 ≤ max_speed ≤ 10^9) — the maximum speed of the cars. 2. The second line contains n integers separated by spaces, where the i-th integer is speed_i (1 ≤ speed_i ≤ 10^9) — the speed limit of the i-th section of the track. Output: - For each test case, output a single integer — the maximum number of sections that a car can travel through consecutively without exceeding its maximum speed. Example: # Input: 3 5 100 80 90 100 110 120 4 120 70 130 110 90 6 85 80 70 60 90 85 75 # Output: 3 2 3 Explanation: - In the first test case, the car can travel through the first three sections (80, 90, 100) without exceeding its maximum speed of 100. - In the second test case, the car can travel through the last two sections (110, 90) without exceeding its maximum speed of 120. - In the third test case, the car can travel through three sections either from (80, 70, 60) or (70, 60, 90), with a maximum speed of 85.","solution":"def max_sections(t, test_cases): results = [] for i in range(t): n, max_speed = test_cases[i][0] track_speeds = test_cases[i][1] max_consecutive = 0 current_consecutive = 0 for speed in track_speeds: if speed <= max_speed: current_consecutive += 1 max_consecutive = max(max_consecutive, current_consecutive) else: current_consecutive = 0 results.append(max_consecutive) return results"},{"question":"You work for a company that has recently started tracking its employees\' productivity. For each employee, there is a record of their work hours for each day of the week. The company wants to determine which employees are classified as \\"highly productive.\\" An employee is considered highly productive if the number of hours they work each day does not decrease throughout the week. Specifically, if an employee works h1 hours on Monday, h2 hours on Tuesday, ..., h7 hours on Sunday, they are highly productive if and only if h1 ≤ h2 ≤ h3 ≤ h4 ≤ h5 ≤ h6 ≤ h7. Your task is to determine how many employees meet this productivity criterion. Input The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of employees. The next n lines contain 7 integers each. The ith line contains seven integers h1, h2, h3, h4, h5, h6, h7 (0 ≤ h1, h2, h3, h4, h5, h6, h7 ≤ 24) representing the number of hours the ith employee worked on each day from Monday to Sunday. Output Output a single integer — the number of highly productive employees. Examples Input 3 8 9 10 10 12 13 14 7 6 7 8 7 6 9 2 3 4 5 6 7 8 Output 2 Input 2 5 5 6 6 6 6 6 1 2 2 2 3 3 1 Output 1","solution":"def count_highly_productive_employees(n, hours_list): Returns the number of highly productive employees. An employee is considered highly productive if their work hours do not decrease on any subsequent day throughout the week. count = 0 for hours in hours_list: if all(hours[i] <= hours[i + 1] for i in range(6)): count += 1 return count"},{"question":"Ithea and Chtholly want to play another game to decide who will have the kitchen. This time, they use a grid of letters. The grid is a 2D matrix of size n x m. Each cell in the grid initially contains a lowercase English letter. Chtholly can modify the grid by replacing the existing letter in any cell with another lowercase English letter. Chtholly wins if she can transform the grid into a target grid I\'m providing. But be careful, in each move, she can only change one letter at a time, and she wants to do this in the minimum number of moves possible. Your task is to write a program to determine the sequence of steps Chtholly should take to transform the initial grid into the target grid with the minimum number of letter changes. # Input - The first line contains two integers n and m (1 ≤ n, m ≤ 50) - the number of rows and columns in the grid. - The next n lines contain m lowercase English letters each, representing the initial grid. - The next n lines contain m lowercase English letters each, representing the target grid. # Output - Output an integer k - the minimum number of letter changes required. - For the next k lines, output three integers r, c, and a character x (1 ≤ r ≤ n, 1 ≤ c ≤ m, x is a lowercase English letter), indicating that Chtholly should change the letter in row r and column c to x. # Example Input 3 3 abc def ghi abd ddf ghj Output 3 1 3 d 2 3 d 3 3 j Explanation - Chtholly needs to change the letter at position (1, 3) from \'c\' to \'d\'. - Change the letter at position (2, 3) from \'f\' to \'d\'. - Finally, change the letter at position (3, 3) from \'i\' to \'j\'. - These three changes will transform the initial grid into the target grid in the minimum number of moves. # Note - Ensure the output is in the correct format; otherwise, your solution may fail even if the changes are correct. - It\'s guaranteed that there is only one unique solution for the input provided.","solution":"def transform_grid(n, m, initial_grid, target_grid): changes = [] for i in range(n): for j in range(m): if initial_grid[i][j] != target_grid[i][j]: changes.append((i + 1, j + 1, target_grid[i][j])) return len(changes), changes def parse_input(): import sys input = sys.stdin.read data = input().split() n, m = int(data[0]), int(data[1]) initial_grid = [] target_grid = [] index = 2 for _ in range(n): initial_grid.append(list(data[index])) index += 1 for _ in range(n): target_grid.append(list(data[index])) index += 1 return n, m, initial_grid, target_grid def main(): n, m, initial_grid, target_grid = parse_input() num_changes, changes = transform_grid(n, m, initial_grid, target_grid) print(num_changes) for change in changes: print(change[0], change[1], change[2]) if __name__ == \\"__main__\\": main()"},{"question":"You are organizing a game tournament and you have a series of matches planned. Each match will be between two players. You are given a string M of length N where each character denotes the outcome of a particular match. If the i-th character of M is `W`, it means the first player won that match; `L` means the second player won. How many matches did the second player win in the tournament? Constraints * The length of M is N (1 <= N <= 100). * M consists of `W` and `L`. Inputs Input is given from Standard Input in the following format: M Outputs Print the number of matches the second player won in the tournament. Examples Input WLWLWL Output 3 Input LLLLLL Output 6 Input WWWWWW Output 0","solution":"def count_losses(M: str) -> int: Returns the number of matches the second player won (count of \'L\' characters) given the match outcomes as a string. Parameters: M (str): A string where each character denotes the outcome of a particular match. \'W\' means first player won, \'L\' means second player won. Returns: int: The number of matches the second player won. return M.count(\'L\')"},{"question":"In this problem, you are to help a telecommunications company with organizing their network maintenance. There are n network nodes, each with a unique integer id from 1 to n. Some of these nodes are directly connected to others via cables, forming one connected network. The network configuration can be represented as an undirected graph with n nodes and m edges. Two nodes are considered directly connected if there is a cable between them. A node x is considered to be indirectly connected to node y if there exists a sequence of nodes [a_1, a_2, ..., a_k] such that: * a_1 = x, * a_k = y, * There is a direct connection between a_i and a_(i+1) for all 1 ≤ i < k. You need to process q queries, where each query is given as a pair (u_i, v_i) and asks if nodes u_i and v_i are connected directly or indirectly. Input The first line of the input contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 10^5) — the number of nodes and the number of edges in the network. The next m lines each contain two integers a and b (1 ≤ a, b ≤ n) representing a cable between nodes a and b. The next line contains an integer q (1 ≤ q ≤ 10^5) — the number of queries. The next q lines each contain two integers u_i and v_i (1 ≤ u_i, v_i ≤ n) representing the i-th query which asks if nodes u_i and v_i are connected directly or indirectly. Output For each query, print \\"YES\\" if nodes u_i and v_i are connected, either directly or indirectly, otherwise print \\"NO\\". Example Input 6 5 1 2 2 3 3 4 4 5 5 6 3 1 6 2 5 4 6 Output YES YES YES","solution":"def solve_network_queries(n, m, edges, q, queries): # Helper function to perform DFS and discover all nodes in the same connected component def dfs(node, component_id): stack = [node] while stack: current = stack.pop() if components[current] == -1: components[current] = component_id for neighbor in adjacency_list[current]: if components[neighbor] == -1: stack.append(neighbor) # Initialize the adjacency list adjacency_list = [[] for _ in range(n + 1)] # Read edges to build the adjacency list for a, b in edges: adjacency_list[a].append(b) adjacency_list[b].append(a) # Initialize the components array components = [-1] * (n + 1) component_id = 0 # Find all connected components using DFS for node in range(1, n + 1): if components[node] == -1: dfs(node, component_id) component_id += 1 # Process the queries results = [] for u, v in queries: if components[u] == components[v]: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"In the land of algorithms, there is a mystical forest with a sequence of n trees arranged in a line. Each tree has a magical index, and each index holds a certain number of wisdom points. The guardian of the forest, whom we shall call GigaBrain, has the power to enhance these wisdom points through intricate rituals. He can perform the following operations: 1. Incremental Ceremony: GigaBrain chooses a range of trees [l, r] and increments the wisdom points of every tree in this range by a given amount x. In other words, for every i (l ≤ i ≤ r), the tree at index i will have its wisdom increased by x. 2. Wisdom Inquiry: GigaBrain queries a specific tree and wants to know the current wisdom points at a particular index i. You, as the chosen apprentice, need to aid GigaBrain in efficiently performing these operations and answering his queries. Input The first line contains two integers n, m (1 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^5) — the number of trees, and the number of operations. The second line contains n integers w_1, w_2, ..., w_n (0 ≤ w_i ≤ 10^9) — the initial wisdom points of the trees. The next m lines describe the operations. Each operation is given in one of the following formats: * \\"1 l r x\\" (1 ≤ l ≤ r ≤ n, 0 ≤ x ≤ 10^9) — representing an Incremental Ceremony. * \\"2 i\\" (1 ≤ i ≤ n) — representing a Wisdom Inquiry. Output For each operation of the second type, print the wisdom points at the specified index. Example Input 5 4 1 2 3 4 5 2 3 1 2 5 3 2 3 2 5 Output 3 6 8 Explanation Initially, the wisdom points are [1, 2, 3, 4, 5]. After the first inquiry, the wisdom at index 3 is 3. In the Incremental Ceremony, we increase the wisdom points from index 2 to 5 by 3: the new array becomes [1, 5, 6, 7, 8]. In the next query, the wisdom at index 3 is now 6. In the final query, the wisdom at index 5 is 8.","solution":"def process_operations(n, m, wisdom_points, operations): Function to process a list of operations on an array of wisdom points. :param n: Number of trees :param m: Number of operations :param wisdom_points: List[int] of initial wisdom points :param operations: List[str] of operations in the form of strings :return: List[int] resulting values from the Wisdom Inquiry operations results = [] for operation in operations: op = operation.split() if op[0] == \\"1\\": l = int(op[1]) - 1 r = int(op[2]) - 1 x = int(op[3]) for i in range(l, r + 1): wisdom_points[i] += x elif op[0] == \\"2\\": i = int(op[1]) - 1 results.append(wisdom_points[i]) return results"},{"question":"Ashok is a professional gardener who is frequently asked to arrange flowers for various events. In his inventory, he has bouquets with 10, 15, or 25 flowers each. To fulfill an order with exactly n flowers, Ashok needs to determine if it is possible to use a combination of these bouquets. For example, it is possible to create an arrangement with 35 flowers using two 10-flower bouquets and one 15-flower bouquet, but it is impossible to create an arrangement with exactly 16 flowers, as no combination of 10, 15, or 25 flowers adds up to 16. As a software developer, you are asked to write a program that helps Ashok determine if an order can be fulfilled using the available bouquet sizes. Input: The first line of the input contains an integer T, denoting the number of test cases. The next T lines each contain an integer n, representing the number of flowers needed in each order. Output: For each test case, output \\"Yes\\" if it is possible to fulfill the order with the available bouquet sizes and \\"No\\" otherwise. Constraints: 1 ≤ T ≤ 50 1 ≤ n ≤ 10^7 SAMPLE INPUT 3 30 55 17 SAMPLE OUTPUT Yes Yes No Explanation For the first test case, 30 flowers can be made using three 10-flower bouquets. For the second test case, 55 flowers can be achieved using two 25-flower bouquets and one 5-flower bouquet. For the third test case, it is impossible to create an arrangement of 17 flowers with any combination of 10, 15, and 25 flower bouquets.","solution":"def can_fulfill_order(n): Determines if it is possible to fulfill an order of exactly n flowers using 10, 15, or 25 flower bouquets. for i in range(n // 10 + 1): for j in range(n // 15 + 1): for k in range(n // 25 + 1): if i * 10 + j * 15 + k * 25 == n: return \\"Yes\\" return \\"No\\" def process_orders(T, orders): results = [] for n in orders: results.append(can_fulfill_order(n)) return results"},{"question":"You are given a binary tree where each node contains an integer value. Write a function to determine if the tree is a \\"valid\\" binary search tree (BST). A valid BST is defined as follows: - The left subtree of a node contains only nodes with keys less than the node\'s key. - The right subtree of a node contains only nodes with keys greater than the node\'s key. - Both the left and right subtrees must also be binary search trees. Implement the function `bool isValidBST(TreeNode* root)` that returns `true` if the given tree is a valid BST, and `false` otherwise. Input: - You do not need to handle input and output. Implement the main function `bool isValidBST(TreeNode* root)`. Output: - The function should return a boolean value indicating whether the tree is a valid BST or not. Function signature: ```cpp bool isValidBST(TreeNode* root); ``` To represent the binary tree, you have the following definition: ```cpp struct TreeNode { int val; TreeNode *left; TreeNode *right; TreeNode() : val(0), left(nullptr), right(nullptr) {} TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} }; ``` Constraints: - The number of nodes in the tree is in the range [1, 10^4]. - -10^4 ≤ Node.val ≤ 10^4 Example: ``` Input: 2 / 1 3 Output: true ``` ``` Input: 5 / 1 4 / 3 6 Output: false Explanation: The root node\'s value is 5 but its right child\'s value is 4. ```","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def isValidBST(root): def validate(node, low=float(\'-inf\'), high=float(\'inf\')): if not node: return True if not (low < node.val < high): return False return (validate(node.left, low, node.val) and validate(node.right, node.val, high)) return validate(root)"},{"question":"Write a program that helps scheduling classes in a university. The goal is to check if it\'s possible to schedule all the classes without any conflicts. Each class is represented by two integers: the start time and the end time, both are given in 24-hour format without leading zeros (e.g., 9 for 9 am and 23 for 11 pm). Two classes conflict if their times overlap. Input The first line contains an integer n (1 ≤ n ≤ 100), the number of classes to be scheduled. Each of the following n lines contains two integers s and e (0 ≤ s < e ≤ 24) representing the start and end time of a class. Output Print \\"YES\\" if it\'s possible to schedule all the classes without any conflicts. Otherwise, print \\"NO\\". Example Input 3 9 12 13 16 11 14 Output NO","solution":"def can_schedule_all_classes(n, classes): Determines if it is possible to schedule all classes without conflicts. :param n: Number of classes :param classes: List of tuples where each tuple contains start and end time of a class :return: \\"YES\\" if all classes can be scheduled without conflicts, otherwise \\"NO\\" # Sort the classes by their starting time classes.sort() # Check for conflicts for i in range(1, n): if classes[i][0] < classes[i - 1][1]: return \\"NO\\" return \\"YES\\""},{"question":"A text editor supports the concept of undo and redo operations. In this problem, we are going to implement this functionality. There are three types of operations that can be performed on the text editor: - Append a string to the current text. - Undo the last append operation. - Redo the last undone append operation. Initially, the text editor contains an empty string. You should implement the class `TextEditor` that supports the following methods: - `append(String text)`: Appends the string `text` to the end of the current text. - `undo()`: Undo the last append operation. If there is nothing to undo, the state of the text remains unchanged. - `redo()`: Redo the last undone append operation. If there is nothing to redo, the state of the text remains unchanged. - `getText()`: Returns the current text in the editor. # Constraints: - The number of operations will not exceed 10^5. - The total length of all strings appended will not exceed 10^6. # Example ```Python editor = TextEditor() editor.append(\\"hello\\") editor.getText() # Returns \\"hello\\" editor.append(\\" world\\") editor.getText() # Returns \\"hello world\\" editor.undo() editor.getText() # Returns \\"hello\\" editor.redo() editor.getText() # Returns \\"hello world\\" editor.undo() editor.undo() editor.getText() # Returns \\"\\" editor.redo() editor.getText() # Returns \\"hello\\" ``` # Explanation - After the first `append(\\"hello\\")`, the text is \\"hello\\". - After `getText()`, it should return \\"hello\\". - After the second `append(\\" world\\")`, the text becomes \\"hello world\\". - The subsequent `getText()` should return \\"hello world\\". - After the `undo()`, the last append (\\" world\\") is undone, hence the text reverts to \\"hello\\". - The following `getText()` should return \\"hello\\". - The `redo()` re-applies the last undone operation, hence the text becomes \\"hello world\\" again. - The next two `undo()` operations remove the text until it\'s empty. - Another `redo()` operation reapplies the previously undone \\"hello\\" making the text \\"hello\\" again.","solution":"class TextEditor: def __init__(self): self.current_text = \\"\\" self.history = [] self.redo_stack = [] def append(self, text): self.history.append(text) self.redo_stack.clear() self.current_text += text def undo(self): if not self.history: return last_append = self.history.pop() self.redo_stack.append(last_append) self.current_text = self.current_text[:-len(last_append)] def redo(self): if not self.redo_stack: return last_undo = self.redo_stack.pop() self.history.append(last_undo) self.current_text += last_undo def getText(self): return self.current_text"},{"question":"You are given a collection of n books indexed from 1 to n arranged in a line. Each book i has a thickness t_i and a readability score r_i. You are planning to select a continuous sub-sequence of these books that will fit into a bookcase of maximum width W while also maximizing the total readability score of the selected books. You need to find the maximum readability score one can achieve given the constraints. # Input - The first line contains two integers n and W (1≤ n≤ 10^5, 1≤ W≤ 10^9) — the number of books and the maximum width of the bookcase. - The second line contains n integers t_1, t_2,...,t_n (1≤ t_i ≤ 10^6) — the thickness of each book. - The third line contains n integers r_1, r_2,...,r_n (-10^6 ≤ r_i ≤ 10^6) — the readability score of each book. # Output - Output a single integer — the maximum readability score that can be achieved with the given constraints. # Examples Input ``` 5 9 2 3 1 2 4 1 4 3 -2 5 ``` Output ``` 8 ``` Input ``` 4 5 2 2 2 2 1 -1 5 3 ``` Output ``` 8 ``` Note In the first example, the maximum readability score is achieved by selecting the subsequence of books {1, 2, 3}, giving us a total thickness of 2+3+1=6 and readability score of 1+4+3=8.","solution":"def max_readability_score(n, W, thicknesses, readability_scores): max_score = float(\'-inf\') current_score = 0 current_thickness = 0 start = 0 for end in range(n): current_thickness += thicknesses[end] current_score += readability_scores[end] while current_thickness > W: current_thickness -= thicknesses[start] current_score -= readability_scores[start] start += 1 max_score = max(max_score, current_score) return max_score"},{"question":"You are given a sequence of `n` integers. You have to perform a specific type of query on the sequence multiple times. Each query is defined by two integers `l` and `r` and requires you to find the maximum value in the subarray starting at index `l` and ending at index `r`. The task is to efficiently handle multiple such queries. Input The first line of the input contains two integers `n` and `q` (1 ≤ n, q ≤ 100000) - the length of the sequence and the number of queries, respectively. The second line contains `n` integers representing the sequence (1 ≤ sequence[i] ≤ 100000). Each of the next `q` lines contains two integers `l` and `r` (1 ≤ l ≤ r ≤ n) - the indices of the subarray for which the maximum value is to be found. Output For each query, output the maximum value in the specified subarray. Example Input 5 3 1 3 5 7 9 1 3 2 4 1 5 Output 5 7 9 Explanation In the example: - The maximum value in the subarray from index 1 to 3 is 5. - The maximum value in the subarray from index 2 to 4 is 7. - The maximum value in the subarray from index 1 to 5 is 9.","solution":"def preprocess_max_values(sequence): Preprocesses the sequence to provide a data structure enabling efficient range maximum queries. Args: - sequence (list of int): The list of integers representing the sequence. Returns: - list of list of int: Sparse table prepared for range maximum queries. import math n = len(sequence) log_n = math.ceil(math.log2(n)) + 1 sparse_table = [[0] * log_n for _ in range(n)] for i in range(n): sparse_table[i][0] = sequence[i] j = 1 while (1 << j) <= n: i = 0 while (i + (1 << j) - 1) < n: sparse_table[i][j] = max(sparse_table[i][j-1], sparse_table[i + (1 << (j-1))][j-1]) i += 1 j += 1 return sparse_table def query_max_in_subarray(sparse_table, l, r): Queries the maximum value in the subarray from index l to index r using the sparse table. Args: - sparse_table (list of list of int): Sparse table for range maximum queries. - l (int): The starting index of the subarray (1-based). - r (int): The ending index of the subarray (1-based). Returns: - int: The maximum value in the subarray. import math l -= 1 # convert to 0-based index r -= 1 # convert to 0-based index j = int(math.log2(r - l + 1)) return max(sparse_table[l][j], sparse_table[r - (1 << j) + 1][j]) def handle_queries(sequence, queries): Processes multiple queries on the sequence and returns the results. Args: - sequence (list of int): The list of integers representing the sequence. - queries (list of tuple of int): List of queries where each query is a tuple (l, r). Returns: - list of int: List of results for each query in the same order. sparse_table = preprocess_max_values(sequence) result = [] for l, r in queries: result.append(query_max_in_subarray(sparse_table, l, r)) return result"},{"question":"A company has a hierarchical structure with employees identified by unique IDs. Each employee except the CEO has a manager. The company decides to conduct a survey where a set of queries are given. Each query asks for the lowest common manager (LCM) of two employees. The LCM is defined as the lowest manager in the hierarchy who is a manager to both employees. You are required to write a program that answers these queries. INPUT: The first line of the input contains an integer N, the number of employees (1 ≤ N ≤ 100000). Each of the next N-1 lines contains two integers, x and y, denoting that employee y is the manager of employee x. The next line contains an integer Q, the number of queries (1 ≤ Q ≤ 100000). Each of the next Q lines contains two integers u and v, the IDs of the employees for whom the query is to find the LCM. OUTPUT: For each query, output a single integer, the ID of the lowest common manager of the two employees. CONSTRAINTS: 1. Employee IDs are between 1 and N. 2. The CEO\'s ID is guaranteed to be 1. SAMPLE INPUT: 7 2 1 3 1 4 2 5 2 6 3 7 3 3 4 5 4 6 6 7 SAMPLE OUTPUT: 2 1 3 EXPLANATION: The company\'s hierarchy is as follows: 1 / 2 3 /| | 4 5 6 7 For the first query, LCM of 4 and 5 is 2. For the second query, LCM of 4 and 6 is 1. For the third query, LCM of 6 and 7 is 3.","solution":"def lowest_common_manager(n, edges, queries): from collections import defaultdict, deque def bfs(root, n, parent): depth = [-1] * (n + 1) depth[root] = 0 queue = deque([root]) while queue: node = queue.popleft() for neighbor in tree[node]: if depth[neighbor] == -1: # If not visited depth[neighbor] = depth[node] + 1 parent[neighbor][0] = node queue.append(neighbor) return depth def preprocess_lca(n, max_log, parent): for i in range(1, max_log): for u in range(1, n + 1): if parent[u][i - 1] != -1: parent[u][i] = parent[parent[u][i - 1]][i - 1] def find_lca(u, v, depth, max_log, parent): if depth[u] < depth[v]: u, v = v, u for i in range(max_log - 1, -1, -1): if depth[u] - (1 << i) >= depth[v]: u = parent[u][i] if u == v: return u for i in range(max_log - 1, -1, -1): if parent[u][i] != parent[v][i]: u = parent[u][i] v = parent[v][i] return parent[u][0] tree = defaultdict(list) for x, y in edges: tree[y].append(x) tree[x].append(y) max_log = 1 while (1 << max_log) <= n: max_log += 1 parent = [[-1] * max_log for _ in range(n + 1)] depth = bfs(1, n, parent) preprocess_lca(n, max_log, parent) result = [] for u, v in queries: lca = find_lca(u, v, depth, max_log, parent) result.append(lca) return result"},{"question":"Alice is decorating her new apartment with some beautiful strings of lights. She has already fixed n hooks on the ceiling, where each hook can hold at most one string of lights. Alice has m different strings of lights, and each string of lights connects two hooks. A string can either be connected to two different hooks or left unconnected. Alice wants to connect some of these strings to the hooks in such a way that every hook has at most one string connected to it. Additionally, Alice wants to ensure that every hook is reachable from any other hook via the strings of lights. Given the number of hooks, the number of strings, and a list of pairs of hooks that each string can connect, determine if it is possible to connect the hooks as desired. If it is possible, output \\"YES\\". Otherwise, output \\"NO\\". Input The first line contains two integers n and m (1 ≤ n, m ≤ 100,000) — the number of hooks and the number of strings. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — describing a string that can be used to connect hooks u and v. Output Output \\"YES\\" if it is possible to connect the hooks with the given constraints. Otherwise, output \\"NO\\". Examples Input 3 3 1 2 1 3 2 3 Output YES Input 4 3 1 2 2 3 3 4 Output YES Input 4 2 1 2 3 4 Output NO Note In the first example, it\'s possible to connect the hooks in a way that each hook is reachable from any other hook (for example, by connecting hooks (1-2), (2-3)). In the second example, one possible connection is (1-2), (2-3), (3-4), which makes all hooks reachable. In the third example, there are two disjoint sets of hooks {(1, 2), (3, 4)}, so it\'s not possible to make all hooks reachable.","solution":"def can_connect_hooks(n, m, strings): Determines if it is possible to connect all hooks with the given constraints. from collections import defaultdict, deque if m < n - 1: return \\"NO\\" graph = defaultdict(list) for u, v in strings: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) components = 0 def bfs(start): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) for i in range(1, n + 1): if not visited[i]: components += 1 if components > 1: return \\"NO\\" bfs(i) return \\"YES\\""},{"question":"Laura has recently become interested in encryption and wants to try a simple numerical encryption method. She decided to create her encryption system based on a transformation of integers. In her system, every digit of a given number is replaced by its mirror image from the sequence of single-digit numbers. For example, the digits in \\"1234567890\\" would become \\"9876543210\\" respectively, meaning 1 would become 9, 2 would become 8, and so on. Laura\'s task is to implement a function `mirror_encrypt` that takes an array of non-negative integers and returns the mirrored version of each integer in the array based on her encryption system. # Input The input consists of: - An integer n (1 ≤ n ≤ 1000) representing the number of integers in the array. - An array of n non-negative integers, where each integer is in the range from 0 to 999,999. # Output The function should output n integers, each integer being the mirrored version of the corresponding input integer. # Examples ```plaintext Input 3 123 456 789 Output 876 543 210 ``` ```plaintext Input 2 10 320 Output 89 679 ``` # Note In the first example, \'123\' translates to \'876\', \'456\' translates to \'543\', and \'789\' translates to \'210\'. In the second example, \'10\' becomes \'89\', and \'320\' becomes \'679\'.","solution":"def mirror_encrypt(n, numbers): mirror_map = { \'0\': \'9\', \'1\': \'8\', \'2\': \'7\', \'3\': \'6\', \'4\': \'5\', \'5\': \'4\', \'6\': \'3\', \'7\': \'2\', \'8\': \'1\', \'9\': \'0\' } result = [] for number in numbers: mirrored = \'\'.join(mirror_map[digit] for digit in str(number)) result.append(int(mirrored)) return result"},{"question":"You are given a tree with ( n ) vertices. The vertices are numbered from 1 to ( n ). A tree is a connected acyclic graph. Your task is to calculate the degree of each vertex in the tree. The degree of a vertex is the number of edges connected to it. # Input The first line contains an integer ( n ) (( 2 leq n leq 10^5 )) — the number of vertices in the tree. Each of the next ( n-1 ) lines contains two integers ( u ) and ( v ) (( 1 leq u, v leq n )), denoting that there is an edge between vertex ( u ) and vertex ( v ). # Output Print ( n ) integers, where the ( i )-th integer is the degree of vertex ( i ). # Examples Input ``` 5 1 2 2 3 3 4 4 5 ``` Output ``` 1 2 2 2 1 ``` Input ``` 4 1 2 1 3 1 4 ``` Output ``` 3 1 1 1 ``` # Note In the first example, the vertex degrees are: - Vertex 1 has 1 edge (connected to vertex 2) - Vertex 2 has 2 edges (connected to vertices 1 and 3) - Vertex 3 has 2 edges (connected to vertices 2 and 4) - Vertex 4 has 2 edges (connected to vertices 3 and 5) - Vertex 5 has 1 edge (connected to vertex 4) In the second example, the vertex degrees are: - Vertex 1 has 3 edges (connected to vertices 2, 3, and 4) - Vertex 2 has 1 edge (connected to vertex 1) - Vertex 3 has 1 edge (connected to vertex 1) - Vertex 4 has 1 edge (connected to vertex 1)","solution":"def vertex_degrees(n, edges): Calculate the degree of each vertex in the tree. Parameters: n (int): the number of vertices edges (List[Tuple[int, int]]): list of edges in the tree Returns: List[int]: list of degrees for each vertex degrees = [0] * n for u, v in edges: degrees[u - 1] += 1 degrees[v - 1] += 1 return degrees"},{"question":"You are given an array of non-negative integers. Your task is to find two distinct indices i and j such that the sum of the elements at these indices is equal to a given target value. If there are multiple such pairs, return the pair with the smallest index i. If there are multiple pairs with the same index i, return the one with the smallest index j. If no such pair exists, return \\"No solution\\". Input The first line contains two integers n and target — the number of elements in the array (2 ≤ n ≤ 10000) and the target value (0 ≤ target ≤ 10^9). The second line contains n non-negative integers — the elements of the array (0 ≤ array[i] ≤ 10^9). Output Print two indices i and j (0-indexed) in ascending order such that array[i] + array[j] = target. If there is no such pair, print \\"No solution\\". Examples Input 5 9 2 7 11 15 1 Output 0 1 Input 5 10 5 5 3 7 2 Output 0 1 Input 4 8 1 2 3 4 Output No solution Note In the first example, the pair (2, 7) gives the target 9 and corresponds to indices 0 and 1. In the second example, the pair (5, 5) gives the target 10 and corresponds to indices 0 and 1. In the third example, there is no pair of indices that sums up to 8, so the output is \\"No solution\\".","solution":"def find_pair_with_target_sum(n, target, array): Returns two indices i and j (0-indexed) in ascending order such that array[i] + array[j] = target. If there is no such pair, returns \\"No solution\\". index_map = {} for i in range(n): complement = target - array[i] if complement in index_map: return index_map[complement], i index_map[array[i]] = i return \\"No solution\\""},{"question":"You are given a list of integers that represents the heights of the mountains in a sequence. A mountain is considered a \\"peak\\" if it is greater than its neighboring heights. Your task is to determine how many peaks are in the given sequence. A peak is defined as an element that is strictly greater than its immediate neighbors. Note that the first and last elements of the list cannot be peaks since they do not have two neighbors. Input The first line of the input file contains an integer n (3 ≤ n ≤ 100), the number of mountains in the sequence. The second line contains n integers representing the heights of the mountains (0 ≤ height ≤ 1000). Output Output the number of peaks in the sequence. Examples Input 5 1 3 2 5 4 Output 2 Input 6 6 4 3 7 5 2 Output 1","solution":"def count_peaks(n, heights): Returns the number of peaks in the given list of mountain heights. Parameters: n (int): The number of mountains in the sequence. heights (list of int): The heights of the mountains. Returns: int: The number of peaks. peak_count = 0 for i in range(1, n - 1): if heights[i] > heights[i - 1] and heights[i] > heights[i + 1]: peak_count += 1 return peak_count"},{"question":"per nextum in duabus tum VII conscribementis fac sic vestibulo perlegementum da n. istum conscribementis tum IX procedendum est fac sic novum varum = vestibulo perlegementum. varum dabito. si novum non est persectio per sectam estimationem 2 cis si novum non est persectio per sectam estimationem 5 cis novum\\" + * \\"numismatum arthuro + * \\"euronum cis cis cis Input: The input consists of a non-negative integer n followed by n non-negative integers, each between 0 and 1000, inclusive. Output: As described in the problem statement. Example: Input 5 6 10 15 20 25 Output 6 numismatum 10 numismatum 15 euronum 20 numismatum 25 euronum","solution":"def process_numbers(n, numbers): Processes a list of numbers according to specific rules. Args: n (int): The number of elements in the numbers list. numbers (list of int): List of integers to process. Returns: list: Processed list of strings as described in the task. result = [] for num in numbers: if num % 2 == 0 and num % 5 == 0: result.append(f\\"{num} numismatum\\") elif num % 5 == 0: result.append(f\\"{num} euronum\\") elif num % 2 == 0: result.append(f\\"{num} numismatum\\") return result"},{"question":"Problem Given a string containing only lowercase alphabetical characters. You can perform any number of the following operation: Select any two adjacent characters that are the same, remove them from the string, and concatenate the remaining parts of the string. Your task is to determine the minimum possible length of the resulting string after performing the operations optimally. Constraints The input satisfies the following conditions: * 1 leq |S| leq 100000 * S contains only lowercase English letters Input The input is given as a single string S . Output Output the minimum possible length of the resulting string after performing the operations optimally. Examples Input abccba Output 0 Input abbac Output 1 Input abcddcbae Output 1","solution":"def min_possible_length(s: str) -> int: Returns the minimum possible length of the resulting string after performing the operations optimally. stack = [] for char in s: if stack and stack[-1] == char: stack.pop() else: stack.append(char) return len(stack)"},{"question":"A binary tree is a data structure consisting of nodes, where each node has at most two children referred to as the left child and the right child. We define the height of a binary tree as the number of edges on the longest path from the root to a leaf. Your task is to calculate the height of a given binary tree. The height of a tree with a single node (the root) is 0. If the tree is empty, i.e., it does not contain any nodes, then its height is -1. You are given a binary tree represented as a sequence of integer values, where each value represents a node in a breadth-first order. A `-1` value indicates that the corresponding node is `null`. Your task is to compute the height of the resultant binary tree. Write a function `calculate_tree_height` that takes a list `tree` as input and returns the height of the tree. Input - A single list `tree` of integers, where each integer ranges from -1 to 10^9, representing the breadth-first traversal of the tree. (1 ≤ |tree| ≤ 10^4) Output - An integer representing the height of the binary tree. Example Input ``` [1, 2, 3, -1, 4, -1, -1, -1, -1, 5] ``` Output ``` 3 ``` Explanation The input list represents the following binary tree: ``` 1 / 2 3 4 5 ``` The height of the tree is 3, as the longest path from the root to a leaf is `1 -> 2 -> 4 -> 5`, involving 3 edges. # Note: - You can assume that the input list always represents a valid binary tree. - The breadth-first traversal means visiting the node level by level from left to right, thus accurately representing the structure of the tree.","solution":"def calculate_tree_height(tree): Given a binary tree represented in a breadth-first order as a list, return the height of the binary tree. :param tree: List[int] - Breadth-first traversal of the tree. :return: int - Height of the binary tree. if not tree or tree[0] == -1: return -1 height = -1 level = [0] # Start with the root node index while level: height += 1 next_level = [] for index in level: left_child_index = 2 * index + 1 right_child_index = 2 * index + 2 if left_child_index < len(tree) and tree[left_child_index] != -1: next_level.append(left_child_index) if right_child_index < len(tree) and tree[right_child_index] != -1: next_level.append(right_child_index) level = next_level return height"},{"question":"In an online multiplayer game, players form alliances to strengthen their power. Each alliance can recruit new members, which can in turn recruit new members, forming a hierarchy of players. The hierarchy starts with a single leader at the top. The relationships between members form a tree structure. Players frequently request an evaluation of their alliance\'s strength. The strength of an alliance member is defined as the number of direct and indirect subordinates they have. Each query asks for the strength of a specific member at a given point in time. The task is to process a series of recruitment events and queries efficiently. Input - The first line contains two integers `n` and `q`, the number of recruitment events and queries respectively (1 ≤ n, q ≤ 3·10^5). - The next `n` lines describe the recruitment events. Each line contains two integers `a` and `b`, denoting that player `b` is recruited directly by player `a`. Player indices start from 1. - The next `q` lines describe the queries. Each line contains a single integer `u`, denoting a query to find the strength of player `u`. Output Output `q` lines, each line containing one integer, the strength of the corresponding queried player. Examples Input ``` 5 3 1 2 1 3 2 4 2 5 3 6 2 3 1 ``` Output ``` 2 1 5 ``` Explanation The recruitment events form the following tree: ``` 1 ├── 2 │ ├── 4 │ └── 5 ├── 3 │ └── 6 ``` - Querying player 2 gives 2 because players 4 and 5 are directly and indirectly recruited by player 2. - Querying player 3 gives 1 because player 6 is directly recruited by player 3. - Querying player 1 gives 5 because players 2, 3, 4, 5, and 6 are directly or indirectly recruited by player 1.","solution":"from collections import defaultdict def calculate_alliance_strength(n, q, events, queries): tree = defaultdict(list) subordinates_count = {} # Create tree from recruitment events for a, b in events: tree[a].append(b) def dfs(node): if node in subordinates_count: return subordinates_count[node] count = 0 for child in tree[node]: count += 1 + dfs(child) subordinates_count[node] = count return count # Calculate the strength for each node result = [] for u in queries: if u not in subordinates_count: dfs(u) result.append(subordinates_count[u]) return result"},{"question":"Bus Schedule Optimization In a city, there is a bus route that connects several key locations. The bus service is managed such that the buses start from and return to a central depot. Each bus trip consists of a departure time and an arrival time at the depot. The depot operates such that a bus can be dispatched for a new trip immediately upon its return. Your task is to write a program that determines the minimum number of buses required to operate the given schedule without any delays. Input The input consists of multiple datasets. Each dataset has the following format: ``` n hh:mm:ss hh:mm:ss hh:mm:ss hh:mm:ss ... hh:mm:ss hh:mm:ss ``` The integer `n` on the first line is the number of bus trips in the timetable. This value is guaranteed not to exceed 10,000. Each of the next `n` lines contains two time strings separated by a space, representing the departure and arrival times of each bus trip at the depot. Each time is in the format `hh:mm:ss`, where `hh` is the hour, `mm` is the minute, and `ss` is the second. The values for `hh`, `mm`, and `ss` are always valid and formatted as two digits (e.g., 01, 09, 10, etc.). Bus trips do not span across midnight (00:00:00), so the departure time is always earlier than the arrival time on the same day. The end of input is indicated by `n = 0`. This line should not be processed as part of the dataset. Output For each dataset, output a single integer representing the minimum number of buses required to cover the timetable. Sample Input ``` 4 08:00:00 09:30:00 08:30:00 10:00:00 10:15:00 12:00:00 11:00:00 13:30:00 3 12:00:00 13:00:00 12:30:00 14:00:00 13:00:00 15:00:00 0 ``` Sample Output ``` 2 2 ``` Explanation: - In the first dataset, two buses are required: one for the trips from `08:00:00` to `09:30:00` and from `10:15:00` to `12:00:00`, and another for the trips from `08:30:00` to `10:00:00` and from `11:00:00` to `13:30:00`. - In the second dataset, two buses are required to cover the trips with some overlap in their schedules.","solution":"from heapq import heappush, heappop from datetime import datetime def minimum_buses_required(schedule): Determine the minimum number of buses required to operate the given schedule without any delays. schedule: List of tuples containing departure and arrival times for each bus trip. Each tuple is formatted as (\\"hh:mm:ss\\", \\"hh:mm:ss\\"). Returns: An integer representing the minimum number of buses required. if not schedule: return 0 # Convert time string to datetime object to make it easy to compare times def convert_time(t): return datetime.strptime(t, \\"%H:%M:%S\\") # Transform the schedule into a list of (departure, arrival) tuples with datetime objects trips = [(convert_time(dep), convert_time(arr)) for dep, arr in schedule] # Sort trips by departure time trips.sort(key=lambda x: x[0]) min_heap = [] buses_required = 0 for dep, arr in trips: # Remove buses that have returned and are available for a new trip while min_heap and min_heap[0] <= dep: heappop(min_heap) # Add the current bus trip\'s arrival time to the heap heappush(min_heap, arr) # The size of the heap represents the number of concurrent buses needed buses_required = max(buses_required, len(min_heap)) return buses_required"},{"question":"**[Question]** Implement a function `unrolled_linked_list(head, k)` that accepts a linked list represented by its head node and an integer `k` (1 ≤ k ≤ 50). The linked list node is defined as: ```python class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next ``` Your function should transform the input linked list into an unrolled linked list, where each node contains an array of values of size up to `k` rather than a single value. The unrolled linked list will be represented by the following node class: ```python class UnrolledListNode: def __init__(self, values=None, next=None): self.values = values if values is not None else [] self.next = next ``` The function should return the head of the new unrolled linked list. # Example Input: - Linked list: 1 -> 2 -> 3 -> 4 -> 5 -> 6 - k: 4 Output: - Unrolled linked list: [1, 2, 3, 4] -> [5, 6] # Input A linked list (represented by its head node) and an integer `k`. # Output An unrolled linked list (represented by its head node). # Note - If the input linked list is empty, the output should also be an empty unrolled linked list. - Each node in the unrolled linked list should store up to `k` values from the original linked list. - You may assume that the input linked list has more than zero and less than 10^5 elements. # Function signature ```python def unrolled_linked_list(head: ListNode, k: int) -> UnrolledListNode: ```","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next class UnrolledListNode: def __init__(self, values=None, next=None): self.values = values if values is not None else [] self.next = next def unrolled_linked_list(head, k): if head is None: return None new_head = UnrolledListNode() current_new_node = new_head current_new_node.values = [] current_old_node = head count = 0 while current_old_node: if count == k: current_new_node.next = UnrolledListNode() current_new_node = current_new_node.next count = 0 current_new_node.values.append(current_old_node.value) current_old_node = current_old_node.next count += 1 return new_head"},{"question":"A logistics company is organizing their delivery schedule. There are a number of packages, each with a unique delivery time window during which the package must be delivered. Given an array of packages where each package is represented by a pair of integers (start_time, end_time) indicating the delivery window, determine the minimum number of delivery drivers required to deliver all packages without violating any delivery windows. A delivery driver can only deliver one package at any given time, but they can deliver consecutive packages as long as the delivery windows don\'t overlap. If two packages\' delivery windows overlap, separate drivers are needed. Write a function `minDrivers(packages)` that takes in an array of packages and returns the minimum number of delivery drivers required. Input The input to the function is an array of tuples, where each tuple represents a package and contains two integers: the start time and the end time of the delivery window (1 ≤ start_time < end_time ≤ 10000). The number of packages will be between 1 and 100,000. Output Return a single integer representing the minimum number of delivery drivers required. Examples Input [(1, 4), (2, 5), (7, 9), (6, 8)] Output 2 Input [(1, 3), (4, 5), (6, 7), (8, 10)] Output 1 Input [(1, 5), (2, 6), (4, 7), (6, 9)] Output 3 Explanation In the first sample, we need at least two drivers because the packages (1, 4) and (2, 5) have overlapping delivery windows, but packages (6, 8) and (7, 9) can be delivered by the same driver once the earlier deliveries are completed. In the second sample, all delivery windows are non-overlapping, so a single driver can deliver all packages. In the third sample, there are multiple overlapping packages requiring at least three drivers to handle all deliveries without clashing delivery times. Note: Think about using data structures that efficiently keep track of overlapping intervals to solve this problem.","solution":"def minDrivers(packages): Find the minimum number of delivery drivers needed to deliver all packages without overlapping delivery windows. # Sort packages by start time packages.sort(key=lambda x: x[0]) # Min heap to keep track of end times of packages import heapq heap = [] for package in packages: # If the min end time in the heap is less than or equal to the current package start time, # it means a driver has finished delivery and hence we can re-use the driver. if heap and heap[0] <= package[0]: heapq.heappop(heap) # Push the current package end time into the heap heapq.heappush(heap, package[1]) # The size of the heap will give us the minimum number of delivery drivers needed return len(heap)"},{"question":"You are given a string s consisting of lowercase English letters and an integer k. You need to remove at most k characters from the string s to make it a palindrome. Return the minimum number of characters that need to be removed to achieve this. A string is called a palindrome if it reads the same backward as forward. Input The first line contains one integer k (0 ≤ k ≤ 1000) — the maximum number of characters you can remove. The second line contains a string s (1 ≤ |s| ≤ 1000), consisting of lowercase English letters. Output Print one integer — the minimum number of characters you need to remove from the string to make it a palindrome if possible. If it is not possible to make the string a palindrome by removing at most k characters, return -1. Example Input 1 abca Output 1 Input 2 abcdef Output -1 Input 0 aabaa Output 0 Note In the first example, by removing \'b\', the remaining string \\"aca\\" becomes a palindrome. In the second example, it is not possible to make \\"abcdef\\" a palindrome by removing at most 2 characters. In the third example, the string is already a palindrome, so the answer is 0.","solution":"def minimum_removals_to_palindrome(k, s): def is_palindrome_range(i, j): while i < j: if s[i] != s[j]: return False i += 1 j -= 1 return True def min_deletions(i, j): if i >= j: return 0 if s[i] == s[j]: return min_deletions(i + 1, j - 1) else: return min(min_deletions(i + 1, j), min_deletions(i, j - 1)) + 1 len_s = len(s) if is_palindrome_range(0, len_s - 1): return 0 required_removals = min_deletions(0, len_s - 1) return required_removals if required_removals <= k else -1"},{"question":"A smart home system is being developed to control various devices in a house. One of the functionalities needed is to control the temperature of rooms using a central thermostat. The thermostat can be set to a specific temperature, and each room in the house can have a different current temperature. When the thermostat is set to a specific temperature, each room will gradually adjust its temperature towards the thermostat\'s setting. Every minute, the temperature of each room changes by 1 degree towards the thermostat\'s setting until it matches the thermostat\'s setting. You need to determine the number of minutes needed for all rooms to reach the thermostat\'s setting. Given the initial temperatures of the rooms and the thermostat setting, write a program to calculate the number of minutes needed for all rooms to reach the target temperature. # Input The first line contains two integers: - `N` (1 ≤ N ≤ 100,000) — the number of rooms - `T` (-100 ≤ T ≤ 100) — the target temperature set on the thermostat. The next line contains `N` integers: - `T1, T2, ..., TN` (-100 ≤ Ti ≤ 100) — the initial temperatures of the N rooms. # Output Print a single integer — the number of minutes needed for all rooms to reach the target temperature. # Example Input ``` 5 10 7 15 10 5 12 ``` Output ``` 5 ``` [Explanation] - The first room, initially at 7 degrees, will take 3 minutes to reach 10 degrees. - The second room, initially at 15 degrees, will take 5 minutes to reach 10 degrees. - The third room is already at 10 degrees. - The fourth room, initially at 5 degrees, will take 5 minutes to reach 10 degrees. - The fifth room, initially at 12 degrees, will take 2 minutes to reach 10 degrees. The room that requires the most time is the second or the fourth room, which takes 5 minutes, hence the output is 5 minutes.","solution":"def time_to_reach_target_temperature(N, T, temperatures): Calculates the number of minutes needed for all rooms to reach the target temperature T :param N: Number of rooms :param T: Target temperature :param temperatures: List of initial temperatures of the rooms :return: Number of minutes needed for all rooms to reach T max_time = 0 for current_temp in temperatures: time = abs(T - current_temp) if time > max_time: max_time = time return max_time"},{"question":"Alex loves studying different animal species and keeping track of their sightings. He has recently started using a digital system to log his sightings and wants to analyze the frequency of his sightings to understand which animals he sees most often. The system logs each sighting with the name of the animal and the timestamp of the sighting. Multiple sightings of the same animal can occur at different times. Alex wants to find the animal species which he has seen the most often. If there is a tie, he wants the animal species whose name comes first lexicographically. Input - The first line contains an integer n (1 ≤ n ≤ 105) – the number of sightings. - The next n lines each contain a string representing the name of the animal Alex sighted. Each animal name consists of lowercase alphabetic characters and has a maximum length of 50. Output - Print the name of the animal species that Alex has sighted the most frequently. If there are multiple animals that have been sighted the same maximum number of times, print the one that comes first lexicographically. Examples Input 6 giraffe elephant giraffe zebra elephant giraffe Output giraffe Input 4 bear bear lynx lynx Output bear Note In the first example, giraffe is sighted three times, which is more frequent than any other animal. In the second example, both bear and lynx are sighted two times each. Since \\"bear\\" comes before \\"lynx\\" lexicographically, the output is \\"bear\\".","solution":"from collections import defaultdict def most_frequent_animal(n, sightings): Returns the animal species that has been sighted the most frequently. In the case of a tie, return the one that comes first lexicographically. animal_count = defaultdict(int) for animal in sightings: animal_count[animal] += 1 max_count = max(animal_count.values()) most_common_animals = [animal for animal, count in animal_count.items() if count == max_count] return min(most_common_animals) # Example usage: # n = 6 # sightings = [\\"giraffe\\", \\"elephant\\", \\"giraffe\\", \\"zebra\\", \\"elephant\\", \\"giraffe\\"] # print(most_frequent_animal(n, sightings)) # Output: \\"giraffe\\""},{"question":"You are given a list of buildings\' heights arranged in a row from left to right. Each building has a unique height. The goal is to calculate the number of buildings that have a clear view of the sunset when viewed from the leftmost side of the row. A building has a clear view of the sunset if there are no taller buildings to its left. For example, if the heights of the buildings are [3, 1, 4, 7, 5], the buildings with heights 3, 4, and 7 will have a clear view of the sunset. Input The first line contains a single integer n (1 ≤ n ≤ 105) — the number of buildings. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 109) — the heights of the buildings from left to right. Output Print a single integer — the number of buildings that have a clear view of the sunset from the left side. Examples Input 5 3 1 4 7 5 Output 3 Input 4 1 2 3 4 Output 4 Input 6 10 8 9 7 6 11 Output 2 Note In the first example, buildings with heights 3, 4, and 7 have a clear view of the sunset. In the second example, all buildings have a clear view as each building is taller than the previous ones. In the third example, only the buildings with heights 10 and 11 have a clear view of the sunset.","solution":"def count_buildings_with_view(buildings): Returns the number of buildings that have a clear view of the sunset when viewed from the leftmost side of the row. Parameters: buildings (list of int): A list containing the heights of the buildings. Returns: int: The number of buildings with a clear view of the sunset. if not buildings: return 0 count = 0 max_height = -1 for height in buildings: if height > max_height: count += 1 max_height = height return count"},{"question":"You are given an integer array and a target sum. Determine whether there exists three elements in the array such that their sum equals the target sum. Return true if such a triplet exists, otherwise return false. Input The first line contains two integers n and T (3 ≤ n ≤ 1000, -10^9 ≤ T ≤ 10^9) where n is the number of elements in the array and T is the target sum. The second line contains n integers a1, a2, ..., an where (-10^9 ≤ ai ≤ 10^9) are the elements of the array. Output Return \\"true\\" if there are three elements in the array that sum up to T, otherwise return \\"false\\". Examples Input 5 0 -1 2 -3 4 5 Output true Input 4 10 1 2 3 4 Output false","solution":"def three_sum(nums, target): Determine if there are three elements in the array that sum to the target value. Args: nums (list of int): Integer array. target (int): Target sum. Returns: bool: True if such a triplet exists, otherwise False. nums.sort() n = len(nums) for i in range(n-2): left, right = i + 1, n - 1 while left < right: curr_sum = nums[i] + nums[left] + nums[right] if curr_sum == target: return True elif curr_sum < target: left += 1 else: right -= 1 return False"},{"question":"You are given a string containing only curly brackets `{` and `}`. Your task is to determine the minimum number of bracket reversals required to make the string balanced. A balanced string is one where every opening bracket `{` has a corresponding closing bracket `}`, and every closing bracket `}` has a corresponding opening bracket `{`. If it is not possible to balance the string, return -1. Input A single line containing a string consisting of characters `{` and `}` only. The length of the string does not exceed 2000 characters. Output Print a single integer, the minimum number of reversals needed to balance the string. If it is impossible to balance the string, print -1. Examples Input }{ Output 2 Input {{{` Output 1 Input {{}{}}` Output 0 Input {{{{{` Output -1","solution":"def min_reversals_to_balance(s): Returns the minimum number of reversals required to balance the brackets in string s. If it is not possible, returns -1. # Check if the length of the string is odd if len(s) % 2 != 0: return -1 # Stack to keep track of unbalanced brackets stack = [] # Traverse through the string for char in s: if char == \'{\': stack.append(char) else: # This is a closing bracket if stack and stack[-1] == \'{\': stack.pop() # Balanced part else: stack.append(char) # Unbalanced closing bracket # Now stack contains only unbalanced brackets unbalanced_len = len(stack) # Find number of \'{\' and \'}\' at the end of the array open_brackets = 0 while stack and stack[-1] == \'{\': stack.pop() open_brackets += 1 close_brackets = unbalanced_len - open_brackets # Minimum reversals required return (close_brackets // 2) + (open_brackets // 2) + (close_brackets % 2) + (open_brackets % 2)"},{"question":"Write a program that will help a delivery company optimize their delivery routes in a city. The city is represented as a grid of blocks, with intersections marked by coordinates (i, j). Each delivery route starts from the company\'s headquarters located at (0, 0) and ends at the delivery address located at (m, n). The delivery person can only move right or down at each step. The goal is to calculate the number of unique paths the delivery person can take to get from the headquarters to the delivery address. Input The input consists of multiple datasets. Each dataset consists of two integers, m (1 ≤ m ≤ 10) and n (1 ≤ n ≤ 10), where (m, n) are the coordinates of the delivery address. The input ends with a line containing two zeros. Output For each dataset, output the number of unique paths from (0, 0) to (m, n) on a new line. Example Input 2 2 3 2 0 0 Output 6 10","solution":"def unique_paths(m, n): Calculates the number of unique paths from (0, 0) to (m, n) using dynamic programming. :param m: final row (1 ≤ m ≤ 10) :param n: final column (1 ≤ n ≤ 10) :return: number of unique paths # Initialize a (m+1)x(n+1) grid to store the number of paths to each cell dp = [[1] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): dp[i][j] = dp[i - 1][j] + dp[i][j - 1] return dp[m][n] def process_input(data): Processes the input data and returns the results for each dataset. :param data: list of tuples where each tuple contains (m, n) :return: list of results for each (m, n) from input data result = [] for m, n in data: if m == 0 and n == 0: break result.append(unique_paths(m, n)) return result"},{"question":"Problem You are given a two-dimensional grid. Each cell of the grid is identified by a pair of coordinates (i, j) and contains either a `1` or a `0`. You can move vertically or horizontally from one cell to another. A group of connected `1`s forms a cluster. You need to find the number of clusters of `1`s in the grid. Two `1`s are in the same cluster if they are directly connected based on their horizontal or vertical position. Constraints * 1 <= m, n <= 50 * The grid contains only `0` and `1` Input The input format is as follows: m n grid_value_1_1 grid_value_1_2 ... grid_value_1_n grid_value_2_1 grid_value_2_2 ... grid_value_2_n ... grid_value_m_1 grid_value_m_n The first line contains two integers `m` and `n`, representing the number of rows and columns of the grid. The subsequent `m` lines each represent a row of the grid with `n` integers separated by space. Output The output should be the number of clusters of connected `1`s. Examples Input 3 3 1 0 1 0 1 0 1 0 1 Output 5 Input 4 5 1 0 0 1 0 0 1 0 1 0 0 0 1 0 1 1 0 1 1 0 Output 6","solution":"def count_clusters(m, n, grid): def dfs(i, j): if i < 0 or i >= m or j < 0 or j >= n or grid[i][j] == 0: return grid[i][j] = 0 # Mark as visited # explore all four directions dfs(i-1, j) dfs(i+1, j) dfs(i, j-1) dfs(i, j+1) clusters = 0 for i in range(m): for j in range(n): if grid[i][j] == 1: clusters += 1 dfs(i, j) return clusters def parse_input(input_str): lines = input_str.strip().split(\'n\') m, n = map(int, lines[0].split()) grid = [list(map(int, line.split())) for line in lines[1:]] return m, n, grid def count_clusters_from_input(input_str): m, n, grid = parse_input(input_str) return count_clusters(m, n, grid)"},{"question":"Sara loves playing with strings and challenges her friends to solve string puzzles. One of her favorite puzzles is to find the smallest subsequence of a given string such that it contains a certain substring in a specific order but not necessarily consecutively. Given a string `s` and a substring `t`, your task is to write a function that finds the smallest possible subsequence of `s` which contains `t` in order, but the characters of `t` do not have to be consecutive in the subsequence. Input The input consists of two lines: - The first line contains the string `s` (1 ≤ |s| ≤ 1000) containing lowercase English letters. - The second line contains the substring `t` (1 ≤ |t| ≤ 100) containing lowercase English letters. Output Print the smallest subsequence of `s` that contains `t` in order. If there are multiple smallest subsequences, print the one that appears first in `s`. If no such subsequence exists, print \\"No such subsequence\\". Examples Input abcde ace Output ace Input abecdabc abc Output abc Input abcdef fbd Output No such subsequence","solution":"def find_smallest_subsequence(s, t): Finds the smallest subsequence of s that contains t in order. If no such subsequence exists, returns \\"No such subsequence\\". m, n = len(s), len(t) dp = [[None] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): dp[i][0] = \\"\\" for i in range(1, m + 1): for j in range(1, n + 1): if s[i-1] == t[j-1]: if dp[i-1][j-1] is not None: substr = dp[i-1][j-1] + s[i-1] if dp[i][j] is None or len(substr) < len(dp[i][j]): dp[i][j] = substr if dp[i-1][j] is not None: if dp[i][j] is None or len(dp[i-1][j]) < len(dp[i][j]): dp[i][j] = dp[i-1][j] if dp[m][n] is None: return \\"No such subsequence\\" return dp[m][n]"},{"question":"You are given a list of n integers. You have to choose exactly k non-empty subsequences of the given list such that the sum of their lengths equals n. Your task is to determine the maximum possible sum of the minimum element from each of these k subsequences. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The first line of each test case contains two integers n and k (1 ≤ k ≤ n ≤ 100) — the number of integers in the list and the number of subsequences to be chosen, respectively. The second line of each test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100) — the elements of the list. Output For each test case, print one integer — the maximum possible sum of the minimum element from each of the k subsequences. Example Input 3 6 3 1 2 3 4 5 6 5 2 3 1 4 1 5 3 1 7 8 9 Output 15 6 7 Note In the first test case, you can choose the subsequences [1, 2], [3, 4], and [5, 6]. The sum of minimum elements from each subsequence is 1 + 3 + 5 = 9. The maximum possible sum is 15 (selecting the subsequences [1], [2], and [3, 4, 5, 6] with minimum elements 1, 2 and 6 respectively). In the second test case, you can choose subsequences [1, 3, 4, 1] and [5]. The sum of minimum elements from each subsequence is 1 + 5 = 6. In the third test case, there is only one subsequence [7, 8, 9], and the sum of minimum elements is 7.","solution":"def max_sum_of_min_elements(t, test_cases): results = [] for case in test_cases: n, k = case[0] a = case[1] a.sort(reverse=True) results.append(sum(a[:k])) return results"},{"question":"Lara is developing a new leaderboard system for an online multiplayer game. Players earn points for each match they play. The point details for each match of a player are stored in unsorted order. Every player has a unique ID and plays multiple matches. Lara wants to organize the leaderboard such that it lists all players in the ascending order of their player IDs. Additionally, for each player, their match points should be listed in descending order. Can you help Lara by sorting the leaderboard as per her requirement? # INPUT: First line contains an integer M, the number of game records. Next M lines, each containing two integers separated by space, player-ID and points of that match. # OUTPUT: Print the sorted results where each line contains two integers, player-ID and points. # CONSTRAINTS: 1 ≤ M ≤ 200000 0 ≤ Points ≤ 10000 # SAMPLE INPUT 7 101 200 101 150 102 300 103 250 102 200 101 100 103 100 # SAMPLE OUTPUT 101 200 101 150 101 100 102 300 102 200 103 250 103 100 # EXPLANATION: - Player \'101\' played three matches with points \'200\', \'150\', \'100\'. - Player \'102\' played two matches with points \'300\', \'200\'. - Player \'103\' played two matches with points \'250\', \'100\'. Players are sorted in ascending order by player-ID: 101, 102, 103. Match points for each player are sorted in descending order: - For player-ID 101: points 200, 150, 100. - For player-ID 102: points 300, 200. - For player-ID 103: points 250, 100.","solution":"def sort_leaderboard(records): from collections import defaultdict # Create a dictionary to store points for each player leaderboard = defaultdict(list) # Fill the leaderboard with the points from records for player_id, points in records: leaderboard[player_id].append(points) # Sort the leaderboard by player_id and points in descending order sorted_results = [] for player_id in sorted(leaderboard.keys()): points_sorted = sorted(leaderboard[player_id], reverse=True) for points in points_sorted: sorted_results.append((player_id, points)) return sorted_results"},{"question":"You are given `n` days and two types of activities: study sessions and workout sessions. Each activity given has a start time and end time. The activities do not overlap within their type, however, they can overlap with the activities of the other type. Your task is to find the maximum number of activities you can participate in over the `n` days if you can only attend one activity per day. Input The first line of input contains a single integer `n` (1 ≤ n ≤ 3 * 10^5) — the number of days. The next line contains an integer `m1` (1 ≤ m1 ≤ 3 * 10^5) — the number of study sessions. The next `m1` lines each contain two integers `s1_i` and `e1_i` (1 ≤ s1_i < e1_i ≤ n) — the start and end day of a study session. The next line contains an integer `m2` (1 ≤ m2 ≤ 3 * 10^5) — the number of workout sessions. The next `m2` lines each contain two integers `s2_i` and `e2_i` (1 ≤ s2_i < e2_i ≤ n) — the start and end day of a workout session. Output Print a single integer denoting the maximum number of activities one can participate in over the n days, attending only one activity each day. Example Input 10 3 1 2 3 5 6 7 3 2 4 5 6 7 9 Output 3 Explanation In the example, you can attend three activities: one on day 1-2 (study session), another on day 5-6 (workout session), and the last one on day 7-9 (workout session).","solution":"def max_activities(n, study_sessions, workout_sessions): # This function does a simple planning # meeting rooms problem adapted to solve # the attendance problem. intervals = [] for s, e in study_sessions: intervals.append((s, e)) for s, e in workout_sessions: intervals.append((s, e)) intervals.sort(key=lambda x: x[1]) last_end_time = 0 count = 0 for s, e in intervals: if s >= last_end_time: count += 1 last_end_time = e+1 return count"},{"question":"You are given an array `a` of n integers that are initially all set to 0. There are q queries of the following types: 1. You need to increment each element in the subarray from index `li` to `ri` (both inclusive) by 1. 2. You need to find the maximum value in the subarray from index `li` to `ri` (both inclusive). Input The first line of the input contains two integers `n` and `q` (1 ≤ n, q ≤ 100,000) — the length of the array and the number of queries, respectively. Each of the next `q` lines contains one query in one of the following forms: - For the increment query: `1 li ri` where `1 ≤ li ≤ ri ≤ n`. - For the maximum query: `2 li ri` where `1 ≤ li ≤ ri ≤ n`. Output For each query of the second type, output a single integer — the maximum value in the specified subarray. Example Input 6 5 1 1 3 2 1 3 1 4 6 2 1 6 2 4 6 Output 1 1 1 Note Initially, the array `a` is `[0, 0, 0, 0, 0, 0]`. 1. After the first query `1 1 3`, the array becomes `[1, 1, 1, 0, 0, 0]`. 2. The second query `2 1 3` asks for the maximum value from index 1 to 3, which is `1`. 3. After the third query `1 4 6`, the array becomes `[1, 1, 1, 1, 1, 1]`. 4. The fourth query `2 1 6` asks for the maximum value from index 1 to 6, which is `1`. 5. The fifth query `2 4 6` asks for the maximum value from index 4 to 6, which is `1`.","solution":"def process_queries(n, q, queries): Processes a list of queries on an initially zeroed array of length n. Parameters: n (int) - The length of the array q (int) - The number of queries queries (list of tuples) - Each tuple represents a query of format (type, li, ri) Returns: list - Results of each maximum query type (2 li ri) # Initialize the array arr = [0] * n results = [] # Process each query for query in queries: if query[0] == 1: # Increment query `1 li ri` li, ri = query[1] - 1, query[2] - 1 for i in range(li, ri + 1): arr[i] += 1 elif query[0] == 2: # Max query `2 li ri` li, ri = query[1] - 1, query[2] - 1 max_value = max(arr[li:ri + 1]) results.append(max_value) return results"},{"question":"You are given an array of n integers and a target integer k. Your task is to find the number of pairs (i, j) in the array such that i < j and the sum of array elements at these indices is divisible by k. Input The input consists of two lines. The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9). The second line contains n integers, representing the elements of the array (1 ≤ a[i] ≤ 10^9). Output Print a single integer, the number of pairs (i, j) such that i < j and (a[i] + a[j]) % k == 0. Examples Input 5 5 1 2 3 4 5 Output 2 Input 4 3 1 3 2 6 Output 2 Input 6 10 10 20 30 40 50 60 Output 15 Explanation In the first example, the pairs (i, j) that satisfy the condition are (0, 4) and (1, 3), hence the output is 2. In the second example, the pairs (i, j) that satisfy the condition are (0, 2) and (1, 3), hence the output is 2. In the third example, all pairs (i, j) satisfy the condition, thus the output is 15.","solution":"def count_divisible_pairs(n, k, array): remainder_count = [0] * k # Count the remainders for num in array: remainder_count[num % k] += 1 # Calculate pairs with remainder 0 count = remainder_count[0] * (remainder_count[0] - 1) // 2 # Calculate pairs with complementing remainders for i in range(1, (k // 2) + 1): if i != k - i: count += remainder_count[i] * remainder_count[k - i] # Handle the case where k is even if k % 2 == 0: count += remainder_count[k // 2] * (remainder_count[k // 2] - 1) // 2 return count"},{"question":"Alex loves building robots and one day he came across an interesting challenge. Given a sequence of instructions to move a robot on a two-dimensional grid, he wants to check if the robot returns to its original starting point (0, 0). The robot can move in four directions: \'L\' (left), \'R\' (right), \'U\' (up), and \'D\' (down). Each instruction in the sequence corresponds to moving one step in the respective direction. Write a function that takes a string representing the sequence of instructions and returns \\"YES\\" if the robot returns to the origin after executing all instructions, otherwise return \\"NO\\". Input - A single string containing the sequence of instructions. The string length will not exceed 10^5. Output - Print \\"YES\\" if the robot returns to (0, 0), otherwise print \\"NO\\". Examples Input ``` LRUD ``` Output ``` YES ``` Input ``` LLRUUD ``` Output ``` NO ``` Input ``` UUDDLRLR ``` Output ``` YES ``` Input ``` LUDL ``` Output ``` NO ```","solution":"def robot_return_to_origin(instructions): Determines if the robot returns to the origin (0, 0) after executing the given instructions. Parameters: instructions (str): A sequence of \'L\', \'R\', \'U\', \'D\' representing left, right, up, down moves. Returns: str: \\"YES\\" if the robot returns to the origin, otherwise \\"NO\\". x, y = 0, 0 # starting point (0, 0) for move in instructions: if move == \'L\': x -= 1 elif move == \'R\': x += 1 elif move == \'U\': y += 1 elif move == \'D\': y -= 1 return \\"YES\\" if x == 0 and y == 0 else \\"NO\\""},{"question":"Bouncing Ball On Stairs A ball is dropped from the top of a staircase consisting of `N` steps, each of height `H` cm. The ball bounces back to a fraction `F` of its height on each bounce and continues bouncing until its height is less than the height of one step `H`. Write a program to calculate the total number of steps on the staircase the ball touches before coming to rest. A step is considered touched if the ball hits it after a bounce. input Input is given from standard input in the following format: N H F output Output the total number of steps the ball touches before coming to rest. Constraint * (1 leq N leq 100) * (1 leq H leq 100) * (0 < F < 1) Input example 1: ``` 10 5 0.5 ``` Output example 1: ``` 10 ``` Input example 2: ``` 5 7 0.6 ``` Output example 2: ``` 5 ``` Input example 3: ``` 6 10 0.9 ``` Output example 3: ``` 6 ```","solution":"def bouncing_ball(N, H, F): Returns the total number of steps the ball touches before coming to rest. :param N: Number of steps :param H: Height of each step in cm :param F: Fraction of height to which the ball bounces back :return: Total number of steps touched by the ball total_touched_steps = 0 current_height = H # Ball falls initially from the height of one step while current_height >= H: total_touched_steps += N # Ball touches all steps of the staircase current_height *= F # Ball bounces back to fraction F of its current height return total_touched_steps"},{"question":"Alyssa is a software developer who is currently studying different string manipulation techniques. She encountered an interesting problem and needs your help to solve it. The task is: Given a string, determine the length of the longest substring with all distinct characters. For example, for the string \\"abcabcbb\\", the answer would be 3, as the longest substring with all distinct characters is \\"abc\\". You need to find the length of this substring for the given input string. INPUT A single line containing the string to be evaluated. OUTPUT An integer representing the length of the longest substring with all distinct characters. CONSTRAINTS The length of the input string will not exceed 1000 characters. The input string will only contain lowercase English letters. SAMPLE INPUT abcabcbb SAMPLE OUTPUT 3","solution":"def length_of_longest_substring(s): Returns the length of the longest substring with all distinct characters. n = len(s) max_length = 0 char_index_map = {} start = 0 for end in range(n): if s[end] in char_index_map: # move the start pointer to the right of the previous index of the duplicate character start = max(start, char_index_map[s[end]] + 1) char_index_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Problem Statement A local library wants to modernize its process for organizing a large collection of books. The librarian needs a better way to categorize and search through the collection. They have asked for a program to help automate this. Each book has a unique identifier, a title, and a genre. The collection needs to be searchable by genre, and within each genre, the books should be sorted alphabetically by title. To help the librarian, you need to write a program that: 1. Inserts new books into the collection. 2. Allows searching for all books in a specific genre, sorted alphabetically by title. Input The first line of the input contains an integer Q denoting the number of queries. Each of the following Q lines can be one of the following types: 1. \\"ADD genre title\\" – Adds a new book with the given genre and title. 2. \\"LIST genre\\" – Lists all book titles in the specified genre, sorted alphabetically. Output For each \\"LIST\\" query, output all book titles in the specified genre on separate lines, in alphabetical order. If there are no books in the specified genre, output \\"No books found\\" on a separate line. Constraints 1 ≤ Q ≤ 10^5 The length of genre and title strings are both between 1 and 100. The input is case-sensitive. Example Input 7 ADD Fiction The Great Gatsby ADD Fiction To Kill a Mockingbird ADD Science Astrophysics for People in a Hurry ADD Fiction 1984 LIST Fiction LIST Science LIST Mystery Output 1984 The Great Gatsby To Kill a Mockingbird Astrophysics for People in a Hurry No books found Explanation In the example, three books are added to the Fiction genre, and one book to the Science genre. When listing books in the Fiction genre, the titles are sorted alphabetically. The Mystery genre has no books added, so the output is \\"No books found\\".","solution":"from collections import defaultdict class Library: def __init__(self): self.books_by_genre = defaultdict(list) def add_book(self, genre, title): self.books_by_genre[genre].append(title) def list_books(self, genre): if genre in self.books_by_genre and self.books_by_genre[genre]: return sorted(self.books_by_genre[genre]) else: return [\\"No books found\\"] def process_commands(commands): library = Library() output = [] for command in commands: parts = command.split(\\" \\", 2) if parts[0] == \\"ADD\\": _, genre, title = parts library.add_book(genre, title) elif parts[0] == \\"LIST\\": _, genre = parts output.extend(library.list_books(genre)) return output # Example usage # commands = [ # \\"ADD Fiction The Great Gatsby\\", # \\"ADD Fiction To Kill a Mockingbird\\", # \\"ADD Science Astrophysics for People in a Hurry\\", # \\"ADD Fiction 1984\\", # \\"LIST Fiction\\", # \\"LIST Science\\", # \\"LIST Mystery\\" # ] # result = process_commands(commands) # for line in result: # print(line)"},{"question":"A company has a network of servers situated in different cities. Each server is connected to one or more other servers through one-way communication links. To ensure data redundancy, each server should be able to receive data from any other server either directly or indirectly through a series of communication links. You need to determine whether the network of servers satisfies this redundancy requirement. Input The input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 10) — the number of test cases. For each test case: - The first line contains two integers n and m (1 ≤ n ≤ 10^4, 0 ≤ m ≤ 10^5) — the number of servers and the number of one-way communication links. - The next m lines each contain two integers u and v (1 ≤ u, v ≤ n) indicating a one-way communication link from server u to server v. Output For each test case, print YES if the network of servers can ensure data redundancy as described. Otherwise, print NO. Example Input 2 4 4 1 2 2 3 3 4 4 1 3 2 1 2 2 3 Output YES NO Note In the first test case, server 1 can communicate directly or indirectly to all other servers, as can servers 2, 3, and 4. Hence, it meets the redundancy requirement. In the second test case, there is no link from server 3 to any other server, disrupting the redundancy requirement.","solution":"def is_strongly_connected(n, edges): from collections import defaultdict, deque def bfs(start, graph, n): visited = [False] * (n + 1) queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return all(visited[1:]) # Graph and reverse graph creation graph = defaultdict(list) reverse_graph = defaultdict(list) for u, v in edges: graph[u].append(v) reverse_graph[v].append(u) # Check from one node (e.g., node 1) if not bfs(1, graph, n): return \\"NO\\" # Check from one node on the reversed graph if not bfs(1, reverse_graph, n): return \\"NO\\" return \\"YES\\" def redundancy_requirement(t, test_cases): results = [] for i in range(t): n, m = test_cases[i][0] edges = test_cases[i][1] result = is_strongly_connected(n, edges) results.append(result) return results"},{"question":"You are given an integer array arr of size n and an integer k. You need to find the number of distinct subarrays of arr of size exactly k. A subarray is defined as a contiguous segment of the array. For example, if the array is [1, 2, 3, 4], the subarrays of size 2 are [1, 2], [2, 3], and [3, 4]. Input - The input contains two lines. - The first line: two integers n and k (1 ≤ k ≤ n ≤ 10^5). - The second line: n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9). Output - Output a single integer — the number of distinct subarrays of size exactly k. Example Input 7 3 1 2 1 3 4 2 3 Output 5 Explanation The subarrays of size 3 are: [1, 2, 1], [2, 1, 3], [1, 3, 4], [3, 4, 2], [4, 2, 3]. All of them are distinct.","solution":"def count_distinct_subarrays(arr, k): Returns the number of distinct subarrays of size exactly k. if k > len(arr): return 0 subarrays = set() for i in range(len(arr) - k + 1): sub = tuple(arr[i:i+k]) subarrays.add(sub) return len(subarrays) # Example usage #print(count_distinct_subarrays([1, 2, 1, 3, 4, 2, 3], 3)) # Output should be 5"},{"question":"A sequence of moves can be described by the string s, where each move is either \'N\' (north), \'S\' (south), \'E\' (east), or \'W\' (west). The moves are executed on a 2D grid starting from the position (0, 0). Given a final position (x, y), determine if the moves in the string s will ever reach (x, y) after being repeated infinitely. Input The first line contains two integers x and y (-10^9 ≤ x, y ≤ 10^9). The second line contains a string s (1 ≤ |s| ≤ 100, s only contains characters \'N\', \'S\', \'E\', \'W\'). Output Print \\"Yes\\" if the sequence of moves in s will eventually reach (x, y), and \\"No\\" otherwise. Examples Input 3 3 NE Output Yes Input 2 -1 ENW Output No Input 5 1000000000 NS Output No Input -1 -1 NENW Output No Input 0 0 E Output Yes Note For the first example, the moves are repeated as \\"NE NE NE...\\". The coordinates of the position after each move would be (1,1), (2,2), (3,3), and it reaches (3,3) but does not stop there. In the second example, the sequence of moves \\"ENW\\" would lead to positions (1,0), (1,1), (0,1) and then it would cycle through the same positions again without ever reaching (2,-1). In the third example, \\"NS\\" will toggle the vertical position but never move horizontally enough to get far away from y=0 axis. In the fourth example, moves will cover pattern (1,1) -> (2,2) -> (2,1) -> (1,1) -> (0,1) -> (-1,1) -> (-1,0) -> (-1,-1) etc., but it doesn\'t cover point (-1,-1). In the fifth example, there is only one move \\"E\\", and it doesn\'t need to move to reach (0, 0).","solution":"def can_reach_destination(x, y, s): Determines if a sequence of moves will eventually reach a target point (x, y) on a 2D grid. # Calculate the cumulative effect of the sequence of moves dx, dy = 0, 0 for move in s: if move == \'N\': dy += 1 elif move == \'S\': dy -= 1 elif move == \'E\': dx += 1 elif move == \'W\': dx -= 1 # Check if we can reach (x, y) by checking multiples of the net effect px, py = 0, 0 for move in s: if px == x and py == y: return \\"Yes\\" if move == \'N\': py += 1 elif move == \'S\': py -= 1 elif move == \'E\': px += 1 elif move == \'W\': px -= 1 if dx == 0 and dy == 0: return \\"Yes\\" if (px, py) == (x, y) else \\"No\\" elif dx == 0: return \\"Yes\\" if px == x and (py - y) % dy == 0 and (py - y) // dy >= 0 else \\"No\\" elif dy == 0: return \\"Yes\\" if py == y and (px - x) % dx == 0 and (px - x) // dx >= 0 else \\"No\\" else: if (x - px) % dx == 0 and (y - py) % dy == 0: steps_x = (x - px) // dx steps_y = (y - py) // dy return \\"Yes\\" if steps_x == steps_y and steps_x >= 0 else \\"No\\" return \\"No\\""},{"question":"Sam the astronaut has a collection of planets he wants to explore in a specific order. To ensure he can complete his journey with the minimum fuel consumption, he wants to calculate the total fuel required for traveling between the planets. The fuel required to travel from one planet to another is directly proportional to the distance between the planets. Additionally, Sam wants to determine the maximum distance between any two consecutive planets in his journey. For M distances between consecutive planets, calculate the total fuel required and the maximum distance between any two consecutive planets. Input Each test case is formed as follows: The first line contains a positive integer M, the number of distances between consecutive planets such that 1 ≤ M ≤ 100. The next line contains M values each separated by a space, each value D such that 1 ≤ D ≤ 10^6. Output For each case, output the total fuel required and the maximum distance between any two consecutive planets. Example Input: 5 10 20 30 40 50 Output: 150 50","solution":"def calculate_fuel_and_max_distance(M, distances): Calculate the total fuel required and the maximum distance between any two consecutive planets. Parameters: M (int): The number of distances between consecutive planets. distances (List[int]): List of distances between consecutive planets. Returns: tuple: Total fuel required and the maximum distance between any two consecutive planets. total_fuel = sum(distances) max_distance = max(distances) return total_fuel, max_distance"},{"question":"You are given a list of n integers representing heights of mountains. You want to climb up the mountains in such a way that you gain the maximum height difference possible by climbing from one mountain to another. You can only climb one mountain to the next mountain i.e., for any two mountains i and j (i < j), the height difference is calculated as heights[j] - heights[i]. However, you can climb only in one direction, you cannot go back to climb any previous mountains once you step on a new one. Calculate the maximum height difference you can achieve. Input 1 ≤ n ≤ 100 000 (integer) -10^9 ≤ heights[i] ≤ 10^9 (integer), where 0 ≤ i < n Output Output the maximum height difference you can achieve in one line. If it\'s not possible to achieve a positive height difference, return 0. Examples Input 6 2 3 10 6 4 8 Output 8 Input 5 12 11 10 9 8 Output 0","solution":"def max_height_difference(heights): Returns the maximum height difference that can be achieved by climbing from one mountain to another in a single direction. if not heights or len(heights) < 2: return 0 min_height = heights[0] max_diff = 0 for height in heights[1:]: if height - min_height > max_diff: max_diff = height - min_height if height < min_height: min_height = height return max_diff"},{"question":"Problem description Priya loves to collect unique items for her personal collection and she tags each item with a unique number. She often wonders how many different collections she can form when the order of the items in the collection does not matter and the collections can be of any size. Given a set of N distinct items, you need to compute the number of different subsets (collections) you can form. An empty set is also considered a valid subset. Can you help Priya figure out the total number of such subsets? Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Only line of each test case contains an integer N. Output For each test case, output a single line containing the required answer. Constraints 1 ≤ T ≤ 1000 1 ≤ N ≤ 60 Example Input: 3 3 4 1 Output: 8 16 2 Explanation Example case 1 When N = 3 (items are {1, 2, 3}), the subsets are: {}, {1}, {2}, {3}, {1, 2}, {1, 3}, {2, 3}, {1, 2, 3}, totaling to 8 subsets. Example case 2 When N = 4 (items are {1, 2, 3, 4}), there are 2^4 = 16 subsets. Example case 3 When N = 1 (item is {1}), the subsets are: {}, {1}, totaling to 2 subsets.","solution":"def number_of_subsets(test_cases): Given a list of integers representing the number of distinct items for each test case, return a list of integers where each integer represents the number of subsets that can be formed from the respective number of distinct items. results = [] for N in test_cases: # The number of subsets of a set with N elements is 2^N results.append(2 ** N) return results"},{"question":"ABC Corporation is a company that provides food delivery services. They have n delivery zones indexed from 1 to n where they deliver food. Each zone has certain delivery requirements and constraints that need to be met in order to ensure smooth operation and customer satisfaction. To manage these deliveries, ABC Corporation employs m delivery agents. Each delivery agent can work in any one of the delivery zones in a day. However, they have certain preferences and constraints regarding the zones they can deliver to. Each delivery agent can deliver in at most k zones. To maximize efficiency and satisfaction, each delivery agent should work in the zones they are most comfortable with. The goal is to assign each delivery agent to one of their preferred zones in such a way that no delivery zone exceeds its given capacity (maximum number of deliveries it can handle) and every delivery agent gets assigned to exactly one of their preferred zones. Input The first line contains three integers n, m, and k (1 ≤ n ≤ 1000, 1 ≤ m ≤ 1000, 1 ≤ k ≤ 10) indicating the number of delivery zones, the number of delivery agents, and the maximum number of preferred zones for each agent, respectively. The second line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 1000), where ci represents the maximum number of delivery agents that delivery zone i can handle in a day. Each of the next m lines contains k integers aij (1 ≤ aij ≤ n), representing the preferred zones for the i-th delivery agent. Output Print \\"YES\\" if it is possible to assign each delivery agent to one of their preferred zones without exceeding the capacity of any delivery zone. Otherwise, print \\"NO\\". Examples Input 5 4 3 2 2 1 1 1 1 2 3 1 2 5 1 3 4 2 3 4 Output YES Input 3 3 2 1 1 1 1 2 2 3 1 3 Output NO Note In the first example, a possible assignment is: - Delivery agent 1 to zone 1 - Delivery agent 2 to zone 2 - Delivery agent 3 to zone 3 - Delivery agent 4 to zone 4 Each delivery zone\'s capacity is respected, and each delivery agent gets assigned to one of their preferred zones. In the second example, it is impossible to assign the delivery agents without exceeding the capacity of the delivery zones. For example, if agents 1 and 3 are both assigned to zone 1, the capacity of that zone is exceeded. Thus, the answer is \\"NO\\".","solution":"from collections import defaultdict def can_assign_agents(n, m, k, capacities, preferences): # Create a list to hold the number of delivery agents assigned to each zone assigned_to_zone = [0] * (n + 1) preferred_by_agent = defaultdict(list) zones_agents_can_work = defaultdict(list) # populate dictionaries for agents and zones preferences for agent, zones in enumerate(preferences): preferred_by_agent[agent + 1] = zones for zone in zones: zones_agents_can_work[zone].append(agent + 1) # Sort the zones in order of least capacity to highest sorted_zones = sorted(range(1, n + 1), key=lambda x: capacities[x - 1]) assigned_agents = [0] * (m + 1) # Try to assign delivery agents to zones for zone in sorted_zones: while capacities[zone - 1] > 0 and zones_agents_can_work[zone]: agent = zones_agents_can_work[zone].pop() if not assigned_agents[agent]: assigned_agents[agent] = zone assigned_to_zone[zone] += 1 capacities[zone - 1] -= 1 if sum(capacities) == 0: break # Check if all agents are assigned for i in range(1, m + 1): if assigned_agents[i] == 0: return \\"NO\\" return \\"YES\\""},{"question":"You are given a list of integers. We will call the list \\"harmonious\\" if the difference between every pair of adjacent elements is exactly 1. Determine if the given list is harmonious. Constraints * 2 leq n leq 100 * The list elements are integers between -1000 and 1000, inclusive. Input The input is given from Standard Input in the following format: n a0 a1 a2 ... an-1 Output Print `Harmonious` if the list is harmonious. Print `Not Harmonious` otherwise. Examples Input 4 3 4 5 6 Output Harmonious Input 3 1 3 2 Output Not Harmonious","solution":"def is_harmonious(n, arr): Determines if the difference between every pair of adjacent elements in the list is exactly 1. for i in range(n - 1): if abs(arr[i] - arr[i + 1]) != 1: return \\"Not Harmonious\\" return \\"Harmonious\\""},{"question":"Polycarp is preparing for a long race and, to do so, he needs to take a specific number of steps, `s`. There are two types of steps Polycarp can take: a small step that covers 1 meter and a big step that covers 3 meters. There are infinitely many small and big steps available. Polycarp wants to take exactly `s` meters and minimize the number of steps taken. Can you help him determine the minimum number of steps required? Input The first line of the input contains one integer `q` (1 ≤ q ≤ 500) — the number of queries. The next `q` lines contain queries. Each query consists of a single integer `s_i` (1 ≤ s_i ≤ 10^12) — the total number of meters Polycarp needs to cover in the i-th query. Output For each query, print one integer — the minimum number of steps Polycarp needs to take to cover exactly `s_i` meters. Example Input 4 10 7 1 1000000000000 Output 4 3 1 333333333334","solution":"def min_steps(q, s_values): results = [] for s in s_values: if s % 3 == 0: results.append(s // 3) else: results.append(s // 3 + 1) return results"},{"question":"Write a function that takes a positive integer `n` and returns a list of the first `n` elements of the Fibonacci sequence. The Fibonacci sequence is defined as follows: - The first and second terms in the sequence are both 1 - Every subsequent term is the sum of the two preceding terms **Example** ```python input: 5 output: [1, 1, 2, 3, 5] ``` ```python input: 10 output: [1, 1, 2, 3, 5, 8, 13, 21, 34, 55] ```","solution":"def fibonacci(n): Generates a list of the first n elements in the Fibonacci sequence. Parameters: n (int): The number of elements to generate in the Fibonacci sequence. Must be a positive integer. Returns: list: A list containing the first n elements of the Fibonacci sequence. if n <= 0: return [] elif n == 1: return [1] fib_sequence = [1, 1] for i in range(2, n): fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"Problem Statement You are given a list of integers. Your task is to find and return the smallest missing positive integer from the list. Input Format The first line contains a single integer T, the number of test cases. Each test case contains two lines: - The first line contains an integer N, the length of the list. - The second line contains N space-separated integers representing the list. Output Format For each test case, output a single integer — the smallest missing positive integer. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 -10^9 ≤ list[i] ≤ 10^9 SAMPLE INPUT 2 5 3 4 -1 1 4 1 2 0 1 SAMPLE OUTPUT 2 3","solution":"def find_smallest_missing_positive_integer(array): Returns the smallest missing positive integer from the list. :param array: List[int] - List of integers :return: int - Smallest missing positive integer # First segregate positive numbers and non-positive numbers n = len(array) for i in range(n): if array[i] <= 0 or array[i] > n: array[i] = n + 1 # Use elements as index and mark elements in the range [1, n] for i in range(n): num = abs(array[i]) if num <= n: array[num - 1] = -abs(array[num - 1]) # First positive index + 1 is our answer for i in range(n): if array[i] > 0: return i + 1 return n + 1 def find_smallest_missing_positive_integer_from_test_cases(test_cases): Wrapper function to process multiple test cases :param test_cases: List[Tuple[int, List[int]]] - List of test cases :return: List[int] - List of results for each test case results = [] for n, arr in test_cases: results.append(find_smallest_missing_positive_integer(arr)) return results"},{"question":"Alice and Bob are playing a turn-based game on a grid consisting of N rows and M columns. At the beginning of the game, a piece is placed on the top-left cell of the grid (i.e., (1, 1)). Alice and Bob take turns to move the piece, starting with Alice. During each turn, the player must move the piece to an adjacent cell either to the right or down, ensuring staying within the grid boundaries. The game’s objective for each player is to avoid moving the piece into a cell that has already been visited by either player during any of their previous turns. The player who is forced to move the piece to a previously visited cell loses the game. Given the dimensions of the grid (N and M), determine which player has a winning strategy if both players play optimally. Constraints: * 1 ≤ N, M ≤ 1000 Input: The input is given as follows: N M Output: Print the name of the player who has a winning strategy (\\"Alice\\" or \\"Bob\\"). Examples: Input: 3 2 Output: Alice Input: 4 4 Output: Bob Input: 5 3 Output: Alice Explanation: - In the first example (3, 2), Alice has a strategy to always avoid forcing herself into a previously visited cell, so she can win. - In the second example (4, 4), Bob has a response strategy that forces Alice into visiting a previously visited cell first, making him win.","solution":"def find_winner(N, M): Determines the winner of the game given the dimensions of the grid (N x M). Alice always starts first. Returns \\"Alice\\" if Alice has a winning strategy, otherwise \\"Bob\\". # Alice has a winning strategy if either N or M is odd because then she # can always force Bob into a previously visited cell first. if N % 2 == 1 or M % 2 == 1: return \\"Alice\\" else: return \\"Bob\\""},{"question":"A company is organizing a series of workshops for its employees and needs to assign them to different rooms. Each room has a certain capacity, and each workshop has a specific number of attendees. Your task is to determine whether it is possible to assign each workshop to a room such that the number of attendees for each workshop does not exceed the room\'s capacity. Constraints * 1 ≤ R, W ≤ 50 * 1 ≤ ci, ai ≤ 100 Input The input data is provided through Standard Input in the following format: ``` R W c1 c2 c3 ... cR a1 a2 a3 ... aW ``` Here, * The first line consists of two integers R and W, the number of rooms and workshops respectively. * The second line consists of R integers separated by space, indicating the capacity ci of each room. * The third line consists of W integers separated by space, indicating the number of attendees ai for each workshop. Output Print \\"Possible\\" if it is possible to assign each workshop to a room without exceeding the room\'s capacity. Otherwise, print \\"Impossible\\". Examples Input ``` 3 3 10 20 30 5 15 25 ``` Output ``` Possible ``` Input ``` 2 2 5 10 15 10 ``` Output ``` Impossible ```","solution":"def can_assign_workshops_to_rooms(R, W, room_capacities, workshop_attendees): Determine if workshops can be assigned to rooms without exceeding room capacities. Args: R (int): Number of rooms. W (int): Number of workshops. room_capacities (list of int): List of capacities for each room. workshop_attendees (list of int): List of attendees for each workshop. Returns: str: \\"Possible\\" if all workshops can be assigned to rooms, \\"Impossible\\" otherwise. room_capacities.sort(reverse=True) workshop_attendees.sort(reverse=True) for attendees in workshop_attendees: found_room = False for i in range(R): if room_capacities[i] >= attendees: room_capacities[i] -= attendees found_room = True break if not found_room: return \\"Impossible\\" return \\"Possible\\" # Input handling def main(): import sys input = sys.stdin.read data = input().split() R = int(data[0]) W = int(data[1]) room_capacities = list(map(int, data[2:R+2])) workshop_attendees = list(map(int, data[R+2:R+2+W])) result = can_assign_workshops_to_rooms(R, W, room_capacities, workshop_attendees) print(result) if __name__ == \\"__main__\\": main()"},{"question":"You are given a sequence of numbers that represents the heights of a group of students standing in a line. Your task is to rearrange the students in such a way that all students with a height less than or equal to a certain threshold `T` are moved to the front of the line, and all others are moved to the back. The relative order of students should be maintained within each of these two groups. Examples of operation: Suppose the sequence is [150, 160, 170, 140, 180, 130, 175], and the threshold is `T = 160`. - After the operation, the sequence should look like [150, 160, 140, 130, 170, 180, 175]. Input The first line of the input contains two integers `n` (1 ≤ n ≤ 100) — the number of students in the line, and `T` (90 ≤ T ≤ 200) — the threshold height. The second line contains n integers h_1, h_2, ..., h_n — the heights of the students in the line (95 ≤ h_i ≤ 200). Output On the first line, print a single integer `m` (0 ≤ m ≤ n) — the number of students whose height is less than or equal to `T`. On the second line, print the heights of the students in the new order after the operation. Examples Input 7 160 150 160 170 140 180 130 175 Output 4 150 160 140 130 170 180 175 Input 5 150 140 155 130 145 160 Output 3 140 130 145 155 160 Note Explanation of the first testcase: The heights 150, 160, 140, and 130 are less than or equal to the threshold 160. After moving them to the front and maintaining relative order, the sequence becomes [150, 160, 140, 130, 170, 180, 175]. Explanation of the second testcase: The heights 140, 130, and 145 are less than or equal to the threshold 150. After moving them to the front and maintaining relative order, the sequence becomes [140, 130, 145, 155, 160].","solution":"def rearrange_students(n, T, heights): Rearranges the students in such a way that all students with a height less than or equal to a certain threshold T are moved to the front of the line, and all others are moved to the back. The relative order of students is maintained. Args: n : int : Number of students T : int : Threshold height heights : list : List of student heights Returns: tuple : Number of students whose height is <= T, List of heights in new order less_equal_T = [h for h in heights if h <= T] greater_T = [h for h in heights if h > T] m = len(less_equal_T) new_order = less_equal_T + greater_T return m, new_order"},{"question":"You have been tasked with developing a warehouse management software. The warehouse stores different types of products, and each product type has its unique product ID. The software should be able to manage stock levels and process incoming orders. Given an initial stock of products, your task is to determine if an incoming order can be fulfilled and update the stock accordingly. Input The first line of input contains the number of test cases T. Each test case starts with a line containing an integer N (the number of product types in the warehouse). The second line contains N integers, where the ith integer represents the initial stock level of the product with product ID=i (1-based indexing). The third line contains an integer M (the number of items in the incoming order). The fourth line contains M integers, where the ith integer represents the product ID of the ith item in the incoming order. Output For each test case, if the order can be fulfilled, print \\"Order Fulfilled\\" and the updated stock levels, otherwise print \\"Order Cannot be Fulfilled\\". Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 100 0 ≤ initial stock levels ≤ 1000 1 ≤ M ≤ 1000 1 ≤ product ID ≤ N SAMPLE INPUT 2 3 10 5 2 4 1 2 2 3 4 8 10 2 1 5 4 4 1 1 2 SAMPLE OUTPUT Order Fulfilled 9 3 1 Order Cannot be Fulfilled","solution":"def manage_stock(T, test_cases): results = [] for t in range(T): N = test_cases[t][\'N\'] initial_stock = test_cases[t][\'initial_stock\'] M = test_cases[t][\'M\'] incoming_order = test_cases[t][\'incoming_order\'] can_fulfill = True stock_copy = initial_stock[:] for product_id in incoming_order: if stock_copy[product_id - 1] > 0: stock_copy[product_id - 1] -= 1 else: can_fulfill = False break if can_fulfill: results.append(f\\"Order Fulfilledn{\' \'.join(map(str, stock_copy))}\\") else: results.append(\\"Order Cannot be Fulfilled\\") return results # example test case input T = 2 test_cases = [ { \'N\': 3, \'initial_stock\': [10, 5, 2], \'M\': 4, \'incoming_order\': [1, 2, 2, 3] }, { \'N\': 4, \'initial_stock\': [8, 10, 2, 1], \'M\': 5, \'incoming_order\': [4, 4, 1, 1, 2] } ] # example test case execution print(manage_stock(T, test_cases))"},{"question":"Takeshi is working on a new algorithm to compress data. He has designed a way to represent a matrix of integers in a compressed form by summing up the values in the main diagonals of the matrix, but he needs a function that calculates these values. Given a square matrix of size N x N, where each cell contains an integer, your task is to compute the sum of the main diagonals. The main diagonals of a matrix include the primary diagonal and the secondary diagonal. The primary diagonal consists of elements that run from the top-left corner to the bottom-right corner of the matrix. The secondary diagonal consists of elements that run from the top-right corner to the bottom-left corner of the matrix. Additionally, if the matrix size is odd, the center element (which belongs to both diagonals) should only be counted once. Write a function that calculates and returns the sum of the primary and secondary diagonals. Input: - The first line contains an integer N (1 ≤ N ≤ 100), the size of the square matrix. - Each of the following N lines contains N integers separated by spaces, representing the matrix elements, where each element is an integer value between -1000 and 1000, inclusive. Output: - Output a single integer, representing the sum of the main diagonals. Examples: Input: 3 1 2 3 4 5 6 7 8 9 Output: 25 Input: 2 1 2 3 4 Output: 10","solution":"def sum_main_diagonals(matrix): Calculates the sum of the main diagonals of a square matrix. The main diagonals include the primary diagonal (from top-left to bottom-right) and the secondary diagonal (from top-right to bottom-left). If the matrix size is odd, the center element (common to both diagonals) is counted only once. Parameters: matrix (list of list of int): N x N matrix where each cell contains an integer. Returns: int: The sum of the elements in the main diagonals. n = len(matrix) primary_diagonal_sum = 0 secondary_diagonal_sum = 0 for i in range(n): primary_diagonal_sum += matrix[i][i] secondary_diagonal_sum += matrix[i][n - 1 - i] total_sum = primary_diagonal_sum + secondary_diagonal_sum # If the matrix size is odd, subtract the middle element (which is counted twice) if n % 2 == 1: total_sum -= matrix[n // 2][n // 2] return total_sum"},{"question":"A group of students are playing a game where they take turns counting out loud. The rules are simple: They start with the number 1 and take turns incrementing the count by 1. However, every time a student encounters a number that is divisible by 3, they must say \\"fizz\\", and every time a number is divisible by 5, they must say \\"buzz\\". If the number is divisible by both 3 and 5, they say \\"fizzbuzz\\". If the number is neither divisible by 3 nor 5, they just say the number. Your task is to write a program that generates a sequence of the first n numbers in this game format. Input The first line contains the single integer n (1 ≤ n ≤ 100). Output Print each number or word (\\"fizz\\", \\"buzz\\", \\"fizzbuzz\\") on a separate line for the first n numbers of the game. Examples Input 10 Output 1 2 fizz 4 buzz fizz 7 8 fizz buzz Input 15 Output 1 2 fizz 4 buzz fizz 7 8 fizz buzz 11 fizz 13 14 fizzbuzz","solution":"def fizzbuzz(n): Generates a sequence of the first n numbers in the \\"fizzbuzz\\" game format. Parameters: n (int): The count of numbers to generate in the game sequence. Returns: list: A list of strings representing the \\"fizzbuzz\\" sequence. result = [] for i in range(1, n + 1): if i % 3 == 0 and i % 5 == 0: result.append(\\"fizzbuzz\\") elif i % 3 == 0: result.append(\\"fizz\\") elif i % 5 == 0: result.append(\\"buzz\\") else: result.append(str(i)) return result"},{"question":"A city has a large number of traffic lights. The traffic lights are modeled as nodes, and the roads connecting them are modeled as edges. The traffic lights can be turned on or off. If a traffic light is off, then it is not functional and cannot be traversed. You are given the initial state of all traffic lights (on or off) and some roads between them. Your task is to determine whether there exists a path from the traffic light at node 1 to the traffic light at node N, considering only functional (on) traffic lights and roads connecting them. Input: The first line of the input contains T, the number of test cases. For each test case: - The first line contains two integers, N (the number of traffic lights) and M (the number of roads). - The second line contains N integers where the i-th integer is 1 if the traffic light at node i is on, and 0 if it is off. - Each of the next M lines contains two space-separated integers U and V indicating that there is a road between traffic light U and traffic light V. Output: For each test case, print \\"YES\\" if there is a path from node 1 to node N using only functional traffic lights and roads between them. Otherwise, print \\"NO\\". Constraints: 1 ≤ T ≤ 5 2 ≤ N ≤ 10^3 1 ≤ M ≤ 10^3 1 ≤ U, V ≤ N SAMPLE INPUT 2 5 4 1 1 0 1 1 1 2 1 3 2 4 4 5 3 2 1 1 1 1 2 2 3 SAMPLE OUTPUT YES YES","solution":"def dfs(graph, current, destination, visited, state): if current == destination: return True visited.add(current) for neighbor in graph.get(current, []): if neighbor not in visited and state[neighbor-1] == 1: if dfs(graph, neighbor, destination, visited, state): return True return False def is_path_exists(T, cases): results = [] for i in range(T): N, M = cases[i][0] state = cases[i][1] roads = cases[i][2] if state[0] == 0 or state[N-1] == 0: results.append(\\"NO\\") continue graph = {} for road in roads: U, V = road if U not in graph: graph[U] = [] if V not in graph: graph[V] = [] graph[U].append(V) graph[V].append(U) visited = set() if dfs(graph, 1, N, visited, state): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage: # T = 2 # cases = [ # [(5, 4), [1, 1, 0, 1, 1], [(1, 2), (1, 3), (2, 4), (4, 5)]], # [(3, 2), [1, 1, 1], [(1, 2), (2, 3)]] # ] # print(is_path_exists(T, cases)) # Output: [\'YES\', \'YES\']"},{"question":"Given a list of integers and a set of ranges, calculate the maximum value in the list within each specified range, excluding the highest value provided in the entire list. Specifically, you are given a list `A` of `n` integers and `q` queries. For each query, given a range `[l, r]`, you need to find the maximum element in the sublist `A[l..r]`, excluding the predefined highest value `H` in the entire list `A`. If the sublist does not contain any elements other than `H`, return `-1` for that query. Input The first line contains integers `n` and `q` (1 ≤ n ≤ 200 000, 1 ≤ q ≤ 200 000), representing the number of elements in the list and the number of queries, respectively. The second line contains `n` integers `A1, A2, ..., An` (1 ≤ Ai ≤ 1 000 000), representing the initial list of integers. The third line contains a single integer `H` (1 ≤ H ≤ 1 000 000), representing the highest value to be excluded in any query. Each of the next `q` lines contains two integers `l` and `r` (1 ≤ l ≤ r ≤ n), representing the range for that query. Output Print `q` integers, each representing the result of the corresponding query. If all elements within the range are equal to `H`, print `-1` for that query. Example Input 8 3 3 2 5 6 9 9 5 2 9 2 5 3 7 6 8 Output 6 6 5","solution":"def max_excluding_H(A, H, queries): Given a list of integers A, a value H, and a list of queries, find the maximum values in each range of the queries excluding H. results = [] for l, r in queries: filtered_values = [x for x in A[l-1:r] if x != H] if filtered_values: results.append(max(filtered_values)) else: results.append(-1) return results"},{"question":"Lucky is fascinated by palindromes. Given a string, a palindrome is a sequence of characters that reads the same backward as forward. Lucky wants to find the longest palindromic substring in a given string. Your task is to help Lucky by finding the longest palindromic substring within the string. Input The first line contains a single string s (1 ≤ |s| ≤ 1000), where |s| is the length of the string. The string consists of lowercase English letters only. Output Print one line containing the longest palindromic substring. If there are multiple answers, print any of them. Examples Input babad Output bab Input cbbd Output bb Note In the first example, \\"bab\\" is a palindrome and is the longest one, \\"aba\\" is another valid answer. In the second example, the longest palindromic substring is \\"bb\\".","solution":"def longest_palindromic_substring(s): Find the longest palindromic substring in the given string. :param s: Input string :type s: str :return: Longest palindromic substring :rtype: str n = len(s) if n == 0: return \\"\\" # Table to store results of subproblems dp = [[False] * n for _ in range(n)] # All substrings of length 1 are palindromes start = 0 max_length = 1 for i in range(n): dp[i][i] = True # Check for sub-strings of length 2. for i in range(n-1): if s[i] == s[i+1]: dp[i][i+1] = True start = i max_length = 2 # Check for lengths greater than 2 for length in range(3, n + 1): for i in range(n - length + 1): j = i + length - 1 if (s[i] == s[j] and dp[i+1][j-1]): dp[i][j] = True if length > max_length: start = i max_length = length return s[start:start + max_length]"},{"question":"You are given a 2D grid of size n x n filled with numbers from 1 to n^2, inclusive. Your task is to fill each cell of the grid such that each number from 1 to n^2 appears exactly once in the grid, and the following constraints are met: 1. No two adjacent cells (horizontal or vertical) should have consecutive numbers. 2. The fill should follow a spiral ordering starting from the top-left cell and proceeding inwards. Write a function `spiral_grid(n)` that takes an integer `n` (2 ≤ n ≤ 10^3) as input and returns a list of lists representing the n x n grid in the desired spiral fill order. The function signature is: ```python def spiral_grid(n: int) -> List[List[int]]: ``` # Input - The integer `n`. # Output - A list of lists representing the n x n grid filled according to the mentioned constraints and spiral order. # Example ```python spiral_grid(3) ``` Output ``` [ [1, 2, 3], [8, 9, 4], [7, 6, 5] ] ``` # Note In the above example, the numbers from 1 to 9 are filled in a spiral pattern starting from the top-left and proceeding inwards without placing consecutive numbers in adjacent cells. Here\'s a step-by-step illustration of how the grid is filled: 1. Initially, cell (0,0) is filled with 1. 2. Move right to fill cell (0,1) with 2. 3. Move right to fill cell (0,2) with 3. 4. Move down to fill cell (1,2) with 4. 5. Move down to fill cell (2,2) with 5. 6. Move left to fill cell (2,1) with 6. 7. Move left to fill cell (2,0) with 7. 8. Move up to fill cell (1,0) with 8. 9. Finally, fill cell (1,1) with 9 as it completes the spiral from the outer layer inward.","solution":"from typing import List def spiral_grid(n: int) -> List[List[int]]: def is_valid(x, y): return 0 <= x < n and 0 <= y < n and grid[x][y] == 0 directions = [(0,1), (1,0), (0,-1), (-1,0)] grid = [[0]*n for _ in range(n)] x, y = 0, 0 direction = 0 for value in range(1, n*n + 1): grid[x][y] = value nx, ny = x + directions[direction][0], y + directions[direction][1] if not is_valid(nx, ny): direction = (direction + 1) % 4 nx, ny = x + directions[direction][0], y + directions[direction][1] x, y = nx, ny return grid"},{"question":"You are tasked with distributing N candies to K children in such a way that each child gets at least one candy. The number of candies each child gets should be as evenly distributed as possible. Return a list of integers representing the number of candies each child receives in sorted order. Input: The number of cases T. Each of the next T lines contains two integers N and K. Output: For each test case, output a single line with K integers representing the number of candies each child receives in sorted order. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 10^9 1 ≤ K ≤ 1000 SAMPLE INPUT 3 10 3 7 4 15 5 SAMPLE OUTPUT 3 3 4 1 2 2 2 3 3 3 3 3 Explanation: In the first case, you have 10 candies to distribute to 3 children. The best way to divide them is to give each child 3 candies, and then distribute the remaining candy to one of the children. This results in [3, 3, 4]. In the second case, you have 7 candies to distribute to 4 children. The optimal distribution is to give 3 children 2 candies each and 1 child 1 candy. This results in [1, 2, 2, 2]. In the third case, you have 15 candies to distribute to 5 children. The most even distribution is 3 candies for each child. Thus, the result is [3, 3, 3, 3, 3].","solution":"def distribute_candies(T, cases): Distribute N candies to K children as evenly as possible such that each child gets at least one candy. Parameters: T (int): Number of test cases. cases (list of tuples): Each tuple contains two integers N and K. Returns: list of lists: Each inner list contains the number of candies each child receives in sorted order. results = [] for case in cases: N, K = case base = N // K remainder = N % K distribution = [base] * K for i in range(remainder): distribution[i] += 1 distribution.sort() results.append(distribution) return results"},{"question":"John works at a shipping company and he is responsible for optimizing the packing of boxes with different weights. He wants to maximize the total weight of the boxes that can be packed in a truck with a given weight limit. The truck\'s weight limit is defined as Tmax. Each box has a weight, and John can select any subset of these boxes, as long as the total weight does not exceed Tmax. John needs your help to determine the maximum weight of boxes that can be packed in the truck. Input - The first line contains two integers: n (1 ≤ n ≤ 100) - the number of boxes, and Tmax (1 ≤ Tmax ≤ 1000) - the maximum weight the truck can carry. - The second line contains n integers, w1, w2, ..., wn (1 ≤ wi ≤ 1000 for all 1 ≤ i ≤ n), where wi denotes the weight of the i-th box. Output - Print a single integer, the maximum weight of the boxes that can be packed in the truck without exceeding the weight limit. Examples Input 4 10 2 3 4 5 Output 10 Input 5 20 1 2 5 8 10 Output 20 Input 5 50 10 20 30 40 50 Output 50 Note In the first example, taking the boxes with weights 2, 3, and 5 results in the maximum weight of 10 which is within the limit. In the second example, taking all the boxes results in an exact fit within the limit of 20. In the third example, the heaviest box itself (weight 50) exactly fits within the truck\'s weight limit.","solution":"def max_weight_of_boxes(n, Tmax, weights): Returns the maximum weight of boxes that can be packed within Tmax weight limit. # Create a dp array to store maximum weights for each weight limit up to Tmax dp = [0] * (Tmax + 1) # Iterate over each weight for weight in weights: # Update dp array from Tmax to the current weight for j in range(Tmax, weight - 1, -1): dp[j] = max(dp[j], dp[j - weight] + weight) # The maximum weight packed will be at dp[Tmax] return dp[Tmax]"},{"question":"James is a software engineer and is working on a new project that involves managing a list of tasks. Each task has a priority and an estimated duration. He has come up with a few operations to manage this list, and he needs your help to implement them. The list of tasks is initially empty. James will provide you with a series of operations to perform on the list. The operations are as follows: 1. **Add a new task**: Add a task with a given priority and duration to the list. The tasks are added in the order they are received. 2. **Remove a task**: Remove the task with the highest priority from the list. If multiple tasks have the same highest priority, remove the one that was added first. 3. **Get the total duration**: Compute the total duration of tasks in the list. 4. **Get the average priority**: Compute the average priority of tasks in the list. Input The first line contains an integer q (1 ≤ q ≤ 105), the number of operations. The following q lines contain the operations. Each operation is in one of the following formats: 1. \\"1 p d\\" (1 ≤ p ≤ 100, 1 ≤ d ≤ 100) - Add a new task with priority p and duration d. 2. \\"2\\" - Remove the task with the highest priority. 3. \\"3\\" - Get the total duration of tasks in the list. 4. \\"4\\" - Get the average priority of tasks in the list. Output For each operation of type 3, output the total duration of tasks in the list. For each operation of type 4, output the average priority of tasks in the list. The average should be printed with a precision of 2 decimal places. If there are no tasks in the list when the operation of type 4 is called, output \\"0.00\\". Examples Input 7 1 5 10 1 3 7 3 4 2 3 4 Output 17 4.00 7 3.00 Input 5 1 5 10 1 5 20 3 2 3 Output 30 20 Note In the first example: - The list of tasks after operations 1 and 2 is [(5, 10), (3, 7)]. - Operation 3 computes the total duration: 10 + 7 = 17. - Operation 4 computes the average priority: (5+3)/2 = 4.00. - Operation 5 removes the task with the highest priority, which is (5, 10). - Operation 6 computes the total duration of the remaining task: 7. - Operation 7 computes the average priority: 3.00. In the second example: - The list of tasks after operations 1 and 2 is [(5, 10), (5, 20)]. - Operation 3 computes the total duration: 10 + 20 = 30. - Operation 4 removes the first task with the highest priority, which is (5, 10). - Operation 5 computes the total duration of the remaining task: 20.","solution":"from collections import deque class TaskManager: def __init__(self): self.tasks = deque() def add_task(self, priority, duration): self.tasks.append((priority, duration)) def remove_task(self): if self.tasks: max_priority = max(self.tasks, key=lambda x: x[0])[0] for i, task in enumerate(self.tasks): if task[0] == max_priority: self.tasks.remove(task) break def get_total_duration(self): return sum(task[1] for task in self.tasks) def get_average_priority(self): if not self.tasks: return 0.00 total_priority = sum(task[0] for task in self.tasks) return round(total_priority / len(self.tasks), 2) import sys def main(): input = sys.stdin.read data = input().split() q = int(data[0]) manager = TaskManager() output = [] index = 1 for _ in range(q): operation = int(data[index]) if operation == 1: p = int(data[index + 1]) d = int(data[index + 2]) manager.add_task(p, d) index += 3 elif operation == 2: manager.remove_task() index += 1 elif operation == 3: output.append(manager.get_total_duration()) index += 1 elif operation == 4: output.append(f\\"{manager.get_average_priority():.2f}\\") index += 1 print(\\"n\\".join(map(str, output))) if __name__ == \\"__main__\\": main()"},{"question":"You are a software engineer working on an autonomous transportation system. The system needs to analyze various paths through a city represented as a grid, taking into account obstacles that may block certain paths. The goal is to find out if there\'s a valid way from the starting point at the top-left corner (0,0) to the destination at the bottom-right corner (n-1, m-1). The grid is represented by an n x m matrix of integers, where: - 0 represents an open path - 1 represents an obstacle that cannot be passed. Your task is to determine for each test case whether there is a valid path from the starting point to the destination, moving only up, down, left, or right. Input The first line contains one integer t (1 ≤ t ≤ 100) — the number of test cases. For each test case, the first line contains two space-separated integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. Each of the next n lines contains m space-separated integers that describe the grid for the test case. Output For each test case, print \\"YES\\" if there is a valid path from the top-left corner to the bottom-right corner. Otherwise, print \\"NO\\". Example Input 2 3 3 0 0 0 0 1 0 0 0 0 3 3 0 1 0 1 1 0 0 0 0 Output YES NO","solution":"from collections import deque def is_valid_path(grid, n, m): Determine if there is a valid path from the top-left to the bottom-right of the grid. if grid[0][0] == 1 or grid[n-1][m-1] == 1: return False directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0)]) visited = set([(0, 0)]) while queue: x, y = queue.popleft() if x == n - 1 and y == m - 1: return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return False def valid_paths(test_cases): Process multiple test cases to determine valid paths in each grid. results = [] for n, m, grid in test_cases: results.append(\\"YES\\" if is_valid_path(grid, n, m) else \\"NO\\") return results"},{"question":"Athena is an avid gardener and has been keeping a log of the daily growth rate of her plants in millimeters per day (mm/day). She wants to know the cumulative growth of each plant over a given period of days. She has recorded the growth rates for multiple plants and now needs to calculate the total growth for each one over a specified time span. Since she is busy taking care of her plants, she needs your help with the calculations. Input The input will consist of multiple test cases. The first line will contain the number of test cases, T. Each test case consists of two parts: - The first line contains an integer N, the number of plants. - The second line contains N space-separated integers representing the daily growth rates (in mm/day) of the N plants. - The third line contains an integer D, representing the number of days over which the cumulative growth is to be calculated. Output For each test case, print N space-separated integers representing the total growth of each plant over the period of D days. Constraints 1 ≤ T ≤ 5 1 ≤ N ≤ 10^5 1 ≤ growth rate ≤ 100 1 ≤ D ≤ 365 SAMPLE INPUT 2 3 5 3 2 7 2 10 15 10 SAMPLE OUTPUT 35 21 14 100 150","solution":"def cumulative_growth(test_cases): results = [] for case in test_cases: N = case[\'N\'] growth_rates = case[\'growth_rates\'] D = case[\'D\'] total_growth = [rate * D for rate in growth_rates] results.append(total_growth) return results"},{"question":"A software engineer at a robotics company is designing a simulation for autonomous robots. Each robot operates in a 2D rectangular grid with `m` rows and `n` columns. The robot can move to any of its 4 neighboring cells (up, down, left, right) unless it is blocked by an obstacle or the edge of the grid. To perform a specific task, the robot must find the shortest path from a starting cell to a target cell in the grid. You are to write a program that helps the robot determine the length of the shortest path from the starting position to the target position, accounting for any obstacles that might be in the grid. # Constraints * 1 ≤ m, n ≤ 100 * The grid may contain the following values: * 0: Empty cell (no obstacles) * 1: Cell with an obstacle * The starting and target cells are guaranteed to be empty (i.e., they will not contain an obstacle). # Input The input consists of multiple datasets. Each dataset is formatted as follows: * The first line contains two integers `m` and `n` representing the number of rows and columns of the grid, respectively. * The next `m` lines each contain `n` integers describing the grid, which can be `0` (empty) or `1` (obstacle). * The next line contains two integers `sx` and `sy`, representing the row and column indices of the starting cell. * The final line contains two integers `tx` and `ty`, representing the row and column indices of the target cell. When `m` and `n` are both `0`, it indicates the end of input. # Output For each dataset, output the minimum number of steps required to move from the starting cell to the target cell on one line. If there is no possible path, output `-1`. # Example Input ``` 5 5 0 0 0 0 0 0 1 1 1 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 4 4 5 5 0 1 1 0 0 0 1 0 1 0 0 1 0 1 0 0 0 0 1 0 0 1 1 0 0 4 0 0 4 0 0 ``` Output ``` 8 -1 ```","solution":"from collections import deque def shortest_path(m, n, grid, sx, sy, tx, ty): if not grid or grid[sx][sy] == 1 or grid[tx][ty] == 1: return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(sx, sy, 0)]) visited = set((sx, sy)) while queue: x, y, steps = queue.popleft() if (x, y) == (tx, ty): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1"},{"question":"In a university, there is a long hallway with n lockers, each numbered from 1 to n. The university janitor performs a series of operations on these lockers. Initially, all the lockers are closed. The janitor performs n operations in the following manner: 1. In the 1st operation, he toggles every 1st locker (he opens all lockers). 2. In the 2nd operation, he toggles every 2nd locker (he closes every even-numbered locker). 3. In the 3rd operation, he toggles every 3rd locker. 4. This process continues until he performs the nth operation, toggling only the nth locker. Determine which lockers are open after performing all n operations. Input The first line contains an integer T, the number of test cases. Each of the next T lines contains a single integer n, the number of lockers. Output For each test case, output a line containing all the locker numbers that are open after performing all the operations, separated by a space. SAMPLE INPUT 2 3 5 SAMPLE OUTPUT 1 1 4 Explanation In the first test case, there are 3 lockers: - Operation 1: toggles lockers [1, 2, 3] -> open [1, 2, 3] - Operation 2: toggles lockers [2] -> open [1, 3] - Operation 3: toggles lockers [3] -> open [1] In the second test case, there are 5 lockers: - Operation 1: toggles lockers [1, 2, 3, 4, 5] -> open [1, 2, 3, 4, 5] - Operation 2: toggles lockers [2, 4] -> open [1, 3, 5] - Operation 3: toggles lockers [3] -> open [1, 3, 4] - Operation 4: toggles lockers [4] -> open [1, 3] - Operation 5: toggles lockers [5] -> open [1, 3, 5] Thus, locker 1 and 4 are open in the first test case and lockers 1, 3, and 5 are open in the second test case.","solution":"def open_lockers(t, test_cases): Determine which lockers are open after performing all operations for each test case. Args: t: int - Number of test cases. test_cases: List[int] - List of \'n\' values, each representing the number of lockers. Returns: List[str] - List of space-separated strings of open locker numbers for each test case. results = [] for n in test_cases: open_locker_numbers = [] for i in range(1, n + 1): if (i ** 0.5).is_integer(): open_locker_numbers.append(i) results.append(\\" \\".join(map(str, open_locker_numbers))) return results"},{"question":"You are a player in a complex card game where the aim is to form specific patterns with your cards. Each card has a suit (\'Hearts\', \'Diamonds\', \'Clubs\', \'Spades\') and a rank (2 to 10, J, Q, K, A). Given a list of your cards and your opponent\'s cards, you need to determine if you can win the game by swapping exactly one card of yours with exactly one card of your opponent\'s. Winning the game means forming a \\"full house\\" with your cards: a combination of three cards of one rank and two cards of another rank, such as three 7s and two Kings. Input The input is given in the following format: Your_cards Opponent\'s_cards Where: - Your_cards and Opponent\'s_cards each contain exactly 5 cards. - Each card is represented by a rank (one of 2 to 10, J, Q, K, A) followed by a suit (one of H, D, C, S). - Cards within each list are separated by a space. Output Output \\"YES\\" if it is possible to win the game by swapping exactly one card. Otherwise, output \\"NO\\". Sample Input 1 2H 3D 4S 8C 3C 6D 9H 10C JD AK Sample Output 1 NO Sample Input 2 4H 4C 7S 7C 8H 7D 2S 4S KS KD Sample Output 2 YES Sample Input 3 2C 2D 2S 3C 3D 4H 4D 4S 5C 5D Sample Output 3 YES Explanation In Sample Input 1, no single swap can result in a \\"full house\\". In Sample Input 2, swapping one of your 4s with your opponent\'s 7 results in a full house (4H 4C 4S 7C 7D). In Sample Input 3, swapping the three of clubs with any of your opponent\'s fours results in a full house (2C 2D 2S 4S 4D).","solution":"from collections import Counter def can_win_by_swapping(your_cards, opponent_cards): def card_rank(card): return card[:-1] your_ranks = [card_rank(card) for card in your_cards] opponent_ranks = [card_rank(card) for card in opponent_cards] your_count = Counter(your_ranks) opponent_count = Counter(opponent_ranks) def has_full_house(counts): values = list(counts.values()) return sorted(values) == [2, 3] if has_full_house(your_count): return \\"YES\\" for i in range(5): for j in range(5): # Try swapping your_cards[i] with opponent_cards[j] your_count_swap = your_count.copy() opponent_count_swap = opponent_count.copy() your_card_rank = your_ranks[i] opponent_card_rank = opponent_ranks[j] your_count_swap[your_card_rank] -= 1 if your_count_swap[your_card_rank] == 0: del your_count_swap[your_card_rank] your_count_swap[opponent_card_rank] += 1 opponent_count_swap[opponent_card_rank] -= 1 if opponent_count_swap[opponent_card_rank] == 0: del opponent_count_swap[opponent_card_rank] opponent_count_swap[your_card_rank] += 1 if has_full_house(your_count_swap): return \\"YES\\" return \\"NO\\""},{"question":"A popular online game company is hosting a coding competition. In one of the challenges, players are given the task to find all prime numbers within a specified range. The company wants to ensure that the contestants can write efficient code to solve this problem. You are given two integers (A) and (B) (1 ≤ A ≤ B ≤ 10^6). Your task is to find and print all prime numbers that lie between (A) and (B) (inclusive). Recall that a prime number is a number greater than 1 that has no positive divisors other than 1 and itself. Please write a function `find_primes(A, B)` that returns a list of prime numbers in the range ([A, B]). Also, write the rest of the code so that it reads the input values, calls the function, and prints each prime number on a new line. # Input Two integers (A) and (B) on a single line separated by a space. # Output Print all prime numbers between (A) and (B) (inclusive) on separate lines. # Example Input ``` 10 20 ``` Output ``` 11 13 17 19 ``` # Hints 1. Make use of the Sieve of Eratosthenes to precompute prime numbers up to the largest possible value of (B). 2. Use the precomputation to efficiently find primes in the given range ([A, B]). # Constraints - (1 ≤ A ≤ B ≤ 10^6)","solution":"def find_primes(A, B): Returns a list of prime numbers between A and B (inclusive). def sieve(n): Helper function to perform the Sieve of Eratosthenes is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False # 0 and 1 are not prime numbers p = 2 while (p * p <= n): if (is_prime[p] == True): # Update all multiples of p to not prime for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 return is_prime max_limit = B is_prime = sieve(max_limit) return [num for num in range(A, B + 1) if is_prime[num]] if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split() A = int(data[0]) B = int(data[1]) primes = find_primes(A, B) for prime in primes: print(prime)"},{"question":"In a world of RPG games, players are often confronted with dungeons containing monsters that they must defeat to advance. Each monster has a certain health value, and players have different weapons with damage values. Each weapon can be used only once per dungeon run, and players must choose effectively to defeat as many monsters as possible. Given the health values of the monsters and the damage values of the weapons, determine the maximum number of monsters a player can defeat in a single dungeon run. Constraints: 1 ≤ t ≤ 10 1 ≤ n, m ≤ 1000 1 ≤ health[i], damage[j] ≤ 10^9 Where t is the number of test cases, n is the number of monsters, and m is the number of weapons. health[i] is the health value of the i-th monster and damage[j] is the damage value of the j-th weapon. Input: The first line contains an integer t, the number of test cases. For each test case: - The first line contains two integers n and m, the number of monsters and the number of weapons. - The second line contains n integers, the health values of the monsters. - The third line contains m integers, the damage values of the weapons. Output: For each test case, output the maximum number of monsters that can be defeated. SAMPLE INPUT 1 5 5 100 200 150 300 250 150 150 200 100 250 SAMPLE OUTPUT 4 Explanation: For the given sample input, we can defeat: - The first monster with health 100 using the weapon with damage 150. - The second monster with health 200 using the weapon with damage 200. - The third monster with health 150 using the weapon with damage 150. - The fifth monster with health 250 using the weapon with damage 250. This accounts for 4 monsters in total. The fourth monster with health 300 cannot be defeated as there is no remaining weapon with damage > 300.","solution":"def max_monsters_defeated(t, cases): results = [] for i in range(t): n, m = cases[i][0] monsters = cases[i][1] weapons = cases[i][2] monsters.sort() weapons.sort() defeated = 0 j = 0 # Pointer for weapons for health in monsters: while j < m and weapons[j] < health: j += 1 if j < m: defeated += 1 j += 1 results.append(defeated) return results"},{"question":"In a faraway land, there is a kingdom with n cities connected by m bidirectional roads. Each road connects two distinct cities, and no two cities are directly connected by more than one road. Additionally, it is guaranteed that the road network forms a tree (i.e., there are no cycles, and all cities are reachable from any other city). The king has decided to host a grand festival in one of the cities, and he needs to choose a city that minimizes the maximum travel time from any city to the festival city. The travel time between any two cities is defined as the number of roads on the shortest path connecting them. Write a program to determine the best city for hosting the festival. The best city is defined as the city that minimizes the maximum distance to all other cities. Input The first line of input contains a single integer T (1 ≤ T ≤ 100) — the number of test cases. Each test case starts with a line containing two integers n and m (2 ≤ n ≤ 105, m = n - 1) — the number of cities and the number of roads. The following m lines contain two integers xj and yj (1 ≤ xj, yj ≤ n, xj ≠ yj) — representing a bidirectional road connecting city xj and city yj. Output For each test case, output a single integer — the city that should host the festival. If there are multiple possible answers, output the smallest one. Example Input 2 6 5 1 2 1 3 3 4 3 5 4 6 3 2 1 2 1 3 Output 3 1 Explanation In the first test case, hosting the festival at city 3 results in a maximum travel time of 2 roads from any city to city 3. No other city has a smaller maximum travel time. In the second test case, cities 1, 2, and 3 all result in a maximum travel time of 1 road from any city to the festival city. The smallest city among them is city 1.","solution":"from collections import deque, defaultdict import sys def bfs(farthest_node, graph, n): dist = [-1] * (n + 1) queue = deque([farthest_node]) dist[farthest_node] = 0 max_dist = 0 furthest_node = farthest_node while queue: node = queue.popleft() for neighbor in graph[node]: if dist[neighbor] == -1: dist[neighbor] = dist[node] + 1 queue.append(neighbor) if dist[neighbor] > max_dist: max_dist = dist[neighbor] furthest_node = neighbor return furthest_node, max_dist, dist def find_best_city(n, roads): if n == 2: return 1 graph = defaultdict(list) for x, y in roads: graph[x].append(y) graph[y].append(x) # Run BFS to find the farthest node from an arbitrary node (node 1 here) farthest_node, _, _ = bfs(1, graph, n) # Run BFS from the farthest node found to get one end of the diameter opposite, max_dist, dist_from_first_end = bfs(farthest_node, graph, n) # Perform BFS from the opposite end to find all distances _, _, dist_from_second_end = bfs(opposite, graph, n) # The best city is the one that is the middle of the diameter of the tree min_max_dist = sys.maxsize best_city = -1 for city in range(1, n+1): max_dist_city = max(dist_from_first_end[city], dist_from_second_end[city]) if max_dist_city < min_max_dist: min_max_dist = max_dist_city best_city = city elif max_dist_city == min_max_dist: best_city = min(best_city, city) return best_city def best_city_to_host_festival(T, cases): results = [] for case in cases: n, roads = case results.append(find_best_city(n, roads)) return results"},{"question":"You are given a string s consisting of lowercase Latin letters and you need to find out if it is possible to rearrange the string such that no two adjacent characters are the same. If possible, return one such rearrangement, otherwise, return \\"Not possible\\". Input The input consists of a single string s (1 ≤ |s| ≤ 1000). Output If a valid rearrangement exists, output one such rearrangement of the string where no two adjacent characters are the same. If no such arrangement exists, output \\"Not possible\\". Examples Input aab Output aba Input aaabb Output ababa Input aaab Output Not possible Note In the first example, the string \\"aab\\" can be rearranged to \\"aba\\". In the second example, \\"aaabb\\" can be rearranged to \\"ababa\\". In the third example, \\"aaab\\" cannot be rearranged to avoid two adjacent \'a\'s. Thus, it is not possible to rearrange the string in the desired manner.","solution":"from collections import Counter import heapq def rearrange_string(s): Rearranges the input string so that no two adjacent characters are the same. If such rearrangement is not possible, returns \\"Not possible\\". if not s: return \\"Not possible\\" # Count the frequency of each character freq_map = Counter(s) max_heap = [] # Create a max heap based on the frequency of characters for char, freq in freq_map.items(): heapq.heappush(max_heap, (-freq, char)) prev_char, prev_freq = None, 0 result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) # Add the previous character back if it still has a remaining frequency if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) # Decrease the freq and set the previous char to current char prev_char = char prev_freq = freq + 1 # Since we used one instance of char rearranged_string = \'\'.join(result) # If the final rearranged string\'s length is not equal to the input string\'s length, return \\"Not possible\\" return rearranged_string if len(rearranged_string) == len(s) else \\"Not possible\\""},{"question":"Evelyn is a computer scientist working on string manipulation algorithms. She has been given the task of finding the longest palindromic substring in a given string. A palindromic string reads the same backward as forward, for example, \\"madam\\" or \\"racecar\\". Write a function that receives a single string s and returns the longest palindromic substring in s. If there are multiple longest palindromic substrings of the same length, return any one of them. Function Signature: ```python def longest_palindromic_substring(s: str) -> str: pass ``` Input The input consists of a single string s (1 ≤ |s| ≤ 1000), where |s| is the length of the given string. The string s consists only of printable ASCII characters. Output The function should return a single string, which is the longest palindromic substring of the input string s. Example Input ``` babad ``` Output ``` bab ``` or ``` aba ``` Input ``` cbbd ``` Output ``` bb ```","solution":"def longest_palindromic_substring(s: str) -> str: Returns the longest palindromic substring in s. if len(s) == 0: return \\"\\" start, max_length = 0, 1 for i in range(len(s)): # Check for odd length palindromes left, right = i, i while left >= 0 and right < len(s) and s[left] == s[right]: current_length = right - left + 1 if current_length > max_length: start = left max_length = current_length left -= 1 right += 1 # Check for even length palindromes left, right = i, i + 1 while left >= 0 and right < len(s) and s[left] == s[right]: current_length = right - left + 1 if current_length > max_length: start = left max_length = current_length left -= 1 right += 1 return s[start:start + max_length]"},{"question":"You are organizing a sequence of programming contests. Each contest has a unique numeric label, and the rules for labeling these contests are as follows: - Contests from 1 to 500 are labeled as `C001`, `C002`, ..., `C500`. - Contests from 501 to 1000 are labeled as `CC001`, `CC002`, ..., `CC500`. Given an integer M between 1 and 1000 (inclusive), print the correct label for the M-th contest. Constraints * 1 leq M leq 1000 * M is an integer. Input Input is given from Standard Input in the following format: M Output Print the correct label for the M-th contest. Examples Input 250 Output C250 Input 501 Output CC001 Input 750 Output CC250","solution":"def get_contest_label(M): Given an integer M between 1 and 1000 (inclusive), return the correct label for the M-th contest according to the specified rules. if 1 <= M <= 500: return f\'C{M:03}\' # Format as \'C\' followed by a three-digit number. elif 501 <= M <= 1000: return f\'CC{M - 500:03}\' # Format as \'CC\' followed by a three-digit number. else: raise ValueError(\\"M must be between 1 and 1000 inclusive.\\")"},{"question":"You are given a string consisting of characters \'A\' and \'B\'. You can perform a series of operations on this string. In each operation, you can take any substring that consists of one or more consecutive \'A\'s and replace it with a single \'A\', or take any substring that consists of one or more consecutive \'B\'s and replace it with a single \'B\'. You want to minimize the length of the string after performing any number of such operations. Write a program that takes an integer `t` (1 ≤ t ≤ 1000), which is the number of test cases, and for each test case, it takes a string `s` (1 ≤ |s| ≤ 2 * 10^5) consisting only of characters \'A\' and \'B\', and outputs the minimum possible length of the string after performing the operations optimally. Input The first line contains a single integer `t`. The next `t` lines contain test cases — one per line. Each line contains a string `s` composed of only characters \'A\' and \'B\'. Output For each test case, print a single integer — the minimum possible length of the string after performing the operations. Example Input 3 AAABBB AABBA AB Output 2 3 2 Note In the first test case, you can replace the substring \\"AAA\\" with \'A\' and \\"BBB\\" with \'B\', transforming the string \\"AAABBB\\" into \\"AB\\", which has length 2. In the second test case, you can replace \\"AA\\" with \'A\' and \\"BB\\" with \'B\', but you cannot reduce the length of the substring \\"AB\\" or \\"BA\\". Therefore, the minimum length of the string would be 3 (\\"ABA\\"). In the third test case, the string is already in its minimal form, so the length remains 2.","solution":"def minimize_string_length(t, test_cases): results = [] for s in test_cases: if not s: results.append(0) continue min_length = 1 for i in range(1, len(s)): if s[i] != s[i - 1]: min_length += 1 results.append(min_length) return results if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split() t = int(data[0]) test_cases = data[1:t + 1] results = minimize_string_length(t, test_cases) for result in results: print(result)"},{"question":"You are given a text consisting of words separated by spaces. Some of these words may be enclosed in parentheses, which should be considered as part of the word. The task is to count the frequency of each word in the text, ignoring case sensitivity, and print the words along with their frequencies in descending order of frequency. If two words have the same frequency, they should be printed in lexicographical order. Write a function `word_frequency(text: str) -> List[Tuple[str, int]]`: - `text` (string): A string of words separated by spaces. Words may include alphabetic characters and parentheses. The function should return a list of tuples, where each tuple consists of a word and its frequency, sorted as described. **Input** Your function will receive a single argument: - `text` (string): The text in which to count word frequencies. **Output** The function should return a list of tuples: - Each tuple should contain a word (string) and its frequency (integer), sorted by frequency in descending order. If frequencies are the same, sort the words lexicographically. **Example** ```python print(word_frequency(\\"Hello world Hello (world) hello\\")) # Output: [(\'hello\', 3), (\'world\', 2)] print(word_frequency(\\"This is a test. This is only a test.\\")) # Output: [(\'a\', 2), (\'is\', 2), (\'test\', 2), (\'this\', 2), (\'only\', 1)] ``` **Notes** - The function should ignore case sensitivity, treating \\"Hello\\", \\"hello\\", and \\"HELLO\\" as the same word. - Words enclosed in parentheses should be considered as part of the word. - Only alphabetic characters and parentheses should be treated as part of words.","solution":"import re from collections import Counter from typing import List, Tuple def word_frequency(text: str) -> List[Tuple[str, int]]: # Convert to lowercase to ignore case sensitivity text = text.lower() # Use regex to find words including those with parentheses words = re.findall(r\'b(?[a-z]+)?b\', text) # Count the frequencies of each word word_count = Counter(words) # Sort primarily by frequency (in descending order), then lexicographically sorted_word_count = sorted(word_count.items(), key=lambda x: (-x[1], x[0])) return sorted_word_count"},{"question":"A famous scientist is developing a groundbreaking algorithm and needs your assistance. The complex algorithm is divided into several smaller segments, where each segment is represented by a sequence of instructions. Each instruction in the sequence is marked by its execution time in seconds. The segments are executed sequentially, and each segment begins at a fixed start time, strictly after the previous segment has finished. The scientist wants to analyze the total execution time of each segment to determine which segment is the most time-consuming. You are provided with the execution times of the instructions for different segments. Your task is to compute the total execution time for each segment and identify the segment with the highest total execution time. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of segments. The following n lines describe the segments. Each segment\'s description starts with an integer m (1 ≤ m ≤ 100) — the number of instructions in the segment, followed by m integers t_1, t_2, ..., t_m (1 ≤ t_i ≤ 10^4) — the execution times of the instructions in the segment. Output Output a single line containing two integers: the 1-based index of the segment with the highest total execution time and the total execution time of that segment. If there are multiple segments with the same highest total execution time, output the smallest index. Examples Input 3 4 2 3 1 5 3 10 3 7 5 1 2 3 4 5 Output 3 15 Input 2 2 1000 2000 4 400 300 200 100 Output 1 3000 Note In the first example, the total execution times for the segments are: - Segment 1: 2 + 3 + 1 + 5 = 11 - Segment 2: 10 + 3 + 7 = 20 - Segment 3: 1 + 2 + 3 + 4 + 5 = 15 The segment with the highest total execution time is the second segment with a total time of 20 seconds. In the second example, the total execution times for the segments are: - Segment 1: 1000 + 2000 = 3000 - Segment 2: 400 + 300 + 200 + 100 = 1000 The segment with the highest total execution time is the first segment with a total time of 3000 seconds.","solution":"def find_max_execution_segment(n, segments): max_time = 0 max_index = 0 for i in range(n): total_time = sum(segments[i][1:]) if total_time > max_time: max_time = total_time max_index = i + 1 return max_index, max_time # Example usage: # n = 2 # segments = [ # [2, 1000, 2000], # [4, 400, 300, 200, 100] # ] # print(find_max_execution_segment(n, segments)) # Output: (1, 3000)"},{"question":"Liam is practicing for an upcoming computer science competition and has encountered a problem that involves balancing parenthesis. He needs to count the number of ways to correctly place brackets around a sequence of letters such that the sequence of letters is not altered. A sequence is said to be correctly bracketed if: 1. Every opening bracket \'(\' has a corresponding closing bracket \')\'. 2. Opening and closing brackets are correctly nested. Using his programming skills, Liam decided to create a function to evaluate the number of valid bracket sequences for a given number of pairs. Make a program to calculate the number of valid bracket sequences given the number of pairs N. Since the answer can be very large, return the result modulo 1,000,000,007. Input The input is given in the following format: N The input line contains the number of pairs N (1 leq N leq 1000). Output Output the number of valid bracket sequences in a line. Examples Input 3 Output 5 Input 4 Output 14","solution":"def count_valid_bracket_sequences(n): Returns the number of valid bracket sequences for a given number of pairs n. The result is modulo 1,000,000,007. MOD = 1_000_000_007 def catalan_number(n): # Base case if n == 0: return 1 # Table to store results of subproblems dp = [0] * (n + 1) # Initialize first number in the table dp[0] = 1 for i in range(1, n + 1): dp[i] = 0 for j in range(i): dp[i] = (dp[i] + dp[j] * dp[i - j - 1]) % MOD return dp[n] return catalan_number(n)"},{"question":"XYZ Corporation is organizing a coding hackathon. They want to form review committees such that each committee has an equal number of participants and no one is left out. Each committee will have participants with the same skill level to ensure fair judgment. You are given an array ‘B’ consisting of skill levels of the participants. Assuming a committee can be formed of any possible size, help XYZ Corporation determine the size of the largest possible committee. Input The first line consists of S: the number of test cases Each test case starts with a number M: denoting the number of participants in the hackathon. The next line consists of M space-separated natural numbers giving the skill level of the ith participant. Output For each test case, output only one integer, the size of the largest possible committee. Answer for each test case should be printed in a new line. Constraints 1 ≤ S ≤ 10000 1 ≤ M ≤ 1000 1 ≤ B[i] ≤ 100000 Example Input: 2 4 2 4 6 8 5 5 10 15 20 25 Output: 1 5","solution":"def largest_possible_committee_size(S, test_cases): Determines the size of the largest possible committee for each test case. Args: S (int): Number of test cases. test_cases (list of tuples): Each tuple contains an integer M and a list of M integers representing the skill levels. Returns: list: List of integers representing the size of the largest possible committee for each test case. def gcd(a, b): while b: a, b = b, a % b return a results = [] for M, skill_levels in test_cases: if M == 1: results.append(1) continue # Start with the GCD of the first two elements current_gcd = gcd(skill_levels[0], skill_levels[1]) # Compute GCD of the entire list for i in range(2, M): current_gcd = gcd(current_gcd, skill_levels[i]) if current_gcd == 1: break results.append(current_gcd) return results"},{"question":"Alex loves collecting rare stamps. He often arranges his stamps in a grand exhibition for people to admire. This time, Alex has decided to reorganize his stamp collection into several albums. Each album can hold stamps in a particular pattern consisting of either rows of the same stamps or a single row with different stamps, depending on the formation rules that he sets. Alex has N different types of stamps in his collection, and each type has a given number of stamps. He desires that each album exactly follows one of two possible formations: 1. All rows in the album must consist of the same type of stamps. 2. A single row in the album must contain one stamp of each type (if some types have run out, the row can be filled partially). Alex wants to know the minimum number of albums he needs to organize his entire collection if he can reuse the same stamps in different albums according to the rules mentioned above. Input The first line of the input contains a single integer T denoting the number of test cases. This is followed by T test cases. The first line of each test case contains a single integer N denoting the number of different types of stamps Alex has in his collection. The next line of each test case contains N space-separated integers denoting the number of stamps of each type. Output For each of the T test cases, output a single line - the minimum number of albums required to organize all of Alex\'s stamps. Constraints 1 <= T <= 10 1 <= N <= 10^5 1 <= Number of stamps of a type <= 10^5 Scoring Example Input 2 3 2 2 2 4 4 1 2 3 Output 2 5 Explanation For test 1, Alex can use the first formation to create 2 albums each containing a single row with 1 stamp of each type, or he can also use other combinations 2 albums are needed in any case. For test 2, one possible arrangement is: Album 1: 1 stamp of each type (4 stamps total) Album 2: 1 stamp of each of the first three types (3 stamps total) Album 3: 1 stamp of the first type Album 4: 2 stamps of the first type Album 5: 1 stamp of the fourth type Thus, a minimum of 5 albums is needed.","solution":"def min_albums_required(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] stamps = test_cases[i][1:] max_stamps = max(stamps) # The number of albums will at least be the maximum count of any type of stamp results.append(max_stamps) return results"},{"question":"Given an array of integers representing the heights of buildings, you are standing on the left and want to see all the buildings from the left-hand side. A building is visible if all the previous buildings (to the left) are shorter than it. Write a function `visible_buildings` that determines the number of buildings that are visible when viewed from the left side. Function Signature: ```python def visible_buildings(buildings: List[int]) -> int: pass ``` **Input** - A single line of input containing space-separated integers `buildings`, where `1 <= len(buildings) <= 10^5` and `1 <= buildings[i] <= 10^9`. **Output** - A single integer that is the number of buildings visible from the left. **Example** **Input** ``` 3 7 8 3 6 1 ``` **Output** ``` 3 ``` **Explanation** In the given example, the heights of the buildings are `[3, 7, 8, 3, 6, 1]`. When viewed from the left: - The first building (height 3) is visible since there are no buildings to its left. - The second building (height 7) is visible because 7 > 3. - The third building (height 8) is visible because 8 > 7. - The fourth building (height 3) is not visible because 3 < 8. - The fifth building (height 6) is not visible because 6 < 8. - The sixth building (height 1) is not visible because 1 < 8. So, there are 3 buildings visible from the left.","solution":"from typing import List def visible_buildings(buildings: List[int]) -> int: Determines the number of buildings visible from the left. Args: buildings: List[int] - A list of integers representing the heights of buildings. Returns: int - Number of visible buildings from the left. if not buildings: return 0 max_height_seen = buildings[0] visible_count = 1 for height in buildings[1:]: if height > max_height_seen: visible_count += 1 max_height_seen = height return visible_count"},{"question":"In a faraway kingdom, there lived a peculiar creature known as the \\"Number Phoenix\\". This creature has a list of n distinct integers and enjoys playing a game. The Number Phoenix can choose two integers from the list, erase them, and replace them with their sum. The game continues until only one number remains in the list. Your task is to find the maximum possible number that can remain in the list after repeatedly replacing two numbers with their sum. You are provided with an integer n (2 ≤ n ≤ 10^6) — the number of integers in the list, and the list of n distinct integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the list. Write a function `max_number_after_merging(n, arr)` that takes in the number of integers n and the list of integers arr, and returns the maximum possible number that can remain in the list. # Input: - An integer n (2 ≤ n ≤ 10^6) representing the number of integers in the list. - A list of n distinct integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9). # Output: - Return the maximum possible number that can remain in the list. # Example: ```python max_number_after_merging(3, [1, 2, 3]) ``` Output: ``` 6 ``` Explanation: Initially, the list is [1, 2, 3]. - Merge 1 and 2 to get [3, 3]. - Merge 3 and 3 to get [6]. So, the maximum possible number that can remain in the list is 6. # Constraints: - 2 ≤ n ≤ 10^6 - 1 ≤ a_i ≤ 10^9 # Note: - The list of integers is guaranteed to be distinct. - The function should be efficient in handling up to 10^6 integers.","solution":"def max_number_after_merging(n, arr): Returns the maximum possible number that can remain in the list after repeatedly replacing two numbers with their sum. return sum(arr)"},{"question":"You are working for a company that handles multiple queries from its clients about their products. Your task is to determine how many times a certain query keyword has appeared in the client database. **Input:** The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the number of client queries in the database. The next `n` lines each contain a single string that represents a query made by a client. Each query consists of lowercase English letters and has a length of at most 100 characters. The following line contains an integer `m` (1 ≤ m ≤ 10^5) — the number of query keywords that need to be checked. The following `m` lines each contain a single string representing a keyword. **Output:** For each keyword, print a single integer on a new line — the number of times this keyword appears in the client queries. **Example:** **Input:** 5 apple banana apple banana cherry 3 apple banana mango **Output:** 2 2 0","solution":"def count_query_keywords(n, queries, m, keywords): This function counts how many times each keyword appears in the client queries. :param n: Number of client queries :param queries: List of client queries :param m: Number of keywords to be checked :param keywords: List of keywords to be checked :return: List of counts of each keyword in the queries from collections import Counter # Create a Counter object to count occurrences of each query query_counter = Counter(queries) # For each keyword, get its count from the Counter, return 0 if not found result = [query_counter.get(keyword, 0) for keyword in keywords] return result"},{"question":"In a network security company, analyst Emily is in charge of monitoring the network for any unusual behavior. She needs to identify and report on the number of unique IP addresses accessing the network over a certain period. You\'re tasked to create a program that helps Emily with her job. The program will ingest a sequence of logs, each specifying an IP address and a timestamp. Emily can also make queries about the number of unique IP addresses that accessed the network during specific time intervals. Input The input consists of multiple datasets. The first line of a dataset contains two integers N and Q. N denotes the number of log entries (1 ≤ N ≤ 100,000). Each log entry is given in chronological order with a timestamp in seconds since the epoch, and is unique. Q denotes the number of queries (1 ≤ Q ≤ 100,000). Each of the next N lines contains a log entry in the format: timestamp IP_address Here, timestamp is an integer (0 ≤ timestamp ≤ 1,000,000,000) representing the time of the log entry, and IP_address is a string representing the IP address. Each of the next Q lines contains a query in the format: start_time end_time Here, start_time and end_time are integers (0 ≤ start_time ≤ end_time ≤ 1,000,000,000) representing the time interval for the query. The end of the input is indicated by a line consisting of two zeros separated by a space. Output For each query, print the number of unique IP addresses that accessed the network between start_time and end_time, inclusive, followed by a newline. Example Input 5 3 10 192.168.1.1 20 192.168.1.2 30 192.168.1.3 40 192.168.1.1 50 192.168.1.4 10 30 20 50 0 60 0 0 Output 3 3 4","solution":"def process_logs_and_queries(log_entries, queries): from collections import defaultdict import bisect # Parse log entries into a list of (timestamp, IP_address) tuples logs = [] for entry in log_entries: timestamp, ip = entry.split() logs.append((int(timestamp), ip)) # Dictionary to store unique IPs at each timestamp time_ip_map = defaultdict(set) for timestamp, ip in logs: time_ip_map[timestamp].add(ip) # List of unique timestamps in sorted order timestamps = sorted(time_ip_map.keys()) # Create a dictionary to store cumulative unique IPs up to each timestamp cumulative_unique_ips = {} unique_ips_set = set() for timestamp in timestamps: unique_ips_set.update(time_ip_map[timestamp]) cumulative_unique_ips[timestamp] = len(unique_ips_set) # Process each query results = [] for query in queries: start_time, end_time = map(int, query.split()) # Find the range of relevant timestamps start_idx = bisect.bisect_left(timestamps, start_time) end_idx = bisect.bisect_right(timestamps, end_time) - 1 # Calculate the number of unique IPs in the range if start_idx <= end_idx: if start_idx == 0: unique_ips_count = cumulative_unique_ips[timestamps[end_idx]] else: unique_ips_count = cumulative_unique_ips[timestamps[end_idx]] - cumulative_unique_ips[timestamps[start_idx - 1]] results.append(unique_ips_count) else: results.append(0) return results def collect_input_and_process(): import sys input = sys.stdin.read data = input().splitlines() index = 0 result_output = [] while True: line = data[index] index += 1 N, Q = map(int, line.split()) if N == 0 and Q == 0: break log_entries = [] for _ in range(N): log_entries.append(data[index]) index += 1 queries = [] for _ in range(Q): queries.append(data[index]) index += 1 results = process_logs_and_queries(log_entries, queries) result_output.extend(results) for result in result_output: print(result) if __name__ == \\"__main__\\": collect_input_and_process()"},{"question":"You are given a list of N integers, representing the difficulty levels of different problems. Your goal is to determine the maximum sum of difficulties of a contiguous subarray with length exactly K. Constraints * 1 leq N leq 100 * 1 leq difficulty level leq 1000 * 1 leq K leq N Input Input is given from Standard Input in the following format: ``` N K difficulty_1 difficulty_2 ... difficulty_N ``` Output Print an integer representing the maximum sum of difficulties of a contiguous subarray with length exactly K. Examples Input ``` 5 2 10 20 30 40 50 ``` Output ``` 90 ``` Input ``` 7 3 7 3 -1 -3 5 3 6 7 ``` Output ``` 16 ``` Input ``` 4 4 1 2 3 4 ``` Output ``` 10 ```","solution":"def max_sum_of_subarray_with_length_k(arr, k): Returns the maximum sum of difficulties of a contiguous subarray with length exactly k. :param arr: List[int] - List of integers representing the problem difficulties. :param k: int - Length of the subarray. :return: int - Maximum sum of the contiguous subarray with length exactly k. n = len(arr) if n < k: return 0 # Initialize the sum of the first window of size k max_sum = current_sum = sum(arr[:k]) # Use a sliding window to find the maximum sum of subarray with length exactly k for i in range(k, n): current_sum += arr[i] - arr[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Alex is designing a garden in the shape of a right-angled triangle. The lengths of the two perpendicular sides of the triangle are given as p~text{cm} and q~text{cm}. To make the design more interesting, Alex wants to know the length of the median that is drawn from the right angle to the hypotenuse. The median of a right-angled triangle is defined as the line segment that connects the right-angle vertex to the midpoint of the hypotenuse. Calculate and print the length of this median. Constraints * All values in input are integers. * 1 leq p leq 100 * 1 leq q leq 100 Input Input is given from Standard Input in the following format: ``` p q ``` Output Print the length of the median, in centimeters, with exactly 10 digits after the decimal point. Examples Input ``` 3 4 ``` Output ``` 2.5000000000 ``` Input ``` 6 8 ``` Output ``` 5.0000000000 ``` Input ``` 5 12 ``` Output ``` 6.5000000000 ```","solution":"import math def median_length(p, q): Returns the length of the median drawn from the right angle to the hypotenuse in a right-angled triangle. # Calculate the length of the hypotenuse hypotenuse = math.sqrt(p**2 + q**2) # The length of the median is half the length of the hypotenuse median = hypotenuse / 2 return f\\"{median:.10f}\\""},{"question":"Write a program which prints a right-angle triangle pattern using stars (*) in the following format: * ** *** **** ***** ****** ******* ******** ********* ********** Input No input. Output * ** *** **** ***** ****** ******* ******** ********* ********** Example Input No input Output * ** *** **** ***** ****** ******* ******** ********* **********","solution":"def print_triangle(): Prints a right-angle triangle pattern using stars (*). for i in range(1, 11): print(\'*\' * i)"},{"question":"In a distant land, there is a city that has a grid of streets forming a rectangular layout of size m x n. Each cell in the grid represents a different block of the city, and you are standing at the top-left corner of the grid (cell (1, 1)). You aim to reach the bottom-right corner of the grid (cell (m, n)). You can move either down or right at any point in time. However, some blocks are restricted (blocked), meaning you cannot pass through them. Your task is to determine the number of unique paths from the top-left corner to the bottom-right corner, avoiding the blocked cells. Input - The first line contains two integers m and n — the dimensions of the grid (1 ≤ m, n ≤ 100). - The next m lines contain n characters each (\'0\' or \'1\') representing the grid layout. \'0\' denotes a free block through which you can pass, and \'1\' denotes a blocked block that you cannot pass through. Output - The output should be a single integer, representing the number of unique paths from the top-left corner to the bottom-right corner of the grid. If there is no valid path, output 0. Example Input 3 3 0 0 0 0 1 0 0 0 0 Output 2 Input 2 2 0 1 0 0 Output 1 Note: In the first example, the two unique paths are [(1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3)] and [(1,1) -> (1,2) -> (2,2) -> (3,2) -> (3,3)]. In the second example, the only path is [(1,1) -> (2,1) -> (2,2)].","solution":"def unique_paths_with_obstacles(grid): m = len(grid) n = len(grid[0]) if grid[0][0] == \'1\' or grid[m-1][n-1] == \'1\': return 0 dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == \'1\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1]"},{"question":"Alice and Bob are playing a game with sticks of different lengths. The game starts with n sticks with lengths given in an array. In each turn, they choose a pair of sticks with the same length, remove them from the array, and score a point. The game ends when there are no more pairs of sticks left. Alice and Bob want to maximize their score by making the maximum number of pairs. Write a function that, given an array of integers representing the stick lengths, returns the maximum number of pairs that can be made. # Function Signature ```python def max_pairs(stick_lengths: List[int]) -> int: ``` # Input - An integer array `stick_lengths` (1 ≤ n ≤ 100; 1 ≤ stick_lengths[i] ≤ 1000). # Output - An integer representing the maximum number of pairs that can be made. # Examples ```python max_pairs([1, 2, 1, 2, 3, 3, 4, 2]) # Output: 3 max_pairs([5, 5, 5, 5, 5]) # Output: 2 max_pairs([1, 1, 1, 1, 1, 1, 1, 1]) # Output: 4 max_pairs([1, 2, 3, 4, 5, 6, 7, 8]) # Output: 0 ``` # Notes - You can assume the array will always contain integers. - You need to count how many pairs of sticks of the same length can be made and return that count.","solution":"from typing import List from collections import Counter def max_pairs(stick_lengths: List[int]) -> int: Given an array of integers representing stick lengths, returns the maximum number of pairs that can be made. # Count the frequency of each stick length stick_count = Counter(stick_lengths) # Calculate the number of pairs for each stick length pairs = 0 for count in stick_count.values(): pairs += count // 2 return pairs"},{"question":"Given an array of integers, compute the sum of squares of the elements which are greater than 0. Input - The first line contains an integer n (1 ≤ n ≤ 1000) — the number of elements in the array. - The second line contains n integers a1, a2, ..., an (−1000 ≤ ai ≤ 1000) — the elements of the array. Output - Print a single integer — the sum of squares of the elements which are greater than 0. Examples Input 5 -3 4 1 -5 6 Output 53 Input 4 -1 -2 -3 -4 Output 0 Input 3 2 0 2 Output 8 Explanation In the first example, elements greater than 0 are 4, 1, and 6. Their squares are 16, 1, and 36, and their sum is 53. In the second example, there are no elements greater than 0, so the result is 0. In the third example, elements greater than 0 are 2 and 2. Their squares are 4 and 4, and their sum is 8.","solution":"def sum_of_squares_positive_elements(n, arr): Returns the sum of squares of the elements which are greater than 0. Parameters: n (int): Number of elements in the array. arr (list of int): List of integers. Returns: int: Sum of squares of positive elements. return sum(x**2 for x in arr if x > 0)"},{"question":"Given two strings `s` and `t`, your task is to determine the minimum window (substring) in `s` which contains all the characters present in `t`. If there are multiple such windows, return the smallest one that appears first in `s`. If no such window exists, return an empty string. Note: - If there is a tie (i.e., multiple substrings with the same length), return the first occurring substring. - The order of characters in a substring matters for a match. Input Format: - The first line contains the string `s` (1 ≤ |s| ≤ 10^5). - The second line contains the string `t` (1 ≤ |t| ≤ 10^5). Output: - Print the minimum window in `s` that contains all characters in `t`. If no such window exists, print an empty string. Examples: Input: ``` ADOBECODEBANC ABC ``` Output: ``` BANC ``` Input: ``` A AA ``` Output: ``` ``` Consider edge cases and ensure the solution handles large inputs efficiently. Use sliding window and hash map/dictionary techniques to achieve optimal performance.","solution":"from collections import Counter, defaultdict def min_window(s, t): if not s or not t: return \\"\\" dict_t = Counter(t) required = len(dict_t) l, r = 0, 0 formed = 0 window_counts = defaultdict(int) ans = float(\\"inf\\"), None, None while r < len(s): character = s[r] window_counts[character] += 1 if character in dict_t and window_counts[character] == dict_t[character]: formed += 1 while l <= r and formed == required: character = s[l] if r - l + 1 < ans[0]: ans = (r - l + 1, l, r) window_counts[character] -= 1 if character in dict_t and window_counts[character] < dict_t[character]: formed -= 1 l += 1 r += 1 if ans[0] == float(\\"inf\\"): return \\"\\" else: return s[ans[1]: ans[2] + 1]"},{"question":"Arjun loves to play with numbers and is particularly fascinated by prime numbers. He recently learned about twin primes (pairs of prime numbers that differ by 2). He now wants to identify all the twin primes within a given range and needs your help. Input: The first line contains two integers, L and R, denoting the lower and upper bounds of the range (inclusive). Output: For each pair of twin primes in the range [L, R], output the pair in a new line. Each pair should be in the format `(p1, p2)` where `p1` and `p2` are twin primes and `p1 < p2`. If there are no twin primes in the specified range, output \\"No twin primes found\\". Constraints: 1 ≤ L < R ≤ 5000 SAMPLE INPUT 10 50 SAMPLE OUTPUT (11, 13) (17, 19) (29, 31) (41, 43) Explanation Within the range 10 to 50, the twin primes are (11, 13), (17, 19), (29, 31), and (41, 43). Therefore, these pairs are output, one per line.","solution":"def is_prime(n): Checks if n is a prime number. if n <= 1: return False if n == 2: return True # as 2 is the only even prime number if n % 2 == 0: return False for i in range(3, int(n ** 0.5) + 1, 2): if n % i == 0: return False return True def find_twin_primes(L, R): Finds and returns all twin primes within the range [L, R]. twin_primes = [] for num in range(L, R-1): # Stop at R-1 since we need pairs (num, num+2) if is_prime(num) and is_prime(num + 2): twin_primes.append((num, num + 2)) if not twin_primes: return \\"No twin primes found\\" return twin_primes def format_twin_primes(twin_primes): Formats the twin primes as string output for display purposes. if twin_primes == \\"No twin primes found\\": return twin_primes return \\"n\\".join(f\\"({p1}, {p2})\\" for p1, p2 in twin_primes)"},{"question":"Imagine you are given two strings, `s` and `t`, both consisting solely of lowercase English letters (a-z). Your goal is to determine if `s` is **transformable** into `t` using several operations defined as follows: - You can remove any single character from `s`. - You can insert any single character into `s`. - You can replace any single character in `s` with any other character. Given these operations, you need to find out if `s` can be transformed into `t` such that the total number of operations is minimized. Specifically, you are to determine the minimum number of operations required to transform `s` into `t`. Input - The first line contains a single string `s` (1 ≤ |s| ≤ 1000). - The second line contains a single string `t` (1 ≤ |t| ≤ 1000). Output Print a single integer — the minimum number of operations needed to transform `s` into `t`. Examples Input s: \\"intention\\" t: \\"execution\\" Output 5 Note In the example, transforming \\"intention\\" into \\"execution\\" can be done in the following way: 1. Replace \'i\' with \'e\' (operation 1). 2. Replace \'n\' with \'x\' (operation 2). 3. Insert \'c\' after \'te\' (operation 3). 4. Replace \'t\' with \'u\' (operation 4). 5. Insert \'n\' at the end (operation 5).","solution":"def min_operations(s: str, t: str) -> int: Calculate the minimum number of operations required to transform s into t. m, n = len(s), len(t) # Create a 2D array to store the minimum operations dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the base cases for i in range(m + 1): dp[i][0] = i # Cost of deleting all characters from s for j in range(n + 1): dp[0][j] = j # Cost of inserting all characters from t # Fill dp array for i in range(1, m + 1): for j in range(1, n + 1): if s[i - 1] == t[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], # Delete from s dp[i][j - 1], # Insert into s dp[i - 1][j - 1] # Replace in s ) return dp[m][n]"},{"question":"In a faraway land, there exists a kingdom with a peculiar tradition. The kingdom is divided into several regions, each having its own unique emblem. Once every year, the king organizes a grand parade wherein the emblems from all regions are displayed in a single row. However, the king wants the parade to look as beautiful as possible. The beauty of the parade is determined by the total difference in the heights of the emblems displayed consecutively. Given the heights of the emblems, you need to rearrange them in a way that maximizes the beauty of the parade. Formally, let\'s say there are n emblems with heights h1, h2, ..., hn. The beauty of a parade sequence a1, a2, ..., an is defined as the sum of absolute differences of consecutive emblems: |a1 - a2| + |a2 - a3| + ... + |an-1 - an|. Your task is to find an arrangement of emblems that maximizes this sum. Input The first line contains a single integer n (2 ≤ n ≤ 100) — the number of emblems. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9) — the heights of the emblems. Output Print n integers — heights of the emblems in the order that maximizes the beauty of the parade. Examples Input 4 8 1 4 10 Output 10 1 8 4 Input 3 5 8 12 Output 12 5 8 Note In the first example, the beauty of the parade sequence [10, 1, 8, 4] is |10 - 1| + |1 - 8| + |8 - 4| = 9 + 7 + 4 = 20, which is the maximum possible. In the second example, the beauty of the parade sequence [12, 5, 8] is |12 - 5| + |5 - 8| = 7 + 3 = 10, which is the maximum possible.","solution":"def maximize_beauty(n, heights): Rearranges the heights of emblems to maximize the parade beauty. Args: n : int : number of emblems heights : list : list of heights of emblems Returns: list : a list of heights arranged to maximize the beauty of the parade. heights.sort() result = [] left = 0 right = n - 1 while left <= right: if left == right: result.append(heights[left]) else: result.append(heights[right]) result.append(heights[left]) left += 1 right -= 1 return result"},{"question":"A team is developing a new piece of music software. One feature they want to include is the ability to generate and analyze sequences of notes for certain properties. The software must be able to determine the longest subsequence of identical notes that appear consecutively in a given sequence. Your task is to help them implement this feature. The notes are represented as letters from \'A\' to \'G\'. Write a program that takes a sequence of notes and determines the length of the longest consecutive subsequence of identical notes. # Input The input consists of a single string `s` (1 ≤ |s| ≤ 10^6) which represents the sequence of notes. Each character in the string is one of the letters \'A\', \'B\', \'C\', \'D\', \'E\', \'F\', or \'G\'. # Output Output a single integer — the length of the longest consecutive subsequence of identical notes. # Examples Input ``` AABBBCCDAA ``` Output ``` 3 ``` Input ``` ABCDEFG ``` Output ``` 1 ``` Input ``` GGGGGAABBCCCCDDDDEEEFFF ``` Output ``` 5 ``` # Explanation In the first example, the longest consecutive subsequence of identical notes is \\"BBB\\", which has a length of 3. In the second example, all notes are distinct and thus any subsequence of identical notes has a length of 1. In the third example, the longest consecutive subsequence occurs at the start with \\"GGGGG\\", which has a length of 5.","solution":"def longest_consecutive_subsequence(notes): Given a sequence of notes, returns the length of the longest consecutive subsequence of identical notes. :param notes: string representing the sequence of notes :return: integer: the length of the longest consecutive subsequence if not notes: return 0 max_length = 1 current_length = 1 for i in range(1, len(notes)): if notes[i] == notes[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"Alex is working on a project that involves managing inventory at a warehouse. He needs to automate the process of generating a summary of available products and their quantities from a sequence of inventory events. Each event indicates whether a product has been added to the inventory, removed from it, or a new product has been introduced. For this task, you need to help Alex by writing a function that processes these events and generates the final inventory report. The events can be of three types: 1. \\"add <product> <quantity>\\": Adds the specified quantity of the product to the inventory. 2. \\"remove <product> <quantity>\\": Removes the specified quantity of the product from the inventory. The quantity to remove will always be less than or equal to the current quantity in the inventory. 3. \\"new <product>\\": Indicates the addition of a new product to the inventory with an initial quantity of 0. Your function should read a list of these events and output the final inventory report listing each product and its quantity in alphabetical order of the product names. Input - The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of events. - The following n lines each contain a single inventory event as described above. Output - Output the inventory report as described. Each line should contain the product name, followed by its quantity, separated by a space. Example Input 6 new apple add apple 10 new banana add banana 5 remove apple 3 add banana 2 Output apple 7 banana 7 Input 4 new widget add widget 15 new gadget add gadget 20 Output gadget 20 widget 15 Note - Assume all product names are distinct between \\"new\\" events. - Quantities are guaranteed to be positive integers. Write a function that performs the described task. The function signature should be: ```python def generate_inventory(n: int, events: List[str]) -> List[str]: pass ```","solution":"def generate_inventory(n, events): inventory = {} for event in events: parts = event.split() action = parts[0] product = parts[1] if action == \\"new\\": inventory[product] = 0 elif action == \\"add\\": quantity = int(parts[2]) inventory[product] += quantity elif action == \\"remove\\": quantity = int(parts[2]) inventory[product] -= quantity result = sorted([f\\"{product} {quantity}\\" for product, quantity in inventory.items()]) return result"},{"question":"You are given an integer array with repeated elements. Your task is to output the element that appears the most frequently, and if there is a tie, output the smallest element among them. Input The first line contains an integer n (1 ≤ n ≤ 105), the number of elements in the array. The second line contains n integers, each representing an element of the array. The elements of the array will be between -105 and 105. Output Output a single integer, the most frequent element or the smallest element among the most frequent elements if there is a tie. Examples Input 6 1 2 2 3 3 1 Output 1 Input 5 4 4 4 5 5 Output 4","solution":"def most_frequent_element(n, elements): Returns the most frequent element in the list. In case of a tie, returns the smallest element among the most frequent ones. from collections import Counter # Count occurrences of each element count = Counter(elements) # Find the maximum frequency max_freq = max(count.values()) # Filter elements that have the maximum frequency candidates = [k for k, v in count.items() if v == max_freq] # Return the smallest element among the candidates return min(candidates)"},{"question":"During a treasure hunt, you discover an ancient map that leads to a treasure. The map contains a secret code which can be deciphered using a simple algorithm based on characters\' positions in the English alphabet. The map is represented as a string containing only lowercase English alphabetic characters. Each character can be transformed by calculating its position in the alphabet (with \'a\' being 1, \'b\' being 2, ..., \'z\' being 26). You need to determine the numeric value of each segment of the secret code. A segment is defined as a contiguous substring of the original string. For each query, you will be given two integers (l) and (r) (1 ≤ ( l ) ≤ ( r ) ≤ length of the string), representing the starting and ending positions of the segment (1-based index). Calculate and output the sum of the numeric values of the characters in the specified segment. Input: The first line contains the string ( s ) of length ( n ) (1 ≤ ( n ) ≤ 100,000), consisting of lowercase English alphabetic characters. The second line contains an integer ( q ) (1 ≤ ( q ) ≤ 1000), the number of queries. Each of the next ( q ) lines contains two integers ( l ) and ( r ) (1 ≤ ( l ) ≤ ( r ) ≤ ( n )), representing the starting and ending positions of the segment. Output: For each query, output the sum of the numeric values of the characters in the specified segment. Examples: Input 1: ``` abc 3 1 1 1 2 1 3 ``` Output 1: ``` 1 3 6 ``` Explanation 1: - The numeric values of the string \\"abc\\" are [1, 2, 3]. - The first query asks for the segment from position 1 to 1, which is \\"a\\". The sum is 1. - The second query asks for the segment from position 1 to 2, which is \\"ab\\". The sum is 1 + 2 = 3. - The third query asks for the segment from position 1 to 3, which is \\"abc\\". The sum is 1 + 2 + 3 = 6. Input 2: ``` xyz 2 1 2 2 3 ``` Output 2: ``` 49 50 ``` Explanation 2: - The numeric values of the string \\"xyz\\" are [24, 25, 26]. - The first query asks for the segment from position 1 to 2, which is \\"xy\\". The sum is 24 + 25 = 49. - The second query asks for the segment from position 2 to 3, which is \\"yz\\". The sum is 25 + 26 = 51. Note: If needed, you can assume that calculating the numeric values and their sums can be done in constant time or within an efficient time complexity considering the constraints.","solution":"def alphabet_position(char): return ord(char) - ord(\'a\') + 1 def preprocess_sum(s): sums = [0] * (len(s) + 1) for i in range(1, len(s) + 1): sums[i] = sums[i - 1] + alphabet_position(s[i - 1]) return sums def query_sum(sums, l, r): return sums[r] - sums[l - 1] def treasure_hunt(s, queries): sums = preprocess_sum(s) results = [] for l, r in queries: results.append(query_sum(sums, l, r)) return results"},{"question":"Given an array of n integers, you must perform q operations. Each operation consists of either incrementing or decrementing all elements in one segment of the array by a given value. After performing all operations, you need to return the final state of the array. Input The first line contains two integers n (1 ≤ n ≤ 10^5) and q (1 ≤ q ≤ 10^5) — the number of elements in the array and the number of operations, respectively. The second line contains n integers a_i (-10^9 ≤ a_i ≤ 10^9) — the initial elements of the array. The next q lines describe the operations. Each operation is represented by four integers: type (1 or 2), l, r (1 ≤ l ≤ r ≤ n), and v (-10^9 ≤ v ≤ 10^9). If type is 1, increment all elements between l and r (inclusive) by v. If type is 2, decrement all elements between l and r (inclusive) by v. Output Output the final state of the array after all operations. Example Input 5 3 1 2 3 4 5 1 2 4 1 2 1 3 2 1 5 5 3 Output 3 1 2 5 8 Note Initially the array is [1, 2, 3, 4, 5]. After the first operation, incrementing indices 2 to 4 by 1, the array becomes [1, 3, 4, 5, 5]. After the second operation, decrementing indices 1 to 3 by 2, the array becomes [-1, 1, 2, 5, 5]. After the third operation, incrementing index 5 by 3, the array becomes [-1, 1, 2, 5, 8].","solution":"def apply_operations(n, q, array, operations): Apply q operations on an array of size n and return the final state of the array. Parameters: - n (int): Size of the array. - q (int): Number of operations. - array (list of int): The initial state of the array. - operations (list of list of int): List of operations where each operation is [type, l, r, v] Returns: - list of int: The final state of the array after all operations. for op in operations: type_op, l, r, v = op if type_op == 1: for i in range(l - 1, r): array[i] += v elif type_op == 2: for i in range(l - 1, r): array[i] -= v return array"},{"question":"In computer graphics, transformation and manipulation of matrices are fundamental operations. One of the basic transformations is a rotation of points in 2D space around an origin. In this problem, you will calculate the location of points after a counter-clockwise rotation by a specified angle. Given a point (x, y) and an angle θ, the coordinates of the rotated point (x\', y\') are given by the following transformation: x\' = x * cos(θ) - y * sin(θ) y\' = x * sin(θ) + y * cos(θ) Input The first line of input contains an integer T denoting the number of test cases. Each test case consists of a line with three values: two integers x and y which represent the coordinates of the point, and a double θ, which represents the angle of rotation in degrees. Output For each test case, output the coordinates of the rotated point rounded to two decimal places. Constraints 1 ≤ T ≤ 100 -100 ≤ x, y ≤ 100 0 ≤ θ < 360 Example Input: 3 1 0 90 0 1 180 1 1 45 Output: 0.00 1.00 0.00 -1.00 0.00 1.41","solution":"import math def rotate_point(x, y, theta): Rotates a point (x, y) counterclockwise by theta degrees around the origin. Returns the new coordinates rounded to two decimal places. theta_rad = math.radians(theta) x_prime = x * math.cos(theta_rad) - y * math.sin(theta_rad) y_prime = x * math.sin(theta_rad) + y * math.cos(theta_rad) return round(x_prime, 2), round(y_prime, 2) def rotate_points(test_cases): Handles multiple test cases. For each test case, it reads x, y and theta and prints the resulting coordinates. results = [] for case in test_cases: x, y, theta = case x_prime, y_prime = rotate_point(x, y, theta) results.append((x_prime, y_prime)) return results"},{"question":"You are given a list of integers that represent the number of classrooms required for different time intervals during a day at a school. Each time interval is defined by a start time and an end time pair, and it is considered to be inclusive. Your task is to calculate the minimum number of classrooms needed to accommodate all the intervals without any overlap. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of time intervals. Each of the next n lines contains two integers si and ei (0 ≤ si, ei ≤ 10^9) — the start and end times of each interval. Output Print a single integer — the minimum number of classrooms needed. Examples Input 3 1 4 2 5 5 6 Output 2 Input 4 2 7 5 10 8 9 1 3 Output 2 Explanation In the first example, the first interval (1, 4) overlaps with the second interval (2, 5), so two classrooms are needed. The third interval (5, 6) starts right after the second interval ends, so only one classroom is needed for the third interval. In the second example, the first interval (2, 7) overlaps with the second interval (5, 10) and the third interval (8, 9). Hence, two classrooms are needed as the fourth interval (1, 3) does not overlap with any other interval. Note Time intervals that exactly match on their start and end times (e.g., 4, 4) should still be considered to need separate classrooms if overlaps occur at any point.","solution":"def min_classrooms_required(intervals): This function calculates the minimum number of classrooms needed based on the intervals. intervals: List of tuple of integers where each tuple is (si, ei) if not intervals: return 0 start_times = sorted([interval[0] for interval in intervals]) end_times = sorted([interval[1] for interval in intervals]) start_pointer = 0 end_pointer = 0 current_classrooms = 0 max_classrooms = 0 while start_pointer < len(intervals): if start_times[start_pointer] < end_times[end_pointer]: current_classrooms += 1 start_pointer += 1 else: current_classrooms -= 1 end_pointer += 1 max_classrooms = max(max_classrooms, current_classrooms) return max_classrooms # Example Usage: intervals = [(1, 4), (2, 5), (5, 6)] print(min_classrooms_required(intervals)) # Output should be 2"},{"question":"Input The input contains a single integer n (1 ≤ n ≤ 12). Output Output the factorial of n. Examples Input 3 Output 6 Input 5 Output 120 Input 10 Output 3628800","solution":"def factorial(n): Returns the factorial of a given number n. if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"You have been assigned the task of designing a schedule management system for an organization. Each employee in the organization has a daily work schedule represented as a list of busy time intervals. The objective is to find the common free time intervals where all employees are available for a meeting. A time interval is represented as a pair [start, end], where \\"start\\" and \\"end\\" are both time points in minutes from the beginning of the workday (0 to 1440). A common free time interval is an interval that is within the free time periods of all employees. Write a function `findCommonFreeTime(schedule: List[List[List[int]]]) -> List[List[int]]` that takes a schedule as input and returns a list of common free time intervals for all employees. Each employee\'s schedule is represented as a list of non-overlapping intervals sorted by the start time. # Input - `schedule`: a list of `n` employees\' schedules, where `schedule[i]` is a list of intervals [start, end] representing the ith employee\'s busy periods. # Output - A list of intervals representing the common free time intervals. The intervals should be sorted by the start time and should not overlap. # Constraints - The length of `schedule` will not exceed 100. - The total number of intervals in all schedules combined will not exceed 10000. - Each interval\'s end time will be greater than its start time. - The inputs will be such that there is at least one common free time interval. # Example Input ```python schedule = [ [[1, 3], [5, 6]], # Employee 1\'s schedule [[2, 4]], # Employee 2\'s schedule [[2, 3], [6, 8]] # Employee 3\'s schedule ] ``` Output ```python [[0, 1], [4, 5], [6, 8]] ``` Explanation: - Employee 1 is busy from 1 to 3 and 5 to 6. - Employee 2 is busy from 2 to 4. - Employee 3 is busy from 2 to 3 and 6 to 8. The common free time intervals where all employees are unavailable are: - From the start of the day to 1 - From 4 to 5 - From 6 to the end of the day","solution":"from typing import List def findCommonFreeTime(schedule: List[List[List[int]]]) -> List[List[int]]: # Flatten the schedule to get all the busy intervals all_busy_intervals = [interval for employee in schedule for interval in employee] # Sort the busy intervals by start time all_busy_intervals.sort(key=lambda x: x[0]) # Merge overlapping intervals merged_intervals = [] for interval in all_busy_intervals: if not merged_intervals or merged_intervals[-1][1] < interval[0]: merged_intervals.append(interval) else: merged_intervals[-1][1] = max(merged_intervals[-1][1], interval[1]) # Find the common free time common_free_time = [] work_start = 0 work_end = 1440 for interval in merged_intervals: if work_start < interval[0]: common_free_time.append([work_start, interval[0]]) work_start = interval[1] if work_start < work_end: common_free_time.append([work_start, work_end]) return common_free_time"},{"question":"Given a natural number `n`, your task is to write a function that computes how many trailing zeros are present in `n!` (n factorial). The factorial of a non-negative integer `n`, denoted as `n!`, is the product of all positive integers less than or equal to `n`. For example, 5! = 5 x 4 x 3 x 2 x 1 = 120. Input You will be given multiple lines of input. Each line contains a single integer `n` where 0 ≤ n ≤ 1000000000. The end of the input is indicated by a line with the number -1. This line should not be processed. Output For each input line, output a line containing the number of trailing zeros in the factorial of `n`. Example Input 5 10 25 -1 Output 1 2 6","solution":"def count_trailing_zeros(n): Calculates the number of trailing zeros in the factorial of n. Parameters: n (int): A natural number Returns: int: The number of trailing zeros in n! if n < 0: return -1 count = 0 power_of_5 = 5 while n >= power_of_5: count += n // power_of_5 power_of_5 *= 5 return count"},{"question":"You are given two arrays of integers `a` and `b` of lengths `n` and `m` respectively. You need to create a new array `c` of length `m` where each element `c[i]` is defined as the sum of the minimum elements of all contiguous subarrays of `a` of length `b[i]` modulo `1000000007`. Input: - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 2 * 10^5) — the length of arrays `a` and `b` respectively. - The second line contains `n` integers representing the array `a`. - The third line contains `m` integers representing the array `b`. Output: - Print the array `c` on a single line with space-separated integers. Examples Input: 6 2 1 3 2 5 4 6 2 3 Output: 10 12 Input: 5 3 4 5 1 3 2 1 2 5 Output: 15 6 4 Note: For the first example: - For `b[0] = 2`, the contiguous subarrays of `a` of length 2 are: `[1,3]`, `[3,2]`, `[2,5]`, `[5,4]`, `[4,6]`. Their minimums are `[1,2,2,4,4]` and their sum is `1 + 2 + 2 + 4 + 4 = 13`. - For `b[1] = 3`, the contiguous subarrays of `a` of length 3 are: `[1,3,2]`, `[3,2,5]`, `[2,5,4]`, `[5,4,6]`. Their minimums are `[1,2,2,4]` and their sum is `1 + 2 + 2 + 4 = 9`. For the second example: - For `b[0] = 1`, the contiguous subarrays of `a` of length 1 are: `[4]`, `[5]`, `[1]`, `[3]`, `[2]`. Their minimums are `[4,5,1,3,2]` and their sum is `15`. - For `b[1] = 2`, the contiguous subarrays of `a` of length 2 are: `[4,5]`, `[5,1]`, `[1,3]`, `[3,2]`. Their minimums are `[4,1,1,2]` and their sum is `8`. - For `b[2] = 5`, there is only one contiguous subarray of `a` of length 5, which is `a` itself. The minimum of `[4, 5, 1, 3, 2]` is `1`.","solution":"def sum_of_minimums(n, m, a, b): MOD = 1000000007 result = [] for length in b: min_sum = 0 # We will use a deque to maintain the indices of the minimum elements from collections import deque deq = deque() # Initialize the deque for the first window for i in range(length): while deq and a[deq[-1]] >= a[i]: deq.pop() deq.append(i) # Sum the minimum of the first window min_sum += a[deq[0]] # Compute for the rest of the windows for i in range(length, n): # Slide the window # Remove elements no longer in the window while deq and deq[0] <= i - length: deq.popleft() # Add the new element while deq and a[deq[-1]] >= a[i]: deq.pop() deq.append(i) # The current minimum is at the front of the deque min_sum += a[deq[0]] # Store the result result.append(min_sum % MOD) return result"},{"question":"Write a program that parses a log file to determine the most frequent operations performed. Each entry in the log consists of a user ID and an operation. Your program should identify the most common operation performed for each user. Constraints * 1 ≤ number of log entries ≤ 100000 * User ID and operation are strings consisting of alphabetical characters only * There are at most 1000 unique users Input The first line contains an integer N, the number of log entries. The next N lines each contain a user ID and an operation separated by a space. Output For each unique user, output the user ID followed by the most frequent operation they performed. If there is a tie, output the lexicographically smallest operation. Example Input 5 user1 login user2 search user1 browse user1 login user2 login Output user1 login user2 login","solution":"from collections import defaultdict, Counter def most_frequent_operations(log_entries): Parses a list of log entries and determines the most frequent operation for each user. Parameters: log_entries (list of str): List of log entries where each entry is formatted as \\"user_id operation\\" Returns: dict: A dictionary with user IDs as keys and their most frequent operation as values. user_operations = defaultdict(list) for entry in log_entries: user_id, operation = entry.split() user_operations[user_id].append(operation) result = {} for user_id, operations in user_operations.items(): operation_count = Counter(operations) most_common_operation = min(operation_count.items(), key=lambda x: (-x[1], x[0]))[0] result[user_id] = most_common_operation return result"},{"question":"Write a program that reads a list of integers and determines if each number is a perfect square. A perfect square is an integer that is the square of some integer. For example, 1, 4, 9, and 16 are perfect squares. Input Input consists of several datasets. Each dataset is a single integer n (1 ≤ n ≤ 10^12) in a line. The number of datasets is less than or equal to 40. Output For each dataset, print \\"YES\\" if the number is a perfect square and \\"NO\\" otherwise. Example Input 1 4 10 16 26 Output YES YES NO YES NO","solution":"import math def is_perfect_square(n): Determines if n is a perfect square. root = int(math.sqrt(n)) return root * root == n def process_numbers(numbers): Takes a list of numbers and returns a list of \'YES\' or \'NO\' indicating whether each number is a perfect square. result = [] for num in numbers: if is_perfect_square(num): result.append(\\"YES\\") else: result.append(\\"NO\\") return result"},{"question":"You are given an array of integers. Your task is to process a series of queries, each asking for the sum of the greatest common divisors (GCD) of all the subarrays of a specified length within the given array. Input The first line of the input contains one integer n (1 ≤ n ≤ 100,000) — the number of elements in the array. The second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6) — the elements of the array. The third line of the input contains one integer q (1 ≤ q ≤ 100,000) — the number of queries. Each of the following q lines contains one integer k (1 ≤ k ≤ n) — the length of the subarrays for which you need to compute the sum of GCDs. Output For each query, output the sum of the greatest common divisors of all subarrays of length k. Example Input 5 2 4 8 16 32 3 1 2 3 Output 62 70 30 Explanation For the input array [2, 4, 8, 16, 32]: - When k = 1, each subarray is a single element: [2], [4], [8], [16], [32]. The sum of GCDs is 2 + 4 + 8 + 16 + 32 = 62. - When k = 2, the subarrays are [2, 4], [4, 8], [8, 16], [16, 32]. The GCDs of these subarrays are 2, 4, 8, and 16, respectively. The sum is 2 + 4 + 8 + 16 = 30. - When k = 3, the subarrays are [2, 4, 8], [4, 8, 16], [8, 16, 32]. The GCDs are 2, 4, and 8. The sum is 2 + 4 + 8 = 14. The same principle can be applied to compute the GCD sums for other lengths of subarrays as required by the queries.","solution":"from math import gcd from functools import reduce def sum_gcd_subarrays(arr, k): n = len(arr) if k == 1: return sum(arr) def subarray_gcd(subarr): return reduce(gcd, subarr) subarray_gcd_sum = 0 for i in range(n - k + 1): subarray = arr[i:i+k] subarray_gcd_sum += subarray_gcd(subarray) return subarray_gcd_sum def process_queries(arr, queries): results = [] for k in queries: results.append(sum_gcd_subarrays(arr, k)) return results"},{"question":"Given an array of integers and a target sum, find the number of unique pairs of elements (a, b) in the array that sum up to the target. Each pair should be sorted in ascending order, and the output should only count each distinct pair once. Input The first line contains two integers n and target (1 ≤ n ≤ 105, -109 ≤ target ≤ 109). The second line contains n integers a_i (-109 ≤ a_i ≤ 109) which represents the elements of the array. Output Print a single integer representing the number of unique pairs (a, b) such that a + b = target. Examples Input 5 6 1 5 7 -1 5 Output 2 Input 8 0 -1 0 1 2 -1 -4 3 -3 Output 2","solution":"def count_unique_pairs(arr, target): Returns the number of unique pairs of elements in the array that sum up to the target. seen = set() pairs = set() for number in arr: complement = target - number if complement in seen: pairs.add(tuple(sorted((number, complement)))) seen.add(number) return len(pairs)"},{"question":"You\'ve been tasked with developing a sequence of binary strings based on specific rules and conditions. Each string in the sequence must be derived from the previous one by exactly one bit flip, and the sequence should start from a given initial binary string. Furthermore, for each binary string in the sequence, you need to calculate a \\"toggling score\\". The toggling score for a specific binary string is calculated as the sum of indices at which bits have changed from the initial string. Indices are 0-based. Finally, output the total toggling score for the entire sequence. # Input Format - The first line contains an integer T denoting the number of test cases. - For each test case: - The first line contains an integer N, the length of the binary string. - The second line contains a binary string of length N. # Output Format For each test case, output a single line containing the total toggling score for the sequence. # Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 20 # Example Input ``` 2 3 101 4 1101 ``` Output ``` 3 6 ``` Explanation In the first test case, the sequence from \\"101\\" can be \\"001\\", \\"100\\", \\"111\\". The indices at which bits changed are: - \\"101\\" -> \\"001\\" (index 0) - \\"001\\" -> \\"011\\" (index 1) - \\"011\\" -> \\"111\\" (index 2) So, the total toggling score is 0 + 1 + 2 = 3. In the second test case, the sequence from \\"1101\\" can be \\"0101\\", \\"1001\\", \\"1111\\", \\"1100\\". The indices at which bits changed are: - \\"1101\\" -> \\"0101\\" (index 0) - \\"0101\\" -> \\"0001\\" (index 1) - \\"0001\\" -> \\"1001\\" (index 2) - \\"1001\\" -> \\"1100\\" (index 3) So, the total toggling score is 0 + 1 + 2 + 3 = 6.","solution":"def calculate_toggling_score(sequence): Calculate the total toggling score for the sequence of binary strings. :param sequence: A sequence of binary strings. :return: The total toggling score. initial_string = sequence[0] score = 0 current_string = list(initial_string) for i in range(len(initial_string)): current_string[i] = \'0\' if current_string[i] == \'1\' else \'1\' score += i return score def process_test_cases(test_cases): results = [] for n, binary_string in test_cases: sequence = [binary_string] total_score = calculate_toggling_score(sequence) results.append(total_score) return results"},{"question":"Given an array of integers, your task is to process multiple queries to determine the sum of even elements within a specified subarray. Each query is defined by two integers, representing the start and end indices of the subarray (inclusive). The objective is to solve this problem efficiently, even for large arrays and a high number of queries. INPUT The first line contains two integers n and q, representing the number of elements in the array and the number of queries, respectively. The second line contains n space-separated integers, which are the elements of the array. The next q lines each contain two integers l and r (0-based), specifying the indices of the subarray for which the sum of even elements is to be computed. OUTPUT Output q lines, each line containing the sum of even elements in the specified subarray. CONSTRAINTS 1 ≤ n, q ≤ 10^5 0 ≤ l ≤ r < n -10^9 ≤ array element ≤ 10^9 SAMPLE INPUT 5 3 1 2 3 4 5 1 3 0 4 2 4 SAMPLE OUTPUT 6 6 4","solution":"def sum_of_even_elements_in_subarrays(n, q, array, queries): # Pre-compute prefix sums of even numbers even_prefix_sum = [0] * (n + 1) for i in range(n): if array[i] % 2 == 0: even_prefix_sum[i + 1] = even_prefix_sum[i] + array[i] else: even_prefix_sum[i + 1] = even_prefix_sum[i] # Process queries results = [] for l, r in queries: results.append(even_prefix_sum[r + 1] - even_prefix_sum[l]) return results"},{"question":"Petra loves playing with chains of lights during holidays. She has a long string of lights and wants to create custom segments that blink in sync. She models this with an array of light strength values, where each element represents the brightness of a light at that position in the string. She defines a segment as \\"synchronized\\" if every light in that segment has the same strength value. Petra now needs your help to determine the number of synchronized segments of various lengths within the entire string of lights. Given an array of integers representing the brightness of each light, find out how many synchronized segments exist for each possible segment length from 1 up to the length of the array. # Input - The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of lights in the string. - The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000) — the brightness of each light. # Output Output n integers separated by spaces, where the i-th integer represents the number of synchronized segments of length i in the array. # Examples Example 1 Input: ``` 5 1 2 2 1 1 ``` Output: ``` 5 2 0 0 0 ``` Example 2 Input: ``` 4 3 3 3 3 ``` Output: ``` 4 3 2 1 ``` # Note In the first example: - There are 5 segments of length 1: [1], [2], [2], [1], [1] - There are 2 segments of length 2: [2, 2], [1, 1] - There are no segments of length greater than 2 that are synchronized. In the second example: - All possible segments are synchronized since all the lights have the same brightness. Hence, there are segments of each length from 1 to 4.","solution":"def count_synchronized_segments(n, brightness): Count the number of synchronized segments of each length from 1 to n. Parameters: n (int): Number of lights in the string brightness (list of int): The brightness of each light Returns: list of int: Number of synchronized segments for each length from 1 to n result = [0] * n # Iterate over each possible segment length for length in range(1, n + 1): count = 0 # Check all possible segments of the current length for i in range(n - length + 1): if all(brightness[i] == brightness[j] for j in range(i, i + length)): count += 1 result[length - 1] = count return result"},{"question":"Given a list of n distinct integers, find the minimum and maximum possible sums of (n-1) of the integers. Input The first line contains a single integer T, the number of test cases. T lines follow, each containing an integer n followed by n distinct integers. Output For each test case, output the minimum and maximum sums of (n-1) integers from the list on separate lines. Constraints 1 <= T <= 10^4 2 <= n <= 10^5 -10^9 <= integer <= 10^9 Example Input 2 5 1 3 5 7 9 4 10 20 30 40 Output 16 24 60 90 Explanation For the first test case, the integers are [1, 3, 5, 7, 9]. The minimum sum of (n-1) of the integers is obtained by excluding the maximum integer 9, which gives 1+3+5+7 = 16. The maximum sum of (n-1) of the integers is obtained by excluding the minimum integer 1, which gives 3+5+7+9 = 24. For the second test case, the integers are [10, 20, 30, 40]. The minimum sum is obtained by excluding 40, which gives 10+20+30 = 60. The maximum sum is obtained by excluding 10, which gives 20+30+40 = 90.","solution":"def min_max_sum(arr): Returns the minimum and maximum possible sums of (n-1) integers from the list. total_sum = sum(arr) # Calculate the total sum of the array min_elem = min(arr) # Find the minimum element in the array max_elem = max(arr) # Find the maximum element in the array # Minimum sum is the total sum minus the maximum element (smallest n-1 elements) min_sum = total_sum - max_elem # Maximum sum is the total sum minus the minimum element (largest n-1 elements) max_sum = total_sum - min_elem return min_sum, max_sum def process_cases(test_cases): Processes multiple test cases to find min and max sums for each. Args: test_cases: List of list, where each sublist starts with an integer n followed by n distinct integers. Returns: A list of tuples, each containing the min and max sums for the respective test case. results = [] for case in test_cases: n, *arr = case results.append(min_max_sum(arr)) return results"},{"question":"Given a string `s`, Roman decides to define a \\"beautiful substring\\" as a substring consisting of only vowel characters (\'a\', \'e\', \'i\', \'o\', \'u\'). Roman asks Denis to find the length of the longest \\"beautiful substring\\" in `s`. Write a function `longest_beautiful_substring(s: str) -> int` that takes a single argument: - `s`: a string consisting of lowercase English letters. The function should return an integer, the length of the longest substring that consists entirely of vowels. # Examples Example 1: **Input:** ``` s = \\"earth\\" ``` **Output:** ``` 2 ``` **Explanation:** The longest \\"beautiful substring\\" is \\"ea\\". Example 2: **Input:** ``` s = \\"hello\\" ``` **Output:** ``` 1 ``` **Explanation:** The longest \\"beautiful substring\\" is \\"e\\" or \\"o\\". Example 3: **Input:** ``` s = \\"aether\\" ``` **Output:** ``` 2 ``` **Explanation:** There are multiple \\"beautiful substrings\\" of length 2, such as \\"ae\\" and \\"e\\". # Constraints - `1 <= len(s) <= 10^5` - `s` consists of lowercase English letters only. The function should be efficient with a time complexity ideally in the order of O(n).","solution":"def longest_beautiful_substring(s: str) -> int: Returns the length of the longest substring consisting of only vowels. vowels = {\'a\', \'e\', \'i\', \'o\', \'u\'} max_length = 0 current_length = 0 for char in s: if char in vowels: current_length += 1 if current_length > max_length: max_length = current_length else: current_length = 0 return max_length"},{"question":"A programmer is developing a navigation system for a robot. The robot is placed in a grid and can move one step in one of the four directions: up, down, left, or right. Each movement has an associated energy cost. The robot can also perform a special action called \\"Hover\\" where it can move to any cell in the grid directly at a fixed cost, regardless of the destination. Given the dimensions of the grid, the starting position of the robot, the target position, the energy cost of moving in each of the four directions, and the fixed cost of the \\"Hover\\" action, find the minimum energy cost required for the robot to reach the target position from the starting position. INPUT The first line of the input consists of an integer T, which indicates the number of test cases. Each test case consists of the following: - The first line contains two integers M and N, representing the dimensions of the grid (number of rows and columns, respectively). - The second line contains two space-separated integers Sx and Sy, the starting position of the robot. - The third line contains two space-separated integers Tx and Ty, the target position the robot needs to reach. - The fourth line contains four space-separated integers, representing the energy costs of moving up, down, left, and right, respectively. - The fifth line contains an integer, representing the fixed cost of the \\"Hover\\" action. OUTPUT For each test case, print the minimum energy cost required to move the robot from the starting position to the target position. CONSTRAINTS 1 ≤ T ≤ 100 1 ≤ M, N ≤ 1000 0 ≤ Sx, Sy, Tx, Ty < M, N 1 ≤ Cost of any movement ≤ 1000 1 ≤ Cost of \\"Hover\\" ≤ 1000 SAMPLE INPUT 2 5 5 0 0 3 3 1 2 3 4 10 10 10 0 1 9 8 3 3 3 3 20 SAMPLE OUTPUT 10 20 Explanation For Test Case 1: The robot can move from (0,0) to (3,3) using one \\"Hover\\" action with a fixed cost of 10. Other movement costs are ignored as using the \\"Hover\\" action is more efficient in this scenario. For Test Case 2: The robot can move from (0,1) to (9,8) using one \\"Hover\\" action with a fixed cost of 20. This is the minimum possible energy cost to reach the target position.","solution":"def min_energy_cost(T, test_cases): results = [] for i in range(T): M, N = test_cases[i][\'grid_dims\'] Sx, Sy = test_cases[i][\'start\'] Tx, Ty = test_cases[i][\'target\'] move_costs = test_cases[i][\'move_costs\'] hover_cost = test_cases[i][\'hover_cost\'] # Calculate minimum cost using hover action min_cost = hover_cost # To calculate the cost if the robot does not hover dx = abs(Tx - Sx) dy = abs(Ty - Sy) grid_cost = (move_costs[1] * (Ty - Sy) if Ty > Sy else move_costs[0] * (Sy - Ty)) # Up or down cost grid_cost += (move_costs[3] * (Tx - Sx) if Tx > Sx else move_costs[2] * (Sx - Tx)) # Left or right cost min_cost = min(min_cost, grid_cost) results.append(min_cost) return results"},{"question":"You are given an array representing daily temperatures for a number of consecutive days. Your task is to find, for each day in the array, how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, record 0 for that day. Input The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of consecutive days. The second line contains n integers T_1, T_2, …, T_n (−100 ≤ T_i ≤ 100) — the daily temperatures. Output Output a single line with n integers. The i-th integer should represent the number of days one has to wait to encounter a warmer temperature than on the i-th day. If no warmer day exists in the future, print 0 for that position. Example Input: 8 73 74 75 71 69 72 76 73 Output: 1 1 4 2 1 1 0 0","solution":"def daily_temperatures(n, temperatures): For each day, calculates how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, returns 0 for that day. result = [0] * n stack = [] # stores the indexes of the `temperatures` list for i in range(n): # Check the stack for any previous days that are cooler than the current day while stack and temperatures[i] > temperatures[stack[-1]]: prev_index = stack.pop() result[prev_index] = i - prev_index # Push the current day index onto the stack stack.append(i) return result"},{"question":"Alice has a garden with `n` flowers planted in a row. Each flower has a certain height, given in an array `h` of length `n`, where `h[i]` is the height of the `i-th` flower. Alice wants to create a collection of bouquets. Each bouquet consists of some consecutive flowers from the garden. A bouquet is considered a *beautiful bouquet* if it contains at least one flower of height exactly equal to `k`. Alice wants to maximize the number of *beautiful bouquets* she can create, but each flower can be part of at most one bouquet. Determine the maximum number of *beautiful bouquets* Alice can create. # Input The first line contains two integers `n` and `k` (1 ≤ n ≤ 1000, 1 ≤ k ≤ 1000) — the number of flowers and the required height for a bouquet to be beautiful. The second line contains `n` integers, the heights of the flowers `h[0], h[1], ..., h[n-1]` (1 ≤ h[i] ≤ 1000). # Output Print a single integer, the maximum number of beautiful bouquets Alice can create. # Examples Example 1 **Input** ``` 5 3 1 2 3 1 3 ``` **Output** ``` 2 ``` **Explanation** There are two beautiful bouquets that can be created: one containing the 3rd flower (height 3) and another containing the 5th flower (height 3). Example 2 **Input** ``` 7 4 4 2 4 1 4 5 4 ``` **Output** ``` 4 ``` **Explanation** Each 4th-height flower can be its own bouquet since they are consecutive and have a height of 4. Total four beautiful bouquets can be created. Example 3 **Input** ``` 4 2 1 1 1 1 ``` **Output** ``` 0 ``` **Explanation** There are no flowers of height 2, so no beautiful bouquets can be created.","solution":"def max_beautiful_bouquets(n, k, h): Returns the maximum number of beautiful bouquets that can be created. Parameters: n (int): Number of flowers. k (int): Required height for a bouquet to be beautiful. h (list): List of heights of the flowers. Returns: int: Maximum number of beautiful bouquets. count = 0 for height in h: if height == k: count += 1 return count"},{"question":"Alex recently started experimenting with different sorting algorithms for fun. To challenge himself, he wants to modify the traditional quicksort algorithm. Specifically, he wants to add a twist: for each subarray that gets partitioned, he will pick the median of the first, middle, and last elements as the pivot. Help Alex implement this modified quicksort algorithm. Input The input starts with an integer n (1 ≤ n ≤ 10⁵), the number of elements in the array. The following line contains n integers a₁, a₂, ..., aₙ (-10⁹ ≤ aᵢ ≤ 10⁹), the elements of the array. Output Output the sorted array in ascending order. Examples Input 5 3 1 4 1 5 Output 1 1 3 4 5 Input 6 10 9 8 7 6 5 Output 5 6 7 8 9 10 Note In the first example, the initial array is 3, 1, 4, 1, 5. Using the modified quicksort algorithm with the specified pivot selection strategy will sort the array as 1, 1, 3, 4, 5. In the second example, the array 10, 9, 8, 7, 6, 5 will be sorted into 5, 6, 7, 8, 9, 10.","solution":"def median_of_three(arr, low, high): mid = (low + high) // 2 a = arr[low] b = arr[mid] c = arr[high] if a > b: if a < c: return low elif b > c: return mid else: return high else: if a > c: return low elif b < c: return mid else: return high def partition(arr, low, high): median_index = median_of_three(arr, low, high) arr[high], arr[median_index] = arr[median_index], arr[high] pivot = arr[high] i = low - 1 for j in range(low, high): if arr[j] <= pivot: i += 1 arr[i], arr[j] = arr[j], arr[i] arr[i + 1], arr[high] = arr[high], arr[i + 1] return i + 1 def quicksort(arr, low, high): if low < high: pi = partition(arr, low, high) quicksort(arr, low, pi - 1) quicksort(arr, pi + 1, high) def modified_quicksort(arr): quicksort(arr, 0, len(arr) - 1) return arr def sort_array(n, arr): return modified_quicksort(arr)"},{"question":"A popular social media app has a feature where users can follow each other. If Alice follows Bob, and Bob follows Charlie, then Alice can indirectly track Charlie\'s posts through Bob. However, if there’s a circular following chain (e.g., Alice follows Bob, Bob follows Charlie, and Charlie follows Alice), it creates significant issues in tracking. Given a list of n users and the follow relationships among them, determine if there is any circular following chain in the network. Input The first line contains two integers n and m (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^6) — the number of users and the number of follow relationships. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v) indicating that the user u follows the user v. Output Output \\"Yes\\" if there is at least one circular following chain in the network. Otherwise, output \\"No\\". Examples Input 5 6 1 2 2 3 3 4 4 2 4 5 5 3 Output Yes Input 4 3 1 2 2 3 3 4 Output No Input 3 3 1 2 2 3 3 1 Output Yes","solution":"from collections import defaultdict, deque def detect_cycle(n, m, follow_relationships): Detects if there is a circular following chain in the social media network. Args: n (int): Number of users m (int): Number of follow relationships follow_relationships (List[Tuple[int, int]]): List of follow relationships (u follows v) Returns: str: \\"Yes\\" if there is at least one circular following chain, otherwise \\"No\\" graph = defaultdict(list) in_degree = [0] * (n + 1) for u, v in follow_relationships: graph[u].append(v) in_degree[v] += 1 queue = deque([i for i in range(1, n + 1) if in_degree[i] == 0]) while queue: u = queue.popleft() for v in graph[u]: in_degree[v] -= 1 if in_degree[v] == 0: queue.append(v) if any(in_degree[i] > 0 for i in range(1, n + 1)): return \\"Yes\\" return \\"No\\""},{"question":"A company needs to automate the process of calculating the bonuses for its employees. The company uses a grading system where each employee is assigned a grade from A to D based on their performance throughout the year. Additionally, an employee can receive an extraordinary bonus based on significant achievements. The base bonus for each grade is as follows: - Grade A: 1000 - Grade B: 800 - Grade C: 500 - Grade D: 300 If an employee is eligible for the extraordinary bonus, an additional 500 is added to their base bonus. Given the list of employees with their grades and whether they are eligible for the extraordinary bonus, write a program to compute the total bonus for each employee. Input: The input includes multiple lines. Each line represents information about an employee and is given in the following format: ``` name grade extraordinary_bonus ``` - `name`: a string representing the employee\'s name (1 to 100 characters long, consisting of alphabets and spaces). - `grade`: a character representing the employee\'s grade (A, B, C, D). - `extraordinary_bonus`: a boolean (0 or 1) representing if the employee is eligible for the extraordinary bonus (1 means eligible, 0 means not eligible). Output: The output is the name of each employee followed by their total bonus in the same order as the input. Each output should be on a new line. Example: Input: ``` John A 1 Jane B 0 Sam C 1 Amy D 0 Bob A 0 ``` Output: ``` John 1500 Jane 800 Sam 1000 Amy 300 Bob 1000 ``` Constraints: - The number of employees (n) will be between 1 and 1000. - Each name will be unique. Write the program to solve this problem in any programming language you prefer.","solution":"def calculate_bonus(employees): Calculate the total bonus for each employee based on their grade and extraordinary bonus eligibility. Parameters: employees (list of str): List of strings where each string contains employee details. Returns: list of str: List of strings with each string containing the name and total bonus of an employee. base_bonuses = { \'A\': 1000, \'B\': 800, \'C\': 500, \'D\': 300 } extraordinary_bonus_amount = 500 results = [] for employee in employees: name, grade, extraordinary_bonus = employee.split() base_bonus = base_bonuses[grade] total_bonus = base_bonus + (extraordinary_bonus_amount if int(extraordinary_bonus) == 1 else 0) results.append(f\\"{name} {total_bonus}\\") return results"},{"question":"Alice is organizing a secret auction for her friends. Each participant submits a sealed bid indicating how much they are willing to pay for a mystery item. However, to make the auction more interesting, Alice wants the winning bid to be the highest unique bid; that is, the highest bid that hasn\'t been submitted by anyone else. Your task is to write a program that determines the amount of the winning bid, provided it exists. If no unique bid exists, your program should return -1. Input The first line of the input contains an integer n (1 ≤ n ≤ 1000) — the number of participants. The second line contains n integers b1, b2, ..., bn (1 ≤ bi ≤ 10000) — the bids submitted by the participants. Output Print the highest unique bid if it exists; otherwise, print -1. Examples Input 6 2 2 3 4 5 5 Output 4 Input 5 1 2 2 3 3 Output 1 Input 3 10 10 10 Output -1 Note In the first example, the only unique bid is 4, and it is the highest. In the second example, the unique bids are 1, but it is the highest among the unique bids. In the third example, there are no unique bids.","solution":"def highest_unique_bid(n, bids): Returns the highest unique bid or -1 if no unique bid exists. :param n: Number of participants :param bids: List of bids :return: int from collections import Counter bid_counts = Counter(bids) # Filter to find unique bids unique_bids = [bid for bid, count in bid_counts.items() if count == 1] if not unique_bids: return -1 return max(unique_bids)"},{"question":"Given a matrix of integers, your task is to calculate the sum of the elements on the diagonals. The matrix will always be square (i.e., the number of rows and columns are the same). Input: The first line of the input contains an integer n (1 ≤ n ≤ 100) — the size of the matrix (number of rows and columns). The next n lines each contain exactly n integers, representing the matrix elements. Output: Output a single integer — the sum of the elements on both primary and secondary diagonals. Note that if the matrix size is odd, the center element should only be summed once. Examples: Input: 3 1 2 3 4 5 6 7 8 9 Output: 25 Input: 2 1 2 3 4 Output: 10 Explanation: In the first example, the primary diagonal elements are 1, 5, 9, and the secondary diagonal elements are 3, 5, 7. The sum is 1 + 5 + 9 + 3 + 5 + 7 = 30. But since the center element (5) is counted twice, we subtract it once, resulting in the final sum: 30 - 5 = 25. In the second example, the primary diagonal elements are 1, 4, and the secondary diagonal elements are 2, 3. The sum is 1 + 4 + 2 + 3 = 10.","solution":"def sum_of_diagonals(matrix): Given a square matrix, calculates the sum of the primary and secondary diagonal elements. If the matrix size is odd, the center element is only summed once. n = len(matrix) sum_diag = 0 for i in range(n): sum_diag += matrix[i][i] # primary diagonal sum_diag += matrix[i][n - 1 - i] # secondary diagonal if n % 2 == 1: center = matrix[n // 2][n // 2] sum_diag -= center # subtract the center value as it is counted twice return sum_diag"},{"question":"You are given an integer n and an array a of length n, where n is an odd number and a represents a permutation of numbers from 1 to n. Your task is to rearrange the elements of a into a new array b such that for every index i, the value b[i] is not equal to a[i]. If it is not possible to create such an array, return -1. Input - The first line contains an integer n (1 ≤ n ≤ 1000, n is odd). - The second line contains n distinct integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n), representing the initial permutation. Output - If it is possible to rearrange the elements of a into an array b where b[i] ≠ a[i] for all i, print the resulting array b. - Otherwise, print -1. Examples Input ``` 3 3 1 2 ``` Output ``` 2 3 1 ``` Input ``` 5 4 3 1 5 2 ``` Output ``` 5 1 3 2 4 ``` Input ``` 1 1 ``` Output ``` -1 ``` Note In the first example, the input array is [3, 1, 2]. Rearranging it to [2, 3, 1] gives us a new array where each element b[i] ≠ a[i]. In the second example, the input array is [4, 3, 1, 5, 2]. Rearranging it to [5, 1, 3, 2, 4] meets the condition for every index i. In the third example, with only one element, it is impossible to form a new array where the single element is not the same as the original, so the output is -1.","solution":"def rearrange(n, a): Rearrange the elements of array a into a new array b such that no element b[i] is equal to a[i]. Parameters: n (int): the length of the array, which is an odd number. a (list): the initial permutation of numbers from 1 to n. Returns: list: the rearranged array meeting the conditions, or [-1] if impossible. if n == 1: return [-1] b = a[:] # Start swapping the elements in a circular manner to ensure no element # stays at the same index. for i in range(n): b[i] = a[(i + 1) % n] return b"},{"question":"Given a string S consisting only of lowercase letters, your task is to determine whether the sum of the ASCII values of all characters in the first half of the string is equal to the sum of the ASCII values of all characters in the second half. If the length of the string is odd, include the middle character in both halves. Input First line contains an integer t, the number of test cases. Each of the next t lines contains a string S. Output For each test case, print \\"YES\\" if the sums are equal, otherwise print \\"NO\\". SAMPLE INPUT 3 abcd abccba abcba SAMPLE OUTPUT NO YES YES","solution":"def is_equal_sum_of_halves(s): n = len(s) mid = n // 2 if n % 2 == 0: left_half = s[:mid] right_half = s[mid:] else: left_half = s[:mid + 1] right_half = s[mid:] left_sum = sum(ord(char) for char in left_half) right_sum = sum(ord(char) for char in right_half) return \\"YES\\" if left_sum == right_sum else \\"NO\\" def process_test_cases(t, test_cases): results = [] for s in test_cases: results.append(is_equal_sum_of_halves(s)) return results"},{"question":"Sarah is hosting a dinner party and wants to ensure each guest receives a balanced meal. She has P dishes, and each dish has a quantity denoted by an array of integers. She wants to distribute all dishes equally among her G guests. Calculate the maximum number of complete meals each guest can receive. A meal consists of one serving from each dish. SAMPLE INPUT P = 3, G = 2 Dishes = [6, 8, 10] SAMPLE OUTPUT 3","solution":"def max_complete_meals(P, G, Dishes): Calculates the maximum number of complete meals each guest can receive. Parameters: P (int): Number of different dishes. G (int): Number of guests. Dishes (list of int): List of quantities of each dish. Returns: int: Maximum number of complete meals each guest can receive. # Determine the maximum number of complete meals possible by finding # the smallest quotient of dish quantity divided by the number of guests min_meals = min(dish // G for dish in Dishes) return min_meals"},{"question":"You are given a list of strings. Determine if any string in the list is a palindrome. A palindrome is a string that reads the same forward and backward. If there is at least one palindrome in the list, print `YES`. Otherwise, print `NO`. Constraints * The list contains between 1 and 100 strings. * Each string is composed of lowercase English letters (`a` - `z`). * The length of each string is between 1 and 100. Input Input is given from Standard Input in the following format: n string_1 string_2 ... string_n Output Print `YES` if there is at least one palindrome in the list. Otherwise, print `NO`. Examples Input 4 racecar apple banana civic Output YES Input 3 hello world python Output NO Input 2 madam noon Output YES","solution":"def check_palindromes(strings): Determines if any strings in the list are palindromes. Args: strings: a list of strings Returns: \'YES\' if any string in the list is a palindrome, otherwise \'NO\' for s in strings: if s == s[::-1]: return \\"YES\\" return \\"NO\\" # Example usage: # n = int(input().strip()) # strings = [input().strip() for _ in range(n)] # print(check_palindromes(strings))"},{"question":"Anna has a sequence of n integers. She can perform a special operation on this sequence: she can remove any two consecutive elements and insert their sum back into the sequence at the removed position. For instance, given the sequence [a1, a2, a3, ..., a(n-1), an], if Anna removes ai and ai+1, she can insert ai + ai+1 back into the position of ai, resulting in a new sequence with one fewer element. Anna wants to know the minimum possible sum she can achieve by performing the above operation any number of times until only one element remains in the sequence. Input The first line contains an integer n (2 ≤ n ≤ 105) — the number of integers in the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 104) — the initial sequence. Output Output a single integer — the minimum possible sum Anna can achieve. Examples Input 4 1 2 3 4 Output 10 Input 3 2 7 1 Output 10 Input 5 5 4 3 2 1 Output 15","solution":"def min_possible_sum(n, sequence): Given a sequence of n integers, compute the minimum possible sum by repeatedly removing any two consecutive elements and inserting their sum. Args: - n (int): The number of integers in the sequence - sequence (list of int): The initial sequence of integers Returns: - int: The minimum possible sum return sum(sequence)"},{"question":"A palindrome is a string that reads the same backward as forward, such as \'madam\' or \'racecar\'. In this problem, you need to make all strings into palindromes by appending characters to the end. Your task is to find the minimum number of characters needed to achieve this. Input One string of lowercase Latin letters. The length of the string is at least 1 and does not exceed 100. Output Print a single integer representing the minimum number of characters needed to be appended to the end of the given string to make it a palindrome. Examples Input abcd Output 3 Input race Output 3 Input aabc Output 3","solution":"def min_chars_to_make_palindrome(s): Given a string s, this function returns the minimum number of characters that need to be appended to the end of the string to make it a palindrome. def is_palindrome(st): return st == st[::-1] n = len(s) for i in range(n): if is_palindrome(s[i:]): return i return n"},{"question":"You are given an array of integers. You need to find and return the length of the longest subsequence such that all elements of the subsequence are equal to each other. A subsequence is a sequence that can be derived by deleting some or no elements of the array without changing the order of the remaining elements. Input The first line of the input contains one integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line of the input contains n integers separated by spaces. Output Print one integer — the length of the longest subsequence of equal elements. Examples Input 7 1 2 2 3 3 3 4 Output 3 Input 5 1 1 1 1 1 Output 5 Input 6 1 2 3 4 5 6 Output 1 Note In the first example, the longest subsequence of equal elements is {3, 3, 3} so the answer is 3. In the second example, the entire array consists of equal elements {1, 1, 1, 1, 1} so the answer is 5. In the third example, no two elements are the same, so the longest subsequence of equal elements is any individual element, which has length 1.","solution":"def longest_equal_subsequence(arr): Given an array of integers, find the length of the longest subsequence where all elements are equal. :param arr: List[int] - List representing the array of integers :return: int - Length of the longest subsequence of equal elements if not arr: return 0 freq_map = {} # Calculate frequencies of each element for num in arr: if num in freq_map: freq_map[num] += 1 else: freq_map[num] = 1 # Find the maximum frequency longest_subsequence_length = max(freq_map.values()) return longest_subsequence_length"},{"question":"Alice and Bob are playing a game with a string. The string consists of lowercase English letters. Alice can perform the following operation any number of times (possibly zero): * She chooses any two different characters in the string and swaps them. Alice wants to reorganize the string such that no two adjacent characters are the same. Bob wants to know if it is possible for Alice to achieve this. Write a program that determines if Alice can reorganize the string such that no two adjacent characters are the same. Input The first line of input consists of an integer t (1 ≤ t ≤ 100), the number of test cases. Each test case contains one line consisting of a string s (1 ≤ |s| ≤ 1000), where |s| is the length of the string. The string consists only of lowercase English letters. Output For each test case, print \\"YES\\" on a single line if Alice can reorganize the string to satisfy the condition. Otherwise, print \\"NO\\". Example Input 3 aabb aaab abc Output YES NO YES Explanation In the first test case, Alice can reorganize the string \\"aabb\\" as \\"abab\\". In the second test case, it is impossible to reorganize the string \\"aaab\\" such that no two adjacent characters are the same. In the third test case, the given string \\"abc\\" already satisfies the condition.","solution":"def can_reorganize_string(s): Determines if a string can be reorganized so that no two adjacent characters are the same. from collections import Counter char_count = Counter(s) max_count = max(char_count.values()) if max_count > (len(s) + 1) // 2: return \\"NO\\" return \\"YES\\" def process_test_cases(t, test_cases): results = [] for s in test_cases: results.append(can_reorganize_string(s)) return results # Example usage for external input if __name__ == \\"__main__\\": t = int(input()) test_cases = [input().strip() for _ in range(t)] results = process_test_cases(t, test_cases) for result in results: print(result)"},{"question":"Write a program to implement the Merge Sort algorithm which sorts a sequence A in ascending order. The algorithm should be based on the following pseudocode: merge_sort(A, left, right): if left < right: mid = (left + right) // 2 merge_sort(A, left, mid) merge_sort(A, mid + 1, right) merge(A, left, mid, right) merge(A, left, mid, right): n1 = mid - left + 1 n2 = right - mid /* Create temporary arrays */ L = [0] * n1 R = [0] * n2 /* Copy data to temporary arrays L[] and R[] */ for i in range(n1): L[i] = A[left + i] for j in range(n2): R[j] = A[mid + 1 + j] i = 0 j = 0 k = left /* Merge the temporary arrays back into A[l..r] */ while i < n1 and j < n2: if L[i] <= R[j]: A[k] = L[i] i += 1 else: A[k] = R[j] j += 1 k += 1 /* Copy the remaining elements of L[], if any */ while i < n1: A[k] = L[i] i += 1 k += 1 /* Copy the remaining elements of R[], if any */ while j < n2: A[k] = R[j] j += 1 k += 1 To demonstrate the algorithm, your program should output the intermediate sequences after every merge step. Hint Template in Python Constraints 1 ≤ N ≤ 100 Input The first line of the input includes an integer N, the number of elements in the sequence. In the second line, N elements of the sequence are given separated by a single space. Output The output consists of a series of lines representing the intermediate sequences for each merge step. Each sequence should be separated by a single space, and there should be a blank line separating different levels of merges. Example Input 6 5 2 4 6 1 3 Output 5 2 4 6 1 3 2 4 5 1 3 6 1 2 3 4 5 6 Input 4 4 3 2 1 Output 4 3 2 1 3 4 1 2 1 2 3 4","solution":"def merge(A, left, mid, right): n1 = mid - left + 1 n2 = right - mid L = [0] * n1 R = [0] * n2 for i in range(n1): L[i] = A[left + i] for j in range(n2): R[j] = A[mid + 1 + j] i = 0 j = 0 k = left while i < n1 and j < n2: if L[i] <= R[j]: A[k] = L[i] i += 1 else: A[k] = R[j] j += 1 k += 1 while i < n1: A[k] = L[i] i += 1 k += 1 while j < n2: A[k] = R[j] j += 1 k += 1 print(\' \'.join(map(str, A[left:right + 1]))) def merge_sort(A, left, right): if left < right: mid = (left + right) // 2 merge_sort(A, left, mid) merge_sort(A, mid + 1, right) merge(A, left, mid, right) def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) A = list(map(int, data[1:1 + N])) merge_sort(A, 0, N - 1) print(\' \'.join(map(str, A)))"},{"question":"Points: 10 A travel agency is organizing guided tours to various historical sites. Each tour group can have a specific number of visitors, but the number of available tour guides is limited. Each tour guide can manage a particular number of visitors, and the agency wants to ensure that no tour guide is overloaded with more visitors than they can handle. Additionally, the agency wants to minimize the number of extra guides necessary to accommodate all visitors when the guides available are insufficient. Your task is to determine the minimum number of additional tour guides required for each group of visitors. Input: The first line consists of total no of test cases. Each test case consists of two lines. The first line of each test case contains an integer, n (number of visitors). The second line consists of two integers, g (number of tour guides available) and c (maximum capacity of one tour guide). Output: For each test case, print one line containing the required number of extra tour guides. Example: Input: 2 12 3 4 25 5 5 Output: 0 0","solution":"def required_extra_guides(test_cases): results = [] for test_case in test_cases: n, g, c = test_case total_capacity = g * c if total_capacity >= n: results.append(0) else: additional_guides_needed = (n - total_capacity + c - 1) // c # This ensures we round up correctly results.append(additional_guides_needed) return results def process_input(input_str): lines = input_str.strip().split(\\"n\\") num_test_cases = int(lines[0]) test_cases = [] for i in range(1, 2 * num_test_cases, 2): n = int(lines[i]) g, c = map(int, lines[i+1].split()) test_cases.append((n, g, c)) return num_test_cases, test_cases def main(input_str): num_test_cases, test_cases = process_input(input_str) results = required_extra_guides(test_cases) for result in results: print(result)"},{"question":"Polycarp has recently begun practicing archery and targets multiple fruits placed in various positions along a straight line. Polycarp wants to hit all fruits in one straight shot; however, he can only shoot in a perfectly horizontal line. The fruits are represented as points on a 2D plane. The task is to determine the minimum number of horizontal shots Polycarp needs to hit all the fruits. A horizontal shot can hit and destroy all the fruits that lie on the same horizontal line (i.e., all fruits that have the same y-coordinate). Write a program that reads the positions of the fruits and outputs the minimum number of horizontal shots required. Input The first line contains an integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of fruits. Each of the next n lines contains two integers x and y (0 ≤ x, y ≤ 10^9) — the coordinates of a fruit. Output Print a single integer — the minimum number of horizontal shots required to hit all the fruits. Example Input 6 1 2 2 3 3 2 1 4 2 4 5 3 Output 3","solution":"def min_horizontal_shots(fruits): Returns the minimum number of horizontal shots required to hit all the fruits. Parameters: fruits (list of tuple): List of tuples where each tuple represents the (x, y) coordinates of a fruit. Returns: int: Minimum number of horizontal shots required. # Using a set to track unique y-coordinates unique_y = set() for _, y in fruits: unique_y.add(y) # The number of unique y-coordinates is the minimum number of horizontal shots needed return len(unique_y)"},{"question":"Nina is a software developer who loves arranging her computer files. One day, her file system got corrupted, and some files went missing. She had n files numbered from 1 to n, but now some of the files are missing, and she is left with m files where m < n. Nina wants to restore the file system by adding x new files such that the files are ordered in a contiguous increasing sequence from 1 to n. Nina has a list of her remaining files and wants to know the minimum number of files she needs to add to restore the sequence. Input The first line contains a single integer n (1 ≤ n ≤ 2 * 10^5) — the total number of files before corruption. The second line contains an integer m (0 ≤ m ≤ n) — the number of remaining files after corruption. The third line contains m integers f_1, f_2, ..., f_m (1 ≤ f_i ≤ n, f_i != f_j for all 1 ≤ i < j ≤ m) — the list of remaining files in any order. Output The output contains a single integer — the minimum number of new files needed to restore the contiguous increasing sequence from 1 to n. Examples Input 5 2 2 4 Output 3 Input 8 6 1 3 4 5 7 8 Output 2 Input 10 0 Output 10 Note Example 1 To restore the sequence [1, 2, 3, 4, 5], we are missing the files 1, 3, and 5. Example 2 To restore the sequence [1, 2, 3, 4, 5, 6, 7, 8], we are missing the files 2 and 6. Example 3 To restore the sequence [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], we are missing all files, so we need to add 10 files.","solution":"def minimum_files_to_add(n, m, remaining_files): Returns the minimum number of files needed to restore the contiguous sequence from 1 to n. Parameters: n (int): Total number of files before corruption. m (int): Number of remaining files after corruption. remaining_files (list of int): List of remaining files. Returns: int: Minimum number of files needed to restore the sequence. # Create a set of all files from 1 to n all_files = set(range(1, n + 1)) # Create a set of remaining files remaining_files_set = set(remaining_files) # The missing files are the ones in \'all_files\' but not in \'remaining_files_set\' missing_files = all_files - remaining_files_set # Number of missing files is the size of \'missing_files\' return len(missing_files)"},{"question":"The kingdom of Bitland has a very intriguing problem for you to solve. The inhabitants of Bitland love binary numbers and they love even more when they can manipulate these numbers in interesting ways. One day, the king of Bitland challenged his cleverest subjects with the following problem: Given a binary number, your task is to compute a new binary number formed by rotating the initial binary number to the left by a given number of positions. A cyclic left rotation by one position means that the most significant bit (leftmost bit) is moved to the least significant bit position (rightmost position). Write a program that performs a cyclic left rotation on a given binary number by a specified number of positions. Input The first line contains a binary number (a string of \'0\'s and \'1\'s). The second line contains an integer k that specifies the number of positions to rotate the binary number to the left. Output A single line containing the binary number after rotating it left by k positions. Examples Input: 1101 2 Output: 0111 Input: 001011 3 Output: 011001 Note: - The length of the binary number is between 1 and 100 inclusive. - The number of positions k to rotate is a non-negative integer and k can be any value without exceeding the length of the binary number.","solution":"def left_rotate_binary(binary_num: str, k: int) -> str: Performs a cyclic left rotation on a given binary number by a specified number of positions. Args: binary_num (str): The binary number as a string of \'0\'s and \'1\'s. k (int): The number of positions to rotate the binary number to the left. Returns: str: The binary number after rotating it left by k positions. n = len(binary_num) k = k % n # In case k is larger than the length of the binary number return binary_num[k:] + binary_num[:k]"},{"question":"Emma manages a warehouse where she stores packages in a large stack. Each package has a specific weight and a unique identifying label. Unfortunately, the stack is so high that only the package on the top can be removed at any time. From a given list of packages, Emma wants to find out the sequence of packages in the stack after repeatedly removing the heaviest package remaining until all packages have been removed. Write a function that accepts a list of tuples where each tuple contains two elements: the weight of the package and its label. The function should return a list of package labels showing the order in which the packages were removed. Input Format - The first line contains a single integer n, the number of packages. - The next n lines each contain a tuple with an integer and a string, representing the weight and label of a package, respectively. Output Format - A single line containing a list of package labels in the order they were removed. Example Input 4 (10, \'A\') (5, \'B\') (15, \'C\') (7, \'D\') Output [\'C\', \'A\', \'D\', \'B\'] Explanation - The heaviest package \'C\' (15) is removed first. - The next heaviest package \'A\' (10) is removed next. - The remaining packages \'B\' (5) and \'D\' (7) are considered, and \'D\' (7) is removed, followed by \'B\' (5).","solution":"def remove_packages(packages): Returns the order of package labels after removing them in descending order of their weights. Parameters: packages (list of tuples): Each tuple contains an integer (weight) and a string (label). Returns: list: Package labels in the order they were removed. # Sort packages based on the weight in descending order sorted_packages = sorted(packages, key=lambda x: x[0], reverse=True) # Extract the labels in the sorted order result = [label for _, label in sorted_packages] return result"},{"question":"A robot is located at the top-left corner of an `m x n` grid (marked as \\"Start\\" in the diagram below). The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked as \\"Finish\\" in the diagram below). How many possible unique paths are there to reach the bottom-right corner of the grid? The function should return an integer representing the number of unique paths. # Diagram: ``` [ [\'Start\', \'.\', \'.\', \'.\'], [\'.\', \'.\', \'.\', \'.\'], [\'.\', \'.\', \'.\', \'Finish\'] ] ``` # Constraints: - 1 <= m, n <= 100 # Input: - Two integers `m` and `n` representing the number of rows and columns in the grid, respectively. # Output: - An integer representing the number of unique paths from the top-left corner of the grid to the bottom-right corner. # Example: Input: 3 7 Output: 28 Input: 3 2 Output: 3 # Note: You may assume that m and n will be positive integers. # Additional Information: Make sure to use a dynamic programming approach to solve this problem within the constraint limits.","solution":"def unique_paths(m, n): Returns the number of unique paths from top-left to bottom-right of an m x n grid. :param m: Number of rows :param n: Number of columns :return: Number of unique paths # Create a 2D list initialized with 1 dp = [[1] * n for _ in range(m)] # Start populating the dp table from (1, 1) for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[m-1][n-1]"},{"question":"Rotate Image Given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise). You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. **Do not** allocate another 2D matrix and do the rotation. Write a function: ```python def rotate(matrix: List[List[int]]) -> None: # Your code here ``` **Example:** **Input:** ```python matrix = [ [1,2,3], [4,5,6], [7,8,9] ] ``` **Output:** ```python [ [7,4,1], [8,5,2], [9,6,3] ] ``` **Input:** ```python matrix = [ [ 5, 1, 9,11], [ 2, 4, 8,10], [13, 3, 6, 7], [15,14,12,16] ] ``` **Output:** ```python [ [15,13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7,10,11] ] ``` **Constraints:** - `matrix` is an n x n 2D matrix. - 1 ≤ n ≤ 20 - -1000 ≤ matrix[i][j] ≤ 1000 **Hints:** 1. Could you transpose the matrix? 2. After transposing, reverse each row. Good luck!","solution":"from typing import List def rotate(matrix: List[List[int]]) -> None: Rotates the given n x n matrix by 90 degrees clockwise. The rotation is done in-place. n = len(matrix) # Transpose the matrix for i in range(n): for j in range(i + 1, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(n): matrix[i].reverse()"},{"question":"You are given a string consisting of the characters \'L\' and \'R\' only. The characters in the string represent the steps of a robot where \'L\' indicates a step to the left and \'R\' indicates a step to the right. The robot starts at the origin (0,0) on a number line. At each step, it moves one unit left or right accordingly. Determine if the robot returns to the origin after completing all the steps. Input The single line of the input contains a sequence of characters \'L\' and \'R\' of length n (1 ≤ n ≤ 100000). Output Print either \\"Yes\\" (without the quotes) if the robot returns to the origin or \\"No\\" (without the quotes) otherwise. Examples Input LR Output Yes Input LL Output No Input RRLL Output Yes Input LRLRLRLRRR Output No Note In the first testcase, the robot moves left and then right, returning to the origin. In the second testcase, the robot moves left twice, not returning to the origin. In the third testcase, the robot moves right twice and left twice, returning to the origin. In the fourth testcase, the robot\'s movements result in a final position not at the origin with five right steps and five left steps in total but misplaced in the sequence.","solution":"def robot_returns_to_origin(movements): Determine if the robot returns to the origin after completing all the steps. Parameters: movements (str): A sequence of characters \'L\' and \'R\'. Returns: str: \\"Yes\\" if the robot returns to the origin, otherwise \\"No\\". return \\"Yes\\" if movements.count(\'L\') == movements.count(\'R\') else \\"No\\""},{"question":"Ana loves playing with strings and patterns. She challenges you to write a function that, given two strings, determines if one string is a rotation of the other. For example, the strings \\"waterbottle\\" and \\"erbottlewat\\" are rotations of each other. The input consists of two strings of alphanumeric characters. You need to check if the second string is a rotation (clockwise and counterclockwise) of the first string and output \\"Yes\\" if it is, and \\"No\\" otherwise. Input The first line of input contains the first string. The second line of input contains the second string. Output A single line containing \\"Yes\\" if the second string is a rotation of the first, otherwise \\"No\\". Constraints 1 ≤ length of string ≤ 1000 SAMPLE INPUT waterbottle erbottlewat SAMPLE OUTPUT Yes","solution":"def is_rotation(s1, s2): Determines if one string is a rotation of the other. if len(s1) != len(s2): return \\"No\\" if not s1: return \\"No\\" # dealing with edge case where both strings are empty combined = s1 + s1 if s2 in combined: return \\"Yes\\" return \\"No\\""},{"question":"You are given an array of integers and a parameter k. A subarray, in this context, is defined as a contiguous block of elements within the array. Your task is to determine if there exists a subarray of length k such that the average of the elements in this subarray is greater than or equal to a given value x. Input The first line contains two integers n (1 ≤ n ≤ 10^5), the length of the array, and k (1 ≤ k ≤ n), the length of the subarray. The second line contains n integers a_i (1 ≤ a_i ≤ 10^9), representing the elements of the array. The third line contains one integer x (1 ≤ x ≤ 10^9), the threshold for the average. Output Output \\"YES\\" (without quotes) if there exists a subarray of length k with an average greater than or equal to x, otherwise output \\"NO\\". Example Input 6 3 1 2 3 4 5 6 4 Output YES Explanation In this example, the subarray [3, 4, 5] has an average of (3+4+5)/3 = 4, which is equal to the threshold x. Hence, the output is \\"YES\\".","solution":"def has_subarray_with_average(arr, n, k, x): Determines if there exists a subarray of length k such that the average of the elements in this subarray is greater than or equal to x. subarray_sum = sum(arr[:k]) if subarray_sum / k >= x: return \\"YES\\" for i in range(k, n): subarray_sum += arr[i] - arr[i - k] if subarray_sum / k >= x: return \\"YES\\" return \\"NO\\" # Example Usage n = 6 k = 3 arr = [1, 2, 3, 4, 5, 6] x = 4 print(has_subarray_with_average(arr, n, k, x)) # Output: YES"},{"question":"Mary is a software engineer who loves solving puzzles during her free time. One interesting puzzle she found involves arranging numbers in a specific pattern. She needs your help to generate a sequence of numbers based on the following rules: 1. The input consists of a single integer `n` (1 ≤ n ≤ 10^4). 2. You must generate a sequence of `n` integers. 3. For each integer `k` in the sequence (1 ≤ k ≤ n), the sequence must satisfy the condition that |a_k - k| is unique for each `k`, where `a_k` is the `k`-th integer in the sequence. Your task is to generate such a sequence of `n` integers. If there are multiple possible solutions, you can print any of them. Input The single line contains a number n (1 ≤ n ≤ 10^4) which is the length of the sequence to generate. Output Print n integers a_i (1 ≤ a_i ≤ n) which form the sequence according to the rules mentioned above. Example Input 3 Output 3 1 2 Input 4 Output 4 1 3 2","solution":"def generate_sequence(n): Generates a sequence of integers such that |a_k - k| is unique for each k. Parameters: - n: the length of the sequence to generate Returns: - A list of n integers satisfying the condition that |a_k - k| is unique for each k sequence = [0] * n for k in range(1, n + 1): if k % 2 == 1: sequence[k - 1] = (k + 1) // 2 else: sequence[k - 1] = n - k // 2 + 1 return sequence # Example usage: # n = 3 # print(generate_sequence(n)) # Output might be: [2, 2, 3]"},{"question":"You are given a list of integers where every element appears three times except for one, which appears exactly once. Your task is to find the element that appears only once. Write a function `findUniqueElement` that takes in an array of integers `arr` and returns the integer that appears exactly once. Your solution should have a linear runtime complexity (i.e., O(n)) and use constant extra space (i.e., O(1)). Input: An array of integers `arr`, where 1 <= len(arr) <= 10^4 Output: The integer that appears only once. **Example Input and Output:** SAMPLE INPUT 1 ```python [2, 2, 3, 2] ``` SAMPLE OUTPUT 1 ```python 3 ``` SAMPLE INPUT 2 ```python [0, 1, 0, 1, 0, 1, 99] ``` SAMPLE OUTPUT 2 ```python 99 ```","solution":"def findUniqueElement(arr): Finds the element that appears exactly once in an array where each other element appears three times. Uses bit manipulation to achieve O(n) time complexity and O(1) space complexity. ones, twos = 0, 0 for num in arr: # First appearance: # Add num to ones if it is not there in twos ones = (ones ^ num) & ~twos # Second appearance: # Add num to twos if it is not there in ones twos = (twos ^ num) & ~ones return ones"},{"question":"In a grid of size m times n, we can move in four possible directions: up, down, left, and right. Each cell in the grid contains a number that represents a travel cost. The objective is to find the minimum travel cost from the top-left corner (0,0) to the bottom-right corner (m-1, n-1). You can only move to the adjacent cells. Write a function `min_travel_cost` that takes an integer grid `cost` of size m times n and returns the minimum travel cost to reach the bottom-right corner. # Constraints * 1 leq m, n leq 100 * 1 leq cost[i][j] leq 1000 # Function Signature `def min_travel_cost(cost: List[List[int]]) -> int:` # Input The input is a 2D list of integers: * `cost`: A list of lists of integers where `cost[i][j]` represents the cost to travel through cell (i, j). # Output Return an integer representing the minimum travel cost from the top-left to the bottom-right corner. # Example Input ``` cost = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] ``` Output ``` 7 ``` # Explanation The path with minimum cost is `1 → 3 → 1 → 1 → 1` with a total cost of 1 + 3 + 1 + 1 + 1 = 7.","solution":"from typing import List import heapq def min_travel_cost(cost: List[List[int]]) -> int: m, n = len(cost), len(cost[0]) # Directions for moving in 4 possible ways (up, down, left, right) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Priority queue to store (current_cost, row, col) pq = [(cost[0][0], 0, 0)] min_costs = [[float(\'inf\')] * n for _ in range(m)] min_costs[0][0] = cost[0][0] while pq: current_cost, x, y = heapq.heappop(pq) if x == m - 1 and y == n - 1: return current_cost for direction in directions: nx, ny = x + direction[0], y + direction[1] if 0 <= nx < m and 0 <= ny < n: new_cost = current_cost + cost[nx][ny] if new_cost < min_costs[nx][ny]: min_costs[nx][ny] = new_cost heapq.heappush(pq, (new_cost, nx, ny)) return min_costs[m-1][n-1]"},{"question":"You are given a series of towers in a line, each with a certain height. You need to determine if you can modify the heights of the towers to make them all unique. In each operation, you are allowed to reduce the height of any tower by 1 unit. You cannot increase the height of any tower. Write a function that determines the minimum number of operations needed to make all tower heights unique or determines if it is not possible to make the heights unique. Input The first line contains a single integer n (1 ≤ n ≤ 2000) - the number of towers. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 105) - the heights of the towers. Output Print the minimum number of operations needed to make all tower heights unique, or -1 if it is not possible. Examples Input 4 5 3 5 7 Output 1 Input 3 1 2 3 Output 0 Input 5 4 4 4 4 4 Output 10","solution":"def min_operations_to_unique_heights(n, heights): heights.sort() operations = 0 for i in range(1, n): if heights[i] <= heights[i - 1]: needed_increase = heights[i - 1] - heights[i] + 1 heights[i] += needed_increase operations += needed_increase return operations"},{"question":"Median Maintenance Problem Alice is given a list of N integers and she wants to determine the median of the list after each new integer is added. The median is the middle value in an ordered integer list. If the size of the list is even, the median is the average of the two middle elements. Alice wants an efficient way to maintain the list and calculate the median after each insertion. Input Format The input is given in the following format: ``` N a_1 a_2 ... a_N ``` - The first line contains a single integer N, the total number of integers. - Each of the next N lines contains a single integer a_i, representing the next integer to be added to the list. Constraints - 1 ≤ N ≤ 100,000 - -10^9 ≤ a_i ≤ 10^9 (1 ≤ i ≤ N) Output Format For each new insertion, print the median of the list after the new integer has been added. Each median should be printed on a new line. Example 1 Input: ``` 6 5 15 1 3 8 7 ``` Output: ``` 5 10 5 4 5 6 ``` Example 2 Input: ``` 4 1 2 3 4 ``` Output: ``` 1 1.5 2 2.5 ``` Explanation: - For the first example, the list evolves as follows: [5], [5, 15], [1, 5, 15], [1, 3, 5, 15], [1, 3, 5, 8, 15], [1, 3, 5, 7, 8, 15] - The median for each step is 5, 10, 5, 4, 5, 6 (after adding each integer respectively). - For the second example, the list evolves as follows: [1], [1, 2], [1, 2, 3], [1, 2, 3, 4] - The median for each step is 1, 1.5, 2, 2.5 (after adding each integer respectively).","solution":"import heapq def median_maintenance(arr): This function takes a list of integers and returns a list of medians obtained after each insertion. min_heap = [] # min heap to store the right half of the array max_heap = [] # max heap to store the left half of the array result = [] for num in arr: if not max_heap or num < -max_heap[0]: heapq.heappush(max_heap, -num) # we invert the num to use min-heap as a max-heap else: heapq.heappush(min_heap, num) # balance the heaps if len(max_heap) > len(min_heap) + 1: heapq.heappush(min_heap, -heapq.heappop(max_heap)) elif len(min_heap) > len(max_heap): heapq.heappush(max_heap, -heapq.heappop(min_heap)) # calculate the median if len(max_heap) > len(min_heap): median = -max_heap[0] else: median = (-max_heap[0] + min_heap[0]) / 2.0 result.append(median) return result"},{"question":"Sasha has received a sequence of integers as part of a message. However, to decode the message, she needs to find all contiguous subarrays within the sequence that sum up to a given number k. Your task is to help Sasha identify the number of such subarrays. Input The first line contains two integers, n (1 ≤ n ≤ 105) and k (|k| ≤ 109). The second line contains n integers, each an element of the sequence ai (-109 ≤ ai ≤ 109). Output Print a single integer representing the number of contiguous subarrays that sum up to k. Examples Input 5 5 1 2 3 4 5 Output 2 Input 6 0 1 -1 1 -1 1 -1 Output 9 Explanation In the first example, there are two subarrays that sum up to 5: - The subarray [2, 3] has a sum of 5. - The subarray [5] has a sum of 5. In the second example, there are nine subarrays that sum up to 0: - The subarrays [-1, 1], [1, -1], and so on up to the full subarray [1, -1, 1, -1, 1, -1].","solution":"def find_subarrays_with_sum(n, k, arr): Returns the number of contiguous subarrays within the sequence that sum up to k. count = 0 cum_sum = 0 sum_freq = {0: 1} for num in arr: cum_sum += num if cum_sum - k in sum_freq: count += sum_freq[cum_sum - k] if cum_sum in sum_freq: sum_freq[cum_sum] += 1 else: sum_freq[cum_sum] = 1 return count"},{"question":"You are managing the inventory of a bookstore and need to keep track of book sales and restocks. Each book in the inventory has a unique ID. Write a program that processes a series of operations on the bookstore’s inventory. There are two types of operations: 1. Sale: Deduct a certain number of copies of a book (identified by its ID) from the inventory. 2. Restock: Add a certain number of copies of a book (identified by its ID) to the inventory. The program should be able to handle these operations and return the final quantity of each book in the inventory after all operations have been processed. Input The input consists of multiple lines. The first line contains an integer N (1 ≤ N ≤ 100), the number of operations to be performed. The following N lines describe an operation, either a sale or restock. Each line contains three space-separated values: - A string denoting the type of operation: \\"sale\\" or \\"restock\\" - An integer bookID (1 ≤ bookID ≤ 1000), the unique ID of the book - An integer quantity (1 ≤ quantity ≤ 100), the number of copies to be sold or restocked Initially, the bookstore has a quantity of 0 copies for each book. Output For each book ID that has been affected by any operation, output a line containing the book ID and its final quantity in the inventory, in the order of their IDs. Input / Output Example Input ``` 5 sale 1 3 restock 3 7 sale 2 1 restock 1 5 sale 1 2 ``` Output ``` 1 0 2 -1 3 7 ``` Explanation: Initially, all book quantities are 0. 1. \\"sale 1 3\\" decreases book 1’s quantity by 3 (quantity becomes -3). 2. \\"restock 3 7\\" increases book 3\'s quantity by 7. 3. \\"sale 2 1\\" decreases book 2\'s quantity by 1 (quantity becomes -1). 4. \\"restock 1 5\\" increases book 1’s quantity by 5 (quantity becomes 2). 5. \\"sale 1 2\\" decreases book 1’s quantity by 2 (quantity becomes 0). The resulting quantities for books 1, 2, and 3 are 0, -1, and 7, respectively. Thus, the output is: 1 0 2 -1 3 7","solution":"def process_inventory_operations(operations): inventory = {} for operation in operations: op_type, bookID, quantity = operation bookID = int(bookID) quantity = int(quantity) if bookID not in inventory: inventory[bookID] = 0 if op_type == \\"sale\\": inventory[bookID] -= quantity elif op_type == \\"restock\\": inventory[bookID] += quantity result = [] for bookID in sorted(inventory.keys()): result.append((bookID, inventory[bookID])) return result"},{"question":"You are given a list of pairs of strings. Each pair consists of a student\'s name and their associated project title. Your task is to return a dictionary where each key is a student name from the list and the value is a list of all the project titles associated with that particular student. The order of the project titles in the list should be the same as they appear in the input. Input The first line contains an integer n, the number of pairs. Each of the following n lines contains a pair consisting of a student\'s name and their project title. The student\'s name and project title are separated by a space. The student\'s name contains only lowercase English letters and the project titles are composed of lowercase English letters, spaces, and digits. Each string\'s length does not exceed 100 characters. Output Print the resulting dictionary where each key is a student\'s name, and the value is a list of all their project titles in the order they appeared in the input. Examples Input 5 alice project1 bob project2 alice project2 charlie project3 bob project1 Output {\\"alice\\": [\\"project1\\", \\"project2\\"], \\"bob\\": [\\"project2\\", \\"project1\\"], \\"charlie\\": [\\"project3\\"]} Input 4 john code4fun jane buildit john hackathon jane innovate Output {\\"john\\": [\\"code4fun\\", \\"hackathon\\"], \\"jane\\": [\\"buildit\\", \\"innovate\\"]} Input 3 mel projectx mel projecty mel projectz Output {\\"mel\\": [\\"projectx\\", \\"projecty\\", \\"projectz\\"]} Note: The order of project titles is preserved from the input.","solution":"def extract_student_projects(n, pairs): Given a number of pairs of student names and project titles, return a dictionary where each key is a student\'s name and the value is a list of their associated project titles. Parameters: n (int): Number of pairs. pairs (list): List of tuples, each containing a student\'s name and a project title. Returns: dict: A dictionary with student names as keys and lists of project titles as values. project_dict = {} for name, title in pairs: if name in project_dict: project_dict[name].append(title) else: project_dict[name] = [title] return project_dict"},{"question":"Problem Write a function that determines if a given list of integers is monotonic. A list is said to be monotonic if it is either entirely non-increasing or non-decreasing. A list is non-increasing if the elements are either constantly decreasing or remaining the same, i.e., for all i, arr[i] >= arr[i+1]. A list is non-decreasing if the elements are either constantly increasing or remaining the same, i.e., for all i, arr[i] <= arr[i+1]. Your task is to write a function `is_monotonic(arr)` which takes a list of integers `arr` and returns `True` if the list is monotonic, and `False` otherwise. Constraints - The list will contain at least 1 and at most 10^5 integers. - The integers in the list will be in the range -10^9 to 10^9. Input - A list of integers. Output - A boolean value: `True` if the list is monotonic, `False` otherwise. Examples Input: [1, 2, 2, 3] Output: True Input: [6, 5, 4, 4] Output: True Input: [1, 3, 2] Output: False Input: [1, 1, 1] Output: True","solution":"def is_monotonic(arr): Determines if the list of integers is monotonic. Parameters: arr (list): The list of integers. Returns: bool: True if the list is monotonic, False otherwise. if len(arr) <= 1: return True is_increasing = True is_decreasing = True for i in range(1, len(arr)): if arr[i] > arr[i - 1]: is_decreasing = False if arr[i] < arr[i - 1]: is_increasing = False return is_increasing or is_decreasing"},{"question":"Alex is an avid gardener who loves to grow different types of flowers in his garden. He recently bought several packets of seeds, each containing a fixed number of seeds. However, to ensure the best growth, Alex wants to plant each type of flower in a specific arrangement. Each type of flower should be planted in clusters of a certain size. Given the number of seeds Alex has and the cluster size for each type of flower, determine the minimum number of clusters Alex can form for each type of flower such that all the seeds are planted. Write a function that, for each flower type, calculates the minimum number of clusters required. Input - The first line contains an integer T, the number of flower types. - The next T lines each contain two space-separated integers, S and C: - S is the number of seeds for that flower type. - C is the required number of seeds per cluster. Output - For each flower type, output a single line containing the minimum number of clusters required. Constraints - 1 ≤ T ≤ 100,000 - 1 ≤ S ≤ 1,000,000,000,000 - 1 ≤ C ≤ 1,000,000 Example Input: 3 15 4 20 5 7 3 Output: 4 4 3 Explanation In the first case, Alex has 15 seeds and wants to plant them in clusters of 4. He would need 4 clusters: three clusters of 4 seeds (total 12) and one cluster with the remaining 3 seeds. In the second case, he needs four clusters of 5 seeds each, totaling 20 seeds. In the third case, he needs three clusters: two clusters of 3 seeds (totaling 6) and one cluster with the remaining 1 seed.","solution":"def min_clusters(T, flower_data): Given the number of seed types and their respective seeds and cluster sizes, determine the minimum number of clusters required for each type. Parameters: T (int): The number of flower types. flower_data (List[Tuple[int, int]]): A list of tuples where each tuple contains: S (int): The number of seeds for that flower type. C (int): The required number of seeds per cluster. Returns: List[int]: A list containing the minimum number of clusters required for each type. result = [] for S, C in flower_data: clusters = (S + C - 1) // C # This is equivalent to math.ceil(S / C) result.append(clusters) return result"},{"question":"A school is organizing a treasure hunt activity. The treasure hunt involves collecting hidden treasures from various locations on a grid map. The grid map is represented as a 2D array where each cell contains an integer indicating the amount of treasure at that location. The participants start from the top-left corner of the grid (i.e., the cell at the position (0, 0)) and can move either to the right or downward to reach the bottom-right corner of the grid (i.e., the cell at the position (n-1, m-1)). The task is to find the maximum amount of treasure that can be collected starting from the top-left corner and reaching the bottom-right corner. Write a program to solve this problem. Constraints * 1 ≤ n, m ≤ 100 * 0 ≤ grid[i][j] ≤ 10^9, where grid[i][j] represents the amount of treasure in the cell (i, j) * The input grid will always have at least one cell. Input Input is given from Standard Input in the following format: n m grid_1_1 grid_1_2 ... grid_1_m grid_2_1 grid_2_2 ... grid_2_m ... grid_n_1 grid_n_2 ... grid_n_m Output Print the maximum amount of treasure that can be collected as an integer. Example Input 3 3 1 3 1 1 5 1 4 2 1 Output 12 Explanation In this example, the optimal path to collect the maximum treasure is: 1 → 3 → 5 → 2 → 1, yielding a total treasure of 12.","solution":"def max_treasure(n, m, grid): def find_max_treasure(grid, n, m): dp = [[0] * m for _ in range(n)] dp[0][0] = grid[0][0] for i in range(n): for j in range(m): if i > 0: dp[i][j] = max(dp[i][j], dp[i-1][j] + grid[i][j]) if j > 0: dp[i][j] = max(dp[i][j], dp[i][j-1] + grid[i][j]) return dp[-1][-1] return find_max_treasure(grid, n, m)"},{"question":"# Maximum Candy Collection Lucy is fond of collecting candies and she has a peculiar way to do it. There is a 2D grid of size n x m where each cell (i, j) represents the number of candies in that cell. Lucy starts at the top-left cell (1, 1) and wants to collect as many candies as possible until she reaches the bottom-right cell (n, m). From any cell (i, j), she can move either right to (i, j+1) or down to (i+1, j). Determine the maximum number of candies Lucy can collect. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns of the grid. Each of the next n lines contains m integers, where the j-th integer in the i-th line is candy[i][j] (1 ≤ candy[i][j] ≤ 1000) — the number of candies in the cell (i, j). Output Print a single integer — the maximum number of candies Lucy can collect on her way to the bottom-right cell. Examples Input 3 3 1 2 3 4 5 6 7 8 9 Output 29 Input 2 2 1 2 3 4 Output 8 Note In the first sample, the optimal path for Lucy to collect maximum candies is to go right from (1, 1) to (1, 2) to (1, 3), move down to (2, 3), and continue down to (3, 3), collecting a total of 1 + 2 + 3 + 6 + 9 + 8 + 7 = 36 candies. In the second sample, the optimal path for Lucy is to go right from (1, 1) to (1, 2), move down to (2, 2), collecting a total of 1 + 2 + 4 + 1 = 8 candies.","solution":"def max_candies_collect(n, m, candy): dp = [[0] * m for _ in range(n)] dp[0][0] = candy[0][0] for i in range(1, n): dp[i][0] = dp[i-1][0] + candy[i][0] for j in range(1, m): dp[0][j] = dp[0][j-1] + candy[0][j] for i in range(1, n): for j in range(1, m): dp[i][j] = candy[i][j] + max(dp[i-1][j], dp[i][j-1]) return dp[-1][-1]"},{"question":"In Techlandia, there are a series of uniquely designed buildings, each having floors that are incrementally numbered. Each floor has a different requirement established for payout tickets to gain access, and one can only use tickets with values of 1 or 2 units. Marcia is designing an algorithm that will help visitors determine the number of ways they can distribute exactly N payout tickets to reach the top floor of a building. # Input - The first line of the input will contain an integer T, indicating the number of test cases. - The following T lines will each contain an integer N, which represents the exact number of payout tickets one needs to distribute. # Output - For each test case, output the number of ways to distribute exactly N tickets to reach the top floor using 1-unit and 2-unit tickets. # Constraints 1 ≤ T ≤ 100 0 ≤ N ≤ 10^5 # Example Input: 3 4 5 6 Output: 5 8 13 # Explanation For Test Case 1: The number of ways to distribute exactly 4 tickets can be: (1,1,1,1), (1,1,2), (1,2,1), (2,1,1) and (2,2). Hence, there are 5 ways. For Test Case 2: The number of ways to distribute exactly 5 tickets can be found by: (1,1,1,1,1), (1,1,1,2), (1,1,2,1), (1,2,1,1), (2,1,1,1), (2,2,1), (2,1,2) and (1,2,2). Hence, there are 8 ways. For Test Case 3: Following the same logic, there are 13 ways to distribute exactly 6 tickets.","solution":"def count_ways_to_reach_top(N): This function calculates the number of ways to distribute exactly N tickets to reach the top floor using 1-unit and 2-unit tickets. if N == 0: return 1 dp = [0] * (N + 1) dp[0] = 1 # Base case: 1 way to reach the 0-th floor (do nothing) for i in range(1, N + 1): dp[i] += dp[i - 1] if i >= 2: dp[i] += dp[i - 2] return dp[N] def number_of_ways(T, test_cases): This function processes multiple test cases. results = [] for N in test_cases: results.append(count_ways_to_reach_top(N)) return results"},{"question":"Fedor loves playing with strings. Recently, he came across a problem where he needs to determine the minimal number of operations required to make two strings anagrams of each other. An anagram of a string is formed by rearranging the characters of the string using all the original characters exactly once. In one operation, Fedor can choose any character from one of the strings and change it to any other character. Fedor thought of you to help him with this problem. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains two strings a and b (1 ≤ |a|, |b| ≤ 100), the strings consist of lowercase English letters. Output For each test case, print the minimal number of operations required to make the two strings anagrams of each other. If it is impossible to make the strings anagrams, output -1. Examples Input 3 abc cba aabbcc dddeee abcd xyz Output 0 6 -1 Explanation In the first example, the strings are already anagrams. In the second example, at least two characters in each character set (\'a\' to \'d\', \'b\' to \'e\', \'c\' to \'e\') need to be changed. In the third example, the strings cannot be made into anagrams due to unmatched letter counts.","solution":"def min_operations_to_anagram(t, test_cases): results = [] for a, b in test_cases: if len(a) != len(b): results.append(-1) continue count_a = {} count_b = {} for char in a: if char in count_a: count_a[char] += 1 else: count_a[char] = 1 for char in b: if char in count_b: count_b[char] += 1 else: count_b[char] = 1 operations = 0 for char in count_a: if char in count_b: operations += abs(count_a[char] - count_b[char]) else: operations += count_a[char] for char in count_b: if char not in count_a: operations += count_b[char] results.append(operations // 2) return results"},{"question":"Peter is trying to encode a message. To do this, he picks a word and applies the following operations: 1. He converts the word to its ASCII representation, where each character is replaced by its ASCII value. 2. He concatenates these values into a single string of digits. 3. Finally, he splits the string of digits into pairs. Peter now asks your help to decode a message. Given the list of pairs of digits representing ASCII values, reconstruct the original word. The pairs will always form valid ASCII values corresponding to uppercase and lowercase English letters (A-Z, a-z). Input: - First line contains T, which is the number of test cases. - T lines follow each containing a space-separated list of digit pairs representing ASCII values. Output: For each test case, output the decoded word. Constraints: 1 ≤ T ≤ 10 1 ≤ Length of each list of digit pairs ≤ 100 SAMPLE INPUT 3 65 66 67 97 98 99 72 105 SAMPLE OUTPUT ABC abc Hi Explanation: - In the first case, the pairs \\"65\\", \\"66\\", \\"67\\" correspond to ASCII values for \'A\', \'B\', and \'C\'. - In the second case, the pairs \\"97\\", \\"98\\", \\"99\\" correspond to ASCII values for \'a\', \'b\', and \'c\'. - In the third case, the pairs \\"72\\", \\"105\\" correspond to ASCII values for \'H\' and \'i\'.","solution":"def decode_message(test_cases): results = [] for case in test_cases: decoded_word = \'\'.join(chr(int(pair)) for pair in case) results.append(decoded_word) return results def parse_input(input_data): lines = input_data.split(\'n\') T = int(lines[0]) test_cases = [line.split() for line in lines[1:T+1]] return T, test_cases"},{"question":"Given a string pattern `s` that contains only two types of characters, \'A\' and \'B\'. You are required to transform the string such that no two adjacent characters are the same, while making as few changes to the string as possible. Write a function `minTransformations(s)` that takes a string `s` as input and returns the minimum number of changes needed to achieve the transformation. # Input - A single string `s` of length between 1 and 1000, composed only of characters \'A\' and \'B\'. # Output - An integer, the minimum number of changes needed. # Example **Input:** ``` AABBA ``` **Output:** ``` 2 ``` **Explanation:** Change the string `AABBA` so that no two adjacent characters are the same: - Change the third character to \'B\': `AABBA` -> `ABBA`. - Change the fourth character to \'A\': `ABBA` -> `ABABA`. Thus, minimum changes required are 2. # Additional Example **Input:** ``` ABAB ``` **Output:** ``` 0 ``` **Explanation:** The string `ABAB` already has no two adjacent characters that are the same, so no changes are needed. Note: Focus on edge cases where string might be fully homogeneous like \\"AAAAAA\\" or perfectly alternating like \\"ABABAB\\".","solution":"def minTransformations(s): Returns the minimum number of changes needed to transform the string `s` such that no two adjacent characters are the same. if not s: return 0 changes = 0 n = len(s) for i in range(1, n): if s[i] == s[i-1]: # There\'s a duplication, we should change this character. changes += 1 return changes"},{"question":"You are given a string consisting of lowercase English letters. Your task is to remove enough letters to ensure that no three consecutive letters are the same. Input The input consists of one line containing the string of length 1 to 100000 characters. Output Print the string after removing the minimal number of letters such that no three consecutive letters in the string are the same. If several answers are possible, print any of them. Examples Input aabbbac Output aabbac Input mmmnnmmm Output mmnnmm Note In the first example, there are no three consecutive letters the same. In the second example, \\"mmmnnmmm\\", after removing one \\"m\\", the result is \\"mmnnmm\\". Another valid answer could be \\"mnnmmm\\" by removing the first \\"m\\".","solution":"def remove_consecutive_triples(s): Removes the minimal number of letters such that no three consecutive letters in the string are the same. Parameters: s (str): The input string. Returns: str: The resulting string with no three consecutive letters the same. result = [] for char in s: if len(result) >= 2 and char == result[-1] == result[-2]: continue result.append(char) return \\"\\".join(result)"},{"question":"Longest Increasing Subsequence (LIS) problem Given an integer array nums, find and return the length of the longest strictly increasing subsequence. A subsequence is a sequence derived by deleting some or no elements of the array without changing the order of the remaining elements. For example, [3, 6, 2, 7] is a subsequence of [0, 3, 1, 6, 2, 2, 7]. Input format - nums: an integer array Constraint * 1 <= nums.length <= 2 x 10^5 * -10^4 <= nums[i] <= 10^4 Output format Print a single integer representing the length of the longest strictly increasing subsequence. Input example 1 [10, 9, 2, 5, 3, 7, 101, 18] Output example 1 4 Explanation: The longest increasing subsequence is [2, 3, 7, 101]. Input example 2 [0, 1, 0, 3, 2, 3] Output example 2 4 Explanation: The longest increasing subsequence is [0, 1, 2, 3]. Input example 3 [7, 7, 7, 7, 7, 7, 7] Output example 3 1 Explanation: The longest increasing subsequence is [7]. Input example 4 [4, 10, 4, 3, 8, 9] Output example 4 3 Explanation: The longest increasing subsequence is [4, 8, 9]. Example Input [10, 9, 2, 5, 3, 7, 101, 18] Output 4","solution":"def length_of_LIS(nums): Returns the length of the longest strictly increasing subsequence. if not nums: return 0 # Initialize an array to keep track of the longest increasing subsequence lengths dp = [1] * len(nums) # Loop through each number in nums for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) # The length of the longest increasing subsequence return max(dp)"},{"question":"You are given a string representing a small text file that contains words separated by spaces or newlines. You want to analyze the word frequency in this text file and perform an operation on it. In particular, you want to find out the k most frequent words in the text file. If two words have the same frequency, the word which appears first lexicographically should take precedence. Write a function that takes a string `text` and an integer `k` as input and returns a list of the `k` most frequent words. # Input - The input consists of a single string `text` (1 ≤ |text| ≤ 1000000), representing the content of the small text file. - The input will also contain an integer `k` (1 ≤ k ≤ 1000), representing the number of most frequent words to find. # Output - The output should be a list of strings, representing the `k` most frequent words, ordered by their frequency (highest to lowest). If multiple words have the same frequency, they should be ordered lexicographically. # Example Input ```plaintext \\"the quick brown fox jumps over the lazy dog the quick brown dog jumps over the quick fox\\" 3 ``` Output ```plaintext [\\"the\\", \\"quick\\", \\"brown\\"] ``` Explanation In the given input text, the word frequencies are as follows: - \'the\' appears 3 times, - \'quick\' appears 3 times, - \'brown\' appears 2 times, - \'fox\' appears 2 times, - \'jumps\' appears 2 times, - \'over\' appears 2 times, - \'dog\' appears 2 times, - \'lazy\' appears 1 time. The `k=3` most frequent words are \\"the\\", \\"quick\\", and \\"brown\\", ordered by their frequency and lexicographically.","solution":"from collections import Counter def most_frequent_words(text, k): Returns the k most frequent words in the given text. :param text: A string representing the text content. :param k: An integer representing the number of top frequent words to retrieve. :return: A list of k most frequent words ordered by their frequency and lexicographically. # Splitting the text into words based on spaces and newlines words = text.split() # Counting the frequencies of each word word_counts = Counter(words) # Sorting the words by frequency and lexicographically sorted_words = sorted(word_counts.items(), key=lambda item: (-item[1], item[0])) # Extracting the top k words top_k_words = [word for word, count in sorted_words[:k]] return top_k_words"},{"question":"You are given a list of N integers, where each integer in the list occurs either once or twice. Your task is to find the largest integer that occurs exactly once in the list. If all the integers occur twice, print -1. Constraints * 1≤N≤10^5 * 1≤Element≤10^9 Input Input is given from Standard Input in the following format: N Element_1 Element_2 ... Element_N Output Print the largest integer that occurs exactly once in the list, or -1 if no such integer exists. Examples Input 5 1 2 3 4 2 Output 4 Input 6 5 7 5 3 7 8 Output 8 Input 4 2 3 2 3 Output -1","solution":"def largest_single_occurrence(n, elements): Returns the largest integer that occurs exactly once in the list of elements, or -1 if no such integer exists. :param n: int, the number of integers in the list :param elements: list of int, the list of integers :return: int, the largest integer that occurs exactly once, or -1 if no such integer exists from collections import Counter # Count occurrences of each element count = Counter(elements) # Filter out elements that occur exactly once single_occurrence = [num for num, cnt in count.items() if cnt == 1] # Return the largest element from those that occur once, or -1 if none exist if single_occurrence: return max(single_occurrence) else: return -1"},{"question":"Given a list of N integers, you can perform the following operation as many times as you want: Choose any two adjacent elements and replace both with their sum. Your goal is to make the maximum possible element in the resulting list as small as possible. Determine this minimum possible value of the maximum element. Constraints * 2 leq N leq 50 * 1 leq a_i leq 1000 * All values in the input are integers. Input Input is given from Standard Input in the following format: ``` N a_1 a_2 ldots a_N ``` Output Print a single integer representing the minimum possible value of the maximum element in the list after performing the operations optimally. Examples Input ``` 3 3 1 2 ``` Output ``` 6 ``` Input ``` 5 5 1 3 4 2 ``` Output ``` 15 ``` Input ``` 2 1 1000 ``` Output ``` 1001 ```","solution":"def min_max_after_operations(N, arr): Given a list of N integers, this function returns the minimum possible value of the maximum element in the list after performing the sum operation optimally. return sum(arr)"},{"question":"In a chess game, each player can place several knights on a grid. A knight can move in an \\"L\\" shape: two squares in one direction and then one square perpendicular, or one square in one direction and then two squares perpendicular. Given the positions of two knights, determine if they can attack each other. Input The input contains two lines. Each line contains two integers x and y (−1000 ≤ x, y ≤ 1000) representing the coordinates of the two knights. Output Print \\"Yes\\" if the knights can attack each other. Otherwise, print \\"No\\". Example Input 0 0 1 2 Output Yes Input 0 0 2 2 Output No","solution":"def can_knights_attack_each_other(x1, y1, x2, y2): Determines if two knights on a chessboard can attack each other based on their positions. Parameters: x1, y1: Coordinates of the first knight x2, y2: Coordinates of the second knight Returns: \\"Yes\\" if the knights can attack each other, \\"No\\" otherwise # List all possible moves of a knight from a given position knight_moves = [ (2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2) ] for move in knight_moves: new_x = x1 + move[0] new_y = y1 + move[1] if new_x == x2 and new_y == y2: return \\"Yes\\" return \\"No\\""},{"question":"A software development company is designing a new traffic management system for a small town. The town has a number of parking lots and streets connecting them. Each street has a certain traversal time, and each parking lot has a maximum number of available spaces. The town planners want to ensure that vehicles can move from any parking lot to any other parking lot in the shortest possible time. Your task is to write a program that finds the shortest path times between all pairs of parking lots and also checks if the capacities of the parking lots are sufficient for given demands. Input The first line of the input provides the number of test cases, T. For each test case, the first line consists of two integers, N and M, where N (1 ≤ N ≤ 100) is the number of parking lots and M (0 ≤ M ≤ 1000) is the number of streets connecting them. The following N lines each contain one integer representing the capacity of each parking lot. The next M lines each contain three integers, U, V, and W (0 ≤ U, V < N, 1 ≤ W ≤ 1000), which specifies that there is a street connecting the U-th and V-th parking lots with a traversal time of W. The next line contains N integers representing the demand at each parking lot. Output For each test case, print \\"Case #x:\\" where x is the test case number (starting from 1). Then print the matrix of shortest path times between all pairs of parking lots. After the matrix, print \\"Sufficient\\" if all parking lots can accommodate their aforementioned demands, otherwise print \\"Insufficient\\". Example Input 1 4 5 3 2 4 1 0 1 4 0 2 9 1 2 2 1 3 5 2 3 1 2 1 2 1 Output Case #1: 0 4 6 7 4 0 2 3 6 2 0 1 7 3 1 0 Sufficient","solution":"def floyd_warshall(n, edges): inf = float(\'inf\') dist = [[inf] * n for _ in range(n)] for i in range(n): dist[i][i] = 0 for u, v, w in edges: dist[u][v] = w dist[v][u] = w for k in range(n): for i in range(n): for j in range(n): if dist[i][k] + dist[k][j] < dist[i][j]: dist[i][j] = dist[i][k] + dist[k][j] return dist def check_sufficiency(capacities, demands): for cap, demand in zip(capacities, demands): if cap < demand: return \\"Insufficient\\" return \\"Sufficient\\" def traffic_management_system(test_cases): results = [] for t, (n, m, capacities, edges, demands) in enumerate(test_cases, 1): dist = floyd_warshall(n, edges) sufficient = check_sufficiency(capacities, demands) results.append(f\\"Case #{t}:\\") for row in dist: results.append(\\" \\".join(map(str, row))) results.append(sufficient) return \\"n\\".join(results)"},{"question":"A “Perfect Number” is a positive integer that is equal to the sum of its proper positive divisors, excluding itself. For example, 6 is a perfect number because 1 + 2 + 3 = 6, and 28 is a perfect number because 1 + 2 + 4 + 7 + 14 = 28. You need to determine the k-th perfect number for a given k, where perfect numbers are ordered by their values in ascending order. Input The first line contains an integer k (1 ≤ k ≤ 4). Output Print a single integer, the k-th perfect number. Examples Input 1 Output 6 Input 2 Output 28 Input 3 Output 496 Input 4 Output 8128 Note In the first example, the first perfect number is 6. In the second example, the second perfect number is 28. In the third example, the third perfect number is 496. In the fourth example, the fourth perfect number is 8128.","solution":"def kth_perfect_number(k): Returns the k-th perfect number. Args: k (int): The order of the perfect number (1 ≤ k ≤ 4) Returns: int: The k-th perfect number perfect_numbers = [6, 28, 496, 8128] return perfect_numbers[k - 1]"},{"question":"Henry is a student in a class where group projects are assigned. His class has exactly n students, and the teacher divides the students into groups of exactly m students each. Each group is assigned one project. Henry knows that cooperative skills are very important, so he wants the project work to be distributed as evenly as possible among the students. Henry believes that the minimum level of cooperation required for an effective project teamwork should be at least a certain number k. Henry has a list that indicates how cooperative each student is. He wants to know if it\'s possible to form groups of exactly m students each such that every group has an average cooperation level of at least k. If it\'s possible, he also wants to know the maximum possible total sum of cooperation levels of all groups. If forming such groups is not possible, he needs to know that as well. Can you help Henry solve this problem? Input The first line of the input contains three integers n, m, and k (1 ≤ m ≤ n ≤ 100, 1 ≤ k ≤ 100). The second line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 100) — the cooperation levels of the students. Output If it\'s possible to form the groups such that each group has an average cooperation level of at least k, print a single integer — the maximum possible total sum of the cooperation levels of all groups. Otherwise, print -1. Examples Input 6 3 2 3 2 5 1 4 6 Output 21 Input 4 2 6 7 3 8 5 Output -1 Note In the first example, the groups can be formed as follows: - Group 1: (3, 2, 5), total cooperation = 10 - Group 2: (1, 4, 6), total cooperation = 11 The total cooperation of both groups is 21, and both groups meet the average requirement of at least 2 cooperation. In the second example, it\'s not possible to form groups where each has an average cooperation level of at least 6.","solution":"def max_total_cooperation(n, m, k, cooperations): cooperations.sort(reverse=True) # Check if we can form groups groups_count = n // m remaining_students = n % m for i in range(groups_count): group_cooperation = sum(cooperations[i * m: (i + 1) * m]) if (group_cooperation / m) < k: return -1 total_cooperation = sum(cooperations[:groups_count * m]) return total_cooperation"},{"question":"You are given a set of gears where each gear is defined by the number of teeth it has. These gears can be connected in pairs such that no two gears in a pair have the same number of teeth. When two gears are paired, they will rotate together at the same speed, with the input gear driving the output gear. The task is to find all the valid pairs of gears from the given set such that no two gears in a pair have the same number of teeth and each gear from the input set is used exactly once in a pair. Write a function `find_gear_pairs` that takes a list of integers representing the number of teeth on each gear and returns a list of tuples, where each tuple contains a pair of gears. If it is not possible to pair all gears, the function should return an empty list. # Input - A list of integers `gears` where each integer represents the number of teeth on a gear. - The length of the list will be between 2 and 1000 inclusive. - Each integer in the list will be between 1 and 100 inclusive. # Output - A list of tuples where each tuple contains two integers representing a pair of gears. - If no valid pairing is possible, return an empty list. # Examples Example 1 **Input:** ```python gears = [1, 2, 3, 4] ``` **Output:** ```python [(1, 2), (3, 4)] ``` Example 2 **Input:** ```python gears = [1, 1, 2, 2, 3, 3] ``` **Output:** ```python [] ``` Example 3 **Input:** ```python gears = [5, 10, 15, 20, 25, 30] ``` **Output:** ```python [(5, 10), (15, 20), (25, 30)] ``` # Constraints - The length of the list `gears` will be even, ensuring that an attempt to pair up all gears is possible. - If multiple valid pairings exist, returning any one of them is acceptable. # Function signature ```python def find_gear_pairs(gears: list) -> list: ```","solution":"def find_gear_pairs(gears): Returns a list of tuples where each tuple contains a pair of gears with different number of teeth. If no valid pairing is possible, returns an empty list. if len(gears) % 2 != 0: return [] sorted_gears = sorted(gears) paired_gears = [] while sorted_gears: first_gear = sorted_gears.pop(0) for i in range(len(sorted_gears)): if sorted_gears[i] != first_gear: paired_gears.append((first_gear, sorted_gears.pop(i))) break else: return [] return paired_gears"},{"question":"Given a positive integer n, generate a matrix with values from 1 to n² in a spiral order, starting from the top-left corner and moving towards the center in a clockwise direction. The spiral matrix must be returned in a 2D array where each element is an integer from 1 to n² placed in the correct spiral order. # Input The input consists of a single integer n (1 ≤ n ≤ 100). # Output The output should consist of n lines, each line containing n integers that represent the generated spiral matrix. # Example Input: 3 Output: 1 2 3 8 9 4 7 6 5 Input: 4 Output: 1 2 3 4 12 13 14 5 11 16 15 6 10 9 8 7 # Explanation In the first example, the 3x3 matrix should be filled in a spiral order starting with 1 and ending with 9. The sequence progresses as 1 → 2 → 3 → 4 → 5 → 6 → 7 → 8 → 9 in a clockwise direction. In the second example, the 4x4 matrix should be filled similarly, starting with 1 and ending with 16. The sequence progresses as 1 → 2 → 3 → 4 → 5 → 6 → 7 → 8 → 9 → 10 → 11 → 12 → 13 → 14 → 15 → 16, again in a clockwise spiral.","solution":"def generate_spiral_matrix(n): Generates an n x n matrix filled with elements from 1 to n^2 in spiral order. Args: n (int): size of the matrix (1 ≤ n ≤ 100) Returns: list of list of int: the resulting n x n spiral matrix if n <= 0: raise ValueError(\\"n must be a positive integer.\\") matrix = [[0]*n for _ in range(n)] left, right, top, bottom = 0, n-1, 0, n-1 current_num = 1 while left <= right and top <= bottom: for i in range(left, right+1): matrix[top][i] = current_num current_num += 1 top += 1 for i in range(top, bottom+1): matrix[i][right] = current_num current_num += 1 right -= 1 for i in range(right, left-1, -1): matrix[bottom][i] = current_num current_num += 1 bottom -= 1 for i in range(bottom, top-1, -1): matrix[i][left] = current_num current_num += 1 left += 1 return matrix"},{"question":"Find the longest prefix which is also a suffix in a given string S. Constraints * 1 leq length_of_S leq 10^6 * S contains only lowercase English letters (texttt{a-z}) Input The input is given in the following format. S Example Input aabcdaabc Output aabc","solution":"def longest_prefix_suffix(S): Find the longest prefix which is also a suffix in a given string S. n = len(S) # Create the lps array lps = [0] * n length = 0 i = 1 # Build the lps array while i < n: if S[i] == S[length]: length += 1 lps[i] = length i += 1 else: if length != 0: length = lps[length - 1] else: lps[i] = 0 i += 1 return S[:lps[-1]]"},{"question":"A Forest Ranger\'s Task A forest ranger in Northern Canada is monitoring trees within a specific area of the forest. He has recorded data related to different tree species and their heights. He needs to identify the species that have a unique height amongst all recorded trees, meaning that no two trees of this species have the same height. Your task is to write a program that determines the species with unique tree heights. Input The input consists of: - The first line contains the number of tree species S (1 ≤ S ≤ 5). - The following S lines each contain the name of the species (a string of lowercase and uppercase English letters with a maximum length of 20) and the heights of its respective trees (a space-separated list of integers where 1 ≤ height ≤ 1000). Output For each species with unique tree heights, output the species name. If no species has unique tree heights, output \\"None\\". Sample Input 3 Pine 200 300 400 Oak 100 100 250 Maple 150 250 150 Output for the Sample Input Pine Oak None Example Input 3 Pine 200 300 400 Oak 100 100 250 Maple 150 250 150 Output Pine Oak None","solution":"def find_unique_species(species_count, species_data): Identifies species with unique tree heights. Parameters: species_count (int): Number of tree species. species_data (list of tuples): Each tuple contains species name and a list of tree heights. Returns: list of str: Species with unique tree heights or \\"None\\". unique_species = [] for name, heights in species_data: if len(heights) == len(set(heights)): unique_species.append(name) if not unique_species: unique_species.append(\\"None\\") return unique_species # Example usage species_count = 3 species_data = [ (\\"Pine\\", [200, 300, 400]), (\\"Oak\\", [100, 100, 250]), (\\"Maple\\", [150, 250, 150]) ] print(find_unique_species(species_count, species_data)) # Output should be [\'Pine\', \'None\']"},{"question":"Write a function that takes a list of integers and an integer k, and determines whether there is a pair of distinct elements in the list that adds up to k. Constraints * 1 ≤ n ≤ 10^6 (where n is the number of elements in the list) * -10^9 ≤ element of list, k ≤ 10^9 Input The function should take two arguments: 1. A list of integers. 2. An integer k. Output Return True if there exists a pair of distinct elements in the list that adds up to k, otherwise return False. Example Input ``` [10, 15, 3, 7], 17 ``` Output ``` True ``` Input ``` [1, 2, 3, 9], 8 ``` Output ``` False ``` Explanation In the first example, the integers 10 and 7 add up to 17. In the second example, there are no pairs that add up to 8.","solution":"def has_pair_with_sum(lst, k): Determines if there are any two distinct elements in `lst` that add up to `k`. Parameters: lst (list of int): The list of integers. k (int): The target sum. Returns: bool: True if there exists a pair that adds up to `k`, otherwise False. seen = set() for num in lst: if k - num in seen: return True seen.add(num) return False"},{"question":"Lucinda loves to collect rare coins. Each rare coin has a unique denomination and she stores each type of coin in separate boxes. Unfortunately, Lucinda\'s coin room has become quite cluttered, and she wants to sort the coins in ascending order by their denominations and keep them in sequentially numbered boxes starting from 1. Given a list of coin denominations that Lucinda has and another list representing the current box each denomination is stored in, write a program that will output the sorted order of denomination and the new list of corresponding boxes they should be moved to. Input The first line of the input contains a single integer n (1 ≤ n ≤ 100) — the number of different coin denominations. The second line contains n integers d_1, d_2, ..., d_n (1 ≤ d_i ≤ 1000) — the denominations of the coins. The third line contains n integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ 100), where b_i indicates the current box number of the i-th denomination. Output Output two lines: - The first line should contain the sorted denominations. - The second line should contain the new box numbers starting from 1 to n, corresponding to the sorted denominations. Examples Input 4 500 100 200 50 10 4 2 1 Output 50 100 200 500 1 2 3 4 Input 3 300 100 200 5 2 3 Output 100 200 300 1 2 3 Note In the first example, the boxes should be sorted as follows: - Denomination 50 goes to box 1 - Denomination 100 goes to box 2 - Denomination 200 goes to box 3 - Denomination 500 goes to box 4 In the second example, the denominations are sorted to 100, 200, 300, and their boxes are simply renumbered from 1 to 3.","solution":"def sort_denominations(n, denominations, boxes): Sort the coin denominations and renumber the boxes sequentially. Args: n : int : The number of different coin denominations denominations : list of int : The list of coin denominations boxes : list of int : The list of current box numbers of each denomination Returns: tuple : A tuple containing two lists: - The first list is the sorted denominations - The second list is the new sequential box numbers # Create a list of tuples (denomination, box) combined_list = list(zip(denominations, boxes)) # Sort the combined list based on denominations combined_list.sort(key=lambda x: x[0]) # Extract sorted denominations sorted_denominations = [item[0] for item in combined_list] # Generate new box numbers from 1 to n new_boxes = list(range(1, n + 1)) return sorted_denominations, new_boxes"},{"question":"You are given an m x n grid of characters representing a map of the ocean. Each cell in the grid contains one of four types: - \'W\' (water) - \'L\' (land) - \'S\' (shark) - \'F\' (fish) Sharks can only move to adjacent cells (up, down, left, or right) that contain fish (\'F\') or water (\'W\'). They cannot move to cells occupied by land (\'L\') or other sharks (\'S\'). You have to write a function that finds and returns the total number of sharks that can reach at least one fish. Input The first line contains two integers m and n (1 ≤ m, n ≤ 30), the rows and columns of the grid, respectively. The next m lines each contain n characters representing the grid. Output Print the single integer — the number of sharks that can reach at least one fish. Examples Input 3 4 WWFW WWSF WLWW Output 1 Input 4 4 WSWW WFLF WLLW SFFF Output 2 Input 3 3 WWW WLW WFW Output 0 Note In the first example, one shark (\'S\') at position (2, 2) can move to (1, 1) and eat the fish (\'F\'). In the second example, two sharks (\'S\') can each reach fish (\'F\'). In the third example, there are no sharks that can reach fish.","solution":"def num_sharks_can_reach_fish(m, n, grid): def bfs(start_r, start_c): from collections import deque queue = deque([(start_r, start_c)]) visited.add((start_r, start_c)) while queue: r, c = queue.popleft() for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nr, nc = r + dr, c + dc if 0 <= nr < m and 0 <= nc < n and (nr, nc) not in visited: if grid[nr][nc] == \'F\': return True if grid[nr][nc] in {\'W\', \'F\'}: queue.append((nr, nc)) visited.add((nr, nc)) return False visited = set() sharks_reaching_fish = 0 for i in range(m): for j in range(n): if grid[i][j] == \'S\' and (i, j) not in visited: if bfs(i, j): sharks_reaching_fish += 1 return sharks_reaching_fish"},{"question":"You are given two lists of integers, A and B, each containing N elements. Your task is to determine the number of unique pairs (i, j) such that the sum of A[i] and B[j] is even. Note: - A unique pair (i, j) means i and j are indices in the lists A and B respectively, and must satisfy 0 ≤ i, j < N. - The sum of A[i] and B[j] is considered even if it is divisible by 2. Constraints: 1 ≤ N ≤ 2000 1 ≤ A[i], B[j] ≤ 10^6 EXAMPLES Input A: [2, 3, 4] B: [1, 4, 5] Output 4 EXPLANATION In this example, the unique pairs (i, j) whose indices have an even sum are: - (0,1) -> 2 + 4 = 6 (even) - (0,2) -> 2 + 5 = 7 (odd) - (1,0) -> 3 + 1 = 4 (even) - (1,1) -> 3 + 4 = 7 (odd) - (1,2) -> 3 + 5 = 8 (even) - (2,0) -> 4 + 1 = 5 (odd) - (2,1) -> 4 + 4 = 8 (even) - (2,2) -> 4 + 5 = 9 (odd) Hence, the pairs with even sums are: - (0,1) - (1,0) - (1,2) - (2,1) Note: Corresponding elements in pairs are also counted, i.e., (0, 1) is the same as any other combination. # Create a function num_even_sum_pairs(A, B) that accepts two lists of integers, A and B, and returns an integer representing the count of unique pairs (i, j) where the sum of A[i] and B[j] is even. # Function Signature ```python def num_even_sum_pairs(A: List[int], B: List[int]) -> int: pass ``` # Example ```python A = [2, 3, 4] B = [1, 4, 5] print(num_even_sum_pairs(A, B)) # Output: 4 ```","solution":"from typing import List def num_even_sum_pairs(A: List[int], B: List[int]) -> int: even_A = sum(1 for x in A if x % 2 == 0) odd_A = len(A) - even_A even_B = sum(1 for x in B if x % 2 == 0) odd_B = len(B) - even_B return even_A * even_B + odd_A * odd_B"},{"question":"In a magical forest, there are N different types of magical fruits, each having certain health benefits which are represented by an integer value. A wizard named Merlin needs to collect exactly K of these fruits to complete his potion. However, he must maximize the total health benefits of the fruits he collects. You are tasked with finding the maximum total health benefit Merlin can achieve by collecting exactly K fruits from the N available types. Input The first line contains a single integer T, denoting the number of test cases. The following T blocks each represent a test case. Each test case consists of two lines: - The first line contains two space-separated integers N and K. - The second line contains N space-separated integers where each integer represents the health benefit of one type of fruit. Output For each test case, print a single line containing the maximum total health benefit Merlin can achieve. Constraints 1 <= T <= 100 1 <= N <= 1000 1 <= K <= N -1000 <= health benefit <= 1000 Sample cases: Input: 3 5 3 4 -1 2 -5 3 4 2 1 3 2 -2 6 4 -1 -2 -3 -4 -5 -6 Output: 9 5 -10 Explanation: In the first test case, Merlin can collect fruits with health benefits 4, 3, and 2 to maximize the total benefit to 9. In the second test case, Merlin can collect fruits with health benefits 3 and 2 to get a total benefit of 5. In the third test case, since all health benefits are negative, Merlin would collect the least negative fruits, for a total of -10.","solution":"def max_health_benefit(t, test_cases): results = [] for i in range(t): n, k = test_cases[i][0] health_benefits = test_cases[i][1] health_benefits.sort(reverse=True) results.append(sum(health_benefits[:k])) return results # Example usage t = 3 test_cases = [ [(5, 3), [4, -1, 2, -5, 3]], [(4, 2), [1, 3, 2, -2]], [(6, 4), [-1, -2, -3, -4, -5, -6]] ] print(max_health_benefit(t, test_cases))"},{"question":"Given a binary string composed of only characters \'a\' and \'b\', transform it to a palindrome by replacing some characters. The goal is to determine the minimum number of character replacements needed to make the binary string a palindrome. Input The first line contains an integer n (1 ≤ n ≤ 100000), the length of the binary string. The second line contains a binary string of length n composed of characters \'a\' and \'b\'. Output Print the minimum number of character replacements needed to make the given binary string a palindrome. Examples Input 5 ababa Output 0 Input 4 aabb Output 2","solution":"def min_replacements_to_palindrome(n, binary_string): Calculate the minimum number of character replacements needed to make the binary string a palindrome. :param n: Length of the binary string :param binary_string: The binary string composed of \'a\' and \'b\' :return: Minimum number of replacements replacements = 0 for i in range(n // 2): if binary_string[i] != binary_string[n - i - 1]: replacements += 1 return replacements"},{"question":"In a factory, there is a robotic arm that can perform a set of operations to assemble widgets. The robot is controlled by a sequence of commands, where each command is represented by a letter: 1. \'L\' moves the arm left. 2. \'R\' moves the arm right. 3. \'U\' moves the arm up. 4. \'D\' moves the arm down. Given a list of such command sequences, the robot needs to determine its final position after executing all the commands starting from the origin (0,0). Your task is to write a program that takes a list of command sequences and outputs the final position of the robot for each sequence. INPUT: The first line contains an integer T, the number of test cases. Each of the next T lines contains a command sequence consisting of characters \'L\', \'R\', \'U\', and \'D\'. OUTPUT: Output the final position of the robot after executing each command sequence in the format (x,y) where x and y are the coordinates. CONSTRAINTS: 1 <= T <= 10 1 <= length of each command sequence <= 100 SAMPLE INPUT 3 LURD LRRR UUUDDD SAMPLE OUTPUT (0,0) (2,0) (0,0)","solution":"def final_positions(commands): This function computes the final positions of the robot arm after executing each sequence of commands. Parameters: commands (list of str): List of command sequences. Returns: list of tuple: Each tuple contains the final coordinates (x, y) after executing the respective command sequence. results = [] for command in commands: x, y = 0, 0 # Starting from origin (0, 0) for c in command: if c == \'L\': x -= 1 elif c == \'R\': x += 1 elif c == \'U\': y += 1 elif c == \'D\': y -= 1 results.append((x, y)) return results"},{"question":"During the autumn season, Tina loves to watch the colorful leaves fall from the trees. As a hobby, Tina is fascinated by palindromes and likes to play with them in different ways. One day, she decided to create a new game involving strings that are palindromes. The game rules are as follows: Tina will give you a long string consisting of only lowercase English alphabets. Your task is to find the longest contiguous substring in that string which is a palindrome. If there are multiple longest palindromic substrings, you can output any one of them, as long as it is the correct length. Write a program to help Tina by finding the longest palindromic substring in the given string. Input: The input consists of a single string S containing only lowercase English alphabets. Output: Output the longest palindromic substring of the given string. Constraints: 1 ≤ |S| ≤ 1000 All characters of the string S will be lowercase English letters (a-z). SAMPLE INPUT babad SAMPLE OUTPUT bab Explanation: There are two longest palindromic substrings: \\"bab\\" and \\"aba\\". Any of them can be the correct answer.","solution":"def longest_palindromic_substring(s): This function returns the longest palindromic substring in the given string s. if not s: return \\"\\" n = len(s) start, end = 0, 0 def expand_around_center(left, right): while left >= 0 and right < n and s[left] == s[right]: left -= 1 right += 1 # Return the length of the palindrome return right - left - 1 for i in range(n): len1 = expand_around_center(i, i) len2 = expand_around_center(i, i + 1) max_len = max(len1, len2) if max_len > (end - start): start = i - (max_len - 1) // 2 end = i + max_len // 2 return s[start:end + 1]"}]'),S={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:A,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},j={class:"search-container"},Y={class:"card-container"},C={key:0,class:"empty-state"},P=["disabled"],F={key:0},L={key:1};function R(s,e,u,m,r,a){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",j,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>r.searchQuery=o),placeholder:"Search..."},null,512),[[y,r.searchQuery]]),r.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>r.searchQuery="")}," ✕ ")):h("",!0)]),t("div",Y,[(n(!0),i(w,null,_(a.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),i("div",C,' No results found for "'+l(r.searchQuery)+'". ',1)):h("",!0)]),a.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:r.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[r.isLoading?(n(),i("span",L,"Loading...")):(n(),i("span",F,"See more"))],8,P)):h("",!0)])}const z=d(S,[["render",R],["__scopeId","data-v-6f94ec1b"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"deepseek/45.md","filePath":"deepseek/45.md"}'),D={name:"deepseek/45.md"},G=Object.assign(D,{setup(s){return(e,u)=>(n(),i("div",null,[x(z)]))}});export{B as __pageData,G as default};
